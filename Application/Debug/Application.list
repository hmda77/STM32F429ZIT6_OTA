
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e730  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024a4  0802e8e0  0802e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08030d84  08030d84  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08030d84  08030d84  00020d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08030d8c  08030d8c  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08030d8c  08030d8c  00020d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08030d90  08030d90  00020d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08030d94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          000010d0  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011b0  200011b0  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b298  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005987  00000000  00000000  0005b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  00060d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f80  00000000  00000000  00062ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c352  00000000  00000000  00064e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c1d2  00000000  00000000  000911b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f033a  00000000  00000000  000bd384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ad6be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009894  00000000  00000000  001ad710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e0 	.word	0x200000e0
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802e8c8 	.word	0x0802e8c8

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e4 	.word	0x200000e4
 80201ec:	0802e8c8 	.word	0x0802e8c8

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 fd70 	bl	802307c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f88c 	bl	80206b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb26 	bl	8020bf0 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f8f4 	bl	8020790 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f906 	bl	80207b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fad0 	bl	8020b50 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f934 	bl	802081c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f972 	bl	802089c <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 f9f0 	bl	802099c <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa24 	bl	8020a08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fa9c 	bl	8020afc <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00c fc50 	bl	802ce68 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa6e 	bl	8020aa8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4930      	ldr	r1, [pc, #192]	; (8020690 <main+0xfc>)
 80205d0:	4830      	ldr	r0, [pc, #192]	; (8020694 <main+0x100>)
 80205d2:	f008 fbc2 	bl	8028d5a <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2302      	movs	r3, #2
 80205dc:	492e      	ldr	r1, [pc, #184]	; (8020698 <main+0x104>)
 80205de:	482f      	ldr	r0, [pc, #188]	; (802069c <main+0x108>)
 80205e0:	f00d f910 	bl	802d804 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2202      	movs	r2, #2
 80205e8:	4619      	mov	r1, r3
 80205ea:	482d      	ldr	r0, [pc, #180]	; (80206a0 <main+0x10c>)
 80205ec:	f00d f86c 	bl	802d6c8 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f001 febe 	bl	8022370 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f001 ff3b 	bl	8022474 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f001 ff9c 	bl	802253c <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 f846 	bl	8022698 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f001 ffe1 	bl	80225d8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f001 ff9f 	bl	802255c <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4921      	ldr	r1, [pc, #132]	; (80206a4 <main+0x110>)
 8020620:	2000      	movs	r0, #0
 8020622:	f001 ff27 	bl	8022474 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f001 ff88 	bl	802253c <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 f95e 	bl	80228ec <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 f830 	bl	8022698 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f001 fff8 	bl	8022630 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4819      	ldr	r0, [pc, #100]	; (80206a8 <main+0x114>)
 8020642:	f001 ffdd 	bl	8022600 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4819      	ldr	r0, [pc, #100]	; (80206ac <main+0x118>)
 8020648:	f002 f80c 	bl	8022664 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a13      	ldr	r2, [pc, #76]	; (802069c <main+0x108>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 f88c 	bl	8022770 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f001 ffd0 	bl	8022600 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f001 fefc 	bl	802245c <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a0f      	ldr	r2, [pc, #60]	; (80206b0 <main+0x11c>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 f87c 	bl	8022770 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00c fc1c 	bl	802ceb4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	480c      	ldr	r0, [pc, #48]	; (80206b4 <main+0x120>)
 8020684:	f003 ff02 	bl	802448c <HAL_GPIO_WritePin>
    if (ota_update_request){

    	//TODO : ota update request handler
    }
	serial_app();
 8020688:	f000 fc00 	bl	8020e8c <serial_app>
    MX_USB_HOST_Process();
 802068c:	e7f4      	b.n	8020678 <main+0xe4>
 802068e:	bf00      	nop
 8020690:	20000400 	.word	0x20000400
 8020694:	200002e0 	.word	0x200002e0
 8020698:	0802e8e0 	.word	0x0802e8e0
 802069c:	2000039c 	.word	0x2000039c
 80206a0:	0802e900 	.word	0x0802e900
 80206a4:	d0130000 	.word	0xd0130000
 80206a8:	ffff0000 	.word	0xffff0000
 80206ac:	20000048 	.word	0x20000048
 80206b0:	0802e920 	.word	0x0802e920
 80206b4:	40021800 	.word	0x40021800

080206b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b094      	sub	sp, #80	; 0x50
 80206bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206be:	f107 0320 	add.w	r3, r7, #32
 80206c2:	2230      	movs	r2, #48	; 0x30
 80206c4:	2100      	movs	r1, #0
 80206c6:	4618      	mov	r0, r3
 80206c8:	f00c ff16 	bl	802d4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206cc:	f107 030c 	add.w	r3, r7, #12
 80206d0:	2200      	movs	r2, #0
 80206d2:	601a      	str	r2, [r3, #0]
 80206d4:	605a      	str	r2, [r3, #4]
 80206d6:	609a      	str	r2, [r3, #8]
 80206d8:	60da      	str	r2, [r3, #12]
 80206da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80206dc:	2300      	movs	r3, #0
 80206de:	60bb      	str	r3, [r7, #8]
 80206e0:	4b29      	ldr	r3, [pc, #164]	; (8020788 <SystemClock_Config+0xd0>)
 80206e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206e4:	4a28      	ldr	r2, [pc, #160]	; (8020788 <SystemClock_Config+0xd0>)
 80206e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206ea:	6413      	str	r3, [r2, #64]	; 0x40
 80206ec:	4b26      	ldr	r3, [pc, #152]	; (8020788 <SystemClock_Config+0xd0>)
 80206ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206f4:	60bb      	str	r3, [r7, #8]
 80206f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80206f8:	2300      	movs	r3, #0
 80206fa:	607b      	str	r3, [r7, #4]
 80206fc:	4b23      	ldr	r3, [pc, #140]	; (802078c <SystemClock_Config+0xd4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020704:	4a21      	ldr	r2, [pc, #132]	; (802078c <SystemClock_Config+0xd4>)
 8020706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802070a:	6013      	str	r3, [r2, #0]
 802070c:	4b1f      	ldr	r3, [pc, #124]	; (802078c <SystemClock_Config+0xd4>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020714:	607b      	str	r3, [r7, #4]
 8020716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020718:	2301      	movs	r3, #1
 802071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020722:	2302      	movs	r3, #2
 8020724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802072c:	2310      	movs	r3, #16
 802072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020736:	2302      	movs	r3, #2
 8020738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802073a:	2303      	movs	r3, #3
 802073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802073e:	f107 0320 	add.w	r3, r7, #32
 8020742:	4618      	mov	r0, r3
 8020744:	f006 f8ae 	bl	80268a4 <HAL_RCC_OscConfig>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	d001      	beq.n	8020752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802074e:	f000 fb97 	bl	8020e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020752:	230f      	movs	r3, #15
 8020754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020756:	2302      	movs	r3, #2
 8020758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802075a:	2300      	movs	r3, #0
 802075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802076a:	f107 030c 	add.w	r3, r7, #12
 802076e:	2102      	movs	r1, #2
 8020770:	4618      	mov	r0, r3
 8020772:	f006 fb0f 	bl	8026d94 <HAL_RCC_ClockConfig>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	d001      	beq.n	8020780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 802077c:	f000 fb80 	bl	8020e80 <Error_Handler>
  }
}
 8020780:	bf00      	nop
 8020782:	3750      	adds	r7, #80	; 0x50
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	40023800 	.word	0x40023800
 802078c:	40007000 	.word	0x40007000

08020790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020794:	4b06      	ldr	r3, [pc, #24]	; (80207b0 <MX_CRC_Init+0x20>)
 8020796:	4a07      	ldr	r2, [pc, #28]	; (80207b4 <MX_CRC_Init+0x24>)
 8020798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802079a:	4805      	ldr	r0, [pc, #20]	; (80207b0 <MX_CRC_Init+0x20>)
 802079c:	f002 fdb6 	bl	802330c <HAL_CRC_Init>
 80207a0:	4603      	mov	r3, r0
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d001      	beq.n	80207aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207a6:	f000 fb6b 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207aa:	bf00      	nop
 80207ac:	bd80      	pop	{r7, pc}
 80207ae:	bf00      	nop
 80207b0:	200000fc 	.word	0x200000fc
 80207b4:	40023000 	.word	0x40023000

080207b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207bc:	4b15      	ldr	r3, [pc, #84]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207be:	4a16      	ldr	r2, [pc, #88]	; (8020818 <MX_DMA2D_Init+0x60>)
 80207c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207c2:	4b14      	ldr	r3, [pc, #80]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207c8:	4b12      	ldr	r3, [pc, #72]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ca:	2200      	movs	r2, #0
 80207cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207ce:	4b11      	ldr	r3, [pc, #68]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d0:	2200      	movs	r2, #0
 80207d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207d4:	4b0f      	ldr	r3, [pc, #60]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d6:	2200      	movs	r2, #0
 80207d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80207da:	4b0e      	ldr	r3, [pc, #56]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207dc:	2200      	movs	r2, #0
 80207de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80207e0:	4b0c      	ldr	r3, [pc, #48]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e2:	2200      	movs	r2, #0
 80207e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80207e6:	4b0b      	ldr	r3, [pc, #44]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80207ec:	4809      	ldr	r0, [pc, #36]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ee:	f002 fff9 	bl	80237e4 <HAL_DMA2D_Init>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d001      	beq.n	80207fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80207f8:	f000 fb42 	bl	8020e80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80207fc:	2101      	movs	r1, #1
 80207fe:	4805      	ldr	r0, [pc, #20]	; (8020814 <MX_DMA2D_Init+0x5c>)
 8020800:	f003 fa5e 	bl	8023cc0 <HAL_DMA2D_ConfigLayer>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	d001      	beq.n	802080e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802080a:	f000 fb39 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802080e:	bf00      	nop
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop
 8020814:	20000104 	.word	0x20000104
 8020818:	4002b000 	.word	0x4002b000

0802081c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802081c:	b580      	push	{r7, lr}
 802081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020820:	4b1b      	ldr	r3, [pc, #108]	; (8020890 <MX_I2C3_Init+0x74>)
 8020822:	4a1c      	ldr	r2, [pc, #112]	; (8020894 <MX_I2C3_Init+0x78>)
 8020824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020826:	4b1a      	ldr	r3, [pc, #104]	; (8020890 <MX_I2C3_Init+0x74>)
 8020828:	4a1b      	ldr	r2, [pc, #108]	; (8020898 <MX_I2C3_Init+0x7c>)
 802082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802082c:	4b18      	ldr	r3, [pc, #96]	; (8020890 <MX_I2C3_Init+0x74>)
 802082e:	2200      	movs	r2, #0
 8020830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020832:	4b17      	ldr	r3, [pc, #92]	; (8020890 <MX_I2C3_Init+0x74>)
 8020834:	2200      	movs	r2, #0
 8020836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020838:	4b15      	ldr	r3, [pc, #84]	; (8020890 <MX_I2C3_Init+0x74>)
 802083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802083e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020840:	4b13      	ldr	r3, [pc, #76]	; (8020890 <MX_I2C3_Init+0x74>)
 8020842:	2200      	movs	r2, #0
 8020844:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020846:	4b12      	ldr	r3, [pc, #72]	; (8020890 <MX_I2C3_Init+0x74>)
 8020848:	2200      	movs	r2, #0
 802084a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802084c:	4b10      	ldr	r3, [pc, #64]	; (8020890 <MX_I2C3_Init+0x74>)
 802084e:	2200      	movs	r2, #0
 8020850:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020852:	4b0f      	ldr	r3, [pc, #60]	; (8020890 <MX_I2C3_Init+0x74>)
 8020854:	2200      	movs	r2, #0
 8020856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020858:	480d      	ldr	r0, [pc, #52]	; (8020890 <MX_I2C3_Init+0x74>)
 802085a:	f005 fa53 	bl	8025d04 <HAL_I2C_Init>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d001      	beq.n	8020868 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020864:	f000 fb0c 	bl	8020e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020868:	2100      	movs	r1, #0
 802086a:	4809      	ldr	r0, [pc, #36]	; (8020890 <MX_I2C3_Init+0x74>)
 802086c:	f005 fb8e 	bl	8025f8c <HAL_I2CEx_ConfigAnalogFilter>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8020876:	f000 fb03 	bl	8020e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802087a:	2100      	movs	r1, #0
 802087c:	4804      	ldr	r0, [pc, #16]	; (8020890 <MX_I2C3_Init+0x74>)
 802087e:	f005 fbc1 	bl	8026004 <HAL_I2CEx_ConfigDigitalFilter>
 8020882:	4603      	mov	r3, r0
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8020888:	f000 fafa 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 802088c:	bf00      	nop
 802088e:	bd80      	pop	{r7, pc}
 8020890:	20000144 	.word	0x20000144
 8020894:	40005c00 	.word	0x40005c00
 8020898:	000186a0 	.word	0x000186a0

0802089c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b08e      	sub	sp, #56	; 0x38
 80208a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208a2:	1d3b      	adds	r3, r7, #4
 80208a4:	2234      	movs	r2, #52	; 0x34
 80208a6:	2100      	movs	r1, #0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f00c fe25 	bl	802d4f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208ae:	4b39      	ldr	r3, [pc, #228]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b0:	4a39      	ldr	r2, [pc, #228]	; (8020998 <MX_LTDC_Init+0xfc>)
 80208b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208b4:	4b37      	ldr	r3, [pc, #220]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b6:	2200      	movs	r2, #0
 80208b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ba:	4b36      	ldr	r3, [pc, #216]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208bc:	2200      	movs	r2, #0
 80208be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208c0:	4b34      	ldr	r3, [pc, #208]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208c6:	4b33      	ldr	r3, [pc, #204]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208cc:	4b31      	ldr	r3, [pc, #196]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ce:	2209      	movs	r2, #9
 80208d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208d2:	4b30      	ldr	r3, [pc, #192]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208d4:	2201      	movs	r2, #1
 80208d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80208d8:	4b2e      	ldr	r3, [pc, #184]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208da:	221d      	movs	r2, #29
 80208dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80208de:	4b2d      	ldr	r3, [pc, #180]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e0:	2203      	movs	r2, #3
 80208e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80208e4:	4b2b      	ldr	r3, [pc, #172]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e6:	f240 120d 	movw	r2, #269	; 0x10d
 80208ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80208ec:	4b29      	ldr	r3, [pc, #164]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ee:	f240 1243 	movw	r2, #323	; 0x143
 80208f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80208f4:	4b27      	ldr	r3, [pc, #156]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208f6:	f240 1217 	movw	r2, #279	; 0x117
 80208fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80208fc:	4b25      	ldr	r3, [pc, #148]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208fe:	f240 1247 	movw	r2, #327	; 0x147
 8020902:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020904:	4b23      	ldr	r3, [pc, #140]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020906:	2200      	movs	r2, #0
 8020908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802090c:	4b21      	ldr	r3, [pc, #132]	; (8020994 <MX_LTDC_Init+0xf8>)
 802090e:	2200      	movs	r2, #0
 8020910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020914:	4b1f      	ldr	r3, [pc, #124]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020916:	2200      	movs	r2, #0
 8020918:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802091c:	481d      	ldr	r0, [pc, #116]	; (8020994 <MX_LTDC_Init+0xf8>)
 802091e:	f005 fbb1 	bl	8026084 <HAL_LTDC_Init>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020928:	f000 faaa 	bl	8020e80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802092c:	2300      	movs	r3, #0
 802092e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020930:	23f0      	movs	r3, #240	; 0xf0
 8020932:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020934:	2300      	movs	r3, #0
 8020936:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020938:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802093c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802093e:	2302      	movs	r3, #2
 8020940:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020942:	23ff      	movs	r3, #255	; 0xff
 8020944:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020946:	2300      	movs	r3, #0
 8020948:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802094a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802094e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020950:	2307      	movs	r3, #7
 8020952:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020954:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020958:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802095a:	23f0      	movs	r3, #240	; 0xf0
 802095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802095e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020962:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802096a:	2300      	movs	r3, #0
 802096c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020970:	2300      	movs	r3, #0
 8020972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020976:	1d3b      	adds	r3, r7, #4
 8020978:	2200      	movs	r2, #0
 802097a:	4619      	mov	r1, r3
 802097c:	4805      	ldr	r0, [pc, #20]	; (8020994 <MX_LTDC_Init+0xf8>)
 802097e:	f005 fd13 	bl	80263a8 <HAL_LTDC_ConfigLayer>
 8020982:	4603      	mov	r3, r0
 8020984:	2b00      	cmp	r3, #0
 8020986:	d001      	beq.n	802098c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8020988:	f000 fa7a 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 802098c:	bf00      	nop
 802098e:	3738      	adds	r7, #56	; 0x38
 8020990:	46bd      	mov	sp, r7
 8020992:	bd80      	pop	{r7, pc}
 8020994:	20000198 	.word	0x20000198
 8020998:	40016800 	.word	0x40016800

0802099c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 802099c:	b580      	push	{r7, lr}
 802099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209a0:	4b17      	ldr	r3, [pc, #92]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a2:	4a18      	ldr	r2, [pc, #96]	; (8020a04 <MX_SPI5_Init+0x68>)
 80209a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209a6:	4b16      	ldr	r3, [pc, #88]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209ae:	4b14      	ldr	r3, [pc, #80]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b0:	2200      	movs	r2, #0
 80209b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209b4:	4b12      	ldr	r3, [pc, #72]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b6:	2200      	movs	r2, #0
 80209b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ba:	4b11      	ldr	r3, [pc, #68]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209bc:	2200      	movs	r2, #0
 80209be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209c0:	4b0f      	ldr	r3, [pc, #60]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c2:	2200      	movs	r2, #0
 80209c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209c6:	4b0e      	ldr	r3, [pc, #56]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209ce:	4b0c      	ldr	r3, [pc, #48]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d0:	2218      	movs	r2, #24
 80209d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209d4:	4b0a      	ldr	r3, [pc, #40]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d6:	2200      	movs	r2, #0
 80209d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209dc:	2200      	movs	r2, #0
 80209de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209e0:	4b07      	ldr	r3, [pc, #28]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80209e6:	4b06      	ldr	r3, [pc, #24]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e8:	220a      	movs	r2, #10
 80209ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80209ec:	4804      	ldr	r0, [pc, #16]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209ee:	f006 fe74 	bl	80276da <HAL_SPI_Init>
 80209f2:	4603      	mov	r3, r0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d001      	beq.n	80209fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80209f8:	f000 fa42 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80209fc:	bf00      	nop
 80209fe:	bd80      	pop	{r7, pc}
 8020a00:	20000240 	.word	0x20000240
 8020a04:	40015000 	.word	0x40015000

08020a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b086      	sub	sp, #24
 8020a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a0e:	f107 0308 	add.w	r3, r7, #8
 8020a12:	2200      	movs	r2, #0
 8020a14:	601a      	str	r2, [r3, #0]
 8020a16:	605a      	str	r2, [r3, #4]
 8020a18:	609a      	str	r2, [r3, #8]
 8020a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a1c:	463b      	mov	r3, r7
 8020a1e:	2200      	movs	r2, #0
 8020a20:	601a      	str	r2, [r3, #0]
 8020a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a24:	4b1e      	ldr	r3, [pc, #120]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a26:	4a1f      	ldr	r2, [pc, #124]	; (8020aa4 <MX_TIM1_Init+0x9c>)
 8020a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a2a:	4b1d      	ldr	r3, [pc, #116]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a30:	4b1b      	ldr	r3, [pc, #108]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a36:	4b1a      	ldr	r3, [pc, #104]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a3e:	4b18      	ldr	r3, [pc, #96]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a44:	4b16      	ldr	r3, [pc, #88]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a46:	2200      	movs	r2, #0
 8020a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a4a:	4b15      	ldr	r3, [pc, #84]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a50:	4813      	ldr	r0, [pc, #76]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a52:	f007 fc21 	bl	8028298 <HAL_TIM_Base_Init>
 8020a56:	4603      	mov	r3, r0
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d001      	beq.n	8020a60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a5c:	f000 fa10 	bl	8020e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a66:	f107 0308 	add.w	r3, r7, #8
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	480c      	ldr	r0, [pc, #48]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a6e:	f007 fddb 	bl	8028628 <HAL_TIM_ConfigClockSource>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d001      	beq.n	8020a7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020a78:	f000 fa02 	bl	8020e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020a80:	2300      	movs	r3, #0
 8020a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020a84:	463b      	mov	r3, r7
 8020a86:	4619      	mov	r1, r3
 8020a88:	4805      	ldr	r0, [pc, #20]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a8a:	f007 fff7 	bl	8028a7c <HAL_TIMEx_MasterConfigSynchronization>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d001      	beq.n	8020a98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020a94:	f000 f9f4 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020a98:	bf00      	nop
 8020a9a:	3718      	adds	r7, #24
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	20000298 	.word	0x20000298
 8020aa4:	40010000 	.word	0x40010000

08020aa8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020aac:	4b11      	ldr	r3, [pc, #68]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020aae:	4a12      	ldr	r2, [pc, #72]	; (8020af8 <MX_UART5_Init+0x50>)
 8020ab0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020ab2:	4b10      	ldr	r3, [pc, #64]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020ab8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aba:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ac0:	4b0c      	ldr	r3, [pc, #48]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020ac6:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac8:	2200      	movs	r2, #0
 8020aca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020acc:	4b09      	ldr	r3, [pc, #36]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ace:	220c      	movs	r2, #12
 8020ad0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020ad2:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020ad8:	4b06      	ldr	r3, [pc, #24]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020ade:	4805      	ldr	r0, [pc, #20]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ae0:	f008 f85c 	bl	8028b9c <HAL_UART_Init>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020aea:	f000 f9c9 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020aee:	bf00      	nop
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	200002e0 	.word	0x200002e0
 8020af8:	40005000 	.word	0x40005000

08020afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b00:	4b11      	ldr	r3, [pc, #68]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b02:	4a12      	ldr	r2, [pc, #72]	; (8020b4c <MX_USART1_UART_Init+0x50>)
 8020b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b06:	4b10      	ldr	r3, [pc, #64]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b0e:	4b0e      	ldr	r3, [pc, #56]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b14:	4b0c      	ldr	r3, [pc, #48]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b1a:	4b0b      	ldr	r3, [pc, #44]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b20:	4b09      	ldr	r3, [pc, #36]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b22:	220c      	movs	r2, #12
 8020b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b26:	4b08      	ldr	r3, [pc, #32]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b2c:	4b06      	ldr	r3, [pc, #24]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b2e:	2200      	movs	r2, #0
 8020b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b32:	4805      	ldr	r0, [pc, #20]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b34:	f008 f832 	bl	8028b9c <HAL_UART_Init>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b3e:	f000 f99f 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b42:	bf00      	nop
 8020b44:	bd80      	pop	{r7, pc}
 8020b46:	bf00      	nop
 8020b48:	20000324 	.word	0x20000324
 8020b4c:	40011000 	.word	0x40011000

08020b50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b088      	sub	sp, #32
 8020b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b56:	1d3b      	adds	r3, r7, #4
 8020b58:	2200      	movs	r2, #0
 8020b5a:	601a      	str	r2, [r3, #0]
 8020b5c:	605a      	str	r2, [r3, #4]
 8020b5e:	609a      	str	r2, [r3, #8]
 8020b60:	60da      	str	r2, [r3, #12]
 8020b62:	611a      	str	r2, [r3, #16]
 8020b64:	615a      	str	r2, [r3, #20]
 8020b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b68:	4b1f      	ldr	r3, [pc, #124]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b6a:	4a20      	ldr	r2, [pc, #128]	; (8020bec <MX_FMC_Init+0x9c>)
 8020b6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b6e:	4b1e      	ldr	r3, [pc, #120]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b70:	2201      	movs	r2, #1
 8020b72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b74:	4b1c      	ldr	r3, [pc, #112]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b76:	2200      	movs	r2, #0
 8020b78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020b7a:	4b1b      	ldr	r3, [pc, #108]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b7c:	2204      	movs	r2, #4
 8020b7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020b80:	4b19      	ldr	r3, [pc, #100]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b82:	2210      	movs	r2, #16
 8020b84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020b86:	4b18      	ldr	r3, [pc, #96]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b88:	2240      	movs	r2, #64	; 0x40
 8020b8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020b8c:	4b16      	ldr	r3, [pc, #88]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020b92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020b94:	4b14      	ldr	r3, [pc, #80]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020b9a:	4b13      	ldr	r3, [pc, #76]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ba0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020ba2:	4b11      	ldr	r3, [pc, #68]	; (8020be8 <MX_FMC_Init+0x98>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020ba8:	4b0f      	ldr	r3, [pc, #60]	; (8020be8 <MX_FMC_Init+0x98>)
 8020baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bb0:	2302      	movs	r3, #2
 8020bb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bb4:	2307      	movs	r3, #7
 8020bb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020bb8:	2304      	movs	r3, #4
 8020bba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bbc:	2307      	movs	r3, #7
 8020bbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bc0:	2303      	movs	r3, #3
 8020bc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bc4:	2302      	movs	r3, #2
 8020bc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bc8:	2302      	movs	r3, #2
 8020bca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bcc:	1d3b      	adds	r3, r7, #4
 8020bce:	4619      	mov	r1, r3
 8020bd0:	4805      	ldr	r0, [pc, #20]	; (8020be8 <MX_FMC_Init+0x98>)
 8020bd2:	f006 fcf1 	bl	80275b8 <HAL_SDRAM_Init>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d001      	beq.n	8020be0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020bdc:	f000 f950 	bl	8020e80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020be0:	bf00      	nop
 8020be2:	3720      	adds	r7, #32
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	20000368 	.word	0x20000368
 8020bec:	a0000140 	.word	0xa0000140

08020bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b08e      	sub	sp, #56	; 0x38
 8020bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	601a      	str	r2, [r3, #0]
 8020bfe:	605a      	str	r2, [r3, #4]
 8020c00:	609a      	str	r2, [r3, #8]
 8020c02:	60da      	str	r2, [r3, #12]
 8020c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c06:	2300      	movs	r3, #0
 8020c08:	623b      	str	r3, [r7, #32]
 8020c0a:	4b85      	ldr	r3, [pc, #532]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0e:	4a84      	ldr	r2, [pc, #528]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c10:	f043 0304 	orr.w	r3, r3, #4
 8020c14:	6313      	str	r3, [r2, #48]	; 0x30
 8020c16:	4b82      	ldr	r3, [pc, #520]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c1a:	f003 0304 	and.w	r3, r3, #4
 8020c1e:	623b      	str	r3, [r7, #32]
 8020c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c22:	2300      	movs	r3, #0
 8020c24:	61fb      	str	r3, [r7, #28]
 8020c26:	4b7e      	ldr	r3, [pc, #504]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c2a:	4a7d      	ldr	r2, [pc, #500]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c2c:	f043 0320 	orr.w	r3, r3, #32
 8020c30:	6313      	str	r3, [r2, #48]	; 0x30
 8020c32:	4b7b      	ldr	r3, [pc, #492]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	f003 0320 	and.w	r3, r3, #32
 8020c3a:	61fb      	str	r3, [r7, #28]
 8020c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c3e:	2300      	movs	r3, #0
 8020c40:	61bb      	str	r3, [r7, #24]
 8020c42:	4b77      	ldr	r3, [pc, #476]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	4a76      	ldr	r2, [pc, #472]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c4e:	4b74      	ldr	r3, [pc, #464]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c56:	61bb      	str	r3, [r7, #24]
 8020c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	617b      	str	r3, [r7, #20]
 8020c5e:	4b70      	ldr	r3, [pc, #448]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	4a6f      	ldr	r2, [pc, #444]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c64:	f043 0301 	orr.w	r3, r3, #1
 8020c68:	6313      	str	r3, [r2, #48]	; 0x30
 8020c6a:	4b6d      	ldr	r3, [pc, #436]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	f003 0301 	and.w	r3, r3, #1
 8020c72:	617b      	str	r3, [r7, #20]
 8020c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c76:	2300      	movs	r3, #0
 8020c78:	613b      	str	r3, [r7, #16]
 8020c7a:	4b69      	ldr	r3, [pc, #420]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7e:	4a68      	ldr	r2, [pc, #416]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c80:	f043 0302 	orr.w	r3, r3, #2
 8020c84:	6313      	str	r3, [r2, #48]	; 0x30
 8020c86:	4b66      	ldr	r3, [pc, #408]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	f003 0302 	and.w	r3, r3, #2
 8020c8e:	613b      	str	r3, [r7, #16]
 8020c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020c92:	2300      	movs	r3, #0
 8020c94:	60fb      	str	r3, [r7, #12]
 8020c96:	4b62      	ldr	r3, [pc, #392]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9a:	4a61      	ldr	r2, [pc, #388]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ca2:	4b5f      	ldr	r3, [pc, #380]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020caa:	60fb      	str	r3, [r7, #12]
 8020cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cae:	2300      	movs	r3, #0
 8020cb0:	60bb      	str	r3, [r7, #8]
 8020cb2:	4b5b      	ldr	r3, [pc, #364]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb6:	4a5a      	ldr	r2, [pc, #360]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb8:	f043 0310 	orr.w	r3, r3, #16
 8020cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cbe:	4b58      	ldr	r3, [pc, #352]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	f003 0310 	and.w	r3, r3, #16
 8020cc6:	60bb      	str	r3, [r7, #8]
 8020cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cca:	2300      	movs	r3, #0
 8020ccc:	607b      	str	r3, [r7, #4]
 8020cce:	4b54      	ldr	r3, [pc, #336]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd2:	4a53      	ldr	r2, [pc, #332]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd4:	f043 0308 	orr.w	r3, r3, #8
 8020cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cda:	4b51      	ldr	r3, [pc, #324]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	f003 0308 	and.w	r3, r3, #8
 8020ce2:	607b      	str	r3, [r7, #4]
 8020ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020ce6:	2200      	movs	r2, #0
 8020ce8:	2116      	movs	r1, #22
 8020cea:	484e      	ldr	r0, [pc, #312]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020cec:	f003 fbce 	bl	802448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	2180      	movs	r1, #128	; 0x80
 8020cf4:	484c      	ldr	r0, [pc, #304]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020cf6:	f003 fbc9 	bl	802448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d00:	484a      	ldr	r0, [pc, #296]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020d02:	f003 fbc3 	bl	802448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d06:	2200      	movs	r2, #0
 8020d08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d0c:	4848      	ldr	r0, [pc, #288]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020d0e:	f003 fbbd 	bl	802448c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d12:	2316      	movs	r3, #22
 8020d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d16:	2301      	movs	r3, #1
 8020d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d1e:	2300      	movs	r3, #0
 8020d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d26:	4619      	mov	r1, r3
 8020d28:	483e      	ldr	r0, [pc, #248]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d2a:	f003 f8f7 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d2e:	2301      	movs	r3, #1
 8020d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d40:	4619      	mov	r1, r3
 8020d42:	4839      	ldr	r0, [pc, #228]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d44:	f003 f8ea 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d48:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d54:	2300      	movs	r3, #0
 8020d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4832      	ldr	r0, [pc, #200]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d60:	f003 f8dc 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d64:	2380      	movs	r3, #128	; 0x80
 8020d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d70:	2300      	movs	r3, #0
 8020d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d78:	4619      	mov	r1, r3
 8020d7a:	482b      	ldr	r0, [pc, #172]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d7c:	f003 f8ce 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020d80:	2320      	movs	r3, #32
 8020d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d92:	4619      	mov	r1, r3
 8020d94:	4823      	ldr	r0, [pc, #140]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d96:	f003 f8c1 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020d9a:	2304      	movs	r3, #4
 8020d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020daa:	4619      	mov	r1, r3
 8020dac:	4821      	ldr	r0, [pc, #132]	; (8020e34 <MX_GPIO_Init+0x244>)
 8020dae:	f003 f8b5 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020db8:	2300      	movs	r3, #0
 8020dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	4619      	mov	r1, r3
 8020dc6:	4819      	ldr	r0, [pc, #100]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020dc8:	f003 f8a8 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd6:	2300      	movs	r3, #0
 8020dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de2:	4619      	mov	r1, r3
 8020de4:	4811      	ldr	r0, [pc, #68]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020de6:	f003 f899 	bl	8023f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020df0:	2301      	movs	r3, #1
 8020df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020df4:	2300      	movs	r3, #0
 8020df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e00:	4619      	mov	r1, r3
 8020e02:	480b      	ldr	r0, [pc, #44]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020e04:	f003 f88a 	bl	8023f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e08:	2200      	movs	r2, #0
 8020e0a:	2100      	movs	r1, #0
 8020e0c:	2006      	movs	r0, #6
 8020e0e:	f002 fa53 	bl	80232b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e12:	2006      	movs	r0, #6
 8020e14:	f002 fa6c 	bl	80232f0 <HAL_NVIC_EnableIRQ>

}
 8020e18:	bf00      	nop
 8020e1a:	3738      	adds	r7, #56	; 0x38
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}
 8020e20:	40023800 	.word	0x40023800
 8020e24:	40020800 	.word	0x40020800
 8020e28:	40020000 	.word	0x40020000
 8020e2c:	40020c00 	.word	0x40020c00
 8020e30:	40021800 	.word	0x40021800
 8020e34:	40020400 	.word	0x40020400

08020e38 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b082      	sub	sp, #8
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e40:	1d39      	adds	r1, r7, #4
 8020e42:	f04f 33ff 	mov.w	r3, #4294967295
 8020e46:	2201      	movs	r2, #1
 8020e48:	4803      	ldr	r0, [pc, #12]	; (8020e58 <__io_putchar+0x20>)
 8020e4a:	f007 fef4 	bl	8028c36 <HAL_UART_Transmit>
	return ch;
 8020e4e:	687b      	ldr	r3, [r7, #4]
}
 8020e50:	4618      	mov	r0, r3
 8020e52:	3708      	adds	r7, #8
 8020e54:	46bd      	mov	sp, r7
 8020e56:	bd80      	pop	{r7, pc}
 8020e58:	20000324 	.word	0x20000324

08020e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d101      	bne.n	8020e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e6e:	f002 f927 	bl	80230c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e72:	bf00      	nop
 8020e74:	3708      	adds	r7, #8
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	40001000 	.word	0x40001000

08020e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e80:	b480      	push	{r7}
 8020e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e84:	b672      	cpsid	i
}
 8020e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020e88:	e7fe      	b.n	8020e88 <Error_Handler+0x8>
	...

08020e8c <serial_app>:

static void ser_receive_chunk(uint8_t rx_byte);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	af00      	add	r7, sp, #0

	if(chunk_ready == CUN_READY)
 8020e90:	4b0a      	ldr	r3, [pc, #40]	; (8020ebc <serial_app+0x30>)
 8020e92:	781b      	ldrb	r3, [r3, #0]
 8020e94:	2b01      	cmp	r3, #1
 8020e96:	d105      	bne.n	8020ea4 <serial_app+0x18>
	{
		printf("Chunk Received!!!\r\n");
 8020e98:	4809      	ldr	r0, [pc, #36]	; (8020ec0 <serial_app+0x34>)
 8020e9a:	f00c fc9b 	bl	802d7d4 <puts>
		chunk_ready = CUN_EMPTY;
 8020e9e:	4b07      	ldr	r3, [pc, #28]	; (8020ebc <serial_app+0x30>)
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	701a      	strb	r2, [r3, #0]
	}
	if(chunk_ready == CUN_ERROR)
 8020ea4:	4b05      	ldr	r3, [pc, #20]	; (8020ebc <serial_app+0x30>)
 8020ea6:	781b      	ldrb	r3, [r3, #0]
 8020ea8:	2b03      	cmp	r3, #3
 8020eaa:	d105      	bne.n	8020eb8 <serial_app+0x2c>
	{
		printf("Receive Chunk Error\r\n");
 8020eac:	4805      	ldr	r0, [pc, #20]	; (8020ec4 <serial_app+0x38>)
 8020eae:	f00c fc91 	bl	802d7d4 <puts>
		chunk_ready = CUN_EMPTY;
 8020eb2:	4b02      	ldr	r3, [pc, #8]	; (8020ebc <serial_app+0x30>)
 8020eb4:	2200      	movs	r2, #0
 8020eb6:	701a      	strb	r2, [r3, #0]
	}
}
 8020eb8:	bf00      	nop
 8020eba:	bd80      	pop	{r7, pc}
 8020ebc:	20000403 	.word	0x20000403
 8020ec0:	0802e92c 	.word	0x0802e92c
 8020ec4:	0802e940 	.word	0x0802e940

08020ec8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b082      	sub	sp, #8
 8020ecc:	af00      	add	r7, sp, #0
 8020ece:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	4a0f      	ldr	r2, [pc, #60]	; (8020f10 <HAL_UART_RxCpltCallback+0x48>)
 8020ed4:	4293      	cmp	r3, r2
 8020ed6:	d116      	bne.n	8020f06 <HAL_UART_RxCpltCallback+0x3e>
		if((chunk_ready == CUN_EMPTY) || (chunk_ready == CUN_BUSY))
 8020ed8:	4b0e      	ldr	r3, [pc, #56]	; (8020f14 <HAL_UART_RxCpltCallback+0x4c>)
 8020eda:	781b      	ldrb	r3, [r3, #0]
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d003      	beq.n	8020ee8 <HAL_UART_RxCpltCallback+0x20>
 8020ee0:	4b0c      	ldr	r3, [pc, #48]	; (8020f14 <HAL_UART_RxCpltCallback+0x4c>)
 8020ee2:	781b      	ldrb	r3, [r3, #0]
 8020ee4:	2b02      	cmp	r3, #2
 8020ee6:	d104      	bne.n	8020ef2 <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8020ee8:	4b0b      	ldr	r3, [pc, #44]	; (8020f18 <HAL_UART_RxCpltCallback+0x50>)
 8020eea:	781b      	ldrb	r3, [r3, #0]
 8020eec:	4618      	mov	r0, r3
 8020eee:	f000 f815 	bl	8020f1c <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 8020ef2:	2202      	movs	r2, #2
 8020ef4:	2100      	movs	r1, #0
 8020ef6:	4808      	ldr	r0, [pc, #32]	; (8020f18 <HAL_UART_RxCpltCallback+0x50>)
 8020ef8:	f00c fafe 	bl	802d4f8 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8020efc:	2201      	movs	r2, #1
 8020efe:	4906      	ldr	r1, [pc, #24]	; (8020f18 <HAL_UART_RxCpltCallback+0x50>)
 8020f00:	4803      	ldr	r0, [pc, #12]	; (8020f10 <HAL_UART_RxCpltCallback+0x48>)
 8020f02:	f007 ff2a 	bl	8028d5a <HAL_UART_Receive_IT>
	}
}
 8020f06:	bf00      	nop
 8020f08:	3708      	adds	r7, #8
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}
 8020f0e:	bf00      	nop
 8020f10:	200002e0 	.word	0x200002e0
 8020f14:	20000403 	.word	0x20000403
 8020f18:	20000400 	.word	0x20000400

08020f1c <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8020f1c:	b580      	push	{r7, lr}
 8020f1e:	b084      	sub	sp, #16
 8020f20:	af00      	add	r7, sp, #0
 8020f22:	4603      	mov	r3, r0
 8020f24:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 8020f26:	2300      	movs	r3, #0
 8020f28:	60fb      	str	r3, [r7, #12]

	switch(chunk_state){
 8020f2a:	4b71      	ldr	r3, [pc, #452]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8020f2c:	781b      	ldrb	r3, [r3, #0]
 8020f2e:	2b05      	cmp	r3, #5
 8020f30:	f200 80da 	bhi.w	80210e8 <ser_receive_chunk+0x1cc>
 8020f34:	a201      	add	r2, pc, #4	; (adr r2, 8020f3c <ser_receive_chunk+0x20>)
 8020f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f3a:	bf00      	nop
 8020f3c:	08020f55 	.word	0x08020f55
 8020f40:	08020f9d 	.word	0x08020f9d
 8020f44:	08020fdf 	.word	0x08020fdf
 8020f48:	0802101d 	.word	0x0802101d
 8020f4c:	08021047 	.word	0x08021047
 8020f50:	08021081 	.word	0x08021081

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020f54:	f240 4209 	movw	r2, #1033	; 0x409
 8020f58:	2100      	movs	r1, #0
 8020f5a:	4866      	ldr	r0, [pc, #408]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8020f5c:	f00c facc 	bl	802d4f8 <memset>
			idx 		 = 0u;
 8020f60:	4b65      	ldr	r3, [pc, #404]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020f62:	2200      	movs	r2, #0
 8020f64:	801a      	strh	r2, [r3, #0]
			data_len 	 = 0u;
 8020f66:	4b65      	ldr	r3, [pc, #404]	; (80210fc <ser_receive_chunk+0x1e0>)
 8020f68:	2200      	movs	r2, #0
 8020f6a:	801a      	strh	r2, [r3, #0]
			rec_data_crc = 0u;
 8020f6c:	4b64      	ldr	r3, [pc, #400]	; (8021100 <ser_receive_chunk+0x1e4>)
 8020f6e:	2200      	movs	r2, #0
 8020f70:	601a      	str	r2, [r3, #0]


			if(rx_byte == SER_SOF)
 8020f72:	79fb      	ldrb	r3, [r7, #7]
 8020f74:	2baa      	cmp	r3, #170	; 0xaa
 8020f76:	f040 80b0 	bne.w	80210da <ser_receive_chunk+0x1be>
			{
				Rx_Buffer[idx++] = rx_byte;
 8020f7a:	4b5f      	ldr	r3, [pc, #380]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020f7c:	881b      	ldrh	r3, [r3, #0]
 8020f7e:	1c5a      	adds	r2, r3, #1
 8020f80:	b291      	uxth	r1, r2
 8020f82:	4a5d      	ldr	r2, [pc, #372]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020f84:	8011      	strh	r1, [r2, #0]
 8020f86:	4619      	mov	r1, r3
 8020f88:	4a5a      	ldr	r2, [pc, #360]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8020f8a:	79fb      	ldrb	r3, [r7, #7]
 8020f8c:	5453      	strb	r3, [r2, r1]
				chunk_state = CUN_STATE_PKT_TYPE;
 8020f8e:	4b58      	ldr	r3, [pc, #352]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8020f90:	2201      	movs	r2, #1
 8020f92:	701a      	strb	r2, [r3, #0]
				chunk_ready = CUN_BUSY;
 8020f94:	4b5b      	ldr	r3, [pc, #364]	; (8021104 <ser_receive_chunk+0x1e8>)
 8020f96:	2202      	movs	r2, #2
 8020f98:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8020f9a:	e09e      	b.n	80210da <ser_receive_chunk+0x1be>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 8020f9c:	79fb      	ldrb	r3, [r7, #7]
 8020f9e:	2baa      	cmp	r3, #170	; 0xaa
 8020fa0:	d10f      	bne.n	8020fc2 <ser_receive_chunk+0xa6>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020fa2:	f240 4209 	movw	r2, #1033	; 0x409
 8020fa6:	2100      	movs	r1, #0
 8020fa8:	4852      	ldr	r0, [pc, #328]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8020faa:	f00c faa5 	bl	802d4f8 <memset>
				idx 		 = 0u;
 8020fae:	4b52      	ldr	r3, [pc, #328]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	801a      	strh	r2, [r3, #0]
				data_len 	 = 0u;
 8020fb4:	4b51      	ldr	r3, [pc, #324]	; (80210fc <ser_receive_chunk+0x1e0>)
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	801a      	strh	r2, [r3, #0]
				rec_data_crc = 0u;
 8020fba:	4b51      	ldr	r3, [pc, #324]	; (8021100 <ser_receive_chunk+0x1e4>)
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	601a      	str	r2, [r3, #0]
			{
				Rx_Buffer[idx++] = rx_byte;
				chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 8020fc0:	e092      	b.n	80210e8 <ser_receive_chunk+0x1cc>
				Rx_Buffer[idx++] = rx_byte;
 8020fc2:	4b4d      	ldr	r3, [pc, #308]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020fc4:	881b      	ldrh	r3, [r3, #0]
 8020fc6:	1c5a      	adds	r2, r3, #1
 8020fc8:	b291      	uxth	r1, r2
 8020fca:	4a4b      	ldr	r2, [pc, #300]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020fcc:	8011      	strh	r1, [r2, #0]
 8020fce:	4619      	mov	r1, r3
 8020fd0:	4a48      	ldr	r2, [pc, #288]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8020fd2:	79fb      	ldrb	r3, [r7, #7]
 8020fd4:	5453      	strb	r3, [r2, r1]
				chunk_state = CUN_STATE_LENGTH;
 8020fd6:	4b46      	ldr	r3, [pc, #280]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8020fd8:	2202      	movs	r2, #2
 8020fda:	701a      	strb	r2, [r3, #0]
		break;
 8020fdc:	e084      	b.n	80210e8 <ser_receive_chunk+0x1cc>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[idx++] = rx_byte;
 8020fde:	4b46      	ldr	r3, [pc, #280]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020fe0:	881b      	ldrh	r3, [r3, #0]
 8020fe2:	1c5a      	adds	r2, r3, #1
 8020fe4:	b291      	uxth	r1, r2
 8020fe6:	4a44      	ldr	r2, [pc, #272]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020fe8:	8011      	strh	r1, [r2, #0]
 8020fea:	4619      	mov	r1, r3
 8020fec:	4a41      	ldr	r2, [pc, #260]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8020fee:	79fb      	ldrb	r3, [r7, #7]
 8020ff0:	5453      	strb	r3, [r2, r1]

			if( idx >=4 ){
 8020ff2:	4b41      	ldr	r3, [pc, #260]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8020ff4:	881b      	ldrh	r3, [r3, #0]
 8020ff6:	2b03      	cmp	r3, #3
 8020ff8:	d971      	bls.n	80210de <ser_receive_chunk+0x1c2>
				data_len = *(uint16_t *) &Rx_Buffer[2];
 8020ffa:	4b43      	ldr	r3, [pc, #268]	; (8021108 <ser_receive_chunk+0x1ec>)
 8020ffc:	881a      	ldrh	r2, [r3, #0]
 8020ffe:	4b3f      	ldr	r3, [pc, #252]	; (80210fc <ser_receive_chunk+0x1e0>)
 8021000:	801a      	strh	r2, [r3, #0]
				if(data_len <= MAX_SERIAL_DATA_LENGTH){
 8021002:	4b3e      	ldr	r3, [pc, #248]	; (80210fc <ser_receive_chunk+0x1e0>)
 8021004:	881b      	ldrh	r3, [r3, #0]
 8021006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802100a:	d803      	bhi.n	8021014 <ser_receive_chunk+0xf8>
					chunk_state = CUN_STATE_DATA;
 802100c:	4b38      	ldr	r3, [pc, #224]	; (80210f0 <ser_receive_chunk+0x1d4>)
 802100e:	2203      	movs	r2, #3
 8021010:	701a      	strb	r2, [r3, #0]
				else {
					chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021012:	e064      	b.n	80210de <ser_receive_chunk+0x1c2>
					chunk_state = CUN_STATE_SOF;
 8021014:	4b36      	ldr	r3, [pc, #216]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8021016:	2200      	movs	r2, #0
 8021018:	701a      	strb	r2, [r3, #0]
		break;
 802101a:	e060      	b.n	80210de <ser_receive_chunk+0x1c2>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[idx++] = rx_byte;
 802101c:	4b36      	ldr	r3, [pc, #216]	; (80210f8 <ser_receive_chunk+0x1dc>)
 802101e:	881b      	ldrh	r3, [r3, #0]
 8021020:	1c5a      	adds	r2, r3, #1
 8021022:	b291      	uxth	r1, r2
 8021024:	4a34      	ldr	r2, [pc, #208]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021026:	8011      	strh	r1, [r2, #0]
 8021028:	4619      	mov	r1, r3
 802102a:	4a32      	ldr	r2, [pc, #200]	; (80210f4 <ser_receive_chunk+0x1d8>)
 802102c:	79fb      	ldrb	r3, [r7, #7]
 802102e:	5453      	strb	r3, [r2, r1]
			if( idx >= 4+data_len )
 8021030:	4b32      	ldr	r3, [pc, #200]	; (80210fc <ser_receive_chunk+0x1e0>)
 8021032:	881b      	ldrh	r3, [r3, #0]
 8021034:	3303      	adds	r3, #3
 8021036:	4a30      	ldr	r2, [pc, #192]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021038:	8812      	ldrh	r2, [r2, #0]
 802103a:	4293      	cmp	r3, r2
 802103c:	da51      	bge.n	80210e2 <ser_receive_chunk+0x1c6>
			{
				chunk_state = CUN_STATE_CRC;
 802103e:	4b2c      	ldr	r3, [pc, #176]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8021040:	2204      	movs	r2, #4
 8021042:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8021044:	e04d      	b.n	80210e2 <ser_receive_chunk+0x1c6>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[idx++] = rx_byte;
 8021046:	4b2c      	ldr	r3, [pc, #176]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021048:	881b      	ldrh	r3, [r3, #0]
 802104a:	1c5a      	adds	r2, r3, #1
 802104c:	b291      	uxth	r1, r2
 802104e:	4a2a      	ldr	r2, [pc, #168]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021050:	8011      	strh	r1, [r2, #0]
 8021052:	4619      	mov	r1, r3
 8021054:	4a27      	ldr	r2, [pc, #156]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8021056:	79fb      	ldrb	r3, [r7, #7]
 8021058:	5453      	strb	r3, [r2, r1]
			if( idx >= 8+data_len)
 802105a:	4b28      	ldr	r3, [pc, #160]	; (80210fc <ser_receive_chunk+0x1e0>)
 802105c:	881b      	ldrh	r3, [r3, #0]
 802105e:	3307      	adds	r3, #7
 8021060:	4a25      	ldr	r2, [pc, #148]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021062:	8812      	ldrh	r2, [r2, #0]
 8021064:	4293      	cmp	r3, r2
 8021066:	da3e      	bge.n	80210e6 <ser_receive_chunk+0x1ca>
			{
				rec_data_crc = *(uint32_t *) &Rx_Buffer[4+data_len];
 8021068:	4b24      	ldr	r3, [pc, #144]	; (80210fc <ser_receive_chunk+0x1e0>)
 802106a:	881b      	ldrh	r3, [r3, #0]
 802106c:	3304      	adds	r3, #4
 802106e:	4a21      	ldr	r2, [pc, #132]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8021070:	4413      	add	r3, r2
 8021072:	681b      	ldr	r3, [r3, #0]
 8021074:	4a22      	ldr	r2, [pc, #136]	; (8021100 <ser_receive_chunk+0x1e4>)
 8021076:	6013      	str	r3, [r2, #0]
				chunk_state = CUN_STATE_EOF;
 8021078:	4b1d      	ldr	r3, [pc, #116]	; (80210f0 <ser_receive_chunk+0x1d4>)
 802107a:	2205      	movs	r2, #5
 802107c:	701a      	strb	r2, [r3, #0]
			}
		break;
 802107e:	e032      	b.n	80210e6 <ser_receive_chunk+0x1ca>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[idx] = rx_byte;
 8021080:	4b1d      	ldr	r3, [pc, #116]	; (80210f8 <ser_receive_chunk+0x1dc>)
 8021082:	881b      	ldrh	r3, [r3, #0]
 8021084:	4619      	mov	r1, r3
 8021086:	4a1b      	ldr	r2, [pc, #108]	; (80210f4 <ser_receive_chunk+0x1d8>)
 8021088:	79fb      	ldrb	r3, [r7, #7]
 802108a:	5453      	strb	r3, [r2, r1]
				chunk_ready = CUN_ERROR;
 802108c:	4b1d      	ldr	r3, [pc, #116]	; (8021104 <ser_receive_chunk+0x1e8>)
 802108e:	2203      	movs	r2, #3
 8021090:	701a      	strb	r2, [r3, #0]
				chunk_state = CUN_STATE_SOF;
 8021092:	4b17      	ldr	r3, [pc, #92]	; (80210f0 <ser_receive_chunk+0x1d4>)
 8021094:	2200      	movs	r2, #0
 8021096:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[idx] != SER_EOF)
 8021098:	4b17      	ldr	r3, [pc, #92]	; (80210f8 <ser_receive_chunk+0x1dc>)
 802109a:	881b      	ldrh	r3, [r3, #0]
 802109c:	461a      	mov	r2, r3
 802109e:	4b15      	ldr	r3, [pc, #84]	; (80210f4 <ser_receive_chunk+0x1d8>)
 80210a0:	5c9b      	ldrb	r3, [r3, r2]
 80210a2:	2bbb      	cmp	r3, #187	; 0xbb
 80210a4:	d117      	bne.n	80210d6 <ser_receive_chunk+0x1ba>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], data_len);
 80210a6:	4b15      	ldr	r3, [pc, #84]	; (80210fc <ser_receive_chunk+0x1e0>)
 80210a8:	881b      	ldrh	r3, [r3, #0]
 80210aa:	4619      	mov	r1, r3
 80210ac:	4817      	ldr	r0, [pc, #92]	; (802110c <ser_receive_chunk+0x1f0>)
 80210ae:	f000 f831 	bl	8021114 <ser_calcCRC>
 80210b2:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != rec_data_crc)
 80210b4:	4b12      	ldr	r3, [pc, #72]	; (8021100 <ser_receive_chunk+0x1e4>)
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	68fa      	ldr	r2, [r7, #12]
 80210ba:	429a      	cmp	r2, r3
 80210bc:	d007      	beq.n	80210ce <ser_receive_chunk+0x1b2>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80210be:	4b10      	ldr	r3, [pc, #64]	; (8021100 <ser_receive_chunk+0x1e4>)
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	461a      	mov	r2, r3
 80210c4:	68f9      	ldr	r1, [r7, #12]
 80210c6:	4812      	ldr	r0, [pc, #72]	; (8021110 <ser_receive_chunk+0x1f4>)
 80210c8:	f00c fafe 	bl	802d6c8 <iprintf>
												                   cal_data_crc, rec_data_crc );
					break;
 80210cc:	e004      	b.n	80210d8 <ser_receive_chunk+0x1bc>
				}

				chunk_ready = CUN_READY;
 80210ce:	4b0d      	ldr	r3, [pc, #52]	; (8021104 <ser_receive_chunk+0x1e8>)
 80210d0:	2201      	movs	r2, #1
 80210d2:	701a      	strb	r2, [r3, #0]

			}while(false);
		}
		break;
 80210d4:	e008      	b.n	80210e8 <ser_receive_chunk+0x1cc>
					break;
 80210d6:	bf00      	nop
		break;
 80210d8:	e006      	b.n	80210e8 <ser_receive_chunk+0x1cc>
		break;
 80210da:	bf00      	nop
 80210dc:	e004      	b.n	80210e8 <ser_receive_chunk+0x1cc>
		break;
 80210de:	bf00      	nop
 80210e0:	e002      	b.n	80210e8 <ser_receive_chunk+0x1cc>
		break;
 80210e2:	bf00      	nop
 80210e4:	e000      	b.n	80210e8 <ser_receive_chunk+0x1cc>
		break;
 80210e6:	bf00      	nop
	}
}
 80210e8:	bf00      	nop
 80210ea:	3710      	adds	r7, #16
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd80      	pop	{r7, pc}
 80210f0:	20000402 	.word	0x20000402
 80210f4:	20000404 	.word	0x20000404
 80210f8:	2000080e 	.word	0x2000080e
 80210fc:	20000810 	.word	0x20000810
 8021100:	20000814 	.word	0x20000814
 8021104:	20000403 	.word	0x20000403
 8021108:	20000406 	.word	0x20000406
 802110c:	20000408 	.word	0x20000408
 8021110:	0802e958 	.word	0x0802e958

08021114 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8021114:	b480      	push	{r7}
 8021116:	b087      	sub	sp, #28
 8021118:	af00      	add	r7, sp, #0
 802111a:	6078      	str	r0, [r7, #4]
 802111c:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 802111e:	f04f 33ff 	mov.w	r3, #4294967295
 8021122:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8021124:	2300      	movs	r3, #0
 8021126:	613b      	str	r3, [r7, #16]
 8021128:	e014      	b.n	8021154 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 802112a:	697b      	ldr	r3, [r7, #20]
 802112c:	0e1b      	lsrs	r3, r3, #24
 802112e:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8021130:	687a      	ldr	r2, [r7, #4]
 8021132:	693b      	ldr	r3, [r7, #16]
 8021134:	4413      	add	r3, r2
 8021136:	781a      	ldrb	r2, [r3, #0]
 8021138:	7bfb      	ldrb	r3, [r7, #15]
 802113a:	4053      	eors	r3, r2
 802113c:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 802113e:	697b      	ldr	r3, [r7, #20]
 8021140:	021a      	lsls	r2, r3, #8
 8021142:	7bfb      	ldrb	r3, [r7, #15]
 8021144:	4909      	ldr	r1, [pc, #36]	; (802116c <ser_calcCRC+0x58>)
 8021146:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802114a:	4053      	eors	r3, r2
 802114c:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 802114e:	693b      	ldr	r3, [r7, #16]
 8021150:	3301      	adds	r3, #1
 8021152:	613b      	str	r3, [r7, #16]
 8021154:	693a      	ldr	r2, [r7, #16]
 8021156:	683b      	ldr	r3, [r7, #0]
 8021158:	429a      	cmp	r2, r3
 802115a:	d3e6      	bcc.n	802112a <ser_calcCRC+0x16>
    }
    return Checksum;
 802115c:	697b      	ldr	r3, [r7, #20]
}
 802115e:	4618      	mov	r0, r3
 8021160:	371c      	adds	r7, #28
 8021162:	46bd      	mov	sp, r7
 8021164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021168:	4770      	bx	lr
 802116a:	bf00      	nop
 802116c:	0802e9a0 	.word	0x0802e9a0

08021170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021170:	b480      	push	{r7}
 8021172:	b083      	sub	sp, #12
 8021174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021176:	2300      	movs	r3, #0
 8021178:	607b      	str	r3, [r7, #4]
 802117a:	4b10      	ldr	r3, [pc, #64]	; (80211bc <HAL_MspInit+0x4c>)
 802117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802117e:	4a0f      	ldr	r2, [pc, #60]	; (80211bc <HAL_MspInit+0x4c>)
 8021180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021184:	6453      	str	r3, [r2, #68]	; 0x44
 8021186:	4b0d      	ldr	r3, [pc, #52]	; (80211bc <HAL_MspInit+0x4c>)
 8021188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802118e:	607b      	str	r3, [r7, #4]
 8021190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021192:	2300      	movs	r3, #0
 8021194:	603b      	str	r3, [r7, #0]
 8021196:	4b09      	ldr	r3, [pc, #36]	; (80211bc <HAL_MspInit+0x4c>)
 8021198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802119a:	4a08      	ldr	r2, [pc, #32]	; (80211bc <HAL_MspInit+0x4c>)
 802119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80211a0:	6413      	str	r3, [r2, #64]	; 0x40
 80211a2:	4b06      	ldr	r3, [pc, #24]	; (80211bc <HAL_MspInit+0x4c>)
 80211a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80211a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80211aa:	603b      	str	r3, [r7, #0]
 80211ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80211ae:	bf00      	nop
 80211b0:	370c      	adds	r7, #12
 80211b2:	46bd      	mov	sp, r7
 80211b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b8:	4770      	bx	lr
 80211ba:	bf00      	nop
 80211bc:	40023800 	.word	0x40023800

080211c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80211c0:	b480      	push	{r7}
 80211c2:	b085      	sub	sp, #20
 80211c4:	af00      	add	r7, sp, #0
 80211c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	681b      	ldr	r3, [r3, #0]
 80211cc:	4a0b      	ldr	r2, [pc, #44]	; (80211fc <HAL_CRC_MspInit+0x3c>)
 80211ce:	4293      	cmp	r3, r2
 80211d0:	d10d      	bne.n	80211ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80211d2:	2300      	movs	r3, #0
 80211d4:	60fb      	str	r3, [r7, #12]
 80211d6:	4b0a      	ldr	r3, [pc, #40]	; (8021200 <HAL_CRC_MspInit+0x40>)
 80211d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211da:	4a09      	ldr	r2, [pc, #36]	; (8021200 <HAL_CRC_MspInit+0x40>)
 80211dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80211e0:	6313      	str	r3, [r2, #48]	; 0x30
 80211e2:	4b07      	ldr	r3, [pc, #28]	; (8021200 <HAL_CRC_MspInit+0x40>)
 80211e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80211e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80211ea:	60fb      	str	r3, [r7, #12]
 80211ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80211ee:	bf00      	nop
 80211f0:	3714      	adds	r7, #20
 80211f2:	46bd      	mov	sp, r7
 80211f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211f8:	4770      	bx	lr
 80211fa:	bf00      	nop
 80211fc:	40023000 	.word	0x40023000
 8021200:	40023800 	.word	0x40023800

08021204 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021204:	b580      	push	{r7, lr}
 8021206:	b084      	sub	sp, #16
 8021208:	af00      	add	r7, sp, #0
 802120a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 802120c:	687b      	ldr	r3, [r7, #4]
 802120e:	681b      	ldr	r3, [r3, #0]
 8021210:	4a0e      	ldr	r2, [pc, #56]	; (802124c <HAL_DMA2D_MspInit+0x48>)
 8021212:	4293      	cmp	r3, r2
 8021214:	d115      	bne.n	8021242 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021216:	2300      	movs	r3, #0
 8021218:	60fb      	str	r3, [r7, #12]
 802121a:	4b0d      	ldr	r3, [pc, #52]	; (8021250 <HAL_DMA2D_MspInit+0x4c>)
 802121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802121e:	4a0c      	ldr	r2, [pc, #48]	; (8021250 <HAL_DMA2D_MspInit+0x4c>)
 8021220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021224:	6313      	str	r3, [r2, #48]	; 0x30
 8021226:	4b0a      	ldr	r3, [pc, #40]	; (8021250 <HAL_DMA2D_MspInit+0x4c>)
 8021228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802122a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802122e:	60fb      	str	r3, [r7, #12]
 8021230:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8021232:	2200      	movs	r2, #0
 8021234:	2105      	movs	r1, #5
 8021236:	205a      	movs	r0, #90	; 0x5a
 8021238:	f002 f83e 	bl	80232b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802123c:	205a      	movs	r0, #90	; 0x5a
 802123e:	f002 f857 	bl	80232f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8021242:	bf00      	nop
 8021244:	3710      	adds	r7, #16
 8021246:	46bd      	mov	sp, r7
 8021248:	bd80      	pop	{r7, pc}
 802124a:	bf00      	nop
 802124c:	4002b000 	.word	0x4002b000
 8021250:	40023800 	.word	0x40023800

08021254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021254:	b580      	push	{r7, lr}
 8021256:	b08a      	sub	sp, #40	; 0x28
 8021258:	af00      	add	r7, sp, #0
 802125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802125c:	f107 0314 	add.w	r3, r7, #20
 8021260:	2200      	movs	r2, #0
 8021262:	601a      	str	r2, [r3, #0]
 8021264:	605a      	str	r2, [r3, #4]
 8021266:	609a      	str	r2, [r3, #8]
 8021268:	60da      	str	r2, [r3, #12]
 802126a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	4a29      	ldr	r2, [pc, #164]	; (8021318 <HAL_I2C_MspInit+0xc4>)
 8021272:	4293      	cmp	r3, r2
 8021274:	d14b      	bne.n	802130e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021276:	2300      	movs	r3, #0
 8021278:	613b      	str	r3, [r7, #16]
 802127a:	4b28      	ldr	r3, [pc, #160]	; (802131c <HAL_I2C_MspInit+0xc8>)
 802127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802127e:	4a27      	ldr	r2, [pc, #156]	; (802131c <HAL_I2C_MspInit+0xc8>)
 8021280:	f043 0304 	orr.w	r3, r3, #4
 8021284:	6313      	str	r3, [r2, #48]	; 0x30
 8021286:	4b25      	ldr	r3, [pc, #148]	; (802131c <HAL_I2C_MspInit+0xc8>)
 8021288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802128a:	f003 0304 	and.w	r3, r3, #4
 802128e:	613b      	str	r3, [r7, #16]
 8021290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021292:	2300      	movs	r3, #0
 8021294:	60fb      	str	r3, [r7, #12]
 8021296:	4b21      	ldr	r3, [pc, #132]	; (802131c <HAL_I2C_MspInit+0xc8>)
 8021298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802129a:	4a20      	ldr	r2, [pc, #128]	; (802131c <HAL_I2C_MspInit+0xc8>)
 802129c:	f043 0301 	orr.w	r3, r3, #1
 80212a0:	6313      	str	r3, [r2, #48]	; 0x30
 80212a2:	4b1e      	ldr	r3, [pc, #120]	; (802131c <HAL_I2C_MspInit+0xc8>)
 80212a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80212a6:	f003 0301 	and.w	r3, r3, #1
 80212aa:	60fb      	str	r3, [r7, #12]
 80212ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80212ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80212b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80212b4:	2312      	movs	r3, #18
 80212b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80212b8:	2301      	movs	r3, #1
 80212ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212bc:	2300      	movs	r3, #0
 80212be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80212c0:	2304      	movs	r3, #4
 80212c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80212c4:	f107 0314 	add.w	r3, r7, #20
 80212c8:	4619      	mov	r1, r3
 80212ca:	4815      	ldr	r0, [pc, #84]	; (8021320 <HAL_I2C_MspInit+0xcc>)
 80212cc:	f002 fe26 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80212d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80212d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80212d6:	2312      	movs	r3, #18
 80212d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80212da:	2301      	movs	r3, #1
 80212dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212de:	2300      	movs	r3, #0
 80212e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80212e2:	2304      	movs	r3, #4
 80212e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80212e6:	f107 0314 	add.w	r3, r7, #20
 80212ea:	4619      	mov	r1, r3
 80212ec:	480d      	ldr	r0, [pc, #52]	; (8021324 <HAL_I2C_MspInit+0xd0>)
 80212ee:	f002 fe15 	bl	8023f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80212f2:	2300      	movs	r3, #0
 80212f4:	60bb      	str	r3, [r7, #8]
 80212f6:	4b09      	ldr	r3, [pc, #36]	; (802131c <HAL_I2C_MspInit+0xc8>)
 80212f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80212fa:	4a08      	ldr	r2, [pc, #32]	; (802131c <HAL_I2C_MspInit+0xc8>)
 80212fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021300:	6413      	str	r3, [r2, #64]	; 0x40
 8021302:	4b06      	ldr	r3, [pc, #24]	; (802131c <HAL_I2C_MspInit+0xc8>)
 8021304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802130a:	60bb      	str	r3, [r7, #8]
 802130c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802130e:	bf00      	nop
 8021310:	3728      	adds	r7, #40	; 0x28
 8021312:	46bd      	mov	sp, r7
 8021314:	bd80      	pop	{r7, pc}
 8021316:	bf00      	nop
 8021318:	40005c00 	.word	0x40005c00
 802131c:	40023800 	.word	0x40023800
 8021320:	40020800 	.word	0x40020800
 8021324:	40020000 	.word	0x40020000

08021328 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021328:	b580      	push	{r7, lr}
 802132a:	b09a      	sub	sp, #104	; 0x68
 802132c:	af00      	add	r7, sp, #0
 802132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021330:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021334:	2200      	movs	r2, #0
 8021336:	601a      	str	r2, [r3, #0]
 8021338:	605a      	str	r2, [r3, #4]
 802133a:	609a      	str	r2, [r3, #8]
 802133c:	60da      	str	r2, [r3, #12]
 802133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8021340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021344:	2230      	movs	r2, #48	; 0x30
 8021346:	2100      	movs	r1, #0
 8021348:	4618      	mov	r0, r3
 802134a:	f00c f8d5 	bl	802d4f8 <memset>
  if(hltdc->Instance==LTDC)
 802134e:	687b      	ldr	r3, [r7, #4]
 8021350:	681b      	ldr	r3, [r3, #0]
 8021352:	4a85      	ldr	r2, [pc, #532]	; (8021568 <HAL_LTDC_MspInit+0x240>)
 8021354:	4293      	cmp	r3, r2
 8021356:	f040 8102 	bne.w	802155e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802135a:	2308      	movs	r3, #8
 802135c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 802135e:	2331      	movs	r3, #49	; 0x31
 8021360:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8021362:	2302      	movs	r3, #2
 8021364:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8021366:	2300      	movs	r3, #0
 8021368:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802136e:	4618      	mov	r0, r3
 8021370:	f005 ff62 	bl	8027238 <HAL_RCCEx_PeriphCLKConfig>
 8021374:	4603      	mov	r3, r0
 8021376:	2b00      	cmp	r3, #0
 8021378:	d001      	beq.n	802137e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 802137a:	f7ff fd81 	bl	8020e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 802137e:	2300      	movs	r3, #0
 8021380:	623b      	str	r3, [r7, #32]
 8021382:	4b7a      	ldr	r3, [pc, #488]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021386:	4a79      	ldr	r2, [pc, #484]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021388:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 802138c:	6453      	str	r3, [r2, #68]	; 0x44
 802138e:	4b77      	ldr	r3, [pc, #476]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021396:	623b      	str	r3, [r7, #32]
 8021398:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802139a:	2300      	movs	r3, #0
 802139c:	61fb      	str	r3, [r7, #28]
 802139e:	4b73      	ldr	r3, [pc, #460]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213a2:	4a72      	ldr	r2, [pc, #456]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213a4:	f043 0320 	orr.w	r3, r3, #32
 80213a8:	6313      	str	r3, [r2, #48]	; 0x30
 80213aa:	4b70      	ldr	r3, [pc, #448]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213ae:	f003 0320 	and.w	r3, r3, #32
 80213b2:	61fb      	str	r3, [r7, #28]
 80213b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80213b6:	2300      	movs	r3, #0
 80213b8:	61bb      	str	r3, [r7, #24]
 80213ba:	4b6c      	ldr	r3, [pc, #432]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213be:	4a6b      	ldr	r2, [pc, #428]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213c0:	f043 0301 	orr.w	r3, r3, #1
 80213c4:	6313      	str	r3, [r2, #48]	; 0x30
 80213c6:	4b69      	ldr	r3, [pc, #420]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213ca:	f003 0301 	and.w	r3, r3, #1
 80213ce:	61bb      	str	r3, [r7, #24]
 80213d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80213d2:	2300      	movs	r3, #0
 80213d4:	617b      	str	r3, [r7, #20]
 80213d6:	4b65      	ldr	r3, [pc, #404]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213da:	4a64      	ldr	r2, [pc, #400]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213dc:	f043 0302 	orr.w	r3, r3, #2
 80213e0:	6313      	str	r3, [r2, #48]	; 0x30
 80213e2:	4b62      	ldr	r3, [pc, #392]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213e6:	f003 0302 	and.w	r3, r3, #2
 80213ea:	617b      	str	r3, [r7, #20]
 80213ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80213ee:	2300      	movs	r3, #0
 80213f0:	613b      	str	r3, [r7, #16]
 80213f2:	4b5e      	ldr	r3, [pc, #376]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80213f6:	4a5d      	ldr	r2, [pc, #372]	; (802156c <HAL_LTDC_MspInit+0x244>)
 80213f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80213fc:	6313      	str	r3, [r2, #48]	; 0x30
 80213fe:	4b5b      	ldr	r3, [pc, #364]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021406:	613b      	str	r3, [r7, #16]
 8021408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802140a:	2300      	movs	r3, #0
 802140c:	60fb      	str	r3, [r7, #12]
 802140e:	4b57      	ldr	r3, [pc, #348]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021412:	4a56      	ldr	r2, [pc, #344]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021414:	f043 0304 	orr.w	r3, r3, #4
 8021418:	6313      	str	r3, [r2, #48]	; 0x30
 802141a:	4b54      	ldr	r3, [pc, #336]	; (802156c <HAL_LTDC_MspInit+0x244>)
 802141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802141e:	f003 0304 	and.w	r3, r3, #4
 8021422:	60fb      	str	r3, [r7, #12]
 8021424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021426:	2300      	movs	r3, #0
 8021428:	60bb      	str	r3, [r7, #8]
 802142a:	4b50      	ldr	r3, [pc, #320]	; (802156c <HAL_LTDC_MspInit+0x244>)
 802142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802142e:	4a4f      	ldr	r2, [pc, #316]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021430:	f043 0308 	orr.w	r3, r3, #8
 8021434:	6313      	str	r3, [r2, #48]	; 0x30
 8021436:	4b4d      	ldr	r3, [pc, #308]	; (802156c <HAL_LTDC_MspInit+0x244>)
 8021438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802143a:	f003 0308 	and.w	r3, r3, #8
 802143e:	60bb      	str	r3, [r7, #8]
 8021440:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8021442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021446:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021448:	2302      	movs	r3, #2
 802144a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802144c:	2300      	movs	r3, #0
 802144e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021450:	2300      	movs	r3, #0
 8021452:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021454:	230e      	movs	r3, #14
 8021456:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8021458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802145c:	4619      	mov	r1, r3
 802145e:	4844      	ldr	r0, [pc, #272]	; (8021570 <HAL_LTDC_MspInit+0x248>)
 8021460:	f002 fd5c 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8021464:	f641 0358 	movw	r3, #6232	; 0x1858
 8021468:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802146a:	2302      	movs	r3, #2
 802146c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802146e:	2300      	movs	r3, #0
 8021470:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021472:	2300      	movs	r3, #0
 8021474:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021476:	230e      	movs	r3, #14
 8021478:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802147a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802147e:	4619      	mov	r1, r3
 8021480:	483c      	ldr	r0, [pc, #240]	; (8021574 <HAL_LTDC_MspInit+0x24c>)
 8021482:	f002 fd4b 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021486:	2303      	movs	r3, #3
 8021488:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802148a:	2302      	movs	r3, #2
 802148c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802148e:	2300      	movs	r3, #0
 8021490:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021492:	2300      	movs	r3, #0
 8021494:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021496:	2309      	movs	r3, #9
 8021498:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802149a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802149e:	4619      	mov	r1, r3
 80214a0:	4835      	ldr	r0, [pc, #212]	; (8021578 <HAL_LTDC_MspInit+0x250>)
 80214a2:	f002 fd3b 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80214a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80214aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214ac:	2302      	movs	r3, #2
 80214ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214b0:	2300      	movs	r3, #0
 80214b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80214b4:	2300      	movs	r3, #0
 80214b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80214b8:	230e      	movs	r3, #14
 80214ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80214bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80214c0:	4619      	mov	r1, r3
 80214c2:	482d      	ldr	r0, [pc, #180]	; (8021578 <HAL_LTDC_MspInit+0x250>)
 80214c4:	f002 fd2a 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80214c8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80214cc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214ce:	2302      	movs	r3, #2
 80214d0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214d2:	2300      	movs	r3, #0
 80214d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80214d6:	2300      	movs	r3, #0
 80214d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80214da:	230e      	movs	r3, #14
 80214dc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80214de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80214e2:	4619      	mov	r1, r3
 80214e4:	4825      	ldr	r0, [pc, #148]	; (802157c <HAL_LTDC_MspInit+0x254>)
 80214e6:	f002 fd19 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80214ea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80214ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80214f0:	2302      	movs	r3, #2
 80214f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80214f4:	2300      	movs	r3, #0
 80214f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80214f8:	2300      	movs	r3, #0
 80214fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80214fc:	230e      	movs	r3, #14
 80214fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021504:	4619      	mov	r1, r3
 8021506:	481e      	ldr	r0, [pc, #120]	; (8021580 <HAL_LTDC_MspInit+0x258>)
 8021508:	f002 fd08 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 802150c:	2348      	movs	r3, #72	; 0x48
 802150e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021510:	2302      	movs	r3, #2
 8021512:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021514:	2300      	movs	r3, #0
 8021516:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021518:	2300      	movs	r3, #0
 802151a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 802151c:	230e      	movs	r3, #14
 802151e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021520:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021524:	4619      	mov	r1, r3
 8021526:	4817      	ldr	r0, [pc, #92]	; (8021584 <HAL_LTDC_MspInit+0x25c>)
 8021528:	f002 fcf8 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 802152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021530:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021532:	2302      	movs	r3, #2
 8021534:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021536:	2300      	movs	r3, #0
 8021538:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802153a:	2300      	movs	r3, #0
 802153c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 802153e:	2309      	movs	r3, #9
 8021540:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021542:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021546:	4619      	mov	r1, r3
 8021548:	480c      	ldr	r0, [pc, #48]	; (802157c <HAL_LTDC_MspInit+0x254>)
 802154a:	f002 fce7 	bl	8023f1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 802154e:	2200      	movs	r2, #0
 8021550:	2105      	movs	r1, #5
 8021552:	2058      	movs	r0, #88	; 0x58
 8021554:	f001 feb0 	bl	80232b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021558:	2058      	movs	r0, #88	; 0x58
 802155a:	f001 fec9 	bl	80232f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 802155e:	bf00      	nop
 8021560:	3768      	adds	r7, #104	; 0x68
 8021562:	46bd      	mov	sp, r7
 8021564:	bd80      	pop	{r7, pc}
 8021566:	bf00      	nop
 8021568:	40016800 	.word	0x40016800
 802156c:	40023800 	.word	0x40023800
 8021570:	40021400 	.word	0x40021400
 8021574:	40020000 	.word	0x40020000
 8021578:	40020400 	.word	0x40020400
 802157c:	40021800 	.word	0x40021800
 8021580:	40020800 	.word	0x40020800
 8021584:	40020c00 	.word	0x40020c00

08021588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021588:	b580      	push	{r7, lr}
 802158a:	b08a      	sub	sp, #40	; 0x28
 802158c:	af00      	add	r7, sp, #0
 802158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021590:	f107 0314 	add.w	r3, r7, #20
 8021594:	2200      	movs	r2, #0
 8021596:	601a      	str	r2, [r3, #0]
 8021598:	605a      	str	r2, [r3, #4]
 802159a:	609a      	str	r2, [r3, #8]
 802159c:	60da      	str	r2, [r3, #12]
 802159e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80215a0:	687b      	ldr	r3, [r7, #4]
 80215a2:	681b      	ldr	r3, [r3, #0]
 80215a4:	4a19      	ldr	r2, [pc, #100]	; (802160c <HAL_SPI_MspInit+0x84>)
 80215a6:	4293      	cmp	r3, r2
 80215a8:	d12c      	bne.n	8021604 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80215aa:	2300      	movs	r3, #0
 80215ac:	613b      	str	r3, [r7, #16]
 80215ae:	4b18      	ldr	r3, [pc, #96]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215b2:	4a17      	ldr	r2, [pc, #92]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80215b8:	6453      	str	r3, [r2, #68]	; 0x44
 80215ba:	4b15      	ldr	r3, [pc, #84]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80215be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80215c2:	613b      	str	r3, [r7, #16]
 80215c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80215c6:	2300      	movs	r3, #0
 80215c8:	60fb      	str	r3, [r7, #12]
 80215ca:	4b11      	ldr	r3, [pc, #68]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215ce:	4a10      	ldr	r2, [pc, #64]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215d0:	f043 0320 	orr.w	r3, r3, #32
 80215d4:	6313      	str	r3, [r2, #48]	; 0x30
 80215d6:	4b0e      	ldr	r3, [pc, #56]	; (8021610 <HAL_SPI_MspInit+0x88>)
 80215d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80215da:	f003 0320 	and.w	r3, r3, #32
 80215de:	60fb      	str	r3, [r7, #12]
 80215e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80215e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80215e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215e8:	2302      	movs	r3, #2
 80215ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215ec:	2300      	movs	r3, #0
 80215ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215f0:	2300      	movs	r3, #0
 80215f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80215f4:	2305      	movs	r3, #5
 80215f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80215f8:	f107 0314 	add.w	r3, r7, #20
 80215fc:	4619      	mov	r1, r3
 80215fe:	4805      	ldr	r0, [pc, #20]	; (8021614 <HAL_SPI_MspInit+0x8c>)
 8021600:	f002 fc8c 	bl	8023f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021604:	bf00      	nop
 8021606:	3728      	adds	r7, #40	; 0x28
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	40015000 	.word	0x40015000
 8021610:	40023800 	.word	0x40023800
 8021614:	40021400 	.word	0x40021400

08021618 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021618:	b580      	push	{r7, lr}
 802161a:	b082      	sub	sp, #8
 802161c:	af00      	add	r7, sp, #0
 802161e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	681b      	ldr	r3, [r3, #0]
 8021624:	4a08      	ldr	r2, [pc, #32]	; (8021648 <HAL_SPI_MspDeInit+0x30>)
 8021626:	4293      	cmp	r3, r2
 8021628:	d10a      	bne.n	8021640 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 802162a:	4b08      	ldr	r3, [pc, #32]	; (802164c <HAL_SPI_MspDeInit+0x34>)
 802162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802162e:	4a07      	ldr	r2, [pc, #28]	; (802164c <HAL_SPI_MspDeInit+0x34>)
 8021630:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021634:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021636:	f44f 7160 	mov.w	r1, #896	; 0x380
 802163a:	4805      	ldr	r0, [pc, #20]	; (8021650 <HAL_SPI_MspDeInit+0x38>)
 802163c:	f002 fe1a 	bl	8024274 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021640:	bf00      	nop
 8021642:	3708      	adds	r7, #8
 8021644:	46bd      	mov	sp, r7
 8021646:	bd80      	pop	{r7, pc}
 8021648:	40015000 	.word	0x40015000
 802164c:	40023800 	.word	0x40023800
 8021650:	40021400 	.word	0x40021400

08021654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021654:	b480      	push	{r7}
 8021656:	b085      	sub	sp, #20
 8021658:	af00      	add	r7, sp, #0
 802165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	681b      	ldr	r3, [r3, #0]
 8021660:	4a0b      	ldr	r2, [pc, #44]	; (8021690 <HAL_TIM_Base_MspInit+0x3c>)
 8021662:	4293      	cmp	r3, r2
 8021664:	d10d      	bne.n	8021682 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021666:	2300      	movs	r3, #0
 8021668:	60fb      	str	r3, [r7, #12]
 802166a:	4b0a      	ldr	r3, [pc, #40]	; (8021694 <HAL_TIM_Base_MspInit+0x40>)
 802166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802166e:	4a09      	ldr	r2, [pc, #36]	; (8021694 <HAL_TIM_Base_MspInit+0x40>)
 8021670:	f043 0301 	orr.w	r3, r3, #1
 8021674:	6453      	str	r3, [r2, #68]	; 0x44
 8021676:	4b07      	ldr	r3, [pc, #28]	; (8021694 <HAL_TIM_Base_MspInit+0x40>)
 8021678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802167a:	f003 0301 	and.w	r3, r3, #1
 802167e:	60fb      	str	r3, [r7, #12]
 8021680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021682:	bf00      	nop
 8021684:	3714      	adds	r7, #20
 8021686:	46bd      	mov	sp, r7
 8021688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802168c:	4770      	bx	lr
 802168e:	bf00      	nop
 8021690:	40010000 	.word	0x40010000
 8021694:	40023800 	.word	0x40023800

08021698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021698:	b580      	push	{r7, lr}
 802169a:	b08c      	sub	sp, #48	; 0x30
 802169c:	af00      	add	r7, sp, #0
 802169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80216a0:	f107 031c 	add.w	r3, r7, #28
 80216a4:	2200      	movs	r2, #0
 80216a6:	601a      	str	r2, [r3, #0]
 80216a8:	605a      	str	r2, [r3, #4]
 80216aa:	609a      	str	r2, [r3, #8]
 80216ac:	60da      	str	r2, [r3, #12]
 80216ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	4a46      	ldr	r2, [pc, #280]	; (80217d0 <HAL_UART_MspInit+0x138>)
 80216b6:	4293      	cmp	r3, r2
 80216b8:	d153      	bne.n	8021762 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80216ba:	2300      	movs	r3, #0
 80216bc:	61bb      	str	r3, [r7, #24]
 80216be:	4b45      	ldr	r3, [pc, #276]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216c2:	4a44      	ldr	r2, [pc, #272]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80216c8:	6413      	str	r3, [r2, #64]	; 0x40
 80216ca:	4b42      	ldr	r3, [pc, #264]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80216d2:	61bb      	str	r3, [r7, #24]
 80216d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80216d6:	2300      	movs	r3, #0
 80216d8:	617b      	str	r3, [r7, #20]
 80216da:	4b3e      	ldr	r3, [pc, #248]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216de:	4a3d      	ldr	r2, [pc, #244]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216e0:	f043 0304 	orr.w	r3, r3, #4
 80216e4:	6313      	str	r3, [r2, #48]	; 0x30
 80216e6:	4b3b      	ldr	r3, [pc, #236]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ea:	f003 0304 	and.w	r3, r3, #4
 80216ee:	617b      	str	r3, [r7, #20]
 80216f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80216f2:	2300      	movs	r3, #0
 80216f4:	613b      	str	r3, [r7, #16]
 80216f6:	4b37      	ldr	r3, [pc, #220]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216fa:	4a36      	ldr	r2, [pc, #216]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 80216fc:	f043 0308 	orr.w	r3, r3, #8
 8021700:	6313      	str	r3, [r2, #48]	; 0x30
 8021702:	4b34      	ldr	r3, [pc, #208]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 8021704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021706:	f003 0308 	and.w	r3, r3, #8
 802170a:	613b      	str	r3, [r7, #16]
 802170c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 802170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021714:	2302      	movs	r3, #2
 8021716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021718:	2300      	movs	r3, #0
 802171a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802171c:	2303      	movs	r3, #3
 802171e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021720:	2308      	movs	r3, #8
 8021722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021724:	f107 031c 	add.w	r3, r7, #28
 8021728:	4619      	mov	r1, r3
 802172a:	482b      	ldr	r0, [pc, #172]	; (80217d8 <HAL_UART_MspInit+0x140>)
 802172c:	f002 fbf6 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021730:	2304      	movs	r3, #4
 8021732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021734:	2302      	movs	r3, #2
 8021736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021738:	2300      	movs	r3, #0
 802173a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802173c:	2303      	movs	r3, #3
 802173e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021740:	2308      	movs	r3, #8
 8021742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021744:	f107 031c 	add.w	r3, r7, #28
 8021748:	4619      	mov	r1, r3
 802174a:	4824      	ldr	r0, [pc, #144]	; (80217dc <HAL_UART_MspInit+0x144>)
 802174c:	f002 fbe6 	bl	8023f1c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021750:	2200      	movs	r2, #0
 8021752:	2100      	movs	r1, #0
 8021754:	2035      	movs	r0, #53	; 0x35
 8021756:	f001 fdaf 	bl	80232b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 802175a:	2035      	movs	r0, #53	; 0x35
 802175c:	f001 fdc8 	bl	80232f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021760:	e031      	b.n	80217c6 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	681b      	ldr	r3, [r3, #0]
 8021766:	4a1e      	ldr	r2, [pc, #120]	; (80217e0 <HAL_UART_MspInit+0x148>)
 8021768:	4293      	cmp	r3, r2
 802176a:	d12c      	bne.n	80217c6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 802176c:	2300      	movs	r3, #0
 802176e:	60fb      	str	r3, [r7, #12]
 8021770:	4b18      	ldr	r3, [pc, #96]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 8021772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021774:	4a17      	ldr	r2, [pc, #92]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 8021776:	f043 0310 	orr.w	r3, r3, #16
 802177a:	6453      	str	r3, [r2, #68]	; 0x44
 802177c:	4b15      	ldr	r3, [pc, #84]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 802177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021780:	f003 0310 	and.w	r3, r3, #16
 8021784:	60fb      	str	r3, [r7, #12]
 8021786:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021788:	2300      	movs	r3, #0
 802178a:	60bb      	str	r3, [r7, #8]
 802178c:	4b11      	ldr	r3, [pc, #68]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 802178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021790:	4a10      	ldr	r2, [pc, #64]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 8021792:	f043 0301 	orr.w	r3, r3, #1
 8021796:	6313      	str	r3, [r2, #48]	; 0x30
 8021798:	4b0e      	ldr	r3, [pc, #56]	; (80217d4 <HAL_UART_MspInit+0x13c>)
 802179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802179c:	f003 0301 	and.w	r3, r3, #1
 80217a0:	60bb      	str	r3, [r7, #8]
 80217a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80217a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80217a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80217aa:	2302      	movs	r3, #2
 80217ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217ae:	2300      	movs	r3, #0
 80217b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80217b2:	2303      	movs	r3, #3
 80217b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80217b6:	2307      	movs	r3, #7
 80217b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80217ba:	f107 031c 	add.w	r3, r7, #28
 80217be:	4619      	mov	r1, r3
 80217c0:	4808      	ldr	r0, [pc, #32]	; (80217e4 <HAL_UART_MspInit+0x14c>)
 80217c2:	f002 fbab 	bl	8023f1c <HAL_GPIO_Init>
}
 80217c6:	bf00      	nop
 80217c8:	3730      	adds	r7, #48	; 0x30
 80217ca:	46bd      	mov	sp, r7
 80217cc:	bd80      	pop	{r7, pc}
 80217ce:	bf00      	nop
 80217d0:	40005000 	.word	0x40005000
 80217d4:	40023800 	.word	0x40023800
 80217d8:	40020800 	.word	0x40020800
 80217dc:	40020c00 	.word	0x40020c00
 80217e0:	40011000 	.word	0x40011000
 80217e4:	40020000 	.word	0x40020000

080217e8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80217e8:	b580      	push	{r7, lr}
 80217ea:	b086      	sub	sp, #24
 80217ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80217ee:	1d3b      	adds	r3, r7, #4
 80217f0:	2200      	movs	r2, #0
 80217f2:	601a      	str	r2, [r3, #0]
 80217f4:	605a      	str	r2, [r3, #4]
 80217f6:	609a      	str	r2, [r3, #8]
 80217f8:	60da      	str	r2, [r3, #12]
 80217fa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80217fc:	4b3b      	ldr	r3, [pc, #236]	; (80218ec <HAL_FMC_MspInit+0x104>)
 80217fe:	681b      	ldr	r3, [r3, #0]
 8021800:	2b00      	cmp	r3, #0
 8021802:	d16f      	bne.n	80218e4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021804:	4b39      	ldr	r3, [pc, #228]	; (80218ec <HAL_FMC_MspInit+0x104>)
 8021806:	2201      	movs	r2, #1
 8021808:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 802180a:	2300      	movs	r3, #0
 802180c:	603b      	str	r3, [r7, #0]
 802180e:	4b38      	ldr	r3, [pc, #224]	; (80218f0 <HAL_FMC_MspInit+0x108>)
 8021810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021812:	4a37      	ldr	r2, [pc, #220]	; (80218f0 <HAL_FMC_MspInit+0x108>)
 8021814:	f043 0301 	orr.w	r3, r3, #1
 8021818:	6393      	str	r3, [r2, #56]	; 0x38
 802181a:	4b35      	ldr	r3, [pc, #212]	; (80218f0 <HAL_FMC_MspInit+0x108>)
 802181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802181e:	f003 0301 	and.w	r3, r3, #1
 8021822:	603b      	str	r3, [r7, #0]
 8021824:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021826:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802182a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802182c:	2302      	movs	r3, #2
 802182e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021830:	2300      	movs	r3, #0
 8021832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021834:	2303      	movs	r3, #3
 8021836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021838:	230c      	movs	r3, #12
 802183a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 802183c:	1d3b      	adds	r3, r7, #4
 802183e:	4619      	mov	r1, r3
 8021840:	482c      	ldr	r0, [pc, #176]	; (80218f4 <HAL_FMC_MspInit+0x10c>)
 8021842:	f002 fb6b 	bl	8023f1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021846:	2301      	movs	r3, #1
 8021848:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802184a:	2302      	movs	r3, #2
 802184c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802184e:	2300      	movs	r3, #0
 8021850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021852:	2303      	movs	r3, #3
 8021854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021856:	230c      	movs	r3, #12
 8021858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 802185a:	1d3b      	adds	r3, r7, #4
 802185c:	4619      	mov	r1, r3
 802185e:	4826      	ldr	r0, [pc, #152]	; (80218f8 <HAL_FMC_MspInit+0x110>)
 8021860:	f002 fb5c 	bl	8023f1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021864:	f248 1333 	movw	r3, #33075	; 0x8133
 8021868:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802186a:	2302      	movs	r3, #2
 802186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802186e:	2300      	movs	r3, #0
 8021870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021872:	2303      	movs	r3, #3
 8021874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021876:	230c      	movs	r3, #12
 8021878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802187a:	1d3b      	adds	r3, r7, #4
 802187c:	4619      	mov	r1, r3
 802187e:	481f      	ldr	r0, [pc, #124]	; (80218fc <HAL_FMC_MspInit+0x114>)
 8021880:	f002 fb4c 	bl	8023f1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021884:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021888:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802188a:	2302      	movs	r3, #2
 802188c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802188e:	2300      	movs	r3, #0
 8021890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021892:	2303      	movs	r3, #3
 8021894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021896:	230c      	movs	r3, #12
 8021898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802189a:	1d3b      	adds	r3, r7, #4
 802189c:	4619      	mov	r1, r3
 802189e:	4818      	ldr	r0, [pc, #96]	; (8021900 <HAL_FMC_MspInit+0x118>)
 80218a0:	f002 fb3c 	bl	8023f1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80218a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80218a8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218aa:	2302      	movs	r3, #2
 80218ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218ae:	2300      	movs	r3, #0
 80218b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218b2:	2303      	movs	r3, #3
 80218b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80218b6:	230c      	movs	r3, #12
 80218b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80218ba:	1d3b      	adds	r3, r7, #4
 80218bc:	4619      	mov	r1, r3
 80218be:	4811      	ldr	r0, [pc, #68]	; (8021904 <HAL_FMC_MspInit+0x11c>)
 80218c0:	f002 fb2c 	bl	8023f1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80218c4:	2360      	movs	r3, #96	; 0x60
 80218c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218c8:	2302      	movs	r3, #2
 80218ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218cc:	2300      	movs	r3, #0
 80218ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218d0:	2303      	movs	r3, #3
 80218d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80218d4:	230c      	movs	r3, #12
 80218d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80218d8:	1d3b      	adds	r3, r7, #4
 80218da:	4619      	mov	r1, r3
 80218dc:	480a      	ldr	r0, [pc, #40]	; (8021908 <HAL_FMC_MspInit+0x120>)
 80218de:	f002 fb1d 	bl	8023f1c <HAL_GPIO_Init>
 80218e2:	e000      	b.n	80218e6 <HAL_FMC_MspInit+0xfe>
    return;
 80218e4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80218e6:	3718      	adds	r7, #24
 80218e8:	46bd      	mov	sp, r7
 80218ea:	bd80      	pop	{r7, pc}
 80218ec:	20000818 	.word	0x20000818
 80218f0:	40023800 	.word	0x40023800
 80218f4:	40021400 	.word	0x40021400
 80218f8:	40020800 	.word	0x40020800
 80218fc:	40021800 	.word	0x40021800
 8021900:	40021000 	.word	0x40021000
 8021904:	40020c00 	.word	0x40020c00
 8021908:	40020400 	.word	0x40020400

0802190c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 802190c:	b580      	push	{r7, lr}
 802190e:	b082      	sub	sp, #8
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021914:	f7ff ff68 	bl	80217e8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021918:	bf00      	nop
 802191a:	3708      	adds	r7, #8
 802191c:	46bd      	mov	sp, r7
 802191e:	bd80      	pop	{r7, pc}

08021920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b08e      	sub	sp, #56	; 0x38
 8021924:	af00      	add	r7, sp, #0
 8021926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021928:	2300      	movs	r3, #0
 802192a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 802192c:	2300      	movs	r3, #0
 802192e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021930:	2300      	movs	r3, #0
 8021932:	60fb      	str	r3, [r7, #12]
 8021934:	4b33      	ldr	r3, [pc, #204]	; (8021a04 <HAL_InitTick+0xe4>)
 8021936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021938:	4a32      	ldr	r2, [pc, #200]	; (8021a04 <HAL_InitTick+0xe4>)
 802193a:	f043 0310 	orr.w	r3, r3, #16
 802193e:	6413      	str	r3, [r2, #64]	; 0x40
 8021940:	4b30      	ldr	r3, [pc, #192]	; (8021a04 <HAL_InitTick+0xe4>)
 8021942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021944:	f003 0310 	and.w	r3, r3, #16
 8021948:	60fb      	str	r3, [r7, #12]
 802194a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 802194c:	f107 0210 	add.w	r2, r7, #16
 8021950:	f107 0314 	add.w	r3, r7, #20
 8021954:	4611      	mov	r1, r2
 8021956:	4618      	mov	r0, r3
 8021958:	f005 fc3c 	bl	80271d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 802195c:	6a3b      	ldr	r3, [r7, #32]
 802195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021962:	2b00      	cmp	r3, #0
 8021964:	d103      	bne.n	802196e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021966:	f005 fc0d 	bl	8027184 <HAL_RCC_GetPCLK1Freq>
 802196a:	6378      	str	r0, [r7, #52]	; 0x34
 802196c:	e004      	b.n	8021978 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 802196e:	f005 fc09 	bl	8027184 <HAL_RCC_GetPCLK1Freq>
 8021972:	4603      	mov	r3, r0
 8021974:	005b      	lsls	r3, r3, #1
 8021976:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802197a:	4a23      	ldr	r2, [pc, #140]	; (8021a08 <HAL_InitTick+0xe8>)
 802197c:	fba2 2303 	umull	r2, r3, r2, r3
 8021980:	0c9b      	lsrs	r3, r3, #18
 8021982:	3b01      	subs	r3, #1
 8021984:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021986:	4b21      	ldr	r3, [pc, #132]	; (8021a0c <HAL_InitTick+0xec>)
 8021988:	4a21      	ldr	r2, [pc, #132]	; (8021a10 <HAL_InitTick+0xf0>)
 802198a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 802198c:	4b1f      	ldr	r3, [pc, #124]	; (8021a0c <HAL_InitTick+0xec>)
 802198e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021992:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021994:	4a1d      	ldr	r2, [pc, #116]	; (8021a0c <HAL_InitTick+0xec>)
 8021996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021998:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 802199a:	4b1c      	ldr	r3, [pc, #112]	; (8021a0c <HAL_InitTick+0xec>)
 802199c:	2200      	movs	r2, #0
 802199e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80219a0:	4b1a      	ldr	r3, [pc, #104]	; (8021a0c <HAL_InitTick+0xec>)
 80219a2:	2200      	movs	r2, #0
 80219a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80219a6:	4b19      	ldr	r3, [pc, #100]	; (8021a0c <HAL_InitTick+0xec>)
 80219a8:	2200      	movs	r2, #0
 80219aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80219ac:	4817      	ldr	r0, [pc, #92]	; (8021a0c <HAL_InitTick+0xec>)
 80219ae:	f006 fc73 	bl	8028298 <HAL_TIM_Base_Init>
 80219b2:	4603      	mov	r3, r0
 80219b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80219b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d11b      	bne.n	80219f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80219c0:	4812      	ldr	r0, [pc, #72]	; (8021a0c <HAL_InitTick+0xec>)
 80219c2:	f006 fcb9 	bl	8028338 <HAL_TIM_Base_Start_IT>
 80219c6:	4603      	mov	r3, r0
 80219c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80219cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d111      	bne.n	80219f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80219d4:	2036      	movs	r0, #54	; 0x36
 80219d6:	f001 fc8b 	bl	80232f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80219da:	687b      	ldr	r3, [r7, #4]
 80219dc:	2b0f      	cmp	r3, #15
 80219de:	d808      	bhi.n	80219f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80219e0:	2200      	movs	r2, #0
 80219e2:	6879      	ldr	r1, [r7, #4]
 80219e4:	2036      	movs	r0, #54	; 0x36
 80219e6:	f001 fc67 	bl	80232b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80219ea:	4a0a      	ldr	r2, [pc, #40]	; (8021a14 <HAL_InitTick+0xf4>)
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	6013      	str	r3, [r2, #0]
 80219f0:	e002      	b.n	80219f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80219f2:	2301      	movs	r3, #1
 80219f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80219f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	3738      	adds	r7, #56	; 0x38
 8021a00:	46bd      	mov	sp, r7
 8021a02:	bd80      	pop	{r7, pc}
 8021a04:	40023800 	.word	0x40023800
 8021a08:	431bde83 	.word	0x431bde83
 8021a0c:	2000081c 	.word	0x2000081c
 8021a10:	40001000 	.word	0x40001000
 8021a14:	20000054 	.word	0x20000054

08021a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021a18:	b480      	push	{r7}
 8021a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021a1c:	e7fe      	b.n	8021a1c <NMI_Handler+0x4>

08021a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021a1e:	b480      	push	{r7}
 8021a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021a22:	e7fe      	b.n	8021a22 <HardFault_Handler+0x4>

08021a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021a24:	b480      	push	{r7}
 8021a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021a28:	e7fe      	b.n	8021a28 <MemManage_Handler+0x4>

08021a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021a2a:	b480      	push	{r7}
 8021a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021a2e:	e7fe      	b.n	8021a2e <BusFault_Handler+0x4>

08021a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021a30:	b480      	push	{r7}
 8021a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021a34:	e7fe      	b.n	8021a34 <UsageFault_Handler+0x4>

08021a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021a36:	b480      	push	{r7}
 8021a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021a3a:	bf00      	nop
 8021a3c:	46bd      	mov	sp, r7
 8021a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a42:	4770      	bx	lr

08021a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021a44:	b480      	push	{r7}
 8021a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021a48:	bf00      	nop
 8021a4a:	46bd      	mov	sp, r7
 8021a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a50:	4770      	bx	lr

08021a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021a52:	b480      	push	{r7}
 8021a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021a56:	bf00      	nop
 8021a58:	46bd      	mov	sp, r7
 8021a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5e:	4770      	bx	lr

08021a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021a60:	b480      	push	{r7}
 8021a62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021a64:	bf00      	nop
 8021a66:	46bd      	mov	sp, r7
 8021a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a6c:	4770      	bx	lr

08021a6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021a6e:	b580      	push	{r7, lr}
 8021a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021a72:	2001      	movs	r0, #1
 8021a74:	f002 fd24 	bl	80244c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021a78:	bf00      	nop
 8021a7a:	bd80      	pop	{r7, pc}

08021a7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8021a7c:	b580      	push	{r7, lr}
 8021a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8021a80:	4802      	ldr	r0, [pc, #8]	; (8021a8c <UART5_IRQHandler+0x10>)
 8021a82:	f007 f99b 	bl	8028dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8021a86:	bf00      	nop
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	200002e0 	.word	0x200002e0

08021a90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021a94:	4802      	ldr	r0, [pc, #8]	; (8021aa0 <TIM6_DAC_IRQHandler+0x10>)
 8021a96:	f006 fcbf 	bl	8028418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8021a9a:	bf00      	nop
 8021a9c:	bd80      	pop	{r7, pc}
 8021a9e:	bf00      	nop
 8021aa0:	2000081c 	.word	0x2000081c

08021aa4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021aa4:	b580      	push	{r7, lr}
 8021aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021aa8:	4802      	ldr	r0, [pc, #8]	; (8021ab4 <OTG_HS_IRQHandler+0x10>)
 8021aaa:	f002 ff8b 	bl	80249c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021aae:	bf00      	nop
 8021ab0:	bd80      	pop	{r7, pc}
 8021ab2:	bf00      	nop
 8021ab4:	20000e9c 	.word	0x20000e9c

08021ab8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8021ab8:	b580      	push	{r7, lr}
 8021aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8021abc:	4802      	ldr	r0, [pc, #8]	; (8021ac8 <LTDC_IRQHandler+0x10>)
 8021abe:	f004 fbb1 	bl	8026224 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8021ac2:	bf00      	nop
 8021ac4:	bd80      	pop	{r7, pc}
 8021ac6:	bf00      	nop
 8021ac8:	20000198 	.word	0x20000198

08021acc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8021acc:	b580      	push	{r7, lr}
 8021ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8021ad0:	4802      	ldr	r0, [pc, #8]	; (8021adc <DMA2D_IRQHandler+0x10>)
 8021ad2:	f001 ffe4 	bl	8023a9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8021ad6:	bf00      	nop
 8021ad8:	bd80      	pop	{r7, pc}
 8021ada:	bf00      	nop
 8021adc:	20000104 	.word	0x20000104

08021ae0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8021ae0:	b480      	push	{r7}
 8021ae2:	b083      	sub	sp, #12
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	4603      	mov	r3, r0
 8021ae8:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8021aea:	bf00      	nop
 8021aec:	370c      	adds	r7, #12
 8021aee:	46bd      	mov	sp, r7
 8021af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021af4:	4770      	bx	lr

08021af6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021af6:	b580      	push	{r7, lr}
 8021af8:	b086      	sub	sp, #24
 8021afa:	af00      	add	r7, sp, #0
 8021afc:	60f8      	str	r0, [r7, #12]
 8021afe:	60b9      	str	r1, [r7, #8]
 8021b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021b02:	2300      	movs	r3, #0
 8021b04:	617b      	str	r3, [r7, #20]
 8021b06:	e00a      	b.n	8021b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021b08:	f3af 8000 	nop.w
 8021b0c:	4601      	mov	r1, r0
 8021b0e:	68bb      	ldr	r3, [r7, #8]
 8021b10:	1c5a      	adds	r2, r3, #1
 8021b12:	60ba      	str	r2, [r7, #8]
 8021b14:	b2ca      	uxtb	r2, r1
 8021b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021b18:	697b      	ldr	r3, [r7, #20]
 8021b1a:	3301      	adds	r3, #1
 8021b1c:	617b      	str	r3, [r7, #20]
 8021b1e:	697a      	ldr	r2, [r7, #20]
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	429a      	cmp	r2, r3
 8021b24:	dbf0      	blt.n	8021b08 <_read+0x12>
  }

  return len;
 8021b26:	687b      	ldr	r3, [r7, #4]
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	3718      	adds	r7, #24
 8021b2c:	46bd      	mov	sp, r7
 8021b2e:	bd80      	pop	{r7, pc}

08021b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021b30:	b580      	push	{r7, lr}
 8021b32:	b086      	sub	sp, #24
 8021b34:	af00      	add	r7, sp, #0
 8021b36:	60f8      	str	r0, [r7, #12]
 8021b38:	60b9      	str	r1, [r7, #8]
 8021b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021b3c:	2300      	movs	r3, #0
 8021b3e:	617b      	str	r3, [r7, #20]
 8021b40:	e009      	b.n	8021b56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021b42:	68bb      	ldr	r3, [r7, #8]
 8021b44:	1c5a      	adds	r2, r3, #1
 8021b46:	60ba      	str	r2, [r7, #8]
 8021b48:	781b      	ldrb	r3, [r3, #0]
 8021b4a:	4618      	mov	r0, r3
 8021b4c:	f7ff f974 	bl	8020e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021b50:	697b      	ldr	r3, [r7, #20]
 8021b52:	3301      	adds	r3, #1
 8021b54:	617b      	str	r3, [r7, #20]
 8021b56:	697a      	ldr	r2, [r7, #20]
 8021b58:	687b      	ldr	r3, [r7, #4]
 8021b5a:	429a      	cmp	r2, r3
 8021b5c:	dbf1      	blt.n	8021b42 <_write+0x12>
  }
  return len;
 8021b5e:	687b      	ldr	r3, [r7, #4]
}
 8021b60:	4618      	mov	r0, r3
 8021b62:	3718      	adds	r7, #24
 8021b64:	46bd      	mov	sp, r7
 8021b66:	bd80      	pop	{r7, pc}

08021b68 <_close>:

int _close(int file)
{
 8021b68:	b480      	push	{r7}
 8021b6a:	b083      	sub	sp, #12
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8021b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021b74:	4618      	mov	r0, r3
 8021b76:	370c      	adds	r7, #12
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b7e:	4770      	bx	lr

08021b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8021b80:	b480      	push	{r7}
 8021b82:	b083      	sub	sp, #12
 8021b84:	af00      	add	r7, sp, #0
 8021b86:	6078      	str	r0, [r7, #4]
 8021b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021b8a:	683b      	ldr	r3, [r7, #0]
 8021b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8021b90:	605a      	str	r2, [r3, #4]
  return 0;
 8021b92:	2300      	movs	r3, #0
}
 8021b94:	4618      	mov	r0, r3
 8021b96:	370c      	adds	r7, #12
 8021b98:	46bd      	mov	sp, r7
 8021b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b9e:	4770      	bx	lr

08021ba0 <_isatty>:

int _isatty(int file)
{
 8021ba0:	b480      	push	{r7}
 8021ba2:	b083      	sub	sp, #12
 8021ba4:	af00      	add	r7, sp, #0
 8021ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021ba8:	2301      	movs	r3, #1
}
 8021baa:	4618      	mov	r0, r3
 8021bac:	370c      	adds	r7, #12
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb4:	4770      	bx	lr

08021bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021bb6:	b480      	push	{r7}
 8021bb8:	b085      	sub	sp, #20
 8021bba:	af00      	add	r7, sp, #0
 8021bbc:	60f8      	str	r0, [r7, #12]
 8021bbe:	60b9      	str	r1, [r7, #8]
 8021bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8021bc2:	2300      	movs	r3, #0
}
 8021bc4:	4618      	mov	r0, r3
 8021bc6:	3714      	adds	r7, #20
 8021bc8:	46bd      	mov	sp, r7
 8021bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bce:	4770      	bx	lr

08021bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8021bd0:	b580      	push	{r7, lr}
 8021bd2:	b086      	sub	sp, #24
 8021bd4:	af00      	add	r7, sp, #0
 8021bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021bd8:	4a14      	ldr	r2, [pc, #80]	; (8021c2c <_sbrk+0x5c>)
 8021bda:	4b15      	ldr	r3, [pc, #84]	; (8021c30 <_sbrk+0x60>)
 8021bdc:	1ad3      	subs	r3, r2, r3
 8021bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8021be0:	697b      	ldr	r3, [r7, #20]
 8021be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021be4:	4b13      	ldr	r3, [pc, #76]	; (8021c34 <_sbrk+0x64>)
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	2b00      	cmp	r3, #0
 8021bea:	d102      	bne.n	8021bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021bec:	4b11      	ldr	r3, [pc, #68]	; (8021c34 <_sbrk+0x64>)
 8021bee:	4a12      	ldr	r2, [pc, #72]	; (8021c38 <_sbrk+0x68>)
 8021bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8021bf2:	4b10      	ldr	r3, [pc, #64]	; (8021c34 <_sbrk+0x64>)
 8021bf4:	681a      	ldr	r2, [r3, #0]
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	4413      	add	r3, r2
 8021bfa:	693a      	ldr	r2, [r7, #16]
 8021bfc:	429a      	cmp	r2, r3
 8021bfe:	d207      	bcs.n	8021c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8021c00:	f00b fc40 	bl	802d484 <__errno>
 8021c04:	4603      	mov	r3, r0
 8021c06:	220c      	movs	r2, #12
 8021c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8021c0e:	e009      	b.n	8021c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8021c10:	4b08      	ldr	r3, [pc, #32]	; (8021c34 <_sbrk+0x64>)
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021c16:	4b07      	ldr	r3, [pc, #28]	; (8021c34 <_sbrk+0x64>)
 8021c18:	681a      	ldr	r2, [r3, #0]
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	4413      	add	r3, r2
 8021c1e:	4a05      	ldr	r2, [pc, #20]	; (8021c34 <_sbrk+0x64>)
 8021c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8021c22:	68fb      	ldr	r3, [r7, #12]
}
 8021c24:	4618      	mov	r0, r3
 8021c26:	3718      	adds	r7, #24
 8021c28:	46bd      	mov	sp, r7
 8021c2a:	bd80      	pop	{r7, pc}
 8021c2c:	20030000 	.word	0x20030000
 8021c30:	00000400 	.word	0x00000400
 8021c34:	20000864 	.word	0x20000864
 8021c38:	200011b0 	.word	0x200011b0

08021c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021c3c:	b480      	push	{r7}
 8021c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021c40:	4b07      	ldr	r3, [pc, #28]	; (8021c60 <SystemInit+0x24>)
 8021c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021c46:	4a06      	ldr	r2, [pc, #24]	; (8021c60 <SystemInit+0x24>)
 8021c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021c50:	4b03      	ldr	r3, [pc, #12]	; (8021c60 <SystemInit+0x24>)
 8021c52:	4a04      	ldr	r2, [pc, #16]	; (8021c64 <SystemInit+0x28>)
 8021c54:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021c56:	bf00      	nop
 8021c58:	46bd      	mov	sp, r7
 8021c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c5e:	4770      	bx	lr
 8021c60:	e000ed00 	.word	0xe000ed00
 8021c64:	08020000 	.word	0x08020000

08021c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8021c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021ca0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021c6c:	480d      	ldr	r0, [pc, #52]	; (8021ca4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021c6e:	490e      	ldr	r1, [pc, #56]	; (8021ca8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021c70:	4a0e      	ldr	r2, [pc, #56]	; (8021cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021c74:	e002      	b.n	8021c7c <LoopCopyDataInit>

08021c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021c7a:	3304      	adds	r3, #4

08021c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021c80:	d3f9      	bcc.n	8021c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021c82:	4a0b      	ldr	r2, [pc, #44]	; (8021cb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021c84:	4c0b      	ldr	r4, [pc, #44]	; (8021cb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8021c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021c88:	e001      	b.n	8021c8e <LoopFillZerobss>

08021c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021c8c:	3204      	adds	r2, #4

08021c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021c90:	d3fb      	bcc.n	8021c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8021c92:	f7ff ffd3 	bl	8021c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021c96:	f00b fbfb 	bl	802d490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021c9a:	f7fe fc7b 	bl	8020594 <main>
  bx  lr    
 8021c9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8021ca0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8021ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021ca8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8021cac:	08030d94 	.word	0x08030d94
  ldr r2, =_sbss
 8021cb0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8021cb4:	200011b0 	.word	0x200011b0

08021cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021cb8:	e7fe      	b.n	8021cb8 <ADC_IRQHandler>

08021cba <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8021cba:	b580      	push	{r7, lr}
 8021cbc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8021cbe:	f000 fa5d 	bl	802217c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8021cc2:	20ca      	movs	r0, #202	; 0xca
 8021cc4:	f000 f95d 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8021cc8:	20c3      	movs	r0, #195	; 0xc3
 8021cca:	f000 f967 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8021cce:	2008      	movs	r0, #8
 8021cd0:	f000 f964 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8021cd4:	2050      	movs	r0, #80	; 0x50
 8021cd6:	f000 f961 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8021cda:	20cf      	movs	r0, #207	; 0xcf
 8021cdc:	f000 f951 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021ce0:	2000      	movs	r0, #0
 8021ce2:	f000 f95b 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8021ce6:	20c1      	movs	r0, #193	; 0xc1
 8021ce8:	f000 f958 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8021cec:	2030      	movs	r0, #48	; 0x30
 8021cee:	f000 f955 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8021cf2:	20ed      	movs	r0, #237	; 0xed
 8021cf4:	f000 f945 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8021cf8:	2064      	movs	r0, #100	; 0x64
 8021cfa:	f000 f94f 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8021cfe:	2003      	movs	r0, #3
 8021d00:	f000 f94c 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8021d04:	2012      	movs	r0, #18
 8021d06:	f000 f949 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8021d0a:	2081      	movs	r0, #129	; 0x81
 8021d0c:	f000 f946 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8021d10:	20e8      	movs	r0, #232	; 0xe8
 8021d12:	f000 f936 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8021d16:	2085      	movs	r0, #133	; 0x85
 8021d18:	f000 f940 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021d1c:	2000      	movs	r0, #0
 8021d1e:	f000 f93d 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021d22:	2078      	movs	r0, #120	; 0x78
 8021d24:	f000 f93a 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8021d28:	20cb      	movs	r0, #203	; 0xcb
 8021d2a:	f000 f92a 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8021d2e:	2039      	movs	r0, #57	; 0x39
 8021d30:	f000 f934 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8021d34:	202c      	movs	r0, #44	; 0x2c
 8021d36:	f000 f931 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021d3a:	2000      	movs	r0, #0
 8021d3c:	f000 f92e 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8021d40:	2034      	movs	r0, #52	; 0x34
 8021d42:	f000 f92b 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8021d46:	2002      	movs	r0, #2
 8021d48:	f000 f928 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8021d4c:	20f7      	movs	r0, #247	; 0xf7
 8021d4e:	f000 f918 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8021d52:	2020      	movs	r0, #32
 8021d54:	f000 f922 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8021d58:	20ea      	movs	r0, #234	; 0xea
 8021d5a:	f000 f912 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021d5e:	2000      	movs	r0, #0
 8021d60:	f000 f91c 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021d64:	2000      	movs	r0, #0
 8021d66:	f000 f919 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8021d6a:	20b1      	movs	r0, #177	; 0xb1
 8021d6c:	f000 f909 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021d70:	2000      	movs	r0, #0
 8021d72:	f000 f913 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021d76:	201b      	movs	r0, #27
 8021d78:	f000 f910 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021d7c:	20b6      	movs	r0, #182	; 0xb6
 8021d7e:	f000 f900 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021d82:	200a      	movs	r0, #10
 8021d84:	f000 f90a 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8021d88:	20a2      	movs	r0, #162	; 0xa2
 8021d8a:	f000 f907 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8021d8e:	20c0      	movs	r0, #192	; 0xc0
 8021d90:	f000 f8f7 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021d94:	2010      	movs	r0, #16
 8021d96:	f000 f901 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8021d9a:	20c1      	movs	r0, #193	; 0xc1
 8021d9c:	f000 f8f1 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8021da0:	2010      	movs	r0, #16
 8021da2:	f000 f8fb 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8021da6:	20c5      	movs	r0, #197	; 0xc5
 8021da8:	f000 f8eb 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8021dac:	2045      	movs	r0, #69	; 0x45
 8021dae:	f000 f8f5 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8021db2:	2015      	movs	r0, #21
 8021db4:	f000 f8f2 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8021db8:	20c7      	movs	r0, #199	; 0xc7
 8021dba:	f000 f8e2 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8021dbe:	2090      	movs	r0, #144	; 0x90
 8021dc0:	f000 f8ec 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8021dc4:	2036      	movs	r0, #54	; 0x36
 8021dc6:	f000 f8dc 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8021dca:	20c8      	movs	r0, #200	; 0xc8
 8021dcc:	f000 f8e6 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8021dd0:	20f2      	movs	r0, #242	; 0xf2
 8021dd2:	f000 f8d6 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021dd6:	2000      	movs	r0, #0
 8021dd8:	f000 f8e0 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8021ddc:	20b0      	movs	r0, #176	; 0xb0
 8021dde:	f000 f8d0 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8021de2:	20c2      	movs	r0, #194	; 0xc2
 8021de4:	f000 f8da 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8021de8:	20b6      	movs	r0, #182	; 0xb6
 8021dea:	f000 f8ca 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8021dee:	200a      	movs	r0, #10
 8021df0:	f000 f8d4 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8021df4:	20a7      	movs	r0, #167	; 0xa7
 8021df6:	f000 f8d1 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8021dfa:	2027      	movs	r0, #39	; 0x27
 8021dfc:	f000 f8ce 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021e00:	2004      	movs	r0, #4
 8021e02:	f000 f8cb 	bl	8021f9c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8021e06:	202a      	movs	r0, #42	; 0x2a
 8021e08:	f000 f8bb 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021e0c:	2000      	movs	r0, #0
 8021e0e:	f000 f8c5 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021e12:	2000      	movs	r0, #0
 8021e14:	f000 f8c2 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021e18:	2000      	movs	r0, #0
 8021e1a:	f000 f8bf 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8021e1e:	20ef      	movs	r0, #239	; 0xef
 8021e20:	f000 f8bc 	bl	8021f9c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8021e24:	202b      	movs	r0, #43	; 0x2b
 8021e26:	f000 f8ac 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021e2a:	2000      	movs	r0, #0
 8021e2c:	f000 f8b6 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021e30:	2000      	movs	r0, #0
 8021e32:	f000 f8b3 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8021e36:	2001      	movs	r0, #1
 8021e38:	f000 f8b0 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8021e3c:	203f      	movs	r0, #63	; 0x3f
 8021e3e:	f000 f8ad 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8021e42:	20f6      	movs	r0, #246	; 0xf6
 8021e44:	f000 f89d 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021e48:	2001      	movs	r0, #1
 8021e4a:	f000 f8a7 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021e4e:	2000      	movs	r0, #0
 8021e50:	f000 f8a4 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8021e54:	2006      	movs	r0, #6
 8021e56:	f000 f8a1 	bl	8021f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8021e5a:	202c      	movs	r0, #44	; 0x2c
 8021e5c:	f000 f891 	bl	8021f82 <ili9341_WriteReg>
  LCD_Delay(200);
 8021e60:	20c8      	movs	r0, #200	; 0xc8
 8021e62:	f000 fa79 	bl	8022358 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8021e66:	2026      	movs	r0, #38	; 0x26
 8021e68:	f000 f88b 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8021e6c:	2001      	movs	r0, #1
 8021e6e:	f000 f895 	bl	8021f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8021e72:	20e0      	movs	r0, #224	; 0xe0
 8021e74:	f000 f885 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8021e78:	200f      	movs	r0, #15
 8021e7a:	f000 f88f 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8021e7e:	2029      	movs	r0, #41	; 0x29
 8021e80:	f000 f88c 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8021e84:	2024      	movs	r0, #36	; 0x24
 8021e86:	f000 f889 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021e8a:	200c      	movs	r0, #12
 8021e8c:	f000 f886 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8021e90:	200e      	movs	r0, #14
 8021e92:	f000 f883 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021e96:	2009      	movs	r0, #9
 8021e98:	f000 f880 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8021e9c:	204e      	movs	r0, #78	; 0x4e
 8021e9e:	f000 f87d 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8021ea2:	2078      	movs	r0, #120	; 0x78
 8021ea4:	f000 f87a 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8021ea8:	203c      	movs	r0, #60	; 0x3c
 8021eaa:	f000 f877 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8021eae:	2009      	movs	r0, #9
 8021eb0:	f000 f874 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8021eb4:	2013      	movs	r0, #19
 8021eb6:	f000 f871 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021eba:	2005      	movs	r0, #5
 8021ebc:	f000 f86e 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8021ec0:	2017      	movs	r0, #23
 8021ec2:	f000 f86b 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021ec6:	2011      	movs	r0, #17
 8021ec8:	f000 f868 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8021ecc:	2000      	movs	r0, #0
 8021ece:	f000 f865 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8021ed2:	20e1      	movs	r0, #225	; 0xe1
 8021ed4:	f000 f855 	bl	8021f82 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8021ed8:	2000      	movs	r0, #0
 8021eda:	f000 f85f 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8021ede:	2016      	movs	r0, #22
 8021ee0:	f000 f85c 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8021ee4:	201b      	movs	r0, #27
 8021ee6:	f000 f859 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8021eea:	2004      	movs	r0, #4
 8021eec:	f000 f856 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8021ef0:	2011      	movs	r0, #17
 8021ef2:	f000 f853 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8021ef6:	2007      	movs	r0, #7
 8021ef8:	f000 f850 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8021efc:	2031      	movs	r0, #49	; 0x31
 8021efe:	f000 f84d 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8021f02:	2033      	movs	r0, #51	; 0x33
 8021f04:	f000 f84a 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8021f08:	2042      	movs	r0, #66	; 0x42
 8021f0a:	f000 f847 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8021f0e:	2005      	movs	r0, #5
 8021f10:	f000 f844 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8021f14:	200c      	movs	r0, #12
 8021f16:	f000 f841 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8021f1a:	200a      	movs	r0, #10
 8021f1c:	f000 f83e 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8021f20:	2028      	movs	r0, #40	; 0x28
 8021f22:	f000 f83b 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8021f26:	202f      	movs	r0, #47	; 0x2f
 8021f28:	f000 f838 	bl	8021f9c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8021f2c:	200f      	movs	r0, #15
 8021f2e:	f000 f835 	bl	8021f9c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8021f32:	2011      	movs	r0, #17
 8021f34:	f000 f825 	bl	8021f82 <ili9341_WriteReg>
  LCD_Delay(200);
 8021f38:	20c8      	movs	r0, #200	; 0xc8
 8021f3a:	f000 fa0d 	bl	8022358 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021f3e:	2029      	movs	r0, #41	; 0x29
 8021f40:	f000 f81f 	bl	8021f82 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8021f44:	202c      	movs	r0, #44	; 0x2c
 8021f46:	f000 f81c 	bl	8021f82 <ili9341_WriteReg>
}
 8021f4a:	bf00      	nop
 8021f4c:	bd80      	pop	{r7, pc}

08021f4e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8021f4e:	b580      	push	{r7, lr}
 8021f50:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8021f52:	f000 f913 	bl	802217c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8021f56:	2103      	movs	r1, #3
 8021f58:	20d3      	movs	r0, #211	; 0xd3
 8021f5a:	f000 f82c 	bl	8021fb6 <ili9341_ReadData>
 8021f5e:	4603      	mov	r3, r0
 8021f60:	b29b      	uxth	r3, r3
}
 8021f62:	4618      	mov	r0, r3
 8021f64:	bd80      	pop	{r7, pc}

08021f66 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8021f66:	b580      	push	{r7, lr}
 8021f68:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8021f6a:	2029      	movs	r0, #41	; 0x29
 8021f6c:	f000 f809 	bl	8021f82 <ili9341_WriteReg>
}
 8021f70:	bf00      	nop
 8021f72:	bd80      	pop	{r7, pc}

08021f74 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8021f74:	b580      	push	{r7, lr}
 8021f76:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8021f78:	2028      	movs	r0, #40	; 0x28
 8021f7a:	f000 f802 	bl	8021f82 <ili9341_WriteReg>
}
 8021f7e:	bf00      	nop
 8021f80:	bd80      	pop	{r7, pc}

08021f82 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8021f82:	b580      	push	{r7, lr}
 8021f84:	b082      	sub	sp, #8
 8021f86:	af00      	add	r7, sp, #0
 8021f88:	4603      	mov	r3, r0
 8021f8a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8021f8c:	79fb      	ldrb	r3, [r7, #7]
 8021f8e:	4618      	mov	r0, r3
 8021f90:	f000 f98e 	bl	80222b0 <LCD_IO_WriteReg>
}
 8021f94:	bf00      	nop
 8021f96:	3708      	adds	r7, #8
 8021f98:	46bd      	mov	sp, r7
 8021f9a:	bd80      	pop	{r7, pc}

08021f9c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8021f9c:	b580      	push	{r7, lr}
 8021f9e:	b082      	sub	sp, #8
 8021fa0:	af00      	add	r7, sp, #0
 8021fa2:	4603      	mov	r3, r0
 8021fa4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8021fa6:	88fb      	ldrh	r3, [r7, #6]
 8021fa8:	4618      	mov	r0, r3
 8021faa:	f000 f95f 	bl	802226c <LCD_IO_WriteData>
}
 8021fae:	bf00      	nop
 8021fb0:	3708      	adds	r7, #8
 8021fb2:	46bd      	mov	sp, r7
 8021fb4:	bd80      	pop	{r7, pc}

08021fb6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8021fb6:	b580      	push	{r7, lr}
 8021fb8:	b082      	sub	sp, #8
 8021fba:	af00      	add	r7, sp, #0
 8021fbc:	4603      	mov	r3, r0
 8021fbe:	460a      	mov	r2, r1
 8021fc0:	80fb      	strh	r3, [r7, #6]
 8021fc2:	4613      	mov	r3, r2
 8021fc4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8021fc6:	797a      	ldrb	r2, [r7, #5]
 8021fc8:	88fb      	ldrh	r3, [r7, #6]
 8021fca:	4611      	mov	r1, r2
 8021fcc:	4618      	mov	r0, r3
 8021fce:	f000 f991 	bl	80222f4 <LCD_IO_ReadData>
 8021fd2:	4603      	mov	r3, r0
}
 8021fd4:	4618      	mov	r0, r3
 8021fd6:	3708      	adds	r7, #8
 8021fd8:	46bd      	mov	sp, r7
 8021fda:	bd80      	pop	{r7, pc}

08021fdc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8021fdc:	b480      	push	{r7}
 8021fde:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8021fe0:	23f0      	movs	r3, #240	; 0xf0
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	46bd      	mov	sp, r7
 8021fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fea:	4770      	bx	lr

08021fec <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8021fec:	b480      	push	{r7}
 8021fee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8021ff0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8021ff4:	4618      	mov	r0, r3
 8021ff6:	46bd      	mov	sp, r7
 8021ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ffc:	4770      	bx	lr
	...

08022000 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8022000:	b580      	push	{r7, lr}
 8022002:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8022004:	4819      	ldr	r0, [pc, #100]	; (802206c <SPIx_Init+0x6c>)
 8022006:	f006 f808 	bl	802801a <HAL_SPI_GetState>
 802200a:	4603      	mov	r3, r0
 802200c:	2b00      	cmp	r3, #0
 802200e:	d12b      	bne.n	8022068 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8022010:	4b16      	ldr	r3, [pc, #88]	; (802206c <SPIx_Init+0x6c>)
 8022012:	4a17      	ldr	r2, [pc, #92]	; (8022070 <SPIx_Init+0x70>)
 8022014:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8022016:	4b15      	ldr	r3, [pc, #84]	; (802206c <SPIx_Init+0x6c>)
 8022018:	2218      	movs	r2, #24
 802201a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 802201c:	4b13      	ldr	r3, [pc, #76]	; (802206c <SPIx_Init+0x6c>)
 802201e:	2200      	movs	r2, #0
 8022020:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8022022:	4b12      	ldr	r3, [pc, #72]	; (802206c <SPIx_Init+0x6c>)
 8022024:	2200      	movs	r2, #0
 8022026:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8022028:	4b10      	ldr	r3, [pc, #64]	; (802206c <SPIx_Init+0x6c>)
 802202a:	2200      	movs	r2, #0
 802202c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 802202e:	4b0f      	ldr	r3, [pc, #60]	; (802206c <SPIx_Init+0x6c>)
 8022030:	2200      	movs	r2, #0
 8022032:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8022034:	4b0d      	ldr	r3, [pc, #52]	; (802206c <SPIx_Init+0x6c>)
 8022036:	2207      	movs	r2, #7
 8022038:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 802203a:	4b0c      	ldr	r3, [pc, #48]	; (802206c <SPIx_Init+0x6c>)
 802203c:	2200      	movs	r2, #0
 802203e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8022040:	4b0a      	ldr	r3, [pc, #40]	; (802206c <SPIx_Init+0x6c>)
 8022042:	2200      	movs	r2, #0
 8022044:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8022046:	4b09      	ldr	r3, [pc, #36]	; (802206c <SPIx_Init+0x6c>)
 8022048:	f44f 7200 	mov.w	r2, #512	; 0x200
 802204c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 802204e:	4b07      	ldr	r3, [pc, #28]	; (802206c <SPIx_Init+0x6c>)
 8022050:	2200      	movs	r2, #0
 8022052:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8022054:	4b05      	ldr	r3, [pc, #20]	; (802206c <SPIx_Init+0x6c>)
 8022056:	f44f 7282 	mov.w	r2, #260	; 0x104
 802205a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 802205c:	4803      	ldr	r0, [pc, #12]	; (802206c <SPIx_Init+0x6c>)
 802205e:	f000 f853 	bl	8022108 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8022062:	4802      	ldr	r0, [pc, #8]	; (802206c <SPIx_Init+0x6c>)
 8022064:	f005 fb39 	bl	80276da <HAL_SPI_Init>
  } 
}
 8022068:	bf00      	nop
 802206a:	bd80      	pop	{r7, pc}
 802206c:	20000868 	.word	0x20000868
 8022070:	40015000 	.word	0x40015000

08022074 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8022074:	b580      	push	{r7, lr}
 8022076:	b084      	sub	sp, #16
 8022078:	af00      	add	r7, sp, #0
 802207a:	4603      	mov	r3, r0
 802207c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 802207e:	2300      	movs	r3, #0
 8022080:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8022082:	79fb      	ldrb	r3, [r7, #7]
 8022084:	b29a      	uxth	r2, r3
 8022086:	4b09      	ldr	r3, [pc, #36]	; (80220ac <SPIx_Read+0x38>)
 8022088:	681b      	ldr	r3, [r3, #0]
 802208a:	f107 0108 	add.w	r1, r7, #8
 802208e:	4808      	ldr	r0, [pc, #32]	; (80220b0 <SPIx_Read+0x3c>)
 8022090:	f005 fd10 	bl	8027ab4 <HAL_SPI_Receive>
 8022094:	4603      	mov	r3, r0
 8022096:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022098:	7bfb      	ldrb	r3, [r7, #15]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d001      	beq.n	80220a2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802209e:	f000 f827 	bl	80220f0 <SPIx_Error>
  }
  
  return readvalue;
 80220a2:	68bb      	ldr	r3, [r7, #8]
}
 80220a4:	4618      	mov	r0, r3
 80220a6:	3710      	adds	r7, #16
 80220a8:	46bd      	mov	sp, r7
 80220aa:	bd80      	pop	{r7, pc}
 80220ac:	2000003c 	.word	0x2000003c
 80220b0:	20000868 	.word	0x20000868

080220b4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80220b4:	b580      	push	{r7, lr}
 80220b6:	b084      	sub	sp, #16
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	4603      	mov	r3, r0
 80220bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80220be:	2300      	movs	r3, #0
 80220c0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80220c2:	4b09      	ldr	r3, [pc, #36]	; (80220e8 <SPIx_Write+0x34>)
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	1db9      	adds	r1, r7, #6
 80220c8:	2201      	movs	r2, #1
 80220ca:	4808      	ldr	r0, [pc, #32]	; (80220ec <SPIx_Write+0x38>)
 80220cc:	f005 fbb6 	bl	802783c <HAL_SPI_Transmit>
 80220d0:	4603      	mov	r3, r0
 80220d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80220d4:	7bfb      	ldrb	r3, [r7, #15]
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d001      	beq.n	80220de <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80220da:	f000 f809 	bl	80220f0 <SPIx_Error>
  }
}
 80220de:	bf00      	nop
 80220e0:	3710      	adds	r7, #16
 80220e2:	46bd      	mov	sp, r7
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	bf00      	nop
 80220e8:	2000003c 	.word	0x2000003c
 80220ec:	20000868 	.word	0x20000868

080220f0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80220f4:	4803      	ldr	r0, [pc, #12]	; (8022104 <SPIx_Error+0x14>)
 80220f6:	f005 fb79 	bl	80277ec <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80220fa:	f7ff ff81 	bl	8022000 <SPIx_Init>
}
 80220fe:	bf00      	nop
 8022100:	bd80      	pop	{r7, pc}
 8022102:	bf00      	nop
 8022104:	20000868 	.word	0x20000868

08022108 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8022108:	b580      	push	{r7, lr}
 802210a:	b08a      	sub	sp, #40	; 0x28
 802210c:	af00      	add	r7, sp, #0
 802210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8022110:	2300      	movs	r3, #0
 8022112:	613b      	str	r3, [r7, #16]
 8022114:	4b17      	ldr	r3, [pc, #92]	; (8022174 <SPIx_MspInit+0x6c>)
 8022116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022118:	4a16      	ldr	r2, [pc, #88]	; (8022174 <SPIx_MspInit+0x6c>)
 802211a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802211e:	6453      	str	r3, [r2, #68]	; 0x44
 8022120:	4b14      	ldr	r3, [pc, #80]	; (8022174 <SPIx_MspInit+0x6c>)
 8022122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022128:	613b      	str	r3, [r7, #16]
 802212a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 802212c:	2300      	movs	r3, #0
 802212e:	60fb      	str	r3, [r7, #12]
 8022130:	4b10      	ldr	r3, [pc, #64]	; (8022174 <SPIx_MspInit+0x6c>)
 8022132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022134:	4a0f      	ldr	r2, [pc, #60]	; (8022174 <SPIx_MspInit+0x6c>)
 8022136:	f043 0320 	orr.w	r3, r3, #32
 802213a:	6313      	str	r3, [r2, #48]	; 0x30
 802213c:	4b0d      	ldr	r3, [pc, #52]	; (8022174 <SPIx_MspInit+0x6c>)
 802213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022140:	f003 0320 	and.w	r3, r3, #32
 8022144:	60fb      	str	r3, [r7, #12]
 8022146:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8022148:	f44f 7360 	mov.w	r3, #896	; 0x380
 802214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 802214e:	2302      	movs	r3, #2
 8022150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8022152:	2302      	movs	r3, #2
 8022154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8022156:	2301      	movs	r3, #1
 8022158:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 802215a:	2305      	movs	r3, #5
 802215c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 802215e:	f107 0314 	add.w	r3, r7, #20
 8022162:	4619      	mov	r1, r3
 8022164:	4804      	ldr	r0, [pc, #16]	; (8022178 <SPIx_MspInit+0x70>)
 8022166:	f001 fed9 	bl	8023f1c <HAL_GPIO_Init>
}
 802216a:	bf00      	nop
 802216c:	3728      	adds	r7, #40	; 0x28
 802216e:	46bd      	mov	sp, r7
 8022170:	bd80      	pop	{r7, pc}
 8022172:	bf00      	nop
 8022174:	40023800 	.word	0x40023800
 8022178:	40021400 	.word	0x40021400

0802217c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 802217c:	b580      	push	{r7, lr}
 802217e:	b088      	sub	sp, #32
 8022180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8022182:	4b36      	ldr	r3, [pc, #216]	; (802225c <LCD_IO_Init+0xe0>)
 8022184:	781b      	ldrb	r3, [r3, #0]
 8022186:	2b00      	cmp	r3, #0
 8022188:	d164      	bne.n	8022254 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 802218a:	4b34      	ldr	r3, [pc, #208]	; (802225c <LCD_IO_Init+0xe0>)
 802218c:	2201      	movs	r2, #1
 802218e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8022190:	2300      	movs	r3, #0
 8022192:	60bb      	str	r3, [r7, #8]
 8022194:	4b32      	ldr	r3, [pc, #200]	; (8022260 <LCD_IO_Init+0xe4>)
 8022196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022198:	4a31      	ldr	r2, [pc, #196]	; (8022260 <LCD_IO_Init+0xe4>)
 802219a:	f043 0308 	orr.w	r3, r3, #8
 802219e:	6313      	str	r3, [r2, #48]	; 0x30
 80221a0:	4b2f      	ldr	r3, [pc, #188]	; (8022260 <LCD_IO_Init+0xe4>)
 80221a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221a4:	f003 0308 	and.w	r3, r3, #8
 80221a8:	60bb      	str	r3, [r7, #8]
 80221aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80221ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80221b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80221b2:	2301      	movs	r3, #1
 80221b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80221b6:	2300      	movs	r3, #0
 80221b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80221ba:	2302      	movs	r3, #2
 80221bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80221be:	f107 030c 	add.w	r3, r7, #12
 80221c2:	4619      	mov	r1, r3
 80221c4:	4827      	ldr	r0, [pc, #156]	; (8022264 <LCD_IO_Init+0xe8>)
 80221c6:	f001 fea9 	bl	8023f1c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80221ca:	2300      	movs	r3, #0
 80221cc:	607b      	str	r3, [r7, #4]
 80221ce:	4b24      	ldr	r3, [pc, #144]	; (8022260 <LCD_IO_Init+0xe4>)
 80221d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221d2:	4a23      	ldr	r2, [pc, #140]	; (8022260 <LCD_IO_Init+0xe4>)
 80221d4:	f043 0308 	orr.w	r3, r3, #8
 80221d8:	6313      	str	r3, [r2, #48]	; 0x30
 80221da:	4b21      	ldr	r3, [pc, #132]	; (8022260 <LCD_IO_Init+0xe4>)
 80221dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80221de:	f003 0308 	and.w	r3, r3, #8
 80221e2:	607b      	str	r3, [r7, #4]
 80221e4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80221e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80221ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80221ec:	2301      	movs	r3, #1
 80221ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80221f0:	2300      	movs	r3, #0
 80221f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80221f4:	2302      	movs	r3, #2
 80221f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80221f8:	f107 030c 	add.w	r3, r7, #12
 80221fc:	4619      	mov	r1, r3
 80221fe:	4819      	ldr	r0, [pc, #100]	; (8022264 <LCD_IO_Init+0xe8>)
 8022200:	f001 fe8c 	bl	8023f1c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8022204:	2300      	movs	r3, #0
 8022206:	603b      	str	r3, [r7, #0]
 8022208:	4b15      	ldr	r3, [pc, #84]	; (8022260 <LCD_IO_Init+0xe4>)
 802220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802220c:	4a14      	ldr	r2, [pc, #80]	; (8022260 <LCD_IO_Init+0xe4>)
 802220e:	f043 0304 	orr.w	r3, r3, #4
 8022212:	6313      	str	r3, [r2, #48]	; 0x30
 8022214:	4b12      	ldr	r3, [pc, #72]	; (8022260 <LCD_IO_Init+0xe4>)
 8022216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022218:	f003 0304 	and.w	r3, r3, #4
 802221c:	603b      	str	r3, [r7, #0]
 802221e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8022220:	2304      	movs	r3, #4
 8022222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022224:	2301      	movs	r3, #1
 8022226:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022228:	2300      	movs	r3, #0
 802222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802222c:	2302      	movs	r3, #2
 802222e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8022230:	f107 030c 	add.w	r3, r7, #12
 8022234:	4619      	mov	r1, r3
 8022236:	480c      	ldr	r0, [pc, #48]	; (8022268 <LCD_IO_Init+0xec>)
 8022238:	f001 fe70 	bl	8023f1c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 802223c:	2200      	movs	r2, #0
 802223e:	2104      	movs	r1, #4
 8022240:	4809      	ldr	r0, [pc, #36]	; (8022268 <LCD_IO_Init+0xec>)
 8022242:	f002 f923 	bl	802448c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8022246:	2201      	movs	r2, #1
 8022248:	2104      	movs	r1, #4
 802224a:	4807      	ldr	r0, [pc, #28]	; (8022268 <LCD_IO_Init+0xec>)
 802224c:	f002 f91e 	bl	802448c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8022250:	f7ff fed6 	bl	8022000 <SPIx_Init>
  }
}
 8022254:	bf00      	nop
 8022256:	3720      	adds	r7, #32
 8022258:	46bd      	mov	sp, r7
 802225a:	bd80      	pop	{r7, pc}
 802225c:	200008c0 	.word	0x200008c0
 8022260:	40023800 	.word	0x40023800
 8022264:	40020c00 	.word	0x40020c00
 8022268:	40020800 	.word	0x40020800

0802226c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 802226c:	b580      	push	{r7, lr}
 802226e:	b082      	sub	sp, #8
 8022270:	af00      	add	r7, sp, #0
 8022272:	4603      	mov	r3, r0
 8022274:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022276:	2201      	movs	r2, #1
 8022278:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802227c:	480a      	ldr	r0, [pc, #40]	; (80222a8 <LCD_IO_WriteData+0x3c>)
 802227e:	f002 f905 	bl	802448c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8022282:	2200      	movs	r2, #0
 8022284:	2104      	movs	r1, #4
 8022286:	4809      	ldr	r0, [pc, #36]	; (80222ac <LCD_IO_WriteData+0x40>)
 8022288:	f002 f900 	bl	802448c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 802228c:	88fb      	ldrh	r3, [r7, #6]
 802228e:	4618      	mov	r0, r3
 8022290:	f7ff ff10 	bl	80220b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022294:	2201      	movs	r2, #1
 8022296:	2104      	movs	r1, #4
 8022298:	4804      	ldr	r0, [pc, #16]	; (80222ac <LCD_IO_WriteData+0x40>)
 802229a:	f002 f8f7 	bl	802448c <HAL_GPIO_WritePin>
}
 802229e:	bf00      	nop
 80222a0:	3708      	adds	r7, #8
 80222a2:	46bd      	mov	sp, r7
 80222a4:	bd80      	pop	{r7, pc}
 80222a6:	bf00      	nop
 80222a8:	40020c00 	.word	0x40020c00
 80222ac:	40020800 	.word	0x40020800

080222b0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b082      	sub	sp, #8
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	4603      	mov	r3, r0
 80222b8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80222ba:	2200      	movs	r2, #0
 80222bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80222c0:	480a      	ldr	r0, [pc, #40]	; (80222ec <LCD_IO_WriteReg+0x3c>)
 80222c2:	f002 f8e3 	bl	802448c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80222c6:	2200      	movs	r2, #0
 80222c8:	2104      	movs	r1, #4
 80222ca:	4809      	ldr	r0, [pc, #36]	; (80222f0 <LCD_IO_WriteReg+0x40>)
 80222cc:	f002 f8de 	bl	802448c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80222d0:	79fb      	ldrb	r3, [r7, #7]
 80222d2:	b29b      	uxth	r3, r3
 80222d4:	4618      	mov	r0, r3
 80222d6:	f7ff feed 	bl	80220b4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80222da:	2201      	movs	r2, #1
 80222dc:	2104      	movs	r1, #4
 80222de:	4804      	ldr	r0, [pc, #16]	; (80222f0 <LCD_IO_WriteReg+0x40>)
 80222e0:	f002 f8d4 	bl	802448c <HAL_GPIO_WritePin>
}
 80222e4:	bf00      	nop
 80222e6:	3708      	adds	r7, #8
 80222e8:	46bd      	mov	sp, r7
 80222ea:	bd80      	pop	{r7, pc}
 80222ec:	40020c00 	.word	0x40020c00
 80222f0:	40020800 	.word	0x40020800

080222f4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80222f4:	b580      	push	{r7, lr}
 80222f6:	b084      	sub	sp, #16
 80222f8:	af00      	add	r7, sp, #0
 80222fa:	4603      	mov	r3, r0
 80222fc:	460a      	mov	r2, r1
 80222fe:	80fb      	strh	r3, [r7, #6]
 8022300:	4613      	mov	r3, r2
 8022302:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022304:	2300      	movs	r3, #0
 8022306:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022308:	2200      	movs	r2, #0
 802230a:	2104      	movs	r1, #4
 802230c:	4810      	ldr	r0, [pc, #64]	; (8022350 <LCD_IO_ReadData+0x5c>)
 802230e:	f002 f8bd 	bl	802448c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022312:	2200      	movs	r2, #0
 8022314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022318:	480e      	ldr	r0, [pc, #56]	; (8022354 <LCD_IO_ReadData+0x60>)
 802231a:	f002 f8b7 	bl	802448c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 802231e:	88fb      	ldrh	r3, [r7, #6]
 8022320:	4618      	mov	r0, r3
 8022322:	f7ff fec7 	bl	80220b4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8022326:	797b      	ldrb	r3, [r7, #5]
 8022328:	4618      	mov	r0, r3
 802232a:	f7ff fea3 	bl	8022074 <SPIx_Read>
 802232e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022330:	2201      	movs	r2, #1
 8022332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022336:	4807      	ldr	r0, [pc, #28]	; (8022354 <LCD_IO_ReadData+0x60>)
 8022338:	f002 f8a8 	bl	802448c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802233c:	2201      	movs	r2, #1
 802233e:	2104      	movs	r1, #4
 8022340:	4803      	ldr	r0, [pc, #12]	; (8022350 <LCD_IO_ReadData+0x5c>)
 8022342:	f002 f8a3 	bl	802448c <HAL_GPIO_WritePin>
  
  return readvalue;
 8022346:	68fb      	ldr	r3, [r7, #12]
}
 8022348:	4618      	mov	r0, r3
 802234a:	3710      	adds	r7, #16
 802234c:	46bd      	mov	sp, r7
 802234e:	bd80      	pop	{r7, pc}
 8022350:	40020800 	.word	0x40020800
 8022354:	40020c00 	.word	0x40020c00

08022358 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8022358:	b580      	push	{r7, lr}
 802235a:	b082      	sub	sp, #8
 802235c:	af00      	add	r7, sp, #0
 802235e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8022360:	6878      	ldr	r0, [r7, #4]
 8022362:	f000 fecd 	bl	8023100 <HAL_Delay>
}
 8022366:	bf00      	nop
 8022368:	3708      	adds	r7, #8
 802236a:	46bd      	mov	sp, r7
 802236c:	bd80      	pop	{r7, pc}
	...

08022370 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8022370:	b580      	push	{r7, lr}
 8022372:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022374:	4b2d      	ldr	r3, [pc, #180]	; (802242c <BSP_LCD_Init+0xbc>)
 8022376:	4a2e      	ldr	r2, [pc, #184]	; (8022430 <BSP_LCD_Init+0xc0>)
 8022378:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 802237a:	4b2c      	ldr	r3, [pc, #176]	; (802242c <BSP_LCD_Init+0xbc>)
 802237c:	2209      	movs	r2, #9
 802237e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022380:	4b2a      	ldr	r3, [pc, #168]	; (802242c <BSP_LCD_Init+0xbc>)
 8022382:	2201      	movs	r2, #1
 8022384:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8022386:	4b29      	ldr	r3, [pc, #164]	; (802242c <BSP_LCD_Init+0xbc>)
 8022388:	221d      	movs	r2, #29
 802238a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 802238c:	4b27      	ldr	r3, [pc, #156]	; (802242c <BSP_LCD_Init+0xbc>)
 802238e:	2203      	movs	r2, #3
 8022390:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8022392:	4b26      	ldr	r3, [pc, #152]	; (802242c <BSP_LCD_Init+0xbc>)
 8022394:	f240 120d 	movw	r2, #269	; 0x10d
 8022398:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 802239a:	4b24      	ldr	r3, [pc, #144]	; (802242c <BSP_LCD_Init+0xbc>)
 802239c:	f240 1243 	movw	r2, #323	; 0x143
 80223a0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80223a2:	4b22      	ldr	r3, [pc, #136]	; (802242c <BSP_LCD_Init+0xbc>)
 80223a4:	f240 1217 	movw	r2, #279	; 0x117
 80223a8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80223aa:	4b20      	ldr	r3, [pc, #128]	; (802242c <BSP_LCD_Init+0xbc>)
 80223ac:	f240 1247 	movw	r2, #327	; 0x147
 80223b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80223b2:	4b1e      	ldr	r3, [pc, #120]	; (802242c <BSP_LCD_Init+0xbc>)
 80223b4:	2200      	movs	r2, #0
 80223b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80223ba:	4b1c      	ldr	r3, [pc, #112]	; (802242c <BSP_LCD_Init+0xbc>)
 80223bc:	2200      	movs	r2, #0
 80223be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80223c2:	4b1a      	ldr	r3, [pc, #104]	; (802242c <BSP_LCD_Init+0xbc>)
 80223c4:	2200      	movs	r2, #0
 80223c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80223ca:	4b1a      	ldr	r3, [pc, #104]	; (8022434 <BSP_LCD_Init+0xc4>)
 80223cc:	2208      	movs	r2, #8
 80223ce:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80223d0:	4b18      	ldr	r3, [pc, #96]	; (8022434 <BSP_LCD_Init+0xc4>)
 80223d2:	22c0      	movs	r2, #192	; 0xc0
 80223d4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80223d6:	4b17      	ldr	r3, [pc, #92]	; (8022434 <BSP_LCD_Init+0xc4>)
 80223d8:	2204      	movs	r2, #4
 80223da:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80223dc:	4b15      	ldr	r3, [pc, #84]	; (8022434 <BSP_LCD_Init+0xc4>)
 80223de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80223e2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80223e4:	4813      	ldr	r0, [pc, #76]	; (8022434 <BSP_LCD_Init+0xc4>)
 80223e6:	f004 ff27 	bl	8027238 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80223ea:	4b10      	ldr	r3, [pc, #64]	; (802242c <BSP_LCD_Init+0xbc>)
 80223ec:	2200      	movs	r2, #0
 80223ee:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80223f0:	4b0e      	ldr	r3, [pc, #56]	; (802242c <BSP_LCD_Init+0xbc>)
 80223f2:	2200      	movs	r2, #0
 80223f4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80223f6:	4b0d      	ldr	r3, [pc, #52]	; (802242c <BSP_LCD_Init+0xbc>)
 80223f8:	2200      	movs	r2, #0
 80223fa:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80223fc:	4b0b      	ldr	r3, [pc, #44]	; (802242c <BSP_LCD_Init+0xbc>)
 80223fe:	2200      	movs	r2, #0
 8022400:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8022402:	f000 fa83 	bl	802290c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8022406:	4809      	ldr	r0, [pc, #36]	; (802242c <BSP_LCD_Init+0xbc>)
 8022408:	f003 fe3c 	bl	8026084 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 802240c:	4b0a      	ldr	r3, [pc, #40]	; (8022438 <BSP_LCD_Init+0xc8>)
 802240e:	4a0b      	ldr	r2, [pc, #44]	; (802243c <BSP_LCD_Init+0xcc>)
 8022410:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8022412:	4b09      	ldr	r3, [pc, #36]	; (8022438 <BSP_LCD_Init+0xc8>)
 8022414:	681b      	ldr	r3, [r3, #0]
 8022416:	681b      	ldr	r3, [r3, #0]
 8022418:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 802241a:	f000 fc65 	bl	8022ce8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 802241e:	4808      	ldr	r0, [pc, #32]	; (8022440 <BSP_LCD_Init+0xd0>)
 8022420:	f000 f920 	bl	8022664 <BSP_LCD_SetFont>

  return LCD_OK;
 8022424:	2300      	movs	r3, #0
}  
 8022426:	4618      	mov	r0, r3
 8022428:	bd80      	pop	{r7, pc}
 802242a:	bf00      	nop
 802242c:	200008c4 	.word	0x200008c4
 8022430:	40016800 	.word	0x40016800
 8022434:	200009ac 	.word	0x200009ac
 8022438:	200009f8 	.word	0x200009f8
 802243c:	20000004 	.word	0x20000004
 8022440:	20000040 	.word	0x20000040

08022444 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8022444:	b580      	push	{r7, lr}
 8022446:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8022448:	4b03      	ldr	r3, [pc, #12]	; (8022458 <BSP_LCD_GetXSize+0x14>)
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802244e:	4798      	blx	r3
 8022450:	4603      	mov	r3, r0
}
 8022452:	4618      	mov	r0, r3
 8022454:	bd80      	pop	{r7, pc}
 8022456:	bf00      	nop
 8022458:	200009f8 	.word	0x200009f8

0802245c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 802245c:	b580      	push	{r7, lr}
 802245e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8022460:	4b03      	ldr	r3, [pc, #12]	; (8022470 <BSP_LCD_GetYSize+0x14>)
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022466:	4798      	blx	r3
 8022468:	4603      	mov	r3, r0
}
 802246a:	4618      	mov	r0, r3
 802246c:	bd80      	pop	{r7, pc}
 802246e:	bf00      	nop
 8022470:	200009f8 	.word	0x200009f8

08022474 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022474:	b580      	push	{r7, lr}
 8022476:	b090      	sub	sp, #64	; 0x40
 8022478:	af00      	add	r7, sp, #0
 802247a:	4603      	mov	r3, r0
 802247c:	6039      	str	r1, [r7, #0]
 802247e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022480:	2300      	movs	r3, #0
 8022482:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022484:	f7ff ffde 	bl	8022444 <BSP_LCD_GetXSize>
 8022488:	4603      	mov	r3, r0
 802248a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 802248c:	2300      	movs	r3, #0
 802248e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022490:	f7ff ffe4 	bl	802245c <BSP_LCD_GetYSize>
 8022494:	4603      	mov	r3, r0
 8022496:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022498:	2300      	movs	r3, #0
 802249a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 802249c:	683b      	ldr	r3, [r7, #0]
 802249e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80224a0:	23ff      	movs	r3, #255	; 0xff
 80224a2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80224a4:	2300      	movs	r3, #0
 80224a6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80224a8:	2300      	movs	r3, #0
 80224aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80224ae:	2300      	movs	r3, #0
 80224b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80224b4:	2300      	movs	r3, #0
 80224b6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80224ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80224be:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80224c0:	2307      	movs	r3, #7
 80224c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80224c4:	f7ff ffbe 	bl	8022444 <BSP_LCD_GetXSize>
 80224c8:	4603      	mov	r3, r0
 80224ca:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80224cc:	f7ff ffc6 	bl	802245c <BSP_LCD_GetYSize>
 80224d0:	4603      	mov	r3, r0
 80224d2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80224d4:	88fa      	ldrh	r2, [r7, #6]
 80224d6:	f107 030c 	add.w	r3, r7, #12
 80224da:	4619      	mov	r1, r3
 80224dc:	4814      	ldr	r0, [pc, #80]	; (8022530 <BSP_LCD_LayerDefaultInit+0xbc>)
 80224de:	f003 ff63 	bl	80263a8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80224e2:	88fa      	ldrh	r2, [r7, #6]
 80224e4:	4913      	ldr	r1, [pc, #76]	; (8022534 <BSP_LCD_LayerDefaultInit+0xc0>)
 80224e6:	4613      	mov	r3, r2
 80224e8:	005b      	lsls	r3, r3, #1
 80224ea:	4413      	add	r3, r2
 80224ec:	009b      	lsls	r3, r3, #2
 80224ee:	440b      	add	r3, r1
 80224f0:	3304      	adds	r3, #4
 80224f2:	f04f 32ff 	mov.w	r2, #4294967295
 80224f6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80224f8:	88fa      	ldrh	r2, [r7, #6]
 80224fa:	490e      	ldr	r1, [pc, #56]	; (8022534 <BSP_LCD_LayerDefaultInit+0xc0>)
 80224fc:	4613      	mov	r3, r2
 80224fe:	005b      	lsls	r3, r3, #1
 8022500:	4413      	add	r3, r2
 8022502:	009b      	lsls	r3, r3, #2
 8022504:	440b      	add	r3, r1
 8022506:	3308      	adds	r3, #8
 8022508:	4a0b      	ldr	r2, [pc, #44]	; (8022538 <BSP_LCD_LayerDefaultInit+0xc4>)
 802250a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 802250c:	88fa      	ldrh	r2, [r7, #6]
 802250e:	4909      	ldr	r1, [pc, #36]	; (8022534 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022510:	4613      	mov	r3, r2
 8022512:	005b      	lsls	r3, r3, #1
 8022514:	4413      	add	r3, r2
 8022516:	009b      	lsls	r3, r3, #2
 8022518:	440b      	add	r3, r1
 802251a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 802251e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022520:	4803      	ldr	r0, [pc, #12]	; (8022530 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022522:	f003 fffd 	bl	8026520 <HAL_LTDC_EnableDither>
}
 8022526:	bf00      	nop
 8022528:	3740      	adds	r7, #64	; 0x40
 802252a:	46bd      	mov	sp, r7
 802252c:	bd80      	pop	{r7, pc}
 802252e:	bf00      	nop
 8022530:	200008c4 	.word	0x200008c4
 8022534:	200009e0 	.word	0x200009e0
 8022538:	20000040 	.word	0x20000040

0802253c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 802253c:	b480      	push	{r7}
 802253e:	b083      	sub	sp, #12
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022544:	4a04      	ldr	r2, [pc, #16]	; (8022558 <BSP_LCD_SelectLayer+0x1c>)
 8022546:	687b      	ldr	r3, [r7, #4]
 8022548:	6013      	str	r3, [r2, #0]
}
 802254a:	bf00      	nop
 802254c:	370c      	adds	r7, #12
 802254e:	46bd      	mov	sp, r7
 8022550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022554:	4770      	bx	lr
 8022556:	bf00      	nop
 8022558:	200009dc 	.word	0x200009dc

0802255c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 802255c:	b480      	push	{r7}
 802255e:	b083      	sub	sp, #12
 8022560:	af00      	add	r7, sp, #0
 8022562:	6078      	str	r0, [r7, #4]
 8022564:	460b      	mov	r3, r1
 8022566:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022568:	78fb      	ldrb	r3, [r7, #3]
 802256a:	2b01      	cmp	r3, #1
 802256c:	d112      	bne.n	8022594 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 802256e:	4b19      	ldr	r3, [pc, #100]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	461a      	mov	r2, r3
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	01db      	lsls	r3, r3, #7
 8022578:	4413      	add	r3, r2
 802257a:	3384      	adds	r3, #132	; 0x84
 802257c:	681b      	ldr	r3, [r3, #0]
 802257e:	4a15      	ldr	r2, [pc, #84]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 8022580:	6812      	ldr	r2, [r2, #0]
 8022582:	4611      	mov	r1, r2
 8022584:	687a      	ldr	r2, [r7, #4]
 8022586:	01d2      	lsls	r2, r2, #7
 8022588:	440a      	add	r2, r1
 802258a:	3284      	adds	r2, #132	; 0x84
 802258c:	f043 0301 	orr.w	r3, r3, #1
 8022590:	6013      	str	r3, [r2, #0]
 8022592:	e011      	b.n	80225b8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022594:	4b0f      	ldr	r3, [pc, #60]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	461a      	mov	r2, r3
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	01db      	lsls	r3, r3, #7
 802259e:	4413      	add	r3, r2
 80225a0:	3384      	adds	r3, #132	; 0x84
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	4a0b      	ldr	r2, [pc, #44]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 80225a6:	6812      	ldr	r2, [r2, #0]
 80225a8:	4611      	mov	r1, r2
 80225aa:	687a      	ldr	r2, [r7, #4]
 80225ac:	01d2      	lsls	r2, r2, #7
 80225ae:	440a      	add	r2, r1
 80225b0:	3284      	adds	r2, #132	; 0x84
 80225b2:	f023 0301 	bic.w	r3, r3, #1
 80225b6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80225b8:	4b06      	ldr	r3, [pc, #24]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80225be:	4b05      	ldr	r3, [pc, #20]	; (80225d4 <BSP_LCD_SetLayerVisible+0x78>)
 80225c0:	681b      	ldr	r3, [r3, #0]
 80225c2:	f042 0201 	orr.w	r2, r2, #1
 80225c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80225c8:	bf00      	nop
 80225ca:	370c      	adds	r7, #12
 80225cc:	46bd      	mov	sp, r7
 80225ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225d2:	4770      	bx	lr
 80225d4:	200008c4 	.word	0x200008c4

080225d8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80225d8:	b580      	push	{r7, lr}
 80225da:	b082      	sub	sp, #8
 80225dc:	af00      	add	r7, sp, #0
 80225de:	6078      	str	r0, [r7, #4]
 80225e0:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80225e2:	687a      	ldr	r2, [r7, #4]
 80225e4:	6839      	ldr	r1, [r7, #0]
 80225e6:	4805      	ldr	r0, [pc, #20]	; (80225fc <BSP_LCD_SetColorKeying+0x24>)
 80225e8:	f003 ff1c 	bl	8026424 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80225ec:	6879      	ldr	r1, [r7, #4]
 80225ee:	4803      	ldr	r0, [pc, #12]	; (80225fc <BSP_LCD_SetColorKeying+0x24>)
 80225f0:	f003 ff5c 	bl	80264ac <HAL_LTDC_EnableColorKeying>
}
 80225f4:	bf00      	nop
 80225f6:	3708      	adds	r7, #8
 80225f8:	46bd      	mov	sp, r7
 80225fa:	bd80      	pop	{r7, pc}
 80225fc:	200008c4 	.word	0x200008c4

08022600 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022600:	b480      	push	{r7}
 8022602:	b083      	sub	sp, #12
 8022604:	af00      	add	r7, sp, #0
 8022606:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022608:	4b07      	ldr	r3, [pc, #28]	; (8022628 <BSP_LCD_SetTextColor+0x28>)
 802260a:	681a      	ldr	r2, [r3, #0]
 802260c:	4907      	ldr	r1, [pc, #28]	; (802262c <BSP_LCD_SetTextColor+0x2c>)
 802260e:	4613      	mov	r3, r2
 8022610:	005b      	lsls	r3, r3, #1
 8022612:	4413      	add	r3, r2
 8022614:	009b      	lsls	r3, r3, #2
 8022616:	440b      	add	r3, r1
 8022618:	687a      	ldr	r2, [r7, #4]
 802261a:	601a      	str	r2, [r3, #0]
}
 802261c:	bf00      	nop
 802261e:	370c      	adds	r7, #12
 8022620:	46bd      	mov	sp, r7
 8022622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022626:	4770      	bx	lr
 8022628:	200009dc 	.word	0x200009dc
 802262c:	200009e0 	.word	0x200009e0

08022630 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022630:	b480      	push	{r7}
 8022632:	b083      	sub	sp, #12
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022638:	4b08      	ldr	r3, [pc, #32]	; (802265c <BSP_LCD_SetBackColor+0x2c>)
 802263a:	681a      	ldr	r2, [r3, #0]
 802263c:	4908      	ldr	r1, [pc, #32]	; (8022660 <BSP_LCD_SetBackColor+0x30>)
 802263e:	4613      	mov	r3, r2
 8022640:	005b      	lsls	r3, r3, #1
 8022642:	4413      	add	r3, r2
 8022644:	009b      	lsls	r3, r3, #2
 8022646:	440b      	add	r3, r1
 8022648:	3304      	adds	r3, #4
 802264a:	687a      	ldr	r2, [r7, #4]
 802264c:	601a      	str	r2, [r3, #0]
}
 802264e:	bf00      	nop
 8022650:	370c      	adds	r7, #12
 8022652:	46bd      	mov	sp, r7
 8022654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022658:	4770      	bx	lr
 802265a:	bf00      	nop
 802265c:	200009dc 	.word	0x200009dc
 8022660:	200009e0 	.word	0x200009e0

08022664 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022664:	b480      	push	{r7}
 8022666:	b083      	sub	sp, #12
 8022668:	af00      	add	r7, sp, #0
 802266a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 802266c:	4b08      	ldr	r3, [pc, #32]	; (8022690 <BSP_LCD_SetFont+0x2c>)
 802266e:	681a      	ldr	r2, [r3, #0]
 8022670:	4908      	ldr	r1, [pc, #32]	; (8022694 <BSP_LCD_SetFont+0x30>)
 8022672:	4613      	mov	r3, r2
 8022674:	005b      	lsls	r3, r3, #1
 8022676:	4413      	add	r3, r2
 8022678:	009b      	lsls	r3, r3, #2
 802267a:	440b      	add	r3, r1
 802267c:	3308      	adds	r3, #8
 802267e:	687a      	ldr	r2, [r7, #4]
 8022680:	601a      	str	r2, [r3, #0]
}
 8022682:	bf00      	nop
 8022684:	370c      	adds	r7, #12
 8022686:	46bd      	mov	sp, r7
 8022688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802268c:	4770      	bx	lr
 802268e:	bf00      	nop
 8022690:	200009dc 	.word	0x200009dc
 8022694:	200009e0 	.word	0x200009e0

08022698 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022698:	b5f0      	push	{r4, r5, r6, r7, lr}
 802269a:	b085      	sub	sp, #20
 802269c:	af02      	add	r7, sp, #8
 802269e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80226a0:	4b0f      	ldr	r3, [pc, #60]	; (80226e0 <BSP_LCD_Clear+0x48>)
 80226a2:	681c      	ldr	r4, [r3, #0]
 80226a4:	4b0e      	ldr	r3, [pc, #56]	; (80226e0 <BSP_LCD_Clear+0x48>)
 80226a6:	681b      	ldr	r3, [r3, #0]
 80226a8:	4a0e      	ldr	r2, [pc, #56]	; (80226e4 <BSP_LCD_Clear+0x4c>)
 80226aa:	2134      	movs	r1, #52	; 0x34
 80226ac:	fb01 f303 	mul.w	r3, r1, r3
 80226b0:	4413      	add	r3, r2
 80226b2:	335c      	adds	r3, #92	; 0x5c
 80226b4:	681b      	ldr	r3, [r3, #0]
 80226b6:	461e      	mov	r6, r3
 80226b8:	f7ff fec4 	bl	8022444 <BSP_LCD_GetXSize>
 80226bc:	4605      	mov	r5, r0
 80226be:	f7ff fecd 	bl	802245c <BSP_LCD_GetYSize>
 80226c2:	4602      	mov	r2, r0
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	9301      	str	r3, [sp, #4]
 80226c8:	2300      	movs	r3, #0
 80226ca:	9300      	str	r3, [sp, #0]
 80226cc:	4613      	mov	r3, r2
 80226ce:	462a      	mov	r2, r5
 80226d0:	4631      	mov	r1, r6
 80226d2:	4620      	mov	r0, r4
 80226d4:	f000 fad0 	bl	8022c78 <FillBuffer>
}
 80226d8:	bf00      	nop
 80226da:	370c      	adds	r7, #12
 80226dc:	46bd      	mov	sp, r7
 80226de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80226e0:	200009dc 	.word	0x200009dc
 80226e4:	200008c4 	.word	0x200008c4

080226e8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80226e8:	b590      	push	{r4, r7, lr}
 80226ea:	b083      	sub	sp, #12
 80226ec:	af00      	add	r7, sp, #0
 80226ee:	4603      	mov	r3, r0
 80226f0:	80fb      	strh	r3, [r7, #6]
 80226f2:	460b      	mov	r3, r1
 80226f4:	80bb      	strh	r3, [r7, #4]
 80226f6:	4613      	mov	r3, r2
 80226f8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80226fa:	4b1b      	ldr	r3, [pc, #108]	; (8022768 <BSP_LCD_DisplayChar+0x80>)
 80226fc:	681a      	ldr	r2, [r3, #0]
 80226fe:	491b      	ldr	r1, [pc, #108]	; (802276c <BSP_LCD_DisplayChar+0x84>)
 8022700:	4613      	mov	r3, r2
 8022702:	005b      	lsls	r3, r3, #1
 8022704:	4413      	add	r3, r2
 8022706:	009b      	lsls	r3, r3, #2
 8022708:	440b      	add	r3, r1
 802270a:	3308      	adds	r3, #8
 802270c:	681b      	ldr	r3, [r3, #0]
 802270e:	6819      	ldr	r1, [r3, #0]
 8022710:	78fb      	ldrb	r3, [r7, #3]
 8022712:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022716:	4b14      	ldr	r3, [pc, #80]	; (8022768 <BSP_LCD_DisplayChar+0x80>)
 8022718:	681a      	ldr	r2, [r3, #0]
 802271a:	4c14      	ldr	r4, [pc, #80]	; (802276c <BSP_LCD_DisplayChar+0x84>)
 802271c:	4613      	mov	r3, r2
 802271e:	005b      	lsls	r3, r3, #1
 8022720:	4413      	add	r3, r2
 8022722:	009b      	lsls	r3, r3, #2
 8022724:	4423      	add	r3, r4
 8022726:	3308      	adds	r3, #8
 8022728:	681b      	ldr	r3, [r3, #0]
 802272a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 802272c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022730:	4b0d      	ldr	r3, [pc, #52]	; (8022768 <BSP_LCD_DisplayChar+0x80>)
 8022732:	681a      	ldr	r2, [r3, #0]
 8022734:	4c0d      	ldr	r4, [pc, #52]	; (802276c <BSP_LCD_DisplayChar+0x84>)
 8022736:	4613      	mov	r3, r2
 8022738:	005b      	lsls	r3, r3, #1
 802273a:	4413      	add	r3, r2
 802273c:	009b      	lsls	r3, r3, #2
 802273e:	4423      	add	r3, r4
 8022740:	3308      	adds	r3, #8
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	889b      	ldrh	r3, [r3, #4]
 8022746:	3307      	adds	r3, #7
 8022748:	2b00      	cmp	r3, #0
 802274a:	da00      	bge.n	802274e <BSP_LCD_DisplayChar+0x66>
 802274c:	3307      	adds	r3, #7
 802274e:	10db      	asrs	r3, r3, #3
 8022750:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022754:	18ca      	adds	r2, r1, r3
 8022756:	88b9      	ldrh	r1, [r7, #4]
 8022758:	88fb      	ldrh	r3, [r7, #6]
 802275a:	4618      	mov	r0, r3
 802275c:	f000 f9d2 	bl	8022b04 <DrawChar>
}
 8022760:	bf00      	nop
 8022762:	370c      	adds	r7, #12
 8022764:	46bd      	mov	sp, r7
 8022766:	bd90      	pop	{r4, r7, pc}
 8022768:	200009dc 	.word	0x200009dc
 802276c:	200009e0 	.word	0x200009e0

08022770 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022770:	b5b0      	push	{r4, r5, r7, lr}
 8022772:	b088      	sub	sp, #32
 8022774:	af00      	add	r7, sp, #0
 8022776:	60ba      	str	r2, [r7, #8]
 8022778:	461a      	mov	r2, r3
 802277a:	4603      	mov	r3, r0
 802277c:	81fb      	strh	r3, [r7, #14]
 802277e:	460b      	mov	r3, r1
 8022780:	81bb      	strh	r3, [r7, #12]
 8022782:	4613      	mov	r3, r2
 8022784:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022786:	2301      	movs	r3, #1
 8022788:	83fb      	strh	r3, [r7, #30]
 802278a:	2300      	movs	r3, #0
 802278c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 802278e:	2300      	movs	r3, #0
 8022790:	61bb      	str	r3, [r7, #24]
 8022792:	2300      	movs	r3, #0
 8022794:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022796:	68bb      	ldr	r3, [r7, #8]
 8022798:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 802279a:	e002      	b.n	80227a2 <BSP_LCD_DisplayStringAt+0x32>
 802279c:	69bb      	ldr	r3, [r7, #24]
 802279e:	3301      	adds	r3, #1
 80227a0:	61bb      	str	r3, [r7, #24]
 80227a2:	697b      	ldr	r3, [r7, #20]
 80227a4:	1c5a      	adds	r2, r3, #1
 80227a6:	617a      	str	r2, [r7, #20]
 80227a8:	781b      	ldrb	r3, [r3, #0]
 80227aa:	2b00      	cmp	r3, #0
 80227ac:	d1f6      	bne.n	802279c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80227ae:	f7ff fe49 	bl	8022444 <BSP_LCD_GetXSize>
 80227b2:	4601      	mov	r1, r0
 80227b4:	4b4b      	ldr	r3, [pc, #300]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 80227b6:	681a      	ldr	r2, [r3, #0]
 80227b8:	484b      	ldr	r0, [pc, #300]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 80227ba:	4613      	mov	r3, r2
 80227bc:	005b      	lsls	r3, r3, #1
 80227be:	4413      	add	r3, r2
 80227c0:	009b      	lsls	r3, r3, #2
 80227c2:	4403      	add	r3, r0
 80227c4:	3308      	adds	r3, #8
 80227c6:	681b      	ldr	r3, [r3, #0]
 80227c8:	889b      	ldrh	r3, [r3, #4]
 80227ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80227ce:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80227d0:	79fb      	ldrb	r3, [r7, #7]
 80227d2:	2b03      	cmp	r3, #3
 80227d4:	d01c      	beq.n	8022810 <BSP_LCD_DisplayStringAt+0xa0>
 80227d6:	2b03      	cmp	r3, #3
 80227d8:	dc33      	bgt.n	8022842 <BSP_LCD_DisplayStringAt+0xd2>
 80227da:	2b01      	cmp	r3, #1
 80227dc:	d002      	beq.n	80227e4 <BSP_LCD_DisplayStringAt+0x74>
 80227de:	2b02      	cmp	r3, #2
 80227e0:	d019      	beq.n	8022816 <BSP_LCD_DisplayStringAt+0xa6>
 80227e2:	e02e      	b.n	8022842 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80227e4:	693a      	ldr	r2, [r7, #16]
 80227e6:	69bb      	ldr	r3, [r7, #24]
 80227e8:	1ad1      	subs	r1, r2, r3
 80227ea:	4b3e      	ldr	r3, [pc, #248]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 80227ec:	681a      	ldr	r2, [r3, #0]
 80227ee:	483e      	ldr	r0, [pc, #248]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 80227f0:	4613      	mov	r3, r2
 80227f2:	005b      	lsls	r3, r3, #1
 80227f4:	4413      	add	r3, r2
 80227f6:	009b      	lsls	r3, r3, #2
 80227f8:	4403      	add	r3, r0
 80227fa:	3308      	adds	r3, #8
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	889b      	ldrh	r3, [r3, #4]
 8022800:	fb01 f303 	mul.w	r3, r1, r3
 8022804:	085b      	lsrs	r3, r3, #1
 8022806:	b29a      	uxth	r2, r3
 8022808:	89fb      	ldrh	r3, [r7, #14]
 802280a:	4413      	add	r3, r2
 802280c:	83fb      	strh	r3, [r7, #30]
      break;
 802280e:	e01b      	b.n	8022848 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022810:	89fb      	ldrh	r3, [r7, #14]
 8022812:	83fb      	strh	r3, [r7, #30]
      break;
 8022814:	e018      	b.n	8022848 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022816:	693a      	ldr	r2, [r7, #16]
 8022818:	69bb      	ldr	r3, [r7, #24]
 802281a:	1ad3      	subs	r3, r2, r3
 802281c:	b299      	uxth	r1, r3
 802281e:	4b31      	ldr	r3, [pc, #196]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 8022820:	681a      	ldr	r2, [r3, #0]
 8022822:	4831      	ldr	r0, [pc, #196]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 8022824:	4613      	mov	r3, r2
 8022826:	005b      	lsls	r3, r3, #1
 8022828:	4413      	add	r3, r2
 802282a:	009b      	lsls	r3, r3, #2
 802282c:	4403      	add	r3, r0
 802282e:	3308      	adds	r3, #8
 8022830:	681b      	ldr	r3, [r3, #0]
 8022832:	889b      	ldrh	r3, [r3, #4]
 8022834:	fb11 f303 	smulbb	r3, r1, r3
 8022838:	b29a      	uxth	r2, r3
 802283a:	89fb      	ldrh	r3, [r7, #14]
 802283c:	4413      	add	r3, r2
 802283e:	83fb      	strh	r3, [r7, #30]
      break;
 8022840:	e002      	b.n	8022848 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022842:	89fb      	ldrh	r3, [r7, #14]
 8022844:	83fb      	strh	r3, [r7, #30]
      break;
 8022846:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022848:	e01a      	b.n	8022880 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 802284a:	68bb      	ldr	r3, [r7, #8]
 802284c:	781a      	ldrb	r2, [r3, #0]
 802284e:	89b9      	ldrh	r1, [r7, #12]
 8022850:	8bfb      	ldrh	r3, [r7, #30]
 8022852:	4618      	mov	r0, r3
 8022854:	f7ff ff48 	bl	80226e8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022858:	4b22      	ldr	r3, [pc, #136]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 802285a:	681a      	ldr	r2, [r3, #0]
 802285c:	4922      	ldr	r1, [pc, #136]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 802285e:	4613      	mov	r3, r2
 8022860:	005b      	lsls	r3, r3, #1
 8022862:	4413      	add	r3, r2
 8022864:	009b      	lsls	r3, r3, #2
 8022866:	440b      	add	r3, r1
 8022868:	3308      	adds	r3, #8
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	889a      	ldrh	r2, [r3, #4]
 802286e:	8bfb      	ldrh	r3, [r7, #30]
 8022870:	4413      	add	r3, r2
 8022872:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022874:	68bb      	ldr	r3, [r7, #8]
 8022876:	3301      	adds	r3, #1
 8022878:	60bb      	str	r3, [r7, #8]
    i++;
 802287a:	8bbb      	ldrh	r3, [r7, #28]
 802287c:	3301      	adds	r3, #1
 802287e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022880:	68bb      	ldr	r3, [r7, #8]
 8022882:	781b      	ldrb	r3, [r3, #0]
 8022884:	2b00      	cmp	r3, #0
 8022886:	bf14      	ite	ne
 8022888:	2301      	movne	r3, #1
 802288a:	2300      	moveq	r3, #0
 802288c:	b2dc      	uxtb	r4, r3
 802288e:	f7ff fdd9 	bl	8022444 <BSP_LCD_GetXSize>
 8022892:	8bb9      	ldrh	r1, [r7, #28]
 8022894:	4b13      	ldr	r3, [pc, #76]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 8022896:	681a      	ldr	r2, [r3, #0]
 8022898:	4d13      	ldr	r5, [pc, #76]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 802289a:	4613      	mov	r3, r2
 802289c:	005b      	lsls	r3, r3, #1
 802289e:	4413      	add	r3, r2
 80228a0:	009b      	lsls	r3, r3, #2
 80228a2:	442b      	add	r3, r5
 80228a4:	3308      	adds	r3, #8
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	889b      	ldrh	r3, [r3, #4]
 80228aa:	fb01 f303 	mul.w	r3, r1, r3
 80228ae:	1ac3      	subs	r3, r0, r3
 80228b0:	b299      	uxth	r1, r3
 80228b2:	4b0c      	ldr	r3, [pc, #48]	; (80228e4 <BSP_LCD_DisplayStringAt+0x174>)
 80228b4:	681a      	ldr	r2, [r3, #0]
 80228b6:	480c      	ldr	r0, [pc, #48]	; (80228e8 <BSP_LCD_DisplayStringAt+0x178>)
 80228b8:	4613      	mov	r3, r2
 80228ba:	005b      	lsls	r3, r3, #1
 80228bc:	4413      	add	r3, r2
 80228be:	009b      	lsls	r3, r3, #2
 80228c0:	4403      	add	r3, r0
 80228c2:	3308      	adds	r3, #8
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	889b      	ldrh	r3, [r3, #4]
 80228c8:	4299      	cmp	r1, r3
 80228ca:	bf2c      	ite	cs
 80228cc:	2301      	movcs	r3, #1
 80228ce:	2300      	movcc	r3, #0
 80228d0:	b2db      	uxtb	r3, r3
 80228d2:	4023      	ands	r3, r4
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	d1b7      	bne.n	802284a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80228da:	bf00      	nop
 80228dc:	bf00      	nop
 80228de:	3720      	adds	r7, #32
 80228e0:	46bd      	mov	sp, r7
 80228e2:	bdb0      	pop	{r4, r5, r7, pc}
 80228e4:	200009dc 	.word	0x200009dc
 80228e8:	200009e0 	.word	0x200009e0

080228ec <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80228f0:	4b05      	ldr	r3, [pc, #20]	; (8022908 <BSP_LCD_DisplayOn+0x1c>)
 80228f2:	681b      	ldr	r3, [r3, #0]
 80228f4:	689b      	ldr	r3, [r3, #8]
 80228f6:	2b00      	cmp	r3, #0
 80228f8:	d003      	beq.n	8022902 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80228fa:	4b03      	ldr	r3, [pc, #12]	; (8022908 <BSP_LCD_DisplayOn+0x1c>)
 80228fc:	681b      	ldr	r3, [r3, #0]
 80228fe:	689b      	ldr	r3, [r3, #8]
 8022900:	4798      	blx	r3
  }
}
 8022902:	bf00      	nop
 8022904:	bd80      	pop	{r7, pc}
 8022906:	bf00      	nop
 8022908:	200009f8 	.word	0x200009f8

0802290c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 802290c:	b580      	push	{r7, lr}
 802290e:	b08e      	sub	sp, #56	; 0x38
 8022910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022912:	2300      	movs	r3, #0
 8022914:	623b      	str	r3, [r7, #32]
 8022916:	4b61      	ldr	r3, [pc, #388]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802291a:	4a60      	ldr	r2, [pc, #384]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 802291c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022920:	6453      	str	r3, [r2, #68]	; 0x44
 8022922:	4b5e      	ldr	r3, [pc, #376]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802292a:	623b      	str	r3, [r7, #32]
 802292c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 802292e:	2300      	movs	r3, #0
 8022930:	61fb      	str	r3, [r7, #28]
 8022932:	4b5a      	ldr	r3, [pc, #360]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022936:	4a59      	ldr	r2, [pc, #356]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022938:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802293c:	6313      	str	r3, [r2, #48]	; 0x30
 802293e:	4b57      	ldr	r3, [pc, #348]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022942:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022946:	61fb      	str	r3, [r7, #28]
 8022948:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802294a:	2300      	movs	r3, #0
 802294c:	61bb      	str	r3, [r7, #24]
 802294e:	4b53      	ldr	r3, [pc, #332]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022952:	4a52      	ldr	r2, [pc, #328]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022954:	f043 0301 	orr.w	r3, r3, #1
 8022958:	6313      	str	r3, [r2, #48]	; 0x30
 802295a:	4b50      	ldr	r3, [pc, #320]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 802295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802295e:	f003 0301 	and.w	r3, r3, #1
 8022962:	61bb      	str	r3, [r7, #24]
 8022964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022966:	2300      	movs	r3, #0
 8022968:	617b      	str	r3, [r7, #20]
 802296a:	4b4c      	ldr	r3, [pc, #304]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 802296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802296e:	4a4b      	ldr	r2, [pc, #300]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022970:	f043 0302 	orr.w	r3, r3, #2
 8022974:	6313      	str	r3, [r2, #48]	; 0x30
 8022976:	4b49      	ldr	r3, [pc, #292]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802297a:	f003 0302 	and.w	r3, r3, #2
 802297e:	617b      	str	r3, [r7, #20]
 8022980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022982:	2300      	movs	r3, #0
 8022984:	613b      	str	r3, [r7, #16]
 8022986:	4b45      	ldr	r3, [pc, #276]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802298a:	4a44      	ldr	r2, [pc, #272]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 802298c:	f043 0304 	orr.w	r3, r3, #4
 8022990:	6313      	str	r3, [r2, #48]	; 0x30
 8022992:	4b42      	ldr	r3, [pc, #264]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 8022994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022996:	f003 0304 	and.w	r3, r3, #4
 802299a:	613b      	str	r3, [r7, #16]
 802299c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802299e:	2300      	movs	r3, #0
 80229a0:	60fb      	str	r3, [r7, #12]
 80229a2:	4b3e      	ldr	r3, [pc, #248]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229a6:	4a3d      	ldr	r2, [pc, #244]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229a8:	f043 0308 	orr.w	r3, r3, #8
 80229ac:	6313      	str	r3, [r2, #48]	; 0x30
 80229ae:	4b3b      	ldr	r3, [pc, #236]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229b2:	f003 0308 	and.w	r3, r3, #8
 80229b6:	60fb      	str	r3, [r7, #12]
 80229b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80229ba:	2300      	movs	r3, #0
 80229bc:	60bb      	str	r3, [r7, #8]
 80229be:	4b37      	ldr	r3, [pc, #220]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229c2:	4a36      	ldr	r2, [pc, #216]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229c4:	f043 0320 	orr.w	r3, r3, #32
 80229c8:	6313      	str	r3, [r2, #48]	; 0x30
 80229ca:	4b34      	ldr	r3, [pc, #208]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229ce:	f003 0320 	and.w	r3, r3, #32
 80229d2:	60bb      	str	r3, [r7, #8]
 80229d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80229d6:	2300      	movs	r3, #0
 80229d8:	607b      	str	r3, [r7, #4]
 80229da:	4b30      	ldr	r3, [pc, #192]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229de:	4a2f      	ldr	r2, [pc, #188]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80229e4:	6313      	str	r3, [r2, #48]	; 0x30
 80229e6:	4b2d      	ldr	r3, [pc, #180]	; (8022a9c <BSP_LCD_MspInit+0x190>)
 80229e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80229ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80229ee:	607b      	str	r3, [r7, #4]
 80229f0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80229f2:	f641 0358 	movw	r3, #6232	; 0x1858
 80229f6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80229f8:	2302      	movs	r3, #2
 80229fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80229fc:	2300      	movs	r3, #0
 80229fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022a00:	2302      	movs	r3, #2
 8022a02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022a04:	230e      	movs	r3, #14
 8022a06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a0c:	4619      	mov	r1, r3
 8022a0e:	4824      	ldr	r0, [pc, #144]	; (8022aa0 <BSP_LCD_MspInit+0x194>)
 8022a10:	f001 fa84 	bl	8023f1c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022a14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022a18:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a1e:	4619      	mov	r1, r3
 8022a20:	4820      	ldr	r0, [pc, #128]	; (8022aa4 <BSP_LCD_MspInit+0x198>)
 8022a22:	f001 fa7b 	bl	8023f1c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022a26:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a30:	4619      	mov	r1, r3
 8022a32:	481d      	ldr	r0, [pc, #116]	; (8022aa8 <BSP_LCD_MspInit+0x19c>)
 8022a34:	f001 fa72 	bl	8023f1c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022a38:	2348      	movs	r3, #72	; 0x48
 8022a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a40:	4619      	mov	r1, r3
 8022a42:	481a      	ldr	r0, [pc, #104]	; (8022aac <BSP_LCD_MspInit+0x1a0>)
 8022a44:	f001 fa6a 	bl	8023f1c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a52:	4619      	mov	r1, r3
 8022a54:	4816      	ldr	r0, [pc, #88]	; (8022ab0 <BSP_LCD_MspInit+0x1a4>)
 8022a56:	f001 fa61 	bl	8023f1c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022a5a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022a5e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a64:	4619      	mov	r1, r3
 8022a66:	4813      	ldr	r0, [pc, #76]	; (8022ab4 <BSP_LCD_MspInit+0x1a8>)
 8022a68:	f001 fa58 	bl	8023f1c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022a6c:	2303      	movs	r3, #3
 8022a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022a70:	2309      	movs	r3, #9
 8022a72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a78:	4619      	mov	r1, r3
 8022a7a:	480a      	ldr	r0, [pc, #40]	; (8022aa4 <BSP_LCD_MspInit+0x198>)
 8022a7c:	f001 fa4e 	bl	8023f1c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022a8a:	4619      	mov	r1, r3
 8022a8c:	4809      	ldr	r0, [pc, #36]	; (8022ab4 <BSP_LCD_MspInit+0x1a8>)
 8022a8e:	f001 fa45 	bl	8023f1c <HAL_GPIO_Init>
}
 8022a92:	bf00      	nop
 8022a94:	3738      	adds	r7, #56	; 0x38
 8022a96:	46bd      	mov	sp, r7
 8022a98:	bd80      	pop	{r7, pc}
 8022a9a:	bf00      	nop
 8022a9c:	40023800 	.word	0x40023800
 8022aa0:	40020000 	.word	0x40020000
 8022aa4:	40020400 	.word	0x40020400
 8022aa8:	40020800 	.word	0x40020800
 8022aac:	40020c00 	.word	0x40020c00
 8022ab0:	40021400 	.word	0x40021400
 8022ab4:	40021800 	.word	0x40021800

08022ab8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8022ab8:	b5b0      	push	{r4, r5, r7, lr}
 8022aba:	b082      	sub	sp, #8
 8022abc:	af00      	add	r7, sp, #0
 8022abe:	4603      	mov	r3, r0
 8022ac0:	603a      	str	r2, [r7, #0]
 8022ac2:	80fb      	strh	r3, [r7, #6]
 8022ac4:	460b      	mov	r3, r1
 8022ac6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8022ac8:	4b0c      	ldr	r3, [pc, #48]	; (8022afc <BSP_LCD_DrawPixel+0x44>)
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	4a0c      	ldr	r2, [pc, #48]	; (8022b00 <BSP_LCD_DrawPixel+0x48>)
 8022ace:	2134      	movs	r1, #52	; 0x34
 8022ad0:	fb01 f303 	mul.w	r3, r1, r3
 8022ad4:	4413      	add	r3, r2
 8022ad6:	335c      	adds	r3, #92	; 0x5c
 8022ad8:	681c      	ldr	r4, [r3, #0]
 8022ada:	88bd      	ldrh	r5, [r7, #4]
 8022adc:	f7ff fcb2 	bl	8022444 <BSP_LCD_GetXSize>
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	fb03 f205 	mul.w	r2, r3, r5
 8022ae6:	88fb      	ldrh	r3, [r7, #6]
 8022ae8:	4413      	add	r3, r2
 8022aea:	009b      	lsls	r3, r3, #2
 8022aec:	4423      	add	r3, r4
 8022aee:	461a      	mov	r2, r3
 8022af0:	683b      	ldr	r3, [r7, #0]
 8022af2:	6013      	str	r3, [r2, #0]
}
 8022af4:	bf00      	nop
 8022af6:	3708      	adds	r7, #8
 8022af8:	46bd      	mov	sp, r7
 8022afa:	bdb0      	pop	{r4, r5, r7, pc}
 8022afc:	200009dc 	.word	0x200009dc
 8022b00:	200008c4 	.word	0x200008c4

08022b04 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8022b04:	b580      	push	{r7, lr}
 8022b06:	b088      	sub	sp, #32
 8022b08:	af00      	add	r7, sp, #0
 8022b0a:	4603      	mov	r3, r0
 8022b0c:	603a      	str	r2, [r7, #0]
 8022b0e:	80fb      	strh	r3, [r7, #6]
 8022b10:	460b      	mov	r3, r1
 8022b12:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8022b14:	2300      	movs	r3, #0
 8022b16:	61fb      	str	r3, [r7, #28]
 8022b18:	2300      	movs	r3, #0
 8022b1a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8022b1c:	2300      	movs	r3, #0
 8022b1e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8022b20:	4b53      	ldr	r3, [pc, #332]	; (8022c70 <DrawChar+0x16c>)
 8022b22:	681a      	ldr	r2, [r3, #0]
 8022b24:	4953      	ldr	r1, [pc, #332]	; (8022c74 <DrawChar+0x170>)
 8022b26:	4613      	mov	r3, r2
 8022b28:	005b      	lsls	r3, r3, #1
 8022b2a:	4413      	add	r3, r2
 8022b2c:	009b      	lsls	r3, r3, #2
 8022b2e:	440b      	add	r3, r1
 8022b30:	3308      	adds	r3, #8
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	88db      	ldrh	r3, [r3, #6]
 8022b36:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022b38:	4b4d      	ldr	r3, [pc, #308]	; (8022c70 <DrawChar+0x16c>)
 8022b3a:	681a      	ldr	r2, [r3, #0]
 8022b3c:	494d      	ldr	r1, [pc, #308]	; (8022c74 <DrawChar+0x170>)
 8022b3e:	4613      	mov	r3, r2
 8022b40:	005b      	lsls	r3, r3, #1
 8022b42:	4413      	add	r3, r2
 8022b44:	009b      	lsls	r3, r3, #2
 8022b46:	440b      	add	r3, r1
 8022b48:	3308      	adds	r3, #8
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	889b      	ldrh	r3, [r3, #4]
 8022b4e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8022b50:	8a3b      	ldrh	r3, [r7, #16]
 8022b52:	3307      	adds	r3, #7
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	da00      	bge.n	8022b5a <DrawChar+0x56>
 8022b58:	3307      	adds	r3, #7
 8022b5a:	10db      	asrs	r3, r3, #3
 8022b5c:	b2db      	uxtb	r3, r3
 8022b5e:	00db      	lsls	r3, r3, #3
 8022b60:	b2da      	uxtb	r2, r3
 8022b62:	8a3b      	ldrh	r3, [r7, #16]
 8022b64:	b2db      	uxtb	r3, r3
 8022b66:	1ad3      	subs	r3, r2, r3
 8022b68:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8022b6a:	2300      	movs	r3, #0
 8022b6c:	61fb      	str	r3, [r7, #28]
 8022b6e:	e076      	b.n	8022c5e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8022b70:	8a3b      	ldrh	r3, [r7, #16]
 8022b72:	3307      	adds	r3, #7
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	da00      	bge.n	8022b7a <DrawChar+0x76>
 8022b78:	3307      	adds	r3, #7
 8022b7a:	10db      	asrs	r3, r3, #3
 8022b7c:	461a      	mov	r2, r3
 8022b7e:	69fb      	ldr	r3, [r7, #28]
 8022b80:	fb02 f303 	mul.w	r3, r2, r3
 8022b84:	683a      	ldr	r2, [r7, #0]
 8022b86:	4413      	add	r3, r2
 8022b88:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8022b8a:	8a3b      	ldrh	r3, [r7, #16]
 8022b8c:	3307      	adds	r3, #7
 8022b8e:	2b00      	cmp	r3, #0
 8022b90:	da00      	bge.n	8022b94 <DrawChar+0x90>
 8022b92:	3307      	adds	r3, #7
 8022b94:	10db      	asrs	r3, r3, #3
 8022b96:	2b01      	cmp	r3, #1
 8022b98:	d002      	beq.n	8022ba0 <DrawChar+0x9c>
 8022b9a:	2b02      	cmp	r3, #2
 8022b9c:	d004      	beq.n	8022ba8 <DrawChar+0xa4>
 8022b9e:	e00c      	b.n	8022bba <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8022ba0:	68bb      	ldr	r3, [r7, #8]
 8022ba2:	781b      	ldrb	r3, [r3, #0]
 8022ba4:	617b      	str	r3, [r7, #20]
      break;
 8022ba6:	e016      	b.n	8022bd6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8022ba8:	68bb      	ldr	r3, [r7, #8]
 8022baa:	781b      	ldrb	r3, [r3, #0]
 8022bac:	021b      	lsls	r3, r3, #8
 8022bae:	68ba      	ldr	r2, [r7, #8]
 8022bb0:	3201      	adds	r2, #1
 8022bb2:	7812      	ldrb	r2, [r2, #0]
 8022bb4:	4313      	orrs	r3, r2
 8022bb6:	617b      	str	r3, [r7, #20]
      break;
 8022bb8:	e00d      	b.n	8022bd6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8022bba:	68bb      	ldr	r3, [r7, #8]
 8022bbc:	781b      	ldrb	r3, [r3, #0]
 8022bbe:	041a      	lsls	r2, r3, #16
 8022bc0:	68bb      	ldr	r3, [r7, #8]
 8022bc2:	3301      	adds	r3, #1
 8022bc4:	781b      	ldrb	r3, [r3, #0]
 8022bc6:	021b      	lsls	r3, r3, #8
 8022bc8:	4313      	orrs	r3, r2
 8022bca:	68ba      	ldr	r2, [r7, #8]
 8022bcc:	3202      	adds	r2, #2
 8022bce:	7812      	ldrb	r2, [r2, #0]
 8022bd0:	4313      	orrs	r3, r2
 8022bd2:	617b      	str	r3, [r7, #20]
      break;
 8022bd4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	61bb      	str	r3, [r7, #24]
 8022bda:	e036      	b.n	8022c4a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8022bdc:	8a3a      	ldrh	r2, [r7, #16]
 8022bde:	69bb      	ldr	r3, [r7, #24]
 8022be0:	1ad2      	subs	r2, r2, r3
 8022be2:	7bfb      	ldrb	r3, [r7, #15]
 8022be4:	4413      	add	r3, r2
 8022be6:	3b01      	subs	r3, #1
 8022be8:	2201      	movs	r2, #1
 8022bea:	fa02 f303 	lsl.w	r3, r2, r3
 8022bee:	461a      	mov	r2, r3
 8022bf0:	697b      	ldr	r3, [r7, #20]
 8022bf2:	4013      	ands	r3, r2
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d012      	beq.n	8022c1e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8022bf8:	69bb      	ldr	r3, [r7, #24]
 8022bfa:	b29a      	uxth	r2, r3
 8022bfc:	88fb      	ldrh	r3, [r7, #6]
 8022bfe:	4413      	add	r3, r2
 8022c00:	b298      	uxth	r0, r3
 8022c02:	4b1b      	ldr	r3, [pc, #108]	; (8022c70 <DrawChar+0x16c>)
 8022c04:	681a      	ldr	r2, [r3, #0]
 8022c06:	491b      	ldr	r1, [pc, #108]	; (8022c74 <DrawChar+0x170>)
 8022c08:	4613      	mov	r3, r2
 8022c0a:	005b      	lsls	r3, r3, #1
 8022c0c:	4413      	add	r3, r2
 8022c0e:	009b      	lsls	r3, r3, #2
 8022c10:	440b      	add	r3, r1
 8022c12:	681a      	ldr	r2, [r3, #0]
 8022c14:	88bb      	ldrh	r3, [r7, #4]
 8022c16:	4619      	mov	r1, r3
 8022c18:	f7ff ff4e 	bl	8022ab8 <BSP_LCD_DrawPixel>
 8022c1c:	e012      	b.n	8022c44 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8022c1e:	69bb      	ldr	r3, [r7, #24]
 8022c20:	b29a      	uxth	r2, r3
 8022c22:	88fb      	ldrh	r3, [r7, #6]
 8022c24:	4413      	add	r3, r2
 8022c26:	b298      	uxth	r0, r3
 8022c28:	4b11      	ldr	r3, [pc, #68]	; (8022c70 <DrawChar+0x16c>)
 8022c2a:	681a      	ldr	r2, [r3, #0]
 8022c2c:	4911      	ldr	r1, [pc, #68]	; (8022c74 <DrawChar+0x170>)
 8022c2e:	4613      	mov	r3, r2
 8022c30:	005b      	lsls	r3, r3, #1
 8022c32:	4413      	add	r3, r2
 8022c34:	009b      	lsls	r3, r3, #2
 8022c36:	440b      	add	r3, r1
 8022c38:	3304      	adds	r3, #4
 8022c3a:	681a      	ldr	r2, [r3, #0]
 8022c3c:	88bb      	ldrh	r3, [r7, #4]
 8022c3e:	4619      	mov	r1, r3
 8022c40:	f7ff ff3a 	bl	8022ab8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8022c44:	69bb      	ldr	r3, [r7, #24]
 8022c46:	3301      	adds	r3, #1
 8022c48:	61bb      	str	r3, [r7, #24]
 8022c4a:	8a3b      	ldrh	r3, [r7, #16]
 8022c4c:	69ba      	ldr	r2, [r7, #24]
 8022c4e:	429a      	cmp	r2, r3
 8022c50:	d3c4      	bcc.n	8022bdc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8022c52:	88bb      	ldrh	r3, [r7, #4]
 8022c54:	3301      	adds	r3, #1
 8022c56:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8022c58:	69fb      	ldr	r3, [r7, #28]
 8022c5a:	3301      	adds	r3, #1
 8022c5c:	61fb      	str	r3, [r7, #28]
 8022c5e:	8a7b      	ldrh	r3, [r7, #18]
 8022c60:	69fa      	ldr	r2, [r7, #28]
 8022c62:	429a      	cmp	r2, r3
 8022c64:	d384      	bcc.n	8022b70 <DrawChar+0x6c>
  }
}
 8022c66:	bf00      	nop
 8022c68:	bf00      	nop
 8022c6a:	3720      	adds	r7, #32
 8022c6c:	46bd      	mov	sp, r7
 8022c6e:	bd80      	pop	{r7, pc}
 8022c70:	200009dc 	.word	0x200009dc
 8022c74:	200009e0 	.word	0x200009e0

08022c78 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8022c78:	b580      	push	{r7, lr}
 8022c7a:	b086      	sub	sp, #24
 8022c7c:	af02      	add	r7, sp, #8
 8022c7e:	60f8      	str	r0, [r7, #12]
 8022c80:	60b9      	str	r1, [r7, #8]
 8022c82:	607a      	str	r2, [r7, #4]
 8022c84:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8022c86:	4b16      	ldr	r3, [pc, #88]	; (8022ce0 <FillBuffer+0x68>)
 8022c88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8022c8c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8022c8e:	4b14      	ldr	r3, [pc, #80]	; (8022ce0 <FillBuffer+0x68>)
 8022c90:	2200      	movs	r2, #0
 8022c92:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8022c94:	4a12      	ldr	r2, [pc, #72]	; (8022ce0 <FillBuffer+0x68>)
 8022c96:	69bb      	ldr	r3, [r7, #24]
 8022c98:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8022c9a:	4b11      	ldr	r3, [pc, #68]	; (8022ce0 <FillBuffer+0x68>)
 8022c9c:	4a11      	ldr	r2, [pc, #68]	; (8022ce4 <FillBuffer+0x6c>)
 8022c9e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8022ca0:	480f      	ldr	r0, [pc, #60]	; (8022ce0 <FillBuffer+0x68>)
 8022ca2:	f000 fd9f 	bl	80237e4 <HAL_DMA2D_Init>
 8022ca6:	4603      	mov	r3, r0
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	d115      	bne.n	8022cd8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8022cac:	68f9      	ldr	r1, [r7, #12]
 8022cae:	480c      	ldr	r0, [pc, #48]	; (8022ce0 <FillBuffer+0x68>)
 8022cb0:	f001 f806 	bl	8023cc0 <HAL_DMA2D_ConfigLayer>
 8022cb4:	4603      	mov	r3, r0
 8022cb6:	2b00      	cmp	r3, #0
 8022cb8:	d10e      	bne.n	8022cd8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8022cba:	68ba      	ldr	r2, [r7, #8]
 8022cbc:	683b      	ldr	r3, [r7, #0]
 8022cbe:	9300      	str	r3, [sp, #0]
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	69f9      	ldr	r1, [r7, #28]
 8022cc4:	4806      	ldr	r0, [pc, #24]	; (8022ce0 <FillBuffer+0x68>)
 8022cc6:	f000 fdd6 	bl	8023876 <HAL_DMA2D_Start>
 8022cca:	4603      	mov	r3, r0
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	d103      	bne.n	8022cd8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8022cd0:	210a      	movs	r1, #10
 8022cd2:	4803      	ldr	r0, [pc, #12]	; (8022ce0 <FillBuffer+0x68>)
 8022cd4:	f000 fdfa 	bl	80238cc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8022cd8:	bf00      	nop
 8022cda:	3710      	adds	r7, #16
 8022cdc:	46bd      	mov	sp, r7
 8022cde:	bd80      	pop	{r7, pc}
 8022ce0:	2000096c 	.word	0x2000096c
 8022ce4:	4002b000 	.word	0x4002b000

08022ce8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8022ce8:	b580      	push	{r7, lr}
 8022cea:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8022cec:	4b29      	ldr	r3, [pc, #164]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022cee:	4a2a      	ldr	r2, [pc, #168]	; (8022d98 <BSP_SDRAM_Init+0xb0>)
 8022cf0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8022cf2:	4b2a      	ldr	r3, [pc, #168]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022cf4:	2202      	movs	r2, #2
 8022cf6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8022cf8:	4b28      	ldr	r3, [pc, #160]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022cfa:	2207      	movs	r2, #7
 8022cfc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8022cfe:	4b27      	ldr	r3, [pc, #156]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d00:	2204      	movs	r2, #4
 8022d02:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8022d04:	4b25      	ldr	r3, [pc, #148]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d06:	2207      	movs	r2, #7
 8022d08:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8022d0a:	4b24      	ldr	r3, [pc, #144]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d0c:	2202      	movs	r2, #2
 8022d0e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8022d10:	4b22      	ldr	r3, [pc, #136]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d12:	2202      	movs	r2, #2
 8022d14:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8022d16:	4b21      	ldr	r3, [pc, #132]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d18:	2202      	movs	r2, #2
 8022d1a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8022d1c:	4b1d      	ldr	r3, [pc, #116]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d1e:	2201      	movs	r2, #1
 8022d20:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8022d22:	4b1c      	ldr	r3, [pc, #112]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d24:	2200      	movs	r2, #0
 8022d26:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8022d28:	4b1a      	ldr	r3, [pc, #104]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d2a:	2204      	movs	r2, #4
 8022d2c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8022d2e:	4b19      	ldr	r3, [pc, #100]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d30:	2210      	movs	r2, #16
 8022d32:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8022d34:	4b17      	ldr	r3, [pc, #92]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d36:	2240      	movs	r2, #64	; 0x40
 8022d38:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8022d3a:	4b16      	ldr	r3, [pc, #88]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d3c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8022d40:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8022d42:	4b14      	ldr	r3, [pc, #80]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d44:	2200      	movs	r2, #0
 8022d46:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8022d48:	4b12      	ldr	r3, [pc, #72]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8022d4e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8022d50:	4b10      	ldr	r3, [pc, #64]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d52:	2200      	movs	r2, #0
 8022d54:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8022d56:	4b0f      	ldr	r3, [pc, #60]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022d5c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8022d5e:	2100      	movs	r1, #0
 8022d60:	480c      	ldr	r0, [pc, #48]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d62:	f000 f87f 	bl	8022e64 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8022d66:	490d      	ldr	r1, [pc, #52]	; (8022d9c <BSP_SDRAM_Init+0xb4>)
 8022d68:	480a      	ldr	r0, [pc, #40]	; (8022d94 <BSP_SDRAM_Init+0xac>)
 8022d6a:	f004 fc25 	bl	80275b8 <HAL_SDRAM_Init>
 8022d6e:	4603      	mov	r3, r0
 8022d70:	2b00      	cmp	r3, #0
 8022d72:	d003      	beq.n	8022d7c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8022d74:	4b0a      	ldr	r3, [pc, #40]	; (8022da0 <BSP_SDRAM_Init+0xb8>)
 8022d76:	2201      	movs	r2, #1
 8022d78:	701a      	strb	r2, [r3, #0]
 8022d7a:	e002      	b.n	8022d82 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8022d7c:	4b08      	ldr	r3, [pc, #32]	; (8022da0 <BSP_SDRAM_Init+0xb8>)
 8022d7e:	2200      	movs	r2, #0
 8022d80:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8022d82:	f240 506a 	movw	r0, #1386	; 0x56a
 8022d86:	f000 f80d 	bl	8022da4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8022d8a:	4b05      	ldr	r3, [pc, #20]	; (8022da0 <BSP_SDRAM_Init+0xb8>)
 8022d8c:	781b      	ldrb	r3, [r3, #0]
}
 8022d8e:	4618      	mov	r0, r3
 8022d90:	bd80      	pop	{r7, pc}
 8022d92:	bf00      	nop
 8022d94:	200009fc 	.word	0x200009fc
 8022d98:	a0000140 	.word	0xa0000140
 8022d9c:	20000a30 	.word	0x20000a30
 8022da0:	20000050 	.word	0x20000050

08022da4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b084      	sub	sp, #16
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8022dac:	2300      	movs	r3, #0
 8022dae:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8022db0:	4b2a      	ldr	r3, [pc, #168]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022db2:	2201      	movs	r2, #1
 8022db4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022db6:	4b29      	ldr	r3, [pc, #164]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022db8:	2208      	movs	r2, #8
 8022dba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022dbc:	4b27      	ldr	r3, [pc, #156]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022dbe:	2201      	movs	r2, #1
 8022dc0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022dc2:	4b26      	ldr	r3, [pc, #152]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022dc4:	2200      	movs	r2, #0
 8022dc6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022dcc:	4923      	ldr	r1, [pc, #140]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022dce:	4824      	ldr	r0, [pc, #144]	; (8022e60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022dd0:	f004 fc26 	bl	8027620 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8022dd4:	2001      	movs	r0, #1
 8022dd6:	f000 f993 	bl	8023100 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8022dda:	4b20      	ldr	r3, [pc, #128]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022ddc:	2202      	movs	r2, #2
 8022dde:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022de0:	4b1e      	ldr	r3, [pc, #120]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022de2:	2208      	movs	r2, #8
 8022de4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022de6:	4b1d      	ldr	r3, [pc, #116]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022de8:	2201      	movs	r2, #1
 8022dea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022dec:	4b1b      	ldr	r3, [pc, #108]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022dee:	2200      	movs	r2, #0
 8022df0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8022df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022df6:	4919      	ldr	r1, [pc, #100]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022df8:	4819      	ldr	r0, [pc, #100]	; (8022e60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022dfa:	f004 fc11 	bl	8027620 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8022dfe:	4b17      	ldr	r3, [pc, #92]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e00:	2203      	movs	r2, #3
 8022e02:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022e04:	4b15      	ldr	r3, [pc, #84]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e06:	2208      	movs	r2, #8
 8022e08:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8022e0a:	4b14      	ldr	r3, [pc, #80]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e0c:	2204      	movs	r2, #4
 8022e0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8022e10:	4b12      	ldr	r3, [pc, #72]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e12:	2200      	movs	r2, #0
 8022e14:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e1a:	4910      	ldr	r1, [pc, #64]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e1c:	4810      	ldr	r0, [pc, #64]	; (8022e60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022e1e:	f004 fbff 	bl	8027620 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8022e22:	f44f 730c 	mov.w	r3, #560	; 0x230
 8022e26:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8022e28:	4b0c      	ldr	r3, [pc, #48]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e2a:	2204      	movs	r2, #4
 8022e2c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8022e2e:	4b0b      	ldr	r3, [pc, #44]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e30:	2208      	movs	r2, #8
 8022e32:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8022e34:	4b09      	ldr	r3, [pc, #36]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e36:	2201      	movs	r2, #1
 8022e38:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8022e3a:	68fb      	ldr	r3, [r7, #12]
 8022e3c:	4a07      	ldr	r2, [pc, #28]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e3e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8022e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022e44:	4905      	ldr	r1, [pc, #20]	; (8022e5c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8022e46:	4806      	ldr	r0, [pc, #24]	; (8022e60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022e48:	f004 fbea 	bl	8027620 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8022e4c:	6879      	ldr	r1, [r7, #4]
 8022e4e:	4804      	ldr	r0, [pc, #16]	; (8022e60 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8022e50:	f004 fc1b 	bl	802768a <HAL_SDRAM_ProgramRefreshRate>
}
 8022e54:	bf00      	nop
 8022e56:	3710      	adds	r7, #16
 8022e58:	46bd      	mov	sp, r7
 8022e5a:	bd80      	pop	{r7, pc}
 8022e5c:	20000a4c 	.word	0x20000a4c
 8022e60:	200009fc 	.word	0x200009fc

08022e64 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8022e64:	b580      	push	{r7, lr}
 8022e66:	b090      	sub	sp, #64	; 0x40
 8022e68:	af00      	add	r7, sp, #0
 8022e6a:	6078      	str	r0, [r7, #4]
 8022e6c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8022e6e:	687b      	ldr	r3, [r7, #4]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	f000 80ec 	beq.w	802304e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8022e76:	2300      	movs	r3, #0
 8022e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8022e7a:	4b77      	ldr	r3, [pc, #476]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e7e:	4a76      	ldr	r2, [pc, #472]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022e80:	f043 0301 	orr.w	r3, r3, #1
 8022e84:	6393      	str	r3, [r2, #56]	; 0x38
 8022e86:	4b74      	ldr	r3, [pc, #464]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022e8a:	f003 0301 	and.w	r3, r3, #1
 8022e8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8022e90:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8022e92:	2300      	movs	r3, #0
 8022e94:	627b      	str	r3, [r7, #36]	; 0x24
 8022e96:	4b70      	ldr	r3, [pc, #448]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e9a:	4a6f      	ldr	r2, [pc, #444]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8022ea2:	4b6d      	ldr	r3, [pc, #436]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8022eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022eae:	2300      	movs	r3, #0
 8022eb0:	623b      	str	r3, [r7, #32]
 8022eb2:	4b69      	ldr	r3, [pc, #420]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eb6:	4a68      	ldr	r2, [pc, #416]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022eb8:	f043 0302 	orr.w	r3, r3, #2
 8022ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8022ebe:	4b66      	ldr	r3, [pc, #408]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ec2:	f003 0302 	and.w	r3, r3, #2
 8022ec6:	623b      	str	r3, [r7, #32]
 8022ec8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022eca:	2300      	movs	r3, #0
 8022ecc:	61fb      	str	r3, [r7, #28]
 8022ece:	4b62      	ldr	r3, [pc, #392]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ed2:	4a61      	ldr	r2, [pc, #388]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ed4:	f043 0304 	orr.w	r3, r3, #4
 8022ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8022eda:	4b5f      	ldr	r3, [pc, #380]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ede:	f003 0304 	and.w	r3, r3, #4
 8022ee2:	61fb      	str	r3, [r7, #28]
 8022ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022ee6:	2300      	movs	r3, #0
 8022ee8:	61bb      	str	r3, [r7, #24]
 8022eea:	4b5b      	ldr	r3, [pc, #364]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eee:	4a5a      	ldr	r2, [pc, #360]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ef0:	f043 0308 	orr.w	r3, r3, #8
 8022ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8022ef6:	4b58      	ldr	r3, [pc, #352]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022efa:	f003 0308 	and.w	r3, r3, #8
 8022efe:	61bb      	str	r3, [r7, #24]
 8022f00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8022f02:	2300      	movs	r3, #0
 8022f04:	617b      	str	r3, [r7, #20]
 8022f06:	4b54      	ldr	r3, [pc, #336]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f0a:	4a53      	ldr	r2, [pc, #332]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f0c:	f043 0310 	orr.w	r3, r3, #16
 8022f10:	6313      	str	r3, [r2, #48]	; 0x30
 8022f12:	4b51      	ldr	r3, [pc, #324]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f16:	f003 0310 	and.w	r3, r3, #16
 8022f1a:	617b      	str	r3, [r7, #20]
 8022f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022f1e:	2300      	movs	r3, #0
 8022f20:	613b      	str	r3, [r7, #16]
 8022f22:	4b4d      	ldr	r3, [pc, #308]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f26:	4a4c      	ldr	r2, [pc, #304]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f28:	f043 0320 	orr.w	r3, r3, #32
 8022f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f2e:	4b4a      	ldr	r3, [pc, #296]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f32:	f003 0320 	and.w	r3, r3, #32
 8022f36:	613b      	str	r3, [r7, #16]
 8022f38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022f3a:	2300      	movs	r3, #0
 8022f3c:	60fb      	str	r3, [r7, #12]
 8022f3e:	4b46      	ldr	r3, [pc, #280]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f42:	4a45      	ldr	r2, [pc, #276]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f48:	6313      	str	r3, [r2, #48]	; 0x30
 8022f4a:	4b43      	ldr	r3, [pc, #268]	; (8023058 <BSP_SDRAM_MspInit+0x1f4>)
 8022f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f52:	60fb      	str	r3, [r7, #12]
 8022f54:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8022f56:	2302      	movs	r3, #2
 8022f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022f5a:	2302      	movs	r3, #2
 8022f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8022f5e:	2300      	movs	r3, #0
 8022f60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8022f62:	230c      	movs	r3, #12
 8022f64:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8022f66:	2360      	movs	r3, #96	; 0x60
 8022f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8022f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022f6e:	4619      	mov	r1, r3
 8022f70:	483a      	ldr	r0, [pc, #232]	; (802305c <BSP_SDRAM_MspInit+0x1f8>)
 8022f72:	f000 ffd3 	bl	8023f1c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8022f76:	2301      	movs	r3, #1
 8022f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8022f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022f7e:	4619      	mov	r1, r3
 8022f80:	4837      	ldr	r0, [pc, #220]	; (8023060 <BSP_SDRAM_MspInit+0x1fc>)
 8022f82:	f000 ffcb 	bl	8023f1c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8022f86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8022f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022f90:	4619      	mov	r1, r3
 8022f92:	4834      	ldr	r0, [pc, #208]	; (8023064 <BSP_SDRAM_MspInit+0x200>)
 8022f94:	f000 ffc2 	bl	8023f1c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8022f98:	f64f 7383 	movw	r3, #65411	; 0xff83
 8022f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8022f9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022fa2:	4619      	mov	r1, r3
 8022fa4:	4830      	ldr	r0, [pc, #192]	; (8023068 <BSP_SDRAM_MspInit+0x204>)
 8022fa6:	f000 ffb9 	bl	8023f1c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8022faa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8022fae:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8022fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022fb4:	4619      	mov	r1, r3
 8022fb6:	482d      	ldr	r0, [pc, #180]	; (802306c <BSP_SDRAM_MspInit+0x208>)
 8022fb8:	f000 ffb0 	bl	8023f1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8022fbc:	f248 1333 	movw	r3, #33075	; 0x8133
 8022fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022fc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8022fc6:	4619      	mov	r1, r3
 8022fc8:	4829      	ldr	r0, [pc, #164]	; (8023070 <BSP_SDRAM_MspInit+0x20c>)
 8022fca:	f000 ffa7 	bl	8023f1c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8022fce:	4b29      	ldr	r3, [pc, #164]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022fd0:	2200      	movs	r2, #0
 8022fd2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8022fd4:	4b27      	ldr	r3, [pc, #156]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022fd6:	2280      	movs	r2, #128	; 0x80
 8022fd8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8022fda:	4b26      	ldr	r3, [pc, #152]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022fe0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8022fe2:	4b24      	ldr	r3, [pc, #144]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022fe8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8022fea:	4b22      	ldr	r3, [pc, #136]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022fec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022ff0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8022ff2:	4b20      	ldr	r3, [pc, #128]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022ff4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8022ff8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8022ffa:	4b1e      	ldr	r3, [pc, #120]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8022ffc:	2200      	movs	r2, #0
 8022ffe:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8023000:	4b1c      	ldr	r3, [pc, #112]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8023002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8023006:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8023008:	4b1a      	ldr	r3, [pc, #104]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 802300a:	2200      	movs	r2, #0
 802300c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802300e:	4b19      	ldr	r3, [pc, #100]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8023010:	2203      	movs	r2, #3
 8023012:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8023014:	4b17      	ldr	r3, [pc, #92]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8023016:	2200      	movs	r2, #0
 8023018:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 802301a:	4b16      	ldr	r3, [pc, #88]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 802301c:	2200      	movs	r2, #0
 802301e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8023020:	4b14      	ldr	r3, [pc, #80]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8023022:	4a15      	ldr	r2, [pc, #84]	; (8023078 <BSP_SDRAM_MspInit+0x214>)
 8023024:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8023026:	687b      	ldr	r3, [r7, #4]
 8023028:	4a12      	ldr	r2, [pc, #72]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 802302a:	631a      	str	r2, [r3, #48]	; 0x30
 802302c:	4a11      	ldr	r2, [pc, #68]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8023032:	4810      	ldr	r0, [pc, #64]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 8023034:	f000 fa34 	bl	80234a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8023038:	480e      	ldr	r0, [pc, #56]	; (8023074 <BSP_SDRAM_MspInit+0x210>)
 802303a:	f000 f983 	bl	8023344 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 802303e:	2200      	movs	r2, #0
 8023040:	210f      	movs	r1, #15
 8023042:	2038      	movs	r0, #56	; 0x38
 8023044:	f000 f938 	bl	80232b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8023048:	2038      	movs	r0, #56	; 0x38
 802304a:	f000 f951 	bl	80232f0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 802304e:	bf00      	nop
 8023050:	3740      	adds	r7, #64	; 0x40
 8023052:	46bd      	mov	sp, r7
 8023054:	bd80      	pop	{r7, pc}
 8023056:	bf00      	nop
 8023058:	40023800 	.word	0x40023800
 802305c:	40020400 	.word	0x40020400
 8023060:	40020800 	.word	0x40020800
 8023064:	40020c00 	.word	0x40020c00
 8023068:	40021000 	.word	0x40021000
 802306c:	40021400 	.word	0x40021400
 8023070:	40021800 	.word	0x40021800
 8023074:	20000a5c 	.word	0x20000a5c
 8023078:	40026410 	.word	0x40026410

0802307c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 802307c:	b580      	push	{r7, lr}
 802307e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023080:	4b0e      	ldr	r3, [pc, #56]	; (80230bc <HAL_Init+0x40>)
 8023082:	681b      	ldr	r3, [r3, #0]
 8023084:	4a0d      	ldr	r2, [pc, #52]	; (80230bc <HAL_Init+0x40>)
 8023086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802308a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 802308c:	4b0b      	ldr	r3, [pc, #44]	; (80230bc <HAL_Init+0x40>)
 802308e:	681b      	ldr	r3, [r3, #0]
 8023090:	4a0a      	ldr	r2, [pc, #40]	; (80230bc <HAL_Init+0x40>)
 8023092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023098:	4b08      	ldr	r3, [pc, #32]	; (80230bc <HAL_Init+0x40>)
 802309a:	681b      	ldr	r3, [r3, #0]
 802309c:	4a07      	ldr	r2, [pc, #28]	; (80230bc <HAL_Init+0x40>)
 802309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80230a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80230a4:	2003      	movs	r0, #3
 80230a6:	f000 f8fc 	bl	80232a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80230aa:	200f      	movs	r0, #15
 80230ac:	f7fe fc38 	bl	8021920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80230b0:	f7fe f85e 	bl	8021170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80230b4:	2300      	movs	r3, #0
}
 80230b6:	4618      	mov	r0, r3
 80230b8:	bd80      	pop	{r7, pc}
 80230ba:	bf00      	nop
 80230bc:	40023c00 	.word	0x40023c00

080230c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80230c0:	b480      	push	{r7}
 80230c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80230c4:	4b06      	ldr	r3, [pc, #24]	; (80230e0 <HAL_IncTick+0x20>)
 80230c6:	781b      	ldrb	r3, [r3, #0]
 80230c8:	461a      	mov	r2, r3
 80230ca:	4b06      	ldr	r3, [pc, #24]	; (80230e4 <HAL_IncTick+0x24>)
 80230cc:	681b      	ldr	r3, [r3, #0]
 80230ce:	4413      	add	r3, r2
 80230d0:	4a04      	ldr	r2, [pc, #16]	; (80230e4 <HAL_IncTick+0x24>)
 80230d2:	6013      	str	r3, [r2, #0]
}
 80230d4:	bf00      	nop
 80230d6:	46bd      	mov	sp, r7
 80230d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230dc:	4770      	bx	lr
 80230de:	bf00      	nop
 80230e0:	20000058 	.word	0x20000058
 80230e4:	20000abc 	.word	0x20000abc

080230e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80230e8:	b480      	push	{r7}
 80230ea:	af00      	add	r7, sp, #0
  return uwTick;
 80230ec:	4b03      	ldr	r3, [pc, #12]	; (80230fc <HAL_GetTick+0x14>)
 80230ee:	681b      	ldr	r3, [r3, #0]
}
 80230f0:	4618      	mov	r0, r3
 80230f2:	46bd      	mov	sp, r7
 80230f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230f8:	4770      	bx	lr
 80230fa:	bf00      	nop
 80230fc:	20000abc 	.word	0x20000abc

08023100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023100:	b580      	push	{r7, lr}
 8023102:	b084      	sub	sp, #16
 8023104:	af00      	add	r7, sp, #0
 8023106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023108:	f7ff ffee 	bl	80230e8 <HAL_GetTick>
 802310c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802310e:	687b      	ldr	r3, [r7, #4]
 8023110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023112:	68fb      	ldr	r3, [r7, #12]
 8023114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023118:	d005      	beq.n	8023126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802311a:	4b0a      	ldr	r3, [pc, #40]	; (8023144 <HAL_Delay+0x44>)
 802311c:	781b      	ldrb	r3, [r3, #0]
 802311e:	461a      	mov	r2, r3
 8023120:	68fb      	ldr	r3, [r7, #12]
 8023122:	4413      	add	r3, r2
 8023124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8023126:	bf00      	nop
 8023128:	f7ff ffde 	bl	80230e8 <HAL_GetTick>
 802312c:	4602      	mov	r2, r0
 802312e:	68bb      	ldr	r3, [r7, #8]
 8023130:	1ad3      	subs	r3, r2, r3
 8023132:	68fa      	ldr	r2, [r7, #12]
 8023134:	429a      	cmp	r2, r3
 8023136:	d8f7      	bhi.n	8023128 <HAL_Delay+0x28>
  {
  }
}
 8023138:	bf00      	nop
 802313a:	bf00      	nop
 802313c:	3710      	adds	r7, #16
 802313e:	46bd      	mov	sp, r7
 8023140:	bd80      	pop	{r7, pc}
 8023142:	bf00      	nop
 8023144:	20000058 	.word	0x20000058

08023148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023148:	b480      	push	{r7}
 802314a:	b085      	sub	sp, #20
 802314c:	af00      	add	r7, sp, #0
 802314e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	f003 0307 	and.w	r3, r3, #7
 8023156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8023158:	4b0c      	ldr	r3, [pc, #48]	; (802318c <__NVIC_SetPriorityGrouping+0x44>)
 802315a:	68db      	ldr	r3, [r3, #12]
 802315c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802315e:	68ba      	ldr	r2, [r7, #8]
 8023160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023164:	4013      	ands	r3, r2
 8023166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8023168:	68fb      	ldr	r3, [r7, #12]
 802316a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 802316c:	68bb      	ldr	r3, [r7, #8]
 802316e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8023170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802317a:	4a04      	ldr	r2, [pc, #16]	; (802318c <__NVIC_SetPriorityGrouping+0x44>)
 802317c:	68bb      	ldr	r3, [r7, #8]
 802317e:	60d3      	str	r3, [r2, #12]
}
 8023180:	bf00      	nop
 8023182:	3714      	adds	r7, #20
 8023184:	46bd      	mov	sp, r7
 8023186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802318a:	4770      	bx	lr
 802318c:	e000ed00 	.word	0xe000ed00

08023190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023190:	b480      	push	{r7}
 8023192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023194:	4b04      	ldr	r3, [pc, #16]	; (80231a8 <__NVIC_GetPriorityGrouping+0x18>)
 8023196:	68db      	ldr	r3, [r3, #12]
 8023198:	0a1b      	lsrs	r3, r3, #8
 802319a:	f003 0307 	and.w	r3, r3, #7
}
 802319e:	4618      	mov	r0, r3
 80231a0:	46bd      	mov	sp, r7
 80231a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a6:	4770      	bx	lr
 80231a8:	e000ed00 	.word	0xe000ed00

080231ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80231ac:	b480      	push	{r7}
 80231ae:	b083      	sub	sp, #12
 80231b0:	af00      	add	r7, sp, #0
 80231b2:	4603      	mov	r3, r0
 80231b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80231b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80231ba:	2b00      	cmp	r3, #0
 80231bc:	db0b      	blt.n	80231d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80231be:	79fb      	ldrb	r3, [r7, #7]
 80231c0:	f003 021f 	and.w	r2, r3, #31
 80231c4:	4907      	ldr	r1, [pc, #28]	; (80231e4 <__NVIC_EnableIRQ+0x38>)
 80231c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80231ca:	095b      	lsrs	r3, r3, #5
 80231cc:	2001      	movs	r0, #1
 80231ce:	fa00 f202 	lsl.w	r2, r0, r2
 80231d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80231d6:	bf00      	nop
 80231d8:	370c      	adds	r7, #12
 80231da:	46bd      	mov	sp, r7
 80231dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231e0:	4770      	bx	lr
 80231e2:	bf00      	nop
 80231e4:	e000e100 	.word	0xe000e100

080231e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80231e8:	b480      	push	{r7}
 80231ea:	b083      	sub	sp, #12
 80231ec:	af00      	add	r7, sp, #0
 80231ee:	4603      	mov	r3, r0
 80231f0:	6039      	str	r1, [r7, #0]
 80231f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80231f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	db0a      	blt.n	8023212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80231fc:	683b      	ldr	r3, [r7, #0]
 80231fe:	b2da      	uxtb	r2, r3
 8023200:	490c      	ldr	r1, [pc, #48]	; (8023234 <__NVIC_SetPriority+0x4c>)
 8023202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023206:	0112      	lsls	r2, r2, #4
 8023208:	b2d2      	uxtb	r2, r2
 802320a:	440b      	add	r3, r1
 802320c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023210:	e00a      	b.n	8023228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023212:	683b      	ldr	r3, [r7, #0]
 8023214:	b2da      	uxtb	r2, r3
 8023216:	4908      	ldr	r1, [pc, #32]	; (8023238 <__NVIC_SetPriority+0x50>)
 8023218:	79fb      	ldrb	r3, [r7, #7]
 802321a:	f003 030f 	and.w	r3, r3, #15
 802321e:	3b04      	subs	r3, #4
 8023220:	0112      	lsls	r2, r2, #4
 8023222:	b2d2      	uxtb	r2, r2
 8023224:	440b      	add	r3, r1
 8023226:	761a      	strb	r2, [r3, #24]
}
 8023228:	bf00      	nop
 802322a:	370c      	adds	r7, #12
 802322c:	46bd      	mov	sp, r7
 802322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023232:	4770      	bx	lr
 8023234:	e000e100 	.word	0xe000e100
 8023238:	e000ed00 	.word	0xe000ed00

0802323c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802323c:	b480      	push	{r7}
 802323e:	b089      	sub	sp, #36	; 0x24
 8023240:	af00      	add	r7, sp, #0
 8023242:	60f8      	str	r0, [r7, #12]
 8023244:	60b9      	str	r1, [r7, #8]
 8023246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023248:	68fb      	ldr	r3, [r7, #12]
 802324a:	f003 0307 	and.w	r3, r3, #7
 802324e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8023250:	69fb      	ldr	r3, [r7, #28]
 8023252:	f1c3 0307 	rsb	r3, r3, #7
 8023256:	2b04      	cmp	r3, #4
 8023258:	bf28      	it	cs
 802325a:	2304      	movcs	r3, #4
 802325c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802325e:	69fb      	ldr	r3, [r7, #28]
 8023260:	3304      	adds	r3, #4
 8023262:	2b06      	cmp	r3, #6
 8023264:	d902      	bls.n	802326c <NVIC_EncodePriority+0x30>
 8023266:	69fb      	ldr	r3, [r7, #28]
 8023268:	3b03      	subs	r3, #3
 802326a:	e000      	b.n	802326e <NVIC_EncodePriority+0x32>
 802326c:	2300      	movs	r3, #0
 802326e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023270:	f04f 32ff 	mov.w	r2, #4294967295
 8023274:	69bb      	ldr	r3, [r7, #24]
 8023276:	fa02 f303 	lsl.w	r3, r2, r3
 802327a:	43da      	mvns	r2, r3
 802327c:	68bb      	ldr	r3, [r7, #8]
 802327e:	401a      	ands	r2, r3
 8023280:	697b      	ldr	r3, [r7, #20]
 8023282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023284:	f04f 31ff 	mov.w	r1, #4294967295
 8023288:	697b      	ldr	r3, [r7, #20]
 802328a:	fa01 f303 	lsl.w	r3, r1, r3
 802328e:	43d9      	mvns	r1, r3
 8023290:	687b      	ldr	r3, [r7, #4]
 8023292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023294:	4313      	orrs	r3, r2
         );
}
 8023296:	4618      	mov	r0, r3
 8023298:	3724      	adds	r7, #36	; 0x24
 802329a:	46bd      	mov	sp, r7
 802329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232a0:	4770      	bx	lr

080232a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80232a2:	b580      	push	{r7, lr}
 80232a4:	b082      	sub	sp, #8
 80232a6:	af00      	add	r7, sp, #0
 80232a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80232aa:	6878      	ldr	r0, [r7, #4]
 80232ac:	f7ff ff4c 	bl	8023148 <__NVIC_SetPriorityGrouping>
}
 80232b0:	bf00      	nop
 80232b2:	3708      	adds	r7, #8
 80232b4:	46bd      	mov	sp, r7
 80232b6:	bd80      	pop	{r7, pc}

080232b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80232b8:	b580      	push	{r7, lr}
 80232ba:	b086      	sub	sp, #24
 80232bc:	af00      	add	r7, sp, #0
 80232be:	4603      	mov	r3, r0
 80232c0:	60b9      	str	r1, [r7, #8]
 80232c2:	607a      	str	r2, [r7, #4]
 80232c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80232c6:	2300      	movs	r3, #0
 80232c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80232ca:	f7ff ff61 	bl	8023190 <__NVIC_GetPriorityGrouping>
 80232ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80232d0:	687a      	ldr	r2, [r7, #4]
 80232d2:	68b9      	ldr	r1, [r7, #8]
 80232d4:	6978      	ldr	r0, [r7, #20]
 80232d6:	f7ff ffb1 	bl	802323c <NVIC_EncodePriority>
 80232da:	4602      	mov	r2, r0
 80232dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80232e0:	4611      	mov	r1, r2
 80232e2:	4618      	mov	r0, r3
 80232e4:	f7ff ff80 	bl	80231e8 <__NVIC_SetPriority>
}
 80232e8:	bf00      	nop
 80232ea:	3718      	adds	r7, #24
 80232ec:	46bd      	mov	sp, r7
 80232ee:	bd80      	pop	{r7, pc}

080232f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b082      	sub	sp, #8
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	4603      	mov	r3, r0
 80232f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80232fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80232fe:	4618      	mov	r0, r3
 8023300:	f7ff ff54 	bl	80231ac <__NVIC_EnableIRQ>
}
 8023304:	bf00      	nop
 8023306:	3708      	adds	r7, #8
 8023308:	46bd      	mov	sp, r7
 802330a:	bd80      	pop	{r7, pc}

0802330c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 802330c:	b580      	push	{r7, lr}
 802330e:	b082      	sub	sp, #8
 8023310:	af00      	add	r7, sp, #0
 8023312:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	2b00      	cmp	r3, #0
 8023318:	d101      	bne.n	802331e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802331a:	2301      	movs	r3, #1
 802331c:	e00e      	b.n	802333c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 802331e:	687b      	ldr	r3, [r7, #4]
 8023320:	795b      	ldrb	r3, [r3, #5]
 8023322:	b2db      	uxtb	r3, r3
 8023324:	2b00      	cmp	r3, #0
 8023326:	d105      	bne.n	8023334 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	2200      	movs	r2, #0
 802332c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 802332e:	6878      	ldr	r0, [r7, #4]
 8023330:	f7fd ff46 	bl	80211c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	2201      	movs	r2, #1
 8023338:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802333a:	2300      	movs	r3, #0
}
 802333c:	4618      	mov	r0, r3
 802333e:	3708      	adds	r7, #8
 8023340:	46bd      	mov	sp, r7
 8023342:	bd80      	pop	{r7, pc}

08023344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023344:	b580      	push	{r7, lr}
 8023346:	b086      	sub	sp, #24
 8023348:	af00      	add	r7, sp, #0
 802334a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802334c:	2300      	movs	r3, #0
 802334e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023350:	f7ff feca 	bl	80230e8 <HAL_GetTick>
 8023354:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	2b00      	cmp	r3, #0
 802335a:	d101      	bne.n	8023360 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802335c:	2301      	movs	r3, #1
 802335e:	e099      	b.n	8023494 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023360:	687b      	ldr	r3, [r7, #4]
 8023362:	2202      	movs	r2, #2
 8023364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023368:	687b      	ldr	r3, [r7, #4]
 802336a:	2200      	movs	r2, #0
 802336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023370:	687b      	ldr	r3, [r7, #4]
 8023372:	681b      	ldr	r3, [r3, #0]
 8023374:	681a      	ldr	r2, [r3, #0]
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	f022 0201 	bic.w	r2, r2, #1
 802337e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023380:	e00f      	b.n	80233a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023382:	f7ff feb1 	bl	80230e8 <HAL_GetTick>
 8023386:	4602      	mov	r2, r0
 8023388:	693b      	ldr	r3, [r7, #16]
 802338a:	1ad3      	subs	r3, r2, r3
 802338c:	2b05      	cmp	r3, #5
 802338e:	d908      	bls.n	80233a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023390:	687b      	ldr	r3, [r7, #4]
 8023392:	2220      	movs	r2, #32
 8023394:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	2203      	movs	r2, #3
 802339a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802339e:	2303      	movs	r3, #3
 80233a0:	e078      	b.n	8023494 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	681b      	ldr	r3, [r3, #0]
 80233a8:	f003 0301 	and.w	r3, r3, #1
 80233ac:	2b00      	cmp	r3, #0
 80233ae:	d1e8      	bne.n	8023382 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80233b8:	697a      	ldr	r2, [r7, #20]
 80233ba:	4b38      	ldr	r3, [pc, #224]	; (802349c <HAL_DMA_Init+0x158>)
 80233bc:	4013      	ands	r3, r2
 80233be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80233c0:	687b      	ldr	r3, [r7, #4]
 80233c2:	685a      	ldr	r2, [r3, #4]
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	689b      	ldr	r3, [r3, #8]
 80233c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80233ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	691b      	ldr	r3, [r3, #16]
 80233d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80233da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80233dc:	687b      	ldr	r3, [r7, #4]
 80233de:	699b      	ldr	r3, [r3, #24]
 80233e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80233e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80233e8:	687b      	ldr	r3, [r7, #4]
 80233ea:	6a1b      	ldr	r3, [r3, #32]
 80233ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80233ee:	697a      	ldr	r2, [r7, #20]
 80233f0:	4313      	orrs	r3, r2
 80233f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80233f4:	687b      	ldr	r3, [r7, #4]
 80233f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233f8:	2b04      	cmp	r3, #4
 80233fa:	d107      	bne.n	802340c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023400:	687b      	ldr	r3, [r7, #4]
 8023402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023404:	4313      	orrs	r3, r2
 8023406:	697a      	ldr	r2, [r7, #20]
 8023408:	4313      	orrs	r3, r2
 802340a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	697a      	ldr	r2, [r7, #20]
 8023412:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	681b      	ldr	r3, [r3, #0]
 8023418:	695b      	ldr	r3, [r3, #20]
 802341a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 802341c:	697b      	ldr	r3, [r7, #20]
 802341e:	f023 0307 	bic.w	r3, r3, #7
 8023422:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023424:	687b      	ldr	r3, [r7, #4]
 8023426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023428:	697a      	ldr	r2, [r7, #20]
 802342a:	4313      	orrs	r3, r2
 802342c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802342e:	687b      	ldr	r3, [r7, #4]
 8023430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023432:	2b04      	cmp	r3, #4
 8023434:	d117      	bne.n	8023466 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8023436:	687b      	ldr	r3, [r7, #4]
 8023438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802343a:	697a      	ldr	r2, [r7, #20]
 802343c:	4313      	orrs	r3, r2
 802343e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023444:	2b00      	cmp	r3, #0
 8023446:	d00e      	beq.n	8023466 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023448:	6878      	ldr	r0, [r7, #4]
 802344a:	f000 f94f 	bl	80236ec <DMA_CheckFifoParam>
 802344e:	4603      	mov	r3, r0
 8023450:	2b00      	cmp	r3, #0
 8023452:	d008      	beq.n	8023466 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	2240      	movs	r2, #64	; 0x40
 8023458:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	2201      	movs	r2, #1
 802345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023462:	2301      	movs	r3, #1
 8023464:	e016      	b.n	8023494 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	681b      	ldr	r3, [r3, #0]
 802346a:	697a      	ldr	r2, [r7, #20]
 802346c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802346e:	6878      	ldr	r0, [r7, #4]
 8023470:	f000 f906 	bl	8023680 <DMA_CalcBaseAndBitshift>
 8023474:	4603      	mov	r3, r0
 8023476:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802347c:	223f      	movs	r2, #63	; 0x3f
 802347e:	409a      	lsls	r2, r3
 8023480:	68fb      	ldr	r3, [r7, #12]
 8023482:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	2200      	movs	r2, #0
 8023488:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802348a:	687b      	ldr	r3, [r7, #4]
 802348c:	2201      	movs	r2, #1
 802348e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023492:	2300      	movs	r3, #0
}
 8023494:	4618      	mov	r0, r3
 8023496:	3718      	adds	r7, #24
 8023498:	46bd      	mov	sp, r7
 802349a:	bd80      	pop	{r7, pc}
 802349c:	f010803f 	.word	0xf010803f

080234a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80234a0:	b580      	push	{r7, lr}
 80234a2:	b084      	sub	sp, #16
 80234a4:	af00      	add	r7, sp, #0
 80234a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80234a8:	687b      	ldr	r3, [r7, #4]
 80234aa:	2b00      	cmp	r3, #0
 80234ac:	d101      	bne.n	80234b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80234ae:	2301      	movs	r3, #1
 80234b0:	e050      	b.n	8023554 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80234b2:	687b      	ldr	r3, [r7, #4]
 80234b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80234b8:	b2db      	uxtb	r3, r3
 80234ba:	2b02      	cmp	r3, #2
 80234bc:	d101      	bne.n	80234c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80234be:	2302      	movs	r3, #2
 80234c0:	e048      	b.n	8023554 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80234c2:	687b      	ldr	r3, [r7, #4]
 80234c4:	681b      	ldr	r3, [r3, #0]
 80234c6:	681a      	ldr	r2, [r3, #0]
 80234c8:	687b      	ldr	r3, [r7, #4]
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	f022 0201 	bic.w	r2, r2, #1
 80234d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	681b      	ldr	r3, [r3, #0]
 80234d6:	2200      	movs	r2, #0
 80234d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80234da:	687b      	ldr	r3, [r7, #4]
 80234dc:	681b      	ldr	r3, [r3, #0]
 80234de:	2200      	movs	r2, #0
 80234e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80234e2:	687b      	ldr	r3, [r7, #4]
 80234e4:	681b      	ldr	r3, [r3, #0]
 80234e6:	2200      	movs	r2, #0
 80234e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	681b      	ldr	r3, [r3, #0]
 80234ee:	2200      	movs	r2, #0
 80234f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80234f2:	687b      	ldr	r3, [r7, #4]
 80234f4:	681b      	ldr	r3, [r3, #0]
 80234f6:	2200      	movs	r2, #0
 80234f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	681b      	ldr	r3, [r3, #0]
 80234fe:	2221      	movs	r2, #33	; 0x21
 8023500:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023502:	6878      	ldr	r0, [r7, #4]
 8023504:	f000 f8bc 	bl	8023680 <DMA_CalcBaseAndBitshift>
 8023508:	4603      	mov	r3, r0
 802350a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	2200      	movs	r2, #0
 8023510:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	2200      	movs	r2, #0
 8023516:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	2200      	movs	r2, #0
 802351c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 802351e:	687b      	ldr	r3, [r7, #4]
 8023520:	2200      	movs	r2, #0
 8023522:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	2200      	movs	r2, #0
 8023528:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 802352a:	687b      	ldr	r3, [r7, #4]
 802352c:	2200      	movs	r2, #0
 802352e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023530:	687b      	ldr	r3, [r7, #4]
 8023532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023534:	223f      	movs	r2, #63	; 0x3f
 8023536:	409a      	lsls	r2, r3
 8023538:	68fb      	ldr	r3, [r7, #12]
 802353a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	2200      	movs	r2, #0
 8023540:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	2200      	movs	r2, #0
 8023546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	2200      	movs	r2, #0
 802354e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023552:	2300      	movs	r3, #0
}
 8023554:	4618      	mov	r0, r3
 8023556:	3710      	adds	r7, #16
 8023558:	46bd      	mov	sp, r7
 802355a:	bd80      	pop	{r7, pc}

0802355c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 802355c:	b580      	push	{r7, lr}
 802355e:	b084      	sub	sp, #16
 8023560:	af00      	add	r7, sp, #0
 8023562:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023564:	687b      	ldr	r3, [r7, #4]
 8023566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023568:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 802356a:	f7ff fdbd 	bl	80230e8 <HAL_GetTick>
 802356e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023570:	687b      	ldr	r3, [r7, #4]
 8023572:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023576:	b2db      	uxtb	r3, r3
 8023578:	2b02      	cmp	r3, #2
 802357a:	d008      	beq.n	802358e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 802357c:	687b      	ldr	r3, [r7, #4]
 802357e:	2280      	movs	r2, #128	; 0x80
 8023580:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	2200      	movs	r2, #0
 8023586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 802358a:	2301      	movs	r3, #1
 802358c:	e052      	b.n	8023634 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	681b      	ldr	r3, [r3, #0]
 8023592:	681a      	ldr	r2, [r3, #0]
 8023594:	687b      	ldr	r3, [r7, #4]
 8023596:	681b      	ldr	r3, [r3, #0]
 8023598:	f022 0216 	bic.w	r2, r2, #22
 802359c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	681b      	ldr	r3, [r3, #0]
 80235a2:	695a      	ldr	r2, [r3, #20]
 80235a4:	687b      	ldr	r3, [r7, #4]
 80235a6:	681b      	ldr	r3, [r3, #0]
 80235a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80235ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d103      	bne.n	80235be <HAL_DMA_Abort+0x62>
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80235ba:	2b00      	cmp	r3, #0
 80235bc:	d007      	beq.n	80235ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80235be:	687b      	ldr	r3, [r7, #4]
 80235c0:	681b      	ldr	r3, [r3, #0]
 80235c2:	681a      	ldr	r2, [r3, #0]
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	681b      	ldr	r3, [r3, #0]
 80235c8:	f022 0208 	bic.w	r2, r2, #8
 80235cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	681a      	ldr	r2, [r3, #0]
 80235d4:	687b      	ldr	r3, [r7, #4]
 80235d6:	681b      	ldr	r3, [r3, #0]
 80235d8:	f022 0201 	bic.w	r2, r2, #1
 80235dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80235de:	e013      	b.n	8023608 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80235e0:	f7ff fd82 	bl	80230e8 <HAL_GetTick>
 80235e4:	4602      	mov	r2, r0
 80235e6:	68bb      	ldr	r3, [r7, #8]
 80235e8:	1ad3      	subs	r3, r2, r3
 80235ea:	2b05      	cmp	r3, #5
 80235ec:	d90c      	bls.n	8023608 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	2220      	movs	r2, #32
 80235f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	2203      	movs	r2, #3
 80235f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80235fc:	687b      	ldr	r3, [r7, #4]
 80235fe:	2200      	movs	r2, #0
 8023600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023604:	2303      	movs	r3, #3
 8023606:	e015      	b.n	8023634 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	f003 0301 	and.w	r3, r3, #1
 8023612:	2b00      	cmp	r3, #0
 8023614:	d1e4      	bne.n	80235e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023616:	687b      	ldr	r3, [r7, #4]
 8023618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802361a:	223f      	movs	r2, #63	; 0x3f
 802361c:	409a      	lsls	r2, r3
 802361e:	68fb      	ldr	r3, [r7, #12]
 8023620:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	2201      	movs	r2, #1
 8023626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802362a:	687b      	ldr	r3, [r7, #4]
 802362c:	2200      	movs	r2, #0
 802362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023632:	2300      	movs	r3, #0
}
 8023634:	4618      	mov	r0, r3
 8023636:	3710      	adds	r7, #16
 8023638:	46bd      	mov	sp, r7
 802363a:	bd80      	pop	{r7, pc}

0802363c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 802363c:	b480      	push	{r7}
 802363e:	b083      	sub	sp, #12
 8023640:	af00      	add	r7, sp, #0
 8023642:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802364a:	b2db      	uxtb	r3, r3
 802364c:	2b02      	cmp	r3, #2
 802364e:	d004      	beq.n	802365a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023650:	687b      	ldr	r3, [r7, #4]
 8023652:	2280      	movs	r2, #128	; 0x80
 8023654:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023656:	2301      	movs	r3, #1
 8023658:	e00c      	b.n	8023674 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 802365a:	687b      	ldr	r3, [r7, #4]
 802365c:	2205      	movs	r2, #5
 802365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023662:	687b      	ldr	r3, [r7, #4]
 8023664:	681b      	ldr	r3, [r3, #0]
 8023666:	681a      	ldr	r2, [r3, #0]
 8023668:	687b      	ldr	r3, [r7, #4]
 802366a:	681b      	ldr	r3, [r3, #0]
 802366c:	f022 0201 	bic.w	r2, r2, #1
 8023670:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023672:	2300      	movs	r3, #0
}
 8023674:	4618      	mov	r0, r3
 8023676:	370c      	adds	r7, #12
 8023678:	46bd      	mov	sp, r7
 802367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802367e:	4770      	bx	lr

08023680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023680:	b480      	push	{r7}
 8023682:	b085      	sub	sp, #20
 8023684:	af00      	add	r7, sp, #0
 8023686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023688:	687b      	ldr	r3, [r7, #4]
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	b2db      	uxtb	r3, r3
 802368e:	3b10      	subs	r3, #16
 8023690:	4a14      	ldr	r2, [pc, #80]	; (80236e4 <DMA_CalcBaseAndBitshift+0x64>)
 8023692:	fba2 2303 	umull	r2, r3, r2, r3
 8023696:	091b      	lsrs	r3, r3, #4
 8023698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802369a:	4a13      	ldr	r2, [pc, #76]	; (80236e8 <DMA_CalcBaseAndBitshift+0x68>)
 802369c:	68fb      	ldr	r3, [r7, #12]
 802369e:	4413      	add	r3, r2
 80236a0:	781b      	ldrb	r3, [r3, #0]
 80236a2:	461a      	mov	r2, r3
 80236a4:	687b      	ldr	r3, [r7, #4]
 80236a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80236a8:	68fb      	ldr	r3, [r7, #12]
 80236aa:	2b03      	cmp	r3, #3
 80236ac:	d909      	bls.n	80236c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80236ae:	687b      	ldr	r3, [r7, #4]
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80236b6:	f023 0303 	bic.w	r3, r3, #3
 80236ba:	1d1a      	adds	r2, r3, #4
 80236bc:	687b      	ldr	r3, [r7, #4]
 80236be:	659a      	str	r2, [r3, #88]	; 0x58
 80236c0:	e007      	b.n	80236d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80236c2:	687b      	ldr	r3, [r7, #4]
 80236c4:	681b      	ldr	r3, [r3, #0]
 80236c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80236ca:	f023 0303 	bic.w	r3, r3, #3
 80236ce:	687a      	ldr	r2, [r7, #4]
 80236d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80236d6:	4618      	mov	r0, r3
 80236d8:	3714      	adds	r7, #20
 80236da:	46bd      	mov	sp, r7
 80236dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236e0:	4770      	bx	lr
 80236e2:	bf00      	nop
 80236e4:	aaaaaaab 	.word	0xaaaaaaab
 80236e8:	08030ce4 	.word	0x08030ce4

080236ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80236ec:	b480      	push	{r7}
 80236ee:	b085      	sub	sp, #20
 80236f0:	af00      	add	r7, sp, #0
 80236f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80236f4:	2300      	movs	r3, #0
 80236f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80236fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	699b      	ldr	r3, [r3, #24]
 8023702:	2b00      	cmp	r3, #0
 8023704:	d11f      	bne.n	8023746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023706:	68bb      	ldr	r3, [r7, #8]
 8023708:	2b03      	cmp	r3, #3
 802370a:	d856      	bhi.n	80237ba <DMA_CheckFifoParam+0xce>
 802370c:	a201      	add	r2, pc, #4	; (adr r2, 8023714 <DMA_CheckFifoParam+0x28>)
 802370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023712:	bf00      	nop
 8023714:	08023725 	.word	0x08023725
 8023718:	08023737 	.word	0x08023737
 802371c:	08023725 	.word	0x08023725
 8023720:	080237bb 	.word	0x080237bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023724:	687b      	ldr	r3, [r7, #4]
 8023726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802372c:	2b00      	cmp	r3, #0
 802372e:	d046      	beq.n	80237be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023730:	2301      	movs	r3, #1
 8023732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023734:	e043      	b.n	80237be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023736:	687b      	ldr	r3, [r7, #4]
 8023738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802373a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802373e:	d140      	bne.n	80237c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023740:	2301      	movs	r3, #1
 8023742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023744:	e03d      	b.n	80237c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023746:	687b      	ldr	r3, [r7, #4]
 8023748:	699b      	ldr	r3, [r3, #24]
 802374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802374e:	d121      	bne.n	8023794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023750:	68bb      	ldr	r3, [r7, #8]
 8023752:	2b03      	cmp	r3, #3
 8023754:	d837      	bhi.n	80237c6 <DMA_CheckFifoParam+0xda>
 8023756:	a201      	add	r2, pc, #4	; (adr r2, 802375c <DMA_CheckFifoParam+0x70>)
 8023758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802375c:	0802376d 	.word	0x0802376d
 8023760:	08023773 	.word	0x08023773
 8023764:	0802376d 	.word	0x0802376d
 8023768:	08023785 	.word	0x08023785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802376c:	2301      	movs	r3, #1
 802376e:	73fb      	strb	r3, [r7, #15]
      break;
 8023770:	e030      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802377a:	2b00      	cmp	r3, #0
 802377c:	d025      	beq.n	80237ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 802377e:	2301      	movs	r3, #1
 8023780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023782:	e022      	b.n	80237ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023788:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802378c:	d11f      	bne.n	80237ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 802378e:	2301      	movs	r3, #1
 8023790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023792:	e01c      	b.n	80237ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023794:	68bb      	ldr	r3, [r7, #8]
 8023796:	2b02      	cmp	r3, #2
 8023798:	d903      	bls.n	80237a2 <DMA_CheckFifoParam+0xb6>
 802379a:	68bb      	ldr	r3, [r7, #8]
 802379c:	2b03      	cmp	r3, #3
 802379e:	d003      	beq.n	80237a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80237a0:	e018      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80237a2:	2301      	movs	r3, #1
 80237a4:	73fb      	strb	r3, [r7, #15]
      break;
 80237a6:	e015      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80237a8:	687b      	ldr	r3, [r7, #4]
 80237aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80237ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	d00e      	beq.n	80237d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80237b4:	2301      	movs	r3, #1
 80237b6:	73fb      	strb	r3, [r7, #15]
      break;
 80237b8:	e00b      	b.n	80237d2 <DMA_CheckFifoParam+0xe6>
      break;
 80237ba:	bf00      	nop
 80237bc:	e00a      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;
 80237be:	bf00      	nop
 80237c0:	e008      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;
 80237c2:	bf00      	nop
 80237c4:	e006      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;
 80237c6:	bf00      	nop
 80237c8:	e004      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;
 80237ca:	bf00      	nop
 80237cc:	e002      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80237ce:	bf00      	nop
 80237d0:	e000      	b.n	80237d4 <DMA_CheckFifoParam+0xe8>
      break;
 80237d2:	bf00      	nop
    }
  } 
  
  return status; 
 80237d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80237d6:	4618      	mov	r0, r3
 80237d8:	3714      	adds	r7, #20
 80237da:	46bd      	mov	sp, r7
 80237dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e0:	4770      	bx	lr
 80237e2:	bf00      	nop

080237e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80237e4:	b580      	push	{r7, lr}
 80237e6:	b082      	sub	sp, #8
 80237e8:	af00      	add	r7, sp, #0
 80237ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80237ec:	687b      	ldr	r3, [r7, #4]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d101      	bne.n	80237f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80237f2:	2301      	movs	r3, #1
 80237f4:	e03b      	b.n	802386e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80237f6:	687b      	ldr	r3, [r7, #4]
 80237f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80237fc:	b2db      	uxtb	r3, r3
 80237fe:	2b00      	cmp	r3, #0
 8023800:	d106      	bne.n	8023810 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	2200      	movs	r2, #0
 8023806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 802380a:	6878      	ldr	r0, [r7, #4]
 802380c:	f7fd fcfa 	bl	8021204 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	2202      	movs	r2, #2
 8023814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	681b      	ldr	r3, [r3, #0]
 802381c:	681b      	ldr	r3, [r3, #0]
 802381e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023822:	687b      	ldr	r3, [r7, #4]
 8023824:	685a      	ldr	r2, [r3, #4]
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	681b      	ldr	r3, [r3, #0]
 802382a:	430a      	orrs	r2, r1
 802382c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	681b      	ldr	r3, [r3, #0]
 8023832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023834:	f023 0107 	bic.w	r1, r3, #7
 8023838:	687b      	ldr	r3, [r7, #4]
 802383a:	689a      	ldr	r2, [r3, #8]
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	681b      	ldr	r3, [r3, #0]
 8023840:	430a      	orrs	r2, r1
 8023842:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023844:	687b      	ldr	r3, [r7, #4]
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802384a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802384e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023852:	687a      	ldr	r2, [r7, #4]
 8023854:	68d1      	ldr	r1, [r2, #12]
 8023856:	687a      	ldr	r2, [r7, #4]
 8023858:	6812      	ldr	r2, [r2, #0]
 802385a:	430b      	orrs	r3, r1
 802385c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	2200      	movs	r2, #0
 8023862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	2201      	movs	r2, #1
 8023868:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 802386c:	2300      	movs	r3, #0
}
 802386e:	4618      	mov	r0, r3
 8023870:	3708      	adds	r7, #8
 8023872:	46bd      	mov	sp, r7
 8023874:	bd80      	pop	{r7, pc}

08023876 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023876:	b580      	push	{r7, lr}
 8023878:	b086      	sub	sp, #24
 802387a:	af02      	add	r7, sp, #8
 802387c:	60f8      	str	r0, [r7, #12]
 802387e:	60b9      	str	r1, [r7, #8]
 8023880:	607a      	str	r2, [r7, #4]
 8023882:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023884:	68fb      	ldr	r3, [r7, #12]
 8023886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802388a:	2b01      	cmp	r3, #1
 802388c:	d101      	bne.n	8023892 <HAL_DMA2D_Start+0x1c>
 802388e:	2302      	movs	r3, #2
 8023890:	e018      	b.n	80238c4 <HAL_DMA2D_Start+0x4e>
 8023892:	68fb      	ldr	r3, [r7, #12]
 8023894:	2201      	movs	r2, #1
 8023896:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 802389a:	68fb      	ldr	r3, [r7, #12]
 802389c:	2202      	movs	r2, #2
 802389e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80238a2:	69bb      	ldr	r3, [r7, #24]
 80238a4:	9300      	str	r3, [sp, #0]
 80238a6:	683b      	ldr	r3, [r7, #0]
 80238a8:	687a      	ldr	r2, [r7, #4]
 80238aa:	68b9      	ldr	r1, [r7, #8]
 80238ac:	68f8      	ldr	r0, [r7, #12]
 80238ae:	f000 fa99 	bl	8023de4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80238b2:	68fb      	ldr	r3, [r7, #12]
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	681a      	ldr	r2, [r3, #0]
 80238b8:	68fb      	ldr	r3, [r7, #12]
 80238ba:	681b      	ldr	r3, [r3, #0]
 80238bc:	f042 0201 	orr.w	r2, r2, #1
 80238c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80238c2:	2300      	movs	r3, #0
}
 80238c4:	4618      	mov	r0, r3
 80238c6:	3710      	adds	r7, #16
 80238c8:	46bd      	mov	sp, r7
 80238ca:	bd80      	pop	{r7, pc}

080238cc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80238cc:	b580      	push	{r7, lr}
 80238ce:	b086      	sub	sp, #24
 80238d0:	af00      	add	r7, sp, #0
 80238d2:	6078      	str	r0, [r7, #4]
 80238d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80238d6:	2300      	movs	r3, #0
 80238d8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	681b      	ldr	r3, [r3, #0]
 80238de:	681b      	ldr	r3, [r3, #0]
 80238e0:	f003 0301 	and.w	r3, r3, #1
 80238e4:	2b00      	cmp	r3, #0
 80238e6:	d056      	beq.n	8023996 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80238e8:	f7ff fbfe 	bl	80230e8 <HAL_GetTick>
 80238ec:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80238ee:	e04b      	b.n	8023988 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	681b      	ldr	r3, [r3, #0]
 80238f4:	685b      	ldr	r3, [r3, #4]
 80238f6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80238f8:	68fb      	ldr	r3, [r7, #12]
 80238fa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d023      	beq.n	802394a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023902:	68fb      	ldr	r3, [r7, #12]
 8023904:	f003 0320 	and.w	r3, r3, #32
 8023908:	2b00      	cmp	r3, #0
 802390a:	d005      	beq.n	8023918 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023910:	f043 0202 	orr.w	r2, r3, #2
 8023914:	687b      	ldr	r3, [r7, #4]
 8023916:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023918:	68fb      	ldr	r3, [r7, #12]
 802391a:	f003 0301 	and.w	r3, r3, #1
 802391e:	2b00      	cmp	r3, #0
 8023920:	d005      	beq.n	802392e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023926:	f043 0201 	orr.w	r2, r3, #1
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 802392e:	687b      	ldr	r3, [r7, #4]
 8023930:	681b      	ldr	r3, [r3, #0]
 8023932:	2221      	movs	r2, #33	; 0x21
 8023934:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	2204      	movs	r2, #4
 802393a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	2200      	movs	r2, #0
 8023942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023946:	2301      	movs	r3, #1
 8023948:	e0a5      	b.n	8023a96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 802394a:	683b      	ldr	r3, [r7, #0]
 802394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023950:	d01a      	beq.n	8023988 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023952:	f7ff fbc9 	bl	80230e8 <HAL_GetTick>
 8023956:	4602      	mov	r2, r0
 8023958:	697b      	ldr	r3, [r7, #20]
 802395a:	1ad3      	subs	r3, r2, r3
 802395c:	683a      	ldr	r2, [r7, #0]
 802395e:	429a      	cmp	r2, r3
 8023960:	d302      	bcc.n	8023968 <HAL_DMA2D_PollForTransfer+0x9c>
 8023962:	683b      	ldr	r3, [r7, #0]
 8023964:	2b00      	cmp	r3, #0
 8023966:	d10f      	bne.n	8023988 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802396c:	f043 0220 	orr.w	r2, r3, #32
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	2203      	movs	r2, #3
 8023978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	2200      	movs	r2, #0
 8023980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023984:	2303      	movs	r3, #3
 8023986:	e086      	b.n	8023a96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	681b      	ldr	r3, [r3, #0]
 802398c:	685b      	ldr	r3, [r3, #4]
 802398e:	f003 0302 	and.w	r3, r3, #2
 8023992:	2b00      	cmp	r3, #0
 8023994:	d0ac      	beq.n	80238f0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	681b      	ldr	r3, [r3, #0]
 802399a:	69db      	ldr	r3, [r3, #28]
 802399c:	f003 0320 	and.w	r3, r3, #32
 80239a0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80239a2:	687b      	ldr	r3, [r7, #4]
 80239a4:	681b      	ldr	r3, [r3, #0]
 80239a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239a8:	f003 0320 	and.w	r3, r3, #32
 80239ac:	693a      	ldr	r2, [r7, #16]
 80239ae:	4313      	orrs	r3, r2
 80239b0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80239b2:	693b      	ldr	r3, [r7, #16]
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	d061      	beq.n	8023a7c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80239b8:	f7ff fb96 	bl	80230e8 <HAL_GetTick>
 80239bc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80239be:	e056      	b.n	8023a6e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	685b      	ldr	r3, [r3, #4]
 80239c6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80239c8:	68fb      	ldr	r3, [r7, #12]
 80239ca:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d02e      	beq.n	8023a30 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80239d2:	68fb      	ldr	r3, [r7, #12]
 80239d4:	f003 0308 	and.w	r3, r3, #8
 80239d8:	2b00      	cmp	r3, #0
 80239da:	d005      	beq.n	80239e8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80239dc:	687b      	ldr	r3, [r7, #4]
 80239de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80239e0:	f043 0204 	orr.w	r2, r3, #4
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80239e8:	68fb      	ldr	r3, [r7, #12]
 80239ea:	f003 0320 	and.w	r3, r3, #32
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	d005      	beq.n	80239fe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80239f6:	f043 0202 	orr.w	r2, r3, #2
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80239fe:	68fb      	ldr	r3, [r7, #12]
 8023a00:	f003 0301 	and.w	r3, r3, #1
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d005      	beq.n	8023a14 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a0c:	f043 0201 	orr.w	r2, r3, #1
 8023a10:	687b      	ldr	r3, [r7, #4]
 8023a12:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	681b      	ldr	r3, [r3, #0]
 8023a18:	2229      	movs	r2, #41	; 0x29
 8023a1a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	2204      	movs	r2, #4
 8023a20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023a24:	687b      	ldr	r3, [r7, #4]
 8023a26:	2200      	movs	r2, #0
 8023a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023a2c:	2301      	movs	r3, #1
 8023a2e:	e032      	b.n	8023a96 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023a30:	683b      	ldr	r3, [r7, #0]
 8023a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023a36:	d01a      	beq.n	8023a6e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023a38:	f7ff fb56 	bl	80230e8 <HAL_GetTick>
 8023a3c:	4602      	mov	r2, r0
 8023a3e:	697b      	ldr	r3, [r7, #20]
 8023a40:	1ad3      	subs	r3, r2, r3
 8023a42:	683a      	ldr	r2, [r7, #0]
 8023a44:	429a      	cmp	r2, r3
 8023a46:	d302      	bcc.n	8023a4e <HAL_DMA2D_PollForTransfer+0x182>
 8023a48:	683b      	ldr	r3, [r7, #0]
 8023a4a:	2b00      	cmp	r3, #0
 8023a4c:	d10f      	bne.n	8023a6e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023a52:	f043 0220 	orr.w	r2, r3, #32
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023a5a:	687b      	ldr	r3, [r7, #4]
 8023a5c:	2203      	movs	r2, #3
 8023a5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023a62:	687b      	ldr	r3, [r7, #4]
 8023a64:	2200      	movs	r2, #0
 8023a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023a6a:	2303      	movs	r3, #3
 8023a6c:	e013      	b.n	8023a96 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	681b      	ldr	r3, [r3, #0]
 8023a72:	685b      	ldr	r3, [r3, #4]
 8023a74:	f003 0310 	and.w	r3, r3, #16
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d0a1      	beq.n	80239c0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	2212      	movs	r2, #18
 8023a82:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023a84:	687b      	ldr	r3, [r7, #4]
 8023a86:	2201      	movs	r2, #1
 8023a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	2200      	movs	r2, #0
 8023a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023a94:	2300      	movs	r3, #0
}
 8023a96:	4618      	mov	r0, r3
 8023a98:	3718      	adds	r7, #24
 8023a9a:	46bd      	mov	sp, r7
 8023a9c:	bd80      	pop	{r7, pc}

08023a9e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023a9e:	b580      	push	{r7, lr}
 8023aa0:	b084      	sub	sp, #16
 8023aa2:	af00      	add	r7, sp, #0
 8023aa4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	681b      	ldr	r3, [r3, #0]
 8023aaa:	685b      	ldr	r3, [r3, #4]
 8023aac:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	681b      	ldr	r3, [r3, #0]
 8023ab4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023ab6:	68fb      	ldr	r3, [r7, #12]
 8023ab8:	f003 0301 	and.w	r3, r3, #1
 8023abc:	2b00      	cmp	r3, #0
 8023abe:	d026      	beq.n	8023b0e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023ac0:	68bb      	ldr	r3, [r7, #8]
 8023ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	d021      	beq.n	8023b0e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	681b      	ldr	r3, [r3, #0]
 8023ace:	681a      	ldr	r2, [r3, #0]
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	681b      	ldr	r3, [r3, #0]
 8023ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023ad8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ade:	f043 0201 	orr.w	r2, r3, #1
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8023ae6:	687b      	ldr	r3, [r7, #4]
 8023ae8:	681b      	ldr	r3, [r3, #0]
 8023aea:	2201      	movs	r2, #1
 8023aec:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	2204      	movs	r2, #4
 8023af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	2200      	movs	r2, #0
 8023afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	695b      	ldr	r3, [r3, #20]
 8023b02:	2b00      	cmp	r3, #0
 8023b04:	d003      	beq.n	8023b0e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	695b      	ldr	r3, [r3, #20]
 8023b0a:	6878      	ldr	r0, [r7, #4]
 8023b0c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023b0e:	68fb      	ldr	r3, [r7, #12]
 8023b10:	f003 0320 	and.w	r3, r3, #32
 8023b14:	2b00      	cmp	r3, #0
 8023b16:	d026      	beq.n	8023b66 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8023b18:	68bb      	ldr	r3, [r7, #8]
 8023b1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023b1e:	2b00      	cmp	r3, #0
 8023b20:	d021      	beq.n	8023b66 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	681a      	ldr	r2, [r3, #0]
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	681b      	ldr	r3, [r3, #0]
 8023b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023b30:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	681b      	ldr	r3, [r3, #0]
 8023b36:	2220      	movs	r2, #32
 8023b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023b3a:	687b      	ldr	r3, [r7, #4]
 8023b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023b3e:	f043 0202 	orr.w	r2, r3, #2
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	2204      	movs	r2, #4
 8023b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	2200      	movs	r2, #0
 8023b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	695b      	ldr	r3, [r3, #20]
 8023b5a:	2b00      	cmp	r3, #0
 8023b5c:	d003      	beq.n	8023b66 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	695b      	ldr	r3, [r3, #20]
 8023b62:	6878      	ldr	r0, [r7, #4]
 8023b64:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023b66:	68fb      	ldr	r3, [r7, #12]
 8023b68:	f003 0308 	and.w	r3, r3, #8
 8023b6c:	2b00      	cmp	r3, #0
 8023b6e:	d026      	beq.n	8023bbe <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8023b70:	68bb      	ldr	r3, [r7, #8]
 8023b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d021      	beq.n	8023bbe <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	681b      	ldr	r3, [r3, #0]
 8023b7e:	681a      	ldr	r2, [r3, #0]
 8023b80:	687b      	ldr	r3, [r7, #4]
 8023b82:	681b      	ldr	r3, [r3, #0]
 8023b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023b88:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023b8a:	687b      	ldr	r3, [r7, #4]
 8023b8c:	681b      	ldr	r3, [r3, #0]
 8023b8e:	2208      	movs	r2, #8
 8023b90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023b96:	f043 0204 	orr.w	r2, r3, #4
 8023b9a:	687b      	ldr	r3, [r7, #4]
 8023b9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	2204      	movs	r2, #4
 8023ba2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	2200      	movs	r2, #0
 8023baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	695b      	ldr	r3, [r3, #20]
 8023bb2:	2b00      	cmp	r3, #0
 8023bb4:	d003      	beq.n	8023bbe <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	695b      	ldr	r3, [r3, #20]
 8023bba:	6878      	ldr	r0, [r7, #4]
 8023bbc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8023bbe:	68fb      	ldr	r3, [r7, #12]
 8023bc0:	f003 0304 	and.w	r3, r3, #4
 8023bc4:	2b00      	cmp	r3, #0
 8023bc6:	d013      	beq.n	8023bf0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8023bc8:	68bb      	ldr	r3, [r7, #8]
 8023bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8023bce:	2b00      	cmp	r3, #0
 8023bd0:	d00e      	beq.n	8023bf0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	681b      	ldr	r3, [r3, #0]
 8023bd6:	681a      	ldr	r2, [r3, #0]
 8023bd8:	687b      	ldr	r3, [r7, #4]
 8023bda:	681b      	ldr	r3, [r3, #0]
 8023bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023be0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8023be2:	687b      	ldr	r3, [r7, #4]
 8023be4:	681b      	ldr	r3, [r3, #0]
 8023be6:	2204      	movs	r2, #4
 8023be8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8023bea:	6878      	ldr	r0, [r7, #4]
 8023bec:	f000 f853 	bl	8023c96 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8023bf0:	68fb      	ldr	r3, [r7, #12]
 8023bf2:	f003 0302 	and.w	r3, r3, #2
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d024      	beq.n	8023c44 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8023bfa:	68bb      	ldr	r3, [r7, #8]
 8023bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8023c00:	2b00      	cmp	r3, #0
 8023c02:	d01f      	beq.n	8023c44 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	681b      	ldr	r3, [r3, #0]
 8023c08:	681a      	ldr	r2, [r3, #0]
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	681b      	ldr	r3, [r3, #0]
 8023c0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023c12:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	2202      	movs	r2, #2
 8023c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023c1c:	687b      	ldr	r3, [r7, #4]
 8023c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023c24:	687b      	ldr	r3, [r7, #4]
 8023c26:	2201      	movs	r2, #1
 8023c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023c2c:	687b      	ldr	r3, [r7, #4]
 8023c2e:	2200      	movs	r2, #0
 8023c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8023c34:	687b      	ldr	r3, [r7, #4]
 8023c36:	691b      	ldr	r3, [r3, #16]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d003      	beq.n	8023c44 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	691b      	ldr	r3, [r3, #16]
 8023c40:	6878      	ldr	r0, [r7, #4]
 8023c42:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8023c44:	68fb      	ldr	r3, [r7, #12]
 8023c46:	f003 0310 	and.w	r3, r3, #16
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	d01f      	beq.n	8023c8e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8023c4e:	68bb      	ldr	r3, [r7, #8]
 8023c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8023c54:	2b00      	cmp	r3, #0
 8023c56:	d01a      	beq.n	8023c8e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8023c58:	687b      	ldr	r3, [r7, #4]
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	681a      	ldr	r2, [r3, #0]
 8023c5e:	687b      	ldr	r3, [r7, #4]
 8023c60:	681b      	ldr	r3, [r3, #0]
 8023c62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8023c66:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	2210      	movs	r2, #16
 8023c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	2201      	movs	r2, #1
 8023c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	2200      	movs	r2, #0
 8023c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8023c88:	6878      	ldr	r0, [r7, #4]
 8023c8a:	f000 f80e 	bl	8023caa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8023c8e:	bf00      	nop
 8023c90:	3710      	adds	r7, #16
 8023c92:	46bd      	mov	sp, r7
 8023c94:	bd80      	pop	{r7, pc}

08023c96 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023c96:	b480      	push	{r7}
 8023c98:	b083      	sub	sp, #12
 8023c9a:	af00      	add	r7, sp, #0
 8023c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8023c9e:	bf00      	nop
 8023ca0:	370c      	adds	r7, #12
 8023ca2:	46bd      	mov	sp, r7
 8023ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca8:	4770      	bx	lr

08023caa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8023caa:	b480      	push	{r7}
 8023cac:	b083      	sub	sp, #12
 8023cae:	af00      	add	r7, sp, #0
 8023cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8023cb2:	bf00      	nop
 8023cb4:	370c      	adds	r7, #12
 8023cb6:	46bd      	mov	sp, r7
 8023cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cbc:	4770      	bx	lr
	...

08023cc0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8023cc0:	b480      	push	{r7}
 8023cc2:	b087      	sub	sp, #28
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	6078      	str	r0, [r7, #4]
 8023cc8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	685b      	ldr	r3, [r3, #4]
 8023cce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023cd2:	687b      	ldr	r3, [r7, #4]
 8023cd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023cd8:	2b01      	cmp	r3, #1
 8023cda:	d101      	bne.n	8023ce0 <HAL_DMA2D_ConfigLayer+0x20>
 8023cdc:	2302      	movs	r3, #2
 8023cde:	e079      	b.n	8023dd4 <HAL_DMA2D_ConfigLayer+0x114>
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	2201      	movs	r2, #1
 8023ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	2202      	movs	r2, #2
 8023cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8023cf0:	683b      	ldr	r3, [r7, #0]
 8023cf2:	011b      	lsls	r3, r3, #4
 8023cf4:	3318      	adds	r3, #24
 8023cf6:	687a      	ldr	r2, [r7, #4]
 8023cf8:	4413      	add	r3, r2
 8023cfa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8023cfc:	693b      	ldr	r3, [r7, #16]
 8023cfe:	685a      	ldr	r2, [r3, #4]
 8023d00:	693b      	ldr	r3, [r7, #16]
 8023d02:	689b      	ldr	r3, [r3, #8]
 8023d04:	041b      	lsls	r3, r3, #16
 8023d06:	4313      	orrs	r3, r2
 8023d08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8023d0a:	4b35      	ldr	r3, [pc, #212]	; (8023de0 <HAL_DMA2D_ConfigLayer+0x120>)
 8023d0c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023d0e:	693b      	ldr	r3, [r7, #16]
 8023d10:	685b      	ldr	r3, [r3, #4]
 8023d12:	2b0a      	cmp	r3, #10
 8023d14:	d003      	beq.n	8023d1e <HAL_DMA2D_ConfigLayer+0x5e>
 8023d16:	693b      	ldr	r3, [r7, #16]
 8023d18:	685b      	ldr	r3, [r3, #4]
 8023d1a:	2b09      	cmp	r3, #9
 8023d1c:	d107      	bne.n	8023d2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8023d1e:	693b      	ldr	r3, [r7, #16]
 8023d20:	68db      	ldr	r3, [r3, #12]
 8023d22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023d26:	697a      	ldr	r2, [r7, #20]
 8023d28:	4313      	orrs	r3, r2
 8023d2a:	617b      	str	r3, [r7, #20]
 8023d2c:	e005      	b.n	8023d3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8023d2e:	693b      	ldr	r3, [r7, #16]
 8023d30:	68db      	ldr	r3, [r3, #12]
 8023d32:	061b      	lsls	r3, r3, #24
 8023d34:	697a      	ldr	r2, [r7, #20]
 8023d36:	4313      	orrs	r3, r2
 8023d38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8023d3a:	683b      	ldr	r3, [r7, #0]
 8023d3c:	2b00      	cmp	r3, #0
 8023d3e:	d120      	bne.n	8023d82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8023d40:	687b      	ldr	r3, [r7, #4]
 8023d42:	681b      	ldr	r3, [r3, #0]
 8023d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023d46:	68fb      	ldr	r3, [r7, #12]
 8023d48:	43db      	mvns	r3, r3
 8023d4a:	ea02 0103 	and.w	r1, r2, r3
 8023d4e:	687b      	ldr	r3, [r7, #4]
 8023d50:	681b      	ldr	r3, [r3, #0]
 8023d52:	697a      	ldr	r2, [r7, #20]
 8023d54:	430a      	orrs	r2, r1
 8023d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	681b      	ldr	r3, [r3, #0]
 8023d5c:	693a      	ldr	r2, [r7, #16]
 8023d5e:	6812      	ldr	r2, [r2, #0]
 8023d60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023d62:	693b      	ldr	r3, [r7, #16]
 8023d64:	685b      	ldr	r3, [r3, #4]
 8023d66:	2b0a      	cmp	r3, #10
 8023d68:	d003      	beq.n	8023d72 <HAL_DMA2D_ConfigLayer+0xb2>
 8023d6a:	693b      	ldr	r3, [r7, #16]
 8023d6c:	685b      	ldr	r3, [r3, #4]
 8023d6e:	2b09      	cmp	r3, #9
 8023d70:	d127      	bne.n	8023dc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8023d72:	693b      	ldr	r3, [r7, #16]
 8023d74:	68da      	ldr	r2, [r3, #12]
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8023d80:	e01f      	b.n	8023dc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	681b      	ldr	r3, [r3, #0]
 8023d86:	69da      	ldr	r2, [r3, #28]
 8023d88:	68fb      	ldr	r3, [r7, #12]
 8023d8a:	43db      	mvns	r3, r3
 8023d8c:	ea02 0103 	and.w	r1, r2, r3
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	681b      	ldr	r3, [r3, #0]
 8023d94:	697a      	ldr	r2, [r7, #20]
 8023d96:	430a      	orrs	r2, r1
 8023d98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8023d9a:	687b      	ldr	r3, [r7, #4]
 8023d9c:	681b      	ldr	r3, [r3, #0]
 8023d9e:	693a      	ldr	r2, [r7, #16]
 8023da0:	6812      	ldr	r2, [r2, #0]
 8023da2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8023da4:	693b      	ldr	r3, [r7, #16]
 8023da6:	685b      	ldr	r3, [r3, #4]
 8023da8:	2b0a      	cmp	r3, #10
 8023daa:	d003      	beq.n	8023db4 <HAL_DMA2D_ConfigLayer+0xf4>
 8023dac:	693b      	ldr	r3, [r7, #16]
 8023dae:	685b      	ldr	r3, [r3, #4]
 8023db0:	2b09      	cmp	r3, #9
 8023db2:	d106      	bne.n	8023dc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8023db4:	693b      	ldr	r3, [r7, #16]
 8023db6:	68da      	ldr	r2, [r3, #12]
 8023db8:	687b      	ldr	r3, [r7, #4]
 8023dba:	681b      	ldr	r3, [r3, #0]
 8023dbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8023dc0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	2201      	movs	r2, #1
 8023dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023dca:	687b      	ldr	r3, [r7, #4]
 8023dcc:	2200      	movs	r2, #0
 8023dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023dd2:	2300      	movs	r3, #0
}
 8023dd4:	4618      	mov	r0, r3
 8023dd6:	371c      	adds	r7, #28
 8023dd8:	46bd      	mov	sp, r7
 8023dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dde:	4770      	bx	lr
 8023de0:	ff03000f 	.word	0xff03000f

08023de4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8023de4:	b480      	push	{r7}
 8023de6:	b08b      	sub	sp, #44	; 0x2c
 8023de8:	af00      	add	r7, sp, #0
 8023dea:	60f8      	str	r0, [r7, #12]
 8023dec:	60b9      	str	r1, [r7, #8]
 8023dee:	607a      	str	r2, [r7, #4]
 8023df0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8023df2:	68fb      	ldr	r3, [r7, #12]
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023df8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8023dfc:	683b      	ldr	r3, [r7, #0]
 8023dfe:	041a      	lsls	r2, r3, #16
 8023e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e02:	431a      	orrs	r2, r3
 8023e04:	68fb      	ldr	r3, [r7, #12]
 8023e06:	681b      	ldr	r3, [r3, #0]
 8023e08:	430a      	orrs	r2, r1
 8023e0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	681b      	ldr	r3, [r3, #0]
 8023e10:	687a      	ldr	r2, [r7, #4]
 8023e12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8023e14:	68fb      	ldr	r3, [r7, #12]
 8023e16:	685b      	ldr	r3, [r3, #4]
 8023e18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8023e1c:	d174      	bne.n	8023f08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8023e1e:	68bb      	ldr	r3, [r7, #8]
 8023e20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8023e24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8023e26:	68bb      	ldr	r3, [r7, #8]
 8023e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8023e2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8023e2e:	68bb      	ldr	r3, [r7, #8]
 8023e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023e34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8023e36:	68bb      	ldr	r3, [r7, #8]
 8023e38:	b2db      	uxtb	r3, r3
 8023e3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8023e3c:	68fb      	ldr	r3, [r7, #12]
 8023e3e:	689b      	ldr	r3, [r3, #8]
 8023e40:	2b00      	cmp	r3, #0
 8023e42:	d108      	bne.n	8023e56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8023e44:	69ba      	ldr	r2, [r7, #24]
 8023e46:	69fb      	ldr	r3, [r7, #28]
 8023e48:	431a      	orrs	r2, r3
 8023e4a:	6a3b      	ldr	r3, [r7, #32]
 8023e4c:	4313      	orrs	r3, r2
 8023e4e:	697a      	ldr	r2, [r7, #20]
 8023e50:	4313      	orrs	r3, r2
 8023e52:	627b      	str	r3, [r7, #36]	; 0x24
 8023e54:	e053      	b.n	8023efe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8023e56:	68fb      	ldr	r3, [r7, #12]
 8023e58:	689b      	ldr	r3, [r3, #8]
 8023e5a:	2b01      	cmp	r3, #1
 8023e5c:	d106      	bne.n	8023e6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8023e5e:	69ba      	ldr	r2, [r7, #24]
 8023e60:	69fb      	ldr	r3, [r7, #28]
 8023e62:	4313      	orrs	r3, r2
 8023e64:	697a      	ldr	r2, [r7, #20]
 8023e66:	4313      	orrs	r3, r2
 8023e68:	627b      	str	r3, [r7, #36]	; 0x24
 8023e6a:	e048      	b.n	8023efe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8023e6c:	68fb      	ldr	r3, [r7, #12]
 8023e6e:	689b      	ldr	r3, [r3, #8]
 8023e70:	2b02      	cmp	r3, #2
 8023e72:	d111      	bne.n	8023e98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8023e74:	69fb      	ldr	r3, [r7, #28]
 8023e76:	0cdb      	lsrs	r3, r3, #19
 8023e78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8023e7a:	69bb      	ldr	r3, [r7, #24]
 8023e7c:	0a9b      	lsrs	r3, r3, #10
 8023e7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023e80:	697b      	ldr	r3, [r7, #20]
 8023e82:	08db      	lsrs	r3, r3, #3
 8023e84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8023e86:	69bb      	ldr	r3, [r7, #24]
 8023e88:	015a      	lsls	r2, r3, #5
 8023e8a:	69fb      	ldr	r3, [r7, #28]
 8023e8c:	02db      	lsls	r3, r3, #11
 8023e8e:	4313      	orrs	r3, r2
 8023e90:	697a      	ldr	r2, [r7, #20]
 8023e92:	4313      	orrs	r3, r2
 8023e94:	627b      	str	r3, [r7, #36]	; 0x24
 8023e96:	e032      	b.n	8023efe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8023e98:	68fb      	ldr	r3, [r7, #12]
 8023e9a:	689b      	ldr	r3, [r3, #8]
 8023e9c:	2b03      	cmp	r3, #3
 8023e9e:	d117      	bne.n	8023ed0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8023ea0:	6a3b      	ldr	r3, [r7, #32]
 8023ea2:	0fdb      	lsrs	r3, r3, #31
 8023ea4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8023ea6:	69fb      	ldr	r3, [r7, #28]
 8023ea8:	0cdb      	lsrs	r3, r3, #19
 8023eaa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8023eac:	69bb      	ldr	r3, [r7, #24]
 8023eae:	0adb      	lsrs	r3, r3, #11
 8023eb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8023eb2:	697b      	ldr	r3, [r7, #20]
 8023eb4:	08db      	lsrs	r3, r3, #3
 8023eb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8023eb8:	69bb      	ldr	r3, [r7, #24]
 8023eba:	015a      	lsls	r2, r3, #5
 8023ebc:	69fb      	ldr	r3, [r7, #28]
 8023ebe:	029b      	lsls	r3, r3, #10
 8023ec0:	431a      	orrs	r2, r3
 8023ec2:	6a3b      	ldr	r3, [r7, #32]
 8023ec4:	03db      	lsls	r3, r3, #15
 8023ec6:	4313      	orrs	r3, r2
 8023ec8:	697a      	ldr	r2, [r7, #20]
 8023eca:	4313      	orrs	r3, r2
 8023ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8023ece:	e016      	b.n	8023efe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8023ed0:	6a3b      	ldr	r3, [r7, #32]
 8023ed2:	0f1b      	lsrs	r3, r3, #28
 8023ed4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8023ed6:	69fb      	ldr	r3, [r7, #28]
 8023ed8:	0d1b      	lsrs	r3, r3, #20
 8023eda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8023edc:	69bb      	ldr	r3, [r7, #24]
 8023ede:	0b1b      	lsrs	r3, r3, #12
 8023ee0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8023ee2:	697b      	ldr	r3, [r7, #20]
 8023ee4:	091b      	lsrs	r3, r3, #4
 8023ee6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8023ee8:	69bb      	ldr	r3, [r7, #24]
 8023eea:	011a      	lsls	r2, r3, #4
 8023eec:	69fb      	ldr	r3, [r7, #28]
 8023eee:	021b      	lsls	r3, r3, #8
 8023ef0:	431a      	orrs	r2, r3
 8023ef2:	6a3b      	ldr	r3, [r7, #32]
 8023ef4:	031b      	lsls	r3, r3, #12
 8023ef6:	4313      	orrs	r3, r2
 8023ef8:	697a      	ldr	r2, [r7, #20]
 8023efa:	4313      	orrs	r3, r2
 8023efc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8023efe:	68fb      	ldr	r3, [r7, #12]
 8023f00:	681b      	ldr	r3, [r3, #0]
 8023f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023f04:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8023f06:	e003      	b.n	8023f10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8023f08:	68fb      	ldr	r3, [r7, #12]
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	68ba      	ldr	r2, [r7, #8]
 8023f0e:	60da      	str	r2, [r3, #12]
}
 8023f10:	bf00      	nop
 8023f12:	372c      	adds	r7, #44	; 0x2c
 8023f14:	46bd      	mov	sp, r7
 8023f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f1a:	4770      	bx	lr

08023f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023f1c:	b480      	push	{r7}
 8023f1e:	b089      	sub	sp, #36	; 0x24
 8023f20:	af00      	add	r7, sp, #0
 8023f22:	6078      	str	r0, [r7, #4]
 8023f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023f26:	2300      	movs	r3, #0
 8023f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023f2a:	2300      	movs	r3, #0
 8023f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023f2e:	2300      	movs	r3, #0
 8023f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023f32:	2300      	movs	r3, #0
 8023f34:	61fb      	str	r3, [r7, #28]
 8023f36:	e177      	b.n	8024228 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023f38:	2201      	movs	r2, #1
 8023f3a:	69fb      	ldr	r3, [r7, #28]
 8023f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8023f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8023f42:	683b      	ldr	r3, [r7, #0]
 8023f44:	681b      	ldr	r3, [r3, #0]
 8023f46:	697a      	ldr	r2, [r7, #20]
 8023f48:	4013      	ands	r3, r2
 8023f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023f4c:	693a      	ldr	r2, [r7, #16]
 8023f4e:	697b      	ldr	r3, [r7, #20]
 8023f50:	429a      	cmp	r2, r3
 8023f52:	f040 8166 	bne.w	8024222 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023f56:	683b      	ldr	r3, [r7, #0]
 8023f58:	685b      	ldr	r3, [r3, #4]
 8023f5a:	f003 0303 	and.w	r3, r3, #3
 8023f5e:	2b01      	cmp	r3, #1
 8023f60:	d005      	beq.n	8023f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8023f62:	683b      	ldr	r3, [r7, #0]
 8023f64:	685b      	ldr	r3, [r3, #4]
 8023f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8023f6a:	2b02      	cmp	r3, #2
 8023f6c:	d130      	bne.n	8023fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023f6e:	687b      	ldr	r3, [r7, #4]
 8023f70:	689b      	ldr	r3, [r3, #8]
 8023f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023f74:	69fb      	ldr	r3, [r7, #28]
 8023f76:	005b      	lsls	r3, r3, #1
 8023f78:	2203      	movs	r2, #3
 8023f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8023f7e:	43db      	mvns	r3, r3
 8023f80:	69ba      	ldr	r2, [r7, #24]
 8023f82:	4013      	ands	r3, r2
 8023f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023f86:	683b      	ldr	r3, [r7, #0]
 8023f88:	68da      	ldr	r2, [r3, #12]
 8023f8a:	69fb      	ldr	r3, [r7, #28]
 8023f8c:	005b      	lsls	r3, r3, #1
 8023f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8023f92:	69ba      	ldr	r2, [r7, #24]
 8023f94:	4313      	orrs	r3, r2
 8023f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023f98:	687b      	ldr	r3, [r7, #4]
 8023f9a:	69ba      	ldr	r2, [r7, #24]
 8023f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	685b      	ldr	r3, [r3, #4]
 8023fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023fa4:	2201      	movs	r2, #1
 8023fa6:	69fb      	ldr	r3, [r7, #28]
 8023fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8023fac:	43db      	mvns	r3, r3
 8023fae:	69ba      	ldr	r2, [r7, #24]
 8023fb0:	4013      	ands	r3, r2
 8023fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8023fb4:	683b      	ldr	r3, [r7, #0]
 8023fb6:	685b      	ldr	r3, [r3, #4]
 8023fb8:	091b      	lsrs	r3, r3, #4
 8023fba:	f003 0201 	and.w	r2, r3, #1
 8023fbe:	69fb      	ldr	r3, [r7, #28]
 8023fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8023fc4:	69ba      	ldr	r2, [r7, #24]
 8023fc6:	4313      	orrs	r3, r2
 8023fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	69ba      	ldr	r2, [r7, #24]
 8023fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8023fd0:	683b      	ldr	r3, [r7, #0]
 8023fd2:	685b      	ldr	r3, [r3, #4]
 8023fd4:	f003 0303 	and.w	r3, r3, #3
 8023fd8:	2b03      	cmp	r3, #3
 8023fda:	d017      	beq.n	802400c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8023fdc:	687b      	ldr	r3, [r7, #4]
 8023fde:	68db      	ldr	r3, [r3, #12]
 8023fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023fe2:	69fb      	ldr	r3, [r7, #28]
 8023fe4:	005b      	lsls	r3, r3, #1
 8023fe6:	2203      	movs	r2, #3
 8023fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8023fec:	43db      	mvns	r3, r3
 8023fee:	69ba      	ldr	r2, [r7, #24]
 8023ff0:	4013      	ands	r3, r2
 8023ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023ff4:	683b      	ldr	r3, [r7, #0]
 8023ff6:	689a      	ldr	r2, [r3, #8]
 8023ff8:	69fb      	ldr	r3, [r7, #28]
 8023ffa:	005b      	lsls	r3, r3, #1
 8023ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8024000:	69ba      	ldr	r2, [r7, #24]
 8024002:	4313      	orrs	r3, r2
 8024004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	69ba      	ldr	r2, [r7, #24]
 802400a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802400c:	683b      	ldr	r3, [r7, #0]
 802400e:	685b      	ldr	r3, [r3, #4]
 8024010:	f003 0303 	and.w	r3, r3, #3
 8024014:	2b02      	cmp	r3, #2
 8024016:	d123      	bne.n	8024060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024018:	69fb      	ldr	r3, [r7, #28]
 802401a:	08da      	lsrs	r2, r3, #3
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	3208      	adds	r2, #8
 8024020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024026:	69fb      	ldr	r3, [r7, #28]
 8024028:	f003 0307 	and.w	r3, r3, #7
 802402c:	009b      	lsls	r3, r3, #2
 802402e:	220f      	movs	r2, #15
 8024030:	fa02 f303 	lsl.w	r3, r2, r3
 8024034:	43db      	mvns	r3, r3
 8024036:	69ba      	ldr	r2, [r7, #24]
 8024038:	4013      	ands	r3, r2
 802403a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802403c:	683b      	ldr	r3, [r7, #0]
 802403e:	691a      	ldr	r2, [r3, #16]
 8024040:	69fb      	ldr	r3, [r7, #28]
 8024042:	f003 0307 	and.w	r3, r3, #7
 8024046:	009b      	lsls	r3, r3, #2
 8024048:	fa02 f303 	lsl.w	r3, r2, r3
 802404c:	69ba      	ldr	r2, [r7, #24]
 802404e:	4313      	orrs	r3, r2
 8024050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024052:	69fb      	ldr	r3, [r7, #28]
 8024054:	08da      	lsrs	r2, r3, #3
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	3208      	adds	r2, #8
 802405a:	69b9      	ldr	r1, [r7, #24]
 802405c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	681b      	ldr	r3, [r3, #0]
 8024064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024066:	69fb      	ldr	r3, [r7, #28]
 8024068:	005b      	lsls	r3, r3, #1
 802406a:	2203      	movs	r2, #3
 802406c:	fa02 f303 	lsl.w	r3, r2, r3
 8024070:	43db      	mvns	r3, r3
 8024072:	69ba      	ldr	r2, [r7, #24]
 8024074:	4013      	ands	r3, r2
 8024076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024078:	683b      	ldr	r3, [r7, #0]
 802407a:	685b      	ldr	r3, [r3, #4]
 802407c:	f003 0203 	and.w	r2, r3, #3
 8024080:	69fb      	ldr	r3, [r7, #28]
 8024082:	005b      	lsls	r3, r3, #1
 8024084:	fa02 f303 	lsl.w	r3, r2, r3
 8024088:	69ba      	ldr	r2, [r7, #24]
 802408a:	4313      	orrs	r3, r2
 802408c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	69ba      	ldr	r2, [r7, #24]
 8024092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024094:	683b      	ldr	r3, [r7, #0]
 8024096:	685b      	ldr	r3, [r3, #4]
 8024098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802409c:	2b00      	cmp	r3, #0
 802409e:	f000 80c0 	beq.w	8024222 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80240a2:	2300      	movs	r3, #0
 80240a4:	60fb      	str	r3, [r7, #12]
 80240a6:	4b66      	ldr	r3, [pc, #408]	; (8024240 <HAL_GPIO_Init+0x324>)
 80240a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240aa:	4a65      	ldr	r2, [pc, #404]	; (8024240 <HAL_GPIO_Init+0x324>)
 80240ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80240b0:	6453      	str	r3, [r2, #68]	; 0x44
 80240b2:	4b63      	ldr	r3, [pc, #396]	; (8024240 <HAL_GPIO_Init+0x324>)
 80240b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80240b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80240ba:	60fb      	str	r3, [r7, #12]
 80240bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80240be:	4a61      	ldr	r2, [pc, #388]	; (8024244 <HAL_GPIO_Init+0x328>)
 80240c0:	69fb      	ldr	r3, [r7, #28]
 80240c2:	089b      	lsrs	r3, r3, #2
 80240c4:	3302      	adds	r3, #2
 80240c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80240ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80240cc:	69fb      	ldr	r3, [r7, #28]
 80240ce:	f003 0303 	and.w	r3, r3, #3
 80240d2:	009b      	lsls	r3, r3, #2
 80240d4:	220f      	movs	r2, #15
 80240d6:	fa02 f303 	lsl.w	r3, r2, r3
 80240da:	43db      	mvns	r3, r3
 80240dc:	69ba      	ldr	r2, [r7, #24]
 80240de:	4013      	ands	r3, r2
 80240e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	4a58      	ldr	r2, [pc, #352]	; (8024248 <HAL_GPIO_Init+0x32c>)
 80240e6:	4293      	cmp	r3, r2
 80240e8:	d037      	beq.n	802415a <HAL_GPIO_Init+0x23e>
 80240ea:	687b      	ldr	r3, [r7, #4]
 80240ec:	4a57      	ldr	r2, [pc, #348]	; (802424c <HAL_GPIO_Init+0x330>)
 80240ee:	4293      	cmp	r3, r2
 80240f0:	d031      	beq.n	8024156 <HAL_GPIO_Init+0x23a>
 80240f2:	687b      	ldr	r3, [r7, #4]
 80240f4:	4a56      	ldr	r2, [pc, #344]	; (8024250 <HAL_GPIO_Init+0x334>)
 80240f6:	4293      	cmp	r3, r2
 80240f8:	d02b      	beq.n	8024152 <HAL_GPIO_Init+0x236>
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	4a55      	ldr	r2, [pc, #340]	; (8024254 <HAL_GPIO_Init+0x338>)
 80240fe:	4293      	cmp	r3, r2
 8024100:	d025      	beq.n	802414e <HAL_GPIO_Init+0x232>
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	4a54      	ldr	r2, [pc, #336]	; (8024258 <HAL_GPIO_Init+0x33c>)
 8024106:	4293      	cmp	r3, r2
 8024108:	d01f      	beq.n	802414a <HAL_GPIO_Init+0x22e>
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	4a53      	ldr	r2, [pc, #332]	; (802425c <HAL_GPIO_Init+0x340>)
 802410e:	4293      	cmp	r3, r2
 8024110:	d019      	beq.n	8024146 <HAL_GPIO_Init+0x22a>
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	4a52      	ldr	r2, [pc, #328]	; (8024260 <HAL_GPIO_Init+0x344>)
 8024116:	4293      	cmp	r3, r2
 8024118:	d013      	beq.n	8024142 <HAL_GPIO_Init+0x226>
 802411a:	687b      	ldr	r3, [r7, #4]
 802411c:	4a51      	ldr	r2, [pc, #324]	; (8024264 <HAL_GPIO_Init+0x348>)
 802411e:	4293      	cmp	r3, r2
 8024120:	d00d      	beq.n	802413e <HAL_GPIO_Init+0x222>
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	4a50      	ldr	r2, [pc, #320]	; (8024268 <HAL_GPIO_Init+0x34c>)
 8024126:	4293      	cmp	r3, r2
 8024128:	d007      	beq.n	802413a <HAL_GPIO_Init+0x21e>
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	4a4f      	ldr	r2, [pc, #316]	; (802426c <HAL_GPIO_Init+0x350>)
 802412e:	4293      	cmp	r3, r2
 8024130:	d101      	bne.n	8024136 <HAL_GPIO_Init+0x21a>
 8024132:	2309      	movs	r3, #9
 8024134:	e012      	b.n	802415c <HAL_GPIO_Init+0x240>
 8024136:	230a      	movs	r3, #10
 8024138:	e010      	b.n	802415c <HAL_GPIO_Init+0x240>
 802413a:	2308      	movs	r3, #8
 802413c:	e00e      	b.n	802415c <HAL_GPIO_Init+0x240>
 802413e:	2307      	movs	r3, #7
 8024140:	e00c      	b.n	802415c <HAL_GPIO_Init+0x240>
 8024142:	2306      	movs	r3, #6
 8024144:	e00a      	b.n	802415c <HAL_GPIO_Init+0x240>
 8024146:	2305      	movs	r3, #5
 8024148:	e008      	b.n	802415c <HAL_GPIO_Init+0x240>
 802414a:	2304      	movs	r3, #4
 802414c:	e006      	b.n	802415c <HAL_GPIO_Init+0x240>
 802414e:	2303      	movs	r3, #3
 8024150:	e004      	b.n	802415c <HAL_GPIO_Init+0x240>
 8024152:	2302      	movs	r3, #2
 8024154:	e002      	b.n	802415c <HAL_GPIO_Init+0x240>
 8024156:	2301      	movs	r3, #1
 8024158:	e000      	b.n	802415c <HAL_GPIO_Init+0x240>
 802415a:	2300      	movs	r3, #0
 802415c:	69fa      	ldr	r2, [r7, #28]
 802415e:	f002 0203 	and.w	r2, r2, #3
 8024162:	0092      	lsls	r2, r2, #2
 8024164:	4093      	lsls	r3, r2
 8024166:	69ba      	ldr	r2, [r7, #24]
 8024168:	4313      	orrs	r3, r2
 802416a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802416c:	4935      	ldr	r1, [pc, #212]	; (8024244 <HAL_GPIO_Init+0x328>)
 802416e:	69fb      	ldr	r3, [r7, #28]
 8024170:	089b      	lsrs	r3, r3, #2
 8024172:	3302      	adds	r3, #2
 8024174:	69ba      	ldr	r2, [r7, #24]
 8024176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802417a:	4b3d      	ldr	r3, [pc, #244]	; (8024270 <HAL_GPIO_Init+0x354>)
 802417c:	689b      	ldr	r3, [r3, #8]
 802417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024180:	693b      	ldr	r3, [r7, #16]
 8024182:	43db      	mvns	r3, r3
 8024184:	69ba      	ldr	r2, [r7, #24]
 8024186:	4013      	ands	r3, r2
 8024188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802418a:	683b      	ldr	r3, [r7, #0]
 802418c:	685b      	ldr	r3, [r3, #4]
 802418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024192:	2b00      	cmp	r3, #0
 8024194:	d003      	beq.n	802419e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024196:	69ba      	ldr	r2, [r7, #24]
 8024198:	693b      	ldr	r3, [r7, #16]
 802419a:	4313      	orrs	r3, r2
 802419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802419e:	4a34      	ldr	r2, [pc, #208]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241a0:	69bb      	ldr	r3, [r7, #24]
 80241a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80241a4:	4b32      	ldr	r3, [pc, #200]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241a6:	68db      	ldr	r3, [r3, #12]
 80241a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80241aa:	693b      	ldr	r3, [r7, #16]
 80241ac:	43db      	mvns	r3, r3
 80241ae:	69ba      	ldr	r2, [r7, #24]
 80241b0:	4013      	ands	r3, r2
 80241b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80241b4:	683b      	ldr	r3, [r7, #0]
 80241b6:	685b      	ldr	r3, [r3, #4]
 80241b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80241bc:	2b00      	cmp	r3, #0
 80241be:	d003      	beq.n	80241c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80241c0:	69ba      	ldr	r2, [r7, #24]
 80241c2:	693b      	ldr	r3, [r7, #16]
 80241c4:	4313      	orrs	r3, r2
 80241c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80241c8:	4a29      	ldr	r2, [pc, #164]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241ca:	69bb      	ldr	r3, [r7, #24]
 80241cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80241ce:	4b28      	ldr	r3, [pc, #160]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241d0:	685b      	ldr	r3, [r3, #4]
 80241d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80241d4:	693b      	ldr	r3, [r7, #16]
 80241d6:	43db      	mvns	r3, r3
 80241d8:	69ba      	ldr	r2, [r7, #24]
 80241da:	4013      	ands	r3, r2
 80241dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80241de:	683b      	ldr	r3, [r7, #0]
 80241e0:	685b      	ldr	r3, [r3, #4]
 80241e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	d003      	beq.n	80241f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80241ea:	69ba      	ldr	r2, [r7, #24]
 80241ec:	693b      	ldr	r3, [r7, #16]
 80241ee:	4313      	orrs	r3, r2
 80241f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80241f2:	4a1f      	ldr	r2, [pc, #124]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241f4:	69bb      	ldr	r3, [r7, #24]
 80241f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80241f8:	4b1d      	ldr	r3, [pc, #116]	; (8024270 <HAL_GPIO_Init+0x354>)
 80241fa:	681b      	ldr	r3, [r3, #0]
 80241fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80241fe:	693b      	ldr	r3, [r7, #16]
 8024200:	43db      	mvns	r3, r3
 8024202:	69ba      	ldr	r2, [r7, #24]
 8024204:	4013      	ands	r3, r2
 8024206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024208:	683b      	ldr	r3, [r7, #0]
 802420a:	685b      	ldr	r3, [r3, #4]
 802420c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024210:	2b00      	cmp	r3, #0
 8024212:	d003      	beq.n	802421c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024214:	69ba      	ldr	r2, [r7, #24]
 8024216:	693b      	ldr	r3, [r7, #16]
 8024218:	4313      	orrs	r3, r2
 802421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802421c:	4a14      	ldr	r2, [pc, #80]	; (8024270 <HAL_GPIO_Init+0x354>)
 802421e:	69bb      	ldr	r3, [r7, #24]
 8024220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024222:	69fb      	ldr	r3, [r7, #28]
 8024224:	3301      	adds	r3, #1
 8024226:	61fb      	str	r3, [r7, #28]
 8024228:	69fb      	ldr	r3, [r7, #28]
 802422a:	2b0f      	cmp	r3, #15
 802422c:	f67f ae84 	bls.w	8023f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024230:	bf00      	nop
 8024232:	bf00      	nop
 8024234:	3724      	adds	r7, #36	; 0x24
 8024236:	46bd      	mov	sp, r7
 8024238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802423c:	4770      	bx	lr
 802423e:	bf00      	nop
 8024240:	40023800 	.word	0x40023800
 8024244:	40013800 	.word	0x40013800
 8024248:	40020000 	.word	0x40020000
 802424c:	40020400 	.word	0x40020400
 8024250:	40020800 	.word	0x40020800
 8024254:	40020c00 	.word	0x40020c00
 8024258:	40021000 	.word	0x40021000
 802425c:	40021400 	.word	0x40021400
 8024260:	40021800 	.word	0x40021800
 8024264:	40021c00 	.word	0x40021c00
 8024268:	40022000 	.word	0x40022000
 802426c:	40022400 	.word	0x40022400
 8024270:	40013c00 	.word	0x40013c00

08024274 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024274:	b480      	push	{r7}
 8024276:	b087      	sub	sp, #28
 8024278:	af00      	add	r7, sp, #0
 802427a:	6078      	str	r0, [r7, #4]
 802427c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802427e:	2300      	movs	r3, #0
 8024280:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024282:	2300      	movs	r3, #0
 8024284:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024286:	2300      	movs	r3, #0
 8024288:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802428a:	2300      	movs	r3, #0
 802428c:	617b      	str	r3, [r7, #20]
 802428e:	e0d9      	b.n	8024444 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024290:	2201      	movs	r2, #1
 8024292:	697b      	ldr	r3, [r7, #20]
 8024294:	fa02 f303 	lsl.w	r3, r2, r3
 8024298:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 802429a:	683a      	ldr	r2, [r7, #0]
 802429c:	693b      	ldr	r3, [r7, #16]
 802429e:	4013      	ands	r3, r2
 80242a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80242a2:	68fa      	ldr	r2, [r7, #12]
 80242a4:	693b      	ldr	r3, [r7, #16]
 80242a6:	429a      	cmp	r2, r3
 80242a8:	f040 80c9 	bne.w	802443e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80242ac:	4a6b      	ldr	r2, [pc, #428]	; (802445c <HAL_GPIO_DeInit+0x1e8>)
 80242ae:	697b      	ldr	r3, [r7, #20]
 80242b0:	089b      	lsrs	r3, r3, #2
 80242b2:	3302      	adds	r3, #2
 80242b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80242b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80242ba:	697b      	ldr	r3, [r7, #20]
 80242bc:	f003 0303 	and.w	r3, r3, #3
 80242c0:	009b      	lsls	r3, r3, #2
 80242c2:	220f      	movs	r2, #15
 80242c4:	fa02 f303 	lsl.w	r3, r2, r3
 80242c8:	68ba      	ldr	r2, [r7, #8]
 80242ca:	4013      	ands	r3, r2
 80242cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80242ce:	687b      	ldr	r3, [r7, #4]
 80242d0:	4a63      	ldr	r2, [pc, #396]	; (8024460 <HAL_GPIO_DeInit+0x1ec>)
 80242d2:	4293      	cmp	r3, r2
 80242d4:	d037      	beq.n	8024346 <HAL_GPIO_DeInit+0xd2>
 80242d6:	687b      	ldr	r3, [r7, #4]
 80242d8:	4a62      	ldr	r2, [pc, #392]	; (8024464 <HAL_GPIO_DeInit+0x1f0>)
 80242da:	4293      	cmp	r3, r2
 80242dc:	d031      	beq.n	8024342 <HAL_GPIO_DeInit+0xce>
 80242de:	687b      	ldr	r3, [r7, #4]
 80242e0:	4a61      	ldr	r2, [pc, #388]	; (8024468 <HAL_GPIO_DeInit+0x1f4>)
 80242e2:	4293      	cmp	r3, r2
 80242e4:	d02b      	beq.n	802433e <HAL_GPIO_DeInit+0xca>
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	4a60      	ldr	r2, [pc, #384]	; (802446c <HAL_GPIO_DeInit+0x1f8>)
 80242ea:	4293      	cmp	r3, r2
 80242ec:	d025      	beq.n	802433a <HAL_GPIO_DeInit+0xc6>
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	4a5f      	ldr	r2, [pc, #380]	; (8024470 <HAL_GPIO_DeInit+0x1fc>)
 80242f2:	4293      	cmp	r3, r2
 80242f4:	d01f      	beq.n	8024336 <HAL_GPIO_DeInit+0xc2>
 80242f6:	687b      	ldr	r3, [r7, #4]
 80242f8:	4a5e      	ldr	r2, [pc, #376]	; (8024474 <HAL_GPIO_DeInit+0x200>)
 80242fa:	4293      	cmp	r3, r2
 80242fc:	d019      	beq.n	8024332 <HAL_GPIO_DeInit+0xbe>
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	4a5d      	ldr	r2, [pc, #372]	; (8024478 <HAL_GPIO_DeInit+0x204>)
 8024302:	4293      	cmp	r3, r2
 8024304:	d013      	beq.n	802432e <HAL_GPIO_DeInit+0xba>
 8024306:	687b      	ldr	r3, [r7, #4]
 8024308:	4a5c      	ldr	r2, [pc, #368]	; (802447c <HAL_GPIO_DeInit+0x208>)
 802430a:	4293      	cmp	r3, r2
 802430c:	d00d      	beq.n	802432a <HAL_GPIO_DeInit+0xb6>
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	4a5b      	ldr	r2, [pc, #364]	; (8024480 <HAL_GPIO_DeInit+0x20c>)
 8024312:	4293      	cmp	r3, r2
 8024314:	d007      	beq.n	8024326 <HAL_GPIO_DeInit+0xb2>
 8024316:	687b      	ldr	r3, [r7, #4]
 8024318:	4a5a      	ldr	r2, [pc, #360]	; (8024484 <HAL_GPIO_DeInit+0x210>)
 802431a:	4293      	cmp	r3, r2
 802431c:	d101      	bne.n	8024322 <HAL_GPIO_DeInit+0xae>
 802431e:	2309      	movs	r3, #9
 8024320:	e012      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024322:	230a      	movs	r3, #10
 8024324:	e010      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024326:	2308      	movs	r3, #8
 8024328:	e00e      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 802432a:	2307      	movs	r3, #7
 802432c:	e00c      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 802432e:	2306      	movs	r3, #6
 8024330:	e00a      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024332:	2305      	movs	r3, #5
 8024334:	e008      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024336:	2304      	movs	r3, #4
 8024338:	e006      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 802433a:	2303      	movs	r3, #3
 802433c:	e004      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 802433e:	2302      	movs	r3, #2
 8024340:	e002      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024342:	2301      	movs	r3, #1
 8024344:	e000      	b.n	8024348 <HAL_GPIO_DeInit+0xd4>
 8024346:	2300      	movs	r3, #0
 8024348:	697a      	ldr	r2, [r7, #20]
 802434a:	f002 0203 	and.w	r2, r2, #3
 802434e:	0092      	lsls	r2, r2, #2
 8024350:	4093      	lsls	r3, r2
 8024352:	68ba      	ldr	r2, [r7, #8]
 8024354:	429a      	cmp	r2, r3
 8024356:	d132      	bne.n	80243be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024358:	4b4b      	ldr	r3, [pc, #300]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 802435a:	681a      	ldr	r2, [r3, #0]
 802435c:	68fb      	ldr	r3, [r7, #12]
 802435e:	43db      	mvns	r3, r3
 8024360:	4949      	ldr	r1, [pc, #292]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 8024362:	4013      	ands	r3, r2
 8024364:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024366:	4b48      	ldr	r3, [pc, #288]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 8024368:	685a      	ldr	r2, [r3, #4]
 802436a:	68fb      	ldr	r3, [r7, #12]
 802436c:	43db      	mvns	r3, r3
 802436e:	4946      	ldr	r1, [pc, #280]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 8024370:	4013      	ands	r3, r2
 8024372:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024374:	4b44      	ldr	r3, [pc, #272]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 8024376:	68da      	ldr	r2, [r3, #12]
 8024378:	68fb      	ldr	r3, [r7, #12]
 802437a:	43db      	mvns	r3, r3
 802437c:	4942      	ldr	r1, [pc, #264]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 802437e:	4013      	ands	r3, r2
 8024380:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024382:	4b41      	ldr	r3, [pc, #260]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 8024384:	689a      	ldr	r2, [r3, #8]
 8024386:	68fb      	ldr	r3, [r7, #12]
 8024388:	43db      	mvns	r3, r3
 802438a:	493f      	ldr	r1, [pc, #252]	; (8024488 <HAL_GPIO_DeInit+0x214>)
 802438c:	4013      	ands	r3, r2
 802438e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024390:	697b      	ldr	r3, [r7, #20]
 8024392:	f003 0303 	and.w	r3, r3, #3
 8024396:	009b      	lsls	r3, r3, #2
 8024398:	220f      	movs	r2, #15
 802439a:	fa02 f303 	lsl.w	r3, r2, r3
 802439e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80243a0:	4a2e      	ldr	r2, [pc, #184]	; (802445c <HAL_GPIO_DeInit+0x1e8>)
 80243a2:	697b      	ldr	r3, [r7, #20]
 80243a4:	089b      	lsrs	r3, r3, #2
 80243a6:	3302      	adds	r3, #2
 80243a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80243ac:	68bb      	ldr	r3, [r7, #8]
 80243ae:	43da      	mvns	r2, r3
 80243b0:	482a      	ldr	r0, [pc, #168]	; (802445c <HAL_GPIO_DeInit+0x1e8>)
 80243b2:	697b      	ldr	r3, [r7, #20]
 80243b4:	089b      	lsrs	r3, r3, #2
 80243b6:	400a      	ands	r2, r1
 80243b8:	3302      	adds	r3, #2
 80243ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80243be:	687b      	ldr	r3, [r7, #4]
 80243c0:	681a      	ldr	r2, [r3, #0]
 80243c2:	697b      	ldr	r3, [r7, #20]
 80243c4:	005b      	lsls	r3, r3, #1
 80243c6:	2103      	movs	r1, #3
 80243c8:	fa01 f303 	lsl.w	r3, r1, r3
 80243cc:	43db      	mvns	r3, r3
 80243ce:	401a      	ands	r2, r3
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80243d4:	697b      	ldr	r3, [r7, #20]
 80243d6:	08da      	lsrs	r2, r3, #3
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	3208      	adds	r2, #8
 80243dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80243e0:	697b      	ldr	r3, [r7, #20]
 80243e2:	f003 0307 	and.w	r3, r3, #7
 80243e6:	009b      	lsls	r3, r3, #2
 80243e8:	220f      	movs	r2, #15
 80243ea:	fa02 f303 	lsl.w	r3, r2, r3
 80243ee:	43db      	mvns	r3, r3
 80243f0:	697a      	ldr	r2, [r7, #20]
 80243f2:	08d2      	lsrs	r2, r2, #3
 80243f4:	4019      	ands	r1, r3
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	3208      	adds	r2, #8
 80243fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80243fe:	687b      	ldr	r3, [r7, #4]
 8024400:	68da      	ldr	r2, [r3, #12]
 8024402:	697b      	ldr	r3, [r7, #20]
 8024404:	005b      	lsls	r3, r3, #1
 8024406:	2103      	movs	r1, #3
 8024408:	fa01 f303 	lsl.w	r3, r1, r3
 802440c:	43db      	mvns	r3, r3
 802440e:	401a      	ands	r2, r3
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	685a      	ldr	r2, [r3, #4]
 8024418:	2101      	movs	r1, #1
 802441a:	697b      	ldr	r3, [r7, #20]
 802441c:	fa01 f303 	lsl.w	r3, r1, r3
 8024420:	43db      	mvns	r3, r3
 8024422:	401a      	ands	r2, r3
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	689a      	ldr	r2, [r3, #8]
 802442c:	697b      	ldr	r3, [r7, #20]
 802442e:	005b      	lsls	r3, r3, #1
 8024430:	2103      	movs	r1, #3
 8024432:	fa01 f303 	lsl.w	r3, r1, r3
 8024436:	43db      	mvns	r3, r3
 8024438:	401a      	ands	r2, r3
 802443a:	687b      	ldr	r3, [r7, #4]
 802443c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802443e:	697b      	ldr	r3, [r7, #20]
 8024440:	3301      	adds	r3, #1
 8024442:	617b      	str	r3, [r7, #20]
 8024444:	697b      	ldr	r3, [r7, #20]
 8024446:	2b0f      	cmp	r3, #15
 8024448:	f67f af22 	bls.w	8024290 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802444c:	bf00      	nop
 802444e:	bf00      	nop
 8024450:	371c      	adds	r7, #28
 8024452:	46bd      	mov	sp, r7
 8024454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024458:	4770      	bx	lr
 802445a:	bf00      	nop
 802445c:	40013800 	.word	0x40013800
 8024460:	40020000 	.word	0x40020000
 8024464:	40020400 	.word	0x40020400
 8024468:	40020800 	.word	0x40020800
 802446c:	40020c00 	.word	0x40020c00
 8024470:	40021000 	.word	0x40021000
 8024474:	40021400 	.word	0x40021400
 8024478:	40021800 	.word	0x40021800
 802447c:	40021c00 	.word	0x40021c00
 8024480:	40022000 	.word	0x40022000
 8024484:	40022400 	.word	0x40022400
 8024488:	40013c00 	.word	0x40013c00

0802448c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802448c:	b480      	push	{r7}
 802448e:	b083      	sub	sp, #12
 8024490:	af00      	add	r7, sp, #0
 8024492:	6078      	str	r0, [r7, #4]
 8024494:	460b      	mov	r3, r1
 8024496:	807b      	strh	r3, [r7, #2]
 8024498:	4613      	mov	r3, r2
 802449a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802449c:	787b      	ldrb	r3, [r7, #1]
 802449e:	2b00      	cmp	r3, #0
 80244a0:	d003      	beq.n	80244aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80244a2:	887a      	ldrh	r2, [r7, #2]
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80244a8:	e003      	b.n	80244b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80244aa:	887b      	ldrh	r3, [r7, #2]
 80244ac:	041a      	lsls	r2, r3, #16
 80244ae:	687b      	ldr	r3, [r7, #4]
 80244b0:	619a      	str	r2, [r3, #24]
}
 80244b2:	bf00      	nop
 80244b4:	370c      	adds	r7, #12
 80244b6:	46bd      	mov	sp, r7
 80244b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244bc:	4770      	bx	lr
	...

080244c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80244c0:	b580      	push	{r7, lr}
 80244c2:	b082      	sub	sp, #8
 80244c4:	af00      	add	r7, sp, #0
 80244c6:	4603      	mov	r3, r0
 80244c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80244ca:	4b08      	ldr	r3, [pc, #32]	; (80244ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80244cc:	695a      	ldr	r2, [r3, #20]
 80244ce:	88fb      	ldrh	r3, [r7, #6]
 80244d0:	4013      	ands	r3, r2
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	d006      	beq.n	80244e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80244d6:	4a05      	ldr	r2, [pc, #20]	; (80244ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80244d8:	88fb      	ldrh	r3, [r7, #6]
 80244da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80244dc:	88fb      	ldrh	r3, [r7, #6]
 80244de:	4618      	mov	r0, r3
 80244e0:	f7fd fafe 	bl	8021ae0 <HAL_GPIO_EXTI_Callback>
  }
}
 80244e4:	bf00      	nop
 80244e6:	3708      	adds	r7, #8
 80244e8:	46bd      	mov	sp, r7
 80244ea:	bd80      	pop	{r7, pc}
 80244ec:	40013c00 	.word	0x40013c00

080244f0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80244f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244f2:	b08f      	sub	sp, #60	; 0x3c
 80244f4:	af0a      	add	r7, sp, #40	; 0x28
 80244f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80244f8:	687b      	ldr	r3, [r7, #4]
 80244fa:	2b00      	cmp	r3, #0
 80244fc:	d101      	bne.n	8024502 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80244fe:	2301      	movs	r3, #1
 8024500:	e054      	b.n	80245ac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8024502:	687b      	ldr	r3, [r7, #4]
 8024504:	681b      	ldr	r3, [r3, #0]
 8024506:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 802450e:	b2db      	uxtb	r3, r3
 8024510:	2b00      	cmp	r3, #0
 8024512:	d106      	bne.n	8024522 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	2200      	movs	r2, #0
 8024518:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 802451c:	6878      	ldr	r0, [r7, #4]
 802451e:	f008 fd01 	bl	802cf24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8024522:	687b      	ldr	r3, [r7, #4]
 8024524:	2203      	movs	r2, #3
 8024526:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802452a:	68fb      	ldr	r3, [r7, #12]
 802452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024532:	2b00      	cmp	r3, #0
 8024534:	d102      	bne.n	802453c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	2200      	movs	r2, #0
 802453a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 802453c:	687b      	ldr	r3, [r7, #4]
 802453e:	681b      	ldr	r3, [r3, #0]
 8024540:	4618      	mov	r0, r3
 8024542:	f005 fd2f 	bl	8029fa4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8024546:	687b      	ldr	r3, [r7, #4]
 8024548:	681b      	ldr	r3, [r3, #0]
 802454a:	603b      	str	r3, [r7, #0]
 802454c:	687e      	ldr	r6, [r7, #4]
 802454e:	466d      	mov	r5, sp
 8024550:	f106 0410 	add.w	r4, r6, #16
 8024554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802455a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802455c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024560:	e885 0003 	stmia.w	r5, {r0, r1}
 8024564:	1d33      	adds	r3, r6, #4
 8024566:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024568:	6838      	ldr	r0, [r7, #0]
 802456a:	f005 fca9 	bl	8029ec0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802456e:	687b      	ldr	r3, [r7, #4]
 8024570:	681b      	ldr	r3, [r3, #0]
 8024572:	2101      	movs	r1, #1
 8024574:	4618      	mov	r0, r3
 8024576:	f005 fd26 	bl	8029fc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681b      	ldr	r3, [r3, #0]
 802457e:	603b      	str	r3, [r7, #0]
 8024580:	687e      	ldr	r6, [r7, #4]
 8024582:	466d      	mov	r5, sp
 8024584:	f106 0410 	add.w	r4, r6, #16
 8024588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802458a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802458c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802458e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024590:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024594:	e885 0003 	stmia.w	r5, {r0, r1}
 8024598:	1d33      	adds	r3, r6, #4
 802459a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802459c:	6838      	ldr	r0, [r7, #0]
 802459e:	f005 feaf 	bl	802a300 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	2201      	movs	r2, #1
 80245a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80245aa:	2300      	movs	r3, #0
}
 80245ac:	4618      	mov	r0, r3
 80245ae:	3714      	adds	r7, #20
 80245b0:	46bd      	mov	sp, r7
 80245b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080245b4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80245b4:	b590      	push	{r4, r7, lr}
 80245b6:	b089      	sub	sp, #36	; 0x24
 80245b8:	af04      	add	r7, sp, #16
 80245ba:	6078      	str	r0, [r7, #4]
 80245bc:	4608      	mov	r0, r1
 80245be:	4611      	mov	r1, r2
 80245c0:	461a      	mov	r2, r3
 80245c2:	4603      	mov	r3, r0
 80245c4:	70fb      	strb	r3, [r7, #3]
 80245c6:	460b      	mov	r3, r1
 80245c8:	70bb      	strb	r3, [r7, #2]
 80245ca:	4613      	mov	r3, r2
 80245cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80245d4:	2b01      	cmp	r3, #1
 80245d6:	d101      	bne.n	80245dc <HAL_HCD_HC_Init+0x28>
 80245d8:	2302      	movs	r3, #2
 80245da:	e076      	b.n	80246ca <HAL_HCD_HC_Init+0x116>
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	2201      	movs	r2, #1
 80245e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80245e4:	78fb      	ldrb	r3, [r7, #3]
 80245e6:	687a      	ldr	r2, [r7, #4]
 80245e8:	212c      	movs	r1, #44	; 0x2c
 80245ea:	fb01 f303 	mul.w	r3, r1, r3
 80245ee:	4413      	add	r3, r2
 80245f0:	333d      	adds	r3, #61	; 0x3d
 80245f2:	2200      	movs	r2, #0
 80245f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80245f6:	78fb      	ldrb	r3, [r7, #3]
 80245f8:	687a      	ldr	r2, [r7, #4]
 80245fa:	212c      	movs	r1, #44	; 0x2c
 80245fc:	fb01 f303 	mul.w	r3, r1, r3
 8024600:	4413      	add	r3, r2
 8024602:	3338      	adds	r3, #56	; 0x38
 8024604:	787a      	ldrb	r2, [r7, #1]
 8024606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8024608:	78fb      	ldrb	r3, [r7, #3]
 802460a:	687a      	ldr	r2, [r7, #4]
 802460c:	212c      	movs	r1, #44	; 0x2c
 802460e:	fb01 f303 	mul.w	r3, r1, r3
 8024612:	4413      	add	r3, r2
 8024614:	3340      	adds	r3, #64	; 0x40
 8024616:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8024618:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 802461a:	78fb      	ldrb	r3, [r7, #3]
 802461c:	687a      	ldr	r2, [r7, #4]
 802461e:	212c      	movs	r1, #44	; 0x2c
 8024620:	fb01 f303 	mul.w	r3, r1, r3
 8024624:	4413      	add	r3, r2
 8024626:	3339      	adds	r3, #57	; 0x39
 8024628:	78fa      	ldrb	r2, [r7, #3]
 802462a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 802462c:	78fb      	ldrb	r3, [r7, #3]
 802462e:	687a      	ldr	r2, [r7, #4]
 8024630:	212c      	movs	r1, #44	; 0x2c
 8024632:	fb01 f303 	mul.w	r3, r1, r3
 8024636:	4413      	add	r3, r2
 8024638:	333f      	adds	r3, #63	; 0x3f
 802463a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802463e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8024640:	78fb      	ldrb	r3, [r7, #3]
 8024642:	78ba      	ldrb	r2, [r7, #2]
 8024644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8024648:	b2d0      	uxtb	r0, r2
 802464a:	687a      	ldr	r2, [r7, #4]
 802464c:	212c      	movs	r1, #44	; 0x2c
 802464e:	fb01 f303 	mul.w	r3, r1, r3
 8024652:	4413      	add	r3, r2
 8024654:	333a      	adds	r3, #58	; 0x3a
 8024656:	4602      	mov	r2, r0
 8024658:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 802465a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802465e:	2b00      	cmp	r3, #0
 8024660:	da09      	bge.n	8024676 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8024662:	78fb      	ldrb	r3, [r7, #3]
 8024664:	687a      	ldr	r2, [r7, #4]
 8024666:	212c      	movs	r1, #44	; 0x2c
 8024668:	fb01 f303 	mul.w	r3, r1, r3
 802466c:	4413      	add	r3, r2
 802466e:	333b      	adds	r3, #59	; 0x3b
 8024670:	2201      	movs	r2, #1
 8024672:	701a      	strb	r2, [r3, #0]
 8024674:	e008      	b.n	8024688 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8024676:	78fb      	ldrb	r3, [r7, #3]
 8024678:	687a      	ldr	r2, [r7, #4]
 802467a:	212c      	movs	r1, #44	; 0x2c
 802467c:	fb01 f303 	mul.w	r3, r1, r3
 8024680:	4413      	add	r3, r2
 8024682:	333b      	adds	r3, #59	; 0x3b
 8024684:	2200      	movs	r2, #0
 8024686:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8024688:	78fb      	ldrb	r3, [r7, #3]
 802468a:	687a      	ldr	r2, [r7, #4]
 802468c:	212c      	movs	r1, #44	; 0x2c
 802468e:	fb01 f303 	mul.w	r3, r1, r3
 8024692:	4413      	add	r3, r2
 8024694:	333c      	adds	r3, #60	; 0x3c
 8024696:	f897 2020 	ldrb.w	r2, [r7, #32]
 802469a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	6818      	ldr	r0, [r3, #0]
 80246a0:	787c      	ldrb	r4, [r7, #1]
 80246a2:	78ba      	ldrb	r2, [r7, #2]
 80246a4:	78f9      	ldrb	r1, [r7, #3]
 80246a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80246a8:	9302      	str	r3, [sp, #8]
 80246aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80246ae:	9301      	str	r3, [sp, #4]
 80246b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80246b4:	9300      	str	r3, [sp, #0]
 80246b6:	4623      	mov	r3, r4
 80246b8:	f005 ffa8 	bl	802a60c <USB_HC_Init>
 80246bc:	4603      	mov	r3, r0
 80246be:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	2200      	movs	r2, #0
 80246c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80246c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80246ca:	4618      	mov	r0, r3
 80246cc:	3714      	adds	r7, #20
 80246ce:	46bd      	mov	sp, r7
 80246d0:	bd90      	pop	{r4, r7, pc}

080246d2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80246d2:	b580      	push	{r7, lr}
 80246d4:	b084      	sub	sp, #16
 80246d6:	af00      	add	r7, sp, #0
 80246d8:	6078      	str	r0, [r7, #4]
 80246da:	460b      	mov	r3, r1
 80246dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80246de:	2300      	movs	r3, #0
 80246e0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80246e8:	2b01      	cmp	r3, #1
 80246ea:	d101      	bne.n	80246f0 <HAL_HCD_HC_Halt+0x1e>
 80246ec:	2302      	movs	r3, #2
 80246ee:	e00f      	b.n	8024710 <HAL_HCD_HC_Halt+0x3e>
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	2201      	movs	r2, #1
 80246f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80246f8:	687b      	ldr	r3, [r7, #4]
 80246fa:	681b      	ldr	r3, [r3, #0]
 80246fc:	78fa      	ldrb	r2, [r7, #3]
 80246fe:	4611      	mov	r1, r2
 8024700:	4618      	mov	r0, r3
 8024702:	f006 f9f8 	bl	802aaf6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8024706:	687b      	ldr	r3, [r7, #4]
 8024708:	2200      	movs	r2, #0
 802470a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 802470e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024710:	4618      	mov	r0, r3
 8024712:	3710      	adds	r7, #16
 8024714:	46bd      	mov	sp, r7
 8024716:	bd80      	pop	{r7, pc}

08024718 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8024718:	b580      	push	{r7, lr}
 802471a:	b082      	sub	sp, #8
 802471c:	af00      	add	r7, sp, #0
 802471e:	6078      	str	r0, [r7, #4]
 8024720:	4608      	mov	r0, r1
 8024722:	4611      	mov	r1, r2
 8024724:	461a      	mov	r2, r3
 8024726:	4603      	mov	r3, r0
 8024728:	70fb      	strb	r3, [r7, #3]
 802472a:	460b      	mov	r3, r1
 802472c:	70bb      	strb	r3, [r7, #2]
 802472e:	4613      	mov	r3, r2
 8024730:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8024732:	78fb      	ldrb	r3, [r7, #3]
 8024734:	687a      	ldr	r2, [r7, #4]
 8024736:	212c      	movs	r1, #44	; 0x2c
 8024738:	fb01 f303 	mul.w	r3, r1, r3
 802473c:	4413      	add	r3, r2
 802473e:	333b      	adds	r3, #59	; 0x3b
 8024740:	78ba      	ldrb	r2, [r7, #2]
 8024742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8024744:	78fb      	ldrb	r3, [r7, #3]
 8024746:	687a      	ldr	r2, [r7, #4]
 8024748:	212c      	movs	r1, #44	; 0x2c
 802474a:	fb01 f303 	mul.w	r3, r1, r3
 802474e:	4413      	add	r3, r2
 8024750:	333f      	adds	r3, #63	; 0x3f
 8024752:	787a      	ldrb	r2, [r7, #1]
 8024754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8024756:	7c3b      	ldrb	r3, [r7, #16]
 8024758:	2b00      	cmp	r3, #0
 802475a:	d112      	bne.n	8024782 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 802475c:	78fb      	ldrb	r3, [r7, #3]
 802475e:	687a      	ldr	r2, [r7, #4]
 8024760:	212c      	movs	r1, #44	; 0x2c
 8024762:	fb01 f303 	mul.w	r3, r1, r3
 8024766:	4413      	add	r3, r2
 8024768:	3342      	adds	r3, #66	; 0x42
 802476a:	2203      	movs	r2, #3
 802476c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802476e:	78fb      	ldrb	r3, [r7, #3]
 8024770:	687a      	ldr	r2, [r7, #4]
 8024772:	212c      	movs	r1, #44	; 0x2c
 8024774:	fb01 f303 	mul.w	r3, r1, r3
 8024778:	4413      	add	r3, r2
 802477a:	333d      	adds	r3, #61	; 0x3d
 802477c:	7f3a      	ldrb	r2, [r7, #28]
 802477e:	701a      	strb	r2, [r3, #0]
 8024780:	e008      	b.n	8024794 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024782:	78fb      	ldrb	r3, [r7, #3]
 8024784:	687a      	ldr	r2, [r7, #4]
 8024786:	212c      	movs	r1, #44	; 0x2c
 8024788:	fb01 f303 	mul.w	r3, r1, r3
 802478c:	4413      	add	r3, r2
 802478e:	3342      	adds	r3, #66	; 0x42
 8024790:	2202      	movs	r2, #2
 8024792:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8024794:	787b      	ldrb	r3, [r7, #1]
 8024796:	2b03      	cmp	r3, #3
 8024798:	f200 80c6 	bhi.w	8024928 <HAL_HCD_HC_SubmitRequest+0x210>
 802479c:	a201      	add	r2, pc, #4	; (adr r2, 80247a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80247a2:	bf00      	nop
 80247a4:	080247b5 	.word	0x080247b5
 80247a8:	08024915 	.word	0x08024915
 80247ac:	08024819 	.word	0x08024819
 80247b0:	08024897 	.word	0x08024897
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80247b4:	7c3b      	ldrb	r3, [r7, #16]
 80247b6:	2b01      	cmp	r3, #1
 80247b8:	f040 80b8 	bne.w	802492c <HAL_HCD_HC_SubmitRequest+0x214>
 80247bc:	78bb      	ldrb	r3, [r7, #2]
 80247be:	2b00      	cmp	r3, #0
 80247c0:	f040 80b4 	bne.w	802492c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80247c4:	8b3b      	ldrh	r3, [r7, #24]
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	d108      	bne.n	80247dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80247ca:	78fb      	ldrb	r3, [r7, #3]
 80247cc:	687a      	ldr	r2, [r7, #4]
 80247ce:	212c      	movs	r1, #44	; 0x2c
 80247d0:	fb01 f303 	mul.w	r3, r1, r3
 80247d4:	4413      	add	r3, r2
 80247d6:	3355      	adds	r3, #85	; 0x55
 80247d8:	2201      	movs	r2, #1
 80247da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80247dc:	78fb      	ldrb	r3, [r7, #3]
 80247de:	687a      	ldr	r2, [r7, #4]
 80247e0:	212c      	movs	r1, #44	; 0x2c
 80247e2:	fb01 f303 	mul.w	r3, r1, r3
 80247e6:	4413      	add	r3, r2
 80247e8:	3355      	adds	r3, #85	; 0x55
 80247ea:	781b      	ldrb	r3, [r3, #0]
 80247ec:	2b00      	cmp	r3, #0
 80247ee:	d109      	bne.n	8024804 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80247f0:	78fb      	ldrb	r3, [r7, #3]
 80247f2:	687a      	ldr	r2, [r7, #4]
 80247f4:	212c      	movs	r1, #44	; 0x2c
 80247f6:	fb01 f303 	mul.w	r3, r1, r3
 80247fa:	4413      	add	r3, r2
 80247fc:	3342      	adds	r3, #66	; 0x42
 80247fe:	2200      	movs	r2, #0
 8024800:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8024802:	e093      	b.n	802492c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024804:	78fb      	ldrb	r3, [r7, #3]
 8024806:	687a      	ldr	r2, [r7, #4]
 8024808:	212c      	movs	r1, #44	; 0x2c
 802480a:	fb01 f303 	mul.w	r3, r1, r3
 802480e:	4413      	add	r3, r2
 8024810:	3342      	adds	r3, #66	; 0x42
 8024812:	2202      	movs	r2, #2
 8024814:	701a      	strb	r2, [r3, #0]
      break;
 8024816:	e089      	b.n	802492c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8024818:	78bb      	ldrb	r3, [r7, #2]
 802481a:	2b00      	cmp	r3, #0
 802481c:	d11d      	bne.n	802485a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802481e:	78fb      	ldrb	r3, [r7, #3]
 8024820:	687a      	ldr	r2, [r7, #4]
 8024822:	212c      	movs	r1, #44	; 0x2c
 8024824:	fb01 f303 	mul.w	r3, r1, r3
 8024828:	4413      	add	r3, r2
 802482a:	3355      	adds	r3, #85	; 0x55
 802482c:	781b      	ldrb	r3, [r3, #0]
 802482e:	2b00      	cmp	r3, #0
 8024830:	d109      	bne.n	8024846 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024832:	78fb      	ldrb	r3, [r7, #3]
 8024834:	687a      	ldr	r2, [r7, #4]
 8024836:	212c      	movs	r1, #44	; 0x2c
 8024838:	fb01 f303 	mul.w	r3, r1, r3
 802483c:	4413      	add	r3, r2
 802483e:	3342      	adds	r3, #66	; 0x42
 8024840:	2200      	movs	r2, #0
 8024842:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8024844:	e073      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024846:	78fb      	ldrb	r3, [r7, #3]
 8024848:	687a      	ldr	r2, [r7, #4]
 802484a:	212c      	movs	r1, #44	; 0x2c
 802484c:	fb01 f303 	mul.w	r3, r1, r3
 8024850:	4413      	add	r3, r2
 8024852:	3342      	adds	r3, #66	; 0x42
 8024854:	2202      	movs	r2, #2
 8024856:	701a      	strb	r2, [r3, #0]
      break;
 8024858:	e069      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 802485a:	78fb      	ldrb	r3, [r7, #3]
 802485c:	687a      	ldr	r2, [r7, #4]
 802485e:	212c      	movs	r1, #44	; 0x2c
 8024860:	fb01 f303 	mul.w	r3, r1, r3
 8024864:	4413      	add	r3, r2
 8024866:	3354      	adds	r3, #84	; 0x54
 8024868:	781b      	ldrb	r3, [r3, #0]
 802486a:	2b00      	cmp	r3, #0
 802486c:	d109      	bne.n	8024882 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802486e:	78fb      	ldrb	r3, [r7, #3]
 8024870:	687a      	ldr	r2, [r7, #4]
 8024872:	212c      	movs	r1, #44	; 0x2c
 8024874:	fb01 f303 	mul.w	r3, r1, r3
 8024878:	4413      	add	r3, r2
 802487a:	3342      	adds	r3, #66	; 0x42
 802487c:	2200      	movs	r2, #0
 802487e:	701a      	strb	r2, [r3, #0]
      break;
 8024880:	e055      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024882:	78fb      	ldrb	r3, [r7, #3]
 8024884:	687a      	ldr	r2, [r7, #4]
 8024886:	212c      	movs	r1, #44	; 0x2c
 8024888:	fb01 f303 	mul.w	r3, r1, r3
 802488c:	4413      	add	r3, r2
 802488e:	3342      	adds	r3, #66	; 0x42
 8024890:	2202      	movs	r2, #2
 8024892:	701a      	strb	r2, [r3, #0]
      break;
 8024894:	e04b      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8024896:	78bb      	ldrb	r3, [r7, #2]
 8024898:	2b00      	cmp	r3, #0
 802489a:	d11d      	bne.n	80248d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802489c:	78fb      	ldrb	r3, [r7, #3]
 802489e:	687a      	ldr	r2, [r7, #4]
 80248a0:	212c      	movs	r1, #44	; 0x2c
 80248a2:	fb01 f303 	mul.w	r3, r1, r3
 80248a6:	4413      	add	r3, r2
 80248a8:	3355      	adds	r3, #85	; 0x55
 80248aa:	781b      	ldrb	r3, [r3, #0]
 80248ac:	2b00      	cmp	r3, #0
 80248ae:	d109      	bne.n	80248c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80248b0:	78fb      	ldrb	r3, [r7, #3]
 80248b2:	687a      	ldr	r2, [r7, #4]
 80248b4:	212c      	movs	r1, #44	; 0x2c
 80248b6:	fb01 f303 	mul.w	r3, r1, r3
 80248ba:	4413      	add	r3, r2
 80248bc:	3342      	adds	r3, #66	; 0x42
 80248be:	2200      	movs	r2, #0
 80248c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80248c2:	e034      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80248c4:	78fb      	ldrb	r3, [r7, #3]
 80248c6:	687a      	ldr	r2, [r7, #4]
 80248c8:	212c      	movs	r1, #44	; 0x2c
 80248ca:	fb01 f303 	mul.w	r3, r1, r3
 80248ce:	4413      	add	r3, r2
 80248d0:	3342      	adds	r3, #66	; 0x42
 80248d2:	2202      	movs	r2, #2
 80248d4:	701a      	strb	r2, [r3, #0]
      break;
 80248d6:	e02a      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80248d8:	78fb      	ldrb	r3, [r7, #3]
 80248da:	687a      	ldr	r2, [r7, #4]
 80248dc:	212c      	movs	r1, #44	; 0x2c
 80248de:	fb01 f303 	mul.w	r3, r1, r3
 80248e2:	4413      	add	r3, r2
 80248e4:	3354      	adds	r3, #84	; 0x54
 80248e6:	781b      	ldrb	r3, [r3, #0]
 80248e8:	2b00      	cmp	r3, #0
 80248ea:	d109      	bne.n	8024900 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80248ec:	78fb      	ldrb	r3, [r7, #3]
 80248ee:	687a      	ldr	r2, [r7, #4]
 80248f0:	212c      	movs	r1, #44	; 0x2c
 80248f2:	fb01 f303 	mul.w	r3, r1, r3
 80248f6:	4413      	add	r3, r2
 80248f8:	3342      	adds	r3, #66	; 0x42
 80248fa:	2200      	movs	r2, #0
 80248fc:	701a      	strb	r2, [r3, #0]
      break;
 80248fe:	e016      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8024900:	78fb      	ldrb	r3, [r7, #3]
 8024902:	687a      	ldr	r2, [r7, #4]
 8024904:	212c      	movs	r1, #44	; 0x2c
 8024906:	fb01 f303 	mul.w	r3, r1, r3
 802490a:	4413      	add	r3, r2
 802490c:	3342      	adds	r3, #66	; 0x42
 802490e:	2202      	movs	r2, #2
 8024910:	701a      	strb	r2, [r3, #0]
      break;
 8024912:	e00c      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8024914:	78fb      	ldrb	r3, [r7, #3]
 8024916:	687a      	ldr	r2, [r7, #4]
 8024918:	212c      	movs	r1, #44	; 0x2c
 802491a:	fb01 f303 	mul.w	r3, r1, r3
 802491e:	4413      	add	r3, r2
 8024920:	3342      	adds	r3, #66	; 0x42
 8024922:	2200      	movs	r2, #0
 8024924:	701a      	strb	r2, [r3, #0]
      break;
 8024926:	e002      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8024928:	bf00      	nop
 802492a:	e000      	b.n	802492e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 802492c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 802492e:	78fb      	ldrb	r3, [r7, #3]
 8024930:	687a      	ldr	r2, [r7, #4]
 8024932:	212c      	movs	r1, #44	; 0x2c
 8024934:	fb01 f303 	mul.w	r3, r1, r3
 8024938:	4413      	add	r3, r2
 802493a:	3344      	adds	r3, #68	; 0x44
 802493c:	697a      	ldr	r2, [r7, #20]
 802493e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8024940:	78fb      	ldrb	r3, [r7, #3]
 8024942:	8b3a      	ldrh	r2, [r7, #24]
 8024944:	6879      	ldr	r1, [r7, #4]
 8024946:	202c      	movs	r0, #44	; 0x2c
 8024948:	fb00 f303 	mul.w	r3, r0, r3
 802494c:	440b      	add	r3, r1
 802494e:	334c      	adds	r3, #76	; 0x4c
 8024950:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8024952:	78fb      	ldrb	r3, [r7, #3]
 8024954:	687a      	ldr	r2, [r7, #4]
 8024956:	212c      	movs	r1, #44	; 0x2c
 8024958:	fb01 f303 	mul.w	r3, r1, r3
 802495c:	4413      	add	r3, r2
 802495e:	3360      	adds	r3, #96	; 0x60
 8024960:	2200      	movs	r2, #0
 8024962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8024964:	78fb      	ldrb	r3, [r7, #3]
 8024966:	687a      	ldr	r2, [r7, #4]
 8024968:	212c      	movs	r1, #44	; 0x2c
 802496a:	fb01 f303 	mul.w	r3, r1, r3
 802496e:	4413      	add	r3, r2
 8024970:	3350      	adds	r3, #80	; 0x50
 8024972:	2200      	movs	r2, #0
 8024974:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8024976:	78fb      	ldrb	r3, [r7, #3]
 8024978:	687a      	ldr	r2, [r7, #4]
 802497a:	212c      	movs	r1, #44	; 0x2c
 802497c:	fb01 f303 	mul.w	r3, r1, r3
 8024980:	4413      	add	r3, r2
 8024982:	3339      	adds	r3, #57	; 0x39
 8024984:	78fa      	ldrb	r2, [r7, #3]
 8024986:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8024988:	78fb      	ldrb	r3, [r7, #3]
 802498a:	687a      	ldr	r2, [r7, #4]
 802498c:	212c      	movs	r1, #44	; 0x2c
 802498e:	fb01 f303 	mul.w	r3, r1, r3
 8024992:	4413      	add	r3, r2
 8024994:	3361      	adds	r3, #97	; 0x61
 8024996:	2200      	movs	r2, #0
 8024998:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	6818      	ldr	r0, [r3, #0]
 802499e:	78fb      	ldrb	r3, [r7, #3]
 80249a0:	222c      	movs	r2, #44	; 0x2c
 80249a2:	fb02 f303 	mul.w	r3, r2, r3
 80249a6:	3338      	adds	r3, #56	; 0x38
 80249a8:	687a      	ldr	r2, [r7, #4]
 80249aa:	18d1      	adds	r1, r2, r3
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	691b      	ldr	r3, [r3, #16]
 80249b0:	b2db      	uxtb	r3, r3
 80249b2:	461a      	mov	r2, r3
 80249b4:	f005 ff4c 	bl	802a850 <USB_HC_StartXfer>
 80249b8:	4603      	mov	r3, r0
}
 80249ba:	4618      	mov	r0, r3
 80249bc:	3708      	adds	r7, #8
 80249be:	46bd      	mov	sp, r7
 80249c0:	bd80      	pop	{r7, pc}
 80249c2:	bf00      	nop

080249c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80249c4:	b580      	push	{r7, lr}
 80249c6:	b086      	sub	sp, #24
 80249c8:	af00      	add	r7, sp, #0
 80249ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80249d2:	693b      	ldr	r3, [r7, #16]
 80249d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80249d6:	687b      	ldr	r3, [r7, #4]
 80249d8:	681b      	ldr	r3, [r3, #0]
 80249da:	4618      	mov	r0, r3
 80249dc:	f005 fc4d 	bl	802a27a <USB_GetMode>
 80249e0:	4603      	mov	r3, r0
 80249e2:	2b01      	cmp	r3, #1
 80249e4:	f040 80f6 	bne.w	8024bd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80249e8:	687b      	ldr	r3, [r7, #4]
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	4618      	mov	r0, r3
 80249ee:	f005 fc31 	bl	802a254 <USB_ReadInterrupts>
 80249f2:	4603      	mov	r3, r0
 80249f4:	2b00      	cmp	r3, #0
 80249f6:	f000 80ec 	beq.w	8024bd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	681b      	ldr	r3, [r3, #0]
 80249fe:	4618      	mov	r0, r3
 8024a00:	f005 fc28 	bl	802a254 <USB_ReadInterrupts>
 8024a04:	4603      	mov	r3, r0
 8024a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8024a0e:	d104      	bne.n	8024a1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8024a10:	687b      	ldr	r3, [r7, #4]
 8024a12:	681b      	ldr	r3, [r3, #0]
 8024a14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8024a18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	4618      	mov	r0, r3
 8024a20:	f005 fc18 	bl	802a254 <USB_ReadInterrupts>
 8024a24:	4603      	mov	r3, r0
 8024a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024a2e:	d104      	bne.n	8024a3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8024a30:	687b      	ldr	r3, [r7, #4]
 8024a32:	681b      	ldr	r3, [r3, #0]
 8024a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8024a38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	4618      	mov	r0, r3
 8024a40:	f005 fc08 	bl	802a254 <USB_ReadInterrupts>
 8024a44:	4603      	mov	r3, r0
 8024a46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8024a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8024a4e:	d104      	bne.n	8024a5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8024a50:	687b      	ldr	r3, [r7, #4]
 8024a52:	681b      	ldr	r3, [r3, #0]
 8024a54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8024a58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8024a5a:	687b      	ldr	r3, [r7, #4]
 8024a5c:	681b      	ldr	r3, [r3, #0]
 8024a5e:	4618      	mov	r0, r3
 8024a60:	f005 fbf8 	bl	802a254 <USB_ReadInterrupts>
 8024a64:	4603      	mov	r3, r0
 8024a66:	f003 0302 	and.w	r3, r3, #2
 8024a6a:	2b02      	cmp	r3, #2
 8024a6c:	d103      	bne.n	8024a76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8024a6e:	687b      	ldr	r3, [r7, #4]
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	2202      	movs	r2, #2
 8024a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	4618      	mov	r0, r3
 8024a7c:	f005 fbea 	bl	802a254 <USB_ReadInterrupts>
 8024a80:	4603      	mov	r3, r0
 8024a82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8024a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8024a8a:	d11c      	bne.n	8024ac6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	681b      	ldr	r3, [r3, #0]
 8024a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8024a94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8024a96:	68fb      	ldr	r3, [r7, #12]
 8024a98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	f003 0301 	and.w	r3, r3, #1
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	d10f      	bne.n	8024ac6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8024aa6:	2110      	movs	r1, #16
 8024aa8:	6938      	ldr	r0, [r7, #16]
 8024aaa:	f005 fad9 	bl	802a060 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8024aae:	6938      	ldr	r0, [r7, #16]
 8024ab0:	f005 fb0a 	bl	802a0c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	2101      	movs	r1, #1
 8024aba:	4618      	mov	r0, r3
 8024abc:	f005 fce0 	bl	802a480 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8024ac0:	6878      	ldr	r0, [r7, #4]
 8024ac2:	f008 faa9 	bl	802d018 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	681b      	ldr	r3, [r3, #0]
 8024aca:	4618      	mov	r0, r3
 8024acc:	f005 fbc2 	bl	802a254 <USB_ReadInterrupts>
 8024ad0:	4603      	mov	r3, r0
 8024ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8024ad6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024ada:	d102      	bne.n	8024ae2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8024adc:	6878      	ldr	r0, [r7, #4]
 8024ade:	f001 f89e 	bl	8025c1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	4618      	mov	r0, r3
 8024ae8:	f005 fbb4 	bl	802a254 <USB_ReadInterrupts>
 8024aec:	4603      	mov	r3, r0
 8024aee:	f003 0308 	and.w	r3, r3, #8
 8024af2:	2b08      	cmp	r3, #8
 8024af4:	d106      	bne.n	8024b04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8024af6:	6878      	ldr	r0, [r7, #4]
 8024af8:	f008 fa72 	bl	802cfe0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	681b      	ldr	r3, [r3, #0]
 8024b00:	2208      	movs	r2, #8
 8024b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8024b04:	687b      	ldr	r3, [r7, #4]
 8024b06:	681b      	ldr	r3, [r3, #0]
 8024b08:	4618      	mov	r0, r3
 8024b0a:	f005 fba3 	bl	802a254 <USB_ReadInterrupts>
 8024b0e:	4603      	mov	r3, r0
 8024b10:	f003 0310 	and.w	r3, r3, #16
 8024b14:	2b10      	cmp	r3, #16
 8024b16:	d101      	bne.n	8024b1c <HAL_HCD_IRQHandler+0x158>
 8024b18:	2301      	movs	r3, #1
 8024b1a:	e000      	b.n	8024b1e <HAL_HCD_IRQHandler+0x15a>
 8024b1c:	2300      	movs	r3, #0
 8024b1e:	2b00      	cmp	r3, #0
 8024b20:	d012      	beq.n	8024b48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	699a      	ldr	r2, [r3, #24]
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	681b      	ldr	r3, [r3, #0]
 8024b2c:	f022 0210 	bic.w	r2, r2, #16
 8024b30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8024b32:	6878      	ldr	r0, [r7, #4]
 8024b34:	f000 ffa1 	bl	8025a7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	681b      	ldr	r3, [r3, #0]
 8024b3c:	699a      	ldr	r2, [r3, #24]
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	681b      	ldr	r3, [r3, #0]
 8024b42:	f042 0210 	orr.w	r2, r2, #16
 8024b46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	681b      	ldr	r3, [r3, #0]
 8024b4c:	4618      	mov	r0, r3
 8024b4e:	f005 fb81 	bl	802a254 <USB_ReadInterrupts>
 8024b52:	4603      	mov	r3, r0
 8024b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8024b5c:	d13a      	bne.n	8024bd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	681b      	ldr	r3, [r3, #0]
 8024b62:	4618      	mov	r0, r3
 8024b64:	f005 ffb6 	bl	802aad4 <USB_HC_ReadInterrupt>
 8024b68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024b6a:	2300      	movs	r3, #0
 8024b6c:	617b      	str	r3, [r7, #20]
 8024b6e:	e025      	b.n	8024bbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8024b70:	697b      	ldr	r3, [r7, #20]
 8024b72:	f003 030f 	and.w	r3, r3, #15
 8024b76:	68ba      	ldr	r2, [r7, #8]
 8024b78:	fa22 f303 	lsr.w	r3, r2, r3
 8024b7c:	f003 0301 	and.w	r3, r3, #1
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	d018      	beq.n	8024bb6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8024b84:	697b      	ldr	r3, [r7, #20]
 8024b86:	015a      	lsls	r2, r3, #5
 8024b88:	68fb      	ldr	r3, [r7, #12]
 8024b8a:	4413      	add	r3, r2
 8024b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8024b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8024b9a:	d106      	bne.n	8024baa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8024b9c:	697b      	ldr	r3, [r7, #20]
 8024b9e:	b2db      	uxtb	r3, r3
 8024ba0:	4619      	mov	r1, r3
 8024ba2:	6878      	ldr	r0, [r7, #4]
 8024ba4:	f000 f8ab 	bl	8024cfe <HCD_HC_IN_IRQHandler>
 8024ba8:	e005      	b.n	8024bb6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8024baa:	697b      	ldr	r3, [r7, #20]
 8024bac:	b2db      	uxtb	r3, r3
 8024bae:	4619      	mov	r1, r3
 8024bb0:	6878      	ldr	r0, [r7, #4]
 8024bb2:	f000 fbf9 	bl	80253a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8024bb6:	697b      	ldr	r3, [r7, #20]
 8024bb8:	3301      	adds	r3, #1
 8024bba:	617b      	str	r3, [r7, #20]
 8024bbc:	687b      	ldr	r3, [r7, #4]
 8024bbe:	689b      	ldr	r3, [r3, #8]
 8024bc0:	697a      	ldr	r2, [r7, #20]
 8024bc2:	429a      	cmp	r2, r3
 8024bc4:	d3d4      	bcc.n	8024b70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8024bc6:	687b      	ldr	r3, [r7, #4]
 8024bc8:	681b      	ldr	r3, [r3, #0]
 8024bca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8024bce:	615a      	str	r2, [r3, #20]
 8024bd0:	e000      	b.n	8024bd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8024bd2:	bf00      	nop
    }
  }
}
 8024bd4:	3718      	adds	r7, #24
 8024bd6:	46bd      	mov	sp, r7
 8024bd8:	bd80      	pop	{r7, pc}

08024bda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8024bda:	b580      	push	{r7, lr}
 8024bdc:	b082      	sub	sp, #8
 8024bde:	af00      	add	r7, sp, #0
 8024be0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024be8:	2b01      	cmp	r3, #1
 8024bea:	d101      	bne.n	8024bf0 <HAL_HCD_Start+0x16>
 8024bec:	2302      	movs	r3, #2
 8024bee:	e013      	b.n	8024c18 <HAL_HCD_Start+0x3e>
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	2201      	movs	r2, #1
 8024bf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	681b      	ldr	r3, [r3, #0]
 8024bfc:	2101      	movs	r1, #1
 8024bfe:	4618      	mov	r0, r3
 8024c00:	f005 fca2 	bl	802a548 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8024c04:	687b      	ldr	r3, [r7, #4]
 8024c06:	681b      	ldr	r3, [r3, #0]
 8024c08:	4618      	mov	r0, r3
 8024c0a:	f005 f9ba 	bl	8029f82 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	2200      	movs	r2, #0
 8024c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024c16:	2300      	movs	r3, #0
}
 8024c18:	4618      	mov	r0, r3
 8024c1a:	3708      	adds	r7, #8
 8024c1c:	46bd      	mov	sp, r7
 8024c1e:	bd80      	pop	{r7, pc}

08024c20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8024c20:	b580      	push	{r7, lr}
 8024c22:	b082      	sub	sp, #8
 8024c24:	af00      	add	r7, sp, #0
 8024c26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8024c28:	687b      	ldr	r3, [r7, #4]
 8024c2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8024c2e:	2b01      	cmp	r3, #1
 8024c30:	d101      	bne.n	8024c36 <HAL_HCD_Stop+0x16>
 8024c32:	2302      	movs	r3, #2
 8024c34:	e00d      	b.n	8024c52 <HAL_HCD_Stop+0x32>
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	2201      	movs	r2, #1
 8024c3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8024c3e:	687b      	ldr	r3, [r7, #4]
 8024c40:	681b      	ldr	r3, [r3, #0]
 8024c42:	4618      	mov	r0, r3
 8024c44:	f006 f890 	bl	802ad68 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	2200      	movs	r2, #0
 8024c4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8024c50:	2300      	movs	r3, #0
}
 8024c52:	4618      	mov	r0, r3
 8024c54:	3708      	adds	r7, #8
 8024c56:	46bd      	mov	sp, r7
 8024c58:	bd80      	pop	{r7, pc}

08024c5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8024c5a:	b580      	push	{r7, lr}
 8024c5c:	b082      	sub	sp, #8
 8024c5e:	af00      	add	r7, sp, #0
 8024c60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	681b      	ldr	r3, [r3, #0]
 8024c66:	4618      	mov	r0, r3
 8024c68:	f005 fc44 	bl	802a4f4 <USB_ResetPort>
 8024c6c:	4603      	mov	r3, r0
}
 8024c6e:	4618      	mov	r0, r3
 8024c70:	3708      	adds	r7, #8
 8024c72:	46bd      	mov	sp, r7
 8024c74:	bd80      	pop	{r7, pc}

08024c76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024c76:	b480      	push	{r7}
 8024c78:	b083      	sub	sp, #12
 8024c7a:	af00      	add	r7, sp, #0
 8024c7c:	6078      	str	r0, [r7, #4]
 8024c7e:	460b      	mov	r3, r1
 8024c80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8024c82:	78fb      	ldrb	r3, [r7, #3]
 8024c84:	687a      	ldr	r2, [r7, #4]
 8024c86:	212c      	movs	r1, #44	; 0x2c
 8024c88:	fb01 f303 	mul.w	r3, r1, r3
 8024c8c:	4413      	add	r3, r2
 8024c8e:	3360      	adds	r3, #96	; 0x60
 8024c90:	781b      	ldrb	r3, [r3, #0]
}
 8024c92:	4618      	mov	r0, r3
 8024c94:	370c      	adds	r7, #12
 8024c96:	46bd      	mov	sp, r7
 8024c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c9c:	4770      	bx	lr

08024c9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024c9e:	b480      	push	{r7}
 8024ca0:	b083      	sub	sp, #12
 8024ca2:	af00      	add	r7, sp, #0
 8024ca4:	6078      	str	r0, [r7, #4]
 8024ca6:	460b      	mov	r3, r1
 8024ca8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8024caa:	78fb      	ldrb	r3, [r7, #3]
 8024cac:	687a      	ldr	r2, [r7, #4]
 8024cae:	212c      	movs	r1, #44	; 0x2c
 8024cb0:	fb01 f303 	mul.w	r3, r1, r3
 8024cb4:	4413      	add	r3, r2
 8024cb6:	3350      	adds	r3, #80	; 0x50
 8024cb8:	681b      	ldr	r3, [r3, #0]
}
 8024cba:	4618      	mov	r0, r3
 8024cbc:	370c      	adds	r7, #12
 8024cbe:	46bd      	mov	sp, r7
 8024cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cc4:	4770      	bx	lr

08024cc6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8024cc6:	b580      	push	{r7, lr}
 8024cc8:	b082      	sub	sp, #8
 8024cca:	af00      	add	r7, sp, #0
 8024ccc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	4618      	mov	r0, r3
 8024cd4:	f005 fc88 	bl	802a5e8 <USB_GetCurrentFrame>
 8024cd8:	4603      	mov	r3, r0
}
 8024cda:	4618      	mov	r0, r3
 8024cdc:	3708      	adds	r7, #8
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	bd80      	pop	{r7, pc}

08024ce2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8024ce2:	b580      	push	{r7, lr}
 8024ce4:	b082      	sub	sp, #8
 8024ce6:	af00      	add	r7, sp, #0
 8024ce8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	681b      	ldr	r3, [r3, #0]
 8024cee:	4618      	mov	r0, r3
 8024cf0:	f005 fc63 	bl	802a5ba <USB_GetHostSpeed>
 8024cf4:	4603      	mov	r3, r0
}
 8024cf6:	4618      	mov	r0, r3
 8024cf8:	3708      	adds	r7, #8
 8024cfa:	46bd      	mov	sp, r7
 8024cfc:	bd80      	pop	{r7, pc}

08024cfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8024cfe:	b580      	push	{r7, lr}
 8024d00:	b086      	sub	sp, #24
 8024d02:	af00      	add	r7, sp, #0
 8024d04:	6078      	str	r0, [r7, #4]
 8024d06:	460b      	mov	r3, r1
 8024d08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8024d0a:	687b      	ldr	r3, [r7, #4]
 8024d0c:	681b      	ldr	r3, [r3, #0]
 8024d0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8024d10:	697b      	ldr	r3, [r7, #20]
 8024d12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8024d14:	78fb      	ldrb	r3, [r7, #3]
 8024d16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8024d18:	68fb      	ldr	r3, [r7, #12]
 8024d1a:	015a      	lsls	r2, r3, #5
 8024d1c:	693b      	ldr	r3, [r7, #16]
 8024d1e:	4413      	add	r3, r2
 8024d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d24:	689b      	ldr	r3, [r3, #8]
 8024d26:	f003 0304 	and.w	r3, r3, #4
 8024d2a:	2b04      	cmp	r3, #4
 8024d2c:	d11a      	bne.n	8024d64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	015a      	lsls	r2, r3, #5
 8024d32:	693b      	ldr	r3, [r7, #16]
 8024d34:	4413      	add	r3, r2
 8024d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d3a:	461a      	mov	r2, r3
 8024d3c:	2304      	movs	r3, #4
 8024d3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024d40:	687a      	ldr	r2, [r7, #4]
 8024d42:	68fb      	ldr	r3, [r7, #12]
 8024d44:	212c      	movs	r1, #44	; 0x2c
 8024d46:	fb01 f303 	mul.w	r3, r1, r3
 8024d4a:	4413      	add	r3, r2
 8024d4c:	3361      	adds	r3, #97	; 0x61
 8024d4e:	2206      	movs	r2, #6
 8024d50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	68fa      	ldr	r2, [r7, #12]
 8024d58:	b2d2      	uxtb	r2, r2
 8024d5a:	4611      	mov	r1, r2
 8024d5c:	4618      	mov	r0, r3
 8024d5e:	f005 feca 	bl	802aaf6 <USB_HC_Halt>
 8024d62:	e0af      	b.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8024d64:	68fb      	ldr	r3, [r7, #12]
 8024d66:	015a      	lsls	r2, r3, #5
 8024d68:	693b      	ldr	r3, [r7, #16]
 8024d6a:	4413      	add	r3, r2
 8024d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d70:	689b      	ldr	r3, [r3, #8]
 8024d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8024d7a:	d11b      	bne.n	8024db4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8024d7c:	68fb      	ldr	r3, [r7, #12]
 8024d7e:	015a      	lsls	r2, r3, #5
 8024d80:	693b      	ldr	r3, [r7, #16]
 8024d82:	4413      	add	r3, r2
 8024d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024d88:	461a      	mov	r2, r3
 8024d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024d8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8024d90:	687a      	ldr	r2, [r7, #4]
 8024d92:	68fb      	ldr	r3, [r7, #12]
 8024d94:	212c      	movs	r1, #44	; 0x2c
 8024d96:	fb01 f303 	mul.w	r3, r1, r3
 8024d9a:	4413      	add	r3, r2
 8024d9c:	3361      	adds	r3, #97	; 0x61
 8024d9e:	2207      	movs	r2, #7
 8024da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	68fa      	ldr	r2, [r7, #12]
 8024da8:	b2d2      	uxtb	r2, r2
 8024daa:	4611      	mov	r1, r2
 8024dac:	4618      	mov	r0, r3
 8024dae:	f005 fea2 	bl	802aaf6 <USB_HC_Halt>
 8024db2:	e087      	b.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8024db4:	68fb      	ldr	r3, [r7, #12]
 8024db6:	015a      	lsls	r2, r3, #5
 8024db8:	693b      	ldr	r3, [r7, #16]
 8024dba:	4413      	add	r3, r2
 8024dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dc0:	689b      	ldr	r3, [r3, #8]
 8024dc2:	f003 0320 	and.w	r3, r3, #32
 8024dc6:	2b20      	cmp	r3, #32
 8024dc8:	d109      	bne.n	8024dde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	015a      	lsls	r2, r3, #5
 8024dce:	693b      	ldr	r3, [r7, #16]
 8024dd0:	4413      	add	r3, r2
 8024dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dd6:	461a      	mov	r2, r3
 8024dd8:	2320      	movs	r3, #32
 8024dda:	6093      	str	r3, [r2, #8]
 8024ddc:	e072      	b.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8024dde:	68fb      	ldr	r3, [r7, #12]
 8024de0:	015a      	lsls	r2, r3, #5
 8024de2:	693b      	ldr	r3, [r7, #16]
 8024de4:	4413      	add	r3, r2
 8024de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024dea:	689b      	ldr	r3, [r3, #8]
 8024dec:	f003 0308 	and.w	r3, r3, #8
 8024df0:	2b08      	cmp	r3, #8
 8024df2:	d11a      	bne.n	8024e2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8024df4:	68fb      	ldr	r3, [r7, #12]
 8024df6:	015a      	lsls	r2, r3, #5
 8024df8:	693b      	ldr	r3, [r7, #16]
 8024dfa:	4413      	add	r3, r2
 8024dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e00:	461a      	mov	r2, r3
 8024e02:	2308      	movs	r3, #8
 8024e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8024e06:	687a      	ldr	r2, [r7, #4]
 8024e08:	68fb      	ldr	r3, [r7, #12]
 8024e0a:	212c      	movs	r1, #44	; 0x2c
 8024e0c:	fb01 f303 	mul.w	r3, r1, r3
 8024e10:	4413      	add	r3, r2
 8024e12:	3361      	adds	r3, #97	; 0x61
 8024e14:	2205      	movs	r2, #5
 8024e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024e18:	687b      	ldr	r3, [r7, #4]
 8024e1a:	681b      	ldr	r3, [r3, #0]
 8024e1c:	68fa      	ldr	r2, [r7, #12]
 8024e1e:	b2d2      	uxtb	r2, r2
 8024e20:	4611      	mov	r1, r2
 8024e22:	4618      	mov	r0, r3
 8024e24:	f005 fe67 	bl	802aaf6 <USB_HC_Halt>
 8024e28:	e04c      	b.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8024e2a:	68fb      	ldr	r3, [r7, #12]
 8024e2c:	015a      	lsls	r2, r3, #5
 8024e2e:	693b      	ldr	r3, [r7, #16]
 8024e30:	4413      	add	r3, r2
 8024e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e36:	689b      	ldr	r3, [r3, #8]
 8024e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024e40:	d11b      	bne.n	8024e7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8024e42:	68fb      	ldr	r3, [r7, #12]
 8024e44:	015a      	lsls	r2, r3, #5
 8024e46:	693b      	ldr	r3, [r7, #16]
 8024e48:	4413      	add	r3, r2
 8024e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e4e:	461a      	mov	r2, r3
 8024e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8024e56:	687a      	ldr	r2, [r7, #4]
 8024e58:	68fb      	ldr	r3, [r7, #12]
 8024e5a:	212c      	movs	r1, #44	; 0x2c
 8024e5c:	fb01 f303 	mul.w	r3, r1, r3
 8024e60:	4413      	add	r3, r2
 8024e62:	3361      	adds	r3, #97	; 0x61
 8024e64:	2208      	movs	r2, #8
 8024e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	681b      	ldr	r3, [r3, #0]
 8024e6c:	68fa      	ldr	r2, [r7, #12]
 8024e6e:	b2d2      	uxtb	r2, r2
 8024e70:	4611      	mov	r1, r2
 8024e72:	4618      	mov	r0, r3
 8024e74:	f005 fe3f 	bl	802aaf6 <USB_HC_Halt>
 8024e78:	e024      	b.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8024e7a:	68fb      	ldr	r3, [r7, #12]
 8024e7c:	015a      	lsls	r2, r3, #5
 8024e7e:	693b      	ldr	r3, [r7, #16]
 8024e80:	4413      	add	r3, r2
 8024e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e86:	689b      	ldr	r3, [r3, #8]
 8024e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024e8c:	2b80      	cmp	r3, #128	; 0x80
 8024e8e:	d119      	bne.n	8024ec4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	015a      	lsls	r2, r3, #5
 8024e94:	693b      	ldr	r3, [r7, #16]
 8024e96:	4413      	add	r3, r2
 8024e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024e9c:	461a      	mov	r2, r3
 8024e9e:	2380      	movs	r3, #128	; 0x80
 8024ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8024ea2:	687a      	ldr	r2, [r7, #4]
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	212c      	movs	r1, #44	; 0x2c
 8024ea8:	fb01 f303 	mul.w	r3, r1, r3
 8024eac:	4413      	add	r3, r2
 8024eae:	3361      	adds	r3, #97	; 0x61
 8024eb0:	2206      	movs	r2, #6
 8024eb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024eb4:	687b      	ldr	r3, [r7, #4]
 8024eb6:	681b      	ldr	r3, [r3, #0]
 8024eb8:	68fa      	ldr	r2, [r7, #12]
 8024eba:	b2d2      	uxtb	r2, r2
 8024ebc:	4611      	mov	r1, r2
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	f005 fe19 	bl	802aaf6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8024ec4:	68fb      	ldr	r3, [r7, #12]
 8024ec6:	015a      	lsls	r2, r3, #5
 8024ec8:	693b      	ldr	r3, [r7, #16]
 8024eca:	4413      	add	r3, r2
 8024ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ed0:	689b      	ldr	r3, [r3, #8]
 8024ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024eda:	d112      	bne.n	8024f02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024edc:	687b      	ldr	r3, [r7, #4]
 8024ede:	681b      	ldr	r3, [r3, #0]
 8024ee0:	68fa      	ldr	r2, [r7, #12]
 8024ee2:	b2d2      	uxtb	r2, r2
 8024ee4:	4611      	mov	r1, r2
 8024ee6:	4618      	mov	r0, r3
 8024ee8:	f005 fe05 	bl	802aaf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8024eec:	68fb      	ldr	r3, [r7, #12]
 8024eee:	015a      	lsls	r2, r3, #5
 8024ef0:	693b      	ldr	r3, [r7, #16]
 8024ef2:	4413      	add	r3, r2
 8024ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024ef8:	461a      	mov	r2, r3
 8024efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024efe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8024f00:	e24e      	b.n	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8024f02:	68fb      	ldr	r3, [r7, #12]
 8024f04:	015a      	lsls	r2, r3, #5
 8024f06:	693b      	ldr	r3, [r7, #16]
 8024f08:	4413      	add	r3, r2
 8024f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f0e:	689b      	ldr	r3, [r3, #8]
 8024f10:	f003 0301 	and.w	r3, r3, #1
 8024f14:	2b01      	cmp	r3, #1
 8024f16:	f040 80df 	bne.w	80250d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	691b      	ldr	r3, [r3, #16]
 8024f1e:	2b00      	cmp	r3, #0
 8024f20:	d019      	beq.n	8024f56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024f22:	687a      	ldr	r2, [r7, #4]
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	212c      	movs	r1, #44	; 0x2c
 8024f28:	fb01 f303 	mul.w	r3, r1, r3
 8024f2c:	4413      	add	r3, r2
 8024f2e:	3348      	adds	r3, #72	; 0x48
 8024f30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8024f32:	68fb      	ldr	r3, [r7, #12]
 8024f34:	0159      	lsls	r1, r3, #5
 8024f36:	693b      	ldr	r3, [r7, #16]
 8024f38:	440b      	add	r3, r1
 8024f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f3e:	691b      	ldr	r3, [r3, #16]
 8024f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8024f44:	1ad2      	subs	r2, r2, r3
 8024f46:	6879      	ldr	r1, [r7, #4]
 8024f48:	68fb      	ldr	r3, [r7, #12]
 8024f4a:	202c      	movs	r0, #44	; 0x2c
 8024f4c:	fb00 f303 	mul.w	r3, r0, r3
 8024f50:	440b      	add	r3, r1
 8024f52:	3350      	adds	r3, #80	; 0x50
 8024f54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8024f56:	687a      	ldr	r2, [r7, #4]
 8024f58:	68fb      	ldr	r3, [r7, #12]
 8024f5a:	212c      	movs	r1, #44	; 0x2c
 8024f5c:	fb01 f303 	mul.w	r3, r1, r3
 8024f60:	4413      	add	r3, r2
 8024f62:	3361      	adds	r3, #97	; 0x61
 8024f64:	2201      	movs	r2, #1
 8024f66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8024f68:	687a      	ldr	r2, [r7, #4]
 8024f6a:	68fb      	ldr	r3, [r7, #12]
 8024f6c:	212c      	movs	r1, #44	; 0x2c
 8024f6e:	fb01 f303 	mul.w	r3, r1, r3
 8024f72:	4413      	add	r3, r2
 8024f74:	335c      	adds	r3, #92	; 0x5c
 8024f76:	2200      	movs	r2, #0
 8024f78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8024f7a:	68fb      	ldr	r3, [r7, #12]
 8024f7c:	015a      	lsls	r2, r3, #5
 8024f7e:	693b      	ldr	r3, [r7, #16]
 8024f80:	4413      	add	r3, r2
 8024f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024f86:	461a      	mov	r2, r3
 8024f88:	2301      	movs	r3, #1
 8024f8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024f8c:	687a      	ldr	r2, [r7, #4]
 8024f8e:	68fb      	ldr	r3, [r7, #12]
 8024f90:	212c      	movs	r1, #44	; 0x2c
 8024f92:	fb01 f303 	mul.w	r3, r1, r3
 8024f96:	4413      	add	r3, r2
 8024f98:	333f      	adds	r3, #63	; 0x3f
 8024f9a:	781b      	ldrb	r3, [r3, #0]
 8024f9c:	2b00      	cmp	r3, #0
 8024f9e:	d009      	beq.n	8024fb4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8024fa0:	687a      	ldr	r2, [r7, #4]
 8024fa2:	68fb      	ldr	r3, [r7, #12]
 8024fa4:	212c      	movs	r1, #44	; 0x2c
 8024fa6:	fb01 f303 	mul.w	r3, r1, r3
 8024faa:	4413      	add	r3, r2
 8024fac:	333f      	adds	r3, #63	; 0x3f
 8024fae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8024fb0:	2b02      	cmp	r3, #2
 8024fb2:	d111      	bne.n	8024fd8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	681b      	ldr	r3, [r3, #0]
 8024fb8:	68fa      	ldr	r2, [r7, #12]
 8024fba:	b2d2      	uxtb	r2, r2
 8024fbc:	4611      	mov	r1, r2
 8024fbe:	4618      	mov	r0, r3
 8024fc0:	f005 fd99 	bl	802aaf6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8024fc4:	68fb      	ldr	r3, [r7, #12]
 8024fc6:	015a      	lsls	r2, r3, #5
 8024fc8:	693b      	ldr	r3, [r7, #16]
 8024fca:	4413      	add	r3, r2
 8024fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8024fd0:	461a      	mov	r2, r3
 8024fd2:	2310      	movs	r3, #16
 8024fd4:	6093      	str	r3, [r2, #8]
 8024fd6:	e03a      	b.n	802504e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024fd8:	687a      	ldr	r2, [r7, #4]
 8024fda:	68fb      	ldr	r3, [r7, #12]
 8024fdc:	212c      	movs	r1, #44	; 0x2c
 8024fde:	fb01 f303 	mul.w	r3, r1, r3
 8024fe2:	4413      	add	r3, r2
 8024fe4:	333f      	adds	r3, #63	; 0x3f
 8024fe6:	781b      	ldrb	r3, [r3, #0]
 8024fe8:	2b03      	cmp	r3, #3
 8024fea:	d009      	beq.n	8025000 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8024fec:	687a      	ldr	r2, [r7, #4]
 8024fee:	68fb      	ldr	r3, [r7, #12]
 8024ff0:	212c      	movs	r1, #44	; 0x2c
 8024ff2:	fb01 f303 	mul.w	r3, r1, r3
 8024ff6:	4413      	add	r3, r2
 8024ff8:	333f      	adds	r3, #63	; 0x3f
 8024ffa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8024ffc:	2b01      	cmp	r3, #1
 8024ffe:	d126      	bne.n	802504e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025000:	68fb      	ldr	r3, [r7, #12]
 8025002:	015a      	lsls	r2, r3, #5
 8025004:	693b      	ldr	r3, [r7, #16]
 8025006:	4413      	add	r3, r2
 8025008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802500c:	681b      	ldr	r3, [r3, #0]
 802500e:	68fa      	ldr	r2, [r7, #12]
 8025010:	0151      	lsls	r1, r2, #5
 8025012:	693a      	ldr	r2, [r7, #16]
 8025014:	440a      	add	r2, r1
 8025016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802501a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802501e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025020:	687a      	ldr	r2, [r7, #4]
 8025022:	68fb      	ldr	r3, [r7, #12]
 8025024:	212c      	movs	r1, #44	; 0x2c
 8025026:	fb01 f303 	mul.w	r3, r1, r3
 802502a:	4413      	add	r3, r2
 802502c:	3360      	adds	r3, #96	; 0x60
 802502e:	2201      	movs	r2, #1
 8025030:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025032:	68fb      	ldr	r3, [r7, #12]
 8025034:	b2d9      	uxtb	r1, r3
 8025036:	687a      	ldr	r2, [r7, #4]
 8025038:	68fb      	ldr	r3, [r7, #12]
 802503a:	202c      	movs	r0, #44	; 0x2c
 802503c:	fb00 f303 	mul.w	r3, r0, r3
 8025040:	4413      	add	r3, r2
 8025042:	3360      	adds	r3, #96	; 0x60
 8025044:	781b      	ldrb	r3, [r3, #0]
 8025046:	461a      	mov	r2, r3
 8025048:	6878      	ldr	r0, [r7, #4]
 802504a:	f007 fff3 	bl	802d034 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	691b      	ldr	r3, [r3, #16]
 8025052:	2b01      	cmp	r3, #1
 8025054:	d12b      	bne.n	80250ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025056:	687a      	ldr	r2, [r7, #4]
 8025058:	68fb      	ldr	r3, [r7, #12]
 802505a:	212c      	movs	r1, #44	; 0x2c
 802505c:	fb01 f303 	mul.w	r3, r1, r3
 8025060:	4413      	add	r3, r2
 8025062:	3348      	adds	r3, #72	; 0x48
 8025064:	681b      	ldr	r3, [r3, #0]
 8025066:	6879      	ldr	r1, [r7, #4]
 8025068:	68fa      	ldr	r2, [r7, #12]
 802506a:	202c      	movs	r0, #44	; 0x2c
 802506c:	fb00 f202 	mul.w	r2, r0, r2
 8025070:	440a      	add	r2, r1
 8025072:	3240      	adds	r2, #64	; 0x40
 8025074:	8812      	ldrh	r2, [r2, #0]
 8025076:	fbb3 f3f2 	udiv	r3, r3, r2
 802507a:	f003 0301 	and.w	r3, r3, #1
 802507e:	2b00      	cmp	r3, #0
 8025080:	f000 818e 	beq.w	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025084:	687a      	ldr	r2, [r7, #4]
 8025086:	68fb      	ldr	r3, [r7, #12]
 8025088:	212c      	movs	r1, #44	; 0x2c
 802508a:	fb01 f303 	mul.w	r3, r1, r3
 802508e:	4413      	add	r3, r2
 8025090:	3354      	adds	r3, #84	; 0x54
 8025092:	781b      	ldrb	r3, [r3, #0]
 8025094:	f083 0301 	eor.w	r3, r3, #1
 8025098:	b2d8      	uxtb	r0, r3
 802509a:	687a      	ldr	r2, [r7, #4]
 802509c:	68fb      	ldr	r3, [r7, #12]
 802509e:	212c      	movs	r1, #44	; 0x2c
 80250a0:	fb01 f303 	mul.w	r3, r1, r3
 80250a4:	4413      	add	r3, r2
 80250a6:	3354      	adds	r3, #84	; 0x54
 80250a8:	4602      	mov	r2, r0
 80250aa:	701a      	strb	r2, [r3, #0]
}
 80250ac:	e178      	b.n	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80250ae:	687a      	ldr	r2, [r7, #4]
 80250b0:	68fb      	ldr	r3, [r7, #12]
 80250b2:	212c      	movs	r1, #44	; 0x2c
 80250b4:	fb01 f303 	mul.w	r3, r1, r3
 80250b8:	4413      	add	r3, r2
 80250ba:	3354      	adds	r3, #84	; 0x54
 80250bc:	781b      	ldrb	r3, [r3, #0]
 80250be:	f083 0301 	eor.w	r3, r3, #1
 80250c2:	b2d8      	uxtb	r0, r3
 80250c4:	687a      	ldr	r2, [r7, #4]
 80250c6:	68fb      	ldr	r3, [r7, #12]
 80250c8:	212c      	movs	r1, #44	; 0x2c
 80250ca:	fb01 f303 	mul.w	r3, r1, r3
 80250ce:	4413      	add	r3, r2
 80250d0:	3354      	adds	r3, #84	; 0x54
 80250d2:	4602      	mov	r2, r0
 80250d4:	701a      	strb	r2, [r3, #0]
}
 80250d6:	e163      	b.n	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80250d8:	68fb      	ldr	r3, [r7, #12]
 80250da:	015a      	lsls	r2, r3, #5
 80250dc:	693b      	ldr	r3, [r7, #16]
 80250de:	4413      	add	r3, r2
 80250e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80250e4:	689b      	ldr	r3, [r3, #8]
 80250e6:	f003 0302 	and.w	r3, r3, #2
 80250ea:	2b02      	cmp	r3, #2
 80250ec:	f040 80f6 	bne.w	80252dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80250f0:	687a      	ldr	r2, [r7, #4]
 80250f2:	68fb      	ldr	r3, [r7, #12]
 80250f4:	212c      	movs	r1, #44	; 0x2c
 80250f6:	fb01 f303 	mul.w	r3, r1, r3
 80250fa:	4413      	add	r3, r2
 80250fc:	3361      	adds	r3, #97	; 0x61
 80250fe:	781b      	ldrb	r3, [r3, #0]
 8025100:	2b01      	cmp	r3, #1
 8025102:	d109      	bne.n	8025118 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025104:	687a      	ldr	r2, [r7, #4]
 8025106:	68fb      	ldr	r3, [r7, #12]
 8025108:	212c      	movs	r1, #44	; 0x2c
 802510a:	fb01 f303 	mul.w	r3, r1, r3
 802510e:	4413      	add	r3, r2
 8025110:	3360      	adds	r3, #96	; 0x60
 8025112:	2201      	movs	r2, #1
 8025114:	701a      	strb	r2, [r3, #0]
 8025116:	e0c9      	b.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025118:	687a      	ldr	r2, [r7, #4]
 802511a:	68fb      	ldr	r3, [r7, #12]
 802511c:	212c      	movs	r1, #44	; 0x2c
 802511e:	fb01 f303 	mul.w	r3, r1, r3
 8025122:	4413      	add	r3, r2
 8025124:	3361      	adds	r3, #97	; 0x61
 8025126:	781b      	ldrb	r3, [r3, #0]
 8025128:	2b05      	cmp	r3, #5
 802512a:	d109      	bne.n	8025140 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 802512c:	687a      	ldr	r2, [r7, #4]
 802512e:	68fb      	ldr	r3, [r7, #12]
 8025130:	212c      	movs	r1, #44	; 0x2c
 8025132:	fb01 f303 	mul.w	r3, r1, r3
 8025136:	4413      	add	r3, r2
 8025138:	3360      	adds	r3, #96	; 0x60
 802513a:	2205      	movs	r2, #5
 802513c:	701a      	strb	r2, [r3, #0]
 802513e:	e0b5      	b.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025140:	687a      	ldr	r2, [r7, #4]
 8025142:	68fb      	ldr	r3, [r7, #12]
 8025144:	212c      	movs	r1, #44	; 0x2c
 8025146:	fb01 f303 	mul.w	r3, r1, r3
 802514a:	4413      	add	r3, r2
 802514c:	3361      	adds	r3, #97	; 0x61
 802514e:	781b      	ldrb	r3, [r3, #0]
 8025150:	2b06      	cmp	r3, #6
 8025152:	d009      	beq.n	8025168 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025154:	687a      	ldr	r2, [r7, #4]
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	212c      	movs	r1, #44	; 0x2c
 802515a:	fb01 f303 	mul.w	r3, r1, r3
 802515e:	4413      	add	r3, r2
 8025160:	3361      	adds	r3, #97	; 0x61
 8025162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025164:	2b08      	cmp	r3, #8
 8025166:	d150      	bne.n	802520a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025168:	687a      	ldr	r2, [r7, #4]
 802516a:	68fb      	ldr	r3, [r7, #12]
 802516c:	212c      	movs	r1, #44	; 0x2c
 802516e:	fb01 f303 	mul.w	r3, r1, r3
 8025172:	4413      	add	r3, r2
 8025174:	335c      	adds	r3, #92	; 0x5c
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	1c5a      	adds	r2, r3, #1
 802517a:	6879      	ldr	r1, [r7, #4]
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	202c      	movs	r0, #44	; 0x2c
 8025180:	fb00 f303 	mul.w	r3, r0, r3
 8025184:	440b      	add	r3, r1
 8025186:	335c      	adds	r3, #92	; 0x5c
 8025188:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802518a:	687a      	ldr	r2, [r7, #4]
 802518c:	68fb      	ldr	r3, [r7, #12]
 802518e:	212c      	movs	r1, #44	; 0x2c
 8025190:	fb01 f303 	mul.w	r3, r1, r3
 8025194:	4413      	add	r3, r2
 8025196:	335c      	adds	r3, #92	; 0x5c
 8025198:	681b      	ldr	r3, [r3, #0]
 802519a:	2b02      	cmp	r3, #2
 802519c:	d912      	bls.n	80251c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 802519e:	687a      	ldr	r2, [r7, #4]
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	212c      	movs	r1, #44	; 0x2c
 80251a4:	fb01 f303 	mul.w	r3, r1, r3
 80251a8:	4413      	add	r3, r2
 80251aa:	335c      	adds	r3, #92	; 0x5c
 80251ac:	2200      	movs	r2, #0
 80251ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80251b0:	687a      	ldr	r2, [r7, #4]
 80251b2:	68fb      	ldr	r3, [r7, #12]
 80251b4:	212c      	movs	r1, #44	; 0x2c
 80251b6:	fb01 f303 	mul.w	r3, r1, r3
 80251ba:	4413      	add	r3, r2
 80251bc:	3360      	adds	r3, #96	; 0x60
 80251be:	2204      	movs	r2, #4
 80251c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80251c2:	e073      	b.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80251c4:	687a      	ldr	r2, [r7, #4]
 80251c6:	68fb      	ldr	r3, [r7, #12]
 80251c8:	212c      	movs	r1, #44	; 0x2c
 80251ca:	fb01 f303 	mul.w	r3, r1, r3
 80251ce:	4413      	add	r3, r2
 80251d0:	3360      	adds	r3, #96	; 0x60
 80251d2:	2202      	movs	r2, #2
 80251d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80251d6:	68fb      	ldr	r3, [r7, #12]
 80251d8:	015a      	lsls	r2, r3, #5
 80251da:	693b      	ldr	r3, [r7, #16]
 80251dc:	4413      	add	r3, r2
 80251de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80251e2:	681b      	ldr	r3, [r3, #0]
 80251e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80251e6:	68bb      	ldr	r3, [r7, #8]
 80251e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80251ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80251ee:	68bb      	ldr	r3, [r7, #8]
 80251f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80251f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	015a      	lsls	r2, r3, #5
 80251fa:	693b      	ldr	r3, [r7, #16]
 80251fc:	4413      	add	r3, r2
 80251fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025202:	461a      	mov	r2, r3
 8025204:	68bb      	ldr	r3, [r7, #8]
 8025206:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025208:	e050      	b.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 802520a:	687a      	ldr	r2, [r7, #4]
 802520c:	68fb      	ldr	r3, [r7, #12]
 802520e:	212c      	movs	r1, #44	; 0x2c
 8025210:	fb01 f303 	mul.w	r3, r1, r3
 8025214:	4413      	add	r3, r2
 8025216:	3361      	adds	r3, #97	; 0x61
 8025218:	781b      	ldrb	r3, [r3, #0]
 802521a:	2b03      	cmp	r3, #3
 802521c:	d122      	bne.n	8025264 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802521e:	687a      	ldr	r2, [r7, #4]
 8025220:	68fb      	ldr	r3, [r7, #12]
 8025222:	212c      	movs	r1, #44	; 0x2c
 8025224:	fb01 f303 	mul.w	r3, r1, r3
 8025228:	4413      	add	r3, r2
 802522a:	3360      	adds	r3, #96	; 0x60
 802522c:	2202      	movs	r2, #2
 802522e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025230:	68fb      	ldr	r3, [r7, #12]
 8025232:	015a      	lsls	r2, r3, #5
 8025234:	693b      	ldr	r3, [r7, #16]
 8025236:	4413      	add	r3, r2
 8025238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802523c:	681b      	ldr	r3, [r3, #0]
 802523e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025240:	68bb      	ldr	r3, [r7, #8]
 8025242:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025246:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025248:	68bb      	ldr	r3, [r7, #8]
 802524a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802524e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025250:	68fb      	ldr	r3, [r7, #12]
 8025252:	015a      	lsls	r2, r3, #5
 8025254:	693b      	ldr	r3, [r7, #16]
 8025256:	4413      	add	r3, r2
 8025258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802525c:	461a      	mov	r2, r3
 802525e:	68bb      	ldr	r3, [r7, #8]
 8025260:	6013      	str	r3, [r2, #0]
 8025262:	e023      	b.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025264:	687a      	ldr	r2, [r7, #4]
 8025266:	68fb      	ldr	r3, [r7, #12]
 8025268:	212c      	movs	r1, #44	; 0x2c
 802526a:	fb01 f303 	mul.w	r3, r1, r3
 802526e:	4413      	add	r3, r2
 8025270:	3361      	adds	r3, #97	; 0x61
 8025272:	781b      	ldrb	r3, [r3, #0]
 8025274:	2b07      	cmp	r3, #7
 8025276:	d119      	bne.n	80252ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025278:	687a      	ldr	r2, [r7, #4]
 802527a:	68fb      	ldr	r3, [r7, #12]
 802527c:	212c      	movs	r1, #44	; 0x2c
 802527e:	fb01 f303 	mul.w	r3, r1, r3
 8025282:	4413      	add	r3, r2
 8025284:	335c      	adds	r3, #92	; 0x5c
 8025286:	681b      	ldr	r3, [r3, #0]
 8025288:	1c5a      	adds	r2, r3, #1
 802528a:	6879      	ldr	r1, [r7, #4]
 802528c:	68fb      	ldr	r3, [r7, #12]
 802528e:	202c      	movs	r0, #44	; 0x2c
 8025290:	fb00 f303 	mul.w	r3, r0, r3
 8025294:	440b      	add	r3, r1
 8025296:	335c      	adds	r3, #92	; 0x5c
 8025298:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 802529a:	687a      	ldr	r2, [r7, #4]
 802529c:	68fb      	ldr	r3, [r7, #12]
 802529e:	212c      	movs	r1, #44	; 0x2c
 80252a0:	fb01 f303 	mul.w	r3, r1, r3
 80252a4:	4413      	add	r3, r2
 80252a6:	3360      	adds	r3, #96	; 0x60
 80252a8:	2204      	movs	r2, #4
 80252aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80252ac:	68fb      	ldr	r3, [r7, #12]
 80252ae:	015a      	lsls	r2, r3, #5
 80252b0:	693b      	ldr	r3, [r7, #16]
 80252b2:	4413      	add	r3, r2
 80252b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252b8:	461a      	mov	r2, r3
 80252ba:	2302      	movs	r3, #2
 80252bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80252be:	68fb      	ldr	r3, [r7, #12]
 80252c0:	b2d9      	uxtb	r1, r3
 80252c2:	687a      	ldr	r2, [r7, #4]
 80252c4:	68fb      	ldr	r3, [r7, #12]
 80252c6:	202c      	movs	r0, #44	; 0x2c
 80252c8:	fb00 f303 	mul.w	r3, r0, r3
 80252cc:	4413      	add	r3, r2
 80252ce:	3360      	adds	r3, #96	; 0x60
 80252d0:	781b      	ldrb	r3, [r3, #0]
 80252d2:	461a      	mov	r2, r3
 80252d4:	6878      	ldr	r0, [r7, #4]
 80252d6:	f007 fead 	bl	802d034 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80252da:	e061      	b.n	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80252dc:	68fb      	ldr	r3, [r7, #12]
 80252de:	015a      	lsls	r2, r3, #5
 80252e0:	693b      	ldr	r3, [r7, #16]
 80252e2:	4413      	add	r3, r2
 80252e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80252e8:	689b      	ldr	r3, [r3, #8]
 80252ea:	f003 0310 	and.w	r3, r3, #16
 80252ee:	2b10      	cmp	r3, #16
 80252f0:	d156      	bne.n	80253a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80252f2:	687a      	ldr	r2, [r7, #4]
 80252f4:	68fb      	ldr	r3, [r7, #12]
 80252f6:	212c      	movs	r1, #44	; 0x2c
 80252f8:	fb01 f303 	mul.w	r3, r1, r3
 80252fc:	4413      	add	r3, r2
 80252fe:	333f      	adds	r3, #63	; 0x3f
 8025300:	781b      	ldrb	r3, [r3, #0]
 8025302:	2b03      	cmp	r3, #3
 8025304:	d111      	bne.n	802532a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025306:	687a      	ldr	r2, [r7, #4]
 8025308:	68fb      	ldr	r3, [r7, #12]
 802530a:	212c      	movs	r1, #44	; 0x2c
 802530c:	fb01 f303 	mul.w	r3, r1, r3
 8025310:	4413      	add	r3, r2
 8025312:	335c      	adds	r3, #92	; 0x5c
 8025314:	2200      	movs	r2, #0
 8025316:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	681b      	ldr	r3, [r3, #0]
 802531c:	68fa      	ldr	r2, [r7, #12]
 802531e:	b2d2      	uxtb	r2, r2
 8025320:	4611      	mov	r1, r2
 8025322:	4618      	mov	r0, r3
 8025324:	f005 fbe7 	bl	802aaf6 <USB_HC_Halt>
 8025328:	e031      	b.n	802538e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802532a:	687a      	ldr	r2, [r7, #4]
 802532c:	68fb      	ldr	r3, [r7, #12]
 802532e:	212c      	movs	r1, #44	; 0x2c
 8025330:	fb01 f303 	mul.w	r3, r1, r3
 8025334:	4413      	add	r3, r2
 8025336:	333f      	adds	r3, #63	; 0x3f
 8025338:	781b      	ldrb	r3, [r3, #0]
 802533a:	2b00      	cmp	r3, #0
 802533c:	d009      	beq.n	8025352 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 802533e:	687a      	ldr	r2, [r7, #4]
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	212c      	movs	r1, #44	; 0x2c
 8025344:	fb01 f303 	mul.w	r3, r1, r3
 8025348:	4413      	add	r3, r2
 802534a:	333f      	adds	r3, #63	; 0x3f
 802534c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 802534e:	2b02      	cmp	r3, #2
 8025350:	d11d      	bne.n	802538e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025352:	687a      	ldr	r2, [r7, #4]
 8025354:	68fb      	ldr	r3, [r7, #12]
 8025356:	212c      	movs	r1, #44	; 0x2c
 8025358:	fb01 f303 	mul.w	r3, r1, r3
 802535c:	4413      	add	r3, r2
 802535e:	335c      	adds	r3, #92	; 0x5c
 8025360:	2200      	movs	r2, #0
 8025362:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025364:	687b      	ldr	r3, [r7, #4]
 8025366:	691b      	ldr	r3, [r3, #16]
 8025368:	2b00      	cmp	r3, #0
 802536a:	d110      	bne.n	802538e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 802536c:	687a      	ldr	r2, [r7, #4]
 802536e:	68fb      	ldr	r3, [r7, #12]
 8025370:	212c      	movs	r1, #44	; 0x2c
 8025372:	fb01 f303 	mul.w	r3, r1, r3
 8025376:	4413      	add	r3, r2
 8025378:	3361      	adds	r3, #97	; 0x61
 802537a:	2203      	movs	r2, #3
 802537c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802537e:	687b      	ldr	r3, [r7, #4]
 8025380:	681b      	ldr	r3, [r3, #0]
 8025382:	68fa      	ldr	r2, [r7, #12]
 8025384:	b2d2      	uxtb	r2, r2
 8025386:	4611      	mov	r1, r2
 8025388:	4618      	mov	r0, r3
 802538a:	f005 fbb4 	bl	802aaf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 802538e:	68fb      	ldr	r3, [r7, #12]
 8025390:	015a      	lsls	r2, r3, #5
 8025392:	693b      	ldr	r3, [r7, #16]
 8025394:	4413      	add	r3, r2
 8025396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802539a:	461a      	mov	r2, r3
 802539c:	2310      	movs	r3, #16
 802539e:	6093      	str	r3, [r2, #8]
}
 80253a0:	bf00      	nop
 80253a2:	3718      	adds	r7, #24
 80253a4:	46bd      	mov	sp, r7
 80253a6:	bd80      	pop	{r7, pc}

080253a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80253a8:	b580      	push	{r7, lr}
 80253aa:	b088      	sub	sp, #32
 80253ac:	af00      	add	r7, sp, #0
 80253ae:	6078      	str	r0, [r7, #4]
 80253b0:	460b      	mov	r3, r1
 80253b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80253b4:	687b      	ldr	r3, [r7, #4]
 80253b6:	681b      	ldr	r3, [r3, #0]
 80253b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80253ba:	69fb      	ldr	r3, [r7, #28]
 80253bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80253be:	78fb      	ldrb	r3, [r7, #3]
 80253c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80253c2:	697b      	ldr	r3, [r7, #20]
 80253c4:	015a      	lsls	r2, r3, #5
 80253c6:	69bb      	ldr	r3, [r7, #24]
 80253c8:	4413      	add	r3, r2
 80253ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253ce:	689b      	ldr	r3, [r3, #8]
 80253d0:	f003 0304 	and.w	r3, r3, #4
 80253d4:	2b04      	cmp	r3, #4
 80253d6:	d11a      	bne.n	802540e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80253d8:	697b      	ldr	r3, [r7, #20]
 80253da:	015a      	lsls	r2, r3, #5
 80253dc:	69bb      	ldr	r3, [r7, #24]
 80253de:	4413      	add	r3, r2
 80253e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80253e4:	461a      	mov	r2, r3
 80253e6:	2304      	movs	r3, #4
 80253e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80253ea:	687a      	ldr	r2, [r7, #4]
 80253ec:	697b      	ldr	r3, [r7, #20]
 80253ee:	212c      	movs	r1, #44	; 0x2c
 80253f0:	fb01 f303 	mul.w	r3, r1, r3
 80253f4:	4413      	add	r3, r2
 80253f6:	3361      	adds	r3, #97	; 0x61
 80253f8:	2206      	movs	r2, #6
 80253fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	697a      	ldr	r2, [r7, #20]
 8025402:	b2d2      	uxtb	r2, r2
 8025404:	4611      	mov	r1, r2
 8025406:	4618      	mov	r0, r3
 8025408:	f005 fb75 	bl	802aaf6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 802540c:	e331      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 802540e:	697b      	ldr	r3, [r7, #20]
 8025410:	015a      	lsls	r2, r3, #5
 8025412:	69bb      	ldr	r3, [r7, #24]
 8025414:	4413      	add	r3, r2
 8025416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802541a:	689b      	ldr	r3, [r3, #8]
 802541c:	f003 0320 	and.w	r3, r3, #32
 8025420:	2b20      	cmp	r3, #32
 8025422:	d12e      	bne.n	8025482 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025424:	697b      	ldr	r3, [r7, #20]
 8025426:	015a      	lsls	r2, r3, #5
 8025428:	69bb      	ldr	r3, [r7, #24]
 802542a:	4413      	add	r3, r2
 802542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025430:	461a      	mov	r2, r3
 8025432:	2320      	movs	r3, #32
 8025434:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025436:	687a      	ldr	r2, [r7, #4]
 8025438:	697b      	ldr	r3, [r7, #20]
 802543a:	212c      	movs	r1, #44	; 0x2c
 802543c:	fb01 f303 	mul.w	r3, r1, r3
 8025440:	4413      	add	r3, r2
 8025442:	333d      	adds	r3, #61	; 0x3d
 8025444:	781b      	ldrb	r3, [r3, #0]
 8025446:	2b01      	cmp	r3, #1
 8025448:	f040 8313 	bne.w	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 802544c:	687a      	ldr	r2, [r7, #4]
 802544e:	697b      	ldr	r3, [r7, #20]
 8025450:	212c      	movs	r1, #44	; 0x2c
 8025452:	fb01 f303 	mul.w	r3, r1, r3
 8025456:	4413      	add	r3, r2
 8025458:	333d      	adds	r3, #61	; 0x3d
 802545a:	2200      	movs	r2, #0
 802545c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802545e:	687a      	ldr	r2, [r7, #4]
 8025460:	697b      	ldr	r3, [r7, #20]
 8025462:	212c      	movs	r1, #44	; 0x2c
 8025464:	fb01 f303 	mul.w	r3, r1, r3
 8025468:	4413      	add	r3, r2
 802546a:	3360      	adds	r3, #96	; 0x60
 802546c:	2202      	movs	r2, #2
 802546e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	681b      	ldr	r3, [r3, #0]
 8025474:	697a      	ldr	r2, [r7, #20]
 8025476:	b2d2      	uxtb	r2, r2
 8025478:	4611      	mov	r1, r2
 802547a:	4618      	mov	r0, r3
 802547c:	f005 fb3b 	bl	802aaf6 <USB_HC_Halt>
}
 8025480:	e2f7      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025482:	697b      	ldr	r3, [r7, #20]
 8025484:	015a      	lsls	r2, r3, #5
 8025486:	69bb      	ldr	r3, [r7, #24]
 8025488:	4413      	add	r3, r2
 802548a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802548e:	689b      	ldr	r3, [r3, #8]
 8025490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025498:	d112      	bne.n	80254c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 802549a:	697b      	ldr	r3, [r7, #20]
 802549c:	015a      	lsls	r2, r3, #5
 802549e:	69bb      	ldr	r3, [r7, #24]
 80254a0:	4413      	add	r3, r2
 80254a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254a6:	461a      	mov	r2, r3
 80254a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80254ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80254ae:	687b      	ldr	r3, [r7, #4]
 80254b0:	681b      	ldr	r3, [r3, #0]
 80254b2:	697a      	ldr	r2, [r7, #20]
 80254b4:	b2d2      	uxtb	r2, r2
 80254b6:	4611      	mov	r1, r2
 80254b8:	4618      	mov	r0, r3
 80254ba:	f005 fb1c 	bl	802aaf6 <USB_HC_Halt>
}
 80254be:	e2d8      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80254c0:	697b      	ldr	r3, [r7, #20]
 80254c2:	015a      	lsls	r2, r3, #5
 80254c4:	69bb      	ldr	r3, [r7, #24]
 80254c6:	4413      	add	r3, r2
 80254c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254cc:	689b      	ldr	r3, [r3, #8]
 80254ce:	f003 0301 	and.w	r3, r3, #1
 80254d2:	2b01      	cmp	r3, #1
 80254d4:	d140      	bne.n	8025558 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80254d6:	687a      	ldr	r2, [r7, #4]
 80254d8:	697b      	ldr	r3, [r7, #20]
 80254da:	212c      	movs	r1, #44	; 0x2c
 80254dc:	fb01 f303 	mul.w	r3, r1, r3
 80254e0:	4413      	add	r3, r2
 80254e2:	335c      	adds	r3, #92	; 0x5c
 80254e4:	2200      	movs	r2, #0
 80254e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80254e8:	697b      	ldr	r3, [r7, #20]
 80254ea:	015a      	lsls	r2, r3, #5
 80254ec:	69bb      	ldr	r3, [r7, #24]
 80254ee:	4413      	add	r3, r2
 80254f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80254f4:	689b      	ldr	r3, [r3, #8]
 80254f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80254fa:	2b40      	cmp	r3, #64	; 0x40
 80254fc:	d111      	bne.n	8025522 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80254fe:	687a      	ldr	r2, [r7, #4]
 8025500:	697b      	ldr	r3, [r7, #20]
 8025502:	212c      	movs	r1, #44	; 0x2c
 8025504:	fb01 f303 	mul.w	r3, r1, r3
 8025508:	4413      	add	r3, r2
 802550a:	333d      	adds	r3, #61	; 0x3d
 802550c:	2201      	movs	r2, #1
 802550e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8025510:	697b      	ldr	r3, [r7, #20]
 8025512:	015a      	lsls	r2, r3, #5
 8025514:	69bb      	ldr	r3, [r7, #24]
 8025516:	4413      	add	r3, r2
 8025518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802551c:	461a      	mov	r2, r3
 802551e:	2340      	movs	r3, #64	; 0x40
 8025520:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025522:	697b      	ldr	r3, [r7, #20]
 8025524:	015a      	lsls	r2, r3, #5
 8025526:	69bb      	ldr	r3, [r7, #24]
 8025528:	4413      	add	r3, r2
 802552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802552e:	461a      	mov	r2, r3
 8025530:	2301      	movs	r3, #1
 8025532:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025534:	687a      	ldr	r2, [r7, #4]
 8025536:	697b      	ldr	r3, [r7, #20]
 8025538:	212c      	movs	r1, #44	; 0x2c
 802553a:	fb01 f303 	mul.w	r3, r1, r3
 802553e:	4413      	add	r3, r2
 8025540:	3361      	adds	r3, #97	; 0x61
 8025542:	2201      	movs	r2, #1
 8025544:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025546:	687b      	ldr	r3, [r7, #4]
 8025548:	681b      	ldr	r3, [r3, #0]
 802554a:	697a      	ldr	r2, [r7, #20]
 802554c:	b2d2      	uxtb	r2, r2
 802554e:	4611      	mov	r1, r2
 8025550:	4618      	mov	r0, r3
 8025552:	f005 fad0 	bl	802aaf6 <USB_HC_Halt>
}
 8025556:	e28c      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025558:	697b      	ldr	r3, [r7, #20]
 802555a:	015a      	lsls	r2, r3, #5
 802555c:	69bb      	ldr	r3, [r7, #24]
 802555e:	4413      	add	r3, r2
 8025560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025564:	689b      	ldr	r3, [r3, #8]
 8025566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802556a:	2b40      	cmp	r3, #64	; 0x40
 802556c:	d12c      	bne.n	80255c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802556e:	687a      	ldr	r2, [r7, #4]
 8025570:	697b      	ldr	r3, [r7, #20]
 8025572:	212c      	movs	r1, #44	; 0x2c
 8025574:	fb01 f303 	mul.w	r3, r1, r3
 8025578:	4413      	add	r3, r2
 802557a:	3361      	adds	r3, #97	; 0x61
 802557c:	2204      	movs	r2, #4
 802557e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8025580:	687a      	ldr	r2, [r7, #4]
 8025582:	697b      	ldr	r3, [r7, #20]
 8025584:	212c      	movs	r1, #44	; 0x2c
 8025586:	fb01 f303 	mul.w	r3, r1, r3
 802558a:	4413      	add	r3, r2
 802558c:	333d      	adds	r3, #61	; 0x3d
 802558e:	2201      	movs	r2, #1
 8025590:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025592:	687a      	ldr	r2, [r7, #4]
 8025594:	697b      	ldr	r3, [r7, #20]
 8025596:	212c      	movs	r1, #44	; 0x2c
 8025598:	fb01 f303 	mul.w	r3, r1, r3
 802559c:	4413      	add	r3, r2
 802559e:	335c      	adds	r3, #92	; 0x5c
 80255a0:	2200      	movs	r2, #0
 80255a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	697a      	ldr	r2, [r7, #20]
 80255aa:	b2d2      	uxtb	r2, r2
 80255ac:	4611      	mov	r1, r2
 80255ae:	4618      	mov	r0, r3
 80255b0:	f005 faa1 	bl	802aaf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80255b4:	697b      	ldr	r3, [r7, #20]
 80255b6:	015a      	lsls	r2, r3, #5
 80255b8:	69bb      	ldr	r3, [r7, #24]
 80255ba:	4413      	add	r3, r2
 80255bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255c0:	461a      	mov	r2, r3
 80255c2:	2340      	movs	r3, #64	; 0x40
 80255c4:	6093      	str	r3, [r2, #8]
}
 80255c6:	e254      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80255c8:	697b      	ldr	r3, [r7, #20]
 80255ca:	015a      	lsls	r2, r3, #5
 80255cc:	69bb      	ldr	r3, [r7, #24]
 80255ce:	4413      	add	r3, r2
 80255d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255d4:	689b      	ldr	r3, [r3, #8]
 80255d6:	f003 0308 	and.w	r3, r3, #8
 80255da:	2b08      	cmp	r3, #8
 80255dc:	d11a      	bne.n	8025614 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80255de:	697b      	ldr	r3, [r7, #20]
 80255e0:	015a      	lsls	r2, r3, #5
 80255e2:	69bb      	ldr	r3, [r7, #24]
 80255e4:	4413      	add	r3, r2
 80255e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255ea:	461a      	mov	r2, r3
 80255ec:	2308      	movs	r3, #8
 80255ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80255f0:	687a      	ldr	r2, [r7, #4]
 80255f2:	697b      	ldr	r3, [r7, #20]
 80255f4:	212c      	movs	r1, #44	; 0x2c
 80255f6:	fb01 f303 	mul.w	r3, r1, r3
 80255fa:	4413      	add	r3, r2
 80255fc:	3361      	adds	r3, #97	; 0x61
 80255fe:	2205      	movs	r2, #5
 8025600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	681b      	ldr	r3, [r3, #0]
 8025606:	697a      	ldr	r2, [r7, #20]
 8025608:	b2d2      	uxtb	r2, r2
 802560a:	4611      	mov	r1, r2
 802560c:	4618      	mov	r0, r3
 802560e:	f005 fa72 	bl	802aaf6 <USB_HC_Halt>
}
 8025612:	e22e      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025614:	697b      	ldr	r3, [r7, #20]
 8025616:	015a      	lsls	r2, r3, #5
 8025618:	69bb      	ldr	r3, [r7, #24]
 802561a:	4413      	add	r3, r2
 802561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025620:	689b      	ldr	r3, [r3, #8]
 8025622:	f003 0310 	and.w	r3, r3, #16
 8025626:	2b10      	cmp	r3, #16
 8025628:	d140      	bne.n	80256ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 802562a:	687a      	ldr	r2, [r7, #4]
 802562c:	697b      	ldr	r3, [r7, #20]
 802562e:	212c      	movs	r1, #44	; 0x2c
 8025630:	fb01 f303 	mul.w	r3, r1, r3
 8025634:	4413      	add	r3, r2
 8025636:	335c      	adds	r3, #92	; 0x5c
 8025638:	2200      	movs	r2, #0
 802563a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 802563c:	687a      	ldr	r2, [r7, #4]
 802563e:	697b      	ldr	r3, [r7, #20]
 8025640:	212c      	movs	r1, #44	; 0x2c
 8025642:	fb01 f303 	mul.w	r3, r1, r3
 8025646:	4413      	add	r3, r2
 8025648:	3361      	adds	r3, #97	; 0x61
 802564a:	2203      	movs	r2, #3
 802564c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802564e:	687a      	ldr	r2, [r7, #4]
 8025650:	697b      	ldr	r3, [r7, #20]
 8025652:	212c      	movs	r1, #44	; 0x2c
 8025654:	fb01 f303 	mul.w	r3, r1, r3
 8025658:	4413      	add	r3, r2
 802565a:	333d      	adds	r3, #61	; 0x3d
 802565c:	781b      	ldrb	r3, [r3, #0]
 802565e:	2b00      	cmp	r3, #0
 8025660:	d112      	bne.n	8025688 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8025662:	687a      	ldr	r2, [r7, #4]
 8025664:	697b      	ldr	r3, [r7, #20]
 8025666:	212c      	movs	r1, #44	; 0x2c
 8025668:	fb01 f303 	mul.w	r3, r1, r3
 802566c:	4413      	add	r3, r2
 802566e:	333c      	adds	r3, #60	; 0x3c
 8025670:	781b      	ldrb	r3, [r3, #0]
 8025672:	2b00      	cmp	r3, #0
 8025674:	d108      	bne.n	8025688 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8025676:	687a      	ldr	r2, [r7, #4]
 8025678:	697b      	ldr	r3, [r7, #20]
 802567a:	212c      	movs	r1, #44	; 0x2c
 802567c:	fb01 f303 	mul.w	r3, r1, r3
 8025680:	4413      	add	r3, r2
 8025682:	333d      	adds	r3, #61	; 0x3d
 8025684:	2201      	movs	r2, #1
 8025686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025688:	687b      	ldr	r3, [r7, #4]
 802568a:	681b      	ldr	r3, [r3, #0]
 802568c:	697a      	ldr	r2, [r7, #20]
 802568e:	b2d2      	uxtb	r2, r2
 8025690:	4611      	mov	r1, r2
 8025692:	4618      	mov	r0, r3
 8025694:	f005 fa2f 	bl	802aaf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025698:	697b      	ldr	r3, [r7, #20]
 802569a:	015a      	lsls	r2, r3, #5
 802569c:	69bb      	ldr	r3, [r7, #24]
 802569e:	4413      	add	r3, r2
 80256a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256a4:	461a      	mov	r2, r3
 80256a6:	2310      	movs	r3, #16
 80256a8:	6093      	str	r3, [r2, #8]
}
 80256aa:	e1e2      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80256ac:	697b      	ldr	r3, [r7, #20]
 80256ae:	015a      	lsls	r2, r3, #5
 80256b0:	69bb      	ldr	r3, [r7, #24]
 80256b2:	4413      	add	r3, r2
 80256b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80256b8:	689b      	ldr	r3, [r3, #8]
 80256ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80256be:	2b80      	cmp	r3, #128	; 0x80
 80256c0:	d164      	bne.n	802578c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80256c2:	687b      	ldr	r3, [r7, #4]
 80256c4:	691b      	ldr	r3, [r3, #16]
 80256c6:	2b00      	cmp	r3, #0
 80256c8:	d111      	bne.n	80256ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80256ca:	687a      	ldr	r2, [r7, #4]
 80256cc:	697b      	ldr	r3, [r7, #20]
 80256ce:	212c      	movs	r1, #44	; 0x2c
 80256d0:	fb01 f303 	mul.w	r3, r1, r3
 80256d4:	4413      	add	r3, r2
 80256d6:	3361      	adds	r3, #97	; 0x61
 80256d8:	2206      	movs	r2, #6
 80256da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	681b      	ldr	r3, [r3, #0]
 80256e0:	697a      	ldr	r2, [r7, #20]
 80256e2:	b2d2      	uxtb	r2, r2
 80256e4:	4611      	mov	r1, r2
 80256e6:	4618      	mov	r0, r3
 80256e8:	f005 fa05 	bl	802aaf6 <USB_HC_Halt>
 80256ec:	e044      	b.n	8025778 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80256ee:	687a      	ldr	r2, [r7, #4]
 80256f0:	697b      	ldr	r3, [r7, #20]
 80256f2:	212c      	movs	r1, #44	; 0x2c
 80256f4:	fb01 f303 	mul.w	r3, r1, r3
 80256f8:	4413      	add	r3, r2
 80256fa:	335c      	adds	r3, #92	; 0x5c
 80256fc:	681b      	ldr	r3, [r3, #0]
 80256fe:	1c5a      	adds	r2, r3, #1
 8025700:	6879      	ldr	r1, [r7, #4]
 8025702:	697b      	ldr	r3, [r7, #20]
 8025704:	202c      	movs	r0, #44	; 0x2c
 8025706:	fb00 f303 	mul.w	r3, r0, r3
 802570a:	440b      	add	r3, r1
 802570c:	335c      	adds	r3, #92	; 0x5c
 802570e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025710:	687a      	ldr	r2, [r7, #4]
 8025712:	697b      	ldr	r3, [r7, #20]
 8025714:	212c      	movs	r1, #44	; 0x2c
 8025716:	fb01 f303 	mul.w	r3, r1, r3
 802571a:	4413      	add	r3, r2
 802571c:	335c      	adds	r3, #92	; 0x5c
 802571e:	681b      	ldr	r3, [r3, #0]
 8025720:	2b02      	cmp	r3, #2
 8025722:	d920      	bls.n	8025766 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025724:	687a      	ldr	r2, [r7, #4]
 8025726:	697b      	ldr	r3, [r7, #20]
 8025728:	212c      	movs	r1, #44	; 0x2c
 802572a:	fb01 f303 	mul.w	r3, r1, r3
 802572e:	4413      	add	r3, r2
 8025730:	335c      	adds	r3, #92	; 0x5c
 8025732:	2200      	movs	r2, #0
 8025734:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025736:	687a      	ldr	r2, [r7, #4]
 8025738:	697b      	ldr	r3, [r7, #20]
 802573a:	212c      	movs	r1, #44	; 0x2c
 802573c:	fb01 f303 	mul.w	r3, r1, r3
 8025740:	4413      	add	r3, r2
 8025742:	3360      	adds	r3, #96	; 0x60
 8025744:	2204      	movs	r2, #4
 8025746:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025748:	697b      	ldr	r3, [r7, #20]
 802574a:	b2d9      	uxtb	r1, r3
 802574c:	687a      	ldr	r2, [r7, #4]
 802574e:	697b      	ldr	r3, [r7, #20]
 8025750:	202c      	movs	r0, #44	; 0x2c
 8025752:	fb00 f303 	mul.w	r3, r0, r3
 8025756:	4413      	add	r3, r2
 8025758:	3360      	adds	r3, #96	; 0x60
 802575a:	781b      	ldrb	r3, [r3, #0]
 802575c:	461a      	mov	r2, r3
 802575e:	6878      	ldr	r0, [r7, #4]
 8025760:	f007 fc68 	bl	802d034 <HAL_HCD_HC_NotifyURBChange_Callback>
 8025764:	e008      	b.n	8025778 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025766:	687a      	ldr	r2, [r7, #4]
 8025768:	697b      	ldr	r3, [r7, #20]
 802576a:	212c      	movs	r1, #44	; 0x2c
 802576c:	fb01 f303 	mul.w	r3, r1, r3
 8025770:	4413      	add	r3, r2
 8025772:	3360      	adds	r3, #96	; 0x60
 8025774:	2202      	movs	r2, #2
 8025776:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025778:	697b      	ldr	r3, [r7, #20]
 802577a:	015a      	lsls	r2, r3, #5
 802577c:	69bb      	ldr	r3, [r7, #24]
 802577e:	4413      	add	r3, r2
 8025780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025784:	461a      	mov	r2, r3
 8025786:	2380      	movs	r3, #128	; 0x80
 8025788:	6093      	str	r3, [r2, #8]
}
 802578a:	e172      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802578c:	697b      	ldr	r3, [r7, #20]
 802578e:	015a      	lsls	r2, r3, #5
 8025790:	69bb      	ldr	r3, [r7, #24]
 8025792:	4413      	add	r3, r2
 8025794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025798:	689b      	ldr	r3, [r3, #8]
 802579a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802579e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80257a2:	d11b      	bne.n	80257dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80257a4:	687a      	ldr	r2, [r7, #4]
 80257a6:	697b      	ldr	r3, [r7, #20]
 80257a8:	212c      	movs	r1, #44	; 0x2c
 80257aa:	fb01 f303 	mul.w	r3, r1, r3
 80257ae:	4413      	add	r3, r2
 80257b0:	3361      	adds	r3, #97	; 0x61
 80257b2:	2208      	movs	r2, #8
 80257b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80257b6:	687b      	ldr	r3, [r7, #4]
 80257b8:	681b      	ldr	r3, [r3, #0]
 80257ba:	697a      	ldr	r2, [r7, #20]
 80257bc:	b2d2      	uxtb	r2, r2
 80257be:	4611      	mov	r1, r2
 80257c0:	4618      	mov	r0, r3
 80257c2:	f005 f998 	bl	802aaf6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80257c6:	697b      	ldr	r3, [r7, #20]
 80257c8:	015a      	lsls	r2, r3, #5
 80257ca:	69bb      	ldr	r3, [r7, #24]
 80257cc:	4413      	add	r3, r2
 80257ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257d2:	461a      	mov	r2, r3
 80257d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80257d8:	6093      	str	r3, [r2, #8]
}
 80257da:	e14a      	b.n	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80257dc:	697b      	ldr	r3, [r7, #20]
 80257de:	015a      	lsls	r2, r3, #5
 80257e0:	69bb      	ldr	r3, [r7, #24]
 80257e2:	4413      	add	r3, r2
 80257e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257e8:	689b      	ldr	r3, [r3, #8]
 80257ea:	f003 0302 	and.w	r3, r3, #2
 80257ee:	2b02      	cmp	r3, #2
 80257f0:	f040 813f 	bne.w	8025a72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80257f4:	687a      	ldr	r2, [r7, #4]
 80257f6:	697b      	ldr	r3, [r7, #20]
 80257f8:	212c      	movs	r1, #44	; 0x2c
 80257fa:	fb01 f303 	mul.w	r3, r1, r3
 80257fe:	4413      	add	r3, r2
 8025800:	3361      	adds	r3, #97	; 0x61
 8025802:	781b      	ldrb	r3, [r3, #0]
 8025804:	2b01      	cmp	r3, #1
 8025806:	d17d      	bne.n	8025904 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8025808:	687a      	ldr	r2, [r7, #4]
 802580a:	697b      	ldr	r3, [r7, #20]
 802580c:	212c      	movs	r1, #44	; 0x2c
 802580e:	fb01 f303 	mul.w	r3, r1, r3
 8025812:	4413      	add	r3, r2
 8025814:	3360      	adds	r3, #96	; 0x60
 8025816:	2201      	movs	r2, #1
 8025818:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802581a:	687a      	ldr	r2, [r7, #4]
 802581c:	697b      	ldr	r3, [r7, #20]
 802581e:	212c      	movs	r1, #44	; 0x2c
 8025820:	fb01 f303 	mul.w	r3, r1, r3
 8025824:	4413      	add	r3, r2
 8025826:	333f      	adds	r3, #63	; 0x3f
 8025828:	781b      	ldrb	r3, [r3, #0]
 802582a:	2b02      	cmp	r3, #2
 802582c:	d00a      	beq.n	8025844 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 802582e:	687a      	ldr	r2, [r7, #4]
 8025830:	697b      	ldr	r3, [r7, #20]
 8025832:	212c      	movs	r1, #44	; 0x2c
 8025834:	fb01 f303 	mul.w	r3, r1, r3
 8025838:	4413      	add	r3, r2
 802583a:	333f      	adds	r3, #63	; 0x3f
 802583c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802583e:	2b03      	cmp	r3, #3
 8025840:	f040 8100 	bne.w	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8025844:	687b      	ldr	r3, [r7, #4]
 8025846:	691b      	ldr	r3, [r3, #16]
 8025848:	2b00      	cmp	r3, #0
 802584a:	d113      	bne.n	8025874 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 802584c:	687a      	ldr	r2, [r7, #4]
 802584e:	697b      	ldr	r3, [r7, #20]
 8025850:	212c      	movs	r1, #44	; 0x2c
 8025852:	fb01 f303 	mul.w	r3, r1, r3
 8025856:	4413      	add	r3, r2
 8025858:	3355      	adds	r3, #85	; 0x55
 802585a:	781b      	ldrb	r3, [r3, #0]
 802585c:	f083 0301 	eor.w	r3, r3, #1
 8025860:	b2d8      	uxtb	r0, r3
 8025862:	687a      	ldr	r2, [r7, #4]
 8025864:	697b      	ldr	r3, [r7, #20]
 8025866:	212c      	movs	r1, #44	; 0x2c
 8025868:	fb01 f303 	mul.w	r3, r1, r3
 802586c:	4413      	add	r3, r2
 802586e:	3355      	adds	r3, #85	; 0x55
 8025870:	4602      	mov	r2, r0
 8025872:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	691b      	ldr	r3, [r3, #16]
 8025878:	2b01      	cmp	r3, #1
 802587a:	f040 80e3 	bne.w	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
 802587e:	687a      	ldr	r2, [r7, #4]
 8025880:	697b      	ldr	r3, [r7, #20]
 8025882:	212c      	movs	r1, #44	; 0x2c
 8025884:	fb01 f303 	mul.w	r3, r1, r3
 8025888:	4413      	add	r3, r2
 802588a:	334c      	adds	r3, #76	; 0x4c
 802588c:	681b      	ldr	r3, [r3, #0]
 802588e:	2b00      	cmp	r3, #0
 8025890:	f000 80d8 	beq.w	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8025894:	687a      	ldr	r2, [r7, #4]
 8025896:	697b      	ldr	r3, [r7, #20]
 8025898:	212c      	movs	r1, #44	; 0x2c
 802589a:	fb01 f303 	mul.w	r3, r1, r3
 802589e:	4413      	add	r3, r2
 80258a0:	334c      	adds	r3, #76	; 0x4c
 80258a2:	681b      	ldr	r3, [r3, #0]
 80258a4:	6879      	ldr	r1, [r7, #4]
 80258a6:	697a      	ldr	r2, [r7, #20]
 80258a8:	202c      	movs	r0, #44	; 0x2c
 80258aa:	fb00 f202 	mul.w	r2, r0, r2
 80258ae:	440a      	add	r2, r1
 80258b0:	3240      	adds	r2, #64	; 0x40
 80258b2:	8812      	ldrh	r2, [r2, #0]
 80258b4:	4413      	add	r3, r2
 80258b6:	3b01      	subs	r3, #1
 80258b8:	6879      	ldr	r1, [r7, #4]
 80258ba:	697a      	ldr	r2, [r7, #20]
 80258bc:	202c      	movs	r0, #44	; 0x2c
 80258be:	fb00 f202 	mul.w	r2, r0, r2
 80258c2:	440a      	add	r2, r1
 80258c4:	3240      	adds	r2, #64	; 0x40
 80258c6:	8812      	ldrh	r2, [r2, #0]
 80258c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80258cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80258ce:	68fb      	ldr	r3, [r7, #12]
 80258d0:	f003 0301 	and.w	r3, r3, #1
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	f000 80b5 	beq.w	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80258da:	687a      	ldr	r2, [r7, #4]
 80258dc:	697b      	ldr	r3, [r7, #20]
 80258de:	212c      	movs	r1, #44	; 0x2c
 80258e0:	fb01 f303 	mul.w	r3, r1, r3
 80258e4:	4413      	add	r3, r2
 80258e6:	3355      	adds	r3, #85	; 0x55
 80258e8:	781b      	ldrb	r3, [r3, #0]
 80258ea:	f083 0301 	eor.w	r3, r3, #1
 80258ee:	b2d8      	uxtb	r0, r3
 80258f0:	687a      	ldr	r2, [r7, #4]
 80258f2:	697b      	ldr	r3, [r7, #20]
 80258f4:	212c      	movs	r1, #44	; 0x2c
 80258f6:	fb01 f303 	mul.w	r3, r1, r3
 80258fa:	4413      	add	r3, r2
 80258fc:	3355      	adds	r3, #85	; 0x55
 80258fe:	4602      	mov	r2, r0
 8025900:	701a      	strb	r2, [r3, #0]
 8025902:	e09f      	b.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025904:	687a      	ldr	r2, [r7, #4]
 8025906:	697b      	ldr	r3, [r7, #20]
 8025908:	212c      	movs	r1, #44	; 0x2c
 802590a:	fb01 f303 	mul.w	r3, r1, r3
 802590e:	4413      	add	r3, r2
 8025910:	3361      	adds	r3, #97	; 0x61
 8025912:	781b      	ldrb	r3, [r3, #0]
 8025914:	2b03      	cmp	r3, #3
 8025916:	d109      	bne.n	802592c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025918:	687a      	ldr	r2, [r7, #4]
 802591a:	697b      	ldr	r3, [r7, #20]
 802591c:	212c      	movs	r1, #44	; 0x2c
 802591e:	fb01 f303 	mul.w	r3, r1, r3
 8025922:	4413      	add	r3, r2
 8025924:	3360      	adds	r3, #96	; 0x60
 8025926:	2202      	movs	r2, #2
 8025928:	701a      	strb	r2, [r3, #0]
 802592a:	e08b      	b.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 802592c:	687a      	ldr	r2, [r7, #4]
 802592e:	697b      	ldr	r3, [r7, #20]
 8025930:	212c      	movs	r1, #44	; 0x2c
 8025932:	fb01 f303 	mul.w	r3, r1, r3
 8025936:	4413      	add	r3, r2
 8025938:	3361      	adds	r3, #97	; 0x61
 802593a:	781b      	ldrb	r3, [r3, #0]
 802593c:	2b04      	cmp	r3, #4
 802593e:	d109      	bne.n	8025954 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025940:	687a      	ldr	r2, [r7, #4]
 8025942:	697b      	ldr	r3, [r7, #20]
 8025944:	212c      	movs	r1, #44	; 0x2c
 8025946:	fb01 f303 	mul.w	r3, r1, r3
 802594a:	4413      	add	r3, r2
 802594c:	3360      	adds	r3, #96	; 0x60
 802594e:	2202      	movs	r2, #2
 8025950:	701a      	strb	r2, [r3, #0]
 8025952:	e077      	b.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025954:	687a      	ldr	r2, [r7, #4]
 8025956:	697b      	ldr	r3, [r7, #20]
 8025958:	212c      	movs	r1, #44	; 0x2c
 802595a:	fb01 f303 	mul.w	r3, r1, r3
 802595e:	4413      	add	r3, r2
 8025960:	3361      	adds	r3, #97	; 0x61
 8025962:	781b      	ldrb	r3, [r3, #0]
 8025964:	2b05      	cmp	r3, #5
 8025966:	d109      	bne.n	802597c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8025968:	687a      	ldr	r2, [r7, #4]
 802596a:	697b      	ldr	r3, [r7, #20]
 802596c:	212c      	movs	r1, #44	; 0x2c
 802596e:	fb01 f303 	mul.w	r3, r1, r3
 8025972:	4413      	add	r3, r2
 8025974:	3360      	adds	r3, #96	; 0x60
 8025976:	2205      	movs	r2, #5
 8025978:	701a      	strb	r2, [r3, #0]
 802597a:	e063      	b.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802597c:	687a      	ldr	r2, [r7, #4]
 802597e:	697b      	ldr	r3, [r7, #20]
 8025980:	212c      	movs	r1, #44	; 0x2c
 8025982:	fb01 f303 	mul.w	r3, r1, r3
 8025986:	4413      	add	r3, r2
 8025988:	3361      	adds	r3, #97	; 0x61
 802598a:	781b      	ldrb	r3, [r3, #0]
 802598c:	2b06      	cmp	r3, #6
 802598e:	d009      	beq.n	80259a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025990:	687a      	ldr	r2, [r7, #4]
 8025992:	697b      	ldr	r3, [r7, #20]
 8025994:	212c      	movs	r1, #44	; 0x2c
 8025996:	fb01 f303 	mul.w	r3, r1, r3
 802599a:	4413      	add	r3, r2
 802599c:	3361      	adds	r3, #97	; 0x61
 802599e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80259a0:	2b08      	cmp	r3, #8
 80259a2:	d14f      	bne.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80259a4:	687a      	ldr	r2, [r7, #4]
 80259a6:	697b      	ldr	r3, [r7, #20]
 80259a8:	212c      	movs	r1, #44	; 0x2c
 80259aa:	fb01 f303 	mul.w	r3, r1, r3
 80259ae:	4413      	add	r3, r2
 80259b0:	335c      	adds	r3, #92	; 0x5c
 80259b2:	681b      	ldr	r3, [r3, #0]
 80259b4:	1c5a      	adds	r2, r3, #1
 80259b6:	6879      	ldr	r1, [r7, #4]
 80259b8:	697b      	ldr	r3, [r7, #20]
 80259ba:	202c      	movs	r0, #44	; 0x2c
 80259bc:	fb00 f303 	mul.w	r3, r0, r3
 80259c0:	440b      	add	r3, r1
 80259c2:	335c      	adds	r3, #92	; 0x5c
 80259c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80259c6:	687a      	ldr	r2, [r7, #4]
 80259c8:	697b      	ldr	r3, [r7, #20]
 80259ca:	212c      	movs	r1, #44	; 0x2c
 80259cc:	fb01 f303 	mul.w	r3, r1, r3
 80259d0:	4413      	add	r3, r2
 80259d2:	335c      	adds	r3, #92	; 0x5c
 80259d4:	681b      	ldr	r3, [r3, #0]
 80259d6:	2b02      	cmp	r3, #2
 80259d8:	d912      	bls.n	8025a00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80259da:	687a      	ldr	r2, [r7, #4]
 80259dc:	697b      	ldr	r3, [r7, #20]
 80259de:	212c      	movs	r1, #44	; 0x2c
 80259e0:	fb01 f303 	mul.w	r3, r1, r3
 80259e4:	4413      	add	r3, r2
 80259e6:	335c      	adds	r3, #92	; 0x5c
 80259e8:	2200      	movs	r2, #0
 80259ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80259ec:	687a      	ldr	r2, [r7, #4]
 80259ee:	697b      	ldr	r3, [r7, #20]
 80259f0:	212c      	movs	r1, #44	; 0x2c
 80259f2:	fb01 f303 	mul.w	r3, r1, r3
 80259f6:	4413      	add	r3, r2
 80259f8:	3360      	adds	r3, #96	; 0x60
 80259fa:	2204      	movs	r2, #4
 80259fc:	701a      	strb	r2, [r3, #0]
 80259fe:	e021      	b.n	8025a44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025a00:	687a      	ldr	r2, [r7, #4]
 8025a02:	697b      	ldr	r3, [r7, #20]
 8025a04:	212c      	movs	r1, #44	; 0x2c
 8025a06:	fb01 f303 	mul.w	r3, r1, r3
 8025a0a:	4413      	add	r3, r2
 8025a0c:	3360      	adds	r3, #96	; 0x60
 8025a0e:	2202      	movs	r2, #2
 8025a10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025a12:	697b      	ldr	r3, [r7, #20]
 8025a14:	015a      	lsls	r2, r3, #5
 8025a16:	69bb      	ldr	r3, [r7, #24]
 8025a18:	4413      	add	r3, r2
 8025a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a1e:	681b      	ldr	r3, [r3, #0]
 8025a20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025a22:	693b      	ldr	r3, [r7, #16]
 8025a24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025a28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025a2a:	693b      	ldr	r3, [r7, #16]
 8025a2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025a30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025a32:	697b      	ldr	r3, [r7, #20]
 8025a34:	015a      	lsls	r2, r3, #5
 8025a36:	69bb      	ldr	r3, [r7, #24]
 8025a38:	4413      	add	r3, r2
 8025a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a3e:	461a      	mov	r2, r3
 8025a40:	693b      	ldr	r3, [r7, #16]
 8025a42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025a44:	697b      	ldr	r3, [r7, #20]
 8025a46:	015a      	lsls	r2, r3, #5
 8025a48:	69bb      	ldr	r3, [r7, #24]
 8025a4a:	4413      	add	r3, r2
 8025a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a50:	461a      	mov	r2, r3
 8025a52:	2302      	movs	r3, #2
 8025a54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025a56:	697b      	ldr	r3, [r7, #20]
 8025a58:	b2d9      	uxtb	r1, r3
 8025a5a:	687a      	ldr	r2, [r7, #4]
 8025a5c:	697b      	ldr	r3, [r7, #20]
 8025a5e:	202c      	movs	r0, #44	; 0x2c
 8025a60:	fb00 f303 	mul.w	r3, r0, r3
 8025a64:	4413      	add	r3, r2
 8025a66:	3360      	adds	r3, #96	; 0x60
 8025a68:	781b      	ldrb	r3, [r3, #0]
 8025a6a:	461a      	mov	r2, r3
 8025a6c:	6878      	ldr	r0, [r7, #4]
 8025a6e:	f007 fae1 	bl	802d034 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025a72:	bf00      	nop
 8025a74:	3720      	adds	r7, #32
 8025a76:	46bd      	mov	sp, r7
 8025a78:	bd80      	pop	{r7, pc}

08025a7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025a7a:	b580      	push	{r7, lr}
 8025a7c:	b08a      	sub	sp, #40	; 0x28
 8025a7e:	af00      	add	r7, sp, #0
 8025a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025a82:	687b      	ldr	r3, [r7, #4]
 8025a84:	681b      	ldr	r3, [r3, #0]
 8025a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8025a8c:	687b      	ldr	r3, [r7, #4]
 8025a8e:	681b      	ldr	r3, [r3, #0]
 8025a90:	6a1b      	ldr	r3, [r3, #32]
 8025a92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8025a94:	69fb      	ldr	r3, [r7, #28]
 8025a96:	f003 030f 	and.w	r3, r3, #15
 8025a9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8025a9c:	69fb      	ldr	r3, [r7, #28]
 8025a9e:	0c5b      	lsrs	r3, r3, #17
 8025aa0:	f003 030f 	and.w	r3, r3, #15
 8025aa4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8025aa6:	69fb      	ldr	r3, [r7, #28]
 8025aa8:	091b      	lsrs	r3, r3, #4
 8025aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8025aae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8025ab0:	697b      	ldr	r3, [r7, #20]
 8025ab2:	2b02      	cmp	r3, #2
 8025ab4:	d004      	beq.n	8025ac0 <HCD_RXQLVL_IRQHandler+0x46>
 8025ab6:	697b      	ldr	r3, [r7, #20]
 8025ab8:	2b05      	cmp	r3, #5
 8025aba:	f000 80a9 	beq.w	8025c10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8025abe:	e0aa      	b.n	8025c16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8025ac0:	693b      	ldr	r3, [r7, #16]
 8025ac2:	2b00      	cmp	r3, #0
 8025ac4:	f000 80a6 	beq.w	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8025ac8:	687a      	ldr	r2, [r7, #4]
 8025aca:	69bb      	ldr	r3, [r7, #24]
 8025acc:	212c      	movs	r1, #44	; 0x2c
 8025ace:	fb01 f303 	mul.w	r3, r1, r3
 8025ad2:	4413      	add	r3, r2
 8025ad4:	3344      	adds	r3, #68	; 0x44
 8025ad6:	681b      	ldr	r3, [r3, #0]
 8025ad8:	2b00      	cmp	r3, #0
 8025ada:	f000 809b 	beq.w	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8025ade:	687a      	ldr	r2, [r7, #4]
 8025ae0:	69bb      	ldr	r3, [r7, #24]
 8025ae2:	212c      	movs	r1, #44	; 0x2c
 8025ae4:	fb01 f303 	mul.w	r3, r1, r3
 8025ae8:	4413      	add	r3, r2
 8025aea:	3350      	adds	r3, #80	; 0x50
 8025aec:	681a      	ldr	r2, [r3, #0]
 8025aee:	693b      	ldr	r3, [r7, #16]
 8025af0:	441a      	add	r2, r3
 8025af2:	6879      	ldr	r1, [r7, #4]
 8025af4:	69bb      	ldr	r3, [r7, #24]
 8025af6:	202c      	movs	r0, #44	; 0x2c
 8025af8:	fb00 f303 	mul.w	r3, r0, r3
 8025afc:	440b      	add	r3, r1
 8025afe:	334c      	adds	r3, #76	; 0x4c
 8025b00:	681b      	ldr	r3, [r3, #0]
 8025b02:	429a      	cmp	r2, r3
 8025b04:	d87a      	bhi.n	8025bfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8025b06:	687b      	ldr	r3, [r7, #4]
 8025b08:	6818      	ldr	r0, [r3, #0]
 8025b0a:	687a      	ldr	r2, [r7, #4]
 8025b0c:	69bb      	ldr	r3, [r7, #24]
 8025b0e:	212c      	movs	r1, #44	; 0x2c
 8025b10:	fb01 f303 	mul.w	r3, r1, r3
 8025b14:	4413      	add	r3, r2
 8025b16:	3344      	adds	r3, #68	; 0x44
 8025b18:	681b      	ldr	r3, [r3, #0]
 8025b1a:	693a      	ldr	r2, [r7, #16]
 8025b1c:	b292      	uxth	r2, r2
 8025b1e:	4619      	mov	r1, r3
 8025b20:	f004 fb40 	bl	802a1a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8025b24:	687a      	ldr	r2, [r7, #4]
 8025b26:	69bb      	ldr	r3, [r7, #24]
 8025b28:	212c      	movs	r1, #44	; 0x2c
 8025b2a:	fb01 f303 	mul.w	r3, r1, r3
 8025b2e:	4413      	add	r3, r2
 8025b30:	3344      	adds	r3, #68	; 0x44
 8025b32:	681a      	ldr	r2, [r3, #0]
 8025b34:	693b      	ldr	r3, [r7, #16]
 8025b36:	441a      	add	r2, r3
 8025b38:	6879      	ldr	r1, [r7, #4]
 8025b3a:	69bb      	ldr	r3, [r7, #24]
 8025b3c:	202c      	movs	r0, #44	; 0x2c
 8025b3e:	fb00 f303 	mul.w	r3, r0, r3
 8025b42:	440b      	add	r3, r1
 8025b44:	3344      	adds	r3, #68	; 0x44
 8025b46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8025b48:	687a      	ldr	r2, [r7, #4]
 8025b4a:	69bb      	ldr	r3, [r7, #24]
 8025b4c:	212c      	movs	r1, #44	; 0x2c
 8025b4e:	fb01 f303 	mul.w	r3, r1, r3
 8025b52:	4413      	add	r3, r2
 8025b54:	3350      	adds	r3, #80	; 0x50
 8025b56:	681a      	ldr	r2, [r3, #0]
 8025b58:	693b      	ldr	r3, [r7, #16]
 8025b5a:	441a      	add	r2, r3
 8025b5c:	6879      	ldr	r1, [r7, #4]
 8025b5e:	69bb      	ldr	r3, [r7, #24]
 8025b60:	202c      	movs	r0, #44	; 0x2c
 8025b62:	fb00 f303 	mul.w	r3, r0, r3
 8025b66:	440b      	add	r3, r1
 8025b68:	3350      	adds	r3, #80	; 0x50
 8025b6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8025b6c:	69bb      	ldr	r3, [r7, #24]
 8025b6e:	015a      	lsls	r2, r3, #5
 8025b70:	6a3b      	ldr	r3, [r7, #32]
 8025b72:	4413      	add	r3, r2
 8025b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b78:	691b      	ldr	r3, [r3, #16]
 8025b7a:	0cdb      	lsrs	r3, r3, #19
 8025b7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025b80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8025b82:	687a      	ldr	r2, [r7, #4]
 8025b84:	69bb      	ldr	r3, [r7, #24]
 8025b86:	212c      	movs	r1, #44	; 0x2c
 8025b88:	fb01 f303 	mul.w	r3, r1, r3
 8025b8c:	4413      	add	r3, r2
 8025b8e:	3340      	adds	r3, #64	; 0x40
 8025b90:	881b      	ldrh	r3, [r3, #0]
 8025b92:	461a      	mov	r2, r3
 8025b94:	693b      	ldr	r3, [r7, #16]
 8025b96:	4293      	cmp	r3, r2
 8025b98:	d13c      	bne.n	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
 8025b9a:	68fb      	ldr	r3, [r7, #12]
 8025b9c:	2b00      	cmp	r3, #0
 8025b9e:	d039      	beq.n	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025ba0:	69bb      	ldr	r3, [r7, #24]
 8025ba2:	015a      	lsls	r2, r3, #5
 8025ba4:	6a3b      	ldr	r3, [r7, #32]
 8025ba6:	4413      	add	r3, r2
 8025ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bac:	681b      	ldr	r3, [r3, #0]
 8025bae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025bb0:	68bb      	ldr	r3, [r7, #8]
 8025bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025bb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025bb8:	68bb      	ldr	r3, [r7, #8]
 8025bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025bbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025bc0:	69bb      	ldr	r3, [r7, #24]
 8025bc2:	015a      	lsls	r2, r3, #5
 8025bc4:	6a3b      	ldr	r3, [r7, #32]
 8025bc6:	4413      	add	r3, r2
 8025bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bcc:	461a      	mov	r2, r3
 8025bce:	68bb      	ldr	r3, [r7, #8]
 8025bd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8025bd2:	687a      	ldr	r2, [r7, #4]
 8025bd4:	69bb      	ldr	r3, [r7, #24]
 8025bd6:	212c      	movs	r1, #44	; 0x2c
 8025bd8:	fb01 f303 	mul.w	r3, r1, r3
 8025bdc:	4413      	add	r3, r2
 8025bde:	3354      	adds	r3, #84	; 0x54
 8025be0:	781b      	ldrb	r3, [r3, #0]
 8025be2:	f083 0301 	eor.w	r3, r3, #1
 8025be6:	b2d8      	uxtb	r0, r3
 8025be8:	687a      	ldr	r2, [r7, #4]
 8025bea:	69bb      	ldr	r3, [r7, #24]
 8025bec:	212c      	movs	r1, #44	; 0x2c
 8025bee:	fb01 f303 	mul.w	r3, r1, r3
 8025bf2:	4413      	add	r3, r2
 8025bf4:	3354      	adds	r3, #84	; 0x54
 8025bf6:	4602      	mov	r2, r0
 8025bf8:	701a      	strb	r2, [r3, #0]
      break;
 8025bfa:	e00b      	b.n	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025bfc:	687a      	ldr	r2, [r7, #4]
 8025bfe:	69bb      	ldr	r3, [r7, #24]
 8025c00:	212c      	movs	r1, #44	; 0x2c
 8025c02:	fb01 f303 	mul.w	r3, r1, r3
 8025c06:	4413      	add	r3, r2
 8025c08:	3360      	adds	r3, #96	; 0x60
 8025c0a:	2204      	movs	r2, #4
 8025c0c:	701a      	strb	r2, [r3, #0]
      break;
 8025c0e:	e001      	b.n	8025c14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8025c10:	bf00      	nop
 8025c12:	e000      	b.n	8025c16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8025c14:	bf00      	nop
  }
}
 8025c16:	bf00      	nop
 8025c18:	3728      	adds	r7, #40	; 0x28
 8025c1a:	46bd      	mov	sp, r7
 8025c1c:	bd80      	pop	{r7, pc}

08025c1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025c1e:	b580      	push	{r7, lr}
 8025c20:	b086      	sub	sp, #24
 8025c22:	af00      	add	r7, sp, #0
 8025c24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025c26:	687b      	ldr	r3, [r7, #4]
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025c2c:	697b      	ldr	r3, [r7, #20]
 8025c2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8025c30:	693b      	ldr	r3, [r7, #16]
 8025c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025c36:	681b      	ldr	r3, [r3, #0]
 8025c38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8025c3a:	693b      	ldr	r3, [r7, #16]
 8025c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025c40:	681b      	ldr	r3, [r3, #0]
 8025c42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8025c44:	68bb      	ldr	r3, [r7, #8]
 8025c46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8025c4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8025c4c:	68fb      	ldr	r3, [r7, #12]
 8025c4e:	f003 0302 	and.w	r3, r3, #2
 8025c52:	2b02      	cmp	r3, #2
 8025c54:	d10b      	bne.n	8025c6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8025c56:	68fb      	ldr	r3, [r7, #12]
 8025c58:	f003 0301 	and.w	r3, r3, #1
 8025c5c:	2b01      	cmp	r3, #1
 8025c5e:	d102      	bne.n	8025c66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8025c60:	6878      	ldr	r0, [r7, #4]
 8025c62:	f007 f9cb 	bl	802cffc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8025c66:	68bb      	ldr	r3, [r7, #8]
 8025c68:	f043 0302 	orr.w	r3, r3, #2
 8025c6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8025c6e:	68fb      	ldr	r3, [r7, #12]
 8025c70:	f003 0308 	and.w	r3, r3, #8
 8025c74:	2b08      	cmp	r3, #8
 8025c76:	d132      	bne.n	8025cde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8025c78:	68bb      	ldr	r3, [r7, #8]
 8025c7a:	f043 0308 	orr.w	r3, r3, #8
 8025c7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8025c80:	68fb      	ldr	r3, [r7, #12]
 8025c82:	f003 0304 	and.w	r3, r3, #4
 8025c86:	2b04      	cmp	r3, #4
 8025c88:	d126      	bne.n	8025cd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	699b      	ldr	r3, [r3, #24]
 8025c8e:	2b02      	cmp	r3, #2
 8025c90:	d113      	bne.n	8025cba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8025c92:	68fb      	ldr	r3, [r7, #12]
 8025c94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8025c98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8025c9c:	d106      	bne.n	8025cac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8025c9e:	687b      	ldr	r3, [r7, #4]
 8025ca0:	681b      	ldr	r3, [r3, #0]
 8025ca2:	2102      	movs	r1, #2
 8025ca4:	4618      	mov	r0, r3
 8025ca6:	f004 fbeb 	bl	802a480 <USB_InitFSLSPClkSel>
 8025caa:	e011      	b.n	8025cd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025cac:	687b      	ldr	r3, [r7, #4]
 8025cae:	681b      	ldr	r3, [r3, #0]
 8025cb0:	2101      	movs	r1, #1
 8025cb2:	4618      	mov	r0, r3
 8025cb4:	f004 fbe4 	bl	802a480 <USB_InitFSLSPClkSel>
 8025cb8:	e00a      	b.n	8025cd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8025cba:	687b      	ldr	r3, [r7, #4]
 8025cbc:	68db      	ldr	r3, [r3, #12]
 8025cbe:	2b01      	cmp	r3, #1
 8025cc0:	d106      	bne.n	8025cd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8025cc2:	693b      	ldr	r3, [r7, #16]
 8025cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8025cc8:	461a      	mov	r2, r3
 8025cca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8025cce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8025cd0:	6878      	ldr	r0, [r7, #4]
 8025cd2:	f007 f9bd 	bl	802d050 <HAL_HCD_PortEnabled_Callback>
 8025cd6:	e002      	b.n	8025cde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8025cd8:	6878      	ldr	r0, [r7, #4]
 8025cda:	f007 f9c7 	bl	802d06c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8025cde:	68fb      	ldr	r3, [r7, #12]
 8025ce0:	f003 0320 	and.w	r3, r3, #32
 8025ce4:	2b20      	cmp	r3, #32
 8025ce6:	d103      	bne.n	8025cf0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8025ce8:	68bb      	ldr	r3, [r7, #8]
 8025cea:	f043 0320 	orr.w	r3, r3, #32
 8025cee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8025cf0:	693b      	ldr	r3, [r7, #16]
 8025cf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025cf6:	461a      	mov	r2, r3
 8025cf8:	68bb      	ldr	r3, [r7, #8]
 8025cfa:	6013      	str	r3, [r2, #0]
}
 8025cfc:	bf00      	nop
 8025cfe:	3718      	adds	r7, #24
 8025d00:	46bd      	mov	sp, r7
 8025d02:	bd80      	pop	{r7, pc}

08025d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025d04:	b580      	push	{r7, lr}
 8025d06:	b084      	sub	sp, #16
 8025d08:	af00      	add	r7, sp, #0
 8025d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025d0c:	687b      	ldr	r3, [r7, #4]
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	d101      	bne.n	8025d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025d12:	2301      	movs	r3, #1
 8025d14:	e12b      	b.n	8025f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025d1c:	b2db      	uxtb	r3, r3
 8025d1e:	2b00      	cmp	r3, #0
 8025d20:	d106      	bne.n	8025d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	2200      	movs	r2, #0
 8025d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8025d2a:	6878      	ldr	r0, [r7, #4]
 8025d2c:	f7fb fa92 	bl	8021254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025d30:	687b      	ldr	r3, [r7, #4]
 8025d32:	2224      	movs	r2, #36	; 0x24
 8025d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025d38:	687b      	ldr	r3, [r7, #4]
 8025d3a:	681b      	ldr	r3, [r3, #0]
 8025d3c:	681a      	ldr	r2, [r3, #0]
 8025d3e:	687b      	ldr	r3, [r7, #4]
 8025d40:	681b      	ldr	r3, [r3, #0]
 8025d42:	f022 0201 	bic.w	r2, r2, #1
 8025d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8025d48:	687b      	ldr	r3, [r7, #4]
 8025d4a:	681b      	ldr	r3, [r3, #0]
 8025d4c:	681a      	ldr	r2, [r3, #0]
 8025d4e:	687b      	ldr	r3, [r7, #4]
 8025d50:	681b      	ldr	r3, [r3, #0]
 8025d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8025d58:	687b      	ldr	r3, [r7, #4]
 8025d5a:	681b      	ldr	r3, [r3, #0]
 8025d5c:	681a      	ldr	r2, [r3, #0]
 8025d5e:	687b      	ldr	r3, [r7, #4]
 8025d60:	681b      	ldr	r3, [r3, #0]
 8025d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8025d68:	f001 fa0c 	bl	8027184 <HAL_RCC_GetPCLK1Freq>
 8025d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8025d6e:	687b      	ldr	r3, [r7, #4]
 8025d70:	685b      	ldr	r3, [r3, #4]
 8025d72:	4a81      	ldr	r2, [pc, #516]	; (8025f78 <HAL_I2C_Init+0x274>)
 8025d74:	4293      	cmp	r3, r2
 8025d76:	d807      	bhi.n	8025d88 <HAL_I2C_Init+0x84>
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	4a80      	ldr	r2, [pc, #512]	; (8025f7c <HAL_I2C_Init+0x278>)
 8025d7c:	4293      	cmp	r3, r2
 8025d7e:	bf94      	ite	ls
 8025d80:	2301      	movls	r3, #1
 8025d82:	2300      	movhi	r3, #0
 8025d84:	b2db      	uxtb	r3, r3
 8025d86:	e006      	b.n	8025d96 <HAL_I2C_Init+0x92>
 8025d88:	68fb      	ldr	r3, [r7, #12]
 8025d8a:	4a7d      	ldr	r2, [pc, #500]	; (8025f80 <HAL_I2C_Init+0x27c>)
 8025d8c:	4293      	cmp	r3, r2
 8025d8e:	bf94      	ite	ls
 8025d90:	2301      	movls	r3, #1
 8025d92:	2300      	movhi	r3, #0
 8025d94:	b2db      	uxtb	r3, r3
 8025d96:	2b00      	cmp	r3, #0
 8025d98:	d001      	beq.n	8025d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8025d9a:	2301      	movs	r3, #1
 8025d9c:	e0e7      	b.n	8025f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8025d9e:	68fb      	ldr	r3, [r7, #12]
 8025da0:	4a78      	ldr	r2, [pc, #480]	; (8025f84 <HAL_I2C_Init+0x280>)
 8025da2:	fba2 2303 	umull	r2, r3, r2, r3
 8025da6:	0c9b      	lsrs	r3, r3, #18
 8025da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	681b      	ldr	r3, [r3, #0]
 8025dae:	685b      	ldr	r3, [r3, #4]
 8025db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025db4:	687b      	ldr	r3, [r7, #4]
 8025db6:	681b      	ldr	r3, [r3, #0]
 8025db8:	68ba      	ldr	r2, [r7, #8]
 8025dba:	430a      	orrs	r2, r1
 8025dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8025dbe:	687b      	ldr	r3, [r7, #4]
 8025dc0:	681b      	ldr	r3, [r3, #0]
 8025dc2:	6a1b      	ldr	r3, [r3, #32]
 8025dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025dc8:	687b      	ldr	r3, [r7, #4]
 8025dca:	685b      	ldr	r3, [r3, #4]
 8025dcc:	4a6a      	ldr	r2, [pc, #424]	; (8025f78 <HAL_I2C_Init+0x274>)
 8025dce:	4293      	cmp	r3, r2
 8025dd0:	d802      	bhi.n	8025dd8 <HAL_I2C_Init+0xd4>
 8025dd2:	68bb      	ldr	r3, [r7, #8]
 8025dd4:	3301      	adds	r3, #1
 8025dd6:	e009      	b.n	8025dec <HAL_I2C_Init+0xe8>
 8025dd8:	68bb      	ldr	r3, [r7, #8]
 8025dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8025dde:	fb02 f303 	mul.w	r3, r2, r3
 8025de2:	4a69      	ldr	r2, [pc, #420]	; (8025f88 <HAL_I2C_Init+0x284>)
 8025de4:	fba2 2303 	umull	r2, r3, r2, r3
 8025de8:	099b      	lsrs	r3, r3, #6
 8025dea:	3301      	adds	r3, #1
 8025dec:	687a      	ldr	r2, [r7, #4]
 8025dee:	6812      	ldr	r2, [r2, #0]
 8025df0:	430b      	orrs	r3, r1
 8025df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025df4:	687b      	ldr	r3, [r7, #4]
 8025df6:	681b      	ldr	r3, [r3, #0]
 8025df8:	69db      	ldr	r3, [r3, #28]
 8025dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8025dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025e02:	687b      	ldr	r3, [r7, #4]
 8025e04:	685b      	ldr	r3, [r3, #4]
 8025e06:	495c      	ldr	r1, [pc, #368]	; (8025f78 <HAL_I2C_Init+0x274>)
 8025e08:	428b      	cmp	r3, r1
 8025e0a:	d819      	bhi.n	8025e40 <HAL_I2C_Init+0x13c>
 8025e0c:	68fb      	ldr	r3, [r7, #12]
 8025e0e:	1e59      	subs	r1, r3, #1
 8025e10:	687b      	ldr	r3, [r7, #4]
 8025e12:	685b      	ldr	r3, [r3, #4]
 8025e14:	005b      	lsls	r3, r3, #1
 8025e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8025e1a:	1c59      	adds	r1, r3, #1
 8025e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8025e20:	400b      	ands	r3, r1
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	d00a      	beq.n	8025e3c <HAL_I2C_Init+0x138>
 8025e26:	68fb      	ldr	r3, [r7, #12]
 8025e28:	1e59      	subs	r1, r3, #1
 8025e2a:	687b      	ldr	r3, [r7, #4]
 8025e2c:	685b      	ldr	r3, [r3, #4]
 8025e2e:	005b      	lsls	r3, r3, #1
 8025e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8025e34:	3301      	adds	r3, #1
 8025e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025e3a:	e051      	b.n	8025ee0 <HAL_I2C_Init+0x1dc>
 8025e3c:	2304      	movs	r3, #4
 8025e3e:	e04f      	b.n	8025ee0 <HAL_I2C_Init+0x1dc>
 8025e40:	687b      	ldr	r3, [r7, #4]
 8025e42:	689b      	ldr	r3, [r3, #8]
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	d111      	bne.n	8025e6c <HAL_I2C_Init+0x168>
 8025e48:	68fb      	ldr	r3, [r7, #12]
 8025e4a:	1e58      	subs	r0, r3, #1
 8025e4c:	687b      	ldr	r3, [r7, #4]
 8025e4e:	6859      	ldr	r1, [r3, #4]
 8025e50:	460b      	mov	r3, r1
 8025e52:	005b      	lsls	r3, r3, #1
 8025e54:	440b      	add	r3, r1
 8025e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8025e5a:	3301      	adds	r3, #1
 8025e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	bf0c      	ite	eq
 8025e64:	2301      	moveq	r3, #1
 8025e66:	2300      	movne	r3, #0
 8025e68:	b2db      	uxtb	r3, r3
 8025e6a:	e012      	b.n	8025e92 <HAL_I2C_Init+0x18e>
 8025e6c:	68fb      	ldr	r3, [r7, #12]
 8025e6e:	1e58      	subs	r0, r3, #1
 8025e70:	687b      	ldr	r3, [r7, #4]
 8025e72:	6859      	ldr	r1, [r3, #4]
 8025e74:	460b      	mov	r3, r1
 8025e76:	009b      	lsls	r3, r3, #2
 8025e78:	440b      	add	r3, r1
 8025e7a:	0099      	lsls	r1, r3, #2
 8025e7c:	440b      	add	r3, r1
 8025e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8025e82:	3301      	adds	r3, #1
 8025e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025e88:	2b00      	cmp	r3, #0
 8025e8a:	bf0c      	ite	eq
 8025e8c:	2301      	moveq	r3, #1
 8025e8e:	2300      	movne	r3, #0
 8025e90:	b2db      	uxtb	r3, r3
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	d001      	beq.n	8025e9a <HAL_I2C_Init+0x196>
 8025e96:	2301      	movs	r3, #1
 8025e98:	e022      	b.n	8025ee0 <HAL_I2C_Init+0x1dc>
 8025e9a:	687b      	ldr	r3, [r7, #4]
 8025e9c:	689b      	ldr	r3, [r3, #8]
 8025e9e:	2b00      	cmp	r3, #0
 8025ea0:	d10e      	bne.n	8025ec0 <HAL_I2C_Init+0x1bc>
 8025ea2:	68fb      	ldr	r3, [r7, #12]
 8025ea4:	1e58      	subs	r0, r3, #1
 8025ea6:	687b      	ldr	r3, [r7, #4]
 8025ea8:	6859      	ldr	r1, [r3, #4]
 8025eaa:	460b      	mov	r3, r1
 8025eac:	005b      	lsls	r3, r3, #1
 8025eae:	440b      	add	r3, r1
 8025eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8025eb4:	3301      	adds	r3, #1
 8025eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025ebe:	e00f      	b.n	8025ee0 <HAL_I2C_Init+0x1dc>
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	1e58      	subs	r0, r3, #1
 8025ec4:	687b      	ldr	r3, [r7, #4]
 8025ec6:	6859      	ldr	r1, [r3, #4]
 8025ec8:	460b      	mov	r3, r1
 8025eca:	009b      	lsls	r3, r3, #2
 8025ecc:	440b      	add	r3, r1
 8025ece:	0099      	lsls	r1, r3, #2
 8025ed0:	440b      	add	r3, r1
 8025ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8025ed6:	3301      	adds	r3, #1
 8025ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025ee0:	6879      	ldr	r1, [r7, #4]
 8025ee2:	6809      	ldr	r1, [r1, #0]
 8025ee4:	4313      	orrs	r3, r2
 8025ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025ee8:	687b      	ldr	r3, [r7, #4]
 8025eea:	681b      	ldr	r3, [r3, #0]
 8025eec:	681b      	ldr	r3, [r3, #0]
 8025eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8025ef2:	687b      	ldr	r3, [r7, #4]
 8025ef4:	69da      	ldr	r2, [r3, #28]
 8025ef6:	687b      	ldr	r3, [r7, #4]
 8025ef8:	6a1b      	ldr	r3, [r3, #32]
 8025efa:	431a      	orrs	r2, r3
 8025efc:	687b      	ldr	r3, [r7, #4]
 8025efe:	681b      	ldr	r3, [r3, #0]
 8025f00:	430a      	orrs	r2, r1
 8025f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025f04:	687b      	ldr	r3, [r7, #4]
 8025f06:	681b      	ldr	r3, [r3, #0]
 8025f08:	689b      	ldr	r3, [r3, #8]
 8025f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8025f12:	687a      	ldr	r2, [r7, #4]
 8025f14:	6911      	ldr	r1, [r2, #16]
 8025f16:	687a      	ldr	r2, [r7, #4]
 8025f18:	68d2      	ldr	r2, [r2, #12]
 8025f1a:	4311      	orrs	r1, r2
 8025f1c:	687a      	ldr	r2, [r7, #4]
 8025f1e:	6812      	ldr	r2, [r2, #0]
 8025f20:	430b      	orrs	r3, r1
 8025f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	681b      	ldr	r3, [r3, #0]
 8025f28:	68db      	ldr	r3, [r3, #12]
 8025f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8025f2e:	687b      	ldr	r3, [r7, #4]
 8025f30:	695a      	ldr	r2, [r3, #20]
 8025f32:	687b      	ldr	r3, [r7, #4]
 8025f34:	699b      	ldr	r3, [r3, #24]
 8025f36:	431a      	orrs	r2, r3
 8025f38:	687b      	ldr	r3, [r7, #4]
 8025f3a:	681b      	ldr	r3, [r3, #0]
 8025f3c:	430a      	orrs	r2, r1
 8025f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025f40:	687b      	ldr	r3, [r7, #4]
 8025f42:	681b      	ldr	r3, [r3, #0]
 8025f44:	681a      	ldr	r2, [r3, #0]
 8025f46:	687b      	ldr	r3, [r7, #4]
 8025f48:	681b      	ldr	r3, [r3, #0]
 8025f4a:	f042 0201 	orr.w	r2, r2, #1
 8025f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025f50:	687b      	ldr	r3, [r7, #4]
 8025f52:	2200      	movs	r2, #0
 8025f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8025f56:	687b      	ldr	r3, [r7, #4]
 8025f58:	2220      	movs	r2, #32
 8025f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8025f5e:	687b      	ldr	r3, [r7, #4]
 8025f60:	2200      	movs	r2, #0
 8025f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025f64:	687b      	ldr	r3, [r7, #4]
 8025f66:	2200      	movs	r2, #0
 8025f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025f6c:	2300      	movs	r3, #0
}
 8025f6e:	4618      	mov	r0, r3
 8025f70:	3710      	adds	r7, #16
 8025f72:	46bd      	mov	sp, r7
 8025f74:	bd80      	pop	{r7, pc}
 8025f76:	bf00      	nop
 8025f78:	000186a0 	.word	0x000186a0
 8025f7c:	001e847f 	.word	0x001e847f
 8025f80:	003d08ff 	.word	0x003d08ff
 8025f84:	431bde83 	.word	0x431bde83
 8025f88:	10624dd3 	.word	0x10624dd3

08025f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8025f8c:	b480      	push	{r7}
 8025f8e:	b083      	sub	sp, #12
 8025f90:	af00      	add	r7, sp, #0
 8025f92:	6078      	str	r0, [r7, #4]
 8025f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8025f96:	687b      	ldr	r3, [r7, #4]
 8025f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025f9c:	b2db      	uxtb	r3, r3
 8025f9e:	2b20      	cmp	r3, #32
 8025fa0:	d129      	bne.n	8025ff6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8025fa2:	687b      	ldr	r3, [r7, #4]
 8025fa4:	2224      	movs	r2, #36	; 0x24
 8025fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8025faa:	687b      	ldr	r3, [r7, #4]
 8025fac:	681b      	ldr	r3, [r3, #0]
 8025fae:	681a      	ldr	r2, [r3, #0]
 8025fb0:	687b      	ldr	r3, [r7, #4]
 8025fb2:	681b      	ldr	r3, [r3, #0]
 8025fb4:	f022 0201 	bic.w	r2, r2, #1
 8025fb8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8025fba:	687b      	ldr	r3, [r7, #4]
 8025fbc:	681b      	ldr	r3, [r3, #0]
 8025fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025fc0:	687b      	ldr	r3, [r7, #4]
 8025fc2:	681b      	ldr	r3, [r3, #0]
 8025fc4:	f022 0210 	bic.w	r2, r2, #16
 8025fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8025fca:	687b      	ldr	r3, [r7, #4]
 8025fcc:	681b      	ldr	r3, [r3, #0]
 8025fce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8025fd0:	687b      	ldr	r3, [r7, #4]
 8025fd2:	681b      	ldr	r3, [r3, #0]
 8025fd4:	683a      	ldr	r2, [r7, #0]
 8025fd6:	430a      	orrs	r2, r1
 8025fd8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8025fda:	687b      	ldr	r3, [r7, #4]
 8025fdc:	681b      	ldr	r3, [r3, #0]
 8025fde:	681a      	ldr	r2, [r3, #0]
 8025fe0:	687b      	ldr	r3, [r7, #4]
 8025fe2:	681b      	ldr	r3, [r3, #0]
 8025fe4:	f042 0201 	orr.w	r2, r2, #1
 8025fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8025fea:	687b      	ldr	r3, [r7, #4]
 8025fec:	2220      	movs	r2, #32
 8025fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8025ff2:	2300      	movs	r3, #0
 8025ff4:	e000      	b.n	8025ff8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8025ff6:	2302      	movs	r3, #2
  }
}
 8025ff8:	4618      	mov	r0, r3
 8025ffa:	370c      	adds	r7, #12
 8025ffc:	46bd      	mov	sp, r7
 8025ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026002:	4770      	bx	lr

08026004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026004:	b480      	push	{r7}
 8026006:	b085      	sub	sp, #20
 8026008:	af00      	add	r7, sp, #0
 802600a:	6078      	str	r0, [r7, #4]
 802600c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 802600e:	2300      	movs	r3, #0
 8026010:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026012:	687b      	ldr	r3, [r7, #4]
 8026014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026018:	b2db      	uxtb	r3, r3
 802601a:	2b20      	cmp	r3, #32
 802601c:	d12a      	bne.n	8026074 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 802601e:	687b      	ldr	r3, [r7, #4]
 8026020:	2224      	movs	r2, #36	; 0x24
 8026022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026026:	687b      	ldr	r3, [r7, #4]
 8026028:	681b      	ldr	r3, [r3, #0]
 802602a:	681a      	ldr	r2, [r3, #0]
 802602c:	687b      	ldr	r3, [r7, #4]
 802602e:	681b      	ldr	r3, [r3, #0]
 8026030:	f022 0201 	bic.w	r2, r2, #1
 8026034:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026036:	687b      	ldr	r3, [r7, #4]
 8026038:	681b      	ldr	r3, [r3, #0]
 802603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802603c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 802603e:	89fb      	ldrh	r3, [r7, #14]
 8026040:	f023 030f 	bic.w	r3, r3, #15
 8026044:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026046:	683b      	ldr	r3, [r7, #0]
 8026048:	b29a      	uxth	r2, r3
 802604a:	89fb      	ldrh	r3, [r7, #14]
 802604c:	4313      	orrs	r3, r2
 802604e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026050:	687b      	ldr	r3, [r7, #4]
 8026052:	681b      	ldr	r3, [r3, #0]
 8026054:	89fa      	ldrh	r2, [r7, #14]
 8026056:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026058:	687b      	ldr	r3, [r7, #4]
 802605a:	681b      	ldr	r3, [r3, #0]
 802605c:	681a      	ldr	r2, [r3, #0]
 802605e:	687b      	ldr	r3, [r7, #4]
 8026060:	681b      	ldr	r3, [r3, #0]
 8026062:	f042 0201 	orr.w	r2, r2, #1
 8026066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026068:	687b      	ldr	r3, [r7, #4]
 802606a:	2220      	movs	r2, #32
 802606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026070:	2300      	movs	r3, #0
 8026072:	e000      	b.n	8026076 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026074:	2302      	movs	r3, #2
  }
}
 8026076:	4618      	mov	r0, r3
 8026078:	3714      	adds	r7, #20
 802607a:	46bd      	mov	sp, r7
 802607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026080:	4770      	bx	lr
	...

08026084 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026084:	b580      	push	{r7, lr}
 8026086:	b084      	sub	sp, #16
 8026088:	af00      	add	r7, sp, #0
 802608a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 802608c:	687b      	ldr	r3, [r7, #4]
 802608e:	2b00      	cmp	r3, #0
 8026090:	d101      	bne.n	8026096 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026092:	2301      	movs	r3, #1
 8026094:	e0bf      	b.n	8026216 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026096:	687b      	ldr	r3, [r7, #4]
 8026098:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 802609c:	b2db      	uxtb	r3, r3
 802609e:	2b00      	cmp	r3, #0
 80260a0:	d106      	bne.n	80260b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80260a2:	687b      	ldr	r3, [r7, #4]
 80260a4:	2200      	movs	r2, #0
 80260a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80260aa:	6878      	ldr	r0, [r7, #4]
 80260ac:	f7fb f93c 	bl	8021328 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80260b0:	687b      	ldr	r3, [r7, #4]
 80260b2:	2202      	movs	r2, #2
 80260b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80260b8:	687b      	ldr	r3, [r7, #4]
 80260ba:	681b      	ldr	r3, [r3, #0]
 80260bc:	699a      	ldr	r2, [r3, #24]
 80260be:	687b      	ldr	r3, [r7, #4]
 80260c0:	681b      	ldr	r3, [r3, #0]
 80260c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80260c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80260c8:	687b      	ldr	r3, [r7, #4]
 80260ca:	681b      	ldr	r3, [r3, #0]
 80260cc:	6999      	ldr	r1, [r3, #24]
 80260ce:	687b      	ldr	r3, [r7, #4]
 80260d0:	685a      	ldr	r2, [r3, #4]
 80260d2:	687b      	ldr	r3, [r7, #4]
 80260d4:	689b      	ldr	r3, [r3, #8]
 80260d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80260d8:	687b      	ldr	r3, [r7, #4]
 80260da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80260dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80260de:	687b      	ldr	r3, [r7, #4]
 80260e0:	691b      	ldr	r3, [r3, #16]
 80260e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	681b      	ldr	r3, [r3, #0]
 80260e8:	430a      	orrs	r2, r1
 80260ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80260ec:	687b      	ldr	r3, [r7, #4]
 80260ee:	681b      	ldr	r3, [r3, #0]
 80260f0:	6899      	ldr	r1, [r3, #8]
 80260f2:	687b      	ldr	r3, [r7, #4]
 80260f4:	681a      	ldr	r2, [r3, #0]
 80260f6:	4b4a      	ldr	r3, [pc, #296]	; (8026220 <HAL_LTDC_Init+0x19c>)
 80260f8:	400b      	ands	r3, r1
 80260fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80260fc:	687b      	ldr	r3, [r7, #4]
 80260fe:	695b      	ldr	r3, [r3, #20]
 8026100:	041b      	lsls	r3, r3, #16
 8026102:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	681b      	ldr	r3, [r3, #0]
 8026108:	6899      	ldr	r1, [r3, #8]
 802610a:	687b      	ldr	r3, [r7, #4]
 802610c:	699a      	ldr	r2, [r3, #24]
 802610e:	68fb      	ldr	r3, [r7, #12]
 8026110:	431a      	orrs	r2, r3
 8026112:	687b      	ldr	r3, [r7, #4]
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	430a      	orrs	r2, r1
 8026118:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 802611a:	687b      	ldr	r3, [r7, #4]
 802611c:	681b      	ldr	r3, [r3, #0]
 802611e:	68d9      	ldr	r1, [r3, #12]
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	681a      	ldr	r2, [r3, #0]
 8026124:	4b3e      	ldr	r3, [pc, #248]	; (8026220 <HAL_LTDC_Init+0x19c>)
 8026126:	400b      	ands	r3, r1
 8026128:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	69db      	ldr	r3, [r3, #28]
 802612e:	041b      	lsls	r3, r3, #16
 8026130:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	681b      	ldr	r3, [r3, #0]
 8026136:	68d9      	ldr	r1, [r3, #12]
 8026138:	687b      	ldr	r3, [r7, #4]
 802613a:	6a1a      	ldr	r2, [r3, #32]
 802613c:	68fb      	ldr	r3, [r7, #12]
 802613e:	431a      	orrs	r2, r3
 8026140:	687b      	ldr	r3, [r7, #4]
 8026142:	681b      	ldr	r3, [r3, #0]
 8026144:	430a      	orrs	r2, r1
 8026146:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	681b      	ldr	r3, [r3, #0]
 802614c:	6919      	ldr	r1, [r3, #16]
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	681a      	ldr	r2, [r3, #0]
 8026152:	4b33      	ldr	r3, [pc, #204]	; (8026220 <HAL_LTDC_Init+0x19c>)
 8026154:	400b      	ands	r3, r1
 8026156:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802615c:	041b      	lsls	r3, r3, #16
 802615e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026160:	687b      	ldr	r3, [r7, #4]
 8026162:	681b      	ldr	r3, [r3, #0]
 8026164:	6919      	ldr	r1, [r3, #16]
 8026166:	687b      	ldr	r3, [r7, #4]
 8026168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802616a:	68fb      	ldr	r3, [r7, #12]
 802616c:	431a      	orrs	r2, r3
 802616e:	687b      	ldr	r3, [r7, #4]
 8026170:	681b      	ldr	r3, [r3, #0]
 8026172:	430a      	orrs	r2, r1
 8026174:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026176:	687b      	ldr	r3, [r7, #4]
 8026178:	681b      	ldr	r3, [r3, #0]
 802617a:	6959      	ldr	r1, [r3, #20]
 802617c:	687b      	ldr	r3, [r7, #4]
 802617e:	681a      	ldr	r2, [r3, #0]
 8026180:	4b27      	ldr	r3, [pc, #156]	; (8026220 <HAL_LTDC_Init+0x19c>)
 8026182:	400b      	ands	r3, r1
 8026184:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026186:	687b      	ldr	r3, [r7, #4]
 8026188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802618a:	041b      	lsls	r3, r3, #16
 802618c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 802618e:	687b      	ldr	r3, [r7, #4]
 8026190:	681b      	ldr	r3, [r3, #0]
 8026192:	6959      	ldr	r1, [r3, #20]
 8026194:	687b      	ldr	r3, [r7, #4]
 8026196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026198:	68fb      	ldr	r3, [r7, #12]
 802619a:	431a      	orrs	r2, r3
 802619c:	687b      	ldr	r3, [r7, #4]
 802619e:	681b      	ldr	r3, [r3, #0]
 80261a0:	430a      	orrs	r2, r1
 80261a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80261a4:	687b      	ldr	r3, [r7, #4]
 80261a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80261aa:	021b      	lsls	r3, r3, #8
 80261ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80261ae:	687b      	ldr	r3, [r7, #4]
 80261b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80261b4:	041b      	lsls	r3, r3, #16
 80261b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80261b8:	687b      	ldr	r3, [r7, #4]
 80261ba:	681b      	ldr	r3, [r3, #0]
 80261bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80261be:	687b      	ldr	r3, [r7, #4]
 80261c0:	681b      	ldr	r3, [r3, #0]
 80261c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80261c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80261c8:	687b      	ldr	r3, [r7, #4]
 80261ca:	681b      	ldr	r3, [r3, #0]
 80261cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80261ce:	68ba      	ldr	r2, [r7, #8]
 80261d0:	68fb      	ldr	r3, [r7, #12]
 80261d2:	4313      	orrs	r3, r2
 80261d4:	687a      	ldr	r2, [r7, #4]
 80261d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80261da:	431a      	orrs	r2, r3
 80261dc:	687b      	ldr	r3, [r7, #4]
 80261de:	681b      	ldr	r3, [r3, #0]
 80261e0:	430a      	orrs	r2, r1
 80261e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80261e4:	687b      	ldr	r3, [r7, #4]
 80261e6:	681b      	ldr	r3, [r3, #0]
 80261e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80261ea:	687b      	ldr	r3, [r7, #4]
 80261ec:	681b      	ldr	r3, [r3, #0]
 80261ee:	f042 0206 	orr.w	r2, r2, #6
 80261f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80261f4:	687b      	ldr	r3, [r7, #4]
 80261f6:	681b      	ldr	r3, [r3, #0]
 80261f8:	699a      	ldr	r2, [r3, #24]
 80261fa:	687b      	ldr	r3, [r7, #4]
 80261fc:	681b      	ldr	r3, [r3, #0]
 80261fe:	f042 0201 	orr.w	r2, r2, #1
 8026202:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026204:	687b      	ldr	r3, [r7, #4]
 8026206:	2200      	movs	r2, #0
 8026208:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	2201      	movs	r2, #1
 8026210:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026214:	2300      	movs	r3, #0
}
 8026216:	4618      	mov	r0, r3
 8026218:	3710      	adds	r7, #16
 802621a:	46bd      	mov	sp, r7
 802621c:	bd80      	pop	{r7, pc}
 802621e:	bf00      	nop
 8026220:	f000f800 	.word	0xf000f800

08026224 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026224:	b580      	push	{r7, lr}
 8026226:	b084      	sub	sp, #16
 8026228:	af00      	add	r7, sp, #0
 802622a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 802622c:	687b      	ldr	r3, [r7, #4]
 802622e:	681b      	ldr	r3, [r3, #0]
 8026230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026232:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026234:	687b      	ldr	r3, [r7, #4]
 8026236:	681b      	ldr	r3, [r3, #0]
 8026238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802623a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 802623c:	68fb      	ldr	r3, [r7, #12]
 802623e:	f003 0304 	and.w	r3, r3, #4
 8026242:	2b00      	cmp	r3, #0
 8026244:	d023      	beq.n	802628e <HAL_LTDC_IRQHandler+0x6a>
 8026246:	68bb      	ldr	r3, [r7, #8]
 8026248:	f003 0304 	and.w	r3, r3, #4
 802624c:	2b00      	cmp	r3, #0
 802624e:	d01e      	beq.n	802628e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026250:	687b      	ldr	r3, [r7, #4]
 8026252:	681b      	ldr	r3, [r3, #0]
 8026254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026256:	687b      	ldr	r3, [r7, #4]
 8026258:	681b      	ldr	r3, [r3, #0]
 802625a:	f022 0204 	bic.w	r2, r2, #4
 802625e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026260:	687b      	ldr	r3, [r7, #4]
 8026262:	681b      	ldr	r3, [r3, #0]
 8026264:	2204      	movs	r2, #4
 8026266:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 802626e:	f043 0201 	orr.w	r2, r3, #1
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026278:	687b      	ldr	r3, [r7, #4]
 802627a:	2204      	movs	r2, #4
 802627c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026280:	687b      	ldr	r3, [r7, #4]
 8026282:	2200      	movs	r2, #0
 8026284:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026288:	6878      	ldr	r0, [r7, #4]
 802628a:	f000 f86f 	bl	802636c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 802628e:	68fb      	ldr	r3, [r7, #12]
 8026290:	f003 0302 	and.w	r3, r3, #2
 8026294:	2b00      	cmp	r3, #0
 8026296:	d023      	beq.n	80262e0 <HAL_LTDC_IRQHandler+0xbc>
 8026298:	68bb      	ldr	r3, [r7, #8]
 802629a:	f003 0302 	and.w	r3, r3, #2
 802629e:	2b00      	cmp	r3, #0
 80262a0:	d01e      	beq.n	80262e0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80262a2:	687b      	ldr	r3, [r7, #4]
 80262a4:	681b      	ldr	r3, [r3, #0]
 80262a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	f022 0202 	bic.w	r2, r2, #2
 80262b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80262b2:	687b      	ldr	r3, [r7, #4]
 80262b4:	681b      	ldr	r3, [r3, #0]
 80262b6:	2202      	movs	r2, #2
 80262b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80262ba:	687b      	ldr	r3, [r7, #4]
 80262bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80262c0:	f043 0202 	orr.w	r2, r3, #2
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	2204      	movs	r2, #4
 80262ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	2200      	movs	r2, #0
 80262d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80262da:	6878      	ldr	r0, [r7, #4]
 80262dc:	f000 f846 	bl	802636c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80262e0:	68fb      	ldr	r3, [r7, #12]
 80262e2:	f003 0301 	and.w	r3, r3, #1
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	d01b      	beq.n	8026322 <HAL_LTDC_IRQHandler+0xfe>
 80262ea:	68bb      	ldr	r3, [r7, #8]
 80262ec:	f003 0301 	and.w	r3, r3, #1
 80262f0:	2b00      	cmp	r3, #0
 80262f2:	d016      	beq.n	8026322 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80262f4:	687b      	ldr	r3, [r7, #4]
 80262f6:	681b      	ldr	r3, [r3, #0]
 80262f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80262fa:	687b      	ldr	r3, [r7, #4]
 80262fc:	681b      	ldr	r3, [r3, #0]
 80262fe:	f022 0201 	bic.w	r2, r2, #1
 8026302:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026304:	687b      	ldr	r3, [r7, #4]
 8026306:	681b      	ldr	r3, [r3, #0]
 8026308:	2201      	movs	r2, #1
 802630a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 802630c:	687b      	ldr	r3, [r7, #4]
 802630e:	2201      	movs	r2, #1
 8026310:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026314:	687b      	ldr	r3, [r7, #4]
 8026316:	2200      	movs	r2, #0
 8026318:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 802631c:	6878      	ldr	r0, [r7, #4]
 802631e:	f000 f82f 	bl	8026380 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026322:	68fb      	ldr	r3, [r7, #12]
 8026324:	f003 0308 	and.w	r3, r3, #8
 8026328:	2b00      	cmp	r3, #0
 802632a:	d01b      	beq.n	8026364 <HAL_LTDC_IRQHandler+0x140>
 802632c:	68bb      	ldr	r3, [r7, #8]
 802632e:	f003 0308 	and.w	r3, r3, #8
 8026332:	2b00      	cmp	r3, #0
 8026334:	d016      	beq.n	8026364 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026336:	687b      	ldr	r3, [r7, #4]
 8026338:	681b      	ldr	r3, [r3, #0]
 802633a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802633c:	687b      	ldr	r3, [r7, #4]
 802633e:	681b      	ldr	r3, [r3, #0]
 8026340:	f022 0208 	bic.w	r2, r2, #8
 8026344:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026346:	687b      	ldr	r3, [r7, #4]
 8026348:	681b      	ldr	r3, [r3, #0]
 802634a:	2208      	movs	r2, #8
 802634c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	2201      	movs	r2, #1
 8026352:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026356:	687b      	ldr	r3, [r7, #4]
 8026358:	2200      	movs	r2, #0
 802635a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 802635e:	6878      	ldr	r0, [r7, #4]
 8026360:	f000 f818 	bl	8026394 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026364:	bf00      	nop
 8026366:	3710      	adds	r7, #16
 8026368:	46bd      	mov	sp, r7
 802636a:	bd80      	pop	{r7, pc}

0802636c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 802636c:	b480      	push	{r7}
 802636e:	b083      	sub	sp, #12
 8026370:	af00      	add	r7, sp, #0
 8026372:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026374:	bf00      	nop
 8026376:	370c      	adds	r7, #12
 8026378:	46bd      	mov	sp, r7
 802637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802637e:	4770      	bx	lr

08026380 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026380:	b480      	push	{r7}
 8026382:	b083      	sub	sp, #12
 8026384:	af00      	add	r7, sp, #0
 8026386:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026388:	bf00      	nop
 802638a:	370c      	adds	r7, #12
 802638c:	46bd      	mov	sp, r7
 802638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026392:	4770      	bx	lr

08026394 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026394:	b480      	push	{r7}
 8026396:	b083      	sub	sp, #12
 8026398:	af00      	add	r7, sp, #0
 802639a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 802639c:	bf00      	nop
 802639e:	370c      	adds	r7, #12
 80263a0:	46bd      	mov	sp, r7
 80263a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263a6:	4770      	bx	lr

080263a8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80263a8:	b5b0      	push	{r4, r5, r7, lr}
 80263aa:	b084      	sub	sp, #16
 80263ac:	af00      	add	r7, sp, #0
 80263ae:	60f8      	str	r0, [r7, #12]
 80263b0:	60b9      	str	r1, [r7, #8]
 80263b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80263b4:	68fb      	ldr	r3, [r7, #12]
 80263b6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80263ba:	2b01      	cmp	r3, #1
 80263bc:	d101      	bne.n	80263c2 <HAL_LTDC_ConfigLayer+0x1a>
 80263be:	2302      	movs	r3, #2
 80263c0:	e02c      	b.n	802641c <HAL_LTDC_ConfigLayer+0x74>
 80263c2:	68fb      	ldr	r3, [r7, #12]
 80263c4:	2201      	movs	r2, #1
 80263c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80263ca:	68fb      	ldr	r3, [r7, #12]
 80263cc:	2202      	movs	r2, #2
 80263ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80263d2:	68fa      	ldr	r2, [r7, #12]
 80263d4:	687b      	ldr	r3, [r7, #4]
 80263d6:	2134      	movs	r1, #52	; 0x34
 80263d8:	fb01 f303 	mul.w	r3, r1, r3
 80263dc:	4413      	add	r3, r2
 80263de:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80263e2:	68bb      	ldr	r3, [r7, #8]
 80263e4:	4614      	mov	r4, r2
 80263e6:	461d      	mov	r5, r3
 80263e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80263ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80263ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80263ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80263f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80263f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80263f4:	682b      	ldr	r3, [r5, #0]
 80263f6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80263f8:	687a      	ldr	r2, [r7, #4]
 80263fa:	68b9      	ldr	r1, [r7, #8]
 80263fc:	68f8      	ldr	r0, [r7, #12]
 80263fe:	f000 f8b9 	bl	8026574 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026402:	68fb      	ldr	r3, [r7, #12]
 8026404:	681b      	ldr	r3, [r3, #0]
 8026406:	2201      	movs	r2, #1
 8026408:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 802640a:	68fb      	ldr	r3, [r7, #12]
 802640c:	2201      	movs	r2, #1
 802640e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026412:	68fb      	ldr	r3, [r7, #12]
 8026414:	2200      	movs	r2, #0
 8026416:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802641a:	2300      	movs	r3, #0
}
 802641c:	4618      	mov	r0, r3
 802641e:	3710      	adds	r7, #16
 8026420:	46bd      	mov	sp, r7
 8026422:	bdb0      	pop	{r4, r5, r7, pc}

08026424 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026424:	b480      	push	{r7}
 8026426:	b085      	sub	sp, #20
 8026428:	af00      	add	r7, sp, #0
 802642a:	60f8      	str	r0, [r7, #12]
 802642c:	60b9      	str	r1, [r7, #8]
 802642e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026430:	68fb      	ldr	r3, [r7, #12]
 8026432:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026436:	2b01      	cmp	r3, #1
 8026438:	d101      	bne.n	802643e <HAL_LTDC_ConfigColorKeying+0x1a>
 802643a:	2302      	movs	r3, #2
 802643c:	e030      	b.n	80264a0 <HAL_LTDC_ConfigColorKeying+0x7c>
 802643e:	68fb      	ldr	r3, [r7, #12]
 8026440:	2201      	movs	r2, #1
 8026442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026446:	68fb      	ldr	r3, [r7, #12]
 8026448:	2202      	movs	r2, #2
 802644a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 802644e:	68fb      	ldr	r3, [r7, #12]
 8026450:	681b      	ldr	r3, [r3, #0]
 8026452:	461a      	mov	r2, r3
 8026454:	687b      	ldr	r3, [r7, #4]
 8026456:	01db      	lsls	r3, r3, #7
 8026458:	4413      	add	r3, r2
 802645a:	3384      	adds	r3, #132	; 0x84
 802645c:	68db      	ldr	r3, [r3, #12]
 802645e:	68fa      	ldr	r2, [r7, #12]
 8026460:	6812      	ldr	r2, [r2, #0]
 8026462:	4611      	mov	r1, r2
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	01d2      	lsls	r2, r2, #7
 8026468:	440a      	add	r2, r1
 802646a:	3284      	adds	r2, #132	; 0x84
 802646c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8026470:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8026472:	68fb      	ldr	r3, [r7, #12]
 8026474:	681b      	ldr	r3, [r3, #0]
 8026476:	461a      	mov	r2, r3
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	01db      	lsls	r3, r3, #7
 802647c:	4413      	add	r3, r2
 802647e:	3384      	adds	r3, #132	; 0x84
 8026480:	461a      	mov	r2, r3
 8026482:	68bb      	ldr	r3, [r7, #8]
 8026484:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026486:	68fb      	ldr	r3, [r7, #12]
 8026488:	681b      	ldr	r3, [r3, #0]
 802648a:	2201      	movs	r2, #1
 802648c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802648e:	68fb      	ldr	r3, [r7, #12]
 8026490:	2201      	movs	r2, #1
 8026492:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026496:	68fb      	ldr	r3, [r7, #12]
 8026498:	2200      	movs	r2, #0
 802649a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802649e:	2300      	movs	r3, #0
}
 80264a0:	4618      	mov	r0, r3
 80264a2:	3714      	adds	r7, #20
 80264a4:	46bd      	mov	sp, r7
 80264a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80264aa:	4770      	bx	lr

080264ac <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80264ac:	b480      	push	{r7}
 80264ae:	b083      	sub	sp, #12
 80264b0:	af00      	add	r7, sp, #0
 80264b2:	6078      	str	r0, [r7, #4]
 80264b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80264b6:	687b      	ldr	r3, [r7, #4]
 80264b8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80264bc:	2b01      	cmp	r3, #1
 80264be:	d101      	bne.n	80264c4 <HAL_LTDC_EnableColorKeying+0x18>
 80264c0:	2302      	movs	r3, #2
 80264c2:	e026      	b.n	8026512 <HAL_LTDC_EnableColorKeying+0x66>
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	2201      	movs	r2, #1
 80264c8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80264cc:	687b      	ldr	r3, [r7, #4]
 80264ce:	2202      	movs	r2, #2
 80264d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80264d4:	687b      	ldr	r3, [r7, #4]
 80264d6:	681b      	ldr	r3, [r3, #0]
 80264d8:	461a      	mov	r2, r3
 80264da:	683b      	ldr	r3, [r7, #0]
 80264dc:	01db      	lsls	r3, r3, #7
 80264de:	4413      	add	r3, r2
 80264e0:	3384      	adds	r3, #132	; 0x84
 80264e2:	681b      	ldr	r3, [r3, #0]
 80264e4:	687a      	ldr	r2, [r7, #4]
 80264e6:	6812      	ldr	r2, [r2, #0]
 80264e8:	4611      	mov	r1, r2
 80264ea:	683a      	ldr	r2, [r7, #0]
 80264ec:	01d2      	lsls	r2, r2, #7
 80264ee:	440a      	add	r2, r1
 80264f0:	3284      	adds	r2, #132	; 0x84
 80264f2:	f043 0302 	orr.w	r3, r3, #2
 80264f6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	2201      	movs	r2, #1
 80264fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026500:	687b      	ldr	r3, [r7, #4]
 8026502:	2201      	movs	r2, #1
 8026504:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026508:	687b      	ldr	r3, [r7, #4]
 802650a:	2200      	movs	r2, #0
 802650c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026510:	2300      	movs	r3, #0
}
 8026512:	4618      	mov	r0, r3
 8026514:	370c      	adds	r7, #12
 8026516:	46bd      	mov	sp, r7
 8026518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802651c:	4770      	bx	lr
	...

08026520 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8026520:	b480      	push	{r7}
 8026522:	b083      	sub	sp, #12
 8026524:	af00      	add	r7, sp, #0
 8026526:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026528:	687b      	ldr	r3, [r7, #4]
 802652a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802652e:	2b01      	cmp	r3, #1
 8026530:	d101      	bne.n	8026536 <HAL_LTDC_EnableDither+0x16>
 8026532:	2302      	movs	r3, #2
 8026534:	e016      	b.n	8026564 <HAL_LTDC_EnableDither+0x44>
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	2201      	movs	r2, #1
 802653a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	2202      	movs	r2, #2
 8026542:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026546:	4b0a      	ldr	r3, [pc, #40]	; (8026570 <HAL_LTDC_EnableDither+0x50>)
 8026548:	699b      	ldr	r3, [r3, #24]
 802654a:	4a09      	ldr	r2, [pc, #36]	; (8026570 <HAL_LTDC_EnableDither+0x50>)
 802654c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026550:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026552:	687b      	ldr	r3, [r7, #4]
 8026554:	2201      	movs	r2, #1
 8026556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802655a:	687b      	ldr	r3, [r7, #4]
 802655c:	2200      	movs	r2, #0
 802655e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026562:	2300      	movs	r3, #0
}
 8026564:	4618      	mov	r0, r3
 8026566:	370c      	adds	r7, #12
 8026568:	46bd      	mov	sp, r7
 802656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802656e:	4770      	bx	lr
 8026570:	40016800 	.word	0x40016800

08026574 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026574:	b480      	push	{r7}
 8026576:	b089      	sub	sp, #36	; 0x24
 8026578:	af00      	add	r7, sp, #0
 802657a:	60f8      	str	r0, [r7, #12]
 802657c:	60b9      	str	r1, [r7, #8]
 802657e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026580:	68bb      	ldr	r3, [r7, #8]
 8026582:	685a      	ldr	r2, [r3, #4]
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	681b      	ldr	r3, [r3, #0]
 8026588:	68db      	ldr	r3, [r3, #12]
 802658a:	0c1b      	lsrs	r3, r3, #16
 802658c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026590:	4413      	add	r3, r2
 8026592:	041b      	lsls	r3, r3, #16
 8026594:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8026596:	68fb      	ldr	r3, [r7, #12]
 8026598:	681b      	ldr	r3, [r3, #0]
 802659a:	461a      	mov	r2, r3
 802659c:	687b      	ldr	r3, [r7, #4]
 802659e:	01db      	lsls	r3, r3, #7
 80265a0:	4413      	add	r3, r2
 80265a2:	3384      	adds	r3, #132	; 0x84
 80265a4:	685b      	ldr	r3, [r3, #4]
 80265a6:	68fa      	ldr	r2, [r7, #12]
 80265a8:	6812      	ldr	r2, [r2, #0]
 80265aa:	4611      	mov	r1, r2
 80265ac:	687a      	ldr	r2, [r7, #4]
 80265ae:	01d2      	lsls	r2, r2, #7
 80265b0:	440a      	add	r2, r1
 80265b2:	3284      	adds	r2, #132	; 0x84
 80265b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80265b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80265ba:	68bb      	ldr	r3, [r7, #8]
 80265bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80265be:	68fb      	ldr	r3, [r7, #12]
 80265c0:	681b      	ldr	r3, [r3, #0]
 80265c2:	68db      	ldr	r3, [r3, #12]
 80265c4:	0c1b      	lsrs	r3, r3, #16
 80265c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80265ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80265cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	681b      	ldr	r3, [r3, #0]
 80265d2:	4619      	mov	r1, r3
 80265d4:	687b      	ldr	r3, [r7, #4]
 80265d6:	01db      	lsls	r3, r3, #7
 80265d8:	440b      	add	r3, r1
 80265da:	3384      	adds	r3, #132	; 0x84
 80265dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80265de:	69fb      	ldr	r3, [r7, #28]
 80265e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80265e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80265e4:	68bb      	ldr	r3, [r7, #8]
 80265e6:	68da      	ldr	r2, [r3, #12]
 80265e8:	68fb      	ldr	r3, [r7, #12]
 80265ea:	681b      	ldr	r3, [r3, #0]
 80265ec:	68db      	ldr	r3, [r3, #12]
 80265ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80265f2:	4413      	add	r3, r2
 80265f4:	041b      	lsls	r3, r3, #16
 80265f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80265f8:	68fb      	ldr	r3, [r7, #12]
 80265fa:	681b      	ldr	r3, [r3, #0]
 80265fc:	461a      	mov	r2, r3
 80265fe:	687b      	ldr	r3, [r7, #4]
 8026600:	01db      	lsls	r3, r3, #7
 8026602:	4413      	add	r3, r2
 8026604:	3384      	adds	r3, #132	; 0x84
 8026606:	689b      	ldr	r3, [r3, #8]
 8026608:	68fa      	ldr	r2, [r7, #12]
 802660a:	6812      	ldr	r2, [r2, #0]
 802660c:	4611      	mov	r1, r2
 802660e:	687a      	ldr	r2, [r7, #4]
 8026610:	01d2      	lsls	r2, r2, #7
 8026612:	440a      	add	r2, r1
 8026614:	3284      	adds	r2, #132	; 0x84
 8026616:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 802661a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802661c:	68bb      	ldr	r3, [r7, #8]
 802661e:	689a      	ldr	r2, [r3, #8]
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	681b      	ldr	r3, [r3, #0]
 8026624:	68db      	ldr	r3, [r3, #12]
 8026626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802662a:	4413      	add	r3, r2
 802662c:	1c5a      	adds	r2, r3, #1
 802662e:	68fb      	ldr	r3, [r7, #12]
 8026630:	681b      	ldr	r3, [r3, #0]
 8026632:	4619      	mov	r1, r3
 8026634:	687b      	ldr	r3, [r7, #4]
 8026636:	01db      	lsls	r3, r3, #7
 8026638:	440b      	add	r3, r1
 802663a:	3384      	adds	r3, #132	; 0x84
 802663c:	4619      	mov	r1, r3
 802663e:	69fb      	ldr	r3, [r7, #28]
 8026640:	4313      	orrs	r3, r2
 8026642:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8026644:	68fb      	ldr	r3, [r7, #12]
 8026646:	681b      	ldr	r3, [r3, #0]
 8026648:	461a      	mov	r2, r3
 802664a:	687b      	ldr	r3, [r7, #4]
 802664c:	01db      	lsls	r3, r3, #7
 802664e:	4413      	add	r3, r2
 8026650:	3384      	adds	r3, #132	; 0x84
 8026652:	691b      	ldr	r3, [r3, #16]
 8026654:	68fa      	ldr	r2, [r7, #12]
 8026656:	6812      	ldr	r2, [r2, #0]
 8026658:	4611      	mov	r1, r2
 802665a:	687a      	ldr	r2, [r7, #4]
 802665c:	01d2      	lsls	r2, r2, #7
 802665e:	440a      	add	r2, r1
 8026660:	3284      	adds	r2, #132	; 0x84
 8026662:	f023 0307 	bic.w	r3, r3, #7
 8026666:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8026668:	68fb      	ldr	r3, [r7, #12]
 802666a:	681b      	ldr	r3, [r3, #0]
 802666c:	461a      	mov	r2, r3
 802666e:	687b      	ldr	r3, [r7, #4]
 8026670:	01db      	lsls	r3, r3, #7
 8026672:	4413      	add	r3, r2
 8026674:	3384      	adds	r3, #132	; 0x84
 8026676:	461a      	mov	r2, r3
 8026678:	68bb      	ldr	r3, [r7, #8]
 802667a:	691b      	ldr	r3, [r3, #16]
 802667c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802667e:	68bb      	ldr	r3, [r7, #8]
 8026680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8026684:	021b      	lsls	r3, r3, #8
 8026686:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8026688:	68bb      	ldr	r3, [r7, #8]
 802668a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802668e:	041b      	lsls	r3, r3, #16
 8026690:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8026692:	68bb      	ldr	r3, [r7, #8]
 8026694:	699b      	ldr	r3, [r3, #24]
 8026696:	061b      	lsls	r3, r3, #24
 8026698:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 802669a:	68fb      	ldr	r3, [r7, #12]
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	461a      	mov	r2, r3
 80266a0:	687b      	ldr	r3, [r7, #4]
 80266a2:	01db      	lsls	r3, r3, #7
 80266a4:	4413      	add	r3, r2
 80266a6:	3384      	adds	r3, #132	; 0x84
 80266a8:	699b      	ldr	r3, [r3, #24]
 80266aa:	68fb      	ldr	r3, [r7, #12]
 80266ac:	681b      	ldr	r3, [r3, #0]
 80266ae:	461a      	mov	r2, r3
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	01db      	lsls	r3, r3, #7
 80266b4:	4413      	add	r3, r2
 80266b6:	3384      	adds	r3, #132	; 0x84
 80266b8:	461a      	mov	r2, r3
 80266ba:	2300      	movs	r3, #0
 80266bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80266be:	68bb      	ldr	r3, [r7, #8]
 80266c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80266c4:	461a      	mov	r2, r3
 80266c6:	69fb      	ldr	r3, [r7, #28]
 80266c8:	431a      	orrs	r2, r3
 80266ca:	69bb      	ldr	r3, [r7, #24]
 80266cc:	431a      	orrs	r2, r3
 80266ce:	68fb      	ldr	r3, [r7, #12]
 80266d0:	681b      	ldr	r3, [r3, #0]
 80266d2:	4619      	mov	r1, r3
 80266d4:	687b      	ldr	r3, [r7, #4]
 80266d6:	01db      	lsls	r3, r3, #7
 80266d8:	440b      	add	r3, r1
 80266da:	3384      	adds	r3, #132	; 0x84
 80266dc:	4619      	mov	r1, r3
 80266de:	697b      	ldr	r3, [r7, #20]
 80266e0:	4313      	orrs	r3, r2
 80266e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	681b      	ldr	r3, [r3, #0]
 80266e8:	461a      	mov	r2, r3
 80266ea:	687b      	ldr	r3, [r7, #4]
 80266ec:	01db      	lsls	r3, r3, #7
 80266ee:	4413      	add	r3, r2
 80266f0:	3384      	adds	r3, #132	; 0x84
 80266f2:	695b      	ldr	r3, [r3, #20]
 80266f4:	68fa      	ldr	r2, [r7, #12]
 80266f6:	6812      	ldr	r2, [r2, #0]
 80266f8:	4611      	mov	r1, r2
 80266fa:	687a      	ldr	r2, [r7, #4]
 80266fc:	01d2      	lsls	r2, r2, #7
 80266fe:	440a      	add	r2, r1
 8026700:	3284      	adds	r2, #132	; 0x84
 8026702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026706:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8026708:	68fb      	ldr	r3, [r7, #12]
 802670a:	681b      	ldr	r3, [r3, #0]
 802670c:	461a      	mov	r2, r3
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	01db      	lsls	r3, r3, #7
 8026712:	4413      	add	r3, r2
 8026714:	3384      	adds	r3, #132	; 0x84
 8026716:	461a      	mov	r2, r3
 8026718:	68bb      	ldr	r3, [r7, #8]
 802671a:	695b      	ldr	r3, [r3, #20]
 802671c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 802671e:	68fb      	ldr	r3, [r7, #12]
 8026720:	681b      	ldr	r3, [r3, #0]
 8026722:	461a      	mov	r2, r3
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	01db      	lsls	r3, r3, #7
 8026728:	4413      	add	r3, r2
 802672a:	3384      	adds	r3, #132	; 0x84
 802672c:	69db      	ldr	r3, [r3, #28]
 802672e:	68fa      	ldr	r2, [r7, #12]
 8026730:	6812      	ldr	r2, [r2, #0]
 8026732:	4611      	mov	r1, r2
 8026734:	687a      	ldr	r2, [r7, #4]
 8026736:	01d2      	lsls	r2, r2, #7
 8026738:	440a      	add	r2, r1
 802673a:	3284      	adds	r2, #132	; 0x84
 802673c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026740:	f023 0307 	bic.w	r3, r3, #7
 8026744:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8026746:	68bb      	ldr	r3, [r7, #8]
 8026748:	69da      	ldr	r2, [r3, #28]
 802674a:	68bb      	ldr	r3, [r7, #8]
 802674c:	6a1b      	ldr	r3, [r3, #32]
 802674e:	68f9      	ldr	r1, [r7, #12]
 8026750:	6809      	ldr	r1, [r1, #0]
 8026752:	4608      	mov	r0, r1
 8026754:	6879      	ldr	r1, [r7, #4]
 8026756:	01c9      	lsls	r1, r1, #7
 8026758:	4401      	add	r1, r0
 802675a:	3184      	adds	r1, #132	; 0x84
 802675c:	4313      	orrs	r3, r2
 802675e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8026760:	68fb      	ldr	r3, [r7, #12]
 8026762:	681b      	ldr	r3, [r3, #0]
 8026764:	461a      	mov	r2, r3
 8026766:	687b      	ldr	r3, [r7, #4]
 8026768:	01db      	lsls	r3, r3, #7
 802676a:	4413      	add	r3, r2
 802676c:	3384      	adds	r3, #132	; 0x84
 802676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026770:	68fb      	ldr	r3, [r7, #12]
 8026772:	681b      	ldr	r3, [r3, #0]
 8026774:	461a      	mov	r2, r3
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	01db      	lsls	r3, r3, #7
 802677a:	4413      	add	r3, r2
 802677c:	3384      	adds	r3, #132	; 0x84
 802677e:	461a      	mov	r2, r3
 8026780:	2300      	movs	r3, #0
 8026782:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8026784:	68fb      	ldr	r3, [r7, #12]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	461a      	mov	r2, r3
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	01db      	lsls	r3, r3, #7
 802678e:	4413      	add	r3, r2
 8026790:	3384      	adds	r3, #132	; 0x84
 8026792:	461a      	mov	r2, r3
 8026794:	68bb      	ldr	r3, [r7, #8]
 8026796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026798:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802679a:	68bb      	ldr	r3, [r7, #8]
 802679c:	691b      	ldr	r3, [r3, #16]
 802679e:	2b00      	cmp	r3, #0
 80267a0:	d102      	bne.n	80267a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80267a2:	2304      	movs	r3, #4
 80267a4:	61fb      	str	r3, [r7, #28]
 80267a6:	e01b      	b.n	80267e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80267a8:	68bb      	ldr	r3, [r7, #8]
 80267aa:	691b      	ldr	r3, [r3, #16]
 80267ac:	2b01      	cmp	r3, #1
 80267ae:	d102      	bne.n	80267b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80267b0:	2303      	movs	r3, #3
 80267b2:	61fb      	str	r3, [r7, #28]
 80267b4:	e014      	b.n	80267e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80267b6:	68bb      	ldr	r3, [r7, #8]
 80267b8:	691b      	ldr	r3, [r3, #16]
 80267ba:	2b04      	cmp	r3, #4
 80267bc:	d00b      	beq.n	80267d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80267be:	68bb      	ldr	r3, [r7, #8]
 80267c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80267c2:	2b02      	cmp	r3, #2
 80267c4:	d007      	beq.n	80267d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80267c6:	68bb      	ldr	r3, [r7, #8]
 80267c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80267ca:	2b03      	cmp	r3, #3
 80267cc:	d003      	beq.n	80267d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80267ce:	68bb      	ldr	r3, [r7, #8]
 80267d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80267d2:	2b07      	cmp	r3, #7
 80267d4:	d102      	bne.n	80267dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80267d6:	2302      	movs	r3, #2
 80267d8:	61fb      	str	r3, [r7, #28]
 80267da:	e001      	b.n	80267e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80267dc:	2301      	movs	r3, #1
 80267de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80267e0:	68fb      	ldr	r3, [r7, #12]
 80267e2:	681b      	ldr	r3, [r3, #0]
 80267e4:	461a      	mov	r2, r3
 80267e6:	687b      	ldr	r3, [r7, #4]
 80267e8:	01db      	lsls	r3, r3, #7
 80267ea:	4413      	add	r3, r2
 80267ec:	3384      	adds	r3, #132	; 0x84
 80267ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80267f0:	68fa      	ldr	r2, [r7, #12]
 80267f2:	6812      	ldr	r2, [r2, #0]
 80267f4:	4611      	mov	r1, r2
 80267f6:	687a      	ldr	r2, [r7, #4]
 80267f8:	01d2      	lsls	r2, r2, #7
 80267fa:	440a      	add	r2, r1
 80267fc:	3284      	adds	r2, #132	; 0x84
 80267fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8026802:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8026804:	68bb      	ldr	r3, [r7, #8]
 8026806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026808:	69fa      	ldr	r2, [r7, #28]
 802680a:	fb02 f303 	mul.w	r3, r2, r3
 802680e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8026810:	68bb      	ldr	r3, [r7, #8]
 8026812:	6859      	ldr	r1, [r3, #4]
 8026814:	68bb      	ldr	r3, [r7, #8]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	1acb      	subs	r3, r1, r3
 802681a:	69f9      	ldr	r1, [r7, #28]
 802681c:	fb01 f303 	mul.w	r3, r1, r3
 8026820:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8026822:	68f9      	ldr	r1, [r7, #12]
 8026824:	6809      	ldr	r1, [r1, #0]
 8026826:	4608      	mov	r0, r1
 8026828:	6879      	ldr	r1, [r7, #4]
 802682a:	01c9      	lsls	r1, r1, #7
 802682c:	4401      	add	r1, r0
 802682e:	3184      	adds	r1, #132	; 0x84
 8026830:	4313      	orrs	r3, r2
 8026832:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8026834:	68fb      	ldr	r3, [r7, #12]
 8026836:	681b      	ldr	r3, [r3, #0]
 8026838:	461a      	mov	r2, r3
 802683a:	687b      	ldr	r3, [r7, #4]
 802683c:	01db      	lsls	r3, r3, #7
 802683e:	4413      	add	r3, r2
 8026840:	3384      	adds	r3, #132	; 0x84
 8026842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026844:	68fa      	ldr	r2, [r7, #12]
 8026846:	6812      	ldr	r2, [r2, #0]
 8026848:	4611      	mov	r1, r2
 802684a:	687a      	ldr	r2, [r7, #4]
 802684c:	01d2      	lsls	r2, r2, #7
 802684e:	440a      	add	r2, r1
 8026850:	3284      	adds	r2, #132	; 0x84
 8026852:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8026856:	f023 0307 	bic.w	r3, r3, #7
 802685a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 802685c:	68fb      	ldr	r3, [r7, #12]
 802685e:	681b      	ldr	r3, [r3, #0]
 8026860:	461a      	mov	r2, r3
 8026862:	687b      	ldr	r3, [r7, #4]
 8026864:	01db      	lsls	r3, r3, #7
 8026866:	4413      	add	r3, r2
 8026868:	3384      	adds	r3, #132	; 0x84
 802686a:	461a      	mov	r2, r3
 802686c:	68bb      	ldr	r3, [r7, #8]
 802686e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026870:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8026872:	68fb      	ldr	r3, [r7, #12]
 8026874:	681b      	ldr	r3, [r3, #0]
 8026876:	461a      	mov	r2, r3
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	01db      	lsls	r3, r3, #7
 802687c:	4413      	add	r3, r2
 802687e:	3384      	adds	r3, #132	; 0x84
 8026880:	681b      	ldr	r3, [r3, #0]
 8026882:	68fa      	ldr	r2, [r7, #12]
 8026884:	6812      	ldr	r2, [r2, #0]
 8026886:	4611      	mov	r1, r2
 8026888:	687a      	ldr	r2, [r7, #4]
 802688a:	01d2      	lsls	r2, r2, #7
 802688c:	440a      	add	r2, r1
 802688e:	3284      	adds	r2, #132	; 0x84
 8026890:	f043 0301 	orr.w	r3, r3, #1
 8026894:	6013      	str	r3, [r2, #0]
}
 8026896:	bf00      	nop
 8026898:	3724      	adds	r7, #36	; 0x24
 802689a:	46bd      	mov	sp, r7
 802689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268a0:	4770      	bx	lr
	...

080268a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80268a4:	b580      	push	{r7, lr}
 80268a6:	b086      	sub	sp, #24
 80268a8:	af00      	add	r7, sp, #0
 80268aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	2b00      	cmp	r3, #0
 80268b0:	d101      	bne.n	80268b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80268b2:	2301      	movs	r3, #1
 80268b4:	e267      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80268b6:	687b      	ldr	r3, [r7, #4]
 80268b8:	681b      	ldr	r3, [r3, #0]
 80268ba:	f003 0301 	and.w	r3, r3, #1
 80268be:	2b00      	cmp	r3, #0
 80268c0:	d075      	beq.n	80269ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80268c2:	4b88      	ldr	r3, [pc, #544]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80268c4:	689b      	ldr	r3, [r3, #8]
 80268c6:	f003 030c 	and.w	r3, r3, #12
 80268ca:	2b04      	cmp	r3, #4
 80268cc:	d00c      	beq.n	80268e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80268ce:	4b85      	ldr	r3, [pc, #532]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80268d0:	689b      	ldr	r3, [r3, #8]
 80268d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80268d6:	2b08      	cmp	r3, #8
 80268d8:	d112      	bne.n	8026900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80268da:	4b82      	ldr	r3, [pc, #520]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80268dc:	685b      	ldr	r3, [r3, #4]
 80268de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80268e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80268e6:	d10b      	bne.n	8026900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80268e8:	4b7e      	ldr	r3, [pc, #504]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80268ea:	681b      	ldr	r3, [r3, #0]
 80268ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	d05b      	beq.n	80269ac <HAL_RCC_OscConfig+0x108>
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	685b      	ldr	r3, [r3, #4]
 80268f8:	2b00      	cmp	r3, #0
 80268fa:	d157      	bne.n	80269ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80268fc:	2301      	movs	r3, #1
 80268fe:	e242      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8026900:	687b      	ldr	r3, [r7, #4]
 8026902:	685b      	ldr	r3, [r3, #4]
 8026904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8026908:	d106      	bne.n	8026918 <HAL_RCC_OscConfig+0x74>
 802690a:	4b76      	ldr	r3, [pc, #472]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	4a75      	ldr	r2, [pc, #468]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026914:	6013      	str	r3, [r2, #0]
 8026916:	e01d      	b.n	8026954 <HAL_RCC_OscConfig+0xb0>
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	685b      	ldr	r3, [r3, #4]
 802691c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8026920:	d10c      	bne.n	802693c <HAL_RCC_OscConfig+0x98>
 8026922:	4b70      	ldr	r3, [pc, #448]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	4a6f      	ldr	r2, [pc, #444]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802692c:	6013      	str	r3, [r2, #0]
 802692e:	4b6d      	ldr	r3, [pc, #436]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026930:	681b      	ldr	r3, [r3, #0]
 8026932:	4a6c      	ldr	r2, [pc, #432]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026938:	6013      	str	r3, [r2, #0]
 802693a:	e00b      	b.n	8026954 <HAL_RCC_OscConfig+0xb0>
 802693c:	4b69      	ldr	r3, [pc, #420]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 802693e:	681b      	ldr	r3, [r3, #0]
 8026940:	4a68      	ldr	r2, [pc, #416]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8026946:	6013      	str	r3, [r2, #0]
 8026948:	4b66      	ldr	r3, [pc, #408]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 802694a:	681b      	ldr	r3, [r3, #0]
 802694c:	4a65      	ldr	r2, [pc, #404]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 802694e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8026952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	685b      	ldr	r3, [r3, #4]
 8026958:	2b00      	cmp	r3, #0
 802695a:	d013      	beq.n	8026984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802695c:	f7fc fbc4 	bl	80230e8 <HAL_GetTick>
 8026960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026962:	e008      	b.n	8026976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8026964:	f7fc fbc0 	bl	80230e8 <HAL_GetTick>
 8026968:	4602      	mov	r2, r0
 802696a:	693b      	ldr	r3, [r7, #16]
 802696c:	1ad3      	subs	r3, r2, r3
 802696e:	2b64      	cmp	r3, #100	; 0x64
 8026970:	d901      	bls.n	8026976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8026972:	2303      	movs	r3, #3
 8026974:	e207      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026976:	4b5b      	ldr	r3, [pc, #364]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802697e:	2b00      	cmp	r3, #0
 8026980:	d0f0      	beq.n	8026964 <HAL_RCC_OscConfig+0xc0>
 8026982:	e014      	b.n	80269ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026984:	f7fc fbb0 	bl	80230e8 <HAL_GetTick>
 8026988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802698a:	e008      	b.n	802699e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802698c:	f7fc fbac 	bl	80230e8 <HAL_GetTick>
 8026990:	4602      	mov	r2, r0
 8026992:	693b      	ldr	r3, [r7, #16]
 8026994:	1ad3      	subs	r3, r2, r3
 8026996:	2b64      	cmp	r3, #100	; 0x64
 8026998:	d901      	bls.n	802699e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802699a:	2303      	movs	r3, #3
 802699c:	e1f3      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802699e:	4b51      	ldr	r3, [pc, #324]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80269a6:	2b00      	cmp	r3, #0
 80269a8:	d1f0      	bne.n	802698c <HAL_RCC_OscConfig+0xe8>
 80269aa:	e000      	b.n	80269ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80269ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80269ae:	687b      	ldr	r3, [r7, #4]
 80269b0:	681b      	ldr	r3, [r3, #0]
 80269b2:	f003 0302 	and.w	r3, r3, #2
 80269b6:	2b00      	cmp	r3, #0
 80269b8:	d063      	beq.n	8026a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80269ba:	4b4a      	ldr	r3, [pc, #296]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269bc:	689b      	ldr	r3, [r3, #8]
 80269be:	f003 030c 	and.w	r3, r3, #12
 80269c2:	2b00      	cmp	r3, #0
 80269c4:	d00b      	beq.n	80269de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80269c6:	4b47      	ldr	r3, [pc, #284]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269c8:	689b      	ldr	r3, [r3, #8]
 80269ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80269ce:	2b08      	cmp	r3, #8
 80269d0:	d11c      	bne.n	8026a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80269d2:	4b44      	ldr	r3, [pc, #272]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269d4:	685b      	ldr	r3, [r3, #4]
 80269d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d116      	bne.n	8026a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80269de:	4b41      	ldr	r3, [pc, #260]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269e0:	681b      	ldr	r3, [r3, #0]
 80269e2:	f003 0302 	and.w	r3, r3, #2
 80269e6:	2b00      	cmp	r3, #0
 80269e8:	d005      	beq.n	80269f6 <HAL_RCC_OscConfig+0x152>
 80269ea:	687b      	ldr	r3, [r7, #4]
 80269ec:	68db      	ldr	r3, [r3, #12]
 80269ee:	2b01      	cmp	r3, #1
 80269f0:	d001      	beq.n	80269f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80269f2:	2301      	movs	r3, #1
 80269f4:	e1c7      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80269f6:	4b3b      	ldr	r3, [pc, #236]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80269fe:	687b      	ldr	r3, [r7, #4]
 8026a00:	691b      	ldr	r3, [r3, #16]
 8026a02:	00db      	lsls	r3, r3, #3
 8026a04:	4937      	ldr	r1, [pc, #220]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026a06:	4313      	orrs	r3, r2
 8026a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8026a0a:	e03a      	b.n	8026a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	68db      	ldr	r3, [r3, #12]
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	d020      	beq.n	8026a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8026a14:	4b34      	ldr	r3, [pc, #208]	; (8026ae8 <HAL_RCC_OscConfig+0x244>)
 8026a16:	2201      	movs	r2, #1
 8026a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026a1a:	f7fc fb65 	bl	80230e8 <HAL_GetTick>
 8026a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026a20:	e008      	b.n	8026a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026a22:	f7fc fb61 	bl	80230e8 <HAL_GetTick>
 8026a26:	4602      	mov	r2, r0
 8026a28:	693b      	ldr	r3, [r7, #16]
 8026a2a:	1ad3      	subs	r3, r2, r3
 8026a2c:	2b02      	cmp	r3, #2
 8026a2e:	d901      	bls.n	8026a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8026a30:	2303      	movs	r3, #3
 8026a32:	e1a8      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026a34:	4b2b      	ldr	r3, [pc, #172]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026a36:	681b      	ldr	r3, [r3, #0]
 8026a38:	f003 0302 	and.w	r3, r3, #2
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	d0f0      	beq.n	8026a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8026a40:	4b28      	ldr	r3, [pc, #160]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026a42:	681b      	ldr	r3, [r3, #0]
 8026a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8026a48:	687b      	ldr	r3, [r7, #4]
 8026a4a:	691b      	ldr	r3, [r3, #16]
 8026a4c:	00db      	lsls	r3, r3, #3
 8026a4e:	4925      	ldr	r1, [pc, #148]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026a50:	4313      	orrs	r3, r2
 8026a52:	600b      	str	r3, [r1, #0]
 8026a54:	e015      	b.n	8026a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8026a56:	4b24      	ldr	r3, [pc, #144]	; (8026ae8 <HAL_RCC_OscConfig+0x244>)
 8026a58:	2200      	movs	r2, #0
 8026a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8026a5c:	f7fc fb44 	bl	80230e8 <HAL_GetTick>
 8026a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026a62:	e008      	b.n	8026a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8026a64:	f7fc fb40 	bl	80230e8 <HAL_GetTick>
 8026a68:	4602      	mov	r2, r0
 8026a6a:	693b      	ldr	r3, [r7, #16]
 8026a6c:	1ad3      	subs	r3, r2, r3
 8026a6e:	2b02      	cmp	r3, #2
 8026a70:	d901      	bls.n	8026a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8026a72:	2303      	movs	r3, #3
 8026a74:	e187      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8026a76:	4b1b      	ldr	r3, [pc, #108]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026a78:	681b      	ldr	r3, [r3, #0]
 8026a7a:	f003 0302 	and.w	r3, r3, #2
 8026a7e:	2b00      	cmp	r3, #0
 8026a80:	d1f0      	bne.n	8026a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	681b      	ldr	r3, [r3, #0]
 8026a86:	f003 0308 	and.w	r3, r3, #8
 8026a8a:	2b00      	cmp	r3, #0
 8026a8c:	d036      	beq.n	8026afc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8026a8e:	687b      	ldr	r3, [r7, #4]
 8026a90:	695b      	ldr	r3, [r3, #20]
 8026a92:	2b00      	cmp	r3, #0
 8026a94:	d016      	beq.n	8026ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8026a96:	4b15      	ldr	r3, [pc, #84]	; (8026aec <HAL_RCC_OscConfig+0x248>)
 8026a98:	2201      	movs	r2, #1
 8026a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026a9c:	f7fc fb24 	bl	80230e8 <HAL_GetTick>
 8026aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026aa2:	e008      	b.n	8026ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026aa4:	f7fc fb20 	bl	80230e8 <HAL_GetTick>
 8026aa8:	4602      	mov	r2, r0
 8026aaa:	693b      	ldr	r3, [r7, #16]
 8026aac:	1ad3      	subs	r3, r2, r3
 8026aae:	2b02      	cmp	r3, #2
 8026ab0:	d901      	bls.n	8026ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026ab2:	2303      	movs	r3, #3
 8026ab4:	e167      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026ab6:	4b0b      	ldr	r3, [pc, #44]	; (8026ae4 <HAL_RCC_OscConfig+0x240>)
 8026ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026aba:	f003 0302 	and.w	r3, r3, #2
 8026abe:	2b00      	cmp	r3, #0
 8026ac0:	d0f0      	beq.n	8026aa4 <HAL_RCC_OscConfig+0x200>
 8026ac2:	e01b      	b.n	8026afc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026ac4:	4b09      	ldr	r3, [pc, #36]	; (8026aec <HAL_RCC_OscConfig+0x248>)
 8026ac6:	2200      	movs	r2, #0
 8026ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026aca:	f7fc fb0d 	bl	80230e8 <HAL_GetTick>
 8026ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026ad0:	e00e      	b.n	8026af0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026ad2:	f7fc fb09 	bl	80230e8 <HAL_GetTick>
 8026ad6:	4602      	mov	r2, r0
 8026ad8:	693b      	ldr	r3, [r7, #16]
 8026ada:	1ad3      	subs	r3, r2, r3
 8026adc:	2b02      	cmp	r3, #2
 8026ade:	d907      	bls.n	8026af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8026ae0:	2303      	movs	r3, #3
 8026ae2:	e150      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
 8026ae4:	40023800 	.word	0x40023800
 8026ae8:	42470000 	.word	0x42470000
 8026aec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026af0:	4b88      	ldr	r3, [pc, #544]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8026af4:	f003 0302 	and.w	r3, r3, #2
 8026af8:	2b00      	cmp	r3, #0
 8026afa:	d1ea      	bne.n	8026ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026afc:	687b      	ldr	r3, [r7, #4]
 8026afe:	681b      	ldr	r3, [r3, #0]
 8026b00:	f003 0304 	and.w	r3, r3, #4
 8026b04:	2b00      	cmp	r3, #0
 8026b06:	f000 8097 	beq.w	8026c38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026b0a:	2300      	movs	r3, #0
 8026b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026b0e:	4b81      	ldr	r3, [pc, #516]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026b16:	2b00      	cmp	r3, #0
 8026b18:	d10f      	bne.n	8026b3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026b1a:	2300      	movs	r3, #0
 8026b1c:	60bb      	str	r3, [r7, #8]
 8026b1e:	4b7d      	ldr	r3, [pc, #500]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b22:	4a7c      	ldr	r2, [pc, #496]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026b28:	6413      	str	r3, [r2, #64]	; 0x40
 8026b2a:	4b7a      	ldr	r3, [pc, #488]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8026b32:	60bb      	str	r3, [r7, #8]
 8026b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8026b36:	2301      	movs	r3, #1
 8026b38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026b3a:	4b77      	ldr	r3, [pc, #476]	; (8026d18 <HAL_RCC_OscConfig+0x474>)
 8026b3c:	681b      	ldr	r3, [r3, #0]
 8026b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	d118      	bne.n	8026b78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8026b46:	4b74      	ldr	r3, [pc, #464]	; (8026d18 <HAL_RCC_OscConfig+0x474>)
 8026b48:	681b      	ldr	r3, [r3, #0]
 8026b4a:	4a73      	ldr	r2, [pc, #460]	; (8026d18 <HAL_RCC_OscConfig+0x474>)
 8026b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8026b52:	f7fc fac9 	bl	80230e8 <HAL_GetTick>
 8026b56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026b58:	e008      	b.n	8026b6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8026b5a:	f7fc fac5 	bl	80230e8 <HAL_GetTick>
 8026b5e:	4602      	mov	r2, r0
 8026b60:	693b      	ldr	r3, [r7, #16]
 8026b62:	1ad3      	subs	r3, r2, r3
 8026b64:	2b02      	cmp	r3, #2
 8026b66:	d901      	bls.n	8026b6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8026b68:	2303      	movs	r3, #3
 8026b6a:	e10c      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026b6c:	4b6a      	ldr	r3, [pc, #424]	; (8026d18 <HAL_RCC_OscConfig+0x474>)
 8026b6e:	681b      	ldr	r3, [r3, #0]
 8026b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8026b74:	2b00      	cmp	r3, #0
 8026b76:	d0f0      	beq.n	8026b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	689b      	ldr	r3, [r3, #8]
 8026b7c:	2b01      	cmp	r3, #1
 8026b7e:	d106      	bne.n	8026b8e <HAL_RCC_OscConfig+0x2ea>
 8026b80:	4b64      	ldr	r3, [pc, #400]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026b84:	4a63      	ldr	r2, [pc, #396]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b86:	f043 0301 	orr.w	r3, r3, #1
 8026b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8026b8c:	e01c      	b.n	8026bc8 <HAL_RCC_OscConfig+0x324>
 8026b8e:	687b      	ldr	r3, [r7, #4]
 8026b90:	689b      	ldr	r3, [r3, #8]
 8026b92:	2b05      	cmp	r3, #5
 8026b94:	d10c      	bne.n	8026bb0 <HAL_RCC_OscConfig+0x30c>
 8026b96:	4b5f      	ldr	r3, [pc, #380]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026b9a:	4a5e      	ldr	r2, [pc, #376]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026b9c:	f043 0304 	orr.w	r3, r3, #4
 8026ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8026ba2:	4b5c      	ldr	r3, [pc, #368]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026ba6:	4a5b      	ldr	r2, [pc, #364]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026ba8:	f043 0301 	orr.w	r3, r3, #1
 8026bac:	6713      	str	r3, [r2, #112]	; 0x70
 8026bae:	e00b      	b.n	8026bc8 <HAL_RCC_OscConfig+0x324>
 8026bb0:	4b58      	ldr	r3, [pc, #352]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026bb4:	4a57      	ldr	r2, [pc, #348]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026bb6:	f023 0301 	bic.w	r3, r3, #1
 8026bba:	6713      	str	r3, [r2, #112]	; 0x70
 8026bbc:	4b55      	ldr	r3, [pc, #340]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026bc0:	4a54      	ldr	r2, [pc, #336]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026bc2:	f023 0304 	bic.w	r3, r3, #4
 8026bc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	689b      	ldr	r3, [r3, #8]
 8026bcc:	2b00      	cmp	r3, #0
 8026bce:	d015      	beq.n	8026bfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026bd0:	f7fc fa8a 	bl	80230e8 <HAL_GetTick>
 8026bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026bd6:	e00a      	b.n	8026bee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026bd8:	f7fc fa86 	bl	80230e8 <HAL_GetTick>
 8026bdc:	4602      	mov	r2, r0
 8026bde:	693b      	ldr	r3, [r7, #16]
 8026be0:	1ad3      	subs	r3, r2, r3
 8026be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8026be6:	4293      	cmp	r3, r2
 8026be8:	d901      	bls.n	8026bee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8026bea:	2303      	movs	r3, #3
 8026bec:	e0cb      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026bee:	4b49      	ldr	r3, [pc, #292]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026bf2:	f003 0302 	and.w	r3, r3, #2
 8026bf6:	2b00      	cmp	r3, #0
 8026bf8:	d0ee      	beq.n	8026bd8 <HAL_RCC_OscConfig+0x334>
 8026bfa:	e014      	b.n	8026c26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026bfc:	f7fc fa74 	bl	80230e8 <HAL_GetTick>
 8026c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026c02:	e00a      	b.n	8026c1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026c04:	f7fc fa70 	bl	80230e8 <HAL_GetTick>
 8026c08:	4602      	mov	r2, r0
 8026c0a:	693b      	ldr	r3, [r7, #16]
 8026c0c:	1ad3      	subs	r3, r2, r3
 8026c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8026c12:	4293      	cmp	r3, r2
 8026c14:	d901      	bls.n	8026c1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8026c16:	2303      	movs	r3, #3
 8026c18:	e0b5      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026c1a:	4b3e      	ldr	r3, [pc, #248]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026c1e:	f003 0302 	and.w	r3, r3, #2
 8026c22:	2b00      	cmp	r3, #0
 8026c24:	d1ee      	bne.n	8026c04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026c26:	7dfb      	ldrb	r3, [r7, #23]
 8026c28:	2b01      	cmp	r3, #1
 8026c2a:	d105      	bne.n	8026c38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026c2c:	4b39      	ldr	r3, [pc, #228]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c30:	4a38      	ldr	r2, [pc, #224]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8026c36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	699b      	ldr	r3, [r3, #24]
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	f000 80a1 	beq.w	8026d84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8026c42:	4b34      	ldr	r3, [pc, #208]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026c44:	689b      	ldr	r3, [r3, #8]
 8026c46:	f003 030c 	and.w	r3, r3, #12
 8026c4a:	2b08      	cmp	r3, #8
 8026c4c:	d05c      	beq.n	8026d08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	699b      	ldr	r3, [r3, #24]
 8026c52:	2b02      	cmp	r3, #2
 8026c54:	d141      	bne.n	8026cda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026c56:	4b31      	ldr	r3, [pc, #196]	; (8026d1c <HAL_RCC_OscConfig+0x478>)
 8026c58:	2200      	movs	r2, #0
 8026c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026c5c:	f7fc fa44 	bl	80230e8 <HAL_GetTick>
 8026c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026c62:	e008      	b.n	8026c76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026c64:	f7fc fa40 	bl	80230e8 <HAL_GetTick>
 8026c68:	4602      	mov	r2, r0
 8026c6a:	693b      	ldr	r3, [r7, #16]
 8026c6c:	1ad3      	subs	r3, r2, r3
 8026c6e:	2b02      	cmp	r3, #2
 8026c70:	d901      	bls.n	8026c76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8026c72:	2303      	movs	r3, #3
 8026c74:	e087      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026c76:	4b27      	ldr	r3, [pc, #156]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d1f0      	bne.n	8026c64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8026c82:	687b      	ldr	r3, [r7, #4]
 8026c84:	69da      	ldr	r2, [r3, #28]
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	6a1b      	ldr	r3, [r3, #32]
 8026c8a:	431a      	orrs	r2, r3
 8026c8c:	687b      	ldr	r3, [r7, #4]
 8026c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c90:	019b      	lsls	r3, r3, #6
 8026c92:	431a      	orrs	r2, r3
 8026c94:	687b      	ldr	r3, [r7, #4]
 8026c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026c98:	085b      	lsrs	r3, r3, #1
 8026c9a:	3b01      	subs	r3, #1
 8026c9c:	041b      	lsls	r3, r3, #16
 8026c9e:	431a      	orrs	r2, r3
 8026ca0:	687b      	ldr	r3, [r7, #4]
 8026ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026ca4:	061b      	lsls	r3, r3, #24
 8026ca6:	491b      	ldr	r1, [pc, #108]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026ca8:	4313      	orrs	r3, r2
 8026caa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026cac:	4b1b      	ldr	r3, [pc, #108]	; (8026d1c <HAL_RCC_OscConfig+0x478>)
 8026cae:	2201      	movs	r2, #1
 8026cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026cb2:	f7fc fa19 	bl	80230e8 <HAL_GetTick>
 8026cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026cb8:	e008      	b.n	8026ccc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026cba:	f7fc fa15 	bl	80230e8 <HAL_GetTick>
 8026cbe:	4602      	mov	r2, r0
 8026cc0:	693b      	ldr	r3, [r7, #16]
 8026cc2:	1ad3      	subs	r3, r2, r3
 8026cc4:	2b02      	cmp	r3, #2
 8026cc6:	d901      	bls.n	8026ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8026cc8:	2303      	movs	r3, #3
 8026cca:	e05c      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026ccc:	4b11      	ldr	r3, [pc, #68]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026cd4:	2b00      	cmp	r3, #0
 8026cd6:	d0f0      	beq.n	8026cba <HAL_RCC_OscConfig+0x416>
 8026cd8:	e054      	b.n	8026d84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026cda:	4b10      	ldr	r3, [pc, #64]	; (8026d1c <HAL_RCC_OscConfig+0x478>)
 8026cdc:	2200      	movs	r2, #0
 8026cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8026ce0:	f7fc fa02 	bl	80230e8 <HAL_GetTick>
 8026ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026ce6:	e008      	b.n	8026cfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026ce8:	f7fc f9fe 	bl	80230e8 <HAL_GetTick>
 8026cec:	4602      	mov	r2, r0
 8026cee:	693b      	ldr	r3, [r7, #16]
 8026cf0:	1ad3      	subs	r3, r2, r3
 8026cf2:	2b02      	cmp	r3, #2
 8026cf4:	d901      	bls.n	8026cfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8026cf6:	2303      	movs	r3, #3
 8026cf8:	e045      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026cfa:	4b06      	ldr	r3, [pc, #24]	; (8026d14 <HAL_RCC_OscConfig+0x470>)
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026d02:	2b00      	cmp	r3, #0
 8026d04:	d1f0      	bne.n	8026ce8 <HAL_RCC_OscConfig+0x444>
 8026d06:	e03d      	b.n	8026d84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8026d08:	687b      	ldr	r3, [r7, #4]
 8026d0a:	699b      	ldr	r3, [r3, #24]
 8026d0c:	2b01      	cmp	r3, #1
 8026d0e:	d107      	bne.n	8026d20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8026d10:	2301      	movs	r3, #1
 8026d12:	e038      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
 8026d14:	40023800 	.word	0x40023800
 8026d18:	40007000 	.word	0x40007000
 8026d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8026d20:	4b1b      	ldr	r3, [pc, #108]	; (8026d90 <HAL_RCC_OscConfig+0x4ec>)
 8026d22:	685b      	ldr	r3, [r3, #4]
 8026d24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	699b      	ldr	r3, [r3, #24]
 8026d2a:	2b01      	cmp	r3, #1
 8026d2c:	d028      	beq.n	8026d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026d2e:	68fb      	ldr	r3, [r7, #12]
 8026d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8026d38:	429a      	cmp	r2, r3
 8026d3a:	d121      	bne.n	8026d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026d3c:	68fb      	ldr	r3, [r7, #12]
 8026d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026d46:	429a      	cmp	r2, r3
 8026d48:	d11a      	bne.n	8026d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026d4a:	68fa      	ldr	r2, [r7, #12]
 8026d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8026d50:	4013      	ands	r3, r2
 8026d52:	687a      	ldr	r2, [r7, #4]
 8026d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8026d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8026d58:	4293      	cmp	r3, r2
 8026d5a:	d111      	bne.n	8026d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026d5c:	68fb      	ldr	r3, [r7, #12]
 8026d5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8026d62:	687b      	ldr	r3, [r7, #4]
 8026d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d66:	085b      	lsrs	r3, r3, #1
 8026d68:	3b01      	subs	r3, #1
 8026d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8026d6c:	429a      	cmp	r2, r3
 8026d6e:	d107      	bne.n	8026d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8026d70:	68fb      	ldr	r3, [r7, #12]
 8026d72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8026d76:	687b      	ldr	r3, [r7, #4]
 8026d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8026d7c:	429a      	cmp	r2, r3
 8026d7e:	d001      	beq.n	8026d84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8026d80:	2301      	movs	r3, #1
 8026d82:	e000      	b.n	8026d86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8026d84:	2300      	movs	r3, #0
}
 8026d86:	4618      	mov	r0, r3
 8026d88:	3718      	adds	r7, #24
 8026d8a:	46bd      	mov	sp, r7
 8026d8c:	bd80      	pop	{r7, pc}
 8026d8e:	bf00      	nop
 8026d90:	40023800 	.word	0x40023800

08026d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8026d94:	b580      	push	{r7, lr}
 8026d96:	b084      	sub	sp, #16
 8026d98:	af00      	add	r7, sp, #0
 8026d9a:	6078      	str	r0, [r7, #4]
 8026d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8026d9e:	687b      	ldr	r3, [r7, #4]
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d101      	bne.n	8026da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8026da4:	2301      	movs	r3, #1
 8026da6:	e0cc      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8026da8:	4b68      	ldr	r3, [pc, #416]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	f003 030f 	and.w	r3, r3, #15
 8026db0:	683a      	ldr	r2, [r7, #0]
 8026db2:	429a      	cmp	r2, r3
 8026db4:	d90c      	bls.n	8026dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026db6:	4b65      	ldr	r3, [pc, #404]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026db8:	683a      	ldr	r2, [r7, #0]
 8026dba:	b2d2      	uxtb	r2, r2
 8026dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026dbe:	4b63      	ldr	r3, [pc, #396]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026dc0:	681b      	ldr	r3, [r3, #0]
 8026dc2:	f003 030f 	and.w	r3, r3, #15
 8026dc6:	683a      	ldr	r2, [r7, #0]
 8026dc8:	429a      	cmp	r2, r3
 8026dca:	d001      	beq.n	8026dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8026dcc:	2301      	movs	r3, #1
 8026dce:	e0b8      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	681b      	ldr	r3, [r3, #0]
 8026dd4:	f003 0302 	and.w	r3, r3, #2
 8026dd8:	2b00      	cmp	r3, #0
 8026dda:	d020      	beq.n	8026e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026ddc:	687b      	ldr	r3, [r7, #4]
 8026dde:	681b      	ldr	r3, [r3, #0]
 8026de0:	f003 0304 	and.w	r3, r3, #4
 8026de4:	2b00      	cmp	r3, #0
 8026de6:	d005      	beq.n	8026df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8026de8:	4b59      	ldr	r3, [pc, #356]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026dea:	689b      	ldr	r3, [r3, #8]
 8026dec:	4a58      	ldr	r2, [pc, #352]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8026df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026df4:	687b      	ldr	r3, [r7, #4]
 8026df6:	681b      	ldr	r3, [r3, #0]
 8026df8:	f003 0308 	and.w	r3, r3, #8
 8026dfc:	2b00      	cmp	r3, #0
 8026dfe:	d005      	beq.n	8026e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026e00:	4b53      	ldr	r3, [pc, #332]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e02:	689b      	ldr	r3, [r3, #8]
 8026e04:	4a52      	ldr	r2, [pc, #328]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8026e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026e0c:	4b50      	ldr	r3, [pc, #320]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e0e:	689b      	ldr	r3, [r3, #8]
 8026e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026e14:	687b      	ldr	r3, [r7, #4]
 8026e16:	689b      	ldr	r3, [r3, #8]
 8026e18:	494d      	ldr	r1, [pc, #308]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e1a:	4313      	orrs	r3, r2
 8026e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026e1e:	687b      	ldr	r3, [r7, #4]
 8026e20:	681b      	ldr	r3, [r3, #0]
 8026e22:	f003 0301 	and.w	r3, r3, #1
 8026e26:	2b00      	cmp	r3, #0
 8026e28:	d044      	beq.n	8026eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8026e2a:	687b      	ldr	r3, [r7, #4]
 8026e2c:	685b      	ldr	r3, [r3, #4]
 8026e2e:	2b01      	cmp	r3, #1
 8026e30:	d107      	bne.n	8026e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026e32:	4b47      	ldr	r3, [pc, #284]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e34:	681b      	ldr	r3, [r3, #0]
 8026e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8026e3a:	2b00      	cmp	r3, #0
 8026e3c:	d119      	bne.n	8026e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026e3e:	2301      	movs	r3, #1
 8026e40:	e07f      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026e42:	687b      	ldr	r3, [r7, #4]
 8026e44:	685b      	ldr	r3, [r3, #4]
 8026e46:	2b02      	cmp	r3, #2
 8026e48:	d003      	beq.n	8026e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026e4e:	2b03      	cmp	r3, #3
 8026e50:	d107      	bne.n	8026e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026e52:	4b3f      	ldr	r3, [pc, #252]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e54:	681b      	ldr	r3, [r3, #0]
 8026e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8026e5a:	2b00      	cmp	r3, #0
 8026e5c:	d109      	bne.n	8026e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026e5e:	2301      	movs	r3, #1
 8026e60:	e06f      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8026e62:	4b3b      	ldr	r3, [pc, #236]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e64:	681b      	ldr	r3, [r3, #0]
 8026e66:	f003 0302 	and.w	r3, r3, #2
 8026e6a:	2b00      	cmp	r3, #0
 8026e6c:	d101      	bne.n	8026e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026e6e:	2301      	movs	r3, #1
 8026e70:	e067      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8026e72:	4b37      	ldr	r3, [pc, #220]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e74:	689b      	ldr	r3, [r3, #8]
 8026e76:	f023 0203 	bic.w	r2, r3, #3
 8026e7a:	687b      	ldr	r3, [r7, #4]
 8026e7c:	685b      	ldr	r3, [r3, #4]
 8026e7e:	4934      	ldr	r1, [pc, #208]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026e80:	4313      	orrs	r3, r2
 8026e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8026e84:	f7fc f930 	bl	80230e8 <HAL_GetTick>
 8026e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026e8a:	e00a      	b.n	8026ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8026e8c:	f7fc f92c 	bl	80230e8 <HAL_GetTick>
 8026e90:	4602      	mov	r2, r0
 8026e92:	68fb      	ldr	r3, [r7, #12]
 8026e94:	1ad3      	subs	r3, r2, r3
 8026e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8026e9a:	4293      	cmp	r3, r2
 8026e9c:	d901      	bls.n	8026ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8026e9e:	2303      	movs	r3, #3
 8026ea0:	e04f      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8026ea2:	4b2b      	ldr	r3, [pc, #172]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026ea4:	689b      	ldr	r3, [r3, #8]
 8026ea6:	f003 020c 	and.w	r2, r3, #12
 8026eaa:	687b      	ldr	r3, [r7, #4]
 8026eac:	685b      	ldr	r3, [r3, #4]
 8026eae:	009b      	lsls	r3, r3, #2
 8026eb0:	429a      	cmp	r2, r3
 8026eb2:	d1eb      	bne.n	8026e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8026eb4:	4b25      	ldr	r3, [pc, #148]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026eb6:	681b      	ldr	r3, [r3, #0]
 8026eb8:	f003 030f 	and.w	r3, r3, #15
 8026ebc:	683a      	ldr	r2, [r7, #0]
 8026ebe:	429a      	cmp	r2, r3
 8026ec0:	d20c      	bcs.n	8026edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026ec2:	4b22      	ldr	r3, [pc, #136]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026ec4:	683a      	ldr	r2, [r7, #0]
 8026ec6:	b2d2      	uxtb	r2, r2
 8026ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026eca:	4b20      	ldr	r3, [pc, #128]	; (8026f4c <HAL_RCC_ClockConfig+0x1b8>)
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	f003 030f 	and.w	r3, r3, #15
 8026ed2:	683a      	ldr	r2, [r7, #0]
 8026ed4:	429a      	cmp	r2, r3
 8026ed6:	d001      	beq.n	8026edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8026ed8:	2301      	movs	r3, #1
 8026eda:	e032      	b.n	8026f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	681b      	ldr	r3, [r3, #0]
 8026ee0:	f003 0304 	and.w	r3, r3, #4
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d008      	beq.n	8026efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8026ee8:	4b19      	ldr	r3, [pc, #100]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026eea:	689b      	ldr	r3, [r3, #8]
 8026eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	68db      	ldr	r3, [r3, #12]
 8026ef4:	4916      	ldr	r1, [pc, #88]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026ef6:	4313      	orrs	r3, r2
 8026ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026efa:	687b      	ldr	r3, [r7, #4]
 8026efc:	681b      	ldr	r3, [r3, #0]
 8026efe:	f003 0308 	and.w	r3, r3, #8
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d009      	beq.n	8026f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8026f06:	4b12      	ldr	r3, [pc, #72]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026f08:	689b      	ldr	r3, [r3, #8]
 8026f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026f0e:	687b      	ldr	r3, [r7, #4]
 8026f10:	691b      	ldr	r3, [r3, #16]
 8026f12:	00db      	lsls	r3, r3, #3
 8026f14:	490e      	ldr	r1, [pc, #56]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026f16:	4313      	orrs	r3, r2
 8026f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8026f1a:	f000 f821 	bl	8026f60 <HAL_RCC_GetSysClockFreq>
 8026f1e:	4602      	mov	r2, r0
 8026f20:	4b0b      	ldr	r3, [pc, #44]	; (8026f50 <HAL_RCC_ClockConfig+0x1bc>)
 8026f22:	689b      	ldr	r3, [r3, #8]
 8026f24:	091b      	lsrs	r3, r3, #4
 8026f26:	f003 030f 	and.w	r3, r3, #15
 8026f2a:	490a      	ldr	r1, [pc, #40]	; (8026f54 <HAL_RCC_ClockConfig+0x1c0>)
 8026f2c:	5ccb      	ldrb	r3, [r1, r3]
 8026f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8026f32:	4a09      	ldr	r2, [pc, #36]	; (8026f58 <HAL_RCC_ClockConfig+0x1c4>)
 8026f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8026f36:	4b09      	ldr	r3, [pc, #36]	; (8026f5c <HAL_RCC_ClockConfig+0x1c8>)
 8026f38:	681b      	ldr	r3, [r3, #0]
 8026f3a:	4618      	mov	r0, r3
 8026f3c:	f7fa fcf0 	bl	8021920 <HAL_InitTick>

  return HAL_OK;
 8026f40:	2300      	movs	r3, #0
}
 8026f42:	4618      	mov	r0, r3
 8026f44:	3710      	adds	r7, #16
 8026f46:	46bd      	mov	sp, r7
 8026f48:	bd80      	pop	{r7, pc}
 8026f4a:	bf00      	nop
 8026f4c:	40023c00 	.word	0x40023c00
 8026f50:	40023800 	.word	0x40023800
 8026f54:	0802eda0 	.word	0x0802eda0
 8026f58:	20000000 	.word	0x20000000
 8026f5c:	20000054 	.word	0x20000054

08026f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8026f64:	b094      	sub	sp, #80	; 0x50
 8026f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8026f68:	2300      	movs	r3, #0
 8026f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8026f6c:	2300      	movs	r3, #0
 8026f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026f70:	2300      	movs	r3, #0
 8026f72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8026f74:	2300      	movs	r3, #0
 8026f76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8026f78:	4b79      	ldr	r3, [pc, #484]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8026f7a:	689b      	ldr	r3, [r3, #8]
 8026f7c:	f003 030c 	and.w	r3, r3, #12
 8026f80:	2b08      	cmp	r3, #8
 8026f82:	d00d      	beq.n	8026fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8026f84:	2b08      	cmp	r3, #8
 8026f86:	f200 80e1 	bhi.w	802714c <HAL_RCC_GetSysClockFreq+0x1ec>
 8026f8a:	2b00      	cmp	r3, #0
 8026f8c:	d002      	beq.n	8026f94 <HAL_RCC_GetSysClockFreq+0x34>
 8026f8e:	2b04      	cmp	r3, #4
 8026f90:	d003      	beq.n	8026f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8026f92:	e0db      	b.n	802714c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8026f94:	4b73      	ldr	r3, [pc, #460]	; (8027164 <HAL_RCC_GetSysClockFreq+0x204>)
 8026f96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8026f98:	e0db      	b.n	8027152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8026f9a:	4b73      	ldr	r3, [pc, #460]	; (8027168 <HAL_RCC_GetSysClockFreq+0x208>)
 8026f9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8026f9e:	e0d8      	b.n	8027152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8026fa0:	4b6f      	ldr	r3, [pc, #444]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8026fa2:	685b      	ldr	r3, [r3, #4]
 8026fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8026fa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8026faa:	4b6d      	ldr	r3, [pc, #436]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8026fac:	685b      	ldr	r3, [r3, #4]
 8026fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8026fb2:	2b00      	cmp	r3, #0
 8026fb4:	d063      	beq.n	802707e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026fb6:	4b6a      	ldr	r3, [pc, #424]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8026fb8:	685b      	ldr	r3, [r3, #4]
 8026fba:	099b      	lsrs	r3, r3, #6
 8026fbc:	2200      	movs	r2, #0
 8026fbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8026fc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8026fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8026fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8026fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8026fca:	2300      	movs	r3, #0
 8026fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8026fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8026fd2:	4622      	mov	r2, r4
 8026fd4:	462b      	mov	r3, r5
 8026fd6:	f04f 0000 	mov.w	r0, #0
 8026fda:	f04f 0100 	mov.w	r1, #0
 8026fde:	0159      	lsls	r1, r3, #5
 8026fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8026fe4:	0150      	lsls	r0, r2, #5
 8026fe6:	4602      	mov	r2, r0
 8026fe8:	460b      	mov	r3, r1
 8026fea:	4621      	mov	r1, r4
 8026fec:	1a51      	subs	r1, r2, r1
 8026fee:	6139      	str	r1, [r7, #16]
 8026ff0:	4629      	mov	r1, r5
 8026ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8026ff6:	617b      	str	r3, [r7, #20]
 8026ff8:	f04f 0200 	mov.w	r2, #0
 8026ffc:	f04f 0300 	mov.w	r3, #0
 8027000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027004:	4659      	mov	r1, fp
 8027006:	018b      	lsls	r3, r1, #6
 8027008:	4651      	mov	r1, sl
 802700a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 802700e:	4651      	mov	r1, sl
 8027010:	018a      	lsls	r2, r1, #6
 8027012:	4651      	mov	r1, sl
 8027014:	ebb2 0801 	subs.w	r8, r2, r1
 8027018:	4659      	mov	r1, fp
 802701a:	eb63 0901 	sbc.w	r9, r3, r1
 802701e:	f04f 0200 	mov.w	r2, #0
 8027022:	f04f 0300 	mov.w	r3, #0
 8027026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802702a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802702e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027032:	4690      	mov	r8, r2
 8027034:	4699      	mov	r9, r3
 8027036:	4623      	mov	r3, r4
 8027038:	eb18 0303 	adds.w	r3, r8, r3
 802703c:	60bb      	str	r3, [r7, #8]
 802703e:	462b      	mov	r3, r5
 8027040:	eb49 0303 	adc.w	r3, r9, r3
 8027044:	60fb      	str	r3, [r7, #12]
 8027046:	f04f 0200 	mov.w	r2, #0
 802704a:	f04f 0300 	mov.w	r3, #0
 802704e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027052:	4629      	mov	r1, r5
 8027054:	024b      	lsls	r3, r1, #9
 8027056:	4621      	mov	r1, r4
 8027058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 802705c:	4621      	mov	r1, r4
 802705e:	024a      	lsls	r2, r1, #9
 8027060:	4610      	mov	r0, r2
 8027062:	4619      	mov	r1, r3
 8027064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027066:	2200      	movs	r2, #0
 8027068:	62bb      	str	r3, [r7, #40]	; 0x28
 802706a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802706c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027070:	f7f9 f90e 	bl	8020290 <__aeabi_uldivmod>
 8027074:	4602      	mov	r2, r0
 8027076:	460b      	mov	r3, r1
 8027078:	4613      	mov	r3, r2
 802707a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802707c:	e058      	b.n	8027130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802707e:	4b38      	ldr	r3, [pc, #224]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8027080:	685b      	ldr	r3, [r3, #4]
 8027082:	099b      	lsrs	r3, r3, #6
 8027084:	2200      	movs	r2, #0
 8027086:	4618      	mov	r0, r3
 8027088:	4611      	mov	r1, r2
 802708a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 802708e:	623b      	str	r3, [r7, #32]
 8027090:	2300      	movs	r3, #0
 8027092:	627b      	str	r3, [r7, #36]	; 0x24
 8027094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027098:	4642      	mov	r2, r8
 802709a:	464b      	mov	r3, r9
 802709c:	f04f 0000 	mov.w	r0, #0
 80270a0:	f04f 0100 	mov.w	r1, #0
 80270a4:	0159      	lsls	r1, r3, #5
 80270a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80270aa:	0150      	lsls	r0, r2, #5
 80270ac:	4602      	mov	r2, r0
 80270ae:	460b      	mov	r3, r1
 80270b0:	4641      	mov	r1, r8
 80270b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80270b6:	4649      	mov	r1, r9
 80270b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80270bc:	f04f 0200 	mov.w	r2, #0
 80270c0:	f04f 0300 	mov.w	r3, #0
 80270c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80270c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80270cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80270d0:	ebb2 040a 	subs.w	r4, r2, sl
 80270d4:	eb63 050b 	sbc.w	r5, r3, fp
 80270d8:	f04f 0200 	mov.w	r2, #0
 80270dc:	f04f 0300 	mov.w	r3, #0
 80270e0:	00eb      	lsls	r3, r5, #3
 80270e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80270e6:	00e2      	lsls	r2, r4, #3
 80270e8:	4614      	mov	r4, r2
 80270ea:	461d      	mov	r5, r3
 80270ec:	4643      	mov	r3, r8
 80270ee:	18e3      	adds	r3, r4, r3
 80270f0:	603b      	str	r3, [r7, #0]
 80270f2:	464b      	mov	r3, r9
 80270f4:	eb45 0303 	adc.w	r3, r5, r3
 80270f8:	607b      	str	r3, [r7, #4]
 80270fa:	f04f 0200 	mov.w	r2, #0
 80270fe:	f04f 0300 	mov.w	r3, #0
 8027102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027106:	4629      	mov	r1, r5
 8027108:	028b      	lsls	r3, r1, #10
 802710a:	4621      	mov	r1, r4
 802710c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027110:	4621      	mov	r1, r4
 8027112:	028a      	lsls	r2, r1, #10
 8027114:	4610      	mov	r0, r2
 8027116:	4619      	mov	r1, r3
 8027118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802711a:	2200      	movs	r2, #0
 802711c:	61bb      	str	r3, [r7, #24]
 802711e:	61fa      	str	r2, [r7, #28]
 8027120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027124:	f7f9 f8b4 	bl	8020290 <__aeabi_uldivmod>
 8027128:	4602      	mov	r2, r0
 802712a:	460b      	mov	r3, r1
 802712c:	4613      	mov	r3, r2
 802712e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027130:	4b0b      	ldr	r3, [pc, #44]	; (8027160 <HAL_RCC_GetSysClockFreq+0x200>)
 8027132:	685b      	ldr	r3, [r3, #4]
 8027134:	0c1b      	lsrs	r3, r3, #16
 8027136:	f003 0303 	and.w	r3, r3, #3
 802713a:	3301      	adds	r3, #1
 802713c:	005b      	lsls	r3, r3, #1
 802713e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027144:	fbb2 f3f3 	udiv	r3, r2, r3
 8027148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 802714a:	e002      	b.n	8027152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802714c:	4b05      	ldr	r3, [pc, #20]	; (8027164 <HAL_RCC_GetSysClockFreq+0x204>)
 802714e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027154:	4618      	mov	r0, r3
 8027156:	3750      	adds	r7, #80	; 0x50
 8027158:	46bd      	mov	sp, r7
 802715a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802715e:	bf00      	nop
 8027160:	40023800 	.word	0x40023800
 8027164:	00f42400 	.word	0x00f42400
 8027168:	007a1200 	.word	0x007a1200

0802716c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 802716c:	b480      	push	{r7}
 802716e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027170:	4b03      	ldr	r3, [pc, #12]	; (8027180 <HAL_RCC_GetHCLKFreq+0x14>)
 8027172:	681b      	ldr	r3, [r3, #0]
}
 8027174:	4618      	mov	r0, r3
 8027176:	46bd      	mov	sp, r7
 8027178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802717c:	4770      	bx	lr
 802717e:	bf00      	nop
 8027180:	20000000 	.word	0x20000000

08027184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027184:	b580      	push	{r7, lr}
 8027186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027188:	f7ff fff0 	bl	802716c <HAL_RCC_GetHCLKFreq>
 802718c:	4602      	mov	r2, r0
 802718e:	4b05      	ldr	r3, [pc, #20]	; (80271a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027190:	689b      	ldr	r3, [r3, #8]
 8027192:	0a9b      	lsrs	r3, r3, #10
 8027194:	f003 0307 	and.w	r3, r3, #7
 8027198:	4903      	ldr	r1, [pc, #12]	; (80271a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 802719a:	5ccb      	ldrb	r3, [r1, r3]
 802719c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80271a0:	4618      	mov	r0, r3
 80271a2:	bd80      	pop	{r7, pc}
 80271a4:	40023800 	.word	0x40023800
 80271a8:	0802edb0 	.word	0x0802edb0

080271ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80271ac:	b580      	push	{r7, lr}
 80271ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80271b0:	f7ff ffdc 	bl	802716c <HAL_RCC_GetHCLKFreq>
 80271b4:	4602      	mov	r2, r0
 80271b6:	4b05      	ldr	r3, [pc, #20]	; (80271cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80271b8:	689b      	ldr	r3, [r3, #8]
 80271ba:	0b5b      	lsrs	r3, r3, #13
 80271bc:	f003 0307 	and.w	r3, r3, #7
 80271c0:	4903      	ldr	r1, [pc, #12]	; (80271d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80271c2:	5ccb      	ldrb	r3, [r1, r3]
 80271c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80271c8:	4618      	mov	r0, r3
 80271ca:	bd80      	pop	{r7, pc}
 80271cc:	40023800 	.word	0x40023800
 80271d0:	0802edb0 	.word	0x0802edb0

080271d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80271d4:	b480      	push	{r7}
 80271d6:	b083      	sub	sp, #12
 80271d8:	af00      	add	r7, sp, #0
 80271da:	6078      	str	r0, [r7, #4]
 80271dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80271de:	687b      	ldr	r3, [r7, #4]
 80271e0:	220f      	movs	r2, #15
 80271e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80271e4:	4b12      	ldr	r3, [pc, #72]	; (8027230 <HAL_RCC_GetClockConfig+0x5c>)
 80271e6:	689b      	ldr	r3, [r3, #8]
 80271e8:	f003 0203 	and.w	r2, r3, #3
 80271ec:	687b      	ldr	r3, [r7, #4]
 80271ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80271f0:	4b0f      	ldr	r3, [pc, #60]	; (8027230 <HAL_RCC_GetClockConfig+0x5c>)
 80271f2:	689b      	ldr	r3, [r3, #8]
 80271f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80271f8:	687b      	ldr	r3, [r7, #4]
 80271fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80271fc:	4b0c      	ldr	r3, [pc, #48]	; (8027230 <HAL_RCC_GetClockConfig+0x5c>)
 80271fe:	689b      	ldr	r3, [r3, #8]
 8027200:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027208:	4b09      	ldr	r3, [pc, #36]	; (8027230 <HAL_RCC_GetClockConfig+0x5c>)
 802720a:	689b      	ldr	r3, [r3, #8]
 802720c:	08db      	lsrs	r3, r3, #3
 802720e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027212:	687b      	ldr	r3, [r7, #4]
 8027214:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027216:	4b07      	ldr	r3, [pc, #28]	; (8027234 <HAL_RCC_GetClockConfig+0x60>)
 8027218:	681b      	ldr	r3, [r3, #0]
 802721a:	f003 020f 	and.w	r2, r3, #15
 802721e:	683b      	ldr	r3, [r7, #0]
 8027220:	601a      	str	r2, [r3, #0]
}
 8027222:	bf00      	nop
 8027224:	370c      	adds	r7, #12
 8027226:	46bd      	mov	sp, r7
 8027228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802722c:	4770      	bx	lr
 802722e:	bf00      	nop
 8027230:	40023800 	.word	0x40023800
 8027234:	40023c00 	.word	0x40023c00

08027238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027238:	b580      	push	{r7, lr}
 802723a:	b086      	sub	sp, #24
 802723c:	af00      	add	r7, sp, #0
 802723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027240:	2300      	movs	r3, #0
 8027242:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027244:	2300      	movs	r3, #0
 8027246:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027248:	687b      	ldr	r3, [r7, #4]
 802724a:	681b      	ldr	r3, [r3, #0]
 802724c:	f003 0301 	and.w	r3, r3, #1
 8027250:	2b00      	cmp	r3, #0
 8027252:	d10b      	bne.n	802726c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027254:	687b      	ldr	r3, [r7, #4]
 8027256:	681b      	ldr	r3, [r3, #0]
 8027258:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 802725c:	2b00      	cmp	r3, #0
 802725e:	d105      	bne.n	802726c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027260:	687b      	ldr	r3, [r7, #4]
 8027262:	681b      	ldr	r3, [r3, #0]
 8027264:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027268:	2b00      	cmp	r3, #0
 802726a:	d075      	beq.n	8027358 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 802726c:	4b91      	ldr	r3, [pc, #580]	; (80274b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 802726e:	2200      	movs	r2, #0
 8027270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027272:	f7fb ff39 	bl	80230e8 <HAL_GetTick>
 8027276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027278:	e008      	b.n	802728c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802727a:	f7fb ff35 	bl	80230e8 <HAL_GetTick>
 802727e:	4602      	mov	r2, r0
 8027280:	697b      	ldr	r3, [r7, #20]
 8027282:	1ad3      	subs	r3, r2, r3
 8027284:	2b02      	cmp	r3, #2
 8027286:	d901      	bls.n	802728c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027288:	2303      	movs	r3, #3
 802728a:	e189      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 802728c:	4b8a      	ldr	r3, [pc, #552]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802728e:	681b      	ldr	r3, [r3, #0]
 8027290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027294:	2b00      	cmp	r3, #0
 8027296:	d1f0      	bne.n	802727a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027298:	687b      	ldr	r3, [r7, #4]
 802729a:	681b      	ldr	r3, [r3, #0]
 802729c:	f003 0301 	and.w	r3, r3, #1
 80272a0:	2b00      	cmp	r3, #0
 80272a2:	d009      	beq.n	80272b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	685b      	ldr	r3, [r3, #4]
 80272a8:	019a      	lsls	r2, r3, #6
 80272aa:	687b      	ldr	r3, [r7, #4]
 80272ac:	689b      	ldr	r3, [r3, #8]
 80272ae:	071b      	lsls	r3, r3, #28
 80272b0:	4981      	ldr	r1, [pc, #516]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80272b2:	4313      	orrs	r3, r2
 80272b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	681b      	ldr	r3, [r3, #0]
 80272bc:	f003 0302 	and.w	r3, r3, #2
 80272c0:	2b00      	cmp	r3, #0
 80272c2:	d01f      	beq.n	8027304 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80272c4:	4b7c      	ldr	r3, [pc, #496]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80272c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80272ca:	0f1b      	lsrs	r3, r3, #28
 80272cc:	f003 0307 	and.w	r3, r3, #7
 80272d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	685b      	ldr	r3, [r3, #4]
 80272d6:	019a      	lsls	r2, r3, #6
 80272d8:	687b      	ldr	r3, [r7, #4]
 80272da:	68db      	ldr	r3, [r3, #12]
 80272dc:	061b      	lsls	r3, r3, #24
 80272de:	431a      	orrs	r2, r3
 80272e0:	693b      	ldr	r3, [r7, #16]
 80272e2:	071b      	lsls	r3, r3, #28
 80272e4:	4974      	ldr	r1, [pc, #464]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80272e6:	4313      	orrs	r3, r2
 80272e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80272ec:	4b72      	ldr	r3, [pc, #456]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80272ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80272f2:	f023 021f 	bic.w	r2, r3, #31
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	69db      	ldr	r3, [r3, #28]
 80272fa:	3b01      	subs	r3, #1
 80272fc:	496e      	ldr	r1, [pc, #440]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80272fe:	4313      	orrs	r3, r2
 8027300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027304:	687b      	ldr	r3, [r7, #4]
 8027306:	681b      	ldr	r3, [r3, #0]
 8027308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802730c:	2b00      	cmp	r3, #0
 802730e:	d00d      	beq.n	802732c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027310:	687b      	ldr	r3, [r7, #4]
 8027312:	685b      	ldr	r3, [r3, #4]
 8027314:	019a      	lsls	r2, r3, #6
 8027316:	687b      	ldr	r3, [r7, #4]
 8027318:	68db      	ldr	r3, [r3, #12]
 802731a:	061b      	lsls	r3, r3, #24
 802731c:	431a      	orrs	r2, r3
 802731e:	687b      	ldr	r3, [r7, #4]
 8027320:	689b      	ldr	r3, [r3, #8]
 8027322:	071b      	lsls	r3, r3, #28
 8027324:	4964      	ldr	r1, [pc, #400]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027326:	4313      	orrs	r3, r2
 8027328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 802732c:	4b61      	ldr	r3, [pc, #388]	; (80274b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 802732e:	2201      	movs	r2, #1
 8027330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027332:	f7fb fed9 	bl	80230e8 <HAL_GetTick>
 8027336:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027338:	e008      	b.n	802734c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 802733a:	f7fb fed5 	bl	80230e8 <HAL_GetTick>
 802733e:	4602      	mov	r2, r0
 8027340:	697b      	ldr	r3, [r7, #20]
 8027342:	1ad3      	subs	r3, r2, r3
 8027344:	2b02      	cmp	r3, #2
 8027346:	d901      	bls.n	802734c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027348:	2303      	movs	r3, #3
 802734a:	e129      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 802734c:	4b5a      	ldr	r3, [pc, #360]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802734e:	681b      	ldr	r3, [r3, #0]
 8027350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027354:	2b00      	cmp	r3, #0
 8027356:	d0f0      	beq.n	802733a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027358:	687b      	ldr	r3, [r7, #4]
 802735a:	681b      	ldr	r3, [r3, #0]
 802735c:	f003 0304 	and.w	r3, r3, #4
 8027360:	2b00      	cmp	r3, #0
 8027362:	d105      	bne.n	8027370 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027364:	687b      	ldr	r3, [r7, #4]
 8027366:	681b      	ldr	r3, [r3, #0]
 8027368:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 802736c:	2b00      	cmp	r3, #0
 802736e:	d079      	beq.n	8027464 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027370:	4b52      	ldr	r3, [pc, #328]	; (80274bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027372:	2200      	movs	r2, #0
 8027374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027376:	f7fb feb7 	bl	80230e8 <HAL_GetTick>
 802737a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 802737c:	e008      	b.n	8027390 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 802737e:	f7fb feb3 	bl	80230e8 <HAL_GetTick>
 8027382:	4602      	mov	r2, r0
 8027384:	697b      	ldr	r3, [r7, #20]
 8027386:	1ad3      	subs	r3, r2, r3
 8027388:	2b02      	cmp	r3, #2
 802738a:	d901      	bls.n	8027390 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802738c:	2303      	movs	r3, #3
 802738e:	e107      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027390:	4b49      	ldr	r3, [pc, #292]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027392:	681b      	ldr	r3, [r3, #0]
 8027394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802739c:	d0ef      	beq.n	802737e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 802739e:	687b      	ldr	r3, [r7, #4]
 80273a0:	681b      	ldr	r3, [r3, #0]
 80273a2:	f003 0304 	and.w	r3, r3, #4
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	d020      	beq.n	80273ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80273aa:	4b43      	ldr	r3, [pc, #268]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80273b0:	0f1b      	lsrs	r3, r3, #28
 80273b2:	f003 0307 	and.w	r3, r3, #7
 80273b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80273b8:	687b      	ldr	r3, [r7, #4]
 80273ba:	691b      	ldr	r3, [r3, #16]
 80273bc:	019a      	lsls	r2, r3, #6
 80273be:	687b      	ldr	r3, [r7, #4]
 80273c0:	695b      	ldr	r3, [r3, #20]
 80273c2:	061b      	lsls	r3, r3, #24
 80273c4:	431a      	orrs	r2, r3
 80273c6:	693b      	ldr	r3, [r7, #16]
 80273c8:	071b      	lsls	r3, r3, #28
 80273ca:	493b      	ldr	r1, [pc, #236]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273cc:	4313      	orrs	r3, r2
 80273ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80273d2:	4b39      	ldr	r3, [pc, #228]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80273d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80273dc:	687b      	ldr	r3, [r7, #4]
 80273de:	6a1b      	ldr	r3, [r3, #32]
 80273e0:	3b01      	subs	r3, #1
 80273e2:	021b      	lsls	r3, r3, #8
 80273e4:	4934      	ldr	r1, [pc, #208]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273e6:	4313      	orrs	r3, r2
 80273e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80273ec:	687b      	ldr	r3, [r7, #4]
 80273ee:	681b      	ldr	r3, [r3, #0]
 80273f0:	f003 0308 	and.w	r3, r3, #8
 80273f4:	2b00      	cmp	r3, #0
 80273f6:	d01e      	beq.n	8027436 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80273f8:	4b2f      	ldr	r3, [pc, #188]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80273fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80273fe:	0e1b      	lsrs	r3, r3, #24
 8027400:	f003 030f 	and.w	r3, r3, #15
 8027404:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027406:	687b      	ldr	r3, [r7, #4]
 8027408:	691b      	ldr	r3, [r3, #16]
 802740a:	019a      	lsls	r2, r3, #6
 802740c:	693b      	ldr	r3, [r7, #16]
 802740e:	061b      	lsls	r3, r3, #24
 8027410:	431a      	orrs	r2, r3
 8027412:	687b      	ldr	r3, [r7, #4]
 8027414:	699b      	ldr	r3, [r3, #24]
 8027416:	071b      	lsls	r3, r3, #28
 8027418:	4927      	ldr	r1, [pc, #156]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802741a:	4313      	orrs	r3, r2
 802741c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027420:	4b25      	ldr	r3, [pc, #148]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027426:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802742a:	687b      	ldr	r3, [r7, #4]
 802742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802742e:	4922      	ldr	r1, [pc, #136]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027430:	4313      	orrs	r3, r2
 8027432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027436:	4b21      	ldr	r3, [pc, #132]	; (80274bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027438:	2201      	movs	r2, #1
 802743a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802743c:	f7fb fe54 	bl	80230e8 <HAL_GetTick>
 8027440:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027442:	e008      	b.n	8027456 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027444:	f7fb fe50 	bl	80230e8 <HAL_GetTick>
 8027448:	4602      	mov	r2, r0
 802744a:	697b      	ldr	r3, [r7, #20]
 802744c:	1ad3      	subs	r3, r2, r3
 802744e:	2b02      	cmp	r3, #2
 8027450:	d901      	bls.n	8027456 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027452:	2303      	movs	r3, #3
 8027454:	e0a4      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027456:	4b18      	ldr	r3, [pc, #96]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027458:	681b      	ldr	r3, [r3, #0]
 802745a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802745e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027462:	d1ef      	bne.n	8027444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027464:	687b      	ldr	r3, [r7, #4]
 8027466:	681b      	ldr	r3, [r3, #0]
 8027468:	f003 0320 	and.w	r3, r3, #32
 802746c:	2b00      	cmp	r3, #0
 802746e:	f000 808b 	beq.w	8027588 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027472:	2300      	movs	r3, #0
 8027474:	60fb      	str	r3, [r7, #12]
 8027476:	4b10      	ldr	r3, [pc, #64]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802747a:	4a0f      	ldr	r2, [pc, #60]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802747c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027480:	6413      	str	r3, [r2, #64]	; 0x40
 8027482:	4b0d      	ldr	r3, [pc, #52]	; (80274b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802748a:	60fb      	str	r3, [r7, #12]
 802748c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802748e:	4b0c      	ldr	r3, [pc, #48]	; (80274c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027490:	681b      	ldr	r3, [r3, #0]
 8027492:	4a0b      	ldr	r2, [pc, #44]	; (80274c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027498:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802749a:	f7fb fe25 	bl	80230e8 <HAL_GetTick>
 802749e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80274a0:	e010      	b.n	80274c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80274a2:	f7fb fe21 	bl	80230e8 <HAL_GetTick>
 80274a6:	4602      	mov	r2, r0
 80274a8:	697b      	ldr	r3, [r7, #20]
 80274aa:	1ad3      	subs	r3, r2, r3
 80274ac:	2b02      	cmp	r3, #2
 80274ae:	d909      	bls.n	80274c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80274b0:	2303      	movs	r3, #3
 80274b2:	e075      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80274b4:	42470068 	.word	0x42470068
 80274b8:	40023800 	.word	0x40023800
 80274bc:	42470070 	.word	0x42470070
 80274c0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80274c4:	4b38      	ldr	r3, [pc, #224]	; (80275a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80274c6:	681b      	ldr	r3, [r3, #0]
 80274c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	d0e8      	beq.n	80274a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80274d0:	4b36      	ldr	r3, [pc, #216]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80274d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80274d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80274d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80274da:	693b      	ldr	r3, [r7, #16]
 80274dc:	2b00      	cmp	r3, #0
 80274de:	d02f      	beq.n	8027540 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80274e0:	687b      	ldr	r3, [r7, #4]
 80274e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80274e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80274e8:	693a      	ldr	r2, [r7, #16]
 80274ea:	429a      	cmp	r2, r3
 80274ec:	d028      	beq.n	8027540 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80274ee:	4b2f      	ldr	r3, [pc, #188]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80274f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80274f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80274f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80274f8:	4b2d      	ldr	r3, [pc, #180]	; (80275b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80274fa:	2201      	movs	r2, #1
 80274fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80274fe:	4b2c      	ldr	r3, [pc, #176]	; (80275b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027500:	2200      	movs	r2, #0
 8027502:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8027504:	4a29      	ldr	r2, [pc, #164]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027506:	693b      	ldr	r3, [r7, #16]
 8027508:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802750a:	4b28      	ldr	r3, [pc, #160]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802750c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802750e:	f003 0301 	and.w	r3, r3, #1
 8027512:	2b01      	cmp	r3, #1
 8027514:	d114      	bne.n	8027540 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8027516:	f7fb fde7 	bl	80230e8 <HAL_GetTick>
 802751a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802751c:	e00a      	b.n	8027534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802751e:	f7fb fde3 	bl	80230e8 <HAL_GetTick>
 8027522:	4602      	mov	r2, r0
 8027524:	697b      	ldr	r3, [r7, #20]
 8027526:	1ad3      	subs	r3, r2, r3
 8027528:	f241 3288 	movw	r2, #5000	; 0x1388
 802752c:	4293      	cmp	r3, r2
 802752e:	d901      	bls.n	8027534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8027530:	2303      	movs	r3, #3
 8027532:	e035      	b.n	80275a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027534:	4b1d      	ldr	r3, [pc, #116]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027538:	f003 0302 	and.w	r3, r3, #2
 802753c:	2b00      	cmp	r3, #0
 802753e:	d0ee      	beq.n	802751e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027540:	687b      	ldr	r3, [r7, #4]
 8027542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802754c:	d10d      	bne.n	802756a <HAL_RCCEx_PeriphCLKConfig+0x332>
 802754e:	4b17      	ldr	r3, [pc, #92]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027550:	689b      	ldr	r3, [r3, #8]
 8027552:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027556:	687b      	ldr	r3, [r7, #4]
 8027558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802755a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802755e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027562:	4912      	ldr	r1, [pc, #72]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027564:	4313      	orrs	r3, r2
 8027566:	608b      	str	r3, [r1, #8]
 8027568:	e005      	b.n	8027576 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 802756a:	4b10      	ldr	r3, [pc, #64]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802756c:	689b      	ldr	r3, [r3, #8]
 802756e:	4a0f      	ldr	r2, [pc, #60]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027570:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027574:	6093      	str	r3, [r2, #8]
 8027576:	4b0d      	ldr	r3, [pc, #52]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802757e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027582:	490a      	ldr	r1, [pc, #40]	; (80275ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027584:	4313      	orrs	r3, r2
 8027586:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027588:	687b      	ldr	r3, [r7, #4]
 802758a:	681b      	ldr	r3, [r3, #0]
 802758c:	f003 0310 	and.w	r3, r3, #16
 8027590:	2b00      	cmp	r3, #0
 8027592:	d004      	beq.n	802759e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8027594:	687b      	ldr	r3, [r7, #4]
 8027596:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 802759a:	4b06      	ldr	r3, [pc, #24]	; (80275b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 802759c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802759e:	2300      	movs	r3, #0
}
 80275a0:	4618      	mov	r0, r3
 80275a2:	3718      	adds	r7, #24
 80275a4:	46bd      	mov	sp, r7
 80275a6:	bd80      	pop	{r7, pc}
 80275a8:	40007000 	.word	0x40007000
 80275ac:	40023800 	.word	0x40023800
 80275b0:	42470e40 	.word	0x42470e40
 80275b4:	424711e0 	.word	0x424711e0

080275b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80275b8:	b580      	push	{r7, lr}
 80275ba:	b082      	sub	sp, #8
 80275bc:	af00      	add	r7, sp, #0
 80275be:	6078      	str	r0, [r7, #4]
 80275c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80275c2:	687b      	ldr	r3, [r7, #4]
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d101      	bne.n	80275cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80275c8:	2301      	movs	r3, #1
 80275ca:	e025      	b.n	8027618 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80275d2:	b2db      	uxtb	r3, r3
 80275d4:	2b00      	cmp	r3, #0
 80275d6:	d106      	bne.n	80275e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80275d8:	687b      	ldr	r3, [r7, #4]
 80275da:	2200      	movs	r2, #0
 80275dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80275e0:	6878      	ldr	r0, [r7, #4]
 80275e2:	f7fa f993 	bl	802190c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80275e6:	687b      	ldr	r3, [r7, #4]
 80275e8:	2202      	movs	r2, #2
 80275ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80275ee:	687b      	ldr	r3, [r7, #4]
 80275f0:	681a      	ldr	r2, [r3, #0]
 80275f2:	687b      	ldr	r3, [r7, #4]
 80275f4:	3304      	adds	r3, #4
 80275f6:	4619      	mov	r1, r3
 80275f8:	4610      	mov	r0, r2
 80275fa:	f002 fb47 	bl	8029c8c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80275fe:	687b      	ldr	r3, [r7, #4]
 8027600:	6818      	ldr	r0, [r3, #0]
 8027602:	687b      	ldr	r3, [r7, #4]
 8027604:	685b      	ldr	r3, [r3, #4]
 8027606:	461a      	mov	r2, r3
 8027608:	6839      	ldr	r1, [r7, #0]
 802760a:	f002 fb9c 	bl	8029d46 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802760e:	687b      	ldr	r3, [r7, #4]
 8027610:	2201      	movs	r2, #1
 8027612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8027616:	2300      	movs	r3, #0
}
 8027618:	4618      	mov	r0, r3
 802761a:	3708      	adds	r7, #8
 802761c:	46bd      	mov	sp, r7
 802761e:	bd80      	pop	{r7, pc}

08027620 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8027620:	b580      	push	{r7, lr}
 8027622:	b086      	sub	sp, #24
 8027624:	af00      	add	r7, sp, #0
 8027626:	60f8      	str	r0, [r7, #12]
 8027628:	60b9      	str	r1, [r7, #8]
 802762a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 802762c:	68fb      	ldr	r3, [r7, #12]
 802762e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8027632:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8027634:	7dfb      	ldrb	r3, [r7, #23]
 8027636:	2b02      	cmp	r3, #2
 8027638:	d101      	bne.n	802763e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 802763a:	2302      	movs	r3, #2
 802763c:	e021      	b.n	8027682 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802763e:	7dfb      	ldrb	r3, [r7, #23]
 8027640:	2b01      	cmp	r3, #1
 8027642:	d002      	beq.n	802764a <HAL_SDRAM_SendCommand+0x2a>
 8027644:	7dfb      	ldrb	r3, [r7, #23]
 8027646:	2b05      	cmp	r3, #5
 8027648:	d118      	bne.n	802767c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802764a:	68fb      	ldr	r3, [r7, #12]
 802764c:	2202      	movs	r2, #2
 802764e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8027652:	68fb      	ldr	r3, [r7, #12]
 8027654:	681b      	ldr	r3, [r3, #0]
 8027656:	687a      	ldr	r2, [r7, #4]
 8027658:	68b9      	ldr	r1, [r7, #8]
 802765a:	4618      	mov	r0, r3
 802765c:	f002 fbdc 	bl	8029e18 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027660:	68bb      	ldr	r3, [r7, #8]
 8027662:	681b      	ldr	r3, [r3, #0]
 8027664:	2b02      	cmp	r3, #2
 8027666:	d104      	bne.n	8027672 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8027668:	68fb      	ldr	r3, [r7, #12]
 802766a:	2205      	movs	r2, #5
 802766c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8027670:	e006      	b.n	8027680 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8027672:	68fb      	ldr	r3, [r7, #12]
 8027674:	2201      	movs	r2, #1
 8027676:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802767a:	e001      	b.n	8027680 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 802767c:	2301      	movs	r3, #1
 802767e:	e000      	b.n	8027682 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8027680:	2300      	movs	r3, #0
}
 8027682:	4618      	mov	r0, r3
 8027684:	3718      	adds	r7, #24
 8027686:	46bd      	mov	sp, r7
 8027688:	bd80      	pop	{r7, pc}

0802768a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 802768a:	b580      	push	{r7, lr}
 802768c:	b082      	sub	sp, #8
 802768e:	af00      	add	r7, sp, #0
 8027690:	6078      	str	r0, [r7, #4]
 8027692:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8027694:	687b      	ldr	r3, [r7, #4]
 8027696:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802769a:	b2db      	uxtb	r3, r3
 802769c:	2b02      	cmp	r3, #2
 802769e:	d101      	bne.n	80276a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80276a0:	2302      	movs	r3, #2
 80276a2:	e016      	b.n	80276d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80276a4:	687b      	ldr	r3, [r7, #4]
 80276a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80276aa:	b2db      	uxtb	r3, r3
 80276ac:	2b01      	cmp	r3, #1
 80276ae:	d10f      	bne.n	80276d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80276b0:	687b      	ldr	r3, [r7, #4]
 80276b2:	2202      	movs	r2, #2
 80276b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80276b8:	687b      	ldr	r3, [r7, #4]
 80276ba:	681b      	ldr	r3, [r3, #0]
 80276bc:	6839      	ldr	r1, [r7, #0]
 80276be:	4618      	mov	r0, r3
 80276c0:	f002 fbe7 	bl	8029e92 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80276c4:	687b      	ldr	r3, [r7, #4]
 80276c6:	2201      	movs	r2, #1
 80276c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80276cc:	2300      	movs	r3, #0
 80276ce:	e000      	b.n	80276d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80276d0:	2301      	movs	r3, #1
}
 80276d2:	4618      	mov	r0, r3
 80276d4:	3708      	adds	r7, #8
 80276d6:	46bd      	mov	sp, r7
 80276d8:	bd80      	pop	{r7, pc}

080276da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80276da:	b580      	push	{r7, lr}
 80276dc:	b082      	sub	sp, #8
 80276de:	af00      	add	r7, sp, #0
 80276e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80276e2:	687b      	ldr	r3, [r7, #4]
 80276e4:	2b00      	cmp	r3, #0
 80276e6:	d101      	bne.n	80276ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80276e8:	2301      	movs	r3, #1
 80276ea:	e07b      	b.n	80277e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80276ec:	687b      	ldr	r3, [r7, #4]
 80276ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80276f0:	2b00      	cmp	r3, #0
 80276f2:	d108      	bne.n	8027706 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80276f4:	687b      	ldr	r3, [r7, #4]
 80276f6:	685b      	ldr	r3, [r3, #4]
 80276f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80276fc:	d009      	beq.n	8027712 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80276fe:	687b      	ldr	r3, [r7, #4]
 8027700:	2200      	movs	r2, #0
 8027702:	61da      	str	r2, [r3, #28]
 8027704:	e005      	b.n	8027712 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8027706:	687b      	ldr	r3, [r7, #4]
 8027708:	2200      	movs	r2, #0
 802770a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802770c:	687b      	ldr	r3, [r7, #4]
 802770e:	2200      	movs	r2, #0
 8027710:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	2200      	movs	r2, #0
 8027716:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8027718:	687b      	ldr	r3, [r7, #4]
 802771a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802771e:	b2db      	uxtb	r3, r3
 8027720:	2b00      	cmp	r3, #0
 8027722:	d106      	bne.n	8027732 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8027724:	687b      	ldr	r3, [r7, #4]
 8027726:	2200      	movs	r2, #0
 8027728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802772c:	6878      	ldr	r0, [r7, #4]
 802772e:	f7f9 ff2b 	bl	8021588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8027732:	687b      	ldr	r3, [r7, #4]
 8027734:	2202      	movs	r2, #2
 8027736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802773a:	687b      	ldr	r3, [r7, #4]
 802773c:	681b      	ldr	r3, [r3, #0]
 802773e:	681a      	ldr	r2, [r3, #0]
 8027740:	687b      	ldr	r3, [r7, #4]
 8027742:	681b      	ldr	r3, [r3, #0]
 8027744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027748:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802774a:	687b      	ldr	r3, [r7, #4]
 802774c:	685b      	ldr	r3, [r3, #4]
 802774e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8027752:	687b      	ldr	r3, [r7, #4]
 8027754:	689b      	ldr	r3, [r3, #8]
 8027756:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802775a:	431a      	orrs	r2, r3
 802775c:	687b      	ldr	r3, [r7, #4]
 802775e:	68db      	ldr	r3, [r3, #12]
 8027760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8027764:	431a      	orrs	r2, r3
 8027766:	687b      	ldr	r3, [r7, #4]
 8027768:	691b      	ldr	r3, [r3, #16]
 802776a:	f003 0302 	and.w	r3, r3, #2
 802776e:	431a      	orrs	r2, r3
 8027770:	687b      	ldr	r3, [r7, #4]
 8027772:	695b      	ldr	r3, [r3, #20]
 8027774:	f003 0301 	and.w	r3, r3, #1
 8027778:	431a      	orrs	r2, r3
 802777a:	687b      	ldr	r3, [r7, #4]
 802777c:	699b      	ldr	r3, [r3, #24]
 802777e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027782:	431a      	orrs	r2, r3
 8027784:	687b      	ldr	r3, [r7, #4]
 8027786:	69db      	ldr	r3, [r3, #28]
 8027788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802778c:	431a      	orrs	r2, r3
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	6a1b      	ldr	r3, [r3, #32]
 8027792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027796:	ea42 0103 	orr.w	r1, r2, r3
 802779a:	687b      	ldr	r3, [r7, #4]
 802779c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802779e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80277a2:	687b      	ldr	r3, [r7, #4]
 80277a4:	681b      	ldr	r3, [r3, #0]
 80277a6:	430a      	orrs	r2, r1
 80277a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80277aa:	687b      	ldr	r3, [r7, #4]
 80277ac:	699b      	ldr	r3, [r3, #24]
 80277ae:	0c1b      	lsrs	r3, r3, #16
 80277b0:	f003 0104 	and.w	r1, r3, #4
 80277b4:	687b      	ldr	r3, [r7, #4]
 80277b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80277b8:	f003 0210 	and.w	r2, r3, #16
 80277bc:	687b      	ldr	r3, [r7, #4]
 80277be:	681b      	ldr	r3, [r3, #0]
 80277c0:	430a      	orrs	r2, r1
 80277c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80277c4:	687b      	ldr	r3, [r7, #4]
 80277c6:	681b      	ldr	r3, [r3, #0]
 80277c8:	69da      	ldr	r2, [r3, #28]
 80277ca:	687b      	ldr	r3, [r7, #4]
 80277cc:	681b      	ldr	r3, [r3, #0]
 80277ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80277d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80277d4:	687b      	ldr	r3, [r7, #4]
 80277d6:	2200      	movs	r2, #0
 80277d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80277da:	687b      	ldr	r3, [r7, #4]
 80277dc:	2201      	movs	r2, #1
 80277de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80277e2:	2300      	movs	r3, #0
}
 80277e4:	4618      	mov	r0, r3
 80277e6:	3708      	adds	r7, #8
 80277e8:	46bd      	mov	sp, r7
 80277ea:	bd80      	pop	{r7, pc}

080277ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80277ec:	b580      	push	{r7, lr}
 80277ee:	b082      	sub	sp, #8
 80277f0:	af00      	add	r7, sp, #0
 80277f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80277f4:	687b      	ldr	r3, [r7, #4]
 80277f6:	2b00      	cmp	r3, #0
 80277f8:	d101      	bne.n	80277fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80277fa:	2301      	movs	r3, #1
 80277fc:	e01a      	b.n	8027834 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80277fe:	687b      	ldr	r3, [r7, #4]
 8027800:	2202      	movs	r2, #2
 8027802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8027806:	687b      	ldr	r3, [r7, #4]
 8027808:	681b      	ldr	r3, [r3, #0]
 802780a:	681a      	ldr	r2, [r3, #0]
 802780c:	687b      	ldr	r3, [r7, #4]
 802780e:	681b      	ldr	r3, [r3, #0]
 8027810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027814:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8027816:	6878      	ldr	r0, [r7, #4]
 8027818:	f7f9 fefe 	bl	8021618 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802781c:	687b      	ldr	r3, [r7, #4]
 802781e:	2200      	movs	r2, #0
 8027820:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8027822:	687b      	ldr	r3, [r7, #4]
 8027824:	2200      	movs	r2, #0
 8027826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 802782a:	687b      	ldr	r3, [r7, #4]
 802782c:	2200      	movs	r2, #0
 802782e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8027832:	2300      	movs	r3, #0
}
 8027834:	4618      	mov	r0, r3
 8027836:	3708      	adds	r7, #8
 8027838:	46bd      	mov	sp, r7
 802783a:	bd80      	pop	{r7, pc}

0802783c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802783c:	b580      	push	{r7, lr}
 802783e:	b088      	sub	sp, #32
 8027840:	af00      	add	r7, sp, #0
 8027842:	60f8      	str	r0, [r7, #12]
 8027844:	60b9      	str	r1, [r7, #8]
 8027846:	603b      	str	r3, [r7, #0]
 8027848:	4613      	mov	r3, r2
 802784a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802784c:	2300      	movs	r3, #0
 802784e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027850:	68fb      	ldr	r3, [r7, #12]
 8027852:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027856:	2b01      	cmp	r3, #1
 8027858:	d101      	bne.n	802785e <HAL_SPI_Transmit+0x22>
 802785a:	2302      	movs	r3, #2
 802785c:	e126      	b.n	8027aac <HAL_SPI_Transmit+0x270>
 802785e:	68fb      	ldr	r3, [r7, #12]
 8027860:	2201      	movs	r2, #1
 8027862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027866:	f7fb fc3f 	bl	80230e8 <HAL_GetTick>
 802786a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802786c:	88fb      	ldrh	r3, [r7, #6]
 802786e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027870:	68fb      	ldr	r3, [r7, #12]
 8027872:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027876:	b2db      	uxtb	r3, r3
 8027878:	2b01      	cmp	r3, #1
 802787a:	d002      	beq.n	8027882 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802787c:	2302      	movs	r3, #2
 802787e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027880:	e10b      	b.n	8027a9a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8027882:	68bb      	ldr	r3, [r7, #8]
 8027884:	2b00      	cmp	r3, #0
 8027886:	d002      	beq.n	802788e <HAL_SPI_Transmit+0x52>
 8027888:	88fb      	ldrh	r3, [r7, #6]
 802788a:	2b00      	cmp	r3, #0
 802788c:	d102      	bne.n	8027894 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802788e:	2301      	movs	r3, #1
 8027890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8027892:	e102      	b.n	8027a9a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8027894:	68fb      	ldr	r3, [r7, #12]
 8027896:	2203      	movs	r2, #3
 8027898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802789c:	68fb      	ldr	r3, [r7, #12]
 802789e:	2200      	movs	r2, #0
 80278a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80278a2:	68fb      	ldr	r3, [r7, #12]
 80278a4:	68ba      	ldr	r2, [r7, #8]
 80278a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80278a8:	68fb      	ldr	r3, [r7, #12]
 80278aa:	88fa      	ldrh	r2, [r7, #6]
 80278ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80278ae:	68fb      	ldr	r3, [r7, #12]
 80278b0:	88fa      	ldrh	r2, [r7, #6]
 80278b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80278b4:	68fb      	ldr	r3, [r7, #12]
 80278b6:	2200      	movs	r2, #0
 80278b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80278ba:	68fb      	ldr	r3, [r7, #12]
 80278bc:	2200      	movs	r2, #0
 80278be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80278c0:	68fb      	ldr	r3, [r7, #12]
 80278c2:	2200      	movs	r2, #0
 80278c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80278c6:	68fb      	ldr	r3, [r7, #12]
 80278c8:	2200      	movs	r2, #0
 80278ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80278cc:	68fb      	ldr	r3, [r7, #12]
 80278ce:	2200      	movs	r2, #0
 80278d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80278d2:	68fb      	ldr	r3, [r7, #12]
 80278d4:	689b      	ldr	r3, [r3, #8]
 80278d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80278da:	d10f      	bne.n	80278fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80278dc:	68fb      	ldr	r3, [r7, #12]
 80278de:	681b      	ldr	r3, [r3, #0]
 80278e0:	681a      	ldr	r2, [r3, #0]
 80278e2:	68fb      	ldr	r3, [r7, #12]
 80278e4:	681b      	ldr	r3, [r3, #0]
 80278e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80278ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80278ec:	68fb      	ldr	r3, [r7, #12]
 80278ee:	681b      	ldr	r3, [r3, #0]
 80278f0:	681a      	ldr	r2, [r3, #0]
 80278f2:	68fb      	ldr	r3, [r7, #12]
 80278f4:	681b      	ldr	r3, [r3, #0]
 80278f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80278fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80278fc:	68fb      	ldr	r3, [r7, #12]
 80278fe:	681b      	ldr	r3, [r3, #0]
 8027900:	681b      	ldr	r3, [r3, #0]
 8027902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027906:	2b40      	cmp	r3, #64	; 0x40
 8027908:	d007      	beq.n	802791a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802790a:	68fb      	ldr	r3, [r7, #12]
 802790c:	681b      	ldr	r3, [r3, #0]
 802790e:	681a      	ldr	r2, [r3, #0]
 8027910:	68fb      	ldr	r3, [r7, #12]
 8027912:	681b      	ldr	r3, [r3, #0]
 8027914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802791a:	68fb      	ldr	r3, [r7, #12]
 802791c:	68db      	ldr	r3, [r3, #12]
 802791e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027922:	d14b      	bne.n	80279bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027924:	68fb      	ldr	r3, [r7, #12]
 8027926:	685b      	ldr	r3, [r3, #4]
 8027928:	2b00      	cmp	r3, #0
 802792a:	d002      	beq.n	8027932 <HAL_SPI_Transmit+0xf6>
 802792c:	8afb      	ldrh	r3, [r7, #22]
 802792e:	2b01      	cmp	r3, #1
 8027930:	d13e      	bne.n	80279b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027932:	68fb      	ldr	r3, [r7, #12]
 8027934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027936:	881a      	ldrh	r2, [r3, #0]
 8027938:	68fb      	ldr	r3, [r7, #12]
 802793a:	681b      	ldr	r3, [r3, #0]
 802793c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802793e:	68fb      	ldr	r3, [r7, #12]
 8027940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027942:	1c9a      	adds	r2, r3, #2
 8027944:	68fb      	ldr	r3, [r7, #12]
 8027946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027948:	68fb      	ldr	r3, [r7, #12]
 802794a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802794c:	b29b      	uxth	r3, r3
 802794e:	3b01      	subs	r3, #1
 8027950:	b29a      	uxth	r2, r3
 8027952:	68fb      	ldr	r3, [r7, #12]
 8027954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8027956:	e02b      	b.n	80279b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8027958:	68fb      	ldr	r3, [r7, #12]
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	689b      	ldr	r3, [r3, #8]
 802795e:	f003 0302 	and.w	r3, r3, #2
 8027962:	2b02      	cmp	r3, #2
 8027964:	d112      	bne.n	802798c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027966:	68fb      	ldr	r3, [r7, #12]
 8027968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802796a:	881a      	ldrh	r2, [r3, #0]
 802796c:	68fb      	ldr	r3, [r7, #12]
 802796e:	681b      	ldr	r3, [r3, #0]
 8027970:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027972:	68fb      	ldr	r3, [r7, #12]
 8027974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027976:	1c9a      	adds	r2, r3, #2
 8027978:	68fb      	ldr	r3, [r7, #12]
 802797a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802797c:	68fb      	ldr	r3, [r7, #12]
 802797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027980:	b29b      	uxth	r3, r3
 8027982:	3b01      	subs	r3, #1
 8027984:	b29a      	uxth	r2, r3
 8027986:	68fb      	ldr	r3, [r7, #12]
 8027988:	86da      	strh	r2, [r3, #54]	; 0x36
 802798a:	e011      	b.n	80279b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802798c:	f7fb fbac 	bl	80230e8 <HAL_GetTick>
 8027990:	4602      	mov	r2, r0
 8027992:	69bb      	ldr	r3, [r7, #24]
 8027994:	1ad3      	subs	r3, r2, r3
 8027996:	683a      	ldr	r2, [r7, #0]
 8027998:	429a      	cmp	r2, r3
 802799a:	d803      	bhi.n	80279a4 <HAL_SPI_Transmit+0x168>
 802799c:	683b      	ldr	r3, [r7, #0]
 802799e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80279a2:	d102      	bne.n	80279aa <HAL_SPI_Transmit+0x16e>
 80279a4:	683b      	ldr	r3, [r7, #0]
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	d102      	bne.n	80279b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80279aa:	2303      	movs	r3, #3
 80279ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80279ae:	e074      	b.n	8027a9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80279b0:	68fb      	ldr	r3, [r7, #12]
 80279b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80279b4:	b29b      	uxth	r3, r3
 80279b6:	2b00      	cmp	r3, #0
 80279b8:	d1ce      	bne.n	8027958 <HAL_SPI_Transmit+0x11c>
 80279ba:	e04c      	b.n	8027a56 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80279bc:	68fb      	ldr	r3, [r7, #12]
 80279be:	685b      	ldr	r3, [r3, #4]
 80279c0:	2b00      	cmp	r3, #0
 80279c2:	d002      	beq.n	80279ca <HAL_SPI_Transmit+0x18e>
 80279c4:	8afb      	ldrh	r3, [r7, #22]
 80279c6:	2b01      	cmp	r3, #1
 80279c8:	d140      	bne.n	8027a4c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80279ca:	68fb      	ldr	r3, [r7, #12]
 80279cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80279ce:	68fb      	ldr	r3, [r7, #12]
 80279d0:	681b      	ldr	r3, [r3, #0]
 80279d2:	330c      	adds	r3, #12
 80279d4:	7812      	ldrb	r2, [r2, #0]
 80279d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80279d8:	68fb      	ldr	r3, [r7, #12]
 80279da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80279dc:	1c5a      	adds	r2, r3, #1
 80279de:	68fb      	ldr	r3, [r7, #12]
 80279e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80279e2:	68fb      	ldr	r3, [r7, #12]
 80279e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80279e6:	b29b      	uxth	r3, r3
 80279e8:	3b01      	subs	r3, #1
 80279ea:	b29a      	uxth	r2, r3
 80279ec:	68fb      	ldr	r3, [r7, #12]
 80279ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80279f0:	e02c      	b.n	8027a4c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80279f2:	68fb      	ldr	r3, [r7, #12]
 80279f4:	681b      	ldr	r3, [r3, #0]
 80279f6:	689b      	ldr	r3, [r3, #8]
 80279f8:	f003 0302 	and.w	r3, r3, #2
 80279fc:	2b02      	cmp	r3, #2
 80279fe:	d113      	bne.n	8027a28 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027a00:	68fb      	ldr	r3, [r7, #12]
 8027a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027a04:	68fb      	ldr	r3, [r7, #12]
 8027a06:	681b      	ldr	r3, [r3, #0]
 8027a08:	330c      	adds	r3, #12
 8027a0a:	7812      	ldrb	r2, [r2, #0]
 8027a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8027a0e:	68fb      	ldr	r3, [r7, #12]
 8027a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027a12:	1c5a      	adds	r2, r3, #1
 8027a14:	68fb      	ldr	r3, [r7, #12]
 8027a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027a18:	68fb      	ldr	r3, [r7, #12]
 8027a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a1c:	b29b      	uxth	r3, r3
 8027a1e:	3b01      	subs	r3, #1
 8027a20:	b29a      	uxth	r2, r3
 8027a22:	68fb      	ldr	r3, [r7, #12]
 8027a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8027a26:	e011      	b.n	8027a4c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027a28:	f7fb fb5e 	bl	80230e8 <HAL_GetTick>
 8027a2c:	4602      	mov	r2, r0
 8027a2e:	69bb      	ldr	r3, [r7, #24]
 8027a30:	1ad3      	subs	r3, r2, r3
 8027a32:	683a      	ldr	r2, [r7, #0]
 8027a34:	429a      	cmp	r2, r3
 8027a36:	d803      	bhi.n	8027a40 <HAL_SPI_Transmit+0x204>
 8027a38:	683b      	ldr	r3, [r7, #0]
 8027a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027a3e:	d102      	bne.n	8027a46 <HAL_SPI_Transmit+0x20a>
 8027a40:	683b      	ldr	r3, [r7, #0]
 8027a42:	2b00      	cmp	r3, #0
 8027a44:	d102      	bne.n	8027a4c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8027a46:	2303      	movs	r3, #3
 8027a48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8027a4a:	e026      	b.n	8027a9a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027a50:	b29b      	uxth	r3, r3
 8027a52:	2b00      	cmp	r3, #0
 8027a54:	d1cd      	bne.n	80279f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027a56:	69ba      	ldr	r2, [r7, #24]
 8027a58:	6839      	ldr	r1, [r7, #0]
 8027a5a:	68f8      	ldr	r0, [r7, #12]
 8027a5c:	f000 fbda 	bl	8028214 <SPI_EndRxTxTransaction>
 8027a60:	4603      	mov	r3, r0
 8027a62:	2b00      	cmp	r3, #0
 8027a64:	d002      	beq.n	8027a6c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027a66:	68fb      	ldr	r3, [r7, #12]
 8027a68:	2220      	movs	r2, #32
 8027a6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027a6c:	68fb      	ldr	r3, [r7, #12]
 8027a6e:	689b      	ldr	r3, [r3, #8]
 8027a70:	2b00      	cmp	r3, #0
 8027a72:	d10a      	bne.n	8027a8a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027a74:	2300      	movs	r3, #0
 8027a76:	613b      	str	r3, [r7, #16]
 8027a78:	68fb      	ldr	r3, [r7, #12]
 8027a7a:	681b      	ldr	r3, [r3, #0]
 8027a7c:	68db      	ldr	r3, [r3, #12]
 8027a7e:	613b      	str	r3, [r7, #16]
 8027a80:	68fb      	ldr	r3, [r7, #12]
 8027a82:	681b      	ldr	r3, [r3, #0]
 8027a84:	689b      	ldr	r3, [r3, #8]
 8027a86:	613b      	str	r3, [r7, #16]
 8027a88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027a8a:	68fb      	ldr	r3, [r7, #12]
 8027a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027a8e:	2b00      	cmp	r3, #0
 8027a90:	d002      	beq.n	8027a98 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8027a92:	2301      	movs	r3, #1
 8027a94:	77fb      	strb	r3, [r7, #31]
 8027a96:	e000      	b.n	8027a9a <HAL_SPI_Transmit+0x25e>
  }

error:
 8027a98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027a9a:	68fb      	ldr	r3, [r7, #12]
 8027a9c:	2201      	movs	r2, #1
 8027a9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8027aa2:	68fb      	ldr	r3, [r7, #12]
 8027aa4:	2200      	movs	r2, #0
 8027aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027aaa:	7ffb      	ldrb	r3, [r7, #31]
}
 8027aac:	4618      	mov	r0, r3
 8027aae:	3720      	adds	r7, #32
 8027ab0:	46bd      	mov	sp, r7
 8027ab2:	bd80      	pop	{r7, pc}

08027ab4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8027ab4:	b580      	push	{r7, lr}
 8027ab6:	b088      	sub	sp, #32
 8027ab8:	af02      	add	r7, sp, #8
 8027aba:	60f8      	str	r0, [r7, #12]
 8027abc:	60b9      	str	r1, [r7, #8]
 8027abe:	603b      	str	r3, [r7, #0]
 8027ac0:	4613      	mov	r3, r2
 8027ac2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8027ac4:	2300      	movs	r3, #0
 8027ac6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8027ac8:	68fb      	ldr	r3, [r7, #12]
 8027aca:	685b      	ldr	r3, [r3, #4]
 8027acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027ad0:	d112      	bne.n	8027af8 <HAL_SPI_Receive+0x44>
 8027ad2:	68fb      	ldr	r3, [r7, #12]
 8027ad4:	689b      	ldr	r3, [r3, #8]
 8027ad6:	2b00      	cmp	r3, #0
 8027ad8:	d10e      	bne.n	8027af8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8027ada:	68fb      	ldr	r3, [r7, #12]
 8027adc:	2204      	movs	r2, #4
 8027ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8027ae2:	88fa      	ldrh	r2, [r7, #6]
 8027ae4:	683b      	ldr	r3, [r7, #0]
 8027ae6:	9300      	str	r3, [sp, #0]
 8027ae8:	4613      	mov	r3, r2
 8027aea:	68ba      	ldr	r2, [r7, #8]
 8027aec:	68b9      	ldr	r1, [r7, #8]
 8027aee:	68f8      	ldr	r0, [r7, #12]
 8027af0:	f000 f8f1 	bl	8027cd6 <HAL_SPI_TransmitReceive>
 8027af4:	4603      	mov	r3, r0
 8027af6:	e0ea      	b.n	8027cce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027af8:	68fb      	ldr	r3, [r7, #12]
 8027afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027afe:	2b01      	cmp	r3, #1
 8027b00:	d101      	bne.n	8027b06 <HAL_SPI_Receive+0x52>
 8027b02:	2302      	movs	r3, #2
 8027b04:	e0e3      	b.n	8027cce <HAL_SPI_Receive+0x21a>
 8027b06:	68fb      	ldr	r3, [r7, #12]
 8027b08:	2201      	movs	r2, #1
 8027b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027b0e:	f7fb faeb 	bl	80230e8 <HAL_GetTick>
 8027b12:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8027b14:	68fb      	ldr	r3, [r7, #12]
 8027b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027b1a:	b2db      	uxtb	r3, r3
 8027b1c:	2b01      	cmp	r3, #1
 8027b1e:	d002      	beq.n	8027b26 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8027b20:	2302      	movs	r3, #2
 8027b22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027b24:	e0ca      	b.n	8027cbc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8027b26:	68bb      	ldr	r3, [r7, #8]
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	d002      	beq.n	8027b32 <HAL_SPI_Receive+0x7e>
 8027b2c:	88fb      	ldrh	r3, [r7, #6]
 8027b2e:	2b00      	cmp	r3, #0
 8027b30:	d102      	bne.n	8027b38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8027b32:	2301      	movs	r3, #1
 8027b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8027b36:	e0c1      	b.n	8027cbc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8027b38:	68fb      	ldr	r3, [r7, #12]
 8027b3a:	2204      	movs	r2, #4
 8027b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027b40:	68fb      	ldr	r3, [r7, #12]
 8027b42:	2200      	movs	r2, #0
 8027b44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8027b46:	68fb      	ldr	r3, [r7, #12]
 8027b48:	68ba      	ldr	r2, [r7, #8]
 8027b4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8027b4c:	68fb      	ldr	r3, [r7, #12]
 8027b4e:	88fa      	ldrh	r2, [r7, #6]
 8027b50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8027b52:	68fb      	ldr	r3, [r7, #12]
 8027b54:	88fa      	ldrh	r2, [r7, #6]
 8027b56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8027b58:	68fb      	ldr	r3, [r7, #12]
 8027b5a:	2200      	movs	r2, #0
 8027b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8027b5e:	68fb      	ldr	r3, [r7, #12]
 8027b60:	2200      	movs	r2, #0
 8027b62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8027b64:	68fb      	ldr	r3, [r7, #12]
 8027b66:	2200      	movs	r2, #0
 8027b68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8027b6a:	68fb      	ldr	r3, [r7, #12]
 8027b6c:	2200      	movs	r2, #0
 8027b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027b70:	68fb      	ldr	r3, [r7, #12]
 8027b72:	2200      	movs	r2, #0
 8027b74:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8027b76:	68fb      	ldr	r3, [r7, #12]
 8027b78:	689b      	ldr	r3, [r3, #8]
 8027b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8027b7e:	d10f      	bne.n	8027ba0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8027b80:	68fb      	ldr	r3, [r7, #12]
 8027b82:	681b      	ldr	r3, [r3, #0]
 8027b84:	681a      	ldr	r2, [r3, #0]
 8027b86:	68fb      	ldr	r3, [r7, #12]
 8027b88:	681b      	ldr	r3, [r3, #0]
 8027b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8027b8e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8027b90:	68fb      	ldr	r3, [r7, #12]
 8027b92:	681b      	ldr	r3, [r3, #0]
 8027b94:	681a      	ldr	r2, [r3, #0]
 8027b96:	68fb      	ldr	r3, [r7, #12]
 8027b98:	681b      	ldr	r3, [r3, #0]
 8027b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8027b9e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027ba0:	68fb      	ldr	r3, [r7, #12]
 8027ba2:	681b      	ldr	r3, [r3, #0]
 8027ba4:	681b      	ldr	r3, [r3, #0]
 8027ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027baa:	2b40      	cmp	r3, #64	; 0x40
 8027bac:	d007      	beq.n	8027bbe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027bae:	68fb      	ldr	r3, [r7, #12]
 8027bb0:	681b      	ldr	r3, [r3, #0]
 8027bb2:	681a      	ldr	r2, [r3, #0]
 8027bb4:	68fb      	ldr	r3, [r7, #12]
 8027bb6:	681b      	ldr	r3, [r3, #0]
 8027bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027bbc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8027bbe:	68fb      	ldr	r3, [r7, #12]
 8027bc0:	68db      	ldr	r3, [r3, #12]
 8027bc2:	2b00      	cmp	r3, #0
 8027bc4:	d162      	bne.n	8027c8c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8027bc6:	e02e      	b.n	8027c26 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027bc8:	68fb      	ldr	r3, [r7, #12]
 8027bca:	681b      	ldr	r3, [r3, #0]
 8027bcc:	689b      	ldr	r3, [r3, #8]
 8027bce:	f003 0301 	and.w	r3, r3, #1
 8027bd2:	2b01      	cmp	r3, #1
 8027bd4:	d115      	bne.n	8027c02 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8027bd6:	68fb      	ldr	r3, [r7, #12]
 8027bd8:	681b      	ldr	r3, [r3, #0]
 8027bda:	f103 020c 	add.w	r2, r3, #12
 8027bde:	68fb      	ldr	r3, [r7, #12]
 8027be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027be2:	7812      	ldrb	r2, [r2, #0]
 8027be4:	b2d2      	uxtb	r2, r2
 8027be6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8027be8:	68fb      	ldr	r3, [r7, #12]
 8027bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027bec:	1c5a      	adds	r2, r3, #1
 8027bee:	68fb      	ldr	r3, [r7, #12]
 8027bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027bf2:	68fb      	ldr	r3, [r7, #12]
 8027bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027bf6:	b29b      	uxth	r3, r3
 8027bf8:	3b01      	subs	r3, #1
 8027bfa:	b29a      	uxth	r2, r3
 8027bfc:	68fb      	ldr	r3, [r7, #12]
 8027bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027c00:	e011      	b.n	8027c26 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027c02:	f7fb fa71 	bl	80230e8 <HAL_GetTick>
 8027c06:	4602      	mov	r2, r0
 8027c08:	693b      	ldr	r3, [r7, #16]
 8027c0a:	1ad3      	subs	r3, r2, r3
 8027c0c:	683a      	ldr	r2, [r7, #0]
 8027c0e:	429a      	cmp	r2, r3
 8027c10:	d803      	bhi.n	8027c1a <HAL_SPI_Receive+0x166>
 8027c12:	683b      	ldr	r3, [r7, #0]
 8027c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c18:	d102      	bne.n	8027c20 <HAL_SPI_Receive+0x16c>
 8027c1a:	683b      	ldr	r3, [r7, #0]
 8027c1c:	2b00      	cmp	r3, #0
 8027c1e:	d102      	bne.n	8027c26 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8027c20:	2303      	movs	r3, #3
 8027c22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027c24:	e04a      	b.n	8027cbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027c26:	68fb      	ldr	r3, [r7, #12]
 8027c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c2a:	b29b      	uxth	r3, r3
 8027c2c:	2b00      	cmp	r3, #0
 8027c2e:	d1cb      	bne.n	8027bc8 <HAL_SPI_Receive+0x114>
 8027c30:	e031      	b.n	8027c96 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8027c32:	68fb      	ldr	r3, [r7, #12]
 8027c34:	681b      	ldr	r3, [r3, #0]
 8027c36:	689b      	ldr	r3, [r3, #8]
 8027c38:	f003 0301 	and.w	r3, r3, #1
 8027c3c:	2b01      	cmp	r3, #1
 8027c3e:	d113      	bne.n	8027c68 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027c40:	68fb      	ldr	r3, [r7, #12]
 8027c42:	681b      	ldr	r3, [r3, #0]
 8027c44:	68da      	ldr	r2, [r3, #12]
 8027c46:	68fb      	ldr	r3, [r7, #12]
 8027c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c4a:	b292      	uxth	r2, r2
 8027c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027c4e:	68fb      	ldr	r3, [r7, #12]
 8027c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027c52:	1c9a      	adds	r2, r3, #2
 8027c54:	68fb      	ldr	r3, [r7, #12]
 8027c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027c58:	68fb      	ldr	r3, [r7, #12]
 8027c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c5c:	b29b      	uxth	r3, r3
 8027c5e:	3b01      	subs	r3, #1
 8027c60:	b29a      	uxth	r2, r3
 8027c62:	68fb      	ldr	r3, [r7, #12]
 8027c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8027c66:	e011      	b.n	8027c8c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8027c68:	f7fb fa3e 	bl	80230e8 <HAL_GetTick>
 8027c6c:	4602      	mov	r2, r0
 8027c6e:	693b      	ldr	r3, [r7, #16]
 8027c70:	1ad3      	subs	r3, r2, r3
 8027c72:	683a      	ldr	r2, [r7, #0]
 8027c74:	429a      	cmp	r2, r3
 8027c76:	d803      	bhi.n	8027c80 <HAL_SPI_Receive+0x1cc>
 8027c78:	683b      	ldr	r3, [r7, #0]
 8027c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027c7e:	d102      	bne.n	8027c86 <HAL_SPI_Receive+0x1d2>
 8027c80:	683b      	ldr	r3, [r7, #0]
 8027c82:	2b00      	cmp	r3, #0
 8027c84:	d102      	bne.n	8027c8c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8027c86:	2303      	movs	r3, #3
 8027c88:	75fb      	strb	r3, [r7, #23]
          goto error;
 8027c8a:	e017      	b.n	8027cbc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8027c8c:	68fb      	ldr	r3, [r7, #12]
 8027c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027c90:	b29b      	uxth	r3, r3
 8027c92:	2b00      	cmp	r3, #0
 8027c94:	d1cd      	bne.n	8027c32 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027c96:	693a      	ldr	r2, [r7, #16]
 8027c98:	6839      	ldr	r1, [r7, #0]
 8027c9a:	68f8      	ldr	r0, [r7, #12]
 8027c9c:	f000 fa54 	bl	8028148 <SPI_EndRxTransaction>
 8027ca0:	4603      	mov	r3, r0
 8027ca2:	2b00      	cmp	r3, #0
 8027ca4:	d002      	beq.n	8027cac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027ca6:	68fb      	ldr	r3, [r7, #12]
 8027ca8:	2220      	movs	r2, #32
 8027caa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8027cac:	68fb      	ldr	r3, [r7, #12]
 8027cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027cb0:	2b00      	cmp	r3, #0
 8027cb2:	d002      	beq.n	8027cba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8027cb4:	2301      	movs	r3, #1
 8027cb6:	75fb      	strb	r3, [r7, #23]
 8027cb8:	e000      	b.n	8027cbc <HAL_SPI_Receive+0x208>
  }

error :
 8027cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027cbc:	68fb      	ldr	r3, [r7, #12]
 8027cbe:	2201      	movs	r2, #1
 8027cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8027cc4:	68fb      	ldr	r3, [r7, #12]
 8027cc6:	2200      	movs	r2, #0
 8027cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8027ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8027cce:	4618      	mov	r0, r3
 8027cd0:	3718      	adds	r7, #24
 8027cd2:	46bd      	mov	sp, r7
 8027cd4:	bd80      	pop	{r7, pc}

08027cd6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8027cd6:	b580      	push	{r7, lr}
 8027cd8:	b08c      	sub	sp, #48	; 0x30
 8027cda:	af00      	add	r7, sp, #0
 8027cdc:	60f8      	str	r0, [r7, #12]
 8027cde:	60b9      	str	r1, [r7, #8]
 8027ce0:	607a      	str	r2, [r7, #4]
 8027ce2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8027ce4:	2301      	movs	r3, #1
 8027ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8027ce8:	2300      	movs	r3, #0
 8027cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8027cee:	68fb      	ldr	r3, [r7, #12]
 8027cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8027cf4:	2b01      	cmp	r3, #1
 8027cf6:	d101      	bne.n	8027cfc <HAL_SPI_TransmitReceive+0x26>
 8027cf8:	2302      	movs	r3, #2
 8027cfa:	e18a      	b.n	8028012 <HAL_SPI_TransmitReceive+0x33c>
 8027cfc:	68fb      	ldr	r3, [r7, #12]
 8027cfe:	2201      	movs	r2, #1
 8027d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8027d04:	f7fb f9f0 	bl	80230e8 <HAL_GetTick>
 8027d08:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8027d14:	68fb      	ldr	r3, [r7, #12]
 8027d16:	685b      	ldr	r3, [r3, #4]
 8027d18:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8027d1a:	887b      	ldrh	r3, [r7, #2]
 8027d1c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8027d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027d22:	2b01      	cmp	r3, #1
 8027d24:	d00f      	beq.n	8027d46 <HAL_SPI_TransmitReceive+0x70>
 8027d26:	69fb      	ldr	r3, [r7, #28]
 8027d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8027d2c:	d107      	bne.n	8027d3e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8027d2e:	68fb      	ldr	r3, [r7, #12]
 8027d30:	689b      	ldr	r3, [r3, #8]
 8027d32:	2b00      	cmp	r3, #0
 8027d34:	d103      	bne.n	8027d3e <HAL_SPI_TransmitReceive+0x68>
 8027d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8027d3a:	2b04      	cmp	r3, #4
 8027d3c:	d003      	beq.n	8027d46 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8027d3e:	2302      	movs	r3, #2
 8027d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027d44:	e15b      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8027d46:	68bb      	ldr	r3, [r7, #8]
 8027d48:	2b00      	cmp	r3, #0
 8027d4a:	d005      	beq.n	8027d58 <HAL_SPI_TransmitReceive+0x82>
 8027d4c:	687b      	ldr	r3, [r7, #4]
 8027d4e:	2b00      	cmp	r3, #0
 8027d50:	d002      	beq.n	8027d58 <HAL_SPI_TransmitReceive+0x82>
 8027d52:	887b      	ldrh	r3, [r7, #2]
 8027d54:	2b00      	cmp	r3, #0
 8027d56:	d103      	bne.n	8027d60 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8027d58:	2301      	movs	r3, #1
 8027d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8027d5e:	e14e      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8027d60:	68fb      	ldr	r3, [r7, #12]
 8027d62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8027d66:	b2db      	uxtb	r3, r3
 8027d68:	2b04      	cmp	r3, #4
 8027d6a:	d003      	beq.n	8027d74 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8027d6c:	68fb      	ldr	r3, [r7, #12]
 8027d6e:	2205      	movs	r2, #5
 8027d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8027d74:	68fb      	ldr	r3, [r7, #12]
 8027d76:	2200      	movs	r2, #0
 8027d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8027d7a:	68fb      	ldr	r3, [r7, #12]
 8027d7c:	687a      	ldr	r2, [r7, #4]
 8027d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8027d80:	68fb      	ldr	r3, [r7, #12]
 8027d82:	887a      	ldrh	r2, [r7, #2]
 8027d84:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8027d86:	68fb      	ldr	r3, [r7, #12]
 8027d88:	887a      	ldrh	r2, [r7, #2]
 8027d8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8027d8c:	68fb      	ldr	r3, [r7, #12]
 8027d8e:	68ba      	ldr	r2, [r7, #8]
 8027d90:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8027d92:	68fb      	ldr	r3, [r7, #12]
 8027d94:	887a      	ldrh	r2, [r7, #2]
 8027d96:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8027d98:	68fb      	ldr	r3, [r7, #12]
 8027d9a:	887a      	ldrh	r2, [r7, #2]
 8027d9c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8027d9e:	68fb      	ldr	r3, [r7, #12]
 8027da0:	2200      	movs	r2, #0
 8027da2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8027da4:	68fb      	ldr	r3, [r7, #12]
 8027da6:	2200      	movs	r2, #0
 8027da8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8027daa:	68fb      	ldr	r3, [r7, #12]
 8027dac:	681b      	ldr	r3, [r3, #0]
 8027dae:	681b      	ldr	r3, [r3, #0]
 8027db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027db4:	2b40      	cmp	r3, #64	; 0x40
 8027db6:	d007      	beq.n	8027dc8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8027db8:	68fb      	ldr	r3, [r7, #12]
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	681a      	ldr	r2, [r3, #0]
 8027dbe:	68fb      	ldr	r3, [r7, #12]
 8027dc0:	681b      	ldr	r3, [r3, #0]
 8027dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8027dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8027dc8:	68fb      	ldr	r3, [r7, #12]
 8027dca:	68db      	ldr	r3, [r3, #12]
 8027dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8027dd0:	d178      	bne.n	8027ec4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027dd2:	68fb      	ldr	r3, [r7, #12]
 8027dd4:	685b      	ldr	r3, [r3, #4]
 8027dd6:	2b00      	cmp	r3, #0
 8027dd8:	d002      	beq.n	8027de0 <HAL_SPI_TransmitReceive+0x10a>
 8027dda:	8b7b      	ldrh	r3, [r7, #26]
 8027ddc:	2b01      	cmp	r3, #1
 8027dde:	d166      	bne.n	8027eae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027de0:	68fb      	ldr	r3, [r7, #12]
 8027de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027de4:	881a      	ldrh	r2, [r3, #0]
 8027de6:	68fb      	ldr	r3, [r7, #12]
 8027de8:	681b      	ldr	r3, [r3, #0]
 8027dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8027dec:	68fb      	ldr	r3, [r7, #12]
 8027dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027df0:	1c9a      	adds	r2, r3, #2
 8027df2:	68fb      	ldr	r3, [r7, #12]
 8027df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027df6:	68fb      	ldr	r3, [r7, #12]
 8027df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027dfa:	b29b      	uxth	r3, r3
 8027dfc:	3b01      	subs	r3, #1
 8027dfe:	b29a      	uxth	r2, r3
 8027e00:	68fb      	ldr	r3, [r7, #12]
 8027e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027e04:	e053      	b.n	8027eae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027e06:	68fb      	ldr	r3, [r7, #12]
 8027e08:	681b      	ldr	r3, [r3, #0]
 8027e0a:	689b      	ldr	r3, [r3, #8]
 8027e0c:	f003 0302 	and.w	r3, r3, #2
 8027e10:	2b02      	cmp	r3, #2
 8027e12:	d11b      	bne.n	8027e4c <HAL_SPI_TransmitReceive+0x176>
 8027e14:	68fb      	ldr	r3, [r7, #12]
 8027e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027e18:	b29b      	uxth	r3, r3
 8027e1a:	2b00      	cmp	r3, #0
 8027e1c:	d016      	beq.n	8027e4c <HAL_SPI_TransmitReceive+0x176>
 8027e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e20:	2b01      	cmp	r3, #1
 8027e22:	d113      	bne.n	8027e4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8027e24:	68fb      	ldr	r3, [r7, #12]
 8027e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e28:	881a      	ldrh	r2, [r3, #0]
 8027e2a:	68fb      	ldr	r3, [r7, #12]
 8027e2c:	681b      	ldr	r3, [r3, #0]
 8027e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8027e30:	68fb      	ldr	r3, [r7, #12]
 8027e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027e34:	1c9a      	adds	r2, r3, #2
 8027e36:	68fb      	ldr	r3, [r7, #12]
 8027e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027e3a:	68fb      	ldr	r3, [r7, #12]
 8027e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027e3e:	b29b      	uxth	r3, r3
 8027e40:	3b01      	subs	r3, #1
 8027e42:	b29a      	uxth	r2, r3
 8027e44:	68fb      	ldr	r3, [r7, #12]
 8027e46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027e48:	2300      	movs	r3, #0
 8027e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027e4c:	68fb      	ldr	r3, [r7, #12]
 8027e4e:	681b      	ldr	r3, [r3, #0]
 8027e50:	689b      	ldr	r3, [r3, #8]
 8027e52:	f003 0301 	and.w	r3, r3, #1
 8027e56:	2b01      	cmp	r3, #1
 8027e58:	d119      	bne.n	8027e8e <HAL_SPI_TransmitReceive+0x1b8>
 8027e5a:	68fb      	ldr	r3, [r7, #12]
 8027e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027e5e:	b29b      	uxth	r3, r3
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d014      	beq.n	8027e8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8027e64:	68fb      	ldr	r3, [r7, #12]
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	68da      	ldr	r2, [r3, #12]
 8027e6a:	68fb      	ldr	r3, [r7, #12]
 8027e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027e6e:	b292      	uxth	r2, r2
 8027e70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8027e72:	68fb      	ldr	r3, [r7, #12]
 8027e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027e76:	1c9a      	adds	r2, r3, #2
 8027e78:	68fb      	ldr	r3, [r7, #12]
 8027e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027e7c:	68fb      	ldr	r3, [r7, #12]
 8027e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027e80:	b29b      	uxth	r3, r3
 8027e82:	3b01      	subs	r3, #1
 8027e84:	b29a      	uxth	r2, r3
 8027e86:	68fb      	ldr	r3, [r7, #12]
 8027e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027e8a:	2301      	movs	r3, #1
 8027e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8027e8e:	f7fb f92b 	bl	80230e8 <HAL_GetTick>
 8027e92:	4602      	mov	r2, r0
 8027e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e96:	1ad3      	subs	r3, r2, r3
 8027e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027e9a:	429a      	cmp	r2, r3
 8027e9c:	d807      	bhi.n	8027eae <HAL_SPI_TransmitReceive+0x1d8>
 8027e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027ea4:	d003      	beq.n	8027eae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8027ea6:	2303      	movs	r3, #3
 8027ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027eac:	e0a7      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027eae:	68fb      	ldr	r3, [r7, #12]
 8027eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027eb2:	b29b      	uxth	r3, r3
 8027eb4:	2b00      	cmp	r3, #0
 8027eb6:	d1a6      	bne.n	8027e06 <HAL_SPI_TransmitReceive+0x130>
 8027eb8:	68fb      	ldr	r3, [r7, #12]
 8027eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027ebc:	b29b      	uxth	r3, r3
 8027ebe:	2b00      	cmp	r3, #0
 8027ec0:	d1a1      	bne.n	8027e06 <HAL_SPI_TransmitReceive+0x130>
 8027ec2:	e07c      	b.n	8027fbe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8027ec4:	68fb      	ldr	r3, [r7, #12]
 8027ec6:	685b      	ldr	r3, [r3, #4]
 8027ec8:	2b00      	cmp	r3, #0
 8027eca:	d002      	beq.n	8027ed2 <HAL_SPI_TransmitReceive+0x1fc>
 8027ecc:	8b7b      	ldrh	r3, [r7, #26]
 8027ece:	2b01      	cmp	r3, #1
 8027ed0:	d16b      	bne.n	8027faa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8027ed2:	68fb      	ldr	r3, [r7, #12]
 8027ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027ed6:	68fb      	ldr	r3, [r7, #12]
 8027ed8:	681b      	ldr	r3, [r3, #0]
 8027eda:	330c      	adds	r3, #12
 8027edc:	7812      	ldrb	r2, [r2, #0]
 8027ede:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8027ee0:	68fb      	ldr	r3, [r7, #12]
 8027ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ee4:	1c5a      	adds	r2, r3, #1
 8027ee6:	68fb      	ldr	r3, [r7, #12]
 8027ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8027eea:	68fb      	ldr	r3, [r7, #12]
 8027eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027eee:	b29b      	uxth	r3, r3
 8027ef0:	3b01      	subs	r3, #1
 8027ef2:	b29a      	uxth	r2, r3
 8027ef4:	68fb      	ldr	r3, [r7, #12]
 8027ef6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027ef8:	e057      	b.n	8027faa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8027efa:	68fb      	ldr	r3, [r7, #12]
 8027efc:	681b      	ldr	r3, [r3, #0]
 8027efe:	689b      	ldr	r3, [r3, #8]
 8027f00:	f003 0302 	and.w	r3, r3, #2
 8027f04:	2b02      	cmp	r3, #2
 8027f06:	d11c      	bne.n	8027f42 <HAL_SPI_TransmitReceive+0x26c>
 8027f08:	68fb      	ldr	r3, [r7, #12]
 8027f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f0c:	b29b      	uxth	r3, r3
 8027f0e:	2b00      	cmp	r3, #0
 8027f10:	d017      	beq.n	8027f42 <HAL_SPI_TransmitReceive+0x26c>
 8027f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f14:	2b01      	cmp	r3, #1
 8027f16:	d114      	bne.n	8027f42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8027f18:	68fb      	ldr	r3, [r7, #12]
 8027f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8027f1c:	68fb      	ldr	r3, [r7, #12]
 8027f1e:	681b      	ldr	r3, [r3, #0]
 8027f20:	330c      	adds	r3, #12
 8027f22:	7812      	ldrb	r2, [r2, #0]
 8027f24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8027f26:	68fb      	ldr	r3, [r7, #12]
 8027f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f2a:	1c5a      	adds	r2, r3, #1
 8027f2c:	68fb      	ldr	r3, [r7, #12]
 8027f2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8027f30:	68fb      	ldr	r3, [r7, #12]
 8027f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027f34:	b29b      	uxth	r3, r3
 8027f36:	3b01      	subs	r3, #1
 8027f38:	b29a      	uxth	r2, r3
 8027f3a:	68fb      	ldr	r3, [r7, #12]
 8027f3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8027f3e:	2300      	movs	r3, #0
 8027f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8027f42:	68fb      	ldr	r3, [r7, #12]
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	689b      	ldr	r3, [r3, #8]
 8027f48:	f003 0301 	and.w	r3, r3, #1
 8027f4c:	2b01      	cmp	r3, #1
 8027f4e:	d119      	bne.n	8027f84 <HAL_SPI_TransmitReceive+0x2ae>
 8027f50:	68fb      	ldr	r3, [r7, #12]
 8027f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f54:	b29b      	uxth	r3, r3
 8027f56:	2b00      	cmp	r3, #0
 8027f58:	d014      	beq.n	8027f84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8027f5a:	68fb      	ldr	r3, [r7, #12]
 8027f5c:	681b      	ldr	r3, [r3, #0]
 8027f5e:	68da      	ldr	r2, [r3, #12]
 8027f60:	68fb      	ldr	r3, [r7, #12]
 8027f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f64:	b2d2      	uxtb	r2, r2
 8027f66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8027f68:	68fb      	ldr	r3, [r7, #12]
 8027f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027f6c:	1c5a      	adds	r2, r3, #1
 8027f6e:	68fb      	ldr	r3, [r7, #12]
 8027f70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8027f72:	68fb      	ldr	r3, [r7, #12]
 8027f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027f76:	b29b      	uxth	r3, r3
 8027f78:	3b01      	subs	r3, #1
 8027f7a:	b29a      	uxth	r2, r3
 8027f7c:	68fb      	ldr	r3, [r7, #12]
 8027f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8027f80:	2301      	movs	r3, #1
 8027f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8027f84:	f7fb f8b0 	bl	80230e8 <HAL_GetTick>
 8027f88:	4602      	mov	r2, r0
 8027f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f8c:	1ad3      	subs	r3, r2, r3
 8027f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8027f90:	429a      	cmp	r2, r3
 8027f92:	d803      	bhi.n	8027f9c <HAL_SPI_TransmitReceive+0x2c6>
 8027f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027f9a:	d102      	bne.n	8027fa2 <HAL_SPI_TransmitReceive+0x2cc>
 8027f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027f9e:	2b00      	cmp	r3, #0
 8027fa0:	d103      	bne.n	8027faa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8027fa2:	2303      	movs	r3, #3
 8027fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8027fa8:	e029      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8027faa:	68fb      	ldr	r3, [r7, #12]
 8027fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8027fae:	b29b      	uxth	r3, r3
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	d1a2      	bne.n	8027efa <HAL_SPI_TransmitReceive+0x224>
 8027fb4:	68fb      	ldr	r3, [r7, #12]
 8027fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8027fb8:	b29b      	uxth	r3, r3
 8027fba:	2b00      	cmp	r3, #0
 8027fbc:	d19d      	bne.n	8027efa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8027fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027fc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8027fc2:	68f8      	ldr	r0, [r7, #12]
 8027fc4:	f000 f926 	bl	8028214 <SPI_EndRxTxTransaction>
 8027fc8:	4603      	mov	r3, r0
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	d006      	beq.n	8027fdc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8027fce:	2301      	movs	r3, #1
 8027fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8027fd4:	68fb      	ldr	r3, [r7, #12]
 8027fd6:	2220      	movs	r2, #32
 8027fd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8027fda:	e010      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8027fdc:	68fb      	ldr	r3, [r7, #12]
 8027fde:	689b      	ldr	r3, [r3, #8]
 8027fe0:	2b00      	cmp	r3, #0
 8027fe2:	d10b      	bne.n	8027ffc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8027fe4:	2300      	movs	r3, #0
 8027fe6:	617b      	str	r3, [r7, #20]
 8027fe8:	68fb      	ldr	r3, [r7, #12]
 8027fea:	681b      	ldr	r3, [r3, #0]
 8027fec:	68db      	ldr	r3, [r3, #12]
 8027fee:	617b      	str	r3, [r7, #20]
 8027ff0:	68fb      	ldr	r3, [r7, #12]
 8027ff2:	681b      	ldr	r3, [r3, #0]
 8027ff4:	689b      	ldr	r3, [r3, #8]
 8027ff6:	617b      	str	r3, [r7, #20]
 8027ff8:	697b      	ldr	r3, [r7, #20]
 8027ffa:	e000      	b.n	8027ffe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8027ffc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8027ffe:	68fb      	ldr	r3, [r7, #12]
 8028000:	2201      	movs	r2, #1
 8028002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028006:	68fb      	ldr	r3, [r7, #12]
 8028008:	2200      	movs	r2, #0
 802800a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802800e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028012:	4618      	mov	r0, r3
 8028014:	3730      	adds	r7, #48	; 0x30
 8028016:	46bd      	mov	sp, r7
 8028018:	bd80      	pop	{r7, pc}

0802801a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 802801a:	b480      	push	{r7}
 802801c:	b083      	sub	sp, #12
 802801e:	af00      	add	r7, sp, #0
 8028020:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028022:	687b      	ldr	r3, [r7, #4]
 8028024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028028:	b2db      	uxtb	r3, r3
}
 802802a:	4618      	mov	r0, r3
 802802c:	370c      	adds	r7, #12
 802802e:	46bd      	mov	sp, r7
 8028030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028034:	4770      	bx	lr
	...

08028038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028038:	b580      	push	{r7, lr}
 802803a:	b088      	sub	sp, #32
 802803c:	af00      	add	r7, sp, #0
 802803e:	60f8      	str	r0, [r7, #12]
 8028040:	60b9      	str	r1, [r7, #8]
 8028042:	603b      	str	r3, [r7, #0]
 8028044:	4613      	mov	r3, r2
 8028046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028048:	f7fb f84e 	bl	80230e8 <HAL_GetTick>
 802804c:	4602      	mov	r2, r0
 802804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028050:	1a9b      	subs	r3, r3, r2
 8028052:	683a      	ldr	r2, [r7, #0]
 8028054:	4413      	add	r3, r2
 8028056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028058:	f7fb f846 	bl	80230e8 <HAL_GetTick>
 802805c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 802805e:	4b39      	ldr	r3, [pc, #228]	; (8028144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028060:	681b      	ldr	r3, [r3, #0]
 8028062:	015b      	lsls	r3, r3, #5
 8028064:	0d1b      	lsrs	r3, r3, #20
 8028066:	69fa      	ldr	r2, [r7, #28]
 8028068:	fb02 f303 	mul.w	r3, r2, r3
 802806c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802806e:	e054      	b.n	802811a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028070:	683b      	ldr	r3, [r7, #0]
 8028072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028076:	d050      	beq.n	802811a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028078:	f7fb f836 	bl	80230e8 <HAL_GetTick>
 802807c:	4602      	mov	r2, r0
 802807e:	69bb      	ldr	r3, [r7, #24]
 8028080:	1ad3      	subs	r3, r2, r3
 8028082:	69fa      	ldr	r2, [r7, #28]
 8028084:	429a      	cmp	r2, r3
 8028086:	d902      	bls.n	802808e <SPI_WaitFlagStateUntilTimeout+0x56>
 8028088:	69fb      	ldr	r3, [r7, #28]
 802808a:	2b00      	cmp	r3, #0
 802808c:	d13d      	bne.n	802810a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802808e:	68fb      	ldr	r3, [r7, #12]
 8028090:	681b      	ldr	r3, [r3, #0]
 8028092:	685a      	ldr	r2, [r3, #4]
 8028094:	68fb      	ldr	r3, [r7, #12]
 8028096:	681b      	ldr	r3, [r3, #0]
 8028098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802809c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802809e:	68fb      	ldr	r3, [r7, #12]
 80280a0:	685b      	ldr	r3, [r3, #4]
 80280a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80280a6:	d111      	bne.n	80280cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80280a8:	68fb      	ldr	r3, [r7, #12]
 80280aa:	689b      	ldr	r3, [r3, #8]
 80280ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80280b0:	d004      	beq.n	80280bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80280b2:	68fb      	ldr	r3, [r7, #12]
 80280b4:	689b      	ldr	r3, [r3, #8]
 80280b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80280ba:	d107      	bne.n	80280cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80280bc:	68fb      	ldr	r3, [r7, #12]
 80280be:	681b      	ldr	r3, [r3, #0]
 80280c0:	681a      	ldr	r2, [r3, #0]
 80280c2:	68fb      	ldr	r3, [r7, #12]
 80280c4:	681b      	ldr	r3, [r3, #0]
 80280c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80280ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80280cc:	68fb      	ldr	r3, [r7, #12]
 80280ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80280d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80280d4:	d10f      	bne.n	80280f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80280d6:	68fb      	ldr	r3, [r7, #12]
 80280d8:	681b      	ldr	r3, [r3, #0]
 80280da:	681a      	ldr	r2, [r3, #0]
 80280dc:	68fb      	ldr	r3, [r7, #12]
 80280de:	681b      	ldr	r3, [r3, #0]
 80280e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80280e4:	601a      	str	r2, [r3, #0]
 80280e6:	68fb      	ldr	r3, [r7, #12]
 80280e8:	681b      	ldr	r3, [r3, #0]
 80280ea:	681a      	ldr	r2, [r3, #0]
 80280ec:	68fb      	ldr	r3, [r7, #12]
 80280ee:	681b      	ldr	r3, [r3, #0]
 80280f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80280f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80280f6:	68fb      	ldr	r3, [r7, #12]
 80280f8:	2201      	movs	r2, #1
 80280fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80280fe:	68fb      	ldr	r3, [r7, #12]
 8028100:	2200      	movs	r2, #0
 8028102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028106:	2303      	movs	r3, #3
 8028108:	e017      	b.n	802813a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 802810a:	697b      	ldr	r3, [r7, #20]
 802810c:	2b00      	cmp	r3, #0
 802810e:	d101      	bne.n	8028114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028110:	2300      	movs	r3, #0
 8028112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028114:	697b      	ldr	r3, [r7, #20]
 8028116:	3b01      	subs	r3, #1
 8028118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802811a:	68fb      	ldr	r3, [r7, #12]
 802811c:	681b      	ldr	r3, [r3, #0]
 802811e:	689a      	ldr	r2, [r3, #8]
 8028120:	68bb      	ldr	r3, [r7, #8]
 8028122:	4013      	ands	r3, r2
 8028124:	68ba      	ldr	r2, [r7, #8]
 8028126:	429a      	cmp	r2, r3
 8028128:	bf0c      	ite	eq
 802812a:	2301      	moveq	r3, #1
 802812c:	2300      	movne	r3, #0
 802812e:	b2db      	uxtb	r3, r3
 8028130:	461a      	mov	r2, r3
 8028132:	79fb      	ldrb	r3, [r7, #7]
 8028134:	429a      	cmp	r2, r3
 8028136:	d19b      	bne.n	8028070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028138:	2300      	movs	r3, #0
}
 802813a:	4618      	mov	r0, r3
 802813c:	3720      	adds	r7, #32
 802813e:	46bd      	mov	sp, r7
 8028140:	bd80      	pop	{r7, pc}
 8028142:	bf00      	nop
 8028144:	20000000 	.word	0x20000000

08028148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028148:	b580      	push	{r7, lr}
 802814a:	b086      	sub	sp, #24
 802814c:	af02      	add	r7, sp, #8
 802814e:	60f8      	str	r0, [r7, #12]
 8028150:	60b9      	str	r1, [r7, #8]
 8028152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028154:	68fb      	ldr	r3, [r7, #12]
 8028156:	685b      	ldr	r3, [r3, #4]
 8028158:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802815c:	d111      	bne.n	8028182 <SPI_EndRxTransaction+0x3a>
 802815e:	68fb      	ldr	r3, [r7, #12]
 8028160:	689b      	ldr	r3, [r3, #8]
 8028162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028166:	d004      	beq.n	8028172 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028168:	68fb      	ldr	r3, [r7, #12]
 802816a:	689b      	ldr	r3, [r3, #8]
 802816c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028170:	d107      	bne.n	8028182 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028172:	68fb      	ldr	r3, [r7, #12]
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	681a      	ldr	r2, [r3, #0]
 8028178:	68fb      	ldr	r3, [r7, #12]
 802817a:	681b      	ldr	r3, [r3, #0]
 802817c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028180:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028182:	68fb      	ldr	r3, [r7, #12]
 8028184:	685b      	ldr	r3, [r3, #4]
 8028186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802818a:	d12a      	bne.n	80281e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802818c:	68fb      	ldr	r3, [r7, #12]
 802818e:	689b      	ldr	r3, [r3, #8]
 8028190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028194:	d012      	beq.n	80281bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028196:	687b      	ldr	r3, [r7, #4]
 8028198:	9300      	str	r3, [sp, #0]
 802819a:	68bb      	ldr	r3, [r7, #8]
 802819c:	2200      	movs	r2, #0
 802819e:	2180      	movs	r1, #128	; 0x80
 80281a0:	68f8      	ldr	r0, [r7, #12]
 80281a2:	f7ff ff49 	bl	8028038 <SPI_WaitFlagStateUntilTimeout>
 80281a6:	4603      	mov	r3, r0
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d02d      	beq.n	8028208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80281ac:	68fb      	ldr	r3, [r7, #12]
 80281ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80281b0:	f043 0220 	orr.w	r2, r3, #32
 80281b4:	68fb      	ldr	r3, [r7, #12]
 80281b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80281b8:	2303      	movs	r3, #3
 80281ba:	e026      	b.n	802820a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80281bc:	687b      	ldr	r3, [r7, #4]
 80281be:	9300      	str	r3, [sp, #0]
 80281c0:	68bb      	ldr	r3, [r7, #8]
 80281c2:	2200      	movs	r2, #0
 80281c4:	2101      	movs	r1, #1
 80281c6:	68f8      	ldr	r0, [r7, #12]
 80281c8:	f7ff ff36 	bl	8028038 <SPI_WaitFlagStateUntilTimeout>
 80281cc:	4603      	mov	r3, r0
 80281ce:	2b00      	cmp	r3, #0
 80281d0:	d01a      	beq.n	8028208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80281d2:	68fb      	ldr	r3, [r7, #12]
 80281d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80281d6:	f043 0220 	orr.w	r2, r3, #32
 80281da:	68fb      	ldr	r3, [r7, #12]
 80281dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80281de:	2303      	movs	r3, #3
 80281e0:	e013      	b.n	802820a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80281e2:	687b      	ldr	r3, [r7, #4]
 80281e4:	9300      	str	r3, [sp, #0]
 80281e6:	68bb      	ldr	r3, [r7, #8]
 80281e8:	2200      	movs	r2, #0
 80281ea:	2101      	movs	r1, #1
 80281ec:	68f8      	ldr	r0, [r7, #12]
 80281ee:	f7ff ff23 	bl	8028038 <SPI_WaitFlagStateUntilTimeout>
 80281f2:	4603      	mov	r3, r0
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	d007      	beq.n	8028208 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80281f8:	68fb      	ldr	r3, [r7, #12]
 80281fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80281fc:	f043 0220 	orr.w	r2, r3, #32
 8028200:	68fb      	ldr	r3, [r7, #12]
 8028202:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028204:	2303      	movs	r3, #3
 8028206:	e000      	b.n	802820a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028208:	2300      	movs	r3, #0
}
 802820a:	4618      	mov	r0, r3
 802820c:	3710      	adds	r7, #16
 802820e:	46bd      	mov	sp, r7
 8028210:	bd80      	pop	{r7, pc}
	...

08028214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028214:	b580      	push	{r7, lr}
 8028216:	b088      	sub	sp, #32
 8028218:	af02      	add	r7, sp, #8
 802821a:	60f8      	str	r0, [r7, #12]
 802821c:	60b9      	str	r1, [r7, #8]
 802821e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028220:	4b1b      	ldr	r3, [pc, #108]	; (8028290 <SPI_EndRxTxTransaction+0x7c>)
 8028222:	681b      	ldr	r3, [r3, #0]
 8028224:	4a1b      	ldr	r2, [pc, #108]	; (8028294 <SPI_EndRxTxTransaction+0x80>)
 8028226:	fba2 2303 	umull	r2, r3, r2, r3
 802822a:	0d5b      	lsrs	r3, r3, #21
 802822c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028230:	fb02 f303 	mul.w	r3, r2, r3
 8028234:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028236:	68fb      	ldr	r3, [r7, #12]
 8028238:	685b      	ldr	r3, [r3, #4]
 802823a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802823e:	d112      	bne.n	8028266 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	9300      	str	r3, [sp, #0]
 8028244:	68bb      	ldr	r3, [r7, #8]
 8028246:	2200      	movs	r2, #0
 8028248:	2180      	movs	r1, #128	; 0x80
 802824a:	68f8      	ldr	r0, [r7, #12]
 802824c:	f7ff fef4 	bl	8028038 <SPI_WaitFlagStateUntilTimeout>
 8028250:	4603      	mov	r3, r0
 8028252:	2b00      	cmp	r3, #0
 8028254:	d016      	beq.n	8028284 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028256:	68fb      	ldr	r3, [r7, #12]
 8028258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802825a:	f043 0220 	orr.w	r2, r3, #32
 802825e:	68fb      	ldr	r3, [r7, #12]
 8028260:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028262:	2303      	movs	r3, #3
 8028264:	e00f      	b.n	8028286 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028266:	697b      	ldr	r3, [r7, #20]
 8028268:	2b00      	cmp	r3, #0
 802826a:	d00a      	beq.n	8028282 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802826c:	697b      	ldr	r3, [r7, #20]
 802826e:	3b01      	subs	r3, #1
 8028270:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028272:	68fb      	ldr	r3, [r7, #12]
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	689b      	ldr	r3, [r3, #8]
 8028278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802827c:	2b80      	cmp	r3, #128	; 0x80
 802827e:	d0f2      	beq.n	8028266 <SPI_EndRxTxTransaction+0x52>
 8028280:	e000      	b.n	8028284 <SPI_EndRxTxTransaction+0x70>
        break;
 8028282:	bf00      	nop
  }

  return HAL_OK;
 8028284:	2300      	movs	r3, #0
}
 8028286:	4618      	mov	r0, r3
 8028288:	3718      	adds	r7, #24
 802828a:	46bd      	mov	sp, r7
 802828c:	bd80      	pop	{r7, pc}
 802828e:	bf00      	nop
 8028290:	20000000 	.word	0x20000000
 8028294:	165e9f81 	.word	0x165e9f81

08028298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028298:	b580      	push	{r7, lr}
 802829a:	b082      	sub	sp, #8
 802829c:	af00      	add	r7, sp, #0
 802829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80282a0:	687b      	ldr	r3, [r7, #4]
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d101      	bne.n	80282aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80282a6:	2301      	movs	r3, #1
 80282a8:	e041      	b.n	802832e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80282aa:	687b      	ldr	r3, [r7, #4]
 80282ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80282b0:	b2db      	uxtb	r3, r3
 80282b2:	2b00      	cmp	r3, #0
 80282b4:	d106      	bne.n	80282c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80282b6:	687b      	ldr	r3, [r7, #4]
 80282b8:	2200      	movs	r2, #0
 80282ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80282be:	6878      	ldr	r0, [r7, #4]
 80282c0:	f7f9 f9c8 	bl	8021654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	2202      	movs	r2, #2
 80282c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80282cc:	687b      	ldr	r3, [r7, #4]
 80282ce:	681a      	ldr	r2, [r3, #0]
 80282d0:	687b      	ldr	r3, [r7, #4]
 80282d2:	3304      	adds	r3, #4
 80282d4:	4619      	mov	r1, r3
 80282d6:	4610      	mov	r0, r2
 80282d8:	f000 fa96 	bl	8028808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	2201      	movs	r2, #1
 80282e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	2201      	movs	r2, #1
 80282e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80282ec:	687b      	ldr	r3, [r7, #4]
 80282ee:	2201      	movs	r2, #1
 80282f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	2201      	movs	r2, #1
 80282f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80282fc:	687b      	ldr	r3, [r7, #4]
 80282fe:	2201      	movs	r2, #1
 8028300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028304:	687b      	ldr	r3, [r7, #4]
 8028306:	2201      	movs	r2, #1
 8028308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	2201      	movs	r2, #1
 8028310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028314:	687b      	ldr	r3, [r7, #4]
 8028316:	2201      	movs	r2, #1
 8028318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802831c:	687b      	ldr	r3, [r7, #4]
 802831e:	2201      	movs	r2, #1
 8028320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028324:	687b      	ldr	r3, [r7, #4]
 8028326:	2201      	movs	r2, #1
 8028328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802832c:	2300      	movs	r3, #0
}
 802832e:	4618      	mov	r0, r3
 8028330:	3708      	adds	r7, #8
 8028332:	46bd      	mov	sp, r7
 8028334:	bd80      	pop	{r7, pc}
	...

08028338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028338:	b480      	push	{r7}
 802833a:	b085      	sub	sp, #20
 802833c:	af00      	add	r7, sp, #0
 802833e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028346:	b2db      	uxtb	r3, r3
 8028348:	2b01      	cmp	r3, #1
 802834a:	d001      	beq.n	8028350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802834c:	2301      	movs	r3, #1
 802834e:	e04e      	b.n	80283ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	2202      	movs	r2, #2
 8028354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028358:	687b      	ldr	r3, [r7, #4]
 802835a:	681b      	ldr	r3, [r3, #0]
 802835c:	68da      	ldr	r2, [r3, #12]
 802835e:	687b      	ldr	r3, [r7, #4]
 8028360:	681b      	ldr	r3, [r3, #0]
 8028362:	f042 0201 	orr.w	r2, r2, #1
 8028366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028368:	687b      	ldr	r3, [r7, #4]
 802836a:	681b      	ldr	r3, [r3, #0]
 802836c:	4a23      	ldr	r2, [pc, #140]	; (80283fc <HAL_TIM_Base_Start_IT+0xc4>)
 802836e:	4293      	cmp	r3, r2
 8028370:	d022      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 8028372:	687b      	ldr	r3, [r7, #4]
 8028374:	681b      	ldr	r3, [r3, #0]
 8028376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802837a:	d01d      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 802837c:	687b      	ldr	r3, [r7, #4]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	4a1f      	ldr	r2, [pc, #124]	; (8028400 <HAL_TIM_Base_Start_IT+0xc8>)
 8028382:	4293      	cmp	r3, r2
 8028384:	d018      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 8028386:	687b      	ldr	r3, [r7, #4]
 8028388:	681b      	ldr	r3, [r3, #0]
 802838a:	4a1e      	ldr	r2, [pc, #120]	; (8028404 <HAL_TIM_Base_Start_IT+0xcc>)
 802838c:	4293      	cmp	r3, r2
 802838e:	d013      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	681b      	ldr	r3, [r3, #0]
 8028394:	4a1c      	ldr	r2, [pc, #112]	; (8028408 <HAL_TIM_Base_Start_IT+0xd0>)
 8028396:	4293      	cmp	r3, r2
 8028398:	d00e      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 802839a:	687b      	ldr	r3, [r7, #4]
 802839c:	681b      	ldr	r3, [r3, #0]
 802839e:	4a1b      	ldr	r2, [pc, #108]	; (802840c <HAL_TIM_Base_Start_IT+0xd4>)
 80283a0:	4293      	cmp	r3, r2
 80283a2:	d009      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	681b      	ldr	r3, [r3, #0]
 80283a8:	4a19      	ldr	r2, [pc, #100]	; (8028410 <HAL_TIM_Base_Start_IT+0xd8>)
 80283aa:	4293      	cmp	r3, r2
 80283ac:	d004      	beq.n	80283b8 <HAL_TIM_Base_Start_IT+0x80>
 80283ae:	687b      	ldr	r3, [r7, #4]
 80283b0:	681b      	ldr	r3, [r3, #0]
 80283b2:	4a18      	ldr	r2, [pc, #96]	; (8028414 <HAL_TIM_Base_Start_IT+0xdc>)
 80283b4:	4293      	cmp	r3, r2
 80283b6:	d111      	bne.n	80283dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	681b      	ldr	r3, [r3, #0]
 80283bc:	689b      	ldr	r3, [r3, #8]
 80283be:	f003 0307 	and.w	r3, r3, #7
 80283c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	2b06      	cmp	r3, #6
 80283c8:	d010      	beq.n	80283ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80283ca:	687b      	ldr	r3, [r7, #4]
 80283cc:	681b      	ldr	r3, [r3, #0]
 80283ce:	681a      	ldr	r2, [r3, #0]
 80283d0:	687b      	ldr	r3, [r7, #4]
 80283d2:	681b      	ldr	r3, [r3, #0]
 80283d4:	f042 0201 	orr.w	r2, r2, #1
 80283d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80283da:	e007      	b.n	80283ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80283dc:	687b      	ldr	r3, [r7, #4]
 80283de:	681b      	ldr	r3, [r3, #0]
 80283e0:	681a      	ldr	r2, [r3, #0]
 80283e2:	687b      	ldr	r3, [r7, #4]
 80283e4:	681b      	ldr	r3, [r3, #0]
 80283e6:	f042 0201 	orr.w	r2, r2, #1
 80283ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80283ec:	2300      	movs	r3, #0
}
 80283ee:	4618      	mov	r0, r3
 80283f0:	3714      	adds	r7, #20
 80283f2:	46bd      	mov	sp, r7
 80283f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80283f8:	4770      	bx	lr
 80283fa:	bf00      	nop
 80283fc:	40010000 	.word	0x40010000
 8028400:	40000400 	.word	0x40000400
 8028404:	40000800 	.word	0x40000800
 8028408:	40000c00 	.word	0x40000c00
 802840c:	40010400 	.word	0x40010400
 8028410:	40014000 	.word	0x40014000
 8028414:	40001800 	.word	0x40001800

08028418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028418:	b580      	push	{r7, lr}
 802841a:	b082      	sub	sp, #8
 802841c:	af00      	add	r7, sp, #0
 802841e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028420:	687b      	ldr	r3, [r7, #4]
 8028422:	681b      	ldr	r3, [r3, #0]
 8028424:	691b      	ldr	r3, [r3, #16]
 8028426:	f003 0302 	and.w	r3, r3, #2
 802842a:	2b02      	cmp	r3, #2
 802842c:	d122      	bne.n	8028474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802842e:	687b      	ldr	r3, [r7, #4]
 8028430:	681b      	ldr	r3, [r3, #0]
 8028432:	68db      	ldr	r3, [r3, #12]
 8028434:	f003 0302 	and.w	r3, r3, #2
 8028438:	2b02      	cmp	r3, #2
 802843a:	d11b      	bne.n	8028474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802843c:	687b      	ldr	r3, [r7, #4]
 802843e:	681b      	ldr	r3, [r3, #0]
 8028440:	f06f 0202 	mvn.w	r2, #2
 8028444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028446:	687b      	ldr	r3, [r7, #4]
 8028448:	2201      	movs	r2, #1
 802844a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802844c:	687b      	ldr	r3, [r7, #4]
 802844e:	681b      	ldr	r3, [r3, #0]
 8028450:	699b      	ldr	r3, [r3, #24]
 8028452:	f003 0303 	and.w	r3, r3, #3
 8028456:	2b00      	cmp	r3, #0
 8028458:	d003      	beq.n	8028462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802845a:	6878      	ldr	r0, [r7, #4]
 802845c:	f000 f9b5 	bl	80287ca <HAL_TIM_IC_CaptureCallback>
 8028460:	e005      	b.n	802846e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028462:	6878      	ldr	r0, [r7, #4]
 8028464:	f000 f9a7 	bl	80287b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028468:	6878      	ldr	r0, [r7, #4]
 802846a:	f000 f9b8 	bl	80287de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802846e:	687b      	ldr	r3, [r7, #4]
 8028470:	2200      	movs	r2, #0
 8028472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028474:	687b      	ldr	r3, [r7, #4]
 8028476:	681b      	ldr	r3, [r3, #0]
 8028478:	691b      	ldr	r3, [r3, #16]
 802847a:	f003 0304 	and.w	r3, r3, #4
 802847e:	2b04      	cmp	r3, #4
 8028480:	d122      	bne.n	80284c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	681b      	ldr	r3, [r3, #0]
 8028486:	68db      	ldr	r3, [r3, #12]
 8028488:	f003 0304 	and.w	r3, r3, #4
 802848c:	2b04      	cmp	r3, #4
 802848e:	d11b      	bne.n	80284c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028490:	687b      	ldr	r3, [r7, #4]
 8028492:	681b      	ldr	r3, [r3, #0]
 8028494:	f06f 0204 	mvn.w	r2, #4
 8028498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802849a:	687b      	ldr	r3, [r7, #4]
 802849c:	2202      	movs	r2, #2
 802849e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80284a0:	687b      	ldr	r3, [r7, #4]
 80284a2:	681b      	ldr	r3, [r3, #0]
 80284a4:	699b      	ldr	r3, [r3, #24]
 80284a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80284aa:	2b00      	cmp	r3, #0
 80284ac:	d003      	beq.n	80284b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80284ae:	6878      	ldr	r0, [r7, #4]
 80284b0:	f000 f98b 	bl	80287ca <HAL_TIM_IC_CaptureCallback>
 80284b4:	e005      	b.n	80284c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80284b6:	6878      	ldr	r0, [r7, #4]
 80284b8:	f000 f97d 	bl	80287b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80284bc:	6878      	ldr	r0, [r7, #4]
 80284be:	f000 f98e 	bl	80287de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80284c2:	687b      	ldr	r3, [r7, #4]
 80284c4:	2200      	movs	r2, #0
 80284c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80284c8:	687b      	ldr	r3, [r7, #4]
 80284ca:	681b      	ldr	r3, [r3, #0]
 80284cc:	691b      	ldr	r3, [r3, #16]
 80284ce:	f003 0308 	and.w	r3, r3, #8
 80284d2:	2b08      	cmp	r3, #8
 80284d4:	d122      	bne.n	802851c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80284d6:	687b      	ldr	r3, [r7, #4]
 80284d8:	681b      	ldr	r3, [r3, #0]
 80284da:	68db      	ldr	r3, [r3, #12]
 80284dc:	f003 0308 	and.w	r3, r3, #8
 80284e0:	2b08      	cmp	r3, #8
 80284e2:	d11b      	bne.n	802851c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80284e4:	687b      	ldr	r3, [r7, #4]
 80284e6:	681b      	ldr	r3, [r3, #0]
 80284e8:	f06f 0208 	mvn.w	r2, #8
 80284ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80284ee:	687b      	ldr	r3, [r7, #4]
 80284f0:	2204      	movs	r2, #4
 80284f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80284f4:	687b      	ldr	r3, [r7, #4]
 80284f6:	681b      	ldr	r3, [r3, #0]
 80284f8:	69db      	ldr	r3, [r3, #28]
 80284fa:	f003 0303 	and.w	r3, r3, #3
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d003      	beq.n	802850a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028502:	6878      	ldr	r0, [r7, #4]
 8028504:	f000 f961 	bl	80287ca <HAL_TIM_IC_CaptureCallback>
 8028508:	e005      	b.n	8028516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802850a:	6878      	ldr	r0, [r7, #4]
 802850c:	f000 f953 	bl	80287b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028510:	6878      	ldr	r0, [r7, #4]
 8028512:	f000 f964 	bl	80287de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028516:	687b      	ldr	r3, [r7, #4]
 8028518:	2200      	movs	r2, #0
 802851a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802851c:	687b      	ldr	r3, [r7, #4]
 802851e:	681b      	ldr	r3, [r3, #0]
 8028520:	691b      	ldr	r3, [r3, #16]
 8028522:	f003 0310 	and.w	r3, r3, #16
 8028526:	2b10      	cmp	r3, #16
 8028528:	d122      	bne.n	8028570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	681b      	ldr	r3, [r3, #0]
 802852e:	68db      	ldr	r3, [r3, #12]
 8028530:	f003 0310 	and.w	r3, r3, #16
 8028534:	2b10      	cmp	r3, #16
 8028536:	d11b      	bne.n	8028570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028538:	687b      	ldr	r3, [r7, #4]
 802853a:	681b      	ldr	r3, [r3, #0]
 802853c:	f06f 0210 	mvn.w	r2, #16
 8028540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028542:	687b      	ldr	r3, [r7, #4]
 8028544:	2208      	movs	r2, #8
 8028546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028548:	687b      	ldr	r3, [r7, #4]
 802854a:	681b      	ldr	r3, [r3, #0]
 802854c:	69db      	ldr	r3, [r3, #28]
 802854e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028552:	2b00      	cmp	r3, #0
 8028554:	d003      	beq.n	802855e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028556:	6878      	ldr	r0, [r7, #4]
 8028558:	f000 f937 	bl	80287ca <HAL_TIM_IC_CaptureCallback>
 802855c:	e005      	b.n	802856a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802855e:	6878      	ldr	r0, [r7, #4]
 8028560:	f000 f929 	bl	80287b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028564:	6878      	ldr	r0, [r7, #4]
 8028566:	f000 f93a 	bl	80287de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802856a:	687b      	ldr	r3, [r7, #4]
 802856c:	2200      	movs	r2, #0
 802856e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028570:	687b      	ldr	r3, [r7, #4]
 8028572:	681b      	ldr	r3, [r3, #0]
 8028574:	691b      	ldr	r3, [r3, #16]
 8028576:	f003 0301 	and.w	r3, r3, #1
 802857a:	2b01      	cmp	r3, #1
 802857c:	d10e      	bne.n	802859c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802857e:	687b      	ldr	r3, [r7, #4]
 8028580:	681b      	ldr	r3, [r3, #0]
 8028582:	68db      	ldr	r3, [r3, #12]
 8028584:	f003 0301 	and.w	r3, r3, #1
 8028588:	2b01      	cmp	r3, #1
 802858a:	d107      	bne.n	802859c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802858c:	687b      	ldr	r3, [r7, #4]
 802858e:	681b      	ldr	r3, [r3, #0]
 8028590:	f06f 0201 	mvn.w	r2, #1
 8028594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8028596:	6878      	ldr	r0, [r7, #4]
 8028598:	f7f8 fc60 	bl	8020e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802859c:	687b      	ldr	r3, [r7, #4]
 802859e:	681b      	ldr	r3, [r3, #0]
 80285a0:	691b      	ldr	r3, [r3, #16]
 80285a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80285a6:	2b80      	cmp	r3, #128	; 0x80
 80285a8:	d10e      	bne.n	80285c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80285aa:	687b      	ldr	r3, [r7, #4]
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	68db      	ldr	r3, [r3, #12]
 80285b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80285b4:	2b80      	cmp	r3, #128	; 0x80
 80285b6:	d107      	bne.n	80285c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80285b8:	687b      	ldr	r3, [r7, #4]
 80285ba:	681b      	ldr	r3, [r3, #0]
 80285bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80285c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80285c2:	6878      	ldr	r0, [r7, #4]
 80285c4:	f000 fae0 	bl	8028b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	681b      	ldr	r3, [r3, #0]
 80285cc:	691b      	ldr	r3, [r3, #16]
 80285ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80285d2:	2b40      	cmp	r3, #64	; 0x40
 80285d4:	d10e      	bne.n	80285f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80285d6:	687b      	ldr	r3, [r7, #4]
 80285d8:	681b      	ldr	r3, [r3, #0]
 80285da:	68db      	ldr	r3, [r3, #12]
 80285dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80285e0:	2b40      	cmp	r3, #64	; 0x40
 80285e2:	d107      	bne.n	80285f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80285e4:	687b      	ldr	r3, [r7, #4]
 80285e6:	681b      	ldr	r3, [r3, #0]
 80285e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80285ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80285ee:	6878      	ldr	r0, [r7, #4]
 80285f0:	f000 f8ff 	bl	80287f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80285f4:	687b      	ldr	r3, [r7, #4]
 80285f6:	681b      	ldr	r3, [r3, #0]
 80285f8:	691b      	ldr	r3, [r3, #16]
 80285fa:	f003 0320 	and.w	r3, r3, #32
 80285fe:	2b20      	cmp	r3, #32
 8028600:	d10e      	bne.n	8028620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8028602:	687b      	ldr	r3, [r7, #4]
 8028604:	681b      	ldr	r3, [r3, #0]
 8028606:	68db      	ldr	r3, [r3, #12]
 8028608:	f003 0320 	and.w	r3, r3, #32
 802860c:	2b20      	cmp	r3, #32
 802860e:	d107      	bne.n	8028620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8028610:	687b      	ldr	r3, [r7, #4]
 8028612:	681b      	ldr	r3, [r3, #0]
 8028614:	f06f 0220 	mvn.w	r2, #32
 8028618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802861a:	6878      	ldr	r0, [r7, #4]
 802861c:	f000 faaa 	bl	8028b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8028620:	bf00      	nop
 8028622:	3708      	adds	r7, #8
 8028624:	46bd      	mov	sp, r7
 8028626:	bd80      	pop	{r7, pc}

08028628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8028628:	b580      	push	{r7, lr}
 802862a:	b084      	sub	sp, #16
 802862c:	af00      	add	r7, sp, #0
 802862e:	6078      	str	r0, [r7, #4]
 8028630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8028632:	2300      	movs	r3, #0
 8028634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8028636:	687b      	ldr	r3, [r7, #4]
 8028638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802863c:	2b01      	cmp	r3, #1
 802863e:	d101      	bne.n	8028644 <HAL_TIM_ConfigClockSource+0x1c>
 8028640:	2302      	movs	r3, #2
 8028642:	e0b4      	b.n	80287ae <HAL_TIM_ConfigClockSource+0x186>
 8028644:	687b      	ldr	r3, [r7, #4]
 8028646:	2201      	movs	r2, #1
 8028648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802864c:	687b      	ldr	r3, [r7, #4]
 802864e:	2202      	movs	r2, #2
 8028650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8028654:	687b      	ldr	r3, [r7, #4]
 8028656:	681b      	ldr	r3, [r3, #0]
 8028658:	689b      	ldr	r3, [r3, #8]
 802865a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802865c:	68bb      	ldr	r3, [r7, #8]
 802865e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8028662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028664:	68bb      	ldr	r3, [r7, #8]
 8028666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802866a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802866c:	687b      	ldr	r3, [r7, #4]
 802866e:	681b      	ldr	r3, [r3, #0]
 8028670:	68ba      	ldr	r2, [r7, #8]
 8028672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8028674:	683b      	ldr	r3, [r7, #0]
 8028676:	681b      	ldr	r3, [r3, #0]
 8028678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802867c:	d03e      	beq.n	80286fc <HAL_TIM_ConfigClockSource+0xd4>
 802867e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028682:	f200 8087 	bhi.w	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 8028686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802868a:	f000 8086 	beq.w	802879a <HAL_TIM_ConfigClockSource+0x172>
 802868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028692:	d87f      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 8028694:	2b70      	cmp	r3, #112	; 0x70
 8028696:	d01a      	beq.n	80286ce <HAL_TIM_ConfigClockSource+0xa6>
 8028698:	2b70      	cmp	r3, #112	; 0x70
 802869a:	d87b      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 802869c:	2b60      	cmp	r3, #96	; 0x60
 802869e:	d050      	beq.n	8028742 <HAL_TIM_ConfigClockSource+0x11a>
 80286a0:	2b60      	cmp	r3, #96	; 0x60
 80286a2:	d877      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 80286a4:	2b50      	cmp	r3, #80	; 0x50
 80286a6:	d03c      	beq.n	8028722 <HAL_TIM_ConfigClockSource+0xfa>
 80286a8:	2b50      	cmp	r3, #80	; 0x50
 80286aa:	d873      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 80286ac:	2b40      	cmp	r3, #64	; 0x40
 80286ae:	d058      	beq.n	8028762 <HAL_TIM_ConfigClockSource+0x13a>
 80286b0:	2b40      	cmp	r3, #64	; 0x40
 80286b2:	d86f      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 80286b4:	2b30      	cmp	r3, #48	; 0x30
 80286b6:	d064      	beq.n	8028782 <HAL_TIM_ConfigClockSource+0x15a>
 80286b8:	2b30      	cmp	r3, #48	; 0x30
 80286ba:	d86b      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 80286bc:	2b20      	cmp	r3, #32
 80286be:	d060      	beq.n	8028782 <HAL_TIM_ConfigClockSource+0x15a>
 80286c0:	2b20      	cmp	r3, #32
 80286c2:	d867      	bhi.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
 80286c4:	2b00      	cmp	r3, #0
 80286c6:	d05c      	beq.n	8028782 <HAL_TIM_ConfigClockSource+0x15a>
 80286c8:	2b10      	cmp	r3, #16
 80286ca:	d05a      	beq.n	8028782 <HAL_TIM_ConfigClockSource+0x15a>
 80286cc:	e062      	b.n	8028794 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80286ce:	687b      	ldr	r3, [r7, #4]
 80286d0:	6818      	ldr	r0, [r3, #0]
 80286d2:	683b      	ldr	r3, [r7, #0]
 80286d4:	6899      	ldr	r1, [r3, #8]
 80286d6:	683b      	ldr	r3, [r7, #0]
 80286d8:	685a      	ldr	r2, [r3, #4]
 80286da:	683b      	ldr	r3, [r7, #0]
 80286dc:	68db      	ldr	r3, [r3, #12]
 80286de:	f000 f9ad 	bl	8028a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80286e2:	687b      	ldr	r3, [r7, #4]
 80286e4:	681b      	ldr	r3, [r3, #0]
 80286e6:	689b      	ldr	r3, [r3, #8]
 80286e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80286ea:	68bb      	ldr	r3, [r7, #8]
 80286ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80286f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80286f2:	687b      	ldr	r3, [r7, #4]
 80286f4:	681b      	ldr	r3, [r3, #0]
 80286f6:	68ba      	ldr	r2, [r7, #8]
 80286f8:	609a      	str	r2, [r3, #8]
      break;
 80286fa:	e04f      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80286fc:	687b      	ldr	r3, [r7, #4]
 80286fe:	6818      	ldr	r0, [r3, #0]
 8028700:	683b      	ldr	r3, [r7, #0]
 8028702:	6899      	ldr	r1, [r3, #8]
 8028704:	683b      	ldr	r3, [r7, #0]
 8028706:	685a      	ldr	r2, [r3, #4]
 8028708:	683b      	ldr	r3, [r7, #0]
 802870a:	68db      	ldr	r3, [r3, #12]
 802870c:	f000 f996 	bl	8028a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8028710:	687b      	ldr	r3, [r7, #4]
 8028712:	681b      	ldr	r3, [r3, #0]
 8028714:	689a      	ldr	r2, [r3, #8]
 8028716:	687b      	ldr	r3, [r7, #4]
 8028718:	681b      	ldr	r3, [r3, #0]
 802871a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802871e:	609a      	str	r2, [r3, #8]
      break;
 8028720:	e03c      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	6818      	ldr	r0, [r3, #0]
 8028726:	683b      	ldr	r3, [r7, #0]
 8028728:	6859      	ldr	r1, [r3, #4]
 802872a:	683b      	ldr	r3, [r7, #0]
 802872c:	68db      	ldr	r3, [r3, #12]
 802872e:	461a      	mov	r2, r3
 8028730:	f000 f90a 	bl	8028948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8028734:	687b      	ldr	r3, [r7, #4]
 8028736:	681b      	ldr	r3, [r3, #0]
 8028738:	2150      	movs	r1, #80	; 0x50
 802873a:	4618      	mov	r0, r3
 802873c:	f000 f963 	bl	8028a06 <TIM_ITRx_SetConfig>
      break;
 8028740:	e02c      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8028742:	687b      	ldr	r3, [r7, #4]
 8028744:	6818      	ldr	r0, [r3, #0]
 8028746:	683b      	ldr	r3, [r7, #0]
 8028748:	6859      	ldr	r1, [r3, #4]
 802874a:	683b      	ldr	r3, [r7, #0]
 802874c:	68db      	ldr	r3, [r3, #12]
 802874e:	461a      	mov	r2, r3
 8028750:	f000 f929 	bl	80289a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	681b      	ldr	r3, [r3, #0]
 8028758:	2160      	movs	r1, #96	; 0x60
 802875a:	4618      	mov	r0, r3
 802875c:	f000 f953 	bl	8028a06 <TIM_ITRx_SetConfig>
      break;
 8028760:	e01c      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8028762:	687b      	ldr	r3, [r7, #4]
 8028764:	6818      	ldr	r0, [r3, #0]
 8028766:	683b      	ldr	r3, [r7, #0]
 8028768:	6859      	ldr	r1, [r3, #4]
 802876a:	683b      	ldr	r3, [r7, #0]
 802876c:	68db      	ldr	r3, [r3, #12]
 802876e:	461a      	mov	r2, r3
 8028770:	f000 f8ea 	bl	8028948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8028774:	687b      	ldr	r3, [r7, #4]
 8028776:	681b      	ldr	r3, [r3, #0]
 8028778:	2140      	movs	r1, #64	; 0x40
 802877a:	4618      	mov	r0, r3
 802877c:	f000 f943 	bl	8028a06 <TIM_ITRx_SetConfig>
      break;
 8028780:	e00c      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8028782:	687b      	ldr	r3, [r7, #4]
 8028784:	681a      	ldr	r2, [r3, #0]
 8028786:	683b      	ldr	r3, [r7, #0]
 8028788:	681b      	ldr	r3, [r3, #0]
 802878a:	4619      	mov	r1, r3
 802878c:	4610      	mov	r0, r2
 802878e:	f000 f93a 	bl	8028a06 <TIM_ITRx_SetConfig>
      break;
 8028792:	e003      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8028794:	2301      	movs	r3, #1
 8028796:	73fb      	strb	r3, [r7, #15]
      break;
 8028798:	e000      	b.n	802879c <HAL_TIM_ConfigClockSource+0x174>
      break;
 802879a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802879c:	687b      	ldr	r3, [r7, #4]
 802879e:	2201      	movs	r2, #1
 80287a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80287a4:	687b      	ldr	r3, [r7, #4]
 80287a6:	2200      	movs	r2, #0
 80287a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80287ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80287ae:	4618      	mov	r0, r3
 80287b0:	3710      	adds	r7, #16
 80287b2:	46bd      	mov	sp, r7
 80287b4:	bd80      	pop	{r7, pc}

080287b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80287b6:	b480      	push	{r7}
 80287b8:	b083      	sub	sp, #12
 80287ba:	af00      	add	r7, sp, #0
 80287bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80287be:	bf00      	nop
 80287c0:	370c      	adds	r7, #12
 80287c2:	46bd      	mov	sp, r7
 80287c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287c8:	4770      	bx	lr

080287ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80287ca:	b480      	push	{r7}
 80287cc:	b083      	sub	sp, #12
 80287ce:	af00      	add	r7, sp, #0
 80287d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80287d2:	bf00      	nop
 80287d4:	370c      	adds	r7, #12
 80287d6:	46bd      	mov	sp, r7
 80287d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287dc:	4770      	bx	lr

080287de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80287de:	b480      	push	{r7}
 80287e0:	b083      	sub	sp, #12
 80287e2:	af00      	add	r7, sp, #0
 80287e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80287e6:	bf00      	nop
 80287e8:	370c      	adds	r7, #12
 80287ea:	46bd      	mov	sp, r7
 80287ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80287f0:	4770      	bx	lr

080287f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80287f2:	b480      	push	{r7}
 80287f4:	b083      	sub	sp, #12
 80287f6:	af00      	add	r7, sp, #0
 80287f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80287fa:	bf00      	nop
 80287fc:	370c      	adds	r7, #12
 80287fe:	46bd      	mov	sp, r7
 8028800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028804:	4770      	bx	lr
	...

08028808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8028808:	b480      	push	{r7}
 802880a:	b085      	sub	sp, #20
 802880c:	af00      	add	r7, sp, #0
 802880e:	6078      	str	r0, [r7, #4]
 8028810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8028812:	687b      	ldr	r3, [r7, #4]
 8028814:	681b      	ldr	r3, [r3, #0]
 8028816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8028818:	687b      	ldr	r3, [r7, #4]
 802881a:	4a40      	ldr	r2, [pc, #256]	; (802891c <TIM_Base_SetConfig+0x114>)
 802881c:	4293      	cmp	r3, r2
 802881e:	d013      	beq.n	8028848 <TIM_Base_SetConfig+0x40>
 8028820:	687b      	ldr	r3, [r7, #4]
 8028822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028826:	d00f      	beq.n	8028848 <TIM_Base_SetConfig+0x40>
 8028828:	687b      	ldr	r3, [r7, #4]
 802882a:	4a3d      	ldr	r2, [pc, #244]	; (8028920 <TIM_Base_SetConfig+0x118>)
 802882c:	4293      	cmp	r3, r2
 802882e:	d00b      	beq.n	8028848 <TIM_Base_SetConfig+0x40>
 8028830:	687b      	ldr	r3, [r7, #4]
 8028832:	4a3c      	ldr	r2, [pc, #240]	; (8028924 <TIM_Base_SetConfig+0x11c>)
 8028834:	4293      	cmp	r3, r2
 8028836:	d007      	beq.n	8028848 <TIM_Base_SetConfig+0x40>
 8028838:	687b      	ldr	r3, [r7, #4]
 802883a:	4a3b      	ldr	r2, [pc, #236]	; (8028928 <TIM_Base_SetConfig+0x120>)
 802883c:	4293      	cmp	r3, r2
 802883e:	d003      	beq.n	8028848 <TIM_Base_SetConfig+0x40>
 8028840:	687b      	ldr	r3, [r7, #4]
 8028842:	4a3a      	ldr	r2, [pc, #232]	; (802892c <TIM_Base_SetConfig+0x124>)
 8028844:	4293      	cmp	r3, r2
 8028846:	d108      	bne.n	802885a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8028848:	68fb      	ldr	r3, [r7, #12]
 802884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802884e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8028850:	683b      	ldr	r3, [r7, #0]
 8028852:	685b      	ldr	r3, [r3, #4]
 8028854:	68fa      	ldr	r2, [r7, #12]
 8028856:	4313      	orrs	r3, r2
 8028858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802885a:	687b      	ldr	r3, [r7, #4]
 802885c:	4a2f      	ldr	r2, [pc, #188]	; (802891c <TIM_Base_SetConfig+0x114>)
 802885e:	4293      	cmp	r3, r2
 8028860:	d02b      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 8028862:	687b      	ldr	r3, [r7, #4]
 8028864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028868:	d027      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 802886a:	687b      	ldr	r3, [r7, #4]
 802886c:	4a2c      	ldr	r2, [pc, #176]	; (8028920 <TIM_Base_SetConfig+0x118>)
 802886e:	4293      	cmp	r3, r2
 8028870:	d023      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 8028872:	687b      	ldr	r3, [r7, #4]
 8028874:	4a2b      	ldr	r2, [pc, #172]	; (8028924 <TIM_Base_SetConfig+0x11c>)
 8028876:	4293      	cmp	r3, r2
 8028878:	d01f      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 802887a:	687b      	ldr	r3, [r7, #4]
 802887c:	4a2a      	ldr	r2, [pc, #168]	; (8028928 <TIM_Base_SetConfig+0x120>)
 802887e:	4293      	cmp	r3, r2
 8028880:	d01b      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 8028882:	687b      	ldr	r3, [r7, #4]
 8028884:	4a29      	ldr	r2, [pc, #164]	; (802892c <TIM_Base_SetConfig+0x124>)
 8028886:	4293      	cmp	r3, r2
 8028888:	d017      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 802888a:	687b      	ldr	r3, [r7, #4]
 802888c:	4a28      	ldr	r2, [pc, #160]	; (8028930 <TIM_Base_SetConfig+0x128>)
 802888e:	4293      	cmp	r3, r2
 8028890:	d013      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 8028892:	687b      	ldr	r3, [r7, #4]
 8028894:	4a27      	ldr	r2, [pc, #156]	; (8028934 <TIM_Base_SetConfig+0x12c>)
 8028896:	4293      	cmp	r3, r2
 8028898:	d00f      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 802889a:	687b      	ldr	r3, [r7, #4]
 802889c:	4a26      	ldr	r2, [pc, #152]	; (8028938 <TIM_Base_SetConfig+0x130>)
 802889e:	4293      	cmp	r3, r2
 80288a0:	d00b      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 80288a2:	687b      	ldr	r3, [r7, #4]
 80288a4:	4a25      	ldr	r2, [pc, #148]	; (802893c <TIM_Base_SetConfig+0x134>)
 80288a6:	4293      	cmp	r3, r2
 80288a8:	d007      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 80288aa:	687b      	ldr	r3, [r7, #4]
 80288ac:	4a24      	ldr	r2, [pc, #144]	; (8028940 <TIM_Base_SetConfig+0x138>)
 80288ae:	4293      	cmp	r3, r2
 80288b0:	d003      	beq.n	80288ba <TIM_Base_SetConfig+0xb2>
 80288b2:	687b      	ldr	r3, [r7, #4]
 80288b4:	4a23      	ldr	r2, [pc, #140]	; (8028944 <TIM_Base_SetConfig+0x13c>)
 80288b6:	4293      	cmp	r3, r2
 80288b8:	d108      	bne.n	80288cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80288ba:	68fb      	ldr	r3, [r7, #12]
 80288bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80288c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80288c2:	683b      	ldr	r3, [r7, #0]
 80288c4:	68db      	ldr	r3, [r3, #12]
 80288c6:	68fa      	ldr	r2, [r7, #12]
 80288c8:	4313      	orrs	r3, r2
 80288ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80288cc:	68fb      	ldr	r3, [r7, #12]
 80288ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80288d2:	683b      	ldr	r3, [r7, #0]
 80288d4:	695b      	ldr	r3, [r3, #20]
 80288d6:	4313      	orrs	r3, r2
 80288d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80288da:	687b      	ldr	r3, [r7, #4]
 80288dc:	68fa      	ldr	r2, [r7, #12]
 80288de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80288e0:	683b      	ldr	r3, [r7, #0]
 80288e2:	689a      	ldr	r2, [r3, #8]
 80288e4:	687b      	ldr	r3, [r7, #4]
 80288e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80288e8:	683b      	ldr	r3, [r7, #0]
 80288ea:	681a      	ldr	r2, [r3, #0]
 80288ec:	687b      	ldr	r3, [r7, #4]
 80288ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80288f0:	687b      	ldr	r3, [r7, #4]
 80288f2:	4a0a      	ldr	r2, [pc, #40]	; (802891c <TIM_Base_SetConfig+0x114>)
 80288f4:	4293      	cmp	r3, r2
 80288f6:	d003      	beq.n	8028900 <TIM_Base_SetConfig+0xf8>
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	4a0c      	ldr	r2, [pc, #48]	; (802892c <TIM_Base_SetConfig+0x124>)
 80288fc:	4293      	cmp	r3, r2
 80288fe:	d103      	bne.n	8028908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8028900:	683b      	ldr	r3, [r7, #0]
 8028902:	691a      	ldr	r2, [r3, #16]
 8028904:	687b      	ldr	r3, [r7, #4]
 8028906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	2201      	movs	r2, #1
 802890c:	615a      	str	r2, [r3, #20]
}
 802890e:	bf00      	nop
 8028910:	3714      	adds	r7, #20
 8028912:	46bd      	mov	sp, r7
 8028914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028918:	4770      	bx	lr
 802891a:	bf00      	nop
 802891c:	40010000 	.word	0x40010000
 8028920:	40000400 	.word	0x40000400
 8028924:	40000800 	.word	0x40000800
 8028928:	40000c00 	.word	0x40000c00
 802892c:	40010400 	.word	0x40010400
 8028930:	40014000 	.word	0x40014000
 8028934:	40014400 	.word	0x40014400
 8028938:	40014800 	.word	0x40014800
 802893c:	40001800 	.word	0x40001800
 8028940:	40001c00 	.word	0x40001c00
 8028944:	40002000 	.word	0x40002000

08028948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8028948:	b480      	push	{r7}
 802894a:	b087      	sub	sp, #28
 802894c:	af00      	add	r7, sp, #0
 802894e:	60f8      	str	r0, [r7, #12]
 8028950:	60b9      	str	r1, [r7, #8]
 8028952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8028954:	68fb      	ldr	r3, [r7, #12]
 8028956:	6a1b      	ldr	r3, [r3, #32]
 8028958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802895a:	68fb      	ldr	r3, [r7, #12]
 802895c:	6a1b      	ldr	r3, [r3, #32]
 802895e:	f023 0201 	bic.w	r2, r3, #1
 8028962:	68fb      	ldr	r3, [r7, #12]
 8028964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8028966:	68fb      	ldr	r3, [r7, #12]
 8028968:	699b      	ldr	r3, [r3, #24]
 802896a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802896c:	693b      	ldr	r3, [r7, #16]
 802896e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8028972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8028974:	687b      	ldr	r3, [r7, #4]
 8028976:	011b      	lsls	r3, r3, #4
 8028978:	693a      	ldr	r2, [r7, #16]
 802897a:	4313      	orrs	r3, r2
 802897c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802897e:	697b      	ldr	r3, [r7, #20]
 8028980:	f023 030a 	bic.w	r3, r3, #10
 8028984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8028986:	697a      	ldr	r2, [r7, #20]
 8028988:	68bb      	ldr	r3, [r7, #8]
 802898a:	4313      	orrs	r3, r2
 802898c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802898e:	68fb      	ldr	r3, [r7, #12]
 8028990:	693a      	ldr	r2, [r7, #16]
 8028992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8028994:	68fb      	ldr	r3, [r7, #12]
 8028996:	697a      	ldr	r2, [r7, #20]
 8028998:	621a      	str	r2, [r3, #32]
}
 802899a:	bf00      	nop
 802899c:	371c      	adds	r7, #28
 802899e:	46bd      	mov	sp, r7
 80289a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80289a4:	4770      	bx	lr

080289a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80289a6:	b480      	push	{r7}
 80289a8:	b087      	sub	sp, #28
 80289aa:	af00      	add	r7, sp, #0
 80289ac:	60f8      	str	r0, [r7, #12]
 80289ae:	60b9      	str	r1, [r7, #8]
 80289b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80289b2:	68fb      	ldr	r3, [r7, #12]
 80289b4:	6a1b      	ldr	r3, [r3, #32]
 80289b6:	f023 0210 	bic.w	r2, r3, #16
 80289ba:	68fb      	ldr	r3, [r7, #12]
 80289bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	699b      	ldr	r3, [r3, #24]
 80289c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80289c4:	68fb      	ldr	r3, [r7, #12]
 80289c6:	6a1b      	ldr	r3, [r3, #32]
 80289c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80289ca:	697b      	ldr	r3, [r7, #20]
 80289cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80289d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80289d2:	687b      	ldr	r3, [r7, #4]
 80289d4:	031b      	lsls	r3, r3, #12
 80289d6:	697a      	ldr	r2, [r7, #20]
 80289d8:	4313      	orrs	r3, r2
 80289da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80289dc:	693b      	ldr	r3, [r7, #16]
 80289de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80289e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80289e4:	68bb      	ldr	r3, [r7, #8]
 80289e6:	011b      	lsls	r3, r3, #4
 80289e8:	693a      	ldr	r2, [r7, #16]
 80289ea:	4313      	orrs	r3, r2
 80289ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80289ee:	68fb      	ldr	r3, [r7, #12]
 80289f0:	697a      	ldr	r2, [r7, #20]
 80289f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	693a      	ldr	r2, [r7, #16]
 80289f8:	621a      	str	r2, [r3, #32]
}
 80289fa:	bf00      	nop
 80289fc:	371c      	adds	r7, #28
 80289fe:	46bd      	mov	sp, r7
 8028a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a04:	4770      	bx	lr

08028a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8028a06:	b480      	push	{r7}
 8028a08:	b085      	sub	sp, #20
 8028a0a:	af00      	add	r7, sp, #0
 8028a0c:	6078      	str	r0, [r7, #4]
 8028a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8028a10:	687b      	ldr	r3, [r7, #4]
 8028a12:	689b      	ldr	r3, [r3, #8]
 8028a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8028a16:	68fb      	ldr	r3, [r7, #12]
 8028a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8028a1e:	683a      	ldr	r2, [r7, #0]
 8028a20:	68fb      	ldr	r3, [r7, #12]
 8028a22:	4313      	orrs	r3, r2
 8028a24:	f043 0307 	orr.w	r3, r3, #7
 8028a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	68fa      	ldr	r2, [r7, #12]
 8028a2e:	609a      	str	r2, [r3, #8]
}
 8028a30:	bf00      	nop
 8028a32:	3714      	adds	r7, #20
 8028a34:	46bd      	mov	sp, r7
 8028a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a3a:	4770      	bx	lr

08028a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8028a3c:	b480      	push	{r7}
 8028a3e:	b087      	sub	sp, #28
 8028a40:	af00      	add	r7, sp, #0
 8028a42:	60f8      	str	r0, [r7, #12]
 8028a44:	60b9      	str	r1, [r7, #8]
 8028a46:	607a      	str	r2, [r7, #4]
 8028a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8028a4a:	68fb      	ldr	r3, [r7, #12]
 8028a4c:	689b      	ldr	r3, [r3, #8]
 8028a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8028a50:	697b      	ldr	r3, [r7, #20]
 8028a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8028a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8028a58:	683b      	ldr	r3, [r7, #0]
 8028a5a:	021a      	lsls	r2, r3, #8
 8028a5c:	687b      	ldr	r3, [r7, #4]
 8028a5e:	431a      	orrs	r2, r3
 8028a60:	68bb      	ldr	r3, [r7, #8]
 8028a62:	4313      	orrs	r3, r2
 8028a64:	697a      	ldr	r2, [r7, #20]
 8028a66:	4313      	orrs	r3, r2
 8028a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8028a6a:	68fb      	ldr	r3, [r7, #12]
 8028a6c:	697a      	ldr	r2, [r7, #20]
 8028a6e:	609a      	str	r2, [r3, #8]
}
 8028a70:	bf00      	nop
 8028a72:	371c      	adds	r7, #28
 8028a74:	46bd      	mov	sp, r7
 8028a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028a7a:	4770      	bx	lr

08028a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8028a7c:	b480      	push	{r7}
 8028a7e:	b085      	sub	sp, #20
 8028a80:	af00      	add	r7, sp, #0
 8028a82:	6078      	str	r0, [r7, #4]
 8028a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8028a86:	687b      	ldr	r3, [r7, #4]
 8028a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028a8c:	2b01      	cmp	r3, #1
 8028a8e:	d101      	bne.n	8028a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8028a90:	2302      	movs	r3, #2
 8028a92:	e05a      	b.n	8028b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8028a94:	687b      	ldr	r3, [r7, #4]
 8028a96:	2201      	movs	r2, #1
 8028a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028a9c:	687b      	ldr	r3, [r7, #4]
 8028a9e:	2202      	movs	r2, #2
 8028aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8028aa4:	687b      	ldr	r3, [r7, #4]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	685b      	ldr	r3, [r3, #4]
 8028aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8028aac:	687b      	ldr	r3, [r7, #4]
 8028aae:	681b      	ldr	r3, [r3, #0]
 8028ab0:	689b      	ldr	r3, [r3, #8]
 8028ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8028ab4:	68fb      	ldr	r3, [r7, #12]
 8028ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8028aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8028abc:	683b      	ldr	r3, [r7, #0]
 8028abe:	681b      	ldr	r3, [r3, #0]
 8028ac0:	68fa      	ldr	r2, [r7, #12]
 8028ac2:	4313      	orrs	r3, r2
 8028ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8028ac6:	687b      	ldr	r3, [r7, #4]
 8028ac8:	681b      	ldr	r3, [r3, #0]
 8028aca:	68fa      	ldr	r2, [r7, #12]
 8028acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028ace:	687b      	ldr	r3, [r7, #4]
 8028ad0:	681b      	ldr	r3, [r3, #0]
 8028ad2:	4a21      	ldr	r2, [pc, #132]	; (8028b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8028ad4:	4293      	cmp	r3, r2
 8028ad6:	d022      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028ad8:	687b      	ldr	r3, [r7, #4]
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028ae0:	d01d      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028ae2:	687b      	ldr	r3, [r7, #4]
 8028ae4:	681b      	ldr	r3, [r3, #0]
 8028ae6:	4a1d      	ldr	r2, [pc, #116]	; (8028b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8028ae8:	4293      	cmp	r3, r2
 8028aea:	d018      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028aec:	687b      	ldr	r3, [r7, #4]
 8028aee:	681b      	ldr	r3, [r3, #0]
 8028af0:	4a1b      	ldr	r2, [pc, #108]	; (8028b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8028af2:	4293      	cmp	r3, r2
 8028af4:	d013      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028af6:	687b      	ldr	r3, [r7, #4]
 8028af8:	681b      	ldr	r3, [r3, #0]
 8028afa:	4a1a      	ldr	r2, [pc, #104]	; (8028b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8028afc:	4293      	cmp	r3, r2
 8028afe:	d00e      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b00:	687b      	ldr	r3, [r7, #4]
 8028b02:	681b      	ldr	r3, [r3, #0]
 8028b04:	4a18      	ldr	r2, [pc, #96]	; (8028b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8028b06:	4293      	cmp	r3, r2
 8028b08:	d009      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b0a:	687b      	ldr	r3, [r7, #4]
 8028b0c:	681b      	ldr	r3, [r3, #0]
 8028b0e:	4a17      	ldr	r2, [pc, #92]	; (8028b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8028b10:	4293      	cmp	r3, r2
 8028b12:	d004      	beq.n	8028b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8028b14:	687b      	ldr	r3, [r7, #4]
 8028b16:	681b      	ldr	r3, [r3, #0]
 8028b18:	4a15      	ldr	r2, [pc, #84]	; (8028b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8028b1a:	4293      	cmp	r3, r2
 8028b1c:	d10c      	bne.n	8028b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8028b1e:	68bb      	ldr	r3, [r7, #8]
 8028b20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8028b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8028b26:	683b      	ldr	r3, [r7, #0]
 8028b28:	685b      	ldr	r3, [r3, #4]
 8028b2a:	68ba      	ldr	r2, [r7, #8]
 8028b2c:	4313      	orrs	r3, r2
 8028b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8028b30:	687b      	ldr	r3, [r7, #4]
 8028b32:	681b      	ldr	r3, [r3, #0]
 8028b34:	68ba      	ldr	r2, [r7, #8]
 8028b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8028b38:	687b      	ldr	r3, [r7, #4]
 8028b3a:	2201      	movs	r2, #1
 8028b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8028b40:	687b      	ldr	r3, [r7, #4]
 8028b42:	2200      	movs	r2, #0
 8028b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8028b48:	2300      	movs	r3, #0
}
 8028b4a:	4618      	mov	r0, r3
 8028b4c:	3714      	adds	r7, #20
 8028b4e:	46bd      	mov	sp, r7
 8028b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b54:	4770      	bx	lr
 8028b56:	bf00      	nop
 8028b58:	40010000 	.word	0x40010000
 8028b5c:	40000400 	.word	0x40000400
 8028b60:	40000800 	.word	0x40000800
 8028b64:	40000c00 	.word	0x40000c00
 8028b68:	40010400 	.word	0x40010400
 8028b6c:	40014000 	.word	0x40014000
 8028b70:	40001800 	.word	0x40001800

08028b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8028b74:	b480      	push	{r7}
 8028b76:	b083      	sub	sp, #12
 8028b78:	af00      	add	r7, sp, #0
 8028b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8028b7c:	bf00      	nop
 8028b7e:	370c      	adds	r7, #12
 8028b80:	46bd      	mov	sp, r7
 8028b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b86:	4770      	bx	lr

08028b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8028b88:	b480      	push	{r7}
 8028b8a:	b083      	sub	sp, #12
 8028b8c:	af00      	add	r7, sp, #0
 8028b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8028b90:	bf00      	nop
 8028b92:	370c      	adds	r7, #12
 8028b94:	46bd      	mov	sp, r7
 8028b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b9a:	4770      	bx	lr

08028b9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8028b9c:	b580      	push	{r7, lr}
 8028b9e:	b082      	sub	sp, #8
 8028ba0:	af00      	add	r7, sp, #0
 8028ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8028ba4:	687b      	ldr	r3, [r7, #4]
 8028ba6:	2b00      	cmp	r3, #0
 8028ba8:	d101      	bne.n	8028bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8028baa:	2301      	movs	r3, #1
 8028bac:	e03f      	b.n	8028c2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8028bae:	687b      	ldr	r3, [r7, #4]
 8028bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028bb4:	b2db      	uxtb	r3, r3
 8028bb6:	2b00      	cmp	r3, #0
 8028bb8:	d106      	bne.n	8028bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8028bba:	687b      	ldr	r3, [r7, #4]
 8028bbc:	2200      	movs	r2, #0
 8028bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8028bc2:	6878      	ldr	r0, [r7, #4]
 8028bc4:	f7f8 fd68 	bl	8021698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8028bc8:	687b      	ldr	r3, [r7, #4]
 8028bca:	2224      	movs	r2, #36	; 0x24
 8028bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8028bd0:	687b      	ldr	r3, [r7, #4]
 8028bd2:	681b      	ldr	r3, [r3, #0]
 8028bd4:	68da      	ldr	r2, [r3, #12]
 8028bd6:	687b      	ldr	r3, [r7, #4]
 8028bd8:	681b      	ldr	r3, [r3, #0]
 8028bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028bde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8028be0:	6878      	ldr	r0, [r7, #4]
 8028be2:	f000 fddf 	bl	80297a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8028be6:	687b      	ldr	r3, [r7, #4]
 8028be8:	681b      	ldr	r3, [r3, #0]
 8028bea:	691a      	ldr	r2, [r3, #16]
 8028bec:	687b      	ldr	r3, [r7, #4]
 8028bee:	681b      	ldr	r3, [r3, #0]
 8028bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8028bf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8028bf6:	687b      	ldr	r3, [r7, #4]
 8028bf8:	681b      	ldr	r3, [r3, #0]
 8028bfa:	695a      	ldr	r2, [r3, #20]
 8028bfc:	687b      	ldr	r3, [r7, #4]
 8028bfe:	681b      	ldr	r3, [r3, #0]
 8028c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8028c04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8028c06:	687b      	ldr	r3, [r7, #4]
 8028c08:	681b      	ldr	r3, [r3, #0]
 8028c0a:	68da      	ldr	r2, [r3, #12]
 8028c0c:	687b      	ldr	r3, [r7, #4]
 8028c0e:	681b      	ldr	r3, [r3, #0]
 8028c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028c14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028c16:	687b      	ldr	r3, [r7, #4]
 8028c18:	2200      	movs	r2, #0
 8028c1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8028c1c:	687b      	ldr	r3, [r7, #4]
 8028c1e:	2220      	movs	r2, #32
 8028c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8028c24:	687b      	ldr	r3, [r7, #4]
 8028c26:	2220      	movs	r2, #32
 8028c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028c2c:	2300      	movs	r3, #0
}
 8028c2e:	4618      	mov	r0, r3
 8028c30:	3708      	adds	r7, #8
 8028c32:	46bd      	mov	sp, r7
 8028c34:	bd80      	pop	{r7, pc}

08028c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028c36:	b580      	push	{r7, lr}
 8028c38:	b08a      	sub	sp, #40	; 0x28
 8028c3a:	af02      	add	r7, sp, #8
 8028c3c:	60f8      	str	r0, [r7, #12]
 8028c3e:	60b9      	str	r1, [r7, #8]
 8028c40:	603b      	str	r3, [r7, #0]
 8028c42:	4613      	mov	r3, r2
 8028c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8028c46:	2300      	movs	r3, #0
 8028c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8028c4a:	68fb      	ldr	r3, [r7, #12]
 8028c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028c50:	b2db      	uxtb	r3, r3
 8028c52:	2b20      	cmp	r3, #32
 8028c54:	d17c      	bne.n	8028d50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8028c56:	68bb      	ldr	r3, [r7, #8]
 8028c58:	2b00      	cmp	r3, #0
 8028c5a:	d002      	beq.n	8028c62 <HAL_UART_Transmit+0x2c>
 8028c5c:	88fb      	ldrh	r3, [r7, #6]
 8028c5e:	2b00      	cmp	r3, #0
 8028c60:	d101      	bne.n	8028c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8028c62:	2301      	movs	r3, #1
 8028c64:	e075      	b.n	8028d52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028c66:	68fb      	ldr	r3, [r7, #12]
 8028c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028c6c:	2b01      	cmp	r3, #1
 8028c6e:	d101      	bne.n	8028c74 <HAL_UART_Transmit+0x3e>
 8028c70:	2302      	movs	r3, #2
 8028c72:	e06e      	b.n	8028d52 <HAL_UART_Transmit+0x11c>
 8028c74:	68fb      	ldr	r3, [r7, #12]
 8028c76:	2201      	movs	r2, #1
 8028c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028c7c:	68fb      	ldr	r3, [r7, #12]
 8028c7e:	2200      	movs	r2, #0
 8028c80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8028c82:	68fb      	ldr	r3, [r7, #12]
 8028c84:	2221      	movs	r2, #33	; 0x21
 8028c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8028c8a:	f7fa fa2d 	bl	80230e8 <HAL_GetTick>
 8028c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	88fa      	ldrh	r2, [r7, #6]
 8028c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8028c96:	68fb      	ldr	r3, [r7, #12]
 8028c98:	88fa      	ldrh	r2, [r7, #6]
 8028c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	689b      	ldr	r3, [r3, #8]
 8028ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8028ca4:	d108      	bne.n	8028cb8 <HAL_UART_Transmit+0x82>
 8028ca6:	68fb      	ldr	r3, [r7, #12]
 8028ca8:	691b      	ldr	r3, [r3, #16]
 8028caa:	2b00      	cmp	r3, #0
 8028cac:	d104      	bne.n	8028cb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8028cae:	2300      	movs	r3, #0
 8028cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8028cb2:	68bb      	ldr	r3, [r7, #8]
 8028cb4:	61bb      	str	r3, [r7, #24]
 8028cb6:	e003      	b.n	8028cc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8028cb8:	68bb      	ldr	r3, [r7, #8]
 8028cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8028cbc:	2300      	movs	r3, #0
 8028cbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8028cc0:	68fb      	ldr	r3, [r7, #12]
 8028cc2:	2200      	movs	r2, #0
 8028cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8028cc8:	e02a      	b.n	8028d20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8028cca:	683b      	ldr	r3, [r7, #0]
 8028ccc:	9300      	str	r3, [sp, #0]
 8028cce:	697b      	ldr	r3, [r7, #20]
 8028cd0:	2200      	movs	r2, #0
 8028cd2:	2180      	movs	r1, #128	; 0x80
 8028cd4:	68f8      	ldr	r0, [r7, #12]
 8028cd6:	f000 fb1f 	bl	8029318 <UART_WaitOnFlagUntilTimeout>
 8028cda:	4603      	mov	r3, r0
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	d001      	beq.n	8028ce4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8028ce0:	2303      	movs	r3, #3
 8028ce2:	e036      	b.n	8028d52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8028ce4:	69fb      	ldr	r3, [r7, #28]
 8028ce6:	2b00      	cmp	r3, #0
 8028ce8:	d10b      	bne.n	8028d02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8028cea:	69bb      	ldr	r3, [r7, #24]
 8028cec:	881b      	ldrh	r3, [r3, #0]
 8028cee:	461a      	mov	r2, r3
 8028cf0:	68fb      	ldr	r3, [r7, #12]
 8028cf2:	681b      	ldr	r3, [r3, #0]
 8028cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8028cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8028cfa:	69bb      	ldr	r3, [r7, #24]
 8028cfc:	3302      	adds	r3, #2
 8028cfe:	61bb      	str	r3, [r7, #24]
 8028d00:	e007      	b.n	8028d12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8028d02:	69fb      	ldr	r3, [r7, #28]
 8028d04:	781a      	ldrb	r2, [r3, #0]
 8028d06:	68fb      	ldr	r3, [r7, #12]
 8028d08:	681b      	ldr	r3, [r3, #0]
 8028d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8028d0c:	69fb      	ldr	r3, [r7, #28]
 8028d0e:	3301      	adds	r3, #1
 8028d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8028d12:	68fb      	ldr	r3, [r7, #12]
 8028d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028d16:	b29b      	uxth	r3, r3
 8028d18:	3b01      	subs	r3, #1
 8028d1a:	b29a      	uxth	r2, r3
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8028d24:	b29b      	uxth	r3, r3
 8028d26:	2b00      	cmp	r3, #0
 8028d28:	d1cf      	bne.n	8028cca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8028d2a:	683b      	ldr	r3, [r7, #0]
 8028d2c:	9300      	str	r3, [sp, #0]
 8028d2e:	697b      	ldr	r3, [r7, #20]
 8028d30:	2200      	movs	r2, #0
 8028d32:	2140      	movs	r1, #64	; 0x40
 8028d34:	68f8      	ldr	r0, [r7, #12]
 8028d36:	f000 faef 	bl	8029318 <UART_WaitOnFlagUntilTimeout>
 8028d3a:	4603      	mov	r3, r0
 8028d3c:	2b00      	cmp	r3, #0
 8028d3e:	d001      	beq.n	8028d44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8028d40:	2303      	movs	r3, #3
 8028d42:	e006      	b.n	8028d52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	2220      	movs	r2, #32
 8028d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8028d4c:	2300      	movs	r3, #0
 8028d4e:	e000      	b.n	8028d52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8028d50:	2302      	movs	r3, #2
  }
}
 8028d52:	4618      	mov	r0, r3
 8028d54:	3720      	adds	r7, #32
 8028d56:	46bd      	mov	sp, r7
 8028d58:	bd80      	pop	{r7, pc}

08028d5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8028d5a:	b580      	push	{r7, lr}
 8028d5c:	b084      	sub	sp, #16
 8028d5e:	af00      	add	r7, sp, #0
 8028d60:	60f8      	str	r0, [r7, #12]
 8028d62:	60b9      	str	r1, [r7, #8]
 8028d64:	4613      	mov	r3, r2
 8028d66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8028d68:	68fb      	ldr	r3, [r7, #12]
 8028d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8028d6e:	b2db      	uxtb	r3, r3
 8028d70:	2b20      	cmp	r3, #32
 8028d72:	d11d      	bne.n	8028db0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8028d74:	68bb      	ldr	r3, [r7, #8]
 8028d76:	2b00      	cmp	r3, #0
 8028d78:	d002      	beq.n	8028d80 <HAL_UART_Receive_IT+0x26>
 8028d7a:	88fb      	ldrh	r3, [r7, #6]
 8028d7c:	2b00      	cmp	r3, #0
 8028d7e:	d101      	bne.n	8028d84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8028d80:	2301      	movs	r3, #1
 8028d82:	e016      	b.n	8028db2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8028d8a:	2b01      	cmp	r3, #1
 8028d8c:	d101      	bne.n	8028d92 <HAL_UART_Receive_IT+0x38>
 8028d8e:	2302      	movs	r3, #2
 8028d90:	e00f      	b.n	8028db2 <HAL_UART_Receive_IT+0x58>
 8028d92:	68fb      	ldr	r3, [r7, #12]
 8028d94:	2201      	movs	r2, #1
 8028d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	2200      	movs	r2, #0
 8028d9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8028da0:	88fb      	ldrh	r3, [r7, #6]
 8028da2:	461a      	mov	r2, r3
 8028da4:	68b9      	ldr	r1, [r7, #8]
 8028da6:	68f8      	ldr	r0, [r7, #12]
 8028da8:	f000 fb24 	bl	80293f4 <UART_Start_Receive_IT>
 8028dac:	4603      	mov	r3, r0
 8028dae:	e000      	b.n	8028db2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8028db0:	2302      	movs	r3, #2
  }
}
 8028db2:	4618      	mov	r0, r3
 8028db4:	3710      	adds	r7, #16
 8028db6:	46bd      	mov	sp, r7
 8028db8:	bd80      	pop	{r7, pc}
	...

08028dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8028dbc:	b580      	push	{r7, lr}
 8028dbe:	b0ba      	sub	sp, #232	; 0xe8
 8028dc0:	af00      	add	r7, sp, #0
 8028dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	681b      	ldr	r3, [r3, #0]
 8028dc8:	681b      	ldr	r3, [r3, #0]
 8028dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8028dce:	687b      	ldr	r3, [r7, #4]
 8028dd0:	681b      	ldr	r3, [r3, #0]
 8028dd2:	68db      	ldr	r3, [r3, #12]
 8028dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8028dd8:	687b      	ldr	r3, [r7, #4]
 8028dda:	681b      	ldr	r3, [r3, #0]
 8028ddc:	695b      	ldr	r3, [r3, #20]
 8028dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8028de2:	2300      	movs	r3, #0
 8028de4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8028de8:	2300      	movs	r3, #0
 8028dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8028dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028df2:	f003 030f 	and.w	r3, r3, #15
 8028df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8028dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d10f      	bne.n	8028e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e06:	f003 0320 	and.w	r3, r3, #32
 8028e0a:	2b00      	cmp	r3, #0
 8028e0c:	d009      	beq.n	8028e22 <HAL_UART_IRQHandler+0x66>
 8028e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028e12:	f003 0320 	and.w	r3, r3, #32
 8028e16:	2b00      	cmp	r3, #0
 8028e18:	d003      	beq.n	8028e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8028e1a:	6878      	ldr	r0, [r7, #4]
 8028e1c:	f000 fc07 	bl	802962e <UART_Receive_IT>
      return;
 8028e20:	e256      	b.n	80292d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8028e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8028e26:	2b00      	cmp	r3, #0
 8028e28:	f000 80de 	beq.w	8028fe8 <HAL_UART_IRQHandler+0x22c>
 8028e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028e30:	f003 0301 	and.w	r3, r3, #1
 8028e34:	2b00      	cmp	r3, #0
 8028e36:	d106      	bne.n	8028e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8028e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028e3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	f000 80d1 	beq.w	8028fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8028e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e4a:	f003 0301 	and.w	r3, r3, #1
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	d00b      	beq.n	8028e6a <HAL_UART_IRQHandler+0xae>
 8028e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028e5a:	2b00      	cmp	r3, #0
 8028e5c:	d005      	beq.n	8028e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8028e5e:	687b      	ldr	r3, [r7, #4]
 8028e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028e62:	f043 0201 	orr.w	r2, r3, #1
 8028e66:	687b      	ldr	r3, [r7, #4]
 8028e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e6e:	f003 0304 	and.w	r3, r3, #4
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d00b      	beq.n	8028e8e <HAL_UART_IRQHandler+0xd2>
 8028e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028e7a:	f003 0301 	and.w	r3, r3, #1
 8028e7e:	2b00      	cmp	r3, #0
 8028e80:	d005      	beq.n	8028e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8028e82:	687b      	ldr	r3, [r7, #4]
 8028e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028e86:	f043 0202 	orr.w	r2, r3, #2
 8028e8a:	687b      	ldr	r3, [r7, #4]
 8028e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8028e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028e92:	f003 0302 	and.w	r3, r3, #2
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d00b      	beq.n	8028eb2 <HAL_UART_IRQHandler+0xf6>
 8028e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028e9e:	f003 0301 	and.w	r3, r3, #1
 8028ea2:	2b00      	cmp	r3, #0
 8028ea4:	d005      	beq.n	8028eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8028ea6:	687b      	ldr	r3, [r7, #4]
 8028ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028eaa:	f043 0204 	orr.w	r2, r3, #4
 8028eae:	687b      	ldr	r3, [r7, #4]
 8028eb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8028eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028eb6:	f003 0308 	and.w	r3, r3, #8
 8028eba:	2b00      	cmp	r3, #0
 8028ebc:	d011      	beq.n	8028ee2 <HAL_UART_IRQHandler+0x126>
 8028ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028ec2:	f003 0320 	and.w	r3, r3, #32
 8028ec6:	2b00      	cmp	r3, #0
 8028ec8:	d105      	bne.n	8028ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8028eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8028ece:	f003 0301 	and.w	r3, r3, #1
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d005      	beq.n	8028ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8028ed6:	687b      	ldr	r3, [r7, #4]
 8028ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028eda:	f043 0208 	orr.w	r2, r3, #8
 8028ede:	687b      	ldr	r3, [r7, #4]
 8028ee0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8028ee2:	687b      	ldr	r3, [r7, #4]
 8028ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028ee6:	2b00      	cmp	r3, #0
 8028ee8:	f000 81ed 	beq.w	80292c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8028eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028ef0:	f003 0320 	and.w	r3, r3, #32
 8028ef4:	2b00      	cmp	r3, #0
 8028ef6:	d008      	beq.n	8028f0a <HAL_UART_IRQHandler+0x14e>
 8028ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8028efc:	f003 0320 	and.w	r3, r3, #32
 8028f00:	2b00      	cmp	r3, #0
 8028f02:	d002      	beq.n	8028f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8028f04:	6878      	ldr	r0, [r7, #4]
 8028f06:	f000 fb92 	bl	802962e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8028f0a:	687b      	ldr	r3, [r7, #4]
 8028f0c:	681b      	ldr	r3, [r3, #0]
 8028f0e:	695b      	ldr	r3, [r3, #20]
 8028f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f14:	2b40      	cmp	r3, #64	; 0x40
 8028f16:	bf0c      	ite	eq
 8028f18:	2301      	moveq	r3, #1
 8028f1a:	2300      	movne	r3, #0
 8028f1c:	b2db      	uxtb	r3, r3
 8028f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8028f22:	687b      	ldr	r3, [r7, #4]
 8028f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028f26:	f003 0308 	and.w	r3, r3, #8
 8028f2a:	2b00      	cmp	r3, #0
 8028f2c:	d103      	bne.n	8028f36 <HAL_UART_IRQHandler+0x17a>
 8028f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	d04f      	beq.n	8028fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8028f36:	6878      	ldr	r0, [r7, #4]
 8028f38:	f000 fa9a 	bl	8029470 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	681b      	ldr	r3, [r3, #0]
 8028f40:	695b      	ldr	r3, [r3, #20]
 8028f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f46:	2b40      	cmp	r3, #64	; 0x40
 8028f48:	d141      	bne.n	8028fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8028f4a:	687b      	ldr	r3, [r7, #4]
 8028f4c:	681b      	ldr	r3, [r3, #0]
 8028f4e:	3314      	adds	r3, #20
 8028f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8028f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8028f58:	e853 3f00 	ldrex	r3, [r3]
 8028f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8028f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8028f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8028f68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8028f6c:	687b      	ldr	r3, [r7, #4]
 8028f6e:	681b      	ldr	r3, [r3, #0]
 8028f70:	3314      	adds	r3, #20
 8028f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8028f76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8028f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8028f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8028f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8028f86:	e841 2300 	strex	r3, r2, [r1]
 8028f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8028f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8028f92:	2b00      	cmp	r3, #0
 8028f94:	d1d9      	bne.n	8028f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028f9a:	2b00      	cmp	r3, #0
 8028f9c:	d013      	beq.n	8028fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8028f9e:	687b      	ldr	r3, [r7, #4]
 8028fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fa2:	4a7d      	ldr	r2, [pc, #500]	; (8029198 <HAL_UART_IRQHandler+0x3dc>)
 8028fa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028faa:	4618      	mov	r0, r3
 8028fac:	f7fa fb46 	bl	802363c <HAL_DMA_Abort_IT>
 8028fb0:	4603      	mov	r3, r0
 8028fb2:	2b00      	cmp	r3, #0
 8028fb4:	d016      	beq.n	8028fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8028fb6:	687b      	ldr	r3, [r7, #4]
 8028fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028fbc:	687a      	ldr	r2, [r7, #4]
 8028fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8028fc0:	4610      	mov	r0, r2
 8028fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028fc4:	e00e      	b.n	8028fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8028fc6:	6878      	ldr	r0, [r7, #4]
 8028fc8:	f000 f990 	bl	80292ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028fcc:	e00a      	b.n	8028fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8028fce:	6878      	ldr	r0, [r7, #4]
 8028fd0:	f000 f98c 	bl	80292ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028fd4:	e006      	b.n	8028fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8028fd6:	6878      	ldr	r0, [r7, #4]
 8028fd8:	f000 f988 	bl	80292ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8028fdc:	687b      	ldr	r3, [r7, #4]
 8028fde:	2200      	movs	r2, #0
 8028fe0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8028fe2:	e170      	b.n	80292c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8028fe4:	bf00      	nop
    return;
 8028fe6:	e16e      	b.n	80292c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8028fe8:	687b      	ldr	r3, [r7, #4]
 8028fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fec:	2b01      	cmp	r3, #1
 8028fee:	f040 814a 	bne.w	8029286 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8028ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8028ff6:	f003 0310 	and.w	r3, r3, #16
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	f000 8143 	beq.w	8029286 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029004:	f003 0310 	and.w	r3, r3, #16
 8029008:	2b00      	cmp	r3, #0
 802900a:	f000 813c 	beq.w	8029286 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 802900e:	2300      	movs	r3, #0
 8029010:	60bb      	str	r3, [r7, #8]
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	681b      	ldr	r3, [r3, #0]
 8029016:	681b      	ldr	r3, [r3, #0]
 8029018:	60bb      	str	r3, [r7, #8]
 802901a:	687b      	ldr	r3, [r7, #4]
 802901c:	681b      	ldr	r3, [r3, #0]
 802901e:	685b      	ldr	r3, [r3, #4]
 8029020:	60bb      	str	r3, [r7, #8]
 8029022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	695b      	ldr	r3, [r3, #20]
 802902a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802902e:	2b40      	cmp	r3, #64	; 0x40
 8029030:	f040 80b4 	bne.w	802919c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029034:	687b      	ldr	r3, [r7, #4]
 8029036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029038:	681b      	ldr	r3, [r3, #0]
 802903a:	685b      	ldr	r3, [r3, #4]
 802903c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029044:	2b00      	cmp	r3, #0
 8029046:	f000 8140 	beq.w	80292ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 802904a:	687b      	ldr	r3, [r7, #4]
 802904c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802904e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029052:	429a      	cmp	r2, r3
 8029054:	f080 8139 	bcs.w	80292ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029058:	687b      	ldr	r3, [r7, #4]
 802905a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 802905e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029064:	69db      	ldr	r3, [r3, #28]
 8029066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802906a:	f000 8088 	beq.w	802917e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	681b      	ldr	r3, [r3, #0]
 8029072:	330c      	adds	r3, #12
 8029074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 802907c:	e853 3f00 	ldrex	r3, [r3]
 8029080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802908c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029090:	687b      	ldr	r3, [r7, #4]
 8029092:	681b      	ldr	r3, [r3, #0]
 8029094:	330c      	adds	r3, #12
 8029096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 802909a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802909e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80290a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80290a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80290aa:	e841 2300 	strex	r3, r2, [r1]
 80290ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80290b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80290b6:	2b00      	cmp	r3, #0
 80290b8:	d1d9      	bne.n	802906e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80290ba:	687b      	ldr	r3, [r7, #4]
 80290bc:	681b      	ldr	r3, [r3, #0]
 80290be:	3314      	adds	r3, #20
 80290c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80290c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290c4:	e853 3f00 	ldrex	r3, [r3]
 80290c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80290ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80290cc:	f023 0301 	bic.w	r3, r3, #1
 80290d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80290d4:	687b      	ldr	r3, [r7, #4]
 80290d6:	681b      	ldr	r3, [r3, #0]
 80290d8:	3314      	adds	r3, #20
 80290da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80290de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80290e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80290e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80290e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80290ea:	e841 2300 	strex	r3, r2, [r1]
 80290ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80290f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80290f2:	2b00      	cmp	r3, #0
 80290f4:	d1e1      	bne.n	80290ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80290f6:	687b      	ldr	r3, [r7, #4]
 80290f8:	681b      	ldr	r3, [r3, #0]
 80290fa:	3314      	adds	r3, #20
 80290fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80290fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029100:	e853 3f00 	ldrex	r3, [r3]
 8029104:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802910c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029110:	687b      	ldr	r3, [r7, #4]
 8029112:	681b      	ldr	r3, [r3, #0]
 8029114:	3314      	adds	r3, #20
 8029116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 802911a:	66fa      	str	r2, [r7, #108]	; 0x6c
 802911c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802911e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029120:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029122:	e841 2300 	strex	r3, r2, [r1]
 8029126:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802912a:	2b00      	cmp	r3, #0
 802912c:	d1e3      	bne.n	80290f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 802912e:	687b      	ldr	r3, [r7, #4]
 8029130:	2220      	movs	r2, #32
 8029132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029136:	687b      	ldr	r3, [r7, #4]
 8029138:	2200      	movs	r2, #0
 802913a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	681b      	ldr	r3, [r3, #0]
 8029140:	330c      	adds	r3, #12
 8029142:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029146:	e853 3f00 	ldrex	r3, [r3]
 802914a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 802914c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802914e:	f023 0310 	bic.w	r3, r3, #16
 8029152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029156:	687b      	ldr	r3, [r7, #4]
 8029158:	681b      	ldr	r3, [r3, #0]
 802915a:	330c      	adds	r3, #12
 802915c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029160:	65ba      	str	r2, [r7, #88]	; 0x58
 8029162:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029164:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029168:	e841 2300 	strex	r3, r2, [r1]
 802916c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 802916e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029170:	2b00      	cmp	r3, #0
 8029172:	d1e3      	bne.n	802913c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029174:	687b      	ldr	r3, [r7, #4]
 8029176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029178:	4618      	mov	r0, r3
 802917a:	f7fa f9ef 	bl	802355c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 802917e:	687b      	ldr	r3, [r7, #4]
 8029180:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029186:	b29b      	uxth	r3, r3
 8029188:	1ad3      	subs	r3, r2, r3
 802918a:	b29b      	uxth	r3, r3
 802918c:	4619      	mov	r1, r3
 802918e:	6878      	ldr	r0, [r7, #4]
 8029190:	f000 f8b6 	bl	8029300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029194:	e099      	b.n	80292ca <HAL_UART_IRQHandler+0x50e>
 8029196:	bf00      	nop
 8029198:	08029537 	.word	0x08029537
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 802919c:	687b      	ldr	r3, [r7, #4]
 802919e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80291a4:	b29b      	uxth	r3, r3
 80291a6:	1ad3      	subs	r3, r2, r3
 80291a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80291ac:	687b      	ldr	r3, [r7, #4]
 80291ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80291b0:	b29b      	uxth	r3, r3
 80291b2:	2b00      	cmp	r3, #0
 80291b4:	f000 808b 	beq.w	80292ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80291b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80291bc:	2b00      	cmp	r3, #0
 80291be:	f000 8086 	beq.w	80292ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80291c2:	687b      	ldr	r3, [r7, #4]
 80291c4:	681b      	ldr	r3, [r3, #0]
 80291c6:	330c      	adds	r3, #12
 80291c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80291ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80291cc:	e853 3f00 	ldrex	r3, [r3]
 80291d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80291d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80291d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80291d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	681b      	ldr	r3, [r3, #0]
 80291e0:	330c      	adds	r3, #12
 80291e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80291e6:	647a      	str	r2, [r7, #68]	; 0x44
 80291e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80291ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80291ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80291ee:	e841 2300 	strex	r3, r2, [r1]
 80291f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80291f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80291f6:	2b00      	cmp	r3, #0
 80291f8:	d1e3      	bne.n	80291c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80291fa:	687b      	ldr	r3, [r7, #4]
 80291fc:	681b      	ldr	r3, [r3, #0]
 80291fe:	3314      	adds	r3, #20
 8029200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029204:	e853 3f00 	ldrex	r3, [r3]
 8029208:	623b      	str	r3, [r7, #32]
   return(result);
 802920a:	6a3b      	ldr	r3, [r7, #32]
 802920c:	f023 0301 	bic.w	r3, r3, #1
 8029210:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029214:	687b      	ldr	r3, [r7, #4]
 8029216:	681b      	ldr	r3, [r3, #0]
 8029218:	3314      	adds	r3, #20
 802921a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 802921e:	633a      	str	r2, [r7, #48]	; 0x30
 8029220:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029226:	e841 2300 	strex	r3, r2, [r1]
 802922a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 802922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802922e:	2b00      	cmp	r3, #0
 8029230:	d1e3      	bne.n	80291fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029232:	687b      	ldr	r3, [r7, #4]
 8029234:	2220      	movs	r2, #32
 8029236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	2200      	movs	r2, #0
 802923e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029240:	687b      	ldr	r3, [r7, #4]
 8029242:	681b      	ldr	r3, [r3, #0]
 8029244:	330c      	adds	r3, #12
 8029246:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029248:	693b      	ldr	r3, [r7, #16]
 802924a:	e853 3f00 	ldrex	r3, [r3]
 802924e:	60fb      	str	r3, [r7, #12]
   return(result);
 8029250:	68fb      	ldr	r3, [r7, #12]
 8029252:	f023 0310 	bic.w	r3, r3, #16
 8029256:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802925a:	687b      	ldr	r3, [r7, #4]
 802925c:	681b      	ldr	r3, [r3, #0]
 802925e:	330c      	adds	r3, #12
 8029260:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029264:	61fa      	str	r2, [r7, #28]
 8029266:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029268:	69b9      	ldr	r1, [r7, #24]
 802926a:	69fa      	ldr	r2, [r7, #28]
 802926c:	e841 2300 	strex	r3, r2, [r1]
 8029270:	617b      	str	r3, [r7, #20]
   return(result);
 8029272:	697b      	ldr	r3, [r7, #20]
 8029274:	2b00      	cmp	r3, #0
 8029276:	d1e3      	bne.n	8029240 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 802927c:	4619      	mov	r1, r3
 802927e:	6878      	ldr	r0, [r7, #4]
 8029280:	f000 f83e 	bl	8029300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029284:	e023      	b.n	80292ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802928e:	2b00      	cmp	r3, #0
 8029290:	d009      	beq.n	80292a6 <HAL_UART_IRQHandler+0x4ea>
 8029292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802929a:	2b00      	cmp	r3, #0
 802929c:	d003      	beq.n	80292a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 802929e:	6878      	ldr	r0, [r7, #4]
 80292a0:	f000 f95d 	bl	802955e <UART_Transmit_IT>
    return;
 80292a4:	e014      	b.n	80292d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80292a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80292aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80292ae:	2b00      	cmp	r3, #0
 80292b0:	d00e      	beq.n	80292d0 <HAL_UART_IRQHandler+0x514>
 80292b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80292b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80292ba:	2b00      	cmp	r3, #0
 80292bc:	d008      	beq.n	80292d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80292be:	6878      	ldr	r0, [r7, #4]
 80292c0:	f000 f99d 	bl	80295fe <UART_EndTransmit_IT>
    return;
 80292c4:	e004      	b.n	80292d0 <HAL_UART_IRQHandler+0x514>
    return;
 80292c6:	bf00      	nop
 80292c8:	e002      	b.n	80292d0 <HAL_UART_IRQHandler+0x514>
      return;
 80292ca:	bf00      	nop
 80292cc:	e000      	b.n	80292d0 <HAL_UART_IRQHandler+0x514>
      return;
 80292ce:	bf00      	nop
  }
}
 80292d0:	37e8      	adds	r7, #232	; 0xe8
 80292d2:	46bd      	mov	sp, r7
 80292d4:	bd80      	pop	{r7, pc}
 80292d6:	bf00      	nop

080292d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80292d8:	b480      	push	{r7}
 80292da:	b083      	sub	sp, #12
 80292dc:	af00      	add	r7, sp, #0
 80292de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80292e0:	bf00      	nop
 80292e2:	370c      	adds	r7, #12
 80292e4:	46bd      	mov	sp, r7
 80292e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292ea:	4770      	bx	lr

080292ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80292ec:	b480      	push	{r7}
 80292ee:	b083      	sub	sp, #12
 80292f0:	af00      	add	r7, sp, #0
 80292f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80292f4:	bf00      	nop
 80292f6:	370c      	adds	r7, #12
 80292f8:	46bd      	mov	sp, r7
 80292fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292fe:	4770      	bx	lr

08029300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029300:	b480      	push	{r7}
 8029302:	b083      	sub	sp, #12
 8029304:	af00      	add	r7, sp, #0
 8029306:	6078      	str	r0, [r7, #4]
 8029308:	460b      	mov	r3, r1
 802930a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802930c:	bf00      	nop
 802930e:	370c      	adds	r7, #12
 8029310:	46bd      	mov	sp, r7
 8029312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029316:	4770      	bx	lr

08029318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029318:	b580      	push	{r7, lr}
 802931a:	b090      	sub	sp, #64	; 0x40
 802931c:	af00      	add	r7, sp, #0
 802931e:	60f8      	str	r0, [r7, #12]
 8029320:	60b9      	str	r1, [r7, #8]
 8029322:	603b      	str	r3, [r7, #0]
 8029324:	4613      	mov	r3, r2
 8029326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029328:	e050      	b.n	80293cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802932a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029330:	d04c      	beq.n	80293cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029334:	2b00      	cmp	r3, #0
 8029336:	d007      	beq.n	8029348 <UART_WaitOnFlagUntilTimeout+0x30>
 8029338:	f7f9 fed6 	bl	80230e8 <HAL_GetTick>
 802933c:	4602      	mov	r2, r0
 802933e:	683b      	ldr	r3, [r7, #0]
 8029340:	1ad3      	subs	r3, r2, r3
 8029342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029344:	429a      	cmp	r2, r3
 8029346:	d241      	bcs.n	80293cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029348:	68fb      	ldr	r3, [r7, #12]
 802934a:	681b      	ldr	r3, [r3, #0]
 802934c:	330c      	adds	r3, #12
 802934e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029352:	e853 3f00 	ldrex	r3, [r3]
 8029356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802935a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802935e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029360:	68fb      	ldr	r3, [r7, #12]
 8029362:	681b      	ldr	r3, [r3, #0]
 8029364:	330c      	adds	r3, #12
 8029366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029368:	637a      	str	r2, [r7, #52]	; 0x34
 802936a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802936c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802936e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029370:	e841 2300 	strex	r3, r2, [r1]
 8029374:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029378:	2b00      	cmp	r3, #0
 802937a:	d1e5      	bne.n	8029348 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802937c:	68fb      	ldr	r3, [r7, #12]
 802937e:	681b      	ldr	r3, [r3, #0]
 8029380:	3314      	adds	r3, #20
 8029382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029384:	697b      	ldr	r3, [r7, #20]
 8029386:	e853 3f00 	ldrex	r3, [r3]
 802938a:	613b      	str	r3, [r7, #16]
   return(result);
 802938c:	693b      	ldr	r3, [r7, #16]
 802938e:	f023 0301 	bic.w	r3, r3, #1
 8029392:	63bb      	str	r3, [r7, #56]	; 0x38
 8029394:	68fb      	ldr	r3, [r7, #12]
 8029396:	681b      	ldr	r3, [r3, #0]
 8029398:	3314      	adds	r3, #20
 802939a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802939c:	623a      	str	r2, [r7, #32]
 802939e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80293a0:	69f9      	ldr	r1, [r7, #28]
 80293a2:	6a3a      	ldr	r2, [r7, #32]
 80293a4:	e841 2300 	strex	r3, r2, [r1]
 80293a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80293aa:	69bb      	ldr	r3, [r7, #24]
 80293ac:	2b00      	cmp	r3, #0
 80293ae:	d1e5      	bne.n	802937c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80293b0:	68fb      	ldr	r3, [r7, #12]
 80293b2:	2220      	movs	r2, #32
 80293b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80293b8:	68fb      	ldr	r3, [r7, #12]
 80293ba:	2220      	movs	r2, #32
 80293bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80293c0:	68fb      	ldr	r3, [r7, #12]
 80293c2:	2200      	movs	r2, #0
 80293c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80293c8:	2303      	movs	r3, #3
 80293ca:	e00f      	b.n	80293ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80293cc:	68fb      	ldr	r3, [r7, #12]
 80293ce:	681b      	ldr	r3, [r3, #0]
 80293d0:	681a      	ldr	r2, [r3, #0]
 80293d2:	68bb      	ldr	r3, [r7, #8]
 80293d4:	4013      	ands	r3, r2
 80293d6:	68ba      	ldr	r2, [r7, #8]
 80293d8:	429a      	cmp	r2, r3
 80293da:	bf0c      	ite	eq
 80293dc:	2301      	moveq	r3, #1
 80293de:	2300      	movne	r3, #0
 80293e0:	b2db      	uxtb	r3, r3
 80293e2:	461a      	mov	r2, r3
 80293e4:	79fb      	ldrb	r3, [r7, #7]
 80293e6:	429a      	cmp	r2, r3
 80293e8:	d09f      	beq.n	802932a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80293ea:	2300      	movs	r3, #0
}
 80293ec:	4618      	mov	r0, r3
 80293ee:	3740      	adds	r7, #64	; 0x40
 80293f0:	46bd      	mov	sp, r7
 80293f2:	bd80      	pop	{r7, pc}

080293f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80293f4:	b480      	push	{r7}
 80293f6:	b085      	sub	sp, #20
 80293f8:	af00      	add	r7, sp, #0
 80293fa:	60f8      	str	r0, [r7, #12]
 80293fc:	60b9      	str	r1, [r7, #8]
 80293fe:	4613      	mov	r3, r2
 8029400:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029402:	68fb      	ldr	r3, [r7, #12]
 8029404:	68ba      	ldr	r2, [r7, #8]
 8029406:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029408:	68fb      	ldr	r3, [r7, #12]
 802940a:	88fa      	ldrh	r2, [r7, #6]
 802940c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 802940e:	68fb      	ldr	r3, [r7, #12]
 8029410:	88fa      	ldrh	r2, [r7, #6]
 8029412:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	2200      	movs	r2, #0
 8029418:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802941a:	68fb      	ldr	r3, [r7, #12]
 802941c:	2222      	movs	r2, #34	; 0x22
 802941e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029422:	68fb      	ldr	r3, [r7, #12]
 8029424:	2200      	movs	r2, #0
 8029426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802942a:	68fb      	ldr	r3, [r7, #12]
 802942c:	691b      	ldr	r3, [r3, #16]
 802942e:	2b00      	cmp	r3, #0
 8029430:	d007      	beq.n	8029442 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8029432:	68fb      	ldr	r3, [r7, #12]
 8029434:	681b      	ldr	r3, [r3, #0]
 8029436:	68da      	ldr	r2, [r3, #12]
 8029438:	68fb      	ldr	r3, [r7, #12]
 802943a:	681b      	ldr	r3, [r3, #0]
 802943c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029440:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8029442:	68fb      	ldr	r3, [r7, #12]
 8029444:	681b      	ldr	r3, [r3, #0]
 8029446:	695a      	ldr	r2, [r3, #20]
 8029448:	68fb      	ldr	r3, [r7, #12]
 802944a:	681b      	ldr	r3, [r3, #0]
 802944c:	f042 0201 	orr.w	r2, r2, #1
 8029450:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8029452:	68fb      	ldr	r3, [r7, #12]
 8029454:	681b      	ldr	r3, [r3, #0]
 8029456:	68da      	ldr	r2, [r3, #12]
 8029458:	68fb      	ldr	r3, [r7, #12]
 802945a:	681b      	ldr	r3, [r3, #0]
 802945c:	f042 0220 	orr.w	r2, r2, #32
 8029460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8029462:	2300      	movs	r3, #0
}
 8029464:	4618      	mov	r0, r3
 8029466:	3714      	adds	r7, #20
 8029468:	46bd      	mov	sp, r7
 802946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802946e:	4770      	bx	lr

08029470 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8029470:	b480      	push	{r7}
 8029472:	b095      	sub	sp, #84	; 0x54
 8029474:	af00      	add	r7, sp, #0
 8029476:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029478:	687b      	ldr	r3, [r7, #4]
 802947a:	681b      	ldr	r3, [r3, #0]
 802947c:	330c      	adds	r3, #12
 802947e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029482:	e853 3f00 	ldrex	r3, [r3]
 8029486:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8029488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802948a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802948e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029490:	687b      	ldr	r3, [r7, #4]
 8029492:	681b      	ldr	r3, [r3, #0]
 8029494:	330c      	adds	r3, #12
 8029496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029498:	643a      	str	r2, [r7, #64]	; 0x40
 802949a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802949c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802949e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80294a0:	e841 2300 	strex	r3, r2, [r1]
 80294a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80294a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80294a8:	2b00      	cmp	r3, #0
 80294aa:	d1e5      	bne.n	8029478 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80294ac:	687b      	ldr	r3, [r7, #4]
 80294ae:	681b      	ldr	r3, [r3, #0]
 80294b0:	3314      	adds	r3, #20
 80294b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294b4:	6a3b      	ldr	r3, [r7, #32]
 80294b6:	e853 3f00 	ldrex	r3, [r3]
 80294ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80294bc:	69fb      	ldr	r3, [r7, #28]
 80294be:	f023 0301 	bic.w	r3, r3, #1
 80294c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	681b      	ldr	r3, [r3, #0]
 80294c8:	3314      	adds	r3, #20
 80294ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80294cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80294ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80294d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80294d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80294d4:	e841 2300 	strex	r3, r2, [r1]
 80294d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80294da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80294dc:	2b00      	cmp	r3, #0
 80294de:	d1e5      	bne.n	80294ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80294e0:	687b      	ldr	r3, [r7, #4]
 80294e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80294e4:	2b01      	cmp	r3, #1
 80294e6:	d119      	bne.n	802951c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80294e8:	687b      	ldr	r3, [r7, #4]
 80294ea:	681b      	ldr	r3, [r3, #0]
 80294ec:	330c      	adds	r3, #12
 80294ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80294f0:	68fb      	ldr	r3, [r7, #12]
 80294f2:	e853 3f00 	ldrex	r3, [r3]
 80294f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80294f8:	68bb      	ldr	r3, [r7, #8]
 80294fa:	f023 0310 	bic.w	r3, r3, #16
 80294fe:	647b      	str	r3, [r7, #68]	; 0x44
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	681b      	ldr	r3, [r3, #0]
 8029504:	330c      	adds	r3, #12
 8029506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029508:	61ba      	str	r2, [r7, #24]
 802950a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802950c:	6979      	ldr	r1, [r7, #20]
 802950e:	69ba      	ldr	r2, [r7, #24]
 8029510:	e841 2300 	strex	r3, r2, [r1]
 8029514:	613b      	str	r3, [r7, #16]
   return(result);
 8029516:	693b      	ldr	r3, [r7, #16]
 8029518:	2b00      	cmp	r3, #0
 802951a:	d1e5      	bne.n	80294e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802951c:	687b      	ldr	r3, [r7, #4]
 802951e:	2220      	movs	r2, #32
 8029520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	2200      	movs	r2, #0
 8029528:	631a      	str	r2, [r3, #48]	; 0x30
}
 802952a:	bf00      	nop
 802952c:	3754      	adds	r7, #84	; 0x54
 802952e:	46bd      	mov	sp, r7
 8029530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029534:	4770      	bx	lr

08029536 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8029536:	b580      	push	{r7, lr}
 8029538:	b084      	sub	sp, #16
 802953a:	af00      	add	r7, sp, #0
 802953c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802953e:	687b      	ldr	r3, [r7, #4]
 8029540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8029544:	68fb      	ldr	r3, [r7, #12]
 8029546:	2200      	movs	r2, #0
 8029548:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802954a:	68fb      	ldr	r3, [r7, #12]
 802954c:	2200      	movs	r2, #0
 802954e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8029550:	68f8      	ldr	r0, [r7, #12]
 8029552:	f7ff fecb 	bl	80292ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8029556:	bf00      	nop
 8029558:	3710      	adds	r7, #16
 802955a:	46bd      	mov	sp, r7
 802955c:	bd80      	pop	{r7, pc}

0802955e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802955e:	b480      	push	{r7}
 8029560:	b085      	sub	sp, #20
 8029562:	af00      	add	r7, sp, #0
 8029564:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8029566:	687b      	ldr	r3, [r7, #4]
 8029568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802956c:	b2db      	uxtb	r3, r3
 802956e:	2b21      	cmp	r3, #33	; 0x21
 8029570:	d13e      	bne.n	80295f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029572:	687b      	ldr	r3, [r7, #4]
 8029574:	689b      	ldr	r3, [r3, #8]
 8029576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802957a:	d114      	bne.n	80295a6 <UART_Transmit_IT+0x48>
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	691b      	ldr	r3, [r3, #16]
 8029580:	2b00      	cmp	r3, #0
 8029582:	d110      	bne.n	80295a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8029584:	687b      	ldr	r3, [r7, #4]
 8029586:	6a1b      	ldr	r3, [r3, #32]
 8029588:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802958a:	68fb      	ldr	r3, [r7, #12]
 802958c:	881b      	ldrh	r3, [r3, #0]
 802958e:	461a      	mov	r2, r3
 8029590:	687b      	ldr	r3, [r7, #4]
 8029592:	681b      	ldr	r3, [r3, #0]
 8029594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8029598:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	6a1b      	ldr	r3, [r3, #32]
 802959e:	1c9a      	adds	r2, r3, #2
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	621a      	str	r2, [r3, #32]
 80295a4:	e008      	b.n	80295b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80295a6:	687b      	ldr	r3, [r7, #4]
 80295a8:	6a1b      	ldr	r3, [r3, #32]
 80295aa:	1c59      	adds	r1, r3, #1
 80295ac:	687a      	ldr	r2, [r7, #4]
 80295ae:	6211      	str	r1, [r2, #32]
 80295b0:	781a      	ldrb	r2, [r3, #0]
 80295b2:	687b      	ldr	r3, [r7, #4]
 80295b4:	681b      	ldr	r3, [r3, #0]
 80295b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80295b8:	687b      	ldr	r3, [r7, #4]
 80295ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80295bc:	b29b      	uxth	r3, r3
 80295be:	3b01      	subs	r3, #1
 80295c0:	b29b      	uxth	r3, r3
 80295c2:	687a      	ldr	r2, [r7, #4]
 80295c4:	4619      	mov	r1, r3
 80295c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d10f      	bne.n	80295ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	681b      	ldr	r3, [r3, #0]
 80295d0:	68da      	ldr	r2, [r3, #12]
 80295d2:	687b      	ldr	r3, [r7, #4]
 80295d4:	681b      	ldr	r3, [r3, #0]
 80295d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80295da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	681b      	ldr	r3, [r3, #0]
 80295e0:	68da      	ldr	r2, [r3, #12]
 80295e2:	687b      	ldr	r3, [r7, #4]
 80295e4:	681b      	ldr	r3, [r3, #0]
 80295e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80295ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80295ec:	2300      	movs	r3, #0
 80295ee:	e000      	b.n	80295f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80295f0:	2302      	movs	r3, #2
  }
}
 80295f2:	4618      	mov	r0, r3
 80295f4:	3714      	adds	r7, #20
 80295f6:	46bd      	mov	sp, r7
 80295f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295fc:	4770      	bx	lr

080295fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80295fe:	b580      	push	{r7, lr}
 8029600:	b082      	sub	sp, #8
 8029602:	af00      	add	r7, sp, #0
 8029604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8029606:	687b      	ldr	r3, [r7, #4]
 8029608:	681b      	ldr	r3, [r3, #0]
 802960a:	68da      	ldr	r2, [r3, #12]
 802960c:	687b      	ldr	r3, [r7, #4]
 802960e:	681b      	ldr	r3, [r3, #0]
 8029610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029614:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8029616:	687b      	ldr	r3, [r7, #4]
 8029618:	2220      	movs	r2, #32
 802961a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802961e:	6878      	ldr	r0, [r7, #4]
 8029620:	f7ff fe5a 	bl	80292d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8029624:	2300      	movs	r3, #0
}
 8029626:	4618      	mov	r0, r3
 8029628:	3708      	adds	r7, #8
 802962a:	46bd      	mov	sp, r7
 802962c:	bd80      	pop	{r7, pc}

0802962e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802962e:	b580      	push	{r7, lr}
 8029630:	b08c      	sub	sp, #48	; 0x30
 8029632:	af00      	add	r7, sp, #0
 8029634:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8029636:	687b      	ldr	r3, [r7, #4]
 8029638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802963c:	b2db      	uxtb	r3, r3
 802963e:	2b22      	cmp	r3, #34	; 0x22
 8029640:	f040 80ab 	bne.w	802979a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029644:	687b      	ldr	r3, [r7, #4]
 8029646:	689b      	ldr	r3, [r3, #8]
 8029648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802964c:	d117      	bne.n	802967e <UART_Receive_IT+0x50>
 802964e:	687b      	ldr	r3, [r7, #4]
 8029650:	691b      	ldr	r3, [r3, #16]
 8029652:	2b00      	cmp	r3, #0
 8029654:	d113      	bne.n	802967e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8029656:	2300      	movs	r3, #0
 8029658:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802965e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	681b      	ldr	r3, [r3, #0]
 8029664:	685b      	ldr	r3, [r3, #4]
 8029666:	b29b      	uxth	r3, r3
 8029668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802966c:	b29a      	uxth	r2, r3
 802966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8029672:	687b      	ldr	r3, [r7, #4]
 8029674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029676:	1c9a      	adds	r2, r3, #2
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	629a      	str	r2, [r3, #40]	; 0x28
 802967c:	e026      	b.n	80296cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029682:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8029684:	2300      	movs	r3, #0
 8029686:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	689b      	ldr	r3, [r3, #8]
 802968c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029690:	d007      	beq.n	80296a2 <UART_Receive_IT+0x74>
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	689b      	ldr	r3, [r3, #8]
 8029696:	2b00      	cmp	r3, #0
 8029698:	d10a      	bne.n	80296b0 <UART_Receive_IT+0x82>
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	691b      	ldr	r3, [r3, #16]
 802969e:	2b00      	cmp	r3, #0
 80296a0:	d106      	bne.n	80296b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80296a2:	687b      	ldr	r3, [r7, #4]
 80296a4:	681b      	ldr	r3, [r3, #0]
 80296a6:	685b      	ldr	r3, [r3, #4]
 80296a8:	b2da      	uxtb	r2, r3
 80296aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80296ac:	701a      	strb	r2, [r3, #0]
 80296ae:	e008      	b.n	80296c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80296b0:	687b      	ldr	r3, [r7, #4]
 80296b2:	681b      	ldr	r3, [r3, #0]
 80296b4:	685b      	ldr	r3, [r3, #4]
 80296b6:	b2db      	uxtb	r3, r3
 80296b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80296bc:	b2da      	uxtb	r2, r3
 80296be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80296c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296c6:	1c5a      	adds	r2, r3, #1
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80296d0:	b29b      	uxth	r3, r3
 80296d2:	3b01      	subs	r3, #1
 80296d4:	b29b      	uxth	r3, r3
 80296d6:	687a      	ldr	r2, [r7, #4]
 80296d8:	4619      	mov	r1, r3
 80296da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80296dc:	2b00      	cmp	r3, #0
 80296de:	d15a      	bne.n	8029796 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	681b      	ldr	r3, [r3, #0]
 80296e4:	68da      	ldr	r2, [r3, #12]
 80296e6:	687b      	ldr	r3, [r7, #4]
 80296e8:	681b      	ldr	r3, [r3, #0]
 80296ea:	f022 0220 	bic.w	r2, r2, #32
 80296ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80296f0:	687b      	ldr	r3, [r7, #4]
 80296f2:	681b      	ldr	r3, [r3, #0]
 80296f4:	68da      	ldr	r2, [r3, #12]
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80296fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	681b      	ldr	r3, [r3, #0]
 8029704:	695a      	ldr	r2, [r3, #20]
 8029706:	687b      	ldr	r3, [r7, #4]
 8029708:	681b      	ldr	r3, [r3, #0]
 802970a:	f022 0201 	bic.w	r2, r2, #1
 802970e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	2220      	movs	r2, #32
 8029714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802971c:	2b01      	cmp	r3, #1
 802971e:	d135      	bne.n	802978c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029720:	687b      	ldr	r3, [r7, #4]
 8029722:	2200      	movs	r2, #0
 8029724:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029726:	687b      	ldr	r3, [r7, #4]
 8029728:	681b      	ldr	r3, [r3, #0]
 802972a:	330c      	adds	r3, #12
 802972c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802972e:	697b      	ldr	r3, [r7, #20]
 8029730:	e853 3f00 	ldrex	r3, [r3]
 8029734:	613b      	str	r3, [r7, #16]
   return(result);
 8029736:	693b      	ldr	r3, [r7, #16]
 8029738:	f023 0310 	bic.w	r3, r3, #16
 802973c:	627b      	str	r3, [r7, #36]	; 0x24
 802973e:	687b      	ldr	r3, [r7, #4]
 8029740:	681b      	ldr	r3, [r3, #0]
 8029742:	330c      	adds	r3, #12
 8029744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029746:	623a      	str	r2, [r7, #32]
 8029748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802974a:	69f9      	ldr	r1, [r7, #28]
 802974c:	6a3a      	ldr	r2, [r7, #32]
 802974e:	e841 2300 	strex	r3, r2, [r1]
 8029752:	61bb      	str	r3, [r7, #24]
   return(result);
 8029754:	69bb      	ldr	r3, [r7, #24]
 8029756:	2b00      	cmp	r3, #0
 8029758:	d1e5      	bne.n	8029726 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	681b      	ldr	r3, [r3, #0]
 802975e:	681b      	ldr	r3, [r3, #0]
 8029760:	f003 0310 	and.w	r3, r3, #16
 8029764:	2b10      	cmp	r3, #16
 8029766:	d10a      	bne.n	802977e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029768:	2300      	movs	r3, #0
 802976a:	60fb      	str	r3, [r7, #12]
 802976c:	687b      	ldr	r3, [r7, #4]
 802976e:	681b      	ldr	r3, [r3, #0]
 8029770:	681b      	ldr	r3, [r3, #0]
 8029772:	60fb      	str	r3, [r7, #12]
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	681b      	ldr	r3, [r3, #0]
 8029778:	685b      	ldr	r3, [r3, #4]
 802977a:	60fb      	str	r3, [r7, #12]
 802977c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802977e:	687b      	ldr	r3, [r7, #4]
 8029780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029782:	4619      	mov	r1, r3
 8029784:	6878      	ldr	r0, [r7, #4]
 8029786:	f7ff fdbb 	bl	8029300 <HAL_UARTEx_RxEventCallback>
 802978a:	e002      	b.n	8029792 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802978c:	6878      	ldr	r0, [r7, #4]
 802978e:	f7f7 fb9b 	bl	8020ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8029792:	2300      	movs	r3, #0
 8029794:	e002      	b.n	802979c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8029796:	2300      	movs	r3, #0
 8029798:	e000      	b.n	802979c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802979a:	2302      	movs	r3, #2
  }
}
 802979c:	4618      	mov	r0, r3
 802979e:	3730      	adds	r7, #48	; 0x30
 80297a0:	46bd      	mov	sp, r7
 80297a2:	bd80      	pop	{r7, pc}

080297a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80297a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80297a8:	b0c0      	sub	sp, #256	; 0x100
 80297aa:	af00      	add	r7, sp, #0
 80297ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80297b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297b4:	681b      	ldr	r3, [r3, #0]
 80297b6:	691b      	ldr	r3, [r3, #16]
 80297b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80297bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297c0:	68d9      	ldr	r1, [r3, #12]
 80297c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297c6:	681a      	ldr	r2, [r3, #0]
 80297c8:	ea40 0301 	orr.w	r3, r0, r1
 80297cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80297ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297d2:	689a      	ldr	r2, [r3, #8]
 80297d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297d8:	691b      	ldr	r3, [r3, #16]
 80297da:	431a      	orrs	r2, r3
 80297dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297e0:	695b      	ldr	r3, [r3, #20]
 80297e2:	431a      	orrs	r2, r3
 80297e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297e8:	69db      	ldr	r3, [r3, #28]
 80297ea:	4313      	orrs	r3, r2
 80297ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80297f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80297f4:	681b      	ldr	r3, [r3, #0]
 80297f6:	68db      	ldr	r3, [r3, #12]
 80297f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80297fc:	f021 010c 	bic.w	r1, r1, #12
 8029800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029804:	681a      	ldr	r2, [r3, #0]
 8029806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802980a:	430b      	orrs	r3, r1
 802980c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029812:	681b      	ldr	r3, [r3, #0]
 8029814:	695b      	ldr	r3, [r3, #20]
 8029816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802981a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802981e:	6999      	ldr	r1, [r3, #24]
 8029820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029824:	681a      	ldr	r2, [r3, #0]
 8029826:	ea40 0301 	orr.w	r3, r0, r1
 802982a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802982c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029830:	681a      	ldr	r2, [r3, #0]
 8029832:	4b8f      	ldr	r3, [pc, #572]	; (8029a70 <UART_SetConfig+0x2cc>)
 8029834:	429a      	cmp	r2, r3
 8029836:	d005      	beq.n	8029844 <UART_SetConfig+0xa0>
 8029838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802983c:	681a      	ldr	r2, [r3, #0]
 802983e:	4b8d      	ldr	r3, [pc, #564]	; (8029a74 <UART_SetConfig+0x2d0>)
 8029840:	429a      	cmp	r2, r3
 8029842:	d104      	bne.n	802984e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8029844:	f7fd fcb2 	bl	80271ac <HAL_RCC_GetPCLK2Freq>
 8029848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802984c:	e003      	b.n	8029856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802984e:	f7fd fc99 	bl	8027184 <HAL_RCC_GetPCLK1Freq>
 8029852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8029856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802985a:	69db      	ldr	r3, [r3, #28]
 802985c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029860:	f040 810c 	bne.w	8029a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8029864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029868:	2200      	movs	r2, #0
 802986a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802986e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8029876:	4622      	mov	r2, r4
 8029878:	462b      	mov	r3, r5
 802987a:	1891      	adds	r1, r2, r2
 802987c:	65b9      	str	r1, [r7, #88]	; 0x58
 802987e:	415b      	adcs	r3, r3
 8029880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8029886:	4621      	mov	r1, r4
 8029888:	eb12 0801 	adds.w	r8, r2, r1
 802988c:	4629      	mov	r1, r5
 802988e:	eb43 0901 	adc.w	r9, r3, r1
 8029892:	f04f 0200 	mov.w	r2, #0
 8029896:	f04f 0300 	mov.w	r3, #0
 802989a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802989e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80298a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80298a6:	4690      	mov	r8, r2
 80298a8:	4699      	mov	r9, r3
 80298aa:	4623      	mov	r3, r4
 80298ac:	eb18 0303 	adds.w	r3, r8, r3
 80298b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80298b4:	462b      	mov	r3, r5
 80298b6:	eb49 0303 	adc.w	r3, r9, r3
 80298ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80298be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80298c2:	685b      	ldr	r3, [r3, #4]
 80298c4:	2200      	movs	r2, #0
 80298c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80298ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80298ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80298d2:	460b      	mov	r3, r1
 80298d4:	18db      	adds	r3, r3, r3
 80298d6:	653b      	str	r3, [r7, #80]	; 0x50
 80298d8:	4613      	mov	r3, r2
 80298da:	eb42 0303 	adc.w	r3, r2, r3
 80298de:	657b      	str	r3, [r7, #84]	; 0x54
 80298e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80298e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80298e8:	f7f6 fcd2 	bl	8020290 <__aeabi_uldivmod>
 80298ec:	4602      	mov	r2, r0
 80298ee:	460b      	mov	r3, r1
 80298f0:	4b61      	ldr	r3, [pc, #388]	; (8029a78 <UART_SetConfig+0x2d4>)
 80298f2:	fba3 2302 	umull	r2, r3, r3, r2
 80298f6:	095b      	lsrs	r3, r3, #5
 80298f8:	011c      	lsls	r4, r3, #4
 80298fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80298fe:	2200      	movs	r2, #0
 8029900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8029908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802990c:	4642      	mov	r2, r8
 802990e:	464b      	mov	r3, r9
 8029910:	1891      	adds	r1, r2, r2
 8029912:	64b9      	str	r1, [r7, #72]	; 0x48
 8029914:	415b      	adcs	r3, r3
 8029916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802991c:	4641      	mov	r1, r8
 802991e:	eb12 0a01 	adds.w	sl, r2, r1
 8029922:	4649      	mov	r1, r9
 8029924:	eb43 0b01 	adc.w	fp, r3, r1
 8029928:	f04f 0200 	mov.w	r2, #0
 802992c:	f04f 0300 	mov.w	r3, #0
 8029930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8029934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802993c:	4692      	mov	sl, r2
 802993e:	469b      	mov	fp, r3
 8029940:	4643      	mov	r3, r8
 8029942:	eb1a 0303 	adds.w	r3, sl, r3
 8029946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802994a:	464b      	mov	r3, r9
 802994c:	eb4b 0303 	adc.w	r3, fp, r3
 8029950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8029954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029958:	685b      	ldr	r3, [r3, #4]
 802995a:	2200      	movs	r2, #0
 802995c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8029964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8029968:	460b      	mov	r3, r1
 802996a:	18db      	adds	r3, r3, r3
 802996c:	643b      	str	r3, [r7, #64]	; 0x40
 802996e:	4613      	mov	r3, r2
 8029970:	eb42 0303 	adc.w	r3, r2, r3
 8029974:	647b      	str	r3, [r7, #68]	; 0x44
 8029976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802997a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802997e:	f7f6 fc87 	bl	8020290 <__aeabi_uldivmod>
 8029982:	4602      	mov	r2, r0
 8029984:	460b      	mov	r3, r1
 8029986:	4611      	mov	r1, r2
 8029988:	4b3b      	ldr	r3, [pc, #236]	; (8029a78 <UART_SetConfig+0x2d4>)
 802998a:	fba3 2301 	umull	r2, r3, r3, r1
 802998e:	095b      	lsrs	r3, r3, #5
 8029990:	2264      	movs	r2, #100	; 0x64
 8029992:	fb02 f303 	mul.w	r3, r2, r3
 8029996:	1acb      	subs	r3, r1, r3
 8029998:	00db      	lsls	r3, r3, #3
 802999a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802999e:	4b36      	ldr	r3, [pc, #216]	; (8029a78 <UART_SetConfig+0x2d4>)
 80299a0:	fba3 2302 	umull	r2, r3, r3, r2
 80299a4:	095b      	lsrs	r3, r3, #5
 80299a6:	005b      	lsls	r3, r3, #1
 80299a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80299ac:	441c      	add	r4, r3
 80299ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80299b2:	2200      	movs	r2, #0
 80299b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80299b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80299bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80299c0:	4642      	mov	r2, r8
 80299c2:	464b      	mov	r3, r9
 80299c4:	1891      	adds	r1, r2, r2
 80299c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80299c8:	415b      	adcs	r3, r3
 80299ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80299cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80299d0:	4641      	mov	r1, r8
 80299d2:	1851      	adds	r1, r2, r1
 80299d4:	6339      	str	r1, [r7, #48]	; 0x30
 80299d6:	4649      	mov	r1, r9
 80299d8:	414b      	adcs	r3, r1
 80299da:	637b      	str	r3, [r7, #52]	; 0x34
 80299dc:	f04f 0200 	mov.w	r2, #0
 80299e0:	f04f 0300 	mov.w	r3, #0
 80299e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80299e8:	4659      	mov	r1, fp
 80299ea:	00cb      	lsls	r3, r1, #3
 80299ec:	4651      	mov	r1, sl
 80299ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80299f2:	4651      	mov	r1, sl
 80299f4:	00ca      	lsls	r2, r1, #3
 80299f6:	4610      	mov	r0, r2
 80299f8:	4619      	mov	r1, r3
 80299fa:	4603      	mov	r3, r0
 80299fc:	4642      	mov	r2, r8
 80299fe:	189b      	adds	r3, r3, r2
 8029a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029a04:	464b      	mov	r3, r9
 8029a06:	460a      	mov	r2, r1
 8029a08:	eb42 0303 	adc.w	r3, r2, r3
 8029a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a14:	685b      	ldr	r3, [r3, #4]
 8029a16:	2200      	movs	r2, #0
 8029a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8029a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8029a24:	460b      	mov	r3, r1
 8029a26:	18db      	adds	r3, r3, r3
 8029a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8029a2a:	4613      	mov	r3, r2
 8029a2c:	eb42 0303 	adc.w	r3, r2, r3
 8029a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8029a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8029a3a:	f7f6 fc29 	bl	8020290 <__aeabi_uldivmod>
 8029a3e:	4602      	mov	r2, r0
 8029a40:	460b      	mov	r3, r1
 8029a42:	4b0d      	ldr	r3, [pc, #52]	; (8029a78 <UART_SetConfig+0x2d4>)
 8029a44:	fba3 1302 	umull	r1, r3, r3, r2
 8029a48:	095b      	lsrs	r3, r3, #5
 8029a4a:	2164      	movs	r1, #100	; 0x64
 8029a4c:	fb01 f303 	mul.w	r3, r1, r3
 8029a50:	1ad3      	subs	r3, r2, r3
 8029a52:	00db      	lsls	r3, r3, #3
 8029a54:	3332      	adds	r3, #50	; 0x32
 8029a56:	4a08      	ldr	r2, [pc, #32]	; (8029a78 <UART_SetConfig+0x2d4>)
 8029a58:	fba2 2303 	umull	r2, r3, r2, r3
 8029a5c:	095b      	lsrs	r3, r3, #5
 8029a5e:	f003 0207 	and.w	r2, r3, #7
 8029a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	4422      	add	r2, r4
 8029a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8029a6c:	e105      	b.n	8029c7a <UART_SetConfig+0x4d6>
 8029a6e:	bf00      	nop
 8029a70:	40011000 	.word	0x40011000
 8029a74:	40011400 	.word	0x40011400
 8029a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029a80:	2200      	movs	r2, #0
 8029a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8029a86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8029a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8029a8e:	4642      	mov	r2, r8
 8029a90:	464b      	mov	r3, r9
 8029a92:	1891      	adds	r1, r2, r2
 8029a94:	6239      	str	r1, [r7, #32]
 8029a96:	415b      	adcs	r3, r3
 8029a98:	627b      	str	r3, [r7, #36]	; 0x24
 8029a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029a9e:	4641      	mov	r1, r8
 8029aa0:	1854      	adds	r4, r2, r1
 8029aa2:	4649      	mov	r1, r9
 8029aa4:	eb43 0501 	adc.w	r5, r3, r1
 8029aa8:	f04f 0200 	mov.w	r2, #0
 8029aac:	f04f 0300 	mov.w	r3, #0
 8029ab0:	00eb      	lsls	r3, r5, #3
 8029ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029ab6:	00e2      	lsls	r2, r4, #3
 8029ab8:	4614      	mov	r4, r2
 8029aba:	461d      	mov	r5, r3
 8029abc:	4643      	mov	r3, r8
 8029abe:	18e3      	adds	r3, r4, r3
 8029ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8029ac4:	464b      	mov	r3, r9
 8029ac6:	eb45 0303 	adc.w	r3, r5, r3
 8029aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029ad2:	685b      	ldr	r3, [r3, #4]
 8029ad4:	2200      	movs	r2, #0
 8029ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029ade:	f04f 0200 	mov.w	r2, #0
 8029ae2:	f04f 0300 	mov.w	r3, #0
 8029ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8029aea:	4629      	mov	r1, r5
 8029aec:	008b      	lsls	r3, r1, #2
 8029aee:	4621      	mov	r1, r4
 8029af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029af4:	4621      	mov	r1, r4
 8029af6:	008a      	lsls	r2, r1, #2
 8029af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8029afc:	f7f6 fbc8 	bl	8020290 <__aeabi_uldivmod>
 8029b00:	4602      	mov	r2, r0
 8029b02:	460b      	mov	r3, r1
 8029b04:	4b60      	ldr	r3, [pc, #384]	; (8029c88 <UART_SetConfig+0x4e4>)
 8029b06:	fba3 2302 	umull	r2, r3, r3, r2
 8029b0a:	095b      	lsrs	r3, r3, #5
 8029b0c:	011c      	lsls	r4, r3, #4
 8029b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029b12:	2200      	movs	r2, #0
 8029b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8029b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8029b20:	4642      	mov	r2, r8
 8029b22:	464b      	mov	r3, r9
 8029b24:	1891      	adds	r1, r2, r2
 8029b26:	61b9      	str	r1, [r7, #24]
 8029b28:	415b      	adcs	r3, r3
 8029b2a:	61fb      	str	r3, [r7, #28]
 8029b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029b30:	4641      	mov	r1, r8
 8029b32:	1851      	adds	r1, r2, r1
 8029b34:	6139      	str	r1, [r7, #16]
 8029b36:	4649      	mov	r1, r9
 8029b38:	414b      	adcs	r3, r1
 8029b3a:	617b      	str	r3, [r7, #20]
 8029b3c:	f04f 0200 	mov.w	r2, #0
 8029b40:	f04f 0300 	mov.w	r3, #0
 8029b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029b48:	4659      	mov	r1, fp
 8029b4a:	00cb      	lsls	r3, r1, #3
 8029b4c:	4651      	mov	r1, sl
 8029b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029b52:	4651      	mov	r1, sl
 8029b54:	00ca      	lsls	r2, r1, #3
 8029b56:	4610      	mov	r0, r2
 8029b58:	4619      	mov	r1, r3
 8029b5a:	4603      	mov	r3, r0
 8029b5c:	4642      	mov	r2, r8
 8029b5e:	189b      	adds	r3, r3, r2
 8029b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029b64:	464b      	mov	r3, r9
 8029b66:	460a      	mov	r2, r1
 8029b68:	eb42 0303 	adc.w	r3, r2, r3
 8029b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b74:	685b      	ldr	r3, [r3, #4]
 8029b76:	2200      	movs	r2, #0
 8029b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8029b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8029b7c:	f04f 0200 	mov.w	r2, #0
 8029b80:	f04f 0300 	mov.w	r3, #0
 8029b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8029b88:	4649      	mov	r1, r9
 8029b8a:	008b      	lsls	r3, r1, #2
 8029b8c:	4641      	mov	r1, r8
 8029b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029b92:	4641      	mov	r1, r8
 8029b94:	008a      	lsls	r2, r1, #2
 8029b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8029b9a:	f7f6 fb79 	bl	8020290 <__aeabi_uldivmod>
 8029b9e:	4602      	mov	r2, r0
 8029ba0:	460b      	mov	r3, r1
 8029ba2:	4b39      	ldr	r3, [pc, #228]	; (8029c88 <UART_SetConfig+0x4e4>)
 8029ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8029ba8:	095b      	lsrs	r3, r3, #5
 8029baa:	2164      	movs	r1, #100	; 0x64
 8029bac:	fb01 f303 	mul.w	r3, r1, r3
 8029bb0:	1ad3      	subs	r3, r2, r3
 8029bb2:	011b      	lsls	r3, r3, #4
 8029bb4:	3332      	adds	r3, #50	; 0x32
 8029bb6:	4a34      	ldr	r2, [pc, #208]	; (8029c88 <UART_SetConfig+0x4e4>)
 8029bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8029bbc:	095b      	lsrs	r3, r3, #5
 8029bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029bc2:	441c      	add	r4, r3
 8029bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029bc8:	2200      	movs	r2, #0
 8029bca:	673b      	str	r3, [r7, #112]	; 0x70
 8029bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8029bce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8029bd2:	4642      	mov	r2, r8
 8029bd4:	464b      	mov	r3, r9
 8029bd6:	1891      	adds	r1, r2, r2
 8029bd8:	60b9      	str	r1, [r7, #8]
 8029bda:	415b      	adcs	r3, r3
 8029bdc:	60fb      	str	r3, [r7, #12]
 8029bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029be2:	4641      	mov	r1, r8
 8029be4:	1851      	adds	r1, r2, r1
 8029be6:	6039      	str	r1, [r7, #0]
 8029be8:	4649      	mov	r1, r9
 8029bea:	414b      	adcs	r3, r1
 8029bec:	607b      	str	r3, [r7, #4]
 8029bee:	f04f 0200 	mov.w	r2, #0
 8029bf2:	f04f 0300 	mov.w	r3, #0
 8029bf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029bfa:	4659      	mov	r1, fp
 8029bfc:	00cb      	lsls	r3, r1, #3
 8029bfe:	4651      	mov	r1, sl
 8029c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029c04:	4651      	mov	r1, sl
 8029c06:	00ca      	lsls	r2, r1, #3
 8029c08:	4610      	mov	r0, r2
 8029c0a:	4619      	mov	r1, r3
 8029c0c:	4603      	mov	r3, r0
 8029c0e:	4642      	mov	r2, r8
 8029c10:	189b      	adds	r3, r3, r2
 8029c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8029c14:	464b      	mov	r3, r9
 8029c16:	460a      	mov	r2, r1
 8029c18:	eb42 0303 	adc.w	r3, r2, r3
 8029c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029c22:	685b      	ldr	r3, [r3, #4]
 8029c24:	2200      	movs	r2, #0
 8029c26:	663b      	str	r3, [r7, #96]	; 0x60
 8029c28:	667a      	str	r2, [r7, #100]	; 0x64
 8029c2a:	f04f 0200 	mov.w	r2, #0
 8029c2e:	f04f 0300 	mov.w	r3, #0
 8029c32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8029c36:	4649      	mov	r1, r9
 8029c38:	008b      	lsls	r3, r1, #2
 8029c3a:	4641      	mov	r1, r8
 8029c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029c40:	4641      	mov	r1, r8
 8029c42:	008a      	lsls	r2, r1, #2
 8029c44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8029c48:	f7f6 fb22 	bl	8020290 <__aeabi_uldivmod>
 8029c4c:	4602      	mov	r2, r0
 8029c4e:	460b      	mov	r3, r1
 8029c50:	4b0d      	ldr	r3, [pc, #52]	; (8029c88 <UART_SetConfig+0x4e4>)
 8029c52:	fba3 1302 	umull	r1, r3, r3, r2
 8029c56:	095b      	lsrs	r3, r3, #5
 8029c58:	2164      	movs	r1, #100	; 0x64
 8029c5a:	fb01 f303 	mul.w	r3, r1, r3
 8029c5e:	1ad3      	subs	r3, r2, r3
 8029c60:	011b      	lsls	r3, r3, #4
 8029c62:	3332      	adds	r3, #50	; 0x32
 8029c64:	4a08      	ldr	r2, [pc, #32]	; (8029c88 <UART_SetConfig+0x4e4>)
 8029c66:	fba2 2303 	umull	r2, r3, r2, r3
 8029c6a:	095b      	lsrs	r3, r3, #5
 8029c6c:	f003 020f 	and.w	r2, r3, #15
 8029c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029c74:	681b      	ldr	r3, [r3, #0]
 8029c76:	4422      	add	r2, r4
 8029c78:	609a      	str	r2, [r3, #8]
}
 8029c7a:	bf00      	nop
 8029c7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8029c80:	46bd      	mov	sp, r7
 8029c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029c86:	bf00      	nop
 8029c88:	51eb851f 	.word	0x51eb851f

08029c8c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029c8c:	b480      	push	{r7}
 8029c8e:	b083      	sub	sp, #12
 8029c90:	af00      	add	r7, sp, #0
 8029c92:	6078      	str	r0, [r7, #4]
 8029c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8029c96:	683b      	ldr	r3, [r7, #0]
 8029c98:	681b      	ldr	r3, [r3, #0]
 8029c9a:	2b00      	cmp	r3, #0
 8029c9c:	d123      	bne.n	8029ce6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029c9e:	687b      	ldr	r3, [r7, #4]
 8029ca0:	681b      	ldr	r3, [r3, #0]
 8029ca2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029caa:	683a      	ldr	r2, [r7, #0]
 8029cac:	6851      	ldr	r1, [r2, #4]
 8029cae:	683a      	ldr	r2, [r7, #0]
 8029cb0:	6892      	ldr	r2, [r2, #8]
 8029cb2:	4311      	orrs	r1, r2
 8029cb4:	683a      	ldr	r2, [r7, #0]
 8029cb6:	68d2      	ldr	r2, [r2, #12]
 8029cb8:	4311      	orrs	r1, r2
 8029cba:	683a      	ldr	r2, [r7, #0]
 8029cbc:	6912      	ldr	r2, [r2, #16]
 8029cbe:	4311      	orrs	r1, r2
 8029cc0:	683a      	ldr	r2, [r7, #0]
 8029cc2:	6952      	ldr	r2, [r2, #20]
 8029cc4:	4311      	orrs	r1, r2
 8029cc6:	683a      	ldr	r2, [r7, #0]
 8029cc8:	6992      	ldr	r2, [r2, #24]
 8029cca:	4311      	orrs	r1, r2
 8029ccc:	683a      	ldr	r2, [r7, #0]
 8029cce:	69d2      	ldr	r2, [r2, #28]
 8029cd0:	4311      	orrs	r1, r2
 8029cd2:	683a      	ldr	r2, [r7, #0]
 8029cd4:	6a12      	ldr	r2, [r2, #32]
 8029cd6:	4311      	orrs	r1, r2
 8029cd8:	683a      	ldr	r2, [r7, #0]
 8029cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8029cdc:	430a      	orrs	r2, r1
 8029cde:	431a      	orrs	r2, r3
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	601a      	str	r2, [r3, #0]
 8029ce4:	e028      	b.n	8029d38 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029ce6:	687b      	ldr	r3, [r7, #4]
 8029ce8:	681b      	ldr	r3, [r3, #0]
 8029cea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8029cee:	683b      	ldr	r3, [r7, #0]
 8029cf0:	69d9      	ldr	r1, [r3, #28]
 8029cf2:	683b      	ldr	r3, [r7, #0]
 8029cf4:	6a1b      	ldr	r3, [r3, #32]
 8029cf6:	4319      	orrs	r1, r3
 8029cf8:	683b      	ldr	r3, [r7, #0]
 8029cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029cfc:	430b      	orrs	r3, r1
 8029cfe:	431a      	orrs	r2, r3
 8029d00:	687b      	ldr	r3, [r7, #4]
 8029d02:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8029d04:	687b      	ldr	r3, [r7, #4]
 8029d06:	685b      	ldr	r3, [r3, #4]
 8029d08:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029d0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029d10:	683a      	ldr	r2, [r7, #0]
 8029d12:	6851      	ldr	r1, [r2, #4]
 8029d14:	683a      	ldr	r2, [r7, #0]
 8029d16:	6892      	ldr	r2, [r2, #8]
 8029d18:	4311      	orrs	r1, r2
 8029d1a:	683a      	ldr	r2, [r7, #0]
 8029d1c:	68d2      	ldr	r2, [r2, #12]
 8029d1e:	4311      	orrs	r1, r2
 8029d20:	683a      	ldr	r2, [r7, #0]
 8029d22:	6912      	ldr	r2, [r2, #16]
 8029d24:	4311      	orrs	r1, r2
 8029d26:	683a      	ldr	r2, [r7, #0]
 8029d28:	6952      	ldr	r2, [r2, #20]
 8029d2a:	4311      	orrs	r1, r2
 8029d2c:	683a      	ldr	r2, [r7, #0]
 8029d2e:	6992      	ldr	r2, [r2, #24]
 8029d30:	430a      	orrs	r2, r1
 8029d32:	431a      	orrs	r2, r3
 8029d34:	687b      	ldr	r3, [r7, #4]
 8029d36:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8029d38:	2300      	movs	r3, #0
}
 8029d3a:	4618      	mov	r0, r3
 8029d3c:	370c      	adds	r7, #12
 8029d3e:	46bd      	mov	sp, r7
 8029d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d44:	4770      	bx	lr

08029d46 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8029d46:	b480      	push	{r7}
 8029d48:	b085      	sub	sp, #20
 8029d4a:	af00      	add	r7, sp, #0
 8029d4c:	60f8      	str	r0, [r7, #12]
 8029d4e:	60b9      	str	r1, [r7, #8]
 8029d50:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	2b00      	cmp	r3, #0
 8029d56:	d128      	bne.n	8029daa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029d58:	68fb      	ldr	r3, [r7, #12]
 8029d5a:	689b      	ldr	r3, [r3, #8]
 8029d5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029d60:	68bb      	ldr	r3, [r7, #8]
 8029d62:	681b      	ldr	r3, [r3, #0]
 8029d64:	1e59      	subs	r1, r3, #1
 8029d66:	68bb      	ldr	r3, [r7, #8]
 8029d68:	685b      	ldr	r3, [r3, #4]
 8029d6a:	3b01      	subs	r3, #1
 8029d6c:	011b      	lsls	r3, r3, #4
 8029d6e:	4319      	orrs	r1, r3
 8029d70:	68bb      	ldr	r3, [r7, #8]
 8029d72:	689b      	ldr	r3, [r3, #8]
 8029d74:	3b01      	subs	r3, #1
 8029d76:	021b      	lsls	r3, r3, #8
 8029d78:	4319      	orrs	r1, r3
 8029d7a:	68bb      	ldr	r3, [r7, #8]
 8029d7c:	68db      	ldr	r3, [r3, #12]
 8029d7e:	3b01      	subs	r3, #1
 8029d80:	031b      	lsls	r3, r3, #12
 8029d82:	4319      	orrs	r1, r3
 8029d84:	68bb      	ldr	r3, [r7, #8]
 8029d86:	691b      	ldr	r3, [r3, #16]
 8029d88:	3b01      	subs	r3, #1
 8029d8a:	041b      	lsls	r3, r3, #16
 8029d8c:	4319      	orrs	r1, r3
 8029d8e:	68bb      	ldr	r3, [r7, #8]
 8029d90:	695b      	ldr	r3, [r3, #20]
 8029d92:	3b01      	subs	r3, #1
 8029d94:	051b      	lsls	r3, r3, #20
 8029d96:	4319      	orrs	r1, r3
 8029d98:	68bb      	ldr	r3, [r7, #8]
 8029d9a:	699b      	ldr	r3, [r3, #24]
 8029d9c:	3b01      	subs	r3, #1
 8029d9e:	061b      	lsls	r3, r3, #24
 8029da0:	430b      	orrs	r3, r1
 8029da2:	431a      	orrs	r2, r3
 8029da4:	68fb      	ldr	r3, [r7, #12]
 8029da6:	609a      	str	r2, [r3, #8]
 8029da8:	e02f      	b.n	8029e0a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029daa:	68fb      	ldr	r3, [r7, #12]
 8029dac:	689b      	ldr	r3, [r3, #8]
 8029dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029db6:	68ba      	ldr	r2, [r7, #8]
 8029db8:	68d2      	ldr	r2, [r2, #12]
 8029dba:	3a01      	subs	r2, #1
 8029dbc:	0311      	lsls	r1, r2, #12
 8029dbe:	68ba      	ldr	r2, [r7, #8]
 8029dc0:	6952      	ldr	r2, [r2, #20]
 8029dc2:	3a01      	subs	r2, #1
 8029dc4:	0512      	lsls	r2, r2, #20
 8029dc6:	430a      	orrs	r2, r1
 8029dc8:	431a      	orrs	r2, r3
 8029dca:	68fb      	ldr	r3, [r7, #12]
 8029dcc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8029dce:	68fb      	ldr	r3, [r7, #12]
 8029dd0:	68db      	ldr	r3, [r3, #12]
 8029dd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029dd6:	68bb      	ldr	r3, [r7, #8]
 8029dd8:	681b      	ldr	r3, [r3, #0]
 8029dda:	1e59      	subs	r1, r3, #1
 8029ddc:	68bb      	ldr	r3, [r7, #8]
 8029dde:	685b      	ldr	r3, [r3, #4]
 8029de0:	3b01      	subs	r3, #1
 8029de2:	011b      	lsls	r3, r3, #4
 8029de4:	4319      	orrs	r1, r3
 8029de6:	68bb      	ldr	r3, [r7, #8]
 8029de8:	689b      	ldr	r3, [r3, #8]
 8029dea:	3b01      	subs	r3, #1
 8029dec:	021b      	lsls	r3, r3, #8
 8029dee:	4319      	orrs	r1, r3
 8029df0:	68bb      	ldr	r3, [r7, #8]
 8029df2:	691b      	ldr	r3, [r3, #16]
 8029df4:	3b01      	subs	r3, #1
 8029df6:	041b      	lsls	r3, r3, #16
 8029df8:	4319      	orrs	r1, r3
 8029dfa:	68bb      	ldr	r3, [r7, #8]
 8029dfc:	699b      	ldr	r3, [r3, #24]
 8029dfe:	3b01      	subs	r3, #1
 8029e00:	061b      	lsls	r3, r3, #24
 8029e02:	430b      	orrs	r3, r1
 8029e04:	431a      	orrs	r2, r3
 8029e06:	68fb      	ldr	r3, [r7, #12]
 8029e08:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8029e0a:	2300      	movs	r3, #0
}
 8029e0c:	4618      	mov	r0, r3
 8029e0e:	3714      	adds	r7, #20
 8029e10:	46bd      	mov	sp, r7
 8029e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e16:	4770      	bx	lr

08029e18 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8029e18:	b580      	push	{r7, lr}
 8029e1a:	b086      	sub	sp, #24
 8029e1c:	af00      	add	r7, sp, #0
 8029e1e:	60f8      	str	r0, [r7, #12]
 8029e20:	60b9      	str	r1, [r7, #8]
 8029e22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8029e24:	2300      	movs	r3, #0
 8029e26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8029e28:	68fb      	ldr	r3, [r7, #12]
 8029e2a:	691b      	ldr	r3, [r3, #16]
 8029e2c:	0d9b      	lsrs	r3, r3, #22
 8029e2e:	059b      	lsls	r3, r3, #22
 8029e30:	68ba      	ldr	r2, [r7, #8]
 8029e32:	6811      	ldr	r1, [r2, #0]
 8029e34:	68ba      	ldr	r2, [r7, #8]
 8029e36:	6852      	ldr	r2, [r2, #4]
 8029e38:	4311      	orrs	r1, r2
 8029e3a:	68ba      	ldr	r2, [r7, #8]
 8029e3c:	6892      	ldr	r2, [r2, #8]
 8029e3e:	3a01      	subs	r2, #1
 8029e40:	0152      	lsls	r2, r2, #5
 8029e42:	4311      	orrs	r1, r2
 8029e44:	68ba      	ldr	r2, [r7, #8]
 8029e46:	68d2      	ldr	r2, [r2, #12]
 8029e48:	0252      	lsls	r2, r2, #9
 8029e4a:	430a      	orrs	r2, r1
 8029e4c:	431a      	orrs	r2, r3
 8029e4e:	68fb      	ldr	r3, [r7, #12]
 8029e50:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8029e52:	f7f9 f949 	bl	80230e8 <HAL_GetTick>
 8029e56:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029e58:	e010      	b.n	8029e7c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029e5a:	687b      	ldr	r3, [r7, #4]
 8029e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029e60:	d00c      	beq.n	8029e7c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8029e62:	687b      	ldr	r3, [r7, #4]
 8029e64:	2b00      	cmp	r3, #0
 8029e66:	d007      	beq.n	8029e78 <FMC_SDRAM_SendCommand+0x60>
 8029e68:	f7f9 f93e 	bl	80230e8 <HAL_GetTick>
 8029e6c:	4602      	mov	r2, r0
 8029e6e:	697b      	ldr	r3, [r7, #20]
 8029e70:	1ad3      	subs	r3, r2, r3
 8029e72:	687a      	ldr	r2, [r7, #4]
 8029e74:	429a      	cmp	r2, r3
 8029e76:	d201      	bcs.n	8029e7c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8029e78:	2303      	movs	r3, #3
 8029e7a:	e006      	b.n	8029e8a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8029e7c:	68fb      	ldr	r3, [r7, #12]
 8029e7e:	699b      	ldr	r3, [r3, #24]
 8029e80:	f003 0320 	and.w	r3, r3, #32
 8029e84:	2b20      	cmp	r3, #32
 8029e86:	d0e8      	beq.n	8029e5a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8029e88:	2300      	movs	r3, #0
}
 8029e8a:	4618      	mov	r0, r3
 8029e8c:	3718      	adds	r7, #24
 8029e8e:	46bd      	mov	sp, r7
 8029e90:	bd80      	pop	{r7, pc}

08029e92 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8029e92:	b480      	push	{r7}
 8029e94:	b083      	sub	sp, #12
 8029e96:	af00      	add	r7, sp, #0
 8029e98:	6078      	str	r0, [r7, #4]
 8029e9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8029e9c:	687b      	ldr	r3, [r7, #4]
 8029e9e:	695b      	ldr	r3, [r3, #20]
 8029ea0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8029ea4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8029ea8:	683a      	ldr	r2, [r7, #0]
 8029eaa:	0052      	lsls	r2, r2, #1
 8029eac:	431a      	orrs	r2, r3
 8029eae:	687b      	ldr	r3, [r7, #4]
 8029eb0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8029eb2:	2300      	movs	r3, #0
}
 8029eb4:	4618      	mov	r0, r3
 8029eb6:	370c      	adds	r7, #12
 8029eb8:	46bd      	mov	sp, r7
 8029eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ebe:	4770      	bx	lr

08029ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8029ec0:	b084      	sub	sp, #16
 8029ec2:	b580      	push	{r7, lr}
 8029ec4:	b084      	sub	sp, #16
 8029ec6:	af00      	add	r7, sp, #0
 8029ec8:	6078      	str	r0, [r7, #4]
 8029eca:	f107 001c 	add.w	r0, r7, #28
 8029ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8029ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029ed4:	2b01      	cmp	r3, #1
 8029ed6:	d122      	bne.n	8029f1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029ed8:	687b      	ldr	r3, [r7, #4]
 8029eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029edc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029ee0:	687b      	ldr	r3, [r7, #4]
 8029ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8029ee4:	687b      	ldr	r3, [r7, #4]
 8029ee6:	68db      	ldr	r3, [r3, #12]
 8029ee8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8029eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029ef0:	687a      	ldr	r2, [r7, #4]
 8029ef2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	68db      	ldr	r3, [r3, #12]
 8029ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8029f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029f02:	2b01      	cmp	r3, #1
 8029f04:	d105      	bne.n	8029f12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8029f06:	687b      	ldr	r3, [r7, #4]
 8029f08:	68db      	ldr	r3, [r3, #12]
 8029f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8029f0e:	687b      	ldr	r3, [r7, #4]
 8029f10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029f12:	6878      	ldr	r0, [r7, #4]
 8029f14:	f000 f9c0 	bl	802a298 <USB_CoreReset>
 8029f18:	4603      	mov	r3, r0
 8029f1a:	73fb      	strb	r3, [r7, #15]
 8029f1c:	e01a      	b.n	8029f54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8029f1e:	687b      	ldr	r3, [r7, #4]
 8029f20:	68db      	ldr	r3, [r3, #12]
 8029f22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8029f2a:	6878      	ldr	r0, [r7, #4]
 8029f2c:	f000 f9b4 	bl	802a298 <USB_CoreReset>
 8029f30:	4603      	mov	r3, r0
 8029f32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8029f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029f36:	2b00      	cmp	r3, #0
 8029f38:	d106      	bne.n	8029f48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8029f3a:	687b      	ldr	r3, [r7, #4]
 8029f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8029f42:	687b      	ldr	r3, [r7, #4]
 8029f44:	639a      	str	r2, [r3, #56]	; 0x38
 8029f46:	e005      	b.n	8029f54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8029f50:	687b      	ldr	r3, [r7, #4]
 8029f52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8029f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029f56:	2b01      	cmp	r3, #1
 8029f58:	d10b      	bne.n	8029f72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8029f5a:	687b      	ldr	r3, [r7, #4]
 8029f5c:	689b      	ldr	r3, [r3, #8]
 8029f5e:	f043 0206 	orr.w	r2, r3, #6
 8029f62:	687b      	ldr	r3, [r7, #4]
 8029f64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	689b      	ldr	r3, [r3, #8]
 8029f6a:	f043 0220 	orr.w	r2, r3, #32
 8029f6e:	687b      	ldr	r3, [r7, #4]
 8029f70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8029f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8029f74:	4618      	mov	r0, r3
 8029f76:	3710      	adds	r7, #16
 8029f78:	46bd      	mov	sp, r7
 8029f7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8029f7e:	b004      	add	sp, #16
 8029f80:	4770      	bx	lr

08029f82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029f82:	b480      	push	{r7}
 8029f84:	b083      	sub	sp, #12
 8029f86:	af00      	add	r7, sp, #0
 8029f88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	689b      	ldr	r3, [r3, #8]
 8029f8e:	f043 0201 	orr.w	r2, r3, #1
 8029f92:	687b      	ldr	r3, [r7, #4]
 8029f94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029f96:	2300      	movs	r3, #0
}
 8029f98:	4618      	mov	r0, r3
 8029f9a:	370c      	adds	r7, #12
 8029f9c:	46bd      	mov	sp, r7
 8029f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fa2:	4770      	bx	lr

08029fa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8029fa4:	b480      	push	{r7}
 8029fa6:	b083      	sub	sp, #12
 8029fa8:	af00      	add	r7, sp, #0
 8029faa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	689b      	ldr	r3, [r3, #8]
 8029fb0:	f023 0201 	bic.w	r2, r3, #1
 8029fb4:	687b      	ldr	r3, [r7, #4]
 8029fb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8029fb8:	2300      	movs	r3, #0
}
 8029fba:	4618      	mov	r0, r3
 8029fbc:	370c      	adds	r7, #12
 8029fbe:	46bd      	mov	sp, r7
 8029fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fc4:	4770      	bx	lr

08029fc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8029fc6:	b580      	push	{r7, lr}
 8029fc8:	b084      	sub	sp, #16
 8029fca:	af00      	add	r7, sp, #0
 8029fcc:	6078      	str	r0, [r7, #4]
 8029fce:	460b      	mov	r3, r1
 8029fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8029fd2:	2300      	movs	r3, #0
 8029fd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8029fd6:	687b      	ldr	r3, [r7, #4]
 8029fd8:	68db      	ldr	r3, [r3, #12]
 8029fda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8029fde:	687b      	ldr	r3, [r7, #4]
 8029fe0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8029fe2:	78fb      	ldrb	r3, [r7, #3]
 8029fe4:	2b01      	cmp	r3, #1
 8029fe6:	d115      	bne.n	802a014 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	68db      	ldr	r3, [r3, #12]
 8029fec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8029ff0:	687b      	ldr	r3, [r7, #4]
 8029ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8029ff4:	2001      	movs	r0, #1
 8029ff6:	f7f9 f883 	bl	8023100 <HAL_Delay>
      ms++;
 8029ffa:	68fb      	ldr	r3, [r7, #12]
 8029ffc:	3301      	adds	r3, #1
 8029ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802a000:	6878      	ldr	r0, [r7, #4]
 802a002:	f000 f93a 	bl	802a27a <USB_GetMode>
 802a006:	4603      	mov	r3, r0
 802a008:	2b01      	cmp	r3, #1
 802a00a:	d01e      	beq.n	802a04a <USB_SetCurrentMode+0x84>
 802a00c:	68fb      	ldr	r3, [r7, #12]
 802a00e:	2b31      	cmp	r3, #49	; 0x31
 802a010:	d9f0      	bls.n	8029ff4 <USB_SetCurrentMode+0x2e>
 802a012:	e01a      	b.n	802a04a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802a014:	78fb      	ldrb	r3, [r7, #3]
 802a016:	2b00      	cmp	r3, #0
 802a018:	d115      	bne.n	802a046 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	68db      	ldr	r3, [r3, #12]
 802a01e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802a022:	687b      	ldr	r3, [r7, #4]
 802a024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a026:	2001      	movs	r0, #1
 802a028:	f7f9 f86a 	bl	8023100 <HAL_Delay>
      ms++;
 802a02c:	68fb      	ldr	r3, [r7, #12]
 802a02e:	3301      	adds	r3, #1
 802a030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802a032:	6878      	ldr	r0, [r7, #4]
 802a034:	f000 f921 	bl	802a27a <USB_GetMode>
 802a038:	4603      	mov	r3, r0
 802a03a:	2b00      	cmp	r3, #0
 802a03c:	d005      	beq.n	802a04a <USB_SetCurrentMode+0x84>
 802a03e:	68fb      	ldr	r3, [r7, #12]
 802a040:	2b31      	cmp	r3, #49	; 0x31
 802a042:	d9f0      	bls.n	802a026 <USB_SetCurrentMode+0x60>
 802a044:	e001      	b.n	802a04a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802a046:	2301      	movs	r3, #1
 802a048:	e005      	b.n	802a056 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802a04a:	68fb      	ldr	r3, [r7, #12]
 802a04c:	2b32      	cmp	r3, #50	; 0x32
 802a04e:	d101      	bne.n	802a054 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802a050:	2301      	movs	r3, #1
 802a052:	e000      	b.n	802a056 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802a054:	2300      	movs	r3, #0
}
 802a056:	4618      	mov	r0, r3
 802a058:	3710      	adds	r7, #16
 802a05a:	46bd      	mov	sp, r7
 802a05c:	bd80      	pop	{r7, pc}
	...

0802a060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a060:	b480      	push	{r7}
 802a062:	b085      	sub	sp, #20
 802a064:	af00      	add	r7, sp, #0
 802a066:	6078      	str	r0, [r7, #4]
 802a068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802a06a:	2300      	movs	r3, #0
 802a06c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a06e:	68fb      	ldr	r3, [r7, #12]
 802a070:	3301      	adds	r3, #1
 802a072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	4a13      	ldr	r2, [pc, #76]	; (802a0c4 <USB_FlushTxFifo+0x64>)
 802a078:	4293      	cmp	r3, r2
 802a07a:	d901      	bls.n	802a080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802a07c:	2303      	movs	r3, #3
 802a07e:	e01b      	b.n	802a0b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a080:	687b      	ldr	r3, [r7, #4]
 802a082:	691b      	ldr	r3, [r3, #16]
 802a084:	2b00      	cmp	r3, #0
 802a086:	daf2      	bge.n	802a06e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802a088:	2300      	movs	r3, #0
 802a08a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a08c:	683b      	ldr	r3, [r7, #0]
 802a08e:	019b      	lsls	r3, r3, #6
 802a090:	f043 0220 	orr.w	r2, r3, #32
 802a094:	687b      	ldr	r3, [r7, #4]
 802a096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a098:	68fb      	ldr	r3, [r7, #12]
 802a09a:	3301      	adds	r3, #1
 802a09c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a09e:	68fb      	ldr	r3, [r7, #12]
 802a0a0:	4a08      	ldr	r2, [pc, #32]	; (802a0c4 <USB_FlushTxFifo+0x64>)
 802a0a2:	4293      	cmp	r3, r2
 802a0a4:	d901      	bls.n	802a0aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802a0a6:	2303      	movs	r3, #3
 802a0a8:	e006      	b.n	802a0b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a0aa:	687b      	ldr	r3, [r7, #4]
 802a0ac:	691b      	ldr	r3, [r3, #16]
 802a0ae:	f003 0320 	and.w	r3, r3, #32
 802a0b2:	2b20      	cmp	r3, #32
 802a0b4:	d0f0      	beq.n	802a098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802a0b6:	2300      	movs	r3, #0
}
 802a0b8:	4618      	mov	r0, r3
 802a0ba:	3714      	adds	r7, #20
 802a0bc:	46bd      	mov	sp, r7
 802a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0c2:	4770      	bx	lr
 802a0c4:	00030d40 	.word	0x00030d40

0802a0c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a0c8:	b480      	push	{r7}
 802a0ca:	b085      	sub	sp, #20
 802a0cc:	af00      	add	r7, sp, #0
 802a0ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a0d0:	2300      	movs	r3, #0
 802a0d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a0d4:	68fb      	ldr	r3, [r7, #12]
 802a0d6:	3301      	adds	r3, #1
 802a0d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	4a11      	ldr	r2, [pc, #68]	; (802a124 <USB_FlushRxFifo+0x5c>)
 802a0de:	4293      	cmp	r3, r2
 802a0e0:	d901      	bls.n	802a0e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802a0e2:	2303      	movs	r3, #3
 802a0e4:	e018      	b.n	802a118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a0e6:	687b      	ldr	r3, [r7, #4]
 802a0e8:	691b      	ldr	r3, [r3, #16]
 802a0ea:	2b00      	cmp	r3, #0
 802a0ec:	daf2      	bge.n	802a0d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802a0ee:	2300      	movs	r3, #0
 802a0f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	2210      	movs	r2, #16
 802a0f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a0f8:	68fb      	ldr	r3, [r7, #12]
 802a0fa:	3301      	adds	r3, #1
 802a0fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a0fe:	68fb      	ldr	r3, [r7, #12]
 802a100:	4a08      	ldr	r2, [pc, #32]	; (802a124 <USB_FlushRxFifo+0x5c>)
 802a102:	4293      	cmp	r3, r2
 802a104:	d901      	bls.n	802a10a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802a106:	2303      	movs	r3, #3
 802a108:	e006      	b.n	802a118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a10a:	687b      	ldr	r3, [r7, #4]
 802a10c:	691b      	ldr	r3, [r3, #16]
 802a10e:	f003 0310 	and.w	r3, r3, #16
 802a112:	2b10      	cmp	r3, #16
 802a114:	d0f0      	beq.n	802a0f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802a116:	2300      	movs	r3, #0
}
 802a118:	4618      	mov	r0, r3
 802a11a:	3714      	adds	r7, #20
 802a11c:	46bd      	mov	sp, r7
 802a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a122:	4770      	bx	lr
 802a124:	00030d40 	.word	0x00030d40

0802a128 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802a128:	b480      	push	{r7}
 802a12a:	b089      	sub	sp, #36	; 0x24
 802a12c:	af00      	add	r7, sp, #0
 802a12e:	60f8      	str	r0, [r7, #12]
 802a130:	60b9      	str	r1, [r7, #8]
 802a132:	4611      	mov	r1, r2
 802a134:	461a      	mov	r2, r3
 802a136:	460b      	mov	r3, r1
 802a138:	71fb      	strb	r3, [r7, #7]
 802a13a:	4613      	mov	r3, r2
 802a13c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a13e:	68fb      	ldr	r3, [r7, #12]
 802a140:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802a142:	68bb      	ldr	r3, [r7, #8]
 802a144:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802a146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a14a:	2b00      	cmp	r3, #0
 802a14c:	d123      	bne.n	802a196 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802a14e:	88bb      	ldrh	r3, [r7, #4]
 802a150:	3303      	adds	r3, #3
 802a152:	089b      	lsrs	r3, r3, #2
 802a154:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802a156:	2300      	movs	r3, #0
 802a158:	61bb      	str	r3, [r7, #24]
 802a15a:	e018      	b.n	802a18e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802a15c:	79fb      	ldrb	r3, [r7, #7]
 802a15e:	031a      	lsls	r2, r3, #12
 802a160:	697b      	ldr	r3, [r7, #20]
 802a162:	4413      	add	r3, r2
 802a164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a168:	461a      	mov	r2, r3
 802a16a:	69fb      	ldr	r3, [r7, #28]
 802a16c:	681b      	ldr	r3, [r3, #0]
 802a16e:	6013      	str	r3, [r2, #0]
      pSrc++;
 802a170:	69fb      	ldr	r3, [r7, #28]
 802a172:	3301      	adds	r3, #1
 802a174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a176:	69fb      	ldr	r3, [r7, #28]
 802a178:	3301      	adds	r3, #1
 802a17a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a17c:	69fb      	ldr	r3, [r7, #28]
 802a17e:	3301      	adds	r3, #1
 802a180:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a182:	69fb      	ldr	r3, [r7, #28]
 802a184:	3301      	adds	r3, #1
 802a186:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802a188:	69bb      	ldr	r3, [r7, #24]
 802a18a:	3301      	adds	r3, #1
 802a18c:	61bb      	str	r3, [r7, #24]
 802a18e:	69ba      	ldr	r2, [r7, #24]
 802a190:	693b      	ldr	r3, [r7, #16]
 802a192:	429a      	cmp	r2, r3
 802a194:	d3e2      	bcc.n	802a15c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802a196:	2300      	movs	r3, #0
}
 802a198:	4618      	mov	r0, r3
 802a19a:	3724      	adds	r7, #36	; 0x24
 802a19c:	46bd      	mov	sp, r7
 802a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1a2:	4770      	bx	lr

0802a1a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802a1a4:	b480      	push	{r7}
 802a1a6:	b08b      	sub	sp, #44	; 0x2c
 802a1a8:	af00      	add	r7, sp, #0
 802a1aa:	60f8      	str	r0, [r7, #12]
 802a1ac:	60b9      	str	r1, [r7, #8]
 802a1ae:	4613      	mov	r3, r2
 802a1b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a1b2:	68fb      	ldr	r3, [r7, #12]
 802a1b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802a1b6:	68bb      	ldr	r3, [r7, #8]
 802a1b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802a1ba:	88fb      	ldrh	r3, [r7, #6]
 802a1bc:	089b      	lsrs	r3, r3, #2
 802a1be:	b29b      	uxth	r3, r3
 802a1c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802a1c2:	88fb      	ldrh	r3, [r7, #6]
 802a1c4:	f003 0303 	and.w	r3, r3, #3
 802a1c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802a1ca:	2300      	movs	r3, #0
 802a1cc:	623b      	str	r3, [r7, #32]
 802a1ce:	e014      	b.n	802a1fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802a1d0:	69bb      	ldr	r3, [r7, #24]
 802a1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a1d6:	681a      	ldr	r2, [r3, #0]
 802a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1da:	601a      	str	r2, [r3, #0]
    pDest++;
 802a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1de:	3301      	adds	r3, #1
 802a1e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1e4:	3301      	adds	r3, #1
 802a1e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1ea:	3301      	adds	r3, #1
 802a1ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1f0:	3301      	adds	r3, #1
 802a1f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802a1f4:	6a3b      	ldr	r3, [r7, #32]
 802a1f6:	3301      	adds	r3, #1
 802a1f8:	623b      	str	r3, [r7, #32]
 802a1fa:	6a3a      	ldr	r2, [r7, #32]
 802a1fc:	697b      	ldr	r3, [r7, #20]
 802a1fe:	429a      	cmp	r2, r3
 802a200:	d3e6      	bcc.n	802a1d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802a202:	8bfb      	ldrh	r3, [r7, #30]
 802a204:	2b00      	cmp	r3, #0
 802a206:	d01e      	beq.n	802a246 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802a208:	2300      	movs	r3, #0
 802a20a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802a20c:	69bb      	ldr	r3, [r7, #24]
 802a20e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a212:	461a      	mov	r2, r3
 802a214:	f107 0310 	add.w	r3, r7, #16
 802a218:	6812      	ldr	r2, [r2, #0]
 802a21a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802a21c:	693a      	ldr	r2, [r7, #16]
 802a21e:	6a3b      	ldr	r3, [r7, #32]
 802a220:	b2db      	uxtb	r3, r3
 802a222:	00db      	lsls	r3, r3, #3
 802a224:	fa22 f303 	lsr.w	r3, r2, r3
 802a228:	b2da      	uxtb	r2, r3
 802a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a22c:	701a      	strb	r2, [r3, #0]
      i++;
 802a22e:	6a3b      	ldr	r3, [r7, #32]
 802a230:	3301      	adds	r3, #1
 802a232:	623b      	str	r3, [r7, #32]
      pDest++;
 802a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a236:	3301      	adds	r3, #1
 802a238:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802a23a:	8bfb      	ldrh	r3, [r7, #30]
 802a23c:	3b01      	subs	r3, #1
 802a23e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802a240:	8bfb      	ldrh	r3, [r7, #30]
 802a242:	2b00      	cmp	r3, #0
 802a244:	d1ea      	bne.n	802a21c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a248:	4618      	mov	r0, r3
 802a24a:	372c      	adds	r7, #44	; 0x2c
 802a24c:	46bd      	mov	sp, r7
 802a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a252:	4770      	bx	lr

0802a254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802a254:	b480      	push	{r7}
 802a256:	b085      	sub	sp, #20
 802a258:	af00      	add	r7, sp, #0
 802a25a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802a25c:	687b      	ldr	r3, [r7, #4]
 802a25e:	695b      	ldr	r3, [r3, #20]
 802a260:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802a262:	687b      	ldr	r3, [r7, #4]
 802a264:	699b      	ldr	r3, [r3, #24]
 802a266:	68fa      	ldr	r2, [r7, #12]
 802a268:	4013      	ands	r3, r2
 802a26a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802a26c:	68fb      	ldr	r3, [r7, #12]
}
 802a26e:	4618      	mov	r0, r3
 802a270:	3714      	adds	r7, #20
 802a272:	46bd      	mov	sp, r7
 802a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a278:	4770      	bx	lr

0802a27a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802a27a:	b480      	push	{r7}
 802a27c:	b083      	sub	sp, #12
 802a27e:	af00      	add	r7, sp, #0
 802a280:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802a282:	687b      	ldr	r3, [r7, #4]
 802a284:	695b      	ldr	r3, [r3, #20]
 802a286:	f003 0301 	and.w	r3, r3, #1
}
 802a28a:	4618      	mov	r0, r3
 802a28c:	370c      	adds	r7, #12
 802a28e:	46bd      	mov	sp, r7
 802a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a294:	4770      	bx	lr
	...

0802a298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802a298:	b480      	push	{r7}
 802a29a:	b085      	sub	sp, #20
 802a29c:	af00      	add	r7, sp, #0
 802a29e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a2a0:	2300      	movs	r3, #0
 802a2a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a2a4:	68fb      	ldr	r3, [r7, #12]
 802a2a6:	3301      	adds	r3, #1
 802a2a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a2aa:	68fb      	ldr	r3, [r7, #12]
 802a2ac:	4a13      	ldr	r2, [pc, #76]	; (802a2fc <USB_CoreReset+0x64>)
 802a2ae:	4293      	cmp	r3, r2
 802a2b0:	d901      	bls.n	802a2b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802a2b2:	2303      	movs	r3, #3
 802a2b4:	e01b      	b.n	802a2ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a2b6:	687b      	ldr	r3, [r7, #4]
 802a2b8:	691b      	ldr	r3, [r3, #16]
 802a2ba:	2b00      	cmp	r3, #0
 802a2bc:	daf2      	bge.n	802a2a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802a2be:	2300      	movs	r3, #0
 802a2c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802a2c2:	687b      	ldr	r3, [r7, #4]
 802a2c4:	691b      	ldr	r3, [r3, #16]
 802a2c6:	f043 0201 	orr.w	r2, r3, #1
 802a2ca:	687b      	ldr	r3, [r7, #4]
 802a2cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a2ce:	68fb      	ldr	r3, [r7, #12]
 802a2d0:	3301      	adds	r3, #1
 802a2d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a2d4:	68fb      	ldr	r3, [r7, #12]
 802a2d6:	4a09      	ldr	r2, [pc, #36]	; (802a2fc <USB_CoreReset+0x64>)
 802a2d8:	4293      	cmp	r3, r2
 802a2da:	d901      	bls.n	802a2e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802a2dc:	2303      	movs	r3, #3
 802a2de:	e006      	b.n	802a2ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802a2e0:	687b      	ldr	r3, [r7, #4]
 802a2e2:	691b      	ldr	r3, [r3, #16]
 802a2e4:	f003 0301 	and.w	r3, r3, #1
 802a2e8:	2b01      	cmp	r3, #1
 802a2ea:	d0f0      	beq.n	802a2ce <USB_CoreReset+0x36>

  return HAL_OK;
 802a2ec:	2300      	movs	r3, #0
}
 802a2ee:	4618      	mov	r0, r3
 802a2f0:	3714      	adds	r7, #20
 802a2f2:	46bd      	mov	sp, r7
 802a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2f8:	4770      	bx	lr
 802a2fa:	bf00      	nop
 802a2fc:	00030d40 	.word	0x00030d40

0802a300 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a300:	b084      	sub	sp, #16
 802a302:	b580      	push	{r7, lr}
 802a304:	b086      	sub	sp, #24
 802a306:	af00      	add	r7, sp, #0
 802a308:	6078      	str	r0, [r7, #4]
 802a30a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802a30e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802a312:	2300      	movs	r3, #0
 802a314:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a316:	687b      	ldr	r3, [r7, #4]
 802a318:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802a31a:	68fb      	ldr	r3, [r7, #12]
 802a31c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802a320:	461a      	mov	r2, r3
 802a322:	2300      	movs	r3, #0
 802a324:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802a326:	687b      	ldr	r3, [r7, #4]
 802a328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a32a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802a32e:	687b      	ldr	r3, [r7, #4]
 802a330:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802a332:	687b      	ldr	r3, [r7, #4]
 802a334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a336:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802a33a:	687b      	ldr	r3, [r7, #4]
 802a33c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802a33e:	687b      	ldr	r3, [r7, #4]
 802a340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a342:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a34e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a352:	2b00      	cmp	r3, #0
 802a354:	d018      	beq.n	802a388 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a358:	2b01      	cmp	r3, #1
 802a35a:	d10a      	bne.n	802a372 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802a35c:	68fb      	ldr	r3, [r7, #12]
 802a35e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a362:	681b      	ldr	r3, [r3, #0]
 802a364:	68fa      	ldr	r2, [r7, #12]
 802a366:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a36a:	f043 0304 	orr.w	r3, r3, #4
 802a36e:	6013      	str	r3, [r2, #0]
 802a370:	e014      	b.n	802a39c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a372:	68fb      	ldr	r3, [r7, #12]
 802a374:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a378:	681b      	ldr	r3, [r3, #0]
 802a37a:	68fa      	ldr	r2, [r7, #12]
 802a37c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a380:	f023 0304 	bic.w	r3, r3, #4
 802a384:	6013      	str	r3, [r2, #0]
 802a386:	e009      	b.n	802a39c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a388:	68fb      	ldr	r3, [r7, #12]
 802a38a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a38e:	681b      	ldr	r3, [r3, #0]
 802a390:	68fa      	ldr	r2, [r7, #12]
 802a392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a396:	f023 0304 	bic.w	r3, r3, #4
 802a39a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a39c:	2110      	movs	r1, #16
 802a39e:	6878      	ldr	r0, [r7, #4]
 802a3a0:	f7ff fe5e 	bl	802a060 <USB_FlushTxFifo>
 802a3a4:	4603      	mov	r3, r0
 802a3a6:	2b00      	cmp	r3, #0
 802a3a8:	d001      	beq.n	802a3ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802a3aa:	2301      	movs	r3, #1
 802a3ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a3ae:	6878      	ldr	r0, [r7, #4]
 802a3b0:	f7ff fe8a 	bl	802a0c8 <USB_FlushRxFifo>
 802a3b4:	4603      	mov	r3, r0
 802a3b6:	2b00      	cmp	r3, #0
 802a3b8:	d001      	beq.n	802a3be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802a3ba:	2301      	movs	r3, #1
 802a3bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802a3be:	2300      	movs	r3, #0
 802a3c0:	613b      	str	r3, [r7, #16]
 802a3c2:	e015      	b.n	802a3f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802a3c4:	693b      	ldr	r3, [r7, #16]
 802a3c6:	015a      	lsls	r2, r3, #5
 802a3c8:	68fb      	ldr	r3, [r7, #12]
 802a3ca:	4413      	add	r3, r2
 802a3cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a3d0:	461a      	mov	r2, r3
 802a3d2:	f04f 33ff 	mov.w	r3, #4294967295
 802a3d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802a3d8:	693b      	ldr	r3, [r7, #16]
 802a3da:	015a      	lsls	r2, r3, #5
 802a3dc:	68fb      	ldr	r3, [r7, #12]
 802a3de:	4413      	add	r3, r2
 802a3e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a3e4:	461a      	mov	r2, r3
 802a3e6:	2300      	movs	r3, #0
 802a3e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802a3ea:	693b      	ldr	r3, [r7, #16]
 802a3ec:	3301      	adds	r3, #1
 802a3ee:	613b      	str	r3, [r7, #16]
 802a3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a3f2:	693a      	ldr	r2, [r7, #16]
 802a3f4:	429a      	cmp	r2, r3
 802a3f6:	d3e5      	bcc.n	802a3c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a3f8:	687b      	ldr	r3, [r7, #4]
 802a3fa:	2200      	movs	r2, #0
 802a3fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a3fe:	687b      	ldr	r3, [r7, #4]
 802a400:	f04f 32ff 	mov.w	r2, #4294967295
 802a404:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a406:	687b      	ldr	r3, [r7, #4]
 802a408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a40e:	2b00      	cmp	r3, #0
 802a410:	d00b      	beq.n	802a42a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802a412:	687b      	ldr	r3, [r7, #4]
 802a414:	f44f 7200 	mov.w	r2, #512	; 0x200
 802a418:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802a41a:	687b      	ldr	r3, [r7, #4]
 802a41c:	4a13      	ldr	r2, [pc, #76]	; (802a46c <USB_HostInit+0x16c>)
 802a41e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802a420:	687b      	ldr	r3, [r7, #4]
 802a422:	4a13      	ldr	r2, [pc, #76]	; (802a470 <USB_HostInit+0x170>)
 802a424:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802a428:	e009      	b.n	802a43e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	2280      	movs	r2, #128	; 0x80
 802a42e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802a430:	687b      	ldr	r3, [r7, #4]
 802a432:	4a10      	ldr	r2, [pc, #64]	; (802a474 <USB_HostInit+0x174>)
 802a434:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802a436:	687b      	ldr	r3, [r7, #4]
 802a438:	4a0f      	ldr	r2, [pc, #60]	; (802a478 <USB_HostInit+0x178>)
 802a43a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a440:	2b00      	cmp	r3, #0
 802a442:	d105      	bne.n	802a450 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a444:	687b      	ldr	r3, [r7, #4]
 802a446:	699b      	ldr	r3, [r3, #24]
 802a448:	f043 0210 	orr.w	r2, r3, #16
 802a44c:	687b      	ldr	r3, [r7, #4]
 802a44e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802a450:	687b      	ldr	r3, [r7, #4]
 802a452:	699a      	ldr	r2, [r3, #24]
 802a454:	4b09      	ldr	r3, [pc, #36]	; (802a47c <USB_HostInit+0x17c>)
 802a456:	4313      	orrs	r3, r2
 802a458:	687a      	ldr	r2, [r7, #4]
 802a45a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802a45c:	7dfb      	ldrb	r3, [r7, #23]
}
 802a45e:	4618      	mov	r0, r3
 802a460:	3718      	adds	r7, #24
 802a462:	46bd      	mov	sp, r7
 802a464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a468:	b004      	add	sp, #16
 802a46a:	4770      	bx	lr
 802a46c:	01000200 	.word	0x01000200
 802a470:	00e00300 	.word	0x00e00300
 802a474:	00600080 	.word	0x00600080
 802a478:	004000e0 	.word	0x004000e0
 802a47c:	a3200008 	.word	0xa3200008

0802a480 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802a480:	b480      	push	{r7}
 802a482:	b085      	sub	sp, #20
 802a484:	af00      	add	r7, sp, #0
 802a486:	6078      	str	r0, [r7, #4]
 802a488:	460b      	mov	r3, r1
 802a48a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a48c:	687b      	ldr	r3, [r7, #4]
 802a48e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802a490:	68fb      	ldr	r3, [r7, #12]
 802a492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a496:	681b      	ldr	r3, [r3, #0]
 802a498:	68fa      	ldr	r2, [r7, #12]
 802a49a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a49e:	f023 0303 	bic.w	r3, r3, #3
 802a4a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802a4a4:	68fb      	ldr	r3, [r7, #12]
 802a4a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a4aa:	681a      	ldr	r2, [r3, #0]
 802a4ac:	78fb      	ldrb	r3, [r7, #3]
 802a4ae:	f003 0303 	and.w	r3, r3, #3
 802a4b2:	68f9      	ldr	r1, [r7, #12]
 802a4b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a4b8:	4313      	orrs	r3, r2
 802a4ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802a4bc:	78fb      	ldrb	r3, [r7, #3]
 802a4be:	2b01      	cmp	r3, #1
 802a4c0:	d107      	bne.n	802a4d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802a4c2:	68fb      	ldr	r3, [r7, #12]
 802a4c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a4c8:	461a      	mov	r2, r3
 802a4ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802a4ce:	6053      	str	r3, [r2, #4]
 802a4d0:	e009      	b.n	802a4e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802a4d2:	78fb      	ldrb	r3, [r7, #3]
 802a4d4:	2b02      	cmp	r3, #2
 802a4d6:	d106      	bne.n	802a4e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802a4d8:	68fb      	ldr	r3, [r7, #12]
 802a4da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a4de:	461a      	mov	r2, r3
 802a4e0:	f241 7370 	movw	r3, #6000	; 0x1770
 802a4e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802a4e6:	2300      	movs	r3, #0
}
 802a4e8:	4618      	mov	r0, r3
 802a4ea:	3714      	adds	r7, #20
 802a4ec:	46bd      	mov	sp, r7
 802a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4f2:	4770      	bx	lr

0802a4f4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802a4f4:	b580      	push	{r7, lr}
 802a4f6:	b084      	sub	sp, #16
 802a4f8:	af00      	add	r7, sp, #0
 802a4fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a4fc:	687b      	ldr	r3, [r7, #4]
 802a4fe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802a500:	2300      	movs	r3, #0
 802a502:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a504:	68fb      	ldr	r3, [r7, #12]
 802a506:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a50a:	681b      	ldr	r3, [r3, #0]
 802a50c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a50e:	68bb      	ldr	r3, [r7, #8]
 802a510:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a514:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802a516:	68bb      	ldr	r3, [r7, #8]
 802a518:	68fa      	ldr	r2, [r7, #12]
 802a51a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a51e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a522:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802a524:	2064      	movs	r0, #100	; 0x64
 802a526:	f7f8 fdeb 	bl	8023100 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802a52a:	68bb      	ldr	r3, [r7, #8]
 802a52c:	68fa      	ldr	r2, [r7, #12]
 802a52e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a536:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802a538:	200a      	movs	r0, #10
 802a53a:	f7f8 fde1 	bl	8023100 <HAL_Delay>

  return HAL_OK;
 802a53e:	2300      	movs	r3, #0
}
 802a540:	4618      	mov	r0, r3
 802a542:	3710      	adds	r7, #16
 802a544:	46bd      	mov	sp, r7
 802a546:	bd80      	pop	{r7, pc}

0802a548 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802a548:	b480      	push	{r7}
 802a54a:	b085      	sub	sp, #20
 802a54c:	af00      	add	r7, sp, #0
 802a54e:	6078      	str	r0, [r7, #4]
 802a550:	460b      	mov	r3, r1
 802a552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a554:	687b      	ldr	r3, [r7, #4]
 802a556:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a558:	2300      	movs	r3, #0
 802a55a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a55c:	68fb      	ldr	r3, [r7, #12]
 802a55e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a562:	681b      	ldr	r3, [r3, #0]
 802a564:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a566:	68bb      	ldr	r3, [r7, #8]
 802a568:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a56c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802a56e:	68bb      	ldr	r3, [r7, #8]
 802a570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a574:	2b00      	cmp	r3, #0
 802a576:	d109      	bne.n	802a58c <USB_DriveVbus+0x44>
 802a578:	78fb      	ldrb	r3, [r7, #3]
 802a57a:	2b01      	cmp	r3, #1
 802a57c:	d106      	bne.n	802a58c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802a57e:	68bb      	ldr	r3, [r7, #8]
 802a580:	68fa      	ldr	r2, [r7, #12]
 802a582:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a58a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802a58c:	68bb      	ldr	r3, [r7, #8]
 802a58e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a596:	d109      	bne.n	802a5ac <USB_DriveVbus+0x64>
 802a598:	78fb      	ldrb	r3, [r7, #3]
 802a59a:	2b00      	cmp	r3, #0
 802a59c:	d106      	bne.n	802a5ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802a59e:	68bb      	ldr	r3, [r7, #8]
 802a5a0:	68fa      	ldr	r2, [r7, #12]
 802a5a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a5aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802a5ac:	2300      	movs	r3, #0
}
 802a5ae:	4618      	mov	r0, r3
 802a5b0:	3714      	adds	r7, #20
 802a5b2:	46bd      	mov	sp, r7
 802a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5b8:	4770      	bx	lr

0802a5ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a5ba:	b480      	push	{r7}
 802a5bc:	b085      	sub	sp, #20
 802a5be:	af00      	add	r7, sp, #0
 802a5c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a5c2:	687b      	ldr	r3, [r7, #4]
 802a5c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a5c6:	2300      	movs	r3, #0
 802a5c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a5ca:	68fb      	ldr	r3, [r7, #12]
 802a5cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a5d0:	681b      	ldr	r3, [r3, #0]
 802a5d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802a5d4:	68bb      	ldr	r3, [r7, #8]
 802a5d6:	0c5b      	lsrs	r3, r3, #17
 802a5d8:	f003 0303 	and.w	r3, r3, #3
}
 802a5dc:	4618      	mov	r0, r3
 802a5de:	3714      	adds	r7, #20
 802a5e0:	46bd      	mov	sp, r7
 802a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5e6:	4770      	bx	lr

0802a5e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802a5e8:	b480      	push	{r7}
 802a5ea:	b085      	sub	sp, #20
 802a5ec:	af00      	add	r7, sp, #0
 802a5ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a5f0:	687b      	ldr	r3, [r7, #4]
 802a5f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802a5f4:	68fb      	ldr	r3, [r7, #12]
 802a5f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a5fa:	689b      	ldr	r3, [r3, #8]
 802a5fc:	b29b      	uxth	r3, r3
}
 802a5fe:	4618      	mov	r0, r3
 802a600:	3714      	adds	r7, #20
 802a602:	46bd      	mov	sp, r7
 802a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a608:	4770      	bx	lr
	...

0802a60c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802a60c:	b580      	push	{r7, lr}
 802a60e:	b088      	sub	sp, #32
 802a610:	af00      	add	r7, sp, #0
 802a612:	6078      	str	r0, [r7, #4]
 802a614:	4608      	mov	r0, r1
 802a616:	4611      	mov	r1, r2
 802a618:	461a      	mov	r2, r3
 802a61a:	4603      	mov	r3, r0
 802a61c:	70fb      	strb	r3, [r7, #3]
 802a61e:	460b      	mov	r3, r1
 802a620:	70bb      	strb	r3, [r7, #2]
 802a622:	4613      	mov	r3, r2
 802a624:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802a626:	2300      	movs	r3, #0
 802a628:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a62a:	687b      	ldr	r3, [r7, #4]
 802a62c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802a62e:	78fb      	ldrb	r3, [r7, #3]
 802a630:	015a      	lsls	r2, r3, #5
 802a632:	693b      	ldr	r3, [r7, #16]
 802a634:	4413      	add	r3, r2
 802a636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a63a:	461a      	mov	r2, r3
 802a63c:	f04f 33ff 	mov.w	r3, #4294967295
 802a640:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802a642:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a646:	2b03      	cmp	r3, #3
 802a648:	d87e      	bhi.n	802a748 <USB_HC_Init+0x13c>
 802a64a:	a201      	add	r2, pc, #4	; (adr r2, 802a650 <USB_HC_Init+0x44>)
 802a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a650:	0802a661 	.word	0x0802a661
 802a654:	0802a70b 	.word	0x0802a70b
 802a658:	0802a661 	.word	0x0802a661
 802a65c:	0802a6cd 	.word	0x0802a6cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a660:	78fb      	ldrb	r3, [r7, #3]
 802a662:	015a      	lsls	r2, r3, #5
 802a664:	693b      	ldr	r3, [r7, #16]
 802a666:	4413      	add	r3, r2
 802a668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a66c:	461a      	mov	r2, r3
 802a66e:	f240 439d 	movw	r3, #1181	; 0x49d
 802a672:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802a674:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a678:	2b00      	cmp	r3, #0
 802a67a:	da10      	bge.n	802a69e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a67c:	78fb      	ldrb	r3, [r7, #3]
 802a67e:	015a      	lsls	r2, r3, #5
 802a680:	693b      	ldr	r3, [r7, #16]
 802a682:	4413      	add	r3, r2
 802a684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a688:	68db      	ldr	r3, [r3, #12]
 802a68a:	78fa      	ldrb	r2, [r7, #3]
 802a68c:	0151      	lsls	r1, r2, #5
 802a68e:	693a      	ldr	r2, [r7, #16]
 802a690:	440a      	add	r2, r1
 802a692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a69a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802a69c:	e057      	b.n	802a74e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802a69e:	687b      	ldr	r3, [r7, #4]
 802a6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a6a6:	2b00      	cmp	r3, #0
 802a6a8:	d051      	beq.n	802a74e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802a6aa:	78fb      	ldrb	r3, [r7, #3]
 802a6ac:	015a      	lsls	r2, r3, #5
 802a6ae:	693b      	ldr	r3, [r7, #16]
 802a6b0:	4413      	add	r3, r2
 802a6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a6b6:	68db      	ldr	r3, [r3, #12]
 802a6b8:	78fa      	ldrb	r2, [r7, #3]
 802a6ba:	0151      	lsls	r1, r2, #5
 802a6bc:	693a      	ldr	r2, [r7, #16]
 802a6be:	440a      	add	r2, r1
 802a6c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a6c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802a6c8:	60d3      	str	r3, [r2, #12]
      break;
 802a6ca:	e040      	b.n	802a74e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a6cc:	78fb      	ldrb	r3, [r7, #3]
 802a6ce:	015a      	lsls	r2, r3, #5
 802a6d0:	693b      	ldr	r3, [r7, #16]
 802a6d2:	4413      	add	r3, r2
 802a6d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a6d8:	461a      	mov	r2, r3
 802a6da:	f240 639d 	movw	r3, #1693	; 0x69d
 802a6de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a6e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a6e4:	2b00      	cmp	r3, #0
 802a6e6:	da34      	bge.n	802a752 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a6e8:	78fb      	ldrb	r3, [r7, #3]
 802a6ea:	015a      	lsls	r2, r3, #5
 802a6ec:	693b      	ldr	r3, [r7, #16]
 802a6ee:	4413      	add	r3, r2
 802a6f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a6f4:	68db      	ldr	r3, [r3, #12]
 802a6f6:	78fa      	ldrb	r2, [r7, #3]
 802a6f8:	0151      	lsls	r1, r2, #5
 802a6fa:	693a      	ldr	r2, [r7, #16]
 802a6fc:	440a      	add	r2, r1
 802a6fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a706:	60d3      	str	r3, [r2, #12]
      }

      break;
 802a708:	e023      	b.n	802a752 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a70a:	78fb      	ldrb	r3, [r7, #3]
 802a70c:	015a      	lsls	r2, r3, #5
 802a70e:	693b      	ldr	r3, [r7, #16]
 802a710:	4413      	add	r3, r2
 802a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a716:	461a      	mov	r2, r3
 802a718:	f240 2325 	movw	r3, #549	; 0x225
 802a71c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a71e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a722:	2b00      	cmp	r3, #0
 802a724:	da17      	bge.n	802a756 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802a726:	78fb      	ldrb	r3, [r7, #3]
 802a728:	015a      	lsls	r2, r3, #5
 802a72a:	693b      	ldr	r3, [r7, #16]
 802a72c:	4413      	add	r3, r2
 802a72e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a732:	68db      	ldr	r3, [r3, #12]
 802a734:	78fa      	ldrb	r2, [r7, #3]
 802a736:	0151      	lsls	r1, r2, #5
 802a738:	693a      	ldr	r2, [r7, #16]
 802a73a:	440a      	add	r2, r1
 802a73c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a740:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802a744:	60d3      	str	r3, [r2, #12]
      }
      break;
 802a746:	e006      	b.n	802a756 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802a748:	2301      	movs	r3, #1
 802a74a:	77fb      	strb	r3, [r7, #31]
      break;
 802a74c:	e004      	b.n	802a758 <USB_HC_Init+0x14c>
      break;
 802a74e:	bf00      	nop
 802a750:	e002      	b.n	802a758 <USB_HC_Init+0x14c>
      break;
 802a752:	bf00      	nop
 802a754:	e000      	b.n	802a758 <USB_HC_Init+0x14c>
      break;
 802a756:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802a758:	78fb      	ldrb	r3, [r7, #3]
 802a75a:	015a      	lsls	r2, r3, #5
 802a75c:	693b      	ldr	r3, [r7, #16]
 802a75e:	4413      	add	r3, r2
 802a760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a764:	68db      	ldr	r3, [r3, #12]
 802a766:	78fa      	ldrb	r2, [r7, #3]
 802a768:	0151      	lsls	r1, r2, #5
 802a76a:	693a      	ldr	r2, [r7, #16]
 802a76c:	440a      	add	r2, r1
 802a76e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a772:	f043 0302 	orr.w	r3, r3, #2
 802a776:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802a778:	693b      	ldr	r3, [r7, #16]
 802a77a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a77e:	699a      	ldr	r2, [r3, #24]
 802a780:	78fb      	ldrb	r3, [r7, #3]
 802a782:	f003 030f 	and.w	r3, r3, #15
 802a786:	2101      	movs	r1, #1
 802a788:	fa01 f303 	lsl.w	r3, r1, r3
 802a78c:	6939      	ldr	r1, [r7, #16]
 802a78e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a792:	4313      	orrs	r3, r2
 802a794:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802a796:	687b      	ldr	r3, [r7, #4]
 802a798:	699b      	ldr	r3, [r3, #24]
 802a79a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802a7a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a7a6:	2b00      	cmp	r3, #0
 802a7a8:	da03      	bge.n	802a7b2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802a7aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a7ae:	61bb      	str	r3, [r7, #24]
 802a7b0:	e001      	b.n	802a7b6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802a7b2:	2300      	movs	r3, #0
 802a7b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802a7b6:	6878      	ldr	r0, [r7, #4]
 802a7b8:	f7ff feff 	bl	802a5ba <USB_GetHostSpeed>
 802a7bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802a7be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a7c2:	2b02      	cmp	r3, #2
 802a7c4:	d106      	bne.n	802a7d4 <USB_HC_Init+0x1c8>
 802a7c6:	68fb      	ldr	r3, [r7, #12]
 802a7c8:	2b02      	cmp	r3, #2
 802a7ca:	d003      	beq.n	802a7d4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802a7cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802a7d0:	617b      	str	r3, [r7, #20]
 802a7d2:	e001      	b.n	802a7d8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802a7d4:	2300      	movs	r3, #0
 802a7d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a7d8:	787b      	ldrb	r3, [r7, #1]
 802a7da:	059b      	lsls	r3, r3, #22
 802a7dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a7e0:	78bb      	ldrb	r3, [r7, #2]
 802a7e2:	02db      	lsls	r3, r3, #11
 802a7e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a7e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a7ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a7ee:	049b      	lsls	r3, r3, #18
 802a7f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802a7f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a7f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802a7f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802a7fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a7fe:	69bb      	ldr	r3, [r7, #24]
 802a800:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a802:	78fb      	ldrb	r3, [r7, #3]
 802a804:	0159      	lsls	r1, r3, #5
 802a806:	693b      	ldr	r3, [r7, #16]
 802a808:	440b      	add	r3, r1
 802a80a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a80e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802a810:	697b      	ldr	r3, [r7, #20]
 802a812:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802a814:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802a816:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a81a:	2b03      	cmp	r3, #3
 802a81c:	d003      	beq.n	802a826 <USB_HC_Init+0x21a>
 802a81e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a822:	2b01      	cmp	r3, #1
 802a824:	d10f      	bne.n	802a846 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802a826:	78fb      	ldrb	r3, [r7, #3]
 802a828:	015a      	lsls	r2, r3, #5
 802a82a:	693b      	ldr	r3, [r7, #16]
 802a82c:	4413      	add	r3, r2
 802a82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a832:	681b      	ldr	r3, [r3, #0]
 802a834:	78fa      	ldrb	r2, [r7, #3]
 802a836:	0151      	lsls	r1, r2, #5
 802a838:	693a      	ldr	r2, [r7, #16]
 802a83a:	440a      	add	r2, r1
 802a83c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802a844:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802a846:	7ffb      	ldrb	r3, [r7, #31]
}
 802a848:	4618      	mov	r0, r3
 802a84a:	3720      	adds	r7, #32
 802a84c:	46bd      	mov	sp, r7
 802a84e:	bd80      	pop	{r7, pc}

0802a850 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802a850:	b580      	push	{r7, lr}
 802a852:	b08c      	sub	sp, #48	; 0x30
 802a854:	af02      	add	r7, sp, #8
 802a856:	60f8      	str	r0, [r7, #12]
 802a858:	60b9      	str	r1, [r7, #8]
 802a85a:	4613      	mov	r3, r2
 802a85c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a85e:	68fb      	ldr	r3, [r7, #12]
 802a860:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802a862:	68bb      	ldr	r3, [r7, #8]
 802a864:	785b      	ldrb	r3, [r3, #1]
 802a866:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802a868:	f44f 7380 	mov.w	r3, #256	; 0x100
 802a86c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802a86e:	68fb      	ldr	r3, [r7, #12]
 802a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a876:	2b00      	cmp	r3, #0
 802a878:	d02d      	beq.n	802a8d6 <USB_HC_StartXfer+0x86>
 802a87a:	68bb      	ldr	r3, [r7, #8]
 802a87c:	791b      	ldrb	r3, [r3, #4]
 802a87e:	2b00      	cmp	r3, #0
 802a880:	d129      	bne.n	802a8d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802a882:	79fb      	ldrb	r3, [r7, #7]
 802a884:	2b01      	cmp	r3, #1
 802a886:	d117      	bne.n	802a8b8 <USB_HC_StartXfer+0x68>
 802a888:	68bb      	ldr	r3, [r7, #8]
 802a88a:	79db      	ldrb	r3, [r3, #7]
 802a88c:	2b00      	cmp	r3, #0
 802a88e:	d003      	beq.n	802a898 <USB_HC_StartXfer+0x48>
 802a890:	68bb      	ldr	r3, [r7, #8]
 802a892:	79db      	ldrb	r3, [r3, #7]
 802a894:	2b02      	cmp	r3, #2
 802a896:	d10f      	bne.n	802a8b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802a898:	69fb      	ldr	r3, [r7, #28]
 802a89a:	015a      	lsls	r2, r3, #5
 802a89c:	6a3b      	ldr	r3, [r7, #32]
 802a89e:	4413      	add	r3, r2
 802a8a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8a4:	68db      	ldr	r3, [r3, #12]
 802a8a6:	69fa      	ldr	r2, [r7, #28]
 802a8a8:	0151      	lsls	r1, r2, #5
 802a8aa:	6a3a      	ldr	r2, [r7, #32]
 802a8ac:	440a      	add	r2, r1
 802a8ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a8b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802a8b8:	79fb      	ldrb	r3, [r7, #7]
 802a8ba:	2b00      	cmp	r3, #0
 802a8bc:	d10b      	bne.n	802a8d6 <USB_HC_StartXfer+0x86>
 802a8be:	68bb      	ldr	r3, [r7, #8]
 802a8c0:	795b      	ldrb	r3, [r3, #5]
 802a8c2:	2b01      	cmp	r3, #1
 802a8c4:	d107      	bne.n	802a8d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802a8c6:	68bb      	ldr	r3, [r7, #8]
 802a8c8:	785b      	ldrb	r3, [r3, #1]
 802a8ca:	4619      	mov	r1, r3
 802a8cc:	68f8      	ldr	r0, [r7, #12]
 802a8ce:	f000 fa0f 	bl	802acf0 <USB_DoPing>
      return HAL_OK;
 802a8d2:	2300      	movs	r3, #0
 802a8d4:	e0f8      	b.n	802aac8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802a8d6:	68bb      	ldr	r3, [r7, #8]
 802a8d8:	695b      	ldr	r3, [r3, #20]
 802a8da:	2b00      	cmp	r3, #0
 802a8dc:	d018      	beq.n	802a910 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802a8de:	68bb      	ldr	r3, [r7, #8]
 802a8e0:	695b      	ldr	r3, [r3, #20]
 802a8e2:	68ba      	ldr	r2, [r7, #8]
 802a8e4:	8912      	ldrh	r2, [r2, #8]
 802a8e6:	4413      	add	r3, r2
 802a8e8:	3b01      	subs	r3, #1
 802a8ea:	68ba      	ldr	r2, [r7, #8]
 802a8ec:	8912      	ldrh	r2, [r2, #8]
 802a8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 802a8f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802a8f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802a8f6:	8b7b      	ldrh	r3, [r7, #26]
 802a8f8:	429a      	cmp	r2, r3
 802a8fa:	d90b      	bls.n	802a914 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802a8fc:	8b7b      	ldrh	r3, [r7, #26]
 802a8fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a900:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a902:	68ba      	ldr	r2, [r7, #8]
 802a904:	8912      	ldrh	r2, [r2, #8]
 802a906:	fb03 f202 	mul.w	r2, r3, r2
 802a90a:	68bb      	ldr	r3, [r7, #8]
 802a90c:	611a      	str	r2, [r3, #16]
 802a90e:	e001      	b.n	802a914 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802a910:	2301      	movs	r3, #1
 802a912:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802a914:	68bb      	ldr	r3, [r7, #8]
 802a916:	78db      	ldrb	r3, [r3, #3]
 802a918:	2b00      	cmp	r3, #0
 802a91a:	d007      	beq.n	802a92c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802a91c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a91e:	68ba      	ldr	r2, [r7, #8]
 802a920:	8912      	ldrh	r2, [r2, #8]
 802a922:	fb03 f202 	mul.w	r2, r3, r2
 802a926:	68bb      	ldr	r3, [r7, #8]
 802a928:	611a      	str	r2, [r3, #16]
 802a92a:	e003      	b.n	802a934 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802a92c:	68bb      	ldr	r3, [r7, #8]
 802a92e:	695a      	ldr	r2, [r3, #20]
 802a930:	68bb      	ldr	r3, [r7, #8]
 802a932:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a934:	68bb      	ldr	r3, [r7, #8]
 802a936:	691b      	ldr	r3, [r3, #16]
 802a938:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a93c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802a93e:	04d9      	lsls	r1, r3, #19
 802a940:	4b63      	ldr	r3, [pc, #396]	; (802aad0 <USB_HC_StartXfer+0x280>)
 802a942:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a944:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802a946:	68bb      	ldr	r3, [r7, #8]
 802a948:	7a9b      	ldrb	r3, [r3, #10]
 802a94a:	075b      	lsls	r3, r3, #29
 802a94c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a950:	69f9      	ldr	r1, [r7, #28]
 802a952:	0148      	lsls	r0, r1, #5
 802a954:	6a39      	ldr	r1, [r7, #32]
 802a956:	4401      	add	r1, r0
 802a958:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802a95c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802a95e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802a960:	79fb      	ldrb	r3, [r7, #7]
 802a962:	2b00      	cmp	r3, #0
 802a964:	d009      	beq.n	802a97a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802a966:	68bb      	ldr	r3, [r7, #8]
 802a968:	68d9      	ldr	r1, [r3, #12]
 802a96a:	69fb      	ldr	r3, [r7, #28]
 802a96c:	015a      	lsls	r2, r3, #5
 802a96e:	6a3b      	ldr	r3, [r7, #32]
 802a970:	4413      	add	r3, r2
 802a972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a976:	460a      	mov	r2, r1
 802a978:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802a97a:	6a3b      	ldr	r3, [r7, #32]
 802a97c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a980:	689b      	ldr	r3, [r3, #8]
 802a982:	f003 0301 	and.w	r3, r3, #1
 802a986:	2b00      	cmp	r3, #0
 802a988:	bf0c      	ite	eq
 802a98a:	2301      	moveq	r3, #1
 802a98c:	2300      	movne	r3, #0
 802a98e:	b2db      	uxtb	r3, r3
 802a990:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802a992:	69fb      	ldr	r3, [r7, #28]
 802a994:	015a      	lsls	r2, r3, #5
 802a996:	6a3b      	ldr	r3, [r7, #32]
 802a998:	4413      	add	r3, r2
 802a99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a99e:	681b      	ldr	r3, [r3, #0]
 802a9a0:	69fa      	ldr	r2, [r7, #28]
 802a9a2:	0151      	lsls	r1, r2, #5
 802a9a4:	6a3a      	ldr	r2, [r7, #32]
 802a9a6:	440a      	add	r2, r1
 802a9a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802a9b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802a9b2:	69fb      	ldr	r3, [r7, #28]
 802a9b4:	015a      	lsls	r2, r3, #5
 802a9b6:	6a3b      	ldr	r3, [r7, #32]
 802a9b8:	4413      	add	r3, r2
 802a9ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9be:	681a      	ldr	r2, [r3, #0]
 802a9c0:	7e7b      	ldrb	r3, [r7, #25]
 802a9c2:	075b      	lsls	r3, r3, #29
 802a9c4:	69f9      	ldr	r1, [r7, #28]
 802a9c6:	0148      	lsls	r0, r1, #5
 802a9c8:	6a39      	ldr	r1, [r7, #32]
 802a9ca:	4401      	add	r1, r0
 802a9cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802a9d0:	4313      	orrs	r3, r2
 802a9d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802a9d4:	69fb      	ldr	r3, [r7, #28]
 802a9d6:	015a      	lsls	r2, r3, #5
 802a9d8:	6a3b      	ldr	r3, [r7, #32]
 802a9da:	4413      	add	r3, r2
 802a9dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9e0:	681b      	ldr	r3, [r3, #0]
 802a9e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802a9e4:	693b      	ldr	r3, [r7, #16]
 802a9e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802a9ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802a9ec:	68bb      	ldr	r3, [r7, #8]
 802a9ee:	78db      	ldrb	r3, [r3, #3]
 802a9f0:	2b00      	cmp	r3, #0
 802a9f2:	d004      	beq.n	802a9fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802a9f4:	693b      	ldr	r3, [r7, #16]
 802a9f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802a9fa:	613b      	str	r3, [r7, #16]
 802a9fc:	e003      	b.n	802aa06 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802a9fe:	693b      	ldr	r3, [r7, #16]
 802aa00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802aa04:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802aa06:	693b      	ldr	r3, [r7, #16]
 802aa08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aa0c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802aa0e:	69fb      	ldr	r3, [r7, #28]
 802aa10:	015a      	lsls	r2, r3, #5
 802aa12:	6a3b      	ldr	r3, [r7, #32]
 802aa14:	4413      	add	r3, r2
 802aa16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa1a:	461a      	mov	r2, r3
 802aa1c:	693b      	ldr	r3, [r7, #16]
 802aa1e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802aa20:	79fb      	ldrb	r3, [r7, #7]
 802aa22:	2b00      	cmp	r3, #0
 802aa24:	d001      	beq.n	802aa2a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802aa26:	2300      	movs	r3, #0
 802aa28:	e04e      	b.n	802aac8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802aa2a:	68bb      	ldr	r3, [r7, #8]
 802aa2c:	78db      	ldrb	r3, [r3, #3]
 802aa2e:	2b00      	cmp	r3, #0
 802aa30:	d149      	bne.n	802aac6 <USB_HC_StartXfer+0x276>
 802aa32:	68bb      	ldr	r3, [r7, #8]
 802aa34:	695b      	ldr	r3, [r3, #20]
 802aa36:	2b00      	cmp	r3, #0
 802aa38:	d045      	beq.n	802aac6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802aa3a:	68bb      	ldr	r3, [r7, #8]
 802aa3c:	79db      	ldrb	r3, [r3, #7]
 802aa3e:	2b03      	cmp	r3, #3
 802aa40:	d830      	bhi.n	802aaa4 <USB_HC_StartXfer+0x254>
 802aa42:	a201      	add	r2, pc, #4	; (adr r2, 802aa48 <USB_HC_StartXfer+0x1f8>)
 802aa44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802aa48:	0802aa59 	.word	0x0802aa59
 802aa4c:	0802aa7d 	.word	0x0802aa7d
 802aa50:	0802aa59 	.word	0x0802aa59
 802aa54:	0802aa7d 	.word	0x0802aa7d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802aa58:	68bb      	ldr	r3, [r7, #8]
 802aa5a:	695b      	ldr	r3, [r3, #20]
 802aa5c:	3303      	adds	r3, #3
 802aa5e:	089b      	lsrs	r3, r3, #2
 802aa60:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802aa62:	8afa      	ldrh	r2, [r7, #22]
 802aa64:	68fb      	ldr	r3, [r7, #12]
 802aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802aa68:	b29b      	uxth	r3, r3
 802aa6a:	429a      	cmp	r2, r3
 802aa6c:	d91c      	bls.n	802aaa8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802aa6e:	68fb      	ldr	r3, [r7, #12]
 802aa70:	699b      	ldr	r3, [r3, #24]
 802aa72:	f043 0220 	orr.w	r2, r3, #32
 802aa76:	68fb      	ldr	r3, [r7, #12]
 802aa78:	619a      	str	r2, [r3, #24]
        }
        break;
 802aa7a:	e015      	b.n	802aaa8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802aa7c:	68bb      	ldr	r3, [r7, #8]
 802aa7e:	695b      	ldr	r3, [r3, #20]
 802aa80:	3303      	adds	r3, #3
 802aa82:	089b      	lsrs	r3, r3, #2
 802aa84:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802aa86:	8afa      	ldrh	r2, [r7, #22]
 802aa88:	6a3b      	ldr	r3, [r7, #32]
 802aa8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aa8e:	691b      	ldr	r3, [r3, #16]
 802aa90:	b29b      	uxth	r3, r3
 802aa92:	429a      	cmp	r2, r3
 802aa94:	d90a      	bls.n	802aaac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802aa96:	68fb      	ldr	r3, [r7, #12]
 802aa98:	699b      	ldr	r3, [r3, #24]
 802aa9a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802aa9e:	68fb      	ldr	r3, [r7, #12]
 802aaa0:	619a      	str	r2, [r3, #24]
        }
        break;
 802aaa2:	e003      	b.n	802aaac <USB_HC_StartXfer+0x25c>

      default:
        break;
 802aaa4:	bf00      	nop
 802aaa6:	e002      	b.n	802aaae <USB_HC_StartXfer+0x25e>
        break;
 802aaa8:	bf00      	nop
 802aaaa:	e000      	b.n	802aaae <USB_HC_StartXfer+0x25e>
        break;
 802aaac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802aaae:	68bb      	ldr	r3, [r7, #8]
 802aab0:	68d9      	ldr	r1, [r3, #12]
 802aab2:	68bb      	ldr	r3, [r7, #8]
 802aab4:	785a      	ldrb	r2, [r3, #1]
 802aab6:	68bb      	ldr	r3, [r7, #8]
 802aab8:	695b      	ldr	r3, [r3, #20]
 802aaba:	b29b      	uxth	r3, r3
 802aabc:	2000      	movs	r0, #0
 802aabe:	9000      	str	r0, [sp, #0]
 802aac0:	68f8      	ldr	r0, [r7, #12]
 802aac2:	f7ff fb31 	bl	802a128 <USB_WritePacket>
  }

  return HAL_OK;
 802aac6:	2300      	movs	r3, #0
}
 802aac8:	4618      	mov	r0, r3
 802aaca:	3728      	adds	r7, #40	; 0x28
 802aacc:	46bd      	mov	sp, r7
 802aace:	bd80      	pop	{r7, pc}
 802aad0:	1ff80000 	.word	0x1ff80000

0802aad4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802aad4:	b480      	push	{r7}
 802aad6:	b085      	sub	sp, #20
 802aad8:	af00      	add	r7, sp, #0
 802aada:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aadc:	687b      	ldr	r3, [r7, #4]
 802aade:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802aae0:	68fb      	ldr	r3, [r7, #12]
 802aae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802aae6:	695b      	ldr	r3, [r3, #20]
 802aae8:	b29b      	uxth	r3, r3
}
 802aaea:	4618      	mov	r0, r3
 802aaec:	3714      	adds	r7, #20
 802aaee:	46bd      	mov	sp, r7
 802aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaf4:	4770      	bx	lr

0802aaf6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802aaf6:	b480      	push	{r7}
 802aaf8:	b089      	sub	sp, #36	; 0x24
 802aafa:	af00      	add	r7, sp, #0
 802aafc:	6078      	str	r0, [r7, #4]
 802aafe:	460b      	mov	r3, r1
 802ab00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ab02:	687b      	ldr	r3, [r7, #4]
 802ab04:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802ab06:	78fb      	ldrb	r3, [r7, #3]
 802ab08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802ab0a:	2300      	movs	r3, #0
 802ab0c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802ab0e:	69bb      	ldr	r3, [r7, #24]
 802ab10:	015a      	lsls	r2, r3, #5
 802ab12:	69fb      	ldr	r3, [r7, #28]
 802ab14:	4413      	add	r3, r2
 802ab16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab1a:	681b      	ldr	r3, [r3, #0]
 802ab1c:	0c9b      	lsrs	r3, r3, #18
 802ab1e:	f003 0303 	and.w	r3, r3, #3
 802ab22:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802ab24:	69bb      	ldr	r3, [r7, #24]
 802ab26:	015a      	lsls	r2, r3, #5
 802ab28:	69fb      	ldr	r3, [r7, #28]
 802ab2a:	4413      	add	r3, r2
 802ab2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab30:	681b      	ldr	r3, [r3, #0]
 802ab32:	0fdb      	lsrs	r3, r3, #31
 802ab34:	f003 0301 	and.w	r3, r3, #1
 802ab38:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802ab3a:	687b      	ldr	r3, [r7, #4]
 802ab3c:	689b      	ldr	r3, [r3, #8]
 802ab3e:	f003 0320 	and.w	r3, r3, #32
 802ab42:	2b20      	cmp	r3, #32
 802ab44:	d104      	bne.n	802ab50 <USB_HC_Halt+0x5a>
 802ab46:	693b      	ldr	r3, [r7, #16]
 802ab48:	2b00      	cmp	r3, #0
 802ab4a:	d101      	bne.n	802ab50 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802ab4c:	2300      	movs	r3, #0
 802ab4e:	e0c8      	b.n	802ace2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802ab50:	697b      	ldr	r3, [r7, #20]
 802ab52:	2b00      	cmp	r3, #0
 802ab54:	d002      	beq.n	802ab5c <USB_HC_Halt+0x66>
 802ab56:	697b      	ldr	r3, [r7, #20]
 802ab58:	2b02      	cmp	r3, #2
 802ab5a:	d163      	bne.n	802ac24 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802ab5c:	69bb      	ldr	r3, [r7, #24]
 802ab5e:	015a      	lsls	r2, r3, #5
 802ab60:	69fb      	ldr	r3, [r7, #28]
 802ab62:	4413      	add	r3, r2
 802ab64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ab68:	681b      	ldr	r3, [r3, #0]
 802ab6a:	69ba      	ldr	r2, [r7, #24]
 802ab6c:	0151      	lsls	r1, r2, #5
 802ab6e:	69fa      	ldr	r2, [r7, #28]
 802ab70:	440a      	add	r2, r1
 802ab72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ab76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ab7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	689b      	ldr	r3, [r3, #8]
 802ab80:	f003 0320 	and.w	r3, r3, #32
 802ab84:	2b00      	cmp	r3, #0
 802ab86:	f040 80ab 	bne.w	802ace0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802ab8a:	687b      	ldr	r3, [r7, #4]
 802ab8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802ab8e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802ab92:	2b00      	cmp	r3, #0
 802ab94:	d133      	bne.n	802abfe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802ab96:	69bb      	ldr	r3, [r7, #24]
 802ab98:	015a      	lsls	r2, r3, #5
 802ab9a:	69fb      	ldr	r3, [r7, #28]
 802ab9c:	4413      	add	r3, r2
 802ab9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aba2:	681b      	ldr	r3, [r3, #0]
 802aba4:	69ba      	ldr	r2, [r7, #24]
 802aba6:	0151      	lsls	r1, r2, #5
 802aba8:	69fa      	ldr	r2, [r7, #28]
 802abaa:	440a      	add	r2, r1
 802abac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802abb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802abb4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802abb6:	69bb      	ldr	r3, [r7, #24]
 802abb8:	015a      	lsls	r2, r3, #5
 802abba:	69fb      	ldr	r3, [r7, #28]
 802abbc:	4413      	add	r3, r2
 802abbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abc2:	681b      	ldr	r3, [r3, #0]
 802abc4:	69ba      	ldr	r2, [r7, #24]
 802abc6:	0151      	lsls	r1, r2, #5
 802abc8:	69fa      	ldr	r2, [r7, #28]
 802abca:	440a      	add	r2, r1
 802abcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802abd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802abd4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802abd6:	68fb      	ldr	r3, [r7, #12]
 802abd8:	3301      	adds	r3, #1
 802abda:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802abdc:	68fb      	ldr	r3, [r7, #12]
 802abde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802abe2:	d81d      	bhi.n	802ac20 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802abe4:	69bb      	ldr	r3, [r7, #24]
 802abe6:	015a      	lsls	r2, r3, #5
 802abe8:	69fb      	ldr	r3, [r7, #28]
 802abea:	4413      	add	r3, r2
 802abec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abf0:	681b      	ldr	r3, [r3, #0]
 802abf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802abf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802abfa:	d0ec      	beq.n	802abd6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802abfc:	e070      	b.n	802ace0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802abfe:	69bb      	ldr	r3, [r7, #24]
 802ac00:	015a      	lsls	r2, r3, #5
 802ac02:	69fb      	ldr	r3, [r7, #28]
 802ac04:	4413      	add	r3, r2
 802ac06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac0a:	681b      	ldr	r3, [r3, #0]
 802ac0c:	69ba      	ldr	r2, [r7, #24]
 802ac0e:	0151      	lsls	r1, r2, #5
 802ac10:	69fa      	ldr	r2, [r7, #28]
 802ac12:	440a      	add	r2, r1
 802ac14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ac1c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ac1e:	e05f      	b.n	802ace0 <USB_HC_Halt+0x1ea>
            break;
 802ac20:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ac22:	e05d      	b.n	802ace0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802ac24:	69bb      	ldr	r3, [r7, #24]
 802ac26:	015a      	lsls	r2, r3, #5
 802ac28:	69fb      	ldr	r3, [r7, #28]
 802ac2a:	4413      	add	r3, r2
 802ac2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac30:	681b      	ldr	r3, [r3, #0]
 802ac32:	69ba      	ldr	r2, [r7, #24]
 802ac34:	0151      	lsls	r1, r2, #5
 802ac36:	69fa      	ldr	r2, [r7, #28]
 802ac38:	440a      	add	r2, r1
 802ac3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ac42:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802ac44:	69fb      	ldr	r3, [r7, #28]
 802ac46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ac4a:	691b      	ldr	r3, [r3, #16]
 802ac4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	d133      	bne.n	802acbc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802ac54:	69bb      	ldr	r3, [r7, #24]
 802ac56:	015a      	lsls	r2, r3, #5
 802ac58:	69fb      	ldr	r3, [r7, #28]
 802ac5a:	4413      	add	r3, r2
 802ac5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac60:	681b      	ldr	r3, [r3, #0]
 802ac62:	69ba      	ldr	r2, [r7, #24]
 802ac64:	0151      	lsls	r1, r2, #5
 802ac66:	69fa      	ldr	r2, [r7, #28]
 802ac68:	440a      	add	r2, r1
 802ac6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802ac72:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ac74:	69bb      	ldr	r3, [r7, #24]
 802ac76:	015a      	lsls	r2, r3, #5
 802ac78:	69fb      	ldr	r3, [r7, #28]
 802ac7a:	4413      	add	r3, r2
 802ac7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac80:	681b      	ldr	r3, [r3, #0]
 802ac82:	69ba      	ldr	r2, [r7, #24]
 802ac84:	0151      	lsls	r1, r2, #5
 802ac86:	69fa      	ldr	r2, [r7, #28]
 802ac88:	440a      	add	r2, r1
 802ac8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ac8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ac92:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802ac94:	68fb      	ldr	r3, [r7, #12]
 802ac96:	3301      	adds	r3, #1
 802ac98:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802ac9a:	68fb      	ldr	r3, [r7, #12]
 802ac9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802aca0:	d81d      	bhi.n	802acde <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802aca2:	69bb      	ldr	r3, [r7, #24]
 802aca4:	015a      	lsls	r2, r3, #5
 802aca6:	69fb      	ldr	r3, [r7, #28]
 802aca8:	4413      	add	r3, r2
 802acaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acae:	681b      	ldr	r3, [r3, #0]
 802acb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802acb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802acb8:	d0ec      	beq.n	802ac94 <USB_HC_Halt+0x19e>
 802acba:	e011      	b.n	802ace0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802acbc:	69bb      	ldr	r3, [r7, #24]
 802acbe:	015a      	lsls	r2, r3, #5
 802acc0:	69fb      	ldr	r3, [r7, #28]
 802acc2:	4413      	add	r3, r2
 802acc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802acc8:	681b      	ldr	r3, [r3, #0]
 802acca:	69ba      	ldr	r2, [r7, #24]
 802accc:	0151      	lsls	r1, r2, #5
 802acce:	69fa      	ldr	r2, [r7, #28]
 802acd0:	440a      	add	r2, r1
 802acd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802acd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802acda:	6013      	str	r3, [r2, #0]
 802acdc:	e000      	b.n	802ace0 <USB_HC_Halt+0x1ea>
          break;
 802acde:	bf00      	nop
    }
  }

  return HAL_OK;
 802ace0:	2300      	movs	r3, #0
}
 802ace2:	4618      	mov	r0, r3
 802ace4:	3724      	adds	r7, #36	; 0x24
 802ace6:	46bd      	mov	sp, r7
 802ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acec:	4770      	bx	lr
	...

0802acf0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802acf0:	b480      	push	{r7}
 802acf2:	b087      	sub	sp, #28
 802acf4:	af00      	add	r7, sp, #0
 802acf6:	6078      	str	r0, [r7, #4]
 802acf8:	460b      	mov	r3, r1
 802acfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802acfc:	687b      	ldr	r3, [r7, #4]
 802acfe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802ad00:	78fb      	ldrb	r3, [r7, #3]
 802ad02:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802ad04:	2301      	movs	r3, #1
 802ad06:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802ad08:	68fb      	ldr	r3, [r7, #12]
 802ad0a:	04da      	lsls	r2, r3, #19
 802ad0c:	4b15      	ldr	r3, [pc, #84]	; (802ad64 <USB_DoPing+0x74>)
 802ad0e:	4013      	ands	r3, r2
 802ad10:	693a      	ldr	r2, [r7, #16]
 802ad12:	0151      	lsls	r1, r2, #5
 802ad14:	697a      	ldr	r2, [r7, #20]
 802ad16:	440a      	add	r2, r1
 802ad18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ad1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ad20:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802ad22:	693b      	ldr	r3, [r7, #16]
 802ad24:	015a      	lsls	r2, r3, #5
 802ad26:	697b      	ldr	r3, [r7, #20]
 802ad28:	4413      	add	r3, r2
 802ad2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad2e:	681b      	ldr	r3, [r3, #0]
 802ad30:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802ad32:	68bb      	ldr	r3, [r7, #8]
 802ad34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ad38:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802ad3a:	68bb      	ldr	r3, [r7, #8]
 802ad3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ad40:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802ad42:	693b      	ldr	r3, [r7, #16]
 802ad44:	015a      	lsls	r2, r3, #5
 802ad46:	697b      	ldr	r3, [r7, #20]
 802ad48:	4413      	add	r3, r2
 802ad4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad4e:	461a      	mov	r2, r3
 802ad50:	68bb      	ldr	r3, [r7, #8]
 802ad52:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802ad54:	2300      	movs	r3, #0
}
 802ad56:	4618      	mov	r0, r3
 802ad58:	371c      	adds	r7, #28
 802ad5a:	46bd      	mov	sp, r7
 802ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad60:	4770      	bx	lr
 802ad62:	bf00      	nop
 802ad64:	1ff80000 	.word	0x1ff80000

0802ad68 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802ad68:	b580      	push	{r7, lr}
 802ad6a:	b088      	sub	sp, #32
 802ad6c:	af00      	add	r7, sp, #0
 802ad6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802ad70:	2300      	movs	r3, #0
 802ad72:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad74:	687b      	ldr	r3, [r7, #4]
 802ad76:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802ad78:	2300      	movs	r3, #0
 802ad7a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802ad7c:	6878      	ldr	r0, [r7, #4]
 802ad7e:	f7ff f911 	bl	8029fa4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802ad82:	2110      	movs	r1, #16
 802ad84:	6878      	ldr	r0, [r7, #4]
 802ad86:	f7ff f96b 	bl	802a060 <USB_FlushTxFifo>
 802ad8a:	4603      	mov	r3, r0
 802ad8c:	2b00      	cmp	r3, #0
 802ad8e:	d001      	beq.n	802ad94 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802ad90:	2301      	movs	r3, #1
 802ad92:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802ad94:	6878      	ldr	r0, [r7, #4]
 802ad96:	f7ff f997 	bl	802a0c8 <USB_FlushRxFifo>
 802ad9a:	4603      	mov	r3, r0
 802ad9c:	2b00      	cmp	r3, #0
 802ad9e:	d001      	beq.n	802ada4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802ada0:	2301      	movs	r3, #1
 802ada2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802ada4:	2300      	movs	r3, #0
 802ada6:	61bb      	str	r3, [r7, #24]
 802ada8:	e01f      	b.n	802adea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802adaa:	69bb      	ldr	r3, [r7, #24]
 802adac:	015a      	lsls	r2, r3, #5
 802adae:	697b      	ldr	r3, [r7, #20]
 802adb0:	4413      	add	r3, r2
 802adb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802adb6:	681b      	ldr	r3, [r3, #0]
 802adb8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802adba:	693b      	ldr	r3, [r7, #16]
 802adbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802adc0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802adc2:	693b      	ldr	r3, [r7, #16]
 802adc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802adc8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802adca:	693b      	ldr	r3, [r7, #16]
 802adcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802add0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802add2:	69bb      	ldr	r3, [r7, #24]
 802add4:	015a      	lsls	r2, r3, #5
 802add6:	697b      	ldr	r3, [r7, #20]
 802add8:	4413      	add	r3, r2
 802adda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802adde:	461a      	mov	r2, r3
 802ade0:	693b      	ldr	r3, [r7, #16]
 802ade2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802ade4:	69bb      	ldr	r3, [r7, #24]
 802ade6:	3301      	adds	r3, #1
 802ade8:	61bb      	str	r3, [r7, #24]
 802adea:	69bb      	ldr	r3, [r7, #24]
 802adec:	2b0f      	cmp	r3, #15
 802adee:	d9dc      	bls.n	802adaa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802adf0:	2300      	movs	r3, #0
 802adf2:	61bb      	str	r3, [r7, #24]
 802adf4:	e034      	b.n	802ae60 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802adf6:	69bb      	ldr	r3, [r7, #24]
 802adf8:	015a      	lsls	r2, r3, #5
 802adfa:	697b      	ldr	r3, [r7, #20]
 802adfc:	4413      	add	r3, r2
 802adfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae02:	681b      	ldr	r3, [r3, #0]
 802ae04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802ae06:	693b      	ldr	r3, [r7, #16]
 802ae08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ae0c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802ae0e:	693b      	ldr	r3, [r7, #16]
 802ae10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ae14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802ae16:	693b      	ldr	r3, [r7, #16]
 802ae18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802ae1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802ae1e:	69bb      	ldr	r3, [r7, #24]
 802ae20:	015a      	lsls	r2, r3, #5
 802ae22:	697b      	ldr	r3, [r7, #20]
 802ae24:	4413      	add	r3, r2
 802ae26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae2a:	461a      	mov	r2, r3
 802ae2c:	693b      	ldr	r3, [r7, #16]
 802ae2e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802ae30:	68fb      	ldr	r3, [r7, #12]
 802ae32:	3301      	adds	r3, #1
 802ae34:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802ae36:	68fb      	ldr	r3, [r7, #12]
 802ae38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ae3c:	d80c      	bhi.n	802ae58 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ae3e:	69bb      	ldr	r3, [r7, #24]
 802ae40:	015a      	lsls	r2, r3, #5
 802ae42:	697b      	ldr	r3, [r7, #20]
 802ae44:	4413      	add	r3, r2
 802ae46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae4a:	681b      	ldr	r3, [r3, #0]
 802ae4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ae50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ae54:	d0ec      	beq.n	802ae30 <USB_StopHost+0xc8>
 802ae56:	e000      	b.n	802ae5a <USB_StopHost+0xf2>
        break;
 802ae58:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802ae5a:	69bb      	ldr	r3, [r7, #24]
 802ae5c:	3301      	adds	r3, #1
 802ae5e:	61bb      	str	r3, [r7, #24]
 802ae60:	69bb      	ldr	r3, [r7, #24]
 802ae62:	2b0f      	cmp	r3, #15
 802ae64:	d9c7      	bls.n	802adf6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802ae66:	697b      	ldr	r3, [r7, #20]
 802ae68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae6c:	461a      	mov	r2, r3
 802ae6e:	f04f 33ff 	mov.w	r3, #4294967295
 802ae72:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802ae74:	687b      	ldr	r3, [r7, #4]
 802ae76:	f04f 32ff 	mov.w	r2, #4294967295
 802ae7a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802ae7c:	6878      	ldr	r0, [r7, #4]
 802ae7e:	f7ff f880 	bl	8029f82 <USB_EnableGlobalInt>

  return ret;
 802ae82:	7ffb      	ldrb	r3, [r7, #31]
}
 802ae84:	4618      	mov	r0, r3
 802ae86:	3720      	adds	r7, #32
 802ae88:	46bd      	mov	sp, r7
 802ae8a:	bd80      	pop	{r7, pc}

0802ae8c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802ae8c:	b590      	push	{r4, r7, lr}
 802ae8e:	b089      	sub	sp, #36	; 0x24
 802ae90:	af04      	add	r7, sp, #16
 802ae92:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802ae94:	2301      	movs	r3, #1
 802ae96:	2202      	movs	r2, #2
 802ae98:	2102      	movs	r1, #2
 802ae9a:	6878      	ldr	r0, [r7, #4]
 802ae9c:	f000 fc66 	bl	802b76c <USBH_FindInterface>
 802aea0:	4603      	mov	r3, r0
 802aea2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802aea4:	7bfb      	ldrb	r3, [r7, #15]
 802aea6:	2bff      	cmp	r3, #255	; 0xff
 802aea8:	d002      	beq.n	802aeb0 <USBH_CDC_InterfaceInit+0x24>
 802aeaa:	7bfb      	ldrb	r3, [r7, #15]
 802aeac:	2b01      	cmp	r3, #1
 802aeae:	d901      	bls.n	802aeb4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802aeb0:	2302      	movs	r3, #2
 802aeb2:	e13d      	b.n	802b130 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802aeb4:	7bfb      	ldrb	r3, [r7, #15]
 802aeb6:	4619      	mov	r1, r3
 802aeb8:	6878      	ldr	r0, [r7, #4]
 802aeba:	f000 fc3b 	bl	802b734 <USBH_SelectInterface>
 802aebe:	4603      	mov	r3, r0
 802aec0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802aec2:	7bbb      	ldrb	r3, [r7, #14]
 802aec4:	2b00      	cmp	r3, #0
 802aec6:	d001      	beq.n	802aecc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802aec8:	2302      	movs	r3, #2
 802aeca:	e131      	b.n	802b130 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802aecc:	687b      	ldr	r3, [r7, #4]
 802aece:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802aed2:	2050      	movs	r0, #80	; 0x50
 802aed4:	f002 fb00 	bl	802d4d8 <malloc>
 802aed8:	4603      	mov	r3, r0
 802aeda:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802aedc:	687b      	ldr	r3, [r7, #4]
 802aede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802aee2:	69db      	ldr	r3, [r3, #28]
 802aee4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802aee6:	68bb      	ldr	r3, [r7, #8]
 802aee8:	2b00      	cmp	r3, #0
 802aeea:	d101      	bne.n	802aef0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802aeec:	2302      	movs	r3, #2
 802aeee:	e11f      	b.n	802b130 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802aef0:	2250      	movs	r2, #80	; 0x50
 802aef2:	2100      	movs	r1, #0
 802aef4:	68b8      	ldr	r0, [r7, #8]
 802aef6:	f002 faff 	bl	802d4f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802aefa:	7bfb      	ldrb	r3, [r7, #15]
 802aefc:	687a      	ldr	r2, [r7, #4]
 802aefe:	211a      	movs	r1, #26
 802af00:	fb01 f303 	mul.w	r3, r1, r3
 802af04:	4413      	add	r3, r2
 802af06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802af0a:	781b      	ldrb	r3, [r3, #0]
 802af0c:	b25b      	sxtb	r3, r3
 802af0e:	2b00      	cmp	r3, #0
 802af10:	da15      	bge.n	802af3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802af12:	7bfb      	ldrb	r3, [r7, #15]
 802af14:	687a      	ldr	r2, [r7, #4]
 802af16:	211a      	movs	r1, #26
 802af18:	fb01 f303 	mul.w	r3, r1, r3
 802af1c:	4413      	add	r3, r2
 802af1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802af22:	781a      	ldrb	r2, [r3, #0]
 802af24:	68bb      	ldr	r3, [r7, #8]
 802af26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802af28:	7bfb      	ldrb	r3, [r7, #15]
 802af2a:	687a      	ldr	r2, [r7, #4]
 802af2c:	211a      	movs	r1, #26
 802af2e:	fb01 f303 	mul.w	r3, r1, r3
 802af32:	4413      	add	r3, r2
 802af34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802af38:	881a      	ldrh	r2, [r3, #0]
 802af3a:	68bb      	ldr	r3, [r7, #8]
 802af3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802af3e:	68bb      	ldr	r3, [r7, #8]
 802af40:	785b      	ldrb	r3, [r3, #1]
 802af42:	4619      	mov	r1, r3
 802af44:	6878      	ldr	r0, [r7, #4]
 802af46:	f001 ff2c 	bl	802cda2 <USBH_AllocPipe>
 802af4a:	4603      	mov	r3, r0
 802af4c:	461a      	mov	r2, r3
 802af4e:	68bb      	ldr	r3, [r7, #8]
 802af50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802af52:	68bb      	ldr	r3, [r7, #8]
 802af54:	7819      	ldrb	r1, [r3, #0]
 802af56:	68bb      	ldr	r3, [r7, #8]
 802af58:	7858      	ldrb	r0, [r3, #1]
 802af5a:	687b      	ldr	r3, [r7, #4]
 802af5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802af60:	687b      	ldr	r3, [r7, #4]
 802af62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802af66:	68ba      	ldr	r2, [r7, #8]
 802af68:	8952      	ldrh	r2, [r2, #10]
 802af6a:	9202      	str	r2, [sp, #8]
 802af6c:	2203      	movs	r2, #3
 802af6e:	9201      	str	r2, [sp, #4]
 802af70:	9300      	str	r3, [sp, #0]
 802af72:	4623      	mov	r3, r4
 802af74:	4602      	mov	r2, r0
 802af76:	6878      	ldr	r0, [r7, #4]
 802af78:	f001 fee4 	bl	802cd44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802af7c:	68bb      	ldr	r3, [r7, #8]
 802af7e:	781b      	ldrb	r3, [r3, #0]
 802af80:	2200      	movs	r2, #0
 802af82:	4619      	mov	r1, r3
 802af84:	6878      	ldr	r0, [r7, #4]
 802af86:	f002 f9f9 	bl	802d37c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802af8a:	2300      	movs	r3, #0
 802af8c:	2200      	movs	r2, #0
 802af8e:	210a      	movs	r1, #10
 802af90:	6878      	ldr	r0, [r7, #4]
 802af92:	f000 fbeb 	bl	802b76c <USBH_FindInterface>
 802af96:	4603      	mov	r3, r0
 802af98:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802af9a:	7bfb      	ldrb	r3, [r7, #15]
 802af9c:	2bff      	cmp	r3, #255	; 0xff
 802af9e:	d002      	beq.n	802afa6 <USBH_CDC_InterfaceInit+0x11a>
 802afa0:	7bfb      	ldrb	r3, [r7, #15]
 802afa2:	2b01      	cmp	r3, #1
 802afa4:	d901      	bls.n	802afaa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802afa6:	2302      	movs	r3, #2
 802afa8:	e0c2      	b.n	802b130 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802afaa:	7bfb      	ldrb	r3, [r7, #15]
 802afac:	687a      	ldr	r2, [r7, #4]
 802afae:	211a      	movs	r1, #26
 802afb0:	fb01 f303 	mul.w	r3, r1, r3
 802afb4:	4413      	add	r3, r2
 802afb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802afba:	781b      	ldrb	r3, [r3, #0]
 802afbc:	b25b      	sxtb	r3, r3
 802afbe:	2b00      	cmp	r3, #0
 802afc0:	da16      	bge.n	802aff0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802afc2:	7bfb      	ldrb	r3, [r7, #15]
 802afc4:	687a      	ldr	r2, [r7, #4]
 802afc6:	211a      	movs	r1, #26
 802afc8:	fb01 f303 	mul.w	r3, r1, r3
 802afcc:	4413      	add	r3, r2
 802afce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802afd2:	781a      	ldrb	r2, [r3, #0]
 802afd4:	68bb      	ldr	r3, [r7, #8]
 802afd6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802afd8:	7bfb      	ldrb	r3, [r7, #15]
 802afda:	687a      	ldr	r2, [r7, #4]
 802afdc:	211a      	movs	r1, #26
 802afde:	fb01 f303 	mul.w	r3, r1, r3
 802afe2:	4413      	add	r3, r2
 802afe4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802afe8:	881a      	ldrh	r2, [r3, #0]
 802afea:	68bb      	ldr	r3, [r7, #8]
 802afec:	835a      	strh	r2, [r3, #26]
 802afee:	e015      	b.n	802b01c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802aff0:	7bfb      	ldrb	r3, [r7, #15]
 802aff2:	687a      	ldr	r2, [r7, #4]
 802aff4:	211a      	movs	r1, #26
 802aff6:	fb01 f303 	mul.w	r3, r1, r3
 802affa:	4413      	add	r3, r2
 802affc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b000:	781a      	ldrb	r2, [r3, #0]
 802b002:	68bb      	ldr	r3, [r7, #8]
 802b004:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b006:	7bfb      	ldrb	r3, [r7, #15]
 802b008:	687a      	ldr	r2, [r7, #4]
 802b00a:	211a      	movs	r1, #26
 802b00c:	fb01 f303 	mul.w	r3, r1, r3
 802b010:	4413      	add	r3, r2
 802b012:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b016:	881a      	ldrh	r2, [r3, #0]
 802b018:	68bb      	ldr	r3, [r7, #8]
 802b01a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802b01c:	7bfb      	ldrb	r3, [r7, #15]
 802b01e:	687a      	ldr	r2, [r7, #4]
 802b020:	211a      	movs	r1, #26
 802b022:	fb01 f303 	mul.w	r3, r1, r3
 802b026:	4413      	add	r3, r2
 802b028:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b02c:	781b      	ldrb	r3, [r3, #0]
 802b02e:	b25b      	sxtb	r3, r3
 802b030:	2b00      	cmp	r3, #0
 802b032:	da16      	bge.n	802b062 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b034:	7bfb      	ldrb	r3, [r7, #15]
 802b036:	687a      	ldr	r2, [r7, #4]
 802b038:	211a      	movs	r1, #26
 802b03a:	fb01 f303 	mul.w	r3, r1, r3
 802b03e:	4413      	add	r3, r2
 802b040:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b044:	781a      	ldrb	r2, [r3, #0]
 802b046:	68bb      	ldr	r3, [r7, #8]
 802b048:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b04a:	7bfb      	ldrb	r3, [r7, #15]
 802b04c:	687a      	ldr	r2, [r7, #4]
 802b04e:	211a      	movs	r1, #26
 802b050:	fb01 f303 	mul.w	r3, r1, r3
 802b054:	4413      	add	r3, r2
 802b056:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b05a:	881a      	ldrh	r2, [r3, #0]
 802b05c:	68bb      	ldr	r3, [r7, #8]
 802b05e:	835a      	strh	r2, [r3, #26]
 802b060:	e015      	b.n	802b08e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b062:	7bfb      	ldrb	r3, [r7, #15]
 802b064:	687a      	ldr	r2, [r7, #4]
 802b066:	211a      	movs	r1, #26
 802b068:	fb01 f303 	mul.w	r3, r1, r3
 802b06c:	4413      	add	r3, r2
 802b06e:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b072:	781a      	ldrb	r2, [r3, #0]
 802b074:	68bb      	ldr	r3, [r7, #8]
 802b076:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b078:	7bfb      	ldrb	r3, [r7, #15]
 802b07a:	687a      	ldr	r2, [r7, #4]
 802b07c:	211a      	movs	r1, #26
 802b07e:	fb01 f303 	mul.w	r3, r1, r3
 802b082:	4413      	add	r3, r2
 802b084:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b088:	881a      	ldrh	r2, [r3, #0]
 802b08a:	68bb      	ldr	r3, [r7, #8]
 802b08c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802b08e:	68bb      	ldr	r3, [r7, #8]
 802b090:	7b9b      	ldrb	r3, [r3, #14]
 802b092:	4619      	mov	r1, r3
 802b094:	6878      	ldr	r0, [r7, #4]
 802b096:	f001 fe84 	bl	802cda2 <USBH_AllocPipe>
 802b09a:	4603      	mov	r3, r0
 802b09c:	461a      	mov	r2, r3
 802b09e:	68bb      	ldr	r3, [r7, #8]
 802b0a0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802b0a2:	68bb      	ldr	r3, [r7, #8]
 802b0a4:	7bdb      	ldrb	r3, [r3, #15]
 802b0a6:	4619      	mov	r1, r3
 802b0a8:	6878      	ldr	r0, [r7, #4]
 802b0aa:	f001 fe7a 	bl	802cda2 <USBH_AllocPipe>
 802b0ae:	4603      	mov	r3, r0
 802b0b0:	461a      	mov	r2, r3
 802b0b2:	68bb      	ldr	r3, [r7, #8]
 802b0b4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802b0b6:	68bb      	ldr	r3, [r7, #8]
 802b0b8:	7b59      	ldrb	r1, [r3, #13]
 802b0ba:	68bb      	ldr	r3, [r7, #8]
 802b0bc:	7b98      	ldrb	r0, [r3, #14]
 802b0be:	687b      	ldr	r3, [r7, #4]
 802b0c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b0c4:	687b      	ldr	r3, [r7, #4]
 802b0c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b0ca:	68ba      	ldr	r2, [r7, #8]
 802b0cc:	8b12      	ldrh	r2, [r2, #24]
 802b0ce:	9202      	str	r2, [sp, #8]
 802b0d0:	2202      	movs	r2, #2
 802b0d2:	9201      	str	r2, [sp, #4]
 802b0d4:	9300      	str	r3, [sp, #0]
 802b0d6:	4623      	mov	r3, r4
 802b0d8:	4602      	mov	r2, r0
 802b0da:	6878      	ldr	r0, [r7, #4]
 802b0dc:	f001 fe32 	bl	802cd44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802b0e0:	68bb      	ldr	r3, [r7, #8]
 802b0e2:	7b19      	ldrb	r1, [r3, #12]
 802b0e4:	68bb      	ldr	r3, [r7, #8]
 802b0e6:	7bd8      	ldrb	r0, [r3, #15]
 802b0e8:	687b      	ldr	r3, [r7, #4]
 802b0ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b0ee:	687b      	ldr	r3, [r7, #4]
 802b0f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b0f4:	68ba      	ldr	r2, [r7, #8]
 802b0f6:	8b52      	ldrh	r2, [r2, #26]
 802b0f8:	9202      	str	r2, [sp, #8]
 802b0fa:	2202      	movs	r2, #2
 802b0fc:	9201      	str	r2, [sp, #4]
 802b0fe:	9300      	str	r3, [sp, #0]
 802b100:	4623      	mov	r3, r4
 802b102:	4602      	mov	r2, r0
 802b104:	6878      	ldr	r0, [r7, #4]
 802b106:	f001 fe1d 	bl	802cd44 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802b10a:	68bb      	ldr	r3, [r7, #8]
 802b10c:	2200      	movs	r2, #0
 802b10e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802b112:	68bb      	ldr	r3, [r7, #8]
 802b114:	7b5b      	ldrb	r3, [r3, #13]
 802b116:	2200      	movs	r2, #0
 802b118:	4619      	mov	r1, r3
 802b11a:	6878      	ldr	r0, [r7, #4]
 802b11c:	f002 f92e 	bl	802d37c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802b120:	68bb      	ldr	r3, [r7, #8]
 802b122:	7b1b      	ldrb	r3, [r3, #12]
 802b124:	2200      	movs	r2, #0
 802b126:	4619      	mov	r1, r3
 802b128:	6878      	ldr	r0, [r7, #4]
 802b12a:	f002 f927 	bl	802d37c <USBH_LL_SetToggle>

  return USBH_OK;
 802b12e:	2300      	movs	r3, #0
}
 802b130:	4618      	mov	r0, r3
 802b132:	3714      	adds	r7, #20
 802b134:	46bd      	mov	sp, r7
 802b136:	bd90      	pop	{r4, r7, pc}

0802b138 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802b138:	b580      	push	{r7, lr}
 802b13a:	b084      	sub	sp, #16
 802b13c:	af00      	add	r7, sp, #0
 802b13e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b140:	687b      	ldr	r3, [r7, #4]
 802b142:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b146:	69db      	ldr	r3, [r3, #28]
 802b148:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802b14a:	68fb      	ldr	r3, [r7, #12]
 802b14c:	781b      	ldrb	r3, [r3, #0]
 802b14e:	2b00      	cmp	r3, #0
 802b150:	d00e      	beq.n	802b170 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b152:	68fb      	ldr	r3, [r7, #12]
 802b154:	781b      	ldrb	r3, [r3, #0]
 802b156:	4619      	mov	r1, r3
 802b158:	6878      	ldr	r0, [r7, #4]
 802b15a:	f001 fe12 	bl	802cd82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b15e:	68fb      	ldr	r3, [r7, #12]
 802b160:	781b      	ldrb	r3, [r3, #0]
 802b162:	4619      	mov	r1, r3
 802b164:	6878      	ldr	r0, [r7, #4]
 802b166:	f001 fe3d 	bl	802cde4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802b16a:	68fb      	ldr	r3, [r7, #12]
 802b16c:	2200      	movs	r2, #0
 802b16e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802b170:	68fb      	ldr	r3, [r7, #12]
 802b172:	7b1b      	ldrb	r3, [r3, #12]
 802b174:	2b00      	cmp	r3, #0
 802b176:	d00e      	beq.n	802b196 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802b178:	68fb      	ldr	r3, [r7, #12]
 802b17a:	7b1b      	ldrb	r3, [r3, #12]
 802b17c:	4619      	mov	r1, r3
 802b17e:	6878      	ldr	r0, [r7, #4]
 802b180:	f001 fdff 	bl	802cd82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802b184:	68fb      	ldr	r3, [r7, #12]
 802b186:	7b1b      	ldrb	r3, [r3, #12]
 802b188:	4619      	mov	r1, r3
 802b18a:	6878      	ldr	r0, [r7, #4]
 802b18c:	f001 fe2a 	bl	802cde4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802b190:	68fb      	ldr	r3, [r7, #12]
 802b192:	2200      	movs	r2, #0
 802b194:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802b196:	68fb      	ldr	r3, [r7, #12]
 802b198:	7b5b      	ldrb	r3, [r3, #13]
 802b19a:	2b00      	cmp	r3, #0
 802b19c:	d00e      	beq.n	802b1bc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b19e:	68fb      	ldr	r3, [r7, #12]
 802b1a0:	7b5b      	ldrb	r3, [r3, #13]
 802b1a2:	4619      	mov	r1, r3
 802b1a4:	6878      	ldr	r0, [r7, #4]
 802b1a6:	f001 fdec 	bl	802cd82 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b1aa:	68fb      	ldr	r3, [r7, #12]
 802b1ac:	7b5b      	ldrb	r3, [r3, #13]
 802b1ae:	4619      	mov	r1, r3
 802b1b0:	6878      	ldr	r0, [r7, #4]
 802b1b2:	f001 fe17 	bl	802cde4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802b1b6:	68fb      	ldr	r3, [r7, #12]
 802b1b8:	2200      	movs	r2, #0
 802b1ba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1c2:	69db      	ldr	r3, [r3, #28]
 802b1c4:	2b00      	cmp	r3, #0
 802b1c6:	d00b      	beq.n	802b1e0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802b1c8:	687b      	ldr	r3, [r7, #4]
 802b1ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1ce:	69db      	ldr	r3, [r3, #28]
 802b1d0:	4618      	mov	r0, r3
 802b1d2:	f002 f989 	bl	802d4e8 <free>
    phost->pActiveClass->pData = 0U;
 802b1d6:	687b      	ldr	r3, [r7, #4]
 802b1d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1dc:	2200      	movs	r2, #0
 802b1de:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802b1e0:	2300      	movs	r3, #0
}
 802b1e2:	4618      	mov	r0, r3
 802b1e4:	3710      	adds	r7, #16
 802b1e6:	46bd      	mov	sp, r7
 802b1e8:	bd80      	pop	{r7, pc}

0802b1ea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802b1ea:	b580      	push	{r7, lr}
 802b1ec:	b084      	sub	sp, #16
 802b1ee:	af00      	add	r7, sp, #0
 802b1f0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b1f2:	687b      	ldr	r3, [r7, #4]
 802b1f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b1f8:	69db      	ldr	r3, [r3, #28]
 802b1fa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802b1fc:	68fb      	ldr	r3, [r7, #12]
 802b1fe:	3340      	adds	r3, #64	; 0x40
 802b200:	4619      	mov	r1, r3
 802b202:	6878      	ldr	r0, [r7, #4]
 802b204:	f000 f8b1 	bl	802b36a <GetLineCoding>
 802b208:	4603      	mov	r3, r0
 802b20a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802b20c:	7afb      	ldrb	r3, [r7, #11]
 802b20e:	2b00      	cmp	r3, #0
 802b210:	d105      	bne.n	802b21e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802b212:	687b      	ldr	r3, [r7, #4]
 802b214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b218:	2102      	movs	r1, #2
 802b21a:	6878      	ldr	r0, [r7, #4]
 802b21c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802b21e:	7afb      	ldrb	r3, [r7, #11]
}
 802b220:	4618      	mov	r0, r3
 802b222:	3710      	adds	r7, #16
 802b224:	46bd      	mov	sp, r7
 802b226:	bd80      	pop	{r7, pc}

0802b228 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802b228:	b580      	push	{r7, lr}
 802b22a:	b084      	sub	sp, #16
 802b22c:	af00      	add	r7, sp, #0
 802b22e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802b230:	2301      	movs	r3, #1
 802b232:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802b234:	2300      	movs	r3, #0
 802b236:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b238:	687b      	ldr	r3, [r7, #4]
 802b23a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b23e:	69db      	ldr	r3, [r3, #28]
 802b240:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802b242:	68bb      	ldr	r3, [r7, #8]
 802b244:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802b248:	2b04      	cmp	r3, #4
 802b24a:	d877      	bhi.n	802b33c <USBH_CDC_Process+0x114>
 802b24c:	a201      	add	r2, pc, #4	; (adr r2, 802b254 <USBH_CDC_Process+0x2c>)
 802b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b252:	bf00      	nop
 802b254:	0802b269 	.word	0x0802b269
 802b258:	0802b26f 	.word	0x0802b26f
 802b25c:	0802b29f 	.word	0x0802b29f
 802b260:	0802b313 	.word	0x0802b313
 802b264:	0802b321 	.word	0x0802b321
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802b268:	2300      	movs	r3, #0
 802b26a:	73fb      	strb	r3, [r7, #15]
      break;
 802b26c:	e06d      	b.n	802b34a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802b26e:	68bb      	ldr	r3, [r7, #8]
 802b270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b272:	4619      	mov	r1, r3
 802b274:	6878      	ldr	r0, [r7, #4]
 802b276:	f000 f897 	bl	802b3a8 <SetLineCoding>
 802b27a:	4603      	mov	r3, r0
 802b27c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b27e:	7bbb      	ldrb	r3, [r7, #14]
 802b280:	2b00      	cmp	r3, #0
 802b282:	d104      	bne.n	802b28e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802b284:	68bb      	ldr	r3, [r7, #8]
 802b286:	2202      	movs	r2, #2
 802b288:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b28c:	e058      	b.n	802b340 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802b28e:	7bbb      	ldrb	r3, [r7, #14]
 802b290:	2b01      	cmp	r3, #1
 802b292:	d055      	beq.n	802b340 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b294:	68bb      	ldr	r3, [r7, #8]
 802b296:	2204      	movs	r2, #4
 802b298:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b29c:	e050      	b.n	802b340 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802b29e:	68bb      	ldr	r3, [r7, #8]
 802b2a0:	3340      	adds	r3, #64	; 0x40
 802b2a2:	4619      	mov	r1, r3
 802b2a4:	6878      	ldr	r0, [r7, #4]
 802b2a6:	f000 f860 	bl	802b36a <GetLineCoding>
 802b2aa:	4603      	mov	r3, r0
 802b2ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b2ae:	7bbb      	ldrb	r3, [r7, #14]
 802b2b0:	2b00      	cmp	r3, #0
 802b2b2:	d126      	bne.n	802b302 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802b2b4:	68bb      	ldr	r3, [r7, #8]
 802b2b6:	2200      	movs	r2, #0
 802b2b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b2bc:	68bb      	ldr	r3, [r7, #8]
 802b2be:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802b2c2:	68bb      	ldr	r3, [r7, #8]
 802b2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b2c6:	791b      	ldrb	r3, [r3, #4]
 802b2c8:	429a      	cmp	r2, r3
 802b2ca:	d13b      	bne.n	802b344 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b2cc:	68bb      	ldr	r3, [r7, #8]
 802b2ce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802b2d2:	68bb      	ldr	r3, [r7, #8]
 802b2d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b2d6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b2d8:	429a      	cmp	r2, r3
 802b2da:	d133      	bne.n	802b344 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b2dc:	68bb      	ldr	r3, [r7, #8]
 802b2de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802b2e2:	68bb      	ldr	r3, [r7, #8]
 802b2e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b2e6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b2e8:	429a      	cmp	r2, r3
 802b2ea:	d12b      	bne.n	802b344 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802b2ec:	68bb      	ldr	r3, [r7, #8]
 802b2ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b2f0:	68bb      	ldr	r3, [r7, #8]
 802b2f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b2f4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b2f6:	429a      	cmp	r2, r3
 802b2f8:	d124      	bne.n	802b344 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802b2fa:	6878      	ldr	r0, [r7, #4]
 802b2fc:	f000 f958 	bl	802b5b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b300:	e020      	b.n	802b344 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802b302:	7bbb      	ldrb	r3, [r7, #14]
 802b304:	2b01      	cmp	r3, #1
 802b306:	d01d      	beq.n	802b344 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b308:	68bb      	ldr	r3, [r7, #8]
 802b30a:	2204      	movs	r2, #4
 802b30c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b310:	e018      	b.n	802b344 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802b312:	6878      	ldr	r0, [r7, #4]
 802b314:	f000 f867 	bl	802b3e6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802b318:	6878      	ldr	r0, [r7, #4]
 802b31a:	f000 f8da 	bl	802b4d2 <CDC_ProcessReception>
      break;
 802b31e:	e014      	b.n	802b34a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802b320:	2100      	movs	r1, #0
 802b322:	6878      	ldr	r0, [r7, #4]
 802b324:	f000 ffef 	bl	802c306 <USBH_ClrFeature>
 802b328:	4603      	mov	r3, r0
 802b32a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b32c:	7bbb      	ldrb	r3, [r7, #14]
 802b32e:	2b00      	cmp	r3, #0
 802b330:	d10a      	bne.n	802b348 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802b332:	68bb      	ldr	r3, [r7, #8]
 802b334:	2200      	movs	r2, #0
 802b336:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802b33a:	e005      	b.n	802b348 <USBH_CDC_Process+0x120>

    default:
      break;
 802b33c:	bf00      	nop
 802b33e:	e004      	b.n	802b34a <USBH_CDC_Process+0x122>
      break;
 802b340:	bf00      	nop
 802b342:	e002      	b.n	802b34a <USBH_CDC_Process+0x122>
      break;
 802b344:	bf00      	nop
 802b346:	e000      	b.n	802b34a <USBH_CDC_Process+0x122>
      break;
 802b348:	bf00      	nop

  }

  return status;
 802b34a:	7bfb      	ldrb	r3, [r7, #15]
}
 802b34c:	4618      	mov	r0, r3
 802b34e:	3710      	adds	r7, #16
 802b350:	46bd      	mov	sp, r7
 802b352:	bd80      	pop	{r7, pc}

0802b354 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802b354:	b480      	push	{r7}
 802b356:	b083      	sub	sp, #12
 802b358:	af00      	add	r7, sp, #0
 802b35a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802b35c:	2300      	movs	r3, #0
}
 802b35e:	4618      	mov	r0, r3
 802b360:	370c      	adds	r7, #12
 802b362:	46bd      	mov	sp, r7
 802b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b368:	4770      	bx	lr

0802b36a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802b36a:	b580      	push	{r7, lr}
 802b36c:	b082      	sub	sp, #8
 802b36e:	af00      	add	r7, sp, #0
 802b370:	6078      	str	r0, [r7, #4]
 802b372:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802b374:	687b      	ldr	r3, [r7, #4]
 802b376:	22a1      	movs	r2, #161	; 0xa1
 802b378:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802b37a:	687b      	ldr	r3, [r7, #4]
 802b37c:	2221      	movs	r2, #33	; 0x21
 802b37e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b380:	687b      	ldr	r3, [r7, #4]
 802b382:	2200      	movs	r2, #0
 802b384:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802b386:	687b      	ldr	r3, [r7, #4]
 802b388:	2200      	movs	r2, #0
 802b38a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b38c:	687b      	ldr	r3, [r7, #4]
 802b38e:	2207      	movs	r2, #7
 802b390:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b392:	683b      	ldr	r3, [r7, #0]
 802b394:	2207      	movs	r2, #7
 802b396:	4619      	mov	r1, r3
 802b398:	6878      	ldr	r0, [r7, #4]
 802b39a:	f001 fa81 	bl	802c8a0 <USBH_CtlReq>
 802b39e:	4603      	mov	r3, r0
}
 802b3a0:	4618      	mov	r0, r3
 802b3a2:	3708      	adds	r7, #8
 802b3a4:	46bd      	mov	sp, r7
 802b3a6:	bd80      	pop	{r7, pc}

0802b3a8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802b3a8:	b580      	push	{r7, lr}
 802b3aa:	b082      	sub	sp, #8
 802b3ac:	af00      	add	r7, sp, #0
 802b3ae:	6078      	str	r0, [r7, #4]
 802b3b0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802b3b2:	687b      	ldr	r3, [r7, #4]
 802b3b4:	2221      	movs	r2, #33	; 0x21
 802b3b6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802b3b8:	687b      	ldr	r3, [r7, #4]
 802b3ba:	2220      	movs	r2, #32
 802b3bc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b3be:	687b      	ldr	r3, [r7, #4]
 802b3c0:	2200      	movs	r2, #0
 802b3c2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802b3c4:	687b      	ldr	r3, [r7, #4]
 802b3c6:	2200      	movs	r2, #0
 802b3c8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b3ca:	687b      	ldr	r3, [r7, #4]
 802b3cc:	2207      	movs	r2, #7
 802b3ce:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b3d0:	683b      	ldr	r3, [r7, #0]
 802b3d2:	2207      	movs	r2, #7
 802b3d4:	4619      	mov	r1, r3
 802b3d6:	6878      	ldr	r0, [r7, #4]
 802b3d8:	f001 fa62 	bl	802c8a0 <USBH_CtlReq>
 802b3dc:	4603      	mov	r3, r0
}
 802b3de:	4618      	mov	r0, r3
 802b3e0:	3708      	adds	r7, #8
 802b3e2:	46bd      	mov	sp, r7
 802b3e4:	bd80      	pop	{r7, pc}

0802b3e6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802b3e6:	b580      	push	{r7, lr}
 802b3e8:	b086      	sub	sp, #24
 802b3ea:	af02      	add	r7, sp, #8
 802b3ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b3ee:	687b      	ldr	r3, [r7, #4]
 802b3f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b3f4:	69db      	ldr	r3, [r3, #28]
 802b3f6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b3f8:	2300      	movs	r3, #0
 802b3fa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802b3fc:	68fb      	ldr	r3, [r7, #12]
 802b3fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802b402:	2b01      	cmp	r3, #1
 802b404:	d002      	beq.n	802b40c <CDC_ProcessTransmission+0x26>
 802b406:	2b02      	cmp	r3, #2
 802b408:	d023      	beq.n	802b452 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802b40a:	e05e      	b.n	802b4ca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b40c:	68fb      	ldr	r3, [r7, #12]
 802b40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b410:	68fa      	ldr	r2, [r7, #12]
 802b412:	8b12      	ldrh	r2, [r2, #24]
 802b414:	4293      	cmp	r3, r2
 802b416:	d90b      	bls.n	802b430 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802b418:	68fb      	ldr	r3, [r7, #12]
 802b41a:	69d9      	ldr	r1, [r3, #28]
 802b41c:	68fb      	ldr	r3, [r7, #12]
 802b41e:	8b1a      	ldrh	r2, [r3, #24]
 802b420:	68fb      	ldr	r3, [r7, #12]
 802b422:	7b5b      	ldrb	r3, [r3, #13]
 802b424:	2001      	movs	r0, #1
 802b426:	9000      	str	r0, [sp, #0]
 802b428:	6878      	ldr	r0, [r7, #4]
 802b42a:	f001 fc48 	bl	802ccbe <USBH_BulkSendData>
 802b42e:	e00b      	b.n	802b448 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802b430:	68fb      	ldr	r3, [r7, #12]
 802b432:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802b434:	68fb      	ldr	r3, [r7, #12]
 802b436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802b438:	b29a      	uxth	r2, r3
 802b43a:	68fb      	ldr	r3, [r7, #12]
 802b43c:	7b5b      	ldrb	r3, [r3, #13]
 802b43e:	2001      	movs	r0, #1
 802b440:	9000      	str	r0, [sp, #0]
 802b442:	6878      	ldr	r0, [r7, #4]
 802b444:	f001 fc3b 	bl	802ccbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802b448:	68fb      	ldr	r3, [r7, #12]
 802b44a:	2202      	movs	r2, #2
 802b44c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b450:	e03b      	b.n	802b4ca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802b452:	68fb      	ldr	r3, [r7, #12]
 802b454:	7b5b      	ldrb	r3, [r3, #13]
 802b456:	4619      	mov	r1, r3
 802b458:	6878      	ldr	r0, [r7, #4]
 802b45a:	f001 ff65 	bl	802d328 <USBH_LL_GetURBState>
 802b45e:	4603      	mov	r3, r0
 802b460:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802b462:	7afb      	ldrb	r3, [r7, #11]
 802b464:	2b01      	cmp	r3, #1
 802b466:	d128      	bne.n	802b4ba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b468:	68fb      	ldr	r3, [r7, #12]
 802b46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b46c:	68fa      	ldr	r2, [r7, #12]
 802b46e:	8b12      	ldrh	r2, [r2, #24]
 802b470:	4293      	cmp	r3, r2
 802b472:	d90e      	bls.n	802b492 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802b474:	68fb      	ldr	r3, [r7, #12]
 802b476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b478:	68fa      	ldr	r2, [r7, #12]
 802b47a:	8b12      	ldrh	r2, [r2, #24]
 802b47c:	1a9a      	subs	r2, r3, r2
 802b47e:	68fb      	ldr	r3, [r7, #12]
 802b480:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802b482:	68fb      	ldr	r3, [r7, #12]
 802b484:	69db      	ldr	r3, [r3, #28]
 802b486:	68fa      	ldr	r2, [r7, #12]
 802b488:	8b12      	ldrh	r2, [r2, #24]
 802b48a:	441a      	add	r2, r3
 802b48c:	68fb      	ldr	r3, [r7, #12]
 802b48e:	61da      	str	r2, [r3, #28]
 802b490:	e002      	b.n	802b498 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802b492:	68fb      	ldr	r3, [r7, #12]
 802b494:	2200      	movs	r2, #0
 802b496:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802b498:	68fb      	ldr	r3, [r7, #12]
 802b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b49c:	2b00      	cmp	r3, #0
 802b49e:	d004      	beq.n	802b4aa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b4a0:	68fb      	ldr	r3, [r7, #12]
 802b4a2:	2201      	movs	r2, #1
 802b4a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b4a8:	e00e      	b.n	802b4c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802b4aa:	68fb      	ldr	r3, [r7, #12]
 802b4ac:	2200      	movs	r2, #0
 802b4ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802b4b2:	6878      	ldr	r0, [r7, #4]
 802b4b4:	f000 f868 	bl	802b588 <USBH_CDC_TransmitCallback>
      break;
 802b4b8:	e006      	b.n	802b4c8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802b4ba:	7afb      	ldrb	r3, [r7, #11]
 802b4bc:	2b02      	cmp	r3, #2
 802b4be:	d103      	bne.n	802b4c8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b4c0:	68fb      	ldr	r3, [r7, #12]
 802b4c2:	2201      	movs	r2, #1
 802b4c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b4c8:	bf00      	nop
  }
}
 802b4ca:	bf00      	nop
 802b4cc:	3710      	adds	r7, #16
 802b4ce:	46bd      	mov	sp, r7
 802b4d0:	bd80      	pop	{r7, pc}

0802b4d2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802b4d2:	b580      	push	{r7, lr}
 802b4d4:	b086      	sub	sp, #24
 802b4d6:	af00      	add	r7, sp, #0
 802b4d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b4da:	687b      	ldr	r3, [r7, #4]
 802b4dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b4e0:	69db      	ldr	r3, [r3, #28]
 802b4e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b4e4:	2300      	movs	r3, #0
 802b4e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802b4e8:	697b      	ldr	r3, [r7, #20]
 802b4ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802b4ee:	2b03      	cmp	r3, #3
 802b4f0:	d002      	beq.n	802b4f8 <CDC_ProcessReception+0x26>
 802b4f2:	2b04      	cmp	r3, #4
 802b4f4:	d00e      	beq.n	802b514 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802b4f6:	e043      	b.n	802b580 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802b4f8:	697b      	ldr	r3, [r7, #20]
 802b4fa:	6a19      	ldr	r1, [r3, #32]
 802b4fc:	697b      	ldr	r3, [r7, #20]
 802b4fe:	8b5a      	ldrh	r2, [r3, #26]
 802b500:	697b      	ldr	r3, [r7, #20]
 802b502:	7b1b      	ldrb	r3, [r3, #12]
 802b504:	6878      	ldr	r0, [r7, #4]
 802b506:	f001 fbff 	bl	802cd08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802b50a:	697b      	ldr	r3, [r7, #20]
 802b50c:	2204      	movs	r2, #4
 802b50e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b512:	e035      	b.n	802b580 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802b514:	697b      	ldr	r3, [r7, #20]
 802b516:	7b1b      	ldrb	r3, [r3, #12]
 802b518:	4619      	mov	r1, r3
 802b51a:	6878      	ldr	r0, [r7, #4]
 802b51c:	f001 ff04 	bl	802d328 <USBH_LL_GetURBState>
 802b520:	4603      	mov	r3, r0
 802b522:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802b524:	7cfb      	ldrb	r3, [r7, #19]
 802b526:	2b01      	cmp	r3, #1
 802b528:	d129      	bne.n	802b57e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802b52a:	697b      	ldr	r3, [r7, #20]
 802b52c:	7b1b      	ldrb	r3, [r3, #12]
 802b52e:	4619      	mov	r1, r3
 802b530:	6878      	ldr	r0, [r7, #4]
 802b532:	f001 fe67 	bl	802d204 <USBH_LL_GetLastXferSize>
 802b536:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802b538:	697b      	ldr	r3, [r7, #20]
 802b53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b53c:	68fa      	ldr	r2, [r7, #12]
 802b53e:	429a      	cmp	r2, r3
 802b540:	d016      	beq.n	802b570 <CDC_ProcessReception+0x9e>
 802b542:	697b      	ldr	r3, [r7, #20]
 802b544:	8b5b      	ldrh	r3, [r3, #26]
 802b546:	461a      	mov	r2, r3
 802b548:	68fb      	ldr	r3, [r7, #12]
 802b54a:	4293      	cmp	r3, r2
 802b54c:	d910      	bls.n	802b570 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802b54e:	697b      	ldr	r3, [r7, #20]
 802b550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b552:	68fb      	ldr	r3, [r7, #12]
 802b554:	1ad2      	subs	r2, r2, r3
 802b556:	697b      	ldr	r3, [r7, #20]
 802b558:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802b55a:	697b      	ldr	r3, [r7, #20]
 802b55c:	6a1a      	ldr	r2, [r3, #32]
 802b55e:	68fb      	ldr	r3, [r7, #12]
 802b560:	441a      	add	r2, r3
 802b562:	697b      	ldr	r3, [r7, #20]
 802b564:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802b566:	697b      	ldr	r3, [r7, #20]
 802b568:	2203      	movs	r2, #3
 802b56a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b56e:	e006      	b.n	802b57e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802b570:	697b      	ldr	r3, [r7, #20]
 802b572:	2200      	movs	r2, #0
 802b574:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802b578:	6878      	ldr	r0, [r7, #4]
 802b57a:	f000 f80f 	bl	802b59c <USBH_CDC_ReceiveCallback>
      break;
 802b57e:	bf00      	nop
  }
}
 802b580:	bf00      	nop
 802b582:	3718      	adds	r7, #24
 802b584:	46bd      	mov	sp, r7
 802b586:	bd80      	pop	{r7, pc}

0802b588 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802b588:	b480      	push	{r7}
 802b58a:	b083      	sub	sp, #12
 802b58c:	af00      	add	r7, sp, #0
 802b58e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b590:	bf00      	nop
 802b592:	370c      	adds	r7, #12
 802b594:	46bd      	mov	sp, r7
 802b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b59a:	4770      	bx	lr

0802b59c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802b59c:	b480      	push	{r7}
 802b59e:	b083      	sub	sp, #12
 802b5a0:	af00      	add	r7, sp, #0
 802b5a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b5a4:	bf00      	nop
 802b5a6:	370c      	adds	r7, #12
 802b5a8:	46bd      	mov	sp, r7
 802b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5ae:	4770      	bx	lr

0802b5b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802b5b0:	b480      	push	{r7}
 802b5b2:	b083      	sub	sp, #12
 802b5b4:	af00      	add	r7, sp, #0
 802b5b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b5b8:	bf00      	nop
 802b5ba:	370c      	adds	r7, #12
 802b5bc:	46bd      	mov	sp, r7
 802b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5c2:	4770      	bx	lr

0802b5c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802b5c4:	b580      	push	{r7, lr}
 802b5c6:	b084      	sub	sp, #16
 802b5c8:	af00      	add	r7, sp, #0
 802b5ca:	60f8      	str	r0, [r7, #12]
 802b5cc:	60b9      	str	r1, [r7, #8]
 802b5ce:	4613      	mov	r3, r2
 802b5d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802b5d2:	68fb      	ldr	r3, [r7, #12]
 802b5d4:	2b00      	cmp	r3, #0
 802b5d6:	d101      	bne.n	802b5dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802b5d8:	2302      	movs	r3, #2
 802b5da:	e029      	b.n	802b630 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802b5dc:	68fb      	ldr	r3, [r7, #12]
 802b5de:	79fa      	ldrb	r2, [r7, #7]
 802b5e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802b5e4:	68fb      	ldr	r3, [r7, #12]
 802b5e6:	2200      	movs	r2, #0
 802b5e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802b5ec:	68fb      	ldr	r3, [r7, #12]
 802b5ee:	2200      	movs	r2, #0
 802b5f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802b5f4:	68f8      	ldr	r0, [r7, #12]
 802b5f6:	f000 f81f 	bl	802b638 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802b5fa:	68fb      	ldr	r3, [r7, #12]
 802b5fc:	2200      	movs	r2, #0
 802b5fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802b602:	68fb      	ldr	r3, [r7, #12]
 802b604:	2200      	movs	r2, #0
 802b606:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b60a:	68fb      	ldr	r3, [r7, #12]
 802b60c:	2200      	movs	r2, #0
 802b60e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b612:	68fb      	ldr	r3, [r7, #12]
 802b614:	2200      	movs	r2, #0
 802b616:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802b61a:	68bb      	ldr	r3, [r7, #8]
 802b61c:	2b00      	cmp	r3, #0
 802b61e:	d003      	beq.n	802b628 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802b620:	68fb      	ldr	r3, [r7, #12]
 802b622:	68ba      	ldr	r2, [r7, #8]
 802b624:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802b628:	68f8      	ldr	r0, [r7, #12]
 802b62a:	f001 fd2d 	bl	802d088 <USBH_LL_Init>

  return USBH_OK;
 802b62e:	2300      	movs	r3, #0
}
 802b630:	4618      	mov	r0, r3
 802b632:	3710      	adds	r7, #16
 802b634:	46bd      	mov	sp, r7
 802b636:	bd80      	pop	{r7, pc}

0802b638 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802b638:	b480      	push	{r7}
 802b63a:	b085      	sub	sp, #20
 802b63c:	af00      	add	r7, sp, #0
 802b63e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802b640:	2300      	movs	r3, #0
 802b642:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b644:	2300      	movs	r3, #0
 802b646:	60fb      	str	r3, [r7, #12]
 802b648:	e009      	b.n	802b65e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802b64a:	687a      	ldr	r2, [r7, #4]
 802b64c:	68fb      	ldr	r3, [r7, #12]
 802b64e:	33e0      	adds	r3, #224	; 0xe0
 802b650:	009b      	lsls	r3, r3, #2
 802b652:	4413      	add	r3, r2
 802b654:	2200      	movs	r2, #0
 802b656:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b658:	68fb      	ldr	r3, [r7, #12]
 802b65a:	3301      	adds	r3, #1
 802b65c:	60fb      	str	r3, [r7, #12]
 802b65e:	68fb      	ldr	r3, [r7, #12]
 802b660:	2b0f      	cmp	r3, #15
 802b662:	d9f2      	bls.n	802b64a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b664:	2300      	movs	r3, #0
 802b666:	60fb      	str	r3, [r7, #12]
 802b668:	e009      	b.n	802b67e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802b66a:	687a      	ldr	r2, [r7, #4]
 802b66c:	68fb      	ldr	r3, [r7, #12]
 802b66e:	4413      	add	r3, r2
 802b670:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b674:	2200      	movs	r2, #0
 802b676:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b678:	68fb      	ldr	r3, [r7, #12]
 802b67a:	3301      	adds	r3, #1
 802b67c:	60fb      	str	r3, [r7, #12]
 802b67e:	68fb      	ldr	r3, [r7, #12]
 802b680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b684:	d3f1      	bcc.n	802b66a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802b686:	687b      	ldr	r3, [r7, #4]
 802b688:	2200      	movs	r2, #0
 802b68a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802b68c:	687b      	ldr	r3, [r7, #4]
 802b68e:	2200      	movs	r2, #0
 802b690:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802b692:	687b      	ldr	r3, [r7, #4]
 802b694:	2201      	movs	r2, #1
 802b696:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802b698:	687b      	ldr	r3, [r7, #4]
 802b69a:	2200      	movs	r2, #0
 802b69c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802b6a0:	687b      	ldr	r3, [r7, #4]
 802b6a2:	2201      	movs	r2, #1
 802b6a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802b6a6:	687b      	ldr	r3, [r7, #4]
 802b6a8:	2240      	movs	r2, #64	; 0x40
 802b6aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	2200      	movs	r2, #0
 802b6b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802b6b2:	687b      	ldr	r3, [r7, #4]
 802b6b4:	2200      	movs	r2, #0
 802b6b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802b6ba:	687b      	ldr	r3, [r7, #4]
 802b6bc:	2201      	movs	r2, #1
 802b6be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802b6c2:	687b      	ldr	r3, [r7, #4]
 802b6c4:	2200      	movs	r2, #0
 802b6c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802b6ca:	687b      	ldr	r3, [r7, #4]
 802b6cc:	2200      	movs	r2, #0
 802b6ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802b6d2:	2300      	movs	r3, #0
}
 802b6d4:	4618      	mov	r0, r3
 802b6d6:	3714      	adds	r7, #20
 802b6d8:	46bd      	mov	sp, r7
 802b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6de:	4770      	bx	lr

0802b6e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802b6e0:	b480      	push	{r7}
 802b6e2:	b085      	sub	sp, #20
 802b6e4:	af00      	add	r7, sp, #0
 802b6e6:	6078      	str	r0, [r7, #4]
 802b6e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802b6ea:	2300      	movs	r3, #0
 802b6ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802b6ee:	683b      	ldr	r3, [r7, #0]
 802b6f0:	2b00      	cmp	r3, #0
 802b6f2:	d016      	beq.n	802b722 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802b6f4:	687b      	ldr	r3, [r7, #4]
 802b6f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b6fa:	2b00      	cmp	r3, #0
 802b6fc:	d10e      	bne.n	802b71c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802b6fe:	687b      	ldr	r3, [r7, #4]
 802b700:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b704:	1c59      	adds	r1, r3, #1
 802b706:	687a      	ldr	r2, [r7, #4]
 802b708:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802b70c:	687a      	ldr	r2, [r7, #4]
 802b70e:	33de      	adds	r3, #222	; 0xde
 802b710:	6839      	ldr	r1, [r7, #0]
 802b712:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802b716:	2300      	movs	r3, #0
 802b718:	73fb      	strb	r3, [r7, #15]
 802b71a:	e004      	b.n	802b726 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802b71c:	2302      	movs	r3, #2
 802b71e:	73fb      	strb	r3, [r7, #15]
 802b720:	e001      	b.n	802b726 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802b722:	2302      	movs	r3, #2
 802b724:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b726:	7bfb      	ldrb	r3, [r7, #15]
}
 802b728:	4618      	mov	r0, r3
 802b72a:	3714      	adds	r7, #20
 802b72c:	46bd      	mov	sp, r7
 802b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b732:	4770      	bx	lr

0802b734 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802b734:	b480      	push	{r7}
 802b736:	b085      	sub	sp, #20
 802b738:	af00      	add	r7, sp, #0
 802b73a:	6078      	str	r0, [r7, #4]
 802b73c:	460b      	mov	r3, r1
 802b73e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802b740:	2300      	movs	r3, #0
 802b742:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802b744:	687b      	ldr	r3, [r7, #4]
 802b746:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802b74a:	78fa      	ldrb	r2, [r7, #3]
 802b74c:	429a      	cmp	r2, r3
 802b74e:	d204      	bcs.n	802b75a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802b750:	687b      	ldr	r3, [r7, #4]
 802b752:	78fa      	ldrb	r2, [r7, #3]
 802b754:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802b758:	e001      	b.n	802b75e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802b75a:	2302      	movs	r3, #2
 802b75c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b75e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b760:	4618      	mov	r0, r3
 802b762:	3714      	adds	r7, #20
 802b764:	46bd      	mov	sp, r7
 802b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b76a:	4770      	bx	lr

0802b76c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802b76c:	b480      	push	{r7}
 802b76e:	b087      	sub	sp, #28
 802b770:	af00      	add	r7, sp, #0
 802b772:	6078      	str	r0, [r7, #4]
 802b774:	4608      	mov	r0, r1
 802b776:	4611      	mov	r1, r2
 802b778:	461a      	mov	r2, r3
 802b77a:	4603      	mov	r3, r0
 802b77c:	70fb      	strb	r3, [r7, #3]
 802b77e:	460b      	mov	r3, r1
 802b780:	70bb      	strb	r3, [r7, #2]
 802b782:	4613      	mov	r3, r2
 802b784:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802b786:	2300      	movs	r3, #0
 802b788:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802b78a:	2300      	movs	r3, #0
 802b78c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802b78e:	687b      	ldr	r3, [r7, #4]
 802b790:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802b794:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b796:	e025      	b.n	802b7e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802b798:	7dfb      	ldrb	r3, [r7, #23]
 802b79a:	221a      	movs	r2, #26
 802b79c:	fb02 f303 	mul.w	r3, r2, r3
 802b7a0:	3308      	adds	r3, #8
 802b7a2:	68fa      	ldr	r2, [r7, #12]
 802b7a4:	4413      	add	r3, r2
 802b7a6:	3302      	adds	r3, #2
 802b7a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b7aa:	693b      	ldr	r3, [r7, #16]
 802b7ac:	795b      	ldrb	r3, [r3, #5]
 802b7ae:	78fa      	ldrb	r2, [r7, #3]
 802b7b0:	429a      	cmp	r2, r3
 802b7b2:	d002      	beq.n	802b7ba <USBH_FindInterface+0x4e>
 802b7b4:	78fb      	ldrb	r3, [r7, #3]
 802b7b6:	2bff      	cmp	r3, #255	; 0xff
 802b7b8:	d111      	bne.n	802b7de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b7ba:	693b      	ldr	r3, [r7, #16]
 802b7bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b7be:	78ba      	ldrb	r2, [r7, #2]
 802b7c0:	429a      	cmp	r2, r3
 802b7c2:	d002      	beq.n	802b7ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b7c4:	78bb      	ldrb	r3, [r7, #2]
 802b7c6:	2bff      	cmp	r3, #255	; 0xff
 802b7c8:	d109      	bne.n	802b7de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b7ca:	693b      	ldr	r3, [r7, #16]
 802b7cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b7ce:	787a      	ldrb	r2, [r7, #1]
 802b7d0:	429a      	cmp	r2, r3
 802b7d2:	d002      	beq.n	802b7da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802b7d4:	787b      	ldrb	r3, [r7, #1]
 802b7d6:	2bff      	cmp	r3, #255	; 0xff
 802b7d8:	d101      	bne.n	802b7de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802b7da:	7dfb      	ldrb	r3, [r7, #23]
 802b7dc:	e006      	b.n	802b7ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 802b7de:	7dfb      	ldrb	r3, [r7, #23]
 802b7e0:	3301      	adds	r3, #1
 802b7e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b7e4:	7dfb      	ldrb	r3, [r7, #23]
 802b7e6:	2b01      	cmp	r3, #1
 802b7e8:	d9d6      	bls.n	802b798 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802b7ea:	23ff      	movs	r3, #255	; 0xff
}
 802b7ec:	4618      	mov	r0, r3
 802b7ee:	371c      	adds	r7, #28
 802b7f0:	46bd      	mov	sp, r7
 802b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7f6:	4770      	bx	lr

0802b7f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802b7f8:	b580      	push	{r7, lr}
 802b7fa:	b082      	sub	sp, #8
 802b7fc:	af00      	add	r7, sp, #0
 802b7fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802b800:	6878      	ldr	r0, [r7, #4]
 802b802:	f001 fc87 	bl	802d114 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802b806:	2101      	movs	r1, #1
 802b808:	6878      	ldr	r0, [r7, #4]
 802b80a:	f001 fda0 	bl	802d34e <USBH_LL_DriverVBUS>

  return USBH_OK;
 802b80e:	2300      	movs	r3, #0
}
 802b810:	4618      	mov	r0, r3
 802b812:	3708      	adds	r7, #8
 802b814:	46bd      	mov	sp, r7
 802b816:	bd80      	pop	{r7, pc}

0802b818 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802b818:	b580      	push	{r7, lr}
 802b81a:	b088      	sub	sp, #32
 802b81c:	af04      	add	r7, sp, #16
 802b81e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802b820:	2302      	movs	r3, #2
 802b822:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802b824:	2300      	movs	r3, #0
 802b826:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802b828:	687b      	ldr	r3, [r7, #4]
 802b82a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802b82e:	b2db      	uxtb	r3, r3
 802b830:	2b01      	cmp	r3, #1
 802b832:	d102      	bne.n	802b83a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802b834:	687b      	ldr	r3, [r7, #4]
 802b836:	2203      	movs	r2, #3
 802b838:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802b83a:	687b      	ldr	r3, [r7, #4]
 802b83c:	781b      	ldrb	r3, [r3, #0]
 802b83e:	b2db      	uxtb	r3, r3
 802b840:	2b0b      	cmp	r3, #11
 802b842:	f200 81be 	bhi.w	802bbc2 <USBH_Process+0x3aa>
 802b846:	a201      	add	r2, pc, #4	; (adr r2, 802b84c <USBH_Process+0x34>)
 802b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b84c:	0802b87d 	.word	0x0802b87d
 802b850:	0802b8af 	.word	0x0802b8af
 802b854:	0802b917 	.word	0x0802b917
 802b858:	0802bb5d 	.word	0x0802bb5d
 802b85c:	0802bbc3 	.word	0x0802bbc3
 802b860:	0802b9bb 	.word	0x0802b9bb
 802b864:	0802bb03 	.word	0x0802bb03
 802b868:	0802b9f1 	.word	0x0802b9f1
 802b86c:	0802ba11 	.word	0x0802ba11
 802b870:	0802ba31 	.word	0x0802ba31
 802b874:	0802ba75 	.word	0x0802ba75
 802b878:	0802bb45 	.word	0x0802bb45
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802b87c:	687b      	ldr	r3, [r7, #4]
 802b87e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802b882:	b2db      	uxtb	r3, r3
 802b884:	2b00      	cmp	r3, #0
 802b886:	f000 819e 	beq.w	802bbc6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802b88a:	687b      	ldr	r3, [r7, #4]
 802b88c:	2201      	movs	r2, #1
 802b88e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802b890:	20c8      	movs	r0, #200	; 0xc8
 802b892:	f001 fda3 	bl	802d3dc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802b896:	6878      	ldr	r0, [r7, #4]
 802b898:	f001 fc99 	bl	802d1ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802b89c:	687b      	ldr	r3, [r7, #4]
 802b89e:	2200      	movs	r2, #0
 802b8a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802b8a4:	687b      	ldr	r3, [r7, #4]
 802b8a6:	2200      	movs	r2, #0
 802b8a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b8ac:	e18b      	b.n	802bbc6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802b8ae:	687b      	ldr	r3, [r7, #4]
 802b8b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802b8b4:	2b01      	cmp	r3, #1
 802b8b6:	d107      	bne.n	802b8c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802b8b8:	687b      	ldr	r3, [r7, #4]
 802b8ba:	2200      	movs	r2, #0
 802b8bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802b8c0:	687b      	ldr	r3, [r7, #4]
 802b8c2:	2202      	movs	r2, #2
 802b8c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b8c6:	e18d      	b.n	802bbe4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802b8c8:	687b      	ldr	r3, [r7, #4]
 802b8ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b8ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b8d2:	d914      	bls.n	802b8fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802b8d4:	687b      	ldr	r3, [r7, #4]
 802b8d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b8da:	3301      	adds	r3, #1
 802b8dc:	b2da      	uxtb	r2, r3
 802b8de:	687b      	ldr	r3, [r7, #4]
 802b8e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802b8e4:	687b      	ldr	r3, [r7, #4]
 802b8e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802b8ea:	2b03      	cmp	r3, #3
 802b8ec:	d903      	bls.n	802b8f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802b8ee:	687b      	ldr	r3, [r7, #4]
 802b8f0:	220d      	movs	r2, #13
 802b8f2:	701a      	strb	r2, [r3, #0]
      break;
 802b8f4:	e176      	b.n	802bbe4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802b8f6:	687b      	ldr	r3, [r7, #4]
 802b8f8:	2200      	movs	r2, #0
 802b8fa:	701a      	strb	r2, [r3, #0]
      break;
 802b8fc:	e172      	b.n	802bbe4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802b904:	f103 020a 	add.w	r2, r3, #10
 802b908:	687b      	ldr	r3, [r7, #4]
 802b90a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802b90e:	200a      	movs	r0, #10
 802b910:	f001 fd64 	bl	802d3dc <USBH_Delay>
      break;
 802b914:	e166      	b.n	802bbe4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802b916:	687b      	ldr	r3, [r7, #4]
 802b918:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b91c:	2b00      	cmp	r3, #0
 802b91e:	d005      	beq.n	802b92c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802b920:	687b      	ldr	r3, [r7, #4]
 802b922:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b926:	2104      	movs	r1, #4
 802b928:	6878      	ldr	r0, [r7, #4]
 802b92a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802b92c:	2064      	movs	r0, #100	; 0x64
 802b92e:	f001 fd55 	bl	802d3dc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802b932:	6878      	ldr	r0, [r7, #4]
 802b934:	f001 fc24 	bl	802d180 <USBH_LL_GetSpeed>
 802b938:	4603      	mov	r3, r0
 802b93a:	461a      	mov	r2, r3
 802b93c:	687b      	ldr	r3, [r7, #4]
 802b93e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	2205      	movs	r2, #5
 802b946:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802b948:	2100      	movs	r1, #0
 802b94a:	6878      	ldr	r0, [r7, #4]
 802b94c:	f001 fa29 	bl	802cda2 <USBH_AllocPipe>
 802b950:	4603      	mov	r3, r0
 802b952:	461a      	mov	r2, r3
 802b954:	687b      	ldr	r3, [r7, #4]
 802b956:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802b958:	2180      	movs	r1, #128	; 0x80
 802b95a:	6878      	ldr	r0, [r7, #4]
 802b95c:	f001 fa21 	bl	802cda2 <USBH_AllocPipe>
 802b960:	4603      	mov	r3, r0
 802b962:	461a      	mov	r2, r3
 802b964:	687b      	ldr	r3, [r7, #4]
 802b966:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802b968:	687b      	ldr	r3, [r7, #4]
 802b96a:	7919      	ldrb	r1, [r3, #4]
 802b96c:	687b      	ldr	r3, [r7, #4]
 802b96e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b972:	687b      	ldr	r3, [r7, #4]
 802b974:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802b978:	687a      	ldr	r2, [r7, #4]
 802b97a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802b97c:	b292      	uxth	r2, r2
 802b97e:	9202      	str	r2, [sp, #8]
 802b980:	2200      	movs	r2, #0
 802b982:	9201      	str	r2, [sp, #4]
 802b984:	9300      	str	r3, [sp, #0]
 802b986:	4603      	mov	r3, r0
 802b988:	2280      	movs	r2, #128	; 0x80
 802b98a:	6878      	ldr	r0, [r7, #4]
 802b98c:	f001 f9da 	bl	802cd44 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802b990:	687b      	ldr	r3, [r7, #4]
 802b992:	7959      	ldrb	r1, [r3, #5]
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802b99a:	687b      	ldr	r3, [r7, #4]
 802b99c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802b9a0:	687a      	ldr	r2, [r7, #4]
 802b9a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802b9a4:	b292      	uxth	r2, r2
 802b9a6:	9202      	str	r2, [sp, #8]
 802b9a8:	2200      	movs	r2, #0
 802b9aa:	9201      	str	r2, [sp, #4]
 802b9ac:	9300      	str	r3, [sp, #0]
 802b9ae:	4603      	mov	r3, r0
 802b9b0:	2200      	movs	r2, #0
 802b9b2:	6878      	ldr	r0, [r7, #4]
 802b9b4:	f001 f9c6 	bl	802cd44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802b9b8:	e114      	b.n	802bbe4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802b9ba:	6878      	ldr	r0, [r7, #4]
 802b9bc:	f000 f918 	bl	802bbf0 <USBH_HandleEnum>
 802b9c0:	4603      	mov	r3, r0
 802b9c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802b9c4:	7bbb      	ldrb	r3, [r7, #14]
 802b9c6:	b2db      	uxtb	r3, r3
 802b9c8:	2b00      	cmp	r3, #0
 802b9ca:	f040 80fe 	bne.w	802bbca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802b9ce:	687b      	ldr	r3, [r7, #4]
 802b9d0:	2200      	movs	r2, #0
 802b9d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802b9d6:	687b      	ldr	r3, [r7, #4]
 802b9d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802b9dc:	2b01      	cmp	r3, #1
 802b9de:	d103      	bne.n	802b9e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802b9e0:	687b      	ldr	r3, [r7, #4]
 802b9e2:	2208      	movs	r2, #8
 802b9e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802b9e6:	e0f0      	b.n	802bbca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802b9e8:	687b      	ldr	r3, [r7, #4]
 802b9ea:	2207      	movs	r2, #7
 802b9ec:	701a      	strb	r2, [r3, #0]
      break;
 802b9ee:	e0ec      	b.n	802bbca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802b9f0:	687b      	ldr	r3, [r7, #4]
 802b9f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b9f6:	2b00      	cmp	r3, #0
 802b9f8:	f000 80e9 	beq.w	802bbce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802b9fc:	687b      	ldr	r3, [r7, #4]
 802b9fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802ba02:	2101      	movs	r1, #1
 802ba04:	6878      	ldr	r0, [r7, #4]
 802ba06:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802ba08:	687b      	ldr	r3, [r7, #4]
 802ba0a:	2208      	movs	r2, #8
 802ba0c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802ba0e:	e0de      	b.n	802bbce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802ba10:	687b      	ldr	r3, [r7, #4]
 802ba12:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802ba16:	b29b      	uxth	r3, r3
 802ba18:	4619      	mov	r1, r3
 802ba1a:	6878      	ldr	r0, [r7, #4]
 802ba1c:	f000 fc2c 	bl	802c278 <USBH_SetCfg>
 802ba20:	4603      	mov	r3, r0
 802ba22:	2b00      	cmp	r3, #0
 802ba24:	f040 80d5 	bne.w	802bbd2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802ba28:	687b      	ldr	r3, [r7, #4]
 802ba2a:	2209      	movs	r2, #9
 802ba2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ba2e:	e0d0      	b.n	802bbd2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802ba30:	687b      	ldr	r3, [r7, #4]
 802ba32:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802ba36:	f003 0320 	and.w	r3, r3, #32
 802ba3a:	2b00      	cmp	r3, #0
 802ba3c:	d016      	beq.n	802ba6c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802ba3e:	2101      	movs	r1, #1
 802ba40:	6878      	ldr	r0, [r7, #4]
 802ba42:	f000 fc3c 	bl	802c2be <USBH_SetFeature>
 802ba46:	4603      	mov	r3, r0
 802ba48:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802ba4a:	7bbb      	ldrb	r3, [r7, #14]
 802ba4c:	b2db      	uxtb	r3, r3
 802ba4e:	2b00      	cmp	r3, #0
 802ba50:	d103      	bne.n	802ba5a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802ba52:	687b      	ldr	r3, [r7, #4]
 802ba54:	220a      	movs	r2, #10
 802ba56:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802ba58:	e0bd      	b.n	802bbd6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802ba5a:	7bbb      	ldrb	r3, [r7, #14]
 802ba5c:	b2db      	uxtb	r3, r3
 802ba5e:	2b03      	cmp	r3, #3
 802ba60:	f040 80b9 	bne.w	802bbd6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802ba64:	687b      	ldr	r3, [r7, #4]
 802ba66:	220a      	movs	r2, #10
 802ba68:	701a      	strb	r2, [r3, #0]
      break;
 802ba6a:	e0b4      	b.n	802bbd6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	220a      	movs	r2, #10
 802ba70:	701a      	strb	r2, [r3, #0]
      break;
 802ba72:	e0b0      	b.n	802bbd6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802ba74:	687b      	ldr	r3, [r7, #4]
 802ba76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802ba7a:	2b00      	cmp	r3, #0
 802ba7c:	f000 80ad 	beq.w	802bbda <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802ba80:	687b      	ldr	r3, [r7, #4]
 802ba82:	2200      	movs	r2, #0
 802ba84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802ba88:	2300      	movs	r3, #0
 802ba8a:	73fb      	strb	r3, [r7, #15]
 802ba8c:	e016      	b.n	802babc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802ba8e:	7bfa      	ldrb	r2, [r7, #15]
 802ba90:	687b      	ldr	r3, [r7, #4]
 802ba92:	32de      	adds	r2, #222	; 0xde
 802ba94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802ba98:	791a      	ldrb	r2, [r3, #4]
 802ba9a:	687b      	ldr	r3, [r7, #4]
 802ba9c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802baa0:	429a      	cmp	r2, r3
 802baa2:	d108      	bne.n	802bab6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802baa4:	7bfa      	ldrb	r2, [r7, #15]
 802baa6:	687b      	ldr	r3, [r7, #4]
 802baa8:	32de      	adds	r2, #222	; 0xde
 802baaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802baae:	687b      	ldr	r3, [r7, #4]
 802bab0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802bab4:	e005      	b.n	802bac2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bab6:	7bfb      	ldrb	r3, [r7, #15]
 802bab8:	3301      	adds	r3, #1
 802baba:	73fb      	strb	r3, [r7, #15]
 802babc:	7bfb      	ldrb	r3, [r7, #15]
 802babe:	2b00      	cmp	r3, #0
 802bac0:	d0e5      	beq.n	802ba8e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802bac2:	687b      	ldr	r3, [r7, #4]
 802bac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bac8:	2b00      	cmp	r3, #0
 802baca:	d016      	beq.n	802bafa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802bacc:	687b      	ldr	r3, [r7, #4]
 802bace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bad2:	689b      	ldr	r3, [r3, #8]
 802bad4:	6878      	ldr	r0, [r7, #4]
 802bad6:	4798      	blx	r3
 802bad8:	4603      	mov	r3, r0
 802bada:	2b00      	cmp	r3, #0
 802badc:	d109      	bne.n	802baf2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802bade:	687b      	ldr	r3, [r7, #4]
 802bae0:	2206      	movs	r2, #6
 802bae2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802bae4:	687b      	ldr	r3, [r7, #4]
 802bae6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802baea:	2103      	movs	r1, #3
 802baec:	6878      	ldr	r0, [r7, #4]
 802baee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802baf0:	e073      	b.n	802bbda <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802baf2:	687b      	ldr	r3, [r7, #4]
 802baf4:	220d      	movs	r2, #13
 802baf6:	701a      	strb	r2, [r3, #0]
      break;
 802baf8:	e06f      	b.n	802bbda <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802bafa:	687b      	ldr	r3, [r7, #4]
 802bafc:	220d      	movs	r2, #13
 802bafe:	701a      	strb	r2, [r3, #0]
      break;
 802bb00:	e06b      	b.n	802bbda <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802bb02:	687b      	ldr	r3, [r7, #4]
 802bb04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb08:	2b00      	cmp	r3, #0
 802bb0a:	d017      	beq.n	802bb3c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb12:	691b      	ldr	r3, [r3, #16]
 802bb14:	6878      	ldr	r0, [r7, #4]
 802bb16:	4798      	blx	r3
 802bb18:	4603      	mov	r3, r0
 802bb1a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bb1c:	7bbb      	ldrb	r3, [r7, #14]
 802bb1e:	b2db      	uxtb	r3, r3
 802bb20:	2b00      	cmp	r3, #0
 802bb22:	d103      	bne.n	802bb2c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802bb24:	687b      	ldr	r3, [r7, #4]
 802bb26:	220b      	movs	r2, #11
 802bb28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bb2a:	e058      	b.n	802bbde <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802bb2c:	7bbb      	ldrb	r3, [r7, #14]
 802bb2e:	b2db      	uxtb	r3, r3
 802bb30:	2b02      	cmp	r3, #2
 802bb32:	d154      	bne.n	802bbde <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802bb34:	687b      	ldr	r3, [r7, #4]
 802bb36:	220d      	movs	r2, #13
 802bb38:	701a      	strb	r2, [r3, #0]
      break;
 802bb3a:	e050      	b.n	802bbde <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802bb3c:	687b      	ldr	r3, [r7, #4]
 802bb3e:	220d      	movs	r2, #13
 802bb40:	701a      	strb	r2, [r3, #0]
      break;
 802bb42:	e04c      	b.n	802bbde <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802bb44:	687b      	ldr	r3, [r7, #4]
 802bb46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb4a:	2b00      	cmp	r3, #0
 802bb4c:	d049      	beq.n	802bbe2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802bb4e:	687b      	ldr	r3, [r7, #4]
 802bb50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb54:	695b      	ldr	r3, [r3, #20]
 802bb56:	6878      	ldr	r0, [r7, #4]
 802bb58:	4798      	blx	r3
      }
      break;
 802bb5a:	e042      	b.n	802bbe2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802bb5c:	687b      	ldr	r3, [r7, #4]
 802bb5e:	2200      	movs	r2, #0
 802bb60:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802bb64:	6878      	ldr	r0, [r7, #4]
 802bb66:	f7ff fd67 	bl	802b638 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802bb6a:	687b      	ldr	r3, [r7, #4]
 802bb6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb70:	2b00      	cmp	r3, #0
 802bb72:	d009      	beq.n	802bb88 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802bb74:	687b      	ldr	r3, [r7, #4]
 802bb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bb7a:	68db      	ldr	r3, [r3, #12]
 802bb7c:	6878      	ldr	r0, [r7, #4]
 802bb7e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802bb80:	687b      	ldr	r3, [r7, #4]
 802bb82:	2200      	movs	r2, #0
 802bb84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802bb88:	687b      	ldr	r3, [r7, #4]
 802bb8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bb8e:	2b00      	cmp	r3, #0
 802bb90:	d005      	beq.n	802bb9e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802bb92:	687b      	ldr	r3, [r7, #4]
 802bb94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bb98:	2105      	movs	r1, #5
 802bb9a:	6878      	ldr	r0, [r7, #4]
 802bb9c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802bb9e:	687b      	ldr	r3, [r7, #4]
 802bba0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802bba4:	b2db      	uxtb	r3, r3
 802bba6:	2b01      	cmp	r3, #1
 802bba8:	d107      	bne.n	802bbba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802bbaa:	687b      	ldr	r3, [r7, #4]
 802bbac:	2200      	movs	r2, #0
 802bbae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802bbb2:	6878      	ldr	r0, [r7, #4]
 802bbb4:	f7ff fe20 	bl	802b7f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bbb8:	e014      	b.n	802bbe4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802bbba:	6878      	ldr	r0, [r7, #4]
 802bbbc:	f001 faaa 	bl	802d114 <USBH_LL_Start>
      break;
 802bbc0:	e010      	b.n	802bbe4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802bbc2:	bf00      	nop
 802bbc4:	e00e      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbc6:	bf00      	nop
 802bbc8:	e00c      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbca:	bf00      	nop
 802bbcc:	e00a      	b.n	802bbe4 <USBH_Process+0x3cc>
    break;
 802bbce:	bf00      	nop
 802bbd0:	e008      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbd2:	bf00      	nop
 802bbd4:	e006      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbd6:	bf00      	nop
 802bbd8:	e004      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbda:	bf00      	nop
 802bbdc:	e002      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbde:	bf00      	nop
 802bbe0:	e000      	b.n	802bbe4 <USBH_Process+0x3cc>
      break;
 802bbe2:	bf00      	nop
  }
  return USBH_OK;
 802bbe4:	2300      	movs	r3, #0
}
 802bbe6:	4618      	mov	r0, r3
 802bbe8:	3710      	adds	r7, #16
 802bbea:	46bd      	mov	sp, r7
 802bbec:	bd80      	pop	{r7, pc}
 802bbee:	bf00      	nop

0802bbf0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802bbf0:	b580      	push	{r7, lr}
 802bbf2:	b088      	sub	sp, #32
 802bbf4:	af04      	add	r7, sp, #16
 802bbf6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802bbf8:	2301      	movs	r3, #1
 802bbfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802bbfc:	2301      	movs	r3, #1
 802bbfe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802bc00:	687b      	ldr	r3, [r7, #4]
 802bc02:	785b      	ldrb	r3, [r3, #1]
 802bc04:	2b07      	cmp	r3, #7
 802bc06:	f200 81c1 	bhi.w	802bf8c <USBH_HandleEnum+0x39c>
 802bc0a:	a201      	add	r2, pc, #4	; (adr r2, 802bc10 <USBH_HandleEnum+0x20>)
 802bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bc10:	0802bc31 	.word	0x0802bc31
 802bc14:	0802bcef 	.word	0x0802bcef
 802bc18:	0802bd59 	.word	0x0802bd59
 802bc1c:	0802bde7 	.word	0x0802bde7
 802bc20:	0802be51 	.word	0x0802be51
 802bc24:	0802bec1 	.word	0x0802bec1
 802bc28:	0802bf07 	.word	0x0802bf07
 802bc2c:	0802bf4d 	.word	0x0802bf4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802bc30:	2108      	movs	r1, #8
 802bc32:	6878      	ldr	r0, [r7, #4]
 802bc34:	f000 fa50 	bl	802c0d8 <USBH_Get_DevDesc>
 802bc38:	4603      	mov	r3, r0
 802bc3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bc3c:	7bbb      	ldrb	r3, [r7, #14]
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	d130      	bne.n	802bca4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802bc42:	687b      	ldr	r3, [r7, #4]
 802bc44:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802bc48:	687b      	ldr	r3, [r7, #4]
 802bc4a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802bc4c:	687b      	ldr	r3, [r7, #4]
 802bc4e:	2201      	movs	r2, #1
 802bc50:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bc52:	687b      	ldr	r3, [r7, #4]
 802bc54:	7919      	ldrb	r1, [r3, #4]
 802bc56:	687b      	ldr	r3, [r7, #4]
 802bc58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bc5c:	687b      	ldr	r3, [r7, #4]
 802bc5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bc62:	687a      	ldr	r2, [r7, #4]
 802bc64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802bc66:	b292      	uxth	r2, r2
 802bc68:	9202      	str	r2, [sp, #8]
 802bc6a:	2200      	movs	r2, #0
 802bc6c:	9201      	str	r2, [sp, #4]
 802bc6e:	9300      	str	r3, [sp, #0]
 802bc70:	4603      	mov	r3, r0
 802bc72:	2280      	movs	r2, #128	; 0x80
 802bc74:	6878      	ldr	r0, [r7, #4]
 802bc76:	f001 f865 	bl	802cd44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bc7a:	687b      	ldr	r3, [r7, #4]
 802bc7c:	7959      	ldrb	r1, [r3, #5]
 802bc7e:	687b      	ldr	r3, [r7, #4]
 802bc80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bc84:	687b      	ldr	r3, [r7, #4]
 802bc86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bc8a:	687a      	ldr	r2, [r7, #4]
 802bc8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bc8e:	b292      	uxth	r2, r2
 802bc90:	9202      	str	r2, [sp, #8]
 802bc92:	2200      	movs	r2, #0
 802bc94:	9201      	str	r2, [sp, #4]
 802bc96:	9300      	str	r3, [sp, #0]
 802bc98:	4603      	mov	r3, r0
 802bc9a:	2200      	movs	r2, #0
 802bc9c:	6878      	ldr	r0, [r7, #4]
 802bc9e:	f001 f851 	bl	802cd44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bca2:	e175      	b.n	802bf90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bca4:	7bbb      	ldrb	r3, [r7, #14]
 802bca6:	2b03      	cmp	r3, #3
 802bca8:	f040 8172 	bne.w	802bf90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802bcac:	687b      	ldr	r3, [r7, #4]
 802bcae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bcb2:	3301      	adds	r3, #1
 802bcb4:	b2da      	uxtb	r2, r3
 802bcb6:	687b      	ldr	r3, [r7, #4]
 802bcb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bcc2:	2b03      	cmp	r3, #3
 802bcc4:	d903      	bls.n	802bcce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802bcc6:	687b      	ldr	r3, [r7, #4]
 802bcc8:	220d      	movs	r2, #13
 802bcca:	701a      	strb	r2, [r3, #0]
      break;
 802bccc:	e160      	b.n	802bf90 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bcce:	687b      	ldr	r3, [r7, #4]
 802bcd0:	795b      	ldrb	r3, [r3, #5]
 802bcd2:	4619      	mov	r1, r3
 802bcd4:	6878      	ldr	r0, [r7, #4]
 802bcd6:	f001 f885 	bl	802cde4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bcda:	687b      	ldr	r3, [r7, #4]
 802bcdc:	791b      	ldrb	r3, [r3, #4]
 802bcde:	4619      	mov	r1, r3
 802bce0:	6878      	ldr	r0, [r7, #4]
 802bce2:	f001 f87f 	bl	802cde4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802bce6:	687b      	ldr	r3, [r7, #4]
 802bce8:	2200      	movs	r2, #0
 802bcea:	701a      	strb	r2, [r3, #0]
      break;
 802bcec:	e150      	b.n	802bf90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802bcee:	2112      	movs	r1, #18
 802bcf0:	6878      	ldr	r0, [r7, #4]
 802bcf2:	f000 f9f1 	bl	802c0d8 <USBH_Get_DevDesc>
 802bcf6:	4603      	mov	r3, r0
 802bcf8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bcfa:	7bbb      	ldrb	r3, [r7, #14]
 802bcfc:	2b00      	cmp	r3, #0
 802bcfe:	d103      	bne.n	802bd08 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802bd00:	687b      	ldr	r3, [r7, #4]
 802bd02:	2202      	movs	r2, #2
 802bd04:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bd06:	e145      	b.n	802bf94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bd08:	7bbb      	ldrb	r3, [r7, #14]
 802bd0a:	2b03      	cmp	r3, #3
 802bd0c:	f040 8142 	bne.w	802bf94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bd16:	3301      	adds	r3, #1
 802bd18:	b2da      	uxtb	r2, r3
 802bd1a:	687b      	ldr	r3, [r7, #4]
 802bd1c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bd20:	687b      	ldr	r3, [r7, #4]
 802bd22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bd26:	2b03      	cmp	r3, #3
 802bd28:	d903      	bls.n	802bd32 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802bd2a:	687b      	ldr	r3, [r7, #4]
 802bd2c:	220d      	movs	r2, #13
 802bd2e:	701a      	strb	r2, [r3, #0]
      break;
 802bd30:	e130      	b.n	802bf94 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bd32:	687b      	ldr	r3, [r7, #4]
 802bd34:	795b      	ldrb	r3, [r3, #5]
 802bd36:	4619      	mov	r1, r3
 802bd38:	6878      	ldr	r0, [r7, #4]
 802bd3a:	f001 f853 	bl	802cde4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	791b      	ldrb	r3, [r3, #4]
 802bd42:	4619      	mov	r1, r3
 802bd44:	6878      	ldr	r0, [r7, #4]
 802bd46:	f001 f84d 	bl	802cde4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bd4a:	687b      	ldr	r3, [r7, #4]
 802bd4c:	2200      	movs	r2, #0
 802bd4e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bd50:	687b      	ldr	r3, [r7, #4]
 802bd52:	2200      	movs	r2, #0
 802bd54:	701a      	strb	r2, [r3, #0]
      break;
 802bd56:	e11d      	b.n	802bf94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802bd58:	2101      	movs	r1, #1
 802bd5a:	6878      	ldr	r0, [r7, #4]
 802bd5c:	f000 fa68 	bl	802c230 <USBH_SetAddress>
 802bd60:	4603      	mov	r3, r0
 802bd62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bd64:	7bbb      	ldrb	r3, [r7, #14]
 802bd66:	2b00      	cmp	r3, #0
 802bd68:	d132      	bne.n	802bdd0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802bd6a:	2002      	movs	r0, #2
 802bd6c:	f001 fb36 	bl	802d3dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802bd70:	687b      	ldr	r3, [r7, #4]
 802bd72:	2201      	movs	r2, #1
 802bd74:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802bd78:	687b      	ldr	r3, [r7, #4]
 802bd7a:	2203      	movs	r2, #3
 802bd7c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bd7e:	687b      	ldr	r3, [r7, #4]
 802bd80:	7919      	ldrb	r1, [r3, #4]
 802bd82:	687b      	ldr	r3, [r7, #4]
 802bd84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bd8e:	687a      	ldr	r2, [r7, #4]
 802bd90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bd92:	b292      	uxth	r2, r2
 802bd94:	9202      	str	r2, [sp, #8]
 802bd96:	2200      	movs	r2, #0
 802bd98:	9201      	str	r2, [sp, #4]
 802bd9a:	9300      	str	r3, [sp, #0]
 802bd9c:	4603      	mov	r3, r0
 802bd9e:	2280      	movs	r2, #128	; 0x80
 802bda0:	6878      	ldr	r0, [r7, #4]
 802bda2:	f000 ffcf 	bl	802cd44 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bda6:	687b      	ldr	r3, [r7, #4]
 802bda8:	7959      	ldrb	r1, [r3, #5]
 802bdaa:	687b      	ldr	r3, [r7, #4]
 802bdac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bdb0:	687b      	ldr	r3, [r7, #4]
 802bdb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bdb6:	687a      	ldr	r2, [r7, #4]
 802bdb8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bdba:	b292      	uxth	r2, r2
 802bdbc:	9202      	str	r2, [sp, #8]
 802bdbe:	2200      	movs	r2, #0
 802bdc0:	9201      	str	r2, [sp, #4]
 802bdc2:	9300      	str	r3, [sp, #0]
 802bdc4:	4603      	mov	r3, r0
 802bdc6:	2200      	movs	r2, #0
 802bdc8:	6878      	ldr	r0, [r7, #4]
 802bdca:	f000 ffbb 	bl	802cd44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bdce:	e0e3      	b.n	802bf98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bdd0:	7bbb      	ldrb	r3, [r7, #14]
 802bdd2:	2b03      	cmp	r3, #3
 802bdd4:	f040 80e0 	bne.w	802bf98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802bdd8:	687b      	ldr	r3, [r7, #4]
 802bdda:	220d      	movs	r2, #13
 802bddc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802bdde:	687b      	ldr	r3, [r7, #4]
 802bde0:	2200      	movs	r2, #0
 802bde2:	705a      	strb	r2, [r3, #1]
      break;
 802bde4:	e0d8      	b.n	802bf98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802bde6:	2109      	movs	r1, #9
 802bde8:	6878      	ldr	r0, [r7, #4]
 802bdea:	f000 f99d 	bl	802c128 <USBH_Get_CfgDesc>
 802bdee:	4603      	mov	r3, r0
 802bdf0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bdf2:	7bbb      	ldrb	r3, [r7, #14]
 802bdf4:	2b00      	cmp	r3, #0
 802bdf6:	d103      	bne.n	802be00 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802bdf8:	687b      	ldr	r3, [r7, #4]
 802bdfa:	2204      	movs	r2, #4
 802bdfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bdfe:	e0cd      	b.n	802bf9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802be00:	7bbb      	ldrb	r3, [r7, #14]
 802be02:	2b03      	cmp	r3, #3
 802be04:	f040 80ca 	bne.w	802bf9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802be08:	687b      	ldr	r3, [r7, #4]
 802be0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802be0e:	3301      	adds	r3, #1
 802be10:	b2da      	uxtb	r2, r3
 802be12:	687b      	ldr	r3, [r7, #4]
 802be14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802be18:	687b      	ldr	r3, [r7, #4]
 802be1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802be1e:	2b03      	cmp	r3, #3
 802be20:	d903      	bls.n	802be2a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802be22:	687b      	ldr	r3, [r7, #4]
 802be24:	220d      	movs	r2, #13
 802be26:	701a      	strb	r2, [r3, #0]
      break;
 802be28:	e0b8      	b.n	802bf9c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802be2a:	687b      	ldr	r3, [r7, #4]
 802be2c:	795b      	ldrb	r3, [r3, #5]
 802be2e:	4619      	mov	r1, r3
 802be30:	6878      	ldr	r0, [r7, #4]
 802be32:	f000 ffd7 	bl	802cde4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802be36:	687b      	ldr	r3, [r7, #4]
 802be38:	791b      	ldrb	r3, [r3, #4]
 802be3a:	4619      	mov	r1, r3
 802be3c:	6878      	ldr	r0, [r7, #4]
 802be3e:	f000 ffd1 	bl	802cde4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802be42:	687b      	ldr	r3, [r7, #4]
 802be44:	2200      	movs	r2, #0
 802be46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802be48:	687b      	ldr	r3, [r7, #4]
 802be4a:	2200      	movs	r2, #0
 802be4c:	701a      	strb	r2, [r3, #0]
      break;
 802be4e:	e0a5      	b.n	802bf9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802be50:	687b      	ldr	r3, [r7, #4]
 802be52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802be56:	4619      	mov	r1, r3
 802be58:	6878      	ldr	r0, [r7, #4]
 802be5a:	f000 f965 	bl	802c128 <USBH_Get_CfgDesc>
 802be5e:	4603      	mov	r3, r0
 802be60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802be62:	7bbb      	ldrb	r3, [r7, #14]
 802be64:	2b00      	cmp	r3, #0
 802be66:	d103      	bne.n	802be70 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802be68:	687b      	ldr	r3, [r7, #4]
 802be6a:	2205      	movs	r2, #5
 802be6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802be6e:	e097      	b.n	802bfa0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802be70:	7bbb      	ldrb	r3, [r7, #14]
 802be72:	2b03      	cmp	r3, #3
 802be74:	f040 8094 	bne.w	802bfa0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802be78:	687b      	ldr	r3, [r7, #4]
 802be7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802be7e:	3301      	adds	r3, #1
 802be80:	b2da      	uxtb	r2, r3
 802be82:	687b      	ldr	r3, [r7, #4]
 802be84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802be88:	687b      	ldr	r3, [r7, #4]
 802be8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802be8e:	2b03      	cmp	r3, #3
 802be90:	d903      	bls.n	802be9a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802be92:	687b      	ldr	r3, [r7, #4]
 802be94:	220d      	movs	r2, #13
 802be96:	701a      	strb	r2, [r3, #0]
      break;
 802be98:	e082      	b.n	802bfa0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	795b      	ldrb	r3, [r3, #5]
 802be9e:	4619      	mov	r1, r3
 802bea0:	6878      	ldr	r0, [r7, #4]
 802bea2:	f000 ff9f 	bl	802cde4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bea6:	687b      	ldr	r3, [r7, #4]
 802bea8:	791b      	ldrb	r3, [r3, #4]
 802beaa:	4619      	mov	r1, r3
 802beac:	6878      	ldr	r0, [r7, #4]
 802beae:	f000 ff99 	bl	802cde4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	2200      	movs	r2, #0
 802beb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802beb8:	687b      	ldr	r3, [r7, #4]
 802beba:	2200      	movs	r2, #0
 802bebc:	701a      	strb	r2, [r3, #0]
      break;
 802bebe:	e06f      	b.n	802bfa0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802bec0:	687b      	ldr	r3, [r7, #4]
 802bec2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802bec6:	2b00      	cmp	r3, #0
 802bec8:	d019      	beq.n	802befe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802beca:	687b      	ldr	r3, [r7, #4]
 802becc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802bed0:	687b      	ldr	r3, [r7, #4]
 802bed2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802bed6:	23ff      	movs	r3, #255	; 0xff
 802bed8:	6878      	ldr	r0, [r7, #4]
 802beda:	f000 f949 	bl	802c170 <USBH_Get_StringDesc>
 802bede:	4603      	mov	r3, r0
 802bee0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bee2:	7bbb      	ldrb	r3, [r7, #14]
 802bee4:	2b00      	cmp	r3, #0
 802bee6:	d103      	bne.n	802bef0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bee8:	687b      	ldr	r3, [r7, #4]
 802beea:	2206      	movs	r2, #6
 802beec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802beee:	e059      	b.n	802bfa4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bef0:	7bbb      	ldrb	r3, [r7, #14]
 802bef2:	2b03      	cmp	r3, #3
 802bef4:	d156      	bne.n	802bfa4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802bef6:	687b      	ldr	r3, [r7, #4]
 802bef8:	2206      	movs	r2, #6
 802befa:	705a      	strb	r2, [r3, #1]
      break;
 802befc:	e052      	b.n	802bfa4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802befe:	687b      	ldr	r3, [r7, #4]
 802bf00:	2206      	movs	r2, #6
 802bf02:	705a      	strb	r2, [r3, #1]
      break;
 802bf04:	e04e      	b.n	802bfa4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802bf06:	687b      	ldr	r3, [r7, #4]
 802bf08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802bf0c:	2b00      	cmp	r3, #0
 802bf0e:	d019      	beq.n	802bf44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bf10:	687b      	ldr	r3, [r7, #4]
 802bf12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802bf16:	687b      	ldr	r3, [r7, #4]
 802bf18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802bf1c:	23ff      	movs	r3, #255	; 0xff
 802bf1e:	6878      	ldr	r0, [r7, #4]
 802bf20:	f000 f926 	bl	802c170 <USBH_Get_StringDesc>
 802bf24:	4603      	mov	r3, r0
 802bf26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bf28:	7bbb      	ldrb	r3, [r7, #14]
 802bf2a:	2b00      	cmp	r3, #0
 802bf2c:	d103      	bne.n	802bf36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bf2e:	687b      	ldr	r3, [r7, #4]
 802bf30:	2207      	movs	r2, #7
 802bf32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bf34:	e038      	b.n	802bfa8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bf36:	7bbb      	ldrb	r3, [r7, #14]
 802bf38:	2b03      	cmp	r3, #3
 802bf3a:	d135      	bne.n	802bfa8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bf3c:	687b      	ldr	r3, [r7, #4]
 802bf3e:	2207      	movs	r2, #7
 802bf40:	705a      	strb	r2, [r3, #1]
      break;
 802bf42:	e031      	b.n	802bfa8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	2207      	movs	r2, #7
 802bf48:	705a      	strb	r2, [r3, #1]
      break;
 802bf4a:	e02d      	b.n	802bfa8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802bf4c:	687b      	ldr	r3, [r7, #4]
 802bf4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802bf52:	2b00      	cmp	r3, #0
 802bf54:	d017      	beq.n	802bf86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802bf62:	23ff      	movs	r3, #255	; 0xff
 802bf64:	6878      	ldr	r0, [r7, #4]
 802bf66:	f000 f903 	bl	802c170 <USBH_Get_StringDesc>
 802bf6a:	4603      	mov	r3, r0
 802bf6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802bf6e:	7bbb      	ldrb	r3, [r7, #14]
 802bf70:	2b00      	cmp	r3, #0
 802bf72:	d102      	bne.n	802bf7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802bf74:	2300      	movs	r3, #0
 802bf76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802bf78:	e018      	b.n	802bfac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bf7a:	7bbb      	ldrb	r3, [r7, #14]
 802bf7c:	2b03      	cmp	r3, #3
 802bf7e:	d115      	bne.n	802bfac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802bf80:	2300      	movs	r3, #0
 802bf82:	73fb      	strb	r3, [r7, #15]
      break;
 802bf84:	e012      	b.n	802bfac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802bf86:	2300      	movs	r3, #0
 802bf88:	73fb      	strb	r3, [r7, #15]
      break;
 802bf8a:	e00f      	b.n	802bfac <USBH_HandleEnum+0x3bc>

    default:
      break;
 802bf8c:	bf00      	nop
 802bf8e:	e00e      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bf90:	bf00      	nop
 802bf92:	e00c      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bf94:	bf00      	nop
 802bf96:	e00a      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bf98:	bf00      	nop
 802bf9a:	e008      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bf9c:	bf00      	nop
 802bf9e:	e006      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bfa0:	bf00      	nop
 802bfa2:	e004      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bfa4:	bf00      	nop
 802bfa6:	e002      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bfa8:	bf00      	nop
 802bfaa:	e000      	b.n	802bfae <USBH_HandleEnum+0x3be>
      break;
 802bfac:	bf00      	nop
  }
  return Status;
 802bfae:	7bfb      	ldrb	r3, [r7, #15]
}
 802bfb0:	4618      	mov	r0, r3
 802bfb2:	3710      	adds	r7, #16
 802bfb4:	46bd      	mov	sp, r7
 802bfb6:	bd80      	pop	{r7, pc}

0802bfb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802bfb8:	b480      	push	{r7}
 802bfba:	b083      	sub	sp, #12
 802bfbc:	af00      	add	r7, sp, #0
 802bfbe:	6078      	str	r0, [r7, #4]
 802bfc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802bfc2:	687b      	ldr	r3, [r7, #4]
 802bfc4:	683a      	ldr	r2, [r7, #0]
 802bfc6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802bfca:	bf00      	nop
 802bfcc:	370c      	adds	r7, #12
 802bfce:	46bd      	mov	sp, r7
 802bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bfd4:	4770      	bx	lr

0802bfd6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802bfd6:	b580      	push	{r7, lr}
 802bfd8:	b082      	sub	sp, #8
 802bfda:	af00      	add	r7, sp, #0
 802bfdc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802bfde:	687b      	ldr	r3, [r7, #4]
 802bfe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802bfe4:	1c5a      	adds	r2, r3, #1
 802bfe6:	687b      	ldr	r3, [r7, #4]
 802bfe8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802bfec:	6878      	ldr	r0, [r7, #4]
 802bfee:	f000 f804 	bl	802bffa <USBH_HandleSof>
}
 802bff2:	bf00      	nop
 802bff4:	3708      	adds	r7, #8
 802bff6:	46bd      	mov	sp, r7
 802bff8:	bd80      	pop	{r7, pc}

0802bffa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802bffa:	b580      	push	{r7, lr}
 802bffc:	b082      	sub	sp, #8
 802bffe:	af00      	add	r7, sp, #0
 802c000:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802c002:	687b      	ldr	r3, [r7, #4]
 802c004:	781b      	ldrb	r3, [r3, #0]
 802c006:	b2db      	uxtb	r3, r3
 802c008:	2b0b      	cmp	r3, #11
 802c00a:	d10a      	bne.n	802c022 <USBH_HandleSof+0x28>
 802c00c:	687b      	ldr	r3, [r7, #4]
 802c00e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c012:	2b00      	cmp	r3, #0
 802c014:	d005      	beq.n	802c022 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c01c:	699b      	ldr	r3, [r3, #24]
 802c01e:	6878      	ldr	r0, [r7, #4]
 802c020:	4798      	blx	r3
  }
}
 802c022:	bf00      	nop
 802c024:	3708      	adds	r7, #8
 802c026:	46bd      	mov	sp, r7
 802c028:	bd80      	pop	{r7, pc}

0802c02a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802c02a:	b480      	push	{r7}
 802c02c:	b083      	sub	sp, #12
 802c02e:	af00      	add	r7, sp, #0
 802c030:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802c032:	687b      	ldr	r3, [r7, #4]
 802c034:	2201      	movs	r2, #1
 802c036:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802c03a:	bf00      	nop
}
 802c03c:	370c      	adds	r7, #12
 802c03e:	46bd      	mov	sp, r7
 802c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c044:	4770      	bx	lr

0802c046 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802c046:	b480      	push	{r7}
 802c048:	b083      	sub	sp, #12
 802c04a:	af00      	add	r7, sp, #0
 802c04c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802c04e:	687b      	ldr	r3, [r7, #4]
 802c050:	2200      	movs	r2, #0
 802c052:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802c056:	bf00      	nop
}
 802c058:	370c      	adds	r7, #12
 802c05a:	46bd      	mov	sp, r7
 802c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c060:	4770      	bx	lr

0802c062 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802c062:	b480      	push	{r7}
 802c064:	b083      	sub	sp, #12
 802c066:	af00      	add	r7, sp, #0
 802c068:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802c06a:	687b      	ldr	r3, [r7, #4]
 802c06c:	2201      	movs	r2, #1
 802c06e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c072:	687b      	ldr	r3, [r7, #4]
 802c074:	2200      	movs	r2, #0
 802c076:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c07a:	687b      	ldr	r3, [r7, #4]
 802c07c:	2200      	movs	r2, #0
 802c07e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c082:	2300      	movs	r3, #0
}
 802c084:	4618      	mov	r0, r3
 802c086:	370c      	adds	r7, #12
 802c088:	46bd      	mov	sp, r7
 802c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c08e:	4770      	bx	lr

0802c090 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802c090:	b580      	push	{r7, lr}
 802c092:	b082      	sub	sp, #8
 802c094:	af00      	add	r7, sp, #0
 802c096:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802c098:	687b      	ldr	r3, [r7, #4]
 802c09a:	2201      	movs	r2, #1
 802c09c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802c0a0:	687b      	ldr	r3, [r7, #4]
 802c0a2:	2200      	movs	r2, #0
 802c0a4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802c0a8:	687b      	ldr	r3, [r7, #4]
 802c0aa:	2200      	movs	r2, #0
 802c0ac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802c0b0:	6878      	ldr	r0, [r7, #4]
 802c0b2:	f001 f84a 	bl	802d14a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c0b6:	687b      	ldr	r3, [r7, #4]
 802c0b8:	791b      	ldrb	r3, [r3, #4]
 802c0ba:	4619      	mov	r1, r3
 802c0bc:	6878      	ldr	r0, [r7, #4]
 802c0be:	f000 fe91 	bl	802cde4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c0c2:	687b      	ldr	r3, [r7, #4]
 802c0c4:	795b      	ldrb	r3, [r3, #5]
 802c0c6:	4619      	mov	r1, r3
 802c0c8:	6878      	ldr	r0, [r7, #4]
 802c0ca:	f000 fe8b 	bl	802cde4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c0ce:	2300      	movs	r3, #0
}
 802c0d0:	4618      	mov	r0, r3
 802c0d2:	3708      	adds	r7, #8
 802c0d4:	46bd      	mov	sp, r7
 802c0d6:	bd80      	pop	{r7, pc}

0802c0d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802c0d8:	b580      	push	{r7, lr}
 802c0da:	b086      	sub	sp, #24
 802c0dc:	af02      	add	r7, sp, #8
 802c0de:	6078      	str	r0, [r7, #4]
 802c0e0:	460b      	mov	r3, r1
 802c0e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802c0e4:	687b      	ldr	r3, [r7, #4]
 802c0e6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c0ea:	78fb      	ldrb	r3, [r7, #3]
 802c0ec:	b29b      	uxth	r3, r3
 802c0ee:	9300      	str	r3, [sp, #0]
 802c0f0:	4613      	mov	r3, r2
 802c0f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 802c0f6:	2100      	movs	r1, #0
 802c0f8:	6878      	ldr	r0, [r7, #4]
 802c0fa:	f000 f864 	bl	802c1c6 <USBH_GetDescriptor>
 802c0fe:	4603      	mov	r3, r0
 802c100:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802c102:	7bfb      	ldrb	r3, [r7, #15]
 802c104:	2b00      	cmp	r3, #0
 802c106:	d10a      	bne.n	802c11e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802c108:	687b      	ldr	r3, [r7, #4]
 802c10a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c114:	78fa      	ldrb	r2, [r7, #3]
 802c116:	b292      	uxth	r2, r2
 802c118:	4619      	mov	r1, r3
 802c11a:	f000 f918 	bl	802c34e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802c11e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c120:	4618      	mov	r0, r3
 802c122:	3710      	adds	r7, #16
 802c124:	46bd      	mov	sp, r7
 802c126:	bd80      	pop	{r7, pc}

0802c128 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802c128:	b580      	push	{r7, lr}
 802c12a:	b086      	sub	sp, #24
 802c12c:	af02      	add	r7, sp, #8
 802c12e:	6078      	str	r0, [r7, #4]
 802c130:	460b      	mov	r3, r1
 802c132:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802c134:	687b      	ldr	r3, [r7, #4]
 802c136:	331c      	adds	r3, #28
 802c138:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802c13a:	887b      	ldrh	r3, [r7, #2]
 802c13c:	9300      	str	r3, [sp, #0]
 802c13e:	68bb      	ldr	r3, [r7, #8]
 802c140:	f44f 7200 	mov.w	r2, #512	; 0x200
 802c144:	2100      	movs	r1, #0
 802c146:	6878      	ldr	r0, [r7, #4]
 802c148:	f000 f83d 	bl	802c1c6 <USBH_GetDescriptor>
 802c14c:	4603      	mov	r3, r0
 802c14e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802c150:	7bfb      	ldrb	r3, [r7, #15]
 802c152:	2b00      	cmp	r3, #0
 802c154:	d107      	bne.n	802c166 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802c156:	887b      	ldrh	r3, [r7, #2]
 802c158:	461a      	mov	r2, r3
 802c15a:	68b9      	ldr	r1, [r7, #8]
 802c15c:	6878      	ldr	r0, [r7, #4]
 802c15e:	f000 f987 	bl	802c470 <USBH_ParseCfgDesc>
 802c162:	4603      	mov	r3, r0
 802c164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c166:	7bfb      	ldrb	r3, [r7, #15]
}
 802c168:	4618      	mov	r0, r3
 802c16a:	3710      	adds	r7, #16
 802c16c:	46bd      	mov	sp, r7
 802c16e:	bd80      	pop	{r7, pc}

0802c170 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802c170:	b580      	push	{r7, lr}
 802c172:	b088      	sub	sp, #32
 802c174:	af02      	add	r7, sp, #8
 802c176:	60f8      	str	r0, [r7, #12]
 802c178:	607a      	str	r2, [r7, #4]
 802c17a:	461a      	mov	r2, r3
 802c17c:	460b      	mov	r3, r1
 802c17e:	72fb      	strb	r3, [r7, #11]
 802c180:	4613      	mov	r3, r2
 802c182:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802c184:	7afb      	ldrb	r3, [r7, #11]
 802c186:	b29b      	uxth	r3, r3
 802c188:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802c18c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802c18e:	68fb      	ldr	r3, [r7, #12]
 802c190:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c194:	893b      	ldrh	r3, [r7, #8]
 802c196:	9300      	str	r3, [sp, #0]
 802c198:	460b      	mov	r3, r1
 802c19a:	2100      	movs	r1, #0
 802c19c:	68f8      	ldr	r0, [r7, #12]
 802c19e:	f000 f812 	bl	802c1c6 <USBH_GetDescriptor>
 802c1a2:	4603      	mov	r3, r0
 802c1a4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802c1a6:	7dfb      	ldrb	r3, [r7, #23]
 802c1a8:	2b00      	cmp	r3, #0
 802c1aa:	d107      	bne.n	802c1bc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802c1ac:	68fb      	ldr	r3, [r7, #12]
 802c1ae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c1b2:	893a      	ldrh	r2, [r7, #8]
 802c1b4:	6879      	ldr	r1, [r7, #4]
 802c1b6:	4618      	mov	r0, r3
 802c1b8:	f000 fb24 	bl	802c804 <USBH_ParseStringDesc>
  }

  return status;
 802c1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 802c1be:	4618      	mov	r0, r3
 802c1c0:	3718      	adds	r7, #24
 802c1c2:	46bd      	mov	sp, r7
 802c1c4:	bd80      	pop	{r7, pc}

0802c1c6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802c1c6:	b580      	push	{r7, lr}
 802c1c8:	b084      	sub	sp, #16
 802c1ca:	af00      	add	r7, sp, #0
 802c1cc:	60f8      	str	r0, [r7, #12]
 802c1ce:	607b      	str	r3, [r7, #4]
 802c1d0:	460b      	mov	r3, r1
 802c1d2:	72fb      	strb	r3, [r7, #11]
 802c1d4:	4613      	mov	r3, r2
 802c1d6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802c1d8:	68fb      	ldr	r3, [r7, #12]
 802c1da:	789b      	ldrb	r3, [r3, #2]
 802c1dc:	2b01      	cmp	r3, #1
 802c1de:	d11c      	bne.n	802c21a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802c1e0:	7afb      	ldrb	r3, [r7, #11]
 802c1e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c1e6:	b2da      	uxtb	r2, r3
 802c1e8:	68fb      	ldr	r3, [r7, #12]
 802c1ea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802c1ec:	68fb      	ldr	r3, [r7, #12]
 802c1ee:	2206      	movs	r2, #6
 802c1f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802c1f2:	68fb      	ldr	r3, [r7, #12]
 802c1f4:	893a      	ldrh	r2, [r7, #8]
 802c1f6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802c1f8:	893b      	ldrh	r3, [r7, #8]
 802c1fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c1fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c202:	d104      	bne.n	802c20e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802c204:	68fb      	ldr	r3, [r7, #12]
 802c206:	f240 4209 	movw	r2, #1033	; 0x409
 802c20a:	829a      	strh	r2, [r3, #20]
 802c20c:	e002      	b.n	802c214 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802c20e:	68fb      	ldr	r3, [r7, #12]
 802c210:	2200      	movs	r2, #0
 802c212:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802c214:	68fb      	ldr	r3, [r7, #12]
 802c216:	8b3a      	ldrh	r2, [r7, #24]
 802c218:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802c21a:	8b3b      	ldrh	r3, [r7, #24]
 802c21c:	461a      	mov	r2, r3
 802c21e:	6879      	ldr	r1, [r7, #4]
 802c220:	68f8      	ldr	r0, [r7, #12]
 802c222:	f000 fb3d 	bl	802c8a0 <USBH_CtlReq>
 802c226:	4603      	mov	r3, r0
}
 802c228:	4618      	mov	r0, r3
 802c22a:	3710      	adds	r7, #16
 802c22c:	46bd      	mov	sp, r7
 802c22e:	bd80      	pop	{r7, pc}

0802c230 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802c230:	b580      	push	{r7, lr}
 802c232:	b082      	sub	sp, #8
 802c234:	af00      	add	r7, sp, #0
 802c236:	6078      	str	r0, [r7, #4]
 802c238:	460b      	mov	r3, r1
 802c23a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c23c:	687b      	ldr	r3, [r7, #4]
 802c23e:	789b      	ldrb	r3, [r3, #2]
 802c240:	2b01      	cmp	r3, #1
 802c242:	d10f      	bne.n	802c264 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802c244:	687b      	ldr	r3, [r7, #4]
 802c246:	2200      	movs	r2, #0
 802c248:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802c24a:	687b      	ldr	r3, [r7, #4]
 802c24c:	2205      	movs	r2, #5
 802c24e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802c250:	78fb      	ldrb	r3, [r7, #3]
 802c252:	b29a      	uxth	r2, r3
 802c254:	687b      	ldr	r3, [r7, #4]
 802c256:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c258:	687b      	ldr	r3, [r7, #4]
 802c25a:	2200      	movs	r2, #0
 802c25c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c25e:	687b      	ldr	r3, [r7, #4]
 802c260:	2200      	movs	r2, #0
 802c262:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c264:	2200      	movs	r2, #0
 802c266:	2100      	movs	r1, #0
 802c268:	6878      	ldr	r0, [r7, #4]
 802c26a:	f000 fb19 	bl	802c8a0 <USBH_CtlReq>
 802c26e:	4603      	mov	r3, r0
}
 802c270:	4618      	mov	r0, r3
 802c272:	3708      	adds	r7, #8
 802c274:	46bd      	mov	sp, r7
 802c276:	bd80      	pop	{r7, pc}

0802c278 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802c278:	b580      	push	{r7, lr}
 802c27a:	b082      	sub	sp, #8
 802c27c:	af00      	add	r7, sp, #0
 802c27e:	6078      	str	r0, [r7, #4]
 802c280:	460b      	mov	r3, r1
 802c282:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802c284:	687b      	ldr	r3, [r7, #4]
 802c286:	789b      	ldrb	r3, [r3, #2]
 802c288:	2b01      	cmp	r3, #1
 802c28a:	d10e      	bne.n	802c2aa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c28c:	687b      	ldr	r3, [r7, #4]
 802c28e:	2200      	movs	r2, #0
 802c290:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802c292:	687b      	ldr	r3, [r7, #4]
 802c294:	2209      	movs	r2, #9
 802c296:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802c298:	687b      	ldr	r3, [r7, #4]
 802c29a:	887a      	ldrh	r2, [r7, #2]
 802c29c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c29e:	687b      	ldr	r3, [r7, #4]
 802c2a0:	2200      	movs	r2, #0
 802c2a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c2a4:	687b      	ldr	r3, [r7, #4]
 802c2a6:	2200      	movs	r2, #0
 802c2a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c2aa:	2200      	movs	r2, #0
 802c2ac:	2100      	movs	r1, #0
 802c2ae:	6878      	ldr	r0, [r7, #4]
 802c2b0:	f000 faf6 	bl	802c8a0 <USBH_CtlReq>
 802c2b4:	4603      	mov	r3, r0
}
 802c2b6:	4618      	mov	r0, r3
 802c2b8:	3708      	adds	r7, #8
 802c2ba:	46bd      	mov	sp, r7
 802c2bc:	bd80      	pop	{r7, pc}

0802c2be <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802c2be:	b580      	push	{r7, lr}
 802c2c0:	b082      	sub	sp, #8
 802c2c2:	af00      	add	r7, sp, #0
 802c2c4:	6078      	str	r0, [r7, #4]
 802c2c6:	460b      	mov	r3, r1
 802c2c8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c2ca:	687b      	ldr	r3, [r7, #4]
 802c2cc:	789b      	ldrb	r3, [r3, #2]
 802c2ce:	2b01      	cmp	r3, #1
 802c2d0:	d10f      	bne.n	802c2f2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c2d2:	687b      	ldr	r3, [r7, #4]
 802c2d4:	2200      	movs	r2, #0
 802c2d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802c2d8:	687b      	ldr	r3, [r7, #4]
 802c2da:	2203      	movs	r2, #3
 802c2dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802c2de:	78fb      	ldrb	r3, [r7, #3]
 802c2e0:	b29a      	uxth	r2, r3
 802c2e2:	687b      	ldr	r3, [r7, #4]
 802c2e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c2e6:	687b      	ldr	r3, [r7, #4]
 802c2e8:	2200      	movs	r2, #0
 802c2ea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	2200      	movs	r2, #0
 802c2f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c2f2:	2200      	movs	r2, #0
 802c2f4:	2100      	movs	r1, #0
 802c2f6:	6878      	ldr	r0, [r7, #4]
 802c2f8:	f000 fad2 	bl	802c8a0 <USBH_CtlReq>
 802c2fc:	4603      	mov	r3, r0
}
 802c2fe:	4618      	mov	r0, r3
 802c300:	3708      	adds	r7, #8
 802c302:	46bd      	mov	sp, r7
 802c304:	bd80      	pop	{r7, pc}

0802c306 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802c306:	b580      	push	{r7, lr}
 802c308:	b082      	sub	sp, #8
 802c30a:	af00      	add	r7, sp, #0
 802c30c:	6078      	str	r0, [r7, #4]
 802c30e:	460b      	mov	r3, r1
 802c310:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c312:	687b      	ldr	r3, [r7, #4]
 802c314:	789b      	ldrb	r3, [r3, #2]
 802c316:	2b01      	cmp	r3, #1
 802c318:	d10f      	bne.n	802c33a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802c31a:	687b      	ldr	r3, [r7, #4]
 802c31c:	2202      	movs	r2, #2
 802c31e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802c320:	687b      	ldr	r3, [r7, #4]
 802c322:	2201      	movs	r2, #1
 802c324:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802c326:	687b      	ldr	r3, [r7, #4]
 802c328:	2200      	movs	r2, #0
 802c32a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802c32c:	78fb      	ldrb	r3, [r7, #3]
 802c32e:	b29a      	uxth	r2, r3
 802c330:	687b      	ldr	r3, [r7, #4]
 802c332:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	2200      	movs	r2, #0
 802c338:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802c33a:	2200      	movs	r2, #0
 802c33c:	2100      	movs	r1, #0
 802c33e:	6878      	ldr	r0, [r7, #4]
 802c340:	f000 faae 	bl	802c8a0 <USBH_CtlReq>
 802c344:	4603      	mov	r3, r0
}
 802c346:	4618      	mov	r0, r3
 802c348:	3708      	adds	r7, #8
 802c34a:	46bd      	mov	sp, r7
 802c34c:	bd80      	pop	{r7, pc}

0802c34e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802c34e:	b480      	push	{r7}
 802c350:	b085      	sub	sp, #20
 802c352:	af00      	add	r7, sp, #0
 802c354:	60f8      	str	r0, [r7, #12]
 802c356:	60b9      	str	r1, [r7, #8]
 802c358:	4613      	mov	r3, r2
 802c35a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802c35c:	68bb      	ldr	r3, [r7, #8]
 802c35e:	781a      	ldrb	r2, [r3, #0]
 802c360:	68fb      	ldr	r3, [r7, #12]
 802c362:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802c364:	68bb      	ldr	r3, [r7, #8]
 802c366:	785a      	ldrb	r2, [r3, #1]
 802c368:	68fb      	ldr	r3, [r7, #12]
 802c36a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802c36c:	68bb      	ldr	r3, [r7, #8]
 802c36e:	3302      	adds	r3, #2
 802c370:	781b      	ldrb	r3, [r3, #0]
 802c372:	b29a      	uxth	r2, r3
 802c374:	68bb      	ldr	r3, [r7, #8]
 802c376:	3303      	adds	r3, #3
 802c378:	781b      	ldrb	r3, [r3, #0]
 802c37a:	b29b      	uxth	r3, r3
 802c37c:	021b      	lsls	r3, r3, #8
 802c37e:	b29b      	uxth	r3, r3
 802c380:	4313      	orrs	r3, r2
 802c382:	b29a      	uxth	r2, r3
 802c384:	68fb      	ldr	r3, [r7, #12]
 802c386:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802c388:	68bb      	ldr	r3, [r7, #8]
 802c38a:	791a      	ldrb	r2, [r3, #4]
 802c38c:	68fb      	ldr	r3, [r7, #12]
 802c38e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802c390:	68bb      	ldr	r3, [r7, #8]
 802c392:	795a      	ldrb	r2, [r3, #5]
 802c394:	68fb      	ldr	r3, [r7, #12]
 802c396:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802c398:	68bb      	ldr	r3, [r7, #8]
 802c39a:	799a      	ldrb	r2, [r3, #6]
 802c39c:	68fb      	ldr	r3, [r7, #12]
 802c39e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802c3a0:	68bb      	ldr	r3, [r7, #8]
 802c3a2:	79da      	ldrb	r2, [r3, #7]
 802c3a4:	68fb      	ldr	r3, [r7, #12]
 802c3a6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802c3a8:	68fb      	ldr	r3, [r7, #12]
 802c3aa:	79db      	ldrb	r3, [r3, #7]
 802c3ac:	2b20      	cmp	r3, #32
 802c3ae:	dc11      	bgt.n	802c3d4 <USBH_ParseDevDesc+0x86>
 802c3b0:	2b08      	cmp	r3, #8
 802c3b2:	db16      	blt.n	802c3e2 <USBH_ParseDevDesc+0x94>
 802c3b4:	3b08      	subs	r3, #8
 802c3b6:	2201      	movs	r2, #1
 802c3b8:	fa02 f303 	lsl.w	r3, r2, r3
 802c3bc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802c3c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c3c4:	2b00      	cmp	r3, #0
 802c3c6:	bf14      	ite	ne
 802c3c8:	2301      	movne	r3, #1
 802c3ca:	2300      	moveq	r3, #0
 802c3cc:	b2db      	uxtb	r3, r3
 802c3ce:	2b00      	cmp	r3, #0
 802c3d0:	d102      	bne.n	802c3d8 <USBH_ParseDevDesc+0x8a>
 802c3d2:	e006      	b.n	802c3e2 <USBH_ParseDevDesc+0x94>
 802c3d4:	2b40      	cmp	r3, #64	; 0x40
 802c3d6:	d104      	bne.n	802c3e2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802c3d8:	68fb      	ldr	r3, [r7, #12]
 802c3da:	79da      	ldrb	r2, [r3, #7]
 802c3dc:	68fb      	ldr	r3, [r7, #12]
 802c3de:	71da      	strb	r2, [r3, #7]
      break;
 802c3e0:	e003      	b.n	802c3ea <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802c3e2:	68fb      	ldr	r3, [r7, #12]
 802c3e4:	2240      	movs	r2, #64	; 0x40
 802c3e6:	71da      	strb	r2, [r3, #7]
      break;
 802c3e8:	bf00      	nop
  }

  if (length > 8U)
 802c3ea:	88fb      	ldrh	r3, [r7, #6]
 802c3ec:	2b08      	cmp	r3, #8
 802c3ee:	d939      	bls.n	802c464 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802c3f0:	68bb      	ldr	r3, [r7, #8]
 802c3f2:	3308      	adds	r3, #8
 802c3f4:	781b      	ldrb	r3, [r3, #0]
 802c3f6:	b29a      	uxth	r2, r3
 802c3f8:	68bb      	ldr	r3, [r7, #8]
 802c3fa:	3309      	adds	r3, #9
 802c3fc:	781b      	ldrb	r3, [r3, #0]
 802c3fe:	b29b      	uxth	r3, r3
 802c400:	021b      	lsls	r3, r3, #8
 802c402:	b29b      	uxth	r3, r3
 802c404:	4313      	orrs	r3, r2
 802c406:	b29a      	uxth	r2, r3
 802c408:	68fb      	ldr	r3, [r7, #12]
 802c40a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802c40c:	68bb      	ldr	r3, [r7, #8]
 802c40e:	330a      	adds	r3, #10
 802c410:	781b      	ldrb	r3, [r3, #0]
 802c412:	b29a      	uxth	r2, r3
 802c414:	68bb      	ldr	r3, [r7, #8]
 802c416:	330b      	adds	r3, #11
 802c418:	781b      	ldrb	r3, [r3, #0]
 802c41a:	b29b      	uxth	r3, r3
 802c41c:	021b      	lsls	r3, r3, #8
 802c41e:	b29b      	uxth	r3, r3
 802c420:	4313      	orrs	r3, r2
 802c422:	b29a      	uxth	r2, r3
 802c424:	68fb      	ldr	r3, [r7, #12]
 802c426:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802c428:	68bb      	ldr	r3, [r7, #8]
 802c42a:	330c      	adds	r3, #12
 802c42c:	781b      	ldrb	r3, [r3, #0]
 802c42e:	b29a      	uxth	r2, r3
 802c430:	68bb      	ldr	r3, [r7, #8]
 802c432:	330d      	adds	r3, #13
 802c434:	781b      	ldrb	r3, [r3, #0]
 802c436:	b29b      	uxth	r3, r3
 802c438:	021b      	lsls	r3, r3, #8
 802c43a:	b29b      	uxth	r3, r3
 802c43c:	4313      	orrs	r3, r2
 802c43e:	b29a      	uxth	r2, r3
 802c440:	68fb      	ldr	r3, [r7, #12]
 802c442:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802c444:	68bb      	ldr	r3, [r7, #8]
 802c446:	7b9a      	ldrb	r2, [r3, #14]
 802c448:	68fb      	ldr	r3, [r7, #12]
 802c44a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802c44c:	68bb      	ldr	r3, [r7, #8]
 802c44e:	7bda      	ldrb	r2, [r3, #15]
 802c450:	68fb      	ldr	r3, [r7, #12]
 802c452:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802c454:	68bb      	ldr	r3, [r7, #8]
 802c456:	7c1a      	ldrb	r2, [r3, #16]
 802c458:	68fb      	ldr	r3, [r7, #12]
 802c45a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802c45c:	68bb      	ldr	r3, [r7, #8]
 802c45e:	7c5a      	ldrb	r2, [r3, #17]
 802c460:	68fb      	ldr	r3, [r7, #12]
 802c462:	745a      	strb	r2, [r3, #17]
  }
}
 802c464:	bf00      	nop
 802c466:	3714      	adds	r7, #20
 802c468:	46bd      	mov	sp, r7
 802c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c46e:	4770      	bx	lr

0802c470 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802c470:	b580      	push	{r7, lr}
 802c472:	b08c      	sub	sp, #48	; 0x30
 802c474:	af00      	add	r7, sp, #0
 802c476:	60f8      	str	r0, [r7, #12]
 802c478:	60b9      	str	r1, [r7, #8]
 802c47a:	4613      	mov	r3, r2
 802c47c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802c47e:	68fb      	ldr	r3, [r7, #12]
 802c480:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c484:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802c486:	2300      	movs	r3, #0
 802c488:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802c48c:	68bb      	ldr	r3, [r7, #8]
 802c48e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802c490:	2300      	movs	r3, #0
 802c492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802c496:	2300      	movs	r3, #0
 802c498:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802c49c:	68bb      	ldr	r3, [r7, #8]
 802c49e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802c4a0:	68bb      	ldr	r3, [r7, #8]
 802c4a2:	781a      	ldrb	r2, [r3, #0]
 802c4a4:	6a3b      	ldr	r3, [r7, #32]
 802c4a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802c4a8:	68bb      	ldr	r3, [r7, #8]
 802c4aa:	785a      	ldrb	r2, [r3, #1]
 802c4ac:	6a3b      	ldr	r3, [r7, #32]
 802c4ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802c4b0:	68bb      	ldr	r3, [r7, #8]
 802c4b2:	3302      	adds	r3, #2
 802c4b4:	781b      	ldrb	r3, [r3, #0]
 802c4b6:	b29a      	uxth	r2, r3
 802c4b8:	68bb      	ldr	r3, [r7, #8]
 802c4ba:	3303      	adds	r3, #3
 802c4bc:	781b      	ldrb	r3, [r3, #0]
 802c4be:	b29b      	uxth	r3, r3
 802c4c0:	021b      	lsls	r3, r3, #8
 802c4c2:	b29b      	uxth	r3, r3
 802c4c4:	4313      	orrs	r3, r2
 802c4c6:	b29b      	uxth	r3, r3
 802c4c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c4cc:	bf28      	it	cs
 802c4ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802c4d2:	b29a      	uxth	r2, r3
 802c4d4:	6a3b      	ldr	r3, [r7, #32]
 802c4d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802c4d8:	68bb      	ldr	r3, [r7, #8]
 802c4da:	791a      	ldrb	r2, [r3, #4]
 802c4dc:	6a3b      	ldr	r3, [r7, #32]
 802c4de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802c4e0:	68bb      	ldr	r3, [r7, #8]
 802c4e2:	795a      	ldrb	r2, [r3, #5]
 802c4e4:	6a3b      	ldr	r3, [r7, #32]
 802c4e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802c4e8:	68bb      	ldr	r3, [r7, #8]
 802c4ea:	799a      	ldrb	r2, [r3, #6]
 802c4ec:	6a3b      	ldr	r3, [r7, #32]
 802c4ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802c4f0:	68bb      	ldr	r3, [r7, #8]
 802c4f2:	79da      	ldrb	r2, [r3, #7]
 802c4f4:	6a3b      	ldr	r3, [r7, #32]
 802c4f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802c4f8:	68bb      	ldr	r3, [r7, #8]
 802c4fa:	7a1a      	ldrb	r2, [r3, #8]
 802c4fc:	6a3b      	ldr	r3, [r7, #32]
 802c4fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802c500:	6a3b      	ldr	r3, [r7, #32]
 802c502:	781b      	ldrb	r3, [r3, #0]
 802c504:	2b09      	cmp	r3, #9
 802c506:	d002      	beq.n	802c50e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802c508:	6a3b      	ldr	r3, [r7, #32]
 802c50a:	2209      	movs	r2, #9
 802c50c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802c50e:	88fb      	ldrh	r3, [r7, #6]
 802c510:	2b09      	cmp	r3, #9
 802c512:	f240 809d 	bls.w	802c650 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802c516:	2309      	movs	r3, #9
 802c518:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c51a:	2300      	movs	r3, #0
 802c51c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c51e:	e081      	b.n	802c624 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c520:	f107 0316 	add.w	r3, r7, #22
 802c524:	4619      	mov	r1, r3
 802c526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c528:	f000 f99f 	bl	802c86a <USBH_GetNextDesc>
 802c52c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c530:	785b      	ldrb	r3, [r3, #1]
 802c532:	2b04      	cmp	r3, #4
 802c534:	d176      	bne.n	802c624 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802c536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c538:	781b      	ldrb	r3, [r3, #0]
 802c53a:	2b09      	cmp	r3, #9
 802c53c:	d002      	beq.n	802c544 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c540:	2209      	movs	r2, #9
 802c542:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802c544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c548:	221a      	movs	r2, #26
 802c54a:	fb02 f303 	mul.w	r3, r2, r3
 802c54e:	3308      	adds	r3, #8
 802c550:	6a3a      	ldr	r2, [r7, #32]
 802c552:	4413      	add	r3, r2
 802c554:	3302      	adds	r3, #2
 802c556:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802c558:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c55a:	69f8      	ldr	r0, [r7, #28]
 802c55c:	f000 f87e 	bl	802c65c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802c560:	2300      	movs	r3, #0
 802c562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802c566:	2300      	movs	r3, #0
 802c568:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c56a:	e043      	b.n	802c5f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c56c:	f107 0316 	add.w	r3, r7, #22
 802c570:	4619      	mov	r1, r3
 802c572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c574:	f000 f979 	bl	802c86a <USBH_GetNextDesc>
 802c578:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c57c:	785b      	ldrb	r3, [r3, #1]
 802c57e:	2b05      	cmp	r3, #5
 802c580:	d138      	bne.n	802c5f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802c582:	69fb      	ldr	r3, [r7, #28]
 802c584:	795b      	ldrb	r3, [r3, #5]
 802c586:	2b01      	cmp	r3, #1
 802c588:	d10f      	bne.n	802c5aa <USBH_ParseCfgDesc+0x13a>
 802c58a:	69fb      	ldr	r3, [r7, #28]
 802c58c:	799b      	ldrb	r3, [r3, #6]
 802c58e:	2b02      	cmp	r3, #2
 802c590:	d10b      	bne.n	802c5aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c592:	69fb      	ldr	r3, [r7, #28]
 802c594:	79db      	ldrb	r3, [r3, #7]
 802c596:	2b00      	cmp	r3, #0
 802c598:	d10f      	bne.n	802c5ba <USBH_ParseCfgDesc+0x14a>
 802c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c59c:	781b      	ldrb	r3, [r3, #0]
 802c59e:	2b09      	cmp	r3, #9
 802c5a0:	d00b      	beq.n	802c5ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802c5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5a4:	2209      	movs	r2, #9
 802c5a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c5a8:	e007      	b.n	802c5ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5ac:	781b      	ldrb	r3, [r3, #0]
 802c5ae:	2b07      	cmp	r3, #7
 802c5b0:	d004      	beq.n	802c5bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802c5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c5b4:	2207      	movs	r2, #7
 802c5b6:	701a      	strb	r2, [r3, #0]
 802c5b8:	e000      	b.n	802c5bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c5ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802c5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c5c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c5c4:	3201      	adds	r2, #1
 802c5c6:	00d2      	lsls	r2, r2, #3
 802c5c8:	211a      	movs	r1, #26
 802c5ca:	fb01 f303 	mul.w	r3, r1, r3
 802c5ce:	4413      	add	r3, r2
 802c5d0:	3308      	adds	r3, #8
 802c5d2:	6a3a      	ldr	r2, [r7, #32]
 802c5d4:	4413      	add	r3, r2
 802c5d6:	3304      	adds	r3, #4
 802c5d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802c5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c5dc:	69b9      	ldr	r1, [r7, #24]
 802c5de:	68f8      	ldr	r0, [r7, #12]
 802c5e0:	f000 f86b 	bl	802c6ba <USBH_ParseEPDesc>
 802c5e4:	4603      	mov	r3, r0
 802c5e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802c5ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c5ee:	3301      	adds	r3, #1
 802c5f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c5f4:	69fb      	ldr	r3, [r7, #28]
 802c5f6:	791b      	ldrb	r3, [r3, #4]
 802c5f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c5fc:	429a      	cmp	r2, r3
 802c5fe:	d204      	bcs.n	802c60a <USBH_ParseCfgDesc+0x19a>
 802c600:	6a3b      	ldr	r3, [r7, #32]
 802c602:	885a      	ldrh	r2, [r3, #2]
 802c604:	8afb      	ldrh	r3, [r7, #22]
 802c606:	429a      	cmp	r2, r3
 802c608:	d8b0      	bhi.n	802c56c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802c60a:	69fb      	ldr	r3, [r7, #28]
 802c60c:	791b      	ldrb	r3, [r3, #4]
 802c60e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c612:	429a      	cmp	r2, r3
 802c614:	d201      	bcs.n	802c61a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802c616:	2303      	movs	r3, #3
 802c618:	e01c      	b.n	802c654 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802c61a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c61e:	3301      	adds	r3, #1
 802c620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c628:	2b01      	cmp	r3, #1
 802c62a:	d805      	bhi.n	802c638 <USBH_ParseCfgDesc+0x1c8>
 802c62c:	6a3b      	ldr	r3, [r7, #32]
 802c62e:	885a      	ldrh	r2, [r3, #2]
 802c630:	8afb      	ldrh	r3, [r7, #22]
 802c632:	429a      	cmp	r2, r3
 802c634:	f63f af74 	bhi.w	802c520 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802c638:	6a3b      	ldr	r3, [r7, #32]
 802c63a:	791b      	ldrb	r3, [r3, #4]
 802c63c:	2b02      	cmp	r3, #2
 802c63e:	bf28      	it	cs
 802c640:	2302      	movcs	r3, #2
 802c642:	b2db      	uxtb	r3, r3
 802c644:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c648:	429a      	cmp	r2, r3
 802c64a:	d201      	bcs.n	802c650 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802c64c:	2303      	movs	r3, #3
 802c64e:	e001      	b.n	802c654 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802c650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c654:	4618      	mov	r0, r3
 802c656:	3730      	adds	r7, #48	; 0x30
 802c658:	46bd      	mov	sp, r7
 802c65a:	bd80      	pop	{r7, pc}

0802c65c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802c65c:	b480      	push	{r7}
 802c65e:	b083      	sub	sp, #12
 802c660:	af00      	add	r7, sp, #0
 802c662:	6078      	str	r0, [r7, #4]
 802c664:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802c666:	683b      	ldr	r3, [r7, #0]
 802c668:	781a      	ldrb	r2, [r3, #0]
 802c66a:	687b      	ldr	r3, [r7, #4]
 802c66c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802c66e:	683b      	ldr	r3, [r7, #0]
 802c670:	785a      	ldrb	r2, [r3, #1]
 802c672:	687b      	ldr	r3, [r7, #4]
 802c674:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802c676:	683b      	ldr	r3, [r7, #0]
 802c678:	789a      	ldrb	r2, [r3, #2]
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802c67e:	683b      	ldr	r3, [r7, #0]
 802c680:	78da      	ldrb	r2, [r3, #3]
 802c682:	687b      	ldr	r3, [r7, #4]
 802c684:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802c686:	683b      	ldr	r3, [r7, #0]
 802c688:	791a      	ldrb	r2, [r3, #4]
 802c68a:	687b      	ldr	r3, [r7, #4]
 802c68c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802c68e:	683b      	ldr	r3, [r7, #0]
 802c690:	795a      	ldrb	r2, [r3, #5]
 802c692:	687b      	ldr	r3, [r7, #4]
 802c694:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802c696:	683b      	ldr	r3, [r7, #0]
 802c698:	799a      	ldrb	r2, [r3, #6]
 802c69a:	687b      	ldr	r3, [r7, #4]
 802c69c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802c69e:	683b      	ldr	r3, [r7, #0]
 802c6a0:	79da      	ldrb	r2, [r3, #7]
 802c6a2:	687b      	ldr	r3, [r7, #4]
 802c6a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802c6a6:	683b      	ldr	r3, [r7, #0]
 802c6a8:	7a1a      	ldrb	r2, [r3, #8]
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	721a      	strb	r2, [r3, #8]
}
 802c6ae:	bf00      	nop
 802c6b0:	370c      	adds	r7, #12
 802c6b2:	46bd      	mov	sp, r7
 802c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6b8:	4770      	bx	lr

0802c6ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802c6ba:	b480      	push	{r7}
 802c6bc:	b087      	sub	sp, #28
 802c6be:	af00      	add	r7, sp, #0
 802c6c0:	60f8      	str	r0, [r7, #12]
 802c6c2:	60b9      	str	r1, [r7, #8]
 802c6c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802c6c6:	2300      	movs	r3, #0
 802c6c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	781a      	ldrb	r2, [r3, #0]
 802c6ce:	68bb      	ldr	r3, [r7, #8]
 802c6d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802c6d2:	687b      	ldr	r3, [r7, #4]
 802c6d4:	785a      	ldrb	r2, [r3, #1]
 802c6d6:	68bb      	ldr	r3, [r7, #8]
 802c6d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802c6da:	687b      	ldr	r3, [r7, #4]
 802c6dc:	789a      	ldrb	r2, [r3, #2]
 802c6de:	68bb      	ldr	r3, [r7, #8]
 802c6e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802c6e2:	687b      	ldr	r3, [r7, #4]
 802c6e4:	78da      	ldrb	r2, [r3, #3]
 802c6e6:	68bb      	ldr	r3, [r7, #8]
 802c6e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802c6ea:	687b      	ldr	r3, [r7, #4]
 802c6ec:	3304      	adds	r3, #4
 802c6ee:	781b      	ldrb	r3, [r3, #0]
 802c6f0:	b29a      	uxth	r2, r3
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	3305      	adds	r3, #5
 802c6f6:	781b      	ldrb	r3, [r3, #0]
 802c6f8:	b29b      	uxth	r3, r3
 802c6fa:	021b      	lsls	r3, r3, #8
 802c6fc:	b29b      	uxth	r3, r3
 802c6fe:	4313      	orrs	r3, r2
 802c700:	b29a      	uxth	r2, r3
 802c702:	68bb      	ldr	r3, [r7, #8]
 802c704:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802c706:	687b      	ldr	r3, [r7, #4]
 802c708:	799a      	ldrb	r2, [r3, #6]
 802c70a:	68bb      	ldr	r3, [r7, #8]
 802c70c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802c70e:	68bb      	ldr	r3, [r7, #8]
 802c710:	889b      	ldrh	r3, [r3, #4]
 802c712:	2b00      	cmp	r3, #0
 802c714:	d102      	bne.n	802c71c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802c716:	2303      	movs	r3, #3
 802c718:	75fb      	strb	r3, [r7, #23]
 802c71a:	e033      	b.n	802c784 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802c71c:	68bb      	ldr	r3, [r7, #8]
 802c71e:	889b      	ldrh	r3, [r3, #4]
 802c720:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c724:	f023 0307 	bic.w	r3, r3, #7
 802c728:	b29a      	uxth	r2, r3
 802c72a:	68bb      	ldr	r3, [r7, #8]
 802c72c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802c72e:	68bb      	ldr	r3, [r7, #8]
 802c730:	889b      	ldrh	r3, [r3, #4]
 802c732:	b21a      	sxth	r2, r3
 802c734:	687b      	ldr	r3, [r7, #4]
 802c736:	3304      	adds	r3, #4
 802c738:	781b      	ldrb	r3, [r3, #0]
 802c73a:	b299      	uxth	r1, r3
 802c73c:	687b      	ldr	r3, [r7, #4]
 802c73e:	3305      	adds	r3, #5
 802c740:	781b      	ldrb	r3, [r3, #0]
 802c742:	b29b      	uxth	r3, r3
 802c744:	021b      	lsls	r3, r3, #8
 802c746:	b29b      	uxth	r3, r3
 802c748:	430b      	orrs	r3, r1
 802c74a:	b29b      	uxth	r3, r3
 802c74c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802c750:	2b00      	cmp	r3, #0
 802c752:	d110      	bne.n	802c776 <USBH_ParseEPDesc+0xbc>
 802c754:	687b      	ldr	r3, [r7, #4]
 802c756:	3304      	adds	r3, #4
 802c758:	781b      	ldrb	r3, [r3, #0]
 802c75a:	b299      	uxth	r1, r3
 802c75c:	687b      	ldr	r3, [r7, #4]
 802c75e:	3305      	adds	r3, #5
 802c760:	781b      	ldrb	r3, [r3, #0]
 802c762:	b29b      	uxth	r3, r3
 802c764:	021b      	lsls	r3, r3, #8
 802c766:	b29b      	uxth	r3, r3
 802c768:	430b      	orrs	r3, r1
 802c76a:	b29b      	uxth	r3, r3
 802c76c:	b21b      	sxth	r3, r3
 802c76e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802c772:	b21b      	sxth	r3, r3
 802c774:	e001      	b.n	802c77a <USBH_ParseEPDesc+0xc0>
 802c776:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c77a:	4313      	orrs	r3, r2
 802c77c:	b21b      	sxth	r3, r3
 802c77e:	b29a      	uxth	r2, r3
 802c780:	68bb      	ldr	r3, [r7, #8]
 802c782:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802c784:	68fb      	ldr	r3, [r7, #12]
 802c786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802c78a:	2b00      	cmp	r3, #0
 802c78c:	d116      	bne.n	802c7bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c78e:	68bb      	ldr	r3, [r7, #8]
 802c790:	78db      	ldrb	r3, [r3, #3]
 802c792:	f003 0303 	and.w	r3, r3, #3
 802c796:	2b01      	cmp	r3, #1
 802c798:	d005      	beq.n	802c7a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802c79a:	68bb      	ldr	r3, [r7, #8]
 802c79c:	78db      	ldrb	r3, [r3, #3]
 802c79e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c7a2:	2b03      	cmp	r3, #3
 802c7a4:	d127      	bne.n	802c7f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c7a6:	68bb      	ldr	r3, [r7, #8]
 802c7a8:	799b      	ldrb	r3, [r3, #6]
 802c7aa:	2b00      	cmp	r3, #0
 802c7ac:	d003      	beq.n	802c7b6 <USBH_ParseEPDesc+0xfc>
 802c7ae:	68bb      	ldr	r3, [r7, #8]
 802c7b0:	799b      	ldrb	r3, [r3, #6]
 802c7b2:	2b10      	cmp	r3, #16
 802c7b4:	d91f      	bls.n	802c7f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c7b6:	2303      	movs	r3, #3
 802c7b8:	75fb      	strb	r3, [r7, #23]
 802c7ba:	e01c      	b.n	802c7f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802c7bc:	68bb      	ldr	r3, [r7, #8]
 802c7be:	78db      	ldrb	r3, [r3, #3]
 802c7c0:	f003 0303 	and.w	r3, r3, #3
 802c7c4:	2b01      	cmp	r3, #1
 802c7c6:	d10a      	bne.n	802c7de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c7c8:	68bb      	ldr	r3, [r7, #8]
 802c7ca:	799b      	ldrb	r3, [r3, #6]
 802c7cc:	2b00      	cmp	r3, #0
 802c7ce:	d003      	beq.n	802c7d8 <USBH_ParseEPDesc+0x11e>
 802c7d0:	68bb      	ldr	r3, [r7, #8]
 802c7d2:	799b      	ldrb	r3, [r3, #6]
 802c7d4:	2b10      	cmp	r3, #16
 802c7d6:	d90e      	bls.n	802c7f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c7d8:	2303      	movs	r3, #3
 802c7da:	75fb      	strb	r3, [r7, #23]
 802c7dc:	e00b      	b.n	802c7f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802c7de:	68bb      	ldr	r3, [r7, #8]
 802c7e0:	78db      	ldrb	r3, [r3, #3]
 802c7e2:	f003 0303 	and.w	r3, r3, #3
 802c7e6:	2b03      	cmp	r3, #3
 802c7e8:	d105      	bne.n	802c7f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802c7ea:	68bb      	ldr	r3, [r7, #8]
 802c7ec:	799b      	ldrb	r3, [r3, #6]
 802c7ee:	2b00      	cmp	r3, #0
 802c7f0:	d101      	bne.n	802c7f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c7f2:	2303      	movs	r3, #3
 802c7f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802c7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 802c7f8:	4618      	mov	r0, r3
 802c7fa:	371c      	adds	r7, #28
 802c7fc:	46bd      	mov	sp, r7
 802c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c802:	4770      	bx	lr

0802c804 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802c804:	b480      	push	{r7}
 802c806:	b087      	sub	sp, #28
 802c808:	af00      	add	r7, sp, #0
 802c80a:	60f8      	str	r0, [r7, #12]
 802c80c:	60b9      	str	r1, [r7, #8]
 802c80e:	4613      	mov	r3, r2
 802c810:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802c812:	68fb      	ldr	r3, [r7, #12]
 802c814:	3301      	adds	r3, #1
 802c816:	781b      	ldrb	r3, [r3, #0]
 802c818:	2b03      	cmp	r3, #3
 802c81a:	d120      	bne.n	802c85e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802c81c:	68fb      	ldr	r3, [r7, #12]
 802c81e:	781b      	ldrb	r3, [r3, #0]
 802c820:	1e9a      	subs	r2, r3, #2
 802c822:	88fb      	ldrh	r3, [r7, #6]
 802c824:	4293      	cmp	r3, r2
 802c826:	bf28      	it	cs
 802c828:	4613      	movcs	r3, r2
 802c82a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802c82c:	68fb      	ldr	r3, [r7, #12]
 802c82e:	3302      	adds	r3, #2
 802c830:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802c832:	2300      	movs	r3, #0
 802c834:	82fb      	strh	r3, [r7, #22]
 802c836:	e00b      	b.n	802c850 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802c838:	8afb      	ldrh	r3, [r7, #22]
 802c83a:	68fa      	ldr	r2, [r7, #12]
 802c83c:	4413      	add	r3, r2
 802c83e:	781a      	ldrb	r2, [r3, #0]
 802c840:	68bb      	ldr	r3, [r7, #8]
 802c842:	701a      	strb	r2, [r3, #0]
      pdest++;
 802c844:	68bb      	ldr	r3, [r7, #8]
 802c846:	3301      	adds	r3, #1
 802c848:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802c84a:	8afb      	ldrh	r3, [r7, #22]
 802c84c:	3302      	adds	r3, #2
 802c84e:	82fb      	strh	r3, [r7, #22]
 802c850:	8afa      	ldrh	r2, [r7, #22]
 802c852:	8abb      	ldrh	r3, [r7, #20]
 802c854:	429a      	cmp	r2, r3
 802c856:	d3ef      	bcc.n	802c838 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802c858:	68bb      	ldr	r3, [r7, #8]
 802c85a:	2200      	movs	r2, #0
 802c85c:	701a      	strb	r2, [r3, #0]
  }
}
 802c85e:	bf00      	nop
 802c860:	371c      	adds	r7, #28
 802c862:	46bd      	mov	sp, r7
 802c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c868:	4770      	bx	lr

0802c86a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802c86a:	b480      	push	{r7}
 802c86c:	b085      	sub	sp, #20
 802c86e:	af00      	add	r7, sp, #0
 802c870:	6078      	str	r0, [r7, #4]
 802c872:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802c874:	683b      	ldr	r3, [r7, #0]
 802c876:	881a      	ldrh	r2, [r3, #0]
 802c878:	687b      	ldr	r3, [r7, #4]
 802c87a:	781b      	ldrb	r3, [r3, #0]
 802c87c:	b29b      	uxth	r3, r3
 802c87e:	4413      	add	r3, r2
 802c880:	b29a      	uxth	r2, r3
 802c882:	683b      	ldr	r3, [r7, #0]
 802c884:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	781b      	ldrb	r3, [r3, #0]
 802c88a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	4413      	add	r3, r2
 802c890:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802c892:	68fb      	ldr	r3, [r7, #12]
}
 802c894:	4618      	mov	r0, r3
 802c896:	3714      	adds	r7, #20
 802c898:	46bd      	mov	sp, r7
 802c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c89e:	4770      	bx	lr

0802c8a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802c8a0:	b580      	push	{r7, lr}
 802c8a2:	b086      	sub	sp, #24
 802c8a4:	af00      	add	r7, sp, #0
 802c8a6:	60f8      	str	r0, [r7, #12]
 802c8a8:	60b9      	str	r1, [r7, #8]
 802c8aa:	4613      	mov	r3, r2
 802c8ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802c8ae:	2301      	movs	r3, #1
 802c8b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802c8b2:	68fb      	ldr	r3, [r7, #12]
 802c8b4:	789b      	ldrb	r3, [r3, #2]
 802c8b6:	2b01      	cmp	r3, #1
 802c8b8:	d002      	beq.n	802c8c0 <USBH_CtlReq+0x20>
 802c8ba:	2b02      	cmp	r3, #2
 802c8bc:	d00f      	beq.n	802c8de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802c8be:	e027      	b.n	802c910 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802c8c0:	68fb      	ldr	r3, [r7, #12]
 802c8c2:	68ba      	ldr	r2, [r7, #8]
 802c8c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802c8c6:	68fb      	ldr	r3, [r7, #12]
 802c8c8:	88fa      	ldrh	r2, [r7, #6]
 802c8ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802c8cc:	68fb      	ldr	r3, [r7, #12]
 802c8ce:	2201      	movs	r2, #1
 802c8d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802c8d2:	68fb      	ldr	r3, [r7, #12]
 802c8d4:	2202      	movs	r2, #2
 802c8d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802c8d8:	2301      	movs	r3, #1
 802c8da:	75fb      	strb	r3, [r7, #23]
      break;
 802c8dc:	e018      	b.n	802c910 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802c8de:	68f8      	ldr	r0, [r7, #12]
 802c8e0:	f000 f81c 	bl	802c91c <USBH_HandleControl>
 802c8e4:	4603      	mov	r3, r0
 802c8e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802c8e8:	7dfb      	ldrb	r3, [r7, #23]
 802c8ea:	2b00      	cmp	r3, #0
 802c8ec:	d002      	beq.n	802c8f4 <USBH_CtlReq+0x54>
 802c8ee:	7dfb      	ldrb	r3, [r7, #23]
 802c8f0:	2b03      	cmp	r3, #3
 802c8f2:	d106      	bne.n	802c902 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802c8f4:	68fb      	ldr	r3, [r7, #12]
 802c8f6:	2201      	movs	r2, #1
 802c8f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802c8fa:	68fb      	ldr	r3, [r7, #12]
 802c8fc:	2200      	movs	r2, #0
 802c8fe:	761a      	strb	r2, [r3, #24]
      break;
 802c900:	e005      	b.n	802c90e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802c902:	7dfb      	ldrb	r3, [r7, #23]
 802c904:	2b02      	cmp	r3, #2
 802c906:	d102      	bne.n	802c90e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802c908:	68fb      	ldr	r3, [r7, #12]
 802c90a:	2201      	movs	r2, #1
 802c90c:	709a      	strb	r2, [r3, #2]
      break;
 802c90e:	bf00      	nop
  }
  return status;
 802c910:	7dfb      	ldrb	r3, [r7, #23]
}
 802c912:	4618      	mov	r0, r3
 802c914:	3718      	adds	r7, #24
 802c916:	46bd      	mov	sp, r7
 802c918:	bd80      	pop	{r7, pc}
	...

0802c91c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802c91c:	b580      	push	{r7, lr}
 802c91e:	b086      	sub	sp, #24
 802c920:	af02      	add	r7, sp, #8
 802c922:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802c924:	2301      	movs	r3, #1
 802c926:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c928:	2300      	movs	r3, #0
 802c92a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802c92c:	687b      	ldr	r3, [r7, #4]
 802c92e:	7e1b      	ldrb	r3, [r3, #24]
 802c930:	3b01      	subs	r3, #1
 802c932:	2b0a      	cmp	r3, #10
 802c934:	f200 8156 	bhi.w	802cbe4 <USBH_HandleControl+0x2c8>
 802c938:	a201      	add	r2, pc, #4	; (adr r2, 802c940 <USBH_HandleControl+0x24>)
 802c93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c93e:	bf00      	nop
 802c940:	0802c96d 	.word	0x0802c96d
 802c944:	0802c987 	.word	0x0802c987
 802c948:	0802c9f1 	.word	0x0802c9f1
 802c94c:	0802ca17 	.word	0x0802ca17
 802c950:	0802ca4f 	.word	0x0802ca4f
 802c954:	0802ca79 	.word	0x0802ca79
 802c958:	0802cacb 	.word	0x0802cacb
 802c95c:	0802caed 	.word	0x0802caed
 802c960:	0802cb29 	.word	0x0802cb29
 802c964:	0802cb4f 	.word	0x0802cb4f
 802c968:	0802cb8d 	.word	0x0802cb8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802c96c:	687b      	ldr	r3, [r7, #4]
 802c96e:	f103 0110 	add.w	r1, r3, #16
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	795b      	ldrb	r3, [r3, #5]
 802c976:	461a      	mov	r2, r3
 802c978:	6878      	ldr	r0, [r7, #4]
 802c97a:	f000 f943 	bl	802cc04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802c97e:	687b      	ldr	r3, [r7, #4]
 802c980:	2202      	movs	r2, #2
 802c982:	761a      	strb	r2, [r3, #24]
      break;
 802c984:	e139      	b.n	802cbfa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802c986:	687b      	ldr	r3, [r7, #4]
 802c988:	795b      	ldrb	r3, [r3, #5]
 802c98a:	4619      	mov	r1, r3
 802c98c:	6878      	ldr	r0, [r7, #4]
 802c98e:	f000 fccb 	bl	802d328 <USBH_LL_GetURBState>
 802c992:	4603      	mov	r3, r0
 802c994:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802c996:	7bbb      	ldrb	r3, [r7, #14]
 802c998:	2b01      	cmp	r3, #1
 802c99a:	d11e      	bne.n	802c9da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802c99c:	687b      	ldr	r3, [r7, #4]
 802c99e:	7c1b      	ldrb	r3, [r3, #16]
 802c9a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802c9a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802c9a6:	687b      	ldr	r3, [r7, #4]
 802c9a8:	8adb      	ldrh	r3, [r3, #22]
 802c9aa:	2b00      	cmp	r3, #0
 802c9ac:	d00a      	beq.n	802c9c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802c9ae:	7b7b      	ldrb	r3, [r7, #13]
 802c9b0:	2b80      	cmp	r3, #128	; 0x80
 802c9b2:	d103      	bne.n	802c9bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802c9b4:	687b      	ldr	r3, [r7, #4]
 802c9b6:	2203      	movs	r2, #3
 802c9b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802c9ba:	e115      	b.n	802cbe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802c9bc:	687b      	ldr	r3, [r7, #4]
 802c9be:	2205      	movs	r2, #5
 802c9c0:	761a      	strb	r2, [r3, #24]
      break;
 802c9c2:	e111      	b.n	802cbe8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802c9c4:	7b7b      	ldrb	r3, [r7, #13]
 802c9c6:	2b80      	cmp	r3, #128	; 0x80
 802c9c8:	d103      	bne.n	802c9d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	2209      	movs	r2, #9
 802c9ce:	761a      	strb	r2, [r3, #24]
      break;
 802c9d0:	e10a      	b.n	802cbe8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802c9d2:	687b      	ldr	r3, [r7, #4]
 802c9d4:	2207      	movs	r2, #7
 802c9d6:	761a      	strb	r2, [r3, #24]
      break;
 802c9d8:	e106      	b.n	802cbe8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802c9da:	7bbb      	ldrb	r3, [r7, #14]
 802c9dc:	2b04      	cmp	r3, #4
 802c9de:	d003      	beq.n	802c9e8 <USBH_HandleControl+0xcc>
 802c9e0:	7bbb      	ldrb	r3, [r7, #14]
 802c9e2:	2b02      	cmp	r3, #2
 802c9e4:	f040 8100 	bne.w	802cbe8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802c9e8:	687b      	ldr	r3, [r7, #4]
 802c9ea:	220b      	movs	r2, #11
 802c9ec:	761a      	strb	r2, [r3, #24]
      break;
 802c9ee:	e0fb      	b.n	802cbe8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802c9f0:	687b      	ldr	r3, [r7, #4]
 802c9f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c9f6:	b29a      	uxth	r2, r3
 802c9f8:	687b      	ldr	r3, [r7, #4]
 802c9fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802c9fc:	687b      	ldr	r3, [r7, #4]
 802c9fe:	6899      	ldr	r1, [r3, #8]
 802ca00:	687b      	ldr	r3, [r7, #4]
 802ca02:	899a      	ldrh	r2, [r3, #12]
 802ca04:	687b      	ldr	r3, [r7, #4]
 802ca06:	791b      	ldrb	r3, [r3, #4]
 802ca08:	6878      	ldr	r0, [r7, #4]
 802ca0a:	f000 f93a 	bl	802cc82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802ca0e:	687b      	ldr	r3, [r7, #4]
 802ca10:	2204      	movs	r2, #4
 802ca12:	761a      	strb	r2, [r3, #24]
      break;
 802ca14:	e0f1      	b.n	802cbfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802ca16:	687b      	ldr	r3, [r7, #4]
 802ca18:	791b      	ldrb	r3, [r3, #4]
 802ca1a:	4619      	mov	r1, r3
 802ca1c:	6878      	ldr	r0, [r7, #4]
 802ca1e:	f000 fc83 	bl	802d328 <USBH_LL_GetURBState>
 802ca22:	4603      	mov	r3, r0
 802ca24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802ca26:	7bbb      	ldrb	r3, [r7, #14]
 802ca28:	2b01      	cmp	r3, #1
 802ca2a:	d102      	bne.n	802ca32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802ca2c:	687b      	ldr	r3, [r7, #4]
 802ca2e:	2209      	movs	r2, #9
 802ca30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802ca32:	7bbb      	ldrb	r3, [r7, #14]
 802ca34:	2b05      	cmp	r3, #5
 802ca36:	d102      	bne.n	802ca3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802ca38:	2303      	movs	r3, #3
 802ca3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ca3c:	e0d6      	b.n	802cbec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802ca3e:	7bbb      	ldrb	r3, [r7, #14]
 802ca40:	2b04      	cmp	r3, #4
 802ca42:	f040 80d3 	bne.w	802cbec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802ca46:	687b      	ldr	r3, [r7, #4]
 802ca48:	220b      	movs	r2, #11
 802ca4a:	761a      	strb	r2, [r3, #24]
      break;
 802ca4c:	e0ce      	b.n	802cbec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802ca4e:	687b      	ldr	r3, [r7, #4]
 802ca50:	6899      	ldr	r1, [r3, #8]
 802ca52:	687b      	ldr	r3, [r7, #4]
 802ca54:	899a      	ldrh	r2, [r3, #12]
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	795b      	ldrb	r3, [r3, #5]
 802ca5a:	2001      	movs	r0, #1
 802ca5c:	9000      	str	r0, [sp, #0]
 802ca5e:	6878      	ldr	r0, [r7, #4]
 802ca60:	f000 f8ea 	bl	802cc38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802ca64:	687b      	ldr	r3, [r7, #4]
 802ca66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802ca6a:	b29a      	uxth	r2, r3
 802ca6c:	687b      	ldr	r3, [r7, #4]
 802ca6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802ca70:	687b      	ldr	r3, [r7, #4]
 802ca72:	2206      	movs	r2, #6
 802ca74:	761a      	strb	r2, [r3, #24]
      break;
 802ca76:	e0c0      	b.n	802cbfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802ca78:	687b      	ldr	r3, [r7, #4]
 802ca7a:	795b      	ldrb	r3, [r3, #5]
 802ca7c:	4619      	mov	r1, r3
 802ca7e:	6878      	ldr	r0, [r7, #4]
 802ca80:	f000 fc52 	bl	802d328 <USBH_LL_GetURBState>
 802ca84:	4603      	mov	r3, r0
 802ca86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802ca88:	7bbb      	ldrb	r3, [r7, #14]
 802ca8a:	2b01      	cmp	r3, #1
 802ca8c:	d103      	bne.n	802ca96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802ca8e:	687b      	ldr	r3, [r7, #4]
 802ca90:	2207      	movs	r2, #7
 802ca92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ca94:	e0ac      	b.n	802cbf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802ca96:	7bbb      	ldrb	r3, [r7, #14]
 802ca98:	2b05      	cmp	r3, #5
 802ca9a:	d105      	bne.n	802caa8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802ca9c:	687b      	ldr	r3, [r7, #4]
 802ca9e:	220c      	movs	r2, #12
 802caa0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802caa2:	2303      	movs	r3, #3
 802caa4:	73fb      	strb	r3, [r7, #15]
      break;
 802caa6:	e0a3      	b.n	802cbf0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802caa8:	7bbb      	ldrb	r3, [r7, #14]
 802caaa:	2b02      	cmp	r3, #2
 802caac:	d103      	bne.n	802cab6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802caae:	687b      	ldr	r3, [r7, #4]
 802cab0:	2205      	movs	r2, #5
 802cab2:	761a      	strb	r2, [r3, #24]
      break;
 802cab4:	e09c      	b.n	802cbf0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802cab6:	7bbb      	ldrb	r3, [r7, #14]
 802cab8:	2b04      	cmp	r3, #4
 802caba:	f040 8099 	bne.w	802cbf0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802cabe:	687b      	ldr	r3, [r7, #4]
 802cac0:	220b      	movs	r2, #11
 802cac2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802cac4:	2302      	movs	r3, #2
 802cac6:	73fb      	strb	r3, [r7, #15]
      break;
 802cac8:	e092      	b.n	802cbf0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	791b      	ldrb	r3, [r3, #4]
 802cace:	2200      	movs	r2, #0
 802cad0:	2100      	movs	r1, #0
 802cad2:	6878      	ldr	r0, [r7, #4]
 802cad4:	f000 f8d5 	bl	802cc82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cad8:	687b      	ldr	r3, [r7, #4]
 802cada:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cade:	b29a      	uxth	r2, r3
 802cae0:	687b      	ldr	r3, [r7, #4]
 802cae2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802cae4:	687b      	ldr	r3, [r7, #4]
 802cae6:	2208      	movs	r2, #8
 802cae8:	761a      	strb	r2, [r3, #24]

      break;
 802caea:	e086      	b.n	802cbfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802caec:	687b      	ldr	r3, [r7, #4]
 802caee:	791b      	ldrb	r3, [r3, #4]
 802caf0:	4619      	mov	r1, r3
 802caf2:	6878      	ldr	r0, [r7, #4]
 802caf4:	f000 fc18 	bl	802d328 <USBH_LL_GetURBState>
 802caf8:	4603      	mov	r3, r0
 802cafa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cafc:	7bbb      	ldrb	r3, [r7, #14]
 802cafe:	2b01      	cmp	r3, #1
 802cb00:	d105      	bne.n	802cb0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	220d      	movs	r2, #13
 802cb06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802cb08:	2300      	movs	r3, #0
 802cb0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cb0c:	e072      	b.n	802cbf4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802cb0e:	7bbb      	ldrb	r3, [r7, #14]
 802cb10:	2b04      	cmp	r3, #4
 802cb12:	d103      	bne.n	802cb1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802cb14:	687b      	ldr	r3, [r7, #4]
 802cb16:	220b      	movs	r2, #11
 802cb18:	761a      	strb	r2, [r3, #24]
      break;
 802cb1a:	e06b      	b.n	802cbf4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802cb1c:	7bbb      	ldrb	r3, [r7, #14]
 802cb1e:	2b05      	cmp	r3, #5
 802cb20:	d168      	bne.n	802cbf4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802cb22:	2303      	movs	r3, #3
 802cb24:	73fb      	strb	r3, [r7, #15]
      break;
 802cb26:	e065      	b.n	802cbf4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802cb28:	687b      	ldr	r3, [r7, #4]
 802cb2a:	795b      	ldrb	r3, [r3, #5]
 802cb2c:	2201      	movs	r2, #1
 802cb2e:	9200      	str	r2, [sp, #0]
 802cb30:	2200      	movs	r2, #0
 802cb32:	2100      	movs	r1, #0
 802cb34:	6878      	ldr	r0, [r7, #4]
 802cb36:	f000 f87f 	bl	802cc38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cb3a:	687b      	ldr	r3, [r7, #4]
 802cb3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cb40:	b29a      	uxth	r2, r3
 802cb42:	687b      	ldr	r3, [r7, #4]
 802cb44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802cb46:	687b      	ldr	r3, [r7, #4]
 802cb48:	220a      	movs	r2, #10
 802cb4a:	761a      	strb	r2, [r3, #24]
      break;
 802cb4c:	e055      	b.n	802cbfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cb4e:	687b      	ldr	r3, [r7, #4]
 802cb50:	795b      	ldrb	r3, [r3, #5]
 802cb52:	4619      	mov	r1, r3
 802cb54:	6878      	ldr	r0, [r7, #4]
 802cb56:	f000 fbe7 	bl	802d328 <USBH_LL_GetURBState>
 802cb5a:	4603      	mov	r3, r0
 802cb5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802cb5e:	7bbb      	ldrb	r3, [r7, #14]
 802cb60:	2b01      	cmp	r3, #1
 802cb62:	d105      	bne.n	802cb70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802cb64:	2300      	movs	r3, #0
 802cb66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802cb68:	687b      	ldr	r3, [r7, #4]
 802cb6a:	220d      	movs	r2, #13
 802cb6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cb6e:	e043      	b.n	802cbf8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cb70:	7bbb      	ldrb	r3, [r7, #14]
 802cb72:	2b02      	cmp	r3, #2
 802cb74:	d103      	bne.n	802cb7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802cb76:	687b      	ldr	r3, [r7, #4]
 802cb78:	2209      	movs	r2, #9
 802cb7a:	761a      	strb	r2, [r3, #24]
      break;
 802cb7c:	e03c      	b.n	802cbf8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802cb7e:	7bbb      	ldrb	r3, [r7, #14]
 802cb80:	2b04      	cmp	r3, #4
 802cb82:	d139      	bne.n	802cbf8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802cb84:	687b      	ldr	r3, [r7, #4]
 802cb86:	220b      	movs	r2, #11
 802cb88:	761a      	strb	r2, [r3, #24]
      break;
 802cb8a:	e035      	b.n	802cbf8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802cb8c:	687b      	ldr	r3, [r7, #4]
 802cb8e:	7e5b      	ldrb	r3, [r3, #25]
 802cb90:	3301      	adds	r3, #1
 802cb92:	b2da      	uxtb	r2, r3
 802cb94:	687b      	ldr	r3, [r7, #4]
 802cb96:	765a      	strb	r2, [r3, #25]
 802cb98:	687b      	ldr	r3, [r7, #4]
 802cb9a:	7e5b      	ldrb	r3, [r3, #25]
 802cb9c:	2b02      	cmp	r3, #2
 802cb9e:	d806      	bhi.n	802cbae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802cba0:	687b      	ldr	r3, [r7, #4]
 802cba2:	2201      	movs	r2, #1
 802cba4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802cba6:	687b      	ldr	r3, [r7, #4]
 802cba8:	2201      	movs	r2, #1
 802cbaa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802cbac:	e025      	b.n	802cbfa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802cbb4:	2106      	movs	r1, #6
 802cbb6:	6878      	ldr	r0, [r7, #4]
 802cbb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802cbba:	687b      	ldr	r3, [r7, #4]
 802cbbc:	2200      	movs	r2, #0
 802cbbe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cbc0:	687b      	ldr	r3, [r7, #4]
 802cbc2:	795b      	ldrb	r3, [r3, #5]
 802cbc4:	4619      	mov	r1, r3
 802cbc6:	6878      	ldr	r0, [r7, #4]
 802cbc8:	f000 f90c 	bl	802cde4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cbcc:	687b      	ldr	r3, [r7, #4]
 802cbce:	791b      	ldrb	r3, [r3, #4]
 802cbd0:	4619      	mov	r1, r3
 802cbd2:	6878      	ldr	r0, [r7, #4]
 802cbd4:	f000 f906 	bl	802cde4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802cbd8:	687b      	ldr	r3, [r7, #4]
 802cbda:	2200      	movs	r2, #0
 802cbdc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802cbde:	2302      	movs	r3, #2
 802cbe0:	73fb      	strb	r3, [r7, #15]
      break;
 802cbe2:	e00a      	b.n	802cbfa <USBH_HandleControl+0x2de>

    default:
      break;
 802cbe4:	bf00      	nop
 802cbe6:	e008      	b.n	802cbfa <USBH_HandleControl+0x2de>
      break;
 802cbe8:	bf00      	nop
 802cbea:	e006      	b.n	802cbfa <USBH_HandleControl+0x2de>
      break;
 802cbec:	bf00      	nop
 802cbee:	e004      	b.n	802cbfa <USBH_HandleControl+0x2de>
      break;
 802cbf0:	bf00      	nop
 802cbf2:	e002      	b.n	802cbfa <USBH_HandleControl+0x2de>
      break;
 802cbf4:	bf00      	nop
 802cbf6:	e000      	b.n	802cbfa <USBH_HandleControl+0x2de>
      break;
 802cbf8:	bf00      	nop
  }

  return status;
 802cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 802cbfc:	4618      	mov	r0, r3
 802cbfe:	3710      	adds	r7, #16
 802cc00:	46bd      	mov	sp, r7
 802cc02:	bd80      	pop	{r7, pc}

0802cc04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802cc04:	b580      	push	{r7, lr}
 802cc06:	b088      	sub	sp, #32
 802cc08:	af04      	add	r7, sp, #16
 802cc0a:	60f8      	str	r0, [r7, #12]
 802cc0c:	60b9      	str	r1, [r7, #8]
 802cc0e:	4613      	mov	r3, r2
 802cc10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cc12:	79f9      	ldrb	r1, [r7, #7]
 802cc14:	2300      	movs	r3, #0
 802cc16:	9303      	str	r3, [sp, #12]
 802cc18:	2308      	movs	r3, #8
 802cc1a:	9302      	str	r3, [sp, #8]
 802cc1c:	68bb      	ldr	r3, [r7, #8]
 802cc1e:	9301      	str	r3, [sp, #4]
 802cc20:	2300      	movs	r3, #0
 802cc22:	9300      	str	r3, [sp, #0]
 802cc24:	2300      	movs	r3, #0
 802cc26:	2200      	movs	r2, #0
 802cc28:	68f8      	ldr	r0, [r7, #12]
 802cc2a:	f000 fb4c 	bl	802d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802cc2e:	2300      	movs	r3, #0
}
 802cc30:	4618      	mov	r0, r3
 802cc32:	3710      	adds	r7, #16
 802cc34:	46bd      	mov	sp, r7
 802cc36:	bd80      	pop	{r7, pc}

0802cc38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802cc38:	b580      	push	{r7, lr}
 802cc3a:	b088      	sub	sp, #32
 802cc3c:	af04      	add	r7, sp, #16
 802cc3e:	60f8      	str	r0, [r7, #12]
 802cc40:	60b9      	str	r1, [r7, #8]
 802cc42:	4611      	mov	r1, r2
 802cc44:	461a      	mov	r2, r3
 802cc46:	460b      	mov	r3, r1
 802cc48:	80fb      	strh	r3, [r7, #6]
 802cc4a:	4613      	mov	r3, r2
 802cc4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802cc4e:	68fb      	ldr	r3, [r7, #12]
 802cc50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cc54:	2b00      	cmp	r3, #0
 802cc56:	d001      	beq.n	802cc5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802cc58:	2300      	movs	r3, #0
 802cc5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cc5c:	7979      	ldrb	r1, [r7, #5]
 802cc5e:	7e3b      	ldrb	r3, [r7, #24]
 802cc60:	9303      	str	r3, [sp, #12]
 802cc62:	88fb      	ldrh	r3, [r7, #6]
 802cc64:	9302      	str	r3, [sp, #8]
 802cc66:	68bb      	ldr	r3, [r7, #8]
 802cc68:	9301      	str	r3, [sp, #4]
 802cc6a:	2301      	movs	r3, #1
 802cc6c:	9300      	str	r3, [sp, #0]
 802cc6e:	2300      	movs	r3, #0
 802cc70:	2200      	movs	r2, #0
 802cc72:	68f8      	ldr	r0, [r7, #12]
 802cc74:	f000 fb27 	bl	802d2c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802cc78:	2300      	movs	r3, #0
}
 802cc7a:	4618      	mov	r0, r3
 802cc7c:	3710      	adds	r7, #16
 802cc7e:	46bd      	mov	sp, r7
 802cc80:	bd80      	pop	{r7, pc}

0802cc82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802cc82:	b580      	push	{r7, lr}
 802cc84:	b088      	sub	sp, #32
 802cc86:	af04      	add	r7, sp, #16
 802cc88:	60f8      	str	r0, [r7, #12]
 802cc8a:	60b9      	str	r1, [r7, #8]
 802cc8c:	4611      	mov	r1, r2
 802cc8e:	461a      	mov	r2, r3
 802cc90:	460b      	mov	r3, r1
 802cc92:	80fb      	strh	r3, [r7, #6]
 802cc94:	4613      	mov	r3, r2
 802cc96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cc98:	7979      	ldrb	r1, [r7, #5]
 802cc9a:	2300      	movs	r3, #0
 802cc9c:	9303      	str	r3, [sp, #12]
 802cc9e:	88fb      	ldrh	r3, [r7, #6]
 802cca0:	9302      	str	r3, [sp, #8]
 802cca2:	68bb      	ldr	r3, [r7, #8]
 802cca4:	9301      	str	r3, [sp, #4]
 802cca6:	2301      	movs	r3, #1
 802cca8:	9300      	str	r3, [sp, #0]
 802ccaa:	2300      	movs	r3, #0
 802ccac:	2201      	movs	r2, #1
 802ccae:	68f8      	ldr	r0, [r7, #12]
 802ccb0:	f000 fb09 	bl	802d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802ccb4:	2300      	movs	r3, #0

}
 802ccb6:	4618      	mov	r0, r3
 802ccb8:	3710      	adds	r7, #16
 802ccba:	46bd      	mov	sp, r7
 802ccbc:	bd80      	pop	{r7, pc}

0802ccbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802ccbe:	b580      	push	{r7, lr}
 802ccc0:	b088      	sub	sp, #32
 802ccc2:	af04      	add	r7, sp, #16
 802ccc4:	60f8      	str	r0, [r7, #12]
 802ccc6:	60b9      	str	r1, [r7, #8]
 802ccc8:	4611      	mov	r1, r2
 802ccca:	461a      	mov	r2, r3
 802cccc:	460b      	mov	r3, r1
 802ccce:	80fb      	strh	r3, [r7, #6]
 802ccd0:	4613      	mov	r3, r2
 802ccd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ccd4:	68fb      	ldr	r3, [r7, #12]
 802ccd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ccda:	2b00      	cmp	r3, #0
 802ccdc:	d001      	beq.n	802cce2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802ccde:	2300      	movs	r3, #0
 802cce0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cce2:	7979      	ldrb	r1, [r7, #5]
 802cce4:	7e3b      	ldrb	r3, [r7, #24]
 802cce6:	9303      	str	r3, [sp, #12]
 802cce8:	88fb      	ldrh	r3, [r7, #6]
 802ccea:	9302      	str	r3, [sp, #8]
 802ccec:	68bb      	ldr	r3, [r7, #8]
 802ccee:	9301      	str	r3, [sp, #4]
 802ccf0:	2301      	movs	r3, #1
 802ccf2:	9300      	str	r3, [sp, #0]
 802ccf4:	2302      	movs	r3, #2
 802ccf6:	2200      	movs	r2, #0
 802ccf8:	68f8      	ldr	r0, [r7, #12]
 802ccfa:	f000 fae4 	bl	802d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802ccfe:	2300      	movs	r3, #0
}
 802cd00:	4618      	mov	r0, r3
 802cd02:	3710      	adds	r7, #16
 802cd04:	46bd      	mov	sp, r7
 802cd06:	bd80      	pop	{r7, pc}

0802cd08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802cd08:	b580      	push	{r7, lr}
 802cd0a:	b088      	sub	sp, #32
 802cd0c:	af04      	add	r7, sp, #16
 802cd0e:	60f8      	str	r0, [r7, #12]
 802cd10:	60b9      	str	r1, [r7, #8]
 802cd12:	4611      	mov	r1, r2
 802cd14:	461a      	mov	r2, r3
 802cd16:	460b      	mov	r3, r1
 802cd18:	80fb      	strh	r3, [r7, #6]
 802cd1a:	4613      	mov	r3, r2
 802cd1c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cd1e:	7979      	ldrb	r1, [r7, #5]
 802cd20:	2300      	movs	r3, #0
 802cd22:	9303      	str	r3, [sp, #12]
 802cd24:	88fb      	ldrh	r3, [r7, #6]
 802cd26:	9302      	str	r3, [sp, #8]
 802cd28:	68bb      	ldr	r3, [r7, #8]
 802cd2a:	9301      	str	r3, [sp, #4]
 802cd2c:	2301      	movs	r3, #1
 802cd2e:	9300      	str	r3, [sp, #0]
 802cd30:	2302      	movs	r3, #2
 802cd32:	2201      	movs	r2, #1
 802cd34:	68f8      	ldr	r0, [r7, #12]
 802cd36:	f000 fac6 	bl	802d2c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cd3a:	2300      	movs	r3, #0
}
 802cd3c:	4618      	mov	r0, r3
 802cd3e:	3710      	adds	r7, #16
 802cd40:	46bd      	mov	sp, r7
 802cd42:	bd80      	pop	{r7, pc}

0802cd44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802cd44:	b580      	push	{r7, lr}
 802cd46:	b086      	sub	sp, #24
 802cd48:	af04      	add	r7, sp, #16
 802cd4a:	6078      	str	r0, [r7, #4]
 802cd4c:	4608      	mov	r0, r1
 802cd4e:	4611      	mov	r1, r2
 802cd50:	461a      	mov	r2, r3
 802cd52:	4603      	mov	r3, r0
 802cd54:	70fb      	strb	r3, [r7, #3]
 802cd56:	460b      	mov	r3, r1
 802cd58:	70bb      	strb	r3, [r7, #2]
 802cd5a:	4613      	mov	r3, r2
 802cd5c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802cd5e:	7878      	ldrb	r0, [r7, #1]
 802cd60:	78ba      	ldrb	r2, [r7, #2]
 802cd62:	78f9      	ldrb	r1, [r7, #3]
 802cd64:	8b3b      	ldrh	r3, [r7, #24]
 802cd66:	9302      	str	r3, [sp, #8]
 802cd68:	7d3b      	ldrb	r3, [r7, #20]
 802cd6a:	9301      	str	r3, [sp, #4]
 802cd6c:	7c3b      	ldrb	r3, [r7, #16]
 802cd6e:	9300      	str	r3, [sp, #0]
 802cd70:	4603      	mov	r3, r0
 802cd72:	6878      	ldr	r0, [r7, #4]
 802cd74:	f000 fa59 	bl	802d22a <USBH_LL_OpenPipe>

  return USBH_OK;
 802cd78:	2300      	movs	r3, #0
}
 802cd7a:	4618      	mov	r0, r3
 802cd7c:	3708      	adds	r7, #8
 802cd7e:	46bd      	mov	sp, r7
 802cd80:	bd80      	pop	{r7, pc}

0802cd82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802cd82:	b580      	push	{r7, lr}
 802cd84:	b082      	sub	sp, #8
 802cd86:	af00      	add	r7, sp, #0
 802cd88:	6078      	str	r0, [r7, #4]
 802cd8a:	460b      	mov	r3, r1
 802cd8c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802cd8e:	78fb      	ldrb	r3, [r7, #3]
 802cd90:	4619      	mov	r1, r3
 802cd92:	6878      	ldr	r0, [r7, #4]
 802cd94:	f000 fa78 	bl	802d288 <USBH_LL_ClosePipe>

  return USBH_OK;
 802cd98:	2300      	movs	r3, #0
}
 802cd9a:	4618      	mov	r0, r3
 802cd9c:	3708      	adds	r7, #8
 802cd9e:	46bd      	mov	sp, r7
 802cda0:	bd80      	pop	{r7, pc}

0802cda2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802cda2:	b580      	push	{r7, lr}
 802cda4:	b084      	sub	sp, #16
 802cda6:	af00      	add	r7, sp, #0
 802cda8:	6078      	str	r0, [r7, #4]
 802cdaa:	460b      	mov	r3, r1
 802cdac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802cdae:	6878      	ldr	r0, [r7, #4]
 802cdb0:	f000 f836 	bl	802ce20 <USBH_GetFreePipe>
 802cdb4:	4603      	mov	r3, r0
 802cdb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802cdb8:	89fb      	ldrh	r3, [r7, #14]
 802cdba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802cdbe:	4293      	cmp	r3, r2
 802cdc0:	d00a      	beq.n	802cdd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802cdc2:	78fa      	ldrb	r2, [r7, #3]
 802cdc4:	89fb      	ldrh	r3, [r7, #14]
 802cdc6:	f003 030f 	and.w	r3, r3, #15
 802cdca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802cdce:	6879      	ldr	r1, [r7, #4]
 802cdd0:	33e0      	adds	r3, #224	; 0xe0
 802cdd2:	009b      	lsls	r3, r3, #2
 802cdd4:	440b      	add	r3, r1
 802cdd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802cdd8:	89fb      	ldrh	r3, [r7, #14]
 802cdda:	b2db      	uxtb	r3, r3
}
 802cddc:	4618      	mov	r0, r3
 802cdde:	3710      	adds	r7, #16
 802cde0:	46bd      	mov	sp, r7
 802cde2:	bd80      	pop	{r7, pc}

0802cde4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802cde4:	b480      	push	{r7}
 802cde6:	b083      	sub	sp, #12
 802cde8:	af00      	add	r7, sp, #0
 802cdea:	6078      	str	r0, [r7, #4]
 802cdec:	460b      	mov	r3, r1
 802cdee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802cdf0:	78fb      	ldrb	r3, [r7, #3]
 802cdf2:	2b0f      	cmp	r3, #15
 802cdf4:	d80d      	bhi.n	802ce12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802cdf6:	78fb      	ldrb	r3, [r7, #3]
 802cdf8:	687a      	ldr	r2, [r7, #4]
 802cdfa:	33e0      	adds	r3, #224	; 0xe0
 802cdfc:	009b      	lsls	r3, r3, #2
 802cdfe:	4413      	add	r3, r2
 802ce00:	685a      	ldr	r2, [r3, #4]
 802ce02:	78fb      	ldrb	r3, [r7, #3]
 802ce04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802ce08:	6879      	ldr	r1, [r7, #4]
 802ce0a:	33e0      	adds	r3, #224	; 0xe0
 802ce0c:	009b      	lsls	r3, r3, #2
 802ce0e:	440b      	add	r3, r1
 802ce10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802ce12:	2300      	movs	r3, #0
}
 802ce14:	4618      	mov	r0, r3
 802ce16:	370c      	adds	r7, #12
 802ce18:	46bd      	mov	sp, r7
 802ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce1e:	4770      	bx	lr

0802ce20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802ce20:	b480      	push	{r7}
 802ce22:	b085      	sub	sp, #20
 802ce24:	af00      	add	r7, sp, #0
 802ce26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802ce28:	2300      	movs	r3, #0
 802ce2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802ce2c:	2300      	movs	r3, #0
 802ce2e:	73fb      	strb	r3, [r7, #15]
 802ce30:	e00f      	b.n	802ce52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802ce32:	7bfb      	ldrb	r3, [r7, #15]
 802ce34:	687a      	ldr	r2, [r7, #4]
 802ce36:	33e0      	adds	r3, #224	; 0xe0
 802ce38:	009b      	lsls	r3, r3, #2
 802ce3a:	4413      	add	r3, r2
 802ce3c:	685b      	ldr	r3, [r3, #4]
 802ce3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802ce42:	2b00      	cmp	r3, #0
 802ce44:	d102      	bne.n	802ce4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802ce46:	7bfb      	ldrb	r3, [r7, #15]
 802ce48:	b29b      	uxth	r3, r3
 802ce4a:	e007      	b.n	802ce5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802ce4c:	7bfb      	ldrb	r3, [r7, #15]
 802ce4e:	3301      	adds	r3, #1
 802ce50:	73fb      	strb	r3, [r7, #15]
 802ce52:	7bfb      	ldrb	r3, [r7, #15]
 802ce54:	2b0f      	cmp	r3, #15
 802ce56:	d9ec      	bls.n	802ce32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802ce58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802ce5c:	4618      	mov	r0, r3
 802ce5e:	3714      	adds	r7, #20
 802ce60:	46bd      	mov	sp, r7
 802ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ce66:	4770      	bx	lr

0802ce68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802ce68:	b580      	push	{r7, lr}
 802ce6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802ce6c:	2200      	movs	r2, #0
 802ce6e:	490e      	ldr	r1, [pc, #56]	; (802cea8 <MX_USB_HOST_Init+0x40>)
 802ce70:	480e      	ldr	r0, [pc, #56]	; (802ceac <MX_USB_HOST_Init+0x44>)
 802ce72:	f7fe fba7 	bl	802b5c4 <USBH_Init>
 802ce76:	4603      	mov	r3, r0
 802ce78:	2b00      	cmp	r3, #0
 802ce7a:	d001      	beq.n	802ce80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802ce7c:	f7f4 f800 	bl	8020e80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802ce80:	490b      	ldr	r1, [pc, #44]	; (802ceb0 <MX_USB_HOST_Init+0x48>)
 802ce82:	480a      	ldr	r0, [pc, #40]	; (802ceac <MX_USB_HOST_Init+0x44>)
 802ce84:	f7fe fc2c 	bl	802b6e0 <USBH_RegisterClass>
 802ce88:	4603      	mov	r3, r0
 802ce8a:	2b00      	cmp	r3, #0
 802ce8c:	d001      	beq.n	802ce92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802ce8e:	f7f3 fff7 	bl	8020e80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802ce92:	4806      	ldr	r0, [pc, #24]	; (802ceac <MX_USB_HOST_Init+0x44>)
 802ce94:	f7fe fcb0 	bl	802b7f8 <USBH_Start>
 802ce98:	4603      	mov	r3, r0
 802ce9a:	2b00      	cmp	r3, #0
 802ce9c:	d001      	beq.n	802cea2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802ce9e:	f7f3 ffef 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802cea2:	bf00      	nop
 802cea4:	bd80      	pop	{r7, pc}
 802cea6:	bf00      	nop
 802cea8:	0802cec9 	.word	0x0802cec9
 802ceac:	20000ac0 	.word	0x20000ac0
 802ceb0:	2000005c 	.word	0x2000005c

0802ceb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802ceb4:	b580      	push	{r7, lr}
 802ceb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802ceb8:	4802      	ldr	r0, [pc, #8]	; (802cec4 <MX_USB_HOST_Process+0x10>)
 802ceba:	f7fe fcad 	bl	802b818 <USBH_Process>
}
 802cebe:	bf00      	nop
 802cec0:	bd80      	pop	{r7, pc}
 802cec2:	bf00      	nop
 802cec4:	20000ac0 	.word	0x20000ac0

0802cec8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802cec8:	b480      	push	{r7}
 802ceca:	b083      	sub	sp, #12
 802cecc:	af00      	add	r7, sp, #0
 802cece:	6078      	str	r0, [r7, #4]
 802ced0:	460b      	mov	r3, r1
 802ced2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802ced4:	78fb      	ldrb	r3, [r7, #3]
 802ced6:	3b01      	subs	r3, #1
 802ced8:	2b04      	cmp	r3, #4
 802ceda:	d819      	bhi.n	802cf10 <USBH_UserProcess+0x48>
 802cedc:	a201      	add	r2, pc, #4	; (adr r2, 802cee4 <USBH_UserProcess+0x1c>)
 802cede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cee2:	bf00      	nop
 802cee4:	0802cf11 	.word	0x0802cf11
 802cee8:	0802cf01 	.word	0x0802cf01
 802ceec:	0802cf11 	.word	0x0802cf11
 802cef0:	0802cf09 	.word	0x0802cf09
 802cef4:	0802cef9 	.word	0x0802cef9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802cef8:	4b09      	ldr	r3, [pc, #36]	; (802cf20 <USBH_UserProcess+0x58>)
 802cefa:	2203      	movs	r2, #3
 802cefc:	701a      	strb	r2, [r3, #0]
  break;
 802cefe:	e008      	b.n	802cf12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802cf00:	4b07      	ldr	r3, [pc, #28]	; (802cf20 <USBH_UserProcess+0x58>)
 802cf02:	2202      	movs	r2, #2
 802cf04:	701a      	strb	r2, [r3, #0]
  break;
 802cf06:	e004      	b.n	802cf12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802cf08:	4b05      	ldr	r3, [pc, #20]	; (802cf20 <USBH_UserProcess+0x58>)
 802cf0a:	2201      	movs	r2, #1
 802cf0c:	701a      	strb	r2, [r3, #0]
  break;
 802cf0e:	e000      	b.n	802cf12 <USBH_UserProcess+0x4a>

  default:
  break;
 802cf10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802cf12:	bf00      	nop
 802cf14:	370c      	adds	r7, #12
 802cf16:	46bd      	mov	sp, r7
 802cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf1c:	4770      	bx	lr
 802cf1e:	bf00      	nop
 802cf20:	20000e98 	.word	0x20000e98

0802cf24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802cf24:	b580      	push	{r7, lr}
 802cf26:	b08a      	sub	sp, #40	; 0x28
 802cf28:	af00      	add	r7, sp, #0
 802cf2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802cf2c:	f107 0314 	add.w	r3, r7, #20
 802cf30:	2200      	movs	r2, #0
 802cf32:	601a      	str	r2, [r3, #0]
 802cf34:	605a      	str	r2, [r3, #4]
 802cf36:	609a      	str	r2, [r3, #8]
 802cf38:	60da      	str	r2, [r3, #12]
 802cf3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802cf3c:	687b      	ldr	r3, [r7, #4]
 802cf3e:	681b      	ldr	r3, [r3, #0]
 802cf40:	4a24      	ldr	r2, [pc, #144]	; (802cfd4 <HAL_HCD_MspInit+0xb0>)
 802cf42:	4293      	cmp	r3, r2
 802cf44:	d141      	bne.n	802cfca <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802cf46:	2300      	movs	r3, #0
 802cf48:	613b      	str	r3, [r7, #16]
 802cf4a:	4b23      	ldr	r3, [pc, #140]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cf4e:	4a22      	ldr	r2, [pc, #136]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cf50:	f043 0302 	orr.w	r3, r3, #2
 802cf54:	6313      	str	r3, [r2, #48]	; 0x30
 802cf56:	4b20      	ldr	r3, [pc, #128]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cf5a:	f003 0302 	and.w	r3, r3, #2
 802cf5e:	613b      	str	r3, [r7, #16]
 802cf60:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802cf62:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802cf66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802cf68:	2302      	movs	r3, #2
 802cf6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802cf6c:	2300      	movs	r3, #0
 802cf6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802cf70:	2300      	movs	r3, #0
 802cf72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802cf74:	230c      	movs	r3, #12
 802cf76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802cf78:	f107 0314 	add.w	r3, r7, #20
 802cf7c:	4619      	mov	r1, r3
 802cf7e:	4817      	ldr	r0, [pc, #92]	; (802cfdc <HAL_HCD_MspInit+0xb8>)
 802cf80:	f7f6 ffcc 	bl	8023f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802cf84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802cf88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802cf8a:	2300      	movs	r3, #0
 802cf8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802cf8e:	2300      	movs	r3, #0
 802cf90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802cf92:	f107 0314 	add.w	r3, r7, #20
 802cf96:	4619      	mov	r1, r3
 802cf98:	4810      	ldr	r0, [pc, #64]	; (802cfdc <HAL_HCD_MspInit+0xb8>)
 802cf9a:	f7f6 ffbf 	bl	8023f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802cf9e:	2300      	movs	r3, #0
 802cfa0:	60fb      	str	r3, [r7, #12]
 802cfa2:	4b0d      	ldr	r3, [pc, #52]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cfa6:	4a0c      	ldr	r2, [pc, #48]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cfa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802cfac:	6313      	str	r3, [r2, #48]	; 0x30
 802cfae:	4b0a      	ldr	r3, [pc, #40]	; (802cfd8 <HAL_HCD_MspInit+0xb4>)
 802cfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802cfb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802cfb6:	60fb      	str	r3, [r7, #12]
 802cfb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802cfba:	2200      	movs	r2, #0
 802cfbc:	2100      	movs	r1, #0
 802cfbe:	204d      	movs	r0, #77	; 0x4d
 802cfc0:	f7f6 f97a 	bl	80232b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802cfc4:	204d      	movs	r0, #77	; 0x4d
 802cfc6:	f7f6 f993 	bl	80232f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802cfca:	bf00      	nop
 802cfcc:	3728      	adds	r7, #40	; 0x28
 802cfce:	46bd      	mov	sp, r7
 802cfd0:	bd80      	pop	{r7, pc}
 802cfd2:	bf00      	nop
 802cfd4:	40040000 	.word	0x40040000
 802cfd8:	40023800 	.word	0x40023800
 802cfdc:	40020400 	.word	0x40020400

0802cfe0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802cfe0:	b580      	push	{r7, lr}
 802cfe2:	b082      	sub	sp, #8
 802cfe4:	af00      	add	r7, sp, #0
 802cfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802cfe8:	687b      	ldr	r3, [r7, #4]
 802cfea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802cfee:	4618      	mov	r0, r3
 802cff0:	f7fe fff1 	bl	802bfd6 <USBH_LL_IncTimer>
}
 802cff4:	bf00      	nop
 802cff6:	3708      	adds	r7, #8
 802cff8:	46bd      	mov	sp, r7
 802cffa:	bd80      	pop	{r7, pc}

0802cffc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802cffc:	b580      	push	{r7, lr}
 802cffe:	b082      	sub	sp, #8
 802d000:	af00      	add	r7, sp, #0
 802d002:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802d004:	687b      	ldr	r3, [r7, #4]
 802d006:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d00a:	4618      	mov	r0, r3
 802d00c:	f7ff f829 	bl	802c062 <USBH_LL_Connect>
}
 802d010:	bf00      	nop
 802d012:	3708      	adds	r7, #8
 802d014:	46bd      	mov	sp, r7
 802d016:	bd80      	pop	{r7, pc}

0802d018 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d018:	b580      	push	{r7, lr}
 802d01a:	b082      	sub	sp, #8
 802d01c:	af00      	add	r7, sp, #0
 802d01e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802d020:	687b      	ldr	r3, [r7, #4]
 802d022:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d026:	4618      	mov	r0, r3
 802d028:	f7ff f832 	bl	802c090 <USBH_LL_Disconnect>
}
 802d02c:	bf00      	nop
 802d02e:	3708      	adds	r7, #8
 802d030:	46bd      	mov	sp, r7
 802d032:	bd80      	pop	{r7, pc}

0802d034 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802d034:	b480      	push	{r7}
 802d036:	b083      	sub	sp, #12
 802d038:	af00      	add	r7, sp, #0
 802d03a:	6078      	str	r0, [r7, #4]
 802d03c:	460b      	mov	r3, r1
 802d03e:	70fb      	strb	r3, [r7, #3]
 802d040:	4613      	mov	r3, r2
 802d042:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802d044:	bf00      	nop
 802d046:	370c      	adds	r7, #12
 802d048:	46bd      	mov	sp, r7
 802d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d04e:	4770      	bx	lr

0802d050 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d050:	b580      	push	{r7, lr}
 802d052:	b082      	sub	sp, #8
 802d054:	af00      	add	r7, sp, #0
 802d056:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802d058:	687b      	ldr	r3, [r7, #4]
 802d05a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d05e:	4618      	mov	r0, r3
 802d060:	f7fe ffe3 	bl	802c02a <USBH_LL_PortEnabled>
}
 802d064:	bf00      	nop
 802d066:	3708      	adds	r7, #8
 802d068:	46bd      	mov	sp, r7
 802d06a:	bd80      	pop	{r7, pc}

0802d06c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d06c:	b580      	push	{r7, lr}
 802d06e:	b082      	sub	sp, #8
 802d070:	af00      	add	r7, sp, #0
 802d072:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802d074:	687b      	ldr	r3, [r7, #4]
 802d076:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d07a:	4618      	mov	r0, r3
 802d07c:	f7fe ffe3 	bl	802c046 <USBH_LL_PortDisabled>
}
 802d080:	bf00      	nop
 802d082:	3708      	adds	r7, #8
 802d084:	46bd      	mov	sp, r7
 802d086:	bd80      	pop	{r7, pc}

0802d088 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802d088:	b580      	push	{r7, lr}
 802d08a:	b082      	sub	sp, #8
 802d08c:	af00      	add	r7, sp, #0
 802d08e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802d090:	687b      	ldr	r3, [r7, #4]
 802d092:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d096:	2b00      	cmp	r3, #0
 802d098:	d132      	bne.n	802d100 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802d09a:	4a1c      	ldr	r2, [pc, #112]	; (802d10c <USBH_LL_Init+0x84>)
 802d09c:	687b      	ldr	r3, [r7, #4]
 802d09e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802d0a2:	687b      	ldr	r3, [r7, #4]
 802d0a4:	4a19      	ldr	r2, [pc, #100]	; (802d10c <USBH_LL_Init+0x84>)
 802d0a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802d0aa:	4b18      	ldr	r3, [pc, #96]	; (802d10c <USBH_LL_Init+0x84>)
 802d0ac:	4a18      	ldr	r2, [pc, #96]	; (802d110 <USBH_LL_Init+0x88>)
 802d0ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802d0b0:	4b16      	ldr	r3, [pc, #88]	; (802d10c <USBH_LL_Init+0x84>)
 802d0b2:	220c      	movs	r2, #12
 802d0b4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802d0b6:	4b15      	ldr	r3, [pc, #84]	; (802d10c <USBH_LL_Init+0x84>)
 802d0b8:	2201      	movs	r2, #1
 802d0ba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802d0bc:	4b13      	ldr	r3, [pc, #76]	; (802d10c <USBH_LL_Init+0x84>)
 802d0be:	2200      	movs	r2, #0
 802d0c0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802d0c2:	4b12      	ldr	r3, [pc, #72]	; (802d10c <USBH_LL_Init+0x84>)
 802d0c4:	2202      	movs	r2, #2
 802d0c6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802d0c8:	4b10      	ldr	r3, [pc, #64]	; (802d10c <USBH_LL_Init+0x84>)
 802d0ca:	2200      	movs	r2, #0
 802d0cc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802d0ce:	4b0f      	ldr	r3, [pc, #60]	; (802d10c <USBH_LL_Init+0x84>)
 802d0d0:	2200      	movs	r2, #0
 802d0d2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802d0d4:	4b0d      	ldr	r3, [pc, #52]	; (802d10c <USBH_LL_Init+0x84>)
 802d0d6:	2200      	movs	r2, #0
 802d0d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802d0da:	4b0c      	ldr	r3, [pc, #48]	; (802d10c <USBH_LL_Init+0x84>)
 802d0dc:	2200      	movs	r2, #0
 802d0de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802d0e0:	480a      	ldr	r0, [pc, #40]	; (802d10c <USBH_LL_Init+0x84>)
 802d0e2:	f7f7 fa05 	bl	80244f0 <HAL_HCD_Init>
 802d0e6:	4603      	mov	r3, r0
 802d0e8:	2b00      	cmp	r3, #0
 802d0ea:	d001      	beq.n	802d0f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802d0ec:	f7f3 fec8 	bl	8020e80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802d0f0:	4806      	ldr	r0, [pc, #24]	; (802d10c <USBH_LL_Init+0x84>)
 802d0f2:	f7f7 fde8 	bl	8024cc6 <HAL_HCD_GetCurrentFrame>
 802d0f6:	4603      	mov	r3, r0
 802d0f8:	4619      	mov	r1, r3
 802d0fa:	6878      	ldr	r0, [r7, #4]
 802d0fc:	f7fe ff5c 	bl	802bfb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802d100:	2300      	movs	r3, #0
}
 802d102:	4618      	mov	r0, r3
 802d104:	3708      	adds	r7, #8
 802d106:	46bd      	mov	sp, r7
 802d108:	bd80      	pop	{r7, pc}
 802d10a:	bf00      	nop
 802d10c:	20000e9c 	.word	0x20000e9c
 802d110:	40040000 	.word	0x40040000

0802d114 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802d114:	b580      	push	{r7, lr}
 802d116:	b084      	sub	sp, #16
 802d118:	af00      	add	r7, sp, #0
 802d11a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d11c:	2300      	movs	r3, #0
 802d11e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d120:	2300      	movs	r3, #0
 802d122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802d124:	687b      	ldr	r3, [r7, #4]
 802d126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d12a:	4618      	mov	r0, r3
 802d12c:	f7f7 fd55 	bl	8024bda <HAL_HCD_Start>
 802d130:	4603      	mov	r3, r0
 802d132:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d134:	7bfb      	ldrb	r3, [r7, #15]
 802d136:	4618      	mov	r0, r3
 802d138:	f000 f95c 	bl	802d3f4 <USBH_Get_USB_Status>
 802d13c:	4603      	mov	r3, r0
 802d13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d140:	7bbb      	ldrb	r3, [r7, #14]
}
 802d142:	4618      	mov	r0, r3
 802d144:	3710      	adds	r7, #16
 802d146:	46bd      	mov	sp, r7
 802d148:	bd80      	pop	{r7, pc}

0802d14a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802d14a:	b580      	push	{r7, lr}
 802d14c:	b084      	sub	sp, #16
 802d14e:	af00      	add	r7, sp, #0
 802d150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d152:	2300      	movs	r3, #0
 802d154:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d156:	2300      	movs	r3, #0
 802d158:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802d15a:	687b      	ldr	r3, [r7, #4]
 802d15c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d160:	4618      	mov	r0, r3
 802d162:	f7f7 fd5d 	bl	8024c20 <HAL_HCD_Stop>
 802d166:	4603      	mov	r3, r0
 802d168:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d16a:	7bfb      	ldrb	r3, [r7, #15]
 802d16c:	4618      	mov	r0, r3
 802d16e:	f000 f941 	bl	802d3f4 <USBH_Get_USB_Status>
 802d172:	4603      	mov	r3, r0
 802d174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d176:	7bbb      	ldrb	r3, [r7, #14]
}
 802d178:	4618      	mov	r0, r3
 802d17a:	3710      	adds	r7, #16
 802d17c:	46bd      	mov	sp, r7
 802d17e:	bd80      	pop	{r7, pc}

0802d180 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802d180:	b580      	push	{r7, lr}
 802d182:	b084      	sub	sp, #16
 802d184:	af00      	add	r7, sp, #0
 802d186:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802d188:	2301      	movs	r3, #1
 802d18a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802d18c:	687b      	ldr	r3, [r7, #4]
 802d18e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d192:	4618      	mov	r0, r3
 802d194:	f7f7 fda5 	bl	8024ce2 <HAL_HCD_GetCurrentSpeed>
 802d198:	4603      	mov	r3, r0
 802d19a:	2b02      	cmp	r3, #2
 802d19c:	d00c      	beq.n	802d1b8 <USBH_LL_GetSpeed+0x38>
 802d19e:	2b02      	cmp	r3, #2
 802d1a0:	d80d      	bhi.n	802d1be <USBH_LL_GetSpeed+0x3e>
 802d1a2:	2b00      	cmp	r3, #0
 802d1a4:	d002      	beq.n	802d1ac <USBH_LL_GetSpeed+0x2c>
 802d1a6:	2b01      	cmp	r3, #1
 802d1a8:	d003      	beq.n	802d1b2 <USBH_LL_GetSpeed+0x32>
 802d1aa:	e008      	b.n	802d1be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802d1ac:	2300      	movs	r3, #0
 802d1ae:	73fb      	strb	r3, [r7, #15]
    break;
 802d1b0:	e008      	b.n	802d1c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802d1b2:	2301      	movs	r3, #1
 802d1b4:	73fb      	strb	r3, [r7, #15]
    break;
 802d1b6:	e005      	b.n	802d1c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802d1b8:	2302      	movs	r3, #2
 802d1ba:	73fb      	strb	r3, [r7, #15]
    break;
 802d1bc:	e002      	b.n	802d1c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802d1be:	2301      	movs	r3, #1
 802d1c0:	73fb      	strb	r3, [r7, #15]
    break;
 802d1c2:	bf00      	nop
  }
  return  speed;
 802d1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 802d1c6:	4618      	mov	r0, r3
 802d1c8:	3710      	adds	r7, #16
 802d1ca:	46bd      	mov	sp, r7
 802d1cc:	bd80      	pop	{r7, pc}

0802d1ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802d1ce:	b580      	push	{r7, lr}
 802d1d0:	b084      	sub	sp, #16
 802d1d2:	af00      	add	r7, sp, #0
 802d1d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d1d6:	2300      	movs	r3, #0
 802d1d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d1da:	2300      	movs	r3, #0
 802d1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802d1de:	687b      	ldr	r3, [r7, #4]
 802d1e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d1e4:	4618      	mov	r0, r3
 802d1e6:	f7f7 fd38 	bl	8024c5a <HAL_HCD_ResetPort>
 802d1ea:	4603      	mov	r3, r0
 802d1ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d1ee:	7bfb      	ldrb	r3, [r7, #15]
 802d1f0:	4618      	mov	r0, r3
 802d1f2:	f000 f8ff 	bl	802d3f4 <USBH_Get_USB_Status>
 802d1f6:	4603      	mov	r3, r0
 802d1f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d1fa:	7bbb      	ldrb	r3, [r7, #14]
}
 802d1fc:	4618      	mov	r0, r3
 802d1fe:	3710      	adds	r7, #16
 802d200:	46bd      	mov	sp, r7
 802d202:	bd80      	pop	{r7, pc}

0802d204 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d204:	b580      	push	{r7, lr}
 802d206:	b082      	sub	sp, #8
 802d208:	af00      	add	r7, sp, #0
 802d20a:	6078      	str	r0, [r7, #4]
 802d20c:	460b      	mov	r3, r1
 802d20e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802d210:	687b      	ldr	r3, [r7, #4]
 802d212:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d216:	78fa      	ldrb	r2, [r7, #3]
 802d218:	4611      	mov	r1, r2
 802d21a:	4618      	mov	r0, r3
 802d21c:	f7f7 fd3f 	bl	8024c9e <HAL_HCD_HC_GetXferCount>
 802d220:	4603      	mov	r3, r0
}
 802d222:	4618      	mov	r0, r3
 802d224:	3708      	adds	r7, #8
 802d226:	46bd      	mov	sp, r7
 802d228:	bd80      	pop	{r7, pc}

0802d22a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d22a:	b590      	push	{r4, r7, lr}
 802d22c:	b089      	sub	sp, #36	; 0x24
 802d22e:	af04      	add	r7, sp, #16
 802d230:	6078      	str	r0, [r7, #4]
 802d232:	4608      	mov	r0, r1
 802d234:	4611      	mov	r1, r2
 802d236:	461a      	mov	r2, r3
 802d238:	4603      	mov	r3, r0
 802d23a:	70fb      	strb	r3, [r7, #3]
 802d23c:	460b      	mov	r3, r1
 802d23e:	70bb      	strb	r3, [r7, #2]
 802d240:	4613      	mov	r3, r2
 802d242:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d244:	2300      	movs	r3, #0
 802d246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d248:	2300      	movs	r3, #0
 802d24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802d24c:	687b      	ldr	r3, [r7, #4]
 802d24e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d252:	787c      	ldrb	r4, [r7, #1]
 802d254:	78ba      	ldrb	r2, [r7, #2]
 802d256:	78f9      	ldrb	r1, [r7, #3]
 802d258:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d25a:	9302      	str	r3, [sp, #8]
 802d25c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d260:	9301      	str	r3, [sp, #4]
 802d262:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d266:	9300      	str	r3, [sp, #0]
 802d268:	4623      	mov	r3, r4
 802d26a:	f7f7 f9a3 	bl	80245b4 <HAL_HCD_HC_Init>
 802d26e:	4603      	mov	r3, r0
 802d270:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802d272:	7bfb      	ldrb	r3, [r7, #15]
 802d274:	4618      	mov	r0, r3
 802d276:	f000 f8bd 	bl	802d3f4 <USBH_Get_USB_Status>
 802d27a:	4603      	mov	r3, r0
 802d27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d27e:	7bbb      	ldrb	r3, [r7, #14]
}
 802d280:	4618      	mov	r0, r3
 802d282:	3714      	adds	r7, #20
 802d284:	46bd      	mov	sp, r7
 802d286:	bd90      	pop	{r4, r7, pc}

0802d288 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d288:	b580      	push	{r7, lr}
 802d28a:	b084      	sub	sp, #16
 802d28c:	af00      	add	r7, sp, #0
 802d28e:	6078      	str	r0, [r7, #4]
 802d290:	460b      	mov	r3, r1
 802d292:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d294:	2300      	movs	r3, #0
 802d296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d298:	2300      	movs	r3, #0
 802d29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802d29c:	687b      	ldr	r3, [r7, #4]
 802d29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d2a2:	78fa      	ldrb	r2, [r7, #3]
 802d2a4:	4611      	mov	r1, r2
 802d2a6:	4618      	mov	r0, r3
 802d2a8:	f7f7 fa13 	bl	80246d2 <HAL_HCD_HC_Halt>
 802d2ac:	4603      	mov	r3, r0
 802d2ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d2b0:	7bfb      	ldrb	r3, [r7, #15]
 802d2b2:	4618      	mov	r0, r3
 802d2b4:	f000 f89e 	bl	802d3f4 <USBH_Get_USB_Status>
 802d2b8:	4603      	mov	r3, r0
 802d2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 802d2be:	4618      	mov	r0, r3
 802d2c0:	3710      	adds	r7, #16
 802d2c2:	46bd      	mov	sp, r7
 802d2c4:	bd80      	pop	{r7, pc}

0802d2c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802d2c6:	b590      	push	{r4, r7, lr}
 802d2c8:	b089      	sub	sp, #36	; 0x24
 802d2ca:	af04      	add	r7, sp, #16
 802d2cc:	6078      	str	r0, [r7, #4]
 802d2ce:	4608      	mov	r0, r1
 802d2d0:	4611      	mov	r1, r2
 802d2d2:	461a      	mov	r2, r3
 802d2d4:	4603      	mov	r3, r0
 802d2d6:	70fb      	strb	r3, [r7, #3]
 802d2d8:	460b      	mov	r3, r1
 802d2da:	70bb      	strb	r3, [r7, #2]
 802d2dc:	4613      	mov	r3, r2
 802d2de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d2e0:	2300      	movs	r3, #0
 802d2e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d2e4:	2300      	movs	r3, #0
 802d2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802d2e8:	687b      	ldr	r3, [r7, #4]
 802d2ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d2ee:	787c      	ldrb	r4, [r7, #1]
 802d2f0:	78ba      	ldrb	r2, [r7, #2]
 802d2f2:	78f9      	ldrb	r1, [r7, #3]
 802d2f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802d2f8:	9303      	str	r3, [sp, #12]
 802d2fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d2fc:	9302      	str	r3, [sp, #8]
 802d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d300:	9301      	str	r3, [sp, #4]
 802d302:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d306:	9300      	str	r3, [sp, #0]
 802d308:	4623      	mov	r3, r4
 802d30a:	f7f7 fa05 	bl	8024718 <HAL_HCD_HC_SubmitRequest>
 802d30e:	4603      	mov	r3, r0
 802d310:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802d312:	7bfb      	ldrb	r3, [r7, #15]
 802d314:	4618      	mov	r0, r3
 802d316:	f000 f86d 	bl	802d3f4 <USBH_Get_USB_Status>
 802d31a:	4603      	mov	r3, r0
 802d31c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d31e:	7bbb      	ldrb	r3, [r7, #14]
}
 802d320:	4618      	mov	r0, r3
 802d322:	3714      	adds	r7, #20
 802d324:	46bd      	mov	sp, r7
 802d326:	bd90      	pop	{r4, r7, pc}

0802d328 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d328:	b580      	push	{r7, lr}
 802d32a:	b082      	sub	sp, #8
 802d32c:	af00      	add	r7, sp, #0
 802d32e:	6078      	str	r0, [r7, #4]
 802d330:	460b      	mov	r3, r1
 802d332:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802d334:	687b      	ldr	r3, [r7, #4]
 802d336:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d33a:	78fa      	ldrb	r2, [r7, #3]
 802d33c:	4611      	mov	r1, r2
 802d33e:	4618      	mov	r0, r3
 802d340:	f7f7 fc99 	bl	8024c76 <HAL_HCD_HC_GetURBState>
 802d344:	4603      	mov	r3, r0
}
 802d346:	4618      	mov	r0, r3
 802d348:	3708      	adds	r7, #8
 802d34a:	46bd      	mov	sp, r7
 802d34c:	bd80      	pop	{r7, pc}

0802d34e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802d34e:	b580      	push	{r7, lr}
 802d350:	b082      	sub	sp, #8
 802d352:	af00      	add	r7, sp, #0
 802d354:	6078      	str	r0, [r7, #4]
 802d356:	460b      	mov	r3, r1
 802d358:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802d35a:	687b      	ldr	r3, [r7, #4]
 802d35c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d360:	2b00      	cmp	r3, #0
 802d362:	d103      	bne.n	802d36c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802d364:	78fb      	ldrb	r3, [r7, #3]
 802d366:	4618      	mov	r0, r3
 802d368:	f000 f870 	bl	802d44c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802d36c:	20c8      	movs	r0, #200	; 0xc8
 802d36e:	f7f5 fec7 	bl	8023100 <HAL_Delay>
  return USBH_OK;
 802d372:	2300      	movs	r3, #0
}
 802d374:	4618      	mov	r0, r3
 802d376:	3708      	adds	r7, #8
 802d378:	46bd      	mov	sp, r7
 802d37a:	bd80      	pop	{r7, pc}

0802d37c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802d37c:	b480      	push	{r7}
 802d37e:	b085      	sub	sp, #20
 802d380:	af00      	add	r7, sp, #0
 802d382:	6078      	str	r0, [r7, #4]
 802d384:	460b      	mov	r3, r1
 802d386:	70fb      	strb	r3, [r7, #3]
 802d388:	4613      	mov	r3, r2
 802d38a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802d38c:	687b      	ldr	r3, [r7, #4]
 802d38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d392:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802d394:	78fb      	ldrb	r3, [r7, #3]
 802d396:	68fa      	ldr	r2, [r7, #12]
 802d398:	212c      	movs	r1, #44	; 0x2c
 802d39a:	fb01 f303 	mul.w	r3, r1, r3
 802d39e:	4413      	add	r3, r2
 802d3a0:	333b      	adds	r3, #59	; 0x3b
 802d3a2:	781b      	ldrb	r3, [r3, #0]
 802d3a4:	2b00      	cmp	r3, #0
 802d3a6:	d009      	beq.n	802d3bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802d3a8:	78fb      	ldrb	r3, [r7, #3]
 802d3aa:	68fa      	ldr	r2, [r7, #12]
 802d3ac:	212c      	movs	r1, #44	; 0x2c
 802d3ae:	fb01 f303 	mul.w	r3, r1, r3
 802d3b2:	4413      	add	r3, r2
 802d3b4:	3354      	adds	r3, #84	; 0x54
 802d3b6:	78ba      	ldrb	r2, [r7, #2]
 802d3b8:	701a      	strb	r2, [r3, #0]
 802d3ba:	e008      	b.n	802d3ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802d3bc:	78fb      	ldrb	r3, [r7, #3]
 802d3be:	68fa      	ldr	r2, [r7, #12]
 802d3c0:	212c      	movs	r1, #44	; 0x2c
 802d3c2:	fb01 f303 	mul.w	r3, r1, r3
 802d3c6:	4413      	add	r3, r2
 802d3c8:	3355      	adds	r3, #85	; 0x55
 802d3ca:	78ba      	ldrb	r2, [r7, #2]
 802d3cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802d3ce:	2300      	movs	r3, #0
}
 802d3d0:	4618      	mov	r0, r3
 802d3d2:	3714      	adds	r7, #20
 802d3d4:	46bd      	mov	sp, r7
 802d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d3da:	4770      	bx	lr

0802d3dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802d3dc:	b580      	push	{r7, lr}
 802d3de:	b082      	sub	sp, #8
 802d3e0:	af00      	add	r7, sp, #0
 802d3e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802d3e4:	6878      	ldr	r0, [r7, #4]
 802d3e6:	f7f5 fe8b 	bl	8023100 <HAL_Delay>
}
 802d3ea:	bf00      	nop
 802d3ec:	3708      	adds	r7, #8
 802d3ee:	46bd      	mov	sp, r7
 802d3f0:	bd80      	pop	{r7, pc}
	...

0802d3f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802d3f4:	b480      	push	{r7}
 802d3f6:	b085      	sub	sp, #20
 802d3f8:	af00      	add	r7, sp, #0
 802d3fa:	4603      	mov	r3, r0
 802d3fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d3fe:	2300      	movs	r3, #0
 802d400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802d402:	79fb      	ldrb	r3, [r7, #7]
 802d404:	2b03      	cmp	r3, #3
 802d406:	d817      	bhi.n	802d438 <USBH_Get_USB_Status+0x44>
 802d408:	a201      	add	r2, pc, #4	; (adr r2, 802d410 <USBH_Get_USB_Status+0x1c>)
 802d40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d40e:	bf00      	nop
 802d410:	0802d421 	.word	0x0802d421
 802d414:	0802d427 	.word	0x0802d427
 802d418:	0802d42d 	.word	0x0802d42d
 802d41c:	0802d433 	.word	0x0802d433
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802d420:	2300      	movs	r3, #0
 802d422:	73fb      	strb	r3, [r7, #15]
    break;
 802d424:	e00b      	b.n	802d43e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802d426:	2302      	movs	r3, #2
 802d428:	73fb      	strb	r3, [r7, #15]
    break;
 802d42a:	e008      	b.n	802d43e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802d42c:	2301      	movs	r3, #1
 802d42e:	73fb      	strb	r3, [r7, #15]
    break;
 802d430:	e005      	b.n	802d43e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802d432:	2302      	movs	r3, #2
 802d434:	73fb      	strb	r3, [r7, #15]
    break;
 802d436:	e002      	b.n	802d43e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802d438:	2302      	movs	r3, #2
 802d43a:	73fb      	strb	r3, [r7, #15]
    break;
 802d43c:	bf00      	nop
  }
  return usb_status;
 802d43e:	7bfb      	ldrb	r3, [r7, #15]
}
 802d440:	4618      	mov	r0, r3
 802d442:	3714      	adds	r7, #20
 802d444:	46bd      	mov	sp, r7
 802d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d44a:	4770      	bx	lr

0802d44c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802d44c:	b580      	push	{r7, lr}
 802d44e:	b084      	sub	sp, #16
 802d450:	af00      	add	r7, sp, #0
 802d452:	4603      	mov	r3, r0
 802d454:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802d456:	79fb      	ldrb	r3, [r7, #7]
 802d458:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802d45a:	79fb      	ldrb	r3, [r7, #7]
 802d45c:	2b00      	cmp	r3, #0
 802d45e:	d102      	bne.n	802d466 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802d460:	2301      	movs	r3, #1
 802d462:	73fb      	strb	r3, [r7, #15]
 802d464:	e001      	b.n	802d46a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802d466:	2300      	movs	r3, #0
 802d468:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802d46a:	7bfb      	ldrb	r3, [r7, #15]
 802d46c:	461a      	mov	r2, r3
 802d46e:	2110      	movs	r1, #16
 802d470:	4803      	ldr	r0, [pc, #12]	; (802d480 <MX_DriverVbusHS+0x34>)
 802d472:	f7f7 f80b 	bl	802448c <HAL_GPIO_WritePin>
}
 802d476:	bf00      	nop
 802d478:	3710      	adds	r7, #16
 802d47a:	46bd      	mov	sp, r7
 802d47c:	bd80      	pop	{r7, pc}
 802d47e:	bf00      	nop
 802d480:	40020800 	.word	0x40020800

0802d484 <__errno>:
 802d484:	4b01      	ldr	r3, [pc, #4]	; (802d48c <__errno+0x8>)
 802d486:	6818      	ldr	r0, [r3, #0]
 802d488:	4770      	bx	lr
 802d48a:	bf00      	nop
 802d48c:	2000007c 	.word	0x2000007c

0802d490 <__libc_init_array>:
 802d490:	b570      	push	{r4, r5, r6, lr}
 802d492:	4d0d      	ldr	r5, [pc, #52]	; (802d4c8 <__libc_init_array+0x38>)
 802d494:	4c0d      	ldr	r4, [pc, #52]	; (802d4cc <__libc_init_array+0x3c>)
 802d496:	1b64      	subs	r4, r4, r5
 802d498:	10a4      	asrs	r4, r4, #2
 802d49a:	2600      	movs	r6, #0
 802d49c:	42a6      	cmp	r6, r4
 802d49e:	d109      	bne.n	802d4b4 <__libc_init_array+0x24>
 802d4a0:	4d0b      	ldr	r5, [pc, #44]	; (802d4d0 <__libc_init_array+0x40>)
 802d4a2:	4c0c      	ldr	r4, [pc, #48]	; (802d4d4 <__libc_init_array+0x44>)
 802d4a4:	f001 fa10 	bl	802e8c8 <_init>
 802d4a8:	1b64      	subs	r4, r4, r5
 802d4aa:	10a4      	asrs	r4, r4, #2
 802d4ac:	2600      	movs	r6, #0
 802d4ae:	42a6      	cmp	r6, r4
 802d4b0:	d105      	bne.n	802d4be <__libc_init_array+0x2e>
 802d4b2:	bd70      	pop	{r4, r5, r6, pc}
 802d4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 802d4b8:	4798      	blx	r3
 802d4ba:	3601      	adds	r6, #1
 802d4bc:	e7ee      	b.n	802d49c <__libc_init_array+0xc>
 802d4be:	f855 3b04 	ldr.w	r3, [r5], #4
 802d4c2:	4798      	blx	r3
 802d4c4:	3601      	adds	r6, #1
 802d4c6:	e7f2      	b.n	802d4ae <__libc_init_array+0x1e>
 802d4c8:	08030d8c 	.word	0x08030d8c
 802d4cc:	08030d8c 	.word	0x08030d8c
 802d4d0:	08030d8c 	.word	0x08030d8c
 802d4d4:	08030d90 	.word	0x08030d90

0802d4d8 <malloc>:
 802d4d8:	4b02      	ldr	r3, [pc, #8]	; (802d4e4 <malloc+0xc>)
 802d4da:	4601      	mov	r1, r0
 802d4dc:	6818      	ldr	r0, [r3, #0]
 802d4de:	f000 b87f 	b.w	802d5e0 <_malloc_r>
 802d4e2:	bf00      	nop
 802d4e4:	2000007c 	.word	0x2000007c

0802d4e8 <free>:
 802d4e8:	4b02      	ldr	r3, [pc, #8]	; (802d4f4 <free+0xc>)
 802d4ea:	4601      	mov	r1, r0
 802d4ec:	6818      	ldr	r0, [r3, #0]
 802d4ee:	f000 b80b 	b.w	802d508 <_free_r>
 802d4f2:	bf00      	nop
 802d4f4:	2000007c 	.word	0x2000007c

0802d4f8 <memset>:
 802d4f8:	4402      	add	r2, r0
 802d4fa:	4603      	mov	r3, r0
 802d4fc:	4293      	cmp	r3, r2
 802d4fe:	d100      	bne.n	802d502 <memset+0xa>
 802d500:	4770      	bx	lr
 802d502:	f803 1b01 	strb.w	r1, [r3], #1
 802d506:	e7f9      	b.n	802d4fc <memset+0x4>

0802d508 <_free_r>:
 802d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d50a:	2900      	cmp	r1, #0
 802d50c:	d044      	beq.n	802d598 <_free_r+0x90>
 802d50e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d512:	9001      	str	r0, [sp, #4]
 802d514:	2b00      	cmp	r3, #0
 802d516:	f1a1 0404 	sub.w	r4, r1, #4
 802d51a:	bfb8      	it	lt
 802d51c:	18e4      	addlt	r4, r4, r3
 802d51e:	f000 fc71 	bl	802de04 <__malloc_lock>
 802d522:	4a1e      	ldr	r2, [pc, #120]	; (802d59c <_free_r+0x94>)
 802d524:	9801      	ldr	r0, [sp, #4]
 802d526:	6813      	ldr	r3, [r2, #0]
 802d528:	b933      	cbnz	r3, 802d538 <_free_r+0x30>
 802d52a:	6063      	str	r3, [r4, #4]
 802d52c:	6014      	str	r4, [r2, #0]
 802d52e:	b003      	add	sp, #12
 802d530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d534:	f000 bc6c 	b.w	802de10 <__malloc_unlock>
 802d538:	42a3      	cmp	r3, r4
 802d53a:	d908      	bls.n	802d54e <_free_r+0x46>
 802d53c:	6825      	ldr	r5, [r4, #0]
 802d53e:	1961      	adds	r1, r4, r5
 802d540:	428b      	cmp	r3, r1
 802d542:	bf01      	itttt	eq
 802d544:	6819      	ldreq	r1, [r3, #0]
 802d546:	685b      	ldreq	r3, [r3, #4]
 802d548:	1949      	addeq	r1, r1, r5
 802d54a:	6021      	streq	r1, [r4, #0]
 802d54c:	e7ed      	b.n	802d52a <_free_r+0x22>
 802d54e:	461a      	mov	r2, r3
 802d550:	685b      	ldr	r3, [r3, #4]
 802d552:	b10b      	cbz	r3, 802d558 <_free_r+0x50>
 802d554:	42a3      	cmp	r3, r4
 802d556:	d9fa      	bls.n	802d54e <_free_r+0x46>
 802d558:	6811      	ldr	r1, [r2, #0]
 802d55a:	1855      	adds	r5, r2, r1
 802d55c:	42a5      	cmp	r5, r4
 802d55e:	d10b      	bne.n	802d578 <_free_r+0x70>
 802d560:	6824      	ldr	r4, [r4, #0]
 802d562:	4421      	add	r1, r4
 802d564:	1854      	adds	r4, r2, r1
 802d566:	42a3      	cmp	r3, r4
 802d568:	6011      	str	r1, [r2, #0]
 802d56a:	d1e0      	bne.n	802d52e <_free_r+0x26>
 802d56c:	681c      	ldr	r4, [r3, #0]
 802d56e:	685b      	ldr	r3, [r3, #4]
 802d570:	6053      	str	r3, [r2, #4]
 802d572:	4421      	add	r1, r4
 802d574:	6011      	str	r1, [r2, #0]
 802d576:	e7da      	b.n	802d52e <_free_r+0x26>
 802d578:	d902      	bls.n	802d580 <_free_r+0x78>
 802d57a:	230c      	movs	r3, #12
 802d57c:	6003      	str	r3, [r0, #0]
 802d57e:	e7d6      	b.n	802d52e <_free_r+0x26>
 802d580:	6825      	ldr	r5, [r4, #0]
 802d582:	1961      	adds	r1, r4, r5
 802d584:	428b      	cmp	r3, r1
 802d586:	bf04      	itt	eq
 802d588:	6819      	ldreq	r1, [r3, #0]
 802d58a:	685b      	ldreq	r3, [r3, #4]
 802d58c:	6063      	str	r3, [r4, #4]
 802d58e:	bf04      	itt	eq
 802d590:	1949      	addeq	r1, r1, r5
 802d592:	6021      	streq	r1, [r4, #0]
 802d594:	6054      	str	r4, [r2, #4]
 802d596:	e7ca      	b.n	802d52e <_free_r+0x26>
 802d598:	b003      	add	sp, #12
 802d59a:	bd30      	pop	{r4, r5, pc}
 802d59c:	200011a0 	.word	0x200011a0

0802d5a0 <sbrk_aligned>:
 802d5a0:	b570      	push	{r4, r5, r6, lr}
 802d5a2:	4e0e      	ldr	r6, [pc, #56]	; (802d5dc <sbrk_aligned+0x3c>)
 802d5a4:	460c      	mov	r4, r1
 802d5a6:	6831      	ldr	r1, [r6, #0]
 802d5a8:	4605      	mov	r5, r0
 802d5aa:	b911      	cbnz	r1, 802d5b2 <sbrk_aligned+0x12>
 802d5ac:	f000 f91a 	bl	802d7e4 <_sbrk_r>
 802d5b0:	6030      	str	r0, [r6, #0]
 802d5b2:	4621      	mov	r1, r4
 802d5b4:	4628      	mov	r0, r5
 802d5b6:	f000 f915 	bl	802d7e4 <_sbrk_r>
 802d5ba:	1c43      	adds	r3, r0, #1
 802d5bc:	d00a      	beq.n	802d5d4 <sbrk_aligned+0x34>
 802d5be:	1cc4      	adds	r4, r0, #3
 802d5c0:	f024 0403 	bic.w	r4, r4, #3
 802d5c4:	42a0      	cmp	r0, r4
 802d5c6:	d007      	beq.n	802d5d8 <sbrk_aligned+0x38>
 802d5c8:	1a21      	subs	r1, r4, r0
 802d5ca:	4628      	mov	r0, r5
 802d5cc:	f000 f90a 	bl	802d7e4 <_sbrk_r>
 802d5d0:	3001      	adds	r0, #1
 802d5d2:	d101      	bne.n	802d5d8 <sbrk_aligned+0x38>
 802d5d4:	f04f 34ff 	mov.w	r4, #4294967295
 802d5d8:	4620      	mov	r0, r4
 802d5da:	bd70      	pop	{r4, r5, r6, pc}
 802d5dc:	200011a4 	.word	0x200011a4

0802d5e0 <_malloc_r>:
 802d5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d5e4:	1ccd      	adds	r5, r1, #3
 802d5e6:	f025 0503 	bic.w	r5, r5, #3
 802d5ea:	3508      	adds	r5, #8
 802d5ec:	2d0c      	cmp	r5, #12
 802d5ee:	bf38      	it	cc
 802d5f0:	250c      	movcc	r5, #12
 802d5f2:	2d00      	cmp	r5, #0
 802d5f4:	4607      	mov	r7, r0
 802d5f6:	db01      	blt.n	802d5fc <_malloc_r+0x1c>
 802d5f8:	42a9      	cmp	r1, r5
 802d5fa:	d905      	bls.n	802d608 <_malloc_r+0x28>
 802d5fc:	230c      	movs	r3, #12
 802d5fe:	603b      	str	r3, [r7, #0]
 802d600:	2600      	movs	r6, #0
 802d602:	4630      	mov	r0, r6
 802d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d608:	4e2e      	ldr	r6, [pc, #184]	; (802d6c4 <_malloc_r+0xe4>)
 802d60a:	f000 fbfb 	bl	802de04 <__malloc_lock>
 802d60e:	6833      	ldr	r3, [r6, #0]
 802d610:	461c      	mov	r4, r3
 802d612:	bb34      	cbnz	r4, 802d662 <_malloc_r+0x82>
 802d614:	4629      	mov	r1, r5
 802d616:	4638      	mov	r0, r7
 802d618:	f7ff ffc2 	bl	802d5a0 <sbrk_aligned>
 802d61c:	1c43      	adds	r3, r0, #1
 802d61e:	4604      	mov	r4, r0
 802d620:	d14d      	bne.n	802d6be <_malloc_r+0xde>
 802d622:	6834      	ldr	r4, [r6, #0]
 802d624:	4626      	mov	r6, r4
 802d626:	2e00      	cmp	r6, #0
 802d628:	d140      	bne.n	802d6ac <_malloc_r+0xcc>
 802d62a:	6823      	ldr	r3, [r4, #0]
 802d62c:	4631      	mov	r1, r6
 802d62e:	4638      	mov	r0, r7
 802d630:	eb04 0803 	add.w	r8, r4, r3
 802d634:	f000 f8d6 	bl	802d7e4 <_sbrk_r>
 802d638:	4580      	cmp	r8, r0
 802d63a:	d13a      	bne.n	802d6b2 <_malloc_r+0xd2>
 802d63c:	6821      	ldr	r1, [r4, #0]
 802d63e:	3503      	adds	r5, #3
 802d640:	1a6d      	subs	r5, r5, r1
 802d642:	f025 0503 	bic.w	r5, r5, #3
 802d646:	3508      	adds	r5, #8
 802d648:	2d0c      	cmp	r5, #12
 802d64a:	bf38      	it	cc
 802d64c:	250c      	movcc	r5, #12
 802d64e:	4629      	mov	r1, r5
 802d650:	4638      	mov	r0, r7
 802d652:	f7ff ffa5 	bl	802d5a0 <sbrk_aligned>
 802d656:	3001      	adds	r0, #1
 802d658:	d02b      	beq.n	802d6b2 <_malloc_r+0xd2>
 802d65a:	6823      	ldr	r3, [r4, #0]
 802d65c:	442b      	add	r3, r5
 802d65e:	6023      	str	r3, [r4, #0]
 802d660:	e00e      	b.n	802d680 <_malloc_r+0xa0>
 802d662:	6822      	ldr	r2, [r4, #0]
 802d664:	1b52      	subs	r2, r2, r5
 802d666:	d41e      	bmi.n	802d6a6 <_malloc_r+0xc6>
 802d668:	2a0b      	cmp	r2, #11
 802d66a:	d916      	bls.n	802d69a <_malloc_r+0xba>
 802d66c:	1961      	adds	r1, r4, r5
 802d66e:	42a3      	cmp	r3, r4
 802d670:	6025      	str	r5, [r4, #0]
 802d672:	bf18      	it	ne
 802d674:	6059      	strne	r1, [r3, #4]
 802d676:	6863      	ldr	r3, [r4, #4]
 802d678:	bf08      	it	eq
 802d67a:	6031      	streq	r1, [r6, #0]
 802d67c:	5162      	str	r2, [r4, r5]
 802d67e:	604b      	str	r3, [r1, #4]
 802d680:	4638      	mov	r0, r7
 802d682:	f104 060b 	add.w	r6, r4, #11
 802d686:	f000 fbc3 	bl	802de10 <__malloc_unlock>
 802d68a:	f026 0607 	bic.w	r6, r6, #7
 802d68e:	1d23      	adds	r3, r4, #4
 802d690:	1af2      	subs	r2, r6, r3
 802d692:	d0b6      	beq.n	802d602 <_malloc_r+0x22>
 802d694:	1b9b      	subs	r3, r3, r6
 802d696:	50a3      	str	r3, [r4, r2]
 802d698:	e7b3      	b.n	802d602 <_malloc_r+0x22>
 802d69a:	6862      	ldr	r2, [r4, #4]
 802d69c:	42a3      	cmp	r3, r4
 802d69e:	bf0c      	ite	eq
 802d6a0:	6032      	streq	r2, [r6, #0]
 802d6a2:	605a      	strne	r2, [r3, #4]
 802d6a4:	e7ec      	b.n	802d680 <_malloc_r+0xa0>
 802d6a6:	4623      	mov	r3, r4
 802d6a8:	6864      	ldr	r4, [r4, #4]
 802d6aa:	e7b2      	b.n	802d612 <_malloc_r+0x32>
 802d6ac:	4634      	mov	r4, r6
 802d6ae:	6876      	ldr	r6, [r6, #4]
 802d6b0:	e7b9      	b.n	802d626 <_malloc_r+0x46>
 802d6b2:	230c      	movs	r3, #12
 802d6b4:	603b      	str	r3, [r7, #0]
 802d6b6:	4638      	mov	r0, r7
 802d6b8:	f000 fbaa 	bl	802de10 <__malloc_unlock>
 802d6bc:	e7a1      	b.n	802d602 <_malloc_r+0x22>
 802d6be:	6025      	str	r5, [r4, #0]
 802d6c0:	e7de      	b.n	802d680 <_malloc_r+0xa0>
 802d6c2:	bf00      	nop
 802d6c4:	200011a0 	.word	0x200011a0

0802d6c8 <iprintf>:
 802d6c8:	b40f      	push	{r0, r1, r2, r3}
 802d6ca:	4b0a      	ldr	r3, [pc, #40]	; (802d6f4 <iprintf+0x2c>)
 802d6cc:	b513      	push	{r0, r1, r4, lr}
 802d6ce:	681c      	ldr	r4, [r3, #0]
 802d6d0:	b124      	cbz	r4, 802d6dc <iprintf+0x14>
 802d6d2:	69a3      	ldr	r3, [r4, #24]
 802d6d4:	b913      	cbnz	r3, 802d6dc <iprintf+0x14>
 802d6d6:	4620      	mov	r0, r4
 802d6d8:	f000 fa8e 	bl	802dbf8 <__sinit>
 802d6dc:	ab05      	add	r3, sp, #20
 802d6de:	9a04      	ldr	r2, [sp, #16]
 802d6e0:	68a1      	ldr	r1, [r4, #8]
 802d6e2:	9301      	str	r3, [sp, #4]
 802d6e4:	4620      	mov	r0, r4
 802d6e6:	f000 fd1f 	bl	802e128 <_vfiprintf_r>
 802d6ea:	b002      	add	sp, #8
 802d6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d6f0:	b004      	add	sp, #16
 802d6f2:	4770      	bx	lr
 802d6f4:	2000007c 	.word	0x2000007c

0802d6f8 <_puts_r>:
 802d6f8:	b570      	push	{r4, r5, r6, lr}
 802d6fa:	460e      	mov	r6, r1
 802d6fc:	4605      	mov	r5, r0
 802d6fe:	b118      	cbz	r0, 802d708 <_puts_r+0x10>
 802d700:	6983      	ldr	r3, [r0, #24]
 802d702:	b90b      	cbnz	r3, 802d708 <_puts_r+0x10>
 802d704:	f000 fa78 	bl	802dbf8 <__sinit>
 802d708:	69ab      	ldr	r3, [r5, #24]
 802d70a:	68ac      	ldr	r4, [r5, #8]
 802d70c:	b913      	cbnz	r3, 802d714 <_puts_r+0x1c>
 802d70e:	4628      	mov	r0, r5
 802d710:	f000 fa72 	bl	802dbf8 <__sinit>
 802d714:	4b2c      	ldr	r3, [pc, #176]	; (802d7c8 <_puts_r+0xd0>)
 802d716:	429c      	cmp	r4, r3
 802d718:	d120      	bne.n	802d75c <_puts_r+0x64>
 802d71a:	686c      	ldr	r4, [r5, #4]
 802d71c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d71e:	07db      	lsls	r3, r3, #31
 802d720:	d405      	bmi.n	802d72e <_puts_r+0x36>
 802d722:	89a3      	ldrh	r3, [r4, #12]
 802d724:	0598      	lsls	r0, r3, #22
 802d726:	d402      	bmi.n	802d72e <_puts_r+0x36>
 802d728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d72a:	f000 fb03 	bl	802dd34 <__retarget_lock_acquire_recursive>
 802d72e:	89a3      	ldrh	r3, [r4, #12]
 802d730:	0719      	lsls	r1, r3, #28
 802d732:	d51d      	bpl.n	802d770 <_puts_r+0x78>
 802d734:	6923      	ldr	r3, [r4, #16]
 802d736:	b1db      	cbz	r3, 802d770 <_puts_r+0x78>
 802d738:	3e01      	subs	r6, #1
 802d73a:	68a3      	ldr	r3, [r4, #8]
 802d73c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802d740:	3b01      	subs	r3, #1
 802d742:	60a3      	str	r3, [r4, #8]
 802d744:	bb39      	cbnz	r1, 802d796 <_puts_r+0x9e>
 802d746:	2b00      	cmp	r3, #0
 802d748:	da38      	bge.n	802d7bc <_puts_r+0xc4>
 802d74a:	4622      	mov	r2, r4
 802d74c:	210a      	movs	r1, #10
 802d74e:	4628      	mov	r0, r5
 802d750:	f000 f878 	bl	802d844 <__swbuf_r>
 802d754:	3001      	adds	r0, #1
 802d756:	d011      	beq.n	802d77c <_puts_r+0x84>
 802d758:	250a      	movs	r5, #10
 802d75a:	e011      	b.n	802d780 <_puts_r+0x88>
 802d75c:	4b1b      	ldr	r3, [pc, #108]	; (802d7cc <_puts_r+0xd4>)
 802d75e:	429c      	cmp	r4, r3
 802d760:	d101      	bne.n	802d766 <_puts_r+0x6e>
 802d762:	68ac      	ldr	r4, [r5, #8]
 802d764:	e7da      	b.n	802d71c <_puts_r+0x24>
 802d766:	4b1a      	ldr	r3, [pc, #104]	; (802d7d0 <_puts_r+0xd8>)
 802d768:	429c      	cmp	r4, r3
 802d76a:	bf08      	it	eq
 802d76c:	68ec      	ldreq	r4, [r5, #12]
 802d76e:	e7d5      	b.n	802d71c <_puts_r+0x24>
 802d770:	4621      	mov	r1, r4
 802d772:	4628      	mov	r0, r5
 802d774:	f000 f8b8 	bl	802d8e8 <__swsetup_r>
 802d778:	2800      	cmp	r0, #0
 802d77a:	d0dd      	beq.n	802d738 <_puts_r+0x40>
 802d77c:	f04f 35ff 	mov.w	r5, #4294967295
 802d780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d782:	07da      	lsls	r2, r3, #31
 802d784:	d405      	bmi.n	802d792 <_puts_r+0x9a>
 802d786:	89a3      	ldrh	r3, [r4, #12]
 802d788:	059b      	lsls	r3, r3, #22
 802d78a:	d402      	bmi.n	802d792 <_puts_r+0x9a>
 802d78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d78e:	f000 fad2 	bl	802dd36 <__retarget_lock_release_recursive>
 802d792:	4628      	mov	r0, r5
 802d794:	bd70      	pop	{r4, r5, r6, pc}
 802d796:	2b00      	cmp	r3, #0
 802d798:	da04      	bge.n	802d7a4 <_puts_r+0xac>
 802d79a:	69a2      	ldr	r2, [r4, #24]
 802d79c:	429a      	cmp	r2, r3
 802d79e:	dc06      	bgt.n	802d7ae <_puts_r+0xb6>
 802d7a0:	290a      	cmp	r1, #10
 802d7a2:	d004      	beq.n	802d7ae <_puts_r+0xb6>
 802d7a4:	6823      	ldr	r3, [r4, #0]
 802d7a6:	1c5a      	adds	r2, r3, #1
 802d7a8:	6022      	str	r2, [r4, #0]
 802d7aa:	7019      	strb	r1, [r3, #0]
 802d7ac:	e7c5      	b.n	802d73a <_puts_r+0x42>
 802d7ae:	4622      	mov	r2, r4
 802d7b0:	4628      	mov	r0, r5
 802d7b2:	f000 f847 	bl	802d844 <__swbuf_r>
 802d7b6:	3001      	adds	r0, #1
 802d7b8:	d1bf      	bne.n	802d73a <_puts_r+0x42>
 802d7ba:	e7df      	b.n	802d77c <_puts_r+0x84>
 802d7bc:	6823      	ldr	r3, [r4, #0]
 802d7be:	250a      	movs	r5, #10
 802d7c0:	1c5a      	adds	r2, r3, #1
 802d7c2:	6022      	str	r2, [r4, #0]
 802d7c4:	701d      	strb	r5, [r3, #0]
 802d7c6:	e7db      	b.n	802d780 <_puts_r+0x88>
 802d7c8:	08030d10 	.word	0x08030d10
 802d7cc:	08030d30 	.word	0x08030d30
 802d7d0:	08030cf0 	.word	0x08030cf0

0802d7d4 <puts>:
 802d7d4:	4b02      	ldr	r3, [pc, #8]	; (802d7e0 <puts+0xc>)
 802d7d6:	4601      	mov	r1, r0
 802d7d8:	6818      	ldr	r0, [r3, #0]
 802d7da:	f7ff bf8d 	b.w	802d6f8 <_puts_r>
 802d7de:	bf00      	nop
 802d7e0:	2000007c 	.word	0x2000007c

0802d7e4 <_sbrk_r>:
 802d7e4:	b538      	push	{r3, r4, r5, lr}
 802d7e6:	4d06      	ldr	r5, [pc, #24]	; (802d800 <_sbrk_r+0x1c>)
 802d7e8:	2300      	movs	r3, #0
 802d7ea:	4604      	mov	r4, r0
 802d7ec:	4608      	mov	r0, r1
 802d7ee:	602b      	str	r3, [r5, #0]
 802d7f0:	f7f4 f9ee 	bl	8021bd0 <_sbrk>
 802d7f4:	1c43      	adds	r3, r0, #1
 802d7f6:	d102      	bne.n	802d7fe <_sbrk_r+0x1a>
 802d7f8:	682b      	ldr	r3, [r5, #0]
 802d7fa:	b103      	cbz	r3, 802d7fe <_sbrk_r+0x1a>
 802d7fc:	6023      	str	r3, [r4, #0]
 802d7fe:	bd38      	pop	{r3, r4, r5, pc}
 802d800:	200011ac 	.word	0x200011ac

0802d804 <siprintf>:
 802d804:	b40e      	push	{r1, r2, r3}
 802d806:	b500      	push	{lr}
 802d808:	b09c      	sub	sp, #112	; 0x70
 802d80a:	ab1d      	add	r3, sp, #116	; 0x74
 802d80c:	9002      	str	r0, [sp, #8]
 802d80e:	9006      	str	r0, [sp, #24]
 802d810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d814:	4809      	ldr	r0, [pc, #36]	; (802d83c <siprintf+0x38>)
 802d816:	9107      	str	r1, [sp, #28]
 802d818:	9104      	str	r1, [sp, #16]
 802d81a:	4909      	ldr	r1, [pc, #36]	; (802d840 <siprintf+0x3c>)
 802d81c:	f853 2b04 	ldr.w	r2, [r3], #4
 802d820:	9105      	str	r1, [sp, #20]
 802d822:	6800      	ldr	r0, [r0, #0]
 802d824:	9301      	str	r3, [sp, #4]
 802d826:	a902      	add	r1, sp, #8
 802d828:	f000 fb54 	bl	802ded4 <_svfiprintf_r>
 802d82c:	9b02      	ldr	r3, [sp, #8]
 802d82e:	2200      	movs	r2, #0
 802d830:	701a      	strb	r2, [r3, #0]
 802d832:	b01c      	add	sp, #112	; 0x70
 802d834:	f85d eb04 	ldr.w	lr, [sp], #4
 802d838:	b003      	add	sp, #12
 802d83a:	4770      	bx	lr
 802d83c:	2000007c 	.word	0x2000007c
 802d840:	ffff0208 	.word	0xffff0208

0802d844 <__swbuf_r>:
 802d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d846:	460e      	mov	r6, r1
 802d848:	4614      	mov	r4, r2
 802d84a:	4605      	mov	r5, r0
 802d84c:	b118      	cbz	r0, 802d856 <__swbuf_r+0x12>
 802d84e:	6983      	ldr	r3, [r0, #24]
 802d850:	b90b      	cbnz	r3, 802d856 <__swbuf_r+0x12>
 802d852:	f000 f9d1 	bl	802dbf8 <__sinit>
 802d856:	4b21      	ldr	r3, [pc, #132]	; (802d8dc <__swbuf_r+0x98>)
 802d858:	429c      	cmp	r4, r3
 802d85a:	d12b      	bne.n	802d8b4 <__swbuf_r+0x70>
 802d85c:	686c      	ldr	r4, [r5, #4]
 802d85e:	69a3      	ldr	r3, [r4, #24]
 802d860:	60a3      	str	r3, [r4, #8]
 802d862:	89a3      	ldrh	r3, [r4, #12]
 802d864:	071a      	lsls	r2, r3, #28
 802d866:	d52f      	bpl.n	802d8c8 <__swbuf_r+0x84>
 802d868:	6923      	ldr	r3, [r4, #16]
 802d86a:	b36b      	cbz	r3, 802d8c8 <__swbuf_r+0x84>
 802d86c:	6923      	ldr	r3, [r4, #16]
 802d86e:	6820      	ldr	r0, [r4, #0]
 802d870:	1ac0      	subs	r0, r0, r3
 802d872:	6963      	ldr	r3, [r4, #20]
 802d874:	b2f6      	uxtb	r6, r6
 802d876:	4283      	cmp	r3, r0
 802d878:	4637      	mov	r7, r6
 802d87a:	dc04      	bgt.n	802d886 <__swbuf_r+0x42>
 802d87c:	4621      	mov	r1, r4
 802d87e:	4628      	mov	r0, r5
 802d880:	f000 f926 	bl	802dad0 <_fflush_r>
 802d884:	bb30      	cbnz	r0, 802d8d4 <__swbuf_r+0x90>
 802d886:	68a3      	ldr	r3, [r4, #8]
 802d888:	3b01      	subs	r3, #1
 802d88a:	60a3      	str	r3, [r4, #8]
 802d88c:	6823      	ldr	r3, [r4, #0]
 802d88e:	1c5a      	adds	r2, r3, #1
 802d890:	6022      	str	r2, [r4, #0]
 802d892:	701e      	strb	r6, [r3, #0]
 802d894:	6963      	ldr	r3, [r4, #20]
 802d896:	3001      	adds	r0, #1
 802d898:	4283      	cmp	r3, r0
 802d89a:	d004      	beq.n	802d8a6 <__swbuf_r+0x62>
 802d89c:	89a3      	ldrh	r3, [r4, #12]
 802d89e:	07db      	lsls	r3, r3, #31
 802d8a0:	d506      	bpl.n	802d8b0 <__swbuf_r+0x6c>
 802d8a2:	2e0a      	cmp	r6, #10
 802d8a4:	d104      	bne.n	802d8b0 <__swbuf_r+0x6c>
 802d8a6:	4621      	mov	r1, r4
 802d8a8:	4628      	mov	r0, r5
 802d8aa:	f000 f911 	bl	802dad0 <_fflush_r>
 802d8ae:	b988      	cbnz	r0, 802d8d4 <__swbuf_r+0x90>
 802d8b0:	4638      	mov	r0, r7
 802d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d8b4:	4b0a      	ldr	r3, [pc, #40]	; (802d8e0 <__swbuf_r+0x9c>)
 802d8b6:	429c      	cmp	r4, r3
 802d8b8:	d101      	bne.n	802d8be <__swbuf_r+0x7a>
 802d8ba:	68ac      	ldr	r4, [r5, #8]
 802d8bc:	e7cf      	b.n	802d85e <__swbuf_r+0x1a>
 802d8be:	4b09      	ldr	r3, [pc, #36]	; (802d8e4 <__swbuf_r+0xa0>)
 802d8c0:	429c      	cmp	r4, r3
 802d8c2:	bf08      	it	eq
 802d8c4:	68ec      	ldreq	r4, [r5, #12]
 802d8c6:	e7ca      	b.n	802d85e <__swbuf_r+0x1a>
 802d8c8:	4621      	mov	r1, r4
 802d8ca:	4628      	mov	r0, r5
 802d8cc:	f000 f80c 	bl	802d8e8 <__swsetup_r>
 802d8d0:	2800      	cmp	r0, #0
 802d8d2:	d0cb      	beq.n	802d86c <__swbuf_r+0x28>
 802d8d4:	f04f 37ff 	mov.w	r7, #4294967295
 802d8d8:	e7ea      	b.n	802d8b0 <__swbuf_r+0x6c>
 802d8da:	bf00      	nop
 802d8dc:	08030d10 	.word	0x08030d10
 802d8e0:	08030d30 	.word	0x08030d30
 802d8e4:	08030cf0 	.word	0x08030cf0

0802d8e8 <__swsetup_r>:
 802d8e8:	4b32      	ldr	r3, [pc, #200]	; (802d9b4 <__swsetup_r+0xcc>)
 802d8ea:	b570      	push	{r4, r5, r6, lr}
 802d8ec:	681d      	ldr	r5, [r3, #0]
 802d8ee:	4606      	mov	r6, r0
 802d8f0:	460c      	mov	r4, r1
 802d8f2:	b125      	cbz	r5, 802d8fe <__swsetup_r+0x16>
 802d8f4:	69ab      	ldr	r3, [r5, #24]
 802d8f6:	b913      	cbnz	r3, 802d8fe <__swsetup_r+0x16>
 802d8f8:	4628      	mov	r0, r5
 802d8fa:	f000 f97d 	bl	802dbf8 <__sinit>
 802d8fe:	4b2e      	ldr	r3, [pc, #184]	; (802d9b8 <__swsetup_r+0xd0>)
 802d900:	429c      	cmp	r4, r3
 802d902:	d10f      	bne.n	802d924 <__swsetup_r+0x3c>
 802d904:	686c      	ldr	r4, [r5, #4]
 802d906:	89a3      	ldrh	r3, [r4, #12]
 802d908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d90c:	0719      	lsls	r1, r3, #28
 802d90e:	d42c      	bmi.n	802d96a <__swsetup_r+0x82>
 802d910:	06dd      	lsls	r5, r3, #27
 802d912:	d411      	bmi.n	802d938 <__swsetup_r+0x50>
 802d914:	2309      	movs	r3, #9
 802d916:	6033      	str	r3, [r6, #0]
 802d918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d91c:	81a3      	strh	r3, [r4, #12]
 802d91e:	f04f 30ff 	mov.w	r0, #4294967295
 802d922:	e03e      	b.n	802d9a2 <__swsetup_r+0xba>
 802d924:	4b25      	ldr	r3, [pc, #148]	; (802d9bc <__swsetup_r+0xd4>)
 802d926:	429c      	cmp	r4, r3
 802d928:	d101      	bne.n	802d92e <__swsetup_r+0x46>
 802d92a:	68ac      	ldr	r4, [r5, #8]
 802d92c:	e7eb      	b.n	802d906 <__swsetup_r+0x1e>
 802d92e:	4b24      	ldr	r3, [pc, #144]	; (802d9c0 <__swsetup_r+0xd8>)
 802d930:	429c      	cmp	r4, r3
 802d932:	bf08      	it	eq
 802d934:	68ec      	ldreq	r4, [r5, #12]
 802d936:	e7e6      	b.n	802d906 <__swsetup_r+0x1e>
 802d938:	0758      	lsls	r0, r3, #29
 802d93a:	d512      	bpl.n	802d962 <__swsetup_r+0x7a>
 802d93c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d93e:	b141      	cbz	r1, 802d952 <__swsetup_r+0x6a>
 802d940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d944:	4299      	cmp	r1, r3
 802d946:	d002      	beq.n	802d94e <__swsetup_r+0x66>
 802d948:	4630      	mov	r0, r6
 802d94a:	f7ff fddd 	bl	802d508 <_free_r>
 802d94e:	2300      	movs	r3, #0
 802d950:	6363      	str	r3, [r4, #52]	; 0x34
 802d952:	89a3      	ldrh	r3, [r4, #12]
 802d954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d958:	81a3      	strh	r3, [r4, #12]
 802d95a:	2300      	movs	r3, #0
 802d95c:	6063      	str	r3, [r4, #4]
 802d95e:	6923      	ldr	r3, [r4, #16]
 802d960:	6023      	str	r3, [r4, #0]
 802d962:	89a3      	ldrh	r3, [r4, #12]
 802d964:	f043 0308 	orr.w	r3, r3, #8
 802d968:	81a3      	strh	r3, [r4, #12]
 802d96a:	6923      	ldr	r3, [r4, #16]
 802d96c:	b94b      	cbnz	r3, 802d982 <__swsetup_r+0x9a>
 802d96e:	89a3      	ldrh	r3, [r4, #12]
 802d970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d978:	d003      	beq.n	802d982 <__swsetup_r+0x9a>
 802d97a:	4621      	mov	r1, r4
 802d97c:	4630      	mov	r0, r6
 802d97e:	f000 fa01 	bl	802dd84 <__smakebuf_r>
 802d982:	89a0      	ldrh	r0, [r4, #12]
 802d984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d988:	f010 0301 	ands.w	r3, r0, #1
 802d98c:	d00a      	beq.n	802d9a4 <__swsetup_r+0xbc>
 802d98e:	2300      	movs	r3, #0
 802d990:	60a3      	str	r3, [r4, #8]
 802d992:	6963      	ldr	r3, [r4, #20]
 802d994:	425b      	negs	r3, r3
 802d996:	61a3      	str	r3, [r4, #24]
 802d998:	6923      	ldr	r3, [r4, #16]
 802d99a:	b943      	cbnz	r3, 802d9ae <__swsetup_r+0xc6>
 802d99c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d9a0:	d1ba      	bne.n	802d918 <__swsetup_r+0x30>
 802d9a2:	bd70      	pop	{r4, r5, r6, pc}
 802d9a4:	0781      	lsls	r1, r0, #30
 802d9a6:	bf58      	it	pl
 802d9a8:	6963      	ldrpl	r3, [r4, #20]
 802d9aa:	60a3      	str	r3, [r4, #8]
 802d9ac:	e7f4      	b.n	802d998 <__swsetup_r+0xb0>
 802d9ae:	2000      	movs	r0, #0
 802d9b0:	e7f7      	b.n	802d9a2 <__swsetup_r+0xba>
 802d9b2:	bf00      	nop
 802d9b4:	2000007c 	.word	0x2000007c
 802d9b8:	08030d10 	.word	0x08030d10
 802d9bc:	08030d30 	.word	0x08030d30
 802d9c0:	08030cf0 	.word	0x08030cf0

0802d9c4 <__sflush_r>:
 802d9c4:	898a      	ldrh	r2, [r1, #12]
 802d9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d9ca:	4605      	mov	r5, r0
 802d9cc:	0710      	lsls	r0, r2, #28
 802d9ce:	460c      	mov	r4, r1
 802d9d0:	d458      	bmi.n	802da84 <__sflush_r+0xc0>
 802d9d2:	684b      	ldr	r3, [r1, #4]
 802d9d4:	2b00      	cmp	r3, #0
 802d9d6:	dc05      	bgt.n	802d9e4 <__sflush_r+0x20>
 802d9d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802d9da:	2b00      	cmp	r3, #0
 802d9dc:	dc02      	bgt.n	802d9e4 <__sflush_r+0x20>
 802d9de:	2000      	movs	r0, #0
 802d9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802d9e6:	2e00      	cmp	r6, #0
 802d9e8:	d0f9      	beq.n	802d9de <__sflush_r+0x1a>
 802d9ea:	2300      	movs	r3, #0
 802d9ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802d9f0:	682f      	ldr	r7, [r5, #0]
 802d9f2:	602b      	str	r3, [r5, #0]
 802d9f4:	d032      	beq.n	802da5c <__sflush_r+0x98>
 802d9f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802d9f8:	89a3      	ldrh	r3, [r4, #12]
 802d9fa:	075a      	lsls	r2, r3, #29
 802d9fc:	d505      	bpl.n	802da0a <__sflush_r+0x46>
 802d9fe:	6863      	ldr	r3, [r4, #4]
 802da00:	1ac0      	subs	r0, r0, r3
 802da02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802da04:	b10b      	cbz	r3, 802da0a <__sflush_r+0x46>
 802da06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802da08:	1ac0      	subs	r0, r0, r3
 802da0a:	2300      	movs	r3, #0
 802da0c:	4602      	mov	r2, r0
 802da0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802da10:	6a21      	ldr	r1, [r4, #32]
 802da12:	4628      	mov	r0, r5
 802da14:	47b0      	blx	r6
 802da16:	1c43      	adds	r3, r0, #1
 802da18:	89a3      	ldrh	r3, [r4, #12]
 802da1a:	d106      	bne.n	802da2a <__sflush_r+0x66>
 802da1c:	6829      	ldr	r1, [r5, #0]
 802da1e:	291d      	cmp	r1, #29
 802da20:	d82c      	bhi.n	802da7c <__sflush_r+0xb8>
 802da22:	4a2a      	ldr	r2, [pc, #168]	; (802dacc <__sflush_r+0x108>)
 802da24:	40ca      	lsrs	r2, r1
 802da26:	07d6      	lsls	r6, r2, #31
 802da28:	d528      	bpl.n	802da7c <__sflush_r+0xb8>
 802da2a:	2200      	movs	r2, #0
 802da2c:	6062      	str	r2, [r4, #4]
 802da2e:	04d9      	lsls	r1, r3, #19
 802da30:	6922      	ldr	r2, [r4, #16]
 802da32:	6022      	str	r2, [r4, #0]
 802da34:	d504      	bpl.n	802da40 <__sflush_r+0x7c>
 802da36:	1c42      	adds	r2, r0, #1
 802da38:	d101      	bne.n	802da3e <__sflush_r+0x7a>
 802da3a:	682b      	ldr	r3, [r5, #0]
 802da3c:	b903      	cbnz	r3, 802da40 <__sflush_r+0x7c>
 802da3e:	6560      	str	r0, [r4, #84]	; 0x54
 802da40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802da42:	602f      	str	r7, [r5, #0]
 802da44:	2900      	cmp	r1, #0
 802da46:	d0ca      	beq.n	802d9de <__sflush_r+0x1a>
 802da48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802da4c:	4299      	cmp	r1, r3
 802da4e:	d002      	beq.n	802da56 <__sflush_r+0x92>
 802da50:	4628      	mov	r0, r5
 802da52:	f7ff fd59 	bl	802d508 <_free_r>
 802da56:	2000      	movs	r0, #0
 802da58:	6360      	str	r0, [r4, #52]	; 0x34
 802da5a:	e7c1      	b.n	802d9e0 <__sflush_r+0x1c>
 802da5c:	6a21      	ldr	r1, [r4, #32]
 802da5e:	2301      	movs	r3, #1
 802da60:	4628      	mov	r0, r5
 802da62:	47b0      	blx	r6
 802da64:	1c41      	adds	r1, r0, #1
 802da66:	d1c7      	bne.n	802d9f8 <__sflush_r+0x34>
 802da68:	682b      	ldr	r3, [r5, #0]
 802da6a:	2b00      	cmp	r3, #0
 802da6c:	d0c4      	beq.n	802d9f8 <__sflush_r+0x34>
 802da6e:	2b1d      	cmp	r3, #29
 802da70:	d001      	beq.n	802da76 <__sflush_r+0xb2>
 802da72:	2b16      	cmp	r3, #22
 802da74:	d101      	bne.n	802da7a <__sflush_r+0xb6>
 802da76:	602f      	str	r7, [r5, #0]
 802da78:	e7b1      	b.n	802d9de <__sflush_r+0x1a>
 802da7a:	89a3      	ldrh	r3, [r4, #12]
 802da7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802da80:	81a3      	strh	r3, [r4, #12]
 802da82:	e7ad      	b.n	802d9e0 <__sflush_r+0x1c>
 802da84:	690f      	ldr	r7, [r1, #16]
 802da86:	2f00      	cmp	r7, #0
 802da88:	d0a9      	beq.n	802d9de <__sflush_r+0x1a>
 802da8a:	0793      	lsls	r3, r2, #30
 802da8c:	680e      	ldr	r6, [r1, #0]
 802da8e:	bf08      	it	eq
 802da90:	694b      	ldreq	r3, [r1, #20]
 802da92:	600f      	str	r7, [r1, #0]
 802da94:	bf18      	it	ne
 802da96:	2300      	movne	r3, #0
 802da98:	eba6 0807 	sub.w	r8, r6, r7
 802da9c:	608b      	str	r3, [r1, #8]
 802da9e:	f1b8 0f00 	cmp.w	r8, #0
 802daa2:	dd9c      	ble.n	802d9de <__sflush_r+0x1a>
 802daa4:	6a21      	ldr	r1, [r4, #32]
 802daa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802daa8:	4643      	mov	r3, r8
 802daaa:	463a      	mov	r2, r7
 802daac:	4628      	mov	r0, r5
 802daae:	47b0      	blx	r6
 802dab0:	2800      	cmp	r0, #0
 802dab2:	dc06      	bgt.n	802dac2 <__sflush_r+0xfe>
 802dab4:	89a3      	ldrh	r3, [r4, #12]
 802dab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802daba:	81a3      	strh	r3, [r4, #12]
 802dabc:	f04f 30ff 	mov.w	r0, #4294967295
 802dac0:	e78e      	b.n	802d9e0 <__sflush_r+0x1c>
 802dac2:	4407      	add	r7, r0
 802dac4:	eba8 0800 	sub.w	r8, r8, r0
 802dac8:	e7e9      	b.n	802da9e <__sflush_r+0xda>
 802daca:	bf00      	nop
 802dacc:	20400001 	.word	0x20400001

0802dad0 <_fflush_r>:
 802dad0:	b538      	push	{r3, r4, r5, lr}
 802dad2:	690b      	ldr	r3, [r1, #16]
 802dad4:	4605      	mov	r5, r0
 802dad6:	460c      	mov	r4, r1
 802dad8:	b913      	cbnz	r3, 802dae0 <_fflush_r+0x10>
 802dada:	2500      	movs	r5, #0
 802dadc:	4628      	mov	r0, r5
 802dade:	bd38      	pop	{r3, r4, r5, pc}
 802dae0:	b118      	cbz	r0, 802daea <_fflush_r+0x1a>
 802dae2:	6983      	ldr	r3, [r0, #24]
 802dae4:	b90b      	cbnz	r3, 802daea <_fflush_r+0x1a>
 802dae6:	f000 f887 	bl	802dbf8 <__sinit>
 802daea:	4b14      	ldr	r3, [pc, #80]	; (802db3c <_fflush_r+0x6c>)
 802daec:	429c      	cmp	r4, r3
 802daee:	d11b      	bne.n	802db28 <_fflush_r+0x58>
 802daf0:	686c      	ldr	r4, [r5, #4]
 802daf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802daf6:	2b00      	cmp	r3, #0
 802daf8:	d0ef      	beq.n	802dada <_fflush_r+0xa>
 802dafa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802dafc:	07d0      	lsls	r0, r2, #31
 802dafe:	d404      	bmi.n	802db0a <_fflush_r+0x3a>
 802db00:	0599      	lsls	r1, r3, #22
 802db02:	d402      	bmi.n	802db0a <_fflush_r+0x3a>
 802db04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802db06:	f000 f915 	bl	802dd34 <__retarget_lock_acquire_recursive>
 802db0a:	4628      	mov	r0, r5
 802db0c:	4621      	mov	r1, r4
 802db0e:	f7ff ff59 	bl	802d9c4 <__sflush_r>
 802db12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802db14:	07da      	lsls	r2, r3, #31
 802db16:	4605      	mov	r5, r0
 802db18:	d4e0      	bmi.n	802dadc <_fflush_r+0xc>
 802db1a:	89a3      	ldrh	r3, [r4, #12]
 802db1c:	059b      	lsls	r3, r3, #22
 802db1e:	d4dd      	bmi.n	802dadc <_fflush_r+0xc>
 802db20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802db22:	f000 f908 	bl	802dd36 <__retarget_lock_release_recursive>
 802db26:	e7d9      	b.n	802dadc <_fflush_r+0xc>
 802db28:	4b05      	ldr	r3, [pc, #20]	; (802db40 <_fflush_r+0x70>)
 802db2a:	429c      	cmp	r4, r3
 802db2c:	d101      	bne.n	802db32 <_fflush_r+0x62>
 802db2e:	68ac      	ldr	r4, [r5, #8]
 802db30:	e7df      	b.n	802daf2 <_fflush_r+0x22>
 802db32:	4b04      	ldr	r3, [pc, #16]	; (802db44 <_fflush_r+0x74>)
 802db34:	429c      	cmp	r4, r3
 802db36:	bf08      	it	eq
 802db38:	68ec      	ldreq	r4, [r5, #12]
 802db3a:	e7da      	b.n	802daf2 <_fflush_r+0x22>
 802db3c:	08030d10 	.word	0x08030d10
 802db40:	08030d30 	.word	0x08030d30
 802db44:	08030cf0 	.word	0x08030cf0

0802db48 <std>:
 802db48:	2300      	movs	r3, #0
 802db4a:	b510      	push	{r4, lr}
 802db4c:	4604      	mov	r4, r0
 802db4e:	e9c0 3300 	strd	r3, r3, [r0]
 802db52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802db56:	6083      	str	r3, [r0, #8]
 802db58:	8181      	strh	r1, [r0, #12]
 802db5a:	6643      	str	r3, [r0, #100]	; 0x64
 802db5c:	81c2      	strh	r2, [r0, #14]
 802db5e:	6183      	str	r3, [r0, #24]
 802db60:	4619      	mov	r1, r3
 802db62:	2208      	movs	r2, #8
 802db64:	305c      	adds	r0, #92	; 0x5c
 802db66:	f7ff fcc7 	bl	802d4f8 <memset>
 802db6a:	4b05      	ldr	r3, [pc, #20]	; (802db80 <std+0x38>)
 802db6c:	6263      	str	r3, [r4, #36]	; 0x24
 802db6e:	4b05      	ldr	r3, [pc, #20]	; (802db84 <std+0x3c>)
 802db70:	62a3      	str	r3, [r4, #40]	; 0x28
 802db72:	4b05      	ldr	r3, [pc, #20]	; (802db88 <std+0x40>)
 802db74:	62e3      	str	r3, [r4, #44]	; 0x2c
 802db76:	4b05      	ldr	r3, [pc, #20]	; (802db8c <std+0x44>)
 802db78:	6224      	str	r4, [r4, #32]
 802db7a:	6323      	str	r3, [r4, #48]	; 0x30
 802db7c:	bd10      	pop	{r4, pc}
 802db7e:	bf00      	nop
 802db80:	0802e6b1 	.word	0x0802e6b1
 802db84:	0802e6d3 	.word	0x0802e6d3
 802db88:	0802e70b 	.word	0x0802e70b
 802db8c:	0802e72f 	.word	0x0802e72f

0802db90 <_cleanup_r>:
 802db90:	4901      	ldr	r1, [pc, #4]	; (802db98 <_cleanup_r+0x8>)
 802db92:	f000 b8af 	b.w	802dcf4 <_fwalk_reent>
 802db96:	bf00      	nop
 802db98:	0802dad1 	.word	0x0802dad1

0802db9c <__sfmoreglue>:
 802db9c:	b570      	push	{r4, r5, r6, lr}
 802db9e:	2268      	movs	r2, #104	; 0x68
 802dba0:	1e4d      	subs	r5, r1, #1
 802dba2:	4355      	muls	r5, r2
 802dba4:	460e      	mov	r6, r1
 802dba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802dbaa:	f7ff fd19 	bl	802d5e0 <_malloc_r>
 802dbae:	4604      	mov	r4, r0
 802dbb0:	b140      	cbz	r0, 802dbc4 <__sfmoreglue+0x28>
 802dbb2:	2100      	movs	r1, #0
 802dbb4:	e9c0 1600 	strd	r1, r6, [r0]
 802dbb8:	300c      	adds	r0, #12
 802dbba:	60a0      	str	r0, [r4, #8]
 802dbbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802dbc0:	f7ff fc9a 	bl	802d4f8 <memset>
 802dbc4:	4620      	mov	r0, r4
 802dbc6:	bd70      	pop	{r4, r5, r6, pc}

0802dbc8 <__sfp_lock_acquire>:
 802dbc8:	4801      	ldr	r0, [pc, #4]	; (802dbd0 <__sfp_lock_acquire+0x8>)
 802dbca:	f000 b8b3 	b.w	802dd34 <__retarget_lock_acquire_recursive>
 802dbce:	bf00      	nop
 802dbd0:	200011a9 	.word	0x200011a9

0802dbd4 <__sfp_lock_release>:
 802dbd4:	4801      	ldr	r0, [pc, #4]	; (802dbdc <__sfp_lock_release+0x8>)
 802dbd6:	f000 b8ae 	b.w	802dd36 <__retarget_lock_release_recursive>
 802dbda:	bf00      	nop
 802dbdc:	200011a9 	.word	0x200011a9

0802dbe0 <__sinit_lock_acquire>:
 802dbe0:	4801      	ldr	r0, [pc, #4]	; (802dbe8 <__sinit_lock_acquire+0x8>)
 802dbe2:	f000 b8a7 	b.w	802dd34 <__retarget_lock_acquire_recursive>
 802dbe6:	bf00      	nop
 802dbe8:	200011aa 	.word	0x200011aa

0802dbec <__sinit_lock_release>:
 802dbec:	4801      	ldr	r0, [pc, #4]	; (802dbf4 <__sinit_lock_release+0x8>)
 802dbee:	f000 b8a2 	b.w	802dd36 <__retarget_lock_release_recursive>
 802dbf2:	bf00      	nop
 802dbf4:	200011aa 	.word	0x200011aa

0802dbf8 <__sinit>:
 802dbf8:	b510      	push	{r4, lr}
 802dbfa:	4604      	mov	r4, r0
 802dbfc:	f7ff fff0 	bl	802dbe0 <__sinit_lock_acquire>
 802dc00:	69a3      	ldr	r3, [r4, #24]
 802dc02:	b11b      	cbz	r3, 802dc0c <__sinit+0x14>
 802dc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802dc08:	f7ff bff0 	b.w	802dbec <__sinit_lock_release>
 802dc0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802dc10:	6523      	str	r3, [r4, #80]	; 0x50
 802dc12:	4b13      	ldr	r3, [pc, #76]	; (802dc60 <__sinit+0x68>)
 802dc14:	4a13      	ldr	r2, [pc, #76]	; (802dc64 <__sinit+0x6c>)
 802dc16:	681b      	ldr	r3, [r3, #0]
 802dc18:	62a2      	str	r2, [r4, #40]	; 0x28
 802dc1a:	42a3      	cmp	r3, r4
 802dc1c:	bf04      	itt	eq
 802dc1e:	2301      	moveq	r3, #1
 802dc20:	61a3      	streq	r3, [r4, #24]
 802dc22:	4620      	mov	r0, r4
 802dc24:	f000 f820 	bl	802dc68 <__sfp>
 802dc28:	6060      	str	r0, [r4, #4]
 802dc2a:	4620      	mov	r0, r4
 802dc2c:	f000 f81c 	bl	802dc68 <__sfp>
 802dc30:	60a0      	str	r0, [r4, #8]
 802dc32:	4620      	mov	r0, r4
 802dc34:	f000 f818 	bl	802dc68 <__sfp>
 802dc38:	2200      	movs	r2, #0
 802dc3a:	60e0      	str	r0, [r4, #12]
 802dc3c:	2104      	movs	r1, #4
 802dc3e:	6860      	ldr	r0, [r4, #4]
 802dc40:	f7ff ff82 	bl	802db48 <std>
 802dc44:	68a0      	ldr	r0, [r4, #8]
 802dc46:	2201      	movs	r2, #1
 802dc48:	2109      	movs	r1, #9
 802dc4a:	f7ff ff7d 	bl	802db48 <std>
 802dc4e:	68e0      	ldr	r0, [r4, #12]
 802dc50:	2202      	movs	r2, #2
 802dc52:	2112      	movs	r1, #18
 802dc54:	f7ff ff78 	bl	802db48 <std>
 802dc58:	2301      	movs	r3, #1
 802dc5a:	61a3      	str	r3, [r4, #24]
 802dc5c:	e7d2      	b.n	802dc04 <__sinit+0xc>
 802dc5e:	bf00      	nop
 802dc60:	08030cec 	.word	0x08030cec
 802dc64:	0802db91 	.word	0x0802db91

0802dc68 <__sfp>:
 802dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802dc6a:	4607      	mov	r7, r0
 802dc6c:	f7ff ffac 	bl	802dbc8 <__sfp_lock_acquire>
 802dc70:	4b1e      	ldr	r3, [pc, #120]	; (802dcec <__sfp+0x84>)
 802dc72:	681e      	ldr	r6, [r3, #0]
 802dc74:	69b3      	ldr	r3, [r6, #24]
 802dc76:	b913      	cbnz	r3, 802dc7e <__sfp+0x16>
 802dc78:	4630      	mov	r0, r6
 802dc7a:	f7ff ffbd 	bl	802dbf8 <__sinit>
 802dc7e:	3648      	adds	r6, #72	; 0x48
 802dc80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802dc84:	3b01      	subs	r3, #1
 802dc86:	d503      	bpl.n	802dc90 <__sfp+0x28>
 802dc88:	6833      	ldr	r3, [r6, #0]
 802dc8a:	b30b      	cbz	r3, 802dcd0 <__sfp+0x68>
 802dc8c:	6836      	ldr	r6, [r6, #0]
 802dc8e:	e7f7      	b.n	802dc80 <__sfp+0x18>
 802dc90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802dc94:	b9d5      	cbnz	r5, 802dccc <__sfp+0x64>
 802dc96:	4b16      	ldr	r3, [pc, #88]	; (802dcf0 <__sfp+0x88>)
 802dc98:	60e3      	str	r3, [r4, #12]
 802dc9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802dc9e:	6665      	str	r5, [r4, #100]	; 0x64
 802dca0:	f000 f847 	bl	802dd32 <__retarget_lock_init_recursive>
 802dca4:	f7ff ff96 	bl	802dbd4 <__sfp_lock_release>
 802dca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802dcac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802dcb0:	6025      	str	r5, [r4, #0]
 802dcb2:	61a5      	str	r5, [r4, #24]
 802dcb4:	2208      	movs	r2, #8
 802dcb6:	4629      	mov	r1, r5
 802dcb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802dcbc:	f7ff fc1c 	bl	802d4f8 <memset>
 802dcc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802dcc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802dcc8:	4620      	mov	r0, r4
 802dcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dccc:	3468      	adds	r4, #104	; 0x68
 802dcce:	e7d9      	b.n	802dc84 <__sfp+0x1c>
 802dcd0:	2104      	movs	r1, #4
 802dcd2:	4638      	mov	r0, r7
 802dcd4:	f7ff ff62 	bl	802db9c <__sfmoreglue>
 802dcd8:	4604      	mov	r4, r0
 802dcda:	6030      	str	r0, [r6, #0]
 802dcdc:	2800      	cmp	r0, #0
 802dcde:	d1d5      	bne.n	802dc8c <__sfp+0x24>
 802dce0:	f7ff ff78 	bl	802dbd4 <__sfp_lock_release>
 802dce4:	230c      	movs	r3, #12
 802dce6:	603b      	str	r3, [r7, #0]
 802dce8:	e7ee      	b.n	802dcc8 <__sfp+0x60>
 802dcea:	bf00      	nop
 802dcec:	08030cec 	.word	0x08030cec
 802dcf0:	ffff0001 	.word	0xffff0001

0802dcf4 <_fwalk_reent>:
 802dcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802dcf8:	4606      	mov	r6, r0
 802dcfa:	4688      	mov	r8, r1
 802dcfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802dd00:	2700      	movs	r7, #0
 802dd02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802dd06:	f1b9 0901 	subs.w	r9, r9, #1
 802dd0a:	d505      	bpl.n	802dd18 <_fwalk_reent+0x24>
 802dd0c:	6824      	ldr	r4, [r4, #0]
 802dd0e:	2c00      	cmp	r4, #0
 802dd10:	d1f7      	bne.n	802dd02 <_fwalk_reent+0xe>
 802dd12:	4638      	mov	r0, r7
 802dd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802dd18:	89ab      	ldrh	r3, [r5, #12]
 802dd1a:	2b01      	cmp	r3, #1
 802dd1c:	d907      	bls.n	802dd2e <_fwalk_reent+0x3a>
 802dd1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802dd22:	3301      	adds	r3, #1
 802dd24:	d003      	beq.n	802dd2e <_fwalk_reent+0x3a>
 802dd26:	4629      	mov	r1, r5
 802dd28:	4630      	mov	r0, r6
 802dd2a:	47c0      	blx	r8
 802dd2c:	4307      	orrs	r7, r0
 802dd2e:	3568      	adds	r5, #104	; 0x68
 802dd30:	e7e9      	b.n	802dd06 <_fwalk_reent+0x12>

0802dd32 <__retarget_lock_init_recursive>:
 802dd32:	4770      	bx	lr

0802dd34 <__retarget_lock_acquire_recursive>:
 802dd34:	4770      	bx	lr

0802dd36 <__retarget_lock_release_recursive>:
 802dd36:	4770      	bx	lr

0802dd38 <__swhatbuf_r>:
 802dd38:	b570      	push	{r4, r5, r6, lr}
 802dd3a:	460e      	mov	r6, r1
 802dd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802dd40:	2900      	cmp	r1, #0
 802dd42:	b096      	sub	sp, #88	; 0x58
 802dd44:	4614      	mov	r4, r2
 802dd46:	461d      	mov	r5, r3
 802dd48:	da08      	bge.n	802dd5c <__swhatbuf_r+0x24>
 802dd4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802dd4e:	2200      	movs	r2, #0
 802dd50:	602a      	str	r2, [r5, #0]
 802dd52:	061a      	lsls	r2, r3, #24
 802dd54:	d410      	bmi.n	802dd78 <__swhatbuf_r+0x40>
 802dd56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802dd5a:	e00e      	b.n	802dd7a <__swhatbuf_r+0x42>
 802dd5c:	466a      	mov	r2, sp
 802dd5e:	f000 fd0d 	bl	802e77c <_fstat_r>
 802dd62:	2800      	cmp	r0, #0
 802dd64:	dbf1      	blt.n	802dd4a <__swhatbuf_r+0x12>
 802dd66:	9a01      	ldr	r2, [sp, #4]
 802dd68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802dd6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802dd70:	425a      	negs	r2, r3
 802dd72:	415a      	adcs	r2, r3
 802dd74:	602a      	str	r2, [r5, #0]
 802dd76:	e7ee      	b.n	802dd56 <__swhatbuf_r+0x1e>
 802dd78:	2340      	movs	r3, #64	; 0x40
 802dd7a:	2000      	movs	r0, #0
 802dd7c:	6023      	str	r3, [r4, #0]
 802dd7e:	b016      	add	sp, #88	; 0x58
 802dd80:	bd70      	pop	{r4, r5, r6, pc}
	...

0802dd84 <__smakebuf_r>:
 802dd84:	898b      	ldrh	r3, [r1, #12]
 802dd86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802dd88:	079d      	lsls	r5, r3, #30
 802dd8a:	4606      	mov	r6, r0
 802dd8c:	460c      	mov	r4, r1
 802dd8e:	d507      	bpl.n	802dda0 <__smakebuf_r+0x1c>
 802dd90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802dd94:	6023      	str	r3, [r4, #0]
 802dd96:	6123      	str	r3, [r4, #16]
 802dd98:	2301      	movs	r3, #1
 802dd9a:	6163      	str	r3, [r4, #20]
 802dd9c:	b002      	add	sp, #8
 802dd9e:	bd70      	pop	{r4, r5, r6, pc}
 802dda0:	ab01      	add	r3, sp, #4
 802dda2:	466a      	mov	r2, sp
 802dda4:	f7ff ffc8 	bl	802dd38 <__swhatbuf_r>
 802dda8:	9900      	ldr	r1, [sp, #0]
 802ddaa:	4605      	mov	r5, r0
 802ddac:	4630      	mov	r0, r6
 802ddae:	f7ff fc17 	bl	802d5e0 <_malloc_r>
 802ddb2:	b948      	cbnz	r0, 802ddc8 <__smakebuf_r+0x44>
 802ddb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ddb8:	059a      	lsls	r2, r3, #22
 802ddba:	d4ef      	bmi.n	802dd9c <__smakebuf_r+0x18>
 802ddbc:	f023 0303 	bic.w	r3, r3, #3
 802ddc0:	f043 0302 	orr.w	r3, r3, #2
 802ddc4:	81a3      	strh	r3, [r4, #12]
 802ddc6:	e7e3      	b.n	802dd90 <__smakebuf_r+0xc>
 802ddc8:	4b0d      	ldr	r3, [pc, #52]	; (802de00 <__smakebuf_r+0x7c>)
 802ddca:	62b3      	str	r3, [r6, #40]	; 0x28
 802ddcc:	89a3      	ldrh	r3, [r4, #12]
 802ddce:	6020      	str	r0, [r4, #0]
 802ddd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ddd4:	81a3      	strh	r3, [r4, #12]
 802ddd6:	9b00      	ldr	r3, [sp, #0]
 802ddd8:	6163      	str	r3, [r4, #20]
 802ddda:	9b01      	ldr	r3, [sp, #4]
 802dddc:	6120      	str	r0, [r4, #16]
 802ddde:	b15b      	cbz	r3, 802ddf8 <__smakebuf_r+0x74>
 802dde0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802dde4:	4630      	mov	r0, r6
 802dde6:	f000 fcdb 	bl	802e7a0 <_isatty_r>
 802ddea:	b128      	cbz	r0, 802ddf8 <__smakebuf_r+0x74>
 802ddec:	89a3      	ldrh	r3, [r4, #12]
 802ddee:	f023 0303 	bic.w	r3, r3, #3
 802ddf2:	f043 0301 	orr.w	r3, r3, #1
 802ddf6:	81a3      	strh	r3, [r4, #12]
 802ddf8:	89a0      	ldrh	r0, [r4, #12]
 802ddfa:	4305      	orrs	r5, r0
 802ddfc:	81a5      	strh	r5, [r4, #12]
 802ddfe:	e7cd      	b.n	802dd9c <__smakebuf_r+0x18>
 802de00:	0802db91 	.word	0x0802db91

0802de04 <__malloc_lock>:
 802de04:	4801      	ldr	r0, [pc, #4]	; (802de0c <__malloc_lock+0x8>)
 802de06:	f7ff bf95 	b.w	802dd34 <__retarget_lock_acquire_recursive>
 802de0a:	bf00      	nop
 802de0c:	200011a8 	.word	0x200011a8

0802de10 <__malloc_unlock>:
 802de10:	4801      	ldr	r0, [pc, #4]	; (802de18 <__malloc_unlock+0x8>)
 802de12:	f7ff bf90 	b.w	802dd36 <__retarget_lock_release_recursive>
 802de16:	bf00      	nop
 802de18:	200011a8 	.word	0x200011a8

0802de1c <__ssputs_r>:
 802de1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802de20:	688e      	ldr	r6, [r1, #8]
 802de22:	429e      	cmp	r6, r3
 802de24:	4682      	mov	sl, r0
 802de26:	460c      	mov	r4, r1
 802de28:	4690      	mov	r8, r2
 802de2a:	461f      	mov	r7, r3
 802de2c:	d838      	bhi.n	802dea0 <__ssputs_r+0x84>
 802de2e:	898a      	ldrh	r2, [r1, #12]
 802de30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802de34:	d032      	beq.n	802de9c <__ssputs_r+0x80>
 802de36:	6825      	ldr	r5, [r4, #0]
 802de38:	6909      	ldr	r1, [r1, #16]
 802de3a:	eba5 0901 	sub.w	r9, r5, r1
 802de3e:	6965      	ldr	r5, [r4, #20]
 802de40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802de44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802de48:	3301      	adds	r3, #1
 802de4a:	444b      	add	r3, r9
 802de4c:	106d      	asrs	r5, r5, #1
 802de4e:	429d      	cmp	r5, r3
 802de50:	bf38      	it	cc
 802de52:	461d      	movcc	r5, r3
 802de54:	0553      	lsls	r3, r2, #21
 802de56:	d531      	bpl.n	802debc <__ssputs_r+0xa0>
 802de58:	4629      	mov	r1, r5
 802de5a:	f7ff fbc1 	bl	802d5e0 <_malloc_r>
 802de5e:	4606      	mov	r6, r0
 802de60:	b950      	cbnz	r0, 802de78 <__ssputs_r+0x5c>
 802de62:	230c      	movs	r3, #12
 802de64:	f8ca 3000 	str.w	r3, [sl]
 802de68:	89a3      	ldrh	r3, [r4, #12]
 802de6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802de6e:	81a3      	strh	r3, [r4, #12]
 802de70:	f04f 30ff 	mov.w	r0, #4294967295
 802de74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802de78:	6921      	ldr	r1, [r4, #16]
 802de7a:	464a      	mov	r2, r9
 802de7c:	f000 fcb2 	bl	802e7e4 <memcpy>
 802de80:	89a3      	ldrh	r3, [r4, #12]
 802de82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802de86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802de8a:	81a3      	strh	r3, [r4, #12]
 802de8c:	6126      	str	r6, [r4, #16]
 802de8e:	6165      	str	r5, [r4, #20]
 802de90:	444e      	add	r6, r9
 802de92:	eba5 0509 	sub.w	r5, r5, r9
 802de96:	6026      	str	r6, [r4, #0]
 802de98:	60a5      	str	r5, [r4, #8]
 802de9a:	463e      	mov	r6, r7
 802de9c:	42be      	cmp	r6, r7
 802de9e:	d900      	bls.n	802dea2 <__ssputs_r+0x86>
 802dea0:	463e      	mov	r6, r7
 802dea2:	6820      	ldr	r0, [r4, #0]
 802dea4:	4632      	mov	r2, r6
 802dea6:	4641      	mov	r1, r8
 802dea8:	f000 fcaa 	bl	802e800 <memmove>
 802deac:	68a3      	ldr	r3, [r4, #8]
 802deae:	1b9b      	subs	r3, r3, r6
 802deb0:	60a3      	str	r3, [r4, #8]
 802deb2:	6823      	ldr	r3, [r4, #0]
 802deb4:	4433      	add	r3, r6
 802deb6:	6023      	str	r3, [r4, #0]
 802deb8:	2000      	movs	r0, #0
 802deba:	e7db      	b.n	802de74 <__ssputs_r+0x58>
 802debc:	462a      	mov	r2, r5
 802debe:	f000 fcb9 	bl	802e834 <_realloc_r>
 802dec2:	4606      	mov	r6, r0
 802dec4:	2800      	cmp	r0, #0
 802dec6:	d1e1      	bne.n	802de8c <__ssputs_r+0x70>
 802dec8:	6921      	ldr	r1, [r4, #16]
 802deca:	4650      	mov	r0, sl
 802decc:	f7ff fb1c 	bl	802d508 <_free_r>
 802ded0:	e7c7      	b.n	802de62 <__ssputs_r+0x46>
	...

0802ded4 <_svfiprintf_r>:
 802ded4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ded8:	4698      	mov	r8, r3
 802deda:	898b      	ldrh	r3, [r1, #12]
 802dedc:	061b      	lsls	r3, r3, #24
 802dede:	b09d      	sub	sp, #116	; 0x74
 802dee0:	4607      	mov	r7, r0
 802dee2:	460d      	mov	r5, r1
 802dee4:	4614      	mov	r4, r2
 802dee6:	d50e      	bpl.n	802df06 <_svfiprintf_r+0x32>
 802dee8:	690b      	ldr	r3, [r1, #16]
 802deea:	b963      	cbnz	r3, 802df06 <_svfiprintf_r+0x32>
 802deec:	2140      	movs	r1, #64	; 0x40
 802deee:	f7ff fb77 	bl	802d5e0 <_malloc_r>
 802def2:	6028      	str	r0, [r5, #0]
 802def4:	6128      	str	r0, [r5, #16]
 802def6:	b920      	cbnz	r0, 802df02 <_svfiprintf_r+0x2e>
 802def8:	230c      	movs	r3, #12
 802defa:	603b      	str	r3, [r7, #0]
 802defc:	f04f 30ff 	mov.w	r0, #4294967295
 802df00:	e0d1      	b.n	802e0a6 <_svfiprintf_r+0x1d2>
 802df02:	2340      	movs	r3, #64	; 0x40
 802df04:	616b      	str	r3, [r5, #20]
 802df06:	2300      	movs	r3, #0
 802df08:	9309      	str	r3, [sp, #36]	; 0x24
 802df0a:	2320      	movs	r3, #32
 802df0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802df10:	f8cd 800c 	str.w	r8, [sp, #12]
 802df14:	2330      	movs	r3, #48	; 0x30
 802df16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e0c0 <_svfiprintf_r+0x1ec>
 802df1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802df1e:	f04f 0901 	mov.w	r9, #1
 802df22:	4623      	mov	r3, r4
 802df24:	469a      	mov	sl, r3
 802df26:	f813 2b01 	ldrb.w	r2, [r3], #1
 802df2a:	b10a      	cbz	r2, 802df30 <_svfiprintf_r+0x5c>
 802df2c:	2a25      	cmp	r2, #37	; 0x25
 802df2e:	d1f9      	bne.n	802df24 <_svfiprintf_r+0x50>
 802df30:	ebba 0b04 	subs.w	fp, sl, r4
 802df34:	d00b      	beq.n	802df4e <_svfiprintf_r+0x7a>
 802df36:	465b      	mov	r3, fp
 802df38:	4622      	mov	r2, r4
 802df3a:	4629      	mov	r1, r5
 802df3c:	4638      	mov	r0, r7
 802df3e:	f7ff ff6d 	bl	802de1c <__ssputs_r>
 802df42:	3001      	adds	r0, #1
 802df44:	f000 80aa 	beq.w	802e09c <_svfiprintf_r+0x1c8>
 802df48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802df4a:	445a      	add	r2, fp
 802df4c:	9209      	str	r2, [sp, #36]	; 0x24
 802df4e:	f89a 3000 	ldrb.w	r3, [sl]
 802df52:	2b00      	cmp	r3, #0
 802df54:	f000 80a2 	beq.w	802e09c <_svfiprintf_r+0x1c8>
 802df58:	2300      	movs	r3, #0
 802df5a:	f04f 32ff 	mov.w	r2, #4294967295
 802df5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802df62:	f10a 0a01 	add.w	sl, sl, #1
 802df66:	9304      	str	r3, [sp, #16]
 802df68:	9307      	str	r3, [sp, #28]
 802df6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802df6e:	931a      	str	r3, [sp, #104]	; 0x68
 802df70:	4654      	mov	r4, sl
 802df72:	2205      	movs	r2, #5
 802df74:	f814 1b01 	ldrb.w	r1, [r4], #1
 802df78:	4851      	ldr	r0, [pc, #324]	; (802e0c0 <_svfiprintf_r+0x1ec>)
 802df7a:	f7f2 f939 	bl	80201f0 <memchr>
 802df7e:	9a04      	ldr	r2, [sp, #16]
 802df80:	b9d8      	cbnz	r0, 802dfba <_svfiprintf_r+0xe6>
 802df82:	06d0      	lsls	r0, r2, #27
 802df84:	bf44      	itt	mi
 802df86:	2320      	movmi	r3, #32
 802df88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802df8c:	0711      	lsls	r1, r2, #28
 802df8e:	bf44      	itt	mi
 802df90:	232b      	movmi	r3, #43	; 0x2b
 802df92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802df96:	f89a 3000 	ldrb.w	r3, [sl]
 802df9a:	2b2a      	cmp	r3, #42	; 0x2a
 802df9c:	d015      	beq.n	802dfca <_svfiprintf_r+0xf6>
 802df9e:	9a07      	ldr	r2, [sp, #28]
 802dfa0:	4654      	mov	r4, sl
 802dfa2:	2000      	movs	r0, #0
 802dfa4:	f04f 0c0a 	mov.w	ip, #10
 802dfa8:	4621      	mov	r1, r4
 802dfaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 802dfae:	3b30      	subs	r3, #48	; 0x30
 802dfb0:	2b09      	cmp	r3, #9
 802dfb2:	d94e      	bls.n	802e052 <_svfiprintf_r+0x17e>
 802dfb4:	b1b0      	cbz	r0, 802dfe4 <_svfiprintf_r+0x110>
 802dfb6:	9207      	str	r2, [sp, #28]
 802dfb8:	e014      	b.n	802dfe4 <_svfiprintf_r+0x110>
 802dfba:	eba0 0308 	sub.w	r3, r0, r8
 802dfbe:	fa09 f303 	lsl.w	r3, r9, r3
 802dfc2:	4313      	orrs	r3, r2
 802dfc4:	9304      	str	r3, [sp, #16]
 802dfc6:	46a2      	mov	sl, r4
 802dfc8:	e7d2      	b.n	802df70 <_svfiprintf_r+0x9c>
 802dfca:	9b03      	ldr	r3, [sp, #12]
 802dfcc:	1d19      	adds	r1, r3, #4
 802dfce:	681b      	ldr	r3, [r3, #0]
 802dfd0:	9103      	str	r1, [sp, #12]
 802dfd2:	2b00      	cmp	r3, #0
 802dfd4:	bfbb      	ittet	lt
 802dfd6:	425b      	neglt	r3, r3
 802dfd8:	f042 0202 	orrlt.w	r2, r2, #2
 802dfdc:	9307      	strge	r3, [sp, #28]
 802dfde:	9307      	strlt	r3, [sp, #28]
 802dfe0:	bfb8      	it	lt
 802dfe2:	9204      	strlt	r2, [sp, #16]
 802dfe4:	7823      	ldrb	r3, [r4, #0]
 802dfe6:	2b2e      	cmp	r3, #46	; 0x2e
 802dfe8:	d10c      	bne.n	802e004 <_svfiprintf_r+0x130>
 802dfea:	7863      	ldrb	r3, [r4, #1]
 802dfec:	2b2a      	cmp	r3, #42	; 0x2a
 802dfee:	d135      	bne.n	802e05c <_svfiprintf_r+0x188>
 802dff0:	9b03      	ldr	r3, [sp, #12]
 802dff2:	1d1a      	adds	r2, r3, #4
 802dff4:	681b      	ldr	r3, [r3, #0]
 802dff6:	9203      	str	r2, [sp, #12]
 802dff8:	2b00      	cmp	r3, #0
 802dffa:	bfb8      	it	lt
 802dffc:	f04f 33ff 	movlt.w	r3, #4294967295
 802e000:	3402      	adds	r4, #2
 802e002:	9305      	str	r3, [sp, #20]
 802e004:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e0d0 <_svfiprintf_r+0x1fc>
 802e008:	7821      	ldrb	r1, [r4, #0]
 802e00a:	2203      	movs	r2, #3
 802e00c:	4650      	mov	r0, sl
 802e00e:	f7f2 f8ef 	bl	80201f0 <memchr>
 802e012:	b140      	cbz	r0, 802e026 <_svfiprintf_r+0x152>
 802e014:	2340      	movs	r3, #64	; 0x40
 802e016:	eba0 000a 	sub.w	r0, r0, sl
 802e01a:	fa03 f000 	lsl.w	r0, r3, r0
 802e01e:	9b04      	ldr	r3, [sp, #16]
 802e020:	4303      	orrs	r3, r0
 802e022:	3401      	adds	r4, #1
 802e024:	9304      	str	r3, [sp, #16]
 802e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e02a:	4826      	ldr	r0, [pc, #152]	; (802e0c4 <_svfiprintf_r+0x1f0>)
 802e02c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e030:	2206      	movs	r2, #6
 802e032:	f7f2 f8dd 	bl	80201f0 <memchr>
 802e036:	2800      	cmp	r0, #0
 802e038:	d038      	beq.n	802e0ac <_svfiprintf_r+0x1d8>
 802e03a:	4b23      	ldr	r3, [pc, #140]	; (802e0c8 <_svfiprintf_r+0x1f4>)
 802e03c:	bb1b      	cbnz	r3, 802e086 <_svfiprintf_r+0x1b2>
 802e03e:	9b03      	ldr	r3, [sp, #12]
 802e040:	3307      	adds	r3, #7
 802e042:	f023 0307 	bic.w	r3, r3, #7
 802e046:	3308      	adds	r3, #8
 802e048:	9303      	str	r3, [sp, #12]
 802e04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e04c:	4433      	add	r3, r6
 802e04e:	9309      	str	r3, [sp, #36]	; 0x24
 802e050:	e767      	b.n	802df22 <_svfiprintf_r+0x4e>
 802e052:	fb0c 3202 	mla	r2, ip, r2, r3
 802e056:	460c      	mov	r4, r1
 802e058:	2001      	movs	r0, #1
 802e05a:	e7a5      	b.n	802dfa8 <_svfiprintf_r+0xd4>
 802e05c:	2300      	movs	r3, #0
 802e05e:	3401      	adds	r4, #1
 802e060:	9305      	str	r3, [sp, #20]
 802e062:	4619      	mov	r1, r3
 802e064:	f04f 0c0a 	mov.w	ip, #10
 802e068:	4620      	mov	r0, r4
 802e06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e06e:	3a30      	subs	r2, #48	; 0x30
 802e070:	2a09      	cmp	r2, #9
 802e072:	d903      	bls.n	802e07c <_svfiprintf_r+0x1a8>
 802e074:	2b00      	cmp	r3, #0
 802e076:	d0c5      	beq.n	802e004 <_svfiprintf_r+0x130>
 802e078:	9105      	str	r1, [sp, #20]
 802e07a:	e7c3      	b.n	802e004 <_svfiprintf_r+0x130>
 802e07c:	fb0c 2101 	mla	r1, ip, r1, r2
 802e080:	4604      	mov	r4, r0
 802e082:	2301      	movs	r3, #1
 802e084:	e7f0      	b.n	802e068 <_svfiprintf_r+0x194>
 802e086:	ab03      	add	r3, sp, #12
 802e088:	9300      	str	r3, [sp, #0]
 802e08a:	462a      	mov	r2, r5
 802e08c:	4b0f      	ldr	r3, [pc, #60]	; (802e0cc <_svfiprintf_r+0x1f8>)
 802e08e:	a904      	add	r1, sp, #16
 802e090:	4638      	mov	r0, r7
 802e092:	f3af 8000 	nop.w
 802e096:	1c42      	adds	r2, r0, #1
 802e098:	4606      	mov	r6, r0
 802e09a:	d1d6      	bne.n	802e04a <_svfiprintf_r+0x176>
 802e09c:	89ab      	ldrh	r3, [r5, #12]
 802e09e:	065b      	lsls	r3, r3, #25
 802e0a0:	f53f af2c 	bmi.w	802defc <_svfiprintf_r+0x28>
 802e0a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e0a6:	b01d      	add	sp, #116	; 0x74
 802e0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e0ac:	ab03      	add	r3, sp, #12
 802e0ae:	9300      	str	r3, [sp, #0]
 802e0b0:	462a      	mov	r2, r5
 802e0b2:	4b06      	ldr	r3, [pc, #24]	; (802e0cc <_svfiprintf_r+0x1f8>)
 802e0b4:	a904      	add	r1, sp, #16
 802e0b6:	4638      	mov	r0, r7
 802e0b8:	f000 f9d4 	bl	802e464 <_printf_i>
 802e0bc:	e7eb      	b.n	802e096 <_svfiprintf_r+0x1c2>
 802e0be:	bf00      	nop
 802e0c0:	08030d50 	.word	0x08030d50
 802e0c4:	08030d5a 	.word	0x08030d5a
 802e0c8:	00000000 	.word	0x00000000
 802e0cc:	0802de1d 	.word	0x0802de1d
 802e0d0:	08030d56 	.word	0x08030d56

0802e0d4 <__sfputc_r>:
 802e0d4:	6893      	ldr	r3, [r2, #8]
 802e0d6:	3b01      	subs	r3, #1
 802e0d8:	2b00      	cmp	r3, #0
 802e0da:	b410      	push	{r4}
 802e0dc:	6093      	str	r3, [r2, #8]
 802e0de:	da08      	bge.n	802e0f2 <__sfputc_r+0x1e>
 802e0e0:	6994      	ldr	r4, [r2, #24]
 802e0e2:	42a3      	cmp	r3, r4
 802e0e4:	db01      	blt.n	802e0ea <__sfputc_r+0x16>
 802e0e6:	290a      	cmp	r1, #10
 802e0e8:	d103      	bne.n	802e0f2 <__sfputc_r+0x1e>
 802e0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e0ee:	f7ff bba9 	b.w	802d844 <__swbuf_r>
 802e0f2:	6813      	ldr	r3, [r2, #0]
 802e0f4:	1c58      	adds	r0, r3, #1
 802e0f6:	6010      	str	r0, [r2, #0]
 802e0f8:	7019      	strb	r1, [r3, #0]
 802e0fa:	4608      	mov	r0, r1
 802e0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e100:	4770      	bx	lr

0802e102 <__sfputs_r>:
 802e102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e104:	4606      	mov	r6, r0
 802e106:	460f      	mov	r7, r1
 802e108:	4614      	mov	r4, r2
 802e10a:	18d5      	adds	r5, r2, r3
 802e10c:	42ac      	cmp	r4, r5
 802e10e:	d101      	bne.n	802e114 <__sfputs_r+0x12>
 802e110:	2000      	movs	r0, #0
 802e112:	e007      	b.n	802e124 <__sfputs_r+0x22>
 802e114:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e118:	463a      	mov	r2, r7
 802e11a:	4630      	mov	r0, r6
 802e11c:	f7ff ffda 	bl	802e0d4 <__sfputc_r>
 802e120:	1c43      	adds	r3, r0, #1
 802e122:	d1f3      	bne.n	802e10c <__sfputs_r+0xa>
 802e124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e128 <_vfiprintf_r>:
 802e128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e12c:	460d      	mov	r5, r1
 802e12e:	b09d      	sub	sp, #116	; 0x74
 802e130:	4614      	mov	r4, r2
 802e132:	4698      	mov	r8, r3
 802e134:	4606      	mov	r6, r0
 802e136:	b118      	cbz	r0, 802e140 <_vfiprintf_r+0x18>
 802e138:	6983      	ldr	r3, [r0, #24]
 802e13a:	b90b      	cbnz	r3, 802e140 <_vfiprintf_r+0x18>
 802e13c:	f7ff fd5c 	bl	802dbf8 <__sinit>
 802e140:	4b89      	ldr	r3, [pc, #548]	; (802e368 <_vfiprintf_r+0x240>)
 802e142:	429d      	cmp	r5, r3
 802e144:	d11b      	bne.n	802e17e <_vfiprintf_r+0x56>
 802e146:	6875      	ldr	r5, [r6, #4]
 802e148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e14a:	07d9      	lsls	r1, r3, #31
 802e14c:	d405      	bmi.n	802e15a <_vfiprintf_r+0x32>
 802e14e:	89ab      	ldrh	r3, [r5, #12]
 802e150:	059a      	lsls	r2, r3, #22
 802e152:	d402      	bmi.n	802e15a <_vfiprintf_r+0x32>
 802e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e156:	f7ff fded 	bl	802dd34 <__retarget_lock_acquire_recursive>
 802e15a:	89ab      	ldrh	r3, [r5, #12]
 802e15c:	071b      	lsls	r3, r3, #28
 802e15e:	d501      	bpl.n	802e164 <_vfiprintf_r+0x3c>
 802e160:	692b      	ldr	r3, [r5, #16]
 802e162:	b9eb      	cbnz	r3, 802e1a0 <_vfiprintf_r+0x78>
 802e164:	4629      	mov	r1, r5
 802e166:	4630      	mov	r0, r6
 802e168:	f7ff fbbe 	bl	802d8e8 <__swsetup_r>
 802e16c:	b1c0      	cbz	r0, 802e1a0 <_vfiprintf_r+0x78>
 802e16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e170:	07dc      	lsls	r4, r3, #31
 802e172:	d50e      	bpl.n	802e192 <_vfiprintf_r+0x6a>
 802e174:	f04f 30ff 	mov.w	r0, #4294967295
 802e178:	b01d      	add	sp, #116	; 0x74
 802e17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e17e:	4b7b      	ldr	r3, [pc, #492]	; (802e36c <_vfiprintf_r+0x244>)
 802e180:	429d      	cmp	r5, r3
 802e182:	d101      	bne.n	802e188 <_vfiprintf_r+0x60>
 802e184:	68b5      	ldr	r5, [r6, #8]
 802e186:	e7df      	b.n	802e148 <_vfiprintf_r+0x20>
 802e188:	4b79      	ldr	r3, [pc, #484]	; (802e370 <_vfiprintf_r+0x248>)
 802e18a:	429d      	cmp	r5, r3
 802e18c:	bf08      	it	eq
 802e18e:	68f5      	ldreq	r5, [r6, #12]
 802e190:	e7da      	b.n	802e148 <_vfiprintf_r+0x20>
 802e192:	89ab      	ldrh	r3, [r5, #12]
 802e194:	0598      	lsls	r0, r3, #22
 802e196:	d4ed      	bmi.n	802e174 <_vfiprintf_r+0x4c>
 802e198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e19a:	f7ff fdcc 	bl	802dd36 <__retarget_lock_release_recursive>
 802e19e:	e7e9      	b.n	802e174 <_vfiprintf_r+0x4c>
 802e1a0:	2300      	movs	r3, #0
 802e1a2:	9309      	str	r3, [sp, #36]	; 0x24
 802e1a4:	2320      	movs	r3, #32
 802e1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 802e1ae:	2330      	movs	r3, #48	; 0x30
 802e1b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e374 <_vfiprintf_r+0x24c>
 802e1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e1b8:	f04f 0901 	mov.w	r9, #1
 802e1bc:	4623      	mov	r3, r4
 802e1be:	469a      	mov	sl, r3
 802e1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e1c4:	b10a      	cbz	r2, 802e1ca <_vfiprintf_r+0xa2>
 802e1c6:	2a25      	cmp	r2, #37	; 0x25
 802e1c8:	d1f9      	bne.n	802e1be <_vfiprintf_r+0x96>
 802e1ca:	ebba 0b04 	subs.w	fp, sl, r4
 802e1ce:	d00b      	beq.n	802e1e8 <_vfiprintf_r+0xc0>
 802e1d0:	465b      	mov	r3, fp
 802e1d2:	4622      	mov	r2, r4
 802e1d4:	4629      	mov	r1, r5
 802e1d6:	4630      	mov	r0, r6
 802e1d8:	f7ff ff93 	bl	802e102 <__sfputs_r>
 802e1dc:	3001      	adds	r0, #1
 802e1de:	f000 80aa 	beq.w	802e336 <_vfiprintf_r+0x20e>
 802e1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e1e4:	445a      	add	r2, fp
 802e1e6:	9209      	str	r2, [sp, #36]	; 0x24
 802e1e8:	f89a 3000 	ldrb.w	r3, [sl]
 802e1ec:	2b00      	cmp	r3, #0
 802e1ee:	f000 80a2 	beq.w	802e336 <_vfiprintf_r+0x20e>
 802e1f2:	2300      	movs	r3, #0
 802e1f4:	f04f 32ff 	mov.w	r2, #4294967295
 802e1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e1fc:	f10a 0a01 	add.w	sl, sl, #1
 802e200:	9304      	str	r3, [sp, #16]
 802e202:	9307      	str	r3, [sp, #28]
 802e204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e208:	931a      	str	r3, [sp, #104]	; 0x68
 802e20a:	4654      	mov	r4, sl
 802e20c:	2205      	movs	r2, #5
 802e20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e212:	4858      	ldr	r0, [pc, #352]	; (802e374 <_vfiprintf_r+0x24c>)
 802e214:	f7f1 ffec 	bl	80201f0 <memchr>
 802e218:	9a04      	ldr	r2, [sp, #16]
 802e21a:	b9d8      	cbnz	r0, 802e254 <_vfiprintf_r+0x12c>
 802e21c:	06d1      	lsls	r1, r2, #27
 802e21e:	bf44      	itt	mi
 802e220:	2320      	movmi	r3, #32
 802e222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e226:	0713      	lsls	r3, r2, #28
 802e228:	bf44      	itt	mi
 802e22a:	232b      	movmi	r3, #43	; 0x2b
 802e22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e230:	f89a 3000 	ldrb.w	r3, [sl]
 802e234:	2b2a      	cmp	r3, #42	; 0x2a
 802e236:	d015      	beq.n	802e264 <_vfiprintf_r+0x13c>
 802e238:	9a07      	ldr	r2, [sp, #28]
 802e23a:	4654      	mov	r4, sl
 802e23c:	2000      	movs	r0, #0
 802e23e:	f04f 0c0a 	mov.w	ip, #10
 802e242:	4621      	mov	r1, r4
 802e244:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e248:	3b30      	subs	r3, #48	; 0x30
 802e24a:	2b09      	cmp	r3, #9
 802e24c:	d94e      	bls.n	802e2ec <_vfiprintf_r+0x1c4>
 802e24e:	b1b0      	cbz	r0, 802e27e <_vfiprintf_r+0x156>
 802e250:	9207      	str	r2, [sp, #28]
 802e252:	e014      	b.n	802e27e <_vfiprintf_r+0x156>
 802e254:	eba0 0308 	sub.w	r3, r0, r8
 802e258:	fa09 f303 	lsl.w	r3, r9, r3
 802e25c:	4313      	orrs	r3, r2
 802e25e:	9304      	str	r3, [sp, #16]
 802e260:	46a2      	mov	sl, r4
 802e262:	e7d2      	b.n	802e20a <_vfiprintf_r+0xe2>
 802e264:	9b03      	ldr	r3, [sp, #12]
 802e266:	1d19      	adds	r1, r3, #4
 802e268:	681b      	ldr	r3, [r3, #0]
 802e26a:	9103      	str	r1, [sp, #12]
 802e26c:	2b00      	cmp	r3, #0
 802e26e:	bfbb      	ittet	lt
 802e270:	425b      	neglt	r3, r3
 802e272:	f042 0202 	orrlt.w	r2, r2, #2
 802e276:	9307      	strge	r3, [sp, #28]
 802e278:	9307      	strlt	r3, [sp, #28]
 802e27a:	bfb8      	it	lt
 802e27c:	9204      	strlt	r2, [sp, #16]
 802e27e:	7823      	ldrb	r3, [r4, #0]
 802e280:	2b2e      	cmp	r3, #46	; 0x2e
 802e282:	d10c      	bne.n	802e29e <_vfiprintf_r+0x176>
 802e284:	7863      	ldrb	r3, [r4, #1]
 802e286:	2b2a      	cmp	r3, #42	; 0x2a
 802e288:	d135      	bne.n	802e2f6 <_vfiprintf_r+0x1ce>
 802e28a:	9b03      	ldr	r3, [sp, #12]
 802e28c:	1d1a      	adds	r2, r3, #4
 802e28e:	681b      	ldr	r3, [r3, #0]
 802e290:	9203      	str	r2, [sp, #12]
 802e292:	2b00      	cmp	r3, #0
 802e294:	bfb8      	it	lt
 802e296:	f04f 33ff 	movlt.w	r3, #4294967295
 802e29a:	3402      	adds	r4, #2
 802e29c:	9305      	str	r3, [sp, #20]
 802e29e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e384 <_vfiprintf_r+0x25c>
 802e2a2:	7821      	ldrb	r1, [r4, #0]
 802e2a4:	2203      	movs	r2, #3
 802e2a6:	4650      	mov	r0, sl
 802e2a8:	f7f1 ffa2 	bl	80201f0 <memchr>
 802e2ac:	b140      	cbz	r0, 802e2c0 <_vfiprintf_r+0x198>
 802e2ae:	2340      	movs	r3, #64	; 0x40
 802e2b0:	eba0 000a 	sub.w	r0, r0, sl
 802e2b4:	fa03 f000 	lsl.w	r0, r3, r0
 802e2b8:	9b04      	ldr	r3, [sp, #16]
 802e2ba:	4303      	orrs	r3, r0
 802e2bc:	3401      	adds	r4, #1
 802e2be:	9304      	str	r3, [sp, #16]
 802e2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e2c4:	482c      	ldr	r0, [pc, #176]	; (802e378 <_vfiprintf_r+0x250>)
 802e2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e2ca:	2206      	movs	r2, #6
 802e2cc:	f7f1 ff90 	bl	80201f0 <memchr>
 802e2d0:	2800      	cmp	r0, #0
 802e2d2:	d03f      	beq.n	802e354 <_vfiprintf_r+0x22c>
 802e2d4:	4b29      	ldr	r3, [pc, #164]	; (802e37c <_vfiprintf_r+0x254>)
 802e2d6:	bb1b      	cbnz	r3, 802e320 <_vfiprintf_r+0x1f8>
 802e2d8:	9b03      	ldr	r3, [sp, #12]
 802e2da:	3307      	adds	r3, #7
 802e2dc:	f023 0307 	bic.w	r3, r3, #7
 802e2e0:	3308      	adds	r3, #8
 802e2e2:	9303      	str	r3, [sp, #12]
 802e2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e2e6:	443b      	add	r3, r7
 802e2e8:	9309      	str	r3, [sp, #36]	; 0x24
 802e2ea:	e767      	b.n	802e1bc <_vfiprintf_r+0x94>
 802e2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 802e2f0:	460c      	mov	r4, r1
 802e2f2:	2001      	movs	r0, #1
 802e2f4:	e7a5      	b.n	802e242 <_vfiprintf_r+0x11a>
 802e2f6:	2300      	movs	r3, #0
 802e2f8:	3401      	adds	r4, #1
 802e2fa:	9305      	str	r3, [sp, #20]
 802e2fc:	4619      	mov	r1, r3
 802e2fe:	f04f 0c0a 	mov.w	ip, #10
 802e302:	4620      	mov	r0, r4
 802e304:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e308:	3a30      	subs	r2, #48	; 0x30
 802e30a:	2a09      	cmp	r2, #9
 802e30c:	d903      	bls.n	802e316 <_vfiprintf_r+0x1ee>
 802e30e:	2b00      	cmp	r3, #0
 802e310:	d0c5      	beq.n	802e29e <_vfiprintf_r+0x176>
 802e312:	9105      	str	r1, [sp, #20]
 802e314:	e7c3      	b.n	802e29e <_vfiprintf_r+0x176>
 802e316:	fb0c 2101 	mla	r1, ip, r1, r2
 802e31a:	4604      	mov	r4, r0
 802e31c:	2301      	movs	r3, #1
 802e31e:	e7f0      	b.n	802e302 <_vfiprintf_r+0x1da>
 802e320:	ab03      	add	r3, sp, #12
 802e322:	9300      	str	r3, [sp, #0]
 802e324:	462a      	mov	r2, r5
 802e326:	4b16      	ldr	r3, [pc, #88]	; (802e380 <_vfiprintf_r+0x258>)
 802e328:	a904      	add	r1, sp, #16
 802e32a:	4630      	mov	r0, r6
 802e32c:	f3af 8000 	nop.w
 802e330:	4607      	mov	r7, r0
 802e332:	1c78      	adds	r0, r7, #1
 802e334:	d1d6      	bne.n	802e2e4 <_vfiprintf_r+0x1bc>
 802e336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e338:	07d9      	lsls	r1, r3, #31
 802e33a:	d405      	bmi.n	802e348 <_vfiprintf_r+0x220>
 802e33c:	89ab      	ldrh	r3, [r5, #12]
 802e33e:	059a      	lsls	r2, r3, #22
 802e340:	d402      	bmi.n	802e348 <_vfiprintf_r+0x220>
 802e342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e344:	f7ff fcf7 	bl	802dd36 <__retarget_lock_release_recursive>
 802e348:	89ab      	ldrh	r3, [r5, #12]
 802e34a:	065b      	lsls	r3, r3, #25
 802e34c:	f53f af12 	bmi.w	802e174 <_vfiprintf_r+0x4c>
 802e350:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e352:	e711      	b.n	802e178 <_vfiprintf_r+0x50>
 802e354:	ab03      	add	r3, sp, #12
 802e356:	9300      	str	r3, [sp, #0]
 802e358:	462a      	mov	r2, r5
 802e35a:	4b09      	ldr	r3, [pc, #36]	; (802e380 <_vfiprintf_r+0x258>)
 802e35c:	a904      	add	r1, sp, #16
 802e35e:	4630      	mov	r0, r6
 802e360:	f000 f880 	bl	802e464 <_printf_i>
 802e364:	e7e4      	b.n	802e330 <_vfiprintf_r+0x208>
 802e366:	bf00      	nop
 802e368:	08030d10 	.word	0x08030d10
 802e36c:	08030d30 	.word	0x08030d30
 802e370:	08030cf0 	.word	0x08030cf0
 802e374:	08030d50 	.word	0x08030d50
 802e378:	08030d5a 	.word	0x08030d5a
 802e37c:	00000000 	.word	0x00000000
 802e380:	0802e103 	.word	0x0802e103
 802e384:	08030d56 	.word	0x08030d56

0802e388 <_printf_common>:
 802e388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e38c:	4616      	mov	r6, r2
 802e38e:	4699      	mov	r9, r3
 802e390:	688a      	ldr	r2, [r1, #8]
 802e392:	690b      	ldr	r3, [r1, #16]
 802e394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e398:	4293      	cmp	r3, r2
 802e39a:	bfb8      	it	lt
 802e39c:	4613      	movlt	r3, r2
 802e39e:	6033      	str	r3, [r6, #0]
 802e3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e3a4:	4607      	mov	r7, r0
 802e3a6:	460c      	mov	r4, r1
 802e3a8:	b10a      	cbz	r2, 802e3ae <_printf_common+0x26>
 802e3aa:	3301      	adds	r3, #1
 802e3ac:	6033      	str	r3, [r6, #0]
 802e3ae:	6823      	ldr	r3, [r4, #0]
 802e3b0:	0699      	lsls	r1, r3, #26
 802e3b2:	bf42      	ittt	mi
 802e3b4:	6833      	ldrmi	r3, [r6, #0]
 802e3b6:	3302      	addmi	r3, #2
 802e3b8:	6033      	strmi	r3, [r6, #0]
 802e3ba:	6825      	ldr	r5, [r4, #0]
 802e3bc:	f015 0506 	ands.w	r5, r5, #6
 802e3c0:	d106      	bne.n	802e3d0 <_printf_common+0x48>
 802e3c2:	f104 0a19 	add.w	sl, r4, #25
 802e3c6:	68e3      	ldr	r3, [r4, #12]
 802e3c8:	6832      	ldr	r2, [r6, #0]
 802e3ca:	1a9b      	subs	r3, r3, r2
 802e3cc:	42ab      	cmp	r3, r5
 802e3ce:	dc26      	bgt.n	802e41e <_printf_common+0x96>
 802e3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e3d4:	1e13      	subs	r3, r2, #0
 802e3d6:	6822      	ldr	r2, [r4, #0]
 802e3d8:	bf18      	it	ne
 802e3da:	2301      	movne	r3, #1
 802e3dc:	0692      	lsls	r2, r2, #26
 802e3de:	d42b      	bmi.n	802e438 <_printf_common+0xb0>
 802e3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e3e4:	4649      	mov	r1, r9
 802e3e6:	4638      	mov	r0, r7
 802e3e8:	47c0      	blx	r8
 802e3ea:	3001      	adds	r0, #1
 802e3ec:	d01e      	beq.n	802e42c <_printf_common+0xa4>
 802e3ee:	6823      	ldr	r3, [r4, #0]
 802e3f0:	68e5      	ldr	r5, [r4, #12]
 802e3f2:	6832      	ldr	r2, [r6, #0]
 802e3f4:	f003 0306 	and.w	r3, r3, #6
 802e3f8:	2b04      	cmp	r3, #4
 802e3fa:	bf08      	it	eq
 802e3fc:	1aad      	subeq	r5, r5, r2
 802e3fe:	68a3      	ldr	r3, [r4, #8]
 802e400:	6922      	ldr	r2, [r4, #16]
 802e402:	bf0c      	ite	eq
 802e404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e408:	2500      	movne	r5, #0
 802e40a:	4293      	cmp	r3, r2
 802e40c:	bfc4      	itt	gt
 802e40e:	1a9b      	subgt	r3, r3, r2
 802e410:	18ed      	addgt	r5, r5, r3
 802e412:	2600      	movs	r6, #0
 802e414:	341a      	adds	r4, #26
 802e416:	42b5      	cmp	r5, r6
 802e418:	d11a      	bne.n	802e450 <_printf_common+0xc8>
 802e41a:	2000      	movs	r0, #0
 802e41c:	e008      	b.n	802e430 <_printf_common+0xa8>
 802e41e:	2301      	movs	r3, #1
 802e420:	4652      	mov	r2, sl
 802e422:	4649      	mov	r1, r9
 802e424:	4638      	mov	r0, r7
 802e426:	47c0      	blx	r8
 802e428:	3001      	adds	r0, #1
 802e42a:	d103      	bne.n	802e434 <_printf_common+0xac>
 802e42c:	f04f 30ff 	mov.w	r0, #4294967295
 802e430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e434:	3501      	adds	r5, #1
 802e436:	e7c6      	b.n	802e3c6 <_printf_common+0x3e>
 802e438:	18e1      	adds	r1, r4, r3
 802e43a:	1c5a      	adds	r2, r3, #1
 802e43c:	2030      	movs	r0, #48	; 0x30
 802e43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e442:	4422      	add	r2, r4
 802e444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e44c:	3302      	adds	r3, #2
 802e44e:	e7c7      	b.n	802e3e0 <_printf_common+0x58>
 802e450:	2301      	movs	r3, #1
 802e452:	4622      	mov	r2, r4
 802e454:	4649      	mov	r1, r9
 802e456:	4638      	mov	r0, r7
 802e458:	47c0      	blx	r8
 802e45a:	3001      	adds	r0, #1
 802e45c:	d0e6      	beq.n	802e42c <_printf_common+0xa4>
 802e45e:	3601      	adds	r6, #1
 802e460:	e7d9      	b.n	802e416 <_printf_common+0x8e>
	...

0802e464 <_printf_i>:
 802e464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e468:	7e0f      	ldrb	r7, [r1, #24]
 802e46a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e46c:	2f78      	cmp	r7, #120	; 0x78
 802e46e:	4691      	mov	r9, r2
 802e470:	4680      	mov	r8, r0
 802e472:	460c      	mov	r4, r1
 802e474:	469a      	mov	sl, r3
 802e476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e47a:	d807      	bhi.n	802e48c <_printf_i+0x28>
 802e47c:	2f62      	cmp	r7, #98	; 0x62
 802e47e:	d80a      	bhi.n	802e496 <_printf_i+0x32>
 802e480:	2f00      	cmp	r7, #0
 802e482:	f000 80d8 	beq.w	802e636 <_printf_i+0x1d2>
 802e486:	2f58      	cmp	r7, #88	; 0x58
 802e488:	f000 80a3 	beq.w	802e5d2 <_printf_i+0x16e>
 802e48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e494:	e03a      	b.n	802e50c <_printf_i+0xa8>
 802e496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e49a:	2b15      	cmp	r3, #21
 802e49c:	d8f6      	bhi.n	802e48c <_printf_i+0x28>
 802e49e:	a101      	add	r1, pc, #4	; (adr r1, 802e4a4 <_printf_i+0x40>)
 802e4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e4a4:	0802e4fd 	.word	0x0802e4fd
 802e4a8:	0802e511 	.word	0x0802e511
 802e4ac:	0802e48d 	.word	0x0802e48d
 802e4b0:	0802e48d 	.word	0x0802e48d
 802e4b4:	0802e48d 	.word	0x0802e48d
 802e4b8:	0802e48d 	.word	0x0802e48d
 802e4bc:	0802e511 	.word	0x0802e511
 802e4c0:	0802e48d 	.word	0x0802e48d
 802e4c4:	0802e48d 	.word	0x0802e48d
 802e4c8:	0802e48d 	.word	0x0802e48d
 802e4cc:	0802e48d 	.word	0x0802e48d
 802e4d0:	0802e61d 	.word	0x0802e61d
 802e4d4:	0802e541 	.word	0x0802e541
 802e4d8:	0802e5ff 	.word	0x0802e5ff
 802e4dc:	0802e48d 	.word	0x0802e48d
 802e4e0:	0802e48d 	.word	0x0802e48d
 802e4e4:	0802e63f 	.word	0x0802e63f
 802e4e8:	0802e48d 	.word	0x0802e48d
 802e4ec:	0802e541 	.word	0x0802e541
 802e4f0:	0802e48d 	.word	0x0802e48d
 802e4f4:	0802e48d 	.word	0x0802e48d
 802e4f8:	0802e607 	.word	0x0802e607
 802e4fc:	682b      	ldr	r3, [r5, #0]
 802e4fe:	1d1a      	adds	r2, r3, #4
 802e500:	681b      	ldr	r3, [r3, #0]
 802e502:	602a      	str	r2, [r5, #0]
 802e504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e50c:	2301      	movs	r3, #1
 802e50e:	e0a3      	b.n	802e658 <_printf_i+0x1f4>
 802e510:	6820      	ldr	r0, [r4, #0]
 802e512:	6829      	ldr	r1, [r5, #0]
 802e514:	0606      	lsls	r6, r0, #24
 802e516:	f101 0304 	add.w	r3, r1, #4
 802e51a:	d50a      	bpl.n	802e532 <_printf_i+0xce>
 802e51c:	680e      	ldr	r6, [r1, #0]
 802e51e:	602b      	str	r3, [r5, #0]
 802e520:	2e00      	cmp	r6, #0
 802e522:	da03      	bge.n	802e52c <_printf_i+0xc8>
 802e524:	232d      	movs	r3, #45	; 0x2d
 802e526:	4276      	negs	r6, r6
 802e528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e52c:	485e      	ldr	r0, [pc, #376]	; (802e6a8 <_printf_i+0x244>)
 802e52e:	230a      	movs	r3, #10
 802e530:	e019      	b.n	802e566 <_printf_i+0x102>
 802e532:	680e      	ldr	r6, [r1, #0]
 802e534:	602b      	str	r3, [r5, #0]
 802e536:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e53a:	bf18      	it	ne
 802e53c:	b236      	sxthne	r6, r6
 802e53e:	e7ef      	b.n	802e520 <_printf_i+0xbc>
 802e540:	682b      	ldr	r3, [r5, #0]
 802e542:	6820      	ldr	r0, [r4, #0]
 802e544:	1d19      	adds	r1, r3, #4
 802e546:	6029      	str	r1, [r5, #0]
 802e548:	0601      	lsls	r1, r0, #24
 802e54a:	d501      	bpl.n	802e550 <_printf_i+0xec>
 802e54c:	681e      	ldr	r6, [r3, #0]
 802e54e:	e002      	b.n	802e556 <_printf_i+0xf2>
 802e550:	0646      	lsls	r6, r0, #25
 802e552:	d5fb      	bpl.n	802e54c <_printf_i+0xe8>
 802e554:	881e      	ldrh	r6, [r3, #0]
 802e556:	4854      	ldr	r0, [pc, #336]	; (802e6a8 <_printf_i+0x244>)
 802e558:	2f6f      	cmp	r7, #111	; 0x6f
 802e55a:	bf0c      	ite	eq
 802e55c:	2308      	moveq	r3, #8
 802e55e:	230a      	movne	r3, #10
 802e560:	2100      	movs	r1, #0
 802e562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e566:	6865      	ldr	r5, [r4, #4]
 802e568:	60a5      	str	r5, [r4, #8]
 802e56a:	2d00      	cmp	r5, #0
 802e56c:	bfa2      	ittt	ge
 802e56e:	6821      	ldrge	r1, [r4, #0]
 802e570:	f021 0104 	bicge.w	r1, r1, #4
 802e574:	6021      	strge	r1, [r4, #0]
 802e576:	b90e      	cbnz	r6, 802e57c <_printf_i+0x118>
 802e578:	2d00      	cmp	r5, #0
 802e57a:	d04d      	beq.n	802e618 <_printf_i+0x1b4>
 802e57c:	4615      	mov	r5, r2
 802e57e:	fbb6 f1f3 	udiv	r1, r6, r3
 802e582:	fb03 6711 	mls	r7, r3, r1, r6
 802e586:	5dc7      	ldrb	r7, [r0, r7]
 802e588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e58c:	4637      	mov	r7, r6
 802e58e:	42bb      	cmp	r3, r7
 802e590:	460e      	mov	r6, r1
 802e592:	d9f4      	bls.n	802e57e <_printf_i+0x11a>
 802e594:	2b08      	cmp	r3, #8
 802e596:	d10b      	bne.n	802e5b0 <_printf_i+0x14c>
 802e598:	6823      	ldr	r3, [r4, #0]
 802e59a:	07de      	lsls	r6, r3, #31
 802e59c:	d508      	bpl.n	802e5b0 <_printf_i+0x14c>
 802e59e:	6923      	ldr	r3, [r4, #16]
 802e5a0:	6861      	ldr	r1, [r4, #4]
 802e5a2:	4299      	cmp	r1, r3
 802e5a4:	bfde      	ittt	le
 802e5a6:	2330      	movle	r3, #48	; 0x30
 802e5a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e5ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e5b0:	1b52      	subs	r2, r2, r5
 802e5b2:	6122      	str	r2, [r4, #16]
 802e5b4:	f8cd a000 	str.w	sl, [sp]
 802e5b8:	464b      	mov	r3, r9
 802e5ba:	aa03      	add	r2, sp, #12
 802e5bc:	4621      	mov	r1, r4
 802e5be:	4640      	mov	r0, r8
 802e5c0:	f7ff fee2 	bl	802e388 <_printf_common>
 802e5c4:	3001      	adds	r0, #1
 802e5c6:	d14c      	bne.n	802e662 <_printf_i+0x1fe>
 802e5c8:	f04f 30ff 	mov.w	r0, #4294967295
 802e5cc:	b004      	add	sp, #16
 802e5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e5d2:	4835      	ldr	r0, [pc, #212]	; (802e6a8 <_printf_i+0x244>)
 802e5d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802e5d8:	6829      	ldr	r1, [r5, #0]
 802e5da:	6823      	ldr	r3, [r4, #0]
 802e5dc:	f851 6b04 	ldr.w	r6, [r1], #4
 802e5e0:	6029      	str	r1, [r5, #0]
 802e5e2:	061d      	lsls	r5, r3, #24
 802e5e4:	d514      	bpl.n	802e610 <_printf_i+0x1ac>
 802e5e6:	07df      	lsls	r7, r3, #31
 802e5e8:	bf44      	itt	mi
 802e5ea:	f043 0320 	orrmi.w	r3, r3, #32
 802e5ee:	6023      	strmi	r3, [r4, #0]
 802e5f0:	b91e      	cbnz	r6, 802e5fa <_printf_i+0x196>
 802e5f2:	6823      	ldr	r3, [r4, #0]
 802e5f4:	f023 0320 	bic.w	r3, r3, #32
 802e5f8:	6023      	str	r3, [r4, #0]
 802e5fa:	2310      	movs	r3, #16
 802e5fc:	e7b0      	b.n	802e560 <_printf_i+0xfc>
 802e5fe:	6823      	ldr	r3, [r4, #0]
 802e600:	f043 0320 	orr.w	r3, r3, #32
 802e604:	6023      	str	r3, [r4, #0]
 802e606:	2378      	movs	r3, #120	; 0x78
 802e608:	4828      	ldr	r0, [pc, #160]	; (802e6ac <_printf_i+0x248>)
 802e60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e60e:	e7e3      	b.n	802e5d8 <_printf_i+0x174>
 802e610:	0659      	lsls	r1, r3, #25
 802e612:	bf48      	it	mi
 802e614:	b2b6      	uxthmi	r6, r6
 802e616:	e7e6      	b.n	802e5e6 <_printf_i+0x182>
 802e618:	4615      	mov	r5, r2
 802e61a:	e7bb      	b.n	802e594 <_printf_i+0x130>
 802e61c:	682b      	ldr	r3, [r5, #0]
 802e61e:	6826      	ldr	r6, [r4, #0]
 802e620:	6961      	ldr	r1, [r4, #20]
 802e622:	1d18      	adds	r0, r3, #4
 802e624:	6028      	str	r0, [r5, #0]
 802e626:	0635      	lsls	r5, r6, #24
 802e628:	681b      	ldr	r3, [r3, #0]
 802e62a:	d501      	bpl.n	802e630 <_printf_i+0x1cc>
 802e62c:	6019      	str	r1, [r3, #0]
 802e62e:	e002      	b.n	802e636 <_printf_i+0x1d2>
 802e630:	0670      	lsls	r0, r6, #25
 802e632:	d5fb      	bpl.n	802e62c <_printf_i+0x1c8>
 802e634:	8019      	strh	r1, [r3, #0]
 802e636:	2300      	movs	r3, #0
 802e638:	6123      	str	r3, [r4, #16]
 802e63a:	4615      	mov	r5, r2
 802e63c:	e7ba      	b.n	802e5b4 <_printf_i+0x150>
 802e63e:	682b      	ldr	r3, [r5, #0]
 802e640:	1d1a      	adds	r2, r3, #4
 802e642:	602a      	str	r2, [r5, #0]
 802e644:	681d      	ldr	r5, [r3, #0]
 802e646:	6862      	ldr	r2, [r4, #4]
 802e648:	2100      	movs	r1, #0
 802e64a:	4628      	mov	r0, r5
 802e64c:	f7f1 fdd0 	bl	80201f0 <memchr>
 802e650:	b108      	cbz	r0, 802e656 <_printf_i+0x1f2>
 802e652:	1b40      	subs	r0, r0, r5
 802e654:	6060      	str	r0, [r4, #4]
 802e656:	6863      	ldr	r3, [r4, #4]
 802e658:	6123      	str	r3, [r4, #16]
 802e65a:	2300      	movs	r3, #0
 802e65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e660:	e7a8      	b.n	802e5b4 <_printf_i+0x150>
 802e662:	6923      	ldr	r3, [r4, #16]
 802e664:	462a      	mov	r2, r5
 802e666:	4649      	mov	r1, r9
 802e668:	4640      	mov	r0, r8
 802e66a:	47d0      	blx	sl
 802e66c:	3001      	adds	r0, #1
 802e66e:	d0ab      	beq.n	802e5c8 <_printf_i+0x164>
 802e670:	6823      	ldr	r3, [r4, #0]
 802e672:	079b      	lsls	r3, r3, #30
 802e674:	d413      	bmi.n	802e69e <_printf_i+0x23a>
 802e676:	68e0      	ldr	r0, [r4, #12]
 802e678:	9b03      	ldr	r3, [sp, #12]
 802e67a:	4298      	cmp	r0, r3
 802e67c:	bfb8      	it	lt
 802e67e:	4618      	movlt	r0, r3
 802e680:	e7a4      	b.n	802e5cc <_printf_i+0x168>
 802e682:	2301      	movs	r3, #1
 802e684:	4632      	mov	r2, r6
 802e686:	4649      	mov	r1, r9
 802e688:	4640      	mov	r0, r8
 802e68a:	47d0      	blx	sl
 802e68c:	3001      	adds	r0, #1
 802e68e:	d09b      	beq.n	802e5c8 <_printf_i+0x164>
 802e690:	3501      	adds	r5, #1
 802e692:	68e3      	ldr	r3, [r4, #12]
 802e694:	9903      	ldr	r1, [sp, #12]
 802e696:	1a5b      	subs	r3, r3, r1
 802e698:	42ab      	cmp	r3, r5
 802e69a:	dcf2      	bgt.n	802e682 <_printf_i+0x21e>
 802e69c:	e7eb      	b.n	802e676 <_printf_i+0x212>
 802e69e:	2500      	movs	r5, #0
 802e6a0:	f104 0619 	add.w	r6, r4, #25
 802e6a4:	e7f5      	b.n	802e692 <_printf_i+0x22e>
 802e6a6:	bf00      	nop
 802e6a8:	08030d61 	.word	0x08030d61
 802e6ac:	08030d72 	.word	0x08030d72

0802e6b0 <__sread>:
 802e6b0:	b510      	push	{r4, lr}
 802e6b2:	460c      	mov	r4, r1
 802e6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e6b8:	f000 f8ec 	bl	802e894 <_read_r>
 802e6bc:	2800      	cmp	r0, #0
 802e6be:	bfab      	itete	ge
 802e6c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e6c2:	89a3      	ldrhlt	r3, [r4, #12]
 802e6c4:	181b      	addge	r3, r3, r0
 802e6c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e6ca:	bfac      	ite	ge
 802e6cc:	6563      	strge	r3, [r4, #84]	; 0x54
 802e6ce:	81a3      	strhlt	r3, [r4, #12]
 802e6d0:	bd10      	pop	{r4, pc}

0802e6d2 <__swrite>:
 802e6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e6d6:	461f      	mov	r7, r3
 802e6d8:	898b      	ldrh	r3, [r1, #12]
 802e6da:	05db      	lsls	r3, r3, #23
 802e6dc:	4605      	mov	r5, r0
 802e6de:	460c      	mov	r4, r1
 802e6e0:	4616      	mov	r6, r2
 802e6e2:	d505      	bpl.n	802e6f0 <__swrite+0x1e>
 802e6e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e6e8:	2302      	movs	r3, #2
 802e6ea:	2200      	movs	r2, #0
 802e6ec:	f000 f868 	bl	802e7c0 <_lseek_r>
 802e6f0:	89a3      	ldrh	r3, [r4, #12]
 802e6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e6f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e6fa:	81a3      	strh	r3, [r4, #12]
 802e6fc:	4632      	mov	r2, r6
 802e6fe:	463b      	mov	r3, r7
 802e700:	4628      	mov	r0, r5
 802e702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e706:	f000 b817 	b.w	802e738 <_write_r>

0802e70a <__sseek>:
 802e70a:	b510      	push	{r4, lr}
 802e70c:	460c      	mov	r4, r1
 802e70e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e712:	f000 f855 	bl	802e7c0 <_lseek_r>
 802e716:	1c43      	adds	r3, r0, #1
 802e718:	89a3      	ldrh	r3, [r4, #12]
 802e71a:	bf15      	itete	ne
 802e71c:	6560      	strne	r0, [r4, #84]	; 0x54
 802e71e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e726:	81a3      	strheq	r3, [r4, #12]
 802e728:	bf18      	it	ne
 802e72a:	81a3      	strhne	r3, [r4, #12]
 802e72c:	bd10      	pop	{r4, pc}

0802e72e <__sclose>:
 802e72e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e732:	f000 b813 	b.w	802e75c <_close_r>
	...

0802e738 <_write_r>:
 802e738:	b538      	push	{r3, r4, r5, lr}
 802e73a:	4d07      	ldr	r5, [pc, #28]	; (802e758 <_write_r+0x20>)
 802e73c:	4604      	mov	r4, r0
 802e73e:	4608      	mov	r0, r1
 802e740:	4611      	mov	r1, r2
 802e742:	2200      	movs	r2, #0
 802e744:	602a      	str	r2, [r5, #0]
 802e746:	461a      	mov	r2, r3
 802e748:	f7f3 f9f2 	bl	8021b30 <_write>
 802e74c:	1c43      	adds	r3, r0, #1
 802e74e:	d102      	bne.n	802e756 <_write_r+0x1e>
 802e750:	682b      	ldr	r3, [r5, #0]
 802e752:	b103      	cbz	r3, 802e756 <_write_r+0x1e>
 802e754:	6023      	str	r3, [r4, #0]
 802e756:	bd38      	pop	{r3, r4, r5, pc}
 802e758:	200011ac 	.word	0x200011ac

0802e75c <_close_r>:
 802e75c:	b538      	push	{r3, r4, r5, lr}
 802e75e:	4d06      	ldr	r5, [pc, #24]	; (802e778 <_close_r+0x1c>)
 802e760:	2300      	movs	r3, #0
 802e762:	4604      	mov	r4, r0
 802e764:	4608      	mov	r0, r1
 802e766:	602b      	str	r3, [r5, #0]
 802e768:	f7f3 f9fe 	bl	8021b68 <_close>
 802e76c:	1c43      	adds	r3, r0, #1
 802e76e:	d102      	bne.n	802e776 <_close_r+0x1a>
 802e770:	682b      	ldr	r3, [r5, #0]
 802e772:	b103      	cbz	r3, 802e776 <_close_r+0x1a>
 802e774:	6023      	str	r3, [r4, #0]
 802e776:	bd38      	pop	{r3, r4, r5, pc}
 802e778:	200011ac 	.word	0x200011ac

0802e77c <_fstat_r>:
 802e77c:	b538      	push	{r3, r4, r5, lr}
 802e77e:	4d07      	ldr	r5, [pc, #28]	; (802e79c <_fstat_r+0x20>)
 802e780:	2300      	movs	r3, #0
 802e782:	4604      	mov	r4, r0
 802e784:	4608      	mov	r0, r1
 802e786:	4611      	mov	r1, r2
 802e788:	602b      	str	r3, [r5, #0]
 802e78a:	f7f3 f9f9 	bl	8021b80 <_fstat>
 802e78e:	1c43      	adds	r3, r0, #1
 802e790:	d102      	bne.n	802e798 <_fstat_r+0x1c>
 802e792:	682b      	ldr	r3, [r5, #0]
 802e794:	b103      	cbz	r3, 802e798 <_fstat_r+0x1c>
 802e796:	6023      	str	r3, [r4, #0]
 802e798:	bd38      	pop	{r3, r4, r5, pc}
 802e79a:	bf00      	nop
 802e79c:	200011ac 	.word	0x200011ac

0802e7a0 <_isatty_r>:
 802e7a0:	b538      	push	{r3, r4, r5, lr}
 802e7a2:	4d06      	ldr	r5, [pc, #24]	; (802e7bc <_isatty_r+0x1c>)
 802e7a4:	2300      	movs	r3, #0
 802e7a6:	4604      	mov	r4, r0
 802e7a8:	4608      	mov	r0, r1
 802e7aa:	602b      	str	r3, [r5, #0]
 802e7ac:	f7f3 f9f8 	bl	8021ba0 <_isatty>
 802e7b0:	1c43      	adds	r3, r0, #1
 802e7b2:	d102      	bne.n	802e7ba <_isatty_r+0x1a>
 802e7b4:	682b      	ldr	r3, [r5, #0]
 802e7b6:	b103      	cbz	r3, 802e7ba <_isatty_r+0x1a>
 802e7b8:	6023      	str	r3, [r4, #0]
 802e7ba:	bd38      	pop	{r3, r4, r5, pc}
 802e7bc:	200011ac 	.word	0x200011ac

0802e7c0 <_lseek_r>:
 802e7c0:	b538      	push	{r3, r4, r5, lr}
 802e7c2:	4d07      	ldr	r5, [pc, #28]	; (802e7e0 <_lseek_r+0x20>)
 802e7c4:	4604      	mov	r4, r0
 802e7c6:	4608      	mov	r0, r1
 802e7c8:	4611      	mov	r1, r2
 802e7ca:	2200      	movs	r2, #0
 802e7cc:	602a      	str	r2, [r5, #0]
 802e7ce:	461a      	mov	r2, r3
 802e7d0:	f7f3 f9f1 	bl	8021bb6 <_lseek>
 802e7d4:	1c43      	adds	r3, r0, #1
 802e7d6:	d102      	bne.n	802e7de <_lseek_r+0x1e>
 802e7d8:	682b      	ldr	r3, [r5, #0]
 802e7da:	b103      	cbz	r3, 802e7de <_lseek_r+0x1e>
 802e7dc:	6023      	str	r3, [r4, #0]
 802e7de:	bd38      	pop	{r3, r4, r5, pc}
 802e7e0:	200011ac 	.word	0x200011ac

0802e7e4 <memcpy>:
 802e7e4:	440a      	add	r2, r1
 802e7e6:	4291      	cmp	r1, r2
 802e7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 802e7ec:	d100      	bne.n	802e7f0 <memcpy+0xc>
 802e7ee:	4770      	bx	lr
 802e7f0:	b510      	push	{r4, lr}
 802e7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802e7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802e7fa:	4291      	cmp	r1, r2
 802e7fc:	d1f9      	bne.n	802e7f2 <memcpy+0xe>
 802e7fe:	bd10      	pop	{r4, pc}

0802e800 <memmove>:
 802e800:	4288      	cmp	r0, r1
 802e802:	b510      	push	{r4, lr}
 802e804:	eb01 0402 	add.w	r4, r1, r2
 802e808:	d902      	bls.n	802e810 <memmove+0x10>
 802e80a:	4284      	cmp	r4, r0
 802e80c:	4623      	mov	r3, r4
 802e80e:	d807      	bhi.n	802e820 <memmove+0x20>
 802e810:	1e43      	subs	r3, r0, #1
 802e812:	42a1      	cmp	r1, r4
 802e814:	d008      	beq.n	802e828 <memmove+0x28>
 802e816:	f811 2b01 	ldrb.w	r2, [r1], #1
 802e81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802e81e:	e7f8      	b.n	802e812 <memmove+0x12>
 802e820:	4402      	add	r2, r0
 802e822:	4601      	mov	r1, r0
 802e824:	428a      	cmp	r2, r1
 802e826:	d100      	bne.n	802e82a <memmove+0x2a>
 802e828:	bd10      	pop	{r4, pc}
 802e82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802e82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802e832:	e7f7      	b.n	802e824 <memmove+0x24>

0802e834 <_realloc_r>:
 802e834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e838:	4680      	mov	r8, r0
 802e83a:	4614      	mov	r4, r2
 802e83c:	460e      	mov	r6, r1
 802e83e:	b921      	cbnz	r1, 802e84a <_realloc_r+0x16>
 802e840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e844:	4611      	mov	r1, r2
 802e846:	f7fe becb 	b.w	802d5e0 <_malloc_r>
 802e84a:	b92a      	cbnz	r2, 802e858 <_realloc_r+0x24>
 802e84c:	f7fe fe5c 	bl	802d508 <_free_r>
 802e850:	4625      	mov	r5, r4
 802e852:	4628      	mov	r0, r5
 802e854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e858:	f000 f82e 	bl	802e8b8 <_malloc_usable_size_r>
 802e85c:	4284      	cmp	r4, r0
 802e85e:	4607      	mov	r7, r0
 802e860:	d802      	bhi.n	802e868 <_realloc_r+0x34>
 802e862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802e866:	d812      	bhi.n	802e88e <_realloc_r+0x5a>
 802e868:	4621      	mov	r1, r4
 802e86a:	4640      	mov	r0, r8
 802e86c:	f7fe feb8 	bl	802d5e0 <_malloc_r>
 802e870:	4605      	mov	r5, r0
 802e872:	2800      	cmp	r0, #0
 802e874:	d0ed      	beq.n	802e852 <_realloc_r+0x1e>
 802e876:	42bc      	cmp	r4, r7
 802e878:	4622      	mov	r2, r4
 802e87a:	4631      	mov	r1, r6
 802e87c:	bf28      	it	cs
 802e87e:	463a      	movcs	r2, r7
 802e880:	f7ff ffb0 	bl	802e7e4 <memcpy>
 802e884:	4631      	mov	r1, r6
 802e886:	4640      	mov	r0, r8
 802e888:	f7fe fe3e 	bl	802d508 <_free_r>
 802e88c:	e7e1      	b.n	802e852 <_realloc_r+0x1e>
 802e88e:	4635      	mov	r5, r6
 802e890:	e7df      	b.n	802e852 <_realloc_r+0x1e>
	...

0802e894 <_read_r>:
 802e894:	b538      	push	{r3, r4, r5, lr}
 802e896:	4d07      	ldr	r5, [pc, #28]	; (802e8b4 <_read_r+0x20>)
 802e898:	4604      	mov	r4, r0
 802e89a:	4608      	mov	r0, r1
 802e89c:	4611      	mov	r1, r2
 802e89e:	2200      	movs	r2, #0
 802e8a0:	602a      	str	r2, [r5, #0]
 802e8a2:	461a      	mov	r2, r3
 802e8a4:	f7f3 f927 	bl	8021af6 <_read>
 802e8a8:	1c43      	adds	r3, r0, #1
 802e8aa:	d102      	bne.n	802e8b2 <_read_r+0x1e>
 802e8ac:	682b      	ldr	r3, [r5, #0]
 802e8ae:	b103      	cbz	r3, 802e8b2 <_read_r+0x1e>
 802e8b0:	6023      	str	r3, [r4, #0]
 802e8b2:	bd38      	pop	{r3, r4, r5, pc}
 802e8b4:	200011ac 	.word	0x200011ac

0802e8b8 <_malloc_usable_size_r>:
 802e8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e8bc:	1f18      	subs	r0, r3, #4
 802e8be:	2b00      	cmp	r3, #0
 802e8c0:	bfbc      	itt	lt
 802e8c2:	580b      	ldrlt	r3, [r1, r0]
 802e8c4:	18c0      	addlt	r0, r0, r3
 802e8c6:	4770      	bx	lr

0802e8c8 <_init>:
 802e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e8ca:	bf00      	nop
 802e8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e8ce:	bc08      	pop	{r3}
 802e8d0:	469e      	mov	lr, r3
 802e8d2:	4770      	bx	lr

0802e8d4 <_fini>:
 802e8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e8d6:	bf00      	nop
 802e8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802e8da:	bc08      	pop	{r3}
 802e8dc:	469e      	mov	lr, r3
 802e8de:	4770      	bx	lr
