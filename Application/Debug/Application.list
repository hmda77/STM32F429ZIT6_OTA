
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfd4  080401b0  080401b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002684  0804e184  0804e184  0001e184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08050808  08050808  000300e0  2**0
                  CONTENTS
  4 .ARM          00000008  08050808  08050808  00020808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08050810  08050810  000300e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08050810  08050810  00020810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08050814  08050814  00020814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08050818  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e0  2**0
                  CONTENTS
 10 .bss          00001090  200000e0  200000e0  000300e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001170  20001170  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b4b9  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059f6  00000000  00000000  0005b5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  00060fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f80  00000000  00000000  00063170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c358  00000000  00000000  000650f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b4a8  00000000  00000000  00091448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f04c8  00000000  00000000  000bc8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001acdb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098ac  00000000  00000000  001ace08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401b0 <__do_global_dtors_aux>:
 80401b0:	b510      	push	{r4, lr}
 80401b2:	4c05      	ldr	r4, [pc, #20]	; (80401c8 <__do_global_dtors_aux+0x18>)
 80401b4:	7823      	ldrb	r3, [r4, #0]
 80401b6:	b933      	cbnz	r3, 80401c6 <__do_global_dtors_aux+0x16>
 80401b8:	4b04      	ldr	r3, [pc, #16]	; (80401cc <__do_global_dtors_aux+0x1c>)
 80401ba:	b113      	cbz	r3, 80401c2 <__do_global_dtors_aux+0x12>
 80401bc:	4804      	ldr	r0, [pc, #16]	; (80401d0 <__do_global_dtors_aux+0x20>)
 80401be:	f3af 8000 	nop.w
 80401c2:	2301      	movs	r3, #1
 80401c4:	7023      	strb	r3, [r4, #0]
 80401c6:	bd10      	pop	{r4, pc}
 80401c8:	200000e0 	.word	0x200000e0
 80401cc:	00000000 	.word	0x00000000
 80401d0:	0804e16c 	.word	0x0804e16c

080401d4 <frame_dummy>:
 80401d4:	b508      	push	{r3, lr}
 80401d6:	4b03      	ldr	r3, [pc, #12]	; (80401e4 <frame_dummy+0x10>)
 80401d8:	b11b      	cbz	r3, 80401e2 <frame_dummy+0xe>
 80401da:	4903      	ldr	r1, [pc, #12]	; (80401e8 <frame_dummy+0x14>)
 80401dc:	4803      	ldr	r0, [pc, #12]	; (80401ec <frame_dummy+0x18>)
 80401de:	f3af 8000 	nop.w
 80401e2:	bd08      	pop	{r3, pc}
 80401e4:	00000000 	.word	0x00000000
 80401e8:	200000e4 	.word	0x200000e4
 80401ec:	0804e16c 	.word	0x0804e16c

080401f0 <memchr>:
 80401f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401f4:	2a10      	cmp	r2, #16
 80401f6:	db2b      	blt.n	8040250 <memchr+0x60>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	d008      	beq.n	8040210 <memchr+0x20>
 80401fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040202:	3a01      	subs	r2, #1
 8040204:	428b      	cmp	r3, r1
 8040206:	d02d      	beq.n	8040264 <memchr+0x74>
 8040208:	f010 0f07 	tst.w	r0, #7
 804020c:	b342      	cbz	r2, 8040260 <memchr+0x70>
 804020e:	d1f6      	bne.n	80401fe <memchr+0xe>
 8040210:	b4f0      	push	{r4, r5, r6, r7}
 8040212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804021a:	f022 0407 	bic.w	r4, r2, #7
 804021e:	f07f 0700 	mvns.w	r7, #0
 8040222:	2300      	movs	r3, #0
 8040224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040228:	3c08      	subs	r4, #8
 804022a:	ea85 0501 	eor.w	r5, r5, r1
 804022e:	ea86 0601 	eor.w	r6, r6, r1
 8040232:	fa85 f547 	uadd8	r5, r5, r7
 8040236:	faa3 f587 	sel	r5, r3, r7
 804023a:	fa86 f647 	uadd8	r6, r6, r7
 804023e:	faa5 f687 	sel	r6, r5, r7
 8040242:	b98e      	cbnz	r6, 8040268 <memchr+0x78>
 8040244:	d1ee      	bne.n	8040224 <memchr+0x34>
 8040246:	bcf0      	pop	{r4, r5, r6, r7}
 8040248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804024c:	f002 0207 	and.w	r2, r2, #7
 8040250:	b132      	cbz	r2, 8040260 <memchr+0x70>
 8040252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040256:	3a01      	subs	r2, #1
 8040258:	ea83 0301 	eor.w	r3, r3, r1
 804025c:	b113      	cbz	r3, 8040264 <memchr+0x74>
 804025e:	d1f8      	bne.n	8040252 <memchr+0x62>
 8040260:	2000      	movs	r0, #0
 8040262:	4770      	bx	lr
 8040264:	3801      	subs	r0, #1
 8040266:	4770      	bx	lr
 8040268:	2d00      	cmp	r5, #0
 804026a:	bf06      	itte	eq
 804026c:	4635      	moveq	r5, r6
 804026e:	3803      	subeq	r0, #3
 8040270:	3807      	subne	r0, #7
 8040272:	f015 0f01 	tst.w	r5, #1
 8040276:	d107      	bne.n	8040288 <memchr+0x98>
 8040278:	3001      	adds	r0, #1
 804027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804027e:	bf02      	ittt	eq
 8040280:	3001      	addeq	r0, #1
 8040282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040286:	3001      	addeq	r0, #1
 8040288:	bcf0      	pop	{r4, r5, r6, r7}
 804028a:	3801      	subs	r0, #1
 804028c:	4770      	bx	lr
 804028e:	bf00      	nop

08040290 <__aeabi_uldivmod>:
 8040290:	b953      	cbnz	r3, 80402a8 <__aeabi_uldivmod+0x18>
 8040292:	b94a      	cbnz	r2, 80402a8 <__aeabi_uldivmod+0x18>
 8040294:	2900      	cmp	r1, #0
 8040296:	bf08      	it	eq
 8040298:	2800      	cmpeq	r0, #0
 804029a:	bf1c      	itt	ne
 804029c:	f04f 31ff 	movne.w	r1, #4294967295
 80402a0:	f04f 30ff 	movne.w	r0, #4294967295
 80402a4:	f000 b974 	b.w	8040590 <__aeabi_idiv0>
 80402a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80402ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402b0:	f000 f806 	bl	80402c0 <__udivmoddi4>
 80402b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402bc:	b004      	add	sp, #16
 80402be:	4770      	bx	lr

080402c0 <__udivmoddi4>:
 80402c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402c4:	9d08      	ldr	r5, [sp, #32]
 80402c6:	4604      	mov	r4, r0
 80402c8:	468e      	mov	lr, r1
 80402ca:	2b00      	cmp	r3, #0
 80402cc:	d14d      	bne.n	804036a <__udivmoddi4+0xaa>
 80402ce:	428a      	cmp	r2, r1
 80402d0:	4694      	mov	ip, r2
 80402d2:	d969      	bls.n	80403a8 <__udivmoddi4+0xe8>
 80402d4:	fab2 f282 	clz	r2, r2
 80402d8:	b152      	cbz	r2, 80402f0 <__udivmoddi4+0x30>
 80402da:	fa01 f302 	lsl.w	r3, r1, r2
 80402de:	f1c2 0120 	rsb	r1, r2, #32
 80402e2:	fa20 f101 	lsr.w	r1, r0, r1
 80402e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402ea:	ea41 0e03 	orr.w	lr, r1, r3
 80402ee:	4094      	lsls	r4, r2
 80402f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402f4:	0c21      	lsrs	r1, r4, #16
 80402f6:	fbbe f6f8 	udiv	r6, lr, r8
 80402fa:	fa1f f78c 	uxth.w	r7, ip
 80402fe:	fb08 e316 	mls	r3, r8, r6, lr
 8040302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8040306:	fb06 f107 	mul.w	r1, r6, r7
 804030a:	4299      	cmp	r1, r3
 804030c:	d90a      	bls.n	8040324 <__udivmoddi4+0x64>
 804030e:	eb1c 0303 	adds.w	r3, ip, r3
 8040312:	f106 30ff 	add.w	r0, r6, #4294967295
 8040316:	f080 811f 	bcs.w	8040558 <__udivmoddi4+0x298>
 804031a:	4299      	cmp	r1, r3
 804031c:	f240 811c 	bls.w	8040558 <__udivmoddi4+0x298>
 8040320:	3e02      	subs	r6, #2
 8040322:	4463      	add	r3, ip
 8040324:	1a5b      	subs	r3, r3, r1
 8040326:	b2a4      	uxth	r4, r4
 8040328:	fbb3 f0f8 	udiv	r0, r3, r8
 804032c:	fb08 3310 	mls	r3, r8, r0, r3
 8040330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040334:	fb00 f707 	mul.w	r7, r0, r7
 8040338:	42a7      	cmp	r7, r4
 804033a:	d90a      	bls.n	8040352 <__udivmoddi4+0x92>
 804033c:	eb1c 0404 	adds.w	r4, ip, r4
 8040340:	f100 33ff 	add.w	r3, r0, #4294967295
 8040344:	f080 810a 	bcs.w	804055c <__udivmoddi4+0x29c>
 8040348:	42a7      	cmp	r7, r4
 804034a:	f240 8107 	bls.w	804055c <__udivmoddi4+0x29c>
 804034e:	4464      	add	r4, ip
 8040350:	3802      	subs	r0, #2
 8040352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040356:	1be4      	subs	r4, r4, r7
 8040358:	2600      	movs	r6, #0
 804035a:	b11d      	cbz	r5, 8040364 <__udivmoddi4+0xa4>
 804035c:	40d4      	lsrs	r4, r2
 804035e:	2300      	movs	r3, #0
 8040360:	e9c5 4300 	strd	r4, r3, [r5]
 8040364:	4631      	mov	r1, r6
 8040366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804036a:	428b      	cmp	r3, r1
 804036c:	d909      	bls.n	8040382 <__udivmoddi4+0xc2>
 804036e:	2d00      	cmp	r5, #0
 8040370:	f000 80ef 	beq.w	8040552 <__udivmoddi4+0x292>
 8040374:	2600      	movs	r6, #0
 8040376:	e9c5 0100 	strd	r0, r1, [r5]
 804037a:	4630      	mov	r0, r6
 804037c:	4631      	mov	r1, r6
 804037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040382:	fab3 f683 	clz	r6, r3
 8040386:	2e00      	cmp	r6, #0
 8040388:	d14a      	bne.n	8040420 <__udivmoddi4+0x160>
 804038a:	428b      	cmp	r3, r1
 804038c:	d302      	bcc.n	8040394 <__udivmoddi4+0xd4>
 804038e:	4282      	cmp	r2, r0
 8040390:	f200 80f9 	bhi.w	8040586 <__udivmoddi4+0x2c6>
 8040394:	1a84      	subs	r4, r0, r2
 8040396:	eb61 0303 	sbc.w	r3, r1, r3
 804039a:	2001      	movs	r0, #1
 804039c:	469e      	mov	lr, r3
 804039e:	2d00      	cmp	r5, #0
 80403a0:	d0e0      	beq.n	8040364 <__udivmoddi4+0xa4>
 80403a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80403a6:	e7dd      	b.n	8040364 <__udivmoddi4+0xa4>
 80403a8:	b902      	cbnz	r2, 80403ac <__udivmoddi4+0xec>
 80403aa:	deff      	udf	#255	; 0xff
 80403ac:	fab2 f282 	clz	r2, r2
 80403b0:	2a00      	cmp	r2, #0
 80403b2:	f040 8092 	bne.w	80404da <__udivmoddi4+0x21a>
 80403b6:	eba1 010c 	sub.w	r1, r1, ip
 80403ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403be:	fa1f fe8c 	uxth.w	lr, ip
 80403c2:	2601      	movs	r6, #1
 80403c4:	0c20      	lsrs	r0, r4, #16
 80403c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ca:	fb07 1113 	mls	r1, r7, r3, r1
 80403ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403d2:	fb0e f003 	mul.w	r0, lr, r3
 80403d6:	4288      	cmp	r0, r1
 80403d8:	d908      	bls.n	80403ec <__udivmoddi4+0x12c>
 80403da:	eb1c 0101 	adds.w	r1, ip, r1
 80403de:	f103 38ff 	add.w	r8, r3, #4294967295
 80403e2:	d202      	bcs.n	80403ea <__udivmoddi4+0x12a>
 80403e4:	4288      	cmp	r0, r1
 80403e6:	f200 80cb 	bhi.w	8040580 <__udivmoddi4+0x2c0>
 80403ea:	4643      	mov	r3, r8
 80403ec:	1a09      	subs	r1, r1, r0
 80403ee:	b2a4      	uxth	r4, r4
 80403f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403f4:	fb07 1110 	mls	r1, r7, r0, r1
 80403f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403fc:	fb0e fe00 	mul.w	lr, lr, r0
 8040400:	45a6      	cmp	lr, r4
 8040402:	d908      	bls.n	8040416 <__udivmoddi4+0x156>
 8040404:	eb1c 0404 	adds.w	r4, ip, r4
 8040408:	f100 31ff 	add.w	r1, r0, #4294967295
 804040c:	d202      	bcs.n	8040414 <__udivmoddi4+0x154>
 804040e:	45a6      	cmp	lr, r4
 8040410:	f200 80bb 	bhi.w	804058a <__udivmoddi4+0x2ca>
 8040414:	4608      	mov	r0, r1
 8040416:	eba4 040e 	sub.w	r4, r4, lr
 804041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804041e:	e79c      	b.n	804035a <__udivmoddi4+0x9a>
 8040420:	f1c6 0720 	rsb	r7, r6, #32
 8040424:	40b3      	lsls	r3, r6
 8040426:	fa22 fc07 	lsr.w	ip, r2, r7
 804042a:	ea4c 0c03 	orr.w	ip, ip, r3
 804042e:	fa20 f407 	lsr.w	r4, r0, r7
 8040432:	fa01 f306 	lsl.w	r3, r1, r6
 8040436:	431c      	orrs	r4, r3
 8040438:	40f9      	lsrs	r1, r7
 804043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804043e:	fa00 f306 	lsl.w	r3, r0, r6
 8040442:	fbb1 f8f9 	udiv	r8, r1, r9
 8040446:	0c20      	lsrs	r0, r4, #16
 8040448:	fa1f fe8c 	uxth.w	lr, ip
 804044c:	fb09 1118 	mls	r1, r9, r8, r1
 8040450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040454:	fb08 f00e 	mul.w	r0, r8, lr
 8040458:	4288      	cmp	r0, r1
 804045a:	fa02 f206 	lsl.w	r2, r2, r6
 804045e:	d90b      	bls.n	8040478 <__udivmoddi4+0x1b8>
 8040460:	eb1c 0101 	adds.w	r1, ip, r1
 8040464:	f108 3aff 	add.w	sl, r8, #4294967295
 8040468:	f080 8088 	bcs.w	804057c <__udivmoddi4+0x2bc>
 804046c:	4288      	cmp	r0, r1
 804046e:	f240 8085 	bls.w	804057c <__udivmoddi4+0x2bc>
 8040472:	f1a8 0802 	sub.w	r8, r8, #2
 8040476:	4461      	add	r1, ip
 8040478:	1a09      	subs	r1, r1, r0
 804047a:	b2a4      	uxth	r4, r4
 804047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040480:	fb09 1110 	mls	r1, r9, r0, r1
 8040484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040488:	fb00 fe0e 	mul.w	lr, r0, lr
 804048c:	458e      	cmp	lr, r1
 804048e:	d908      	bls.n	80404a2 <__udivmoddi4+0x1e2>
 8040490:	eb1c 0101 	adds.w	r1, ip, r1
 8040494:	f100 34ff 	add.w	r4, r0, #4294967295
 8040498:	d26c      	bcs.n	8040574 <__udivmoddi4+0x2b4>
 804049a:	458e      	cmp	lr, r1
 804049c:	d96a      	bls.n	8040574 <__udivmoddi4+0x2b4>
 804049e:	3802      	subs	r0, #2
 80404a0:	4461      	add	r1, ip
 80404a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80404a6:	fba0 9402 	umull	r9, r4, r0, r2
 80404aa:	eba1 010e 	sub.w	r1, r1, lr
 80404ae:	42a1      	cmp	r1, r4
 80404b0:	46c8      	mov	r8, r9
 80404b2:	46a6      	mov	lr, r4
 80404b4:	d356      	bcc.n	8040564 <__udivmoddi4+0x2a4>
 80404b6:	d053      	beq.n	8040560 <__udivmoddi4+0x2a0>
 80404b8:	b15d      	cbz	r5, 80404d2 <__udivmoddi4+0x212>
 80404ba:	ebb3 0208 	subs.w	r2, r3, r8
 80404be:	eb61 010e 	sbc.w	r1, r1, lr
 80404c2:	fa01 f707 	lsl.w	r7, r1, r7
 80404c6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ca:	40f1      	lsrs	r1, r6
 80404cc:	431f      	orrs	r7, r3
 80404ce:	e9c5 7100 	strd	r7, r1, [r5]
 80404d2:	2600      	movs	r6, #0
 80404d4:	4631      	mov	r1, r6
 80404d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404da:	f1c2 0320 	rsb	r3, r2, #32
 80404de:	40d8      	lsrs	r0, r3
 80404e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404e4:	fa21 f303 	lsr.w	r3, r1, r3
 80404e8:	4091      	lsls	r1, r2
 80404ea:	4301      	orrs	r1, r0
 80404ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404f0:	fa1f fe8c 	uxth.w	lr, ip
 80404f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404f8:	fb07 3610 	mls	r6, r7, r0, r3
 80404fc:	0c0b      	lsrs	r3, r1, #16
 80404fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8040502:	fb00 f60e 	mul.w	r6, r0, lr
 8040506:	429e      	cmp	r6, r3
 8040508:	fa04 f402 	lsl.w	r4, r4, r2
 804050c:	d908      	bls.n	8040520 <__udivmoddi4+0x260>
 804050e:	eb1c 0303 	adds.w	r3, ip, r3
 8040512:	f100 38ff 	add.w	r8, r0, #4294967295
 8040516:	d22f      	bcs.n	8040578 <__udivmoddi4+0x2b8>
 8040518:	429e      	cmp	r6, r3
 804051a:	d92d      	bls.n	8040578 <__udivmoddi4+0x2b8>
 804051c:	3802      	subs	r0, #2
 804051e:	4463      	add	r3, ip
 8040520:	1b9b      	subs	r3, r3, r6
 8040522:	b289      	uxth	r1, r1
 8040524:	fbb3 f6f7 	udiv	r6, r3, r7
 8040528:	fb07 3316 	mls	r3, r7, r6, r3
 804052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040530:	fb06 f30e 	mul.w	r3, r6, lr
 8040534:	428b      	cmp	r3, r1
 8040536:	d908      	bls.n	804054a <__udivmoddi4+0x28a>
 8040538:	eb1c 0101 	adds.w	r1, ip, r1
 804053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040540:	d216      	bcs.n	8040570 <__udivmoddi4+0x2b0>
 8040542:	428b      	cmp	r3, r1
 8040544:	d914      	bls.n	8040570 <__udivmoddi4+0x2b0>
 8040546:	3e02      	subs	r6, #2
 8040548:	4461      	add	r1, ip
 804054a:	1ac9      	subs	r1, r1, r3
 804054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040550:	e738      	b.n	80403c4 <__udivmoddi4+0x104>
 8040552:	462e      	mov	r6, r5
 8040554:	4628      	mov	r0, r5
 8040556:	e705      	b.n	8040364 <__udivmoddi4+0xa4>
 8040558:	4606      	mov	r6, r0
 804055a:	e6e3      	b.n	8040324 <__udivmoddi4+0x64>
 804055c:	4618      	mov	r0, r3
 804055e:	e6f8      	b.n	8040352 <__udivmoddi4+0x92>
 8040560:	454b      	cmp	r3, r9
 8040562:	d2a9      	bcs.n	80404b8 <__udivmoddi4+0x1f8>
 8040564:	ebb9 0802 	subs.w	r8, r9, r2
 8040568:	eb64 0e0c 	sbc.w	lr, r4, ip
 804056c:	3801      	subs	r0, #1
 804056e:	e7a3      	b.n	80404b8 <__udivmoddi4+0x1f8>
 8040570:	4646      	mov	r6, r8
 8040572:	e7ea      	b.n	804054a <__udivmoddi4+0x28a>
 8040574:	4620      	mov	r0, r4
 8040576:	e794      	b.n	80404a2 <__udivmoddi4+0x1e2>
 8040578:	4640      	mov	r0, r8
 804057a:	e7d1      	b.n	8040520 <__udivmoddi4+0x260>
 804057c:	46d0      	mov	r8, sl
 804057e:	e77b      	b.n	8040478 <__udivmoddi4+0x1b8>
 8040580:	3b02      	subs	r3, #2
 8040582:	4461      	add	r1, ip
 8040584:	e732      	b.n	80403ec <__udivmoddi4+0x12c>
 8040586:	4630      	mov	r0, r6
 8040588:	e709      	b.n	804039e <__udivmoddi4+0xde>
 804058a:	4464      	add	r4, ip
 804058c:	3802      	subs	r0, #2
 804058e:	e742      	b.n	8040416 <__udivmoddi4+0x156>

08040590 <__aeabi_idiv0>:
 8040590:	4770      	bx	lr
 8040592:	bf00      	nop

08040594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040598:	f002 fe68 	bl	804326c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804059c:	f000 f8d4 	bl	8040748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405a0:	f000 fb44 	bl	8040c2c <MX_GPIO_Init>
  MX_CRC_Init();
 80405a4:	f000 f93c 	bl	8040820 <MX_CRC_Init>
  MX_DMA2D_Init();
 80405a8:	f000 f94e 	bl	8040848 <MX_DMA2D_Init>
  MX_FMC_Init();
 80405ac:	f000 faee 	bl	8040b8c <MX_FMC_Init>
  MX_I2C3_Init();
 80405b0:	f000 f97c 	bl	80408ac <MX_I2C3_Init>
  MX_LTDC_Init();
 80405b4:	f000 f9ba 	bl	804092c <MX_LTDC_Init>
  MX_SPI5_Init();
 80405b8:	f000 fa38 	bl	8040a2c <MX_SPI5_Init>
  MX_TIM1_Init();
 80405bc:	f000 fa6c 	bl	8040a98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80405c0:	f000 faba 	bl	8040b38 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80405c4:	f00c f8a2 	bl	804c70c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80405c8:	2300      	movs	r3, #0
 80405ca:	461a      	mov	r2, r3
 80405cc:	2301      	movs	r3, #1
 80405ce:	4951      	ldr	r1, [pc, #324]	; (8040714 <main+0x180>)
 80405d0:	4851      	ldr	r0, [pc, #324]	; (8040718 <main+0x184>)
 80405d2:	f00c fd69 	bl	804d0a8 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80405d6:	2300      	movs	r3, #0
 80405d8:	2201      	movs	r2, #1
 80405da:	4619      	mov	r1, r3
 80405dc:	484f      	ldr	r0, [pc, #316]	; (804071c <main+0x188>)
 80405de:	f00c fcc5 	bl	804cf6c <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80405e2:	f001 ffbd 	bl	8042560 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80405e6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80405ea:	2001      	movs	r0, #1
 80405ec:	f002 f83a 	bl	8042664 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80405f0:	2001      	movs	r0, #1
 80405f2:	f002 f89b 	bl	804272c <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80405f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80405fa:	f002 f945 	bl	8042888 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 80405fe:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8040602:	2001      	movs	r0, #1
 8040604:	f002 f8e0 	bl	80427c8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8040608:	2100      	movs	r1, #0
 804060a:	2001      	movs	r0, #1
 804060c:	f002 f89e 	bl	804274c <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8040610:	4943      	ldr	r1, [pc, #268]	; (8040720 <main+0x18c>)
 8040612:	2000      	movs	r0, #0
 8040614:	f002 f826 	bl	8042664 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8040618:	2000      	movs	r0, #0
 804061a:	f002 f887 	bl	804272c <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 804061e:	f002 fa5d 	bl	8042adc <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8040622:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8040626:	f002 f92f 	bl	8042888 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 804062a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 804062e:	f002 f8f7 	bl	8042820 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8040632:	483c      	ldr	r0, [pc, #240]	; (8040724 <main+0x190>)
 8040634:	f002 f8dc 	bl	80427f0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8040638:	483b      	ldr	r0, [pc, #236]	; (8040728 <main+0x194>)
 804063a:	f002 f90b 	bl	8042854 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 804063e:	2301      	movs	r3, #1
 8040640:	4a35      	ldr	r2, [pc, #212]	; (8040718 <main+0x184>)
 8040642:	2100      	movs	r1, #0
 8040644:	2000      	movs	r0, #0
 8040646:	f002 f98b 	bl	8042960 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 804064a:	f04f 30ff 	mov.w	r0, #4294967295
 804064e:	f002 f8cf 	bl	80427f0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8040652:	f001 fffb 	bl	804264c <BSP_LCD_GetYSize>
 8040656:	4603      	mov	r3, r0
 8040658:	085b      	lsrs	r3, r3, #1
 804065a:	b29b      	uxth	r3, r3
 804065c:	3b1b      	subs	r3, #27
 804065e:	b299      	uxth	r1, r3
 8040660:	2301      	movs	r3, #1
 8040662:	4a32      	ldr	r2, [pc, #200]	; (804072c <main+0x198>)
 8040664:	2000      	movs	r0, #0
 8040666:	f002 f97b 	bl	8042960 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 804066a:	f001 ffef 	bl	804264c <BSP_LCD_GetYSize>
 804066e:	4603      	mov	r3, r0
 8040670:	085b      	lsrs	r3, r3, #1
 8040672:	b29b      	uxth	r3, r3
 8040674:	3b0c      	subs	r3, #12
 8040676:	b299      	uxth	r1, r3
 8040678:	2301      	movs	r3, #1
 804067a:	4a2d      	ldr	r2, [pc, #180]	; (8040730 <main+0x19c>)
 804067c:	2000      	movs	r0, #0
 804067e:	f002 f96f 	bl	8042960 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8040682:	f001 ffe3 	bl	804264c <BSP_LCD_GetYSize>
 8040686:	4603      	mov	r3, r0
 8040688:	085b      	lsrs	r3, r3, #1
 804068a:	b29b      	uxth	r3, r3
 804068c:	3303      	adds	r3, #3
 804068e:	b299      	uxth	r1, r3
 8040690:	2301      	movs	r3, #1
 8040692:	4a28      	ldr	r2, [pc, #160]	; (8040734 <main+0x1a0>)
 8040694:	2000      	movs	r0, #0
 8040696:	f002 f963 	bl	8042960 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 804069a:	f00c f85d 	bl	804c758 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 804069e:	2201      	movs	r2, #1
 80406a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406a4:	4824      	ldr	r0, [pc, #144]	; (8040738 <main+0x1a4>)
 80406a6:	f003 ff57 	bl	8044558 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406ae:	f002 fe1f 	bl	80432f0 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406b2:	2200      	movs	r2, #0
 80406b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406b8:	481f      	ldr	r0, [pc, #124]	; (8040738 <main+0x1a4>)
 80406ba:	f003 ff4d 	bl	8044558 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80406be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80406c2:	f002 fe15 	bl	80432f0 <HAL_Delay>
    if (ota_update_request){
 80406c6:	4b1d      	ldr	r3, [pc, #116]	; (804073c <main+0x1a8>)
 80406c8:	781b      	ldrb	r3, [r3, #0]
 80406ca:	2b00      	cmp	r3, #0
 80406cc:	d0e5      	beq.n	804069a <main+0x106>
    	printf("OTA Update Requested...\r\n");
 80406ce:	481c      	ldr	r0, [pc, #112]	; (8040740 <main+0x1ac>)
 80406d0:	f00c fcd2 	bl	804d078 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80406d4:	2201      	movs	r2, #1
 80406d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406da:	4817      	ldr	r0, [pc, #92]	; (8040738 <main+0x1a4>)
 80406dc:	f003 ff3c 	bl	8044558 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80406e0:	2201      	movs	r2, #1
 80406e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80406e6:	4814      	ldr	r0, [pc, #80]	; (8040738 <main+0x1a4>)
 80406e8:	f003 ff36 	bl	8044558 <HAL_GPIO_WritePin>
    	go_to_ota_app(&huart1);
 80406ec:	4815      	ldr	r0, [pc, #84]	; (8040744 <main+0x1b0>)
 80406ee:	f000 fbeb 	bl	8040ec8 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80406f2:	2200      	movs	r2, #0
 80406f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80406f8:	480f      	ldr	r0, [pc, #60]	; (8040738 <main+0x1a4>)
 80406fa:	f003 ff2d 	bl	8044558 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80406fe:	2200      	movs	r2, #0
 8040700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040704:	480c      	ldr	r0, [pc, #48]	; (8040738 <main+0x1a4>)
 8040706:	f003 ff27 	bl	8044558 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 804070a:	4b0c      	ldr	r3, [pc, #48]	; (804073c <main+0x1a8>)
 804070c:	2200      	movs	r2, #0
 804070e:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8040710:	e7c3      	b.n	804069a <main+0x106>
 8040712:	bf00      	nop
 8040714:	0804e184 	.word	0x0804e184
 8040718:	20000358 	.word	0x20000358
 804071c:	0804e1a4 	.word	0x0804e1a4
 8040720:	d0130000 	.word	0xd0130000
 8040724:	ffff0000 	.word	0xffff0000
 8040728:	20000048 	.word	0x20000048
 804072c:	0804e1c4 	.word	0x0804e1c4
 8040730:	0804e1d4 	.word	0x0804e1d4
 8040734:	0804e1dc 	.word	0x0804e1dc
 8040738:	40021800 	.word	0x40021800
 804073c:	200003bc 	.word	0x200003bc
 8040740:	0804e1e4 	.word	0x0804e1e4
 8040744:	200002e0 	.word	0x200002e0

08040748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040748:	b580      	push	{r7, lr}
 804074a:	b094      	sub	sp, #80	; 0x50
 804074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804074e:	f107 0320 	add.w	r3, r7, #32
 8040752:	2230      	movs	r2, #48	; 0x30
 8040754:	2100      	movs	r1, #0
 8040756:	4618      	mov	r0, r3
 8040758:	f00c fb20 	bl	804cd9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804075c:	f107 030c 	add.w	r3, r7, #12
 8040760:	2200      	movs	r2, #0
 8040762:	601a      	str	r2, [r3, #0]
 8040764:	605a      	str	r2, [r3, #4]
 8040766:	609a      	str	r2, [r3, #8]
 8040768:	60da      	str	r2, [r3, #12]
 804076a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 804076c:	2300      	movs	r3, #0
 804076e:	60bb      	str	r3, [r7, #8]
 8040770:	4b29      	ldr	r3, [pc, #164]	; (8040818 <SystemClock_Config+0xd0>)
 8040772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040774:	4a28      	ldr	r2, [pc, #160]	; (8040818 <SystemClock_Config+0xd0>)
 8040776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804077a:	6413      	str	r3, [r2, #64]	; 0x40
 804077c:	4b26      	ldr	r3, [pc, #152]	; (8040818 <SystemClock_Config+0xd0>)
 804077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040784:	60bb      	str	r3, [r7, #8]
 8040786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8040788:	2300      	movs	r3, #0
 804078a:	607b      	str	r3, [r7, #4]
 804078c:	4b23      	ldr	r3, [pc, #140]	; (804081c <SystemClock_Config+0xd4>)
 804078e:	681b      	ldr	r3, [r3, #0]
 8040790:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8040794:	4a21      	ldr	r2, [pc, #132]	; (804081c <SystemClock_Config+0xd4>)
 8040796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804079a:	6013      	str	r3, [r2, #0]
 804079c:	4b1f      	ldr	r3, [pc, #124]	; (804081c <SystemClock_Config+0xd4>)
 804079e:	681b      	ldr	r3, [r3, #0]
 80407a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80407a4:	607b      	str	r3, [r7, #4]
 80407a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80407a8:	2301      	movs	r3, #1
 80407aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80407ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80407b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407b2:	2302      	movs	r3, #2
 80407b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80407b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80407ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80407bc:	2310      	movs	r3, #16
 80407be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80407c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80407c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407c6:	2302      	movs	r3, #2
 80407c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80407ca:	2307      	movs	r3, #7
 80407cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407ce:	f107 0320 	add.w	r3, r7, #32
 80407d2:	4618      	mov	r0, r3
 80407d4:	f006 f8cc 	bl	8046970 <HAL_RCC_OscConfig>
 80407d8:	4603      	mov	r3, r0
 80407da:	2b00      	cmp	r3, #0
 80407dc:	d001      	beq.n	80407e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80407de:	f000 fb6d 	bl	8040ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407e2:	230f      	movs	r3, #15
 80407e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407e6:	2302      	movs	r3, #2
 80407e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407ea:	2300      	movs	r3, #0
 80407ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80407ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80407f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80407f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80407fa:	f107 030c 	add.w	r3, r7, #12
 80407fe:	2102      	movs	r1, #2
 8040800:	4618      	mov	r0, r3
 8040802:	f006 fb2d 	bl	8046e60 <HAL_RCC_ClockConfig>
 8040806:	4603      	mov	r3, r0
 8040808:	2b00      	cmp	r3, #0
 804080a:	d001      	beq.n	8040810 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 804080c:	f000 fb56 	bl	8040ebc <Error_Handler>
  }
}
 8040810:	bf00      	nop
 8040812:	3750      	adds	r7, #80	; 0x50
 8040814:	46bd      	mov	sp, r7
 8040816:	bd80      	pop	{r7, pc}
 8040818:	40023800 	.word	0x40023800
 804081c:	40007000 	.word	0x40007000

08040820 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8040820:	b580      	push	{r7, lr}
 8040822:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8040824:	4b06      	ldr	r3, [pc, #24]	; (8040840 <MX_CRC_Init+0x20>)
 8040826:	4a07      	ldr	r2, [pc, #28]	; (8040844 <MX_CRC_Init+0x24>)
 8040828:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 804082a:	4805      	ldr	r0, [pc, #20]	; (8040840 <MX_CRC_Init+0x20>)
 804082c:	f002 fe66 	bl	80434fc <HAL_CRC_Init>
 8040830:	4603      	mov	r3, r0
 8040832:	2b00      	cmp	r3, #0
 8040834:	d001      	beq.n	804083a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8040836:	f000 fb41 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 804083a:	bf00      	nop
 804083c:	bd80      	pop	{r7, pc}
 804083e:	bf00      	nop
 8040840:	200000fc 	.word	0x200000fc
 8040844:	40023000 	.word	0x40023000

08040848 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8040848:	b580      	push	{r7, lr}
 804084a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 804084c:	4b15      	ldr	r3, [pc, #84]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804084e:	4a16      	ldr	r2, [pc, #88]	; (80408a8 <MX_DMA2D_Init+0x60>)
 8040850:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8040852:	4b14      	ldr	r3, [pc, #80]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040854:	2200      	movs	r2, #0
 8040856:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8040858:	4b12      	ldr	r3, [pc, #72]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804085a:	2200      	movs	r2, #0
 804085c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 804085e:	4b11      	ldr	r3, [pc, #68]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040860:	2200      	movs	r2, #0
 8040862:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8040864:	4b0f      	ldr	r3, [pc, #60]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040866:	2200      	movs	r2, #0
 8040868:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 804086a:	4b0e      	ldr	r3, [pc, #56]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804086c:	2200      	movs	r2, #0
 804086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8040870:	4b0c      	ldr	r3, [pc, #48]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040872:	2200      	movs	r2, #0
 8040874:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8040876:	4b0b      	ldr	r3, [pc, #44]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040878:	2200      	movs	r2, #0
 804087a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 804087c:	4809      	ldr	r0, [pc, #36]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 804087e:	f003 f817 	bl	80438b0 <HAL_DMA2D_Init>
 8040882:	4603      	mov	r3, r0
 8040884:	2b00      	cmp	r3, #0
 8040886:	d001      	beq.n	804088c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8040888:	f000 fb18 	bl	8040ebc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 804088c:	2101      	movs	r1, #1
 804088e:	4805      	ldr	r0, [pc, #20]	; (80408a4 <MX_DMA2D_Init+0x5c>)
 8040890:	f003 fa7c 	bl	8043d8c <HAL_DMA2D_ConfigLayer>
 8040894:	4603      	mov	r3, r0
 8040896:	2b00      	cmp	r3, #0
 8040898:	d001      	beq.n	804089e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 804089a:	f000 fb0f 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 804089e:	bf00      	nop
 80408a0:	bd80      	pop	{r7, pc}
 80408a2:	bf00      	nop
 80408a4:	20000104 	.word	0x20000104
 80408a8:	4002b000 	.word	0x4002b000

080408ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80408ac:	b580      	push	{r7, lr}
 80408ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80408b0:	4b1b      	ldr	r3, [pc, #108]	; (8040920 <MX_I2C3_Init+0x74>)
 80408b2:	4a1c      	ldr	r2, [pc, #112]	; (8040924 <MX_I2C3_Init+0x78>)
 80408b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80408b6:	4b1a      	ldr	r3, [pc, #104]	; (8040920 <MX_I2C3_Init+0x74>)
 80408b8:	4a1b      	ldr	r2, [pc, #108]	; (8040928 <MX_I2C3_Init+0x7c>)
 80408ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80408bc:	4b18      	ldr	r3, [pc, #96]	; (8040920 <MX_I2C3_Init+0x74>)
 80408be:	2200      	movs	r2, #0
 80408c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80408c2:	4b17      	ldr	r3, [pc, #92]	; (8040920 <MX_I2C3_Init+0x74>)
 80408c4:	2200      	movs	r2, #0
 80408c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80408c8:	4b15      	ldr	r3, [pc, #84]	; (8040920 <MX_I2C3_Init+0x74>)
 80408ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80408d0:	4b13      	ldr	r3, [pc, #76]	; (8040920 <MX_I2C3_Init+0x74>)
 80408d2:	2200      	movs	r2, #0
 80408d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80408d6:	4b12      	ldr	r3, [pc, #72]	; (8040920 <MX_I2C3_Init+0x74>)
 80408d8:	2200      	movs	r2, #0
 80408da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80408dc:	4b10      	ldr	r3, [pc, #64]	; (8040920 <MX_I2C3_Init+0x74>)
 80408de:	2200      	movs	r2, #0
 80408e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80408e2:	4b0f      	ldr	r3, [pc, #60]	; (8040920 <MX_I2C3_Init+0x74>)
 80408e4:	2200      	movs	r2, #0
 80408e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80408e8:	480d      	ldr	r0, [pc, #52]	; (8040920 <MX_I2C3_Init+0x74>)
 80408ea:	f005 fa71 	bl	8045dd0 <HAL_I2C_Init>
 80408ee:	4603      	mov	r3, r0
 80408f0:	2b00      	cmp	r3, #0
 80408f2:	d001      	beq.n	80408f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80408f4:	f000 fae2 	bl	8040ebc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80408f8:	2100      	movs	r1, #0
 80408fa:	4809      	ldr	r0, [pc, #36]	; (8040920 <MX_I2C3_Init+0x74>)
 80408fc:	f005 fbac 	bl	8046058 <HAL_I2CEx_ConfigAnalogFilter>
 8040900:	4603      	mov	r3, r0
 8040902:	2b00      	cmp	r3, #0
 8040904:	d001      	beq.n	804090a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8040906:	f000 fad9 	bl	8040ebc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 804090a:	2100      	movs	r1, #0
 804090c:	4804      	ldr	r0, [pc, #16]	; (8040920 <MX_I2C3_Init+0x74>)
 804090e:	f005 fbdf 	bl	80460d0 <HAL_I2CEx_ConfigDigitalFilter>
 8040912:	4603      	mov	r3, r0
 8040914:	2b00      	cmp	r3, #0
 8040916:	d001      	beq.n	804091c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8040918:	f000 fad0 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 804091c:	bf00      	nop
 804091e:	bd80      	pop	{r7, pc}
 8040920:	20000144 	.word	0x20000144
 8040924:	40005c00 	.word	0x40005c00
 8040928:	000186a0 	.word	0x000186a0

0804092c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 804092c:	b580      	push	{r7, lr}
 804092e:	b08e      	sub	sp, #56	; 0x38
 8040930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8040932:	1d3b      	adds	r3, r7, #4
 8040934:	2234      	movs	r2, #52	; 0x34
 8040936:	2100      	movs	r1, #0
 8040938:	4618      	mov	r0, r3
 804093a:	f00c fa2f 	bl	804cd9c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 804093e:	4b39      	ldr	r3, [pc, #228]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040940:	4a39      	ldr	r2, [pc, #228]	; (8040a28 <MX_LTDC_Init+0xfc>)
 8040942:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8040944:	4b37      	ldr	r3, [pc, #220]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040946:	2200      	movs	r2, #0
 8040948:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 804094a:	4b36      	ldr	r3, [pc, #216]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804094c:	2200      	movs	r2, #0
 804094e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8040950:	4b34      	ldr	r3, [pc, #208]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040952:	2200      	movs	r2, #0
 8040954:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8040956:	4b33      	ldr	r3, [pc, #204]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040958:	2200      	movs	r2, #0
 804095a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 804095c:	4b31      	ldr	r3, [pc, #196]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804095e:	2209      	movs	r2, #9
 8040960:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8040962:	4b30      	ldr	r3, [pc, #192]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040964:	2201      	movs	r2, #1
 8040966:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8040968:	4b2e      	ldr	r3, [pc, #184]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804096a:	221d      	movs	r2, #29
 804096c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 804096e:	4b2d      	ldr	r3, [pc, #180]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040970:	2203      	movs	r2, #3
 8040972:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8040974:	4b2b      	ldr	r3, [pc, #172]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040976:	f240 120d 	movw	r2, #269	; 0x10d
 804097a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 804097c:	4b29      	ldr	r3, [pc, #164]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804097e:	f240 1243 	movw	r2, #323	; 0x143
 8040982:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8040984:	4b27      	ldr	r3, [pc, #156]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040986:	f240 1217 	movw	r2, #279	; 0x117
 804098a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 804098c:	4b25      	ldr	r3, [pc, #148]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804098e:	f240 1247 	movw	r2, #327	; 0x147
 8040992:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8040994:	4b23      	ldr	r3, [pc, #140]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040996:	2200      	movs	r2, #0
 8040998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 804099c:	4b21      	ldr	r3, [pc, #132]	; (8040a24 <MX_LTDC_Init+0xf8>)
 804099e:	2200      	movs	r2, #0
 80409a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80409a4:	4b1f      	ldr	r3, [pc, #124]	; (8040a24 <MX_LTDC_Init+0xf8>)
 80409a6:	2200      	movs	r2, #0
 80409a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80409ac:	481d      	ldr	r0, [pc, #116]	; (8040a24 <MX_LTDC_Init+0xf8>)
 80409ae:	f005 fbcf 	bl	8046150 <HAL_LTDC_Init>
 80409b2:	4603      	mov	r3, r0
 80409b4:	2b00      	cmp	r3, #0
 80409b6:	d001      	beq.n	80409bc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80409b8:	f000 fa80 	bl	8040ebc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80409bc:	2300      	movs	r3, #0
 80409be:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80409c0:	23f0      	movs	r3, #240	; 0xf0
 80409c2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80409c4:	2300      	movs	r3, #0
 80409c6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80409c8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409cc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80409ce:	2302      	movs	r3, #2
 80409d0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80409d2:	23ff      	movs	r3, #255	; 0xff
 80409d4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80409d6:	2300      	movs	r3, #0
 80409d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80409da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80409de:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80409e0:	2307      	movs	r3, #7
 80409e2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80409e4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80409e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80409ea:	23f0      	movs	r3, #240	; 0xf0
 80409ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80409ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80409f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80409f4:	2300      	movs	r3, #0
 80409f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80409fa:	2300      	movs	r3, #0
 80409fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8040a00:	2300      	movs	r3, #0
 8040a02:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8040a06:	1d3b      	adds	r3, r7, #4
 8040a08:	2200      	movs	r2, #0
 8040a0a:	4619      	mov	r1, r3
 8040a0c:	4805      	ldr	r0, [pc, #20]	; (8040a24 <MX_LTDC_Init+0xf8>)
 8040a0e:	f005 fd31 	bl	8046474 <HAL_LTDC_ConfigLayer>
 8040a12:	4603      	mov	r3, r0
 8040a14:	2b00      	cmp	r3, #0
 8040a16:	d001      	beq.n	8040a1c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8040a18:	f000 fa50 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8040a1c:	bf00      	nop
 8040a1e:	3738      	adds	r7, #56	; 0x38
 8040a20:	46bd      	mov	sp, r7
 8040a22:	bd80      	pop	{r7, pc}
 8040a24:	20000198 	.word	0x20000198
 8040a28:	40016800 	.word	0x40016800

08040a2c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8040a2c:	b580      	push	{r7, lr}
 8040a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8040a30:	4b17      	ldr	r3, [pc, #92]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a32:	4a18      	ldr	r2, [pc, #96]	; (8040a94 <MX_SPI5_Init+0x68>)
 8040a34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8040a36:	4b16      	ldr	r3, [pc, #88]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8040a3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8040a3e:	4b14      	ldr	r3, [pc, #80]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a40:	2200      	movs	r2, #0
 8040a42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8040a44:	4b12      	ldr	r3, [pc, #72]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a46:	2200      	movs	r2, #0
 8040a48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8040a4a:	4b11      	ldr	r3, [pc, #68]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a4c:	2200      	movs	r2, #0
 8040a4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8040a50:	4b0f      	ldr	r3, [pc, #60]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a52:	2200      	movs	r2, #0
 8040a54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8040a56:	4b0e      	ldr	r3, [pc, #56]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8040a5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8040a5e:	4b0c      	ldr	r3, [pc, #48]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a60:	2218      	movs	r2, #24
 8040a62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8040a64:	4b0a      	ldr	r3, [pc, #40]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a66:	2200      	movs	r2, #0
 8040a68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8040a6a:	4b09      	ldr	r3, [pc, #36]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a6c:	2200      	movs	r2, #0
 8040a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040a70:	4b07      	ldr	r3, [pc, #28]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a72:	2200      	movs	r2, #0
 8040a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8040a76:	4b06      	ldr	r3, [pc, #24]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a78:	220a      	movs	r2, #10
 8040a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8040a7c:	4804      	ldr	r0, [pc, #16]	; (8040a90 <MX_SPI5_Init+0x64>)
 8040a7e:	f006 fe92 	bl	80477a6 <HAL_SPI_Init>
 8040a82:	4603      	mov	r3, r0
 8040a84:	2b00      	cmp	r3, #0
 8040a86:	d001      	beq.n	8040a8c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8040a88:	f000 fa18 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8040a8c:	bf00      	nop
 8040a8e:	bd80      	pop	{r7, pc}
 8040a90:	20000240 	.word	0x20000240
 8040a94:	40015000 	.word	0x40015000

08040a98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8040a98:	b580      	push	{r7, lr}
 8040a9a:	b086      	sub	sp, #24
 8040a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8040a9e:	f107 0308 	add.w	r3, r7, #8
 8040aa2:	2200      	movs	r2, #0
 8040aa4:	601a      	str	r2, [r3, #0]
 8040aa6:	605a      	str	r2, [r3, #4]
 8040aa8:	609a      	str	r2, [r3, #8]
 8040aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040aac:	463b      	mov	r3, r7
 8040aae:	2200      	movs	r2, #0
 8040ab0:	601a      	str	r2, [r3, #0]
 8040ab2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8040ab4:	4b1e      	ldr	r3, [pc, #120]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ab6:	4a1f      	ldr	r2, [pc, #124]	; (8040b34 <MX_TIM1_Init+0x9c>)
 8040ab8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8040aba:	4b1d      	ldr	r3, [pc, #116]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040abc:	2200      	movs	r2, #0
 8040abe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040ac0:	4b1b      	ldr	r3, [pc, #108]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ac2:	2200      	movs	r2, #0
 8040ac4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8040ac6:	4b1a      	ldr	r3, [pc, #104]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040ace:	4b18      	ldr	r3, [pc, #96]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ad0:	2200      	movs	r2, #0
 8040ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8040ad4:	4b16      	ldr	r3, [pc, #88]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ad6:	2200      	movs	r2, #0
 8040ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040ada:	4b15      	ldr	r3, [pc, #84]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040adc:	2200      	movs	r2, #0
 8040ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8040ae0:	4813      	ldr	r0, [pc, #76]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040ae2:	f007 fc3f 	bl	8048364 <HAL_TIM_Base_Init>
 8040ae6:	4603      	mov	r3, r0
 8040ae8:	2b00      	cmp	r3, #0
 8040aea:	d001      	beq.n	8040af0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8040aec:	f000 f9e6 	bl	8040ebc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8040af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8040af6:	f107 0308 	add.w	r3, r7, #8
 8040afa:	4619      	mov	r1, r3
 8040afc:	480c      	ldr	r0, [pc, #48]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040afe:	f007 fdf9 	bl	80486f4 <HAL_TIM_ConfigClockSource>
 8040b02:	4603      	mov	r3, r0
 8040b04:	2b00      	cmp	r3, #0
 8040b06:	d001      	beq.n	8040b0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8040b08:	f000 f9d8 	bl	8040ebc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040b0c:	2300      	movs	r3, #0
 8040b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8040b10:	2300      	movs	r3, #0
 8040b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8040b14:	463b      	mov	r3, r7
 8040b16:	4619      	mov	r1, r3
 8040b18:	4805      	ldr	r0, [pc, #20]	; (8040b30 <MX_TIM1_Init+0x98>)
 8040b1a:	f008 f815 	bl	8048b48 <HAL_TIMEx_MasterConfigSynchronization>
 8040b1e:	4603      	mov	r3, r0
 8040b20:	2b00      	cmp	r3, #0
 8040b22:	d001      	beq.n	8040b28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8040b24:	f000 f9ca 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8040b28:	bf00      	nop
 8040b2a:	3718      	adds	r7, #24
 8040b2c:	46bd      	mov	sp, r7
 8040b2e:	bd80      	pop	{r7, pc}
 8040b30:	20000298 	.word	0x20000298
 8040b34:	40010000 	.word	0x40010000

08040b38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040b38:	b580      	push	{r7, lr}
 8040b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040b3c:	4b11      	ldr	r3, [pc, #68]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b3e:	4a12      	ldr	r2, [pc, #72]	; (8040b88 <MX_USART1_UART_Init+0x50>)
 8040b40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040b42:	4b10      	ldr	r3, [pc, #64]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040b48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040b4a:	4b0e      	ldr	r3, [pc, #56]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b4c:	2200      	movs	r2, #0
 8040b4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040b50:	4b0c      	ldr	r3, [pc, #48]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b52:	2200      	movs	r2, #0
 8040b54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8040b56:	4b0b      	ldr	r3, [pc, #44]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b58:	2200      	movs	r2, #0
 8040b5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040b5c:	4b09      	ldr	r3, [pc, #36]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b5e:	220c      	movs	r2, #12
 8040b60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040b62:	4b08      	ldr	r3, [pc, #32]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b64:	2200      	movs	r2, #0
 8040b66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040b68:	4b06      	ldr	r3, [pc, #24]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b6a:	2200      	movs	r2, #0
 8040b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040b6e:	4805      	ldr	r0, [pc, #20]	; (8040b84 <MX_USART1_UART_Init+0x4c>)
 8040b70:	f008 f87a 	bl	8048c68 <HAL_UART_Init>
 8040b74:	4603      	mov	r3, r0
 8040b76:	2b00      	cmp	r3, #0
 8040b78:	d001      	beq.n	8040b7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8040b7a:	f000 f99f 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040b7e:	bf00      	nop
 8040b80:	bd80      	pop	{r7, pc}
 8040b82:	bf00      	nop
 8040b84:	200002e0 	.word	0x200002e0
 8040b88:	40011000 	.word	0x40011000

08040b8c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040b8c:	b580      	push	{r7, lr}
 8040b8e:	b088      	sub	sp, #32
 8040b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8040b92:	1d3b      	adds	r3, r7, #4
 8040b94:	2200      	movs	r2, #0
 8040b96:	601a      	str	r2, [r3, #0]
 8040b98:	605a      	str	r2, [r3, #4]
 8040b9a:	609a      	str	r2, [r3, #8]
 8040b9c:	60da      	str	r2, [r3, #12]
 8040b9e:	611a      	str	r2, [r3, #16]
 8040ba0:	615a      	str	r2, [r3, #20]
 8040ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8040ba4:	4b1f      	ldr	r3, [pc, #124]	; (8040c24 <MX_FMC_Init+0x98>)
 8040ba6:	4a20      	ldr	r2, [pc, #128]	; (8040c28 <MX_FMC_Init+0x9c>)
 8040ba8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8040baa:	4b1e      	ldr	r3, [pc, #120]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bac:	2201      	movs	r2, #1
 8040bae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8040bb0:	4b1c      	ldr	r3, [pc, #112]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bb2:	2200      	movs	r2, #0
 8040bb4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8040bb6:	4b1b      	ldr	r3, [pc, #108]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bb8:	2204      	movs	r2, #4
 8040bba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8040bbc:	4b19      	ldr	r3, [pc, #100]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bbe:	2210      	movs	r2, #16
 8040bc0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8040bc2:	4b18      	ldr	r3, [pc, #96]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bc4:	2240      	movs	r2, #64	; 0x40
 8040bc6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8040bc8:	4b16      	ldr	r3, [pc, #88]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8040bce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8040bd0:	4b14      	ldr	r3, [pc, #80]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bd2:	2200      	movs	r2, #0
 8040bd4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8040bd6:	4b13      	ldr	r3, [pc, #76]	; (8040c24 <MX_FMC_Init+0x98>)
 8040bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8040bdc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8040bde:	4b11      	ldr	r3, [pc, #68]	; (8040c24 <MX_FMC_Init+0x98>)
 8040be0:	2200      	movs	r2, #0
 8040be2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8040be4:	4b0f      	ldr	r3, [pc, #60]	; (8040c24 <MX_FMC_Init+0x98>)
 8040be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040bea:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8040bec:	2302      	movs	r3, #2
 8040bee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8040bf0:	2307      	movs	r3, #7
 8040bf2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8040bf4:	2304      	movs	r3, #4
 8040bf6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8040bf8:	2307      	movs	r3, #7
 8040bfa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8040bfc:	2303      	movs	r3, #3
 8040bfe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8040c00:	2302      	movs	r3, #2
 8040c02:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8040c04:	2302      	movs	r3, #2
 8040c06:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8040c08:	1d3b      	adds	r3, r7, #4
 8040c0a:	4619      	mov	r1, r3
 8040c0c:	4805      	ldr	r0, [pc, #20]	; (8040c24 <MX_FMC_Init+0x98>)
 8040c0e:	f006 fd39 	bl	8047684 <HAL_SDRAM_Init>
 8040c12:	4603      	mov	r3, r0
 8040c14:	2b00      	cmp	r3, #0
 8040c16:	d001      	beq.n	8040c1c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8040c18:	f000 f950 	bl	8040ebc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040c1c:	bf00      	nop
 8040c1e:	3720      	adds	r7, #32
 8040c20:	46bd      	mov	sp, r7
 8040c22:	bd80      	pop	{r7, pc}
 8040c24:	20000324 	.word	0x20000324
 8040c28:	a0000140 	.word	0xa0000140

08040c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040c2c:	b580      	push	{r7, lr}
 8040c2e:	b08e      	sub	sp, #56	; 0x38
 8040c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040c36:	2200      	movs	r2, #0
 8040c38:	601a      	str	r2, [r3, #0]
 8040c3a:	605a      	str	r2, [r3, #4]
 8040c3c:	609a      	str	r2, [r3, #8]
 8040c3e:	60da      	str	r2, [r3, #12]
 8040c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c42:	2300      	movs	r3, #0
 8040c44:	623b      	str	r3, [r7, #32]
 8040c46:	4b85      	ldr	r3, [pc, #532]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c4a:	4a84      	ldr	r2, [pc, #528]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c4c:	f043 0304 	orr.w	r3, r3, #4
 8040c50:	6313      	str	r3, [r2, #48]	; 0x30
 8040c52:	4b82      	ldr	r3, [pc, #520]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c56:	f003 0304 	and.w	r3, r3, #4
 8040c5a:	623b      	str	r3, [r7, #32]
 8040c5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040c5e:	2300      	movs	r3, #0
 8040c60:	61fb      	str	r3, [r7, #28]
 8040c62:	4b7e      	ldr	r3, [pc, #504]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c66:	4a7d      	ldr	r2, [pc, #500]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c68:	f043 0320 	orr.w	r3, r3, #32
 8040c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8040c6e:	4b7b      	ldr	r3, [pc, #492]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c72:	f003 0320 	and.w	r3, r3, #32
 8040c76:	61fb      	str	r3, [r7, #28]
 8040c78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040c7a:	2300      	movs	r3, #0
 8040c7c:	61bb      	str	r3, [r7, #24]
 8040c7e:	4b77      	ldr	r3, [pc, #476]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c82:	4a76      	ldr	r2, [pc, #472]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040c88:	6313      	str	r3, [r2, #48]	; 0x30
 8040c8a:	4b74      	ldr	r3, [pc, #464]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040c92:	61bb      	str	r3, [r7, #24]
 8040c94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c96:	2300      	movs	r3, #0
 8040c98:	617b      	str	r3, [r7, #20]
 8040c9a:	4b70      	ldr	r3, [pc, #448]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040c9e:	4a6f      	ldr	r2, [pc, #444]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ca0:	f043 0301 	orr.w	r3, r3, #1
 8040ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8040ca6:	4b6d      	ldr	r3, [pc, #436]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040caa:	f003 0301 	and.w	r3, r3, #1
 8040cae:	617b      	str	r3, [r7, #20]
 8040cb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040cb2:	2300      	movs	r3, #0
 8040cb4:	613b      	str	r3, [r7, #16]
 8040cb6:	4b69      	ldr	r3, [pc, #420]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cba:	4a68      	ldr	r2, [pc, #416]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cbc:	f043 0302 	orr.w	r3, r3, #2
 8040cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8040cc2:	4b66      	ldr	r3, [pc, #408]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cc6:	f003 0302 	and.w	r3, r3, #2
 8040cca:	613b      	str	r3, [r7, #16]
 8040ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040cce:	2300      	movs	r3, #0
 8040cd0:	60fb      	str	r3, [r7, #12]
 8040cd2:	4b62      	ldr	r3, [pc, #392]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cd6:	4a61      	ldr	r2, [pc, #388]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8040cde:	4b5f      	ldr	r3, [pc, #380]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040ce6:	60fb      	str	r3, [r7, #12]
 8040ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040cea:	2300      	movs	r3, #0
 8040cec:	60bb      	str	r3, [r7, #8]
 8040cee:	4b5b      	ldr	r3, [pc, #364]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cf2:	4a5a      	ldr	r2, [pc, #360]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cf4:	f043 0310 	orr.w	r3, r3, #16
 8040cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8040cfa:	4b58      	ldr	r3, [pc, #352]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040cfe:	f003 0310 	and.w	r3, r3, #16
 8040d02:	60bb      	str	r3, [r7, #8]
 8040d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040d06:	2300      	movs	r3, #0
 8040d08:	607b      	str	r3, [r7, #4]
 8040d0a:	4b54      	ldr	r3, [pc, #336]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d0e:	4a53      	ldr	r2, [pc, #332]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d10:	f043 0308 	orr.w	r3, r3, #8
 8040d14:	6313      	str	r3, [r2, #48]	; 0x30
 8040d16:	4b51      	ldr	r3, [pc, #324]	; (8040e5c <MX_GPIO_Init+0x230>)
 8040d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8040d1a:	f003 0308 	and.w	r3, r3, #8
 8040d1e:	607b      	str	r3, [r7, #4]
 8040d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8040d22:	2200      	movs	r2, #0
 8040d24:	2116      	movs	r1, #22
 8040d26:	484e      	ldr	r0, [pc, #312]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040d28:	f003 fc16 	bl	8044558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8040d2c:	2200      	movs	r2, #0
 8040d2e:	2180      	movs	r1, #128	; 0x80
 8040d30:	484c      	ldr	r0, [pc, #304]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d32:	f003 fc11 	bl	8044558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8040d36:	2200      	movs	r2, #0
 8040d38:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8040d3c:	484a      	ldr	r0, [pc, #296]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040d3e:	f003 fc0b 	bl	8044558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8040d42:	2200      	movs	r2, #0
 8040d44:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8040d48:	4848      	ldr	r0, [pc, #288]	; (8040e6c <MX_GPIO_Init+0x240>)
 8040d4a:	f003 fc05 	bl	8044558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8040d4e:	2316      	movs	r3, #22
 8040d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040d52:	2301      	movs	r3, #1
 8040d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d56:	2300      	movs	r3, #0
 8040d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040d5a:	2300      	movs	r3, #0
 8040d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d62:	4619      	mov	r1, r3
 8040d64:	483e      	ldr	r0, [pc, #248]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040d66:	f003 f93f 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8040d6a:	2301      	movs	r3, #1
 8040d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8040d6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8040d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d74:	2300      	movs	r3, #0
 8040d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d7c:	4619      	mov	r1, r3
 8040d7e:	4839      	ldr	r0, [pc, #228]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d80:	f003 f932 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8040d84:	f248 0306 	movw	r3, #32774	; 0x8006
 8040d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040d8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d90:	2300      	movs	r3, #0
 8040d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040d98:	4619      	mov	r1, r3
 8040d9a:	4832      	ldr	r0, [pc, #200]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040d9c:	f003 f924 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8040da0:	2380      	movs	r3, #128	; 0x80
 8040da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040da4:	2301      	movs	r3, #1
 8040da6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040da8:	2300      	movs	r3, #0
 8040daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040dac:	2300      	movs	r3, #0
 8040dae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8040db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040db4:	4619      	mov	r1, r3
 8040db6:	482b      	ldr	r0, [pc, #172]	; (8040e64 <MX_GPIO_Init+0x238>)
 8040db8:	f003 f916 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8040dbc:	2320      	movs	r3, #32
 8040dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8040dc0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8040dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dc6:	2300      	movs	r3, #0
 8040dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8040dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040dce:	4619      	mov	r1, r3
 8040dd0:	4823      	ldr	r0, [pc, #140]	; (8040e60 <MX_GPIO_Init+0x234>)
 8040dd2:	f003 f909 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8040dd6:	2304      	movs	r3, #4
 8040dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040dda:	2300      	movs	r3, #0
 8040ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040dde:	2300      	movs	r3, #0
 8040de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8040de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040de6:	4619      	mov	r1, r3
 8040de8:	4821      	ldr	r0, [pc, #132]	; (8040e70 <MX_GPIO_Init+0x244>)
 8040dea:	f003 f8fd 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8040dee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040df4:	2300      	movs	r3, #0
 8040df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040df8:	2300      	movs	r3, #0
 8040dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8040dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e00:	4619      	mov	r1, r3
 8040e02:	4819      	ldr	r0, [pc, #100]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040e04:	f003 f8f0 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8040e08:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e0e:	2301      	movs	r3, #1
 8040e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e12:	2300      	movs	r3, #0
 8040e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e16:	2300      	movs	r3, #0
 8040e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e1e:	4619      	mov	r1, r3
 8040e20:	4811      	ldr	r0, [pc, #68]	; (8040e68 <MX_GPIO_Init+0x23c>)
 8040e22:	f003 f8e1 	bl	8043fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8040e26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8040e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040e2c:	2301      	movs	r3, #1
 8040e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e30:	2300      	movs	r3, #0
 8040e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e34:	2300      	movs	r3, #0
 8040e36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040e3c:	4619      	mov	r1, r3
 8040e3e:	480b      	ldr	r0, [pc, #44]	; (8040e6c <MX_GPIO_Init+0x240>)
 8040e40:	f003 f8d2 	bl	8043fe8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8040e44:	2200      	movs	r2, #0
 8040e46:	2100      	movs	r1, #0
 8040e48:	2006      	movs	r0, #6
 8040e4a:	f002 fb2d 	bl	80434a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8040e4e:	2006      	movs	r0, #6
 8040e50:	f002 fb46 	bl	80434e0 <HAL_NVIC_EnableIRQ>

}
 8040e54:	bf00      	nop
 8040e56:	3738      	adds	r7, #56	; 0x38
 8040e58:	46bd      	mov	sp, r7
 8040e5a:	bd80      	pop	{r7, pc}
 8040e5c:	40023800 	.word	0x40023800
 8040e60:	40020800 	.word	0x40020800
 8040e64:	40020000 	.word	0x40020000
 8040e68:	40020c00 	.word	0x40020c00
 8040e6c:	40021800 	.word	0x40021800
 8040e70:	40020400 	.word	0x40020400

08040e74 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8040e74:	b580      	push	{r7, lr}
 8040e76:	b082      	sub	sp, #8
 8040e78:	af00      	add	r7, sp, #0
 8040e7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040e7c:	1d39      	adds	r1, r7, #4
 8040e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8040e82:	2201      	movs	r2, #1
 8040e84:	4803      	ldr	r0, [pc, #12]	; (8040e94 <__io_putchar+0x20>)
 8040e86:	f007 ff3c 	bl	8048d02 <HAL_UART_Transmit>
	return ch;
 8040e8a:	687b      	ldr	r3, [r7, #4]
}
 8040e8c:	4618      	mov	r0, r3
 8040e8e:	3708      	adds	r7, #8
 8040e90:	46bd      	mov	sp, r7
 8040e92:	bd80      	pop	{r7, pc}
 8040e94:	200002e0 	.word	0x200002e0

08040e98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040e98:	b580      	push	{r7, lr}
 8040e9a:	b082      	sub	sp, #8
 8040e9c:	af00      	add	r7, sp, #0
 8040e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040ea0:	687b      	ldr	r3, [r7, #4]
 8040ea2:	681b      	ldr	r3, [r3, #0]
 8040ea4:	4a04      	ldr	r2, [pc, #16]	; (8040eb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040ea6:	4293      	cmp	r3, r2
 8040ea8:	d101      	bne.n	8040eae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040eaa:	f002 fa01 	bl	80432b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040eae:	bf00      	nop
 8040eb0:	3708      	adds	r7, #8
 8040eb2:	46bd      	mov	sp, r7
 8040eb4:	bd80      	pop	{r7, pc}
 8040eb6:	bf00      	nop
 8040eb8:	40001000 	.word	0x40001000

08040ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040ebc:	b480      	push	{r7}
 8040ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040ec0:	b672      	cpsid	i
}
 8040ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ec4:	e7fe      	b.n	8040ec4 <Error_Handler+0x8>
	...

08040ec8 <go_to_ota_app>:
 * @brief run ota application
 * @param hurat uart handler receive ota
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8040ec8:	b580      	push	{r7, lr}
 8040eca:	b082      	sub	sp, #8
 8040ecc:	af00      	add	r7, sp, #0
 8040ece:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8040ed0:	480e      	ldr	r0, [pc, #56]	; (8040f0c <go_to_ota_app+0x44>)
 8040ed2:	f00c f8d1 	bl	804d078 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8040ed6:	6878      	ldr	r0, [r7, #4]
 8040ed8:	f000 f820 	bl	8040f1c <ota_download_and_flash>
 8040edc:	4603      	mov	r3, r0
 8040ede:	2b00      	cmp	r3, #0
 8040ee0:	d009      	beq.n	8040ef6 <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8040ee2:	480b      	ldr	r0, [pc, #44]	; (8040f10 <go_to_ota_app+0x48>)
 8040ee4:	f00c f8c8 	bl	804d078 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8040ee8:	2200      	movs	r2, #0
 8040eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040eee:	4809      	ldr	r0, [pc, #36]	; (8040f14 <go_to_ota_app+0x4c>)
 8040ef0:	f003 fb32 	bl	8044558 <HAL_GPIO_WritePin>
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_Delay(10000);
//      HAL_NVIC_SystemReset();
    }
}
 8040ef4:	e006      	b.n	8040f04 <go_to_ota_app+0x3c>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8040ef6:	4808      	ldr	r0, [pc, #32]	; (8040f18 <go_to_ota_app+0x50>)
 8040ef8:	f00c f8be 	bl	804d078 <puts>
      HAL_Delay(10000);
 8040efc:	f242 7010 	movw	r0, #10000	; 0x2710
 8040f00:	f002 f9f6 	bl	80432f0 <HAL_Delay>
}
 8040f04:	bf00      	nop
 8040f06:	3708      	adds	r7, #8
 8040f08:	46bd      	mov	sp, r7
 8040f0a:	bd80      	pop	{r7, pc}
 8040f0c:	0804e200 	.word	0x0804e200
 8040f10:	0804e220 	.word	0x0804e220
 8040f14:	40021800 	.word	0x40021800
 8040f18:	0804e240 	.word	0x0804e240

08040f1c <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8040f1c:	b580      	push	{r7, lr}
 8040f1e:	b084      	sub	sp, #16
 8040f20:	af00      	add	r7, sp, #0
 8040f22:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8040f24:	2300      	movs	r3, #0
 8040f26:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8040f28:	4820      	ldr	r0, [pc, #128]	; (8040fac <ota_download_and_flash+0x90>)
 8040f2a:	f00c f8a5 	bl	804d078 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8040f2e:	4b20      	ldr	r3, [pc, #128]	; (8040fb0 <ota_download_and_flash+0x94>)
 8040f30:	2200      	movs	r2, #0
 8040f32:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8040f34:	4b1f      	ldr	r3, [pc, #124]	; (8040fb4 <ota_download_and_flash+0x98>)
 8040f36:	2200      	movs	r2, #0
 8040f38:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8040f3a:	4b1f      	ldr	r3, [pc, #124]	; (8040fb8 <ota_download_and_flash+0x9c>)
 8040f3c:	2200      	movs	r2, #0
 8040f3e:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8040f40:	4b1e      	ldr	r3, [pc, #120]	; (8040fbc <ota_download_and_flash+0xa0>)
 8040f42:	2201      	movs	r2, #1
 8040f44:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8040f46:	f240 4209 	movw	r2, #1033	; 0x409
 8040f4a:	2100      	movs	r1, #0
 8040f4c:	481c      	ldr	r0, [pc, #112]	; (8040fc0 <ota_download_and_flash+0xa4>)
 8040f4e:	f00b ff25 	bl	804cd9c <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8040f52:	f240 4209 	movw	r2, #1033	; 0x409
 8040f56:	491a      	ldr	r1, [pc, #104]	; (8040fc0 <ota_download_and_flash+0xa4>)
 8040f58:	6878      	ldr	r0, [r7, #4]
 8040f5a:	f000 f835 	bl	8040fc8 <ota_receive_chunk>
 8040f5e:	4603      	mov	r3, r0
 8040f60:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8040f62:	89bb      	ldrh	r3, [r7, #12]
 8040f64:	2b00      	cmp	r3, #0
 8040f66:	d007      	beq.n	8040f78 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8040f68:	89bb      	ldrh	r3, [r7, #12]
 8040f6a:	4619      	mov	r1, r3
 8040f6c:	4814      	ldr	r0, [pc, #80]	; (8040fc0 <ota_download_and_flash+0xa4>)
 8040f6e:	f000 f90b 	bl	8041188 <ota_process_data>
 8040f72:	4603      	mov	r3, r0
 8040f74:	73fb      	strb	r3, [r7, #15]
 8040f76:	e001      	b.n	8040f7c <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8040f78:	2301      	movs	r3, #1
 8040f7a:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8040f7c:	7bfb      	ldrb	r3, [r7, #15]
 8040f7e:	2b00      	cmp	r3, #0
 8040f80:	d007      	beq.n	8040f92 <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8040f82:	4810      	ldr	r0, [pc, #64]	; (8040fc4 <ota_download_and_flash+0xa8>)
 8040f84:	f00c f878 	bl	804d078 <puts>
			ota_send_resp(huart, OTA_NACK);
 8040f88:	2101      	movs	r1, #1
 8040f8a:	6878      	ldr	r0, [r7, #4]
 8040f8c:	f000 f9ee 	bl	804136c <ota_send_resp>
			break;
 8040f90:	e007      	b.n	8040fa2 <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8040f92:	2100      	movs	r1, #0
 8040f94:	6878      	ldr	r0, [r7, #4]
 8040f96:	f000 f9e9 	bl	804136c <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8040f9a:	4b08      	ldr	r3, [pc, #32]	; (8040fbc <ota_download_and_flash+0xa0>)
 8040f9c:	781b      	ldrb	r3, [r3, #0]
 8040f9e:	2b00      	cmp	r3, #0
 8040fa0:	d1d1      	bne.n	8040f46 <ota_download_and_flash+0x2a>

	return ret;
 8040fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8040fa4:	4618      	mov	r0, r3
 8040fa6:	3710      	adds	r7, #16
 8040fa8:	46bd      	mov	sp, r7
 8040faa:	bd80      	pop	{r7, pc}
 8040fac:	0804e26c 	.word	0x0804e26c
 8040fb0:	200003c0 	.word	0x200003c0
 8040fb4:	200003c8 	.word	0x200003c8
 8040fb8:	200003c4 	.word	0x200003c4
 8040fbc:	200003bd 	.word	0x200003bd
 8040fc0:	200003cc 	.word	0x200003cc
 8040fc4:	0804e288 	.word	0x0804e288

08040fc8 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8040fc8:	b580      	push	{r7, lr}
 8040fca:	b08a      	sub	sp, #40	; 0x28
 8040fcc:	af00      	add	r7, sp, #0
 8040fce:	60f8      	str	r0, [r7, #12]
 8040fd0:	60b9      	str	r1, [r7, #8]
 8040fd2:	4613      	mov	r3, r2
 8040fd4:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 8040fd6:	2300      	movs	r3, #0
 8040fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8040fda:	2300      	movs	r3, #0
 8040fdc:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8040fde:	2300      	movs	r3, #0
 8040fe0:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8040fe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8040fe4:	68ba      	ldr	r2, [r7, #8]
 8040fe6:	18d1      	adds	r1, r2, r3
 8040fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8040fec:	2201      	movs	r2, #1
 8040fee:	68f8      	ldr	r0, [r7, #12]
 8040ff0:	f007 ff19 	bl	8048e26 <HAL_UART_Receive>
 8040ff4:	4603      	mov	r3, r0
 8040ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8040ff8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8040ffc:	2b00      	cmp	r3, #0
 8040ffe:	f040 809a 	bne.w	8041136 <ota_receive_chunk+0x16e>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 8041002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041004:	1c5a      	adds	r2, r3, #1
 8041006:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041008:	461a      	mov	r2, r3
 804100a:	68bb      	ldr	r3, [r7, #8]
 804100c:	4413      	add	r3, r2
 804100e:	781b      	ldrb	r3, [r3, #0]
 8041010:	2baa      	cmp	r3, #170	; 0xaa
 8041012:	f040 8092 	bne.w	804113a <ota_receive_chunk+0x172>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8041016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041018:	1c5a      	adds	r2, r3, #1
 804101a:	84ba      	strh	r2, [r7, #36]	; 0x24
 804101c:	461a      	mov	r2, r3
 804101e:	68bb      	ldr	r3, [r7, #8]
 8041020:	1899      	adds	r1, r3, r2
 8041022:	f04f 33ff 	mov.w	r3, #4294967295
 8041026:	2201      	movs	r2, #1
 8041028:	68f8      	ldr	r0, [r7, #12]
 804102a:	f007 fefc 	bl	8048e26 <HAL_UART_Receive>
 804102e:	4603      	mov	r3, r0
 8041030:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8041032:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041036:	2b00      	cmp	r3, #0
 8041038:	f040 8081 	bne.w	804113e <ota_receive_chunk+0x176>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 804103c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804103e:	68ba      	ldr	r2, [r7, #8]
 8041040:	18d1      	adds	r1, r2, r3
 8041042:	f04f 33ff 	mov.w	r3, #4294967295
 8041046:	2202      	movs	r2, #2
 8041048:	68f8      	ldr	r0, [r7, #12]
 804104a:	f007 feec 	bl	8048e26 <HAL_UART_Receive>
 804104e:	4603      	mov	r3, r0
 8041050:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8041052:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041056:	2b00      	cmp	r3, #0
 8041058:	d173      	bne.n	8041142 <ota_receive_chunk+0x17a>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 804105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804105c:	68ba      	ldr	r2, [r7, #8]
 804105e:	4413      	add	r3, r2
 8041060:	881b      	ldrh	r3, [r3, #0]
 8041062:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 8041064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041066:	3302      	adds	r3, #2
 8041068:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 804106a:	2300      	movs	r3, #0
 804106c:	847b      	strh	r3, [r7, #34]	; 0x22
 804106e:	e014      	b.n	804109a <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8041070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8041072:	1c5a      	adds	r2, r3, #1
 8041074:	84ba      	strh	r2, [r7, #36]	; 0x24
 8041076:	461a      	mov	r2, r3
 8041078:	68bb      	ldr	r3, [r7, #8]
 804107a:	1899      	adds	r1, r3, r2
 804107c:	f04f 33ff 	mov.w	r3, #4294967295
 8041080:	2201      	movs	r2, #1
 8041082:	68f8      	ldr	r0, [r7, #12]
 8041084:	f007 fecf 	bl	8048e26 <HAL_UART_Receive>
 8041088:	4603      	mov	r3, r0
 804108a:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 804108c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041090:	2b00      	cmp	r3, #0
 8041092:	d107      	bne.n	80410a4 <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 8041094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8041096:	3301      	adds	r3, #1
 8041098:	847b      	strh	r3, [r7, #34]	; 0x22
 804109a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 804109c:	8afb      	ldrh	r3, [r7, #22]
 804109e:	429a      	cmp	r2, r3
 80410a0:	d3e6      	bcc.n	8041070 <ota_receive_chunk+0xa8>
 80410a2:	e000      	b.n	80410a6 <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 80410a4:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 80410a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410aa:	2b00      	cmp	r3, #0
 80410ac:	d14b      	bne.n	8041146 <ota_receive_chunk+0x17e>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 80410ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410b0:	68ba      	ldr	r2, [r7, #8]
 80410b2:	18d1      	adds	r1, r2, r3
 80410b4:	f04f 33ff 	mov.w	r3, #4294967295
 80410b8:	2204      	movs	r2, #4
 80410ba:	68f8      	ldr	r0, [r7, #12]
 80410bc:	f007 feb3 	bl	8048e26 <HAL_UART_Receive>
 80410c0:	4603      	mov	r3, r0
 80410c2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80410c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410c8:	2b00      	cmp	r3, #0
 80410ca:	d13e      	bne.n	804114a <ota_receive_chunk+0x182>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 80410cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410ce:	68ba      	ldr	r2, [r7, #8]
 80410d0:	4413      	add	r3, r2
 80410d2:	681b      	ldr	r3, [r3, #0]
 80410d4:	61bb      	str	r3, [r7, #24]
		index +=4u;
 80410d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410d8:	3304      	adds	r3, #4
 80410da:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, buf, 1, HAL_MAX_DELAY);
 80410dc:	f04f 33ff 	mov.w	r3, #4294967295
 80410e0:	2201      	movs	r2, #1
 80410e2:	68b9      	ldr	r1, [r7, #8]
 80410e4:	68f8      	ldr	r0, [r7, #12]
 80410e6:	f007 fe9e 	bl	8048e26 <HAL_UART_Receive>
 80410ea:	4603      	mov	r3, r0
 80410ec:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80410ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80410f2:	2b00      	cmp	r3, #0
 80410f4:	d12b      	bne.n	804114e <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 80410f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80410f8:	1c5a      	adds	r2, r3, #1
 80410fa:	84ba      	strh	r2, [r7, #36]	; 0x24
 80410fc:	461a      	mov	r2, r3
 80410fe:	68bb      	ldr	r3, [r7, #8]
 8041100:	4413      	add	r3, r2
 8041102:	781b      	ldrb	r3, [r3, #0]
 8041104:	2bbb      	cmp	r3, #187	; 0xbb
 8041106:	d002      	beq.n	804110e <ota_receive_chunk+0x146>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 8041108:	2301      	movs	r3, #1
 804110a:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 804110c:	e020      	b.n	8041150 <ota_receive_chunk+0x188>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 804110e:	68bb      	ldr	r3, [r7, #8]
 8041110:	3304      	adds	r3, #4
 8041112:	8afa      	ldrh	r2, [r7, #22]
 8041114:	4611      	mov	r1, r2
 8041116:	4618      	mov	r0, r3
 8041118:	f000 f954 	bl	80413c4 <ota_calcCRC>
 804111c:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 804111e:	69fa      	ldr	r2, [r7, #28]
 8041120:	69bb      	ldr	r3, [r7, #24]
 8041122:	429a      	cmp	r2, r3
 8041124:	d014      	beq.n	8041150 <ota_receive_chunk+0x188>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8041126:	69ba      	ldr	r2, [r7, #24]
 8041128:	69f9      	ldr	r1, [r7, #28]
 804112a:	4815      	ldr	r0, [pc, #84]	; (8041180 <ota_receive_chunk+0x1b8>)
 804112c:	f00b ff1e 	bl	804cf6c <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 8041130:	2301      	movs	r3, #1
 8041132:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8041134:	e00c      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 8041136:	bf00      	nop
 8041138:	e00a      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 804113a:	bf00      	nop
 804113c:	e008      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 804113e:	bf00      	nop
 8041140:	e006      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 8041142:	bf00      	nop
 8041144:	e004      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 8041146:	bf00      	nop
 8041148:	e002      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 804114a:	bf00      	nop
 804114c:	e000      	b.n	8041150 <ota_receive_chunk+0x188>
			break;
 804114e:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 8041150:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8041154:	2b00      	cmp	r3, #0
 8041156:	d001      	beq.n	804115c <ota_receive_chunk+0x194>
	{
		//clear the index if error
		index = 0u;
 8041158:	2300      	movs	r3, #0
 804115a:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 804115c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 804115e:	88fb      	ldrh	r3, [r7, #6]
 8041160:	429a      	cmp	r2, r3
 8041162:	d907      	bls.n	8041174 <ota_receive_chunk+0x1ac>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8041164:	88fb      	ldrh	r3, [r7, #6]
 8041166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8041168:	4619      	mov	r1, r3
 804116a:	4806      	ldr	r0, [pc, #24]	; (8041184 <ota_receive_chunk+0x1bc>)
 804116c:	f00b fefe 	bl	804cf6c <iprintf>
															  	  max_len, index );
		index = 0u;
 8041170:	2300      	movs	r3, #0
 8041172:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 8041174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 8041176:	4618      	mov	r0, r3
 8041178:	3728      	adds	r7, #40	; 0x28
 804117a:	46bd      	mov	sp, r7
 804117c:	bd80      	pop	{r7, pc}
 804117e:	bf00      	nop
 8041180:	0804e298 	.word	0x0804e298
 8041184:	0804e2d8 	.word	0x0804e2d8

08041188 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8041188:	b580      	push	{r7, lr}
 804118a:	b08a      	sub	sp, #40	; 0x28
 804118c:	af00      	add	r7, sp, #0
 804118e:	6078      	str	r0, [r7, #4]
 8041190:	460b      	mov	r3, r1
 8041192:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 8041194:	2301      	movs	r3, #1
 8041196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf== NULL) || (len == 0u))
 804119a:	687b      	ldr	r3, [r7, #4]
 804119c:	2b00      	cmp	r3, #0
 804119e:	f000 80ba 	beq.w	8041316 <ota_process_data+0x18e>
 80411a2:	887b      	ldrh	r3, [r7, #2]
 80411a4:	2b00      	cmp	r3, #0
 80411a6:	f000 80b6 	beq.w	8041316 <ota_process_data+0x18e>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 80411aa:	687b      	ldr	r3, [r7, #4]
 80411ac:	623b      	str	r3, [r7, #32]
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 80411ae:	6a3b      	ldr	r3, [r7, #32]
 80411b0:	785b      	ldrb	r3, [r3, #1]
 80411b2:	2b00      	cmp	r3, #0
 80411b4:	d104      	bne.n	80411c0 <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 80411b6:	6a3b      	ldr	r3, [r7, #32]
 80411b8:	791b      	ldrb	r3, [r3, #4]
 80411ba:	2b02      	cmp	r3, #2
 80411bc:	f000 80ad 	beq.w	804131a <ota_process_data+0x192>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 80411c0:	4b5d      	ldr	r3, [pc, #372]	; (8041338 <ota_process_data+0x1b0>)
 80411c2:	781b      	ldrb	r3, [r3, #0]
 80411c4:	2b04      	cmp	r3, #4
 80411c6:	f200 80a2 	bhi.w	804130e <ota_process_data+0x186>
 80411ca:	a201      	add	r2, pc, #4	; (adr r2, 80411d0 <ota_process_data+0x48>)
 80411cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80411d0:	080411e5 	.word	0x080411e5
 80411d4:	080411f3 	.word	0x080411f3
 80411d8:	0804121f 	.word	0x0804121f
 80411dc:	08041259 	.word	0x08041259
 80411e0:	080412b9 	.word	0x080412b9
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 80411e4:	4855      	ldr	r0, [pc, #340]	; (804133c <ota_process_data+0x1b4>)
 80411e6:	f00b ff47 	bl	804d078 <puts>
				ret = OTA_EX_OK;
 80411ea:	2300      	movs	r3, #0
 80411ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80411f0:	e09c      	b.n	804132c <ota_process_data+0x1a4>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 80411f2:	687b      	ldr	r3, [r7, #4]
 80411f4:	60bb      	str	r3, [r7, #8]
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80411f6:	68bb      	ldr	r3, [r7, #8]
 80411f8:	785b      	ldrb	r3, [r3, #1]
 80411fa:	2b00      	cmp	r3, #0
 80411fc:	f040 808f 	bne.w	804131e <ota_process_data+0x196>
				{
					if( cmd->cmd == OTA_CMD_START)
 8041200:	68bb      	ldr	r3, [r7, #8]
 8041202:	791b      	ldrb	r3, [r3, #4]
 8041204:	2b00      	cmp	r3, #0
 8041206:	f040 808a 	bne.w	804131e <ota_process_data+0x196>
					{
						printf("Received OTA Start command\r\n");
 804120a:	484d      	ldr	r0, [pc, #308]	; (8041340 <ota_process_data+0x1b8>)
 804120c:	f00b ff34 	bl	804d078 <puts>
						ota_state = OTA_STATE_HEADER;
 8041210:	4b49      	ldr	r3, [pc, #292]	; (8041338 <ota_process_data+0x1b0>)
 8041212:	2202      	movs	r2, #2
 8041214:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 8041216:	2300      	movs	r3, #0
 8041218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 804121c:	e07f      	b.n	804131e <ota_process_data+0x196>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 804121e:	687b      	ldr	r3, [r7, #4]
 8041220:	60fb      	str	r3, [r7, #12]

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 8041222:	68fb      	ldr	r3, [r7, #12]
 8041224:	785b      	ldrb	r3, [r3, #1]
 8041226:	2b02      	cmp	r3, #2
 8041228:	d17b      	bne.n	8041322 <ota_process_data+0x19a>
				{
					ota_fw_total_size = header->meta_data.package_size;
 804122a:	68fb      	ldr	r3, [r7, #12]
 804122c:	685b      	ldr	r3, [r3, #4]
 804122e:	4a45      	ldr	r2, [pc, #276]	; (8041344 <ota_process_data+0x1bc>)
 8041230:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8041232:	68fb      	ldr	r3, [r7, #12]
 8041234:	689b      	ldr	r3, [r3, #8]
 8041236:	4a44      	ldr	r2, [pc, #272]	; (8041348 <ota_process_data+0x1c0>)
 8041238:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 804123a:	4b44      	ldr	r3, [pc, #272]	; (804134c <ota_process_data+0x1c4>)
 804123c:	681b      	ldr	r3, [r3, #0]
 804123e:	4a42      	ldr	r2, [pc, #264]	; (8041348 <ota_process_data+0x1c0>)
 8041240:	6812      	ldr	r2, [r2, #0]
 8041242:	4619      	mov	r1, r3
 8041244:	4842      	ldr	r0, [pc, #264]	; (8041350 <ota_process_data+0x1c8>)
 8041246:	f00b fe91 	bl	804cf6c <iprintf>
													ota_fw_received_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 804124a:	4b3b      	ldr	r3, [pc, #236]	; (8041338 <ota_process_data+0x1b0>)
 804124c:	2203      	movs	r2, #3
 804124e:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 8041250:	2300      	movs	r3, #0
 8041252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				}
			}
			break;
 8041256:	e064      	b.n	8041322 <ota_process_data+0x19a>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 8041258:	687b      	ldr	r3, [r7, #4]
 804125a:	617b      	str	r3, [r7, #20]
				uint16_t			data_len = data->data_len;
 804125c:	697b      	ldr	r3, [r7, #20]
 804125e:	789a      	ldrb	r2, [r3, #2]
 8041260:	78db      	ldrb	r3, [r3, #3]
 8041262:	021b      	lsls	r3, r3, #8
 8041264:	4313      	orrs	r3, r2
 8041266:	827b      	strh	r3, [r7, #18]
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 8041268:	2301      	movs	r3, #1
 804126a:	747b      	strb	r3, [r7, #17]

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 804126c:	697b      	ldr	r3, [r7, #20]
 804126e:	785b      	ldrb	r3, [r3, #1]
 8041270:	2b01      	cmp	r3, #1
 8041272:	d158      	bne.n	8041326 <ota_process_data+0x19e>
					bool is_first_block = false;
 8041274:	2300      	movs	r3, #0
 8041276:	743b      	strb	r3, [r7, #16]

					if( ota_fw_received_size == 0){
 8041278:	4b34      	ldr	r3, [pc, #208]	; (804134c <ota_process_data+0x1c4>)
 804127a:	681b      	ldr	r3, [r3, #0]
 804127c:	2b00      	cmp	r3, #0
 804127e:	d101      	bne.n	8041284 <ota_process_data+0xfc>
						// This is the first block
						is_first_block = true;
 8041280:	2301      	movs	r3, #1
 8041282:	743b      	strb	r3, [r7, #16]

					/* Write the chunk to the Flash */
					// TODO: write data to slot
					// ex = write_data_to_slot ()

					if( ex != HAL_OK)
 8041284:	7c7b      	ldrb	r3, [r7, #17]
 8041286:	2b00      	cmp	r3, #0
 8041288:	d04d      	beq.n	8041326 <ota_process_data+0x19e>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 804128a:	4b30      	ldr	r3, [pc, #192]	; (804134c <ota_process_data+0x1c4>)
 804128c:	681b      	ldr	r3, [r3, #0]
 804128e:	0a99      	lsrs	r1, r3, #10
 8041290:	4b2c      	ldr	r3, [pc, #176]	; (8041344 <ota_process_data+0x1bc>)
 8041292:	681b      	ldr	r3, [r3, #0]
 8041294:	0a9b      	lsrs	r3, r3, #10
 8041296:	461a      	mov	r2, r3
 8041298:	482e      	ldr	r0, [pc, #184]	; (8041354 <ota_process_data+0x1cc>)
 804129a:	f00b fe67 	bl	804cf6c <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 804129e:	4b2b      	ldr	r3, [pc, #172]	; (804134c <ota_process_data+0x1c4>)
 80412a0:	681a      	ldr	r2, [r3, #0]
 80412a2:	4b28      	ldr	r3, [pc, #160]	; (8041344 <ota_process_data+0x1bc>)
 80412a4:	681b      	ldr	r3, [r3, #0]
 80412a6:	429a      	cmp	r2, r3
 80412a8:	d302      	bcc.n	80412b0 <ota_process_data+0x128>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 80412aa:	4b23      	ldr	r3, [pc, #140]	; (8041338 <ota_process_data+0x1b0>)
 80412ac:	2204      	movs	r2, #4
 80412ae:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 80412b0:	2300      	movs	r3, #0
 80412b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 80412b6:	e036      	b.n	8041326 <ota_process_data+0x19e>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 80412b8:	687b      	ldr	r3, [r7, #4]
 80412ba:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80412bc:	69fb      	ldr	r3, [r7, #28]
 80412be:	785b      	ldrb	r3, [r3, #1]
 80412c0:	2b00      	cmp	r3, #0
 80412c2:	d132      	bne.n	804132a <ota_process_data+0x1a2>
				{
					if( cmd->cmd )
 80412c4:	69fb      	ldr	r3, [r7, #28]
 80412c6:	791b      	ldrb	r3, [r3, #4]
 80412c8:	2b00      	cmp	r3, #0
 80412ca:	d02e      	beq.n	804132a <ota_process_data+0x1a2>
					{
						printf("Received OTA END COMMAND\r\n");
 80412cc:	4822      	ldr	r0, [pc, #136]	; (8041358 <ota_process_data+0x1d0>)
 80412ce:	f00b fed3 	bl	804d078 <puts>

						printf("Validating the received Binary....\r\n");
 80412d2:	4822      	ldr	r0, [pc, #136]	; (804135c <ota_process_data+0x1d4>)
 80412d4:	f00b fed0 	bl	804d078 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR
 80412d8:	4b1a      	ldr	r3, [pc, #104]	; (8041344 <ota_process_data+0x1bc>)
 80412da:	681b      	ldr	r3, [r3, #0]
 80412dc:	4619      	mov	r1, r3
 80412de:	4820      	ldr	r0, [pc, #128]	; (8041360 <ota_process_data+0x1d8>)
 80412e0:	f000 f870 	bl	80413c4 <ota_calcCRC>
 80412e4:	61b8      	str	r0, [r7, #24]
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 80412e6:	4b18      	ldr	r3, [pc, #96]	; (8041348 <ota_process_data+0x1c0>)
 80412e8:	681b      	ldr	r3, [r3, #0]
 80412ea:	69ba      	ldr	r2, [r7, #24]
 80412ec:	429a      	cmp	r2, r3
 80412ee:	d007      	beq.n	8041300 <ota_process_data+0x178>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 80412f0:	4b15      	ldr	r3, [pc, #84]	; (8041348 <ota_process_data+0x1c0>)
 80412f2:	681b      	ldr	r3, [r3, #0]
 80412f4:	461a      	mov	r2, r3
 80412f6:	69b9      	ldr	r1, [r7, #24]
 80412f8:	481a      	ldr	r0, [pc, #104]	; (8041364 <ota_process_data+0x1dc>)
 80412fa:	f00b fe37 	bl	804cf6c <iprintf>
																			cal_crc, ota_fw_crc);
							break;
 80412fe:	e015      	b.n	804132c <ota_process_data+0x1a4>
						}

						printf("Done!\r\n");
 8041300:	4819      	ldr	r0, [pc, #100]	; (8041368 <ota_process_data+0x1e0>)
 8041302:	f00b feb9 	bl	804d078 <puts>

						// TODO: Update CFG

						ret = OTA_EX_OK;
 8041306:	2300      	movs	r3, #0
 8041308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 804130c:	e00d      	b.n	804132a <ota_process_data+0x1a2>

			default:
			{
				ret = OTA_EX_ERR;
 804130e:	2301      	movs	r3, #1
 8041310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8041314:	e00a      	b.n	804132c <ota_process_data+0x1a4>
		};
 8041316:	bf00      	nop
 8041318:	e008      	b.n	804132c <ota_process_data+0x1a4>
				break;
 804131a:	bf00      	nop
 804131c:	e006      	b.n	804132c <ota_process_data+0x1a4>
			break;
 804131e:	bf00      	nop
 8041320:	e004      	b.n	804132c <ota_process_data+0x1a4>
			break;
 8041322:	bf00      	nop
 8041324:	e002      	b.n	804132c <ota_process_data+0x1a4>
			break;
 8041326:	bf00      	nop
 8041328:	e000      	b.n	804132c <ota_process_data+0x1a4>
			break;
 804132a:	bf00      	nop
	}while(false);

	return ret;
 804132c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8041330:	4618      	mov	r0, r3
 8041332:	3728      	adds	r7, #40	; 0x28
 8041334:	46bd      	mov	sp, r7
 8041336:	bd80      	pop	{r7, pc}
 8041338:	200003bd 	.word	0x200003bd
 804133c:	0804e31c 	.word	0x0804e31c
 8041340:	0804e330 	.word	0x0804e330
 8041344:	200003c0 	.word	0x200003c0
 8041348:	200003c4 	.word	0x200003c4
 804134c:	200003c8 	.word	0x200003c8
 8041350:	0804e34c 	.word	0x0804e34c
 8041354:	0804e388 	.word	0x0804e388
 8041358:	0804e394 	.word	0x0804e394
 804135c:	0804e3b0 	.word	0x0804e3b0
 8041360:	08120000 	.word	0x08120000
 8041364:	0804e3d4 	.word	0x0804e3d4
 8041368:	0804e418 	.word	0x0804e418

0804136c <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 804136c:	b580      	push	{r7, lr}
 804136e:	b086      	sub	sp, #24
 8041370:	af00      	add	r7, sp, #0
 8041372:	6078      	str	r0, [r7, #4]
 8041374:	460b      	mov	r3, r1
 8041376:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 8041378:	f107 030c 	add.w	r3, r7, #12
 804137c:	2200      	movs	r2, #0
 804137e:	601a      	str	r2, [r3, #0]
 8041380:	605a      	str	r2, [r3, #4]
 8041382:	811a      	strh	r2, [r3, #8]
 8041384:	23aa      	movs	r3, #170	; 0xaa
 8041386:	733b      	strb	r3, [r7, #12]
 8041388:	2303      	movs	r3, #3
 804138a:	737b      	strb	r3, [r7, #13]
 804138c:	2301      	movs	r3, #1
 804138e:	81fb      	strh	r3, [r7, #14]
 8041390:	78fb      	ldrb	r3, [r7, #3]
 8041392:	743b      	strb	r3, [r7, #16]
 8041394:	23bb      	movs	r3, #187	; 0xbb
 8041396:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 8041398:	f107 030c 	add.w	r3, r7, #12
 804139c:	3304      	adds	r3, #4
 804139e:	2101      	movs	r1, #1
 80413a0:	4618      	mov	r0, r3
 80413a2:	f000 f80f 	bl	80413c4 <ota_calcCRC>
 80413a6:	4603      	mov	r3, r0
 80413a8:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&rsp, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 80413ac:	1cf9      	adds	r1, r7, #3
 80413ae:	f04f 33ff 	mov.w	r3, #4294967295
 80413b2:	220a      	movs	r2, #10
 80413b4:	6878      	ldr	r0, [r7, #4]
 80413b6:	f007 fca4 	bl	8048d02 <HAL_UART_Transmit>

}
 80413ba:	bf00      	nop
 80413bc:	3718      	adds	r7, #24
 80413be:	46bd      	mov	sp, r7
 80413c0:	bd80      	pop	{r7, pc}
	...

080413c4 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80413c4:	b480      	push	{r7}
 80413c6:	b087      	sub	sp, #28
 80413c8:	af00      	add	r7, sp, #0
 80413ca:	6078      	str	r0, [r7, #4]
 80413cc:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80413ce:	f04f 33ff 	mov.w	r3, #4294967295
 80413d2:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80413d4:	2300      	movs	r3, #0
 80413d6:	613b      	str	r3, [r7, #16]
 80413d8:	e014      	b.n	8041404 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80413da:	697b      	ldr	r3, [r7, #20]
 80413dc:	0e1b      	lsrs	r3, r3, #24
 80413de:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80413e0:	687a      	ldr	r2, [r7, #4]
 80413e2:	693b      	ldr	r3, [r7, #16]
 80413e4:	4413      	add	r3, r2
 80413e6:	781a      	ldrb	r2, [r3, #0]
 80413e8:	7bfb      	ldrb	r3, [r7, #15]
 80413ea:	4053      	eors	r3, r2
 80413ec:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80413ee:	697b      	ldr	r3, [r7, #20]
 80413f0:	021a      	lsls	r2, r3, #8
 80413f2:	7bfb      	ldrb	r3, [r7, #15]
 80413f4:	4909      	ldr	r1, [pc, #36]	; (804141c <ota_calcCRC+0x58>)
 80413f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80413fa:	4053      	eors	r3, r2
 80413fc:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80413fe:	693b      	ldr	r3, [r7, #16]
 8041400:	3301      	adds	r3, #1
 8041402:	613b      	str	r3, [r7, #16]
 8041404:	693a      	ldr	r2, [r7, #16]
 8041406:	683b      	ldr	r3, [r7, #0]
 8041408:	429a      	cmp	r2, r3
 804140a:	d3e6      	bcc.n	80413da <ota_calcCRC+0x16>
    }
    return Checksum;
 804140c:	697b      	ldr	r3, [r7, #20]
}
 804140e:	4618      	mov	r0, r3
 8041410:	371c      	adds	r7, #28
 8041412:	46bd      	mov	sp, r7
 8041414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041418:	4770      	bx	lr
 804141a:	bf00      	nop
 804141c:	0804e424 	.word	0x0804e424

08041420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041420:	b480      	push	{r7}
 8041422:	b083      	sub	sp, #12
 8041424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041426:	2300      	movs	r3, #0
 8041428:	607b      	str	r3, [r7, #4]
 804142a:	4b10      	ldr	r3, [pc, #64]	; (804146c <HAL_MspInit+0x4c>)
 804142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804142e:	4a0f      	ldr	r2, [pc, #60]	; (804146c <HAL_MspInit+0x4c>)
 8041430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041434:	6453      	str	r3, [r2, #68]	; 0x44
 8041436:	4b0d      	ldr	r3, [pc, #52]	; (804146c <HAL_MspInit+0x4c>)
 8041438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804143e:	607b      	str	r3, [r7, #4]
 8041440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8041442:	2300      	movs	r3, #0
 8041444:	603b      	str	r3, [r7, #0]
 8041446:	4b09      	ldr	r3, [pc, #36]	; (804146c <HAL_MspInit+0x4c>)
 8041448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804144a:	4a08      	ldr	r2, [pc, #32]	; (804146c <HAL_MspInit+0x4c>)
 804144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041450:	6413      	str	r3, [r2, #64]	; 0x40
 8041452:	4b06      	ldr	r3, [pc, #24]	; (804146c <HAL_MspInit+0x4c>)
 8041454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804145a:	603b      	str	r3, [r7, #0]
 804145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 804145e:	bf00      	nop
 8041460:	370c      	adds	r7, #12
 8041462:	46bd      	mov	sp, r7
 8041464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041468:	4770      	bx	lr
 804146a:	bf00      	nop
 804146c:	40023800 	.word	0x40023800

08041470 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8041470:	b480      	push	{r7}
 8041472:	b085      	sub	sp, #20
 8041474:	af00      	add	r7, sp, #0
 8041476:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8041478:	687b      	ldr	r3, [r7, #4]
 804147a:	681b      	ldr	r3, [r3, #0]
 804147c:	4a0b      	ldr	r2, [pc, #44]	; (80414ac <HAL_CRC_MspInit+0x3c>)
 804147e:	4293      	cmp	r3, r2
 8041480:	d10d      	bne.n	804149e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8041482:	2300      	movs	r3, #0
 8041484:	60fb      	str	r3, [r7, #12]
 8041486:	4b0a      	ldr	r3, [pc, #40]	; (80414b0 <HAL_CRC_MspInit+0x40>)
 8041488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804148a:	4a09      	ldr	r2, [pc, #36]	; (80414b0 <HAL_CRC_MspInit+0x40>)
 804148c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041490:	6313      	str	r3, [r2, #48]	; 0x30
 8041492:	4b07      	ldr	r3, [pc, #28]	; (80414b0 <HAL_CRC_MspInit+0x40>)
 8041494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804149a:	60fb      	str	r3, [r7, #12]
 804149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 804149e:	bf00      	nop
 80414a0:	3714      	adds	r7, #20
 80414a2:	46bd      	mov	sp, r7
 80414a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414a8:	4770      	bx	lr
 80414aa:	bf00      	nop
 80414ac:	40023000 	.word	0x40023000
 80414b0:	40023800 	.word	0x40023800

080414b4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80414b4:	b580      	push	{r7, lr}
 80414b6:	b084      	sub	sp, #16
 80414b8:	af00      	add	r7, sp, #0
 80414ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80414bc:	687b      	ldr	r3, [r7, #4]
 80414be:	681b      	ldr	r3, [r3, #0]
 80414c0:	4a0e      	ldr	r2, [pc, #56]	; (80414fc <HAL_DMA2D_MspInit+0x48>)
 80414c2:	4293      	cmp	r3, r2
 80414c4:	d115      	bne.n	80414f2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80414c6:	2300      	movs	r3, #0
 80414c8:	60fb      	str	r3, [r7, #12]
 80414ca:	4b0d      	ldr	r3, [pc, #52]	; (8041500 <HAL_DMA2D_MspInit+0x4c>)
 80414cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414ce:	4a0c      	ldr	r2, [pc, #48]	; (8041500 <HAL_DMA2D_MspInit+0x4c>)
 80414d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80414d4:	6313      	str	r3, [r2, #48]	; 0x30
 80414d6:	4b0a      	ldr	r3, [pc, #40]	; (8041500 <HAL_DMA2D_MspInit+0x4c>)
 80414d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80414da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80414de:	60fb      	str	r3, [r7, #12]
 80414e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80414e2:	2200      	movs	r2, #0
 80414e4:	2105      	movs	r1, #5
 80414e6:	205a      	movs	r0, #90	; 0x5a
 80414e8:	f001 ffde 	bl	80434a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80414ec:	205a      	movs	r0, #90	; 0x5a
 80414ee:	f001 fff7 	bl	80434e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80414f2:	bf00      	nop
 80414f4:	3710      	adds	r7, #16
 80414f6:	46bd      	mov	sp, r7
 80414f8:	bd80      	pop	{r7, pc}
 80414fa:	bf00      	nop
 80414fc:	4002b000 	.word	0x4002b000
 8041500:	40023800 	.word	0x40023800

08041504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8041504:	b580      	push	{r7, lr}
 8041506:	b08a      	sub	sp, #40	; 0x28
 8041508:	af00      	add	r7, sp, #0
 804150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804150c:	f107 0314 	add.w	r3, r7, #20
 8041510:	2200      	movs	r2, #0
 8041512:	601a      	str	r2, [r3, #0]
 8041514:	605a      	str	r2, [r3, #4]
 8041516:	609a      	str	r2, [r3, #8]
 8041518:	60da      	str	r2, [r3, #12]
 804151a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 804151c:	687b      	ldr	r3, [r7, #4]
 804151e:	681b      	ldr	r3, [r3, #0]
 8041520:	4a29      	ldr	r2, [pc, #164]	; (80415c8 <HAL_I2C_MspInit+0xc4>)
 8041522:	4293      	cmp	r3, r2
 8041524:	d14b      	bne.n	80415be <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041526:	2300      	movs	r3, #0
 8041528:	613b      	str	r3, [r7, #16]
 804152a:	4b28      	ldr	r3, [pc, #160]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 804152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804152e:	4a27      	ldr	r2, [pc, #156]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 8041530:	f043 0304 	orr.w	r3, r3, #4
 8041534:	6313      	str	r3, [r2, #48]	; 0x30
 8041536:	4b25      	ldr	r3, [pc, #148]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 8041538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804153a:	f003 0304 	and.w	r3, r3, #4
 804153e:	613b      	str	r3, [r7, #16]
 8041540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041542:	2300      	movs	r3, #0
 8041544:	60fb      	str	r3, [r7, #12]
 8041546:	4b21      	ldr	r3, [pc, #132]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 8041548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804154a:	4a20      	ldr	r2, [pc, #128]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 804154c:	f043 0301 	orr.w	r3, r3, #1
 8041550:	6313      	str	r3, [r2, #48]	; 0x30
 8041552:	4b1e      	ldr	r3, [pc, #120]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 8041554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041556:	f003 0301 	and.w	r3, r3, #1
 804155a:	60fb      	str	r3, [r7, #12]
 804155c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 804155e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8041562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041564:	2312      	movs	r3, #18
 8041566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8041568:	2301      	movs	r3, #1
 804156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804156c:	2300      	movs	r3, #0
 804156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8041570:	2304      	movs	r3, #4
 8041572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8041574:	f107 0314 	add.w	r3, r7, #20
 8041578:	4619      	mov	r1, r3
 804157a:	4815      	ldr	r0, [pc, #84]	; (80415d0 <HAL_I2C_MspInit+0xcc>)
 804157c:	f002 fd34 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8041580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041586:	2312      	movs	r3, #18
 8041588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 804158a:	2301      	movs	r3, #1
 804158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804158e:	2300      	movs	r3, #0
 8041590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8041592:	2304      	movs	r3, #4
 8041594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8041596:	f107 0314 	add.w	r3, r7, #20
 804159a:	4619      	mov	r1, r3
 804159c:	480d      	ldr	r0, [pc, #52]	; (80415d4 <HAL_I2C_MspInit+0xd0>)
 804159e:	f002 fd23 	bl	8043fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80415a2:	2300      	movs	r3, #0
 80415a4:	60bb      	str	r3, [r7, #8]
 80415a6:	4b09      	ldr	r3, [pc, #36]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 80415a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415aa:	4a08      	ldr	r2, [pc, #32]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 80415ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80415b0:	6413      	str	r3, [r2, #64]	; 0x40
 80415b2:	4b06      	ldr	r3, [pc, #24]	; (80415cc <HAL_I2C_MspInit+0xc8>)
 80415b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80415b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80415ba:	60bb      	str	r3, [r7, #8]
 80415bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80415be:	bf00      	nop
 80415c0:	3728      	adds	r7, #40	; 0x28
 80415c2:	46bd      	mov	sp, r7
 80415c4:	bd80      	pop	{r7, pc}
 80415c6:	bf00      	nop
 80415c8:	40005c00 	.word	0x40005c00
 80415cc:	40023800 	.word	0x40023800
 80415d0:	40020800 	.word	0x40020800
 80415d4:	40020000 	.word	0x40020000

080415d8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80415d8:	b580      	push	{r7, lr}
 80415da:	b09a      	sub	sp, #104	; 0x68
 80415dc:	af00      	add	r7, sp, #0
 80415de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80415e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80415e4:	2200      	movs	r2, #0
 80415e6:	601a      	str	r2, [r3, #0]
 80415e8:	605a      	str	r2, [r3, #4]
 80415ea:	609a      	str	r2, [r3, #8]
 80415ec:	60da      	str	r2, [r3, #12]
 80415ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80415f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80415f4:	2230      	movs	r2, #48	; 0x30
 80415f6:	2100      	movs	r1, #0
 80415f8:	4618      	mov	r0, r3
 80415fa:	f00b fbcf 	bl	804cd9c <memset>
  if(hltdc->Instance==LTDC)
 80415fe:	687b      	ldr	r3, [r7, #4]
 8041600:	681b      	ldr	r3, [r3, #0]
 8041602:	4a85      	ldr	r2, [pc, #532]	; (8041818 <HAL_LTDC_MspInit+0x240>)
 8041604:	4293      	cmp	r3, r2
 8041606:	f040 8102 	bne.w	804180e <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 804160a:	2308      	movs	r3, #8
 804160c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 804160e:	2331      	movs	r3, #49	; 0x31
 8041610:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8041612:	2302      	movs	r3, #2
 8041614:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8041616:	2300      	movs	r3, #0
 8041618:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 804161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804161e:	4618      	mov	r0, r3
 8041620:	f005 fe70 	bl	8047304 <HAL_RCCEx_PeriphCLKConfig>
 8041624:	4603      	mov	r3, r0
 8041626:	2b00      	cmp	r3, #0
 8041628:	d001      	beq.n	804162e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 804162a:	f7ff fc47 	bl	8040ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 804162e:	2300      	movs	r3, #0
 8041630:	623b      	str	r3, [r7, #32]
 8041632:	4b7a      	ldr	r3, [pc, #488]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041636:	4a79      	ldr	r2, [pc, #484]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041638:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804163c:	6453      	str	r3, [r2, #68]	; 0x44
 804163e:	4b77      	ldr	r3, [pc, #476]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8041646:	623b      	str	r3, [r7, #32]
 8041648:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 804164a:	2300      	movs	r3, #0
 804164c:	61fb      	str	r3, [r7, #28]
 804164e:	4b73      	ldr	r3, [pc, #460]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041652:	4a72      	ldr	r2, [pc, #456]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041654:	f043 0320 	orr.w	r3, r3, #32
 8041658:	6313      	str	r3, [r2, #48]	; 0x30
 804165a:	4b70      	ldr	r3, [pc, #448]	; (804181c <HAL_LTDC_MspInit+0x244>)
 804165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804165e:	f003 0320 	and.w	r3, r3, #32
 8041662:	61fb      	str	r3, [r7, #28]
 8041664:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041666:	2300      	movs	r3, #0
 8041668:	61bb      	str	r3, [r7, #24]
 804166a:	4b6c      	ldr	r3, [pc, #432]	; (804181c <HAL_LTDC_MspInit+0x244>)
 804166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804166e:	4a6b      	ldr	r2, [pc, #428]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041670:	f043 0301 	orr.w	r3, r3, #1
 8041674:	6313      	str	r3, [r2, #48]	; 0x30
 8041676:	4b69      	ldr	r3, [pc, #420]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804167a:	f003 0301 	and.w	r3, r3, #1
 804167e:	61bb      	str	r3, [r7, #24]
 8041680:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041682:	2300      	movs	r3, #0
 8041684:	617b      	str	r3, [r7, #20]
 8041686:	4b65      	ldr	r3, [pc, #404]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804168a:	4a64      	ldr	r2, [pc, #400]	; (804181c <HAL_LTDC_MspInit+0x244>)
 804168c:	f043 0302 	orr.w	r3, r3, #2
 8041690:	6313      	str	r3, [r2, #48]	; 0x30
 8041692:	4b62      	ldr	r3, [pc, #392]	; (804181c <HAL_LTDC_MspInit+0x244>)
 8041694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041696:	f003 0302 	and.w	r3, r3, #2
 804169a:	617b      	str	r3, [r7, #20]
 804169c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 804169e:	2300      	movs	r3, #0
 80416a0:	613b      	str	r3, [r7, #16]
 80416a2:	4b5e      	ldr	r3, [pc, #376]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416a6:	4a5d      	ldr	r2, [pc, #372]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80416ac:	6313      	str	r3, [r2, #48]	; 0x30
 80416ae:	4b5b      	ldr	r3, [pc, #364]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80416b6:	613b      	str	r3, [r7, #16]
 80416b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80416ba:	2300      	movs	r3, #0
 80416bc:	60fb      	str	r3, [r7, #12]
 80416be:	4b57      	ldr	r3, [pc, #348]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416c2:	4a56      	ldr	r2, [pc, #344]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416c4:	f043 0304 	orr.w	r3, r3, #4
 80416c8:	6313      	str	r3, [r2, #48]	; 0x30
 80416ca:	4b54      	ldr	r3, [pc, #336]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ce:	f003 0304 	and.w	r3, r3, #4
 80416d2:	60fb      	str	r3, [r7, #12]
 80416d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80416d6:	2300      	movs	r3, #0
 80416d8:	60bb      	str	r3, [r7, #8]
 80416da:	4b50      	ldr	r3, [pc, #320]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416de:	4a4f      	ldr	r2, [pc, #316]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416e0:	f043 0308 	orr.w	r3, r3, #8
 80416e4:	6313      	str	r3, [r2, #48]	; 0x30
 80416e6:	4b4d      	ldr	r3, [pc, #308]	; (804181c <HAL_LTDC_MspInit+0x244>)
 80416e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80416ea:	f003 0308 	and.w	r3, r3, #8
 80416ee:	60bb      	str	r3, [r7, #8]
 80416f0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80416f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80416f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80416f8:	2302      	movs	r3, #2
 80416fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80416fc:	2300      	movs	r3, #0
 80416fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041700:	2300      	movs	r3, #0
 8041702:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041704:	230e      	movs	r3, #14
 8041706:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8041708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804170c:	4619      	mov	r1, r3
 804170e:	4844      	ldr	r0, [pc, #272]	; (8041820 <HAL_LTDC_MspInit+0x248>)
 8041710:	f002 fc6a 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8041714:	f641 0358 	movw	r3, #6232	; 0x1858
 8041718:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804171a:	2302      	movs	r3, #2
 804171c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804171e:	2300      	movs	r3, #0
 8041720:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041722:	2300      	movs	r3, #0
 8041724:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041726:	230e      	movs	r3, #14
 8041728:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804172a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804172e:	4619      	mov	r1, r3
 8041730:	483c      	ldr	r0, [pc, #240]	; (8041824 <HAL_LTDC_MspInit+0x24c>)
 8041732:	f002 fc59 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8041736:	2303      	movs	r3, #3
 8041738:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804173a:	2302      	movs	r3, #2
 804173c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804173e:	2300      	movs	r3, #0
 8041740:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041742:	2300      	movs	r3, #0
 8041744:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8041746:	2309      	movs	r3, #9
 8041748:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804174a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804174e:	4619      	mov	r1, r3
 8041750:	4835      	ldr	r0, [pc, #212]	; (8041828 <HAL_LTDC_MspInit+0x250>)
 8041752:	f002 fc49 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8041756:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 804175a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804175c:	2302      	movs	r3, #2
 804175e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041760:	2300      	movs	r3, #0
 8041762:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041764:	2300      	movs	r3, #0
 8041766:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8041768:	230e      	movs	r3, #14
 804176a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804176c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041770:	4619      	mov	r1, r3
 8041772:	482d      	ldr	r0, [pc, #180]	; (8041828 <HAL_LTDC_MspInit+0x250>)
 8041774:	f002 fc38 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8041778:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 804177c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804177e:	2302      	movs	r3, #2
 8041780:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041782:	2300      	movs	r3, #0
 8041784:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041786:	2300      	movs	r3, #0
 8041788:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 804178a:	230e      	movs	r3, #14
 804178c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 804178e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8041792:	4619      	mov	r1, r3
 8041794:	4825      	ldr	r0, [pc, #148]	; (804182c <HAL_LTDC_MspInit+0x254>)
 8041796:	f002 fc27 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 804179a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 804179e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417a0:	2302      	movs	r3, #2
 80417a2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417a4:	2300      	movs	r3, #0
 80417a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417a8:	2300      	movs	r3, #0
 80417aa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80417ac:	230e      	movs	r3, #14
 80417ae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80417b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417b4:	4619      	mov	r1, r3
 80417b6:	481e      	ldr	r0, [pc, #120]	; (8041830 <HAL_LTDC_MspInit+0x258>)
 80417b8:	f002 fc16 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80417bc:	2348      	movs	r3, #72	; 0x48
 80417be:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417c0:	2302      	movs	r3, #2
 80417c2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417c4:	2300      	movs	r3, #0
 80417c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417c8:	2300      	movs	r3, #0
 80417ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80417cc:	230e      	movs	r3, #14
 80417ce:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80417d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417d4:	4619      	mov	r1, r3
 80417d6:	4817      	ldr	r0, [pc, #92]	; (8041834 <HAL_LTDC_MspInit+0x25c>)
 80417d8:	f002 fc06 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80417dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80417e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417e2:	2302      	movs	r3, #2
 80417e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417e6:	2300      	movs	r3, #0
 80417e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417ea:	2300      	movs	r3, #0
 80417ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80417ee:	2309      	movs	r3, #9
 80417f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80417f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80417f6:	4619      	mov	r1, r3
 80417f8:	480c      	ldr	r0, [pc, #48]	; (804182c <HAL_LTDC_MspInit+0x254>)
 80417fa:	f002 fbf5 	bl	8043fe8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80417fe:	2200      	movs	r2, #0
 8041800:	2105      	movs	r1, #5
 8041802:	2058      	movs	r0, #88	; 0x58
 8041804:	f001 fe50 	bl	80434a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8041808:	2058      	movs	r0, #88	; 0x58
 804180a:	f001 fe69 	bl	80434e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 804180e:	bf00      	nop
 8041810:	3768      	adds	r7, #104	; 0x68
 8041812:	46bd      	mov	sp, r7
 8041814:	bd80      	pop	{r7, pc}
 8041816:	bf00      	nop
 8041818:	40016800 	.word	0x40016800
 804181c:	40023800 	.word	0x40023800
 8041820:	40021400 	.word	0x40021400
 8041824:	40020000 	.word	0x40020000
 8041828:	40020400 	.word	0x40020400
 804182c:	40021800 	.word	0x40021800
 8041830:	40020800 	.word	0x40020800
 8041834:	40020c00 	.word	0x40020c00

08041838 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8041838:	b580      	push	{r7, lr}
 804183a:	b08a      	sub	sp, #40	; 0x28
 804183c:	af00      	add	r7, sp, #0
 804183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041840:	f107 0314 	add.w	r3, r7, #20
 8041844:	2200      	movs	r2, #0
 8041846:	601a      	str	r2, [r3, #0]
 8041848:	605a      	str	r2, [r3, #4]
 804184a:	609a      	str	r2, [r3, #8]
 804184c:	60da      	str	r2, [r3, #12]
 804184e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8041850:	687b      	ldr	r3, [r7, #4]
 8041852:	681b      	ldr	r3, [r3, #0]
 8041854:	4a19      	ldr	r2, [pc, #100]	; (80418bc <HAL_SPI_MspInit+0x84>)
 8041856:	4293      	cmp	r3, r2
 8041858:	d12c      	bne.n	80418b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 804185a:	2300      	movs	r3, #0
 804185c:	613b      	str	r3, [r7, #16]
 804185e:	4b18      	ldr	r3, [pc, #96]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 8041860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041862:	4a17      	ldr	r2, [pc, #92]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 8041864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041868:	6453      	str	r3, [r2, #68]	; 0x44
 804186a:	4b15      	ldr	r3, [pc, #84]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 804186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804186e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041872:	613b      	str	r3, [r7, #16]
 8041874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8041876:	2300      	movs	r3, #0
 8041878:	60fb      	str	r3, [r7, #12]
 804187a:	4b11      	ldr	r3, [pc, #68]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 804187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804187e:	4a10      	ldr	r2, [pc, #64]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 8041880:	f043 0320 	orr.w	r3, r3, #32
 8041884:	6313      	str	r3, [r2, #48]	; 0x30
 8041886:	4b0e      	ldr	r3, [pc, #56]	; (80418c0 <HAL_SPI_MspInit+0x88>)
 8041888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804188a:	f003 0320 	and.w	r3, r3, #32
 804188e:	60fb      	str	r3, [r7, #12]
 8041890:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8041892:	f44f 7360 	mov.w	r3, #896	; 0x380
 8041896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041898:	2302      	movs	r3, #2
 804189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804189c:	2300      	movs	r3, #0
 804189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80418a0:	2300      	movs	r3, #0
 80418a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80418a4:	2305      	movs	r3, #5
 80418a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80418a8:	f107 0314 	add.w	r3, r7, #20
 80418ac:	4619      	mov	r1, r3
 80418ae:	4805      	ldr	r0, [pc, #20]	; (80418c4 <HAL_SPI_MspInit+0x8c>)
 80418b0:	f002 fb9a 	bl	8043fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80418b4:	bf00      	nop
 80418b6:	3728      	adds	r7, #40	; 0x28
 80418b8:	46bd      	mov	sp, r7
 80418ba:	bd80      	pop	{r7, pc}
 80418bc:	40015000 	.word	0x40015000
 80418c0:	40023800 	.word	0x40023800
 80418c4:	40021400 	.word	0x40021400

080418c8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80418c8:	b580      	push	{r7, lr}
 80418ca:	b082      	sub	sp, #8
 80418cc:	af00      	add	r7, sp, #0
 80418ce:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80418d0:	687b      	ldr	r3, [r7, #4]
 80418d2:	681b      	ldr	r3, [r3, #0]
 80418d4:	4a08      	ldr	r2, [pc, #32]	; (80418f8 <HAL_SPI_MspDeInit+0x30>)
 80418d6:	4293      	cmp	r3, r2
 80418d8:	d10a      	bne.n	80418f0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80418da:	4b08      	ldr	r3, [pc, #32]	; (80418fc <HAL_SPI_MspDeInit+0x34>)
 80418dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80418de:	4a07      	ldr	r2, [pc, #28]	; (80418fc <HAL_SPI_MspDeInit+0x34>)
 80418e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80418e4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80418e6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80418ea:	4805      	ldr	r0, [pc, #20]	; (8041900 <HAL_SPI_MspDeInit+0x38>)
 80418ec:	f002 fd28 	bl	8044340 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80418f0:	bf00      	nop
 80418f2:	3708      	adds	r7, #8
 80418f4:	46bd      	mov	sp, r7
 80418f6:	bd80      	pop	{r7, pc}
 80418f8:	40015000 	.word	0x40015000
 80418fc:	40023800 	.word	0x40023800
 8041900:	40021400 	.word	0x40021400

08041904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041904:	b480      	push	{r7}
 8041906:	b085      	sub	sp, #20
 8041908:	af00      	add	r7, sp, #0
 804190a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 804190c:	687b      	ldr	r3, [r7, #4]
 804190e:	681b      	ldr	r3, [r3, #0]
 8041910:	4a0b      	ldr	r2, [pc, #44]	; (8041940 <HAL_TIM_Base_MspInit+0x3c>)
 8041912:	4293      	cmp	r3, r2
 8041914:	d10d      	bne.n	8041932 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041916:	2300      	movs	r3, #0
 8041918:	60fb      	str	r3, [r7, #12]
 804191a:	4b0a      	ldr	r3, [pc, #40]	; (8041944 <HAL_TIM_Base_MspInit+0x40>)
 804191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804191e:	4a09      	ldr	r2, [pc, #36]	; (8041944 <HAL_TIM_Base_MspInit+0x40>)
 8041920:	f043 0301 	orr.w	r3, r3, #1
 8041924:	6453      	str	r3, [r2, #68]	; 0x44
 8041926:	4b07      	ldr	r3, [pc, #28]	; (8041944 <HAL_TIM_Base_MspInit+0x40>)
 8041928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804192a:	f003 0301 	and.w	r3, r3, #1
 804192e:	60fb      	str	r3, [r7, #12]
 8041930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8041932:	bf00      	nop
 8041934:	3714      	adds	r7, #20
 8041936:	46bd      	mov	sp, r7
 8041938:	f85d 7b04 	ldr.w	r7, [sp], #4
 804193c:	4770      	bx	lr
 804193e:	bf00      	nop
 8041940:	40010000 	.word	0x40010000
 8041944:	40023800 	.word	0x40023800

08041948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8041948:	b580      	push	{r7, lr}
 804194a:	b08a      	sub	sp, #40	; 0x28
 804194c:	af00      	add	r7, sp, #0
 804194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041950:	f107 0314 	add.w	r3, r7, #20
 8041954:	2200      	movs	r2, #0
 8041956:	601a      	str	r2, [r3, #0]
 8041958:	605a      	str	r2, [r3, #4]
 804195a:	609a      	str	r2, [r3, #8]
 804195c:	60da      	str	r2, [r3, #12]
 804195e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8041960:	687b      	ldr	r3, [r7, #4]
 8041962:	681b      	ldr	r3, [r3, #0]
 8041964:	4a19      	ldr	r2, [pc, #100]	; (80419cc <HAL_UART_MspInit+0x84>)
 8041966:	4293      	cmp	r3, r2
 8041968:	d12c      	bne.n	80419c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 804196a:	2300      	movs	r3, #0
 804196c:	613b      	str	r3, [r7, #16]
 804196e:	4b18      	ldr	r3, [pc, #96]	; (80419d0 <HAL_UART_MspInit+0x88>)
 8041970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041972:	4a17      	ldr	r2, [pc, #92]	; (80419d0 <HAL_UART_MspInit+0x88>)
 8041974:	f043 0310 	orr.w	r3, r3, #16
 8041978:	6453      	str	r3, [r2, #68]	; 0x44
 804197a:	4b15      	ldr	r3, [pc, #84]	; (80419d0 <HAL_UART_MspInit+0x88>)
 804197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804197e:	f003 0310 	and.w	r3, r3, #16
 8041982:	613b      	str	r3, [r7, #16]
 8041984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041986:	2300      	movs	r3, #0
 8041988:	60fb      	str	r3, [r7, #12]
 804198a:	4b11      	ldr	r3, [pc, #68]	; (80419d0 <HAL_UART_MspInit+0x88>)
 804198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804198e:	4a10      	ldr	r2, [pc, #64]	; (80419d0 <HAL_UART_MspInit+0x88>)
 8041990:	f043 0301 	orr.w	r3, r3, #1
 8041994:	6313      	str	r3, [r2, #48]	; 0x30
 8041996:	4b0e      	ldr	r3, [pc, #56]	; (80419d0 <HAL_UART_MspInit+0x88>)
 8041998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804199a:	f003 0301 	and.w	r3, r3, #1
 804199e:	60fb      	str	r3, [r7, #12]
 80419a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80419a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80419a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80419a8:	2302      	movs	r3, #2
 80419aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80419ac:	2300      	movs	r3, #0
 80419ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80419b0:	2303      	movs	r3, #3
 80419b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80419b4:	2307      	movs	r3, #7
 80419b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80419b8:	f107 0314 	add.w	r3, r7, #20
 80419bc:	4619      	mov	r1, r3
 80419be:	4805      	ldr	r0, [pc, #20]	; (80419d4 <HAL_UART_MspInit+0x8c>)
 80419c0:	f002 fb12 	bl	8043fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80419c4:	bf00      	nop
 80419c6:	3728      	adds	r7, #40	; 0x28
 80419c8:	46bd      	mov	sp, r7
 80419ca:	bd80      	pop	{r7, pc}
 80419cc:	40011000 	.word	0x40011000
 80419d0:	40023800 	.word	0x40023800
 80419d4:	40020000 	.word	0x40020000

080419d8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80419d8:	b580      	push	{r7, lr}
 80419da:	b086      	sub	sp, #24
 80419dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80419de:	1d3b      	adds	r3, r7, #4
 80419e0:	2200      	movs	r2, #0
 80419e2:	601a      	str	r2, [r3, #0]
 80419e4:	605a      	str	r2, [r3, #4]
 80419e6:	609a      	str	r2, [r3, #8]
 80419e8:	60da      	str	r2, [r3, #12]
 80419ea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80419ec:	4b3b      	ldr	r3, [pc, #236]	; (8041adc <HAL_FMC_MspInit+0x104>)
 80419ee:	681b      	ldr	r3, [r3, #0]
 80419f0:	2b00      	cmp	r3, #0
 80419f2:	d16f      	bne.n	8041ad4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80419f4:	4b39      	ldr	r3, [pc, #228]	; (8041adc <HAL_FMC_MspInit+0x104>)
 80419f6:	2201      	movs	r2, #1
 80419f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80419fa:	2300      	movs	r3, #0
 80419fc:	603b      	str	r3, [r7, #0]
 80419fe:	4b38      	ldr	r3, [pc, #224]	; (8041ae0 <HAL_FMC_MspInit+0x108>)
 8041a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041a02:	4a37      	ldr	r2, [pc, #220]	; (8041ae0 <HAL_FMC_MspInit+0x108>)
 8041a04:	f043 0301 	orr.w	r3, r3, #1
 8041a08:	6393      	str	r3, [r2, #56]	; 0x38
 8041a0a:	4b35      	ldr	r3, [pc, #212]	; (8041ae0 <HAL_FMC_MspInit+0x108>)
 8041a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041a0e:	f003 0301 	and.w	r3, r3, #1
 8041a12:	603b      	str	r3, [r7, #0]
 8041a14:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8041a16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8041a1a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a1c:	2302      	movs	r3, #2
 8041a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a20:	2300      	movs	r3, #0
 8041a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a24:	2303      	movs	r3, #3
 8041a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041a28:	230c      	movs	r3, #12
 8041a2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8041a2c:	1d3b      	adds	r3, r7, #4
 8041a2e:	4619      	mov	r1, r3
 8041a30:	482c      	ldr	r0, [pc, #176]	; (8041ae4 <HAL_FMC_MspInit+0x10c>)
 8041a32:	f002 fad9 	bl	8043fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8041a36:	2301      	movs	r3, #1
 8041a38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a3a:	2302      	movs	r3, #2
 8041a3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a3e:	2300      	movs	r3, #0
 8041a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a42:	2303      	movs	r3, #3
 8041a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041a46:	230c      	movs	r3, #12
 8041a48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8041a4a:	1d3b      	adds	r3, r7, #4
 8041a4c:	4619      	mov	r1, r3
 8041a4e:	4826      	ldr	r0, [pc, #152]	; (8041ae8 <HAL_FMC_MspInit+0x110>)
 8041a50:	f002 faca 	bl	8043fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8041a54:	f248 1333 	movw	r3, #33075	; 0x8133
 8041a58:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a5a:	2302      	movs	r3, #2
 8041a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a5e:	2300      	movs	r3, #0
 8041a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a62:	2303      	movs	r3, #3
 8041a64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041a66:	230c      	movs	r3, #12
 8041a68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041a6a:	1d3b      	adds	r3, r7, #4
 8041a6c:	4619      	mov	r1, r3
 8041a6e:	481f      	ldr	r0, [pc, #124]	; (8041aec <HAL_FMC_MspInit+0x114>)
 8041a70:	f002 faba 	bl	8043fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8041a74:	f64f 7383 	movw	r3, #65411	; 0xff83
 8041a78:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a7a:	2302      	movs	r3, #2
 8041a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a7e:	2300      	movs	r3, #0
 8041a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041a82:	2303      	movs	r3, #3
 8041a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041a86:	230c      	movs	r3, #12
 8041a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041a8a:	1d3b      	adds	r3, r7, #4
 8041a8c:	4619      	mov	r1, r3
 8041a8e:	4818      	ldr	r0, [pc, #96]	; (8041af0 <HAL_FMC_MspInit+0x118>)
 8041a90:	f002 faaa 	bl	8043fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8041a94:	f24c 7303 	movw	r3, #50947	; 0xc703
 8041a98:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041a9a:	2302      	movs	r3, #2
 8041a9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041a9e:	2300      	movs	r3, #0
 8041aa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041aa2:	2303      	movs	r3, #3
 8041aa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041aa6:	230c      	movs	r3, #12
 8041aa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041aaa:	1d3b      	adds	r3, r7, #4
 8041aac:	4619      	mov	r1, r3
 8041aae:	4811      	ldr	r0, [pc, #68]	; (8041af4 <HAL_FMC_MspInit+0x11c>)
 8041ab0:	f002 fa9a 	bl	8043fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8041ab4:	2360      	movs	r3, #96	; 0x60
 8041ab6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041ab8:	2302      	movs	r3, #2
 8041aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041abc:	2300      	movs	r3, #0
 8041abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041ac0:	2303      	movs	r3, #3
 8041ac2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8041ac4:	230c      	movs	r3, #12
 8041ac6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041ac8:	1d3b      	adds	r3, r7, #4
 8041aca:	4619      	mov	r1, r3
 8041acc:	480a      	ldr	r0, [pc, #40]	; (8041af8 <HAL_FMC_MspInit+0x120>)
 8041ace:	f002 fa8b 	bl	8043fe8 <HAL_GPIO_Init>
 8041ad2:	e000      	b.n	8041ad6 <HAL_FMC_MspInit+0xfe>
    return;
 8041ad4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8041ad6:	3718      	adds	r7, #24
 8041ad8:	46bd      	mov	sp, r7
 8041ada:	bd80      	pop	{r7, pc}
 8041adc:	200007d8 	.word	0x200007d8
 8041ae0:	40023800 	.word	0x40023800
 8041ae4:	40021400 	.word	0x40021400
 8041ae8:	40020800 	.word	0x40020800
 8041aec:	40021800 	.word	0x40021800
 8041af0:	40021000 	.word	0x40021000
 8041af4:	40020c00 	.word	0x40020c00
 8041af8:	40020400 	.word	0x40020400

08041afc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8041afc:	b580      	push	{r7, lr}
 8041afe:	b082      	sub	sp, #8
 8041b00:	af00      	add	r7, sp, #0
 8041b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8041b04:	f7ff ff68 	bl	80419d8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8041b08:	bf00      	nop
 8041b0a:	3708      	adds	r7, #8
 8041b0c:	46bd      	mov	sp, r7
 8041b0e:	bd80      	pop	{r7, pc}

08041b10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8041b10:	b580      	push	{r7, lr}
 8041b12:	b08e      	sub	sp, #56	; 0x38
 8041b14:	af00      	add	r7, sp, #0
 8041b16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8041b18:	2300      	movs	r3, #0
 8041b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8041b1c:	2300      	movs	r3, #0
 8041b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8041b20:	2300      	movs	r3, #0
 8041b22:	60fb      	str	r3, [r7, #12]
 8041b24:	4b33      	ldr	r3, [pc, #204]	; (8041bf4 <HAL_InitTick+0xe4>)
 8041b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b28:	4a32      	ldr	r2, [pc, #200]	; (8041bf4 <HAL_InitTick+0xe4>)
 8041b2a:	f043 0310 	orr.w	r3, r3, #16
 8041b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8041b30:	4b30      	ldr	r3, [pc, #192]	; (8041bf4 <HAL_InitTick+0xe4>)
 8041b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b34:	f003 0310 	and.w	r3, r3, #16
 8041b38:	60fb      	str	r3, [r7, #12]
 8041b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8041b3c:	f107 0210 	add.w	r2, r7, #16
 8041b40:	f107 0314 	add.w	r3, r7, #20
 8041b44:	4611      	mov	r1, r2
 8041b46:	4618      	mov	r0, r3
 8041b48:	f005 fbaa 	bl	80472a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8041b4c:	6a3b      	ldr	r3, [r7, #32]
 8041b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8041b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041b52:	2b00      	cmp	r3, #0
 8041b54:	d103      	bne.n	8041b5e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041b56:	f005 fb7b 	bl	8047250 <HAL_RCC_GetPCLK1Freq>
 8041b5a:	6378      	str	r0, [r7, #52]	; 0x34
 8041b5c:	e004      	b.n	8041b68 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8041b5e:	f005 fb77 	bl	8047250 <HAL_RCC_GetPCLK1Freq>
 8041b62:	4603      	mov	r3, r0
 8041b64:	005b      	lsls	r3, r3, #1
 8041b66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8041b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8041b6a:	4a23      	ldr	r2, [pc, #140]	; (8041bf8 <HAL_InitTick+0xe8>)
 8041b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8041b70:	0c9b      	lsrs	r3, r3, #18
 8041b72:	3b01      	subs	r3, #1
 8041b74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041b76:	4b21      	ldr	r3, [pc, #132]	; (8041bfc <HAL_InitTick+0xec>)
 8041b78:	4a21      	ldr	r2, [pc, #132]	; (8041c00 <HAL_InitTick+0xf0>)
 8041b7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8041b7c:	4b1f      	ldr	r3, [pc, #124]	; (8041bfc <HAL_InitTick+0xec>)
 8041b7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041b82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041b84:	4a1d      	ldr	r2, [pc, #116]	; (8041bfc <HAL_InitTick+0xec>)
 8041b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041b88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8041b8a:	4b1c      	ldr	r3, [pc, #112]	; (8041bfc <HAL_InitTick+0xec>)
 8041b8c:	2200      	movs	r2, #0
 8041b8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041b90:	4b1a      	ldr	r3, [pc, #104]	; (8041bfc <HAL_InitTick+0xec>)
 8041b92:	2200      	movs	r2, #0
 8041b94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8041b96:	4b19      	ldr	r3, [pc, #100]	; (8041bfc <HAL_InitTick+0xec>)
 8041b98:	2200      	movs	r2, #0
 8041b9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8041b9c:	4817      	ldr	r0, [pc, #92]	; (8041bfc <HAL_InitTick+0xec>)
 8041b9e:	f006 fbe1 	bl	8048364 <HAL_TIM_Base_Init>
 8041ba2:	4603      	mov	r3, r0
 8041ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8041ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041bac:	2b00      	cmp	r3, #0
 8041bae:	d11b      	bne.n	8041be8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8041bb0:	4812      	ldr	r0, [pc, #72]	; (8041bfc <HAL_InitTick+0xec>)
 8041bb2:	f006 fc27 	bl	8048404 <HAL_TIM_Base_Start_IT>
 8041bb6:	4603      	mov	r3, r0
 8041bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8041bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8041bc0:	2b00      	cmp	r3, #0
 8041bc2:	d111      	bne.n	8041be8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8041bc4:	2036      	movs	r0, #54	; 0x36
 8041bc6:	f001 fc8b 	bl	80434e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041bca:	687b      	ldr	r3, [r7, #4]
 8041bcc:	2b0f      	cmp	r3, #15
 8041bce:	d808      	bhi.n	8041be2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8041bd0:	2200      	movs	r2, #0
 8041bd2:	6879      	ldr	r1, [r7, #4]
 8041bd4:	2036      	movs	r0, #54	; 0x36
 8041bd6:	f001 fc67 	bl	80434a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041bda:	4a0a      	ldr	r2, [pc, #40]	; (8041c04 <HAL_InitTick+0xf4>)
 8041bdc:	687b      	ldr	r3, [r7, #4]
 8041bde:	6013      	str	r3, [r2, #0]
 8041be0:	e002      	b.n	8041be8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8041be2:	2301      	movs	r3, #1
 8041be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8041be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8041bec:	4618      	mov	r0, r3
 8041bee:	3738      	adds	r7, #56	; 0x38
 8041bf0:	46bd      	mov	sp, r7
 8041bf2:	bd80      	pop	{r7, pc}
 8041bf4:	40023800 	.word	0x40023800
 8041bf8:	431bde83 	.word	0x431bde83
 8041bfc:	200007dc 	.word	0x200007dc
 8041c00:	40001000 	.word	0x40001000
 8041c04:	20000054 	.word	0x20000054

08041c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8041c08:	b480      	push	{r7}
 8041c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8041c0c:	e7fe      	b.n	8041c0c <NMI_Handler+0x4>

08041c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8041c0e:	b480      	push	{r7}
 8041c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8041c12:	e7fe      	b.n	8041c12 <HardFault_Handler+0x4>

08041c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041c14:	b480      	push	{r7}
 8041c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8041c18:	e7fe      	b.n	8041c18 <MemManage_Handler+0x4>

08041c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8041c1a:	b480      	push	{r7}
 8041c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8041c1e:	e7fe      	b.n	8041c1e <BusFault_Handler+0x4>

08041c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8041c20:	b480      	push	{r7}
 8041c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041c24:	e7fe      	b.n	8041c24 <UsageFault_Handler+0x4>

08041c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041c26:	b480      	push	{r7}
 8041c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041c2a:	bf00      	nop
 8041c2c:	46bd      	mov	sp, r7
 8041c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c32:	4770      	bx	lr

08041c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8041c34:	b480      	push	{r7}
 8041c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8041c38:	bf00      	nop
 8041c3a:	46bd      	mov	sp, r7
 8041c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c40:	4770      	bx	lr

08041c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041c42:	b480      	push	{r7}
 8041c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041c46:	bf00      	nop
 8041c48:	46bd      	mov	sp, r7
 8041c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c4e:	4770      	bx	lr

08041c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041c50:	b480      	push	{r7}
 8041c52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041c54:	bf00      	nop
 8041c56:	46bd      	mov	sp, r7
 8041c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c5c:	4770      	bx	lr

08041c5e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8041c5e:	b580      	push	{r7, lr}
 8041c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8041c62:	2001      	movs	r0, #1
 8041c64:	f002 fc92 	bl	804458c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8041c68:	bf00      	nop
 8041c6a:	bd80      	pop	{r7, pc}

08041c6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8041c6c:	b580      	push	{r7, lr}
 8041c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041c70:	4802      	ldr	r0, [pc, #8]	; (8041c7c <TIM6_DAC_IRQHandler+0x10>)
 8041c72:	f006 fc37 	bl	80484e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8041c76:	bf00      	nop
 8041c78:	bd80      	pop	{r7, pc}
 8041c7a:	bf00      	nop
 8041c7c:	200007dc 	.word	0x200007dc

08041c80 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8041c80:	b580      	push	{r7, lr}
 8041c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8041c84:	4802      	ldr	r0, [pc, #8]	; (8041c90 <OTG_HS_IRQHandler+0x10>)
 8041c86:	f002 ff03 	bl	8044a90 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8041c8a:	bf00      	nop
 8041c8c:	bd80      	pop	{r7, pc}
 8041c8e:	bf00      	nop
 8041c90:	20000e5c 	.word	0x20000e5c

08041c94 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8041c94:	b580      	push	{r7, lr}
 8041c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8041c98:	4802      	ldr	r0, [pc, #8]	; (8041ca4 <LTDC_IRQHandler+0x10>)
 8041c9a:	f004 fb29 	bl	80462f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8041c9e:	bf00      	nop
 8041ca0:	bd80      	pop	{r7, pc}
 8041ca2:	bf00      	nop
 8041ca4:	20000198 	.word	0x20000198

08041ca8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8041ca8:	b580      	push	{r7, lr}
 8041caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8041cac:	4802      	ldr	r0, [pc, #8]	; (8041cb8 <DMA2D_IRQHandler+0x10>)
 8041cae:	f001 ff5c 	bl	8043b6a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8041cb2:	bf00      	nop
 8041cb4:	bd80      	pop	{r7, pc}
 8041cb6:	bf00      	nop
 8041cb8:	20000104 	.word	0x20000104

08041cbc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8041cbc:	b480      	push	{r7}
 8041cbe:	b083      	sub	sp, #12
 8041cc0:	af00      	add	r7, sp, #0
 8041cc2:	4603      	mov	r3, r0
 8041cc4:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8041cc6:	88fb      	ldrh	r3, [r7, #6]
 8041cc8:	2b01      	cmp	r3, #1
 8041cca:	d102      	bne.n	8041cd2 <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8041ccc:	4b04      	ldr	r3, [pc, #16]	; (8041ce0 <HAL_GPIO_EXTI_Callback+0x24>)
 8041cce:	2201      	movs	r2, #1
 8041cd0:	701a      	strb	r2, [r3, #0]

	}
}
 8041cd2:	bf00      	nop
 8041cd4:	370c      	adds	r7, #12
 8041cd6:	46bd      	mov	sp, r7
 8041cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cdc:	4770      	bx	lr
 8041cde:	bf00      	nop
 8041ce0:	200003bc 	.word	0x200003bc

08041ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8041ce4:	b580      	push	{r7, lr}
 8041ce6:	b086      	sub	sp, #24
 8041ce8:	af00      	add	r7, sp, #0
 8041cea:	60f8      	str	r0, [r7, #12]
 8041cec:	60b9      	str	r1, [r7, #8]
 8041cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041cf0:	2300      	movs	r3, #0
 8041cf2:	617b      	str	r3, [r7, #20]
 8041cf4:	e00a      	b.n	8041d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8041cf6:	f3af 8000 	nop.w
 8041cfa:	4601      	mov	r1, r0
 8041cfc:	68bb      	ldr	r3, [r7, #8]
 8041cfe:	1c5a      	adds	r2, r3, #1
 8041d00:	60ba      	str	r2, [r7, #8]
 8041d02:	b2ca      	uxtb	r2, r1
 8041d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041d06:	697b      	ldr	r3, [r7, #20]
 8041d08:	3301      	adds	r3, #1
 8041d0a:	617b      	str	r3, [r7, #20]
 8041d0c:	697a      	ldr	r2, [r7, #20]
 8041d0e:	687b      	ldr	r3, [r7, #4]
 8041d10:	429a      	cmp	r2, r3
 8041d12:	dbf0      	blt.n	8041cf6 <_read+0x12>
  }

  return len;
 8041d14:	687b      	ldr	r3, [r7, #4]
}
 8041d16:	4618      	mov	r0, r3
 8041d18:	3718      	adds	r7, #24
 8041d1a:	46bd      	mov	sp, r7
 8041d1c:	bd80      	pop	{r7, pc}

08041d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8041d1e:	b580      	push	{r7, lr}
 8041d20:	b086      	sub	sp, #24
 8041d22:	af00      	add	r7, sp, #0
 8041d24:	60f8      	str	r0, [r7, #12]
 8041d26:	60b9      	str	r1, [r7, #8]
 8041d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041d2a:	2300      	movs	r3, #0
 8041d2c:	617b      	str	r3, [r7, #20]
 8041d2e:	e009      	b.n	8041d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8041d30:	68bb      	ldr	r3, [r7, #8]
 8041d32:	1c5a      	adds	r2, r3, #1
 8041d34:	60ba      	str	r2, [r7, #8]
 8041d36:	781b      	ldrb	r3, [r3, #0]
 8041d38:	4618      	mov	r0, r3
 8041d3a:	f7ff f89b 	bl	8040e74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8041d3e:	697b      	ldr	r3, [r7, #20]
 8041d40:	3301      	adds	r3, #1
 8041d42:	617b      	str	r3, [r7, #20]
 8041d44:	697a      	ldr	r2, [r7, #20]
 8041d46:	687b      	ldr	r3, [r7, #4]
 8041d48:	429a      	cmp	r2, r3
 8041d4a:	dbf1      	blt.n	8041d30 <_write+0x12>
  }
  return len;
 8041d4c:	687b      	ldr	r3, [r7, #4]
}
 8041d4e:	4618      	mov	r0, r3
 8041d50:	3718      	adds	r7, #24
 8041d52:	46bd      	mov	sp, r7
 8041d54:	bd80      	pop	{r7, pc}

08041d56 <_close>:

int _close(int file)
{
 8041d56:	b480      	push	{r7}
 8041d58:	b083      	sub	sp, #12
 8041d5a:	af00      	add	r7, sp, #0
 8041d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8041d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8041d62:	4618      	mov	r0, r3
 8041d64:	370c      	adds	r7, #12
 8041d66:	46bd      	mov	sp, r7
 8041d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d6c:	4770      	bx	lr

08041d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8041d6e:	b480      	push	{r7}
 8041d70:	b083      	sub	sp, #12
 8041d72:	af00      	add	r7, sp, #0
 8041d74:	6078      	str	r0, [r7, #4]
 8041d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8041d78:	683b      	ldr	r3, [r7, #0]
 8041d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8041d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8041d80:	2300      	movs	r3, #0
}
 8041d82:	4618      	mov	r0, r3
 8041d84:	370c      	adds	r7, #12
 8041d86:	46bd      	mov	sp, r7
 8041d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d8c:	4770      	bx	lr

08041d8e <_isatty>:

int _isatty(int file)
{
 8041d8e:	b480      	push	{r7}
 8041d90:	b083      	sub	sp, #12
 8041d92:	af00      	add	r7, sp, #0
 8041d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8041d96:	2301      	movs	r3, #1
}
 8041d98:	4618      	mov	r0, r3
 8041d9a:	370c      	adds	r7, #12
 8041d9c:	46bd      	mov	sp, r7
 8041d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041da2:	4770      	bx	lr

08041da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8041da4:	b480      	push	{r7}
 8041da6:	b085      	sub	sp, #20
 8041da8:	af00      	add	r7, sp, #0
 8041daa:	60f8      	str	r0, [r7, #12]
 8041dac:	60b9      	str	r1, [r7, #8]
 8041dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8041db0:	2300      	movs	r3, #0
}
 8041db2:	4618      	mov	r0, r3
 8041db4:	3714      	adds	r7, #20
 8041db6:	46bd      	mov	sp, r7
 8041db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dbc:	4770      	bx	lr
	...

08041dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8041dc0:	b580      	push	{r7, lr}
 8041dc2:	b086      	sub	sp, #24
 8041dc4:	af00      	add	r7, sp, #0
 8041dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8041dc8:	4a14      	ldr	r2, [pc, #80]	; (8041e1c <_sbrk+0x5c>)
 8041dca:	4b15      	ldr	r3, [pc, #84]	; (8041e20 <_sbrk+0x60>)
 8041dcc:	1ad3      	subs	r3, r2, r3
 8041dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8041dd0:	697b      	ldr	r3, [r7, #20]
 8041dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8041dd4:	4b13      	ldr	r3, [pc, #76]	; (8041e24 <_sbrk+0x64>)
 8041dd6:	681b      	ldr	r3, [r3, #0]
 8041dd8:	2b00      	cmp	r3, #0
 8041dda:	d102      	bne.n	8041de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8041ddc:	4b11      	ldr	r3, [pc, #68]	; (8041e24 <_sbrk+0x64>)
 8041dde:	4a12      	ldr	r2, [pc, #72]	; (8041e28 <_sbrk+0x68>)
 8041de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8041de2:	4b10      	ldr	r3, [pc, #64]	; (8041e24 <_sbrk+0x64>)
 8041de4:	681a      	ldr	r2, [r3, #0]
 8041de6:	687b      	ldr	r3, [r7, #4]
 8041de8:	4413      	add	r3, r2
 8041dea:	693a      	ldr	r2, [r7, #16]
 8041dec:	429a      	cmp	r2, r3
 8041dee:	d207      	bcs.n	8041e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8041df0:	f00a ff9a 	bl	804cd28 <__errno>
 8041df4:	4603      	mov	r3, r0
 8041df6:	220c      	movs	r2, #12
 8041df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8041dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8041dfe:	e009      	b.n	8041e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8041e00:	4b08      	ldr	r3, [pc, #32]	; (8041e24 <_sbrk+0x64>)
 8041e02:	681b      	ldr	r3, [r3, #0]
 8041e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8041e06:	4b07      	ldr	r3, [pc, #28]	; (8041e24 <_sbrk+0x64>)
 8041e08:	681a      	ldr	r2, [r3, #0]
 8041e0a:	687b      	ldr	r3, [r7, #4]
 8041e0c:	4413      	add	r3, r2
 8041e0e:	4a05      	ldr	r2, [pc, #20]	; (8041e24 <_sbrk+0x64>)
 8041e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8041e12:	68fb      	ldr	r3, [r7, #12]
}
 8041e14:	4618      	mov	r0, r3
 8041e16:	3718      	adds	r7, #24
 8041e18:	46bd      	mov	sp, r7
 8041e1a:	bd80      	pop	{r7, pc}
 8041e1c:	20030000 	.word	0x20030000
 8041e20:	00000400 	.word	0x00000400
 8041e24:	20000824 	.word	0x20000824
 8041e28:	20001170 	.word	0x20001170

08041e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8041e2c:	b480      	push	{r7}
 8041e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8041e30:	4b07      	ldr	r3, [pc, #28]	; (8041e50 <SystemInit+0x24>)
 8041e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041e36:	4a06      	ldr	r2, [pc, #24]	; (8041e50 <SystemInit+0x24>)
 8041e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8041e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8041e40:	4b03      	ldr	r3, [pc, #12]	; (8041e50 <SystemInit+0x24>)
 8041e42:	4a04      	ldr	r2, [pc, #16]	; (8041e54 <SystemInit+0x28>)
 8041e44:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8041e46:	bf00      	nop
 8041e48:	46bd      	mov	sp, r7
 8041e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041e4e:	4770      	bx	lr
 8041e50:	e000ed00 	.word	0xe000ed00
 8041e54:	08040000 	.word	0x08040000

08041e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8041e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041e90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8041e5c:	480d      	ldr	r0, [pc, #52]	; (8041e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8041e5e:	490e      	ldr	r1, [pc, #56]	; (8041e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8041e60:	4a0e      	ldr	r2, [pc, #56]	; (8041e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8041e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8041e64:	e002      	b.n	8041e6c <LoopCopyDataInit>

08041e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8041e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8041e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8041e6a:	3304      	adds	r3, #4

08041e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8041e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8041e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8041e70:	d3f9      	bcc.n	8041e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8041e72:	4a0b      	ldr	r2, [pc, #44]	; (8041ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8041e74:	4c0b      	ldr	r4, [pc, #44]	; (8041ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8041e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8041e78:	e001      	b.n	8041e7e <LoopFillZerobss>

08041e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8041e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8041e7c:	3204      	adds	r2, #4

08041e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8041e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8041e80:	d3fb      	bcc.n	8041e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8041e82:	f7ff ffd3 	bl	8041e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8041e86:	f00a ff55 	bl	804cd34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8041e8a:	f7fe fb83 	bl	8040594 <main>
  bx  lr    
 8041e8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8041e90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8041e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8041e98:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8041e9c:	08050818 	.word	0x08050818
  ldr r2, =_sbss
 8041ea0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8041ea4:	20001170 	.word	0x20001170

08041ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8041ea8:	e7fe      	b.n	8041ea8 <ADC_IRQHandler>

08041eaa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8041eaa:	b580      	push	{r7, lr}
 8041eac:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8041eae:	f000 fa5d 	bl	804236c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8041eb2:	20ca      	movs	r0, #202	; 0xca
 8041eb4:	f000 f95d 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8041eb8:	20c3      	movs	r0, #195	; 0xc3
 8041eba:	f000 f967 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8041ebe:	2008      	movs	r0, #8
 8041ec0:	f000 f964 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8041ec4:	2050      	movs	r0, #80	; 0x50
 8041ec6:	f000 f961 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8041eca:	20cf      	movs	r0, #207	; 0xcf
 8041ecc:	f000 f951 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041ed0:	2000      	movs	r0, #0
 8041ed2:	f000 f95b 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8041ed6:	20c1      	movs	r0, #193	; 0xc1
 8041ed8:	f000 f958 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8041edc:	2030      	movs	r0, #48	; 0x30
 8041ede:	f000 f955 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8041ee2:	20ed      	movs	r0, #237	; 0xed
 8041ee4:	f000 f945 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8041ee8:	2064      	movs	r0, #100	; 0x64
 8041eea:	f000 f94f 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8041eee:	2003      	movs	r0, #3
 8041ef0:	f000 f94c 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8041ef4:	2012      	movs	r0, #18
 8041ef6:	f000 f949 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8041efa:	2081      	movs	r0, #129	; 0x81
 8041efc:	f000 f946 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8041f00:	20e8      	movs	r0, #232	; 0xe8
 8041f02:	f000 f936 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8041f06:	2085      	movs	r0, #133	; 0x85
 8041f08:	f000 f940 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041f0c:	2000      	movs	r0, #0
 8041f0e:	f000 f93d 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8041f12:	2078      	movs	r0, #120	; 0x78
 8041f14:	f000 f93a 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8041f18:	20cb      	movs	r0, #203	; 0xcb
 8041f1a:	f000 f92a 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8041f1e:	2039      	movs	r0, #57	; 0x39
 8041f20:	f000 f934 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8041f24:	202c      	movs	r0, #44	; 0x2c
 8041f26:	f000 f931 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041f2a:	2000      	movs	r0, #0
 8041f2c:	f000 f92e 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8041f30:	2034      	movs	r0, #52	; 0x34
 8041f32:	f000 f92b 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8041f36:	2002      	movs	r0, #2
 8041f38:	f000 f928 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8041f3c:	20f7      	movs	r0, #247	; 0xf7
 8041f3e:	f000 f918 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8041f42:	2020      	movs	r0, #32
 8041f44:	f000 f922 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8041f48:	20ea      	movs	r0, #234	; 0xea
 8041f4a:	f000 f912 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041f4e:	2000      	movs	r0, #0
 8041f50:	f000 f91c 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8041f54:	2000      	movs	r0, #0
 8041f56:	f000 f919 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8041f5a:	20b1      	movs	r0, #177	; 0xb1
 8041f5c:	f000 f909 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041f60:	2000      	movs	r0, #0
 8041f62:	f000 f913 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8041f66:	201b      	movs	r0, #27
 8041f68:	f000 f910 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041f6c:	20b6      	movs	r0, #182	; 0xb6
 8041f6e:	f000 f900 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041f72:	200a      	movs	r0, #10
 8041f74:	f000 f90a 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8041f78:	20a2      	movs	r0, #162	; 0xa2
 8041f7a:	f000 f907 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8041f7e:	20c0      	movs	r0, #192	; 0xc0
 8041f80:	f000 f8f7 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041f84:	2010      	movs	r0, #16
 8041f86:	f000 f901 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8041f8a:	20c1      	movs	r0, #193	; 0xc1
 8041f8c:	f000 f8f1 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8041f90:	2010      	movs	r0, #16
 8041f92:	f000 f8fb 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8041f96:	20c5      	movs	r0, #197	; 0xc5
 8041f98:	f000 f8eb 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8041f9c:	2045      	movs	r0, #69	; 0x45
 8041f9e:	f000 f8f5 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8041fa2:	2015      	movs	r0, #21
 8041fa4:	f000 f8f2 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8041fa8:	20c7      	movs	r0, #199	; 0xc7
 8041faa:	f000 f8e2 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8041fae:	2090      	movs	r0, #144	; 0x90
 8041fb0:	f000 f8ec 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8041fb4:	2036      	movs	r0, #54	; 0x36
 8041fb6:	f000 f8dc 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8041fba:	20c8      	movs	r0, #200	; 0xc8
 8041fbc:	f000 f8e6 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8041fc0:	20f2      	movs	r0, #242	; 0xf2
 8041fc2:	f000 f8d6 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041fc6:	2000      	movs	r0, #0
 8041fc8:	f000 f8e0 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8041fcc:	20b0      	movs	r0, #176	; 0xb0
 8041fce:	f000 f8d0 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8041fd2:	20c2      	movs	r0, #194	; 0xc2
 8041fd4:	f000 f8da 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8041fd8:	20b6      	movs	r0, #182	; 0xb6
 8041fda:	f000 f8ca 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8041fde:	200a      	movs	r0, #10
 8041fe0:	f000 f8d4 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8041fe4:	20a7      	movs	r0, #167	; 0xa7
 8041fe6:	f000 f8d1 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8041fea:	2027      	movs	r0, #39	; 0x27
 8041fec:	f000 f8ce 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8041ff0:	2004      	movs	r0, #4
 8041ff2:	f000 f8cb 	bl	804218c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8041ff6:	202a      	movs	r0, #42	; 0x2a
 8041ff8:	f000 f8bb 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8041ffc:	2000      	movs	r0, #0
 8041ffe:	f000 f8c5 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042002:	2000      	movs	r0, #0
 8042004:	f000 f8c2 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042008:	2000      	movs	r0, #0
 804200a:	f000 f8bf 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 804200e:	20ef      	movs	r0, #239	; 0xef
 8042010:	f000 f8bc 	bl	804218c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8042014:	202b      	movs	r0, #43	; 0x2b
 8042016:	f000 f8ac 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 804201a:	2000      	movs	r0, #0
 804201c:	f000 f8b6 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8042020:	2000      	movs	r0, #0
 8042022:	f000 f8b3 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8042026:	2001      	movs	r0, #1
 8042028:	f000 f8b0 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 804202c:	203f      	movs	r0, #63	; 0x3f
 804202e:	f000 f8ad 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8042032:	20f6      	movs	r0, #246	; 0xf6
 8042034:	f000 f89d 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8042038:	2001      	movs	r0, #1
 804203a:	f000 f8a7 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 804203e:	2000      	movs	r0, #0
 8042040:	f000 f8a4 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8042044:	2006      	movs	r0, #6
 8042046:	f000 f8a1 	bl	804218c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 804204a:	202c      	movs	r0, #44	; 0x2c
 804204c:	f000 f891 	bl	8042172 <ili9341_WriteReg>
  LCD_Delay(200);
 8042050:	20c8      	movs	r0, #200	; 0xc8
 8042052:	f000 fa79 	bl	8042548 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8042056:	2026      	movs	r0, #38	; 0x26
 8042058:	f000 f88b 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 804205c:	2001      	movs	r0, #1
 804205e:	f000 f895 	bl	804218c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8042062:	20e0      	movs	r0, #224	; 0xe0
 8042064:	f000 f885 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8042068:	200f      	movs	r0, #15
 804206a:	f000 f88f 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 804206e:	2029      	movs	r0, #41	; 0x29
 8042070:	f000 f88c 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8042074:	2024      	movs	r0, #36	; 0x24
 8042076:	f000 f889 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 804207a:	200c      	movs	r0, #12
 804207c:	f000 f886 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8042080:	200e      	movs	r0, #14
 8042082:	f000 f883 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8042086:	2009      	movs	r0, #9
 8042088:	f000 f880 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 804208c:	204e      	movs	r0, #78	; 0x4e
 804208e:	f000 f87d 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8042092:	2078      	movs	r0, #120	; 0x78
 8042094:	f000 f87a 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8042098:	203c      	movs	r0, #60	; 0x3c
 804209a:	f000 f877 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 804209e:	2009      	movs	r0, #9
 80420a0:	f000 f874 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80420a4:	2013      	movs	r0, #19
 80420a6:	f000 f871 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80420aa:	2005      	movs	r0, #5
 80420ac:	f000 f86e 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80420b0:	2017      	movs	r0, #23
 80420b2:	f000 f86b 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80420b6:	2011      	movs	r0, #17
 80420b8:	f000 f868 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80420bc:	2000      	movs	r0, #0
 80420be:	f000 f865 	bl	804218c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80420c2:	20e1      	movs	r0, #225	; 0xe1
 80420c4:	f000 f855 	bl	8042172 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80420c8:	2000      	movs	r0, #0
 80420ca:	f000 f85f 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80420ce:	2016      	movs	r0, #22
 80420d0:	f000 f85c 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80420d4:	201b      	movs	r0, #27
 80420d6:	f000 f859 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80420da:	2004      	movs	r0, #4
 80420dc:	f000 f856 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80420e0:	2011      	movs	r0, #17
 80420e2:	f000 f853 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80420e6:	2007      	movs	r0, #7
 80420e8:	f000 f850 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80420ec:	2031      	movs	r0, #49	; 0x31
 80420ee:	f000 f84d 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80420f2:	2033      	movs	r0, #51	; 0x33
 80420f4:	f000 f84a 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80420f8:	2042      	movs	r0, #66	; 0x42
 80420fa:	f000 f847 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80420fe:	2005      	movs	r0, #5
 8042100:	f000 f844 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8042104:	200c      	movs	r0, #12
 8042106:	f000 f841 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 804210a:	200a      	movs	r0, #10
 804210c:	f000 f83e 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8042110:	2028      	movs	r0, #40	; 0x28
 8042112:	f000 f83b 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8042116:	202f      	movs	r0, #47	; 0x2f
 8042118:	f000 f838 	bl	804218c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 804211c:	200f      	movs	r0, #15
 804211e:	f000 f835 	bl	804218c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8042122:	2011      	movs	r0, #17
 8042124:	f000 f825 	bl	8042172 <ili9341_WriteReg>
  LCD_Delay(200);
 8042128:	20c8      	movs	r0, #200	; 0xc8
 804212a:	f000 fa0d 	bl	8042548 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 804212e:	2029      	movs	r0, #41	; 0x29
 8042130:	f000 f81f 	bl	8042172 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8042134:	202c      	movs	r0, #44	; 0x2c
 8042136:	f000 f81c 	bl	8042172 <ili9341_WriteReg>
}
 804213a:	bf00      	nop
 804213c:	bd80      	pop	{r7, pc}

0804213e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 804213e:	b580      	push	{r7, lr}
 8042140:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8042142:	f000 f913 	bl	804236c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8042146:	2103      	movs	r1, #3
 8042148:	20d3      	movs	r0, #211	; 0xd3
 804214a:	f000 f82c 	bl	80421a6 <ili9341_ReadData>
 804214e:	4603      	mov	r3, r0
 8042150:	b29b      	uxth	r3, r3
}
 8042152:	4618      	mov	r0, r3
 8042154:	bd80      	pop	{r7, pc}

08042156 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8042156:	b580      	push	{r7, lr}
 8042158:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 804215a:	2029      	movs	r0, #41	; 0x29
 804215c:	f000 f809 	bl	8042172 <ili9341_WriteReg>
}
 8042160:	bf00      	nop
 8042162:	bd80      	pop	{r7, pc}

08042164 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8042164:	b580      	push	{r7, lr}
 8042166:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8042168:	2028      	movs	r0, #40	; 0x28
 804216a:	f000 f802 	bl	8042172 <ili9341_WriteReg>
}
 804216e:	bf00      	nop
 8042170:	bd80      	pop	{r7, pc}

08042172 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8042172:	b580      	push	{r7, lr}
 8042174:	b082      	sub	sp, #8
 8042176:	af00      	add	r7, sp, #0
 8042178:	4603      	mov	r3, r0
 804217a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 804217c:	79fb      	ldrb	r3, [r7, #7]
 804217e:	4618      	mov	r0, r3
 8042180:	f000 f98e 	bl	80424a0 <LCD_IO_WriteReg>
}
 8042184:	bf00      	nop
 8042186:	3708      	adds	r7, #8
 8042188:	46bd      	mov	sp, r7
 804218a:	bd80      	pop	{r7, pc}

0804218c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 804218c:	b580      	push	{r7, lr}
 804218e:	b082      	sub	sp, #8
 8042190:	af00      	add	r7, sp, #0
 8042192:	4603      	mov	r3, r0
 8042194:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8042196:	88fb      	ldrh	r3, [r7, #6]
 8042198:	4618      	mov	r0, r3
 804219a:	f000 f95f 	bl	804245c <LCD_IO_WriteData>
}
 804219e:	bf00      	nop
 80421a0:	3708      	adds	r7, #8
 80421a2:	46bd      	mov	sp, r7
 80421a4:	bd80      	pop	{r7, pc}

080421a6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80421a6:	b580      	push	{r7, lr}
 80421a8:	b082      	sub	sp, #8
 80421aa:	af00      	add	r7, sp, #0
 80421ac:	4603      	mov	r3, r0
 80421ae:	460a      	mov	r2, r1
 80421b0:	80fb      	strh	r3, [r7, #6]
 80421b2:	4613      	mov	r3, r2
 80421b4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80421b6:	797a      	ldrb	r2, [r7, #5]
 80421b8:	88fb      	ldrh	r3, [r7, #6]
 80421ba:	4611      	mov	r1, r2
 80421bc:	4618      	mov	r0, r3
 80421be:	f000 f991 	bl	80424e4 <LCD_IO_ReadData>
 80421c2:	4603      	mov	r3, r0
}
 80421c4:	4618      	mov	r0, r3
 80421c6:	3708      	adds	r7, #8
 80421c8:	46bd      	mov	sp, r7
 80421ca:	bd80      	pop	{r7, pc}

080421cc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80421cc:	b480      	push	{r7}
 80421ce:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80421d0:	23f0      	movs	r3, #240	; 0xf0
}
 80421d2:	4618      	mov	r0, r3
 80421d4:	46bd      	mov	sp, r7
 80421d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421da:	4770      	bx	lr

080421dc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80421dc:	b480      	push	{r7}
 80421de:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80421e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80421e4:	4618      	mov	r0, r3
 80421e6:	46bd      	mov	sp, r7
 80421e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421ec:	4770      	bx	lr
	...

080421f0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80421f0:	b580      	push	{r7, lr}
 80421f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80421f4:	4819      	ldr	r0, [pc, #100]	; (804225c <SPIx_Init+0x6c>)
 80421f6:	f005 ff76 	bl	80480e6 <HAL_SPI_GetState>
 80421fa:	4603      	mov	r3, r0
 80421fc:	2b00      	cmp	r3, #0
 80421fe:	d12b      	bne.n	8042258 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8042200:	4b16      	ldr	r3, [pc, #88]	; (804225c <SPIx_Init+0x6c>)
 8042202:	4a17      	ldr	r2, [pc, #92]	; (8042260 <SPIx_Init+0x70>)
 8042204:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8042206:	4b15      	ldr	r3, [pc, #84]	; (804225c <SPIx_Init+0x6c>)
 8042208:	2218      	movs	r2, #24
 804220a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 804220c:	4b13      	ldr	r3, [pc, #76]	; (804225c <SPIx_Init+0x6c>)
 804220e:	2200      	movs	r2, #0
 8042210:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8042212:	4b12      	ldr	r3, [pc, #72]	; (804225c <SPIx_Init+0x6c>)
 8042214:	2200      	movs	r2, #0
 8042216:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8042218:	4b10      	ldr	r3, [pc, #64]	; (804225c <SPIx_Init+0x6c>)
 804221a:	2200      	movs	r2, #0
 804221c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 804221e:	4b0f      	ldr	r3, [pc, #60]	; (804225c <SPIx_Init+0x6c>)
 8042220:	2200      	movs	r2, #0
 8042222:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8042224:	4b0d      	ldr	r3, [pc, #52]	; (804225c <SPIx_Init+0x6c>)
 8042226:	2207      	movs	r2, #7
 8042228:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 804222a:	4b0c      	ldr	r3, [pc, #48]	; (804225c <SPIx_Init+0x6c>)
 804222c:	2200      	movs	r2, #0
 804222e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8042230:	4b0a      	ldr	r3, [pc, #40]	; (804225c <SPIx_Init+0x6c>)
 8042232:	2200      	movs	r2, #0
 8042234:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8042236:	4b09      	ldr	r3, [pc, #36]	; (804225c <SPIx_Init+0x6c>)
 8042238:	f44f 7200 	mov.w	r2, #512	; 0x200
 804223c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 804223e:	4b07      	ldr	r3, [pc, #28]	; (804225c <SPIx_Init+0x6c>)
 8042240:	2200      	movs	r2, #0
 8042242:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8042244:	4b05      	ldr	r3, [pc, #20]	; (804225c <SPIx_Init+0x6c>)
 8042246:	f44f 7282 	mov.w	r2, #260	; 0x104
 804224a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 804224c:	4803      	ldr	r0, [pc, #12]	; (804225c <SPIx_Init+0x6c>)
 804224e:	f000 f853 	bl	80422f8 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8042252:	4802      	ldr	r0, [pc, #8]	; (804225c <SPIx_Init+0x6c>)
 8042254:	f005 faa7 	bl	80477a6 <HAL_SPI_Init>
  } 
}
 8042258:	bf00      	nop
 804225a:	bd80      	pop	{r7, pc}
 804225c:	20000828 	.word	0x20000828
 8042260:	40015000 	.word	0x40015000

08042264 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8042264:	b580      	push	{r7, lr}
 8042266:	b084      	sub	sp, #16
 8042268:	af00      	add	r7, sp, #0
 804226a:	4603      	mov	r3, r0
 804226c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 804226e:	2300      	movs	r3, #0
 8042270:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8042272:	79fb      	ldrb	r3, [r7, #7]
 8042274:	b29a      	uxth	r2, r3
 8042276:	4b09      	ldr	r3, [pc, #36]	; (804229c <SPIx_Read+0x38>)
 8042278:	681b      	ldr	r3, [r3, #0]
 804227a:	f107 0108 	add.w	r1, r7, #8
 804227e:	4808      	ldr	r0, [pc, #32]	; (80422a0 <SPIx_Read+0x3c>)
 8042280:	f005 fc7e 	bl	8047b80 <HAL_SPI_Receive>
 8042284:	4603      	mov	r3, r0
 8042286:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8042288:	7bfb      	ldrb	r3, [r7, #15]
 804228a:	2b00      	cmp	r3, #0
 804228c:	d001      	beq.n	8042292 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 804228e:	f000 f827 	bl	80422e0 <SPIx_Error>
  }
  
  return readvalue;
 8042292:	68bb      	ldr	r3, [r7, #8]
}
 8042294:	4618      	mov	r0, r3
 8042296:	3710      	adds	r7, #16
 8042298:	46bd      	mov	sp, r7
 804229a:	bd80      	pop	{r7, pc}
 804229c:	2000003c 	.word	0x2000003c
 80422a0:	20000828 	.word	0x20000828

080422a4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80422a4:	b580      	push	{r7, lr}
 80422a6:	b084      	sub	sp, #16
 80422a8:	af00      	add	r7, sp, #0
 80422aa:	4603      	mov	r3, r0
 80422ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80422ae:	2300      	movs	r3, #0
 80422b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80422b2:	4b09      	ldr	r3, [pc, #36]	; (80422d8 <SPIx_Write+0x34>)
 80422b4:	681b      	ldr	r3, [r3, #0]
 80422b6:	1db9      	adds	r1, r7, #6
 80422b8:	2201      	movs	r2, #1
 80422ba:	4808      	ldr	r0, [pc, #32]	; (80422dc <SPIx_Write+0x38>)
 80422bc:	f005 fb24 	bl	8047908 <HAL_SPI_Transmit>
 80422c0:	4603      	mov	r3, r0
 80422c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80422c4:	7bfb      	ldrb	r3, [r7, #15]
 80422c6:	2b00      	cmp	r3, #0
 80422c8:	d001      	beq.n	80422ce <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80422ca:	f000 f809 	bl	80422e0 <SPIx_Error>
  }
}
 80422ce:	bf00      	nop
 80422d0:	3710      	adds	r7, #16
 80422d2:	46bd      	mov	sp, r7
 80422d4:	bd80      	pop	{r7, pc}
 80422d6:	bf00      	nop
 80422d8:	2000003c 	.word	0x2000003c
 80422dc:	20000828 	.word	0x20000828

080422e0 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80422e0:	b580      	push	{r7, lr}
 80422e2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80422e4:	4803      	ldr	r0, [pc, #12]	; (80422f4 <SPIx_Error+0x14>)
 80422e6:	f005 fae7 	bl	80478b8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80422ea:	f7ff ff81 	bl	80421f0 <SPIx_Init>
}
 80422ee:	bf00      	nop
 80422f0:	bd80      	pop	{r7, pc}
 80422f2:	bf00      	nop
 80422f4:	20000828 	.word	0x20000828

080422f8 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80422f8:	b580      	push	{r7, lr}
 80422fa:	b08a      	sub	sp, #40	; 0x28
 80422fc:	af00      	add	r7, sp, #0
 80422fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8042300:	2300      	movs	r3, #0
 8042302:	613b      	str	r3, [r7, #16]
 8042304:	4b17      	ldr	r3, [pc, #92]	; (8042364 <SPIx_MspInit+0x6c>)
 8042306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042308:	4a16      	ldr	r2, [pc, #88]	; (8042364 <SPIx_MspInit+0x6c>)
 804230a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804230e:	6453      	str	r3, [r2, #68]	; 0x44
 8042310:	4b14      	ldr	r3, [pc, #80]	; (8042364 <SPIx_MspInit+0x6c>)
 8042312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042318:	613b      	str	r3, [r7, #16]
 804231a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 804231c:	2300      	movs	r3, #0
 804231e:	60fb      	str	r3, [r7, #12]
 8042320:	4b10      	ldr	r3, [pc, #64]	; (8042364 <SPIx_MspInit+0x6c>)
 8042322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042324:	4a0f      	ldr	r2, [pc, #60]	; (8042364 <SPIx_MspInit+0x6c>)
 8042326:	f043 0320 	orr.w	r3, r3, #32
 804232a:	6313      	str	r3, [r2, #48]	; 0x30
 804232c:	4b0d      	ldr	r3, [pc, #52]	; (8042364 <SPIx_MspInit+0x6c>)
 804232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042330:	f003 0320 	and.w	r3, r3, #32
 8042334:	60fb      	str	r3, [r7, #12]
 8042336:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8042338:	f44f 7360 	mov.w	r3, #896	; 0x380
 804233c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 804233e:	2302      	movs	r3, #2
 8042340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8042342:	2302      	movs	r3, #2
 8042344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8042346:	2301      	movs	r3, #1
 8042348:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 804234a:	2305      	movs	r3, #5
 804234c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 804234e:	f107 0314 	add.w	r3, r7, #20
 8042352:	4619      	mov	r1, r3
 8042354:	4804      	ldr	r0, [pc, #16]	; (8042368 <SPIx_MspInit+0x70>)
 8042356:	f001 fe47 	bl	8043fe8 <HAL_GPIO_Init>
}
 804235a:	bf00      	nop
 804235c:	3728      	adds	r7, #40	; 0x28
 804235e:	46bd      	mov	sp, r7
 8042360:	bd80      	pop	{r7, pc}
 8042362:	bf00      	nop
 8042364:	40023800 	.word	0x40023800
 8042368:	40021400 	.word	0x40021400

0804236c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 804236c:	b580      	push	{r7, lr}
 804236e:	b088      	sub	sp, #32
 8042370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8042372:	4b36      	ldr	r3, [pc, #216]	; (804244c <LCD_IO_Init+0xe0>)
 8042374:	781b      	ldrb	r3, [r3, #0]
 8042376:	2b00      	cmp	r3, #0
 8042378:	d164      	bne.n	8042444 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 804237a:	4b34      	ldr	r3, [pc, #208]	; (804244c <LCD_IO_Init+0xe0>)
 804237c:	2201      	movs	r2, #1
 804237e:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8042380:	2300      	movs	r3, #0
 8042382:	60bb      	str	r3, [r7, #8]
 8042384:	4b32      	ldr	r3, [pc, #200]	; (8042450 <LCD_IO_Init+0xe4>)
 8042386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042388:	4a31      	ldr	r2, [pc, #196]	; (8042450 <LCD_IO_Init+0xe4>)
 804238a:	f043 0308 	orr.w	r3, r3, #8
 804238e:	6313      	str	r3, [r2, #48]	; 0x30
 8042390:	4b2f      	ldr	r3, [pc, #188]	; (8042450 <LCD_IO_Init+0xe4>)
 8042392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042394:	f003 0308 	and.w	r3, r3, #8
 8042398:	60bb      	str	r3, [r7, #8]
 804239a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 804239c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80423a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80423a2:	2301      	movs	r3, #1
 80423a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80423a6:	2300      	movs	r3, #0
 80423a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80423aa:	2302      	movs	r3, #2
 80423ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80423ae:	f107 030c 	add.w	r3, r7, #12
 80423b2:	4619      	mov	r1, r3
 80423b4:	4827      	ldr	r0, [pc, #156]	; (8042454 <LCD_IO_Init+0xe8>)
 80423b6:	f001 fe17 	bl	8043fe8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80423ba:	2300      	movs	r3, #0
 80423bc:	607b      	str	r3, [r7, #4]
 80423be:	4b24      	ldr	r3, [pc, #144]	; (8042450 <LCD_IO_Init+0xe4>)
 80423c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80423c2:	4a23      	ldr	r2, [pc, #140]	; (8042450 <LCD_IO_Init+0xe4>)
 80423c4:	f043 0308 	orr.w	r3, r3, #8
 80423c8:	6313      	str	r3, [r2, #48]	; 0x30
 80423ca:	4b21      	ldr	r3, [pc, #132]	; (8042450 <LCD_IO_Init+0xe4>)
 80423cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80423ce:	f003 0308 	and.w	r3, r3, #8
 80423d2:	607b      	str	r3, [r7, #4]
 80423d4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80423d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80423da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80423dc:	2301      	movs	r3, #1
 80423de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80423e0:	2300      	movs	r3, #0
 80423e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80423e4:	2302      	movs	r3, #2
 80423e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80423e8:	f107 030c 	add.w	r3, r7, #12
 80423ec:	4619      	mov	r1, r3
 80423ee:	4819      	ldr	r0, [pc, #100]	; (8042454 <LCD_IO_Init+0xe8>)
 80423f0:	f001 fdfa 	bl	8043fe8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80423f4:	2300      	movs	r3, #0
 80423f6:	603b      	str	r3, [r7, #0]
 80423f8:	4b15      	ldr	r3, [pc, #84]	; (8042450 <LCD_IO_Init+0xe4>)
 80423fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80423fc:	4a14      	ldr	r2, [pc, #80]	; (8042450 <LCD_IO_Init+0xe4>)
 80423fe:	f043 0304 	orr.w	r3, r3, #4
 8042402:	6313      	str	r3, [r2, #48]	; 0x30
 8042404:	4b12      	ldr	r3, [pc, #72]	; (8042450 <LCD_IO_Init+0xe4>)
 8042406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042408:	f003 0304 	and.w	r3, r3, #4
 804240c:	603b      	str	r3, [r7, #0]
 804240e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8042410:	2304      	movs	r3, #4
 8042412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8042414:	2301      	movs	r3, #1
 8042416:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8042418:	2300      	movs	r3, #0
 804241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 804241c:	2302      	movs	r3, #2
 804241e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8042420:	f107 030c 	add.w	r3, r7, #12
 8042424:	4619      	mov	r1, r3
 8042426:	480c      	ldr	r0, [pc, #48]	; (8042458 <LCD_IO_Init+0xec>)
 8042428:	f001 fdde 	bl	8043fe8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 804242c:	2200      	movs	r2, #0
 804242e:	2104      	movs	r1, #4
 8042430:	4809      	ldr	r0, [pc, #36]	; (8042458 <LCD_IO_Init+0xec>)
 8042432:	f002 f891 	bl	8044558 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8042436:	2201      	movs	r2, #1
 8042438:	2104      	movs	r1, #4
 804243a:	4807      	ldr	r0, [pc, #28]	; (8042458 <LCD_IO_Init+0xec>)
 804243c:	f002 f88c 	bl	8044558 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8042440:	f7ff fed6 	bl	80421f0 <SPIx_Init>
  }
}
 8042444:	bf00      	nop
 8042446:	3720      	adds	r7, #32
 8042448:	46bd      	mov	sp, r7
 804244a:	bd80      	pop	{r7, pc}
 804244c:	20000880 	.word	0x20000880
 8042450:	40023800 	.word	0x40023800
 8042454:	40020c00 	.word	0x40020c00
 8042458:	40020800 	.word	0x40020800

0804245c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 804245c:	b580      	push	{r7, lr}
 804245e:	b082      	sub	sp, #8
 8042460:	af00      	add	r7, sp, #0
 8042462:	4603      	mov	r3, r0
 8042464:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042466:	2201      	movs	r2, #1
 8042468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 804246c:	480a      	ldr	r0, [pc, #40]	; (8042498 <LCD_IO_WriteData+0x3c>)
 804246e:	f002 f873 	bl	8044558 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8042472:	2200      	movs	r2, #0
 8042474:	2104      	movs	r1, #4
 8042476:	4809      	ldr	r0, [pc, #36]	; (804249c <LCD_IO_WriteData+0x40>)
 8042478:	f002 f86e 	bl	8044558 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 804247c:	88fb      	ldrh	r3, [r7, #6]
 804247e:	4618      	mov	r0, r3
 8042480:	f7ff ff10 	bl	80422a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8042484:	2201      	movs	r2, #1
 8042486:	2104      	movs	r1, #4
 8042488:	4804      	ldr	r0, [pc, #16]	; (804249c <LCD_IO_WriteData+0x40>)
 804248a:	f002 f865 	bl	8044558 <HAL_GPIO_WritePin>
}
 804248e:	bf00      	nop
 8042490:	3708      	adds	r7, #8
 8042492:	46bd      	mov	sp, r7
 8042494:	bd80      	pop	{r7, pc}
 8042496:	bf00      	nop
 8042498:	40020c00 	.word	0x40020c00
 804249c:	40020800 	.word	0x40020800

080424a0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80424a0:	b580      	push	{r7, lr}
 80424a2:	b082      	sub	sp, #8
 80424a4:	af00      	add	r7, sp, #0
 80424a6:	4603      	mov	r3, r0
 80424a8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80424aa:	2200      	movs	r2, #0
 80424ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80424b0:	480a      	ldr	r0, [pc, #40]	; (80424dc <LCD_IO_WriteReg+0x3c>)
 80424b2:	f002 f851 	bl	8044558 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80424b6:	2200      	movs	r2, #0
 80424b8:	2104      	movs	r1, #4
 80424ba:	4809      	ldr	r0, [pc, #36]	; (80424e0 <LCD_IO_WriteReg+0x40>)
 80424bc:	f002 f84c 	bl	8044558 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80424c0:	79fb      	ldrb	r3, [r7, #7]
 80424c2:	b29b      	uxth	r3, r3
 80424c4:	4618      	mov	r0, r3
 80424c6:	f7ff feed 	bl	80422a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80424ca:	2201      	movs	r2, #1
 80424cc:	2104      	movs	r1, #4
 80424ce:	4804      	ldr	r0, [pc, #16]	; (80424e0 <LCD_IO_WriteReg+0x40>)
 80424d0:	f002 f842 	bl	8044558 <HAL_GPIO_WritePin>
}
 80424d4:	bf00      	nop
 80424d6:	3708      	adds	r7, #8
 80424d8:	46bd      	mov	sp, r7
 80424da:	bd80      	pop	{r7, pc}
 80424dc:	40020c00 	.word	0x40020c00
 80424e0:	40020800 	.word	0x40020800

080424e4 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80424e4:	b580      	push	{r7, lr}
 80424e6:	b084      	sub	sp, #16
 80424e8:	af00      	add	r7, sp, #0
 80424ea:	4603      	mov	r3, r0
 80424ec:	460a      	mov	r2, r1
 80424ee:	80fb      	strh	r3, [r7, #6]
 80424f0:	4613      	mov	r3, r2
 80424f2:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80424f4:	2300      	movs	r3, #0
 80424f6:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80424f8:	2200      	movs	r2, #0
 80424fa:	2104      	movs	r1, #4
 80424fc:	4810      	ldr	r0, [pc, #64]	; (8042540 <LCD_IO_ReadData+0x5c>)
 80424fe:	f002 f82b 	bl	8044558 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8042502:	2200      	movs	r2, #0
 8042504:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042508:	480e      	ldr	r0, [pc, #56]	; (8042544 <LCD_IO_ReadData+0x60>)
 804250a:	f002 f825 	bl	8044558 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 804250e:	88fb      	ldrh	r3, [r7, #6]
 8042510:	4618      	mov	r0, r3
 8042512:	f7ff fec7 	bl	80422a4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8042516:	797b      	ldrb	r3, [r7, #5]
 8042518:	4618      	mov	r0, r3
 804251a:	f7ff fea3 	bl	8042264 <SPIx_Read>
 804251e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8042520:	2201      	movs	r2, #1
 8042522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8042526:	4807      	ldr	r0, [pc, #28]	; (8042544 <LCD_IO_ReadData+0x60>)
 8042528:	f002 f816 	bl	8044558 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 804252c:	2201      	movs	r2, #1
 804252e:	2104      	movs	r1, #4
 8042530:	4803      	ldr	r0, [pc, #12]	; (8042540 <LCD_IO_ReadData+0x5c>)
 8042532:	f002 f811 	bl	8044558 <HAL_GPIO_WritePin>
  
  return readvalue;
 8042536:	68fb      	ldr	r3, [r7, #12]
}
 8042538:	4618      	mov	r0, r3
 804253a:	3710      	adds	r7, #16
 804253c:	46bd      	mov	sp, r7
 804253e:	bd80      	pop	{r7, pc}
 8042540:	40020800 	.word	0x40020800
 8042544:	40020c00 	.word	0x40020c00

08042548 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8042548:	b580      	push	{r7, lr}
 804254a:	b082      	sub	sp, #8
 804254c:	af00      	add	r7, sp, #0
 804254e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8042550:	6878      	ldr	r0, [r7, #4]
 8042552:	f000 fecd 	bl	80432f0 <HAL_Delay>
}
 8042556:	bf00      	nop
 8042558:	3708      	adds	r7, #8
 804255a:	46bd      	mov	sp, r7
 804255c:	bd80      	pop	{r7, pc}
	...

08042560 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8042560:	b580      	push	{r7, lr}
 8042562:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8042564:	4b2d      	ldr	r3, [pc, #180]	; (804261c <BSP_LCD_Init+0xbc>)
 8042566:	4a2e      	ldr	r2, [pc, #184]	; (8042620 <BSP_LCD_Init+0xc0>)
 8042568:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 804256a:	4b2c      	ldr	r3, [pc, #176]	; (804261c <BSP_LCD_Init+0xbc>)
 804256c:	2209      	movs	r2, #9
 804256e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8042570:	4b2a      	ldr	r3, [pc, #168]	; (804261c <BSP_LCD_Init+0xbc>)
 8042572:	2201      	movs	r2, #1
 8042574:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8042576:	4b29      	ldr	r3, [pc, #164]	; (804261c <BSP_LCD_Init+0xbc>)
 8042578:	221d      	movs	r2, #29
 804257a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 804257c:	4b27      	ldr	r3, [pc, #156]	; (804261c <BSP_LCD_Init+0xbc>)
 804257e:	2203      	movs	r2, #3
 8042580:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8042582:	4b26      	ldr	r3, [pc, #152]	; (804261c <BSP_LCD_Init+0xbc>)
 8042584:	f240 120d 	movw	r2, #269	; 0x10d
 8042588:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 804258a:	4b24      	ldr	r3, [pc, #144]	; (804261c <BSP_LCD_Init+0xbc>)
 804258c:	f240 1243 	movw	r2, #323	; 0x143
 8042590:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8042592:	4b22      	ldr	r3, [pc, #136]	; (804261c <BSP_LCD_Init+0xbc>)
 8042594:	f240 1217 	movw	r2, #279	; 0x117
 8042598:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 804259a:	4b20      	ldr	r3, [pc, #128]	; (804261c <BSP_LCD_Init+0xbc>)
 804259c:	f240 1247 	movw	r2, #327	; 0x147
 80425a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80425a2:	4b1e      	ldr	r3, [pc, #120]	; (804261c <BSP_LCD_Init+0xbc>)
 80425a4:	2200      	movs	r2, #0
 80425a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80425aa:	4b1c      	ldr	r3, [pc, #112]	; (804261c <BSP_LCD_Init+0xbc>)
 80425ac:	2200      	movs	r2, #0
 80425ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80425b2:	4b1a      	ldr	r3, [pc, #104]	; (804261c <BSP_LCD_Init+0xbc>)
 80425b4:	2200      	movs	r2, #0
 80425b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80425ba:	4b1a      	ldr	r3, [pc, #104]	; (8042624 <BSP_LCD_Init+0xc4>)
 80425bc:	2208      	movs	r2, #8
 80425be:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80425c0:	4b18      	ldr	r3, [pc, #96]	; (8042624 <BSP_LCD_Init+0xc4>)
 80425c2:	22c0      	movs	r2, #192	; 0xc0
 80425c4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80425c6:	4b17      	ldr	r3, [pc, #92]	; (8042624 <BSP_LCD_Init+0xc4>)
 80425c8:	2204      	movs	r2, #4
 80425ca:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80425cc:	4b15      	ldr	r3, [pc, #84]	; (8042624 <BSP_LCD_Init+0xc4>)
 80425ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80425d2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80425d4:	4813      	ldr	r0, [pc, #76]	; (8042624 <BSP_LCD_Init+0xc4>)
 80425d6:	f004 fe95 	bl	8047304 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80425da:	4b10      	ldr	r3, [pc, #64]	; (804261c <BSP_LCD_Init+0xbc>)
 80425dc:	2200      	movs	r2, #0
 80425de:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80425e0:	4b0e      	ldr	r3, [pc, #56]	; (804261c <BSP_LCD_Init+0xbc>)
 80425e2:	2200      	movs	r2, #0
 80425e4:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80425e6:	4b0d      	ldr	r3, [pc, #52]	; (804261c <BSP_LCD_Init+0xbc>)
 80425e8:	2200      	movs	r2, #0
 80425ea:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80425ec:	4b0b      	ldr	r3, [pc, #44]	; (804261c <BSP_LCD_Init+0xbc>)
 80425ee:	2200      	movs	r2, #0
 80425f0:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80425f2:	f000 fa83 	bl	8042afc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80425f6:	4809      	ldr	r0, [pc, #36]	; (804261c <BSP_LCD_Init+0xbc>)
 80425f8:	f003 fdaa 	bl	8046150 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80425fc:	4b0a      	ldr	r3, [pc, #40]	; (8042628 <BSP_LCD_Init+0xc8>)
 80425fe:	4a0b      	ldr	r2, [pc, #44]	; (804262c <BSP_LCD_Init+0xcc>)
 8042600:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8042602:	4b09      	ldr	r3, [pc, #36]	; (8042628 <BSP_LCD_Init+0xc8>)
 8042604:	681b      	ldr	r3, [r3, #0]
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 804260a:	f000 fc65 	bl	8042ed8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 804260e:	4808      	ldr	r0, [pc, #32]	; (8042630 <BSP_LCD_Init+0xd0>)
 8042610:	f000 f920 	bl	8042854 <BSP_LCD_SetFont>

  return LCD_OK;
 8042614:	2300      	movs	r3, #0
}  
 8042616:	4618      	mov	r0, r3
 8042618:	bd80      	pop	{r7, pc}
 804261a:	bf00      	nop
 804261c:	20000884 	.word	0x20000884
 8042620:	40016800 	.word	0x40016800
 8042624:	2000096c 	.word	0x2000096c
 8042628:	200009b8 	.word	0x200009b8
 804262c:	20000004 	.word	0x20000004
 8042630:	20000040 	.word	0x20000040

08042634 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8042634:	b580      	push	{r7, lr}
 8042636:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8042638:	4b03      	ldr	r3, [pc, #12]	; (8042648 <BSP_LCD_GetXSize+0x14>)
 804263a:	681b      	ldr	r3, [r3, #0]
 804263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804263e:	4798      	blx	r3
 8042640:	4603      	mov	r3, r0
}
 8042642:	4618      	mov	r0, r3
 8042644:	bd80      	pop	{r7, pc}
 8042646:	bf00      	nop
 8042648:	200009b8 	.word	0x200009b8

0804264c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 804264c:	b580      	push	{r7, lr}
 804264e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8042650:	4b03      	ldr	r3, [pc, #12]	; (8042660 <BSP_LCD_GetYSize+0x14>)
 8042652:	681b      	ldr	r3, [r3, #0]
 8042654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042656:	4798      	blx	r3
 8042658:	4603      	mov	r3, r0
}
 804265a:	4618      	mov	r0, r3
 804265c:	bd80      	pop	{r7, pc}
 804265e:	bf00      	nop
 8042660:	200009b8 	.word	0x200009b8

08042664 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8042664:	b580      	push	{r7, lr}
 8042666:	b090      	sub	sp, #64	; 0x40
 8042668:	af00      	add	r7, sp, #0
 804266a:	4603      	mov	r3, r0
 804266c:	6039      	str	r1, [r7, #0]
 804266e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8042670:	2300      	movs	r3, #0
 8042672:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8042674:	f7ff ffde 	bl	8042634 <BSP_LCD_GetXSize>
 8042678:	4603      	mov	r3, r0
 804267a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 804267c:	2300      	movs	r3, #0
 804267e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8042680:	f7ff ffe4 	bl	804264c <BSP_LCD_GetYSize>
 8042684:	4603      	mov	r3, r0
 8042686:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8042688:	2300      	movs	r3, #0
 804268a:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 804268c:	683b      	ldr	r3, [r7, #0]
 804268e:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8042690:	23ff      	movs	r3, #255	; 0xff
 8042692:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8042694:	2300      	movs	r3, #0
 8042696:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8042698:	2300      	movs	r3, #0
 804269a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 804269e:	2300      	movs	r3, #0
 80426a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80426a4:	2300      	movs	r3, #0
 80426a6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80426aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80426ae:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80426b0:	2307      	movs	r3, #7
 80426b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80426b4:	f7ff ffbe 	bl	8042634 <BSP_LCD_GetXSize>
 80426b8:	4603      	mov	r3, r0
 80426ba:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80426bc:	f7ff ffc6 	bl	804264c <BSP_LCD_GetYSize>
 80426c0:	4603      	mov	r3, r0
 80426c2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80426c4:	88fa      	ldrh	r2, [r7, #6]
 80426c6:	f107 030c 	add.w	r3, r7, #12
 80426ca:	4619      	mov	r1, r3
 80426cc:	4814      	ldr	r0, [pc, #80]	; (8042720 <BSP_LCD_LayerDefaultInit+0xbc>)
 80426ce:	f003 fed1 	bl	8046474 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80426d2:	88fa      	ldrh	r2, [r7, #6]
 80426d4:	4913      	ldr	r1, [pc, #76]	; (8042724 <BSP_LCD_LayerDefaultInit+0xc0>)
 80426d6:	4613      	mov	r3, r2
 80426d8:	005b      	lsls	r3, r3, #1
 80426da:	4413      	add	r3, r2
 80426dc:	009b      	lsls	r3, r3, #2
 80426de:	440b      	add	r3, r1
 80426e0:	3304      	adds	r3, #4
 80426e2:	f04f 32ff 	mov.w	r2, #4294967295
 80426e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80426e8:	88fa      	ldrh	r2, [r7, #6]
 80426ea:	490e      	ldr	r1, [pc, #56]	; (8042724 <BSP_LCD_LayerDefaultInit+0xc0>)
 80426ec:	4613      	mov	r3, r2
 80426ee:	005b      	lsls	r3, r3, #1
 80426f0:	4413      	add	r3, r2
 80426f2:	009b      	lsls	r3, r3, #2
 80426f4:	440b      	add	r3, r1
 80426f6:	3308      	adds	r3, #8
 80426f8:	4a0b      	ldr	r2, [pc, #44]	; (8042728 <BSP_LCD_LayerDefaultInit+0xc4>)
 80426fa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80426fc:	88fa      	ldrh	r2, [r7, #6]
 80426fe:	4909      	ldr	r1, [pc, #36]	; (8042724 <BSP_LCD_LayerDefaultInit+0xc0>)
 8042700:	4613      	mov	r3, r2
 8042702:	005b      	lsls	r3, r3, #1
 8042704:	4413      	add	r3, r2
 8042706:	009b      	lsls	r3, r3, #2
 8042708:	440b      	add	r3, r1
 804270a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 804270e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8042710:	4803      	ldr	r0, [pc, #12]	; (8042720 <BSP_LCD_LayerDefaultInit+0xbc>)
 8042712:	f003 ff6b 	bl	80465ec <HAL_LTDC_EnableDither>
}
 8042716:	bf00      	nop
 8042718:	3740      	adds	r7, #64	; 0x40
 804271a:	46bd      	mov	sp, r7
 804271c:	bd80      	pop	{r7, pc}
 804271e:	bf00      	nop
 8042720:	20000884 	.word	0x20000884
 8042724:	200009a0 	.word	0x200009a0
 8042728:	20000040 	.word	0x20000040

0804272c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 804272c:	b480      	push	{r7}
 804272e:	b083      	sub	sp, #12
 8042730:	af00      	add	r7, sp, #0
 8042732:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8042734:	4a04      	ldr	r2, [pc, #16]	; (8042748 <BSP_LCD_SelectLayer+0x1c>)
 8042736:	687b      	ldr	r3, [r7, #4]
 8042738:	6013      	str	r3, [r2, #0]
}
 804273a:	bf00      	nop
 804273c:	370c      	adds	r7, #12
 804273e:	46bd      	mov	sp, r7
 8042740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042744:	4770      	bx	lr
 8042746:	bf00      	nop
 8042748:	2000099c 	.word	0x2000099c

0804274c <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 804274c:	b480      	push	{r7}
 804274e:	b083      	sub	sp, #12
 8042750:	af00      	add	r7, sp, #0
 8042752:	6078      	str	r0, [r7, #4]
 8042754:	460b      	mov	r3, r1
 8042756:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8042758:	78fb      	ldrb	r3, [r7, #3]
 804275a:	2b01      	cmp	r3, #1
 804275c:	d112      	bne.n	8042784 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 804275e:	4b19      	ldr	r3, [pc, #100]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 8042760:	681b      	ldr	r3, [r3, #0]
 8042762:	461a      	mov	r2, r3
 8042764:	687b      	ldr	r3, [r7, #4]
 8042766:	01db      	lsls	r3, r3, #7
 8042768:	4413      	add	r3, r2
 804276a:	3384      	adds	r3, #132	; 0x84
 804276c:	681b      	ldr	r3, [r3, #0]
 804276e:	4a15      	ldr	r2, [pc, #84]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 8042770:	6812      	ldr	r2, [r2, #0]
 8042772:	4611      	mov	r1, r2
 8042774:	687a      	ldr	r2, [r7, #4]
 8042776:	01d2      	lsls	r2, r2, #7
 8042778:	440a      	add	r2, r1
 804277a:	3284      	adds	r2, #132	; 0x84
 804277c:	f043 0301 	orr.w	r3, r3, #1
 8042780:	6013      	str	r3, [r2, #0]
 8042782:	e011      	b.n	80427a8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8042784:	4b0f      	ldr	r3, [pc, #60]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 8042786:	681b      	ldr	r3, [r3, #0]
 8042788:	461a      	mov	r2, r3
 804278a:	687b      	ldr	r3, [r7, #4]
 804278c:	01db      	lsls	r3, r3, #7
 804278e:	4413      	add	r3, r2
 8042790:	3384      	adds	r3, #132	; 0x84
 8042792:	681b      	ldr	r3, [r3, #0]
 8042794:	4a0b      	ldr	r2, [pc, #44]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 8042796:	6812      	ldr	r2, [r2, #0]
 8042798:	4611      	mov	r1, r2
 804279a:	687a      	ldr	r2, [r7, #4]
 804279c:	01d2      	lsls	r2, r2, #7
 804279e:	440a      	add	r2, r1
 80427a0:	3284      	adds	r2, #132	; 0x84
 80427a2:	f023 0301 	bic.w	r3, r3, #1
 80427a6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80427a8:	4b06      	ldr	r3, [pc, #24]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 80427aa:	681b      	ldr	r3, [r3, #0]
 80427ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80427ae:	4b05      	ldr	r3, [pc, #20]	; (80427c4 <BSP_LCD_SetLayerVisible+0x78>)
 80427b0:	681b      	ldr	r3, [r3, #0]
 80427b2:	f042 0201 	orr.w	r2, r2, #1
 80427b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80427b8:	bf00      	nop
 80427ba:	370c      	adds	r7, #12
 80427bc:	46bd      	mov	sp, r7
 80427be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427c2:	4770      	bx	lr
 80427c4:	20000884 	.word	0x20000884

080427c8 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 80427c8:	b580      	push	{r7, lr}
 80427ca:	b082      	sub	sp, #8
 80427cc:	af00      	add	r7, sp, #0
 80427ce:	6078      	str	r0, [r7, #4]
 80427d0:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80427d2:	687a      	ldr	r2, [r7, #4]
 80427d4:	6839      	ldr	r1, [r7, #0]
 80427d6:	4805      	ldr	r0, [pc, #20]	; (80427ec <BSP_LCD_SetColorKeying+0x24>)
 80427d8:	f003 fe8a 	bl	80464f0 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80427dc:	6879      	ldr	r1, [r7, #4]
 80427de:	4803      	ldr	r0, [pc, #12]	; (80427ec <BSP_LCD_SetColorKeying+0x24>)
 80427e0:	f003 feca 	bl	8046578 <HAL_LTDC_EnableColorKeying>
}
 80427e4:	bf00      	nop
 80427e6:	3708      	adds	r7, #8
 80427e8:	46bd      	mov	sp, r7
 80427ea:	bd80      	pop	{r7, pc}
 80427ec:	20000884 	.word	0x20000884

080427f0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80427f0:	b480      	push	{r7}
 80427f2:	b083      	sub	sp, #12
 80427f4:	af00      	add	r7, sp, #0
 80427f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80427f8:	4b07      	ldr	r3, [pc, #28]	; (8042818 <BSP_LCD_SetTextColor+0x28>)
 80427fa:	681a      	ldr	r2, [r3, #0]
 80427fc:	4907      	ldr	r1, [pc, #28]	; (804281c <BSP_LCD_SetTextColor+0x2c>)
 80427fe:	4613      	mov	r3, r2
 8042800:	005b      	lsls	r3, r3, #1
 8042802:	4413      	add	r3, r2
 8042804:	009b      	lsls	r3, r3, #2
 8042806:	440b      	add	r3, r1
 8042808:	687a      	ldr	r2, [r7, #4]
 804280a:	601a      	str	r2, [r3, #0]
}
 804280c:	bf00      	nop
 804280e:	370c      	adds	r7, #12
 8042810:	46bd      	mov	sp, r7
 8042812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042816:	4770      	bx	lr
 8042818:	2000099c 	.word	0x2000099c
 804281c:	200009a0 	.word	0x200009a0

08042820 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8042820:	b480      	push	{r7}
 8042822:	b083      	sub	sp, #12
 8042824:	af00      	add	r7, sp, #0
 8042826:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8042828:	4b08      	ldr	r3, [pc, #32]	; (804284c <BSP_LCD_SetBackColor+0x2c>)
 804282a:	681a      	ldr	r2, [r3, #0]
 804282c:	4908      	ldr	r1, [pc, #32]	; (8042850 <BSP_LCD_SetBackColor+0x30>)
 804282e:	4613      	mov	r3, r2
 8042830:	005b      	lsls	r3, r3, #1
 8042832:	4413      	add	r3, r2
 8042834:	009b      	lsls	r3, r3, #2
 8042836:	440b      	add	r3, r1
 8042838:	3304      	adds	r3, #4
 804283a:	687a      	ldr	r2, [r7, #4]
 804283c:	601a      	str	r2, [r3, #0]
}
 804283e:	bf00      	nop
 8042840:	370c      	adds	r7, #12
 8042842:	46bd      	mov	sp, r7
 8042844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042848:	4770      	bx	lr
 804284a:	bf00      	nop
 804284c:	2000099c 	.word	0x2000099c
 8042850:	200009a0 	.word	0x200009a0

08042854 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8042854:	b480      	push	{r7}
 8042856:	b083      	sub	sp, #12
 8042858:	af00      	add	r7, sp, #0
 804285a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 804285c:	4b08      	ldr	r3, [pc, #32]	; (8042880 <BSP_LCD_SetFont+0x2c>)
 804285e:	681a      	ldr	r2, [r3, #0]
 8042860:	4908      	ldr	r1, [pc, #32]	; (8042884 <BSP_LCD_SetFont+0x30>)
 8042862:	4613      	mov	r3, r2
 8042864:	005b      	lsls	r3, r3, #1
 8042866:	4413      	add	r3, r2
 8042868:	009b      	lsls	r3, r3, #2
 804286a:	440b      	add	r3, r1
 804286c:	3308      	adds	r3, #8
 804286e:	687a      	ldr	r2, [r7, #4]
 8042870:	601a      	str	r2, [r3, #0]
}
 8042872:	bf00      	nop
 8042874:	370c      	adds	r7, #12
 8042876:	46bd      	mov	sp, r7
 8042878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804287c:	4770      	bx	lr
 804287e:	bf00      	nop
 8042880:	2000099c 	.word	0x2000099c
 8042884:	200009a0 	.word	0x200009a0

08042888 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8042888:	b5f0      	push	{r4, r5, r6, r7, lr}
 804288a:	b085      	sub	sp, #20
 804288c:	af02      	add	r7, sp, #8
 804288e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8042890:	4b0f      	ldr	r3, [pc, #60]	; (80428d0 <BSP_LCD_Clear+0x48>)
 8042892:	681c      	ldr	r4, [r3, #0]
 8042894:	4b0e      	ldr	r3, [pc, #56]	; (80428d0 <BSP_LCD_Clear+0x48>)
 8042896:	681b      	ldr	r3, [r3, #0]
 8042898:	4a0e      	ldr	r2, [pc, #56]	; (80428d4 <BSP_LCD_Clear+0x4c>)
 804289a:	2134      	movs	r1, #52	; 0x34
 804289c:	fb01 f303 	mul.w	r3, r1, r3
 80428a0:	4413      	add	r3, r2
 80428a2:	335c      	adds	r3, #92	; 0x5c
 80428a4:	681b      	ldr	r3, [r3, #0]
 80428a6:	461e      	mov	r6, r3
 80428a8:	f7ff fec4 	bl	8042634 <BSP_LCD_GetXSize>
 80428ac:	4605      	mov	r5, r0
 80428ae:	f7ff fecd 	bl	804264c <BSP_LCD_GetYSize>
 80428b2:	4602      	mov	r2, r0
 80428b4:	687b      	ldr	r3, [r7, #4]
 80428b6:	9301      	str	r3, [sp, #4]
 80428b8:	2300      	movs	r3, #0
 80428ba:	9300      	str	r3, [sp, #0]
 80428bc:	4613      	mov	r3, r2
 80428be:	462a      	mov	r2, r5
 80428c0:	4631      	mov	r1, r6
 80428c2:	4620      	mov	r0, r4
 80428c4:	f000 fad0 	bl	8042e68 <FillBuffer>
}
 80428c8:	bf00      	nop
 80428ca:	370c      	adds	r7, #12
 80428cc:	46bd      	mov	sp, r7
 80428ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80428d0:	2000099c 	.word	0x2000099c
 80428d4:	20000884 	.word	0x20000884

080428d8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80428d8:	b590      	push	{r4, r7, lr}
 80428da:	b083      	sub	sp, #12
 80428dc:	af00      	add	r7, sp, #0
 80428de:	4603      	mov	r3, r0
 80428e0:	80fb      	strh	r3, [r7, #6]
 80428e2:	460b      	mov	r3, r1
 80428e4:	80bb      	strh	r3, [r7, #4]
 80428e6:	4613      	mov	r3, r2
 80428e8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80428ea:	4b1b      	ldr	r3, [pc, #108]	; (8042958 <BSP_LCD_DisplayChar+0x80>)
 80428ec:	681a      	ldr	r2, [r3, #0]
 80428ee:	491b      	ldr	r1, [pc, #108]	; (804295c <BSP_LCD_DisplayChar+0x84>)
 80428f0:	4613      	mov	r3, r2
 80428f2:	005b      	lsls	r3, r3, #1
 80428f4:	4413      	add	r3, r2
 80428f6:	009b      	lsls	r3, r3, #2
 80428f8:	440b      	add	r3, r1
 80428fa:	3308      	adds	r3, #8
 80428fc:	681b      	ldr	r3, [r3, #0]
 80428fe:	6819      	ldr	r1, [r3, #0]
 8042900:	78fb      	ldrb	r3, [r7, #3]
 8042902:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042906:	4b14      	ldr	r3, [pc, #80]	; (8042958 <BSP_LCD_DisplayChar+0x80>)
 8042908:	681a      	ldr	r2, [r3, #0]
 804290a:	4c14      	ldr	r4, [pc, #80]	; (804295c <BSP_LCD_DisplayChar+0x84>)
 804290c:	4613      	mov	r3, r2
 804290e:	005b      	lsls	r3, r3, #1
 8042910:	4413      	add	r3, r2
 8042912:	009b      	lsls	r3, r3, #2
 8042914:	4423      	add	r3, r4
 8042916:	3308      	adds	r3, #8
 8042918:	681b      	ldr	r3, [r3, #0]
 804291a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 804291c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8042920:	4b0d      	ldr	r3, [pc, #52]	; (8042958 <BSP_LCD_DisplayChar+0x80>)
 8042922:	681a      	ldr	r2, [r3, #0]
 8042924:	4c0d      	ldr	r4, [pc, #52]	; (804295c <BSP_LCD_DisplayChar+0x84>)
 8042926:	4613      	mov	r3, r2
 8042928:	005b      	lsls	r3, r3, #1
 804292a:	4413      	add	r3, r2
 804292c:	009b      	lsls	r3, r3, #2
 804292e:	4423      	add	r3, r4
 8042930:	3308      	adds	r3, #8
 8042932:	681b      	ldr	r3, [r3, #0]
 8042934:	889b      	ldrh	r3, [r3, #4]
 8042936:	3307      	adds	r3, #7
 8042938:	2b00      	cmp	r3, #0
 804293a:	da00      	bge.n	804293e <BSP_LCD_DisplayChar+0x66>
 804293c:	3307      	adds	r3, #7
 804293e:	10db      	asrs	r3, r3, #3
 8042940:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8042944:	18ca      	adds	r2, r1, r3
 8042946:	88b9      	ldrh	r1, [r7, #4]
 8042948:	88fb      	ldrh	r3, [r7, #6]
 804294a:	4618      	mov	r0, r3
 804294c:	f000 f9d2 	bl	8042cf4 <DrawChar>
}
 8042950:	bf00      	nop
 8042952:	370c      	adds	r7, #12
 8042954:	46bd      	mov	sp, r7
 8042956:	bd90      	pop	{r4, r7, pc}
 8042958:	2000099c 	.word	0x2000099c
 804295c:	200009a0 	.word	0x200009a0

08042960 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8042960:	b5b0      	push	{r4, r5, r7, lr}
 8042962:	b088      	sub	sp, #32
 8042964:	af00      	add	r7, sp, #0
 8042966:	60ba      	str	r2, [r7, #8]
 8042968:	461a      	mov	r2, r3
 804296a:	4603      	mov	r3, r0
 804296c:	81fb      	strh	r3, [r7, #14]
 804296e:	460b      	mov	r3, r1
 8042970:	81bb      	strh	r3, [r7, #12]
 8042972:	4613      	mov	r3, r2
 8042974:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8042976:	2301      	movs	r3, #1
 8042978:	83fb      	strh	r3, [r7, #30]
 804297a:	2300      	movs	r3, #0
 804297c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 804297e:	2300      	movs	r3, #0
 8042980:	61bb      	str	r3, [r7, #24]
 8042982:	2300      	movs	r3, #0
 8042984:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8042986:	68bb      	ldr	r3, [r7, #8]
 8042988:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 804298a:	e002      	b.n	8042992 <BSP_LCD_DisplayStringAt+0x32>
 804298c:	69bb      	ldr	r3, [r7, #24]
 804298e:	3301      	adds	r3, #1
 8042990:	61bb      	str	r3, [r7, #24]
 8042992:	697b      	ldr	r3, [r7, #20]
 8042994:	1c5a      	adds	r2, r3, #1
 8042996:	617a      	str	r2, [r7, #20]
 8042998:	781b      	ldrb	r3, [r3, #0]
 804299a:	2b00      	cmp	r3, #0
 804299c:	d1f6      	bne.n	804298c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 804299e:	f7ff fe49 	bl	8042634 <BSP_LCD_GetXSize>
 80429a2:	4601      	mov	r1, r0
 80429a4:	4b4b      	ldr	r3, [pc, #300]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 80429a6:	681a      	ldr	r2, [r3, #0]
 80429a8:	484b      	ldr	r0, [pc, #300]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 80429aa:	4613      	mov	r3, r2
 80429ac:	005b      	lsls	r3, r3, #1
 80429ae:	4413      	add	r3, r2
 80429b0:	009b      	lsls	r3, r3, #2
 80429b2:	4403      	add	r3, r0
 80429b4:	3308      	adds	r3, #8
 80429b6:	681b      	ldr	r3, [r3, #0]
 80429b8:	889b      	ldrh	r3, [r3, #4]
 80429ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80429be:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80429c0:	79fb      	ldrb	r3, [r7, #7]
 80429c2:	2b03      	cmp	r3, #3
 80429c4:	d01c      	beq.n	8042a00 <BSP_LCD_DisplayStringAt+0xa0>
 80429c6:	2b03      	cmp	r3, #3
 80429c8:	dc33      	bgt.n	8042a32 <BSP_LCD_DisplayStringAt+0xd2>
 80429ca:	2b01      	cmp	r3, #1
 80429cc:	d002      	beq.n	80429d4 <BSP_LCD_DisplayStringAt+0x74>
 80429ce:	2b02      	cmp	r3, #2
 80429d0:	d019      	beq.n	8042a06 <BSP_LCD_DisplayStringAt+0xa6>
 80429d2:	e02e      	b.n	8042a32 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80429d4:	693a      	ldr	r2, [r7, #16]
 80429d6:	69bb      	ldr	r3, [r7, #24]
 80429d8:	1ad1      	subs	r1, r2, r3
 80429da:	4b3e      	ldr	r3, [pc, #248]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 80429dc:	681a      	ldr	r2, [r3, #0]
 80429de:	483e      	ldr	r0, [pc, #248]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 80429e0:	4613      	mov	r3, r2
 80429e2:	005b      	lsls	r3, r3, #1
 80429e4:	4413      	add	r3, r2
 80429e6:	009b      	lsls	r3, r3, #2
 80429e8:	4403      	add	r3, r0
 80429ea:	3308      	adds	r3, #8
 80429ec:	681b      	ldr	r3, [r3, #0]
 80429ee:	889b      	ldrh	r3, [r3, #4]
 80429f0:	fb01 f303 	mul.w	r3, r1, r3
 80429f4:	085b      	lsrs	r3, r3, #1
 80429f6:	b29a      	uxth	r2, r3
 80429f8:	89fb      	ldrh	r3, [r7, #14]
 80429fa:	4413      	add	r3, r2
 80429fc:	83fb      	strh	r3, [r7, #30]
      break;
 80429fe:	e01b      	b.n	8042a38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8042a00:	89fb      	ldrh	r3, [r7, #14]
 8042a02:	83fb      	strh	r3, [r7, #30]
      break;
 8042a04:	e018      	b.n	8042a38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8042a06:	693a      	ldr	r2, [r7, #16]
 8042a08:	69bb      	ldr	r3, [r7, #24]
 8042a0a:	1ad3      	subs	r3, r2, r3
 8042a0c:	b299      	uxth	r1, r3
 8042a0e:	4b31      	ldr	r3, [pc, #196]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 8042a10:	681a      	ldr	r2, [r3, #0]
 8042a12:	4831      	ldr	r0, [pc, #196]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 8042a14:	4613      	mov	r3, r2
 8042a16:	005b      	lsls	r3, r3, #1
 8042a18:	4413      	add	r3, r2
 8042a1a:	009b      	lsls	r3, r3, #2
 8042a1c:	4403      	add	r3, r0
 8042a1e:	3308      	adds	r3, #8
 8042a20:	681b      	ldr	r3, [r3, #0]
 8042a22:	889b      	ldrh	r3, [r3, #4]
 8042a24:	fb11 f303 	smulbb	r3, r1, r3
 8042a28:	b29a      	uxth	r2, r3
 8042a2a:	89fb      	ldrh	r3, [r7, #14]
 8042a2c:	4413      	add	r3, r2
 8042a2e:	83fb      	strh	r3, [r7, #30]
      break;
 8042a30:	e002      	b.n	8042a38 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8042a32:	89fb      	ldrh	r3, [r7, #14]
 8042a34:	83fb      	strh	r3, [r7, #30]
      break;
 8042a36:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042a38:	e01a      	b.n	8042a70 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8042a3a:	68bb      	ldr	r3, [r7, #8]
 8042a3c:	781a      	ldrb	r2, [r3, #0]
 8042a3e:	89b9      	ldrh	r1, [r7, #12]
 8042a40:	8bfb      	ldrh	r3, [r7, #30]
 8042a42:	4618      	mov	r0, r3
 8042a44:	f7ff ff48 	bl	80428d8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8042a48:	4b22      	ldr	r3, [pc, #136]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 8042a4a:	681a      	ldr	r2, [r3, #0]
 8042a4c:	4922      	ldr	r1, [pc, #136]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 8042a4e:	4613      	mov	r3, r2
 8042a50:	005b      	lsls	r3, r3, #1
 8042a52:	4413      	add	r3, r2
 8042a54:	009b      	lsls	r3, r3, #2
 8042a56:	440b      	add	r3, r1
 8042a58:	3308      	adds	r3, #8
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	889a      	ldrh	r2, [r3, #4]
 8042a5e:	8bfb      	ldrh	r3, [r7, #30]
 8042a60:	4413      	add	r3, r2
 8042a62:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8042a64:	68bb      	ldr	r3, [r7, #8]
 8042a66:	3301      	adds	r3, #1
 8042a68:	60bb      	str	r3, [r7, #8]
    i++;
 8042a6a:	8bbb      	ldrh	r3, [r7, #28]
 8042a6c:	3301      	adds	r3, #1
 8042a6e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8042a70:	68bb      	ldr	r3, [r7, #8]
 8042a72:	781b      	ldrb	r3, [r3, #0]
 8042a74:	2b00      	cmp	r3, #0
 8042a76:	bf14      	ite	ne
 8042a78:	2301      	movne	r3, #1
 8042a7a:	2300      	moveq	r3, #0
 8042a7c:	b2dc      	uxtb	r4, r3
 8042a7e:	f7ff fdd9 	bl	8042634 <BSP_LCD_GetXSize>
 8042a82:	8bb9      	ldrh	r1, [r7, #28]
 8042a84:	4b13      	ldr	r3, [pc, #76]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 8042a86:	681a      	ldr	r2, [r3, #0]
 8042a88:	4d13      	ldr	r5, [pc, #76]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 8042a8a:	4613      	mov	r3, r2
 8042a8c:	005b      	lsls	r3, r3, #1
 8042a8e:	4413      	add	r3, r2
 8042a90:	009b      	lsls	r3, r3, #2
 8042a92:	442b      	add	r3, r5
 8042a94:	3308      	adds	r3, #8
 8042a96:	681b      	ldr	r3, [r3, #0]
 8042a98:	889b      	ldrh	r3, [r3, #4]
 8042a9a:	fb01 f303 	mul.w	r3, r1, r3
 8042a9e:	1ac3      	subs	r3, r0, r3
 8042aa0:	b299      	uxth	r1, r3
 8042aa2:	4b0c      	ldr	r3, [pc, #48]	; (8042ad4 <BSP_LCD_DisplayStringAt+0x174>)
 8042aa4:	681a      	ldr	r2, [r3, #0]
 8042aa6:	480c      	ldr	r0, [pc, #48]	; (8042ad8 <BSP_LCD_DisplayStringAt+0x178>)
 8042aa8:	4613      	mov	r3, r2
 8042aaa:	005b      	lsls	r3, r3, #1
 8042aac:	4413      	add	r3, r2
 8042aae:	009b      	lsls	r3, r3, #2
 8042ab0:	4403      	add	r3, r0
 8042ab2:	3308      	adds	r3, #8
 8042ab4:	681b      	ldr	r3, [r3, #0]
 8042ab6:	889b      	ldrh	r3, [r3, #4]
 8042ab8:	4299      	cmp	r1, r3
 8042aba:	bf2c      	ite	cs
 8042abc:	2301      	movcs	r3, #1
 8042abe:	2300      	movcc	r3, #0
 8042ac0:	b2db      	uxtb	r3, r3
 8042ac2:	4023      	ands	r3, r4
 8042ac4:	b2db      	uxtb	r3, r3
 8042ac6:	2b00      	cmp	r3, #0
 8042ac8:	d1b7      	bne.n	8042a3a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8042aca:	bf00      	nop
 8042acc:	bf00      	nop
 8042ace:	3720      	adds	r7, #32
 8042ad0:	46bd      	mov	sp, r7
 8042ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8042ad4:	2000099c 	.word	0x2000099c
 8042ad8:	200009a0 	.word	0x200009a0

08042adc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8042adc:	b580      	push	{r7, lr}
 8042ade:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8042ae0:	4b05      	ldr	r3, [pc, #20]	; (8042af8 <BSP_LCD_DisplayOn+0x1c>)
 8042ae2:	681b      	ldr	r3, [r3, #0]
 8042ae4:	689b      	ldr	r3, [r3, #8]
 8042ae6:	2b00      	cmp	r3, #0
 8042ae8:	d003      	beq.n	8042af2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8042aea:	4b03      	ldr	r3, [pc, #12]	; (8042af8 <BSP_LCD_DisplayOn+0x1c>)
 8042aec:	681b      	ldr	r3, [r3, #0]
 8042aee:	689b      	ldr	r3, [r3, #8]
 8042af0:	4798      	blx	r3
  }
}
 8042af2:	bf00      	nop
 8042af4:	bd80      	pop	{r7, pc}
 8042af6:	bf00      	nop
 8042af8:	200009b8 	.word	0x200009b8

08042afc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8042afc:	b580      	push	{r7, lr}
 8042afe:	b08e      	sub	sp, #56	; 0x38
 8042b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8042b02:	2300      	movs	r3, #0
 8042b04:	623b      	str	r3, [r7, #32]
 8042b06:	4b61      	ldr	r3, [pc, #388]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042b0a:	4a60      	ldr	r2, [pc, #384]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8042b10:	6453      	str	r3, [r2, #68]	; 0x44
 8042b12:	4b5e      	ldr	r3, [pc, #376]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8042b1a:	623b      	str	r3, [r7, #32]
 8042b1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8042b1e:	2300      	movs	r3, #0
 8042b20:	61fb      	str	r3, [r7, #28]
 8042b22:	4b5a      	ldr	r3, [pc, #360]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b26:	4a59      	ldr	r2, [pc, #356]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8042b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8042b2e:	4b57      	ldr	r3, [pc, #348]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042b36:	61fb      	str	r3, [r7, #28]
 8042b38:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8042b3a:	2300      	movs	r3, #0
 8042b3c:	61bb      	str	r3, [r7, #24]
 8042b3e:	4b53      	ldr	r3, [pc, #332]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b42:	4a52      	ldr	r2, [pc, #328]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b44:	f043 0301 	orr.w	r3, r3, #1
 8042b48:	6313      	str	r3, [r2, #48]	; 0x30
 8042b4a:	4b50      	ldr	r3, [pc, #320]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b4e:	f003 0301 	and.w	r3, r3, #1
 8042b52:	61bb      	str	r3, [r7, #24]
 8042b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8042b56:	2300      	movs	r3, #0
 8042b58:	617b      	str	r3, [r7, #20]
 8042b5a:	4b4c      	ldr	r3, [pc, #304]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b5e:	4a4b      	ldr	r2, [pc, #300]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b60:	f043 0302 	orr.w	r3, r3, #2
 8042b64:	6313      	str	r3, [r2, #48]	; 0x30
 8042b66:	4b49      	ldr	r3, [pc, #292]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b6a:	f003 0302 	and.w	r3, r3, #2
 8042b6e:	617b      	str	r3, [r7, #20]
 8042b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8042b72:	2300      	movs	r3, #0
 8042b74:	613b      	str	r3, [r7, #16]
 8042b76:	4b45      	ldr	r3, [pc, #276]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b7a:	4a44      	ldr	r2, [pc, #272]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b7c:	f043 0304 	orr.w	r3, r3, #4
 8042b80:	6313      	str	r3, [r2, #48]	; 0x30
 8042b82:	4b42      	ldr	r3, [pc, #264]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b86:	f003 0304 	and.w	r3, r3, #4
 8042b8a:	613b      	str	r3, [r7, #16]
 8042b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8042b8e:	2300      	movs	r3, #0
 8042b90:	60fb      	str	r3, [r7, #12]
 8042b92:	4b3e      	ldr	r3, [pc, #248]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042b96:	4a3d      	ldr	r2, [pc, #244]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042b98:	f043 0308 	orr.w	r3, r3, #8
 8042b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8042b9e:	4b3b      	ldr	r3, [pc, #236]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042ba2:	f003 0308 	and.w	r3, r3, #8
 8042ba6:	60fb      	str	r3, [r7, #12]
 8042ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8042baa:	2300      	movs	r3, #0
 8042bac:	60bb      	str	r3, [r7, #8]
 8042bae:	4b37      	ldr	r3, [pc, #220]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bb2:	4a36      	ldr	r2, [pc, #216]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bb4:	f043 0320 	orr.w	r3, r3, #32
 8042bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8042bba:	4b34      	ldr	r3, [pc, #208]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bbe:	f003 0320 	and.w	r3, r3, #32
 8042bc2:	60bb      	str	r3, [r7, #8]
 8042bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8042bc6:	2300      	movs	r3, #0
 8042bc8:	607b      	str	r3, [r7, #4]
 8042bca:	4b30      	ldr	r3, [pc, #192]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bce:	4a2f      	ldr	r2, [pc, #188]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8042bd6:	4b2d      	ldr	r3, [pc, #180]	; (8042c8c <BSP_LCD_MspInit+0x190>)
 8042bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042bde:	607b      	str	r3, [r7, #4]
 8042be0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8042be2:	f641 0358 	movw	r3, #6232	; 0x1858
 8042be6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8042be8:	2302      	movs	r3, #2
 8042bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8042bec:	2300      	movs	r3, #0
 8042bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8042bf0:	2302      	movs	r3, #2
 8042bf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8042bf4:	230e      	movs	r3, #14
 8042bf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8042bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042bfc:	4619      	mov	r1, r3
 8042bfe:	4824      	ldr	r0, [pc, #144]	; (8042c90 <BSP_LCD_MspInit+0x194>)
 8042c00:	f001 f9f2 	bl	8043fe8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8042c04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8042c08:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c0e:	4619      	mov	r1, r3
 8042c10:	4820      	ldr	r0, [pc, #128]	; (8042c94 <BSP_LCD_MspInit+0x198>)
 8042c12:	f001 f9e9 	bl	8043fe8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8042c16:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8042c1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8042c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c20:	4619      	mov	r1, r3
 8042c22:	481d      	ldr	r0, [pc, #116]	; (8042c98 <BSP_LCD_MspInit+0x19c>)
 8042c24:	f001 f9e0 	bl	8043fe8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8042c28:	2348      	movs	r3, #72	; 0x48
 8042c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8042c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c30:	4619      	mov	r1, r3
 8042c32:	481a      	ldr	r0, [pc, #104]	; (8042c9c <BSP_LCD_MspInit+0x1a0>)
 8042c34:	f001 f9d8 	bl	8043fe8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8042c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8042c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c42:	4619      	mov	r1, r3
 8042c44:	4816      	ldr	r0, [pc, #88]	; (8042ca0 <BSP_LCD_MspInit+0x1a4>)
 8042c46:	f001 f9cf 	bl	8043fe8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8042c4a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8042c4e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c54:	4619      	mov	r1, r3
 8042c56:	4813      	ldr	r0, [pc, #76]	; (8042ca4 <BSP_LCD_MspInit+0x1a8>)
 8042c58:	f001 f9c6 	bl	8043fe8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8042c5c:	2303      	movs	r3, #3
 8042c5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8042c60:	2309      	movs	r3, #9
 8042c62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8042c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c68:	4619      	mov	r1, r3
 8042c6a:	480a      	ldr	r0, [pc, #40]	; (8042c94 <BSP_LCD_MspInit+0x198>)
 8042c6c:	f001 f9bc 	bl	8043fe8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8042c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8042c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8042c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8042c7a:	4619      	mov	r1, r3
 8042c7c:	4809      	ldr	r0, [pc, #36]	; (8042ca4 <BSP_LCD_MspInit+0x1a8>)
 8042c7e:	f001 f9b3 	bl	8043fe8 <HAL_GPIO_Init>
}
 8042c82:	bf00      	nop
 8042c84:	3738      	adds	r7, #56	; 0x38
 8042c86:	46bd      	mov	sp, r7
 8042c88:	bd80      	pop	{r7, pc}
 8042c8a:	bf00      	nop
 8042c8c:	40023800 	.word	0x40023800
 8042c90:	40020000 	.word	0x40020000
 8042c94:	40020400 	.word	0x40020400
 8042c98:	40020800 	.word	0x40020800
 8042c9c:	40020c00 	.word	0x40020c00
 8042ca0:	40021400 	.word	0x40021400
 8042ca4:	40021800 	.word	0x40021800

08042ca8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8042ca8:	b5b0      	push	{r4, r5, r7, lr}
 8042caa:	b082      	sub	sp, #8
 8042cac:	af00      	add	r7, sp, #0
 8042cae:	4603      	mov	r3, r0
 8042cb0:	603a      	str	r2, [r7, #0]
 8042cb2:	80fb      	strh	r3, [r7, #6]
 8042cb4:	460b      	mov	r3, r1
 8042cb6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8042cb8:	4b0c      	ldr	r3, [pc, #48]	; (8042cec <BSP_LCD_DrawPixel+0x44>)
 8042cba:	681b      	ldr	r3, [r3, #0]
 8042cbc:	4a0c      	ldr	r2, [pc, #48]	; (8042cf0 <BSP_LCD_DrawPixel+0x48>)
 8042cbe:	2134      	movs	r1, #52	; 0x34
 8042cc0:	fb01 f303 	mul.w	r3, r1, r3
 8042cc4:	4413      	add	r3, r2
 8042cc6:	335c      	adds	r3, #92	; 0x5c
 8042cc8:	681c      	ldr	r4, [r3, #0]
 8042cca:	88bd      	ldrh	r5, [r7, #4]
 8042ccc:	f7ff fcb2 	bl	8042634 <BSP_LCD_GetXSize>
 8042cd0:	4603      	mov	r3, r0
 8042cd2:	fb03 f205 	mul.w	r2, r3, r5
 8042cd6:	88fb      	ldrh	r3, [r7, #6]
 8042cd8:	4413      	add	r3, r2
 8042cda:	009b      	lsls	r3, r3, #2
 8042cdc:	4423      	add	r3, r4
 8042cde:	461a      	mov	r2, r3
 8042ce0:	683b      	ldr	r3, [r7, #0]
 8042ce2:	6013      	str	r3, [r2, #0]
}
 8042ce4:	bf00      	nop
 8042ce6:	3708      	adds	r7, #8
 8042ce8:	46bd      	mov	sp, r7
 8042cea:	bdb0      	pop	{r4, r5, r7, pc}
 8042cec:	2000099c 	.word	0x2000099c
 8042cf0:	20000884 	.word	0x20000884

08042cf4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8042cf4:	b580      	push	{r7, lr}
 8042cf6:	b088      	sub	sp, #32
 8042cf8:	af00      	add	r7, sp, #0
 8042cfa:	4603      	mov	r3, r0
 8042cfc:	603a      	str	r2, [r7, #0]
 8042cfe:	80fb      	strh	r3, [r7, #6]
 8042d00:	460b      	mov	r3, r1
 8042d02:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8042d04:	2300      	movs	r3, #0
 8042d06:	61fb      	str	r3, [r7, #28]
 8042d08:	2300      	movs	r3, #0
 8042d0a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8042d0c:	2300      	movs	r3, #0
 8042d0e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8042d10:	4b53      	ldr	r3, [pc, #332]	; (8042e60 <DrawChar+0x16c>)
 8042d12:	681a      	ldr	r2, [r3, #0]
 8042d14:	4953      	ldr	r1, [pc, #332]	; (8042e64 <DrawChar+0x170>)
 8042d16:	4613      	mov	r3, r2
 8042d18:	005b      	lsls	r3, r3, #1
 8042d1a:	4413      	add	r3, r2
 8042d1c:	009b      	lsls	r3, r3, #2
 8042d1e:	440b      	add	r3, r1
 8042d20:	3308      	adds	r3, #8
 8042d22:	681b      	ldr	r3, [r3, #0]
 8042d24:	88db      	ldrh	r3, [r3, #6]
 8042d26:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8042d28:	4b4d      	ldr	r3, [pc, #308]	; (8042e60 <DrawChar+0x16c>)
 8042d2a:	681a      	ldr	r2, [r3, #0]
 8042d2c:	494d      	ldr	r1, [pc, #308]	; (8042e64 <DrawChar+0x170>)
 8042d2e:	4613      	mov	r3, r2
 8042d30:	005b      	lsls	r3, r3, #1
 8042d32:	4413      	add	r3, r2
 8042d34:	009b      	lsls	r3, r3, #2
 8042d36:	440b      	add	r3, r1
 8042d38:	3308      	adds	r3, #8
 8042d3a:	681b      	ldr	r3, [r3, #0]
 8042d3c:	889b      	ldrh	r3, [r3, #4]
 8042d3e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8042d40:	8a3b      	ldrh	r3, [r7, #16]
 8042d42:	3307      	adds	r3, #7
 8042d44:	2b00      	cmp	r3, #0
 8042d46:	da00      	bge.n	8042d4a <DrawChar+0x56>
 8042d48:	3307      	adds	r3, #7
 8042d4a:	10db      	asrs	r3, r3, #3
 8042d4c:	b2db      	uxtb	r3, r3
 8042d4e:	00db      	lsls	r3, r3, #3
 8042d50:	b2da      	uxtb	r2, r3
 8042d52:	8a3b      	ldrh	r3, [r7, #16]
 8042d54:	b2db      	uxtb	r3, r3
 8042d56:	1ad3      	subs	r3, r2, r3
 8042d58:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8042d5a:	2300      	movs	r3, #0
 8042d5c:	61fb      	str	r3, [r7, #28]
 8042d5e:	e076      	b.n	8042e4e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8042d60:	8a3b      	ldrh	r3, [r7, #16]
 8042d62:	3307      	adds	r3, #7
 8042d64:	2b00      	cmp	r3, #0
 8042d66:	da00      	bge.n	8042d6a <DrawChar+0x76>
 8042d68:	3307      	adds	r3, #7
 8042d6a:	10db      	asrs	r3, r3, #3
 8042d6c:	461a      	mov	r2, r3
 8042d6e:	69fb      	ldr	r3, [r7, #28]
 8042d70:	fb02 f303 	mul.w	r3, r2, r3
 8042d74:	683a      	ldr	r2, [r7, #0]
 8042d76:	4413      	add	r3, r2
 8042d78:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8042d7a:	8a3b      	ldrh	r3, [r7, #16]
 8042d7c:	3307      	adds	r3, #7
 8042d7e:	2b00      	cmp	r3, #0
 8042d80:	da00      	bge.n	8042d84 <DrawChar+0x90>
 8042d82:	3307      	adds	r3, #7
 8042d84:	10db      	asrs	r3, r3, #3
 8042d86:	2b01      	cmp	r3, #1
 8042d88:	d002      	beq.n	8042d90 <DrawChar+0x9c>
 8042d8a:	2b02      	cmp	r3, #2
 8042d8c:	d004      	beq.n	8042d98 <DrawChar+0xa4>
 8042d8e:	e00c      	b.n	8042daa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8042d90:	68bb      	ldr	r3, [r7, #8]
 8042d92:	781b      	ldrb	r3, [r3, #0]
 8042d94:	617b      	str	r3, [r7, #20]
      break;
 8042d96:	e016      	b.n	8042dc6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8042d98:	68bb      	ldr	r3, [r7, #8]
 8042d9a:	781b      	ldrb	r3, [r3, #0]
 8042d9c:	021b      	lsls	r3, r3, #8
 8042d9e:	68ba      	ldr	r2, [r7, #8]
 8042da0:	3201      	adds	r2, #1
 8042da2:	7812      	ldrb	r2, [r2, #0]
 8042da4:	4313      	orrs	r3, r2
 8042da6:	617b      	str	r3, [r7, #20]
      break;
 8042da8:	e00d      	b.n	8042dc6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8042daa:	68bb      	ldr	r3, [r7, #8]
 8042dac:	781b      	ldrb	r3, [r3, #0]
 8042dae:	041a      	lsls	r2, r3, #16
 8042db0:	68bb      	ldr	r3, [r7, #8]
 8042db2:	3301      	adds	r3, #1
 8042db4:	781b      	ldrb	r3, [r3, #0]
 8042db6:	021b      	lsls	r3, r3, #8
 8042db8:	4313      	orrs	r3, r2
 8042dba:	68ba      	ldr	r2, [r7, #8]
 8042dbc:	3202      	adds	r2, #2
 8042dbe:	7812      	ldrb	r2, [r2, #0]
 8042dc0:	4313      	orrs	r3, r2
 8042dc2:	617b      	str	r3, [r7, #20]
      break;
 8042dc4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8042dc6:	2300      	movs	r3, #0
 8042dc8:	61bb      	str	r3, [r7, #24]
 8042dca:	e036      	b.n	8042e3a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8042dcc:	8a3a      	ldrh	r2, [r7, #16]
 8042dce:	69bb      	ldr	r3, [r7, #24]
 8042dd0:	1ad2      	subs	r2, r2, r3
 8042dd2:	7bfb      	ldrb	r3, [r7, #15]
 8042dd4:	4413      	add	r3, r2
 8042dd6:	3b01      	subs	r3, #1
 8042dd8:	2201      	movs	r2, #1
 8042dda:	fa02 f303 	lsl.w	r3, r2, r3
 8042dde:	461a      	mov	r2, r3
 8042de0:	697b      	ldr	r3, [r7, #20]
 8042de2:	4013      	ands	r3, r2
 8042de4:	2b00      	cmp	r3, #0
 8042de6:	d012      	beq.n	8042e0e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8042de8:	69bb      	ldr	r3, [r7, #24]
 8042dea:	b29a      	uxth	r2, r3
 8042dec:	88fb      	ldrh	r3, [r7, #6]
 8042dee:	4413      	add	r3, r2
 8042df0:	b298      	uxth	r0, r3
 8042df2:	4b1b      	ldr	r3, [pc, #108]	; (8042e60 <DrawChar+0x16c>)
 8042df4:	681a      	ldr	r2, [r3, #0]
 8042df6:	491b      	ldr	r1, [pc, #108]	; (8042e64 <DrawChar+0x170>)
 8042df8:	4613      	mov	r3, r2
 8042dfa:	005b      	lsls	r3, r3, #1
 8042dfc:	4413      	add	r3, r2
 8042dfe:	009b      	lsls	r3, r3, #2
 8042e00:	440b      	add	r3, r1
 8042e02:	681a      	ldr	r2, [r3, #0]
 8042e04:	88bb      	ldrh	r3, [r7, #4]
 8042e06:	4619      	mov	r1, r3
 8042e08:	f7ff ff4e 	bl	8042ca8 <BSP_LCD_DrawPixel>
 8042e0c:	e012      	b.n	8042e34 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8042e0e:	69bb      	ldr	r3, [r7, #24]
 8042e10:	b29a      	uxth	r2, r3
 8042e12:	88fb      	ldrh	r3, [r7, #6]
 8042e14:	4413      	add	r3, r2
 8042e16:	b298      	uxth	r0, r3
 8042e18:	4b11      	ldr	r3, [pc, #68]	; (8042e60 <DrawChar+0x16c>)
 8042e1a:	681a      	ldr	r2, [r3, #0]
 8042e1c:	4911      	ldr	r1, [pc, #68]	; (8042e64 <DrawChar+0x170>)
 8042e1e:	4613      	mov	r3, r2
 8042e20:	005b      	lsls	r3, r3, #1
 8042e22:	4413      	add	r3, r2
 8042e24:	009b      	lsls	r3, r3, #2
 8042e26:	440b      	add	r3, r1
 8042e28:	3304      	adds	r3, #4
 8042e2a:	681a      	ldr	r2, [r3, #0]
 8042e2c:	88bb      	ldrh	r3, [r7, #4]
 8042e2e:	4619      	mov	r1, r3
 8042e30:	f7ff ff3a 	bl	8042ca8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8042e34:	69bb      	ldr	r3, [r7, #24]
 8042e36:	3301      	adds	r3, #1
 8042e38:	61bb      	str	r3, [r7, #24]
 8042e3a:	8a3b      	ldrh	r3, [r7, #16]
 8042e3c:	69ba      	ldr	r2, [r7, #24]
 8042e3e:	429a      	cmp	r2, r3
 8042e40:	d3c4      	bcc.n	8042dcc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8042e42:	88bb      	ldrh	r3, [r7, #4]
 8042e44:	3301      	adds	r3, #1
 8042e46:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8042e48:	69fb      	ldr	r3, [r7, #28]
 8042e4a:	3301      	adds	r3, #1
 8042e4c:	61fb      	str	r3, [r7, #28]
 8042e4e:	8a7b      	ldrh	r3, [r7, #18]
 8042e50:	69fa      	ldr	r2, [r7, #28]
 8042e52:	429a      	cmp	r2, r3
 8042e54:	d384      	bcc.n	8042d60 <DrawChar+0x6c>
  }
}
 8042e56:	bf00      	nop
 8042e58:	bf00      	nop
 8042e5a:	3720      	adds	r7, #32
 8042e5c:	46bd      	mov	sp, r7
 8042e5e:	bd80      	pop	{r7, pc}
 8042e60:	2000099c 	.word	0x2000099c
 8042e64:	200009a0 	.word	0x200009a0

08042e68 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8042e68:	b580      	push	{r7, lr}
 8042e6a:	b086      	sub	sp, #24
 8042e6c:	af02      	add	r7, sp, #8
 8042e6e:	60f8      	str	r0, [r7, #12]
 8042e70:	60b9      	str	r1, [r7, #8]
 8042e72:	607a      	str	r2, [r7, #4]
 8042e74:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8042e76:	4b16      	ldr	r3, [pc, #88]	; (8042ed0 <FillBuffer+0x68>)
 8042e78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8042e7c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8042e7e:	4b14      	ldr	r3, [pc, #80]	; (8042ed0 <FillBuffer+0x68>)
 8042e80:	2200      	movs	r2, #0
 8042e82:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8042e84:	4a12      	ldr	r2, [pc, #72]	; (8042ed0 <FillBuffer+0x68>)
 8042e86:	69bb      	ldr	r3, [r7, #24]
 8042e88:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8042e8a:	4b11      	ldr	r3, [pc, #68]	; (8042ed0 <FillBuffer+0x68>)
 8042e8c:	4a11      	ldr	r2, [pc, #68]	; (8042ed4 <FillBuffer+0x6c>)
 8042e8e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8042e90:	480f      	ldr	r0, [pc, #60]	; (8042ed0 <FillBuffer+0x68>)
 8042e92:	f000 fd0d 	bl	80438b0 <HAL_DMA2D_Init>
 8042e96:	4603      	mov	r3, r0
 8042e98:	2b00      	cmp	r3, #0
 8042e9a:	d115      	bne.n	8042ec8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8042e9c:	68f9      	ldr	r1, [r7, #12]
 8042e9e:	480c      	ldr	r0, [pc, #48]	; (8042ed0 <FillBuffer+0x68>)
 8042ea0:	f000 ff74 	bl	8043d8c <HAL_DMA2D_ConfigLayer>
 8042ea4:	4603      	mov	r3, r0
 8042ea6:	2b00      	cmp	r3, #0
 8042ea8:	d10e      	bne.n	8042ec8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8042eaa:	68ba      	ldr	r2, [r7, #8]
 8042eac:	683b      	ldr	r3, [r7, #0]
 8042eae:	9300      	str	r3, [sp, #0]
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	69f9      	ldr	r1, [r7, #28]
 8042eb4:	4806      	ldr	r0, [pc, #24]	; (8042ed0 <FillBuffer+0x68>)
 8042eb6:	f000 fd44 	bl	8043942 <HAL_DMA2D_Start>
 8042eba:	4603      	mov	r3, r0
 8042ebc:	2b00      	cmp	r3, #0
 8042ebe:	d103      	bne.n	8042ec8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8042ec0:	210a      	movs	r1, #10
 8042ec2:	4803      	ldr	r0, [pc, #12]	; (8042ed0 <FillBuffer+0x68>)
 8042ec4:	f000 fd68 	bl	8043998 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8042ec8:	bf00      	nop
 8042eca:	3710      	adds	r7, #16
 8042ecc:	46bd      	mov	sp, r7
 8042ece:	bd80      	pop	{r7, pc}
 8042ed0:	2000092c 	.word	0x2000092c
 8042ed4:	4002b000 	.word	0x4002b000

08042ed8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8042ed8:	b580      	push	{r7, lr}
 8042eda:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8042edc:	4b29      	ldr	r3, [pc, #164]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042ede:	4a2a      	ldr	r2, [pc, #168]	; (8042f88 <BSP_SDRAM_Init+0xb0>)
 8042ee0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8042ee2:	4b2a      	ldr	r3, [pc, #168]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042ee4:	2202      	movs	r2, #2
 8042ee6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8042ee8:	4b28      	ldr	r3, [pc, #160]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042eea:	2207      	movs	r2, #7
 8042eec:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8042eee:	4b27      	ldr	r3, [pc, #156]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042ef0:	2204      	movs	r2, #4
 8042ef2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8042ef4:	4b25      	ldr	r3, [pc, #148]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042ef6:	2207      	movs	r2, #7
 8042ef8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8042efa:	4b24      	ldr	r3, [pc, #144]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042efc:	2202      	movs	r2, #2
 8042efe:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8042f00:	4b22      	ldr	r3, [pc, #136]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042f02:	2202      	movs	r2, #2
 8042f04:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8042f06:	4b21      	ldr	r3, [pc, #132]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042f08:	2202      	movs	r2, #2
 8042f0a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8042f0c:	4b1d      	ldr	r3, [pc, #116]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f0e:	2201      	movs	r2, #1
 8042f10:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8042f12:	4b1c      	ldr	r3, [pc, #112]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f14:	2200      	movs	r2, #0
 8042f16:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8042f18:	4b1a      	ldr	r3, [pc, #104]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f1a:	2204      	movs	r2, #4
 8042f1c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8042f1e:	4b19      	ldr	r3, [pc, #100]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f20:	2210      	movs	r2, #16
 8042f22:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8042f24:	4b17      	ldr	r3, [pc, #92]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f26:	2240      	movs	r2, #64	; 0x40
 8042f28:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8042f2a:	4b16      	ldr	r3, [pc, #88]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f2c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8042f30:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8042f32:	4b14      	ldr	r3, [pc, #80]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f34:	2200      	movs	r2, #0
 8042f36:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8042f38:	4b12      	ldr	r3, [pc, #72]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042f3e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8042f40:	4b10      	ldr	r3, [pc, #64]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f42:	2200      	movs	r2, #0
 8042f44:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8042f46:	4b0f      	ldr	r3, [pc, #60]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8042f4c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8042f4e:	2100      	movs	r1, #0
 8042f50:	480c      	ldr	r0, [pc, #48]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f52:	f000 f87f 	bl	8043054 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8042f56:	490d      	ldr	r1, [pc, #52]	; (8042f8c <BSP_SDRAM_Init+0xb4>)
 8042f58:	480a      	ldr	r0, [pc, #40]	; (8042f84 <BSP_SDRAM_Init+0xac>)
 8042f5a:	f004 fb93 	bl	8047684 <HAL_SDRAM_Init>
 8042f5e:	4603      	mov	r3, r0
 8042f60:	2b00      	cmp	r3, #0
 8042f62:	d003      	beq.n	8042f6c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8042f64:	4b0a      	ldr	r3, [pc, #40]	; (8042f90 <BSP_SDRAM_Init+0xb8>)
 8042f66:	2201      	movs	r2, #1
 8042f68:	701a      	strb	r2, [r3, #0]
 8042f6a:	e002      	b.n	8042f72 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8042f6c:	4b08      	ldr	r3, [pc, #32]	; (8042f90 <BSP_SDRAM_Init+0xb8>)
 8042f6e:	2200      	movs	r2, #0
 8042f70:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8042f72:	f240 506a 	movw	r0, #1386	; 0x56a
 8042f76:	f000 f80d 	bl	8042f94 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8042f7a:	4b05      	ldr	r3, [pc, #20]	; (8042f90 <BSP_SDRAM_Init+0xb8>)
 8042f7c:	781b      	ldrb	r3, [r3, #0]
}
 8042f7e:	4618      	mov	r0, r3
 8042f80:	bd80      	pop	{r7, pc}
 8042f82:	bf00      	nop
 8042f84:	200009bc 	.word	0x200009bc
 8042f88:	a0000140 	.word	0xa0000140
 8042f8c:	200009f0 	.word	0x200009f0
 8042f90:	20000050 	.word	0x20000050

08042f94 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8042f94:	b580      	push	{r7, lr}
 8042f96:	b084      	sub	sp, #16
 8042f98:	af00      	add	r7, sp, #0
 8042f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8042f9c:	2300      	movs	r3, #0
 8042f9e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8042fa0:	4b2a      	ldr	r3, [pc, #168]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fa2:	2201      	movs	r2, #1
 8042fa4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042fa6:	4b29      	ldr	r3, [pc, #164]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fa8:	2208      	movs	r2, #8
 8042faa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042fac:	4b27      	ldr	r3, [pc, #156]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fae:	2201      	movs	r2, #1
 8042fb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042fb2:	4b26      	ldr	r3, [pc, #152]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fb4:	2200      	movs	r2, #0
 8042fb6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8042fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042fbc:	4923      	ldr	r1, [pc, #140]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fbe:	4824      	ldr	r0, [pc, #144]	; (8043050 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042fc0:	f004 fb94 	bl	80476ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8042fc4:	2001      	movs	r0, #1
 8042fc6:	f000 f993 	bl	80432f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8042fca:	4b20      	ldr	r3, [pc, #128]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fcc:	2202      	movs	r2, #2
 8042fce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042fd0:	4b1e      	ldr	r3, [pc, #120]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fd2:	2208      	movs	r2, #8
 8042fd4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8042fd6:	4b1d      	ldr	r3, [pc, #116]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fd8:	2201      	movs	r2, #1
 8042fda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8042fdc:	4b1b      	ldr	r3, [pc, #108]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fde:	2200      	movs	r2, #0
 8042fe0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8042fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042fe6:	4919      	ldr	r1, [pc, #100]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042fe8:	4819      	ldr	r0, [pc, #100]	; (8043050 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8042fea:	f004 fb7f 	bl	80476ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8042fee:	4b17      	ldr	r3, [pc, #92]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ff0:	2203      	movs	r2, #3
 8042ff2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8042ff4:	4b15      	ldr	r3, [pc, #84]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ff6:	2208      	movs	r2, #8
 8042ff8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8042ffa:	4b14      	ldr	r3, [pc, #80]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8042ffc:	2204      	movs	r2, #4
 8042ffe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8043000:	4b12      	ldr	r3, [pc, #72]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043002:	2200      	movs	r2, #0
 8043004:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8043006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804300a:	4910      	ldr	r1, [pc, #64]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804300c:	4810      	ldr	r0, [pc, #64]	; (8043050 <BSP_SDRAM_Initialization_sequence+0xbc>)
 804300e:	f004 fb6d 	bl	80476ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8043012:	f44f 730c 	mov.w	r3, #560	; 0x230
 8043016:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8043018:	4b0c      	ldr	r3, [pc, #48]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804301a:	2204      	movs	r2, #4
 804301c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 804301e:	4b0b      	ldr	r3, [pc, #44]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043020:	2208      	movs	r2, #8
 8043022:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8043024:	4b09      	ldr	r3, [pc, #36]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043026:	2201      	movs	r2, #1
 8043028:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 804302a:	68fb      	ldr	r3, [r7, #12]
 804302c:	4a07      	ldr	r2, [pc, #28]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 804302e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8043030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8043034:	4905      	ldr	r1, [pc, #20]	; (804304c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8043036:	4806      	ldr	r0, [pc, #24]	; (8043050 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043038:	f004 fb58 	bl	80476ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 804303c:	6879      	ldr	r1, [r7, #4]
 804303e:	4804      	ldr	r0, [pc, #16]	; (8043050 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8043040:	f004 fb89 	bl	8047756 <HAL_SDRAM_ProgramRefreshRate>
}
 8043044:	bf00      	nop
 8043046:	3710      	adds	r7, #16
 8043048:	46bd      	mov	sp, r7
 804304a:	bd80      	pop	{r7, pc}
 804304c:	20000a0c 	.word	0x20000a0c
 8043050:	200009bc 	.word	0x200009bc

08043054 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8043054:	b580      	push	{r7, lr}
 8043056:	b090      	sub	sp, #64	; 0x40
 8043058:	af00      	add	r7, sp, #0
 804305a:	6078      	str	r0, [r7, #4]
 804305c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	2b00      	cmp	r3, #0
 8043062:	f000 80ec 	beq.w	804323e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8043066:	2300      	movs	r3, #0
 8043068:	62bb      	str	r3, [r7, #40]	; 0x28
 804306a:	4b77      	ldr	r3, [pc, #476]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 804306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804306e:	4a76      	ldr	r2, [pc, #472]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043070:	f043 0301 	orr.w	r3, r3, #1
 8043074:	6393      	str	r3, [r2, #56]	; 0x38
 8043076:	4b74      	ldr	r3, [pc, #464]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804307a:	f003 0301 	and.w	r3, r3, #1
 804307e:	62bb      	str	r3, [r7, #40]	; 0x28
 8043080:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8043082:	2300      	movs	r3, #0
 8043084:	627b      	str	r3, [r7, #36]	; 0x24
 8043086:	4b70      	ldr	r3, [pc, #448]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804308a:	4a6f      	ldr	r2, [pc, #444]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 804308c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043090:	6313      	str	r3, [r2, #48]	; 0x30
 8043092:	4b6d      	ldr	r3, [pc, #436]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804309a:	627b      	str	r3, [r7, #36]	; 0x24
 804309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 804309e:	2300      	movs	r3, #0
 80430a0:	623b      	str	r3, [r7, #32]
 80430a2:	4b69      	ldr	r3, [pc, #420]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430a6:	4a68      	ldr	r2, [pc, #416]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430a8:	f043 0302 	orr.w	r3, r3, #2
 80430ac:	6313      	str	r3, [r2, #48]	; 0x30
 80430ae:	4b66      	ldr	r3, [pc, #408]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430b2:	f003 0302 	and.w	r3, r3, #2
 80430b6:	623b      	str	r3, [r7, #32]
 80430b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80430ba:	2300      	movs	r3, #0
 80430bc:	61fb      	str	r3, [r7, #28]
 80430be:	4b62      	ldr	r3, [pc, #392]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430c2:	4a61      	ldr	r2, [pc, #388]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430c4:	f043 0304 	orr.w	r3, r3, #4
 80430c8:	6313      	str	r3, [r2, #48]	; 0x30
 80430ca:	4b5f      	ldr	r3, [pc, #380]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430ce:	f003 0304 	and.w	r3, r3, #4
 80430d2:	61fb      	str	r3, [r7, #28]
 80430d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80430d6:	2300      	movs	r3, #0
 80430d8:	61bb      	str	r3, [r7, #24]
 80430da:	4b5b      	ldr	r3, [pc, #364]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430de:	4a5a      	ldr	r2, [pc, #360]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430e0:	f043 0308 	orr.w	r3, r3, #8
 80430e4:	6313      	str	r3, [r2, #48]	; 0x30
 80430e6:	4b58      	ldr	r3, [pc, #352]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430ea:	f003 0308 	and.w	r3, r3, #8
 80430ee:	61bb      	str	r3, [r7, #24]
 80430f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80430f2:	2300      	movs	r3, #0
 80430f4:	617b      	str	r3, [r7, #20]
 80430f6:	4b54      	ldr	r3, [pc, #336]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80430fa:	4a53      	ldr	r2, [pc, #332]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 80430fc:	f043 0310 	orr.w	r3, r3, #16
 8043100:	6313      	str	r3, [r2, #48]	; 0x30
 8043102:	4b51      	ldr	r3, [pc, #324]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043106:	f003 0310 	and.w	r3, r3, #16
 804310a:	617b      	str	r3, [r7, #20]
 804310c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 804310e:	2300      	movs	r3, #0
 8043110:	613b      	str	r3, [r7, #16]
 8043112:	4b4d      	ldr	r3, [pc, #308]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043116:	4a4c      	ldr	r2, [pc, #304]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043118:	f043 0320 	orr.w	r3, r3, #32
 804311c:	6313      	str	r3, [r2, #48]	; 0x30
 804311e:	4b4a      	ldr	r3, [pc, #296]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043122:	f003 0320 	and.w	r3, r3, #32
 8043126:	613b      	str	r3, [r7, #16]
 8043128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 804312a:	2300      	movs	r3, #0
 804312c:	60fb      	str	r3, [r7, #12]
 804312e:	4b46      	ldr	r3, [pc, #280]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043132:	4a45      	ldr	r2, [pc, #276]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 8043134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8043138:	6313      	str	r3, [r2, #48]	; 0x30
 804313a:	4b43      	ldr	r3, [pc, #268]	; (8043248 <BSP_SDRAM_MspInit+0x1f4>)
 804313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043142:	60fb      	str	r3, [r7, #12]
 8043144:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8043146:	2302      	movs	r3, #2
 8043148:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 804314a:	2302      	movs	r3, #2
 804314c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 804314e:	2300      	movs	r3, #0
 8043150:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8043152:	230c      	movs	r3, #12
 8043154:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8043156:	2360      	movs	r3, #96	; 0x60
 8043158:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 804315a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804315e:	4619      	mov	r1, r3
 8043160:	483a      	ldr	r0, [pc, #232]	; (804324c <BSP_SDRAM_MspInit+0x1f8>)
 8043162:	f000 ff41 	bl	8043fe8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8043166:	2301      	movs	r3, #1
 8043168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 804316a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 804316e:	4619      	mov	r1, r3
 8043170:	4837      	ldr	r0, [pc, #220]	; (8043250 <BSP_SDRAM_MspInit+0x1fc>)
 8043172:	f000 ff39 	bl	8043fe8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8043176:	f24c 7303 	movw	r3, #50947	; 0xc703
 804317a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 804317c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8043180:	4619      	mov	r1, r3
 8043182:	4834      	ldr	r0, [pc, #208]	; (8043254 <BSP_SDRAM_MspInit+0x200>)
 8043184:	f000 ff30 	bl	8043fe8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8043188:	f64f 7383 	movw	r3, #65411	; 0xff83
 804318c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 804318e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8043192:	4619      	mov	r1, r3
 8043194:	4830      	ldr	r0, [pc, #192]	; (8043258 <BSP_SDRAM_MspInit+0x204>)
 8043196:	f000 ff27 	bl	8043fe8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 804319a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 804319e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80431a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80431a4:	4619      	mov	r1, r3
 80431a6:	482d      	ldr	r0, [pc, #180]	; (804325c <BSP_SDRAM_MspInit+0x208>)
 80431a8:	f000 ff1e 	bl	8043fe8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80431ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80431b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80431b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80431b6:	4619      	mov	r1, r3
 80431b8:	4829      	ldr	r0, [pc, #164]	; (8043260 <BSP_SDRAM_MspInit+0x20c>)
 80431ba:	f000 ff15 	bl	8043fe8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80431be:	4b29      	ldr	r3, [pc, #164]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431c0:	2200      	movs	r2, #0
 80431c2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80431c4:	4b27      	ldr	r3, [pc, #156]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431c6:	2280      	movs	r2, #128	; 0x80
 80431c8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80431ca:	4b26      	ldr	r3, [pc, #152]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80431d0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80431d2:	4b24      	ldr	r3, [pc, #144]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80431d8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80431da:	4b22      	ldr	r3, [pc, #136]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80431e0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80431e2:	4b20      	ldr	r3, [pc, #128]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80431e8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80431ea:	4b1e      	ldr	r3, [pc, #120]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431ec:	2200      	movs	r2, #0
 80431ee:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80431f0:	4b1c      	ldr	r3, [pc, #112]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80431f6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80431f8:	4b1a      	ldr	r3, [pc, #104]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 80431fa:	2200      	movs	r2, #0
 80431fc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80431fe:	4b19      	ldr	r3, [pc, #100]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 8043200:	2203      	movs	r2, #3
 8043202:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8043204:	4b17      	ldr	r3, [pc, #92]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 8043206:	2200      	movs	r2, #0
 8043208:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 804320a:	4b16      	ldr	r3, [pc, #88]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 804320c:	2200      	movs	r2, #0
 804320e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8043210:	4b14      	ldr	r3, [pc, #80]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 8043212:	4a15      	ldr	r2, [pc, #84]	; (8043268 <BSP_SDRAM_MspInit+0x214>)
 8043214:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8043216:	687b      	ldr	r3, [r7, #4]
 8043218:	4a12      	ldr	r2, [pc, #72]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 804321a:	631a      	str	r2, [r3, #48]	; 0x30
 804321c:	4a11      	ldr	r2, [pc, #68]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 804321e:	687b      	ldr	r3, [r7, #4]
 8043220:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8043222:	4810      	ldr	r0, [pc, #64]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 8043224:	f000 fa34 	bl	8043690 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8043228:	480e      	ldr	r0, [pc, #56]	; (8043264 <BSP_SDRAM_MspInit+0x210>)
 804322a:	f000 f983 	bl	8043534 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 804322e:	2200      	movs	r2, #0
 8043230:	210f      	movs	r1, #15
 8043232:	2038      	movs	r0, #56	; 0x38
 8043234:	f000 f938 	bl	80434a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8043238:	2038      	movs	r0, #56	; 0x38
 804323a:	f000 f951 	bl	80434e0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 804323e:	bf00      	nop
 8043240:	3740      	adds	r7, #64	; 0x40
 8043242:	46bd      	mov	sp, r7
 8043244:	bd80      	pop	{r7, pc}
 8043246:	bf00      	nop
 8043248:	40023800 	.word	0x40023800
 804324c:	40020400 	.word	0x40020400
 8043250:	40020800 	.word	0x40020800
 8043254:	40020c00 	.word	0x40020c00
 8043258:	40021000 	.word	0x40021000
 804325c:	40021400 	.word	0x40021400
 8043260:	40021800 	.word	0x40021800
 8043264:	20000a1c 	.word	0x20000a1c
 8043268:	40026410 	.word	0x40026410

0804326c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804326c:	b580      	push	{r7, lr}
 804326e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8043270:	4b0e      	ldr	r3, [pc, #56]	; (80432ac <HAL_Init+0x40>)
 8043272:	681b      	ldr	r3, [r3, #0]
 8043274:	4a0d      	ldr	r2, [pc, #52]	; (80432ac <HAL_Init+0x40>)
 8043276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804327a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 804327c:	4b0b      	ldr	r3, [pc, #44]	; (80432ac <HAL_Init+0x40>)
 804327e:	681b      	ldr	r3, [r3, #0]
 8043280:	4a0a      	ldr	r2, [pc, #40]	; (80432ac <HAL_Init+0x40>)
 8043282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8043286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8043288:	4b08      	ldr	r3, [pc, #32]	; (80432ac <HAL_Init+0x40>)
 804328a:	681b      	ldr	r3, [r3, #0]
 804328c:	4a07      	ldr	r2, [pc, #28]	; (80432ac <HAL_Init+0x40>)
 804328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8043294:	2003      	movs	r0, #3
 8043296:	f000 f8fc 	bl	8043492 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 804329a:	200f      	movs	r0, #15
 804329c:	f7fe fc38 	bl	8041b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80432a0:	f7fe f8be 	bl	8041420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80432a4:	2300      	movs	r3, #0
}
 80432a6:	4618      	mov	r0, r3
 80432a8:	bd80      	pop	{r7, pc}
 80432aa:	bf00      	nop
 80432ac:	40023c00 	.word	0x40023c00

080432b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80432b0:	b480      	push	{r7}
 80432b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80432b4:	4b06      	ldr	r3, [pc, #24]	; (80432d0 <HAL_IncTick+0x20>)
 80432b6:	781b      	ldrb	r3, [r3, #0]
 80432b8:	461a      	mov	r2, r3
 80432ba:	4b06      	ldr	r3, [pc, #24]	; (80432d4 <HAL_IncTick+0x24>)
 80432bc:	681b      	ldr	r3, [r3, #0]
 80432be:	4413      	add	r3, r2
 80432c0:	4a04      	ldr	r2, [pc, #16]	; (80432d4 <HAL_IncTick+0x24>)
 80432c2:	6013      	str	r3, [r2, #0]
}
 80432c4:	bf00      	nop
 80432c6:	46bd      	mov	sp, r7
 80432c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432cc:	4770      	bx	lr
 80432ce:	bf00      	nop
 80432d0:	20000058 	.word	0x20000058
 80432d4:	20000a7c 	.word	0x20000a7c

080432d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80432d8:	b480      	push	{r7}
 80432da:	af00      	add	r7, sp, #0
  return uwTick;
 80432dc:	4b03      	ldr	r3, [pc, #12]	; (80432ec <HAL_GetTick+0x14>)
 80432de:	681b      	ldr	r3, [r3, #0]
}
 80432e0:	4618      	mov	r0, r3
 80432e2:	46bd      	mov	sp, r7
 80432e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432e8:	4770      	bx	lr
 80432ea:	bf00      	nop
 80432ec:	20000a7c 	.word	0x20000a7c

080432f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80432f0:	b580      	push	{r7, lr}
 80432f2:	b084      	sub	sp, #16
 80432f4:	af00      	add	r7, sp, #0
 80432f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80432f8:	f7ff ffee 	bl	80432d8 <HAL_GetTick>
 80432fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80432fe:	687b      	ldr	r3, [r7, #4]
 8043300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8043302:	68fb      	ldr	r3, [r7, #12]
 8043304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043308:	d005      	beq.n	8043316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 804330a:	4b0a      	ldr	r3, [pc, #40]	; (8043334 <HAL_Delay+0x44>)
 804330c:	781b      	ldrb	r3, [r3, #0]
 804330e:	461a      	mov	r2, r3
 8043310:	68fb      	ldr	r3, [r7, #12]
 8043312:	4413      	add	r3, r2
 8043314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8043316:	bf00      	nop
 8043318:	f7ff ffde 	bl	80432d8 <HAL_GetTick>
 804331c:	4602      	mov	r2, r0
 804331e:	68bb      	ldr	r3, [r7, #8]
 8043320:	1ad3      	subs	r3, r2, r3
 8043322:	68fa      	ldr	r2, [r7, #12]
 8043324:	429a      	cmp	r2, r3
 8043326:	d8f7      	bhi.n	8043318 <HAL_Delay+0x28>
  {
  }
}
 8043328:	bf00      	nop
 804332a:	bf00      	nop
 804332c:	3710      	adds	r7, #16
 804332e:	46bd      	mov	sp, r7
 8043330:	bd80      	pop	{r7, pc}
 8043332:	bf00      	nop
 8043334:	20000058 	.word	0x20000058

08043338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8043338:	b480      	push	{r7}
 804333a:	b085      	sub	sp, #20
 804333c:	af00      	add	r7, sp, #0
 804333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8043340:	687b      	ldr	r3, [r7, #4]
 8043342:	f003 0307 	and.w	r3, r3, #7
 8043346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8043348:	4b0c      	ldr	r3, [pc, #48]	; (804337c <__NVIC_SetPriorityGrouping+0x44>)
 804334a:	68db      	ldr	r3, [r3, #12]
 804334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804334e:	68ba      	ldr	r2, [r7, #8]
 8043350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8043354:	4013      	ands	r3, r2
 8043356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8043358:	68fb      	ldr	r3, [r7, #12]
 804335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 804335c:	68bb      	ldr	r3, [r7, #8]
 804335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8043360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8043364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804336a:	4a04      	ldr	r2, [pc, #16]	; (804337c <__NVIC_SetPriorityGrouping+0x44>)
 804336c:	68bb      	ldr	r3, [r7, #8]
 804336e:	60d3      	str	r3, [r2, #12]
}
 8043370:	bf00      	nop
 8043372:	3714      	adds	r7, #20
 8043374:	46bd      	mov	sp, r7
 8043376:	f85d 7b04 	ldr.w	r7, [sp], #4
 804337a:	4770      	bx	lr
 804337c:	e000ed00 	.word	0xe000ed00

08043380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8043380:	b480      	push	{r7}
 8043382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8043384:	4b04      	ldr	r3, [pc, #16]	; (8043398 <__NVIC_GetPriorityGrouping+0x18>)
 8043386:	68db      	ldr	r3, [r3, #12]
 8043388:	0a1b      	lsrs	r3, r3, #8
 804338a:	f003 0307 	and.w	r3, r3, #7
}
 804338e:	4618      	mov	r0, r3
 8043390:	46bd      	mov	sp, r7
 8043392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043396:	4770      	bx	lr
 8043398:	e000ed00 	.word	0xe000ed00

0804339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804339c:	b480      	push	{r7}
 804339e:	b083      	sub	sp, #12
 80433a0:	af00      	add	r7, sp, #0
 80433a2:	4603      	mov	r3, r0
 80433a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80433a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80433aa:	2b00      	cmp	r3, #0
 80433ac:	db0b      	blt.n	80433c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80433ae:	79fb      	ldrb	r3, [r7, #7]
 80433b0:	f003 021f 	and.w	r2, r3, #31
 80433b4:	4907      	ldr	r1, [pc, #28]	; (80433d4 <__NVIC_EnableIRQ+0x38>)
 80433b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80433ba:	095b      	lsrs	r3, r3, #5
 80433bc:	2001      	movs	r0, #1
 80433be:	fa00 f202 	lsl.w	r2, r0, r2
 80433c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80433c6:	bf00      	nop
 80433c8:	370c      	adds	r7, #12
 80433ca:	46bd      	mov	sp, r7
 80433cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80433d0:	4770      	bx	lr
 80433d2:	bf00      	nop
 80433d4:	e000e100 	.word	0xe000e100

080433d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80433d8:	b480      	push	{r7}
 80433da:	b083      	sub	sp, #12
 80433dc:	af00      	add	r7, sp, #0
 80433de:	4603      	mov	r3, r0
 80433e0:	6039      	str	r1, [r7, #0]
 80433e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80433e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80433e8:	2b00      	cmp	r3, #0
 80433ea:	db0a      	blt.n	8043402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80433ec:	683b      	ldr	r3, [r7, #0]
 80433ee:	b2da      	uxtb	r2, r3
 80433f0:	490c      	ldr	r1, [pc, #48]	; (8043424 <__NVIC_SetPriority+0x4c>)
 80433f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80433f6:	0112      	lsls	r2, r2, #4
 80433f8:	b2d2      	uxtb	r2, r2
 80433fa:	440b      	add	r3, r1
 80433fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8043400:	e00a      	b.n	8043418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8043402:	683b      	ldr	r3, [r7, #0]
 8043404:	b2da      	uxtb	r2, r3
 8043406:	4908      	ldr	r1, [pc, #32]	; (8043428 <__NVIC_SetPriority+0x50>)
 8043408:	79fb      	ldrb	r3, [r7, #7]
 804340a:	f003 030f 	and.w	r3, r3, #15
 804340e:	3b04      	subs	r3, #4
 8043410:	0112      	lsls	r2, r2, #4
 8043412:	b2d2      	uxtb	r2, r2
 8043414:	440b      	add	r3, r1
 8043416:	761a      	strb	r2, [r3, #24]
}
 8043418:	bf00      	nop
 804341a:	370c      	adds	r7, #12
 804341c:	46bd      	mov	sp, r7
 804341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043422:	4770      	bx	lr
 8043424:	e000e100 	.word	0xe000e100
 8043428:	e000ed00 	.word	0xe000ed00

0804342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804342c:	b480      	push	{r7}
 804342e:	b089      	sub	sp, #36	; 0x24
 8043430:	af00      	add	r7, sp, #0
 8043432:	60f8      	str	r0, [r7, #12]
 8043434:	60b9      	str	r1, [r7, #8]
 8043436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8043438:	68fb      	ldr	r3, [r7, #12]
 804343a:	f003 0307 	and.w	r3, r3, #7
 804343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8043440:	69fb      	ldr	r3, [r7, #28]
 8043442:	f1c3 0307 	rsb	r3, r3, #7
 8043446:	2b04      	cmp	r3, #4
 8043448:	bf28      	it	cs
 804344a:	2304      	movcs	r3, #4
 804344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804344e:	69fb      	ldr	r3, [r7, #28]
 8043450:	3304      	adds	r3, #4
 8043452:	2b06      	cmp	r3, #6
 8043454:	d902      	bls.n	804345c <NVIC_EncodePriority+0x30>
 8043456:	69fb      	ldr	r3, [r7, #28]
 8043458:	3b03      	subs	r3, #3
 804345a:	e000      	b.n	804345e <NVIC_EncodePriority+0x32>
 804345c:	2300      	movs	r3, #0
 804345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043460:	f04f 32ff 	mov.w	r2, #4294967295
 8043464:	69bb      	ldr	r3, [r7, #24]
 8043466:	fa02 f303 	lsl.w	r3, r2, r3
 804346a:	43da      	mvns	r2, r3
 804346c:	68bb      	ldr	r3, [r7, #8]
 804346e:	401a      	ands	r2, r3
 8043470:	697b      	ldr	r3, [r7, #20]
 8043472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8043474:	f04f 31ff 	mov.w	r1, #4294967295
 8043478:	697b      	ldr	r3, [r7, #20]
 804347a:	fa01 f303 	lsl.w	r3, r1, r3
 804347e:	43d9      	mvns	r1, r3
 8043480:	687b      	ldr	r3, [r7, #4]
 8043482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8043484:	4313      	orrs	r3, r2
         );
}
 8043486:	4618      	mov	r0, r3
 8043488:	3724      	adds	r7, #36	; 0x24
 804348a:	46bd      	mov	sp, r7
 804348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043490:	4770      	bx	lr

08043492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8043492:	b580      	push	{r7, lr}
 8043494:	b082      	sub	sp, #8
 8043496:	af00      	add	r7, sp, #0
 8043498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804349a:	6878      	ldr	r0, [r7, #4]
 804349c:	f7ff ff4c 	bl	8043338 <__NVIC_SetPriorityGrouping>
}
 80434a0:	bf00      	nop
 80434a2:	3708      	adds	r7, #8
 80434a4:	46bd      	mov	sp, r7
 80434a6:	bd80      	pop	{r7, pc}

080434a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80434a8:	b580      	push	{r7, lr}
 80434aa:	b086      	sub	sp, #24
 80434ac:	af00      	add	r7, sp, #0
 80434ae:	4603      	mov	r3, r0
 80434b0:	60b9      	str	r1, [r7, #8]
 80434b2:	607a      	str	r2, [r7, #4]
 80434b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80434b6:	2300      	movs	r3, #0
 80434b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80434ba:	f7ff ff61 	bl	8043380 <__NVIC_GetPriorityGrouping>
 80434be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80434c0:	687a      	ldr	r2, [r7, #4]
 80434c2:	68b9      	ldr	r1, [r7, #8]
 80434c4:	6978      	ldr	r0, [r7, #20]
 80434c6:	f7ff ffb1 	bl	804342c <NVIC_EncodePriority>
 80434ca:	4602      	mov	r2, r0
 80434cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80434d0:	4611      	mov	r1, r2
 80434d2:	4618      	mov	r0, r3
 80434d4:	f7ff ff80 	bl	80433d8 <__NVIC_SetPriority>
}
 80434d8:	bf00      	nop
 80434da:	3718      	adds	r7, #24
 80434dc:	46bd      	mov	sp, r7
 80434de:	bd80      	pop	{r7, pc}

080434e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80434e0:	b580      	push	{r7, lr}
 80434e2:	b082      	sub	sp, #8
 80434e4:	af00      	add	r7, sp, #0
 80434e6:	4603      	mov	r3, r0
 80434e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80434ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80434ee:	4618      	mov	r0, r3
 80434f0:	f7ff ff54 	bl	804339c <__NVIC_EnableIRQ>
}
 80434f4:	bf00      	nop
 80434f6:	3708      	adds	r7, #8
 80434f8:	46bd      	mov	sp, r7
 80434fa:	bd80      	pop	{r7, pc}

080434fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80434fc:	b580      	push	{r7, lr}
 80434fe:	b082      	sub	sp, #8
 8043500:	af00      	add	r7, sp, #0
 8043502:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8043504:	687b      	ldr	r3, [r7, #4]
 8043506:	2b00      	cmp	r3, #0
 8043508:	d101      	bne.n	804350e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 804350a:	2301      	movs	r3, #1
 804350c:	e00e      	b.n	804352c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 804350e:	687b      	ldr	r3, [r7, #4]
 8043510:	795b      	ldrb	r3, [r3, #5]
 8043512:	b2db      	uxtb	r3, r3
 8043514:	2b00      	cmp	r3, #0
 8043516:	d105      	bne.n	8043524 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8043518:	687b      	ldr	r3, [r7, #4]
 804351a:	2200      	movs	r2, #0
 804351c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 804351e:	6878      	ldr	r0, [r7, #4]
 8043520:	f7fd ffa6 	bl	8041470 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8043524:	687b      	ldr	r3, [r7, #4]
 8043526:	2201      	movs	r2, #1
 8043528:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 804352a:	2300      	movs	r3, #0
}
 804352c:	4618      	mov	r0, r3
 804352e:	3708      	adds	r7, #8
 8043530:	46bd      	mov	sp, r7
 8043532:	bd80      	pop	{r7, pc}

08043534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8043534:	b580      	push	{r7, lr}
 8043536:	b086      	sub	sp, #24
 8043538:	af00      	add	r7, sp, #0
 804353a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 804353c:	2300      	movs	r3, #0
 804353e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8043540:	f7ff feca 	bl	80432d8 <HAL_GetTick>
 8043544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043546:	687b      	ldr	r3, [r7, #4]
 8043548:	2b00      	cmp	r3, #0
 804354a:	d101      	bne.n	8043550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 804354c:	2301      	movs	r3, #1
 804354e:	e099      	b.n	8043684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8043550:	687b      	ldr	r3, [r7, #4]
 8043552:	2202      	movs	r2, #2
 8043554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8043558:	687b      	ldr	r3, [r7, #4]
 804355a:	2200      	movs	r2, #0
 804355c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8043560:	687b      	ldr	r3, [r7, #4]
 8043562:	681b      	ldr	r3, [r3, #0]
 8043564:	681a      	ldr	r2, [r3, #0]
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	681b      	ldr	r3, [r3, #0]
 804356a:	f022 0201 	bic.w	r2, r2, #1
 804356e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8043570:	e00f      	b.n	8043592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8043572:	f7ff feb1 	bl	80432d8 <HAL_GetTick>
 8043576:	4602      	mov	r2, r0
 8043578:	693b      	ldr	r3, [r7, #16]
 804357a:	1ad3      	subs	r3, r2, r3
 804357c:	2b05      	cmp	r3, #5
 804357e:	d908      	bls.n	8043592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8043580:	687b      	ldr	r3, [r7, #4]
 8043582:	2220      	movs	r2, #32
 8043584:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	2203      	movs	r2, #3
 804358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 804358e:	2303      	movs	r3, #3
 8043590:	e078      	b.n	8043684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8043592:	687b      	ldr	r3, [r7, #4]
 8043594:	681b      	ldr	r3, [r3, #0]
 8043596:	681b      	ldr	r3, [r3, #0]
 8043598:	f003 0301 	and.w	r3, r3, #1
 804359c:	2b00      	cmp	r3, #0
 804359e:	d1e8      	bne.n	8043572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80435a0:	687b      	ldr	r3, [r7, #4]
 80435a2:	681b      	ldr	r3, [r3, #0]
 80435a4:	681b      	ldr	r3, [r3, #0]
 80435a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80435a8:	697a      	ldr	r2, [r7, #20]
 80435aa:	4b38      	ldr	r3, [pc, #224]	; (804368c <HAL_DMA_Init+0x158>)
 80435ac:	4013      	ands	r3, r2
 80435ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80435b0:	687b      	ldr	r3, [r7, #4]
 80435b2:	685a      	ldr	r2, [r3, #4]
 80435b4:	687b      	ldr	r3, [r7, #4]
 80435b6:	689b      	ldr	r3, [r3, #8]
 80435b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80435ba:	687b      	ldr	r3, [r7, #4]
 80435bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80435be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80435c0:	687b      	ldr	r3, [r7, #4]
 80435c2:	691b      	ldr	r3, [r3, #16]
 80435c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80435c6:	687b      	ldr	r3, [r7, #4]
 80435c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80435ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80435cc:	687b      	ldr	r3, [r7, #4]
 80435ce:	699b      	ldr	r3, [r3, #24]
 80435d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80435d2:	687b      	ldr	r3, [r7, #4]
 80435d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80435d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80435d8:	687b      	ldr	r3, [r7, #4]
 80435da:	6a1b      	ldr	r3, [r3, #32]
 80435dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80435de:	697a      	ldr	r2, [r7, #20]
 80435e0:	4313      	orrs	r3, r2
 80435e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80435e4:	687b      	ldr	r3, [r7, #4]
 80435e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80435e8:	2b04      	cmp	r3, #4
 80435ea:	d107      	bne.n	80435fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80435ec:	687b      	ldr	r3, [r7, #4]
 80435ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80435f0:	687b      	ldr	r3, [r7, #4]
 80435f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80435f4:	4313      	orrs	r3, r2
 80435f6:	697a      	ldr	r2, [r7, #20]
 80435f8:	4313      	orrs	r3, r2
 80435fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80435fc:	687b      	ldr	r3, [r7, #4]
 80435fe:	681b      	ldr	r3, [r3, #0]
 8043600:	697a      	ldr	r2, [r7, #20]
 8043602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8043604:	687b      	ldr	r3, [r7, #4]
 8043606:	681b      	ldr	r3, [r3, #0]
 8043608:	695b      	ldr	r3, [r3, #20]
 804360a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 804360c:	697b      	ldr	r3, [r7, #20]
 804360e:	f023 0307 	bic.w	r3, r3, #7
 8043612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8043614:	687b      	ldr	r3, [r7, #4]
 8043616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043618:	697a      	ldr	r2, [r7, #20]
 804361a:	4313      	orrs	r3, r2
 804361c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 804361e:	687b      	ldr	r3, [r7, #4]
 8043620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043622:	2b04      	cmp	r3, #4
 8043624:	d117      	bne.n	8043656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8043626:	687b      	ldr	r3, [r7, #4]
 8043628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804362a:	697a      	ldr	r2, [r7, #20]
 804362c:	4313      	orrs	r3, r2
 804362e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8043630:	687b      	ldr	r3, [r7, #4]
 8043632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043634:	2b00      	cmp	r3, #0
 8043636:	d00e      	beq.n	8043656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8043638:	6878      	ldr	r0, [r7, #4]
 804363a:	f000 f8bd 	bl	80437b8 <DMA_CheckFifoParam>
 804363e:	4603      	mov	r3, r0
 8043640:	2b00      	cmp	r3, #0
 8043642:	d008      	beq.n	8043656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8043644:	687b      	ldr	r3, [r7, #4]
 8043646:	2240      	movs	r2, #64	; 0x40
 8043648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804364a:	687b      	ldr	r3, [r7, #4]
 804364c:	2201      	movs	r2, #1
 804364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8043652:	2301      	movs	r3, #1
 8043654:	e016      	b.n	8043684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8043656:	687b      	ldr	r3, [r7, #4]
 8043658:	681b      	ldr	r3, [r3, #0]
 804365a:	697a      	ldr	r2, [r7, #20]
 804365c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 804365e:	6878      	ldr	r0, [r7, #4]
 8043660:	f000 f874 	bl	804374c <DMA_CalcBaseAndBitshift>
 8043664:	4603      	mov	r3, r0
 8043666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043668:	687b      	ldr	r3, [r7, #4]
 804366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804366c:	223f      	movs	r2, #63	; 0x3f
 804366e:	409a      	lsls	r2, r3
 8043670:	68fb      	ldr	r3, [r7, #12]
 8043672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8043674:	687b      	ldr	r3, [r7, #4]
 8043676:	2200      	movs	r2, #0
 8043678:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 804367a:	687b      	ldr	r3, [r7, #4]
 804367c:	2201      	movs	r2, #1
 804367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8043682:	2300      	movs	r3, #0
}
 8043684:	4618      	mov	r0, r3
 8043686:	3718      	adds	r7, #24
 8043688:	46bd      	mov	sp, r7
 804368a:	bd80      	pop	{r7, pc}
 804368c:	f010803f 	.word	0xf010803f

08043690 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8043690:	b580      	push	{r7, lr}
 8043692:	b084      	sub	sp, #16
 8043694:	af00      	add	r7, sp, #0
 8043696:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8043698:	687b      	ldr	r3, [r7, #4]
 804369a:	2b00      	cmp	r3, #0
 804369c:	d101      	bne.n	80436a2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 804369e:	2301      	movs	r3, #1
 80436a0:	e050      	b.n	8043744 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80436a2:	687b      	ldr	r3, [r7, #4]
 80436a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80436a8:	b2db      	uxtb	r3, r3
 80436aa:	2b02      	cmp	r3, #2
 80436ac:	d101      	bne.n	80436b2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80436ae:	2302      	movs	r3, #2
 80436b0:	e048      	b.n	8043744 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80436b2:	687b      	ldr	r3, [r7, #4]
 80436b4:	681b      	ldr	r3, [r3, #0]
 80436b6:	681a      	ldr	r2, [r3, #0]
 80436b8:	687b      	ldr	r3, [r7, #4]
 80436ba:	681b      	ldr	r3, [r3, #0]
 80436bc:	f022 0201 	bic.w	r2, r2, #1
 80436c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80436c2:	687b      	ldr	r3, [r7, #4]
 80436c4:	681b      	ldr	r3, [r3, #0]
 80436c6:	2200      	movs	r2, #0
 80436c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80436ca:	687b      	ldr	r3, [r7, #4]
 80436cc:	681b      	ldr	r3, [r3, #0]
 80436ce:	2200      	movs	r2, #0
 80436d0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80436d2:	687b      	ldr	r3, [r7, #4]
 80436d4:	681b      	ldr	r3, [r3, #0]
 80436d6:	2200      	movs	r2, #0
 80436d8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80436da:	687b      	ldr	r3, [r7, #4]
 80436dc:	681b      	ldr	r3, [r3, #0]
 80436de:	2200      	movs	r2, #0
 80436e0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80436e2:	687b      	ldr	r3, [r7, #4]
 80436e4:	681b      	ldr	r3, [r3, #0]
 80436e6:	2200      	movs	r2, #0
 80436e8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80436ea:	687b      	ldr	r3, [r7, #4]
 80436ec:	681b      	ldr	r3, [r3, #0]
 80436ee:	2221      	movs	r2, #33	; 0x21
 80436f0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80436f2:	6878      	ldr	r0, [r7, #4]
 80436f4:	f000 f82a 	bl	804374c <DMA_CalcBaseAndBitshift>
 80436f8:	4603      	mov	r3, r0
 80436fa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80436fc:	687b      	ldr	r3, [r7, #4]
 80436fe:	2200      	movs	r2, #0
 8043700:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8043702:	687b      	ldr	r3, [r7, #4]
 8043704:	2200      	movs	r2, #0
 8043706:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8043708:	687b      	ldr	r3, [r7, #4]
 804370a:	2200      	movs	r2, #0
 804370c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 804370e:	687b      	ldr	r3, [r7, #4]
 8043710:	2200      	movs	r2, #0
 8043712:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8043714:	687b      	ldr	r3, [r7, #4]
 8043716:	2200      	movs	r2, #0
 8043718:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 804371a:	687b      	ldr	r3, [r7, #4]
 804371c:	2200      	movs	r2, #0
 804371e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8043720:	687b      	ldr	r3, [r7, #4]
 8043722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043724:	223f      	movs	r2, #63	; 0x3f
 8043726:	409a      	lsls	r2, r3
 8043728:	68fb      	ldr	r3, [r7, #12]
 804372a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804372c:	687b      	ldr	r3, [r7, #4]
 804372e:	2200      	movs	r2, #0
 8043730:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	2200      	movs	r2, #0
 8043736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 804373a:	687b      	ldr	r3, [r7, #4]
 804373c:	2200      	movs	r2, #0
 804373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8043742:	2300      	movs	r3, #0
}
 8043744:	4618      	mov	r0, r3
 8043746:	3710      	adds	r7, #16
 8043748:	46bd      	mov	sp, r7
 804374a:	bd80      	pop	{r7, pc}

0804374c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 804374c:	b480      	push	{r7}
 804374e:	b085      	sub	sp, #20
 8043750:	af00      	add	r7, sp, #0
 8043752:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8043754:	687b      	ldr	r3, [r7, #4]
 8043756:	681b      	ldr	r3, [r3, #0]
 8043758:	b2db      	uxtb	r3, r3
 804375a:	3b10      	subs	r3, #16
 804375c:	4a14      	ldr	r2, [pc, #80]	; (80437b0 <DMA_CalcBaseAndBitshift+0x64>)
 804375e:	fba2 2303 	umull	r2, r3, r2, r3
 8043762:	091b      	lsrs	r3, r3, #4
 8043764:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8043766:	4a13      	ldr	r2, [pc, #76]	; (80437b4 <DMA_CalcBaseAndBitshift+0x68>)
 8043768:	68fb      	ldr	r3, [r7, #12]
 804376a:	4413      	add	r3, r2
 804376c:	781b      	ldrb	r3, [r3, #0]
 804376e:	461a      	mov	r2, r3
 8043770:	687b      	ldr	r3, [r7, #4]
 8043772:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8043774:	68fb      	ldr	r3, [r7, #12]
 8043776:	2b03      	cmp	r3, #3
 8043778:	d909      	bls.n	804378e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 804377a:	687b      	ldr	r3, [r7, #4]
 804377c:	681b      	ldr	r3, [r3, #0]
 804377e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043782:	f023 0303 	bic.w	r3, r3, #3
 8043786:	1d1a      	adds	r2, r3, #4
 8043788:	687b      	ldr	r3, [r7, #4]
 804378a:	659a      	str	r2, [r3, #88]	; 0x58
 804378c:	e007      	b.n	804379e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 804378e:	687b      	ldr	r3, [r7, #4]
 8043790:	681b      	ldr	r3, [r3, #0]
 8043792:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8043796:	f023 0303 	bic.w	r3, r3, #3
 804379a:	687a      	ldr	r2, [r7, #4]
 804379c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 804379e:	687b      	ldr	r3, [r7, #4]
 80437a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80437a2:	4618      	mov	r0, r3
 80437a4:	3714      	adds	r7, #20
 80437a6:	46bd      	mov	sp, r7
 80437a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80437ac:	4770      	bx	lr
 80437ae:	bf00      	nop
 80437b0:	aaaaaaab 	.word	0xaaaaaaab
 80437b4:	08050768 	.word	0x08050768

080437b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80437b8:	b480      	push	{r7}
 80437ba:	b085      	sub	sp, #20
 80437bc:	af00      	add	r7, sp, #0
 80437be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80437c0:	2300      	movs	r3, #0
 80437c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80437c4:	687b      	ldr	r3, [r7, #4]
 80437c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80437ca:	687b      	ldr	r3, [r7, #4]
 80437cc:	699b      	ldr	r3, [r3, #24]
 80437ce:	2b00      	cmp	r3, #0
 80437d0:	d11f      	bne.n	8043812 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80437d2:	68bb      	ldr	r3, [r7, #8]
 80437d4:	2b03      	cmp	r3, #3
 80437d6:	d856      	bhi.n	8043886 <DMA_CheckFifoParam+0xce>
 80437d8:	a201      	add	r2, pc, #4	; (adr r2, 80437e0 <DMA_CheckFifoParam+0x28>)
 80437da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80437de:	bf00      	nop
 80437e0:	080437f1 	.word	0x080437f1
 80437e4:	08043803 	.word	0x08043803
 80437e8:	080437f1 	.word	0x080437f1
 80437ec:	08043887 	.word	0x08043887
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80437f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80437f8:	2b00      	cmp	r3, #0
 80437fa:	d046      	beq.n	804388a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80437fc:	2301      	movs	r3, #1
 80437fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043800:	e043      	b.n	804388a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043802:	687b      	ldr	r3, [r7, #4]
 8043804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043806:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 804380a:	d140      	bne.n	804388e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 804380c:	2301      	movs	r3, #1
 804380e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8043810:	e03d      	b.n	804388e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8043812:	687b      	ldr	r3, [r7, #4]
 8043814:	699b      	ldr	r3, [r3, #24]
 8043816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804381a:	d121      	bne.n	8043860 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 804381c:	68bb      	ldr	r3, [r7, #8]
 804381e:	2b03      	cmp	r3, #3
 8043820:	d837      	bhi.n	8043892 <DMA_CheckFifoParam+0xda>
 8043822:	a201      	add	r2, pc, #4	; (adr r2, 8043828 <DMA_CheckFifoParam+0x70>)
 8043824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043828:	08043839 	.word	0x08043839
 804382c:	0804383f 	.word	0x0804383f
 8043830:	08043839 	.word	0x08043839
 8043834:	08043851 	.word	0x08043851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8043838:	2301      	movs	r3, #1
 804383a:	73fb      	strb	r3, [r7, #15]
      break;
 804383c:	e030      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 804383e:	687b      	ldr	r3, [r7, #4]
 8043840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043846:	2b00      	cmp	r3, #0
 8043848:	d025      	beq.n	8043896 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 804384a:	2301      	movs	r3, #1
 804384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804384e:	e022      	b.n	8043896 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043854:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8043858:	d11f      	bne.n	804389a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 804385a:	2301      	movs	r3, #1
 804385c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 804385e:	e01c      	b.n	804389a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8043860:	68bb      	ldr	r3, [r7, #8]
 8043862:	2b02      	cmp	r3, #2
 8043864:	d903      	bls.n	804386e <DMA_CheckFifoParam+0xb6>
 8043866:	68bb      	ldr	r3, [r7, #8]
 8043868:	2b03      	cmp	r3, #3
 804386a:	d003      	beq.n	8043874 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 804386c:	e018      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 804386e:	2301      	movs	r3, #1
 8043870:	73fb      	strb	r3, [r7, #15]
      break;
 8043872:	e015      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8043874:	687b      	ldr	r3, [r7, #4]
 8043876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804387c:	2b00      	cmp	r3, #0
 804387e:	d00e      	beq.n	804389e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8043880:	2301      	movs	r3, #1
 8043882:	73fb      	strb	r3, [r7, #15]
      break;
 8043884:	e00b      	b.n	804389e <DMA_CheckFifoParam+0xe6>
      break;
 8043886:	bf00      	nop
 8043888:	e00a      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;
 804388a:	bf00      	nop
 804388c:	e008      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;
 804388e:	bf00      	nop
 8043890:	e006      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;
 8043892:	bf00      	nop
 8043894:	e004      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;
 8043896:	bf00      	nop
 8043898:	e002      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;   
 804389a:	bf00      	nop
 804389c:	e000      	b.n	80438a0 <DMA_CheckFifoParam+0xe8>
      break;
 804389e:	bf00      	nop
    }
  } 
  
  return status; 
 80438a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80438a2:	4618      	mov	r0, r3
 80438a4:	3714      	adds	r7, #20
 80438a6:	46bd      	mov	sp, r7
 80438a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438ac:	4770      	bx	lr
 80438ae:	bf00      	nop

080438b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80438b0:	b580      	push	{r7, lr}
 80438b2:	b082      	sub	sp, #8
 80438b4:	af00      	add	r7, sp, #0
 80438b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80438b8:	687b      	ldr	r3, [r7, #4]
 80438ba:	2b00      	cmp	r3, #0
 80438bc:	d101      	bne.n	80438c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80438be:	2301      	movs	r3, #1
 80438c0:	e03b      	b.n	804393a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80438c2:	687b      	ldr	r3, [r7, #4]
 80438c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80438c8:	b2db      	uxtb	r3, r3
 80438ca:	2b00      	cmp	r3, #0
 80438cc:	d106      	bne.n	80438dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	2200      	movs	r2, #0
 80438d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80438d6:	6878      	ldr	r0, [r7, #4]
 80438d8:	f7fd fdec 	bl	80414b4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80438dc:	687b      	ldr	r3, [r7, #4]
 80438de:	2202      	movs	r2, #2
 80438e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	681b      	ldr	r3, [r3, #0]
 80438e8:	681b      	ldr	r3, [r3, #0]
 80438ea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80438ee:	687b      	ldr	r3, [r7, #4]
 80438f0:	685a      	ldr	r2, [r3, #4]
 80438f2:	687b      	ldr	r3, [r7, #4]
 80438f4:	681b      	ldr	r3, [r3, #0]
 80438f6:	430a      	orrs	r2, r1
 80438f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80438fa:	687b      	ldr	r3, [r7, #4]
 80438fc:	681b      	ldr	r3, [r3, #0]
 80438fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043900:	f023 0107 	bic.w	r1, r3, #7
 8043904:	687b      	ldr	r3, [r7, #4]
 8043906:	689a      	ldr	r2, [r3, #8]
 8043908:	687b      	ldr	r3, [r7, #4]
 804390a:	681b      	ldr	r3, [r3, #0]
 804390c:	430a      	orrs	r2, r1
 804390e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8043910:	687b      	ldr	r3, [r7, #4]
 8043912:	681b      	ldr	r3, [r3, #0]
 8043914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043916:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 804391a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 804391e:	687a      	ldr	r2, [r7, #4]
 8043920:	68d1      	ldr	r1, [r2, #12]
 8043922:	687a      	ldr	r2, [r7, #4]
 8043924:	6812      	ldr	r2, [r2, #0]
 8043926:	430b      	orrs	r3, r1
 8043928:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 804392a:	687b      	ldr	r3, [r7, #4]
 804392c:	2200      	movs	r2, #0
 804392e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8043930:	687b      	ldr	r3, [r7, #4]
 8043932:	2201      	movs	r2, #1
 8043934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8043938:	2300      	movs	r3, #0
}
 804393a:	4618      	mov	r0, r3
 804393c:	3708      	adds	r7, #8
 804393e:	46bd      	mov	sp, r7
 8043940:	bd80      	pop	{r7, pc}

08043942 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8043942:	b580      	push	{r7, lr}
 8043944:	b086      	sub	sp, #24
 8043946:	af02      	add	r7, sp, #8
 8043948:	60f8      	str	r0, [r7, #12]
 804394a:	60b9      	str	r1, [r7, #8]
 804394c:	607a      	str	r2, [r7, #4]
 804394e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043950:	68fb      	ldr	r3, [r7, #12]
 8043952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043956:	2b01      	cmp	r3, #1
 8043958:	d101      	bne.n	804395e <HAL_DMA2D_Start+0x1c>
 804395a:	2302      	movs	r3, #2
 804395c:	e018      	b.n	8043990 <HAL_DMA2D_Start+0x4e>
 804395e:	68fb      	ldr	r3, [r7, #12]
 8043960:	2201      	movs	r2, #1
 8043962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043966:	68fb      	ldr	r3, [r7, #12]
 8043968:	2202      	movs	r2, #2
 804396a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 804396e:	69bb      	ldr	r3, [r7, #24]
 8043970:	9300      	str	r3, [sp, #0]
 8043972:	683b      	ldr	r3, [r7, #0]
 8043974:	687a      	ldr	r2, [r7, #4]
 8043976:	68b9      	ldr	r1, [r7, #8]
 8043978:	68f8      	ldr	r0, [r7, #12]
 804397a:	f000 fa99 	bl	8043eb0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 804397e:	68fb      	ldr	r3, [r7, #12]
 8043980:	681b      	ldr	r3, [r3, #0]
 8043982:	681a      	ldr	r2, [r3, #0]
 8043984:	68fb      	ldr	r3, [r7, #12]
 8043986:	681b      	ldr	r3, [r3, #0]
 8043988:	f042 0201 	orr.w	r2, r2, #1
 804398c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 804398e:	2300      	movs	r3, #0
}
 8043990:	4618      	mov	r0, r3
 8043992:	3710      	adds	r7, #16
 8043994:	46bd      	mov	sp, r7
 8043996:	bd80      	pop	{r7, pc}

08043998 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8043998:	b580      	push	{r7, lr}
 804399a:	b086      	sub	sp, #24
 804399c:	af00      	add	r7, sp, #0
 804399e:	6078      	str	r0, [r7, #4]
 80439a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80439a2:	2300      	movs	r3, #0
 80439a4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80439a6:	687b      	ldr	r3, [r7, #4]
 80439a8:	681b      	ldr	r3, [r3, #0]
 80439aa:	681b      	ldr	r3, [r3, #0]
 80439ac:	f003 0301 	and.w	r3, r3, #1
 80439b0:	2b00      	cmp	r3, #0
 80439b2:	d056      	beq.n	8043a62 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80439b4:	f7ff fc90 	bl	80432d8 <HAL_GetTick>
 80439b8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80439ba:	e04b      	b.n	8043a54 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80439bc:	687b      	ldr	r3, [r7, #4]
 80439be:	681b      	ldr	r3, [r3, #0]
 80439c0:	685b      	ldr	r3, [r3, #4]
 80439c2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80439c4:	68fb      	ldr	r3, [r7, #12]
 80439c6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80439ca:	2b00      	cmp	r3, #0
 80439cc:	d023      	beq.n	8043a16 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80439ce:	68fb      	ldr	r3, [r7, #12]
 80439d0:	f003 0320 	and.w	r3, r3, #32
 80439d4:	2b00      	cmp	r3, #0
 80439d6:	d005      	beq.n	80439e4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80439d8:	687b      	ldr	r3, [r7, #4]
 80439da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80439dc:	f043 0202 	orr.w	r2, r3, #2
 80439e0:	687b      	ldr	r3, [r7, #4]
 80439e2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80439e4:	68fb      	ldr	r3, [r7, #12]
 80439e6:	f003 0301 	and.w	r3, r3, #1
 80439ea:	2b00      	cmp	r3, #0
 80439ec:	d005      	beq.n	80439fa <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80439ee:	687b      	ldr	r3, [r7, #4]
 80439f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80439f2:	f043 0201 	orr.w	r2, r3, #1
 80439f6:	687b      	ldr	r3, [r7, #4]
 80439f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	681b      	ldr	r3, [r3, #0]
 80439fe:	2221      	movs	r2, #33	; 0x21
 8043a00:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043a02:	687b      	ldr	r3, [r7, #4]
 8043a04:	2204      	movs	r2, #4
 8043a06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043a0a:	687b      	ldr	r3, [r7, #4]
 8043a0c:	2200      	movs	r2, #0
 8043a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043a12:	2301      	movs	r3, #1
 8043a14:	e0a5      	b.n	8043b62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043a16:	683b      	ldr	r3, [r7, #0]
 8043a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043a1c:	d01a      	beq.n	8043a54 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043a1e:	f7ff fc5b 	bl	80432d8 <HAL_GetTick>
 8043a22:	4602      	mov	r2, r0
 8043a24:	697b      	ldr	r3, [r7, #20]
 8043a26:	1ad3      	subs	r3, r2, r3
 8043a28:	683a      	ldr	r2, [r7, #0]
 8043a2a:	429a      	cmp	r2, r3
 8043a2c:	d302      	bcc.n	8043a34 <HAL_DMA2D_PollForTransfer+0x9c>
 8043a2e:	683b      	ldr	r3, [r7, #0]
 8043a30:	2b00      	cmp	r3, #0
 8043a32:	d10f      	bne.n	8043a54 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043a34:	687b      	ldr	r3, [r7, #4]
 8043a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043a38:	f043 0220 	orr.w	r2, r3, #32
 8043a3c:	687b      	ldr	r3, [r7, #4]
 8043a3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043a40:	687b      	ldr	r3, [r7, #4]
 8043a42:	2203      	movs	r2, #3
 8043a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043a48:	687b      	ldr	r3, [r7, #4]
 8043a4a:	2200      	movs	r2, #0
 8043a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043a50:	2303      	movs	r3, #3
 8043a52:	e086      	b.n	8043b62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8043a54:	687b      	ldr	r3, [r7, #4]
 8043a56:	681b      	ldr	r3, [r3, #0]
 8043a58:	685b      	ldr	r3, [r3, #4]
 8043a5a:	f003 0302 	and.w	r3, r3, #2
 8043a5e:	2b00      	cmp	r3, #0
 8043a60:	d0ac      	beq.n	80439bc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8043a62:	687b      	ldr	r3, [r7, #4]
 8043a64:	681b      	ldr	r3, [r3, #0]
 8043a66:	69db      	ldr	r3, [r3, #28]
 8043a68:	f003 0320 	and.w	r3, r3, #32
 8043a6c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8043a6e:	687b      	ldr	r3, [r7, #4]
 8043a70:	681b      	ldr	r3, [r3, #0]
 8043a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043a74:	f003 0320 	and.w	r3, r3, #32
 8043a78:	693a      	ldr	r2, [r7, #16]
 8043a7a:	4313      	orrs	r3, r2
 8043a7c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8043a7e:	693b      	ldr	r3, [r7, #16]
 8043a80:	2b00      	cmp	r3, #0
 8043a82:	d061      	beq.n	8043b48 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8043a84:	f7ff fc28 	bl	80432d8 <HAL_GetTick>
 8043a88:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043a8a:	e056      	b.n	8043b3a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8043a8c:	687b      	ldr	r3, [r7, #4]
 8043a8e:	681b      	ldr	r3, [r3, #0]
 8043a90:	685b      	ldr	r3, [r3, #4]
 8043a92:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8043a94:	68fb      	ldr	r3, [r7, #12]
 8043a96:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8043a9a:	2b00      	cmp	r3, #0
 8043a9c:	d02e      	beq.n	8043afc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043a9e:	68fb      	ldr	r3, [r7, #12]
 8043aa0:	f003 0308 	and.w	r3, r3, #8
 8043aa4:	2b00      	cmp	r3, #0
 8043aa6:	d005      	beq.n	8043ab4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043aa8:	687b      	ldr	r3, [r7, #4]
 8043aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043aac:	f043 0204 	orr.w	r2, r3, #4
 8043ab0:	687b      	ldr	r3, [r7, #4]
 8043ab2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043ab4:	68fb      	ldr	r3, [r7, #12]
 8043ab6:	f003 0320 	and.w	r3, r3, #32
 8043aba:	2b00      	cmp	r3, #0
 8043abc:	d005      	beq.n	8043aca <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043abe:	687b      	ldr	r3, [r7, #4]
 8043ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043ac2:	f043 0202 	orr.w	r2, r3, #2
 8043ac6:	687b      	ldr	r3, [r7, #4]
 8043ac8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043aca:	68fb      	ldr	r3, [r7, #12]
 8043acc:	f003 0301 	and.w	r3, r3, #1
 8043ad0:	2b00      	cmp	r3, #0
 8043ad2:	d005      	beq.n	8043ae0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043ad4:	687b      	ldr	r3, [r7, #4]
 8043ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043ad8:	f043 0201 	orr.w	r2, r3, #1
 8043adc:	687b      	ldr	r3, [r7, #4]
 8043ade:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8043ae0:	687b      	ldr	r3, [r7, #4]
 8043ae2:	681b      	ldr	r3, [r3, #0]
 8043ae4:	2229      	movs	r2, #41	; 0x29
 8043ae6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	2204      	movs	r2, #4
 8043aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8043af0:	687b      	ldr	r3, [r7, #4]
 8043af2:	2200      	movs	r2, #0
 8043af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8043af8:	2301      	movs	r3, #1
 8043afa:	e032      	b.n	8043b62 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8043afc:	683b      	ldr	r3, [r7, #0]
 8043afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043b02:	d01a      	beq.n	8043b3a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8043b04:	f7ff fbe8 	bl	80432d8 <HAL_GetTick>
 8043b08:	4602      	mov	r2, r0
 8043b0a:	697b      	ldr	r3, [r7, #20]
 8043b0c:	1ad3      	subs	r3, r2, r3
 8043b0e:	683a      	ldr	r2, [r7, #0]
 8043b10:	429a      	cmp	r2, r3
 8043b12:	d302      	bcc.n	8043b1a <HAL_DMA2D_PollForTransfer+0x182>
 8043b14:	683b      	ldr	r3, [r7, #0]
 8043b16:	2b00      	cmp	r3, #0
 8043b18:	d10f      	bne.n	8043b3a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8043b1a:	687b      	ldr	r3, [r7, #4]
 8043b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043b1e:	f043 0220 	orr.w	r2, r3, #32
 8043b22:	687b      	ldr	r3, [r7, #4]
 8043b24:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8043b26:	687b      	ldr	r3, [r7, #4]
 8043b28:	2203      	movs	r2, #3
 8043b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8043b2e:	687b      	ldr	r3, [r7, #4]
 8043b30:	2200      	movs	r2, #0
 8043b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8043b36:	2303      	movs	r3, #3
 8043b38:	e013      	b.n	8043b62 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8043b3a:	687b      	ldr	r3, [r7, #4]
 8043b3c:	681b      	ldr	r3, [r3, #0]
 8043b3e:	685b      	ldr	r3, [r3, #4]
 8043b40:	f003 0310 	and.w	r3, r3, #16
 8043b44:	2b00      	cmp	r3, #0
 8043b46:	d0a1      	beq.n	8043a8c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8043b48:	687b      	ldr	r3, [r7, #4]
 8043b4a:	681b      	ldr	r3, [r3, #0]
 8043b4c:	2212      	movs	r2, #18
 8043b4e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043b50:	687b      	ldr	r3, [r7, #4]
 8043b52:	2201      	movs	r2, #1
 8043b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043b58:	687b      	ldr	r3, [r7, #4]
 8043b5a:	2200      	movs	r2, #0
 8043b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043b60:	2300      	movs	r3, #0
}
 8043b62:	4618      	mov	r0, r3
 8043b64:	3718      	adds	r7, #24
 8043b66:	46bd      	mov	sp, r7
 8043b68:	bd80      	pop	{r7, pc}

08043b6a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8043b6a:	b580      	push	{r7, lr}
 8043b6c:	b084      	sub	sp, #16
 8043b6e:	af00      	add	r7, sp, #0
 8043b70:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8043b72:	687b      	ldr	r3, [r7, #4]
 8043b74:	681b      	ldr	r3, [r3, #0]
 8043b76:	685b      	ldr	r3, [r3, #4]
 8043b78:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8043b7a:	687b      	ldr	r3, [r7, #4]
 8043b7c:	681b      	ldr	r3, [r3, #0]
 8043b7e:	681b      	ldr	r3, [r3, #0]
 8043b80:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8043b82:	68fb      	ldr	r3, [r7, #12]
 8043b84:	f003 0301 	and.w	r3, r3, #1
 8043b88:	2b00      	cmp	r3, #0
 8043b8a:	d026      	beq.n	8043bda <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8043b8c:	68bb      	ldr	r3, [r7, #8]
 8043b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043b92:	2b00      	cmp	r3, #0
 8043b94:	d021      	beq.n	8043bda <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8043b96:	687b      	ldr	r3, [r7, #4]
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	681a      	ldr	r2, [r3, #0]
 8043b9c:	687b      	ldr	r3, [r7, #4]
 8043b9e:	681b      	ldr	r3, [r3, #0]
 8043ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8043ba4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8043ba6:	687b      	ldr	r3, [r7, #4]
 8043ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043baa:	f043 0201 	orr.w	r2, r3, #1
 8043bae:	687b      	ldr	r3, [r7, #4]
 8043bb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8043bb2:	687b      	ldr	r3, [r7, #4]
 8043bb4:	681b      	ldr	r3, [r3, #0]
 8043bb6:	2201      	movs	r2, #1
 8043bb8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043bba:	687b      	ldr	r3, [r7, #4]
 8043bbc:	2204      	movs	r2, #4
 8043bbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043bc2:	687b      	ldr	r3, [r7, #4]
 8043bc4:	2200      	movs	r2, #0
 8043bc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043bca:	687b      	ldr	r3, [r7, #4]
 8043bcc:	695b      	ldr	r3, [r3, #20]
 8043bce:	2b00      	cmp	r3, #0
 8043bd0:	d003      	beq.n	8043bda <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043bd2:	687b      	ldr	r3, [r7, #4]
 8043bd4:	695b      	ldr	r3, [r3, #20]
 8043bd6:	6878      	ldr	r0, [r7, #4]
 8043bd8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8043bda:	68fb      	ldr	r3, [r7, #12]
 8043bdc:	f003 0320 	and.w	r3, r3, #32
 8043be0:	2b00      	cmp	r3, #0
 8043be2:	d026      	beq.n	8043c32 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8043be4:	68bb      	ldr	r3, [r7, #8]
 8043be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8043bea:	2b00      	cmp	r3, #0
 8043bec:	d021      	beq.n	8043c32 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8043bee:	687b      	ldr	r3, [r7, #4]
 8043bf0:	681b      	ldr	r3, [r3, #0]
 8043bf2:	681a      	ldr	r2, [r3, #0]
 8043bf4:	687b      	ldr	r3, [r7, #4]
 8043bf6:	681b      	ldr	r3, [r3, #0]
 8043bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8043bfc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8043bfe:	687b      	ldr	r3, [r7, #4]
 8043c00:	681b      	ldr	r3, [r3, #0]
 8043c02:	2220      	movs	r2, #32
 8043c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8043c06:	687b      	ldr	r3, [r7, #4]
 8043c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c0a:	f043 0202 	orr.w	r2, r3, #2
 8043c0e:	687b      	ldr	r3, [r7, #4]
 8043c10:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043c12:	687b      	ldr	r3, [r7, #4]
 8043c14:	2204      	movs	r2, #4
 8043c16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043c1a:	687b      	ldr	r3, [r7, #4]
 8043c1c:	2200      	movs	r2, #0
 8043c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043c22:	687b      	ldr	r3, [r7, #4]
 8043c24:	695b      	ldr	r3, [r3, #20]
 8043c26:	2b00      	cmp	r3, #0
 8043c28:	d003      	beq.n	8043c32 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043c2a:	687b      	ldr	r3, [r7, #4]
 8043c2c:	695b      	ldr	r3, [r3, #20]
 8043c2e:	6878      	ldr	r0, [r7, #4]
 8043c30:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8043c32:	68fb      	ldr	r3, [r7, #12]
 8043c34:	f003 0308 	and.w	r3, r3, #8
 8043c38:	2b00      	cmp	r3, #0
 8043c3a:	d026      	beq.n	8043c8a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8043c3c:	68bb      	ldr	r3, [r7, #8]
 8043c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043c42:	2b00      	cmp	r3, #0
 8043c44:	d021      	beq.n	8043c8a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8043c46:	687b      	ldr	r3, [r7, #4]
 8043c48:	681b      	ldr	r3, [r3, #0]
 8043c4a:	681a      	ldr	r2, [r3, #0]
 8043c4c:	687b      	ldr	r3, [r7, #4]
 8043c4e:	681b      	ldr	r3, [r3, #0]
 8043c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8043c54:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8043c56:	687b      	ldr	r3, [r7, #4]
 8043c58:	681b      	ldr	r3, [r3, #0]
 8043c5a:	2208      	movs	r2, #8
 8043c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8043c5e:	687b      	ldr	r3, [r7, #4]
 8043c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c62:	f043 0204 	orr.w	r2, r3, #4
 8043c66:	687b      	ldr	r3, [r7, #4]
 8043c68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8043c6a:	687b      	ldr	r3, [r7, #4]
 8043c6c:	2204      	movs	r2, #4
 8043c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043c72:	687b      	ldr	r3, [r7, #4]
 8043c74:	2200      	movs	r2, #0
 8043c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8043c7a:	687b      	ldr	r3, [r7, #4]
 8043c7c:	695b      	ldr	r3, [r3, #20]
 8043c7e:	2b00      	cmp	r3, #0
 8043c80:	d003      	beq.n	8043c8a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8043c82:	687b      	ldr	r3, [r7, #4]
 8043c84:	695b      	ldr	r3, [r3, #20]
 8043c86:	6878      	ldr	r0, [r7, #4]
 8043c88:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8043c8a:	68fb      	ldr	r3, [r7, #12]
 8043c8c:	f003 0304 	and.w	r3, r3, #4
 8043c90:	2b00      	cmp	r3, #0
 8043c92:	d013      	beq.n	8043cbc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8043c94:	68bb      	ldr	r3, [r7, #8]
 8043c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043c9a:	2b00      	cmp	r3, #0
 8043c9c:	d00e      	beq.n	8043cbc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8043c9e:	687b      	ldr	r3, [r7, #4]
 8043ca0:	681b      	ldr	r3, [r3, #0]
 8043ca2:	681a      	ldr	r2, [r3, #0]
 8043ca4:	687b      	ldr	r3, [r7, #4]
 8043ca6:	681b      	ldr	r3, [r3, #0]
 8043ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8043cac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8043cae:	687b      	ldr	r3, [r7, #4]
 8043cb0:	681b      	ldr	r3, [r3, #0]
 8043cb2:	2204      	movs	r2, #4
 8043cb4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8043cb6:	6878      	ldr	r0, [r7, #4]
 8043cb8:	f000 f853 	bl	8043d62 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8043cbc:	68fb      	ldr	r3, [r7, #12]
 8043cbe:	f003 0302 	and.w	r3, r3, #2
 8043cc2:	2b00      	cmp	r3, #0
 8043cc4:	d024      	beq.n	8043d10 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8043cc6:	68bb      	ldr	r3, [r7, #8]
 8043cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043ccc:	2b00      	cmp	r3, #0
 8043cce:	d01f      	beq.n	8043d10 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8043cd0:	687b      	ldr	r3, [r7, #4]
 8043cd2:	681b      	ldr	r3, [r3, #0]
 8043cd4:	681a      	ldr	r2, [r3, #0]
 8043cd6:	687b      	ldr	r3, [r7, #4]
 8043cd8:	681b      	ldr	r3, [r3, #0]
 8043cda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8043cde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8043ce0:	687b      	ldr	r3, [r7, #4]
 8043ce2:	681b      	ldr	r3, [r3, #0]
 8043ce4:	2202      	movs	r2, #2
 8043ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043ce8:	687b      	ldr	r3, [r7, #4]
 8043cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043cec:	687b      	ldr	r3, [r7, #4]
 8043cee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043cf0:	687b      	ldr	r3, [r7, #4]
 8043cf2:	2201      	movs	r2, #1
 8043cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043cf8:	687b      	ldr	r3, [r7, #4]
 8043cfa:	2200      	movs	r2, #0
 8043cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8043d00:	687b      	ldr	r3, [r7, #4]
 8043d02:	691b      	ldr	r3, [r3, #16]
 8043d04:	2b00      	cmp	r3, #0
 8043d06:	d003      	beq.n	8043d10 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8043d08:	687b      	ldr	r3, [r7, #4]
 8043d0a:	691b      	ldr	r3, [r3, #16]
 8043d0c:	6878      	ldr	r0, [r7, #4]
 8043d0e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8043d10:	68fb      	ldr	r3, [r7, #12]
 8043d12:	f003 0310 	and.w	r3, r3, #16
 8043d16:	2b00      	cmp	r3, #0
 8043d18:	d01f      	beq.n	8043d5a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8043d1a:	68bb      	ldr	r3, [r7, #8]
 8043d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043d20:	2b00      	cmp	r3, #0
 8043d22:	d01a      	beq.n	8043d5a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8043d24:	687b      	ldr	r3, [r7, #4]
 8043d26:	681b      	ldr	r3, [r3, #0]
 8043d28:	681a      	ldr	r2, [r3, #0]
 8043d2a:	687b      	ldr	r3, [r7, #4]
 8043d2c:	681b      	ldr	r3, [r3, #0]
 8043d2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8043d32:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8043d34:	687b      	ldr	r3, [r7, #4]
 8043d36:	681b      	ldr	r3, [r3, #0]
 8043d38:	2210      	movs	r2, #16
 8043d3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8043d3c:	687b      	ldr	r3, [r7, #4]
 8043d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043d40:	687b      	ldr	r3, [r7, #4]
 8043d42:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8043d44:	687b      	ldr	r3, [r7, #4]
 8043d46:	2201      	movs	r2, #1
 8043d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8043d4c:	687b      	ldr	r3, [r7, #4]
 8043d4e:	2200      	movs	r2, #0
 8043d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8043d54:	6878      	ldr	r0, [r7, #4]
 8043d56:	f000 f80e 	bl	8043d76 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8043d5a:	bf00      	nop
 8043d5c:	3710      	adds	r7, #16
 8043d5e:	46bd      	mov	sp, r7
 8043d60:	bd80      	pop	{r7, pc}

08043d62 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043d62:	b480      	push	{r7}
 8043d64:	b083      	sub	sp, #12
 8043d66:	af00      	add	r7, sp, #0
 8043d68:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8043d6a:	bf00      	nop
 8043d6c:	370c      	adds	r7, #12
 8043d6e:	46bd      	mov	sp, r7
 8043d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d74:	4770      	bx	lr

08043d76 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8043d76:	b480      	push	{r7}
 8043d78:	b083      	sub	sp, #12
 8043d7a:	af00      	add	r7, sp, #0
 8043d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8043d7e:	bf00      	nop
 8043d80:	370c      	adds	r7, #12
 8043d82:	46bd      	mov	sp, r7
 8043d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043d88:	4770      	bx	lr
	...

08043d8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8043d8c:	b480      	push	{r7}
 8043d8e:	b087      	sub	sp, #28
 8043d90:	af00      	add	r7, sp, #0
 8043d92:	6078      	str	r0, [r7, #4]
 8043d94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8043d96:	687b      	ldr	r3, [r7, #4]
 8043d98:	685b      	ldr	r3, [r3, #4]
 8043d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8043d9e:	687b      	ldr	r3, [r7, #4]
 8043da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8043da4:	2b01      	cmp	r3, #1
 8043da6:	d101      	bne.n	8043dac <HAL_DMA2D_ConfigLayer+0x20>
 8043da8:	2302      	movs	r3, #2
 8043daa:	e079      	b.n	8043ea0 <HAL_DMA2D_ConfigLayer+0x114>
 8043dac:	687b      	ldr	r3, [r7, #4]
 8043dae:	2201      	movs	r2, #1
 8043db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8043db4:	687b      	ldr	r3, [r7, #4]
 8043db6:	2202      	movs	r2, #2
 8043db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8043dbc:	683b      	ldr	r3, [r7, #0]
 8043dbe:	011b      	lsls	r3, r3, #4
 8043dc0:	3318      	adds	r3, #24
 8043dc2:	687a      	ldr	r2, [r7, #4]
 8043dc4:	4413      	add	r3, r2
 8043dc6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8043dc8:	693b      	ldr	r3, [r7, #16]
 8043dca:	685a      	ldr	r2, [r3, #4]
 8043dcc:	693b      	ldr	r3, [r7, #16]
 8043dce:	689b      	ldr	r3, [r3, #8]
 8043dd0:	041b      	lsls	r3, r3, #16
 8043dd2:	4313      	orrs	r3, r2
 8043dd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8043dd6:	4b35      	ldr	r3, [pc, #212]	; (8043eac <HAL_DMA2D_ConfigLayer+0x120>)
 8043dd8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043dda:	693b      	ldr	r3, [r7, #16]
 8043ddc:	685b      	ldr	r3, [r3, #4]
 8043dde:	2b0a      	cmp	r3, #10
 8043de0:	d003      	beq.n	8043dea <HAL_DMA2D_ConfigLayer+0x5e>
 8043de2:	693b      	ldr	r3, [r7, #16]
 8043de4:	685b      	ldr	r3, [r3, #4]
 8043de6:	2b09      	cmp	r3, #9
 8043de8:	d107      	bne.n	8043dfa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8043dea:	693b      	ldr	r3, [r7, #16]
 8043dec:	68db      	ldr	r3, [r3, #12]
 8043dee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8043df2:	697a      	ldr	r2, [r7, #20]
 8043df4:	4313      	orrs	r3, r2
 8043df6:	617b      	str	r3, [r7, #20]
 8043df8:	e005      	b.n	8043e06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8043dfa:	693b      	ldr	r3, [r7, #16]
 8043dfc:	68db      	ldr	r3, [r3, #12]
 8043dfe:	061b      	lsls	r3, r3, #24
 8043e00:	697a      	ldr	r2, [r7, #20]
 8043e02:	4313      	orrs	r3, r2
 8043e04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8043e06:	683b      	ldr	r3, [r7, #0]
 8043e08:	2b00      	cmp	r3, #0
 8043e0a:	d120      	bne.n	8043e4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8043e0c:	687b      	ldr	r3, [r7, #4]
 8043e0e:	681b      	ldr	r3, [r3, #0]
 8043e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043e12:	68fb      	ldr	r3, [r7, #12]
 8043e14:	43db      	mvns	r3, r3
 8043e16:	ea02 0103 	and.w	r1, r2, r3
 8043e1a:	687b      	ldr	r3, [r7, #4]
 8043e1c:	681b      	ldr	r3, [r3, #0]
 8043e1e:	697a      	ldr	r2, [r7, #20]
 8043e20:	430a      	orrs	r2, r1
 8043e22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8043e24:	687b      	ldr	r3, [r7, #4]
 8043e26:	681b      	ldr	r3, [r3, #0]
 8043e28:	693a      	ldr	r2, [r7, #16]
 8043e2a:	6812      	ldr	r2, [r2, #0]
 8043e2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043e2e:	693b      	ldr	r3, [r7, #16]
 8043e30:	685b      	ldr	r3, [r3, #4]
 8043e32:	2b0a      	cmp	r3, #10
 8043e34:	d003      	beq.n	8043e3e <HAL_DMA2D_ConfigLayer+0xb2>
 8043e36:	693b      	ldr	r3, [r7, #16]
 8043e38:	685b      	ldr	r3, [r3, #4]
 8043e3a:	2b09      	cmp	r3, #9
 8043e3c:	d127      	bne.n	8043e8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8043e3e:	693b      	ldr	r3, [r7, #16]
 8043e40:	68da      	ldr	r2, [r3, #12]
 8043e42:	687b      	ldr	r3, [r7, #4]
 8043e44:	681b      	ldr	r3, [r3, #0]
 8043e46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8043e4c:	e01f      	b.n	8043e8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8043e4e:	687b      	ldr	r3, [r7, #4]
 8043e50:	681b      	ldr	r3, [r3, #0]
 8043e52:	69da      	ldr	r2, [r3, #28]
 8043e54:	68fb      	ldr	r3, [r7, #12]
 8043e56:	43db      	mvns	r3, r3
 8043e58:	ea02 0103 	and.w	r1, r2, r3
 8043e5c:	687b      	ldr	r3, [r7, #4]
 8043e5e:	681b      	ldr	r3, [r3, #0]
 8043e60:	697a      	ldr	r2, [r7, #20]
 8043e62:	430a      	orrs	r2, r1
 8043e64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8043e66:	687b      	ldr	r3, [r7, #4]
 8043e68:	681b      	ldr	r3, [r3, #0]
 8043e6a:	693a      	ldr	r2, [r7, #16]
 8043e6c:	6812      	ldr	r2, [r2, #0]
 8043e6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8043e70:	693b      	ldr	r3, [r7, #16]
 8043e72:	685b      	ldr	r3, [r3, #4]
 8043e74:	2b0a      	cmp	r3, #10
 8043e76:	d003      	beq.n	8043e80 <HAL_DMA2D_ConfigLayer+0xf4>
 8043e78:	693b      	ldr	r3, [r7, #16]
 8043e7a:	685b      	ldr	r3, [r3, #4]
 8043e7c:	2b09      	cmp	r3, #9
 8043e7e:	d106      	bne.n	8043e8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8043e80:	693b      	ldr	r3, [r7, #16]
 8043e82:	68da      	ldr	r2, [r3, #12]
 8043e84:	687b      	ldr	r3, [r7, #4]
 8043e86:	681b      	ldr	r3, [r3, #0]
 8043e88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8043e8c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8043e8e:	687b      	ldr	r3, [r7, #4]
 8043e90:	2201      	movs	r2, #1
 8043e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8043e96:	687b      	ldr	r3, [r7, #4]
 8043e98:	2200      	movs	r2, #0
 8043e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8043e9e:	2300      	movs	r3, #0
}
 8043ea0:	4618      	mov	r0, r3
 8043ea2:	371c      	adds	r7, #28
 8043ea4:	46bd      	mov	sp, r7
 8043ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eaa:	4770      	bx	lr
 8043eac:	ff03000f 	.word	0xff03000f

08043eb0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8043eb0:	b480      	push	{r7}
 8043eb2:	b08b      	sub	sp, #44	; 0x2c
 8043eb4:	af00      	add	r7, sp, #0
 8043eb6:	60f8      	str	r0, [r7, #12]
 8043eb8:	60b9      	str	r1, [r7, #8]
 8043eba:	607a      	str	r2, [r7, #4]
 8043ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8043ebe:	68fb      	ldr	r3, [r7, #12]
 8043ec0:	681b      	ldr	r3, [r3, #0]
 8043ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043ec4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8043ec8:	683b      	ldr	r3, [r7, #0]
 8043eca:	041a      	lsls	r2, r3, #16
 8043ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043ece:	431a      	orrs	r2, r3
 8043ed0:	68fb      	ldr	r3, [r7, #12]
 8043ed2:	681b      	ldr	r3, [r3, #0]
 8043ed4:	430a      	orrs	r2, r1
 8043ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8043ed8:	68fb      	ldr	r3, [r7, #12]
 8043eda:	681b      	ldr	r3, [r3, #0]
 8043edc:	687a      	ldr	r2, [r7, #4]
 8043ede:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8043ee0:	68fb      	ldr	r3, [r7, #12]
 8043ee2:	685b      	ldr	r3, [r3, #4]
 8043ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8043ee8:	d174      	bne.n	8043fd4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8043eea:	68bb      	ldr	r3, [r7, #8]
 8043eec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8043ef0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8043ef2:	68bb      	ldr	r3, [r7, #8]
 8043ef4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8043ef8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8043efa:	68bb      	ldr	r3, [r7, #8]
 8043efc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8043f00:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8043f02:	68bb      	ldr	r3, [r7, #8]
 8043f04:	b2db      	uxtb	r3, r3
 8043f06:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8043f08:	68fb      	ldr	r3, [r7, #12]
 8043f0a:	689b      	ldr	r3, [r3, #8]
 8043f0c:	2b00      	cmp	r3, #0
 8043f0e:	d108      	bne.n	8043f22 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8043f10:	69ba      	ldr	r2, [r7, #24]
 8043f12:	69fb      	ldr	r3, [r7, #28]
 8043f14:	431a      	orrs	r2, r3
 8043f16:	6a3b      	ldr	r3, [r7, #32]
 8043f18:	4313      	orrs	r3, r2
 8043f1a:	697a      	ldr	r2, [r7, #20]
 8043f1c:	4313      	orrs	r3, r2
 8043f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8043f20:	e053      	b.n	8043fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8043f22:	68fb      	ldr	r3, [r7, #12]
 8043f24:	689b      	ldr	r3, [r3, #8]
 8043f26:	2b01      	cmp	r3, #1
 8043f28:	d106      	bne.n	8043f38 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8043f2a:	69ba      	ldr	r2, [r7, #24]
 8043f2c:	69fb      	ldr	r3, [r7, #28]
 8043f2e:	4313      	orrs	r3, r2
 8043f30:	697a      	ldr	r2, [r7, #20]
 8043f32:	4313      	orrs	r3, r2
 8043f34:	627b      	str	r3, [r7, #36]	; 0x24
 8043f36:	e048      	b.n	8043fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8043f38:	68fb      	ldr	r3, [r7, #12]
 8043f3a:	689b      	ldr	r3, [r3, #8]
 8043f3c:	2b02      	cmp	r3, #2
 8043f3e:	d111      	bne.n	8043f64 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8043f40:	69fb      	ldr	r3, [r7, #28]
 8043f42:	0cdb      	lsrs	r3, r3, #19
 8043f44:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8043f46:	69bb      	ldr	r3, [r7, #24]
 8043f48:	0a9b      	lsrs	r3, r3, #10
 8043f4a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043f4c:	697b      	ldr	r3, [r7, #20]
 8043f4e:	08db      	lsrs	r3, r3, #3
 8043f50:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8043f52:	69bb      	ldr	r3, [r7, #24]
 8043f54:	015a      	lsls	r2, r3, #5
 8043f56:	69fb      	ldr	r3, [r7, #28]
 8043f58:	02db      	lsls	r3, r3, #11
 8043f5a:	4313      	orrs	r3, r2
 8043f5c:	697a      	ldr	r2, [r7, #20]
 8043f5e:	4313      	orrs	r3, r2
 8043f60:	627b      	str	r3, [r7, #36]	; 0x24
 8043f62:	e032      	b.n	8043fca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8043f64:	68fb      	ldr	r3, [r7, #12]
 8043f66:	689b      	ldr	r3, [r3, #8]
 8043f68:	2b03      	cmp	r3, #3
 8043f6a:	d117      	bne.n	8043f9c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8043f6c:	6a3b      	ldr	r3, [r7, #32]
 8043f6e:	0fdb      	lsrs	r3, r3, #31
 8043f70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8043f72:	69fb      	ldr	r3, [r7, #28]
 8043f74:	0cdb      	lsrs	r3, r3, #19
 8043f76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8043f78:	69bb      	ldr	r3, [r7, #24]
 8043f7a:	0adb      	lsrs	r3, r3, #11
 8043f7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8043f7e:	697b      	ldr	r3, [r7, #20]
 8043f80:	08db      	lsrs	r3, r3, #3
 8043f82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8043f84:	69bb      	ldr	r3, [r7, #24]
 8043f86:	015a      	lsls	r2, r3, #5
 8043f88:	69fb      	ldr	r3, [r7, #28]
 8043f8a:	029b      	lsls	r3, r3, #10
 8043f8c:	431a      	orrs	r2, r3
 8043f8e:	6a3b      	ldr	r3, [r7, #32]
 8043f90:	03db      	lsls	r3, r3, #15
 8043f92:	4313      	orrs	r3, r2
 8043f94:	697a      	ldr	r2, [r7, #20]
 8043f96:	4313      	orrs	r3, r2
 8043f98:	627b      	str	r3, [r7, #36]	; 0x24
 8043f9a:	e016      	b.n	8043fca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8043f9c:	6a3b      	ldr	r3, [r7, #32]
 8043f9e:	0f1b      	lsrs	r3, r3, #28
 8043fa0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8043fa2:	69fb      	ldr	r3, [r7, #28]
 8043fa4:	0d1b      	lsrs	r3, r3, #20
 8043fa6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8043fa8:	69bb      	ldr	r3, [r7, #24]
 8043faa:	0b1b      	lsrs	r3, r3, #12
 8043fac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8043fae:	697b      	ldr	r3, [r7, #20]
 8043fb0:	091b      	lsrs	r3, r3, #4
 8043fb2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8043fb4:	69bb      	ldr	r3, [r7, #24]
 8043fb6:	011a      	lsls	r2, r3, #4
 8043fb8:	69fb      	ldr	r3, [r7, #28]
 8043fba:	021b      	lsls	r3, r3, #8
 8043fbc:	431a      	orrs	r2, r3
 8043fbe:	6a3b      	ldr	r3, [r7, #32]
 8043fc0:	031b      	lsls	r3, r3, #12
 8043fc2:	4313      	orrs	r3, r2
 8043fc4:	697a      	ldr	r2, [r7, #20]
 8043fc6:	4313      	orrs	r3, r2
 8043fc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8043fca:	68fb      	ldr	r3, [r7, #12]
 8043fcc:	681b      	ldr	r3, [r3, #0]
 8043fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8043fd0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8043fd2:	e003      	b.n	8043fdc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8043fd4:	68fb      	ldr	r3, [r7, #12]
 8043fd6:	681b      	ldr	r3, [r3, #0]
 8043fd8:	68ba      	ldr	r2, [r7, #8]
 8043fda:	60da      	str	r2, [r3, #12]
}
 8043fdc:	bf00      	nop
 8043fde:	372c      	adds	r7, #44	; 0x2c
 8043fe0:	46bd      	mov	sp, r7
 8043fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043fe6:	4770      	bx	lr

08043fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8043fe8:	b480      	push	{r7}
 8043fea:	b089      	sub	sp, #36	; 0x24
 8043fec:	af00      	add	r7, sp, #0
 8043fee:	6078      	str	r0, [r7, #4]
 8043ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8043ff2:	2300      	movs	r3, #0
 8043ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8043ff6:	2300      	movs	r3, #0
 8043ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8043ffa:	2300      	movs	r3, #0
 8043ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8043ffe:	2300      	movs	r3, #0
 8044000:	61fb      	str	r3, [r7, #28]
 8044002:	e177      	b.n	80442f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8044004:	2201      	movs	r2, #1
 8044006:	69fb      	ldr	r3, [r7, #28]
 8044008:	fa02 f303 	lsl.w	r3, r2, r3
 804400c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 804400e:	683b      	ldr	r3, [r7, #0]
 8044010:	681b      	ldr	r3, [r3, #0]
 8044012:	697a      	ldr	r2, [r7, #20]
 8044014:	4013      	ands	r3, r2
 8044016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8044018:	693a      	ldr	r2, [r7, #16]
 804401a:	697b      	ldr	r3, [r7, #20]
 804401c:	429a      	cmp	r2, r3
 804401e:	f040 8166 	bne.w	80442ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044022:	683b      	ldr	r3, [r7, #0]
 8044024:	685b      	ldr	r3, [r3, #4]
 8044026:	f003 0303 	and.w	r3, r3, #3
 804402a:	2b01      	cmp	r3, #1
 804402c:	d005      	beq.n	804403a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804402e:	683b      	ldr	r3, [r7, #0]
 8044030:	685b      	ldr	r3, [r3, #4]
 8044032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8044036:	2b02      	cmp	r3, #2
 8044038:	d130      	bne.n	804409c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 804403a:	687b      	ldr	r3, [r7, #4]
 804403c:	689b      	ldr	r3, [r3, #8]
 804403e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8044040:	69fb      	ldr	r3, [r7, #28]
 8044042:	005b      	lsls	r3, r3, #1
 8044044:	2203      	movs	r2, #3
 8044046:	fa02 f303 	lsl.w	r3, r2, r3
 804404a:	43db      	mvns	r3, r3
 804404c:	69ba      	ldr	r2, [r7, #24]
 804404e:	4013      	ands	r3, r2
 8044050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8044052:	683b      	ldr	r3, [r7, #0]
 8044054:	68da      	ldr	r2, [r3, #12]
 8044056:	69fb      	ldr	r3, [r7, #28]
 8044058:	005b      	lsls	r3, r3, #1
 804405a:	fa02 f303 	lsl.w	r3, r2, r3
 804405e:	69ba      	ldr	r2, [r7, #24]
 8044060:	4313      	orrs	r3, r2
 8044062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8044064:	687b      	ldr	r3, [r7, #4]
 8044066:	69ba      	ldr	r2, [r7, #24]
 8044068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 804406a:	687b      	ldr	r3, [r7, #4]
 804406c:	685b      	ldr	r3, [r3, #4]
 804406e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8044070:	2201      	movs	r2, #1
 8044072:	69fb      	ldr	r3, [r7, #28]
 8044074:	fa02 f303 	lsl.w	r3, r2, r3
 8044078:	43db      	mvns	r3, r3
 804407a:	69ba      	ldr	r2, [r7, #24]
 804407c:	4013      	ands	r3, r2
 804407e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8044080:	683b      	ldr	r3, [r7, #0]
 8044082:	685b      	ldr	r3, [r3, #4]
 8044084:	091b      	lsrs	r3, r3, #4
 8044086:	f003 0201 	and.w	r2, r3, #1
 804408a:	69fb      	ldr	r3, [r7, #28]
 804408c:	fa02 f303 	lsl.w	r3, r2, r3
 8044090:	69ba      	ldr	r2, [r7, #24]
 8044092:	4313      	orrs	r3, r2
 8044094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8044096:	687b      	ldr	r3, [r7, #4]
 8044098:	69ba      	ldr	r2, [r7, #24]
 804409a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 804409c:	683b      	ldr	r3, [r7, #0]
 804409e:	685b      	ldr	r3, [r3, #4]
 80440a0:	f003 0303 	and.w	r3, r3, #3
 80440a4:	2b03      	cmp	r3, #3
 80440a6:	d017      	beq.n	80440d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80440a8:	687b      	ldr	r3, [r7, #4]
 80440aa:	68db      	ldr	r3, [r3, #12]
 80440ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80440ae:	69fb      	ldr	r3, [r7, #28]
 80440b0:	005b      	lsls	r3, r3, #1
 80440b2:	2203      	movs	r2, #3
 80440b4:	fa02 f303 	lsl.w	r3, r2, r3
 80440b8:	43db      	mvns	r3, r3
 80440ba:	69ba      	ldr	r2, [r7, #24]
 80440bc:	4013      	ands	r3, r2
 80440be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80440c0:	683b      	ldr	r3, [r7, #0]
 80440c2:	689a      	ldr	r2, [r3, #8]
 80440c4:	69fb      	ldr	r3, [r7, #28]
 80440c6:	005b      	lsls	r3, r3, #1
 80440c8:	fa02 f303 	lsl.w	r3, r2, r3
 80440cc:	69ba      	ldr	r2, [r7, #24]
 80440ce:	4313      	orrs	r3, r2
 80440d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80440d2:	687b      	ldr	r3, [r7, #4]
 80440d4:	69ba      	ldr	r2, [r7, #24]
 80440d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80440d8:	683b      	ldr	r3, [r7, #0]
 80440da:	685b      	ldr	r3, [r3, #4]
 80440dc:	f003 0303 	and.w	r3, r3, #3
 80440e0:	2b02      	cmp	r3, #2
 80440e2:	d123      	bne.n	804412c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80440e4:	69fb      	ldr	r3, [r7, #28]
 80440e6:	08da      	lsrs	r2, r3, #3
 80440e8:	687b      	ldr	r3, [r7, #4]
 80440ea:	3208      	adds	r2, #8
 80440ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80440f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80440f2:	69fb      	ldr	r3, [r7, #28]
 80440f4:	f003 0307 	and.w	r3, r3, #7
 80440f8:	009b      	lsls	r3, r3, #2
 80440fa:	220f      	movs	r2, #15
 80440fc:	fa02 f303 	lsl.w	r3, r2, r3
 8044100:	43db      	mvns	r3, r3
 8044102:	69ba      	ldr	r2, [r7, #24]
 8044104:	4013      	ands	r3, r2
 8044106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8044108:	683b      	ldr	r3, [r7, #0]
 804410a:	691a      	ldr	r2, [r3, #16]
 804410c:	69fb      	ldr	r3, [r7, #28]
 804410e:	f003 0307 	and.w	r3, r3, #7
 8044112:	009b      	lsls	r3, r3, #2
 8044114:	fa02 f303 	lsl.w	r3, r2, r3
 8044118:	69ba      	ldr	r2, [r7, #24]
 804411a:	4313      	orrs	r3, r2
 804411c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 804411e:	69fb      	ldr	r3, [r7, #28]
 8044120:	08da      	lsrs	r2, r3, #3
 8044122:	687b      	ldr	r3, [r7, #4]
 8044124:	3208      	adds	r2, #8
 8044126:	69b9      	ldr	r1, [r7, #24]
 8044128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 804412c:	687b      	ldr	r3, [r7, #4]
 804412e:	681b      	ldr	r3, [r3, #0]
 8044130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8044132:	69fb      	ldr	r3, [r7, #28]
 8044134:	005b      	lsls	r3, r3, #1
 8044136:	2203      	movs	r2, #3
 8044138:	fa02 f303 	lsl.w	r3, r2, r3
 804413c:	43db      	mvns	r3, r3
 804413e:	69ba      	ldr	r2, [r7, #24]
 8044140:	4013      	ands	r3, r2
 8044142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044144:	683b      	ldr	r3, [r7, #0]
 8044146:	685b      	ldr	r3, [r3, #4]
 8044148:	f003 0203 	and.w	r2, r3, #3
 804414c:	69fb      	ldr	r3, [r7, #28]
 804414e:	005b      	lsls	r3, r3, #1
 8044150:	fa02 f303 	lsl.w	r3, r2, r3
 8044154:	69ba      	ldr	r2, [r7, #24]
 8044156:	4313      	orrs	r3, r2
 8044158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 804415a:	687b      	ldr	r3, [r7, #4]
 804415c:	69ba      	ldr	r2, [r7, #24]
 804415e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8044160:	683b      	ldr	r3, [r7, #0]
 8044162:	685b      	ldr	r3, [r3, #4]
 8044164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8044168:	2b00      	cmp	r3, #0
 804416a:	f000 80c0 	beq.w	80442ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 804416e:	2300      	movs	r3, #0
 8044170:	60fb      	str	r3, [r7, #12]
 8044172:	4b66      	ldr	r3, [pc, #408]	; (804430c <HAL_GPIO_Init+0x324>)
 8044174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044176:	4a65      	ldr	r2, [pc, #404]	; (804430c <HAL_GPIO_Init+0x324>)
 8044178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804417c:	6453      	str	r3, [r2, #68]	; 0x44
 804417e:	4b63      	ldr	r3, [pc, #396]	; (804430c <HAL_GPIO_Init+0x324>)
 8044180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044186:	60fb      	str	r3, [r7, #12]
 8044188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 804418a:	4a61      	ldr	r2, [pc, #388]	; (8044310 <HAL_GPIO_Init+0x328>)
 804418c:	69fb      	ldr	r3, [r7, #28]
 804418e:	089b      	lsrs	r3, r3, #2
 8044190:	3302      	adds	r3, #2
 8044192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8044198:	69fb      	ldr	r3, [r7, #28]
 804419a:	f003 0303 	and.w	r3, r3, #3
 804419e:	009b      	lsls	r3, r3, #2
 80441a0:	220f      	movs	r2, #15
 80441a2:	fa02 f303 	lsl.w	r3, r2, r3
 80441a6:	43db      	mvns	r3, r3
 80441a8:	69ba      	ldr	r2, [r7, #24]
 80441aa:	4013      	ands	r3, r2
 80441ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80441ae:	687b      	ldr	r3, [r7, #4]
 80441b0:	4a58      	ldr	r2, [pc, #352]	; (8044314 <HAL_GPIO_Init+0x32c>)
 80441b2:	4293      	cmp	r3, r2
 80441b4:	d037      	beq.n	8044226 <HAL_GPIO_Init+0x23e>
 80441b6:	687b      	ldr	r3, [r7, #4]
 80441b8:	4a57      	ldr	r2, [pc, #348]	; (8044318 <HAL_GPIO_Init+0x330>)
 80441ba:	4293      	cmp	r3, r2
 80441bc:	d031      	beq.n	8044222 <HAL_GPIO_Init+0x23a>
 80441be:	687b      	ldr	r3, [r7, #4]
 80441c0:	4a56      	ldr	r2, [pc, #344]	; (804431c <HAL_GPIO_Init+0x334>)
 80441c2:	4293      	cmp	r3, r2
 80441c4:	d02b      	beq.n	804421e <HAL_GPIO_Init+0x236>
 80441c6:	687b      	ldr	r3, [r7, #4]
 80441c8:	4a55      	ldr	r2, [pc, #340]	; (8044320 <HAL_GPIO_Init+0x338>)
 80441ca:	4293      	cmp	r3, r2
 80441cc:	d025      	beq.n	804421a <HAL_GPIO_Init+0x232>
 80441ce:	687b      	ldr	r3, [r7, #4]
 80441d0:	4a54      	ldr	r2, [pc, #336]	; (8044324 <HAL_GPIO_Init+0x33c>)
 80441d2:	4293      	cmp	r3, r2
 80441d4:	d01f      	beq.n	8044216 <HAL_GPIO_Init+0x22e>
 80441d6:	687b      	ldr	r3, [r7, #4]
 80441d8:	4a53      	ldr	r2, [pc, #332]	; (8044328 <HAL_GPIO_Init+0x340>)
 80441da:	4293      	cmp	r3, r2
 80441dc:	d019      	beq.n	8044212 <HAL_GPIO_Init+0x22a>
 80441de:	687b      	ldr	r3, [r7, #4]
 80441e0:	4a52      	ldr	r2, [pc, #328]	; (804432c <HAL_GPIO_Init+0x344>)
 80441e2:	4293      	cmp	r3, r2
 80441e4:	d013      	beq.n	804420e <HAL_GPIO_Init+0x226>
 80441e6:	687b      	ldr	r3, [r7, #4]
 80441e8:	4a51      	ldr	r2, [pc, #324]	; (8044330 <HAL_GPIO_Init+0x348>)
 80441ea:	4293      	cmp	r3, r2
 80441ec:	d00d      	beq.n	804420a <HAL_GPIO_Init+0x222>
 80441ee:	687b      	ldr	r3, [r7, #4]
 80441f0:	4a50      	ldr	r2, [pc, #320]	; (8044334 <HAL_GPIO_Init+0x34c>)
 80441f2:	4293      	cmp	r3, r2
 80441f4:	d007      	beq.n	8044206 <HAL_GPIO_Init+0x21e>
 80441f6:	687b      	ldr	r3, [r7, #4]
 80441f8:	4a4f      	ldr	r2, [pc, #316]	; (8044338 <HAL_GPIO_Init+0x350>)
 80441fa:	4293      	cmp	r3, r2
 80441fc:	d101      	bne.n	8044202 <HAL_GPIO_Init+0x21a>
 80441fe:	2309      	movs	r3, #9
 8044200:	e012      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044202:	230a      	movs	r3, #10
 8044204:	e010      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044206:	2308      	movs	r3, #8
 8044208:	e00e      	b.n	8044228 <HAL_GPIO_Init+0x240>
 804420a:	2307      	movs	r3, #7
 804420c:	e00c      	b.n	8044228 <HAL_GPIO_Init+0x240>
 804420e:	2306      	movs	r3, #6
 8044210:	e00a      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044212:	2305      	movs	r3, #5
 8044214:	e008      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044216:	2304      	movs	r3, #4
 8044218:	e006      	b.n	8044228 <HAL_GPIO_Init+0x240>
 804421a:	2303      	movs	r3, #3
 804421c:	e004      	b.n	8044228 <HAL_GPIO_Init+0x240>
 804421e:	2302      	movs	r3, #2
 8044220:	e002      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044222:	2301      	movs	r3, #1
 8044224:	e000      	b.n	8044228 <HAL_GPIO_Init+0x240>
 8044226:	2300      	movs	r3, #0
 8044228:	69fa      	ldr	r2, [r7, #28]
 804422a:	f002 0203 	and.w	r2, r2, #3
 804422e:	0092      	lsls	r2, r2, #2
 8044230:	4093      	lsls	r3, r2
 8044232:	69ba      	ldr	r2, [r7, #24]
 8044234:	4313      	orrs	r3, r2
 8044236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8044238:	4935      	ldr	r1, [pc, #212]	; (8044310 <HAL_GPIO_Init+0x328>)
 804423a:	69fb      	ldr	r3, [r7, #28]
 804423c:	089b      	lsrs	r3, r3, #2
 804423e:	3302      	adds	r3, #2
 8044240:	69ba      	ldr	r2, [r7, #24]
 8044242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8044246:	4b3d      	ldr	r3, [pc, #244]	; (804433c <HAL_GPIO_Init+0x354>)
 8044248:	689b      	ldr	r3, [r3, #8]
 804424a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 804424c:	693b      	ldr	r3, [r7, #16]
 804424e:	43db      	mvns	r3, r3
 8044250:	69ba      	ldr	r2, [r7, #24]
 8044252:	4013      	ands	r3, r2
 8044254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8044256:	683b      	ldr	r3, [r7, #0]
 8044258:	685b      	ldr	r3, [r3, #4]
 804425a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804425e:	2b00      	cmp	r3, #0
 8044260:	d003      	beq.n	804426a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8044262:	69ba      	ldr	r2, [r7, #24]
 8044264:	693b      	ldr	r3, [r7, #16]
 8044266:	4313      	orrs	r3, r2
 8044268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 804426a:	4a34      	ldr	r2, [pc, #208]	; (804433c <HAL_GPIO_Init+0x354>)
 804426c:	69bb      	ldr	r3, [r7, #24]
 804426e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8044270:	4b32      	ldr	r3, [pc, #200]	; (804433c <HAL_GPIO_Init+0x354>)
 8044272:	68db      	ldr	r3, [r3, #12]
 8044274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8044276:	693b      	ldr	r3, [r7, #16]
 8044278:	43db      	mvns	r3, r3
 804427a:	69ba      	ldr	r2, [r7, #24]
 804427c:	4013      	ands	r3, r2
 804427e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8044280:	683b      	ldr	r3, [r7, #0]
 8044282:	685b      	ldr	r3, [r3, #4]
 8044284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044288:	2b00      	cmp	r3, #0
 804428a:	d003      	beq.n	8044294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 804428c:	69ba      	ldr	r2, [r7, #24]
 804428e:	693b      	ldr	r3, [r7, #16]
 8044290:	4313      	orrs	r3, r2
 8044292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8044294:	4a29      	ldr	r2, [pc, #164]	; (804433c <HAL_GPIO_Init+0x354>)
 8044296:	69bb      	ldr	r3, [r7, #24]
 8044298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 804429a:	4b28      	ldr	r3, [pc, #160]	; (804433c <HAL_GPIO_Init+0x354>)
 804429c:	685b      	ldr	r3, [r3, #4]
 804429e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80442a0:	693b      	ldr	r3, [r7, #16]
 80442a2:	43db      	mvns	r3, r3
 80442a4:	69ba      	ldr	r2, [r7, #24]
 80442a6:	4013      	ands	r3, r2
 80442a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80442aa:	683b      	ldr	r3, [r7, #0]
 80442ac:	685b      	ldr	r3, [r3, #4]
 80442ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80442b2:	2b00      	cmp	r3, #0
 80442b4:	d003      	beq.n	80442be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80442b6:	69ba      	ldr	r2, [r7, #24]
 80442b8:	693b      	ldr	r3, [r7, #16]
 80442ba:	4313      	orrs	r3, r2
 80442bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80442be:	4a1f      	ldr	r2, [pc, #124]	; (804433c <HAL_GPIO_Init+0x354>)
 80442c0:	69bb      	ldr	r3, [r7, #24]
 80442c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80442c4:	4b1d      	ldr	r3, [pc, #116]	; (804433c <HAL_GPIO_Init+0x354>)
 80442c6:	681b      	ldr	r3, [r3, #0]
 80442c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80442ca:	693b      	ldr	r3, [r7, #16]
 80442cc:	43db      	mvns	r3, r3
 80442ce:	69ba      	ldr	r2, [r7, #24]
 80442d0:	4013      	ands	r3, r2
 80442d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80442d4:	683b      	ldr	r3, [r7, #0]
 80442d6:	685b      	ldr	r3, [r3, #4]
 80442d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80442dc:	2b00      	cmp	r3, #0
 80442de:	d003      	beq.n	80442e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80442e0:	69ba      	ldr	r2, [r7, #24]
 80442e2:	693b      	ldr	r3, [r7, #16]
 80442e4:	4313      	orrs	r3, r2
 80442e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80442e8:	4a14      	ldr	r2, [pc, #80]	; (804433c <HAL_GPIO_Init+0x354>)
 80442ea:	69bb      	ldr	r3, [r7, #24]
 80442ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80442ee:	69fb      	ldr	r3, [r7, #28]
 80442f0:	3301      	adds	r3, #1
 80442f2:	61fb      	str	r3, [r7, #28]
 80442f4:	69fb      	ldr	r3, [r7, #28]
 80442f6:	2b0f      	cmp	r3, #15
 80442f8:	f67f ae84 	bls.w	8044004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80442fc:	bf00      	nop
 80442fe:	bf00      	nop
 8044300:	3724      	adds	r7, #36	; 0x24
 8044302:	46bd      	mov	sp, r7
 8044304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044308:	4770      	bx	lr
 804430a:	bf00      	nop
 804430c:	40023800 	.word	0x40023800
 8044310:	40013800 	.word	0x40013800
 8044314:	40020000 	.word	0x40020000
 8044318:	40020400 	.word	0x40020400
 804431c:	40020800 	.word	0x40020800
 8044320:	40020c00 	.word	0x40020c00
 8044324:	40021000 	.word	0x40021000
 8044328:	40021400 	.word	0x40021400
 804432c:	40021800 	.word	0x40021800
 8044330:	40021c00 	.word	0x40021c00
 8044334:	40022000 	.word	0x40022000
 8044338:	40022400 	.word	0x40022400
 804433c:	40013c00 	.word	0x40013c00

08044340 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8044340:	b480      	push	{r7}
 8044342:	b087      	sub	sp, #28
 8044344:	af00      	add	r7, sp, #0
 8044346:	6078      	str	r0, [r7, #4]
 8044348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 804434a:	2300      	movs	r3, #0
 804434c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 804434e:	2300      	movs	r3, #0
 8044350:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8044352:	2300      	movs	r3, #0
 8044354:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8044356:	2300      	movs	r3, #0
 8044358:	617b      	str	r3, [r7, #20]
 804435a:	e0d9      	b.n	8044510 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 804435c:	2201      	movs	r2, #1
 804435e:	697b      	ldr	r3, [r7, #20]
 8044360:	fa02 f303 	lsl.w	r3, r2, r3
 8044364:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8044366:	683a      	ldr	r2, [r7, #0]
 8044368:	693b      	ldr	r3, [r7, #16]
 804436a:	4013      	ands	r3, r2
 804436c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 804436e:	68fa      	ldr	r2, [r7, #12]
 8044370:	693b      	ldr	r3, [r7, #16]
 8044372:	429a      	cmp	r2, r3
 8044374:	f040 80c9 	bne.w	804450a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8044378:	4a6b      	ldr	r2, [pc, #428]	; (8044528 <HAL_GPIO_DeInit+0x1e8>)
 804437a:	697b      	ldr	r3, [r7, #20]
 804437c:	089b      	lsrs	r3, r3, #2
 804437e:	3302      	adds	r3, #2
 8044380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044384:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8044386:	697b      	ldr	r3, [r7, #20]
 8044388:	f003 0303 	and.w	r3, r3, #3
 804438c:	009b      	lsls	r3, r3, #2
 804438e:	220f      	movs	r2, #15
 8044390:	fa02 f303 	lsl.w	r3, r2, r3
 8044394:	68ba      	ldr	r2, [r7, #8]
 8044396:	4013      	ands	r3, r2
 8044398:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 804439a:	687b      	ldr	r3, [r7, #4]
 804439c:	4a63      	ldr	r2, [pc, #396]	; (804452c <HAL_GPIO_DeInit+0x1ec>)
 804439e:	4293      	cmp	r3, r2
 80443a0:	d037      	beq.n	8044412 <HAL_GPIO_DeInit+0xd2>
 80443a2:	687b      	ldr	r3, [r7, #4]
 80443a4:	4a62      	ldr	r2, [pc, #392]	; (8044530 <HAL_GPIO_DeInit+0x1f0>)
 80443a6:	4293      	cmp	r3, r2
 80443a8:	d031      	beq.n	804440e <HAL_GPIO_DeInit+0xce>
 80443aa:	687b      	ldr	r3, [r7, #4]
 80443ac:	4a61      	ldr	r2, [pc, #388]	; (8044534 <HAL_GPIO_DeInit+0x1f4>)
 80443ae:	4293      	cmp	r3, r2
 80443b0:	d02b      	beq.n	804440a <HAL_GPIO_DeInit+0xca>
 80443b2:	687b      	ldr	r3, [r7, #4]
 80443b4:	4a60      	ldr	r2, [pc, #384]	; (8044538 <HAL_GPIO_DeInit+0x1f8>)
 80443b6:	4293      	cmp	r3, r2
 80443b8:	d025      	beq.n	8044406 <HAL_GPIO_DeInit+0xc6>
 80443ba:	687b      	ldr	r3, [r7, #4]
 80443bc:	4a5f      	ldr	r2, [pc, #380]	; (804453c <HAL_GPIO_DeInit+0x1fc>)
 80443be:	4293      	cmp	r3, r2
 80443c0:	d01f      	beq.n	8044402 <HAL_GPIO_DeInit+0xc2>
 80443c2:	687b      	ldr	r3, [r7, #4]
 80443c4:	4a5e      	ldr	r2, [pc, #376]	; (8044540 <HAL_GPIO_DeInit+0x200>)
 80443c6:	4293      	cmp	r3, r2
 80443c8:	d019      	beq.n	80443fe <HAL_GPIO_DeInit+0xbe>
 80443ca:	687b      	ldr	r3, [r7, #4]
 80443cc:	4a5d      	ldr	r2, [pc, #372]	; (8044544 <HAL_GPIO_DeInit+0x204>)
 80443ce:	4293      	cmp	r3, r2
 80443d0:	d013      	beq.n	80443fa <HAL_GPIO_DeInit+0xba>
 80443d2:	687b      	ldr	r3, [r7, #4]
 80443d4:	4a5c      	ldr	r2, [pc, #368]	; (8044548 <HAL_GPIO_DeInit+0x208>)
 80443d6:	4293      	cmp	r3, r2
 80443d8:	d00d      	beq.n	80443f6 <HAL_GPIO_DeInit+0xb6>
 80443da:	687b      	ldr	r3, [r7, #4]
 80443dc:	4a5b      	ldr	r2, [pc, #364]	; (804454c <HAL_GPIO_DeInit+0x20c>)
 80443de:	4293      	cmp	r3, r2
 80443e0:	d007      	beq.n	80443f2 <HAL_GPIO_DeInit+0xb2>
 80443e2:	687b      	ldr	r3, [r7, #4]
 80443e4:	4a5a      	ldr	r2, [pc, #360]	; (8044550 <HAL_GPIO_DeInit+0x210>)
 80443e6:	4293      	cmp	r3, r2
 80443e8:	d101      	bne.n	80443ee <HAL_GPIO_DeInit+0xae>
 80443ea:	2309      	movs	r3, #9
 80443ec:	e012      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 80443ee:	230a      	movs	r3, #10
 80443f0:	e010      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 80443f2:	2308      	movs	r3, #8
 80443f4:	e00e      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 80443f6:	2307      	movs	r3, #7
 80443f8:	e00c      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 80443fa:	2306      	movs	r3, #6
 80443fc:	e00a      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 80443fe:	2305      	movs	r3, #5
 8044400:	e008      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 8044402:	2304      	movs	r3, #4
 8044404:	e006      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 8044406:	2303      	movs	r3, #3
 8044408:	e004      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 804440a:	2302      	movs	r3, #2
 804440c:	e002      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 804440e:	2301      	movs	r3, #1
 8044410:	e000      	b.n	8044414 <HAL_GPIO_DeInit+0xd4>
 8044412:	2300      	movs	r3, #0
 8044414:	697a      	ldr	r2, [r7, #20]
 8044416:	f002 0203 	and.w	r2, r2, #3
 804441a:	0092      	lsls	r2, r2, #2
 804441c:	4093      	lsls	r3, r2
 804441e:	68ba      	ldr	r2, [r7, #8]
 8044420:	429a      	cmp	r2, r3
 8044422:	d132      	bne.n	804448a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8044424:	4b4b      	ldr	r3, [pc, #300]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 8044426:	681a      	ldr	r2, [r3, #0]
 8044428:	68fb      	ldr	r3, [r7, #12]
 804442a:	43db      	mvns	r3, r3
 804442c:	4949      	ldr	r1, [pc, #292]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 804442e:	4013      	ands	r3, r2
 8044430:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8044432:	4b48      	ldr	r3, [pc, #288]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 8044434:	685a      	ldr	r2, [r3, #4]
 8044436:	68fb      	ldr	r3, [r7, #12]
 8044438:	43db      	mvns	r3, r3
 804443a:	4946      	ldr	r1, [pc, #280]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 804443c:	4013      	ands	r3, r2
 804443e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8044440:	4b44      	ldr	r3, [pc, #272]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 8044442:	68da      	ldr	r2, [r3, #12]
 8044444:	68fb      	ldr	r3, [r7, #12]
 8044446:	43db      	mvns	r3, r3
 8044448:	4942      	ldr	r1, [pc, #264]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 804444a:	4013      	ands	r3, r2
 804444c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 804444e:	4b41      	ldr	r3, [pc, #260]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 8044450:	689a      	ldr	r2, [r3, #8]
 8044452:	68fb      	ldr	r3, [r7, #12]
 8044454:	43db      	mvns	r3, r3
 8044456:	493f      	ldr	r1, [pc, #252]	; (8044554 <HAL_GPIO_DeInit+0x214>)
 8044458:	4013      	ands	r3, r2
 804445a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 804445c:	697b      	ldr	r3, [r7, #20]
 804445e:	f003 0303 	and.w	r3, r3, #3
 8044462:	009b      	lsls	r3, r3, #2
 8044464:	220f      	movs	r2, #15
 8044466:	fa02 f303 	lsl.w	r3, r2, r3
 804446a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 804446c:	4a2e      	ldr	r2, [pc, #184]	; (8044528 <HAL_GPIO_DeInit+0x1e8>)
 804446e:	697b      	ldr	r3, [r7, #20]
 8044470:	089b      	lsrs	r3, r3, #2
 8044472:	3302      	adds	r3, #2
 8044474:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8044478:	68bb      	ldr	r3, [r7, #8]
 804447a:	43da      	mvns	r2, r3
 804447c:	482a      	ldr	r0, [pc, #168]	; (8044528 <HAL_GPIO_DeInit+0x1e8>)
 804447e:	697b      	ldr	r3, [r7, #20]
 8044480:	089b      	lsrs	r3, r3, #2
 8044482:	400a      	ands	r2, r1
 8044484:	3302      	adds	r3, #2
 8044486:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 804448a:	687b      	ldr	r3, [r7, #4]
 804448c:	681a      	ldr	r2, [r3, #0]
 804448e:	697b      	ldr	r3, [r7, #20]
 8044490:	005b      	lsls	r3, r3, #1
 8044492:	2103      	movs	r1, #3
 8044494:	fa01 f303 	lsl.w	r3, r1, r3
 8044498:	43db      	mvns	r3, r3
 804449a:	401a      	ands	r2, r3
 804449c:	687b      	ldr	r3, [r7, #4]
 804449e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80444a0:	697b      	ldr	r3, [r7, #20]
 80444a2:	08da      	lsrs	r2, r3, #3
 80444a4:	687b      	ldr	r3, [r7, #4]
 80444a6:	3208      	adds	r2, #8
 80444a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80444ac:	697b      	ldr	r3, [r7, #20]
 80444ae:	f003 0307 	and.w	r3, r3, #7
 80444b2:	009b      	lsls	r3, r3, #2
 80444b4:	220f      	movs	r2, #15
 80444b6:	fa02 f303 	lsl.w	r3, r2, r3
 80444ba:	43db      	mvns	r3, r3
 80444bc:	697a      	ldr	r2, [r7, #20]
 80444be:	08d2      	lsrs	r2, r2, #3
 80444c0:	4019      	ands	r1, r3
 80444c2:	687b      	ldr	r3, [r7, #4]
 80444c4:	3208      	adds	r2, #8
 80444c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80444ca:	687b      	ldr	r3, [r7, #4]
 80444cc:	68da      	ldr	r2, [r3, #12]
 80444ce:	697b      	ldr	r3, [r7, #20]
 80444d0:	005b      	lsls	r3, r3, #1
 80444d2:	2103      	movs	r1, #3
 80444d4:	fa01 f303 	lsl.w	r3, r1, r3
 80444d8:	43db      	mvns	r3, r3
 80444da:	401a      	ands	r2, r3
 80444dc:	687b      	ldr	r3, [r7, #4]
 80444de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80444e0:	687b      	ldr	r3, [r7, #4]
 80444e2:	685a      	ldr	r2, [r3, #4]
 80444e4:	2101      	movs	r1, #1
 80444e6:	697b      	ldr	r3, [r7, #20]
 80444e8:	fa01 f303 	lsl.w	r3, r1, r3
 80444ec:	43db      	mvns	r3, r3
 80444ee:	401a      	ands	r2, r3
 80444f0:	687b      	ldr	r3, [r7, #4]
 80444f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80444f4:	687b      	ldr	r3, [r7, #4]
 80444f6:	689a      	ldr	r2, [r3, #8]
 80444f8:	697b      	ldr	r3, [r7, #20]
 80444fa:	005b      	lsls	r3, r3, #1
 80444fc:	2103      	movs	r1, #3
 80444fe:	fa01 f303 	lsl.w	r3, r1, r3
 8044502:	43db      	mvns	r3, r3
 8044504:	401a      	ands	r2, r3
 8044506:	687b      	ldr	r3, [r7, #4]
 8044508:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 804450a:	697b      	ldr	r3, [r7, #20]
 804450c:	3301      	adds	r3, #1
 804450e:	617b      	str	r3, [r7, #20]
 8044510:	697b      	ldr	r3, [r7, #20]
 8044512:	2b0f      	cmp	r3, #15
 8044514:	f67f af22 	bls.w	804435c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8044518:	bf00      	nop
 804451a:	bf00      	nop
 804451c:	371c      	adds	r7, #28
 804451e:	46bd      	mov	sp, r7
 8044520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044524:	4770      	bx	lr
 8044526:	bf00      	nop
 8044528:	40013800 	.word	0x40013800
 804452c:	40020000 	.word	0x40020000
 8044530:	40020400 	.word	0x40020400
 8044534:	40020800 	.word	0x40020800
 8044538:	40020c00 	.word	0x40020c00
 804453c:	40021000 	.word	0x40021000
 8044540:	40021400 	.word	0x40021400
 8044544:	40021800 	.word	0x40021800
 8044548:	40021c00 	.word	0x40021c00
 804454c:	40022000 	.word	0x40022000
 8044550:	40022400 	.word	0x40022400
 8044554:	40013c00 	.word	0x40013c00

08044558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044558:	b480      	push	{r7}
 804455a:	b083      	sub	sp, #12
 804455c:	af00      	add	r7, sp, #0
 804455e:	6078      	str	r0, [r7, #4]
 8044560:	460b      	mov	r3, r1
 8044562:	807b      	strh	r3, [r7, #2]
 8044564:	4613      	mov	r3, r2
 8044566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8044568:	787b      	ldrb	r3, [r7, #1]
 804456a:	2b00      	cmp	r3, #0
 804456c:	d003      	beq.n	8044576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 804456e:	887a      	ldrh	r2, [r7, #2]
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8044574:	e003      	b.n	804457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8044576:	887b      	ldrh	r3, [r7, #2]
 8044578:	041a      	lsls	r2, r3, #16
 804457a:	687b      	ldr	r3, [r7, #4]
 804457c:	619a      	str	r2, [r3, #24]
}
 804457e:	bf00      	nop
 8044580:	370c      	adds	r7, #12
 8044582:	46bd      	mov	sp, r7
 8044584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044588:	4770      	bx	lr
	...

0804458c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 804458c:	b580      	push	{r7, lr}
 804458e:	b082      	sub	sp, #8
 8044590:	af00      	add	r7, sp, #0
 8044592:	4603      	mov	r3, r0
 8044594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8044596:	4b08      	ldr	r3, [pc, #32]	; (80445b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8044598:	695a      	ldr	r2, [r3, #20]
 804459a:	88fb      	ldrh	r3, [r7, #6]
 804459c:	4013      	ands	r3, r2
 804459e:	2b00      	cmp	r3, #0
 80445a0:	d006      	beq.n	80445b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80445a2:	4a05      	ldr	r2, [pc, #20]	; (80445b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80445a4:	88fb      	ldrh	r3, [r7, #6]
 80445a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80445a8:	88fb      	ldrh	r3, [r7, #6]
 80445aa:	4618      	mov	r0, r3
 80445ac:	f7fd fb86 	bl	8041cbc <HAL_GPIO_EXTI_Callback>
  }
}
 80445b0:	bf00      	nop
 80445b2:	3708      	adds	r7, #8
 80445b4:	46bd      	mov	sp, r7
 80445b6:	bd80      	pop	{r7, pc}
 80445b8:	40013c00 	.word	0x40013c00

080445bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80445bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80445be:	b08f      	sub	sp, #60	; 0x3c
 80445c0:	af0a      	add	r7, sp, #40	; 0x28
 80445c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80445c4:	687b      	ldr	r3, [r7, #4]
 80445c6:	2b00      	cmp	r3, #0
 80445c8:	d101      	bne.n	80445ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80445ca:	2301      	movs	r3, #1
 80445cc:	e054      	b.n	8044678 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80445ce:	687b      	ldr	r3, [r7, #4]
 80445d0:	681b      	ldr	r3, [r3, #0]
 80445d2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80445d4:	687b      	ldr	r3, [r7, #4]
 80445d6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80445da:	b2db      	uxtb	r3, r3
 80445dc:	2b00      	cmp	r3, #0
 80445de:	d106      	bne.n	80445ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80445e0:	687b      	ldr	r3, [r7, #4]
 80445e2:	2200      	movs	r2, #0
 80445e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80445e8:	6878      	ldr	r0, [r7, #4]
 80445ea:	f008 f8ed 	bl	804c7c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80445ee:	687b      	ldr	r3, [r7, #4]
 80445f0:	2203      	movs	r2, #3
 80445f2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80445f6:	68fb      	ldr	r3, [r7, #12]
 80445f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80445fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80445fe:	2b00      	cmp	r3, #0
 8044600:	d102      	bne.n	8044608 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8044602:	687b      	ldr	r3, [r7, #4]
 8044604:	2200      	movs	r2, #0
 8044606:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8044608:	687b      	ldr	r3, [r7, #4]
 804460a:	681b      	ldr	r3, [r3, #0]
 804460c:	4618      	mov	r0, r3
 804460e:	f005 f91b 	bl	8049848 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8044612:	687b      	ldr	r3, [r7, #4]
 8044614:	681b      	ldr	r3, [r3, #0]
 8044616:	603b      	str	r3, [r7, #0]
 8044618:	687e      	ldr	r6, [r7, #4]
 804461a:	466d      	mov	r5, sp
 804461c:	f106 0410 	add.w	r4, r6, #16
 8044620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044628:	e894 0003 	ldmia.w	r4, {r0, r1}
 804462c:	e885 0003 	stmia.w	r5, {r0, r1}
 8044630:	1d33      	adds	r3, r6, #4
 8044632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044634:	6838      	ldr	r0, [r7, #0]
 8044636:	f005 f895 	bl	8049764 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 804463a:	687b      	ldr	r3, [r7, #4]
 804463c:	681b      	ldr	r3, [r3, #0]
 804463e:	2101      	movs	r1, #1
 8044640:	4618      	mov	r0, r3
 8044642:	f005 f912 	bl	804986a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8044646:	687b      	ldr	r3, [r7, #4]
 8044648:	681b      	ldr	r3, [r3, #0]
 804464a:	603b      	str	r3, [r7, #0]
 804464c:	687e      	ldr	r6, [r7, #4]
 804464e:	466d      	mov	r5, sp
 8044650:	f106 0410 	add.w	r4, r6, #16
 8044654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8044656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8044658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804465a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804465c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8044660:	e885 0003 	stmia.w	r5, {r0, r1}
 8044664:	1d33      	adds	r3, r6, #4
 8044666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8044668:	6838      	ldr	r0, [r7, #0]
 804466a:	f005 fa9b 	bl	8049ba4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 804466e:	687b      	ldr	r3, [r7, #4]
 8044670:	2201      	movs	r2, #1
 8044672:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8044676:	2300      	movs	r3, #0
}
 8044678:	4618      	mov	r0, r3
 804467a:	3714      	adds	r7, #20
 804467c:	46bd      	mov	sp, r7
 804467e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08044680 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8044680:	b590      	push	{r4, r7, lr}
 8044682:	b089      	sub	sp, #36	; 0x24
 8044684:	af04      	add	r7, sp, #16
 8044686:	6078      	str	r0, [r7, #4]
 8044688:	4608      	mov	r0, r1
 804468a:	4611      	mov	r1, r2
 804468c:	461a      	mov	r2, r3
 804468e:	4603      	mov	r3, r0
 8044690:	70fb      	strb	r3, [r7, #3]
 8044692:	460b      	mov	r3, r1
 8044694:	70bb      	strb	r3, [r7, #2]
 8044696:	4613      	mov	r3, r2
 8044698:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 804469a:	687b      	ldr	r3, [r7, #4]
 804469c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80446a0:	2b01      	cmp	r3, #1
 80446a2:	d101      	bne.n	80446a8 <HAL_HCD_HC_Init+0x28>
 80446a4:	2302      	movs	r3, #2
 80446a6:	e076      	b.n	8044796 <HAL_HCD_HC_Init+0x116>
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	2201      	movs	r2, #1
 80446ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80446b0:	78fb      	ldrb	r3, [r7, #3]
 80446b2:	687a      	ldr	r2, [r7, #4]
 80446b4:	212c      	movs	r1, #44	; 0x2c
 80446b6:	fb01 f303 	mul.w	r3, r1, r3
 80446ba:	4413      	add	r3, r2
 80446bc:	333d      	adds	r3, #61	; 0x3d
 80446be:	2200      	movs	r2, #0
 80446c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80446c2:	78fb      	ldrb	r3, [r7, #3]
 80446c4:	687a      	ldr	r2, [r7, #4]
 80446c6:	212c      	movs	r1, #44	; 0x2c
 80446c8:	fb01 f303 	mul.w	r3, r1, r3
 80446cc:	4413      	add	r3, r2
 80446ce:	3338      	adds	r3, #56	; 0x38
 80446d0:	787a      	ldrb	r2, [r7, #1]
 80446d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80446d4:	78fb      	ldrb	r3, [r7, #3]
 80446d6:	687a      	ldr	r2, [r7, #4]
 80446d8:	212c      	movs	r1, #44	; 0x2c
 80446da:	fb01 f303 	mul.w	r3, r1, r3
 80446de:	4413      	add	r3, r2
 80446e0:	3340      	adds	r3, #64	; 0x40
 80446e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80446e4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80446e6:	78fb      	ldrb	r3, [r7, #3]
 80446e8:	687a      	ldr	r2, [r7, #4]
 80446ea:	212c      	movs	r1, #44	; 0x2c
 80446ec:	fb01 f303 	mul.w	r3, r1, r3
 80446f0:	4413      	add	r3, r2
 80446f2:	3339      	adds	r3, #57	; 0x39
 80446f4:	78fa      	ldrb	r2, [r7, #3]
 80446f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80446f8:	78fb      	ldrb	r3, [r7, #3]
 80446fa:	687a      	ldr	r2, [r7, #4]
 80446fc:	212c      	movs	r1, #44	; 0x2c
 80446fe:	fb01 f303 	mul.w	r3, r1, r3
 8044702:	4413      	add	r3, r2
 8044704:	333f      	adds	r3, #63	; 0x3f
 8044706:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 804470a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 804470c:	78fb      	ldrb	r3, [r7, #3]
 804470e:	78ba      	ldrb	r2, [r7, #2]
 8044710:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8044714:	b2d0      	uxtb	r0, r2
 8044716:	687a      	ldr	r2, [r7, #4]
 8044718:	212c      	movs	r1, #44	; 0x2c
 804471a:	fb01 f303 	mul.w	r3, r1, r3
 804471e:	4413      	add	r3, r2
 8044720:	333a      	adds	r3, #58	; 0x3a
 8044722:	4602      	mov	r2, r0
 8044724:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8044726:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804472a:	2b00      	cmp	r3, #0
 804472c:	da09      	bge.n	8044742 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 804472e:	78fb      	ldrb	r3, [r7, #3]
 8044730:	687a      	ldr	r2, [r7, #4]
 8044732:	212c      	movs	r1, #44	; 0x2c
 8044734:	fb01 f303 	mul.w	r3, r1, r3
 8044738:	4413      	add	r3, r2
 804473a:	333b      	adds	r3, #59	; 0x3b
 804473c:	2201      	movs	r2, #1
 804473e:	701a      	strb	r2, [r3, #0]
 8044740:	e008      	b.n	8044754 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8044742:	78fb      	ldrb	r3, [r7, #3]
 8044744:	687a      	ldr	r2, [r7, #4]
 8044746:	212c      	movs	r1, #44	; 0x2c
 8044748:	fb01 f303 	mul.w	r3, r1, r3
 804474c:	4413      	add	r3, r2
 804474e:	333b      	adds	r3, #59	; 0x3b
 8044750:	2200      	movs	r2, #0
 8044752:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8044754:	78fb      	ldrb	r3, [r7, #3]
 8044756:	687a      	ldr	r2, [r7, #4]
 8044758:	212c      	movs	r1, #44	; 0x2c
 804475a:	fb01 f303 	mul.w	r3, r1, r3
 804475e:	4413      	add	r3, r2
 8044760:	333c      	adds	r3, #60	; 0x3c
 8044762:	f897 2020 	ldrb.w	r2, [r7, #32]
 8044766:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8044768:	687b      	ldr	r3, [r7, #4]
 804476a:	6818      	ldr	r0, [r3, #0]
 804476c:	787c      	ldrb	r4, [r7, #1]
 804476e:	78ba      	ldrb	r2, [r7, #2]
 8044770:	78f9      	ldrb	r1, [r7, #3]
 8044772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044774:	9302      	str	r3, [sp, #8]
 8044776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804477a:	9301      	str	r3, [sp, #4]
 804477c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8044780:	9300      	str	r3, [sp, #0]
 8044782:	4623      	mov	r3, r4
 8044784:	f005 fb94 	bl	8049eb0 <USB_HC_Init>
 8044788:	4603      	mov	r3, r0
 804478a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 804478c:	687b      	ldr	r3, [r7, #4]
 804478e:	2200      	movs	r2, #0
 8044790:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8044794:	7bfb      	ldrb	r3, [r7, #15]
}
 8044796:	4618      	mov	r0, r3
 8044798:	3714      	adds	r7, #20
 804479a:	46bd      	mov	sp, r7
 804479c:	bd90      	pop	{r4, r7, pc}

0804479e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 804479e:	b580      	push	{r7, lr}
 80447a0:	b084      	sub	sp, #16
 80447a2:	af00      	add	r7, sp, #0
 80447a4:	6078      	str	r0, [r7, #4]
 80447a6:	460b      	mov	r3, r1
 80447a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80447aa:	2300      	movs	r3, #0
 80447ac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80447ae:	687b      	ldr	r3, [r7, #4]
 80447b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80447b4:	2b01      	cmp	r3, #1
 80447b6:	d101      	bne.n	80447bc <HAL_HCD_HC_Halt+0x1e>
 80447b8:	2302      	movs	r3, #2
 80447ba:	e00f      	b.n	80447dc <HAL_HCD_HC_Halt+0x3e>
 80447bc:	687b      	ldr	r3, [r7, #4]
 80447be:	2201      	movs	r2, #1
 80447c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80447c4:	687b      	ldr	r3, [r7, #4]
 80447c6:	681b      	ldr	r3, [r3, #0]
 80447c8:	78fa      	ldrb	r2, [r7, #3]
 80447ca:	4611      	mov	r1, r2
 80447cc:	4618      	mov	r0, r3
 80447ce:	f005 fde4 	bl	804a39a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80447d2:	687b      	ldr	r3, [r7, #4]
 80447d4:	2200      	movs	r2, #0
 80447d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80447da:	7bfb      	ldrb	r3, [r7, #15]
}
 80447dc:	4618      	mov	r0, r3
 80447de:	3710      	adds	r7, #16
 80447e0:	46bd      	mov	sp, r7
 80447e2:	bd80      	pop	{r7, pc}

080447e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80447e4:	b580      	push	{r7, lr}
 80447e6:	b082      	sub	sp, #8
 80447e8:	af00      	add	r7, sp, #0
 80447ea:	6078      	str	r0, [r7, #4]
 80447ec:	4608      	mov	r0, r1
 80447ee:	4611      	mov	r1, r2
 80447f0:	461a      	mov	r2, r3
 80447f2:	4603      	mov	r3, r0
 80447f4:	70fb      	strb	r3, [r7, #3]
 80447f6:	460b      	mov	r3, r1
 80447f8:	70bb      	strb	r3, [r7, #2]
 80447fa:	4613      	mov	r3, r2
 80447fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80447fe:	78fb      	ldrb	r3, [r7, #3]
 8044800:	687a      	ldr	r2, [r7, #4]
 8044802:	212c      	movs	r1, #44	; 0x2c
 8044804:	fb01 f303 	mul.w	r3, r1, r3
 8044808:	4413      	add	r3, r2
 804480a:	333b      	adds	r3, #59	; 0x3b
 804480c:	78ba      	ldrb	r2, [r7, #2]
 804480e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8044810:	78fb      	ldrb	r3, [r7, #3]
 8044812:	687a      	ldr	r2, [r7, #4]
 8044814:	212c      	movs	r1, #44	; 0x2c
 8044816:	fb01 f303 	mul.w	r3, r1, r3
 804481a:	4413      	add	r3, r2
 804481c:	333f      	adds	r3, #63	; 0x3f
 804481e:	787a      	ldrb	r2, [r7, #1]
 8044820:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8044822:	7c3b      	ldrb	r3, [r7, #16]
 8044824:	2b00      	cmp	r3, #0
 8044826:	d112      	bne.n	804484e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8044828:	78fb      	ldrb	r3, [r7, #3]
 804482a:	687a      	ldr	r2, [r7, #4]
 804482c:	212c      	movs	r1, #44	; 0x2c
 804482e:	fb01 f303 	mul.w	r3, r1, r3
 8044832:	4413      	add	r3, r2
 8044834:	3342      	adds	r3, #66	; 0x42
 8044836:	2203      	movs	r2, #3
 8044838:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 804483a:	78fb      	ldrb	r3, [r7, #3]
 804483c:	687a      	ldr	r2, [r7, #4]
 804483e:	212c      	movs	r1, #44	; 0x2c
 8044840:	fb01 f303 	mul.w	r3, r1, r3
 8044844:	4413      	add	r3, r2
 8044846:	333d      	adds	r3, #61	; 0x3d
 8044848:	7f3a      	ldrb	r2, [r7, #28]
 804484a:	701a      	strb	r2, [r3, #0]
 804484c:	e008      	b.n	8044860 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804484e:	78fb      	ldrb	r3, [r7, #3]
 8044850:	687a      	ldr	r2, [r7, #4]
 8044852:	212c      	movs	r1, #44	; 0x2c
 8044854:	fb01 f303 	mul.w	r3, r1, r3
 8044858:	4413      	add	r3, r2
 804485a:	3342      	adds	r3, #66	; 0x42
 804485c:	2202      	movs	r2, #2
 804485e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8044860:	787b      	ldrb	r3, [r7, #1]
 8044862:	2b03      	cmp	r3, #3
 8044864:	f200 80c6 	bhi.w	80449f4 <HAL_HCD_HC_SubmitRequest+0x210>
 8044868:	a201      	add	r2, pc, #4	; (adr r2, 8044870 <HAL_HCD_HC_SubmitRequest+0x8c>)
 804486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804486e:	bf00      	nop
 8044870:	08044881 	.word	0x08044881
 8044874:	080449e1 	.word	0x080449e1
 8044878:	080448e5 	.word	0x080448e5
 804487c:	08044963 	.word	0x08044963
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8044880:	7c3b      	ldrb	r3, [r7, #16]
 8044882:	2b01      	cmp	r3, #1
 8044884:	f040 80b8 	bne.w	80449f8 <HAL_HCD_HC_SubmitRequest+0x214>
 8044888:	78bb      	ldrb	r3, [r7, #2]
 804488a:	2b00      	cmp	r3, #0
 804488c:	f040 80b4 	bne.w	80449f8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8044890:	8b3b      	ldrh	r3, [r7, #24]
 8044892:	2b00      	cmp	r3, #0
 8044894:	d108      	bne.n	80448a8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8044896:	78fb      	ldrb	r3, [r7, #3]
 8044898:	687a      	ldr	r2, [r7, #4]
 804489a:	212c      	movs	r1, #44	; 0x2c
 804489c:	fb01 f303 	mul.w	r3, r1, r3
 80448a0:	4413      	add	r3, r2
 80448a2:	3355      	adds	r3, #85	; 0x55
 80448a4:	2201      	movs	r2, #1
 80448a6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80448a8:	78fb      	ldrb	r3, [r7, #3]
 80448aa:	687a      	ldr	r2, [r7, #4]
 80448ac:	212c      	movs	r1, #44	; 0x2c
 80448ae:	fb01 f303 	mul.w	r3, r1, r3
 80448b2:	4413      	add	r3, r2
 80448b4:	3355      	adds	r3, #85	; 0x55
 80448b6:	781b      	ldrb	r3, [r3, #0]
 80448b8:	2b00      	cmp	r3, #0
 80448ba:	d109      	bne.n	80448d0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80448bc:	78fb      	ldrb	r3, [r7, #3]
 80448be:	687a      	ldr	r2, [r7, #4]
 80448c0:	212c      	movs	r1, #44	; 0x2c
 80448c2:	fb01 f303 	mul.w	r3, r1, r3
 80448c6:	4413      	add	r3, r2
 80448c8:	3342      	adds	r3, #66	; 0x42
 80448ca:	2200      	movs	r2, #0
 80448cc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80448ce:	e093      	b.n	80449f8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80448d0:	78fb      	ldrb	r3, [r7, #3]
 80448d2:	687a      	ldr	r2, [r7, #4]
 80448d4:	212c      	movs	r1, #44	; 0x2c
 80448d6:	fb01 f303 	mul.w	r3, r1, r3
 80448da:	4413      	add	r3, r2
 80448dc:	3342      	adds	r3, #66	; 0x42
 80448de:	2202      	movs	r2, #2
 80448e0:	701a      	strb	r2, [r3, #0]
      break;
 80448e2:	e089      	b.n	80449f8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80448e4:	78bb      	ldrb	r3, [r7, #2]
 80448e6:	2b00      	cmp	r3, #0
 80448e8:	d11d      	bne.n	8044926 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80448ea:	78fb      	ldrb	r3, [r7, #3]
 80448ec:	687a      	ldr	r2, [r7, #4]
 80448ee:	212c      	movs	r1, #44	; 0x2c
 80448f0:	fb01 f303 	mul.w	r3, r1, r3
 80448f4:	4413      	add	r3, r2
 80448f6:	3355      	adds	r3, #85	; 0x55
 80448f8:	781b      	ldrb	r3, [r3, #0]
 80448fa:	2b00      	cmp	r3, #0
 80448fc:	d109      	bne.n	8044912 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80448fe:	78fb      	ldrb	r3, [r7, #3]
 8044900:	687a      	ldr	r2, [r7, #4]
 8044902:	212c      	movs	r1, #44	; 0x2c
 8044904:	fb01 f303 	mul.w	r3, r1, r3
 8044908:	4413      	add	r3, r2
 804490a:	3342      	adds	r3, #66	; 0x42
 804490c:	2200      	movs	r2, #0
 804490e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8044910:	e073      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044912:	78fb      	ldrb	r3, [r7, #3]
 8044914:	687a      	ldr	r2, [r7, #4]
 8044916:	212c      	movs	r1, #44	; 0x2c
 8044918:	fb01 f303 	mul.w	r3, r1, r3
 804491c:	4413      	add	r3, r2
 804491e:	3342      	adds	r3, #66	; 0x42
 8044920:	2202      	movs	r2, #2
 8044922:	701a      	strb	r2, [r3, #0]
      break;
 8044924:	e069      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8044926:	78fb      	ldrb	r3, [r7, #3]
 8044928:	687a      	ldr	r2, [r7, #4]
 804492a:	212c      	movs	r1, #44	; 0x2c
 804492c:	fb01 f303 	mul.w	r3, r1, r3
 8044930:	4413      	add	r3, r2
 8044932:	3354      	adds	r3, #84	; 0x54
 8044934:	781b      	ldrb	r3, [r3, #0]
 8044936:	2b00      	cmp	r3, #0
 8044938:	d109      	bne.n	804494e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804493a:	78fb      	ldrb	r3, [r7, #3]
 804493c:	687a      	ldr	r2, [r7, #4]
 804493e:	212c      	movs	r1, #44	; 0x2c
 8044940:	fb01 f303 	mul.w	r3, r1, r3
 8044944:	4413      	add	r3, r2
 8044946:	3342      	adds	r3, #66	; 0x42
 8044948:	2200      	movs	r2, #0
 804494a:	701a      	strb	r2, [r3, #0]
      break;
 804494c:	e055      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 804494e:	78fb      	ldrb	r3, [r7, #3]
 8044950:	687a      	ldr	r2, [r7, #4]
 8044952:	212c      	movs	r1, #44	; 0x2c
 8044954:	fb01 f303 	mul.w	r3, r1, r3
 8044958:	4413      	add	r3, r2
 804495a:	3342      	adds	r3, #66	; 0x42
 804495c:	2202      	movs	r2, #2
 804495e:	701a      	strb	r2, [r3, #0]
      break;
 8044960:	e04b      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8044962:	78bb      	ldrb	r3, [r7, #2]
 8044964:	2b00      	cmp	r3, #0
 8044966:	d11d      	bne.n	80449a4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8044968:	78fb      	ldrb	r3, [r7, #3]
 804496a:	687a      	ldr	r2, [r7, #4]
 804496c:	212c      	movs	r1, #44	; 0x2c
 804496e:	fb01 f303 	mul.w	r3, r1, r3
 8044972:	4413      	add	r3, r2
 8044974:	3355      	adds	r3, #85	; 0x55
 8044976:	781b      	ldrb	r3, [r3, #0]
 8044978:	2b00      	cmp	r3, #0
 804497a:	d109      	bne.n	8044990 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 804497c:	78fb      	ldrb	r3, [r7, #3]
 804497e:	687a      	ldr	r2, [r7, #4]
 8044980:	212c      	movs	r1, #44	; 0x2c
 8044982:	fb01 f303 	mul.w	r3, r1, r3
 8044986:	4413      	add	r3, r2
 8044988:	3342      	adds	r3, #66	; 0x42
 804498a:	2200      	movs	r2, #0
 804498c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 804498e:	e034      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8044990:	78fb      	ldrb	r3, [r7, #3]
 8044992:	687a      	ldr	r2, [r7, #4]
 8044994:	212c      	movs	r1, #44	; 0x2c
 8044996:	fb01 f303 	mul.w	r3, r1, r3
 804499a:	4413      	add	r3, r2
 804499c:	3342      	adds	r3, #66	; 0x42
 804499e:	2202      	movs	r2, #2
 80449a0:	701a      	strb	r2, [r3, #0]
      break;
 80449a2:	e02a      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80449a4:	78fb      	ldrb	r3, [r7, #3]
 80449a6:	687a      	ldr	r2, [r7, #4]
 80449a8:	212c      	movs	r1, #44	; 0x2c
 80449aa:	fb01 f303 	mul.w	r3, r1, r3
 80449ae:	4413      	add	r3, r2
 80449b0:	3354      	adds	r3, #84	; 0x54
 80449b2:	781b      	ldrb	r3, [r3, #0]
 80449b4:	2b00      	cmp	r3, #0
 80449b6:	d109      	bne.n	80449cc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80449b8:	78fb      	ldrb	r3, [r7, #3]
 80449ba:	687a      	ldr	r2, [r7, #4]
 80449bc:	212c      	movs	r1, #44	; 0x2c
 80449be:	fb01 f303 	mul.w	r3, r1, r3
 80449c2:	4413      	add	r3, r2
 80449c4:	3342      	adds	r3, #66	; 0x42
 80449c6:	2200      	movs	r2, #0
 80449c8:	701a      	strb	r2, [r3, #0]
      break;
 80449ca:	e016      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80449cc:	78fb      	ldrb	r3, [r7, #3]
 80449ce:	687a      	ldr	r2, [r7, #4]
 80449d0:	212c      	movs	r1, #44	; 0x2c
 80449d2:	fb01 f303 	mul.w	r3, r1, r3
 80449d6:	4413      	add	r3, r2
 80449d8:	3342      	adds	r3, #66	; 0x42
 80449da:	2202      	movs	r2, #2
 80449dc:	701a      	strb	r2, [r3, #0]
      break;
 80449de:	e00c      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80449e0:	78fb      	ldrb	r3, [r7, #3]
 80449e2:	687a      	ldr	r2, [r7, #4]
 80449e4:	212c      	movs	r1, #44	; 0x2c
 80449e6:	fb01 f303 	mul.w	r3, r1, r3
 80449ea:	4413      	add	r3, r2
 80449ec:	3342      	adds	r3, #66	; 0x42
 80449ee:	2200      	movs	r2, #0
 80449f0:	701a      	strb	r2, [r3, #0]
      break;
 80449f2:	e002      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80449f4:	bf00      	nop
 80449f6:	e000      	b.n	80449fa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80449f8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80449fa:	78fb      	ldrb	r3, [r7, #3]
 80449fc:	687a      	ldr	r2, [r7, #4]
 80449fe:	212c      	movs	r1, #44	; 0x2c
 8044a00:	fb01 f303 	mul.w	r3, r1, r3
 8044a04:	4413      	add	r3, r2
 8044a06:	3344      	adds	r3, #68	; 0x44
 8044a08:	697a      	ldr	r2, [r7, #20]
 8044a0a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8044a0c:	78fb      	ldrb	r3, [r7, #3]
 8044a0e:	8b3a      	ldrh	r2, [r7, #24]
 8044a10:	6879      	ldr	r1, [r7, #4]
 8044a12:	202c      	movs	r0, #44	; 0x2c
 8044a14:	fb00 f303 	mul.w	r3, r0, r3
 8044a18:	440b      	add	r3, r1
 8044a1a:	334c      	adds	r3, #76	; 0x4c
 8044a1c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8044a1e:	78fb      	ldrb	r3, [r7, #3]
 8044a20:	687a      	ldr	r2, [r7, #4]
 8044a22:	212c      	movs	r1, #44	; 0x2c
 8044a24:	fb01 f303 	mul.w	r3, r1, r3
 8044a28:	4413      	add	r3, r2
 8044a2a:	3360      	adds	r3, #96	; 0x60
 8044a2c:	2200      	movs	r2, #0
 8044a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8044a30:	78fb      	ldrb	r3, [r7, #3]
 8044a32:	687a      	ldr	r2, [r7, #4]
 8044a34:	212c      	movs	r1, #44	; 0x2c
 8044a36:	fb01 f303 	mul.w	r3, r1, r3
 8044a3a:	4413      	add	r3, r2
 8044a3c:	3350      	adds	r3, #80	; 0x50
 8044a3e:	2200      	movs	r2, #0
 8044a40:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8044a42:	78fb      	ldrb	r3, [r7, #3]
 8044a44:	687a      	ldr	r2, [r7, #4]
 8044a46:	212c      	movs	r1, #44	; 0x2c
 8044a48:	fb01 f303 	mul.w	r3, r1, r3
 8044a4c:	4413      	add	r3, r2
 8044a4e:	3339      	adds	r3, #57	; 0x39
 8044a50:	78fa      	ldrb	r2, [r7, #3]
 8044a52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8044a54:	78fb      	ldrb	r3, [r7, #3]
 8044a56:	687a      	ldr	r2, [r7, #4]
 8044a58:	212c      	movs	r1, #44	; 0x2c
 8044a5a:	fb01 f303 	mul.w	r3, r1, r3
 8044a5e:	4413      	add	r3, r2
 8044a60:	3361      	adds	r3, #97	; 0x61
 8044a62:	2200      	movs	r2, #0
 8044a64:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8044a66:	687b      	ldr	r3, [r7, #4]
 8044a68:	6818      	ldr	r0, [r3, #0]
 8044a6a:	78fb      	ldrb	r3, [r7, #3]
 8044a6c:	222c      	movs	r2, #44	; 0x2c
 8044a6e:	fb02 f303 	mul.w	r3, r2, r3
 8044a72:	3338      	adds	r3, #56	; 0x38
 8044a74:	687a      	ldr	r2, [r7, #4]
 8044a76:	18d1      	adds	r1, r2, r3
 8044a78:	687b      	ldr	r3, [r7, #4]
 8044a7a:	691b      	ldr	r3, [r3, #16]
 8044a7c:	b2db      	uxtb	r3, r3
 8044a7e:	461a      	mov	r2, r3
 8044a80:	f005 fb38 	bl	804a0f4 <USB_HC_StartXfer>
 8044a84:	4603      	mov	r3, r0
}
 8044a86:	4618      	mov	r0, r3
 8044a88:	3708      	adds	r7, #8
 8044a8a:	46bd      	mov	sp, r7
 8044a8c:	bd80      	pop	{r7, pc}
 8044a8e:	bf00      	nop

08044a90 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8044a90:	b580      	push	{r7, lr}
 8044a92:	b086      	sub	sp, #24
 8044a94:	af00      	add	r7, sp, #0
 8044a96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044a98:	687b      	ldr	r3, [r7, #4]
 8044a9a:	681b      	ldr	r3, [r3, #0]
 8044a9c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044a9e:	693b      	ldr	r3, [r7, #16]
 8044aa0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8044aa2:	687b      	ldr	r3, [r7, #4]
 8044aa4:	681b      	ldr	r3, [r3, #0]
 8044aa6:	4618      	mov	r0, r3
 8044aa8:	f005 f839 	bl	8049b1e <USB_GetMode>
 8044aac:	4603      	mov	r3, r0
 8044aae:	2b01      	cmp	r3, #1
 8044ab0:	f040 80f6 	bne.w	8044ca0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8044ab4:	687b      	ldr	r3, [r7, #4]
 8044ab6:	681b      	ldr	r3, [r3, #0]
 8044ab8:	4618      	mov	r0, r3
 8044aba:	f005 f81d 	bl	8049af8 <USB_ReadInterrupts>
 8044abe:	4603      	mov	r3, r0
 8044ac0:	2b00      	cmp	r3, #0
 8044ac2:	f000 80ec 	beq.w	8044c9e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8044ac6:	687b      	ldr	r3, [r7, #4]
 8044ac8:	681b      	ldr	r3, [r3, #0]
 8044aca:	4618      	mov	r0, r3
 8044acc:	f005 f814 	bl	8049af8 <USB_ReadInterrupts>
 8044ad0:	4603      	mov	r3, r0
 8044ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044ad6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044ada:	d104      	bne.n	8044ae6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8044adc:	687b      	ldr	r3, [r7, #4]
 8044ade:	681b      	ldr	r3, [r3, #0]
 8044ae0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8044ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8044ae6:	687b      	ldr	r3, [r7, #4]
 8044ae8:	681b      	ldr	r3, [r3, #0]
 8044aea:	4618      	mov	r0, r3
 8044aec:	f005 f804 	bl	8049af8 <USB_ReadInterrupts>
 8044af0:	4603      	mov	r3, r0
 8044af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044afa:	d104      	bne.n	8044b06 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8044afc:	687b      	ldr	r3, [r7, #4]
 8044afe:	681b      	ldr	r3, [r3, #0]
 8044b00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8044b04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8044b06:	687b      	ldr	r3, [r7, #4]
 8044b08:	681b      	ldr	r3, [r3, #0]
 8044b0a:	4618      	mov	r0, r3
 8044b0c:	f004 fff4 	bl	8049af8 <USB_ReadInterrupts>
 8044b10:	4603      	mov	r3, r0
 8044b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8044b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8044b1a:	d104      	bne.n	8044b26 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8044b1c:	687b      	ldr	r3, [r7, #4]
 8044b1e:	681b      	ldr	r3, [r3, #0]
 8044b20:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8044b24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8044b26:	687b      	ldr	r3, [r7, #4]
 8044b28:	681b      	ldr	r3, [r3, #0]
 8044b2a:	4618      	mov	r0, r3
 8044b2c:	f004 ffe4 	bl	8049af8 <USB_ReadInterrupts>
 8044b30:	4603      	mov	r3, r0
 8044b32:	f003 0302 	and.w	r3, r3, #2
 8044b36:	2b02      	cmp	r3, #2
 8044b38:	d103      	bne.n	8044b42 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8044b3a:	687b      	ldr	r3, [r7, #4]
 8044b3c:	681b      	ldr	r3, [r3, #0]
 8044b3e:	2202      	movs	r2, #2
 8044b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8044b42:	687b      	ldr	r3, [r7, #4]
 8044b44:	681b      	ldr	r3, [r3, #0]
 8044b46:	4618      	mov	r0, r3
 8044b48:	f004 ffd6 	bl	8049af8 <USB_ReadInterrupts>
 8044b4c:	4603      	mov	r3, r0
 8044b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8044b56:	d11c      	bne.n	8044b92 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8044b58:	687b      	ldr	r3, [r7, #4]
 8044b5a:	681b      	ldr	r3, [r3, #0]
 8044b5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8044b60:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8044b62:	68fb      	ldr	r3, [r7, #12]
 8044b64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8044b68:	681b      	ldr	r3, [r3, #0]
 8044b6a:	f003 0301 	and.w	r3, r3, #1
 8044b6e:	2b00      	cmp	r3, #0
 8044b70:	d10f      	bne.n	8044b92 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8044b72:	2110      	movs	r1, #16
 8044b74:	6938      	ldr	r0, [r7, #16]
 8044b76:	f004 fec5 	bl	8049904 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8044b7a:	6938      	ldr	r0, [r7, #16]
 8044b7c:	f004 fef6 	bl	804996c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8044b80:	687b      	ldr	r3, [r7, #4]
 8044b82:	681b      	ldr	r3, [r3, #0]
 8044b84:	2101      	movs	r1, #1
 8044b86:	4618      	mov	r0, r3
 8044b88:	f005 f8cc 	bl	8049d24 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8044b8c:	6878      	ldr	r0, [r7, #4]
 8044b8e:	f007 fe95 	bl	804c8bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8044b92:	687b      	ldr	r3, [r7, #4]
 8044b94:	681b      	ldr	r3, [r3, #0]
 8044b96:	4618      	mov	r0, r3
 8044b98:	f004 ffae 	bl	8049af8 <USB_ReadInterrupts>
 8044b9c:	4603      	mov	r3, r0
 8044b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044ba2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8044ba6:	d102      	bne.n	8044bae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8044ba8:	6878      	ldr	r0, [r7, #4]
 8044baa:	f001 f89e 	bl	8045cea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8044bae:	687b      	ldr	r3, [r7, #4]
 8044bb0:	681b      	ldr	r3, [r3, #0]
 8044bb2:	4618      	mov	r0, r3
 8044bb4:	f004 ffa0 	bl	8049af8 <USB_ReadInterrupts>
 8044bb8:	4603      	mov	r3, r0
 8044bba:	f003 0308 	and.w	r3, r3, #8
 8044bbe:	2b08      	cmp	r3, #8
 8044bc0:	d106      	bne.n	8044bd0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8044bc2:	6878      	ldr	r0, [r7, #4]
 8044bc4:	f007 fe5e 	bl	804c884 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8044bc8:	687b      	ldr	r3, [r7, #4]
 8044bca:	681b      	ldr	r3, [r3, #0]
 8044bcc:	2208      	movs	r2, #8
 8044bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8044bd0:	687b      	ldr	r3, [r7, #4]
 8044bd2:	681b      	ldr	r3, [r3, #0]
 8044bd4:	4618      	mov	r0, r3
 8044bd6:	f004 ff8f 	bl	8049af8 <USB_ReadInterrupts>
 8044bda:	4603      	mov	r3, r0
 8044bdc:	f003 0310 	and.w	r3, r3, #16
 8044be0:	2b10      	cmp	r3, #16
 8044be2:	d101      	bne.n	8044be8 <HAL_HCD_IRQHandler+0x158>
 8044be4:	2301      	movs	r3, #1
 8044be6:	e000      	b.n	8044bea <HAL_HCD_IRQHandler+0x15a>
 8044be8:	2300      	movs	r3, #0
 8044bea:	2b00      	cmp	r3, #0
 8044bec:	d012      	beq.n	8044c14 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8044bee:	687b      	ldr	r3, [r7, #4]
 8044bf0:	681b      	ldr	r3, [r3, #0]
 8044bf2:	699a      	ldr	r2, [r3, #24]
 8044bf4:	687b      	ldr	r3, [r7, #4]
 8044bf6:	681b      	ldr	r3, [r3, #0]
 8044bf8:	f022 0210 	bic.w	r2, r2, #16
 8044bfc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8044bfe:	6878      	ldr	r0, [r7, #4]
 8044c00:	f000 ffa1 	bl	8045b46 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8044c04:	687b      	ldr	r3, [r7, #4]
 8044c06:	681b      	ldr	r3, [r3, #0]
 8044c08:	699a      	ldr	r2, [r3, #24]
 8044c0a:	687b      	ldr	r3, [r7, #4]
 8044c0c:	681b      	ldr	r3, [r3, #0]
 8044c0e:	f042 0210 	orr.w	r2, r2, #16
 8044c12:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8044c14:	687b      	ldr	r3, [r7, #4]
 8044c16:	681b      	ldr	r3, [r3, #0]
 8044c18:	4618      	mov	r0, r3
 8044c1a:	f004 ff6d 	bl	8049af8 <USB_ReadInterrupts>
 8044c1e:	4603      	mov	r3, r0
 8044c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044c28:	d13a      	bne.n	8044ca0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8044c2a:	687b      	ldr	r3, [r7, #4]
 8044c2c:	681b      	ldr	r3, [r3, #0]
 8044c2e:	4618      	mov	r0, r3
 8044c30:	f005 fba2 	bl	804a378 <USB_HC_ReadInterrupt>
 8044c34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044c36:	2300      	movs	r3, #0
 8044c38:	617b      	str	r3, [r7, #20]
 8044c3a:	e025      	b.n	8044c88 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8044c3c:	697b      	ldr	r3, [r7, #20]
 8044c3e:	f003 030f 	and.w	r3, r3, #15
 8044c42:	68ba      	ldr	r2, [r7, #8]
 8044c44:	fa22 f303 	lsr.w	r3, r2, r3
 8044c48:	f003 0301 	and.w	r3, r3, #1
 8044c4c:	2b00      	cmp	r3, #0
 8044c4e:	d018      	beq.n	8044c82 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8044c50:	697b      	ldr	r3, [r7, #20]
 8044c52:	015a      	lsls	r2, r3, #5
 8044c54:	68fb      	ldr	r3, [r7, #12]
 8044c56:	4413      	add	r3, r2
 8044c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044c5c:	681b      	ldr	r3, [r3, #0]
 8044c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8044c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044c66:	d106      	bne.n	8044c76 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8044c68:	697b      	ldr	r3, [r7, #20]
 8044c6a:	b2db      	uxtb	r3, r3
 8044c6c:	4619      	mov	r1, r3
 8044c6e:	6878      	ldr	r0, [r7, #4]
 8044c70:	f000 f8ab 	bl	8044dca <HCD_HC_IN_IRQHandler>
 8044c74:	e005      	b.n	8044c82 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8044c76:	697b      	ldr	r3, [r7, #20]
 8044c78:	b2db      	uxtb	r3, r3
 8044c7a:	4619      	mov	r1, r3
 8044c7c:	6878      	ldr	r0, [r7, #4]
 8044c7e:	f000 fbf9 	bl	8045474 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8044c82:	697b      	ldr	r3, [r7, #20]
 8044c84:	3301      	adds	r3, #1
 8044c86:	617b      	str	r3, [r7, #20]
 8044c88:	687b      	ldr	r3, [r7, #4]
 8044c8a:	689b      	ldr	r3, [r3, #8]
 8044c8c:	697a      	ldr	r2, [r7, #20]
 8044c8e:	429a      	cmp	r2, r3
 8044c90:	d3d4      	bcc.n	8044c3c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8044c92:	687b      	ldr	r3, [r7, #4]
 8044c94:	681b      	ldr	r3, [r3, #0]
 8044c96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8044c9a:	615a      	str	r2, [r3, #20]
 8044c9c:	e000      	b.n	8044ca0 <HAL_HCD_IRQHandler+0x210>
      return;
 8044c9e:	bf00      	nop
    }
  }
}
 8044ca0:	3718      	adds	r7, #24
 8044ca2:	46bd      	mov	sp, r7
 8044ca4:	bd80      	pop	{r7, pc}

08044ca6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8044ca6:	b580      	push	{r7, lr}
 8044ca8:	b082      	sub	sp, #8
 8044caa:	af00      	add	r7, sp, #0
 8044cac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044cae:	687b      	ldr	r3, [r7, #4]
 8044cb0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044cb4:	2b01      	cmp	r3, #1
 8044cb6:	d101      	bne.n	8044cbc <HAL_HCD_Start+0x16>
 8044cb8:	2302      	movs	r3, #2
 8044cba:	e013      	b.n	8044ce4 <HAL_HCD_Start+0x3e>
 8044cbc:	687b      	ldr	r3, [r7, #4]
 8044cbe:	2201      	movs	r2, #1
 8044cc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8044cc4:	687b      	ldr	r3, [r7, #4]
 8044cc6:	681b      	ldr	r3, [r3, #0]
 8044cc8:	2101      	movs	r1, #1
 8044cca:	4618      	mov	r0, r3
 8044ccc:	f005 f88e 	bl	8049dec <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8044cd0:	687b      	ldr	r3, [r7, #4]
 8044cd2:	681b      	ldr	r3, [r3, #0]
 8044cd4:	4618      	mov	r0, r3
 8044cd6:	f004 fda6 	bl	8049826 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8044cda:	687b      	ldr	r3, [r7, #4]
 8044cdc:	2200      	movs	r2, #0
 8044cde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044ce2:	2300      	movs	r3, #0
}
 8044ce4:	4618      	mov	r0, r3
 8044ce6:	3708      	adds	r7, #8
 8044ce8:	46bd      	mov	sp, r7
 8044cea:	bd80      	pop	{r7, pc}

08044cec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8044cec:	b580      	push	{r7, lr}
 8044cee:	b082      	sub	sp, #8
 8044cf0:	af00      	add	r7, sp, #0
 8044cf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8044cf4:	687b      	ldr	r3, [r7, #4]
 8044cf6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8044cfa:	2b01      	cmp	r3, #1
 8044cfc:	d101      	bne.n	8044d02 <HAL_HCD_Stop+0x16>
 8044cfe:	2302      	movs	r3, #2
 8044d00:	e00d      	b.n	8044d1e <HAL_HCD_Stop+0x32>
 8044d02:	687b      	ldr	r3, [r7, #4]
 8044d04:	2201      	movs	r2, #1
 8044d06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8044d0a:	687b      	ldr	r3, [r7, #4]
 8044d0c:	681b      	ldr	r3, [r3, #0]
 8044d0e:	4618      	mov	r0, r3
 8044d10:	f005 fc7c 	bl	804a60c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8044d14:	687b      	ldr	r3, [r7, #4]
 8044d16:	2200      	movs	r2, #0
 8044d18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8044d1c:	2300      	movs	r3, #0
}
 8044d1e:	4618      	mov	r0, r3
 8044d20:	3708      	adds	r7, #8
 8044d22:	46bd      	mov	sp, r7
 8044d24:	bd80      	pop	{r7, pc}

08044d26 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8044d26:	b580      	push	{r7, lr}
 8044d28:	b082      	sub	sp, #8
 8044d2a:	af00      	add	r7, sp, #0
 8044d2c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8044d2e:	687b      	ldr	r3, [r7, #4]
 8044d30:	681b      	ldr	r3, [r3, #0]
 8044d32:	4618      	mov	r0, r3
 8044d34:	f005 f830 	bl	8049d98 <USB_ResetPort>
 8044d38:	4603      	mov	r3, r0
}
 8044d3a:	4618      	mov	r0, r3
 8044d3c:	3708      	adds	r7, #8
 8044d3e:	46bd      	mov	sp, r7
 8044d40:	bd80      	pop	{r7, pc}

08044d42 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044d42:	b480      	push	{r7}
 8044d44:	b083      	sub	sp, #12
 8044d46:	af00      	add	r7, sp, #0
 8044d48:	6078      	str	r0, [r7, #4]
 8044d4a:	460b      	mov	r3, r1
 8044d4c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8044d4e:	78fb      	ldrb	r3, [r7, #3]
 8044d50:	687a      	ldr	r2, [r7, #4]
 8044d52:	212c      	movs	r1, #44	; 0x2c
 8044d54:	fb01 f303 	mul.w	r3, r1, r3
 8044d58:	4413      	add	r3, r2
 8044d5a:	3360      	adds	r3, #96	; 0x60
 8044d5c:	781b      	ldrb	r3, [r3, #0]
}
 8044d5e:	4618      	mov	r0, r3
 8044d60:	370c      	adds	r7, #12
 8044d62:	46bd      	mov	sp, r7
 8044d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d68:	4770      	bx	lr

08044d6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044d6a:	b480      	push	{r7}
 8044d6c:	b083      	sub	sp, #12
 8044d6e:	af00      	add	r7, sp, #0
 8044d70:	6078      	str	r0, [r7, #4]
 8044d72:	460b      	mov	r3, r1
 8044d74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8044d76:	78fb      	ldrb	r3, [r7, #3]
 8044d78:	687a      	ldr	r2, [r7, #4]
 8044d7a:	212c      	movs	r1, #44	; 0x2c
 8044d7c:	fb01 f303 	mul.w	r3, r1, r3
 8044d80:	4413      	add	r3, r2
 8044d82:	3350      	adds	r3, #80	; 0x50
 8044d84:	681b      	ldr	r3, [r3, #0]
}
 8044d86:	4618      	mov	r0, r3
 8044d88:	370c      	adds	r7, #12
 8044d8a:	46bd      	mov	sp, r7
 8044d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d90:	4770      	bx	lr

08044d92 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8044d92:	b580      	push	{r7, lr}
 8044d94:	b082      	sub	sp, #8
 8044d96:	af00      	add	r7, sp, #0
 8044d98:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8044d9a:	687b      	ldr	r3, [r7, #4]
 8044d9c:	681b      	ldr	r3, [r3, #0]
 8044d9e:	4618      	mov	r0, r3
 8044da0:	f005 f874 	bl	8049e8c <USB_GetCurrentFrame>
 8044da4:	4603      	mov	r3, r0
}
 8044da6:	4618      	mov	r0, r3
 8044da8:	3708      	adds	r7, #8
 8044daa:	46bd      	mov	sp, r7
 8044dac:	bd80      	pop	{r7, pc}

08044dae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8044dae:	b580      	push	{r7, lr}
 8044db0:	b082      	sub	sp, #8
 8044db2:	af00      	add	r7, sp, #0
 8044db4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8044db6:	687b      	ldr	r3, [r7, #4]
 8044db8:	681b      	ldr	r3, [r3, #0]
 8044dba:	4618      	mov	r0, r3
 8044dbc:	f005 f84f 	bl	8049e5e <USB_GetHostSpeed>
 8044dc0:	4603      	mov	r3, r0
}
 8044dc2:	4618      	mov	r0, r3
 8044dc4:	3708      	adds	r7, #8
 8044dc6:	46bd      	mov	sp, r7
 8044dc8:	bd80      	pop	{r7, pc}

08044dca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8044dca:	b580      	push	{r7, lr}
 8044dcc:	b086      	sub	sp, #24
 8044dce:	af00      	add	r7, sp, #0
 8044dd0:	6078      	str	r0, [r7, #4]
 8044dd2:	460b      	mov	r3, r1
 8044dd4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8044dd6:	687b      	ldr	r3, [r7, #4]
 8044dd8:	681b      	ldr	r3, [r3, #0]
 8044dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8044ddc:	697b      	ldr	r3, [r7, #20]
 8044dde:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8044de0:	78fb      	ldrb	r3, [r7, #3]
 8044de2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8044de4:	68fb      	ldr	r3, [r7, #12]
 8044de6:	015a      	lsls	r2, r3, #5
 8044de8:	693b      	ldr	r3, [r7, #16]
 8044dea:	4413      	add	r3, r2
 8044dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044df0:	689b      	ldr	r3, [r3, #8]
 8044df2:	f003 0304 	and.w	r3, r3, #4
 8044df6:	2b04      	cmp	r3, #4
 8044df8:	d11a      	bne.n	8044e30 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8044dfa:	68fb      	ldr	r3, [r7, #12]
 8044dfc:	015a      	lsls	r2, r3, #5
 8044dfe:	693b      	ldr	r3, [r7, #16]
 8044e00:	4413      	add	r3, r2
 8044e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e06:	461a      	mov	r2, r3
 8044e08:	2304      	movs	r3, #4
 8044e0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044e0c:	687a      	ldr	r2, [r7, #4]
 8044e0e:	68fb      	ldr	r3, [r7, #12]
 8044e10:	212c      	movs	r1, #44	; 0x2c
 8044e12:	fb01 f303 	mul.w	r3, r1, r3
 8044e16:	4413      	add	r3, r2
 8044e18:	3361      	adds	r3, #97	; 0x61
 8044e1a:	2206      	movs	r2, #6
 8044e1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044e1e:	687b      	ldr	r3, [r7, #4]
 8044e20:	681b      	ldr	r3, [r3, #0]
 8044e22:	68fa      	ldr	r2, [r7, #12]
 8044e24:	b2d2      	uxtb	r2, r2
 8044e26:	4611      	mov	r1, r2
 8044e28:	4618      	mov	r0, r3
 8044e2a:	f005 fab6 	bl	804a39a <USB_HC_Halt>
 8044e2e:	e0af      	b.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8044e30:	68fb      	ldr	r3, [r7, #12]
 8044e32:	015a      	lsls	r2, r3, #5
 8044e34:	693b      	ldr	r3, [r7, #16]
 8044e36:	4413      	add	r3, r2
 8044e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e3c:	689b      	ldr	r3, [r3, #8]
 8044e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044e46:	d11b      	bne.n	8044e80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8044e48:	68fb      	ldr	r3, [r7, #12]
 8044e4a:	015a      	lsls	r2, r3, #5
 8044e4c:	693b      	ldr	r3, [r7, #16]
 8044e4e:	4413      	add	r3, r2
 8044e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e54:	461a      	mov	r2, r3
 8044e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044e5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8044e5c:	687a      	ldr	r2, [r7, #4]
 8044e5e:	68fb      	ldr	r3, [r7, #12]
 8044e60:	212c      	movs	r1, #44	; 0x2c
 8044e62:	fb01 f303 	mul.w	r3, r1, r3
 8044e66:	4413      	add	r3, r2
 8044e68:	3361      	adds	r3, #97	; 0x61
 8044e6a:	2207      	movs	r2, #7
 8044e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044e6e:	687b      	ldr	r3, [r7, #4]
 8044e70:	681b      	ldr	r3, [r3, #0]
 8044e72:	68fa      	ldr	r2, [r7, #12]
 8044e74:	b2d2      	uxtb	r2, r2
 8044e76:	4611      	mov	r1, r2
 8044e78:	4618      	mov	r0, r3
 8044e7a:	f005 fa8e 	bl	804a39a <USB_HC_Halt>
 8044e7e:	e087      	b.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8044e80:	68fb      	ldr	r3, [r7, #12]
 8044e82:	015a      	lsls	r2, r3, #5
 8044e84:	693b      	ldr	r3, [r7, #16]
 8044e86:	4413      	add	r3, r2
 8044e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044e8c:	689b      	ldr	r3, [r3, #8]
 8044e8e:	f003 0320 	and.w	r3, r3, #32
 8044e92:	2b20      	cmp	r3, #32
 8044e94:	d109      	bne.n	8044eaa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8044e96:	68fb      	ldr	r3, [r7, #12]
 8044e98:	015a      	lsls	r2, r3, #5
 8044e9a:	693b      	ldr	r3, [r7, #16]
 8044e9c:	4413      	add	r3, r2
 8044e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ea2:	461a      	mov	r2, r3
 8044ea4:	2320      	movs	r3, #32
 8044ea6:	6093      	str	r3, [r2, #8]
 8044ea8:	e072      	b.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8044eaa:	68fb      	ldr	r3, [r7, #12]
 8044eac:	015a      	lsls	r2, r3, #5
 8044eae:	693b      	ldr	r3, [r7, #16]
 8044eb0:	4413      	add	r3, r2
 8044eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044eb6:	689b      	ldr	r3, [r3, #8]
 8044eb8:	f003 0308 	and.w	r3, r3, #8
 8044ebc:	2b08      	cmp	r3, #8
 8044ebe:	d11a      	bne.n	8044ef6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8044ec0:	68fb      	ldr	r3, [r7, #12]
 8044ec2:	015a      	lsls	r2, r3, #5
 8044ec4:	693b      	ldr	r3, [r7, #16]
 8044ec6:	4413      	add	r3, r2
 8044ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044ecc:	461a      	mov	r2, r3
 8044ece:	2308      	movs	r3, #8
 8044ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8044ed2:	687a      	ldr	r2, [r7, #4]
 8044ed4:	68fb      	ldr	r3, [r7, #12]
 8044ed6:	212c      	movs	r1, #44	; 0x2c
 8044ed8:	fb01 f303 	mul.w	r3, r1, r3
 8044edc:	4413      	add	r3, r2
 8044ede:	3361      	adds	r3, #97	; 0x61
 8044ee0:	2205      	movs	r2, #5
 8044ee2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044ee4:	687b      	ldr	r3, [r7, #4]
 8044ee6:	681b      	ldr	r3, [r3, #0]
 8044ee8:	68fa      	ldr	r2, [r7, #12]
 8044eea:	b2d2      	uxtb	r2, r2
 8044eec:	4611      	mov	r1, r2
 8044eee:	4618      	mov	r0, r3
 8044ef0:	f005 fa53 	bl	804a39a <USB_HC_Halt>
 8044ef4:	e04c      	b.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8044ef6:	68fb      	ldr	r3, [r7, #12]
 8044ef8:	015a      	lsls	r2, r3, #5
 8044efa:	693b      	ldr	r3, [r7, #16]
 8044efc:	4413      	add	r3, r2
 8044efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f02:	689b      	ldr	r3, [r3, #8]
 8044f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044f0c:	d11b      	bne.n	8044f46 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8044f0e:	68fb      	ldr	r3, [r7, #12]
 8044f10:	015a      	lsls	r2, r3, #5
 8044f12:	693b      	ldr	r3, [r7, #16]
 8044f14:	4413      	add	r3, r2
 8044f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f1a:	461a      	mov	r2, r3
 8044f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8044f20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8044f22:	687a      	ldr	r2, [r7, #4]
 8044f24:	68fb      	ldr	r3, [r7, #12]
 8044f26:	212c      	movs	r1, #44	; 0x2c
 8044f28:	fb01 f303 	mul.w	r3, r1, r3
 8044f2c:	4413      	add	r3, r2
 8044f2e:	3361      	adds	r3, #97	; 0x61
 8044f30:	2208      	movs	r2, #8
 8044f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f34:	687b      	ldr	r3, [r7, #4]
 8044f36:	681b      	ldr	r3, [r3, #0]
 8044f38:	68fa      	ldr	r2, [r7, #12]
 8044f3a:	b2d2      	uxtb	r2, r2
 8044f3c:	4611      	mov	r1, r2
 8044f3e:	4618      	mov	r0, r3
 8044f40:	f005 fa2b 	bl	804a39a <USB_HC_Halt>
 8044f44:	e024      	b.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8044f46:	68fb      	ldr	r3, [r7, #12]
 8044f48:	015a      	lsls	r2, r3, #5
 8044f4a:	693b      	ldr	r3, [r7, #16]
 8044f4c:	4413      	add	r3, r2
 8044f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f52:	689b      	ldr	r3, [r3, #8]
 8044f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044f58:	2b80      	cmp	r3, #128	; 0x80
 8044f5a:	d119      	bne.n	8044f90 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8044f5c:	68fb      	ldr	r3, [r7, #12]
 8044f5e:	015a      	lsls	r2, r3, #5
 8044f60:	693b      	ldr	r3, [r7, #16]
 8044f62:	4413      	add	r3, r2
 8044f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f68:	461a      	mov	r2, r3
 8044f6a:	2380      	movs	r3, #128	; 0x80
 8044f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8044f6e:	687a      	ldr	r2, [r7, #4]
 8044f70:	68fb      	ldr	r3, [r7, #12]
 8044f72:	212c      	movs	r1, #44	; 0x2c
 8044f74:	fb01 f303 	mul.w	r3, r1, r3
 8044f78:	4413      	add	r3, r2
 8044f7a:	3361      	adds	r3, #97	; 0x61
 8044f7c:	2206      	movs	r2, #6
 8044f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044f80:	687b      	ldr	r3, [r7, #4]
 8044f82:	681b      	ldr	r3, [r3, #0]
 8044f84:	68fa      	ldr	r2, [r7, #12]
 8044f86:	b2d2      	uxtb	r2, r2
 8044f88:	4611      	mov	r1, r2
 8044f8a:	4618      	mov	r0, r3
 8044f8c:	f005 fa05 	bl	804a39a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8044f90:	68fb      	ldr	r3, [r7, #12]
 8044f92:	015a      	lsls	r2, r3, #5
 8044f94:	693b      	ldr	r3, [r7, #16]
 8044f96:	4413      	add	r3, r2
 8044f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044f9c:	689b      	ldr	r3, [r3, #8]
 8044f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8044fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044fa6:	d112      	bne.n	8044fce <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8044fa8:	687b      	ldr	r3, [r7, #4]
 8044faa:	681b      	ldr	r3, [r3, #0]
 8044fac:	68fa      	ldr	r2, [r7, #12]
 8044fae:	b2d2      	uxtb	r2, r2
 8044fb0:	4611      	mov	r1, r2
 8044fb2:	4618      	mov	r0, r3
 8044fb4:	f005 f9f1 	bl	804a39a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8044fb8:	68fb      	ldr	r3, [r7, #12]
 8044fba:	015a      	lsls	r2, r3, #5
 8044fbc:	693b      	ldr	r3, [r7, #16]
 8044fbe:	4413      	add	r3, r2
 8044fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fc4:	461a      	mov	r2, r3
 8044fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8044fca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8044fcc:	e24e      	b.n	804546c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8044fce:	68fb      	ldr	r3, [r7, #12]
 8044fd0:	015a      	lsls	r2, r3, #5
 8044fd2:	693b      	ldr	r3, [r7, #16]
 8044fd4:	4413      	add	r3, r2
 8044fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8044fda:	689b      	ldr	r3, [r3, #8]
 8044fdc:	f003 0301 	and.w	r3, r3, #1
 8044fe0:	2b01      	cmp	r3, #1
 8044fe2:	f040 80df 	bne.w	80451a4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8044fe6:	687b      	ldr	r3, [r7, #4]
 8044fe8:	691b      	ldr	r3, [r3, #16]
 8044fea:	2b00      	cmp	r3, #0
 8044fec:	d019      	beq.n	8045022 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8044fee:	687a      	ldr	r2, [r7, #4]
 8044ff0:	68fb      	ldr	r3, [r7, #12]
 8044ff2:	212c      	movs	r1, #44	; 0x2c
 8044ff4:	fb01 f303 	mul.w	r3, r1, r3
 8044ff8:	4413      	add	r3, r2
 8044ffa:	3348      	adds	r3, #72	; 0x48
 8044ffc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8044ffe:	68fb      	ldr	r3, [r7, #12]
 8045000:	0159      	lsls	r1, r3, #5
 8045002:	693b      	ldr	r3, [r7, #16]
 8045004:	440b      	add	r3, r1
 8045006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804500a:	691b      	ldr	r3, [r3, #16]
 804500c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8045010:	1ad2      	subs	r2, r2, r3
 8045012:	6879      	ldr	r1, [r7, #4]
 8045014:	68fb      	ldr	r3, [r7, #12]
 8045016:	202c      	movs	r0, #44	; 0x2c
 8045018:	fb00 f303 	mul.w	r3, r0, r3
 804501c:	440b      	add	r3, r1
 804501e:	3350      	adds	r3, #80	; 0x50
 8045020:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8045022:	687a      	ldr	r2, [r7, #4]
 8045024:	68fb      	ldr	r3, [r7, #12]
 8045026:	212c      	movs	r1, #44	; 0x2c
 8045028:	fb01 f303 	mul.w	r3, r1, r3
 804502c:	4413      	add	r3, r2
 804502e:	3361      	adds	r3, #97	; 0x61
 8045030:	2201      	movs	r2, #1
 8045032:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8045034:	687a      	ldr	r2, [r7, #4]
 8045036:	68fb      	ldr	r3, [r7, #12]
 8045038:	212c      	movs	r1, #44	; 0x2c
 804503a:	fb01 f303 	mul.w	r3, r1, r3
 804503e:	4413      	add	r3, r2
 8045040:	335c      	adds	r3, #92	; 0x5c
 8045042:	2200      	movs	r2, #0
 8045044:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8045046:	68fb      	ldr	r3, [r7, #12]
 8045048:	015a      	lsls	r2, r3, #5
 804504a:	693b      	ldr	r3, [r7, #16]
 804504c:	4413      	add	r3, r2
 804504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045052:	461a      	mov	r2, r3
 8045054:	2301      	movs	r3, #1
 8045056:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8045058:	687a      	ldr	r2, [r7, #4]
 804505a:	68fb      	ldr	r3, [r7, #12]
 804505c:	212c      	movs	r1, #44	; 0x2c
 804505e:	fb01 f303 	mul.w	r3, r1, r3
 8045062:	4413      	add	r3, r2
 8045064:	333f      	adds	r3, #63	; 0x3f
 8045066:	781b      	ldrb	r3, [r3, #0]
 8045068:	2b00      	cmp	r3, #0
 804506a:	d009      	beq.n	8045080 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 804506c:	687a      	ldr	r2, [r7, #4]
 804506e:	68fb      	ldr	r3, [r7, #12]
 8045070:	212c      	movs	r1, #44	; 0x2c
 8045072:	fb01 f303 	mul.w	r3, r1, r3
 8045076:	4413      	add	r3, r2
 8045078:	333f      	adds	r3, #63	; 0x3f
 804507a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 804507c:	2b02      	cmp	r3, #2
 804507e:	d111      	bne.n	80450a4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045080:	687b      	ldr	r3, [r7, #4]
 8045082:	681b      	ldr	r3, [r3, #0]
 8045084:	68fa      	ldr	r2, [r7, #12]
 8045086:	b2d2      	uxtb	r2, r2
 8045088:	4611      	mov	r1, r2
 804508a:	4618      	mov	r0, r3
 804508c:	f005 f985 	bl	804a39a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045090:	68fb      	ldr	r3, [r7, #12]
 8045092:	015a      	lsls	r2, r3, #5
 8045094:	693b      	ldr	r3, [r7, #16]
 8045096:	4413      	add	r3, r2
 8045098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804509c:	461a      	mov	r2, r3
 804509e:	2310      	movs	r3, #16
 80450a0:	6093      	str	r3, [r2, #8]
 80450a2:	e03a      	b.n	804511a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80450a4:	687a      	ldr	r2, [r7, #4]
 80450a6:	68fb      	ldr	r3, [r7, #12]
 80450a8:	212c      	movs	r1, #44	; 0x2c
 80450aa:	fb01 f303 	mul.w	r3, r1, r3
 80450ae:	4413      	add	r3, r2
 80450b0:	333f      	adds	r3, #63	; 0x3f
 80450b2:	781b      	ldrb	r3, [r3, #0]
 80450b4:	2b03      	cmp	r3, #3
 80450b6:	d009      	beq.n	80450cc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80450b8:	687a      	ldr	r2, [r7, #4]
 80450ba:	68fb      	ldr	r3, [r7, #12]
 80450bc:	212c      	movs	r1, #44	; 0x2c
 80450be:	fb01 f303 	mul.w	r3, r1, r3
 80450c2:	4413      	add	r3, r2
 80450c4:	333f      	adds	r3, #63	; 0x3f
 80450c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80450c8:	2b01      	cmp	r3, #1
 80450ca:	d126      	bne.n	804511a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80450cc:	68fb      	ldr	r3, [r7, #12]
 80450ce:	015a      	lsls	r2, r3, #5
 80450d0:	693b      	ldr	r3, [r7, #16]
 80450d2:	4413      	add	r3, r2
 80450d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80450d8:	681b      	ldr	r3, [r3, #0]
 80450da:	68fa      	ldr	r2, [r7, #12]
 80450dc:	0151      	lsls	r1, r2, #5
 80450de:	693a      	ldr	r2, [r7, #16]
 80450e0:	440a      	add	r2, r1
 80450e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80450e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80450ea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80450ec:	687a      	ldr	r2, [r7, #4]
 80450ee:	68fb      	ldr	r3, [r7, #12]
 80450f0:	212c      	movs	r1, #44	; 0x2c
 80450f2:	fb01 f303 	mul.w	r3, r1, r3
 80450f6:	4413      	add	r3, r2
 80450f8:	3360      	adds	r3, #96	; 0x60
 80450fa:	2201      	movs	r2, #1
 80450fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80450fe:	68fb      	ldr	r3, [r7, #12]
 8045100:	b2d9      	uxtb	r1, r3
 8045102:	687a      	ldr	r2, [r7, #4]
 8045104:	68fb      	ldr	r3, [r7, #12]
 8045106:	202c      	movs	r0, #44	; 0x2c
 8045108:	fb00 f303 	mul.w	r3, r0, r3
 804510c:	4413      	add	r3, r2
 804510e:	3360      	adds	r3, #96	; 0x60
 8045110:	781b      	ldrb	r3, [r3, #0]
 8045112:	461a      	mov	r2, r3
 8045114:	6878      	ldr	r0, [r7, #4]
 8045116:	f007 fbdf 	bl	804c8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 804511a:	687b      	ldr	r3, [r7, #4]
 804511c:	691b      	ldr	r3, [r3, #16]
 804511e:	2b01      	cmp	r3, #1
 8045120:	d12b      	bne.n	804517a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8045122:	687a      	ldr	r2, [r7, #4]
 8045124:	68fb      	ldr	r3, [r7, #12]
 8045126:	212c      	movs	r1, #44	; 0x2c
 8045128:	fb01 f303 	mul.w	r3, r1, r3
 804512c:	4413      	add	r3, r2
 804512e:	3348      	adds	r3, #72	; 0x48
 8045130:	681b      	ldr	r3, [r3, #0]
 8045132:	6879      	ldr	r1, [r7, #4]
 8045134:	68fa      	ldr	r2, [r7, #12]
 8045136:	202c      	movs	r0, #44	; 0x2c
 8045138:	fb00 f202 	mul.w	r2, r0, r2
 804513c:	440a      	add	r2, r1
 804513e:	3240      	adds	r2, #64	; 0x40
 8045140:	8812      	ldrh	r2, [r2, #0]
 8045142:	fbb3 f3f2 	udiv	r3, r3, r2
 8045146:	f003 0301 	and.w	r3, r3, #1
 804514a:	2b00      	cmp	r3, #0
 804514c:	f000 818e 	beq.w	804546c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8045150:	687a      	ldr	r2, [r7, #4]
 8045152:	68fb      	ldr	r3, [r7, #12]
 8045154:	212c      	movs	r1, #44	; 0x2c
 8045156:	fb01 f303 	mul.w	r3, r1, r3
 804515a:	4413      	add	r3, r2
 804515c:	3354      	adds	r3, #84	; 0x54
 804515e:	781b      	ldrb	r3, [r3, #0]
 8045160:	f083 0301 	eor.w	r3, r3, #1
 8045164:	b2d8      	uxtb	r0, r3
 8045166:	687a      	ldr	r2, [r7, #4]
 8045168:	68fb      	ldr	r3, [r7, #12]
 804516a:	212c      	movs	r1, #44	; 0x2c
 804516c:	fb01 f303 	mul.w	r3, r1, r3
 8045170:	4413      	add	r3, r2
 8045172:	3354      	adds	r3, #84	; 0x54
 8045174:	4602      	mov	r2, r0
 8045176:	701a      	strb	r2, [r3, #0]
}
 8045178:	e178      	b.n	804546c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 804517a:	687a      	ldr	r2, [r7, #4]
 804517c:	68fb      	ldr	r3, [r7, #12]
 804517e:	212c      	movs	r1, #44	; 0x2c
 8045180:	fb01 f303 	mul.w	r3, r1, r3
 8045184:	4413      	add	r3, r2
 8045186:	3354      	adds	r3, #84	; 0x54
 8045188:	781b      	ldrb	r3, [r3, #0]
 804518a:	f083 0301 	eor.w	r3, r3, #1
 804518e:	b2d8      	uxtb	r0, r3
 8045190:	687a      	ldr	r2, [r7, #4]
 8045192:	68fb      	ldr	r3, [r7, #12]
 8045194:	212c      	movs	r1, #44	; 0x2c
 8045196:	fb01 f303 	mul.w	r3, r1, r3
 804519a:	4413      	add	r3, r2
 804519c:	3354      	adds	r3, #84	; 0x54
 804519e:	4602      	mov	r2, r0
 80451a0:	701a      	strb	r2, [r3, #0]
}
 80451a2:	e163      	b.n	804546c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80451a4:	68fb      	ldr	r3, [r7, #12]
 80451a6:	015a      	lsls	r2, r3, #5
 80451a8:	693b      	ldr	r3, [r7, #16]
 80451aa:	4413      	add	r3, r2
 80451ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80451b0:	689b      	ldr	r3, [r3, #8]
 80451b2:	f003 0302 	and.w	r3, r3, #2
 80451b6:	2b02      	cmp	r3, #2
 80451b8:	f040 80f6 	bne.w	80453a8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80451bc:	687a      	ldr	r2, [r7, #4]
 80451be:	68fb      	ldr	r3, [r7, #12]
 80451c0:	212c      	movs	r1, #44	; 0x2c
 80451c2:	fb01 f303 	mul.w	r3, r1, r3
 80451c6:	4413      	add	r3, r2
 80451c8:	3361      	adds	r3, #97	; 0x61
 80451ca:	781b      	ldrb	r3, [r3, #0]
 80451cc:	2b01      	cmp	r3, #1
 80451ce:	d109      	bne.n	80451e4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80451d0:	687a      	ldr	r2, [r7, #4]
 80451d2:	68fb      	ldr	r3, [r7, #12]
 80451d4:	212c      	movs	r1, #44	; 0x2c
 80451d6:	fb01 f303 	mul.w	r3, r1, r3
 80451da:	4413      	add	r3, r2
 80451dc:	3360      	adds	r3, #96	; 0x60
 80451de:	2201      	movs	r2, #1
 80451e0:	701a      	strb	r2, [r3, #0]
 80451e2:	e0c9      	b.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80451e4:	687a      	ldr	r2, [r7, #4]
 80451e6:	68fb      	ldr	r3, [r7, #12]
 80451e8:	212c      	movs	r1, #44	; 0x2c
 80451ea:	fb01 f303 	mul.w	r3, r1, r3
 80451ee:	4413      	add	r3, r2
 80451f0:	3361      	adds	r3, #97	; 0x61
 80451f2:	781b      	ldrb	r3, [r3, #0]
 80451f4:	2b05      	cmp	r3, #5
 80451f6:	d109      	bne.n	804520c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80451f8:	687a      	ldr	r2, [r7, #4]
 80451fa:	68fb      	ldr	r3, [r7, #12]
 80451fc:	212c      	movs	r1, #44	; 0x2c
 80451fe:	fb01 f303 	mul.w	r3, r1, r3
 8045202:	4413      	add	r3, r2
 8045204:	3360      	adds	r3, #96	; 0x60
 8045206:	2205      	movs	r2, #5
 8045208:	701a      	strb	r2, [r3, #0]
 804520a:	e0b5      	b.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 804520c:	687a      	ldr	r2, [r7, #4]
 804520e:	68fb      	ldr	r3, [r7, #12]
 8045210:	212c      	movs	r1, #44	; 0x2c
 8045212:	fb01 f303 	mul.w	r3, r1, r3
 8045216:	4413      	add	r3, r2
 8045218:	3361      	adds	r3, #97	; 0x61
 804521a:	781b      	ldrb	r3, [r3, #0]
 804521c:	2b06      	cmp	r3, #6
 804521e:	d009      	beq.n	8045234 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045220:	687a      	ldr	r2, [r7, #4]
 8045222:	68fb      	ldr	r3, [r7, #12]
 8045224:	212c      	movs	r1, #44	; 0x2c
 8045226:	fb01 f303 	mul.w	r3, r1, r3
 804522a:	4413      	add	r3, r2
 804522c:	3361      	adds	r3, #97	; 0x61
 804522e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045230:	2b08      	cmp	r3, #8
 8045232:	d150      	bne.n	80452d6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8045234:	687a      	ldr	r2, [r7, #4]
 8045236:	68fb      	ldr	r3, [r7, #12]
 8045238:	212c      	movs	r1, #44	; 0x2c
 804523a:	fb01 f303 	mul.w	r3, r1, r3
 804523e:	4413      	add	r3, r2
 8045240:	335c      	adds	r3, #92	; 0x5c
 8045242:	681b      	ldr	r3, [r3, #0]
 8045244:	1c5a      	adds	r2, r3, #1
 8045246:	6879      	ldr	r1, [r7, #4]
 8045248:	68fb      	ldr	r3, [r7, #12]
 804524a:	202c      	movs	r0, #44	; 0x2c
 804524c:	fb00 f303 	mul.w	r3, r0, r3
 8045250:	440b      	add	r3, r1
 8045252:	335c      	adds	r3, #92	; 0x5c
 8045254:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045256:	687a      	ldr	r2, [r7, #4]
 8045258:	68fb      	ldr	r3, [r7, #12]
 804525a:	212c      	movs	r1, #44	; 0x2c
 804525c:	fb01 f303 	mul.w	r3, r1, r3
 8045260:	4413      	add	r3, r2
 8045262:	335c      	adds	r3, #92	; 0x5c
 8045264:	681b      	ldr	r3, [r3, #0]
 8045266:	2b02      	cmp	r3, #2
 8045268:	d912      	bls.n	8045290 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 804526a:	687a      	ldr	r2, [r7, #4]
 804526c:	68fb      	ldr	r3, [r7, #12]
 804526e:	212c      	movs	r1, #44	; 0x2c
 8045270:	fb01 f303 	mul.w	r3, r1, r3
 8045274:	4413      	add	r3, r2
 8045276:	335c      	adds	r3, #92	; 0x5c
 8045278:	2200      	movs	r2, #0
 804527a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 804527c:	687a      	ldr	r2, [r7, #4]
 804527e:	68fb      	ldr	r3, [r7, #12]
 8045280:	212c      	movs	r1, #44	; 0x2c
 8045282:	fb01 f303 	mul.w	r3, r1, r3
 8045286:	4413      	add	r3, r2
 8045288:	3360      	adds	r3, #96	; 0x60
 804528a:	2204      	movs	r2, #4
 804528c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 804528e:	e073      	b.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045290:	687a      	ldr	r2, [r7, #4]
 8045292:	68fb      	ldr	r3, [r7, #12]
 8045294:	212c      	movs	r1, #44	; 0x2c
 8045296:	fb01 f303 	mul.w	r3, r1, r3
 804529a:	4413      	add	r3, r2
 804529c:	3360      	adds	r3, #96	; 0x60
 804529e:	2202      	movs	r2, #2
 80452a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80452a2:	68fb      	ldr	r3, [r7, #12]
 80452a4:	015a      	lsls	r2, r3, #5
 80452a6:	693b      	ldr	r3, [r7, #16]
 80452a8:	4413      	add	r3, r2
 80452aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80452ae:	681b      	ldr	r3, [r3, #0]
 80452b0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80452b2:	68bb      	ldr	r3, [r7, #8]
 80452b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80452b8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80452ba:	68bb      	ldr	r3, [r7, #8]
 80452bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80452c0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80452c2:	68fb      	ldr	r3, [r7, #12]
 80452c4:	015a      	lsls	r2, r3, #5
 80452c6:	693b      	ldr	r3, [r7, #16]
 80452c8:	4413      	add	r3, r2
 80452ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80452ce:	461a      	mov	r2, r3
 80452d0:	68bb      	ldr	r3, [r7, #8]
 80452d2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80452d4:	e050      	b.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80452d6:	687a      	ldr	r2, [r7, #4]
 80452d8:	68fb      	ldr	r3, [r7, #12]
 80452da:	212c      	movs	r1, #44	; 0x2c
 80452dc:	fb01 f303 	mul.w	r3, r1, r3
 80452e0:	4413      	add	r3, r2
 80452e2:	3361      	adds	r3, #97	; 0x61
 80452e4:	781b      	ldrb	r3, [r3, #0]
 80452e6:	2b03      	cmp	r3, #3
 80452e8:	d122      	bne.n	8045330 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80452ea:	687a      	ldr	r2, [r7, #4]
 80452ec:	68fb      	ldr	r3, [r7, #12]
 80452ee:	212c      	movs	r1, #44	; 0x2c
 80452f0:	fb01 f303 	mul.w	r3, r1, r3
 80452f4:	4413      	add	r3, r2
 80452f6:	3360      	adds	r3, #96	; 0x60
 80452f8:	2202      	movs	r2, #2
 80452fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80452fc:	68fb      	ldr	r3, [r7, #12]
 80452fe:	015a      	lsls	r2, r3, #5
 8045300:	693b      	ldr	r3, [r7, #16]
 8045302:	4413      	add	r3, r2
 8045304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045308:	681b      	ldr	r3, [r3, #0]
 804530a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804530c:	68bb      	ldr	r3, [r7, #8]
 804530e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045312:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045314:	68bb      	ldr	r3, [r7, #8]
 8045316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804531a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 804531c:	68fb      	ldr	r3, [r7, #12]
 804531e:	015a      	lsls	r2, r3, #5
 8045320:	693b      	ldr	r3, [r7, #16]
 8045322:	4413      	add	r3, r2
 8045324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045328:	461a      	mov	r2, r3
 804532a:	68bb      	ldr	r3, [r7, #8]
 804532c:	6013      	str	r3, [r2, #0]
 804532e:	e023      	b.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8045330:	687a      	ldr	r2, [r7, #4]
 8045332:	68fb      	ldr	r3, [r7, #12]
 8045334:	212c      	movs	r1, #44	; 0x2c
 8045336:	fb01 f303 	mul.w	r3, r1, r3
 804533a:	4413      	add	r3, r2
 804533c:	3361      	adds	r3, #97	; 0x61
 804533e:	781b      	ldrb	r3, [r3, #0]
 8045340:	2b07      	cmp	r3, #7
 8045342:	d119      	bne.n	8045378 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8045344:	687a      	ldr	r2, [r7, #4]
 8045346:	68fb      	ldr	r3, [r7, #12]
 8045348:	212c      	movs	r1, #44	; 0x2c
 804534a:	fb01 f303 	mul.w	r3, r1, r3
 804534e:	4413      	add	r3, r2
 8045350:	335c      	adds	r3, #92	; 0x5c
 8045352:	681b      	ldr	r3, [r3, #0]
 8045354:	1c5a      	adds	r2, r3, #1
 8045356:	6879      	ldr	r1, [r7, #4]
 8045358:	68fb      	ldr	r3, [r7, #12]
 804535a:	202c      	movs	r0, #44	; 0x2c
 804535c:	fb00 f303 	mul.w	r3, r0, r3
 8045360:	440b      	add	r3, r1
 8045362:	335c      	adds	r3, #92	; 0x5c
 8045364:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045366:	687a      	ldr	r2, [r7, #4]
 8045368:	68fb      	ldr	r3, [r7, #12]
 804536a:	212c      	movs	r1, #44	; 0x2c
 804536c:	fb01 f303 	mul.w	r3, r1, r3
 8045370:	4413      	add	r3, r2
 8045372:	3360      	adds	r3, #96	; 0x60
 8045374:	2204      	movs	r2, #4
 8045376:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045378:	68fb      	ldr	r3, [r7, #12]
 804537a:	015a      	lsls	r2, r3, #5
 804537c:	693b      	ldr	r3, [r7, #16]
 804537e:	4413      	add	r3, r2
 8045380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045384:	461a      	mov	r2, r3
 8045386:	2302      	movs	r3, #2
 8045388:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 804538a:	68fb      	ldr	r3, [r7, #12]
 804538c:	b2d9      	uxtb	r1, r3
 804538e:	687a      	ldr	r2, [r7, #4]
 8045390:	68fb      	ldr	r3, [r7, #12]
 8045392:	202c      	movs	r0, #44	; 0x2c
 8045394:	fb00 f303 	mul.w	r3, r0, r3
 8045398:	4413      	add	r3, r2
 804539a:	3360      	adds	r3, #96	; 0x60
 804539c:	781b      	ldrb	r3, [r3, #0]
 804539e:	461a      	mov	r2, r3
 80453a0:	6878      	ldr	r0, [r7, #4]
 80453a2:	f007 fa99 	bl	804c8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80453a6:	e061      	b.n	804546c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80453a8:	68fb      	ldr	r3, [r7, #12]
 80453aa:	015a      	lsls	r2, r3, #5
 80453ac:	693b      	ldr	r3, [r7, #16]
 80453ae:	4413      	add	r3, r2
 80453b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80453b4:	689b      	ldr	r3, [r3, #8]
 80453b6:	f003 0310 	and.w	r3, r3, #16
 80453ba:	2b10      	cmp	r3, #16
 80453bc:	d156      	bne.n	804546c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80453be:	687a      	ldr	r2, [r7, #4]
 80453c0:	68fb      	ldr	r3, [r7, #12]
 80453c2:	212c      	movs	r1, #44	; 0x2c
 80453c4:	fb01 f303 	mul.w	r3, r1, r3
 80453c8:	4413      	add	r3, r2
 80453ca:	333f      	adds	r3, #63	; 0x3f
 80453cc:	781b      	ldrb	r3, [r3, #0]
 80453ce:	2b03      	cmp	r3, #3
 80453d0:	d111      	bne.n	80453f6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80453d2:	687a      	ldr	r2, [r7, #4]
 80453d4:	68fb      	ldr	r3, [r7, #12]
 80453d6:	212c      	movs	r1, #44	; 0x2c
 80453d8:	fb01 f303 	mul.w	r3, r1, r3
 80453dc:	4413      	add	r3, r2
 80453de:	335c      	adds	r3, #92	; 0x5c
 80453e0:	2200      	movs	r2, #0
 80453e2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80453e4:	687b      	ldr	r3, [r7, #4]
 80453e6:	681b      	ldr	r3, [r3, #0]
 80453e8:	68fa      	ldr	r2, [r7, #12]
 80453ea:	b2d2      	uxtb	r2, r2
 80453ec:	4611      	mov	r1, r2
 80453ee:	4618      	mov	r0, r3
 80453f0:	f004 ffd3 	bl	804a39a <USB_HC_Halt>
 80453f4:	e031      	b.n	804545a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80453f6:	687a      	ldr	r2, [r7, #4]
 80453f8:	68fb      	ldr	r3, [r7, #12]
 80453fa:	212c      	movs	r1, #44	; 0x2c
 80453fc:	fb01 f303 	mul.w	r3, r1, r3
 8045400:	4413      	add	r3, r2
 8045402:	333f      	adds	r3, #63	; 0x3f
 8045404:	781b      	ldrb	r3, [r3, #0]
 8045406:	2b00      	cmp	r3, #0
 8045408:	d009      	beq.n	804541e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 804540a:	687a      	ldr	r2, [r7, #4]
 804540c:	68fb      	ldr	r3, [r7, #12]
 804540e:	212c      	movs	r1, #44	; 0x2c
 8045410:	fb01 f303 	mul.w	r3, r1, r3
 8045414:	4413      	add	r3, r2
 8045416:	333f      	adds	r3, #63	; 0x3f
 8045418:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 804541a:	2b02      	cmp	r3, #2
 804541c:	d11d      	bne.n	804545a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 804541e:	687a      	ldr	r2, [r7, #4]
 8045420:	68fb      	ldr	r3, [r7, #12]
 8045422:	212c      	movs	r1, #44	; 0x2c
 8045424:	fb01 f303 	mul.w	r3, r1, r3
 8045428:	4413      	add	r3, r2
 804542a:	335c      	adds	r3, #92	; 0x5c
 804542c:	2200      	movs	r2, #0
 804542e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8045430:	687b      	ldr	r3, [r7, #4]
 8045432:	691b      	ldr	r3, [r3, #16]
 8045434:	2b00      	cmp	r3, #0
 8045436:	d110      	bne.n	804545a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8045438:	687a      	ldr	r2, [r7, #4]
 804543a:	68fb      	ldr	r3, [r7, #12]
 804543c:	212c      	movs	r1, #44	; 0x2c
 804543e:	fb01 f303 	mul.w	r3, r1, r3
 8045442:	4413      	add	r3, r2
 8045444:	3361      	adds	r3, #97	; 0x61
 8045446:	2203      	movs	r2, #3
 8045448:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804544a:	687b      	ldr	r3, [r7, #4]
 804544c:	681b      	ldr	r3, [r3, #0]
 804544e:	68fa      	ldr	r2, [r7, #12]
 8045450:	b2d2      	uxtb	r2, r2
 8045452:	4611      	mov	r1, r2
 8045454:	4618      	mov	r0, r3
 8045456:	f004 ffa0 	bl	804a39a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 804545a:	68fb      	ldr	r3, [r7, #12]
 804545c:	015a      	lsls	r2, r3, #5
 804545e:	693b      	ldr	r3, [r7, #16]
 8045460:	4413      	add	r3, r2
 8045462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045466:	461a      	mov	r2, r3
 8045468:	2310      	movs	r3, #16
 804546a:	6093      	str	r3, [r2, #8]
}
 804546c:	bf00      	nop
 804546e:	3718      	adds	r7, #24
 8045470:	46bd      	mov	sp, r7
 8045472:	bd80      	pop	{r7, pc}

08045474 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8045474:	b580      	push	{r7, lr}
 8045476:	b088      	sub	sp, #32
 8045478:	af00      	add	r7, sp, #0
 804547a:	6078      	str	r0, [r7, #4]
 804547c:	460b      	mov	r3, r1
 804547e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045480:	687b      	ldr	r3, [r7, #4]
 8045482:	681b      	ldr	r3, [r3, #0]
 8045484:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045486:	69fb      	ldr	r3, [r7, #28]
 8045488:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 804548a:	78fb      	ldrb	r3, [r7, #3]
 804548c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 804548e:	697b      	ldr	r3, [r7, #20]
 8045490:	015a      	lsls	r2, r3, #5
 8045492:	69bb      	ldr	r3, [r7, #24]
 8045494:	4413      	add	r3, r2
 8045496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804549a:	689b      	ldr	r3, [r3, #8]
 804549c:	f003 0304 	and.w	r3, r3, #4
 80454a0:	2b04      	cmp	r3, #4
 80454a2:	d11a      	bne.n	80454da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80454a4:	697b      	ldr	r3, [r7, #20]
 80454a6:	015a      	lsls	r2, r3, #5
 80454a8:	69bb      	ldr	r3, [r7, #24]
 80454aa:	4413      	add	r3, r2
 80454ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454b0:	461a      	mov	r2, r3
 80454b2:	2304      	movs	r3, #4
 80454b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80454b6:	687a      	ldr	r2, [r7, #4]
 80454b8:	697b      	ldr	r3, [r7, #20]
 80454ba:	212c      	movs	r1, #44	; 0x2c
 80454bc:	fb01 f303 	mul.w	r3, r1, r3
 80454c0:	4413      	add	r3, r2
 80454c2:	3361      	adds	r3, #97	; 0x61
 80454c4:	2206      	movs	r2, #6
 80454c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80454c8:	687b      	ldr	r3, [r7, #4]
 80454ca:	681b      	ldr	r3, [r3, #0]
 80454cc:	697a      	ldr	r2, [r7, #20]
 80454ce:	b2d2      	uxtb	r2, r2
 80454d0:	4611      	mov	r1, r2
 80454d2:	4618      	mov	r0, r3
 80454d4:	f004 ff61 	bl	804a39a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80454d8:	e331      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80454da:	697b      	ldr	r3, [r7, #20]
 80454dc:	015a      	lsls	r2, r3, #5
 80454de:	69bb      	ldr	r3, [r7, #24]
 80454e0:	4413      	add	r3, r2
 80454e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454e6:	689b      	ldr	r3, [r3, #8]
 80454e8:	f003 0320 	and.w	r3, r3, #32
 80454ec:	2b20      	cmp	r3, #32
 80454ee:	d12e      	bne.n	804554e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80454f0:	697b      	ldr	r3, [r7, #20]
 80454f2:	015a      	lsls	r2, r3, #5
 80454f4:	69bb      	ldr	r3, [r7, #24]
 80454f6:	4413      	add	r3, r2
 80454f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80454fc:	461a      	mov	r2, r3
 80454fe:	2320      	movs	r3, #32
 8045500:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8045502:	687a      	ldr	r2, [r7, #4]
 8045504:	697b      	ldr	r3, [r7, #20]
 8045506:	212c      	movs	r1, #44	; 0x2c
 8045508:	fb01 f303 	mul.w	r3, r1, r3
 804550c:	4413      	add	r3, r2
 804550e:	333d      	adds	r3, #61	; 0x3d
 8045510:	781b      	ldrb	r3, [r3, #0]
 8045512:	2b01      	cmp	r3, #1
 8045514:	f040 8313 	bne.w	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8045518:	687a      	ldr	r2, [r7, #4]
 804551a:	697b      	ldr	r3, [r7, #20]
 804551c:	212c      	movs	r1, #44	; 0x2c
 804551e:	fb01 f303 	mul.w	r3, r1, r3
 8045522:	4413      	add	r3, r2
 8045524:	333d      	adds	r3, #61	; 0x3d
 8045526:	2200      	movs	r2, #0
 8045528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 804552a:	687a      	ldr	r2, [r7, #4]
 804552c:	697b      	ldr	r3, [r7, #20]
 804552e:	212c      	movs	r1, #44	; 0x2c
 8045530:	fb01 f303 	mul.w	r3, r1, r3
 8045534:	4413      	add	r3, r2
 8045536:	3360      	adds	r3, #96	; 0x60
 8045538:	2202      	movs	r2, #2
 804553a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804553c:	687b      	ldr	r3, [r7, #4]
 804553e:	681b      	ldr	r3, [r3, #0]
 8045540:	697a      	ldr	r2, [r7, #20]
 8045542:	b2d2      	uxtb	r2, r2
 8045544:	4611      	mov	r1, r2
 8045546:	4618      	mov	r0, r3
 8045548:	f004 ff27 	bl	804a39a <USB_HC_Halt>
}
 804554c:	e2f7      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 804554e:	697b      	ldr	r3, [r7, #20]
 8045550:	015a      	lsls	r2, r3, #5
 8045552:	69bb      	ldr	r3, [r7, #24]
 8045554:	4413      	add	r3, r2
 8045556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804555a:	689b      	ldr	r3, [r3, #8]
 804555c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045564:	d112      	bne.n	804558c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8045566:	697b      	ldr	r3, [r7, #20]
 8045568:	015a      	lsls	r2, r3, #5
 804556a:	69bb      	ldr	r3, [r7, #24]
 804556c:	4413      	add	r3, r2
 804556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045572:	461a      	mov	r2, r3
 8045574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045578:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 804557a:	687b      	ldr	r3, [r7, #4]
 804557c:	681b      	ldr	r3, [r3, #0]
 804557e:	697a      	ldr	r2, [r7, #20]
 8045580:	b2d2      	uxtb	r2, r2
 8045582:	4611      	mov	r1, r2
 8045584:	4618      	mov	r0, r3
 8045586:	f004 ff08 	bl	804a39a <USB_HC_Halt>
}
 804558a:	e2d8      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 804558c:	697b      	ldr	r3, [r7, #20]
 804558e:	015a      	lsls	r2, r3, #5
 8045590:	69bb      	ldr	r3, [r7, #24]
 8045592:	4413      	add	r3, r2
 8045594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045598:	689b      	ldr	r3, [r3, #8]
 804559a:	f003 0301 	and.w	r3, r3, #1
 804559e:	2b01      	cmp	r3, #1
 80455a0:	d140      	bne.n	8045624 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80455a2:	687a      	ldr	r2, [r7, #4]
 80455a4:	697b      	ldr	r3, [r7, #20]
 80455a6:	212c      	movs	r1, #44	; 0x2c
 80455a8:	fb01 f303 	mul.w	r3, r1, r3
 80455ac:	4413      	add	r3, r2
 80455ae:	335c      	adds	r3, #92	; 0x5c
 80455b0:	2200      	movs	r2, #0
 80455b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80455b4:	697b      	ldr	r3, [r7, #20]
 80455b6:	015a      	lsls	r2, r3, #5
 80455b8:	69bb      	ldr	r3, [r7, #24]
 80455ba:	4413      	add	r3, r2
 80455bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455c0:	689b      	ldr	r3, [r3, #8]
 80455c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80455c6:	2b40      	cmp	r3, #64	; 0x40
 80455c8:	d111      	bne.n	80455ee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80455ca:	687a      	ldr	r2, [r7, #4]
 80455cc:	697b      	ldr	r3, [r7, #20]
 80455ce:	212c      	movs	r1, #44	; 0x2c
 80455d0:	fb01 f303 	mul.w	r3, r1, r3
 80455d4:	4413      	add	r3, r2
 80455d6:	333d      	adds	r3, #61	; 0x3d
 80455d8:	2201      	movs	r2, #1
 80455da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80455dc:	697b      	ldr	r3, [r7, #20]
 80455de:	015a      	lsls	r2, r3, #5
 80455e0:	69bb      	ldr	r3, [r7, #24]
 80455e2:	4413      	add	r3, r2
 80455e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455e8:	461a      	mov	r2, r3
 80455ea:	2340      	movs	r3, #64	; 0x40
 80455ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80455ee:	697b      	ldr	r3, [r7, #20]
 80455f0:	015a      	lsls	r2, r3, #5
 80455f2:	69bb      	ldr	r3, [r7, #24]
 80455f4:	4413      	add	r3, r2
 80455f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80455fa:	461a      	mov	r2, r3
 80455fc:	2301      	movs	r3, #1
 80455fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8045600:	687a      	ldr	r2, [r7, #4]
 8045602:	697b      	ldr	r3, [r7, #20]
 8045604:	212c      	movs	r1, #44	; 0x2c
 8045606:	fb01 f303 	mul.w	r3, r1, r3
 804560a:	4413      	add	r3, r2
 804560c:	3361      	adds	r3, #97	; 0x61
 804560e:	2201      	movs	r2, #1
 8045610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045612:	687b      	ldr	r3, [r7, #4]
 8045614:	681b      	ldr	r3, [r3, #0]
 8045616:	697a      	ldr	r2, [r7, #20]
 8045618:	b2d2      	uxtb	r2, r2
 804561a:	4611      	mov	r1, r2
 804561c:	4618      	mov	r0, r3
 804561e:	f004 febc 	bl	804a39a <USB_HC_Halt>
}
 8045622:	e28c      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8045624:	697b      	ldr	r3, [r7, #20]
 8045626:	015a      	lsls	r2, r3, #5
 8045628:	69bb      	ldr	r3, [r7, #24]
 804562a:	4413      	add	r3, r2
 804562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045630:	689b      	ldr	r3, [r3, #8]
 8045632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045636:	2b40      	cmp	r3, #64	; 0x40
 8045638:	d12c      	bne.n	8045694 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 804563a:	687a      	ldr	r2, [r7, #4]
 804563c:	697b      	ldr	r3, [r7, #20]
 804563e:	212c      	movs	r1, #44	; 0x2c
 8045640:	fb01 f303 	mul.w	r3, r1, r3
 8045644:	4413      	add	r3, r2
 8045646:	3361      	adds	r3, #97	; 0x61
 8045648:	2204      	movs	r2, #4
 804564a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 804564c:	687a      	ldr	r2, [r7, #4]
 804564e:	697b      	ldr	r3, [r7, #20]
 8045650:	212c      	movs	r1, #44	; 0x2c
 8045652:	fb01 f303 	mul.w	r3, r1, r3
 8045656:	4413      	add	r3, r2
 8045658:	333d      	adds	r3, #61	; 0x3d
 804565a:	2201      	movs	r2, #1
 804565c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 804565e:	687a      	ldr	r2, [r7, #4]
 8045660:	697b      	ldr	r3, [r7, #20]
 8045662:	212c      	movs	r1, #44	; 0x2c
 8045664:	fb01 f303 	mul.w	r3, r1, r3
 8045668:	4413      	add	r3, r2
 804566a:	335c      	adds	r3, #92	; 0x5c
 804566c:	2200      	movs	r2, #0
 804566e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045670:	687b      	ldr	r3, [r7, #4]
 8045672:	681b      	ldr	r3, [r3, #0]
 8045674:	697a      	ldr	r2, [r7, #20]
 8045676:	b2d2      	uxtb	r2, r2
 8045678:	4611      	mov	r1, r2
 804567a:	4618      	mov	r0, r3
 804567c:	f004 fe8d 	bl	804a39a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8045680:	697b      	ldr	r3, [r7, #20]
 8045682:	015a      	lsls	r2, r3, #5
 8045684:	69bb      	ldr	r3, [r7, #24]
 8045686:	4413      	add	r3, r2
 8045688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804568c:	461a      	mov	r2, r3
 804568e:	2340      	movs	r3, #64	; 0x40
 8045690:	6093      	str	r3, [r2, #8]
}
 8045692:	e254      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8045694:	697b      	ldr	r3, [r7, #20]
 8045696:	015a      	lsls	r2, r3, #5
 8045698:	69bb      	ldr	r3, [r7, #24]
 804569a:	4413      	add	r3, r2
 804569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456a0:	689b      	ldr	r3, [r3, #8]
 80456a2:	f003 0308 	and.w	r3, r3, #8
 80456a6:	2b08      	cmp	r3, #8
 80456a8:	d11a      	bne.n	80456e0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80456aa:	697b      	ldr	r3, [r7, #20]
 80456ac:	015a      	lsls	r2, r3, #5
 80456ae:	69bb      	ldr	r3, [r7, #24]
 80456b0:	4413      	add	r3, r2
 80456b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456b6:	461a      	mov	r2, r3
 80456b8:	2308      	movs	r3, #8
 80456ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80456bc:	687a      	ldr	r2, [r7, #4]
 80456be:	697b      	ldr	r3, [r7, #20]
 80456c0:	212c      	movs	r1, #44	; 0x2c
 80456c2:	fb01 f303 	mul.w	r3, r1, r3
 80456c6:	4413      	add	r3, r2
 80456c8:	3361      	adds	r3, #97	; 0x61
 80456ca:	2205      	movs	r2, #5
 80456cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80456ce:	687b      	ldr	r3, [r7, #4]
 80456d0:	681b      	ldr	r3, [r3, #0]
 80456d2:	697a      	ldr	r2, [r7, #20]
 80456d4:	b2d2      	uxtb	r2, r2
 80456d6:	4611      	mov	r1, r2
 80456d8:	4618      	mov	r0, r3
 80456da:	f004 fe5e 	bl	804a39a <USB_HC_Halt>
}
 80456de:	e22e      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80456e0:	697b      	ldr	r3, [r7, #20]
 80456e2:	015a      	lsls	r2, r3, #5
 80456e4:	69bb      	ldr	r3, [r7, #24]
 80456e6:	4413      	add	r3, r2
 80456e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80456ec:	689b      	ldr	r3, [r3, #8]
 80456ee:	f003 0310 	and.w	r3, r3, #16
 80456f2:	2b10      	cmp	r3, #16
 80456f4:	d140      	bne.n	8045778 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80456f6:	687a      	ldr	r2, [r7, #4]
 80456f8:	697b      	ldr	r3, [r7, #20]
 80456fa:	212c      	movs	r1, #44	; 0x2c
 80456fc:	fb01 f303 	mul.w	r3, r1, r3
 8045700:	4413      	add	r3, r2
 8045702:	335c      	adds	r3, #92	; 0x5c
 8045704:	2200      	movs	r2, #0
 8045706:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8045708:	687a      	ldr	r2, [r7, #4]
 804570a:	697b      	ldr	r3, [r7, #20]
 804570c:	212c      	movs	r1, #44	; 0x2c
 804570e:	fb01 f303 	mul.w	r3, r1, r3
 8045712:	4413      	add	r3, r2
 8045714:	3361      	adds	r3, #97	; 0x61
 8045716:	2203      	movs	r2, #3
 8045718:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 804571a:	687a      	ldr	r2, [r7, #4]
 804571c:	697b      	ldr	r3, [r7, #20]
 804571e:	212c      	movs	r1, #44	; 0x2c
 8045720:	fb01 f303 	mul.w	r3, r1, r3
 8045724:	4413      	add	r3, r2
 8045726:	333d      	adds	r3, #61	; 0x3d
 8045728:	781b      	ldrb	r3, [r3, #0]
 804572a:	2b00      	cmp	r3, #0
 804572c:	d112      	bne.n	8045754 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 804572e:	687a      	ldr	r2, [r7, #4]
 8045730:	697b      	ldr	r3, [r7, #20]
 8045732:	212c      	movs	r1, #44	; 0x2c
 8045734:	fb01 f303 	mul.w	r3, r1, r3
 8045738:	4413      	add	r3, r2
 804573a:	333c      	adds	r3, #60	; 0x3c
 804573c:	781b      	ldrb	r3, [r3, #0]
 804573e:	2b00      	cmp	r3, #0
 8045740:	d108      	bne.n	8045754 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8045742:	687a      	ldr	r2, [r7, #4]
 8045744:	697b      	ldr	r3, [r7, #20]
 8045746:	212c      	movs	r1, #44	; 0x2c
 8045748:	fb01 f303 	mul.w	r3, r1, r3
 804574c:	4413      	add	r3, r2
 804574e:	333d      	adds	r3, #61	; 0x3d
 8045750:	2201      	movs	r2, #1
 8045752:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045754:	687b      	ldr	r3, [r7, #4]
 8045756:	681b      	ldr	r3, [r3, #0]
 8045758:	697a      	ldr	r2, [r7, #20]
 804575a:	b2d2      	uxtb	r2, r2
 804575c:	4611      	mov	r1, r2
 804575e:	4618      	mov	r0, r3
 8045760:	f004 fe1b 	bl	804a39a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8045764:	697b      	ldr	r3, [r7, #20]
 8045766:	015a      	lsls	r2, r3, #5
 8045768:	69bb      	ldr	r3, [r7, #24]
 804576a:	4413      	add	r3, r2
 804576c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045770:	461a      	mov	r2, r3
 8045772:	2310      	movs	r3, #16
 8045774:	6093      	str	r3, [r2, #8]
}
 8045776:	e1e2      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8045778:	697b      	ldr	r3, [r7, #20]
 804577a:	015a      	lsls	r2, r3, #5
 804577c:	69bb      	ldr	r3, [r7, #24]
 804577e:	4413      	add	r3, r2
 8045780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045784:	689b      	ldr	r3, [r3, #8]
 8045786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804578a:	2b80      	cmp	r3, #128	; 0x80
 804578c:	d164      	bne.n	8045858 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 804578e:	687b      	ldr	r3, [r7, #4]
 8045790:	691b      	ldr	r3, [r3, #16]
 8045792:	2b00      	cmp	r3, #0
 8045794:	d111      	bne.n	80457ba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8045796:	687a      	ldr	r2, [r7, #4]
 8045798:	697b      	ldr	r3, [r7, #20]
 804579a:	212c      	movs	r1, #44	; 0x2c
 804579c:	fb01 f303 	mul.w	r3, r1, r3
 80457a0:	4413      	add	r3, r2
 80457a2:	3361      	adds	r3, #97	; 0x61
 80457a4:	2206      	movs	r2, #6
 80457a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80457a8:	687b      	ldr	r3, [r7, #4]
 80457aa:	681b      	ldr	r3, [r3, #0]
 80457ac:	697a      	ldr	r2, [r7, #20]
 80457ae:	b2d2      	uxtb	r2, r2
 80457b0:	4611      	mov	r1, r2
 80457b2:	4618      	mov	r0, r3
 80457b4:	f004 fdf1 	bl	804a39a <USB_HC_Halt>
 80457b8:	e044      	b.n	8045844 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80457ba:	687a      	ldr	r2, [r7, #4]
 80457bc:	697b      	ldr	r3, [r7, #20]
 80457be:	212c      	movs	r1, #44	; 0x2c
 80457c0:	fb01 f303 	mul.w	r3, r1, r3
 80457c4:	4413      	add	r3, r2
 80457c6:	335c      	adds	r3, #92	; 0x5c
 80457c8:	681b      	ldr	r3, [r3, #0]
 80457ca:	1c5a      	adds	r2, r3, #1
 80457cc:	6879      	ldr	r1, [r7, #4]
 80457ce:	697b      	ldr	r3, [r7, #20]
 80457d0:	202c      	movs	r0, #44	; 0x2c
 80457d2:	fb00 f303 	mul.w	r3, r0, r3
 80457d6:	440b      	add	r3, r1
 80457d8:	335c      	adds	r3, #92	; 0x5c
 80457da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80457dc:	687a      	ldr	r2, [r7, #4]
 80457de:	697b      	ldr	r3, [r7, #20]
 80457e0:	212c      	movs	r1, #44	; 0x2c
 80457e2:	fb01 f303 	mul.w	r3, r1, r3
 80457e6:	4413      	add	r3, r2
 80457e8:	335c      	adds	r3, #92	; 0x5c
 80457ea:	681b      	ldr	r3, [r3, #0]
 80457ec:	2b02      	cmp	r3, #2
 80457ee:	d920      	bls.n	8045832 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80457f0:	687a      	ldr	r2, [r7, #4]
 80457f2:	697b      	ldr	r3, [r7, #20]
 80457f4:	212c      	movs	r1, #44	; 0x2c
 80457f6:	fb01 f303 	mul.w	r3, r1, r3
 80457fa:	4413      	add	r3, r2
 80457fc:	335c      	adds	r3, #92	; 0x5c
 80457fe:	2200      	movs	r2, #0
 8045800:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045802:	687a      	ldr	r2, [r7, #4]
 8045804:	697b      	ldr	r3, [r7, #20]
 8045806:	212c      	movs	r1, #44	; 0x2c
 8045808:	fb01 f303 	mul.w	r3, r1, r3
 804580c:	4413      	add	r3, r2
 804580e:	3360      	adds	r3, #96	; 0x60
 8045810:	2204      	movs	r2, #4
 8045812:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045814:	697b      	ldr	r3, [r7, #20]
 8045816:	b2d9      	uxtb	r1, r3
 8045818:	687a      	ldr	r2, [r7, #4]
 804581a:	697b      	ldr	r3, [r7, #20]
 804581c:	202c      	movs	r0, #44	; 0x2c
 804581e:	fb00 f303 	mul.w	r3, r0, r3
 8045822:	4413      	add	r3, r2
 8045824:	3360      	adds	r3, #96	; 0x60
 8045826:	781b      	ldrb	r3, [r3, #0]
 8045828:	461a      	mov	r2, r3
 804582a:	6878      	ldr	r0, [r7, #4]
 804582c:	f007 f854 	bl	804c8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8045830:	e008      	b.n	8045844 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045832:	687a      	ldr	r2, [r7, #4]
 8045834:	697b      	ldr	r3, [r7, #20]
 8045836:	212c      	movs	r1, #44	; 0x2c
 8045838:	fb01 f303 	mul.w	r3, r1, r3
 804583c:	4413      	add	r3, r2
 804583e:	3360      	adds	r3, #96	; 0x60
 8045840:	2202      	movs	r2, #2
 8045842:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8045844:	697b      	ldr	r3, [r7, #20]
 8045846:	015a      	lsls	r2, r3, #5
 8045848:	69bb      	ldr	r3, [r7, #24]
 804584a:	4413      	add	r3, r2
 804584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045850:	461a      	mov	r2, r3
 8045852:	2380      	movs	r3, #128	; 0x80
 8045854:	6093      	str	r3, [r2, #8]
}
 8045856:	e172      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8045858:	697b      	ldr	r3, [r7, #20]
 804585a:	015a      	lsls	r2, r3, #5
 804585c:	69bb      	ldr	r3, [r7, #24]
 804585e:	4413      	add	r3, r2
 8045860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045864:	689b      	ldr	r3, [r3, #8]
 8045866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804586e:	d11b      	bne.n	80458a8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8045870:	687a      	ldr	r2, [r7, #4]
 8045872:	697b      	ldr	r3, [r7, #20]
 8045874:	212c      	movs	r1, #44	; 0x2c
 8045876:	fb01 f303 	mul.w	r3, r1, r3
 804587a:	4413      	add	r3, r2
 804587c:	3361      	adds	r3, #97	; 0x61
 804587e:	2208      	movs	r2, #8
 8045880:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8045882:	687b      	ldr	r3, [r7, #4]
 8045884:	681b      	ldr	r3, [r3, #0]
 8045886:	697a      	ldr	r2, [r7, #20]
 8045888:	b2d2      	uxtb	r2, r2
 804588a:	4611      	mov	r1, r2
 804588c:	4618      	mov	r0, r3
 804588e:	f004 fd84 	bl	804a39a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8045892:	697b      	ldr	r3, [r7, #20]
 8045894:	015a      	lsls	r2, r3, #5
 8045896:	69bb      	ldr	r3, [r7, #24]
 8045898:	4413      	add	r3, r2
 804589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804589e:	461a      	mov	r2, r3
 80458a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80458a4:	6093      	str	r3, [r2, #8]
}
 80458a6:	e14a      	b.n	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80458a8:	697b      	ldr	r3, [r7, #20]
 80458aa:	015a      	lsls	r2, r3, #5
 80458ac:	69bb      	ldr	r3, [r7, #24]
 80458ae:	4413      	add	r3, r2
 80458b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80458b4:	689b      	ldr	r3, [r3, #8]
 80458b6:	f003 0302 	and.w	r3, r3, #2
 80458ba:	2b02      	cmp	r3, #2
 80458bc:	f040 813f 	bne.w	8045b3e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80458c0:	687a      	ldr	r2, [r7, #4]
 80458c2:	697b      	ldr	r3, [r7, #20]
 80458c4:	212c      	movs	r1, #44	; 0x2c
 80458c6:	fb01 f303 	mul.w	r3, r1, r3
 80458ca:	4413      	add	r3, r2
 80458cc:	3361      	adds	r3, #97	; 0x61
 80458ce:	781b      	ldrb	r3, [r3, #0]
 80458d0:	2b01      	cmp	r3, #1
 80458d2:	d17d      	bne.n	80459d0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80458d4:	687a      	ldr	r2, [r7, #4]
 80458d6:	697b      	ldr	r3, [r7, #20]
 80458d8:	212c      	movs	r1, #44	; 0x2c
 80458da:	fb01 f303 	mul.w	r3, r1, r3
 80458de:	4413      	add	r3, r2
 80458e0:	3360      	adds	r3, #96	; 0x60
 80458e2:	2201      	movs	r2, #1
 80458e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80458e6:	687a      	ldr	r2, [r7, #4]
 80458e8:	697b      	ldr	r3, [r7, #20]
 80458ea:	212c      	movs	r1, #44	; 0x2c
 80458ec:	fb01 f303 	mul.w	r3, r1, r3
 80458f0:	4413      	add	r3, r2
 80458f2:	333f      	adds	r3, #63	; 0x3f
 80458f4:	781b      	ldrb	r3, [r3, #0]
 80458f6:	2b02      	cmp	r3, #2
 80458f8:	d00a      	beq.n	8045910 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80458fa:	687a      	ldr	r2, [r7, #4]
 80458fc:	697b      	ldr	r3, [r7, #20]
 80458fe:	212c      	movs	r1, #44	; 0x2c
 8045900:	fb01 f303 	mul.w	r3, r1, r3
 8045904:	4413      	add	r3, r2
 8045906:	333f      	adds	r3, #63	; 0x3f
 8045908:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 804590a:	2b03      	cmp	r3, #3
 804590c:	f040 8100 	bne.w	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8045910:	687b      	ldr	r3, [r7, #4]
 8045912:	691b      	ldr	r3, [r3, #16]
 8045914:	2b00      	cmp	r3, #0
 8045916:	d113      	bne.n	8045940 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8045918:	687a      	ldr	r2, [r7, #4]
 804591a:	697b      	ldr	r3, [r7, #20]
 804591c:	212c      	movs	r1, #44	; 0x2c
 804591e:	fb01 f303 	mul.w	r3, r1, r3
 8045922:	4413      	add	r3, r2
 8045924:	3355      	adds	r3, #85	; 0x55
 8045926:	781b      	ldrb	r3, [r3, #0]
 8045928:	f083 0301 	eor.w	r3, r3, #1
 804592c:	b2d8      	uxtb	r0, r3
 804592e:	687a      	ldr	r2, [r7, #4]
 8045930:	697b      	ldr	r3, [r7, #20]
 8045932:	212c      	movs	r1, #44	; 0x2c
 8045934:	fb01 f303 	mul.w	r3, r1, r3
 8045938:	4413      	add	r3, r2
 804593a:	3355      	adds	r3, #85	; 0x55
 804593c:	4602      	mov	r2, r0
 804593e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8045940:	687b      	ldr	r3, [r7, #4]
 8045942:	691b      	ldr	r3, [r3, #16]
 8045944:	2b01      	cmp	r3, #1
 8045946:	f040 80e3 	bne.w	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
 804594a:	687a      	ldr	r2, [r7, #4]
 804594c:	697b      	ldr	r3, [r7, #20]
 804594e:	212c      	movs	r1, #44	; 0x2c
 8045950:	fb01 f303 	mul.w	r3, r1, r3
 8045954:	4413      	add	r3, r2
 8045956:	334c      	adds	r3, #76	; 0x4c
 8045958:	681b      	ldr	r3, [r3, #0]
 804595a:	2b00      	cmp	r3, #0
 804595c:	f000 80d8 	beq.w	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8045960:	687a      	ldr	r2, [r7, #4]
 8045962:	697b      	ldr	r3, [r7, #20]
 8045964:	212c      	movs	r1, #44	; 0x2c
 8045966:	fb01 f303 	mul.w	r3, r1, r3
 804596a:	4413      	add	r3, r2
 804596c:	334c      	adds	r3, #76	; 0x4c
 804596e:	681b      	ldr	r3, [r3, #0]
 8045970:	6879      	ldr	r1, [r7, #4]
 8045972:	697a      	ldr	r2, [r7, #20]
 8045974:	202c      	movs	r0, #44	; 0x2c
 8045976:	fb00 f202 	mul.w	r2, r0, r2
 804597a:	440a      	add	r2, r1
 804597c:	3240      	adds	r2, #64	; 0x40
 804597e:	8812      	ldrh	r2, [r2, #0]
 8045980:	4413      	add	r3, r2
 8045982:	3b01      	subs	r3, #1
 8045984:	6879      	ldr	r1, [r7, #4]
 8045986:	697a      	ldr	r2, [r7, #20]
 8045988:	202c      	movs	r0, #44	; 0x2c
 804598a:	fb00 f202 	mul.w	r2, r0, r2
 804598e:	440a      	add	r2, r1
 8045990:	3240      	adds	r2, #64	; 0x40
 8045992:	8812      	ldrh	r2, [r2, #0]
 8045994:	fbb3 f3f2 	udiv	r3, r3, r2
 8045998:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 804599a:	68fb      	ldr	r3, [r7, #12]
 804599c:	f003 0301 	and.w	r3, r3, #1
 80459a0:	2b00      	cmp	r3, #0
 80459a2:	f000 80b5 	beq.w	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80459a6:	687a      	ldr	r2, [r7, #4]
 80459a8:	697b      	ldr	r3, [r7, #20]
 80459aa:	212c      	movs	r1, #44	; 0x2c
 80459ac:	fb01 f303 	mul.w	r3, r1, r3
 80459b0:	4413      	add	r3, r2
 80459b2:	3355      	adds	r3, #85	; 0x55
 80459b4:	781b      	ldrb	r3, [r3, #0]
 80459b6:	f083 0301 	eor.w	r3, r3, #1
 80459ba:	b2d8      	uxtb	r0, r3
 80459bc:	687a      	ldr	r2, [r7, #4]
 80459be:	697b      	ldr	r3, [r7, #20]
 80459c0:	212c      	movs	r1, #44	; 0x2c
 80459c2:	fb01 f303 	mul.w	r3, r1, r3
 80459c6:	4413      	add	r3, r2
 80459c8:	3355      	adds	r3, #85	; 0x55
 80459ca:	4602      	mov	r2, r0
 80459cc:	701a      	strb	r2, [r3, #0]
 80459ce:	e09f      	b.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80459d0:	687a      	ldr	r2, [r7, #4]
 80459d2:	697b      	ldr	r3, [r7, #20]
 80459d4:	212c      	movs	r1, #44	; 0x2c
 80459d6:	fb01 f303 	mul.w	r3, r1, r3
 80459da:	4413      	add	r3, r2
 80459dc:	3361      	adds	r3, #97	; 0x61
 80459de:	781b      	ldrb	r3, [r3, #0]
 80459e0:	2b03      	cmp	r3, #3
 80459e2:	d109      	bne.n	80459f8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80459e4:	687a      	ldr	r2, [r7, #4]
 80459e6:	697b      	ldr	r3, [r7, #20]
 80459e8:	212c      	movs	r1, #44	; 0x2c
 80459ea:	fb01 f303 	mul.w	r3, r1, r3
 80459ee:	4413      	add	r3, r2
 80459f0:	3360      	adds	r3, #96	; 0x60
 80459f2:	2202      	movs	r2, #2
 80459f4:	701a      	strb	r2, [r3, #0]
 80459f6:	e08b      	b.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80459f8:	687a      	ldr	r2, [r7, #4]
 80459fa:	697b      	ldr	r3, [r7, #20]
 80459fc:	212c      	movs	r1, #44	; 0x2c
 80459fe:	fb01 f303 	mul.w	r3, r1, r3
 8045a02:	4413      	add	r3, r2
 8045a04:	3361      	adds	r3, #97	; 0x61
 8045a06:	781b      	ldrb	r3, [r3, #0]
 8045a08:	2b04      	cmp	r3, #4
 8045a0a:	d109      	bne.n	8045a20 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8045a0c:	687a      	ldr	r2, [r7, #4]
 8045a0e:	697b      	ldr	r3, [r7, #20]
 8045a10:	212c      	movs	r1, #44	; 0x2c
 8045a12:	fb01 f303 	mul.w	r3, r1, r3
 8045a16:	4413      	add	r3, r2
 8045a18:	3360      	adds	r3, #96	; 0x60
 8045a1a:	2202      	movs	r2, #2
 8045a1c:	701a      	strb	r2, [r3, #0]
 8045a1e:	e077      	b.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8045a20:	687a      	ldr	r2, [r7, #4]
 8045a22:	697b      	ldr	r3, [r7, #20]
 8045a24:	212c      	movs	r1, #44	; 0x2c
 8045a26:	fb01 f303 	mul.w	r3, r1, r3
 8045a2a:	4413      	add	r3, r2
 8045a2c:	3361      	adds	r3, #97	; 0x61
 8045a2e:	781b      	ldrb	r3, [r3, #0]
 8045a30:	2b05      	cmp	r3, #5
 8045a32:	d109      	bne.n	8045a48 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8045a34:	687a      	ldr	r2, [r7, #4]
 8045a36:	697b      	ldr	r3, [r7, #20]
 8045a38:	212c      	movs	r1, #44	; 0x2c
 8045a3a:	fb01 f303 	mul.w	r3, r1, r3
 8045a3e:	4413      	add	r3, r2
 8045a40:	3360      	adds	r3, #96	; 0x60
 8045a42:	2205      	movs	r2, #5
 8045a44:	701a      	strb	r2, [r3, #0]
 8045a46:	e063      	b.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045a48:	687a      	ldr	r2, [r7, #4]
 8045a4a:	697b      	ldr	r3, [r7, #20]
 8045a4c:	212c      	movs	r1, #44	; 0x2c
 8045a4e:	fb01 f303 	mul.w	r3, r1, r3
 8045a52:	4413      	add	r3, r2
 8045a54:	3361      	adds	r3, #97	; 0x61
 8045a56:	781b      	ldrb	r3, [r3, #0]
 8045a58:	2b06      	cmp	r3, #6
 8045a5a:	d009      	beq.n	8045a70 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8045a5c:	687a      	ldr	r2, [r7, #4]
 8045a5e:	697b      	ldr	r3, [r7, #20]
 8045a60:	212c      	movs	r1, #44	; 0x2c
 8045a62:	fb01 f303 	mul.w	r3, r1, r3
 8045a66:	4413      	add	r3, r2
 8045a68:	3361      	adds	r3, #97	; 0x61
 8045a6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8045a6c:	2b08      	cmp	r3, #8
 8045a6e:	d14f      	bne.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8045a70:	687a      	ldr	r2, [r7, #4]
 8045a72:	697b      	ldr	r3, [r7, #20]
 8045a74:	212c      	movs	r1, #44	; 0x2c
 8045a76:	fb01 f303 	mul.w	r3, r1, r3
 8045a7a:	4413      	add	r3, r2
 8045a7c:	335c      	adds	r3, #92	; 0x5c
 8045a7e:	681b      	ldr	r3, [r3, #0]
 8045a80:	1c5a      	adds	r2, r3, #1
 8045a82:	6879      	ldr	r1, [r7, #4]
 8045a84:	697b      	ldr	r3, [r7, #20]
 8045a86:	202c      	movs	r0, #44	; 0x2c
 8045a88:	fb00 f303 	mul.w	r3, r0, r3
 8045a8c:	440b      	add	r3, r1
 8045a8e:	335c      	adds	r3, #92	; 0x5c
 8045a90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8045a92:	687a      	ldr	r2, [r7, #4]
 8045a94:	697b      	ldr	r3, [r7, #20]
 8045a96:	212c      	movs	r1, #44	; 0x2c
 8045a98:	fb01 f303 	mul.w	r3, r1, r3
 8045a9c:	4413      	add	r3, r2
 8045a9e:	335c      	adds	r3, #92	; 0x5c
 8045aa0:	681b      	ldr	r3, [r3, #0]
 8045aa2:	2b02      	cmp	r3, #2
 8045aa4:	d912      	bls.n	8045acc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8045aa6:	687a      	ldr	r2, [r7, #4]
 8045aa8:	697b      	ldr	r3, [r7, #20]
 8045aaa:	212c      	movs	r1, #44	; 0x2c
 8045aac:	fb01 f303 	mul.w	r3, r1, r3
 8045ab0:	4413      	add	r3, r2
 8045ab2:	335c      	adds	r3, #92	; 0x5c
 8045ab4:	2200      	movs	r2, #0
 8045ab6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045ab8:	687a      	ldr	r2, [r7, #4]
 8045aba:	697b      	ldr	r3, [r7, #20]
 8045abc:	212c      	movs	r1, #44	; 0x2c
 8045abe:	fb01 f303 	mul.w	r3, r1, r3
 8045ac2:	4413      	add	r3, r2
 8045ac4:	3360      	adds	r3, #96	; 0x60
 8045ac6:	2204      	movs	r2, #4
 8045ac8:	701a      	strb	r2, [r3, #0]
 8045aca:	e021      	b.n	8045b10 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8045acc:	687a      	ldr	r2, [r7, #4]
 8045ace:	697b      	ldr	r3, [r7, #20]
 8045ad0:	212c      	movs	r1, #44	; 0x2c
 8045ad2:	fb01 f303 	mul.w	r3, r1, r3
 8045ad6:	4413      	add	r3, r2
 8045ad8:	3360      	adds	r3, #96	; 0x60
 8045ada:	2202      	movs	r2, #2
 8045adc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045ade:	697b      	ldr	r3, [r7, #20]
 8045ae0:	015a      	lsls	r2, r3, #5
 8045ae2:	69bb      	ldr	r3, [r7, #24]
 8045ae4:	4413      	add	r3, r2
 8045ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045aea:	681b      	ldr	r3, [r3, #0]
 8045aec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045aee:	693b      	ldr	r3, [r7, #16]
 8045af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045af4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045af6:	693b      	ldr	r3, [r7, #16]
 8045af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045afc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045afe:	697b      	ldr	r3, [r7, #20]
 8045b00:	015a      	lsls	r2, r3, #5
 8045b02:	69bb      	ldr	r3, [r7, #24]
 8045b04:	4413      	add	r3, r2
 8045b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b0a:	461a      	mov	r2, r3
 8045b0c:	693b      	ldr	r3, [r7, #16]
 8045b0e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8045b10:	697b      	ldr	r3, [r7, #20]
 8045b12:	015a      	lsls	r2, r3, #5
 8045b14:	69bb      	ldr	r3, [r7, #24]
 8045b16:	4413      	add	r3, r2
 8045b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045b1c:	461a      	mov	r2, r3
 8045b1e:	2302      	movs	r3, #2
 8045b20:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8045b22:	697b      	ldr	r3, [r7, #20]
 8045b24:	b2d9      	uxtb	r1, r3
 8045b26:	687a      	ldr	r2, [r7, #4]
 8045b28:	697b      	ldr	r3, [r7, #20]
 8045b2a:	202c      	movs	r0, #44	; 0x2c
 8045b2c:	fb00 f303 	mul.w	r3, r0, r3
 8045b30:	4413      	add	r3, r2
 8045b32:	3360      	adds	r3, #96	; 0x60
 8045b34:	781b      	ldrb	r3, [r3, #0]
 8045b36:	461a      	mov	r2, r3
 8045b38:	6878      	ldr	r0, [r7, #4]
 8045b3a:	f006 fecd 	bl	804c8d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8045b3e:	bf00      	nop
 8045b40:	3720      	adds	r7, #32
 8045b42:	46bd      	mov	sp, r7
 8045b44:	bd80      	pop	{r7, pc}

08045b46 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045b46:	b580      	push	{r7, lr}
 8045b48:	b08a      	sub	sp, #40	; 0x28
 8045b4a:	af00      	add	r7, sp, #0
 8045b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045b4e:	687b      	ldr	r3, [r7, #4]
 8045b50:	681b      	ldr	r3, [r3, #0]
 8045b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045b56:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8045b58:	687b      	ldr	r3, [r7, #4]
 8045b5a:	681b      	ldr	r3, [r3, #0]
 8045b5c:	6a1b      	ldr	r3, [r3, #32]
 8045b5e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8045b60:	69fb      	ldr	r3, [r7, #28]
 8045b62:	f003 030f 	and.w	r3, r3, #15
 8045b66:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8045b68:	69fb      	ldr	r3, [r7, #28]
 8045b6a:	0c5b      	lsrs	r3, r3, #17
 8045b6c:	f003 030f 	and.w	r3, r3, #15
 8045b70:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8045b72:	69fb      	ldr	r3, [r7, #28]
 8045b74:	091b      	lsrs	r3, r3, #4
 8045b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8045b7a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8045b7c:	697b      	ldr	r3, [r7, #20]
 8045b7e:	2b02      	cmp	r3, #2
 8045b80:	d004      	beq.n	8045b8c <HCD_RXQLVL_IRQHandler+0x46>
 8045b82:	697b      	ldr	r3, [r7, #20]
 8045b84:	2b05      	cmp	r3, #5
 8045b86:	f000 80a9 	beq.w	8045cdc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8045b8a:	e0aa      	b.n	8045ce2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8045b8c:	693b      	ldr	r3, [r7, #16]
 8045b8e:	2b00      	cmp	r3, #0
 8045b90:	f000 80a6 	beq.w	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
 8045b94:	687a      	ldr	r2, [r7, #4]
 8045b96:	69bb      	ldr	r3, [r7, #24]
 8045b98:	212c      	movs	r1, #44	; 0x2c
 8045b9a:	fb01 f303 	mul.w	r3, r1, r3
 8045b9e:	4413      	add	r3, r2
 8045ba0:	3344      	adds	r3, #68	; 0x44
 8045ba2:	681b      	ldr	r3, [r3, #0]
 8045ba4:	2b00      	cmp	r3, #0
 8045ba6:	f000 809b 	beq.w	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8045baa:	687a      	ldr	r2, [r7, #4]
 8045bac:	69bb      	ldr	r3, [r7, #24]
 8045bae:	212c      	movs	r1, #44	; 0x2c
 8045bb0:	fb01 f303 	mul.w	r3, r1, r3
 8045bb4:	4413      	add	r3, r2
 8045bb6:	3350      	adds	r3, #80	; 0x50
 8045bb8:	681a      	ldr	r2, [r3, #0]
 8045bba:	693b      	ldr	r3, [r7, #16]
 8045bbc:	441a      	add	r2, r3
 8045bbe:	6879      	ldr	r1, [r7, #4]
 8045bc0:	69bb      	ldr	r3, [r7, #24]
 8045bc2:	202c      	movs	r0, #44	; 0x2c
 8045bc4:	fb00 f303 	mul.w	r3, r0, r3
 8045bc8:	440b      	add	r3, r1
 8045bca:	334c      	adds	r3, #76	; 0x4c
 8045bcc:	681b      	ldr	r3, [r3, #0]
 8045bce:	429a      	cmp	r2, r3
 8045bd0:	d87a      	bhi.n	8045cc8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8045bd2:	687b      	ldr	r3, [r7, #4]
 8045bd4:	6818      	ldr	r0, [r3, #0]
 8045bd6:	687a      	ldr	r2, [r7, #4]
 8045bd8:	69bb      	ldr	r3, [r7, #24]
 8045bda:	212c      	movs	r1, #44	; 0x2c
 8045bdc:	fb01 f303 	mul.w	r3, r1, r3
 8045be0:	4413      	add	r3, r2
 8045be2:	3344      	adds	r3, #68	; 0x44
 8045be4:	681b      	ldr	r3, [r3, #0]
 8045be6:	693a      	ldr	r2, [r7, #16]
 8045be8:	b292      	uxth	r2, r2
 8045bea:	4619      	mov	r1, r3
 8045bec:	f003 ff2c 	bl	8049a48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8045bf0:	687a      	ldr	r2, [r7, #4]
 8045bf2:	69bb      	ldr	r3, [r7, #24]
 8045bf4:	212c      	movs	r1, #44	; 0x2c
 8045bf6:	fb01 f303 	mul.w	r3, r1, r3
 8045bfa:	4413      	add	r3, r2
 8045bfc:	3344      	adds	r3, #68	; 0x44
 8045bfe:	681a      	ldr	r2, [r3, #0]
 8045c00:	693b      	ldr	r3, [r7, #16]
 8045c02:	441a      	add	r2, r3
 8045c04:	6879      	ldr	r1, [r7, #4]
 8045c06:	69bb      	ldr	r3, [r7, #24]
 8045c08:	202c      	movs	r0, #44	; 0x2c
 8045c0a:	fb00 f303 	mul.w	r3, r0, r3
 8045c0e:	440b      	add	r3, r1
 8045c10:	3344      	adds	r3, #68	; 0x44
 8045c12:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8045c14:	687a      	ldr	r2, [r7, #4]
 8045c16:	69bb      	ldr	r3, [r7, #24]
 8045c18:	212c      	movs	r1, #44	; 0x2c
 8045c1a:	fb01 f303 	mul.w	r3, r1, r3
 8045c1e:	4413      	add	r3, r2
 8045c20:	3350      	adds	r3, #80	; 0x50
 8045c22:	681a      	ldr	r2, [r3, #0]
 8045c24:	693b      	ldr	r3, [r7, #16]
 8045c26:	441a      	add	r2, r3
 8045c28:	6879      	ldr	r1, [r7, #4]
 8045c2a:	69bb      	ldr	r3, [r7, #24]
 8045c2c:	202c      	movs	r0, #44	; 0x2c
 8045c2e:	fb00 f303 	mul.w	r3, r0, r3
 8045c32:	440b      	add	r3, r1
 8045c34:	3350      	adds	r3, #80	; 0x50
 8045c36:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8045c38:	69bb      	ldr	r3, [r7, #24]
 8045c3a:	015a      	lsls	r2, r3, #5
 8045c3c:	6a3b      	ldr	r3, [r7, #32]
 8045c3e:	4413      	add	r3, r2
 8045c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c44:	691b      	ldr	r3, [r3, #16]
 8045c46:	0cdb      	lsrs	r3, r3, #19
 8045c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045c4c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8045c4e:	687a      	ldr	r2, [r7, #4]
 8045c50:	69bb      	ldr	r3, [r7, #24]
 8045c52:	212c      	movs	r1, #44	; 0x2c
 8045c54:	fb01 f303 	mul.w	r3, r1, r3
 8045c58:	4413      	add	r3, r2
 8045c5a:	3340      	adds	r3, #64	; 0x40
 8045c5c:	881b      	ldrh	r3, [r3, #0]
 8045c5e:	461a      	mov	r2, r3
 8045c60:	693b      	ldr	r3, [r7, #16]
 8045c62:	4293      	cmp	r3, r2
 8045c64:	d13c      	bne.n	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
 8045c66:	68fb      	ldr	r3, [r7, #12]
 8045c68:	2b00      	cmp	r3, #0
 8045c6a:	d039      	beq.n	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8045c6c:	69bb      	ldr	r3, [r7, #24]
 8045c6e:	015a      	lsls	r2, r3, #5
 8045c70:	6a3b      	ldr	r3, [r7, #32]
 8045c72:	4413      	add	r3, r2
 8045c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c78:	681b      	ldr	r3, [r3, #0]
 8045c7a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8045c7c:	68bb      	ldr	r3, [r7, #8]
 8045c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8045c82:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8045c84:	68bb      	ldr	r3, [r7, #8]
 8045c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8045c8a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8045c8c:	69bb      	ldr	r3, [r7, #24]
 8045c8e:	015a      	lsls	r2, r3, #5
 8045c90:	6a3b      	ldr	r3, [r7, #32]
 8045c92:	4413      	add	r3, r2
 8045c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8045c98:	461a      	mov	r2, r3
 8045c9a:	68bb      	ldr	r3, [r7, #8]
 8045c9c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8045c9e:	687a      	ldr	r2, [r7, #4]
 8045ca0:	69bb      	ldr	r3, [r7, #24]
 8045ca2:	212c      	movs	r1, #44	; 0x2c
 8045ca4:	fb01 f303 	mul.w	r3, r1, r3
 8045ca8:	4413      	add	r3, r2
 8045caa:	3354      	adds	r3, #84	; 0x54
 8045cac:	781b      	ldrb	r3, [r3, #0]
 8045cae:	f083 0301 	eor.w	r3, r3, #1
 8045cb2:	b2d8      	uxtb	r0, r3
 8045cb4:	687a      	ldr	r2, [r7, #4]
 8045cb6:	69bb      	ldr	r3, [r7, #24]
 8045cb8:	212c      	movs	r1, #44	; 0x2c
 8045cba:	fb01 f303 	mul.w	r3, r1, r3
 8045cbe:	4413      	add	r3, r2
 8045cc0:	3354      	adds	r3, #84	; 0x54
 8045cc2:	4602      	mov	r2, r0
 8045cc4:	701a      	strb	r2, [r3, #0]
      break;
 8045cc6:	e00b      	b.n	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8045cc8:	687a      	ldr	r2, [r7, #4]
 8045cca:	69bb      	ldr	r3, [r7, #24]
 8045ccc:	212c      	movs	r1, #44	; 0x2c
 8045cce:	fb01 f303 	mul.w	r3, r1, r3
 8045cd2:	4413      	add	r3, r2
 8045cd4:	3360      	adds	r3, #96	; 0x60
 8045cd6:	2204      	movs	r2, #4
 8045cd8:	701a      	strb	r2, [r3, #0]
      break;
 8045cda:	e001      	b.n	8045ce0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8045cdc:	bf00      	nop
 8045cde:	e000      	b.n	8045ce2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8045ce0:	bf00      	nop
  }
}
 8045ce2:	bf00      	nop
 8045ce4:	3728      	adds	r7, #40	; 0x28
 8045ce6:	46bd      	mov	sp, r7
 8045ce8:	bd80      	pop	{r7, pc}

08045cea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8045cea:	b580      	push	{r7, lr}
 8045cec:	b086      	sub	sp, #24
 8045cee:	af00      	add	r7, sp, #0
 8045cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8045cf2:	687b      	ldr	r3, [r7, #4]
 8045cf4:	681b      	ldr	r3, [r3, #0]
 8045cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8045cf8:	697b      	ldr	r3, [r7, #20]
 8045cfa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8045cfc:	693b      	ldr	r3, [r7, #16]
 8045cfe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045d02:	681b      	ldr	r3, [r3, #0]
 8045d04:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8045d06:	693b      	ldr	r3, [r7, #16]
 8045d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045d0c:	681b      	ldr	r3, [r3, #0]
 8045d0e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8045d10:	68bb      	ldr	r3, [r7, #8]
 8045d12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8045d16:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8045d18:	68fb      	ldr	r3, [r7, #12]
 8045d1a:	f003 0302 	and.w	r3, r3, #2
 8045d1e:	2b02      	cmp	r3, #2
 8045d20:	d10b      	bne.n	8045d3a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8045d22:	68fb      	ldr	r3, [r7, #12]
 8045d24:	f003 0301 	and.w	r3, r3, #1
 8045d28:	2b01      	cmp	r3, #1
 8045d2a:	d102      	bne.n	8045d32 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8045d2c:	6878      	ldr	r0, [r7, #4]
 8045d2e:	f006 fdb7 	bl	804c8a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8045d32:	68bb      	ldr	r3, [r7, #8]
 8045d34:	f043 0302 	orr.w	r3, r3, #2
 8045d38:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8045d3a:	68fb      	ldr	r3, [r7, #12]
 8045d3c:	f003 0308 	and.w	r3, r3, #8
 8045d40:	2b08      	cmp	r3, #8
 8045d42:	d132      	bne.n	8045daa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8045d44:	68bb      	ldr	r3, [r7, #8]
 8045d46:	f043 0308 	orr.w	r3, r3, #8
 8045d4a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8045d4c:	68fb      	ldr	r3, [r7, #12]
 8045d4e:	f003 0304 	and.w	r3, r3, #4
 8045d52:	2b04      	cmp	r3, #4
 8045d54:	d126      	bne.n	8045da4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8045d56:	687b      	ldr	r3, [r7, #4]
 8045d58:	699b      	ldr	r3, [r3, #24]
 8045d5a:	2b02      	cmp	r3, #2
 8045d5c:	d113      	bne.n	8045d86 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8045d5e:	68fb      	ldr	r3, [r7, #12]
 8045d60:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8045d68:	d106      	bne.n	8045d78 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8045d6a:	687b      	ldr	r3, [r7, #4]
 8045d6c:	681b      	ldr	r3, [r3, #0]
 8045d6e:	2102      	movs	r1, #2
 8045d70:	4618      	mov	r0, r3
 8045d72:	f003 ffd7 	bl	8049d24 <USB_InitFSLSPClkSel>
 8045d76:	e011      	b.n	8045d9c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8045d78:	687b      	ldr	r3, [r7, #4]
 8045d7a:	681b      	ldr	r3, [r3, #0]
 8045d7c:	2101      	movs	r1, #1
 8045d7e:	4618      	mov	r0, r3
 8045d80:	f003 ffd0 	bl	8049d24 <USB_InitFSLSPClkSel>
 8045d84:	e00a      	b.n	8045d9c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8045d86:	687b      	ldr	r3, [r7, #4]
 8045d88:	68db      	ldr	r3, [r3, #12]
 8045d8a:	2b01      	cmp	r3, #1
 8045d8c:	d106      	bne.n	8045d9c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8045d8e:	693b      	ldr	r3, [r7, #16]
 8045d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8045d94:	461a      	mov	r2, r3
 8045d96:	f64e 2360 	movw	r3, #60000	; 0xea60
 8045d9a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8045d9c:	6878      	ldr	r0, [r7, #4]
 8045d9e:	f006 fda9 	bl	804c8f4 <HAL_HCD_PortEnabled_Callback>
 8045da2:	e002      	b.n	8045daa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8045da4:	6878      	ldr	r0, [r7, #4]
 8045da6:	f006 fdb3 	bl	804c910 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8045daa:	68fb      	ldr	r3, [r7, #12]
 8045dac:	f003 0320 	and.w	r3, r3, #32
 8045db0:	2b20      	cmp	r3, #32
 8045db2:	d103      	bne.n	8045dbc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8045db4:	68bb      	ldr	r3, [r7, #8]
 8045db6:	f043 0320 	orr.w	r3, r3, #32
 8045dba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8045dbc:	693b      	ldr	r3, [r7, #16]
 8045dbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8045dc2:	461a      	mov	r2, r3
 8045dc4:	68bb      	ldr	r3, [r7, #8]
 8045dc6:	6013      	str	r3, [r2, #0]
}
 8045dc8:	bf00      	nop
 8045dca:	3718      	adds	r7, #24
 8045dcc:	46bd      	mov	sp, r7
 8045dce:	bd80      	pop	{r7, pc}

08045dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045dd0:	b580      	push	{r7, lr}
 8045dd2:	b084      	sub	sp, #16
 8045dd4:	af00      	add	r7, sp, #0
 8045dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8045dd8:	687b      	ldr	r3, [r7, #4]
 8045dda:	2b00      	cmp	r3, #0
 8045ddc:	d101      	bne.n	8045de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8045dde:	2301      	movs	r3, #1
 8045de0:	e12b      	b.n	804603a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045de2:	687b      	ldr	r3, [r7, #4]
 8045de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8045de8:	b2db      	uxtb	r3, r3
 8045dea:	2b00      	cmp	r3, #0
 8045dec:	d106      	bne.n	8045dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8045dee:	687b      	ldr	r3, [r7, #4]
 8045df0:	2200      	movs	r2, #0
 8045df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8045df6:	6878      	ldr	r0, [r7, #4]
 8045df8:	f7fb fb84 	bl	8041504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8045dfc:	687b      	ldr	r3, [r7, #4]
 8045dfe:	2224      	movs	r2, #36	; 0x24
 8045e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045e04:	687b      	ldr	r3, [r7, #4]
 8045e06:	681b      	ldr	r3, [r3, #0]
 8045e08:	681a      	ldr	r2, [r3, #0]
 8045e0a:	687b      	ldr	r3, [r7, #4]
 8045e0c:	681b      	ldr	r3, [r3, #0]
 8045e0e:	f022 0201 	bic.w	r2, r2, #1
 8045e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8045e14:	687b      	ldr	r3, [r7, #4]
 8045e16:	681b      	ldr	r3, [r3, #0]
 8045e18:	681a      	ldr	r2, [r3, #0]
 8045e1a:	687b      	ldr	r3, [r7, #4]
 8045e1c:	681b      	ldr	r3, [r3, #0]
 8045e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8045e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8045e24:	687b      	ldr	r3, [r7, #4]
 8045e26:	681b      	ldr	r3, [r3, #0]
 8045e28:	681a      	ldr	r2, [r3, #0]
 8045e2a:	687b      	ldr	r3, [r7, #4]
 8045e2c:	681b      	ldr	r3, [r3, #0]
 8045e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8045e34:	f001 fa0c 	bl	8047250 <HAL_RCC_GetPCLK1Freq>
 8045e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8045e3a:	687b      	ldr	r3, [r7, #4]
 8045e3c:	685b      	ldr	r3, [r3, #4]
 8045e3e:	4a81      	ldr	r2, [pc, #516]	; (8046044 <HAL_I2C_Init+0x274>)
 8045e40:	4293      	cmp	r3, r2
 8045e42:	d807      	bhi.n	8045e54 <HAL_I2C_Init+0x84>
 8045e44:	68fb      	ldr	r3, [r7, #12]
 8045e46:	4a80      	ldr	r2, [pc, #512]	; (8046048 <HAL_I2C_Init+0x278>)
 8045e48:	4293      	cmp	r3, r2
 8045e4a:	bf94      	ite	ls
 8045e4c:	2301      	movls	r3, #1
 8045e4e:	2300      	movhi	r3, #0
 8045e50:	b2db      	uxtb	r3, r3
 8045e52:	e006      	b.n	8045e62 <HAL_I2C_Init+0x92>
 8045e54:	68fb      	ldr	r3, [r7, #12]
 8045e56:	4a7d      	ldr	r2, [pc, #500]	; (804604c <HAL_I2C_Init+0x27c>)
 8045e58:	4293      	cmp	r3, r2
 8045e5a:	bf94      	ite	ls
 8045e5c:	2301      	movls	r3, #1
 8045e5e:	2300      	movhi	r3, #0
 8045e60:	b2db      	uxtb	r3, r3
 8045e62:	2b00      	cmp	r3, #0
 8045e64:	d001      	beq.n	8045e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8045e66:	2301      	movs	r3, #1
 8045e68:	e0e7      	b.n	804603a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8045e6a:	68fb      	ldr	r3, [r7, #12]
 8045e6c:	4a78      	ldr	r2, [pc, #480]	; (8046050 <HAL_I2C_Init+0x280>)
 8045e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8045e72:	0c9b      	lsrs	r3, r3, #18
 8045e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8045e76:	687b      	ldr	r3, [r7, #4]
 8045e78:	681b      	ldr	r3, [r3, #0]
 8045e7a:	685b      	ldr	r3, [r3, #4]
 8045e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045e80:	687b      	ldr	r3, [r7, #4]
 8045e82:	681b      	ldr	r3, [r3, #0]
 8045e84:	68ba      	ldr	r2, [r7, #8]
 8045e86:	430a      	orrs	r2, r1
 8045e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8045e8a:	687b      	ldr	r3, [r7, #4]
 8045e8c:	681b      	ldr	r3, [r3, #0]
 8045e8e:	6a1b      	ldr	r3, [r3, #32]
 8045e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8045e94:	687b      	ldr	r3, [r7, #4]
 8045e96:	685b      	ldr	r3, [r3, #4]
 8045e98:	4a6a      	ldr	r2, [pc, #424]	; (8046044 <HAL_I2C_Init+0x274>)
 8045e9a:	4293      	cmp	r3, r2
 8045e9c:	d802      	bhi.n	8045ea4 <HAL_I2C_Init+0xd4>
 8045e9e:	68bb      	ldr	r3, [r7, #8]
 8045ea0:	3301      	adds	r3, #1
 8045ea2:	e009      	b.n	8045eb8 <HAL_I2C_Init+0xe8>
 8045ea4:	68bb      	ldr	r3, [r7, #8]
 8045ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8045eaa:	fb02 f303 	mul.w	r3, r2, r3
 8045eae:	4a69      	ldr	r2, [pc, #420]	; (8046054 <HAL_I2C_Init+0x284>)
 8045eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8045eb4:	099b      	lsrs	r3, r3, #6
 8045eb6:	3301      	adds	r3, #1
 8045eb8:	687a      	ldr	r2, [r7, #4]
 8045eba:	6812      	ldr	r2, [r2, #0]
 8045ebc:	430b      	orrs	r3, r1
 8045ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8045ec0:	687b      	ldr	r3, [r7, #4]
 8045ec2:	681b      	ldr	r3, [r3, #0]
 8045ec4:	69db      	ldr	r3, [r3, #28]
 8045ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8045eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8045ece:	687b      	ldr	r3, [r7, #4]
 8045ed0:	685b      	ldr	r3, [r3, #4]
 8045ed2:	495c      	ldr	r1, [pc, #368]	; (8046044 <HAL_I2C_Init+0x274>)
 8045ed4:	428b      	cmp	r3, r1
 8045ed6:	d819      	bhi.n	8045f0c <HAL_I2C_Init+0x13c>
 8045ed8:	68fb      	ldr	r3, [r7, #12]
 8045eda:	1e59      	subs	r1, r3, #1
 8045edc:	687b      	ldr	r3, [r7, #4]
 8045ede:	685b      	ldr	r3, [r3, #4]
 8045ee0:	005b      	lsls	r3, r3, #1
 8045ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8045ee6:	1c59      	adds	r1, r3, #1
 8045ee8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8045eec:	400b      	ands	r3, r1
 8045eee:	2b00      	cmp	r3, #0
 8045ef0:	d00a      	beq.n	8045f08 <HAL_I2C_Init+0x138>
 8045ef2:	68fb      	ldr	r3, [r7, #12]
 8045ef4:	1e59      	subs	r1, r3, #1
 8045ef6:	687b      	ldr	r3, [r7, #4]
 8045ef8:	685b      	ldr	r3, [r3, #4]
 8045efa:	005b      	lsls	r3, r3, #1
 8045efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8045f00:	3301      	adds	r3, #1
 8045f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045f06:	e051      	b.n	8045fac <HAL_I2C_Init+0x1dc>
 8045f08:	2304      	movs	r3, #4
 8045f0a:	e04f      	b.n	8045fac <HAL_I2C_Init+0x1dc>
 8045f0c:	687b      	ldr	r3, [r7, #4]
 8045f0e:	689b      	ldr	r3, [r3, #8]
 8045f10:	2b00      	cmp	r3, #0
 8045f12:	d111      	bne.n	8045f38 <HAL_I2C_Init+0x168>
 8045f14:	68fb      	ldr	r3, [r7, #12]
 8045f16:	1e58      	subs	r0, r3, #1
 8045f18:	687b      	ldr	r3, [r7, #4]
 8045f1a:	6859      	ldr	r1, [r3, #4]
 8045f1c:	460b      	mov	r3, r1
 8045f1e:	005b      	lsls	r3, r3, #1
 8045f20:	440b      	add	r3, r1
 8045f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8045f26:	3301      	adds	r3, #1
 8045f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045f2c:	2b00      	cmp	r3, #0
 8045f2e:	bf0c      	ite	eq
 8045f30:	2301      	moveq	r3, #1
 8045f32:	2300      	movne	r3, #0
 8045f34:	b2db      	uxtb	r3, r3
 8045f36:	e012      	b.n	8045f5e <HAL_I2C_Init+0x18e>
 8045f38:	68fb      	ldr	r3, [r7, #12]
 8045f3a:	1e58      	subs	r0, r3, #1
 8045f3c:	687b      	ldr	r3, [r7, #4]
 8045f3e:	6859      	ldr	r1, [r3, #4]
 8045f40:	460b      	mov	r3, r1
 8045f42:	009b      	lsls	r3, r3, #2
 8045f44:	440b      	add	r3, r1
 8045f46:	0099      	lsls	r1, r3, #2
 8045f48:	440b      	add	r3, r1
 8045f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8045f4e:	3301      	adds	r3, #1
 8045f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045f54:	2b00      	cmp	r3, #0
 8045f56:	bf0c      	ite	eq
 8045f58:	2301      	moveq	r3, #1
 8045f5a:	2300      	movne	r3, #0
 8045f5c:	b2db      	uxtb	r3, r3
 8045f5e:	2b00      	cmp	r3, #0
 8045f60:	d001      	beq.n	8045f66 <HAL_I2C_Init+0x196>
 8045f62:	2301      	movs	r3, #1
 8045f64:	e022      	b.n	8045fac <HAL_I2C_Init+0x1dc>
 8045f66:	687b      	ldr	r3, [r7, #4]
 8045f68:	689b      	ldr	r3, [r3, #8]
 8045f6a:	2b00      	cmp	r3, #0
 8045f6c:	d10e      	bne.n	8045f8c <HAL_I2C_Init+0x1bc>
 8045f6e:	68fb      	ldr	r3, [r7, #12]
 8045f70:	1e58      	subs	r0, r3, #1
 8045f72:	687b      	ldr	r3, [r7, #4]
 8045f74:	6859      	ldr	r1, [r3, #4]
 8045f76:	460b      	mov	r3, r1
 8045f78:	005b      	lsls	r3, r3, #1
 8045f7a:	440b      	add	r3, r1
 8045f7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8045f80:	3301      	adds	r3, #1
 8045f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8045f8a:	e00f      	b.n	8045fac <HAL_I2C_Init+0x1dc>
 8045f8c:	68fb      	ldr	r3, [r7, #12]
 8045f8e:	1e58      	subs	r0, r3, #1
 8045f90:	687b      	ldr	r3, [r7, #4]
 8045f92:	6859      	ldr	r1, [r3, #4]
 8045f94:	460b      	mov	r3, r1
 8045f96:	009b      	lsls	r3, r3, #2
 8045f98:	440b      	add	r3, r1
 8045f9a:	0099      	lsls	r1, r3, #2
 8045f9c:	440b      	add	r3, r1
 8045f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8045fa2:	3301      	adds	r3, #1
 8045fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8045fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8045fac:	6879      	ldr	r1, [r7, #4]
 8045fae:	6809      	ldr	r1, [r1, #0]
 8045fb0:	4313      	orrs	r3, r2
 8045fb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8045fb4:	687b      	ldr	r3, [r7, #4]
 8045fb6:	681b      	ldr	r3, [r3, #0]
 8045fb8:	681b      	ldr	r3, [r3, #0]
 8045fba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8045fbe:	687b      	ldr	r3, [r7, #4]
 8045fc0:	69da      	ldr	r2, [r3, #28]
 8045fc2:	687b      	ldr	r3, [r7, #4]
 8045fc4:	6a1b      	ldr	r3, [r3, #32]
 8045fc6:	431a      	orrs	r2, r3
 8045fc8:	687b      	ldr	r3, [r7, #4]
 8045fca:	681b      	ldr	r3, [r3, #0]
 8045fcc:	430a      	orrs	r2, r1
 8045fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8045fd0:	687b      	ldr	r3, [r7, #4]
 8045fd2:	681b      	ldr	r3, [r3, #0]
 8045fd4:	689b      	ldr	r3, [r3, #8]
 8045fd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8045fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8045fde:	687a      	ldr	r2, [r7, #4]
 8045fe0:	6911      	ldr	r1, [r2, #16]
 8045fe2:	687a      	ldr	r2, [r7, #4]
 8045fe4:	68d2      	ldr	r2, [r2, #12]
 8045fe6:	4311      	orrs	r1, r2
 8045fe8:	687a      	ldr	r2, [r7, #4]
 8045fea:	6812      	ldr	r2, [r2, #0]
 8045fec:	430b      	orrs	r3, r1
 8045fee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8045ff0:	687b      	ldr	r3, [r7, #4]
 8045ff2:	681b      	ldr	r3, [r3, #0]
 8045ff4:	68db      	ldr	r3, [r3, #12]
 8045ff6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8045ffa:	687b      	ldr	r3, [r7, #4]
 8045ffc:	695a      	ldr	r2, [r3, #20]
 8045ffe:	687b      	ldr	r3, [r7, #4]
 8046000:	699b      	ldr	r3, [r3, #24]
 8046002:	431a      	orrs	r2, r3
 8046004:	687b      	ldr	r3, [r7, #4]
 8046006:	681b      	ldr	r3, [r3, #0]
 8046008:	430a      	orrs	r2, r1
 804600a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 804600c:	687b      	ldr	r3, [r7, #4]
 804600e:	681b      	ldr	r3, [r3, #0]
 8046010:	681a      	ldr	r2, [r3, #0]
 8046012:	687b      	ldr	r3, [r7, #4]
 8046014:	681b      	ldr	r3, [r3, #0]
 8046016:	f042 0201 	orr.w	r2, r2, #1
 804601a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 804601c:	687b      	ldr	r3, [r7, #4]
 804601e:	2200      	movs	r2, #0
 8046020:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8046022:	687b      	ldr	r3, [r7, #4]
 8046024:	2220      	movs	r2, #32
 8046026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 804602a:	687b      	ldr	r3, [r7, #4]
 804602c:	2200      	movs	r2, #0
 804602e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8046030:	687b      	ldr	r3, [r7, #4]
 8046032:	2200      	movs	r2, #0
 8046034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8046038:	2300      	movs	r3, #0
}
 804603a:	4618      	mov	r0, r3
 804603c:	3710      	adds	r7, #16
 804603e:	46bd      	mov	sp, r7
 8046040:	bd80      	pop	{r7, pc}
 8046042:	bf00      	nop
 8046044:	000186a0 	.word	0x000186a0
 8046048:	001e847f 	.word	0x001e847f
 804604c:	003d08ff 	.word	0x003d08ff
 8046050:	431bde83 	.word	0x431bde83
 8046054:	10624dd3 	.word	0x10624dd3

08046058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8046058:	b480      	push	{r7}
 804605a:	b083      	sub	sp, #12
 804605c:	af00      	add	r7, sp, #0
 804605e:	6078      	str	r0, [r7, #4]
 8046060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8046062:	687b      	ldr	r3, [r7, #4]
 8046064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8046068:	b2db      	uxtb	r3, r3
 804606a:	2b20      	cmp	r3, #32
 804606c:	d129      	bne.n	80460c2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 804606e:	687b      	ldr	r3, [r7, #4]
 8046070:	2224      	movs	r2, #36	; 0x24
 8046072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8046076:	687b      	ldr	r3, [r7, #4]
 8046078:	681b      	ldr	r3, [r3, #0]
 804607a:	681a      	ldr	r2, [r3, #0]
 804607c:	687b      	ldr	r3, [r7, #4]
 804607e:	681b      	ldr	r3, [r3, #0]
 8046080:	f022 0201 	bic.w	r2, r2, #1
 8046084:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8046086:	687b      	ldr	r3, [r7, #4]
 8046088:	681b      	ldr	r3, [r3, #0]
 804608a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804608c:	687b      	ldr	r3, [r7, #4]
 804608e:	681b      	ldr	r3, [r3, #0]
 8046090:	f022 0210 	bic.w	r2, r2, #16
 8046094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8046096:	687b      	ldr	r3, [r7, #4]
 8046098:	681b      	ldr	r3, [r3, #0]
 804609a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 804609c:	687b      	ldr	r3, [r7, #4]
 804609e:	681b      	ldr	r3, [r3, #0]
 80460a0:	683a      	ldr	r2, [r7, #0]
 80460a2:	430a      	orrs	r2, r1
 80460a4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80460a6:	687b      	ldr	r3, [r7, #4]
 80460a8:	681b      	ldr	r3, [r3, #0]
 80460aa:	681a      	ldr	r2, [r3, #0]
 80460ac:	687b      	ldr	r3, [r7, #4]
 80460ae:	681b      	ldr	r3, [r3, #0]
 80460b0:	f042 0201 	orr.w	r2, r2, #1
 80460b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80460b6:	687b      	ldr	r3, [r7, #4]
 80460b8:	2220      	movs	r2, #32
 80460ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80460be:	2300      	movs	r3, #0
 80460c0:	e000      	b.n	80460c4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80460c2:	2302      	movs	r3, #2
  }
}
 80460c4:	4618      	mov	r0, r3
 80460c6:	370c      	adds	r7, #12
 80460c8:	46bd      	mov	sp, r7
 80460ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80460ce:	4770      	bx	lr

080460d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80460d0:	b480      	push	{r7}
 80460d2:	b085      	sub	sp, #20
 80460d4:	af00      	add	r7, sp, #0
 80460d6:	6078      	str	r0, [r7, #4]
 80460d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80460da:	2300      	movs	r3, #0
 80460dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80460de:	687b      	ldr	r3, [r7, #4]
 80460e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80460e4:	b2db      	uxtb	r3, r3
 80460e6:	2b20      	cmp	r3, #32
 80460e8:	d12a      	bne.n	8046140 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80460ea:	687b      	ldr	r3, [r7, #4]
 80460ec:	2224      	movs	r2, #36	; 0x24
 80460ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80460f2:	687b      	ldr	r3, [r7, #4]
 80460f4:	681b      	ldr	r3, [r3, #0]
 80460f6:	681a      	ldr	r2, [r3, #0]
 80460f8:	687b      	ldr	r3, [r7, #4]
 80460fa:	681b      	ldr	r3, [r3, #0]
 80460fc:	f022 0201 	bic.w	r2, r2, #1
 8046100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8046102:	687b      	ldr	r3, [r7, #4]
 8046104:	681b      	ldr	r3, [r3, #0]
 8046106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046108:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 804610a:	89fb      	ldrh	r3, [r7, #14]
 804610c:	f023 030f 	bic.w	r3, r3, #15
 8046110:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8046112:	683b      	ldr	r3, [r7, #0]
 8046114:	b29a      	uxth	r2, r3
 8046116:	89fb      	ldrh	r3, [r7, #14]
 8046118:	4313      	orrs	r3, r2
 804611a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 804611c:	687b      	ldr	r3, [r7, #4]
 804611e:	681b      	ldr	r3, [r3, #0]
 8046120:	89fa      	ldrh	r2, [r7, #14]
 8046122:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8046124:	687b      	ldr	r3, [r7, #4]
 8046126:	681b      	ldr	r3, [r3, #0]
 8046128:	681a      	ldr	r2, [r3, #0]
 804612a:	687b      	ldr	r3, [r7, #4]
 804612c:	681b      	ldr	r3, [r3, #0]
 804612e:	f042 0201 	orr.w	r2, r2, #1
 8046132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8046134:	687b      	ldr	r3, [r7, #4]
 8046136:	2220      	movs	r2, #32
 8046138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 804613c:	2300      	movs	r3, #0
 804613e:	e000      	b.n	8046142 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8046140:	2302      	movs	r3, #2
  }
}
 8046142:	4618      	mov	r0, r3
 8046144:	3714      	adds	r7, #20
 8046146:	46bd      	mov	sp, r7
 8046148:	f85d 7b04 	ldr.w	r7, [sp], #4
 804614c:	4770      	bx	lr
	...

08046150 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8046150:	b580      	push	{r7, lr}
 8046152:	b084      	sub	sp, #16
 8046154:	af00      	add	r7, sp, #0
 8046156:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8046158:	687b      	ldr	r3, [r7, #4]
 804615a:	2b00      	cmp	r3, #0
 804615c:	d101      	bne.n	8046162 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 804615e:	2301      	movs	r3, #1
 8046160:	e0bf      	b.n	80462e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8046162:	687b      	ldr	r3, [r7, #4]
 8046164:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8046168:	b2db      	uxtb	r3, r3
 804616a:	2b00      	cmp	r3, #0
 804616c:	d106      	bne.n	804617c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 804616e:	687b      	ldr	r3, [r7, #4]
 8046170:	2200      	movs	r2, #0
 8046172:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8046176:	6878      	ldr	r0, [r7, #4]
 8046178:	f7fb fa2e 	bl	80415d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 804617c:	687b      	ldr	r3, [r7, #4]
 804617e:	2202      	movs	r2, #2
 8046180:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8046184:	687b      	ldr	r3, [r7, #4]
 8046186:	681b      	ldr	r3, [r3, #0]
 8046188:	699a      	ldr	r2, [r3, #24]
 804618a:	687b      	ldr	r3, [r7, #4]
 804618c:	681b      	ldr	r3, [r3, #0]
 804618e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8046192:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8046194:	687b      	ldr	r3, [r7, #4]
 8046196:	681b      	ldr	r3, [r3, #0]
 8046198:	6999      	ldr	r1, [r3, #24]
 804619a:	687b      	ldr	r3, [r7, #4]
 804619c:	685a      	ldr	r2, [r3, #4]
 804619e:	687b      	ldr	r3, [r7, #4]
 80461a0:	689b      	ldr	r3, [r3, #8]
 80461a2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80461a4:	687b      	ldr	r3, [r7, #4]
 80461a6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80461a8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80461aa:	687b      	ldr	r3, [r7, #4]
 80461ac:	691b      	ldr	r3, [r3, #16]
 80461ae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80461b0:	687b      	ldr	r3, [r7, #4]
 80461b2:	681b      	ldr	r3, [r3, #0]
 80461b4:	430a      	orrs	r2, r1
 80461b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80461b8:	687b      	ldr	r3, [r7, #4]
 80461ba:	681b      	ldr	r3, [r3, #0]
 80461bc:	6899      	ldr	r1, [r3, #8]
 80461be:	687b      	ldr	r3, [r7, #4]
 80461c0:	681a      	ldr	r2, [r3, #0]
 80461c2:	4b4a      	ldr	r3, [pc, #296]	; (80462ec <HAL_LTDC_Init+0x19c>)
 80461c4:	400b      	ands	r3, r1
 80461c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80461c8:	687b      	ldr	r3, [r7, #4]
 80461ca:	695b      	ldr	r3, [r3, #20]
 80461cc:	041b      	lsls	r3, r3, #16
 80461ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80461d0:	687b      	ldr	r3, [r7, #4]
 80461d2:	681b      	ldr	r3, [r3, #0]
 80461d4:	6899      	ldr	r1, [r3, #8]
 80461d6:	687b      	ldr	r3, [r7, #4]
 80461d8:	699a      	ldr	r2, [r3, #24]
 80461da:	68fb      	ldr	r3, [r7, #12]
 80461dc:	431a      	orrs	r2, r3
 80461de:	687b      	ldr	r3, [r7, #4]
 80461e0:	681b      	ldr	r3, [r3, #0]
 80461e2:	430a      	orrs	r2, r1
 80461e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80461e6:	687b      	ldr	r3, [r7, #4]
 80461e8:	681b      	ldr	r3, [r3, #0]
 80461ea:	68d9      	ldr	r1, [r3, #12]
 80461ec:	687b      	ldr	r3, [r7, #4]
 80461ee:	681a      	ldr	r2, [r3, #0]
 80461f0:	4b3e      	ldr	r3, [pc, #248]	; (80462ec <HAL_LTDC_Init+0x19c>)
 80461f2:	400b      	ands	r3, r1
 80461f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80461f6:	687b      	ldr	r3, [r7, #4]
 80461f8:	69db      	ldr	r3, [r3, #28]
 80461fa:	041b      	lsls	r3, r3, #16
 80461fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80461fe:	687b      	ldr	r3, [r7, #4]
 8046200:	681b      	ldr	r3, [r3, #0]
 8046202:	68d9      	ldr	r1, [r3, #12]
 8046204:	687b      	ldr	r3, [r7, #4]
 8046206:	6a1a      	ldr	r2, [r3, #32]
 8046208:	68fb      	ldr	r3, [r7, #12]
 804620a:	431a      	orrs	r2, r3
 804620c:	687b      	ldr	r3, [r7, #4]
 804620e:	681b      	ldr	r3, [r3, #0]
 8046210:	430a      	orrs	r2, r1
 8046212:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8046214:	687b      	ldr	r3, [r7, #4]
 8046216:	681b      	ldr	r3, [r3, #0]
 8046218:	6919      	ldr	r1, [r3, #16]
 804621a:	687b      	ldr	r3, [r7, #4]
 804621c:	681a      	ldr	r2, [r3, #0]
 804621e:	4b33      	ldr	r3, [pc, #204]	; (80462ec <HAL_LTDC_Init+0x19c>)
 8046220:	400b      	ands	r3, r1
 8046222:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8046224:	687b      	ldr	r3, [r7, #4]
 8046226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046228:	041b      	lsls	r3, r3, #16
 804622a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 804622c:	687b      	ldr	r3, [r7, #4]
 804622e:	681b      	ldr	r3, [r3, #0]
 8046230:	6919      	ldr	r1, [r3, #16]
 8046232:	687b      	ldr	r3, [r7, #4]
 8046234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8046236:	68fb      	ldr	r3, [r7, #12]
 8046238:	431a      	orrs	r2, r3
 804623a:	687b      	ldr	r3, [r7, #4]
 804623c:	681b      	ldr	r3, [r3, #0]
 804623e:	430a      	orrs	r2, r1
 8046240:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8046242:	687b      	ldr	r3, [r7, #4]
 8046244:	681b      	ldr	r3, [r3, #0]
 8046246:	6959      	ldr	r1, [r3, #20]
 8046248:	687b      	ldr	r3, [r7, #4]
 804624a:	681a      	ldr	r2, [r3, #0]
 804624c:	4b27      	ldr	r3, [pc, #156]	; (80462ec <HAL_LTDC_Init+0x19c>)
 804624e:	400b      	ands	r3, r1
 8046250:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8046252:	687b      	ldr	r3, [r7, #4]
 8046254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046256:	041b      	lsls	r3, r3, #16
 8046258:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 804625a:	687b      	ldr	r3, [r7, #4]
 804625c:	681b      	ldr	r3, [r3, #0]
 804625e:	6959      	ldr	r1, [r3, #20]
 8046260:	687b      	ldr	r3, [r7, #4]
 8046262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046264:	68fb      	ldr	r3, [r7, #12]
 8046266:	431a      	orrs	r2, r3
 8046268:	687b      	ldr	r3, [r7, #4]
 804626a:	681b      	ldr	r3, [r3, #0]
 804626c:	430a      	orrs	r2, r1
 804626e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8046270:	687b      	ldr	r3, [r7, #4]
 8046272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8046276:	021b      	lsls	r3, r3, #8
 8046278:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 804627a:	687b      	ldr	r3, [r7, #4]
 804627c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8046280:	041b      	lsls	r3, r3, #16
 8046282:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8046284:	687b      	ldr	r3, [r7, #4]
 8046286:	681b      	ldr	r3, [r3, #0]
 8046288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804628a:	687b      	ldr	r3, [r7, #4]
 804628c:	681b      	ldr	r3, [r3, #0]
 804628e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8046292:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8046294:	687b      	ldr	r3, [r7, #4]
 8046296:	681b      	ldr	r3, [r3, #0]
 8046298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 804629a:	68ba      	ldr	r2, [r7, #8]
 804629c:	68fb      	ldr	r3, [r7, #12]
 804629e:	4313      	orrs	r3, r2
 80462a0:	687a      	ldr	r2, [r7, #4]
 80462a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80462a6:	431a      	orrs	r2, r3
 80462a8:	687b      	ldr	r3, [r7, #4]
 80462aa:	681b      	ldr	r3, [r3, #0]
 80462ac:	430a      	orrs	r2, r1
 80462ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80462b0:	687b      	ldr	r3, [r7, #4]
 80462b2:	681b      	ldr	r3, [r3, #0]
 80462b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80462b6:	687b      	ldr	r3, [r7, #4]
 80462b8:	681b      	ldr	r3, [r3, #0]
 80462ba:	f042 0206 	orr.w	r2, r2, #6
 80462be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80462c0:	687b      	ldr	r3, [r7, #4]
 80462c2:	681b      	ldr	r3, [r3, #0]
 80462c4:	699a      	ldr	r2, [r3, #24]
 80462c6:	687b      	ldr	r3, [r7, #4]
 80462c8:	681b      	ldr	r3, [r3, #0]
 80462ca:	f042 0201 	orr.w	r2, r2, #1
 80462ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80462d0:	687b      	ldr	r3, [r7, #4]
 80462d2:	2200      	movs	r2, #0
 80462d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80462d8:	687b      	ldr	r3, [r7, #4]
 80462da:	2201      	movs	r2, #1
 80462dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80462e0:	2300      	movs	r3, #0
}
 80462e2:	4618      	mov	r0, r3
 80462e4:	3710      	adds	r7, #16
 80462e6:	46bd      	mov	sp, r7
 80462e8:	bd80      	pop	{r7, pc}
 80462ea:	bf00      	nop
 80462ec:	f000f800 	.word	0xf000f800

080462f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80462f0:	b580      	push	{r7, lr}
 80462f2:	b084      	sub	sp, #16
 80462f4:	af00      	add	r7, sp, #0
 80462f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80462f8:	687b      	ldr	r3, [r7, #4]
 80462fa:	681b      	ldr	r3, [r3, #0]
 80462fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80462fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8046300:	687b      	ldr	r3, [r7, #4]
 8046302:	681b      	ldr	r3, [r3, #0]
 8046304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046306:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8046308:	68fb      	ldr	r3, [r7, #12]
 804630a:	f003 0304 	and.w	r3, r3, #4
 804630e:	2b00      	cmp	r3, #0
 8046310:	d023      	beq.n	804635a <HAL_LTDC_IRQHandler+0x6a>
 8046312:	68bb      	ldr	r3, [r7, #8]
 8046314:	f003 0304 	and.w	r3, r3, #4
 8046318:	2b00      	cmp	r3, #0
 804631a:	d01e      	beq.n	804635a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 804631c:	687b      	ldr	r3, [r7, #4]
 804631e:	681b      	ldr	r3, [r3, #0]
 8046320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046322:	687b      	ldr	r3, [r7, #4]
 8046324:	681b      	ldr	r3, [r3, #0]
 8046326:	f022 0204 	bic.w	r2, r2, #4
 804632a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 804632c:	687b      	ldr	r3, [r7, #4]
 804632e:	681b      	ldr	r3, [r3, #0]
 8046330:	2204      	movs	r2, #4
 8046332:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8046334:	687b      	ldr	r3, [r7, #4]
 8046336:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 804633a:	f043 0201 	orr.w	r2, r3, #1
 804633e:	687b      	ldr	r3, [r7, #4]
 8046340:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8046344:	687b      	ldr	r3, [r7, #4]
 8046346:	2204      	movs	r2, #4
 8046348:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 804634c:	687b      	ldr	r3, [r7, #4]
 804634e:	2200      	movs	r2, #0
 8046350:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8046354:	6878      	ldr	r0, [r7, #4]
 8046356:	f000 f86f 	bl	8046438 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 804635a:	68fb      	ldr	r3, [r7, #12]
 804635c:	f003 0302 	and.w	r3, r3, #2
 8046360:	2b00      	cmp	r3, #0
 8046362:	d023      	beq.n	80463ac <HAL_LTDC_IRQHandler+0xbc>
 8046364:	68bb      	ldr	r3, [r7, #8]
 8046366:	f003 0302 	and.w	r3, r3, #2
 804636a:	2b00      	cmp	r3, #0
 804636c:	d01e      	beq.n	80463ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 804636e:	687b      	ldr	r3, [r7, #4]
 8046370:	681b      	ldr	r3, [r3, #0]
 8046372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046374:	687b      	ldr	r3, [r7, #4]
 8046376:	681b      	ldr	r3, [r3, #0]
 8046378:	f022 0202 	bic.w	r2, r2, #2
 804637c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 804637e:	687b      	ldr	r3, [r7, #4]
 8046380:	681b      	ldr	r3, [r3, #0]
 8046382:	2202      	movs	r2, #2
 8046384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8046386:	687b      	ldr	r3, [r7, #4]
 8046388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 804638c:	f043 0202 	orr.w	r2, r3, #2
 8046390:	687b      	ldr	r3, [r7, #4]
 8046392:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8046396:	687b      	ldr	r3, [r7, #4]
 8046398:	2204      	movs	r2, #4
 804639a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 804639e:	687b      	ldr	r3, [r7, #4]
 80463a0:	2200      	movs	r2, #0
 80463a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80463a6:	6878      	ldr	r0, [r7, #4]
 80463a8:	f000 f846 	bl	8046438 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80463ac:	68fb      	ldr	r3, [r7, #12]
 80463ae:	f003 0301 	and.w	r3, r3, #1
 80463b2:	2b00      	cmp	r3, #0
 80463b4:	d01b      	beq.n	80463ee <HAL_LTDC_IRQHandler+0xfe>
 80463b6:	68bb      	ldr	r3, [r7, #8]
 80463b8:	f003 0301 	and.w	r3, r3, #1
 80463bc:	2b00      	cmp	r3, #0
 80463be:	d016      	beq.n	80463ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80463c0:	687b      	ldr	r3, [r7, #4]
 80463c2:	681b      	ldr	r3, [r3, #0]
 80463c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80463c6:	687b      	ldr	r3, [r7, #4]
 80463c8:	681b      	ldr	r3, [r3, #0]
 80463ca:	f022 0201 	bic.w	r2, r2, #1
 80463ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80463d0:	687b      	ldr	r3, [r7, #4]
 80463d2:	681b      	ldr	r3, [r3, #0]
 80463d4:	2201      	movs	r2, #1
 80463d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80463d8:	687b      	ldr	r3, [r7, #4]
 80463da:	2201      	movs	r2, #1
 80463dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80463e0:	687b      	ldr	r3, [r7, #4]
 80463e2:	2200      	movs	r2, #0
 80463e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80463e8:	6878      	ldr	r0, [r7, #4]
 80463ea:	f000 f82f 	bl	804644c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80463ee:	68fb      	ldr	r3, [r7, #12]
 80463f0:	f003 0308 	and.w	r3, r3, #8
 80463f4:	2b00      	cmp	r3, #0
 80463f6:	d01b      	beq.n	8046430 <HAL_LTDC_IRQHandler+0x140>
 80463f8:	68bb      	ldr	r3, [r7, #8]
 80463fa:	f003 0308 	and.w	r3, r3, #8
 80463fe:	2b00      	cmp	r3, #0
 8046400:	d016      	beq.n	8046430 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8046402:	687b      	ldr	r3, [r7, #4]
 8046404:	681b      	ldr	r3, [r3, #0]
 8046406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046408:	687b      	ldr	r3, [r7, #4]
 804640a:	681b      	ldr	r3, [r3, #0]
 804640c:	f022 0208 	bic.w	r2, r2, #8
 8046410:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8046412:	687b      	ldr	r3, [r7, #4]
 8046414:	681b      	ldr	r3, [r3, #0]
 8046416:	2208      	movs	r2, #8
 8046418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 804641a:	687b      	ldr	r3, [r7, #4]
 804641c:	2201      	movs	r2, #1
 804641e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8046422:	687b      	ldr	r3, [r7, #4]
 8046424:	2200      	movs	r2, #0
 8046426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 804642a:	6878      	ldr	r0, [r7, #4]
 804642c:	f000 f818 	bl	8046460 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8046430:	bf00      	nop
 8046432:	3710      	adds	r7, #16
 8046434:	46bd      	mov	sp, r7
 8046436:	bd80      	pop	{r7, pc}

08046438 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8046438:	b480      	push	{r7}
 804643a:	b083      	sub	sp, #12
 804643c:	af00      	add	r7, sp, #0
 804643e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8046440:	bf00      	nop
 8046442:	370c      	adds	r7, #12
 8046444:	46bd      	mov	sp, r7
 8046446:	f85d 7b04 	ldr.w	r7, [sp], #4
 804644a:	4770      	bx	lr

0804644c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 804644c:	b480      	push	{r7}
 804644e:	b083      	sub	sp, #12
 8046450:	af00      	add	r7, sp, #0
 8046452:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8046454:	bf00      	nop
 8046456:	370c      	adds	r7, #12
 8046458:	46bd      	mov	sp, r7
 804645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804645e:	4770      	bx	lr

08046460 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8046460:	b480      	push	{r7}
 8046462:	b083      	sub	sp, #12
 8046464:	af00      	add	r7, sp, #0
 8046466:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8046468:	bf00      	nop
 804646a:	370c      	adds	r7, #12
 804646c:	46bd      	mov	sp, r7
 804646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046472:	4770      	bx	lr

08046474 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046474:	b5b0      	push	{r4, r5, r7, lr}
 8046476:	b084      	sub	sp, #16
 8046478:	af00      	add	r7, sp, #0
 804647a:	60f8      	str	r0, [r7, #12]
 804647c:	60b9      	str	r1, [r7, #8]
 804647e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046480:	68fb      	ldr	r3, [r7, #12]
 8046482:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046486:	2b01      	cmp	r3, #1
 8046488:	d101      	bne.n	804648e <HAL_LTDC_ConfigLayer+0x1a>
 804648a:	2302      	movs	r3, #2
 804648c:	e02c      	b.n	80464e8 <HAL_LTDC_ConfigLayer+0x74>
 804648e:	68fb      	ldr	r3, [r7, #12]
 8046490:	2201      	movs	r2, #1
 8046492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046496:	68fb      	ldr	r3, [r7, #12]
 8046498:	2202      	movs	r2, #2
 804649a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 804649e:	68fa      	ldr	r2, [r7, #12]
 80464a0:	687b      	ldr	r3, [r7, #4]
 80464a2:	2134      	movs	r1, #52	; 0x34
 80464a4:	fb01 f303 	mul.w	r3, r1, r3
 80464a8:	4413      	add	r3, r2
 80464aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80464ae:	68bb      	ldr	r3, [r7, #8]
 80464b0:	4614      	mov	r4, r2
 80464b2:	461d      	mov	r5, r3
 80464b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80464b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80464b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80464ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80464bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80464be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80464c0:	682b      	ldr	r3, [r5, #0]
 80464c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80464c4:	687a      	ldr	r2, [r7, #4]
 80464c6:	68b9      	ldr	r1, [r7, #8]
 80464c8:	68f8      	ldr	r0, [r7, #12]
 80464ca:	f000 f8b9 	bl	8046640 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80464ce:	68fb      	ldr	r3, [r7, #12]
 80464d0:	681b      	ldr	r3, [r3, #0]
 80464d2:	2201      	movs	r2, #1
 80464d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80464d6:	68fb      	ldr	r3, [r7, #12]
 80464d8:	2201      	movs	r2, #1
 80464da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80464de:	68fb      	ldr	r3, [r7, #12]
 80464e0:	2200      	movs	r2, #0
 80464e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80464e6:	2300      	movs	r3, #0
}
 80464e8:	4618      	mov	r0, r3
 80464ea:	3710      	adds	r7, #16
 80464ec:	46bd      	mov	sp, r7
 80464ee:	bdb0      	pop	{r4, r5, r7, pc}

080464f0 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 80464f0:	b480      	push	{r7}
 80464f2:	b085      	sub	sp, #20
 80464f4:	af00      	add	r7, sp, #0
 80464f6:	60f8      	str	r0, [r7, #12]
 80464f8:	60b9      	str	r1, [r7, #8]
 80464fa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80464fc:	68fb      	ldr	r3, [r7, #12]
 80464fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046502:	2b01      	cmp	r3, #1
 8046504:	d101      	bne.n	804650a <HAL_LTDC_ConfigColorKeying+0x1a>
 8046506:	2302      	movs	r3, #2
 8046508:	e030      	b.n	804656c <HAL_LTDC_ConfigColorKeying+0x7c>
 804650a:	68fb      	ldr	r3, [r7, #12]
 804650c:	2201      	movs	r2, #1
 804650e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046512:	68fb      	ldr	r3, [r7, #12]
 8046514:	2202      	movs	r2, #2
 8046516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 804651a:	68fb      	ldr	r3, [r7, #12]
 804651c:	681b      	ldr	r3, [r3, #0]
 804651e:	461a      	mov	r2, r3
 8046520:	687b      	ldr	r3, [r7, #4]
 8046522:	01db      	lsls	r3, r3, #7
 8046524:	4413      	add	r3, r2
 8046526:	3384      	adds	r3, #132	; 0x84
 8046528:	68db      	ldr	r3, [r3, #12]
 804652a:	68fa      	ldr	r2, [r7, #12]
 804652c:	6812      	ldr	r2, [r2, #0]
 804652e:	4611      	mov	r1, r2
 8046530:	687a      	ldr	r2, [r7, #4]
 8046532:	01d2      	lsls	r2, r2, #7
 8046534:	440a      	add	r2, r1
 8046536:	3284      	adds	r2, #132	; 0x84
 8046538:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 804653c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 804653e:	68fb      	ldr	r3, [r7, #12]
 8046540:	681b      	ldr	r3, [r3, #0]
 8046542:	461a      	mov	r2, r3
 8046544:	687b      	ldr	r3, [r7, #4]
 8046546:	01db      	lsls	r3, r3, #7
 8046548:	4413      	add	r3, r2
 804654a:	3384      	adds	r3, #132	; 0x84
 804654c:	461a      	mov	r2, r3
 804654e:	68bb      	ldr	r3, [r7, #8]
 8046550:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8046552:	68fb      	ldr	r3, [r7, #12]
 8046554:	681b      	ldr	r3, [r3, #0]
 8046556:	2201      	movs	r2, #1
 8046558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804655a:	68fb      	ldr	r3, [r7, #12]
 804655c:	2201      	movs	r2, #1
 804655e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046562:	68fb      	ldr	r3, [r7, #12]
 8046564:	2200      	movs	r2, #0
 8046566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804656a:	2300      	movs	r3, #0
}
 804656c:	4618      	mov	r0, r3
 804656e:	3714      	adds	r7, #20
 8046570:	46bd      	mov	sp, r7
 8046572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046576:	4770      	bx	lr

08046578 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8046578:	b480      	push	{r7}
 804657a:	b083      	sub	sp, #12
 804657c:	af00      	add	r7, sp, #0
 804657e:	6078      	str	r0, [r7, #4]
 8046580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8046582:	687b      	ldr	r3, [r7, #4]
 8046584:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8046588:	2b01      	cmp	r3, #1
 804658a:	d101      	bne.n	8046590 <HAL_LTDC_EnableColorKeying+0x18>
 804658c:	2302      	movs	r3, #2
 804658e:	e026      	b.n	80465de <HAL_LTDC_EnableColorKeying+0x66>
 8046590:	687b      	ldr	r3, [r7, #4]
 8046592:	2201      	movs	r2, #1
 8046594:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8046598:	687b      	ldr	r3, [r7, #4]
 804659a:	2202      	movs	r2, #2
 804659c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80465a0:	687b      	ldr	r3, [r7, #4]
 80465a2:	681b      	ldr	r3, [r3, #0]
 80465a4:	461a      	mov	r2, r3
 80465a6:	683b      	ldr	r3, [r7, #0]
 80465a8:	01db      	lsls	r3, r3, #7
 80465aa:	4413      	add	r3, r2
 80465ac:	3384      	adds	r3, #132	; 0x84
 80465ae:	681b      	ldr	r3, [r3, #0]
 80465b0:	687a      	ldr	r2, [r7, #4]
 80465b2:	6812      	ldr	r2, [r2, #0]
 80465b4:	4611      	mov	r1, r2
 80465b6:	683a      	ldr	r2, [r7, #0]
 80465b8:	01d2      	lsls	r2, r2, #7
 80465ba:	440a      	add	r2, r1
 80465bc:	3284      	adds	r2, #132	; 0x84
 80465be:	f043 0302 	orr.w	r3, r3, #2
 80465c2:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80465c4:	687b      	ldr	r3, [r7, #4]
 80465c6:	681b      	ldr	r3, [r3, #0]
 80465c8:	2201      	movs	r2, #1
 80465ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80465cc:	687b      	ldr	r3, [r7, #4]
 80465ce:	2201      	movs	r2, #1
 80465d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80465d4:	687b      	ldr	r3, [r7, #4]
 80465d6:	2200      	movs	r2, #0
 80465d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80465dc:	2300      	movs	r3, #0
}
 80465de:	4618      	mov	r0, r3
 80465e0:	370c      	adds	r7, #12
 80465e2:	46bd      	mov	sp, r7
 80465e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80465e8:	4770      	bx	lr
	...

080465ec <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80465ec:	b480      	push	{r7}
 80465ee:	b083      	sub	sp, #12
 80465f0:	af00      	add	r7, sp, #0
 80465f2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80465f4:	687b      	ldr	r3, [r7, #4]
 80465f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80465fa:	2b01      	cmp	r3, #1
 80465fc:	d101      	bne.n	8046602 <HAL_LTDC_EnableDither+0x16>
 80465fe:	2302      	movs	r3, #2
 8046600:	e016      	b.n	8046630 <HAL_LTDC_EnableDither+0x44>
 8046602:	687b      	ldr	r3, [r7, #4]
 8046604:	2201      	movs	r2, #1
 8046606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 804660a:	687b      	ldr	r3, [r7, #4]
 804660c:	2202      	movs	r2, #2
 804660e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8046612:	4b0a      	ldr	r3, [pc, #40]	; (804663c <HAL_LTDC_EnableDither+0x50>)
 8046614:	699b      	ldr	r3, [r3, #24]
 8046616:	4a09      	ldr	r2, [pc, #36]	; (804663c <HAL_LTDC_EnableDither+0x50>)
 8046618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804661c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 804661e:	687b      	ldr	r3, [r7, #4]
 8046620:	2201      	movs	r2, #1
 8046622:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8046626:	687b      	ldr	r3, [r7, #4]
 8046628:	2200      	movs	r2, #0
 804662a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 804662e:	2300      	movs	r3, #0
}
 8046630:	4618      	mov	r0, r3
 8046632:	370c      	adds	r7, #12
 8046634:	46bd      	mov	sp, r7
 8046636:	f85d 7b04 	ldr.w	r7, [sp], #4
 804663a:	4770      	bx	lr
 804663c:	40016800 	.word	0x40016800

08046640 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8046640:	b480      	push	{r7}
 8046642:	b089      	sub	sp, #36	; 0x24
 8046644:	af00      	add	r7, sp, #0
 8046646:	60f8      	str	r0, [r7, #12]
 8046648:	60b9      	str	r1, [r7, #8]
 804664a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 804664c:	68bb      	ldr	r3, [r7, #8]
 804664e:	685a      	ldr	r2, [r3, #4]
 8046650:	68fb      	ldr	r3, [r7, #12]
 8046652:	681b      	ldr	r3, [r3, #0]
 8046654:	68db      	ldr	r3, [r3, #12]
 8046656:	0c1b      	lsrs	r3, r3, #16
 8046658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804665c:	4413      	add	r3, r2
 804665e:	041b      	lsls	r3, r3, #16
 8046660:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8046662:	68fb      	ldr	r3, [r7, #12]
 8046664:	681b      	ldr	r3, [r3, #0]
 8046666:	461a      	mov	r2, r3
 8046668:	687b      	ldr	r3, [r7, #4]
 804666a:	01db      	lsls	r3, r3, #7
 804666c:	4413      	add	r3, r2
 804666e:	3384      	adds	r3, #132	; 0x84
 8046670:	685b      	ldr	r3, [r3, #4]
 8046672:	68fa      	ldr	r2, [r7, #12]
 8046674:	6812      	ldr	r2, [r2, #0]
 8046676:	4611      	mov	r1, r2
 8046678:	687a      	ldr	r2, [r7, #4]
 804667a:	01d2      	lsls	r2, r2, #7
 804667c:	440a      	add	r2, r1
 804667e:	3284      	adds	r2, #132	; 0x84
 8046680:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8046684:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046686:	68bb      	ldr	r3, [r7, #8]
 8046688:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 804668a:	68fb      	ldr	r3, [r7, #12]
 804668c:	681b      	ldr	r3, [r3, #0]
 804668e:	68db      	ldr	r3, [r3, #12]
 8046690:	0c1b      	lsrs	r3, r3, #16
 8046692:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8046696:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8046698:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 804669a:	68fb      	ldr	r3, [r7, #12]
 804669c:	681b      	ldr	r3, [r3, #0]
 804669e:	4619      	mov	r1, r3
 80466a0:	687b      	ldr	r3, [r7, #4]
 80466a2:	01db      	lsls	r3, r3, #7
 80466a4:	440b      	add	r3, r1
 80466a6:	3384      	adds	r3, #132	; 0x84
 80466a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80466aa:	69fb      	ldr	r3, [r7, #28]
 80466ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80466ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80466b0:	68bb      	ldr	r3, [r7, #8]
 80466b2:	68da      	ldr	r2, [r3, #12]
 80466b4:	68fb      	ldr	r3, [r7, #12]
 80466b6:	681b      	ldr	r3, [r3, #0]
 80466b8:	68db      	ldr	r3, [r3, #12]
 80466ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80466be:	4413      	add	r3, r2
 80466c0:	041b      	lsls	r3, r3, #16
 80466c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80466c4:	68fb      	ldr	r3, [r7, #12]
 80466c6:	681b      	ldr	r3, [r3, #0]
 80466c8:	461a      	mov	r2, r3
 80466ca:	687b      	ldr	r3, [r7, #4]
 80466cc:	01db      	lsls	r3, r3, #7
 80466ce:	4413      	add	r3, r2
 80466d0:	3384      	adds	r3, #132	; 0x84
 80466d2:	689b      	ldr	r3, [r3, #8]
 80466d4:	68fa      	ldr	r2, [r7, #12]
 80466d6:	6812      	ldr	r2, [r2, #0]
 80466d8:	4611      	mov	r1, r2
 80466da:	687a      	ldr	r2, [r7, #4]
 80466dc:	01d2      	lsls	r2, r2, #7
 80466de:	440a      	add	r2, r1
 80466e0:	3284      	adds	r2, #132	; 0x84
 80466e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80466e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80466e8:	68bb      	ldr	r3, [r7, #8]
 80466ea:	689a      	ldr	r2, [r3, #8]
 80466ec:	68fb      	ldr	r3, [r7, #12]
 80466ee:	681b      	ldr	r3, [r3, #0]
 80466f0:	68db      	ldr	r3, [r3, #12]
 80466f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80466f6:	4413      	add	r3, r2
 80466f8:	1c5a      	adds	r2, r3, #1
 80466fa:	68fb      	ldr	r3, [r7, #12]
 80466fc:	681b      	ldr	r3, [r3, #0]
 80466fe:	4619      	mov	r1, r3
 8046700:	687b      	ldr	r3, [r7, #4]
 8046702:	01db      	lsls	r3, r3, #7
 8046704:	440b      	add	r3, r1
 8046706:	3384      	adds	r3, #132	; 0x84
 8046708:	4619      	mov	r1, r3
 804670a:	69fb      	ldr	r3, [r7, #28]
 804670c:	4313      	orrs	r3, r2
 804670e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8046710:	68fb      	ldr	r3, [r7, #12]
 8046712:	681b      	ldr	r3, [r3, #0]
 8046714:	461a      	mov	r2, r3
 8046716:	687b      	ldr	r3, [r7, #4]
 8046718:	01db      	lsls	r3, r3, #7
 804671a:	4413      	add	r3, r2
 804671c:	3384      	adds	r3, #132	; 0x84
 804671e:	691b      	ldr	r3, [r3, #16]
 8046720:	68fa      	ldr	r2, [r7, #12]
 8046722:	6812      	ldr	r2, [r2, #0]
 8046724:	4611      	mov	r1, r2
 8046726:	687a      	ldr	r2, [r7, #4]
 8046728:	01d2      	lsls	r2, r2, #7
 804672a:	440a      	add	r2, r1
 804672c:	3284      	adds	r2, #132	; 0x84
 804672e:	f023 0307 	bic.w	r3, r3, #7
 8046732:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8046734:	68fb      	ldr	r3, [r7, #12]
 8046736:	681b      	ldr	r3, [r3, #0]
 8046738:	461a      	mov	r2, r3
 804673a:	687b      	ldr	r3, [r7, #4]
 804673c:	01db      	lsls	r3, r3, #7
 804673e:	4413      	add	r3, r2
 8046740:	3384      	adds	r3, #132	; 0x84
 8046742:	461a      	mov	r2, r3
 8046744:	68bb      	ldr	r3, [r7, #8]
 8046746:	691b      	ldr	r3, [r3, #16]
 8046748:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 804674a:	68bb      	ldr	r3, [r7, #8]
 804674c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8046750:	021b      	lsls	r3, r3, #8
 8046752:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8046754:	68bb      	ldr	r3, [r7, #8]
 8046756:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 804675a:	041b      	lsls	r3, r3, #16
 804675c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 804675e:	68bb      	ldr	r3, [r7, #8]
 8046760:	699b      	ldr	r3, [r3, #24]
 8046762:	061b      	lsls	r3, r3, #24
 8046764:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8046766:	68fb      	ldr	r3, [r7, #12]
 8046768:	681b      	ldr	r3, [r3, #0]
 804676a:	461a      	mov	r2, r3
 804676c:	687b      	ldr	r3, [r7, #4]
 804676e:	01db      	lsls	r3, r3, #7
 8046770:	4413      	add	r3, r2
 8046772:	3384      	adds	r3, #132	; 0x84
 8046774:	699b      	ldr	r3, [r3, #24]
 8046776:	68fb      	ldr	r3, [r7, #12]
 8046778:	681b      	ldr	r3, [r3, #0]
 804677a:	461a      	mov	r2, r3
 804677c:	687b      	ldr	r3, [r7, #4]
 804677e:	01db      	lsls	r3, r3, #7
 8046780:	4413      	add	r3, r2
 8046782:	3384      	adds	r3, #132	; 0x84
 8046784:	461a      	mov	r2, r3
 8046786:	2300      	movs	r3, #0
 8046788:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 804678a:	68bb      	ldr	r3, [r7, #8]
 804678c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8046790:	461a      	mov	r2, r3
 8046792:	69fb      	ldr	r3, [r7, #28]
 8046794:	431a      	orrs	r2, r3
 8046796:	69bb      	ldr	r3, [r7, #24]
 8046798:	431a      	orrs	r2, r3
 804679a:	68fb      	ldr	r3, [r7, #12]
 804679c:	681b      	ldr	r3, [r3, #0]
 804679e:	4619      	mov	r1, r3
 80467a0:	687b      	ldr	r3, [r7, #4]
 80467a2:	01db      	lsls	r3, r3, #7
 80467a4:	440b      	add	r3, r1
 80467a6:	3384      	adds	r3, #132	; 0x84
 80467a8:	4619      	mov	r1, r3
 80467aa:	697b      	ldr	r3, [r7, #20]
 80467ac:	4313      	orrs	r3, r2
 80467ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80467b0:	68fb      	ldr	r3, [r7, #12]
 80467b2:	681b      	ldr	r3, [r3, #0]
 80467b4:	461a      	mov	r2, r3
 80467b6:	687b      	ldr	r3, [r7, #4]
 80467b8:	01db      	lsls	r3, r3, #7
 80467ba:	4413      	add	r3, r2
 80467bc:	3384      	adds	r3, #132	; 0x84
 80467be:	695b      	ldr	r3, [r3, #20]
 80467c0:	68fa      	ldr	r2, [r7, #12]
 80467c2:	6812      	ldr	r2, [r2, #0]
 80467c4:	4611      	mov	r1, r2
 80467c6:	687a      	ldr	r2, [r7, #4]
 80467c8:	01d2      	lsls	r2, r2, #7
 80467ca:	440a      	add	r2, r1
 80467cc:	3284      	adds	r2, #132	; 0x84
 80467ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80467d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80467d4:	68fb      	ldr	r3, [r7, #12]
 80467d6:	681b      	ldr	r3, [r3, #0]
 80467d8:	461a      	mov	r2, r3
 80467da:	687b      	ldr	r3, [r7, #4]
 80467dc:	01db      	lsls	r3, r3, #7
 80467de:	4413      	add	r3, r2
 80467e0:	3384      	adds	r3, #132	; 0x84
 80467e2:	461a      	mov	r2, r3
 80467e4:	68bb      	ldr	r3, [r7, #8]
 80467e6:	695b      	ldr	r3, [r3, #20]
 80467e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80467ea:	68fb      	ldr	r3, [r7, #12]
 80467ec:	681b      	ldr	r3, [r3, #0]
 80467ee:	461a      	mov	r2, r3
 80467f0:	687b      	ldr	r3, [r7, #4]
 80467f2:	01db      	lsls	r3, r3, #7
 80467f4:	4413      	add	r3, r2
 80467f6:	3384      	adds	r3, #132	; 0x84
 80467f8:	69db      	ldr	r3, [r3, #28]
 80467fa:	68fa      	ldr	r2, [r7, #12]
 80467fc:	6812      	ldr	r2, [r2, #0]
 80467fe:	4611      	mov	r1, r2
 8046800:	687a      	ldr	r2, [r7, #4]
 8046802:	01d2      	lsls	r2, r2, #7
 8046804:	440a      	add	r2, r1
 8046806:	3284      	adds	r2, #132	; 0x84
 8046808:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 804680c:	f023 0307 	bic.w	r3, r3, #7
 8046810:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8046812:	68bb      	ldr	r3, [r7, #8]
 8046814:	69da      	ldr	r2, [r3, #28]
 8046816:	68bb      	ldr	r3, [r7, #8]
 8046818:	6a1b      	ldr	r3, [r3, #32]
 804681a:	68f9      	ldr	r1, [r7, #12]
 804681c:	6809      	ldr	r1, [r1, #0]
 804681e:	4608      	mov	r0, r1
 8046820:	6879      	ldr	r1, [r7, #4]
 8046822:	01c9      	lsls	r1, r1, #7
 8046824:	4401      	add	r1, r0
 8046826:	3184      	adds	r1, #132	; 0x84
 8046828:	4313      	orrs	r3, r2
 804682a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 804682c:	68fb      	ldr	r3, [r7, #12]
 804682e:	681b      	ldr	r3, [r3, #0]
 8046830:	461a      	mov	r2, r3
 8046832:	687b      	ldr	r3, [r7, #4]
 8046834:	01db      	lsls	r3, r3, #7
 8046836:	4413      	add	r3, r2
 8046838:	3384      	adds	r3, #132	; 0x84
 804683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804683c:	68fb      	ldr	r3, [r7, #12]
 804683e:	681b      	ldr	r3, [r3, #0]
 8046840:	461a      	mov	r2, r3
 8046842:	687b      	ldr	r3, [r7, #4]
 8046844:	01db      	lsls	r3, r3, #7
 8046846:	4413      	add	r3, r2
 8046848:	3384      	adds	r3, #132	; 0x84
 804684a:	461a      	mov	r2, r3
 804684c:	2300      	movs	r3, #0
 804684e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8046850:	68fb      	ldr	r3, [r7, #12]
 8046852:	681b      	ldr	r3, [r3, #0]
 8046854:	461a      	mov	r2, r3
 8046856:	687b      	ldr	r3, [r7, #4]
 8046858:	01db      	lsls	r3, r3, #7
 804685a:	4413      	add	r3, r2
 804685c:	3384      	adds	r3, #132	; 0x84
 804685e:	461a      	mov	r2, r3
 8046860:	68bb      	ldr	r3, [r7, #8]
 8046862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046864:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8046866:	68bb      	ldr	r3, [r7, #8]
 8046868:	691b      	ldr	r3, [r3, #16]
 804686a:	2b00      	cmp	r3, #0
 804686c:	d102      	bne.n	8046874 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 804686e:	2304      	movs	r3, #4
 8046870:	61fb      	str	r3, [r7, #28]
 8046872:	e01b      	b.n	80468ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8046874:	68bb      	ldr	r3, [r7, #8]
 8046876:	691b      	ldr	r3, [r3, #16]
 8046878:	2b01      	cmp	r3, #1
 804687a:	d102      	bne.n	8046882 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 804687c:	2303      	movs	r3, #3
 804687e:	61fb      	str	r3, [r7, #28]
 8046880:	e014      	b.n	80468ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8046882:	68bb      	ldr	r3, [r7, #8]
 8046884:	691b      	ldr	r3, [r3, #16]
 8046886:	2b04      	cmp	r3, #4
 8046888:	d00b      	beq.n	80468a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 804688a:	68bb      	ldr	r3, [r7, #8]
 804688c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 804688e:	2b02      	cmp	r3, #2
 8046890:	d007      	beq.n	80468a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8046892:	68bb      	ldr	r3, [r7, #8]
 8046894:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8046896:	2b03      	cmp	r3, #3
 8046898:	d003      	beq.n	80468a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 804689a:	68bb      	ldr	r3, [r7, #8]
 804689c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 804689e:	2b07      	cmp	r3, #7
 80468a0:	d102      	bne.n	80468a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80468a2:	2302      	movs	r3, #2
 80468a4:	61fb      	str	r3, [r7, #28]
 80468a6:	e001      	b.n	80468ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80468a8:	2301      	movs	r3, #1
 80468aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80468ac:	68fb      	ldr	r3, [r7, #12]
 80468ae:	681b      	ldr	r3, [r3, #0]
 80468b0:	461a      	mov	r2, r3
 80468b2:	687b      	ldr	r3, [r7, #4]
 80468b4:	01db      	lsls	r3, r3, #7
 80468b6:	4413      	add	r3, r2
 80468b8:	3384      	adds	r3, #132	; 0x84
 80468ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80468bc:	68fa      	ldr	r2, [r7, #12]
 80468be:	6812      	ldr	r2, [r2, #0]
 80468c0:	4611      	mov	r1, r2
 80468c2:	687a      	ldr	r2, [r7, #4]
 80468c4:	01d2      	lsls	r2, r2, #7
 80468c6:	440a      	add	r2, r1
 80468c8:	3284      	adds	r2, #132	; 0x84
 80468ca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80468ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80468d0:	68bb      	ldr	r3, [r7, #8]
 80468d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80468d4:	69fa      	ldr	r2, [r7, #28]
 80468d6:	fb02 f303 	mul.w	r3, r2, r3
 80468da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80468dc:	68bb      	ldr	r3, [r7, #8]
 80468de:	6859      	ldr	r1, [r3, #4]
 80468e0:	68bb      	ldr	r3, [r7, #8]
 80468e2:	681b      	ldr	r3, [r3, #0]
 80468e4:	1acb      	subs	r3, r1, r3
 80468e6:	69f9      	ldr	r1, [r7, #28]
 80468e8:	fb01 f303 	mul.w	r3, r1, r3
 80468ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80468ee:	68f9      	ldr	r1, [r7, #12]
 80468f0:	6809      	ldr	r1, [r1, #0]
 80468f2:	4608      	mov	r0, r1
 80468f4:	6879      	ldr	r1, [r7, #4]
 80468f6:	01c9      	lsls	r1, r1, #7
 80468f8:	4401      	add	r1, r0
 80468fa:	3184      	adds	r1, #132	; 0x84
 80468fc:	4313      	orrs	r3, r2
 80468fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8046900:	68fb      	ldr	r3, [r7, #12]
 8046902:	681b      	ldr	r3, [r3, #0]
 8046904:	461a      	mov	r2, r3
 8046906:	687b      	ldr	r3, [r7, #4]
 8046908:	01db      	lsls	r3, r3, #7
 804690a:	4413      	add	r3, r2
 804690c:	3384      	adds	r3, #132	; 0x84
 804690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046910:	68fa      	ldr	r2, [r7, #12]
 8046912:	6812      	ldr	r2, [r2, #0]
 8046914:	4611      	mov	r1, r2
 8046916:	687a      	ldr	r2, [r7, #4]
 8046918:	01d2      	lsls	r2, r2, #7
 804691a:	440a      	add	r2, r1
 804691c:	3284      	adds	r2, #132	; 0x84
 804691e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8046922:	f023 0307 	bic.w	r3, r3, #7
 8046926:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8046928:	68fb      	ldr	r3, [r7, #12]
 804692a:	681b      	ldr	r3, [r3, #0]
 804692c:	461a      	mov	r2, r3
 804692e:	687b      	ldr	r3, [r7, #4]
 8046930:	01db      	lsls	r3, r3, #7
 8046932:	4413      	add	r3, r2
 8046934:	3384      	adds	r3, #132	; 0x84
 8046936:	461a      	mov	r2, r3
 8046938:	68bb      	ldr	r3, [r7, #8]
 804693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804693c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 804693e:	68fb      	ldr	r3, [r7, #12]
 8046940:	681b      	ldr	r3, [r3, #0]
 8046942:	461a      	mov	r2, r3
 8046944:	687b      	ldr	r3, [r7, #4]
 8046946:	01db      	lsls	r3, r3, #7
 8046948:	4413      	add	r3, r2
 804694a:	3384      	adds	r3, #132	; 0x84
 804694c:	681b      	ldr	r3, [r3, #0]
 804694e:	68fa      	ldr	r2, [r7, #12]
 8046950:	6812      	ldr	r2, [r2, #0]
 8046952:	4611      	mov	r1, r2
 8046954:	687a      	ldr	r2, [r7, #4]
 8046956:	01d2      	lsls	r2, r2, #7
 8046958:	440a      	add	r2, r1
 804695a:	3284      	adds	r2, #132	; 0x84
 804695c:	f043 0301 	orr.w	r3, r3, #1
 8046960:	6013      	str	r3, [r2, #0]
}
 8046962:	bf00      	nop
 8046964:	3724      	adds	r7, #36	; 0x24
 8046966:	46bd      	mov	sp, r7
 8046968:	f85d 7b04 	ldr.w	r7, [sp], #4
 804696c:	4770      	bx	lr
	...

08046970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8046970:	b580      	push	{r7, lr}
 8046972:	b086      	sub	sp, #24
 8046974:	af00      	add	r7, sp, #0
 8046976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8046978:	687b      	ldr	r3, [r7, #4]
 804697a:	2b00      	cmp	r3, #0
 804697c:	d101      	bne.n	8046982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 804697e:	2301      	movs	r3, #1
 8046980:	e267      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8046982:	687b      	ldr	r3, [r7, #4]
 8046984:	681b      	ldr	r3, [r3, #0]
 8046986:	f003 0301 	and.w	r3, r3, #1
 804698a:	2b00      	cmp	r3, #0
 804698c:	d075      	beq.n	8046a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 804698e:	4b88      	ldr	r3, [pc, #544]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046990:	689b      	ldr	r3, [r3, #8]
 8046992:	f003 030c 	and.w	r3, r3, #12
 8046996:	2b04      	cmp	r3, #4
 8046998:	d00c      	beq.n	80469b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804699a:	4b85      	ldr	r3, [pc, #532]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 804699c:	689b      	ldr	r3, [r3, #8]
 804699e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80469a2:	2b08      	cmp	r3, #8
 80469a4:	d112      	bne.n	80469cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80469a6:	4b82      	ldr	r3, [pc, #520]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469a8:	685b      	ldr	r3, [r3, #4]
 80469aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80469ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80469b2:	d10b      	bne.n	80469cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80469b4:	4b7e      	ldr	r3, [pc, #504]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469b6:	681b      	ldr	r3, [r3, #0]
 80469b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80469bc:	2b00      	cmp	r3, #0
 80469be:	d05b      	beq.n	8046a78 <HAL_RCC_OscConfig+0x108>
 80469c0:	687b      	ldr	r3, [r7, #4]
 80469c2:	685b      	ldr	r3, [r3, #4]
 80469c4:	2b00      	cmp	r3, #0
 80469c6:	d157      	bne.n	8046a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80469c8:	2301      	movs	r3, #1
 80469ca:	e242      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80469cc:	687b      	ldr	r3, [r7, #4]
 80469ce:	685b      	ldr	r3, [r3, #4]
 80469d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80469d4:	d106      	bne.n	80469e4 <HAL_RCC_OscConfig+0x74>
 80469d6:	4b76      	ldr	r3, [pc, #472]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469d8:	681b      	ldr	r3, [r3, #0]
 80469da:	4a75      	ldr	r2, [pc, #468]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80469e0:	6013      	str	r3, [r2, #0]
 80469e2:	e01d      	b.n	8046a20 <HAL_RCC_OscConfig+0xb0>
 80469e4:	687b      	ldr	r3, [r7, #4]
 80469e6:	685b      	ldr	r3, [r3, #4]
 80469e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80469ec:	d10c      	bne.n	8046a08 <HAL_RCC_OscConfig+0x98>
 80469ee:	4b70      	ldr	r3, [pc, #448]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469f0:	681b      	ldr	r3, [r3, #0]
 80469f2:	4a6f      	ldr	r2, [pc, #444]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80469f8:	6013      	str	r3, [r2, #0]
 80469fa:	4b6d      	ldr	r3, [pc, #436]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 80469fc:	681b      	ldr	r3, [r3, #0]
 80469fe:	4a6c      	ldr	r2, [pc, #432]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046a04:	6013      	str	r3, [r2, #0]
 8046a06:	e00b      	b.n	8046a20 <HAL_RCC_OscConfig+0xb0>
 8046a08:	4b69      	ldr	r3, [pc, #420]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a0a:	681b      	ldr	r3, [r3, #0]
 8046a0c:	4a68      	ldr	r2, [pc, #416]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046a12:	6013      	str	r3, [r2, #0]
 8046a14:	4b66      	ldr	r3, [pc, #408]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a16:	681b      	ldr	r3, [r3, #0]
 8046a18:	4a65      	ldr	r2, [pc, #404]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8046a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8046a20:	687b      	ldr	r3, [r7, #4]
 8046a22:	685b      	ldr	r3, [r3, #4]
 8046a24:	2b00      	cmp	r3, #0
 8046a26:	d013      	beq.n	8046a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046a28:	f7fc fc56 	bl	80432d8 <HAL_GetTick>
 8046a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046a2e:	e008      	b.n	8046a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046a30:	f7fc fc52 	bl	80432d8 <HAL_GetTick>
 8046a34:	4602      	mov	r2, r0
 8046a36:	693b      	ldr	r3, [r7, #16]
 8046a38:	1ad3      	subs	r3, r2, r3
 8046a3a:	2b64      	cmp	r3, #100	; 0x64
 8046a3c:	d901      	bls.n	8046a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8046a3e:	2303      	movs	r3, #3
 8046a40:	e207      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046a42:	4b5b      	ldr	r3, [pc, #364]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a44:	681b      	ldr	r3, [r3, #0]
 8046a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046a4a:	2b00      	cmp	r3, #0
 8046a4c:	d0f0      	beq.n	8046a30 <HAL_RCC_OscConfig+0xc0>
 8046a4e:	e014      	b.n	8046a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046a50:	f7fc fc42 	bl	80432d8 <HAL_GetTick>
 8046a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046a56:	e008      	b.n	8046a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8046a58:	f7fc fc3e 	bl	80432d8 <HAL_GetTick>
 8046a5c:	4602      	mov	r2, r0
 8046a5e:	693b      	ldr	r3, [r7, #16]
 8046a60:	1ad3      	subs	r3, r2, r3
 8046a62:	2b64      	cmp	r3, #100	; 0x64
 8046a64:	d901      	bls.n	8046a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8046a66:	2303      	movs	r3, #3
 8046a68:	e1f3      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8046a6a:	4b51      	ldr	r3, [pc, #324]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a6c:	681b      	ldr	r3, [r3, #0]
 8046a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046a72:	2b00      	cmp	r3, #0
 8046a74:	d1f0      	bne.n	8046a58 <HAL_RCC_OscConfig+0xe8>
 8046a76:	e000      	b.n	8046a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8046a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8046a7a:	687b      	ldr	r3, [r7, #4]
 8046a7c:	681b      	ldr	r3, [r3, #0]
 8046a7e:	f003 0302 	and.w	r3, r3, #2
 8046a82:	2b00      	cmp	r3, #0
 8046a84:	d063      	beq.n	8046b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046a86:	4b4a      	ldr	r3, [pc, #296]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a88:	689b      	ldr	r3, [r3, #8]
 8046a8a:	f003 030c 	and.w	r3, r3, #12
 8046a8e:	2b00      	cmp	r3, #0
 8046a90:	d00b      	beq.n	8046aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046a92:	4b47      	ldr	r3, [pc, #284]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046a94:	689b      	ldr	r3, [r3, #8]
 8046a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8046a9a:	2b08      	cmp	r3, #8
 8046a9c:	d11c      	bne.n	8046ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8046a9e:	4b44      	ldr	r3, [pc, #272]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046aa0:	685b      	ldr	r3, [r3, #4]
 8046aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046aa6:	2b00      	cmp	r3, #0
 8046aa8:	d116      	bne.n	8046ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046aaa:	4b41      	ldr	r3, [pc, #260]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046aac:	681b      	ldr	r3, [r3, #0]
 8046aae:	f003 0302 	and.w	r3, r3, #2
 8046ab2:	2b00      	cmp	r3, #0
 8046ab4:	d005      	beq.n	8046ac2 <HAL_RCC_OscConfig+0x152>
 8046ab6:	687b      	ldr	r3, [r7, #4]
 8046ab8:	68db      	ldr	r3, [r3, #12]
 8046aba:	2b01      	cmp	r3, #1
 8046abc:	d001      	beq.n	8046ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8046abe:	2301      	movs	r3, #1
 8046ac0:	e1c7      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046ac2:	4b3b      	ldr	r3, [pc, #236]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046ac4:	681b      	ldr	r3, [r3, #0]
 8046ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046aca:	687b      	ldr	r3, [r7, #4]
 8046acc:	691b      	ldr	r3, [r3, #16]
 8046ace:	00db      	lsls	r3, r3, #3
 8046ad0:	4937      	ldr	r1, [pc, #220]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046ad2:	4313      	orrs	r3, r2
 8046ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8046ad6:	e03a      	b.n	8046b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8046ad8:	687b      	ldr	r3, [r7, #4]
 8046ada:	68db      	ldr	r3, [r3, #12]
 8046adc:	2b00      	cmp	r3, #0
 8046ade:	d020      	beq.n	8046b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8046ae0:	4b34      	ldr	r3, [pc, #208]	; (8046bb4 <HAL_RCC_OscConfig+0x244>)
 8046ae2:	2201      	movs	r2, #1
 8046ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046ae6:	f7fc fbf7 	bl	80432d8 <HAL_GetTick>
 8046aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046aec:	e008      	b.n	8046b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046aee:	f7fc fbf3 	bl	80432d8 <HAL_GetTick>
 8046af2:	4602      	mov	r2, r0
 8046af4:	693b      	ldr	r3, [r7, #16]
 8046af6:	1ad3      	subs	r3, r2, r3
 8046af8:	2b02      	cmp	r3, #2
 8046afa:	d901      	bls.n	8046b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8046afc:	2303      	movs	r3, #3
 8046afe:	e1a8      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046b00:	4b2b      	ldr	r3, [pc, #172]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046b02:	681b      	ldr	r3, [r3, #0]
 8046b04:	f003 0302 	and.w	r3, r3, #2
 8046b08:	2b00      	cmp	r3, #0
 8046b0a:	d0f0      	beq.n	8046aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8046b0c:	4b28      	ldr	r3, [pc, #160]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046b0e:	681b      	ldr	r3, [r3, #0]
 8046b10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8046b14:	687b      	ldr	r3, [r7, #4]
 8046b16:	691b      	ldr	r3, [r3, #16]
 8046b18:	00db      	lsls	r3, r3, #3
 8046b1a:	4925      	ldr	r1, [pc, #148]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046b1c:	4313      	orrs	r3, r2
 8046b1e:	600b      	str	r3, [r1, #0]
 8046b20:	e015      	b.n	8046b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8046b22:	4b24      	ldr	r3, [pc, #144]	; (8046bb4 <HAL_RCC_OscConfig+0x244>)
 8046b24:	2200      	movs	r2, #0
 8046b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046b28:	f7fc fbd6 	bl	80432d8 <HAL_GetTick>
 8046b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046b2e:	e008      	b.n	8046b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8046b30:	f7fc fbd2 	bl	80432d8 <HAL_GetTick>
 8046b34:	4602      	mov	r2, r0
 8046b36:	693b      	ldr	r3, [r7, #16]
 8046b38:	1ad3      	subs	r3, r2, r3
 8046b3a:	2b02      	cmp	r3, #2
 8046b3c:	d901      	bls.n	8046b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8046b3e:	2303      	movs	r3, #3
 8046b40:	e187      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8046b42:	4b1b      	ldr	r3, [pc, #108]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046b44:	681b      	ldr	r3, [r3, #0]
 8046b46:	f003 0302 	and.w	r3, r3, #2
 8046b4a:	2b00      	cmp	r3, #0
 8046b4c:	d1f0      	bne.n	8046b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8046b4e:	687b      	ldr	r3, [r7, #4]
 8046b50:	681b      	ldr	r3, [r3, #0]
 8046b52:	f003 0308 	and.w	r3, r3, #8
 8046b56:	2b00      	cmp	r3, #0
 8046b58:	d036      	beq.n	8046bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8046b5a:	687b      	ldr	r3, [r7, #4]
 8046b5c:	695b      	ldr	r3, [r3, #20]
 8046b5e:	2b00      	cmp	r3, #0
 8046b60:	d016      	beq.n	8046b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8046b62:	4b15      	ldr	r3, [pc, #84]	; (8046bb8 <HAL_RCC_OscConfig+0x248>)
 8046b64:	2201      	movs	r2, #1
 8046b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046b68:	f7fc fbb6 	bl	80432d8 <HAL_GetTick>
 8046b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046b6e:	e008      	b.n	8046b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046b70:	f7fc fbb2 	bl	80432d8 <HAL_GetTick>
 8046b74:	4602      	mov	r2, r0
 8046b76:	693b      	ldr	r3, [r7, #16]
 8046b78:	1ad3      	subs	r3, r2, r3
 8046b7a:	2b02      	cmp	r3, #2
 8046b7c:	d901      	bls.n	8046b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8046b7e:	2303      	movs	r3, #3
 8046b80:	e167      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8046b82:	4b0b      	ldr	r3, [pc, #44]	; (8046bb0 <HAL_RCC_OscConfig+0x240>)
 8046b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046b86:	f003 0302 	and.w	r3, r3, #2
 8046b8a:	2b00      	cmp	r3, #0
 8046b8c:	d0f0      	beq.n	8046b70 <HAL_RCC_OscConfig+0x200>
 8046b8e:	e01b      	b.n	8046bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8046b90:	4b09      	ldr	r3, [pc, #36]	; (8046bb8 <HAL_RCC_OscConfig+0x248>)
 8046b92:	2200      	movs	r2, #0
 8046b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046b96:	f7fc fb9f 	bl	80432d8 <HAL_GetTick>
 8046b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046b9c:	e00e      	b.n	8046bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8046b9e:	f7fc fb9b 	bl	80432d8 <HAL_GetTick>
 8046ba2:	4602      	mov	r2, r0
 8046ba4:	693b      	ldr	r3, [r7, #16]
 8046ba6:	1ad3      	subs	r3, r2, r3
 8046ba8:	2b02      	cmp	r3, #2
 8046baa:	d907      	bls.n	8046bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8046bac:	2303      	movs	r3, #3
 8046bae:	e150      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
 8046bb0:	40023800 	.word	0x40023800
 8046bb4:	42470000 	.word	0x42470000
 8046bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8046bbc:	4b88      	ldr	r3, [pc, #544]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046bc0:	f003 0302 	and.w	r3, r3, #2
 8046bc4:	2b00      	cmp	r3, #0
 8046bc6:	d1ea      	bne.n	8046b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8046bc8:	687b      	ldr	r3, [r7, #4]
 8046bca:	681b      	ldr	r3, [r3, #0]
 8046bcc:	f003 0304 	and.w	r3, r3, #4
 8046bd0:	2b00      	cmp	r3, #0
 8046bd2:	f000 8097 	beq.w	8046d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8046bd6:	2300      	movs	r3, #0
 8046bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8046bda:	4b81      	ldr	r3, [pc, #516]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046be2:	2b00      	cmp	r3, #0
 8046be4:	d10f      	bne.n	8046c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8046be6:	2300      	movs	r3, #0
 8046be8:	60bb      	str	r3, [r7, #8]
 8046bea:	4b7d      	ldr	r3, [pc, #500]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046bee:	4a7c      	ldr	r2, [pc, #496]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8046bf6:	4b7a      	ldr	r3, [pc, #488]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046bfe:	60bb      	str	r3, [r7, #8]
 8046c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8046c02:	2301      	movs	r3, #1
 8046c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046c06:	4b77      	ldr	r3, [pc, #476]	; (8046de4 <HAL_RCC_OscConfig+0x474>)
 8046c08:	681b      	ldr	r3, [r3, #0]
 8046c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046c0e:	2b00      	cmp	r3, #0
 8046c10:	d118      	bne.n	8046c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8046c12:	4b74      	ldr	r3, [pc, #464]	; (8046de4 <HAL_RCC_OscConfig+0x474>)
 8046c14:	681b      	ldr	r3, [r3, #0]
 8046c16:	4a73      	ldr	r2, [pc, #460]	; (8046de4 <HAL_RCC_OscConfig+0x474>)
 8046c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8046c1e:	f7fc fb5b 	bl	80432d8 <HAL_GetTick>
 8046c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046c24:	e008      	b.n	8046c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8046c26:	f7fc fb57 	bl	80432d8 <HAL_GetTick>
 8046c2a:	4602      	mov	r2, r0
 8046c2c:	693b      	ldr	r3, [r7, #16]
 8046c2e:	1ad3      	subs	r3, r2, r3
 8046c30:	2b02      	cmp	r3, #2
 8046c32:	d901      	bls.n	8046c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8046c34:	2303      	movs	r3, #3
 8046c36:	e10c      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8046c38:	4b6a      	ldr	r3, [pc, #424]	; (8046de4 <HAL_RCC_OscConfig+0x474>)
 8046c3a:	681b      	ldr	r3, [r3, #0]
 8046c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046c40:	2b00      	cmp	r3, #0
 8046c42:	d0f0      	beq.n	8046c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8046c44:	687b      	ldr	r3, [r7, #4]
 8046c46:	689b      	ldr	r3, [r3, #8]
 8046c48:	2b01      	cmp	r3, #1
 8046c4a:	d106      	bne.n	8046c5a <HAL_RCC_OscConfig+0x2ea>
 8046c4c:	4b64      	ldr	r3, [pc, #400]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046c50:	4a63      	ldr	r2, [pc, #396]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c52:	f043 0301 	orr.w	r3, r3, #1
 8046c56:	6713      	str	r3, [r2, #112]	; 0x70
 8046c58:	e01c      	b.n	8046c94 <HAL_RCC_OscConfig+0x324>
 8046c5a:	687b      	ldr	r3, [r7, #4]
 8046c5c:	689b      	ldr	r3, [r3, #8]
 8046c5e:	2b05      	cmp	r3, #5
 8046c60:	d10c      	bne.n	8046c7c <HAL_RCC_OscConfig+0x30c>
 8046c62:	4b5f      	ldr	r3, [pc, #380]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046c66:	4a5e      	ldr	r2, [pc, #376]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c68:	f043 0304 	orr.w	r3, r3, #4
 8046c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8046c6e:	4b5c      	ldr	r3, [pc, #368]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046c72:	4a5b      	ldr	r2, [pc, #364]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c74:	f043 0301 	orr.w	r3, r3, #1
 8046c78:	6713      	str	r3, [r2, #112]	; 0x70
 8046c7a:	e00b      	b.n	8046c94 <HAL_RCC_OscConfig+0x324>
 8046c7c:	4b58      	ldr	r3, [pc, #352]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046c80:	4a57      	ldr	r2, [pc, #348]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c82:	f023 0301 	bic.w	r3, r3, #1
 8046c86:	6713      	str	r3, [r2, #112]	; 0x70
 8046c88:	4b55      	ldr	r3, [pc, #340]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046c8c:	4a54      	ldr	r2, [pc, #336]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046c8e:	f023 0304 	bic.w	r3, r3, #4
 8046c92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8046c94:	687b      	ldr	r3, [r7, #4]
 8046c96:	689b      	ldr	r3, [r3, #8]
 8046c98:	2b00      	cmp	r3, #0
 8046c9a:	d015      	beq.n	8046cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8046c9c:	f7fc fb1c 	bl	80432d8 <HAL_GetTick>
 8046ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046ca2:	e00a      	b.n	8046cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046ca4:	f7fc fb18 	bl	80432d8 <HAL_GetTick>
 8046ca8:	4602      	mov	r2, r0
 8046caa:	693b      	ldr	r3, [r7, #16]
 8046cac:	1ad3      	subs	r3, r2, r3
 8046cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8046cb2:	4293      	cmp	r3, r2
 8046cb4:	d901      	bls.n	8046cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8046cb6:	2303      	movs	r3, #3
 8046cb8:	e0cb      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8046cba:	4b49      	ldr	r3, [pc, #292]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046cbe:	f003 0302 	and.w	r3, r3, #2
 8046cc2:	2b00      	cmp	r3, #0
 8046cc4:	d0ee      	beq.n	8046ca4 <HAL_RCC_OscConfig+0x334>
 8046cc6:	e014      	b.n	8046cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8046cc8:	f7fc fb06 	bl	80432d8 <HAL_GetTick>
 8046ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046cce:	e00a      	b.n	8046ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8046cd0:	f7fc fb02 	bl	80432d8 <HAL_GetTick>
 8046cd4:	4602      	mov	r2, r0
 8046cd6:	693b      	ldr	r3, [r7, #16]
 8046cd8:	1ad3      	subs	r3, r2, r3
 8046cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8046cde:	4293      	cmp	r3, r2
 8046ce0:	d901      	bls.n	8046ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8046ce2:	2303      	movs	r3, #3
 8046ce4:	e0b5      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8046ce6:	4b3e      	ldr	r3, [pc, #248]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046cea:	f003 0302 	and.w	r3, r3, #2
 8046cee:	2b00      	cmp	r3, #0
 8046cf0:	d1ee      	bne.n	8046cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8046cf2:	7dfb      	ldrb	r3, [r7, #23]
 8046cf4:	2b01      	cmp	r3, #1
 8046cf6:	d105      	bne.n	8046d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8046cf8:	4b39      	ldr	r3, [pc, #228]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046cfc:	4a38      	ldr	r2, [pc, #224]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8046d02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8046d04:	687b      	ldr	r3, [r7, #4]
 8046d06:	699b      	ldr	r3, [r3, #24]
 8046d08:	2b00      	cmp	r3, #0
 8046d0a:	f000 80a1 	beq.w	8046e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8046d0e:	4b34      	ldr	r3, [pc, #208]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046d10:	689b      	ldr	r3, [r3, #8]
 8046d12:	f003 030c 	and.w	r3, r3, #12
 8046d16:	2b08      	cmp	r3, #8
 8046d18:	d05c      	beq.n	8046dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8046d1a:	687b      	ldr	r3, [r7, #4]
 8046d1c:	699b      	ldr	r3, [r3, #24]
 8046d1e:	2b02      	cmp	r3, #2
 8046d20:	d141      	bne.n	8046da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046d22:	4b31      	ldr	r3, [pc, #196]	; (8046de8 <HAL_RCC_OscConfig+0x478>)
 8046d24:	2200      	movs	r2, #0
 8046d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046d28:	f7fc fad6 	bl	80432d8 <HAL_GetTick>
 8046d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046d2e:	e008      	b.n	8046d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046d30:	f7fc fad2 	bl	80432d8 <HAL_GetTick>
 8046d34:	4602      	mov	r2, r0
 8046d36:	693b      	ldr	r3, [r7, #16]
 8046d38:	1ad3      	subs	r3, r2, r3
 8046d3a:	2b02      	cmp	r3, #2
 8046d3c:	d901      	bls.n	8046d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8046d3e:	2303      	movs	r3, #3
 8046d40:	e087      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046d42:	4b27      	ldr	r3, [pc, #156]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046d44:	681b      	ldr	r3, [r3, #0]
 8046d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046d4a:	2b00      	cmp	r3, #0
 8046d4c:	d1f0      	bne.n	8046d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8046d4e:	687b      	ldr	r3, [r7, #4]
 8046d50:	69da      	ldr	r2, [r3, #28]
 8046d52:	687b      	ldr	r3, [r7, #4]
 8046d54:	6a1b      	ldr	r3, [r3, #32]
 8046d56:	431a      	orrs	r2, r3
 8046d58:	687b      	ldr	r3, [r7, #4]
 8046d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046d5c:	019b      	lsls	r3, r3, #6
 8046d5e:	431a      	orrs	r2, r3
 8046d60:	687b      	ldr	r3, [r7, #4]
 8046d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046d64:	085b      	lsrs	r3, r3, #1
 8046d66:	3b01      	subs	r3, #1
 8046d68:	041b      	lsls	r3, r3, #16
 8046d6a:	431a      	orrs	r2, r3
 8046d6c:	687b      	ldr	r3, [r7, #4]
 8046d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046d70:	061b      	lsls	r3, r3, #24
 8046d72:	491b      	ldr	r1, [pc, #108]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046d74:	4313      	orrs	r3, r2
 8046d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8046d78:	4b1b      	ldr	r3, [pc, #108]	; (8046de8 <HAL_RCC_OscConfig+0x478>)
 8046d7a:	2201      	movs	r2, #1
 8046d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046d7e:	f7fc faab 	bl	80432d8 <HAL_GetTick>
 8046d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046d84:	e008      	b.n	8046d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046d86:	f7fc faa7 	bl	80432d8 <HAL_GetTick>
 8046d8a:	4602      	mov	r2, r0
 8046d8c:	693b      	ldr	r3, [r7, #16]
 8046d8e:	1ad3      	subs	r3, r2, r3
 8046d90:	2b02      	cmp	r3, #2
 8046d92:	d901      	bls.n	8046d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8046d94:	2303      	movs	r3, #3
 8046d96:	e05c      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046d98:	4b11      	ldr	r3, [pc, #68]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046d9a:	681b      	ldr	r3, [r3, #0]
 8046d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046da0:	2b00      	cmp	r3, #0
 8046da2:	d0f0      	beq.n	8046d86 <HAL_RCC_OscConfig+0x416>
 8046da4:	e054      	b.n	8046e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8046da6:	4b10      	ldr	r3, [pc, #64]	; (8046de8 <HAL_RCC_OscConfig+0x478>)
 8046da8:	2200      	movs	r2, #0
 8046daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8046dac:	f7fc fa94 	bl	80432d8 <HAL_GetTick>
 8046db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046db2:	e008      	b.n	8046dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8046db4:	f7fc fa90 	bl	80432d8 <HAL_GetTick>
 8046db8:	4602      	mov	r2, r0
 8046dba:	693b      	ldr	r3, [r7, #16]
 8046dbc:	1ad3      	subs	r3, r2, r3
 8046dbe:	2b02      	cmp	r3, #2
 8046dc0:	d901      	bls.n	8046dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8046dc2:	2303      	movs	r3, #3
 8046dc4:	e045      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8046dc6:	4b06      	ldr	r3, [pc, #24]	; (8046de0 <HAL_RCC_OscConfig+0x470>)
 8046dc8:	681b      	ldr	r3, [r3, #0]
 8046dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046dce:	2b00      	cmp	r3, #0
 8046dd0:	d1f0      	bne.n	8046db4 <HAL_RCC_OscConfig+0x444>
 8046dd2:	e03d      	b.n	8046e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8046dd4:	687b      	ldr	r3, [r7, #4]
 8046dd6:	699b      	ldr	r3, [r3, #24]
 8046dd8:	2b01      	cmp	r3, #1
 8046dda:	d107      	bne.n	8046dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8046ddc:	2301      	movs	r3, #1
 8046dde:	e038      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
 8046de0:	40023800 	.word	0x40023800
 8046de4:	40007000 	.word	0x40007000
 8046de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8046dec:	4b1b      	ldr	r3, [pc, #108]	; (8046e5c <HAL_RCC_OscConfig+0x4ec>)
 8046dee:	685b      	ldr	r3, [r3, #4]
 8046df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046df2:	687b      	ldr	r3, [r7, #4]
 8046df4:	699b      	ldr	r3, [r3, #24]
 8046df6:	2b01      	cmp	r3, #1
 8046df8:	d028      	beq.n	8046e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046dfa:	68fb      	ldr	r3, [r7, #12]
 8046dfc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8046e00:	687b      	ldr	r3, [r7, #4]
 8046e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8046e04:	429a      	cmp	r2, r3
 8046e06:	d121      	bne.n	8046e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046e08:	68fb      	ldr	r3, [r7, #12]
 8046e0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8046e0e:	687b      	ldr	r3, [r7, #4]
 8046e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8046e12:	429a      	cmp	r2, r3
 8046e14:	d11a      	bne.n	8046e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046e16:	68fa      	ldr	r2, [r7, #12]
 8046e18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8046e1c:	4013      	ands	r3, r2
 8046e1e:	687a      	ldr	r2, [r7, #4]
 8046e20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8046e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8046e24:	4293      	cmp	r3, r2
 8046e26:	d111      	bne.n	8046e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046e28:	68fb      	ldr	r3, [r7, #12]
 8046e2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8046e2e:	687b      	ldr	r3, [r7, #4]
 8046e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e32:	085b      	lsrs	r3, r3, #1
 8046e34:	3b01      	subs	r3, #1
 8046e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8046e38:	429a      	cmp	r2, r3
 8046e3a:	d107      	bne.n	8046e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8046e3c:	68fb      	ldr	r3, [r7, #12]
 8046e3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8046e42:	687b      	ldr	r3, [r7, #4]
 8046e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8046e48:	429a      	cmp	r2, r3
 8046e4a:	d001      	beq.n	8046e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8046e4c:	2301      	movs	r3, #1
 8046e4e:	e000      	b.n	8046e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8046e50:	2300      	movs	r3, #0
}
 8046e52:	4618      	mov	r0, r3
 8046e54:	3718      	adds	r7, #24
 8046e56:	46bd      	mov	sp, r7
 8046e58:	bd80      	pop	{r7, pc}
 8046e5a:	bf00      	nop
 8046e5c:	40023800 	.word	0x40023800

08046e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8046e60:	b580      	push	{r7, lr}
 8046e62:	b084      	sub	sp, #16
 8046e64:	af00      	add	r7, sp, #0
 8046e66:	6078      	str	r0, [r7, #4]
 8046e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8046e6a:	687b      	ldr	r3, [r7, #4]
 8046e6c:	2b00      	cmp	r3, #0
 8046e6e:	d101      	bne.n	8046e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8046e70:	2301      	movs	r3, #1
 8046e72:	e0cc      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8046e74:	4b68      	ldr	r3, [pc, #416]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046e76:	681b      	ldr	r3, [r3, #0]
 8046e78:	f003 030f 	and.w	r3, r3, #15
 8046e7c:	683a      	ldr	r2, [r7, #0]
 8046e7e:	429a      	cmp	r2, r3
 8046e80:	d90c      	bls.n	8046e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046e82:	4b65      	ldr	r3, [pc, #404]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046e84:	683a      	ldr	r2, [r7, #0]
 8046e86:	b2d2      	uxtb	r2, r2
 8046e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046e8a:	4b63      	ldr	r3, [pc, #396]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046e8c:	681b      	ldr	r3, [r3, #0]
 8046e8e:	f003 030f 	and.w	r3, r3, #15
 8046e92:	683a      	ldr	r2, [r7, #0]
 8046e94:	429a      	cmp	r2, r3
 8046e96:	d001      	beq.n	8046e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8046e98:	2301      	movs	r3, #1
 8046e9a:	e0b8      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8046e9c:	687b      	ldr	r3, [r7, #4]
 8046e9e:	681b      	ldr	r3, [r3, #0]
 8046ea0:	f003 0302 	and.w	r3, r3, #2
 8046ea4:	2b00      	cmp	r3, #0
 8046ea6:	d020      	beq.n	8046eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046ea8:	687b      	ldr	r3, [r7, #4]
 8046eaa:	681b      	ldr	r3, [r3, #0]
 8046eac:	f003 0304 	and.w	r3, r3, #4
 8046eb0:	2b00      	cmp	r3, #0
 8046eb2:	d005      	beq.n	8046ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8046eb4:	4b59      	ldr	r3, [pc, #356]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046eb6:	689b      	ldr	r3, [r3, #8]
 8046eb8:	4a58      	ldr	r2, [pc, #352]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8046ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046ec0:	687b      	ldr	r3, [r7, #4]
 8046ec2:	681b      	ldr	r3, [r3, #0]
 8046ec4:	f003 0308 	and.w	r3, r3, #8
 8046ec8:	2b00      	cmp	r3, #0
 8046eca:	d005      	beq.n	8046ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8046ecc:	4b53      	ldr	r3, [pc, #332]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046ece:	689b      	ldr	r3, [r3, #8]
 8046ed0:	4a52      	ldr	r2, [pc, #328]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8046ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8046ed8:	4b50      	ldr	r3, [pc, #320]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046eda:	689b      	ldr	r3, [r3, #8]
 8046edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8046ee0:	687b      	ldr	r3, [r7, #4]
 8046ee2:	689b      	ldr	r3, [r3, #8]
 8046ee4:	494d      	ldr	r1, [pc, #308]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046ee6:	4313      	orrs	r3, r2
 8046ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8046eea:	687b      	ldr	r3, [r7, #4]
 8046eec:	681b      	ldr	r3, [r3, #0]
 8046eee:	f003 0301 	and.w	r3, r3, #1
 8046ef2:	2b00      	cmp	r3, #0
 8046ef4:	d044      	beq.n	8046f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8046ef6:	687b      	ldr	r3, [r7, #4]
 8046ef8:	685b      	ldr	r3, [r3, #4]
 8046efa:	2b01      	cmp	r3, #1
 8046efc:	d107      	bne.n	8046f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8046efe:	4b47      	ldr	r3, [pc, #284]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f00:	681b      	ldr	r3, [r3, #0]
 8046f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046f06:	2b00      	cmp	r3, #0
 8046f08:	d119      	bne.n	8046f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046f0a:	2301      	movs	r3, #1
 8046f0c:	e07f      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046f0e:	687b      	ldr	r3, [r7, #4]
 8046f10:	685b      	ldr	r3, [r3, #4]
 8046f12:	2b02      	cmp	r3, #2
 8046f14:	d003      	beq.n	8046f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8046f16:	687b      	ldr	r3, [r7, #4]
 8046f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8046f1a:	2b03      	cmp	r3, #3
 8046f1c:	d107      	bne.n	8046f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8046f1e:	4b3f      	ldr	r3, [pc, #252]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f20:	681b      	ldr	r3, [r3, #0]
 8046f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046f26:	2b00      	cmp	r3, #0
 8046f28:	d109      	bne.n	8046f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046f2a:	2301      	movs	r3, #1
 8046f2c:	e06f      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8046f2e:	4b3b      	ldr	r3, [pc, #236]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f30:	681b      	ldr	r3, [r3, #0]
 8046f32:	f003 0302 	and.w	r3, r3, #2
 8046f36:	2b00      	cmp	r3, #0
 8046f38:	d101      	bne.n	8046f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8046f3a:	2301      	movs	r3, #1
 8046f3c:	e067      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8046f3e:	4b37      	ldr	r3, [pc, #220]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f40:	689b      	ldr	r3, [r3, #8]
 8046f42:	f023 0203 	bic.w	r2, r3, #3
 8046f46:	687b      	ldr	r3, [r7, #4]
 8046f48:	685b      	ldr	r3, [r3, #4]
 8046f4a:	4934      	ldr	r1, [pc, #208]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f4c:	4313      	orrs	r3, r2
 8046f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8046f50:	f7fc f9c2 	bl	80432d8 <HAL_GetTick>
 8046f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046f56:	e00a      	b.n	8046f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8046f58:	f7fc f9be 	bl	80432d8 <HAL_GetTick>
 8046f5c:	4602      	mov	r2, r0
 8046f5e:	68fb      	ldr	r3, [r7, #12]
 8046f60:	1ad3      	subs	r3, r2, r3
 8046f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8046f66:	4293      	cmp	r3, r2
 8046f68:	d901      	bls.n	8046f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8046f6a:	2303      	movs	r3, #3
 8046f6c:	e04f      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8046f6e:	4b2b      	ldr	r3, [pc, #172]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046f70:	689b      	ldr	r3, [r3, #8]
 8046f72:	f003 020c 	and.w	r2, r3, #12
 8046f76:	687b      	ldr	r3, [r7, #4]
 8046f78:	685b      	ldr	r3, [r3, #4]
 8046f7a:	009b      	lsls	r3, r3, #2
 8046f7c:	429a      	cmp	r2, r3
 8046f7e:	d1eb      	bne.n	8046f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8046f80:	4b25      	ldr	r3, [pc, #148]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046f82:	681b      	ldr	r3, [r3, #0]
 8046f84:	f003 030f 	and.w	r3, r3, #15
 8046f88:	683a      	ldr	r2, [r7, #0]
 8046f8a:	429a      	cmp	r2, r3
 8046f8c:	d20c      	bcs.n	8046fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8046f8e:	4b22      	ldr	r3, [pc, #136]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046f90:	683a      	ldr	r2, [r7, #0]
 8046f92:	b2d2      	uxtb	r2, r2
 8046f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8046f96:	4b20      	ldr	r3, [pc, #128]	; (8047018 <HAL_RCC_ClockConfig+0x1b8>)
 8046f98:	681b      	ldr	r3, [r3, #0]
 8046f9a:	f003 030f 	and.w	r3, r3, #15
 8046f9e:	683a      	ldr	r2, [r7, #0]
 8046fa0:	429a      	cmp	r2, r3
 8046fa2:	d001      	beq.n	8046fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8046fa4:	2301      	movs	r3, #1
 8046fa6:	e032      	b.n	804700e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8046fa8:	687b      	ldr	r3, [r7, #4]
 8046faa:	681b      	ldr	r3, [r3, #0]
 8046fac:	f003 0304 	and.w	r3, r3, #4
 8046fb0:	2b00      	cmp	r3, #0
 8046fb2:	d008      	beq.n	8046fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8046fb4:	4b19      	ldr	r3, [pc, #100]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046fb6:	689b      	ldr	r3, [r3, #8]
 8046fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8046fbc:	687b      	ldr	r3, [r7, #4]
 8046fbe:	68db      	ldr	r3, [r3, #12]
 8046fc0:	4916      	ldr	r1, [pc, #88]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046fc2:	4313      	orrs	r3, r2
 8046fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8046fc6:	687b      	ldr	r3, [r7, #4]
 8046fc8:	681b      	ldr	r3, [r3, #0]
 8046fca:	f003 0308 	and.w	r3, r3, #8
 8046fce:	2b00      	cmp	r3, #0
 8046fd0:	d009      	beq.n	8046fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8046fd2:	4b12      	ldr	r3, [pc, #72]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046fd4:	689b      	ldr	r3, [r3, #8]
 8046fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8046fda:	687b      	ldr	r3, [r7, #4]
 8046fdc:	691b      	ldr	r3, [r3, #16]
 8046fde:	00db      	lsls	r3, r3, #3
 8046fe0:	490e      	ldr	r1, [pc, #56]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046fe2:	4313      	orrs	r3, r2
 8046fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8046fe6:	f000 f821 	bl	804702c <HAL_RCC_GetSysClockFreq>
 8046fea:	4602      	mov	r2, r0
 8046fec:	4b0b      	ldr	r3, [pc, #44]	; (804701c <HAL_RCC_ClockConfig+0x1bc>)
 8046fee:	689b      	ldr	r3, [r3, #8]
 8046ff0:	091b      	lsrs	r3, r3, #4
 8046ff2:	f003 030f 	and.w	r3, r3, #15
 8046ff6:	490a      	ldr	r1, [pc, #40]	; (8047020 <HAL_RCC_ClockConfig+0x1c0>)
 8046ff8:	5ccb      	ldrb	r3, [r1, r3]
 8046ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8046ffe:	4a09      	ldr	r2, [pc, #36]	; (8047024 <HAL_RCC_ClockConfig+0x1c4>)
 8047000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8047002:	4b09      	ldr	r3, [pc, #36]	; (8047028 <HAL_RCC_ClockConfig+0x1c8>)
 8047004:	681b      	ldr	r3, [r3, #0]
 8047006:	4618      	mov	r0, r3
 8047008:	f7fa fd82 	bl	8041b10 <HAL_InitTick>

  return HAL_OK;
 804700c:	2300      	movs	r3, #0
}
 804700e:	4618      	mov	r0, r3
 8047010:	3710      	adds	r7, #16
 8047012:	46bd      	mov	sp, r7
 8047014:	bd80      	pop	{r7, pc}
 8047016:	bf00      	nop
 8047018:	40023c00 	.word	0x40023c00
 804701c:	40023800 	.word	0x40023800
 8047020:	0804e824 	.word	0x0804e824
 8047024:	20000000 	.word	0x20000000
 8047028:	20000054 	.word	0x20000054

0804702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8047030:	b094      	sub	sp, #80	; 0x50
 8047032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8047034:	2300      	movs	r3, #0
 8047036:	647b      	str	r3, [r7, #68]	; 0x44
 8047038:	2300      	movs	r3, #0
 804703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 804703c:	2300      	movs	r3, #0
 804703e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8047040:	2300      	movs	r3, #0
 8047042:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8047044:	4b79      	ldr	r3, [pc, #484]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 8047046:	689b      	ldr	r3, [r3, #8]
 8047048:	f003 030c 	and.w	r3, r3, #12
 804704c:	2b08      	cmp	r3, #8
 804704e:	d00d      	beq.n	804706c <HAL_RCC_GetSysClockFreq+0x40>
 8047050:	2b08      	cmp	r3, #8
 8047052:	f200 80e1 	bhi.w	8047218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8047056:	2b00      	cmp	r3, #0
 8047058:	d002      	beq.n	8047060 <HAL_RCC_GetSysClockFreq+0x34>
 804705a:	2b04      	cmp	r3, #4
 804705c:	d003      	beq.n	8047066 <HAL_RCC_GetSysClockFreq+0x3a>
 804705e:	e0db      	b.n	8047218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8047060:	4b73      	ldr	r3, [pc, #460]	; (8047230 <HAL_RCC_GetSysClockFreq+0x204>)
 8047062:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8047064:	e0db      	b.n	804721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8047066:	4b73      	ldr	r3, [pc, #460]	; (8047234 <HAL_RCC_GetSysClockFreq+0x208>)
 8047068:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 804706a:	e0d8      	b.n	804721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 804706c:	4b6f      	ldr	r3, [pc, #444]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 804706e:	685b      	ldr	r3, [r3, #4]
 8047070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8047074:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8047076:	4b6d      	ldr	r3, [pc, #436]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 8047078:	685b      	ldr	r3, [r3, #4]
 804707a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804707e:	2b00      	cmp	r3, #0
 8047080:	d063      	beq.n	804714a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8047082:	4b6a      	ldr	r3, [pc, #424]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 8047084:	685b      	ldr	r3, [r3, #4]
 8047086:	099b      	lsrs	r3, r3, #6
 8047088:	2200      	movs	r2, #0
 804708a:	63bb      	str	r3, [r7, #56]	; 0x38
 804708c:	63fa      	str	r2, [r7, #60]	; 0x3c
 804708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8047094:	633b      	str	r3, [r7, #48]	; 0x30
 8047096:	2300      	movs	r3, #0
 8047098:	637b      	str	r3, [r7, #52]	; 0x34
 804709a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 804709e:	4622      	mov	r2, r4
 80470a0:	462b      	mov	r3, r5
 80470a2:	f04f 0000 	mov.w	r0, #0
 80470a6:	f04f 0100 	mov.w	r1, #0
 80470aa:	0159      	lsls	r1, r3, #5
 80470ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80470b0:	0150      	lsls	r0, r2, #5
 80470b2:	4602      	mov	r2, r0
 80470b4:	460b      	mov	r3, r1
 80470b6:	4621      	mov	r1, r4
 80470b8:	1a51      	subs	r1, r2, r1
 80470ba:	6139      	str	r1, [r7, #16]
 80470bc:	4629      	mov	r1, r5
 80470be:	eb63 0301 	sbc.w	r3, r3, r1
 80470c2:	617b      	str	r3, [r7, #20]
 80470c4:	f04f 0200 	mov.w	r2, #0
 80470c8:	f04f 0300 	mov.w	r3, #0
 80470cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80470d0:	4659      	mov	r1, fp
 80470d2:	018b      	lsls	r3, r1, #6
 80470d4:	4651      	mov	r1, sl
 80470d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80470da:	4651      	mov	r1, sl
 80470dc:	018a      	lsls	r2, r1, #6
 80470de:	4651      	mov	r1, sl
 80470e0:	ebb2 0801 	subs.w	r8, r2, r1
 80470e4:	4659      	mov	r1, fp
 80470e6:	eb63 0901 	sbc.w	r9, r3, r1
 80470ea:	f04f 0200 	mov.w	r2, #0
 80470ee:	f04f 0300 	mov.w	r3, #0
 80470f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80470f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80470fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80470fe:	4690      	mov	r8, r2
 8047100:	4699      	mov	r9, r3
 8047102:	4623      	mov	r3, r4
 8047104:	eb18 0303 	adds.w	r3, r8, r3
 8047108:	60bb      	str	r3, [r7, #8]
 804710a:	462b      	mov	r3, r5
 804710c:	eb49 0303 	adc.w	r3, r9, r3
 8047110:	60fb      	str	r3, [r7, #12]
 8047112:	f04f 0200 	mov.w	r2, #0
 8047116:	f04f 0300 	mov.w	r3, #0
 804711a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804711e:	4629      	mov	r1, r5
 8047120:	024b      	lsls	r3, r1, #9
 8047122:	4621      	mov	r1, r4
 8047124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8047128:	4621      	mov	r1, r4
 804712a:	024a      	lsls	r2, r1, #9
 804712c:	4610      	mov	r0, r2
 804712e:	4619      	mov	r1, r3
 8047130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047132:	2200      	movs	r2, #0
 8047134:	62bb      	str	r3, [r7, #40]	; 0x28
 8047136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8047138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 804713c:	f7f9 f8a8 	bl	8040290 <__aeabi_uldivmod>
 8047140:	4602      	mov	r2, r0
 8047142:	460b      	mov	r3, r1
 8047144:	4613      	mov	r3, r2
 8047146:	64fb      	str	r3, [r7, #76]	; 0x4c
 8047148:	e058      	b.n	80471fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804714a:	4b38      	ldr	r3, [pc, #224]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 804714c:	685b      	ldr	r3, [r3, #4]
 804714e:	099b      	lsrs	r3, r3, #6
 8047150:	2200      	movs	r2, #0
 8047152:	4618      	mov	r0, r3
 8047154:	4611      	mov	r1, r2
 8047156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 804715a:	623b      	str	r3, [r7, #32]
 804715c:	2300      	movs	r3, #0
 804715e:	627b      	str	r3, [r7, #36]	; 0x24
 8047160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8047164:	4642      	mov	r2, r8
 8047166:	464b      	mov	r3, r9
 8047168:	f04f 0000 	mov.w	r0, #0
 804716c:	f04f 0100 	mov.w	r1, #0
 8047170:	0159      	lsls	r1, r3, #5
 8047172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8047176:	0150      	lsls	r0, r2, #5
 8047178:	4602      	mov	r2, r0
 804717a:	460b      	mov	r3, r1
 804717c:	4641      	mov	r1, r8
 804717e:	ebb2 0a01 	subs.w	sl, r2, r1
 8047182:	4649      	mov	r1, r9
 8047184:	eb63 0b01 	sbc.w	fp, r3, r1
 8047188:	f04f 0200 	mov.w	r2, #0
 804718c:	f04f 0300 	mov.w	r3, #0
 8047190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8047194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8047198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 804719c:	ebb2 040a 	subs.w	r4, r2, sl
 80471a0:	eb63 050b 	sbc.w	r5, r3, fp
 80471a4:	f04f 0200 	mov.w	r2, #0
 80471a8:	f04f 0300 	mov.w	r3, #0
 80471ac:	00eb      	lsls	r3, r5, #3
 80471ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80471b2:	00e2      	lsls	r2, r4, #3
 80471b4:	4614      	mov	r4, r2
 80471b6:	461d      	mov	r5, r3
 80471b8:	4643      	mov	r3, r8
 80471ba:	18e3      	adds	r3, r4, r3
 80471bc:	603b      	str	r3, [r7, #0]
 80471be:	464b      	mov	r3, r9
 80471c0:	eb45 0303 	adc.w	r3, r5, r3
 80471c4:	607b      	str	r3, [r7, #4]
 80471c6:	f04f 0200 	mov.w	r2, #0
 80471ca:	f04f 0300 	mov.w	r3, #0
 80471ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80471d2:	4629      	mov	r1, r5
 80471d4:	028b      	lsls	r3, r1, #10
 80471d6:	4621      	mov	r1, r4
 80471d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80471dc:	4621      	mov	r1, r4
 80471de:	028a      	lsls	r2, r1, #10
 80471e0:	4610      	mov	r0, r2
 80471e2:	4619      	mov	r1, r3
 80471e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80471e6:	2200      	movs	r2, #0
 80471e8:	61bb      	str	r3, [r7, #24]
 80471ea:	61fa      	str	r2, [r7, #28]
 80471ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80471f0:	f7f9 f84e 	bl	8040290 <__aeabi_uldivmod>
 80471f4:	4602      	mov	r2, r0
 80471f6:	460b      	mov	r3, r1
 80471f8:	4613      	mov	r3, r2
 80471fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80471fc:	4b0b      	ldr	r3, [pc, #44]	; (804722c <HAL_RCC_GetSysClockFreq+0x200>)
 80471fe:	685b      	ldr	r3, [r3, #4]
 8047200:	0c1b      	lsrs	r3, r3, #16
 8047202:	f003 0303 	and.w	r3, r3, #3
 8047206:	3301      	adds	r3, #1
 8047208:	005b      	lsls	r3, r3, #1
 804720a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 804720c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 804720e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8047210:	fbb2 f3f3 	udiv	r3, r2, r3
 8047214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8047216:	e002      	b.n	804721e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8047218:	4b05      	ldr	r3, [pc, #20]	; (8047230 <HAL_RCC_GetSysClockFreq+0x204>)
 804721a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 804721c:	bf00      	nop
    }
  }
  return sysclockfreq;
 804721e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8047220:	4618      	mov	r0, r3
 8047222:	3750      	adds	r7, #80	; 0x50
 8047224:	46bd      	mov	sp, r7
 8047226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804722a:	bf00      	nop
 804722c:	40023800 	.word	0x40023800
 8047230:	00f42400 	.word	0x00f42400
 8047234:	007a1200 	.word	0x007a1200

08047238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8047238:	b480      	push	{r7}
 804723a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 804723c:	4b03      	ldr	r3, [pc, #12]	; (804724c <HAL_RCC_GetHCLKFreq+0x14>)
 804723e:	681b      	ldr	r3, [r3, #0]
}
 8047240:	4618      	mov	r0, r3
 8047242:	46bd      	mov	sp, r7
 8047244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047248:	4770      	bx	lr
 804724a:	bf00      	nop
 804724c:	20000000 	.word	0x20000000

08047250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8047250:	b580      	push	{r7, lr}
 8047252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8047254:	f7ff fff0 	bl	8047238 <HAL_RCC_GetHCLKFreq>
 8047258:	4602      	mov	r2, r0
 804725a:	4b05      	ldr	r3, [pc, #20]	; (8047270 <HAL_RCC_GetPCLK1Freq+0x20>)
 804725c:	689b      	ldr	r3, [r3, #8]
 804725e:	0a9b      	lsrs	r3, r3, #10
 8047260:	f003 0307 	and.w	r3, r3, #7
 8047264:	4903      	ldr	r1, [pc, #12]	; (8047274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8047266:	5ccb      	ldrb	r3, [r1, r3]
 8047268:	fa22 f303 	lsr.w	r3, r2, r3
}
 804726c:	4618      	mov	r0, r3
 804726e:	bd80      	pop	{r7, pc}
 8047270:	40023800 	.word	0x40023800
 8047274:	0804e834 	.word	0x0804e834

08047278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8047278:	b580      	push	{r7, lr}
 804727a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 804727c:	f7ff ffdc 	bl	8047238 <HAL_RCC_GetHCLKFreq>
 8047280:	4602      	mov	r2, r0
 8047282:	4b05      	ldr	r3, [pc, #20]	; (8047298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8047284:	689b      	ldr	r3, [r3, #8]
 8047286:	0b5b      	lsrs	r3, r3, #13
 8047288:	f003 0307 	and.w	r3, r3, #7
 804728c:	4903      	ldr	r1, [pc, #12]	; (804729c <HAL_RCC_GetPCLK2Freq+0x24>)
 804728e:	5ccb      	ldrb	r3, [r1, r3]
 8047290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8047294:	4618      	mov	r0, r3
 8047296:	bd80      	pop	{r7, pc}
 8047298:	40023800 	.word	0x40023800
 804729c:	0804e834 	.word	0x0804e834

080472a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80472a0:	b480      	push	{r7}
 80472a2:	b083      	sub	sp, #12
 80472a4:	af00      	add	r7, sp, #0
 80472a6:	6078      	str	r0, [r7, #4]
 80472a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80472aa:	687b      	ldr	r3, [r7, #4]
 80472ac:	220f      	movs	r2, #15
 80472ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80472b0:	4b12      	ldr	r3, [pc, #72]	; (80472fc <HAL_RCC_GetClockConfig+0x5c>)
 80472b2:	689b      	ldr	r3, [r3, #8]
 80472b4:	f003 0203 	and.w	r2, r3, #3
 80472b8:	687b      	ldr	r3, [r7, #4]
 80472ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80472bc:	4b0f      	ldr	r3, [pc, #60]	; (80472fc <HAL_RCC_GetClockConfig+0x5c>)
 80472be:	689b      	ldr	r3, [r3, #8]
 80472c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80472c4:	687b      	ldr	r3, [r7, #4]
 80472c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80472c8:	4b0c      	ldr	r3, [pc, #48]	; (80472fc <HAL_RCC_GetClockConfig+0x5c>)
 80472ca:	689b      	ldr	r3, [r3, #8]
 80472cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80472d0:	687b      	ldr	r3, [r7, #4]
 80472d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80472d4:	4b09      	ldr	r3, [pc, #36]	; (80472fc <HAL_RCC_GetClockConfig+0x5c>)
 80472d6:	689b      	ldr	r3, [r3, #8]
 80472d8:	08db      	lsrs	r3, r3, #3
 80472da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80472de:	687b      	ldr	r3, [r7, #4]
 80472e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80472e2:	4b07      	ldr	r3, [pc, #28]	; (8047300 <HAL_RCC_GetClockConfig+0x60>)
 80472e4:	681b      	ldr	r3, [r3, #0]
 80472e6:	f003 020f 	and.w	r2, r3, #15
 80472ea:	683b      	ldr	r3, [r7, #0]
 80472ec:	601a      	str	r2, [r3, #0]
}
 80472ee:	bf00      	nop
 80472f0:	370c      	adds	r7, #12
 80472f2:	46bd      	mov	sp, r7
 80472f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80472f8:	4770      	bx	lr
 80472fa:	bf00      	nop
 80472fc:	40023800 	.word	0x40023800
 8047300:	40023c00 	.word	0x40023c00

08047304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8047304:	b580      	push	{r7, lr}
 8047306:	b086      	sub	sp, #24
 8047308:	af00      	add	r7, sp, #0
 804730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 804730c:	2300      	movs	r3, #0
 804730e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8047310:	2300      	movs	r3, #0
 8047312:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047314:	687b      	ldr	r3, [r7, #4]
 8047316:	681b      	ldr	r3, [r3, #0]
 8047318:	f003 0301 	and.w	r3, r3, #1
 804731c:	2b00      	cmp	r3, #0
 804731e:	d10b      	bne.n	8047338 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8047320:	687b      	ldr	r3, [r7, #4]
 8047322:	681b      	ldr	r3, [r3, #0]
 8047324:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8047328:	2b00      	cmp	r3, #0
 804732a:	d105      	bne.n	8047338 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 804732c:	687b      	ldr	r3, [r7, #4]
 804732e:	681b      	ldr	r3, [r3, #0]
 8047330:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8047334:	2b00      	cmp	r3, #0
 8047336:	d075      	beq.n	8047424 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8047338:	4b91      	ldr	r3, [pc, #580]	; (8047580 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 804733a:	2200      	movs	r2, #0
 804733c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 804733e:	f7fb ffcb 	bl	80432d8 <HAL_GetTick>
 8047342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047344:	e008      	b.n	8047358 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047346:	f7fb ffc7 	bl	80432d8 <HAL_GetTick>
 804734a:	4602      	mov	r2, r0
 804734c:	697b      	ldr	r3, [r7, #20]
 804734e:	1ad3      	subs	r3, r2, r3
 8047350:	2b02      	cmp	r3, #2
 8047352:	d901      	bls.n	8047358 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047354:	2303      	movs	r3, #3
 8047356:	e189      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8047358:	4b8a      	ldr	r3, [pc, #552]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804735a:	681b      	ldr	r3, [r3, #0]
 804735c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047360:	2b00      	cmp	r3, #0
 8047362:	d1f0      	bne.n	8047346 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8047364:	687b      	ldr	r3, [r7, #4]
 8047366:	681b      	ldr	r3, [r3, #0]
 8047368:	f003 0301 	and.w	r3, r3, #1
 804736c:	2b00      	cmp	r3, #0
 804736e:	d009      	beq.n	8047384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8047370:	687b      	ldr	r3, [r7, #4]
 8047372:	685b      	ldr	r3, [r3, #4]
 8047374:	019a      	lsls	r2, r3, #6
 8047376:	687b      	ldr	r3, [r7, #4]
 8047378:	689b      	ldr	r3, [r3, #8]
 804737a:	071b      	lsls	r3, r3, #28
 804737c:	4981      	ldr	r1, [pc, #516]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804737e:	4313      	orrs	r3, r2
 8047380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8047384:	687b      	ldr	r3, [r7, #4]
 8047386:	681b      	ldr	r3, [r3, #0]
 8047388:	f003 0302 	and.w	r3, r3, #2
 804738c:	2b00      	cmp	r3, #0
 804738e:	d01f      	beq.n	80473d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8047390:	4b7c      	ldr	r3, [pc, #496]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8047396:	0f1b      	lsrs	r3, r3, #28
 8047398:	f003 0307 	and.w	r3, r3, #7
 804739c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 804739e:	687b      	ldr	r3, [r7, #4]
 80473a0:	685b      	ldr	r3, [r3, #4]
 80473a2:	019a      	lsls	r2, r3, #6
 80473a4:	687b      	ldr	r3, [r7, #4]
 80473a6:	68db      	ldr	r3, [r3, #12]
 80473a8:	061b      	lsls	r3, r3, #24
 80473aa:	431a      	orrs	r2, r3
 80473ac:	693b      	ldr	r3, [r7, #16]
 80473ae:	071b      	lsls	r3, r3, #28
 80473b0:	4974      	ldr	r1, [pc, #464]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80473b2:	4313      	orrs	r3, r2
 80473b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80473b8:	4b72      	ldr	r3, [pc, #456]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80473ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80473be:	f023 021f 	bic.w	r2, r3, #31
 80473c2:	687b      	ldr	r3, [r7, #4]
 80473c4:	69db      	ldr	r3, [r3, #28]
 80473c6:	3b01      	subs	r3, #1
 80473c8:	496e      	ldr	r1, [pc, #440]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80473ca:	4313      	orrs	r3, r2
 80473cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80473d0:	687b      	ldr	r3, [r7, #4]
 80473d2:	681b      	ldr	r3, [r3, #0]
 80473d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80473d8:	2b00      	cmp	r3, #0
 80473da:	d00d      	beq.n	80473f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80473dc:	687b      	ldr	r3, [r7, #4]
 80473de:	685b      	ldr	r3, [r3, #4]
 80473e0:	019a      	lsls	r2, r3, #6
 80473e2:	687b      	ldr	r3, [r7, #4]
 80473e4:	68db      	ldr	r3, [r3, #12]
 80473e6:	061b      	lsls	r3, r3, #24
 80473e8:	431a      	orrs	r2, r3
 80473ea:	687b      	ldr	r3, [r7, #4]
 80473ec:	689b      	ldr	r3, [r3, #8]
 80473ee:	071b      	lsls	r3, r3, #28
 80473f0:	4964      	ldr	r1, [pc, #400]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80473f2:	4313      	orrs	r3, r2
 80473f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80473f8:	4b61      	ldr	r3, [pc, #388]	; (8047580 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80473fa:	2201      	movs	r2, #1
 80473fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80473fe:	f7fb ff6b 	bl	80432d8 <HAL_GetTick>
 8047402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047404:	e008      	b.n	8047418 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8047406:	f7fb ff67 	bl	80432d8 <HAL_GetTick>
 804740a:	4602      	mov	r2, r0
 804740c:	697b      	ldr	r3, [r7, #20]
 804740e:	1ad3      	subs	r3, r2, r3
 8047410:	2b02      	cmp	r3, #2
 8047412:	d901      	bls.n	8047418 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047414:	2303      	movs	r3, #3
 8047416:	e129      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8047418:	4b5a      	ldr	r3, [pc, #360]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804741a:	681b      	ldr	r3, [r3, #0]
 804741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8047420:	2b00      	cmp	r3, #0
 8047422:	d0f0      	beq.n	8047406 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047424:	687b      	ldr	r3, [r7, #4]
 8047426:	681b      	ldr	r3, [r3, #0]
 8047428:	f003 0304 	and.w	r3, r3, #4
 804742c:	2b00      	cmp	r3, #0
 804742e:	d105      	bne.n	804743c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8047430:	687b      	ldr	r3, [r7, #4]
 8047432:	681b      	ldr	r3, [r3, #0]
 8047434:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8047438:	2b00      	cmp	r3, #0
 804743a:	d079      	beq.n	8047530 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 804743c:	4b52      	ldr	r3, [pc, #328]	; (8047588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804743e:	2200      	movs	r2, #0
 8047440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047442:	f7fb ff49 	bl	80432d8 <HAL_GetTick>
 8047446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8047448:	e008      	b.n	804745c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 804744a:	f7fb ff45 	bl	80432d8 <HAL_GetTick>
 804744e:	4602      	mov	r2, r0
 8047450:	697b      	ldr	r3, [r7, #20]
 8047452:	1ad3      	subs	r3, r2, r3
 8047454:	2b02      	cmp	r3, #2
 8047456:	d901      	bls.n	804745c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8047458:	2303      	movs	r3, #3
 804745a:	e107      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 804745c:	4b49      	ldr	r3, [pc, #292]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804745e:	681b      	ldr	r3, [r3, #0]
 8047460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8047468:	d0ef      	beq.n	804744a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 804746a:	687b      	ldr	r3, [r7, #4]
 804746c:	681b      	ldr	r3, [r3, #0]
 804746e:	f003 0304 	and.w	r3, r3, #4
 8047472:	2b00      	cmp	r3, #0
 8047474:	d020      	beq.n	80474b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8047476:	4b43      	ldr	r3, [pc, #268]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804747c:	0f1b      	lsrs	r3, r3, #28
 804747e:	f003 0307 	and.w	r3, r3, #7
 8047482:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8047484:	687b      	ldr	r3, [r7, #4]
 8047486:	691b      	ldr	r3, [r3, #16]
 8047488:	019a      	lsls	r2, r3, #6
 804748a:	687b      	ldr	r3, [r7, #4]
 804748c:	695b      	ldr	r3, [r3, #20]
 804748e:	061b      	lsls	r3, r3, #24
 8047490:	431a      	orrs	r2, r3
 8047492:	693b      	ldr	r3, [r7, #16]
 8047494:	071b      	lsls	r3, r3, #28
 8047496:	493b      	ldr	r1, [pc, #236]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047498:	4313      	orrs	r3, r2
 804749a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 804749e:	4b39      	ldr	r3, [pc, #228]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80474a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80474a8:	687b      	ldr	r3, [r7, #4]
 80474aa:	6a1b      	ldr	r3, [r3, #32]
 80474ac:	3b01      	subs	r3, #1
 80474ae:	021b      	lsls	r3, r3, #8
 80474b0:	4934      	ldr	r1, [pc, #208]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474b2:	4313      	orrs	r3, r2
 80474b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80474b8:	687b      	ldr	r3, [r7, #4]
 80474ba:	681b      	ldr	r3, [r3, #0]
 80474bc:	f003 0308 	and.w	r3, r3, #8
 80474c0:	2b00      	cmp	r3, #0
 80474c2:	d01e      	beq.n	8047502 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80474c4:	4b2f      	ldr	r3, [pc, #188]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80474ca:	0e1b      	lsrs	r3, r3, #24
 80474cc:	f003 030f 	and.w	r3, r3, #15
 80474d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80474d2:	687b      	ldr	r3, [r7, #4]
 80474d4:	691b      	ldr	r3, [r3, #16]
 80474d6:	019a      	lsls	r2, r3, #6
 80474d8:	693b      	ldr	r3, [r7, #16]
 80474da:	061b      	lsls	r3, r3, #24
 80474dc:	431a      	orrs	r2, r3
 80474de:	687b      	ldr	r3, [r7, #4]
 80474e0:	699b      	ldr	r3, [r3, #24]
 80474e2:	071b      	lsls	r3, r3, #28
 80474e4:	4927      	ldr	r1, [pc, #156]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474e6:	4313      	orrs	r3, r2
 80474e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80474ec:	4b25      	ldr	r3, [pc, #148]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80474f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80474f6:	687b      	ldr	r3, [r7, #4]
 80474f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80474fa:	4922      	ldr	r1, [pc, #136]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80474fc:	4313      	orrs	r3, r2
 80474fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8047502:	4b21      	ldr	r3, [pc, #132]	; (8047588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8047504:	2201      	movs	r2, #1
 8047506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8047508:	f7fb fee6 	bl	80432d8 <HAL_GetTick>
 804750c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 804750e:	e008      	b.n	8047522 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8047510:	f7fb fee2 	bl	80432d8 <HAL_GetTick>
 8047514:	4602      	mov	r2, r0
 8047516:	697b      	ldr	r3, [r7, #20]
 8047518:	1ad3      	subs	r3, r2, r3
 804751a:	2b02      	cmp	r3, #2
 804751c:	d901      	bls.n	8047522 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 804751e:	2303      	movs	r3, #3
 8047520:	e0a4      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8047522:	4b18      	ldr	r3, [pc, #96]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047524:	681b      	ldr	r3, [r3, #0]
 8047526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804752a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804752e:	d1ef      	bne.n	8047510 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8047530:	687b      	ldr	r3, [r7, #4]
 8047532:	681b      	ldr	r3, [r3, #0]
 8047534:	f003 0320 	and.w	r3, r3, #32
 8047538:	2b00      	cmp	r3, #0
 804753a:	f000 808b 	beq.w	8047654 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 804753e:	2300      	movs	r3, #0
 8047540:	60fb      	str	r3, [r7, #12]
 8047542:	4b10      	ldr	r3, [pc, #64]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047546:	4a0f      	ldr	r2, [pc, #60]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804754c:	6413      	str	r3, [r2, #64]	; 0x40
 804754e:	4b0d      	ldr	r3, [pc, #52]	; (8047584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8047550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8047552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8047556:	60fb      	str	r3, [r7, #12]
 8047558:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 804755a:	4b0c      	ldr	r3, [pc, #48]	; (804758c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 804755c:	681b      	ldr	r3, [r3, #0]
 804755e:	4a0b      	ldr	r2, [pc, #44]	; (804758c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8047560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8047564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8047566:	f7fb feb7 	bl	80432d8 <HAL_GetTick>
 804756a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 804756c:	e010      	b.n	8047590 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 804756e:	f7fb feb3 	bl	80432d8 <HAL_GetTick>
 8047572:	4602      	mov	r2, r0
 8047574:	697b      	ldr	r3, [r7, #20]
 8047576:	1ad3      	subs	r3, r2, r3
 8047578:	2b02      	cmp	r3, #2
 804757a:	d909      	bls.n	8047590 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 804757c:	2303      	movs	r3, #3
 804757e:	e075      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8047580:	42470068 	.word	0x42470068
 8047584:	40023800 	.word	0x40023800
 8047588:	42470070 	.word	0x42470070
 804758c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8047590:	4b38      	ldr	r3, [pc, #224]	; (8047674 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8047592:	681b      	ldr	r3, [r3, #0]
 8047594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047598:	2b00      	cmp	r3, #0
 804759a:	d0e8      	beq.n	804756e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 804759c:	4b36      	ldr	r3, [pc, #216]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804759e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80475a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80475a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80475a6:	693b      	ldr	r3, [r7, #16]
 80475a8:	2b00      	cmp	r3, #0
 80475aa:	d02f      	beq.n	804760c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80475ac:	687b      	ldr	r3, [r7, #4]
 80475ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80475b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80475b4:	693a      	ldr	r2, [r7, #16]
 80475b6:	429a      	cmp	r2, r3
 80475b8:	d028      	beq.n	804760c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80475ba:	4b2f      	ldr	r3, [pc, #188]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80475bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80475be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80475c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80475c4:	4b2d      	ldr	r3, [pc, #180]	; (804767c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80475c6:	2201      	movs	r2, #1
 80475c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80475ca:	4b2c      	ldr	r3, [pc, #176]	; (804767c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80475cc:	2200      	movs	r2, #0
 80475ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80475d0:	4a29      	ldr	r2, [pc, #164]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80475d2:	693b      	ldr	r3, [r7, #16]
 80475d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80475d6:	4b28      	ldr	r3, [pc, #160]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80475d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80475da:	f003 0301 	and.w	r3, r3, #1
 80475de:	2b01      	cmp	r3, #1
 80475e0:	d114      	bne.n	804760c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80475e2:	f7fb fe79 	bl	80432d8 <HAL_GetTick>
 80475e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80475e8:	e00a      	b.n	8047600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80475ea:	f7fb fe75 	bl	80432d8 <HAL_GetTick>
 80475ee:	4602      	mov	r2, r0
 80475f0:	697b      	ldr	r3, [r7, #20]
 80475f2:	1ad3      	subs	r3, r2, r3
 80475f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80475f8:	4293      	cmp	r3, r2
 80475fa:	d901      	bls.n	8047600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80475fc:	2303      	movs	r3, #3
 80475fe:	e035      	b.n	804766c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8047600:	4b1d      	ldr	r3, [pc, #116]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047604:	f003 0302 	and.w	r3, r3, #2
 8047608:	2b00      	cmp	r3, #0
 804760a:	d0ee      	beq.n	80475ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804760c:	687b      	ldr	r3, [r7, #4]
 804760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8047614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8047618:	d10d      	bne.n	8047636 <HAL_RCCEx_PeriphCLKConfig+0x332>
 804761a:	4b17      	ldr	r3, [pc, #92]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804761c:	689b      	ldr	r3, [r3, #8]
 804761e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8047622:	687b      	ldr	r3, [r7, #4]
 8047624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 804762a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804762e:	4912      	ldr	r1, [pc, #72]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047630:	4313      	orrs	r3, r2
 8047632:	608b      	str	r3, [r1, #8]
 8047634:	e005      	b.n	8047642 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8047636:	4b10      	ldr	r3, [pc, #64]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047638:	689b      	ldr	r3, [r3, #8]
 804763a:	4a0f      	ldr	r2, [pc, #60]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 804763c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8047640:	6093      	str	r3, [r2, #8]
 8047642:	4b0d      	ldr	r3, [pc, #52]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8047646:	687b      	ldr	r3, [r7, #4]
 8047648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804764a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 804764e:	490a      	ldr	r1, [pc, #40]	; (8047678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8047650:	4313      	orrs	r3, r2
 8047652:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8047654:	687b      	ldr	r3, [r7, #4]
 8047656:	681b      	ldr	r3, [r3, #0]
 8047658:	f003 0310 	and.w	r3, r3, #16
 804765c:	2b00      	cmp	r3, #0
 804765e:	d004      	beq.n	804766a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8047660:	687b      	ldr	r3, [r7, #4]
 8047662:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8047666:	4b06      	ldr	r3, [pc, #24]	; (8047680 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8047668:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 804766a:	2300      	movs	r3, #0
}
 804766c:	4618      	mov	r0, r3
 804766e:	3718      	adds	r7, #24
 8047670:	46bd      	mov	sp, r7
 8047672:	bd80      	pop	{r7, pc}
 8047674:	40007000 	.word	0x40007000
 8047678:	40023800 	.word	0x40023800
 804767c:	42470e40 	.word	0x42470e40
 8047680:	424711e0 	.word	0x424711e0

08047684 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8047684:	b580      	push	{r7, lr}
 8047686:	b082      	sub	sp, #8
 8047688:	af00      	add	r7, sp, #0
 804768a:	6078      	str	r0, [r7, #4]
 804768c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 804768e:	687b      	ldr	r3, [r7, #4]
 8047690:	2b00      	cmp	r3, #0
 8047692:	d101      	bne.n	8047698 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8047694:	2301      	movs	r3, #1
 8047696:	e025      	b.n	80476e4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8047698:	687b      	ldr	r3, [r7, #4]
 804769a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 804769e:	b2db      	uxtb	r3, r3
 80476a0:	2b00      	cmp	r3, #0
 80476a2:	d106      	bne.n	80476b2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80476a4:	687b      	ldr	r3, [r7, #4]
 80476a6:	2200      	movs	r2, #0
 80476a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80476ac:	6878      	ldr	r0, [r7, #4]
 80476ae:	f7fa fa25 	bl	8041afc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80476b2:	687b      	ldr	r3, [r7, #4]
 80476b4:	2202      	movs	r2, #2
 80476b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80476ba:	687b      	ldr	r3, [r7, #4]
 80476bc:	681a      	ldr	r2, [r3, #0]
 80476be:	687b      	ldr	r3, [r7, #4]
 80476c0:	3304      	adds	r3, #4
 80476c2:	4619      	mov	r1, r3
 80476c4:	4610      	mov	r0, r2
 80476c6:	f001 ff33 	bl	8049530 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80476ca:	687b      	ldr	r3, [r7, #4]
 80476cc:	6818      	ldr	r0, [r3, #0]
 80476ce:	687b      	ldr	r3, [r7, #4]
 80476d0:	685b      	ldr	r3, [r3, #4]
 80476d2:	461a      	mov	r2, r3
 80476d4:	6839      	ldr	r1, [r7, #0]
 80476d6:	f001 ff88 	bl	80495ea <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80476da:	687b      	ldr	r3, [r7, #4]
 80476dc:	2201      	movs	r2, #1
 80476de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80476e2:	2300      	movs	r3, #0
}
 80476e4:	4618      	mov	r0, r3
 80476e6:	3708      	adds	r7, #8
 80476e8:	46bd      	mov	sp, r7
 80476ea:	bd80      	pop	{r7, pc}

080476ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80476ec:	b580      	push	{r7, lr}
 80476ee:	b086      	sub	sp, #24
 80476f0:	af00      	add	r7, sp, #0
 80476f2:	60f8      	str	r0, [r7, #12]
 80476f4:	60b9      	str	r1, [r7, #8]
 80476f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80476f8:	68fb      	ldr	r3, [r7, #12]
 80476fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80476fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8047700:	7dfb      	ldrb	r3, [r7, #23]
 8047702:	2b02      	cmp	r3, #2
 8047704:	d101      	bne.n	804770a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8047706:	2302      	movs	r3, #2
 8047708:	e021      	b.n	804774e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 804770a:	7dfb      	ldrb	r3, [r7, #23]
 804770c:	2b01      	cmp	r3, #1
 804770e:	d002      	beq.n	8047716 <HAL_SDRAM_SendCommand+0x2a>
 8047710:	7dfb      	ldrb	r3, [r7, #23]
 8047712:	2b05      	cmp	r3, #5
 8047714:	d118      	bne.n	8047748 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8047716:	68fb      	ldr	r3, [r7, #12]
 8047718:	2202      	movs	r2, #2
 804771a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 804771e:	68fb      	ldr	r3, [r7, #12]
 8047720:	681b      	ldr	r3, [r3, #0]
 8047722:	687a      	ldr	r2, [r7, #4]
 8047724:	68b9      	ldr	r1, [r7, #8]
 8047726:	4618      	mov	r0, r3
 8047728:	f001 ffc8 	bl	80496bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 804772c:	68bb      	ldr	r3, [r7, #8]
 804772e:	681b      	ldr	r3, [r3, #0]
 8047730:	2b02      	cmp	r3, #2
 8047732:	d104      	bne.n	804773e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8047734:	68fb      	ldr	r3, [r7, #12]
 8047736:	2205      	movs	r2, #5
 8047738:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 804773c:	e006      	b.n	804774c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 804773e:	68fb      	ldr	r3, [r7, #12]
 8047740:	2201      	movs	r2, #1
 8047742:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8047746:	e001      	b.n	804774c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8047748:	2301      	movs	r3, #1
 804774a:	e000      	b.n	804774e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 804774c:	2300      	movs	r3, #0
}
 804774e:	4618      	mov	r0, r3
 8047750:	3718      	adds	r7, #24
 8047752:	46bd      	mov	sp, r7
 8047754:	bd80      	pop	{r7, pc}

08047756 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8047756:	b580      	push	{r7, lr}
 8047758:	b082      	sub	sp, #8
 804775a:	af00      	add	r7, sp, #0
 804775c:	6078      	str	r0, [r7, #4]
 804775e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8047760:	687b      	ldr	r3, [r7, #4]
 8047762:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047766:	b2db      	uxtb	r3, r3
 8047768:	2b02      	cmp	r3, #2
 804776a:	d101      	bne.n	8047770 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 804776c:	2302      	movs	r3, #2
 804776e:	e016      	b.n	804779e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8047770:	687b      	ldr	r3, [r7, #4]
 8047772:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8047776:	b2db      	uxtb	r3, r3
 8047778:	2b01      	cmp	r3, #1
 804777a:	d10f      	bne.n	804779c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 804777c:	687b      	ldr	r3, [r7, #4]
 804777e:	2202      	movs	r2, #2
 8047780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8047784:	687b      	ldr	r3, [r7, #4]
 8047786:	681b      	ldr	r3, [r3, #0]
 8047788:	6839      	ldr	r1, [r7, #0]
 804778a:	4618      	mov	r0, r3
 804778c:	f001 ffd3 	bl	8049736 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8047790:	687b      	ldr	r3, [r7, #4]
 8047792:	2201      	movs	r2, #1
 8047794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8047798:	2300      	movs	r3, #0
 804779a:	e000      	b.n	804779e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 804779c:	2301      	movs	r3, #1
}
 804779e:	4618      	mov	r0, r3
 80477a0:	3708      	adds	r7, #8
 80477a2:	46bd      	mov	sp, r7
 80477a4:	bd80      	pop	{r7, pc}

080477a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80477a6:	b580      	push	{r7, lr}
 80477a8:	b082      	sub	sp, #8
 80477aa:	af00      	add	r7, sp, #0
 80477ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80477ae:	687b      	ldr	r3, [r7, #4]
 80477b0:	2b00      	cmp	r3, #0
 80477b2:	d101      	bne.n	80477b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80477b4:	2301      	movs	r3, #1
 80477b6:	e07b      	b.n	80478b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80477b8:	687b      	ldr	r3, [r7, #4]
 80477ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80477bc:	2b00      	cmp	r3, #0
 80477be:	d108      	bne.n	80477d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80477c0:	687b      	ldr	r3, [r7, #4]
 80477c2:	685b      	ldr	r3, [r3, #4]
 80477c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80477c8:	d009      	beq.n	80477de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80477ca:	687b      	ldr	r3, [r7, #4]
 80477cc:	2200      	movs	r2, #0
 80477ce:	61da      	str	r2, [r3, #28]
 80477d0:	e005      	b.n	80477de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80477d2:	687b      	ldr	r3, [r7, #4]
 80477d4:	2200      	movs	r2, #0
 80477d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80477d8:	687b      	ldr	r3, [r7, #4]
 80477da:	2200      	movs	r2, #0
 80477dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80477de:	687b      	ldr	r3, [r7, #4]
 80477e0:	2200      	movs	r2, #0
 80477e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80477e4:	687b      	ldr	r3, [r7, #4]
 80477e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80477ea:	b2db      	uxtb	r3, r3
 80477ec:	2b00      	cmp	r3, #0
 80477ee:	d106      	bne.n	80477fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80477f0:	687b      	ldr	r3, [r7, #4]
 80477f2:	2200      	movs	r2, #0
 80477f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80477f8:	6878      	ldr	r0, [r7, #4]
 80477fa:	f7fa f81d 	bl	8041838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80477fe:	687b      	ldr	r3, [r7, #4]
 8047800:	2202      	movs	r2, #2
 8047802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8047806:	687b      	ldr	r3, [r7, #4]
 8047808:	681b      	ldr	r3, [r3, #0]
 804780a:	681a      	ldr	r2, [r3, #0]
 804780c:	687b      	ldr	r3, [r7, #4]
 804780e:	681b      	ldr	r3, [r3, #0]
 8047810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047814:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8047816:	687b      	ldr	r3, [r7, #4]
 8047818:	685b      	ldr	r3, [r3, #4]
 804781a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804781e:	687b      	ldr	r3, [r7, #4]
 8047820:	689b      	ldr	r3, [r3, #8]
 8047822:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8047826:	431a      	orrs	r2, r3
 8047828:	687b      	ldr	r3, [r7, #4]
 804782a:	68db      	ldr	r3, [r3, #12]
 804782c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8047830:	431a      	orrs	r2, r3
 8047832:	687b      	ldr	r3, [r7, #4]
 8047834:	691b      	ldr	r3, [r3, #16]
 8047836:	f003 0302 	and.w	r3, r3, #2
 804783a:	431a      	orrs	r2, r3
 804783c:	687b      	ldr	r3, [r7, #4]
 804783e:	695b      	ldr	r3, [r3, #20]
 8047840:	f003 0301 	and.w	r3, r3, #1
 8047844:	431a      	orrs	r2, r3
 8047846:	687b      	ldr	r3, [r7, #4]
 8047848:	699b      	ldr	r3, [r3, #24]
 804784a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804784e:	431a      	orrs	r2, r3
 8047850:	687b      	ldr	r3, [r7, #4]
 8047852:	69db      	ldr	r3, [r3, #28]
 8047854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8047858:	431a      	orrs	r2, r3
 804785a:	687b      	ldr	r3, [r7, #4]
 804785c:	6a1b      	ldr	r3, [r3, #32]
 804785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047862:	ea42 0103 	orr.w	r1, r2, r3
 8047866:	687b      	ldr	r3, [r7, #4]
 8047868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804786a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804786e:	687b      	ldr	r3, [r7, #4]
 8047870:	681b      	ldr	r3, [r3, #0]
 8047872:	430a      	orrs	r2, r1
 8047874:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8047876:	687b      	ldr	r3, [r7, #4]
 8047878:	699b      	ldr	r3, [r3, #24]
 804787a:	0c1b      	lsrs	r3, r3, #16
 804787c:	f003 0104 	and.w	r1, r3, #4
 8047880:	687b      	ldr	r3, [r7, #4]
 8047882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047884:	f003 0210 	and.w	r2, r3, #16
 8047888:	687b      	ldr	r3, [r7, #4]
 804788a:	681b      	ldr	r3, [r3, #0]
 804788c:	430a      	orrs	r2, r1
 804788e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8047890:	687b      	ldr	r3, [r7, #4]
 8047892:	681b      	ldr	r3, [r3, #0]
 8047894:	69da      	ldr	r2, [r3, #28]
 8047896:	687b      	ldr	r3, [r7, #4]
 8047898:	681b      	ldr	r3, [r3, #0]
 804789a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 804789e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80478a0:	687b      	ldr	r3, [r7, #4]
 80478a2:	2200      	movs	r2, #0
 80478a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80478a6:	687b      	ldr	r3, [r7, #4]
 80478a8:	2201      	movs	r2, #1
 80478aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80478ae:	2300      	movs	r3, #0
}
 80478b0:	4618      	mov	r0, r3
 80478b2:	3708      	adds	r7, #8
 80478b4:	46bd      	mov	sp, r7
 80478b6:	bd80      	pop	{r7, pc}

080478b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80478b8:	b580      	push	{r7, lr}
 80478ba:	b082      	sub	sp, #8
 80478bc:	af00      	add	r7, sp, #0
 80478be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80478c0:	687b      	ldr	r3, [r7, #4]
 80478c2:	2b00      	cmp	r3, #0
 80478c4:	d101      	bne.n	80478ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80478c6:	2301      	movs	r3, #1
 80478c8:	e01a      	b.n	8047900 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80478ca:	687b      	ldr	r3, [r7, #4]
 80478cc:	2202      	movs	r2, #2
 80478ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80478d2:	687b      	ldr	r3, [r7, #4]
 80478d4:	681b      	ldr	r3, [r3, #0]
 80478d6:	681a      	ldr	r2, [r3, #0]
 80478d8:	687b      	ldr	r3, [r7, #4]
 80478da:	681b      	ldr	r3, [r3, #0]
 80478dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80478e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80478e2:	6878      	ldr	r0, [r7, #4]
 80478e4:	f7f9 fff0 	bl	80418c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80478e8:	687b      	ldr	r3, [r7, #4]
 80478ea:	2200      	movs	r2, #0
 80478ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80478ee:	687b      	ldr	r3, [r7, #4]
 80478f0:	2200      	movs	r2, #0
 80478f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80478f6:	687b      	ldr	r3, [r7, #4]
 80478f8:	2200      	movs	r2, #0
 80478fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80478fe:	2300      	movs	r3, #0
}
 8047900:	4618      	mov	r0, r3
 8047902:	3708      	adds	r7, #8
 8047904:	46bd      	mov	sp, r7
 8047906:	bd80      	pop	{r7, pc}

08047908 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047908:	b580      	push	{r7, lr}
 804790a:	b088      	sub	sp, #32
 804790c:	af00      	add	r7, sp, #0
 804790e:	60f8      	str	r0, [r7, #12]
 8047910:	60b9      	str	r1, [r7, #8]
 8047912:	603b      	str	r3, [r7, #0]
 8047914:	4613      	mov	r3, r2
 8047916:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047918:	2300      	movs	r3, #0
 804791a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804791c:	68fb      	ldr	r3, [r7, #12]
 804791e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047922:	2b01      	cmp	r3, #1
 8047924:	d101      	bne.n	804792a <HAL_SPI_Transmit+0x22>
 8047926:	2302      	movs	r3, #2
 8047928:	e126      	b.n	8047b78 <HAL_SPI_Transmit+0x270>
 804792a:	68fb      	ldr	r3, [r7, #12]
 804792c:	2201      	movs	r2, #1
 804792e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047932:	f7fb fcd1 	bl	80432d8 <HAL_GetTick>
 8047936:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8047938:	88fb      	ldrh	r3, [r7, #6]
 804793a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 804793c:	68fb      	ldr	r3, [r7, #12]
 804793e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047942:	b2db      	uxtb	r3, r3
 8047944:	2b01      	cmp	r3, #1
 8047946:	d002      	beq.n	804794e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8047948:	2302      	movs	r3, #2
 804794a:	77fb      	strb	r3, [r7, #31]
    goto error;
 804794c:	e10b      	b.n	8047b66 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 804794e:	68bb      	ldr	r3, [r7, #8]
 8047950:	2b00      	cmp	r3, #0
 8047952:	d002      	beq.n	804795a <HAL_SPI_Transmit+0x52>
 8047954:	88fb      	ldrh	r3, [r7, #6]
 8047956:	2b00      	cmp	r3, #0
 8047958:	d102      	bne.n	8047960 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 804795a:	2301      	movs	r3, #1
 804795c:	77fb      	strb	r3, [r7, #31]
    goto error;
 804795e:	e102      	b.n	8047b66 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8047960:	68fb      	ldr	r3, [r7, #12]
 8047962:	2203      	movs	r2, #3
 8047964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047968:	68fb      	ldr	r3, [r7, #12]
 804796a:	2200      	movs	r2, #0
 804796c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 804796e:	68fb      	ldr	r3, [r7, #12]
 8047970:	68ba      	ldr	r2, [r7, #8]
 8047972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8047974:	68fb      	ldr	r3, [r7, #12]
 8047976:	88fa      	ldrh	r2, [r7, #6]
 8047978:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 804797a:	68fb      	ldr	r3, [r7, #12]
 804797c:	88fa      	ldrh	r2, [r7, #6]
 804797e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8047980:	68fb      	ldr	r3, [r7, #12]
 8047982:	2200      	movs	r2, #0
 8047984:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8047986:	68fb      	ldr	r3, [r7, #12]
 8047988:	2200      	movs	r2, #0
 804798a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 804798c:	68fb      	ldr	r3, [r7, #12]
 804798e:	2200      	movs	r2, #0
 8047990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8047992:	68fb      	ldr	r3, [r7, #12]
 8047994:	2200      	movs	r2, #0
 8047996:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8047998:	68fb      	ldr	r3, [r7, #12]
 804799a:	2200      	movs	r2, #0
 804799c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804799e:	68fb      	ldr	r3, [r7, #12]
 80479a0:	689b      	ldr	r3, [r3, #8]
 80479a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80479a6:	d10f      	bne.n	80479c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80479a8:	68fb      	ldr	r3, [r7, #12]
 80479aa:	681b      	ldr	r3, [r3, #0]
 80479ac:	681a      	ldr	r2, [r3, #0]
 80479ae:	68fb      	ldr	r3, [r7, #12]
 80479b0:	681b      	ldr	r3, [r3, #0]
 80479b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80479b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80479b8:	68fb      	ldr	r3, [r7, #12]
 80479ba:	681b      	ldr	r3, [r3, #0]
 80479bc:	681a      	ldr	r2, [r3, #0]
 80479be:	68fb      	ldr	r3, [r7, #12]
 80479c0:	681b      	ldr	r3, [r3, #0]
 80479c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80479c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80479c8:	68fb      	ldr	r3, [r7, #12]
 80479ca:	681b      	ldr	r3, [r3, #0]
 80479cc:	681b      	ldr	r3, [r3, #0]
 80479ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80479d2:	2b40      	cmp	r3, #64	; 0x40
 80479d4:	d007      	beq.n	80479e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80479d6:	68fb      	ldr	r3, [r7, #12]
 80479d8:	681b      	ldr	r3, [r3, #0]
 80479da:	681a      	ldr	r2, [r3, #0]
 80479dc:	68fb      	ldr	r3, [r7, #12]
 80479de:	681b      	ldr	r3, [r3, #0]
 80479e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80479e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80479e6:	68fb      	ldr	r3, [r7, #12]
 80479e8:	68db      	ldr	r3, [r3, #12]
 80479ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80479ee:	d14b      	bne.n	8047a88 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80479f0:	68fb      	ldr	r3, [r7, #12]
 80479f2:	685b      	ldr	r3, [r3, #4]
 80479f4:	2b00      	cmp	r3, #0
 80479f6:	d002      	beq.n	80479fe <HAL_SPI_Transmit+0xf6>
 80479f8:	8afb      	ldrh	r3, [r7, #22]
 80479fa:	2b01      	cmp	r3, #1
 80479fc:	d13e      	bne.n	8047a7c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80479fe:	68fb      	ldr	r3, [r7, #12]
 8047a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a02:	881a      	ldrh	r2, [r3, #0]
 8047a04:	68fb      	ldr	r3, [r7, #12]
 8047a06:	681b      	ldr	r3, [r3, #0]
 8047a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047a0a:	68fb      	ldr	r3, [r7, #12]
 8047a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a0e:	1c9a      	adds	r2, r3, #2
 8047a10:	68fb      	ldr	r3, [r7, #12]
 8047a12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047a14:	68fb      	ldr	r3, [r7, #12]
 8047a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a18:	b29b      	uxth	r3, r3
 8047a1a:	3b01      	subs	r3, #1
 8047a1c:	b29a      	uxth	r2, r3
 8047a1e:	68fb      	ldr	r3, [r7, #12]
 8047a20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8047a22:	e02b      	b.n	8047a7c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047a24:	68fb      	ldr	r3, [r7, #12]
 8047a26:	681b      	ldr	r3, [r3, #0]
 8047a28:	689b      	ldr	r3, [r3, #8]
 8047a2a:	f003 0302 	and.w	r3, r3, #2
 8047a2e:	2b02      	cmp	r3, #2
 8047a30:	d112      	bne.n	8047a58 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047a32:	68fb      	ldr	r3, [r7, #12]
 8047a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a36:	881a      	ldrh	r2, [r3, #0]
 8047a38:	68fb      	ldr	r3, [r7, #12]
 8047a3a:	681b      	ldr	r3, [r3, #0]
 8047a3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8047a3e:	68fb      	ldr	r3, [r7, #12]
 8047a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047a42:	1c9a      	adds	r2, r3, #2
 8047a44:	68fb      	ldr	r3, [r7, #12]
 8047a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047a48:	68fb      	ldr	r3, [r7, #12]
 8047a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a4c:	b29b      	uxth	r3, r3
 8047a4e:	3b01      	subs	r3, #1
 8047a50:	b29a      	uxth	r2, r3
 8047a52:	68fb      	ldr	r3, [r7, #12]
 8047a54:	86da      	strh	r2, [r3, #54]	; 0x36
 8047a56:	e011      	b.n	8047a7c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047a58:	f7fb fc3e 	bl	80432d8 <HAL_GetTick>
 8047a5c:	4602      	mov	r2, r0
 8047a5e:	69bb      	ldr	r3, [r7, #24]
 8047a60:	1ad3      	subs	r3, r2, r3
 8047a62:	683a      	ldr	r2, [r7, #0]
 8047a64:	429a      	cmp	r2, r3
 8047a66:	d803      	bhi.n	8047a70 <HAL_SPI_Transmit+0x168>
 8047a68:	683b      	ldr	r3, [r7, #0]
 8047a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047a6e:	d102      	bne.n	8047a76 <HAL_SPI_Transmit+0x16e>
 8047a70:	683b      	ldr	r3, [r7, #0]
 8047a72:	2b00      	cmp	r3, #0
 8047a74:	d102      	bne.n	8047a7c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8047a76:	2303      	movs	r3, #3
 8047a78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047a7a:	e074      	b.n	8047b66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047a7c:	68fb      	ldr	r3, [r7, #12]
 8047a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047a80:	b29b      	uxth	r3, r3
 8047a82:	2b00      	cmp	r3, #0
 8047a84:	d1ce      	bne.n	8047a24 <HAL_SPI_Transmit+0x11c>
 8047a86:	e04c      	b.n	8047b22 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047a88:	68fb      	ldr	r3, [r7, #12]
 8047a8a:	685b      	ldr	r3, [r3, #4]
 8047a8c:	2b00      	cmp	r3, #0
 8047a8e:	d002      	beq.n	8047a96 <HAL_SPI_Transmit+0x18e>
 8047a90:	8afb      	ldrh	r3, [r7, #22]
 8047a92:	2b01      	cmp	r3, #1
 8047a94:	d140      	bne.n	8047b18 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047a96:	68fb      	ldr	r3, [r7, #12]
 8047a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047a9a:	68fb      	ldr	r3, [r7, #12]
 8047a9c:	681b      	ldr	r3, [r3, #0]
 8047a9e:	330c      	adds	r3, #12
 8047aa0:	7812      	ldrb	r2, [r2, #0]
 8047aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047aa4:	68fb      	ldr	r3, [r7, #12]
 8047aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047aa8:	1c5a      	adds	r2, r3, #1
 8047aaa:	68fb      	ldr	r3, [r7, #12]
 8047aac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047aae:	68fb      	ldr	r3, [r7, #12]
 8047ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047ab2:	b29b      	uxth	r3, r3
 8047ab4:	3b01      	subs	r3, #1
 8047ab6:	b29a      	uxth	r2, r3
 8047ab8:	68fb      	ldr	r3, [r7, #12]
 8047aba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8047abc:	e02c      	b.n	8047b18 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8047abe:	68fb      	ldr	r3, [r7, #12]
 8047ac0:	681b      	ldr	r3, [r3, #0]
 8047ac2:	689b      	ldr	r3, [r3, #8]
 8047ac4:	f003 0302 	and.w	r3, r3, #2
 8047ac8:	2b02      	cmp	r3, #2
 8047aca:	d113      	bne.n	8047af4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047acc:	68fb      	ldr	r3, [r7, #12]
 8047ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047ad0:	68fb      	ldr	r3, [r7, #12]
 8047ad2:	681b      	ldr	r3, [r3, #0]
 8047ad4:	330c      	adds	r3, #12
 8047ad6:	7812      	ldrb	r2, [r2, #0]
 8047ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8047ada:	68fb      	ldr	r3, [r7, #12]
 8047adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ade:	1c5a      	adds	r2, r3, #1
 8047ae0:	68fb      	ldr	r3, [r7, #12]
 8047ae2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047ae4:	68fb      	ldr	r3, [r7, #12]
 8047ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047ae8:	b29b      	uxth	r3, r3
 8047aea:	3b01      	subs	r3, #1
 8047aec:	b29a      	uxth	r2, r3
 8047aee:	68fb      	ldr	r3, [r7, #12]
 8047af0:	86da      	strh	r2, [r3, #54]	; 0x36
 8047af2:	e011      	b.n	8047b18 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047af4:	f7fb fbf0 	bl	80432d8 <HAL_GetTick>
 8047af8:	4602      	mov	r2, r0
 8047afa:	69bb      	ldr	r3, [r7, #24]
 8047afc:	1ad3      	subs	r3, r2, r3
 8047afe:	683a      	ldr	r2, [r7, #0]
 8047b00:	429a      	cmp	r2, r3
 8047b02:	d803      	bhi.n	8047b0c <HAL_SPI_Transmit+0x204>
 8047b04:	683b      	ldr	r3, [r7, #0]
 8047b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047b0a:	d102      	bne.n	8047b12 <HAL_SPI_Transmit+0x20a>
 8047b0c:	683b      	ldr	r3, [r7, #0]
 8047b0e:	2b00      	cmp	r3, #0
 8047b10:	d102      	bne.n	8047b18 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8047b12:	2303      	movs	r3, #3
 8047b14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8047b16:	e026      	b.n	8047b66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8047b18:	68fb      	ldr	r3, [r7, #12]
 8047b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047b1c:	b29b      	uxth	r3, r3
 8047b1e:	2b00      	cmp	r3, #0
 8047b20:	d1cd      	bne.n	8047abe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047b22:	69ba      	ldr	r2, [r7, #24]
 8047b24:	6839      	ldr	r1, [r7, #0]
 8047b26:	68f8      	ldr	r0, [r7, #12]
 8047b28:	f000 fbda 	bl	80482e0 <SPI_EndRxTxTransaction>
 8047b2c:	4603      	mov	r3, r0
 8047b2e:	2b00      	cmp	r3, #0
 8047b30:	d002      	beq.n	8047b38 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047b32:	68fb      	ldr	r3, [r7, #12]
 8047b34:	2220      	movs	r2, #32
 8047b36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8047b38:	68fb      	ldr	r3, [r7, #12]
 8047b3a:	689b      	ldr	r3, [r3, #8]
 8047b3c:	2b00      	cmp	r3, #0
 8047b3e:	d10a      	bne.n	8047b56 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8047b40:	2300      	movs	r3, #0
 8047b42:	613b      	str	r3, [r7, #16]
 8047b44:	68fb      	ldr	r3, [r7, #12]
 8047b46:	681b      	ldr	r3, [r3, #0]
 8047b48:	68db      	ldr	r3, [r3, #12]
 8047b4a:	613b      	str	r3, [r7, #16]
 8047b4c:	68fb      	ldr	r3, [r7, #12]
 8047b4e:	681b      	ldr	r3, [r3, #0]
 8047b50:	689b      	ldr	r3, [r3, #8]
 8047b52:	613b      	str	r3, [r7, #16]
 8047b54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047b56:	68fb      	ldr	r3, [r7, #12]
 8047b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047b5a:	2b00      	cmp	r3, #0
 8047b5c:	d002      	beq.n	8047b64 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8047b5e:	2301      	movs	r3, #1
 8047b60:	77fb      	strb	r3, [r7, #31]
 8047b62:	e000      	b.n	8047b66 <HAL_SPI_Transmit+0x25e>
  }

error:
 8047b64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047b66:	68fb      	ldr	r3, [r7, #12]
 8047b68:	2201      	movs	r2, #1
 8047b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8047b6e:	68fb      	ldr	r3, [r7, #12]
 8047b70:	2200      	movs	r2, #0
 8047b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047b76:	7ffb      	ldrb	r3, [r7, #31]
}
 8047b78:	4618      	mov	r0, r3
 8047b7a:	3720      	adds	r7, #32
 8047b7c:	46bd      	mov	sp, r7
 8047b7e:	bd80      	pop	{r7, pc}

08047b80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8047b80:	b580      	push	{r7, lr}
 8047b82:	b088      	sub	sp, #32
 8047b84:	af02      	add	r7, sp, #8
 8047b86:	60f8      	str	r0, [r7, #12]
 8047b88:	60b9      	str	r1, [r7, #8]
 8047b8a:	603b      	str	r3, [r7, #0]
 8047b8c:	4613      	mov	r3, r2
 8047b8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8047b90:	2300      	movs	r3, #0
 8047b92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8047b94:	68fb      	ldr	r3, [r7, #12]
 8047b96:	685b      	ldr	r3, [r3, #4]
 8047b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047b9c:	d112      	bne.n	8047bc4 <HAL_SPI_Receive+0x44>
 8047b9e:	68fb      	ldr	r3, [r7, #12]
 8047ba0:	689b      	ldr	r3, [r3, #8]
 8047ba2:	2b00      	cmp	r3, #0
 8047ba4:	d10e      	bne.n	8047bc4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8047ba6:	68fb      	ldr	r3, [r7, #12]
 8047ba8:	2204      	movs	r2, #4
 8047baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8047bae:	88fa      	ldrh	r2, [r7, #6]
 8047bb0:	683b      	ldr	r3, [r7, #0]
 8047bb2:	9300      	str	r3, [sp, #0]
 8047bb4:	4613      	mov	r3, r2
 8047bb6:	68ba      	ldr	r2, [r7, #8]
 8047bb8:	68b9      	ldr	r1, [r7, #8]
 8047bba:	68f8      	ldr	r0, [r7, #12]
 8047bbc:	f000 f8f1 	bl	8047da2 <HAL_SPI_TransmitReceive>
 8047bc0:	4603      	mov	r3, r0
 8047bc2:	e0ea      	b.n	8047d9a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047bc4:	68fb      	ldr	r3, [r7, #12]
 8047bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047bca:	2b01      	cmp	r3, #1
 8047bcc:	d101      	bne.n	8047bd2 <HAL_SPI_Receive+0x52>
 8047bce:	2302      	movs	r3, #2
 8047bd0:	e0e3      	b.n	8047d9a <HAL_SPI_Receive+0x21a>
 8047bd2:	68fb      	ldr	r3, [r7, #12]
 8047bd4:	2201      	movs	r2, #1
 8047bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047bda:	f7fb fb7d 	bl	80432d8 <HAL_GetTick>
 8047bde:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8047be0:	68fb      	ldr	r3, [r7, #12]
 8047be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047be6:	b2db      	uxtb	r3, r3
 8047be8:	2b01      	cmp	r3, #1
 8047bea:	d002      	beq.n	8047bf2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8047bec:	2302      	movs	r3, #2
 8047bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047bf0:	e0ca      	b.n	8047d88 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8047bf2:	68bb      	ldr	r3, [r7, #8]
 8047bf4:	2b00      	cmp	r3, #0
 8047bf6:	d002      	beq.n	8047bfe <HAL_SPI_Receive+0x7e>
 8047bf8:	88fb      	ldrh	r3, [r7, #6]
 8047bfa:	2b00      	cmp	r3, #0
 8047bfc:	d102      	bne.n	8047c04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8047bfe:	2301      	movs	r3, #1
 8047c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8047c02:	e0c1      	b.n	8047d88 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8047c04:	68fb      	ldr	r3, [r7, #12]
 8047c06:	2204      	movs	r2, #4
 8047c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047c0c:	68fb      	ldr	r3, [r7, #12]
 8047c0e:	2200      	movs	r2, #0
 8047c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8047c12:	68fb      	ldr	r3, [r7, #12]
 8047c14:	68ba      	ldr	r2, [r7, #8]
 8047c16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8047c18:	68fb      	ldr	r3, [r7, #12]
 8047c1a:	88fa      	ldrh	r2, [r7, #6]
 8047c1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8047c1e:	68fb      	ldr	r3, [r7, #12]
 8047c20:	88fa      	ldrh	r2, [r7, #6]
 8047c22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8047c24:	68fb      	ldr	r3, [r7, #12]
 8047c26:	2200      	movs	r2, #0
 8047c28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8047c2a:	68fb      	ldr	r3, [r7, #12]
 8047c2c:	2200      	movs	r2, #0
 8047c2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8047c30:	68fb      	ldr	r3, [r7, #12]
 8047c32:	2200      	movs	r2, #0
 8047c34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8047c36:	68fb      	ldr	r3, [r7, #12]
 8047c38:	2200      	movs	r2, #0
 8047c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047c3c:	68fb      	ldr	r3, [r7, #12]
 8047c3e:	2200      	movs	r2, #0
 8047c40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8047c42:	68fb      	ldr	r3, [r7, #12]
 8047c44:	689b      	ldr	r3, [r3, #8]
 8047c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8047c4a:	d10f      	bne.n	8047c6c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8047c4c:	68fb      	ldr	r3, [r7, #12]
 8047c4e:	681b      	ldr	r3, [r3, #0]
 8047c50:	681a      	ldr	r2, [r3, #0]
 8047c52:	68fb      	ldr	r3, [r7, #12]
 8047c54:	681b      	ldr	r3, [r3, #0]
 8047c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047c5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8047c5c:	68fb      	ldr	r3, [r7, #12]
 8047c5e:	681b      	ldr	r3, [r3, #0]
 8047c60:	681a      	ldr	r2, [r3, #0]
 8047c62:	68fb      	ldr	r3, [r7, #12]
 8047c64:	681b      	ldr	r3, [r3, #0]
 8047c66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047c6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047c6c:	68fb      	ldr	r3, [r7, #12]
 8047c6e:	681b      	ldr	r3, [r3, #0]
 8047c70:	681b      	ldr	r3, [r3, #0]
 8047c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047c76:	2b40      	cmp	r3, #64	; 0x40
 8047c78:	d007      	beq.n	8047c8a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047c7a:	68fb      	ldr	r3, [r7, #12]
 8047c7c:	681b      	ldr	r3, [r3, #0]
 8047c7e:	681a      	ldr	r2, [r3, #0]
 8047c80:	68fb      	ldr	r3, [r7, #12]
 8047c82:	681b      	ldr	r3, [r3, #0]
 8047c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047c88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8047c8a:	68fb      	ldr	r3, [r7, #12]
 8047c8c:	68db      	ldr	r3, [r3, #12]
 8047c8e:	2b00      	cmp	r3, #0
 8047c90:	d162      	bne.n	8047d58 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8047c92:	e02e      	b.n	8047cf2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047c94:	68fb      	ldr	r3, [r7, #12]
 8047c96:	681b      	ldr	r3, [r3, #0]
 8047c98:	689b      	ldr	r3, [r3, #8]
 8047c9a:	f003 0301 	and.w	r3, r3, #1
 8047c9e:	2b01      	cmp	r3, #1
 8047ca0:	d115      	bne.n	8047cce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8047ca2:	68fb      	ldr	r3, [r7, #12]
 8047ca4:	681b      	ldr	r3, [r3, #0]
 8047ca6:	f103 020c 	add.w	r2, r3, #12
 8047caa:	68fb      	ldr	r3, [r7, #12]
 8047cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047cae:	7812      	ldrb	r2, [r2, #0]
 8047cb0:	b2d2      	uxtb	r2, r2
 8047cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8047cb4:	68fb      	ldr	r3, [r7, #12]
 8047cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047cb8:	1c5a      	adds	r2, r3, #1
 8047cba:	68fb      	ldr	r3, [r7, #12]
 8047cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047cbe:	68fb      	ldr	r3, [r7, #12]
 8047cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047cc2:	b29b      	uxth	r3, r3
 8047cc4:	3b01      	subs	r3, #1
 8047cc6:	b29a      	uxth	r2, r3
 8047cc8:	68fb      	ldr	r3, [r7, #12]
 8047cca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047ccc:	e011      	b.n	8047cf2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047cce:	f7fb fb03 	bl	80432d8 <HAL_GetTick>
 8047cd2:	4602      	mov	r2, r0
 8047cd4:	693b      	ldr	r3, [r7, #16]
 8047cd6:	1ad3      	subs	r3, r2, r3
 8047cd8:	683a      	ldr	r2, [r7, #0]
 8047cda:	429a      	cmp	r2, r3
 8047cdc:	d803      	bhi.n	8047ce6 <HAL_SPI_Receive+0x166>
 8047cde:	683b      	ldr	r3, [r7, #0]
 8047ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047ce4:	d102      	bne.n	8047cec <HAL_SPI_Receive+0x16c>
 8047ce6:	683b      	ldr	r3, [r7, #0]
 8047ce8:	2b00      	cmp	r3, #0
 8047cea:	d102      	bne.n	8047cf2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8047cec:	2303      	movs	r3, #3
 8047cee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047cf0:	e04a      	b.n	8047d88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047cf2:	68fb      	ldr	r3, [r7, #12]
 8047cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047cf6:	b29b      	uxth	r3, r3
 8047cf8:	2b00      	cmp	r3, #0
 8047cfa:	d1cb      	bne.n	8047c94 <HAL_SPI_Receive+0x114>
 8047cfc:	e031      	b.n	8047d62 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8047cfe:	68fb      	ldr	r3, [r7, #12]
 8047d00:	681b      	ldr	r3, [r3, #0]
 8047d02:	689b      	ldr	r3, [r3, #8]
 8047d04:	f003 0301 	and.w	r3, r3, #1
 8047d08:	2b01      	cmp	r3, #1
 8047d0a:	d113      	bne.n	8047d34 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8047d0c:	68fb      	ldr	r3, [r7, #12]
 8047d0e:	681b      	ldr	r3, [r3, #0]
 8047d10:	68da      	ldr	r2, [r3, #12]
 8047d12:	68fb      	ldr	r3, [r7, #12]
 8047d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047d16:	b292      	uxth	r2, r2
 8047d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047d1a:	68fb      	ldr	r3, [r7, #12]
 8047d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047d1e:	1c9a      	adds	r2, r3, #2
 8047d20:	68fb      	ldr	r3, [r7, #12]
 8047d22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047d24:	68fb      	ldr	r3, [r7, #12]
 8047d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047d28:	b29b      	uxth	r3, r3
 8047d2a:	3b01      	subs	r3, #1
 8047d2c:	b29a      	uxth	r2, r3
 8047d2e:	68fb      	ldr	r3, [r7, #12]
 8047d30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8047d32:	e011      	b.n	8047d58 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8047d34:	f7fb fad0 	bl	80432d8 <HAL_GetTick>
 8047d38:	4602      	mov	r2, r0
 8047d3a:	693b      	ldr	r3, [r7, #16]
 8047d3c:	1ad3      	subs	r3, r2, r3
 8047d3e:	683a      	ldr	r2, [r7, #0]
 8047d40:	429a      	cmp	r2, r3
 8047d42:	d803      	bhi.n	8047d4c <HAL_SPI_Receive+0x1cc>
 8047d44:	683b      	ldr	r3, [r7, #0]
 8047d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047d4a:	d102      	bne.n	8047d52 <HAL_SPI_Receive+0x1d2>
 8047d4c:	683b      	ldr	r3, [r7, #0]
 8047d4e:	2b00      	cmp	r3, #0
 8047d50:	d102      	bne.n	8047d58 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8047d52:	2303      	movs	r3, #3
 8047d54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8047d56:	e017      	b.n	8047d88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8047d58:	68fb      	ldr	r3, [r7, #12]
 8047d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047d5c:	b29b      	uxth	r3, r3
 8047d5e:	2b00      	cmp	r3, #0
 8047d60:	d1cd      	bne.n	8047cfe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8047d62:	693a      	ldr	r2, [r7, #16]
 8047d64:	6839      	ldr	r1, [r7, #0]
 8047d66:	68f8      	ldr	r0, [r7, #12]
 8047d68:	f000 fa54 	bl	8048214 <SPI_EndRxTransaction>
 8047d6c:	4603      	mov	r3, r0
 8047d6e:	2b00      	cmp	r3, #0
 8047d70:	d002      	beq.n	8047d78 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8047d72:	68fb      	ldr	r3, [r7, #12]
 8047d74:	2220      	movs	r2, #32
 8047d76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8047d78:	68fb      	ldr	r3, [r7, #12]
 8047d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047d7c:	2b00      	cmp	r3, #0
 8047d7e:	d002      	beq.n	8047d86 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8047d80:	2301      	movs	r3, #1
 8047d82:	75fb      	strb	r3, [r7, #23]
 8047d84:	e000      	b.n	8047d88 <HAL_SPI_Receive+0x208>
  }

error :
 8047d86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8047d88:	68fb      	ldr	r3, [r7, #12]
 8047d8a:	2201      	movs	r2, #1
 8047d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8047d90:	68fb      	ldr	r3, [r7, #12]
 8047d92:	2200      	movs	r2, #0
 8047d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8047d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8047d9a:	4618      	mov	r0, r3
 8047d9c:	3718      	adds	r7, #24
 8047d9e:	46bd      	mov	sp, r7
 8047da0:	bd80      	pop	{r7, pc}

08047da2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8047da2:	b580      	push	{r7, lr}
 8047da4:	b08c      	sub	sp, #48	; 0x30
 8047da6:	af00      	add	r7, sp, #0
 8047da8:	60f8      	str	r0, [r7, #12]
 8047daa:	60b9      	str	r1, [r7, #8]
 8047dac:	607a      	str	r2, [r7, #4]
 8047dae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8047db0:	2301      	movs	r3, #1
 8047db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8047db4:	2300      	movs	r3, #0
 8047db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8047dba:	68fb      	ldr	r3, [r7, #12]
 8047dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8047dc0:	2b01      	cmp	r3, #1
 8047dc2:	d101      	bne.n	8047dc8 <HAL_SPI_TransmitReceive+0x26>
 8047dc4:	2302      	movs	r3, #2
 8047dc6:	e18a      	b.n	80480de <HAL_SPI_TransmitReceive+0x33c>
 8047dc8:	68fb      	ldr	r3, [r7, #12]
 8047dca:	2201      	movs	r2, #1
 8047dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8047dd0:	f7fb fa82 	bl	80432d8 <HAL_GetTick>
 8047dd4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8047dd6:	68fb      	ldr	r3, [r7, #12]
 8047dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8047de0:	68fb      	ldr	r3, [r7, #12]
 8047de2:	685b      	ldr	r3, [r3, #4]
 8047de4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8047de6:	887b      	ldrh	r3, [r7, #2]
 8047de8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8047dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8047dee:	2b01      	cmp	r3, #1
 8047df0:	d00f      	beq.n	8047e12 <HAL_SPI_TransmitReceive+0x70>
 8047df2:	69fb      	ldr	r3, [r7, #28]
 8047df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047df8:	d107      	bne.n	8047e0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8047dfa:	68fb      	ldr	r3, [r7, #12]
 8047dfc:	689b      	ldr	r3, [r3, #8]
 8047dfe:	2b00      	cmp	r3, #0
 8047e00:	d103      	bne.n	8047e0a <HAL_SPI_TransmitReceive+0x68>
 8047e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8047e06:	2b04      	cmp	r3, #4
 8047e08:	d003      	beq.n	8047e12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8047e0a:	2302      	movs	r3, #2
 8047e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047e10:	e15b      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8047e12:	68bb      	ldr	r3, [r7, #8]
 8047e14:	2b00      	cmp	r3, #0
 8047e16:	d005      	beq.n	8047e24 <HAL_SPI_TransmitReceive+0x82>
 8047e18:	687b      	ldr	r3, [r7, #4]
 8047e1a:	2b00      	cmp	r3, #0
 8047e1c:	d002      	beq.n	8047e24 <HAL_SPI_TransmitReceive+0x82>
 8047e1e:	887b      	ldrh	r3, [r7, #2]
 8047e20:	2b00      	cmp	r3, #0
 8047e22:	d103      	bne.n	8047e2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8047e24:	2301      	movs	r3, #1
 8047e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8047e2a:	e14e      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8047e2c:	68fb      	ldr	r3, [r7, #12]
 8047e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8047e32:	b2db      	uxtb	r3, r3
 8047e34:	2b04      	cmp	r3, #4
 8047e36:	d003      	beq.n	8047e40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8047e38:	68fb      	ldr	r3, [r7, #12]
 8047e3a:	2205      	movs	r2, #5
 8047e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8047e40:	68fb      	ldr	r3, [r7, #12]
 8047e42:	2200      	movs	r2, #0
 8047e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8047e46:	68fb      	ldr	r3, [r7, #12]
 8047e48:	687a      	ldr	r2, [r7, #4]
 8047e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8047e4c:	68fb      	ldr	r3, [r7, #12]
 8047e4e:	887a      	ldrh	r2, [r7, #2]
 8047e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8047e52:	68fb      	ldr	r3, [r7, #12]
 8047e54:	887a      	ldrh	r2, [r7, #2]
 8047e56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8047e58:	68fb      	ldr	r3, [r7, #12]
 8047e5a:	68ba      	ldr	r2, [r7, #8]
 8047e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8047e5e:	68fb      	ldr	r3, [r7, #12]
 8047e60:	887a      	ldrh	r2, [r7, #2]
 8047e62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8047e64:	68fb      	ldr	r3, [r7, #12]
 8047e66:	887a      	ldrh	r2, [r7, #2]
 8047e68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8047e6a:	68fb      	ldr	r3, [r7, #12]
 8047e6c:	2200      	movs	r2, #0
 8047e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8047e70:	68fb      	ldr	r3, [r7, #12]
 8047e72:	2200      	movs	r2, #0
 8047e74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8047e76:	68fb      	ldr	r3, [r7, #12]
 8047e78:	681b      	ldr	r3, [r3, #0]
 8047e7a:	681b      	ldr	r3, [r3, #0]
 8047e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047e80:	2b40      	cmp	r3, #64	; 0x40
 8047e82:	d007      	beq.n	8047e94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8047e84:	68fb      	ldr	r3, [r7, #12]
 8047e86:	681b      	ldr	r3, [r3, #0]
 8047e88:	681a      	ldr	r2, [r3, #0]
 8047e8a:	68fb      	ldr	r3, [r7, #12]
 8047e8c:	681b      	ldr	r3, [r3, #0]
 8047e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8047e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8047e94:	68fb      	ldr	r3, [r7, #12]
 8047e96:	68db      	ldr	r3, [r3, #12]
 8047e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8047e9c:	d178      	bne.n	8047f90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047e9e:	68fb      	ldr	r3, [r7, #12]
 8047ea0:	685b      	ldr	r3, [r3, #4]
 8047ea2:	2b00      	cmp	r3, #0
 8047ea4:	d002      	beq.n	8047eac <HAL_SPI_TransmitReceive+0x10a>
 8047ea6:	8b7b      	ldrh	r3, [r7, #26]
 8047ea8:	2b01      	cmp	r3, #1
 8047eaa:	d166      	bne.n	8047f7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047eac:	68fb      	ldr	r3, [r7, #12]
 8047eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047eb0:	881a      	ldrh	r2, [r3, #0]
 8047eb2:	68fb      	ldr	r3, [r7, #12]
 8047eb4:	681b      	ldr	r3, [r3, #0]
 8047eb6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8047eb8:	68fb      	ldr	r3, [r7, #12]
 8047eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ebc:	1c9a      	adds	r2, r3, #2
 8047ebe:	68fb      	ldr	r3, [r7, #12]
 8047ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047ec2:	68fb      	ldr	r3, [r7, #12]
 8047ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047ec6:	b29b      	uxth	r3, r3
 8047ec8:	3b01      	subs	r3, #1
 8047eca:	b29a      	uxth	r2, r3
 8047ecc:	68fb      	ldr	r3, [r7, #12]
 8047ece:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047ed0:	e053      	b.n	8047f7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047ed2:	68fb      	ldr	r3, [r7, #12]
 8047ed4:	681b      	ldr	r3, [r3, #0]
 8047ed6:	689b      	ldr	r3, [r3, #8]
 8047ed8:	f003 0302 	and.w	r3, r3, #2
 8047edc:	2b02      	cmp	r3, #2
 8047ede:	d11b      	bne.n	8047f18 <HAL_SPI_TransmitReceive+0x176>
 8047ee0:	68fb      	ldr	r3, [r7, #12]
 8047ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047ee4:	b29b      	uxth	r3, r3
 8047ee6:	2b00      	cmp	r3, #0
 8047ee8:	d016      	beq.n	8047f18 <HAL_SPI_TransmitReceive+0x176>
 8047eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047eec:	2b01      	cmp	r3, #1
 8047eee:	d113      	bne.n	8047f18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8047ef0:	68fb      	ldr	r3, [r7, #12]
 8047ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ef4:	881a      	ldrh	r2, [r3, #0]
 8047ef6:	68fb      	ldr	r3, [r7, #12]
 8047ef8:	681b      	ldr	r3, [r3, #0]
 8047efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8047efc:	68fb      	ldr	r3, [r7, #12]
 8047efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047f00:	1c9a      	adds	r2, r3, #2
 8047f02:	68fb      	ldr	r3, [r7, #12]
 8047f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047f06:	68fb      	ldr	r3, [r7, #12]
 8047f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047f0a:	b29b      	uxth	r3, r3
 8047f0c:	3b01      	subs	r3, #1
 8047f0e:	b29a      	uxth	r2, r3
 8047f10:	68fb      	ldr	r3, [r7, #12]
 8047f12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8047f14:	2300      	movs	r3, #0
 8047f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8047f18:	68fb      	ldr	r3, [r7, #12]
 8047f1a:	681b      	ldr	r3, [r3, #0]
 8047f1c:	689b      	ldr	r3, [r3, #8]
 8047f1e:	f003 0301 	and.w	r3, r3, #1
 8047f22:	2b01      	cmp	r3, #1
 8047f24:	d119      	bne.n	8047f5a <HAL_SPI_TransmitReceive+0x1b8>
 8047f26:	68fb      	ldr	r3, [r7, #12]
 8047f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047f2a:	b29b      	uxth	r3, r3
 8047f2c:	2b00      	cmp	r3, #0
 8047f2e:	d014      	beq.n	8047f5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8047f30:	68fb      	ldr	r3, [r7, #12]
 8047f32:	681b      	ldr	r3, [r3, #0]
 8047f34:	68da      	ldr	r2, [r3, #12]
 8047f36:	68fb      	ldr	r3, [r7, #12]
 8047f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047f3a:	b292      	uxth	r2, r2
 8047f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8047f3e:	68fb      	ldr	r3, [r7, #12]
 8047f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047f42:	1c9a      	adds	r2, r3, #2
 8047f44:	68fb      	ldr	r3, [r7, #12]
 8047f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8047f48:	68fb      	ldr	r3, [r7, #12]
 8047f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047f4c:	b29b      	uxth	r3, r3
 8047f4e:	3b01      	subs	r3, #1
 8047f50:	b29a      	uxth	r2, r3
 8047f52:	68fb      	ldr	r3, [r7, #12]
 8047f54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8047f56:	2301      	movs	r3, #1
 8047f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8047f5a:	f7fb f9bd 	bl	80432d8 <HAL_GetTick>
 8047f5e:	4602      	mov	r2, r0
 8047f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047f62:	1ad3      	subs	r3, r2, r3
 8047f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8047f66:	429a      	cmp	r2, r3
 8047f68:	d807      	bhi.n	8047f7a <HAL_SPI_TransmitReceive+0x1d8>
 8047f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047f70:	d003      	beq.n	8047f7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8047f72:	2303      	movs	r3, #3
 8047f74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8047f78:	e0a7      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047f7a:	68fb      	ldr	r3, [r7, #12]
 8047f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047f7e:	b29b      	uxth	r3, r3
 8047f80:	2b00      	cmp	r3, #0
 8047f82:	d1a6      	bne.n	8047ed2 <HAL_SPI_TransmitReceive+0x130>
 8047f84:	68fb      	ldr	r3, [r7, #12]
 8047f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8047f88:	b29b      	uxth	r3, r3
 8047f8a:	2b00      	cmp	r3, #0
 8047f8c:	d1a1      	bne.n	8047ed2 <HAL_SPI_TransmitReceive+0x130>
 8047f8e:	e07c      	b.n	804808a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8047f90:	68fb      	ldr	r3, [r7, #12]
 8047f92:	685b      	ldr	r3, [r3, #4]
 8047f94:	2b00      	cmp	r3, #0
 8047f96:	d002      	beq.n	8047f9e <HAL_SPI_TransmitReceive+0x1fc>
 8047f98:	8b7b      	ldrh	r3, [r7, #26]
 8047f9a:	2b01      	cmp	r3, #1
 8047f9c:	d16b      	bne.n	8048076 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8047f9e:	68fb      	ldr	r3, [r7, #12]
 8047fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047fa2:	68fb      	ldr	r3, [r7, #12]
 8047fa4:	681b      	ldr	r3, [r3, #0]
 8047fa6:	330c      	adds	r3, #12
 8047fa8:	7812      	ldrb	r2, [r2, #0]
 8047faa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8047fac:	68fb      	ldr	r3, [r7, #12]
 8047fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047fb0:	1c5a      	adds	r2, r3, #1
 8047fb2:	68fb      	ldr	r3, [r7, #12]
 8047fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8047fb6:	68fb      	ldr	r3, [r7, #12]
 8047fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047fba:	b29b      	uxth	r3, r3
 8047fbc:	3b01      	subs	r3, #1
 8047fbe:	b29a      	uxth	r2, r3
 8047fc0:	68fb      	ldr	r3, [r7, #12]
 8047fc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8047fc4:	e057      	b.n	8048076 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8047fc6:	68fb      	ldr	r3, [r7, #12]
 8047fc8:	681b      	ldr	r3, [r3, #0]
 8047fca:	689b      	ldr	r3, [r3, #8]
 8047fcc:	f003 0302 	and.w	r3, r3, #2
 8047fd0:	2b02      	cmp	r3, #2
 8047fd2:	d11c      	bne.n	804800e <HAL_SPI_TransmitReceive+0x26c>
 8047fd4:	68fb      	ldr	r3, [r7, #12]
 8047fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8047fd8:	b29b      	uxth	r3, r3
 8047fda:	2b00      	cmp	r3, #0
 8047fdc:	d017      	beq.n	804800e <HAL_SPI_TransmitReceive+0x26c>
 8047fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047fe0:	2b01      	cmp	r3, #1
 8047fe2:	d114      	bne.n	804800e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8047fe4:	68fb      	ldr	r3, [r7, #12]
 8047fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8047fe8:	68fb      	ldr	r3, [r7, #12]
 8047fea:	681b      	ldr	r3, [r3, #0]
 8047fec:	330c      	adds	r3, #12
 8047fee:	7812      	ldrb	r2, [r2, #0]
 8047ff0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8047ff2:	68fb      	ldr	r3, [r7, #12]
 8047ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ff6:	1c5a      	adds	r2, r3, #1
 8047ff8:	68fb      	ldr	r3, [r7, #12]
 8047ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8047ffc:	68fb      	ldr	r3, [r7, #12]
 8047ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8048000:	b29b      	uxth	r3, r3
 8048002:	3b01      	subs	r3, #1
 8048004:	b29a      	uxth	r2, r3
 8048006:	68fb      	ldr	r3, [r7, #12]
 8048008:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804800a:	2300      	movs	r3, #0
 804800c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804800e:	68fb      	ldr	r3, [r7, #12]
 8048010:	681b      	ldr	r3, [r3, #0]
 8048012:	689b      	ldr	r3, [r3, #8]
 8048014:	f003 0301 	and.w	r3, r3, #1
 8048018:	2b01      	cmp	r3, #1
 804801a:	d119      	bne.n	8048050 <HAL_SPI_TransmitReceive+0x2ae>
 804801c:	68fb      	ldr	r3, [r7, #12]
 804801e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048020:	b29b      	uxth	r3, r3
 8048022:	2b00      	cmp	r3, #0
 8048024:	d014      	beq.n	8048050 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8048026:	68fb      	ldr	r3, [r7, #12]
 8048028:	681b      	ldr	r3, [r3, #0]
 804802a:	68da      	ldr	r2, [r3, #12]
 804802c:	68fb      	ldr	r3, [r7, #12]
 804802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048030:	b2d2      	uxtb	r2, r2
 8048032:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8048034:	68fb      	ldr	r3, [r7, #12]
 8048036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048038:	1c5a      	adds	r2, r3, #1
 804803a:	68fb      	ldr	r3, [r7, #12]
 804803c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 804803e:	68fb      	ldr	r3, [r7, #12]
 8048040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048042:	b29b      	uxth	r3, r3
 8048044:	3b01      	subs	r3, #1
 8048046:	b29a      	uxth	r2, r3
 8048048:	68fb      	ldr	r3, [r7, #12]
 804804a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804804c:	2301      	movs	r3, #1
 804804e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8048050:	f7fb f942 	bl	80432d8 <HAL_GetTick>
 8048054:	4602      	mov	r2, r0
 8048056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048058:	1ad3      	subs	r3, r2, r3
 804805a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804805c:	429a      	cmp	r2, r3
 804805e:	d803      	bhi.n	8048068 <HAL_SPI_TransmitReceive+0x2c6>
 8048060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8048062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048066:	d102      	bne.n	804806e <HAL_SPI_TransmitReceive+0x2cc>
 8048068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804806a:	2b00      	cmp	r3, #0
 804806c:	d103      	bne.n	8048076 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 804806e:	2303      	movs	r3, #3
 8048070:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8048074:	e029      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8048076:	68fb      	ldr	r3, [r7, #12]
 8048078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 804807a:	b29b      	uxth	r3, r3
 804807c:	2b00      	cmp	r3, #0
 804807e:	d1a2      	bne.n	8047fc6 <HAL_SPI_TransmitReceive+0x224>
 8048080:	68fb      	ldr	r3, [r7, #12]
 8048082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8048084:	b29b      	uxth	r3, r3
 8048086:	2b00      	cmp	r3, #0
 8048088:	d19d      	bne.n	8047fc6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804808a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804808c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 804808e:	68f8      	ldr	r0, [r7, #12]
 8048090:	f000 f926 	bl	80482e0 <SPI_EndRxTxTransaction>
 8048094:	4603      	mov	r3, r0
 8048096:	2b00      	cmp	r3, #0
 8048098:	d006      	beq.n	80480a8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 804809a:	2301      	movs	r3, #1
 804809c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80480a0:	68fb      	ldr	r3, [r7, #12]
 80480a2:	2220      	movs	r2, #32
 80480a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80480a6:	e010      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80480a8:	68fb      	ldr	r3, [r7, #12]
 80480aa:	689b      	ldr	r3, [r3, #8]
 80480ac:	2b00      	cmp	r3, #0
 80480ae:	d10b      	bne.n	80480c8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80480b0:	2300      	movs	r3, #0
 80480b2:	617b      	str	r3, [r7, #20]
 80480b4:	68fb      	ldr	r3, [r7, #12]
 80480b6:	681b      	ldr	r3, [r3, #0]
 80480b8:	68db      	ldr	r3, [r3, #12]
 80480ba:	617b      	str	r3, [r7, #20]
 80480bc:	68fb      	ldr	r3, [r7, #12]
 80480be:	681b      	ldr	r3, [r3, #0]
 80480c0:	689b      	ldr	r3, [r3, #8]
 80480c2:	617b      	str	r3, [r7, #20]
 80480c4:	697b      	ldr	r3, [r7, #20]
 80480c6:	e000      	b.n	80480ca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80480c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80480ca:	68fb      	ldr	r3, [r7, #12]
 80480cc:	2201      	movs	r2, #1
 80480ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80480d2:	68fb      	ldr	r3, [r7, #12]
 80480d4:	2200      	movs	r2, #0
 80480d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80480da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80480de:	4618      	mov	r0, r3
 80480e0:	3730      	adds	r7, #48	; 0x30
 80480e2:	46bd      	mov	sp, r7
 80480e4:	bd80      	pop	{r7, pc}

080480e6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80480e6:	b480      	push	{r7}
 80480e8:	b083      	sub	sp, #12
 80480ea:	af00      	add	r7, sp, #0
 80480ec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80480ee:	687b      	ldr	r3, [r7, #4]
 80480f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80480f4:	b2db      	uxtb	r3, r3
}
 80480f6:	4618      	mov	r0, r3
 80480f8:	370c      	adds	r7, #12
 80480fa:	46bd      	mov	sp, r7
 80480fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048100:	4770      	bx	lr
	...

08048104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8048104:	b580      	push	{r7, lr}
 8048106:	b088      	sub	sp, #32
 8048108:	af00      	add	r7, sp, #0
 804810a:	60f8      	str	r0, [r7, #12]
 804810c:	60b9      	str	r1, [r7, #8]
 804810e:	603b      	str	r3, [r7, #0]
 8048110:	4613      	mov	r3, r2
 8048112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8048114:	f7fb f8e0 	bl	80432d8 <HAL_GetTick>
 8048118:	4602      	mov	r2, r0
 804811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804811c:	1a9b      	subs	r3, r3, r2
 804811e:	683a      	ldr	r2, [r7, #0]
 8048120:	4413      	add	r3, r2
 8048122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8048124:	f7fb f8d8 	bl	80432d8 <HAL_GetTick>
 8048128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804812a:	4b39      	ldr	r3, [pc, #228]	; (8048210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 804812c:	681b      	ldr	r3, [r3, #0]
 804812e:	015b      	lsls	r3, r3, #5
 8048130:	0d1b      	lsrs	r3, r3, #20
 8048132:	69fa      	ldr	r2, [r7, #28]
 8048134:	fb02 f303 	mul.w	r3, r2, r3
 8048138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804813a:	e054      	b.n	80481e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 804813c:	683b      	ldr	r3, [r7, #0]
 804813e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048142:	d050      	beq.n	80481e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8048144:	f7fb f8c8 	bl	80432d8 <HAL_GetTick>
 8048148:	4602      	mov	r2, r0
 804814a:	69bb      	ldr	r3, [r7, #24]
 804814c:	1ad3      	subs	r3, r2, r3
 804814e:	69fa      	ldr	r2, [r7, #28]
 8048150:	429a      	cmp	r2, r3
 8048152:	d902      	bls.n	804815a <SPI_WaitFlagStateUntilTimeout+0x56>
 8048154:	69fb      	ldr	r3, [r7, #28]
 8048156:	2b00      	cmp	r3, #0
 8048158:	d13d      	bne.n	80481d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804815a:	68fb      	ldr	r3, [r7, #12]
 804815c:	681b      	ldr	r3, [r3, #0]
 804815e:	685a      	ldr	r2, [r3, #4]
 8048160:	68fb      	ldr	r3, [r7, #12]
 8048162:	681b      	ldr	r3, [r3, #0]
 8048164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8048168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804816a:	68fb      	ldr	r3, [r7, #12]
 804816c:	685b      	ldr	r3, [r3, #4]
 804816e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048172:	d111      	bne.n	8048198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8048174:	68fb      	ldr	r3, [r7, #12]
 8048176:	689b      	ldr	r3, [r3, #8]
 8048178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804817c:	d004      	beq.n	8048188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804817e:	68fb      	ldr	r3, [r7, #12]
 8048180:	689b      	ldr	r3, [r3, #8]
 8048182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8048186:	d107      	bne.n	8048198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8048188:	68fb      	ldr	r3, [r7, #12]
 804818a:	681b      	ldr	r3, [r3, #0]
 804818c:	681a      	ldr	r2, [r3, #0]
 804818e:	68fb      	ldr	r3, [r7, #12]
 8048190:	681b      	ldr	r3, [r3, #0]
 8048192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8048198:	68fb      	ldr	r3, [r7, #12]
 804819a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804819c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80481a0:	d10f      	bne.n	80481c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80481a2:	68fb      	ldr	r3, [r7, #12]
 80481a4:	681b      	ldr	r3, [r3, #0]
 80481a6:	681a      	ldr	r2, [r3, #0]
 80481a8:	68fb      	ldr	r3, [r7, #12]
 80481aa:	681b      	ldr	r3, [r3, #0]
 80481ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80481b0:	601a      	str	r2, [r3, #0]
 80481b2:	68fb      	ldr	r3, [r7, #12]
 80481b4:	681b      	ldr	r3, [r3, #0]
 80481b6:	681a      	ldr	r2, [r3, #0]
 80481b8:	68fb      	ldr	r3, [r7, #12]
 80481ba:	681b      	ldr	r3, [r3, #0]
 80481bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80481c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80481c2:	68fb      	ldr	r3, [r7, #12]
 80481c4:	2201      	movs	r2, #1
 80481c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80481ca:	68fb      	ldr	r3, [r7, #12]
 80481cc:	2200      	movs	r2, #0
 80481ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80481d2:	2303      	movs	r3, #3
 80481d4:	e017      	b.n	8048206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80481d6:	697b      	ldr	r3, [r7, #20]
 80481d8:	2b00      	cmp	r3, #0
 80481da:	d101      	bne.n	80481e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80481dc:	2300      	movs	r3, #0
 80481de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80481e0:	697b      	ldr	r3, [r7, #20]
 80481e2:	3b01      	subs	r3, #1
 80481e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80481e6:	68fb      	ldr	r3, [r7, #12]
 80481e8:	681b      	ldr	r3, [r3, #0]
 80481ea:	689a      	ldr	r2, [r3, #8]
 80481ec:	68bb      	ldr	r3, [r7, #8]
 80481ee:	4013      	ands	r3, r2
 80481f0:	68ba      	ldr	r2, [r7, #8]
 80481f2:	429a      	cmp	r2, r3
 80481f4:	bf0c      	ite	eq
 80481f6:	2301      	moveq	r3, #1
 80481f8:	2300      	movne	r3, #0
 80481fa:	b2db      	uxtb	r3, r3
 80481fc:	461a      	mov	r2, r3
 80481fe:	79fb      	ldrb	r3, [r7, #7]
 8048200:	429a      	cmp	r2, r3
 8048202:	d19b      	bne.n	804813c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8048204:	2300      	movs	r3, #0
}
 8048206:	4618      	mov	r0, r3
 8048208:	3720      	adds	r7, #32
 804820a:	46bd      	mov	sp, r7
 804820c:	bd80      	pop	{r7, pc}
 804820e:	bf00      	nop
 8048210:	20000000 	.word	0x20000000

08048214 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8048214:	b580      	push	{r7, lr}
 8048216:	b086      	sub	sp, #24
 8048218:	af02      	add	r7, sp, #8
 804821a:	60f8      	str	r0, [r7, #12]
 804821c:	60b9      	str	r1, [r7, #8]
 804821e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8048220:	68fb      	ldr	r3, [r7, #12]
 8048222:	685b      	ldr	r3, [r3, #4]
 8048224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048228:	d111      	bne.n	804824e <SPI_EndRxTransaction+0x3a>
 804822a:	68fb      	ldr	r3, [r7, #12]
 804822c:	689b      	ldr	r3, [r3, #8]
 804822e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8048232:	d004      	beq.n	804823e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8048234:	68fb      	ldr	r3, [r7, #12]
 8048236:	689b      	ldr	r3, [r3, #8]
 8048238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804823c:	d107      	bne.n	804824e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 804823e:	68fb      	ldr	r3, [r7, #12]
 8048240:	681b      	ldr	r3, [r3, #0]
 8048242:	681a      	ldr	r2, [r3, #0]
 8048244:	68fb      	ldr	r3, [r7, #12]
 8048246:	681b      	ldr	r3, [r3, #0]
 8048248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804824c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 804824e:	68fb      	ldr	r3, [r7, #12]
 8048250:	685b      	ldr	r3, [r3, #4]
 8048252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8048256:	d12a      	bne.n	80482ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8048258:	68fb      	ldr	r3, [r7, #12]
 804825a:	689b      	ldr	r3, [r3, #8]
 804825c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8048260:	d012      	beq.n	8048288 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8048262:	687b      	ldr	r3, [r7, #4]
 8048264:	9300      	str	r3, [sp, #0]
 8048266:	68bb      	ldr	r3, [r7, #8]
 8048268:	2200      	movs	r2, #0
 804826a:	2180      	movs	r1, #128	; 0x80
 804826c:	68f8      	ldr	r0, [r7, #12]
 804826e:	f7ff ff49 	bl	8048104 <SPI_WaitFlagStateUntilTimeout>
 8048272:	4603      	mov	r3, r0
 8048274:	2b00      	cmp	r3, #0
 8048276:	d02d      	beq.n	80482d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048278:	68fb      	ldr	r3, [r7, #12]
 804827a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804827c:	f043 0220 	orr.w	r2, r3, #32
 8048280:	68fb      	ldr	r3, [r7, #12]
 8048282:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8048284:	2303      	movs	r3, #3
 8048286:	e026      	b.n	80482d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8048288:	687b      	ldr	r3, [r7, #4]
 804828a:	9300      	str	r3, [sp, #0]
 804828c:	68bb      	ldr	r3, [r7, #8]
 804828e:	2200      	movs	r2, #0
 8048290:	2101      	movs	r1, #1
 8048292:	68f8      	ldr	r0, [r7, #12]
 8048294:	f7ff ff36 	bl	8048104 <SPI_WaitFlagStateUntilTimeout>
 8048298:	4603      	mov	r3, r0
 804829a:	2b00      	cmp	r3, #0
 804829c:	d01a      	beq.n	80482d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804829e:	68fb      	ldr	r3, [r7, #12]
 80482a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80482a2:	f043 0220 	orr.w	r2, r3, #32
 80482a6:	68fb      	ldr	r3, [r7, #12]
 80482a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80482aa:	2303      	movs	r3, #3
 80482ac:	e013      	b.n	80482d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80482ae:	687b      	ldr	r3, [r7, #4]
 80482b0:	9300      	str	r3, [sp, #0]
 80482b2:	68bb      	ldr	r3, [r7, #8]
 80482b4:	2200      	movs	r2, #0
 80482b6:	2101      	movs	r1, #1
 80482b8:	68f8      	ldr	r0, [r7, #12]
 80482ba:	f7ff ff23 	bl	8048104 <SPI_WaitFlagStateUntilTimeout>
 80482be:	4603      	mov	r3, r0
 80482c0:	2b00      	cmp	r3, #0
 80482c2:	d007      	beq.n	80482d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80482c4:	68fb      	ldr	r3, [r7, #12]
 80482c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80482c8:	f043 0220 	orr.w	r2, r3, #32
 80482cc:	68fb      	ldr	r3, [r7, #12]
 80482ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80482d0:	2303      	movs	r3, #3
 80482d2:	e000      	b.n	80482d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80482d4:	2300      	movs	r3, #0
}
 80482d6:	4618      	mov	r0, r3
 80482d8:	3710      	adds	r7, #16
 80482da:	46bd      	mov	sp, r7
 80482dc:	bd80      	pop	{r7, pc}
	...

080482e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80482e0:	b580      	push	{r7, lr}
 80482e2:	b088      	sub	sp, #32
 80482e4:	af02      	add	r7, sp, #8
 80482e6:	60f8      	str	r0, [r7, #12]
 80482e8:	60b9      	str	r1, [r7, #8]
 80482ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80482ec:	4b1b      	ldr	r3, [pc, #108]	; (804835c <SPI_EndRxTxTransaction+0x7c>)
 80482ee:	681b      	ldr	r3, [r3, #0]
 80482f0:	4a1b      	ldr	r2, [pc, #108]	; (8048360 <SPI_EndRxTxTransaction+0x80>)
 80482f2:	fba2 2303 	umull	r2, r3, r2, r3
 80482f6:	0d5b      	lsrs	r3, r3, #21
 80482f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80482fc:	fb02 f303 	mul.w	r3, r2, r3
 8048300:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8048302:	68fb      	ldr	r3, [r7, #12]
 8048304:	685b      	ldr	r3, [r3, #4]
 8048306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804830a:	d112      	bne.n	8048332 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804830c:	687b      	ldr	r3, [r7, #4]
 804830e:	9300      	str	r3, [sp, #0]
 8048310:	68bb      	ldr	r3, [r7, #8]
 8048312:	2200      	movs	r2, #0
 8048314:	2180      	movs	r1, #128	; 0x80
 8048316:	68f8      	ldr	r0, [r7, #12]
 8048318:	f7ff fef4 	bl	8048104 <SPI_WaitFlagStateUntilTimeout>
 804831c:	4603      	mov	r3, r0
 804831e:	2b00      	cmp	r3, #0
 8048320:	d016      	beq.n	8048350 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8048322:	68fb      	ldr	r3, [r7, #12]
 8048324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048326:	f043 0220 	orr.w	r2, r3, #32
 804832a:	68fb      	ldr	r3, [r7, #12]
 804832c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 804832e:	2303      	movs	r3, #3
 8048330:	e00f      	b.n	8048352 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8048332:	697b      	ldr	r3, [r7, #20]
 8048334:	2b00      	cmp	r3, #0
 8048336:	d00a      	beq.n	804834e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8048338:	697b      	ldr	r3, [r7, #20]
 804833a:	3b01      	subs	r3, #1
 804833c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 804833e:	68fb      	ldr	r3, [r7, #12]
 8048340:	681b      	ldr	r3, [r3, #0]
 8048342:	689b      	ldr	r3, [r3, #8]
 8048344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048348:	2b80      	cmp	r3, #128	; 0x80
 804834a:	d0f2      	beq.n	8048332 <SPI_EndRxTxTransaction+0x52>
 804834c:	e000      	b.n	8048350 <SPI_EndRxTxTransaction+0x70>
        break;
 804834e:	bf00      	nop
  }

  return HAL_OK;
 8048350:	2300      	movs	r3, #0
}
 8048352:	4618      	mov	r0, r3
 8048354:	3718      	adds	r7, #24
 8048356:	46bd      	mov	sp, r7
 8048358:	bd80      	pop	{r7, pc}
 804835a:	bf00      	nop
 804835c:	20000000 	.word	0x20000000
 8048360:	165e9f81 	.word	0x165e9f81

08048364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8048364:	b580      	push	{r7, lr}
 8048366:	b082      	sub	sp, #8
 8048368:	af00      	add	r7, sp, #0
 804836a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 804836c:	687b      	ldr	r3, [r7, #4]
 804836e:	2b00      	cmp	r3, #0
 8048370:	d101      	bne.n	8048376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8048372:	2301      	movs	r3, #1
 8048374:	e041      	b.n	80483fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8048376:	687b      	ldr	r3, [r7, #4]
 8048378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804837c:	b2db      	uxtb	r3, r3
 804837e:	2b00      	cmp	r3, #0
 8048380:	d106      	bne.n	8048390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8048382:	687b      	ldr	r3, [r7, #4]
 8048384:	2200      	movs	r2, #0
 8048386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 804838a:	6878      	ldr	r0, [r7, #4]
 804838c:	f7f9 faba 	bl	8041904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048390:	687b      	ldr	r3, [r7, #4]
 8048392:	2202      	movs	r2, #2
 8048394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8048398:	687b      	ldr	r3, [r7, #4]
 804839a:	681a      	ldr	r2, [r3, #0]
 804839c:	687b      	ldr	r3, [r7, #4]
 804839e:	3304      	adds	r3, #4
 80483a0:	4619      	mov	r1, r3
 80483a2:	4610      	mov	r0, r2
 80483a4:	f000 fa96 	bl	80488d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80483a8:	687b      	ldr	r3, [r7, #4]
 80483aa:	2201      	movs	r2, #1
 80483ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80483b0:	687b      	ldr	r3, [r7, #4]
 80483b2:	2201      	movs	r2, #1
 80483b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80483b8:	687b      	ldr	r3, [r7, #4]
 80483ba:	2201      	movs	r2, #1
 80483bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80483c0:	687b      	ldr	r3, [r7, #4]
 80483c2:	2201      	movs	r2, #1
 80483c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80483c8:	687b      	ldr	r3, [r7, #4]
 80483ca:	2201      	movs	r2, #1
 80483cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80483d0:	687b      	ldr	r3, [r7, #4]
 80483d2:	2201      	movs	r2, #1
 80483d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80483d8:	687b      	ldr	r3, [r7, #4]
 80483da:	2201      	movs	r2, #1
 80483dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80483e0:	687b      	ldr	r3, [r7, #4]
 80483e2:	2201      	movs	r2, #1
 80483e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80483e8:	687b      	ldr	r3, [r7, #4]
 80483ea:	2201      	movs	r2, #1
 80483ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80483f0:	687b      	ldr	r3, [r7, #4]
 80483f2:	2201      	movs	r2, #1
 80483f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80483f8:	2300      	movs	r3, #0
}
 80483fa:	4618      	mov	r0, r3
 80483fc:	3708      	adds	r7, #8
 80483fe:	46bd      	mov	sp, r7
 8048400:	bd80      	pop	{r7, pc}
	...

08048404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8048404:	b480      	push	{r7}
 8048406:	b085      	sub	sp, #20
 8048408:	af00      	add	r7, sp, #0
 804840a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 804840c:	687b      	ldr	r3, [r7, #4]
 804840e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048412:	b2db      	uxtb	r3, r3
 8048414:	2b01      	cmp	r3, #1
 8048416:	d001      	beq.n	804841c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8048418:	2301      	movs	r3, #1
 804841a:	e04e      	b.n	80484ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804841c:	687b      	ldr	r3, [r7, #4]
 804841e:	2202      	movs	r2, #2
 8048420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8048424:	687b      	ldr	r3, [r7, #4]
 8048426:	681b      	ldr	r3, [r3, #0]
 8048428:	68da      	ldr	r2, [r3, #12]
 804842a:	687b      	ldr	r3, [r7, #4]
 804842c:	681b      	ldr	r3, [r3, #0]
 804842e:	f042 0201 	orr.w	r2, r2, #1
 8048432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048434:	687b      	ldr	r3, [r7, #4]
 8048436:	681b      	ldr	r3, [r3, #0]
 8048438:	4a23      	ldr	r2, [pc, #140]	; (80484c8 <HAL_TIM_Base_Start_IT+0xc4>)
 804843a:	4293      	cmp	r3, r2
 804843c:	d022      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 804843e:	687b      	ldr	r3, [r7, #4]
 8048440:	681b      	ldr	r3, [r3, #0]
 8048442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048446:	d01d      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 8048448:	687b      	ldr	r3, [r7, #4]
 804844a:	681b      	ldr	r3, [r3, #0]
 804844c:	4a1f      	ldr	r2, [pc, #124]	; (80484cc <HAL_TIM_Base_Start_IT+0xc8>)
 804844e:	4293      	cmp	r3, r2
 8048450:	d018      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 8048452:	687b      	ldr	r3, [r7, #4]
 8048454:	681b      	ldr	r3, [r3, #0]
 8048456:	4a1e      	ldr	r2, [pc, #120]	; (80484d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8048458:	4293      	cmp	r3, r2
 804845a:	d013      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 804845c:	687b      	ldr	r3, [r7, #4]
 804845e:	681b      	ldr	r3, [r3, #0]
 8048460:	4a1c      	ldr	r2, [pc, #112]	; (80484d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8048462:	4293      	cmp	r3, r2
 8048464:	d00e      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 8048466:	687b      	ldr	r3, [r7, #4]
 8048468:	681b      	ldr	r3, [r3, #0]
 804846a:	4a1b      	ldr	r2, [pc, #108]	; (80484d8 <HAL_TIM_Base_Start_IT+0xd4>)
 804846c:	4293      	cmp	r3, r2
 804846e:	d009      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 8048470:	687b      	ldr	r3, [r7, #4]
 8048472:	681b      	ldr	r3, [r3, #0]
 8048474:	4a19      	ldr	r2, [pc, #100]	; (80484dc <HAL_TIM_Base_Start_IT+0xd8>)
 8048476:	4293      	cmp	r3, r2
 8048478:	d004      	beq.n	8048484 <HAL_TIM_Base_Start_IT+0x80>
 804847a:	687b      	ldr	r3, [r7, #4]
 804847c:	681b      	ldr	r3, [r3, #0]
 804847e:	4a18      	ldr	r2, [pc, #96]	; (80484e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8048480:	4293      	cmp	r3, r2
 8048482:	d111      	bne.n	80484a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8048484:	687b      	ldr	r3, [r7, #4]
 8048486:	681b      	ldr	r3, [r3, #0]
 8048488:	689b      	ldr	r3, [r3, #8]
 804848a:	f003 0307 	and.w	r3, r3, #7
 804848e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048490:	68fb      	ldr	r3, [r7, #12]
 8048492:	2b06      	cmp	r3, #6
 8048494:	d010      	beq.n	80484b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8048496:	687b      	ldr	r3, [r7, #4]
 8048498:	681b      	ldr	r3, [r3, #0]
 804849a:	681a      	ldr	r2, [r3, #0]
 804849c:	687b      	ldr	r3, [r7, #4]
 804849e:	681b      	ldr	r3, [r3, #0]
 80484a0:	f042 0201 	orr.w	r2, r2, #1
 80484a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80484a6:	e007      	b.n	80484b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80484a8:	687b      	ldr	r3, [r7, #4]
 80484aa:	681b      	ldr	r3, [r3, #0]
 80484ac:	681a      	ldr	r2, [r3, #0]
 80484ae:	687b      	ldr	r3, [r7, #4]
 80484b0:	681b      	ldr	r3, [r3, #0]
 80484b2:	f042 0201 	orr.w	r2, r2, #1
 80484b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80484b8:	2300      	movs	r3, #0
}
 80484ba:	4618      	mov	r0, r3
 80484bc:	3714      	adds	r7, #20
 80484be:	46bd      	mov	sp, r7
 80484c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484c4:	4770      	bx	lr
 80484c6:	bf00      	nop
 80484c8:	40010000 	.word	0x40010000
 80484cc:	40000400 	.word	0x40000400
 80484d0:	40000800 	.word	0x40000800
 80484d4:	40000c00 	.word	0x40000c00
 80484d8:	40010400 	.word	0x40010400
 80484dc:	40014000 	.word	0x40014000
 80484e0:	40001800 	.word	0x40001800

080484e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80484e4:	b580      	push	{r7, lr}
 80484e6:	b082      	sub	sp, #8
 80484e8:	af00      	add	r7, sp, #0
 80484ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80484ec:	687b      	ldr	r3, [r7, #4]
 80484ee:	681b      	ldr	r3, [r3, #0]
 80484f0:	691b      	ldr	r3, [r3, #16]
 80484f2:	f003 0302 	and.w	r3, r3, #2
 80484f6:	2b02      	cmp	r3, #2
 80484f8:	d122      	bne.n	8048540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80484fa:	687b      	ldr	r3, [r7, #4]
 80484fc:	681b      	ldr	r3, [r3, #0]
 80484fe:	68db      	ldr	r3, [r3, #12]
 8048500:	f003 0302 	and.w	r3, r3, #2
 8048504:	2b02      	cmp	r3, #2
 8048506:	d11b      	bne.n	8048540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8048508:	687b      	ldr	r3, [r7, #4]
 804850a:	681b      	ldr	r3, [r3, #0]
 804850c:	f06f 0202 	mvn.w	r2, #2
 8048510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8048512:	687b      	ldr	r3, [r7, #4]
 8048514:	2201      	movs	r2, #1
 8048516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8048518:	687b      	ldr	r3, [r7, #4]
 804851a:	681b      	ldr	r3, [r3, #0]
 804851c:	699b      	ldr	r3, [r3, #24]
 804851e:	f003 0303 	and.w	r3, r3, #3
 8048522:	2b00      	cmp	r3, #0
 8048524:	d003      	beq.n	804852e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8048526:	6878      	ldr	r0, [r7, #4]
 8048528:	f000 f9b5 	bl	8048896 <HAL_TIM_IC_CaptureCallback>
 804852c:	e005      	b.n	804853a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 804852e:	6878      	ldr	r0, [r7, #4]
 8048530:	f000 f9a7 	bl	8048882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048534:	6878      	ldr	r0, [r7, #4]
 8048536:	f000 f9b8 	bl	80488aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804853a:	687b      	ldr	r3, [r7, #4]
 804853c:	2200      	movs	r2, #0
 804853e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8048540:	687b      	ldr	r3, [r7, #4]
 8048542:	681b      	ldr	r3, [r3, #0]
 8048544:	691b      	ldr	r3, [r3, #16]
 8048546:	f003 0304 	and.w	r3, r3, #4
 804854a:	2b04      	cmp	r3, #4
 804854c:	d122      	bne.n	8048594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804854e:	687b      	ldr	r3, [r7, #4]
 8048550:	681b      	ldr	r3, [r3, #0]
 8048552:	68db      	ldr	r3, [r3, #12]
 8048554:	f003 0304 	and.w	r3, r3, #4
 8048558:	2b04      	cmp	r3, #4
 804855a:	d11b      	bne.n	8048594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804855c:	687b      	ldr	r3, [r7, #4]
 804855e:	681b      	ldr	r3, [r3, #0]
 8048560:	f06f 0204 	mvn.w	r2, #4
 8048564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8048566:	687b      	ldr	r3, [r7, #4]
 8048568:	2202      	movs	r2, #2
 804856a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804856c:	687b      	ldr	r3, [r7, #4]
 804856e:	681b      	ldr	r3, [r3, #0]
 8048570:	699b      	ldr	r3, [r3, #24]
 8048572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048576:	2b00      	cmp	r3, #0
 8048578:	d003      	beq.n	8048582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 804857a:	6878      	ldr	r0, [r7, #4]
 804857c:	f000 f98b 	bl	8048896 <HAL_TIM_IC_CaptureCallback>
 8048580:	e005      	b.n	804858e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8048582:	6878      	ldr	r0, [r7, #4]
 8048584:	f000 f97d 	bl	8048882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048588:	6878      	ldr	r0, [r7, #4]
 804858a:	f000 f98e 	bl	80488aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804858e:	687b      	ldr	r3, [r7, #4]
 8048590:	2200      	movs	r2, #0
 8048592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8048594:	687b      	ldr	r3, [r7, #4]
 8048596:	681b      	ldr	r3, [r3, #0]
 8048598:	691b      	ldr	r3, [r3, #16]
 804859a:	f003 0308 	and.w	r3, r3, #8
 804859e:	2b08      	cmp	r3, #8
 80485a0:	d122      	bne.n	80485e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80485a2:	687b      	ldr	r3, [r7, #4]
 80485a4:	681b      	ldr	r3, [r3, #0]
 80485a6:	68db      	ldr	r3, [r3, #12]
 80485a8:	f003 0308 	and.w	r3, r3, #8
 80485ac:	2b08      	cmp	r3, #8
 80485ae:	d11b      	bne.n	80485e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80485b0:	687b      	ldr	r3, [r7, #4]
 80485b2:	681b      	ldr	r3, [r3, #0]
 80485b4:	f06f 0208 	mvn.w	r2, #8
 80485b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80485ba:	687b      	ldr	r3, [r7, #4]
 80485bc:	2204      	movs	r2, #4
 80485be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80485c0:	687b      	ldr	r3, [r7, #4]
 80485c2:	681b      	ldr	r3, [r3, #0]
 80485c4:	69db      	ldr	r3, [r3, #28]
 80485c6:	f003 0303 	and.w	r3, r3, #3
 80485ca:	2b00      	cmp	r3, #0
 80485cc:	d003      	beq.n	80485d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80485ce:	6878      	ldr	r0, [r7, #4]
 80485d0:	f000 f961 	bl	8048896 <HAL_TIM_IC_CaptureCallback>
 80485d4:	e005      	b.n	80485e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80485d6:	6878      	ldr	r0, [r7, #4]
 80485d8:	f000 f953 	bl	8048882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80485dc:	6878      	ldr	r0, [r7, #4]
 80485de:	f000 f964 	bl	80488aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80485e2:	687b      	ldr	r3, [r7, #4]
 80485e4:	2200      	movs	r2, #0
 80485e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80485e8:	687b      	ldr	r3, [r7, #4]
 80485ea:	681b      	ldr	r3, [r3, #0]
 80485ec:	691b      	ldr	r3, [r3, #16]
 80485ee:	f003 0310 	and.w	r3, r3, #16
 80485f2:	2b10      	cmp	r3, #16
 80485f4:	d122      	bne.n	804863c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80485f6:	687b      	ldr	r3, [r7, #4]
 80485f8:	681b      	ldr	r3, [r3, #0]
 80485fa:	68db      	ldr	r3, [r3, #12]
 80485fc:	f003 0310 	and.w	r3, r3, #16
 8048600:	2b10      	cmp	r3, #16
 8048602:	d11b      	bne.n	804863c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8048604:	687b      	ldr	r3, [r7, #4]
 8048606:	681b      	ldr	r3, [r3, #0]
 8048608:	f06f 0210 	mvn.w	r2, #16
 804860c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804860e:	687b      	ldr	r3, [r7, #4]
 8048610:	2208      	movs	r2, #8
 8048612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8048614:	687b      	ldr	r3, [r7, #4]
 8048616:	681b      	ldr	r3, [r3, #0]
 8048618:	69db      	ldr	r3, [r3, #28]
 804861a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804861e:	2b00      	cmp	r3, #0
 8048620:	d003      	beq.n	804862a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8048622:	6878      	ldr	r0, [r7, #4]
 8048624:	f000 f937 	bl	8048896 <HAL_TIM_IC_CaptureCallback>
 8048628:	e005      	b.n	8048636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804862a:	6878      	ldr	r0, [r7, #4]
 804862c:	f000 f929 	bl	8048882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8048630:	6878      	ldr	r0, [r7, #4]
 8048632:	f000 f93a 	bl	80488aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8048636:	687b      	ldr	r3, [r7, #4]
 8048638:	2200      	movs	r2, #0
 804863a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804863c:	687b      	ldr	r3, [r7, #4]
 804863e:	681b      	ldr	r3, [r3, #0]
 8048640:	691b      	ldr	r3, [r3, #16]
 8048642:	f003 0301 	and.w	r3, r3, #1
 8048646:	2b01      	cmp	r3, #1
 8048648:	d10e      	bne.n	8048668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804864a:	687b      	ldr	r3, [r7, #4]
 804864c:	681b      	ldr	r3, [r3, #0]
 804864e:	68db      	ldr	r3, [r3, #12]
 8048650:	f003 0301 	and.w	r3, r3, #1
 8048654:	2b01      	cmp	r3, #1
 8048656:	d107      	bne.n	8048668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8048658:	687b      	ldr	r3, [r7, #4]
 804865a:	681b      	ldr	r3, [r3, #0]
 804865c:	f06f 0201 	mvn.w	r2, #1
 8048660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8048662:	6878      	ldr	r0, [r7, #4]
 8048664:	f7f8 fc18 	bl	8040e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8048668:	687b      	ldr	r3, [r7, #4]
 804866a:	681b      	ldr	r3, [r3, #0]
 804866c:	691b      	ldr	r3, [r3, #16]
 804866e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048672:	2b80      	cmp	r3, #128	; 0x80
 8048674:	d10e      	bne.n	8048694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8048676:	687b      	ldr	r3, [r7, #4]
 8048678:	681b      	ldr	r3, [r3, #0]
 804867a:	68db      	ldr	r3, [r3, #12]
 804867c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048680:	2b80      	cmp	r3, #128	; 0x80
 8048682:	d107      	bne.n	8048694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8048684:	687b      	ldr	r3, [r7, #4]
 8048686:	681b      	ldr	r3, [r3, #0]
 8048688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804868c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 804868e:	6878      	ldr	r0, [r7, #4]
 8048690:	f000 fae0 	bl	8048c54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8048694:	687b      	ldr	r3, [r7, #4]
 8048696:	681b      	ldr	r3, [r3, #0]
 8048698:	691b      	ldr	r3, [r3, #16]
 804869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804869e:	2b40      	cmp	r3, #64	; 0x40
 80486a0:	d10e      	bne.n	80486c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80486a2:	687b      	ldr	r3, [r7, #4]
 80486a4:	681b      	ldr	r3, [r3, #0]
 80486a6:	68db      	ldr	r3, [r3, #12]
 80486a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80486ac:	2b40      	cmp	r3, #64	; 0x40
 80486ae:	d107      	bne.n	80486c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80486b0:	687b      	ldr	r3, [r7, #4]
 80486b2:	681b      	ldr	r3, [r3, #0]
 80486b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80486b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80486ba:	6878      	ldr	r0, [r7, #4]
 80486bc:	f000 f8ff 	bl	80488be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80486c0:	687b      	ldr	r3, [r7, #4]
 80486c2:	681b      	ldr	r3, [r3, #0]
 80486c4:	691b      	ldr	r3, [r3, #16]
 80486c6:	f003 0320 	and.w	r3, r3, #32
 80486ca:	2b20      	cmp	r3, #32
 80486cc:	d10e      	bne.n	80486ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80486ce:	687b      	ldr	r3, [r7, #4]
 80486d0:	681b      	ldr	r3, [r3, #0]
 80486d2:	68db      	ldr	r3, [r3, #12]
 80486d4:	f003 0320 	and.w	r3, r3, #32
 80486d8:	2b20      	cmp	r3, #32
 80486da:	d107      	bne.n	80486ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80486dc:	687b      	ldr	r3, [r7, #4]
 80486de:	681b      	ldr	r3, [r3, #0]
 80486e0:	f06f 0220 	mvn.w	r2, #32
 80486e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80486e6:	6878      	ldr	r0, [r7, #4]
 80486e8:	f000 faaa 	bl	8048c40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80486ec:	bf00      	nop
 80486ee:	3708      	adds	r7, #8
 80486f0:	46bd      	mov	sp, r7
 80486f2:	bd80      	pop	{r7, pc}

080486f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80486f4:	b580      	push	{r7, lr}
 80486f6:	b084      	sub	sp, #16
 80486f8:	af00      	add	r7, sp, #0
 80486fa:	6078      	str	r0, [r7, #4]
 80486fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80486fe:	2300      	movs	r3, #0
 8048700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8048702:	687b      	ldr	r3, [r7, #4]
 8048704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048708:	2b01      	cmp	r3, #1
 804870a:	d101      	bne.n	8048710 <HAL_TIM_ConfigClockSource+0x1c>
 804870c:	2302      	movs	r3, #2
 804870e:	e0b4      	b.n	804887a <HAL_TIM_ConfigClockSource+0x186>
 8048710:	687b      	ldr	r3, [r7, #4]
 8048712:	2201      	movs	r2, #1
 8048714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8048718:	687b      	ldr	r3, [r7, #4]
 804871a:	2202      	movs	r2, #2
 804871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8048720:	687b      	ldr	r3, [r7, #4]
 8048722:	681b      	ldr	r3, [r3, #0]
 8048724:	689b      	ldr	r3, [r3, #8]
 8048726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8048728:	68bb      	ldr	r3, [r7, #8]
 804872a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 804872e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048730:	68bb      	ldr	r3, [r7, #8]
 8048732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8048738:	687b      	ldr	r3, [r7, #4]
 804873a:	681b      	ldr	r3, [r3, #0]
 804873c:	68ba      	ldr	r2, [r7, #8]
 804873e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8048740:	683b      	ldr	r3, [r7, #0]
 8048742:	681b      	ldr	r3, [r3, #0]
 8048744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8048748:	d03e      	beq.n	80487c8 <HAL_TIM_ConfigClockSource+0xd4>
 804874a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804874e:	f200 8087 	bhi.w	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048756:	f000 8086 	beq.w	8048866 <HAL_TIM_ConfigClockSource+0x172>
 804875a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804875e:	d87f      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048760:	2b70      	cmp	r3, #112	; 0x70
 8048762:	d01a      	beq.n	804879a <HAL_TIM_ConfigClockSource+0xa6>
 8048764:	2b70      	cmp	r3, #112	; 0x70
 8048766:	d87b      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048768:	2b60      	cmp	r3, #96	; 0x60
 804876a:	d050      	beq.n	804880e <HAL_TIM_ConfigClockSource+0x11a>
 804876c:	2b60      	cmp	r3, #96	; 0x60
 804876e:	d877      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048770:	2b50      	cmp	r3, #80	; 0x50
 8048772:	d03c      	beq.n	80487ee <HAL_TIM_ConfigClockSource+0xfa>
 8048774:	2b50      	cmp	r3, #80	; 0x50
 8048776:	d873      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048778:	2b40      	cmp	r3, #64	; 0x40
 804877a:	d058      	beq.n	804882e <HAL_TIM_ConfigClockSource+0x13a>
 804877c:	2b40      	cmp	r3, #64	; 0x40
 804877e:	d86f      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048780:	2b30      	cmp	r3, #48	; 0x30
 8048782:	d064      	beq.n	804884e <HAL_TIM_ConfigClockSource+0x15a>
 8048784:	2b30      	cmp	r3, #48	; 0x30
 8048786:	d86b      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048788:	2b20      	cmp	r3, #32
 804878a:	d060      	beq.n	804884e <HAL_TIM_ConfigClockSource+0x15a>
 804878c:	2b20      	cmp	r3, #32
 804878e:	d867      	bhi.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
 8048790:	2b00      	cmp	r3, #0
 8048792:	d05c      	beq.n	804884e <HAL_TIM_ConfigClockSource+0x15a>
 8048794:	2b10      	cmp	r3, #16
 8048796:	d05a      	beq.n	804884e <HAL_TIM_ConfigClockSource+0x15a>
 8048798:	e062      	b.n	8048860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 804879a:	687b      	ldr	r3, [r7, #4]
 804879c:	6818      	ldr	r0, [r3, #0]
 804879e:	683b      	ldr	r3, [r7, #0]
 80487a0:	6899      	ldr	r1, [r3, #8]
 80487a2:	683b      	ldr	r3, [r7, #0]
 80487a4:	685a      	ldr	r2, [r3, #4]
 80487a6:	683b      	ldr	r3, [r7, #0]
 80487a8:	68db      	ldr	r3, [r3, #12]
 80487aa:	f000 f9ad 	bl	8048b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80487ae:	687b      	ldr	r3, [r7, #4]
 80487b0:	681b      	ldr	r3, [r3, #0]
 80487b2:	689b      	ldr	r3, [r3, #8]
 80487b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80487b6:	68bb      	ldr	r3, [r7, #8]
 80487b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80487bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80487be:	687b      	ldr	r3, [r7, #4]
 80487c0:	681b      	ldr	r3, [r3, #0]
 80487c2:	68ba      	ldr	r2, [r7, #8]
 80487c4:	609a      	str	r2, [r3, #8]
      break;
 80487c6:	e04f      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80487c8:	687b      	ldr	r3, [r7, #4]
 80487ca:	6818      	ldr	r0, [r3, #0]
 80487cc:	683b      	ldr	r3, [r7, #0]
 80487ce:	6899      	ldr	r1, [r3, #8]
 80487d0:	683b      	ldr	r3, [r7, #0]
 80487d2:	685a      	ldr	r2, [r3, #4]
 80487d4:	683b      	ldr	r3, [r7, #0]
 80487d6:	68db      	ldr	r3, [r3, #12]
 80487d8:	f000 f996 	bl	8048b08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80487dc:	687b      	ldr	r3, [r7, #4]
 80487de:	681b      	ldr	r3, [r3, #0]
 80487e0:	689a      	ldr	r2, [r3, #8]
 80487e2:	687b      	ldr	r3, [r7, #4]
 80487e4:	681b      	ldr	r3, [r3, #0]
 80487e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80487ea:	609a      	str	r2, [r3, #8]
      break;
 80487ec:	e03c      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80487ee:	687b      	ldr	r3, [r7, #4]
 80487f0:	6818      	ldr	r0, [r3, #0]
 80487f2:	683b      	ldr	r3, [r7, #0]
 80487f4:	6859      	ldr	r1, [r3, #4]
 80487f6:	683b      	ldr	r3, [r7, #0]
 80487f8:	68db      	ldr	r3, [r3, #12]
 80487fa:	461a      	mov	r2, r3
 80487fc:	f000 f90a 	bl	8048a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8048800:	687b      	ldr	r3, [r7, #4]
 8048802:	681b      	ldr	r3, [r3, #0]
 8048804:	2150      	movs	r1, #80	; 0x50
 8048806:	4618      	mov	r0, r3
 8048808:	f000 f963 	bl	8048ad2 <TIM_ITRx_SetConfig>
      break;
 804880c:	e02c      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 804880e:	687b      	ldr	r3, [r7, #4]
 8048810:	6818      	ldr	r0, [r3, #0]
 8048812:	683b      	ldr	r3, [r7, #0]
 8048814:	6859      	ldr	r1, [r3, #4]
 8048816:	683b      	ldr	r3, [r7, #0]
 8048818:	68db      	ldr	r3, [r3, #12]
 804881a:	461a      	mov	r2, r3
 804881c:	f000 f929 	bl	8048a72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8048820:	687b      	ldr	r3, [r7, #4]
 8048822:	681b      	ldr	r3, [r3, #0]
 8048824:	2160      	movs	r1, #96	; 0x60
 8048826:	4618      	mov	r0, r3
 8048828:	f000 f953 	bl	8048ad2 <TIM_ITRx_SetConfig>
      break;
 804882c:	e01c      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804882e:	687b      	ldr	r3, [r7, #4]
 8048830:	6818      	ldr	r0, [r3, #0]
 8048832:	683b      	ldr	r3, [r7, #0]
 8048834:	6859      	ldr	r1, [r3, #4]
 8048836:	683b      	ldr	r3, [r7, #0]
 8048838:	68db      	ldr	r3, [r3, #12]
 804883a:	461a      	mov	r2, r3
 804883c:	f000 f8ea 	bl	8048a14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8048840:	687b      	ldr	r3, [r7, #4]
 8048842:	681b      	ldr	r3, [r3, #0]
 8048844:	2140      	movs	r1, #64	; 0x40
 8048846:	4618      	mov	r0, r3
 8048848:	f000 f943 	bl	8048ad2 <TIM_ITRx_SetConfig>
      break;
 804884c:	e00c      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804884e:	687b      	ldr	r3, [r7, #4]
 8048850:	681a      	ldr	r2, [r3, #0]
 8048852:	683b      	ldr	r3, [r7, #0]
 8048854:	681b      	ldr	r3, [r3, #0]
 8048856:	4619      	mov	r1, r3
 8048858:	4610      	mov	r0, r2
 804885a:	f000 f93a 	bl	8048ad2 <TIM_ITRx_SetConfig>
      break;
 804885e:	e003      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8048860:	2301      	movs	r3, #1
 8048862:	73fb      	strb	r3, [r7, #15]
      break;
 8048864:	e000      	b.n	8048868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8048866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8048868:	687b      	ldr	r3, [r7, #4]
 804886a:	2201      	movs	r2, #1
 804886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048870:	687b      	ldr	r3, [r7, #4]
 8048872:	2200      	movs	r2, #0
 8048874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8048878:	7bfb      	ldrb	r3, [r7, #15]
}
 804887a:	4618      	mov	r0, r3
 804887c:	3710      	adds	r7, #16
 804887e:	46bd      	mov	sp, r7
 8048880:	bd80      	pop	{r7, pc}

08048882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8048882:	b480      	push	{r7}
 8048884:	b083      	sub	sp, #12
 8048886:	af00      	add	r7, sp, #0
 8048888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804888a:	bf00      	nop
 804888c:	370c      	adds	r7, #12
 804888e:	46bd      	mov	sp, r7
 8048890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048894:	4770      	bx	lr

08048896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8048896:	b480      	push	{r7}
 8048898:	b083      	sub	sp, #12
 804889a:	af00      	add	r7, sp, #0
 804889c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804889e:	bf00      	nop
 80488a0:	370c      	adds	r7, #12
 80488a2:	46bd      	mov	sp, r7
 80488a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488a8:	4770      	bx	lr

080488aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80488aa:	b480      	push	{r7}
 80488ac:	b083      	sub	sp, #12
 80488ae:	af00      	add	r7, sp, #0
 80488b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80488b2:	bf00      	nop
 80488b4:	370c      	adds	r7, #12
 80488b6:	46bd      	mov	sp, r7
 80488b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488bc:	4770      	bx	lr

080488be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80488be:	b480      	push	{r7}
 80488c0:	b083      	sub	sp, #12
 80488c2:	af00      	add	r7, sp, #0
 80488c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80488c6:	bf00      	nop
 80488c8:	370c      	adds	r7, #12
 80488ca:	46bd      	mov	sp, r7
 80488cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488d0:	4770      	bx	lr
	...

080488d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80488d4:	b480      	push	{r7}
 80488d6:	b085      	sub	sp, #20
 80488d8:	af00      	add	r7, sp, #0
 80488da:	6078      	str	r0, [r7, #4]
 80488dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80488de:	687b      	ldr	r3, [r7, #4]
 80488e0:	681b      	ldr	r3, [r3, #0]
 80488e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80488e4:	687b      	ldr	r3, [r7, #4]
 80488e6:	4a40      	ldr	r2, [pc, #256]	; (80489e8 <TIM_Base_SetConfig+0x114>)
 80488e8:	4293      	cmp	r3, r2
 80488ea:	d013      	beq.n	8048914 <TIM_Base_SetConfig+0x40>
 80488ec:	687b      	ldr	r3, [r7, #4]
 80488ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80488f2:	d00f      	beq.n	8048914 <TIM_Base_SetConfig+0x40>
 80488f4:	687b      	ldr	r3, [r7, #4]
 80488f6:	4a3d      	ldr	r2, [pc, #244]	; (80489ec <TIM_Base_SetConfig+0x118>)
 80488f8:	4293      	cmp	r3, r2
 80488fa:	d00b      	beq.n	8048914 <TIM_Base_SetConfig+0x40>
 80488fc:	687b      	ldr	r3, [r7, #4]
 80488fe:	4a3c      	ldr	r2, [pc, #240]	; (80489f0 <TIM_Base_SetConfig+0x11c>)
 8048900:	4293      	cmp	r3, r2
 8048902:	d007      	beq.n	8048914 <TIM_Base_SetConfig+0x40>
 8048904:	687b      	ldr	r3, [r7, #4]
 8048906:	4a3b      	ldr	r2, [pc, #236]	; (80489f4 <TIM_Base_SetConfig+0x120>)
 8048908:	4293      	cmp	r3, r2
 804890a:	d003      	beq.n	8048914 <TIM_Base_SetConfig+0x40>
 804890c:	687b      	ldr	r3, [r7, #4]
 804890e:	4a3a      	ldr	r2, [pc, #232]	; (80489f8 <TIM_Base_SetConfig+0x124>)
 8048910:	4293      	cmp	r3, r2
 8048912:	d108      	bne.n	8048926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8048914:	68fb      	ldr	r3, [r7, #12]
 8048916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804891a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804891c:	683b      	ldr	r3, [r7, #0]
 804891e:	685b      	ldr	r3, [r3, #4]
 8048920:	68fa      	ldr	r2, [r7, #12]
 8048922:	4313      	orrs	r3, r2
 8048924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8048926:	687b      	ldr	r3, [r7, #4]
 8048928:	4a2f      	ldr	r2, [pc, #188]	; (80489e8 <TIM_Base_SetConfig+0x114>)
 804892a:	4293      	cmp	r3, r2
 804892c:	d02b      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804892e:	687b      	ldr	r3, [r7, #4]
 8048930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048934:	d027      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 8048936:	687b      	ldr	r3, [r7, #4]
 8048938:	4a2c      	ldr	r2, [pc, #176]	; (80489ec <TIM_Base_SetConfig+0x118>)
 804893a:	4293      	cmp	r3, r2
 804893c:	d023      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804893e:	687b      	ldr	r3, [r7, #4]
 8048940:	4a2b      	ldr	r2, [pc, #172]	; (80489f0 <TIM_Base_SetConfig+0x11c>)
 8048942:	4293      	cmp	r3, r2
 8048944:	d01f      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 8048946:	687b      	ldr	r3, [r7, #4]
 8048948:	4a2a      	ldr	r2, [pc, #168]	; (80489f4 <TIM_Base_SetConfig+0x120>)
 804894a:	4293      	cmp	r3, r2
 804894c:	d01b      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804894e:	687b      	ldr	r3, [r7, #4]
 8048950:	4a29      	ldr	r2, [pc, #164]	; (80489f8 <TIM_Base_SetConfig+0x124>)
 8048952:	4293      	cmp	r3, r2
 8048954:	d017      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 8048956:	687b      	ldr	r3, [r7, #4]
 8048958:	4a28      	ldr	r2, [pc, #160]	; (80489fc <TIM_Base_SetConfig+0x128>)
 804895a:	4293      	cmp	r3, r2
 804895c:	d013      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804895e:	687b      	ldr	r3, [r7, #4]
 8048960:	4a27      	ldr	r2, [pc, #156]	; (8048a00 <TIM_Base_SetConfig+0x12c>)
 8048962:	4293      	cmp	r3, r2
 8048964:	d00f      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 8048966:	687b      	ldr	r3, [r7, #4]
 8048968:	4a26      	ldr	r2, [pc, #152]	; (8048a04 <TIM_Base_SetConfig+0x130>)
 804896a:	4293      	cmp	r3, r2
 804896c:	d00b      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804896e:	687b      	ldr	r3, [r7, #4]
 8048970:	4a25      	ldr	r2, [pc, #148]	; (8048a08 <TIM_Base_SetConfig+0x134>)
 8048972:	4293      	cmp	r3, r2
 8048974:	d007      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 8048976:	687b      	ldr	r3, [r7, #4]
 8048978:	4a24      	ldr	r2, [pc, #144]	; (8048a0c <TIM_Base_SetConfig+0x138>)
 804897a:	4293      	cmp	r3, r2
 804897c:	d003      	beq.n	8048986 <TIM_Base_SetConfig+0xb2>
 804897e:	687b      	ldr	r3, [r7, #4]
 8048980:	4a23      	ldr	r2, [pc, #140]	; (8048a10 <TIM_Base_SetConfig+0x13c>)
 8048982:	4293      	cmp	r3, r2
 8048984:	d108      	bne.n	8048998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8048986:	68fb      	ldr	r3, [r7, #12]
 8048988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804898c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804898e:	683b      	ldr	r3, [r7, #0]
 8048990:	68db      	ldr	r3, [r3, #12]
 8048992:	68fa      	ldr	r2, [r7, #12]
 8048994:	4313      	orrs	r3, r2
 8048996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048998:	68fb      	ldr	r3, [r7, #12]
 804899a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804899e:	683b      	ldr	r3, [r7, #0]
 80489a0:	695b      	ldr	r3, [r3, #20]
 80489a2:	4313      	orrs	r3, r2
 80489a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80489a6:	687b      	ldr	r3, [r7, #4]
 80489a8:	68fa      	ldr	r2, [r7, #12]
 80489aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80489ac:	683b      	ldr	r3, [r7, #0]
 80489ae:	689a      	ldr	r2, [r3, #8]
 80489b0:	687b      	ldr	r3, [r7, #4]
 80489b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80489b4:	683b      	ldr	r3, [r7, #0]
 80489b6:	681a      	ldr	r2, [r3, #0]
 80489b8:	687b      	ldr	r3, [r7, #4]
 80489ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80489bc:	687b      	ldr	r3, [r7, #4]
 80489be:	4a0a      	ldr	r2, [pc, #40]	; (80489e8 <TIM_Base_SetConfig+0x114>)
 80489c0:	4293      	cmp	r3, r2
 80489c2:	d003      	beq.n	80489cc <TIM_Base_SetConfig+0xf8>
 80489c4:	687b      	ldr	r3, [r7, #4]
 80489c6:	4a0c      	ldr	r2, [pc, #48]	; (80489f8 <TIM_Base_SetConfig+0x124>)
 80489c8:	4293      	cmp	r3, r2
 80489ca:	d103      	bne.n	80489d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80489cc:	683b      	ldr	r3, [r7, #0]
 80489ce:	691a      	ldr	r2, [r3, #16]
 80489d0:	687b      	ldr	r3, [r7, #4]
 80489d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80489d4:	687b      	ldr	r3, [r7, #4]
 80489d6:	2201      	movs	r2, #1
 80489d8:	615a      	str	r2, [r3, #20]
}
 80489da:	bf00      	nop
 80489dc:	3714      	adds	r7, #20
 80489de:	46bd      	mov	sp, r7
 80489e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489e4:	4770      	bx	lr
 80489e6:	bf00      	nop
 80489e8:	40010000 	.word	0x40010000
 80489ec:	40000400 	.word	0x40000400
 80489f0:	40000800 	.word	0x40000800
 80489f4:	40000c00 	.word	0x40000c00
 80489f8:	40010400 	.word	0x40010400
 80489fc:	40014000 	.word	0x40014000
 8048a00:	40014400 	.word	0x40014400
 8048a04:	40014800 	.word	0x40014800
 8048a08:	40001800 	.word	0x40001800
 8048a0c:	40001c00 	.word	0x40001c00
 8048a10:	40002000 	.word	0x40002000

08048a14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048a14:	b480      	push	{r7}
 8048a16:	b087      	sub	sp, #28
 8048a18:	af00      	add	r7, sp, #0
 8048a1a:	60f8      	str	r0, [r7, #12]
 8048a1c:	60b9      	str	r1, [r7, #8]
 8048a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8048a20:	68fb      	ldr	r3, [r7, #12]
 8048a22:	6a1b      	ldr	r3, [r3, #32]
 8048a24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8048a26:	68fb      	ldr	r3, [r7, #12]
 8048a28:	6a1b      	ldr	r3, [r3, #32]
 8048a2a:	f023 0201 	bic.w	r2, r3, #1
 8048a2e:	68fb      	ldr	r3, [r7, #12]
 8048a30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048a32:	68fb      	ldr	r3, [r7, #12]
 8048a34:	699b      	ldr	r3, [r3, #24]
 8048a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8048a38:	693b      	ldr	r3, [r7, #16]
 8048a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8048a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8048a40:	687b      	ldr	r3, [r7, #4]
 8048a42:	011b      	lsls	r3, r3, #4
 8048a44:	693a      	ldr	r2, [r7, #16]
 8048a46:	4313      	orrs	r3, r2
 8048a48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8048a4a:	697b      	ldr	r3, [r7, #20]
 8048a4c:	f023 030a 	bic.w	r3, r3, #10
 8048a50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8048a52:	697a      	ldr	r2, [r7, #20]
 8048a54:	68bb      	ldr	r3, [r7, #8]
 8048a56:	4313      	orrs	r3, r2
 8048a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8048a5a:	68fb      	ldr	r3, [r7, #12]
 8048a5c:	693a      	ldr	r2, [r7, #16]
 8048a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048a60:	68fb      	ldr	r3, [r7, #12]
 8048a62:	697a      	ldr	r2, [r7, #20]
 8048a64:	621a      	str	r2, [r3, #32]
}
 8048a66:	bf00      	nop
 8048a68:	371c      	adds	r7, #28
 8048a6a:	46bd      	mov	sp, r7
 8048a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a70:	4770      	bx	lr

08048a72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8048a72:	b480      	push	{r7}
 8048a74:	b087      	sub	sp, #28
 8048a76:	af00      	add	r7, sp, #0
 8048a78:	60f8      	str	r0, [r7, #12]
 8048a7a:	60b9      	str	r1, [r7, #8]
 8048a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8048a7e:	68fb      	ldr	r3, [r7, #12]
 8048a80:	6a1b      	ldr	r3, [r3, #32]
 8048a82:	f023 0210 	bic.w	r2, r3, #16
 8048a86:	68fb      	ldr	r3, [r7, #12]
 8048a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8048a8a:	68fb      	ldr	r3, [r7, #12]
 8048a8c:	699b      	ldr	r3, [r3, #24]
 8048a8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8048a90:	68fb      	ldr	r3, [r7, #12]
 8048a92:	6a1b      	ldr	r3, [r3, #32]
 8048a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8048a96:	697b      	ldr	r3, [r7, #20]
 8048a98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048a9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8048a9e:	687b      	ldr	r3, [r7, #4]
 8048aa0:	031b      	lsls	r3, r3, #12
 8048aa2:	697a      	ldr	r2, [r7, #20]
 8048aa4:	4313      	orrs	r3, r2
 8048aa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8048aa8:	693b      	ldr	r3, [r7, #16]
 8048aaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8048aae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8048ab0:	68bb      	ldr	r3, [r7, #8]
 8048ab2:	011b      	lsls	r3, r3, #4
 8048ab4:	693a      	ldr	r2, [r7, #16]
 8048ab6:	4313      	orrs	r3, r2
 8048ab8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8048aba:	68fb      	ldr	r3, [r7, #12]
 8048abc:	697a      	ldr	r2, [r7, #20]
 8048abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8048ac0:	68fb      	ldr	r3, [r7, #12]
 8048ac2:	693a      	ldr	r2, [r7, #16]
 8048ac4:	621a      	str	r2, [r3, #32]
}
 8048ac6:	bf00      	nop
 8048ac8:	371c      	adds	r7, #28
 8048aca:	46bd      	mov	sp, r7
 8048acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ad0:	4770      	bx	lr

08048ad2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8048ad2:	b480      	push	{r7}
 8048ad4:	b085      	sub	sp, #20
 8048ad6:	af00      	add	r7, sp, #0
 8048ad8:	6078      	str	r0, [r7, #4]
 8048ada:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8048adc:	687b      	ldr	r3, [r7, #4]
 8048ade:	689b      	ldr	r3, [r3, #8]
 8048ae0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8048ae2:	68fb      	ldr	r3, [r7, #12]
 8048ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048ae8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8048aea:	683a      	ldr	r2, [r7, #0]
 8048aec:	68fb      	ldr	r3, [r7, #12]
 8048aee:	4313      	orrs	r3, r2
 8048af0:	f043 0307 	orr.w	r3, r3, #7
 8048af4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048af6:	687b      	ldr	r3, [r7, #4]
 8048af8:	68fa      	ldr	r2, [r7, #12]
 8048afa:	609a      	str	r2, [r3, #8]
}
 8048afc:	bf00      	nop
 8048afe:	3714      	adds	r7, #20
 8048b00:	46bd      	mov	sp, r7
 8048b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b06:	4770      	bx	lr

08048b08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8048b08:	b480      	push	{r7}
 8048b0a:	b087      	sub	sp, #28
 8048b0c:	af00      	add	r7, sp, #0
 8048b0e:	60f8      	str	r0, [r7, #12]
 8048b10:	60b9      	str	r1, [r7, #8]
 8048b12:	607a      	str	r2, [r7, #4]
 8048b14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8048b16:	68fb      	ldr	r3, [r7, #12]
 8048b18:	689b      	ldr	r3, [r3, #8]
 8048b1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8048b1c:	697b      	ldr	r3, [r7, #20]
 8048b1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8048b22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8048b24:	683b      	ldr	r3, [r7, #0]
 8048b26:	021a      	lsls	r2, r3, #8
 8048b28:	687b      	ldr	r3, [r7, #4]
 8048b2a:	431a      	orrs	r2, r3
 8048b2c:	68bb      	ldr	r3, [r7, #8]
 8048b2e:	4313      	orrs	r3, r2
 8048b30:	697a      	ldr	r2, [r7, #20]
 8048b32:	4313      	orrs	r3, r2
 8048b34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8048b36:	68fb      	ldr	r3, [r7, #12]
 8048b38:	697a      	ldr	r2, [r7, #20]
 8048b3a:	609a      	str	r2, [r3, #8]
}
 8048b3c:	bf00      	nop
 8048b3e:	371c      	adds	r7, #28
 8048b40:	46bd      	mov	sp, r7
 8048b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b46:	4770      	bx	lr

08048b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8048b48:	b480      	push	{r7}
 8048b4a:	b085      	sub	sp, #20
 8048b4c:	af00      	add	r7, sp, #0
 8048b4e:	6078      	str	r0, [r7, #4]
 8048b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8048b52:	687b      	ldr	r3, [r7, #4]
 8048b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048b58:	2b01      	cmp	r3, #1
 8048b5a:	d101      	bne.n	8048b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8048b5c:	2302      	movs	r3, #2
 8048b5e:	e05a      	b.n	8048c16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8048b60:	687b      	ldr	r3, [r7, #4]
 8048b62:	2201      	movs	r2, #1
 8048b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048b68:	687b      	ldr	r3, [r7, #4]
 8048b6a:	2202      	movs	r2, #2
 8048b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8048b70:	687b      	ldr	r3, [r7, #4]
 8048b72:	681b      	ldr	r3, [r3, #0]
 8048b74:	685b      	ldr	r3, [r3, #4]
 8048b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048b78:	687b      	ldr	r3, [r7, #4]
 8048b7a:	681b      	ldr	r3, [r3, #0]
 8048b7c:	689b      	ldr	r3, [r3, #8]
 8048b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8048b80:	68fb      	ldr	r3, [r7, #12]
 8048b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8048b88:	683b      	ldr	r3, [r7, #0]
 8048b8a:	681b      	ldr	r3, [r3, #0]
 8048b8c:	68fa      	ldr	r2, [r7, #12]
 8048b8e:	4313      	orrs	r3, r2
 8048b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8048b92:	687b      	ldr	r3, [r7, #4]
 8048b94:	681b      	ldr	r3, [r3, #0]
 8048b96:	68fa      	ldr	r2, [r7, #12]
 8048b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048b9a:	687b      	ldr	r3, [r7, #4]
 8048b9c:	681b      	ldr	r3, [r3, #0]
 8048b9e:	4a21      	ldr	r2, [pc, #132]	; (8048c24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8048ba0:	4293      	cmp	r3, r2
 8048ba2:	d022      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048ba4:	687b      	ldr	r3, [r7, #4]
 8048ba6:	681b      	ldr	r3, [r3, #0]
 8048ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048bac:	d01d      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048bae:	687b      	ldr	r3, [r7, #4]
 8048bb0:	681b      	ldr	r3, [r3, #0]
 8048bb2:	4a1d      	ldr	r2, [pc, #116]	; (8048c28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8048bb4:	4293      	cmp	r3, r2
 8048bb6:	d018      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048bb8:	687b      	ldr	r3, [r7, #4]
 8048bba:	681b      	ldr	r3, [r3, #0]
 8048bbc:	4a1b      	ldr	r2, [pc, #108]	; (8048c2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8048bbe:	4293      	cmp	r3, r2
 8048bc0:	d013      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048bc2:	687b      	ldr	r3, [r7, #4]
 8048bc4:	681b      	ldr	r3, [r3, #0]
 8048bc6:	4a1a      	ldr	r2, [pc, #104]	; (8048c30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8048bc8:	4293      	cmp	r3, r2
 8048bca:	d00e      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048bcc:	687b      	ldr	r3, [r7, #4]
 8048bce:	681b      	ldr	r3, [r3, #0]
 8048bd0:	4a18      	ldr	r2, [pc, #96]	; (8048c34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8048bd2:	4293      	cmp	r3, r2
 8048bd4:	d009      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048bd6:	687b      	ldr	r3, [r7, #4]
 8048bd8:	681b      	ldr	r3, [r3, #0]
 8048bda:	4a17      	ldr	r2, [pc, #92]	; (8048c38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8048bdc:	4293      	cmp	r3, r2
 8048bde:	d004      	beq.n	8048bea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8048be0:	687b      	ldr	r3, [r7, #4]
 8048be2:	681b      	ldr	r3, [r3, #0]
 8048be4:	4a15      	ldr	r2, [pc, #84]	; (8048c3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8048be6:	4293      	cmp	r3, r2
 8048be8:	d10c      	bne.n	8048c04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8048bea:	68bb      	ldr	r3, [r7, #8]
 8048bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048bf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048bf2:	683b      	ldr	r3, [r7, #0]
 8048bf4:	685b      	ldr	r3, [r3, #4]
 8048bf6:	68ba      	ldr	r2, [r7, #8]
 8048bf8:	4313      	orrs	r3, r2
 8048bfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8048bfc:	687b      	ldr	r3, [r7, #4]
 8048bfe:	681b      	ldr	r3, [r3, #0]
 8048c00:	68ba      	ldr	r2, [r7, #8]
 8048c02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048c04:	687b      	ldr	r3, [r7, #4]
 8048c06:	2201      	movs	r2, #1
 8048c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048c0c:	687b      	ldr	r3, [r7, #4]
 8048c0e:	2200      	movs	r2, #0
 8048c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048c14:	2300      	movs	r3, #0
}
 8048c16:	4618      	mov	r0, r3
 8048c18:	3714      	adds	r7, #20
 8048c1a:	46bd      	mov	sp, r7
 8048c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c20:	4770      	bx	lr
 8048c22:	bf00      	nop
 8048c24:	40010000 	.word	0x40010000
 8048c28:	40000400 	.word	0x40000400
 8048c2c:	40000800 	.word	0x40000800
 8048c30:	40000c00 	.word	0x40000c00
 8048c34:	40010400 	.word	0x40010400
 8048c38:	40014000 	.word	0x40014000
 8048c3c:	40001800 	.word	0x40001800

08048c40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048c40:	b480      	push	{r7}
 8048c42:	b083      	sub	sp, #12
 8048c44:	af00      	add	r7, sp, #0
 8048c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048c48:	bf00      	nop
 8048c4a:	370c      	adds	r7, #12
 8048c4c:	46bd      	mov	sp, r7
 8048c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c52:	4770      	bx	lr

08048c54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048c54:	b480      	push	{r7}
 8048c56:	b083      	sub	sp, #12
 8048c58:	af00      	add	r7, sp, #0
 8048c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048c5c:	bf00      	nop
 8048c5e:	370c      	adds	r7, #12
 8048c60:	46bd      	mov	sp, r7
 8048c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c66:	4770      	bx	lr

08048c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8048c68:	b580      	push	{r7, lr}
 8048c6a:	b082      	sub	sp, #8
 8048c6c:	af00      	add	r7, sp, #0
 8048c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8048c70:	687b      	ldr	r3, [r7, #4]
 8048c72:	2b00      	cmp	r3, #0
 8048c74:	d101      	bne.n	8048c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8048c76:	2301      	movs	r3, #1
 8048c78:	e03f      	b.n	8048cfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8048c7a:	687b      	ldr	r3, [r7, #4]
 8048c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048c80:	b2db      	uxtb	r3, r3
 8048c82:	2b00      	cmp	r3, #0
 8048c84:	d106      	bne.n	8048c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8048c86:	687b      	ldr	r3, [r7, #4]
 8048c88:	2200      	movs	r2, #0
 8048c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8048c8e:	6878      	ldr	r0, [r7, #4]
 8048c90:	f7f8 fe5a 	bl	8041948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8048c94:	687b      	ldr	r3, [r7, #4]
 8048c96:	2224      	movs	r2, #36	; 0x24
 8048c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8048c9c:	687b      	ldr	r3, [r7, #4]
 8048c9e:	681b      	ldr	r3, [r3, #0]
 8048ca0:	68da      	ldr	r2, [r3, #12]
 8048ca2:	687b      	ldr	r3, [r7, #4]
 8048ca4:	681b      	ldr	r3, [r3, #0]
 8048ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8048caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8048cac:	6878      	ldr	r0, [r7, #4]
 8048cae:	f000 f9cb 	bl	8049048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8048cb2:	687b      	ldr	r3, [r7, #4]
 8048cb4:	681b      	ldr	r3, [r3, #0]
 8048cb6:	691a      	ldr	r2, [r3, #16]
 8048cb8:	687b      	ldr	r3, [r7, #4]
 8048cba:	681b      	ldr	r3, [r3, #0]
 8048cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8048cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8048cc2:	687b      	ldr	r3, [r7, #4]
 8048cc4:	681b      	ldr	r3, [r3, #0]
 8048cc6:	695a      	ldr	r2, [r3, #20]
 8048cc8:	687b      	ldr	r3, [r7, #4]
 8048cca:	681b      	ldr	r3, [r3, #0]
 8048ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8048cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8048cd2:	687b      	ldr	r3, [r7, #4]
 8048cd4:	681b      	ldr	r3, [r3, #0]
 8048cd6:	68da      	ldr	r2, [r3, #12]
 8048cd8:	687b      	ldr	r3, [r7, #4]
 8048cda:	681b      	ldr	r3, [r3, #0]
 8048cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8048ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048ce2:	687b      	ldr	r3, [r7, #4]
 8048ce4:	2200      	movs	r2, #0
 8048ce6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8048ce8:	687b      	ldr	r3, [r7, #4]
 8048cea:	2220      	movs	r2, #32
 8048cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8048cf0:	687b      	ldr	r3, [r7, #4]
 8048cf2:	2220      	movs	r2, #32
 8048cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8048cf8:	2300      	movs	r3, #0
}
 8048cfa:	4618      	mov	r0, r3
 8048cfc:	3708      	adds	r7, #8
 8048cfe:	46bd      	mov	sp, r7
 8048d00:	bd80      	pop	{r7, pc}

08048d02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048d02:	b580      	push	{r7, lr}
 8048d04:	b08a      	sub	sp, #40	; 0x28
 8048d06:	af02      	add	r7, sp, #8
 8048d08:	60f8      	str	r0, [r7, #12]
 8048d0a:	60b9      	str	r1, [r7, #8]
 8048d0c:	603b      	str	r3, [r7, #0]
 8048d0e:	4613      	mov	r3, r2
 8048d10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8048d12:	2300      	movs	r3, #0
 8048d14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8048d16:	68fb      	ldr	r3, [r7, #12]
 8048d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8048d1c:	b2db      	uxtb	r3, r3
 8048d1e:	2b20      	cmp	r3, #32
 8048d20:	d17c      	bne.n	8048e1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8048d22:	68bb      	ldr	r3, [r7, #8]
 8048d24:	2b00      	cmp	r3, #0
 8048d26:	d002      	beq.n	8048d2e <HAL_UART_Transmit+0x2c>
 8048d28:	88fb      	ldrh	r3, [r7, #6]
 8048d2a:	2b00      	cmp	r3, #0
 8048d2c:	d101      	bne.n	8048d32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8048d2e:	2301      	movs	r3, #1
 8048d30:	e075      	b.n	8048e1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8048d32:	68fb      	ldr	r3, [r7, #12]
 8048d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048d38:	2b01      	cmp	r3, #1
 8048d3a:	d101      	bne.n	8048d40 <HAL_UART_Transmit+0x3e>
 8048d3c:	2302      	movs	r3, #2
 8048d3e:	e06e      	b.n	8048e1e <HAL_UART_Transmit+0x11c>
 8048d40:	68fb      	ldr	r3, [r7, #12]
 8048d42:	2201      	movs	r2, #1
 8048d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048d48:	68fb      	ldr	r3, [r7, #12]
 8048d4a:	2200      	movs	r2, #0
 8048d4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8048d4e:	68fb      	ldr	r3, [r7, #12]
 8048d50:	2221      	movs	r2, #33	; 0x21
 8048d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8048d56:	f7fa fabf 	bl	80432d8 <HAL_GetTick>
 8048d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8048d5c:	68fb      	ldr	r3, [r7, #12]
 8048d5e:	88fa      	ldrh	r2, [r7, #6]
 8048d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8048d62:	68fb      	ldr	r3, [r7, #12]
 8048d64:	88fa      	ldrh	r2, [r7, #6]
 8048d66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8048d68:	68fb      	ldr	r3, [r7, #12]
 8048d6a:	689b      	ldr	r3, [r3, #8]
 8048d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048d70:	d108      	bne.n	8048d84 <HAL_UART_Transmit+0x82>
 8048d72:	68fb      	ldr	r3, [r7, #12]
 8048d74:	691b      	ldr	r3, [r3, #16]
 8048d76:	2b00      	cmp	r3, #0
 8048d78:	d104      	bne.n	8048d84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8048d7a:	2300      	movs	r3, #0
 8048d7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8048d7e:	68bb      	ldr	r3, [r7, #8]
 8048d80:	61bb      	str	r3, [r7, #24]
 8048d82:	e003      	b.n	8048d8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8048d84:	68bb      	ldr	r3, [r7, #8]
 8048d86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8048d88:	2300      	movs	r3, #0
 8048d8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8048d8c:	68fb      	ldr	r3, [r7, #12]
 8048d8e:	2200      	movs	r2, #0
 8048d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8048d94:	e02a      	b.n	8048dec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8048d96:	683b      	ldr	r3, [r7, #0]
 8048d98:	9300      	str	r3, [sp, #0]
 8048d9a:	697b      	ldr	r3, [r7, #20]
 8048d9c:	2200      	movs	r2, #0
 8048d9e:	2180      	movs	r1, #128	; 0x80
 8048da0:	68f8      	ldr	r0, [r7, #12]
 8048da2:	f000 f8e2 	bl	8048f6a <UART_WaitOnFlagUntilTimeout>
 8048da6:	4603      	mov	r3, r0
 8048da8:	2b00      	cmp	r3, #0
 8048daa:	d001      	beq.n	8048db0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8048dac:	2303      	movs	r3, #3
 8048dae:	e036      	b.n	8048e1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8048db0:	69fb      	ldr	r3, [r7, #28]
 8048db2:	2b00      	cmp	r3, #0
 8048db4:	d10b      	bne.n	8048dce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8048db6:	69bb      	ldr	r3, [r7, #24]
 8048db8:	881b      	ldrh	r3, [r3, #0]
 8048dba:	461a      	mov	r2, r3
 8048dbc:	68fb      	ldr	r3, [r7, #12]
 8048dbe:	681b      	ldr	r3, [r3, #0]
 8048dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8048dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8048dc6:	69bb      	ldr	r3, [r7, #24]
 8048dc8:	3302      	adds	r3, #2
 8048dca:	61bb      	str	r3, [r7, #24]
 8048dcc:	e007      	b.n	8048dde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8048dce:	69fb      	ldr	r3, [r7, #28]
 8048dd0:	781a      	ldrb	r2, [r3, #0]
 8048dd2:	68fb      	ldr	r3, [r7, #12]
 8048dd4:	681b      	ldr	r3, [r3, #0]
 8048dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8048dd8:	69fb      	ldr	r3, [r7, #28]
 8048dda:	3301      	adds	r3, #1
 8048ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8048dde:	68fb      	ldr	r3, [r7, #12]
 8048de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048de2:	b29b      	uxth	r3, r3
 8048de4:	3b01      	subs	r3, #1
 8048de6:	b29a      	uxth	r2, r3
 8048de8:	68fb      	ldr	r3, [r7, #12]
 8048dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8048dec:	68fb      	ldr	r3, [r7, #12]
 8048dee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8048df0:	b29b      	uxth	r3, r3
 8048df2:	2b00      	cmp	r3, #0
 8048df4:	d1cf      	bne.n	8048d96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8048df6:	683b      	ldr	r3, [r7, #0]
 8048df8:	9300      	str	r3, [sp, #0]
 8048dfa:	697b      	ldr	r3, [r7, #20]
 8048dfc:	2200      	movs	r2, #0
 8048dfe:	2140      	movs	r1, #64	; 0x40
 8048e00:	68f8      	ldr	r0, [r7, #12]
 8048e02:	f000 f8b2 	bl	8048f6a <UART_WaitOnFlagUntilTimeout>
 8048e06:	4603      	mov	r3, r0
 8048e08:	2b00      	cmp	r3, #0
 8048e0a:	d001      	beq.n	8048e10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8048e0c:	2303      	movs	r3, #3
 8048e0e:	e006      	b.n	8048e1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8048e10:	68fb      	ldr	r3, [r7, #12]
 8048e12:	2220      	movs	r2, #32
 8048e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8048e18:	2300      	movs	r3, #0
 8048e1a:	e000      	b.n	8048e1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8048e1c:	2302      	movs	r3, #2
  }
}
 8048e1e:	4618      	mov	r0, r3
 8048e20:	3720      	adds	r7, #32
 8048e22:	46bd      	mov	sp, r7
 8048e24:	bd80      	pop	{r7, pc}

08048e26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8048e26:	b580      	push	{r7, lr}
 8048e28:	b08a      	sub	sp, #40	; 0x28
 8048e2a:	af02      	add	r7, sp, #8
 8048e2c:	60f8      	str	r0, [r7, #12]
 8048e2e:	60b9      	str	r1, [r7, #8]
 8048e30:	603b      	str	r3, [r7, #0]
 8048e32:	4613      	mov	r3, r2
 8048e34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8048e36:	2300      	movs	r3, #0
 8048e38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8048e3a:	68fb      	ldr	r3, [r7, #12]
 8048e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8048e40:	b2db      	uxtb	r3, r3
 8048e42:	2b20      	cmp	r3, #32
 8048e44:	f040 808c 	bne.w	8048f60 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8048e48:	68bb      	ldr	r3, [r7, #8]
 8048e4a:	2b00      	cmp	r3, #0
 8048e4c:	d002      	beq.n	8048e54 <HAL_UART_Receive+0x2e>
 8048e4e:	88fb      	ldrh	r3, [r7, #6]
 8048e50:	2b00      	cmp	r3, #0
 8048e52:	d101      	bne.n	8048e58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8048e54:	2301      	movs	r3, #1
 8048e56:	e084      	b.n	8048f62 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8048e58:	68fb      	ldr	r3, [r7, #12]
 8048e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048e5e:	2b01      	cmp	r3, #1
 8048e60:	d101      	bne.n	8048e66 <HAL_UART_Receive+0x40>
 8048e62:	2302      	movs	r3, #2
 8048e64:	e07d      	b.n	8048f62 <HAL_UART_Receive+0x13c>
 8048e66:	68fb      	ldr	r3, [r7, #12]
 8048e68:	2201      	movs	r2, #1
 8048e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8048e6e:	68fb      	ldr	r3, [r7, #12]
 8048e70:	2200      	movs	r2, #0
 8048e72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8048e74:	68fb      	ldr	r3, [r7, #12]
 8048e76:	2222      	movs	r2, #34	; 0x22
 8048e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8048e7c:	68fb      	ldr	r3, [r7, #12]
 8048e7e:	2200      	movs	r2, #0
 8048e80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8048e82:	f7fa fa29 	bl	80432d8 <HAL_GetTick>
 8048e86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8048e88:	68fb      	ldr	r3, [r7, #12]
 8048e8a:	88fa      	ldrh	r2, [r7, #6]
 8048e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8048e8e:	68fb      	ldr	r3, [r7, #12]
 8048e90:	88fa      	ldrh	r2, [r7, #6]
 8048e92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8048e94:	68fb      	ldr	r3, [r7, #12]
 8048e96:	689b      	ldr	r3, [r3, #8]
 8048e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048e9c:	d108      	bne.n	8048eb0 <HAL_UART_Receive+0x8a>
 8048e9e:	68fb      	ldr	r3, [r7, #12]
 8048ea0:	691b      	ldr	r3, [r3, #16]
 8048ea2:	2b00      	cmp	r3, #0
 8048ea4:	d104      	bne.n	8048eb0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8048ea6:	2300      	movs	r3, #0
 8048ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8048eaa:	68bb      	ldr	r3, [r7, #8]
 8048eac:	61bb      	str	r3, [r7, #24]
 8048eae:	e003      	b.n	8048eb8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8048eb0:	68bb      	ldr	r3, [r7, #8]
 8048eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8048eb4:	2300      	movs	r3, #0
 8048eb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8048eb8:	68fb      	ldr	r3, [r7, #12]
 8048eba:	2200      	movs	r2, #0
 8048ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8048ec0:	e043      	b.n	8048f4a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8048ec2:	683b      	ldr	r3, [r7, #0]
 8048ec4:	9300      	str	r3, [sp, #0]
 8048ec6:	697b      	ldr	r3, [r7, #20]
 8048ec8:	2200      	movs	r2, #0
 8048eca:	2120      	movs	r1, #32
 8048ecc:	68f8      	ldr	r0, [r7, #12]
 8048ece:	f000 f84c 	bl	8048f6a <UART_WaitOnFlagUntilTimeout>
 8048ed2:	4603      	mov	r3, r0
 8048ed4:	2b00      	cmp	r3, #0
 8048ed6:	d001      	beq.n	8048edc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8048ed8:	2303      	movs	r3, #3
 8048eda:	e042      	b.n	8048f62 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8048edc:	69fb      	ldr	r3, [r7, #28]
 8048ede:	2b00      	cmp	r3, #0
 8048ee0:	d10c      	bne.n	8048efc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8048ee2:	68fb      	ldr	r3, [r7, #12]
 8048ee4:	681b      	ldr	r3, [r3, #0]
 8048ee6:	685b      	ldr	r3, [r3, #4]
 8048ee8:	b29b      	uxth	r3, r3
 8048eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8048eee:	b29a      	uxth	r2, r3
 8048ef0:	69bb      	ldr	r3, [r7, #24]
 8048ef2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8048ef4:	69bb      	ldr	r3, [r7, #24]
 8048ef6:	3302      	adds	r3, #2
 8048ef8:	61bb      	str	r3, [r7, #24]
 8048efa:	e01f      	b.n	8048f3c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8048efc:	68fb      	ldr	r3, [r7, #12]
 8048efe:	689b      	ldr	r3, [r3, #8]
 8048f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8048f04:	d007      	beq.n	8048f16 <HAL_UART_Receive+0xf0>
 8048f06:	68fb      	ldr	r3, [r7, #12]
 8048f08:	689b      	ldr	r3, [r3, #8]
 8048f0a:	2b00      	cmp	r3, #0
 8048f0c:	d10a      	bne.n	8048f24 <HAL_UART_Receive+0xfe>
 8048f0e:	68fb      	ldr	r3, [r7, #12]
 8048f10:	691b      	ldr	r3, [r3, #16]
 8048f12:	2b00      	cmp	r3, #0
 8048f14:	d106      	bne.n	8048f24 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8048f16:	68fb      	ldr	r3, [r7, #12]
 8048f18:	681b      	ldr	r3, [r3, #0]
 8048f1a:	685b      	ldr	r3, [r3, #4]
 8048f1c:	b2da      	uxtb	r2, r3
 8048f1e:	69fb      	ldr	r3, [r7, #28]
 8048f20:	701a      	strb	r2, [r3, #0]
 8048f22:	e008      	b.n	8048f36 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8048f24:	68fb      	ldr	r3, [r7, #12]
 8048f26:	681b      	ldr	r3, [r3, #0]
 8048f28:	685b      	ldr	r3, [r3, #4]
 8048f2a:	b2db      	uxtb	r3, r3
 8048f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8048f30:	b2da      	uxtb	r2, r3
 8048f32:	69fb      	ldr	r3, [r7, #28]
 8048f34:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8048f36:	69fb      	ldr	r3, [r7, #28]
 8048f38:	3301      	adds	r3, #1
 8048f3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8048f3c:	68fb      	ldr	r3, [r7, #12]
 8048f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8048f40:	b29b      	uxth	r3, r3
 8048f42:	3b01      	subs	r3, #1
 8048f44:	b29a      	uxth	r2, r3
 8048f46:	68fb      	ldr	r3, [r7, #12]
 8048f48:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8048f4a:	68fb      	ldr	r3, [r7, #12]
 8048f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8048f4e:	b29b      	uxth	r3, r3
 8048f50:	2b00      	cmp	r3, #0
 8048f52:	d1b6      	bne.n	8048ec2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8048f54:	68fb      	ldr	r3, [r7, #12]
 8048f56:	2220      	movs	r2, #32
 8048f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8048f5c:	2300      	movs	r3, #0
 8048f5e:	e000      	b.n	8048f62 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8048f60:	2302      	movs	r3, #2
  }
}
 8048f62:	4618      	mov	r0, r3
 8048f64:	3720      	adds	r7, #32
 8048f66:	46bd      	mov	sp, r7
 8048f68:	bd80      	pop	{r7, pc}

08048f6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8048f6a:	b580      	push	{r7, lr}
 8048f6c:	b090      	sub	sp, #64	; 0x40
 8048f6e:	af00      	add	r7, sp, #0
 8048f70:	60f8      	str	r0, [r7, #12]
 8048f72:	60b9      	str	r1, [r7, #8]
 8048f74:	603b      	str	r3, [r7, #0]
 8048f76:	4613      	mov	r3, r2
 8048f78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8048f7a:	e050      	b.n	804901e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8048f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8048f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8048f82:	d04c      	beq.n	804901e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8048f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8048f86:	2b00      	cmp	r3, #0
 8048f88:	d007      	beq.n	8048f9a <UART_WaitOnFlagUntilTimeout+0x30>
 8048f8a:	f7fa f9a5 	bl	80432d8 <HAL_GetTick>
 8048f8e:	4602      	mov	r2, r0
 8048f90:	683b      	ldr	r3, [r7, #0]
 8048f92:	1ad3      	subs	r3, r2, r3
 8048f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8048f96:	429a      	cmp	r2, r3
 8048f98:	d241      	bcs.n	804901e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8048f9a:	68fb      	ldr	r3, [r7, #12]
 8048f9c:	681b      	ldr	r3, [r3, #0]
 8048f9e:	330c      	adds	r3, #12
 8048fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8048fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8048fa4:	e853 3f00 	ldrex	r3, [r3]
 8048fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8048faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048fac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8048fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8048fb2:	68fb      	ldr	r3, [r7, #12]
 8048fb4:	681b      	ldr	r3, [r3, #0]
 8048fb6:	330c      	adds	r3, #12
 8048fb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8048fba:	637a      	str	r2, [r7, #52]	; 0x34
 8048fbc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8048fbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8048fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8048fc2:	e841 2300 	strex	r3, r2, [r1]
 8048fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8048fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8048fca:	2b00      	cmp	r3, #0
 8048fcc:	d1e5      	bne.n	8048f9a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8048fce:	68fb      	ldr	r3, [r7, #12]
 8048fd0:	681b      	ldr	r3, [r3, #0]
 8048fd2:	3314      	adds	r3, #20
 8048fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8048fd6:	697b      	ldr	r3, [r7, #20]
 8048fd8:	e853 3f00 	ldrex	r3, [r3]
 8048fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8048fde:	693b      	ldr	r3, [r7, #16]
 8048fe0:	f023 0301 	bic.w	r3, r3, #1
 8048fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8048fe6:	68fb      	ldr	r3, [r7, #12]
 8048fe8:	681b      	ldr	r3, [r3, #0]
 8048fea:	3314      	adds	r3, #20
 8048fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8048fee:	623a      	str	r2, [r7, #32]
 8048ff0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8048ff2:	69f9      	ldr	r1, [r7, #28]
 8048ff4:	6a3a      	ldr	r2, [r7, #32]
 8048ff6:	e841 2300 	strex	r3, r2, [r1]
 8048ffa:	61bb      	str	r3, [r7, #24]
   return(result);
 8048ffc:	69bb      	ldr	r3, [r7, #24]
 8048ffe:	2b00      	cmp	r3, #0
 8049000:	d1e5      	bne.n	8048fce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8049002:	68fb      	ldr	r3, [r7, #12]
 8049004:	2220      	movs	r2, #32
 8049006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 804900a:	68fb      	ldr	r3, [r7, #12]
 804900c:	2220      	movs	r2, #32
 804900e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8049012:	68fb      	ldr	r3, [r7, #12]
 8049014:	2200      	movs	r2, #0
 8049016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 804901a:	2303      	movs	r3, #3
 804901c:	e00f      	b.n	804903e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804901e:	68fb      	ldr	r3, [r7, #12]
 8049020:	681b      	ldr	r3, [r3, #0]
 8049022:	681a      	ldr	r2, [r3, #0]
 8049024:	68bb      	ldr	r3, [r7, #8]
 8049026:	4013      	ands	r3, r2
 8049028:	68ba      	ldr	r2, [r7, #8]
 804902a:	429a      	cmp	r2, r3
 804902c:	bf0c      	ite	eq
 804902e:	2301      	moveq	r3, #1
 8049030:	2300      	movne	r3, #0
 8049032:	b2db      	uxtb	r3, r3
 8049034:	461a      	mov	r2, r3
 8049036:	79fb      	ldrb	r3, [r7, #7]
 8049038:	429a      	cmp	r2, r3
 804903a:	d09f      	beq.n	8048f7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 804903c:	2300      	movs	r3, #0
}
 804903e:	4618      	mov	r0, r3
 8049040:	3740      	adds	r7, #64	; 0x40
 8049042:	46bd      	mov	sp, r7
 8049044:	bd80      	pop	{r7, pc}
	...

08049048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8049048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804904c:	b0c0      	sub	sp, #256	; 0x100
 804904e:	af00      	add	r7, sp, #0
 8049050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8049054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049058:	681b      	ldr	r3, [r3, #0]
 804905a:	691b      	ldr	r3, [r3, #16]
 804905c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8049060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049064:	68d9      	ldr	r1, [r3, #12]
 8049066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804906a:	681a      	ldr	r2, [r3, #0]
 804906c:	ea40 0301 	orr.w	r3, r0, r1
 8049070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8049072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049076:	689a      	ldr	r2, [r3, #8]
 8049078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804907c:	691b      	ldr	r3, [r3, #16]
 804907e:	431a      	orrs	r2, r3
 8049080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049084:	695b      	ldr	r3, [r3, #20]
 8049086:	431a      	orrs	r2, r3
 8049088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804908c:	69db      	ldr	r3, [r3, #28]
 804908e:	4313      	orrs	r3, r2
 8049090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8049094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049098:	681b      	ldr	r3, [r3, #0]
 804909a:	68db      	ldr	r3, [r3, #12]
 804909c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80490a0:	f021 010c 	bic.w	r1, r1, #12
 80490a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490a8:	681a      	ldr	r2, [r3, #0]
 80490aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80490ae:	430b      	orrs	r3, r1
 80490b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80490b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490b6:	681b      	ldr	r3, [r3, #0]
 80490b8:	695b      	ldr	r3, [r3, #20]
 80490ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80490be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490c2:	6999      	ldr	r1, [r3, #24]
 80490c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490c8:	681a      	ldr	r2, [r3, #0]
 80490ca:	ea40 0301 	orr.w	r3, r0, r1
 80490ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80490d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490d4:	681a      	ldr	r2, [r3, #0]
 80490d6:	4b8f      	ldr	r3, [pc, #572]	; (8049314 <UART_SetConfig+0x2cc>)
 80490d8:	429a      	cmp	r2, r3
 80490da:	d005      	beq.n	80490e8 <UART_SetConfig+0xa0>
 80490dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490e0:	681a      	ldr	r2, [r3, #0]
 80490e2:	4b8d      	ldr	r3, [pc, #564]	; (8049318 <UART_SetConfig+0x2d0>)
 80490e4:	429a      	cmp	r2, r3
 80490e6:	d104      	bne.n	80490f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80490e8:	f7fe f8c6 	bl	8047278 <HAL_RCC_GetPCLK2Freq>
 80490ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80490f0:	e003      	b.n	80490fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80490f2:	f7fe f8ad 	bl	8047250 <HAL_RCC_GetPCLK1Freq>
 80490f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80490fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80490fe:	69db      	ldr	r3, [r3, #28]
 8049100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8049104:	f040 810c 	bne.w	8049320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8049108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804910c:	2200      	movs	r2, #0
 804910e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8049112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8049116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 804911a:	4622      	mov	r2, r4
 804911c:	462b      	mov	r3, r5
 804911e:	1891      	adds	r1, r2, r2
 8049120:	65b9      	str	r1, [r7, #88]	; 0x58
 8049122:	415b      	adcs	r3, r3
 8049124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8049126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 804912a:	4621      	mov	r1, r4
 804912c:	eb12 0801 	adds.w	r8, r2, r1
 8049130:	4629      	mov	r1, r5
 8049132:	eb43 0901 	adc.w	r9, r3, r1
 8049136:	f04f 0200 	mov.w	r2, #0
 804913a:	f04f 0300 	mov.w	r3, #0
 804913e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8049142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8049146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804914a:	4690      	mov	r8, r2
 804914c:	4699      	mov	r9, r3
 804914e:	4623      	mov	r3, r4
 8049150:	eb18 0303 	adds.w	r3, r8, r3
 8049154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8049158:	462b      	mov	r3, r5
 804915a:	eb49 0303 	adc.w	r3, r9, r3
 804915e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8049162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049166:	685b      	ldr	r3, [r3, #4]
 8049168:	2200      	movs	r2, #0
 804916a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 804916e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8049172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8049176:	460b      	mov	r3, r1
 8049178:	18db      	adds	r3, r3, r3
 804917a:	653b      	str	r3, [r7, #80]	; 0x50
 804917c:	4613      	mov	r3, r2
 804917e:	eb42 0303 	adc.w	r3, r2, r3
 8049182:	657b      	str	r3, [r7, #84]	; 0x54
 8049184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8049188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 804918c:	f7f7 f880 	bl	8040290 <__aeabi_uldivmod>
 8049190:	4602      	mov	r2, r0
 8049192:	460b      	mov	r3, r1
 8049194:	4b61      	ldr	r3, [pc, #388]	; (804931c <UART_SetConfig+0x2d4>)
 8049196:	fba3 2302 	umull	r2, r3, r3, r2
 804919a:	095b      	lsrs	r3, r3, #5
 804919c:	011c      	lsls	r4, r3, #4
 804919e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80491a2:	2200      	movs	r2, #0
 80491a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80491a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80491ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80491b0:	4642      	mov	r2, r8
 80491b2:	464b      	mov	r3, r9
 80491b4:	1891      	adds	r1, r2, r2
 80491b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80491b8:	415b      	adcs	r3, r3
 80491ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80491bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80491c0:	4641      	mov	r1, r8
 80491c2:	eb12 0a01 	adds.w	sl, r2, r1
 80491c6:	4649      	mov	r1, r9
 80491c8:	eb43 0b01 	adc.w	fp, r3, r1
 80491cc:	f04f 0200 	mov.w	r2, #0
 80491d0:	f04f 0300 	mov.w	r3, #0
 80491d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80491d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80491dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80491e0:	4692      	mov	sl, r2
 80491e2:	469b      	mov	fp, r3
 80491e4:	4643      	mov	r3, r8
 80491e6:	eb1a 0303 	adds.w	r3, sl, r3
 80491ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80491ee:	464b      	mov	r3, r9
 80491f0:	eb4b 0303 	adc.w	r3, fp, r3
 80491f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80491f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80491fc:	685b      	ldr	r3, [r3, #4]
 80491fe:	2200      	movs	r2, #0
 8049200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8049204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8049208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 804920c:	460b      	mov	r3, r1
 804920e:	18db      	adds	r3, r3, r3
 8049210:	643b      	str	r3, [r7, #64]	; 0x40
 8049212:	4613      	mov	r3, r2
 8049214:	eb42 0303 	adc.w	r3, r2, r3
 8049218:	647b      	str	r3, [r7, #68]	; 0x44
 804921a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 804921e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8049222:	f7f7 f835 	bl	8040290 <__aeabi_uldivmod>
 8049226:	4602      	mov	r2, r0
 8049228:	460b      	mov	r3, r1
 804922a:	4611      	mov	r1, r2
 804922c:	4b3b      	ldr	r3, [pc, #236]	; (804931c <UART_SetConfig+0x2d4>)
 804922e:	fba3 2301 	umull	r2, r3, r3, r1
 8049232:	095b      	lsrs	r3, r3, #5
 8049234:	2264      	movs	r2, #100	; 0x64
 8049236:	fb02 f303 	mul.w	r3, r2, r3
 804923a:	1acb      	subs	r3, r1, r3
 804923c:	00db      	lsls	r3, r3, #3
 804923e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8049242:	4b36      	ldr	r3, [pc, #216]	; (804931c <UART_SetConfig+0x2d4>)
 8049244:	fba3 2302 	umull	r2, r3, r3, r2
 8049248:	095b      	lsrs	r3, r3, #5
 804924a:	005b      	lsls	r3, r3, #1
 804924c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8049250:	441c      	add	r4, r3
 8049252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049256:	2200      	movs	r2, #0
 8049258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 804925c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8049260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8049264:	4642      	mov	r2, r8
 8049266:	464b      	mov	r3, r9
 8049268:	1891      	adds	r1, r2, r2
 804926a:	63b9      	str	r1, [r7, #56]	; 0x38
 804926c:	415b      	adcs	r3, r3
 804926e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8049270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8049274:	4641      	mov	r1, r8
 8049276:	1851      	adds	r1, r2, r1
 8049278:	6339      	str	r1, [r7, #48]	; 0x30
 804927a:	4649      	mov	r1, r9
 804927c:	414b      	adcs	r3, r1
 804927e:	637b      	str	r3, [r7, #52]	; 0x34
 8049280:	f04f 0200 	mov.w	r2, #0
 8049284:	f04f 0300 	mov.w	r3, #0
 8049288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 804928c:	4659      	mov	r1, fp
 804928e:	00cb      	lsls	r3, r1, #3
 8049290:	4651      	mov	r1, sl
 8049292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8049296:	4651      	mov	r1, sl
 8049298:	00ca      	lsls	r2, r1, #3
 804929a:	4610      	mov	r0, r2
 804929c:	4619      	mov	r1, r3
 804929e:	4603      	mov	r3, r0
 80492a0:	4642      	mov	r2, r8
 80492a2:	189b      	adds	r3, r3, r2
 80492a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80492a8:	464b      	mov	r3, r9
 80492aa:	460a      	mov	r2, r1
 80492ac:	eb42 0303 	adc.w	r3, r2, r3
 80492b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80492b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80492b8:	685b      	ldr	r3, [r3, #4]
 80492ba:	2200      	movs	r2, #0
 80492bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80492c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80492c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80492c8:	460b      	mov	r3, r1
 80492ca:	18db      	adds	r3, r3, r3
 80492cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80492ce:	4613      	mov	r3, r2
 80492d0:	eb42 0303 	adc.w	r3, r2, r3
 80492d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80492d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80492da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80492de:	f7f6 ffd7 	bl	8040290 <__aeabi_uldivmod>
 80492e2:	4602      	mov	r2, r0
 80492e4:	460b      	mov	r3, r1
 80492e6:	4b0d      	ldr	r3, [pc, #52]	; (804931c <UART_SetConfig+0x2d4>)
 80492e8:	fba3 1302 	umull	r1, r3, r3, r2
 80492ec:	095b      	lsrs	r3, r3, #5
 80492ee:	2164      	movs	r1, #100	; 0x64
 80492f0:	fb01 f303 	mul.w	r3, r1, r3
 80492f4:	1ad3      	subs	r3, r2, r3
 80492f6:	00db      	lsls	r3, r3, #3
 80492f8:	3332      	adds	r3, #50	; 0x32
 80492fa:	4a08      	ldr	r2, [pc, #32]	; (804931c <UART_SetConfig+0x2d4>)
 80492fc:	fba2 2303 	umull	r2, r3, r2, r3
 8049300:	095b      	lsrs	r3, r3, #5
 8049302:	f003 0207 	and.w	r2, r3, #7
 8049306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 804930a:	681b      	ldr	r3, [r3, #0]
 804930c:	4422      	add	r2, r4
 804930e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8049310:	e105      	b.n	804951e <UART_SetConfig+0x4d6>
 8049312:	bf00      	nop
 8049314:	40011000 	.word	0x40011000
 8049318:	40011400 	.word	0x40011400
 804931c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8049320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8049324:	2200      	movs	r2, #0
 8049326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 804932a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 804932e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8049332:	4642      	mov	r2, r8
 8049334:	464b      	mov	r3, r9
 8049336:	1891      	adds	r1, r2, r2
 8049338:	6239      	str	r1, [r7, #32]
 804933a:	415b      	adcs	r3, r3
 804933c:	627b      	str	r3, [r7, #36]	; 0x24
 804933e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8049342:	4641      	mov	r1, r8
 8049344:	1854      	adds	r4, r2, r1
 8049346:	4649      	mov	r1, r9
 8049348:	eb43 0501 	adc.w	r5, r3, r1
 804934c:	f04f 0200 	mov.w	r2, #0
 8049350:	f04f 0300 	mov.w	r3, #0
 8049354:	00eb      	lsls	r3, r5, #3
 8049356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 804935a:	00e2      	lsls	r2, r4, #3
 804935c:	4614      	mov	r4, r2
 804935e:	461d      	mov	r5, r3
 8049360:	4643      	mov	r3, r8
 8049362:	18e3      	adds	r3, r4, r3
 8049364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8049368:	464b      	mov	r3, r9
 804936a:	eb45 0303 	adc.w	r3, r5, r3
 804936e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8049372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049376:	685b      	ldr	r3, [r3, #4]
 8049378:	2200      	movs	r2, #0
 804937a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 804937e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8049382:	f04f 0200 	mov.w	r2, #0
 8049386:	f04f 0300 	mov.w	r3, #0
 804938a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 804938e:	4629      	mov	r1, r5
 8049390:	008b      	lsls	r3, r1, #2
 8049392:	4621      	mov	r1, r4
 8049394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049398:	4621      	mov	r1, r4
 804939a:	008a      	lsls	r2, r1, #2
 804939c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80493a0:	f7f6 ff76 	bl	8040290 <__aeabi_uldivmod>
 80493a4:	4602      	mov	r2, r0
 80493a6:	460b      	mov	r3, r1
 80493a8:	4b60      	ldr	r3, [pc, #384]	; (804952c <UART_SetConfig+0x4e4>)
 80493aa:	fba3 2302 	umull	r2, r3, r3, r2
 80493ae:	095b      	lsrs	r3, r3, #5
 80493b0:	011c      	lsls	r4, r3, #4
 80493b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80493b6:	2200      	movs	r2, #0
 80493b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80493bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80493c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80493c4:	4642      	mov	r2, r8
 80493c6:	464b      	mov	r3, r9
 80493c8:	1891      	adds	r1, r2, r2
 80493ca:	61b9      	str	r1, [r7, #24]
 80493cc:	415b      	adcs	r3, r3
 80493ce:	61fb      	str	r3, [r7, #28]
 80493d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80493d4:	4641      	mov	r1, r8
 80493d6:	1851      	adds	r1, r2, r1
 80493d8:	6139      	str	r1, [r7, #16]
 80493da:	4649      	mov	r1, r9
 80493dc:	414b      	adcs	r3, r1
 80493de:	617b      	str	r3, [r7, #20]
 80493e0:	f04f 0200 	mov.w	r2, #0
 80493e4:	f04f 0300 	mov.w	r3, #0
 80493e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80493ec:	4659      	mov	r1, fp
 80493ee:	00cb      	lsls	r3, r1, #3
 80493f0:	4651      	mov	r1, sl
 80493f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80493f6:	4651      	mov	r1, sl
 80493f8:	00ca      	lsls	r2, r1, #3
 80493fa:	4610      	mov	r0, r2
 80493fc:	4619      	mov	r1, r3
 80493fe:	4603      	mov	r3, r0
 8049400:	4642      	mov	r2, r8
 8049402:	189b      	adds	r3, r3, r2
 8049404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8049408:	464b      	mov	r3, r9
 804940a:	460a      	mov	r2, r1
 804940c:	eb42 0303 	adc.w	r3, r2, r3
 8049410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8049414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049418:	685b      	ldr	r3, [r3, #4]
 804941a:	2200      	movs	r2, #0
 804941c:	67bb      	str	r3, [r7, #120]	; 0x78
 804941e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8049420:	f04f 0200 	mov.w	r2, #0
 8049424:	f04f 0300 	mov.w	r3, #0
 8049428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 804942c:	4649      	mov	r1, r9
 804942e:	008b      	lsls	r3, r1, #2
 8049430:	4641      	mov	r1, r8
 8049432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8049436:	4641      	mov	r1, r8
 8049438:	008a      	lsls	r2, r1, #2
 804943a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 804943e:	f7f6 ff27 	bl	8040290 <__aeabi_uldivmod>
 8049442:	4602      	mov	r2, r0
 8049444:	460b      	mov	r3, r1
 8049446:	4b39      	ldr	r3, [pc, #228]	; (804952c <UART_SetConfig+0x4e4>)
 8049448:	fba3 1302 	umull	r1, r3, r3, r2
 804944c:	095b      	lsrs	r3, r3, #5
 804944e:	2164      	movs	r1, #100	; 0x64
 8049450:	fb01 f303 	mul.w	r3, r1, r3
 8049454:	1ad3      	subs	r3, r2, r3
 8049456:	011b      	lsls	r3, r3, #4
 8049458:	3332      	adds	r3, #50	; 0x32
 804945a:	4a34      	ldr	r2, [pc, #208]	; (804952c <UART_SetConfig+0x4e4>)
 804945c:	fba2 2303 	umull	r2, r3, r2, r3
 8049460:	095b      	lsrs	r3, r3, #5
 8049462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8049466:	441c      	add	r4, r3
 8049468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 804946c:	2200      	movs	r2, #0
 804946e:	673b      	str	r3, [r7, #112]	; 0x70
 8049470:	677a      	str	r2, [r7, #116]	; 0x74
 8049472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8049476:	4642      	mov	r2, r8
 8049478:	464b      	mov	r3, r9
 804947a:	1891      	adds	r1, r2, r2
 804947c:	60b9      	str	r1, [r7, #8]
 804947e:	415b      	adcs	r3, r3
 8049480:	60fb      	str	r3, [r7, #12]
 8049482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8049486:	4641      	mov	r1, r8
 8049488:	1851      	adds	r1, r2, r1
 804948a:	6039      	str	r1, [r7, #0]
 804948c:	4649      	mov	r1, r9
 804948e:	414b      	adcs	r3, r1
 8049490:	607b      	str	r3, [r7, #4]
 8049492:	f04f 0200 	mov.w	r2, #0
 8049496:	f04f 0300 	mov.w	r3, #0
 804949a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 804949e:	4659      	mov	r1, fp
 80494a0:	00cb      	lsls	r3, r1, #3
 80494a2:	4651      	mov	r1, sl
 80494a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80494a8:	4651      	mov	r1, sl
 80494aa:	00ca      	lsls	r2, r1, #3
 80494ac:	4610      	mov	r0, r2
 80494ae:	4619      	mov	r1, r3
 80494b0:	4603      	mov	r3, r0
 80494b2:	4642      	mov	r2, r8
 80494b4:	189b      	adds	r3, r3, r2
 80494b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80494b8:	464b      	mov	r3, r9
 80494ba:	460a      	mov	r2, r1
 80494bc:	eb42 0303 	adc.w	r3, r2, r3
 80494c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80494c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80494c6:	685b      	ldr	r3, [r3, #4]
 80494c8:	2200      	movs	r2, #0
 80494ca:	663b      	str	r3, [r7, #96]	; 0x60
 80494cc:	667a      	str	r2, [r7, #100]	; 0x64
 80494ce:	f04f 0200 	mov.w	r2, #0
 80494d2:	f04f 0300 	mov.w	r3, #0
 80494d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80494da:	4649      	mov	r1, r9
 80494dc:	008b      	lsls	r3, r1, #2
 80494de:	4641      	mov	r1, r8
 80494e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80494e4:	4641      	mov	r1, r8
 80494e6:	008a      	lsls	r2, r1, #2
 80494e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80494ec:	f7f6 fed0 	bl	8040290 <__aeabi_uldivmod>
 80494f0:	4602      	mov	r2, r0
 80494f2:	460b      	mov	r3, r1
 80494f4:	4b0d      	ldr	r3, [pc, #52]	; (804952c <UART_SetConfig+0x4e4>)
 80494f6:	fba3 1302 	umull	r1, r3, r3, r2
 80494fa:	095b      	lsrs	r3, r3, #5
 80494fc:	2164      	movs	r1, #100	; 0x64
 80494fe:	fb01 f303 	mul.w	r3, r1, r3
 8049502:	1ad3      	subs	r3, r2, r3
 8049504:	011b      	lsls	r3, r3, #4
 8049506:	3332      	adds	r3, #50	; 0x32
 8049508:	4a08      	ldr	r2, [pc, #32]	; (804952c <UART_SetConfig+0x4e4>)
 804950a:	fba2 2303 	umull	r2, r3, r2, r3
 804950e:	095b      	lsrs	r3, r3, #5
 8049510:	f003 020f 	and.w	r2, r3, #15
 8049514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8049518:	681b      	ldr	r3, [r3, #0]
 804951a:	4422      	add	r2, r4
 804951c:	609a      	str	r2, [r3, #8]
}
 804951e:	bf00      	nop
 8049520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8049524:	46bd      	mov	sp, r7
 8049526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804952a:	bf00      	nop
 804952c:	51eb851f 	.word	0x51eb851f

08049530 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8049530:	b480      	push	{r7}
 8049532:	b083      	sub	sp, #12
 8049534:	af00      	add	r7, sp, #0
 8049536:	6078      	str	r0, [r7, #4]
 8049538:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 804953a:	683b      	ldr	r3, [r7, #0]
 804953c:	681b      	ldr	r3, [r3, #0]
 804953e:	2b00      	cmp	r3, #0
 8049540:	d123      	bne.n	804958a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8049542:	687b      	ldr	r3, [r7, #4]
 8049544:	681b      	ldr	r3, [r3, #0]
 8049546:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 804954a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804954e:	683a      	ldr	r2, [r7, #0]
 8049550:	6851      	ldr	r1, [r2, #4]
 8049552:	683a      	ldr	r2, [r7, #0]
 8049554:	6892      	ldr	r2, [r2, #8]
 8049556:	4311      	orrs	r1, r2
 8049558:	683a      	ldr	r2, [r7, #0]
 804955a:	68d2      	ldr	r2, [r2, #12]
 804955c:	4311      	orrs	r1, r2
 804955e:	683a      	ldr	r2, [r7, #0]
 8049560:	6912      	ldr	r2, [r2, #16]
 8049562:	4311      	orrs	r1, r2
 8049564:	683a      	ldr	r2, [r7, #0]
 8049566:	6952      	ldr	r2, [r2, #20]
 8049568:	4311      	orrs	r1, r2
 804956a:	683a      	ldr	r2, [r7, #0]
 804956c:	6992      	ldr	r2, [r2, #24]
 804956e:	4311      	orrs	r1, r2
 8049570:	683a      	ldr	r2, [r7, #0]
 8049572:	69d2      	ldr	r2, [r2, #28]
 8049574:	4311      	orrs	r1, r2
 8049576:	683a      	ldr	r2, [r7, #0]
 8049578:	6a12      	ldr	r2, [r2, #32]
 804957a:	4311      	orrs	r1, r2
 804957c:	683a      	ldr	r2, [r7, #0]
 804957e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8049580:	430a      	orrs	r2, r1
 8049582:	431a      	orrs	r2, r3
 8049584:	687b      	ldr	r3, [r7, #4]
 8049586:	601a      	str	r2, [r3, #0]
 8049588:	e028      	b.n	80495dc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 804958a:	687b      	ldr	r3, [r7, #4]
 804958c:	681b      	ldr	r3, [r3, #0]
 804958e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8049592:	683b      	ldr	r3, [r7, #0]
 8049594:	69d9      	ldr	r1, [r3, #28]
 8049596:	683b      	ldr	r3, [r7, #0]
 8049598:	6a1b      	ldr	r3, [r3, #32]
 804959a:	4319      	orrs	r1, r3
 804959c:	683b      	ldr	r3, [r7, #0]
 804959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80495a0:	430b      	orrs	r3, r1
 80495a2:	431a      	orrs	r2, r3
 80495a4:	687b      	ldr	r3, [r7, #4]
 80495a6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80495a8:	687b      	ldr	r3, [r7, #4]
 80495aa:	685b      	ldr	r3, [r3, #4]
 80495ac:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80495b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80495b4:	683a      	ldr	r2, [r7, #0]
 80495b6:	6851      	ldr	r1, [r2, #4]
 80495b8:	683a      	ldr	r2, [r7, #0]
 80495ba:	6892      	ldr	r2, [r2, #8]
 80495bc:	4311      	orrs	r1, r2
 80495be:	683a      	ldr	r2, [r7, #0]
 80495c0:	68d2      	ldr	r2, [r2, #12]
 80495c2:	4311      	orrs	r1, r2
 80495c4:	683a      	ldr	r2, [r7, #0]
 80495c6:	6912      	ldr	r2, [r2, #16]
 80495c8:	4311      	orrs	r1, r2
 80495ca:	683a      	ldr	r2, [r7, #0]
 80495cc:	6952      	ldr	r2, [r2, #20]
 80495ce:	4311      	orrs	r1, r2
 80495d0:	683a      	ldr	r2, [r7, #0]
 80495d2:	6992      	ldr	r2, [r2, #24]
 80495d4:	430a      	orrs	r2, r1
 80495d6:	431a      	orrs	r2, r3
 80495d8:	687b      	ldr	r3, [r7, #4]
 80495da:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80495dc:	2300      	movs	r3, #0
}
 80495de:	4618      	mov	r0, r3
 80495e0:	370c      	adds	r7, #12
 80495e2:	46bd      	mov	sp, r7
 80495e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80495e8:	4770      	bx	lr

080495ea <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80495ea:	b480      	push	{r7}
 80495ec:	b085      	sub	sp, #20
 80495ee:	af00      	add	r7, sp, #0
 80495f0:	60f8      	str	r0, [r7, #12]
 80495f2:	60b9      	str	r1, [r7, #8]
 80495f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80495f6:	687b      	ldr	r3, [r7, #4]
 80495f8:	2b00      	cmp	r3, #0
 80495fa:	d128      	bne.n	804964e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80495fc:	68fb      	ldr	r3, [r7, #12]
 80495fe:	689b      	ldr	r3, [r3, #8]
 8049600:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8049604:	68bb      	ldr	r3, [r7, #8]
 8049606:	681b      	ldr	r3, [r3, #0]
 8049608:	1e59      	subs	r1, r3, #1
 804960a:	68bb      	ldr	r3, [r7, #8]
 804960c:	685b      	ldr	r3, [r3, #4]
 804960e:	3b01      	subs	r3, #1
 8049610:	011b      	lsls	r3, r3, #4
 8049612:	4319      	orrs	r1, r3
 8049614:	68bb      	ldr	r3, [r7, #8]
 8049616:	689b      	ldr	r3, [r3, #8]
 8049618:	3b01      	subs	r3, #1
 804961a:	021b      	lsls	r3, r3, #8
 804961c:	4319      	orrs	r1, r3
 804961e:	68bb      	ldr	r3, [r7, #8]
 8049620:	68db      	ldr	r3, [r3, #12]
 8049622:	3b01      	subs	r3, #1
 8049624:	031b      	lsls	r3, r3, #12
 8049626:	4319      	orrs	r1, r3
 8049628:	68bb      	ldr	r3, [r7, #8]
 804962a:	691b      	ldr	r3, [r3, #16]
 804962c:	3b01      	subs	r3, #1
 804962e:	041b      	lsls	r3, r3, #16
 8049630:	4319      	orrs	r1, r3
 8049632:	68bb      	ldr	r3, [r7, #8]
 8049634:	695b      	ldr	r3, [r3, #20]
 8049636:	3b01      	subs	r3, #1
 8049638:	051b      	lsls	r3, r3, #20
 804963a:	4319      	orrs	r1, r3
 804963c:	68bb      	ldr	r3, [r7, #8]
 804963e:	699b      	ldr	r3, [r3, #24]
 8049640:	3b01      	subs	r3, #1
 8049642:	061b      	lsls	r3, r3, #24
 8049644:	430b      	orrs	r3, r1
 8049646:	431a      	orrs	r2, r3
 8049648:	68fb      	ldr	r3, [r7, #12]
 804964a:	609a      	str	r2, [r3, #8]
 804964c:	e02f      	b.n	80496ae <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 804964e:	68fb      	ldr	r3, [r7, #12]
 8049650:	689b      	ldr	r3, [r3, #8]
 8049652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8049656:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 804965a:	68ba      	ldr	r2, [r7, #8]
 804965c:	68d2      	ldr	r2, [r2, #12]
 804965e:	3a01      	subs	r2, #1
 8049660:	0311      	lsls	r1, r2, #12
 8049662:	68ba      	ldr	r2, [r7, #8]
 8049664:	6952      	ldr	r2, [r2, #20]
 8049666:	3a01      	subs	r2, #1
 8049668:	0512      	lsls	r2, r2, #20
 804966a:	430a      	orrs	r2, r1
 804966c:	431a      	orrs	r2, r3
 804966e:	68fb      	ldr	r3, [r7, #12]
 8049670:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8049672:	68fb      	ldr	r3, [r7, #12]
 8049674:	68db      	ldr	r3, [r3, #12]
 8049676:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 804967a:	68bb      	ldr	r3, [r7, #8]
 804967c:	681b      	ldr	r3, [r3, #0]
 804967e:	1e59      	subs	r1, r3, #1
 8049680:	68bb      	ldr	r3, [r7, #8]
 8049682:	685b      	ldr	r3, [r3, #4]
 8049684:	3b01      	subs	r3, #1
 8049686:	011b      	lsls	r3, r3, #4
 8049688:	4319      	orrs	r1, r3
 804968a:	68bb      	ldr	r3, [r7, #8]
 804968c:	689b      	ldr	r3, [r3, #8]
 804968e:	3b01      	subs	r3, #1
 8049690:	021b      	lsls	r3, r3, #8
 8049692:	4319      	orrs	r1, r3
 8049694:	68bb      	ldr	r3, [r7, #8]
 8049696:	691b      	ldr	r3, [r3, #16]
 8049698:	3b01      	subs	r3, #1
 804969a:	041b      	lsls	r3, r3, #16
 804969c:	4319      	orrs	r1, r3
 804969e:	68bb      	ldr	r3, [r7, #8]
 80496a0:	699b      	ldr	r3, [r3, #24]
 80496a2:	3b01      	subs	r3, #1
 80496a4:	061b      	lsls	r3, r3, #24
 80496a6:	430b      	orrs	r3, r1
 80496a8:	431a      	orrs	r2, r3
 80496aa:	68fb      	ldr	r3, [r7, #12]
 80496ac:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80496ae:	2300      	movs	r3, #0
}
 80496b0:	4618      	mov	r0, r3
 80496b2:	3714      	adds	r7, #20
 80496b4:	46bd      	mov	sp, r7
 80496b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80496ba:	4770      	bx	lr

080496bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80496bc:	b580      	push	{r7, lr}
 80496be:	b086      	sub	sp, #24
 80496c0:	af00      	add	r7, sp, #0
 80496c2:	60f8      	str	r0, [r7, #12]
 80496c4:	60b9      	str	r1, [r7, #8]
 80496c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80496c8:	2300      	movs	r3, #0
 80496ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80496cc:	68fb      	ldr	r3, [r7, #12]
 80496ce:	691b      	ldr	r3, [r3, #16]
 80496d0:	0d9b      	lsrs	r3, r3, #22
 80496d2:	059b      	lsls	r3, r3, #22
 80496d4:	68ba      	ldr	r2, [r7, #8]
 80496d6:	6811      	ldr	r1, [r2, #0]
 80496d8:	68ba      	ldr	r2, [r7, #8]
 80496da:	6852      	ldr	r2, [r2, #4]
 80496dc:	4311      	orrs	r1, r2
 80496de:	68ba      	ldr	r2, [r7, #8]
 80496e0:	6892      	ldr	r2, [r2, #8]
 80496e2:	3a01      	subs	r2, #1
 80496e4:	0152      	lsls	r2, r2, #5
 80496e6:	4311      	orrs	r1, r2
 80496e8:	68ba      	ldr	r2, [r7, #8]
 80496ea:	68d2      	ldr	r2, [r2, #12]
 80496ec:	0252      	lsls	r2, r2, #9
 80496ee:	430a      	orrs	r2, r1
 80496f0:	431a      	orrs	r2, r3
 80496f2:	68fb      	ldr	r3, [r7, #12]
 80496f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80496f6:	f7f9 fdef 	bl	80432d8 <HAL_GetTick>
 80496fa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80496fc:	e010      	b.n	8049720 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80496fe:	687b      	ldr	r3, [r7, #4]
 8049700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049704:	d00c      	beq.n	8049720 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8049706:	687b      	ldr	r3, [r7, #4]
 8049708:	2b00      	cmp	r3, #0
 804970a:	d007      	beq.n	804971c <FMC_SDRAM_SendCommand+0x60>
 804970c:	f7f9 fde4 	bl	80432d8 <HAL_GetTick>
 8049710:	4602      	mov	r2, r0
 8049712:	697b      	ldr	r3, [r7, #20]
 8049714:	1ad3      	subs	r3, r2, r3
 8049716:	687a      	ldr	r2, [r7, #4]
 8049718:	429a      	cmp	r2, r3
 804971a:	d201      	bcs.n	8049720 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 804971c:	2303      	movs	r3, #3
 804971e:	e006      	b.n	804972e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8049720:	68fb      	ldr	r3, [r7, #12]
 8049722:	699b      	ldr	r3, [r3, #24]
 8049724:	f003 0320 	and.w	r3, r3, #32
 8049728:	2b20      	cmp	r3, #32
 804972a:	d0e8      	beq.n	80496fe <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 804972c:	2300      	movs	r3, #0
}
 804972e:	4618      	mov	r0, r3
 8049730:	3718      	adds	r7, #24
 8049732:	46bd      	mov	sp, r7
 8049734:	bd80      	pop	{r7, pc}

08049736 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8049736:	b480      	push	{r7}
 8049738:	b083      	sub	sp, #12
 804973a:	af00      	add	r7, sp, #0
 804973c:	6078      	str	r0, [r7, #4]
 804973e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8049740:	687b      	ldr	r3, [r7, #4]
 8049742:	695b      	ldr	r3, [r3, #20]
 8049744:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8049748:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 804974c:	683a      	ldr	r2, [r7, #0]
 804974e:	0052      	lsls	r2, r2, #1
 8049750:	431a      	orrs	r2, r3
 8049752:	687b      	ldr	r3, [r7, #4]
 8049754:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8049756:	2300      	movs	r3, #0
}
 8049758:	4618      	mov	r0, r3
 804975a:	370c      	adds	r7, #12
 804975c:	46bd      	mov	sp, r7
 804975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049762:	4770      	bx	lr

08049764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049764:	b084      	sub	sp, #16
 8049766:	b580      	push	{r7, lr}
 8049768:	b084      	sub	sp, #16
 804976a:	af00      	add	r7, sp, #0
 804976c:	6078      	str	r0, [r7, #4]
 804976e:	f107 001c 	add.w	r0, r7, #28
 8049772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8049776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049778:	2b01      	cmp	r3, #1
 804977a:	d122      	bne.n	80497c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 804977c:	687b      	ldr	r3, [r7, #4]
 804977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049780:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8049784:	687b      	ldr	r3, [r7, #4]
 8049786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8049788:	687b      	ldr	r3, [r7, #4]
 804978a:	68db      	ldr	r3, [r3, #12]
 804978c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8049790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049794:	687a      	ldr	r2, [r7, #4]
 8049796:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8049798:	687b      	ldr	r3, [r7, #4]
 804979a:	68db      	ldr	r3, [r3, #12]
 804979c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80497a0:	687b      	ldr	r3, [r7, #4]
 80497a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80497a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80497a6:	2b01      	cmp	r3, #1
 80497a8:	d105      	bne.n	80497b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80497aa:	687b      	ldr	r3, [r7, #4]
 80497ac:	68db      	ldr	r3, [r3, #12]
 80497ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80497b2:	687b      	ldr	r3, [r7, #4]
 80497b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80497b6:	6878      	ldr	r0, [r7, #4]
 80497b8:	f000 f9c0 	bl	8049b3c <USB_CoreReset>
 80497bc:	4603      	mov	r3, r0
 80497be:	73fb      	strb	r3, [r7, #15]
 80497c0:	e01a      	b.n	80497f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80497c2:	687b      	ldr	r3, [r7, #4]
 80497c4:	68db      	ldr	r3, [r3, #12]
 80497c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80497ca:	687b      	ldr	r3, [r7, #4]
 80497cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80497ce:	6878      	ldr	r0, [r7, #4]
 80497d0:	f000 f9b4 	bl	8049b3c <USB_CoreReset>
 80497d4:	4603      	mov	r3, r0
 80497d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80497d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80497da:	2b00      	cmp	r3, #0
 80497dc:	d106      	bne.n	80497ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80497de:	687b      	ldr	r3, [r7, #4]
 80497e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80497e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80497e6:	687b      	ldr	r3, [r7, #4]
 80497e8:	639a      	str	r2, [r3, #56]	; 0x38
 80497ea:	e005      	b.n	80497f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80497ec:	687b      	ldr	r3, [r7, #4]
 80497ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80497f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80497f4:	687b      	ldr	r3, [r7, #4]
 80497f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80497f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80497fa:	2b01      	cmp	r3, #1
 80497fc:	d10b      	bne.n	8049816 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80497fe:	687b      	ldr	r3, [r7, #4]
 8049800:	689b      	ldr	r3, [r3, #8]
 8049802:	f043 0206 	orr.w	r2, r3, #6
 8049806:	687b      	ldr	r3, [r7, #4]
 8049808:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 804980a:	687b      	ldr	r3, [r7, #4]
 804980c:	689b      	ldr	r3, [r3, #8]
 804980e:	f043 0220 	orr.w	r2, r3, #32
 8049812:	687b      	ldr	r3, [r7, #4]
 8049814:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8049816:	7bfb      	ldrb	r3, [r7, #15]
}
 8049818:	4618      	mov	r0, r3
 804981a:	3710      	adds	r7, #16
 804981c:	46bd      	mov	sp, r7
 804981e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8049822:	b004      	add	sp, #16
 8049824:	4770      	bx	lr

08049826 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049826:	b480      	push	{r7}
 8049828:	b083      	sub	sp, #12
 804982a:	af00      	add	r7, sp, #0
 804982c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 804982e:	687b      	ldr	r3, [r7, #4]
 8049830:	689b      	ldr	r3, [r3, #8]
 8049832:	f043 0201 	orr.w	r2, r3, #1
 8049836:	687b      	ldr	r3, [r7, #4]
 8049838:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804983a:	2300      	movs	r3, #0
}
 804983c:	4618      	mov	r0, r3
 804983e:	370c      	adds	r7, #12
 8049840:	46bd      	mov	sp, r7
 8049842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049846:	4770      	bx	lr

08049848 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8049848:	b480      	push	{r7}
 804984a:	b083      	sub	sp, #12
 804984c:	af00      	add	r7, sp, #0
 804984e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8049850:	687b      	ldr	r3, [r7, #4]
 8049852:	689b      	ldr	r3, [r3, #8]
 8049854:	f023 0201 	bic.w	r2, r3, #1
 8049858:	687b      	ldr	r3, [r7, #4]
 804985a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 804985c:	2300      	movs	r3, #0
}
 804985e:	4618      	mov	r0, r3
 8049860:	370c      	adds	r7, #12
 8049862:	46bd      	mov	sp, r7
 8049864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049868:	4770      	bx	lr

0804986a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 804986a:	b580      	push	{r7, lr}
 804986c:	b084      	sub	sp, #16
 804986e:	af00      	add	r7, sp, #0
 8049870:	6078      	str	r0, [r7, #4]
 8049872:	460b      	mov	r3, r1
 8049874:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8049876:	2300      	movs	r3, #0
 8049878:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 804987a:	687b      	ldr	r3, [r7, #4]
 804987c:	68db      	ldr	r3, [r3, #12]
 804987e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8049882:	687b      	ldr	r3, [r7, #4]
 8049884:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8049886:	78fb      	ldrb	r3, [r7, #3]
 8049888:	2b01      	cmp	r3, #1
 804988a:	d115      	bne.n	80498b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 804988c:	687b      	ldr	r3, [r7, #4]
 804988e:	68db      	ldr	r3, [r3, #12]
 8049890:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8049894:	687b      	ldr	r3, [r7, #4]
 8049896:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8049898:	2001      	movs	r0, #1
 804989a:	f7f9 fd29 	bl	80432f0 <HAL_Delay>
      ms++;
 804989e:	68fb      	ldr	r3, [r7, #12]
 80498a0:	3301      	adds	r3, #1
 80498a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80498a4:	6878      	ldr	r0, [r7, #4]
 80498a6:	f000 f93a 	bl	8049b1e <USB_GetMode>
 80498aa:	4603      	mov	r3, r0
 80498ac:	2b01      	cmp	r3, #1
 80498ae:	d01e      	beq.n	80498ee <USB_SetCurrentMode+0x84>
 80498b0:	68fb      	ldr	r3, [r7, #12]
 80498b2:	2b31      	cmp	r3, #49	; 0x31
 80498b4:	d9f0      	bls.n	8049898 <USB_SetCurrentMode+0x2e>
 80498b6:	e01a      	b.n	80498ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80498b8:	78fb      	ldrb	r3, [r7, #3]
 80498ba:	2b00      	cmp	r3, #0
 80498bc:	d115      	bne.n	80498ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80498be:	687b      	ldr	r3, [r7, #4]
 80498c0:	68db      	ldr	r3, [r3, #12]
 80498c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80498c6:	687b      	ldr	r3, [r7, #4]
 80498c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80498ca:	2001      	movs	r0, #1
 80498cc:	f7f9 fd10 	bl	80432f0 <HAL_Delay>
      ms++;
 80498d0:	68fb      	ldr	r3, [r7, #12]
 80498d2:	3301      	adds	r3, #1
 80498d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80498d6:	6878      	ldr	r0, [r7, #4]
 80498d8:	f000 f921 	bl	8049b1e <USB_GetMode>
 80498dc:	4603      	mov	r3, r0
 80498de:	2b00      	cmp	r3, #0
 80498e0:	d005      	beq.n	80498ee <USB_SetCurrentMode+0x84>
 80498e2:	68fb      	ldr	r3, [r7, #12]
 80498e4:	2b31      	cmp	r3, #49	; 0x31
 80498e6:	d9f0      	bls.n	80498ca <USB_SetCurrentMode+0x60>
 80498e8:	e001      	b.n	80498ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80498ea:	2301      	movs	r3, #1
 80498ec:	e005      	b.n	80498fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80498ee:	68fb      	ldr	r3, [r7, #12]
 80498f0:	2b32      	cmp	r3, #50	; 0x32
 80498f2:	d101      	bne.n	80498f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80498f4:	2301      	movs	r3, #1
 80498f6:	e000      	b.n	80498fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80498f8:	2300      	movs	r3, #0
}
 80498fa:	4618      	mov	r0, r3
 80498fc:	3710      	adds	r7, #16
 80498fe:	46bd      	mov	sp, r7
 8049900:	bd80      	pop	{r7, pc}
	...

08049904 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8049904:	b480      	push	{r7}
 8049906:	b085      	sub	sp, #20
 8049908:	af00      	add	r7, sp, #0
 804990a:	6078      	str	r0, [r7, #4]
 804990c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 804990e:	2300      	movs	r3, #0
 8049910:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049912:	68fb      	ldr	r3, [r7, #12]
 8049914:	3301      	adds	r3, #1
 8049916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049918:	68fb      	ldr	r3, [r7, #12]
 804991a:	4a13      	ldr	r2, [pc, #76]	; (8049968 <USB_FlushTxFifo+0x64>)
 804991c:	4293      	cmp	r3, r2
 804991e:	d901      	bls.n	8049924 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8049920:	2303      	movs	r3, #3
 8049922:	e01b      	b.n	804995c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049924:	687b      	ldr	r3, [r7, #4]
 8049926:	691b      	ldr	r3, [r3, #16]
 8049928:	2b00      	cmp	r3, #0
 804992a:	daf2      	bge.n	8049912 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 804992c:	2300      	movs	r3, #0
 804992e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8049930:	683b      	ldr	r3, [r7, #0]
 8049932:	019b      	lsls	r3, r3, #6
 8049934:	f043 0220 	orr.w	r2, r3, #32
 8049938:	687b      	ldr	r3, [r7, #4]
 804993a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804993c:	68fb      	ldr	r3, [r7, #12]
 804993e:	3301      	adds	r3, #1
 8049940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049942:	68fb      	ldr	r3, [r7, #12]
 8049944:	4a08      	ldr	r2, [pc, #32]	; (8049968 <USB_FlushTxFifo+0x64>)
 8049946:	4293      	cmp	r3, r2
 8049948:	d901      	bls.n	804994e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 804994a:	2303      	movs	r3, #3
 804994c:	e006      	b.n	804995c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 804994e:	687b      	ldr	r3, [r7, #4]
 8049950:	691b      	ldr	r3, [r3, #16]
 8049952:	f003 0320 	and.w	r3, r3, #32
 8049956:	2b20      	cmp	r3, #32
 8049958:	d0f0      	beq.n	804993c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 804995a:	2300      	movs	r3, #0
}
 804995c:	4618      	mov	r0, r3
 804995e:	3714      	adds	r7, #20
 8049960:	46bd      	mov	sp, r7
 8049962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049966:	4770      	bx	lr
 8049968:	00030d40 	.word	0x00030d40

0804996c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 804996c:	b480      	push	{r7}
 804996e:	b085      	sub	sp, #20
 8049970:	af00      	add	r7, sp, #0
 8049972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049974:	2300      	movs	r3, #0
 8049976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049978:	68fb      	ldr	r3, [r7, #12]
 804997a:	3301      	adds	r3, #1
 804997c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 804997e:	68fb      	ldr	r3, [r7, #12]
 8049980:	4a11      	ldr	r2, [pc, #68]	; (80499c8 <USB_FlushRxFifo+0x5c>)
 8049982:	4293      	cmp	r3, r2
 8049984:	d901      	bls.n	804998a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8049986:	2303      	movs	r3, #3
 8049988:	e018      	b.n	80499bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 804998a:	687b      	ldr	r3, [r7, #4]
 804998c:	691b      	ldr	r3, [r3, #16]
 804998e:	2b00      	cmp	r3, #0
 8049990:	daf2      	bge.n	8049978 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8049992:	2300      	movs	r3, #0
 8049994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8049996:	687b      	ldr	r3, [r7, #4]
 8049998:	2210      	movs	r2, #16
 804999a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 804999c:	68fb      	ldr	r3, [r7, #12]
 804999e:	3301      	adds	r3, #1
 80499a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80499a2:	68fb      	ldr	r3, [r7, #12]
 80499a4:	4a08      	ldr	r2, [pc, #32]	; (80499c8 <USB_FlushRxFifo+0x5c>)
 80499a6:	4293      	cmp	r3, r2
 80499a8:	d901      	bls.n	80499ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80499aa:	2303      	movs	r3, #3
 80499ac:	e006      	b.n	80499bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80499ae:	687b      	ldr	r3, [r7, #4]
 80499b0:	691b      	ldr	r3, [r3, #16]
 80499b2:	f003 0310 	and.w	r3, r3, #16
 80499b6:	2b10      	cmp	r3, #16
 80499b8:	d0f0      	beq.n	804999c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80499ba:	2300      	movs	r3, #0
}
 80499bc:	4618      	mov	r0, r3
 80499be:	3714      	adds	r7, #20
 80499c0:	46bd      	mov	sp, r7
 80499c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80499c6:	4770      	bx	lr
 80499c8:	00030d40 	.word	0x00030d40

080499cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80499cc:	b480      	push	{r7}
 80499ce:	b089      	sub	sp, #36	; 0x24
 80499d0:	af00      	add	r7, sp, #0
 80499d2:	60f8      	str	r0, [r7, #12]
 80499d4:	60b9      	str	r1, [r7, #8]
 80499d6:	4611      	mov	r1, r2
 80499d8:	461a      	mov	r2, r3
 80499da:	460b      	mov	r3, r1
 80499dc:	71fb      	strb	r3, [r7, #7]
 80499de:	4613      	mov	r3, r2
 80499e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80499e2:	68fb      	ldr	r3, [r7, #12]
 80499e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80499e6:	68bb      	ldr	r3, [r7, #8]
 80499e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80499ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80499ee:	2b00      	cmp	r3, #0
 80499f0:	d123      	bne.n	8049a3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80499f2:	88bb      	ldrh	r3, [r7, #4]
 80499f4:	3303      	adds	r3, #3
 80499f6:	089b      	lsrs	r3, r3, #2
 80499f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80499fa:	2300      	movs	r3, #0
 80499fc:	61bb      	str	r3, [r7, #24]
 80499fe:	e018      	b.n	8049a32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8049a00:	79fb      	ldrb	r3, [r7, #7]
 8049a02:	031a      	lsls	r2, r3, #12
 8049a04:	697b      	ldr	r3, [r7, #20]
 8049a06:	4413      	add	r3, r2
 8049a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049a0c:	461a      	mov	r2, r3
 8049a0e:	69fb      	ldr	r3, [r7, #28]
 8049a10:	681b      	ldr	r3, [r3, #0]
 8049a12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8049a14:	69fb      	ldr	r3, [r7, #28]
 8049a16:	3301      	adds	r3, #1
 8049a18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049a1a:	69fb      	ldr	r3, [r7, #28]
 8049a1c:	3301      	adds	r3, #1
 8049a1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049a20:	69fb      	ldr	r3, [r7, #28]
 8049a22:	3301      	adds	r3, #1
 8049a24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8049a26:	69fb      	ldr	r3, [r7, #28]
 8049a28:	3301      	adds	r3, #1
 8049a2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8049a2c:	69bb      	ldr	r3, [r7, #24]
 8049a2e:	3301      	adds	r3, #1
 8049a30:	61bb      	str	r3, [r7, #24]
 8049a32:	69ba      	ldr	r2, [r7, #24]
 8049a34:	693b      	ldr	r3, [r7, #16]
 8049a36:	429a      	cmp	r2, r3
 8049a38:	d3e2      	bcc.n	8049a00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8049a3a:	2300      	movs	r3, #0
}
 8049a3c:	4618      	mov	r0, r3
 8049a3e:	3724      	adds	r7, #36	; 0x24
 8049a40:	46bd      	mov	sp, r7
 8049a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a46:	4770      	bx	lr

08049a48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8049a48:	b480      	push	{r7}
 8049a4a:	b08b      	sub	sp, #44	; 0x2c
 8049a4c:	af00      	add	r7, sp, #0
 8049a4e:	60f8      	str	r0, [r7, #12]
 8049a50:	60b9      	str	r1, [r7, #8]
 8049a52:	4613      	mov	r3, r2
 8049a54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049a56:	68fb      	ldr	r3, [r7, #12]
 8049a58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8049a5a:	68bb      	ldr	r3, [r7, #8]
 8049a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8049a5e:	88fb      	ldrh	r3, [r7, #6]
 8049a60:	089b      	lsrs	r3, r3, #2
 8049a62:	b29b      	uxth	r3, r3
 8049a64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8049a66:	88fb      	ldrh	r3, [r7, #6]
 8049a68:	f003 0303 	and.w	r3, r3, #3
 8049a6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8049a6e:	2300      	movs	r3, #0
 8049a70:	623b      	str	r3, [r7, #32]
 8049a72:	e014      	b.n	8049a9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8049a74:	69bb      	ldr	r3, [r7, #24]
 8049a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049a7a:	681a      	ldr	r2, [r3, #0]
 8049a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049a7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8049a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049a82:	3301      	adds	r3, #1
 8049a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049a88:	3301      	adds	r3, #1
 8049a8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049a8e:	3301      	adds	r3, #1
 8049a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8049a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049a94:	3301      	adds	r3, #1
 8049a96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8049a98:	6a3b      	ldr	r3, [r7, #32]
 8049a9a:	3301      	adds	r3, #1
 8049a9c:	623b      	str	r3, [r7, #32]
 8049a9e:	6a3a      	ldr	r2, [r7, #32]
 8049aa0:	697b      	ldr	r3, [r7, #20]
 8049aa2:	429a      	cmp	r2, r3
 8049aa4:	d3e6      	bcc.n	8049a74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8049aa6:	8bfb      	ldrh	r3, [r7, #30]
 8049aa8:	2b00      	cmp	r3, #0
 8049aaa:	d01e      	beq.n	8049aea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8049aac:	2300      	movs	r3, #0
 8049aae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8049ab0:	69bb      	ldr	r3, [r7, #24]
 8049ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8049ab6:	461a      	mov	r2, r3
 8049ab8:	f107 0310 	add.w	r3, r7, #16
 8049abc:	6812      	ldr	r2, [r2, #0]
 8049abe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8049ac0:	693a      	ldr	r2, [r7, #16]
 8049ac2:	6a3b      	ldr	r3, [r7, #32]
 8049ac4:	b2db      	uxtb	r3, r3
 8049ac6:	00db      	lsls	r3, r3, #3
 8049ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8049acc:	b2da      	uxtb	r2, r3
 8049ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049ad0:	701a      	strb	r2, [r3, #0]
      i++;
 8049ad2:	6a3b      	ldr	r3, [r7, #32]
 8049ad4:	3301      	adds	r3, #1
 8049ad6:	623b      	str	r3, [r7, #32]
      pDest++;
 8049ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8049ada:	3301      	adds	r3, #1
 8049adc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8049ade:	8bfb      	ldrh	r3, [r7, #30]
 8049ae0:	3b01      	subs	r3, #1
 8049ae2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8049ae4:	8bfb      	ldrh	r3, [r7, #30]
 8049ae6:	2b00      	cmp	r3, #0
 8049ae8:	d1ea      	bne.n	8049ac0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8049aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8049aec:	4618      	mov	r0, r3
 8049aee:	372c      	adds	r7, #44	; 0x2c
 8049af0:	46bd      	mov	sp, r7
 8049af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049af6:	4770      	bx	lr

08049af8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8049af8:	b480      	push	{r7}
 8049afa:	b085      	sub	sp, #20
 8049afc:	af00      	add	r7, sp, #0
 8049afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8049b00:	687b      	ldr	r3, [r7, #4]
 8049b02:	695b      	ldr	r3, [r3, #20]
 8049b04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8049b06:	687b      	ldr	r3, [r7, #4]
 8049b08:	699b      	ldr	r3, [r3, #24]
 8049b0a:	68fa      	ldr	r2, [r7, #12]
 8049b0c:	4013      	ands	r3, r2
 8049b0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8049b10:	68fb      	ldr	r3, [r7, #12]
}
 8049b12:	4618      	mov	r0, r3
 8049b14:	3714      	adds	r7, #20
 8049b16:	46bd      	mov	sp, r7
 8049b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b1c:	4770      	bx	lr

08049b1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8049b1e:	b480      	push	{r7}
 8049b20:	b083      	sub	sp, #12
 8049b22:	af00      	add	r7, sp, #0
 8049b24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8049b26:	687b      	ldr	r3, [r7, #4]
 8049b28:	695b      	ldr	r3, [r3, #20]
 8049b2a:	f003 0301 	and.w	r3, r3, #1
}
 8049b2e:	4618      	mov	r0, r3
 8049b30:	370c      	adds	r7, #12
 8049b32:	46bd      	mov	sp, r7
 8049b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b38:	4770      	bx	lr
	...

08049b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8049b3c:	b480      	push	{r7}
 8049b3e:	b085      	sub	sp, #20
 8049b40:	af00      	add	r7, sp, #0
 8049b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8049b44:	2300      	movs	r3, #0
 8049b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8049b48:	68fb      	ldr	r3, [r7, #12]
 8049b4a:	3301      	adds	r3, #1
 8049b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049b4e:	68fb      	ldr	r3, [r7, #12]
 8049b50:	4a13      	ldr	r2, [pc, #76]	; (8049ba0 <USB_CoreReset+0x64>)
 8049b52:	4293      	cmp	r3, r2
 8049b54:	d901      	bls.n	8049b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8049b56:	2303      	movs	r3, #3
 8049b58:	e01b      	b.n	8049b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8049b5a:	687b      	ldr	r3, [r7, #4]
 8049b5c:	691b      	ldr	r3, [r3, #16]
 8049b5e:	2b00      	cmp	r3, #0
 8049b60:	daf2      	bge.n	8049b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8049b62:	2300      	movs	r3, #0
 8049b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8049b66:	687b      	ldr	r3, [r7, #4]
 8049b68:	691b      	ldr	r3, [r3, #16]
 8049b6a:	f043 0201 	orr.w	r2, r3, #1
 8049b6e:	687b      	ldr	r3, [r7, #4]
 8049b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8049b72:	68fb      	ldr	r3, [r7, #12]
 8049b74:	3301      	adds	r3, #1
 8049b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8049b78:	68fb      	ldr	r3, [r7, #12]
 8049b7a:	4a09      	ldr	r2, [pc, #36]	; (8049ba0 <USB_CoreReset+0x64>)
 8049b7c:	4293      	cmp	r3, r2
 8049b7e:	d901      	bls.n	8049b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8049b80:	2303      	movs	r3, #3
 8049b82:	e006      	b.n	8049b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8049b84:	687b      	ldr	r3, [r7, #4]
 8049b86:	691b      	ldr	r3, [r3, #16]
 8049b88:	f003 0301 	and.w	r3, r3, #1
 8049b8c:	2b01      	cmp	r3, #1
 8049b8e:	d0f0      	beq.n	8049b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8049b90:	2300      	movs	r3, #0
}
 8049b92:	4618      	mov	r0, r3
 8049b94:	3714      	adds	r7, #20
 8049b96:	46bd      	mov	sp, r7
 8049b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b9c:	4770      	bx	lr
 8049b9e:	bf00      	nop
 8049ba0:	00030d40 	.word	0x00030d40

08049ba4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8049ba4:	b084      	sub	sp, #16
 8049ba6:	b580      	push	{r7, lr}
 8049ba8:	b086      	sub	sp, #24
 8049baa:	af00      	add	r7, sp, #0
 8049bac:	6078      	str	r0, [r7, #4]
 8049bae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8049bb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8049bb6:	2300      	movs	r3, #0
 8049bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049bba:	687b      	ldr	r3, [r7, #4]
 8049bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8049bbe:	68fb      	ldr	r3, [r7, #12]
 8049bc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8049bc4:	461a      	mov	r2, r3
 8049bc6:	2300      	movs	r3, #0
 8049bc8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8049bca:	687b      	ldr	r3, [r7, #4]
 8049bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049bce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8049bd2:	687b      	ldr	r3, [r7, #4]
 8049bd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8049bd6:	687b      	ldr	r3, [r7, #4]
 8049bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049bda:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8049bde:	687b      	ldr	r3, [r7, #4]
 8049be0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8049be2:	687b      	ldr	r3, [r7, #4]
 8049be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049be6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8049bea:	687b      	ldr	r3, [r7, #4]
 8049bec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049bee:	687b      	ldr	r3, [r7, #4]
 8049bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049bf6:	2b00      	cmp	r3, #0
 8049bf8:	d018      	beq.n	8049c2c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8049bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8049bfc:	2b01      	cmp	r3, #1
 8049bfe:	d10a      	bne.n	8049c16 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8049c00:	68fb      	ldr	r3, [r7, #12]
 8049c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049c06:	681b      	ldr	r3, [r3, #0]
 8049c08:	68fa      	ldr	r2, [r7, #12]
 8049c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049c0e:	f043 0304 	orr.w	r3, r3, #4
 8049c12:	6013      	str	r3, [r2, #0]
 8049c14:	e014      	b.n	8049c40 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049c16:	68fb      	ldr	r3, [r7, #12]
 8049c18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049c1c:	681b      	ldr	r3, [r3, #0]
 8049c1e:	68fa      	ldr	r2, [r7, #12]
 8049c20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049c24:	f023 0304 	bic.w	r3, r3, #4
 8049c28:	6013      	str	r3, [r2, #0]
 8049c2a:	e009      	b.n	8049c40 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8049c2c:	68fb      	ldr	r3, [r7, #12]
 8049c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049c32:	681b      	ldr	r3, [r3, #0]
 8049c34:	68fa      	ldr	r2, [r7, #12]
 8049c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049c3a:	f023 0304 	bic.w	r3, r3, #4
 8049c3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8049c40:	2110      	movs	r1, #16
 8049c42:	6878      	ldr	r0, [r7, #4]
 8049c44:	f7ff fe5e 	bl	8049904 <USB_FlushTxFifo>
 8049c48:	4603      	mov	r3, r0
 8049c4a:	2b00      	cmp	r3, #0
 8049c4c:	d001      	beq.n	8049c52 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8049c4e:	2301      	movs	r3, #1
 8049c50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8049c52:	6878      	ldr	r0, [r7, #4]
 8049c54:	f7ff fe8a 	bl	804996c <USB_FlushRxFifo>
 8049c58:	4603      	mov	r3, r0
 8049c5a:	2b00      	cmp	r3, #0
 8049c5c:	d001      	beq.n	8049c62 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8049c5e:	2301      	movs	r3, #1
 8049c60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8049c62:	2300      	movs	r3, #0
 8049c64:	613b      	str	r3, [r7, #16]
 8049c66:	e015      	b.n	8049c94 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8049c68:	693b      	ldr	r3, [r7, #16]
 8049c6a:	015a      	lsls	r2, r3, #5
 8049c6c:	68fb      	ldr	r3, [r7, #12]
 8049c6e:	4413      	add	r3, r2
 8049c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c74:	461a      	mov	r2, r3
 8049c76:	f04f 33ff 	mov.w	r3, #4294967295
 8049c7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8049c7c:	693b      	ldr	r3, [r7, #16]
 8049c7e:	015a      	lsls	r2, r3, #5
 8049c80:	68fb      	ldr	r3, [r7, #12]
 8049c82:	4413      	add	r3, r2
 8049c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049c88:	461a      	mov	r2, r3
 8049c8a:	2300      	movs	r3, #0
 8049c8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8049c8e:	693b      	ldr	r3, [r7, #16]
 8049c90:	3301      	adds	r3, #1
 8049c92:	613b      	str	r3, [r7, #16]
 8049c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049c96:	693a      	ldr	r2, [r7, #16]
 8049c98:	429a      	cmp	r2, r3
 8049c9a:	d3e5      	bcc.n	8049c68 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8049c9c:	687b      	ldr	r3, [r7, #4]
 8049c9e:	2200      	movs	r2, #0
 8049ca0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8049ca2:	687b      	ldr	r3, [r7, #4]
 8049ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8049ca8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8049caa:	687b      	ldr	r3, [r7, #4]
 8049cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049cb2:	2b00      	cmp	r3, #0
 8049cb4:	d00b      	beq.n	8049cce <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8049cb6:	687b      	ldr	r3, [r7, #4]
 8049cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8049cbc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8049cbe:	687b      	ldr	r3, [r7, #4]
 8049cc0:	4a13      	ldr	r2, [pc, #76]	; (8049d10 <USB_HostInit+0x16c>)
 8049cc2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8049cc4:	687b      	ldr	r3, [r7, #4]
 8049cc6:	4a13      	ldr	r2, [pc, #76]	; (8049d14 <USB_HostInit+0x170>)
 8049cc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8049ccc:	e009      	b.n	8049ce2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8049cce:	687b      	ldr	r3, [r7, #4]
 8049cd0:	2280      	movs	r2, #128	; 0x80
 8049cd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8049cd4:	687b      	ldr	r3, [r7, #4]
 8049cd6:	4a10      	ldr	r2, [pc, #64]	; (8049d18 <USB_HostInit+0x174>)
 8049cd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8049cda:	687b      	ldr	r3, [r7, #4]
 8049cdc:	4a0f      	ldr	r2, [pc, #60]	; (8049d1c <USB_HostInit+0x178>)
 8049cde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8049ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8049ce4:	2b00      	cmp	r3, #0
 8049ce6:	d105      	bne.n	8049cf4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8049ce8:	687b      	ldr	r3, [r7, #4]
 8049cea:	699b      	ldr	r3, [r3, #24]
 8049cec:	f043 0210 	orr.w	r2, r3, #16
 8049cf0:	687b      	ldr	r3, [r7, #4]
 8049cf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8049cf4:	687b      	ldr	r3, [r7, #4]
 8049cf6:	699a      	ldr	r2, [r3, #24]
 8049cf8:	4b09      	ldr	r3, [pc, #36]	; (8049d20 <USB_HostInit+0x17c>)
 8049cfa:	4313      	orrs	r3, r2
 8049cfc:	687a      	ldr	r2, [r7, #4]
 8049cfe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8049d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8049d02:	4618      	mov	r0, r3
 8049d04:	3718      	adds	r7, #24
 8049d06:	46bd      	mov	sp, r7
 8049d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8049d0c:	b004      	add	sp, #16
 8049d0e:	4770      	bx	lr
 8049d10:	01000200 	.word	0x01000200
 8049d14:	00e00300 	.word	0x00e00300
 8049d18:	00600080 	.word	0x00600080
 8049d1c:	004000e0 	.word	0x004000e0
 8049d20:	a3200008 	.word	0xa3200008

08049d24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8049d24:	b480      	push	{r7}
 8049d26:	b085      	sub	sp, #20
 8049d28:	af00      	add	r7, sp, #0
 8049d2a:	6078      	str	r0, [r7, #4]
 8049d2c:	460b      	mov	r3, r1
 8049d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049d30:	687b      	ldr	r3, [r7, #4]
 8049d32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8049d34:	68fb      	ldr	r3, [r7, #12]
 8049d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d3a:	681b      	ldr	r3, [r3, #0]
 8049d3c:	68fa      	ldr	r2, [r7, #12]
 8049d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8049d42:	f023 0303 	bic.w	r3, r3, #3
 8049d46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8049d48:	68fb      	ldr	r3, [r7, #12]
 8049d4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d4e:	681a      	ldr	r2, [r3, #0]
 8049d50:	78fb      	ldrb	r3, [r7, #3]
 8049d52:	f003 0303 	and.w	r3, r3, #3
 8049d56:	68f9      	ldr	r1, [r7, #12]
 8049d58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8049d5c:	4313      	orrs	r3, r2
 8049d5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8049d60:	78fb      	ldrb	r3, [r7, #3]
 8049d62:	2b01      	cmp	r3, #1
 8049d64:	d107      	bne.n	8049d76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8049d66:	68fb      	ldr	r3, [r7, #12]
 8049d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d6c:	461a      	mov	r2, r3
 8049d6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8049d72:	6053      	str	r3, [r2, #4]
 8049d74:	e009      	b.n	8049d8a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8049d76:	78fb      	ldrb	r3, [r7, #3]
 8049d78:	2b02      	cmp	r3, #2
 8049d7a:	d106      	bne.n	8049d8a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8049d7c:	68fb      	ldr	r3, [r7, #12]
 8049d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049d82:	461a      	mov	r2, r3
 8049d84:	f241 7370 	movw	r3, #6000	; 0x1770
 8049d88:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8049d8a:	2300      	movs	r3, #0
}
 8049d8c:	4618      	mov	r0, r3
 8049d8e:	3714      	adds	r7, #20
 8049d90:	46bd      	mov	sp, r7
 8049d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049d96:	4770      	bx	lr

08049d98 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8049d98:	b580      	push	{r7, lr}
 8049d9a:	b084      	sub	sp, #16
 8049d9c:	af00      	add	r7, sp, #0
 8049d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049da0:	687b      	ldr	r3, [r7, #4]
 8049da2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8049da4:	2300      	movs	r3, #0
 8049da6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049da8:	68fb      	ldr	r3, [r7, #12]
 8049daa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049dae:	681b      	ldr	r3, [r3, #0]
 8049db0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049db2:	68bb      	ldr	r3, [r7, #8]
 8049db4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049db8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8049dba:	68bb      	ldr	r3, [r7, #8]
 8049dbc:	68fa      	ldr	r2, [r7, #12]
 8049dbe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049dc6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8049dc8:	2064      	movs	r0, #100	; 0x64
 8049dca:	f7f9 fa91 	bl	80432f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8049dce:	68bb      	ldr	r3, [r7, #8]
 8049dd0:	68fa      	ldr	r2, [r7, #12]
 8049dd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049dd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8049dda:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8049ddc:	200a      	movs	r0, #10
 8049dde:	f7f9 fa87 	bl	80432f0 <HAL_Delay>

  return HAL_OK;
 8049de2:	2300      	movs	r3, #0
}
 8049de4:	4618      	mov	r0, r3
 8049de6:	3710      	adds	r7, #16
 8049de8:	46bd      	mov	sp, r7
 8049dea:	bd80      	pop	{r7, pc}

08049dec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8049dec:	b480      	push	{r7}
 8049dee:	b085      	sub	sp, #20
 8049df0:	af00      	add	r7, sp, #0
 8049df2:	6078      	str	r0, [r7, #4]
 8049df4:	460b      	mov	r3, r1
 8049df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049df8:	687b      	ldr	r3, [r7, #4]
 8049dfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049dfc:	2300      	movs	r3, #0
 8049dfe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049e00:	68fb      	ldr	r3, [r7, #12]
 8049e02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049e06:	681b      	ldr	r3, [r3, #0]
 8049e08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8049e0a:	68bb      	ldr	r3, [r7, #8]
 8049e0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8049e10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8049e12:	68bb      	ldr	r3, [r7, #8]
 8049e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049e18:	2b00      	cmp	r3, #0
 8049e1a:	d109      	bne.n	8049e30 <USB_DriveVbus+0x44>
 8049e1c:	78fb      	ldrb	r3, [r7, #3]
 8049e1e:	2b01      	cmp	r3, #1
 8049e20:	d106      	bne.n	8049e30 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8049e22:	68bb      	ldr	r3, [r7, #8]
 8049e24:	68fa      	ldr	r2, [r7, #12]
 8049e26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049e2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8049e2e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8049e30:	68bb      	ldr	r3, [r7, #8]
 8049e32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8049e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8049e3a:	d109      	bne.n	8049e50 <USB_DriveVbus+0x64>
 8049e3c:	78fb      	ldrb	r3, [r7, #3]
 8049e3e:	2b00      	cmp	r3, #0
 8049e40:	d106      	bne.n	8049e50 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8049e42:	68bb      	ldr	r3, [r7, #8]
 8049e44:	68fa      	ldr	r2, [r7, #12]
 8049e46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8049e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8049e4e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8049e50:	2300      	movs	r3, #0
}
 8049e52:	4618      	mov	r0, r3
 8049e54:	3714      	adds	r7, #20
 8049e56:	46bd      	mov	sp, r7
 8049e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049e5c:	4770      	bx	lr

08049e5e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8049e5e:	b480      	push	{r7}
 8049e60:	b085      	sub	sp, #20
 8049e62:	af00      	add	r7, sp, #0
 8049e64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049e66:	687b      	ldr	r3, [r7, #4]
 8049e68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8049e6a:	2300      	movs	r3, #0
 8049e6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8049e6e:	68fb      	ldr	r3, [r7, #12]
 8049e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8049e74:	681b      	ldr	r3, [r3, #0]
 8049e76:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8049e78:	68bb      	ldr	r3, [r7, #8]
 8049e7a:	0c5b      	lsrs	r3, r3, #17
 8049e7c:	f003 0303 	and.w	r3, r3, #3
}
 8049e80:	4618      	mov	r0, r3
 8049e82:	3714      	adds	r7, #20
 8049e84:	46bd      	mov	sp, r7
 8049e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049e8a:	4770      	bx	lr

08049e8c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8049e8c:	b480      	push	{r7}
 8049e8e:	b085      	sub	sp, #20
 8049e90:	af00      	add	r7, sp, #0
 8049e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049e94:	687b      	ldr	r3, [r7, #4]
 8049e96:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8049e98:	68fb      	ldr	r3, [r7, #12]
 8049e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8049e9e:	689b      	ldr	r3, [r3, #8]
 8049ea0:	b29b      	uxth	r3, r3
}
 8049ea2:	4618      	mov	r0, r3
 8049ea4:	3714      	adds	r7, #20
 8049ea6:	46bd      	mov	sp, r7
 8049ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049eac:	4770      	bx	lr
	...

08049eb0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8049eb0:	b580      	push	{r7, lr}
 8049eb2:	b088      	sub	sp, #32
 8049eb4:	af00      	add	r7, sp, #0
 8049eb6:	6078      	str	r0, [r7, #4]
 8049eb8:	4608      	mov	r0, r1
 8049eba:	4611      	mov	r1, r2
 8049ebc:	461a      	mov	r2, r3
 8049ebe:	4603      	mov	r3, r0
 8049ec0:	70fb      	strb	r3, [r7, #3]
 8049ec2:	460b      	mov	r3, r1
 8049ec4:	70bb      	strb	r3, [r7, #2]
 8049ec6:	4613      	mov	r3, r2
 8049ec8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8049eca:	2300      	movs	r3, #0
 8049ecc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8049ece:	687b      	ldr	r3, [r7, #4]
 8049ed0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8049ed2:	78fb      	ldrb	r3, [r7, #3]
 8049ed4:	015a      	lsls	r2, r3, #5
 8049ed6:	693b      	ldr	r3, [r7, #16]
 8049ed8:	4413      	add	r3, r2
 8049eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049ede:	461a      	mov	r2, r3
 8049ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8049ee4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8049ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8049eea:	2b03      	cmp	r3, #3
 8049eec:	d87e      	bhi.n	8049fec <USB_HC_Init+0x13c>
 8049eee:	a201      	add	r2, pc, #4	; (adr r2, 8049ef4 <USB_HC_Init+0x44>)
 8049ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049ef4:	08049f05 	.word	0x08049f05
 8049ef8:	08049faf 	.word	0x08049faf
 8049efc:	08049f05 	.word	0x08049f05
 8049f00:	08049f71 	.word	0x08049f71
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049f04:	78fb      	ldrb	r3, [r7, #3]
 8049f06:	015a      	lsls	r2, r3, #5
 8049f08:	693b      	ldr	r3, [r7, #16]
 8049f0a:	4413      	add	r3, r2
 8049f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f10:	461a      	mov	r2, r3
 8049f12:	f240 439d 	movw	r3, #1181	; 0x49d
 8049f16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8049f18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049f1c:	2b00      	cmp	r3, #0
 8049f1e:	da10      	bge.n	8049f42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049f20:	78fb      	ldrb	r3, [r7, #3]
 8049f22:	015a      	lsls	r2, r3, #5
 8049f24:	693b      	ldr	r3, [r7, #16]
 8049f26:	4413      	add	r3, r2
 8049f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f2c:	68db      	ldr	r3, [r3, #12]
 8049f2e:	78fa      	ldrb	r2, [r7, #3]
 8049f30:	0151      	lsls	r1, r2, #5
 8049f32:	693a      	ldr	r2, [r7, #16]
 8049f34:	440a      	add	r2, r1
 8049f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049f3e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8049f40:	e057      	b.n	8049ff2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8049f42:	687b      	ldr	r3, [r7, #4]
 8049f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8049f4a:	2b00      	cmp	r3, #0
 8049f4c:	d051      	beq.n	8049ff2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8049f4e:	78fb      	ldrb	r3, [r7, #3]
 8049f50:	015a      	lsls	r2, r3, #5
 8049f52:	693b      	ldr	r3, [r7, #16]
 8049f54:	4413      	add	r3, r2
 8049f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f5a:	68db      	ldr	r3, [r3, #12]
 8049f5c:	78fa      	ldrb	r2, [r7, #3]
 8049f5e:	0151      	lsls	r1, r2, #5
 8049f60:	693a      	ldr	r2, [r7, #16]
 8049f62:	440a      	add	r2, r1
 8049f64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049f68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8049f6c:	60d3      	str	r3, [r2, #12]
      break;
 8049f6e:	e040      	b.n	8049ff2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049f70:	78fb      	ldrb	r3, [r7, #3]
 8049f72:	015a      	lsls	r2, r3, #5
 8049f74:	693b      	ldr	r3, [r7, #16]
 8049f76:	4413      	add	r3, r2
 8049f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f7c:	461a      	mov	r2, r3
 8049f7e:	f240 639d 	movw	r3, #1693	; 0x69d
 8049f82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8049f84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049f88:	2b00      	cmp	r3, #0
 8049f8a:	da34      	bge.n	8049ff6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8049f8c:	78fb      	ldrb	r3, [r7, #3]
 8049f8e:	015a      	lsls	r2, r3, #5
 8049f90:	693b      	ldr	r3, [r7, #16]
 8049f92:	4413      	add	r3, r2
 8049f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049f98:	68db      	ldr	r3, [r3, #12]
 8049f9a:	78fa      	ldrb	r2, [r7, #3]
 8049f9c:	0151      	lsls	r1, r2, #5
 8049f9e:	693a      	ldr	r2, [r7, #16]
 8049fa0:	440a      	add	r2, r1
 8049fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049faa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8049fac:	e023      	b.n	8049ff6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8049fae:	78fb      	ldrb	r3, [r7, #3]
 8049fb0:	015a      	lsls	r2, r3, #5
 8049fb2:	693b      	ldr	r3, [r7, #16]
 8049fb4:	4413      	add	r3, r2
 8049fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049fba:	461a      	mov	r2, r3
 8049fbc:	f240 2325 	movw	r3, #549	; 0x225
 8049fc0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8049fc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8049fc6:	2b00      	cmp	r3, #0
 8049fc8:	da17      	bge.n	8049ffa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8049fca:	78fb      	ldrb	r3, [r7, #3]
 8049fcc:	015a      	lsls	r2, r3, #5
 8049fce:	693b      	ldr	r3, [r7, #16]
 8049fd0:	4413      	add	r3, r2
 8049fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8049fd6:	68db      	ldr	r3, [r3, #12]
 8049fd8:	78fa      	ldrb	r2, [r7, #3]
 8049fda:	0151      	lsls	r1, r2, #5
 8049fdc:	693a      	ldr	r2, [r7, #16]
 8049fde:	440a      	add	r2, r1
 8049fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8049fe4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8049fe8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8049fea:	e006      	b.n	8049ffa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8049fec:	2301      	movs	r3, #1
 8049fee:	77fb      	strb	r3, [r7, #31]
      break;
 8049ff0:	e004      	b.n	8049ffc <USB_HC_Init+0x14c>
      break;
 8049ff2:	bf00      	nop
 8049ff4:	e002      	b.n	8049ffc <USB_HC_Init+0x14c>
      break;
 8049ff6:	bf00      	nop
 8049ff8:	e000      	b.n	8049ffc <USB_HC_Init+0x14c>
      break;
 8049ffa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8049ffc:	78fb      	ldrb	r3, [r7, #3]
 8049ffe:	015a      	lsls	r2, r3, #5
 804a000:	693b      	ldr	r3, [r7, #16]
 804a002:	4413      	add	r3, r2
 804a004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a008:	68db      	ldr	r3, [r3, #12]
 804a00a:	78fa      	ldrb	r2, [r7, #3]
 804a00c:	0151      	lsls	r1, r2, #5
 804a00e:	693a      	ldr	r2, [r7, #16]
 804a010:	440a      	add	r2, r1
 804a012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a016:	f043 0302 	orr.w	r3, r3, #2
 804a01a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 804a01c:	693b      	ldr	r3, [r7, #16]
 804a01e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a022:	699a      	ldr	r2, [r3, #24]
 804a024:	78fb      	ldrb	r3, [r7, #3]
 804a026:	f003 030f 	and.w	r3, r3, #15
 804a02a:	2101      	movs	r1, #1
 804a02c:	fa01 f303 	lsl.w	r3, r1, r3
 804a030:	6939      	ldr	r1, [r7, #16]
 804a032:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 804a036:	4313      	orrs	r3, r2
 804a038:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 804a03a:	687b      	ldr	r3, [r7, #4]
 804a03c:	699b      	ldr	r3, [r3, #24]
 804a03e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 804a042:	687b      	ldr	r3, [r7, #4]
 804a044:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 804a046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 804a04a:	2b00      	cmp	r3, #0
 804a04c:	da03      	bge.n	804a056 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 804a04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804a052:	61bb      	str	r3, [r7, #24]
 804a054:	e001      	b.n	804a05a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 804a056:	2300      	movs	r3, #0
 804a058:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 804a05a:	6878      	ldr	r0, [r7, #4]
 804a05c:	f7ff feff 	bl	8049e5e <USB_GetHostSpeed>
 804a060:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 804a062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 804a066:	2b02      	cmp	r3, #2
 804a068:	d106      	bne.n	804a078 <USB_HC_Init+0x1c8>
 804a06a:	68fb      	ldr	r3, [r7, #12]
 804a06c:	2b02      	cmp	r3, #2
 804a06e:	d003      	beq.n	804a078 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 804a070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 804a074:	617b      	str	r3, [r7, #20]
 804a076:	e001      	b.n	804a07c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 804a078:	2300      	movs	r3, #0
 804a07a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a07c:	787b      	ldrb	r3, [r7, #1]
 804a07e:	059b      	lsls	r3, r3, #22
 804a080:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a084:	78bb      	ldrb	r3, [r7, #2]
 804a086:	02db      	lsls	r3, r3, #11
 804a088:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a08c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a08e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a092:	049b      	lsls	r3, r3, #18
 804a094:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 804a098:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a09a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 804a09c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 804a0a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a0a2:	69bb      	ldr	r3, [r7, #24]
 804a0a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a0a6:	78fb      	ldrb	r3, [r7, #3]
 804a0a8:	0159      	lsls	r1, r3, #5
 804a0aa:	693b      	ldr	r3, [r7, #16]
 804a0ac:	440b      	add	r3, r1
 804a0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 804a0b4:	697b      	ldr	r3, [r7, #20]
 804a0b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 804a0b8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 804a0ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a0be:	2b03      	cmp	r3, #3
 804a0c0:	d003      	beq.n	804a0ca <USB_HC_Init+0x21a>
 804a0c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804a0c6:	2b01      	cmp	r3, #1
 804a0c8:	d10f      	bne.n	804a0ea <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 804a0ca:	78fb      	ldrb	r3, [r7, #3]
 804a0cc:	015a      	lsls	r2, r3, #5
 804a0ce:	693b      	ldr	r3, [r7, #16]
 804a0d0:	4413      	add	r3, r2
 804a0d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a0d6:	681b      	ldr	r3, [r3, #0]
 804a0d8:	78fa      	ldrb	r2, [r7, #3]
 804a0da:	0151      	lsls	r1, r2, #5
 804a0dc:	693a      	ldr	r2, [r7, #16]
 804a0de:	440a      	add	r2, r1
 804a0e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a0e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804a0e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 804a0ea:	7ffb      	ldrb	r3, [r7, #31]
}
 804a0ec:	4618      	mov	r0, r3
 804a0ee:	3720      	adds	r7, #32
 804a0f0:	46bd      	mov	sp, r7
 804a0f2:	bd80      	pop	{r7, pc}

0804a0f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 804a0f4:	b580      	push	{r7, lr}
 804a0f6:	b08c      	sub	sp, #48	; 0x30
 804a0f8:	af02      	add	r7, sp, #8
 804a0fa:	60f8      	str	r0, [r7, #12]
 804a0fc:	60b9      	str	r1, [r7, #8]
 804a0fe:	4613      	mov	r3, r2
 804a100:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a102:	68fb      	ldr	r3, [r7, #12]
 804a104:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 804a106:	68bb      	ldr	r3, [r7, #8]
 804a108:	785b      	ldrb	r3, [r3, #1]
 804a10a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 804a10c:	f44f 7380 	mov.w	r3, #256	; 0x100
 804a110:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 804a112:	68fb      	ldr	r3, [r7, #12]
 804a114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804a11a:	2b00      	cmp	r3, #0
 804a11c:	d02d      	beq.n	804a17a <USB_HC_StartXfer+0x86>
 804a11e:	68bb      	ldr	r3, [r7, #8]
 804a120:	791b      	ldrb	r3, [r3, #4]
 804a122:	2b00      	cmp	r3, #0
 804a124:	d129      	bne.n	804a17a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 804a126:	79fb      	ldrb	r3, [r7, #7]
 804a128:	2b01      	cmp	r3, #1
 804a12a:	d117      	bne.n	804a15c <USB_HC_StartXfer+0x68>
 804a12c:	68bb      	ldr	r3, [r7, #8]
 804a12e:	79db      	ldrb	r3, [r3, #7]
 804a130:	2b00      	cmp	r3, #0
 804a132:	d003      	beq.n	804a13c <USB_HC_StartXfer+0x48>
 804a134:	68bb      	ldr	r3, [r7, #8]
 804a136:	79db      	ldrb	r3, [r3, #7]
 804a138:	2b02      	cmp	r3, #2
 804a13a:	d10f      	bne.n	804a15c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 804a13c:	69fb      	ldr	r3, [r7, #28]
 804a13e:	015a      	lsls	r2, r3, #5
 804a140:	6a3b      	ldr	r3, [r7, #32]
 804a142:	4413      	add	r3, r2
 804a144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a148:	68db      	ldr	r3, [r3, #12]
 804a14a:	69fa      	ldr	r2, [r7, #28]
 804a14c:	0151      	lsls	r1, r2, #5
 804a14e:	6a3a      	ldr	r2, [r7, #32]
 804a150:	440a      	add	r2, r1
 804a152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804a15a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 804a15c:	79fb      	ldrb	r3, [r7, #7]
 804a15e:	2b00      	cmp	r3, #0
 804a160:	d10b      	bne.n	804a17a <USB_HC_StartXfer+0x86>
 804a162:	68bb      	ldr	r3, [r7, #8]
 804a164:	795b      	ldrb	r3, [r3, #5]
 804a166:	2b01      	cmp	r3, #1
 804a168:	d107      	bne.n	804a17a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 804a16a:	68bb      	ldr	r3, [r7, #8]
 804a16c:	785b      	ldrb	r3, [r3, #1]
 804a16e:	4619      	mov	r1, r3
 804a170:	68f8      	ldr	r0, [r7, #12]
 804a172:	f000 fa0f 	bl	804a594 <USB_DoPing>
      return HAL_OK;
 804a176:	2300      	movs	r3, #0
 804a178:	e0f8      	b.n	804a36c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 804a17a:	68bb      	ldr	r3, [r7, #8]
 804a17c:	695b      	ldr	r3, [r3, #20]
 804a17e:	2b00      	cmp	r3, #0
 804a180:	d018      	beq.n	804a1b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 804a182:	68bb      	ldr	r3, [r7, #8]
 804a184:	695b      	ldr	r3, [r3, #20]
 804a186:	68ba      	ldr	r2, [r7, #8]
 804a188:	8912      	ldrh	r2, [r2, #8]
 804a18a:	4413      	add	r3, r2
 804a18c:	3b01      	subs	r3, #1
 804a18e:	68ba      	ldr	r2, [r7, #8]
 804a190:	8912      	ldrh	r2, [r2, #8]
 804a192:	fbb3 f3f2 	udiv	r3, r3, r2
 804a196:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 804a198:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 804a19a:	8b7b      	ldrh	r3, [r7, #26]
 804a19c:	429a      	cmp	r2, r3
 804a19e:	d90b      	bls.n	804a1b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 804a1a0:	8b7b      	ldrh	r3, [r7, #26]
 804a1a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a1a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a1a6:	68ba      	ldr	r2, [r7, #8]
 804a1a8:	8912      	ldrh	r2, [r2, #8]
 804a1aa:	fb03 f202 	mul.w	r2, r3, r2
 804a1ae:	68bb      	ldr	r3, [r7, #8]
 804a1b0:	611a      	str	r2, [r3, #16]
 804a1b2:	e001      	b.n	804a1b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 804a1b4:	2301      	movs	r3, #1
 804a1b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 804a1b8:	68bb      	ldr	r3, [r7, #8]
 804a1ba:	78db      	ldrb	r3, [r3, #3]
 804a1bc:	2b00      	cmp	r3, #0
 804a1be:	d007      	beq.n	804a1d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 804a1c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a1c2:	68ba      	ldr	r2, [r7, #8]
 804a1c4:	8912      	ldrh	r2, [r2, #8]
 804a1c6:	fb03 f202 	mul.w	r2, r3, r2
 804a1ca:	68bb      	ldr	r3, [r7, #8]
 804a1cc:	611a      	str	r2, [r3, #16]
 804a1ce:	e003      	b.n	804a1d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 804a1d0:	68bb      	ldr	r3, [r7, #8]
 804a1d2:	695a      	ldr	r2, [r3, #20]
 804a1d4:	68bb      	ldr	r3, [r7, #8]
 804a1d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a1d8:	68bb      	ldr	r3, [r7, #8]
 804a1da:	691b      	ldr	r3, [r3, #16]
 804a1dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a1e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804a1e2:	04d9      	lsls	r1, r3, #19
 804a1e4:	4b63      	ldr	r3, [pc, #396]	; (804a374 <USB_HC_StartXfer+0x280>)
 804a1e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a1e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 804a1ea:	68bb      	ldr	r3, [r7, #8]
 804a1ec:	7a9b      	ldrb	r3, [r3, #10]
 804a1ee:	075b      	lsls	r3, r3, #29
 804a1f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a1f4:	69f9      	ldr	r1, [r7, #28]
 804a1f6:	0148      	lsls	r0, r1, #5
 804a1f8:	6a39      	ldr	r1, [r7, #32]
 804a1fa:	4401      	add	r1, r0
 804a1fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a200:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 804a202:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 804a204:	79fb      	ldrb	r3, [r7, #7]
 804a206:	2b00      	cmp	r3, #0
 804a208:	d009      	beq.n	804a21e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 804a20a:	68bb      	ldr	r3, [r7, #8]
 804a20c:	68d9      	ldr	r1, [r3, #12]
 804a20e:	69fb      	ldr	r3, [r7, #28]
 804a210:	015a      	lsls	r2, r3, #5
 804a212:	6a3b      	ldr	r3, [r7, #32]
 804a214:	4413      	add	r3, r2
 804a216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a21a:	460a      	mov	r2, r1
 804a21c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 804a21e:	6a3b      	ldr	r3, [r7, #32]
 804a220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a224:	689b      	ldr	r3, [r3, #8]
 804a226:	f003 0301 	and.w	r3, r3, #1
 804a22a:	2b00      	cmp	r3, #0
 804a22c:	bf0c      	ite	eq
 804a22e:	2301      	moveq	r3, #1
 804a230:	2300      	movne	r3, #0
 804a232:	b2db      	uxtb	r3, r3
 804a234:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 804a236:	69fb      	ldr	r3, [r7, #28]
 804a238:	015a      	lsls	r2, r3, #5
 804a23a:	6a3b      	ldr	r3, [r7, #32]
 804a23c:	4413      	add	r3, r2
 804a23e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a242:	681b      	ldr	r3, [r3, #0]
 804a244:	69fa      	ldr	r2, [r7, #28]
 804a246:	0151      	lsls	r1, r2, #5
 804a248:	6a3a      	ldr	r2, [r7, #32]
 804a24a:	440a      	add	r2, r1
 804a24c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a250:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804a254:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 804a256:	69fb      	ldr	r3, [r7, #28]
 804a258:	015a      	lsls	r2, r3, #5
 804a25a:	6a3b      	ldr	r3, [r7, #32]
 804a25c:	4413      	add	r3, r2
 804a25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a262:	681a      	ldr	r2, [r3, #0]
 804a264:	7e7b      	ldrb	r3, [r7, #25]
 804a266:	075b      	lsls	r3, r3, #29
 804a268:	69f9      	ldr	r1, [r7, #28]
 804a26a:	0148      	lsls	r0, r1, #5
 804a26c:	6a39      	ldr	r1, [r7, #32]
 804a26e:	4401      	add	r1, r0
 804a270:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 804a274:	4313      	orrs	r3, r2
 804a276:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 804a278:	69fb      	ldr	r3, [r7, #28]
 804a27a:	015a      	lsls	r2, r3, #5
 804a27c:	6a3b      	ldr	r3, [r7, #32]
 804a27e:	4413      	add	r3, r2
 804a280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a284:	681b      	ldr	r3, [r3, #0]
 804a286:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804a288:	693b      	ldr	r3, [r7, #16]
 804a28a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804a28e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 804a290:	68bb      	ldr	r3, [r7, #8]
 804a292:	78db      	ldrb	r3, [r3, #3]
 804a294:	2b00      	cmp	r3, #0
 804a296:	d004      	beq.n	804a2a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 804a298:	693b      	ldr	r3, [r7, #16]
 804a29a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804a29e:	613b      	str	r3, [r7, #16]
 804a2a0:	e003      	b.n	804a2aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 804a2a2:	693b      	ldr	r3, [r7, #16]
 804a2a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a2a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804a2aa:	693b      	ldr	r3, [r7, #16]
 804a2ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a2b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 804a2b2:	69fb      	ldr	r3, [r7, #28]
 804a2b4:	015a      	lsls	r2, r3, #5
 804a2b6:	6a3b      	ldr	r3, [r7, #32]
 804a2b8:	4413      	add	r3, r2
 804a2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a2be:	461a      	mov	r2, r3
 804a2c0:	693b      	ldr	r3, [r7, #16]
 804a2c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 804a2c4:	79fb      	ldrb	r3, [r7, #7]
 804a2c6:	2b00      	cmp	r3, #0
 804a2c8:	d001      	beq.n	804a2ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 804a2ca:	2300      	movs	r3, #0
 804a2cc:	e04e      	b.n	804a36c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 804a2ce:	68bb      	ldr	r3, [r7, #8]
 804a2d0:	78db      	ldrb	r3, [r3, #3]
 804a2d2:	2b00      	cmp	r3, #0
 804a2d4:	d149      	bne.n	804a36a <USB_HC_StartXfer+0x276>
 804a2d6:	68bb      	ldr	r3, [r7, #8]
 804a2d8:	695b      	ldr	r3, [r3, #20]
 804a2da:	2b00      	cmp	r3, #0
 804a2dc:	d045      	beq.n	804a36a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 804a2de:	68bb      	ldr	r3, [r7, #8]
 804a2e0:	79db      	ldrb	r3, [r3, #7]
 804a2e2:	2b03      	cmp	r3, #3
 804a2e4:	d830      	bhi.n	804a348 <USB_HC_StartXfer+0x254>
 804a2e6:	a201      	add	r2, pc, #4	; (adr r2, 804a2ec <USB_HC_StartXfer+0x1f8>)
 804a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804a2ec:	0804a2fd 	.word	0x0804a2fd
 804a2f0:	0804a321 	.word	0x0804a321
 804a2f4:	0804a2fd 	.word	0x0804a2fd
 804a2f8:	0804a321 	.word	0x0804a321
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804a2fc:	68bb      	ldr	r3, [r7, #8]
 804a2fe:	695b      	ldr	r3, [r3, #20]
 804a300:	3303      	adds	r3, #3
 804a302:	089b      	lsrs	r3, r3, #2
 804a304:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 804a306:	8afa      	ldrh	r2, [r7, #22]
 804a308:	68fb      	ldr	r3, [r7, #12]
 804a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a30c:	b29b      	uxth	r3, r3
 804a30e:	429a      	cmp	r2, r3
 804a310:	d91c      	bls.n	804a34c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 804a312:	68fb      	ldr	r3, [r7, #12]
 804a314:	699b      	ldr	r3, [r3, #24]
 804a316:	f043 0220 	orr.w	r2, r3, #32
 804a31a:	68fb      	ldr	r3, [r7, #12]
 804a31c:	619a      	str	r2, [r3, #24]
        }
        break;
 804a31e:	e015      	b.n	804a34c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 804a320:	68bb      	ldr	r3, [r7, #8]
 804a322:	695b      	ldr	r3, [r3, #20]
 804a324:	3303      	adds	r3, #3
 804a326:	089b      	lsrs	r3, r3, #2
 804a328:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 804a32a:	8afa      	ldrh	r2, [r7, #22]
 804a32c:	6a3b      	ldr	r3, [r7, #32]
 804a32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a332:	691b      	ldr	r3, [r3, #16]
 804a334:	b29b      	uxth	r3, r3
 804a336:	429a      	cmp	r2, r3
 804a338:	d90a      	bls.n	804a350 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 804a33a:	68fb      	ldr	r3, [r7, #12]
 804a33c:	699b      	ldr	r3, [r3, #24]
 804a33e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 804a342:	68fb      	ldr	r3, [r7, #12]
 804a344:	619a      	str	r2, [r3, #24]
        }
        break;
 804a346:	e003      	b.n	804a350 <USB_HC_StartXfer+0x25c>

      default:
        break;
 804a348:	bf00      	nop
 804a34a:	e002      	b.n	804a352 <USB_HC_StartXfer+0x25e>
        break;
 804a34c:	bf00      	nop
 804a34e:	e000      	b.n	804a352 <USB_HC_StartXfer+0x25e>
        break;
 804a350:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 804a352:	68bb      	ldr	r3, [r7, #8]
 804a354:	68d9      	ldr	r1, [r3, #12]
 804a356:	68bb      	ldr	r3, [r7, #8]
 804a358:	785a      	ldrb	r2, [r3, #1]
 804a35a:	68bb      	ldr	r3, [r7, #8]
 804a35c:	695b      	ldr	r3, [r3, #20]
 804a35e:	b29b      	uxth	r3, r3
 804a360:	2000      	movs	r0, #0
 804a362:	9000      	str	r0, [sp, #0]
 804a364:	68f8      	ldr	r0, [r7, #12]
 804a366:	f7ff fb31 	bl	80499cc <USB_WritePacket>
  }

  return HAL_OK;
 804a36a:	2300      	movs	r3, #0
}
 804a36c:	4618      	mov	r0, r3
 804a36e:	3728      	adds	r7, #40	; 0x28
 804a370:	46bd      	mov	sp, r7
 804a372:	bd80      	pop	{r7, pc}
 804a374:	1ff80000 	.word	0x1ff80000

0804a378 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 804a378:	b480      	push	{r7}
 804a37a:	b085      	sub	sp, #20
 804a37c:	af00      	add	r7, sp, #0
 804a37e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a380:	687b      	ldr	r3, [r7, #4]
 804a382:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 804a384:	68fb      	ldr	r3, [r7, #12]
 804a386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a38a:	695b      	ldr	r3, [r3, #20]
 804a38c:	b29b      	uxth	r3, r3
}
 804a38e:	4618      	mov	r0, r3
 804a390:	3714      	adds	r7, #20
 804a392:	46bd      	mov	sp, r7
 804a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a398:	4770      	bx	lr

0804a39a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 804a39a:	b480      	push	{r7}
 804a39c:	b089      	sub	sp, #36	; 0x24
 804a39e:	af00      	add	r7, sp, #0
 804a3a0:	6078      	str	r0, [r7, #4]
 804a3a2:	460b      	mov	r3, r1
 804a3a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a3a6:	687b      	ldr	r3, [r7, #4]
 804a3a8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 804a3aa:	78fb      	ldrb	r3, [r7, #3]
 804a3ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 804a3ae:	2300      	movs	r3, #0
 804a3b0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 804a3b2:	69bb      	ldr	r3, [r7, #24]
 804a3b4:	015a      	lsls	r2, r3, #5
 804a3b6:	69fb      	ldr	r3, [r7, #28]
 804a3b8:	4413      	add	r3, r2
 804a3ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a3be:	681b      	ldr	r3, [r3, #0]
 804a3c0:	0c9b      	lsrs	r3, r3, #18
 804a3c2:	f003 0303 	and.w	r3, r3, #3
 804a3c6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 804a3c8:	69bb      	ldr	r3, [r7, #24]
 804a3ca:	015a      	lsls	r2, r3, #5
 804a3cc:	69fb      	ldr	r3, [r7, #28]
 804a3ce:	4413      	add	r3, r2
 804a3d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a3d4:	681b      	ldr	r3, [r3, #0]
 804a3d6:	0fdb      	lsrs	r3, r3, #31
 804a3d8:	f003 0301 	and.w	r3, r3, #1
 804a3dc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 804a3de:	687b      	ldr	r3, [r7, #4]
 804a3e0:	689b      	ldr	r3, [r3, #8]
 804a3e2:	f003 0320 	and.w	r3, r3, #32
 804a3e6:	2b20      	cmp	r3, #32
 804a3e8:	d104      	bne.n	804a3f4 <USB_HC_Halt+0x5a>
 804a3ea:	693b      	ldr	r3, [r7, #16]
 804a3ec:	2b00      	cmp	r3, #0
 804a3ee:	d101      	bne.n	804a3f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 804a3f0:	2300      	movs	r3, #0
 804a3f2:	e0c8      	b.n	804a586 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 804a3f4:	697b      	ldr	r3, [r7, #20]
 804a3f6:	2b00      	cmp	r3, #0
 804a3f8:	d002      	beq.n	804a400 <USB_HC_Halt+0x66>
 804a3fa:	697b      	ldr	r3, [r7, #20]
 804a3fc:	2b02      	cmp	r3, #2
 804a3fe:	d163      	bne.n	804a4c8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804a400:	69bb      	ldr	r3, [r7, #24]
 804a402:	015a      	lsls	r2, r3, #5
 804a404:	69fb      	ldr	r3, [r7, #28]
 804a406:	4413      	add	r3, r2
 804a408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a40c:	681b      	ldr	r3, [r3, #0]
 804a40e:	69ba      	ldr	r2, [r7, #24]
 804a410:	0151      	lsls	r1, r2, #5
 804a412:	69fa      	ldr	r2, [r7, #28]
 804a414:	440a      	add	r2, r1
 804a416:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a41a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a41e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a420:	687b      	ldr	r3, [r7, #4]
 804a422:	689b      	ldr	r3, [r3, #8]
 804a424:	f003 0320 	and.w	r3, r3, #32
 804a428:	2b00      	cmp	r3, #0
 804a42a:	f040 80ab 	bne.w	804a584 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 804a42e:	687b      	ldr	r3, [r7, #4]
 804a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a432:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a436:	2b00      	cmp	r3, #0
 804a438:	d133      	bne.n	804a4a2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804a43a:	69bb      	ldr	r3, [r7, #24]
 804a43c:	015a      	lsls	r2, r3, #5
 804a43e:	69fb      	ldr	r3, [r7, #28]
 804a440:	4413      	add	r3, r2
 804a442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a446:	681b      	ldr	r3, [r3, #0]
 804a448:	69ba      	ldr	r2, [r7, #24]
 804a44a:	0151      	lsls	r1, r2, #5
 804a44c:	69fa      	ldr	r2, [r7, #28]
 804a44e:	440a      	add	r2, r1
 804a450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a458:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a45a:	69bb      	ldr	r3, [r7, #24]
 804a45c:	015a      	lsls	r2, r3, #5
 804a45e:	69fb      	ldr	r3, [r7, #28]
 804a460:	4413      	add	r3, r2
 804a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a466:	681b      	ldr	r3, [r3, #0]
 804a468:	69ba      	ldr	r2, [r7, #24]
 804a46a:	0151      	lsls	r1, r2, #5
 804a46c:	69fa      	ldr	r2, [r7, #28]
 804a46e:	440a      	add	r2, r1
 804a470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a478:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 804a47a:	68fb      	ldr	r3, [r7, #12]
 804a47c:	3301      	adds	r3, #1
 804a47e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 804a480:	68fb      	ldr	r3, [r7, #12]
 804a482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a486:	d81d      	bhi.n	804a4c4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a488:	69bb      	ldr	r3, [r7, #24]
 804a48a:	015a      	lsls	r2, r3, #5
 804a48c:	69fb      	ldr	r3, [r7, #28]
 804a48e:	4413      	add	r3, r2
 804a490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a494:	681b      	ldr	r3, [r3, #0]
 804a496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a49a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a49e:	d0ec      	beq.n	804a47a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a4a0:	e070      	b.n	804a584 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a4a2:	69bb      	ldr	r3, [r7, #24]
 804a4a4:	015a      	lsls	r2, r3, #5
 804a4a6:	69fb      	ldr	r3, [r7, #28]
 804a4a8:	4413      	add	r3, r2
 804a4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4ae:	681b      	ldr	r3, [r3, #0]
 804a4b0:	69ba      	ldr	r2, [r7, #24]
 804a4b2:	0151      	lsls	r1, r2, #5
 804a4b4:	69fa      	ldr	r2, [r7, #28]
 804a4b6:	440a      	add	r2, r1
 804a4b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a4bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a4c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a4c2:	e05f      	b.n	804a584 <USB_HC_Halt+0x1ea>
            break;
 804a4c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 804a4c6:	e05d      	b.n	804a584 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 804a4c8:	69bb      	ldr	r3, [r7, #24]
 804a4ca:	015a      	lsls	r2, r3, #5
 804a4cc:	69fb      	ldr	r3, [r7, #28]
 804a4ce:	4413      	add	r3, r2
 804a4d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a4d4:	681b      	ldr	r3, [r3, #0]
 804a4d6:	69ba      	ldr	r2, [r7, #24]
 804a4d8:	0151      	lsls	r1, r2, #5
 804a4da:	69fa      	ldr	r2, [r7, #28]
 804a4dc:	440a      	add	r2, r1
 804a4de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a4e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a4e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 804a4e8:	69fb      	ldr	r3, [r7, #28]
 804a4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a4ee:	691b      	ldr	r3, [r3, #16]
 804a4f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a4f4:	2b00      	cmp	r3, #0
 804a4f6:	d133      	bne.n	804a560 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 804a4f8:	69bb      	ldr	r3, [r7, #24]
 804a4fa:	015a      	lsls	r2, r3, #5
 804a4fc:	69fb      	ldr	r3, [r7, #28]
 804a4fe:	4413      	add	r3, r2
 804a500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a504:	681b      	ldr	r3, [r3, #0]
 804a506:	69ba      	ldr	r2, [r7, #24]
 804a508:	0151      	lsls	r1, r2, #5
 804a50a:	69fa      	ldr	r2, [r7, #28]
 804a50c:	440a      	add	r2, r1
 804a50e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a516:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a518:	69bb      	ldr	r3, [r7, #24]
 804a51a:	015a      	lsls	r2, r3, #5
 804a51c:	69fb      	ldr	r3, [r7, #28]
 804a51e:	4413      	add	r3, r2
 804a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a524:	681b      	ldr	r3, [r3, #0]
 804a526:	69ba      	ldr	r2, [r7, #24]
 804a528:	0151      	lsls	r1, r2, #5
 804a52a:	69fa      	ldr	r2, [r7, #28]
 804a52c:	440a      	add	r2, r1
 804a52e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a536:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 804a538:	68fb      	ldr	r3, [r7, #12]
 804a53a:	3301      	adds	r3, #1
 804a53c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 804a53e:	68fb      	ldr	r3, [r7, #12]
 804a540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a544:	d81d      	bhi.n	804a582 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a546:	69bb      	ldr	r3, [r7, #24]
 804a548:	015a      	lsls	r2, r3, #5
 804a54a:	69fb      	ldr	r3, [r7, #28]
 804a54c:	4413      	add	r3, r2
 804a54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a552:	681b      	ldr	r3, [r3, #0]
 804a554:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a558:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a55c:	d0ec      	beq.n	804a538 <USB_HC_Halt+0x19e>
 804a55e:	e011      	b.n	804a584 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 804a560:	69bb      	ldr	r3, [r7, #24]
 804a562:	015a      	lsls	r2, r3, #5
 804a564:	69fb      	ldr	r3, [r7, #28]
 804a566:	4413      	add	r3, r2
 804a568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a56c:	681b      	ldr	r3, [r3, #0]
 804a56e:	69ba      	ldr	r2, [r7, #24]
 804a570:	0151      	lsls	r1, r2, #5
 804a572:	69fa      	ldr	r2, [r7, #28]
 804a574:	440a      	add	r2, r1
 804a576:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a57a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a57e:	6013      	str	r3, [r2, #0]
 804a580:	e000      	b.n	804a584 <USB_HC_Halt+0x1ea>
          break;
 804a582:	bf00      	nop
    }
  }

  return HAL_OK;
 804a584:	2300      	movs	r3, #0
}
 804a586:	4618      	mov	r0, r3
 804a588:	3724      	adds	r7, #36	; 0x24
 804a58a:	46bd      	mov	sp, r7
 804a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a590:	4770      	bx	lr
	...

0804a594 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 804a594:	b480      	push	{r7}
 804a596:	b087      	sub	sp, #28
 804a598:	af00      	add	r7, sp, #0
 804a59a:	6078      	str	r0, [r7, #4]
 804a59c:	460b      	mov	r3, r1
 804a59e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a5a0:	687b      	ldr	r3, [r7, #4]
 804a5a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 804a5a4:	78fb      	ldrb	r3, [r7, #3]
 804a5a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 804a5a8:	2301      	movs	r3, #1
 804a5aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 804a5ac:	68fb      	ldr	r3, [r7, #12]
 804a5ae:	04da      	lsls	r2, r3, #19
 804a5b0:	4b15      	ldr	r3, [pc, #84]	; (804a608 <USB_DoPing+0x74>)
 804a5b2:	4013      	ands	r3, r2
 804a5b4:	693a      	ldr	r2, [r7, #16]
 804a5b6:	0151      	lsls	r1, r2, #5
 804a5b8:	697a      	ldr	r2, [r7, #20]
 804a5ba:	440a      	add	r2, r1
 804a5bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 804a5c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a5c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 804a5c6:	693b      	ldr	r3, [r7, #16]
 804a5c8:	015a      	lsls	r2, r3, #5
 804a5ca:	697b      	ldr	r3, [r7, #20]
 804a5cc:	4413      	add	r3, r2
 804a5ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a5d2:	681b      	ldr	r3, [r3, #0]
 804a5d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 804a5d6:	68bb      	ldr	r3, [r7, #8]
 804a5d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804a5dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 804a5de:	68bb      	ldr	r3, [r7, #8]
 804a5e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a5e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 804a5e6:	693b      	ldr	r3, [r7, #16]
 804a5e8:	015a      	lsls	r2, r3, #5
 804a5ea:	697b      	ldr	r3, [r7, #20]
 804a5ec:	4413      	add	r3, r2
 804a5ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a5f2:	461a      	mov	r2, r3
 804a5f4:	68bb      	ldr	r3, [r7, #8]
 804a5f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 804a5f8:	2300      	movs	r3, #0
}
 804a5fa:	4618      	mov	r0, r3
 804a5fc:	371c      	adds	r7, #28
 804a5fe:	46bd      	mov	sp, r7
 804a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a604:	4770      	bx	lr
 804a606:	bf00      	nop
 804a608:	1ff80000 	.word	0x1ff80000

0804a60c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 804a60c:	b580      	push	{r7, lr}
 804a60e:	b088      	sub	sp, #32
 804a610:	af00      	add	r7, sp, #0
 804a612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 804a614:	2300      	movs	r3, #0
 804a616:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 804a618:	687b      	ldr	r3, [r7, #4]
 804a61a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 804a61c:	2300      	movs	r3, #0
 804a61e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 804a620:	6878      	ldr	r0, [r7, #4]
 804a622:	f7ff f911 	bl	8049848 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 804a626:	2110      	movs	r1, #16
 804a628:	6878      	ldr	r0, [r7, #4]
 804a62a:	f7ff f96b 	bl	8049904 <USB_FlushTxFifo>
 804a62e:	4603      	mov	r3, r0
 804a630:	2b00      	cmp	r3, #0
 804a632:	d001      	beq.n	804a638 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 804a634:	2301      	movs	r3, #1
 804a636:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 804a638:	6878      	ldr	r0, [r7, #4]
 804a63a:	f7ff f997 	bl	804996c <USB_FlushRxFifo>
 804a63e:	4603      	mov	r3, r0
 804a640:	2b00      	cmp	r3, #0
 804a642:	d001      	beq.n	804a648 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 804a644:	2301      	movs	r3, #1
 804a646:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 804a648:	2300      	movs	r3, #0
 804a64a:	61bb      	str	r3, [r7, #24]
 804a64c:	e01f      	b.n	804a68e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 804a64e:	69bb      	ldr	r3, [r7, #24]
 804a650:	015a      	lsls	r2, r3, #5
 804a652:	697b      	ldr	r3, [r7, #20]
 804a654:	4413      	add	r3, r2
 804a656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a65a:	681b      	ldr	r3, [r3, #0]
 804a65c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 804a65e:	693b      	ldr	r3, [r7, #16]
 804a660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a664:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 804a666:	693b      	ldr	r3, [r7, #16]
 804a668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804a66c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a66e:	693b      	ldr	r3, [r7, #16]
 804a670:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a674:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a676:	69bb      	ldr	r3, [r7, #24]
 804a678:	015a      	lsls	r2, r3, #5
 804a67a:	697b      	ldr	r3, [r7, #20]
 804a67c:	4413      	add	r3, r2
 804a67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a682:	461a      	mov	r2, r3
 804a684:	693b      	ldr	r3, [r7, #16]
 804a686:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 804a688:	69bb      	ldr	r3, [r7, #24]
 804a68a:	3301      	adds	r3, #1
 804a68c:	61bb      	str	r3, [r7, #24]
 804a68e:	69bb      	ldr	r3, [r7, #24]
 804a690:	2b0f      	cmp	r3, #15
 804a692:	d9dc      	bls.n	804a64e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 804a694:	2300      	movs	r3, #0
 804a696:	61bb      	str	r3, [r7, #24]
 804a698:	e034      	b.n	804a704 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 804a69a:	69bb      	ldr	r3, [r7, #24]
 804a69c:	015a      	lsls	r2, r3, #5
 804a69e:	697b      	ldr	r3, [r7, #20]
 804a6a0:	4413      	add	r3, r2
 804a6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a6a6:	681b      	ldr	r3, [r3, #0]
 804a6a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 804a6aa:	693b      	ldr	r3, [r7, #16]
 804a6ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 804a6b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 804a6b2:	693b      	ldr	r3, [r7, #16]
 804a6b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804a6b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 804a6ba:	693b      	ldr	r3, [r7, #16]
 804a6bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804a6c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 804a6c2:	69bb      	ldr	r3, [r7, #24]
 804a6c4:	015a      	lsls	r2, r3, #5
 804a6c6:	697b      	ldr	r3, [r7, #20]
 804a6c8:	4413      	add	r3, r2
 804a6ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a6ce:	461a      	mov	r2, r3
 804a6d0:	693b      	ldr	r3, [r7, #16]
 804a6d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 804a6d4:	68fb      	ldr	r3, [r7, #12]
 804a6d6:	3301      	adds	r3, #1
 804a6d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 804a6da:	68fb      	ldr	r3, [r7, #12]
 804a6dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804a6e0:	d80c      	bhi.n	804a6fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 804a6e2:	69bb      	ldr	r3, [r7, #24]
 804a6e4:	015a      	lsls	r2, r3, #5
 804a6e6:	697b      	ldr	r3, [r7, #20]
 804a6e8:	4413      	add	r3, r2
 804a6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 804a6ee:	681b      	ldr	r3, [r3, #0]
 804a6f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 804a6f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804a6f8:	d0ec      	beq.n	804a6d4 <USB_StopHost+0xc8>
 804a6fa:	e000      	b.n	804a6fe <USB_StopHost+0xf2>
        break;
 804a6fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 804a6fe:	69bb      	ldr	r3, [r7, #24]
 804a700:	3301      	adds	r3, #1
 804a702:	61bb      	str	r3, [r7, #24]
 804a704:	69bb      	ldr	r3, [r7, #24]
 804a706:	2b0f      	cmp	r3, #15
 804a708:	d9c7      	bls.n	804a69a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 804a70a:	697b      	ldr	r3, [r7, #20]
 804a70c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804a710:	461a      	mov	r2, r3
 804a712:	f04f 33ff 	mov.w	r3, #4294967295
 804a716:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 804a718:	687b      	ldr	r3, [r7, #4]
 804a71a:	f04f 32ff 	mov.w	r2, #4294967295
 804a71e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 804a720:	6878      	ldr	r0, [r7, #4]
 804a722:	f7ff f880 	bl	8049826 <USB_EnableGlobalInt>

  return ret;
 804a726:	7ffb      	ldrb	r3, [r7, #31]
}
 804a728:	4618      	mov	r0, r3
 804a72a:	3720      	adds	r7, #32
 804a72c:	46bd      	mov	sp, r7
 804a72e:	bd80      	pop	{r7, pc}

0804a730 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 804a730:	b590      	push	{r4, r7, lr}
 804a732:	b089      	sub	sp, #36	; 0x24
 804a734:	af04      	add	r7, sp, #16
 804a736:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 804a738:	2301      	movs	r3, #1
 804a73a:	2202      	movs	r2, #2
 804a73c:	2102      	movs	r1, #2
 804a73e:	6878      	ldr	r0, [r7, #4]
 804a740:	f000 fc66 	bl	804b010 <USBH_FindInterface>
 804a744:	4603      	mov	r3, r0
 804a746:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a748:	7bfb      	ldrb	r3, [r7, #15]
 804a74a:	2bff      	cmp	r3, #255	; 0xff
 804a74c:	d002      	beq.n	804a754 <USBH_CDC_InterfaceInit+0x24>
 804a74e:	7bfb      	ldrb	r3, [r7, #15]
 804a750:	2b01      	cmp	r3, #1
 804a752:	d901      	bls.n	804a758 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a754:	2302      	movs	r3, #2
 804a756:	e13d      	b.n	804a9d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 804a758:	7bfb      	ldrb	r3, [r7, #15]
 804a75a:	4619      	mov	r1, r3
 804a75c:	6878      	ldr	r0, [r7, #4]
 804a75e:	f000 fc3b 	bl	804afd8 <USBH_SelectInterface>
 804a762:	4603      	mov	r3, r0
 804a764:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 804a766:	7bbb      	ldrb	r3, [r7, #14]
 804a768:	2b00      	cmp	r3, #0
 804a76a:	d001      	beq.n	804a770 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 804a76c:	2302      	movs	r3, #2
 804a76e:	e131      	b.n	804a9d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 804a770:	687b      	ldr	r3, [r7, #4]
 804a772:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 804a776:	2050      	movs	r0, #80	; 0x50
 804a778:	f002 fb00 	bl	804cd7c <malloc>
 804a77c:	4603      	mov	r3, r0
 804a77e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a780:	687b      	ldr	r3, [r7, #4]
 804a782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a786:	69db      	ldr	r3, [r3, #28]
 804a788:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 804a78a:	68bb      	ldr	r3, [r7, #8]
 804a78c:	2b00      	cmp	r3, #0
 804a78e:	d101      	bne.n	804a794 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 804a790:	2302      	movs	r3, #2
 804a792:	e11f      	b.n	804a9d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 804a794:	2250      	movs	r2, #80	; 0x50
 804a796:	2100      	movs	r1, #0
 804a798:	68b8      	ldr	r0, [r7, #8]
 804a79a:	f002 faff 	bl	804cd9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a79e:	7bfb      	ldrb	r3, [r7, #15]
 804a7a0:	687a      	ldr	r2, [r7, #4]
 804a7a2:	211a      	movs	r1, #26
 804a7a4:	fb01 f303 	mul.w	r3, r1, r3
 804a7a8:	4413      	add	r3, r2
 804a7aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a7ae:	781b      	ldrb	r3, [r3, #0]
 804a7b0:	b25b      	sxtb	r3, r3
 804a7b2:	2b00      	cmp	r3, #0
 804a7b4:	da15      	bge.n	804a7e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a7b6:	7bfb      	ldrb	r3, [r7, #15]
 804a7b8:	687a      	ldr	r2, [r7, #4]
 804a7ba:	211a      	movs	r1, #26
 804a7bc:	fb01 f303 	mul.w	r3, r1, r3
 804a7c0:	4413      	add	r3, r2
 804a7c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a7c6:	781a      	ldrb	r2, [r3, #0]
 804a7c8:	68bb      	ldr	r3, [r7, #8]
 804a7ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a7cc:	7bfb      	ldrb	r3, [r7, #15]
 804a7ce:	687a      	ldr	r2, [r7, #4]
 804a7d0:	211a      	movs	r1, #26
 804a7d2:	fb01 f303 	mul.w	r3, r1, r3
 804a7d6:	4413      	add	r3, r2
 804a7d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a7dc:	881a      	ldrh	r2, [r3, #0]
 804a7de:	68bb      	ldr	r3, [r7, #8]
 804a7e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 804a7e2:	68bb      	ldr	r3, [r7, #8]
 804a7e4:	785b      	ldrb	r3, [r3, #1]
 804a7e6:	4619      	mov	r1, r3
 804a7e8:	6878      	ldr	r0, [r7, #4]
 804a7ea:	f001 ff2c 	bl	804c646 <USBH_AllocPipe>
 804a7ee:	4603      	mov	r3, r0
 804a7f0:	461a      	mov	r2, r3
 804a7f2:	68bb      	ldr	r3, [r7, #8]
 804a7f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 804a7f6:	68bb      	ldr	r3, [r7, #8]
 804a7f8:	7819      	ldrb	r1, [r3, #0]
 804a7fa:	68bb      	ldr	r3, [r7, #8]
 804a7fc:	7858      	ldrb	r0, [r3, #1]
 804a7fe:	687b      	ldr	r3, [r7, #4]
 804a800:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a804:	687b      	ldr	r3, [r7, #4]
 804a806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a80a:	68ba      	ldr	r2, [r7, #8]
 804a80c:	8952      	ldrh	r2, [r2, #10]
 804a80e:	9202      	str	r2, [sp, #8]
 804a810:	2203      	movs	r2, #3
 804a812:	9201      	str	r2, [sp, #4]
 804a814:	9300      	str	r3, [sp, #0]
 804a816:	4623      	mov	r3, r4
 804a818:	4602      	mov	r2, r0
 804a81a:	6878      	ldr	r0, [r7, #4]
 804a81c:	f001 fee4 	bl	804c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 804a820:	68bb      	ldr	r3, [r7, #8]
 804a822:	781b      	ldrb	r3, [r3, #0]
 804a824:	2200      	movs	r2, #0
 804a826:	4619      	mov	r1, r3
 804a828:	6878      	ldr	r0, [r7, #4]
 804a82a:	f002 f9f9 	bl	804cc20 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 804a82e:	2300      	movs	r3, #0
 804a830:	2200      	movs	r2, #0
 804a832:	210a      	movs	r1, #10
 804a834:	6878      	ldr	r0, [r7, #4]
 804a836:	f000 fbeb 	bl	804b010 <USBH_FindInterface>
 804a83a:	4603      	mov	r3, r0
 804a83c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 804a83e:	7bfb      	ldrb	r3, [r7, #15]
 804a840:	2bff      	cmp	r3, #255	; 0xff
 804a842:	d002      	beq.n	804a84a <USBH_CDC_InterfaceInit+0x11a>
 804a844:	7bfb      	ldrb	r3, [r7, #15]
 804a846:	2b01      	cmp	r3, #1
 804a848:	d901      	bls.n	804a84e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 804a84a:	2302      	movs	r3, #2
 804a84c:	e0c2      	b.n	804a9d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 804a84e:	7bfb      	ldrb	r3, [r7, #15]
 804a850:	687a      	ldr	r2, [r7, #4]
 804a852:	211a      	movs	r1, #26
 804a854:	fb01 f303 	mul.w	r3, r1, r3
 804a858:	4413      	add	r3, r2
 804a85a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a85e:	781b      	ldrb	r3, [r3, #0]
 804a860:	b25b      	sxtb	r3, r3
 804a862:	2b00      	cmp	r3, #0
 804a864:	da16      	bge.n	804a894 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a866:	7bfb      	ldrb	r3, [r7, #15]
 804a868:	687a      	ldr	r2, [r7, #4]
 804a86a:	211a      	movs	r1, #26
 804a86c:	fb01 f303 	mul.w	r3, r1, r3
 804a870:	4413      	add	r3, r2
 804a872:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a876:	781a      	ldrb	r2, [r3, #0]
 804a878:	68bb      	ldr	r3, [r7, #8]
 804a87a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a87c:	7bfb      	ldrb	r3, [r7, #15]
 804a87e:	687a      	ldr	r2, [r7, #4]
 804a880:	211a      	movs	r1, #26
 804a882:	fb01 f303 	mul.w	r3, r1, r3
 804a886:	4413      	add	r3, r2
 804a888:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a88c:	881a      	ldrh	r2, [r3, #0]
 804a88e:	68bb      	ldr	r3, [r7, #8]
 804a890:	835a      	strh	r2, [r3, #26]
 804a892:	e015      	b.n	804a8c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 804a894:	7bfb      	ldrb	r3, [r7, #15]
 804a896:	687a      	ldr	r2, [r7, #4]
 804a898:	211a      	movs	r1, #26
 804a89a:	fb01 f303 	mul.w	r3, r1, r3
 804a89e:	4413      	add	r3, r2
 804a8a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 804a8a4:	781a      	ldrb	r2, [r3, #0]
 804a8a6:	68bb      	ldr	r3, [r7, #8]
 804a8a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 804a8aa:	7bfb      	ldrb	r3, [r7, #15]
 804a8ac:	687a      	ldr	r2, [r7, #4]
 804a8ae:	211a      	movs	r1, #26
 804a8b0:	fb01 f303 	mul.w	r3, r1, r3
 804a8b4:	4413      	add	r3, r2
 804a8b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 804a8ba:	881a      	ldrh	r2, [r3, #0]
 804a8bc:	68bb      	ldr	r3, [r7, #8]
 804a8be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 804a8c0:	7bfb      	ldrb	r3, [r7, #15]
 804a8c2:	687a      	ldr	r2, [r7, #4]
 804a8c4:	211a      	movs	r1, #26
 804a8c6:	fb01 f303 	mul.w	r3, r1, r3
 804a8ca:	4413      	add	r3, r2
 804a8cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a8d0:	781b      	ldrb	r3, [r3, #0]
 804a8d2:	b25b      	sxtb	r3, r3
 804a8d4:	2b00      	cmp	r3, #0
 804a8d6:	da16      	bge.n	804a906 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a8d8:	7bfb      	ldrb	r3, [r7, #15]
 804a8da:	687a      	ldr	r2, [r7, #4]
 804a8dc:	211a      	movs	r1, #26
 804a8de:	fb01 f303 	mul.w	r3, r1, r3
 804a8e2:	4413      	add	r3, r2
 804a8e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a8e8:	781a      	ldrb	r2, [r3, #0]
 804a8ea:	68bb      	ldr	r3, [r7, #8]
 804a8ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a8ee:	7bfb      	ldrb	r3, [r7, #15]
 804a8f0:	687a      	ldr	r2, [r7, #4]
 804a8f2:	211a      	movs	r1, #26
 804a8f4:	fb01 f303 	mul.w	r3, r1, r3
 804a8f8:	4413      	add	r3, r2
 804a8fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a8fe:	881a      	ldrh	r2, [r3, #0]
 804a900:	68bb      	ldr	r3, [r7, #8]
 804a902:	835a      	strh	r2, [r3, #26]
 804a904:	e015      	b.n	804a932 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 804a906:	7bfb      	ldrb	r3, [r7, #15]
 804a908:	687a      	ldr	r2, [r7, #4]
 804a90a:	211a      	movs	r1, #26
 804a90c:	fb01 f303 	mul.w	r3, r1, r3
 804a910:	4413      	add	r3, r2
 804a912:	f203 3356 	addw	r3, r3, #854	; 0x356
 804a916:	781a      	ldrb	r2, [r3, #0]
 804a918:	68bb      	ldr	r3, [r7, #8]
 804a91a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 804a91c:	7bfb      	ldrb	r3, [r7, #15]
 804a91e:	687a      	ldr	r2, [r7, #4]
 804a920:	211a      	movs	r1, #26
 804a922:	fb01 f303 	mul.w	r3, r1, r3
 804a926:	4413      	add	r3, r2
 804a928:	f503 7356 	add.w	r3, r3, #856	; 0x358
 804a92c:	881a      	ldrh	r2, [r3, #0]
 804a92e:	68bb      	ldr	r3, [r7, #8]
 804a930:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 804a932:	68bb      	ldr	r3, [r7, #8]
 804a934:	7b9b      	ldrb	r3, [r3, #14]
 804a936:	4619      	mov	r1, r3
 804a938:	6878      	ldr	r0, [r7, #4]
 804a93a:	f001 fe84 	bl	804c646 <USBH_AllocPipe>
 804a93e:	4603      	mov	r3, r0
 804a940:	461a      	mov	r2, r3
 804a942:	68bb      	ldr	r3, [r7, #8]
 804a944:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 804a946:	68bb      	ldr	r3, [r7, #8]
 804a948:	7bdb      	ldrb	r3, [r3, #15]
 804a94a:	4619      	mov	r1, r3
 804a94c:	6878      	ldr	r0, [r7, #4]
 804a94e:	f001 fe7a 	bl	804c646 <USBH_AllocPipe>
 804a952:	4603      	mov	r3, r0
 804a954:	461a      	mov	r2, r3
 804a956:	68bb      	ldr	r3, [r7, #8]
 804a958:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 804a95a:	68bb      	ldr	r3, [r7, #8]
 804a95c:	7b59      	ldrb	r1, [r3, #13]
 804a95e:	68bb      	ldr	r3, [r7, #8]
 804a960:	7b98      	ldrb	r0, [r3, #14]
 804a962:	687b      	ldr	r3, [r7, #4]
 804a964:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a968:	687b      	ldr	r3, [r7, #4]
 804a96a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a96e:	68ba      	ldr	r2, [r7, #8]
 804a970:	8b12      	ldrh	r2, [r2, #24]
 804a972:	9202      	str	r2, [sp, #8]
 804a974:	2202      	movs	r2, #2
 804a976:	9201      	str	r2, [sp, #4]
 804a978:	9300      	str	r3, [sp, #0]
 804a97a:	4623      	mov	r3, r4
 804a97c:	4602      	mov	r2, r0
 804a97e:	6878      	ldr	r0, [r7, #4]
 804a980:	f001 fe32 	bl	804c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 804a984:	68bb      	ldr	r3, [r7, #8]
 804a986:	7b19      	ldrb	r1, [r3, #12]
 804a988:	68bb      	ldr	r3, [r7, #8]
 804a98a:	7bd8      	ldrb	r0, [r3, #15]
 804a98c:	687b      	ldr	r3, [r7, #4]
 804a98e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 804a992:	687b      	ldr	r3, [r7, #4]
 804a994:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804a998:	68ba      	ldr	r2, [r7, #8]
 804a99a:	8b52      	ldrh	r2, [r2, #26]
 804a99c:	9202      	str	r2, [sp, #8]
 804a99e:	2202      	movs	r2, #2
 804a9a0:	9201      	str	r2, [sp, #4]
 804a9a2:	9300      	str	r3, [sp, #0]
 804a9a4:	4623      	mov	r3, r4
 804a9a6:	4602      	mov	r2, r0
 804a9a8:	6878      	ldr	r0, [r7, #4]
 804a9aa:	f001 fe1d 	bl	804c5e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 804a9ae:	68bb      	ldr	r3, [r7, #8]
 804a9b0:	2200      	movs	r2, #0
 804a9b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 804a9b6:	68bb      	ldr	r3, [r7, #8]
 804a9b8:	7b5b      	ldrb	r3, [r3, #13]
 804a9ba:	2200      	movs	r2, #0
 804a9bc:	4619      	mov	r1, r3
 804a9be:	6878      	ldr	r0, [r7, #4]
 804a9c0:	f002 f92e 	bl	804cc20 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 804a9c4:	68bb      	ldr	r3, [r7, #8]
 804a9c6:	7b1b      	ldrb	r3, [r3, #12]
 804a9c8:	2200      	movs	r2, #0
 804a9ca:	4619      	mov	r1, r3
 804a9cc:	6878      	ldr	r0, [r7, #4]
 804a9ce:	f002 f927 	bl	804cc20 <USBH_LL_SetToggle>

  return USBH_OK;
 804a9d2:	2300      	movs	r3, #0
}
 804a9d4:	4618      	mov	r0, r3
 804a9d6:	3714      	adds	r7, #20
 804a9d8:	46bd      	mov	sp, r7
 804a9da:	bd90      	pop	{r4, r7, pc}

0804a9dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 804a9dc:	b580      	push	{r7, lr}
 804a9de:	b084      	sub	sp, #16
 804a9e0:	af00      	add	r7, sp, #0
 804a9e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804a9e4:	687b      	ldr	r3, [r7, #4]
 804a9e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804a9ea:	69db      	ldr	r3, [r3, #28]
 804a9ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 804a9ee:	68fb      	ldr	r3, [r7, #12]
 804a9f0:	781b      	ldrb	r3, [r3, #0]
 804a9f2:	2b00      	cmp	r3, #0
 804a9f4:	d00e      	beq.n	804aa14 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804a9f6:	68fb      	ldr	r3, [r7, #12]
 804a9f8:	781b      	ldrb	r3, [r3, #0]
 804a9fa:	4619      	mov	r1, r3
 804a9fc:	6878      	ldr	r0, [r7, #4]
 804a9fe:	f001 fe12 	bl	804c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 804aa02:	68fb      	ldr	r3, [r7, #12]
 804aa04:	781b      	ldrb	r3, [r3, #0]
 804aa06:	4619      	mov	r1, r3
 804aa08:	6878      	ldr	r0, [r7, #4]
 804aa0a:	f001 fe3d 	bl	804c688 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 804aa0e:	68fb      	ldr	r3, [r7, #12]
 804aa10:	2200      	movs	r2, #0
 804aa12:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 804aa14:	68fb      	ldr	r3, [r7, #12]
 804aa16:	7b1b      	ldrb	r3, [r3, #12]
 804aa18:	2b00      	cmp	r3, #0
 804aa1a:	d00e      	beq.n	804aa3a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 804aa1c:	68fb      	ldr	r3, [r7, #12]
 804aa1e:	7b1b      	ldrb	r3, [r3, #12]
 804aa20:	4619      	mov	r1, r3
 804aa22:	6878      	ldr	r0, [r7, #4]
 804aa24:	f001 fdff 	bl	804c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 804aa28:	68fb      	ldr	r3, [r7, #12]
 804aa2a:	7b1b      	ldrb	r3, [r3, #12]
 804aa2c:	4619      	mov	r1, r3
 804aa2e:	6878      	ldr	r0, [r7, #4]
 804aa30:	f001 fe2a 	bl	804c688 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 804aa34:	68fb      	ldr	r3, [r7, #12]
 804aa36:	2200      	movs	r2, #0
 804aa38:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 804aa3a:	68fb      	ldr	r3, [r7, #12]
 804aa3c:	7b5b      	ldrb	r3, [r3, #13]
 804aa3e:	2b00      	cmp	r3, #0
 804aa40:	d00e      	beq.n	804aa60 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 804aa42:	68fb      	ldr	r3, [r7, #12]
 804aa44:	7b5b      	ldrb	r3, [r3, #13]
 804aa46:	4619      	mov	r1, r3
 804aa48:	6878      	ldr	r0, [r7, #4]
 804aa4a:	f001 fdec 	bl	804c626 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 804aa4e:	68fb      	ldr	r3, [r7, #12]
 804aa50:	7b5b      	ldrb	r3, [r3, #13]
 804aa52:	4619      	mov	r1, r3
 804aa54:	6878      	ldr	r0, [r7, #4]
 804aa56:	f001 fe17 	bl	804c688 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 804aa5a:	68fb      	ldr	r3, [r7, #12]
 804aa5c:	2200      	movs	r2, #0
 804aa5e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 804aa60:	687b      	ldr	r3, [r7, #4]
 804aa62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aa66:	69db      	ldr	r3, [r3, #28]
 804aa68:	2b00      	cmp	r3, #0
 804aa6a:	d00b      	beq.n	804aa84 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 804aa6c:	687b      	ldr	r3, [r7, #4]
 804aa6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aa72:	69db      	ldr	r3, [r3, #28]
 804aa74:	4618      	mov	r0, r3
 804aa76:	f002 f989 	bl	804cd8c <free>
    phost->pActiveClass->pData = 0U;
 804aa7a:	687b      	ldr	r3, [r7, #4]
 804aa7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aa80:	2200      	movs	r2, #0
 804aa82:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 804aa84:	2300      	movs	r3, #0
}
 804aa86:	4618      	mov	r0, r3
 804aa88:	3710      	adds	r7, #16
 804aa8a:	46bd      	mov	sp, r7
 804aa8c:	bd80      	pop	{r7, pc}

0804aa8e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 804aa8e:	b580      	push	{r7, lr}
 804aa90:	b084      	sub	sp, #16
 804aa92:	af00      	add	r7, sp, #0
 804aa94:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804aa96:	687b      	ldr	r3, [r7, #4]
 804aa98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aa9c:	69db      	ldr	r3, [r3, #28]
 804aa9e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 804aaa0:	68fb      	ldr	r3, [r7, #12]
 804aaa2:	3340      	adds	r3, #64	; 0x40
 804aaa4:	4619      	mov	r1, r3
 804aaa6:	6878      	ldr	r0, [r7, #4]
 804aaa8:	f000 f8b1 	bl	804ac0e <GetLineCoding>
 804aaac:	4603      	mov	r3, r0
 804aaae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 804aab0:	7afb      	ldrb	r3, [r7, #11]
 804aab2:	2b00      	cmp	r3, #0
 804aab4:	d105      	bne.n	804aac2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 804aab6:	687b      	ldr	r3, [r7, #4]
 804aab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804aabc:	2102      	movs	r1, #2
 804aabe:	6878      	ldr	r0, [r7, #4]
 804aac0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 804aac2:	7afb      	ldrb	r3, [r7, #11]
}
 804aac4:	4618      	mov	r0, r3
 804aac6:	3710      	adds	r7, #16
 804aac8:	46bd      	mov	sp, r7
 804aaca:	bd80      	pop	{r7, pc}

0804aacc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 804aacc:	b580      	push	{r7, lr}
 804aace:	b084      	sub	sp, #16
 804aad0:	af00      	add	r7, sp, #0
 804aad2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 804aad4:	2301      	movs	r3, #1
 804aad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 804aad8:	2300      	movs	r3, #0
 804aada:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804aadc:	687b      	ldr	r3, [r7, #4]
 804aade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804aae2:	69db      	ldr	r3, [r3, #28]
 804aae4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 804aae6:	68bb      	ldr	r3, [r7, #8]
 804aae8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 804aaec:	2b04      	cmp	r3, #4
 804aaee:	d877      	bhi.n	804abe0 <USBH_CDC_Process+0x114>
 804aaf0:	a201      	add	r2, pc, #4	; (adr r2, 804aaf8 <USBH_CDC_Process+0x2c>)
 804aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804aaf6:	bf00      	nop
 804aaf8:	0804ab0d 	.word	0x0804ab0d
 804aafc:	0804ab13 	.word	0x0804ab13
 804ab00:	0804ab43 	.word	0x0804ab43
 804ab04:	0804abb7 	.word	0x0804abb7
 804ab08:	0804abc5 	.word	0x0804abc5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 804ab0c:	2300      	movs	r3, #0
 804ab0e:	73fb      	strb	r3, [r7, #15]
      break;
 804ab10:	e06d      	b.n	804abee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 804ab12:	68bb      	ldr	r3, [r7, #8]
 804ab14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ab16:	4619      	mov	r1, r3
 804ab18:	6878      	ldr	r0, [r7, #4]
 804ab1a:	f000 f897 	bl	804ac4c <SetLineCoding>
 804ab1e:	4603      	mov	r3, r0
 804ab20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804ab22:	7bbb      	ldrb	r3, [r7, #14]
 804ab24:	2b00      	cmp	r3, #0
 804ab26:	d104      	bne.n	804ab32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 804ab28:	68bb      	ldr	r3, [r7, #8]
 804ab2a:	2202      	movs	r2, #2
 804ab2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804ab30:	e058      	b.n	804abe4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 804ab32:	7bbb      	ldrb	r3, [r7, #14]
 804ab34:	2b01      	cmp	r3, #1
 804ab36:	d055      	beq.n	804abe4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 804ab38:	68bb      	ldr	r3, [r7, #8]
 804ab3a:	2204      	movs	r2, #4
 804ab3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804ab40:	e050      	b.n	804abe4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 804ab42:	68bb      	ldr	r3, [r7, #8]
 804ab44:	3340      	adds	r3, #64	; 0x40
 804ab46:	4619      	mov	r1, r3
 804ab48:	6878      	ldr	r0, [r7, #4]
 804ab4a:	f000 f860 	bl	804ac0e <GetLineCoding>
 804ab4e:	4603      	mov	r3, r0
 804ab50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804ab52:	7bbb      	ldrb	r3, [r7, #14]
 804ab54:	2b00      	cmp	r3, #0
 804ab56:	d126      	bne.n	804aba6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 804ab58:	68bb      	ldr	r3, [r7, #8]
 804ab5a:	2200      	movs	r2, #0
 804ab5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804ab60:	68bb      	ldr	r3, [r7, #8]
 804ab62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 804ab66:	68bb      	ldr	r3, [r7, #8]
 804ab68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ab6a:	791b      	ldrb	r3, [r3, #4]
 804ab6c:	429a      	cmp	r2, r3
 804ab6e:	d13b      	bne.n	804abe8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804ab70:	68bb      	ldr	r3, [r7, #8]
 804ab72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 804ab76:	68bb      	ldr	r3, [r7, #8]
 804ab78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ab7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 804ab7c:	429a      	cmp	r2, r3
 804ab7e:	d133      	bne.n	804abe8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804ab80:	68bb      	ldr	r3, [r7, #8]
 804ab82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 804ab86:	68bb      	ldr	r3, [r7, #8]
 804ab88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ab8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 804ab8c:	429a      	cmp	r2, r3
 804ab8e:	d12b      	bne.n	804abe8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 804ab90:	68bb      	ldr	r3, [r7, #8]
 804ab92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804ab94:	68bb      	ldr	r3, [r7, #8]
 804ab96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ab98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 804ab9a:	429a      	cmp	r2, r3
 804ab9c:	d124      	bne.n	804abe8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 804ab9e:	6878      	ldr	r0, [r7, #4]
 804aba0:	f000 f958 	bl	804ae54 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 804aba4:	e020      	b.n	804abe8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 804aba6:	7bbb      	ldrb	r3, [r7, #14]
 804aba8:	2b01      	cmp	r3, #1
 804abaa:	d01d      	beq.n	804abe8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 804abac:	68bb      	ldr	r3, [r7, #8]
 804abae:	2204      	movs	r2, #4
 804abb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 804abb4:	e018      	b.n	804abe8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 804abb6:	6878      	ldr	r0, [r7, #4]
 804abb8:	f000 f867 	bl	804ac8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 804abbc:	6878      	ldr	r0, [r7, #4]
 804abbe:	f000 f8da 	bl	804ad76 <CDC_ProcessReception>
      break;
 804abc2:	e014      	b.n	804abee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 804abc4:	2100      	movs	r1, #0
 804abc6:	6878      	ldr	r0, [r7, #4]
 804abc8:	f000 ffef 	bl	804bbaa <USBH_ClrFeature>
 804abcc:	4603      	mov	r3, r0
 804abce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 804abd0:	7bbb      	ldrb	r3, [r7, #14]
 804abd2:	2b00      	cmp	r3, #0
 804abd4:	d10a      	bne.n	804abec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 804abd6:	68bb      	ldr	r3, [r7, #8]
 804abd8:	2200      	movs	r2, #0
 804abda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 804abde:	e005      	b.n	804abec <USBH_CDC_Process+0x120>

    default:
      break;
 804abe0:	bf00      	nop
 804abe2:	e004      	b.n	804abee <USBH_CDC_Process+0x122>
      break;
 804abe4:	bf00      	nop
 804abe6:	e002      	b.n	804abee <USBH_CDC_Process+0x122>
      break;
 804abe8:	bf00      	nop
 804abea:	e000      	b.n	804abee <USBH_CDC_Process+0x122>
      break;
 804abec:	bf00      	nop

  }

  return status;
 804abee:	7bfb      	ldrb	r3, [r7, #15]
}
 804abf0:	4618      	mov	r0, r3
 804abf2:	3710      	adds	r7, #16
 804abf4:	46bd      	mov	sp, r7
 804abf6:	bd80      	pop	{r7, pc}

0804abf8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 804abf8:	b480      	push	{r7}
 804abfa:	b083      	sub	sp, #12
 804abfc:	af00      	add	r7, sp, #0
 804abfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 804ac00:	2300      	movs	r3, #0
}
 804ac02:	4618      	mov	r0, r3
 804ac04:	370c      	adds	r7, #12
 804ac06:	46bd      	mov	sp, r7
 804ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ac0c:	4770      	bx	lr

0804ac0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 804ac0e:	b580      	push	{r7, lr}
 804ac10:	b082      	sub	sp, #8
 804ac12:	af00      	add	r7, sp, #0
 804ac14:	6078      	str	r0, [r7, #4]
 804ac16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 804ac18:	687b      	ldr	r3, [r7, #4]
 804ac1a:	22a1      	movs	r2, #161	; 0xa1
 804ac1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 804ac1e:	687b      	ldr	r3, [r7, #4]
 804ac20:	2221      	movs	r2, #33	; 0x21
 804ac22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804ac24:	687b      	ldr	r3, [r7, #4]
 804ac26:	2200      	movs	r2, #0
 804ac28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 804ac2a:	687b      	ldr	r3, [r7, #4]
 804ac2c:	2200      	movs	r2, #0
 804ac2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804ac30:	687b      	ldr	r3, [r7, #4]
 804ac32:	2207      	movs	r2, #7
 804ac34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804ac36:	683b      	ldr	r3, [r7, #0]
 804ac38:	2207      	movs	r2, #7
 804ac3a:	4619      	mov	r1, r3
 804ac3c:	6878      	ldr	r0, [r7, #4]
 804ac3e:	f001 fa81 	bl	804c144 <USBH_CtlReq>
 804ac42:	4603      	mov	r3, r0
}
 804ac44:	4618      	mov	r0, r3
 804ac46:	3708      	adds	r7, #8
 804ac48:	46bd      	mov	sp, r7
 804ac4a:	bd80      	pop	{r7, pc}

0804ac4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 804ac4c:	b580      	push	{r7, lr}
 804ac4e:	b082      	sub	sp, #8
 804ac50:	af00      	add	r7, sp, #0
 804ac52:	6078      	str	r0, [r7, #4]
 804ac54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 804ac56:	687b      	ldr	r3, [r7, #4]
 804ac58:	2221      	movs	r2, #33	; 0x21
 804ac5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 804ac5c:	687b      	ldr	r3, [r7, #4]
 804ac5e:	2220      	movs	r2, #32
 804ac60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 804ac62:	687b      	ldr	r3, [r7, #4]
 804ac64:	2200      	movs	r2, #0
 804ac66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 804ac68:	687b      	ldr	r3, [r7, #4]
 804ac6a:	2200      	movs	r2, #0
 804ac6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 804ac6e:	687b      	ldr	r3, [r7, #4]
 804ac70:	2207      	movs	r2, #7
 804ac72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 804ac74:	683b      	ldr	r3, [r7, #0]
 804ac76:	2207      	movs	r2, #7
 804ac78:	4619      	mov	r1, r3
 804ac7a:	6878      	ldr	r0, [r7, #4]
 804ac7c:	f001 fa62 	bl	804c144 <USBH_CtlReq>
 804ac80:	4603      	mov	r3, r0
}
 804ac82:	4618      	mov	r0, r3
 804ac84:	3708      	adds	r7, #8
 804ac86:	46bd      	mov	sp, r7
 804ac88:	bd80      	pop	{r7, pc}

0804ac8a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 804ac8a:	b580      	push	{r7, lr}
 804ac8c:	b086      	sub	sp, #24
 804ac8e:	af02      	add	r7, sp, #8
 804ac90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804ac92:	687b      	ldr	r3, [r7, #4]
 804ac94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ac98:	69db      	ldr	r3, [r3, #28]
 804ac9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804ac9c:	2300      	movs	r3, #0
 804ac9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 804aca0:	68fb      	ldr	r3, [r7, #12]
 804aca2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 804aca6:	2b01      	cmp	r3, #1
 804aca8:	d002      	beq.n	804acb0 <CDC_ProcessTransmission+0x26>
 804acaa:	2b02      	cmp	r3, #2
 804acac:	d023      	beq.n	804acf6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 804acae:	e05e      	b.n	804ad6e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804acb0:	68fb      	ldr	r3, [r7, #12]
 804acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804acb4:	68fa      	ldr	r2, [r7, #12]
 804acb6:	8b12      	ldrh	r2, [r2, #24]
 804acb8:	4293      	cmp	r3, r2
 804acba:	d90b      	bls.n	804acd4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 804acbc:	68fb      	ldr	r3, [r7, #12]
 804acbe:	69d9      	ldr	r1, [r3, #28]
 804acc0:	68fb      	ldr	r3, [r7, #12]
 804acc2:	8b1a      	ldrh	r2, [r3, #24]
 804acc4:	68fb      	ldr	r3, [r7, #12]
 804acc6:	7b5b      	ldrb	r3, [r3, #13]
 804acc8:	2001      	movs	r0, #1
 804acca:	9000      	str	r0, [sp, #0]
 804accc:	6878      	ldr	r0, [r7, #4]
 804acce:	f001 fc48 	bl	804c562 <USBH_BulkSendData>
 804acd2:	e00b      	b.n	804acec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 804acd4:	68fb      	ldr	r3, [r7, #12]
 804acd6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 804acd8:	68fb      	ldr	r3, [r7, #12]
 804acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 804acdc:	b29a      	uxth	r2, r3
 804acde:	68fb      	ldr	r3, [r7, #12]
 804ace0:	7b5b      	ldrb	r3, [r3, #13]
 804ace2:	2001      	movs	r0, #1
 804ace4:	9000      	str	r0, [sp, #0]
 804ace6:	6878      	ldr	r0, [r7, #4]
 804ace8:	f001 fc3b 	bl	804c562 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 804acec:	68fb      	ldr	r3, [r7, #12]
 804acee:	2202      	movs	r2, #2
 804acf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804acf4:	e03b      	b.n	804ad6e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 804acf6:	68fb      	ldr	r3, [r7, #12]
 804acf8:	7b5b      	ldrb	r3, [r3, #13]
 804acfa:	4619      	mov	r1, r3
 804acfc:	6878      	ldr	r0, [r7, #4]
 804acfe:	f001 ff65 	bl	804cbcc <USBH_LL_GetURBState>
 804ad02:	4603      	mov	r3, r0
 804ad04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 804ad06:	7afb      	ldrb	r3, [r7, #11]
 804ad08:	2b01      	cmp	r3, #1
 804ad0a:	d128      	bne.n	804ad5e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 804ad0c:	68fb      	ldr	r3, [r7, #12]
 804ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ad10:	68fa      	ldr	r2, [r7, #12]
 804ad12:	8b12      	ldrh	r2, [r2, #24]
 804ad14:	4293      	cmp	r3, r2
 804ad16:	d90e      	bls.n	804ad36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 804ad18:	68fb      	ldr	r3, [r7, #12]
 804ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ad1c:	68fa      	ldr	r2, [r7, #12]
 804ad1e:	8b12      	ldrh	r2, [r2, #24]
 804ad20:	1a9a      	subs	r2, r3, r2
 804ad22:	68fb      	ldr	r3, [r7, #12]
 804ad24:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 804ad26:	68fb      	ldr	r3, [r7, #12]
 804ad28:	69db      	ldr	r3, [r3, #28]
 804ad2a:	68fa      	ldr	r2, [r7, #12]
 804ad2c:	8b12      	ldrh	r2, [r2, #24]
 804ad2e:	441a      	add	r2, r3
 804ad30:	68fb      	ldr	r3, [r7, #12]
 804ad32:	61da      	str	r2, [r3, #28]
 804ad34:	e002      	b.n	804ad3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 804ad36:	68fb      	ldr	r3, [r7, #12]
 804ad38:	2200      	movs	r2, #0
 804ad3a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 804ad3c:	68fb      	ldr	r3, [r7, #12]
 804ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ad40:	2b00      	cmp	r3, #0
 804ad42:	d004      	beq.n	804ad4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804ad44:	68fb      	ldr	r3, [r7, #12]
 804ad46:	2201      	movs	r2, #1
 804ad48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804ad4c:	e00e      	b.n	804ad6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 804ad4e:	68fb      	ldr	r3, [r7, #12]
 804ad50:	2200      	movs	r2, #0
 804ad52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 804ad56:	6878      	ldr	r0, [r7, #4]
 804ad58:	f000 f868 	bl	804ae2c <USBH_CDC_TransmitCallback>
      break;
 804ad5c:	e006      	b.n	804ad6c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 804ad5e:	7afb      	ldrb	r3, [r7, #11]
 804ad60:	2b02      	cmp	r3, #2
 804ad62:	d103      	bne.n	804ad6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 804ad64:	68fb      	ldr	r3, [r7, #12]
 804ad66:	2201      	movs	r2, #1
 804ad68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 804ad6c:	bf00      	nop
  }
}
 804ad6e:	bf00      	nop
 804ad70:	3710      	adds	r7, #16
 804ad72:	46bd      	mov	sp, r7
 804ad74:	bd80      	pop	{r7, pc}

0804ad76 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 804ad76:	b580      	push	{r7, lr}
 804ad78:	b086      	sub	sp, #24
 804ad7a:	af00      	add	r7, sp, #0
 804ad7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 804ad7e:	687b      	ldr	r3, [r7, #4]
 804ad80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804ad84:	69db      	ldr	r3, [r3, #28]
 804ad86:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804ad88:	2300      	movs	r3, #0
 804ad8a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 804ad8c:	697b      	ldr	r3, [r7, #20]
 804ad8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 804ad92:	2b03      	cmp	r3, #3
 804ad94:	d002      	beq.n	804ad9c <CDC_ProcessReception+0x26>
 804ad96:	2b04      	cmp	r3, #4
 804ad98:	d00e      	beq.n	804adb8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 804ad9a:	e043      	b.n	804ae24 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 804ad9c:	697b      	ldr	r3, [r7, #20]
 804ad9e:	6a19      	ldr	r1, [r3, #32]
 804ada0:	697b      	ldr	r3, [r7, #20]
 804ada2:	8b5a      	ldrh	r2, [r3, #26]
 804ada4:	697b      	ldr	r3, [r7, #20]
 804ada6:	7b1b      	ldrb	r3, [r3, #12]
 804ada8:	6878      	ldr	r0, [r7, #4]
 804adaa:	f001 fbff 	bl	804c5ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 804adae:	697b      	ldr	r3, [r7, #20]
 804adb0:	2204      	movs	r2, #4
 804adb2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804adb6:	e035      	b.n	804ae24 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 804adb8:	697b      	ldr	r3, [r7, #20]
 804adba:	7b1b      	ldrb	r3, [r3, #12]
 804adbc:	4619      	mov	r1, r3
 804adbe:	6878      	ldr	r0, [r7, #4]
 804adc0:	f001 ff04 	bl	804cbcc <USBH_LL_GetURBState>
 804adc4:	4603      	mov	r3, r0
 804adc6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 804adc8:	7cfb      	ldrb	r3, [r7, #19]
 804adca:	2b01      	cmp	r3, #1
 804adcc:	d129      	bne.n	804ae22 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 804adce:	697b      	ldr	r3, [r7, #20]
 804add0:	7b1b      	ldrb	r3, [r3, #12]
 804add2:	4619      	mov	r1, r3
 804add4:	6878      	ldr	r0, [r7, #4]
 804add6:	f001 fe67 	bl	804caa8 <USBH_LL_GetLastXferSize>
 804adda:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 804addc:	697b      	ldr	r3, [r7, #20]
 804adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ade0:	68fa      	ldr	r2, [r7, #12]
 804ade2:	429a      	cmp	r2, r3
 804ade4:	d016      	beq.n	804ae14 <CDC_ProcessReception+0x9e>
 804ade6:	697b      	ldr	r3, [r7, #20]
 804ade8:	8b5b      	ldrh	r3, [r3, #26]
 804adea:	461a      	mov	r2, r3
 804adec:	68fb      	ldr	r3, [r7, #12]
 804adee:	4293      	cmp	r3, r2
 804adf0:	d910      	bls.n	804ae14 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 804adf2:	697b      	ldr	r3, [r7, #20]
 804adf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 804adf6:	68fb      	ldr	r3, [r7, #12]
 804adf8:	1ad2      	subs	r2, r2, r3
 804adfa:	697b      	ldr	r3, [r7, #20]
 804adfc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 804adfe:	697b      	ldr	r3, [r7, #20]
 804ae00:	6a1a      	ldr	r2, [r3, #32]
 804ae02:	68fb      	ldr	r3, [r7, #12]
 804ae04:	441a      	add	r2, r3
 804ae06:	697b      	ldr	r3, [r7, #20]
 804ae08:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 804ae0a:	697b      	ldr	r3, [r7, #20]
 804ae0c:	2203      	movs	r2, #3
 804ae0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 804ae12:	e006      	b.n	804ae22 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 804ae14:	697b      	ldr	r3, [r7, #20]
 804ae16:	2200      	movs	r2, #0
 804ae18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 804ae1c:	6878      	ldr	r0, [r7, #4]
 804ae1e:	f000 f80f 	bl	804ae40 <USBH_CDC_ReceiveCallback>
      break;
 804ae22:	bf00      	nop
  }
}
 804ae24:	bf00      	nop
 804ae26:	3718      	adds	r7, #24
 804ae28:	46bd      	mov	sp, r7
 804ae2a:	bd80      	pop	{r7, pc}

0804ae2c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 804ae2c:	b480      	push	{r7}
 804ae2e:	b083      	sub	sp, #12
 804ae30:	af00      	add	r7, sp, #0
 804ae32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804ae34:	bf00      	nop
 804ae36:	370c      	adds	r7, #12
 804ae38:	46bd      	mov	sp, r7
 804ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae3e:	4770      	bx	lr

0804ae40 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 804ae40:	b480      	push	{r7}
 804ae42:	b083      	sub	sp, #12
 804ae44:	af00      	add	r7, sp, #0
 804ae46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804ae48:	bf00      	nop
 804ae4a:	370c      	adds	r7, #12
 804ae4c:	46bd      	mov	sp, r7
 804ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae52:	4770      	bx	lr

0804ae54 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 804ae54:	b480      	push	{r7}
 804ae56:	b083      	sub	sp, #12
 804ae58:	af00      	add	r7, sp, #0
 804ae5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 804ae5c:	bf00      	nop
 804ae5e:	370c      	adds	r7, #12
 804ae60:	46bd      	mov	sp, r7
 804ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ae66:	4770      	bx	lr

0804ae68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 804ae68:	b580      	push	{r7, lr}
 804ae6a:	b084      	sub	sp, #16
 804ae6c:	af00      	add	r7, sp, #0
 804ae6e:	60f8      	str	r0, [r7, #12]
 804ae70:	60b9      	str	r1, [r7, #8]
 804ae72:	4613      	mov	r3, r2
 804ae74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 804ae76:	68fb      	ldr	r3, [r7, #12]
 804ae78:	2b00      	cmp	r3, #0
 804ae7a:	d101      	bne.n	804ae80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 804ae7c:	2302      	movs	r3, #2
 804ae7e:	e029      	b.n	804aed4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 804ae80:	68fb      	ldr	r3, [r7, #12]
 804ae82:	79fa      	ldrb	r2, [r7, #7]
 804ae84:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 804ae88:	68fb      	ldr	r3, [r7, #12]
 804ae8a:	2200      	movs	r2, #0
 804ae8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 804ae90:	68fb      	ldr	r3, [r7, #12]
 804ae92:	2200      	movs	r2, #0
 804ae94:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 804ae98:	68f8      	ldr	r0, [r7, #12]
 804ae9a:	f000 f81f 	bl	804aedc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 804ae9e:	68fb      	ldr	r3, [r7, #12]
 804aea0:	2200      	movs	r2, #0
 804aea2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 804aea6:	68fb      	ldr	r3, [r7, #12]
 804aea8:	2200      	movs	r2, #0
 804aeaa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804aeae:	68fb      	ldr	r3, [r7, #12]
 804aeb0:	2200      	movs	r2, #0
 804aeb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804aeb6:	68fb      	ldr	r3, [r7, #12]
 804aeb8:	2200      	movs	r2, #0
 804aeba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 804aebe:	68bb      	ldr	r3, [r7, #8]
 804aec0:	2b00      	cmp	r3, #0
 804aec2:	d003      	beq.n	804aecc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 804aec4:	68fb      	ldr	r3, [r7, #12]
 804aec6:	68ba      	ldr	r2, [r7, #8]
 804aec8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 804aecc:	68f8      	ldr	r0, [r7, #12]
 804aece:	f001 fd2d 	bl	804c92c <USBH_LL_Init>

  return USBH_OK;
 804aed2:	2300      	movs	r3, #0
}
 804aed4:	4618      	mov	r0, r3
 804aed6:	3710      	adds	r7, #16
 804aed8:	46bd      	mov	sp, r7
 804aeda:	bd80      	pop	{r7, pc}

0804aedc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 804aedc:	b480      	push	{r7}
 804aede:	b085      	sub	sp, #20
 804aee0:	af00      	add	r7, sp, #0
 804aee2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 804aee4:	2300      	movs	r3, #0
 804aee6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804aee8:	2300      	movs	r3, #0
 804aeea:	60fb      	str	r3, [r7, #12]
 804aeec:	e009      	b.n	804af02 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 804aeee:	687a      	ldr	r2, [r7, #4]
 804aef0:	68fb      	ldr	r3, [r7, #12]
 804aef2:	33e0      	adds	r3, #224	; 0xe0
 804aef4:	009b      	lsls	r3, r3, #2
 804aef6:	4413      	add	r3, r2
 804aef8:	2200      	movs	r2, #0
 804aefa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 804aefc:	68fb      	ldr	r3, [r7, #12]
 804aefe:	3301      	adds	r3, #1
 804af00:	60fb      	str	r3, [r7, #12]
 804af02:	68fb      	ldr	r3, [r7, #12]
 804af04:	2b0f      	cmp	r3, #15
 804af06:	d9f2      	bls.n	804aeee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804af08:	2300      	movs	r3, #0
 804af0a:	60fb      	str	r3, [r7, #12]
 804af0c:	e009      	b.n	804af22 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 804af0e:	687a      	ldr	r2, [r7, #4]
 804af10:	68fb      	ldr	r3, [r7, #12]
 804af12:	4413      	add	r3, r2
 804af14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804af18:	2200      	movs	r2, #0
 804af1a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 804af1c:	68fb      	ldr	r3, [r7, #12]
 804af1e:	3301      	adds	r3, #1
 804af20:	60fb      	str	r3, [r7, #12]
 804af22:	68fb      	ldr	r3, [r7, #12]
 804af24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804af28:	d3f1      	bcc.n	804af0e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 804af2a:	687b      	ldr	r3, [r7, #4]
 804af2c:	2200      	movs	r2, #0
 804af2e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 804af30:	687b      	ldr	r3, [r7, #4]
 804af32:	2200      	movs	r2, #0
 804af34:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 804af36:	687b      	ldr	r3, [r7, #4]
 804af38:	2201      	movs	r2, #1
 804af3a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 804af3c:	687b      	ldr	r3, [r7, #4]
 804af3e:	2200      	movs	r2, #0
 804af40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 804af44:	687b      	ldr	r3, [r7, #4]
 804af46:	2201      	movs	r2, #1
 804af48:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 804af4a:	687b      	ldr	r3, [r7, #4]
 804af4c:	2240      	movs	r2, #64	; 0x40
 804af4e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 804af50:	687b      	ldr	r3, [r7, #4]
 804af52:	2200      	movs	r2, #0
 804af54:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 804af56:	687b      	ldr	r3, [r7, #4]
 804af58:	2200      	movs	r2, #0
 804af5a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 804af5e:	687b      	ldr	r3, [r7, #4]
 804af60:	2201      	movs	r2, #1
 804af62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 804af66:	687b      	ldr	r3, [r7, #4]
 804af68:	2200      	movs	r2, #0
 804af6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 804af6e:	687b      	ldr	r3, [r7, #4]
 804af70:	2200      	movs	r2, #0
 804af72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 804af76:	2300      	movs	r3, #0
}
 804af78:	4618      	mov	r0, r3
 804af7a:	3714      	adds	r7, #20
 804af7c:	46bd      	mov	sp, r7
 804af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804af82:	4770      	bx	lr

0804af84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 804af84:	b480      	push	{r7}
 804af86:	b085      	sub	sp, #20
 804af88:	af00      	add	r7, sp, #0
 804af8a:	6078      	str	r0, [r7, #4]
 804af8c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 804af8e:	2300      	movs	r3, #0
 804af90:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 804af92:	683b      	ldr	r3, [r7, #0]
 804af94:	2b00      	cmp	r3, #0
 804af96:	d016      	beq.n	804afc6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 804af98:	687b      	ldr	r3, [r7, #4]
 804af9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804af9e:	2b00      	cmp	r3, #0
 804afa0:	d10e      	bne.n	804afc0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 804afa2:	687b      	ldr	r3, [r7, #4]
 804afa4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804afa8:	1c59      	adds	r1, r3, #1
 804afaa:	687a      	ldr	r2, [r7, #4]
 804afac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 804afb0:	687a      	ldr	r2, [r7, #4]
 804afb2:	33de      	adds	r3, #222	; 0xde
 804afb4:	6839      	ldr	r1, [r7, #0]
 804afb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 804afba:	2300      	movs	r3, #0
 804afbc:	73fb      	strb	r3, [r7, #15]
 804afbe:	e004      	b.n	804afca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 804afc0:	2302      	movs	r3, #2
 804afc2:	73fb      	strb	r3, [r7, #15]
 804afc4:	e001      	b.n	804afca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 804afc6:	2302      	movs	r3, #2
 804afc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804afca:	7bfb      	ldrb	r3, [r7, #15]
}
 804afcc:	4618      	mov	r0, r3
 804afce:	3714      	adds	r7, #20
 804afd0:	46bd      	mov	sp, r7
 804afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804afd6:	4770      	bx	lr

0804afd8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 804afd8:	b480      	push	{r7}
 804afda:	b085      	sub	sp, #20
 804afdc:	af00      	add	r7, sp, #0
 804afde:	6078      	str	r0, [r7, #4]
 804afe0:	460b      	mov	r3, r1
 804afe2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 804afe4:	2300      	movs	r3, #0
 804afe6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 804afe8:	687b      	ldr	r3, [r7, #4]
 804afea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 804afee:	78fa      	ldrb	r2, [r7, #3]
 804aff0:	429a      	cmp	r2, r3
 804aff2:	d204      	bcs.n	804affe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 804aff4:	687b      	ldr	r3, [r7, #4]
 804aff6:	78fa      	ldrb	r2, [r7, #3]
 804aff8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 804affc:	e001      	b.n	804b002 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 804affe:	2302      	movs	r3, #2
 804b000:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804b002:	7bfb      	ldrb	r3, [r7, #15]
}
 804b004:	4618      	mov	r0, r3
 804b006:	3714      	adds	r7, #20
 804b008:	46bd      	mov	sp, r7
 804b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b00e:	4770      	bx	lr

0804b010 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 804b010:	b480      	push	{r7}
 804b012:	b087      	sub	sp, #28
 804b014:	af00      	add	r7, sp, #0
 804b016:	6078      	str	r0, [r7, #4]
 804b018:	4608      	mov	r0, r1
 804b01a:	4611      	mov	r1, r2
 804b01c:	461a      	mov	r2, r3
 804b01e:	4603      	mov	r3, r0
 804b020:	70fb      	strb	r3, [r7, #3]
 804b022:	460b      	mov	r3, r1
 804b024:	70bb      	strb	r3, [r7, #2]
 804b026:	4613      	mov	r3, r2
 804b028:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 804b02a:	2300      	movs	r3, #0
 804b02c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 804b02e:	2300      	movs	r3, #0
 804b030:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 804b032:	687b      	ldr	r3, [r7, #4]
 804b034:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804b038:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b03a:	e025      	b.n	804b088 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 804b03c:	7dfb      	ldrb	r3, [r7, #23]
 804b03e:	221a      	movs	r2, #26
 804b040:	fb02 f303 	mul.w	r3, r2, r3
 804b044:	3308      	adds	r3, #8
 804b046:	68fa      	ldr	r2, [r7, #12]
 804b048:	4413      	add	r3, r2
 804b04a:	3302      	adds	r3, #2
 804b04c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b04e:	693b      	ldr	r3, [r7, #16]
 804b050:	795b      	ldrb	r3, [r3, #5]
 804b052:	78fa      	ldrb	r2, [r7, #3]
 804b054:	429a      	cmp	r2, r3
 804b056:	d002      	beq.n	804b05e <USBH_FindInterface+0x4e>
 804b058:	78fb      	ldrb	r3, [r7, #3]
 804b05a:	2bff      	cmp	r3, #255	; 0xff
 804b05c:	d111      	bne.n	804b082 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b05e:	693b      	ldr	r3, [r7, #16]
 804b060:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 804b062:	78ba      	ldrb	r2, [r7, #2]
 804b064:	429a      	cmp	r2, r3
 804b066:	d002      	beq.n	804b06e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b068:	78bb      	ldrb	r3, [r7, #2]
 804b06a:	2bff      	cmp	r3, #255	; 0xff
 804b06c:	d109      	bne.n	804b082 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b06e:	693b      	ldr	r3, [r7, #16]
 804b070:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 804b072:	787a      	ldrb	r2, [r7, #1]
 804b074:	429a      	cmp	r2, r3
 804b076:	d002      	beq.n	804b07e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 804b078:	787b      	ldrb	r3, [r7, #1]
 804b07a:	2bff      	cmp	r3, #255	; 0xff
 804b07c:	d101      	bne.n	804b082 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 804b07e:	7dfb      	ldrb	r3, [r7, #23]
 804b080:	e006      	b.n	804b090 <USBH_FindInterface+0x80>
    }
    if_ix++;
 804b082:	7dfb      	ldrb	r3, [r7, #23]
 804b084:	3301      	adds	r3, #1
 804b086:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 804b088:	7dfb      	ldrb	r3, [r7, #23]
 804b08a:	2b01      	cmp	r3, #1
 804b08c:	d9d6      	bls.n	804b03c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 804b08e:	23ff      	movs	r3, #255	; 0xff
}
 804b090:	4618      	mov	r0, r3
 804b092:	371c      	adds	r7, #28
 804b094:	46bd      	mov	sp, r7
 804b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b09a:	4770      	bx	lr

0804b09c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 804b09c:	b580      	push	{r7, lr}
 804b09e:	b082      	sub	sp, #8
 804b0a0:	af00      	add	r7, sp, #0
 804b0a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 804b0a4:	6878      	ldr	r0, [r7, #4]
 804b0a6:	f001 fc87 	bl	804c9b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 804b0aa:	2101      	movs	r1, #1
 804b0ac:	6878      	ldr	r0, [r7, #4]
 804b0ae:	f001 fda0 	bl	804cbf2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 804b0b2:	2300      	movs	r3, #0
}
 804b0b4:	4618      	mov	r0, r3
 804b0b6:	3708      	adds	r7, #8
 804b0b8:	46bd      	mov	sp, r7
 804b0ba:	bd80      	pop	{r7, pc}

0804b0bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 804b0bc:	b580      	push	{r7, lr}
 804b0be:	b088      	sub	sp, #32
 804b0c0:	af04      	add	r7, sp, #16
 804b0c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 804b0c4:	2302      	movs	r3, #2
 804b0c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 804b0c8:	2300      	movs	r3, #0
 804b0ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 804b0cc:	687b      	ldr	r3, [r7, #4]
 804b0ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 804b0d2:	b2db      	uxtb	r3, r3
 804b0d4:	2b01      	cmp	r3, #1
 804b0d6:	d102      	bne.n	804b0de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 804b0d8:	687b      	ldr	r3, [r7, #4]
 804b0da:	2203      	movs	r2, #3
 804b0dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 804b0de:	687b      	ldr	r3, [r7, #4]
 804b0e0:	781b      	ldrb	r3, [r3, #0]
 804b0e2:	b2db      	uxtb	r3, r3
 804b0e4:	2b0b      	cmp	r3, #11
 804b0e6:	f200 81be 	bhi.w	804b466 <USBH_Process+0x3aa>
 804b0ea:	a201      	add	r2, pc, #4	; (adr r2, 804b0f0 <USBH_Process+0x34>)
 804b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b0f0:	0804b121 	.word	0x0804b121
 804b0f4:	0804b153 	.word	0x0804b153
 804b0f8:	0804b1bb 	.word	0x0804b1bb
 804b0fc:	0804b401 	.word	0x0804b401
 804b100:	0804b467 	.word	0x0804b467
 804b104:	0804b25f 	.word	0x0804b25f
 804b108:	0804b3a7 	.word	0x0804b3a7
 804b10c:	0804b295 	.word	0x0804b295
 804b110:	0804b2b5 	.word	0x0804b2b5
 804b114:	0804b2d5 	.word	0x0804b2d5
 804b118:	0804b319 	.word	0x0804b319
 804b11c:	0804b3e9 	.word	0x0804b3e9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 804b120:	687b      	ldr	r3, [r7, #4]
 804b122:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 804b126:	b2db      	uxtb	r3, r3
 804b128:	2b00      	cmp	r3, #0
 804b12a:	f000 819e 	beq.w	804b46a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 804b12e:	687b      	ldr	r3, [r7, #4]
 804b130:	2201      	movs	r2, #1
 804b132:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 804b134:	20c8      	movs	r0, #200	; 0xc8
 804b136:	f001 fda3 	bl	804cc80 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 804b13a:	6878      	ldr	r0, [r7, #4]
 804b13c:	f001 fc99 	bl	804ca72 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 804b140:	687b      	ldr	r3, [r7, #4]
 804b142:	2200      	movs	r2, #0
 804b144:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 804b148:	687b      	ldr	r3, [r7, #4]
 804b14a:	2200      	movs	r2, #0
 804b14c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b150:	e18b      	b.n	804b46a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 804b152:	687b      	ldr	r3, [r7, #4]
 804b154:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 804b158:	2b01      	cmp	r3, #1
 804b15a:	d107      	bne.n	804b16c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 804b15c:	687b      	ldr	r3, [r7, #4]
 804b15e:	2200      	movs	r2, #0
 804b160:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 804b164:	687b      	ldr	r3, [r7, #4]
 804b166:	2202      	movs	r2, #2
 804b168:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b16a:	e18d      	b.n	804b488 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 804b16c:	687b      	ldr	r3, [r7, #4]
 804b16e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804b176:	d914      	bls.n	804b1a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 804b178:	687b      	ldr	r3, [r7, #4]
 804b17a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b17e:	3301      	adds	r3, #1
 804b180:	b2da      	uxtb	r2, r3
 804b182:	687b      	ldr	r3, [r7, #4]
 804b184:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 804b188:	687b      	ldr	r3, [r7, #4]
 804b18a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 804b18e:	2b03      	cmp	r3, #3
 804b190:	d903      	bls.n	804b19a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 804b192:	687b      	ldr	r3, [r7, #4]
 804b194:	220d      	movs	r2, #13
 804b196:	701a      	strb	r2, [r3, #0]
      break;
 804b198:	e176      	b.n	804b488 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 804b19a:	687b      	ldr	r3, [r7, #4]
 804b19c:	2200      	movs	r2, #0
 804b19e:	701a      	strb	r2, [r3, #0]
      break;
 804b1a0:	e172      	b.n	804b488 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 804b1a2:	687b      	ldr	r3, [r7, #4]
 804b1a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 804b1a8:	f103 020a 	add.w	r2, r3, #10
 804b1ac:	687b      	ldr	r3, [r7, #4]
 804b1ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 804b1b2:	200a      	movs	r0, #10
 804b1b4:	f001 fd64 	bl	804cc80 <USBH_Delay>
      break;
 804b1b8:	e166      	b.n	804b488 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 804b1ba:	687b      	ldr	r3, [r7, #4]
 804b1bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b1c0:	2b00      	cmp	r3, #0
 804b1c2:	d005      	beq.n	804b1d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 804b1c4:	687b      	ldr	r3, [r7, #4]
 804b1c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b1ca:	2104      	movs	r1, #4
 804b1cc:	6878      	ldr	r0, [r7, #4]
 804b1ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 804b1d0:	2064      	movs	r0, #100	; 0x64
 804b1d2:	f001 fd55 	bl	804cc80 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 804b1d6:	6878      	ldr	r0, [r7, #4]
 804b1d8:	f001 fc24 	bl	804ca24 <USBH_LL_GetSpeed>
 804b1dc:	4603      	mov	r3, r0
 804b1de:	461a      	mov	r2, r3
 804b1e0:	687b      	ldr	r3, [r7, #4]
 804b1e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 804b1e6:	687b      	ldr	r3, [r7, #4]
 804b1e8:	2205      	movs	r2, #5
 804b1ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 804b1ec:	2100      	movs	r1, #0
 804b1ee:	6878      	ldr	r0, [r7, #4]
 804b1f0:	f001 fa29 	bl	804c646 <USBH_AllocPipe>
 804b1f4:	4603      	mov	r3, r0
 804b1f6:	461a      	mov	r2, r3
 804b1f8:	687b      	ldr	r3, [r7, #4]
 804b1fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 804b1fc:	2180      	movs	r1, #128	; 0x80
 804b1fe:	6878      	ldr	r0, [r7, #4]
 804b200:	f001 fa21 	bl	804c646 <USBH_AllocPipe>
 804b204:	4603      	mov	r3, r0
 804b206:	461a      	mov	r2, r3
 804b208:	687b      	ldr	r3, [r7, #4]
 804b20a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804b20c:	687b      	ldr	r3, [r7, #4]
 804b20e:	7919      	ldrb	r1, [r3, #4]
 804b210:	687b      	ldr	r3, [r7, #4]
 804b212:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b216:	687b      	ldr	r3, [r7, #4]
 804b218:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804b21c:	687a      	ldr	r2, [r7, #4]
 804b21e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 804b220:	b292      	uxth	r2, r2
 804b222:	9202      	str	r2, [sp, #8]
 804b224:	2200      	movs	r2, #0
 804b226:	9201      	str	r2, [sp, #4]
 804b228:	9300      	str	r3, [sp, #0]
 804b22a:	4603      	mov	r3, r0
 804b22c:	2280      	movs	r2, #128	; 0x80
 804b22e:	6878      	ldr	r0, [r7, #4]
 804b230:	f001 f9da 	bl	804c5e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804b234:	687b      	ldr	r3, [r7, #4]
 804b236:	7959      	ldrb	r1, [r3, #5]
 804b238:	687b      	ldr	r3, [r7, #4]
 804b23a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b23e:	687b      	ldr	r3, [r7, #4]
 804b240:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 804b244:	687a      	ldr	r2, [r7, #4]
 804b246:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 804b248:	b292      	uxth	r2, r2
 804b24a:	9202      	str	r2, [sp, #8]
 804b24c:	2200      	movs	r2, #0
 804b24e:	9201      	str	r2, [sp, #4]
 804b250:	9300      	str	r3, [sp, #0]
 804b252:	4603      	mov	r3, r0
 804b254:	2200      	movs	r2, #0
 804b256:	6878      	ldr	r0, [r7, #4]
 804b258:	f001 f9c6 	bl	804c5e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b25c:	e114      	b.n	804b488 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 804b25e:	6878      	ldr	r0, [r7, #4]
 804b260:	f000 f918 	bl	804b494 <USBH_HandleEnum>
 804b264:	4603      	mov	r3, r0
 804b266:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 804b268:	7bbb      	ldrb	r3, [r7, #14]
 804b26a:	b2db      	uxtb	r3, r3
 804b26c:	2b00      	cmp	r3, #0
 804b26e:	f040 80fe 	bne.w	804b46e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 804b272:	687b      	ldr	r3, [r7, #4]
 804b274:	2200      	movs	r2, #0
 804b276:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 804b27a:	687b      	ldr	r3, [r7, #4]
 804b27c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 804b280:	2b01      	cmp	r3, #1
 804b282:	d103      	bne.n	804b28c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 804b284:	687b      	ldr	r3, [r7, #4]
 804b286:	2208      	movs	r2, #8
 804b288:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b28a:	e0f0      	b.n	804b46e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 804b28c:	687b      	ldr	r3, [r7, #4]
 804b28e:	2207      	movs	r2, #7
 804b290:	701a      	strb	r2, [r3, #0]
      break;
 804b292:	e0ec      	b.n	804b46e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 804b294:	687b      	ldr	r3, [r7, #4]
 804b296:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b29a:	2b00      	cmp	r3, #0
 804b29c:	f000 80e9 	beq.w	804b472 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 804b2a0:	687b      	ldr	r3, [r7, #4]
 804b2a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b2a6:	2101      	movs	r1, #1
 804b2a8:	6878      	ldr	r0, [r7, #4]
 804b2aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 804b2ac:	687b      	ldr	r3, [r7, #4]
 804b2ae:	2208      	movs	r2, #8
 804b2b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 804b2b2:	e0de      	b.n	804b472 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 804b2b4:	687b      	ldr	r3, [r7, #4]
 804b2b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 804b2ba:	b29b      	uxth	r3, r3
 804b2bc:	4619      	mov	r1, r3
 804b2be:	6878      	ldr	r0, [r7, #4]
 804b2c0:	f000 fc2c 	bl	804bb1c <USBH_SetCfg>
 804b2c4:	4603      	mov	r3, r0
 804b2c6:	2b00      	cmp	r3, #0
 804b2c8:	f040 80d5 	bne.w	804b476 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 804b2cc:	687b      	ldr	r3, [r7, #4]
 804b2ce:	2209      	movs	r2, #9
 804b2d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b2d2:	e0d0      	b.n	804b476 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 804b2d4:	687b      	ldr	r3, [r7, #4]
 804b2d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 804b2da:	f003 0320 	and.w	r3, r3, #32
 804b2de:	2b00      	cmp	r3, #0
 804b2e0:	d016      	beq.n	804b310 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 804b2e2:	2101      	movs	r1, #1
 804b2e4:	6878      	ldr	r0, [r7, #4]
 804b2e6:	f000 fc3c 	bl	804bb62 <USBH_SetFeature>
 804b2ea:	4603      	mov	r3, r0
 804b2ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804b2ee:	7bbb      	ldrb	r3, [r7, #14]
 804b2f0:	b2db      	uxtb	r3, r3
 804b2f2:	2b00      	cmp	r3, #0
 804b2f4:	d103      	bne.n	804b2fe <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 804b2f6:	687b      	ldr	r3, [r7, #4]
 804b2f8:	220a      	movs	r2, #10
 804b2fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b2fc:	e0bd      	b.n	804b47a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 804b2fe:	7bbb      	ldrb	r3, [r7, #14]
 804b300:	b2db      	uxtb	r3, r3
 804b302:	2b03      	cmp	r3, #3
 804b304:	f040 80b9 	bne.w	804b47a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 804b308:	687b      	ldr	r3, [r7, #4]
 804b30a:	220a      	movs	r2, #10
 804b30c:	701a      	strb	r2, [r3, #0]
      break;
 804b30e:	e0b4      	b.n	804b47a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 804b310:	687b      	ldr	r3, [r7, #4]
 804b312:	220a      	movs	r2, #10
 804b314:	701a      	strb	r2, [r3, #0]
      break;
 804b316:	e0b0      	b.n	804b47a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 804b318:	687b      	ldr	r3, [r7, #4]
 804b31a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 804b31e:	2b00      	cmp	r3, #0
 804b320:	f000 80ad 	beq.w	804b47e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 804b324:	687b      	ldr	r3, [r7, #4]
 804b326:	2200      	movs	r2, #0
 804b328:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804b32c:	2300      	movs	r3, #0
 804b32e:	73fb      	strb	r3, [r7, #15]
 804b330:	e016      	b.n	804b360 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 804b332:	7bfa      	ldrb	r2, [r7, #15]
 804b334:	687b      	ldr	r3, [r7, #4]
 804b336:	32de      	adds	r2, #222	; 0xde
 804b338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804b33c:	791a      	ldrb	r2, [r3, #4]
 804b33e:	687b      	ldr	r3, [r7, #4]
 804b340:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 804b344:	429a      	cmp	r2, r3
 804b346:	d108      	bne.n	804b35a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 804b348:	7bfa      	ldrb	r2, [r7, #15]
 804b34a:	687b      	ldr	r3, [r7, #4]
 804b34c:	32de      	adds	r2, #222	; 0xde
 804b34e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 804b352:	687b      	ldr	r3, [r7, #4]
 804b354:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 804b358:	e005      	b.n	804b366 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 804b35a:	7bfb      	ldrb	r3, [r7, #15]
 804b35c:	3301      	adds	r3, #1
 804b35e:	73fb      	strb	r3, [r7, #15]
 804b360:	7bfb      	ldrb	r3, [r7, #15]
 804b362:	2b00      	cmp	r3, #0
 804b364:	d0e5      	beq.n	804b332 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 804b366:	687b      	ldr	r3, [r7, #4]
 804b368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b36c:	2b00      	cmp	r3, #0
 804b36e:	d016      	beq.n	804b39e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 804b370:	687b      	ldr	r3, [r7, #4]
 804b372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b376:	689b      	ldr	r3, [r3, #8]
 804b378:	6878      	ldr	r0, [r7, #4]
 804b37a:	4798      	blx	r3
 804b37c:	4603      	mov	r3, r0
 804b37e:	2b00      	cmp	r3, #0
 804b380:	d109      	bne.n	804b396 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 804b382:	687b      	ldr	r3, [r7, #4]
 804b384:	2206      	movs	r2, #6
 804b386:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 804b388:	687b      	ldr	r3, [r7, #4]
 804b38a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b38e:	2103      	movs	r1, #3
 804b390:	6878      	ldr	r0, [r7, #4]
 804b392:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b394:	e073      	b.n	804b47e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 804b396:	687b      	ldr	r3, [r7, #4]
 804b398:	220d      	movs	r2, #13
 804b39a:	701a      	strb	r2, [r3, #0]
      break;
 804b39c:	e06f      	b.n	804b47e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 804b39e:	687b      	ldr	r3, [r7, #4]
 804b3a0:	220d      	movs	r2, #13
 804b3a2:	701a      	strb	r2, [r3, #0]
      break;
 804b3a4:	e06b      	b.n	804b47e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 804b3a6:	687b      	ldr	r3, [r7, #4]
 804b3a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b3ac:	2b00      	cmp	r3, #0
 804b3ae:	d017      	beq.n	804b3e0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 804b3b0:	687b      	ldr	r3, [r7, #4]
 804b3b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b3b6:	691b      	ldr	r3, [r3, #16]
 804b3b8:	6878      	ldr	r0, [r7, #4]
 804b3ba:	4798      	blx	r3
 804b3bc:	4603      	mov	r3, r0
 804b3be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 804b3c0:	7bbb      	ldrb	r3, [r7, #14]
 804b3c2:	b2db      	uxtb	r3, r3
 804b3c4:	2b00      	cmp	r3, #0
 804b3c6:	d103      	bne.n	804b3d0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 804b3c8:	687b      	ldr	r3, [r7, #4]
 804b3ca:	220b      	movs	r2, #11
 804b3cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b3ce:	e058      	b.n	804b482 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 804b3d0:	7bbb      	ldrb	r3, [r7, #14]
 804b3d2:	b2db      	uxtb	r3, r3
 804b3d4:	2b02      	cmp	r3, #2
 804b3d6:	d154      	bne.n	804b482 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 804b3d8:	687b      	ldr	r3, [r7, #4]
 804b3da:	220d      	movs	r2, #13
 804b3dc:	701a      	strb	r2, [r3, #0]
      break;
 804b3de:	e050      	b.n	804b482 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 804b3e0:	687b      	ldr	r3, [r7, #4]
 804b3e2:	220d      	movs	r2, #13
 804b3e4:	701a      	strb	r2, [r3, #0]
      break;
 804b3e6:	e04c      	b.n	804b482 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 804b3e8:	687b      	ldr	r3, [r7, #4]
 804b3ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b3ee:	2b00      	cmp	r3, #0
 804b3f0:	d049      	beq.n	804b486 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 804b3f2:	687b      	ldr	r3, [r7, #4]
 804b3f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b3f8:	695b      	ldr	r3, [r3, #20]
 804b3fa:	6878      	ldr	r0, [r7, #4]
 804b3fc:	4798      	blx	r3
      }
      break;
 804b3fe:	e042      	b.n	804b486 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 804b400:	687b      	ldr	r3, [r7, #4]
 804b402:	2200      	movs	r2, #0
 804b404:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 804b408:	6878      	ldr	r0, [r7, #4]
 804b40a:	f7ff fd67 	bl	804aedc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 804b40e:	687b      	ldr	r3, [r7, #4]
 804b410:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b414:	2b00      	cmp	r3, #0
 804b416:	d009      	beq.n	804b42c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 804b418:	687b      	ldr	r3, [r7, #4]
 804b41a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b41e:	68db      	ldr	r3, [r3, #12]
 804b420:	6878      	ldr	r0, [r7, #4]
 804b422:	4798      	blx	r3
        phost->pActiveClass = NULL;
 804b424:	687b      	ldr	r3, [r7, #4]
 804b426:	2200      	movs	r2, #0
 804b428:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 804b42c:	687b      	ldr	r3, [r7, #4]
 804b42e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b432:	2b00      	cmp	r3, #0
 804b434:	d005      	beq.n	804b442 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 804b436:	687b      	ldr	r3, [r7, #4]
 804b438:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804b43c:	2105      	movs	r1, #5
 804b43e:	6878      	ldr	r0, [r7, #4]
 804b440:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 804b442:	687b      	ldr	r3, [r7, #4]
 804b444:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 804b448:	b2db      	uxtb	r3, r3
 804b44a:	2b01      	cmp	r3, #1
 804b44c:	d107      	bne.n	804b45e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 804b44e:	687b      	ldr	r3, [r7, #4]
 804b450:	2200      	movs	r2, #0
 804b452:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 804b456:	6878      	ldr	r0, [r7, #4]
 804b458:	f7ff fe20 	bl	804b09c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 804b45c:	e014      	b.n	804b488 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 804b45e:	6878      	ldr	r0, [r7, #4]
 804b460:	f001 faaa 	bl	804c9b8 <USBH_LL_Start>
      break;
 804b464:	e010      	b.n	804b488 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 804b466:	bf00      	nop
 804b468:	e00e      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b46a:	bf00      	nop
 804b46c:	e00c      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b46e:	bf00      	nop
 804b470:	e00a      	b.n	804b488 <USBH_Process+0x3cc>
    break;
 804b472:	bf00      	nop
 804b474:	e008      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b476:	bf00      	nop
 804b478:	e006      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b47a:	bf00      	nop
 804b47c:	e004      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b47e:	bf00      	nop
 804b480:	e002      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b482:	bf00      	nop
 804b484:	e000      	b.n	804b488 <USBH_Process+0x3cc>
      break;
 804b486:	bf00      	nop
  }
  return USBH_OK;
 804b488:	2300      	movs	r3, #0
}
 804b48a:	4618      	mov	r0, r3
 804b48c:	3710      	adds	r7, #16
 804b48e:	46bd      	mov	sp, r7
 804b490:	bd80      	pop	{r7, pc}
 804b492:	bf00      	nop

0804b494 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 804b494:	b580      	push	{r7, lr}
 804b496:	b088      	sub	sp, #32
 804b498:	af04      	add	r7, sp, #16
 804b49a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 804b49c:	2301      	movs	r3, #1
 804b49e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 804b4a0:	2301      	movs	r3, #1
 804b4a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 804b4a4:	687b      	ldr	r3, [r7, #4]
 804b4a6:	785b      	ldrb	r3, [r3, #1]
 804b4a8:	2b07      	cmp	r3, #7
 804b4aa:	f200 81c1 	bhi.w	804b830 <USBH_HandleEnum+0x39c>
 804b4ae:	a201      	add	r2, pc, #4	; (adr r2, 804b4b4 <USBH_HandleEnum+0x20>)
 804b4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804b4b4:	0804b4d5 	.word	0x0804b4d5
 804b4b8:	0804b593 	.word	0x0804b593
 804b4bc:	0804b5fd 	.word	0x0804b5fd
 804b4c0:	0804b68b 	.word	0x0804b68b
 804b4c4:	0804b6f5 	.word	0x0804b6f5
 804b4c8:	0804b765 	.word	0x0804b765
 804b4cc:	0804b7ab 	.word	0x0804b7ab
 804b4d0:	0804b7f1 	.word	0x0804b7f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 804b4d4:	2108      	movs	r1, #8
 804b4d6:	6878      	ldr	r0, [r7, #4]
 804b4d8:	f000 fa50 	bl	804b97c <USBH_Get_DevDesc>
 804b4dc:	4603      	mov	r3, r0
 804b4de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b4e0:	7bbb      	ldrb	r3, [r7, #14]
 804b4e2:	2b00      	cmp	r3, #0
 804b4e4:	d130      	bne.n	804b548 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 804b4e6:	687b      	ldr	r3, [r7, #4]
 804b4e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 804b4ec:	687b      	ldr	r3, [r7, #4]
 804b4ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 804b4f0:	687b      	ldr	r3, [r7, #4]
 804b4f2:	2201      	movs	r2, #1
 804b4f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804b4f6:	687b      	ldr	r3, [r7, #4]
 804b4f8:	7919      	ldrb	r1, [r3, #4]
 804b4fa:	687b      	ldr	r3, [r7, #4]
 804b4fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b500:	687b      	ldr	r3, [r7, #4]
 804b502:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b506:	687a      	ldr	r2, [r7, #4]
 804b508:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 804b50a:	b292      	uxth	r2, r2
 804b50c:	9202      	str	r2, [sp, #8]
 804b50e:	2200      	movs	r2, #0
 804b510:	9201      	str	r2, [sp, #4]
 804b512:	9300      	str	r3, [sp, #0]
 804b514:	4603      	mov	r3, r0
 804b516:	2280      	movs	r2, #128	; 0x80
 804b518:	6878      	ldr	r0, [r7, #4]
 804b51a:	f001 f865 	bl	804c5e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b51e:	687b      	ldr	r3, [r7, #4]
 804b520:	7959      	ldrb	r1, [r3, #5]
 804b522:	687b      	ldr	r3, [r7, #4]
 804b524:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b528:	687b      	ldr	r3, [r7, #4]
 804b52a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b52e:	687a      	ldr	r2, [r7, #4]
 804b530:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b532:	b292      	uxth	r2, r2
 804b534:	9202      	str	r2, [sp, #8]
 804b536:	2200      	movs	r2, #0
 804b538:	9201      	str	r2, [sp, #4]
 804b53a:	9300      	str	r3, [sp, #0]
 804b53c:	4603      	mov	r3, r0
 804b53e:	2200      	movs	r2, #0
 804b540:	6878      	ldr	r0, [r7, #4]
 804b542:	f001 f851 	bl	804c5e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804b546:	e175      	b.n	804b834 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b548:	7bbb      	ldrb	r3, [r7, #14]
 804b54a:	2b03      	cmp	r3, #3
 804b54c:	f040 8172 	bne.w	804b834 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 804b550:	687b      	ldr	r3, [r7, #4]
 804b552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b556:	3301      	adds	r3, #1
 804b558:	b2da      	uxtb	r2, r3
 804b55a:	687b      	ldr	r3, [r7, #4]
 804b55c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b560:	687b      	ldr	r3, [r7, #4]
 804b562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b566:	2b03      	cmp	r3, #3
 804b568:	d903      	bls.n	804b572 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 804b56a:	687b      	ldr	r3, [r7, #4]
 804b56c:	220d      	movs	r2, #13
 804b56e:	701a      	strb	r2, [r3, #0]
      break;
 804b570:	e160      	b.n	804b834 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b572:	687b      	ldr	r3, [r7, #4]
 804b574:	795b      	ldrb	r3, [r3, #5]
 804b576:	4619      	mov	r1, r3
 804b578:	6878      	ldr	r0, [r7, #4]
 804b57a:	f001 f885 	bl	804c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b57e:	687b      	ldr	r3, [r7, #4]
 804b580:	791b      	ldrb	r3, [r3, #4]
 804b582:	4619      	mov	r1, r3
 804b584:	6878      	ldr	r0, [r7, #4]
 804b586:	f001 f87f 	bl	804c688 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 804b58a:	687b      	ldr	r3, [r7, #4]
 804b58c:	2200      	movs	r2, #0
 804b58e:	701a      	strb	r2, [r3, #0]
      break;
 804b590:	e150      	b.n	804b834 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 804b592:	2112      	movs	r1, #18
 804b594:	6878      	ldr	r0, [r7, #4]
 804b596:	f000 f9f1 	bl	804b97c <USBH_Get_DevDesc>
 804b59a:	4603      	mov	r3, r0
 804b59c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b59e:	7bbb      	ldrb	r3, [r7, #14]
 804b5a0:	2b00      	cmp	r3, #0
 804b5a2:	d103      	bne.n	804b5ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 804b5a4:	687b      	ldr	r3, [r7, #4]
 804b5a6:	2202      	movs	r2, #2
 804b5a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b5aa:	e145      	b.n	804b838 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b5ac:	7bbb      	ldrb	r3, [r7, #14]
 804b5ae:	2b03      	cmp	r3, #3
 804b5b0:	f040 8142 	bne.w	804b838 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 804b5b4:	687b      	ldr	r3, [r7, #4]
 804b5b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b5ba:	3301      	adds	r3, #1
 804b5bc:	b2da      	uxtb	r2, r3
 804b5be:	687b      	ldr	r3, [r7, #4]
 804b5c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b5c4:	687b      	ldr	r3, [r7, #4]
 804b5c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b5ca:	2b03      	cmp	r3, #3
 804b5cc:	d903      	bls.n	804b5d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 804b5ce:	687b      	ldr	r3, [r7, #4]
 804b5d0:	220d      	movs	r2, #13
 804b5d2:	701a      	strb	r2, [r3, #0]
      break;
 804b5d4:	e130      	b.n	804b838 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b5d6:	687b      	ldr	r3, [r7, #4]
 804b5d8:	795b      	ldrb	r3, [r3, #5]
 804b5da:	4619      	mov	r1, r3
 804b5dc:	6878      	ldr	r0, [r7, #4]
 804b5de:	f001 f853 	bl	804c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b5e2:	687b      	ldr	r3, [r7, #4]
 804b5e4:	791b      	ldrb	r3, [r3, #4]
 804b5e6:	4619      	mov	r1, r3
 804b5e8:	6878      	ldr	r0, [r7, #4]
 804b5ea:	f001 f84d 	bl	804c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b5ee:	687b      	ldr	r3, [r7, #4]
 804b5f0:	2200      	movs	r2, #0
 804b5f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b5f4:	687b      	ldr	r3, [r7, #4]
 804b5f6:	2200      	movs	r2, #0
 804b5f8:	701a      	strb	r2, [r3, #0]
      break;
 804b5fa:	e11d      	b.n	804b838 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 804b5fc:	2101      	movs	r1, #1
 804b5fe:	6878      	ldr	r0, [r7, #4]
 804b600:	f000 fa68 	bl	804bad4 <USBH_SetAddress>
 804b604:	4603      	mov	r3, r0
 804b606:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b608:	7bbb      	ldrb	r3, [r7, #14]
 804b60a:	2b00      	cmp	r3, #0
 804b60c:	d132      	bne.n	804b674 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 804b60e:	2002      	movs	r0, #2
 804b610:	f001 fb36 	bl	804cc80 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 804b614:	687b      	ldr	r3, [r7, #4]
 804b616:	2201      	movs	r2, #1
 804b618:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 804b61c:	687b      	ldr	r3, [r7, #4]
 804b61e:	2203      	movs	r2, #3
 804b620:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b622:	687b      	ldr	r3, [r7, #4]
 804b624:	7919      	ldrb	r1, [r3, #4]
 804b626:	687b      	ldr	r3, [r7, #4]
 804b628:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b62c:	687b      	ldr	r3, [r7, #4]
 804b62e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b632:	687a      	ldr	r2, [r7, #4]
 804b634:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 804b636:	b292      	uxth	r2, r2
 804b638:	9202      	str	r2, [sp, #8]
 804b63a:	2200      	movs	r2, #0
 804b63c:	9201      	str	r2, [sp, #4]
 804b63e:	9300      	str	r3, [sp, #0]
 804b640:	4603      	mov	r3, r0
 804b642:	2280      	movs	r2, #128	; 0x80
 804b644:	6878      	ldr	r0, [r7, #4]
 804b646:	f000 ffcf 	bl	804c5e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b64a:	687b      	ldr	r3, [r7, #4]
 804b64c:	7959      	ldrb	r1, [r3, #5]
 804b64e:	687b      	ldr	r3, [r7, #4]
 804b650:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 804b654:	687b      	ldr	r3, [r7, #4]
 804b656:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 804b65a:	687a      	ldr	r2, [r7, #4]
 804b65c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 804b65e:	b292      	uxth	r2, r2
 804b660:	9202      	str	r2, [sp, #8]
 804b662:	2200      	movs	r2, #0
 804b664:	9201      	str	r2, [sp, #4]
 804b666:	9300      	str	r3, [sp, #0]
 804b668:	4603      	mov	r3, r0
 804b66a:	2200      	movs	r2, #0
 804b66c:	6878      	ldr	r0, [r7, #4]
 804b66e:	f000 ffbb 	bl	804c5e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 804b672:	e0e3      	b.n	804b83c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b674:	7bbb      	ldrb	r3, [r7, #14]
 804b676:	2b03      	cmp	r3, #3
 804b678:	f040 80e0 	bne.w	804b83c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 804b67c:	687b      	ldr	r3, [r7, #4]
 804b67e:	220d      	movs	r2, #13
 804b680:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 804b682:	687b      	ldr	r3, [r7, #4]
 804b684:	2200      	movs	r2, #0
 804b686:	705a      	strb	r2, [r3, #1]
      break;
 804b688:	e0d8      	b.n	804b83c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 804b68a:	2109      	movs	r1, #9
 804b68c:	6878      	ldr	r0, [r7, #4]
 804b68e:	f000 f99d 	bl	804b9cc <USBH_Get_CfgDesc>
 804b692:	4603      	mov	r3, r0
 804b694:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b696:	7bbb      	ldrb	r3, [r7, #14]
 804b698:	2b00      	cmp	r3, #0
 804b69a:	d103      	bne.n	804b6a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 804b69c:	687b      	ldr	r3, [r7, #4]
 804b69e:	2204      	movs	r2, #4
 804b6a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b6a2:	e0cd      	b.n	804b840 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b6a4:	7bbb      	ldrb	r3, [r7, #14]
 804b6a6:	2b03      	cmp	r3, #3
 804b6a8:	f040 80ca 	bne.w	804b840 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 804b6ac:	687b      	ldr	r3, [r7, #4]
 804b6ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b6b2:	3301      	adds	r3, #1
 804b6b4:	b2da      	uxtb	r2, r3
 804b6b6:	687b      	ldr	r3, [r7, #4]
 804b6b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b6bc:	687b      	ldr	r3, [r7, #4]
 804b6be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b6c2:	2b03      	cmp	r3, #3
 804b6c4:	d903      	bls.n	804b6ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 804b6c6:	687b      	ldr	r3, [r7, #4]
 804b6c8:	220d      	movs	r2, #13
 804b6ca:	701a      	strb	r2, [r3, #0]
      break;
 804b6cc:	e0b8      	b.n	804b840 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b6ce:	687b      	ldr	r3, [r7, #4]
 804b6d0:	795b      	ldrb	r3, [r3, #5]
 804b6d2:	4619      	mov	r1, r3
 804b6d4:	6878      	ldr	r0, [r7, #4]
 804b6d6:	f000 ffd7 	bl	804c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b6da:	687b      	ldr	r3, [r7, #4]
 804b6dc:	791b      	ldrb	r3, [r3, #4]
 804b6de:	4619      	mov	r1, r3
 804b6e0:	6878      	ldr	r0, [r7, #4]
 804b6e2:	f000 ffd1 	bl	804c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b6e6:	687b      	ldr	r3, [r7, #4]
 804b6e8:	2200      	movs	r2, #0
 804b6ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b6ec:	687b      	ldr	r3, [r7, #4]
 804b6ee:	2200      	movs	r2, #0
 804b6f0:	701a      	strb	r2, [r3, #0]
      break;
 804b6f2:	e0a5      	b.n	804b840 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 804b6f4:	687b      	ldr	r3, [r7, #4]
 804b6f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 804b6fa:	4619      	mov	r1, r3
 804b6fc:	6878      	ldr	r0, [r7, #4]
 804b6fe:	f000 f965 	bl	804b9cc <USBH_Get_CfgDesc>
 804b702:	4603      	mov	r3, r0
 804b704:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 804b706:	7bbb      	ldrb	r3, [r7, #14]
 804b708:	2b00      	cmp	r3, #0
 804b70a:	d103      	bne.n	804b714 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 804b70c:	687b      	ldr	r3, [r7, #4]
 804b70e:	2205      	movs	r2, #5
 804b710:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 804b712:	e097      	b.n	804b844 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b714:	7bbb      	ldrb	r3, [r7, #14]
 804b716:	2b03      	cmp	r3, #3
 804b718:	f040 8094 	bne.w	804b844 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 804b71c:	687b      	ldr	r3, [r7, #4]
 804b71e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b722:	3301      	adds	r3, #1
 804b724:	b2da      	uxtb	r2, r3
 804b726:	687b      	ldr	r3, [r7, #4]
 804b728:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 804b72c:	687b      	ldr	r3, [r7, #4]
 804b72e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 804b732:	2b03      	cmp	r3, #3
 804b734:	d903      	bls.n	804b73e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 804b736:	687b      	ldr	r3, [r7, #4]
 804b738:	220d      	movs	r2, #13
 804b73a:	701a      	strb	r2, [r3, #0]
      break;
 804b73c:	e082      	b.n	804b844 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b73e:	687b      	ldr	r3, [r7, #4]
 804b740:	795b      	ldrb	r3, [r3, #5]
 804b742:	4619      	mov	r1, r3
 804b744:	6878      	ldr	r0, [r7, #4]
 804b746:	f000 ff9f 	bl	804c688 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b74a:	687b      	ldr	r3, [r7, #4]
 804b74c:	791b      	ldrb	r3, [r3, #4]
 804b74e:	4619      	mov	r1, r3
 804b750:	6878      	ldr	r0, [r7, #4]
 804b752:	f000 ff99 	bl	804c688 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 804b756:	687b      	ldr	r3, [r7, #4]
 804b758:	2200      	movs	r2, #0
 804b75a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 804b75c:	687b      	ldr	r3, [r7, #4]
 804b75e:	2200      	movs	r2, #0
 804b760:	701a      	strb	r2, [r3, #0]
      break;
 804b762:	e06f      	b.n	804b844 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 804b764:	687b      	ldr	r3, [r7, #4]
 804b766:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 804b76a:	2b00      	cmp	r3, #0
 804b76c:	d019      	beq.n	804b7a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b76e:	687b      	ldr	r3, [r7, #4]
 804b770:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 804b774:	687b      	ldr	r3, [r7, #4]
 804b776:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 804b77a:	23ff      	movs	r3, #255	; 0xff
 804b77c:	6878      	ldr	r0, [r7, #4]
 804b77e:	f000 f949 	bl	804ba14 <USBH_Get_StringDesc>
 804b782:	4603      	mov	r3, r0
 804b784:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b786:	7bbb      	ldrb	r3, [r7, #14]
 804b788:	2b00      	cmp	r3, #0
 804b78a:	d103      	bne.n	804b794 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b78c:	687b      	ldr	r3, [r7, #4]
 804b78e:	2206      	movs	r2, #6
 804b790:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b792:	e059      	b.n	804b848 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b794:	7bbb      	ldrb	r3, [r7, #14]
 804b796:	2b03      	cmp	r3, #3
 804b798:	d156      	bne.n	804b848 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b79a:	687b      	ldr	r3, [r7, #4]
 804b79c:	2206      	movs	r2, #6
 804b79e:	705a      	strb	r2, [r3, #1]
      break;
 804b7a0:	e052      	b.n	804b848 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 804b7a2:	687b      	ldr	r3, [r7, #4]
 804b7a4:	2206      	movs	r2, #6
 804b7a6:	705a      	strb	r2, [r3, #1]
      break;
 804b7a8:	e04e      	b.n	804b848 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 804b7aa:	687b      	ldr	r3, [r7, #4]
 804b7ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 804b7b0:	2b00      	cmp	r3, #0
 804b7b2:	d019      	beq.n	804b7e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b7b4:	687b      	ldr	r3, [r7, #4]
 804b7b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 804b7ba:	687b      	ldr	r3, [r7, #4]
 804b7bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 804b7c0:	23ff      	movs	r3, #255	; 0xff
 804b7c2:	6878      	ldr	r0, [r7, #4]
 804b7c4:	f000 f926 	bl	804ba14 <USBH_Get_StringDesc>
 804b7c8:	4603      	mov	r3, r0
 804b7ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b7cc:	7bbb      	ldrb	r3, [r7, #14]
 804b7ce:	2b00      	cmp	r3, #0
 804b7d0:	d103      	bne.n	804b7da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b7d2:	687b      	ldr	r3, [r7, #4]
 804b7d4:	2207      	movs	r2, #7
 804b7d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 804b7d8:	e038      	b.n	804b84c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b7da:	7bbb      	ldrb	r3, [r7, #14]
 804b7dc:	2b03      	cmp	r3, #3
 804b7de:	d135      	bne.n	804b84c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b7e0:	687b      	ldr	r3, [r7, #4]
 804b7e2:	2207      	movs	r2, #7
 804b7e4:	705a      	strb	r2, [r3, #1]
      break;
 804b7e6:	e031      	b.n	804b84c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 804b7e8:	687b      	ldr	r3, [r7, #4]
 804b7ea:	2207      	movs	r2, #7
 804b7ec:	705a      	strb	r2, [r3, #1]
      break;
 804b7ee:	e02d      	b.n	804b84c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 804b7f0:	687b      	ldr	r3, [r7, #4]
 804b7f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 804b7f6:	2b00      	cmp	r3, #0
 804b7f8:	d017      	beq.n	804b82a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b7fa:	687b      	ldr	r3, [r7, #4]
 804b7fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 804b800:	687b      	ldr	r3, [r7, #4]
 804b802:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 804b806:	23ff      	movs	r3, #255	; 0xff
 804b808:	6878      	ldr	r0, [r7, #4]
 804b80a:	f000 f903 	bl	804ba14 <USBH_Get_StringDesc>
 804b80e:	4603      	mov	r3, r0
 804b810:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 804b812:	7bbb      	ldrb	r3, [r7, #14]
 804b814:	2b00      	cmp	r3, #0
 804b816:	d102      	bne.n	804b81e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 804b818:	2300      	movs	r3, #0
 804b81a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 804b81c:	e018      	b.n	804b850 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 804b81e:	7bbb      	ldrb	r3, [r7, #14]
 804b820:	2b03      	cmp	r3, #3
 804b822:	d115      	bne.n	804b850 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 804b824:	2300      	movs	r3, #0
 804b826:	73fb      	strb	r3, [r7, #15]
      break;
 804b828:	e012      	b.n	804b850 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 804b82a:	2300      	movs	r3, #0
 804b82c:	73fb      	strb	r3, [r7, #15]
      break;
 804b82e:	e00f      	b.n	804b850 <USBH_HandleEnum+0x3bc>

    default:
      break;
 804b830:	bf00      	nop
 804b832:	e00e      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b834:	bf00      	nop
 804b836:	e00c      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b838:	bf00      	nop
 804b83a:	e00a      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b83c:	bf00      	nop
 804b83e:	e008      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b840:	bf00      	nop
 804b842:	e006      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b844:	bf00      	nop
 804b846:	e004      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b848:	bf00      	nop
 804b84a:	e002      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b84c:	bf00      	nop
 804b84e:	e000      	b.n	804b852 <USBH_HandleEnum+0x3be>
      break;
 804b850:	bf00      	nop
  }
  return Status;
 804b852:	7bfb      	ldrb	r3, [r7, #15]
}
 804b854:	4618      	mov	r0, r3
 804b856:	3710      	adds	r7, #16
 804b858:	46bd      	mov	sp, r7
 804b85a:	bd80      	pop	{r7, pc}

0804b85c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 804b85c:	b480      	push	{r7}
 804b85e:	b083      	sub	sp, #12
 804b860:	af00      	add	r7, sp, #0
 804b862:	6078      	str	r0, [r7, #4]
 804b864:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 804b866:	687b      	ldr	r3, [r7, #4]
 804b868:	683a      	ldr	r2, [r7, #0]
 804b86a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 804b86e:	bf00      	nop
 804b870:	370c      	adds	r7, #12
 804b872:	46bd      	mov	sp, r7
 804b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b878:	4770      	bx	lr

0804b87a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 804b87a:	b580      	push	{r7, lr}
 804b87c:	b082      	sub	sp, #8
 804b87e:	af00      	add	r7, sp, #0
 804b880:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 804b882:	687b      	ldr	r3, [r7, #4]
 804b884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804b888:	1c5a      	adds	r2, r3, #1
 804b88a:	687b      	ldr	r3, [r7, #4]
 804b88c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 804b890:	6878      	ldr	r0, [r7, #4]
 804b892:	f000 f804 	bl	804b89e <USBH_HandleSof>
}
 804b896:	bf00      	nop
 804b898:	3708      	adds	r7, #8
 804b89a:	46bd      	mov	sp, r7
 804b89c:	bd80      	pop	{r7, pc}

0804b89e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 804b89e:	b580      	push	{r7, lr}
 804b8a0:	b082      	sub	sp, #8
 804b8a2:	af00      	add	r7, sp, #0
 804b8a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 804b8a6:	687b      	ldr	r3, [r7, #4]
 804b8a8:	781b      	ldrb	r3, [r3, #0]
 804b8aa:	b2db      	uxtb	r3, r3
 804b8ac:	2b0b      	cmp	r3, #11
 804b8ae:	d10a      	bne.n	804b8c6 <USBH_HandleSof+0x28>
 804b8b0:	687b      	ldr	r3, [r7, #4]
 804b8b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b8b6:	2b00      	cmp	r3, #0
 804b8b8:	d005      	beq.n	804b8c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 804b8ba:	687b      	ldr	r3, [r7, #4]
 804b8bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 804b8c0:	699b      	ldr	r3, [r3, #24]
 804b8c2:	6878      	ldr	r0, [r7, #4]
 804b8c4:	4798      	blx	r3
  }
}
 804b8c6:	bf00      	nop
 804b8c8:	3708      	adds	r7, #8
 804b8ca:	46bd      	mov	sp, r7
 804b8cc:	bd80      	pop	{r7, pc}

0804b8ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 804b8ce:	b480      	push	{r7}
 804b8d0:	b083      	sub	sp, #12
 804b8d2:	af00      	add	r7, sp, #0
 804b8d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 804b8d6:	687b      	ldr	r3, [r7, #4]
 804b8d8:	2201      	movs	r2, #1
 804b8da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 804b8de:	bf00      	nop
}
 804b8e0:	370c      	adds	r7, #12
 804b8e2:	46bd      	mov	sp, r7
 804b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8e8:	4770      	bx	lr

0804b8ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 804b8ea:	b480      	push	{r7}
 804b8ec:	b083      	sub	sp, #12
 804b8ee:	af00      	add	r7, sp, #0
 804b8f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 804b8f2:	687b      	ldr	r3, [r7, #4]
 804b8f4:	2200      	movs	r2, #0
 804b8f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 804b8fa:	bf00      	nop
}
 804b8fc:	370c      	adds	r7, #12
 804b8fe:	46bd      	mov	sp, r7
 804b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b904:	4770      	bx	lr

0804b906 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 804b906:	b480      	push	{r7}
 804b908:	b083      	sub	sp, #12
 804b90a:	af00      	add	r7, sp, #0
 804b90c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 804b90e:	687b      	ldr	r3, [r7, #4]
 804b910:	2201      	movs	r2, #1
 804b912:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 804b916:	687b      	ldr	r3, [r7, #4]
 804b918:	2200      	movs	r2, #0
 804b91a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 804b91e:	687b      	ldr	r3, [r7, #4]
 804b920:	2200      	movs	r2, #0
 804b922:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b926:	2300      	movs	r3, #0
}
 804b928:	4618      	mov	r0, r3
 804b92a:	370c      	adds	r7, #12
 804b92c:	46bd      	mov	sp, r7
 804b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b932:	4770      	bx	lr

0804b934 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 804b934:	b580      	push	{r7, lr}
 804b936:	b082      	sub	sp, #8
 804b938:	af00      	add	r7, sp, #0
 804b93a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 804b93c:	687b      	ldr	r3, [r7, #4]
 804b93e:	2201      	movs	r2, #1
 804b940:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 804b944:	687b      	ldr	r3, [r7, #4]
 804b946:	2200      	movs	r2, #0
 804b948:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 804b94c:	687b      	ldr	r3, [r7, #4]
 804b94e:	2200      	movs	r2, #0
 804b950:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 804b954:	6878      	ldr	r0, [r7, #4]
 804b956:	f001 f84a 	bl	804c9ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804b95a:	687b      	ldr	r3, [r7, #4]
 804b95c:	791b      	ldrb	r3, [r3, #4]
 804b95e:	4619      	mov	r1, r3
 804b960:	6878      	ldr	r0, [r7, #4]
 804b962:	f000 fe91 	bl	804c688 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804b966:	687b      	ldr	r3, [r7, #4]
 804b968:	795b      	ldrb	r3, [r3, #5]
 804b96a:	4619      	mov	r1, r3
 804b96c:	6878      	ldr	r0, [r7, #4]
 804b96e:	f000 fe8b 	bl	804c688 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 804b972:	2300      	movs	r3, #0
}
 804b974:	4618      	mov	r0, r3
 804b976:	3708      	adds	r7, #8
 804b978:	46bd      	mov	sp, r7
 804b97a:	bd80      	pop	{r7, pc}

0804b97c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 804b97c:	b580      	push	{r7, lr}
 804b97e:	b086      	sub	sp, #24
 804b980:	af02      	add	r7, sp, #8
 804b982:	6078      	str	r0, [r7, #4]
 804b984:	460b      	mov	r3, r1
 804b986:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 804b988:	687b      	ldr	r3, [r7, #4]
 804b98a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804b98e:	78fb      	ldrb	r3, [r7, #3]
 804b990:	b29b      	uxth	r3, r3
 804b992:	9300      	str	r3, [sp, #0]
 804b994:	4613      	mov	r3, r2
 804b996:	f44f 7280 	mov.w	r2, #256	; 0x100
 804b99a:	2100      	movs	r1, #0
 804b99c:	6878      	ldr	r0, [r7, #4]
 804b99e:	f000 f864 	bl	804ba6a <USBH_GetDescriptor>
 804b9a2:	4603      	mov	r3, r0
 804b9a4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 804b9a6:	7bfb      	ldrb	r3, [r7, #15]
 804b9a8:	2b00      	cmp	r3, #0
 804b9aa:	d10a      	bne.n	804b9c2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 804b9ac:	687b      	ldr	r3, [r7, #4]
 804b9ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 804b9b2:	687b      	ldr	r3, [r7, #4]
 804b9b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804b9b8:	78fa      	ldrb	r2, [r7, #3]
 804b9ba:	b292      	uxth	r2, r2
 804b9bc:	4619      	mov	r1, r3
 804b9be:	f000 f918 	bl	804bbf2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 804b9c2:	7bfb      	ldrb	r3, [r7, #15]
}
 804b9c4:	4618      	mov	r0, r3
 804b9c6:	3710      	adds	r7, #16
 804b9c8:	46bd      	mov	sp, r7
 804b9ca:	bd80      	pop	{r7, pc}

0804b9cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 804b9cc:	b580      	push	{r7, lr}
 804b9ce:	b086      	sub	sp, #24
 804b9d0:	af02      	add	r7, sp, #8
 804b9d2:	6078      	str	r0, [r7, #4]
 804b9d4:	460b      	mov	r3, r1
 804b9d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 804b9d8:	687b      	ldr	r3, [r7, #4]
 804b9da:	331c      	adds	r3, #28
 804b9dc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 804b9de:	887b      	ldrh	r3, [r7, #2]
 804b9e0:	9300      	str	r3, [sp, #0]
 804b9e2:	68bb      	ldr	r3, [r7, #8]
 804b9e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 804b9e8:	2100      	movs	r1, #0
 804b9ea:	6878      	ldr	r0, [r7, #4]
 804b9ec:	f000 f83d 	bl	804ba6a <USBH_GetDescriptor>
 804b9f0:	4603      	mov	r3, r0
 804b9f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 804b9f4:	7bfb      	ldrb	r3, [r7, #15]
 804b9f6:	2b00      	cmp	r3, #0
 804b9f8:	d107      	bne.n	804ba0a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 804b9fa:	887b      	ldrh	r3, [r7, #2]
 804b9fc:	461a      	mov	r2, r3
 804b9fe:	68b9      	ldr	r1, [r7, #8]
 804ba00:	6878      	ldr	r0, [r7, #4]
 804ba02:	f000 f987 	bl	804bd14 <USBH_ParseCfgDesc>
 804ba06:	4603      	mov	r3, r0
 804ba08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 804ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 804ba0c:	4618      	mov	r0, r3
 804ba0e:	3710      	adds	r7, #16
 804ba10:	46bd      	mov	sp, r7
 804ba12:	bd80      	pop	{r7, pc}

0804ba14 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 804ba14:	b580      	push	{r7, lr}
 804ba16:	b088      	sub	sp, #32
 804ba18:	af02      	add	r7, sp, #8
 804ba1a:	60f8      	str	r0, [r7, #12]
 804ba1c:	607a      	str	r2, [r7, #4]
 804ba1e:	461a      	mov	r2, r3
 804ba20:	460b      	mov	r3, r1
 804ba22:	72fb      	strb	r3, [r7, #11]
 804ba24:	4613      	mov	r3, r2
 804ba26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 804ba28:	7afb      	ldrb	r3, [r7, #11]
 804ba2a:	b29b      	uxth	r3, r3
 804ba2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 804ba30:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 804ba32:	68fb      	ldr	r3, [r7, #12]
 804ba34:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 804ba38:	893b      	ldrh	r3, [r7, #8]
 804ba3a:	9300      	str	r3, [sp, #0]
 804ba3c:	460b      	mov	r3, r1
 804ba3e:	2100      	movs	r1, #0
 804ba40:	68f8      	ldr	r0, [r7, #12]
 804ba42:	f000 f812 	bl	804ba6a <USBH_GetDescriptor>
 804ba46:	4603      	mov	r3, r0
 804ba48:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 804ba4a:	7dfb      	ldrb	r3, [r7, #23]
 804ba4c:	2b00      	cmp	r3, #0
 804ba4e:	d107      	bne.n	804ba60 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 804ba50:	68fb      	ldr	r3, [r7, #12]
 804ba52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 804ba56:	893a      	ldrh	r2, [r7, #8]
 804ba58:	6879      	ldr	r1, [r7, #4]
 804ba5a:	4618      	mov	r0, r3
 804ba5c:	f000 fb24 	bl	804c0a8 <USBH_ParseStringDesc>
  }

  return status;
 804ba60:	7dfb      	ldrb	r3, [r7, #23]
}
 804ba62:	4618      	mov	r0, r3
 804ba64:	3718      	adds	r7, #24
 804ba66:	46bd      	mov	sp, r7
 804ba68:	bd80      	pop	{r7, pc}

0804ba6a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 804ba6a:	b580      	push	{r7, lr}
 804ba6c:	b084      	sub	sp, #16
 804ba6e:	af00      	add	r7, sp, #0
 804ba70:	60f8      	str	r0, [r7, #12]
 804ba72:	607b      	str	r3, [r7, #4]
 804ba74:	460b      	mov	r3, r1
 804ba76:	72fb      	strb	r3, [r7, #11]
 804ba78:	4613      	mov	r3, r2
 804ba7a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 804ba7c:	68fb      	ldr	r3, [r7, #12]
 804ba7e:	789b      	ldrb	r3, [r3, #2]
 804ba80:	2b01      	cmp	r3, #1
 804ba82:	d11c      	bne.n	804babe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 804ba84:	7afb      	ldrb	r3, [r7, #11]
 804ba86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 804ba8a:	b2da      	uxtb	r2, r3
 804ba8c:	68fb      	ldr	r3, [r7, #12]
 804ba8e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 804ba90:	68fb      	ldr	r3, [r7, #12]
 804ba92:	2206      	movs	r2, #6
 804ba94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 804ba96:	68fb      	ldr	r3, [r7, #12]
 804ba98:	893a      	ldrh	r2, [r7, #8]
 804ba9a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 804ba9c:	893b      	ldrh	r3, [r7, #8]
 804ba9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 804baa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804baa6:	d104      	bne.n	804bab2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 804baa8:	68fb      	ldr	r3, [r7, #12]
 804baaa:	f240 4209 	movw	r2, #1033	; 0x409
 804baae:	829a      	strh	r2, [r3, #20]
 804bab0:	e002      	b.n	804bab8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 804bab2:	68fb      	ldr	r3, [r7, #12]
 804bab4:	2200      	movs	r2, #0
 804bab6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 804bab8:	68fb      	ldr	r3, [r7, #12]
 804baba:	8b3a      	ldrh	r2, [r7, #24]
 804babc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 804babe:	8b3b      	ldrh	r3, [r7, #24]
 804bac0:	461a      	mov	r2, r3
 804bac2:	6879      	ldr	r1, [r7, #4]
 804bac4:	68f8      	ldr	r0, [r7, #12]
 804bac6:	f000 fb3d 	bl	804c144 <USBH_CtlReq>
 804baca:	4603      	mov	r3, r0
}
 804bacc:	4618      	mov	r0, r3
 804bace:	3710      	adds	r7, #16
 804bad0:	46bd      	mov	sp, r7
 804bad2:	bd80      	pop	{r7, pc}

0804bad4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 804bad4:	b580      	push	{r7, lr}
 804bad6:	b082      	sub	sp, #8
 804bad8:	af00      	add	r7, sp, #0
 804bada:	6078      	str	r0, [r7, #4]
 804badc:	460b      	mov	r3, r1
 804bade:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bae0:	687b      	ldr	r3, [r7, #4]
 804bae2:	789b      	ldrb	r3, [r3, #2]
 804bae4:	2b01      	cmp	r3, #1
 804bae6:	d10f      	bne.n	804bb08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 804bae8:	687b      	ldr	r3, [r7, #4]
 804baea:	2200      	movs	r2, #0
 804baec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 804baee:	687b      	ldr	r3, [r7, #4]
 804baf0:	2205      	movs	r2, #5
 804baf2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 804baf4:	78fb      	ldrb	r3, [r7, #3]
 804baf6:	b29a      	uxth	r2, r3
 804baf8:	687b      	ldr	r3, [r7, #4]
 804bafa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bafc:	687b      	ldr	r3, [r7, #4]
 804bafe:	2200      	movs	r2, #0
 804bb00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bb02:	687b      	ldr	r3, [r7, #4]
 804bb04:	2200      	movs	r2, #0
 804bb06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bb08:	2200      	movs	r2, #0
 804bb0a:	2100      	movs	r1, #0
 804bb0c:	6878      	ldr	r0, [r7, #4]
 804bb0e:	f000 fb19 	bl	804c144 <USBH_CtlReq>
 804bb12:	4603      	mov	r3, r0
}
 804bb14:	4618      	mov	r0, r3
 804bb16:	3708      	adds	r7, #8
 804bb18:	46bd      	mov	sp, r7
 804bb1a:	bd80      	pop	{r7, pc}

0804bb1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 804bb1c:	b580      	push	{r7, lr}
 804bb1e:	b082      	sub	sp, #8
 804bb20:	af00      	add	r7, sp, #0
 804bb22:	6078      	str	r0, [r7, #4]
 804bb24:	460b      	mov	r3, r1
 804bb26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 804bb28:	687b      	ldr	r3, [r7, #4]
 804bb2a:	789b      	ldrb	r3, [r3, #2]
 804bb2c:	2b01      	cmp	r3, #1
 804bb2e:	d10e      	bne.n	804bb4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804bb30:	687b      	ldr	r3, [r7, #4]
 804bb32:	2200      	movs	r2, #0
 804bb34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 804bb36:	687b      	ldr	r3, [r7, #4]
 804bb38:	2209      	movs	r2, #9
 804bb3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 804bb3c:	687b      	ldr	r3, [r7, #4]
 804bb3e:	887a      	ldrh	r2, [r7, #2]
 804bb40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bb42:	687b      	ldr	r3, [r7, #4]
 804bb44:	2200      	movs	r2, #0
 804bb46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bb48:	687b      	ldr	r3, [r7, #4]
 804bb4a:	2200      	movs	r2, #0
 804bb4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bb4e:	2200      	movs	r2, #0
 804bb50:	2100      	movs	r1, #0
 804bb52:	6878      	ldr	r0, [r7, #4]
 804bb54:	f000 faf6 	bl	804c144 <USBH_CtlReq>
 804bb58:	4603      	mov	r3, r0
}
 804bb5a:	4618      	mov	r0, r3
 804bb5c:	3708      	adds	r7, #8
 804bb5e:	46bd      	mov	sp, r7
 804bb60:	bd80      	pop	{r7, pc}

0804bb62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 804bb62:	b580      	push	{r7, lr}
 804bb64:	b082      	sub	sp, #8
 804bb66:	af00      	add	r7, sp, #0
 804bb68:	6078      	str	r0, [r7, #4]
 804bb6a:	460b      	mov	r3, r1
 804bb6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bb6e:	687b      	ldr	r3, [r7, #4]
 804bb70:	789b      	ldrb	r3, [r3, #2]
 804bb72:	2b01      	cmp	r3, #1
 804bb74:	d10f      	bne.n	804bb96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 804bb76:	687b      	ldr	r3, [r7, #4]
 804bb78:	2200      	movs	r2, #0
 804bb7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 804bb7c:	687b      	ldr	r3, [r7, #4]
 804bb7e:	2203      	movs	r2, #3
 804bb80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 804bb82:	78fb      	ldrb	r3, [r7, #3]
 804bb84:	b29a      	uxth	r2, r3
 804bb86:	687b      	ldr	r3, [r7, #4]
 804bb88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 804bb8a:	687b      	ldr	r3, [r7, #4]
 804bb8c:	2200      	movs	r2, #0
 804bb8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bb90:	687b      	ldr	r3, [r7, #4]
 804bb92:	2200      	movs	r2, #0
 804bb94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 804bb96:	2200      	movs	r2, #0
 804bb98:	2100      	movs	r1, #0
 804bb9a:	6878      	ldr	r0, [r7, #4]
 804bb9c:	f000 fad2 	bl	804c144 <USBH_CtlReq>
 804bba0:	4603      	mov	r3, r0
}
 804bba2:	4618      	mov	r0, r3
 804bba4:	3708      	adds	r7, #8
 804bba6:	46bd      	mov	sp, r7
 804bba8:	bd80      	pop	{r7, pc}

0804bbaa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 804bbaa:	b580      	push	{r7, lr}
 804bbac:	b082      	sub	sp, #8
 804bbae:	af00      	add	r7, sp, #0
 804bbb0:	6078      	str	r0, [r7, #4]
 804bbb2:	460b      	mov	r3, r1
 804bbb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 804bbb6:	687b      	ldr	r3, [r7, #4]
 804bbb8:	789b      	ldrb	r3, [r3, #2]
 804bbba:	2b01      	cmp	r3, #1
 804bbbc:	d10f      	bne.n	804bbde <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 804bbbe:	687b      	ldr	r3, [r7, #4]
 804bbc0:	2202      	movs	r2, #2
 804bbc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 804bbc4:	687b      	ldr	r3, [r7, #4]
 804bbc6:	2201      	movs	r2, #1
 804bbc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 804bbca:	687b      	ldr	r3, [r7, #4]
 804bbcc:	2200      	movs	r2, #0
 804bbce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 804bbd0:	78fb      	ldrb	r3, [r7, #3]
 804bbd2:	b29a      	uxth	r2, r3
 804bbd4:	687b      	ldr	r3, [r7, #4]
 804bbd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 804bbd8:	687b      	ldr	r3, [r7, #4]
 804bbda:	2200      	movs	r2, #0
 804bbdc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 804bbde:	2200      	movs	r2, #0
 804bbe0:	2100      	movs	r1, #0
 804bbe2:	6878      	ldr	r0, [r7, #4]
 804bbe4:	f000 faae 	bl	804c144 <USBH_CtlReq>
 804bbe8:	4603      	mov	r3, r0
}
 804bbea:	4618      	mov	r0, r3
 804bbec:	3708      	adds	r7, #8
 804bbee:	46bd      	mov	sp, r7
 804bbf0:	bd80      	pop	{r7, pc}

0804bbf2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 804bbf2:	b480      	push	{r7}
 804bbf4:	b085      	sub	sp, #20
 804bbf6:	af00      	add	r7, sp, #0
 804bbf8:	60f8      	str	r0, [r7, #12]
 804bbfa:	60b9      	str	r1, [r7, #8]
 804bbfc:	4613      	mov	r3, r2
 804bbfe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 804bc00:	68bb      	ldr	r3, [r7, #8]
 804bc02:	781a      	ldrb	r2, [r3, #0]
 804bc04:	68fb      	ldr	r3, [r7, #12]
 804bc06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 804bc08:	68bb      	ldr	r3, [r7, #8]
 804bc0a:	785a      	ldrb	r2, [r3, #1]
 804bc0c:	68fb      	ldr	r3, [r7, #12]
 804bc0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 804bc10:	68bb      	ldr	r3, [r7, #8]
 804bc12:	3302      	adds	r3, #2
 804bc14:	781b      	ldrb	r3, [r3, #0]
 804bc16:	b29a      	uxth	r2, r3
 804bc18:	68bb      	ldr	r3, [r7, #8]
 804bc1a:	3303      	adds	r3, #3
 804bc1c:	781b      	ldrb	r3, [r3, #0]
 804bc1e:	b29b      	uxth	r3, r3
 804bc20:	021b      	lsls	r3, r3, #8
 804bc22:	b29b      	uxth	r3, r3
 804bc24:	4313      	orrs	r3, r2
 804bc26:	b29a      	uxth	r2, r3
 804bc28:	68fb      	ldr	r3, [r7, #12]
 804bc2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 804bc2c:	68bb      	ldr	r3, [r7, #8]
 804bc2e:	791a      	ldrb	r2, [r3, #4]
 804bc30:	68fb      	ldr	r3, [r7, #12]
 804bc32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 804bc34:	68bb      	ldr	r3, [r7, #8]
 804bc36:	795a      	ldrb	r2, [r3, #5]
 804bc38:	68fb      	ldr	r3, [r7, #12]
 804bc3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 804bc3c:	68bb      	ldr	r3, [r7, #8]
 804bc3e:	799a      	ldrb	r2, [r3, #6]
 804bc40:	68fb      	ldr	r3, [r7, #12]
 804bc42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 804bc44:	68bb      	ldr	r3, [r7, #8]
 804bc46:	79da      	ldrb	r2, [r3, #7]
 804bc48:	68fb      	ldr	r3, [r7, #12]
 804bc4a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 804bc4c:	68fb      	ldr	r3, [r7, #12]
 804bc4e:	79db      	ldrb	r3, [r3, #7]
 804bc50:	2b20      	cmp	r3, #32
 804bc52:	dc11      	bgt.n	804bc78 <USBH_ParseDevDesc+0x86>
 804bc54:	2b08      	cmp	r3, #8
 804bc56:	db16      	blt.n	804bc86 <USBH_ParseDevDesc+0x94>
 804bc58:	3b08      	subs	r3, #8
 804bc5a:	2201      	movs	r2, #1
 804bc5c:	fa02 f303 	lsl.w	r3, r2, r3
 804bc60:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 804bc64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804bc68:	2b00      	cmp	r3, #0
 804bc6a:	bf14      	ite	ne
 804bc6c:	2301      	movne	r3, #1
 804bc6e:	2300      	moveq	r3, #0
 804bc70:	b2db      	uxtb	r3, r3
 804bc72:	2b00      	cmp	r3, #0
 804bc74:	d102      	bne.n	804bc7c <USBH_ParseDevDesc+0x8a>
 804bc76:	e006      	b.n	804bc86 <USBH_ParseDevDesc+0x94>
 804bc78:	2b40      	cmp	r3, #64	; 0x40
 804bc7a:	d104      	bne.n	804bc86 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 804bc7c:	68fb      	ldr	r3, [r7, #12]
 804bc7e:	79da      	ldrb	r2, [r3, #7]
 804bc80:	68fb      	ldr	r3, [r7, #12]
 804bc82:	71da      	strb	r2, [r3, #7]
      break;
 804bc84:	e003      	b.n	804bc8e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 804bc86:	68fb      	ldr	r3, [r7, #12]
 804bc88:	2240      	movs	r2, #64	; 0x40
 804bc8a:	71da      	strb	r2, [r3, #7]
      break;
 804bc8c:	bf00      	nop
  }

  if (length > 8U)
 804bc8e:	88fb      	ldrh	r3, [r7, #6]
 804bc90:	2b08      	cmp	r3, #8
 804bc92:	d939      	bls.n	804bd08 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 804bc94:	68bb      	ldr	r3, [r7, #8]
 804bc96:	3308      	adds	r3, #8
 804bc98:	781b      	ldrb	r3, [r3, #0]
 804bc9a:	b29a      	uxth	r2, r3
 804bc9c:	68bb      	ldr	r3, [r7, #8]
 804bc9e:	3309      	adds	r3, #9
 804bca0:	781b      	ldrb	r3, [r3, #0]
 804bca2:	b29b      	uxth	r3, r3
 804bca4:	021b      	lsls	r3, r3, #8
 804bca6:	b29b      	uxth	r3, r3
 804bca8:	4313      	orrs	r3, r2
 804bcaa:	b29a      	uxth	r2, r3
 804bcac:	68fb      	ldr	r3, [r7, #12]
 804bcae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 804bcb0:	68bb      	ldr	r3, [r7, #8]
 804bcb2:	330a      	adds	r3, #10
 804bcb4:	781b      	ldrb	r3, [r3, #0]
 804bcb6:	b29a      	uxth	r2, r3
 804bcb8:	68bb      	ldr	r3, [r7, #8]
 804bcba:	330b      	adds	r3, #11
 804bcbc:	781b      	ldrb	r3, [r3, #0]
 804bcbe:	b29b      	uxth	r3, r3
 804bcc0:	021b      	lsls	r3, r3, #8
 804bcc2:	b29b      	uxth	r3, r3
 804bcc4:	4313      	orrs	r3, r2
 804bcc6:	b29a      	uxth	r2, r3
 804bcc8:	68fb      	ldr	r3, [r7, #12]
 804bcca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 804bccc:	68bb      	ldr	r3, [r7, #8]
 804bcce:	330c      	adds	r3, #12
 804bcd0:	781b      	ldrb	r3, [r3, #0]
 804bcd2:	b29a      	uxth	r2, r3
 804bcd4:	68bb      	ldr	r3, [r7, #8]
 804bcd6:	330d      	adds	r3, #13
 804bcd8:	781b      	ldrb	r3, [r3, #0]
 804bcda:	b29b      	uxth	r3, r3
 804bcdc:	021b      	lsls	r3, r3, #8
 804bcde:	b29b      	uxth	r3, r3
 804bce0:	4313      	orrs	r3, r2
 804bce2:	b29a      	uxth	r2, r3
 804bce4:	68fb      	ldr	r3, [r7, #12]
 804bce6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 804bce8:	68bb      	ldr	r3, [r7, #8]
 804bcea:	7b9a      	ldrb	r2, [r3, #14]
 804bcec:	68fb      	ldr	r3, [r7, #12]
 804bcee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 804bcf0:	68bb      	ldr	r3, [r7, #8]
 804bcf2:	7bda      	ldrb	r2, [r3, #15]
 804bcf4:	68fb      	ldr	r3, [r7, #12]
 804bcf6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 804bcf8:	68bb      	ldr	r3, [r7, #8]
 804bcfa:	7c1a      	ldrb	r2, [r3, #16]
 804bcfc:	68fb      	ldr	r3, [r7, #12]
 804bcfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 804bd00:	68bb      	ldr	r3, [r7, #8]
 804bd02:	7c5a      	ldrb	r2, [r3, #17]
 804bd04:	68fb      	ldr	r3, [r7, #12]
 804bd06:	745a      	strb	r2, [r3, #17]
  }
}
 804bd08:	bf00      	nop
 804bd0a:	3714      	adds	r7, #20
 804bd0c:	46bd      	mov	sp, r7
 804bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd12:	4770      	bx	lr

0804bd14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 804bd14:	b580      	push	{r7, lr}
 804bd16:	b08c      	sub	sp, #48	; 0x30
 804bd18:	af00      	add	r7, sp, #0
 804bd1a:	60f8      	str	r0, [r7, #12]
 804bd1c:	60b9      	str	r1, [r7, #8]
 804bd1e:	4613      	mov	r3, r2
 804bd20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 804bd22:	68fb      	ldr	r3, [r7, #12]
 804bd24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 804bd28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 804bd2a:	2300      	movs	r3, #0
 804bd2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 804bd30:	68bb      	ldr	r3, [r7, #8]
 804bd32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 804bd34:	2300      	movs	r3, #0
 804bd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 804bd3a:	2300      	movs	r3, #0
 804bd3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 804bd40:	68bb      	ldr	r3, [r7, #8]
 804bd42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 804bd44:	68bb      	ldr	r3, [r7, #8]
 804bd46:	781a      	ldrb	r2, [r3, #0]
 804bd48:	6a3b      	ldr	r3, [r7, #32]
 804bd4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 804bd4c:	68bb      	ldr	r3, [r7, #8]
 804bd4e:	785a      	ldrb	r2, [r3, #1]
 804bd50:	6a3b      	ldr	r3, [r7, #32]
 804bd52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 804bd54:	68bb      	ldr	r3, [r7, #8]
 804bd56:	3302      	adds	r3, #2
 804bd58:	781b      	ldrb	r3, [r3, #0]
 804bd5a:	b29a      	uxth	r2, r3
 804bd5c:	68bb      	ldr	r3, [r7, #8]
 804bd5e:	3303      	adds	r3, #3
 804bd60:	781b      	ldrb	r3, [r3, #0]
 804bd62:	b29b      	uxth	r3, r3
 804bd64:	021b      	lsls	r3, r3, #8
 804bd66:	b29b      	uxth	r3, r3
 804bd68:	4313      	orrs	r3, r2
 804bd6a:	b29b      	uxth	r3, r3
 804bd6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804bd70:	bf28      	it	cs
 804bd72:	f44f 7380 	movcs.w	r3, #256	; 0x100
 804bd76:	b29a      	uxth	r2, r3
 804bd78:	6a3b      	ldr	r3, [r7, #32]
 804bd7a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 804bd7c:	68bb      	ldr	r3, [r7, #8]
 804bd7e:	791a      	ldrb	r2, [r3, #4]
 804bd80:	6a3b      	ldr	r3, [r7, #32]
 804bd82:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 804bd84:	68bb      	ldr	r3, [r7, #8]
 804bd86:	795a      	ldrb	r2, [r3, #5]
 804bd88:	6a3b      	ldr	r3, [r7, #32]
 804bd8a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 804bd8c:	68bb      	ldr	r3, [r7, #8]
 804bd8e:	799a      	ldrb	r2, [r3, #6]
 804bd90:	6a3b      	ldr	r3, [r7, #32]
 804bd92:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 804bd94:	68bb      	ldr	r3, [r7, #8]
 804bd96:	79da      	ldrb	r2, [r3, #7]
 804bd98:	6a3b      	ldr	r3, [r7, #32]
 804bd9a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 804bd9c:	68bb      	ldr	r3, [r7, #8]
 804bd9e:	7a1a      	ldrb	r2, [r3, #8]
 804bda0:	6a3b      	ldr	r3, [r7, #32]
 804bda2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 804bda4:	6a3b      	ldr	r3, [r7, #32]
 804bda6:	781b      	ldrb	r3, [r3, #0]
 804bda8:	2b09      	cmp	r3, #9
 804bdaa:	d002      	beq.n	804bdb2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 804bdac:	6a3b      	ldr	r3, [r7, #32]
 804bdae:	2209      	movs	r2, #9
 804bdb0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 804bdb2:	88fb      	ldrh	r3, [r7, #6]
 804bdb4:	2b09      	cmp	r3, #9
 804bdb6:	f240 809d 	bls.w	804bef4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 804bdba:	2309      	movs	r3, #9
 804bdbc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 804bdbe:	2300      	movs	r3, #0
 804bdc0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804bdc2:	e081      	b.n	804bec8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804bdc4:	f107 0316 	add.w	r3, r7, #22
 804bdc8:	4619      	mov	r1, r3
 804bdca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804bdcc:	f000 f99f 	bl	804c10e <USBH_GetNextDesc>
 804bdd0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 804bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bdd4:	785b      	ldrb	r3, [r3, #1]
 804bdd6:	2b04      	cmp	r3, #4
 804bdd8:	d176      	bne.n	804bec8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 804bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bddc:	781b      	ldrb	r3, [r3, #0]
 804bdde:	2b09      	cmp	r3, #9
 804bde0:	d002      	beq.n	804bde8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 804bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804bde4:	2209      	movs	r2, #9
 804bde6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 804bde8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bdec:	221a      	movs	r2, #26
 804bdee:	fb02 f303 	mul.w	r3, r2, r3
 804bdf2:	3308      	adds	r3, #8
 804bdf4:	6a3a      	ldr	r2, [r7, #32]
 804bdf6:	4413      	add	r3, r2
 804bdf8:	3302      	adds	r3, #2
 804bdfa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 804bdfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804bdfe:	69f8      	ldr	r0, [r7, #28]
 804be00:	f000 f87e 	bl	804bf00 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 804be04:	2300      	movs	r3, #0
 804be06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 804be0a:	2300      	movs	r3, #0
 804be0c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804be0e:	e043      	b.n	804be98 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 804be10:	f107 0316 	add.w	r3, r7, #22
 804be14:	4619      	mov	r1, r3
 804be16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 804be18:	f000 f979 	bl	804c10e <USBH_GetNextDesc>
 804be1c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 804be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be20:	785b      	ldrb	r3, [r3, #1]
 804be22:	2b05      	cmp	r3, #5
 804be24:	d138      	bne.n	804be98 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 804be26:	69fb      	ldr	r3, [r7, #28]
 804be28:	795b      	ldrb	r3, [r3, #5]
 804be2a:	2b01      	cmp	r3, #1
 804be2c:	d10f      	bne.n	804be4e <USBH_ParseCfgDesc+0x13a>
 804be2e:	69fb      	ldr	r3, [r7, #28]
 804be30:	799b      	ldrb	r3, [r3, #6]
 804be32:	2b02      	cmp	r3, #2
 804be34:	d10b      	bne.n	804be4e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804be36:	69fb      	ldr	r3, [r7, #28]
 804be38:	79db      	ldrb	r3, [r3, #7]
 804be3a:	2b00      	cmp	r3, #0
 804be3c:	d10f      	bne.n	804be5e <USBH_ParseCfgDesc+0x14a>
 804be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be40:	781b      	ldrb	r3, [r3, #0]
 804be42:	2b09      	cmp	r3, #9
 804be44:	d00b      	beq.n	804be5e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 804be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be48:	2209      	movs	r2, #9
 804be4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804be4c:	e007      	b.n	804be5e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 804be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be50:	781b      	ldrb	r3, [r3, #0]
 804be52:	2b07      	cmp	r3, #7
 804be54:	d004      	beq.n	804be60 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 804be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804be58:	2207      	movs	r2, #7
 804be5a:	701a      	strb	r2, [r3, #0]
 804be5c:	e000      	b.n	804be60 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 804be5e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 804be60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804be64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804be68:	3201      	adds	r2, #1
 804be6a:	00d2      	lsls	r2, r2, #3
 804be6c:	211a      	movs	r1, #26
 804be6e:	fb01 f303 	mul.w	r3, r1, r3
 804be72:	4413      	add	r3, r2
 804be74:	3308      	adds	r3, #8
 804be76:	6a3a      	ldr	r2, [r7, #32]
 804be78:	4413      	add	r3, r2
 804be7a:	3304      	adds	r3, #4
 804be7c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 804be7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804be80:	69b9      	ldr	r1, [r7, #24]
 804be82:	68f8      	ldr	r0, [r7, #12]
 804be84:	f000 f86b 	bl	804bf5e <USBH_ParseEPDesc>
 804be88:	4603      	mov	r3, r0
 804be8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 804be8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 804be92:	3301      	adds	r3, #1
 804be94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 804be98:	69fb      	ldr	r3, [r7, #28]
 804be9a:	791b      	ldrb	r3, [r3, #4]
 804be9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804bea0:	429a      	cmp	r2, r3
 804bea2:	d204      	bcs.n	804beae <USBH_ParseCfgDesc+0x19a>
 804bea4:	6a3b      	ldr	r3, [r7, #32]
 804bea6:	885a      	ldrh	r2, [r3, #2]
 804bea8:	8afb      	ldrh	r3, [r7, #22]
 804beaa:	429a      	cmp	r2, r3
 804beac:	d8b0      	bhi.n	804be10 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 804beae:	69fb      	ldr	r3, [r7, #28]
 804beb0:	791b      	ldrb	r3, [r3, #4]
 804beb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 804beb6:	429a      	cmp	r2, r3
 804beb8:	d201      	bcs.n	804bebe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 804beba:	2303      	movs	r3, #3
 804bebc:	e01c      	b.n	804bef8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 804bebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804bec2:	3301      	adds	r3, #1
 804bec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 804bec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804becc:	2b01      	cmp	r3, #1
 804bece:	d805      	bhi.n	804bedc <USBH_ParseCfgDesc+0x1c8>
 804bed0:	6a3b      	ldr	r3, [r7, #32]
 804bed2:	885a      	ldrh	r2, [r3, #2]
 804bed4:	8afb      	ldrh	r3, [r7, #22]
 804bed6:	429a      	cmp	r2, r3
 804bed8:	f63f af74 	bhi.w	804bdc4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 804bedc:	6a3b      	ldr	r3, [r7, #32]
 804bede:	791b      	ldrb	r3, [r3, #4]
 804bee0:	2b02      	cmp	r3, #2
 804bee2:	bf28      	it	cs
 804bee4:	2302      	movcs	r3, #2
 804bee6:	b2db      	uxtb	r3, r3
 804bee8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 804beec:	429a      	cmp	r2, r3
 804beee:	d201      	bcs.n	804bef4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 804bef0:	2303      	movs	r3, #3
 804bef2:	e001      	b.n	804bef8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 804bef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 804bef8:	4618      	mov	r0, r3
 804befa:	3730      	adds	r7, #48	; 0x30
 804befc:	46bd      	mov	sp, r7
 804befe:	bd80      	pop	{r7, pc}

0804bf00 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 804bf00:	b480      	push	{r7}
 804bf02:	b083      	sub	sp, #12
 804bf04:	af00      	add	r7, sp, #0
 804bf06:	6078      	str	r0, [r7, #4]
 804bf08:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 804bf0a:	683b      	ldr	r3, [r7, #0]
 804bf0c:	781a      	ldrb	r2, [r3, #0]
 804bf0e:	687b      	ldr	r3, [r7, #4]
 804bf10:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 804bf12:	683b      	ldr	r3, [r7, #0]
 804bf14:	785a      	ldrb	r2, [r3, #1]
 804bf16:	687b      	ldr	r3, [r7, #4]
 804bf18:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 804bf1a:	683b      	ldr	r3, [r7, #0]
 804bf1c:	789a      	ldrb	r2, [r3, #2]
 804bf1e:	687b      	ldr	r3, [r7, #4]
 804bf20:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 804bf22:	683b      	ldr	r3, [r7, #0]
 804bf24:	78da      	ldrb	r2, [r3, #3]
 804bf26:	687b      	ldr	r3, [r7, #4]
 804bf28:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 804bf2a:	683b      	ldr	r3, [r7, #0]
 804bf2c:	791a      	ldrb	r2, [r3, #4]
 804bf2e:	687b      	ldr	r3, [r7, #4]
 804bf30:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 804bf32:	683b      	ldr	r3, [r7, #0]
 804bf34:	795a      	ldrb	r2, [r3, #5]
 804bf36:	687b      	ldr	r3, [r7, #4]
 804bf38:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 804bf3a:	683b      	ldr	r3, [r7, #0]
 804bf3c:	799a      	ldrb	r2, [r3, #6]
 804bf3e:	687b      	ldr	r3, [r7, #4]
 804bf40:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 804bf42:	683b      	ldr	r3, [r7, #0]
 804bf44:	79da      	ldrb	r2, [r3, #7]
 804bf46:	687b      	ldr	r3, [r7, #4]
 804bf48:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 804bf4a:	683b      	ldr	r3, [r7, #0]
 804bf4c:	7a1a      	ldrb	r2, [r3, #8]
 804bf4e:	687b      	ldr	r3, [r7, #4]
 804bf50:	721a      	strb	r2, [r3, #8]
}
 804bf52:	bf00      	nop
 804bf54:	370c      	adds	r7, #12
 804bf56:	46bd      	mov	sp, r7
 804bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bf5c:	4770      	bx	lr

0804bf5e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 804bf5e:	b480      	push	{r7}
 804bf60:	b087      	sub	sp, #28
 804bf62:	af00      	add	r7, sp, #0
 804bf64:	60f8      	str	r0, [r7, #12]
 804bf66:	60b9      	str	r1, [r7, #8]
 804bf68:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 804bf6a:	2300      	movs	r3, #0
 804bf6c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 804bf6e:	687b      	ldr	r3, [r7, #4]
 804bf70:	781a      	ldrb	r2, [r3, #0]
 804bf72:	68bb      	ldr	r3, [r7, #8]
 804bf74:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 804bf76:	687b      	ldr	r3, [r7, #4]
 804bf78:	785a      	ldrb	r2, [r3, #1]
 804bf7a:	68bb      	ldr	r3, [r7, #8]
 804bf7c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 804bf7e:	687b      	ldr	r3, [r7, #4]
 804bf80:	789a      	ldrb	r2, [r3, #2]
 804bf82:	68bb      	ldr	r3, [r7, #8]
 804bf84:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 804bf86:	687b      	ldr	r3, [r7, #4]
 804bf88:	78da      	ldrb	r2, [r3, #3]
 804bf8a:	68bb      	ldr	r3, [r7, #8]
 804bf8c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 804bf8e:	687b      	ldr	r3, [r7, #4]
 804bf90:	3304      	adds	r3, #4
 804bf92:	781b      	ldrb	r3, [r3, #0]
 804bf94:	b29a      	uxth	r2, r3
 804bf96:	687b      	ldr	r3, [r7, #4]
 804bf98:	3305      	adds	r3, #5
 804bf9a:	781b      	ldrb	r3, [r3, #0]
 804bf9c:	b29b      	uxth	r3, r3
 804bf9e:	021b      	lsls	r3, r3, #8
 804bfa0:	b29b      	uxth	r3, r3
 804bfa2:	4313      	orrs	r3, r2
 804bfa4:	b29a      	uxth	r2, r3
 804bfa6:	68bb      	ldr	r3, [r7, #8]
 804bfa8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 804bfaa:	687b      	ldr	r3, [r7, #4]
 804bfac:	799a      	ldrb	r2, [r3, #6]
 804bfae:	68bb      	ldr	r3, [r7, #8]
 804bfb0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 804bfb2:	68bb      	ldr	r3, [r7, #8]
 804bfb4:	889b      	ldrh	r3, [r3, #4]
 804bfb6:	2b00      	cmp	r3, #0
 804bfb8:	d102      	bne.n	804bfc0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 804bfba:	2303      	movs	r3, #3
 804bfbc:	75fb      	strb	r3, [r7, #23]
 804bfbe:	e033      	b.n	804c028 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 804bfc0:	68bb      	ldr	r3, [r7, #8]
 804bfc2:	889b      	ldrh	r3, [r3, #4]
 804bfc4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804bfc8:	f023 0307 	bic.w	r3, r3, #7
 804bfcc:	b29a      	uxth	r2, r3
 804bfce:	68bb      	ldr	r3, [r7, #8]
 804bfd0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 804bfd2:	68bb      	ldr	r3, [r7, #8]
 804bfd4:	889b      	ldrh	r3, [r3, #4]
 804bfd6:	b21a      	sxth	r2, r3
 804bfd8:	687b      	ldr	r3, [r7, #4]
 804bfda:	3304      	adds	r3, #4
 804bfdc:	781b      	ldrb	r3, [r3, #0]
 804bfde:	b299      	uxth	r1, r3
 804bfe0:	687b      	ldr	r3, [r7, #4]
 804bfe2:	3305      	adds	r3, #5
 804bfe4:	781b      	ldrb	r3, [r3, #0]
 804bfe6:	b29b      	uxth	r3, r3
 804bfe8:	021b      	lsls	r3, r3, #8
 804bfea:	b29b      	uxth	r3, r3
 804bfec:	430b      	orrs	r3, r1
 804bfee:	b29b      	uxth	r3, r3
 804bff0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 804bff4:	2b00      	cmp	r3, #0
 804bff6:	d110      	bne.n	804c01a <USBH_ParseEPDesc+0xbc>
 804bff8:	687b      	ldr	r3, [r7, #4]
 804bffa:	3304      	adds	r3, #4
 804bffc:	781b      	ldrb	r3, [r3, #0]
 804bffe:	b299      	uxth	r1, r3
 804c000:	687b      	ldr	r3, [r7, #4]
 804c002:	3305      	adds	r3, #5
 804c004:	781b      	ldrb	r3, [r3, #0]
 804c006:	b29b      	uxth	r3, r3
 804c008:	021b      	lsls	r3, r3, #8
 804c00a:	b29b      	uxth	r3, r3
 804c00c:	430b      	orrs	r3, r1
 804c00e:	b29b      	uxth	r3, r3
 804c010:	b21b      	sxth	r3, r3
 804c012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 804c016:	b21b      	sxth	r3, r3
 804c018:	e001      	b.n	804c01e <USBH_ParseEPDesc+0xc0>
 804c01a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804c01e:	4313      	orrs	r3, r2
 804c020:	b21b      	sxth	r3, r3
 804c022:	b29a      	uxth	r2, r3
 804c024:	68bb      	ldr	r3, [r7, #8]
 804c026:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 804c028:	68fb      	ldr	r3, [r7, #12]
 804c02a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c02e:	2b00      	cmp	r3, #0
 804c030:	d116      	bne.n	804c060 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c032:	68bb      	ldr	r3, [r7, #8]
 804c034:	78db      	ldrb	r3, [r3, #3]
 804c036:	f003 0303 	and.w	r3, r3, #3
 804c03a:	2b01      	cmp	r3, #1
 804c03c:	d005      	beq.n	804c04a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 804c03e:	68bb      	ldr	r3, [r7, #8]
 804c040:	78db      	ldrb	r3, [r3, #3]
 804c042:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 804c046:	2b03      	cmp	r3, #3
 804c048:	d127      	bne.n	804c09a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c04a:	68bb      	ldr	r3, [r7, #8]
 804c04c:	799b      	ldrb	r3, [r3, #6]
 804c04e:	2b00      	cmp	r3, #0
 804c050:	d003      	beq.n	804c05a <USBH_ParseEPDesc+0xfc>
 804c052:	68bb      	ldr	r3, [r7, #8]
 804c054:	799b      	ldrb	r3, [r3, #6]
 804c056:	2b10      	cmp	r3, #16
 804c058:	d91f      	bls.n	804c09a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c05a:	2303      	movs	r3, #3
 804c05c:	75fb      	strb	r3, [r7, #23]
 804c05e:	e01c      	b.n	804c09a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 804c060:	68bb      	ldr	r3, [r7, #8]
 804c062:	78db      	ldrb	r3, [r3, #3]
 804c064:	f003 0303 	and.w	r3, r3, #3
 804c068:	2b01      	cmp	r3, #1
 804c06a:	d10a      	bne.n	804c082 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 804c06c:	68bb      	ldr	r3, [r7, #8]
 804c06e:	799b      	ldrb	r3, [r3, #6]
 804c070:	2b00      	cmp	r3, #0
 804c072:	d003      	beq.n	804c07c <USBH_ParseEPDesc+0x11e>
 804c074:	68bb      	ldr	r3, [r7, #8]
 804c076:	799b      	ldrb	r3, [r3, #6]
 804c078:	2b10      	cmp	r3, #16
 804c07a:	d90e      	bls.n	804c09a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c07c:	2303      	movs	r3, #3
 804c07e:	75fb      	strb	r3, [r7, #23]
 804c080:	e00b      	b.n	804c09a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 804c082:	68bb      	ldr	r3, [r7, #8]
 804c084:	78db      	ldrb	r3, [r3, #3]
 804c086:	f003 0303 	and.w	r3, r3, #3
 804c08a:	2b03      	cmp	r3, #3
 804c08c:	d105      	bne.n	804c09a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 804c08e:	68bb      	ldr	r3, [r7, #8]
 804c090:	799b      	ldrb	r3, [r3, #6]
 804c092:	2b00      	cmp	r3, #0
 804c094:	d101      	bne.n	804c09a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 804c096:	2303      	movs	r3, #3
 804c098:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 804c09a:	7dfb      	ldrb	r3, [r7, #23]
}
 804c09c:	4618      	mov	r0, r3
 804c09e:	371c      	adds	r7, #28
 804c0a0:	46bd      	mov	sp, r7
 804c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0a6:	4770      	bx	lr

0804c0a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 804c0a8:	b480      	push	{r7}
 804c0aa:	b087      	sub	sp, #28
 804c0ac:	af00      	add	r7, sp, #0
 804c0ae:	60f8      	str	r0, [r7, #12]
 804c0b0:	60b9      	str	r1, [r7, #8]
 804c0b2:	4613      	mov	r3, r2
 804c0b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 804c0b6:	68fb      	ldr	r3, [r7, #12]
 804c0b8:	3301      	adds	r3, #1
 804c0ba:	781b      	ldrb	r3, [r3, #0]
 804c0bc:	2b03      	cmp	r3, #3
 804c0be:	d120      	bne.n	804c102 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 804c0c0:	68fb      	ldr	r3, [r7, #12]
 804c0c2:	781b      	ldrb	r3, [r3, #0]
 804c0c4:	1e9a      	subs	r2, r3, #2
 804c0c6:	88fb      	ldrh	r3, [r7, #6]
 804c0c8:	4293      	cmp	r3, r2
 804c0ca:	bf28      	it	cs
 804c0cc:	4613      	movcs	r3, r2
 804c0ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 804c0d0:	68fb      	ldr	r3, [r7, #12]
 804c0d2:	3302      	adds	r3, #2
 804c0d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 804c0d6:	2300      	movs	r3, #0
 804c0d8:	82fb      	strh	r3, [r7, #22]
 804c0da:	e00b      	b.n	804c0f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 804c0dc:	8afb      	ldrh	r3, [r7, #22]
 804c0de:	68fa      	ldr	r2, [r7, #12]
 804c0e0:	4413      	add	r3, r2
 804c0e2:	781a      	ldrb	r2, [r3, #0]
 804c0e4:	68bb      	ldr	r3, [r7, #8]
 804c0e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 804c0e8:	68bb      	ldr	r3, [r7, #8]
 804c0ea:	3301      	adds	r3, #1
 804c0ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 804c0ee:	8afb      	ldrh	r3, [r7, #22]
 804c0f0:	3302      	adds	r3, #2
 804c0f2:	82fb      	strh	r3, [r7, #22]
 804c0f4:	8afa      	ldrh	r2, [r7, #22]
 804c0f6:	8abb      	ldrh	r3, [r7, #20]
 804c0f8:	429a      	cmp	r2, r3
 804c0fa:	d3ef      	bcc.n	804c0dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 804c0fc:	68bb      	ldr	r3, [r7, #8]
 804c0fe:	2200      	movs	r2, #0
 804c100:	701a      	strb	r2, [r3, #0]
  }
}
 804c102:	bf00      	nop
 804c104:	371c      	adds	r7, #28
 804c106:	46bd      	mov	sp, r7
 804c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c10c:	4770      	bx	lr

0804c10e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 804c10e:	b480      	push	{r7}
 804c110:	b085      	sub	sp, #20
 804c112:	af00      	add	r7, sp, #0
 804c114:	6078      	str	r0, [r7, #4]
 804c116:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 804c118:	683b      	ldr	r3, [r7, #0]
 804c11a:	881a      	ldrh	r2, [r3, #0]
 804c11c:	687b      	ldr	r3, [r7, #4]
 804c11e:	781b      	ldrb	r3, [r3, #0]
 804c120:	b29b      	uxth	r3, r3
 804c122:	4413      	add	r3, r2
 804c124:	b29a      	uxth	r2, r3
 804c126:	683b      	ldr	r3, [r7, #0]
 804c128:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 804c12a:	687b      	ldr	r3, [r7, #4]
 804c12c:	781b      	ldrb	r3, [r3, #0]
 804c12e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 804c130:	687b      	ldr	r3, [r7, #4]
 804c132:	4413      	add	r3, r2
 804c134:	60fb      	str	r3, [r7, #12]

  return (pnext);
 804c136:	68fb      	ldr	r3, [r7, #12]
}
 804c138:	4618      	mov	r0, r3
 804c13a:	3714      	adds	r7, #20
 804c13c:	46bd      	mov	sp, r7
 804c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c142:	4770      	bx	lr

0804c144 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 804c144:	b580      	push	{r7, lr}
 804c146:	b086      	sub	sp, #24
 804c148:	af00      	add	r7, sp, #0
 804c14a:	60f8      	str	r0, [r7, #12]
 804c14c:	60b9      	str	r1, [r7, #8]
 804c14e:	4613      	mov	r3, r2
 804c150:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 804c152:	2301      	movs	r3, #1
 804c154:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 804c156:	68fb      	ldr	r3, [r7, #12]
 804c158:	789b      	ldrb	r3, [r3, #2]
 804c15a:	2b01      	cmp	r3, #1
 804c15c:	d002      	beq.n	804c164 <USBH_CtlReq+0x20>
 804c15e:	2b02      	cmp	r3, #2
 804c160:	d00f      	beq.n	804c182 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 804c162:	e027      	b.n	804c1b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 804c164:	68fb      	ldr	r3, [r7, #12]
 804c166:	68ba      	ldr	r2, [r7, #8]
 804c168:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 804c16a:	68fb      	ldr	r3, [r7, #12]
 804c16c:	88fa      	ldrh	r2, [r7, #6]
 804c16e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 804c170:	68fb      	ldr	r3, [r7, #12]
 804c172:	2201      	movs	r2, #1
 804c174:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 804c176:	68fb      	ldr	r3, [r7, #12]
 804c178:	2202      	movs	r2, #2
 804c17a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 804c17c:	2301      	movs	r3, #1
 804c17e:	75fb      	strb	r3, [r7, #23]
      break;
 804c180:	e018      	b.n	804c1b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 804c182:	68f8      	ldr	r0, [r7, #12]
 804c184:	f000 f81c 	bl	804c1c0 <USBH_HandleControl>
 804c188:	4603      	mov	r3, r0
 804c18a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 804c18c:	7dfb      	ldrb	r3, [r7, #23]
 804c18e:	2b00      	cmp	r3, #0
 804c190:	d002      	beq.n	804c198 <USBH_CtlReq+0x54>
 804c192:	7dfb      	ldrb	r3, [r7, #23]
 804c194:	2b03      	cmp	r3, #3
 804c196:	d106      	bne.n	804c1a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 804c198:	68fb      	ldr	r3, [r7, #12]
 804c19a:	2201      	movs	r2, #1
 804c19c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 804c19e:	68fb      	ldr	r3, [r7, #12]
 804c1a0:	2200      	movs	r2, #0
 804c1a2:	761a      	strb	r2, [r3, #24]
      break;
 804c1a4:	e005      	b.n	804c1b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 804c1a6:	7dfb      	ldrb	r3, [r7, #23]
 804c1a8:	2b02      	cmp	r3, #2
 804c1aa:	d102      	bne.n	804c1b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 804c1ac:	68fb      	ldr	r3, [r7, #12]
 804c1ae:	2201      	movs	r2, #1
 804c1b0:	709a      	strb	r2, [r3, #2]
      break;
 804c1b2:	bf00      	nop
  }
  return status;
 804c1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 804c1b6:	4618      	mov	r0, r3
 804c1b8:	3718      	adds	r7, #24
 804c1ba:	46bd      	mov	sp, r7
 804c1bc:	bd80      	pop	{r7, pc}
	...

0804c1c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 804c1c0:	b580      	push	{r7, lr}
 804c1c2:	b086      	sub	sp, #24
 804c1c4:	af02      	add	r7, sp, #8
 804c1c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 804c1c8:	2301      	movs	r3, #1
 804c1ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 804c1cc:	2300      	movs	r3, #0
 804c1ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 804c1d0:	687b      	ldr	r3, [r7, #4]
 804c1d2:	7e1b      	ldrb	r3, [r3, #24]
 804c1d4:	3b01      	subs	r3, #1
 804c1d6:	2b0a      	cmp	r3, #10
 804c1d8:	f200 8156 	bhi.w	804c488 <USBH_HandleControl+0x2c8>
 804c1dc:	a201      	add	r2, pc, #4	; (adr r2, 804c1e4 <USBH_HandleControl+0x24>)
 804c1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c1e2:	bf00      	nop
 804c1e4:	0804c211 	.word	0x0804c211
 804c1e8:	0804c22b 	.word	0x0804c22b
 804c1ec:	0804c295 	.word	0x0804c295
 804c1f0:	0804c2bb 	.word	0x0804c2bb
 804c1f4:	0804c2f3 	.word	0x0804c2f3
 804c1f8:	0804c31d 	.word	0x0804c31d
 804c1fc:	0804c36f 	.word	0x0804c36f
 804c200:	0804c391 	.word	0x0804c391
 804c204:	0804c3cd 	.word	0x0804c3cd
 804c208:	0804c3f3 	.word	0x0804c3f3
 804c20c:	0804c431 	.word	0x0804c431
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 804c210:	687b      	ldr	r3, [r7, #4]
 804c212:	f103 0110 	add.w	r1, r3, #16
 804c216:	687b      	ldr	r3, [r7, #4]
 804c218:	795b      	ldrb	r3, [r3, #5]
 804c21a:	461a      	mov	r2, r3
 804c21c:	6878      	ldr	r0, [r7, #4]
 804c21e:	f000 f943 	bl	804c4a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 804c222:	687b      	ldr	r3, [r7, #4]
 804c224:	2202      	movs	r2, #2
 804c226:	761a      	strb	r2, [r3, #24]
      break;
 804c228:	e139      	b.n	804c49e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c22a:	687b      	ldr	r3, [r7, #4]
 804c22c:	795b      	ldrb	r3, [r3, #5]
 804c22e:	4619      	mov	r1, r3
 804c230:	6878      	ldr	r0, [r7, #4]
 804c232:	f000 fccb 	bl	804cbcc <USBH_LL_GetURBState>
 804c236:	4603      	mov	r3, r0
 804c238:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 804c23a:	7bbb      	ldrb	r3, [r7, #14]
 804c23c:	2b01      	cmp	r3, #1
 804c23e:	d11e      	bne.n	804c27e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 804c240:	687b      	ldr	r3, [r7, #4]
 804c242:	7c1b      	ldrb	r3, [r3, #16]
 804c244:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804c248:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 804c24a:	687b      	ldr	r3, [r7, #4]
 804c24c:	8adb      	ldrh	r3, [r3, #22]
 804c24e:	2b00      	cmp	r3, #0
 804c250:	d00a      	beq.n	804c268 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 804c252:	7b7b      	ldrb	r3, [r7, #13]
 804c254:	2b80      	cmp	r3, #128	; 0x80
 804c256:	d103      	bne.n	804c260 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 804c258:	687b      	ldr	r3, [r7, #4]
 804c25a:	2203      	movs	r2, #3
 804c25c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c25e:	e115      	b.n	804c48c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 804c260:	687b      	ldr	r3, [r7, #4]
 804c262:	2205      	movs	r2, #5
 804c264:	761a      	strb	r2, [r3, #24]
      break;
 804c266:	e111      	b.n	804c48c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 804c268:	7b7b      	ldrb	r3, [r7, #13]
 804c26a:	2b80      	cmp	r3, #128	; 0x80
 804c26c:	d103      	bne.n	804c276 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 804c26e:	687b      	ldr	r3, [r7, #4]
 804c270:	2209      	movs	r2, #9
 804c272:	761a      	strb	r2, [r3, #24]
      break;
 804c274:	e10a      	b.n	804c48c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 804c276:	687b      	ldr	r3, [r7, #4]
 804c278:	2207      	movs	r2, #7
 804c27a:	761a      	strb	r2, [r3, #24]
      break;
 804c27c:	e106      	b.n	804c48c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 804c27e:	7bbb      	ldrb	r3, [r7, #14]
 804c280:	2b04      	cmp	r3, #4
 804c282:	d003      	beq.n	804c28c <USBH_HandleControl+0xcc>
 804c284:	7bbb      	ldrb	r3, [r7, #14]
 804c286:	2b02      	cmp	r3, #2
 804c288:	f040 8100 	bne.w	804c48c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 804c28c:	687b      	ldr	r3, [r7, #4]
 804c28e:	220b      	movs	r2, #11
 804c290:	761a      	strb	r2, [r3, #24]
      break;
 804c292:	e0fb      	b.n	804c48c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 804c294:	687b      	ldr	r3, [r7, #4]
 804c296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c29a:	b29a      	uxth	r2, r3
 804c29c:	687b      	ldr	r3, [r7, #4]
 804c29e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 804c2a0:	687b      	ldr	r3, [r7, #4]
 804c2a2:	6899      	ldr	r1, [r3, #8]
 804c2a4:	687b      	ldr	r3, [r7, #4]
 804c2a6:	899a      	ldrh	r2, [r3, #12]
 804c2a8:	687b      	ldr	r3, [r7, #4]
 804c2aa:	791b      	ldrb	r3, [r3, #4]
 804c2ac:	6878      	ldr	r0, [r7, #4]
 804c2ae:	f000 f93a 	bl	804c526 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 804c2b2:	687b      	ldr	r3, [r7, #4]
 804c2b4:	2204      	movs	r2, #4
 804c2b6:	761a      	strb	r2, [r3, #24]
      break;
 804c2b8:	e0f1      	b.n	804c49e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804c2ba:	687b      	ldr	r3, [r7, #4]
 804c2bc:	791b      	ldrb	r3, [r3, #4]
 804c2be:	4619      	mov	r1, r3
 804c2c0:	6878      	ldr	r0, [r7, #4]
 804c2c2:	f000 fc83 	bl	804cbcc <USBH_LL_GetURBState>
 804c2c6:	4603      	mov	r3, r0
 804c2c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 804c2ca:	7bbb      	ldrb	r3, [r7, #14]
 804c2cc:	2b01      	cmp	r3, #1
 804c2ce:	d102      	bne.n	804c2d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 804c2d0:	687b      	ldr	r3, [r7, #4]
 804c2d2:	2209      	movs	r2, #9
 804c2d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 804c2d6:	7bbb      	ldrb	r3, [r7, #14]
 804c2d8:	2b05      	cmp	r3, #5
 804c2da:	d102      	bne.n	804c2e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 804c2dc:	2303      	movs	r3, #3
 804c2de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c2e0:	e0d6      	b.n	804c490 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 804c2e2:	7bbb      	ldrb	r3, [r7, #14]
 804c2e4:	2b04      	cmp	r3, #4
 804c2e6:	f040 80d3 	bne.w	804c490 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 804c2ea:	687b      	ldr	r3, [r7, #4]
 804c2ec:	220b      	movs	r2, #11
 804c2ee:	761a      	strb	r2, [r3, #24]
      break;
 804c2f0:	e0ce      	b.n	804c490 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 804c2f2:	687b      	ldr	r3, [r7, #4]
 804c2f4:	6899      	ldr	r1, [r3, #8]
 804c2f6:	687b      	ldr	r3, [r7, #4]
 804c2f8:	899a      	ldrh	r2, [r3, #12]
 804c2fa:	687b      	ldr	r3, [r7, #4]
 804c2fc:	795b      	ldrb	r3, [r3, #5]
 804c2fe:	2001      	movs	r0, #1
 804c300:	9000      	str	r0, [sp, #0]
 804c302:	6878      	ldr	r0, [r7, #4]
 804c304:	f000 f8ea 	bl	804c4dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 804c308:	687b      	ldr	r3, [r7, #4]
 804c30a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c30e:	b29a      	uxth	r2, r3
 804c310:	687b      	ldr	r3, [r7, #4]
 804c312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 804c314:	687b      	ldr	r3, [r7, #4]
 804c316:	2206      	movs	r2, #6
 804c318:	761a      	strb	r2, [r3, #24]
      break;
 804c31a:	e0c0      	b.n	804c49e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c31c:	687b      	ldr	r3, [r7, #4]
 804c31e:	795b      	ldrb	r3, [r3, #5]
 804c320:	4619      	mov	r1, r3
 804c322:	6878      	ldr	r0, [r7, #4]
 804c324:	f000 fc52 	bl	804cbcc <USBH_LL_GetURBState>
 804c328:	4603      	mov	r3, r0
 804c32a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804c32c:	7bbb      	ldrb	r3, [r7, #14]
 804c32e:	2b01      	cmp	r3, #1
 804c330:	d103      	bne.n	804c33a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 804c332:	687b      	ldr	r3, [r7, #4]
 804c334:	2207      	movs	r2, #7
 804c336:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c338:	e0ac      	b.n	804c494 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 804c33a:	7bbb      	ldrb	r3, [r7, #14]
 804c33c:	2b05      	cmp	r3, #5
 804c33e:	d105      	bne.n	804c34c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 804c340:	687b      	ldr	r3, [r7, #4]
 804c342:	220c      	movs	r2, #12
 804c344:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 804c346:	2303      	movs	r3, #3
 804c348:	73fb      	strb	r3, [r7, #15]
      break;
 804c34a:	e0a3      	b.n	804c494 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 804c34c:	7bbb      	ldrb	r3, [r7, #14]
 804c34e:	2b02      	cmp	r3, #2
 804c350:	d103      	bne.n	804c35a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 804c352:	687b      	ldr	r3, [r7, #4]
 804c354:	2205      	movs	r2, #5
 804c356:	761a      	strb	r2, [r3, #24]
      break;
 804c358:	e09c      	b.n	804c494 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 804c35a:	7bbb      	ldrb	r3, [r7, #14]
 804c35c:	2b04      	cmp	r3, #4
 804c35e:	f040 8099 	bne.w	804c494 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 804c362:	687b      	ldr	r3, [r7, #4]
 804c364:	220b      	movs	r2, #11
 804c366:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 804c368:	2302      	movs	r3, #2
 804c36a:	73fb      	strb	r3, [r7, #15]
      break;
 804c36c:	e092      	b.n	804c494 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 804c36e:	687b      	ldr	r3, [r7, #4]
 804c370:	791b      	ldrb	r3, [r3, #4]
 804c372:	2200      	movs	r2, #0
 804c374:	2100      	movs	r1, #0
 804c376:	6878      	ldr	r0, [r7, #4]
 804c378:	f000 f8d5 	bl	804c526 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804c37c:	687b      	ldr	r3, [r7, #4]
 804c37e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c382:	b29a      	uxth	r2, r3
 804c384:	687b      	ldr	r3, [r7, #4]
 804c386:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 804c388:	687b      	ldr	r3, [r7, #4]
 804c38a:	2208      	movs	r2, #8
 804c38c:	761a      	strb	r2, [r3, #24]

      break;
 804c38e:	e086      	b.n	804c49e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 804c390:	687b      	ldr	r3, [r7, #4]
 804c392:	791b      	ldrb	r3, [r3, #4]
 804c394:	4619      	mov	r1, r3
 804c396:	6878      	ldr	r0, [r7, #4]
 804c398:	f000 fc18 	bl	804cbcc <USBH_LL_GetURBState>
 804c39c:	4603      	mov	r3, r0
 804c39e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 804c3a0:	7bbb      	ldrb	r3, [r7, #14]
 804c3a2:	2b01      	cmp	r3, #1
 804c3a4:	d105      	bne.n	804c3b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 804c3a6:	687b      	ldr	r3, [r7, #4]
 804c3a8:	220d      	movs	r2, #13
 804c3aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 804c3ac:	2300      	movs	r3, #0
 804c3ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c3b0:	e072      	b.n	804c498 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 804c3b2:	7bbb      	ldrb	r3, [r7, #14]
 804c3b4:	2b04      	cmp	r3, #4
 804c3b6:	d103      	bne.n	804c3c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 804c3b8:	687b      	ldr	r3, [r7, #4]
 804c3ba:	220b      	movs	r2, #11
 804c3bc:	761a      	strb	r2, [r3, #24]
      break;
 804c3be:	e06b      	b.n	804c498 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 804c3c0:	7bbb      	ldrb	r3, [r7, #14]
 804c3c2:	2b05      	cmp	r3, #5
 804c3c4:	d168      	bne.n	804c498 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 804c3c6:	2303      	movs	r3, #3
 804c3c8:	73fb      	strb	r3, [r7, #15]
      break;
 804c3ca:	e065      	b.n	804c498 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 804c3cc:	687b      	ldr	r3, [r7, #4]
 804c3ce:	795b      	ldrb	r3, [r3, #5]
 804c3d0:	2201      	movs	r2, #1
 804c3d2:	9200      	str	r2, [sp, #0]
 804c3d4:	2200      	movs	r2, #0
 804c3d6:	2100      	movs	r1, #0
 804c3d8:	6878      	ldr	r0, [r7, #4]
 804c3da:	f000 f87f 	bl	804c4dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 804c3de:	687b      	ldr	r3, [r7, #4]
 804c3e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 804c3e4:	b29a      	uxth	r2, r3
 804c3e6:	687b      	ldr	r3, [r7, #4]
 804c3e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 804c3ea:	687b      	ldr	r3, [r7, #4]
 804c3ec:	220a      	movs	r2, #10
 804c3ee:	761a      	strb	r2, [r3, #24]
      break;
 804c3f0:	e055      	b.n	804c49e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 804c3f2:	687b      	ldr	r3, [r7, #4]
 804c3f4:	795b      	ldrb	r3, [r3, #5]
 804c3f6:	4619      	mov	r1, r3
 804c3f8:	6878      	ldr	r0, [r7, #4]
 804c3fa:	f000 fbe7 	bl	804cbcc <USBH_LL_GetURBState>
 804c3fe:	4603      	mov	r3, r0
 804c400:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 804c402:	7bbb      	ldrb	r3, [r7, #14]
 804c404:	2b01      	cmp	r3, #1
 804c406:	d105      	bne.n	804c414 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 804c408:	2300      	movs	r3, #0
 804c40a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 804c40c:	687b      	ldr	r3, [r7, #4]
 804c40e:	220d      	movs	r2, #13
 804c410:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 804c412:	e043      	b.n	804c49c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 804c414:	7bbb      	ldrb	r3, [r7, #14]
 804c416:	2b02      	cmp	r3, #2
 804c418:	d103      	bne.n	804c422 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 804c41a:	687b      	ldr	r3, [r7, #4]
 804c41c:	2209      	movs	r2, #9
 804c41e:	761a      	strb	r2, [r3, #24]
      break;
 804c420:	e03c      	b.n	804c49c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 804c422:	7bbb      	ldrb	r3, [r7, #14]
 804c424:	2b04      	cmp	r3, #4
 804c426:	d139      	bne.n	804c49c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 804c428:	687b      	ldr	r3, [r7, #4]
 804c42a:	220b      	movs	r2, #11
 804c42c:	761a      	strb	r2, [r3, #24]
      break;
 804c42e:	e035      	b.n	804c49c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 804c430:	687b      	ldr	r3, [r7, #4]
 804c432:	7e5b      	ldrb	r3, [r3, #25]
 804c434:	3301      	adds	r3, #1
 804c436:	b2da      	uxtb	r2, r3
 804c438:	687b      	ldr	r3, [r7, #4]
 804c43a:	765a      	strb	r2, [r3, #25]
 804c43c:	687b      	ldr	r3, [r7, #4]
 804c43e:	7e5b      	ldrb	r3, [r3, #25]
 804c440:	2b02      	cmp	r3, #2
 804c442:	d806      	bhi.n	804c452 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 804c444:	687b      	ldr	r3, [r7, #4]
 804c446:	2201      	movs	r2, #1
 804c448:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 804c44a:	687b      	ldr	r3, [r7, #4]
 804c44c:	2201      	movs	r2, #1
 804c44e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 804c450:	e025      	b.n	804c49e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 804c452:	687b      	ldr	r3, [r7, #4]
 804c454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 804c458:	2106      	movs	r1, #6
 804c45a:	6878      	ldr	r0, [r7, #4]
 804c45c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 804c45e:	687b      	ldr	r3, [r7, #4]
 804c460:	2200      	movs	r2, #0
 804c462:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 804c464:	687b      	ldr	r3, [r7, #4]
 804c466:	795b      	ldrb	r3, [r3, #5]
 804c468:	4619      	mov	r1, r3
 804c46a:	6878      	ldr	r0, [r7, #4]
 804c46c:	f000 f90c 	bl	804c688 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 804c470:	687b      	ldr	r3, [r7, #4]
 804c472:	791b      	ldrb	r3, [r3, #4]
 804c474:	4619      	mov	r1, r3
 804c476:	6878      	ldr	r0, [r7, #4]
 804c478:	f000 f906 	bl	804c688 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 804c47c:	687b      	ldr	r3, [r7, #4]
 804c47e:	2200      	movs	r2, #0
 804c480:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 804c482:	2302      	movs	r3, #2
 804c484:	73fb      	strb	r3, [r7, #15]
      break;
 804c486:	e00a      	b.n	804c49e <USBH_HandleControl+0x2de>

    default:
      break;
 804c488:	bf00      	nop
 804c48a:	e008      	b.n	804c49e <USBH_HandleControl+0x2de>
      break;
 804c48c:	bf00      	nop
 804c48e:	e006      	b.n	804c49e <USBH_HandleControl+0x2de>
      break;
 804c490:	bf00      	nop
 804c492:	e004      	b.n	804c49e <USBH_HandleControl+0x2de>
      break;
 804c494:	bf00      	nop
 804c496:	e002      	b.n	804c49e <USBH_HandleControl+0x2de>
      break;
 804c498:	bf00      	nop
 804c49a:	e000      	b.n	804c49e <USBH_HandleControl+0x2de>
      break;
 804c49c:	bf00      	nop
  }

  return status;
 804c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 804c4a0:	4618      	mov	r0, r3
 804c4a2:	3710      	adds	r7, #16
 804c4a4:	46bd      	mov	sp, r7
 804c4a6:	bd80      	pop	{r7, pc}

0804c4a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 804c4a8:	b580      	push	{r7, lr}
 804c4aa:	b088      	sub	sp, #32
 804c4ac:	af04      	add	r7, sp, #16
 804c4ae:	60f8      	str	r0, [r7, #12]
 804c4b0:	60b9      	str	r1, [r7, #8]
 804c4b2:	4613      	mov	r3, r2
 804c4b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c4b6:	79f9      	ldrb	r1, [r7, #7]
 804c4b8:	2300      	movs	r3, #0
 804c4ba:	9303      	str	r3, [sp, #12]
 804c4bc:	2308      	movs	r3, #8
 804c4be:	9302      	str	r3, [sp, #8]
 804c4c0:	68bb      	ldr	r3, [r7, #8]
 804c4c2:	9301      	str	r3, [sp, #4]
 804c4c4:	2300      	movs	r3, #0
 804c4c6:	9300      	str	r3, [sp, #0]
 804c4c8:	2300      	movs	r3, #0
 804c4ca:	2200      	movs	r2, #0
 804c4cc:	68f8      	ldr	r0, [r7, #12]
 804c4ce:	f000 fb4c 	bl	804cb6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 804c4d2:	2300      	movs	r3, #0
}
 804c4d4:	4618      	mov	r0, r3
 804c4d6:	3710      	adds	r7, #16
 804c4d8:	46bd      	mov	sp, r7
 804c4da:	bd80      	pop	{r7, pc}

0804c4dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 804c4dc:	b580      	push	{r7, lr}
 804c4de:	b088      	sub	sp, #32
 804c4e0:	af04      	add	r7, sp, #16
 804c4e2:	60f8      	str	r0, [r7, #12]
 804c4e4:	60b9      	str	r1, [r7, #8]
 804c4e6:	4611      	mov	r1, r2
 804c4e8:	461a      	mov	r2, r3
 804c4ea:	460b      	mov	r3, r1
 804c4ec:	80fb      	strh	r3, [r7, #6]
 804c4ee:	4613      	mov	r3, r2
 804c4f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804c4f2:	68fb      	ldr	r3, [r7, #12]
 804c4f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c4f8:	2b00      	cmp	r3, #0
 804c4fa:	d001      	beq.n	804c500 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 804c4fc:	2300      	movs	r3, #0
 804c4fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c500:	7979      	ldrb	r1, [r7, #5]
 804c502:	7e3b      	ldrb	r3, [r7, #24]
 804c504:	9303      	str	r3, [sp, #12]
 804c506:	88fb      	ldrh	r3, [r7, #6]
 804c508:	9302      	str	r3, [sp, #8]
 804c50a:	68bb      	ldr	r3, [r7, #8]
 804c50c:	9301      	str	r3, [sp, #4]
 804c50e:	2301      	movs	r3, #1
 804c510:	9300      	str	r3, [sp, #0]
 804c512:	2300      	movs	r3, #0
 804c514:	2200      	movs	r2, #0
 804c516:	68f8      	ldr	r0, [r7, #12]
 804c518:	f000 fb27 	bl	804cb6a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 804c51c:	2300      	movs	r3, #0
}
 804c51e:	4618      	mov	r0, r3
 804c520:	3710      	adds	r7, #16
 804c522:	46bd      	mov	sp, r7
 804c524:	bd80      	pop	{r7, pc}

0804c526 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 804c526:	b580      	push	{r7, lr}
 804c528:	b088      	sub	sp, #32
 804c52a:	af04      	add	r7, sp, #16
 804c52c:	60f8      	str	r0, [r7, #12]
 804c52e:	60b9      	str	r1, [r7, #8]
 804c530:	4611      	mov	r1, r2
 804c532:	461a      	mov	r2, r3
 804c534:	460b      	mov	r3, r1
 804c536:	80fb      	strh	r3, [r7, #6]
 804c538:	4613      	mov	r3, r2
 804c53a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c53c:	7979      	ldrb	r1, [r7, #5]
 804c53e:	2300      	movs	r3, #0
 804c540:	9303      	str	r3, [sp, #12]
 804c542:	88fb      	ldrh	r3, [r7, #6]
 804c544:	9302      	str	r3, [sp, #8]
 804c546:	68bb      	ldr	r3, [r7, #8]
 804c548:	9301      	str	r3, [sp, #4]
 804c54a:	2301      	movs	r3, #1
 804c54c:	9300      	str	r3, [sp, #0]
 804c54e:	2300      	movs	r3, #0
 804c550:	2201      	movs	r2, #1
 804c552:	68f8      	ldr	r0, [r7, #12]
 804c554:	f000 fb09 	bl	804cb6a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804c558:	2300      	movs	r3, #0

}
 804c55a:	4618      	mov	r0, r3
 804c55c:	3710      	adds	r7, #16
 804c55e:	46bd      	mov	sp, r7
 804c560:	bd80      	pop	{r7, pc}

0804c562 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 804c562:	b580      	push	{r7, lr}
 804c564:	b088      	sub	sp, #32
 804c566:	af04      	add	r7, sp, #16
 804c568:	60f8      	str	r0, [r7, #12]
 804c56a:	60b9      	str	r1, [r7, #8]
 804c56c:	4611      	mov	r1, r2
 804c56e:	461a      	mov	r2, r3
 804c570:	460b      	mov	r3, r1
 804c572:	80fb      	strh	r3, [r7, #6]
 804c574:	4613      	mov	r3, r2
 804c576:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 804c578:	68fb      	ldr	r3, [r7, #12]
 804c57a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 804c57e:	2b00      	cmp	r3, #0
 804c580:	d001      	beq.n	804c586 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 804c582:	2300      	movs	r3, #0
 804c584:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c586:	7979      	ldrb	r1, [r7, #5]
 804c588:	7e3b      	ldrb	r3, [r7, #24]
 804c58a:	9303      	str	r3, [sp, #12]
 804c58c:	88fb      	ldrh	r3, [r7, #6]
 804c58e:	9302      	str	r3, [sp, #8]
 804c590:	68bb      	ldr	r3, [r7, #8]
 804c592:	9301      	str	r3, [sp, #4]
 804c594:	2301      	movs	r3, #1
 804c596:	9300      	str	r3, [sp, #0]
 804c598:	2302      	movs	r3, #2
 804c59a:	2200      	movs	r2, #0
 804c59c:	68f8      	ldr	r0, [r7, #12]
 804c59e:	f000 fae4 	bl	804cb6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 804c5a2:	2300      	movs	r3, #0
}
 804c5a4:	4618      	mov	r0, r3
 804c5a6:	3710      	adds	r7, #16
 804c5a8:	46bd      	mov	sp, r7
 804c5aa:	bd80      	pop	{r7, pc}

0804c5ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 804c5ac:	b580      	push	{r7, lr}
 804c5ae:	b088      	sub	sp, #32
 804c5b0:	af04      	add	r7, sp, #16
 804c5b2:	60f8      	str	r0, [r7, #12]
 804c5b4:	60b9      	str	r1, [r7, #8]
 804c5b6:	4611      	mov	r1, r2
 804c5b8:	461a      	mov	r2, r3
 804c5ba:	460b      	mov	r3, r1
 804c5bc:	80fb      	strh	r3, [r7, #6]
 804c5be:	4613      	mov	r3, r2
 804c5c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 804c5c2:	7979      	ldrb	r1, [r7, #5]
 804c5c4:	2300      	movs	r3, #0
 804c5c6:	9303      	str	r3, [sp, #12]
 804c5c8:	88fb      	ldrh	r3, [r7, #6]
 804c5ca:	9302      	str	r3, [sp, #8]
 804c5cc:	68bb      	ldr	r3, [r7, #8]
 804c5ce:	9301      	str	r3, [sp, #4]
 804c5d0:	2301      	movs	r3, #1
 804c5d2:	9300      	str	r3, [sp, #0]
 804c5d4:	2302      	movs	r3, #2
 804c5d6:	2201      	movs	r2, #1
 804c5d8:	68f8      	ldr	r0, [r7, #12]
 804c5da:	f000 fac6 	bl	804cb6a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 804c5de:	2300      	movs	r3, #0
}
 804c5e0:	4618      	mov	r0, r3
 804c5e2:	3710      	adds	r7, #16
 804c5e4:	46bd      	mov	sp, r7
 804c5e6:	bd80      	pop	{r7, pc}

0804c5e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804c5e8:	b580      	push	{r7, lr}
 804c5ea:	b086      	sub	sp, #24
 804c5ec:	af04      	add	r7, sp, #16
 804c5ee:	6078      	str	r0, [r7, #4]
 804c5f0:	4608      	mov	r0, r1
 804c5f2:	4611      	mov	r1, r2
 804c5f4:	461a      	mov	r2, r3
 804c5f6:	4603      	mov	r3, r0
 804c5f8:	70fb      	strb	r3, [r7, #3]
 804c5fa:	460b      	mov	r3, r1
 804c5fc:	70bb      	strb	r3, [r7, #2]
 804c5fe:	4613      	mov	r3, r2
 804c600:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 804c602:	7878      	ldrb	r0, [r7, #1]
 804c604:	78ba      	ldrb	r2, [r7, #2]
 804c606:	78f9      	ldrb	r1, [r7, #3]
 804c608:	8b3b      	ldrh	r3, [r7, #24]
 804c60a:	9302      	str	r3, [sp, #8]
 804c60c:	7d3b      	ldrb	r3, [r7, #20]
 804c60e:	9301      	str	r3, [sp, #4]
 804c610:	7c3b      	ldrb	r3, [r7, #16]
 804c612:	9300      	str	r3, [sp, #0]
 804c614:	4603      	mov	r3, r0
 804c616:	6878      	ldr	r0, [r7, #4]
 804c618:	f000 fa59 	bl	804cace <USBH_LL_OpenPipe>

  return USBH_OK;
 804c61c:	2300      	movs	r3, #0
}
 804c61e:	4618      	mov	r0, r3
 804c620:	3708      	adds	r7, #8
 804c622:	46bd      	mov	sp, r7
 804c624:	bd80      	pop	{r7, pc}

0804c626 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 804c626:	b580      	push	{r7, lr}
 804c628:	b082      	sub	sp, #8
 804c62a:	af00      	add	r7, sp, #0
 804c62c:	6078      	str	r0, [r7, #4]
 804c62e:	460b      	mov	r3, r1
 804c630:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 804c632:	78fb      	ldrb	r3, [r7, #3]
 804c634:	4619      	mov	r1, r3
 804c636:	6878      	ldr	r0, [r7, #4]
 804c638:	f000 fa78 	bl	804cb2c <USBH_LL_ClosePipe>

  return USBH_OK;
 804c63c:	2300      	movs	r3, #0
}
 804c63e:	4618      	mov	r0, r3
 804c640:	3708      	adds	r7, #8
 804c642:	46bd      	mov	sp, r7
 804c644:	bd80      	pop	{r7, pc}

0804c646 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 804c646:	b580      	push	{r7, lr}
 804c648:	b084      	sub	sp, #16
 804c64a:	af00      	add	r7, sp, #0
 804c64c:	6078      	str	r0, [r7, #4]
 804c64e:	460b      	mov	r3, r1
 804c650:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 804c652:	6878      	ldr	r0, [r7, #4]
 804c654:	f000 f836 	bl	804c6c4 <USBH_GetFreePipe>
 804c658:	4603      	mov	r3, r0
 804c65a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 804c65c:	89fb      	ldrh	r3, [r7, #14]
 804c65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804c662:	4293      	cmp	r3, r2
 804c664:	d00a      	beq.n	804c67c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 804c666:	78fa      	ldrb	r2, [r7, #3]
 804c668:	89fb      	ldrh	r3, [r7, #14]
 804c66a:	f003 030f 	and.w	r3, r3, #15
 804c66e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804c672:	6879      	ldr	r1, [r7, #4]
 804c674:	33e0      	adds	r3, #224	; 0xe0
 804c676:	009b      	lsls	r3, r3, #2
 804c678:	440b      	add	r3, r1
 804c67a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 804c67c:	89fb      	ldrh	r3, [r7, #14]
 804c67e:	b2db      	uxtb	r3, r3
}
 804c680:	4618      	mov	r0, r3
 804c682:	3710      	adds	r7, #16
 804c684:	46bd      	mov	sp, r7
 804c686:	bd80      	pop	{r7, pc}

0804c688 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 804c688:	b480      	push	{r7}
 804c68a:	b083      	sub	sp, #12
 804c68c:	af00      	add	r7, sp, #0
 804c68e:	6078      	str	r0, [r7, #4]
 804c690:	460b      	mov	r3, r1
 804c692:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 804c694:	78fb      	ldrb	r3, [r7, #3]
 804c696:	2b0f      	cmp	r3, #15
 804c698:	d80d      	bhi.n	804c6b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 804c69a:	78fb      	ldrb	r3, [r7, #3]
 804c69c:	687a      	ldr	r2, [r7, #4]
 804c69e:	33e0      	adds	r3, #224	; 0xe0
 804c6a0:	009b      	lsls	r3, r3, #2
 804c6a2:	4413      	add	r3, r2
 804c6a4:	685a      	ldr	r2, [r3, #4]
 804c6a6:	78fb      	ldrb	r3, [r7, #3]
 804c6a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 804c6ac:	6879      	ldr	r1, [r7, #4]
 804c6ae:	33e0      	adds	r3, #224	; 0xe0
 804c6b0:	009b      	lsls	r3, r3, #2
 804c6b2:	440b      	add	r3, r1
 804c6b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 804c6b6:	2300      	movs	r3, #0
}
 804c6b8:	4618      	mov	r0, r3
 804c6ba:	370c      	adds	r7, #12
 804c6bc:	46bd      	mov	sp, r7
 804c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c6c2:	4770      	bx	lr

0804c6c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 804c6c4:	b480      	push	{r7}
 804c6c6:	b085      	sub	sp, #20
 804c6c8:	af00      	add	r7, sp, #0
 804c6ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 804c6cc:	2300      	movs	r3, #0
 804c6ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c6d0:	2300      	movs	r3, #0
 804c6d2:	73fb      	strb	r3, [r7, #15]
 804c6d4:	e00f      	b.n	804c6f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 804c6d6:	7bfb      	ldrb	r3, [r7, #15]
 804c6d8:	687a      	ldr	r2, [r7, #4]
 804c6da:	33e0      	adds	r3, #224	; 0xe0
 804c6dc:	009b      	lsls	r3, r3, #2
 804c6de:	4413      	add	r3, r2
 804c6e0:	685b      	ldr	r3, [r3, #4]
 804c6e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804c6e6:	2b00      	cmp	r3, #0
 804c6e8:	d102      	bne.n	804c6f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 804c6ea:	7bfb      	ldrb	r3, [r7, #15]
 804c6ec:	b29b      	uxth	r3, r3
 804c6ee:	e007      	b.n	804c700 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 804c6f0:	7bfb      	ldrb	r3, [r7, #15]
 804c6f2:	3301      	adds	r3, #1
 804c6f4:	73fb      	strb	r3, [r7, #15]
 804c6f6:	7bfb      	ldrb	r3, [r7, #15]
 804c6f8:	2b0f      	cmp	r3, #15
 804c6fa:	d9ec      	bls.n	804c6d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 804c6fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 804c700:	4618      	mov	r0, r3
 804c702:	3714      	adds	r7, #20
 804c704:	46bd      	mov	sp, r7
 804c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c70a:	4770      	bx	lr

0804c70c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 804c70c:	b580      	push	{r7, lr}
 804c70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 804c710:	2200      	movs	r2, #0
 804c712:	490e      	ldr	r1, [pc, #56]	; (804c74c <MX_USB_HOST_Init+0x40>)
 804c714:	480e      	ldr	r0, [pc, #56]	; (804c750 <MX_USB_HOST_Init+0x44>)
 804c716:	f7fe fba7 	bl	804ae68 <USBH_Init>
 804c71a:	4603      	mov	r3, r0
 804c71c:	2b00      	cmp	r3, #0
 804c71e:	d001      	beq.n	804c724 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 804c720:	f7f4 fbcc 	bl	8040ebc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 804c724:	490b      	ldr	r1, [pc, #44]	; (804c754 <MX_USB_HOST_Init+0x48>)
 804c726:	480a      	ldr	r0, [pc, #40]	; (804c750 <MX_USB_HOST_Init+0x44>)
 804c728:	f7fe fc2c 	bl	804af84 <USBH_RegisterClass>
 804c72c:	4603      	mov	r3, r0
 804c72e:	2b00      	cmp	r3, #0
 804c730:	d001      	beq.n	804c736 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 804c732:	f7f4 fbc3 	bl	8040ebc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 804c736:	4806      	ldr	r0, [pc, #24]	; (804c750 <MX_USB_HOST_Init+0x44>)
 804c738:	f7fe fcb0 	bl	804b09c <USBH_Start>
 804c73c:	4603      	mov	r3, r0
 804c73e:	2b00      	cmp	r3, #0
 804c740:	d001      	beq.n	804c746 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 804c742:	f7f4 fbbb 	bl	8040ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 804c746:	bf00      	nop
 804c748:	bd80      	pop	{r7, pc}
 804c74a:	bf00      	nop
 804c74c:	0804c76d 	.word	0x0804c76d
 804c750:	20000a80 	.word	0x20000a80
 804c754:	2000005c 	.word	0x2000005c

0804c758 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 804c758:	b580      	push	{r7, lr}
 804c75a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 804c75c:	4802      	ldr	r0, [pc, #8]	; (804c768 <MX_USB_HOST_Process+0x10>)
 804c75e:	f7fe fcad 	bl	804b0bc <USBH_Process>
}
 804c762:	bf00      	nop
 804c764:	bd80      	pop	{r7, pc}
 804c766:	bf00      	nop
 804c768:	20000a80 	.word	0x20000a80

0804c76c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 804c76c:	b480      	push	{r7}
 804c76e:	b083      	sub	sp, #12
 804c770:	af00      	add	r7, sp, #0
 804c772:	6078      	str	r0, [r7, #4]
 804c774:	460b      	mov	r3, r1
 804c776:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 804c778:	78fb      	ldrb	r3, [r7, #3]
 804c77a:	3b01      	subs	r3, #1
 804c77c:	2b04      	cmp	r3, #4
 804c77e:	d819      	bhi.n	804c7b4 <USBH_UserProcess+0x48>
 804c780:	a201      	add	r2, pc, #4	; (adr r2, 804c788 <USBH_UserProcess+0x1c>)
 804c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804c786:	bf00      	nop
 804c788:	0804c7b5 	.word	0x0804c7b5
 804c78c:	0804c7a5 	.word	0x0804c7a5
 804c790:	0804c7b5 	.word	0x0804c7b5
 804c794:	0804c7ad 	.word	0x0804c7ad
 804c798:	0804c79d 	.word	0x0804c79d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 804c79c:	4b09      	ldr	r3, [pc, #36]	; (804c7c4 <USBH_UserProcess+0x58>)
 804c79e:	2203      	movs	r2, #3
 804c7a0:	701a      	strb	r2, [r3, #0]
  break;
 804c7a2:	e008      	b.n	804c7b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 804c7a4:	4b07      	ldr	r3, [pc, #28]	; (804c7c4 <USBH_UserProcess+0x58>)
 804c7a6:	2202      	movs	r2, #2
 804c7a8:	701a      	strb	r2, [r3, #0]
  break;
 804c7aa:	e004      	b.n	804c7b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 804c7ac:	4b05      	ldr	r3, [pc, #20]	; (804c7c4 <USBH_UserProcess+0x58>)
 804c7ae:	2201      	movs	r2, #1
 804c7b0:	701a      	strb	r2, [r3, #0]
  break;
 804c7b2:	e000      	b.n	804c7b6 <USBH_UserProcess+0x4a>

  default:
  break;
 804c7b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 804c7b6:	bf00      	nop
 804c7b8:	370c      	adds	r7, #12
 804c7ba:	46bd      	mov	sp, r7
 804c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c7c0:	4770      	bx	lr
 804c7c2:	bf00      	nop
 804c7c4:	20000e58 	.word	0x20000e58

0804c7c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 804c7c8:	b580      	push	{r7, lr}
 804c7ca:	b08a      	sub	sp, #40	; 0x28
 804c7cc:	af00      	add	r7, sp, #0
 804c7ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804c7d0:	f107 0314 	add.w	r3, r7, #20
 804c7d4:	2200      	movs	r2, #0
 804c7d6:	601a      	str	r2, [r3, #0]
 804c7d8:	605a      	str	r2, [r3, #4]
 804c7da:	609a      	str	r2, [r3, #8]
 804c7dc:	60da      	str	r2, [r3, #12]
 804c7de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 804c7e0:	687b      	ldr	r3, [r7, #4]
 804c7e2:	681b      	ldr	r3, [r3, #0]
 804c7e4:	4a24      	ldr	r2, [pc, #144]	; (804c878 <HAL_HCD_MspInit+0xb0>)
 804c7e6:	4293      	cmp	r3, r2
 804c7e8:	d141      	bne.n	804c86e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 804c7ea:	2300      	movs	r3, #0
 804c7ec:	613b      	str	r3, [r7, #16]
 804c7ee:	4b23      	ldr	r3, [pc, #140]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c7f2:	4a22      	ldr	r2, [pc, #136]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c7f4:	f043 0302 	orr.w	r3, r3, #2
 804c7f8:	6313      	str	r3, [r2, #48]	; 0x30
 804c7fa:	4b20      	ldr	r3, [pc, #128]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c7fe:	f003 0302 	and.w	r3, r3, #2
 804c802:	613b      	str	r3, [r7, #16]
 804c804:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 804c806:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 804c80a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804c80c:	2302      	movs	r3, #2
 804c80e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c810:	2300      	movs	r3, #0
 804c812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804c814:	2300      	movs	r3, #0
 804c816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 804c818:	230c      	movs	r3, #12
 804c81a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804c81c:	f107 0314 	add.w	r3, r7, #20
 804c820:	4619      	mov	r1, r3
 804c822:	4817      	ldr	r0, [pc, #92]	; (804c880 <HAL_HCD_MspInit+0xb8>)
 804c824:	f7f7 fbe0 	bl	8043fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 804c828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804c82c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804c82e:	2300      	movs	r3, #0
 804c830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804c832:	2300      	movs	r3, #0
 804c834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 804c836:	f107 0314 	add.w	r3, r7, #20
 804c83a:	4619      	mov	r1, r3
 804c83c:	4810      	ldr	r0, [pc, #64]	; (804c880 <HAL_HCD_MspInit+0xb8>)
 804c83e:	f7f7 fbd3 	bl	8043fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 804c842:	2300      	movs	r3, #0
 804c844:	60fb      	str	r3, [r7, #12]
 804c846:	4b0d      	ldr	r3, [pc, #52]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c84a:	4a0c      	ldr	r2, [pc, #48]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c84c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 804c850:	6313      	str	r3, [r2, #48]	; 0x30
 804c852:	4b0a      	ldr	r3, [pc, #40]	; (804c87c <HAL_HCD_MspInit+0xb4>)
 804c854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804c85a:	60fb      	str	r3, [r7, #12]
 804c85c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 804c85e:	2200      	movs	r2, #0
 804c860:	2100      	movs	r1, #0
 804c862:	204d      	movs	r0, #77	; 0x4d
 804c864:	f7f6 fe20 	bl	80434a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 804c868:	204d      	movs	r0, #77	; 0x4d
 804c86a:	f7f6 fe39 	bl	80434e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 804c86e:	bf00      	nop
 804c870:	3728      	adds	r7, #40	; 0x28
 804c872:	46bd      	mov	sp, r7
 804c874:	bd80      	pop	{r7, pc}
 804c876:	bf00      	nop
 804c878:	40040000 	.word	0x40040000
 804c87c:	40023800 	.word	0x40023800
 804c880:	40020400 	.word	0x40020400

0804c884 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 804c884:	b580      	push	{r7, lr}
 804c886:	b082      	sub	sp, #8
 804c888:	af00      	add	r7, sp, #0
 804c88a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 804c88c:	687b      	ldr	r3, [r7, #4]
 804c88e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c892:	4618      	mov	r0, r3
 804c894:	f7fe fff1 	bl	804b87a <USBH_LL_IncTimer>
}
 804c898:	bf00      	nop
 804c89a:	3708      	adds	r7, #8
 804c89c:	46bd      	mov	sp, r7
 804c89e:	bd80      	pop	{r7, pc}

0804c8a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c8a0:	b580      	push	{r7, lr}
 804c8a2:	b082      	sub	sp, #8
 804c8a4:	af00      	add	r7, sp, #0
 804c8a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 804c8a8:	687b      	ldr	r3, [r7, #4]
 804c8aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c8ae:	4618      	mov	r0, r3
 804c8b0:	f7ff f829 	bl	804b906 <USBH_LL_Connect>
}
 804c8b4:	bf00      	nop
 804c8b6:	3708      	adds	r7, #8
 804c8b8:	46bd      	mov	sp, r7
 804c8ba:	bd80      	pop	{r7, pc}

0804c8bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 804c8bc:	b580      	push	{r7, lr}
 804c8be:	b082      	sub	sp, #8
 804c8c0:	af00      	add	r7, sp, #0
 804c8c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 804c8c4:	687b      	ldr	r3, [r7, #4]
 804c8c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c8ca:	4618      	mov	r0, r3
 804c8cc:	f7ff f832 	bl	804b934 <USBH_LL_Disconnect>
}
 804c8d0:	bf00      	nop
 804c8d2:	3708      	adds	r7, #8
 804c8d4:	46bd      	mov	sp, r7
 804c8d6:	bd80      	pop	{r7, pc}

0804c8d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 804c8d8:	b480      	push	{r7}
 804c8da:	b083      	sub	sp, #12
 804c8dc:	af00      	add	r7, sp, #0
 804c8de:	6078      	str	r0, [r7, #4]
 804c8e0:	460b      	mov	r3, r1
 804c8e2:	70fb      	strb	r3, [r7, #3]
 804c8e4:	4613      	mov	r3, r2
 804c8e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 804c8e8:	bf00      	nop
 804c8ea:	370c      	adds	r7, #12
 804c8ec:	46bd      	mov	sp, r7
 804c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c8f2:	4770      	bx	lr

0804c8f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c8f4:	b580      	push	{r7, lr}
 804c8f6:	b082      	sub	sp, #8
 804c8f8:	af00      	add	r7, sp, #0
 804c8fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 804c8fc:	687b      	ldr	r3, [r7, #4]
 804c8fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c902:	4618      	mov	r0, r3
 804c904:	f7fe ffe3 	bl	804b8ce <USBH_LL_PortEnabled>
}
 804c908:	bf00      	nop
 804c90a:	3708      	adds	r7, #8
 804c90c:	46bd      	mov	sp, r7
 804c90e:	bd80      	pop	{r7, pc}

0804c910 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 804c910:	b580      	push	{r7, lr}
 804c912:	b082      	sub	sp, #8
 804c914:	af00      	add	r7, sp, #0
 804c916:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 804c918:	687b      	ldr	r3, [r7, #4]
 804c91a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 804c91e:	4618      	mov	r0, r3
 804c920:	f7fe ffe3 	bl	804b8ea <USBH_LL_PortDisabled>
}
 804c924:	bf00      	nop
 804c926:	3708      	adds	r7, #8
 804c928:	46bd      	mov	sp, r7
 804c92a:	bd80      	pop	{r7, pc}

0804c92c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 804c92c:	b580      	push	{r7, lr}
 804c92e:	b082      	sub	sp, #8
 804c930:	af00      	add	r7, sp, #0
 804c932:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 804c934:	687b      	ldr	r3, [r7, #4]
 804c936:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804c93a:	2b00      	cmp	r3, #0
 804c93c:	d132      	bne.n	804c9a4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 804c93e:	4a1c      	ldr	r2, [pc, #112]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c940:	687b      	ldr	r3, [r7, #4]
 804c942:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 804c946:	687b      	ldr	r3, [r7, #4]
 804c948:	4a19      	ldr	r2, [pc, #100]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c94a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 804c94e:	4b18      	ldr	r3, [pc, #96]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c950:	4a18      	ldr	r2, [pc, #96]	; (804c9b4 <USBH_LL_Init+0x88>)
 804c952:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 804c954:	4b16      	ldr	r3, [pc, #88]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c956:	220c      	movs	r2, #12
 804c958:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 804c95a:	4b15      	ldr	r3, [pc, #84]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c95c:	2201      	movs	r2, #1
 804c95e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 804c960:	4b13      	ldr	r3, [pc, #76]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c962:	2200      	movs	r2, #0
 804c964:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 804c966:	4b12      	ldr	r3, [pc, #72]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c968:	2202      	movs	r2, #2
 804c96a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 804c96c:	4b10      	ldr	r3, [pc, #64]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c96e:	2200      	movs	r2, #0
 804c970:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 804c972:	4b0f      	ldr	r3, [pc, #60]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c974:	2200      	movs	r2, #0
 804c976:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 804c978:	4b0d      	ldr	r3, [pc, #52]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c97a:	2200      	movs	r2, #0
 804c97c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 804c97e:	4b0c      	ldr	r3, [pc, #48]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c980:	2200      	movs	r2, #0
 804c982:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 804c984:	480a      	ldr	r0, [pc, #40]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c986:	f7f7 fe19 	bl	80445bc <HAL_HCD_Init>
 804c98a:	4603      	mov	r3, r0
 804c98c:	2b00      	cmp	r3, #0
 804c98e:	d001      	beq.n	804c994 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 804c990:	f7f4 fa94 	bl	8040ebc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 804c994:	4806      	ldr	r0, [pc, #24]	; (804c9b0 <USBH_LL_Init+0x84>)
 804c996:	f7f8 f9fc 	bl	8044d92 <HAL_HCD_GetCurrentFrame>
 804c99a:	4603      	mov	r3, r0
 804c99c:	4619      	mov	r1, r3
 804c99e:	6878      	ldr	r0, [r7, #4]
 804c9a0:	f7fe ff5c 	bl	804b85c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 804c9a4:	2300      	movs	r3, #0
}
 804c9a6:	4618      	mov	r0, r3
 804c9a8:	3708      	adds	r7, #8
 804c9aa:	46bd      	mov	sp, r7
 804c9ac:	bd80      	pop	{r7, pc}
 804c9ae:	bf00      	nop
 804c9b0:	20000e5c 	.word	0x20000e5c
 804c9b4:	40040000 	.word	0x40040000

0804c9b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 804c9b8:	b580      	push	{r7, lr}
 804c9ba:	b084      	sub	sp, #16
 804c9bc:	af00      	add	r7, sp, #0
 804c9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c9c0:	2300      	movs	r3, #0
 804c9c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c9c4:	2300      	movs	r3, #0
 804c9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 804c9c8:	687b      	ldr	r3, [r7, #4]
 804c9ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804c9ce:	4618      	mov	r0, r3
 804c9d0:	f7f8 f969 	bl	8044ca6 <HAL_HCD_Start>
 804c9d4:	4603      	mov	r3, r0
 804c9d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804c9d8:	7bfb      	ldrb	r3, [r7, #15]
 804c9da:	4618      	mov	r0, r3
 804c9dc:	f000 f95c 	bl	804cc98 <USBH_Get_USB_Status>
 804c9e0:	4603      	mov	r3, r0
 804c9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804c9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 804c9e6:	4618      	mov	r0, r3
 804c9e8:	3710      	adds	r7, #16
 804c9ea:	46bd      	mov	sp, r7
 804c9ec:	bd80      	pop	{r7, pc}

0804c9ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 804c9ee:	b580      	push	{r7, lr}
 804c9f0:	b084      	sub	sp, #16
 804c9f2:	af00      	add	r7, sp, #0
 804c9f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804c9f6:	2300      	movs	r3, #0
 804c9f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804c9fa:	2300      	movs	r3, #0
 804c9fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 804c9fe:	687b      	ldr	r3, [r7, #4]
 804ca00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804ca04:	4618      	mov	r0, r3
 804ca06:	f7f8 f971 	bl	8044cec <HAL_HCD_Stop>
 804ca0a:	4603      	mov	r3, r0
 804ca0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804ca0e:	7bfb      	ldrb	r3, [r7, #15]
 804ca10:	4618      	mov	r0, r3
 804ca12:	f000 f941 	bl	804cc98 <USBH_Get_USB_Status>
 804ca16:	4603      	mov	r3, r0
 804ca18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804ca1a:	7bbb      	ldrb	r3, [r7, #14]
}
 804ca1c:	4618      	mov	r0, r3
 804ca1e:	3710      	adds	r7, #16
 804ca20:	46bd      	mov	sp, r7
 804ca22:	bd80      	pop	{r7, pc}

0804ca24 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 804ca24:	b580      	push	{r7, lr}
 804ca26:	b084      	sub	sp, #16
 804ca28:	af00      	add	r7, sp, #0
 804ca2a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 804ca2c:	2301      	movs	r3, #1
 804ca2e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 804ca30:	687b      	ldr	r3, [r7, #4]
 804ca32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804ca36:	4618      	mov	r0, r3
 804ca38:	f7f8 f9b9 	bl	8044dae <HAL_HCD_GetCurrentSpeed>
 804ca3c:	4603      	mov	r3, r0
 804ca3e:	2b02      	cmp	r3, #2
 804ca40:	d00c      	beq.n	804ca5c <USBH_LL_GetSpeed+0x38>
 804ca42:	2b02      	cmp	r3, #2
 804ca44:	d80d      	bhi.n	804ca62 <USBH_LL_GetSpeed+0x3e>
 804ca46:	2b00      	cmp	r3, #0
 804ca48:	d002      	beq.n	804ca50 <USBH_LL_GetSpeed+0x2c>
 804ca4a:	2b01      	cmp	r3, #1
 804ca4c:	d003      	beq.n	804ca56 <USBH_LL_GetSpeed+0x32>
 804ca4e:	e008      	b.n	804ca62 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 804ca50:	2300      	movs	r3, #0
 804ca52:	73fb      	strb	r3, [r7, #15]
    break;
 804ca54:	e008      	b.n	804ca68 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 804ca56:	2301      	movs	r3, #1
 804ca58:	73fb      	strb	r3, [r7, #15]
    break;
 804ca5a:	e005      	b.n	804ca68 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 804ca5c:	2302      	movs	r3, #2
 804ca5e:	73fb      	strb	r3, [r7, #15]
    break;
 804ca60:	e002      	b.n	804ca68 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 804ca62:	2301      	movs	r3, #1
 804ca64:	73fb      	strb	r3, [r7, #15]
    break;
 804ca66:	bf00      	nop
  }
  return  speed;
 804ca68:	7bfb      	ldrb	r3, [r7, #15]
}
 804ca6a:	4618      	mov	r0, r3
 804ca6c:	3710      	adds	r7, #16
 804ca6e:	46bd      	mov	sp, r7
 804ca70:	bd80      	pop	{r7, pc}

0804ca72 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 804ca72:	b580      	push	{r7, lr}
 804ca74:	b084      	sub	sp, #16
 804ca76:	af00      	add	r7, sp, #0
 804ca78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804ca7a:	2300      	movs	r3, #0
 804ca7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804ca7e:	2300      	movs	r3, #0
 804ca80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 804ca82:	687b      	ldr	r3, [r7, #4]
 804ca84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804ca88:	4618      	mov	r0, r3
 804ca8a:	f7f8 f94c 	bl	8044d26 <HAL_HCD_ResetPort>
 804ca8e:	4603      	mov	r3, r0
 804ca90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804ca92:	7bfb      	ldrb	r3, [r7, #15]
 804ca94:	4618      	mov	r0, r3
 804ca96:	f000 f8ff 	bl	804cc98 <USBH_Get_USB_Status>
 804ca9a:	4603      	mov	r3, r0
 804ca9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804ca9e:	7bbb      	ldrb	r3, [r7, #14]
}
 804caa0:	4618      	mov	r0, r3
 804caa2:	3710      	adds	r7, #16
 804caa4:	46bd      	mov	sp, r7
 804caa6:	bd80      	pop	{r7, pc}

0804caa8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804caa8:	b580      	push	{r7, lr}
 804caaa:	b082      	sub	sp, #8
 804caac:	af00      	add	r7, sp, #0
 804caae:	6078      	str	r0, [r7, #4]
 804cab0:	460b      	mov	r3, r1
 804cab2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 804cab4:	687b      	ldr	r3, [r7, #4]
 804cab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804caba:	78fa      	ldrb	r2, [r7, #3]
 804cabc:	4611      	mov	r1, r2
 804cabe:	4618      	mov	r0, r3
 804cac0:	f7f8 f953 	bl	8044d6a <HAL_HCD_HC_GetXferCount>
 804cac4:	4603      	mov	r3, r0
}
 804cac6:	4618      	mov	r0, r3
 804cac8:	3708      	adds	r7, #8
 804caca:	46bd      	mov	sp, r7
 804cacc:	bd80      	pop	{r7, pc}

0804cace <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 804cace:	b590      	push	{r4, r7, lr}
 804cad0:	b089      	sub	sp, #36	; 0x24
 804cad2:	af04      	add	r7, sp, #16
 804cad4:	6078      	str	r0, [r7, #4]
 804cad6:	4608      	mov	r0, r1
 804cad8:	4611      	mov	r1, r2
 804cada:	461a      	mov	r2, r3
 804cadc:	4603      	mov	r3, r0
 804cade:	70fb      	strb	r3, [r7, #3]
 804cae0:	460b      	mov	r3, r1
 804cae2:	70bb      	strb	r3, [r7, #2]
 804cae4:	4613      	mov	r3, r2
 804cae6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cae8:	2300      	movs	r3, #0
 804caea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804caec:	2300      	movs	r3, #0
 804caee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 804caf0:	687b      	ldr	r3, [r7, #4]
 804caf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804caf6:	787c      	ldrb	r4, [r7, #1]
 804caf8:	78ba      	ldrb	r2, [r7, #2]
 804cafa:	78f9      	ldrb	r1, [r7, #3]
 804cafc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804cafe:	9302      	str	r3, [sp, #8]
 804cb00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804cb04:	9301      	str	r3, [sp, #4]
 804cb06:	f897 3020 	ldrb.w	r3, [r7, #32]
 804cb0a:	9300      	str	r3, [sp, #0]
 804cb0c:	4623      	mov	r3, r4
 804cb0e:	f7f7 fdb7 	bl	8044680 <HAL_HCD_HC_Init>
 804cb12:	4603      	mov	r3, r0
 804cb14:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 804cb16:	7bfb      	ldrb	r3, [r7, #15]
 804cb18:	4618      	mov	r0, r3
 804cb1a:	f000 f8bd 	bl	804cc98 <USBH_Get_USB_Status>
 804cb1e:	4603      	mov	r3, r0
 804cb20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cb22:	7bbb      	ldrb	r3, [r7, #14]
}
 804cb24:	4618      	mov	r0, r3
 804cb26:	3714      	adds	r7, #20
 804cb28:	46bd      	mov	sp, r7
 804cb2a:	bd90      	pop	{r4, r7, pc}

0804cb2c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804cb2c:	b580      	push	{r7, lr}
 804cb2e:	b084      	sub	sp, #16
 804cb30:	af00      	add	r7, sp, #0
 804cb32:	6078      	str	r0, [r7, #4]
 804cb34:	460b      	mov	r3, r1
 804cb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cb38:	2300      	movs	r3, #0
 804cb3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cb3c:	2300      	movs	r3, #0
 804cb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 804cb40:	687b      	ldr	r3, [r7, #4]
 804cb42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cb46:	78fa      	ldrb	r2, [r7, #3]
 804cb48:	4611      	mov	r1, r2
 804cb4a:	4618      	mov	r0, r3
 804cb4c:	f7f7 fe27 	bl	804479e <HAL_HCD_HC_Halt>
 804cb50:	4603      	mov	r3, r0
 804cb52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 804cb54:	7bfb      	ldrb	r3, [r7, #15]
 804cb56:	4618      	mov	r0, r3
 804cb58:	f000 f89e 	bl	804cc98 <USBH_Get_USB_Status>
 804cb5c:	4603      	mov	r3, r0
 804cb5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cb60:	7bbb      	ldrb	r3, [r7, #14]
}
 804cb62:	4618      	mov	r0, r3
 804cb64:	3710      	adds	r7, #16
 804cb66:	46bd      	mov	sp, r7
 804cb68:	bd80      	pop	{r7, pc}

0804cb6a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 804cb6a:	b590      	push	{r4, r7, lr}
 804cb6c:	b089      	sub	sp, #36	; 0x24
 804cb6e:	af04      	add	r7, sp, #16
 804cb70:	6078      	str	r0, [r7, #4]
 804cb72:	4608      	mov	r0, r1
 804cb74:	4611      	mov	r1, r2
 804cb76:	461a      	mov	r2, r3
 804cb78:	4603      	mov	r3, r0
 804cb7a:	70fb      	strb	r3, [r7, #3]
 804cb7c:	460b      	mov	r3, r1
 804cb7e:	70bb      	strb	r3, [r7, #2]
 804cb80:	4613      	mov	r3, r2
 804cb82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 804cb84:	2300      	movs	r3, #0
 804cb86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cb88:	2300      	movs	r3, #0
 804cb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 804cb8c:	687b      	ldr	r3, [r7, #4]
 804cb8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 804cb92:	787c      	ldrb	r4, [r7, #1]
 804cb94:	78ba      	ldrb	r2, [r7, #2]
 804cb96:	78f9      	ldrb	r1, [r7, #3]
 804cb98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804cb9c:	9303      	str	r3, [sp, #12]
 804cb9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804cba0:	9302      	str	r3, [sp, #8]
 804cba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804cba4:	9301      	str	r3, [sp, #4]
 804cba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 804cbaa:	9300      	str	r3, [sp, #0]
 804cbac:	4623      	mov	r3, r4
 804cbae:	f7f7 fe19 	bl	80447e4 <HAL_HCD_HC_SubmitRequest>
 804cbb2:	4603      	mov	r3, r0
 804cbb4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 804cbb6:	7bfb      	ldrb	r3, [r7, #15]
 804cbb8:	4618      	mov	r0, r3
 804cbba:	f000 f86d 	bl	804cc98 <USBH_Get_USB_Status>
 804cbbe:	4603      	mov	r3, r0
 804cbc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 804cbc2:	7bbb      	ldrb	r3, [r7, #14]
}
 804cbc4:	4618      	mov	r0, r3
 804cbc6:	3714      	adds	r7, #20
 804cbc8:	46bd      	mov	sp, r7
 804cbca:	bd90      	pop	{r4, r7, pc}

0804cbcc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 804cbcc:	b580      	push	{r7, lr}
 804cbce:	b082      	sub	sp, #8
 804cbd0:	af00      	add	r7, sp, #0
 804cbd2:	6078      	str	r0, [r7, #4]
 804cbd4:	460b      	mov	r3, r1
 804cbd6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 804cbd8:	687b      	ldr	r3, [r7, #4]
 804cbda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cbde:	78fa      	ldrb	r2, [r7, #3]
 804cbe0:	4611      	mov	r1, r2
 804cbe2:	4618      	mov	r0, r3
 804cbe4:	f7f8 f8ad 	bl	8044d42 <HAL_HCD_HC_GetURBState>
 804cbe8:	4603      	mov	r3, r0
}
 804cbea:	4618      	mov	r0, r3
 804cbec:	3708      	adds	r7, #8
 804cbee:	46bd      	mov	sp, r7
 804cbf0:	bd80      	pop	{r7, pc}

0804cbf2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 804cbf2:	b580      	push	{r7, lr}
 804cbf4:	b082      	sub	sp, #8
 804cbf6:	af00      	add	r7, sp, #0
 804cbf8:	6078      	str	r0, [r7, #4]
 804cbfa:	460b      	mov	r3, r1
 804cbfc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 804cbfe:	687b      	ldr	r3, [r7, #4]
 804cc00:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 804cc04:	2b00      	cmp	r3, #0
 804cc06:	d103      	bne.n	804cc10 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 804cc08:	78fb      	ldrb	r3, [r7, #3]
 804cc0a:	4618      	mov	r0, r3
 804cc0c:	f000 f870 	bl	804ccf0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 804cc10:	20c8      	movs	r0, #200	; 0xc8
 804cc12:	f7f6 fb6d 	bl	80432f0 <HAL_Delay>
  return USBH_OK;
 804cc16:	2300      	movs	r3, #0
}
 804cc18:	4618      	mov	r0, r3
 804cc1a:	3708      	adds	r7, #8
 804cc1c:	46bd      	mov	sp, r7
 804cc1e:	bd80      	pop	{r7, pc}

0804cc20 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 804cc20:	b480      	push	{r7}
 804cc22:	b085      	sub	sp, #20
 804cc24:	af00      	add	r7, sp, #0
 804cc26:	6078      	str	r0, [r7, #4]
 804cc28:	460b      	mov	r3, r1
 804cc2a:	70fb      	strb	r3, [r7, #3]
 804cc2c:	4613      	mov	r3, r2
 804cc2e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 804cc30:	687b      	ldr	r3, [r7, #4]
 804cc32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 804cc36:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 804cc38:	78fb      	ldrb	r3, [r7, #3]
 804cc3a:	68fa      	ldr	r2, [r7, #12]
 804cc3c:	212c      	movs	r1, #44	; 0x2c
 804cc3e:	fb01 f303 	mul.w	r3, r1, r3
 804cc42:	4413      	add	r3, r2
 804cc44:	333b      	adds	r3, #59	; 0x3b
 804cc46:	781b      	ldrb	r3, [r3, #0]
 804cc48:	2b00      	cmp	r3, #0
 804cc4a:	d009      	beq.n	804cc60 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 804cc4c:	78fb      	ldrb	r3, [r7, #3]
 804cc4e:	68fa      	ldr	r2, [r7, #12]
 804cc50:	212c      	movs	r1, #44	; 0x2c
 804cc52:	fb01 f303 	mul.w	r3, r1, r3
 804cc56:	4413      	add	r3, r2
 804cc58:	3354      	adds	r3, #84	; 0x54
 804cc5a:	78ba      	ldrb	r2, [r7, #2]
 804cc5c:	701a      	strb	r2, [r3, #0]
 804cc5e:	e008      	b.n	804cc72 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 804cc60:	78fb      	ldrb	r3, [r7, #3]
 804cc62:	68fa      	ldr	r2, [r7, #12]
 804cc64:	212c      	movs	r1, #44	; 0x2c
 804cc66:	fb01 f303 	mul.w	r3, r1, r3
 804cc6a:	4413      	add	r3, r2
 804cc6c:	3355      	adds	r3, #85	; 0x55
 804cc6e:	78ba      	ldrb	r2, [r7, #2]
 804cc70:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 804cc72:	2300      	movs	r3, #0
}
 804cc74:	4618      	mov	r0, r3
 804cc76:	3714      	adds	r7, #20
 804cc78:	46bd      	mov	sp, r7
 804cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cc7e:	4770      	bx	lr

0804cc80 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 804cc80:	b580      	push	{r7, lr}
 804cc82:	b082      	sub	sp, #8
 804cc84:	af00      	add	r7, sp, #0
 804cc86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 804cc88:	6878      	ldr	r0, [r7, #4]
 804cc8a:	f7f6 fb31 	bl	80432f0 <HAL_Delay>
}
 804cc8e:	bf00      	nop
 804cc90:	3708      	adds	r7, #8
 804cc92:	46bd      	mov	sp, r7
 804cc94:	bd80      	pop	{r7, pc}
	...

0804cc98 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 804cc98:	b480      	push	{r7}
 804cc9a:	b085      	sub	sp, #20
 804cc9c:	af00      	add	r7, sp, #0
 804cc9e:	4603      	mov	r3, r0
 804cca0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 804cca2:	2300      	movs	r3, #0
 804cca4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 804cca6:	79fb      	ldrb	r3, [r7, #7]
 804cca8:	2b03      	cmp	r3, #3
 804ccaa:	d817      	bhi.n	804ccdc <USBH_Get_USB_Status+0x44>
 804ccac:	a201      	add	r2, pc, #4	; (adr r2, 804ccb4 <USBH_Get_USB_Status+0x1c>)
 804ccae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804ccb2:	bf00      	nop
 804ccb4:	0804ccc5 	.word	0x0804ccc5
 804ccb8:	0804cccb 	.word	0x0804cccb
 804ccbc:	0804ccd1 	.word	0x0804ccd1
 804ccc0:	0804ccd7 	.word	0x0804ccd7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 804ccc4:	2300      	movs	r3, #0
 804ccc6:	73fb      	strb	r3, [r7, #15]
    break;
 804ccc8:	e00b      	b.n	804cce2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 804ccca:	2302      	movs	r3, #2
 804cccc:	73fb      	strb	r3, [r7, #15]
    break;
 804ccce:	e008      	b.n	804cce2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 804ccd0:	2301      	movs	r3, #1
 804ccd2:	73fb      	strb	r3, [r7, #15]
    break;
 804ccd4:	e005      	b.n	804cce2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 804ccd6:	2302      	movs	r3, #2
 804ccd8:	73fb      	strb	r3, [r7, #15]
    break;
 804ccda:	e002      	b.n	804cce2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 804ccdc:	2302      	movs	r3, #2
 804ccde:	73fb      	strb	r3, [r7, #15]
    break;
 804cce0:	bf00      	nop
  }
  return usb_status;
 804cce2:	7bfb      	ldrb	r3, [r7, #15]
}
 804cce4:	4618      	mov	r0, r3
 804cce6:	3714      	adds	r7, #20
 804cce8:	46bd      	mov	sp, r7
 804ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ccee:	4770      	bx	lr

0804ccf0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 804ccf0:	b580      	push	{r7, lr}
 804ccf2:	b084      	sub	sp, #16
 804ccf4:	af00      	add	r7, sp, #0
 804ccf6:	4603      	mov	r3, r0
 804ccf8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 804ccfa:	79fb      	ldrb	r3, [r7, #7]
 804ccfc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 804ccfe:	79fb      	ldrb	r3, [r7, #7]
 804cd00:	2b00      	cmp	r3, #0
 804cd02:	d102      	bne.n	804cd0a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 804cd04:	2301      	movs	r3, #1
 804cd06:	73fb      	strb	r3, [r7, #15]
 804cd08:	e001      	b.n	804cd0e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 804cd0a:	2300      	movs	r3, #0
 804cd0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 804cd0e:	7bfb      	ldrb	r3, [r7, #15]
 804cd10:	461a      	mov	r2, r3
 804cd12:	2110      	movs	r1, #16
 804cd14:	4803      	ldr	r0, [pc, #12]	; (804cd24 <MX_DriverVbusHS+0x34>)
 804cd16:	f7f7 fc1f 	bl	8044558 <HAL_GPIO_WritePin>
}
 804cd1a:	bf00      	nop
 804cd1c:	3710      	adds	r7, #16
 804cd1e:	46bd      	mov	sp, r7
 804cd20:	bd80      	pop	{r7, pc}
 804cd22:	bf00      	nop
 804cd24:	40020800 	.word	0x40020800

0804cd28 <__errno>:
 804cd28:	4b01      	ldr	r3, [pc, #4]	; (804cd30 <__errno+0x8>)
 804cd2a:	6818      	ldr	r0, [r3, #0]
 804cd2c:	4770      	bx	lr
 804cd2e:	bf00      	nop
 804cd30:	2000007c 	.word	0x2000007c

0804cd34 <__libc_init_array>:
 804cd34:	b570      	push	{r4, r5, r6, lr}
 804cd36:	4d0d      	ldr	r5, [pc, #52]	; (804cd6c <__libc_init_array+0x38>)
 804cd38:	4c0d      	ldr	r4, [pc, #52]	; (804cd70 <__libc_init_array+0x3c>)
 804cd3a:	1b64      	subs	r4, r4, r5
 804cd3c:	10a4      	asrs	r4, r4, #2
 804cd3e:	2600      	movs	r6, #0
 804cd40:	42a6      	cmp	r6, r4
 804cd42:	d109      	bne.n	804cd58 <__libc_init_array+0x24>
 804cd44:	4d0b      	ldr	r5, [pc, #44]	; (804cd74 <__libc_init_array+0x40>)
 804cd46:	4c0c      	ldr	r4, [pc, #48]	; (804cd78 <__libc_init_array+0x44>)
 804cd48:	f001 fa10 	bl	804e16c <_init>
 804cd4c:	1b64      	subs	r4, r4, r5
 804cd4e:	10a4      	asrs	r4, r4, #2
 804cd50:	2600      	movs	r6, #0
 804cd52:	42a6      	cmp	r6, r4
 804cd54:	d105      	bne.n	804cd62 <__libc_init_array+0x2e>
 804cd56:	bd70      	pop	{r4, r5, r6, pc}
 804cd58:	f855 3b04 	ldr.w	r3, [r5], #4
 804cd5c:	4798      	blx	r3
 804cd5e:	3601      	adds	r6, #1
 804cd60:	e7ee      	b.n	804cd40 <__libc_init_array+0xc>
 804cd62:	f855 3b04 	ldr.w	r3, [r5], #4
 804cd66:	4798      	blx	r3
 804cd68:	3601      	adds	r6, #1
 804cd6a:	e7f2      	b.n	804cd52 <__libc_init_array+0x1e>
 804cd6c:	08050810 	.word	0x08050810
 804cd70:	08050810 	.word	0x08050810
 804cd74:	08050810 	.word	0x08050810
 804cd78:	08050814 	.word	0x08050814

0804cd7c <malloc>:
 804cd7c:	4b02      	ldr	r3, [pc, #8]	; (804cd88 <malloc+0xc>)
 804cd7e:	4601      	mov	r1, r0
 804cd80:	6818      	ldr	r0, [r3, #0]
 804cd82:	f000 b87f 	b.w	804ce84 <_malloc_r>
 804cd86:	bf00      	nop
 804cd88:	2000007c 	.word	0x2000007c

0804cd8c <free>:
 804cd8c:	4b02      	ldr	r3, [pc, #8]	; (804cd98 <free+0xc>)
 804cd8e:	4601      	mov	r1, r0
 804cd90:	6818      	ldr	r0, [r3, #0]
 804cd92:	f000 b80b 	b.w	804cdac <_free_r>
 804cd96:	bf00      	nop
 804cd98:	2000007c 	.word	0x2000007c

0804cd9c <memset>:
 804cd9c:	4402      	add	r2, r0
 804cd9e:	4603      	mov	r3, r0
 804cda0:	4293      	cmp	r3, r2
 804cda2:	d100      	bne.n	804cda6 <memset+0xa>
 804cda4:	4770      	bx	lr
 804cda6:	f803 1b01 	strb.w	r1, [r3], #1
 804cdaa:	e7f9      	b.n	804cda0 <memset+0x4>

0804cdac <_free_r>:
 804cdac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804cdae:	2900      	cmp	r1, #0
 804cdb0:	d044      	beq.n	804ce3c <_free_r+0x90>
 804cdb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804cdb6:	9001      	str	r0, [sp, #4]
 804cdb8:	2b00      	cmp	r3, #0
 804cdba:	f1a1 0404 	sub.w	r4, r1, #4
 804cdbe:	bfb8      	it	lt
 804cdc0:	18e4      	addlt	r4, r4, r3
 804cdc2:	f000 fc71 	bl	804d6a8 <__malloc_lock>
 804cdc6:	4a1e      	ldr	r2, [pc, #120]	; (804ce40 <_free_r+0x94>)
 804cdc8:	9801      	ldr	r0, [sp, #4]
 804cdca:	6813      	ldr	r3, [r2, #0]
 804cdcc:	b933      	cbnz	r3, 804cddc <_free_r+0x30>
 804cdce:	6063      	str	r3, [r4, #4]
 804cdd0:	6014      	str	r4, [r2, #0]
 804cdd2:	b003      	add	sp, #12
 804cdd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804cdd8:	f000 bc6c 	b.w	804d6b4 <__malloc_unlock>
 804cddc:	42a3      	cmp	r3, r4
 804cdde:	d908      	bls.n	804cdf2 <_free_r+0x46>
 804cde0:	6825      	ldr	r5, [r4, #0]
 804cde2:	1961      	adds	r1, r4, r5
 804cde4:	428b      	cmp	r3, r1
 804cde6:	bf01      	itttt	eq
 804cde8:	6819      	ldreq	r1, [r3, #0]
 804cdea:	685b      	ldreq	r3, [r3, #4]
 804cdec:	1949      	addeq	r1, r1, r5
 804cdee:	6021      	streq	r1, [r4, #0]
 804cdf0:	e7ed      	b.n	804cdce <_free_r+0x22>
 804cdf2:	461a      	mov	r2, r3
 804cdf4:	685b      	ldr	r3, [r3, #4]
 804cdf6:	b10b      	cbz	r3, 804cdfc <_free_r+0x50>
 804cdf8:	42a3      	cmp	r3, r4
 804cdfa:	d9fa      	bls.n	804cdf2 <_free_r+0x46>
 804cdfc:	6811      	ldr	r1, [r2, #0]
 804cdfe:	1855      	adds	r5, r2, r1
 804ce00:	42a5      	cmp	r5, r4
 804ce02:	d10b      	bne.n	804ce1c <_free_r+0x70>
 804ce04:	6824      	ldr	r4, [r4, #0]
 804ce06:	4421      	add	r1, r4
 804ce08:	1854      	adds	r4, r2, r1
 804ce0a:	42a3      	cmp	r3, r4
 804ce0c:	6011      	str	r1, [r2, #0]
 804ce0e:	d1e0      	bne.n	804cdd2 <_free_r+0x26>
 804ce10:	681c      	ldr	r4, [r3, #0]
 804ce12:	685b      	ldr	r3, [r3, #4]
 804ce14:	6053      	str	r3, [r2, #4]
 804ce16:	4421      	add	r1, r4
 804ce18:	6011      	str	r1, [r2, #0]
 804ce1a:	e7da      	b.n	804cdd2 <_free_r+0x26>
 804ce1c:	d902      	bls.n	804ce24 <_free_r+0x78>
 804ce1e:	230c      	movs	r3, #12
 804ce20:	6003      	str	r3, [r0, #0]
 804ce22:	e7d6      	b.n	804cdd2 <_free_r+0x26>
 804ce24:	6825      	ldr	r5, [r4, #0]
 804ce26:	1961      	adds	r1, r4, r5
 804ce28:	428b      	cmp	r3, r1
 804ce2a:	bf04      	itt	eq
 804ce2c:	6819      	ldreq	r1, [r3, #0]
 804ce2e:	685b      	ldreq	r3, [r3, #4]
 804ce30:	6063      	str	r3, [r4, #4]
 804ce32:	bf04      	itt	eq
 804ce34:	1949      	addeq	r1, r1, r5
 804ce36:	6021      	streq	r1, [r4, #0]
 804ce38:	6054      	str	r4, [r2, #4]
 804ce3a:	e7ca      	b.n	804cdd2 <_free_r+0x26>
 804ce3c:	b003      	add	sp, #12
 804ce3e:	bd30      	pop	{r4, r5, pc}
 804ce40:	20001160 	.word	0x20001160

0804ce44 <sbrk_aligned>:
 804ce44:	b570      	push	{r4, r5, r6, lr}
 804ce46:	4e0e      	ldr	r6, [pc, #56]	; (804ce80 <sbrk_aligned+0x3c>)
 804ce48:	460c      	mov	r4, r1
 804ce4a:	6831      	ldr	r1, [r6, #0]
 804ce4c:	4605      	mov	r5, r0
 804ce4e:	b911      	cbnz	r1, 804ce56 <sbrk_aligned+0x12>
 804ce50:	f000 f91a 	bl	804d088 <_sbrk_r>
 804ce54:	6030      	str	r0, [r6, #0]
 804ce56:	4621      	mov	r1, r4
 804ce58:	4628      	mov	r0, r5
 804ce5a:	f000 f915 	bl	804d088 <_sbrk_r>
 804ce5e:	1c43      	adds	r3, r0, #1
 804ce60:	d00a      	beq.n	804ce78 <sbrk_aligned+0x34>
 804ce62:	1cc4      	adds	r4, r0, #3
 804ce64:	f024 0403 	bic.w	r4, r4, #3
 804ce68:	42a0      	cmp	r0, r4
 804ce6a:	d007      	beq.n	804ce7c <sbrk_aligned+0x38>
 804ce6c:	1a21      	subs	r1, r4, r0
 804ce6e:	4628      	mov	r0, r5
 804ce70:	f000 f90a 	bl	804d088 <_sbrk_r>
 804ce74:	3001      	adds	r0, #1
 804ce76:	d101      	bne.n	804ce7c <sbrk_aligned+0x38>
 804ce78:	f04f 34ff 	mov.w	r4, #4294967295
 804ce7c:	4620      	mov	r0, r4
 804ce7e:	bd70      	pop	{r4, r5, r6, pc}
 804ce80:	20001164 	.word	0x20001164

0804ce84 <_malloc_r>:
 804ce84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804ce88:	1ccd      	adds	r5, r1, #3
 804ce8a:	f025 0503 	bic.w	r5, r5, #3
 804ce8e:	3508      	adds	r5, #8
 804ce90:	2d0c      	cmp	r5, #12
 804ce92:	bf38      	it	cc
 804ce94:	250c      	movcc	r5, #12
 804ce96:	2d00      	cmp	r5, #0
 804ce98:	4607      	mov	r7, r0
 804ce9a:	db01      	blt.n	804cea0 <_malloc_r+0x1c>
 804ce9c:	42a9      	cmp	r1, r5
 804ce9e:	d905      	bls.n	804ceac <_malloc_r+0x28>
 804cea0:	230c      	movs	r3, #12
 804cea2:	603b      	str	r3, [r7, #0]
 804cea4:	2600      	movs	r6, #0
 804cea6:	4630      	mov	r0, r6
 804cea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804ceac:	4e2e      	ldr	r6, [pc, #184]	; (804cf68 <_malloc_r+0xe4>)
 804ceae:	f000 fbfb 	bl	804d6a8 <__malloc_lock>
 804ceb2:	6833      	ldr	r3, [r6, #0]
 804ceb4:	461c      	mov	r4, r3
 804ceb6:	bb34      	cbnz	r4, 804cf06 <_malloc_r+0x82>
 804ceb8:	4629      	mov	r1, r5
 804ceba:	4638      	mov	r0, r7
 804cebc:	f7ff ffc2 	bl	804ce44 <sbrk_aligned>
 804cec0:	1c43      	adds	r3, r0, #1
 804cec2:	4604      	mov	r4, r0
 804cec4:	d14d      	bne.n	804cf62 <_malloc_r+0xde>
 804cec6:	6834      	ldr	r4, [r6, #0]
 804cec8:	4626      	mov	r6, r4
 804ceca:	2e00      	cmp	r6, #0
 804cecc:	d140      	bne.n	804cf50 <_malloc_r+0xcc>
 804cece:	6823      	ldr	r3, [r4, #0]
 804ced0:	4631      	mov	r1, r6
 804ced2:	4638      	mov	r0, r7
 804ced4:	eb04 0803 	add.w	r8, r4, r3
 804ced8:	f000 f8d6 	bl	804d088 <_sbrk_r>
 804cedc:	4580      	cmp	r8, r0
 804cede:	d13a      	bne.n	804cf56 <_malloc_r+0xd2>
 804cee0:	6821      	ldr	r1, [r4, #0]
 804cee2:	3503      	adds	r5, #3
 804cee4:	1a6d      	subs	r5, r5, r1
 804cee6:	f025 0503 	bic.w	r5, r5, #3
 804ceea:	3508      	adds	r5, #8
 804ceec:	2d0c      	cmp	r5, #12
 804ceee:	bf38      	it	cc
 804cef0:	250c      	movcc	r5, #12
 804cef2:	4629      	mov	r1, r5
 804cef4:	4638      	mov	r0, r7
 804cef6:	f7ff ffa5 	bl	804ce44 <sbrk_aligned>
 804cefa:	3001      	adds	r0, #1
 804cefc:	d02b      	beq.n	804cf56 <_malloc_r+0xd2>
 804cefe:	6823      	ldr	r3, [r4, #0]
 804cf00:	442b      	add	r3, r5
 804cf02:	6023      	str	r3, [r4, #0]
 804cf04:	e00e      	b.n	804cf24 <_malloc_r+0xa0>
 804cf06:	6822      	ldr	r2, [r4, #0]
 804cf08:	1b52      	subs	r2, r2, r5
 804cf0a:	d41e      	bmi.n	804cf4a <_malloc_r+0xc6>
 804cf0c:	2a0b      	cmp	r2, #11
 804cf0e:	d916      	bls.n	804cf3e <_malloc_r+0xba>
 804cf10:	1961      	adds	r1, r4, r5
 804cf12:	42a3      	cmp	r3, r4
 804cf14:	6025      	str	r5, [r4, #0]
 804cf16:	bf18      	it	ne
 804cf18:	6059      	strne	r1, [r3, #4]
 804cf1a:	6863      	ldr	r3, [r4, #4]
 804cf1c:	bf08      	it	eq
 804cf1e:	6031      	streq	r1, [r6, #0]
 804cf20:	5162      	str	r2, [r4, r5]
 804cf22:	604b      	str	r3, [r1, #4]
 804cf24:	4638      	mov	r0, r7
 804cf26:	f104 060b 	add.w	r6, r4, #11
 804cf2a:	f000 fbc3 	bl	804d6b4 <__malloc_unlock>
 804cf2e:	f026 0607 	bic.w	r6, r6, #7
 804cf32:	1d23      	adds	r3, r4, #4
 804cf34:	1af2      	subs	r2, r6, r3
 804cf36:	d0b6      	beq.n	804cea6 <_malloc_r+0x22>
 804cf38:	1b9b      	subs	r3, r3, r6
 804cf3a:	50a3      	str	r3, [r4, r2]
 804cf3c:	e7b3      	b.n	804cea6 <_malloc_r+0x22>
 804cf3e:	6862      	ldr	r2, [r4, #4]
 804cf40:	42a3      	cmp	r3, r4
 804cf42:	bf0c      	ite	eq
 804cf44:	6032      	streq	r2, [r6, #0]
 804cf46:	605a      	strne	r2, [r3, #4]
 804cf48:	e7ec      	b.n	804cf24 <_malloc_r+0xa0>
 804cf4a:	4623      	mov	r3, r4
 804cf4c:	6864      	ldr	r4, [r4, #4]
 804cf4e:	e7b2      	b.n	804ceb6 <_malloc_r+0x32>
 804cf50:	4634      	mov	r4, r6
 804cf52:	6876      	ldr	r6, [r6, #4]
 804cf54:	e7b9      	b.n	804ceca <_malloc_r+0x46>
 804cf56:	230c      	movs	r3, #12
 804cf58:	603b      	str	r3, [r7, #0]
 804cf5a:	4638      	mov	r0, r7
 804cf5c:	f000 fbaa 	bl	804d6b4 <__malloc_unlock>
 804cf60:	e7a1      	b.n	804cea6 <_malloc_r+0x22>
 804cf62:	6025      	str	r5, [r4, #0]
 804cf64:	e7de      	b.n	804cf24 <_malloc_r+0xa0>
 804cf66:	bf00      	nop
 804cf68:	20001160 	.word	0x20001160

0804cf6c <iprintf>:
 804cf6c:	b40f      	push	{r0, r1, r2, r3}
 804cf6e:	4b0a      	ldr	r3, [pc, #40]	; (804cf98 <iprintf+0x2c>)
 804cf70:	b513      	push	{r0, r1, r4, lr}
 804cf72:	681c      	ldr	r4, [r3, #0]
 804cf74:	b124      	cbz	r4, 804cf80 <iprintf+0x14>
 804cf76:	69a3      	ldr	r3, [r4, #24]
 804cf78:	b913      	cbnz	r3, 804cf80 <iprintf+0x14>
 804cf7a:	4620      	mov	r0, r4
 804cf7c:	f000 fa8e 	bl	804d49c <__sinit>
 804cf80:	ab05      	add	r3, sp, #20
 804cf82:	9a04      	ldr	r2, [sp, #16]
 804cf84:	68a1      	ldr	r1, [r4, #8]
 804cf86:	9301      	str	r3, [sp, #4]
 804cf88:	4620      	mov	r0, r4
 804cf8a:	f000 fd1f 	bl	804d9cc <_vfiprintf_r>
 804cf8e:	b002      	add	sp, #8
 804cf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804cf94:	b004      	add	sp, #16
 804cf96:	4770      	bx	lr
 804cf98:	2000007c 	.word	0x2000007c

0804cf9c <_puts_r>:
 804cf9c:	b570      	push	{r4, r5, r6, lr}
 804cf9e:	460e      	mov	r6, r1
 804cfa0:	4605      	mov	r5, r0
 804cfa2:	b118      	cbz	r0, 804cfac <_puts_r+0x10>
 804cfa4:	6983      	ldr	r3, [r0, #24]
 804cfa6:	b90b      	cbnz	r3, 804cfac <_puts_r+0x10>
 804cfa8:	f000 fa78 	bl	804d49c <__sinit>
 804cfac:	69ab      	ldr	r3, [r5, #24]
 804cfae:	68ac      	ldr	r4, [r5, #8]
 804cfb0:	b913      	cbnz	r3, 804cfb8 <_puts_r+0x1c>
 804cfb2:	4628      	mov	r0, r5
 804cfb4:	f000 fa72 	bl	804d49c <__sinit>
 804cfb8:	4b2c      	ldr	r3, [pc, #176]	; (804d06c <_puts_r+0xd0>)
 804cfba:	429c      	cmp	r4, r3
 804cfbc:	d120      	bne.n	804d000 <_puts_r+0x64>
 804cfbe:	686c      	ldr	r4, [r5, #4]
 804cfc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804cfc2:	07db      	lsls	r3, r3, #31
 804cfc4:	d405      	bmi.n	804cfd2 <_puts_r+0x36>
 804cfc6:	89a3      	ldrh	r3, [r4, #12]
 804cfc8:	0598      	lsls	r0, r3, #22
 804cfca:	d402      	bmi.n	804cfd2 <_puts_r+0x36>
 804cfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804cfce:	f000 fb03 	bl	804d5d8 <__retarget_lock_acquire_recursive>
 804cfd2:	89a3      	ldrh	r3, [r4, #12]
 804cfd4:	0719      	lsls	r1, r3, #28
 804cfd6:	d51d      	bpl.n	804d014 <_puts_r+0x78>
 804cfd8:	6923      	ldr	r3, [r4, #16]
 804cfda:	b1db      	cbz	r3, 804d014 <_puts_r+0x78>
 804cfdc:	3e01      	subs	r6, #1
 804cfde:	68a3      	ldr	r3, [r4, #8]
 804cfe0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804cfe4:	3b01      	subs	r3, #1
 804cfe6:	60a3      	str	r3, [r4, #8]
 804cfe8:	bb39      	cbnz	r1, 804d03a <_puts_r+0x9e>
 804cfea:	2b00      	cmp	r3, #0
 804cfec:	da38      	bge.n	804d060 <_puts_r+0xc4>
 804cfee:	4622      	mov	r2, r4
 804cff0:	210a      	movs	r1, #10
 804cff2:	4628      	mov	r0, r5
 804cff4:	f000 f878 	bl	804d0e8 <__swbuf_r>
 804cff8:	3001      	adds	r0, #1
 804cffa:	d011      	beq.n	804d020 <_puts_r+0x84>
 804cffc:	250a      	movs	r5, #10
 804cffe:	e011      	b.n	804d024 <_puts_r+0x88>
 804d000:	4b1b      	ldr	r3, [pc, #108]	; (804d070 <_puts_r+0xd4>)
 804d002:	429c      	cmp	r4, r3
 804d004:	d101      	bne.n	804d00a <_puts_r+0x6e>
 804d006:	68ac      	ldr	r4, [r5, #8]
 804d008:	e7da      	b.n	804cfc0 <_puts_r+0x24>
 804d00a:	4b1a      	ldr	r3, [pc, #104]	; (804d074 <_puts_r+0xd8>)
 804d00c:	429c      	cmp	r4, r3
 804d00e:	bf08      	it	eq
 804d010:	68ec      	ldreq	r4, [r5, #12]
 804d012:	e7d5      	b.n	804cfc0 <_puts_r+0x24>
 804d014:	4621      	mov	r1, r4
 804d016:	4628      	mov	r0, r5
 804d018:	f000 f8b8 	bl	804d18c <__swsetup_r>
 804d01c:	2800      	cmp	r0, #0
 804d01e:	d0dd      	beq.n	804cfdc <_puts_r+0x40>
 804d020:	f04f 35ff 	mov.w	r5, #4294967295
 804d024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d026:	07da      	lsls	r2, r3, #31
 804d028:	d405      	bmi.n	804d036 <_puts_r+0x9a>
 804d02a:	89a3      	ldrh	r3, [r4, #12]
 804d02c:	059b      	lsls	r3, r3, #22
 804d02e:	d402      	bmi.n	804d036 <_puts_r+0x9a>
 804d030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d032:	f000 fad2 	bl	804d5da <__retarget_lock_release_recursive>
 804d036:	4628      	mov	r0, r5
 804d038:	bd70      	pop	{r4, r5, r6, pc}
 804d03a:	2b00      	cmp	r3, #0
 804d03c:	da04      	bge.n	804d048 <_puts_r+0xac>
 804d03e:	69a2      	ldr	r2, [r4, #24]
 804d040:	429a      	cmp	r2, r3
 804d042:	dc06      	bgt.n	804d052 <_puts_r+0xb6>
 804d044:	290a      	cmp	r1, #10
 804d046:	d004      	beq.n	804d052 <_puts_r+0xb6>
 804d048:	6823      	ldr	r3, [r4, #0]
 804d04a:	1c5a      	adds	r2, r3, #1
 804d04c:	6022      	str	r2, [r4, #0]
 804d04e:	7019      	strb	r1, [r3, #0]
 804d050:	e7c5      	b.n	804cfde <_puts_r+0x42>
 804d052:	4622      	mov	r2, r4
 804d054:	4628      	mov	r0, r5
 804d056:	f000 f847 	bl	804d0e8 <__swbuf_r>
 804d05a:	3001      	adds	r0, #1
 804d05c:	d1bf      	bne.n	804cfde <_puts_r+0x42>
 804d05e:	e7df      	b.n	804d020 <_puts_r+0x84>
 804d060:	6823      	ldr	r3, [r4, #0]
 804d062:	250a      	movs	r5, #10
 804d064:	1c5a      	adds	r2, r3, #1
 804d066:	6022      	str	r2, [r4, #0]
 804d068:	701d      	strb	r5, [r3, #0]
 804d06a:	e7db      	b.n	804d024 <_puts_r+0x88>
 804d06c:	08050794 	.word	0x08050794
 804d070:	080507b4 	.word	0x080507b4
 804d074:	08050774 	.word	0x08050774

0804d078 <puts>:
 804d078:	4b02      	ldr	r3, [pc, #8]	; (804d084 <puts+0xc>)
 804d07a:	4601      	mov	r1, r0
 804d07c:	6818      	ldr	r0, [r3, #0]
 804d07e:	f7ff bf8d 	b.w	804cf9c <_puts_r>
 804d082:	bf00      	nop
 804d084:	2000007c 	.word	0x2000007c

0804d088 <_sbrk_r>:
 804d088:	b538      	push	{r3, r4, r5, lr}
 804d08a:	4d06      	ldr	r5, [pc, #24]	; (804d0a4 <_sbrk_r+0x1c>)
 804d08c:	2300      	movs	r3, #0
 804d08e:	4604      	mov	r4, r0
 804d090:	4608      	mov	r0, r1
 804d092:	602b      	str	r3, [r5, #0]
 804d094:	f7f4 fe94 	bl	8041dc0 <_sbrk>
 804d098:	1c43      	adds	r3, r0, #1
 804d09a:	d102      	bne.n	804d0a2 <_sbrk_r+0x1a>
 804d09c:	682b      	ldr	r3, [r5, #0]
 804d09e:	b103      	cbz	r3, 804d0a2 <_sbrk_r+0x1a>
 804d0a0:	6023      	str	r3, [r4, #0]
 804d0a2:	bd38      	pop	{r3, r4, r5, pc}
 804d0a4:	2000116c 	.word	0x2000116c

0804d0a8 <siprintf>:
 804d0a8:	b40e      	push	{r1, r2, r3}
 804d0aa:	b500      	push	{lr}
 804d0ac:	b09c      	sub	sp, #112	; 0x70
 804d0ae:	ab1d      	add	r3, sp, #116	; 0x74
 804d0b0:	9002      	str	r0, [sp, #8]
 804d0b2:	9006      	str	r0, [sp, #24]
 804d0b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 804d0b8:	4809      	ldr	r0, [pc, #36]	; (804d0e0 <siprintf+0x38>)
 804d0ba:	9107      	str	r1, [sp, #28]
 804d0bc:	9104      	str	r1, [sp, #16]
 804d0be:	4909      	ldr	r1, [pc, #36]	; (804d0e4 <siprintf+0x3c>)
 804d0c0:	f853 2b04 	ldr.w	r2, [r3], #4
 804d0c4:	9105      	str	r1, [sp, #20]
 804d0c6:	6800      	ldr	r0, [r0, #0]
 804d0c8:	9301      	str	r3, [sp, #4]
 804d0ca:	a902      	add	r1, sp, #8
 804d0cc:	f000 fb54 	bl	804d778 <_svfiprintf_r>
 804d0d0:	9b02      	ldr	r3, [sp, #8]
 804d0d2:	2200      	movs	r2, #0
 804d0d4:	701a      	strb	r2, [r3, #0]
 804d0d6:	b01c      	add	sp, #112	; 0x70
 804d0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 804d0dc:	b003      	add	sp, #12
 804d0de:	4770      	bx	lr
 804d0e0:	2000007c 	.word	0x2000007c
 804d0e4:	ffff0208 	.word	0xffff0208

0804d0e8 <__swbuf_r>:
 804d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d0ea:	460e      	mov	r6, r1
 804d0ec:	4614      	mov	r4, r2
 804d0ee:	4605      	mov	r5, r0
 804d0f0:	b118      	cbz	r0, 804d0fa <__swbuf_r+0x12>
 804d0f2:	6983      	ldr	r3, [r0, #24]
 804d0f4:	b90b      	cbnz	r3, 804d0fa <__swbuf_r+0x12>
 804d0f6:	f000 f9d1 	bl	804d49c <__sinit>
 804d0fa:	4b21      	ldr	r3, [pc, #132]	; (804d180 <__swbuf_r+0x98>)
 804d0fc:	429c      	cmp	r4, r3
 804d0fe:	d12b      	bne.n	804d158 <__swbuf_r+0x70>
 804d100:	686c      	ldr	r4, [r5, #4]
 804d102:	69a3      	ldr	r3, [r4, #24]
 804d104:	60a3      	str	r3, [r4, #8]
 804d106:	89a3      	ldrh	r3, [r4, #12]
 804d108:	071a      	lsls	r2, r3, #28
 804d10a:	d52f      	bpl.n	804d16c <__swbuf_r+0x84>
 804d10c:	6923      	ldr	r3, [r4, #16]
 804d10e:	b36b      	cbz	r3, 804d16c <__swbuf_r+0x84>
 804d110:	6923      	ldr	r3, [r4, #16]
 804d112:	6820      	ldr	r0, [r4, #0]
 804d114:	1ac0      	subs	r0, r0, r3
 804d116:	6963      	ldr	r3, [r4, #20]
 804d118:	b2f6      	uxtb	r6, r6
 804d11a:	4283      	cmp	r3, r0
 804d11c:	4637      	mov	r7, r6
 804d11e:	dc04      	bgt.n	804d12a <__swbuf_r+0x42>
 804d120:	4621      	mov	r1, r4
 804d122:	4628      	mov	r0, r5
 804d124:	f000 f926 	bl	804d374 <_fflush_r>
 804d128:	bb30      	cbnz	r0, 804d178 <__swbuf_r+0x90>
 804d12a:	68a3      	ldr	r3, [r4, #8]
 804d12c:	3b01      	subs	r3, #1
 804d12e:	60a3      	str	r3, [r4, #8]
 804d130:	6823      	ldr	r3, [r4, #0]
 804d132:	1c5a      	adds	r2, r3, #1
 804d134:	6022      	str	r2, [r4, #0]
 804d136:	701e      	strb	r6, [r3, #0]
 804d138:	6963      	ldr	r3, [r4, #20]
 804d13a:	3001      	adds	r0, #1
 804d13c:	4283      	cmp	r3, r0
 804d13e:	d004      	beq.n	804d14a <__swbuf_r+0x62>
 804d140:	89a3      	ldrh	r3, [r4, #12]
 804d142:	07db      	lsls	r3, r3, #31
 804d144:	d506      	bpl.n	804d154 <__swbuf_r+0x6c>
 804d146:	2e0a      	cmp	r6, #10
 804d148:	d104      	bne.n	804d154 <__swbuf_r+0x6c>
 804d14a:	4621      	mov	r1, r4
 804d14c:	4628      	mov	r0, r5
 804d14e:	f000 f911 	bl	804d374 <_fflush_r>
 804d152:	b988      	cbnz	r0, 804d178 <__swbuf_r+0x90>
 804d154:	4638      	mov	r0, r7
 804d156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d158:	4b0a      	ldr	r3, [pc, #40]	; (804d184 <__swbuf_r+0x9c>)
 804d15a:	429c      	cmp	r4, r3
 804d15c:	d101      	bne.n	804d162 <__swbuf_r+0x7a>
 804d15e:	68ac      	ldr	r4, [r5, #8]
 804d160:	e7cf      	b.n	804d102 <__swbuf_r+0x1a>
 804d162:	4b09      	ldr	r3, [pc, #36]	; (804d188 <__swbuf_r+0xa0>)
 804d164:	429c      	cmp	r4, r3
 804d166:	bf08      	it	eq
 804d168:	68ec      	ldreq	r4, [r5, #12]
 804d16a:	e7ca      	b.n	804d102 <__swbuf_r+0x1a>
 804d16c:	4621      	mov	r1, r4
 804d16e:	4628      	mov	r0, r5
 804d170:	f000 f80c 	bl	804d18c <__swsetup_r>
 804d174:	2800      	cmp	r0, #0
 804d176:	d0cb      	beq.n	804d110 <__swbuf_r+0x28>
 804d178:	f04f 37ff 	mov.w	r7, #4294967295
 804d17c:	e7ea      	b.n	804d154 <__swbuf_r+0x6c>
 804d17e:	bf00      	nop
 804d180:	08050794 	.word	0x08050794
 804d184:	080507b4 	.word	0x080507b4
 804d188:	08050774 	.word	0x08050774

0804d18c <__swsetup_r>:
 804d18c:	4b32      	ldr	r3, [pc, #200]	; (804d258 <__swsetup_r+0xcc>)
 804d18e:	b570      	push	{r4, r5, r6, lr}
 804d190:	681d      	ldr	r5, [r3, #0]
 804d192:	4606      	mov	r6, r0
 804d194:	460c      	mov	r4, r1
 804d196:	b125      	cbz	r5, 804d1a2 <__swsetup_r+0x16>
 804d198:	69ab      	ldr	r3, [r5, #24]
 804d19a:	b913      	cbnz	r3, 804d1a2 <__swsetup_r+0x16>
 804d19c:	4628      	mov	r0, r5
 804d19e:	f000 f97d 	bl	804d49c <__sinit>
 804d1a2:	4b2e      	ldr	r3, [pc, #184]	; (804d25c <__swsetup_r+0xd0>)
 804d1a4:	429c      	cmp	r4, r3
 804d1a6:	d10f      	bne.n	804d1c8 <__swsetup_r+0x3c>
 804d1a8:	686c      	ldr	r4, [r5, #4]
 804d1aa:	89a3      	ldrh	r3, [r4, #12]
 804d1ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804d1b0:	0719      	lsls	r1, r3, #28
 804d1b2:	d42c      	bmi.n	804d20e <__swsetup_r+0x82>
 804d1b4:	06dd      	lsls	r5, r3, #27
 804d1b6:	d411      	bmi.n	804d1dc <__swsetup_r+0x50>
 804d1b8:	2309      	movs	r3, #9
 804d1ba:	6033      	str	r3, [r6, #0]
 804d1bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804d1c0:	81a3      	strh	r3, [r4, #12]
 804d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 804d1c6:	e03e      	b.n	804d246 <__swsetup_r+0xba>
 804d1c8:	4b25      	ldr	r3, [pc, #148]	; (804d260 <__swsetup_r+0xd4>)
 804d1ca:	429c      	cmp	r4, r3
 804d1cc:	d101      	bne.n	804d1d2 <__swsetup_r+0x46>
 804d1ce:	68ac      	ldr	r4, [r5, #8]
 804d1d0:	e7eb      	b.n	804d1aa <__swsetup_r+0x1e>
 804d1d2:	4b24      	ldr	r3, [pc, #144]	; (804d264 <__swsetup_r+0xd8>)
 804d1d4:	429c      	cmp	r4, r3
 804d1d6:	bf08      	it	eq
 804d1d8:	68ec      	ldreq	r4, [r5, #12]
 804d1da:	e7e6      	b.n	804d1aa <__swsetup_r+0x1e>
 804d1dc:	0758      	lsls	r0, r3, #29
 804d1de:	d512      	bpl.n	804d206 <__swsetup_r+0x7a>
 804d1e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804d1e2:	b141      	cbz	r1, 804d1f6 <__swsetup_r+0x6a>
 804d1e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804d1e8:	4299      	cmp	r1, r3
 804d1ea:	d002      	beq.n	804d1f2 <__swsetup_r+0x66>
 804d1ec:	4630      	mov	r0, r6
 804d1ee:	f7ff fddd 	bl	804cdac <_free_r>
 804d1f2:	2300      	movs	r3, #0
 804d1f4:	6363      	str	r3, [r4, #52]	; 0x34
 804d1f6:	89a3      	ldrh	r3, [r4, #12]
 804d1f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804d1fc:	81a3      	strh	r3, [r4, #12]
 804d1fe:	2300      	movs	r3, #0
 804d200:	6063      	str	r3, [r4, #4]
 804d202:	6923      	ldr	r3, [r4, #16]
 804d204:	6023      	str	r3, [r4, #0]
 804d206:	89a3      	ldrh	r3, [r4, #12]
 804d208:	f043 0308 	orr.w	r3, r3, #8
 804d20c:	81a3      	strh	r3, [r4, #12]
 804d20e:	6923      	ldr	r3, [r4, #16]
 804d210:	b94b      	cbnz	r3, 804d226 <__swsetup_r+0x9a>
 804d212:	89a3      	ldrh	r3, [r4, #12]
 804d214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804d218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804d21c:	d003      	beq.n	804d226 <__swsetup_r+0x9a>
 804d21e:	4621      	mov	r1, r4
 804d220:	4630      	mov	r0, r6
 804d222:	f000 fa01 	bl	804d628 <__smakebuf_r>
 804d226:	89a0      	ldrh	r0, [r4, #12]
 804d228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804d22c:	f010 0301 	ands.w	r3, r0, #1
 804d230:	d00a      	beq.n	804d248 <__swsetup_r+0xbc>
 804d232:	2300      	movs	r3, #0
 804d234:	60a3      	str	r3, [r4, #8]
 804d236:	6963      	ldr	r3, [r4, #20]
 804d238:	425b      	negs	r3, r3
 804d23a:	61a3      	str	r3, [r4, #24]
 804d23c:	6923      	ldr	r3, [r4, #16]
 804d23e:	b943      	cbnz	r3, 804d252 <__swsetup_r+0xc6>
 804d240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804d244:	d1ba      	bne.n	804d1bc <__swsetup_r+0x30>
 804d246:	bd70      	pop	{r4, r5, r6, pc}
 804d248:	0781      	lsls	r1, r0, #30
 804d24a:	bf58      	it	pl
 804d24c:	6963      	ldrpl	r3, [r4, #20]
 804d24e:	60a3      	str	r3, [r4, #8]
 804d250:	e7f4      	b.n	804d23c <__swsetup_r+0xb0>
 804d252:	2000      	movs	r0, #0
 804d254:	e7f7      	b.n	804d246 <__swsetup_r+0xba>
 804d256:	bf00      	nop
 804d258:	2000007c 	.word	0x2000007c
 804d25c:	08050794 	.word	0x08050794
 804d260:	080507b4 	.word	0x080507b4
 804d264:	08050774 	.word	0x08050774

0804d268 <__sflush_r>:
 804d268:	898a      	ldrh	r2, [r1, #12]
 804d26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d26e:	4605      	mov	r5, r0
 804d270:	0710      	lsls	r0, r2, #28
 804d272:	460c      	mov	r4, r1
 804d274:	d458      	bmi.n	804d328 <__sflush_r+0xc0>
 804d276:	684b      	ldr	r3, [r1, #4]
 804d278:	2b00      	cmp	r3, #0
 804d27a:	dc05      	bgt.n	804d288 <__sflush_r+0x20>
 804d27c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804d27e:	2b00      	cmp	r3, #0
 804d280:	dc02      	bgt.n	804d288 <__sflush_r+0x20>
 804d282:	2000      	movs	r0, #0
 804d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804d288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804d28a:	2e00      	cmp	r6, #0
 804d28c:	d0f9      	beq.n	804d282 <__sflush_r+0x1a>
 804d28e:	2300      	movs	r3, #0
 804d290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804d294:	682f      	ldr	r7, [r5, #0]
 804d296:	602b      	str	r3, [r5, #0]
 804d298:	d032      	beq.n	804d300 <__sflush_r+0x98>
 804d29a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804d29c:	89a3      	ldrh	r3, [r4, #12]
 804d29e:	075a      	lsls	r2, r3, #29
 804d2a0:	d505      	bpl.n	804d2ae <__sflush_r+0x46>
 804d2a2:	6863      	ldr	r3, [r4, #4]
 804d2a4:	1ac0      	subs	r0, r0, r3
 804d2a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804d2a8:	b10b      	cbz	r3, 804d2ae <__sflush_r+0x46>
 804d2aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804d2ac:	1ac0      	subs	r0, r0, r3
 804d2ae:	2300      	movs	r3, #0
 804d2b0:	4602      	mov	r2, r0
 804d2b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804d2b4:	6a21      	ldr	r1, [r4, #32]
 804d2b6:	4628      	mov	r0, r5
 804d2b8:	47b0      	blx	r6
 804d2ba:	1c43      	adds	r3, r0, #1
 804d2bc:	89a3      	ldrh	r3, [r4, #12]
 804d2be:	d106      	bne.n	804d2ce <__sflush_r+0x66>
 804d2c0:	6829      	ldr	r1, [r5, #0]
 804d2c2:	291d      	cmp	r1, #29
 804d2c4:	d82c      	bhi.n	804d320 <__sflush_r+0xb8>
 804d2c6:	4a2a      	ldr	r2, [pc, #168]	; (804d370 <__sflush_r+0x108>)
 804d2c8:	40ca      	lsrs	r2, r1
 804d2ca:	07d6      	lsls	r6, r2, #31
 804d2cc:	d528      	bpl.n	804d320 <__sflush_r+0xb8>
 804d2ce:	2200      	movs	r2, #0
 804d2d0:	6062      	str	r2, [r4, #4]
 804d2d2:	04d9      	lsls	r1, r3, #19
 804d2d4:	6922      	ldr	r2, [r4, #16]
 804d2d6:	6022      	str	r2, [r4, #0]
 804d2d8:	d504      	bpl.n	804d2e4 <__sflush_r+0x7c>
 804d2da:	1c42      	adds	r2, r0, #1
 804d2dc:	d101      	bne.n	804d2e2 <__sflush_r+0x7a>
 804d2de:	682b      	ldr	r3, [r5, #0]
 804d2e0:	b903      	cbnz	r3, 804d2e4 <__sflush_r+0x7c>
 804d2e2:	6560      	str	r0, [r4, #84]	; 0x54
 804d2e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804d2e6:	602f      	str	r7, [r5, #0]
 804d2e8:	2900      	cmp	r1, #0
 804d2ea:	d0ca      	beq.n	804d282 <__sflush_r+0x1a>
 804d2ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804d2f0:	4299      	cmp	r1, r3
 804d2f2:	d002      	beq.n	804d2fa <__sflush_r+0x92>
 804d2f4:	4628      	mov	r0, r5
 804d2f6:	f7ff fd59 	bl	804cdac <_free_r>
 804d2fa:	2000      	movs	r0, #0
 804d2fc:	6360      	str	r0, [r4, #52]	; 0x34
 804d2fe:	e7c1      	b.n	804d284 <__sflush_r+0x1c>
 804d300:	6a21      	ldr	r1, [r4, #32]
 804d302:	2301      	movs	r3, #1
 804d304:	4628      	mov	r0, r5
 804d306:	47b0      	blx	r6
 804d308:	1c41      	adds	r1, r0, #1
 804d30a:	d1c7      	bne.n	804d29c <__sflush_r+0x34>
 804d30c:	682b      	ldr	r3, [r5, #0]
 804d30e:	2b00      	cmp	r3, #0
 804d310:	d0c4      	beq.n	804d29c <__sflush_r+0x34>
 804d312:	2b1d      	cmp	r3, #29
 804d314:	d001      	beq.n	804d31a <__sflush_r+0xb2>
 804d316:	2b16      	cmp	r3, #22
 804d318:	d101      	bne.n	804d31e <__sflush_r+0xb6>
 804d31a:	602f      	str	r7, [r5, #0]
 804d31c:	e7b1      	b.n	804d282 <__sflush_r+0x1a>
 804d31e:	89a3      	ldrh	r3, [r4, #12]
 804d320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d324:	81a3      	strh	r3, [r4, #12]
 804d326:	e7ad      	b.n	804d284 <__sflush_r+0x1c>
 804d328:	690f      	ldr	r7, [r1, #16]
 804d32a:	2f00      	cmp	r7, #0
 804d32c:	d0a9      	beq.n	804d282 <__sflush_r+0x1a>
 804d32e:	0793      	lsls	r3, r2, #30
 804d330:	680e      	ldr	r6, [r1, #0]
 804d332:	bf08      	it	eq
 804d334:	694b      	ldreq	r3, [r1, #20]
 804d336:	600f      	str	r7, [r1, #0]
 804d338:	bf18      	it	ne
 804d33a:	2300      	movne	r3, #0
 804d33c:	eba6 0807 	sub.w	r8, r6, r7
 804d340:	608b      	str	r3, [r1, #8]
 804d342:	f1b8 0f00 	cmp.w	r8, #0
 804d346:	dd9c      	ble.n	804d282 <__sflush_r+0x1a>
 804d348:	6a21      	ldr	r1, [r4, #32]
 804d34a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804d34c:	4643      	mov	r3, r8
 804d34e:	463a      	mov	r2, r7
 804d350:	4628      	mov	r0, r5
 804d352:	47b0      	blx	r6
 804d354:	2800      	cmp	r0, #0
 804d356:	dc06      	bgt.n	804d366 <__sflush_r+0xfe>
 804d358:	89a3      	ldrh	r3, [r4, #12]
 804d35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d35e:	81a3      	strh	r3, [r4, #12]
 804d360:	f04f 30ff 	mov.w	r0, #4294967295
 804d364:	e78e      	b.n	804d284 <__sflush_r+0x1c>
 804d366:	4407      	add	r7, r0
 804d368:	eba8 0800 	sub.w	r8, r8, r0
 804d36c:	e7e9      	b.n	804d342 <__sflush_r+0xda>
 804d36e:	bf00      	nop
 804d370:	20400001 	.word	0x20400001

0804d374 <_fflush_r>:
 804d374:	b538      	push	{r3, r4, r5, lr}
 804d376:	690b      	ldr	r3, [r1, #16]
 804d378:	4605      	mov	r5, r0
 804d37a:	460c      	mov	r4, r1
 804d37c:	b913      	cbnz	r3, 804d384 <_fflush_r+0x10>
 804d37e:	2500      	movs	r5, #0
 804d380:	4628      	mov	r0, r5
 804d382:	bd38      	pop	{r3, r4, r5, pc}
 804d384:	b118      	cbz	r0, 804d38e <_fflush_r+0x1a>
 804d386:	6983      	ldr	r3, [r0, #24]
 804d388:	b90b      	cbnz	r3, 804d38e <_fflush_r+0x1a>
 804d38a:	f000 f887 	bl	804d49c <__sinit>
 804d38e:	4b14      	ldr	r3, [pc, #80]	; (804d3e0 <_fflush_r+0x6c>)
 804d390:	429c      	cmp	r4, r3
 804d392:	d11b      	bne.n	804d3cc <_fflush_r+0x58>
 804d394:	686c      	ldr	r4, [r5, #4]
 804d396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d39a:	2b00      	cmp	r3, #0
 804d39c:	d0ef      	beq.n	804d37e <_fflush_r+0xa>
 804d39e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804d3a0:	07d0      	lsls	r0, r2, #31
 804d3a2:	d404      	bmi.n	804d3ae <_fflush_r+0x3a>
 804d3a4:	0599      	lsls	r1, r3, #22
 804d3a6:	d402      	bmi.n	804d3ae <_fflush_r+0x3a>
 804d3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d3aa:	f000 f915 	bl	804d5d8 <__retarget_lock_acquire_recursive>
 804d3ae:	4628      	mov	r0, r5
 804d3b0:	4621      	mov	r1, r4
 804d3b2:	f7ff ff59 	bl	804d268 <__sflush_r>
 804d3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804d3b8:	07da      	lsls	r2, r3, #31
 804d3ba:	4605      	mov	r5, r0
 804d3bc:	d4e0      	bmi.n	804d380 <_fflush_r+0xc>
 804d3be:	89a3      	ldrh	r3, [r4, #12]
 804d3c0:	059b      	lsls	r3, r3, #22
 804d3c2:	d4dd      	bmi.n	804d380 <_fflush_r+0xc>
 804d3c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804d3c6:	f000 f908 	bl	804d5da <__retarget_lock_release_recursive>
 804d3ca:	e7d9      	b.n	804d380 <_fflush_r+0xc>
 804d3cc:	4b05      	ldr	r3, [pc, #20]	; (804d3e4 <_fflush_r+0x70>)
 804d3ce:	429c      	cmp	r4, r3
 804d3d0:	d101      	bne.n	804d3d6 <_fflush_r+0x62>
 804d3d2:	68ac      	ldr	r4, [r5, #8]
 804d3d4:	e7df      	b.n	804d396 <_fflush_r+0x22>
 804d3d6:	4b04      	ldr	r3, [pc, #16]	; (804d3e8 <_fflush_r+0x74>)
 804d3d8:	429c      	cmp	r4, r3
 804d3da:	bf08      	it	eq
 804d3dc:	68ec      	ldreq	r4, [r5, #12]
 804d3de:	e7da      	b.n	804d396 <_fflush_r+0x22>
 804d3e0:	08050794 	.word	0x08050794
 804d3e4:	080507b4 	.word	0x080507b4
 804d3e8:	08050774 	.word	0x08050774

0804d3ec <std>:
 804d3ec:	2300      	movs	r3, #0
 804d3ee:	b510      	push	{r4, lr}
 804d3f0:	4604      	mov	r4, r0
 804d3f2:	e9c0 3300 	strd	r3, r3, [r0]
 804d3f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804d3fa:	6083      	str	r3, [r0, #8]
 804d3fc:	8181      	strh	r1, [r0, #12]
 804d3fe:	6643      	str	r3, [r0, #100]	; 0x64
 804d400:	81c2      	strh	r2, [r0, #14]
 804d402:	6183      	str	r3, [r0, #24]
 804d404:	4619      	mov	r1, r3
 804d406:	2208      	movs	r2, #8
 804d408:	305c      	adds	r0, #92	; 0x5c
 804d40a:	f7ff fcc7 	bl	804cd9c <memset>
 804d40e:	4b05      	ldr	r3, [pc, #20]	; (804d424 <std+0x38>)
 804d410:	6263      	str	r3, [r4, #36]	; 0x24
 804d412:	4b05      	ldr	r3, [pc, #20]	; (804d428 <std+0x3c>)
 804d414:	62a3      	str	r3, [r4, #40]	; 0x28
 804d416:	4b05      	ldr	r3, [pc, #20]	; (804d42c <std+0x40>)
 804d418:	62e3      	str	r3, [r4, #44]	; 0x2c
 804d41a:	4b05      	ldr	r3, [pc, #20]	; (804d430 <std+0x44>)
 804d41c:	6224      	str	r4, [r4, #32]
 804d41e:	6323      	str	r3, [r4, #48]	; 0x30
 804d420:	bd10      	pop	{r4, pc}
 804d422:	bf00      	nop
 804d424:	0804df55 	.word	0x0804df55
 804d428:	0804df77 	.word	0x0804df77
 804d42c:	0804dfaf 	.word	0x0804dfaf
 804d430:	0804dfd3 	.word	0x0804dfd3

0804d434 <_cleanup_r>:
 804d434:	4901      	ldr	r1, [pc, #4]	; (804d43c <_cleanup_r+0x8>)
 804d436:	f000 b8af 	b.w	804d598 <_fwalk_reent>
 804d43a:	bf00      	nop
 804d43c:	0804d375 	.word	0x0804d375

0804d440 <__sfmoreglue>:
 804d440:	b570      	push	{r4, r5, r6, lr}
 804d442:	2268      	movs	r2, #104	; 0x68
 804d444:	1e4d      	subs	r5, r1, #1
 804d446:	4355      	muls	r5, r2
 804d448:	460e      	mov	r6, r1
 804d44a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804d44e:	f7ff fd19 	bl	804ce84 <_malloc_r>
 804d452:	4604      	mov	r4, r0
 804d454:	b140      	cbz	r0, 804d468 <__sfmoreglue+0x28>
 804d456:	2100      	movs	r1, #0
 804d458:	e9c0 1600 	strd	r1, r6, [r0]
 804d45c:	300c      	adds	r0, #12
 804d45e:	60a0      	str	r0, [r4, #8]
 804d460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804d464:	f7ff fc9a 	bl	804cd9c <memset>
 804d468:	4620      	mov	r0, r4
 804d46a:	bd70      	pop	{r4, r5, r6, pc}

0804d46c <__sfp_lock_acquire>:
 804d46c:	4801      	ldr	r0, [pc, #4]	; (804d474 <__sfp_lock_acquire+0x8>)
 804d46e:	f000 b8b3 	b.w	804d5d8 <__retarget_lock_acquire_recursive>
 804d472:	bf00      	nop
 804d474:	20001169 	.word	0x20001169

0804d478 <__sfp_lock_release>:
 804d478:	4801      	ldr	r0, [pc, #4]	; (804d480 <__sfp_lock_release+0x8>)
 804d47a:	f000 b8ae 	b.w	804d5da <__retarget_lock_release_recursive>
 804d47e:	bf00      	nop
 804d480:	20001169 	.word	0x20001169

0804d484 <__sinit_lock_acquire>:
 804d484:	4801      	ldr	r0, [pc, #4]	; (804d48c <__sinit_lock_acquire+0x8>)
 804d486:	f000 b8a7 	b.w	804d5d8 <__retarget_lock_acquire_recursive>
 804d48a:	bf00      	nop
 804d48c:	2000116a 	.word	0x2000116a

0804d490 <__sinit_lock_release>:
 804d490:	4801      	ldr	r0, [pc, #4]	; (804d498 <__sinit_lock_release+0x8>)
 804d492:	f000 b8a2 	b.w	804d5da <__retarget_lock_release_recursive>
 804d496:	bf00      	nop
 804d498:	2000116a 	.word	0x2000116a

0804d49c <__sinit>:
 804d49c:	b510      	push	{r4, lr}
 804d49e:	4604      	mov	r4, r0
 804d4a0:	f7ff fff0 	bl	804d484 <__sinit_lock_acquire>
 804d4a4:	69a3      	ldr	r3, [r4, #24]
 804d4a6:	b11b      	cbz	r3, 804d4b0 <__sinit+0x14>
 804d4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804d4ac:	f7ff bff0 	b.w	804d490 <__sinit_lock_release>
 804d4b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804d4b4:	6523      	str	r3, [r4, #80]	; 0x50
 804d4b6:	4b13      	ldr	r3, [pc, #76]	; (804d504 <__sinit+0x68>)
 804d4b8:	4a13      	ldr	r2, [pc, #76]	; (804d508 <__sinit+0x6c>)
 804d4ba:	681b      	ldr	r3, [r3, #0]
 804d4bc:	62a2      	str	r2, [r4, #40]	; 0x28
 804d4be:	42a3      	cmp	r3, r4
 804d4c0:	bf04      	itt	eq
 804d4c2:	2301      	moveq	r3, #1
 804d4c4:	61a3      	streq	r3, [r4, #24]
 804d4c6:	4620      	mov	r0, r4
 804d4c8:	f000 f820 	bl	804d50c <__sfp>
 804d4cc:	6060      	str	r0, [r4, #4]
 804d4ce:	4620      	mov	r0, r4
 804d4d0:	f000 f81c 	bl	804d50c <__sfp>
 804d4d4:	60a0      	str	r0, [r4, #8]
 804d4d6:	4620      	mov	r0, r4
 804d4d8:	f000 f818 	bl	804d50c <__sfp>
 804d4dc:	2200      	movs	r2, #0
 804d4de:	60e0      	str	r0, [r4, #12]
 804d4e0:	2104      	movs	r1, #4
 804d4e2:	6860      	ldr	r0, [r4, #4]
 804d4e4:	f7ff ff82 	bl	804d3ec <std>
 804d4e8:	68a0      	ldr	r0, [r4, #8]
 804d4ea:	2201      	movs	r2, #1
 804d4ec:	2109      	movs	r1, #9
 804d4ee:	f7ff ff7d 	bl	804d3ec <std>
 804d4f2:	68e0      	ldr	r0, [r4, #12]
 804d4f4:	2202      	movs	r2, #2
 804d4f6:	2112      	movs	r1, #18
 804d4f8:	f7ff ff78 	bl	804d3ec <std>
 804d4fc:	2301      	movs	r3, #1
 804d4fe:	61a3      	str	r3, [r4, #24]
 804d500:	e7d2      	b.n	804d4a8 <__sinit+0xc>
 804d502:	bf00      	nop
 804d504:	08050770 	.word	0x08050770
 804d508:	0804d435 	.word	0x0804d435

0804d50c <__sfp>:
 804d50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d50e:	4607      	mov	r7, r0
 804d510:	f7ff ffac 	bl	804d46c <__sfp_lock_acquire>
 804d514:	4b1e      	ldr	r3, [pc, #120]	; (804d590 <__sfp+0x84>)
 804d516:	681e      	ldr	r6, [r3, #0]
 804d518:	69b3      	ldr	r3, [r6, #24]
 804d51a:	b913      	cbnz	r3, 804d522 <__sfp+0x16>
 804d51c:	4630      	mov	r0, r6
 804d51e:	f7ff ffbd 	bl	804d49c <__sinit>
 804d522:	3648      	adds	r6, #72	; 0x48
 804d524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804d528:	3b01      	subs	r3, #1
 804d52a:	d503      	bpl.n	804d534 <__sfp+0x28>
 804d52c:	6833      	ldr	r3, [r6, #0]
 804d52e:	b30b      	cbz	r3, 804d574 <__sfp+0x68>
 804d530:	6836      	ldr	r6, [r6, #0]
 804d532:	e7f7      	b.n	804d524 <__sfp+0x18>
 804d534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804d538:	b9d5      	cbnz	r5, 804d570 <__sfp+0x64>
 804d53a:	4b16      	ldr	r3, [pc, #88]	; (804d594 <__sfp+0x88>)
 804d53c:	60e3      	str	r3, [r4, #12]
 804d53e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804d542:	6665      	str	r5, [r4, #100]	; 0x64
 804d544:	f000 f847 	bl	804d5d6 <__retarget_lock_init_recursive>
 804d548:	f7ff ff96 	bl	804d478 <__sfp_lock_release>
 804d54c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804d550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804d554:	6025      	str	r5, [r4, #0]
 804d556:	61a5      	str	r5, [r4, #24]
 804d558:	2208      	movs	r2, #8
 804d55a:	4629      	mov	r1, r5
 804d55c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804d560:	f7ff fc1c 	bl	804cd9c <memset>
 804d564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804d568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804d56c:	4620      	mov	r0, r4
 804d56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804d570:	3468      	adds	r4, #104	; 0x68
 804d572:	e7d9      	b.n	804d528 <__sfp+0x1c>
 804d574:	2104      	movs	r1, #4
 804d576:	4638      	mov	r0, r7
 804d578:	f7ff ff62 	bl	804d440 <__sfmoreglue>
 804d57c:	4604      	mov	r4, r0
 804d57e:	6030      	str	r0, [r6, #0]
 804d580:	2800      	cmp	r0, #0
 804d582:	d1d5      	bne.n	804d530 <__sfp+0x24>
 804d584:	f7ff ff78 	bl	804d478 <__sfp_lock_release>
 804d588:	230c      	movs	r3, #12
 804d58a:	603b      	str	r3, [r7, #0]
 804d58c:	e7ee      	b.n	804d56c <__sfp+0x60>
 804d58e:	bf00      	nop
 804d590:	08050770 	.word	0x08050770
 804d594:	ffff0001 	.word	0xffff0001

0804d598 <_fwalk_reent>:
 804d598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804d59c:	4606      	mov	r6, r0
 804d59e:	4688      	mov	r8, r1
 804d5a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804d5a4:	2700      	movs	r7, #0
 804d5a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804d5aa:	f1b9 0901 	subs.w	r9, r9, #1
 804d5ae:	d505      	bpl.n	804d5bc <_fwalk_reent+0x24>
 804d5b0:	6824      	ldr	r4, [r4, #0]
 804d5b2:	2c00      	cmp	r4, #0
 804d5b4:	d1f7      	bne.n	804d5a6 <_fwalk_reent+0xe>
 804d5b6:	4638      	mov	r0, r7
 804d5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804d5bc:	89ab      	ldrh	r3, [r5, #12]
 804d5be:	2b01      	cmp	r3, #1
 804d5c0:	d907      	bls.n	804d5d2 <_fwalk_reent+0x3a>
 804d5c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804d5c6:	3301      	adds	r3, #1
 804d5c8:	d003      	beq.n	804d5d2 <_fwalk_reent+0x3a>
 804d5ca:	4629      	mov	r1, r5
 804d5cc:	4630      	mov	r0, r6
 804d5ce:	47c0      	blx	r8
 804d5d0:	4307      	orrs	r7, r0
 804d5d2:	3568      	adds	r5, #104	; 0x68
 804d5d4:	e7e9      	b.n	804d5aa <_fwalk_reent+0x12>

0804d5d6 <__retarget_lock_init_recursive>:
 804d5d6:	4770      	bx	lr

0804d5d8 <__retarget_lock_acquire_recursive>:
 804d5d8:	4770      	bx	lr

0804d5da <__retarget_lock_release_recursive>:
 804d5da:	4770      	bx	lr

0804d5dc <__swhatbuf_r>:
 804d5dc:	b570      	push	{r4, r5, r6, lr}
 804d5de:	460e      	mov	r6, r1
 804d5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804d5e4:	2900      	cmp	r1, #0
 804d5e6:	b096      	sub	sp, #88	; 0x58
 804d5e8:	4614      	mov	r4, r2
 804d5ea:	461d      	mov	r5, r3
 804d5ec:	da08      	bge.n	804d600 <__swhatbuf_r+0x24>
 804d5ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 804d5f2:	2200      	movs	r2, #0
 804d5f4:	602a      	str	r2, [r5, #0]
 804d5f6:	061a      	lsls	r2, r3, #24
 804d5f8:	d410      	bmi.n	804d61c <__swhatbuf_r+0x40>
 804d5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804d5fe:	e00e      	b.n	804d61e <__swhatbuf_r+0x42>
 804d600:	466a      	mov	r2, sp
 804d602:	f000 fd0d 	bl	804e020 <_fstat_r>
 804d606:	2800      	cmp	r0, #0
 804d608:	dbf1      	blt.n	804d5ee <__swhatbuf_r+0x12>
 804d60a:	9a01      	ldr	r2, [sp, #4]
 804d60c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804d610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804d614:	425a      	negs	r2, r3
 804d616:	415a      	adcs	r2, r3
 804d618:	602a      	str	r2, [r5, #0]
 804d61a:	e7ee      	b.n	804d5fa <__swhatbuf_r+0x1e>
 804d61c:	2340      	movs	r3, #64	; 0x40
 804d61e:	2000      	movs	r0, #0
 804d620:	6023      	str	r3, [r4, #0]
 804d622:	b016      	add	sp, #88	; 0x58
 804d624:	bd70      	pop	{r4, r5, r6, pc}
	...

0804d628 <__smakebuf_r>:
 804d628:	898b      	ldrh	r3, [r1, #12]
 804d62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804d62c:	079d      	lsls	r5, r3, #30
 804d62e:	4606      	mov	r6, r0
 804d630:	460c      	mov	r4, r1
 804d632:	d507      	bpl.n	804d644 <__smakebuf_r+0x1c>
 804d634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804d638:	6023      	str	r3, [r4, #0]
 804d63a:	6123      	str	r3, [r4, #16]
 804d63c:	2301      	movs	r3, #1
 804d63e:	6163      	str	r3, [r4, #20]
 804d640:	b002      	add	sp, #8
 804d642:	bd70      	pop	{r4, r5, r6, pc}
 804d644:	ab01      	add	r3, sp, #4
 804d646:	466a      	mov	r2, sp
 804d648:	f7ff ffc8 	bl	804d5dc <__swhatbuf_r>
 804d64c:	9900      	ldr	r1, [sp, #0]
 804d64e:	4605      	mov	r5, r0
 804d650:	4630      	mov	r0, r6
 804d652:	f7ff fc17 	bl	804ce84 <_malloc_r>
 804d656:	b948      	cbnz	r0, 804d66c <__smakebuf_r+0x44>
 804d658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804d65c:	059a      	lsls	r2, r3, #22
 804d65e:	d4ef      	bmi.n	804d640 <__smakebuf_r+0x18>
 804d660:	f023 0303 	bic.w	r3, r3, #3
 804d664:	f043 0302 	orr.w	r3, r3, #2
 804d668:	81a3      	strh	r3, [r4, #12]
 804d66a:	e7e3      	b.n	804d634 <__smakebuf_r+0xc>
 804d66c:	4b0d      	ldr	r3, [pc, #52]	; (804d6a4 <__smakebuf_r+0x7c>)
 804d66e:	62b3      	str	r3, [r6, #40]	; 0x28
 804d670:	89a3      	ldrh	r3, [r4, #12]
 804d672:	6020      	str	r0, [r4, #0]
 804d674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d678:	81a3      	strh	r3, [r4, #12]
 804d67a:	9b00      	ldr	r3, [sp, #0]
 804d67c:	6163      	str	r3, [r4, #20]
 804d67e:	9b01      	ldr	r3, [sp, #4]
 804d680:	6120      	str	r0, [r4, #16]
 804d682:	b15b      	cbz	r3, 804d69c <__smakebuf_r+0x74>
 804d684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804d688:	4630      	mov	r0, r6
 804d68a:	f000 fcdb 	bl	804e044 <_isatty_r>
 804d68e:	b128      	cbz	r0, 804d69c <__smakebuf_r+0x74>
 804d690:	89a3      	ldrh	r3, [r4, #12]
 804d692:	f023 0303 	bic.w	r3, r3, #3
 804d696:	f043 0301 	orr.w	r3, r3, #1
 804d69a:	81a3      	strh	r3, [r4, #12]
 804d69c:	89a0      	ldrh	r0, [r4, #12]
 804d69e:	4305      	orrs	r5, r0
 804d6a0:	81a5      	strh	r5, [r4, #12]
 804d6a2:	e7cd      	b.n	804d640 <__smakebuf_r+0x18>
 804d6a4:	0804d435 	.word	0x0804d435

0804d6a8 <__malloc_lock>:
 804d6a8:	4801      	ldr	r0, [pc, #4]	; (804d6b0 <__malloc_lock+0x8>)
 804d6aa:	f7ff bf95 	b.w	804d5d8 <__retarget_lock_acquire_recursive>
 804d6ae:	bf00      	nop
 804d6b0:	20001168 	.word	0x20001168

0804d6b4 <__malloc_unlock>:
 804d6b4:	4801      	ldr	r0, [pc, #4]	; (804d6bc <__malloc_unlock+0x8>)
 804d6b6:	f7ff bf90 	b.w	804d5da <__retarget_lock_release_recursive>
 804d6ba:	bf00      	nop
 804d6bc:	20001168 	.word	0x20001168

0804d6c0 <__ssputs_r>:
 804d6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d6c4:	688e      	ldr	r6, [r1, #8]
 804d6c6:	429e      	cmp	r6, r3
 804d6c8:	4682      	mov	sl, r0
 804d6ca:	460c      	mov	r4, r1
 804d6cc:	4690      	mov	r8, r2
 804d6ce:	461f      	mov	r7, r3
 804d6d0:	d838      	bhi.n	804d744 <__ssputs_r+0x84>
 804d6d2:	898a      	ldrh	r2, [r1, #12]
 804d6d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 804d6d8:	d032      	beq.n	804d740 <__ssputs_r+0x80>
 804d6da:	6825      	ldr	r5, [r4, #0]
 804d6dc:	6909      	ldr	r1, [r1, #16]
 804d6de:	eba5 0901 	sub.w	r9, r5, r1
 804d6e2:	6965      	ldr	r5, [r4, #20]
 804d6e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804d6e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 804d6ec:	3301      	adds	r3, #1
 804d6ee:	444b      	add	r3, r9
 804d6f0:	106d      	asrs	r5, r5, #1
 804d6f2:	429d      	cmp	r5, r3
 804d6f4:	bf38      	it	cc
 804d6f6:	461d      	movcc	r5, r3
 804d6f8:	0553      	lsls	r3, r2, #21
 804d6fa:	d531      	bpl.n	804d760 <__ssputs_r+0xa0>
 804d6fc:	4629      	mov	r1, r5
 804d6fe:	f7ff fbc1 	bl	804ce84 <_malloc_r>
 804d702:	4606      	mov	r6, r0
 804d704:	b950      	cbnz	r0, 804d71c <__ssputs_r+0x5c>
 804d706:	230c      	movs	r3, #12
 804d708:	f8ca 3000 	str.w	r3, [sl]
 804d70c:	89a3      	ldrh	r3, [r4, #12]
 804d70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804d712:	81a3      	strh	r3, [r4, #12]
 804d714:	f04f 30ff 	mov.w	r0, #4294967295
 804d718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804d71c:	6921      	ldr	r1, [r4, #16]
 804d71e:	464a      	mov	r2, r9
 804d720:	f000 fcb2 	bl	804e088 <memcpy>
 804d724:	89a3      	ldrh	r3, [r4, #12]
 804d726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 804d72a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804d72e:	81a3      	strh	r3, [r4, #12]
 804d730:	6126      	str	r6, [r4, #16]
 804d732:	6165      	str	r5, [r4, #20]
 804d734:	444e      	add	r6, r9
 804d736:	eba5 0509 	sub.w	r5, r5, r9
 804d73a:	6026      	str	r6, [r4, #0]
 804d73c:	60a5      	str	r5, [r4, #8]
 804d73e:	463e      	mov	r6, r7
 804d740:	42be      	cmp	r6, r7
 804d742:	d900      	bls.n	804d746 <__ssputs_r+0x86>
 804d744:	463e      	mov	r6, r7
 804d746:	6820      	ldr	r0, [r4, #0]
 804d748:	4632      	mov	r2, r6
 804d74a:	4641      	mov	r1, r8
 804d74c:	f000 fcaa 	bl	804e0a4 <memmove>
 804d750:	68a3      	ldr	r3, [r4, #8]
 804d752:	1b9b      	subs	r3, r3, r6
 804d754:	60a3      	str	r3, [r4, #8]
 804d756:	6823      	ldr	r3, [r4, #0]
 804d758:	4433      	add	r3, r6
 804d75a:	6023      	str	r3, [r4, #0]
 804d75c:	2000      	movs	r0, #0
 804d75e:	e7db      	b.n	804d718 <__ssputs_r+0x58>
 804d760:	462a      	mov	r2, r5
 804d762:	f000 fcb9 	bl	804e0d8 <_realloc_r>
 804d766:	4606      	mov	r6, r0
 804d768:	2800      	cmp	r0, #0
 804d76a:	d1e1      	bne.n	804d730 <__ssputs_r+0x70>
 804d76c:	6921      	ldr	r1, [r4, #16]
 804d76e:	4650      	mov	r0, sl
 804d770:	f7ff fb1c 	bl	804cdac <_free_r>
 804d774:	e7c7      	b.n	804d706 <__ssputs_r+0x46>
	...

0804d778 <_svfiprintf_r>:
 804d778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d77c:	4698      	mov	r8, r3
 804d77e:	898b      	ldrh	r3, [r1, #12]
 804d780:	061b      	lsls	r3, r3, #24
 804d782:	b09d      	sub	sp, #116	; 0x74
 804d784:	4607      	mov	r7, r0
 804d786:	460d      	mov	r5, r1
 804d788:	4614      	mov	r4, r2
 804d78a:	d50e      	bpl.n	804d7aa <_svfiprintf_r+0x32>
 804d78c:	690b      	ldr	r3, [r1, #16]
 804d78e:	b963      	cbnz	r3, 804d7aa <_svfiprintf_r+0x32>
 804d790:	2140      	movs	r1, #64	; 0x40
 804d792:	f7ff fb77 	bl	804ce84 <_malloc_r>
 804d796:	6028      	str	r0, [r5, #0]
 804d798:	6128      	str	r0, [r5, #16]
 804d79a:	b920      	cbnz	r0, 804d7a6 <_svfiprintf_r+0x2e>
 804d79c:	230c      	movs	r3, #12
 804d79e:	603b      	str	r3, [r7, #0]
 804d7a0:	f04f 30ff 	mov.w	r0, #4294967295
 804d7a4:	e0d1      	b.n	804d94a <_svfiprintf_r+0x1d2>
 804d7a6:	2340      	movs	r3, #64	; 0x40
 804d7a8:	616b      	str	r3, [r5, #20]
 804d7aa:	2300      	movs	r3, #0
 804d7ac:	9309      	str	r3, [sp, #36]	; 0x24
 804d7ae:	2320      	movs	r3, #32
 804d7b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d7b4:	f8cd 800c 	str.w	r8, [sp, #12]
 804d7b8:	2330      	movs	r3, #48	; 0x30
 804d7ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 804d964 <_svfiprintf_r+0x1ec>
 804d7be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804d7c2:	f04f 0901 	mov.w	r9, #1
 804d7c6:	4623      	mov	r3, r4
 804d7c8:	469a      	mov	sl, r3
 804d7ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 804d7ce:	b10a      	cbz	r2, 804d7d4 <_svfiprintf_r+0x5c>
 804d7d0:	2a25      	cmp	r2, #37	; 0x25
 804d7d2:	d1f9      	bne.n	804d7c8 <_svfiprintf_r+0x50>
 804d7d4:	ebba 0b04 	subs.w	fp, sl, r4
 804d7d8:	d00b      	beq.n	804d7f2 <_svfiprintf_r+0x7a>
 804d7da:	465b      	mov	r3, fp
 804d7dc:	4622      	mov	r2, r4
 804d7de:	4629      	mov	r1, r5
 804d7e0:	4638      	mov	r0, r7
 804d7e2:	f7ff ff6d 	bl	804d6c0 <__ssputs_r>
 804d7e6:	3001      	adds	r0, #1
 804d7e8:	f000 80aa 	beq.w	804d940 <_svfiprintf_r+0x1c8>
 804d7ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804d7ee:	445a      	add	r2, fp
 804d7f0:	9209      	str	r2, [sp, #36]	; 0x24
 804d7f2:	f89a 3000 	ldrb.w	r3, [sl]
 804d7f6:	2b00      	cmp	r3, #0
 804d7f8:	f000 80a2 	beq.w	804d940 <_svfiprintf_r+0x1c8>
 804d7fc:	2300      	movs	r3, #0
 804d7fe:	f04f 32ff 	mov.w	r2, #4294967295
 804d802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804d806:	f10a 0a01 	add.w	sl, sl, #1
 804d80a:	9304      	str	r3, [sp, #16]
 804d80c:	9307      	str	r3, [sp, #28]
 804d80e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804d812:	931a      	str	r3, [sp, #104]	; 0x68
 804d814:	4654      	mov	r4, sl
 804d816:	2205      	movs	r2, #5
 804d818:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d81c:	4851      	ldr	r0, [pc, #324]	; (804d964 <_svfiprintf_r+0x1ec>)
 804d81e:	f7f2 fce7 	bl	80401f0 <memchr>
 804d822:	9a04      	ldr	r2, [sp, #16]
 804d824:	b9d8      	cbnz	r0, 804d85e <_svfiprintf_r+0xe6>
 804d826:	06d0      	lsls	r0, r2, #27
 804d828:	bf44      	itt	mi
 804d82a:	2320      	movmi	r3, #32
 804d82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d830:	0711      	lsls	r1, r2, #28
 804d832:	bf44      	itt	mi
 804d834:	232b      	movmi	r3, #43	; 0x2b
 804d836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804d83a:	f89a 3000 	ldrb.w	r3, [sl]
 804d83e:	2b2a      	cmp	r3, #42	; 0x2a
 804d840:	d015      	beq.n	804d86e <_svfiprintf_r+0xf6>
 804d842:	9a07      	ldr	r2, [sp, #28]
 804d844:	4654      	mov	r4, sl
 804d846:	2000      	movs	r0, #0
 804d848:	f04f 0c0a 	mov.w	ip, #10
 804d84c:	4621      	mov	r1, r4
 804d84e:	f811 3b01 	ldrb.w	r3, [r1], #1
 804d852:	3b30      	subs	r3, #48	; 0x30
 804d854:	2b09      	cmp	r3, #9
 804d856:	d94e      	bls.n	804d8f6 <_svfiprintf_r+0x17e>
 804d858:	b1b0      	cbz	r0, 804d888 <_svfiprintf_r+0x110>
 804d85a:	9207      	str	r2, [sp, #28]
 804d85c:	e014      	b.n	804d888 <_svfiprintf_r+0x110>
 804d85e:	eba0 0308 	sub.w	r3, r0, r8
 804d862:	fa09 f303 	lsl.w	r3, r9, r3
 804d866:	4313      	orrs	r3, r2
 804d868:	9304      	str	r3, [sp, #16]
 804d86a:	46a2      	mov	sl, r4
 804d86c:	e7d2      	b.n	804d814 <_svfiprintf_r+0x9c>
 804d86e:	9b03      	ldr	r3, [sp, #12]
 804d870:	1d19      	adds	r1, r3, #4
 804d872:	681b      	ldr	r3, [r3, #0]
 804d874:	9103      	str	r1, [sp, #12]
 804d876:	2b00      	cmp	r3, #0
 804d878:	bfbb      	ittet	lt
 804d87a:	425b      	neglt	r3, r3
 804d87c:	f042 0202 	orrlt.w	r2, r2, #2
 804d880:	9307      	strge	r3, [sp, #28]
 804d882:	9307      	strlt	r3, [sp, #28]
 804d884:	bfb8      	it	lt
 804d886:	9204      	strlt	r2, [sp, #16]
 804d888:	7823      	ldrb	r3, [r4, #0]
 804d88a:	2b2e      	cmp	r3, #46	; 0x2e
 804d88c:	d10c      	bne.n	804d8a8 <_svfiprintf_r+0x130>
 804d88e:	7863      	ldrb	r3, [r4, #1]
 804d890:	2b2a      	cmp	r3, #42	; 0x2a
 804d892:	d135      	bne.n	804d900 <_svfiprintf_r+0x188>
 804d894:	9b03      	ldr	r3, [sp, #12]
 804d896:	1d1a      	adds	r2, r3, #4
 804d898:	681b      	ldr	r3, [r3, #0]
 804d89a:	9203      	str	r2, [sp, #12]
 804d89c:	2b00      	cmp	r3, #0
 804d89e:	bfb8      	it	lt
 804d8a0:	f04f 33ff 	movlt.w	r3, #4294967295
 804d8a4:	3402      	adds	r4, #2
 804d8a6:	9305      	str	r3, [sp, #20]
 804d8a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 804d974 <_svfiprintf_r+0x1fc>
 804d8ac:	7821      	ldrb	r1, [r4, #0]
 804d8ae:	2203      	movs	r2, #3
 804d8b0:	4650      	mov	r0, sl
 804d8b2:	f7f2 fc9d 	bl	80401f0 <memchr>
 804d8b6:	b140      	cbz	r0, 804d8ca <_svfiprintf_r+0x152>
 804d8b8:	2340      	movs	r3, #64	; 0x40
 804d8ba:	eba0 000a 	sub.w	r0, r0, sl
 804d8be:	fa03 f000 	lsl.w	r0, r3, r0
 804d8c2:	9b04      	ldr	r3, [sp, #16]
 804d8c4:	4303      	orrs	r3, r0
 804d8c6:	3401      	adds	r4, #1
 804d8c8:	9304      	str	r3, [sp, #16]
 804d8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d8ce:	4826      	ldr	r0, [pc, #152]	; (804d968 <_svfiprintf_r+0x1f0>)
 804d8d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804d8d4:	2206      	movs	r2, #6
 804d8d6:	f7f2 fc8b 	bl	80401f0 <memchr>
 804d8da:	2800      	cmp	r0, #0
 804d8dc:	d038      	beq.n	804d950 <_svfiprintf_r+0x1d8>
 804d8de:	4b23      	ldr	r3, [pc, #140]	; (804d96c <_svfiprintf_r+0x1f4>)
 804d8e0:	bb1b      	cbnz	r3, 804d92a <_svfiprintf_r+0x1b2>
 804d8e2:	9b03      	ldr	r3, [sp, #12]
 804d8e4:	3307      	adds	r3, #7
 804d8e6:	f023 0307 	bic.w	r3, r3, #7
 804d8ea:	3308      	adds	r3, #8
 804d8ec:	9303      	str	r3, [sp, #12]
 804d8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804d8f0:	4433      	add	r3, r6
 804d8f2:	9309      	str	r3, [sp, #36]	; 0x24
 804d8f4:	e767      	b.n	804d7c6 <_svfiprintf_r+0x4e>
 804d8f6:	fb0c 3202 	mla	r2, ip, r2, r3
 804d8fa:	460c      	mov	r4, r1
 804d8fc:	2001      	movs	r0, #1
 804d8fe:	e7a5      	b.n	804d84c <_svfiprintf_r+0xd4>
 804d900:	2300      	movs	r3, #0
 804d902:	3401      	adds	r4, #1
 804d904:	9305      	str	r3, [sp, #20]
 804d906:	4619      	mov	r1, r3
 804d908:	f04f 0c0a 	mov.w	ip, #10
 804d90c:	4620      	mov	r0, r4
 804d90e:	f810 2b01 	ldrb.w	r2, [r0], #1
 804d912:	3a30      	subs	r2, #48	; 0x30
 804d914:	2a09      	cmp	r2, #9
 804d916:	d903      	bls.n	804d920 <_svfiprintf_r+0x1a8>
 804d918:	2b00      	cmp	r3, #0
 804d91a:	d0c5      	beq.n	804d8a8 <_svfiprintf_r+0x130>
 804d91c:	9105      	str	r1, [sp, #20]
 804d91e:	e7c3      	b.n	804d8a8 <_svfiprintf_r+0x130>
 804d920:	fb0c 2101 	mla	r1, ip, r1, r2
 804d924:	4604      	mov	r4, r0
 804d926:	2301      	movs	r3, #1
 804d928:	e7f0      	b.n	804d90c <_svfiprintf_r+0x194>
 804d92a:	ab03      	add	r3, sp, #12
 804d92c:	9300      	str	r3, [sp, #0]
 804d92e:	462a      	mov	r2, r5
 804d930:	4b0f      	ldr	r3, [pc, #60]	; (804d970 <_svfiprintf_r+0x1f8>)
 804d932:	a904      	add	r1, sp, #16
 804d934:	4638      	mov	r0, r7
 804d936:	f3af 8000 	nop.w
 804d93a:	1c42      	adds	r2, r0, #1
 804d93c:	4606      	mov	r6, r0
 804d93e:	d1d6      	bne.n	804d8ee <_svfiprintf_r+0x176>
 804d940:	89ab      	ldrh	r3, [r5, #12]
 804d942:	065b      	lsls	r3, r3, #25
 804d944:	f53f af2c 	bmi.w	804d7a0 <_svfiprintf_r+0x28>
 804d948:	9809      	ldr	r0, [sp, #36]	; 0x24
 804d94a:	b01d      	add	sp, #116	; 0x74
 804d94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804d950:	ab03      	add	r3, sp, #12
 804d952:	9300      	str	r3, [sp, #0]
 804d954:	462a      	mov	r2, r5
 804d956:	4b06      	ldr	r3, [pc, #24]	; (804d970 <_svfiprintf_r+0x1f8>)
 804d958:	a904      	add	r1, sp, #16
 804d95a:	4638      	mov	r0, r7
 804d95c:	f000 f9d4 	bl	804dd08 <_printf_i>
 804d960:	e7eb      	b.n	804d93a <_svfiprintf_r+0x1c2>
 804d962:	bf00      	nop
 804d964:	080507d4 	.word	0x080507d4
 804d968:	080507de 	.word	0x080507de
 804d96c:	00000000 	.word	0x00000000
 804d970:	0804d6c1 	.word	0x0804d6c1
 804d974:	080507da 	.word	0x080507da

0804d978 <__sfputc_r>:
 804d978:	6893      	ldr	r3, [r2, #8]
 804d97a:	3b01      	subs	r3, #1
 804d97c:	2b00      	cmp	r3, #0
 804d97e:	b410      	push	{r4}
 804d980:	6093      	str	r3, [r2, #8]
 804d982:	da08      	bge.n	804d996 <__sfputc_r+0x1e>
 804d984:	6994      	ldr	r4, [r2, #24]
 804d986:	42a3      	cmp	r3, r4
 804d988:	db01      	blt.n	804d98e <__sfputc_r+0x16>
 804d98a:	290a      	cmp	r1, #10
 804d98c:	d103      	bne.n	804d996 <__sfputc_r+0x1e>
 804d98e:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d992:	f7ff bba9 	b.w	804d0e8 <__swbuf_r>
 804d996:	6813      	ldr	r3, [r2, #0]
 804d998:	1c58      	adds	r0, r3, #1
 804d99a:	6010      	str	r0, [r2, #0]
 804d99c:	7019      	strb	r1, [r3, #0]
 804d99e:	4608      	mov	r0, r1
 804d9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 804d9a4:	4770      	bx	lr

0804d9a6 <__sfputs_r>:
 804d9a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804d9a8:	4606      	mov	r6, r0
 804d9aa:	460f      	mov	r7, r1
 804d9ac:	4614      	mov	r4, r2
 804d9ae:	18d5      	adds	r5, r2, r3
 804d9b0:	42ac      	cmp	r4, r5
 804d9b2:	d101      	bne.n	804d9b8 <__sfputs_r+0x12>
 804d9b4:	2000      	movs	r0, #0
 804d9b6:	e007      	b.n	804d9c8 <__sfputs_r+0x22>
 804d9b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 804d9bc:	463a      	mov	r2, r7
 804d9be:	4630      	mov	r0, r6
 804d9c0:	f7ff ffda 	bl	804d978 <__sfputc_r>
 804d9c4:	1c43      	adds	r3, r0, #1
 804d9c6:	d1f3      	bne.n	804d9b0 <__sfputs_r+0xa>
 804d9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804d9cc <_vfiprintf_r>:
 804d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804d9d0:	460d      	mov	r5, r1
 804d9d2:	b09d      	sub	sp, #116	; 0x74
 804d9d4:	4614      	mov	r4, r2
 804d9d6:	4698      	mov	r8, r3
 804d9d8:	4606      	mov	r6, r0
 804d9da:	b118      	cbz	r0, 804d9e4 <_vfiprintf_r+0x18>
 804d9dc:	6983      	ldr	r3, [r0, #24]
 804d9de:	b90b      	cbnz	r3, 804d9e4 <_vfiprintf_r+0x18>
 804d9e0:	f7ff fd5c 	bl	804d49c <__sinit>
 804d9e4:	4b89      	ldr	r3, [pc, #548]	; (804dc0c <_vfiprintf_r+0x240>)
 804d9e6:	429d      	cmp	r5, r3
 804d9e8:	d11b      	bne.n	804da22 <_vfiprintf_r+0x56>
 804d9ea:	6875      	ldr	r5, [r6, #4]
 804d9ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804d9ee:	07d9      	lsls	r1, r3, #31
 804d9f0:	d405      	bmi.n	804d9fe <_vfiprintf_r+0x32>
 804d9f2:	89ab      	ldrh	r3, [r5, #12]
 804d9f4:	059a      	lsls	r2, r3, #22
 804d9f6:	d402      	bmi.n	804d9fe <_vfiprintf_r+0x32>
 804d9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804d9fa:	f7ff fded 	bl	804d5d8 <__retarget_lock_acquire_recursive>
 804d9fe:	89ab      	ldrh	r3, [r5, #12]
 804da00:	071b      	lsls	r3, r3, #28
 804da02:	d501      	bpl.n	804da08 <_vfiprintf_r+0x3c>
 804da04:	692b      	ldr	r3, [r5, #16]
 804da06:	b9eb      	cbnz	r3, 804da44 <_vfiprintf_r+0x78>
 804da08:	4629      	mov	r1, r5
 804da0a:	4630      	mov	r0, r6
 804da0c:	f7ff fbbe 	bl	804d18c <__swsetup_r>
 804da10:	b1c0      	cbz	r0, 804da44 <_vfiprintf_r+0x78>
 804da12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804da14:	07dc      	lsls	r4, r3, #31
 804da16:	d50e      	bpl.n	804da36 <_vfiprintf_r+0x6a>
 804da18:	f04f 30ff 	mov.w	r0, #4294967295
 804da1c:	b01d      	add	sp, #116	; 0x74
 804da1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804da22:	4b7b      	ldr	r3, [pc, #492]	; (804dc10 <_vfiprintf_r+0x244>)
 804da24:	429d      	cmp	r5, r3
 804da26:	d101      	bne.n	804da2c <_vfiprintf_r+0x60>
 804da28:	68b5      	ldr	r5, [r6, #8]
 804da2a:	e7df      	b.n	804d9ec <_vfiprintf_r+0x20>
 804da2c:	4b79      	ldr	r3, [pc, #484]	; (804dc14 <_vfiprintf_r+0x248>)
 804da2e:	429d      	cmp	r5, r3
 804da30:	bf08      	it	eq
 804da32:	68f5      	ldreq	r5, [r6, #12]
 804da34:	e7da      	b.n	804d9ec <_vfiprintf_r+0x20>
 804da36:	89ab      	ldrh	r3, [r5, #12]
 804da38:	0598      	lsls	r0, r3, #22
 804da3a:	d4ed      	bmi.n	804da18 <_vfiprintf_r+0x4c>
 804da3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804da3e:	f7ff fdcc 	bl	804d5da <__retarget_lock_release_recursive>
 804da42:	e7e9      	b.n	804da18 <_vfiprintf_r+0x4c>
 804da44:	2300      	movs	r3, #0
 804da46:	9309      	str	r3, [sp, #36]	; 0x24
 804da48:	2320      	movs	r3, #32
 804da4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804da4e:	f8cd 800c 	str.w	r8, [sp, #12]
 804da52:	2330      	movs	r3, #48	; 0x30
 804da54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 804dc18 <_vfiprintf_r+0x24c>
 804da58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804da5c:	f04f 0901 	mov.w	r9, #1
 804da60:	4623      	mov	r3, r4
 804da62:	469a      	mov	sl, r3
 804da64:	f813 2b01 	ldrb.w	r2, [r3], #1
 804da68:	b10a      	cbz	r2, 804da6e <_vfiprintf_r+0xa2>
 804da6a:	2a25      	cmp	r2, #37	; 0x25
 804da6c:	d1f9      	bne.n	804da62 <_vfiprintf_r+0x96>
 804da6e:	ebba 0b04 	subs.w	fp, sl, r4
 804da72:	d00b      	beq.n	804da8c <_vfiprintf_r+0xc0>
 804da74:	465b      	mov	r3, fp
 804da76:	4622      	mov	r2, r4
 804da78:	4629      	mov	r1, r5
 804da7a:	4630      	mov	r0, r6
 804da7c:	f7ff ff93 	bl	804d9a6 <__sfputs_r>
 804da80:	3001      	adds	r0, #1
 804da82:	f000 80aa 	beq.w	804dbda <_vfiprintf_r+0x20e>
 804da86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804da88:	445a      	add	r2, fp
 804da8a:	9209      	str	r2, [sp, #36]	; 0x24
 804da8c:	f89a 3000 	ldrb.w	r3, [sl]
 804da90:	2b00      	cmp	r3, #0
 804da92:	f000 80a2 	beq.w	804dbda <_vfiprintf_r+0x20e>
 804da96:	2300      	movs	r3, #0
 804da98:	f04f 32ff 	mov.w	r2, #4294967295
 804da9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804daa0:	f10a 0a01 	add.w	sl, sl, #1
 804daa4:	9304      	str	r3, [sp, #16]
 804daa6:	9307      	str	r3, [sp, #28]
 804daa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804daac:	931a      	str	r3, [sp, #104]	; 0x68
 804daae:	4654      	mov	r4, sl
 804dab0:	2205      	movs	r2, #5
 804dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 804dab6:	4858      	ldr	r0, [pc, #352]	; (804dc18 <_vfiprintf_r+0x24c>)
 804dab8:	f7f2 fb9a 	bl	80401f0 <memchr>
 804dabc:	9a04      	ldr	r2, [sp, #16]
 804dabe:	b9d8      	cbnz	r0, 804daf8 <_vfiprintf_r+0x12c>
 804dac0:	06d1      	lsls	r1, r2, #27
 804dac2:	bf44      	itt	mi
 804dac4:	2320      	movmi	r3, #32
 804dac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804daca:	0713      	lsls	r3, r2, #28
 804dacc:	bf44      	itt	mi
 804dace:	232b      	movmi	r3, #43	; 0x2b
 804dad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804dad4:	f89a 3000 	ldrb.w	r3, [sl]
 804dad8:	2b2a      	cmp	r3, #42	; 0x2a
 804dada:	d015      	beq.n	804db08 <_vfiprintf_r+0x13c>
 804dadc:	9a07      	ldr	r2, [sp, #28]
 804dade:	4654      	mov	r4, sl
 804dae0:	2000      	movs	r0, #0
 804dae2:	f04f 0c0a 	mov.w	ip, #10
 804dae6:	4621      	mov	r1, r4
 804dae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 804daec:	3b30      	subs	r3, #48	; 0x30
 804daee:	2b09      	cmp	r3, #9
 804daf0:	d94e      	bls.n	804db90 <_vfiprintf_r+0x1c4>
 804daf2:	b1b0      	cbz	r0, 804db22 <_vfiprintf_r+0x156>
 804daf4:	9207      	str	r2, [sp, #28]
 804daf6:	e014      	b.n	804db22 <_vfiprintf_r+0x156>
 804daf8:	eba0 0308 	sub.w	r3, r0, r8
 804dafc:	fa09 f303 	lsl.w	r3, r9, r3
 804db00:	4313      	orrs	r3, r2
 804db02:	9304      	str	r3, [sp, #16]
 804db04:	46a2      	mov	sl, r4
 804db06:	e7d2      	b.n	804daae <_vfiprintf_r+0xe2>
 804db08:	9b03      	ldr	r3, [sp, #12]
 804db0a:	1d19      	adds	r1, r3, #4
 804db0c:	681b      	ldr	r3, [r3, #0]
 804db0e:	9103      	str	r1, [sp, #12]
 804db10:	2b00      	cmp	r3, #0
 804db12:	bfbb      	ittet	lt
 804db14:	425b      	neglt	r3, r3
 804db16:	f042 0202 	orrlt.w	r2, r2, #2
 804db1a:	9307      	strge	r3, [sp, #28]
 804db1c:	9307      	strlt	r3, [sp, #28]
 804db1e:	bfb8      	it	lt
 804db20:	9204      	strlt	r2, [sp, #16]
 804db22:	7823      	ldrb	r3, [r4, #0]
 804db24:	2b2e      	cmp	r3, #46	; 0x2e
 804db26:	d10c      	bne.n	804db42 <_vfiprintf_r+0x176>
 804db28:	7863      	ldrb	r3, [r4, #1]
 804db2a:	2b2a      	cmp	r3, #42	; 0x2a
 804db2c:	d135      	bne.n	804db9a <_vfiprintf_r+0x1ce>
 804db2e:	9b03      	ldr	r3, [sp, #12]
 804db30:	1d1a      	adds	r2, r3, #4
 804db32:	681b      	ldr	r3, [r3, #0]
 804db34:	9203      	str	r2, [sp, #12]
 804db36:	2b00      	cmp	r3, #0
 804db38:	bfb8      	it	lt
 804db3a:	f04f 33ff 	movlt.w	r3, #4294967295
 804db3e:	3402      	adds	r4, #2
 804db40:	9305      	str	r3, [sp, #20]
 804db42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804dc28 <_vfiprintf_r+0x25c>
 804db46:	7821      	ldrb	r1, [r4, #0]
 804db48:	2203      	movs	r2, #3
 804db4a:	4650      	mov	r0, sl
 804db4c:	f7f2 fb50 	bl	80401f0 <memchr>
 804db50:	b140      	cbz	r0, 804db64 <_vfiprintf_r+0x198>
 804db52:	2340      	movs	r3, #64	; 0x40
 804db54:	eba0 000a 	sub.w	r0, r0, sl
 804db58:	fa03 f000 	lsl.w	r0, r3, r0
 804db5c:	9b04      	ldr	r3, [sp, #16]
 804db5e:	4303      	orrs	r3, r0
 804db60:	3401      	adds	r4, #1
 804db62:	9304      	str	r3, [sp, #16]
 804db64:	f814 1b01 	ldrb.w	r1, [r4], #1
 804db68:	482c      	ldr	r0, [pc, #176]	; (804dc1c <_vfiprintf_r+0x250>)
 804db6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804db6e:	2206      	movs	r2, #6
 804db70:	f7f2 fb3e 	bl	80401f0 <memchr>
 804db74:	2800      	cmp	r0, #0
 804db76:	d03f      	beq.n	804dbf8 <_vfiprintf_r+0x22c>
 804db78:	4b29      	ldr	r3, [pc, #164]	; (804dc20 <_vfiprintf_r+0x254>)
 804db7a:	bb1b      	cbnz	r3, 804dbc4 <_vfiprintf_r+0x1f8>
 804db7c:	9b03      	ldr	r3, [sp, #12]
 804db7e:	3307      	adds	r3, #7
 804db80:	f023 0307 	bic.w	r3, r3, #7
 804db84:	3308      	adds	r3, #8
 804db86:	9303      	str	r3, [sp, #12]
 804db88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804db8a:	443b      	add	r3, r7
 804db8c:	9309      	str	r3, [sp, #36]	; 0x24
 804db8e:	e767      	b.n	804da60 <_vfiprintf_r+0x94>
 804db90:	fb0c 3202 	mla	r2, ip, r2, r3
 804db94:	460c      	mov	r4, r1
 804db96:	2001      	movs	r0, #1
 804db98:	e7a5      	b.n	804dae6 <_vfiprintf_r+0x11a>
 804db9a:	2300      	movs	r3, #0
 804db9c:	3401      	adds	r4, #1
 804db9e:	9305      	str	r3, [sp, #20]
 804dba0:	4619      	mov	r1, r3
 804dba2:	f04f 0c0a 	mov.w	ip, #10
 804dba6:	4620      	mov	r0, r4
 804dba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 804dbac:	3a30      	subs	r2, #48	; 0x30
 804dbae:	2a09      	cmp	r2, #9
 804dbb0:	d903      	bls.n	804dbba <_vfiprintf_r+0x1ee>
 804dbb2:	2b00      	cmp	r3, #0
 804dbb4:	d0c5      	beq.n	804db42 <_vfiprintf_r+0x176>
 804dbb6:	9105      	str	r1, [sp, #20]
 804dbb8:	e7c3      	b.n	804db42 <_vfiprintf_r+0x176>
 804dbba:	fb0c 2101 	mla	r1, ip, r1, r2
 804dbbe:	4604      	mov	r4, r0
 804dbc0:	2301      	movs	r3, #1
 804dbc2:	e7f0      	b.n	804dba6 <_vfiprintf_r+0x1da>
 804dbc4:	ab03      	add	r3, sp, #12
 804dbc6:	9300      	str	r3, [sp, #0]
 804dbc8:	462a      	mov	r2, r5
 804dbca:	4b16      	ldr	r3, [pc, #88]	; (804dc24 <_vfiprintf_r+0x258>)
 804dbcc:	a904      	add	r1, sp, #16
 804dbce:	4630      	mov	r0, r6
 804dbd0:	f3af 8000 	nop.w
 804dbd4:	4607      	mov	r7, r0
 804dbd6:	1c78      	adds	r0, r7, #1
 804dbd8:	d1d6      	bne.n	804db88 <_vfiprintf_r+0x1bc>
 804dbda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804dbdc:	07d9      	lsls	r1, r3, #31
 804dbde:	d405      	bmi.n	804dbec <_vfiprintf_r+0x220>
 804dbe0:	89ab      	ldrh	r3, [r5, #12]
 804dbe2:	059a      	lsls	r2, r3, #22
 804dbe4:	d402      	bmi.n	804dbec <_vfiprintf_r+0x220>
 804dbe6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804dbe8:	f7ff fcf7 	bl	804d5da <__retarget_lock_release_recursive>
 804dbec:	89ab      	ldrh	r3, [r5, #12]
 804dbee:	065b      	lsls	r3, r3, #25
 804dbf0:	f53f af12 	bmi.w	804da18 <_vfiprintf_r+0x4c>
 804dbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 804dbf6:	e711      	b.n	804da1c <_vfiprintf_r+0x50>
 804dbf8:	ab03      	add	r3, sp, #12
 804dbfa:	9300      	str	r3, [sp, #0]
 804dbfc:	462a      	mov	r2, r5
 804dbfe:	4b09      	ldr	r3, [pc, #36]	; (804dc24 <_vfiprintf_r+0x258>)
 804dc00:	a904      	add	r1, sp, #16
 804dc02:	4630      	mov	r0, r6
 804dc04:	f000 f880 	bl	804dd08 <_printf_i>
 804dc08:	e7e4      	b.n	804dbd4 <_vfiprintf_r+0x208>
 804dc0a:	bf00      	nop
 804dc0c:	08050794 	.word	0x08050794
 804dc10:	080507b4 	.word	0x080507b4
 804dc14:	08050774 	.word	0x08050774
 804dc18:	080507d4 	.word	0x080507d4
 804dc1c:	080507de 	.word	0x080507de
 804dc20:	00000000 	.word	0x00000000
 804dc24:	0804d9a7 	.word	0x0804d9a7
 804dc28:	080507da 	.word	0x080507da

0804dc2c <_printf_common>:
 804dc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804dc30:	4616      	mov	r6, r2
 804dc32:	4699      	mov	r9, r3
 804dc34:	688a      	ldr	r2, [r1, #8]
 804dc36:	690b      	ldr	r3, [r1, #16]
 804dc38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804dc3c:	4293      	cmp	r3, r2
 804dc3e:	bfb8      	it	lt
 804dc40:	4613      	movlt	r3, r2
 804dc42:	6033      	str	r3, [r6, #0]
 804dc44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804dc48:	4607      	mov	r7, r0
 804dc4a:	460c      	mov	r4, r1
 804dc4c:	b10a      	cbz	r2, 804dc52 <_printf_common+0x26>
 804dc4e:	3301      	adds	r3, #1
 804dc50:	6033      	str	r3, [r6, #0]
 804dc52:	6823      	ldr	r3, [r4, #0]
 804dc54:	0699      	lsls	r1, r3, #26
 804dc56:	bf42      	ittt	mi
 804dc58:	6833      	ldrmi	r3, [r6, #0]
 804dc5a:	3302      	addmi	r3, #2
 804dc5c:	6033      	strmi	r3, [r6, #0]
 804dc5e:	6825      	ldr	r5, [r4, #0]
 804dc60:	f015 0506 	ands.w	r5, r5, #6
 804dc64:	d106      	bne.n	804dc74 <_printf_common+0x48>
 804dc66:	f104 0a19 	add.w	sl, r4, #25
 804dc6a:	68e3      	ldr	r3, [r4, #12]
 804dc6c:	6832      	ldr	r2, [r6, #0]
 804dc6e:	1a9b      	subs	r3, r3, r2
 804dc70:	42ab      	cmp	r3, r5
 804dc72:	dc26      	bgt.n	804dcc2 <_printf_common+0x96>
 804dc74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804dc78:	1e13      	subs	r3, r2, #0
 804dc7a:	6822      	ldr	r2, [r4, #0]
 804dc7c:	bf18      	it	ne
 804dc7e:	2301      	movne	r3, #1
 804dc80:	0692      	lsls	r2, r2, #26
 804dc82:	d42b      	bmi.n	804dcdc <_printf_common+0xb0>
 804dc84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804dc88:	4649      	mov	r1, r9
 804dc8a:	4638      	mov	r0, r7
 804dc8c:	47c0      	blx	r8
 804dc8e:	3001      	adds	r0, #1
 804dc90:	d01e      	beq.n	804dcd0 <_printf_common+0xa4>
 804dc92:	6823      	ldr	r3, [r4, #0]
 804dc94:	68e5      	ldr	r5, [r4, #12]
 804dc96:	6832      	ldr	r2, [r6, #0]
 804dc98:	f003 0306 	and.w	r3, r3, #6
 804dc9c:	2b04      	cmp	r3, #4
 804dc9e:	bf08      	it	eq
 804dca0:	1aad      	subeq	r5, r5, r2
 804dca2:	68a3      	ldr	r3, [r4, #8]
 804dca4:	6922      	ldr	r2, [r4, #16]
 804dca6:	bf0c      	ite	eq
 804dca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804dcac:	2500      	movne	r5, #0
 804dcae:	4293      	cmp	r3, r2
 804dcb0:	bfc4      	itt	gt
 804dcb2:	1a9b      	subgt	r3, r3, r2
 804dcb4:	18ed      	addgt	r5, r5, r3
 804dcb6:	2600      	movs	r6, #0
 804dcb8:	341a      	adds	r4, #26
 804dcba:	42b5      	cmp	r5, r6
 804dcbc:	d11a      	bne.n	804dcf4 <_printf_common+0xc8>
 804dcbe:	2000      	movs	r0, #0
 804dcc0:	e008      	b.n	804dcd4 <_printf_common+0xa8>
 804dcc2:	2301      	movs	r3, #1
 804dcc4:	4652      	mov	r2, sl
 804dcc6:	4649      	mov	r1, r9
 804dcc8:	4638      	mov	r0, r7
 804dcca:	47c0      	blx	r8
 804dccc:	3001      	adds	r0, #1
 804dcce:	d103      	bne.n	804dcd8 <_printf_common+0xac>
 804dcd0:	f04f 30ff 	mov.w	r0, #4294967295
 804dcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804dcd8:	3501      	adds	r5, #1
 804dcda:	e7c6      	b.n	804dc6a <_printf_common+0x3e>
 804dcdc:	18e1      	adds	r1, r4, r3
 804dcde:	1c5a      	adds	r2, r3, #1
 804dce0:	2030      	movs	r0, #48	; 0x30
 804dce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804dce6:	4422      	add	r2, r4
 804dce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804dcec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804dcf0:	3302      	adds	r3, #2
 804dcf2:	e7c7      	b.n	804dc84 <_printf_common+0x58>
 804dcf4:	2301      	movs	r3, #1
 804dcf6:	4622      	mov	r2, r4
 804dcf8:	4649      	mov	r1, r9
 804dcfa:	4638      	mov	r0, r7
 804dcfc:	47c0      	blx	r8
 804dcfe:	3001      	adds	r0, #1
 804dd00:	d0e6      	beq.n	804dcd0 <_printf_common+0xa4>
 804dd02:	3601      	adds	r6, #1
 804dd04:	e7d9      	b.n	804dcba <_printf_common+0x8e>
	...

0804dd08 <_printf_i>:
 804dd08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804dd0c:	7e0f      	ldrb	r7, [r1, #24]
 804dd0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804dd10:	2f78      	cmp	r7, #120	; 0x78
 804dd12:	4691      	mov	r9, r2
 804dd14:	4680      	mov	r8, r0
 804dd16:	460c      	mov	r4, r1
 804dd18:	469a      	mov	sl, r3
 804dd1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804dd1e:	d807      	bhi.n	804dd30 <_printf_i+0x28>
 804dd20:	2f62      	cmp	r7, #98	; 0x62
 804dd22:	d80a      	bhi.n	804dd3a <_printf_i+0x32>
 804dd24:	2f00      	cmp	r7, #0
 804dd26:	f000 80d8 	beq.w	804deda <_printf_i+0x1d2>
 804dd2a:	2f58      	cmp	r7, #88	; 0x58
 804dd2c:	f000 80a3 	beq.w	804de76 <_printf_i+0x16e>
 804dd30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804dd34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804dd38:	e03a      	b.n	804ddb0 <_printf_i+0xa8>
 804dd3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804dd3e:	2b15      	cmp	r3, #21
 804dd40:	d8f6      	bhi.n	804dd30 <_printf_i+0x28>
 804dd42:	a101      	add	r1, pc, #4	; (adr r1, 804dd48 <_printf_i+0x40>)
 804dd44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804dd48:	0804dda1 	.word	0x0804dda1
 804dd4c:	0804ddb5 	.word	0x0804ddb5
 804dd50:	0804dd31 	.word	0x0804dd31
 804dd54:	0804dd31 	.word	0x0804dd31
 804dd58:	0804dd31 	.word	0x0804dd31
 804dd5c:	0804dd31 	.word	0x0804dd31
 804dd60:	0804ddb5 	.word	0x0804ddb5
 804dd64:	0804dd31 	.word	0x0804dd31
 804dd68:	0804dd31 	.word	0x0804dd31
 804dd6c:	0804dd31 	.word	0x0804dd31
 804dd70:	0804dd31 	.word	0x0804dd31
 804dd74:	0804dec1 	.word	0x0804dec1
 804dd78:	0804dde5 	.word	0x0804dde5
 804dd7c:	0804dea3 	.word	0x0804dea3
 804dd80:	0804dd31 	.word	0x0804dd31
 804dd84:	0804dd31 	.word	0x0804dd31
 804dd88:	0804dee3 	.word	0x0804dee3
 804dd8c:	0804dd31 	.word	0x0804dd31
 804dd90:	0804dde5 	.word	0x0804dde5
 804dd94:	0804dd31 	.word	0x0804dd31
 804dd98:	0804dd31 	.word	0x0804dd31
 804dd9c:	0804deab 	.word	0x0804deab
 804dda0:	682b      	ldr	r3, [r5, #0]
 804dda2:	1d1a      	adds	r2, r3, #4
 804dda4:	681b      	ldr	r3, [r3, #0]
 804dda6:	602a      	str	r2, [r5, #0]
 804dda8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804ddac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804ddb0:	2301      	movs	r3, #1
 804ddb2:	e0a3      	b.n	804defc <_printf_i+0x1f4>
 804ddb4:	6820      	ldr	r0, [r4, #0]
 804ddb6:	6829      	ldr	r1, [r5, #0]
 804ddb8:	0606      	lsls	r6, r0, #24
 804ddba:	f101 0304 	add.w	r3, r1, #4
 804ddbe:	d50a      	bpl.n	804ddd6 <_printf_i+0xce>
 804ddc0:	680e      	ldr	r6, [r1, #0]
 804ddc2:	602b      	str	r3, [r5, #0]
 804ddc4:	2e00      	cmp	r6, #0
 804ddc6:	da03      	bge.n	804ddd0 <_printf_i+0xc8>
 804ddc8:	232d      	movs	r3, #45	; 0x2d
 804ddca:	4276      	negs	r6, r6
 804ddcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804ddd0:	485e      	ldr	r0, [pc, #376]	; (804df4c <_printf_i+0x244>)
 804ddd2:	230a      	movs	r3, #10
 804ddd4:	e019      	b.n	804de0a <_printf_i+0x102>
 804ddd6:	680e      	ldr	r6, [r1, #0]
 804ddd8:	602b      	str	r3, [r5, #0]
 804ddda:	f010 0f40 	tst.w	r0, #64	; 0x40
 804ddde:	bf18      	it	ne
 804dde0:	b236      	sxthne	r6, r6
 804dde2:	e7ef      	b.n	804ddc4 <_printf_i+0xbc>
 804dde4:	682b      	ldr	r3, [r5, #0]
 804dde6:	6820      	ldr	r0, [r4, #0]
 804dde8:	1d19      	adds	r1, r3, #4
 804ddea:	6029      	str	r1, [r5, #0]
 804ddec:	0601      	lsls	r1, r0, #24
 804ddee:	d501      	bpl.n	804ddf4 <_printf_i+0xec>
 804ddf0:	681e      	ldr	r6, [r3, #0]
 804ddf2:	e002      	b.n	804ddfa <_printf_i+0xf2>
 804ddf4:	0646      	lsls	r6, r0, #25
 804ddf6:	d5fb      	bpl.n	804ddf0 <_printf_i+0xe8>
 804ddf8:	881e      	ldrh	r6, [r3, #0]
 804ddfa:	4854      	ldr	r0, [pc, #336]	; (804df4c <_printf_i+0x244>)
 804ddfc:	2f6f      	cmp	r7, #111	; 0x6f
 804ddfe:	bf0c      	ite	eq
 804de00:	2308      	moveq	r3, #8
 804de02:	230a      	movne	r3, #10
 804de04:	2100      	movs	r1, #0
 804de06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804de0a:	6865      	ldr	r5, [r4, #4]
 804de0c:	60a5      	str	r5, [r4, #8]
 804de0e:	2d00      	cmp	r5, #0
 804de10:	bfa2      	ittt	ge
 804de12:	6821      	ldrge	r1, [r4, #0]
 804de14:	f021 0104 	bicge.w	r1, r1, #4
 804de18:	6021      	strge	r1, [r4, #0]
 804de1a:	b90e      	cbnz	r6, 804de20 <_printf_i+0x118>
 804de1c:	2d00      	cmp	r5, #0
 804de1e:	d04d      	beq.n	804debc <_printf_i+0x1b4>
 804de20:	4615      	mov	r5, r2
 804de22:	fbb6 f1f3 	udiv	r1, r6, r3
 804de26:	fb03 6711 	mls	r7, r3, r1, r6
 804de2a:	5dc7      	ldrb	r7, [r0, r7]
 804de2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804de30:	4637      	mov	r7, r6
 804de32:	42bb      	cmp	r3, r7
 804de34:	460e      	mov	r6, r1
 804de36:	d9f4      	bls.n	804de22 <_printf_i+0x11a>
 804de38:	2b08      	cmp	r3, #8
 804de3a:	d10b      	bne.n	804de54 <_printf_i+0x14c>
 804de3c:	6823      	ldr	r3, [r4, #0]
 804de3e:	07de      	lsls	r6, r3, #31
 804de40:	d508      	bpl.n	804de54 <_printf_i+0x14c>
 804de42:	6923      	ldr	r3, [r4, #16]
 804de44:	6861      	ldr	r1, [r4, #4]
 804de46:	4299      	cmp	r1, r3
 804de48:	bfde      	ittt	le
 804de4a:	2330      	movle	r3, #48	; 0x30
 804de4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 804de50:	f105 35ff 	addle.w	r5, r5, #4294967295
 804de54:	1b52      	subs	r2, r2, r5
 804de56:	6122      	str	r2, [r4, #16]
 804de58:	f8cd a000 	str.w	sl, [sp]
 804de5c:	464b      	mov	r3, r9
 804de5e:	aa03      	add	r2, sp, #12
 804de60:	4621      	mov	r1, r4
 804de62:	4640      	mov	r0, r8
 804de64:	f7ff fee2 	bl	804dc2c <_printf_common>
 804de68:	3001      	adds	r0, #1
 804de6a:	d14c      	bne.n	804df06 <_printf_i+0x1fe>
 804de6c:	f04f 30ff 	mov.w	r0, #4294967295
 804de70:	b004      	add	sp, #16
 804de72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804de76:	4835      	ldr	r0, [pc, #212]	; (804df4c <_printf_i+0x244>)
 804de78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804de7c:	6829      	ldr	r1, [r5, #0]
 804de7e:	6823      	ldr	r3, [r4, #0]
 804de80:	f851 6b04 	ldr.w	r6, [r1], #4
 804de84:	6029      	str	r1, [r5, #0]
 804de86:	061d      	lsls	r5, r3, #24
 804de88:	d514      	bpl.n	804deb4 <_printf_i+0x1ac>
 804de8a:	07df      	lsls	r7, r3, #31
 804de8c:	bf44      	itt	mi
 804de8e:	f043 0320 	orrmi.w	r3, r3, #32
 804de92:	6023      	strmi	r3, [r4, #0]
 804de94:	b91e      	cbnz	r6, 804de9e <_printf_i+0x196>
 804de96:	6823      	ldr	r3, [r4, #0]
 804de98:	f023 0320 	bic.w	r3, r3, #32
 804de9c:	6023      	str	r3, [r4, #0]
 804de9e:	2310      	movs	r3, #16
 804dea0:	e7b0      	b.n	804de04 <_printf_i+0xfc>
 804dea2:	6823      	ldr	r3, [r4, #0]
 804dea4:	f043 0320 	orr.w	r3, r3, #32
 804dea8:	6023      	str	r3, [r4, #0]
 804deaa:	2378      	movs	r3, #120	; 0x78
 804deac:	4828      	ldr	r0, [pc, #160]	; (804df50 <_printf_i+0x248>)
 804deae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804deb2:	e7e3      	b.n	804de7c <_printf_i+0x174>
 804deb4:	0659      	lsls	r1, r3, #25
 804deb6:	bf48      	it	mi
 804deb8:	b2b6      	uxthmi	r6, r6
 804deba:	e7e6      	b.n	804de8a <_printf_i+0x182>
 804debc:	4615      	mov	r5, r2
 804debe:	e7bb      	b.n	804de38 <_printf_i+0x130>
 804dec0:	682b      	ldr	r3, [r5, #0]
 804dec2:	6826      	ldr	r6, [r4, #0]
 804dec4:	6961      	ldr	r1, [r4, #20]
 804dec6:	1d18      	adds	r0, r3, #4
 804dec8:	6028      	str	r0, [r5, #0]
 804deca:	0635      	lsls	r5, r6, #24
 804decc:	681b      	ldr	r3, [r3, #0]
 804dece:	d501      	bpl.n	804ded4 <_printf_i+0x1cc>
 804ded0:	6019      	str	r1, [r3, #0]
 804ded2:	e002      	b.n	804deda <_printf_i+0x1d2>
 804ded4:	0670      	lsls	r0, r6, #25
 804ded6:	d5fb      	bpl.n	804ded0 <_printf_i+0x1c8>
 804ded8:	8019      	strh	r1, [r3, #0]
 804deda:	2300      	movs	r3, #0
 804dedc:	6123      	str	r3, [r4, #16]
 804dede:	4615      	mov	r5, r2
 804dee0:	e7ba      	b.n	804de58 <_printf_i+0x150>
 804dee2:	682b      	ldr	r3, [r5, #0]
 804dee4:	1d1a      	adds	r2, r3, #4
 804dee6:	602a      	str	r2, [r5, #0]
 804dee8:	681d      	ldr	r5, [r3, #0]
 804deea:	6862      	ldr	r2, [r4, #4]
 804deec:	2100      	movs	r1, #0
 804deee:	4628      	mov	r0, r5
 804def0:	f7f2 f97e 	bl	80401f0 <memchr>
 804def4:	b108      	cbz	r0, 804defa <_printf_i+0x1f2>
 804def6:	1b40      	subs	r0, r0, r5
 804def8:	6060      	str	r0, [r4, #4]
 804defa:	6863      	ldr	r3, [r4, #4]
 804defc:	6123      	str	r3, [r4, #16]
 804defe:	2300      	movs	r3, #0
 804df00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804df04:	e7a8      	b.n	804de58 <_printf_i+0x150>
 804df06:	6923      	ldr	r3, [r4, #16]
 804df08:	462a      	mov	r2, r5
 804df0a:	4649      	mov	r1, r9
 804df0c:	4640      	mov	r0, r8
 804df0e:	47d0      	blx	sl
 804df10:	3001      	adds	r0, #1
 804df12:	d0ab      	beq.n	804de6c <_printf_i+0x164>
 804df14:	6823      	ldr	r3, [r4, #0]
 804df16:	079b      	lsls	r3, r3, #30
 804df18:	d413      	bmi.n	804df42 <_printf_i+0x23a>
 804df1a:	68e0      	ldr	r0, [r4, #12]
 804df1c:	9b03      	ldr	r3, [sp, #12]
 804df1e:	4298      	cmp	r0, r3
 804df20:	bfb8      	it	lt
 804df22:	4618      	movlt	r0, r3
 804df24:	e7a4      	b.n	804de70 <_printf_i+0x168>
 804df26:	2301      	movs	r3, #1
 804df28:	4632      	mov	r2, r6
 804df2a:	4649      	mov	r1, r9
 804df2c:	4640      	mov	r0, r8
 804df2e:	47d0      	blx	sl
 804df30:	3001      	adds	r0, #1
 804df32:	d09b      	beq.n	804de6c <_printf_i+0x164>
 804df34:	3501      	adds	r5, #1
 804df36:	68e3      	ldr	r3, [r4, #12]
 804df38:	9903      	ldr	r1, [sp, #12]
 804df3a:	1a5b      	subs	r3, r3, r1
 804df3c:	42ab      	cmp	r3, r5
 804df3e:	dcf2      	bgt.n	804df26 <_printf_i+0x21e>
 804df40:	e7eb      	b.n	804df1a <_printf_i+0x212>
 804df42:	2500      	movs	r5, #0
 804df44:	f104 0619 	add.w	r6, r4, #25
 804df48:	e7f5      	b.n	804df36 <_printf_i+0x22e>
 804df4a:	bf00      	nop
 804df4c:	080507e5 	.word	0x080507e5
 804df50:	080507f6 	.word	0x080507f6

0804df54 <__sread>:
 804df54:	b510      	push	{r4, lr}
 804df56:	460c      	mov	r4, r1
 804df58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804df5c:	f000 f8ec 	bl	804e138 <_read_r>
 804df60:	2800      	cmp	r0, #0
 804df62:	bfab      	itete	ge
 804df64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804df66:	89a3      	ldrhlt	r3, [r4, #12]
 804df68:	181b      	addge	r3, r3, r0
 804df6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804df6e:	bfac      	ite	ge
 804df70:	6563      	strge	r3, [r4, #84]	; 0x54
 804df72:	81a3      	strhlt	r3, [r4, #12]
 804df74:	bd10      	pop	{r4, pc}

0804df76 <__swrite>:
 804df76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804df7a:	461f      	mov	r7, r3
 804df7c:	898b      	ldrh	r3, [r1, #12]
 804df7e:	05db      	lsls	r3, r3, #23
 804df80:	4605      	mov	r5, r0
 804df82:	460c      	mov	r4, r1
 804df84:	4616      	mov	r6, r2
 804df86:	d505      	bpl.n	804df94 <__swrite+0x1e>
 804df88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804df8c:	2302      	movs	r3, #2
 804df8e:	2200      	movs	r2, #0
 804df90:	f000 f868 	bl	804e064 <_lseek_r>
 804df94:	89a3      	ldrh	r3, [r4, #12]
 804df96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804df9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804df9e:	81a3      	strh	r3, [r4, #12]
 804dfa0:	4632      	mov	r2, r6
 804dfa2:	463b      	mov	r3, r7
 804dfa4:	4628      	mov	r0, r5
 804dfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804dfaa:	f000 b817 	b.w	804dfdc <_write_r>

0804dfae <__sseek>:
 804dfae:	b510      	push	{r4, lr}
 804dfb0:	460c      	mov	r4, r1
 804dfb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dfb6:	f000 f855 	bl	804e064 <_lseek_r>
 804dfba:	1c43      	adds	r3, r0, #1
 804dfbc:	89a3      	ldrh	r3, [r4, #12]
 804dfbe:	bf15      	itete	ne
 804dfc0:	6560      	strne	r0, [r4, #84]	; 0x54
 804dfc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804dfc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804dfca:	81a3      	strheq	r3, [r4, #12]
 804dfcc:	bf18      	it	ne
 804dfce:	81a3      	strhne	r3, [r4, #12]
 804dfd0:	bd10      	pop	{r4, pc}

0804dfd2 <__sclose>:
 804dfd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804dfd6:	f000 b813 	b.w	804e000 <_close_r>
	...

0804dfdc <_write_r>:
 804dfdc:	b538      	push	{r3, r4, r5, lr}
 804dfde:	4d07      	ldr	r5, [pc, #28]	; (804dffc <_write_r+0x20>)
 804dfe0:	4604      	mov	r4, r0
 804dfe2:	4608      	mov	r0, r1
 804dfe4:	4611      	mov	r1, r2
 804dfe6:	2200      	movs	r2, #0
 804dfe8:	602a      	str	r2, [r5, #0]
 804dfea:	461a      	mov	r2, r3
 804dfec:	f7f3 fe97 	bl	8041d1e <_write>
 804dff0:	1c43      	adds	r3, r0, #1
 804dff2:	d102      	bne.n	804dffa <_write_r+0x1e>
 804dff4:	682b      	ldr	r3, [r5, #0]
 804dff6:	b103      	cbz	r3, 804dffa <_write_r+0x1e>
 804dff8:	6023      	str	r3, [r4, #0]
 804dffa:	bd38      	pop	{r3, r4, r5, pc}
 804dffc:	2000116c 	.word	0x2000116c

0804e000 <_close_r>:
 804e000:	b538      	push	{r3, r4, r5, lr}
 804e002:	4d06      	ldr	r5, [pc, #24]	; (804e01c <_close_r+0x1c>)
 804e004:	2300      	movs	r3, #0
 804e006:	4604      	mov	r4, r0
 804e008:	4608      	mov	r0, r1
 804e00a:	602b      	str	r3, [r5, #0]
 804e00c:	f7f3 fea3 	bl	8041d56 <_close>
 804e010:	1c43      	adds	r3, r0, #1
 804e012:	d102      	bne.n	804e01a <_close_r+0x1a>
 804e014:	682b      	ldr	r3, [r5, #0]
 804e016:	b103      	cbz	r3, 804e01a <_close_r+0x1a>
 804e018:	6023      	str	r3, [r4, #0]
 804e01a:	bd38      	pop	{r3, r4, r5, pc}
 804e01c:	2000116c 	.word	0x2000116c

0804e020 <_fstat_r>:
 804e020:	b538      	push	{r3, r4, r5, lr}
 804e022:	4d07      	ldr	r5, [pc, #28]	; (804e040 <_fstat_r+0x20>)
 804e024:	2300      	movs	r3, #0
 804e026:	4604      	mov	r4, r0
 804e028:	4608      	mov	r0, r1
 804e02a:	4611      	mov	r1, r2
 804e02c:	602b      	str	r3, [r5, #0]
 804e02e:	f7f3 fe9e 	bl	8041d6e <_fstat>
 804e032:	1c43      	adds	r3, r0, #1
 804e034:	d102      	bne.n	804e03c <_fstat_r+0x1c>
 804e036:	682b      	ldr	r3, [r5, #0]
 804e038:	b103      	cbz	r3, 804e03c <_fstat_r+0x1c>
 804e03a:	6023      	str	r3, [r4, #0]
 804e03c:	bd38      	pop	{r3, r4, r5, pc}
 804e03e:	bf00      	nop
 804e040:	2000116c 	.word	0x2000116c

0804e044 <_isatty_r>:
 804e044:	b538      	push	{r3, r4, r5, lr}
 804e046:	4d06      	ldr	r5, [pc, #24]	; (804e060 <_isatty_r+0x1c>)
 804e048:	2300      	movs	r3, #0
 804e04a:	4604      	mov	r4, r0
 804e04c:	4608      	mov	r0, r1
 804e04e:	602b      	str	r3, [r5, #0]
 804e050:	f7f3 fe9d 	bl	8041d8e <_isatty>
 804e054:	1c43      	adds	r3, r0, #1
 804e056:	d102      	bne.n	804e05e <_isatty_r+0x1a>
 804e058:	682b      	ldr	r3, [r5, #0]
 804e05a:	b103      	cbz	r3, 804e05e <_isatty_r+0x1a>
 804e05c:	6023      	str	r3, [r4, #0]
 804e05e:	bd38      	pop	{r3, r4, r5, pc}
 804e060:	2000116c 	.word	0x2000116c

0804e064 <_lseek_r>:
 804e064:	b538      	push	{r3, r4, r5, lr}
 804e066:	4d07      	ldr	r5, [pc, #28]	; (804e084 <_lseek_r+0x20>)
 804e068:	4604      	mov	r4, r0
 804e06a:	4608      	mov	r0, r1
 804e06c:	4611      	mov	r1, r2
 804e06e:	2200      	movs	r2, #0
 804e070:	602a      	str	r2, [r5, #0]
 804e072:	461a      	mov	r2, r3
 804e074:	f7f3 fe96 	bl	8041da4 <_lseek>
 804e078:	1c43      	adds	r3, r0, #1
 804e07a:	d102      	bne.n	804e082 <_lseek_r+0x1e>
 804e07c:	682b      	ldr	r3, [r5, #0]
 804e07e:	b103      	cbz	r3, 804e082 <_lseek_r+0x1e>
 804e080:	6023      	str	r3, [r4, #0]
 804e082:	bd38      	pop	{r3, r4, r5, pc}
 804e084:	2000116c 	.word	0x2000116c

0804e088 <memcpy>:
 804e088:	440a      	add	r2, r1
 804e08a:	4291      	cmp	r1, r2
 804e08c:	f100 33ff 	add.w	r3, r0, #4294967295
 804e090:	d100      	bne.n	804e094 <memcpy+0xc>
 804e092:	4770      	bx	lr
 804e094:	b510      	push	{r4, lr}
 804e096:	f811 4b01 	ldrb.w	r4, [r1], #1
 804e09a:	f803 4f01 	strb.w	r4, [r3, #1]!
 804e09e:	4291      	cmp	r1, r2
 804e0a0:	d1f9      	bne.n	804e096 <memcpy+0xe>
 804e0a2:	bd10      	pop	{r4, pc}

0804e0a4 <memmove>:
 804e0a4:	4288      	cmp	r0, r1
 804e0a6:	b510      	push	{r4, lr}
 804e0a8:	eb01 0402 	add.w	r4, r1, r2
 804e0ac:	d902      	bls.n	804e0b4 <memmove+0x10>
 804e0ae:	4284      	cmp	r4, r0
 804e0b0:	4623      	mov	r3, r4
 804e0b2:	d807      	bhi.n	804e0c4 <memmove+0x20>
 804e0b4:	1e43      	subs	r3, r0, #1
 804e0b6:	42a1      	cmp	r1, r4
 804e0b8:	d008      	beq.n	804e0cc <memmove+0x28>
 804e0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 804e0be:	f803 2f01 	strb.w	r2, [r3, #1]!
 804e0c2:	e7f8      	b.n	804e0b6 <memmove+0x12>
 804e0c4:	4402      	add	r2, r0
 804e0c6:	4601      	mov	r1, r0
 804e0c8:	428a      	cmp	r2, r1
 804e0ca:	d100      	bne.n	804e0ce <memmove+0x2a>
 804e0cc:	bd10      	pop	{r4, pc}
 804e0ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 804e0d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 804e0d6:	e7f7      	b.n	804e0c8 <memmove+0x24>

0804e0d8 <_realloc_r>:
 804e0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804e0dc:	4680      	mov	r8, r0
 804e0de:	4614      	mov	r4, r2
 804e0e0:	460e      	mov	r6, r1
 804e0e2:	b921      	cbnz	r1, 804e0ee <_realloc_r+0x16>
 804e0e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804e0e8:	4611      	mov	r1, r2
 804e0ea:	f7fe becb 	b.w	804ce84 <_malloc_r>
 804e0ee:	b92a      	cbnz	r2, 804e0fc <_realloc_r+0x24>
 804e0f0:	f7fe fe5c 	bl	804cdac <_free_r>
 804e0f4:	4625      	mov	r5, r4
 804e0f6:	4628      	mov	r0, r5
 804e0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804e0fc:	f000 f82e 	bl	804e15c <_malloc_usable_size_r>
 804e100:	4284      	cmp	r4, r0
 804e102:	4607      	mov	r7, r0
 804e104:	d802      	bhi.n	804e10c <_realloc_r+0x34>
 804e106:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 804e10a:	d812      	bhi.n	804e132 <_realloc_r+0x5a>
 804e10c:	4621      	mov	r1, r4
 804e10e:	4640      	mov	r0, r8
 804e110:	f7fe feb8 	bl	804ce84 <_malloc_r>
 804e114:	4605      	mov	r5, r0
 804e116:	2800      	cmp	r0, #0
 804e118:	d0ed      	beq.n	804e0f6 <_realloc_r+0x1e>
 804e11a:	42bc      	cmp	r4, r7
 804e11c:	4622      	mov	r2, r4
 804e11e:	4631      	mov	r1, r6
 804e120:	bf28      	it	cs
 804e122:	463a      	movcs	r2, r7
 804e124:	f7ff ffb0 	bl	804e088 <memcpy>
 804e128:	4631      	mov	r1, r6
 804e12a:	4640      	mov	r0, r8
 804e12c:	f7fe fe3e 	bl	804cdac <_free_r>
 804e130:	e7e1      	b.n	804e0f6 <_realloc_r+0x1e>
 804e132:	4635      	mov	r5, r6
 804e134:	e7df      	b.n	804e0f6 <_realloc_r+0x1e>
	...

0804e138 <_read_r>:
 804e138:	b538      	push	{r3, r4, r5, lr}
 804e13a:	4d07      	ldr	r5, [pc, #28]	; (804e158 <_read_r+0x20>)
 804e13c:	4604      	mov	r4, r0
 804e13e:	4608      	mov	r0, r1
 804e140:	4611      	mov	r1, r2
 804e142:	2200      	movs	r2, #0
 804e144:	602a      	str	r2, [r5, #0]
 804e146:	461a      	mov	r2, r3
 804e148:	f7f3 fdcc 	bl	8041ce4 <_read>
 804e14c:	1c43      	adds	r3, r0, #1
 804e14e:	d102      	bne.n	804e156 <_read_r+0x1e>
 804e150:	682b      	ldr	r3, [r5, #0]
 804e152:	b103      	cbz	r3, 804e156 <_read_r+0x1e>
 804e154:	6023      	str	r3, [r4, #0]
 804e156:	bd38      	pop	{r3, r4, r5, pc}
 804e158:	2000116c 	.word	0x2000116c

0804e15c <_malloc_usable_size_r>:
 804e15c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804e160:	1f18      	subs	r0, r3, #4
 804e162:	2b00      	cmp	r3, #0
 804e164:	bfbc      	itt	lt
 804e166:	580b      	ldrlt	r3, [r1, r0]
 804e168:	18c0      	addlt	r0, r0, r3
 804e16a:	4770      	bx	lr

0804e16c <_init>:
 804e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e16e:	bf00      	nop
 804e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e172:	bc08      	pop	{r3}
 804e174:	469e      	mov	lr, r3
 804e176:	4770      	bx	lr

0804e178 <_fini>:
 804e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e17a:	bf00      	nop
 804e17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e17e:	bc08      	pop	{r3}
 804e180:	469e      	mov	lr, r3
 804e182:	4770      	bx	lr
