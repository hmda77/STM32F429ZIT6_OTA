
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e974  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002718  0802eb24  0802eb24  0001eb24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803123c  0803123c  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  0803123c  0803123c  0002123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031244  08031244  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031244  08031244  00021244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031248  08031248  00021248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0803124c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          000010f4  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011d8  200011d8  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c789  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f39  00000000  00000000  0005c89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002340  00000000  00000000  000627d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020f0  00000000  00000000  00064b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c83a  00000000  00000000  00066c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cf8d  00000000  00000000  00093442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0ca9  00000000  00000000  000c03cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b1078  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f0c  00000000  00000000  001b10c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e4 	.word	0x200000e4
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802eb0c 	.word	0x0802eb0c

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e8 	.word	0x200000e8
 80201ec:	0802eb0c 	.word	0x0802eb0c

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f003 f832 	bl	8023600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f8d6 	bl	802074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb70 	bl	8020c84 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f93e 	bl	8020824 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f950 	bl	802084c <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fb1a 	bl	8020be4 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f97e 	bl	80208b0 <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f9bc 	bl	8020930 <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 fa3a 	bl	8020a30 <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa6e 	bl	8020a9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fae6 	bl	8020b90 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00c fd72 	bl	802d0ac <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fab8 	bl	8020b3c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205cc:	2300      	movs	r3, #0
 80205ce:	461a      	mov	r2, r3
 80205d0:	2302      	movs	r3, #2
 80205d2:	4951      	ldr	r1, [pc, #324]	; (8020718 <main+0x184>)
 80205d4:	4851      	ldr	r0, [pc, #324]	; (802071c <main+0x188>)
 80205d6:	f00d fa37 	bl	802da48 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205da:	2300      	movs	r3, #0
 80205dc:	2202      	movs	r2, #2
 80205de:	4619      	mov	r1, r3
 80205e0:	484f      	ldr	r0, [pc, #316]	; (8020720 <main+0x18c>)
 80205e2:	f00d f993 	bl	802d90c <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205e6:	f002 f985 	bl	80228f4 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205ee:	2001      	movs	r0, #1
 80205f0:	f002 fa02 	bl	80229f8 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205f4:	2001      	movs	r0, #1
 80205f6:	f002 fa63 	bl	8022ac0 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80205fa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80205fe:	f002 fb0d 	bl	8022c1c <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 8020602:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020606:	2001      	movs	r0, #1
 8020608:	f002 faa8 	bl	8022b5c <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 802060c:	2100      	movs	r1, #0
 802060e:	2001      	movs	r0, #1
 8020610:	f002 fa66 	bl	8022ae0 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8020614:	4943      	ldr	r1, [pc, #268]	; (8020724 <main+0x190>)
 8020616:	2000      	movs	r0, #0
 8020618:	f002 f9ee 	bl	80229f8 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 802061c:	2000      	movs	r0, #0
 802061e:	f002 fa4f 	bl	8022ac0 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 8020622:	f002 fc25 	bl	8022e70 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020626:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802062a:	f002 faf7 	bl	8022c1c <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 802062e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020632:	f002 fabf 	bl	8022bb4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020636:	483c      	ldr	r0, [pc, #240]	; (8020728 <main+0x194>)
 8020638:	f002 faa4 	bl	8022b84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 802063c:	483b      	ldr	r0, [pc, #236]	; (802072c <main+0x198>)
 802063e:	f002 fad3 	bl	8022be8 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 8020642:	2301      	movs	r3, #1
 8020644:	4a35      	ldr	r2, [pc, #212]	; (802071c <main+0x188>)
 8020646:	2100      	movs	r1, #0
 8020648:	2000      	movs	r0, #0
 802064a:	f002 fb53 	bl	8022cf4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 802064e:	f04f 30ff 	mov.w	r0, #4294967295
 8020652:	f002 fa97 	bl	8022b84 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"MUST'V BEEN THE", CENTER_MODE);
 8020656:	f002 f9c3 	bl	80229e0 <BSP_LCD_GetYSize>
 802065a:	4603      	mov	r3, r0
 802065c:	085b      	lsrs	r3, r3, #1
 802065e:	b29b      	uxth	r3, r3
 8020660:	3b1b      	subs	r3, #27
 8020662:	b299      	uxth	r1, r3
 8020664:	2301      	movs	r3, #1
 8020666:	4a32      	ldr	r2, [pc, #200]	; (8020730 <main+0x19c>)
 8020668:	2000      	movs	r0, #0
 802066a:	f002 fb43 	bl	8022cf4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"DEADLY", CENTER_MODE);
 802066e:	f002 f9b7 	bl	80229e0 <BSP_LCD_GetYSize>
 8020672:	4603      	mov	r3, r0
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	b29b      	uxth	r3, r3
 8020678:	3b0c      	subs	r3, #12
 802067a:	b299      	uxth	r1, r3
 802067c:	2301      	movs	r3, #1
 802067e:	4a2d      	ldr	r2, [pc, #180]	; (8020734 <main+0x1a0>)
 8020680:	2000      	movs	r0, #0
 8020682:	f002 fb37 	bl	8022cf4 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"KISS", CENTER_MODE);
 8020686:	f002 f9ab 	bl	80229e0 <BSP_LCD_GetYSize>
 802068a:	4603      	mov	r3, r0
 802068c:	085b      	lsrs	r3, r3, #1
 802068e:	b29b      	uxth	r3, r3
 8020690:	3303      	adds	r3, #3
 8020692:	b299      	uxth	r1, r3
 8020694:	2301      	movs	r3, #1
 8020696:	4a28      	ldr	r2, [pc, #160]	; (8020738 <main+0x1a4>)
 8020698:	2000      	movs	r0, #0
 802069a:	f002 fb2b 	bl	8022cf4 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 802069e:	f00c fd2b 	bl	802d0f8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80206a2:	2201      	movs	r2, #1
 80206a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206a8:	4824      	ldr	r0, [pc, #144]	; (802073c <main+0x1a8>)
 80206aa:	f004 fc25 	bl	8024ef8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80206ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80206b2:	f002 ffe7 	bl	8023684 <HAL_Delay>
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80206b6:	2200      	movs	r2, #0
 80206b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206bc:	481f      	ldr	r0, [pc, #124]	; (802073c <main+0x1a8>)
 80206be:	f004 fc1b 	bl	8024ef8 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80206c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80206c6:	f002 ffdd 	bl	8023684 <HAL_Delay>
    if (ota_update_request){
 80206ca:	4b1d      	ldr	r3, [pc, #116]	; (8020740 <main+0x1ac>)
 80206cc:	781b      	ldrb	r3, [r3, #0]
 80206ce:	2b00      	cmp	r3, #0
 80206d0:	d0e5      	beq.n	802069e <main+0x10a>
    	printf("OTA Update Requested...\r\n");
 80206d2:	481c      	ldr	r0, [pc, #112]	; (8020744 <main+0x1b0>)
 80206d4:	f00d f9a0 	bl	802da18 <puts>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80206d8:	2201      	movs	r2, #1
 80206da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206de:	4817      	ldr	r0, [pc, #92]	; (802073c <main+0x1a8>)
 80206e0:	f004 fc0a 	bl	8024ef8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80206e4:	2201      	movs	r2, #1
 80206e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80206ea:	4814      	ldr	r0, [pc, #80]	; (802073c <main+0x1a8>)
 80206ec:	f004 fc04 	bl	8024ef8 <HAL_GPIO_WritePin>
    	go_to_ota_app(&huart5);
 80206f0:	4815      	ldr	r0, [pc, #84]	; (8020748 <main+0x1b4>)
 80206f2:	f000 fc15 	bl	8020f20 <go_to_ota_app>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80206f6:	2200      	movs	r2, #0
 80206f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80206fc:	480f      	ldr	r0, [pc, #60]	; (802073c <main+0x1a8>)
 80206fe:	f004 fbfb 	bl	8024ef8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8020702:	2200      	movs	r2, #0
 8020704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020708:	480c      	ldr	r0, [pc, #48]	; (802073c <main+0x1a8>)
 802070a:	f004 fbf5 	bl	8024ef8 <HAL_GPIO_WritePin>
    	ota_update_request = false;
 802070e:	4b0c      	ldr	r3, [pc, #48]	; (8020740 <main+0x1ac>)
 8020710:	2200      	movs	r2, #0
 8020712:	701a      	strb	r2, [r3, #0]
    MX_USB_HOST_Process();
 8020714:	e7c3      	b.n	802069e <main+0x10a>
 8020716:	bf00      	nop
 8020718:	0802eb24 	.word	0x0802eb24
 802071c:	200003a0 	.word	0x200003a0
 8020720:	0802eb44 	.word	0x0802eb44
 8020724:	d0130000 	.word	0xd0130000
 8020728:	ffff0000 	.word	0xffff0000
 802072c:	2000004c 	.word	0x2000004c
 8020730:	0802eb64 	.word	0x0802eb64
 8020734:	0802eb74 	.word	0x0802eb74
 8020738:	0802eb7c 	.word	0x0802eb7c
 802073c:	40021800 	.word	0x40021800
 8020740:	20000404 	.word	0x20000404
 8020744:	0802eb84 	.word	0x0802eb84
 8020748:	200002e4 	.word	0x200002e4

0802074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802074c:	b580      	push	{r7, lr}
 802074e:	b094      	sub	sp, #80	; 0x50
 8020750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020752:	f107 0320 	add.w	r3, r7, #32
 8020756:	2230      	movs	r2, #48	; 0x30
 8020758:	2100      	movs	r1, #0
 802075a:	4618      	mov	r0, r3
 802075c:	f00c ffee 	bl	802d73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020760:	f107 030c 	add.w	r3, r7, #12
 8020764:	2200      	movs	r2, #0
 8020766:	601a      	str	r2, [r3, #0]
 8020768:	605a      	str	r2, [r3, #4]
 802076a:	609a      	str	r2, [r3, #8]
 802076c:	60da      	str	r2, [r3, #12]
 802076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020770:	2300      	movs	r3, #0
 8020772:	60bb      	str	r3, [r7, #8]
 8020774:	4b29      	ldr	r3, [pc, #164]	; (802081c <SystemClock_Config+0xd0>)
 8020776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020778:	4a28      	ldr	r2, [pc, #160]	; (802081c <SystemClock_Config+0xd0>)
 802077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802077e:	6413      	str	r3, [r2, #64]	; 0x40
 8020780:	4b26      	ldr	r3, [pc, #152]	; (802081c <SystemClock_Config+0xd0>)
 8020782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020788:	60bb      	str	r3, [r7, #8]
 802078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 802078c:	2300      	movs	r3, #0
 802078e:	607b      	str	r3, [r7, #4]
 8020790:	4b23      	ldr	r3, [pc, #140]	; (8020820 <SystemClock_Config+0xd4>)
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020798:	4a21      	ldr	r2, [pc, #132]	; (8020820 <SystemClock_Config+0xd4>)
 802079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802079e:	6013      	str	r3, [r2, #0]
 80207a0:	4b1f      	ldr	r3, [pc, #124]	; (8020820 <SystemClock_Config+0xd4>)
 80207a2:	681b      	ldr	r3, [r3, #0]
 80207a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80207a8:	607b      	str	r3, [r7, #4]
 80207aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80207ac:	2301      	movs	r3, #1
 80207ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80207b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80207b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80207b6:	2302      	movs	r3, #2
 80207b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80207ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80207be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80207c0:	2310      	movs	r3, #16
 80207c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80207c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80207c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80207ca:	2302      	movs	r3, #2
 80207cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80207ce:	2307      	movs	r3, #7
 80207d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80207d2:	f107 0320 	add.w	r3, r7, #32
 80207d6:	4618      	mov	r0, r3
 80207d8:	f006 fd9a 	bl	8027310 <HAL_RCC_OscConfig>
 80207dc:	4603      	mov	r3, r0
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d001      	beq.n	80207e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80207e2:	f000 fb97 	bl	8020f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80207e6:	230f      	movs	r3, #15
 80207e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80207ea:	2302      	movs	r3, #2
 80207ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80207ee:	2300      	movs	r3, #0
 80207f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80207f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80207f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80207f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80207fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80207fe:	f107 030c 	add.w	r3, r7, #12
 8020802:	2102      	movs	r1, #2
 8020804:	4618      	mov	r0, r3
 8020806:	f006 fffb 	bl	8027800 <HAL_RCC_ClockConfig>
 802080a:	4603      	mov	r3, r0
 802080c:	2b00      	cmp	r3, #0
 802080e:	d001      	beq.n	8020814 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8020810:	f000 fb80 	bl	8020f14 <Error_Handler>
  }
}
 8020814:	bf00      	nop
 8020816:	3750      	adds	r7, #80	; 0x50
 8020818:	46bd      	mov	sp, r7
 802081a:	bd80      	pop	{r7, pc}
 802081c:	40023800 	.word	0x40023800
 8020820:	40007000 	.word	0x40007000

08020824 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020824:	b580      	push	{r7, lr}
 8020826:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020828:	4b06      	ldr	r3, [pc, #24]	; (8020844 <MX_CRC_Init+0x20>)
 802082a:	4a07      	ldr	r2, [pc, #28]	; (8020848 <MX_CRC_Init+0x24>)
 802082c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802082e:	4805      	ldr	r0, [pc, #20]	; (8020844 <MX_CRC_Init+0x20>)
 8020830:	f003 f82e 	bl	8023890 <HAL_CRC_Init>
 8020834:	4603      	mov	r3, r0
 8020836:	2b00      	cmp	r3, #0
 8020838:	d001      	beq.n	802083e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 802083a:	f000 fb6b 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 802083e:	bf00      	nop
 8020840:	bd80      	pop	{r7, pc}
 8020842:	bf00      	nop
 8020844:	20000100 	.word	0x20000100
 8020848:	40023000 	.word	0x40023000

0802084c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8020850:	4b15      	ldr	r3, [pc, #84]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020852:	4a16      	ldr	r2, [pc, #88]	; (80208ac <MX_DMA2D_Init+0x60>)
 8020854:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8020856:	4b14      	ldr	r3, [pc, #80]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020858:	2200      	movs	r2, #0
 802085a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 802085c:	4b12      	ldr	r3, [pc, #72]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 802085e:	2200      	movs	r2, #0
 8020860:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8020862:	4b11      	ldr	r3, [pc, #68]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020864:	2200      	movs	r2, #0
 8020866:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8020868:	4b0f      	ldr	r3, [pc, #60]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 802086a:	2200      	movs	r2, #0
 802086c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 802086e:	4b0e      	ldr	r3, [pc, #56]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020870:	2200      	movs	r2, #0
 8020872:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020874:	4b0c      	ldr	r3, [pc, #48]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020876:	2200      	movs	r2, #0
 8020878:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 802087a:	4b0b      	ldr	r3, [pc, #44]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 802087c:	2200      	movs	r2, #0
 802087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8020880:	4809      	ldr	r0, [pc, #36]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020882:	f003 f9df 	bl	8023c44 <HAL_DMA2D_Init>
 8020886:	4603      	mov	r3, r0
 8020888:	2b00      	cmp	r3, #0
 802088a:	d001      	beq.n	8020890 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 802088c:	f000 fb42 	bl	8020f14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8020890:	2101      	movs	r1, #1
 8020892:	4805      	ldr	r0, [pc, #20]	; (80208a8 <MX_DMA2D_Init+0x5c>)
 8020894:	f003 fc44 	bl	8024120 <HAL_DMA2D_ConfigLayer>
 8020898:	4603      	mov	r3, r0
 802089a:	2b00      	cmp	r3, #0
 802089c:	d001      	beq.n	80208a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802089e:	f000 fb39 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80208a2:	bf00      	nop
 80208a4:	bd80      	pop	{r7, pc}
 80208a6:	bf00      	nop
 80208a8:	20000108 	.word	0x20000108
 80208ac:	4002b000 	.word	0x4002b000

080208b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80208b4:	4b1b      	ldr	r3, [pc, #108]	; (8020924 <MX_I2C3_Init+0x74>)
 80208b6:	4a1c      	ldr	r2, [pc, #112]	; (8020928 <MX_I2C3_Init+0x78>)
 80208b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80208ba:	4b1a      	ldr	r3, [pc, #104]	; (8020924 <MX_I2C3_Init+0x74>)
 80208bc:	4a1b      	ldr	r2, [pc, #108]	; (802092c <MX_I2C3_Init+0x7c>)
 80208be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80208c0:	4b18      	ldr	r3, [pc, #96]	; (8020924 <MX_I2C3_Init+0x74>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80208c6:	4b17      	ldr	r3, [pc, #92]	; (8020924 <MX_I2C3_Init+0x74>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80208cc:	4b15      	ldr	r3, [pc, #84]	; (8020924 <MX_I2C3_Init+0x74>)
 80208ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80208d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80208d4:	4b13      	ldr	r3, [pc, #76]	; (8020924 <MX_I2C3_Init+0x74>)
 80208d6:	2200      	movs	r2, #0
 80208d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80208da:	4b12      	ldr	r3, [pc, #72]	; (8020924 <MX_I2C3_Init+0x74>)
 80208dc:	2200      	movs	r2, #0
 80208de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80208e0:	4b10      	ldr	r3, [pc, #64]	; (8020924 <MX_I2C3_Init+0x74>)
 80208e2:	2200      	movs	r2, #0
 80208e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80208e6:	4b0f      	ldr	r3, [pc, #60]	; (8020924 <MX_I2C3_Init+0x74>)
 80208e8:	2200      	movs	r2, #0
 80208ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80208ec:	480d      	ldr	r0, [pc, #52]	; (8020924 <MX_I2C3_Init+0x74>)
 80208ee:	f005 ff3f 	bl	8026770 <HAL_I2C_Init>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d001      	beq.n	80208fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80208f8:	f000 fb0c 	bl	8020f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80208fc:	2100      	movs	r1, #0
 80208fe:	4809      	ldr	r0, [pc, #36]	; (8020924 <MX_I2C3_Init+0x74>)
 8020900:	f006 f87a 	bl	80269f8 <HAL_I2CEx_ConfigAnalogFilter>
 8020904:	4603      	mov	r3, r0
 8020906:	2b00      	cmp	r3, #0
 8020908:	d001      	beq.n	802090e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 802090a:	f000 fb03 	bl	8020f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802090e:	2100      	movs	r1, #0
 8020910:	4804      	ldr	r0, [pc, #16]	; (8020924 <MX_I2C3_Init+0x74>)
 8020912:	f006 f8ad 	bl	8026a70 <HAL_I2CEx_ConfigDigitalFilter>
 8020916:	4603      	mov	r3, r0
 8020918:	2b00      	cmp	r3, #0
 802091a:	d001      	beq.n	8020920 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 802091c:	f000 fafa 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8020920:	bf00      	nop
 8020922:	bd80      	pop	{r7, pc}
 8020924:	20000148 	.word	0x20000148
 8020928:	40005c00 	.word	0x40005c00
 802092c:	000186a0 	.word	0x000186a0

08020930 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8020930:	b580      	push	{r7, lr}
 8020932:	b08e      	sub	sp, #56	; 0x38
 8020934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8020936:	1d3b      	adds	r3, r7, #4
 8020938:	2234      	movs	r2, #52	; 0x34
 802093a:	2100      	movs	r1, #0
 802093c:	4618      	mov	r0, r3
 802093e:	f00c fefd 	bl	802d73c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8020942:	4b39      	ldr	r3, [pc, #228]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020944:	4a39      	ldr	r2, [pc, #228]	; (8020a2c <MX_LTDC_Init+0xfc>)
 8020946:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8020948:	4b37      	ldr	r3, [pc, #220]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802094a:	2200      	movs	r2, #0
 802094c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 802094e:	4b36      	ldr	r3, [pc, #216]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020950:	2200      	movs	r2, #0
 8020952:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8020954:	4b34      	ldr	r3, [pc, #208]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020956:	2200      	movs	r2, #0
 8020958:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 802095a:	4b33      	ldr	r3, [pc, #204]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802095c:	2200      	movs	r2, #0
 802095e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8020960:	4b31      	ldr	r3, [pc, #196]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020962:	2209      	movs	r2, #9
 8020964:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8020966:	4b30      	ldr	r3, [pc, #192]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020968:	2201      	movs	r2, #1
 802096a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 802096c:	4b2e      	ldr	r3, [pc, #184]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802096e:	221d      	movs	r2, #29
 8020970:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8020972:	4b2d      	ldr	r3, [pc, #180]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020974:	2203      	movs	r2, #3
 8020976:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8020978:	4b2b      	ldr	r3, [pc, #172]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802097a:	f240 120d 	movw	r2, #269	; 0x10d
 802097e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8020980:	4b29      	ldr	r3, [pc, #164]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020982:	f240 1243 	movw	r2, #323	; 0x143
 8020986:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8020988:	4b27      	ldr	r3, [pc, #156]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802098a:	f240 1217 	movw	r2, #279	; 0x117
 802098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8020990:	4b25      	ldr	r3, [pc, #148]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020992:	f240 1247 	movw	r2, #327	; 0x147
 8020996:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020998:	4b23      	ldr	r3, [pc, #140]	; (8020a28 <MX_LTDC_Init+0xf8>)
 802099a:	2200      	movs	r2, #0
 802099c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80209a0:	4b21      	ldr	r3, [pc, #132]	; (8020a28 <MX_LTDC_Init+0xf8>)
 80209a2:	2200      	movs	r2, #0
 80209a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80209a8:	4b1f      	ldr	r3, [pc, #124]	; (8020a28 <MX_LTDC_Init+0xf8>)
 80209aa:	2200      	movs	r2, #0
 80209ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80209b0:	481d      	ldr	r0, [pc, #116]	; (8020a28 <MX_LTDC_Init+0xf8>)
 80209b2:	f006 f89d 	bl	8026af0 <HAL_LTDC_Init>
 80209b6:	4603      	mov	r3, r0
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d001      	beq.n	80209c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80209bc:	f000 faaa 	bl	8020f14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80209c0:	2300      	movs	r3, #0
 80209c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80209c4:	23f0      	movs	r3, #240	; 0xf0
 80209c6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80209c8:	2300      	movs	r3, #0
 80209ca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80209cc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80209d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80209d2:	2302      	movs	r3, #2
 80209d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80209d6:	23ff      	movs	r3, #255	; 0xff
 80209d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80209da:	2300      	movs	r3, #0
 80209dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80209de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80209e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80209e4:	2307      	movs	r3, #7
 80209e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80209e8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80209ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80209ee:	23f0      	movs	r3, #240	; 0xf0
 80209f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80209f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80209f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80209f8:	2300      	movs	r3, #0
 80209fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80209fe:	2300      	movs	r3, #0
 8020a00:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020a04:	2300      	movs	r3, #0
 8020a06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020a0a:	1d3b      	adds	r3, r7, #4
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	4619      	mov	r1, r3
 8020a10:	4805      	ldr	r0, [pc, #20]	; (8020a28 <MX_LTDC_Init+0xf8>)
 8020a12:	f006 f9ff 	bl	8026e14 <HAL_LTDC_ConfigLayer>
 8020a16:	4603      	mov	r3, r0
 8020a18:	2b00      	cmp	r3, #0
 8020a1a:	d001      	beq.n	8020a20 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8020a1c:	f000 fa7a 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8020a20:	bf00      	nop
 8020a22:	3738      	adds	r7, #56	; 0x38
 8020a24:	46bd      	mov	sp, r7
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	2000019c 	.word	0x2000019c
 8020a2c:	40016800 	.word	0x40016800

08020a30 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8020a34:	4b17      	ldr	r3, [pc, #92]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a36:	4a18      	ldr	r2, [pc, #96]	; (8020a98 <MX_SPI5_Init+0x68>)
 8020a38:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8020a3a:	4b16      	ldr	r3, [pc, #88]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020a40:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8020a42:	4b14      	ldr	r3, [pc, #80]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a44:	2200      	movs	r2, #0
 8020a46:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8020a48:	4b12      	ldr	r3, [pc, #72]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a4a:	2200      	movs	r2, #0
 8020a4c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020a4e:	4b11      	ldr	r3, [pc, #68]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a50:	2200      	movs	r2, #0
 8020a52:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020a54:	4b0f      	ldr	r3, [pc, #60]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a56:	2200      	movs	r2, #0
 8020a58:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8020a5a:	4b0e      	ldr	r3, [pc, #56]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020a60:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8020a62:	4b0c      	ldr	r3, [pc, #48]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a64:	2218      	movs	r2, #24
 8020a66:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a68:	4b0a      	ldr	r3, [pc, #40]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a6a:	2200      	movs	r2, #0
 8020a6c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a6e:	4b09      	ldr	r3, [pc, #36]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a70:	2200      	movs	r2, #0
 8020a72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a74:	4b07      	ldr	r3, [pc, #28]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a76:	2200      	movs	r2, #0
 8020a78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8020a7a:	4b06      	ldr	r3, [pc, #24]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a7c:	220a      	movs	r2, #10
 8020a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8020a80:	4804      	ldr	r0, [pc, #16]	; (8020a94 <MX_SPI5_Init+0x64>)
 8020a82:	f007 fb60 	bl	8028146 <HAL_SPI_Init>
 8020a86:	4603      	mov	r3, r0
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d001      	beq.n	8020a90 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8020a8c:	f000 fa42 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a90:	bf00      	nop
 8020a92:	bd80      	pop	{r7, pc}
 8020a94:	20000244 	.word	0x20000244
 8020a98:	40015000 	.word	0x40015000

08020a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b086      	sub	sp, #24
 8020aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020aa2:	f107 0308 	add.w	r3, r7, #8
 8020aa6:	2200      	movs	r2, #0
 8020aa8:	601a      	str	r2, [r3, #0]
 8020aaa:	605a      	str	r2, [r3, #4]
 8020aac:	609a      	str	r2, [r3, #8]
 8020aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020ab0:	463b      	mov	r3, r7
 8020ab2:	2200      	movs	r2, #0
 8020ab4:	601a      	str	r2, [r3, #0]
 8020ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020ab8:	4b1e      	ldr	r3, [pc, #120]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020aba:	4a1f      	ldr	r2, [pc, #124]	; (8020b38 <MX_TIM1_Init+0x9c>)
 8020abc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020abe:	4b1d      	ldr	r3, [pc, #116]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ac0:	2200      	movs	r2, #0
 8020ac2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020ac4:	4b1b      	ldr	r3, [pc, #108]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ac6:	2200      	movs	r2, #0
 8020ac8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020aca:	4b1a      	ldr	r3, [pc, #104]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020ad0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020ad2:	4b18      	ldr	r3, [pc, #96]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020ad8:	4b16      	ldr	r3, [pc, #88]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020ade:	4b15      	ldr	r3, [pc, #84]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ae0:	2200      	movs	r2, #0
 8020ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020ae4:	4813      	ldr	r0, [pc, #76]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020ae6:	f008 f90d 	bl	8028d04 <HAL_TIM_Base_Init>
 8020aea:	4603      	mov	r3, r0
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d001      	beq.n	8020af4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020af0:	f000 fa10 	bl	8020f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020afa:	f107 0308 	add.w	r3, r7, #8
 8020afe:	4619      	mov	r1, r3
 8020b00:	480c      	ldr	r0, [pc, #48]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020b02:	f008 fac7 	bl	8029094 <HAL_TIM_ConfigClockSource>
 8020b06:	4603      	mov	r3, r0
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d001      	beq.n	8020b10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020b0c:	f000 fa02 	bl	8020f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020b10:	2300      	movs	r3, #0
 8020b12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020b14:	2300      	movs	r3, #0
 8020b16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020b18:	463b      	mov	r3, r7
 8020b1a:	4619      	mov	r1, r3
 8020b1c:	4805      	ldr	r0, [pc, #20]	; (8020b34 <MX_TIM1_Init+0x98>)
 8020b1e:	f008 fce3 	bl	80294e8 <HAL_TIMEx_MasterConfigSynchronization>
 8020b22:	4603      	mov	r3, r0
 8020b24:	2b00      	cmp	r3, #0
 8020b26:	d001      	beq.n	8020b2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020b28:	f000 f9f4 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020b2c:	bf00      	nop
 8020b2e:	3718      	adds	r7, #24
 8020b30:	46bd      	mov	sp, r7
 8020b32:	bd80      	pop	{r7, pc}
 8020b34:	2000029c 	.word	0x2000029c
 8020b38:	40010000 	.word	0x40010000

08020b3c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020b40:	4b11      	ldr	r3, [pc, #68]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b42:	4a12      	ldr	r2, [pc, #72]	; (8020b8c <MX_UART5_Init+0x50>)
 8020b44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8020b46:	4b10      	ldr	r3, [pc, #64]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020b4e:	4b0e      	ldr	r3, [pc, #56]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b50:	2200      	movs	r2, #0
 8020b52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020b54:	4b0c      	ldr	r3, [pc, #48]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b56:	2200      	movs	r2, #0
 8020b58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020b5a:	4b0b      	ldr	r3, [pc, #44]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b5c:	2200      	movs	r2, #0
 8020b5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020b60:	4b09      	ldr	r3, [pc, #36]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b62:	220c      	movs	r2, #12
 8020b64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b66:	4b08      	ldr	r3, [pc, #32]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b68:	2200      	movs	r2, #0
 8020b6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b6c:	4b06      	ldr	r3, [pc, #24]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b6e:	2200      	movs	r2, #0
 8020b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020b72:	4805      	ldr	r0, [pc, #20]	; (8020b88 <MX_UART5_Init+0x4c>)
 8020b74:	f008 fd48 	bl	8029608 <HAL_UART_Init>
 8020b78:	4603      	mov	r3, r0
 8020b7a:	2b00      	cmp	r3, #0
 8020b7c:	d001      	beq.n	8020b82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020b7e:	f000 f9c9 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020b82:	bf00      	nop
 8020b84:	bd80      	pop	{r7, pc}
 8020b86:	bf00      	nop
 8020b88:	200002e4 	.word	0x200002e4
 8020b8c:	40005000 	.word	0x40005000

08020b90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b90:	b580      	push	{r7, lr}
 8020b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b94:	4b11      	ldr	r3, [pc, #68]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020b96:	4a12      	ldr	r2, [pc, #72]	; (8020be0 <MX_USART1_UART_Init+0x50>)
 8020b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b9a:	4b10      	ldr	r3, [pc, #64]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020ba2:	4b0e      	ldr	r3, [pc, #56]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020ba8:	4b0c      	ldr	r3, [pc, #48]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020baa:	2200      	movs	r2, #0
 8020bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020bae:	4b0b      	ldr	r3, [pc, #44]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020bb4:	4b09      	ldr	r3, [pc, #36]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020bb6:	220c      	movs	r2, #12
 8020bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020bba:	4b08      	ldr	r3, [pc, #32]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020bbc:	2200      	movs	r2, #0
 8020bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020bc0:	4b06      	ldr	r3, [pc, #24]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020bc2:	2200      	movs	r2, #0
 8020bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020bc6:	4805      	ldr	r0, [pc, #20]	; (8020bdc <MX_USART1_UART_Init+0x4c>)
 8020bc8:	f008 fd1e 	bl	8029608 <HAL_UART_Init>
 8020bcc:	4603      	mov	r3, r0
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	d001      	beq.n	8020bd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020bd2:	f000 f99f 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020bd6:	bf00      	nop
 8020bd8:	bd80      	pop	{r7, pc}
 8020bda:	bf00      	nop
 8020bdc:	20000328 	.word	0x20000328
 8020be0:	40011000 	.word	0x40011000

08020be4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020be4:	b580      	push	{r7, lr}
 8020be6:	b088      	sub	sp, #32
 8020be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020bea:	1d3b      	adds	r3, r7, #4
 8020bec:	2200      	movs	r2, #0
 8020bee:	601a      	str	r2, [r3, #0]
 8020bf0:	605a      	str	r2, [r3, #4]
 8020bf2:	609a      	str	r2, [r3, #8]
 8020bf4:	60da      	str	r2, [r3, #12]
 8020bf6:	611a      	str	r2, [r3, #16]
 8020bf8:	615a      	str	r2, [r3, #20]
 8020bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020bfc:	4b1f      	ldr	r3, [pc, #124]	; (8020c7c <MX_FMC_Init+0x98>)
 8020bfe:	4a20      	ldr	r2, [pc, #128]	; (8020c80 <MX_FMC_Init+0x9c>)
 8020c00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020c02:	4b1e      	ldr	r3, [pc, #120]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c04:	2201      	movs	r2, #1
 8020c06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020c08:	4b1c      	ldr	r3, [pc, #112]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c0a:	2200      	movs	r2, #0
 8020c0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020c0e:	4b1b      	ldr	r3, [pc, #108]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c10:	2204      	movs	r2, #4
 8020c12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020c14:	4b19      	ldr	r3, [pc, #100]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c16:	2210      	movs	r2, #16
 8020c18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020c1a:	4b18      	ldr	r3, [pc, #96]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c1c:	2240      	movs	r2, #64	; 0x40
 8020c1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020c20:	4b16      	ldr	r3, [pc, #88]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c22:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020c26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020c28:	4b14      	ldr	r3, [pc, #80]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020c2e:	4b13      	ldr	r3, [pc, #76]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020c34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020c36:	4b11      	ldr	r3, [pc, #68]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c38:	2200      	movs	r2, #0
 8020c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020c3c:	4b0f      	ldr	r3, [pc, #60]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020c42:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020c44:	2302      	movs	r3, #2
 8020c46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020c48:	2307      	movs	r3, #7
 8020c4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020c4c:	2304      	movs	r3, #4
 8020c4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020c50:	2307      	movs	r3, #7
 8020c52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020c54:	2303      	movs	r3, #3
 8020c56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020c58:	2302      	movs	r3, #2
 8020c5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020c5c:	2302      	movs	r3, #2
 8020c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020c60:	1d3b      	adds	r3, r7, #4
 8020c62:	4619      	mov	r1, r3
 8020c64:	4805      	ldr	r0, [pc, #20]	; (8020c7c <MX_FMC_Init+0x98>)
 8020c66:	f007 f9dd 	bl	8028024 <HAL_SDRAM_Init>
 8020c6a:	4603      	mov	r3, r0
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d001      	beq.n	8020c74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020c70:	f000 f950 	bl	8020f14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020c74:	bf00      	nop
 8020c76:	3720      	adds	r7, #32
 8020c78:	46bd      	mov	sp, r7
 8020c7a:	bd80      	pop	{r7, pc}
 8020c7c:	2000036c 	.word	0x2000036c
 8020c80:	a0000140 	.word	0xa0000140

08020c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c84:	b580      	push	{r7, lr}
 8020c86:	b08e      	sub	sp, #56	; 0x38
 8020c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c8e:	2200      	movs	r2, #0
 8020c90:	601a      	str	r2, [r3, #0]
 8020c92:	605a      	str	r2, [r3, #4]
 8020c94:	609a      	str	r2, [r3, #8]
 8020c96:	60da      	str	r2, [r3, #12]
 8020c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	623b      	str	r3, [r7, #32]
 8020c9e:	4b85      	ldr	r3, [pc, #532]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca2:	4a84      	ldr	r2, [pc, #528]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020ca4:	f043 0304 	orr.w	r3, r3, #4
 8020ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8020caa:	4b82      	ldr	r3, [pc, #520]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	f003 0304 	and.w	r3, r3, #4
 8020cb2:	623b      	str	r3, [r7, #32]
 8020cb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020cb6:	2300      	movs	r3, #0
 8020cb8:	61fb      	str	r3, [r7, #28]
 8020cba:	4b7e      	ldr	r3, [pc, #504]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cbe:	4a7d      	ldr	r2, [pc, #500]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cc0:	f043 0320 	orr.w	r3, r3, #32
 8020cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8020cc6:	4b7b      	ldr	r3, [pc, #492]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cca:	f003 0320 	and.w	r3, r3, #32
 8020cce:	61fb      	str	r3, [r7, #28]
 8020cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	61bb      	str	r3, [r7, #24]
 8020cd6:	4b77      	ldr	r3, [pc, #476]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cda:	4a76      	ldr	r2, [pc, #472]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ce2:	4b74      	ldr	r3, [pc, #464]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020cea:	61bb      	str	r3, [r7, #24]
 8020cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020cee:	2300      	movs	r3, #0
 8020cf0:	617b      	str	r3, [r7, #20]
 8020cf2:	4b70      	ldr	r3, [pc, #448]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf6:	4a6f      	ldr	r2, [pc, #444]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020cf8:	f043 0301 	orr.w	r3, r3, #1
 8020cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cfe:	4b6d      	ldr	r3, [pc, #436]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d02:	f003 0301 	and.w	r3, r3, #1
 8020d06:	617b      	str	r3, [r7, #20]
 8020d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	613b      	str	r3, [r7, #16]
 8020d0e:	4b69      	ldr	r3, [pc, #420]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d12:	4a68      	ldr	r2, [pc, #416]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d14:	f043 0302 	orr.w	r3, r3, #2
 8020d18:	6313      	str	r3, [r2, #48]	; 0x30
 8020d1a:	4b66      	ldr	r3, [pc, #408]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d1e:	f003 0302 	and.w	r3, r3, #2
 8020d22:	613b      	str	r3, [r7, #16]
 8020d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020d26:	2300      	movs	r3, #0
 8020d28:	60fb      	str	r3, [r7, #12]
 8020d2a:	4b62      	ldr	r3, [pc, #392]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d2e:	4a61      	ldr	r2, [pc, #388]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d34:	6313      	str	r3, [r2, #48]	; 0x30
 8020d36:	4b5f      	ldr	r3, [pc, #380]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020d3e:	60fb      	str	r3, [r7, #12]
 8020d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020d42:	2300      	movs	r3, #0
 8020d44:	60bb      	str	r3, [r7, #8]
 8020d46:	4b5b      	ldr	r3, [pc, #364]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d4a:	4a5a      	ldr	r2, [pc, #360]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d4c:	f043 0310 	orr.w	r3, r3, #16
 8020d50:	6313      	str	r3, [r2, #48]	; 0x30
 8020d52:	4b58      	ldr	r3, [pc, #352]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d56:	f003 0310 	and.w	r3, r3, #16
 8020d5a:	60bb      	str	r3, [r7, #8]
 8020d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020d5e:	2300      	movs	r3, #0
 8020d60:	607b      	str	r3, [r7, #4]
 8020d62:	4b54      	ldr	r3, [pc, #336]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d66:	4a53      	ldr	r2, [pc, #332]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d68:	f043 0308 	orr.w	r3, r3, #8
 8020d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8020d6e:	4b51      	ldr	r3, [pc, #324]	; (8020eb4 <MX_GPIO_Init+0x230>)
 8020d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d72:	f003 0308 	and.w	r3, r3, #8
 8020d76:	607b      	str	r3, [r7, #4]
 8020d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020d7a:	2200      	movs	r2, #0
 8020d7c:	2116      	movs	r1, #22
 8020d7e:	484e      	ldr	r0, [pc, #312]	; (8020eb8 <MX_GPIO_Init+0x234>)
 8020d80:	f004 f8ba 	bl	8024ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020d84:	2200      	movs	r2, #0
 8020d86:	2180      	movs	r1, #128	; 0x80
 8020d88:	484c      	ldr	r0, [pc, #304]	; (8020ebc <MX_GPIO_Init+0x238>)
 8020d8a:	f004 f8b5 	bl	8024ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020d8e:	2200      	movs	r2, #0
 8020d90:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d94:	484a      	ldr	r0, [pc, #296]	; (8020ec0 <MX_GPIO_Init+0x23c>)
 8020d96:	f004 f8af 	bl	8024ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d9a:	2200      	movs	r2, #0
 8020d9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020da0:	4848      	ldr	r0, [pc, #288]	; (8020ec4 <MX_GPIO_Init+0x240>)
 8020da2:	f004 f8a9 	bl	8024ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020da6:	2316      	movs	r3, #22
 8020da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020daa:	2301      	movs	r3, #1
 8020dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dae:	2300      	movs	r3, #0
 8020db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020db2:	2300      	movs	r3, #0
 8020db4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dba:	4619      	mov	r1, r3
 8020dbc:	483e      	ldr	r0, [pc, #248]	; (8020eb8 <MX_GPIO_Init+0x234>)
 8020dbe:	f003 fde3 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020dc6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dcc:	2300      	movs	r3, #0
 8020dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dd4:	4619      	mov	r1, r3
 8020dd6:	4839      	ldr	r0, [pc, #228]	; (8020ebc <MX_GPIO_Init+0x238>)
 8020dd8:	f003 fdd6 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020ddc:	f248 0306 	movw	r3, #32774	; 0x8006
 8020de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020de2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020de8:	2300      	movs	r3, #0
 8020dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020df0:	4619      	mov	r1, r3
 8020df2:	4832      	ldr	r0, [pc, #200]	; (8020ebc <MX_GPIO_Init+0x238>)
 8020df4:	f003 fdc8 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020df8:	2380      	movs	r3, #128	; 0x80
 8020dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dfc:	2301      	movs	r3, #1
 8020dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e00:	2300      	movs	r3, #0
 8020e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e04:	2300      	movs	r3, #0
 8020e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e0c:	4619      	mov	r1, r3
 8020e0e:	482b      	ldr	r0, [pc, #172]	; (8020ebc <MX_GPIO_Init+0x238>)
 8020e10:	f003 fdba 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020e14:	2320      	movs	r3, #32
 8020e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020e18:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e1e:	2300      	movs	r3, #0
 8020e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e26:	4619      	mov	r1, r3
 8020e28:	4823      	ldr	r0, [pc, #140]	; (8020eb8 <MX_GPIO_Init+0x234>)
 8020e2a:	f003 fdad 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020e2e:	2304      	movs	r3, #4
 8020e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e32:	2300      	movs	r3, #0
 8020e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e36:	2300      	movs	r3, #0
 8020e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e3e:	4619      	mov	r1, r3
 8020e40:	4821      	ldr	r0, [pc, #132]	; (8020ec8 <MX_GPIO_Init+0x244>)
 8020e42:	f003 fda1 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e50:	2300      	movs	r3, #0
 8020e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e58:	4619      	mov	r1, r3
 8020e5a:	4819      	ldr	r0, [pc, #100]	; (8020ec0 <MX_GPIO_Init+0x23c>)
 8020e5c:	f003 fd94 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020e60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e66:	2301      	movs	r3, #1
 8020e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e6a:	2300      	movs	r3, #0
 8020e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e6e:	2300      	movs	r3, #0
 8020e70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e76:	4619      	mov	r1, r3
 8020e78:	4811      	ldr	r0, [pc, #68]	; (8020ec0 <MX_GPIO_Init+0x23c>)
 8020e7a:	f003 fd85 	bl	8024988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020e7e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e84:	2301      	movs	r3, #1
 8020e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e88:	2300      	movs	r3, #0
 8020e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e8c:	2300      	movs	r3, #0
 8020e8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e94:	4619      	mov	r1, r3
 8020e96:	480b      	ldr	r0, [pc, #44]	; (8020ec4 <MX_GPIO_Init+0x240>)
 8020e98:	f003 fd76 	bl	8024988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	2100      	movs	r1, #0
 8020ea0:	2006      	movs	r0, #6
 8020ea2:	f002 fccb 	bl	802383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020ea6:	2006      	movs	r0, #6
 8020ea8:	f002 fce4 	bl	8023874 <HAL_NVIC_EnableIRQ>

}
 8020eac:	bf00      	nop
 8020eae:	3738      	adds	r7, #56	; 0x38
 8020eb0:	46bd      	mov	sp, r7
 8020eb2:	bd80      	pop	{r7, pc}
 8020eb4:	40023800 	.word	0x40023800
 8020eb8:	40020800 	.word	0x40020800
 8020ebc:	40020000 	.word	0x40020000
 8020ec0:	40020c00 	.word	0x40020c00
 8020ec4:	40021800 	.word	0x40021800
 8020ec8:	40020400 	.word	0x40020400

08020ecc <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020ecc:	b580      	push	{r7, lr}
 8020ece:	b082      	sub	sp, #8
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020ed4:	1d39      	adds	r1, r7, #4
 8020ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8020eda:	2201      	movs	r2, #1
 8020edc:	4803      	ldr	r0, [pc, #12]	; (8020eec <__io_putchar+0x20>)
 8020ede:	f008 fbe0 	bl	80296a2 <HAL_UART_Transmit>
	return ch;
 8020ee2:	687b      	ldr	r3, [r7, #4]
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	3708      	adds	r7, #8
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd80      	pop	{r7, pc}
 8020eec:	20000328 	.word	0x20000328

08020ef0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b082      	sub	sp, #8
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	681b      	ldr	r3, [r3, #0]
 8020efc:	4a04      	ldr	r2, [pc, #16]	; (8020f10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020efe:	4293      	cmp	r3, r2
 8020f00:	d101      	bne.n	8020f06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020f02:	f002 fb9f 	bl	8023644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020f06:	bf00      	nop
 8020f08:	3708      	adds	r7, #8
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}
 8020f0e:	bf00      	nop
 8020f10:	40001000 	.word	0x40001000

08020f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020f14:	b480      	push	{r7}
 8020f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020f18:	b672      	cpsid	i
}
 8020f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020f1c:	e7fe      	b.n	8020f1c <Error_Handler+0x8>
	...

08020f20 <go_to_ota_app>:
 * @brief run ota application
 * @param hurat uart handler receive ota
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8020f20:	b580      	push	{r7, lr}
 8020f22:	b082      	sub	sp, #8
 8020f24:	af00      	add	r7, sp, #0
 8020f26:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8020f28:	480e      	ldr	r0, [pc, #56]	; (8020f64 <go_to_ota_app+0x44>)
 8020f2a:	f00c fd75 	bl	802da18 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8020f2e:	6878      	ldr	r0, [r7, #4]
 8020f30:	f000 f820 	bl	8020f74 <ota_download_and_flash>
 8020f34:	4603      	mov	r3, r0
 8020f36:	2b00      	cmp	r3, #0
 8020f38:	d009      	beq.n	8020f4e <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8020f3a:	480b      	ldr	r0, [pc, #44]	; (8020f68 <go_to_ota_app+0x48>)
 8020f3c:	f00c fd6c 	bl	802da18 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8020f40:	2200      	movs	r2, #0
 8020f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f46:	4809      	ldr	r0, [pc, #36]	; (8020f6c <go_to_ota_app+0x4c>)
 8020f48:	f003 ffd6 	bl	8024ef8 <HAL_GPIO_WritePin>
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_Delay(10000);
//      HAL_NVIC_SystemReset();
    }
}
 8020f4c:	e006      	b.n	8020f5c <go_to_ota_app+0x3c>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8020f4e:	4808      	ldr	r0, [pc, #32]	; (8020f70 <go_to_ota_app+0x50>)
 8020f50:	f00c fd62 	bl	802da18 <puts>
      HAL_Delay(10000);
 8020f54:	f242 7010 	movw	r0, #10000	; 0x2710
 8020f58:	f002 fb94 	bl	8023684 <HAL_Delay>
}
 8020f5c:	bf00      	nop
 8020f5e:	3708      	adds	r7, #8
 8020f60:	46bd      	mov	sp, r7
 8020f62:	bd80      	pop	{r7, pc}
 8020f64:	0802eba0 	.word	0x0802eba0
 8020f68:	0802ebc0 	.word	0x0802ebc0
 8020f6c:	40021800 	.word	0x40021800
 8020f70:	0802ebe0 	.word	0x0802ebe0

08020f74 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b084      	sub	sp, #16
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8020f7c:	2300      	movs	r3, #0
 8020f7e:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8020f80:	4820      	ldr	r0, [pc, #128]	; (8021004 <ota_download_and_flash+0x90>)
 8020f82:	f00c fd49 	bl	802da18 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8020f86:	4b20      	ldr	r3, [pc, #128]	; (8021008 <ota_download_and_flash+0x94>)
 8020f88:	2200      	movs	r2, #0
 8020f8a:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8020f8c:	4b1f      	ldr	r3, [pc, #124]	; (802100c <ota_download_and_flash+0x98>)
 8020f8e:	2200      	movs	r2, #0
 8020f90:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8020f92:	4b1f      	ldr	r3, [pc, #124]	; (8021010 <ota_download_and_flash+0x9c>)
 8020f94:	2200      	movs	r2, #0
 8020f96:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8020f98:	4b1e      	ldr	r3, [pc, #120]	; (8021014 <ota_download_and_flash+0xa0>)
 8020f9a:	2201      	movs	r2, #1
 8020f9c:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8020f9e:	f240 4209 	movw	r2, #1033	; 0x409
 8020fa2:	2100      	movs	r1, #0
 8020fa4:	481c      	ldr	r0, [pc, #112]	; (8021018 <ota_download_and_flash+0xa4>)
 8020fa6:	f00c fbc9 	bl	802d73c <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8020faa:	f240 4209 	movw	r2, #1033	; 0x409
 8020fae:	491a      	ldr	r1, [pc, #104]	; (8021018 <ota_download_and_flash+0xa4>)
 8020fb0:	6878      	ldr	r0, [r7, #4]
 8020fb2:	f000 f835 	bl	8021020 <ota_receive_chunk>
 8020fb6:	4603      	mov	r3, r0
 8020fb8:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8020fba:	89bb      	ldrh	r3, [r7, #12]
 8020fbc:	2b00      	cmp	r3, #0
 8020fbe:	d007      	beq.n	8020fd0 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8020fc0:	89bb      	ldrh	r3, [r7, #12]
 8020fc2:	4619      	mov	r1, r3
 8020fc4:	4814      	ldr	r0, [pc, #80]	; (8021018 <ota_download_and_flash+0xa4>)
 8020fc6:	f000 f90d 	bl	80211e4 <ota_process_data>
 8020fca:	4603      	mov	r3, r0
 8020fcc:	73fb      	strb	r3, [r7, #15]
 8020fce:	e001      	b.n	8020fd4 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8020fd0:	2301      	movs	r3, #1
 8020fd2:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8020fd4:	7bfb      	ldrb	r3, [r7, #15]
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d007      	beq.n	8020fea <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8020fda:	4810      	ldr	r0, [pc, #64]	; (802101c <ota_download_and_flash+0xa8>)
 8020fdc:	f00c fd1c 	bl	802da18 <puts>
			ota_send_resp(huart, OTA_NACK);
 8020fe0:	2101      	movs	r1, #1
 8020fe2:	6878      	ldr	r0, [r7, #4]
 8020fe4:	f000 fb34 	bl	8021650 <ota_send_resp>
			break;
 8020fe8:	e007      	b.n	8020ffa <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8020fea:	2100      	movs	r1, #0
 8020fec:	6878      	ldr	r0, [r7, #4]
 8020fee:	f000 fb2f 	bl	8021650 <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8020ff2:	4b08      	ldr	r3, [pc, #32]	; (8021014 <ota_download_and_flash+0xa0>)
 8020ff4:	781b      	ldrb	r3, [r3, #0]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d1d1      	bne.n	8020f9e <ota_download_and_flash+0x2a>

	return ret;
 8020ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8020ffc:	4618      	mov	r0, r3
 8020ffe:	3710      	adds	r7, #16
 8021000:	46bd      	mov	sp, r7
 8021002:	bd80      	pop	{r7, pc}
 8021004:	0802ec0c 	.word	0x0802ec0c
 8021008:	20000408 	.word	0x20000408
 802100c:	20000410 	.word	0x20000410
 8021010:	2000040c 	.word	0x2000040c
 8021014:	20000405 	.word	0x20000405
 8021018:	20000414 	.word	0x20000414
 802101c:	0802ec28 	.word	0x0802ec28

08021020 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8021020:	b580      	push	{r7, lr}
 8021022:	b08a      	sub	sp, #40	; 0x28
 8021024:	af00      	add	r7, sp, #0
 8021026:	60f8      	str	r0, [r7, #12]
 8021028:	60b9      	str	r1, [r7, #8]
 802102a:	4613      	mov	r3, r2
 802102c:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 802102e:	2300      	movs	r3, #0
 8021030:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8021032:	2300      	movs	r3, #0
 8021034:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8021036:	2300      	movs	r3, #0
 8021038:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 802103a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802103c:	68ba      	ldr	r2, [r7, #8]
 802103e:	18d1      	adds	r1, r2, r3
 8021040:	f04f 33ff 	mov.w	r3, #4294967295
 8021044:	2201      	movs	r2, #1
 8021046:	68f8      	ldr	r0, [r7, #12]
 8021048:	f008 fbbd 	bl	80297c6 <HAL_UART_Receive>
 802104c:	4603      	mov	r3, r0
 802104e:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8021050:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8021054:	2b00      	cmp	r3, #0
 8021056:	f040 809c 	bne.w	8021192 <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 802105a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802105c:	1c5a      	adds	r2, r3, #1
 802105e:	84ba      	strh	r2, [r7, #36]	; 0x24
 8021060:	461a      	mov	r2, r3
 8021062:	68bb      	ldr	r3, [r7, #8]
 8021064:	4413      	add	r3, r2
 8021066:	781b      	ldrb	r3, [r3, #0]
 8021068:	2baa      	cmp	r3, #170	; 0xaa
 802106a:	f040 8094 	bne.w	8021196 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 802106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021070:	1c5a      	adds	r2, r3, #1
 8021072:	84ba      	strh	r2, [r7, #36]	; 0x24
 8021074:	461a      	mov	r2, r3
 8021076:	68bb      	ldr	r3, [r7, #8]
 8021078:	1899      	adds	r1, r3, r2
 802107a:	f04f 33ff 	mov.w	r3, #4294967295
 802107e:	2201      	movs	r2, #1
 8021080:	68f8      	ldr	r0, [r7, #12]
 8021082:	f008 fba0 	bl	80297c6 <HAL_UART_Receive>
 8021086:	4603      	mov	r3, r0
 8021088:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 802108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802108e:	2b00      	cmp	r3, #0
 8021090:	f040 8083 	bne.w	802119a <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8021094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021096:	68ba      	ldr	r2, [r7, #8]
 8021098:	18d1      	adds	r1, r2, r3
 802109a:	f04f 33ff 	mov.w	r3, #4294967295
 802109e:	2202      	movs	r2, #2
 80210a0:	68f8      	ldr	r0, [r7, #12]
 80210a2:	f008 fb90 	bl	80297c6 <HAL_UART_Receive>
 80210a6:	4603      	mov	r3, r0
 80210a8:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80210aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	d175      	bne.n	802119e <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 80210b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80210b4:	68ba      	ldr	r2, [r7, #8]
 80210b6:	4413      	add	r3, r2
 80210b8:	881b      	ldrh	r3, [r3, #0]
 80210ba:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 80210bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80210be:	3302      	adds	r3, #2
 80210c0:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 80210c2:	2300      	movs	r3, #0
 80210c4:	847b      	strh	r3, [r7, #34]	; 0x22
 80210c6:	e014      	b.n	80210f2 <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 80210c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80210ca:	1c5a      	adds	r2, r3, #1
 80210cc:	84ba      	strh	r2, [r7, #36]	; 0x24
 80210ce:	461a      	mov	r2, r3
 80210d0:	68bb      	ldr	r3, [r7, #8]
 80210d2:	1899      	adds	r1, r3, r2
 80210d4:	f04f 33ff 	mov.w	r3, #4294967295
 80210d8:	2201      	movs	r2, #1
 80210da:	68f8      	ldr	r0, [r7, #12]
 80210dc:	f008 fb73 	bl	80297c6 <HAL_UART_Receive>
 80210e0:	4603      	mov	r3, r0
 80210e2:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 80210e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d107      	bne.n	80210fc <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 80210ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80210ee:	3301      	adds	r3, #1
 80210f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80210f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80210f4:	8afb      	ldrh	r3, [r7, #22]
 80210f6:	429a      	cmp	r2, r3
 80210f8:	d3e6      	bcc.n	80210c8 <ota_receive_chunk+0xa8>
 80210fa:	e000      	b.n	80210fe <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 80210fc:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 80210fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8021102:	2b00      	cmp	r3, #0
 8021104:	d14d      	bne.n	80211a2 <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8021106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021108:	68ba      	ldr	r2, [r7, #8]
 802110a:	18d1      	adds	r1, r2, r3
 802110c:	f04f 33ff 	mov.w	r3, #4294967295
 8021110:	2204      	movs	r2, #4
 8021112:	68f8      	ldr	r0, [r7, #12]
 8021114:	f008 fb57 	bl	80297c6 <HAL_UART_Receive>
 8021118:	4603      	mov	r3, r0
 802111a:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 802111c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8021120:	2b00      	cmp	r3, #0
 8021122:	d140      	bne.n	80211a6 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 8021124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021126:	68ba      	ldr	r2, [r7, #8]
 8021128:	4413      	add	r3, r2
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	61bb      	str	r3, [r7, #24]
		index +=4u;
 802112e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021130:	3304      	adds	r3, #4
 8021132:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8021134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021136:	68ba      	ldr	r2, [r7, #8]
 8021138:	18d1      	adds	r1, r2, r3
 802113a:	f04f 33ff 	mov.w	r3, #4294967295
 802113e:	2201      	movs	r2, #1
 8021140:	68f8      	ldr	r0, [r7, #12]
 8021142:	f008 fb40 	bl	80297c6 <HAL_UART_Receive>
 8021146:	4603      	mov	r3, r0
 8021148:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 802114a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802114e:	2b00      	cmp	r3, #0
 8021150:	d12b      	bne.n	80211aa <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 8021152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021154:	1c5a      	adds	r2, r3, #1
 8021156:	84ba      	strh	r2, [r7, #36]	; 0x24
 8021158:	461a      	mov	r2, r3
 802115a:	68bb      	ldr	r3, [r7, #8]
 802115c:	4413      	add	r3, r2
 802115e:	781b      	ldrb	r3, [r3, #0]
 8021160:	2bbb      	cmp	r3, #187	; 0xbb
 8021162:	d002      	beq.n	802116a <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 8021164:	2301      	movs	r3, #1
 8021166:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8021168:	e020      	b.n	80211ac <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 802116a:	68bb      	ldr	r3, [r7, #8]
 802116c:	3304      	adds	r3, #4
 802116e:	8afa      	ldrh	r2, [r7, #22]
 8021170:	4611      	mov	r1, r2
 8021172:	4618      	mov	r0, r3
 8021174:	f000 fa98 	bl	80216a8 <ota_calcCRC>
 8021178:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 802117a:	69fa      	ldr	r2, [r7, #28]
 802117c:	69bb      	ldr	r3, [r7, #24]
 802117e:	429a      	cmp	r2, r3
 8021180:	d014      	beq.n	80211ac <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8021182:	69ba      	ldr	r2, [r7, #24]
 8021184:	69f9      	ldr	r1, [r7, #28]
 8021186:	4815      	ldr	r0, [pc, #84]	; (80211dc <ota_receive_chunk+0x1bc>)
 8021188:	f00c fbc0 	bl	802d90c <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 802118c:	2301      	movs	r3, #1
 802118e:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8021190:	e00c      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 8021192:	bf00      	nop
 8021194:	e00a      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 8021196:	bf00      	nop
 8021198:	e008      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 802119a:	bf00      	nop
 802119c:	e006      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 802119e:	bf00      	nop
 80211a0:	e004      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 80211a2:	bf00      	nop
 80211a4:	e002      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 80211a6:	bf00      	nop
 80211a8:	e000      	b.n	80211ac <ota_receive_chunk+0x18c>
			break;
 80211aa:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 80211ac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80211b0:	2b00      	cmp	r3, #0
 80211b2:	d001      	beq.n	80211b8 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 80211b4:	2300      	movs	r3, #0
 80211b6:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 80211b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80211ba:	88fb      	ldrh	r3, [r7, #6]
 80211bc:	429a      	cmp	r2, r3
 80211be:	d907      	bls.n	80211d0 <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 80211c0:	88fb      	ldrh	r3, [r7, #6]
 80211c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80211c4:	4619      	mov	r1, r3
 80211c6:	4806      	ldr	r0, [pc, #24]	; (80211e0 <ota_receive_chunk+0x1c0>)
 80211c8:	f00c fba0 	bl	802d90c <iprintf>
															  	  max_len, index );
		index = 0u;
 80211cc:	2300      	movs	r3, #0
 80211ce:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 80211d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 80211d2:	4618      	mov	r0, r3
 80211d4:	3728      	adds	r7, #40	; 0x28
 80211d6:	46bd      	mov	sp, r7
 80211d8:	bd80      	pop	{r7, pc}
 80211da:	bf00      	nop
 80211dc:	0802ec38 	.word	0x0802ec38
 80211e0:	0802ec78 	.word	0x0802ec78

080211e4 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 80211e4:	b5b0      	push	{r4, r5, r7, lr}
 80211e6:	b092      	sub	sp, #72	; 0x48
 80211e8:	af00      	add	r7, sp, #0
 80211ea:	6078      	str	r0, [r7, #4]
 80211ec:	460b      	mov	r3, r1
 80211ee:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 80211f0:	2301      	movs	r3, #1
 80211f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	do
	{
		if( (buf== NULL) || (len == 0u))
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	f000 80fc 	beq.w	80213f6 <ota_process_data+0x212>
 80211fe:	887b      	ldrh	r3, [r7, #2]
 8021200:	2b00      	cmp	r3, #0
 8021202:	f000 80f8 	beq.w	80213f6 <ota_process_data+0x212>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	643b      	str	r3, [r7, #64]	; 0x40
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 802120a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802120c:	785b      	ldrb	r3, [r3, #1]
 802120e:	2b00      	cmp	r3, #0
 8021210:	d104      	bne.n	802121c <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 8021212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021214:	791b      	ldrb	r3, [r3, #4]
 8021216:	2b02      	cmp	r3, #2
 8021218:	f000 80ef 	beq.w	80213fa <ota_process_data+0x216>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 802121c:	4b7e      	ldr	r3, [pc, #504]	; (8021418 <ota_process_data+0x234>)
 802121e:	781b      	ldrb	r3, [r3, #0]
 8021220:	2b04      	cmp	r3, #4
 8021222:	f200 80e4 	bhi.w	80213ee <ota_process_data+0x20a>
 8021226:	a201      	add	r2, pc, #4	; (adr r2, 802122c <ota_process_data+0x48>)
 8021228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802122c:	08021241 	.word	0x08021241
 8021230:	0802124f 	.word	0x0802124f
 8021234:	0802127b 	.word	0x0802127b
 8021238:	080212b7 	.word	0x080212b7
 802123c:	08021337 	.word	0x08021337
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 8021240:	4876      	ldr	r0, [pc, #472]	; (802141c <ota_process_data+0x238>)
 8021242:	f00c fbe9 	bl	802da18 <puts>
				ret = OTA_EX_OK;
 8021246:	2300      	movs	r3, #0
 8021248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
			break;
 802124c:	e0de      	b.n	802140c <ota_process_data+0x228>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	62bb      	str	r3, [r7, #40]	; 0x28
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 8021252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021254:	785b      	ldrb	r3, [r3, #1]
 8021256:	2b00      	cmp	r3, #0
 8021258:	f040 80d1 	bne.w	80213fe <ota_process_data+0x21a>
				{
					if( cmd->cmd == OTA_CMD_START)
 802125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802125e:	791b      	ldrb	r3, [r3, #4]
 8021260:	2b00      	cmp	r3, #0
 8021262:	f040 80cc 	bne.w	80213fe <ota_process_data+0x21a>
					{
						printf("Received OTA Start command\r\n");
 8021266:	486e      	ldr	r0, [pc, #440]	; (8021420 <ota_process_data+0x23c>)
 8021268:	f00c fbd6 	bl	802da18 <puts>
						ota_state = OTA_STATE_HEADER;
 802126c:	4b6a      	ldr	r3, [pc, #424]	; (8021418 <ota_process_data+0x234>)
 802126e:	2202      	movs	r2, #2
 8021270:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 8021272:	2300      	movs	r3, #0
 8021274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
				}
			}
			break;
 8021278:	e0c1      	b.n	80213fe <ota_process_data+0x21a>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 802127a:	687b      	ldr	r3, [r7, #4]
 802127c:	62fb      	str	r3, [r7, #44]	; 0x2c

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 802127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021280:	785b      	ldrb	r3, [r3, #1]
 8021282:	2b02      	cmp	r3, #2
 8021284:	f040 80bd 	bne.w	8021402 <ota_process_data+0x21e>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8021288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802128a:	685b      	ldr	r3, [r3, #4]
 802128c:	4a65      	ldr	r2, [pc, #404]	; (8021424 <ota_process_data+0x240>)
 802128e:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8021290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021292:	689b      	ldr	r3, [r3, #8]
 8021294:	4a64      	ldr	r2, [pc, #400]	; (8021428 <ota_process_data+0x244>)
 8021296:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8021298:	4b64      	ldr	r3, [pc, #400]	; (802142c <ota_process_data+0x248>)
 802129a:	681b      	ldr	r3, [r3, #0]
 802129c:	4a62      	ldr	r2, [pc, #392]	; (8021428 <ota_process_data+0x244>)
 802129e:	6812      	ldr	r2, [r2, #0]
 80212a0:	4619      	mov	r1, r3
 80212a2:	4863      	ldr	r0, [pc, #396]	; (8021430 <ota_process_data+0x24c>)
 80212a4:	f00c fb32 	bl	802d90c <iprintf>
													ota_fw_received_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 80212a8:	4b5b      	ldr	r3, [pc, #364]	; (8021418 <ota_process_data+0x234>)
 80212aa:	2203      	movs	r2, #3
 80212ac:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 80212ae:	2300      	movs	r3, #0
 80212b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

				}
			}
			break;
 80212b4:	e0a5      	b.n	8021402 <ota_process_data+0x21e>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	637b      	str	r3, [r7, #52]	; 0x34
				uint16_t			data_len = data->data_len;
 80212ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212bc:	789a      	ldrb	r2, [r3, #2]
 80212be:	78db      	ldrb	r3, [r3, #3]
 80212c0:	021b      	lsls	r3, r3, #8
 80212c2:	4313      	orrs	r3, r2
 80212c4:	867b      	strh	r3, [r7, #50]	; 0x32
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 80212c6:	2301      	movs	r3, #1
 80212c8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 80212cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212ce:	785b      	ldrb	r3, [r3, #1]
 80212d0:	2b01      	cmp	r3, #1
 80212d2:	f040 8098 	bne.w	8021406 <ota_process_data+0x222>

					bool is_first_block = false;
 80212d6:	2300      	movs	r3, #0
 80212d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					if( ota_fw_received_size == 0){
 80212dc:	4b53      	ldr	r3, [pc, #332]	; (802142c <ota_process_data+0x248>)
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d102      	bne.n	80212ea <ota_process_data+0x106>
						// This is the first block
						is_first_block = true;
 80212e4:	2301      	movs	r3, #1
 80212e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						//TODO: CFG if needed

					}

					/* Write the chunk to the Flash */
					ex = write_data_to_slot(buf+4, data_len, is_first_block);
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	3304      	adds	r3, #4
 80212ee:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80212f0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80212f4:	4618      	mov	r0, r3
 80212f6:	f000 f8ab 	bl	8021450 <write_data_to_slot>
 80212fa:	4603      	mov	r3, r0
 80212fc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					if( ex == HAL_OK)
 8021300:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8021304:	2b00      	cmp	r3, #0
 8021306:	d17e      	bne.n	8021406 <ota_process_data+0x222>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 8021308:	4b48      	ldr	r3, [pc, #288]	; (802142c <ota_process_data+0x248>)
 802130a:	681b      	ldr	r3, [r3, #0]
 802130c:	0a99      	lsrs	r1, r3, #10
 802130e:	4b45      	ldr	r3, [pc, #276]	; (8021424 <ota_process_data+0x240>)
 8021310:	681b      	ldr	r3, [r3, #0]
 8021312:	0a9b      	lsrs	r3, r3, #10
 8021314:	461a      	mov	r2, r3
 8021316:	4847      	ldr	r0, [pc, #284]	; (8021434 <ota_process_data+0x250>)
 8021318:	f00c faf8 	bl	802d90c <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 802131c:	4b43      	ldr	r3, [pc, #268]	; (802142c <ota_process_data+0x248>)
 802131e:	681a      	ldr	r2, [r3, #0]
 8021320:	4b40      	ldr	r3, [pc, #256]	; (8021424 <ota_process_data+0x240>)
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	429a      	cmp	r2, r3
 8021326:	d302      	bcc.n	802132e <ota_process_data+0x14a>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 8021328:	4b3b      	ldr	r3, [pc, #236]	; (8021418 <ota_process_data+0x234>)
 802132a:	2204      	movs	r2, #4
 802132c:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 802132e:	2300      	movs	r3, #0
 8021330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					}
				}
			}
			break;
 8021334:	e067      	b.n	8021406 <ota_process_data+0x222>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8021336:	687b      	ldr	r3, [r7, #4]
 8021338:	63fb      	str	r3, [r7, #60]	; 0x3c

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 802133a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802133c:	785b      	ldrb	r3, [r3, #1]
 802133e:	2b00      	cmp	r3, #0
 8021340:	d163      	bne.n	802140a <ota_process_data+0x226>
				{
					if( cmd->cmd )
 8021342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021344:	791b      	ldrb	r3, [r3, #4]
 8021346:	2b00      	cmp	r3, #0
 8021348:	d05f      	beq.n	802140a <ota_process_data+0x226>
					{
						printf("Received OTA END COMMAND\r\n");
 802134a:	483b      	ldr	r0, [pc, #236]	; (8021438 <ota_process_data+0x254>)
 802134c:	f00c fb64 	bl	802da18 <puts>

						printf("Validating the received Binary....\r\n");
 8021350:	483a      	ldr	r0, [pc, #232]	; (802143c <ota_process_data+0x258>)
 8021352:	f00c fb61 	bl	802da18 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR
 8021356:	4b33      	ldr	r3, [pc, #204]	; (8021424 <ota_process_data+0x240>)
 8021358:	681b      	ldr	r3, [r3, #0]
 802135a:	4619      	mov	r1, r3
 802135c:	4838      	ldr	r0, [pc, #224]	; (8021440 <ota_process_data+0x25c>)
 802135e:	f000 f9a3 	bl	80216a8 <ota_calcCRC>
 8021362:	63b8      	str	r0, [r7, #56]	; 0x38
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 8021364:	4b30      	ldr	r3, [pc, #192]	; (8021428 <ota_process_data+0x244>)
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802136a:	429a      	cmp	r2, r3
 802136c:	d007      	beq.n	802137e <ota_process_data+0x19a>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 802136e:	4b2e      	ldr	r3, [pc, #184]	; (8021428 <ota_process_data+0x244>)
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	461a      	mov	r2, r3
 8021374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8021376:	4833      	ldr	r0, [pc, #204]	; (8021444 <ota_process_data+0x260>)
 8021378:	f00c fac8 	bl	802d90c <iprintf>
 802137c:	e046      	b.n	802140c <ota_process_data+0x228>
																			cal_crc, ota_fw_crc);
							break;
						}

						printf("Validated Successfully!\r\n");
 802137e:	4832      	ldr	r0, [pc, #200]	; (8021448 <ota_process_data+0x264>)
 8021380:	f00c fb4a 	bl	802da18 <puts>

						// TODO: Update CFG

						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8021384:	4b31      	ldr	r3, [pc, #196]	; (802144c <ota_process_data+0x268>)
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	f107 040c 	add.w	r4, r7, #12
 802138c:	461d      	mov	r5, r3
 802138e:	6828      	ldr	r0, [r5, #0]
 8021390:	6869      	ldr	r1, [r5, #4]
 8021392:	68aa      	ldr	r2, [r5, #8]
 8021394:	68eb      	ldr	r3, [r5, #12]
 8021396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021398:	6928      	ldr	r0, [r5, #16]
 802139a:	6969      	ldr	r1, [r5, #20]
 802139c:	c403      	stmia	r4!, {r0, r1}
 802139e:	8b2b      	ldrh	r3, [r5, #24]
 80213a0:	7eaa      	ldrb	r2, [r5, #26]
 80213a2:	8023      	strh	r3, [r4, #0]
 80213a4:	4613      	mov	r3, r2
 80213a6:	70a3      	strb	r3, [r4, #2]

						// update information
						cfg.slot_table.fw_crc					= cal_crc;
 80213a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213aa:	f8c7 3017 	str.w	r3, [r7, #23]
						cfg.slot_table.fw_size					= ota_fw_total_size;
 80213ae:	4b1d      	ldr	r3, [pc, #116]	; (8021424 <ota_process_data+0x240>)
 80213b0:	681b      	ldr	r3, [r3, #0]
 80213b2:	f8c7 3013 	str.w	r3, [r7, #19]
						cfg.slot_table.is_this_slot_not_valid	= 0u;
 80213b6:	2300      	movs	r3, #0
 80213b8:	743b      	strb	r3, [r7, #16]
						cfg.slot_table.should_we_run_this_fw	= 1u;
 80213ba:	2301      	movs	r3, #1
 80213bc:	74bb      	strb	r3, [r7, #18]
						cfg.slot_table.is_this_slot_active		= 0u;
 80213be:	2300      	movs	r3, #0
 80213c0:	747b      	strb	r3, [r7, #17]

						// update the reboot reason
						cfg.reboot_cause = OTA_UPDATE_APP;
 80213c2:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 80213c6:	60fb      	str	r3, [r7, #12]

						// Write config to flash
						ret = write_cfg_to_flash( &cfg );
 80213c8:	f107 030c 	add.w	r3, r7, #12
 80213cc:	4618      	mov	r0, r3
 80213ce:	f000 f8c3 	bl	8021558 <write_cfg_to_flash>
 80213d2:	4603      	mov	r3, r0
 80213d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if( ret == OTA_EX_OK )
 80213d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d114      	bne.n	802140a <ota_process_data+0x226>
						{
							ota_state = OTA_STATE_IDLE;
 80213e0:	4b0d      	ldr	r3, [pc, #52]	; (8021418 <ota_process_data+0x234>)
 80213e2:	2200      	movs	r2, #0
 80213e4:	701a      	strb	r2, [r3, #0]
							ret = OTA_EX_OK;
 80213e6:	2300      	movs	r3, #0
 80213e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
					}
				}
			}
			break;
 80213ec:	e00d      	b.n	802140a <ota_process_data+0x226>

			default:
			{
				ret = OTA_EX_ERR;
 80213ee:	2301      	movs	r3, #1
 80213f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
			break;
 80213f4:	e00a      	b.n	802140c <ota_process_data+0x228>
		};
 80213f6:	bf00      	nop
 80213f8:	e008      	b.n	802140c <ota_process_data+0x228>
				break;
 80213fa:	bf00      	nop
 80213fc:	e006      	b.n	802140c <ota_process_data+0x228>
			break;
 80213fe:	bf00      	nop
 8021400:	e004      	b.n	802140c <ota_process_data+0x228>
			break;
 8021402:	bf00      	nop
 8021404:	e002      	b.n	802140c <ota_process_data+0x228>
			break;
 8021406:	bf00      	nop
 8021408:	e000      	b.n	802140c <ota_process_data+0x228>
			break;
 802140a:	bf00      	nop
	}while(false);

	return ret;
 802140c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8021410:	4618      	mov	r0, r3
 8021412:	3748      	adds	r7, #72	; 0x48
 8021414:	46bd      	mov	sp, r7
 8021416:	bdb0      	pop	{r4, r5, r7, pc}
 8021418:	20000405 	.word	0x20000405
 802141c:	0802ecbc 	.word	0x0802ecbc
 8021420:	0802ecd0 	.word	0x0802ecd0
 8021424:	20000408 	.word	0x20000408
 8021428:	2000040c 	.word	0x2000040c
 802142c:	20000410 	.word	0x20000410
 8021430:	0802ecec 	.word	0x0802ecec
 8021434:	0802ed28 	.word	0x0802ed28
 8021438:	0802ed34 	.word	0x0802ed34
 802143c:	0802ed50 	.word	0x0802ed50
 8021440:	08120000 	.word	0x08120000
 8021444:	0802ed74 	.word	0x0802ed74
 8021448:	0802edb8 	.word	0x0802edb8
 802144c:	20000000 	.word	0x20000000

08021450 <write_data_to_slot>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_slot(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 8021450:	b5b0      	push	{r4, r5, r7, lr}
 8021452:	b08e      	sub	sp, #56	; 0x38
 8021454:	af00      	add	r7, sp, #0
 8021456:	60f8      	str	r0, [r7, #12]
 8021458:	60b9      	str	r1, [r7, #8]
 802145a:	4613      	mov	r3, r2
 802145c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 802145e:	2301      	movs	r3, #1
 8021460:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 8021464:	f002 ffde 	bl	8024424 <HAL_FLASH_Unlock>
 8021468:	4603      	mov	r3, r0
 802146a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 802146e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021472:	2b00      	cmp	r3, #0
 8021474:	d15d      	bne.n	8021532 <write_data_to_slot+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 8021476:	79fb      	ldrb	r3, [r7, #7]
 8021478:	2b00      	cmp	r3, #0
 802147a:	d01f      	beq.n	80214bc <write_data_to_slot+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 802147c:	4831      	ldr	r0, [pc, #196]	; (8021544 <write_data_to_slot+0xf4>)
 802147e:	f00c facb 	bl	802da18 <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 8021482:	2300      	movs	r3, #0
 8021484:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_SLOT_SECTOR;
 8021486:	2311      	movs	r3, #17
 8021488:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_SLOT_NB_SECTOR;
 802148a:	2307      	movs	r3, #7
 802148c:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 802148e:	2302      	movs	r3, #2
 8021490:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8021492:	f107 0214 	add.w	r2, r7, #20
 8021496:	f107 0318 	add.w	r3, r7, #24
 802149a:	4611      	mov	r1, r2
 802149c:	4618      	mov	r0, r3
 802149e:	f003 f933 	bl	8024708 <HAL_FLASHEx_Erase>
 80214a2:	4603      	mov	r3, r0
 80214a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 80214a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80214ac:	2b00      	cmp	r3, #0
 80214ae:	d005      	beq.n	80214bc <write_data_to_slot+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 80214b0:	697b      	ldr	r3, [r7, #20]
 80214b2:	4619      	mov	r1, r3
 80214b4:	4824      	ldr	r0, [pc, #144]	; (8021548 <write_data_to_slot+0xf8>)
 80214b6:	f00c fa29 	bl	802d90c <iprintf>
 80214ba:	e03d      	b.n	8021538 <write_data_to_slot+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_SLOT_FLASH_ADDR;
 80214bc:	4b23      	ldr	r3, [pc, #140]	; (802154c <write_data_to_slot+0xfc>)
 80214be:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 80214c0:	2300      	movs	r3, #0
 80214c2:	633b      	str	r3, [r7, #48]	; 0x30
 80214c4:	e024      	b.n	8021510 <write_data_to_slot+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80214c6:	4b22      	ldr	r3, [pc, #136]	; (8021550 <write_data_to_slot+0x100>)
 80214c8:	681a      	ldr	r2, [r3, #0]
 80214ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214cc:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 80214ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214d0:	68fa      	ldr	r2, [r7, #12]
 80214d2:	4413      	add	r3, r2
 80214d4:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80214d6:	b2db      	uxtb	r3, r3
 80214d8:	2200      	movs	r2, #0
 80214da:	461c      	mov	r4, r3
 80214dc:	4615      	mov	r5, r2
 80214de:	4622      	mov	r2, r4
 80214e0:	462b      	mov	r3, r5
 80214e2:	2000      	movs	r0, #0
 80214e4:	f002 ff4a 	bl	802437c <HAL_FLASH_Program>
 80214e8:	4603      	mov	r3, r0
 80214ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 80214ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80214f2:	2b00      	cmp	r3, #0
 80214f4:	d105      	bne.n	8021502 <write_data_to_slot+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 80214f6:	4b16      	ldr	r3, [pc, #88]	; (8021550 <write_data_to_slot+0x100>)
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	3301      	adds	r3, #1
 80214fc:	4a14      	ldr	r2, [pc, #80]	; (8021550 <write_data_to_slot+0x100>)
 80214fe:	6013      	str	r3, [r2, #0]
 8021500:	e003      	b.n	802150a <write_data_to_slot+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 8021502:	4814      	ldr	r0, [pc, #80]	; (8021554 <write_data_to_slot+0x104>)
 8021504:	f00c fa88 	bl	802da18 <puts>
				break;
 8021508:	e006      	b.n	8021518 <write_data_to_slot+0xc8>
		for( int i = 0; i < data_len; i++)
 802150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802150c:	3301      	adds	r3, #1
 802150e:	633b      	str	r3, [r7, #48]	; 0x30
 8021510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021512:	68ba      	ldr	r2, [r7, #8]
 8021514:	429a      	cmp	r2, r3
 8021516:	d8d6      	bhi.n	80214c6 <write_data_to_slot+0x76>
			}
		}

		if( ret != HAL_OK )
 8021518:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802151c:	2b00      	cmp	r3, #0
 802151e:	d10a      	bne.n	8021536 <write_data_to_slot+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 8021520:	f002 ffa2 	bl	8024468 <HAL_FLASH_Lock>
 8021524:	4603      	mov	r3, r0
 8021526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 802152a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802152e:	2b00      	cmp	r3, #0
 8021530:	e002      	b.n	8021538 <write_data_to_slot+0xe8>
			break;
 8021532:	bf00      	nop
 8021534:	e000      	b.n	8021538 <write_data_to_slot+0xe8>
			break;
 8021536:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 8021538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 802153c:	4618      	mov	r0, r3
 802153e:	3738      	adds	r7, #56	; 0x38
 8021540:	46bd      	mov	sp, r7
 8021542:	bdb0      	pop	{r4, r5, r7, pc}
 8021544:	0802edd4 	.word	0x0802edd4
 8021548:	0802edf8 	.word	0x0802edf8
 802154c:	08120000 	.word	0x08120000
 8021550:	20000410 	.word	0x20000410
 8021554:	0802ee20 	.word	0x0802ee20

08021558 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 8021558:	b5b0      	push	{r4, r5, r7, lr}
 802155a:	b08c      	sub	sp, #48	; 0x30
 802155c:	af00      	add	r7, sp, #0
 802155e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8021560:	2301      	movs	r3, #1
 8021562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 8021566:	687b      	ldr	r3, [r7, #4]
 8021568:	2b00      	cmp	r3, #0
 802156a:	d05f      	beq.n	802162c <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 802156c:	f002 ff5a 	bl	8024424 <HAL_FLASH_Unlock>
 8021570:	4603      	mov	r3, r0
 8021572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 8021576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802157a:	2b00      	cmp	r3, #0
 802157c:	d158      	bne.n	8021630 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 802157e:	f04f 30ff 	mov.w	r0, #4294967295
 8021582:	f002 ff81 	bl	8024488 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8021586:	2300      	movs	r3, #0
 8021588:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 802158a:	2304      	movs	r3, #4
 802158c:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 802158e:	2301      	movs	r3, #1
 8021590:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 8021592:	2302      	movs	r3, #2
 8021594:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8021596:	4b2c      	ldr	r3, [pc, #176]	; (8021648 <write_cfg_to_flash+0xf0>)
 8021598:	2273      	movs	r2, #115	; 0x73
 802159a:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 802159c:	f107 020c 	add.w	r2, r7, #12
 80215a0:	f107 0310 	add.w	r3, r7, #16
 80215a4:	4611      	mov	r1, r2
 80215a6:	4618      	mov	r0, r3
 80215a8:	f003 f8ae 	bl	8024708 <HAL_FLASHEx_Erase>
 80215ac:	4603      	mov	r3, r0
 80215ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80215b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	d13c      	bne.n	8021634 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215be:	2300      	movs	r3, #0
 80215c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80215c2:	e01f      	b.n	8021604 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215c6:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80215ca:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 80215ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215d2:	4413      	add	r3, r2
 80215d4:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215d6:	b2db      	uxtb	r3, r3
 80215d8:	2200      	movs	r2, #0
 80215da:	461c      	mov	r4, r3
 80215dc:	4615      	mov	r5, r2
 80215de:	4622      	mov	r2, r4
 80215e0:	462b      	mov	r3, r5
 80215e2:	2000      	movs	r0, #0
 80215e4:	f002 feca 	bl	802437c <HAL_FLASH_Program>
 80215e8:	4603      	mov	r3, r0
 80215ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 80215ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d003      	beq.n	80215fe <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 80215f6:	4815      	ldr	r0, [pc, #84]	; (802164c <write_cfg_to_flash+0xf4>)
 80215f8:	f00c fa0e 	bl	802da18 <puts>
				break;
 80215fc:	e005      	b.n	802160a <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021600:	3301      	adds	r3, #1
 8021602:	62bb      	str	r3, [r7, #40]	; 0x28
 8021604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021606:	2b1a      	cmp	r3, #26
 8021608:	d9dc      	bls.n	80215c4 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 802160a:	f04f 30ff 	mov.w	r0, #4294967295
 802160e:	f002 ff3b 	bl	8024488 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8021612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021616:	2b00      	cmp	r3, #0
 8021618:	d10e      	bne.n	8021638 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 802161a:	f002 ff25 	bl	8024468 <HAL_FLASH_Lock>
 802161e:	4603      	mov	r3, r0
 8021620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8021624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021628:	2b00      	cmp	r3, #0
 802162a:	e006      	b.n	802163a <write_cfg_to_flash+0xe2>
			break;
 802162c:	bf00      	nop
 802162e:	e004      	b.n	802163a <write_cfg_to_flash+0xe2>
			break;
 8021630:	bf00      	nop
 8021632:	e002      	b.n	802163a <write_cfg_to_flash+0xe2>
			break;
 8021634:	bf00      	nop
 8021636:	e000      	b.n	802163a <write_cfg_to_flash+0xe2>
	      break;
 8021638:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 802163a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802163e:	4618      	mov	r0, r3
 8021640:	3730      	adds	r7, #48	; 0x30
 8021642:	46bd      	mov	sp, r7
 8021644:	bdb0      	pop	{r4, r5, r7, pc}
 8021646:	bf00      	nop
 8021648:	40023c00 	.word	0x40023c00
 802164c:	0802ee34 	.word	0x0802ee34

08021650 <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8021650:	b580      	push	{r7, lr}
 8021652:	b086      	sub	sp, #24
 8021654:	af00      	add	r7, sp, #0
 8021656:	6078      	str	r0, [r7, #4]
 8021658:	460b      	mov	r3, r1
 802165a:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 802165c:	f107 030c 	add.w	r3, r7, #12
 8021660:	2200      	movs	r2, #0
 8021662:	601a      	str	r2, [r3, #0]
 8021664:	605a      	str	r2, [r3, #4]
 8021666:	811a      	strh	r2, [r3, #8]
 8021668:	23aa      	movs	r3, #170	; 0xaa
 802166a:	733b      	strb	r3, [r7, #12]
 802166c:	2303      	movs	r3, #3
 802166e:	737b      	strb	r3, [r7, #13]
 8021670:	2301      	movs	r3, #1
 8021672:	81fb      	strh	r3, [r7, #14]
 8021674:	78fb      	ldrb	r3, [r7, #3]
 8021676:	743b      	strb	r3, [r7, #16]
 8021678:	23bb      	movs	r3, #187	; 0xbb
 802167a:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 802167c:	f107 030c 	add.w	r3, r7, #12
 8021680:	3304      	adds	r3, #4
 8021682:	2101      	movs	r1, #1
 8021684:	4618      	mov	r0, r3
 8021686:	f000 f80f 	bl	80216a8 <ota_calcCRC>
 802168a:	4603      	mov	r3, r0
 802168c:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 8021690:	f107 010c 	add.w	r1, r7, #12
 8021694:	f04f 33ff 	mov.w	r3, #4294967295
 8021698:	220a      	movs	r2, #10
 802169a:	6878      	ldr	r0, [r7, #4]
 802169c:	f008 f801 	bl	80296a2 <HAL_UART_Transmit>

}
 80216a0:	bf00      	nop
 80216a2:	3718      	adds	r7, #24
 80216a4:	46bd      	mov	sp, r7
 80216a6:	bd80      	pop	{r7, pc}

080216a8 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80216a8:	b480      	push	{r7}
 80216aa:	b087      	sub	sp, #28
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	6078      	str	r0, [r7, #4]
 80216b0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80216b2:	f04f 33ff 	mov.w	r3, #4294967295
 80216b6:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216b8:	2300      	movs	r3, #0
 80216ba:	613b      	str	r3, [r7, #16]
 80216bc:	e014      	b.n	80216e8 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80216be:	697b      	ldr	r3, [r7, #20]
 80216c0:	0e1b      	lsrs	r3, r3, #24
 80216c2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80216c4:	687a      	ldr	r2, [r7, #4]
 80216c6:	693b      	ldr	r3, [r7, #16]
 80216c8:	4413      	add	r3, r2
 80216ca:	781a      	ldrb	r2, [r3, #0]
 80216cc:	7bfb      	ldrb	r3, [r7, #15]
 80216ce:	4053      	eors	r3, r2
 80216d0:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80216d2:	697b      	ldr	r3, [r7, #20]
 80216d4:	021a      	lsls	r2, r3, #8
 80216d6:	7bfb      	ldrb	r3, [r7, #15]
 80216d8:	4909      	ldr	r1, [pc, #36]	; (8021700 <ota_calcCRC+0x58>)
 80216da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80216de:	4053      	eors	r3, r2
 80216e0:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216e2:	693b      	ldr	r3, [r7, #16]
 80216e4:	3301      	adds	r3, #1
 80216e6:	613b      	str	r3, [r7, #16]
 80216e8:	693a      	ldr	r2, [r7, #16]
 80216ea:	683b      	ldr	r3, [r7, #0]
 80216ec:	429a      	cmp	r2, r3
 80216ee:	d3e6      	bcc.n	80216be <ota_calcCRC+0x16>
    }
    return Checksum;
 80216f0:	697b      	ldr	r3, [r7, #20]
}
 80216f2:	4618      	mov	r0, r3
 80216f4:	371c      	adds	r7, #28
 80216f6:	46bd      	mov	sp, r7
 80216f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216fc:	4770      	bx	lr
 80216fe:	bf00      	nop
 8021700:	0802ee58 	.word	0x0802ee58

08021704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021704:	b480      	push	{r7}
 8021706:	b083      	sub	sp, #12
 8021708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802170a:	2300      	movs	r3, #0
 802170c:	607b      	str	r3, [r7, #4]
 802170e:	4b10      	ldr	r3, [pc, #64]	; (8021750 <HAL_MspInit+0x4c>)
 8021710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021712:	4a0f      	ldr	r2, [pc, #60]	; (8021750 <HAL_MspInit+0x4c>)
 8021714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021718:	6453      	str	r3, [r2, #68]	; 0x44
 802171a:	4b0d      	ldr	r3, [pc, #52]	; (8021750 <HAL_MspInit+0x4c>)
 802171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021722:	607b      	str	r3, [r7, #4]
 8021724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8021726:	2300      	movs	r3, #0
 8021728:	603b      	str	r3, [r7, #0]
 802172a:	4b09      	ldr	r3, [pc, #36]	; (8021750 <HAL_MspInit+0x4c>)
 802172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802172e:	4a08      	ldr	r2, [pc, #32]	; (8021750 <HAL_MspInit+0x4c>)
 8021730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021734:	6413      	str	r3, [r2, #64]	; 0x40
 8021736:	4b06      	ldr	r3, [pc, #24]	; (8021750 <HAL_MspInit+0x4c>)
 8021738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802173e:	603b      	str	r3, [r7, #0]
 8021740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021742:	bf00      	nop
 8021744:	370c      	adds	r7, #12
 8021746:	46bd      	mov	sp, r7
 8021748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174c:	4770      	bx	lr
 802174e:	bf00      	nop
 8021750:	40023800 	.word	0x40023800

08021754 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8021754:	b480      	push	{r7}
 8021756:	b085      	sub	sp, #20
 8021758:	af00      	add	r7, sp, #0
 802175a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 802175c:	687b      	ldr	r3, [r7, #4]
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	4a0b      	ldr	r2, [pc, #44]	; (8021790 <HAL_CRC_MspInit+0x3c>)
 8021762:	4293      	cmp	r3, r2
 8021764:	d10d      	bne.n	8021782 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8021766:	2300      	movs	r3, #0
 8021768:	60fb      	str	r3, [r7, #12]
 802176a:	4b0a      	ldr	r3, [pc, #40]	; (8021794 <HAL_CRC_MspInit+0x40>)
 802176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176e:	4a09      	ldr	r2, [pc, #36]	; (8021794 <HAL_CRC_MspInit+0x40>)
 8021770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021774:	6313      	str	r3, [r2, #48]	; 0x30
 8021776:	4b07      	ldr	r3, [pc, #28]	; (8021794 <HAL_CRC_MspInit+0x40>)
 8021778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802177a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802177e:	60fb      	str	r3, [r7, #12]
 8021780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8021782:	bf00      	nop
 8021784:	3714      	adds	r7, #20
 8021786:	46bd      	mov	sp, r7
 8021788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802178c:	4770      	bx	lr
 802178e:	bf00      	nop
 8021790:	40023000 	.word	0x40023000
 8021794:	40023800 	.word	0x40023800

08021798 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b084      	sub	sp, #16
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	4a0e      	ldr	r2, [pc, #56]	; (80217e0 <HAL_DMA2D_MspInit+0x48>)
 80217a6:	4293      	cmp	r3, r2
 80217a8:	d115      	bne.n	80217d6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80217aa:	2300      	movs	r3, #0
 80217ac:	60fb      	str	r3, [r7, #12]
 80217ae:	4b0d      	ldr	r3, [pc, #52]	; (80217e4 <HAL_DMA2D_MspInit+0x4c>)
 80217b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217b2:	4a0c      	ldr	r2, [pc, #48]	; (80217e4 <HAL_DMA2D_MspInit+0x4c>)
 80217b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80217b8:	6313      	str	r3, [r2, #48]	; 0x30
 80217ba:	4b0a      	ldr	r3, [pc, #40]	; (80217e4 <HAL_DMA2D_MspInit+0x4c>)
 80217bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80217c2:	60fb      	str	r3, [r7, #12]
 80217c4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80217c6:	2200      	movs	r2, #0
 80217c8:	2105      	movs	r1, #5
 80217ca:	205a      	movs	r0, #90	; 0x5a
 80217cc:	f002 f836 	bl	802383c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80217d0:	205a      	movs	r0, #90	; 0x5a
 80217d2:	f002 f84f 	bl	8023874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80217d6:	bf00      	nop
 80217d8:	3710      	adds	r7, #16
 80217da:	46bd      	mov	sp, r7
 80217dc:	bd80      	pop	{r7, pc}
 80217de:	bf00      	nop
 80217e0:	4002b000 	.word	0x4002b000
 80217e4:	40023800 	.word	0x40023800

080217e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80217e8:	b580      	push	{r7, lr}
 80217ea:	b08a      	sub	sp, #40	; 0x28
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80217f0:	f107 0314 	add.w	r3, r7, #20
 80217f4:	2200      	movs	r2, #0
 80217f6:	601a      	str	r2, [r3, #0]
 80217f8:	605a      	str	r2, [r3, #4]
 80217fa:	609a      	str	r2, [r3, #8]
 80217fc:	60da      	str	r2, [r3, #12]
 80217fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	681b      	ldr	r3, [r3, #0]
 8021804:	4a29      	ldr	r2, [pc, #164]	; (80218ac <HAL_I2C_MspInit+0xc4>)
 8021806:	4293      	cmp	r3, r2
 8021808:	d14b      	bne.n	80218a2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802180a:	2300      	movs	r3, #0
 802180c:	613b      	str	r3, [r7, #16]
 802180e:	4b28      	ldr	r3, [pc, #160]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021812:	4a27      	ldr	r2, [pc, #156]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021814:	f043 0304 	orr.w	r3, r3, #4
 8021818:	6313      	str	r3, [r2, #48]	; 0x30
 802181a:	4b25      	ldr	r3, [pc, #148]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 802181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802181e:	f003 0304 	and.w	r3, r3, #4
 8021822:	613b      	str	r3, [r7, #16]
 8021824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021826:	2300      	movs	r3, #0
 8021828:	60fb      	str	r3, [r7, #12]
 802182a:	4b21      	ldr	r3, [pc, #132]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 802182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802182e:	4a20      	ldr	r2, [pc, #128]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021830:	f043 0301 	orr.w	r3, r3, #1
 8021834:	6313      	str	r3, [r2, #48]	; 0x30
 8021836:	4b1e      	ldr	r3, [pc, #120]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802183a:	f003 0301 	and.w	r3, r3, #1
 802183e:	60fb      	str	r3, [r7, #12]
 8021840:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8021842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021848:	2312      	movs	r3, #18
 802184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802184c:	2301      	movs	r3, #1
 802184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021850:	2300      	movs	r3, #0
 8021852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021854:	2304      	movs	r3, #4
 8021856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021858:	f107 0314 	add.w	r3, r7, #20
 802185c:	4619      	mov	r1, r3
 802185e:	4815      	ldr	r0, [pc, #84]	; (80218b4 <HAL_I2C_MspInit+0xcc>)
 8021860:	f003 f892 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802186a:	2312      	movs	r3, #18
 802186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802186e:	2301      	movs	r3, #1
 8021870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021872:	2300      	movs	r3, #0
 8021874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021876:	2304      	movs	r3, #4
 8021878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 802187a:	f107 0314 	add.w	r3, r7, #20
 802187e:	4619      	mov	r1, r3
 8021880:	480d      	ldr	r0, [pc, #52]	; (80218b8 <HAL_I2C_MspInit+0xd0>)
 8021882:	f003 f881 	bl	8024988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8021886:	2300      	movs	r3, #0
 8021888:	60bb      	str	r3, [r7, #8]
 802188a:	4b09      	ldr	r3, [pc, #36]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 802188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802188e:	4a08      	ldr	r2, [pc, #32]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021894:	6413      	str	r3, [r2, #64]	; 0x40
 8021896:	4b06      	ldr	r3, [pc, #24]	; (80218b0 <HAL_I2C_MspInit+0xc8>)
 8021898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802189a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 802189e:	60bb      	str	r3, [r7, #8]
 80218a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80218a2:	bf00      	nop
 80218a4:	3728      	adds	r7, #40	; 0x28
 80218a6:	46bd      	mov	sp, r7
 80218a8:	bd80      	pop	{r7, pc}
 80218aa:	bf00      	nop
 80218ac:	40005c00 	.word	0x40005c00
 80218b0:	40023800 	.word	0x40023800
 80218b4:	40020800 	.word	0x40020800
 80218b8:	40020000 	.word	0x40020000

080218bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80218bc:	b580      	push	{r7, lr}
 80218be:	b09a      	sub	sp, #104	; 0x68
 80218c0:	af00      	add	r7, sp, #0
 80218c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80218c8:	2200      	movs	r2, #0
 80218ca:	601a      	str	r2, [r3, #0]
 80218cc:	605a      	str	r2, [r3, #4]
 80218ce:	609a      	str	r2, [r3, #8]
 80218d0:	60da      	str	r2, [r3, #12]
 80218d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80218d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218d8:	2230      	movs	r2, #48	; 0x30
 80218da:	2100      	movs	r1, #0
 80218dc:	4618      	mov	r0, r3
 80218de:	f00b ff2d 	bl	802d73c <memset>
  if(hltdc->Instance==LTDC)
 80218e2:	687b      	ldr	r3, [r7, #4]
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	4a85      	ldr	r2, [pc, #532]	; (8021afc <HAL_LTDC_MspInit+0x240>)
 80218e8:	4293      	cmp	r3, r2
 80218ea:	f040 8102 	bne.w	8021af2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80218ee:	2308      	movs	r3, #8
 80218f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80218f2:	2331      	movs	r3, #49	; 0x31
 80218f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80218f6:	2302      	movs	r3, #2
 80218f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80218fa:	2300      	movs	r3, #0
 80218fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80218fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021902:	4618      	mov	r0, r3
 8021904:	f006 f9ce 	bl	8027ca4 <HAL_RCCEx_PeriphCLKConfig>
 8021908:	4603      	mov	r3, r0
 802190a:	2b00      	cmp	r3, #0
 802190c:	d001      	beq.n	8021912 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 802190e:	f7ff fb01 	bl	8020f14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021912:	2300      	movs	r3, #0
 8021914:	623b      	str	r3, [r7, #32]
 8021916:	4b7a      	ldr	r3, [pc, #488]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802191a:	4a79      	ldr	r2, [pc, #484]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 802191c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021920:	6453      	str	r3, [r2, #68]	; 0x44
 8021922:	4b77      	ldr	r3, [pc, #476]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802192a:	623b      	str	r3, [r7, #32]
 802192c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 802192e:	2300      	movs	r3, #0
 8021930:	61fb      	str	r3, [r7, #28]
 8021932:	4b73      	ldr	r3, [pc, #460]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021936:	4a72      	ldr	r2, [pc, #456]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021938:	f043 0320 	orr.w	r3, r3, #32
 802193c:	6313      	str	r3, [r2, #48]	; 0x30
 802193e:	4b70      	ldr	r3, [pc, #448]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021942:	f003 0320 	and.w	r3, r3, #32
 8021946:	61fb      	str	r3, [r7, #28]
 8021948:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802194a:	2300      	movs	r3, #0
 802194c:	61bb      	str	r3, [r7, #24]
 802194e:	4b6c      	ldr	r3, [pc, #432]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021952:	4a6b      	ldr	r2, [pc, #428]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021954:	f043 0301 	orr.w	r3, r3, #1
 8021958:	6313      	str	r3, [r2, #48]	; 0x30
 802195a:	4b69      	ldr	r3, [pc, #420]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 802195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802195e:	f003 0301 	and.w	r3, r3, #1
 8021962:	61bb      	str	r3, [r7, #24]
 8021964:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021966:	2300      	movs	r3, #0
 8021968:	617b      	str	r3, [r7, #20]
 802196a:	4b65      	ldr	r3, [pc, #404]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 802196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802196e:	4a64      	ldr	r2, [pc, #400]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021970:	f043 0302 	orr.w	r3, r3, #2
 8021974:	6313      	str	r3, [r2, #48]	; 0x30
 8021976:	4b62      	ldr	r3, [pc, #392]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802197a:	f003 0302 	and.w	r3, r3, #2
 802197e:	617b      	str	r3, [r7, #20]
 8021980:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021982:	2300      	movs	r3, #0
 8021984:	613b      	str	r3, [r7, #16]
 8021986:	4b5e      	ldr	r3, [pc, #376]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198a:	4a5d      	ldr	r2, [pc, #372]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 802198c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021990:	6313      	str	r3, [r2, #48]	; 0x30
 8021992:	4b5b      	ldr	r3, [pc, #364]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 8021994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802199a:	613b      	str	r3, [r7, #16]
 802199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802199e:	2300      	movs	r3, #0
 80219a0:	60fb      	str	r3, [r7, #12]
 80219a2:	4b57      	ldr	r3, [pc, #348]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219a6:	4a56      	ldr	r2, [pc, #344]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219a8:	f043 0304 	orr.w	r3, r3, #4
 80219ac:	6313      	str	r3, [r2, #48]	; 0x30
 80219ae:	4b54      	ldr	r3, [pc, #336]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219b2:	f003 0304 	and.w	r3, r3, #4
 80219b6:	60fb      	str	r3, [r7, #12]
 80219b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80219ba:	2300      	movs	r3, #0
 80219bc:	60bb      	str	r3, [r7, #8]
 80219be:	4b50      	ldr	r3, [pc, #320]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219c2:	4a4f      	ldr	r2, [pc, #316]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219c4:	f043 0308 	orr.w	r3, r3, #8
 80219c8:	6313      	str	r3, [r2, #48]	; 0x30
 80219ca:	4b4d      	ldr	r3, [pc, #308]	; (8021b00 <HAL_LTDC_MspInit+0x244>)
 80219cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219ce:	f003 0308 	and.w	r3, r3, #8
 80219d2:	60bb      	str	r3, [r7, #8]
 80219d4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80219d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80219da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219dc:	2302      	movs	r3, #2
 80219de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219e0:	2300      	movs	r3, #0
 80219e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219e4:	2300      	movs	r3, #0
 80219e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219e8:	230e      	movs	r3, #14
 80219ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80219ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80219f0:	4619      	mov	r1, r3
 80219f2:	4844      	ldr	r0, [pc, #272]	; (8021b04 <HAL_LTDC_MspInit+0x248>)
 80219f4:	f002 ffc8 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80219f8:	f641 0358 	movw	r3, #6232	; 0x1858
 80219fc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219fe:	2302      	movs	r3, #2
 8021a00:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a02:	2300      	movs	r3, #0
 8021a04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a06:	2300      	movs	r3, #0
 8021a08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a0a:	230e      	movs	r3, #14
 8021a0c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021a0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a12:	4619      	mov	r1, r3
 8021a14:	483c      	ldr	r0, [pc, #240]	; (8021b08 <HAL_LTDC_MspInit+0x24c>)
 8021a16:	f002 ffb7 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021a1a:	2303      	movs	r3, #3
 8021a1c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a1e:	2302      	movs	r3, #2
 8021a20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a22:	2300      	movs	r3, #0
 8021a24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a26:	2300      	movs	r3, #0
 8021a28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021a2a:	2309      	movs	r3, #9
 8021a2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a32:	4619      	mov	r1, r3
 8021a34:	4835      	ldr	r0, [pc, #212]	; (8021b0c <HAL_LTDC_MspInit+0x250>)
 8021a36:	f002 ffa7 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021a3a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8021a3e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a40:	2302      	movs	r3, #2
 8021a42:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a44:	2300      	movs	r3, #0
 8021a46:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a48:	2300      	movs	r3, #0
 8021a4a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a4c:	230e      	movs	r3, #14
 8021a4e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a54:	4619      	mov	r1, r3
 8021a56:	482d      	ldr	r0, [pc, #180]	; (8021b0c <HAL_LTDC_MspInit+0x250>)
 8021a58:	f002 ff96 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021a5c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021a60:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a62:	2302      	movs	r3, #2
 8021a64:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a66:	2300      	movs	r3, #0
 8021a68:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a6e:	230e      	movs	r3, #14
 8021a70:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021a72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a76:	4619      	mov	r1, r3
 8021a78:	4825      	ldr	r0, [pc, #148]	; (8021b10 <HAL_LTDC_MspInit+0x254>)
 8021a7a:	f002 ff85 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8021a7e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8021a82:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a84:	2302      	movs	r3, #2
 8021a86:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a88:	2300      	movs	r3, #0
 8021a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a90:	230e      	movs	r3, #14
 8021a92:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021a94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a98:	4619      	mov	r1, r3
 8021a9a:	481e      	ldr	r0, [pc, #120]	; (8021b14 <HAL_LTDC_MspInit+0x258>)
 8021a9c:	f002 ff74 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8021aa0:	2348      	movs	r3, #72	; 0x48
 8021aa2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021aa4:	2302      	movs	r3, #2
 8021aa6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021aac:	2300      	movs	r3, #0
 8021aae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021ab0:	230e      	movs	r3, #14
 8021ab2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021ab4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ab8:	4619      	mov	r1, r3
 8021aba:	4817      	ldr	r0, [pc, #92]	; (8021b18 <HAL_LTDC_MspInit+0x25c>)
 8021abc:	f002 ff64 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8021ac0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021ac4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ac6:	2302      	movs	r3, #2
 8021ac8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021aca:	2300      	movs	r3, #0
 8021acc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ace:	2300      	movs	r3, #0
 8021ad0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021ad2:	2309      	movs	r3, #9
 8021ad4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ada:	4619      	mov	r1, r3
 8021adc:	480c      	ldr	r0, [pc, #48]	; (8021b10 <HAL_LTDC_MspInit+0x254>)
 8021ade:	f002 ff53 	bl	8024988 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	2105      	movs	r1, #5
 8021ae6:	2058      	movs	r0, #88	; 0x58
 8021ae8:	f001 fea8 	bl	802383c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021aec:	2058      	movs	r0, #88	; 0x58
 8021aee:	f001 fec1 	bl	8023874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021af2:	bf00      	nop
 8021af4:	3768      	adds	r7, #104	; 0x68
 8021af6:	46bd      	mov	sp, r7
 8021af8:	bd80      	pop	{r7, pc}
 8021afa:	bf00      	nop
 8021afc:	40016800 	.word	0x40016800
 8021b00:	40023800 	.word	0x40023800
 8021b04:	40021400 	.word	0x40021400
 8021b08:	40020000 	.word	0x40020000
 8021b0c:	40020400 	.word	0x40020400
 8021b10:	40021800 	.word	0x40021800
 8021b14:	40020800 	.word	0x40020800
 8021b18:	40020c00 	.word	0x40020c00

08021b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b08a      	sub	sp, #40	; 0x28
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b24:	f107 0314 	add.w	r3, r7, #20
 8021b28:	2200      	movs	r2, #0
 8021b2a:	601a      	str	r2, [r3, #0]
 8021b2c:	605a      	str	r2, [r3, #4]
 8021b2e:	609a      	str	r2, [r3, #8]
 8021b30:	60da      	str	r2, [r3, #12]
 8021b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	4a19      	ldr	r2, [pc, #100]	; (8021ba0 <HAL_SPI_MspInit+0x84>)
 8021b3a:	4293      	cmp	r3, r2
 8021b3c:	d12c      	bne.n	8021b98 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8021b3e:	2300      	movs	r3, #0
 8021b40:	613b      	str	r3, [r7, #16]
 8021b42:	4b18      	ldr	r3, [pc, #96]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b46:	4a17      	ldr	r2, [pc, #92]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8021b4e:	4b15      	ldr	r3, [pc, #84]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b56:	613b      	str	r3, [r7, #16]
 8021b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021b5a:	2300      	movs	r3, #0
 8021b5c:	60fb      	str	r3, [r7, #12]
 8021b5e:	4b11      	ldr	r3, [pc, #68]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b62:	4a10      	ldr	r2, [pc, #64]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b64:	f043 0320 	orr.w	r3, r3, #32
 8021b68:	6313      	str	r3, [r2, #48]	; 0x30
 8021b6a:	4b0e      	ldr	r3, [pc, #56]	; (8021ba4 <HAL_SPI_MspInit+0x88>)
 8021b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b6e:	f003 0320 	and.w	r3, r3, #32
 8021b72:	60fb      	str	r3, [r7, #12]
 8021b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021b76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b7c:	2302      	movs	r3, #2
 8021b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b80:	2300      	movs	r3, #0
 8021b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b84:	2300      	movs	r3, #0
 8021b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021b88:	2305      	movs	r3, #5
 8021b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021b8c:	f107 0314 	add.w	r3, r7, #20
 8021b90:	4619      	mov	r1, r3
 8021b92:	4805      	ldr	r0, [pc, #20]	; (8021ba8 <HAL_SPI_MspInit+0x8c>)
 8021b94:	f002 fef8 	bl	8024988 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021b98:	bf00      	nop
 8021b9a:	3728      	adds	r7, #40	; 0x28
 8021b9c:	46bd      	mov	sp, r7
 8021b9e:	bd80      	pop	{r7, pc}
 8021ba0:	40015000 	.word	0x40015000
 8021ba4:	40023800 	.word	0x40023800
 8021ba8:	40021400 	.word	0x40021400

08021bac <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021bac:	b580      	push	{r7, lr}
 8021bae:	b082      	sub	sp, #8
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	681b      	ldr	r3, [r3, #0]
 8021bb8:	4a08      	ldr	r2, [pc, #32]	; (8021bdc <HAL_SPI_MspDeInit+0x30>)
 8021bba:	4293      	cmp	r3, r2
 8021bbc:	d10a      	bne.n	8021bd4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8021bbe:	4b08      	ldr	r3, [pc, #32]	; (8021be0 <HAL_SPI_MspDeInit+0x34>)
 8021bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bc2:	4a07      	ldr	r2, [pc, #28]	; (8021be0 <HAL_SPI_MspDeInit+0x34>)
 8021bc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021bc8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021bca:	f44f 7160 	mov.w	r1, #896	; 0x380
 8021bce:	4805      	ldr	r0, [pc, #20]	; (8021be4 <HAL_SPI_MspDeInit+0x38>)
 8021bd0:	f003 f886 	bl	8024ce0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021bd4:	bf00      	nop
 8021bd6:	3708      	adds	r7, #8
 8021bd8:	46bd      	mov	sp, r7
 8021bda:	bd80      	pop	{r7, pc}
 8021bdc:	40015000 	.word	0x40015000
 8021be0:	40023800 	.word	0x40023800
 8021be4:	40021400 	.word	0x40021400

08021be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021be8:	b480      	push	{r7}
 8021bea:	b085      	sub	sp, #20
 8021bec:	af00      	add	r7, sp, #0
 8021bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	4a0b      	ldr	r2, [pc, #44]	; (8021c24 <HAL_TIM_Base_MspInit+0x3c>)
 8021bf6:	4293      	cmp	r3, r2
 8021bf8:	d10d      	bne.n	8021c16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021bfa:	2300      	movs	r3, #0
 8021bfc:	60fb      	str	r3, [r7, #12]
 8021bfe:	4b0a      	ldr	r3, [pc, #40]	; (8021c28 <HAL_TIM_Base_MspInit+0x40>)
 8021c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c02:	4a09      	ldr	r2, [pc, #36]	; (8021c28 <HAL_TIM_Base_MspInit+0x40>)
 8021c04:	f043 0301 	orr.w	r3, r3, #1
 8021c08:	6453      	str	r3, [r2, #68]	; 0x44
 8021c0a:	4b07      	ldr	r3, [pc, #28]	; (8021c28 <HAL_TIM_Base_MspInit+0x40>)
 8021c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c0e:	f003 0301 	and.w	r3, r3, #1
 8021c12:	60fb      	str	r3, [r7, #12]
 8021c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021c16:	bf00      	nop
 8021c18:	3714      	adds	r7, #20
 8021c1a:	46bd      	mov	sp, r7
 8021c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c20:	4770      	bx	lr
 8021c22:	bf00      	nop
 8021c24:	40010000 	.word	0x40010000
 8021c28:	40023800 	.word	0x40023800

08021c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021c2c:	b580      	push	{r7, lr}
 8021c2e:	b08c      	sub	sp, #48	; 0x30
 8021c30:	af00      	add	r7, sp, #0
 8021c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c34:	f107 031c 	add.w	r3, r7, #28
 8021c38:	2200      	movs	r2, #0
 8021c3a:	601a      	str	r2, [r3, #0]
 8021c3c:	605a      	str	r2, [r3, #4]
 8021c3e:	609a      	str	r2, [r3, #8]
 8021c40:	60da      	str	r2, [r3, #12]
 8021c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021c44:	687b      	ldr	r3, [r7, #4]
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	4a42      	ldr	r2, [pc, #264]	; (8021d54 <HAL_UART_MspInit+0x128>)
 8021c4a:	4293      	cmp	r3, r2
 8021c4c:	d14b      	bne.n	8021ce6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8021c4e:	2300      	movs	r3, #0
 8021c50:	61bb      	str	r3, [r7, #24]
 8021c52:	4b41      	ldr	r3, [pc, #260]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c56:	4a40      	ldr	r2, [pc, #256]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8021c5e:	4b3e      	ldr	r3, [pc, #248]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021c66:	61bb      	str	r3, [r7, #24]
 8021c68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021c6a:	2300      	movs	r3, #0
 8021c6c:	617b      	str	r3, [r7, #20]
 8021c6e:	4b3a      	ldr	r3, [pc, #232]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c72:	4a39      	ldr	r2, [pc, #228]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c74:	f043 0304 	orr.w	r3, r3, #4
 8021c78:	6313      	str	r3, [r2, #48]	; 0x30
 8021c7a:	4b37      	ldr	r3, [pc, #220]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c7e:	f003 0304 	and.w	r3, r3, #4
 8021c82:	617b      	str	r3, [r7, #20]
 8021c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021c86:	2300      	movs	r3, #0
 8021c88:	613b      	str	r3, [r7, #16]
 8021c8a:	4b33      	ldr	r3, [pc, #204]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c8e:	4a32      	ldr	r2, [pc, #200]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c90:	f043 0308 	orr.w	r3, r3, #8
 8021c94:	6313      	str	r3, [r2, #48]	; 0x30
 8021c96:	4b30      	ldr	r3, [pc, #192]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c9a:	f003 0308 	and.w	r3, r3, #8
 8021c9e:	613b      	str	r3, [r7, #16]
 8021ca0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ca8:	2302      	movs	r3, #2
 8021caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cac:	2300      	movs	r3, #0
 8021cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cb0:	2303      	movs	r3, #3
 8021cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021cb4:	2308      	movs	r3, #8
 8021cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cb8:	f107 031c 	add.w	r3, r7, #28
 8021cbc:	4619      	mov	r1, r3
 8021cbe:	4827      	ldr	r0, [pc, #156]	; (8021d5c <HAL_UART_MspInit+0x130>)
 8021cc0:	f002 fe62 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021cc4:	2304      	movs	r3, #4
 8021cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cc8:	2302      	movs	r3, #2
 8021cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ccc:	2300      	movs	r3, #0
 8021cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cd0:	2303      	movs	r3, #3
 8021cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021cd4:	2308      	movs	r3, #8
 8021cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021cd8:	f107 031c 	add.w	r3, r7, #28
 8021cdc:	4619      	mov	r1, r3
 8021cde:	4820      	ldr	r0, [pc, #128]	; (8021d60 <HAL_UART_MspInit+0x134>)
 8021ce0:	f002 fe52 	bl	8024988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021ce4:	e031      	b.n	8021d4a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8021ce6:	687b      	ldr	r3, [r7, #4]
 8021ce8:	681b      	ldr	r3, [r3, #0]
 8021cea:	4a1e      	ldr	r2, [pc, #120]	; (8021d64 <HAL_UART_MspInit+0x138>)
 8021cec:	4293      	cmp	r3, r2
 8021cee:	d12c      	bne.n	8021d4a <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021cf0:	2300      	movs	r3, #0
 8021cf2:	60fb      	str	r3, [r7, #12]
 8021cf4:	4b18      	ldr	r3, [pc, #96]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cf8:	4a17      	ldr	r2, [pc, #92]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021cfa:	f043 0310 	orr.w	r3, r3, #16
 8021cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8021d00:	4b15      	ldr	r3, [pc, #84]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d04:	f003 0310 	and.w	r3, r3, #16
 8021d08:	60fb      	str	r3, [r7, #12]
 8021d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	60bb      	str	r3, [r7, #8]
 8021d10:	4b11      	ldr	r3, [pc, #68]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d14:	4a10      	ldr	r2, [pc, #64]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021d16:	f043 0301 	orr.w	r3, r3, #1
 8021d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8021d1c:	4b0e      	ldr	r3, [pc, #56]	; (8021d58 <HAL_UART_MspInit+0x12c>)
 8021d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d20:	f003 0301 	and.w	r3, r3, #1
 8021d24:	60bb      	str	r3, [r7, #8]
 8021d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021d28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d2e:	2302      	movs	r3, #2
 8021d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d32:	2300      	movs	r3, #0
 8021d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d36:	2303      	movs	r3, #3
 8021d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021d3a:	2307      	movs	r3, #7
 8021d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d3e:	f107 031c 	add.w	r3, r7, #28
 8021d42:	4619      	mov	r1, r3
 8021d44:	4808      	ldr	r0, [pc, #32]	; (8021d68 <HAL_UART_MspInit+0x13c>)
 8021d46:	f002 fe1f 	bl	8024988 <HAL_GPIO_Init>
}
 8021d4a:	bf00      	nop
 8021d4c:	3730      	adds	r7, #48	; 0x30
 8021d4e:	46bd      	mov	sp, r7
 8021d50:	bd80      	pop	{r7, pc}
 8021d52:	bf00      	nop
 8021d54:	40005000 	.word	0x40005000
 8021d58:	40023800 	.word	0x40023800
 8021d5c:	40020800 	.word	0x40020800
 8021d60:	40020c00 	.word	0x40020c00
 8021d64:	40011000 	.word	0x40011000
 8021d68:	40020000 	.word	0x40020000

08021d6c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b086      	sub	sp, #24
 8021d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021d72:	1d3b      	adds	r3, r7, #4
 8021d74:	2200      	movs	r2, #0
 8021d76:	601a      	str	r2, [r3, #0]
 8021d78:	605a      	str	r2, [r3, #4]
 8021d7a:	609a      	str	r2, [r3, #8]
 8021d7c:	60da      	str	r2, [r3, #12]
 8021d7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021d80:	4b3b      	ldr	r3, [pc, #236]	; (8021e70 <HAL_FMC_MspInit+0x104>)
 8021d82:	681b      	ldr	r3, [r3, #0]
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	d16f      	bne.n	8021e68 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021d88:	4b39      	ldr	r3, [pc, #228]	; (8021e70 <HAL_FMC_MspInit+0x104>)
 8021d8a:	2201      	movs	r2, #1
 8021d8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021d8e:	2300      	movs	r3, #0
 8021d90:	603b      	str	r3, [r7, #0]
 8021d92:	4b38      	ldr	r3, [pc, #224]	; (8021e74 <HAL_FMC_MspInit+0x108>)
 8021d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d96:	4a37      	ldr	r2, [pc, #220]	; (8021e74 <HAL_FMC_MspInit+0x108>)
 8021d98:	f043 0301 	orr.w	r3, r3, #1
 8021d9c:	6393      	str	r3, [r2, #56]	; 0x38
 8021d9e:	4b35      	ldr	r3, [pc, #212]	; (8021e74 <HAL_FMC_MspInit+0x108>)
 8021da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021da2:	f003 0301 	and.w	r3, r3, #1
 8021da6:	603b      	str	r3, [r7, #0]
 8021da8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021daa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021dae:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021db0:	2302      	movs	r3, #2
 8021db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021db4:	2300      	movs	r3, #0
 8021db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021db8:	2303      	movs	r3, #3
 8021dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dbc:	230c      	movs	r3, #12
 8021dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021dc0:	1d3b      	adds	r3, r7, #4
 8021dc2:	4619      	mov	r1, r3
 8021dc4:	482c      	ldr	r0, [pc, #176]	; (8021e78 <HAL_FMC_MspInit+0x10c>)
 8021dc6:	f002 fddf 	bl	8024988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021dca:	2301      	movs	r3, #1
 8021dcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dce:	2302      	movs	r3, #2
 8021dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dd2:	2300      	movs	r3, #0
 8021dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dd6:	2303      	movs	r3, #3
 8021dd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dda:	230c      	movs	r3, #12
 8021ddc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021dde:	1d3b      	adds	r3, r7, #4
 8021de0:	4619      	mov	r1, r3
 8021de2:	4826      	ldr	r0, [pc, #152]	; (8021e7c <HAL_FMC_MspInit+0x110>)
 8021de4:	f002 fdd0 	bl	8024988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021de8:	f248 1333 	movw	r3, #33075	; 0x8133
 8021dec:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dee:	2302      	movs	r3, #2
 8021df0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df2:	2300      	movs	r3, #0
 8021df4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021df6:	2303      	movs	r3, #3
 8021df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dfa:	230c      	movs	r3, #12
 8021dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021dfe:	1d3b      	adds	r3, r7, #4
 8021e00:	4619      	mov	r1, r3
 8021e02:	481f      	ldr	r0, [pc, #124]	; (8021e80 <HAL_FMC_MspInit+0x114>)
 8021e04:	f002 fdc0 	bl	8024988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021e08:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021e0c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e0e:	2302      	movs	r3, #2
 8021e10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e12:	2300      	movs	r3, #0
 8021e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e16:	2303      	movs	r3, #3
 8021e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e1a:	230c      	movs	r3, #12
 8021e1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021e1e:	1d3b      	adds	r3, r7, #4
 8021e20:	4619      	mov	r1, r3
 8021e22:	4818      	ldr	r0, [pc, #96]	; (8021e84 <HAL_FMC_MspInit+0x118>)
 8021e24:	f002 fdb0 	bl	8024988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021e28:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021e2c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e2e:	2302      	movs	r3, #2
 8021e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e32:	2300      	movs	r3, #0
 8021e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e36:	2303      	movs	r3, #3
 8021e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e3a:	230c      	movs	r3, #12
 8021e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021e3e:	1d3b      	adds	r3, r7, #4
 8021e40:	4619      	mov	r1, r3
 8021e42:	4811      	ldr	r0, [pc, #68]	; (8021e88 <HAL_FMC_MspInit+0x11c>)
 8021e44:	f002 fda0 	bl	8024988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021e48:	2360      	movs	r3, #96	; 0x60
 8021e4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e4c:	2302      	movs	r3, #2
 8021e4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e50:	2300      	movs	r3, #0
 8021e52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e54:	2303      	movs	r3, #3
 8021e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e58:	230c      	movs	r3, #12
 8021e5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e5c:	1d3b      	adds	r3, r7, #4
 8021e5e:	4619      	mov	r1, r3
 8021e60:	480a      	ldr	r0, [pc, #40]	; (8021e8c <HAL_FMC_MspInit+0x120>)
 8021e62:	f002 fd91 	bl	8024988 <HAL_GPIO_Init>
 8021e66:	e000      	b.n	8021e6a <HAL_FMC_MspInit+0xfe>
    return;
 8021e68:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021e6a:	3718      	adds	r7, #24
 8021e6c:	46bd      	mov	sp, r7
 8021e6e:	bd80      	pop	{r7, pc}
 8021e70:	20000820 	.word	0x20000820
 8021e74:	40023800 	.word	0x40023800
 8021e78:	40021400 	.word	0x40021400
 8021e7c:	40020800 	.word	0x40020800
 8021e80:	40021800 	.word	0x40021800
 8021e84:	40021000 	.word	0x40021000
 8021e88:	40020c00 	.word	0x40020c00
 8021e8c:	40020400 	.word	0x40020400

08021e90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021e98:	f7ff ff68 	bl	8021d6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021e9c:	bf00      	nop
 8021e9e:	3708      	adds	r7, #8
 8021ea0:	46bd      	mov	sp, r7
 8021ea2:	bd80      	pop	{r7, pc}

08021ea4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021ea4:	b580      	push	{r7, lr}
 8021ea6:	b08e      	sub	sp, #56	; 0x38
 8021ea8:	af00      	add	r7, sp, #0
 8021eaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021eac:	2300      	movs	r3, #0
 8021eae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	60fb      	str	r3, [r7, #12]
 8021eb8:	4b33      	ldr	r3, [pc, #204]	; (8021f88 <HAL_InitTick+0xe4>)
 8021eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ebc:	4a32      	ldr	r2, [pc, #200]	; (8021f88 <HAL_InitTick+0xe4>)
 8021ebe:	f043 0310 	orr.w	r3, r3, #16
 8021ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8021ec4:	4b30      	ldr	r3, [pc, #192]	; (8021f88 <HAL_InitTick+0xe4>)
 8021ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ec8:	f003 0310 	and.w	r3, r3, #16
 8021ecc:	60fb      	str	r3, [r7, #12]
 8021ece:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021ed0:	f107 0210 	add.w	r2, r7, #16
 8021ed4:	f107 0314 	add.w	r3, r7, #20
 8021ed8:	4611      	mov	r1, r2
 8021eda:	4618      	mov	r0, r3
 8021edc:	f005 feb0 	bl	8027c40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021ee0:	6a3b      	ldr	r3, [r7, #32]
 8021ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d103      	bne.n	8021ef2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021eea:	f005 fe81 	bl	8027bf0 <HAL_RCC_GetPCLK1Freq>
 8021eee:	6378      	str	r0, [r7, #52]	; 0x34
 8021ef0:	e004      	b.n	8021efc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021ef2:	f005 fe7d 	bl	8027bf0 <HAL_RCC_GetPCLK1Freq>
 8021ef6:	4603      	mov	r3, r0
 8021ef8:	005b      	lsls	r3, r3, #1
 8021efa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021efe:	4a23      	ldr	r2, [pc, #140]	; (8021f8c <HAL_InitTick+0xe8>)
 8021f00:	fba2 2303 	umull	r2, r3, r2, r3
 8021f04:	0c9b      	lsrs	r3, r3, #18
 8021f06:	3b01      	subs	r3, #1
 8021f08:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021f0a:	4b21      	ldr	r3, [pc, #132]	; (8021f90 <HAL_InitTick+0xec>)
 8021f0c:	4a21      	ldr	r2, [pc, #132]	; (8021f94 <HAL_InitTick+0xf0>)
 8021f0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021f10:	4b1f      	ldr	r3, [pc, #124]	; (8021f90 <HAL_InitTick+0xec>)
 8021f12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021f16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021f18:	4a1d      	ldr	r2, [pc, #116]	; (8021f90 <HAL_InitTick+0xec>)
 8021f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021f1e:	4b1c      	ldr	r3, [pc, #112]	; (8021f90 <HAL_InitTick+0xec>)
 8021f20:	2200      	movs	r2, #0
 8021f22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f24:	4b1a      	ldr	r3, [pc, #104]	; (8021f90 <HAL_InitTick+0xec>)
 8021f26:	2200      	movs	r2, #0
 8021f28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f2a:	4b19      	ldr	r3, [pc, #100]	; (8021f90 <HAL_InitTick+0xec>)
 8021f2c:	2200      	movs	r2, #0
 8021f2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021f30:	4817      	ldr	r0, [pc, #92]	; (8021f90 <HAL_InitTick+0xec>)
 8021f32:	f006 fee7 	bl	8028d04 <HAL_TIM_Base_Init>
 8021f36:	4603      	mov	r3, r0
 8021f38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021f3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d11b      	bne.n	8021f7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021f44:	4812      	ldr	r0, [pc, #72]	; (8021f90 <HAL_InitTick+0xec>)
 8021f46:	f006 ff2d 	bl	8028da4 <HAL_TIM_Base_Start_IT>
 8021f4a:	4603      	mov	r3, r0
 8021f4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021f50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d111      	bne.n	8021f7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021f58:	2036      	movs	r0, #54	; 0x36
 8021f5a:	f001 fc8b 	bl	8023874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	2b0f      	cmp	r3, #15
 8021f62:	d808      	bhi.n	8021f76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021f64:	2200      	movs	r2, #0
 8021f66:	6879      	ldr	r1, [r7, #4]
 8021f68:	2036      	movs	r0, #54	; 0x36
 8021f6a:	f001 fc67 	bl	802383c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021f6e:	4a0a      	ldr	r2, [pc, #40]	; (8021f98 <HAL_InitTick+0xf4>)
 8021f70:	687b      	ldr	r3, [r7, #4]
 8021f72:	6013      	str	r3, [r2, #0]
 8021f74:	e002      	b.n	8021f7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021f76:	2301      	movs	r3, #1
 8021f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021f80:	4618      	mov	r0, r3
 8021f82:	3738      	adds	r7, #56	; 0x38
 8021f84:	46bd      	mov	sp, r7
 8021f86:	bd80      	pop	{r7, pc}
 8021f88:	40023800 	.word	0x40023800
 8021f8c:	431bde83 	.word	0x431bde83
 8021f90:	20000824 	.word	0x20000824
 8021f94:	40001000 	.word	0x40001000
 8021f98:	20000058 	.word	0x20000058

08021f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021f9c:	b480      	push	{r7}
 8021f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fa0:	e7fe      	b.n	8021fa0 <NMI_Handler+0x4>

08021fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fa2:	b480      	push	{r7}
 8021fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fa6:	e7fe      	b.n	8021fa6 <HardFault_Handler+0x4>

08021fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fa8:	b480      	push	{r7}
 8021faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fac:	e7fe      	b.n	8021fac <MemManage_Handler+0x4>

08021fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fae:	b480      	push	{r7}
 8021fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fb2:	e7fe      	b.n	8021fb2 <BusFault_Handler+0x4>

08021fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fb4:	b480      	push	{r7}
 8021fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fb8:	e7fe      	b.n	8021fb8 <UsageFault_Handler+0x4>

08021fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fba:	b480      	push	{r7}
 8021fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021fbe:	bf00      	nop
 8021fc0:	46bd      	mov	sp, r7
 8021fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fc6:	4770      	bx	lr

08021fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fc8:	b480      	push	{r7}
 8021fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fcc:	bf00      	nop
 8021fce:	46bd      	mov	sp, r7
 8021fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd4:	4770      	bx	lr

08021fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021fd6:	b480      	push	{r7}
 8021fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021fda:	bf00      	nop
 8021fdc:	46bd      	mov	sp, r7
 8021fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe2:	4770      	bx	lr

08021fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021fe4:	b480      	push	{r7}
 8021fe6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021fe8:	bf00      	nop
 8021fea:	46bd      	mov	sp, r7
 8021fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff0:	4770      	bx	lr

08021ff2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021ff2:	b580      	push	{r7, lr}
 8021ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021ff6:	2001      	movs	r0, #1
 8021ff8:	f002 ff98 	bl	8024f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021ffc:	bf00      	nop
 8021ffe:	bd80      	pop	{r7, pc}

08022000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022000:	b580      	push	{r7, lr}
 8022002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022004:	4802      	ldr	r0, [pc, #8]	; (8022010 <TIM6_DAC_IRQHandler+0x10>)
 8022006:	f006 ff3d 	bl	8028e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802200a:	bf00      	nop
 802200c:	bd80      	pop	{r7, pc}
 802200e:	bf00      	nop
 8022010:	20000824 	.word	0x20000824

08022014 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8022014:	b580      	push	{r7, lr}
 8022016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8022018:	4802      	ldr	r0, [pc, #8]	; (8022024 <OTG_HS_IRQHandler+0x10>)
 802201a:	f003 fa09 	bl	8025430 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 802201e:	bf00      	nop
 8022020:	bd80      	pop	{r7, pc}
 8022022:	bf00      	nop
 8022024:	20000ec4 	.word	0x20000ec4

08022028 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8022028:	b580      	push	{r7, lr}
 802202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 802202c:	4802      	ldr	r0, [pc, #8]	; (8022038 <LTDC_IRQHandler+0x10>)
 802202e:	f004 fe2f 	bl	8026c90 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8022032:	bf00      	nop
 8022034:	bd80      	pop	{r7, pc}
 8022036:	bf00      	nop
 8022038:	2000019c 	.word	0x2000019c

0802203c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 802203c:	b580      	push	{r7, lr}
 802203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8022040:	4802      	ldr	r0, [pc, #8]	; (802204c <DMA2D_IRQHandler+0x10>)
 8022042:	f001 ff5c 	bl	8023efe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8022046:	bf00      	nop
 8022048:	bd80      	pop	{r7, pc}
 802204a:	bf00      	nop
 802204c:	20000108 	.word	0x20000108

08022050 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8022050:	b480      	push	{r7}
 8022052:	b083      	sub	sp, #12
 8022054:	af00      	add	r7, sp, #0
 8022056:	4603      	mov	r3, r0
 8022058:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 802205a:	88fb      	ldrh	r3, [r7, #6]
 802205c:	2b01      	cmp	r3, #1
 802205e:	d102      	bne.n	8022066 <HAL_GPIO_EXTI_Callback+0x16>

	case B1_Pin: //Blue Button Interrupt
		ota_update_request = true;
 8022060:	4b04      	ldr	r3, [pc, #16]	; (8022074 <HAL_GPIO_EXTI_Callback+0x24>)
 8022062:	2201      	movs	r2, #1
 8022064:	701a      	strb	r2, [r3, #0]

	}
}
 8022066:	bf00      	nop
 8022068:	370c      	adds	r7, #12
 802206a:	46bd      	mov	sp, r7
 802206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022070:	4770      	bx	lr
 8022072:	bf00      	nop
 8022074:	20000404 	.word	0x20000404

08022078 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8022078:	b580      	push	{r7, lr}
 802207a:	b086      	sub	sp, #24
 802207c:	af00      	add	r7, sp, #0
 802207e:	60f8      	str	r0, [r7, #12]
 8022080:	60b9      	str	r1, [r7, #8]
 8022082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8022084:	2300      	movs	r3, #0
 8022086:	617b      	str	r3, [r7, #20]
 8022088:	e00a      	b.n	80220a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 802208a:	f3af 8000 	nop.w
 802208e:	4601      	mov	r1, r0
 8022090:	68bb      	ldr	r3, [r7, #8]
 8022092:	1c5a      	adds	r2, r3, #1
 8022094:	60ba      	str	r2, [r7, #8]
 8022096:	b2ca      	uxtb	r2, r1
 8022098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802209a:	697b      	ldr	r3, [r7, #20]
 802209c:	3301      	adds	r3, #1
 802209e:	617b      	str	r3, [r7, #20]
 80220a0:	697a      	ldr	r2, [r7, #20]
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	429a      	cmp	r2, r3
 80220a6:	dbf0      	blt.n	802208a <_read+0x12>
  }

  return len;
 80220a8:	687b      	ldr	r3, [r7, #4]
}
 80220aa:	4618      	mov	r0, r3
 80220ac:	3718      	adds	r7, #24
 80220ae:	46bd      	mov	sp, r7
 80220b0:	bd80      	pop	{r7, pc}

080220b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80220b2:	b580      	push	{r7, lr}
 80220b4:	b086      	sub	sp, #24
 80220b6:	af00      	add	r7, sp, #0
 80220b8:	60f8      	str	r0, [r7, #12]
 80220ba:	60b9      	str	r1, [r7, #8]
 80220bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220be:	2300      	movs	r3, #0
 80220c0:	617b      	str	r3, [r7, #20]
 80220c2:	e009      	b.n	80220d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80220c4:	68bb      	ldr	r3, [r7, #8]
 80220c6:	1c5a      	adds	r2, r3, #1
 80220c8:	60ba      	str	r2, [r7, #8]
 80220ca:	781b      	ldrb	r3, [r3, #0]
 80220cc:	4618      	mov	r0, r3
 80220ce:	f7fe fefd 	bl	8020ecc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220d2:	697b      	ldr	r3, [r7, #20]
 80220d4:	3301      	adds	r3, #1
 80220d6:	617b      	str	r3, [r7, #20]
 80220d8:	697a      	ldr	r2, [r7, #20]
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	429a      	cmp	r2, r3
 80220de:	dbf1      	blt.n	80220c4 <_write+0x12>
  }
  return len;
 80220e0:	687b      	ldr	r3, [r7, #4]
}
 80220e2:	4618      	mov	r0, r3
 80220e4:	3718      	adds	r7, #24
 80220e6:	46bd      	mov	sp, r7
 80220e8:	bd80      	pop	{r7, pc}

080220ea <_close>:

int _close(int file)
{
 80220ea:	b480      	push	{r7}
 80220ec:	b083      	sub	sp, #12
 80220ee:	af00      	add	r7, sp, #0
 80220f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80220f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80220f6:	4618      	mov	r0, r3
 80220f8:	370c      	adds	r7, #12
 80220fa:	46bd      	mov	sp, r7
 80220fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022100:	4770      	bx	lr

08022102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8022102:	b480      	push	{r7}
 8022104:	b083      	sub	sp, #12
 8022106:	af00      	add	r7, sp, #0
 8022108:	6078      	str	r0, [r7, #4]
 802210a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 802210c:	683b      	ldr	r3, [r7, #0]
 802210e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022112:	605a      	str	r2, [r3, #4]
  return 0;
 8022114:	2300      	movs	r3, #0
}
 8022116:	4618      	mov	r0, r3
 8022118:	370c      	adds	r7, #12
 802211a:	46bd      	mov	sp, r7
 802211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022120:	4770      	bx	lr

08022122 <_isatty>:

int _isatty(int file)
{
 8022122:	b480      	push	{r7}
 8022124:	b083      	sub	sp, #12
 8022126:	af00      	add	r7, sp, #0
 8022128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 802212a:	2301      	movs	r3, #1
}
 802212c:	4618      	mov	r0, r3
 802212e:	370c      	adds	r7, #12
 8022130:	46bd      	mov	sp, r7
 8022132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022136:	4770      	bx	lr

08022138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8022138:	b480      	push	{r7}
 802213a:	b085      	sub	sp, #20
 802213c:	af00      	add	r7, sp, #0
 802213e:	60f8      	str	r0, [r7, #12]
 8022140:	60b9      	str	r1, [r7, #8]
 8022142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8022144:	2300      	movs	r3, #0
}
 8022146:	4618      	mov	r0, r3
 8022148:	3714      	adds	r7, #20
 802214a:	46bd      	mov	sp, r7
 802214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022150:	4770      	bx	lr
	...

08022154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022154:	b580      	push	{r7, lr}
 8022156:	b086      	sub	sp, #24
 8022158:	af00      	add	r7, sp, #0
 802215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802215c:	4a14      	ldr	r2, [pc, #80]	; (80221b0 <_sbrk+0x5c>)
 802215e:	4b15      	ldr	r3, [pc, #84]	; (80221b4 <_sbrk+0x60>)
 8022160:	1ad3      	subs	r3, r2, r3
 8022162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022164:	697b      	ldr	r3, [r7, #20]
 8022166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022168:	4b13      	ldr	r3, [pc, #76]	; (80221b8 <_sbrk+0x64>)
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	2b00      	cmp	r3, #0
 802216e:	d102      	bne.n	8022176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022170:	4b11      	ldr	r3, [pc, #68]	; (80221b8 <_sbrk+0x64>)
 8022172:	4a12      	ldr	r2, [pc, #72]	; (80221bc <_sbrk+0x68>)
 8022174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8022176:	4b10      	ldr	r3, [pc, #64]	; (80221b8 <_sbrk+0x64>)
 8022178:	681a      	ldr	r2, [r3, #0]
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	4413      	add	r3, r2
 802217e:	693a      	ldr	r2, [r7, #16]
 8022180:	429a      	cmp	r2, r3
 8022182:	d207      	bcs.n	8022194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022184:	f00b faa0 	bl	802d6c8 <__errno>
 8022188:	4603      	mov	r3, r0
 802218a:	220c      	movs	r2, #12
 802218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 802218e:	f04f 33ff 	mov.w	r3, #4294967295
 8022192:	e009      	b.n	80221a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022194:	4b08      	ldr	r3, [pc, #32]	; (80221b8 <_sbrk+0x64>)
 8022196:	681b      	ldr	r3, [r3, #0]
 8022198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802219a:	4b07      	ldr	r3, [pc, #28]	; (80221b8 <_sbrk+0x64>)
 802219c:	681a      	ldr	r2, [r3, #0]
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	4413      	add	r3, r2
 80221a2:	4a05      	ldr	r2, [pc, #20]	; (80221b8 <_sbrk+0x64>)
 80221a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80221a6:	68fb      	ldr	r3, [r7, #12]
}
 80221a8:	4618      	mov	r0, r3
 80221aa:	3718      	adds	r7, #24
 80221ac:	46bd      	mov	sp, r7
 80221ae:	bd80      	pop	{r7, pc}
 80221b0:	20030000 	.word	0x20030000
 80221b4:	00000400 	.word	0x00000400
 80221b8:	2000086c 	.word	0x2000086c
 80221bc:	200011d8 	.word	0x200011d8

080221c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80221c0:	b480      	push	{r7}
 80221c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80221c4:	4b07      	ldr	r3, [pc, #28]	; (80221e4 <SystemInit+0x24>)
 80221c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80221ca:	4a06      	ldr	r2, [pc, #24]	; (80221e4 <SystemInit+0x24>)
 80221cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80221d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80221d4:	4b03      	ldr	r3, [pc, #12]	; (80221e4 <SystemInit+0x24>)
 80221d6:	4a04      	ldr	r2, [pc, #16]	; (80221e8 <SystemInit+0x28>)
 80221d8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80221da:	bf00      	nop
 80221dc:	46bd      	mov	sp, r7
 80221de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221e2:	4770      	bx	lr
 80221e4:	e000ed00 	.word	0xe000ed00
 80221e8:	08020000 	.word	0x08020000

080221ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80221ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022224 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80221f0:	480d      	ldr	r0, [pc, #52]	; (8022228 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80221f2:	490e      	ldr	r1, [pc, #56]	; (802222c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80221f4:	4a0e      	ldr	r2, [pc, #56]	; (8022230 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80221f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80221f8:	e002      	b.n	8022200 <LoopCopyDataInit>

080221fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80221fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80221fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80221fe:	3304      	adds	r3, #4

08022200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022204:	d3f9      	bcc.n	80221fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8022206:	4a0b      	ldr	r2, [pc, #44]	; (8022234 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022208:	4c0b      	ldr	r4, [pc, #44]	; (8022238 <LoopFillZerobss+0x26>)
  movs r3, #0
 802220a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802220c:	e001      	b.n	8022212 <LoopFillZerobss>

0802220e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802220e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022210:	3204      	adds	r2, #4

08022212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022214:	d3fb      	bcc.n	802220e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8022216:	f7ff ffd3 	bl	80221c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802221a:	f00b fa5b 	bl	802d6d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802221e:	f7fe f9b9 	bl	8020594 <main>
  bx  lr    
 8022222:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8022224:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8022228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 802222c:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8022230:	0803124c 	.word	0x0803124c
  ldr r2, =_sbss
 8022234:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8022238:	200011d8 	.word	0x200011d8

0802223c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 802223c:	e7fe      	b.n	802223c <ADC_IRQHandler>

0802223e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 802223e:	b580      	push	{r7, lr}
 8022240:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8022242:	f000 fa5d 	bl	8022700 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8022246:	20ca      	movs	r0, #202	; 0xca
 8022248:	f000 f95d 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 802224c:	20c3      	movs	r0, #195	; 0xc3
 802224e:	f000 f967 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8022252:	2008      	movs	r0, #8
 8022254:	f000 f964 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8022258:	2050      	movs	r0, #80	; 0x50
 802225a:	f000 f961 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 802225e:	20cf      	movs	r0, #207	; 0xcf
 8022260:	f000 f951 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022264:	2000      	movs	r0, #0
 8022266:	f000 f95b 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 802226a:	20c1      	movs	r0, #193	; 0xc1
 802226c:	f000 f958 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8022270:	2030      	movs	r0, #48	; 0x30
 8022272:	f000 f955 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8022276:	20ed      	movs	r0, #237	; 0xed
 8022278:	f000 f945 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 802227c:	2064      	movs	r0, #100	; 0x64
 802227e:	f000 f94f 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8022282:	2003      	movs	r0, #3
 8022284:	f000 f94c 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8022288:	2012      	movs	r0, #18
 802228a:	f000 f949 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 802228e:	2081      	movs	r0, #129	; 0x81
 8022290:	f000 f946 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8022294:	20e8      	movs	r0, #232	; 0xe8
 8022296:	f000 f936 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 802229a:	2085      	movs	r0, #133	; 0x85
 802229c:	f000 f940 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222a0:	2000      	movs	r0, #0
 80222a2:	f000 f93d 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80222a6:	2078      	movs	r0, #120	; 0x78
 80222a8:	f000 f93a 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80222ac:	20cb      	movs	r0, #203	; 0xcb
 80222ae:	f000 f92a 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80222b2:	2039      	movs	r0, #57	; 0x39
 80222b4:	f000 f934 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80222b8:	202c      	movs	r0, #44	; 0x2c
 80222ba:	f000 f931 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222be:	2000      	movs	r0, #0
 80222c0:	f000 f92e 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80222c4:	2034      	movs	r0, #52	; 0x34
 80222c6:	f000 f92b 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80222ca:	2002      	movs	r0, #2
 80222cc:	f000 f928 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80222d0:	20f7      	movs	r0, #247	; 0xf7
 80222d2:	f000 f918 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80222d6:	2020      	movs	r0, #32
 80222d8:	f000 f922 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80222dc:	20ea      	movs	r0, #234	; 0xea
 80222de:	f000 f912 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222e2:	2000      	movs	r0, #0
 80222e4:	f000 f91c 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222e8:	2000      	movs	r0, #0
 80222ea:	f000 f919 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80222ee:	20b1      	movs	r0, #177	; 0xb1
 80222f0:	f000 f909 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222f4:	2000      	movs	r0, #0
 80222f6:	f000 f913 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80222fa:	201b      	movs	r0, #27
 80222fc:	f000 f910 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022300:	20b6      	movs	r0, #182	; 0xb6
 8022302:	f000 f900 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8022306:	200a      	movs	r0, #10
 8022308:	f000 f90a 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 802230c:	20a2      	movs	r0, #162	; 0xa2
 802230e:	f000 f907 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8022312:	20c0      	movs	r0, #192	; 0xc0
 8022314:	f000 f8f7 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022318:	2010      	movs	r0, #16
 802231a:	f000 f901 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 802231e:	20c1      	movs	r0, #193	; 0xc1
 8022320:	f000 f8f1 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022324:	2010      	movs	r0, #16
 8022326:	f000 f8fb 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 802232a:	20c5      	movs	r0, #197	; 0xc5
 802232c:	f000 f8eb 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8022330:	2045      	movs	r0, #69	; 0x45
 8022332:	f000 f8f5 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8022336:	2015      	movs	r0, #21
 8022338:	f000 f8f2 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 802233c:	20c7      	movs	r0, #199	; 0xc7
 802233e:	f000 f8e2 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8022342:	2090      	movs	r0, #144	; 0x90
 8022344:	f000 f8ec 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8022348:	2036      	movs	r0, #54	; 0x36
 802234a:	f000 f8dc 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 802234e:	20c8      	movs	r0, #200	; 0xc8
 8022350:	f000 f8e6 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8022354:	20f2      	movs	r0, #242	; 0xf2
 8022356:	f000 f8d6 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802235a:	2000      	movs	r0, #0
 802235c:	f000 f8e0 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8022360:	20b0      	movs	r0, #176	; 0xb0
 8022362:	f000 f8d0 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8022366:	20c2      	movs	r0, #194	; 0xc2
 8022368:	f000 f8da 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 802236c:	20b6      	movs	r0, #182	; 0xb6
 802236e:	f000 f8ca 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8022372:	200a      	movs	r0, #10
 8022374:	f000 f8d4 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8022378:	20a7      	movs	r0, #167	; 0xa7
 802237a:	f000 f8d1 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 802237e:	2027      	movs	r0, #39	; 0x27
 8022380:	f000 f8ce 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8022384:	2004      	movs	r0, #4
 8022386:	f000 f8cb 	bl	8022520 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 802238a:	202a      	movs	r0, #42	; 0x2a
 802238c:	f000 f8bb 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022390:	2000      	movs	r0, #0
 8022392:	f000 f8c5 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022396:	2000      	movs	r0, #0
 8022398:	f000 f8c2 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802239c:	2000      	movs	r0, #0
 802239e:	f000 f8bf 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80223a2:	20ef      	movs	r0, #239	; 0xef
 80223a4:	f000 f8bc 	bl	8022520 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80223a8:	202b      	movs	r0, #43	; 0x2b
 80223aa:	f000 f8ac 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80223ae:	2000      	movs	r0, #0
 80223b0:	f000 f8b6 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223b4:	2000      	movs	r0, #0
 80223b6:	f000 f8b3 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80223ba:	2001      	movs	r0, #1
 80223bc:	f000 f8b0 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80223c0:	203f      	movs	r0, #63	; 0x3f
 80223c2:	f000 f8ad 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80223c6:	20f6      	movs	r0, #246	; 0xf6
 80223c8:	f000 f89d 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223cc:	2001      	movs	r0, #1
 80223ce:	f000 f8a7 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223d2:	2000      	movs	r0, #0
 80223d4:	f000 f8a4 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80223d8:	2006      	movs	r0, #6
 80223da:	f000 f8a1 	bl	8022520 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80223de:	202c      	movs	r0, #44	; 0x2c
 80223e0:	f000 f891 	bl	8022506 <ili9341_WriteReg>
  LCD_Delay(200);
 80223e4:	20c8      	movs	r0, #200	; 0xc8
 80223e6:	f000 fa79 	bl	80228dc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80223ea:	2026      	movs	r0, #38	; 0x26
 80223ec:	f000 f88b 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223f0:	2001      	movs	r0, #1
 80223f2:	f000 f895 	bl	8022520 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80223f6:	20e0      	movs	r0, #224	; 0xe0
 80223f8:	f000 f885 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80223fc:	200f      	movs	r0, #15
 80223fe:	f000 f88f 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8022402:	2029      	movs	r0, #41	; 0x29
 8022404:	f000 f88c 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8022408:	2024      	movs	r0, #36	; 0x24
 802240a:	f000 f889 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 802240e:	200c      	movs	r0, #12
 8022410:	f000 f886 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8022414:	200e      	movs	r0, #14
 8022416:	f000 f883 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 802241a:	2009      	movs	r0, #9
 802241c:	f000 f880 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8022420:	204e      	movs	r0, #78	; 0x4e
 8022422:	f000 f87d 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8022426:	2078      	movs	r0, #120	; 0x78
 8022428:	f000 f87a 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 802242c:	203c      	movs	r0, #60	; 0x3c
 802242e:	f000 f877 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8022432:	2009      	movs	r0, #9
 8022434:	f000 f874 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8022438:	2013      	movs	r0, #19
 802243a:	f000 f871 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 802243e:	2005      	movs	r0, #5
 8022440:	f000 f86e 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8022444:	2017      	movs	r0, #23
 8022446:	f000 f86b 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 802244a:	2011      	movs	r0, #17
 802244c:	f000 f868 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022450:	2000      	movs	r0, #0
 8022452:	f000 f865 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8022456:	20e1      	movs	r0, #225	; 0xe1
 8022458:	f000 f855 	bl	8022506 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802245c:	2000      	movs	r0, #0
 802245e:	f000 f85f 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8022462:	2016      	movs	r0, #22
 8022464:	f000 f85c 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022468:	201b      	movs	r0, #27
 802246a:	f000 f859 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 802246e:	2004      	movs	r0, #4
 8022470:	f000 f856 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022474:	2011      	movs	r0, #17
 8022476:	f000 f853 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 802247a:	2007      	movs	r0, #7
 802247c:	f000 f850 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8022480:	2031      	movs	r0, #49	; 0x31
 8022482:	f000 f84d 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8022486:	2033      	movs	r0, #51	; 0x33
 8022488:	f000 f84a 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 802248c:	2042      	movs	r0, #66	; 0x42
 802248e:	f000 f847 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8022492:	2005      	movs	r0, #5
 8022494:	f000 f844 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8022498:	200c      	movs	r0, #12
 802249a:	f000 f841 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 802249e:	200a      	movs	r0, #10
 80224a0:	f000 f83e 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80224a4:	2028      	movs	r0, #40	; 0x28
 80224a6:	f000 f83b 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80224aa:	202f      	movs	r0, #47	; 0x2f
 80224ac:	f000 f838 	bl	8022520 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80224b0:	200f      	movs	r0, #15
 80224b2:	f000 f835 	bl	8022520 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80224b6:	2011      	movs	r0, #17
 80224b8:	f000 f825 	bl	8022506 <ili9341_WriteReg>
  LCD_Delay(200);
 80224bc:	20c8      	movs	r0, #200	; 0xc8
 80224be:	f000 fa0d 	bl	80228dc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224c2:	2029      	movs	r0, #41	; 0x29
 80224c4:	f000 f81f 	bl	8022506 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80224c8:	202c      	movs	r0, #44	; 0x2c
 80224ca:	f000 f81c 	bl	8022506 <ili9341_WriteReg>
}
 80224ce:	bf00      	nop
 80224d0:	bd80      	pop	{r7, pc}

080224d2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80224d2:	b580      	push	{r7, lr}
 80224d4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80224d6:	f000 f913 	bl	8022700 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80224da:	2103      	movs	r1, #3
 80224dc:	20d3      	movs	r0, #211	; 0xd3
 80224de:	f000 f82c 	bl	802253a <ili9341_ReadData>
 80224e2:	4603      	mov	r3, r0
 80224e4:	b29b      	uxth	r3, r3
}
 80224e6:	4618      	mov	r0, r3
 80224e8:	bd80      	pop	{r7, pc}

080224ea <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80224ea:	b580      	push	{r7, lr}
 80224ec:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224ee:	2029      	movs	r0, #41	; 0x29
 80224f0:	f000 f809 	bl	8022506 <ili9341_WriteReg>
}
 80224f4:	bf00      	nop
 80224f6:	bd80      	pop	{r7, pc}

080224f8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80224fc:	2028      	movs	r0, #40	; 0x28
 80224fe:	f000 f802 	bl	8022506 <ili9341_WriteReg>
}
 8022502:	bf00      	nop
 8022504:	bd80      	pop	{r7, pc}

08022506 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8022506:	b580      	push	{r7, lr}
 8022508:	b082      	sub	sp, #8
 802250a:	af00      	add	r7, sp, #0
 802250c:	4603      	mov	r3, r0
 802250e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8022510:	79fb      	ldrb	r3, [r7, #7]
 8022512:	4618      	mov	r0, r3
 8022514:	f000 f98e 	bl	8022834 <LCD_IO_WriteReg>
}
 8022518:	bf00      	nop
 802251a:	3708      	adds	r7, #8
 802251c:	46bd      	mov	sp, r7
 802251e:	bd80      	pop	{r7, pc}

08022520 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8022520:	b580      	push	{r7, lr}
 8022522:	b082      	sub	sp, #8
 8022524:	af00      	add	r7, sp, #0
 8022526:	4603      	mov	r3, r0
 8022528:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 802252a:	88fb      	ldrh	r3, [r7, #6]
 802252c:	4618      	mov	r0, r3
 802252e:	f000 f95f 	bl	80227f0 <LCD_IO_WriteData>
}
 8022532:	bf00      	nop
 8022534:	3708      	adds	r7, #8
 8022536:	46bd      	mov	sp, r7
 8022538:	bd80      	pop	{r7, pc}

0802253a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 802253a:	b580      	push	{r7, lr}
 802253c:	b082      	sub	sp, #8
 802253e:	af00      	add	r7, sp, #0
 8022540:	4603      	mov	r3, r0
 8022542:	460a      	mov	r2, r1
 8022544:	80fb      	strh	r3, [r7, #6]
 8022546:	4613      	mov	r3, r2
 8022548:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 802254a:	797a      	ldrb	r2, [r7, #5]
 802254c:	88fb      	ldrh	r3, [r7, #6]
 802254e:	4611      	mov	r1, r2
 8022550:	4618      	mov	r0, r3
 8022552:	f000 f991 	bl	8022878 <LCD_IO_ReadData>
 8022556:	4603      	mov	r3, r0
}
 8022558:	4618      	mov	r0, r3
 802255a:	3708      	adds	r7, #8
 802255c:	46bd      	mov	sp, r7
 802255e:	bd80      	pop	{r7, pc}

08022560 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8022560:	b480      	push	{r7}
 8022562:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8022564:	23f0      	movs	r3, #240	; 0xf0
}
 8022566:	4618      	mov	r0, r3
 8022568:	46bd      	mov	sp, r7
 802256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802256e:	4770      	bx	lr

08022570 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8022570:	b480      	push	{r7}
 8022572:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8022574:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8022578:	4618      	mov	r0, r3
 802257a:	46bd      	mov	sp, r7
 802257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022580:	4770      	bx	lr
	...

08022584 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8022584:	b580      	push	{r7, lr}
 8022586:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8022588:	4819      	ldr	r0, [pc, #100]	; (80225f0 <SPIx_Init+0x6c>)
 802258a:	f006 fa7c 	bl	8028a86 <HAL_SPI_GetState>
 802258e:	4603      	mov	r3, r0
 8022590:	2b00      	cmp	r3, #0
 8022592:	d12b      	bne.n	80225ec <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8022594:	4b16      	ldr	r3, [pc, #88]	; (80225f0 <SPIx_Init+0x6c>)
 8022596:	4a17      	ldr	r2, [pc, #92]	; (80225f4 <SPIx_Init+0x70>)
 8022598:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 802259a:	4b15      	ldr	r3, [pc, #84]	; (80225f0 <SPIx_Init+0x6c>)
 802259c:	2218      	movs	r2, #24
 802259e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80225a0:	4b13      	ldr	r3, [pc, #76]	; (80225f0 <SPIx_Init+0x6c>)
 80225a2:	2200      	movs	r2, #0
 80225a4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80225a6:	4b12      	ldr	r3, [pc, #72]	; (80225f0 <SPIx_Init+0x6c>)
 80225a8:	2200      	movs	r2, #0
 80225aa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80225ac:	4b10      	ldr	r3, [pc, #64]	; (80225f0 <SPIx_Init+0x6c>)
 80225ae:	2200      	movs	r2, #0
 80225b0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80225b2:	4b0f      	ldr	r3, [pc, #60]	; (80225f0 <SPIx_Init+0x6c>)
 80225b4:	2200      	movs	r2, #0
 80225b6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80225b8:	4b0d      	ldr	r3, [pc, #52]	; (80225f0 <SPIx_Init+0x6c>)
 80225ba:	2207      	movs	r2, #7
 80225bc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80225be:	4b0c      	ldr	r3, [pc, #48]	; (80225f0 <SPIx_Init+0x6c>)
 80225c0:	2200      	movs	r2, #0
 80225c2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80225c4:	4b0a      	ldr	r3, [pc, #40]	; (80225f0 <SPIx_Init+0x6c>)
 80225c6:	2200      	movs	r2, #0
 80225c8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80225ca:	4b09      	ldr	r3, [pc, #36]	; (80225f0 <SPIx_Init+0x6c>)
 80225cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80225d0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80225d2:	4b07      	ldr	r3, [pc, #28]	; (80225f0 <SPIx_Init+0x6c>)
 80225d4:	2200      	movs	r2, #0
 80225d6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80225d8:	4b05      	ldr	r3, [pc, #20]	; (80225f0 <SPIx_Init+0x6c>)
 80225da:	f44f 7282 	mov.w	r2, #260	; 0x104
 80225de:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80225e0:	4803      	ldr	r0, [pc, #12]	; (80225f0 <SPIx_Init+0x6c>)
 80225e2:	f000 f853 	bl	802268c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80225e6:	4802      	ldr	r0, [pc, #8]	; (80225f0 <SPIx_Init+0x6c>)
 80225e8:	f005 fdad 	bl	8028146 <HAL_SPI_Init>
  } 
}
 80225ec:	bf00      	nop
 80225ee:	bd80      	pop	{r7, pc}
 80225f0:	20000870 	.word	0x20000870
 80225f4:	40015000 	.word	0x40015000

080225f8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b084      	sub	sp, #16
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	4603      	mov	r3, r0
 8022600:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8022602:	2300      	movs	r3, #0
 8022604:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8022606:	79fb      	ldrb	r3, [r7, #7]
 8022608:	b29a      	uxth	r2, r3
 802260a:	4b09      	ldr	r3, [pc, #36]	; (8022630 <SPIx_Read+0x38>)
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	f107 0108 	add.w	r1, r7, #8
 8022612:	4808      	ldr	r0, [pc, #32]	; (8022634 <SPIx_Read+0x3c>)
 8022614:	f005 ff84 	bl	8028520 <HAL_SPI_Receive>
 8022618:	4603      	mov	r3, r0
 802261a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 802261c:	7bfb      	ldrb	r3, [r7, #15]
 802261e:	2b00      	cmp	r3, #0
 8022620:	d001      	beq.n	8022626 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022622:	f000 f827 	bl	8022674 <SPIx_Error>
  }
  
  return readvalue;
 8022626:	68bb      	ldr	r3, [r7, #8]
}
 8022628:	4618      	mov	r0, r3
 802262a:	3710      	adds	r7, #16
 802262c:	46bd      	mov	sp, r7
 802262e:	bd80      	pop	{r7, pc}
 8022630:	20000040 	.word	0x20000040
 8022634:	20000870 	.word	0x20000870

08022638 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8022638:	b580      	push	{r7, lr}
 802263a:	b084      	sub	sp, #16
 802263c:	af00      	add	r7, sp, #0
 802263e:	4603      	mov	r3, r0
 8022640:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8022642:	2300      	movs	r3, #0
 8022644:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8022646:	4b09      	ldr	r3, [pc, #36]	; (802266c <SPIx_Write+0x34>)
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	1db9      	adds	r1, r7, #6
 802264c:	2201      	movs	r2, #1
 802264e:	4808      	ldr	r0, [pc, #32]	; (8022670 <SPIx_Write+0x38>)
 8022650:	f005 fe2a 	bl	80282a8 <HAL_SPI_Transmit>
 8022654:	4603      	mov	r3, r0
 8022656:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022658:	7bfb      	ldrb	r3, [r7, #15]
 802265a:	2b00      	cmp	r3, #0
 802265c:	d001      	beq.n	8022662 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802265e:	f000 f809 	bl	8022674 <SPIx_Error>
  }
}
 8022662:	bf00      	nop
 8022664:	3710      	adds	r7, #16
 8022666:	46bd      	mov	sp, r7
 8022668:	bd80      	pop	{r7, pc}
 802266a:	bf00      	nop
 802266c:	20000040 	.word	0x20000040
 8022670:	20000870 	.word	0x20000870

08022674 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8022674:	b580      	push	{r7, lr}
 8022676:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8022678:	4803      	ldr	r0, [pc, #12]	; (8022688 <SPIx_Error+0x14>)
 802267a:	f005 fded 	bl	8028258 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 802267e:	f7ff ff81 	bl	8022584 <SPIx_Init>
}
 8022682:	bf00      	nop
 8022684:	bd80      	pop	{r7, pc}
 8022686:	bf00      	nop
 8022688:	20000870 	.word	0x20000870

0802268c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 802268c:	b580      	push	{r7, lr}
 802268e:	b08a      	sub	sp, #40	; 0x28
 8022690:	af00      	add	r7, sp, #0
 8022692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8022694:	2300      	movs	r3, #0
 8022696:	613b      	str	r3, [r7, #16]
 8022698:	4b17      	ldr	r3, [pc, #92]	; (80226f8 <SPIx_MspInit+0x6c>)
 802269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802269c:	4a16      	ldr	r2, [pc, #88]	; (80226f8 <SPIx_MspInit+0x6c>)
 802269e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226a2:	6453      	str	r3, [r2, #68]	; 0x44
 80226a4:	4b14      	ldr	r3, [pc, #80]	; (80226f8 <SPIx_MspInit+0x6c>)
 80226a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80226ac:	613b      	str	r3, [r7, #16]
 80226ae:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80226b0:	2300      	movs	r3, #0
 80226b2:	60fb      	str	r3, [r7, #12]
 80226b4:	4b10      	ldr	r3, [pc, #64]	; (80226f8 <SPIx_MspInit+0x6c>)
 80226b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226b8:	4a0f      	ldr	r2, [pc, #60]	; (80226f8 <SPIx_MspInit+0x6c>)
 80226ba:	f043 0320 	orr.w	r3, r3, #32
 80226be:	6313      	str	r3, [r2, #48]	; 0x30
 80226c0:	4b0d      	ldr	r3, [pc, #52]	; (80226f8 <SPIx_MspInit+0x6c>)
 80226c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c4:	f003 0320 	and.w	r3, r3, #32
 80226c8:	60fb      	str	r3, [r7, #12]
 80226ca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80226cc:	f44f 7360 	mov.w	r3, #896	; 0x380
 80226d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80226d2:	2302      	movs	r3, #2
 80226d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80226d6:	2302      	movs	r3, #2
 80226d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80226da:	2301      	movs	r3, #1
 80226dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80226de:	2305      	movs	r3, #5
 80226e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80226e2:	f107 0314 	add.w	r3, r7, #20
 80226e6:	4619      	mov	r1, r3
 80226e8:	4804      	ldr	r0, [pc, #16]	; (80226fc <SPIx_MspInit+0x70>)
 80226ea:	f002 f94d 	bl	8024988 <HAL_GPIO_Init>
}
 80226ee:	bf00      	nop
 80226f0:	3728      	adds	r7, #40	; 0x28
 80226f2:	46bd      	mov	sp, r7
 80226f4:	bd80      	pop	{r7, pc}
 80226f6:	bf00      	nop
 80226f8:	40023800 	.word	0x40023800
 80226fc:	40021400 	.word	0x40021400

08022700 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8022700:	b580      	push	{r7, lr}
 8022702:	b088      	sub	sp, #32
 8022704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8022706:	4b36      	ldr	r3, [pc, #216]	; (80227e0 <LCD_IO_Init+0xe0>)
 8022708:	781b      	ldrb	r3, [r3, #0]
 802270a:	2b00      	cmp	r3, #0
 802270c:	d164      	bne.n	80227d8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 802270e:	4b34      	ldr	r3, [pc, #208]	; (80227e0 <LCD_IO_Init+0xe0>)
 8022710:	2201      	movs	r2, #1
 8022712:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8022714:	2300      	movs	r3, #0
 8022716:	60bb      	str	r3, [r7, #8]
 8022718:	4b32      	ldr	r3, [pc, #200]	; (80227e4 <LCD_IO_Init+0xe4>)
 802271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802271c:	4a31      	ldr	r2, [pc, #196]	; (80227e4 <LCD_IO_Init+0xe4>)
 802271e:	f043 0308 	orr.w	r3, r3, #8
 8022722:	6313      	str	r3, [r2, #48]	; 0x30
 8022724:	4b2f      	ldr	r3, [pc, #188]	; (80227e4 <LCD_IO_Init+0xe4>)
 8022726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022728:	f003 0308 	and.w	r3, r3, #8
 802272c:	60bb      	str	r3, [r7, #8]
 802272e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8022730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022734:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022736:	2301      	movs	r3, #1
 8022738:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 802273a:	2300      	movs	r3, #0
 802273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802273e:	2302      	movs	r3, #2
 8022740:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8022742:	f107 030c 	add.w	r3, r7, #12
 8022746:	4619      	mov	r1, r3
 8022748:	4827      	ldr	r0, [pc, #156]	; (80227e8 <LCD_IO_Init+0xe8>)
 802274a:	f002 f91d 	bl	8024988 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 802274e:	2300      	movs	r3, #0
 8022750:	607b      	str	r3, [r7, #4]
 8022752:	4b24      	ldr	r3, [pc, #144]	; (80227e4 <LCD_IO_Init+0xe4>)
 8022754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022756:	4a23      	ldr	r2, [pc, #140]	; (80227e4 <LCD_IO_Init+0xe4>)
 8022758:	f043 0308 	orr.w	r3, r3, #8
 802275c:	6313      	str	r3, [r2, #48]	; 0x30
 802275e:	4b21      	ldr	r3, [pc, #132]	; (80227e4 <LCD_IO_Init+0xe4>)
 8022760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022762:	f003 0308 	and.w	r3, r3, #8
 8022766:	607b      	str	r3, [r7, #4]
 8022768:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 802276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802276e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022770:	2301      	movs	r3, #1
 8022772:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022774:	2300      	movs	r3, #0
 8022776:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022778:	2302      	movs	r3, #2
 802277a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 802277c:	f107 030c 	add.w	r3, r7, #12
 8022780:	4619      	mov	r1, r3
 8022782:	4819      	ldr	r0, [pc, #100]	; (80227e8 <LCD_IO_Init+0xe8>)
 8022784:	f002 f900 	bl	8024988 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8022788:	2300      	movs	r3, #0
 802278a:	603b      	str	r3, [r7, #0]
 802278c:	4b15      	ldr	r3, [pc, #84]	; (80227e4 <LCD_IO_Init+0xe4>)
 802278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022790:	4a14      	ldr	r2, [pc, #80]	; (80227e4 <LCD_IO_Init+0xe4>)
 8022792:	f043 0304 	orr.w	r3, r3, #4
 8022796:	6313      	str	r3, [r2, #48]	; 0x30
 8022798:	4b12      	ldr	r3, [pc, #72]	; (80227e4 <LCD_IO_Init+0xe4>)
 802279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802279c:	f003 0304 	and.w	r3, r3, #4
 80227a0:	603b      	str	r3, [r7, #0]
 80227a2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80227a4:	2304      	movs	r3, #4
 80227a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80227a8:	2301      	movs	r3, #1
 80227aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80227ac:	2300      	movs	r3, #0
 80227ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80227b0:	2302      	movs	r3, #2
 80227b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80227b4:	f107 030c 	add.w	r3, r7, #12
 80227b8:	4619      	mov	r1, r3
 80227ba:	480c      	ldr	r0, [pc, #48]	; (80227ec <LCD_IO_Init+0xec>)
 80227bc:	f002 f8e4 	bl	8024988 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80227c0:	2200      	movs	r2, #0
 80227c2:	2104      	movs	r1, #4
 80227c4:	4809      	ldr	r0, [pc, #36]	; (80227ec <LCD_IO_Init+0xec>)
 80227c6:	f002 fb97 	bl	8024ef8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80227ca:	2201      	movs	r2, #1
 80227cc:	2104      	movs	r1, #4
 80227ce:	4807      	ldr	r0, [pc, #28]	; (80227ec <LCD_IO_Init+0xec>)
 80227d0:	f002 fb92 	bl	8024ef8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80227d4:	f7ff fed6 	bl	8022584 <SPIx_Init>
  }
}
 80227d8:	bf00      	nop
 80227da:	3720      	adds	r7, #32
 80227dc:	46bd      	mov	sp, r7
 80227de:	bd80      	pop	{r7, pc}
 80227e0:	200008c8 	.word	0x200008c8
 80227e4:	40023800 	.word	0x40023800
 80227e8:	40020c00 	.word	0x40020c00
 80227ec:	40020800 	.word	0x40020800

080227f0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b082      	sub	sp, #8
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	4603      	mov	r3, r0
 80227f8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80227fa:	2201      	movs	r2, #1
 80227fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022800:	480a      	ldr	r0, [pc, #40]	; (802282c <LCD_IO_WriteData+0x3c>)
 8022802:	f002 fb79 	bl	8024ef8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8022806:	2200      	movs	r2, #0
 8022808:	2104      	movs	r1, #4
 802280a:	4809      	ldr	r0, [pc, #36]	; (8022830 <LCD_IO_WriteData+0x40>)
 802280c:	f002 fb74 	bl	8024ef8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022810:	88fb      	ldrh	r3, [r7, #6]
 8022812:	4618      	mov	r0, r3
 8022814:	f7ff ff10 	bl	8022638 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022818:	2201      	movs	r2, #1
 802281a:	2104      	movs	r1, #4
 802281c:	4804      	ldr	r0, [pc, #16]	; (8022830 <LCD_IO_WriteData+0x40>)
 802281e:	f002 fb6b 	bl	8024ef8 <HAL_GPIO_WritePin>
}
 8022822:	bf00      	nop
 8022824:	3708      	adds	r7, #8
 8022826:	46bd      	mov	sp, r7
 8022828:	bd80      	pop	{r7, pc}
 802282a:	bf00      	nop
 802282c:	40020c00 	.word	0x40020c00
 8022830:	40020800 	.word	0x40020800

08022834 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8022834:	b580      	push	{r7, lr}
 8022836:	b082      	sub	sp, #8
 8022838:	af00      	add	r7, sp, #0
 802283a:	4603      	mov	r3, r0
 802283c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 802283e:	2200      	movs	r2, #0
 8022840:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022844:	480a      	ldr	r0, [pc, #40]	; (8022870 <LCD_IO_WriteReg+0x3c>)
 8022846:	f002 fb57 	bl	8024ef8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 802284a:	2200      	movs	r2, #0
 802284c:	2104      	movs	r1, #4
 802284e:	4809      	ldr	r0, [pc, #36]	; (8022874 <LCD_IO_WriteReg+0x40>)
 8022850:	f002 fb52 	bl	8024ef8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8022854:	79fb      	ldrb	r3, [r7, #7]
 8022856:	b29b      	uxth	r3, r3
 8022858:	4618      	mov	r0, r3
 802285a:	f7ff feed 	bl	8022638 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802285e:	2201      	movs	r2, #1
 8022860:	2104      	movs	r1, #4
 8022862:	4804      	ldr	r0, [pc, #16]	; (8022874 <LCD_IO_WriteReg+0x40>)
 8022864:	f002 fb48 	bl	8024ef8 <HAL_GPIO_WritePin>
}
 8022868:	bf00      	nop
 802286a:	3708      	adds	r7, #8
 802286c:	46bd      	mov	sp, r7
 802286e:	bd80      	pop	{r7, pc}
 8022870:	40020c00 	.word	0x40020c00
 8022874:	40020800 	.word	0x40020800

08022878 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022878:	b580      	push	{r7, lr}
 802287a:	b084      	sub	sp, #16
 802287c:	af00      	add	r7, sp, #0
 802287e:	4603      	mov	r3, r0
 8022880:	460a      	mov	r2, r1
 8022882:	80fb      	strh	r3, [r7, #6]
 8022884:	4613      	mov	r3, r2
 8022886:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022888:	2300      	movs	r3, #0
 802288a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 802288c:	2200      	movs	r2, #0
 802288e:	2104      	movs	r1, #4
 8022890:	4810      	ldr	r0, [pc, #64]	; (80228d4 <LCD_IO_ReadData+0x5c>)
 8022892:	f002 fb31 	bl	8024ef8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022896:	2200      	movs	r2, #0
 8022898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802289c:	480e      	ldr	r0, [pc, #56]	; (80228d8 <LCD_IO_ReadData+0x60>)
 802289e:	f002 fb2b 	bl	8024ef8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80228a2:	88fb      	ldrh	r3, [r7, #6]
 80228a4:	4618      	mov	r0, r3
 80228a6:	f7ff fec7 	bl	8022638 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80228aa:	797b      	ldrb	r3, [r7, #5]
 80228ac:	4618      	mov	r0, r3
 80228ae:	f7ff fea3 	bl	80225f8 <SPIx_Read>
 80228b2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80228b4:	2201      	movs	r2, #1
 80228b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228ba:	4807      	ldr	r0, [pc, #28]	; (80228d8 <LCD_IO_ReadData+0x60>)
 80228bc:	f002 fb1c 	bl	8024ef8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80228c0:	2201      	movs	r2, #1
 80228c2:	2104      	movs	r1, #4
 80228c4:	4803      	ldr	r0, [pc, #12]	; (80228d4 <LCD_IO_ReadData+0x5c>)
 80228c6:	f002 fb17 	bl	8024ef8 <HAL_GPIO_WritePin>
  
  return readvalue;
 80228ca:	68fb      	ldr	r3, [r7, #12]
}
 80228cc:	4618      	mov	r0, r3
 80228ce:	3710      	adds	r7, #16
 80228d0:	46bd      	mov	sp, r7
 80228d2:	bd80      	pop	{r7, pc}
 80228d4:	40020800 	.word	0x40020800
 80228d8:	40020c00 	.word	0x40020c00

080228dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80228dc:	b580      	push	{r7, lr}
 80228de:	b082      	sub	sp, #8
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80228e4:	6878      	ldr	r0, [r7, #4]
 80228e6:	f000 fecd 	bl	8023684 <HAL_Delay>
}
 80228ea:	bf00      	nop
 80228ec:	3708      	adds	r7, #8
 80228ee:	46bd      	mov	sp, r7
 80228f0:	bd80      	pop	{r7, pc}
	...

080228f4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80228f4:	b580      	push	{r7, lr}
 80228f6:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80228f8:	4b2d      	ldr	r3, [pc, #180]	; (80229b0 <BSP_LCD_Init+0xbc>)
 80228fa:	4a2e      	ldr	r2, [pc, #184]	; (80229b4 <BSP_LCD_Init+0xc0>)
 80228fc:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80228fe:	4b2c      	ldr	r3, [pc, #176]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022900:	2209      	movs	r2, #9
 8022902:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022904:	4b2a      	ldr	r3, [pc, #168]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022906:	2201      	movs	r2, #1
 8022908:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 802290a:	4b29      	ldr	r3, [pc, #164]	; (80229b0 <BSP_LCD_Init+0xbc>)
 802290c:	221d      	movs	r2, #29
 802290e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022910:	4b27      	ldr	r3, [pc, #156]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022912:	2203      	movs	r2, #3
 8022914:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8022916:	4b26      	ldr	r3, [pc, #152]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022918:	f240 120d 	movw	r2, #269	; 0x10d
 802291c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 802291e:	4b24      	ldr	r3, [pc, #144]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022920:	f240 1243 	movw	r2, #323	; 0x143
 8022924:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8022926:	4b22      	ldr	r3, [pc, #136]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022928:	f240 1217 	movw	r2, #279	; 0x117
 802292c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 802292e:	4b20      	ldr	r3, [pc, #128]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022930:	f240 1247 	movw	r2, #327	; 0x147
 8022934:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8022936:	4b1e      	ldr	r3, [pc, #120]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022938:	2200      	movs	r2, #0
 802293a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 802293e:	4b1c      	ldr	r3, [pc, #112]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022940:	2200      	movs	r2, #0
 8022942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8022946:	4b1a      	ldr	r3, [pc, #104]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022948:	2200      	movs	r2, #0
 802294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 802294e:	4b1a      	ldr	r3, [pc, #104]	; (80229b8 <BSP_LCD_Init+0xc4>)
 8022950:	2208      	movs	r2, #8
 8022952:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022954:	4b18      	ldr	r3, [pc, #96]	; (80229b8 <BSP_LCD_Init+0xc4>)
 8022956:	22c0      	movs	r2, #192	; 0xc0
 8022958:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 802295a:	4b17      	ldr	r3, [pc, #92]	; (80229b8 <BSP_LCD_Init+0xc4>)
 802295c:	2204      	movs	r2, #4
 802295e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8022960:	4b15      	ldr	r3, [pc, #84]	; (80229b8 <BSP_LCD_Init+0xc4>)
 8022962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8022966:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8022968:	4813      	ldr	r0, [pc, #76]	; (80229b8 <BSP_LCD_Init+0xc4>)
 802296a:	f005 f99b 	bl	8027ca4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 802296e:	4b10      	ldr	r3, [pc, #64]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022970:	2200      	movs	r2, #0
 8022972:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022974:	4b0e      	ldr	r3, [pc, #56]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022976:	2200      	movs	r2, #0
 8022978:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 802297a:	4b0d      	ldr	r3, [pc, #52]	; (80229b0 <BSP_LCD_Init+0xbc>)
 802297c:	2200      	movs	r2, #0
 802297e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8022980:	4b0b      	ldr	r3, [pc, #44]	; (80229b0 <BSP_LCD_Init+0xbc>)
 8022982:	2200      	movs	r2, #0
 8022984:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8022986:	f000 fa83 	bl	8022e90 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 802298a:	4809      	ldr	r0, [pc, #36]	; (80229b0 <BSP_LCD_Init+0xbc>)
 802298c:	f004 f8b0 	bl	8026af0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8022990:	4b0a      	ldr	r3, [pc, #40]	; (80229bc <BSP_LCD_Init+0xc8>)
 8022992:	4a0b      	ldr	r2, [pc, #44]	; (80229c0 <BSP_LCD_Init+0xcc>)
 8022994:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8022996:	4b09      	ldr	r3, [pc, #36]	; (80229bc <BSP_LCD_Init+0xc8>)
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 802299e:	f000 fc65 	bl	802326c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80229a2:	4808      	ldr	r0, [pc, #32]	; (80229c4 <BSP_LCD_Init+0xd0>)
 80229a4:	f000 f920 	bl	8022be8 <BSP_LCD_SetFont>

  return LCD_OK;
 80229a8:	2300      	movs	r3, #0
}  
 80229aa:	4618      	mov	r0, r3
 80229ac:	bd80      	pop	{r7, pc}
 80229ae:	bf00      	nop
 80229b0:	200008cc 	.word	0x200008cc
 80229b4:	40016800 	.word	0x40016800
 80229b8:	200009b4 	.word	0x200009b4
 80229bc:	20000a00 	.word	0x20000a00
 80229c0:	20000008 	.word	0x20000008
 80229c4:	20000044 	.word	0x20000044

080229c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80229c8:	b580      	push	{r7, lr}
 80229ca:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80229cc:	4b03      	ldr	r3, [pc, #12]	; (80229dc <BSP_LCD_GetXSize+0x14>)
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229d2:	4798      	blx	r3
 80229d4:	4603      	mov	r3, r0
}
 80229d6:	4618      	mov	r0, r3
 80229d8:	bd80      	pop	{r7, pc}
 80229da:	bf00      	nop
 80229dc:	20000a00 	.word	0x20000a00

080229e0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80229e4:	4b03      	ldr	r3, [pc, #12]	; (80229f4 <BSP_LCD_GetYSize+0x14>)
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229ea:	4798      	blx	r3
 80229ec:	4603      	mov	r3, r0
}
 80229ee:	4618      	mov	r0, r3
 80229f0:	bd80      	pop	{r7, pc}
 80229f2:	bf00      	nop
 80229f4:	20000a00 	.word	0x20000a00

080229f8 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80229f8:	b580      	push	{r7, lr}
 80229fa:	b090      	sub	sp, #64	; 0x40
 80229fc:	af00      	add	r7, sp, #0
 80229fe:	4603      	mov	r3, r0
 8022a00:	6039      	str	r1, [r7, #0]
 8022a02:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022a04:	2300      	movs	r3, #0
 8022a06:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022a08:	f7ff ffde 	bl	80229c8 <BSP_LCD_GetXSize>
 8022a0c:	4603      	mov	r3, r0
 8022a0e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022a10:	2300      	movs	r3, #0
 8022a12:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022a14:	f7ff ffe4 	bl	80229e0 <BSP_LCD_GetYSize>
 8022a18:	4603      	mov	r3, r0
 8022a1a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022a1c:	2300      	movs	r3, #0
 8022a1e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022a20:	683b      	ldr	r3, [r7, #0]
 8022a22:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022a24:	23ff      	movs	r3, #255	; 0xff
 8022a26:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022a28:	2300      	movs	r3, #0
 8022a2a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022a2c:	2300      	movs	r3, #0
 8022a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8022a32:	2300      	movs	r3, #0
 8022a34:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022a38:	2300      	movs	r3, #0
 8022a3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022a3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8022a42:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022a44:	2307      	movs	r3, #7
 8022a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022a48:	f7ff ffbe 	bl	80229c8 <BSP_LCD_GetXSize>
 8022a4c:	4603      	mov	r3, r0
 8022a4e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8022a50:	f7ff ffc6 	bl	80229e0 <BSP_LCD_GetYSize>
 8022a54:	4603      	mov	r3, r0
 8022a56:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022a58:	88fa      	ldrh	r2, [r7, #6]
 8022a5a:	f107 030c 	add.w	r3, r7, #12
 8022a5e:	4619      	mov	r1, r3
 8022a60:	4814      	ldr	r0, [pc, #80]	; (8022ab4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022a62:	f004 f9d7 	bl	8026e14 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022a66:	88fa      	ldrh	r2, [r7, #6]
 8022a68:	4913      	ldr	r1, [pc, #76]	; (8022ab8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a6a:	4613      	mov	r3, r2
 8022a6c:	005b      	lsls	r3, r3, #1
 8022a6e:	4413      	add	r3, r2
 8022a70:	009b      	lsls	r3, r3, #2
 8022a72:	440b      	add	r3, r1
 8022a74:	3304      	adds	r3, #4
 8022a76:	f04f 32ff 	mov.w	r2, #4294967295
 8022a7a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022a7c:	88fa      	ldrh	r2, [r7, #6]
 8022a7e:	490e      	ldr	r1, [pc, #56]	; (8022ab8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a80:	4613      	mov	r3, r2
 8022a82:	005b      	lsls	r3, r3, #1
 8022a84:	4413      	add	r3, r2
 8022a86:	009b      	lsls	r3, r3, #2
 8022a88:	440b      	add	r3, r1
 8022a8a:	3308      	adds	r3, #8
 8022a8c:	4a0b      	ldr	r2, [pc, #44]	; (8022abc <BSP_LCD_LayerDefaultInit+0xc4>)
 8022a8e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8022a90:	88fa      	ldrh	r2, [r7, #6]
 8022a92:	4909      	ldr	r1, [pc, #36]	; (8022ab8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a94:	4613      	mov	r3, r2
 8022a96:	005b      	lsls	r3, r3, #1
 8022a98:	4413      	add	r3, r2
 8022a9a:	009b      	lsls	r3, r3, #2
 8022a9c:	440b      	add	r3, r1
 8022a9e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8022aa2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022aa4:	4803      	ldr	r0, [pc, #12]	; (8022ab4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022aa6:	f004 fa71 	bl	8026f8c <HAL_LTDC_EnableDither>
}
 8022aaa:	bf00      	nop
 8022aac:	3740      	adds	r7, #64	; 0x40
 8022aae:	46bd      	mov	sp, r7
 8022ab0:	bd80      	pop	{r7, pc}
 8022ab2:	bf00      	nop
 8022ab4:	200008cc 	.word	0x200008cc
 8022ab8:	200009e8 	.word	0x200009e8
 8022abc:	20000044 	.word	0x20000044

08022ac0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8022ac0:	b480      	push	{r7}
 8022ac2:	b083      	sub	sp, #12
 8022ac4:	af00      	add	r7, sp, #0
 8022ac6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022ac8:	4a04      	ldr	r2, [pc, #16]	; (8022adc <BSP_LCD_SelectLayer+0x1c>)
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	6013      	str	r3, [r2, #0]
}
 8022ace:	bf00      	nop
 8022ad0:	370c      	adds	r7, #12
 8022ad2:	46bd      	mov	sp, r7
 8022ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ad8:	4770      	bx	lr
 8022ada:	bf00      	nop
 8022adc:	200009e4 	.word	0x200009e4

08022ae0 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022ae0:	b480      	push	{r7}
 8022ae2:	b083      	sub	sp, #12
 8022ae4:	af00      	add	r7, sp, #0
 8022ae6:	6078      	str	r0, [r7, #4]
 8022ae8:	460b      	mov	r3, r1
 8022aea:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022aec:	78fb      	ldrb	r3, [r7, #3]
 8022aee:	2b01      	cmp	r3, #1
 8022af0:	d112      	bne.n	8022b18 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022af2:	4b19      	ldr	r3, [pc, #100]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022af4:	681b      	ldr	r3, [r3, #0]
 8022af6:	461a      	mov	r2, r3
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	01db      	lsls	r3, r3, #7
 8022afc:	4413      	add	r3, r2
 8022afe:	3384      	adds	r3, #132	; 0x84
 8022b00:	681b      	ldr	r3, [r3, #0]
 8022b02:	4a15      	ldr	r2, [pc, #84]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022b04:	6812      	ldr	r2, [r2, #0]
 8022b06:	4611      	mov	r1, r2
 8022b08:	687a      	ldr	r2, [r7, #4]
 8022b0a:	01d2      	lsls	r2, r2, #7
 8022b0c:	440a      	add	r2, r1
 8022b0e:	3284      	adds	r2, #132	; 0x84
 8022b10:	f043 0301 	orr.w	r3, r3, #1
 8022b14:	6013      	str	r3, [r2, #0]
 8022b16:	e011      	b.n	8022b3c <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022b18:	4b0f      	ldr	r3, [pc, #60]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022b1a:	681b      	ldr	r3, [r3, #0]
 8022b1c:	461a      	mov	r2, r3
 8022b1e:	687b      	ldr	r3, [r7, #4]
 8022b20:	01db      	lsls	r3, r3, #7
 8022b22:	4413      	add	r3, r2
 8022b24:	3384      	adds	r3, #132	; 0x84
 8022b26:	681b      	ldr	r3, [r3, #0]
 8022b28:	4a0b      	ldr	r2, [pc, #44]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022b2a:	6812      	ldr	r2, [r2, #0]
 8022b2c:	4611      	mov	r1, r2
 8022b2e:	687a      	ldr	r2, [r7, #4]
 8022b30:	01d2      	lsls	r2, r2, #7
 8022b32:	440a      	add	r2, r1
 8022b34:	3284      	adds	r2, #132	; 0x84
 8022b36:	f023 0301 	bic.w	r3, r3, #1
 8022b3a:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022b3c:	4b06      	ldr	r3, [pc, #24]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022b3e:	681b      	ldr	r3, [r3, #0]
 8022b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022b42:	4b05      	ldr	r3, [pc, #20]	; (8022b58 <BSP_LCD_SetLayerVisible+0x78>)
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	f042 0201 	orr.w	r2, r2, #1
 8022b4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022b4c:	bf00      	nop
 8022b4e:	370c      	adds	r7, #12
 8022b50:	46bd      	mov	sp, r7
 8022b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b56:	4770      	bx	lr
 8022b58:	200008cc 	.word	0x200008cc

08022b5c <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022b5c:	b580      	push	{r7, lr}
 8022b5e:	b082      	sub	sp, #8
 8022b60:	af00      	add	r7, sp, #0
 8022b62:	6078      	str	r0, [r7, #4]
 8022b64:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022b66:	687a      	ldr	r2, [r7, #4]
 8022b68:	6839      	ldr	r1, [r7, #0]
 8022b6a:	4805      	ldr	r0, [pc, #20]	; (8022b80 <BSP_LCD_SetColorKeying+0x24>)
 8022b6c:	f004 f990 	bl	8026e90 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8022b70:	6879      	ldr	r1, [r7, #4]
 8022b72:	4803      	ldr	r0, [pc, #12]	; (8022b80 <BSP_LCD_SetColorKeying+0x24>)
 8022b74:	f004 f9d0 	bl	8026f18 <HAL_LTDC_EnableColorKeying>
}
 8022b78:	bf00      	nop
 8022b7a:	3708      	adds	r7, #8
 8022b7c:	46bd      	mov	sp, r7
 8022b7e:	bd80      	pop	{r7, pc}
 8022b80:	200008cc 	.word	0x200008cc

08022b84 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022b84:	b480      	push	{r7}
 8022b86:	b083      	sub	sp, #12
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022b8c:	4b07      	ldr	r3, [pc, #28]	; (8022bac <BSP_LCD_SetTextColor+0x28>)
 8022b8e:	681a      	ldr	r2, [r3, #0]
 8022b90:	4907      	ldr	r1, [pc, #28]	; (8022bb0 <BSP_LCD_SetTextColor+0x2c>)
 8022b92:	4613      	mov	r3, r2
 8022b94:	005b      	lsls	r3, r3, #1
 8022b96:	4413      	add	r3, r2
 8022b98:	009b      	lsls	r3, r3, #2
 8022b9a:	440b      	add	r3, r1
 8022b9c:	687a      	ldr	r2, [r7, #4]
 8022b9e:	601a      	str	r2, [r3, #0]
}
 8022ba0:	bf00      	nop
 8022ba2:	370c      	adds	r7, #12
 8022ba4:	46bd      	mov	sp, r7
 8022ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022baa:	4770      	bx	lr
 8022bac:	200009e4 	.word	0x200009e4
 8022bb0:	200009e8 	.word	0x200009e8

08022bb4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022bb4:	b480      	push	{r7}
 8022bb6:	b083      	sub	sp, #12
 8022bb8:	af00      	add	r7, sp, #0
 8022bba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022bbc:	4b08      	ldr	r3, [pc, #32]	; (8022be0 <BSP_LCD_SetBackColor+0x2c>)
 8022bbe:	681a      	ldr	r2, [r3, #0]
 8022bc0:	4908      	ldr	r1, [pc, #32]	; (8022be4 <BSP_LCD_SetBackColor+0x30>)
 8022bc2:	4613      	mov	r3, r2
 8022bc4:	005b      	lsls	r3, r3, #1
 8022bc6:	4413      	add	r3, r2
 8022bc8:	009b      	lsls	r3, r3, #2
 8022bca:	440b      	add	r3, r1
 8022bcc:	3304      	adds	r3, #4
 8022bce:	687a      	ldr	r2, [r7, #4]
 8022bd0:	601a      	str	r2, [r3, #0]
}
 8022bd2:	bf00      	nop
 8022bd4:	370c      	adds	r7, #12
 8022bd6:	46bd      	mov	sp, r7
 8022bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bdc:	4770      	bx	lr
 8022bde:	bf00      	nop
 8022be0:	200009e4 	.word	0x200009e4
 8022be4:	200009e8 	.word	0x200009e8

08022be8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022be8:	b480      	push	{r7}
 8022bea:	b083      	sub	sp, #12
 8022bec:	af00      	add	r7, sp, #0
 8022bee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022bf0:	4b08      	ldr	r3, [pc, #32]	; (8022c14 <BSP_LCD_SetFont+0x2c>)
 8022bf2:	681a      	ldr	r2, [r3, #0]
 8022bf4:	4908      	ldr	r1, [pc, #32]	; (8022c18 <BSP_LCD_SetFont+0x30>)
 8022bf6:	4613      	mov	r3, r2
 8022bf8:	005b      	lsls	r3, r3, #1
 8022bfa:	4413      	add	r3, r2
 8022bfc:	009b      	lsls	r3, r3, #2
 8022bfe:	440b      	add	r3, r1
 8022c00:	3308      	adds	r3, #8
 8022c02:	687a      	ldr	r2, [r7, #4]
 8022c04:	601a      	str	r2, [r3, #0]
}
 8022c06:	bf00      	nop
 8022c08:	370c      	adds	r7, #12
 8022c0a:	46bd      	mov	sp, r7
 8022c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c10:	4770      	bx	lr
 8022c12:	bf00      	nop
 8022c14:	200009e4 	.word	0x200009e4
 8022c18:	200009e8 	.word	0x200009e8

08022c1c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c1e:	b085      	sub	sp, #20
 8022c20:	af02      	add	r7, sp, #8
 8022c22:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022c24:	4b0f      	ldr	r3, [pc, #60]	; (8022c64 <BSP_LCD_Clear+0x48>)
 8022c26:	681c      	ldr	r4, [r3, #0]
 8022c28:	4b0e      	ldr	r3, [pc, #56]	; (8022c64 <BSP_LCD_Clear+0x48>)
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	4a0e      	ldr	r2, [pc, #56]	; (8022c68 <BSP_LCD_Clear+0x4c>)
 8022c2e:	2134      	movs	r1, #52	; 0x34
 8022c30:	fb01 f303 	mul.w	r3, r1, r3
 8022c34:	4413      	add	r3, r2
 8022c36:	335c      	adds	r3, #92	; 0x5c
 8022c38:	681b      	ldr	r3, [r3, #0]
 8022c3a:	461e      	mov	r6, r3
 8022c3c:	f7ff fec4 	bl	80229c8 <BSP_LCD_GetXSize>
 8022c40:	4605      	mov	r5, r0
 8022c42:	f7ff fecd 	bl	80229e0 <BSP_LCD_GetYSize>
 8022c46:	4602      	mov	r2, r0
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	9301      	str	r3, [sp, #4]
 8022c4c:	2300      	movs	r3, #0
 8022c4e:	9300      	str	r3, [sp, #0]
 8022c50:	4613      	mov	r3, r2
 8022c52:	462a      	mov	r2, r5
 8022c54:	4631      	mov	r1, r6
 8022c56:	4620      	mov	r0, r4
 8022c58:	f000 fad0 	bl	80231fc <FillBuffer>
}
 8022c5c:	bf00      	nop
 8022c5e:	370c      	adds	r7, #12
 8022c60:	46bd      	mov	sp, r7
 8022c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c64:	200009e4 	.word	0x200009e4
 8022c68:	200008cc 	.word	0x200008cc

08022c6c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022c6c:	b590      	push	{r4, r7, lr}
 8022c6e:	b083      	sub	sp, #12
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	4603      	mov	r3, r0
 8022c74:	80fb      	strh	r3, [r7, #6]
 8022c76:	460b      	mov	r3, r1
 8022c78:	80bb      	strh	r3, [r7, #4]
 8022c7a:	4613      	mov	r3, r2
 8022c7c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022c7e:	4b1b      	ldr	r3, [pc, #108]	; (8022cec <BSP_LCD_DisplayChar+0x80>)
 8022c80:	681a      	ldr	r2, [r3, #0]
 8022c82:	491b      	ldr	r1, [pc, #108]	; (8022cf0 <BSP_LCD_DisplayChar+0x84>)
 8022c84:	4613      	mov	r3, r2
 8022c86:	005b      	lsls	r3, r3, #1
 8022c88:	4413      	add	r3, r2
 8022c8a:	009b      	lsls	r3, r3, #2
 8022c8c:	440b      	add	r3, r1
 8022c8e:	3308      	adds	r3, #8
 8022c90:	681b      	ldr	r3, [r3, #0]
 8022c92:	6819      	ldr	r1, [r3, #0]
 8022c94:	78fb      	ldrb	r3, [r7, #3]
 8022c96:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022c9a:	4b14      	ldr	r3, [pc, #80]	; (8022cec <BSP_LCD_DisplayChar+0x80>)
 8022c9c:	681a      	ldr	r2, [r3, #0]
 8022c9e:	4c14      	ldr	r4, [pc, #80]	; (8022cf0 <BSP_LCD_DisplayChar+0x84>)
 8022ca0:	4613      	mov	r3, r2
 8022ca2:	005b      	lsls	r3, r3, #1
 8022ca4:	4413      	add	r3, r2
 8022ca6:	009b      	lsls	r3, r3, #2
 8022ca8:	4423      	add	r3, r4
 8022caa:	3308      	adds	r3, #8
 8022cac:	681b      	ldr	r3, [r3, #0]
 8022cae:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cb0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022cb4:	4b0d      	ldr	r3, [pc, #52]	; (8022cec <BSP_LCD_DisplayChar+0x80>)
 8022cb6:	681a      	ldr	r2, [r3, #0]
 8022cb8:	4c0d      	ldr	r4, [pc, #52]	; (8022cf0 <BSP_LCD_DisplayChar+0x84>)
 8022cba:	4613      	mov	r3, r2
 8022cbc:	005b      	lsls	r3, r3, #1
 8022cbe:	4413      	add	r3, r2
 8022cc0:	009b      	lsls	r3, r3, #2
 8022cc2:	4423      	add	r3, r4
 8022cc4:	3308      	adds	r3, #8
 8022cc6:	681b      	ldr	r3, [r3, #0]
 8022cc8:	889b      	ldrh	r3, [r3, #4]
 8022cca:	3307      	adds	r3, #7
 8022ccc:	2b00      	cmp	r3, #0
 8022cce:	da00      	bge.n	8022cd2 <BSP_LCD_DisplayChar+0x66>
 8022cd0:	3307      	adds	r3, #7
 8022cd2:	10db      	asrs	r3, r3, #3
 8022cd4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cd8:	18ca      	adds	r2, r1, r3
 8022cda:	88b9      	ldrh	r1, [r7, #4]
 8022cdc:	88fb      	ldrh	r3, [r7, #6]
 8022cde:	4618      	mov	r0, r3
 8022ce0:	f000 f9d2 	bl	8023088 <DrawChar>
}
 8022ce4:	bf00      	nop
 8022ce6:	370c      	adds	r7, #12
 8022ce8:	46bd      	mov	sp, r7
 8022cea:	bd90      	pop	{r4, r7, pc}
 8022cec:	200009e4 	.word	0x200009e4
 8022cf0:	200009e8 	.word	0x200009e8

08022cf4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022cf4:	b5b0      	push	{r4, r5, r7, lr}
 8022cf6:	b088      	sub	sp, #32
 8022cf8:	af00      	add	r7, sp, #0
 8022cfa:	60ba      	str	r2, [r7, #8]
 8022cfc:	461a      	mov	r2, r3
 8022cfe:	4603      	mov	r3, r0
 8022d00:	81fb      	strh	r3, [r7, #14]
 8022d02:	460b      	mov	r3, r1
 8022d04:	81bb      	strh	r3, [r7, #12]
 8022d06:	4613      	mov	r3, r2
 8022d08:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022d0a:	2301      	movs	r3, #1
 8022d0c:	83fb      	strh	r3, [r7, #30]
 8022d0e:	2300      	movs	r3, #0
 8022d10:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022d12:	2300      	movs	r3, #0
 8022d14:	61bb      	str	r3, [r7, #24]
 8022d16:	2300      	movs	r3, #0
 8022d18:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022d1a:	68bb      	ldr	r3, [r7, #8]
 8022d1c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022d1e:	e002      	b.n	8022d26 <BSP_LCD_DisplayStringAt+0x32>
 8022d20:	69bb      	ldr	r3, [r7, #24]
 8022d22:	3301      	adds	r3, #1
 8022d24:	61bb      	str	r3, [r7, #24]
 8022d26:	697b      	ldr	r3, [r7, #20]
 8022d28:	1c5a      	adds	r2, r3, #1
 8022d2a:	617a      	str	r2, [r7, #20]
 8022d2c:	781b      	ldrb	r3, [r3, #0]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d1f6      	bne.n	8022d20 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022d32:	f7ff fe49 	bl	80229c8 <BSP_LCD_GetXSize>
 8022d36:	4601      	mov	r1, r0
 8022d38:	4b4b      	ldr	r3, [pc, #300]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022d3a:	681a      	ldr	r2, [r3, #0]
 8022d3c:	484b      	ldr	r0, [pc, #300]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022d3e:	4613      	mov	r3, r2
 8022d40:	005b      	lsls	r3, r3, #1
 8022d42:	4413      	add	r3, r2
 8022d44:	009b      	lsls	r3, r3, #2
 8022d46:	4403      	add	r3, r0
 8022d48:	3308      	adds	r3, #8
 8022d4a:	681b      	ldr	r3, [r3, #0]
 8022d4c:	889b      	ldrh	r3, [r3, #4]
 8022d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8022d52:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022d54:	79fb      	ldrb	r3, [r7, #7]
 8022d56:	2b03      	cmp	r3, #3
 8022d58:	d01c      	beq.n	8022d94 <BSP_LCD_DisplayStringAt+0xa0>
 8022d5a:	2b03      	cmp	r3, #3
 8022d5c:	dc33      	bgt.n	8022dc6 <BSP_LCD_DisplayStringAt+0xd2>
 8022d5e:	2b01      	cmp	r3, #1
 8022d60:	d002      	beq.n	8022d68 <BSP_LCD_DisplayStringAt+0x74>
 8022d62:	2b02      	cmp	r3, #2
 8022d64:	d019      	beq.n	8022d9a <BSP_LCD_DisplayStringAt+0xa6>
 8022d66:	e02e      	b.n	8022dc6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022d68:	693a      	ldr	r2, [r7, #16]
 8022d6a:	69bb      	ldr	r3, [r7, #24]
 8022d6c:	1ad1      	subs	r1, r2, r3
 8022d6e:	4b3e      	ldr	r3, [pc, #248]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022d70:	681a      	ldr	r2, [r3, #0]
 8022d72:	483e      	ldr	r0, [pc, #248]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022d74:	4613      	mov	r3, r2
 8022d76:	005b      	lsls	r3, r3, #1
 8022d78:	4413      	add	r3, r2
 8022d7a:	009b      	lsls	r3, r3, #2
 8022d7c:	4403      	add	r3, r0
 8022d7e:	3308      	adds	r3, #8
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	889b      	ldrh	r3, [r3, #4]
 8022d84:	fb01 f303 	mul.w	r3, r1, r3
 8022d88:	085b      	lsrs	r3, r3, #1
 8022d8a:	b29a      	uxth	r2, r3
 8022d8c:	89fb      	ldrh	r3, [r7, #14]
 8022d8e:	4413      	add	r3, r2
 8022d90:	83fb      	strh	r3, [r7, #30]
      break;
 8022d92:	e01b      	b.n	8022dcc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022d94:	89fb      	ldrh	r3, [r7, #14]
 8022d96:	83fb      	strh	r3, [r7, #30]
      break;
 8022d98:	e018      	b.n	8022dcc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022d9a:	693a      	ldr	r2, [r7, #16]
 8022d9c:	69bb      	ldr	r3, [r7, #24]
 8022d9e:	1ad3      	subs	r3, r2, r3
 8022da0:	b299      	uxth	r1, r3
 8022da2:	4b31      	ldr	r3, [pc, #196]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022da4:	681a      	ldr	r2, [r3, #0]
 8022da6:	4831      	ldr	r0, [pc, #196]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022da8:	4613      	mov	r3, r2
 8022daa:	005b      	lsls	r3, r3, #1
 8022dac:	4413      	add	r3, r2
 8022dae:	009b      	lsls	r3, r3, #2
 8022db0:	4403      	add	r3, r0
 8022db2:	3308      	adds	r3, #8
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	889b      	ldrh	r3, [r3, #4]
 8022db8:	fb11 f303 	smulbb	r3, r1, r3
 8022dbc:	b29a      	uxth	r2, r3
 8022dbe:	89fb      	ldrh	r3, [r7, #14]
 8022dc0:	4413      	add	r3, r2
 8022dc2:	83fb      	strh	r3, [r7, #30]
      break;
 8022dc4:	e002      	b.n	8022dcc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022dc6:	89fb      	ldrh	r3, [r7, #14]
 8022dc8:	83fb      	strh	r3, [r7, #30]
      break;
 8022dca:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022dcc:	e01a      	b.n	8022e04 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022dce:	68bb      	ldr	r3, [r7, #8]
 8022dd0:	781a      	ldrb	r2, [r3, #0]
 8022dd2:	89b9      	ldrh	r1, [r7, #12]
 8022dd4:	8bfb      	ldrh	r3, [r7, #30]
 8022dd6:	4618      	mov	r0, r3
 8022dd8:	f7ff ff48 	bl	8022c6c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022ddc:	4b22      	ldr	r3, [pc, #136]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022dde:	681a      	ldr	r2, [r3, #0]
 8022de0:	4922      	ldr	r1, [pc, #136]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022de2:	4613      	mov	r3, r2
 8022de4:	005b      	lsls	r3, r3, #1
 8022de6:	4413      	add	r3, r2
 8022de8:	009b      	lsls	r3, r3, #2
 8022dea:	440b      	add	r3, r1
 8022dec:	3308      	adds	r3, #8
 8022dee:	681b      	ldr	r3, [r3, #0]
 8022df0:	889a      	ldrh	r2, [r3, #4]
 8022df2:	8bfb      	ldrh	r3, [r7, #30]
 8022df4:	4413      	add	r3, r2
 8022df6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022df8:	68bb      	ldr	r3, [r7, #8]
 8022dfa:	3301      	adds	r3, #1
 8022dfc:	60bb      	str	r3, [r7, #8]
    i++;
 8022dfe:	8bbb      	ldrh	r3, [r7, #28]
 8022e00:	3301      	adds	r3, #1
 8022e02:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022e04:	68bb      	ldr	r3, [r7, #8]
 8022e06:	781b      	ldrb	r3, [r3, #0]
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	bf14      	ite	ne
 8022e0c:	2301      	movne	r3, #1
 8022e0e:	2300      	moveq	r3, #0
 8022e10:	b2dc      	uxtb	r4, r3
 8022e12:	f7ff fdd9 	bl	80229c8 <BSP_LCD_GetXSize>
 8022e16:	8bb9      	ldrh	r1, [r7, #28]
 8022e18:	4b13      	ldr	r3, [pc, #76]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022e1a:	681a      	ldr	r2, [r3, #0]
 8022e1c:	4d13      	ldr	r5, [pc, #76]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022e1e:	4613      	mov	r3, r2
 8022e20:	005b      	lsls	r3, r3, #1
 8022e22:	4413      	add	r3, r2
 8022e24:	009b      	lsls	r3, r3, #2
 8022e26:	442b      	add	r3, r5
 8022e28:	3308      	adds	r3, #8
 8022e2a:	681b      	ldr	r3, [r3, #0]
 8022e2c:	889b      	ldrh	r3, [r3, #4]
 8022e2e:	fb01 f303 	mul.w	r3, r1, r3
 8022e32:	1ac3      	subs	r3, r0, r3
 8022e34:	b299      	uxth	r1, r3
 8022e36:	4b0c      	ldr	r3, [pc, #48]	; (8022e68 <BSP_LCD_DisplayStringAt+0x174>)
 8022e38:	681a      	ldr	r2, [r3, #0]
 8022e3a:	480c      	ldr	r0, [pc, #48]	; (8022e6c <BSP_LCD_DisplayStringAt+0x178>)
 8022e3c:	4613      	mov	r3, r2
 8022e3e:	005b      	lsls	r3, r3, #1
 8022e40:	4413      	add	r3, r2
 8022e42:	009b      	lsls	r3, r3, #2
 8022e44:	4403      	add	r3, r0
 8022e46:	3308      	adds	r3, #8
 8022e48:	681b      	ldr	r3, [r3, #0]
 8022e4a:	889b      	ldrh	r3, [r3, #4]
 8022e4c:	4299      	cmp	r1, r3
 8022e4e:	bf2c      	ite	cs
 8022e50:	2301      	movcs	r3, #1
 8022e52:	2300      	movcc	r3, #0
 8022e54:	b2db      	uxtb	r3, r3
 8022e56:	4023      	ands	r3, r4
 8022e58:	b2db      	uxtb	r3, r3
 8022e5a:	2b00      	cmp	r3, #0
 8022e5c:	d1b7      	bne.n	8022dce <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022e5e:	bf00      	nop
 8022e60:	bf00      	nop
 8022e62:	3720      	adds	r7, #32
 8022e64:	46bd      	mov	sp, r7
 8022e66:	bdb0      	pop	{r4, r5, r7, pc}
 8022e68:	200009e4 	.word	0x200009e4
 8022e6c:	200009e8 	.word	0x200009e8

08022e70 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022e74:	4b05      	ldr	r3, [pc, #20]	; (8022e8c <BSP_LCD_DisplayOn+0x1c>)
 8022e76:	681b      	ldr	r3, [r3, #0]
 8022e78:	689b      	ldr	r3, [r3, #8]
 8022e7a:	2b00      	cmp	r3, #0
 8022e7c:	d003      	beq.n	8022e86 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022e7e:	4b03      	ldr	r3, [pc, #12]	; (8022e8c <BSP_LCD_DisplayOn+0x1c>)
 8022e80:	681b      	ldr	r3, [r3, #0]
 8022e82:	689b      	ldr	r3, [r3, #8]
 8022e84:	4798      	blx	r3
  }
}
 8022e86:	bf00      	nop
 8022e88:	bd80      	pop	{r7, pc}
 8022e8a:	bf00      	nop
 8022e8c:	20000a00 	.word	0x20000a00

08022e90 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022e90:	b580      	push	{r7, lr}
 8022e92:	b08e      	sub	sp, #56	; 0x38
 8022e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022e96:	2300      	movs	r3, #0
 8022e98:	623b      	str	r3, [r7, #32]
 8022e9a:	4b61      	ldr	r3, [pc, #388]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022e9e:	4a60      	ldr	r2, [pc, #384]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ea0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8022ea6:	4b5e      	ldr	r3, [pc, #376]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022eae:	623b      	str	r3, [r7, #32]
 8022eb0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022eb2:	2300      	movs	r3, #0
 8022eb4:	61fb      	str	r3, [r7, #28]
 8022eb6:	4b5a      	ldr	r3, [pc, #360]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eba:	4a59      	ldr	r2, [pc, #356]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8022ec2:	4b57      	ldr	r3, [pc, #348]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022eca:	61fb      	str	r3, [r7, #28]
 8022ecc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022ece:	2300      	movs	r3, #0
 8022ed0:	61bb      	str	r3, [r7, #24]
 8022ed2:	4b53      	ldr	r3, [pc, #332]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ed6:	4a52      	ldr	r2, [pc, #328]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ed8:	f043 0301 	orr.w	r3, r3, #1
 8022edc:	6313      	str	r3, [r2, #48]	; 0x30
 8022ede:	4b50      	ldr	r3, [pc, #320]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ee2:	f003 0301 	and.w	r3, r3, #1
 8022ee6:	61bb      	str	r3, [r7, #24]
 8022ee8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022eea:	2300      	movs	r3, #0
 8022eec:	617b      	str	r3, [r7, #20]
 8022eee:	4b4c      	ldr	r3, [pc, #304]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ef2:	4a4b      	ldr	r2, [pc, #300]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022ef4:	f043 0302 	orr.w	r3, r3, #2
 8022ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8022efa:	4b49      	ldr	r3, [pc, #292]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022efe:	f003 0302 	and.w	r3, r3, #2
 8022f02:	617b      	str	r3, [r7, #20]
 8022f04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022f06:	2300      	movs	r3, #0
 8022f08:	613b      	str	r3, [r7, #16]
 8022f0a:	4b45      	ldr	r3, [pc, #276]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f0e:	4a44      	ldr	r2, [pc, #272]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f10:	f043 0304 	orr.w	r3, r3, #4
 8022f14:	6313      	str	r3, [r2, #48]	; 0x30
 8022f16:	4b42      	ldr	r3, [pc, #264]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f1a:	f003 0304 	and.w	r3, r3, #4
 8022f1e:	613b      	str	r3, [r7, #16]
 8022f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022f22:	2300      	movs	r3, #0
 8022f24:	60fb      	str	r3, [r7, #12]
 8022f26:	4b3e      	ldr	r3, [pc, #248]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f2a:	4a3d      	ldr	r2, [pc, #244]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f2c:	f043 0308 	orr.w	r3, r3, #8
 8022f30:	6313      	str	r3, [r2, #48]	; 0x30
 8022f32:	4b3b      	ldr	r3, [pc, #236]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f36:	f003 0308 	and.w	r3, r3, #8
 8022f3a:	60fb      	str	r3, [r7, #12]
 8022f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022f3e:	2300      	movs	r3, #0
 8022f40:	60bb      	str	r3, [r7, #8]
 8022f42:	4b37      	ldr	r3, [pc, #220]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f46:	4a36      	ldr	r2, [pc, #216]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f48:	f043 0320 	orr.w	r3, r3, #32
 8022f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f4e:	4b34      	ldr	r3, [pc, #208]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f52:	f003 0320 	and.w	r3, r3, #32
 8022f56:	60bb      	str	r3, [r7, #8]
 8022f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	607b      	str	r3, [r7, #4]
 8022f5e:	4b30      	ldr	r3, [pc, #192]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f62:	4a2f      	ldr	r2, [pc, #188]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f68:	6313      	str	r3, [r2, #48]	; 0x30
 8022f6a:	4b2d      	ldr	r3, [pc, #180]	; (8023020 <BSP_LCD_MspInit+0x190>)
 8022f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f72:	607b      	str	r3, [r7, #4]
 8022f74:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022f76:	f641 0358 	movw	r3, #6232	; 0x1858
 8022f7a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022f7c:	2302      	movs	r3, #2
 8022f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022f80:	2300      	movs	r3, #0
 8022f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022f84:	2302      	movs	r3, #2
 8022f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022f88:	230e      	movs	r3, #14
 8022f8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f90:	4619      	mov	r1, r3
 8022f92:	4824      	ldr	r0, [pc, #144]	; (8023024 <BSP_LCD_MspInit+0x194>)
 8022f94:	f001 fcf8 	bl	8024988 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022f98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022f9c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fa2:	4619      	mov	r1, r3
 8022fa4:	4820      	ldr	r0, [pc, #128]	; (8023028 <BSP_LCD_MspInit+0x198>)
 8022fa6:	f001 fcef 	bl	8024988 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022faa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022fae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fb4:	4619      	mov	r1, r3
 8022fb6:	481d      	ldr	r0, [pc, #116]	; (802302c <BSP_LCD_MspInit+0x19c>)
 8022fb8:	f001 fce6 	bl	8024988 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022fbc:	2348      	movs	r3, #72	; 0x48
 8022fbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fc4:	4619      	mov	r1, r3
 8022fc6:	481a      	ldr	r0, [pc, #104]	; (8023030 <BSP_LCD_MspInit+0x1a0>)
 8022fc8:	f001 fcde 	bl	8024988 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fd6:	4619      	mov	r1, r3
 8022fd8:	4816      	ldr	r0, [pc, #88]	; (8023034 <BSP_LCD_MspInit+0x1a4>)
 8022fda:	f001 fcd5 	bl	8024988 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022fde:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022fe2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fe8:	4619      	mov	r1, r3
 8022fea:	4813      	ldr	r0, [pc, #76]	; (8023038 <BSP_LCD_MspInit+0x1a8>)
 8022fec:	f001 fccc 	bl	8024988 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022ff0:	2303      	movs	r3, #3
 8022ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022ff4:	2309      	movs	r3, #9
 8022ff6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ffc:	4619      	mov	r1, r3
 8022ffe:	480a      	ldr	r0, [pc, #40]	; (8023028 <BSP_LCD_MspInit+0x198>)
 8023000:	f001 fcc2 	bl	8024988 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8023004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802300a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802300e:	4619      	mov	r1, r3
 8023010:	4809      	ldr	r0, [pc, #36]	; (8023038 <BSP_LCD_MspInit+0x1a8>)
 8023012:	f001 fcb9 	bl	8024988 <HAL_GPIO_Init>
}
 8023016:	bf00      	nop
 8023018:	3738      	adds	r7, #56	; 0x38
 802301a:	46bd      	mov	sp, r7
 802301c:	bd80      	pop	{r7, pc}
 802301e:	bf00      	nop
 8023020:	40023800 	.word	0x40023800
 8023024:	40020000 	.word	0x40020000
 8023028:	40020400 	.word	0x40020400
 802302c:	40020800 	.word	0x40020800
 8023030:	40020c00 	.word	0x40020c00
 8023034:	40021400 	.word	0x40021400
 8023038:	40021800 	.word	0x40021800

0802303c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 802303c:	b5b0      	push	{r4, r5, r7, lr}
 802303e:	b082      	sub	sp, #8
 8023040:	af00      	add	r7, sp, #0
 8023042:	4603      	mov	r3, r0
 8023044:	603a      	str	r2, [r7, #0]
 8023046:	80fb      	strh	r3, [r7, #6]
 8023048:	460b      	mov	r3, r1
 802304a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 802304c:	4b0c      	ldr	r3, [pc, #48]	; (8023080 <BSP_LCD_DrawPixel+0x44>)
 802304e:	681b      	ldr	r3, [r3, #0]
 8023050:	4a0c      	ldr	r2, [pc, #48]	; (8023084 <BSP_LCD_DrawPixel+0x48>)
 8023052:	2134      	movs	r1, #52	; 0x34
 8023054:	fb01 f303 	mul.w	r3, r1, r3
 8023058:	4413      	add	r3, r2
 802305a:	335c      	adds	r3, #92	; 0x5c
 802305c:	681c      	ldr	r4, [r3, #0]
 802305e:	88bd      	ldrh	r5, [r7, #4]
 8023060:	f7ff fcb2 	bl	80229c8 <BSP_LCD_GetXSize>
 8023064:	4603      	mov	r3, r0
 8023066:	fb03 f205 	mul.w	r2, r3, r5
 802306a:	88fb      	ldrh	r3, [r7, #6]
 802306c:	4413      	add	r3, r2
 802306e:	009b      	lsls	r3, r3, #2
 8023070:	4423      	add	r3, r4
 8023072:	461a      	mov	r2, r3
 8023074:	683b      	ldr	r3, [r7, #0]
 8023076:	6013      	str	r3, [r2, #0]
}
 8023078:	bf00      	nop
 802307a:	3708      	adds	r7, #8
 802307c:	46bd      	mov	sp, r7
 802307e:	bdb0      	pop	{r4, r5, r7, pc}
 8023080:	200009e4 	.word	0x200009e4
 8023084:	200008cc 	.word	0x200008cc

08023088 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8023088:	b580      	push	{r7, lr}
 802308a:	b088      	sub	sp, #32
 802308c:	af00      	add	r7, sp, #0
 802308e:	4603      	mov	r3, r0
 8023090:	603a      	str	r2, [r7, #0]
 8023092:	80fb      	strh	r3, [r7, #6]
 8023094:	460b      	mov	r3, r1
 8023096:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8023098:	2300      	movs	r3, #0
 802309a:	61fb      	str	r3, [r7, #28]
 802309c:	2300      	movs	r3, #0
 802309e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80230a0:	2300      	movs	r3, #0
 80230a2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80230a4:	4b53      	ldr	r3, [pc, #332]	; (80231f4 <DrawChar+0x16c>)
 80230a6:	681a      	ldr	r2, [r3, #0]
 80230a8:	4953      	ldr	r1, [pc, #332]	; (80231f8 <DrawChar+0x170>)
 80230aa:	4613      	mov	r3, r2
 80230ac:	005b      	lsls	r3, r3, #1
 80230ae:	4413      	add	r3, r2
 80230b0:	009b      	lsls	r3, r3, #2
 80230b2:	440b      	add	r3, r1
 80230b4:	3308      	adds	r3, #8
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	88db      	ldrh	r3, [r3, #6]
 80230ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80230bc:	4b4d      	ldr	r3, [pc, #308]	; (80231f4 <DrawChar+0x16c>)
 80230be:	681a      	ldr	r2, [r3, #0]
 80230c0:	494d      	ldr	r1, [pc, #308]	; (80231f8 <DrawChar+0x170>)
 80230c2:	4613      	mov	r3, r2
 80230c4:	005b      	lsls	r3, r3, #1
 80230c6:	4413      	add	r3, r2
 80230c8:	009b      	lsls	r3, r3, #2
 80230ca:	440b      	add	r3, r1
 80230cc:	3308      	adds	r3, #8
 80230ce:	681b      	ldr	r3, [r3, #0]
 80230d0:	889b      	ldrh	r3, [r3, #4]
 80230d2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80230d4:	8a3b      	ldrh	r3, [r7, #16]
 80230d6:	3307      	adds	r3, #7
 80230d8:	2b00      	cmp	r3, #0
 80230da:	da00      	bge.n	80230de <DrawChar+0x56>
 80230dc:	3307      	adds	r3, #7
 80230de:	10db      	asrs	r3, r3, #3
 80230e0:	b2db      	uxtb	r3, r3
 80230e2:	00db      	lsls	r3, r3, #3
 80230e4:	b2da      	uxtb	r2, r3
 80230e6:	8a3b      	ldrh	r3, [r7, #16]
 80230e8:	b2db      	uxtb	r3, r3
 80230ea:	1ad3      	subs	r3, r2, r3
 80230ec:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80230ee:	2300      	movs	r3, #0
 80230f0:	61fb      	str	r3, [r7, #28]
 80230f2:	e076      	b.n	80231e2 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80230f4:	8a3b      	ldrh	r3, [r7, #16]
 80230f6:	3307      	adds	r3, #7
 80230f8:	2b00      	cmp	r3, #0
 80230fa:	da00      	bge.n	80230fe <DrawChar+0x76>
 80230fc:	3307      	adds	r3, #7
 80230fe:	10db      	asrs	r3, r3, #3
 8023100:	461a      	mov	r2, r3
 8023102:	69fb      	ldr	r3, [r7, #28]
 8023104:	fb02 f303 	mul.w	r3, r2, r3
 8023108:	683a      	ldr	r2, [r7, #0]
 802310a:	4413      	add	r3, r2
 802310c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 802310e:	8a3b      	ldrh	r3, [r7, #16]
 8023110:	3307      	adds	r3, #7
 8023112:	2b00      	cmp	r3, #0
 8023114:	da00      	bge.n	8023118 <DrawChar+0x90>
 8023116:	3307      	adds	r3, #7
 8023118:	10db      	asrs	r3, r3, #3
 802311a:	2b01      	cmp	r3, #1
 802311c:	d002      	beq.n	8023124 <DrawChar+0x9c>
 802311e:	2b02      	cmp	r3, #2
 8023120:	d004      	beq.n	802312c <DrawChar+0xa4>
 8023122:	e00c      	b.n	802313e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8023124:	68bb      	ldr	r3, [r7, #8]
 8023126:	781b      	ldrb	r3, [r3, #0]
 8023128:	617b      	str	r3, [r7, #20]
      break;
 802312a:	e016      	b.n	802315a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 802312c:	68bb      	ldr	r3, [r7, #8]
 802312e:	781b      	ldrb	r3, [r3, #0]
 8023130:	021b      	lsls	r3, r3, #8
 8023132:	68ba      	ldr	r2, [r7, #8]
 8023134:	3201      	adds	r2, #1
 8023136:	7812      	ldrb	r2, [r2, #0]
 8023138:	4313      	orrs	r3, r2
 802313a:	617b      	str	r3, [r7, #20]
      break;
 802313c:	e00d      	b.n	802315a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 802313e:	68bb      	ldr	r3, [r7, #8]
 8023140:	781b      	ldrb	r3, [r3, #0]
 8023142:	041a      	lsls	r2, r3, #16
 8023144:	68bb      	ldr	r3, [r7, #8]
 8023146:	3301      	adds	r3, #1
 8023148:	781b      	ldrb	r3, [r3, #0]
 802314a:	021b      	lsls	r3, r3, #8
 802314c:	4313      	orrs	r3, r2
 802314e:	68ba      	ldr	r2, [r7, #8]
 8023150:	3202      	adds	r2, #2
 8023152:	7812      	ldrb	r2, [r2, #0]
 8023154:	4313      	orrs	r3, r2
 8023156:	617b      	str	r3, [r7, #20]
      break;
 8023158:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 802315a:	2300      	movs	r3, #0
 802315c:	61bb      	str	r3, [r7, #24]
 802315e:	e036      	b.n	80231ce <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8023160:	8a3a      	ldrh	r2, [r7, #16]
 8023162:	69bb      	ldr	r3, [r7, #24]
 8023164:	1ad2      	subs	r2, r2, r3
 8023166:	7bfb      	ldrb	r3, [r7, #15]
 8023168:	4413      	add	r3, r2
 802316a:	3b01      	subs	r3, #1
 802316c:	2201      	movs	r2, #1
 802316e:	fa02 f303 	lsl.w	r3, r2, r3
 8023172:	461a      	mov	r2, r3
 8023174:	697b      	ldr	r3, [r7, #20]
 8023176:	4013      	ands	r3, r2
 8023178:	2b00      	cmp	r3, #0
 802317a:	d012      	beq.n	80231a2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 802317c:	69bb      	ldr	r3, [r7, #24]
 802317e:	b29a      	uxth	r2, r3
 8023180:	88fb      	ldrh	r3, [r7, #6]
 8023182:	4413      	add	r3, r2
 8023184:	b298      	uxth	r0, r3
 8023186:	4b1b      	ldr	r3, [pc, #108]	; (80231f4 <DrawChar+0x16c>)
 8023188:	681a      	ldr	r2, [r3, #0]
 802318a:	491b      	ldr	r1, [pc, #108]	; (80231f8 <DrawChar+0x170>)
 802318c:	4613      	mov	r3, r2
 802318e:	005b      	lsls	r3, r3, #1
 8023190:	4413      	add	r3, r2
 8023192:	009b      	lsls	r3, r3, #2
 8023194:	440b      	add	r3, r1
 8023196:	681a      	ldr	r2, [r3, #0]
 8023198:	88bb      	ldrh	r3, [r7, #4]
 802319a:	4619      	mov	r1, r3
 802319c:	f7ff ff4e 	bl	802303c <BSP_LCD_DrawPixel>
 80231a0:	e012      	b.n	80231c8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80231a2:	69bb      	ldr	r3, [r7, #24]
 80231a4:	b29a      	uxth	r2, r3
 80231a6:	88fb      	ldrh	r3, [r7, #6]
 80231a8:	4413      	add	r3, r2
 80231aa:	b298      	uxth	r0, r3
 80231ac:	4b11      	ldr	r3, [pc, #68]	; (80231f4 <DrawChar+0x16c>)
 80231ae:	681a      	ldr	r2, [r3, #0]
 80231b0:	4911      	ldr	r1, [pc, #68]	; (80231f8 <DrawChar+0x170>)
 80231b2:	4613      	mov	r3, r2
 80231b4:	005b      	lsls	r3, r3, #1
 80231b6:	4413      	add	r3, r2
 80231b8:	009b      	lsls	r3, r3, #2
 80231ba:	440b      	add	r3, r1
 80231bc:	3304      	adds	r3, #4
 80231be:	681a      	ldr	r2, [r3, #0]
 80231c0:	88bb      	ldrh	r3, [r7, #4]
 80231c2:	4619      	mov	r1, r3
 80231c4:	f7ff ff3a 	bl	802303c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80231c8:	69bb      	ldr	r3, [r7, #24]
 80231ca:	3301      	adds	r3, #1
 80231cc:	61bb      	str	r3, [r7, #24]
 80231ce:	8a3b      	ldrh	r3, [r7, #16]
 80231d0:	69ba      	ldr	r2, [r7, #24]
 80231d2:	429a      	cmp	r2, r3
 80231d4:	d3c4      	bcc.n	8023160 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80231d6:	88bb      	ldrh	r3, [r7, #4]
 80231d8:	3301      	adds	r3, #1
 80231da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80231dc:	69fb      	ldr	r3, [r7, #28]
 80231de:	3301      	adds	r3, #1
 80231e0:	61fb      	str	r3, [r7, #28]
 80231e2:	8a7b      	ldrh	r3, [r7, #18]
 80231e4:	69fa      	ldr	r2, [r7, #28]
 80231e6:	429a      	cmp	r2, r3
 80231e8:	d384      	bcc.n	80230f4 <DrawChar+0x6c>
  }
}
 80231ea:	bf00      	nop
 80231ec:	bf00      	nop
 80231ee:	3720      	adds	r7, #32
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}
 80231f4:	200009e4 	.word	0x200009e4
 80231f8:	200009e8 	.word	0x200009e8

080231fc <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80231fc:	b580      	push	{r7, lr}
 80231fe:	b086      	sub	sp, #24
 8023200:	af02      	add	r7, sp, #8
 8023202:	60f8      	str	r0, [r7, #12]
 8023204:	60b9      	str	r1, [r7, #8]
 8023206:	607a      	str	r2, [r7, #4]
 8023208:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 802320a:	4b16      	ldr	r3, [pc, #88]	; (8023264 <FillBuffer+0x68>)
 802320c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8023210:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8023212:	4b14      	ldr	r3, [pc, #80]	; (8023264 <FillBuffer+0x68>)
 8023214:	2200      	movs	r2, #0
 8023216:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8023218:	4a12      	ldr	r2, [pc, #72]	; (8023264 <FillBuffer+0x68>)
 802321a:	69bb      	ldr	r3, [r7, #24]
 802321c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 802321e:	4b11      	ldr	r3, [pc, #68]	; (8023264 <FillBuffer+0x68>)
 8023220:	4a11      	ldr	r2, [pc, #68]	; (8023268 <FillBuffer+0x6c>)
 8023222:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8023224:	480f      	ldr	r0, [pc, #60]	; (8023264 <FillBuffer+0x68>)
 8023226:	f000 fd0d 	bl	8023c44 <HAL_DMA2D_Init>
 802322a:	4603      	mov	r3, r0
 802322c:	2b00      	cmp	r3, #0
 802322e:	d115      	bne.n	802325c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8023230:	68f9      	ldr	r1, [r7, #12]
 8023232:	480c      	ldr	r0, [pc, #48]	; (8023264 <FillBuffer+0x68>)
 8023234:	f000 ff74 	bl	8024120 <HAL_DMA2D_ConfigLayer>
 8023238:	4603      	mov	r3, r0
 802323a:	2b00      	cmp	r3, #0
 802323c:	d10e      	bne.n	802325c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 802323e:	68ba      	ldr	r2, [r7, #8]
 8023240:	683b      	ldr	r3, [r7, #0]
 8023242:	9300      	str	r3, [sp, #0]
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	69f9      	ldr	r1, [r7, #28]
 8023248:	4806      	ldr	r0, [pc, #24]	; (8023264 <FillBuffer+0x68>)
 802324a:	f000 fd44 	bl	8023cd6 <HAL_DMA2D_Start>
 802324e:	4603      	mov	r3, r0
 8023250:	2b00      	cmp	r3, #0
 8023252:	d103      	bne.n	802325c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8023254:	210a      	movs	r1, #10
 8023256:	4803      	ldr	r0, [pc, #12]	; (8023264 <FillBuffer+0x68>)
 8023258:	f000 fd68 	bl	8023d2c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 802325c:	bf00      	nop
 802325e:	3710      	adds	r7, #16
 8023260:	46bd      	mov	sp, r7
 8023262:	bd80      	pop	{r7, pc}
 8023264:	20000974 	.word	0x20000974
 8023268:	4002b000 	.word	0x4002b000

0802326c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 802326c:	b580      	push	{r7, lr}
 802326e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8023270:	4b29      	ldr	r3, [pc, #164]	; (8023318 <BSP_SDRAM_Init+0xac>)
 8023272:	4a2a      	ldr	r2, [pc, #168]	; (802331c <BSP_SDRAM_Init+0xb0>)
 8023274:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8023276:	4b2a      	ldr	r3, [pc, #168]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 8023278:	2202      	movs	r2, #2
 802327a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 802327c:	4b28      	ldr	r3, [pc, #160]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 802327e:	2207      	movs	r2, #7
 8023280:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8023282:	4b27      	ldr	r3, [pc, #156]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 8023284:	2204      	movs	r2, #4
 8023286:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8023288:	4b25      	ldr	r3, [pc, #148]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 802328a:	2207      	movs	r2, #7
 802328c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 802328e:	4b24      	ldr	r3, [pc, #144]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 8023290:	2202      	movs	r2, #2
 8023292:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8023294:	4b22      	ldr	r3, [pc, #136]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 8023296:	2202      	movs	r2, #2
 8023298:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 802329a:	4b21      	ldr	r3, [pc, #132]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 802329c:	2202      	movs	r2, #2
 802329e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80232a0:	4b1d      	ldr	r3, [pc, #116]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232a2:	2201      	movs	r2, #1
 80232a4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80232a6:	4b1c      	ldr	r3, [pc, #112]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232a8:	2200      	movs	r2, #0
 80232aa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80232ac:	4b1a      	ldr	r3, [pc, #104]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232ae:	2204      	movs	r2, #4
 80232b0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80232b2:	4b19      	ldr	r3, [pc, #100]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232b4:	2210      	movs	r2, #16
 80232b6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80232b8:	4b17      	ldr	r3, [pc, #92]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232ba:	2240      	movs	r2, #64	; 0x40
 80232bc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80232be:	4b16      	ldr	r3, [pc, #88]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80232c4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80232c6:	4b14      	ldr	r3, [pc, #80]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232c8:	2200      	movs	r2, #0
 80232ca:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80232cc:	4b12      	ldr	r3, [pc, #72]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80232d2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80232d4:	4b10      	ldr	r3, [pc, #64]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232d6:	2200      	movs	r2, #0
 80232d8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80232da:	4b0f      	ldr	r3, [pc, #60]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80232e0:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80232e2:	2100      	movs	r1, #0
 80232e4:	480c      	ldr	r0, [pc, #48]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232e6:	f000 f87f 	bl	80233e8 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80232ea:	490d      	ldr	r1, [pc, #52]	; (8023320 <BSP_SDRAM_Init+0xb4>)
 80232ec:	480a      	ldr	r0, [pc, #40]	; (8023318 <BSP_SDRAM_Init+0xac>)
 80232ee:	f004 fe99 	bl	8028024 <HAL_SDRAM_Init>
 80232f2:	4603      	mov	r3, r0
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	d003      	beq.n	8023300 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80232f8:	4b0a      	ldr	r3, [pc, #40]	; (8023324 <BSP_SDRAM_Init+0xb8>)
 80232fa:	2201      	movs	r2, #1
 80232fc:	701a      	strb	r2, [r3, #0]
 80232fe:	e002      	b.n	8023306 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8023300:	4b08      	ldr	r3, [pc, #32]	; (8023324 <BSP_SDRAM_Init+0xb8>)
 8023302:	2200      	movs	r2, #0
 8023304:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8023306:	f240 506a 	movw	r0, #1386	; 0x56a
 802330a:	f000 f80d 	bl	8023328 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 802330e:	4b05      	ldr	r3, [pc, #20]	; (8023324 <BSP_SDRAM_Init+0xb8>)
 8023310:	781b      	ldrb	r3, [r3, #0]
}
 8023312:	4618      	mov	r0, r3
 8023314:	bd80      	pop	{r7, pc}
 8023316:	bf00      	nop
 8023318:	20000a04 	.word	0x20000a04
 802331c:	a0000140 	.word	0xa0000140
 8023320:	20000a38 	.word	0x20000a38
 8023324:	20000054 	.word	0x20000054

08023328 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8023328:	b580      	push	{r7, lr}
 802332a:	b084      	sub	sp, #16
 802332c:	af00      	add	r7, sp, #0
 802332e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8023330:	2300      	movs	r3, #0
 8023332:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8023334:	4b2a      	ldr	r3, [pc, #168]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023336:	2201      	movs	r2, #1
 8023338:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802333a:	4b29      	ldr	r3, [pc, #164]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802333c:	2208      	movs	r2, #8
 802333e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023340:	4b27      	ldr	r3, [pc, #156]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023342:	2201      	movs	r2, #1
 8023344:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023346:	4b26      	ldr	r3, [pc, #152]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023348:	2200      	movs	r2, #0
 802334a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 802334c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023350:	4923      	ldr	r1, [pc, #140]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023352:	4824      	ldr	r0, [pc, #144]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023354:	f004 fe9a 	bl	802808c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8023358:	2001      	movs	r0, #1
 802335a:	f000 f993 	bl	8023684 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 802335e:	4b20      	ldr	r3, [pc, #128]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023360:	2202      	movs	r2, #2
 8023362:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023364:	4b1e      	ldr	r3, [pc, #120]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023366:	2208      	movs	r2, #8
 8023368:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 802336a:	4b1d      	ldr	r3, [pc, #116]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802336c:	2201      	movs	r2, #1
 802336e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023370:	4b1b      	ldr	r3, [pc, #108]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023372:	2200      	movs	r2, #0
 8023374:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8023376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802337a:	4919      	ldr	r1, [pc, #100]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802337c:	4819      	ldr	r0, [pc, #100]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 802337e:	f004 fe85 	bl	802808c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8023382:	4b17      	ldr	r3, [pc, #92]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023384:	2203      	movs	r2, #3
 8023386:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023388:	4b15      	ldr	r3, [pc, #84]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802338a:	2208      	movs	r2, #8
 802338c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 802338e:	4b14      	ldr	r3, [pc, #80]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023390:	2204      	movs	r2, #4
 8023392:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023394:	4b12      	ldr	r3, [pc, #72]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023396:	2200      	movs	r2, #0
 8023398:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 802339a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802339e:	4910      	ldr	r1, [pc, #64]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233a0:	4810      	ldr	r0, [pc, #64]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233a2:	f004 fe73 	bl	802808c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80233a6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80233aa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80233ac:	4b0c      	ldr	r3, [pc, #48]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ae:	2204      	movs	r2, #4
 80233b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80233b2:	4b0b      	ldr	r3, [pc, #44]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b4:	2208      	movs	r2, #8
 80233b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80233b8:	4b09      	ldr	r3, [pc, #36]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ba:	2201      	movs	r2, #1
 80233bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	4a07      	ldr	r2, [pc, #28]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233c2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233c8:	4905      	ldr	r1, [pc, #20]	; (80233e0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ca:	4806      	ldr	r0, [pc, #24]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233cc:	f004 fe5e 	bl	802808c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80233d0:	6879      	ldr	r1, [r7, #4]
 80233d2:	4804      	ldr	r0, [pc, #16]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233d4:	f004 fe8f 	bl	80280f6 <HAL_SDRAM_ProgramRefreshRate>
}
 80233d8:	bf00      	nop
 80233da:	3710      	adds	r7, #16
 80233dc:	46bd      	mov	sp, r7
 80233de:	bd80      	pop	{r7, pc}
 80233e0:	20000a54 	.word	0x20000a54
 80233e4:	20000a04 	.word	0x20000a04

080233e8 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80233e8:	b580      	push	{r7, lr}
 80233ea:	b090      	sub	sp, #64	; 0x40
 80233ec:	af00      	add	r7, sp, #0
 80233ee:	6078      	str	r0, [r7, #4]
 80233f0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	2b00      	cmp	r3, #0
 80233f6:	f000 80ec 	beq.w	80235d2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80233fa:	2300      	movs	r3, #0
 80233fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80233fe:	4b77      	ldr	r3, [pc, #476]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023402:	4a76      	ldr	r2, [pc, #472]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023404:	f043 0301 	orr.w	r3, r3, #1
 8023408:	6393      	str	r3, [r2, #56]	; 0x38
 802340a:	4b74      	ldr	r3, [pc, #464]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 802340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802340e:	f003 0301 	and.w	r3, r3, #1
 8023412:	62bb      	str	r3, [r7, #40]	; 0x28
 8023414:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8023416:	2300      	movs	r3, #0
 8023418:	627b      	str	r3, [r7, #36]	; 0x24
 802341a:	4b70      	ldr	r3, [pc, #448]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 802341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802341e:	4a6f      	ldr	r2, [pc, #444]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023424:	6313      	str	r3, [r2, #48]	; 0x30
 8023426:	4b6d      	ldr	r3, [pc, #436]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802342a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802342e:	627b      	str	r3, [r7, #36]	; 0x24
 8023430:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023432:	2300      	movs	r3, #0
 8023434:	623b      	str	r3, [r7, #32]
 8023436:	4b69      	ldr	r3, [pc, #420]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802343a:	4a68      	ldr	r2, [pc, #416]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 802343c:	f043 0302 	orr.w	r3, r3, #2
 8023440:	6313      	str	r3, [r2, #48]	; 0x30
 8023442:	4b66      	ldr	r3, [pc, #408]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023446:	f003 0302 	and.w	r3, r3, #2
 802344a:	623b      	str	r3, [r7, #32]
 802344c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802344e:	2300      	movs	r3, #0
 8023450:	61fb      	str	r3, [r7, #28]
 8023452:	4b62      	ldr	r3, [pc, #392]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023456:	4a61      	ldr	r2, [pc, #388]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023458:	f043 0304 	orr.w	r3, r3, #4
 802345c:	6313      	str	r3, [r2, #48]	; 0x30
 802345e:	4b5f      	ldr	r3, [pc, #380]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023462:	f003 0304 	and.w	r3, r3, #4
 8023466:	61fb      	str	r3, [r7, #28]
 8023468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802346a:	2300      	movs	r3, #0
 802346c:	61bb      	str	r3, [r7, #24]
 802346e:	4b5b      	ldr	r3, [pc, #364]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023472:	4a5a      	ldr	r2, [pc, #360]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023474:	f043 0308 	orr.w	r3, r3, #8
 8023478:	6313      	str	r3, [r2, #48]	; 0x30
 802347a:	4b58      	ldr	r3, [pc, #352]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 802347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802347e:	f003 0308 	and.w	r3, r3, #8
 8023482:	61bb      	str	r3, [r7, #24]
 8023484:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8023486:	2300      	movs	r3, #0
 8023488:	617b      	str	r3, [r7, #20]
 802348a:	4b54      	ldr	r3, [pc, #336]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 802348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802348e:	4a53      	ldr	r2, [pc, #332]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023490:	f043 0310 	orr.w	r3, r3, #16
 8023494:	6313      	str	r3, [r2, #48]	; 0x30
 8023496:	4b51      	ldr	r3, [pc, #324]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 8023498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802349a:	f003 0310 	and.w	r3, r3, #16
 802349e:	617b      	str	r3, [r7, #20]
 80234a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80234a2:	2300      	movs	r3, #0
 80234a4:	613b      	str	r3, [r7, #16]
 80234a6:	4b4d      	ldr	r3, [pc, #308]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234aa:	4a4c      	ldr	r2, [pc, #304]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234ac:	f043 0320 	orr.w	r3, r3, #32
 80234b0:	6313      	str	r3, [r2, #48]	; 0x30
 80234b2:	4b4a      	ldr	r3, [pc, #296]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234b6:	f003 0320 	and.w	r3, r3, #32
 80234ba:	613b      	str	r3, [r7, #16]
 80234bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80234be:	2300      	movs	r3, #0
 80234c0:	60fb      	str	r3, [r7, #12]
 80234c2:	4b46      	ldr	r3, [pc, #280]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234c6:	4a45      	ldr	r2, [pc, #276]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234cc:	6313      	str	r3, [r2, #48]	; 0x30
 80234ce:	4b43      	ldr	r3, [pc, #268]	; (80235dc <BSP_SDRAM_MspInit+0x1f4>)
 80234d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80234d6:	60fb      	str	r3, [r7, #12]
 80234d8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80234da:	2302      	movs	r3, #2
 80234dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80234de:	2302      	movs	r3, #2
 80234e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80234e2:	2300      	movs	r3, #0
 80234e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80234e6:	230c      	movs	r3, #12
 80234e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80234ea:	2360      	movs	r3, #96	; 0x60
 80234ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80234ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80234f2:	4619      	mov	r1, r3
 80234f4:	483a      	ldr	r0, [pc, #232]	; (80235e0 <BSP_SDRAM_MspInit+0x1f8>)
 80234f6:	f001 fa47 	bl	8024988 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80234fa:	2301      	movs	r3, #1
 80234fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80234fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023502:	4619      	mov	r1, r3
 8023504:	4837      	ldr	r0, [pc, #220]	; (80235e4 <BSP_SDRAM_MspInit+0x1fc>)
 8023506:	f001 fa3f 	bl	8024988 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 802350a:	f24c 7303 	movw	r3, #50947	; 0xc703
 802350e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8023510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023514:	4619      	mov	r1, r3
 8023516:	4834      	ldr	r0, [pc, #208]	; (80235e8 <BSP_SDRAM_MspInit+0x200>)
 8023518:	f001 fa36 	bl	8024988 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 802351c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8023520:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8023522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023526:	4619      	mov	r1, r3
 8023528:	4830      	ldr	r0, [pc, #192]	; (80235ec <BSP_SDRAM_MspInit+0x204>)
 802352a:	f001 fa2d 	bl	8024988 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 802352e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8023532:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8023534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023538:	4619      	mov	r1, r3
 802353a:	482d      	ldr	r0, [pc, #180]	; (80235f0 <BSP_SDRAM_MspInit+0x208>)
 802353c:	f001 fa24 	bl	8024988 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8023540:	f248 1333 	movw	r3, #33075	; 0x8133
 8023544:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8023546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802354a:	4619      	mov	r1, r3
 802354c:	4829      	ldr	r0, [pc, #164]	; (80235f4 <BSP_SDRAM_MspInit+0x20c>)
 802354e:	f001 fa1b 	bl	8024988 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8023552:	4b29      	ldr	r3, [pc, #164]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023554:	2200      	movs	r2, #0
 8023556:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023558:	4b27      	ldr	r3, [pc, #156]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 802355a:	2280      	movs	r2, #128	; 0x80
 802355c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 802355e:	4b26      	ldr	r3, [pc, #152]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023564:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8023566:	4b24      	ldr	r3, [pc, #144]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802356c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 802356e:	4b22      	ldr	r3, [pc, #136]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023574:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8023576:	4b20      	ldr	r3, [pc, #128]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023578:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802357c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 802357e:	4b1e      	ldr	r3, [pc, #120]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023580:	2200      	movs	r2, #0
 8023582:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8023584:	4b1c      	ldr	r3, [pc, #112]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802358a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 802358c:	4b1a      	ldr	r3, [pc, #104]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 802358e:	2200      	movs	r2, #0
 8023590:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8023592:	4b19      	ldr	r3, [pc, #100]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 8023594:	2203      	movs	r2, #3
 8023596:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8023598:	4b17      	ldr	r3, [pc, #92]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 802359a:	2200      	movs	r2, #0
 802359c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 802359e:	4b16      	ldr	r3, [pc, #88]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235a0:	2200      	movs	r2, #0
 80235a2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80235a4:	4b14      	ldr	r3, [pc, #80]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235a6:	4a15      	ldr	r2, [pc, #84]	; (80235fc <BSP_SDRAM_MspInit+0x214>)
 80235a8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80235aa:	687b      	ldr	r3, [r7, #4]
 80235ac:	4a12      	ldr	r2, [pc, #72]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235ae:	631a      	str	r2, [r3, #48]	; 0x30
 80235b0:	4a11      	ldr	r2, [pc, #68]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80235b6:	4810      	ldr	r0, [pc, #64]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235b8:	f000 fa34 	bl	8023a24 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80235bc:	480e      	ldr	r0, [pc, #56]	; (80235f8 <BSP_SDRAM_MspInit+0x210>)
 80235be:	f000 f983 	bl	80238c8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80235c2:	2200      	movs	r2, #0
 80235c4:	210f      	movs	r1, #15
 80235c6:	2038      	movs	r0, #56	; 0x38
 80235c8:	f000 f938 	bl	802383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80235cc:	2038      	movs	r0, #56	; 0x38
 80235ce:	f000 f951 	bl	8023874 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80235d2:	bf00      	nop
 80235d4:	3740      	adds	r7, #64	; 0x40
 80235d6:	46bd      	mov	sp, r7
 80235d8:	bd80      	pop	{r7, pc}
 80235da:	bf00      	nop
 80235dc:	40023800 	.word	0x40023800
 80235e0:	40020400 	.word	0x40020400
 80235e4:	40020800 	.word	0x40020800
 80235e8:	40020c00 	.word	0x40020c00
 80235ec:	40021000 	.word	0x40021000
 80235f0:	40021400 	.word	0x40021400
 80235f4:	40021800 	.word	0x40021800
 80235f8:	20000a64 	.word	0x20000a64
 80235fc:	40026410 	.word	0x40026410

08023600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023600:	b580      	push	{r7, lr}
 8023602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023604:	4b0e      	ldr	r3, [pc, #56]	; (8023640 <HAL_Init+0x40>)
 8023606:	681b      	ldr	r3, [r3, #0]
 8023608:	4a0d      	ldr	r2, [pc, #52]	; (8023640 <HAL_Init+0x40>)
 802360a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802360e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023610:	4b0b      	ldr	r3, [pc, #44]	; (8023640 <HAL_Init+0x40>)
 8023612:	681b      	ldr	r3, [r3, #0]
 8023614:	4a0a      	ldr	r2, [pc, #40]	; (8023640 <HAL_Init+0x40>)
 8023616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802361a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802361c:	4b08      	ldr	r3, [pc, #32]	; (8023640 <HAL_Init+0x40>)
 802361e:	681b      	ldr	r3, [r3, #0]
 8023620:	4a07      	ldr	r2, [pc, #28]	; (8023640 <HAL_Init+0x40>)
 8023622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023628:	2003      	movs	r0, #3
 802362a:	f000 f8fc 	bl	8023826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802362e:	200f      	movs	r0, #15
 8023630:	f7fe fc38 	bl	8021ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023634:	f7fe f866 	bl	8021704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023638:	2300      	movs	r3, #0
}
 802363a:	4618      	mov	r0, r3
 802363c:	bd80      	pop	{r7, pc}
 802363e:	bf00      	nop
 8023640:	40023c00 	.word	0x40023c00

08023644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023644:	b480      	push	{r7}
 8023646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023648:	4b06      	ldr	r3, [pc, #24]	; (8023664 <HAL_IncTick+0x20>)
 802364a:	781b      	ldrb	r3, [r3, #0]
 802364c:	461a      	mov	r2, r3
 802364e:	4b06      	ldr	r3, [pc, #24]	; (8023668 <HAL_IncTick+0x24>)
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	4413      	add	r3, r2
 8023654:	4a04      	ldr	r2, [pc, #16]	; (8023668 <HAL_IncTick+0x24>)
 8023656:	6013      	str	r3, [r2, #0]
}
 8023658:	bf00      	nop
 802365a:	46bd      	mov	sp, r7
 802365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023660:	4770      	bx	lr
 8023662:	bf00      	nop
 8023664:	2000005c 	.word	0x2000005c
 8023668:	20000ac4 	.word	0x20000ac4

0802366c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802366c:	b480      	push	{r7}
 802366e:	af00      	add	r7, sp, #0
  return uwTick;
 8023670:	4b03      	ldr	r3, [pc, #12]	; (8023680 <HAL_GetTick+0x14>)
 8023672:	681b      	ldr	r3, [r3, #0]
}
 8023674:	4618      	mov	r0, r3
 8023676:	46bd      	mov	sp, r7
 8023678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802367c:	4770      	bx	lr
 802367e:	bf00      	nop
 8023680:	20000ac4 	.word	0x20000ac4

08023684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023684:	b580      	push	{r7, lr}
 8023686:	b084      	sub	sp, #16
 8023688:	af00      	add	r7, sp, #0
 802368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 802368c:	f7ff ffee 	bl	802366c <HAL_GetTick>
 8023690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8023696:	68fb      	ldr	r3, [r7, #12]
 8023698:	f1b3 3fff 	cmp.w	r3, #4294967295
 802369c:	d005      	beq.n	80236aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 802369e:	4b0a      	ldr	r3, [pc, #40]	; (80236c8 <HAL_Delay+0x44>)
 80236a0:	781b      	ldrb	r3, [r3, #0]
 80236a2:	461a      	mov	r2, r3
 80236a4:	68fb      	ldr	r3, [r7, #12]
 80236a6:	4413      	add	r3, r2
 80236a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80236aa:	bf00      	nop
 80236ac:	f7ff ffde 	bl	802366c <HAL_GetTick>
 80236b0:	4602      	mov	r2, r0
 80236b2:	68bb      	ldr	r3, [r7, #8]
 80236b4:	1ad3      	subs	r3, r2, r3
 80236b6:	68fa      	ldr	r2, [r7, #12]
 80236b8:	429a      	cmp	r2, r3
 80236ba:	d8f7      	bhi.n	80236ac <HAL_Delay+0x28>
  {
  }
}
 80236bc:	bf00      	nop
 80236be:	bf00      	nop
 80236c0:	3710      	adds	r7, #16
 80236c2:	46bd      	mov	sp, r7
 80236c4:	bd80      	pop	{r7, pc}
 80236c6:	bf00      	nop
 80236c8:	2000005c 	.word	0x2000005c

080236cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80236cc:	b480      	push	{r7}
 80236ce:	b085      	sub	sp, #20
 80236d0:	af00      	add	r7, sp, #0
 80236d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80236d4:	687b      	ldr	r3, [r7, #4]
 80236d6:	f003 0307 	and.w	r3, r3, #7
 80236da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80236dc:	4b0c      	ldr	r3, [pc, #48]	; (8023710 <__NVIC_SetPriorityGrouping+0x44>)
 80236de:	68db      	ldr	r3, [r3, #12]
 80236e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80236e2:	68ba      	ldr	r2, [r7, #8]
 80236e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80236e8:	4013      	ands	r3, r2
 80236ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80236ec:	68fb      	ldr	r3, [r7, #12]
 80236ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80236f0:	68bb      	ldr	r3, [r7, #8]
 80236f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80236f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80236f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80236fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80236fe:	4a04      	ldr	r2, [pc, #16]	; (8023710 <__NVIC_SetPriorityGrouping+0x44>)
 8023700:	68bb      	ldr	r3, [r7, #8]
 8023702:	60d3      	str	r3, [r2, #12]
}
 8023704:	bf00      	nop
 8023706:	3714      	adds	r7, #20
 8023708:	46bd      	mov	sp, r7
 802370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802370e:	4770      	bx	lr
 8023710:	e000ed00 	.word	0xe000ed00

08023714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023714:	b480      	push	{r7}
 8023716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023718:	4b04      	ldr	r3, [pc, #16]	; (802372c <__NVIC_GetPriorityGrouping+0x18>)
 802371a:	68db      	ldr	r3, [r3, #12]
 802371c:	0a1b      	lsrs	r3, r3, #8
 802371e:	f003 0307 	and.w	r3, r3, #7
}
 8023722:	4618      	mov	r0, r3
 8023724:	46bd      	mov	sp, r7
 8023726:	f85d 7b04 	ldr.w	r7, [sp], #4
 802372a:	4770      	bx	lr
 802372c:	e000ed00 	.word	0xe000ed00

08023730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023730:	b480      	push	{r7}
 8023732:	b083      	sub	sp, #12
 8023734:	af00      	add	r7, sp, #0
 8023736:	4603      	mov	r3, r0
 8023738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802373e:	2b00      	cmp	r3, #0
 8023740:	db0b      	blt.n	802375a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023742:	79fb      	ldrb	r3, [r7, #7]
 8023744:	f003 021f 	and.w	r2, r3, #31
 8023748:	4907      	ldr	r1, [pc, #28]	; (8023768 <__NVIC_EnableIRQ+0x38>)
 802374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802374e:	095b      	lsrs	r3, r3, #5
 8023750:	2001      	movs	r0, #1
 8023752:	fa00 f202 	lsl.w	r2, r0, r2
 8023756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802375a:	bf00      	nop
 802375c:	370c      	adds	r7, #12
 802375e:	46bd      	mov	sp, r7
 8023760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023764:	4770      	bx	lr
 8023766:	bf00      	nop
 8023768:	e000e100 	.word	0xe000e100

0802376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 802376c:	b480      	push	{r7}
 802376e:	b083      	sub	sp, #12
 8023770:	af00      	add	r7, sp, #0
 8023772:	4603      	mov	r3, r0
 8023774:	6039      	str	r1, [r7, #0]
 8023776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802377c:	2b00      	cmp	r3, #0
 802377e:	db0a      	blt.n	8023796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023780:	683b      	ldr	r3, [r7, #0]
 8023782:	b2da      	uxtb	r2, r3
 8023784:	490c      	ldr	r1, [pc, #48]	; (80237b8 <__NVIC_SetPriority+0x4c>)
 8023786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802378a:	0112      	lsls	r2, r2, #4
 802378c:	b2d2      	uxtb	r2, r2
 802378e:	440b      	add	r3, r1
 8023790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023794:	e00a      	b.n	80237ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023796:	683b      	ldr	r3, [r7, #0]
 8023798:	b2da      	uxtb	r2, r3
 802379a:	4908      	ldr	r1, [pc, #32]	; (80237bc <__NVIC_SetPriority+0x50>)
 802379c:	79fb      	ldrb	r3, [r7, #7]
 802379e:	f003 030f 	and.w	r3, r3, #15
 80237a2:	3b04      	subs	r3, #4
 80237a4:	0112      	lsls	r2, r2, #4
 80237a6:	b2d2      	uxtb	r2, r2
 80237a8:	440b      	add	r3, r1
 80237aa:	761a      	strb	r2, [r3, #24]
}
 80237ac:	bf00      	nop
 80237ae:	370c      	adds	r7, #12
 80237b0:	46bd      	mov	sp, r7
 80237b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237b6:	4770      	bx	lr
 80237b8:	e000e100 	.word	0xe000e100
 80237bc:	e000ed00 	.word	0xe000ed00

080237c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80237c0:	b480      	push	{r7}
 80237c2:	b089      	sub	sp, #36	; 0x24
 80237c4:	af00      	add	r7, sp, #0
 80237c6:	60f8      	str	r0, [r7, #12]
 80237c8:	60b9      	str	r1, [r7, #8]
 80237ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80237cc:	68fb      	ldr	r3, [r7, #12]
 80237ce:	f003 0307 	and.w	r3, r3, #7
 80237d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80237d4:	69fb      	ldr	r3, [r7, #28]
 80237d6:	f1c3 0307 	rsb	r3, r3, #7
 80237da:	2b04      	cmp	r3, #4
 80237dc:	bf28      	it	cs
 80237de:	2304      	movcs	r3, #4
 80237e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80237e2:	69fb      	ldr	r3, [r7, #28]
 80237e4:	3304      	adds	r3, #4
 80237e6:	2b06      	cmp	r3, #6
 80237e8:	d902      	bls.n	80237f0 <NVIC_EncodePriority+0x30>
 80237ea:	69fb      	ldr	r3, [r7, #28]
 80237ec:	3b03      	subs	r3, #3
 80237ee:	e000      	b.n	80237f2 <NVIC_EncodePriority+0x32>
 80237f0:	2300      	movs	r3, #0
 80237f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80237f4:	f04f 32ff 	mov.w	r2, #4294967295
 80237f8:	69bb      	ldr	r3, [r7, #24]
 80237fa:	fa02 f303 	lsl.w	r3, r2, r3
 80237fe:	43da      	mvns	r2, r3
 8023800:	68bb      	ldr	r3, [r7, #8]
 8023802:	401a      	ands	r2, r3
 8023804:	697b      	ldr	r3, [r7, #20]
 8023806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023808:	f04f 31ff 	mov.w	r1, #4294967295
 802380c:	697b      	ldr	r3, [r7, #20]
 802380e:	fa01 f303 	lsl.w	r3, r1, r3
 8023812:	43d9      	mvns	r1, r3
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023818:	4313      	orrs	r3, r2
         );
}
 802381a:	4618      	mov	r0, r3
 802381c:	3724      	adds	r7, #36	; 0x24
 802381e:	46bd      	mov	sp, r7
 8023820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023824:	4770      	bx	lr

08023826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023826:	b580      	push	{r7, lr}
 8023828:	b082      	sub	sp, #8
 802382a:	af00      	add	r7, sp, #0
 802382c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802382e:	6878      	ldr	r0, [r7, #4]
 8023830:	f7ff ff4c 	bl	80236cc <__NVIC_SetPriorityGrouping>
}
 8023834:	bf00      	nop
 8023836:	3708      	adds	r7, #8
 8023838:	46bd      	mov	sp, r7
 802383a:	bd80      	pop	{r7, pc}

0802383c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802383c:	b580      	push	{r7, lr}
 802383e:	b086      	sub	sp, #24
 8023840:	af00      	add	r7, sp, #0
 8023842:	4603      	mov	r3, r0
 8023844:	60b9      	str	r1, [r7, #8]
 8023846:	607a      	str	r2, [r7, #4]
 8023848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802384a:	2300      	movs	r3, #0
 802384c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802384e:	f7ff ff61 	bl	8023714 <__NVIC_GetPriorityGrouping>
 8023852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023854:	687a      	ldr	r2, [r7, #4]
 8023856:	68b9      	ldr	r1, [r7, #8]
 8023858:	6978      	ldr	r0, [r7, #20]
 802385a:	f7ff ffb1 	bl	80237c0 <NVIC_EncodePriority>
 802385e:	4602      	mov	r2, r0
 8023860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023864:	4611      	mov	r1, r2
 8023866:	4618      	mov	r0, r3
 8023868:	f7ff ff80 	bl	802376c <__NVIC_SetPriority>
}
 802386c:	bf00      	nop
 802386e:	3718      	adds	r7, #24
 8023870:	46bd      	mov	sp, r7
 8023872:	bd80      	pop	{r7, pc}

08023874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023874:	b580      	push	{r7, lr}
 8023876:	b082      	sub	sp, #8
 8023878:	af00      	add	r7, sp, #0
 802387a:	4603      	mov	r3, r0
 802387c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023882:	4618      	mov	r0, r3
 8023884:	f7ff ff54 	bl	8023730 <__NVIC_EnableIRQ>
}
 8023888:	bf00      	nop
 802388a:	3708      	adds	r7, #8
 802388c:	46bd      	mov	sp, r7
 802388e:	bd80      	pop	{r7, pc}

08023890 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8023890:	b580      	push	{r7, lr}
 8023892:	b082      	sub	sp, #8
 8023894:	af00      	add	r7, sp, #0
 8023896:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023898:	687b      	ldr	r3, [r7, #4]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d101      	bne.n	80238a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802389e:	2301      	movs	r3, #1
 80238a0:	e00e      	b.n	80238c0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	795b      	ldrb	r3, [r3, #5]
 80238a6:	b2db      	uxtb	r3, r3
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d105      	bne.n	80238b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80238ac:	687b      	ldr	r3, [r7, #4]
 80238ae:	2200      	movs	r2, #0
 80238b0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80238b2:	6878      	ldr	r0, [r7, #4]
 80238b4:	f7fd ff4e 	bl	8021754 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	2201      	movs	r2, #1
 80238bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80238be:	2300      	movs	r3, #0
}
 80238c0:	4618      	mov	r0, r3
 80238c2:	3708      	adds	r7, #8
 80238c4:	46bd      	mov	sp, r7
 80238c6:	bd80      	pop	{r7, pc}

080238c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80238c8:	b580      	push	{r7, lr}
 80238ca:	b086      	sub	sp, #24
 80238cc:	af00      	add	r7, sp, #0
 80238ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80238d0:	2300      	movs	r3, #0
 80238d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80238d4:	f7ff feca 	bl	802366c <HAL_GetTick>
 80238d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	2b00      	cmp	r3, #0
 80238de:	d101      	bne.n	80238e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80238e0:	2301      	movs	r3, #1
 80238e2:	e099      	b.n	8023a18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80238e4:	687b      	ldr	r3, [r7, #4]
 80238e6:	2202      	movs	r2, #2
 80238e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80238ec:	687b      	ldr	r3, [r7, #4]
 80238ee:	2200      	movs	r2, #0
 80238f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	681a      	ldr	r2, [r3, #0]
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	681b      	ldr	r3, [r3, #0]
 80238fe:	f022 0201 	bic.w	r2, r2, #1
 8023902:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023904:	e00f      	b.n	8023926 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023906:	f7ff feb1 	bl	802366c <HAL_GetTick>
 802390a:	4602      	mov	r2, r0
 802390c:	693b      	ldr	r3, [r7, #16]
 802390e:	1ad3      	subs	r3, r2, r3
 8023910:	2b05      	cmp	r3, #5
 8023912:	d908      	bls.n	8023926 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023914:	687b      	ldr	r3, [r7, #4]
 8023916:	2220      	movs	r2, #32
 8023918:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	2203      	movs	r2, #3
 802391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023922:	2303      	movs	r3, #3
 8023924:	e078      	b.n	8023a18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023926:	687b      	ldr	r3, [r7, #4]
 8023928:	681b      	ldr	r3, [r3, #0]
 802392a:	681b      	ldr	r3, [r3, #0]
 802392c:	f003 0301 	and.w	r3, r3, #1
 8023930:	2b00      	cmp	r3, #0
 8023932:	d1e8      	bne.n	8023906 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	681b      	ldr	r3, [r3, #0]
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802393c:	697a      	ldr	r2, [r7, #20]
 802393e:	4b38      	ldr	r3, [pc, #224]	; (8023a20 <HAL_DMA_Init+0x158>)
 8023940:	4013      	ands	r3, r2
 8023942:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	685a      	ldr	r2, [r3, #4]
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	689b      	ldr	r3, [r3, #8]
 802394c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023954:	687b      	ldr	r3, [r7, #4]
 8023956:	691b      	ldr	r3, [r3, #16]
 8023958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	699b      	ldr	r3, [r3, #24]
 8023964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802396a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	6a1b      	ldr	r3, [r3, #32]
 8023970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023972:	697a      	ldr	r2, [r7, #20]
 8023974:	4313      	orrs	r3, r2
 8023976:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802397c:	2b04      	cmp	r3, #4
 802397e:	d107      	bne.n	8023990 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023988:	4313      	orrs	r3, r2
 802398a:	697a      	ldr	r2, [r7, #20]
 802398c:	4313      	orrs	r3, r2
 802398e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8023990:	687b      	ldr	r3, [r7, #4]
 8023992:	681b      	ldr	r3, [r3, #0]
 8023994:	697a      	ldr	r2, [r7, #20]
 8023996:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023998:	687b      	ldr	r3, [r7, #4]
 802399a:	681b      	ldr	r3, [r3, #0]
 802399c:	695b      	ldr	r3, [r3, #20]
 802399e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80239a0:	697b      	ldr	r3, [r7, #20]
 80239a2:	f023 0307 	bic.w	r3, r3, #7
 80239a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239ac:	697a      	ldr	r2, [r7, #20]
 80239ae:	4313      	orrs	r3, r2
 80239b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239b2:	687b      	ldr	r3, [r7, #4]
 80239b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239b6:	2b04      	cmp	r3, #4
 80239b8:	d117      	bne.n	80239ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239be:	697a      	ldr	r2, [r7, #20]
 80239c0:	4313      	orrs	r3, r2
 80239c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	d00e      	beq.n	80239ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80239cc:	6878      	ldr	r0, [r7, #4]
 80239ce:	f000 f8bd 	bl	8023b4c <DMA_CheckFifoParam>
 80239d2:	4603      	mov	r3, r0
 80239d4:	2b00      	cmp	r3, #0
 80239d6:	d008      	beq.n	80239ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	2240      	movs	r2, #64	; 0x40
 80239dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	2201      	movs	r2, #1
 80239e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80239e6:	2301      	movs	r3, #1
 80239e8:	e016      	b.n	8023a18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	681b      	ldr	r3, [r3, #0]
 80239ee:	697a      	ldr	r2, [r7, #20]
 80239f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80239f2:	6878      	ldr	r0, [r7, #4]
 80239f4:	f000 f874 	bl	8023ae0 <DMA_CalcBaseAndBitshift>
 80239f8:	4603      	mov	r3, r0
 80239fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a00:	223f      	movs	r2, #63	; 0x3f
 8023a02:	409a      	lsls	r2, r3
 8023a04:	68fb      	ldr	r3, [r7, #12]
 8023a06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023a0e:	687b      	ldr	r3, [r7, #4]
 8023a10:	2201      	movs	r2, #1
 8023a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023a16:	2300      	movs	r3, #0
}
 8023a18:	4618      	mov	r0, r3
 8023a1a:	3718      	adds	r7, #24
 8023a1c:	46bd      	mov	sp, r7
 8023a1e:	bd80      	pop	{r7, pc}
 8023a20:	f010803f 	.word	0xf010803f

08023a24 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023a24:	b580      	push	{r7, lr}
 8023a26:	b084      	sub	sp, #16
 8023a28:	af00      	add	r7, sp, #0
 8023a2a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	2b00      	cmp	r3, #0
 8023a30:	d101      	bne.n	8023a36 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023a32:	2301      	movs	r3, #1
 8023a34:	e050      	b.n	8023ad8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023a3c:	b2db      	uxtb	r3, r3
 8023a3e:	2b02      	cmp	r3, #2
 8023a40:	d101      	bne.n	8023a46 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023a42:	2302      	movs	r3, #2
 8023a44:	e048      	b.n	8023ad8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	681b      	ldr	r3, [r3, #0]
 8023a4a:	681a      	ldr	r2, [r3, #0]
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	681b      	ldr	r3, [r3, #0]
 8023a50:	f022 0201 	bic.w	r2, r2, #1
 8023a54:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	681b      	ldr	r3, [r3, #0]
 8023a5a:	2200      	movs	r2, #0
 8023a5c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8023a5e:	687b      	ldr	r3, [r7, #4]
 8023a60:	681b      	ldr	r3, [r3, #0]
 8023a62:	2200      	movs	r2, #0
 8023a64:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	681b      	ldr	r3, [r3, #0]
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	681b      	ldr	r3, [r3, #0]
 8023a72:	2200      	movs	r2, #0
 8023a74:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	681b      	ldr	r3, [r3, #0]
 8023a7a:	2200      	movs	r2, #0
 8023a7c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8023a7e:	687b      	ldr	r3, [r7, #4]
 8023a80:	681b      	ldr	r3, [r3, #0]
 8023a82:	2221      	movs	r2, #33	; 0x21
 8023a84:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023a86:	6878      	ldr	r0, [r7, #4]
 8023a88:	f000 f82a 	bl	8023ae0 <DMA_CalcBaseAndBitshift>
 8023a8c:	4603      	mov	r3, r0
 8023a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	2200      	movs	r2, #0
 8023a94:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	2200      	movs	r2, #0
 8023a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	2200      	movs	r2, #0
 8023aa6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023aa8:	687b      	ldr	r3, [r7, #4]
 8023aaa:	2200      	movs	r2, #0
 8023aac:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	2200      	movs	r2, #0
 8023ab2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023ab4:	687b      	ldr	r3, [r7, #4]
 8023ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023ab8:	223f      	movs	r2, #63	; 0x3f
 8023aba:	409a      	lsls	r2, r3
 8023abc:	68fb      	ldr	r3, [r7, #12]
 8023abe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	2200      	movs	r2, #0
 8023aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	2200      	movs	r2, #0
 8023ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023ad6:	2300      	movs	r3, #0
}
 8023ad8:	4618      	mov	r0, r3
 8023ada:	3710      	adds	r7, #16
 8023adc:	46bd      	mov	sp, r7
 8023ade:	bd80      	pop	{r7, pc}

08023ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023ae0:	b480      	push	{r7}
 8023ae2:	b085      	sub	sp, #20
 8023ae4:	af00      	add	r7, sp, #0
 8023ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	681b      	ldr	r3, [r3, #0]
 8023aec:	b2db      	uxtb	r3, r3
 8023aee:	3b10      	subs	r3, #16
 8023af0:	4a14      	ldr	r2, [pc, #80]	; (8023b44 <DMA_CalcBaseAndBitshift+0x64>)
 8023af2:	fba2 2303 	umull	r2, r3, r2, r3
 8023af6:	091b      	lsrs	r3, r3, #4
 8023af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023afa:	4a13      	ldr	r2, [pc, #76]	; (8023b48 <DMA_CalcBaseAndBitshift+0x68>)
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	4413      	add	r3, r2
 8023b00:	781b      	ldrb	r3, [r3, #0]
 8023b02:	461a      	mov	r2, r3
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023b08:	68fb      	ldr	r3, [r7, #12]
 8023b0a:	2b03      	cmp	r3, #3
 8023b0c:	d909      	bls.n	8023b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	681b      	ldr	r3, [r3, #0]
 8023b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023b16:	f023 0303 	bic.w	r3, r3, #3
 8023b1a:	1d1a      	adds	r2, r3, #4
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8023b20:	e007      	b.n	8023b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023b2a:	f023 0303 	bic.w	r3, r3, #3
 8023b2e:	687a      	ldr	r2, [r7, #4]
 8023b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023b36:	4618      	mov	r0, r3
 8023b38:	3714      	adds	r7, #20
 8023b3a:	46bd      	mov	sp, r7
 8023b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b40:	4770      	bx	lr
 8023b42:	bf00      	nop
 8023b44:	aaaaaaab 	.word	0xaaaaaaab
 8023b48:	0803119c 	.word	0x0803119c

08023b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023b4c:	b480      	push	{r7}
 8023b4e:	b085      	sub	sp, #20
 8023b50:	af00      	add	r7, sp, #0
 8023b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023b54:	2300      	movs	r3, #0
 8023b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	699b      	ldr	r3, [r3, #24]
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	d11f      	bne.n	8023ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023b66:	68bb      	ldr	r3, [r7, #8]
 8023b68:	2b03      	cmp	r3, #3
 8023b6a:	d856      	bhi.n	8023c1a <DMA_CheckFifoParam+0xce>
 8023b6c:	a201      	add	r2, pc, #4	; (adr r2, 8023b74 <DMA_CheckFifoParam+0x28>)
 8023b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b72:	bf00      	nop
 8023b74:	08023b85 	.word	0x08023b85
 8023b78:	08023b97 	.word	0x08023b97
 8023b7c:	08023b85 	.word	0x08023b85
 8023b80:	08023c1b 	.word	0x08023c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023b8c:	2b00      	cmp	r3, #0
 8023b8e:	d046      	beq.n	8023c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023b90:	2301      	movs	r3, #1
 8023b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023b94:	e043      	b.n	8023c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023b96:	687b      	ldr	r3, [r7, #4]
 8023b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023b9e:	d140      	bne.n	8023c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023ba0:	2301      	movs	r3, #1
 8023ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023ba4:	e03d      	b.n	8023c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023ba6:	687b      	ldr	r3, [r7, #4]
 8023ba8:	699b      	ldr	r3, [r3, #24]
 8023baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023bae:	d121      	bne.n	8023bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023bb0:	68bb      	ldr	r3, [r7, #8]
 8023bb2:	2b03      	cmp	r3, #3
 8023bb4:	d837      	bhi.n	8023c26 <DMA_CheckFifoParam+0xda>
 8023bb6:	a201      	add	r2, pc, #4	; (adr r2, 8023bbc <DMA_CheckFifoParam+0x70>)
 8023bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023bbc:	08023bcd 	.word	0x08023bcd
 8023bc0:	08023bd3 	.word	0x08023bd3
 8023bc4:	08023bcd 	.word	0x08023bcd
 8023bc8:	08023be5 	.word	0x08023be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023bcc:	2301      	movs	r3, #1
 8023bce:	73fb      	strb	r3, [r7, #15]
      break;
 8023bd0:	e030      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023bd2:	687b      	ldr	r3, [r7, #4]
 8023bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023bda:	2b00      	cmp	r3, #0
 8023bdc:	d025      	beq.n	8023c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023bde:	2301      	movs	r3, #1
 8023be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023be2:	e022      	b.n	8023c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023bec:	d11f      	bne.n	8023c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023bee:	2301      	movs	r3, #1
 8023bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023bf2:	e01c      	b.n	8023c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023bf4:	68bb      	ldr	r3, [r7, #8]
 8023bf6:	2b02      	cmp	r3, #2
 8023bf8:	d903      	bls.n	8023c02 <DMA_CheckFifoParam+0xb6>
 8023bfa:	68bb      	ldr	r3, [r7, #8]
 8023bfc:	2b03      	cmp	r3, #3
 8023bfe:	d003      	beq.n	8023c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023c00:	e018      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023c02:	2301      	movs	r3, #1
 8023c04:	73fb      	strb	r3, [r7, #15]
      break;
 8023c06:	e015      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	d00e      	beq.n	8023c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023c14:	2301      	movs	r3, #1
 8023c16:	73fb      	strb	r3, [r7, #15]
      break;
 8023c18:	e00b      	b.n	8023c32 <DMA_CheckFifoParam+0xe6>
      break;
 8023c1a:	bf00      	nop
 8023c1c:	e00a      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;
 8023c1e:	bf00      	nop
 8023c20:	e008      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;
 8023c22:	bf00      	nop
 8023c24:	e006      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;
 8023c26:	bf00      	nop
 8023c28:	e004      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;
 8023c2a:	bf00      	nop
 8023c2c:	e002      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8023c2e:	bf00      	nop
 8023c30:	e000      	b.n	8023c34 <DMA_CheckFifoParam+0xe8>
      break;
 8023c32:	bf00      	nop
    }
  } 
  
  return status; 
 8023c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8023c36:	4618      	mov	r0, r3
 8023c38:	3714      	adds	r7, #20
 8023c3a:	46bd      	mov	sp, r7
 8023c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c40:	4770      	bx	lr
 8023c42:	bf00      	nop

08023c44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023c44:	b580      	push	{r7, lr}
 8023c46:	b082      	sub	sp, #8
 8023c48:	af00      	add	r7, sp, #0
 8023c4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	d101      	bne.n	8023c56 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023c52:	2301      	movs	r3, #1
 8023c54:	e03b      	b.n	8023cce <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023c56:	687b      	ldr	r3, [r7, #4]
 8023c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023c5c:	b2db      	uxtb	r3, r3
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d106      	bne.n	8023c70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	2200      	movs	r2, #0
 8023c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023c6a:	6878      	ldr	r0, [r7, #4]
 8023c6c:	f7fd fd94 	bl	8021798 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	2202      	movs	r2, #2
 8023c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	681b      	ldr	r3, [r3, #0]
 8023c7c:	681b      	ldr	r3, [r3, #0]
 8023c7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	685a      	ldr	r2, [r3, #4]
 8023c86:	687b      	ldr	r3, [r7, #4]
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	430a      	orrs	r2, r1
 8023c8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023c8e:	687b      	ldr	r3, [r7, #4]
 8023c90:	681b      	ldr	r3, [r3, #0]
 8023c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023c94:	f023 0107 	bic.w	r1, r3, #7
 8023c98:	687b      	ldr	r3, [r7, #4]
 8023c9a:	689a      	ldr	r2, [r3, #8]
 8023c9c:	687b      	ldr	r3, [r7, #4]
 8023c9e:	681b      	ldr	r3, [r3, #0]
 8023ca0:	430a      	orrs	r2, r1
 8023ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	681b      	ldr	r3, [r3, #0]
 8023ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023caa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023cae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023cb2:	687a      	ldr	r2, [r7, #4]
 8023cb4:	68d1      	ldr	r1, [r2, #12]
 8023cb6:	687a      	ldr	r2, [r7, #4]
 8023cb8:	6812      	ldr	r2, [r2, #0]
 8023cba:	430b      	orrs	r3, r1
 8023cbc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	2200      	movs	r2, #0
 8023cc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023cc4:	687b      	ldr	r3, [r7, #4]
 8023cc6:	2201      	movs	r2, #1
 8023cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023ccc:	2300      	movs	r3, #0
}
 8023cce:	4618      	mov	r0, r3
 8023cd0:	3708      	adds	r7, #8
 8023cd2:	46bd      	mov	sp, r7
 8023cd4:	bd80      	pop	{r7, pc}

08023cd6 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023cd6:	b580      	push	{r7, lr}
 8023cd8:	b086      	sub	sp, #24
 8023cda:	af02      	add	r7, sp, #8
 8023cdc:	60f8      	str	r0, [r7, #12]
 8023cde:	60b9      	str	r1, [r7, #8]
 8023ce0:	607a      	str	r2, [r7, #4]
 8023ce2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023ce4:	68fb      	ldr	r3, [r7, #12]
 8023ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023cea:	2b01      	cmp	r3, #1
 8023cec:	d101      	bne.n	8023cf2 <HAL_DMA2D_Start+0x1c>
 8023cee:	2302      	movs	r3, #2
 8023cf0:	e018      	b.n	8023d24 <HAL_DMA2D_Start+0x4e>
 8023cf2:	68fb      	ldr	r3, [r7, #12]
 8023cf4:	2201      	movs	r2, #1
 8023cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	2202      	movs	r2, #2
 8023cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023d02:	69bb      	ldr	r3, [r7, #24]
 8023d04:	9300      	str	r3, [sp, #0]
 8023d06:	683b      	ldr	r3, [r7, #0]
 8023d08:	687a      	ldr	r2, [r7, #4]
 8023d0a:	68b9      	ldr	r1, [r7, #8]
 8023d0c:	68f8      	ldr	r0, [r7, #12]
 8023d0e:	f000 fa99 	bl	8024244 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023d12:	68fb      	ldr	r3, [r7, #12]
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	681a      	ldr	r2, [r3, #0]
 8023d18:	68fb      	ldr	r3, [r7, #12]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f042 0201 	orr.w	r2, r2, #1
 8023d20:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023d22:	2300      	movs	r3, #0
}
 8023d24:	4618      	mov	r0, r3
 8023d26:	3710      	adds	r7, #16
 8023d28:	46bd      	mov	sp, r7
 8023d2a:	bd80      	pop	{r7, pc}

08023d2c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023d2c:	b580      	push	{r7, lr}
 8023d2e:	b086      	sub	sp, #24
 8023d30:	af00      	add	r7, sp, #0
 8023d32:	6078      	str	r0, [r7, #4]
 8023d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023d36:	2300      	movs	r3, #0
 8023d38:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023d3a:	687b      	ldr	r3, [r7, #4]
 8023d3c:	681b      	ldr	r3, [r3, #0]
 8023d3e:	681b      	ldr	r3, [r3, #0]
 8023d40:	f003 0301 	and.w	r3, r3, #1
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d056      	beq.n	8023df6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023d48:	f7ff fc90 	bl	802366c <HAL_GetTick>
 8023d4c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023d4e:	e04b      	b.n	8023de8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023d50:	687b      	ldr	r3, [r7, #4]
 8023d52:	681b      	ldr	r3, [r3, #0]
 8023d54:	685b      	ldr	r3, [r3, #4]
 8023d56:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023d58:	68fb      	ldr	r3, [r7, #12]
 8023d5a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d023      	beq.n	8023daa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023d62:	68fb      	ldr	r3, [r7, #12]
 8023d64:	f003 0320 	and.w	r3, r3, #32
 8023d68:	2b00      	cmp	r3, #0
 8023d6a:	d005      	beq.n	8023d78 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d70:	f043 0202 	orr.w	r2, r3, #2
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023d78:	68fb      	ldr	r3, [r7, #12]
 8023d7a:	f003 0301 	and.w	r3, r3, #1
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	d005      	beq.n	8023d8e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023d86:	f043 0201 	orr.w	r2, r3, #1
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023d8e:	687b      	ldr	r3, [r7, #4]
 8023d90:	681b      	ldr	r3, [r3, #0]
 8023d92:	2221      	movs	r2, #33	; 0x21
 8023d94:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	2204      	movs	r2, #4
 8023d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	2200      	movs	r2, #0
 8023da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023da6:	2301      	movs	r3, #1
 8023da8:	e0a5      	b.n	8023ef6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023daa:	683b      	ldr	r3, [r7, #0]
 8023dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023db0:	d01a      	beq.n	8023de8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023db2:	f7ff fc5b 	bl	802366c <HAL_GetTick>
 8023db6:	4602      	mov	r2, r0
 8023db8:	697b      	ldr	r3, [r7, #20]
 8023dba:	1ad3      	subs	r3, r2, r3
 8023dbc:	683a      	ldr	r2, [r7, #0]
 8023dbe:	429a      	cmp	r2, r3
 8023dc0:	d302      	bcc.n	8023dc8 <HAL_DMA2D_PollForTransfer+0x9c>
 8023dc2:	683b      	ldr	r3, [r7, #0]
 8023dc4:	2b00      	cmp	r3, #0
 8023dc6:	d10f      	bne.n	8023de8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023dcc:	f043 0220 	orr.w	r2, r3, #32
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	2203      	movs	r2, #3
 8023dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023ddc:	687b      	ldr	r3, [r7, #4]
 8023dde:	2200      	movs	r2, #0
 8023de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023de4:	2303      	movs	r3, #3
 8023de6:	e086      	b.n	8023ef6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023de8:	687b      	ldr	r3, [r7, #4]
 8023dea:	681b      	ldr	r3, [r3, #0]
 8023dec:	685b      	ldr	r3, [r3, #4]
 8023dee:	f003 0302 	and.w	r3, r3, #2
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	d0ac      	beq.n	8023d50 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	681b      	ldr	r3, [r3, #0]
 8023dfa:	69db      	ldr	r3, [r3, #28]
 8023dfc:	f003 0320 	and.w	r3, r3, #32
 8023e00:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023e02:	687b      	ldr	r3, [r7, #4]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e08:	f003 0320 	and.w	r3, r3, #32
 8023e0c:	693a      	ldr	r2, [r7, #16]
 8023e0e:	4313      	orrs	r3, r2
 8023e10:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023e12:	693b      	ldr	r3, [r7, #16]
 8023e14:	2b00      	cmp	r3, #0
 8023e16:	d061      	beq.n	8023edc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023e18:	f7ff fc28 	bl	802366c <HAL_GetTick>
 8023e1c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023e1e:	e056      	b.n	8023ece <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023e20:	687b      	ldr	r3, [r7, #4]
 8023e22:	681b      	ldr	r3, [r3, #0]
 8023e24:	685b      	ldr	r3, [r3, #4]
 8023e26:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023e28:	68fb      	ldr	r3, [r7, #12]
 8023e2a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023e2e:	2b00      	cmp	r3, #0
 8023e30:	d02e      	beq.n	8023e90 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023e32:	68fb      	ldr	r3, [r7, #12]
 8023e34:	f003 0308 	and.w	r3, r3, #8
 8023e38:	2b00      	cmp	r3, #0
 8023e3a:	d005      	beq.n	8023e48 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023e3c:	687b      	ldr	r3, [r7, #4]
 8023e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e40:	f043 0204 	orr.w	r2, r3, #4
 8023e44:	687b      	ldr	r3, [r7, #4]
 8023e46:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	f003 0320 	and.w	r3, r3, #32
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d005      	beq.n	8023e5e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e56:	f043 0202 	orr.w	r2, r3, #2
 8023e5a:	687b      	ldr	r3, [r7, #4]
 8023e5c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023e5e:	68fb      	ldr	r3, [r7, #12]
 8023e60:	f003 0301 	and.w	r3, r3, #1
 8023e64:	2b00      	cmp	r3, #0
 8023e66:	d005      	beq.n	8023e74 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e6c:	f043 0201 	orr.w	r2, r3, #1
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023e74:	687b      	ldr	r3, [r7, #4]
 8023e76:	681b      	ldr	r3, [r3, #0]
 8023e78:	2229      	movs	r2, #41	; 0x29
 8023e7a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	2204      	movs	r2, #4
 8023e80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	2200      	movs	r2, #0
 8023e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023e8c:	2301      	movs	r3, #1
 8023e8e:	e032      	b.n	8023ef6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023e90:	683b      	ldr	r3, [r7, #0]
 8023e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e96:	d01a      	beq.n	8023ece <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023e98:	f7ff fbe8 	bl	802366c <HAL_GetTick>
 8023e9c:	4602      	mov	r2, r0
 8023e9e:	697b      	ldr	r3, [r7, #20]
 8023ea0:	1ad3      	subs	r3, r2, r3
 8023ea2:	683a      	ldr	r2, [r7, #0]
 8023ea4:	429a      	cmp	r2, r3
 8023ea6:	d302      	bcc.n	8023eae <HAL_DMA2D_PollForTransfer+0x182>
 8023ea8:	683b      	ldr	r3, [r7, #0]
 8023eaa:	2b00      	cmp	r3, #0
 8023eac:	d10f      	bne.n	8023ece <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eb2:	f043 0220 	orr.w	r2, r3, #32
 8023eb6:	687b      	ldr	r3, [r7, #4]
 8023eb8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	2203      	movs	r2, #3
 8023ebe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	2200      	movs	r2, #0
 8023ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023eca:	2303      	movs	r3, #3
 8023ecc:	e013      	b.n	8023ef6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	681b      	ldr	r3, [r3, #0]
 8023ed2:	685b      	ldr	r3, [r3, #4]
 8023ed4:	f003 0310 	and.w	r3, r3, #16
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d0a1      	beq.n	8023e20 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023edc:	687b      	ldr	r3, [r7, #4]
 8023ede:	681b      	ldr	r3, [r3, #0]
 8023ee0:	2212      	movs	r2, #18
 8023ee2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023ee4:	687b      	ldr	r3, [r7, #4]
 8023ee6:	2201      	movs	r2, #1
 8023ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023eec:	687b      	ldr	r3, [r7, #4]
 8023eee:	2200      	movs	r2, #0
 8023ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023ef4:	2300      	movs	r3, #0
}
 8023ef6:	4618      	mov	r0, r3
 8023ef8:	3718      	adds	r7, #24
 8023efa:	46bd      	mov	sp, r7
 8023efc:	bd80      	pop	{r7, pc}

08023efe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023efe:	b580      	push	{r7, lr}
 8023f00:	b084      	sub	sp, #16
 8023f02:	af00      	add	r7, sp, #0
 8023f04:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023f06:	687b      	ldr	r3, [r7, #4]
 8023f08:	681b      	ldr	r3, [r3, #0]
 8023f0a:	685b      	ldr	r3, [r3, #4]
 8023f0c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023f0e:	687b      	ldr	r3, [r7, #4]
 8023f10:	681b      	ldr	r3, [r3, #0]
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023f16:	68fb      	ldr	r3, [r7, #12]
 8023f18:	f003 0301 	and.w	r3, r3, #1
 8023f1c:	2b00      	cmp	r3, #0
 8023f1e:	d026      	beq.n	8023f6e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023f20:	68bb      	ldr	r3, [r7, #8]
 8023f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d021      	beq.n	8023f6e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8023f2a:	687b      	ldr	r3, [r7, #4]
 8023f2c:	681b      	ldr	r3, [r3, #0]
 8023f2e:	681a      	ldr	r2, [r3, #0]
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	681b      	ldr	r3, [r3, #0]
 8023f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023f38:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f3e:	f043 0201 	orr.w	r2, r3, #1
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8023f46:	687b      	ldr	r3, [r7, #4]
 8023f48:	681b      	ldr	r3, [r3, #0]
 8023f4a:	2201      	movs	r2, #1
 8023f4c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	2204      	movs	r2, #4
 8023f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	2200      	movs	r2, #0
 8023f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023f5e:	687b      	ldr	r3, [r7, #4]
 8023f60:	695b      	ldr	r3, [r3, #20]
 8023f62:	2b00      	cmp	r3, #0
 8023f64:	d003      	beq.n	8023f6e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	695b      	ldr	r3, [r3, #20]
 8023f6a:	6878      	ldr	r0, [r7, #4]
 8023f6c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023f6e:	68fb      	ldr	r3, [r7, #12]
 8023f70:	f003 0320 	and.w	r3, r3, #32
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d026      	beq.n	8023fc6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8023f78:	68bb      	ldr	r3, [r7, #8]
 8023f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023f7e:	2b00      	cmp	r3, #0
 8023f80:	d021      	beq.n	8023fc6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8023f82:	687b      	ldr	r3, [r7, #4]
 8023f84:	681b      	ldr	r3, [r3, #0]
 8023f86:	681a      	ldr	r2, [r3, #0]
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	681b      	ldr	r3, [r3, #0]
 8023f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023f90:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8023f92:	687b      	ldr	r3, [r7, #4]
 8023f94:	681b      	ldr	r3, [r3, #0]
 8023f96:	2220      	movs	r2, #32
 8023f98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023f9a:	687b      	ldr	r3, [r7, #4]
 8023f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f9e:	f043 0202 	orr.w	r2, r3, #2
 8023fa2:	687b      	ldr	r3, [r7, #4]
 8023fa4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023fa6:	687b      	ldr	r3, [r7, #4]
 8023fa8:	2204      	movs	r2, #4
 8023faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023fae:	687b      	ldr	r3, [r7, #4]
 8023fb0:	2200      	movs	r2, #0
 8023fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	695b      	ldr	r3, [r3, #20]
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	d003      	beq.n	8023fc6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	695b      	ldr	r3, [r3, #20]
 8023fc2:	6878      	ldr	r0, [r7, #4]
 8023fc4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023fc6:	68fb      	ldr	r3, [r7, #12]
 8023fc8:	f003 0308 	and.w	r3, r3, #8
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d026      	beq.n	802401e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8023fd0:	68bb      	ldr	r3, [r7, #8]
 8023fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d021      	beq.n	802401e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8023fda:	687b      	ldr	r3, [r7, #4]
 8023fdc:	681b      	ldr	r3, [r3, #0]
 8023fde:	681a      	ldr	r2, [r3, #0]
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	681b      	ldr	r3, [r3, #0]
 8023fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023fe8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8023fea:	687b      	ldr	r3, [r7, #4]
 8023fec:	681b      	ldr	r3, [r3, #0]
 8023fee:	2208      	movs	r2, #8
 8023ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ff6:	f043 0204 	orr.w	r2, r3, #4
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023ffe:	687b      	ldr	r3, [r7, #4]
 8024000:	2204      	movs	r2, #4
 8024002:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024006:	687b      	ldr	r3, [r7, #4]
 8024008:	2200      	movs	r2, #0
 802400a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	695b      	ldr	r3, [r3, #20]
 8024012:	2b00      	cmp	r3, #0
 8024014:	d003      	beq.n	802401e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8024016:	687b      	ldr	r3, [r7, #4]
 8024018:	695b      	ldr	r3, [r3, #20]
 802401a:	6878      	ldr	r0, [r7, #4]
 802401c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 802401e:	68fb      	ldr	r3, [r7, #12]
 8024020:	f003 0304 	and.w	r3, r3, #4
 8024024:	2b00      	cmp	r3, #0
 8024026:	d013      	beq.n	8024050 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8024028:	68bb      	ldr	r3, [r7, #8]
 802402a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802402e:	2b00      	cmp	r3, #0
 8024030:	d00e      	beq.n	8024050 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	681a      	ldr	r2, [r3, #0]
 8024038:	687b      	ldr	r3, [r7, #4]
 802403a:	681b      	ldr	r3, [r3, #0]
 802403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8024040:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	681b      	ldr	r3, [r3, #0]
 8024046:	2204      	movs	r2, #4
 8024048:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 802404a:	6878      	ldr	r0, [r7, #4]
 802404c:	f000 f853 	bl	80240f6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8024050:	68fb      	ldr	r3, [r7, #12]
 8024052:	f003 0302 	and.w	r3, r3, #2
 8024056:	2b00      	cmp	r3, #0
 8024058:	d024      	beq.n	80240a4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 802405a:	68bb      	ldr	r3, [r7, #8]
 802405c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024060:	2b00      	cmp	r3, #0
 8024062:	d01f      	beq.n	80240a4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8024064:	687b      	ldr	r3, [r7, #4]
 8024066:	681b      	ldr	r3, [r3, #0]
 8024068:	681a      	ldr	r2, [r3, #0]
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8024072:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	2202      	movs	r2, #2
 802407a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 802407c:	687b      	ldr	r3, [r7, #4]
 802407e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024080:	687b      	ldr	r3, [r7, #4]
 8024082:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8024084:	687b      	ldr	r3, [r7, #4]
 8024086:	2201      	movs	r2, #1
 8024088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802408c:	687b      	ldr	r3, [r7, #4]
 802408e:	2200      	movs	r2, #0
 8024090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8024094:	687b      	ldr	r3, [r7, #4]
 8024096:	691b      	ldr	r3, [r3, #16]
 8024098:	2b00      	cmp	r3, #0
 802409a:	d003      	beq.n	80240a4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 802409c:	687b      	ldr	r3, [r7, #4]
 802409e:	691b      	ldr	r3, [r3, #16]
 80240a0:	6878      	ldr	r0, [r7, #4]
 80240a2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80240a4:	68fb      	ldr	r3, [r7, #12]
 80240a6:	f003 0310 	and.w	r3, r3, #16
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d01f      	beq.n	80240ee <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80240ae:	68bb      	ldr	r3, [r7, #8]
 80240b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80240b4:	2b00      	cmp	r3, #0
 80240b6:	d01a      	beq.n	80240ee <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	681b      	ldr	r3, [r3, #0]
 80240bc:	681a      	ldr	r2, [r3, #0]
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	681b      	ldr	r3, [r3, #0]
 80240c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80240c6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80240c8:	687b      	ldr	r3, [r7, #4]
 80240ca:	681b      	ldr	r3, [r3, #0]
 80240cc:	2210      	movs	r2, #16
 80240ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80240d0:	687b      	ldr	r3, [r7, #4]
 80240d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80240d4:	687b      	ldr	r3, [r7, #4]
 80240d6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80240d8:	687b      	ldr	r3, [r7, #4]
 80240da:	2201      	movs	r2, #1
 80240dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80240e0:	687b      	ldr	r3, [r7, #4]
 80240e2:	2200      	movs	r2, #0
 80240e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80240e8:	6878      	ldr	r0, [r7, #4]
 80240ea:	f000 f80e 	bl	802410a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80240ee:	bf00      	nop
 80240f0:	3710      	adds	r7, #16
 80240f2:	46bd      	mov	sp, r7
 80240f4:	bd80      	pop	{r7, pc}

080240f6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80240f6:	b480      	push	{r7}
 80240f8:	b083      	sub	sp, #12
 80240fa:	af00      	add	r7, sp, #0
 80240fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80240fe:	bf00      	nop
 8024100:	370c      	adds	r7, #12
 8024102:	46bd      	mov	sp, r7
 8024104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024108:	4770      	bx	lr

0802410a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802410a:	b480      	push	{r7}
 802410c:	b083      	sub	sp, #12
 802410e:	af00      	add	r7, sp, #0
 8024110:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8024112:	bf00      	nop
 8024114:	370c      	adds	r7, #12
 8024116:	46bd      	mov	sp, r7
 8024118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802411c:	4770      	bx	lr
	...

08024120 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8024120:	b480      	push	{r7}
 8024122:	b087      	sub	sp, #28
 8024124:	af00      	add	r7, sp, #0
 8024126:	6078      	str	r0, [r7, #4]
 8024128:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 802412a:	687b      	ldr	r3, [r7, #4]
 802412c:	685b      	ldr	r3, [r3, #4]
 802412e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8024138:	2b01      	cmp	r3, #1
 802413a:	d101      	bne.n	8024140 <HAL_DMA2D_ConfigLayer+0x20>
 802413c:	2302      	movs	r3, #2
 802413e:	e079      	b.n	8024234 <HAL_DMA2D_ConfigLayer+0x114>
 8024140:	687b      	ldr	r3, [r7, #4]
 8024142:	2201      	movs	r2, #1
 8024144:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	2202      	movs	r2, #2
 802414c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8024150:	683b      	ldr	r3, [r7, #0]
 8024152:	011b      	lsls	r3, r3, #4
 8024154:	3318      	adds	r3, #24
 8024156:	687a      	ldr	r2, [r7, #4]
 8024158:	4413      	add	r3, r2
 802415a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 802415c:	693b      	ldr	r3, [r7, #16]
 802415e:	685a      	ldr	r2, [r3, #4]
 8024160:	693b      	ldr	r3, [r7, #16]
 8024162:	689b      	ldr	r3, [r3, #8]
 8024164:	041b      	lsls	r3, r3, #16
 8024166:	4313      	orrs	r3, r2
 8024168:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 802416a:	4b35      	ldr	r3, [pc, #212]	; (8024240 <HAL_DMA2D_ConfigLayer+0x120>)
 802416c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 802416e:	693b      	ldr	r3, [r7, #16]
 8024170:	685b      	ldr	r3, [r3, #4]
 8024172:	2b0a      	cmp	r3, #10
 8024174:	d003      	beq.n	802417e <HAL_DMA2D_ConfigLayer+0x5e>
 8024176:	693b      	ldr	r3, [r7, #16]
 8024178:	685b      	ldr	r3, [r3, #4]
 802417a:	2b09      	cmp	r3, #9
 802417c:	d107      	bne.n	802418e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 802417e:	693b      	ldr	r3, [r7, #16]
 8024180:	68db      	ldr	r3, [r3, #12]
 8024182:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024186:	697a      	ldr	r2, [r7, #20]
 8024188:	4313      	orrs	r3, r2
 802418a:	617b      	str	r3, [r7, #20]
 802418c:	e005      	b.n	802419a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 802418e:	693b      	ldr	r3, [r7, #16]
 8024190:	68db      	ldr	r3, [r3, #12]
 8024192:	061b      	lsls	r3, r3, #24
 8024194:	697a      	ldr	r2, [r7, #20]
 8024196:	4313      	orrs	r3, r2
 8024198:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802419a:	683b      	ldr	r3, [r7, #0]
 802419c:	2b00      	cmp	r3, #0
 802419e:	d120      	bne.n	80241e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80241a0:	687b      	ldr	r3, [r7, #4]
 80241a2:	681b      	ldr	r3, [r3, #0]
 80241a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80241a6:	68fb      	ldr	r3, [r7, #12]
 80241a8:	43db      	mvns	r3, r3
 80241aa:	ea02 0103 	and.w	r1, r2, r3
 80241ae:	687b      	ldr	r3, [r7, #4]
 80241b0:	681b      	ldr	r3, [r3, #0]
 80241b2:	697a      	ldr	r2, [r7, #20]
 80241b4:	430a      	orrs	r2, r1
 80241b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	693a      	ldr	r2, [r7, #16]
 80241be:	6812      	ldr	r2, [r2, #0]
 80241c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80241c2:	693b      	ldr	r3, [r7, #16]
 80241c4:	685b      	ldr	r3, [r3, #4]
 80241c6:	2b0a      	cmp	r3, #10
 80241c8:	d003      	beq.n	80241d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80241ca:	693b      	ldr	r3, [r7, #16]
 80241cc:	685b      	ldr	r3, [r3, #4]
 80241ce:	2b09      	cmp	r3, #9
 80241d0:	d127      	bne.n	8024222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80241d2:	693b      	ldr	r3, [r7, #16]
 80241d4:	68da      	ldr	r2, [r3, #12]
 80241d6:	687b      	ldr	r3, [r7, #4]
 80241d8:	681b      	ldr	r3, [r3, #0]
 80241da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80241de:	629a      	str	r2, [r3, #40]	; 0x28
 80241e0:	e01f      	b.n	8024222 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	69da      	ldr	r2, [r3, #28]
 80241e8:	68fb      	ldr	r3, [r7, #12]
 80241ea:	43db      	mvns	r3, r3
 80241ec:	ea02 0103 	and.w	r1, r2, r3
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	697a      	ldr	r2, [r7, #20]
 80241f6:	430a      	orrs	r2, r1
 80241f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	681b      	ldr	r3, [r3, #0]
 80241fe:	693a      	ldr	r2, [r7, #16]
 8024200:	6812      	ldr	r2, [r2, #0]
 8024202:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024204:	693b      	ldr	r3, [r7, #16]
 8024206:	685b      	ldr	r3, [r3, #4]
 8024208:	2b0a      	cmp	r3, #10
 802420a:	d003      	beq.n	8024214 <HAL_DMA2D_ConfigLayer+0xf4>
 802420c:	693b      	ldr	r3, [r7, #16]
 802420e:	685b      	ldr	r3, [r3, #4]
 8024210:	2b09      	cmp	r3, #9
 8024212:	d106      	bne.n	8024222 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8024214:	693b      	ldr	r3, [r7, #16]
 8024216:	68da      	ldr	r2, [r3, #12]
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8024220:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	2201      	movs	r2, #1
 8024226:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 802422a:	687b      	ldr	r3, [r7, #4]
 802422c:	2200      	movs	r2, #0
 802422e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024232:	2300      	movs	r3, #0
}
 8024234:	4618      	mov	r0, r3
 8024236:	371c      	adds	r7, #28
 8024238:	46bd      	mov	sp, r7
 802423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802423e:	4770      	bx	lr
 8024240:	ff03000f 	.word	0xff03000f

08024244 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8024244:	b480      	push	{r7}
 8024246:	b08b      	sub	sp, #44	; 0x2c
 8024248:	af00      	add	r7, sp, #0
 802424a:	60f8      	str	r0, [r7, #12]
 802424c:	60b9      	str	r1, [r7, #8]
 802424e:	607a      	str	r2, [r7, #4]
 8024250:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8024252:	68fb      	ldr	r3, [r7, #12]
 8024254:	681b      	ldr	r3, [r3, #0]
 8024256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024258:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 802425c:	683b      	ldr	r3, [r7, #0]
 802425e:	041a      	lsls	r2, r3, #16
 8024260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024262:	431a      	orrs	r2, r3
 8024264:	68fb      	ldr	r3, [r7, #12]
 8024266:	681b      	ldr	r3, [r3, #0]
 8024268:	430a      	orrs	r2, r1
 802426a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 802426c:	68fb      	ldr	r3, [r7, #12]
 802426e:	681b      	ldr	r3, [r3, #0]
 8024270:	687a      	ldr	r2, [r7, #4]
 8024272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8024274:	68fb      	ldr	r3, [r7, #12]
 8024276:	685b      	ldr	r3, [r3, #4]
 8024278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 802427c:	d174      	bne.n	8024368 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 802427e:	68bb      	ldr	r3, [r7, #8]
 8024280:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024284:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8024286:	68bb      	ldr	r3, [r7, #8]
 8024288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802428c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 802428e:	68bb      	ldr	r3, [r7, #8]
 8024290:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024294:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8024296:	68bb      	ldr	r3, [r7, #8]
 8024298:	b2db      	uxtb	r3, r3
 802429a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 802429c:	68fb      	ldr	r3, [r7, #12]
 802429e:	689b      	ldr	r3, [r3, #8]
 80242a0:	2b00      	cmp	r3, #0
 80242a2:	d108      	bne.n	80242b6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80242a4:	69ba      	ldr	r2, [r7, #24]
 80242a6:	69fb      	ldr	r3, [r7, #28]
 80242a8:	431a      	orrs	r2, r3
 80242aa:	6a3b      	ldr	r3, [r7, #32]
 80242ac:	4313      	orrs	r3, r2
 80242ae:	697a      	ldr	r2, [r7, #20]
 80242b0:	4313      	orrs	r3, r2
 80242b2:	627b      	str	r3, [r7, #36]	; 0x24
 80242b4:	e053      	b.n	802435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	689b      	ldr	r3, [r3, #8]
 80242ba:	2b01      	cmp	r3, #1
 80242bc:	d106      	bne.n	80242cc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80242be:	69ba      	ldr	r2, [r7, #24]
 80242c0:	69fb      	ldr	r3, [r7, #28]
 80242c2:	4313      	orrs	r3, r2
 80242c4:	697a      	ldr	r2, [r7, #20]
 80242c6:	4313      	orrs	r3, r2
 80242c8:	627b      	str	r3, [r7, #36]	; 0x24
 80242ca:	e048      	b.n	802435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80242cc:	68fb      	ldr	r3, [r7, #12]
 80242ce:	689b      	ldr	r3, [r3, #8]
 80242d0:	2b02      	cmp	r3, #2
 80242d2:	d111      	bne.n	80242f8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80242d4:	69fb      	ldr	r3, [r7, #28]
 80242d6:	0cdb      	lsrs	r3, r3, #19
 80242d8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80242da:	69bb      	ldr	r3, [r7, #24]
 80242dc:	0a9b      	lsrs	r3, r3, #10
 80242de:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80242e0:	697b      	ldr	r3, [r7, #20]
 80242e2:	08db      	lsrs	r3, r3, #3
 80242e4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80242e6:	69bb      	ldr	r3, [r7, #24]
 80242e8:	015a      	lsls	r2, r3, #5
 80242ea:	69fb      	ldr	r3, [r7, #28]
 80242ec:	02db      	lsls	r3, r3, #11
 80242ee:	4313      	orrs	r3, r2
 80242f0:	697a      	ldr	r2, [r7, #20]
 80242f2:	4313      	orrs	r3, r2
 80242f4:	627b      	str	r3, [r7, #36]	; 0x24
 80242f6:	e032      	b.n	802435e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80242f8:	68fb      	ldr	r3, [r7, #12]
 80242fa:	689b      	ldr	r3, [r3, #8]
 80242fc:	2b03      	cmp	r3, #3
 80242fe:	d117      	bne.n	8024330 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8024300:	6a3b      	ldr	r3, [r7, #32]
 8024302:	0fdb      	lsrs	r3, r3, #31
 8024304:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8024306:	69fb      	ldr	r3, [r7, #28]
 8024308:	0cdb      	lsrs	r3, r3, #19
 802430a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 802430c:	69bb      	ldr	r3, [r7, #24]
 802430e:	0adb      	lsrs	r3, r3, #11
 8024310:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024312:	697b      	ldr	r3, [r7, #20]
 8024314:	08db      	lsrs	r3, r3, #3
 8024316:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8024318:	69bb      	ldr	r3, [r7, #24]
 802431a:	015a      	lsls	r2, r3, #5
 802431c:	69fb      	ldr	r3, [r7, #28]
 802431e:	029b      	lsls	r3, r3, #10
 8024320:	431a      	orrs	r2, r3
 8024322:	6a3b      	ldr	r3, [r7, #32]
 8024324:	03db      	lsls	r3, r3, #15
 8024326:	4313      	orrs	r3, r2
 8024328:	697a      	ldr	r2, [r7, #20]
 802432a:	4313      	orrs	r3, r2
 802432c:	627b      	str	r3, [r7, #36]	; 0x24
 802432e:	e016      	b.n	802435e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8024330:	6a3b      	ldr	r3, [r7, #32]
 8024332:	0f1b      	lsrs	r3, r3, #28
 8024334:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8024336:	69fb      	ldr	r3, [r7, #28]
 8024338:	0d1b      	lsrs	r3, r3, #20
 802433a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 802433c:	69bb      	ldr	r3, [r7, #24]
 802433e:	0b1b      	lsrs	r3, r3, #12
 8024340:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8024342:	697b      	ldr	r3, [r7, #20]
 8024344:	091b      	lsrs	r3, r3, #4
 8024346:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8024348:	69bb      	ldr	r3, [r7, #24]
 802434a:	011a      	lsls	r2, r3, #4
 802434c:	69fb      	ldr	r3, [r7, #28]
 802434e:	021b      	lsls	r3, r3, #8
 8024350:	431a      	orrs	r2, r3
 8024352:	6a3b      	ldr	r3, [r7, #32]
 8024354:	031b      	lsls	r3, r3, #12
 8024356:	4313      	orrs	r3, r2
 8024358:	697a      	ldr	r2, [r7, #20]
 802435a:	4313      	orrs	r3, r2
 802435c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 802435e:	68fb      	ldr	r3, [r7, #12]
 8024360:	681b      	ldr	r3, [r3, #0]
 8024362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024364:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8024366:	e003      	b.n	8024370 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8024368:	68fb      	ldr	r3, [r7, #12]
 802436a:	681b      	ldr	r3, [r3, #0]
 802436c:	68ba      	ldr	r2, [r7, #8]
 802436e:	60da      	str	r2, [r3, #12]
}
 8024370:	bf00      	nop
 8024372:	372c      	adds	r7, #44	; 0x2c
 8024374:	46bd      	mov	sp, r7
 8024376:	f85d 7b04 	ldr.w	r7, [sp], #4
 802437a:	4770      	bx	lr

0802437c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802437c:	b580      	push	{r7, lr}
 802437e:	b086      	sub	sp, #24
 8024380:	af00      	add	r7, sp, #0
 8024382:	60f8      	str	r0, [r7, #12]
 8024384:	60b9      	str	r1, [r7, #8]
 8024386:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802438a:	2301      	movs	r3, #1
 802438c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802438e:	4b23      	ldr	r3, [pc, #140]	; (802441c <HAL_FLASH_Program+0xa0>)
 8024390:	7e1b      	ldrb	r3, [r3, #24]
 8024392:	2b01      	cmp	r3, #1
 8024394:	d101      	bne.n	802439a <HAL_FLASH_Program+0x1e>
 8024396:	2302      	movs	r3, #2
 8024398:	e03b      	b.n	8024412 <HAL_FLASH_Program+0x96>
 802439a:	4b20      	ldr	r3, [pc, #128]	; (802441c <HAL_FLASH_Program+0xa0>)
 802439c:	2201      	movs	r2, #1
 802439e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80243a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80243a4:	f000 f870 	bl	8024488 <FLASH_WaitForLastOperation>
 80243a8:	4603      	mov	r3, r0
 80243aa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80243ac:	7dfb      	ldrb	r3, [r7, #23]
 80243ae:	2b00      	cmp	r3, #0
 80243b0:	d12b      	bne.n	802440a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80243b2:	68fb      	ldr	r3, [r7, #12]
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	d105      	bne.n	80243c4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80243b8:	783b      	ldrb	r3, [r7, #0]
 80243ba:	4619      	mov	r1, r3
 80243bc:	68b8      	ldr	r0, [r7, #8]
 80243be:	f000 f91b 	bl	80245f8 <FLASH_Program_Byte>
 80243c2:	e016      	b.n	80243f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80243c4:	68fb      	ldr	r3, [r7, #12]
 80243c6:	2b01      	cmp	r3, #1
 80243c8:	d105      	bne.n	80243d6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80243ca:	883b      	ldrh	r3, [r7, #0]
 80243cc:	4619      	mov	r1, r3
 80243ce:	68b8      	ldr	r0, [r7, #8]
 80243d0:	f000 f8ee 	bl	80245b0 <FLASH_Program_HalfWord>
 80243d4:	e00d      	b.n	80243f2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80243d6:	68fb      	ldr	r3, [r7, #12]
 80243d8:	2b02      	cmp	r3, #2
 80243da:	d105      	bne.n	80243e8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80243dc:	683b      	ldr	r3, [r7, #0]
 80243de:	4619      	mov	r1, r3
 80243e0:	68b8      	ldr	r0, [r7, #8]
 80243e2:	f000 f8c3 	bl	802456c <FLASH_Program_Word>
 80243e6:	e004      	b.n	80243f2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80243e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80243ec:	68b8      	ldr	r0, [r7, #8]
 80243ee:	f000 f88b 	bl	8024508 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80243f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80243f6:	f000 f847 	bl	8024488 <FLASH_WaitForLastOperation>
 80243fa:	4603      	mov	r3, r0
 80243fc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80243fe:	4b08      	ldr	r3, [pc, #32]	; (8024420 <HAL_FLASH_Program+0xa4>)
 8024400:	691b      	ldr	r3, [r3, #16]
 8024402:	4a07      	ldr	r2, [pc, #28]	; (8024420 <HAL_FLASH_Program+0xa4>)
 8024404:	f023 0301 	bic.w	r3, r3, #1
 8024408:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802440a:	4b04      	ldr	r3, [pc, #16]	; (802441c <HAL_FLASH_Program+0xa0>)
 802440c:	2200      	movs	r2, #0
 802440e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8024410:	7dfb      	ldrb	r3, [r7, #23]
}
 8024412:	4618      	mov	r0, r3
 8024414:	3718      	adds	r7, #24
 8024416:	46bd      	mov	sp, r7
 8024418:	bd80      	pop	{r7, pc}
 802441a:	bf00      	nop
 802441c:	20000ac8 	.word	0x20000ac8
 8024420:	40023c00 	.word	0x40023c00

08024424 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8024424:	b480      	push	{r7}
 8024426:	b083      	sub	sp, #12
 8024428:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802442a:	2300      	movs	r3, #0
 802442c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802442e:	4b0b      	ldr	r3, [pc, #44]	; (802445c <HAL_FLASH_Unlock+0x38>)
 8024430:	691b      	ldr	r3, [r3, #16]
 8024432:	2b00      	cmp	r3, #0
 8024434:	da0b      	bge.n	802444e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8024436:	4b09      	ldr	r3, [pc, #36]	; (802445c <HAL_FLASH_Unlock+0x38>)
 8024438:	4a09      	ldr	r2, [pc, #36]	; (8024460 <HAL_FLASH_Unlock+0x3c>)
 802443a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802443c:	4b07      	ldr	r3, [pc, #28]	; (802445c <HAL_FLASH_Unlock+0x38>)
 802443e:	4a09      	ldr	r2, [pc, #36]	; (8024464 <HAL_FLASH_Unlock+0x40>)
 8024440:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8024442:	4b06      	ldr	r3, [pc, #24]	; (802445c <HAL_FLASH_Unlock+0x38>)
 8024444:	691b      	ldr	r3, [r3, #16]
 8024446:	2b00      	cmp	r3, #0
 8024448:	da01      	bge.n	802444e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 802444a:	2301      	movs	r3, #1
 802444c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 802444e:	79fb      	ldrb	r3, [r7, #7]
}
 8024450:	4618      	mov	r0, r3
 8024452:	370c      	adds	r7, #12
 8024454:	46bd      	mov	sp, r7
 8024456:	f85d 7b04 	ldr.w	r7, [sp], #4
 802445a:	4770      	bx	lr
 802445c:	40023c00 	.word	0x40023c00
 8024460:	45670123 	.word	0x45670123
 8024464:	cdef89ab 	.word	0xcdef89ab

08024468 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8024468:	b480      	push	{r7}
 802446a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802446c:	4b05      	ldr	r3, [pc, #20]	; (8024484 <HAL_FLASH_Lock+0x1c>)
 802446e:	691b      	ldr	r3, [r3, #16]
 8024470:	4a04      	ldr	r2, [pc, #16]	; (8024484 <HAL_FLASH_Lock+0x1c>)
 8024472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024476:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8024478:	2300      	movs	r3, #0
}
 802447a:	4618      	mov	r0, r3
 802447c:	46bd      	mov	sp, r7
 802447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024482:	4770      	bx	lr
 8024484:	40023c00 	.word	0x40023c00

08024488 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8024488:	b580      	push	{r7, lr}
 802448a:	b084      	sub	sp, #16
 802448c:	af00      	add	r7, sp, #0
 802448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8024490:	2300      	movs	r3, #0
 8024492:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8024494:	4b1a      	ldr	r3, [pc, #104]	; (8024500 <FLASH_WaitForLastOperation+0x78>)
 8024496:	2200      	movs	r2, #0
 8024498:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802449a:	f7ff f8e7 	bl	802366c <HAL_GetTick>
 802449e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80244a0:	e010      	b.n	80244c4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80244a2:	687b      	ldr	r3, [r7, #4]
 80244a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80244a8:	d00c      	beq.n	80244c4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	2b00      	cmp	r3, #0
 80244ae:	d007      	beq.n	80244c0 <FLASH_WaitForLastOperation+0x38>
 80244b0:	f7ff f8dc 	bl	802366c <HAL_GetTick>
 80244b4:	4602      	mov	r2, r0
 80244b6:	68fb      	ldr	r3, [r7, #12]
 80244b8:	1ad3      	subs	r3, r2, r3
 80244ba:	687a      	ldr	r2, [r7, #4]
 80244bc:	429a      	cmp	r2, r3
 80244be:	d201      	bcs.n	80244c4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80244c0:	2303      	movs	r3, #3
 80244c2:	e019      	b.n	80244f8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80244c4:	4b0f      	ldr	r3, [pc, #60]	; (8024504 <FLASH_WaitForLastOperation+0x7c>)
 80244c6:	68db      	ldr	r3, [r3, #12]
 80244c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80244cc:	2b00      	cmp	r3, #0
 80244ce:	d1e8      	bne.n	80244a2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80244d0:	4b0c      	ldr	r3, [pc, #48]	; (8024504 <FLASH_WaitForLastOperation+0x7c>)
 80244d2:	68db      	ldr	r3, [r3, #12]
 80244d4:	f003 0301 	and.w	r3, r3, #1
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d002      	beq.n	80244e2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80244dc:	4b09      	ldr	r3, [pc, #36]	; (8024504 <FLASH_WaitForLastOperation+0x7c>)
 80244de:	2201      	movs	r2, #1
 80244e0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80244e2:	4b08      	ldr	r3, [pc, #32]	; (8024504 <FLASH_WaitForLastOperation+0x7c>)
 80244e4:	68db      	ldr	r3, [r3, #12]
 80244e6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	d003      	beq.n	80244f6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80244ee:	f000 f8a5 	bl	802463c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80244f2:	2301      	movs	r3, #1
 80244f4:	e000      	b.n	80244f8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80244f6:	2300      	movs	r3, #0
  
}  
 80244f8:	4618      	mov	r0, r3
 80244fa:	3710      	adds	r7, #16
 80244fc:	46bd      	mov	sp, r7
 80244fe:	bd80      	pop	{r7, pc}
 8024500:	20000ac8 	.word	0x20000ac8
 8024504:	40023c00 	.word	0x40023c00

08024508 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8024508:	b480      	push	{r7}
 802450a:	b085      	sub	sp, #20
 802450c:	af00      	add	r7, sp, #0
 802450e:	60f8      	str	r0, [r7, #12]
 8024510:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024514:	4b14      	ldr	r3, [pc, #80]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 8024516:	691b      	ldr	r3, [r3, #16]
 8024518:	4a13      	ldr	r2, [pc, #76]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 802451a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802451e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8024520:	4b11      	ldr	r3, [pc, #68]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 8024522:	691b      	ldr	r3, [r3, #16]
 8024524:	4a10      	ldr	r2, [pc, #64]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 8024526:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802452a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802452c:	4b0e      	ldr	r3, [pc, #56]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 802452e:	691b      	ldr	r3, [r3, #16]
 8024530:	4a0d      	ldr	r2, [pc, #52]	; (8024568 <FLASH_Program_DoubleWord+0x60>)
 8024532:	f043 0301 	orr.w	r3, r3, #1
 8024536:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8024538:	68fb      	ldr	r3, [r7, #12]
 802453a:	683a      	ldr	r2, [r7, #0]
 802453c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 802453e:	f3bf 8f6f 	isb	sy
}
 8024542:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8024544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8024548:	f04f 0200 	mov.w	r2, #0
 802454c:	f04f 0300 	mov.w	r3, #0
 8024550:	000a      	movs	r2, r1
 8024552:	2300      	movs	r3, #0
 8024554:	68f9      	ldr	r1, [r7, #12]
 8024556:	3104      	adds	r1, #4
 8024558:	4613      	mov	r3, r2
 802455a:	600b      	str	r3, [r1, #0]
}
 802455c:	bf00      	nop
 802455e:	3714      	adds	r7, #20
 8024560:	46bd      	mov	sp, r7
 8024562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024566:	4770      	bx	lr
 8024568:	40023c00 	.word	0x40023c00

0802456c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802456c:	b480      	push	{r7}
 802456e:	b083      	sub	sp, #12
 8024570:	af00      	add	r7, sp, #0
 8024572:	6078      	str	r0, [r7, #4]
 8024574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024576:	4b0d      	ldr	r3, [pc, #52]	; (80245ac <FLASH_Program_Word+0x40>)
 8024578:	691b      	ldr	r3, [r3, #16]
 802457a:	4a0c      	ldr	r2, [pc, #48]	; (80245ac <FLASH_Program_Word+0x40>)
 802457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8024582:	4b0a      	ldr	r3, [pc, #40]	; (80245ac <FLASH_Program_Word+0x40>)
 8024584:	691b      	ldr	r3, [r3, #16]
 8024586:	4a09      	ldr	r2, [pc, #36]	; (80245ac <FLASH_Program_Word+0x40>)
 8024588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802458c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802458e:	4b07      	ldr	r3, [pc, #28]	; (80245ac <FLASH_Program_Word+0x40>)
 8024590:	691b      	ldr	r3, [r3, #16]
 8024592:	4a06      	ldr	r2, [pc, #24]	; (80245ac <FLASH_Program_Word+0x40>)
 8024594:	f043 0301 	orr.w	r3, r3, #1
 8024598:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802459a:	687b      	ldr	r3, [r7, #4]
 802459c:	683a      	ldr	r2, [r7, #0]
 802459e:	601a      	str	r2, [r3, #0]
}
 80245a0:	bf00      	nop
 80245a2:	370c      	adds	r7, #12
 80245a4:	46bd      	mov	sp, r7
 80245a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245aa:	4770      	bx	lr
 80245ac:	40023c00 	.word	0x40023c00

080245b0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80245b0:	b480      	push	{r7}
 80245b2:	b083      	sub	sp, #12
 80245b4:	af00      	add	r7, sp, #0
 80245b6:	6078      	str	r0, [r7, #4]
 80245b8:	460b      	mov	r3, r1
 80245ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80245bc:	4b0d      	ldr	r3, [pc, #52]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245be:	691b      	ldr	r3, [r3, #16]
 80245c0:	4a0c      	ldr	r2, [pc, #48]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80245c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80245c8:	4b0a      	ldr	r3, [pc, #40]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245ca:	691b      	ldr	r3, [r3, #16]
 80245cc:	4a09      	ldr	r2, [pc, #36]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80245d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80245d4:	4b07      	ldr	r3, [pc, #28]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245d6:	691b      	ldr	r3, [r3, #16]
 80245d8:	4a06      	ldr	r2, [pc, #24]	; (80245f4 <FLASH_Program_HalfWord+0x44>)
 80245da:	f043 0301 	orr.w	r3, r3, #1
 80245de:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	887a      	ldrh	r2, [r7, #2]
 80245e4:	801a      	strh	r2, [r3, #0]
}
 80245e6:	bf00      	nop
 80245e8:	370c      	adds	r7, #12
 80245ea:	46bd      	mov	sp, r7
 80245ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245f0:	4770      	bx	lr
 80245f2:	bf00      	nop
 80245f4:	40023c00 	.word	0x40023c00

080245f8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80245f8:	b480      	push	{r7}
 80245fa:	b083      	sub	sp, #12
 80245fc:	af00      	add	r7, sp, #0
 80245fe:	6078      	str	r0, [r7, #4]
 8024600:	460b      	mov	r3, r1
 8024602:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024604:	4b0c      	ldr	r3, [pc, #48]	; (8024638 <FLASH_Program_Byte+0x40>)
 8024606:	691b      	ldr	r3, [r3, #16]
 8024608:	4a0b      	ldr	r2, [pc, #44]	; (8024638 <FLASH_Program_Byte+0x40>)
 802460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802460e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8024610:	4b09      	ldr	r3, [pc, #36]	; (8024638 <FLASH_Program_Byte+0x40>)
 8024612:	4a09      	ldr	r2, [pc, #36]	; (8024638 <FLASH_Program_Byte+0x40>)
 8024614:	691b      	ldr	r3, [r3, #16]
 8024616:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024618:	4b07      	ldr	r3, [pc, #28]	; (8024638 <FLASH_Program_Byte+0x40>)
 802461a:	691b      	ldr	r3, [r3, #16]
 802461c:	4a06      	ldr	r2, [pc, #24]	; (8024638 <FLASH_Program_Byte+0x40>)
 802461e:	f043 0301 	orr.w	r3, r3, #1
 8024622:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	78fa      	ldrb	r2, [r7, #3]
 8024628:	701a      	strb	r2, [r3, #0]
}
 802462a:	bf00      	nop
 802462c:	370c      	adds	r7, #12
 802462e:	46bd      	mov	sp, r7
 8024630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024634:	4770      	bx	lr
 8024636:	bf00      	nop
 8024638:	40023c00 	.word	0x40023c00

0802463c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802463c:	b480      	push	{r7}
 802463e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8024640:	4b2f      	ldr	r3, [pc, #188]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 8024642:	68db      	ldr	r3, [r3, #12]
 8024644:	f003 0310 	and.w	r3, r3, #16
 8024648:	2b00      	cmp	r3, #0
 802464a:	d008      	beq.n	802465e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 802464c:	4b2d      	ldr	r3, [pc, #180]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 802464e:	69db      	ldr	r3, [r3, #28]
 8024650:	f043 0310 	orr.w	r3, r3, #16
 8024654:	4a2b      	ldr	r2, [pc, #172]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 8024656:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8024658:	4b29      	ldr	r3, [pc, #164]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 802465a:	2210      	movs	r2, #16
 802465c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 802465e:	4b28      	ldr	r3, [pc, #160]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 8024660:	68db      	ldr	r3, [r3, #12]
 8024662:	f003 0320 	and.w	r3, r3, #32
 8024666:	2b00      	cmp	r3, #0
 8024668:	d008      	beq.n	802467c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802466a:	4b26      	ldr	r3, [pc, #152]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 802466c:	69db      	ldr	r3, [r3, #28]
 802466e:	f043 0308 	orr.w	r3, r3, #8
 8024672:	4a24      	ldr	r2, [pc, #144]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 8024674:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8024676:	4b22      	ldr	r3, [pc, #136]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 8024678:	2220      	movs	r2, #32
 802467a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802467c:	4b20      	ldr	r3, [pc, #128]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 802467e:	68db      	ldr	r3, [r3, #12]
 8024680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024684:	2b00      	cmp	r3, #0
 8024686:	d008      	beq.n	802469a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8024688:	4b1e      	ldr	r3, [pc, #120]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 802468a:	69db      	ldr	r3, [r3, #28]
 802468c:	f043 0304 	orr.w	r3, r3, #4
 8024690:	4a1c      	ldr	r2, [pc, #112]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 8024692:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8024694:	4b1a      	ldr	r3, [pc, #104]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 8024696:	2240      	movs	r2, #64	; 0x40
 8024698:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802469a:	4b19      	ldr	r3, [pc, #100]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 802469c:	68db      	ldr	r3, [r3, #12]
 802469e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80246a2:	2b00      	cmp	r3, #0
 80246a4:	d008      	beq.n	80246b8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80246a6:	4b17      	ldr	r3, [pc, #92]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246a8:	69db      	ldr	r3, [r3, #28]
 80246aa:	f043 0302 	orr.w	r3, r3, #2
 80246ae:	4a15      	ldr	r2, [pc, #84]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246b0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80246b2:	4b13      	ldr	r3, [pc, #76]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 80246b4:	2280      	movs	r2, #128	; 0x80
 80246b6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80246b8:	4b11      	ldr	r3, [pc, #68]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 80246ba:	68db      	ldr	r3, [r3, #12]
 80246bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80246c0:	2b00      	cmp	r3, #0
 80246c2:	d009      	beq.n	80246d8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80246c4:	4b0f      	ldr	r3, [pc, #60]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246c6:	69db      	ldr	r3, [r3, #28]
 80246c8:	f043 0301 	orr.w	r3, r3, #1
 80246cc:	4a0d      	ldr	r2, [pc, #52]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246ce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80246d0:	4b0b      	ldr	r3, [pc, #44]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 80246d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80246d6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80246d8:	4b09      	ldr	r3, [pc, #36]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 80246da:	68db      	ldr	r3, [r3, #12]
 80246dc:	f003 0302 	and.w	r3, r3, #2
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	d008      	beq.n	80246f6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80246e4:	4b07      	ldr	r3, [pc, #28]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246e6:	69db      	ldr	r3, [r3, #28]
 80246e8:	f043 0320 	orr.w	r3, r3, #32
 80246ec:	4a05      	ldr	r2, [pc, #20]	; (8024704 <FLASH_SetErrorCode+0xc8>)
 80246ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80246f0:	4b03      	ldr	r3, [pc, #12]	; (8024700 <FLASH_SetErrorCode+0xc4>)
 80246f2:	2202      	movs	r2, #2
 80246f4:	60da      	str	r2, [r3, #12]
  }
}
 80246f6:	bf00      	nop
 80246f8:	46bd      	mov	sp, r7
 80246fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246fe:	4770      	bx	lr
 8024700:	40023c00 	.word	0x40023c00
 8024704:	20000ac8 	.word	0x20000ac8

08024708 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8024708:	b580      	push	{r7, lr}
 802470a:	b084      	sub	sp, #16
 802470c:	af00      	add	r7, sp, #0
 802470e:	6078      	str	r0, [r7, #4]
 8024710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024712:	2301      	movs	r3, #1
 8024714:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8024716:	2300      	movs	r3, #0
 8024718:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802471a:	4b32      	ldr	r3, [pc, #200]	; (80247e4 <HAL_FLASHEx_Erase+0xdc>)
 802471c:	7e1b      	ldrb	r3, [r3, #24]
 802471e:	2b01      	cmp	r3, #1
 8024720:	d101      	bne.n	8024726 <HAL_FLASHEx_Erase+0x1e>
 8024722:	2302      	movs	r3, #2
 8024724:	e05a      	b.n	80247dc <HAL_FLASHEx_Erase+0xd4>
 8024726:	4b2f      	ldr	r3, [pc, #188]	; (80247e4 <HAL_FLASHEx_Erase+0xdc>)
 8024728:	2201      	movs	r2, #1
 802472a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802472c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024730:	f7ff feaa 	bl	8024488 <FLASH_WaitForLastOperation>
 8024734:	4603      	mov	r3, r0
 8024736:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8024738:	7bfb      	ldrb	r3, [r7, #15]
 802473a:	2b00      	cmp	r3, #0
 802473c:	d14a      	bne.n	80247d4 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802473e:	683b      	ldr	r3, [r7, #0]
 8024740:	f04f 32ff 	mov.w	r2, #4294967295
 8024744:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	681b      	ldr	r3, [r3, #0]
 802474a:	2b01      	cmp	r3, #1
 802474c:	d117      	bne.n	802477e <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802474e:	687b      	ldr	r3, [r7, #4]
 8024750:	691b      	ldr	r3, [r3, #16]
 8024752:	b2da      	uxtb	r2, r3
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	685b      	ldr	r3, [r3, #4]
 8024758:	4619      	mov	r1, r3
 802475a:	4610      	mov	r0, r2
 802475c:	f000 f846 	bl	80247ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024764:	f7ff fe90 	bl	8024488 <FLASH_WaitForLastOperation>
 8024768:	4603      	mov	r3, r0
 802476a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802476c:	4b1e      	ldr	r3, [pc, #120]	; (80247e8 <HAL_FLASHEx_Erase+0xe0>)
 802476e:	691b      	ldr	r3, [r3, #16]
 8024770:	4a1d      	ldr	r2, [pc, #116]	; (80247e8 <HAL_FLASHEx_Erase+0xe0>)
 8024772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8024776:	f023 0304 	bic.w	r3, r3, #4
 802477a:	6113      	str	r3, [r2, #16]
 802477c:	e028      	b.n	80247d0 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	689b      	ldr	r3, [r3, #8]
 8024782:	60bb      	str	r3, [r7, #8]
 8024784:	e01c      	b.n	80247c0 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	691b      	ldr	r3, [r3, #16]
 802478a:	b2db      	uxtb	r3, r3
 802478c:	4619      	mov	r1, r3
 802478e:	68b8      	ldr	r0, [r7, #8]
 8024790:	f000 f866 	bl	8024860 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024794:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024798:	f7ff fe76 	bl	8024488 <FLASH_WaitForLastOperation>
 802479c:	4603      	mov	r3, r0
 802479e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80247a0:	4b11      	ldr	r3, [pc, #68]	; (80247e8 <HAL_FLASHEx_Erase+0xe0>)
 80247a2:	691b      	ldr	r3, [r3, #16]
 80247a4:	4a10      	ldr	r2, [pc, #64]	; (80247e8 <HAL_FLASHEx_Erase+0xe0>)
 80247a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80247aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80247ac:	7bfb      	ldrb	r3, [r7, #15]
 80247ae:	2b00      	cmp	r3, #0
 80247b0:	d003      	beq.n	80247ba <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80247b2:	683b      	ldr	r3, [r7, #0]
 80247b4:	68ba      	ldr	r2, [r7, #8]
 80247b6:	601a      	str	r2, [r3, #0]
          break;
 80247b8:	e00a      	b.n	80247d0 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80247ba:	68bb      	ldr	r3, [r7, #8]
 80247bc:	3301      	adds	r3, #1
 80247be:	60bb      	str	r3, [r7, #8]
 80247c0:	687b      	ldr	r3, [r7, #4]
 80247c2:	68da      	ldr	r2, [r3, #12]
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	689b      	ldr	r3, [r3, #8]
 80247c8:	4413      	add	r3, r2
 80247ca:	68ba      	ldr	r2, [r7, #8]
 80247cc:	429a      	cmp	r2, r3
 80247ce:	d3da      	bcc.n	8024786 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80247d0:	f000 f894 	bl	80248fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80247d4:	4b03      	ldr	r3, [pc, #12]	; (80247e4 <HAL_FLASHEx_Erase+0xdc>)
 80247d6:	2200      	movs	r2, #0
 80247d8:	761a      	strb	r2, [r3, #24]

  return status;
 80247da:	7bfb      	ldrb	r3, [r7, #15]
}
 80247dc:	4618      	mov	r0, r3
 80247de:	3710      	adds	r7, #16
 80247e0:	46bd      	mov	sp, r7
 80247e2:	bd80      	pop	{r7, pc}
 80247e4:	20000ac8 	.word	0x20000ac8
 80247e8:	40023c00 	.word	0x40023c00

080247ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80247ec:	b480      	push	{r7}
 80247ee:	b083      	sub	sp, #12
 80247f0:	af00      	add	r7, sp, #0
 80247f2:	4603      	mov	r3, r0
 80247f4:	6039      	str	r1, [r7, #0]
 80247f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80247f8:	4b18      	ldr	r3, [pc, #96]	; (802485c <FLASH_MassErase+0x70>)
 80247fa:	691b      	ldr	r3, [r3, #16]
 80247fc:	4a17      	ldr	r2, [pc, #92]	; (802485c <FLASH_MassErase+0x70>)
 80247fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024802:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8024804:	683b      	ldr	r3, [r7, #0]
 8024806:	2b03      	cmp	r3, #3
 8024808:	d108      	bne.n	802481c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 802480a:	4b14      	ldr	r3, [pc, #80]	; (802485c <FLASH_MassErase+0x70>)
 802480c:	691b      	ldr	r3, [r3, #16]
 802480e:	4a13      	ldr	r2, [pc, #76]	; (802485c <FLASH_MassErase+0x70>)
 8024810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024814:	f043 0304 	orr.w	r3, r3, #4
 8024818:	6113      	str	r3, [r2, #16]
 802481a:	e00f      	b.n	802483c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 802481c:	683b      	ldr	r3, [r7, #0]
 802481e:	2b01      	cmp	r3, #1
 8024820:	d106      	bne.n	8024830 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8024822:	4b0e      	ldr	r3, [pc, #56]	; (802485c <FLASH_MassErase+0x70>)
 8024824:	691b      	ldr	r3, [r3, #16]
 8024826:	4a0d      	ldr	r2, [pc, #52]	; (802485c <FLASH_MassErase+0x70>)
 8024828:	f043 0304 	orr.w	r3, r3, #4
 802482c:	6113      	str	r3, [r2, #16]
 802482e:	e005      	b.n	802483c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8024830:	4b0a      	ldr	r3, [pc, #40]	; (802485c <FLASH_MassErase+0x70>)
 8024832:	691b      	ldr	r3, [r3, #16]
 8024834:	4a09      	ldr	r2, [pc, #36]	; (802485c <FLASH_MassErase+0x70>)
 8024836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802483a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802483c:	4b07      	ldr	r3, [pc, #28]	; (802485c <FLASH_MassErase+0x70>)
 802483e:	691a      	ldr	r2, [r3, #16]
 8024840:	79fb      	ldrb	r3, [r7, #7]
 8024842:	021b      	lsls	r3, r3, #8
 8024844:	4313      	orrs	r3, r2
 8024846:	4a05      	ldr	r2, [pc, #20]	; (802485c <FLASH_MassErase+0x70>)
 8024848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802484c:	6113      	str	r3, [r2, #16]
}
 802484e:	bf00      	nop
 8024850:	370c      	adds	r7, #12
 8024852:	46bd      	mov	sp, r7
 8024854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024858:	4770      	bx	lr
 802485a:	bf00      	nop
 802485c:	40023c00 	.word	0x40023c00

08024860 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8024860:	b480      	push	{r7}
 8024862:	b085      	sub	sp, #20
 8024864:	af00      	add	r7, sp, #0
 8024866:	6078      	str	r0, [r7, #4]
 8024868:	460b      	mov	r3, r1
 802486a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 802486c:	2300      	movs	r3, #0
 802486e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8024870:	78fb      	ldrb	r3, [r7, #3]
 8024872:	2b00      	cmp	r3, #0
 8024874:	d102      	bne.n	802487c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8024876:	2300      	movs	r3, #0
 8024878:	60fb      	str	r3, [r7, #12]
 802487a:	e010      	b.n	802489e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 802487c:	78fb      	ldrb	r3, [r7, #3]
 802487e:	2b01      	cmp	r3, #1
 8024880:	d103      	bne.n	802488a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8024882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8024886:	60fb      	str	r3, [r7, #12]
 8024888:	e009      	b.n	802489e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802488a:	78fb      	ldrb	r3, [r7, #3]
 802488c:	2b02      	cmp	r3, #2
 802488e:	d103      	bne.n	8024898 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8024890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024894:	60fb      	str	r3, [r7, #12]
 8024896:	e002      	b.n	802489e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8024898:	f44f 7340 	mov.w	r3, #768	; 0x300
 802489c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	2b0b      	cmp	r3, #11
 80248a2:	d902      	bls.n	80248aa <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	3304      	adds	r3, #4
 80248a8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80248aa:	4b13      	ldr	r3, [pc, #76]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248ac:	691b      	ldr	r3, [r3, #16]
 80248ae:	4a12      	ldr	r2, [pc, #72]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80248b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80248b6:	4b10      	ldr	r3, [pc, #64]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248b8:	691a      	ldr	r2, [r3, #16]
 80248ba:	490f      	ldr	r1, [pc, #60]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	4313      	orrs	r3, r2
 80248c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80248c2:	4b0d      	ldr	r3, [pc, #52]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248c4:	691b      	ldr	r3, [r3, #16]
 80248c6:	4a0c      	ldr	r2, [pc, #48]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80248cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80248ce:	4b0a      	ldr	r3, [pc, #40]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248d0:	691a      	ldr	r2, [r3, #16]
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	00db      	lsls	r3, r3, #3
 80248d6:	4313      	orrs	r3, r2
 80248d8:	4a07      	ldr	r2, [pc, #28]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248da:	f043 0302 	orr.w	r3, r3, #2
 80248de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80248e0:	4b05      	ldr	r3, [pc, #20]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248e2:	691b      	ldr	r3, [r3, #16]
 80248e4:	4a04      	ldr	r2, [pc, #16]	; (80248f8 <FLASH_Erase_Sector+0x98>)
 80248e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80248ea:	6113      	str	r3, [r2, #16]
}
 80248ec:	bf00      	nop
 80248ee:	3714      	adds	r7, #20
 80248f0:	46bd      	mov	sp, r7
 80248f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248f6:	4770      	bx	lr
 80248f8:	40023c00 	.word	0x40023c00

080248fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80248fc:	b480      	push	{r7}
 80248fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8024900:	4b20      	ldr	r3, [pc, #128]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024908:	2b00      	cmp	r3, #0
 802490a:	d017      	beq.n	802493c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 802490c:	4b1d      	ldr	r3, [pc, #116]	; (8024984 <FLASH_FlushCaches+0x88>)
 802490e:	681b      	ldr	r3, [r3, #0]
 8024910:	4a1c      	ldr	r2, [pc, #112]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024912:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024916:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8024918:	4b1a      	ldr	r3, [pc, #104]	; (8024984 <FLASH_FlushCaches+0x88>)
 802491a:	681b      	ldr	r3, [r3, #0]
 802491c:	4a19      	ldr	r2, [pc, #100]	; (8024984 <FLASH_FlushCaches+0x88>)
 802491e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024922:	6013      	str	r3, [r2, #0]
 8024924:	4b17      	ldr	r3, [pc, #92]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	4a16      	ldr	r2, [pc, #88]	; (8024984 <FLASH_FlushCaches+0x88>)
 802492a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802492e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024930:	4b14      	ldr	r3, [pc, #80]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024932:	681b      	ldr	r3, [r3, #0]
 8024934:	4a13      	ldr	r2, [pc, #76]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802493a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 802493c:	4b11      	ldr	r3, [pc, #68]	; (8024984 <FLASH_FlushCaches+0x88>)
 802493e:	681b      	ldr	r3, [r3, #0]
 8024940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024944:	2b00      	cmp	r3, #0
 8024946:	d017      	beq.n	8024978 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8024948:	4b0e      	ldr	r3, [pc, #56]	; (8024984 <FLASH_FlushCaches+0x88>)
 802494a:	681b      	ldr	r3, [r3, #0]
 802494c:	4a0d      	ldr	r2, [pc, #52]	; (8024984 <FLASH_FlushCaches+0x88>)
 802494e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024952:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024954:	4b0b      	ldr	r3, [pc, #44]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024956:	681b      	ldr	r3, [r3, #0]
 8024958:	4a0a      	ldr	r2, [pc, #40]	; (8024984 <FLASH_FlushCaches+0x88>)
 802495a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802495e:	6013      	str	r3, [r2, #0]
 8024960:	4b08      	ldr	r3, [pc, #32]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	4a07      	ldr	r2, [pc, #28]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024966:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802496a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 802496c:	4b05      	ldr	r3, [pc, #20]	; (8024984 <FLASH_FlushCaches+0x88>)
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	4a04      	ldr	r2, [pc, #16]	; (8024984 <FLASH_FlushCaches+0x88>)
 8024972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024976:	6013      	str	r3, [r2, #0]
  }
}
 8024978:	bf00      	nop
 802497a:	46bd      	mov	sp, r7
 802497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024980:	4770      	bx	lr
 8024982:	bf00      	nop
 8024984:	40023c00 	.word	0x40023c00

08024988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024988:	b480      	push	{r7}
 802498a:	b089      	sub	sp, #36	; 0x24
 802498c:	af00      	add	r7, sp, #0
 802498e:	6078      	str	r0, [r7, #4]
 8024990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024992:	2300      	movs	r3, #0
 8024994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024996:	2300      	movs	r3, #0
 8024998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802499a:	2300      	movs	r3, #0
 802499c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802499e:	2300      	movs	r3, #0
 80249a0:	61fb      	str	r3, [r7, #28]
 80249a2:	e177      	b.n	8024c94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80249a4:	2201      	movs	r2, #1
 80249a6:	69fb      	ldr	r3, [r7, #28]
 80249a8:	fa02 f303 	lsl.w	r3, r2, r3
 80249ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80249ae:	683b      	ldr	r3, [r7, #0]
 80249b0:	681b      	ldr	r3, [r3, #0]
 80249b2:	697a      	ldr	r2, [r7, #20]
 80249b4:	4013      	ands	r3, r2
 80249b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80249b8:	693a      	ldr	r2, [r7, #16]
 80249ba:	697b      	ldr	r3, [r7, #20]
 80249bc:	429a      	cmp	r2, r3
 80249be:	f040 8166 	bne.w	8024c8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80249c2:	683b      	ldr	r3, [r7, #0]
 80249c4:	685b      	ldr	r3, [r3, #4]
 80249c6:	f003 0303 	and.w	r3, r3, #3
 80249ca:	2b01      	cmp	r3, #1
 80249cc:	d005      	beq.n	80249da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80249ce:	683b      	ldr	r3, [r7, #0]
 80249d0:	685b      	ldr	r3, [r3, #4]
 80249d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80249d6:	2b02      	cmp	r3, #2
 80249d8:	d130      	bne.n	8024a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80249da:	687b      	ldr	r3, [r7, #4]
 80249dc:	689b      	ldr	r3, [r3, #8]
 80249de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80249e0:	69fb      	ldr	r3, [r7, #28]
 80249e2:	005b      	lsls	r3, r3, #1
 80249e4:	2203      	movs	r2, #3
 80249e6:	fa02 f303 	lsl.w	r3, r2, r3
 80249ea:	43db      	mvns	r3, r3
 80249ec:	69ba      	ldr	r2, [r7, #24]
 80249ee:	4013      	ands	r3, r2
 80249f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80249f2:	683b      	ldr	r3, [r7, #0]
 80249f4:	68da      	ldr	r2, [r3, #12]
 80249f6:	69fb      	ldr	r3, [r7, #28]
 80249f8:	005b      	lsls	r3, r3, #1
 80249fa:	fa02 f303 	lsl.w	r3, r2, r3
 80249fe:	69ba      	ldr	r2, [r7, #24]
 8024a00:	4313      	orrs	r3, r2
 8024a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	69ba      	ldr	r2, [r7, #24]
 8024a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024a0a:	687b      	ldr	r3, [r7, #4]
 8024a0c:	685b      	ldr	r3, [r3, #4]
 8024a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024a10:	2201      	movs	r2, #1
 8024a12:	69fb      	ldr	r3, [r7, #28]
 8024a14:	fa02 f303 	lsl.w	r3, r2, r3
 8024a18:	43db      	mvns	r3, r3
 8024a1a:	69ba      	ldr	r2, [r7, #24]
 8024a1c:	4013      	ands	r3, r2
 8024a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024a20:	683b      	ldr	r3, [r7, #0]
 8024a22:	685b      	ldr	r3, [r3, #4]
 8024a24:	091b      	lsrs	r3, r3, #4
 8024a26:	f003 0201 	and.w	r2, r3, #1
 8024a2a:	69fb      	ldr	r3, [r7, #28]
 8024a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8024a30:	69ba      	ldr	r2, [r7, #24]
 8024a32:	4313      	orrs	r3, r2
 8024a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	69ba      	ldr	r2, [r7, #24]
 8024a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024a3c:	683b      	ldr	r3, [r7, #0]
 8024a3e:	685b      	ldr	r3, [r3, #4]
 8024a40:	f003 0303 	and.w	r3, r3, #3
 8024a44:	2b03      	cmp	r3, #3
 8024a46:	d017      	beq.n	8024a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	68db      	ldr	r3, [r3, #12]
 8024a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024a4e:	69fb      	ldr	r3, [r7, #28]
 8024a50:	005b      	lsls	r3, r3, #1
 8024a52:	2203      	movs	r2, #3
 8024a54:	fa02 f303 	lsl.w	r3, r2, r3
 8024a58:	43db      	mvns	r3, r3
 8024a5a:	69ba      	ldr	r2, [r7, #24]
 8024a5c:	4013      	ands	r3, r2
 8024a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024a60:	683b      	ldr	r3, [r7, #0]
 8024a62:	689a      	ldr	r2, [r3, #8]
 8024a64:	69fb      	ldr	r3, [r7, #28]
 8024a66:	005b      	lsls	r3, r3, #1
 8024a68:	fa02 f303 	lsl.w	r3, r2, r3
 8024a6c:	69ba      	ldr	r2, [r7, #24]
 8024a6e:	4313      	orrs	r3, r2
 8024a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024a72:	687b      	ldr	r3, [r7, #4]
 8024a74:	69ba      	ldr	r2, [r7, #24]
 8024a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024a78:	683b      	ldr	r3, [r7, #0]
 8024a7a:	685b      	ldr	r3, [r3, #4]
 8024a7c:	f003 0303 	and.w	r3, r3, #3
 8024a80:	2b02      	cmp	r3, #2
 8024a82:	d123      	bne.n	8024acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024a84:	69fb      	ldr	r3, [r7, #28]
 8024a86:	08da      	lsrs	r2, r3, #3
 8024a88:	687b      	ldr	r3, [r7, #4]
 8024a8a:	3208      	adds	r2, #8
 8024a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024a92:	69fb      	ldr	r3, [r7, #28]
 8024a94:	f003 0307 	and.w	r3, r3, #7
 8024a98:	009b      	lsls	r3, r3, #2
 8024a9a:	220f      	movs	r2, #15
 8024a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8024aa0:	43db      	mvns	r3, r3
 8024aa2:	69ba      	ldr	r2, [r7, #24]
 8024aa4:	4013      	ands	r3, r2
 8024aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024aa8:	683b      	ldr	r3, [r7, #0]
 8024aaa:	691a      	ldr	r2, [r3, #16]
 8024aac:	69fb      	ldr	r3, [r7, #28]
 8024aae:	f003 0307 	and.w	r3, r3, #7
 8024ab2:	009b      	lsls	r3, r3, #2
 8024ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8024ab8:	69ba      	ldr	r2, [r7, #24]
 8024aba:	4313      	orrs	r3, r2
 8024abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024abe:	69fb      	ldr	r3, [r7, #28]
 8024ac0:	08da      	lsrs	r2, r3, #3
 8024ac2:	687b      	ldr	r3, [r7, #4]
 8024ac4:	3208      	adds	r2, #8
 8024ac6:	69b9      	ldr	r1, [r7, #24]
 8024ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	681b      	ldr	r3, [r3, #0]
 8024ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024ad2:	69fb      	ldr	r3, [r7, #28]
 8024ad4:	005b      	lsls	r3, r3, #1
 8024ad6:	2203      	movs	r2, #3
 8024ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8024adc:	43db      	mvns	r3, r3
 8024ade:	69ba      	ldr	r2, [r7, #24]
 8024ae0:	4013      	ands	r3, r2
 8024ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024ae4:	683b      	ldr	r3, [r7, #0]
 8024ae6:	685b      	ldr	r3, [r3, #4]
 8024ae8:	f003 0203 	and.w	r2, r3, #3
 8024aec:	69fb      	ldr	r3, [r7, #28]
 8024aee:	005b      	lsls	r3, r3, #1
 8024af0:	fa02 f303 	lsl.w	r3, r2, r3
 8024af4:	69ba      	ldr	r2, [r7, #24]
 8024af6:	4313      	orrs	r3, r2
 8024af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024afa:	687b      	ldr	r3, [r7, #4]
 8024afc:	69ba      	ldr	r2, [r7, #24]
 8024afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024b00:	683b      	ldr	r3, [r7, #0]
 8024b02:	685b      	ldr	r3, [r3, #4]
 8024b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024b08:	2b00      	cmp	r3, #0
 8024b0a:	f000 80c0 	beq.w	8024c8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024b0e:	2300      	movs	r3, #0
 8024b10:	60fb      	str	r3, [r7, #12]
 8024b12:	4b66      	ldr	r3, [pc, #408]	; (8024cac <HAL_GPIO_Init+0x324>)
 8024b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b16:	4a65      	ldr	r2, [pc, #404]	; (8024cac <HAL_GPIO_Init+0x324>)
 8024b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8024b1e:	4b63      	ldr	r3, [pc, #396]	; (8024cac <HAL_GPIO_Init+0x324>)
 8024b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024b26:	60fb      	str	r3, [r7, #12]
 8024b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024b2a:	4a61      	ldr	r2, [pc, #388]	; (8024cb0 <HAL_GPIO_Init+0x328>)
 8024b2c:	69fb      	ldr	r3, [r7, #28]
 8024b2e:	089b      	lsrs	r3, r3, #2
 8024b30:	3302      	adds	r3, #2
 8024b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024b38:	69fb      	ldr	r3, [r7, #28]
 8024b3a:	f003 0303 	and.w	r3, r3, #3
 8024b3e:	009b      	lsls	r3, r3, #2
 8024b40:	220f      	movs	r2, #15
 8024b42:	fa02 f303 	lsl.w	r3, r2, r3
 8024b46:	43db      	mvns	r3, r3
 8024b48:	69ba      	ldr	r2, [r7, #24]
 8024b4a:	4013      	ands	r3, r2
 8024b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	4a58      	ldr	r2, [pc, #352]	; (8024cb4 <HAL_GPIO_Init+0x32c>)
 8024b52:	4293      	cmp	r3, r2
 8024b54:	d037      	beq.n	8024bc6 <HAL_GPIO_Init+0x23e>
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	4a57      	ldr	r2, [pc, #348]	; (8024cb8 <HAL_GPIO_Init+0x330>)
 8024b5a:	4293      	cmp	r3, r2
 8024b5c:	d031      	beq.n	8024bc2 <HAL_GPIO_Init+0x23a>
 8024b5e:	687b      	ldr	r3, [r7, #4]
 8024b60:	4a56      	ldr	r2, [pc, #344]	; (8024cbc <HAL_GPIO_Init+0x334>)
 8024b62:	4293      	cmp	r3, r2
 8024b64:	d02b      	beq.n	8024bbe <HAL_GPIO_Init+0x236>
 8024b66:	687b      	ldr	r3, [r7, #4]
 8024b68:	4a55      	ldr	r2, [pc, #340]	; (8024cc0 <HAL_GPIO_Init+0x338>)
 8024b6a:	4293      	cmp	r3, r2
 8024b6c:	d025      	beq.n	8024bba <HAL_GPIO_Init+0x232>
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	4a54      	ldr	r2, [pc, #336]	; (8024cc4 <HAL_GPIO_Init+0x33c>)
 8024b72:	4293      	cmp	r3, r2
 8024b74:	d01f      	beq.n	8024bb6 <HAL_GPIO_Init+0x22e>
 8024b76:	687b      	ldr	r3, [r7, #4]
 8024b78:	4a53      	ldr	r2, [pc, #332]	; (8024cc8 <HAL_GPIO_Init+0x340>)
 8024b7a:	4293      	cmp	r3, r2
 8024b7c:	d019      	beq.n	8024bb2 <HAL_GPIO_Init+0x22a>
 8024b7e:	687b      	ldr	r3, [r7, #4]
 8024b80:	4a52      	ldr	r2, [pc, #328]	; (8024ccc <HAL_GPIO_Init+0x344>)
 8024b82:	4293      	cmp	r3, r2
 8024b84:	d013      	beq.n	8024bae <HAL_GPIO_Init+0x226>
 8024b86:	687b      	ldr	r3, [r7, #4]
 8024b88:	4a51      	ldr	r2, [pc, #324]	; (8024cd0 <HAL_GPIO_Init+0x348>)
 8024b8a:	4293      	cmp	r3, r2
 8024b8c:	d00d      	beq.n	8024baa <HAL_GPIO_Init+0x222>
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	4a50      	ldr	r2, [pc, #320]	; (8024cd4 <HAL_GPIO_Init+0x34c>)
 8024b92:	4293      	cmp	r3, r2
 8024b94:	d007      	beq.n	8024ba6 <HAL_GPIO_Init+0x21e>
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	4a4f      	ldr	r2, [pc, #316]	; (8024cd8 <HAL_GPIO_Init+0x350>)
 8024b9a:	4293      	cmp	r3, r2
 8024b9c:	d101      	bne.n	8024ba2 <HAL_GPIO_Init+0x21a>
 8024b9e:	2309      	movs	r3, #9
 8024ba0:	e012      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024ba2:	230a      	movs	r3, #10
 8024ba4:	e010      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024ba6:	2308      	movs	r3, #8
 8024ba8:	e00e      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024baa:	2307      	movs	r3, #7
 8024bac:	e00c      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bae:	2306      	movs	r3, #6
 8024bb0:	e00a      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bb2:	2305      	movs	r3, #5
 8024bb4:	e008      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bb6:	2304      	movs	r3, #4
 8024bb8:	e006      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bba:	2303      	movs	r3, #3
 8024bbc:	e004      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bbe:	2302      	movs	r3, #2
 8024bc0:	e002      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bc2:	2301      	movs	r3, #1
 8024bc4:	e000      	b.n	8024bc8 <HAL_GPIO_Init+0x240>
 8024bc6:	2300      	movs	r3, #0
 8024bc8:	69fa      	ldr	r2, [r7, #28]
 8024bca:	f002 0203 	and.w	r2, r2, #3
 8024bce:	0092      	lsls	r2, r2, #2
 8024bd0:	4093      	lsls	r3, r2
 8024bd2:	69ba      	ldr	r2, [r7, #24]
 8024bd4:	4313      	orrs	r3, r2
 8024bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024bd8:	4935      	ldr	r1, [pc, #212]	; (8024cb0 <HAL_GPIO_Init+0x328>)
 8024bda:	69fb      	ldr	r3, [r7, #28]
 8024bdc:	089b      	lsrs	r3, r3, #2
 8024bde:	3302      	adds	r3, #2
 8024be0:	69ba      	ldr	r2, [r7, #24]
 8024be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024be6:	4b3d      	ldr	r3, [pc, #244]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024be8:	689b      	ldr	r3, [r3, #8]
 8024bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024bec:	693b      	ldr	r3, [r7, #16]
 8024bee:	43db      	mvns	r3, r3
 8024bf0:	69ba      	ldr	r2, [r7, #24]
 8024bf2:	4013      	ands	r3, r2
 8024bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024bf6:	683b      	ldr	r3, [r7, #0]
 8024bf8:	685b      	ldr	r3, [r3, #4]
 8024bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d003      	beq.n	8024c0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024c02:	69ba      	ldr	r2, [r7, #24]
 8024c04:	693b      	ldr	r3, [r7, #16]
 8024c06:	4313      	orrs	r3, r2
 8024c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024c0a:	4a34      	ldr	r2, [pc, #208]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c0c:	69bb      	ldr	r3, [r7, #24]
 8024c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024c10:	4b32      	ldr	r3, [pc, #200]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c12:	68db      	ldr	r3, [r3, #12]
 8024c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024c16:	693b      	ldr	r3, [r7, #16]
 8024c18:	43db      	mvns	r3, r3
 8024c1a:	69ba      	ldr	r2, [r7, #24]
 8024c1c:	4013      	ands	r3, r2
 8024c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024c20:	683b      	ldr	r3, [r7, #0]
 8024c22:	685b      	ldr	r3, [r3, #4]
 8024c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024c28:	2b00      	cmp	r3, #0
 8024c2a:	d003      	beq.n	8024c34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024c2c:	69ba      	ldr	r2, [r7, #24]
 8024c2e:	693b      	ldr	r3, [r7, #16]
 8024c30:	4313      	orrs	r3, r2
 8024c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024c34:	4a29      	ldr	r2, [pc, #164]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c36:	69bb      	ldr	r3, [r7, #24]
 8024c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8024c3a:	4b28      	ldr	r3, [pc, #160]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c3c:	685b      	ldr	r3, [r3, #4]
 8024c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024c40:	693b      	ldr	r3, [r7, #16]
 8024c42:	43db      	mvns	r3, r3
 8024c44:	69ba      	ldr	r2, [r7, #24]
 8024c46:	4013      	ands	r3, r2
 8024c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8024c4a:	683b      	ldr	r3, [r7, #0]
 8024c4c:	685b      	ldr	r3, [r3, #4]
 8024c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024c52:	2b00      	cmp	r3, #0
 8024c54:	d003      	beq.n	8024c5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8024c56:	69ba      	ldr	r2, [r7, #24]
 8024c58:	693b      	ldr	r3, [r7, #16]
 8024c5a:	4313      	orrs	r3, r2
 8024c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024c5e:	4a1f      	ldr	r2, [pc, #124]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c60:	69bb      	ldr	r3, [r7, #24]
 8024c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024c64:	4b1d      	ldr	r3, [pc, #116]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024c6a:	693b      	ldr	r3, [r7, #16]
 8024c6c:	43db      	mvns	r3, r3
 8024c6e:	69ba      	ldr	r2, [r7, #24]
 8024c70:	4013      	ands	r3, r2
 8024c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024c74:	683b      	ldr	r3, [r7, #0]
 8024c76:	685b      	ldr	r3, [r3, #4]
 8024c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024c7c:	2b00      	cmp	r3, #0
 8024c7e:	d003      	beq.n	8024c88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024c80:	69ba      	ldr	r2, [r7, #24]
 8024c82:	693b      	ldr	r3, [r7, #16]
 8024c84:	4313      	orrs	r3, r2
 8024c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024c88:	4a14      	ldr	r2, [pc, #80]	; (8024cdc <HAL_GPIO_Init+0x354>)
 8024c8a:	69bb      	ldr	r3, [r7, #24]
 8024c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024c8e:	69fb      	ldr	r3, [r7, #28]
 8024c90:	3301      	adds	r3, #1
 8024c92:	61fb      	str	r3, [r7, #28]
 8024c94:	69fb      	ldr	r3, [r7, #28]
 8024c96:	2b0f      	cmp	r3, #15
 8024c98:	f67f ae84 	bls.w	80249a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024c9c:	bf00      	nop
 8024c9e:	bf00      	nop
 8024ca0:	3724      	adds	r7, #36	; 0x24
 8024ca2:	46bd      	mov	sp, r7
 8024ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ca8:	4770      	bx	lr
 8024caa:	bf00      	nop
 8024cac:	40023800 	.word	0x40023800
 8024cb0:	40013800 	.word	0x40013800
 8024cb4:	40020000 	.word	0x40020000
 8024cb8:	40020400 	.word	0x40020400
 8024cbc:	40020800 	.word	0x40020800
 8024cc0:	40020c00 	.word	0x40020c00
 8024cc4:	40021000 	.word	0x40021000
 8024cc8:	40021400 	.word	0x40021400
 8024ccc:	40021800 	.word	0x40021800
 8024cd0:	40021c00 	.word	0x40021c00
 8024cd4:	40022000 	.word	0x40022000
 8024cd8:	40022400 	.word	0x40022400
 8024cdc:	40013c00 	.word	0x40013c00

08024ce0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024ce0:	b480      	push	{r7}
 8024ce2:	b087      	sub	sp, #28
 8024ce4:	af00      	add	r7, sp, #0
 8024ce6:	6078      	str	r0, [r7, #4]
 8024ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024cea:	2300      	movs	r3, #0
 8024cec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024cee:	2300      	movs	r3, #0
 8024cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024cf2:	2300      	movs	r3, #0
 8024cf4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024cf6:	2300      	movs	r3, #0
 8024cf8:	617b      	str	r3, [r7, #20]
 8024cfa:	e0d9      	b.n	8024eb0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024cfc:	2201      	movs	r2, #1
 8024cfe:	697b      	ldr	r3, [r7, #20]
 8024d00:	fa02 f303 	lsl.w	r3, r2, r3
 8024d04:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024d06:	683a      	ldr	r2, [r7, #0]
 8024d08:	693b      	ldr	r3, [r7, #16]
 8024d0a:	4013      	ands	r3, r2
 8024d0c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024d0e:	68fa      	ldr	r2, [r7, #12]
 8024d10:	693b      	ldr	r3, [r7, #16]
 8024d12:	429a      	cmp	r2, r3
 8024d14:	f040 80c9 	bne.w	8024eaa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024d18:	4a6b      	ldr	r2, [pc, #428]	; (8024ec8 <HAL_GPIO_DeInit+0x1e8>)
 8024d1a:	697b      	ldr	r3, [r7, #20]
 8024d1c:	089b      	lsrs	r3, r3, #2
 8024d1e:	3302      	adds	r3, #2
 8024d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024d24:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024d26:	697b      	ldr	r3, [r7, #20]
 8024d28:	f003 0303 	and.w	r3, r3, #3
 8024d2c:	009b      	lsls	r3, r3, #2
 8024d2e:	220f      	movs	r2, #15
 8024d30:	fa02 f303 	lsl.w	r3, r2, r3
 8024d34:	68ba      	ldr	r2, [r7, #8]
 8024d36:	4013      	ands	r3, r2
 8024d38:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	4a63      	ldr	r2, [pc, #396]	; (8024ecc <HAL_GPIO_DeInit+0x1ec>)
 8024d3e:	4293      	cmp	r3, r2
 8024d40:	d037      	beq.n	8024db2 <HAL_GPIO_DeInit+0xd2>
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	4a62      	ldr	r2, [pc, #392]	; (8024ed0 <HAL_GPIO_DeInit+0x1f0>)
 8024d46:	4293      	cmp	r3, r2
 8024d48:	d031      	beq.n	8024dae <HAL_GPIO_DeInit+0xce>
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	4a61      	ldr	r2, [pc, #388]	; (8024ed4 <HAL_GPIO_DeInit+0x1f4>)
 8024d4e:	4293      	cmp	r3, r2
 8024d50:	d02b      	beq.n	8024daa <HAL_GPIO_DeInit+0xca>
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	4a60      	ldr	r2, [pc, #384]	; (8024ed8 <HAL_GPIO_DeInit+0x1f8>)
 8024d56:	4293      	cmp	r3, r2
 8024d58:	d025      	beq.n	8024da6 <HAL_GPIO_DeInit+0xc6>
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	4a5f      	ldr	r2, [pc, #380]	; (8024edc <HAL_GPIO_DeInit+0x1fc>)
 8024d5e:	4293      	cmp	r3, r2
 8024d60:	d01f      	beq.n	8024da2 <HAL_GPIO_DeInit+0xc2>
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	4a5e      	ldr	r2, [pc, #376]	; (8024ee0 <HAL_GPIO_DeInit+0x200>)
 8024d66:	4293      	cmp	r3, r2
 8024d68:	d019      	beq.n	8024d9e <HAL_GPIO_DeInit+0xbe>
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	4a5d      	ldr	r2, [pc, #372]	; (8024ee4 <HAL_GPIO_DeInit+0x204>)
 8024d6e:	4293      	cmp	r3, r2
 8024d70:	d013      	beq.n	8024d9a <HAL_GPIO_DeInit+0xba>
 8024d72:	687b      	ldr	r3, [r7, #4]
 8024d74:	4a5c      	ldr	r2, [pc, #368]	; (8024ee8 <HAL_GPIO_DeInit+0x208>)
 8024d76:	4293      	cmp	r3, r2
 8024d78:	d00d      	beq.n	8024d96 <HAL_GPIO_DeInit+0xb6>
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	4a5b      	ldr	r2, [pc, #364]	; (8024eec <HAL_GPIO_DeInit+0x20c>)
 8024d7e:	4293      	cmp	r3, r2
 8024d80:	d007      	beq.n	8024d92 <HAL_GPIO_DeInit+0xb2>
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	4a5a      	ldr	r2, [pc, #360]	; (8024ef0 <HAL_GPIO_DeInit+0x210>)
 8024d86:	4293      	cmp	r3, r2
 8024d88:	d101      	bne.n	8024d8e <HAL_GPIO_DeInit+0xae>
 8024d8a:	2309      	movs	r3, #9
 8024d8c:	e012      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024d8e:	230a      	movs	r3, #10
 8024d90:	e010      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024d92:	2308      	movs	r3, #8
 8024d94:	e00e      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024d96:	2307      	movs	r3, #7
 8024d98:	e00c      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024d9a:	2306      	movs	r3, #6
 8024d9c:	e00a      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024d9e:	2305      	movs	r3, #5
 8024da0:	e008      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024da2:	2304      	movs	r3, #4
 8024da4:	e006      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024da6:	2303      	movs	r3, #3
 8024da8:	e004      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024daa:	2302      	movs	r3, #2
 8024dac:	e002      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024dae:	2301      	movs	r3, #1
 8024db0:	e000      	b.n	8024db4 <HAL_GPIO_DeInit+0xd4>
 8024db2:	2300      	movs	r3, #0
 8024db4:	697a      	ldr	r2, [r7, #20]
 8024db6:	f002 0203 	and.w	r2, r2, #3
 8024dba:	0092      	lsls	r2, r2, #2
 8024dbc:	4093      	lsls	r3, r2
 8024dbe:	68ba      	ldr	r2, [r7, #8]
 8024dc0:	429a      	cmp	r2, r3
 8024dc2:	d132      	bne.n	8024e2a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024dc4:	4b4b      	ldr	r3, [pc, #300]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024dc6:	681a      	ldr	r2, [r3, #0]
 8024dc8:	68fb      	ldr	r3, [r7, #12]
 8024dca:	43db      	mvns	r3, r3
 8024dcc:	4949      	ldr	r1, [pc, #292]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024dce:	4013      	ands	r3, r2
 8024dd0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024dd2:	4b48      	ldr	r3, [pc, #288]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024dd4:	685a      	ldr	r2, [r3, #4]
 8024dd6:	68fb      	ldr	r3, [r7, #12]
 8024dd8:	43db      	mvns	r3, r3
 8024dda:	4946      	ldr	r1, [pc, #280]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024ddc:	4013      	ands	r3, r2
 8024dde:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024de0:	4b44      	ldr	r3, [pc, #272]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024de2:	68da      	ldr	r2, [r3, #12]
 8024de4:	68fb      	ldr	r3, [r7, #12]
 8024de6:	43db      	mvns	r3, r3
 8024de8:	4942      	ldr	r1, [pc, #264]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024dea:	4013      	ands	r3, r2
 8024dec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024dee:	4b41      	ldr	r3, [pc, #260]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024df0:	689a      	ldr	r2, [r3, #8]
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	43db      	mvns	r3, r3
 8024df6:	493f      	ldr	r1, [pc, #252]	; (8024ef4 <HAL_GPIO_DeInit+0x214>)
 8024df8:	4013      	ands	r3, r2
 8024dfa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024dfc:	697b      	ldr	r3, [r7, #20]
 8024dfe:	f003 0303 	and.w	r3, r3, #3
 8024e02:	009b      	lsls	r3, r3, #2
 8024e04:	220f      	movs	r2, #15
 8024e06:	fa02 f303 	lsl.w	r3, r2, r3
 8024e0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024e0c:	4a2e      	ldr	r2, [pc, #184]	; (8024ec8 <HAL_GPIO_DeInit+0x1e8>)
 8024e0e:	697b      	ldr	r3, [r7, #20]
 8024e10:	089b      	lsrs	r3, r3, #2
 8024e12:	3302      	adds	r3, #2
 8024e14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024e18:	68bb      	ldr	r3, [r7, #8]
 8024e1a:	43da      	mvns	r2, r3
 8024e1c:	482a      	ldr	r0, [pc, #168]	; (8024ec8 <HAL_GPIO_DeInit+0x1e8>)
 8024e1e:	697b      	ldr	r3, [r7, #20]
 8024e20:	089b      	lsrs	r3, r3, #2
 8024e22:	400a      	ands	r2, r1
 8024e24:	3302      	adds	r3, #2
 8024e26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	681a      	ldr	r2, [r3, #0]
 8024e2e:	697b      	ldr	r3, [r7, #20]
 8024e30:	005b      	lsls	r3, r3, #1
 8024e32:	2103      	movs	r1, #3
 8024e34:	fa01 f303 	lsl.w	r3, r1, r3
 8024e38:	43db      	mvns	r3, r3
 8024e3a:	401a      	ands	r2, r3
 8024e3c:	687b      	ldr	r3, [r7, #4]
 8024e3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024e40:	697b      	ldr	r3, [r7, #20]
 8024e42:	08da      	lsrs	r2, r3, #3
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	3208      	adds	r2, #8
 8024e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024e4c:	697b      	ldr	r3, [r7, #20]
 8024e4e:	f003 0307 	and.w	r3, r3, #7
 8024e52:	009b      	lsls	r3, r3, #2
 8024e54:	220f      	movs	r2, #15
 8024e56:	fa02 f303 	lsl.w	r3, r2, r3
 8024e5a:	43db      	mvns	r3, r3
 8024e5c:	697a      	ldr	r2, [r7, #20]
 8024e5e:	08d2      	lsrs	r2, r2, #3
 8024e60:	4019      	ands	r1, r3
 8024e62:	687b      	ldr	r3, [r7, #4]
 8024e64:	3208      	adds	r2, #8
 8024e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024e6a:	687b      	ldr	r3, [r7, #4]
 8024e6c:	68da      	ldr	r2, [r3, #12]
 8024e6e:	697b      	ldr	r3, [r7, #20]
 8024e70:	005b      	lsls	r3, r3, #1
 8024e72:	2103      	movs	r1, #3
 8024e74:	fa01 f303 	lsl.w	r3, r1, r3
 8024e78:	43db      	mvns	r3, r3
 8024e7a:	401a      	ands	r2, r3
 8024e7c:	687b      	ldr	r3, [r7, #4]
 8024e7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	685a      	ldr	r2, [r3, #4]
 8024e84:	2101      	movs	r1, #1
 8024e86:	697b      	ldr	r3, [r7, #20]
 8024e88:	fa01 f303 	lsl.w	r3, r1, r3
 8024e8c:	43db      	mvns	r3, r3
 8024e8e:	401a      	ands	r2, r3
 8024e90:	687b      	ldr	r3, [r7, #4]
 8024e92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	689a      	ldr	r2, [r3, #8]
 8024e98:	697b      	ldr	r3, [r7, #20]
 8024e9a:	005b      	lsls	r3, r3, #1
 8024e9c:	2103      	movs	r1, #3
 8024e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8024ea2:	43db      	mvns	r3, r3
 8024ea4:	401a      	ands	r2, r3
 8024ea6:	687b      	ldr	r3, [r7, #4]
 8024ea8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024eaa:	697b      	ldr	r3, [r7, #20]
 8024eac:	3301      	adds	r3, #1
 8024eae:	617b      	str	r3, [r7, #20]
 8024eb0:	697b      	ldr	r3, [r7, #20]
 8024eb2:	2b0f      	cmp	r3, #15
 8024eb4:	f67f af22 	bls.w	8024cfc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8024eb8:	bf00      	nop
 8024eba:	bf00      	nop
 8024ebc:	371c      	adds	r7, #28
 8024ebe:	46bd      	mov	sp, r7
 8024ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ec4:	4770      	bx	lr
 8024ec6:	bf00      	nop
 8024ec8:	40013800 	.word	0x40013800
 8024ecc:	40020000 	.word	0x40020000
 8024ed0:	40020400 	.word	0x40020400
 8024ed4:	40020800 	.word	0x40020800
 8024ed8:	40020c00 	.word	0x40020c00
 8024edc:	40021000 	.word	0x40021000
 8024ee0:	40021400 	.word	0x40021400
 8024ee4:	40021800 	.word	0x40021800
 8024ee8:	40021c00 	.word	0x40021c00
 8024eec:	40022000 	.word	0x40022000
 8024ef0:	40022400 	.word	0x40022400
 8024ef4:	40013c00 	.word	0x40013c00

08024ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8024ef8:	b480      	push	{r7}
 8024efa:	b083      	sub	sp, #12
 8024efc:	af00      	add	r7, sp, #0
 8024efe:	6078      	str	r0, [r7, #4]
 8024f00:	460b      	mov	r3, r1
 8024f02:	807b      	strh	r3, [r7, #2]
 8024f04:	4613      	mov	r3, r2
 8024f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024f08:	787b      	ldrb	r3, [r7, #1]
 8024f0a:	2b00      	cmp	r3, #0
 8024f0c:	d003      	beq.n	8024f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8024f0e:	887a      	ldrh	r2, [r7, #2]
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024f14:	e003      	b.n	8024f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024f16:	887b      	ldrh	r3, [r7, #2]
 8024f18:	041a      	lsls	r2, r3, #16
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	619a      	str	r2, [r3, #24]
}
 8024f1e:	bf00      	nop
 8024f20:	370c      	adds	r7, #12
 8024f22:	46bd      	mov	sp, r7
 8024f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f28:	4770      	bx	lr
	...

08024f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8024f2c:	b580      	push	{r7, lr}
 8024f2e:	b082      	sub	sp, #8
 8024f30:	af00      	add	r7, sp, #0
 8024f32:	4603      	mov	r3, r0
 8024f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8024f36:	4b08      	ldr	r3, [pc, #32]	; (8024f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024f38:	695a      	ldr	r2, [r3, #20]
 8024f3a:	88fb      	ldrh	r3, [r7, #6]
 8024f3c:	4013      	ands	r3, r2
 8024f3e:	2b00      	cmp	r3, #0
 8024f40:	d006      	beq.n	8024f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024f42:	4a05      	ldr	r2, [pc, #20]	; (8024f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024f44:	88fb      	ldrh	r3, [r7, #6]
 8024f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8024f48:	88fb      	ldrh	r3, [r7, #6]
 8024f4a:	4618      	mov	r0, r3
 8024f4c:	f7fd f880 	bl	8022050 <HAL_GPIO_EXTI_Callback>
  }
}
 8024f50:	bf00      	nop
 8024f52:	3708      	adds	r7, #8
 8024f54:	46bd      	mov	sp, r7
 8024f56:	bd80      	pop	{r7, pc}
 8024f58:	40013c00 	.word	0x40013c00

08024f5c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8024f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f5e:	b08f      	sub	sp, #60	; 0x3c
 8024f60:	af0a      	add	r7, sp, #40	; 0x28
 8024f62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8024f64:	687b      	ldr	r3, [r7, #4]
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	d101      	bne.n	8024f6e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8024f6a:	2301      	movs	r3, #1
 8024f6c:	e054      	b.n	8025018 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8024f74:	687b      	ldr	r3, [r7, #4]
 8024f76:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8024f7a:	b2db      	uxtb	r3, r3
 8024f7c:	2b00      	cmp	r3, #0
 8024f7e:	d106      	bne.n	8024f8e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8024f80:	687b      	ldr	r3, [r7, #4]
 8024f82:	2200      	movs	r2, #0
 8024f84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8024f88:	6878      	ldr	r0, [r7, #4]
 8024f8a:	f008 f8ed 	bl	802d168 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	2203      	movs	r2, #3
 8024f92:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8024f96:	68fb      	ldr	r3, [r7, #12]
 8024f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024f9e:	2b00      	cmp	r3, #0
 8024fa0:	d102      	bne.n	8024fa8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	2200      	movs	r2, #0
 8024fa6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	681b      	ldr	r3, [r3, #0]
 8024fac:	4618      	mov	r0, r3
 8024fae:	f005 f91b 	bl	802a1e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	681b      	ldr	r3, [r3, #0]
 8024fb6:	603b      	str	r3, [r7, #0]
 8024fb8:	687e      	ldr	r6, [r7, #4]
 8024fba:	466d      	mov	r5, sp
 8024fbc:	f106 0410 	add.w	r4, r6, #16
 8024fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024fc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8024fcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8024fd0:	1d33      	adds	r3, r6, #4
 8024fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8024fd4:	6838      	ldr	r0, [r7, #0]
 8024fd6:	f005 f895 	bl	802a104 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	681b      	ldr	r3, [r3, #0]
 8024fde:	2101      	movs	r1, #1
 8024fe0:	4618      	mov	r0, r3
 8024fe2:	f005 f912 	bl	802a20a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	681b      	ldr	r3, [r3, #0]
 8024fea:	603b      	str	r3, [r7, #0]
 8024fec:	687e      	ldr	r6, [r7, #4]
 8024fee:	466d      	mov	r5, sp
 8024ff0:	f106 0410 	add.w	r4, r6, #16
 8024ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8024ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8024ffc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025000:	e885 0003 	stmia.w	r5, {r0, r1}
 8025004:	1d33      	adds	r3, r6, #4
 8025006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025008:	6838      	ldr	r0, [r7, #0]
 802500a:	f005 fa9b 	bl	802a544 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	2201      	movs	r2, #1
 8025012:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8025016:	2300      	movs	r3, #0
}
 8025018:	4618      	mov	r0, r3
 802501a:	3714      	adds	r7, #20
 802501c:	46bd      	mov	sp, r7
 802501e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025020 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8025020:	b590      	push	{r4, r7, lr}
 8025022:	b089      	sub	sp, #36	; 0x24
 8025024:	af04      	add	r7, sp, #16
 8025026:	6078      	str	r0, [r7, #4]
 8025028:	4608      	mov	r0, r1
 802502a:	4611      	mov	r1, r2
 802502c:	461a      	mov	r2, r3
 802502e:	4603      	mov	r3, r0
 8025030:	70fb      	strb	r3, [r7, #3]
 8025032:	460b      	mov	r3, r1
 8025034:	70bb      	strb	r3, [r7, #2]
 8025036:	4613      	mov	r3, r2
 8025038:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 802503a:	687b      	ldr	r3, [r7, #4]
 802503c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025040:	2b01      	cmp	r3, #1
 8025042:	d101      	bne.n	8025048 <HAL_HCD_HC_Init+0x28>
 8025044:	2302      	movs	r3, #2
 8025046:	e076      	b.n	8025136 <HAL_HCD_HC_Init+0x116>
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	2201      	movs	r2, #1
 802504c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8025050:	78fb      	ldrb	r3, [r7, #3]
 8025052:	687a      	ldr	r2, [r7, #4]
 8025054:	212c      	movs	r1, #44	; 0x2c
 8025056:	fb01 f303 	mul.w	r3, r1, r3
 802505a:	4413      	add	r3, r2
 802505c:	333d      	adds	r3, #61	; 0x3d
 802505e:	2200      	movs	r2, #0
 8025060:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8025062:	78fb      	ldrb	r3, [r7, #3]
 8025064:	687a      	ldr	r2, [r7, #4]
 8025066:	212c      	movs	r1, #44	; 0x2c
 8025068:	fb01 f303 	mul.w	r3, r1, r3
 802506c:	4413      	add	r3, r2
 802506e:	3338      	adds	r3, #56	; 0x38
 8025070:	787a      	ldrb	r2, [r7, #1]
 8025072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8025074:	78fb      	ldrb	r3, [r7, #3]
 8025076:	687a      	ldr	r2, [r7, #4]
 8025078:	212c      	movs	r1, #44	; 0x2c
 802507a:	fb01 f303 	mul.w	r3, r1, r3
 802507e:	4413      	add	r3, r2
 8025080:	3340      	adds	r3, #64	; 0x40
 8025082:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8025084:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025086:	78fb      	ldrb	r3, [r7, #3]
 8025088:	687a      	ldr	r2, [r7, #4]
 802508a:	212c      	movs	r1, #44	; 0x2c
 802508c:	fb01 f303 	mul.w	r3, r1, r3
 8025090:	4413      	add	r3, r2
 8025092:	3339      	adds	r3, #57	; 0x39
 8025094:	78fa      	ldrb	r2, [r7, #3]
 8025096:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8025098:	78fb      	ldrb	r3, [r7, #3]
 802509a:	687a      	ldr	r2, [r7, #4]
 802509c:	212c      	movs	r1, #44	; 0x2c
 802509e:	fb01 f303 	mul.w	r3, r1, r3
 80250a2:	4413      	add	r3, r2
 80250a4:	333f      	adds	r3, #63	; 0x3f
 80250a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80250aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80250ac:	78fb      	ldrb	r3, [r7, #3]
 80250ae:	78ba      	ldrb	r2, [r7, #2]
 80250b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80250b4:	b2d0      	uxtb	r0, r2
 80250b6:	687a      	ldr	r2, [r7, #4]
 80250b8:	212c      	movs	r1, #44	; 0x2c
 80250ba:	fb01 f303 	mul.w	r3, r1, r3
 80250be:	4413      	add	r3, r2
 80250c0:	333a      	adds	r3, #58	; 0x3a
 80250c2:	4602      	mov	r2, r0
 80250c4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80250c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	da09      	bge.n	80250e2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80250ce:	78fb      	ldrb	r3, [r7, #3]
 80250d0:	687a      	ldr	r2, [r7, #4]
 80250d2:	212c      	movs	r1, #44	; 0x2c
 80250d4:	fb01 f303 	mul.w	r3, r1, r3
 80250d8:	4413      	add	r3, r2
 80250da:	333b      	adds	r3, #59	; 0x3b
 80250dc:	2201      	movs	r2, #1
 80250de:	701a      	strb	r2, [r3, #0]
 80250e0:	e008      	b.n	80250f4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80250e2:	78fb      	ldrb	r3, [r7, #3]
 80250e4:	687a      	ldr	r2, [r7, #4]
 80250e6:	212c      	movs	r1, #44	; 0x2c
 80250e8:	fb01 f303 	mul.w	r3, r1, r3
 80250ec:	4413      	add	r3, r2
 80250ee:	333b      	adds	r3, #59	; 0x3b
 80250f0:	2200      	movs	r2, #0
 80250f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80250f4:	78fb      	ldrb	r3, [r7, #3]
 80250f6:	687a      	ldr	r2, [r7, #4]
 80250f8:	212c      	movs	r1, #44	; 0x2c
 80250fa:	fb01 f303 	mul.w	r3, r1, r3
 80250fe:	4413      	add	r3, r2
 8025100:	333c      	adds	r3, #60	; 0x3c
 8025102:	f897 2020 	ldrb.w	r2, [r7, #32]
 8025106:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	6818      	ldr	r0, [r3, #0]
 802510c:	787c      	ldrb	r4, [r7, #1]
 802510e:	78ba      	ldrb	r2, [r7, #2]
 8025110:	78f9      	ldrb	r1, [r7, #3]
 8025112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8025114:	9302      	str	r3, [sp, #8]
 8025116:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802511a:	9301      	str	r3, [sp, #4]
 802511c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025120:	9300      	str	r3, [sp, #0]
 8025122:	4623      	mov	r3, r4
 8025124:	f005 fb94 	bl	802a850 <USB_HC_Init>
 8025128:	4603      	mov	r3, r0
 802512a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 802512c:	687b      	ldr	r3, [r7, #4]
 802512e:	2200      	movs	r2, #0
 8025130:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8025134:	7bfb      	ldrb	r3, [r7, #15]
}
 8025136:	4618      	mov	r0, r3
 8025138:	3714      	adds	r7, #20
 802513a:	46bd      	mov	sp, r7
 802513c:	bd90      	pop	{r4, r7, pc}

0802513e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 802513e:	b580      	push	{r7, lr}
 8025140:	b084      	sub	sp, #16
 8025142:	af00      	add	r7, sp, #0
 8025144:	6078      	str	r0, [r7, #4]
 8025146:	460b      	mov	r3, r1
 8025148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 802514a:	2300      	movs	r3, #0
 802514c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025154:	2b01      	cmp	r3, #1
 8025156:	d101      	bne.n	802515c <HAL_HCD_HC_Halt+0x1e>
 8025158:	2302      	movs	r3, #2
 802515a:	e00f      	b.n	802517c <HAL_HCD_HC_Halt+0x3e>
 802515c:	687b      	ldr	r3, [r7, #4]
 802515e:	2201      	movs	r2, #1
 8025160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025164:	687b      	ldr	r3, [r7, #4]
 8025166:	681b      	ldr	r3, [r3, #0]
 8025168:	78fa      	ldrb	r2, [r7, #3]
 802516a:	4611      	mov	r1, r2
 802516c:	4618      	mov	r0, r3
 802516e:	f005 fde4 	bl	802ad3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8025172:	687b      	ldr	r3, [r7, #4]
 8025174:	2200      	movs	r2, #0
 8025176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 802517a:	7bfb      	ldrb	r3, [r7, #15]
}
 802517c:	4618      	mov	r0, r3
 802517e:	3710      	adds	r7, #16
 8025180:	46bd      	mov	sp, r7
 8025182:	bd80      	pop	{r7, pc}

08025184 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8025184:	b580      	push	{r7, lr}
 8025186:	b082      	sub	sp, #8
 8025188:	af00      	add	r7, sp, #0
 802518a:	6078      	str	r0, [r7, #4]
 802518c:	4608      	mov	r0, r1
 802518e:	4611      	mov	r1, r2
 8025190:	461a      	mov	r2, r3
 8025192:	4603      	mov	r3, r0
 8025194:	70fb      	strb	r3, [r7, #3]
 8025196:	460b      	mov	r3, r1
 8025198:	70bb      	strb	r3, [r7, #2]
 802519a:	4613      	mov	r3, r2
 802519c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 802519e:	78fb      	ldrb	r3, [r7, #3]
 80251a0:	687a      	ldr	r2, [r7, #4]
 80251a2:	212c      	movs	r1, #44	; 0x2c
 80251a4:	fb01 f303 	mul.w	r3, r1, r3
 80251a8:	4413      	add	r3, r2
 80251aa:	333b      	adds	r3, #59	; 0x3b
 80251ac:	78ba      	ldrb	r2, [r7, #2]
 80251ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80251b0:	78fb      	ldrb	r3, [r7, #3]
 80251b2:	687a      	ldr	r2, [r7, #4]
 80251b4:	212c      	movs	r1, #44	; 0x2c
 80251b6:	fb01 f303 	mul.w	r3, r1, r3
 80251ba:	4413      	add	r3, r2
 80251bc:	333f      	adds	r3, #63	; 0x3f
 80251be:	787a      	ldrb	r2, [r7, #1]
 80251c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80251c2:	7c3b      	ldrb	r3, [r7, #16]
 80251c4:	2b00      	cmp	r3, #0
 80251c6:	d112      	bne.n	80251ee <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80251c8:	78fb      	ldrb	r3, [r7, #3]
 80251ca:	687a      	ldr	r2, [r7, #4]
 80251cc:	212c      	movs	r1, #44	; 0x2c
 80251ce:	fb01 f303 	mul.w	r3, r1, r3
 80251d2:	4413      	add	r3, r2
 80251d4:	3342      	adds	r3, #66	; 0x42
 80251d6:	2203      	movs	r2, #3
 80251d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80251da:	78fb      	ldrb	r3, [r7, #3]
 80251dc:	687a      	ldr	r2, [r7, #4]
 80251de:	212c      	movs	r1, #44	; 0x2c
 80251e0:	fb01 f303 	mul.w	r3, r1, r3
 80251e4:	4413      	add	r3, r2
 80251e6:	333d      	adds	r3, #61	; 0x3d
 80251e8:	7f3a      	ldrb	r2, [r7, #28]
 80251ea:	701a      	strb	r2, [r3, #0]
 80251ec:	e008      	b.n	8025200 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80251ee:	78fb      	ldrb	r3, [r7, #3]
 80251f0:	687a      	ldr	r2, [r7, #4]
 80251f2:	212c      	movs	r1, #44	; 0x2c
 80251f4:	fb01 f303 	mul.w	r3, r1, r3
 80251f8:	4413      	add	r3, r2
 80251fa:	3342      	adds	r3, #66	; 0x42
 80251fc:	2202      	movs	r2, #2
 80251fe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8025200:	787b      	ldrb	r3, [r7, #1]
 8025202:	2b03      	cmp	r3, #3
 8025204:	f200 80c6 	bhi.w	8025394 <HAL_HCD_HC_SubmitRequest+0x210>
 8025208:	a201      	add	r2, pc, #4	; (adr r2, 8025210 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802520e:	bf00      	nop
 8025210:	08025221 	.word	0x08025221
 8025214:	08025381 	.word	0x08025381
 8025218:	08025285 	.word	0x08025285
 802521c:	08025303 	.word	0x08025303
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8025220:	7c3b      	ldrb	r3, [r7, #16]
 8025222:	2b01      	cmp	r3, #1
 8025224:	f040 80b8 	bne.w	8025398 <HAL_HCD_HC_SubmitRequest+0x214>
 8025228:	78bb      	ldrb	r3, [r7, #2]
 802522a:	2b00      	cmp	r3, #0
 802522c:	f040 80b4 	bne.w	8025398 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8025230:	8b3b      	ldrh	r3, [r7, #24]
 8025232:	2b00      	cmp	r3, #0
 8025234:	d108      	bne.n	8025248 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8025236:	78fb      	ldrb	r3, [r7, #3]
 8025238:	687a      	ldr	r2, [r7, #4]
 802523a:	212c      	movs	r1, #44	; 0x2c
 802523c:	fb01 f303 	mul.w	r3, r1, r3
 8025240:	4413      	add	r3, r2
 8025242:	3355      	adds	r3, #85	; 0x55
 8025244:	2201      	movs	r2, #1
 8025246:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025248:	78fb      	ldrb	r3, [r7, #3]
 802524a:	687a      	ldr	r2, [r7, #4]
 802524c:	212c      	movs	r1, #44	; 0x2c
 802524e:	fb01 f303 	mul.w	r3, r1, r3
 8025252:	4413      	add	r3, r2
 8025254:	3355      	adds	r3, #85	; 0x55
 8025256:	781b      	ldrb	r3, [r3, #0]
 8025258:	2b00      	cmp	r3, #0
 802525a:	d109      	bne.n	8025270 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802525c:	78fb      	ldrb	r3, [r7, #3]
 802525e:	687a      	ldr	r2, [r7, #4]
 8025260:	212c      	movs	r1, #44	; 0x2c
 8025262:	fb01 f303 	mul.w	r3, r1, r3
 8025266:	4413      	add	r3, r2
 8025268:	3342      	adds	r3, #66	; 0x42
 802526a:	2200      	movs	r2, #0
 802526c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802526e:	e093      	b.n	8025398 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025270:	78fb      	ldrb	r3, [r7, #3]
 8025272:	687a      	ldr	r2, [r7, #4]
 8025274:	212c      	movs	r1, #44	; 0x2c
 8025276:	fb01 f303 	mul.w	r3, r1, r3
 802527a:	4413      	add	r3, r2
 802527c:	3342      	adds	r3, #66	; 0x42
 802527e:	2202      	movs	r2, #2
 8025280:	701a      	strb	r2, [r3, #0]
      break;
 8025282:	e089      	b.n	8025398 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8025284:	78bb      	ldrb	r3, [r7, #2]
 8025286:	2b00      	cmp	r3, #0
 8025288:	d11d      	bne.n	80252c6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802528a:	78fb      	ldrb	r3, [r7, #3]
 802528c:	687a      	ldr	r2, [r7, #4]
 802528e:	212c      	movs	r1, #44	; 0x2c
 8025290:	fb01 f303 	mul.w	r3, r1, r3
 8025294:	4413      	add	r3, r2
 8025296:	3355      	adds	r3, #85	; 0x55
 8025298:	781b      	ldrb	r3, [r3, #0]
 802529a:	2b00      	cmp	r3, #0
 802529c:	d109      	bne.n	80252b2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802529e:	78fb      	ldrb	r3, [r7, #3]
 80252a0:	687a      	ldr	r2, [r7, #4]
 80252a2:	212c      	movs	r1, #44	; 0x2c
 80252a4:	fb01 f303 	mul.w	r3, r1, r3
 80252a8:	4413      	add	r3, r2
 80252aa:	3342      	adds	r3, #66	; 0x42
 80252ac:	2200      	movs	r2, #0
 80252ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80252b0:	e073      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80252b2:	78fb      	ldrb	r3, [r7, #3]
 80252b4:	687a      	ldr	r2, [r7, #4]
 80252b6:	212c      	movs	r1, #44	; 0x2c
 80252b8:	fb01 f303 	mul.w	r3, r1, r3
 80252bc:	4413      	add	r3, r2
 80252be:	3342      	adds	r3, #66	; 0x42
 80252c0:	2202      	movs	r2, #2
 80252c2:	701a      	strb	r2, [r3, #0]
      break;
 80252c4:	e069      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80252c6:	78fb      	ldrb	r3, [r7, #3]
 80252c8:	687a      	ldr	r2, [r7, #4]
 80252ca:	212c      	movs	r1, #44	; 0x2c
 80252cc:	fb01 f303 	mul.w	r3, r1, r3
 80252d0:	4413      	add	r3, r2
 80252d2:	3354      	adds	r3, #84	; 0x54
 80252d4:	781b      	ldrb	r3, [r3, #0]
 80252d6:	2b00      	cmp	r3, #0
 80252d8:	d109      	bne.n	80252ee <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80252da:	78fb      	ldrb	r3, [r7, #3]
 80252dc:	687a      	ldr	r2, [r7, #4]
 80252de:	212c      	movs	r1, #44	; 0x2c
 80252e0:	fb01 f303 	mul.w	r3, r1, r3
 80252e4:	4413      	add	r3, r2
 80252e6:	3342      	adds	r3, #66	; 0x42
 80252e8:	2200      	movs	r2, #0
 80252ea:	701a      	strb	r2, [r3, #0]
      break;
 80252ec:	e055      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80252ee:	78fb      	ldrb	r3, [r7, #3]
 80252f0:	687a      	ldr	r2, [r7, #4]
 80252f2:	212c      	movs	r1, #44	; 0x2c
 80252f4:	fb01 f303 	mul.w	r3, r1, r3
 80252f8:	4413      	add	r3, r2
 80252fa:	3342      	adds	r3, #66	; 0x42
 80252fc:	2202      	movs	r2, #2
 80252fe:	701a      	strb	r2, [r3, #0]
      break;
 8025300:	e04b      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8025302:	78bb      	ldrb	r3, [r7, #2]
 8025304:	2b00      	cmp	r3, #0
 8025306:	d11d      	bne.n	8025344 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025308:	78fb      	ldrb	r3, [r7, #3]
 802530a:	687a      	ldr	r2, [r7, #4]
 802530c:	212c      	movs	r1, #44	; 0x2c
 802530e:	fb01 f303 	mul.w	r3, r1, r3
 8025312:	4413      	add	r3, r2
 8025314:	3355      	adds	r3, #85	; 0x55
 8025316:	781b      	ldrb	r3, [r3, #0]
 8025318:	2b00      	cmp	r3, #0
 802531a:	d109      	bne.n	8025330 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802531c:	78fb      	ldrb	r3, [r7, #3]
 802531e:	687a      	ldr	r2, [r7, #4]
 8025320:	212c      	movs	r1, #44	; 0x2c
 8025322:	fb01 f303 	mul.w	r3, r1, r3
 8025326:	4413      	add	r3, r2
 8025328:	3342      	adds	r3, #66	; 0x42
 802532a:	2200      	movs	r2, #0
 802532c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802532e:	e034      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025330:	78fb      	ldrb	r3, [r7, #3]
 8025332:	687a      	ldr	r2, [r7, #4]
 8025334:	212c      	movs	r1, #44	; 0x2c
 8025336:	fb01 f303 	mul.w	r3, r1, r3
 802533a:	4413      	add	r3, r2
 802533c:	3342      	adds	r3, #66	; 0x42
 802533e:	2202      	movs	r2, #2
 8025340:	701a      	strb	r2, [r3, #0]
      break;
 8025342:	e02a      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025344:	78fb      	ldrb	r3, [r7, #3]
 8025346:	687a      	ldr	r2, [r7, #4]
 8025348:	212c      	movs	r1, #44	; 0x2c
 802534a:	fb01 f303 	mul.w	r3, r1, r3
 802534e:	4413      	add	r3, r2
 8025350:	3354      	adds	r3, #84	; 0x54
 8025352:	781b      	ldrb	r3, [r3, #0]
 8025354:	2b00      	cmp	r3, #0
 8025356:	d109      	bne.n	802536c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025358:	78fb      	ldrb	r3, [r7, #3]
 802535a:	687a      	ldr	r2, [r7, #4]
 802535c:	212c      	movs	r1, #44	; 0x2c
 802535e:	fb01 f303 	mul.w	r3, r1, r3
 8025362:	4413      	add	r3, r2
 8025364:	3342      	adds	r3, #66	; 0x42
 8025366:	2200      	movs	r2, #0
 8025368:	701a      	strb	r2, [r3, #0]
      break;
 802536a:	e016      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802536c:	78fb      	ldrb	r3, [r7, #3]
 802536e:	687a      	ldr	r2, [r7, #4]
 8025370:	212c      	movs	r1, #44	; 0x2c
 8025372:	fb01 f303 	mul.w	r3, r1, r3
 8025376:	4413      	add	r3, r2
 8025378:	3342      	adds	r3, #66	; 0x42
 802537a:	2202      	movs	r2, #2
 802537c:	701a      	strb	r2, [r3, #0]
      break;
 802537e:	e00c      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025380:	78fb      	ldrb	r3, [r7, #3]
 8025382:	687a      	ldr	r2, [r7, #4]
 8025384:	212c      	movs	r1, #44	; 0x2c
 8025386:	fb01 f303 	mul.w	r3, r1, r3
 802538a:	4413      	add	r3, r2
 802538c:	3342      	adds	r3, #66	; 0x42
 802538e:	2200      	movs	r2, #0
 8025390:	701a      	strb	r2, [r3, #0]
      break;
 8025392:	e002      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8025394:	bf00      	nop
 8025396:	e000      	b.n	802539a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8025398:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 802539a:	78fb      	ldrb	r3, [r7, #3]
 802539c:	687a      	ldr	r2, [r7, #4]
 802539e:	212c      	movs	r1, #44	; 0x2c
 80253a0:	fb01 f303 	mul.w	r3, r1, r3
 80253a4:	4413      	add	r3, r2
 80253a6:	3344      	adds	r3, #68	; 0x44
 80253a8:	697a      	ldr	r2, [r7, #20]
 80253aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80253ac:	78fb      	ldrb	r3, [r7, #3]
 80253ae:	8b3a      	ldrh	r2, [r7, #24]
 80253b0:	6879      	ldr	r1, [r7, #4]
 80253b2:	202c      	movs	r0, #44	; 0x2c
 80253b4:	fb00 f303 	mul.w	r3, r0, r3
 80253b8:	440b      	add	r3, r1
 80253ba:	334c      	adds	r3, #76	; 0x4c
 80253bc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80253be:	78fb      	ldrb	r3, [r7, #3]
 80253c0:	687a      	ldr	r2, [r7, #4]
 80253c2:	212c      	movs	r1, #44	; 0x2c
 80253c4:	fb01 f303 	mul.w	r3, r1, r3
 80253c8:	4413      	add	r3, r2
 80253ca:	3360      	adds	r3, #96	; 0x60
 80253cc:	2200      	movs	r2, #0
 80253ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80253d0:	78fb      	ldrb	r3, [r7, #3]
 80253d2:	687a      	ldr	r2, [r7, #4]
 80253d4:	212c      	movs	r1, #44	; 0x2c
 80253d6:	fb01 f303 	mul.w	r3, r1, r3
 80253da:	4413      	add	r3, r2
 80253dc:	3350      	adds	r3, #80	; 0x50
 80253de:	2200      	movs	r2, #0
 80253e0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80253e2:	78fb      	ldrb	r3, [r7, #3]
 80253e4:	687a      	ldr	r2, [r7, #4]
 80253e6:	212c      	movs	r1, #44	; 0x2c
 80253e8:	fb01 f303 	mul.w	r3, r1, r3
 80253ec:	4413      	add	r3, r2
 80253ee:	3339      	adds	r3, #57	; 0x39
 80253f0:	78fa      	ldrb	r2, [r7, #3]
 80253f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80253f4:	78fb      	ldrb	r3, [r7, #3]
 80253f6:	687a      	ldr	r2, [r7, #4]
 80253f8:	212c      	movs	r1, #44	; 0x2c
 80253fa:	fb01 f303 	mul.w	r3, r1, r3
 80253fe:	4413      	add	r3, r2
 8025400:	3361      	adds	r3, #97	; 0x61
 8025402:	2200      	movs	r2, #0
 8025404:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	6818      	ldr	r0, [r3, #0]
 802540a:	78fb      	ldrb	r3, [r7, #3]
 802540c:	222c      	movs	r2, #44	; 0x2c
 802540e:	fb02 f303 	mul.w	r3, r2, r3
 8025412:	3338      	adds	r3, #56	; 0x38
 8025414:	687a      	ldr	r2, [r7, #4]
 8025416:	18d1      	adds	r1, r2, r3
 8025418:	687b      	ldr	r3, [r7, #4]
 802541a:	691b      	ldr	r3, [r3, #16]
 802541c:	b2db      	uxtb	r3, r3
 802541e:	461a      	mov	r2, r3
 8025420:	f005 fb38 	bl	802aa94 <USB_HC_StartXfer>
 8025424:	4603      	mov	r3, r0
}
 8025426:	4618      	mov	r0, r3
 8025428:	3708      	adds	r7, #8
 802542a:	46bd      	mov	sp, r7
 802542c:	bd80      	pop	{r7, pc}
 802542e:	bf00      	nop

08025430 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025430:	b580      	push	{r7, lr}
 8025432:	b086      	sub	sp, #24
 8025434:	af00      	add	r7, sp, #0
 8025436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025438:	687b      	ldr	r3, [r7, #4]
 802543a:	681b      	ldr	r3, [r3, #0]
 802543c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802543e:	693b      	ldr	r3, [r7, #16]
 8025440:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	681b      	ldr	r3, [r3, #0]
 8025446:	4618      	mov	r0, r3
 8025448:	f005 f839 	bl	802a4be <USB_GetMode>
 802544c:	4603      	mov	r3, r0
 802544e:	2b01      	cmp	r3, #1
 8025450:	f040 80f6 	bne.w	8025640 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	681b      	ldr	r3, [r3, #0]
 8025458:	4618      	mov	r0, r3
 802545a:	f005 f81d 	bl	802a498 <USB_ReadInterrupts>
 802545e:	4603      	mov	r3, r0
 8025460:	2b00      	cmp	r3, #0
 8025462:	f000 80ec 	beq.w	802563e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	681b      	ldr	r3, [r3, #0]
 802546a:	4618      	mov	r0, r3
 802546c:	f005 f814 	bl	802a498 <USB_ReadInterrupts>
 8025470:	4603      	mov	r3, r0
 8025472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802547a:	d104      	bne.n	8025486 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 802547c:	687b      	ldr	r3, [r7, #4]
 802547e:	681b      	ldr	r3, [r3, #0]
 8025480:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	681b      	ldr	r3, [r3, #0]
 802548a:	4618      	mov	r0, r3
 802548c:	f005 f804 	bl	802a498 <USB_ReadInterrupts>
 8025490:	4603      	mov	r3, r0
 8025492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802549a:	d104      	bne.n	80254a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 802549c:	687b      	ldr	r3, [r7, #4]
 802549e:	681b      	ldr	r3, [r3, #0]
 80254a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80254a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80254a6:	687b      	ldr	r3, [r7, #4]
 80254a8:	681b      	ldr	r3, [r3, #0]
 80254aa:	4618      	mov	r0, r3
 80254ac:	f004 fff4 	bl	802a498 <USB_ReadInterrupts>
 80254b0:	4603      	mov	r3, r0
 80254b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80254b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80254ba:	d104      	bne.n	80254c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80254bc:	687b      	ldr	r3, [r7, #4]
 80254be:	681b      	ldr	r3, [r3, #0]
 80254c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80254c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80254c6:	687b      	ldr	r3, [r7, #4]
 80254c8:	681b      	ldr	r3, [r3, #0]
 80254ca:	4618      	mov	r0, r3
 80254cc:	f004 ffe4 	bl	802a498 <USB_ReadInterrupts>
 80254d0:	4603      	mov	r3, r0
 80254d2:	f003 0302 	and.w	r3, r3, #2
 80254d6:	2b02      	cmp	r3, #2
 80254d8:	d103      	bne.n	80254e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	681b      	ldr	r3, [r3, #0]
 80254de:	2202      	movs	r2, #2
 80254e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80254e2:	687b      	ldr	r3, [r7, #4]
 80254e4:	681b      	ldr	r3, [r3, #0]
 80254e6:	4618      	mov	r0, r3
 80254e8:	f004 ffd6 	bl	802a498 <USB_ReadInterrupts>
 80254ec:	4603      	mov	r3, r0
 80254ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80254f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80254f6:	d11c      	bne.n	8025532 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	681b      	ldr	r3, [r3, #0]
 80254fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8025500:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8025502:	68fb      	ldr	r3, [r7, #12]
 8025504:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025508:	681b      	ldr	r3, [r3, #0]
 802550a:	f003 0301 	and.w	r3, r3, #1
 802550e:	2b00      	cmp	r3, #0
 8025510:	d10f      	bne.n	8025532 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8025512:	2110      	movs	r1, #16
 8025514:	6938      	ldr	r0, [r7, #16]
 8025516:	f004 fec5 	bl	802a2a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 802551a:	6938      	ldr	r0, [r7, #16]
 802551c:	f004 fef6 	bl	802a30c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	681b      	ldr	r3, [r3, #0]
 8025524:	2101      	movs	r1, #1
 8025526:	4618      	mov	r0, r3
 8025528:	f005 f8cc 	bl	802a6c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 802552c:	6878      	ldr	r0, [r7, #4]
 802552e:	f007 fe95 	bl	802d25c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8025532:	687b      	ldr	r3, [r7, #4]
 8025534:	681b      	ldr	r3, [r3, #0]
 8025536:	4618      	mov	r0, r3
 8025538:	f004 ffae 	bl	802a498 <USB_ReadInterrupts>
 802553c:	4603      	mov	r3, r0
 802553e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8025542:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8025546:	d102      	bne.n	802554e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8025548:	6878      	ldr	r0, [r7, #4]
 802554a:	f001 f89e 	bl	802668a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 802554e:	687b      	ldr	r3, [r7, #4]
 8025550:	681b      	ldr	r3, [r3, #0]
 8025552:	4618      	mov	r0, r3
 8025554:	f004 ffa0 	bl	802a498 <USB_ReadInterrupts>
 8025558:	4603      	mov	r3, r0
 802555a:	f003 0308 	and.w	r3, r3, #8
 802555e:	2b08      	cmp	r3, #8
 8025560:	d106      	bne.n	8025570 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8025562:	6878      	ldr	r0, [r7, #4]
 8025564:	f007 fe5e 	bl	802d224 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8025568:	687b      	ldr	r3, [r7, #4]
 802556a:	681b      	ldr	r3, [r3, #0]
 802556c:	2208      	movs	r2, #8
 802556e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8025570:	687b      	ldr	r3, [r7, #4]
 8025572:	681b      	ldr	r3, [r3, #0]
 8025574:	4618      	mov	r0, r3
 8025576:	f004 ff8f 	bl	802a498 <USB_ReadInterrupts>
 802557a:	4603      	mov	r3, r0
 802557c:	f003 0310 	and.w	r3, r3, #16
 8025580:	2b10      	cmp	r3, #16
 8025582:	d101      	bne.n	8025588 <HAL_HCD_IRQHandler+0x158>
 8025584:	2301      	movs	r3, #1
 8025586:	e000      	b.n	802558a <HAL_HCD_IRQHandler+0x15a>
 8025588:	2300      	movs	r3, #0
 802558a:	2b00      	cmp	r3, #0
 802558c:	d012      	beq.n	80255b4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 802558e:	687b      	ldr	r3, [r7, #4]
 8025590:	681b      	ldr	r3, [r3, #0]
 8025592:	699a      	ldr	r2, [r3, #24]
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	681b      	ldr	r3, [r3, #0]
 8025598:	f022 0210 	bic.w	r2, r2, #16
 802559c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 802559e:	6878      	ldr	r0, [r7, #4]
 80255a0:	f000 ffa1 	bl	80264e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	699a      	ldr	r2, [r3, #24]
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	681b      	ldr	r3, [r3, #0]
 80255ae:	f042 0210 	orr.w	r2, r2, #16
 80255b2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	4618      	mov	r0, r3
 80255ba:	f004 ff6d 	bl	802a498 <USB_ReadInterrupts>
 80255be:	4603      	mov	r3, r0
 80255c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80255c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80255c8:	d13a      	bne.n	8025640 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	681b      	ldr	r3, [r3, #0]
 80255ce:	4618      	mov	r0, r3
 80255d0:	f005 fba2 	bl	802ad18 <USB_HC_ReadInterrupt>
 80255d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80255d6:	2300      	movs	r3, #0
 80255d8:	617b      	str	r3, [r7, #20]
 80255da:	e025      	b.n	8025628 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80255dc:	697b      	ldr	r3, [r7, #20]
 80255de:	f003 030f 	and.w	r3, r3, #15
 80255e2:	68ba      	ldr	r2, [r7, #8]
 80255e4:	fa22 f303 	lsr.w	r3, r2, r3
 80255e8:	f003 0301 	and.w	r3, r3, #1
 80255ec:	2b00      	cmp	r3, #0
 80255ee:	d018      	beq.n	8025622 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80255f0:	697b      	ldr	r3, [r7, #20]
 80255f2:	015a      	lsls	r2, r3, #5
 80255f4:	68fb      	ldr	r3, [r7, #12]
 80255f6:	4413      	add	r3, r2
 80255f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80255fc:	681b      	ldr	r3, [r3, #0]
 80255fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025606:	d106      	bne.n	8025616 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8025608:	697b      	ldr	r3, [r7, #20]
 802560a:	b2db      	uxtb	r3, r3
 802560c:	4619      	mov	r1, r3
 802560e:	6878      	ldr	r0, [r7, #4]
 8025610:	f000 f8ab 	bl	802576a <HCD_HC_IN_IRQHandler>
 8025614:	e005      	b.n	8025622 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8025616:	697b      	ldr	r3, [r7, #20]
 8025618:	b2db      	uxtb	r3, r3
 802561a:	4619      	mov	r1, r3
 802561c:	6878      	ldr	r0, [r7, #4]
 802561e:	f000 fbf9 	bl	8025e14 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025622:	697b      	ldr	r3, [r7, #20]
 8025624:	3301      	adds	r3, #1
 8025626:	617b      	str	r3, [r7, #20]
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	689b      	ldr	r3, [r3, #8]
 802562c:	697a      	ldr	r2, [r7, #20]
 802562e:	429a      	cmp	r2, r3
 8025630:	d3d4      	bcc.n	80255dc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8025632:	687b      	ldr	r3, [r7, #4]
 8025634:	681b      	ldr	r3, [r3, #0]
 8025636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802563a:	615a      	str	r2, [r3, #20]
 802563c:	e000      	b.n	8025640 <HAL_HCD_IRQHandler+0x210>
      return;
 802563e:	bf00      	nop
    }
  }
}
 8025640:	3718      	adds	r7, #24
 8025642:	46bd      	mov	sp, r7
 8025644:	bd80      	pop	{r7, pc}

08025646 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8025646:	b580      	push	{r7, lr}
 8025648:	b082      	sub	sp, #8
 802564a:	af00      	add	r7, sp, #0
 802564c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 802564e:	687b      	ldr	r3, [r7, #4]
 8025650:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8025654:	2b01      	cmp	r3, #1
 8025656:	d101      	bne.n	802565c <HAL_HCD_Start+0x16>
 8025658:	2302      	movs	r3, #2
 802565a:	e013      	b.n	8025684 <HAL_HCD_Start+0x3e>
 802565c:	687b      	ldr	r3, [r7, #4]
 802565e:	2201      	movs	r2, #1
 8025660:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8025664:	687b      	ldr	r3, [r7, #4]
 8025666:	681b      	ldr	r3, [r3, #0]
 8025668:	2101      	movs	r1, #1
 802566a:	4618      	mov	r0, r3
 802566c:	f005 f88e 	bl	802a78c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8025670:	687b      	ldr	r3, [r7, #4]
 8025672:	681b      	ldr	r3, [r3, #0]
 8025674:	4618      	mov	r0, r3
 8025676:	f004 fda6 	bl	802a1c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 802567a:	687b      	ldr	r3, [r7, #4]
 802567c:	2200      	movs	r2, #0
 802567e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025682:	2300      	movs	r3, #0
}
 8025684:	4618      	mov	r0, r3
 8025686:	3708      	adds	r7, #8
 8025688:	46bd      	mov	sp, r7
 802568a:	bd80      	pop	{r7, pc}

0802568c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 802568c:	b580      	push	{r7, lr}
 802568e:	b082      	sub	sp, #8
 8025690:	af00      	add	r7, sp, #0
 8025692:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025694:	687b      	ldr	r3, [r7, #4]
 8025696:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802569a:	2b01      	cmp	r3, #1
 802569c:	d101      	bne.n	80256a2 <HAL_HCD_Stop+0x16>
 802569e:	2302      	movs	r3, #2
 80256a0:	e00d      	b.n	80256be <HAL_HCD_Stop+0x32>
 80256a2:	687b      	ldr	r3, [r7, #4]
 80256a4:	2201      	movs	r2, #1
 80256a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	681b      	ldr	r3, [r3, #0]
 80256ae:	4618      	mov	r0, r3
 80256b0:	f005 fc7c 	bl	802afac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80256b4:	687b      	ldr	r3, [r7, #4]
 80256b6:	2200      	movs	r2, #0
 80256b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80256bc:	2300      	movs	r3, #0
}
 80256be:	4618      	mov	r0, r3
 80256c0:	3708      	adds	r7, #8
 80256c2:	46bd      	mov	sp, r7
 80256c4:	bd80      	pop	{r7, pc}

080256c6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80256c6:	b580      	push	{r7, lr}
 80256c8:	b082      	sub	sp, #8
 80256ca:	af00      	add	r7, sp, #0
 80256cc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80256ce:	687b      	ldr	r3, [r7, #4]
 80256d0:	681b      	ldr	r3, [r3, #0]
 80256d2:	4618      	mov	r0, r3
 80256d4:	f005 f830 	bl	802a738 <USB_ResetPort>
 80256d8:	4603      	mov	r3, r0
}
 80256da:	4618      	mov	r0, r3
 80256dc:	3708      	adds	r7, #8
 80256de:	46bd      	mov	sp, r7
 80256e0:	bd80      	pop	{r7, pc}

080256e2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80256e2:	b480      	push	{r7}
 80256e4:	b083      	sub	sp, #12
 80256e6:	af00      	add	r7, sp, #0
 80256e8:	6078      	str	r0, [r7, #4]
 80256ea:	460b      	mov	r3, r1
 80256ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80256ee:	78fb      	ldrb	r3, [r7, #3]
 80256f0:	687a      	ldr	r2, [r7, #4]
 80256f2:	212c      	movs	r1, #44	; 0x2c
 80256f4:	fb01 f303 	mul.w	r3, r1, r3
 80256f8:	4413      	add	r3, r2
 80256fa:	3360      	adds	r3, #96	; 0x60
 80256fc:	781b      	ldrb	r3, [r3, #0]
}
 80256fe:	4618      	mov	r0, r3
 8025700:	370c      	adds	r7, #12
 8025702:	46bd      	mov	sp, r7
 8025704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025708:	4770      	bx	lr

0802570a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802570a:	b480      	push	{r7}
 802570c:	b083      	sub	sp, #12
 802570e:	af00      	add	r7, sp, #0
 8025710:	6078      	str	r0, [r7, #4]
 8025712:	460b      	mov	r3, r1
 8025714:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8025716:	78fb      	ldrb	r3, [r7, #3]
 8025718:	687a      	ldr	r2, [r7, #4]
 802571a:	212c      	movs	r1, #44	; 0x2c
 802571c:	fb01 f303 	mul.w	r3, r1, r3
 8025720:	4413      	add	r3, r2
 8025722:	3350      	adds	r3, #80	; 0x50
 8025724:	681b      	ldr	r3, [r3, #0]
}
 8025726:	4618      	mov	r0, r3
 8025728:	370c      	adds	r7, #12
 802572a:	46bd      	mov	sp, r7
 802572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025730:	4770      	bx	lr

08025732 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8025732:	b580      	push	{r7, lr}
 8025734:	b082      	sub	sp, #8
 8025736:	af00      	add	r7, sp, #0
 8025738:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 802573a:	687b      	ldr	r3, [r7, #4]
 802573c:	681b      	ldr	r3, [r3, #0]
 802573e:	4618      	mov	r0, r3
 8025740:	f005 f874 	bl	802a82c <USB_GetCurrentFrame>
 8025744:	4603      	mov	r3, r0
}
 8025746:	4618      	mov	r0, r3
 8025748:	3708      	adds	r7, #8
 802574a:	46bd      	mov	sp, r7
 802574c:	bd80      	pop	{r7, pc}

0802574e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 802574e:	b580      	push	{r7, lr}
 8025750:	b082      	sub	sp, #8
 8025752:	af00      	add	r7, sp, #0
 8025754:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8025756:	687b      	ldr	r3, [r7, #4]
 8025758:	681b      	ldr	r3, [r3, #0]
 802575a:	4618      	mov	r0, r3
 802575c:	f005 f84f 	bl	802a7fe <USB_GetHostSpeed>
 8025760:	4603      	mov	r3, r0
}
 8025762:	4618      	mov	r0, r3
 8025764:	3708      	adds	r7, #8
 8025766:	46bd      	mov	sp, r7
 8025768:	bd80      	pop	{r7, pc}

0802576a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802576a:	b580      	push	{r7, lr}
 802576c:	b086      	sub	sp, #24
 802576e:	af00      	add	r7, sp, #0
 8025770:	6078      	str	r0, [r7, #4]
 8025772:	460b      	mov	r3, r1
 8025774:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025776:	687b      	ldr	r3, [r7, #4]
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802577c:	697b      	ldr	r3, [r7, #20]
 802577e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025780:	78fb      	ldrb	r3, [r7, #3]
 8025782:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025784:	68fb      	ldr	r3, [r7, #12]
 8025786:	015a      	lsls	r2, r3, #5
 8025788:	693b      	ldr	r3, [r7, #16]
 802578a:	4413      	add	r3, r2
 802578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025790:	689b      	ldr	r3, [r3, #8]
 8025792:	f003 0304 	and.w	r3, r3, #4
 8025796:	2b04      	cmp	r3, #4
 8025798:	d11a      	bne.n	80257d0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 802579a:	68fb      	ldr	r3, [r7, #12]
 802579c:	015a      	lsls	r2, r3, #5
 802579e:	693b      	ldr	r3, [r7, #16]
 80257a0:	4413      	add	r3, r2
 80257a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257a6:	461a      	mov	r2, r3
 80257a8:	2304      	movs	r3, #4
 80257aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80257ac:	687a      	ldr	r2, [r7, #4]
 80257ae:	68fb      	ldr	r3, [r7, #12]
 80257b0:	212c      	movs	r1, #44	; 0x2c
 80257b2:	fb01 f303 	mul.w	r3, r1, r3
 80257b6:	4413      	add	r3, r2
 80257b8:	3361      	adds	r3, #97	; 0x61
 80257ba:	2206      	movs	r2, #6
 80257bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80257be:	687b      	ldr	r3, [r7, #4]
 80257c0:	681b      	ldr	r3, [r3, #0]
 80257c2:	68fa      	ldr	r2, [r7, #12]
 80257c4:	b2d2      	uxtb	r2, r2
 80257c6:	4611      	mov	r1, r2
 80257c8:	4618      	mov	r0, r3
 80257ca:	f005 fab6 	bl	802ad3a <USB_HC_Halt>
 80257ce:	e0af      	b.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80257d0:	68fb      	ldr	r3, [r7, #12]
 80257d2:	015a      	lsls	r2, r3, #5
 80257d4:	693b      	ldr	r3, [r7, #16]
 80257d6:	4413      	add	r3, r2
 80257d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257dc:	689b      	ldr	r3, [r3, #8]
 80257de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80257e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80257e6:	d11b      	bne.n	8025820 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80257e8:	68fb      	ldr	r3, [r7, #12]
 80257ea:	015a      	lsls	r2, r3, #5
 80257ec:	693b      	ldr	r3, [r7, #16]
 80257ee:	4413      	add	r3, r2
 80257f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80257f4:	461a      	mov	r2, r3
 80257f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80257fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80257fc:	687a      	ldr	r2, [r7, #4]
 80257fe:	68fb      	ldr	r3, [r7, #12]
 8025800:	212c      	movs	r1, #44	; 0x2c
 8025802:	fb01 f303 	mul.w	r3, r1, r3
 8025806:	4413      	add	r3, r2
 8025808:	3361      	adds	r3, #97	; 0x61
 802580a:	2207      	movs	r2, #7
 802580c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	68fa      	ldr	r2, [r7, #12]
 8025814:	b2d2      	uxtb	r2, r2
 8025816:	4611      	mov	r1, r2
 8025818:	4618      	mov	r0, r3
 802581a:	f005 fa8e 	bl	802ad3a <USB_HC_Halt>
 802581e:	e087      	b.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025820:	68fb      	ldr	r3, [r7, #12]
 8025822:	015a      	lsls	r2, r3, #5
 8025824:	693b      	ldr	r3, [r7, #16]
 8025826:	4413      	add	r3, r2
 8025828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802582c:	689b      	ldr	r3, [r3, #8]
 802582e:	f003 0320 	and.w	r3, r3, #32
 8025832:	2b20      	cmp	r3, #32
 8025834:	d109      	bne.n	802584a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025836:	68fb      	ldr	r3, [r7, #12]
 8025838:	015a      	lsls	r2, r3, #5
 802583a:	693b      	ldr	r3, [r7, #16]
 802583c:	4413      	add	r3, r2
 802583e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025842:	461a      	mov	r2, r3
 8025844:	2320      	movs	r3, #32
 8025846:	6093      	str	r3, [r2, #8]
 8025848:	e072      	b.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 802584a:	68fb      	ldr	r3, [r7, #12]
 802584c:	015a      	lsls	r2, r3, #5
 802584e:	693b      	ldr	r3, [r7, #16]
 8025850:	4413      	add	r3, r2
 8025852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025856:	689b      	ldr	r3, [r3, #8]
 8025858:	f003 0308 	and.w	r3, r3, #8
 802585c:	2b08      	cmp	r3, #8
 802585e:	d11a      	bne.n	8025896 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8025860:	68fb      	ldr	r3, [r7, #12]
 8025862:	015a      	lsls	r2, r3, #5
 8025864:	693b      	ldr	r3, [r7, #16]
 8025866:	4413      	add	r3, r2
 8025868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802586c:	461a      	mov	r2, r3
 802586e:	2308      	movs	r3, #8
 8025870:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025872:	687a      	ldr	r2, [r7, #4]
 8025874:	68fb      	ldr	r3, [r7, #12]
 8025876:	212c      	movs	r1, #44	; 0x2c
 8025878:	fb01 f303 	mul.w	r3, r1, r3
 802587c:	4413      	add	r3, r2
 802587e:	3361      	adds	r3, #97	; 0x61
 8025880:	2205      	movs	r2, #5
 8025882:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	681b      	ldr	r3, [r3, #0]
 8025888:	68fa      	ldr	r2, [r7, #12]
 802588a:	b2d2      	uxtb	r2, r2
 802588c:	4611      	mov	r1, r2
 802588e:	4618      	mov	r0, r3
 8025890:	f005 fa53 	bl	802ad3a <USB_HC_Halt>
 8025894:	e04c      	b.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8025896:	68fb      	ldr	r3, [r7, #12]
 8025898:	015a      	lsls	r2, r3, #5
 802589a:	693b      	ldr	r3, [r7, #16]
 802589c:	4413      	add	r3, r2
 802589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258a2:	689b      	ldr	r3, [r3, #8]
 80258a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80258a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80258ac:	d11b      	bne.n	80258e6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	015a      	lsls	r2, r3, #5
 80258b2:	693b      	ldr	r3, [r7, #16]
 80258b4:	4413      	add	r3, r2
 80258b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258ba:	461a      	mov	r2, r3
 80258bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80258c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80258c2:	687a      	ldr	r2, [r7, #4]
 80258c4:	68fb      	ldr	r3, [r7, #12]
 80258c6:	212c      	movs	r1, #44	; 0x2c
 80258c8:	fb01 f303 	mul.w	r3, r1, r3
 80258cc:	4413      	add	r3, r2
 80258ce:	3361      	adds	r3, #97	; 0x61
 80258d0:	2208      	movs	r2, #8
 80258d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80258d4:	687b      	ldr	r3, [r7, #4]
 80258d6:	681b      	ldr	r3, [r3, #0]
 80258d8:	68fa      	ldr	r2, [r7, #12]
 80258da:	b2d2      	uxtb	r2, r2
 80258dc:	4611      	mov	r1, r2
 80258de:	4618      	mov	r0, r3
 80258e0:	f005 fa2b 	bl	802ad3a <USB_HC_Halt>
 80258e4:	e024      	b.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80258e6:	68fb      	ldr	r3, [r7, #12]
 80258e8:	015a      	lsls	r2, r3, #5
 80258ea:	693b      	ldr	r3, [r7, #16]
 80258ec:	4413      	add	r3, r2
 80258ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258f2:	689b      	ldr	r3, [r3, #8]
 80258f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80258f8:	2b80      	cmp	r3, #128	; 0x80
 80258fa:	d119      	bne.n	8025930 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80258fc:	68fb      	ldr	r3, [r7, #12]
 80258fe:	015a      	lsls	r2, r3, #5
 8025900:	693b      	ldr	r3, [r7, #16]
 8025902:	4413      	add	r3, r2
 8025904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025908:	461a      	mov	r2, r3
 802590a:	2380      	movs	r3, #128	; 0x80
 802590c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802590e:	687a      	ldr	r2, [r7, #4]
 8025910:	68fb      	ldr	r3, [r7, #12]
 8025912:	212c      	movs	r1, #44	; 0x2c
 8025914:	fb01 f303 	mul.w	r3, r1, r3
 8025918:	4413      	add	r3, r2
 802591a:	3361      	adds	r3, #97	; 0x61
 802591c:	2206      	movs	r2, #6
 802591e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025920:	687b      	ldr	r3, [r7, #4]
 8025922:	681b      	ldr	r3, [r3, #0]
 8025924:	68fa      	ldr	r2, [r7, #12]
 8025926:	b2d2      	uxtb	r2, r2
 8025928:	4611      	mov	r1, r2
 802592a:	4618      	mov	r0, r3
 802592c:	f005 fa05 	bl	802ad3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025930:	68fb      	ldr	r3, [r7, #12]
 8025932:	015a      	lsls	r2, r3, #5
 8025934:	693b      	ldr	r3, [r7, #16]
 8025936:	4413      	add	r3, r2
 8025938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802593c:	689b      	ldr	r3, [r3, #8]
 802593e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025946:	d112      	bne.n	802596e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025948:	687b      	ldr	r3, [r7, #4]
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	68fa      	ldr	r2, [r7, #12]
 802594e:	b2d2      	uxtb	r2, r2
 8025950:	4611      	mov	r1, r2
 8025952:	4618      	mov	r0, r3
 8025954:	f005 f9f1 	bl	802ad3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025958:	68fb      	ldr	r3, [r7, #12]
 802595a:	015a      	lsls	r2, r3, #5
 802595c:	693b      	ldr	r3, [r7, #16]
 802595e:	4413      	add	r3, r2
 8025960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025964:	461a      	mov	r2, r3
 8025966:	f44f 7300 	mov.w	r3, #512	; 0x200
 802596a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 802596c:	e24e      	b.n	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 802596e:	68fb      	ldr	r3, [r7, #12]
 8025970:	015a      	lsls	r2, r3, #5
 8025972:	693b      	ldr	r3, [r7, #16]
 8025974:	4413      	add	r3, r2
 8025976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802597a:	689b      	ldr	r3, [r3, #8]
 802597c:	f003 0301 	and.w	r3, r3, #1
 8025980:	2b01      	cmp	r3, #1
 8025982:	f040 80df 	bne.w	8025b44 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025986:	687b      	ldr	r3, [r7, #4]
 8025988:	691b      	ldr	r3, [r3, #16]
 802598a:	2b00      	cmp	r3, #0
 802598c:	d019      	beq.n	80259c2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 802598e:	687a      	ldr	r2, [r7, #4]
 8025990:	68fb      	ldr	r3, [r7, #12]
 8025992:	212c      	movs	r1, #44	; 0x2c
 8025994:	fb01 f303 	mul.w	r3, r1, r3
 8025998:	4413      	add	r3, r2
 802599a:	3348      	adds	r3, #72	; 0x48
 802599c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 802599e:	68fb      	ldr	r3, [r7, #12]
 80259a0:	0159      	lsls	r1, r3, #5
 80259a2:	693b      	ldr	r3, [r7, #16]
 80259a4:	440b      	add	r3, r1
 80259a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259aa:	691b      	ldr	r3, [r3, #16]
 80259ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80259b0:	1ad2      	subs	r2, r2, r3
 80259b2:	6879      	ldr	r1, [r7, #4]
 80259b4:	68fb      	ldr	r3, [r7, #12]
 80259b6:	202c      	movs	r0, #44	; 0x2c
 80259b8:	fb00 f303 	mul.w	r3, r0, r3
 80259bc:	440b      	add	r3, r1
 80259be:	3350      	adds	r3, #80	; 0x50
 80259c0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80259c2:	687a      	ldr	r2, [r7, #4]
 80259c4:	68fb      	ldr	r3, [r7, #12]
 80259c6:	212c      	movs	r1, #44	; 0x2c
 80259c8:	fb01 f303 	mul.w	r3, r1, r3
 80259cc:	4413      	add	r3, r2
 80259ce:	3361      	adds	r3, #97	; 0x61
 80259d0:	2201      	movs	r2, #1
 80259d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80259d4:	687a      	ldr	r2, [r7, #4]
 80259d6:	68fb      	ldr	r3, [r7, #12]
 80259d8:	212c      	movs	r1, #44	; 0x2c
 80259da:	fb01 f303 	mul.w	r3, r1, r3
 80259de:	4413      	add	r3, r2
 80259e0:	335c      	adds	r3, #92	; 0x5c
 80259e2:	2200      	movs	r2, #0
 80259e4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80259e6:	68fb      	ldr	r3, [r7, #12]
 80259e8:	015a      	lsls	r2, r3, #5
 80259ea:	693b      	ldr	r3, [r7, #16]
 80259ec:	4413      	add	r3, r2
 80259ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259f2:	461a      	mov	r2, r3
 80259f4:	2301      	movs	r3, #1
 80259f6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80259f8:	687a      	ldr	r2, [r7, #4]
 80259fa:	68fb      	ldr	r3, [r7, #12]
 80259fc:	212c      	movs	r1, #44	; 0x2c
 80259fe:	fb01 f303 	mul.w	r3, r1, r3
 8025a02:	4413      	add	r3, r2
 8025a04:	333f      	adds	r3, #63	; 0x3f
 8025a06:	781b      	ldrb	r3, [r3, #0]
 8025a08:	2b00      	cmp	r3, #0
 8025a0a:	d009      	beq.n	8025a20 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025a0c:	687a      	ldr	r2, [r7, #4]
 8025a0e:	68fb      	ldr	r3, [r7, #12]
 8025a10:	212c      	movs	r1, #44	; 0x2c
 8025a12:	fb01 f303 	mul.w	r3, r1, r3
 8025a16:	4413      	add	r3, r2
 8025a18:	333f      	adds	r3, #63	; 0x3f
 8025a1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025a1c:	2b02      	cmp	r3, #2
 8025a1e:	d111      	bne.n	8025a44 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a20:	687b      	ldr	r3, [r7, #4]
 8025a22:	681b      	ldr	r3, [r3, #0]
 8025a24:	68fa      	ldr	r2, [r7, #12]
 8025a26:	b2d2      	uxtb	r2, r2
 8025a28:	4611      	mov	r1, r2
 8025a2a:	4618      	mov	r0, r3
 8025a2c:	f005 f985 	bl	802ad3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025a30:	68fb      	ldr	r3, [r7, #12]
 8025a32:	015a      	lsls	r2, r3, #5
 8025a34:	693b      	ldr	r3, [r7, #16]
 8025a36:	4413      	add	r3, r2
 8025a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a3c:	461a      	mov	r2, r3
 8025a3e:	2310      	movs	r3, #16
 8025a40:	6093      	str	r3, [r2, #8]
 8025a42:	e03a      	b.n	8025aba <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025a44:	687a      	ldr	r2, [r7, #4]
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	212c      	movs	r1, #44	; 0x2c
 8025a4a:	fb01 f303 	mul.w	r3, r1, r3
 8025a4e:	4413      	add	r3, r2
 8025a50:	333f      	adds	r3, #63	; 0x3f
 8025a52:	781b      	ldrb	r3, [r3, #0]
 8025a54:	2b03      	cmp	r3, #3
 8025a56:	d009      	beq.n	8025a6c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025a58:	687a      	ldr	r2, [r7, #4]
 8025a5a:	68fb      	ldr	r3, [r7, #12]
 8025a5c:	212c      	movs	r1, #44	; 0x2c
 8025a5e:	fb01 f303 	mul.w	r3, r1, r3
 8025a62:	4413      	add	r3, r2
 8025a64:	333f      	adds	r3, #63	; 0x3f
 8025a66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025a68:	2b01      	cmp	r3, #1
 8025a6a:	d126      	bne.n	8025aba <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025a6c:	68fb      	ldr	r3, [r7, #12]
 8025a6e:	015a      	lsls	r2, r3, #5
 8025a70:	693b      	ldr	r3, [r7, #16]
 8025a72:	4413      	add	r3, r2
 8025a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a78:	681b      	ldr	r3, [r3, #0]
 8025a7a:	68fa      	ldr	r2, [r7, #12]
 8025a7c:	0151      	lsls	r1, r2, #5
 8025a7e:	693a      	ldr	r2, [r7, #16]
 8025a80:	440a      	add	r2, r1
 8025a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025a86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025a8a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025a8c:	687a      	ldr	r2, [r7, #4]
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	212c      	movs	r1, #44	; 0x2c
 8025a92:	fb01 f303 	mul.w	r3, r1, r3
 8025a96:	4413      	add	r3, r2
 8025a98:	3360      	adds	r3, #96	; 0x60
 8025a9a:	2201      	movs	r2, #1
 8025a9c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025a9e:	68fb      	ldr	r3, [r7, #12]
 8025aa0:	b2d9      	uxtb	r1, r3
 8025aa2:	687a      	ldr	r2, [r7, #4]
 8025aa4:	68fb      	ldr	r3, [r7, #12]
 8025aa6:	202c      	movs	r0, #44	; 0x2c
 8025aa8:	fb00 f303 	mul.w	r3, r0, r3
 8025aac:	4413      	add	r3, r2
 8025aae:	3360      	adds	r3, #96	; 0x60
 8025ab0:	781b      	ldrb	r3, [r3, #0]
 8025ab2:	461a      	mov	r2, r3
 8025ab4:	6878      	ldr	r0, [r7, #4]
 8025ab6:	f007 fbdf 	bl	802d278 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025aba:	687b      	ldr	r3, [r7, #4]
 8025abc:	691b      	ldr	r3, [r3, #16]
 8025abe:	2b01      	cmp	r3, #1
 8025ac0:	d12b      	bne.n	8025b1a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025ac2:	687a      	ldr	r2, [r7, #4]
 8025ac4:	68fb      	ldr	r3, [r7, #12]
 8025ac6:	212c      	movs	r1, #44	; 0x2c
 8025ac8:	fb01 f303 	mul.w	r3, r1, r3
 8025acc:	4413      	add	r3, r2
 8025ace:	3348      	adds	r3, #72	; 0x48
 8025ad0:	681b      	ldr	r3, [r3, #0]
 8025ad2:	6879      	ldr	r1, [r7, #4]
 8025ad4:	68fa      	ldr	r2, [r7, #12]
 8025ad6:	202c      	movs	r0, #44	; 0x2c
 8025ad8:	fb00 f202 	mul.w	r2, r0, r2
 8025adc:	440a      	add	r2, r1
 8025ade:	3240      	adds	r2, #64	; 0x40
 8025ae0:	8812      	ldrh	r2, [r2, #0]
 8025ae2:	fbb3 f3f2 	udiv	r3, r3, r2
 8025ae6:	f003 0301 	and.w	r3, r3, #1
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	f000 818e 	beq.w	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025af0:	687a      	ldr	r2, [r7, #4]
 8025af2:	68fb      	ldr	r3, [r7, #12]
 8025af4:	212c      	movs	r1, #44	; 0x2c
 8025af6:	fb01 f303 	mul.w	r3, r1, r3
 8025afa:	4413      	add	r3, r2
 8025afc:	3354      	adds	r3, #84	; 0x54
 8025afe:	781b      	ldrb	r3, [r3, #0]
 8025b00:	f083 0301 	eor.w	r3, r3, #1
 8025b04:	b2d8      	uxtb	r0, r3
 8025b06:	687a      	ldr	r2, [r7, #4]
 8025b08:	68fb      	ldr	r3, [r7, #12]
 8025b0a:	212c      	movs	r1, #44	; 0x2c
 8025b0c:	fb01 f303 	mul.w	r3, r1, r3
 8025b10:	4413      	add	r3, r2
 8025b12:	3354      	adds	r3, #84	; 0x54
 8025b14:	4602      	mov	r2, r0
 8025b16:	701a      	strb	r2, [r3, #0]
}
 8025b18:	e178      	b.n	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025b1a:	687a      	ldr	r2, [r7, #4]
 8025b1c:	68fb      	ldr	r3, [r7, #12]
 8025b1e:	212c      	movs	r1, #44	; 0x2c
 8025b20:	fb01 f303 	mul.w	r3, r1, r3
 8025b24:	4413      	add	r3, r2
 8025b26:	3354      	adds	r3, #84	; 0x54
 8025b28:	781b      	ldrb	r3, [r3, #0]
 8025b2a:	f083 0301 	eor.w	r3, r3, #1
 8025b2e:	b2d8      	uxtb	r0, r3
 8025b30:	687a      	ldr	r2, [r7, #4]
 8025b32:	68fb      	ldr	r3, [r7, #12]
 8025b34:	212c      	movs	r1, #44	; 0x2c
 8025b36:	fb01 f303 	mul.w	r3, r1, r3
 8025b3a:	4413      	add	r3, r2
 8025b3c:	3354      	adds	r3, #84	; 0x54
 8025b3e:	4602      	mov	r2, r0
 8025b40:	701a      	strb	r2, [r3, #0]
}
 8025b42:	e163      	b.n	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025b44:	68fb      	ldr	r3, [r7, #12]
 8025b46:	015a      	lsls	r2, r3, #5
 8025b48:	693b      	ldr	r3, [r7, #16]
 8025b4a:	4413      	add	r3, r2
 8025b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b50:	689b      	ldr	r3, [r3, #8]
 8025b52:	f003 0302 	and.w	r3, r3, #2
 8025b56:	2b02      	cmp	r3, #2
 8025b58:	f040 80f6 	bne.w	8025d48 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025b5c:	687a      	ldr	r2, [r7, #4]
 8025b5e:	68fb      	ldr	r3, [r7, #12]
 8025b60:	212c      	movs	r1, #44	; 0x2c
 8025b62:	fb01 f303 	mul.w	r3, r1, r3
 8025b66:	4413      	add	r3, r2
 8025b68:	3361      	adds	r3, #97	; 0x61
 8025b6a:	781b      	ldrb	r3, [r3, #0]
 8025b6c:	2b01      	cmp	r3, #1
 8025b6e:	d109      	bne.n	8025b84 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025b70:	687a      	ldr	r2, [r7, #4]
 8025b72:	68fb      	ldr	r3, [r7, #12]
 8025b74:	212c      	movs	r1, #44	; 0x2c
 8025b76:	fb01 f303 	mul.w	r3, r1, r3
 8025b7a:	4413      	add	r3, r2
 8025b7c:	3360      	adds	r3, #96	; 0x60
 8025b7e:	2201      	movs	r2, #1
 8025b80:	701a      	strb	r2, [r3, #0]
 8025b82:	e0c9      	b.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025b84:	687a      	ldr	r2, [r7, #4]
 8025b86:	68fb      	ldr	r3, [r7, #12]
 8025b88:	212c      	movs	r1, #44	; 0x2c
 8025b8a:	fb01 f303 	mul.w	r3, r1, r3
 8025b8e:	4413      	add	r3, r2
 8025b90:	3361      	adds	r3, #97	; 0x61
 8025b92:	781b      	ldrb	r3, [r3, #0]
 8025b94:	2b05      	cmp	r3, #5
 8025b96:	d109      	bne.n	8025bac <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025b98:	687a      	ldr	r2, [r7, #4]
 8025b9a:	68fb      	ldr	r3, [r7, #12]
 8025b9c:	212c      	movs	r1, #44	; 0x2c
 8025b9e:	fb01 f303 	mul.w	r3, r1, r3
 8025ba2:	4413      	add	r3, r2
 8025ba4:	3360      	adds	r3, #96	; 0x60
 8025ba6:	2205      	movs	r2, #5
 8025ba8:	701a      	strb	r2, [r3, #0]
 8025baa:	e0b5      	b.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025bac:	687a      	ldr	r2, [r7, #4]
 8025bae:	68fb      	ldr	r3, [r7, #12]
 8025bb0:	212c      	movs	r1, #44	; 0x2c
 8025bb2:	fb01 f303 	mul.w	r3, r1, r3
 8025bb6:	4413      	add	r3, r2
 8025bb8:	3361      	adds	r3, #97	; 0x61
 8025bba:	781b      	ldrb	r3, [r3, #0]
 8025bbc:	2b06      	cmp	r3, #6
 8025bbe:	d009      	beq.n	8025bd4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025bc0:	687a      	ldr	r2, [r7, #4]
 8025bc2:	68fb      	ldr	r3, [r7, #12]
 8025bc4:	212c      	movs	r1, #44	; 0x2c
 8025bc6:	fb01 f303 	mul.w	r3, r1, r3
 8025bca:	4413      	add	r3, r2
 8025bcc:	3361      	adds	r3, #97	; 0x61
 8025bce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025bd0:	2b08      	cmp	r3, #8
 8025bd2:	d150      	bne.n	8025c76 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025bd4:	687a      	ldr	r2, [r7, #4]
 8025bd6:	68fb      	ldr	r3, [r7, #12]
 8025bd8:	212c      	movs	r1, #44	; 0x2c
 8025bda:	fb01 f303 	mul.w	r3, r1, r3
 8025bde:	4413      	add	r3, r2
 8025be0:	335c      	adds	r3, #92	; 0x5c
 8025be2:	681b      	ldr	r3, [r3, #0]
 8025be4:	1c5a      	adds	r2, r3, #1
 8025be6:	6879      	ldr	r1, [r7, #4]
 8025be8:	68fb      	ldr	r3, [r7, #12]
 8025bea:	202c      	movs	r0, #44	; 0x2c
 8025bec:	fb00 f303 	mul.w	r3, r0, r3
 8025bf0:	440b      	add	r3, r1
 8025bf2:	335c      	adds	r3, #92	; 0x5c
 8025bf4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025bf6:	687a      	ldr	r2, [r7, #4]
 8025bf8:	68fb      	ldr	r3, [r7, #12]
 8025bfa:	212c      	movs	r1, #44	; 0x2c
 8025bfc:	fb01 f303 	mul.w	r3, r1, r3
 8025c00:	4413      	add	r3, r2
 8025c02:	335c      	adds	r3, #92	; 0x5c
 8025c04:	681b      	ldr	r3, [r3, #0]
 8025c06:	2b02      	cmp	r3, #2
 8025c08:	d912      	bls.n	8025c30 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025c0a:	687a      	ldr	r2, [r7, #4]
 8025c0c:	68fb      	ldr	r3, [r7, #12]
 8025c0e:	212c      	movs	r1, #44	; 0x2c
 8025c10:	fb01 f303 	mul.w	r3, r1, r3
 8025c14:	4413      	add	r3, r2
 8025c16:	335c      	adds	r3, #92	; 0x5c
 8025c18:	2200      	movs	r2, #0
 8025c1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025c1c:	687a      	ldr	r2, [r7, #4]
 8025c1e:	68fb      	ldr	r3, [r7, #12]
 8025c20:	212c      	movs	r1, #44	; 0x2c
 8025c22:	fb01 f303 	mul.w	r3, r1, r3
 8025c26:	4413      	add	r3, r2
 8025c28:	3360      	adds	r3, #96	; 0x60
 8025c2a:	2204      	movs	r2, #4
 8025c2c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025c2e:	e073      	b.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025c30:	687a      	ldr	r2, [r7, #4]
 8025c32:	68fb      	ldr	r3, [r7, #12]
 8025c34:	212c      	movs	r1, #44	; 0x2c
 8025c36:	fb01 f303 	mul.w	r3, r1, r3
 8025c3a:	4413      	add	r3, r2
 8025c3c:	3360      	adds	r3, #96	; 0x60
 8025c3e:	2202      	movs	r2, #2
 8025c40:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025c42:	68fb      	ldr	r3, [r7, #12]
 8025c44:	015a      	lsls	r2, r3, #5
 8025c46:	693b      	ldr	r3, [r7, #16]
 8025c48:	4413      	add	r3, r2
 8025c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c4e:	681b      	ldr	r3, [r3, #0]
 8025c50:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025c52:	68bb      	ldr	r3, [r7, #8]
 8025c54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025c58:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025c5a:	68bb      	ldr	r3, [r7, #8]
 8025c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025c60:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025c62:	68fb      	ldr	r3, [r7, #12]
 8025c64:	015a      	lsls	r2, r3, #5
 8025c66:	693b      	ldr	r3, [r7, #16]
 8025c68:	4413      	add	r3, r2
 8025c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025c6e:	461a      	mov	r2, r3
 8025c70:	68bb      	ldr	r3, [r7, #8]
 8025c72:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025c74:	e050      	b.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025c76:	687a      	ldr	r2, [r7, #4]
 8025c78:	68fb      	ldr	r3, [r7, #12]
 8025c7a:	212c      	movs	r1, #44	; 0x2c
 8025c7c:	fb01 f303 	mul.w	r3, r1, r3
 8025c80:	4413      	add	r3, r2
 8025c82:	3361      	adds	r3, #97	; 0x61
 8025c84:	781b      	ldrb	r3, [r3, #0]
 8025c86:	2b03      	cmp	r3, #3
 8025c88:	d122      	bne.n	8025cd0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025c8a:	687a      	ldr	r2, [r7, #4]
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	212c      	movs	r1, #44	; 0x2c
 8025c90:	fb01 f303 	mul.w	r3, r1, r3
 8025c94:	4413      	add	r3, r2
 8025c96:	3360      	adds	r3, #96	; 0x60
 8025c98:	2202      	movs	r2, #2
 8025c9a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025c9c:	68fb      	ldr	r3, [r7, #12]
 8025c9e:	015a      	lsls	r2, r3, #5
 8025ca0:	693b      	ldr	r3, [r7, #16]
 8025ca2:	4413      	add	r3, r2
 8025ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ca8:	681b      	ldr	r3, [r3, #0]
 8025caa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025cac:	68bb      	ldr	r3, [r7, #8]
 8025cae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025cb2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025cb4:	68bb      	ldr	r3, [r7, #8]
 8025cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025cba:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025cbc:	68fb      	ldr	r3, [r7, #12]
 8025cbe:	015a      	lsls	r2, r3, #5
 8025cc0:	693b      	ldr	r3, [r7, #16]
 8025cc2:	4413      	add	r3, r2
 8025cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cc8:	461a      	mov	r2, r3
 8025cca:	68bb      	ldr	r3, [r7, #8]
 8025ccc:	6013      	str	r3, [r2, #0]
 8025cce:	e023      	b.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025cd0:	687a      	ldr	r2, [r7, #4]
 8025cd2:	68fb      	ldr	r3, [r7, #12]
 8025cd4:	212c      	movs	r1, #44	; 0x2c
 8025cd6:	fb01 f303 	mul.w	r3, r1, r3
 8025cda:	4413      	add	r3, r2
 8025cdc:	3361      	adds	r3, #97	; 0x61
 8025cde:	781b      	ldrb	r3, [r3, #0]
 8025ce0:	2b07      	cmp	r3, #7
 8025ce2:	d119      	bne.n	8025d18 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025ce4:	687a      	ldr	r2, [r7, #4]
 8025ce6:	68fb      	ldr	r3, [r7, #12]
 8025ce8:	212c      	movs	r1, #44	; 0x2c
 8025cea:	fb01 f303 	mul.w	r3, r1, r3
 8025cee:	4413      	add	r3, r2
 8025cf0:	335c      	adds	r3, #92	; 0x5c
 8025cf2:	681b      	ldr	r3, [r3, #0]
 8025cf4:	1c5a      	adds	r2, r3, #1
 8025cf6:	6879      	ldr	r1, [r7, #4]
 8025cf8:	68fb      	ldr	r3, [r7, #12]
 8025cfa:	202c      	movs	r0, #44	; 0x2c
 8025cfc:	fb00 f303 	mul.w	r3, r0, r3
 8025d00:	440b      	add	r3, r1
 8025d02:	335c      	adds	r3, #92	; 0x5c
 8025d04:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d06:	687a      	ldr	r2, [r7, #4]
 8025d08:	68fb      	ldr	r3, [r7, #12]
 8025d0a:	212c      	movs	r1, #44	; 0x2c
 8025d0c:	fb01 f303 	mul.w	r3, r1, r3
 8025d10:	4413      	add	r3, r2
 8025d12:	3360      	adds	r3, #96	; 0x60
 8025d14:	2204      	movs	r2, #4
 8025d16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025d18:	68fb      	ldr	r3, [r7, #12]
 8025d1a:	015a      	lsls	r2, r3, #5
 8025d1c:	693b      	ldr	r3, [r7, #16]
 8025d1e:	4413      	add	r3, r2
 8025d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d24:	461a      	mov	r2, r3
 8025d26:	2302      	movs	r3, #2
 8025d28:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025d2a:	68fb      	ldr	r3, [r7, #12]
 8025d2c:	b2d9      	uxtb	r1, r3
 8025d2e:	687a      	ldr	r2, [r7, #4]
 8025d30:	68fb      	ldr	r3, [r7, #12]
 8025d32:	202c      	movs	r0, #44	; 0x2c
 8025d34:	fb00 f303 	mul.w	r3, r0, r3
 8025d38:	4413      	add	r3, r2
 8025d3a:	3360      	adds	r3, #96	; 0x60
 8025d3c:	781b      	ldrb	r3, [r3, #0]
 8025d3e:	461a      	mov	r2, r3
 8025d40:	6878      	ldr	r0, [r7, #4]
 8025d42:	f007 fa99 	bl	802d278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025d46:	e061      	b.n	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025d48:	68fb      	ldr	r3, [r7, #12]
 8025d4a:	015a      	lsls	r2, r3, #5
 8025d4c:	693b      	ldr	r3, [r7, #16]
 8025d4e:	4413      	add	r3, r2
 8025d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d54:	689b      	ldr	r3, [r3, #8]
 8025d56:	f003 0310 	and.w	r3, r3, #16
 8025d5a:	2b10      	cmp	r3, #16
 8025d5c:	d156      	bne.n	8025e0c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025d5e:	687a      	ldr	r2, [r7, #4]
 8025d60:	68fb      	ldr	r3, [r7, #12]
 8025d62:	212c      	movs	r1, #44	; 0x2c
 8025d64:	fb01 f303 	mul.w	r3, r1, r3
 8025d68:	4413      	add	r3, r2
 8025d6a:	333f      	adds	r3, #63	; 0x3f
 8025d6c:	781b      	ldrb	r3, [r3, #0]
 8025d6e:	2b03      	cmp	r3, #3
 8025d70:	d111      	bne.n	8025d96 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025d72:	687a      	ldr	r2, [r7, #4]
 8025d74:	68fb      	ldr	r3, [r7, #12]
 8025d76:	212c      	movs	r1, #44	; 0x2c
 8025d78:	fb01 f303 	mul.w	r3, r1, r3
 8025d7c:	4413      	add	r3, r2
 8025d7e:	335c      	adds	r3, #92	; 0x5c
 8025d80:	2200      	movs	r2, #0
 8025d82:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	681b      	ldr	r3, [r3, #0]
 8025d88:	68fa      	ldr	r2, [r7, #12]
 8025d8a:	b2d2      	uxtb	r2, r2
 8025d8c:	4611      	mov	r1, r2
 8025d8e:	4618      	mov	r0, r3
 8025d90:	f004 ffd3 	bl	802ad3a <USB_HC_Halt>
 8025d94:	e031      	b.n	8025dfa <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025d96:	687a      	ldr	r2, [r7, #4]
 8025d98:	68fb      	ldr	r3, [r7, #12]
 8025d9a:	212c      	movs	r1, #44	; 0x2c
 8025d9c:	fb01 f303 	mul.w	r3, r1, r3
 8025da0:	4413      	add	r3, r2
 8025da2:	333f      	adds	r3, #63	; 0x3f
 8025da4:	781b      	ldrb	r3, [r3, #0]
 8025da6:	2b00      	cmp	r3, #0
 8025da8:	d009      	beq.n	8025dbe <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025daa:	687a      	ldr	r2, [r7, #4]
 8025dac:	68fb      	ldr	r3, [r7, #12]
 8025dae:	212c      	movs	r1, #44	; 0x2c
 8025db0:	fb01 f303 	mul.w	r3, r1, r3
 8025db4:	4413      	add	r3, r2
 8025db6:	333f      	adds	r3, #63	; 0x3f
 8025db8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025dba:	2b02      	cmp	r3, #2
 8025dbc:	d11d      	bne.n	8025dfa <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025dbe:	687a      	ldr	r2, [r7, #4]
 8025dc0:	68fb      	ldr	r3, [r7, #12]
 8025dc2:	212c      	movs	r1, #44	; 0x2c
 8025dc4:	fb01 f303 	mul.w	r3, r1, r3
 8025dc8:	4413      	add	r3, r2
 8025dca:	335c      	adds	r3, #92	; 0x5c
 8025dcc:	2200      	movs	r2, #0
 8025dce:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025dd0:	687b      	ldr	r3, [r7, #4]
 8025dd2:	691b      	ldr	r3, [r3, #16]
 8025dd4:	2b00      	cmp	r3, #0
 8025dd6:	d110      	bne.n	8025dfa <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025dd8:	687a      	ldr	r2, [r7, #4]
 8025dda:	68fb      	ldr	r3, [r7, #12]
 8025ddc:	212c      	movs	r1, #44	; 0x2c
 8025dde:	fb01 f303 	mul.w	r3, r1, r3
 8025de2:	4413      	add	r3, r2
 8025de4:	3361      	adds	r3, #97	; 0x61
 8025de6:	2203      	movs	r2, #3
 8025de8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025dea:	687b      	ldr	r3, [r7, #4]
 8025dec:	681b      	ldr	r3, [r3, #0]
 8025dee:	68fa      	ldr	r2, [r7, #12]
 8025df0:	b2d2      	uxtb	r2, r2
 8025df2:	4611      	mov	r1, r2
 8025df4:	4618      	mov	r0, r3
 8025df6:	f004 ffa0 	bl	802ad3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025dfa:	68fb      	ldr	r3, [r7, #12]
 8025dfc:	015a      	lsls	r2, r3, #5
 8025dfe:	693b      	ldr	r3, [r7, #16]
 8025e00:	4413      	add	r3, r2
 8025e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e06:	461a      	mov	r2, r3
 8025e08:	2310      	movs	r3, #16
 8025e0a:	6093      	str	r3, [r2, #8]
}
 8025e0c:	bf00      	nop
 8025e0e:	3718      	adds	r7, #24
 8025e10:	46bd      	mov	sp, r7
 8025e12:	bd80      	pop	{r7, pc}

08025e14 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025e14:	b580      	push	{r7, lr}
 8025e16:	b088      	sub	sp, #32
 8025e18:	af00      	add	r7, sp, #0
 8025e1a:	6078      	str	r0, [r7, #4]
 8025e1c:	460b      	mov	r3, r1
 8025e1e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025e20:	687b      	ldr	r3, [r7, #4]
 8025e22:	681b      	ldr	r3, [r3, #0]
 8025e24:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025e26:	69fb      	ldr	r3, [r7, #28]
 8025e28:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025e2a:	78fb      	ldrb	r3, [r7, #3]
 8025e2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025e2e:	697b      	ldr	r3, [r7, #20]
 8025e30:	015a      	lsls	r2, r3, #5
 8025e32:	69bb      	ldr	r3, [r7, #24]
 8025e34:	4413      	add	r3, r2
 8025e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e3a:	689b      	ldr	r3, [r3, #8]
 8025e3c:	f003 0304 	and.w	r3, r3, #4
 8025e40:	2b04      	cmp	r3, #4
 8025e42:	d11a      	bne.n	8025e7a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025e44:	697b      	ldr	r3, [r7, #20]
 8025e46:	015a      	lsls	r2, r3, #5
 8025e48:	69bb      	ldr	r3, [r7, #24]
 8025e4a:	4413      	add	r3, r2
 8025e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e50:	461a      	mov	r2, r3
 8025e52:	2304      	movs	r3, #4
 8025e54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025e56:	687a      	ldr	r2, [r7, #4]
 8025e58:	697b      	ldr	r3, [r7, #20]
 8025e5a:	212c      	movs	r1, #44	; 0x2c
 8025e5c:	fb01 f303 	mul.w	r3, r1, r3
 8025e60:	4413      	add	r3, r2
 8025e62:	3361      	adds	r3, #97	; 0x61
 8025e64:	2206      	movs	r2, #6
 8025e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	681b      	ldr	r3, [r3, #0]
 8025e6c:	697a      	ldr	r2, [r7, #20]
 8025e6e:	b2d2      	uxtb	r2, r2
 8025e70:	4611      	mov	r1, r2
 8025e72:	4618      	mov	r0, r3
 8025e74:	f004 ff61 	bl	802ad3a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8025e78:	e331      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025e7a:	697b      	ldr	r3, [r7, #20]
 8025e7c:	015a      	lsls	r2, r3, #5
 8025e7e:	69bb      	ldr	r3, [r7, #24]
 8025e80:	4413      	add	r3, r2
 8025e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e86:	689b      	ldr	r3, [r3, #8]
 8025e88:	f003 0320 	and.w	r3, r3, #32
 8025e8c:	2b20      	cmp	r3, #32
 8025e8e:	d12e      	bne.n	8025eee <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025e90:	697b      	ldr	r3, [r7, #20]
 8025e92:	015a      	lsls	r2, r3, #5
 8025e94:	69bb      	ldr	r3, [r7, #24]
 8025e96:	4413      	add	r3, r2
 8025e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e9c:	461a      	mov	r2, r3
 8025e9e:	2320      	movs	r3, #32
 8025ea0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025ea2:	687a      	ldr	r2, [r7, #4]
 8025ea4:	697b      	ldr	r3, [r7, #20]
 8025ea6:	212c      	movs	r1, #44	; 0x2c
 8025ea8:	fb01 f303 	mul.w	r3, r1, r3
 8025eac:	4413      	add	r3, r2
 8025eae:	333d      	adds	r3, #61	; 0x3d
 8025eb0:	781b      	ldrb	r3, [r3, #0]
 8025eb2:	2b01      	cmp	r3, #1
 8025eb4:	f040 8313 	bne.w	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8025eb8:	687a      	ldr	r2, [r7, #4]
 8025eba:	697b      	ldr	r3, [r7, #20]
 8025ebc:	212c      	movs	r1, #44	; 0x2c
 8025ebe:	fb01 f303 	mul.w	r3, r1, r3
 8025ec2:	4413      	add	r3, r2
 8025ec4:	333d      	adds	r3, #61	; 0x3d
 8025ec6:	2200      	movs	r2, #0
 8025ec8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025eca:	687a      	ldr	r2, [r7, #4]
 8025ecc:	697b      	ldr	r3, [r7, #20]
 8025ece:	212c      	movs	r1, #44	; 0x2c
 8025ed0:	fb01 f303 	mul.w	r3, r1, r3
 8025ed4:	4413      	add	r3, r2
 8025ed6:	3360      	adds	r3, #96	; 0x60
 8025ed8:	2202      	movs	r2, #2
 8025eda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025edc:	687b      	ldr	r3, [r7, #4]
 8025ede:	681b      	ldr	r3, [r3, #0]
 8025ee0:	697a      	ldr	r2, [r7, #20]
 8025ee2:	b2d2      	uxtb	r2, r2
 8025ee4:	4611      	mov	r1, r2
 8025ee6:	4618      	mov	r0, r3
 8025ee8:	f004 ff27 	bl	802ad3a <USB_HC_Halt>
}
 8025eec:	e2f7      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025eee:	697b      	ldr	r3, [r7, #20]
 8025ef0:	015a      	lsls	r2, r3, #5
 8025ef2:	69bb      	ldr	r3, [r7, #24]
 8025ef4:	4413      	add	r3, r2
 8025ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025efa:	689b      	ldr	r3, [r3, #8]
 8025efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025f04:	d112      	bne.n	8025f2c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025f06:	697b      	ldr	r3, [r7, #20]
 8025f08:	015a      	lsls	r2, r3, #5
 8025f0a:	69bb      	ldr	r3, [r7, #24]
 8025f0c:	4413      	add	r3, r2
 8025f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f12:	461a      	mov	r2, r3
 8025f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025f18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f1a:	687b      	ldr	r3, [r7, #4]
 8025f1c:	681b      	ldr	r3, [r3, #0]
 8025f1e:	697a      	ldr	r2, [r7, #20]
 8025f20:	b2d2      	uxtb	r2, r2
 8025f22:	4611      	mov	r1, r2
 8025f24:	4618      	mov	r0, r3
 8025f26:	f004 ff08 	bl	802ad3a <USB_HC_Halt>
}
 8025f2a:	e2d8      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025f2c:	697b      	ldr	r3, [r7, #20]
 8025f2e:	015a      	lsls	r2, r3, #5
 8025f30:	69bb      	ldr	r3, [r7, #24]
 8025f32:	4413      	add	r3, r2
 8025f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f38:	689b      	ldr	r3, [r3, #8]
 8025f3a:	f003 0301 	and.w	r3, r3, #1
 8025f3e:	2b01      	cmp	r3, #1
 8025f40:	d140      	bne.n	8025fc4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025f42:	687a      	ldr	r2, [r7, #4]
 8025f44:	697b      	ldr	r3, [r7, #20]
 8025f46:	212c      	movs	r1, #44	; 0x2c
 8025f48:	fb01 f303 	mul.w	r3, r1, r3
 8025f4c:	4413      	add	r3, r2
 8025f4e:	335c      	adds	r3, #92	; 0x5c
 8025f50:	2200      	movs	r2, #0
 8025f52:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025f54:	697b      	ldr	r3, [r7, #20]
 8025f56:	015a      	lsls	r2, r3, #5
 8025f58:	69bb      	ldr	r3, [r7, #24]
 8025f5a:	4413      	add	r3, r2
 8025f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f60:	689b      	ldr	r3, [r3, #8]
 8025f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025f66:	2b40      	cmp	r3, #64	; 0x40
 8025f68:	d111      	bne.n	8025f8e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8025f6a:	687a      	ldr	r2, [r7, #4]
 8025f6c:	697b      	ldr	r3, [r7, #20]
 8025f6e:	212c      	movs	r1, #44	; 0x2c
 8025f70:	fb01 f303 	mul.w	r3, r1, r3
 8025f74:	4413      	add	r3, r2
 8025f76:	333d      	adds	r3, #61	; 0x3d
 8025f78:	2201      	movs	r2, #1
 8025f7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8025f7c:	697b      	ldr	r3, [r7, #20]
 8025f7e:	015a      	lsls	r2, r3, #5
 8025f80:	69bb      	ldr	r3, [r7, #24]
 8025f82:	4413      	add	r3, r2
 8025f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f88:	461a      	mov	r2, r3
 8025f8a:	2340      	movs	r3, #64	; 0x40
 8025f8c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025f8e:	697b      	ldr	r3, [r7, #20]
 8025f90:	015a      	lsls	r2, r3, #5
 8025f92:	69bb      	ldr	r3, [r7, #24]
 8025f94:	4413      	add	r3, r2
 8025f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f9a:	461a      	mov	r2, r3
 8025f9c:	2301      	movs	r3, #1
 8025f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025fa0:	687a      	ldr	r2, [r7, #4]
 8025fa2:	697b      	ldr	r3, [r7, #20]
 8025fa4:	212c      	movs	r1, #44	; 0x2c
 8025fa6:	fb01 f303 	mul.w	r3, r1, r3
 8025faa:	4413      	add	r3, r2
 8025fac:	3361      	adds	r3, #97	; 0x61
 8025fae:	2201      	movs	r2, #1
 8025fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025fb2:	687b      	ldr	r3, [r7, #4]
 8025fb4:	681b      	ldr	r3, [r3, #0]
 8025fb6:	697a      	ldr	r2, [r7, #20]
 8025fb8:	b2d2      	uxtb	r2, r2
 8025fba:	4611      	mov	r1, r2
 8025fbc:	4618      	mov	r0, r3
 8025fbe:	f004 febc 	bl	802ad3a <USB_HC_Halt>
}
 8025fc2:	e28c      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025fc4:	697b      	ldr	r3, [r7, #20]
 8025fc6:	015a      	lsls	r2, r3, #5
 8025fc8:	69bb      	ldr	r3, [r7, #24]
 8025fca:	4413      	add	r3, r2
 8025fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fd0:	689b      	ldr	r3, [r3, #8]
 8025fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025fd6:	2b40      	cmp	r3, #64	; 0x40
 8025fd8:	d12c      	bne.n	8026034 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8025fda:	687a      	ldr	r2, [r7, #4]
 8025fdc:	697b      	ldr	r3, [r7, #20]
 8025fde:	212c      	movs	r1, #44	; 0x2c
 8025fe0:	fb01 f303 	mul.w	r3, r1, r3
 8025fe4:	4413      	add	r3, r2
 8025fe6:	3361      	adds	r3, #97	; 0x61
 8025fe8:	2204      	movs	r2, #4
 8025fea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8025fec:	687a      	ldr	r2, [r7, #4]
 8025fee:	697b      	ldr	r3, [r7, #20]
 8025ff0:	212c      	movs	r1, #44	; 0x2c
 8025ff2:	fb01 f303 	mul.w	r3, r1, r3
 8025ff6:	4413      	add	r3, r2
 8025ff8:	333d      	adds	r3, #61	; 0x3d
 8025ffa:	2201      	movs	r2, #1
 8025ffc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025ffe:	687a      	ldr	r2, [r7, #4]
 8026000:	697b      	ldr	r3, [r7, #20]
 8026002:	212c      	movs	r1, #44	; 0x2c
 8026004:	fb01 f303 	mul.w	r3, r1, r3
 8026008:	4413      	add	r3, r2
 802600a:	335c      	adds	r3, #92	; 0x5c
 802600c:	2200      	movs	r2, #0
 802600e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026010:	687b      	ldr	r3, [r7, #4]
 8026012:	681b      	ldr	r3, [r3, #0]
 8026014:	697a      	ldr	r2, [r7, #20]
 8026016:	b2d2      	uxtb	r2, r2
 8026018:	4611      	mov	r1, r2
 802601a:	4618      	mov	r0, r3
 802601c:	f004 fe8d 	bl	802ad3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8026020:	697b      	ldr	r3, [r7, #20]
 8026022:	015a      	lsls	r2, r3, #5
 8026024:	69bb      	ldr	r3, [r7, #24]
 8026026:	4413      	add	r3, r2
 8026028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802602c:	461a      	mov	r2, r3
 802602e:	2340      	movs	r3, #64	; 0x40
 8026030:	6093      	str	r3, [r2, #8]
}
 8026032:	e254      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8026034:	697b      	ldr	r3, [r7, #20]
 8026036:	015a      	lsls	r2, r3, #5
 8026038:	69bb      	ldr	r3, [r7, #24]
 802603a:	4413      	add	r3, r2
 802603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026040:	689b      	ldr	r3, [r3, #8]
 8026042:	f003 0308 	and.w	r3, r3, #8
 8026046:	2b08      	cmp	r3, #8
 8026048:	d11a      	bne.n	8026080 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 802604a:	697b      	ldr	r3, [r7, #20]
 802604c:	015a      	lsls	r2, r3, #5
 802604e:	69bb      	ldr	r3, [r7, #24]
 8026050:	4413      	add	r3, r2
 8026052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026056:	461a      	mov	r2, r3
 8026058:	2308      	movs	r3, #8
 802605a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 802605c:	687a      	ldr	r2, [r7, #4]
 802605e:	697b      	ldr	r3, [r7, #20]
 8026060:	212c      	movs	r1, #44	; 0x2c
 8026062:	fb01 f303 	mul.w	r3, r1, r3
 8026066:	4413      	add	r3, r2
 8026068:	3361      	adds	r3, #97	; 0x61
 802606a:	2205      	movs	r2, #5
 802606c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802606e:	687b      	ldr	r3, [r7, #4]
 8026070:	681b      	ldr	r3, [r3, #0]
 8026072:	697a      	ldr	r2, [r7, #20]
 8026074:	b2d2      	uxtb	r2, r2
 8026076:	4611      	mov	r1, r2
 8026078:	4618      	mov	r0, r3
 802607a:	f004 fe5e 	bl	802ad3a <USB_HC_Halt>
}
 802607e:	e22e      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8026080:	697b      	ldr	r3, [r7, #20]
 8026082:	015a      	lsls	r2, r3, #5
 8026084:	69bb      	ldr	r3, [r7, #24]
 8026086:	4413      	add	r3, r2
 8026088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802608c:	689b      	ldr	r3, [r3, #8]
 802608e:	f003 0310 	and.w	r3, r3, #16
 8026092:	2b10      	cmp	r3, #16
 8026094:	d140      	bne.n	8026118 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026096:	687a      	ldr	r2, [r7, #4]
 8026098:	697b      	ldr	r3, [r7, #20]
 802609a:	212c      	movs	r1, #44	; 0x2c
 802609c:	fb01 f303 	mul.w	r3, r1, r3
 80260a0:	4413      	add	r3, r2
 80260a2:	335c      	adds	r3, #92	; 0x5c
 80260a4:	2200      	movs	r2, #0
 80260a6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80260a8:	687a      	ldr	r2, [r7, #4]
 80260aa:	697b      	ldr	r3, [r7, #20]
 80260ac:	212c      	movs	r1, #44	; 0x2c
 80260ae:	fb01 f303 	mul.w	r3, r1, r3
 80260b2:	4413      	add	r3, r2
 80260b4:	3361      	adds	r3, #97	; 0x61
 80260b6:	2203      	movs	r2, #3
 80260b8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80260ba:	687a      	ldr	r2, [r7, #4]
 80260bc:	697b      	ldr	r3, [r7, #20]
 80260be:	212c      	movs	r1, #44	; 0x2c
 80260c0:	fb01 f303 	mul.w	r3, r1, r3
 80260c4:	4413      	add	r3, r2
 80260c6:	333d      	adds	r3, #61	; 0x3d
 80260c8:	781b      	ldrb	r3, [r3, #0]
 80260ca:	2b00      	cmp	r3, #0
 80260cc:	d112      	bne.n	80260f4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80260ce:	687a      	ldr	r2, [r7, #4]
 80260d0:	697b      	ldr	r3, [r7, #20]
 80260d2:	212c      	movs	r1, #44	; 0x2c
 80260d4:	fb01 f303 	mul.w	r3, r1, r3
 80260d8:	4413      	add	r3, r2
 80260da:	333c      	adds	r3, #60	; 0x3c
 80260dc:	781b      	ldrb	r3, [r3, #0]
 80260de:	2b00      	cmp	r3, #0
 80260e0:	d108      	bne.n	80260f4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80260e2:	687a      	ldr	r2, [r7, #4]
 80260e4:	697b      	ldr	r3, [r7, #20]
 80260e6:	212c      	movs	r1, #44	; 0x2c
 80260e8:	fb01 f303 	mul.w	r3, r1, r3
 80260ec:	4413      	add	r3, r2
 80260ee:	333d      	adds	r3, #61	; 0x3d
 80260f0:	2201      	movs	r2, #1
 80260f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	697a      	ldr	r2, [r7, #20]
 80260fa:	b2d2      	uxtb	r2, r2
 80260fc:	4611      	mov	r1, r2
 80260fe:	4618      	mov	r0, r3
 8026100:	f004 fe1b 	bl	802ad3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026104:	697b      	ldr	r3, [r7, #20]
 8026106:	015a      	lsls	r2, r3, #5
 8026108:	69bb      	ldr	r3, [r7, #24]
 802610a:	4413      	add	r3, r2
 802610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026110:	461a      	mov	r2, r3
 8026112:	2310      	movs	r3, #16
 8026114:	6093      	str	r3, [r2, #8]
}
 8026116:	e1e2      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8026118:	697b      	ldr	r3, [r7, #20]
 802611a:	015a      	lsls	r2, r3, #5
 802611c:	69bb      	ldr	r3, [r7, #24]
 802611e:	4413      	add	r3, r2
 8026120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026124:	689b      	ldr	r3, [r3, #8]
 8026126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802612a:	2b80      	cmp	r3, #128	; 0x80
 802612c:	d164      	bne.n	80261f8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 802612e:	687b      	ldr	r3, [r7, #4]
 8026130:	691b      	ldr	r3, [r3, #16]
 8026132:	2b00      	cmp	r3, #0
 8026134:	d111      	bne.n	802615a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8026136:	687a      	ldr	r2, [r7, #4]
 8026138:	697b      	ldr	r3, [r7, #20]
 802613a:	212c      	movs	r1, #44	; 0x2c
 802613c:	fb01 f303 	mul.w	r3, r1, r3
 8026140:	4413      	add	r3, r2
 8026142:	3361      	adds	r3, #97	; 0x61
 8026144:	2206      	movs	r2, #6
 8026146:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026148:	687b      	ldr	r3, [r7, #4]
 802614a:	681b      	ldr	r3, [r3, #0]
 802614c:	697a      	ldr	r2, [r7, #20]
 802614e:	b2d2      	uxtb	r2, r2
 8026150:	4611      	mov	r1, r2
 8026152:	4618      	mov	r0, r3
 8026154:	f004 fdf1 	bl	802ad3a <USB_HC_Halt>
 8026158:	e044      	b.n	80261e4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 802615a:	687a      	ldr	r2, [r7, #4]
 802615c:	697b      	ldr	r3, [r7, #20]
 802615e:	212c      	movs	r1, #44	; 0x2c
 8026160:	fb01 f303 	mul.w	r3, r1, r3
 8026164:	4413      	add	r3, r2
 8026166:	335c      	adds	r3, #92	; 0x5c
 8026168:	681b      	ldr	r3, [r3, #0]
 802616a:	1c5a      	adds	r2, r3, #1
 802616c:	6879      	ldr	r1, [r7, #4]
 802616e:	697b      	ldr	r3, [r7, #20]
 8026170:	202c      	movs	r0, #44	; 0x2c
 8026172:	fb00 f303 	mul.w	r3, r0, r3
 8026176:	440b      	add	r3, r1
 8026178:	335c      	adds	r3, #92	; 0x5c
 802617a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 802617c:	687a      	ldr	r2, [r7, #4]
 802617e:	697b      	ldr	r3, [r7, #20]
 8026180:	212c      	movs	r1, #44	; 0x2c
 8026182:	fb01 f303 	mul.w	r3, r1, r3
 8026186:	4413      	add	r3, r2
 8026188:	335c      	adds	r3, #92	; 0x5c
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	2b02      	cmp	r3, #2
 802618e:	d920      	bls.n	80261d2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8026190:	687a      	ldr	r2, [r7, #4]
 8026192:	697b      	ldr	r3, [r7, #20]
 8026194:	212c      	movs	r1, #44	; 0x2c
 8026196:	fb01 f303 	mul.w	r3, r1, r3
 802619a:	4413      	add	r3, r2
 802619c:	335c      	adds	r3, #92	; 0x5c
 802619e:	2200      	movs	r2, #0
 80261a0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80261a2:	687a      	ldr	r2, [r7, #4]
 80261a4:	697b      	ldr	r3, [r7, #20]
 80261a6:	212c      	movs	r1, #44	; 0x2c
 80261a8:	fb01 f303 	mul.w	r3, r1, r3
 80261ac:	4413      	add	r3, r2
 80261ae:	3360      	adds	r3, #96	; 0x60
 80261b0:	2204      	movs	r2, #4
 80261b2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80261b4:	697b      	ldr	r3, [r7, #20]
 80261b6:	b2d9      	uxtb	r1, r3
 80261b8:	687a      	ldr	r2, [r7, #4]
 80261ba:	697b      	ldr	r3, [r7, #20]
 80261bc:	202c      	movs	r0, #44	; 0x2c
 80261be:	fb00 f303 	mul.w	r3, r0, r3
 80261c2:	4413      	add	r3, r2
 80261c4:	3360      	adds	r3, #96	; 0x60
 80261c6:	781b      	ldrb	r3, [r3, #0]
 80261c8:	461a      	mov	r2, r3
 80261ca:	6878      	ldr	r0, [r7, #4]
 80261cc:	f007 f854 	bl	802d278 <HAL_HCD_HC_NotifyURBChange_Callback>
 80261d0:	e008      	b.n	80261e4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80261d2:	687a      	ldr	r2, [r7, #4]
 80261d4:	697b      	ldr	r3, [r7, #20]
 80261d6:	212c      	movs	r1, #44	; 0x2c
 80261d8:	fb01 f303 	mul.w	r3, r1, r3
 80261dc:	4413      	add	r3, r2
 80261de:	3360      	adds	r3, #96	; 0x60
 80261e0:	2202      	movs	r2, #2
 80261e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80261e4:	697b      	ldr	r3, [r7, #20]
 80261e6:	015a      	lsls	r2, r3, #5
 80261e8:	69bb      	ldr	r3, [r7, #24]
 80261ea:	4413      	add	r3, r2
 80261ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261f0:	461a      	mov	r2, r3
 80261f2:	2380      	movs	r3, #128	; 0x80
 80261f4:	6093      	str	r3, [r2, #8]
}
 80261f6:	e172      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80261f8:	697b      	ldr	r3, [r7, #20]
 80261fa:	015a      	lsls	r2, r3, #5
 80261fc:	69bb      	ldr	r3, [r7, #24]
 80261fe:	4413      	add	r3, r2
 8026200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026204:	689b      	ldr	r3, [r3, #8]
 8026206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802620a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802620e:	d11b      	bne.n	8026248 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8026210:	687a      	ldr	r2, [r7, #4]
 8026212:	697b      	ldr	r3, [r7, #20]
 8026214:	212c      	movs	r1, #44	; 0x2c
 8026216:	fb01 f303 	mul.w	r3, r1, r3
 802621a:	4413      	add	r3, r2
 802621c:	3361      	adds	r3, #97	; 0x61
 802621e:	2208      	movs	r2, #8
 8026220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026222:	687b      	ldr	r3, [r7, #4]
 8026224:	681b      	ldr	r3, [r3, #0]
 8026226:	697a      	ldr	r2, [r7, #20]
 8026228:	b2d2      	uxtb	r2, r2
 802622a:	4611      	mov	r1, r2
 802622c:	4618      	mov	r0, r3
 802622e:	f004 fd84 	bl	802ad3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8026232:	697b      	ldr	r3, [r7, #20]
 8026234:	015a      	lsls	r2, r3, #5
 8026236:	69bb      	ldr	r3, [r7, #24]
 8026238:	4413      	add	r3, r2
 802623a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802623e:	461a      	mov	r2, r3
 8026240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026244:	6093      	str	r3, [r2, #8]
}
 8026246:	e14a      	b.n	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8026248:	697b      	ldr	r3, [r7, #20]
 802624a:	015a      	lsls	r2, r3, #5
 802624c:	69bb      	ldr	r3, [r7, #24]
 802624e:	4413      	add	r3, r2
 8026250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026254:	689b      	ldr	r3, [r3, #8]
 8026256:	f003 0302 	and.w	r3, r3, #2
 802625a:	2b02      	cmp	r3, #2
 802625c:	f040 813f 	bne.w	80264de <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8026260:	687a      	ldr	r2, [r7, #4]
 8026262:	697b      	ldr	r3, [r7, #20]
 8026264:	212c      	movs	r1, #44	; 0x2c
 8026266:	fb01 f303 	mul.w	r3, r1, r3
 802626a:	4413      	add	r3, r2
 802626c:	3361      	adds	r3, #97	; 0x61
 802626e:	781b      	ldrb	r3, [r3, #0]
 8026270:	2b01      	cmp	r3, #1
 8026272:	d17d      	bne.n	8026370 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8026274:	687a      	ldr	r2, [r7, #4]
 8026276:	697b      	ldr	r3, [r7, #20]
 8026278:	212c      	movs	r1, #44	; 0x2c
 802627a:	fb01 f303 	mul.w	r3, r1, r3
 802627e:	4413      	add	r3, r2
 8026280:	3360      	adds	r3, #96	; 0x60
 8026282:	2201      	movs	r2, #1
 8026284:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8026286:	687a      	ldr	r2, [r7, #4]
 8026288:	697b      	ldr	r3, [r7, #20]
 802628a:	212c      	movs	r1, #44	; 0x2c
 802628c:	fb01 f303 	mul.w	r3, r1, r3
 8026290:	4413      	add	r3, r2
 8026292:	333f      	adds	r3, #63	; 0x3f
 8026294:	781b      	ldrb	r3, [r3, #0]
 8026296:	2b02      	cmp	r3, #2
 8026298:	d00a      	beq.n	80262b0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 802629a:	687a      	ldr	r2, [r7, #4]
 802629c:	697b      	ldr	r3, [r7, #20]
 802629e:	212c      	movs	r1, #44	; 0x2c
 80262a0:	fb01 f303 	mul.w	r3, r1, r3
 80262a4:	4413      	add	r3, r2
 80262a6:	333f      	adds	r3, #63	; 0x3f
 80262a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80262aa:	2b03      	cmp	r3, #3
 80262ac:	f040 8100 	bne.w	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80262b0:	687b      	ldr	r3, [r7, #4]
 80262b2:	691b      	ldr	r3, [r3, #16]
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	d113      	bne.n	80262e0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80262b8:	687a      	ldr	r2, [r7, #4]
 80262ba:	697b      	ldr	r3, [r7, #20]
 80262bc:	212c      	movs	r1, #44	; 0x2c
 80262be:	fb01 f303 	mul.w	r3, r1, r3
 80262c2:	4413      	add	r3, r2
 80262c4:	3355      	adds	r3, #85	; 0x55
 80262c6:	781b      	ldrb	r3, [r3, #0]
 80262c8:	f083 0301 	eor.w	r3, r3, #1
 80262cc:	b2d8      	uxtb	r0, r3
 80262ce:	687a      	ldr	r2, [r7, #4]
 80262d0:	697b      	ldr	r3, [r7, #20]
 80262d2:	212c      	movs	r1, #44	; 0x2c
 80262d4:	fb01 f303 	mul.w	r3, r1, r3
 80262d8:	4413      	add	r3, r2
 80262da:	3355      	adds	r3, #85	; 0x55
 80262dc:	4602      	mov	r2, r0
 80262de:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80262e0:	687b      	ldr	r3, [r7, #4]
 80262e2:	691b      	ldr	r3, [r3, #16]
 80262e4:	2b01      	cmp	r3, #1
 80262e6:	f040 80e3 	bne.w	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
 80262ea:	687a      	ldr	r2, [r7, #4]
 80262ec:	697b      	ldr	r3, [r7, #20]
 80262ee:	212c      	movs	r1, #44	; 0x2c
 80262f0:	fb01 f303 	mul.w	r3, r1, r3
 80262f4:	4413      	add	r3, r2
 80262f6:	334c      	adds	r3, #76	; 0x4c
 80262f8:	681b      	ldr	r3, [r3, #0]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	f000 80d8 	beq.w	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8026300:	687a      	ldr	r2, [r7, #4]
 8026302:	697b      	ldr	r3, [r7, #20]
 8026304:	212c      	movs	r1, #44	; 0x2c
 8026306:	fb01 f303 	mul.w	r3, r1, r3
 802630a:	4413      	add	r3, r2
 802630c:	334c      	adds	r3, #76	; 0x4c
 802630e:	681b      	ldr	r3, [r3, #0]
 8026310:	6879      	ldr	r1, [r7, #4]
 8026312:	697a      	ldr	r2, [r7, #20]
 8026314:	202c      	movs	r0, #44	; 0x2c
 8026316:	fb00 f202 	mul.w	r2, r0, r2
 802631a:	440a      	add	r2, r1
 802631c:	3240      	adds	r2, #64	; 0x40
 802631e:	8812      	ldrh	r2, [r2, #0]
 8026320:	4413      	add	r3, r2
 8026322:	3b01      	subs	r3, #1
 8026324:	6879      	ldr	r1, [r7, #4]
 8026326:	697a      	ldr	r2, [r7, #20]
 8026328:	202c      	movs	r0, #44	; 0x2c
 802632a:	fb00 f202 	mul.w	r2, r0, r2
 802632e:	440a      	add	r2, r1
 8026330:	3240      	adds	r2, #64	; 0x40
 8026332:	8812      	ldrh	r2, [r2, #0]
 8026334:	fbb3 f3f2 	udiv	r3, r3, r2
 8026338:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 802633a:	68fb      	ldr	r3, [r7, #12]
 802633c:	f003 0301 	and.w	r3, r3, #1
 8026340:	2b00      	cmp	r3, #0
 8026342:	f000 80b5 	beq.w	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8026346:	687a      	ldr	r2, [r7, #4]
 8026348:	697b      	ldr	r3, [r7, #20]
 802634a:	212c      	movs	r1, #44	; 0x2c
 802634c:	fb01 f303 	mul.w	r3, r1, r3
 8026350:	4413      	add	r3, r2
 8026352:	3355      	adds	r3, #85	; 0x55
 8026354:	781b      	ldrb	r3, [r3, #0]
 8026356:	f083 0301 	eor.w	r3, r3, #1
 802635a:	b2d8      	uxtb	r0, r3
 802635c:	687a      	ldr	r2, [r7, #4]
 802635e:	697b      	ldr	r3, [r7, #20]
 8026360:	212c      	movs	r1, #44	; 0x2c
 8026362:	fb01 f303 	mul.w	r3, r1, r3
 8026366:	4413      	add	r3, r2
 8026368:	3355      	adds	r3, #85	; 0x55
 802636a:	4602      	mov	r2, r0
 802636c:	701a      	strb	r2, [r3, #0]
 802636e:	e09f      	b.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8026370:	687a      	ldr	r2, [r7, #4]
 8026372:	697b      	ldr	r3, [r7, #20]
 8026374:	212c      	movs	r1, #44	; 0x2c
 8026376:	fb01 f303 	mul.w	r3, r1, r3
 802637a:	4413      	add	r3, r2
 802637c:	3361      	adds	r3, #97	; 0x61
 802637e:	781b      	ldrb	r3, [r3, #0]
 8026380:	2b03      	cmp	r3, #3
 8026382:	d109      	bne.n	8026398 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026384:	687a      	ldr	r2, [r7, #4]
 8026386:	697b      	ldr	r3, [r7, #20]
 8026388:	212c      	movs	r1, #44	; 0x2c
 802638a:	fb01 f303 	mul.w	r3, r1, r3
 802638e:	4413      	add	r3, r2
 8026390:	3360      	adds	r3, #96	; 0x60
 8026392:	2202      	movs	r2, #2
 8026394:	701a      	strb	r2, [r3, #0]
 8026396:	e08b      	b.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8026398:	687a      	ldr	r2, [r7, #4]
 802639a:	697b      	ldr	r3, [r7, #20]
 802639c:	212c      	movs	r1, #44	; 0x2c
 802639e:	fb01 f303 	mul.w	r3, r1, r3
 80263a2:	4413      	add	r3, r2
 80263a4:	3361      	adds	r3, #97	; 0x61
 80263a6:	781b      	ldrb	r3, [r3, #0]
 80263a8:	2b04      	cmp	r3, #4
 80263aa:	d109      	bne.n	80263c0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80263ac:	687a      	ldr	r2, [r7, #4]
 80263ae:	697b      	ldr	r3, [r7, #20]
 80263b0:	212c      	movs	r1, #44	; 0x2c
 80263b2:	fb01 f303 	mul.w	r3, r1, r3
 80263b6:	4413      	add	r3, r2
 80263b8:	3360      	adds	r3, #96	; 0x60
 80263ba:	2202      	movs	r2, #2
 80263bc:	701a      	strb	r2, [r3, #0]
 80263be:	e077      	b.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80263c0:	687a      	ldr	r2, [r7, #4]
 80263c2:	697b      	ldr	r3, [r7, #20]
 80263c4:	212c      	movs	r1, #44	; 0x2c
 80263c6:	fb01 f303 	mul.w	r3, r1, r3
 80263ca:	4413      	add	r3, r2
 80263cc:	3361      	adds	r3, #97	; 0x61
 80263ce:	781b      	ldrb	r3, [r3, #0]
 80263d0:	2b05      	cmp	r3, #5
 80263d2:	d109      	bne.n	80263e8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80263d4:	687a      	ldr	r2, [r7, #4]
 80263d6:	697b      	ldr	r3, [r7, #20]
 80263d8:	212c      	movs	r1, #44	; 0x2c
 80263da:	fb01 f303 	mul.w	r3, r1, r3
 80263de:	4413      	add	r3, r2
 80263e0:	3360      	adds	r3, #96	; 0x60
 80263e2:	2205      	movs	r2, #5
 80263e4:	701a      	strb	r2, [r3, #0]
 80263e6:	e063      	b.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80263e8:	687a      	ldr	r2, [r7, #4]
 80263ea:	697b      	ldr	r3, [r7, #20]
 80263ec:	212c      	movs	r1, #44	; 0x2c
 80263ee:	fb01 f303 	mul.w	r3, r1, r3
 80263f2:	4413      	add	r3, r2
 80263f4:	3361      	adds	r3, #97	; 0x61
 80263f6:	781b      	ldrb	r3, [r3, #0]
 80263f8:	2b06      	cmp	r3, #6
 80263fa:	d009      	beq.n	8026410 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80263fc:	687a      	ldr	r2, [r7, #4]
 80263fe:	697b      	ldr	r3, [r7, #20]
 8026400:	212c      	movs	r1, #44	; 0x2c
 8026402:	fb01 f303 	mul.w	r3, r1, r3
 8026406:	4413      	add	r3, r2
 8026408:	3361      	adds	r3, #97	; 0x61
 802640a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802640c:	2b08      	cmp	r3, #8
 802640e:	d14f      	bne.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8026410:	687a      	ldr	r2, [r7, #4]
 8026412:	697b      	ldr	r3, [r7, #20]
 8026414:	212c      	movs	r1, #44	; 0x2c
 8026416:	fb01 f303 	mul.w	r3, r1, r3
 802641a:	4413      	add	r3, r2
 802641c:	335c      	adds	r3, #92	; 0x5c
 802641e:	681b      	ldr	r3, [r3, #0]
 8026420:	1c5a      	adds	r2, r3, #1
 8026422:	6879      	ldr	r1, [r7, #4]
 8026424:	697b      	ldr	r3, [r7, #20]
 8026426:	202c      	movs	r0, #44	; 0x2c
 8026428:	fb00 f303 	mul.w	r3, r0, r3
 802642c:	440b      	add	r3, r1
 802642e:	335c      	adds	r3, #92	; 0x5c
 8026430:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026432:	687a      	ldr	r2, [r7, #4]
 8026434:	697b      	ldr	r3, [r7, #20]
 8026436:	212c      	movs	r1, #44	; 0x2c
 8026438:	fb01 f303 	mul.w	r3, r1, r3
 802643c:	4413      	add	r3, r2
 802643e:	335c      	adds	r3, #92	; 0x5c
 8026440:	681b      	ldr	r3, [r3, #0]
 8026442:	2b02      	cmp	r3, #2
 8026444:	d912      	bls.n	802646c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8026446:	687a      	ldr	r2, [r7, #4]
 8026448:	697b      	ldr	r3, [r7, #20]
 802644a:	212c      	movs	r1, #44	; 0x2c
 802644c:	fb01 f303 	mul.w	r3, r1, r3
 8026450:	4413      	add	r3, r2
 8026452:	335c      	adds	r3, #92	; 0x5c
 8026454:	2200      	movs	r2, #0
 8026456:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026458:	687a      	ldr	r2, [r7, #4]
 802645a:	697b      	ldr	r3, [r7, #20]
 802645c:	212c      	movs	r1, #44	; 0x2c
 802645e:	fb01 f303 	mul.w	r3, r1, r3
 8026462:	4413      	add	r3, r2
 8026464:	3360      	adds	r3, #96	; 0x60
 8026466:	2204      	movs	r2, #4
 8026468:	701a      	strb	r2, [r3, #0]
 802646a:	e021      	b.n	80264b0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802646c:	687a      	ldr	r2, [r7, #4]
 802646e:	697b      	ldr	r3, [r7, #20]
 8026470:	212c      	movs	r1, #44	; 0x2c
 8026472:	fb01 f303 	mul.w	r3, r1, r3
 8026476:	4413      	add	r3, r2
 8026478:	3360      	adds	r3, #96	; 0x60
 802647a:	2202      	movs	r2, #2
 802647c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 802647e:	697b      	ldr	r3, [r7, #20]
 8026480:	015a      	lsls	r2, r3, #5
 8026482:	69bb      	ldr	r3, [r7, #24]
 8026484:	4413      	add	r3, r2
 8026486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802648a:	681b      	ldr	r3, [r3, #0]
 802648c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802648e:	693b      	ldr	r3, [r7, #16]
 8026490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026494:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026496:	693b      	ldr	r3, [r7, #16]
 8026498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802649c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 802649e:	697b      	ldr	r3, [r7, #20]
 80264a0:	015a      	lsls	r2, r3, #5
 80264a2:	69bb      	ldr	r3, [r7, #24]
 80264a4:	4413      	add	r3, r2
 80264a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264aa:	461a      	mov	r2, r3
 80264ac:	693b      	ldr	r3, [r7, #16]
 80264ae:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80264b0:	697b      	ldr	r3, [r7, #20]
 80264b2:	015a      	lsls	r2, r3, #5
 80264b4:	69bb      	ldr	r3, [r7, #24]
 80264b6:	4413      	add	r3, r2
 80264b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80264bc:	461a      	mov	r2, r3
 80264be:	2302      	movs	r3, #2
 80264c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80264c2:	697b      	ldr	r3, [r7, #20]
 80264c4:	b2d9      	uxtb	r1, r3
 80264c6:	687a      	ldr	r2, [r7, #4]
 80264c8:	697b      	ldr	r3, [r7, #20]
 80264ca:	202c      	movs	r0, #44	; 0x2c
 80264cc:	fb00 f303 	mul.w	r3, r0, r3
 80264d0:	4413      	add	r3, r2
 80264d2:	3360      	adds	r3, #96	; 0x60
 80264d4:	781b      	ldrb	r3, [r3, #0]
 80264d6:	461a      	mov	r2, r3
 80264d8:	6878      	ldr	r0, [r7, #4]
 80264da:	f006 fecd 	bl	802d278 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80264de:	bf00      	nop
 80264e0:	3720      	adds	r7, #32
 80264e2:	46bd      	mov	sp, r7
 80264e4:	bd80      	pop	{r7, pc}

080264e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80264e6:	b580      	push	{r7, lr}
 80264e8:	b08a      	sub	sp, #40	; 0x28
 80264ea:	af00      	add	r7, sp, #0
 80264ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80264f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80264f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	6a1b      	ldr	r3, [r3, #32]
 80264fe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8026500:	69fb      	ldr	r3, [r7, #28]
 8026502:	f003 030f 	and.w	r3, r3, #15
 8026506:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8026508:	69fb      	ldr	r3, [r7, #28]
 802650a:	0c5b      	lsrs	r3, r3, #17
 802650c:	f003 030f 	and.w	r3, r3, #15
 8026510:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026512:	69fb      	ldr	r3, [r7, #28]
 8026514:	091b      	lsrs	r3, r3, #4
 8026516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802651a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 802651c:	697b      	ldr	r3, [r7, #20]
 802651e:	2b02      	cmp	r3, #2
 8026520:	d004      	beq.n	802652c <HCD_RXQLVL_IRQHandler+0x46>
 8026522:	697b      	ldr	r3, [r7, #20]
 8026524:	2b05      	cmp	r3, #5
 8026526:	f000 80a9 	beq.w	802667c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 802652a:	e0aa      	b.n	8026682 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 802652c:	693b      	ldr	r3, [r7, #16]
 802652e:	2b00      	cmp	r3, #0
 8026530:	f000 80a6 	beq.w	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
 8026534:	687a      	ldr	r2, [r7, #4]
 8026536:	69bb      	ldr	r3, [r7, #24]
 8026538:	212c      	movs	r1, #44	; 0x2c
 802653a:	fb01 f303 	mul.w	r3, r1, r3
 802653e:	4413      	add	r3, r2
 8026540:	3344      	adds	r3, #68	; 0x44
 8026542:	681b      	ldr	r3, [r3, #0]
 8026544:	2b00      	cmp	r3, #0
 8026546:	f000 809b 	beq.w	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 802654a:	687a      	ldr	r2, [r7, #4]
 802654c:	69bb      	ldr	r3, [r7, #24]
 802654e:	212c      	movs	r1, #44	; 0x2c
 8026550:	fb01 f303 	mul.w	r3, r1, r3
 8026554:	4413      	add	r3, r2
 8026556:	3350      	adds	r3, #80	; 0x50
 8026558:	681a      	ldr	r2, [r3, #0]
 802655a:	693b      	ldr	r3, [r7, #16]
 802655c:	441a      	add	r2, r3
 802655e:	6879      	ldr	r1, [r7, #4]
 8026560:	69bb      	ldr	r3, [r7, #24]
 8026562:	202c      	movs	r0, #44	; 0x2c
 8026564:	fb00 f303 	mul.w	r3, r0, r3
 8026568:	440b      	add	r3, r1
 802656a:	334c      	adds	r3, #76	; 0x4c
 802656c:	681b      	ldr	r3, [r3, #0]
 802656e:	429a      	cmp	r2, r3
 8026570:	d87a      	bhi.n	8026668 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8026572:	687b      	ldr	r3, [r7, #4]
 8026574:	6818      	ldr	r0, [r3, #0]
 8026576:	687a      	ldr	r2, [r7, #4]
 8026578:	69bb      	ldr	r3, [r7, #24]
 802657a:	212c      	movs	r1, #44	; 0x2c
 802657c:	fb01 f303 	mul.w	r3, r1, r3
 8026580:	4413      	add	r3, r2
 8026582:	3344      	adds	r3, #68	; 0x44
 8026584:	681b      	ldr	r3, [r3, #0]
 8026586:	693a      	ldr	r2, [r7, #16]
 8026588:	b292      	uxth	r2, r2
 802658a:	4619      	mov	r1, r3
 802658c:	f003 ff2c 	bl	802a3e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8026590:	687a      	ldr	r2, [r7, #4]
 8026592:	69bb      	ldr	r3, [r7, #24]
 8026594:	212c      	movs	r1, #44	; 0x2c
 8026596:	fb01 f303 	mul.w	r3, r1, r3
 802659a:	4413      	add	r3, r2
 802659c:	3344      	adds	r3, #68	; 0x44
 802659e:	681a      	ldr	r2, [r3, #0]
 80265a0:	693b      	ldr	r3, [r7, #16]
 80265a2:	441a      	add	r2, r3
 80265a4:	6879      	ldr	r1, [r7, #4]
 80265a6:	69bb      	ldr	r3, [r7, #24]
 80265a8:	202c      	movs	r0, #44	; 0x2c
 80265aa:	fb00 f303 	mul.w	r3, r0, r3
 80265ae:	440b      	add	r3, r1
 80265b0:	3344      	adds	r3, #68	; 0x44
 80265b2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80265b4:	687a      	ldr	r2, [r7, #4]
 80265b6:	69bb      	ldr	r3, [r7, #24]
 80265b8:	212c      	movs	r1, #44	; 0x2c
 80265ba:	fb01 f303 	mul.w	r3, r1, r3
 80265be:	4413      	add	r3, r2
 80265c0:	3350      	adds	r3, #80	; 0x50
 80265c2:	681a      	ldr	r2, [r3, #0]
 80265c4:	693b      	ldr	r3, [r7, #16]
 80265c6:	441a      	add	r2, r3
 80265c8:	6879      	ldr	r1, [r7, #4]
 80265ca:	69bb      	ldr	r3, [r7, #24]
 80265cc:	202c      	movs	r0, #44	; 0x2c
 80265ce:	fb00 f303 	mul.w	r3, r0, r3
 80265d2:	440b      	add	r3, r1
 80265d4:	3350      	adds	r3, #80	; 0x50
 80265d6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80265d8:	69bb      	ldr	r3, [r7, #24]
 80265da:	015a      	lsls	r2, r3, #5
 80265dc:	6a3b      	ldr	r3, [r7, #32]
 80265de:	4413      	add	r3, r2
 80265e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265e4:	691b      	ldr	r3, [r3, #16]
 80265e6:	0cdb      	lsrs	r3, r3, #19
 80265e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80265ec:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80265ee:	687a      	ldr	r2, [r7, #4]
 80265f0:	69bb      	ldr	r3, [r7, #24]
 80265f2:	212c      	movs	r1, #44	; 0x2c
 80265f4:	fb01 f303 	mul.w	r3, r1, r3
 80265f8:	4413      	add	r3, r2
 80265fa:	3340      	adds	r3, #64	; 0x40
 80265fc:	881b      	ldrh	r3, [r3, #0]
 80265fe:	461a      	mov	r2, r3
 8026600:	693b      	ldr	r3, [r7, #16]
 8026602:	4293      	cmp	r3, r2
 8026604:	d13c      	bne.n	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
 8026606:	68fb      	ldr	r3, [r7, #12]
 8026608:	2b00      	cmp	r3, #0
 802660a:	d039      	beq.n	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 802660c:	69bb      	ldr	r3, [r7, #24]
 802660e:	015a      	lsls	r2, r3, #5
 8026610:	6a3b      	ldr	r3, [r7, #32]
 8026612:	4413      	add	r3, r2
 8026614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802661c:	68bb      	ldr	r3, [r7, #8]
 802661e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026622:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026624:	68bb      	ldr	r3, [r7, #8]
 8026626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802662a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 802662c:	69bb      	ldr	r3, [r7, #24]
 802662e:	015a      	lsls	r2, r3, #5
 8026630:	6a3b      	ldr	r3, [r7, #32]
 8026632:	4413      	add	r3, r2
 8026634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026638:	461a      	mov	r2, r3
 802663a:	68bb      	ldr	r3, [r7, #8]
 802663c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 802663e:	687a      	ldr	r2, [r7, #4]
 8026640:	69bb      	ldr	r3, [r7, #24]
 8026642:	212c      	movs	r1, #44	; 0x2c
 8026644:	fb01 f303 	mul.w	r3, r1, r3
 8026648:	4413      	add	r3, r2
 802664a:	3354      	adds	r3, #84	; 0x54
 802664c:	781b      	ldrb	r3, [r3, #0]
 802664e:	f083 0301 	eor.w	r3, r3, #1
 8026652:	b2d8      	uxtb	r0, r3
 8026654:	687a      	ldr	r2, [r7, #4]
 8026656:	69bb      	ldr	r3, [r7, #24]
 8026658:	212c      	movs	r1, #44	; 0x2c
 802665a:	fb01 f303 	mul.w	r3, r1, r3
 802665e:	4413      	add	r3, r2
 8026660:	3354      	adds	r3, #84	; 0x54
 8026662:	4602      	mov	r2, r0
 8026664:	701a      	strb	r2, [r3, #0]
      break;
 8026666:	e00b      	b.n	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026668:	687a      	ldr	r2, [r7, #4]
 802666a:	69bb      	ldr	r3, [r7, #24]
 802666c:	212c      	movs	r1, #44	; 0x2c
 802666e:	fb01 f303 	mul.w	r3, r1, r3
 8026672:	4413      	add	r3, r2
 8026674:	3360      	adds	r3, #96	; 0x60
 8026676:	2204      	movs	r2, #4
 8026678:	701a      	strb	r2, [r3, #0]
      break;
 802667a:	e001      	b.n	8026680 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 802667c:	bf00      	nop
 802667e:	e000      	b.n	8026682 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8026680:	bf00      	nop
  }
}
 8026682:	bf00      	nop
 8026684:	3728      	adds	r7, #40	; 0x28
 8026686:	46bd      	mov	sp, r7
 8026688:	bd80      	pop	{r7, pc}

0802668a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802668a:	b580      	push	{r7, lr}
 802668c:	b086      	sub	sp, #24
 802668e:	af00      	add	r7, sp, #0
 8026690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	681b      	ldr	r3, [r3, #0]
 8026696:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026698:	697b      	ldr	r3, [r7, #20]
 802669a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 802669c:	693b      	ldr	r3, [r7, #16]
 802669e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80266a2:	681b      	ldr	r3, [r3, #0]
 80266a4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80266a6:	693b      	ldr	r3, [r7, #16]
 80266a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80266ac:	681b      	ldr	r3, [r3, #0]
 80266ae:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80266b0:	68bb      	ldr	r3, [r7, #8]
 80266b2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80266b6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80266b8:	68fb      	ldr	r3, [r7, #12]
 80266ba:	f003 0302 	and.w	r3, r3, #2
 80266be:	2b02      	cmp	r3, #2
 80266c0:	d10b      	bne.n	80266da <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80266c2:	68fb      	ldr	r3, [r7, #12]
 80266c4:	f003 0301 	and.w	r3, r3, #1
 80266c8:	2b01      	cmp	r3, #1
 80266ca:	d102      	bne.n	80266d2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80266cc:	6878      	ldr	r0, [r7, #4]
 80266ce:	f006 fdb7 	bl	802d240 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80266d2:	68bb      	ldr	r3, [r7, #8]
 80266d4:	f043 0302 	orr.w	r3, r3, #2
 80266d8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80266da:	68fb      	ldr	r3, [r7, #12]
 80266dc:	f003 0308 	and.w	r3, r3, #8
 80266e0:	2b08      	cmp	r3, #8
 80266e2:	d132      	bne.n	802674a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80266e4:	68bb      	ldr	r3, [r7, #8]
 80266e6:	f043 0308 	orr.w	r3, r3, #8
 80266ea:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80266ec:	68fb      	ldr	r3, [r7, #12]
 80266ee:	f003 0304 	and.w	r3, r3, #4
 80266f2:	2b04      	cmp	r3, #4
 80266f4:	d126      	bne.n	8026744 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	699b      	ldr	r3, [r3, #24]
 80266fa:	2b02      	cmp	r3, #2
 80266fc:	d113      	bne.n	8026726 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80266fe:	68fb      	ldr	r3, [r7, #12]
 8026700:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026704:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026708:	d106      	bne.n	8026718 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802670a:	687b      	ldr	r3, [r7, #4]
 802670c:	681b      	ldr	r3, [r3, #0]
 802670e:	2102      	movs	r1, #2
 8026710:	4618      	mov	r0, r3
 8026712:	f003 ffd7 	bl	802a6c4 <USB_InitFSLSPClkSel>
 8026716:	e011      	b.n	802673c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8026718:	687b      	ldr	r3, [r7, #4]
 802671a:	681b      	ldr	r3, [r3, #0]
 802671c:	2101      	movs	r1, #1
 802671e:	4618      	mov	r0, r3
 8026720:	f003 ffd0 	bl	802a6c4 <USB_InitFSLSPClkSel>
 8026724:	e00a      	b.n	802673c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	68db      	ldr	r3, [r3, #12]
 802672a:	2b01      	cmp	r3, #1
 802672c:	d106      	bne.n	802673c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 802672e:	693b      	ldr	r3, [r7, #16]
 8026730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026734:	461a      	mov	r2, r3
 8026736:	f64e 2360 	movw	r3, #60000	; 0xea60
 802673a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 802673c:	6878      	ldr	r0, [r7, #4]
 802673e:	f006 fda9 	bl	802d294 <HAL_HCD_PortEnabled_Callback>
 8026742:	e002      	b.n	802674a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8026744:	6878      	ldr	r0, [r7, #4]
 8026746:	f006 fdb3 	bl	802d2b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 802674a:	68fb      	ldr	r3, [r7, #12]
 802674c:	f003 0320 	and.w	r3, r3, #32
 8026750:	2b20      	cmp	r3, #32
 8026752:	d103      	bne.n	802675c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8026754:	68bb      	ldr	r3, [r7, #8]
 8026756:	f043 0320 	orr.w	r3, r3, #32
 802675a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 802675c:	693b      	ldr	r3, [r7, #16]
 802675e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026762:	461a      	mov	r2, r3
 8026764:	68bb      	ldr	r3, [r7, #8]
 8026766:	6013      	str	r3, [r2, #0]
}
 8026768:	bf00      	nop
 802676a:	3718      	adds	r7, #24
 802676c:	46bd      	mov	sp, r7
 802676e:	bd80      	pop	{r7, pc}

08026770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026770:	b580      	push	{r7, lr}
 8026772:	b084      	sub	sp, #16
 8026774:	af00      	add	r7, sp, #0
 8026776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8026778:	687b      	ldr	r3, [r7, #4]
 802677a:	2b00      	cmp	r3, #0
 802677c:	d101      	bne.n	8026782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802677e:	2301      	movs	r3, #1
 8026780:	e12b      	b.n	80269da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8026782:	687b      	ldr	r3, [r7, #4]
 8026784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026788:	b2db      	uxtb	r3, r3
 802678a:	2b00      	cmp	r3, #0
 802678c:	d106      	bne.n	802679c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	2200      	movs	r2, #0
 8026792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8026796:	6878      	ldr	r0, [r7, #4]
 8026798:	f7fb f826 	bl	80217e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	2224      	movs	r2, #36	; 0x24
 80267a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	681b      	ldr	r3, [r3, #0]
 80267a8:	681a      	ldr	r2, [r3, #0]
 80267aa:	687b      	ldr	r3, [r7, #4]
 80267ac:	681b      	ldr	r3, [r3, #0]
 80267ae:	f022 0201 	bic.w	r2, r2, #1
 80267b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	681b      	ldr	r3, [r3, #0]
 80267b8:	681a      	ldr	r2, [r3, #0]
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	681b      	ldr	r3, [r3, #0]
 80267be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80267c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	681b      	ldr	r3, [r3, #0]
 80267c8:	681a      	ldr	r2, [r3, #0]
 80267ca:	687b      	ldr	r3, [r7, #4]
 80267cc:	681b      	ldr	r3, [r3, #0]
 80267ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80267d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80267d4:	f001 fa0c 	bl	8027bf0 <HAL_RCC_GetPCLK1Freq>
 80267d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	685b      	ldr	r3, [r3, #4]
 80267de:	4a81      	ldr	r2, [pc, #516]	; (80269e4 <HAL_I2C_Init+0x274>)
 80267e0:	4293      	cmp	r3, r2
 80267e2:	d807      	bhi.n	80267f4 <HAL_I2C_Init+0x84>
 80267e4:	68fb      	ldr	r3, [r7, #12]
 80267e6:	4a80      	ldr	r2, [pc, #512]	; (80269e8 <HAL_I2C_Init+0x278>)
 80267e8:	4293      	cmp	r3, r2
 80267ea:	bf94      	ite	ls
 80267ec:	2301      	movls	r3, #1
 80267ee:	2300      	movhi	r3, #0
 80267f0:	b2db      	uxtb	r3, r3
 80267f2:	e006      	b.n	8026802 <HAL_I2C_Init+0x92>
 80267f4:	68fb      	ldr	r3, [r7, #12]
 80267f6:	4a7d      	ldr	r2, [pc, #500]	; (80269ec <HAL_I2C_Init+0x27c>)
 80267f8:	4293      	cmp	r3, r2
 80267fa:	bf94      	ite	ls
 80267fc:	2301      	movls	r3, #1
 80267fe:	2300      	movhi	r3, #0
 8026800:	b2db      	uxtb	r3, r3
 8026802:	2b00      	cmp	r3, #0
 8026804:	d001      	beq.n	802680a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8026806:	2301      	movs	r3, #1
 8026808:	e0e7      	b.n	80269da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802680a:	68fb      	ldr	r3, [r7, #12]
 802680c:	4a78      	ldr	r2, [pc, #480]	; (80269f0 <HAL_I2C_Init+0x280>)
 802680e:	fba2 2303 	umull	r2, r3, r2, r3
 8026812:	0c9b      	lsrs	r3, r3, #18
 8026814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	681b      	ldr	r3, [r3, #0]
 802681a:	685b      	ldr	r3, [r3, #4]
 802681c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026820:	687b      	ldr	r3, [r7, #4]
 8026822:	681b      	ldr	r3, [r3, #0]
 8026824:	68ba      	ldr	r2, [r7, #8]
 8026826:	430a      	orrs	r2, r1
 8026828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	681b      	ldr	r3, [r3, #0]
 802682e:	6a1b      	ldr	r3, [r3, #32]
 8026830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026834:	687b      	ldr	r3, [r7, #4]
 8026836:	685b      	ldr	r3, [r3, #4]
 8026838:	4a6a      	ldr	r2, [pc, #424]	; (80269e4 <HAL_I2C_Init+0x274>)
 802683a:	4293      	cmp	r3, r2
 802683c:	d802      	bhi.n	8026844 <HAL_I2C_Init+0xd4>
 802683e:	68bb      	ldr	r3, [r7, #8]
 8026840:	3301      	adds	r3, #1
 8026842:	e009      	b.n	8026858 <HAL_I2C_Init+0xe8>
 8026844:	68bb      	ldr	r3, [r7, #8]
 8026846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802684a:	fb02 f303 	mul.w	r3, r2, r3
 802684e:	4a69      	ldr	r2, [pc, #420]	; (80269f4 <HAL_I2C_Init+0x284>)
 8026850:	fba2 2303 	umull	r2, r3, r2, r3
 8026854:	099b      	lsrs	r3, r3, #6
 8026856:	3301      	adds	r3, #1
 8026858:	687a      	ldr	r2, [r7, #4]
 802685a:	6812      	ldr	r2, [r2, #0]
 802685c:	430b      	orrs	r3, r1
 802685e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8026860:	687b      	ldr	r3, [r7, #4]
 8026862:	681b      	ldr	r3, [r3, #0]
 8026864:	69db      	ldr	r3, [r3, #28]
 8026866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802686a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	685b      	ldr	r3, [r3, #4]
 8026872:	495c      	ldr	r1, [pc, #368]	; (80269e4 <HAL_I2C_Init+0x274>)
 8026874:	428b      	cmp	r3, r1
 8026876:	d819      	bhi.n	80268ac <HAL_I2C_Init+0x13c>
 8026878:	68fb      	ldr	r3, [r7, #12]
 802687a:	1e59      	subs	r1, r3, #1
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	685b      	ldr	r3, [r3, #4]
 8026880:	005b      	lsls	r3, r3, #1
 8026882:	fbb1 f3f3 	udiv	r3, r1, r3
 8026886:	1c59      	adds	r1, r3, #1
 8026888:	f640 73fc 	movw	r3, #4092	; 0xffc
 802688c:	400b      	ands	r3, r1
 802688e:	2b00      	cmp	r3, #0
 8026890:	d00a      	beq.n	80268a8 <HAL_I2C_Init+0x138>
 8026892:	68fb      	ldr	r3, [r7, #12]
 8026894:	1e59      	subs	r1, r3, #1
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	685b      	ldr	r3, [r3, #4]
 802689a:	005b      	lsls	r3, r3, #1
 802689c:	fbb1 f3f3 	udiv	r3, r1, r3
 80268a0:	3301      	adds	r3, #1
 80268a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80268a6:	e051      	b.n	802694c <HAL_I2C_Init+0x1dc>
 80268a8:	2304      	movs	r3, #4
 80268aa:	e04f      	b.n	802694c <HAL_I2C_Init+0x1dc>
 80268ac:	687b      	ldr	r3, [r7, #4]
 80268ae:	689b      	ldr	r3, [r3, #8]
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d111      	bne.n	80268d8 <HAL_I2C_Init+0x168>
 80268b4:	68fb      	ldr	r3, [r7, #12]
 80268b6:	1e58      	subs	r0, r3, #1
 80268b8:	687b      	ldr	r3, [r7, #4]
 80268ba:	6859      	ldr	r1, [r3, #4]
 80268bc:	460b      	mov	r3, r1
 80268be:	005b      	lsls	r3, r3, #1
 80268c0:	440b      	add	r3, r1
 80268c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80268c6:	3301      	adds	r3, #1
 80268c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80268cc:	2b00      	cmp	r3, #0
 80268ce:	bf0c      	ite	eq
 80268d0:	2301      	moveq	r3, #1
 80268d2:	2300      	movne	r3, #0
 80268d4:	b2db      	uxtb	r3, r3
 80268d6:	e012      	b.n	80268fe <HAL_I2C_Init+0x18e>
 80268d8:	68fb      	ldr	r3, [r7, #12]
 80268da:	1e58      	subs	r0, r3, #1
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	6859      	ldr	r1, [r3, #4]
 80268e0:	460b      	mov	r3, r1
 80268e2:	009b      	lsls	r3, r3, #2
 80268e4:	440b      	add	r3, r1
 80268e6:	0099      	lsls	r1, r3, #2
 80268e8:	440b      	add	r3, r1
 80268ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80268ee:	3301      	adds	r3, #1
 80268f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	bf0c      	ite	eq
 80268f8:	2301      	moveq	r3, #1
 80268fa:	2300      	movne	r3, #0
 80268fc:	b2db      	uxtb	r3, r3
 80268fe:	2b00      	cmp	r3, #0
 8026900:	d001      	beq.n	8026906 <HAL_I2C_Init+0x196>
 8026902:	2301      	movs	r3, #1
 8026904:	e022      	b.n	802694c <HAL_I2C_Init+0x1dc>
 8026906:	687b      	ldr	r3, [r7, #4]
 8026908:	689b      	ldr	r3, [r3, #8]
 802690a:	2b00      	cmp	r3, #0
 802690c:	d10e      	bne.n	802692c <HAL_I2C_Init+0x1bc>
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	1e58      	subs	r0, r3, #1
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	6859      	ldr	r1, [r3, #4]
 8026916:	460b      	mov	r3, r1
 8026918:	005b      	lsls	r3, r3, #1
 802691a:	440b      	add	r3, r1
 802691c:	fbb0 f3f3 	udiv	r3, r0, r3
 8026920:	3301      	adds	r3, #1
 8026922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802692a:	e00f      	b.n	802694c <HAL_I2C_Init+0x1dc>
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	1e58      	subs	r0, r3, #1
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	6859      	ldr	r1, [r3, #4]
 8026934:	460b      	mov	r3, r1
 8026936:	009b      	lsls	r3, r3, #2
 8026938:	440b      	add	r3, r1
 802693a:	0099      	lsls	r1, r3, #2
 802693c:	440b      	add	r3, r1
 802693e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026942:	3301      	adds	r3, #1
 8026944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802694c:	6879      	ldr	r1, [r7, #4]
 802694e:	6809      	ldr	r1, [r1, #0]
 8026950:	4313      	orrs	r3, r2
 8026952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	681b      	ldr	r3, [r3, #0]
 802695a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802695e:	687b      	ldr	r3, [r7, #4]
 8026960:	69da      	ldr	r2, [r3, #28]
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	6a1b      	ldr	r3, [r3, #32]
 8026966:	431a      	orrs	r2, r3
 8026968:	687b      	ldr	r3, [r7, #4]
 802696a:	681b      	ldr	r3, [r3, #0]
 802696c:	430a      	orrs	r2, r1
 802696e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	681b      	ldr	r3, [r3, #0]
 8026974:	689b      	ldr	r3, [r3, #8]
 8026976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802697a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802697e:	687a      	ldr	r2, [r7, #4]
 8026980:	6911      	ldr	r1, [r2, #16]
 8026982:	687a      	ldr	r2, [r7, #4]
 8026984:	68d2      	ldr	r2, [r2, #12]
 8026986:	4311      	orrs	r1, r2
 8026988:	687a      	ldr	r2, [r7, #4]
 802698a:	6812      	ldr	r2, [r2, #0]
 802698c:	430b      	orrs	r3, r1
 802698e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026990:	687b      	ldr	r3, [r7, #4]
 8026992:	681b      	ldr	r3, [r3, #0]
 8026994:	68db      	ldr	r3, [r3, #12]
 8026996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	695a      	ldr	r2, [r3, #20]
 802699e:	687b      	ldr	r3, [r7, #4]
 80269a0:	699b      	ldr	r3, [r3, #24]
 80269a2:	431a      	orrs	r2, r3
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	681b      	ldr	r3, [r3, #0]
 80269a8:	430a      	orrs	r2, r1
 80269aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80269ac:	687b      	ldr	r3, [r7, #4]
 80269ae:	681b      	ldr	r3, [r3, #0]
 80269b0:	681a      	ldr	r2, [r3, #0]
 80269b2:	687b      	ldr	r3, [r7, #4]
 80269b4:	681b      	ldr	r3, [r3, #0]
 80269b6:	f042 0201 	orr.w	r2, r2, #1
 80269ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80269bc:	687b      	ldr	r3, [r7, #4]
 80269be:	2200      	movs	r2, #0
 80269c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80269c2:	687b      	ldr	r3, [r7, #4]
 80269c4:	2220      	movs	r2, #32
 80269c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	2200      	movs	r2, #0
 80269ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	2200      	movs	r2, #0
 80269d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80269d8:	2300      	movs	r3, #0
}
 80269da:	4618      	mov	r0, r3
 80269dc:	3710      	adds	r7, #16
 80269de:	46bd      	mov	sp, r7
 80269e0:	bd80      	pop	{r7, pc}
 80269e2:	bf00      	nop
 80269e4:	000186a0 	.word	0x000186a0
 80269e8:	001e847f 	.word	0x001e847f
 80269ec:	003d08ff 	.word	0x003d08ff
 80269f0:	431bde83 	.word	0x431bde83
 80269f4:	10624dd3 	.word	0x10624dd3

080269f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80269f8:	b480      	push	{r7}
 80269fa:	b083      	sub	sp, #12
 80269fc:	af00      	add	r7, sp, #0
 80269fe:	6078      	str	r0, [r7, #4]
 8026a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026a02:	687b      	ldr	r3, [r7, #4]
 8026a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026a08:	b2db      	uxtb	r3, r3
 8026a0a:	2b20      	cmp	r3, #32
 8026a0c:	d129      	bne.n	8026a62 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	2224      	movs	r2, #36	; 0x24
 8026a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026a16:	687b      	ldr	r3, [r7, #4]
 8026a18:	681b      	ldr	r3, [r3, #0]
 8026a1a:	681a      	ldr	r2, [r3, #0]
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	f022 0201 	bic.w	r2, r2, #1
 8026a24:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	681b      	ldr	r3, [r3, #0]
 8026a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026a2c:	687b      	ldr	r3, [r7, #4]
 8026a2e:	681b      	ldr	r3, [r3, #0]
 8026a30:	f022 0210 	bic.w	r2, r2, #16
 8026a34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	681b      	ldr	r3, [r3, #0]
 8026a3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026a3c:	687b      	ldr	r3, [r7, #4]
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	683a      	ldr	r2, [r7, #0]
 8026a42:	430a      	orrs	r2, r1
 8026a44:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	681b      	ldr	r3, [r3, #0]
 8026a4a:	681a      	ldr	r2, [r3, #0]
 8026a4c:	687b      	ldr	r3, [r7, #4]
 8026a4e:	681b      	ldr	r3, [r3, #0]
 8026a50:	f042 0201 	orr.w	r2, r2, #1
 8026a54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	2220      	movs	r2, #32
 8026a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026a5e:	2300      	movs	r3, #0
 8026a60:	e000      	b.n	8026a64 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026a62:	2302      	movs	r3, #2
  }
}
 8026a64:	4618      	mov	r0, r3
 8026a66:	370c      	adds	r7, #12
 8026a68:	46bd      	mov	sp, r7
 8026a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a6e:	4770      	bx	lr

08026a70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026a70:	b480      	push	{r7}
 8026a72:	b085      	sub	sp, #20
 8026a74:	af00      	add	r7, sp, #0
 8026a76:	6078      	str	r0, [r7, #4]
 8026a78:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8026a7a:	2300      	movs	r3, #0
 8026a7c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026a84:	b2db      	uxtb	r3, r3
 8026a86:	2b20      	cmp	r3, #32
 8026a88:	d12a      	bne.n	8026ae0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026a8a:	687b      	ldr	r3, [r7, #4]
 8026a8c:	2224      	movs	r2, #36	; 0x24
 8026a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	681b      	ldr	r3, [r3, #0]
 8026a96:	681a      	ldr	r2, [r3, #0]
 8026a98:	687b      	ldr	r3, [r7, #4]
 8026a9a:	681b      	ldr	r3, [r3, #0]
 8026a9c:	f022 0201 	bic.w	r2, r2, #1
 8026aa0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	681b      	ldr	r3, [r3, #0]
 8026aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026aa8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8026aaa:	89fb      	ldrh	r3, [r7, #14]
 8026aac:	f023 030f 	bic.w	r3, r3, #15
 8026ab0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026ab2:	683b      	ldr	r3, [r7, #0]
 8026ab4:	b29a      	uxth	r2, r3
 8026ab6:	89fb      	ldrh	r3, [r7, #14]
 8026ab8:	4313      	orrs	r3, r2
 8026aba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026abc:	687b      	ldr	r3, [r7, #4]
 8026abe:	681b      	ldr	r3, [r3, #0]
 8026ac0:	89fa      	ldrh	r2, [r7, #14]
 8026ac2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026ac4:	687b      	ldr	r3, [r7, #4]
 8026ac6:	681b      	ldr	r3, [r3, #0]
 8026ac8:	681a      	ldr	r2, [r3, #0]
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	f042 0201 	orr.w	r2, r2, #1
 8026ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	2220      	movs	r2, #32
 8026ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026adc:	2300      	movs	r3, #0
 8026ade:	e000      	b.n	8026ae2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026ae0:	2302      	movs	r3, #2
  }
}
 8026ae2:	4618      	mov	r0, r3
 8026ae4:	3714      	adds	r7, #20
 8026ae6:	46bd      	mov	sp, r7
 8026ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026aec:	4770      	bx	lr
	...

08026af0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026af0:	b580      	push	{r7, lr}
 8026af2:	b084      	sub	sp, #16
 8026af4:	af00      	add	r7, sp, #0
 8026af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	d101      	bne.n	8026b02 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026afe:	2301      	movs	r3, #1
 8026b00:	e0bf      	b.n	8026c82 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8026b08:	b2db      	uxtb	r3, r3
 8026b0a:	2b00      	cmp	r3, #0
 8026b0c:	d106      	bne.n	8026b1c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026b0e:	687b      	ldr	r3, [r7, #4]
 8026b10:	2200      	movs	r2, #0
 8026b12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8026b16:	6878      	ldr	r0, [r7, #4]
 8026b18:	f7fa fed0 	bl	80218bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026b1c:	687b      	ldr	r3, [r7, #4]
 8026b1e:	2202      	movs	r2, #2
 8026b20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026b24:	687b      	ldr	r3, [r7, #4]
 8026b26:	681b      	ldr	r3, [r3, #0]
 8026b28:	699a      	ldr	r2, [r3, #24]
 8026b2a:	687b      	ldr	r3, [r7, #4]
 8026b2c:	681b      	ldr	r3, [r3, #0]
 8026b2e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026b32:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	681b      	ldr	r3, [r3, #0]
 8026b38:	6999      	ldr	r1, [r3, #24]
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	685a      	ldr	r2, [r3, #4]
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	689b      	ldr	r3, [r3, #8]
 8026b42:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026b44:	687b      	ldr	r3, [r7, #4]
 8026b46:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026b48:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026b4a:	687b      	ldr	r3, [r7, #4]
 8026b4c:	691b      	ldr	r3, [r3, #16]
 8026b4e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026b50:	687b      	ldr	r3, [r7, #4]
 8026b52:	681b      	ldr	r3, [r3, #0]
 8026b54:	430a      	orrs	r2, r1
 8026b56:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026b58:	687b      	ldr	r3, [r7, #4]
 8026b5a:	681b      	ldr	r3, [r3, #0]
 8026b5c:	6899      	ldr	r1, [r3, #8]
 8026b5e:	687b      	ldr	r3, [r7, #4]
 8026b60:	681a      	ldr	r2, [r3, #0]
 8026b62:	4b4a      	ldr	r3, [pc, #296]	; (8026c8c <HAL_LTDC_Init+0x19c>)
 8026b64:	400b      	ands	r3, r1
 8026b66:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	695b      	ldr	r3, [r3, #20]
 8026b6c:	041b      	lsls	r3, r3, #16
 8026b6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	681b      	ldr	r3, [r3, #0]
 8026b74:	6899      	ldr	r1, [r3, #8]
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	699a      	ldr	r2, [r3, #24]
 8026b7a:	68fb      	ldr	r3, [r7, #12]
 8026b7c:	431a      	orrs	r2, r3
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	681b      	ldr	r3, [r3, #0]
 8026b82:	430a      	orrs	r2, r1
 8026b84:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026b86:	687b      	ldr	r3, [r7, #4]
 8026b88:	681b      	ldr	r3, [r3, #0]
 8026b8a:	68d9      	ldr	r1, [r3, #12]
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	681a      	ldr	r2, [r3, #0]
 8026b90:	4b3e      	ldr	r3, [pc, #248]	; (8026c8c <HAL_LTDC_Init+0x19c>)
 8026b92:	400b      	ands	r3, r1
 8026b94:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	69db      	ldr	r3, [r3, #28]
 8026b9a:	041b      	lsls	r3, r3, #16
 8026b9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026b9e:	687b      	ldr	r3, [r7, #4]
 8026ba0:	681b      	ldr	r3, [r3, #0]
 8026ba2:	68d9      	ldr	r1, [r3, #12]
 8026ba4:	687b      	ldr	r3, [r7, #4]
 8026ba6:	6a1a      	ldr	r2, [r3, #32]
 8026ba8:	68fb      	ldr	r3, [r7, #12]
 8026baa:	431a      	orrs	r2, r3
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	430a      	orrs	r2, r1
 8026bb2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	681b      	ldr	r3, [r3, #0]
 8026bb8:	6919      	ldr	r1, [r3, #16]
 8026bba:	687b      	ldr	r3, [r7, #4]
 8026bbc:	681a      	ldr	r2, [r3, #0]
 8026bbe:	4b33      	ldr	r3, [pc, #204]	; (8026c8c <HAL_LTDC_Init+0x19c>)
 8026bc0:	400b      	ands	r3, r1
 8026bc2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026bc4:	687b      	ldr	r3, [r7, #4]
 8026bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026bc8:	041b      	lsls	r3, r3, #16
 8026bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026bcc:	687b      	ldr	r3, [r7, #4]
 8026bce:	681b      	ldr	r3, [r3, #0]
 8026bd0:	6919      	ldr	r1, [r3, #16]
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026bd6:	68fb      	ldr	r3, [r7, #12]
 8026bd8:	431a      	orrs	r2, r3
 8026bda:	687b      	ldr	r3, [r7, #4]
 8026bdc:	681b      	ldr	r3, [r3, #0]
 8026bde:	430a      	orrs	r2, r1
 8026be0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026be2:	687b      	ldr	r3, [r7, #4]
 8026be4:	681b      	ldr	r3, [r3, #0]
 8026be6:	6959      	ldr	r1, [r3, #20]
 8026be8:	687b      	ldr	r3, [r7, #4]
 8026bea:	681a      	ldr	r2, [r3, #0]
 8026bec:	4b27      	ldr	r3, [pc, #156]	; (8026c8c <HAL_LTDC_Init+0x19c>)
 8026bee:	400b      	ands	r3, r1
 8026bf0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026bf6:	041b      	lsls	r3, r3, #16
 8026bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	681b      	ldr	r3, [r3, #0]
 8026bfe:	6959      	ldr	r1, [r3, #20]
 8026c00:	687b      	ldr	r3, [r7, #4]
 8026c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026c04:	68fb      	ldr	r3, [r7, #12]
 8026c06:	431a      	orrs	r2, r3
 8026c08:	687b      	ldr	r3, [r7, #4]
 8026c0a:	681b      	ldr	r3, [r3, #0]
 8026c0c:	430a      	orrs	r2, r1
 8026c0e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026c10:	687b      	ldr	r3, [r7, #4]
 8026c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026c16:	021b      	lsls	r3, r3, #8
 8026c18:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026c20:	041b      	lsls	r3, r3, #16
 8026c22:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	681b      	ldr	r3, [r3, #0]
 8026c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	681b      	ldr	r3, [r3, #0]
 8026c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026c3a:	68ba      	ldr	r2, [r7, #8]
 8026c3c:	68fb      	ldr	r3, [r7, #12]
 8026c3e:	4313      	orrs	r3, r2
 8026c40:	687a      	ldr	r2, [r7, #4]
 8026c42:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026c46:	431a      	orrs	r2, r3
 8026c48:	687b      	ldr	r3, [r7, #4]
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	430a      	orrs	r2, r1
 8026c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	681b      	ldr	r3, [r3, #0]
 8026c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026c56:	687b      	ldr	r3, [r7, #4]
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	f042 0206 	orr.w	r2, r2, #6
 8026c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	699a      	ldr	r2, [r3, #24]
 8026c66:	687b      	ldr	r3, [r7, #4]
 8026c68:	681b      	ldr	r3, [r3, #0]
 8026c6a:	f042 0201 	orr.w	r2, r2, #1
 8026c6e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026c70:	687b      	ldr	r3, [r7, #4]
 8026c72:	2200      	movs	r2, #0
 8026c74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026c78:	687b      	ldr	r3, [r7, #4]
 8026c7a:	2201      	movs	r2, #1
 8026c7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026c80:	2300      	movs	r3, #0
}
 8026c82:	4618      	mov	r0, r3
 8026c84:	3710      	adds	r7, #16
 8026c86:	46bd      	mov	sp, r7
 8026c88:	bd80      	pop	{r7, pc}
 8026c8a:	bf00      	nop
 8026c8c:	f000f800 	.word	0xf000f800

08026c90 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026c90:	b580      	push	{r7, lr}
 8026c92:	b084      	sub	sp, #16
 8026c94:	af00      	add	r7, sp, #0
 8026c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026ca0:	687b      	ldr	r3, [r7, #4]
 8026ca2:	681b      	ldr	r3, [r3, #0]
 8026ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026ca6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026ca8:	68fb      	ldr	r3, [r7, #12]
 8026caa:	f003 0304 	and.w	r3, r3, #4
 8026cae:	2b00      	cmp	r3, #0
 8026cb0:	d023      	beq.n	8026cfa <HAL_LTDC_IRQHandler+0x6a>
 8026cb2:	68bb      	ldr	r3, [r7, #8]
 8026cb4:	f003 0304 	and.w	r3, r3, #4
 8026cb8:	2b00      	cmp	r3, #0
 8026cba:	d01e      	beq.n	8026cfa <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	f022 0204 	bic.w	r2, r2, #4
 8026cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026ccc:	687b      	ldr	r3, [r7, #4]
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	2204      	movs	r2, #4
 8026cd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026cd4:	687b      	ldr	r3, [r7, #4]
 8026cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026cda:	f043 0201 	orr.w	r2, r3, #1
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	2204      	movs	r2, #4
 8026ce8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	2200      	movs	r2, #0
 8026cf0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026cf4:	6878      	ldr	r0, [r7, #4]
 8026cf6:	f000 f86f 	bl	8026dd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026cfa:	68fb      	ldr	r3, [r7, #12]
 8026cfc:	f003 0302 	and.w	r3, r3, #2
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	d023      	beq.n	8026d4c <HAL_LTDC_IRQHandler+0xbc>
 8026d04:	68bb      	ldr	r3, [r7, #8]
 8026d06:	f003 0302 	and.w	r3, r3, #2
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	d01e      	beq.n	8026d4c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026d0e:	687b      	ldr	r3, [r7, #4]
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	f022 0202 	bic.w	r2, r2, #2
 8026d1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	681b      	ldr	r3, [r3, #0]
 8026d22:	2202      	movs	r2, #2
 8026d24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026d26:	687b      	ldr	r3, [r7, #4]
 8026d28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026d2c:	f043 0202 	orr.w	r2, r3, #2
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	2204      	movs	r2, #4
 8026d3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	2200      	movs	r2, #0
 8026d42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026d46:	6878      	ldr	r0, [r7, #4]
 8026d48:	f000 f846 	bl	8026dd8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026d4c:	68fb      	ldr	r3, [r7, #12]
 8026d4e:	f003 0301 	and.w	r3, r3, #1
 8026d52:	2b00      	cmp	r3, #0
 8026d54:	d01b      	beq.n	8026d8e <HAL_LTDC_IRQHandler+0xfe>
 8026d56:	68bb      	ldr	r3, [r7, #8]
 8026d58:	f003 0301 	and.w	r3, r3, #1
 8026d5c:	2b00      	cmp	r3, #0
 8026d5e:	d016      	beq.n	8026d8e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	681b      	ldr	r3, [r3, #0]
 8026d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026d66:	687b      	ldr	r3, [r7, #4]
 8026d68:	681b      	ldr	r3, [r3, #0]
 8026d6a:	f022 0201 	bic.w	r2, r2, #1
 8026d6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026d70:	687b      	ldr	r3, [r7, #4]
 8026d72:	681b      	ldr	r3, [r3, #0]
 8026d74:	2201      	movs	r2, #1
 8026d76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	2201      	movs	r2, #1
 8026d7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026d80:	687b      	ldr	r3, [r7, #4]
 8026d82:	2200      	movs	r2, #0
 8026d84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8026d88:	6878      	ldr	r0, [r7, #4]
 8026d8a:	f000 f82f 	bl	8026dec <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026d8e:	68fb      	ldr	r3, [r7, #12]
 8026d90:	f003 0308 	and.w	r3, r3, #8
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d01b      	beq.n	8026dd0 <HAL_LTDC_IRQHandler+0x140>
 8026d98:	68bb      	ldr	r3, [r7, #8]
 8026d9a:	f003 0308 	and.w	r3, r3, #8
 8026d9e:	2b00      	cmp	r3, #0
 8026da0:	d016      	beq.n	8026dd0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	f022 0208 	bic.w	r2, r2, #8
 8026db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026db2:	687b      	ldr	r3, [r7, #4]
 8026db4:	681b      	ldr	r3, [r3, #0]
 8026db6:	2208      	movs	r2, #8
 8026db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	2201      	movs	r2, #1
 8026dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026dc2:	687b      	ldr	r3, [r7, #4]
 8026dc4:	2200      	movs	r2, #0
 8026dc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026dca:	6878      	ldr	r0, [r7, #4]
 8026dcc:	f000 f818 	bl	8026e00 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026dd0:	bf00      	nop
 8026dd2:	3710      	adds	r7, #16
 8026dd4:	46bd      	mov	sp, r7
 8026dd6:	bd80      	pop	{r7, pc}

08026dd8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026dd8:	b480      	push	{r7}
 8026dda:	b083      	sub	sp, #12
 8026ddc:	af00      	add	r7, sp, #0
 8026dde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026de0:	bf00      	nop
 8026de2:	370c      	adds	r7, #12
 8026de4:	46bd      	mov	sp, r7
 8026de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dea:	4770      	bx	lr

08026dec <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026dec:	b480      	push	{r7}
 8026dee:	b083      	sub	sp, #12
 8026df0:	af00      	add	r7, sp, #0
 8026df2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026df4:	bf00      	nop
 8026df6:	370c      	adds	r7, #12
 8026df8:	46bd      	mov	sp, r7
 8026dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dfe:	4770      	bx	lr

08026e00 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026e00:	b480      	push	{r7}
 8026e02:	b083      	sub	sp, #12
 8026e04:	af00      	add	r7, sp, #0
 8026e06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026e08:	bf00      	nop
 8026e0a:	370c      	adds	r7, #12
 8026e0c:	46bd      	mov	sp, r7
 8026e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e12:	4770      	bx	lr

08026e14 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026e14:	b5b0      	push	{r4, r5, r7, lr}
 8026e16:	b084      	sub	sp, #16
 8026e18:	af00      	add	r7, sp, #0
 8026e1a:	60f8      	str	r0, [r7, #12]
 8026e1c:	60b9      	str	r1, [r7, #8]
 8026e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026e20:	68fb      	ldr	r3, [r7, #12]
 8026e22:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026e26:	2b01      	cmp	r3, #1
 8026e28:	d101      	bne.n	8026e2e <HAL_LTDC_ConfigLayer+0x1a>
 8026e2a:	2302      	movs	r3, #2
 8026e2c:	e02c      	b.n	8026e88 <HAL_LTDC_ConfigLayer+0x74>
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	2201      	movs	r2, #1
 8026e32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026e36:	68fb      	ldr	r3, [r7, #12]
 8026e38:	2202      	movs	r2, #2
 8026e3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026e3e:	68fa      	ldr	r2, [r7, #12]
 8026e40:	687b      	ldr	r3, [r7, #4]
 8026e42:	2134      	movs	r1, #52	; 0x34
 8026e44:	fb01 f303 	mul.w	r3, r1, r3
 8026e48:	4413      	add	r3, r2
 8026e4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026e4e:	68bb      	ldr	r3, [r7, #8]
 8026e50:	4614      	mov	r4, r2
 8026e52:	461d      	mov	r5, r3
 8026e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026e60:	682b      	ldr	r3, [r5, #0]
 8026e62:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026e64:	687a      	ldr	r2, [r7, #4]
 8026e66:	68b9      	ldr	r1, [r7, #8]
 8026e68:	68f8      	ldr	r0, [r7, #12]
 8026e6a:	f000 f8b9 	bl	8026fe0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026e6e:	68fb      	ldr	r3, [r7, #12]
 8026e70:	681b      	ldr	r3, [r3, #0]
 8026e72:	2201      	movs	r2, #1
 8026e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026e76:	68fb      	ldr	r3, [r7, #12]
 8026e78:	2201      	movs	r2, #1
 8026e7a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026e7e:	68fb      	ldr	r3, [r7, #12]
 8026e80:	2200      	movs	r2, #0
 8026e82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026e86:	2300      	movs	r3, #0
}
 8026e88:	4618      	mov	r0, r3
 8026e8a:	3710      	adds	r7, #16
 8026e8c:	46bd      	mov	sp, r7
 8026e8e:	bdb0      	pop	{r4, r5, r7, pc}

08026e90 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026e90:	b480      	push	{r7}
 8026e92:	b085      	sub	sp, #20
 8026e94:	af00      	add	r7, sp, #0
 8026e96:	60f8      	str	r0, [r7, #12]
 8026e98:	60b9      	str	r1, [r7, #8]
 8026e9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026e9c:	68fb      	ldr	r3, [r7, #12]
 8026e9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026ea2:	2b01      	cmp	r3, #1
 8026ea4:	d101      	bne.n	8026eaa <HAL_LTDC_ConfigColorKeying+0x1a>
 8026ea6:	2302      	movs	r3, #2
 8026ea8:	e030      	b.n	8026f0c <HAL_LTDC_ConfigColorKeying+0x7c>
 8026eaa:	68fb      	ldr	r3, [r7, #12]
 8026eac:	2201      	movs	r2, #1
 8026eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026eb2:	68fb      	ldr	r3, [r7, #12]
 8026eb4:	2202      	movs	r2, #2
 8026eb6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8026eba:	68fb      	ldr	r3, [r7, #12]
 8026ebc:	681b      	ldr	r3, [r3, #0]
 8026ebe:	461a      	mov	r2, r3
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	01db      	lsls	r3, r3, #7
 8026ec4:	4413      	add	r3, r2
 8026ec6:	3384      	adds	r3, #132	; 0x84
 8026ec8:	68db      	ldr	r3, [r3, #12]
 8026eca:	68fa      	ldr	r2, [r7, #12]
 8026ecc:	6812      	ldr	r2, [r2, #0]
 8026ece:	4611      	mov	r1, r2
 8026ed0:	687a      	ldr	r2, [r7, #4]
 8026ed2:	01d2      	lsls	r2, r2, #7
 8026ed4:	440a      	add	r2, r1
 8026ed6:	3284      	adds	r2, #132	; 0x84
 8026ed8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8026edc:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8026ede:	68fb      	ldr	r3, [r7, #12]
 8026ee0:	681b      	ldr	r3, [r3, #0]
 8026ee2:	461a      	mov	r2, r3
 8026ee4:	687b      	ldr	r3, [r7, #4]
 8026ee6:	01db      	lsls	r3, r3, #7
 8026ee8:	4413      	add	r3, r2
 8026eea:	3384      	adds	r3, #132	; 0x84
 8026eec:	461a      	mov	r2, r3
 8026eee:	68bb      	ldr	r3, [r7, #8]
 8026ef0:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026ef2:	68fb      	ldr	r3, [r7, #12]
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	2201      	movs	r2, #1
 8026ef8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026efa:	68fb      	ldr	r3, [r7, #12]
 8026efc:	2201      	movs	r2, #1
 8026efe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	2200      	movs	r2, #0
 8026f06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026f0a:	2300      	movs	r3, #0
}
 8026f0c:	4618      	mov	r0, r3
 8026f0e:	3714      	adds	r7, #20
 8026f10:	46bd      	mov	sp, r7
 8026f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f16:	4770      	bx	lr

08026f18 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8026f18:	b480      	push	{r7}
 8026f1a:	b083      	sub	sp, #12
 8026f1c:	af00      	add	r7, sp, #0
 8026f1e:	6078      	str	r0, [r7, #4]
 8026f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026f28:	2b01      	cmp	r3, #1
 8026f2a:	d101      	bne.n	8026f30 <HAL_LTDC_EnableColorKeying+0x18>
 8026f2c:	2302      	movs	r3, #2
 8026f2e:	e026      	b.n	8026f7e <HAL_LTDC_EnableColorKeying+0x66>
 8026f30:	687b      	ldr	r3, [r7, #4]
 8026f32:	2201      	movs	r2, #1
 8026f34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026f38:	687b      	ldr	r3, [r7, #4]
 8026f3a:	2202      	movs	r2, #2
 8026f3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8026f40:	687b      	ldr	r3, [r7, #4]
 8026f42:	681b      	ldr	r3, [r3, #0]
 8026f44:	461a      	mov	r2, r3
 8026f46:	683b      	ldr	r3, [r7, #0]
 8026f48:	01db      	lsls	r3, r3, #7
 8026f4a:	4413      	add	r3, r2
 8026f4c:	3384      	adds	r3, #132	; 0x84
 8026f4e:	681b      	ldr	r3, [r3, #0]
 8026f50:	687a      	ldr	r2, [r7, #4]
 8026f52:	6812      	ldr	r2, [r2, #0]
 8026f54:	4611      	mov	r1, r2
 8026f56:	683a      	ldr	r2, [r7, #0]
 8026f58:	01d2      	lsls	r2, r2, #7
 8026f5a:	440a      	add	r2, r1
 8026f5c:	3284      	adds	r2, #132	; 0x84
 8026f5e:	f043 0302 	orr.w	r3, r3, #2
 8026f62:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026f64:	687b      	ldr	r3, [r7, #4]
 8026f66:	681b      	ldr	r3, [r3, #0]
 8026f68:	2201      	movs	r2, #1
 8026f6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	2201      	movs	r2, #1
 8026f70:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026f74:	687b      	ldr	r3, [r7, #4]
 8026f76:	2200      	movs	r2, #0
 8026f78:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026f7c:	2300      	movs	r3, #0
}
 8026f7e:	4618      	mov	r0, r3
 8026f80:	370c      	adds	r7, #12
 8026f82:	46bd      	mov	sp, r7
 8026f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f88:	4770      	bx	lr
	...

08026f8c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8026f8c:	b480      	push	{r7}
 8026f8e:	b083      	sub	sp, #12
 8026f90:	af00      	add	r7, sp, #0
 8026f92:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f94:	687b      	ldr	r3, [r7, #4]
 8026f96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026f9a:	2b01      	cmp	r3, #1
 8026f9c:	d101      	bne.n	8026fa2 <HAL_LTDC_EnableDither+0x16>
 8026f9e:	2302      	movs	r3, #2
 8026fa0:	e016      	b.n	8026fd0 <HAL_LTDC_EnableDither+0x44>
 8026fa2:	687b      	ldr	r3, [r7, #4]
 8026fa4:	2201      	movs	r2, #1
 8026fa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026faa:	687b      	ldr	r3, [r7, #4]
 8026fac:	2202      	movs	r2, #2
 8026fae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8026fb2:	4b0a      	ldr	r3, [pc, #40]	; (8026fdc <HAL_LTDC_EnableDither+0x50>)
 8026fb4:	699b      	ldr	r3, [r3, #24]
 8026fb6:	4a09      	ldr	r2, [pc, #36]	; (8026fdc <HAL_LTDC_EnableDither+0x50>)
 8026fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8026fbc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026fbe:	687b      	ldr	r3, [r7, #4]
 8026fc0:	2201      	movs	r2, #1
 8026fc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026fc6:	687b      	ldr	r3, [r7, #4]
 8026fc8:	2200      	movs	r2, #0
 8026fca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026fce:	2300      	movs	r3, #0
}
 8026fd0:	4618      	mov	r0, r3
 8026fd2:	370c      	adds	r7, #12
 8026fd4:	46bd      	mov	sp, r7
 8026fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fda:	4770      	bx	lr
 8026fdc:	40016800 	.word	0x40016800

08026fe0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026fe0:	b480      	push	{r7}
 8026fe2:	b089      	sub	sp, #36	; 0x24
 8026fe4:	af00      	add	r7, sp, #0
 8026fe6:	60f8      	str	r0, [r7, #12]
 8026fe8:	60b9      	str	r1, [r7, #8]
 8026fea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8026fec:	68bb      	ldr	r3, [r7, #8]
 8026fee:	685a      	ldr	r2, [r3, #4]
 8026ff0:	68fb      	ldr	r3, [r7, #12]
 8026ff2:	681b      	ldr	r3, [r3, #0]
 8026ff4:	68db      	ldr	r3, [r3, #12]
 8026ff6:	0c1b      	lsrs	r3, r3, #16
 8026ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026ffc:	4413      	add	r3, r2
 8026ffe:	041b      	lsls	r3, r3, #16
 8027000:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8027002:	68fb      	ldr	r3, [r7, #12]
 8027004:	681b      	ldr	r3, [r3, #0]
 8027006:	461a      	mov	r2, r3
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	01db      	lsls	r3, r3, #7
 802700c:	4413      	add	r3, r2
 802700e:	3384      	adds	r3, #132	; 0x84
 8027010:	685b      	ldr	r3, [r3, #4]
 8027012:	68fa      	ldr	r2, [r7, #12]
 8027014:	6812      	ldr	r2, [r2, #0]
 8027016:	4611      	mov	r1, r2
 8027018:	687a      	ldr	r2, [r7, #4]
 802701a:	01d2      	lsls	r2, r2, #7
 802701c:	440a      	add	r2, r1
 802701e:	3284      	adds	r2, #132	; 0x84
 8027020:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8027024:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8027026:	68bb      	ldr	r3, [r7, #8]
 8027028:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802702a:	68fb      	ldr	r3, [r7, #12]
 802702c:	681b      	ldr	r3, [r3, #0]
 802702e:	68db      	ldr	r3, [r3, #12]
 8027030:	0c1b      	lsrs	r3, r3, #16
 8027032:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8027036:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8027038:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802703a:	68fb      	ldr	r3, [r7, #12]
 802703c:	681b      	ldr	r3, [r3, #0]
 802703e:	4619      	mov	r1, r3
 8027040:	687b      	ldr	r3, [r7, #4]
 8027042:	01db      	lsls	r3, r3, #7
 8027044:	440b      	add	r3, r1
 8027046:	3384      	adds	r3, #132	; 0x84
 8027048:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802704a:	69fb      	ldr	r3, [r7, #28]
 802704c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802704e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8027050:	68bb      	ldr	r3, [r7, #8]
 8027052:	68da      	ldr	r2, [r3, #12]
 8027054:	68fb      	ldr	r3, [r7, #12]
 8027056:	681b      	ldr	r3, [r3, #0]
 8027058:	68db      	ldr	r3, [r3, #12]
 802705a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802705e:	4413      	add	r3, r2
 8027060:	041b      	lsls	r3, r3, #16
 8027062:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8027064:	68fb      	ldr	r3, [r7, #12]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	461a      	mov	r2, r3
 802706a:	687b      	ldr	r3, [r7, #4]
 802706c:	01db      	lsls	r3, r3, #7
 802706e:	4413      	add	r3, r2
 8027070:	3384      	adds	r3, #132	; 0x84
 8027072:	689b      	ldr	r3, [r3, #8]
 8027074:	68fa      	ldr	r2, [r7, #12]
 8027076:	6812      	ldr	r2, [r2, #0]
 8027078:	4611      	mov	r1, r2
 802707a:	687a      	ldr	r2, [r7, #4]
 802707c:	01d2      	lsls	r2, r2, #7
 802707e:	440a      	add	r2, r1
 8027080:	3284      	adds	r2, #132	; 0x84
 8027082:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8027086:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8027088:	68bb      	ldr	r3, [r7, #8]
 802708a:	689a      	ldr	r2, [r3, #8]
 802708c:	68fb      	ldr	r3, [r7, #12]
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	68db      	ldr	r3, [r3, #12]
 8027092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8027096:	4413      	add	r3, r2
 8027098:	1c5a      	adds	r2, r3, #1
 802709a:	68fb      	ldr	r3, [r7, #12]
 802709c:	681b      	ldr	r3, [r3, #0]
 802709e:	4619      	mov	r1, r3
 80270a0:	687b      	ldr	r3, [r7, #4]
 80270a2:	01db      	lsls	r3, r3, #7
 80270a4:	440b      	add	r3, r1
 80270a6:	3384      	adds	r3, #132	; 0x84
 80270a8:	4619      	mov	r1, r3
 80270aa:	69fb      	ldr	r3, [r7, #28]
 80270ac:	4313      	orrs	r3, r2
 80270ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80270b0:	68fb      	ldr	r3, [r7, #12]
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	461a      	mov	r2, r3
 80270b6:	687b      	ldr	r3, [r7, #4]
 80270b8:	01db      	lsls	r3, r3, #7
 80270ba:	4413      	add	r3, r2
 80270bc:	3384      	adds	r3, #132	; 0x84
 80270be:	691b      	ldr	r3, [r3, #16]
 80270c0:	68fa      	ldr	r2, [r7, #12]
 80270c2:	6812      	ldr	r2, [r2, #0]
 80270c4:	4611      	mov	r1, r2
 80270c6:	687a      	ldr	r2, [r7, #4]
 80270c8:	01d2      	lsls	r2, r2, #7
 80270ca:	440a      	add	r2, r1
 80270cc:	3284      	adds	r2, #132	; 0x84
 80270ce:	f023 0307 	bic.w	r3, r3, #7
 80270d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80270d4:	68fb      	ldr	r3, [r7, #12]
 80270d6:	681b      	ldr	r3, [r3, #0]
 80270d8:	461a      	mov	r2, r3
 80270da:	687b      	ldr	r3, [r7, #4]
 80270dc:	01db      	lsls	r3, r3, #7
 80270de:	4413      	add	r3, r2
 80270e0:	3384      	adds	r3, #132	; 0x84
 80270e2:	461a      	mov	r2, r3
 80270e4:	68bb      	ldr	r3, [r7, #8]
 80270e6:	691b      	ldr	r3, [r3, #16]
 80270e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80270ea:	68bb      	ldr	r3, [r7, #8]
 80270ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80270f0:	021b      	lsls	r3, r3, #8
 80270f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80270f4:	68bb      	ldr	r3, [r7, #8]
 80270f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80270fa:	041b      	lsls	r3, r3, #16
 80270fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80270fe:	68bb      	ldr	r3, [r7, #8]
 8027100:	699b      	ldr	r3, [r3, #24]
 8027102:	061b      	lsls	r3, r3, #24
 8027104:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8027106:	68fb      	ldr	r3, [r7, #12]
 8027108:	681b      	ldr	r3, [r3, #0]
 802710a:	461a      	mov	r2, r3
 802710c:	687b      	ldr	r3, [r7, #4]
 802710e:	01db      	lsls	r3, r3, #7
 8027110:	4413      	add	r3, r2
 8027112:	3384      	adds	r3, #132	; 0x84
 8027114:	699b      	ldr	r3, [r3, #24]
 8027116:	68fb      	ldr	r3, [r7, #12]
 8027118:	681b      	ldr	r3, [r3, #0]
 802711a:	461a      	mov	r2, r3
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	01db      	lsls	r3, r3, #7
 8027120:	4413      	add	r3, r2
 8027122:	3384      	adds	r3, #132	; 0x84
 8027124:	461a      	mov	r2, r3
 8027126:	2300      	movs	r3, #0
 8027128:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 802712a:	68bb      	ldr	r3, [r7, #8]
 802712c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8027130:	461a      	mov	r2, r3
 8027132:	69fb      	ldr	r3, [r7, #28]
 8027134:	431a      	orrs	r2, r3
 8027136:	69bb      	ldr	r3, [r7, #24]
 8027138:	431a      	orrs	r2, r3
 802713a:	68fb      	ldr	r3, [r7, #12]
 802713c:	681b      	ldr	r3, [r3, #0]
 802713e:	4619      	mov	r1, r3
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	01db      	lsls	r3, r3, #7
 8027144:	440b      	add	r3, r1
 8027146:	3384      	adds	r3, #132	; 0x84
 8027148:	4619      	mov	r1, r3
 802714a:	697b      	ldr	r3, [r7, #20]
 802714c:	4313      	orrs	r3, r2
 802714e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8027150:	68fb      	ldr	r3, [r7, #12]
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	461a      	mov	r2, r3
 8027156:	687b      	ldr	r3, [r7, #4]
 8027158:	01db      	lsls	r3, r3, #7
 802715a:	4413      	add	r3, r2
 802715c:	3384      	adds	r3, #132	; 0x84
 802715e:	695b      	ldr	r3, [r3, #20]
 8027160:	68fa      	ldr	r2, [r7, #12]
 8027162:	6812      	ldr	r2, [r2, #0]
 8027164:	4611      	mov	r1, r2
 8027166:	687a      	ldr	r2, [r7, #4]
 8027168:	01d2      	lsls	r2, r2, #7
 802716a:	440a      	add	r2, r1
 802716c:	3284      	adds	r2, #132	; 0x84
 802716e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027172:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8027174:	68fb      	ldr	r3, [r7, #12]
 8027176:	681b      	ldr	r3, [r3, #0]
 8027178:	461a      	mov	r2, r3
 802717a:	687b      	ldr	r3, [r7, #4]
 802717c:	01db      	lsls	r3, r3, #7
 802717e:	4413      	add	r3, r2
 8027180:	3384      	adds	r3, #132	; 0x84
 8027182:	461a      	mov	r2, r3
 8027184:	68bb      	ldr	r3, [r7, #8]
 8027186:	695b      	ldr	r3, [r3, #20]
 8027188:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 802718a:	68fb      	ldr	r3, [r7, #12]
 802718c:	681b      	ldr	r3, [r3, #0]
 802718e:	461a      	mov	r2, r3
 8027190:	687b      	ldr	r3, [r7, #4]
 8027192:	01db      	lsls	r3, r3, #7
 8027194:	4413      	add	r3, r2
 8027196:	3384      	adds	r3, #132	; 0x84
 8027198:	69db      	ldr	r3, [r3, #28]
 802719a:	68fa      	ldr	r2, [r7, #12]
 802719c:	6812      	ldr	r2, [r2, #0]
 802719e:	4611      	mov	r1, r2
 80271a0:	687a      	ldr	r2, [r7, #4]
 80271a2:	01d2      	lsls	r2, r2, #7
 80271a4:	440a      	add	r2, r1
 80271a6:	3284      	adds	r2, #132	; 0x84
 80271a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80271ac:	f023 0307 	bic.w	r3, r3, #7
 80271b0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80271b2:	68bb      	ldr	r3, [r7, #8]
 80271b4:	69da      	ldr	r2, [r3, #28]
 80271b6:	68bb      	ldr	r3, [r7, #8]
 80271b8:	6a1b      	ldr	r3, [r3, #32]
 80271ba:	68f9      	ldr	r1, [r7, #12]
 80271bc:	6809      	ldr	r1, [r1, #0]
 80271be:	4608      	mov	r0, r1
 80271c0:	6879      	ldr	r1, [r7, #4]
 80271c2:	01c9      	lsls	r1, r1, #7
 80271c4:	4401      	add	r1, r0
 80271c6:	3184      	adds	r1, #132	; 0x84
 80271c8:	4313      	orrs	r3, r2
 80271ca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80271cc:	68fb      	ldr	r3, [r7, #12]
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	461a      	mov	r2, r3
 80271d2:	687b      	ldr	r3, [r7, #4]
 80271d4:	01db      	lsls	r3, r3, #7
 80271d6:	4413      	add	r3, r2
 80271d8:	3384      	adds	r3, #132	; 0x84
 80271da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80271dc:	68fb      	ldr	r3, [r7, #12]
 80271de:	681b      	ldr	r3, [r3, #0]
 80271e0:	461a      	mov	r2, r3
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	01db      	lsls	r3, r3, #7
 80271e6:	4413      	add	r3, r2
 80271e8:	3384      	adds	r3, #132	; 0x84
 80271ea:	461a      	mov	r2, r3
 80271ec:	2300      	movs	r3, #0
 80271ee:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80271f0:	68fb      	ldr	r3, [r7, #12]
 80271f2:	681b      	ldr	r3, [r3, #0]
 80271f4:	461a      	mov	r2, r3
 80271f6:	687b      	ldr	r3, [r7, #4]
 80271f8:	01db      	lsls	r3, r3, #7
 80271fa:	4413      	add	r3, r2
 80271fc:	3384      	adds	r3, #132	; 0x84
 80271fe:	461a      	mov	r2, r3
 8027200:	68bb      	ldr	r3, [r7, #8]
 8027202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027204:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8027206:	68bb      	ldr	r3, [r7, #8]
 8027208:	691b      	ldr	r3, [r3, #16]
 802720a:	2b00      	cmp	r3, #0
 802720c:	d102      	bne.n	8027214 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 802720e:	2304      	movs	r3, #4
 8027210:	61fb      	str	r3, [r7, #28]
 8027212:	e01b      	b.n	802724c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8027214:	68bb      	ldr	r3, [r7, #8]
 8027216:	691b      	ldr	r3, [r3, #16]
 8027218:	2b01      	cmp	r3, #1
 802721a:	d102      	bne.n	8027222 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 802721c:	2303      	movs	r3, #3
 802721e:	61fb      	str	r3, [r7, #28]
 8027220:	e014      	b.n	802724c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8027222:	68bb      	ldr	r3, [r7, #8]
 8027224:	691b      	ldr	r3, [r3, #16]
 8027226:	2b04      	cmp	r3, #4
 8027228:	d00b      	beq.n	8027242 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802722a:	68bb      	ldr	r3, [r7, #8]
 802722c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802722e:	2b02      	cmp	r3, #2
 8027230:	d007      	beq.n	8027242 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8027232:	68bb      	ldr	r3, [r7, #8]
 8027234:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8027236:	2b03      	cmp	r3, #3
 8027238:	d003      	beq.n	8027242 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 802723a:	68bb      	ldr	r3, [r7, #8]
 802723c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802723e:	2b07      	cmp	r3, #7
 8027240:	d102      	bne.n	8027248 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8027242:	2302      	movs	r3, #2
 8027244:	61fb      	str	r3, [r7, #28]
 8027246:	e001      	b.n	802724c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8027248:	2301      	movs	r3, #1
 802724a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 802724c:	68fb      	ldr	r3, [r7, #12]
 802724e:	681b      	ldr	r3, [r3, #0]
 8027250:	461a      	mov	r2, r3
 8027252:	687b      	ldr	r3, [r7, #4]
 8027254:	01db      	lsls	r3, r3, #7
 8027256:	4413      	add	r3, r2
 8027258:	3384      	adds	r3, #132	; 0x84
 802725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802725c:	68fa      	ldr	r2, [r7, #12]
 802725e:	6812      	ldr	r2, [r2, #0]
 8027260:	4611      	mov	r1, r2
 8027262:	687a      	ldr	r2, [r7, #4]
 8027264:	01d2      	lsls	r2, r2, #7
 8027266:	440a      	add	r2, r1
 8027268:	3284      	adds	r2, #132	; 0x84
 802726a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 802726e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8027270:	68bb      	ldr	r3, [r7, #8]
 8027272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027274:	69fa      	ldr	r2, [r7, #28]
 8027276:	fb02 f303 	mul.w	r3, r2, r3
 802727a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 802727c:	68bb      	ldr	r3, [r7, #8]
 802727e:	6859      	ldr	r1, [r3, #4]
 8027280:	68bb      	ldr	r3, [r7, #8]
 8027282:	681b      	ldr	r3, [r3, #0]
 8027284:	1acb      	subs	r3, r1, r3
 8027286:	69f9      	ldr	r1, [r7, #28]
 8027288:	fb01 f303 	mul.w	r3, r1, r3
 802728c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 802728e:	68f9      	ldr	r1, [r7, #12]
 8027290:	6809      	ldr	r1, [r1, #0]
 8027292:	4608      	mov	r0, r1
 8027294:	6879      	ldr	r1, [r7, #4]
 8027296:	01c9      	lsls	r1, r1, #7
 8027298:	4401      	add	r1, r0
 802729a:	3184      	adds	r1, #132	; 0x84
 802729c:	4313      	orrs	r3, r2
 802729e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80272a0:	68fb      	ldr	r3, [r7, #12]
 80272a2:	681b      	ldr	r3, [r3, #0]
 80272a4:	461a      	mov	r2, r3
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	01db      	lsls	r3, r3, #7
 80272aa:	4413      	add	r3, r2
 80272ac:	3384      	adds	r3, #132	; 0x84
 80272ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80272b0:	68fa      	ldr	r2, [r7, #12]
 80272b2:	6812      	ldr	r2, [r2, #0]
 80272b4:	4611      	mov	r1, r2
 80272b6:	687a      	ldr	r2, [r7, #4]
 80272b8:	01d2      	lsls	r2, r2, #7
 80272ba:	440a      	add	r2, r1
 80272bc:	3284      	adds	r2, #132	; 0x84
 80272be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80272c2:	f023 0307 	bic.w	r3, r3, #7
 80272c6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80272c8:	68fb      	ldr	r3, [r7, #12]
 80272ca:	681b      	ldr	r3, [r3, #0]
 80272cc:	461a      	mov	r2, r3
 80272ce:	687b      	ldr	r3, [r7, #4]
 80272d0:	01db      	lsls	r3, r3, #7
 80272d2:	4413      	add	r3, r2
 80272d4:	3384      	adds	r3, #132	; 0x84
 80272d6:	461a      	mov	r2, r3
 80272d8:	68bb      	ldr	r3, [r7, #8]
 80272da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80272de:	68fb      	ldr	r3, [r7, #12]
 80272e0:	681b      	ldr	r3, [r3, #0]
 80272e2:	461a      	mov	r2, r3
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	01db      	lsls	r3, r3, #7
 80272e8:	4413      	add	r3, r2
 80272ea:	3384      	adds	r3, #132	; 0x84
 80272ec:	681b      	ldr	r3, [r3, #0]
 80272ee:	68fa      	ldr	r2, [r7, #12]
 80272f0:	6812      	ldr	r2, [r2, #0]
 80272f2:	4611      	mov	r1, r2
 80272f4:	687a      	ldr	r2, [r7, #4]
 80272f6:	01d2      	lsls	r2, r2, #7
 80272f8:	440a      	add	r2, r1
 80272fa:	3284      	adds	r2, #132	; 0x84
 80272fc:	f043 0301 	orr.w	r3, r3, #1
 8027300:	6013      	str	r3, [r2, #0]
}
 8027302:	bf00      	nop
 8027304:	3724      	adds	r7, #36	; 0x24
 8027306:	46bd      	mov	sp, r7
 8027308:	f85d 7b04 	ldr.w	r7, [sp], #4
 802730c:	4770      	bx	lr
	...

08027310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027310:	b580      	push	{r7, lr}
 8027312:	b086      	sub	sp, #24
 8027314:	af00      	add	r7, sp, #0
 8027316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027318:	687b      	ldr	r3, [r7, #4]
 802731a:	2b00      	cmp	r3, #0
 802731c:	d101      	bne.n	8027322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802731e:	2301      	movs	r3, #1
 8027320:	e267      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027322:	687b      	ldr	r3, [r7, #4]
 8027324:	681b      	ldr	r3, [r3, #0]
 8027326:	f003 0301 	and.w	r3, r3, #1
 802732a:	2b00      	cmp	r3, #0
 802732c:	d075      	beq.n	802741a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802732e:	4b88      	ldr	r3, [pc, #544]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027330:	689b      	ldr	r3, [r3, #8]
 8027332:	f003 030c 	and.w	r3, r3, #12
 8027336:	2b04      	cmp	r3, #4
 8027338:	d00c      	beq.n	8027354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802733a:	4b85      	ldr	r3, [pc, #532]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 802733c:	689b      	ldr	r3, [r3, #8]
 802733e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027342:	2b08      	cmp	r3, #8
 8027344:	d112      	bne.n	802736c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8027346:	4b82      	ldr	r3, [pc, #520]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027348:	685b      	ldr	r3, [r3, #4]
 802734a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802734e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8027352:	d10b      	bne.n	802736c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027354:	4b7e      	ldr	r3, [pc, #504]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027356:	681b      	ldr	r3, [r3, #0]
 8027358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802735c:	2b00      	cmp	r3, #0
 802735e:	d05b      	beq.n	8027418 <HAL_RCC_OscConfig+0x108>
 8027360:	687b      	ldr	r3, [r7, #4]
 8027362:	685b      	ldr	r3, [r3, #4]
 8027364:	2b00      	cmp	r3, #0
 8027366:	d157      	bne.n	8027418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8027368:	2301      	movs	r3, #1
 802736a:	e242      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802736c:	687b      	ldr	r3, [r7, #4]
 802736e:	685b      	ldr	r3, [r3, #4]
 8027370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027374:	d106      	bne.n	8027384 <HAL_RCC_OscConfig+0x74>
 8027376:	4b76      	ldr	r3, [pc, #472]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027378:	681b      	ldr	r3, [r3, #0]
 802737a:	4a75      	ldr	r2, [pc, #468]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 802737c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027380:	6013      	str	r3, [r2, #0]
 8027382:	e01d      	b.n	80273c0 <HAL_RCC_OscConfig+0xb0>
 8027384:	687b      	ldr	r3, [r7, #4]
 8027386:	685b      	ldr	r3, [r3, #4]
 8027388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802738c:	d10c      	bne.n	80273a8 <HAL_RCC_OscConfig+0x98>
 802738e:	4b70      	ldr	r3, [pc, #448]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	4a6f      	ldr	r2, [pc, #444]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8027398:	6013      	str	r3, [r2, #0]
 802739a:	4b6d      	ldr	r3, [pc, #436]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 802739c:	681b      	ldr	r3, [r3, #0]
 802739e:	4a6c      	ldr	r2, [pc, #432]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80273a4:	6013      	str	r3, [r2, #0]
 80273a6:	e00b      	b.n	80273c0 <HAL_RCC_OscConfig+0xb0>
 80273a8:	4b69      	ldr	r3, [pc, #420]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273aa:	681b      	ldr	r3, [r3, #0]
 80273ac:	4a68      	ldr	r2, [pc, #416]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80273b2:	6013      	str	r3, [r2, #0]
 80273b4:	4b66      	ldr	r3, [pc, #408]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273b6:	681b      	ldr	r3, [r3, #0]
 80273b8:	4a65      	ldr	r2, [pc, #404]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80273be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80273c0:	687b      	ldr	r3, [r7, #4]
 80273c2:	685b      	ldr	r3, [r3, #4]
 80273c4:	2b00      	cmp	r3, #0
 80273c6:	d013      	beq.n	80273f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80273c8:	f7fc f950 	bl	802366c <HAL_GetTick>
 80273cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80273ce:	e008      	b.n	80273e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80273d0:	f7fc f94c 	bl	802366c <HAL_GetTick>
 80273d4:	4602      	mov	r2, r0
 80273d6:	693b      	ldr	r3, [r7, #16]
 80273d8:	1ad3      	subs	r3, r2, r3
 80273da:	2b64      	cmp	r3, #100	; 0x64
 80273dc:	d901      	bls.n	80273e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80273de:	2303      	movs	r3, #3
 80273e0:	e207      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80273e2:	4b5b      	ldr	r3, [pc, #364]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80273e4:	681b      	ldr	r3, [r3, #0]
 80273e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80273ea:	2b00      	cmp	r3, #0
 80273ec:	d0f0      	beq.n	80273d0 <HAL_RCC_OscConfig+0xc0>
 80273ee:	e014      	b.n	802741a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80273f0:	f7fc f93c 	bl	802366c <HAL_GetTick>
 80273f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80273f6:	e008      	b.n	802740a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80273f8:	f7fc f938 	bl	802366c <HAL_GetTick>
 80273fc:	4602      	mov	r2, r0
 80273fe:	693b      	ldr	r3, [r7, #16]
 8027400:	1ad3      	subs	r3, r2, r3
 8027402:	2b64      	cmp	r3, #100	; 0x64
 8027404:	d901      	bls.n	802740a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027406:	2303      	movs	r3, #3
 8027408:	e1f3      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802740a:	4b51      	ldr	r3, [pc, #324]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027412:	2b00      	cmp	r3, #0
 8027414:	d1f0      	bne.n	80273f8 <HAL_RCC_OscConfig+0xe8>
 8027416:	e000      	b.n	802741a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802741a:	687b      	ldr	r3, [r7, #4]
 802741c:	681b      	ldr	r3, [r3, #0]
 802741e:	f003 0302 	and.w	r3, r3, #2
 8027422:	2b00      	cmp	r3, #0
 8027424:	d063      	beq.n	80274ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027426:	4b4a      	ldr	r3, [pc, #296]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027428:	689b      	ldr	r3, [r3, #8]
 802742a:	f003 030c 	and.w	r3, r3, #12
 802742e:	2b00      	cmp	r3, #0
 8027430:	d00b      	beq.n	802744a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027432:	4b47      	ldr	r3, [pc, #284]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027434:	689b      	ldr	r3, [r3, #8]
 8027436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802743a:	2b08      	cmp	r3, #8
 802743c:	d11c      	bne.n	8027478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802743e:	4b44      	ldr	r3, [pc, #272]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027440:	685b      	ldr	r3, [r3, #4]
 8027442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027446:	2b00      	cmp	r3, #0
 8027448:	d116      	bne.n	8027478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802744a:	4b41      	ldr	r3, [pc, #260]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 802744c:	681b      	ldr	r3, [r3, #0]
 802744e:	f003 0302 	and.w	r3, r3, #2
 8027452:	2b00      	cmp	r3, #0
 8027454:	d005      	beq.n	8027462 <HAL_RCC_OscConfig+0x152>
 8027456:	687b      	ldr	r3, [r7, #4]
 8027458:	68db      	ldr	r3, [r3, #12]
 802745a:	2b01      	cmp	r3, #1
 802745c:	d001      	beq.n	8027462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 802745e:	2301      	movs	r3, #1
 8027460:	e1c7      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027462:	4b3b      	ldr	r3, [pc, #236]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027464:	681b      	ldr	r3, [r3, #0]
 8027466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802746a:	687b      	ldr	r3, [r7, #4]
 802746c:	691b      	ldr	r3, [r3, #16]
 802746e:	00db      	lsls	r3, r3, #3
 8027470:	4937      	ldr	r1, [pc, #220]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027472:	4313      	orrs	r3, r2
 8027474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8027476:	e03a      	b.n	80274ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8027478:	687b      	ldr	r3, [r7, #4]
 802747a:	68db      	ldr	r3, [r3, #12]
 802747c:	2b00      	cmp	r3, #0
 802747e:	d020      	beq.n	80274c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027480:	4b34      	ldr	r3, [pc, #208]	; (8027554 <HAL_RCC_OscConfig+0x244>)
 8027482:	2201      	movs	r2, #1
 8027484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027486:	f7fc f8f1 	bl	802366c <HAL_GetTick>
 802748a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802748c:	e008      	b.n	80274a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802748e:	f7fc f8ed 	bl	802366c <HAL_GetTick>
 8027492:	4602      	mov	r2, r0
 8027494:	693b      	ldr	r3, [r7, #16]
 8027496:	1ad3      	subs	r3, r2, r3
 8027498:	2b02      	cmp	r3, #2
 802749a:	d901      	bls.n	80274a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802749c:	2303      	movs	r3, #3
 802749e:	e1a8      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80274a0:	4b2b      	ldr	r3, [pc, #172]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80274a2:	681b      	ldr	r3, [r3, #0]
 80274a4:	f003 0302 	and.w	r3, r3, #2
 80274a8:	2b00      	cmp	r3, #0
 80274aa:	d0f0      	beq.n	802748e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80274ac:	4b28      	ldr	r3, [pc, #160]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80274ae:	681b      	ldr	r3, [r3, #0]
 80274b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80274b4:	687b      	ldr	r3, [r7, #4]
 80274b6:	691b      	ldr	r3, [r3, #16]
 80274b8:	00db      	lsls	r3, r3, #3
 80274ba:	4925      	ldr	r1, [pc, #148]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80274bc:	4313      	orrs	r3, r2
 80274be:	600b      	str	r3, [r1, #0]
 80274c0:	e015      	b.n	80274ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80274c2:	4b24      	ldr	r3, [pc, #144]	; (8027554 <HAL_RCC_OscConfig+0x244>)
 80274c4:	2200      	movs	r2, #0
 80274c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80274c8:	f7fc f8d0 	bl	802366c <HAL_GetTick>
 80274cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80274ce:	e008      	b.n	80274e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80274d0:	f7fc f8cc 	bl	802366c <HAL_GetTick>
 80274d4:	4602      	mov	r2, r0
 80274d6:	693b      	ldr	r3, [r7, #16]
 80274d8:	1ad3      	subs	r3, r2, r3
 80274da:	2b02      	cmp	r3, #2
 80274dc:	d901      	bls.n	80274e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80274de:	2303      	movs	r3, #3
 80274e0:	e187      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80274e2:	4b1b      	ldr	r3, [pc, #108]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 80274e4:	681b      	ldr	r3, [r3, #0]
 80274e6:	f003 0302 	and.w	r3, r3, #2
 80274ea:	2b00      	cmp	r3, #0
 80274ec:	d1f0      	bne.n	80274d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80274ee:	687b      	ldr	r3, [r7, #4]
 80274f0:	681b      	ldr	r3, [r3, #0]
 80274f2:	f003 0308 	and.w	r3, r3, #8
 80274f6:	2b00      	cmp	r3, #0
 80274f8:	d036      	beq.n	8027568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	695b      	ldr	r3, [r3, #20]
 80274fe:	2b00      	cmp	r3, #0
 8027500:	d016      	beq.n	8027530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027502:	4b15      	ldr	r3, [pc, #84]	; (8027558 <HAL_RCC_OscConfig+0x248>)
 8027504:	2201      	movs	r2, #1
 8027506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027508:	f7fc f8b0 	bl	802366c <HAL_GetTick>
 802750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802750e:	e008      	b.n	8027522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027510:	f7fc f8ac 	bl	802366c <HAL_GetTick>
 8027514:	4602      	mov	r2, r0
 8027516:	693b      	ldr	r3, [r7, #16]
 8027518:	1ad3      	subs	r3, r2, r3
 802751a:	2b02      	cmp	r3, #2
 802751c:	d901      	bls.n	8027522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802751e:	2303      	movs	r3, #3
 8027520:	e167      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027522:	4b0b      	ldr	r3, [pc, #44]	; (8027550 <HAL_RCC_OscConfig+0x240>)
 8027524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027526:	f003 0302 	and.w	r3, r3, #2
 802752a:	2b00      	cmp	r3, #0
 802752c:	d0f0      	beq.n	8027510 <HAL_RCC_OscConfig+0x200>
 802752e:	e01b      	b.n	8027568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027530:	4b09      	ldr	r3, [pc, #36]	; (8027558 <HAL_RCC_OscConfig+0x248>)
 8027532:	2200      	movs	r2, #0
 8027534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027536:	f7fc f899 	bl	802366c <HAL_GetTick>
 802753a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802753c:	e00e      	b.n	802755c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802753e:	f7fc f895 	bl	802366c <HAL_GetTick>
 8027542:	4602      	mov	r2, r0
 8027544:	693b      	ldr	r3, [r7, #16]
 8027546:	1ad3      	subs	r3, r2, r3
 8027548:	2b02      	cmp	r3, #2
 802754a:	d907      	bls.n	802755c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 802754c:	2303      	movs	r3, #3
 802754e:	e150      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
 8027550:	40023800 	.word	0x40023800
 8027554:	42470000 	.word	0x42470000
 8027558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802755c:	4b88      	ldr	r3, [pc, #544]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802755e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027560:	f003 0302 	and.w	r3, r3, #2
 8027564:	2b00      	cmp	r3, #0
 8027566:	d1ea      	bne.n	802753e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	681b      	ldr	r3, [r3, #0]
 802756c:	f003 0304 	and.w	r3, r3, #4
 8027570:	2b00      	cmp	r3, #0
 8027572:	f000 8097 	beq.w	80276a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8027576:	2300      	movs	r3, #0
 8027578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802757a:	4b81      	ldr	r3, [pc, #516]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802757e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027582:	2b00      	cmp	r3, #0
 8027584:	d10f      	bne.n	80275a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8027586:	2300      	movs	r3, #0
 8027588:	60bb      	str	r3, [r7, #8]
 802758a:	4b7d      	ldr	r3, [pc, #500]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802758e:	4a7c      	ldr	r2, [pc, #496]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027594:	6413      	str	r3, [r2, #64]	; 0x40
 8027596:	4b7a      	ldr	r3, [pc, #488]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802759a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802759e:	60bb      	str	r3, [r7, #8]
 80275a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80275a2:	2301      	movs	r3, #1
 80275a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80275a6:	4b77      	ldr	r3, [pc, #476]	; (8027784 <HAL_RCC_OscConfig+0x474>)
 80275a8:	681b      	ldr	r3, [r3, #0]
 80275aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80275ae:	2b00      	cmp	r3, #0
 80275b0:	d118      	bne.n	80275e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80275b2:	4b74      	ldr	r3, [pc, #464]	; (8027784 <HAL_RCC_OscConfig+0x474>)
 80275b4:	681b      	ldr	r3, [r3, #0]
 80275b6:	4a73      	ldr	r2, [pc, #460]	; (8027784 <HAL_RCC_OscConfig+0x474>)
 80275b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80275bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80275be:	f7fc f855 	bl	802366c <HAL_GetTick>
 80275c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80275c4:	e008      	b.n	80275d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80275c6:	f7fc f851 	bl	802366c <HAL_GetTick>
 80275ca:	4602      	mov	r2, r0
 80275cc:	693b      	ldr	r3, [r7, #16]
 80275ce:	1ad3      	subs	r3, r2, r3
 80275d0:	2b02      	cmp	r3, #2
 80275d2:	d901      	bls.n	80275d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80275d4:	2303      	movs	r3, #3
 80275d6:	e10c      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80275d8:	4b6a      	ldr	r3, [pc, #424]	; (8027784 <HAL_RCC_OscConfig+0x474>)
 80275da:	681b      	ldr	r3, [r3, #0]
 80275dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	d0f0      	beq.n	80275c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80275e4:	687b      	ldr	r3, [r7, #4]
 80275e6:	689b      	ldr	r3, [r3, #8]
 80275e8:	2b01      	cmp	r3, #1
 80275ea:	d106      	bne.n	80275fa <HAL_RCC_OscConfig+0x2ea>
 80275ec:	4b64      	ldr	r3, [pc, #400]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 80275ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80275f0:	4a63      	ldr	r2, [pc, #396]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 80275f2:	f043 0301 	orr.w	r3, r3, #1
 80275f6:	6713      	str	r3, [r2, #112]	; 0x70
 80275f8:	e01c      	b.n	8027634 <HAL_RCC_OscConfig+0x324>
 80275fa:	687b      	ldr	r3, [r7, #4]
 80275fc:	689b      	ldr	r3, [r3, #8]
 80275fe:	2b05      	cmp	r3, #5
 8027600:	d10c      	bne.n	802761c <HAL_RCC_OscConfig+0x30c>
 8027602:	4b5f      	ldr	r3, [pc, #380]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027606:	4a5e      	ldr	r2, [pc, #376]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027608:	f043 0304 	orr.w	r3, r3, #4
 802760c:	6713      	str	r3, [r2, #112]	; 0x70
 802760e:	4b5c      	ldr	r3, [pc, #368]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027612:	4a5b      	ldr	r2, [pc, #364]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027614:	f043 0301 	orr.w	r3, r3, #1
 8027618:	6713      	str	r3, [r2, #112]	; 0x70
 802761a:	e00b      	b.n	8027634 <HAL_RCC_OscConfig+0x324>
 802761c:	4b58      	ldr	r3, [pc, #352]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802761e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027620:	4a57      	ldr	r2, [pc, #348]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027622:	f023 0301 	bic.w	r3, r3, #1
 8027626:	6713      	str	r3, [r2, #112]	; 0x70
 8027628:	4b55      	ldr	r3, [pc, #340]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802762a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802762c:	4a54      	ldr	r2, [pc, #336]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802762e:	f023 0304 	bic.w	r3, r3, #4
 8027632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027634:	687b      	ldr	r3, [r7, #4]
 8027636:	689b      	ldr	r3, [r3, #8]
 8027638:	2b00      	cmp	r3, #0
 802763a:	d015      	beq.n	8027668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802763c:	f7fc f816 	bl	802366c <HAL_GetTick>
 8027640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027642:	e00a      	b.n	802765a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027644:	f7fc f812 	bl	802366c <HAL_GetTick>
 8027648:	4602      	mov	r2, r0
 802764a:	693b      	ldr	r3, [r7, #16]
 802764c:	1ad3      	subs	r3, r2, r3
 802764e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027652:	4293      	cmp	r3, r2
 8027654:	d901      	bls.n	802765a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8027656:	2303      	movs	r3, #3
 8027658:	e0cb      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802765a:	4b49      	ldr	r3, [pc, #292]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802765e:	f003 0302 	and.w	r3, r3, #2
 8027662:	2b00      	cmp	r3, #0
 8027664:	d0ee      	beq.n	8027644 <HAL_RCC_OscConfig+0x334>
 8027666:	e014      	b.n	8027692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027668:	f7fc f800 	bl	802366c <HAL_GetTick>
 802766c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802766e:	e00a      	b.n	8027686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027670:	f7fb fffc 	bl	802366c <HAL_GetTick>
 8027674:	4602      	mov	r2, r0
 8027676:	693b      	ldr	r3, [r7, #16]
 8027678:	1ad3      	subs	r3, r2, r3
 802767a:	f241 3288 	movw	r2, #5000	; 0x1388
 802767e:	4293      	cmp	r3, r2
 8027680:	d901      	bls.n	8027686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8027682:	2303      	movs	r3, #3
 8027684:	e0b5      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027686:	4b3e      	ldr	r3, [pc, #248]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802768a:	f003 0302 	and.w	r3, r3, #2
 802768e:	2b00      	cmp	r3, #0
 8027690:	d1ee      	bne.n	8027670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027692:	7dfb      	ldrb	r3, [r7, #23]
 8027694:	2b01      	cmp	r3, #1
 8027696:	d105      	bne.n	80276a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8027698:	4b39      	ldr	r3, [pc, #228]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802769a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802769c:	4a38      	ldr	r2, [pc, #224]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802769e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80276a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80276a4:	687b      	ldr	r3, [r7, #4]
 80276a6:	699b      	ldr	r3, [r3, #24]
 80276a8:	2b00      	cmp	r3, #0
 80276aa:	f000 80a1 	beq.w	80277f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80276ae:	4b34      	ldr	r3, [pc, #208]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 80276b0:	689b      	ldr	r3, [r3, #8]
 80276b2:	f003 030c 	and.w	r3, r3, #12
 80276b6:	2b08      	cmp	r3, #8
 80276b8:	d05c      	beq.n	8027774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80276ba:	687b      	ldr	r3, [r7, #4]
 80276bc:	699b      	ldr	r3, [r3, #24]
 80276be:	2b02      	cmp	r3, #2
 80276c0:	d141      	bne.n	8027746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80276c2:	4b31      	ldr	r3, [pc, #196]	; (8027788 <HAL_RCC_OscConfig+0x478>)
 80276c4:	2200      	movs	r2, #0
 80276c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80276c8:	f7fb ffd0 	bl	802366c <HAL_GetTick>
 80276cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80276ce:	e008      	b.n	80276e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80276d0:	f7fb ffcc 	bl	802366c <HAL_GetTick>
 80276d4:	4602      	mov	r2, r0
 80276d6:	693b      	ldr	r3, [r7, #16]
 80276d8:	1ad3      	subs	r3, r2, r3
 80276da:	2b02      	cmp	r3, #2
 80276dc:	d901      	bls.n	80276e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80276de:	2303      	movs	r3, #3
 80276e0:	e087      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80276e2:	4b27      	ldr	r3, [pc, #156]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 80276e4:	681b      	ldr	r3, [r3, #0]
 80276e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80276ea:	2b00      	cmp	r3, #0
 80276ec:	d1f0      	bne.n	80276d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80276ee:	687b      	ldr	r3, [r7, #4]
 80276f0:	69da      	ldr	r2, [r3, #28]
 80276f2:	687b      	ldr	r3, [r7, #4]
 80276f4:	6a1b      	ldr	r3, [r3, #32]
 80276f6:	431a      	orrs	r2, r3
 80276f8:	687b      	ldr	r3, [r7, #4]
 80276fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80276fc:	019b      	lsls	r3, r3, #6
 80276fe:	431a      	orrs	r2, r3
 8027700:	687b      	ldr	r3, [r7, #4]
 8027702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027704:	085b      	lsrs	r3, r3, #1
 8027706:	3b01      	subs	r3, #1
 8027708:	041b      	lsls	r3, r3, #16
 802770a:	431a      	orrs	r2, r3
 802770c:	687b      	ldr	r3, [r7, #4]
 802770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027710:	061b      	lsls	r3, r3, #24
 8027712:	491b      	ldr	r1, [pc, #108]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027714:	4313      	orrs	r3, r2
 8027716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027718:	4b1b      	ldr	r3, [pc, #108]	; (8027788 <HAL_RCC_OscConfig+0x478>)
 802771a:	2201      	movs	r2, #1
 802771c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802771e:	f7fb ffa5 	bl	802366c <HAL_GetTick>
 8027722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027724:	e008      	b.n	8027738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027726:	f7fb ffa1 	bl	802366c <HAL_GetTick>
 802772a:	4602      	mov	r2, r0
 802772c:	693b      	ldr	r3, [r7, #16]
 802772e:	1ad3      	subs	r3, r2, r3
 8027730:	2b02      	cmp	r3, #2
 8027732:	d901      	bls.n	8027738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8027734:	2303      	movs	r3, #3
 8027736:	e05c      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027738:	4b11      	ldr	r3, [pc, #68]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 802773a:	681b      	ldr	r3, [r3, #0]
 802773c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027740:	2b00      	cmp	r3, #0
 8027742:	d0f0      	beq.n	8027726 <HAL_RCC_OscConfig+0x416>
 8027744:	e054      	b.n	80277f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027746:	4b10      	ldr	r3, [pc, #64]	; (8027788 <HAL_RCC_OscConfig+0x478>)
 8027748:	2200      	movs	r2, #0
 802774a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802774c:	f7fb ff8e 	bl	802366c <HAL_GetTick>
 8027750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027752:	e008      	b.n	8027766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027754:	f7fb ff8a 	bl	802366c <HAL_GetTick>
 8027758:	4602      	mov	r2, r0
 802775a:	693b      	ldr	r3, [r7, #16]
 802775c:	1ad3      	subs	r3, r2, r3
 802775e:	2b02      	cmp	r3, #2
 8027760:	d901      	bls.n	8027766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8027762:	2303      	movs	r3, #3
 8027764:	e045      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027766:	4b06      	ldr	r3, [pc, #24]	; (8027780 <HAL_RCC_OscConfig+0x470>)
 8027768:	681b      	ldr	r3, [r3, #0]
 802776a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802776e:	2b00      	cmp	r3, #0
 8027770:	d1f0      	bne.n	8027754 <HAL_RCC_OscConfig+0x444>
 8027772:	e03d      	b.n	80277f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027774:	687b      	ldr	r3, [r7, #4]
 8027776:	699b      	ldr	r3, [r3, #24]
 8027778:	2b01      	cmp	r3, #1
 802777a:	d107      	bne.n	802778c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 802777c:	2301      	movs	r3, #1
 802777e:	e038      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
 8027780:	40023800 	.word	0x40023800
 8027784:	40007000 	.word	0x40007000
 8027788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802778c:	4b1b      	ldr	r3, [pc, #108]	; (80277fc <HAL_RCC_OscConfig+0x4ec>)
 802778e:	685b      	ldr	r3, [r3, #4]
 8027790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027792:	687b      	ldr	r3, [r7, #4]
 8027794:	699b      	ldr	r3, [r3, #24]
 8027796:	2b01      	cmp	r3, #1
 8027798:	d028      	beq.n	80277ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802779a:	68fb      	ldr	r3, [r7, #12]
 802779c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80277a4:	429a      	cmp	r2, r3
 80277a6:	d121      	bne.n	80277ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80277a8:	68fb      	ldr	r3, [r7, #12]
 80277aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80277ae:	687b      	ldr	r3, [r7, #4]
 80277b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80277b2:	429a      	cmp	r2, r3
 80277b4:	d11a      	bne.n	80277ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80277b6:	68fa      	ldr	r2, [r7, #12]
 80277b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80277bc:	4013      	ands	r3, r2
 80277be:	687a      	ldr	r2, [r7, #4]
 80277c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80277c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80277c4:	4293      	cmp	r3, r2
 80277c6:	d111      	bne.n	80277ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80277c8:	68fb      	ldr	r3, [r7, #12]
 80277ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80277ce:	687b      	ldr	r3, [r7, #4]
 80277d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80277d2:	085b      	lsrs	r3, r3, #1
 80277d4:	3b01      	subs	r3, #1
 80277d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80277d8:	429a      	cmp	r2, r3
 80277da:	d107      	bne.n	80277ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80277dc:	68fb      	ldr	r3, [r7, #12]
 80277de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80277e2:	687b      	ldr	r3, [r7, #4]
 80277e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80277e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80277e8:	429a      	cmp	r2, r3
 80277ea:	d001      	beq.n	80277f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80277ec:	2301      	movs	r3, #1
 80277ee:	e000      	b.n	80277f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80277f0:	2300      	movs	r3, #0
}
 80277f2:	4618      	mov	r0, r3
 80277f4:	3718      	adds	r7, #24
 80277f6:	46bd      	mov	sp, r7
 80277f8:	bd80      	pop	{r7, pc}
 80277fa:	bf00      	nop
 80277fc:	40023800 	.word	0x40023800

08027800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027800:	b580      	push	{r7, lr}
 8027802:	b084      	sub	sp, #16
 8027804:	af00      	add	r7, sp, #0
 8027806:	6078      	str	r0, [r7, #4]
 8027808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802780a:	687b      	ldr	r3, [r7, #4]
 802780c:	2b00      	cmp	r3, #0
 802780e:	d101      	bne.n	8027814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027810:	2301      	movs	r3, #1
 8027812:	e0cc      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027814:	4b68      	ldr	r3, [pc, #416]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 8027816:	681b      	ldr	r3, [r3, #0]
 8027818:	f003 030f 	and.w	r3, r3, #15
 802781c:	683a      	ldr	r2, [r7, #0]
 802781e:	429a      	cmp	r2, r3
 8027820:	d90c      	bls.n	802783c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027822:	4b65      	ldr	r3, [pc, #404]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 8027824:	683a      	ldr	r2, [r7, #0]
 8027826:	b2d2      	uxtb	r2, r2
 8027828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802782a:	4b63      	ldr	r3, [pc, #396]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 802782c:	681b      	ldr	r3, [r3, #0]
 802782e:	f003 030f 	and.w	r3, r3, #15
 8027832:	683a      	ldr	r2, [r7, #0]
 8027834:	429a      	cmp	r2, r3
 8027836:	d001      	beq.n	802783c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8027838:	2301      	movs	r3, #1
 802783a:	e0b8      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802783c:	687b      	ldr	r3, [r7, #4]
 802783e:	681b      	ldr	r3, [r3, #0]
 8027840:	f003 0302 	and.w	r3, r3, #2
 8027844:	2b00      	cmp	r3, #0
 8027846:	d020      	beq.n	802788a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	681b      	ldr	r3, [r3, #0]
 802784c:	f003 0304 	and.w	r3, r3, #4
 8027850:	2b00      	cmp	r3, #0
 8027852:	d005      	beq.n	8027860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8027854:	4b59      	ldr	r3, [pc, #356]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027856:	689b      	ldr	r3, [r3, #8]
 8027858:	4a58      	ldr	r2, [pc, #352]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 802785a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802785e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027860:	687b      	ldr	r3, [r7, #4]
 8027862:	681b      	ldr	r3, [r3, #0]
 8027864:	f003 0308 	and.w	r3, r3, #8
 8027868:	2b00      	cmp	r3, #0
 802786a:	d005      	beq.n	8027878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802786c:	4b53      	ldr	r3, [pc, #332]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 802786e:	689b      	ldr	r3, [r3, #8]
 8027870:	4a52      	ldr	r2, [pc, #328]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8027876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8027878:	4b50      	ldr	r3, [pc, #320]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 802787a:	689b      	ldr	r3, [r3, #8]
 802787c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027880:	687b      	ldr	r3, [r7, #4]
 8027882:	689b      	ldr	r3, [r3, #8]
 8027884:	494d      	ldr	r1, [pc, #308]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027886:	4313      	orrs	r3, r2
 8027888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802788a:	687b      	ldr	r3, [r7, #4]
 802788c:	681b      	ldr	r3, [r3, #0]
 802788e:	f003 0301 	and.w	r3, r3, #1
 8027892:	2b00      	cmp	r3, #0
 8027894:	d044      	beq.n	8027920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8027896:	687b      	ldr	r3, [r7, #4]
 8027898:	685b      	ldr	r3, [r3, #4]
 802789a:	2b01      	cmp	r3, #1
 802789c:	d107      	bne.n	80278ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802789e:	4b47      	ldr	r3, [pc, #284]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 80278a0:	681b      	ldr	r3, [r3, #0]
 80278a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d119      	bne.n	80278de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80278aa:	2301      	movs	r3, #1
 80278ac:	e07f      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80278ae:	687b      	ldr	r3, [r7, #4]
 80278b0:	685b      	ldr	r3, [r3, #4]
 80278b2:	2b02      	cmp	r3, #2
 80278b4:	d003      	beq.n	80278be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80278b6:	687b      	ldr	r3, [r7, #4]
 80278b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80278ba:	2b03      	cmp	r3, #3
 80278bc:	d107      	bne.n	80278ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80278be:	4b3f      	ldr	r3, [pc, #252]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 80278c0:	681b      	ldr	r3, [r3, #0]
 80278c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d109      	bne.n	80278de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80278ca:	2301      	movs	r3, #1
 80278cc:	e06f      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80278ce:	4b3b      	ldr	r3, [pc, #236]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 80278d0:	681b      	ldr	r3, [r3, #0]
 80278d2:	f003 0302 	and.w	r3, r3, #2
 80278d6:	2b00      	cmp	r3, #0
 80278d8:	d101      	bne.n	80278de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80278da:	2301      	movs	r3, #1
 80278dc:	e067      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80278de:	4b37      	ldr	r3, [pc, #220]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 80278e0:	689b      	ldr	r3, [r3, #8]
 80278e2:	f023 0203 	bic.w	r2, r3, #3
 80278e6:	687b      	ldr	r3, [r7, #4]
 80278e8:	685b      	ldr	r3, [r3, #4]
 80278ea:	4934      	ldr	r1, [pc, #208]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 80278ec:	4313      	orrs	r3, r2
 80278ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80278f0:	f7fb febc 	bl	802366c <HAL_GetTick>
 80278f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80278f6:	e00a      	b.n	802790e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80278f8:	f7fb feb8 	bl	802366c <HAL_GetTick>
 80278fc:	4602      	mov	r2, r0
 80278fe:	68fb      	ldr	r3, [r7, #12]
 8027900:	1ad3      	subs	r3, r2, r3
 8027902:	f241 3288 	movw	r2, #5000	; 0x1388
 8027906:	4293      	cmp	r3, r2
 8027908:	d901      	bls.n	802790e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802790a:	2303      	movs	r3, #3
 802790c:	e04f      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802790e:	4b2b      	ldr	r3, [pc, #172]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027910:	689b      	ldr	r3, [r3, #8]
 8027912:	f003 020c 	and.w	r2, r3, #12
 8027916:	687b      	ldr	r3, [r7, #4]
 8027918:	685b      	ldr	r3, [r3, #4]
 802791a:	009b      	lsls	r3, r3, #2
 802791c:	429a      	cmp	r2, r3
 802791e:	d1eb      	bne.n	80278f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027920:	4b25      	ldr	r3, [pc, #148]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 8027922:	681b      	ldr	r3, [r3, #0]
 8027924:	f003 030f 	and.w	r3, r3, #15
 8027928:	683a      	ldr	r2, [r7, #0]
 802792a:	429a      	cmp	r2, r3
 802792c:	d20c      	bcs.n	8027948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802792e:	4b22      	ldr	r3, [pc, #136]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 8027930:	683a      	ldr	r2, [r7, #0]
 8027932:	b2d2      	uxtb	r2, r2
 8027934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027936:	4b20      	ldr	r3, [pc, #128]	; (80279b8 <HAL_RCC_ClockConfig+0x1b8>)
 8027938:	681b      	ldr	r3, [r3, #0]
 802793a:	f003 030f 	and.w	r3, r3, #15
 802793e:	683a      	ldr	r2, [r7, #0]
 8027940:	429a      	cmp	r2, r3
 8027942:	d001      	beq.n	8027948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027944:	2301      	movs	r3, #1
 8027946:	e032      	b.n	80279ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027948:	687b      	ldr	r3, [r7, #4]
 802794a:	681b      	ldr	r3, [r3, #0]
 802794c:	f003 0304 	and.w	r3, r3, #4
 8027950:	2b00      	cmp	r3, #0
 8027952:	d008      	beq.n	8027966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027954:	4b19      	ldr	r3, [pc, #100]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027956:	689b      	ldr	r3, [r3, #8]
 8027958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802795c:	687b      	ldr	r3, [r7, #4]
 802795e:	68db      	ldr	r3, [r3, #12]
 8027960:	4916      	ldr	r1, [pc, #88]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027962:	4313      	orrs	r3, r2
 8027964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027966:	687b      	ldr	r3, [r7, #4]
 8027968:	681b      	ldr	r3, [r3, #0]
 802796a:	f003 0308 	and.w	r3, r3, #8
 802796e:	2b00      	cmp	r3, #0
 8027970:	d009      	beq.n	8027986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027972:	4b12      	ldr	r3, [pc, #72]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027974:	689b      	ldr	r3, [r3, #8]
 8027976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802797a:	687b      	ldr	r3, [r7, #4]
 802797c:	691b      	ldr	r3, [r3, #16]
 802797e:	00db      	lsls	r3, r3, #3
 8027980:	490e      	ldr	r1, [pc, #56]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 8027982:	4313      	orrs	r3, r2
 8027984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027986:	f000 f821 	bl	80279cc <HAL_RCC_GetSysClockFreq>
 802798a:	4602      	mov	r2, r0
 802798c:	4b0b      	ldr	r3, [pc, #44]	; (80279bc <HAL_RCC_ClockConfig+0x1bc>)
 802798e:	689b      	ldr	r3, [r3, #8]
 8027990:	091b      	lsrs	r3, r3, #4
 8027992:	f003 030f 	and.w	r3, r3, #15
 8027996:	490a      	ldr	r1, [pc, #40]	; (80279c0 <HAL_RCC_ClockConfig+0x1c0>)
 8027998:	5ccb      	ldrb	r3, [r1, r3]
 802799a:	fa22 f303 	lsr.w	r3, r2, r3
 802799e:	4a09      	ldr	r2, [pc, #36]	; (80279c4 <HAL_RCC_ClockConfig+0x1c4>)
 80279a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80279a2:	4b09      	ldr	r3, [pc, #36]	; (80279c8 <HAL_RCC_ClockConfig+0x1c8>)
 80279a4:	681b      	ldr	r3, [r3, #0]
 80279a6:	4618      	mov	r0, r3
 80279a8:	f7fa fa7c 	bl	8021ea4 <HAL_InitTick>

  return HAL_OK;
 80279ac:	2300      	movs	r3, #0
}
 80279ae:	4618      	mov	r0, r3
 80279b0:	3710      	adds	r7, #16
 80279b2:	46bd      	mov	sp, r7
 80279b4:	bd80      	pop	{r7, pc}
 80279b6:	bf00      	nop
 80279b8:	40023c00 	.word	0x40023c00
 80279bc:	40023800 	.word	0x40023800
 80279c0:	0802f258 	.word	0x0802f258
 80279c4:	20000004 	.word	0x20000004
 80279c8:	20000058 	.word	0x20000058

080279cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80279cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80279d0:	b094      	sub	sp, #80	; 0x50
 80279d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80279d4:	2300      	movs	r3, #0
 80279d6:	647b      	str	r3, [r7, #68]	; 0x44
 80279d8:	2300      	movs	r3, #0
 80279da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80279dc:	2300      	movs	r3, #0
 80279de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80279e0:	2300      	movs	r3, #0
 80279e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80279e4:	4b79      	ldr	r3, [pc, #484]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80279e6:	689b      	ldr	r3, [r3, #8]
 80279e8:	f003 030c 	and.w	r3, r3, #12
 80279ec:	2b08      	cmp	r3, #8
 80279ee:	d00d      	beq.n	8027a0c <HAL_RCC_GetSysClockFreq+0x40>
 80279f0:	2b08      	cmp	r3, #8
 80279f2:	f200 80e1 	bhi.w	8027bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80279f6:	2b00      	cmp	r3, #0
 80279f8:	d002      	beq.n	8027a00 <HAL_RCC_GetSysClockFreq+0x34>
 80279fa:	2b04      	cmp	r3, #4
 80279fc:	d003      	beq.n	8027a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80279fe:	e0db      	b.n	8027bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027a00:	4b73      	ldr	r3, [pc, #460]	; (8027bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8027a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027a04:	e0db      	b.n	8027bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027a06:	4b73      	ldr	r3, [pc, #460]	; (8027bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8027a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027a0a:	e0d8      	b.n	8027bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027a0c:	4b6f      	ldr	r3, [pc, #444]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8027a0e:	685b      	ldr	r3, [r3, #4]
 8027a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027a16:	4b6d      	ldr	r3, [pc, #436]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8027a18:	685b      	ldr	r3, [r3, #4]
 8027a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027a1e:	2b00      	cmp	r3, #0
 8027a20:	d063      	beq.n	8027aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027a22:	4b6a      	ldr	r3, [pc, #424]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8027a24:	685b      	ldr	r3, [r3, #4]
 8027a26:	099b      	lsrs	r3, r3, #6
 8027a28:	2200      	movs	r2, #0
 8027a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8027a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027a34:	633b      	str	r3, [r7, #48]	; 0x30
 8027a36:	2300      	movs	r3, #0
 8027a38:	637b      	str	r3, [r7, #52]	; 0x34
 8027a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027a3e:	4622      	mov	r2, r4
 8027a40:	462b      	mov	r3, r5
 8027a42:	f04f 0000 	mov.w	r0, #0
 8027a46:	f04f 0100 	mov.w	r1, #0
 8027a4a:	0159      	lsls	r1, r3, #5
 8027a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027a50:	0150      	lsls	r0, r2, #5
 8027a52:	4602      	mov	r2, r0
 8027a54:	460b      	mov	r3, r1
 8027a56:	4621      	mov	r1, r4
 8027a58:	1a51      	subs	r1, r2, r1
 8027a5a:	6139      	str	r1, [r7, #16]
 8027a5c:	4629      	mov	r1, r5
 8027a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8027a62:	617b      	str	r3, [r7, #20]
 8027a64:	f04f 0200 	mov.w	r2, #0
 8027a68:	f04f 0300 	mov.w	r3, #0
 8027a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027a70:	4659      	mov	r1, fp
 8027a72:	018b      	lsls	r3, r1, #6
 8027a74:	4651      	mov	r1, sl
 8027a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8027a7a:	4651      	mov	r1, sl
 8027a7c:	018a      	lsls	r2, r1, #6
 8027a7e:	4651      	mov	r1, sl
 8027a80:	ebb2 0801 	subs.w	r8, r2, r1
 8027a84:	4659      	mov	r1, fp
 8027a86:	eb63 0901 	sbc.w	r9, r3, r1
 8027a8a:	f04f 0200 	mov.w	r2, #0
 8027a8e:	f04f 0300 	mov.w	r3, #0
 8027a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8027a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027a9e:	4690      	mov	r8, r2
 8027aa0:	4699      	mov	r9, r3
 8027aa2:	4623      	mov	r3, r4
 8027aa4:	eb18 0303 	adds.w	r3, r8, r3
 8027aa8:	60bb      	str	r3, [r7, #8]
 8027aaa:	462b      	mov	r3, r5
 8027aac:	eb49 0303 	adc.w	r3, r9, r3
 8027ab0:	60fb      	str	r3, [r7, #12]
 8027ab2:	f04f 0200 	mov.w	r2, #0
 8027ab6:	f04f 0300 	mov.w	r3, #0
 8027aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027abe:	4629      	mov	r1, r5
 8027ac0:	024b      	lsls	r3, r1, #9
 8027ac2:	4621      	mov	r1, r4
 8027ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8027ac8:	4621      	mov	r1, r4
 8027aca:	024a      	lsls	r2, r1, #9
 8027acc:	4610      	mov	r0, r2
 8027ace:	4619      	mov	r1, r3
 8027ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027ad2:	2200      	movs	r2, #0
 8027ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8027ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027adc:	f7f8 fbd8 	bl	8020290 <__aeabi_uldivmod>
 8027ae0:	4602      	mov	r2, r0
 8027ae2:	460b      	mov	r3, r1
 8027ae4:	4613      	mov	r3, r2
 8027ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027ae8:	e058      	b.n	8027b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027aea:	4b38      	ldr	r3, [pc, #224]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8027aec:	685b      	ldr	r3, [r3, #4]
 8027aee:	099b      	lsrs	r3, r3, #6
 8027af0:	2200      	movs	r2, #0
 8027af2:	4618      	mov	r0, r3
 8027af4:	4611      	mov	r1, r2
 8027af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8027afa:	623b      	str	r3, [r7, #32]
 8027afc:	2300      	movs	r3, #0
 8027afe:	627b      	str	r3, [r7, #36]	; 0x24
 8027b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027b04:	4642      	mov	r2, r8
 8027b06:	464b      	mov	r3, r9
 8027b08:	f04f 0000 	mov.w	r0, #0
 8027b0c:	f04f 0100 	mov.w	r1, #0
 8027b10:	0159      	lsls	r1, r3, #5
 8027b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027b16:	0150      	lsls	r0, r2, #5
 8027b18:	4602      	mov	r2, r0
 8027b1a:	460b      	mov	r3, r1
 8027b1c:	4641      	mov	r1, r8
 8027b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8027b22:	4649      	mov	r1, r9
 8027b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8027b28:	f04f 0200 	mov.w	r2, #0
 8027b2c:	f04f 0300 	mov.w	r3, #0
 8027b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8027b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8027b40:	eb63 050b 	sbc.w	r5, r3, fp
 8027b44:	f04f 0200 	mov.w	r2, #0
 8027b48:	f04f 0300 	mov.w	r3, #0
 8027b4c:	00eb      	lsls	r3, r5, #3
 8027b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027b52:	00e2      	lsls	r2, r4, #3
 8027b54:	4614      	mov	r4, r2
 8027b56:	461d      	mov	r5, r3
 8027b58:	4643      	mov	r3, r8
 8027b5a:	18e3      	adds	r3, r4, r3
 8027b5c:	603b      	str	r3, [r7, #0]
 8027b5e:	464b      	mov	r3, r9
 8027b60:	eb45 0303 	adc.w	r3, r5, r3
 8027b64:	607b      	str	r3, [r7, #4]
 8027b66:	f04f 0200 	mov.w	r2, #0
 8027b6a:	f04f 0300 	mov.w	r3, #0
 8027b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027b72:	4629      	mov	r1, r5
 8027b74:	028b      	lsls	r3, r1, #10
 8027b76:	4621      	mov	r1, r4
 8027b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027b7c:	4621      	mov	r1, r4
 8027b7e:	028a      	lsls	r2, r1, #10
 8027b80:	4610      	mov	r0, r2
 8027b82:	4619      	mov	r1, r3
 8027b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b86:	2200      	movs	r2, #0
 8027b88:	61bb      	str	r3, [r7, #24]
 8027b8a:	61fa      	str	r2, [r7, #28]
 8027b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027b90:	f7f8 fb7e 	bl	8020290 <__aeabi_uldivmod>
 8027b94:	4602      	mov	r2, r0
 8027b96:	460b      	mov	r3, r1
 8027b98:	4613      	mov	r3, r2
 8027b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027b9c:	4b0b      	ldr	r3, [pc, #44]	; (8027bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8027b9e:	685b      	ldr	r3, [r3, #4]
 8027ba0:	0c1b      	lsrs	r3, r3, #16
 8027ba2:	f003 0303 	and.w	r3, r3, #3
 8027ba6:	3301      	adds	r3, #1
 8027ba8:	005b      	lsls	r3, r3, #1
 8027baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8027bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027bb6:	e002      	b.n	8027bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027bb8:	4b05      	ldr	r3, [pc, #20]	; (8027bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8027bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027bc0:	4618      	mov	r0, r3
 8027bc2:	3750      	adds	r7, #80	; 0x50
 8027bc4:	46bd      	mov	sp, r7
 8027bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027bca:	bf00      	nop
 8027bcc:	40023800 	.word	0x40023800
 8027bd0:	00f42400 	.word	0x00f42400
 8027bd4:	007a1200 	.word	0x007a1200

08027bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027bd8:	b480      	push	{r7}
 8027bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027bdc:	4b03      	ldr	r3, [pc, #12]	; (8027bec <HAL_RCC_GetHCLKFreq+0x14>)
 8027bde:	681b      	ldr	r3, [r3, #0]
}
 8027be0:	4618      	mov	r0, r3
 8027be2:	46bd      	mov	sp, r7
 8027be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027be8:	4770      	bx	lr
 8027bea:	bf00      	nop
 8027bec:	20000004 	.word	0x20000004

08027bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027bf0:	b580      	push	{r7, lr}
 8027bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027bf4:	f7ff fff0 	bl	8027bd8 <HAL_RCC_GetHCLKFreq>
 8027bf8:	4602      	mov	r2, r0
 8027bfa:	4b05      	ldr	r3, [pc, #20]	; (8027c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027bfc:	689b      	ldr	r3, [r3, #8]
 8027bfe:	0a9b      	lsrs	r3, r3, #10
 8027c00:	f003 0307 	and.w	r3, r3, #7
 8027c04:	4903      	ldr	r1, [pc, #12]	; (8027c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027c06:	5ccb      	ldrb	r3, [r1, r3]
 8027c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027c0c:	4618      	mov	r0, r3
 8027c0e:	bd80      	pop	{r7, pc}
 8027c10:	40023800 	.word	0x40023800
 8027c14:	0802f268 	.word	0x0802f268

08027c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027c18:	b580      	push	{r7, lr}
 8027c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027c1c:	f7ff ffdc 	bl	8027bd8 <HAL_RCC_GetHCLKFreq>
 8027c20:	4602      	mov	r2, r0
 8027c22:	4b05      	ldr	r3, [pc, #20]	; (8027c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8027c24:	689b      	ldr	r3, [r3, #8]
 8027c26:	0b5b      	lsrs	r3, r3, #13
 8027c28:	f003 0307 	and.w	r3, r3, #7
 8027c2c:	4903      	ldr	r1, [pc, #12]	; (8027c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8027c2e:	5ccb      	ldrb	r3, [r1, r3]
 8027c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027c34:	4618      	mov	r0, r3
 8027c36:	bd80      	pop	{r7, pc}
 8027c38:	40023800 	.word	0x40023800
 8027c3c:	0802f268 	.word	0x0802f268

08027c40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027c40:	b480      	push	{r7}
 8027c42:	b083      	sub	sp, #12
 8027c44:	af00      	add	r7, sp, #0
 8027c46:	6078      	str	r0, [r7, #4]
 8027c48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027c4a:	687b      	ldr	r3, [r7, #4]
 8027c4c:	220f      	movs	r2, #15
 8027c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027c50:	4b12      	ldr	r3, [pc, #72]	; (8027c9c <HAL_RCC_GetClockConfig+0x5c>)
 8027c52:	689b      	ldr	r3, [r3, #8]
 8027c54:	f003 0203 	and.w	r2, r3, #3
 8027c58:	687b      	ldr	r3, [r7, #4]
 8027c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027c5c:	4b0f      	ldr	r3, [pc, #60]	; (8027c9c <HAL_RCC_GetClockConfig+0x5c>)
 8027c5e:	689b      	ldr	r3, [r3, #8]
 8027c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027c68:	4b0c      	ldr	r3, [pc, #48]	; (8027c9c <HAL_RCC_GetClockConfig+0x5c>)
 8027c6a:	689b      	ldr	r3, [r3, #8]
 8027c6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027c70:	687b      	ldr	r3, [r7, #4]
 8027c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027c74:	4b09      	ldr	r3, [pc, #36]	; (8027c9c <HAL_RCC_GetClockConfig+0x5c>)
 8027c76:	689b      	ldr	r3, [r3, #8]
 8027c78:	08db      	lsrs	r3, r3, #3
 8027c7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027c7e:	687b      	ldr	r3, [r7, #4]
 8027c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027c82:	4b07      	ldr	r3, [pc, #28]	; (8027ca0 <HAL_RCC_GetClockConfig+0x60>)
 8027c84:	681b      	ldr	r3, [r3, #0]
 8027c86:	f003 020f 	and.w	r2, r3, #15
 8027c8a:	683b      	ldr	r3, [r7, #0]
 8027c8c:	601a      	str	r2, [r3, #0]
}
 8027c8e:	bf00      	nop
 8027c90:	370c      	adds	r7, #12
 8027c92:	46bd      	mov	sp, r7
 8027c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c98:	4770      	bx	lr
 8027c9a:	bf00      	nop
 8027c9c:	40023800 	.word	0x40023800
 8027ca0:	40023c00 	.word	0x40023c00

08027ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027ca4:	b580      	push	{r7, lr}
 8027ca6:	b086      	sub	sp, #24
 8027ca8:	af00      	add	r7, sp, #0
 8027caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027cac:	2300      	movs	r3, #0
 8027cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027cb0:	2300      	movs	r3, #0
 8027cb2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027cb4:	687b      	ldr	r3, [r7, #4]
 8027cb6:	681b      	ldr	r3, [r3, #0]
 8027cb8:	f003 0301 	and.w	r3, r3, #1
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	d10b      	bne.n	8027cd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027cc0:	687b      	ldr	r3, [r7, #4]
 8027cc2:	681b      	ldr	r3, [r3, #0]
 8027cc4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027cc8:	2b00      	cmp	r3, #0
 8027cca:	d105      	bne.n	8027cd8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027ccc:	687b      	ldr	r3, [r7, #4]
 8027cce:	681b      	ldr	r3, [r3, #0]
 8027cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027cd4:	2b00      	cmp	r3, #0
 8027cd6:	d075      	beq.n	8027dc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027cd8:	4b91      	ldr	r3, [pc, #580]	; (8027f20 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027cda:	2200      	movs	r2, #0
 8027cdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027cde:	f7fb fcc5 	bl	802366c <HAL_GetTick>
 8027ce2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027ce4:	e008      	b.n	8027cf8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027ce6:	f7fb fcc1 	bl	802366c <HAL_GetTick>
 8027cea:	4602      	mov	r2, r0
 8027cec:	697b      	ldr	r3, [r7, #20]
 8027cee:	1ad3      	subs	r3, r2, r3
 8027cf0:	2b02      	cmp	r3, #2
 8027cf2:	d901      	bls.n	8027cf8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027cf4:	2303      	movs	r3, #3
 8027cf6:	e189      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027cf8:	4b8a      	ldr	r3, [pc, #552]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027cfa:	681b      	ldr	r3, [r3, #0]
 8027cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027d00:	2b00      	cmp	r3, #0
 8027d02:	d1f0      	bne.n	8027ce6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	681b      	ldr	r3, [r3, #0]
 8027d08:	f003 0301 	and.w	r3, r3, #1
 8027d0c:	2b00      	cmp	r3, #0
 8027d0e:	d009      	beq.n	8027d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027d10:	687b      	ldr	r3, [r7, #4]
 8027d12:	685b      	ldr	r3, [r3, #4]
 8027d14:	019a      	lsls	r2, r3, #6
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	689b      	ldr	r3, [r3, #8]
 8027d1a:	071b      	lsls	r3, r3, #28
 8027d1c:	4981      	ldr	r1, [pc, #516]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d1e:	4313      	orrs	r3, r2
 8027d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027d24:	687b      	ldr	r3, [r7, #4]
 8027d26:	681b      	ldr	r3, [r3, #0]
 8027d28:	f003 0302 	and.w	r3, r3, #2
 8027d2c:	2b00      	cmp	r3, #0
 8027d2e:	d01f      	beq.n	8027d70 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027d30:	4b7c      	ldr	r3, [pc, #496]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027d36:	0f1b      	lsrs	r3, r3, #28
 8027d38:	f003 0307 	and.w	r3, r3, #7
 8027d3c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027d3e:	687b      	ldr	r3, [r7, #4]
 8027d40:	685b      	ldr	r3, [r3, #4]
 8027d42:	019a      	lsls	r2, r3, #6
 8027d44:	687b      	ldr	r3, [r7, #4]
 8027d46:	68db      	ldr	r3, [r3, #12]
 8027d48:	061b      	lsls	r3, r3, #24
 8027d4a:	431a      	orrs	r2, r3
 8027d4c:	693b      	ldr	r3, [r7, #16]
 8027d4e:	071b      	lsls	r3, r3, #28
 8027d50:	4974      	ldr	r1, [pc, #464]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d52:	4313      	orrs	r3, r2
 8027d54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027d58:	4b72      	ldr	r3, [pc, #456]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027d5e:	f023 021f 	bic.w	r2, r3, #31
 8027d62:	687b      	ldr	r3, [r7, #4]
 8027d64:	69db      	ldr	r3, [r3, #28]
 8027d66:	3b01      	subs	r3, #1
 8027d68:	496e      	ldr	r1, [pc, #440]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d6a:	4313      	orrs	r3, r2
 8027d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027d70:	687b      	ldr	r3, [r7, #4]
 8027d72:	681b      	ldr	r3, [r3, #0]
 8027d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	d00d      	beq.n	8027d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027d7c:	687b      	ldr	r3, [r7, #4]
 8027d7e:	685b      	ldr	r3, [r3, #4]
 8027d80:	019a      	lsls	r2, r3, #6
 8027d82:	687b      	ldr	r3, [r7, #4]
 8027d84:	68db      	ldr	r3, [r3, #12]
 8027d86:	061b      	lsls	r3, r3, #24
 8027d88:	431a      	orrs	r2, r3
 8027d8a:	687b      	ldr	r3, [r7, #4]
 8027d8c:	689b      	ldr	r3, [r3, #8]
 8027d8e:	071b      	lsls	r3, r3, #28
 8027d90:	4964      	ldr	r1, [pc, #400]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d92:	4313      	orrs	r3, r2
 8027d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027d98:	4b61      	ldr	r3, [pc, #388]	; (8027f20 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027d9a:	2201      	movs	r2, #1
 8027d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027d9e:	f7fb fc65 	bl	802366c <HAL_GetTick>
 8027da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027da4:	e008      	b.n	8027db8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027da6:	f7fb fc61 	bl	802366c <HAL_GetTick>
 8027daa:	4602      	mov	r2, r0
 8027dac:	697b      	ldr	r3, [r7, #20]
 8027dae:	1ad3      	subs	r3, r2, r3
 8027db0:	2b02      	cmp	r3, #2
 8027db2:	d901      	bls.n	8027db8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027db4:	2303      	movs	r3, #3
 8027db6:	e129      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027db8:	4b5a      	ldr	r3, [pc, #360]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d0f0      	beq.n	8027da6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	681b      	ldr	r3, [r3, #0]
 8027dc8:	f003 0304 	and.w	r3, r3, #4
 8027dcc:	2b00      	cmp	r3, #0
 8027dce:	d105      	bne.n	8027ddc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027dd0:	687b      	ldr	r3, [r7, #4]
 8027dd2:	681b      	ldr	r3, [r3, #0]
 8027dd4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027dd8:	2b00      	cmp	r3, #0
 8027dda:	d079      	beq.n	8027ed0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027ddc:	4b52      	ldr	r3, [pc, #328]	; (8027f28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027dde:	2200      	movs	r2, #0
 8027de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027de2:	f7fb fc43 	bl	802366c <HAL_GetTick>
 8027de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027de8:	e008      	b.n	8027dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027dea:	f7fb fc3f 	bl	802366c <HAL_GetTick>
 8027dee:	4602      	mov	r2, r0
 8027df0:	697b      	ldr	r3, [r7, #20]
 8027df2:	1ad3      	subs	r3, r2, r3
 8027df4:	2b02      	cmp	r3, #2
 8027df6:	d901      	bls.n	8027dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027df8:	2303      	movs	r3, #3
 8027dfa:	e107      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027dfc:	4b49      	ldr	r3, [pc, #292]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027dfe:	681b      	ldr	r3, [r3, #0]
 8027e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027e08:	d0ef      	beq.n	8027dea <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027e0a:	687b      	ldr	r3, [r7, #4]
 8027e0c:	681b      	ldr	r3, [r3, #0]
 8027e0e:	f003 0304 	and.w	r3, r3, #4
 8027e12:	2b00      	cmp	r3, #0
 8027e14:	d020      	beq.n	8027e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027e16:	4b43      	ldr	r3, [pc, #268]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027e1c:	0f1b      	lsrs	r3, r3, #28
 8027e1e:	f003 0307 	and.w	r3, r3, #7
 8027e22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	691b      	ldr	r3, [r3, #16]
 8027e28:	019a      	lsls	r2, r3, #6
 8027e2a:	687b      	ldr	r3, [r7, #4]
 8027e2c:	695b      	ldr	r3, [r3, #20]
 8027e2e:	061b      	lsls	r3, r3, #24
 8027e30:	431a      	orrs	r2, r3
 8027e32:	693b      	ldr	r3, [r7, #16]
 8027e34:	071b      	lsls	r3, r3, #28
 8027e36:	493b      	ldr	r1, [pc, #236]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e38:	4313      	orrs	r3, r2
 8027e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027e3e:	4b39      	ldr	r3, [pc, #228]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027e44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027e48:	687b      	ldr	r3, [r7, #4]
 8027e4a:	6a1b      	ldr	r3, [r3, #32]
 8027e4c:	3b01      	subs	r3, #1
 8027e4e:	021b      	lsls	r3, r3, #8
 8027e50:	4934      	ldr	r1, [pc, #208]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e52:	4313      	orrs	r3, r2
 8027e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027e58:	687b      	ldr	r3, [r7, #4]
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	f003 0308 	and.w	r3, r3, #8
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d01e      	beq.n	8027ea2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027e64:	4b2f      	ldr	r3, [pc, #188]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027e6a:	0e1b      	lsrs	r3, r3, #24
 8027e6c:	f003 030f 	and.w	r3, r3, #15
 8027e70:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027e72:	687b      	ldr	r3, [r7, #4]
 8027e74:	691b      	ldr	r3, [r3, #16]
 8027e76:	019a      	lsls	r2, r3, #6
 8027e78:	693b      	ldr	r3, [r7, #16]
 8027e7a:	061b      	lsls	r3, r3, #24
 8027e7c:	431a      	orrs	r2, r3
 8027e7e:	687b      	ldr	r3, [r7, #4]
 8027e80:	699b      	ldr	r3, [r3, #24]
 8027e82:	071b      	lsls	r3, r3, #28
 8027e84:	4927      	ldr	r1, [pc, #156]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e86:	4313      	orrs	r3, r2
 8027e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027e8c:	4b25      	ldr	r3, [pc, #148]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027e92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027e96:	687b      	ldr	r3, [r7, #4]
 8027e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027e9a:	4922      	ldr	r1, [pc, #136]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e9c:	4313      	orrs	r3, r2
 8027e9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027ea2:	4b21      	ldr	r3, [pc, #132]	; (8027f28 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027ea4:	2201      	movs	r2, #1
 8027ea6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027ea8:	f7fb fbe0 	bl	802366c <HAL_GetTick>
 8027eac:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027eae:	e008      	b.n	8027ec2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027eb0:	f7fb fbdc 	bl	802366c <HAL_GetTick>
 8027eb4:	4602      	mov	r2, r0
 8027eb6:	697b      	ldr	r3, [r7, #20]
 8027eb8:	1ad3      	subs	r3, r2, r3
 8027eba:	2b02      	cmp	r3, #2
 8027ebc:	d901      	bls.n	8027ec2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027ebe:	2303      	movs	r3, #3
 8027ec0:	e0a4      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027ec2:	4b18      	ldr	r3, [pc, #96]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ec4:	681b      	ldr	r3, [r3, #0]
 8027ec6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027ece:	d1ef      	bne.n	8027eb0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	681b      	ldr	r3, [r3, #0]
 8027ed4:	f003 0320 	and.w	r3, r3, #32
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	f000 808b 	beq.w	8027ff4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027ede:	2300      	movs	r3, #0
 8027ee0:	60fb      	str	r3, [r7, #12]
 8027ee2:	4b10      	ldr	r3, [pc, #64]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027ee6:	4a0f      	ldr	r2, [pc, #60]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027eec:	6413      	str	r3, [r2, #64]	; 0x40
 8027eee:	4b0d      	ldr	r3, [pc, #52]	; (8027f24 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027ef6:	60fb      	str	r3, [r7, #12]
 8027ef8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8027efa:	4b0c      	ldr	r3, [pc, #48]	; (8027f2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027efc:	681b      	ldr	r3, [r3, #0]
 8027efe:	4a0b      	ldr	r2, [pc, #44]	; (8027f2c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027f04:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8027f06:	f7fb fbb1 	bl	802366c <HAL_GetTick>
 8027f0a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027f0c:	e010      	b.n	8027f30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8027f0e:	f7fb fbad 	bl	802366c <HAL_GetTick>
 8027f12:	4602      	mov	r2, r0
 8027f14:	697b      	ldr	r3, [r7, #20]
 8027f16:	1ad3      	subs	r3, r2, r3
 8027f18:	2b02      	cmp	r3, #2
 8027f1a:	d909      	bls.n	8027f30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8027f1c:	2303      	movs	r3, #3
 8027f1e:	e075      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8027f20:	42470068 	.word	0x42470068
 8027f24:	40023800 	.word	0x40023800
 8027f28:	42470070 	.word	0x42470070
 8027f2c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027f30:	4b38      	ldr	r3, [pc, #224]	; (8028014 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8027f32:	681b      	ldr	r3, [r3, #0]
 8027f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d0e8      	beq.n	8027f0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027f3c:	4b36      	ldr	r3, [pc, #216]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027f44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8027f46:	693b      	ldr	r3, [r7, #16]
 8027f48:	2b00      	cmp	r3, #0
 8027f4a:	d02f      	beq.n	8027fac <HAL_RCCEx_PeriphCLKConfig+0x308>
 8027f4c:	687b      	ldr	r3, [r7, #4]
 8027f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027f54:	693a      	ldr	r2, [r7, #16]
 8027f56:	429a      	cmp	r2, r3
 8027f58:	d028      	beq.n	8027fac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8027f5a:	4b2f      	ldr	r3, [pc, #188]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027f62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027f64:	4b2d      	ldr	r3, [pc, #180]	; (802801c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027f66:	2201      	movs	r2, #1
 8027f68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8027f6a:	4b2c      	ldr	r3, [pc, #176]	; (802801c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027f6c:	2200      	movs	r2, #0
 8027f6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8027f70:	4a29      	ldr	r2, [pc, #164]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027f72:	693b      	ldr	r3, [r7, #16]
 8027f74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8027f76:	4b28      	ldr	r3, [pc, #160]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027f7a:	f003 0301 	and.w	r3, r3, #1
 8027f7e:	2b01      	cmp	r3, #1
 8027f80:	d114      	bne.n	8027fac <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8027f82:	f7fb fb73 	bl	802366c <HAL_GetTick>
 8027f86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027f88:	e00a      	b.n	8027fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027f8a:	f7fb fb6f 	bl	802366c <HAL_GetTick>
 8027f8e:	4602      	mov	r2, r0
 8027f90:	697b      	ldr	r3, [r7, #20]
 8027f92:	1ad3      	subs	r3, r2, r3
 8027f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8027f98:	4293      	cmp	r3, r2
 8027f9a:	d901      	bls.n	8027fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8027f9c:	2303      	movs	r3, #3
 8027f9e:	e035      	b.n	802800c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8027fa0:	4b1d      	ldr	r3, [pc, #116]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027fa4:	f003 0302 	and.w	r3, r3, #2
 8027fa8:	2b00      	cmp	r3, #0
 8027faa:	d0ee      	beq.n	8027f8a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8027fb8:	d10d      	bne.n	8027fd6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8027fba:	4b17      	ldr	r3, [pc, #92]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fbc:	689b      	ldr	r3, [r3, #8]
 8027fbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8027fc2:	687b      	ldr	r3, [r7, #4]
 8027fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027fc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8027fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027fce:	4912      	ldr	r1, [pc, #72]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fd0:	4313      	orrs	r3, r2
 8027fd2:	608b      	str	r3, [r1, #8]
 8027fd4:	e005      	b.n	8027fe2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8027fd6:	4b10      	ldr	r3, [pc, #64]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fd8:	689b      	ldr	r3, [r3, #8]
 8027fda:	4a0f      	ldr	r2, [pc, #60]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fdc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8027fe0:	6093      	str	r3, [r2, #8]
 8027fe2:	4b0d      	ldr	r3, [pc, #52]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fe4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fee:	490a      	ldr	r1, [pc, #40]	; (8028018 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027ff0:	4313      	orrs	r3, r2
 8027ff2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8027ff4:	687b      	ldr	r3, [r7, #4]
 8027ff6:	681b      	ldr	r3, [r3, #0]
 8027ff8:	f003 0310 	and.w	r3, r3, #16
 8027ffc:	2b00      	cmp	r3, #0
 8027ffe:	d004      	beq.n	802800a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8028000:	687b      	ldr	r3, [r7, #4]
 8028002:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8028006:	4b06      	ldr	r3, [pc, #24]	; (8028020 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8028008:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802800a:	2300      	movs	r3, #0
}
 802800c:	4618      	mov	r0, r3
 802800e:	3718      	adds	r7, #24
 8028010:	46bd      	mov	sp, r7
 8028012:	bd80      	pop	{r7, pc}
 8028014:	40007000 	.word	0x40007000
 8028018:	40023800 	.word	0x40023800
 802801c:	42470e40 	.word	0x42470e40
 8028020:	424711e0 	.word	0x424711e0

08028024 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8028024:	b580      	push	{r7, lr}
 8028026:	b082      	sub	sp, #8
 8028028:	af00      	add	r7, sp, #0
 802802a:	6078      	str	r0, [r7, #4]
 802802c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 802802e:	687b      	ldr	r3, [r7, #4]
 8028030:	2b00      	cmp	r3, #0
 8028032:	d101      	bne.n	8028038 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8028034:	2301      	movs	r3, #1
 8028036:	e025      	b.n	8028084 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802803e:	b2db      	uxtb	r3, r3
 8028040:	2b00      	cmp	r3, #0
 8028042:	d106      	bne.n	8028052 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8028044:	687b      	ldr	r3, [r7, #4]
 8028046:	2200      	movs	r2, #0
 8028048:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 802804c:	6878      	ldr	r0, [r7, #4]
 802804e:	f7f9 ff1f 	bl	8021e90 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8028052:	687b      	ldr	r3, [r7, #4]
 8028054:	2202      	movs	r2, #2
 8028056:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	681a      	ldr	r2, [r3, #0]
 802805e:	687b      	ldr	r3, [r7, #4]
 8028060:	3304      	adds	r3, #4
 8028062:	4619      	mov	r1, r3
 8028064:	4610      	mov	r0, r2
 8028066:	f001 ff33 	bl	8029ed0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 802806a:	687b      	ldr	r3, [r7, #4]
 802806c:	6818      	ldr	r0, [r3, #0]
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	685b      	ldr	r3, [r3, #4]
 8028072:	461a      	mov	r2, r3
 8028074:	6839      	ldr	r1, [r7, #0]
 8028076:	f001 ff88 	bl	8029f8a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802807a:	687b      	ldr	r3, [r7, #4]
 802807c:	2201      	movs	r2, #1
 802807e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8028082:	2300      	movs	r3, #0
}
 8028084:	4618      	mov	r0, r3
 8028086:	3708      	adds	r7, #8
 8028088:	46bd      	mov	sp, r7
 802808a:	bd80      	pop	{r7, pc}

0802808c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 802808c:	b580      	push	{r7, lr}
 802808e:	b086      	sub	sp, #24
 8028090:	af00      	add	r7, sp, #0
 8028092:	60f8      	str	r0, [r7, #12]
 8028094:	60b9      	str	r1, [r7, #8]
 8028096:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8028098:	68fb      	ldr	r3, [r7, #12]
 802809a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802809e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80280a0:	7dfb      	ldrb	r3, [r7, #23]
 80280a2:	2b02      	cmp	r3, #2
 80280a4:	d101      	bne.n	80280aa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80280a6:	2302      	movs	r3, #2
 80280a8:	e021      	b.n	80280ee <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80280aa:	7dfb      	ldrb	r3, [r7, #23]
 80280ac:	2b01      	cmp	r3, #1
 80280ae:	d002      	beq.n	80280b6 <HAL_SDRAM_SendCommand+0x2a>
 80280b0:	7dfb      	ldrb	r3, [r7, #23]
 80280b2:	2b05      	cmp	r3, #5
 80280b4:	d118      	bne.n	80280e8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80280b6:	68fb      	ldr	r3, [r7, #12]
 80280b8:	2202      	movs	r2, #2
 80280ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80280be:	68fb      	ldr	r3, [r7, #12]
 80280c0:	681b      	ldr	r3, [r3, #0]
 80280c2:	687a      	ldr	r2, [r7, #4]
 80280c4:	68b9      	ldr	r1, [r7, #8]
 80280c6:	4618      	mov	r0, r3
 80280c8:	f001 ffc8 	bl	802a05c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80280cc:	68bb      	ldr	r3, [r7, #8]
 80280ce:	681b      	ldr	r3, [r3, #0]
 80280d0:	2b02      	cmp	r3, #2
 80280d2:	d104      	bne.n	80280de <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80280d4:	68fb      	ldr	r3, [r7, #12]
 80280d6:	2205      	movs	r2, #5
 80280d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80280dc:	e006      	b.n	80280ec <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80280de:	68fb      	ldr	r3, [r7, #12]
 80280e0:	2201      	movs	r2, #1
 80280e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80280e6:	e001      	b.n	80280ec <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80280e8:	2301      	movs	r3, #1
 80280ea:	e000      	b.n	80280ee <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80280ec:	2300      	movs	r3, #0
}
 80280ee:	4618      	mov	r0, r3
 80280f0:	3718      	adds	r7, #24
 80280f2:	46bd      	mov	sp, r7
 80280f4:	bd80      	pop	{r7, pc}

080280f6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80280f6:	b580      	push	{r7, lr}
 80280f8:	b082      	sub	sp, #8
 80280fa:	af00      	add	r7, sp, #0
 80280fc:	6078      	str	r0, [r7, #4]
 80280fe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8028100:	687b      	ldr	r3, [r7, #4]
 8028102:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028106:	b2db      	uxtb	r3, r3
 8028108:	2b02      	cmp	r3, #2
 802810a:	d101      	bne.n	8028110 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 802810c:	2302      	movs	r3, #2
 802810e:	e016      	b.n	802813e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8028110:	687b      	ldr	r3, [r7, #4]
 8028112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028116:	b2db      	uxtb	r3, r3
 8028118:	2b01      	cmp	r3, #1
 802811a:	d10f      	bne.n	802813c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802811c:	687b      	ldr	r3, [r7, #4]
 802811e:	2202      	movs	r2, #2
 8028120:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	681b      	ldr	r3, [r3, #0]
 8028128:	6839      	ldr	r1, [r7, #0]
 802812a:	4618      	mov	r0, r3
 802812c:	f001 ffd3 	bl	802a0d6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	2201      	movs	r2, #1
 8028134:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8028138:	2300      	movs	r3, #0
 802813a:	e000      	b.n	802813e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 802813c:	2301      	movs	r3, #1
}
 802813e:	4618      	mov	r0, r3
 8028140:	3708      	adds	r7, #8
 8028142:	46bd      	mov	sp, r7
 8028144:	bd80      	pop	{r7, pc}

08028146 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028146:	b580      	push	{r7, lr}
 8028148:	b082      	sub	sp, #8
 802814a:	af00      	add	r7, sp, #0
 802814c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 802814e:	687b      	ldr	r3, [r7, #4]
 8028150:	2b00      	cmp	r3, #0
 8028152:	d101      	bne.n	8028158 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028154:	2301      	movs	r3, #1
 8028156:	e07b      	b.n	8028250 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802815c:	2b00      	cmp	r3, #0
 802815e:	d108      	bne.n	8028172 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	685b      	ldr	r3, [r3, #4]
 8028164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028168:	d009      	beq.n	802817e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	2200      	movs	r2, #0
 802816e:	61da      	str	r2, [r3, #28]
 8028170:	e005      	b.n	802817e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8028172:	687b      	ldr	r3, [r7, #4]
 8028174:	2200      	movs	r2, #0
 8028176:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8028178:	687b      	ldr	r3, [r7, #4]
 802817a:	2200      	movs	r2, #0
 802817c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802817e:	687b      	ldr	r3, [r7, #4]
 8028180:	2200      	movs	r2, #0
 8028182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028184:	687b      	ldr	r3, [r7, #4]
 8028186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802818a:	b2db      	uxtb	r3, r3
 802818c:	2b00      	cmp	r3, #0
 802818e:	d106      	bne.n	802819e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028190:	687b      	ldr	r3, [r7, #4]
 8028192:	2200      	movs	r2, #0
 8028194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028198:	6878      	ldr	r0, [r7, #4]
 802819a:	f7f9 fcbf 	bl	8021b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802819e:	687b      	ldr	r3, [r7, #4]
 80281a0:	2202      	movs	r2, #2
 80281a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80281a6:	687b      	ldr	r3, [r7, #4]
 80281a8:	681b      	ldr	r3, [r3, #0]
 80281aa:	681a      	ldr	r2, [r3, #0]
 80281ac:	687b      	ldr	r3, [r7, #4]
 80281ae:	681b      	ldr	r3, [r3, #0]
 80281b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80281b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80281b6:	687b      	ldr	r3, [r7, #4]
 80281b8:	685b      	ldr	r3, [r3, #4]
 80281ba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	689b      	ldr	r3, [r3, #8]
 80281c2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80281c6:	431a      	orrs	r2, r3
 80281c8:	687b      	ldr	r3, [r7, #4]
 80281ca:	68db      	ldr	r3, [r3, #12]
 80281cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80281d0:	431a      	orrs	r2, r3
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	691b      	ldr	r3, [r3, #16]
 80281d6:	f003 0302 	and.w	r3, r3, #2
 80281da:	431a      	orrs	r2, r3
 80281dc:	687b      	ldr	r3, [r7, #4]
 80281de:	695b      	ldr	r3, [r3, #20]
 80281e0:	f003 0301 	and.w	r3, r3, #1
 80281e4:	431a      	orrs	r2, r3
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	699b      	ldr	r3, [r3, #24]
 80281ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80281ee:	431a      	orrs	r2, r3
 80281f0:	687b      	ldr	r3, [r7, #4]
 80281f2:	69db      	ldr	r3, [r3, #28]
 80281f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80281f8:	431a      	orrs	r2, r3
 80281fa:	687b      	ldr	r3, [r7, #4]
 80281fc:	6a1b      	ldr	r3, [r3, #32]
 80281fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028202:	ea42 0103 	orr.w	r1, r2, r3
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802820a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	681b      	ldr	r3, [r3, #0]
 8028212:	430a      	orrs	r2, r1
 8028214:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	699b      	ldr	r3, [r3, #24]
 802821a:	0c1b      	lsrs	r3, r3, #16
 802821c:	f003 0104 	and.w	r1, r3, #4
 8028220:	687b      	ldr	r3, [r7, #4]
 8028222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028224:	f003 0210 	and.w	r2, r3, #16
 8028228:	687b      	ldr	r3, [r7, #4]
 802822a:	681b      	ldr	r3, [r3, #0]
 802822c:	430a      	orrs	r2, r1
 802822e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028230:	687b      	ldr	r3, [r7, #4]
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	69da      	ldr	r2, [r3, #28]
 8028236:	687b      	ldr	r3, [r7, #4]
 8028238:	681b      	ldr	r3, [r3, #0]
 802823a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802823e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	2200      	movs	r2, #0
 8028244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028246:	687b      	ldr	r3, [r7, #4]
 8028248:	2201      	movs	r2, #1
 802824a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802824e:	2300      	movs	r3, #0
}
 8028250:	4618      	mov	r0, r3
 8028252:	3708      	adds	r7, #8
 8028254:	46bd      	mov	sp, r7
 8028256:	bd80      	pop	{r7, pc}

08028258 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8028258:	b580      	push	{r7, lr}
 802825a:	b082      	sub	sp, #8
 802825c:	af00      	add	r7, sp, #0
 802825e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	2b00      	cmp	r3, #0
 8028264:	d101      	bne.n	802826a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8028266:	2301      	movs	r3, #1
 8028268:	e01a      	b.n	80282a0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 802826a:	687b      	ldr	r3, [r7, #4]
 802826c:	2202      	movs	r2, #2
 802826e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8028272:	687b      	ldr	r3, [r7, #4]
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	681a      	ldr	r2, [r3, #0]
 8028278:	687b      	ldr	r3, [r7, #4]
 802827a:	681b      	ldr	r3, [r3, #0]
 802827c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028280:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8028282:	6878      	ldr	r0, [r7, #4]
 8028284:	f7f9 fc92 	bl	8021bac <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028288:	687b      	ldr	r3, [r7, #4]
 802828a:	2200      	movs	r2, #0
 802828c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 802828e:	687b      	ldr	r3, [r7, #4]
 8028290:	2200      	movs	r2, #0
 8028292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8028296:	687b      	ldr	r3, [r7, #4]
 8028298:	2200      	movs	r2, #0
 802829a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 802829e:	2300      	movs	r3, #0
}
 80282a0:	4618      	mov	r0, r3
 80282a2:	3708      	adds	r7, #8
 80282a4:	46bd      	mov	sp, r7
 80282a6:	bd80      	pop	{r7, pc}

080282a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80282a8:	b580      	push	{r7, lr}
 80282aa:	b088      	sub	sp, #32
 80282ac:	af00      	add	r7, sp, #0
 80282ae:	60f8      	str	r0, [r7, #12]
 80282b0:	60b9      	str	r1, [r7, #8]
 80282b2:	603b      	str	r3, [r7, #0]
 80282b4:	4613      	mov	r3, r2
 80282b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80282b8:	2300      	movs	r3, #0
 80282ba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80282bc:	68fb      	ldr	r3, [r7, #12]
 80282be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80282c2:	2b01      	cmp	r3, #1
 80282c4:	d101      	bne.n	80282ca <HAL_SPI_Transmit+0x22>
 80282c6:	2302      	movs	r3, #2
 80282c8:	e126      	b.n	8028518 <HAL_SPI_Transmit+0x270>
 80282ca:	68fb      	ldr	r3, [r7, #12]
 80282cc:	2201      	movs	r2, #1
 80282ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80282d2:	f7fb f9cb 	bl	802366c <HAL_GetTick>
 80282d6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80282d8:	88fb      	ldrh	r3, [r7, #6]
 80282da:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80282dc:	68fb      	ldr	r3, [r7, #12]
 80282de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80282e2:	b2db      	uxtb	r3, r3
 80282e4:	2b01      	cmp	r3, #1
 80282e6:	d002      	beq.n	80282ee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80282e8:	2302      	movs	r3, #2
 80282ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80282ec:	e10b      	b.n	8028506 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80282ee:	68bb      	ldr	r3, [r7, #8]
 80282f0:	2b00      	cmp	r3, #0
 80282f2:	d002      	beq.n	80282fa <HAL_SPI_Transmit+0x52>
 80282f4:	88fb      	ldrh	r3, [r7, #6]
 80282f6:	2b00      	cmp	r3, #0
 80282f8:	d102      	bne.n	8028300 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80282fa:	2301      	movs	r3, #1
 80282fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80282fe:	e102      	b.n	8028506 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028300:	68fb      	ldr	r3, [r7, #12]
 8028302:	2203      	movs	r2, #3
 8028304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028308:	68fb      	ldr	r3, [r7, #12]
 802830a:	2200      	movs	r2, #0
 802830c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802830e:	68fb      	ldr	r3, [r7, #12]
 8028310:	68ba      	ldr	r2, [r7, #8]
 8028312:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028314:	68fb      	ldr	r3, [r7, #12]
 8028316:	88fa      	ldrh	r2, [r7, #6]
 8028318:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802831a:	68fb      	ldr	r3, [r7, #12]
 802831c:	88fa      	ldrh	r2, [r7, #6]
 802831e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028320:	68fb      	ldr	r3, [r7, #12]
 8028322:	2200      	movs	r2, #0
 8028324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028326:	68fb      	ldr	r3, [r7, #12]
 8028328:	2200      	movs	r2, #0
 802832a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802832c:	68fb      	ldr	r3, [r7, #12]
 802832e:	2200      	movs	r2, #0
 8028330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028332:	68fb      	ldr	r3, [r7, #12]
 8028334:	2200      	movs	r2, #0
 8028336:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028338:	68fb      	ldr	r3, [r7, #12]
 802833a:	2200      	movs	r2, #0
 802833c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802833e:	68fb      	ldr	r3, [r7, #12]
 8028340:	689b      	ldr	r3, [r3, #8]
 8028342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028346:	d10f      	bne.n	8028368 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8028348:	68fb      	ldr	r3, [r7, #12]
 802834a:	681b      	ldr	r3, [r3, #0]
 802834c:	681a      	ldr	r2, [r3, #0]
 802834e:	68fb      	ldr	r3, [r7, #12]
 8028350:	681b      	ldr	r3, [r3, #0]
 8028352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028356:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8028358:	68fb      	ldr	r3, [r7, #12]
 802835a:	681b      	ldr	r3, [r3, #0]
 802835c:	681a      	ldr	r2, [r3, #0]
 802835e:	68fb      	ldr	r3, [r7, #12]
 8028360:	681b      	ldr	r3, [r3, #0]
 8028362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028366:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028368:	68fb      	ldr	r3, [r7, #12]
 802836a:	681b      	ldr	r3, [r3, #0]
 802836c:	681b      	ldr	r3, [r3, #0]
 802836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028372:	2b40      	cmp	r3, #64	; 0x40
 8028374:	d007      	beq.n	8028386 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028376:	68fb      	ldr	r3, [r7, #12]
 8028378:	681b      	ldr	r3, [r3, #0]
 802837a:	681a      	ldr	r2, [r3, #0]
 802837c:	68fb      	ldr	r3, [r7, #12]
 802837e:	681b      	ldr	r3, [r3, #0]
 8028380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028386:	68fb      	ldr	r3, [r7, #12]
 8028388:	68db      	ldr	r3, [r3, #12]
 802838a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802838e:	d14b      	bne.n	8028428 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028390:	68fb      	ldr	r3, [r7, #12]
 8028392:	685b      	ldr	r3, [r3, #4]
 8028394:	2b00      	cmp	r3, #0
 8028396:	d002      	beq.n	802839e <HAL_SPI_Transmit+0xf6>
 8028398:	8afb      	ldrh	r3, [r7, #22]
 802839a:	2b01      	cmp	r3, #1
 802839c:	d13e      	bne.n	802841c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802839e:	68fb      	ldr	r3, [r7, #12]
 80283a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283a2:	881a      	ldrh	r2, [r3, #0]
 80283a4:	68fb      	ldr	r3, [r7, #12]
 80283a6:	681b      	ldr	r3, [r3, #0]
 80283a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80283aa:	68fb      	ldr	r3, [r7, #12]
 80283ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283ae:	1c9a      	adds	r2, r3, #2
 80283b0:	68fb      	ldr	r3, [r7, #12]
 80283b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80283b4:	68fb      	ldr	r3, [r7, #12]
 80283b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80283b8:	b29b      	uxth	r3, r3
 80283ba:	3b01      	subs	r3, #1
 80283bc:	b29a      	uxth	r2, r3
 80283be:	68fb      	ldr	r3, [r7, #12]
 80283c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80283c2:	e02b      	b.n	802841c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80283c4:	68fb      	ldr	r3, [r7, #12]
 80283c6:	681b      	ldr	r3, [r3, #0]
 80283c8:	689b      	ldr	r3, [r3, #8]
 80283ca:	f003 0302 	and.w	r3, r3, #2
 80283ce:	2b02      	cmp	r3, #2
 80283d0:	d112      	bne.n	80283f8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80283d2:	68fb      	ldr	r3, [r7, #12]
 80283d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283d6:	881a      	ldrh	r2, [r3, #0]
 80283d8:	68fb      	ldr	r3, [r7, #12]
 80283da:	681b      	ldr	r3, [r3, #0]
 80283dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80283de:	68fb      	ldr	r3, [r7, #12]
 80283e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283e2:	1c9a      	adds	r2, r3, #2
 80283e4:	68fb      	ldr	r3, [r7, #12]
 80283e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80283e8:	68fb      	ldr	r3, [r7, #12]
 80283ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80283ec:	b29b      	uxth	r3, r3
 80283ee:	3b01      	subs	r3, #1
 80283f0:	b29a      	uxth	r2, r3
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80283f6:	e011      	b.n	802841c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80283f8:	f7fb f938 	bl	802366c <HAL_GetTick>
 80283fc:	4602      	mov	r2, r0
 80283fe:	69bb      	ldr	r3, [r7, #24]
 8028400:	1ad3      	subs	r3, r2, r3
 8028402:	683a      	ldr	r2, [r7, #0]
 8028404:	429a      	cmp	r2, r3
 8028406:	d803      	bhi.n	8028410 <HAL_SPI_Transmit+0x168>
 8028408:	683b      	ldr	r3, [r7, #0]
 802840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802840e:	d102      	bne.n	8028416 <HAL_SPI_Transmit+0x16e>
 8028410:	683b      	ldr	r3, [r7, #0]
 8028412:	2b00      	cmp	r3, #0
 8028414:	d102      	bne.n	802841c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8028416:	2303      	movs	r3, #3
 8028418:	77fb      	strb	r3, [r7, #31]
          goto error;
 802841a:	e074      	b.n	8028506 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802841c:	68fb      	ldr	r3, [r7, #12]
 802841e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028420:	b29b      	uxth	r3, r3
 8028422:	2b00      	cmp	r3, #0
 8028424:	d1ce      	bne.n	80283c4 <HAL_SPI_Transmit+0x11c>
 8028426:	e04c      	b.n	80284c2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028428:	68fb      	ldr	r3, [r7, #12]
 802842a:	685b      	ldr	r3, [r3, #4]
 802842c:	2b00      	cmp	r3, #0
 802842e:	d002      	beq.n	8028436 <HAL_SPI_Transmit+0x18e>
 8028430:	8afb      	ldrh	r3, [r7, #22]
 8028432:	2b01      	cmp	r3, #1
 8028434:	d140      	bne.n	80284b8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028436:	68fb      	ldr	r3, [r7, #12]
 8028438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802843a:	68fb      	ldr	r3, [r7, #12]
 802843c:	681b      	ldr	r3, [r3, #0]
 802843e:	330c      	adds	r3, #12
 8028440:	7812      	ldrb	r2, [r2, #0]
 8028442:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028444:	68fb      	ldr	r3, [r7, #12]
 8028446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028448:	1c5a      	adds	r2, r3, #1
 802844a:	68fb      	ldr	r3, [r7, #12]
 802844c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802844e:	68fb      	ldr	r3, [r7, #12]
 8028450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028452:	b29b      	uxth	r3, r3
 8028454:	3b01      	subs	r3, #1
 8028456:	b29a      	uxth	r2, r3
 8028458:	68fb      	ldr	r3, [r7, #12]
 802845a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 802845c:	e02c      	b.n	80284b8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802845e:	68fb      	ldr	r3, [r7, #12]
 8028460:	681b      	ldr	r3, [r3, #0]
 8028462:	689b      	ldr	r3, [r3, #8]
 8028464:	f003 0302 	and.w	r3, r3, #2
 8028468:	2b02      	cmp	r3, #2
 802846a:	d113      	bne.n	8028494 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802846c:	68fb      	ldr	r3, [r7, #12]
 802846e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028470:	68fb      	ldr	r3, [r7, #12]
 8028472:	681b      	ldr	r3, [r3, #0]
 8028474:	330c      	adds	r3, #12
 8028476:	7812      	ldrb	r2, [r2, #0]
 8028478:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802847a:	68fb      	ldr	r3, [r7, #12]
 802847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802847e:	1c5a      	adds	r2, r3, #1
 8028480:	68fb      	ldr	r3, [r7, #12]
 8028482:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028484:	68fb      	ldr	r3, [r7, #12]
 8028486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028488:	b29b      	uxth	r3, r3
 802848a:	3b01      	subs	r3, #1
 802848c:	b29a      	uxth	r2, r3
 802848e:	68fb      	ldr	r3, [r7, #12]
 8028490:	86da      	strh	r2, [r3, #54]	; 0x36
 8028492:	e011      	b.n	80284b8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028494:	f7fb f8ea 	bl	802366c <HAL_GetTick>
 8028498:	4602      	mov	r2, r0
 802849a:	69bb      	ldr	r3, [r7, #24]
 802849c:	1ad3      	subs	r3, r2, r3
 802849e:	683a      	ldr	r2, [r7, #0]
 80284a0:	429a      	cmp	r2, r3
 80284a2:	d803      	bhi.n	80284ac <HAL_SPI_Transmit+0x204>
 80284a4:	683b      	ldr	r3, [r7, #0]
 80284a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80284aa:	d102      	bne.n	80284b2 <HAL_SPI_Transmit+0x20a>
 80284ac:	683b      	ldr	r3, [r7, #0]
 80284ae:	2b00      	cmp	r3, #0
 80284b0:	d102      	bne.n	80284b8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80284b2:	2303      	movs	r3, #3
 80284b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80284b6:	e026      	b.n	8028506 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80284b8:	68fb      	ldr	r3, [r7, #12]
 80284ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80284bc:	b29b      	uxth	r3, r3
 80284be:	2b00      	cmp	r3, #0
 80284c0:	d1cd      	bne.n	802845e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80284c2:	69ba      	ldr	r2, [r7, #24]
 80284c4:	6839      	ldr	r1, [r7, #0]
 80284c6:	68f8      	ldr	r0, [r7, #12]
 80284c8:	f000 fbda 	bl	8028c80 <SPI_EndRxTxTransaction>
 80284cc:	4603      	mov	r3, r0
 80284ce:	2b00      	cmp	r3, #0
 80284d0:	d002      	beq.n	80284d8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80284d2:	68fb      	ldr	r3, [r7, #12]
 80284d4:	2220      	movs	r2, #32
 80284d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80284d8:	68fb      	ldr	r3, [r7, #12]
 80284da:	689b      	ldr	r3, [r3, #8]
 80284dc:	2b00      	cmp	r3, #0
 80284de:	d10a      	bne.n	80284f6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80284e0:	2300      	movs	r3, #0
 80284e2:	613b      	str	r3, [r7, #16]
 80284e4:	68fb      	ldr	r3, [r7, #12]
 80284e6:	681b      	ldr	r3, [r3, #0]
 80284e8:	68db      	ldr	r3, [r3, #12]
 80284ea:	613b      	str	r3, [r7, #16]
 80284ec:	68fb      	ldr	r3, [r7, #12]
 80284ee:	681b      	ldr	r3, [r3, #0]
 80284f0:	689b      	ldr	r3, [r3, #8]
 80284f2:	613b      	str	r3, [r7, #16]
 80284f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80284f6:	68fb      	ldr	r3, [r7, #12]
 80284f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80284fa:	2b00      	cmp	r3, #0
 80284fc:	d002      	beq.n	8028504 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80284fe:	2301      	movs	r3, #1
 8028500:	77fb      	strb	r3, [r7, #31]
 8028502:	e000      	b.n	8028506 <HAL_SPI_Transmit+0x25e>
  }

error:
 8028504:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028506:	68fb      	ldr	r3, [r7, #12]
 8028508:	2201      	movs	r2, #1
 802850a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802850e:	68fb      	ldr	r3, [r7, #12]
 8028510:	2200      	movs	r2, #0
 8028512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028516:	7ffb      	ldrb	r3, [r7, #31]
}
 8028518:	4618      	mov	r0, r3
 802851a:	3720      	adds	r7, #32
 802851c:	46bd      	mov	sp, r7
 802851e:	bd80      	pop	{r7, pc}

08028520 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028520:	b580      	push	{r7, lr}
 8028522:	b088      	sub	sp, #32
 8028524:	af02      	add	r7, sp, #8
 8028526:	60f8      	str	r0, [r7, #12]
 8028528:	60b9      	str	r1, [r7, #8]
 802852a:	603b      	str	r3, [r7, #0]
 802852c:	4613      	mov	r3, r2
 802852e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028530:	2300      	movs	r3, #0
 8028532:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028534:	68fb      	ldr	r3, [r7, #12]
 8028536:	685b      	ldr	r3, [r3, #4]
 8028538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802853c:	d112      	bne.n	8028564 <HAL_SPI_Receive+0x44>
 802853e:	68fb      	ldr	r3, [r7, #12]
 8028540:	689b      	ldr	r3, [r3, #8]
 8028542:	2b00      	cmp	r3, #0
 8028544:	d10e      	bne.n	8028564 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028546:	68fb      	ldr	r3, [r7, #12]
 8028548:	2204      	movs	r2, #4
 802854a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802854e:	88fa      	ldrh	r2, [r7, #6]
 8028550:	683b      	ldr	r3, [r7, #0]
 8028552:	9300      	str	r3, [sp, #0]
 8028554:	4613      	mov	r3, r2
 8028556:	68ba      	ldr	r2, [r7, #8]
 8028558:	68b9      	ldr	r1, [r7, #8]
 802855a:	68f8      	ldr	r0, [r7, #12]
 802855c:	f000 f8f1 	bl	8028742 <HAL_SPI_TransmitReceive>
 8028560:	4603      	mov	r3, r0
 8028562:	e0ea      	b.n	802873a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028564:	68fb      	ldr	r3, [r7, #12]
 8028566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802856a:	2b01      	cmp	r3, #1
 802856c:	d101      	bne.n	8028572 <HAL_SPI_Receive+0x52>
 802856e:	2302      	movs	r3, #2
 8028570:	e0e3      	b.n	802873a <HAL_SPI_Receive+0x21a>
 8028572:	68fb      	ldr	r3, [r7, #12]
 8028574:	2201      	movs	r2, #1
 8028576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802857a:	f7fb f877 	bl	802366c <HAL_GetTick>
 802857e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028586:	b2db      	uxtb	r3, r3
 8028588:	2b01      	cmp	r3, #1
 802858a:	d002      	beq.n	8028592 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 802858c:	2302      	movs	r3, #2
 802858e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028590:	e0ca      	b.n	8028728 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8028592:	68bb      	ldr	r3, [r7, #8]
 8028594:	2b00      	cmp	r3, #0
 8028596:	d002      	beq.n	802859e <HAL_SPI_Receive+0x7e>
 8028598:	88fb      	ldrh	r3, [r7, #6]
 802859a:	2b00      	cmp	r3, #0
 802859c:	d102      	bne.n	80285a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802859e:	2301      	movs	r3, #1
 80285a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80285a2:	e0c1      	b.n	8028728 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80285a4:	68fb      	ldr	r3, [r7, #12]
 80285a6:	2204      	movs	r2, #4
 80285a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80285ac:	68fb      	ldr	r3, [r7, #12]
 80285ae:	2200      	movs	r2, #0
 80285b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	68ba      	ldr	r2, [r7, #8]
 80285b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80285b8:	68fb      	ldr	r3, [r7, #12]
 80285ba:	88fa      	ldrh	r2, [r7, #6]
 80285bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80285be:	68fb      	ldr	r3, [r7, #12]
 80285c0:	88fa      	ldrh	r2, [r7, #6]
 80285c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80285c4:	68fb      	ldr	r3, [r7, #12]
 80285c6:	2200      	movs	r2, #0
 80285c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80285ca:	68fb      	ldr	r3, [r7, #12]
 80285cc:	2200      	movs	r2, #0
 80285ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80285d0:	68fb      	ldr	r3, [r7, #12]
 80285d2:	2200      	movs	r2, #0
 80285d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80285d6:	68fb      	ldr	r3, [r7, #12]
 80285d8:	2200      	movs	r2, #0
 80285da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80285dc:	68fb      	ldr	r3, [r7, #12]
 80285de:	2200      	movs	r2, #0
 80285e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80285e2:	68fb      	ldr	r3, [r7, #12]
 80285e4:	689b      	ldr	r3, [r3, #8]
 80285e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80285ea:	d10f      	bne.n	802860c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80285ec:	68fb      	ldr	r3, [r7, #12]
 80285ee:	681b      	ldr	r3, [r3, #0]
 80285f0:	681a      	ldr	r2, [r3, #0]
 80285f2:	68fb      	ldr	r3, [r7, #12]
 80285f4:	681b      	ldr	r3, [r3, #0]
 80285f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80285fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80285fc:	68fb      	ldr	r3, [r7, #12]
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	681a      	ldr	r2, [r3, #0]
 8028602:	68fb      	ldr	r3, [r7, #12]
 8028604:	681b      	ldr	r3, [r3, #0]
 8028606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802860a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802860c:	68fb      	ldr	r3, [r7, #12]
 802860e:	681b      	ldr	r3, [r3, #0]
 8028610:	681b      	ldr	r3, [r3, #0]
 8028612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028616:	2b40      	cmp	r3, #64	; 0x40
 8028618:	d007      	beq.n	802862a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802861a:	68fb      	ldr	r3, [r7, #12]
 802861c:	681b      	ldr	r3, [r3, #0]
 802861e:	681a      	ldr	r2, [r3, #0]
 8028620:	68fb      	ldr	r3, [r7, #12]
 8028622:	681b      	ldr	r3, [r3, #0]
 8028624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028628:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802862a:	68fb      	ldr	r3, [r7, #12]
 802862c:	68db      	ldr	r3, [r3, #12]
 802862e:	2b00      	cmp	r3, #0
 8028630:	d162      	bne.n	80286f8 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028632:	e02e      	b.n	8028692 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028634:	68fb      	ldr	r3, [r7, #12]
 8028636:	681b      	ldr	r3, [r3, #0]
 8028638:	689b      	ldr	r3, [r3, #8]
 802863a:	f003 0301 	and.w	r3, r3, #1
 802863e:	2b01      	cmp	r3, #1
 8028640:	d115      	bne.n	802866e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028642:	68fb      	ldr	r3, [r7, #12]
 8028644:	681b      	ldr	r3, [r3, #0]
 8028646:	f103 020c 	add.w	r2, r3, #12
 802864a:	68fb      	ldr	r3, [r7, #12]
 802864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802864e:	7812      	ldrb	r2, [r2, #0]
 8028650:	b2d2      	uxtb	r2, r2
 8028652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028654:	68fb      	ldr	r3, [r7, #12]
 8028656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028658:	1c5a      	adds	r2, r3, #1
 802865a:	68fb      	ldr	r3, [r7, #12]
 802865c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802865e:	68fb      	ldr	r3, [r7, #12]
 8028660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028662:	b29b      	uxth	r3, r3
 8028664:	3b01      	subs	r3, #1
 8028666:	b29a      	uxth	r2, r3
 8028668:	68fb      	ldr	r3, [r7, #12]
 802866a:	87da      	strh	r2, [r3, #62]	; 0x3e
 802866c:	e011      	b.n	8028692 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802866e:	f7fa fffd 	bl	802366c <HAL_GetTick>
 8028672:	4602      	mov	r2, r0
 8028674:	693b      	ldr	r3, [r7, #16]
 8028676:	1ad3      	subs	r3, r2, r3
 8028678:	683a      	ldr	r2, [r7, #0]
 802867a:	429a      	cmp	r2, r3
 802867c:	d803      	bhi.n	8028686 <HAL_SPI_Receive+0x166>
 802867e:	683b      	ldr	r3, [r7, #0]
 8028680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028684:	d102      	bne.n	802868c <HAL_SPI_Receive+0x16c>
 8028686:	683b      	ldr	r3, [r7, #0]
 8028688:	2b00      	cmp	r3, #0
 802868a:	d102      	bne.n	8028692 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 802868c:	2303      	movs	r3, #3
 802868e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028690:	e04a      	b.n	8028728 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8028692:	68fb      	ldr	r3, [r7, #12]
 8028694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028696:	b29b      	uxth	r3, r3
 8028698:	2b00      	cmp	r3, #0
 802869a:	d1cb      	bne.n	8028634 <HAL_SPI_Receive+0x114>
 802869c:	e031      	b.n	8028702 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802869e:	68fb      	ldr	r3, [r7, #12]
 80286a0:	681b      	ldr	r3, [r3, #0]
 80286a2:	689b      	ldr	r3, [r3, #8]
 80286a4:	f003 0301 	and.w	r3, r3, #1
 80286a8:	2b01      	cmp	r3, #1
 80286aa:	d113      	bne.n	80286d4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80286ac:	68fb      	ldr	r3, [r7, #12]
 80286ae:	681b      	ldr	r3, [r3, #0]
 80286b0:	68da      	ldr	r2, [r3, #12]
 80286b2:	68fb      	ldr	r3, [r7, #12]
 80286b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286b6:	b292      	uxth	r2, r2
 80286b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80286ba:	68fb      	ldr	r3, [r7, #12]
 80286bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286be:	1c9a      	adds	r2, r3, #2
 80286c0:	68fb      	ldr	r3, [r7, #12]
 80286c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80286c4:	68fb      	ldr	r3, [r7, #12]
 80286c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80286c8:	b29b      	uxth	r3, r3
 80286ca:	3b01      	subs	r3, #1
 80286cc:	b29a      	uxth	r2, r3
 80286ce:	68fb      	ldr	r3, [r7, #12]
 80286d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80286d2:	e011      	b.n	80286f8 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80286d4:	f7fa ffca 	bl	802366c <HAL_GetTick>
 80286d8:	4602      	mov	r2, r0
 80286da:	693b      	ldr	r3, [r7, #16]
 80286dc:	1ad3      	subs	r3, r2, r3
 80286de:	683a      	ldr	r2, [r7, #0]
 80286e0:	429a      	cmp	r2, r3
 80286e2:	d803      	bhi.n	80286ec <HAL_SPI_Receive+0x1cc>
 80286e4:	683b      	ldr	r3, [r7, #0]
 80286e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80286ea:	d102      	bne.n	80286f2 <HAL_SPI_Receive+0x1d2>
 80286ec:	683b      	ldr	r3, [r7, #0]
 80286ee:	2b00      	cmp	r3, #0
 80286f0:	d102      	bne.n	80286f8 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80286f2:	2303      	movs	r3, #3
 80286f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80286f6:	e017      	b.n	8028728 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80286f8:	68fb      	ldr	r3, [r7, #12]
 80286fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80286fc:	b29b      	uxth	r3, r3
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d1cd      	bne.n	802869e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028702:	693a      	ldr	r2, [r7, #16]
 8028704:	6839      	ldr	r1, [r7, #0]
 8028706:	68f8      	ldr	r0, [r7, #12]
 8028708:	f000 fa54 	bl	8028bb4 <SPI_EndRxTransaction>
 802870c:	4603      	mov	r3, r0
 802870e:	2b00      	cmp	r3, #0
 8028710:	d002      	beq.n	8028718 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028712:	68fb      	ldr	r3, [r7, #12]
 8028714:	2220      	movs	r2, #32
 8028716:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028718:	68fb      	ldr	r3, [r7, #12]
 802871a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802871c:	2b00      	cmp	r3, #0
 802871e:	d002      	beq.n	8028726 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8028720:	2301      	movs	r3, #1
 8028722:	75fb      	strb	r3, [r7, #23]
 8028724:	e000      	b.n	8028728 <HAL_SPI_Receive+0x208>
  }

error :
 8028726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	2201      	movs	r2, #1
 802872c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028730:	68fb      	ldr	r3, [r7, #12]
 8028732:	2200      	movs	r2, #0
 8028734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028738:	7dfb      	ldrb	r3, [r7, #23]
}
 802873a:	4618      	mov	r0, r3
 802873c:	3718      	adds	r7, #24
 802873e:	46bd      	mov	sp, r7
 8028740:	bd80      	pop	{r7, pc}

08028742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028742:	b580      	push	{r7, lr}
 8028744:	b08c      	sub	sp, #48	; 0x30
 8028746:	af00      	add	r7, sp, #0
 8028748:	60f8      	str	r0, [r7, #12]
 802874a:	60b9      	str	r1, [r7, #8]
 802874c:	607a      	str	r2, [r7, #4]
 802874e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028750:	2301      	movs	r3, #1
 8028752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028754:	2300      	movs	r3, #0
 8028756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802875a:	68fb      	ldr	r3, [r7, #12]
 802875c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028760:	2b01      	cmp	r3, #1
 8028762:	d101      	bne.n	8028768 <HAL_SPI_TransmitReceive+0x26>
 8028764:	2302      	movs	r3, #2
 8028766:	e18a      	b.n	8028a7e <HAL_SPI_TransmitReceive+0x33c>
 8028768:	68fb      	ldr	r3, [r7, #12]
 802876a:	2201      	movs	r2, #1
 802876c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028770:	f7fa ff7c 	bl	802366c <HAL_GetTick>
 8028774:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028776:	68fb      	ldr	r3, [r7, #12]
 8028778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802877c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028780:	68fb      	ldr	r3, [r7, #12]
 8028782:	685b      	ldr	r3, [r3, #4]
 8028784:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028786:	887b      	ldrh	r3, [r7, #2]
 8028788:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802878a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802878e:	2b01      	cmp	r3, #1
 8028790:	d00f      	beq.n	80287b2 <HAL_SPI_TransmitReceive+0x70>
 8028792:	69fb      	ldr	r3, [r7, #28]
 8028794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028798:	d107      	bne.n	80287aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802879a:	68fb      	ldr	r3, [r7, #12]
 802879c:	689b      	ldr	r3, [r3, #8]
 802879e:	2b00      	cmp	r3, #0
 80287a0:	d103      	bne.n	80287aa <HAL_SPI_TransmitReceive+0x68>
 80287a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80287a6:	2b04      	cmp	r3, #4
 80287a8:	d003      	beq.n	80287b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80287aa:	2302      	movs	r3, #2
 80287ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80287b0:	e15b      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80287b2:	68bb      	ldr	r3, [r7, #8]
 80287b4:	2b00      	cmp	r3, #0
 80287b6:	d005      	beq.n	80287c4 <HAL_SPI_TransmitReceive+0x82>
 80287b8:	687b      	ldr	r3, [r7, #4]
 80287ba:	2b00      	cmp	r3, #0
 80287bc:	d002      	beq.n	80287c4 <HAL_SPI_TransmitReceive+0x82>
 80287be:	887b      	ldrh	r3, [r7, #2]
 80287c0:	2b00      	cmp	r3, #0
 80287c2:	d103      	bne.n	80287cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80287c4:	2301      	movs	r3, #1
 80287c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80287ca:	e14e      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80287cc:	68fb      	ldr	r3, [r7, #12]
 80287ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80287d2:	b2db      	uxtb	r3, r3
 80287d4:	2b04      	cmp	r3, #4
 80287d6:	d003      	beq.n	80287e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80287d8:	68fb      	ldr	r3, [r7, #12]
 80287da:	2205      	movs	r2, #5
 80287dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80287e0:	68fb      	ldr	r3, [r7, #12]
 80287e2:	2200      	movs	r2, #0
 80287e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80287e6:	68fb      	ldr	r3, [r7, #12]
 80287e8:	687a      	ldr	r2, [r7, #4]
 80287ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80287ec:	68fb      	ldr	r3, [r7, #12]
 80287ee:	887a      	ldrh	r2, [r7, #2]
 80287f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80287f2:	68fb      	ldr	r3, [r7, #12]
 80287f4:	887a      	ldrh	r2, [r7, #2]
 80287f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80287f8:	68fb      	ldr	r3, [r7, #12]
 80287fa:	68ba      	ldr	r2, [r7, #8]
 80287fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	887a      	ldrh	r2, [r7, #2]
 8028802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028804:	68fb      	ldr	r3, [r7, #12]
 8028806:	887a      	ldrh	r2, [r7, #2]
 8028808:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802880a:	68fb      	ldr	r3, [r7, #12]
 802880c:	2200      	movs	r2, #0
 802880e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	2200      	movs	r2, #0
 8028814:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028816:	68fb      	ldr	r3, [r7, #12]
 8028818:	681b      	ldr	r3, [r3, #0]
 802881a:	681b      	ldr	r3, [r3, #0]
 802881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028820:	2b40      	cmp	r3, #64	; 0x40
 8028822:	d007      	beq.n	8028834 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028824:	68fb      	ldr	r3, [r7, #12]
 8028826:	681b      	ldr	r3, [r3, #0]
 8028828:	681a      	ldr	r2, [r3, #0]
 802882a:	68fb      	ldr	r3, [r7, #12]
 802882c:	681b      	ldr	r3, [r3, #0]
 802882e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028834:	68fb      	ldr	r3, [r7, #12]
 8028836:	68db      	ldr	r3, [r3, #12]
 8028838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802883c:	d178      	bne.n	8028930 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802883e:	68fb      	ldr	r3, [r7, #12]
 8028840:	685b      	ldr	r3, [r3, #4]
 8028842:	2b00      	cmp	r3, #0
 8028844:	d002      	beq.n	802884c <HAL_SPI_TransmitReceive+0x10a>
 8028846:	8b7b      	ldrh	r3, [r7, #26]
 8028848:	2b01      	cmp	r3, #1
 802884a:	d166      	bne.n	802891a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802884c:	68fb      	ldr	r3, [r7, #12]
 802884e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028850:	881a      	ldrh	r2, [r3, #0]
 8028852:	68fb      	ldr	r3, [r7, #12]
 8028854:	681b      	ldr	r3, [r3, #0]
 8028856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028858:	68fb      	ldr	r3, [r7, #12]
 802885a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802885c:	1c9a      	adds	r2, r3, #2
 802885e:	68fb      	ldr	r3, [r7, #12]
 8028860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028862:	68fb      	ldr	r3, [r7, #12]
 8028864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028866:	b29b      	uxth	r3, r3
 8028868:	3b01      	subs	r3, #1
 802886a:	b29a      	uxth	r2, r3
 802886c:	68fb      	ldr	r3, [r7, #12]
 802886e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028870:	e053      	b.n	802891a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028872:	68fb      	ldr	r3, [r7, #12]
 8028874:	681b      	ldr	r3, [r3, #0]
 8028876:	689b      	ldr	r3, [r3, #8]
 8028878:	f003 0302 	and.w	r3, r3, #2
 802887c:	2b02      	cmp	r3, #2
 802887e:	d11b      	bne.n	80288b8 <HAL_SPI_TransmitReceive+0x176>
 8028880:	68fb      	ldr	r3, [r7, #12]
 8028882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028884:	b29b      	uxth	r3, r3
 8028886:	2b00      	cmp	r3, #0
 8028888:	d016      	beq.n	80288b8 <HAL_SPI_TransmitReceive+0x176>
 802888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802888c:	2b01      	cmp	r3, #1
 802888e:	d113      	bne.n	80288b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028890:	68fb      	ldr	r3, [r7, #12]
 8028892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028894:	881a      	ldrh	r2, [r3, #0]
 8028896:	68fb      	ldr	r3, [r7, #12]
 8028898:	681b      	ldr	r3, [r3, #0]
 802889a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802889c:	68fb      	ldr	r3, [r7, #12]
 802889e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288a0:	1c9a      	adds	r2, r3, #2
 80288a2:	68fb      	ldr	r3, [r7, #12]
 80288a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80288a6:	68fb      	ldr	r3, [r7, #12]
 80288a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80288aa:	b29b      	uxth	r3, r3
 80288ac:	3b01      	subs	r3, #1
 80288ae:	b29a      	uxth	r2, r3
 80288b0:	68fb      	ldr	r3, [r7, #12]
 80288b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80288b4:	2300      	movs	r3, #0
 80288b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80288b8:	68fb      	ldr	r3, [r7, #12]
 80288ba:	681b      	ldr	r3, [r3, #0]
 80288bc:	689b      	ldr	r3, [r3, #8]
 80288be:	f003 0301 	and.w	r3, r3, #1
 80288c2:	2b01      	cmp	r3, #1
 80288c4:	d119      	bne.n	80288fa <HAL_SPI_TransmitReceive+0x1b8>
 80288c6:	68fb      	ldr	r3, [r7, #12]
 80288c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80288ca:	b29b      	uxth	r3, r3
 80288cc:	2b00      	cmp	r3, #0
 80288ce:	d014      	beq.n	80288fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80288d0:	68fb      	ldr	r3, [r7, #12]
 80288d2:	681b      	ldr	r3, [r3, #0]
 80288d4:	68da      	ldr	r2, [r3, #12]
 80288d6:	68fb      	ldr	r3, [r7, #12]
 80288d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80288da:	b292      	uxth	r2, r2
 80288dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80288de:	68fb      	ldr	r3, [r7, #12]
 80288e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80288e2:	1c9a      	adds	r2, r3, #2
 80288e4:	68fb      	ldr	r3, [r7, #12]
 80288e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80288e8:	68fb      	ldr	r3, [r7, #12]
 80288ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80288ec:	b29b      	uxth	r3, r3
 80288ee:	3b01      	subs	r3, #1
 80288f0:	b29a      	uxth	r2, r3
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80288f6:	2301      	movs	r3, #1
 80288f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80288fa:	f7fa feb7 	bl	802366c <HAL_GetTick>
 80288fe:	4602      	mov	r2, r0
 8028900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028902:	1ad3      	subs	r3, r2, r3
 8028904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028906:	429a      	cmp	r2, r3
 8028908:	d807      	bhi.n	802891a <HAL_SPI_TransmitReceive+0x1d8>
 802890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028910:	d003      	beq.n	802891a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028912:	2303      	movs	r3, #3
 8028914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028918:	e0a7      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802891a:	68fb      	ldr	r3, [r7, #12]
 802891c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802891e:	b29b      	uxth	r3, r3
 8028920:	2b00      	cmp	r3, #0
 8028922:	d1a6      	bne.n	8028872 <HAL_SPI_TransmitReceive+0x130>
 8028924:	68fb      	ldr	r3, [r7, #12]
 8028926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028928:	b29b      	uxth	r3, r3
 802892a:	2b00      	cmp	r3, #0
 802892c:	d1a1      	bne.n	8028872 <HAL_SPI_TransmitReceive+0x130>
 802892e:	e07c      	b.n	8028a2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	685b      	ldr	r3, [r3, #4]
 8028934:	2b00      	cmp	r3, #0
 8028936:	d002      	beq.n	802893e <HAL_SPI_TransmitReceive+0x1fc>
 8028938:	8b7b      	ldrh	r3, [r7, #26]
 802893a:	2b01      	cmp	r3, #1
 802893c:	d16b      	bne.n	8028a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802893e:	68fb      	ldr	r3, [r7, #12]
 8028940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028942:	68fb      	ldr	r3, [r7, #12]
 8028944:	681b      	ldr	r3, [r3, #0]
 8028946:	330c      	adds	r3, #12
 8028948:	7812      	ldrb	r2, [r2, #0]
 802894a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802894c:	68fb      	ldr	r3, [r7, #12]
 802894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028950:	1c5a      	adds	r2, r3, #1
 8028952:	68fb      	ldr	r3, [r7, #12]
 8028954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028956:	68fb      	ldr	r3, [r7, #12]
 8028958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802895a:	b29b      	uxth	r3, r3
 802895c:	3b01      	subs	r3, #1
 802895e:	b29a      	uxth	r2, r3
 8028960:	68fb      	ldr	r3, [r7, #12]
 8028962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028964:	e057      	b.n	8028a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028966:	68fb      	ldr	r3, [r7, #12]
 8028968:	681b      	ldr	r3, [r3, #0]
 802896a:	689b      	ldr	r3, [r3, #8]
 802896c:	f003 0302 	and.w	r3, r3, #2
 8028970:	2b02      	cmp	r3, #2
 8028972:	d11c      	bne.n	80289ae <HAL_SPI_TransmitReceive+0x26c>
 8028974:	68fb      	ldr	r3, [r7, #12]
 8028976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028978:	b29b      	uxth	r3, r3
 802897a:	2b00      	cmp	r3, #0
 802897c:	d017      	beq.n	80289ae <HAL_SPI_TransmitReceive+0x26c>
 802897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028980:	2b01      	cmp	r3, #1
 8028982:	d114      	bne.n	80289ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028984:	68fb      	ldr	r3, [r7, #12]
 8028986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028988:	68fb      	ldr	r3, [r7, #12]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	330c      	adds	r3, #12
 802898e:	7812      	ldrb	r2, [r2, #0]
 8028990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028992:	68fb      	ldr	r3, [r7, #12]
 8028994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028996:	1c5a      	adds	r2, r3, #1
 8028998:	68fb      	ldr	r3, [r7, #12]
 802899a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802899c:	68fb      	ldr	r3, [r7, #12]
 802899e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289a0:	b29b      	uxth	r3, r3
 80289a2:	3b01      	subs	r3, #1
 80289a4:	b29a      	uxth	r2, r3
 80289a6:	68fb      	ldr	r3, [r7, #12]
 80289a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80289aa:	2300      	movs	r3, #0
 80289ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80289ae:	68fb      	ldr	r3, [r7, #12]
 80289b0:	681b      	ldr	r3, [r3, #0]
 80289b2:	689b      	ldr	r3, [r3, #8]
 80289b4:	f003 0301 	and.w	r3, r3, #1
 80289b8:	2b01      	cmp	r3, #1
 80289ba:	d119      	bne.n	80289f0 <HAL_SPI_TransmitReceive+0x2ae>
 80289bc:	68fb      	ldr	r3, [r7, #12]
 80289be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80289c0:	b29b      	uxth	r3, r3
 80289c2:	2b00      	cmp	r3, #0
 80289c4:	d014      	beq.n	80289f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80289c6:	68fb      	ldr	r3, [r7, #12]
 80289c8:	681b      	ldr	r3, [r3, #0]
 80289ca:	68da      	ldr	r2, [r3, #12]
 80289cc:	68fb      	ldr	r3, [r7, #12]
 80289ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289d0:	b2d2      	uxtb	r2, r2
 80289d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80289d4:	68fb      	ldr	r3, [r7, #12]
 80289d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289d8:	1c5a      	adds	r2, r3, #1
 80289da:	68fb      	ldr	r3, [r7, #12]
 80289dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80289de:	68fb      	ldr	r3, [r7, #12]
 80289e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80289e2:	b29b      	uxth	r3, r3
 80289e4:	3b01      	subs	r3, #1
 80289e6:	b29a      	uxth	r2, r3
 80289e8:	68fb      	ldr	r3, [r7, #12]
 80289ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80289ec:	2301      	movs	r3, #1
 80289ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80289f0:	f7fa fe3c 	bl	802366c <HAL_GetTick>
 80289f4:	4602      	mov	r2, r0
 80289f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80289f8:	1ad3      	subs	r3, r2, r3
 80289fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80289fc:	429a      	cmp	r2, r3
 80289fe:	d803      	bhi.n	8028a08 <HAL_SPI_TransmitReceive+0x2c6>
 8028a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a06:	d102      	bne.n	8028a0e <HAL_SPI_TransmitReceive+0x2cc>
 8028a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a0a:	2b00      	cmp	r3, #0
 8028a0c:	d103      	bne.n	8028a16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028a0e:	2303      	movs	r3, #3
 8028a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028a14:	e029      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028a16:	68fb      	ldr	r3, [r7, #12]
 8028a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a1a:	b29b      	uxth	r3, r3
 8028a1c:	2b00      	cmp	r3, #0
 8028a1e:	d1a2      	bne.n	8028966 <HAL_SPI_TransmitReceive+0x224>
 8028a20:	68fb      	ldr	r3, [r7, #12]
 8028a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a24:	b29b      	uxth	r3, r3
 8028a26:	2b00      	cmp	r3, #0
 8028a28:	d19d      	bne.n	8028966 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028a2e:	68f8      	ldr	r0, [r7, #12]
 8028a30:	f000 f926 	bl	8028c80 <SPI_EndRxTxTransaction>
 8028a34:	4603      	mov	r3, r0
 8028a36:	2b00      	cmp	r3, #0
 8028a38:	d006      	beq.n	8028a48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028a3a:	2301      	movs	r3, #1
 8028a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028a40:	68fb      	ldr	r3, [r7, #12]
 8028a42:	2220      	movs	r2, #32
 8028a44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028a46:	e010      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	689b      	ldr	r3, [r3, #8]
 8028a4c:	2b00      	cmp	r3, #0
 8028a4e:	d10b      	bne.n	8028a68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028a50:	2300      	movs	r3, #0
 8028a52:	617b      	str	r3, [r7, #20]
 8028a54:	68fb      	ldr	r3, [r7, #12]
 8028a56:	681b      	ldr	r3, [r3, #0]
 8028a58:	68db      	ldr	r3, [r3, #12]
 8028a5a:	617b      	str	r3, [r7, #20]
 8028a5c:	68fb      	ldr	r3, [r7, #12]
 8028a5e:	681b      	ldr	r3, [r3, #0]
 8028a60:	689b      	ldr	r3, [r3, #8]
 8028a62:	617b      	str	r3, [r7, #20]
 8028a64:	697b      	ldr	r3, [r7, #20]
 8028a66:	e000      	b.n	8028a6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028a6a:	68fb      	ldr	r3, [r7, #12]
 8028a6c:	2201      	movs	r2, #1
 8028a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028a72:	68fb      	ldr	r3, [r7, #12]
 8028a74:	2200      	movs	r2, #0
 8028a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028a7e:	4618      	mov	r0, r3
 8028a80:	3730      	adds	r7, #48	; 0x30
 8028a82:	46bd      	mov	sp, r7
 8028a84:	bd80      	pop	{r7, pc}

08028a86 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8028a86:	b480      	push	{r7}
 8028a88:	b083      	sub	sp, #12
 8028a8a:	af00      	add	r7, sp, #0
 8028a8c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028a8e:	687b      	ldr	r3, [r7, #4]
 8028a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028a94:	b2db      	uxtb	r3, r3
}
 8028a96:	4618      	mov	r0, r3
 8028a98:	370c      	adds	r7, #12
 8028a9a:	46bd      	mov	sp, r7
 8028a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028aa0:	4770      	bx	lr
	...

08028aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028aa4:	b580      	push	{r7, lr}
 8028aa6:	b088      	sub	sp, #32
 8028aa8:	af00      	add	r7, sp, #0
 8028aaa:	60f8      	str	r0, [r7, #12]
 8028aac:	60b9      	str	r1, [r7, #8]
 8028aae:	603b      	str	r3, [r7, #0]
 8028ab0:	4613      	mov	r3, r2
 8028ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028ab4:	f7fa fdda 	bl	802366c <HAL_GetTick>
 8028ab8:	4602      	mov	r2, r0
 8028aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028abc:	1a9b      	subs	r3, r3, r2
 8028abe:	683a      	ldr	r2, [r7, #0]
 8028ac0:	4413      	add	r3, r2
 8028ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028ac4:	f7fa fdd2 	bl	802366c <HAL_GetTick>
 8028ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028aca:	4b39      	ldr	r3, [pc, #228]	; (8028bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028acc:	681b      	ldr	r3, [r3, #0]
 8028ace:	015b      	lsls	r3, r3, #5
 8028ad0:	0d1b      	lsrs	r3, r3, #20
 8028ad2:	69fa      	ldr	r2, [r7, #28]
 8028ad4:	fb02 f303 	mul.w	r3, r2, r3
 8028ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028ada:	e054      	b.n	8028b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028adc:	683b      	ldr	r3, [r7, #0]
 8028ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028ae2:	d050      	beq.n	8028b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028ae4:	f7fa fdc2 	bl	802366c <HAL_GetTick>
 8028ae8:	4602      	mov	r2, r0
 8028aea:	69bb      	ldr	r3, [r7, #24]
 8028aec:	1ad3      	subs	r3, r2, r3
 8028aee:	69fa      	ldr	r2, [r7, #28]
 8028af0:	429a      	cmp	r2, r3
 8028af2:	d902      	bls.n	8028afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8028af4:	69fb      	ldr	r3, [r7, #28]
 8028af6:	2b00      	cmp	r3, #0
 8028af8:	d13d      	bne.n	8028b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	681b      	ldr	r3, [r3, #0]
 8028afe:	685a      	ldr	r2, [r3, #4]
 8028b00:	68fb      	ldr	r3, [r7, #12]
 8028b02:	681b      	ldr	r3, [r3, #0]
 8028b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028b0a:	68fb      	ldr	r3, [r7, #12]
 8028b0c:	685b      	ldr	r3, [r3, #4]
 8028b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028b12:	d111      	bne.n	8028b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8028b14:	68fb      	ldr	r3, [r7, #12]
 8028b16:	689b      	ldr	r3, [r3, #8]
 8028b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028b1c:	d004      	beq.n	8028b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028b1e:	68fb      	ldr	r3, [r7, #12]
 8028b20:	689b      	ldr	r3, [r3, #8]
 8028b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028b26:	d107      	bne.n	8028b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028b28:	68fb      	ldr	r3, [r7, #12]
 8028b2a:	681b      	ldr	r3, [r3, #0]
 8028b2c:	681a      	ldr	r2, [r3, #0]
 8028b2e:	68fb      	ldr	r3, [r7, #12]
 8028b30:	681b      	ldr	r3, [r3, #0]
 8028b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028b38:	68fb      	ldr	r3, [r7, #12]
 8028b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028b40:	d10f      	bne.n	8028b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028b42:	68fb      	ldr	r3, [r7, #12]
 8028b44:	681b      	ldr	r3, [r3, #0]
 8028b46:	681a      	ldr	r2, [r3, #0]
 8028b48:	68fb      	ldr	r3, [r7, #12]
 8028b4a:	681b      	ldr	r3, [r3, #0]
 8028b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028b50:	601a      	str	r2, [r3, #0]
 8028b52:	68fb      	ldr	r3, [r7, #12]
 8028b54:	681b      	ldr	r3, [r3, #0]
 8028b56:	681a      	ldr	r2, [r3, #0]
 8028b58:	68fb      	ldr	r3, [r7, #12]
 8028b5a:	681b      	ldr	r3, [r3, #0]
 8028b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028b62:	68fb      	ldr	r3, [r7, #12]
 8028b64:	2201      	movs	r2, #1
 8028b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028b6a:	68fb      	ldr	r3, [r7, #12]
 8028b6c:	2200      	movs	r2, #0
 8028b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028b72:	2303      	movs	r3, #3
 8028b74:	e017      	b.n	8028ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028b76:	697b      	ldr	r3, [r7, #20]
 8028b78:	2b00      	cmp	r3, #0
 8028b7a:	d101      	bne.n	8028b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028b7c:	2300      	movs	r3, #0
 8028b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028b80:	697b      	ldr	r3, [r7, #20]
 8028b82:	3b01      	subs	r3, #1
 8028b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028b86:	68fb      	ldr	r3, [r7, #12]
 8028b88:	681b      	ldr	r3, [r3, #0]
 8028b8a:	689a      	ldr	r2, [r3, #8]
 8028b8c:	68bb      	ldr	r3, [r7, #8]
 8028b8e:	4013      	ands	r3, r2
 8028b90:	68ba      	ldr	r2, [r7, #8]
 8028b92:	429a      	cmp	r2, r3
 8028b94:	bf0c      	ite	eq
 8028b96:	2301      	moveq	r3, #1
 8028b98:	2300      	movne	r3, #0
 8028b9a:	b2db      	uxtb	r3, r3
 8028b9c:	461a      	mov	r2, r3
 8028b9e:	79fb      	ldrb	r3, [r7, #7]
 8028ba0:	429a      	cmp	r2, r3
 8028ba2:	d19b      	bne.n	8028adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028ba4:	2300      	movs	r3, #0
}
 8028ba6:	4618      	mov	r0, r3
 8028ba8:	3720      	adds	r7, #32
 8028baa:	46bd      	mov	sp, r7
 8028bac:	bd80      	pop	{r7, pc}
 8028bae:	bf00      	nop
 8028bb0:	20000004 	.word	0x20000004

08028bb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028bb4:	b580      	push	{r7, lr}
 8028bb6:	b086      	sub	sp, #24
 8028bb8:	af02      	add	r7, sp, #8
 8028bba:	60f8      	str	r0, [r7, #12]
 8028bbc:	60b9      	str	r1, [r7, #8]
 8028bbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028bc0:	68fb      	ldr	r3, [r7, #12]
 8028bc2:	685b      	ldr	r3, [r3, #4]
 8028bc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028bc8:	d111      	bne.n	8028bee <SPI_EndRxTransaction+0x3a>
 8028bca:	68fb      	ldr	r3, [r7, #12]
 8028bcc:	689b      	ldr	r3, [r3, #8]
 8028bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028bd2:	d004      	beq.n	8028bde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028bd4:	68fb      	ldr	r3, [r7, #12]
 8028bd6:	689b      	ldr	r3, [r3, #8]
 8028bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028bdc:	d107      	bne.n	8028bee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028bde:	68fb      	ldr	r3, [r7, #12]
 8028be0:	681b      	ldr	r3, [r3, #0]
 8028be2:	681a      	ldr	r2, [r3, #0]
 8028be4:	68fb      	ldr	r3, [r7, #12]
 8028be6:	681b      	ldr	r3, [r3, #0]
 8028be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028bec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028bee:	68fb      	ldr	r3, [r7, #12]
 8028bf0:	685b      	ldr	r3, [r3, #4]
 8028bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028bf6:	d12a      	bne.n	8028c4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028bf8:	68fb      	ldr	r3, [r7, #12]
 8028bfa:	689b      	ldr	r3, [r3, #8]
 8028bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028c00:	d012      	beq.n	8028c28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028c02:	687b      	ldr	r3, [r7, #4]
 8028c04:	9300      	str	r3, [sp, #0]
 8028c06:	68bb      	ldr	r3, [r7, #8]
 8028c08:	2200      	movs	r2, #0
 8028c0a:	2180      	movs	r1, #128	; 0x80
 8028c0c:	68f8      	ldr	r0, [r7, #12]
 8028c0e:	f7ff ff49 	bl	8028aa4 <SPI_WaitFlagStateUntilTimeout>
 8028c12:	4603      	mov	r3, r0
 8028c14:	2b00      	cmp	r3, #0
 8028c16:	d02d      	beq.n	8028c74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028c18:	68fb      	ldr	r3, [r7, #12]
 8028c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c1c:	f043 0220 	orr.w	r2, r3, #32
 8028c20:	68fb      	ldr	r3, [r7, #12]
 8028c22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028c24:	2303      	movs	r3, #3
 8028c26:	e026      	b.n	8028c76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028c28:	687b      	ldr	r3, [r7, #4]
 8028c2a:	9300      	str	r3, [sp, #0]
 8028c2c:	68bb      	ldr	r3, [r7, #8]
 8028c2e:	2200      	movs	r2, #0
 8028c30:	2101      	movs	r1, #1
 8028c32:	68f8      	ldr	r0, [r7, #12]
 8028c34:	f7ff ff36 	bl	8028aa4 <SPI_WaitFlagStateUntilTimeout>
 8028c38:	4603      	mov	r3, r0
 8028c3a:	2b00      	cmp	r3, #0
 8028c3c:	d01a      	beq.n	8028c74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028c3e:	68fb      	ldr	r3, [r7, #12]
 8028c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c42:	f043 0220 	orr.w	r2, r3, #32
 8028c46:	68fb      	ldr	r3, [r7, #12]
 8028c48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028c4a:	2303      	movs	r3, #3
 8028c4c:	e013      	b.n	8028c76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028c4e:	687b      	ldr	r3, [r7, #4]
 8028c50:	9300      	str	r3, [sp, #0]
 8028c52:	68bb      	ldr	r3, [r7, #8]
 8028c54:	2200      	movs	r2, #0
 8028c56:	2101      	movs	r1, #1
 8028c58:	68f8      	ldr	r0, [r7, #12]
 8028c5a:	f7ff ff23 	bl	8028aa4 <SPI_WaitFlagStateUntilTimeout>
 8028c5e:	4603      	mov	r3, r0
 8028c60:	2b00      	cmp	r3, #0
 8028c62:	d007      	beq.n	8028c74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c68:	f043 0220 	orr.w	r2, r3, #32
 8028c6c:	68fb      	ldr	r3, [r7, #12]
 8028c6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028c70:	2303      	movs	r3, #3
 8028c72:	e000      	b.n	8028c76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028c74:	2300      	movs	r3, #0
}
 8028c76:	4618      	mov	r0, r3
 8028c78:	3710      	adds	r7, #16
 8028c7a:	46bd      	mov	sp, r7
 8028c7c:	bd80      	pop	{r7, pc}
	...

08028c80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028c80:	b580      	push	{r7, lr}
 8028c82:	b088      	sub	sp, #32
 8028c84:	af02      	add	r7, sp, #8
 8028c86:	60f8      	str	r0, [r7, #12]
 8028c88:	60b9      	str	r1, [r7, #8]
 8028c8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028c8c:	4b1b      	ldr	r3, [pc, #108]	; (8028cfc <SPI_EndRxTxTransaction+0x7c>)
 8028c8e:	681b      	ldr	r3, [r3, #0]
 8028c90:	4a1b      	ldr	r2, [pc, #108]	; (8028d00 <SPI_EndRxTxTransaction+0x80>)
 8028c92:	fba2 2303 	umull	r2, r3, r2, r3
 8028c96:	0d5b      	lsrs	r3, r3, #21
 8028c98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028c9c:	fb02 f303 	mul.w	r3, r2, r3
 8028ca0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028ca2:	68fb      	ldr	r3, [r7, #12]
 8028ca4:	685b      	ldr	r3, [r3, #4]
 8028ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028caa:	d112      	bne.n	8028cd2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028cac:	687b      	ldr	r3, [r7, #4]
 8028cae:	9300      	str	r3, [sp, #0]
 8028cb0:	68bb      	ldr	r3, [r7, #8]
 8028cb2:	2200      	movs	r2, #0
 8028cb4:	2180      	movs	r1, #128	; 0x80
 8028cb6:	68f8      	ldr	r0, [r7, #12]
 8028cb8:	f7ff fef4 	bl	8028aa4 <SPI_WaitFlagStateUntilTimeout>
 8028cbc:	4603      	mov	r3, r0
 8028cbe:	2b00      	cmp	r3, #0
 8028cc0:	d016      	beq.n	8028cf0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cc2:	68fb      	ldr	r3, [r7, #12]
 8028cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028cc6:	f043 0220 	orr.w	r2, r3, #32
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028cce:	2303      	movs	r3, #3
 8028cd0:	e00f      	b.n	8028cf2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028cd2:	697b      	ldr	r3, [r7, #20]
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	d00a      	beq.n	8028cee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028cd8:	697b      	ldr	r3, [r7, #20]
 8028cda:	3b01      	subs	r3, #1
 8028cdc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028cde:	68fb      	ldr	r3, [r7, #12]
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	689b      	ldr	r3, [r3, #8]
 8028ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028ce8:	2b80      	cmp	r3, #128	; 0x80
 8028cea:	d0f2      	beq.n	8028cd2 <SPI_EndRxTxTransaction+0x52>
 8028cec:	e000      	b.n	8028cf0 <SPI_EndRxTxTransaction+0x70>
        break;
 8028cee:	bf00      	nop
  }

  return HAL_OK;
 8028cf0:	2300      	movs	r3, #0
}
 8028cf2:	4618      	mov	r0, r3
 8028cf4:	3718      	adds	r7, #24
 8028cf6:	46bd      	mov	sp, r7
 8028cf8:	bd80      	pop	{r7, pc}
 8028cfa:	bf00      	nop
 8028cfc:	20000004 	.word	0x20000004
 8028d00:	165e9f81 	.word	0x165e9f81

08028d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028d04:	b580      	push	{r7, lr}
 8028d06:	b082      	sub	sp, #8
 8028d08:	af00      	add	r7, sp, #0
 8028d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028d0c:	687b      	ldr	r3, [r7, #4]
 8028d0e:	2b00      	cmp	r3, #0
 8028d10:	d101      	bne.n	8028d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028d12:	2301      	movs	r3, #1
 8028d14:	e041      	b.n	8028d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028d16:	687b      	ldr	r3, [r7, #4]
 8028d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028d1c:	b2db      	uxtb	r3, r3
 8028d1e:	2b00      	cmp	r3, #0
 8028d20:	d106      	bne.n	8028d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028d22:	687b      	ldr	r3, [r7, #4]
 8028d24:	2200      	movs	r2, #0
 8028d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028d2a:	6878      	ldr	r0, [r7, #4]
 8028d2c:	f7f8 ff5c 	bl	8021be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028d30:	687b      	ldr	r3, [r7, #4]
 8028d32:	2202      	movs	r2, #2
 8028d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028d38:	687b      	ldr	r3, [r7, #4]
 8028d3a:	681a      	ldr	r2, [r3, #0]
 8028d3c:	687b      	ldr	r3, [r7, #4]
 8028d3e:	3304      	adds	r3, #4
 8028d40:	4619      	mov	r1, r3
 8028d42:	4610      	mov	r0, r2
 8028d44:	f000 fa96 	bl	8029274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028d48:	687b      	ldr	r3, [r7, #4]
 8028d4a:	2201      	movs	r2, #1
 8028d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028d50:	687b      	ldr	r3, [r7, #4]
 8028d52:	2201      	movs	r2, #1
 8028d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028d58:	687b      	ldr	r3, [r7, #4]
 8028d5a:	2201      	movs	r2, #1
 8028d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028d60:	687b      	ldr	r3, [r7, #4]
 8028d62:	2201      	movs	r2, #1
 8028d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028d68:	687b      	ldr	r3, [r7, #4]
 8028d6a:	2201      	movs	r2, #1
 8028d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028d70:	687b      	ldr	r3, [r7, #4]
 8028d72:	2201      	movs	r2, #1
 8028d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028d78:	687b      	ldr	r3, [r7, #4]
 8028d7a:	2201      	movs	r2, #1
 8028d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028d80:	687b      	ldr	r3, [r7, #4]
 8028d82:	2201      	movs	r2, #1
 8028d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028d88:	687b      	ldr	r3, [r7, #4]
 8028d8a:	2201      	movs	r2, #1
 8028d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028d90:	687b      	ldr	r3, [r7, #4]
 8028d92:	2201      	movs	r2, #1
 8028d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028d98:	2300      	movs	r3, #0
}
 8028d9a:	4618      	mov	r0, r3
 8028d9c:	3708      	adds	r7, #8
 8028d9e:	46bd      	mov	sp, r7
 8028da0:	bd80      	pop	{r7, pc}
	...

08028da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028da4:	b480      	push	{r7}
 8028da6:	b085      	sub	sp, #20
 8028da8:	af00      	add	r7, sp, #0
 8028daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028dac:	687b      	ldr	r3, [r7, #4]
 8028dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028db2:	b2db      	uxtb	r3, r3
 8028db4:	2b01      	cmp	r3, #1
 8028db6:	d001      	beq.n	8028dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028db8:	2301      	movs	r3, #1
 8028dba:	e04e      	b.n	8028e5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028dbc:	687b      	ldr	r3, [r7, #4]
 8028dbe:	2202      	movs	r2, #2
 8028dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	681b      	ldr	r3, [r3, #0]
 8028dc8:	68da      	ldr	r2, [r3, #12]
 8028dca:	687b      	ldr	r3, [r7, #4]
 8028dcc:	681b      	ldr	r3, [r3, #0]
 8028dce:	f042 0201 	orr.w	r2, r2, #1
 8028dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028dd4:	687b      	ldr	r3, [r7, #4]
 8028dd6:	681b      	ldr	r3, [r3, #0]
 8028dd8:	4a23      	ldr	r2, [pc, #140]	; (8028e68 <HAL_TIM_Base_Start_IT+0xc4>)
 8028dda:	4293      	cmp	r3, r2
 8028ddc:	d022      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028dde:	687b      	ldr	r3, [r7, #4]
 8028de0:	681b      	ldr	r3, [r3, #0]
 8028de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028de6:	d01d      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028de8:	687b      	ldr	r3, [r7, #4]
 8028dea:	681b      	ldr	r3, [r3, #0]
 8028dec:	4a1f      	ldr	r2, [pc, #124]	; (8028e6c <HAL_TIM_Base_Start_IT+0xc8>)
 8028dee:	4293      	cmp	r3, r2
 8028df0:	d018      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028df2:	687b      	ldr	r3, [r7, #4]
 8028df4:	681b      	ldr	r3, [r3, #0]
 8028df6:	4a1e      	ldr	r2, [pc, #120]	; (8028e70 <HAL_TIM_Base_Start_IT+0xcc>)
 8028df8:	4293      	cmp	r3, r2
 8028dfa:	d013      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	681b      	ldr	r3, [r3, #0]
 8028e00:	4a1c      	ldr	r2, [pc, #112]	; (8028e74 <HAL_TIM_Base_Start_IT+0xd0>)
 8028e02:	4293      	cmp	r3, r2
 8028e04:	d00e      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028e06:	687b      	ldr	r3, [r7, #4]
 8028e08:	681b      	ldr	r3, [r3, #0]
 8028e0a:	4a1b      	ldr	r2, [pc, #108]	; (8028e78 <HAL_TIM_Base_Start_IT+0xd4>)
 8028e0c:	4293      	cmp	r3, r2
 8028e0e:	d009      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	681b      	ldr	r3, [r3, #0]
 8028e14:	4a19      	ldr	r2, [pc, #100]	; (8028e7c <HAL_TIM_Base_Start_IT+0xd8>)
 8028e16:	4293      	cmp	r3, r2
 8028e18:	d004      	beq.n	8028e24 <HAL_TIM_Base_Start_IT+0x80>
 8028e1a:	687b      	ldr	r3, [r7, #4]
 8028e1c:	681b      	ldr	r3, [r3, #0]
 8028e1e:	4a18      	ldr	r2, [pc, #96]	; (8028e80 <HAL_TIM_Base_Start_IT+0xdc>)
 8028e20:	4293      	cmp	r3, r2
 8028e22:	d111      	bne.n	8028e48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	681b      	ldr	r3, [r3, #0]
 8028e28:	689b      	ldr	r3, [r3, #8]
 8028e2a:	f003 0307 	and.w	r3, r3, #7
 8028e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028e30:	68fb      	ldr	r3, [r7, #12]
 8028e32:	2b06      	cmp	r3, #6
 8028e34:	d010      	beq.n	8028e58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028e36:	687b      	ldr	r3, [r7, #4]
 8028e38:	681b      	ldr	r3, [r3, #0]
 8028e3a:	681a      	ldr	r2, [r3, #0]
 8028e3c:	687b      	ldr	r3, [r7, #4]
 8028e3e:	681b      	ldr	r3, [r3, #0]
 8028e40:	f042 0201 	orr.w	r2, r2, #1
 8028e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028e46:	e007      	b.n	8028e58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028e48:	687b      	ldr	r3, [r7, #4]
 8028e4a:	681b      	ldr	r3, [r3, #0]
 8028e4c:	681a      	ldr	r2, [r3, #0]
 8028e4e:	687b      	ldr	r3, [r7, #4]
 8028e50:	681b      	ldr	r3, [r3, #0]
 8028e52:	f042 0201 	orr.w	r2, r2, #1
 8028e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028e58:	2300      	movs	r3, #0
}
 8028e5a:	4618      	mov	r0, r3
 8028e5c:	3714      	adds	r7, #20
 8028e5e:	46bd      	mov	sp, r7
 8028e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028e64:	4770      	bx	lr
 8028e66:	bf00      	nop
 8028e68:	40010000 	.word	0x40010000
 8028e6c:	40000400 	.word	0x40000400
 8028e70:	40000800 	.word	0x40000800
 8028e74:	40000c00 	.word	0x40000c00
 8028e78:	40010400 	.word	0x40010400
 8028e7c:	40014000 	.word	0x40014000
 8028e80:	40001800 	.word	0x40001800

08028e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028e84:	b580      	push	{r7, lr}
 8028e86:	b082      	sub	sp, #8
 8028e88:	af00      	add	r7, sp, #0
 8028e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028e8c:	687b      	ldr	r3, [r7, #4]
 8028e8e:	681b      	ldr	r3, [r3, #0]
 8028e90:	691b      	ldr	r3, [r3, #16]
 8028e92:	f003 0302 	and.w	r3, r3, #2
 8028e96:	2b02      	cmp	r3, #2
 8028e98:	d122      	bne.n	8028ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	68db      	ldr	r3, [r3, #12]
 8028ea0:	f003 0302 	and.w	r3, r3, #2
 8028ea4:	2b02      	cmp	r3, #2
 8028ea6:	d11b      	bne.n	8028ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	681b      	ldr	r3, [r3, #0]
 8028eac:	f06f 0202 	mvn.w	r2, #2
 8028eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028eb2:	687b      	ldr	r3, [r7, #4]
 8028eb4:	2201      	movs	r2, #1
 8028eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028eb8:	687b      	ldr	r3, [r7, #4]
 8028eba:	681b      	ldr	r3, [r3, #0]
 8028ebc:	699b      	ldr	r3, [r3, #24]
 8028ebe:	f003 0303 	and.w	r3, r3, #3
 8028ec2:	2b00      	cmp	r3, #0
 8028ec4:	d003      	beq.n	8028ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028ec6:	6878      	ldr	r0, [r7, #4]
 8028ec8:	f000 f9b5 	bl	8029236 <HAL_TIM_IC_CaptureCallback>
 8028ecc:	e005      	b.n	8028eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028ece:	6878      	ldr	r0, [r7, #4]
 8028ed0:	f000 f9a7 	bl	8029222 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028ed4:	6878      	ldr	r0, [r7, #4]
 8028ed6:	f000 f9b8 	bl	802924a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028eda:	687b      	ldr	r3, [r7, #4]
 8028edc:	2200      	movs	r2, #0
 8028ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028ee0:	687b      	ldr	r3, [r7, #4]
 8028ee2:	681b      	ldr	r3, [r3, #0]
 8028ee4:	691b      	ldr	r3, [r3, #16]
 8028ee6:	f003 0304 	and.w	r3, r3, #4
 8028eea:	2b04      	cmp	r3, #4
 8028eec:	d122      	bne.n	8028f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028eee:	687b      	ldr	r3, [r7, #4]
 8028ef0:	681b      	ldr	r3, [r3, #0]
 8028ef2:	68db      	ldr	r3, [r3, #12]
 8028ef4:	f003 0304 	and.w	r3, r3, #4
 8028ef8:	2b04      	cmp	r3, #4
 8028efa:	d11b      	bne.n	8028f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028efc:	687b      	ldr	r3, [r7, #4]
 8028efe:	681b      	ldr	r3, [r3, #0]
 8028f00:	f06f 0204 	mvn.w	r2, #4
 8028f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028f06:	687b      	ldr	r3, [r7, #4]
 8028f08:	2202      	movs	r2, #2
 8028f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	681b      	ldr	r3, [r3, #0]
 8028f10:	699b      	ldr	r3, [r3, #24]
 8028f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028f16:	2b00      	cmp	r3, #0
 8028f18:	d003      	beq.n	8028f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028f1a:	6878      	ldr	r0, [r7, #4]
 8028f1c:	f000 f98b 	bl	8029236 <HAL_TIM_IC_CaptureCallback>
 8028f20:	e005      	b.n	8028f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028f22:	6878      	ldr	r0, [r7, #4]
 8028f24:	f000 f97d 	bl	8029222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028f28:	6878      	ldr	r0, [r7, #4]
 8028f2a:	f000 f98e 	bl	802924a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	2200      	movs	r2, #0
 8028f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028f34:	687b      	ldr	r3, [r7, #4]
 8028f36:	681b      	ldr	r3, [r3, #0]
 8028f38:	691b      	ldr	r3, [r3, #16]
 8028f3a:	f003 0308 	and.w	r3, r3, #8
 8028f3e:	2b08      	cmp	r3, #8
 8028f40:	d122      	bne.n	8028f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028f42:	687b      	ldr	r3, [r7, #4]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	68db      	ldr	r3, [r3, #12]
 8028f48:	f003 0308 	and.w	r3, r3, #8
 8028f4c:	2b08      	cmp	r3, #8
 8028f4e:	d11b      	bne.n	8028f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028f50:	687b      	ldr	r3, [r7, #4]
 8028f52:	681b      	ldr	r3, [r3, #0]
 8028f54:	f06f 0208 	mvn.w	r2, #8
 8028f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028f5a:	687b      	ldr	r3, [r7, #4]
 8028f5c:	2204      	movs	r2, #4
 8028f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	681b      	ldr	r3, [r3, #0]
 8028f64:	69db      	ldr	r3, [r3, #28]
 8028f66:	f003 0303 	and.w	r3, r3, #3
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	d003      	beq.n	8028f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028f6e:	6878      	ldr	r0, [r7, #4]
 8028f70:	f000 f961 	bl	8029236 <HAL_TIM_IC_CaptureCallback>
 8028f74:	e005      	b.n	8028f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028f76:	6878      	ldr	r0, [r7, #4]
 8028f78:	f000 f953 	bl	8029222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028f7c:	6878      	ldr	r0, [r7, #4]
 8028f7e:	f000 f964 	bl	802924a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	2200      	movs	r2, #0
 8028f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8028f88:	687b      	ldr	r3, [r7, #4]
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	691b      	ldr	r3, [r3, #16]
 8028f8e:	f003 0310 	and.w	r3, r3, #16
 8028f92:	2b10      	cmp	r3, #16
 8028f94:	d122      	bne.n	8028fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	68db      	ldr	r3, [r3, #12]
 8028f9c:	f003 0310 	and.w	r3, r3, #16
 8028fa0:	2b10      	cmp	r3, #16
 8028fa2:	d11b      	bne.n	8028fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8028fa4:	687b      	ldr	r3, [r7, #4]
 8028fa6:	681b      	ldr	r3, [r3, #0]
 8028fa8:	f06f 0210 	mvn.w	r2, #16
 8028fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	2208      	movs	r2, #8
 8028fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8028fb4:	687b      	ldr	r3, [r7, #4]
 8028fb6:	681b      	ldr	r3, [r3, #0]
 8028fb8:	69db      	ldr	r3, [r3, #28]
 8028fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028fbe:	2b00      	cmp	r3, #0
 8028fc0:	d003      	beq.n	8028fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028fc2:	6878      	ldr	r0, [r7, #4]
 8028fc4:	f000 f937 	bl	8029236 <HAL_TIM_IC_CaptureCallback>
 8028fc8:	e005      	b.n	8028fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028fca:	6878      	ldr	r0, [r7, #4]
 8028fcc:	f000 f929 	bl	8029222 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028fd0:	6878      	ldr	r0, [r7, #4]
 8028fd2:	f000 f93a 	bl	802924a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028fd6:	687b      	ldr	r3, [r7, #4]
 8028fd8:	2200      	movs	r2, #0
 8028fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8028fdc:	687b      	ldr	r3, [r7, #4]
 8028fde:	681b      	ldr	r3, [r3, #0]
 8028fe0:	691b      	ldr	r3, [r3, #16]
 8028fe2:	f003 0301 	and.w	r3, r3, #1
 8028fe6:	2b01      	cmp	r3, #1
 8028fe8:	d10e      	bne.n	8029008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8028fea:	687b      	ldr	r3, [r7, #4]
 8028fec:	681b      	ldr	r3, [r3, #0]
 8028fee:	68db      	ldr	r3, [r3, #12]
 8028ff0:	f003 0301 	and.w	r3, r3, #1
 8028ff4:	2b01      	cmp	r3, #1
 8028ff6:	d107      	bne.n	8029008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8028ff8:	687b      	ldr	r3, [r7, #4]
 8028ffa:	681b      	ldr	r3, [r3, #0]
 8028ffc:	f06f 0201 	mvn.w	r2, #1
 8029000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029002:	6878      	ldr	r0, [r7, #4]
 8029004:	f7f7 ff74 	bl	8020ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029008:	687b      	ldr	r3, [r7, #4]
 802900a:	681b      	ldr	r3, [r3, #0]
 802900c:	691b      	ldr	r3, [r3, #16]
 802900e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029012:	2b80      	cmp	r3, #128	; 0x80
 8029014:	d10e      	bne.n	8029034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	681b      	ldr	r3, [r3, #0]
 802901a:	68db      	ldr	r3, [r3, #12]
 802901c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029020:	2b80      	cmp	r3, #128	; 0x80
 8029022:	d107      	bne.n	8029034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029024:	687b      	ldr	r3, [r7, #4]
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802902c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802902e:	6878      	ldr	r0, [r7, #4]
 8029030:	f000 fae0 	bl	80295f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029034:	687b      	ldr	r3, [r7, #4]
 8029036:	681b      	ldr	r3, [r3, #0]
 8029038:	691b      	ldr	r3, [r3, #16]
 802903a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802903e:	2b40      	cmp	r3, #64	; 0x40
 8029040:	d10e      	bne.n	8029060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	681b      	ldr	r3, [r3, #0]
 8029046:	68db      	ldr	r3, [r3, #12]
 8029048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802904c:	2b40      	cmp	r3, #64	; 0x40
 802904e:	d107      	bne.n	8029060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029050:	687b      	ldr	r3, [r7, #4]
 8029052:	681b      	ldr	r3, [r3, #0]
 8029054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802905a:	6878      	ldr	r0, [r7, #4]
 802905c:	f000 f8ff 	bl	802925e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	691b      	ldr	r3, [r3, #16]
 8029066:	f003 0320 	and.w	r3, r3, #32
 802906a:	2b20      	cmp	r3, #32
 802906c:	d10e      	bne.n	802908c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802906e:	687b      	ldr	r3, [r7, #4]
 8029070:	681b      	ldr	r3, [r3, #0]
 8029072:	68db      	ldr	r3, [r3, #12]
 8029074:	f003 0320 	and.w	r3, r3, #32
 8029078:	2b20      	cmp	r3, #32
 802907a:	d107      	bne.n	802908c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	681b      	ldr	r3, [r3, #0]
 8029080:	f06f 0220 	mvn.w	r2, #32
 8029084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029086:	6878      	ldr	r0, [r7, #4]
 8029088:	f000 faaa 	bl	80295e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802908c:	bf00      	nop
 802908e:	3708      	adds	r7, #8
 8029090:	46bd      	mov	sp, r7
 8029092:	bd80      	pop	{r7, pc}

08029094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029094:	b580      	push	{r7, lr}
 8029096:	b084      	sub	sp, #16
 8029098:	af00      	add	r7, sp, #0
 802909a:	6078      	str	r0, [r7, #4]
 802909c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802909e:	2300      	movs	r3, #0
 80290a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80290a2:	687b      	ldr	r3, [r7, #4]
 80290a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80290a8:	2b01      	cmp	r3, #1
 80290aa:	d101      	bne.n	80290b0 <HAL_TIM_ConfigClockSource+0x1c>
 80290ac:	2302      	movs	r3, #2
 80290ae:	e0b4      	b.n	802921a <HAL_TIM_ConfigClockSource+0x186>
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	2201      	movs	r2, #1
 80290b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	2202      	movs	r2, #2
 80290bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	681b      	ldr	r3, [r3, #0]
 80290c4:	689b      	ldr	r3, [r3, #8]
 80290c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80290c8:	68bb      	ldr	r3, [r7, #8]
 80290ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80290ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80290d0:	68bb      	ldr	r3, [r7, #8]
 80290d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80290d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80290d8:	687b      	ldr	r3, [r7, #4]
 80290da:	681b      	ldr	r3, [r3, #0]
 80290dc:	68ba      	ldr	r2, [r7, #8]
 80290de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80290e0:	683b      	ldr	r3, [r7, #0]
 80290e2:	681b      	ldr	r3, [r3, #0]
 80290e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80290e8:	d03e      	beq.n	8029168 <HAL_TIM_ConfigClockSource+0xd4>
 80290ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80290ee:	f200 8087 	bhi.w	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 80290f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80290f6:	f000 8086 	beq.w	8029206 <HAL_TIM_ConfigClockSource+0x172>
 80290fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80290fe:	d87f      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029100:	2b70      	cmp	r3, #112	; 0x70
 8029102:	d01a      	beq.n	802913a <HAL_TIM_ConfigClockSource+0xa6>
 8029104:	2b70      	cmp	r3, #112	; 0x70
 8029106:	d87b      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029108:	2b60      	cmp	r3, #96	; 0x60
 802910a:	d050      	beq.n	80291ae <HAL_TIM_ConfigClockSource+0x11a>
 802910c:	2b60      	cmp	r3, #96	; 0x60
 802910e:	d877      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029110:	2b50      	cmp	r3, #80	; 0x50
 8029112:	d03c      	beq.n	802918e <HAL_TIM_ConfigClockSource+0xfa>
 8029114:	2b50      	cmp	r3, #80	; 0x50
 8029116:	d873      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029118:	2b40      	cmp	r3, #64	; 0x40
 802911a:	d058      	beq.n	80291ce <HAL_TIM_ConfigClockSource+0x13a>
 802911c:	2b40      	cmp	r3, #64	; 0x40
 802911e:	d86f      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029120:	2b30      	cmp	r3, #48	; 0x30
 8029122:	d064      	beq.n	80291ee <HAL_TIM_ConfigClockSource+0x15a>
 8029124:	2b30      	cmp	r3, #48	; 0x30
 8029126:	d86b      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029128:	2b20      	cmp	r3, #32
 802912a:	d060      	beq.n	80291ee <HAL_TIM_ConfigClockSource+0x15a>
 802912c:	2b20      	cmp	r3, #32
 802912e:	d867      	bhi.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
 8029130:	2b00      	cmp	r3, #0
 8029132:	d05c      	beq.n	80291ee <HAL_TIM_ConfigClockSource+0x15a>
 8029134:	2b10      	cmp	r3, #16
 8029136:	d05a      	beq.n	80291ee <HAL_TIM_ConfigClockSource+0x15a>
 8029138:	e062      	b.n	8029200 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	6818      	ldr	r0, [r3, #0]
 802913e:	683b      	ldr	r3, [r7, #0]
 8029140:	6899      	ldr	r1, [r3, #8]
 8029142:	683b      	ldr	r3, [r7, #0]
 8029144:	685a      	ldr	r2, [r3, #4]
 8029146:	683b      	ldr	r3, [r7, #0]
 8029148:	68db      	ldr	r3, [r3, #12]
 802914a:	f000 f9ad 	bl	80294a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802914e:	687b      	ldr	r3, [r7, #4]
 8029150:	681b      	ldr	r3, [r3, #0]
 8029152:	689b      	ldr	r3, [r3, #8]
 8029154:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029156:	68bb      	ldr	r3, [r7, #8]
 8029158:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802915c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802915e:	687b      	ldr	r3, [r7, #4]
 8029160:	681b      	ldr	r3, [r3, #0]
 8029162:	68ba      	ldr	r2, [r7, #8]
 8029164:	609a      	str	r2, [r3, #8]
      break;
 8029166:	e04f      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8029168:	687b      	ldr	r3, [r7, #4]
 802916a:	6818      	ldr	r0, [r3, #0]
 802916c:	683b      	ldr	r3, [r7, #0]
 802916e:	6899      	ldr	r1, [r3, #8]
 8029170:	683b      	ldr	r3, [r7, #0]
 8029172:	685a      	ldr	r2, [r3, #4]
 8029174:	683b      	ldr	r3, [r7, #0]
 8029176:	68db      	ldr	r3, [r3, #12]
 8029178:	f000 f996 	bl	80294a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802917c:	687b      	ldr	r3, [r7, #4]
 802917e:	681b      	ldr	r3, [r3, #0]
 8029180:	689a      	ldr	r2, [r3, #8]
 8029182:	687b      	ldr	r3, [r7, #4]
 8029184:	681b      	ldr	r3, [r3, #0]
 8029186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802918a:	609a      	str	r2, [r3, #8]
      break;
 802918c:	e03c      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802918e:	687b      	ldr	r3, [r7, #4]
 8029190:	6818      	ldr	r0, [r3, #0]
 8029192:	683b      	ldr	r3, [r7, #0]
 8029194:	6859      	ldr	r1, [r3, #4]
 8029196:	683b      	ldr	r3, [r7, #0]
 8029198:	68db      	ldr	r3, [r3, #12]
 802919a:	461a      	mov	r2, r3
 802919c:	f000 f90a 	bl	80293b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80291a0:	687b      	ldr	r3, [r7, #4]
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	2150      	movs	r1, #80	; 0x50
 80291a6:	4618      	mov	r0, r3
 80291a8:	f000 f963 	bl	8029472 <TIM_ITRx_SetConfig>
      break;
 80291ac:	e02c      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80291ae:	687b      	ldr	r3, [r7, #4]
 80291b0:	6818      	ldr	r0, [r3, #0]
 80291b2:	683b      	ldr	r3, [r7, #0]
 80291b4:	6859      	ldr	r1, [r3, #4]
 80291b6:	683b      	ldr	r3, [r7, #0]
 80291b8:	68db      	ldr	r3, [r3, #12]
 80291ba:	461a      	mov	r2, r3
 80291bc:	f000 f929 	bl	8029412 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	681b      	ldr	r3, [r3, #0]
 80291c4:	2160      	movs	r1, #96	; 0x60
 80291c6:	4618      	mov	r0, r3
 80291c8:	f000 f953 	bl	8029472 <TIM_ITRx_SetConfig>
      break;
 80291cc:	e01c      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	6818      	ldr	r0, [r3, #0]
 80291d2:	683b      	ldr	r3, [r7, #0]
 80291d4:	6859      	ldr	r1, [r3, #4]
 80291d6:	683b      	ldr	r3, [r7, #0]
 80291d8:	68db      	ldr	r3, [r3, #12]
 80291da:	461a      	mov	r2, r3
 80291dc:	f000 f8ea 	bl	80293b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	2140      	movs	r1, #64	; 0x40
 80291e6:	4618      	mov	r0, r3
 80291e8:	f000 f943 	bl	8029472 <TIM_ITRx_SetConfig>
      break;
 80291ec:	e00c      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80291ee:	687b      	ldr	r3, [r7, #4]
 80291f0:	681a      	ldr	r2, [r3, #0]
 80291f2:	683b      	ldr	r3, [r7, #0]
 80291f4:	681b      	ldr	r3, [r3, #0]
 80291f6:	4619      	mov	r1, r3
 80291f8:	4610      	mov	r0, r2
 80291fa:	f000 f93a 	bl	8029472 <TIM_ITRx_SetConfig>
      break;
 80291fe:	e003      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8029200:	2301      	movs	r3, #1
 8029202:	73fb      	strb	r3, [r7, #15]
      break;
 8029204:	e000      	b.n	8029208 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8029206:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029208:	687b      	ldr	r3, [r7, #4]
 802920a:	2201      	movs	r2, #1
 802920c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	2200      	movs	r2, #0
 8029214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8029218:	7bfb      	ldrb	r3, [r7, #15]
}
 802921a:	4618      	mov	r0, r3
 802921c:	3710      	adds	r7, #16
 802921e:	46bd      	mov	sp, r7
 8029220:	bd80      	pop	{r7, pc}

08029222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029222:	b480      	push	{r7}
 8029224:	b083      	sub	sp, #12
 8029226:	af00      	add	r7, sp, #0
 8029228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802922a:	bf00      	nop
 802922c:	370c      	adds	r7, #12
 802922e:	46bd      	mov	sp, r7
 8029230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029234:	4770      	bx	lr

08029236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029236:	b480      	push	{r7}
 8029238:	b083      	sub	sp, #12
 802923a:	af00      	add	r7, sp, #0
 802923c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802923e:	bf00      	nop
 8029240:	370c      	adds	r7, #12
 8029242:	46bd      	mov	sp, r7
 8029244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029248:	4770      	bx	lr

0802924a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802924a:	b480      	push	{r7}
 802924c:	b083      	sub	sp, #12
 802924e:	af00      	add	r7, sp, #0
 8029250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029252:	bf00      	nop
 8029254:	370c      	adds	r7, #12
 8029256:	46bd      	mov	sp, r7
 8029258:	f85d 7b04 	ldr.w	r7, [sp], #4
 802925c:	4770      	bx	lr

0802925e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802925e:	b480      	push	{r7}
 8029260:	b083      	sub	sp, #12
 8029262:	af00      	add	r7, sp, #0
 8029264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029266:	bf00      	nop
 8029268:	370c      	adds	r7, #12
 802926a:	46bd      	mov	sp, r7
 802926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029270:	4770      	bx	lr
	...

08029274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029274:	b480      	push	{r7}
 8029276:	b085      	sub	sp, #20
 8029278:	af00      	add	r7, sp, #0
 802927a:	6078      	str	r0, [r7, #4]
 802927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802927e:	687b      	ldr	r3, [r7, #4]
 8029280:	681b      	ldr	r3, [r3, #0]
 8029282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029284:	687b      	ldr	r3, [r7, #4]
 8029286:	4a40      	ldr	r2, [pc, #256]	; (8029388 <TIM_Base_SetConfig+0x114>)
 8029288:	4293      	cmp	r3, r2
 802928a:	d013      	beq.n	80292b4 <TIM_Base_SetConfig+0x40>
 802928c:	687b      	ldr	r3, [r7, #4]
 802928e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029292:	d00f      	beq.n	80292b4 <TIM_Base_SetConfig+0x40>
 8029294:	687b      	ldr	r3, [r7, #4]
 8029296:	4a3d      	ldr	r2, [pc, #244]	; (802938c <TIM_Base_SetConfig+0x118>)
 8029298:	4293      	cmp	r3, r2
 802929a:	d00b      	beq.n	80292b4 <TIM_Base_SetConfig+0x40>
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	4a3c      	ldr	r2, [pc, #240]	; (8029390 <TIM_Base_SetConfig+0x11c>)
 80292a0:	4293      	cmp	r3, r2
 80292a2:	d007      	beq.n	80292b4 <TIM_Base_SetConfig+0x40>
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	4a3b      	ldr	r2, [pc, #236]	; (8029394 <TIM_Base_SetConfig+0x120>)
 80292a8:	4293      	cmp	r3, r2
 80292aa:	d003      	beq.n	80292b4 <TIM_Base_SetConfig+0x40>
 80292ac:	687b      	ldr	r3, [r7, #4]
 80292ae:	4a3a      	ldr	r2, [pc, #232]	; (8029398 <TIM_Base_SetConfig+0x124>)
 80292b0:	4293      	cmp	r3, r2
 80292b2:	d108      	bne.n	80292c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80292b4:	68fb      	ldr	r3, [r7, #12]
 80292b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80292ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80292bc:	683b      	ldr	r3, [r7, #0]
 80292be:	685b      	ldr	r3, [r3, #4]
 80292c0:	68fa      	ldr	r2, [r7, #12]
 80292c2:	4313      	orrs	r3, r2
 80292c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80292c6:	687b      	ldr	r3, [r7, #4]
 80292c8:	4a2f      	ldr	r2, [pc, #188]	; (8029388 <TIM_Base_SetConfig+0x114>)
 80292ca:	4293      	cmp	r3, r2
 80292cc:	d02b      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292ce:	687b      	ldr	r3, [r7, #4]
 80292d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80292d4:	d027      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292d6:	687b      	ldr	r3, [r7, #4]
 80292d8:	4a2c      	ldr	r2, [pc, #176]	; (802938c <TIM_Base_SetConfig+0x118>)
 80292da:	4293      	cmp	r3, r2
 80292dc:	d023      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292de:	687b      	ldr	r3, [r7, #4]
 80292e0:	4a2b      	ldr	r2, [pc, #172]	; (8029390 <TIM_Base_SetConfig+0x11c>)
 80292e2:	4293      	cmp	r3, r2
 80292e4:	d01f      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	4a2a      	ldr	r2, [pc, #168]	; (8029394 <TIM_Base_SetConfig+0x120>)
 80292ea:	4293      	cmp	r3, r2
 80292ec:	d01b      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	4a29      	ldr	r2, [pc, #164]	; (8029398 <TIM_Base_SetConfig+0x124>)
 80292f2:	4293      	cmp	r3, r2
 80292f4:	d017      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292f6:	687b      	ldr	r3, [r7, #4]
 80292f8:	4a28      	ldr	r2, [pc, #160]	; (802939c <TIM_Base_SetConfig+0x128>)
 80292fa:	4293      	cmp	r3, r2
 80292fc:	d013      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 80292fe:	687b      	ldr	r3, [r7, #4]
 8029300:	4a27      	ldr	r2, [pc, #156]	; (80293a0 <TIM_Base_SetConfig+0x12c>)
 8029302:	4293      	cmp	r3, r2
 8029304:	d00f      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 8029306:	687b      	ldr	r3, [r7, #4]
 8029308:	4a26      	ldr	r2, [pc, #152]	; (80293a4 <TIM_Base_SetConfig+0x130>)
 802930a:	4293      	cmp	r3, r2
 802930c:	d00b      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 802930e:	687b      	ldr	r3, [r7, #4]
 8029310:	4a25      	ldr	r2, [pc, #148]	; (80293a8 <TIM_Base_SetConfig+0x134>)
 8029312:	4293      	cmp	r3, r2
 8029314:	d007      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 8029316:	687b      	ldr	r3, [r7, #4]
 8029318:	4a24      	ldr	r2, [pc, #144]	; (80293ac <TIM_Base_SetConfig+0x138>)
 802931a:	4293      	cmp	r3, r2
 802931c:	d003      	beq.n	8029326 <TIM_Base_SetConfig+0xb2>
 802931e:	687b      	ldr	r3, [r7, #4]
 8029320:	4a23      	ldr	r2, [pc, #140]	; (80293b0 <TIM_Base_SetConfig+0x13c>)
 8029322:	4293      	cmp	r3, r2
 8029324:	d108      	bne.n	8029338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029326:	68fb      	ldr	r3, [r7, #12]
 8029328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802932c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802932e:	683b      	ldr	r3, [r7, #0]
 8029330:	68db      	ldr	r3, [r3, #12]
 8029332:	68fa      	ldr	r2, [r7, #12]
 8029334:	4313      	orrs	r3, r2
 8029336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029338:	68fb      	ldr	r3, [r7, #12]
 802933a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802933e:	683b      	ldr	r3, [r7, #0]
 8029340:	695b      	ldr	r3, [r3, #20]
 8029342:	4313      	orrs	r3, r2
 8029344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029346:	687b      	ldr	r3, [r7, #4]
 8029348:	68fa      	ldr	r2, [r7, #12]
 802934a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802934c:	683b      	ldr	r3, [r7, #0]
 802934e:	689a      	ldr	r2, [r3, #8]
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029354:	683b      	ldr	r3, [r7, #0]
 8029356:	681a      	ldr	r2, [r3, #0]
 8029358:	687b      	ldr	r3, [r7, #4]
 802935a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802935c:	687b      	ldr	r3, [r7, #4]
 802935e:	4a0a      	ldr	r2, [pc, #40]	; (8029388 <TIM_Base_SetConfig+0x114>)
 8029360:	4293      	cmp	r3, r2
 8029362:	d003      	beq.n	802936c <TIM_Base_SetConfig+0xf8>
 8029364:	687b      	ldr	r3, [r7, #4]
 8029366:	4a0c      	ldr	r2, [pc, #48]	; (8029398 <TIM_Base_SetConfig+0x124>)
 8029368:	4293      	cmp	r3, r2
 802936a:	d103      	bne.n	8029374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802936c:	683b      	ldr	r3, [r7, #0]
 802936e:	691a      	ldr	r2, [r3, #16]
 8029370:	687b      	ldr	r3, [r7, #4]
 8029372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	2201      	movs	r2, #1
 8029378:	615a      	str	r2, [r3, #20]
}
 802937a:	bf00      	nop
 802937c:	3714      	adds	r7, #20
 802937e:	46bd      	mov	sp, r7
 8029380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029384:	4770      	bx	lr
 8029386:	bf00      	nop
 8029388:	40010000 	.word	0x40010000
 802938c:	40000400 	.word	0x40000400
 8029390:	40000800 	.word	0x40000800
 8029394:	40000c00 	.word	0x40000c00
 8029398:	40010400 	.word	0x40010400
 802939c:	40014000 	.word	0x40014000
 80293a0:	40014400 	.word	0x40014400
 80293a4:	40014800 	.word	0x40014800
 80293a8:	40001800 	.word	0x40001800
 80293ac:	40001c00 	.word	0x40001c00
 80293b0:	40002000 	.word	0x40002000

080293b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80293b4:	b480      	push	{r7}
 80293b6:	b087      	sub	sp, #28
 80293b8:	af00      	add	r7, sp, #0
 80293ba:	60f8      	str	r0, [r7, #12]
 80293bc:	60b9      	str	r1, [r7, #8]
 80293be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80293c0:	68fb      	ldr	r3, [r7, #12]
 80293c2:	6a1b      	ldr	r3, [r3, #32]
 80293c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80293c6:	68fb      	ldr	r3, [r7, #12]
 80293c8:	6a1b      	ldr	r3, [r3, #32]
 80293ca:	f023 0201 	bic.w	r2, r3, #1
 80293ce:	68fb      	ldr	r3, [r7, #12]
 80293d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80293d2:	68fb      	ldr	r3, [r7, #12]
 80293d4:	699b      	ldr	r3, [r3, #24]
 80293d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80293d8:	693b      	ldr	r3, [r7, #16]
 80293da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80293de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80293e0:	687b      	ldr	r3, [r7, #4]
 80293e2:	011b      	lsls	r3, r3, #4
 80293e4:	693a      	ldr	r2, [r7, #16]
 80293e6:	4313      	orrs	r3, r2
 80293e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80293ea:	697b      	ldr	r3, [r7, #20]
 80293ec:	f023 030a 	bic.w	r3, r3, #10
 80293f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80293f2:	697a      	ldr	r2, [r7, #20]
 80293f4:	68bb      	ldr	r3, [r7, #8]
 80293f6:	4313      	orrs	r3, r2
 80293f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80293fa:	68fb      	ldr	r3, [r7, #12]
 80293fc:	693a      	ldr	r2, [r7, #16]
 80293fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029400:	68fb      	ldr	r3, [r7, #12]
 8029402:	697a      	ldr	r2, [r7, #20]
 8029404:	621a      	str	r2, [r3, #32]
}
 8029406:	bf00      	nop
 8029408:	371c      	adds	r7, #28
 802940a:	46bd      	mov	sp, r7
 802940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029410:	4770      	bx	lr

08029412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029412:	b480      	push	{r7}
 8029414:	b087      	sub	sp, #28
 8029416:	af00      	add	r7, sp, #0
 8029418:	60f8      	str	r0, [r7, #12]
 802941a:	60b9      	str	r1, [r7, #8]
 802941c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802941e:	68fb      	ldr	r3, [r7, #12]
 8029420:	6a1b      	ldr	r3, [r3, #32]
 8029422:	f023 0210 	bic.w	r2, r3, #16
 8029426:	68fb      	ldr	r3, [r7, #12]
 8029428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802942a:	68fb      	ldr	r3, [r7, #12]
 802942c:	699b      	ldr	r3, [r3, #24]
 802942e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029430:	68fb      	ldr	r3, [r7, #12]
 8029432:	6a1b      	ldr	r3, [r3, #32]
 8029434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029436:	697b      	ldr	r3, [r7, #20]
 8029438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802943c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	031b      	lsls	r3, r3, #12
 8029442:	697a      	ldr	r2, [r7, #20]
 8029444:	4313      	orrs	r3, r2
 8029446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8029448:	693b      	ldr	r3, [r7, #16]
 802944a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802944e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8029450:	68bb      	ldr	r3, [r7, #8]
 8029452:	011b      	lsls	r3, r3, #4
 8029454:	693a      	ldr	r2, [r7, #16]
 8029456:	4313      	orrs	r3, r2
 8029458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802945a:	68fb      	ldr	r3, [r7, #12]
 802945c:	697a      	ldr	r2, [r7, #20]
 802945e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029460:	68fb      	ldr	r3, [r7, #12]
 8029462:	693a      	ldr	r2, [r7, #16]
 8029464:	621a      	str	r2, [r3, #32]
}
 8029466:	bf00      	nop
 8029468:	371c      	adds	r7, #28
 802946a:	46bd      	mov	sp, r7
 802946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029470:	4770      	bx	lr

08029472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029472:	b480      	push	{r7}
 8029474:	b085      	sub	sp, #20
 8029476:	af00      	add	r7, sp, #0
 8029478:	6078      	str	r0, [r7, #4]
 802947a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	689b      	ldr	r3, [r3, #8]
 8029480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029482:	68fb      	ldr	r3, [r7, #12]
 8029484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802948a:	683a      	ldr	r2, [r7, #0]
 802948c:	68fb      	ldr	r3, [r7, #12]
 802948e:	4313      	orrs	r3, r2
 8029490:	f043 0307 	orr.w	r3, r3, #7
 8029494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029496:	687b      	ldr	r3, [r7, #4]
 8029498:	68fa      	ldr	r2, [r7, #12]
 802949a:	609a      	str	r2, [r3, #8]
}
 802949c:	bf00      	nop
 802949e:	3714      	adds	r7, #20
 80294a0:	46bd      	mov	sp, r7
 80294a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294a6:	4770      	bx	lr

080294a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80294a8:	b480      	push	{r7}
 80294aa:	b087      	sub	sp, #28
 80294ac:	af00      	add	r7, sp, #0
 80294ae:	60f8      	str	r0, [r7, #12]
 80294b0:	60b9      	str	r1, [r7, #8]
 80294b2:	607a      	str	r2, [r7, #4]
 80294b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80294b6:	68fb      	ldr	r3, [r7, #12]
 80294b8:	689b      	ldr	r3, [r3, #8]
 80294ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80294bc:	697b      	ldr	r3, [r7, #20]
 80294be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80294c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80294c4:	683b      	ldr	r3, [r7, #0]
 80294c6:	021a      	lsls	r2, r3, #8
 80294c8:	687b      	ldr	r3, [r7, #4]
 80294ca:	431a      	orrs	r2, r3
 80294cc:	68bb      	ldr	r3, [r7, #8]
 80294ce:	4313      	orrs	r3, r2
 80294d0:	697a      	ldr	r2, [r7, #20]
 80294d2:	4313      	orrs	r3, r2
 80294d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80294d6:	68fb      	ldr	r3, [r7, #12]
 80294d8:	697a      	ldr	r2, [r7, #20]
 80294da:	609a      	str	r2, [r3, #8]
}
 80294dc:	bf00      	nop
 80294de:	371c      	adds	r7, #28
 80294e0:	46bd      	mov	sp, r7
 80294e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e6:	4770      	bx	lr

080294e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80294e8:	b480      	push	{r7}
 80294ea:	b085      	sub	sp, #20
 80294ec:	af00      	add	r7, sp, #0
 80294ee:	6078      	str	r0, [r7, #4]
 80294f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80294f8:	2b01      	cmp	r3, #1
 80294fa:	d101      	bne.n	8029500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80294fc:	2302      	movs	r3, #2
 80294fe:	e05a      	b.n	80295b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	2201      	movs	r2, #1
 8029504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029508:	687b      	ldr	r3, [r7, #4]
 802950a:	2202      	movs	r2, #2
 802950c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029510:	687b      	ldr	r3, [r7, #4]
 8029512:	681b      	ldr	r3, [r3, #0]
 8029514:	685b      	ldr	r3, [r3, #4]
 8029516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029518:	687b      	ldr	r3, [r7, #4]
 802951a:	681b      	ldr	r3, [r3, #0]
 802951c:	689b      	ldr	r3, [r3, #8]
 802951e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029520:	68fb      	ldr	r3, [r7, #12]
 8029522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029528:	683b      	ldr	r3, [r7, #0]
 802952a:	681b      	ldr	r3, [r3, #0]
 802952c:	68fa      	ldr	r2, [r7, #12]
 802952e:	4313      	orrs	r3, r2
 8029530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	681b      	ldr	r3, [r3, #0]
 8029536:	68fa      	ldr	r2, [r7, #12]
 8029538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	681b      	ldr	r3, [r3, #0]
 802953e:	4a21      	ldr	r2, [pc, #132]	; (80295c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8029540:	4293      	cmp	r3, r2
 8029542:	d022      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	681b      	ldr	r3, [r3, #0]
 8029548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802954c:	d01d      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	4a1d      	ldr	r2, [pc, #116]	; (80295c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8029554:	4293      	cmp	r3, r2
 8029556:	d018      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	681b      	ldr	r3, [r3, #0]
 802955c:	4a1b      	ldr	r2, [pc, #108]	; (80295cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802955e:	4293      	cmp	r3, r2
 8029560:	d013      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029562:	687b      	ldr	r3, [r7, #4]
 8029564:	681b      	ldr	r3, [r3, #0]
 8029566:	4a1a      	ldr	r2, [pc, #104]	; (80295d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8029568:	4293      	cmp	r3, r2
 802956a:	d00e      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802956c:	687b      	ldr	r3, [r7, #4]
 802956e:	681b      	ldr	r3, [r3, #0]
 8029570:	4a18      	ldr	r2, [pc, #96]	; (80295d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029572:	4293      	cmp	r3, r2
 8029574:	d009      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029576:	687b      	ldr	r3, [r7, #4]
 8029578:	681b      	ldr	r3, [r3, #0]
 802957a:	4a17      	ldr	r2, [pc, #92]	; (80295d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802957c:	4293      	cmp	r3, r2
 802957e:	d004      	beq.n	802958a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	4a15      	ldr	r2, [pc, #84]	; (80295dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8029586:	4293      	cmp	r3, r2
 8029588:	d10c      	bne.n	80295a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802958a:	68bb      	ldr	r3, [r7, #8]
 802958c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029592:	683b      	ldr	r3, [r7, #0]
 8029594:	685b      	ldr	r3, [r3, #4]
 8029596:	68ba      	ldr	r2, [r7, #8]
 8029598:	4313      	orrs	r3, r2
 802959a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	681b      	ldr	r3, [r3, #0]
 80295a0:	68ba      	ldr	r2, [r7, #8]
 80295a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	2201      	movs	r2, #1
 80295a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	2200      	movs	r2, #0
 80295b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80295b4:	2300      	movs	r3, #0
}
 80295b6:	4618      	mov	r0, r3
 80295b8:	3714      	adds	r7, #20
 80295ba:	46bd      	mov	sp, r7
 80295bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295c0:	4770      	bx	lr
 80295c2:	bf00      	nop
 80295c4:	40010000 	.word	0x40010000
 80295c8:	40000400 	.word	0x40000400
 80295cc:	40000800 	.word	0x40000800
 80295d0:	40000c00 	.word	0x40000c00
 80295d4:	40010400 	.word	0x40010400
 80295d8:	40014000 	.word	0x40014000
 80295dc:	40001800 	.word	0x40001800

080295e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80295e0:	b480      	push	{r7}
 80295e2:	b083      	sub	sp, #12
 80295e4:	af00      	add	r7, sp, #0
 80295e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80295e8:	bf00      	nop
 80295ea:	370c      	adds	r7, #12
 80295ec:	46bd      	mov	sp, r7
 80295ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295f2:	4770      	bx	lr

080295f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80295f4:	b480      	push	{r7}
 80295f6:	b083      	sub	sp, #12
 80295f8:	af00      	add	r7, sp, #0
 80295fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80295fc:	bf00      	nop
 80295fe:	370c      	adds	r7, #12
 8029600:	46bd      	mov	sp, r7
 8029602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029606:	4770      	bx	lr

08029608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8029608:	b580      	push	{r7, lr}
 802960a:	b082      	sub	sp, #8
 802960c:	af00      	add	r7, sp, #0
 802960e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8029610:	687b      	ldr	r3, [r7, #4]
 8029612:	2b00      	cmp	r3, #0
 8029614:	d101      	bne.n	802961a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8029616:	2301      	movs	r3, #1
 8029618:	e03f      	b.n	802969a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802961a:	687b      	ldr	r3, [r7, #4]
 802961c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029620:	b2db      	uxtb	r3, r3
 8029622:	2b00      	cmp	r3, #0
 8029624:	d106      	bne.n	8029634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	2200      	movs	r2, #0
 802962a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802962e:	6878      	ldr	r0, [r7, #4]
 8029630:	f7f8 fafc 	bl	8021c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8029634:	687b      	ldr	r3, [r7, #4]
 8029636:	2224      	movs	r2, #36	; 0x24
 8029638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802963c:	687b      	ldr	r3, [r7, #4]
 802963e:	681b      	ldr	r3, [r3, #0]
 8029640:	68da      	ldr	r2, [r3, #12]
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	681b      	ldr	r3, [r3, #0]
 8029646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 802964a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 802964c:	6878      	ldr	r0, [r7, #4]
 802964e:	f000 f9cb 	bl	80299e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	681b      	ldr	r3, [r3, #0]
 8029656:	691a      	ldr	r2, [r3, #16]
 8029658:	687b      	ldr	r3, [r7, #4]
 802965a:	681b      	ldr	r3, [r3, #0]
 802965c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8029660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	681b      	ldr	r3, [r3, #0]
 8029666:	695a      	ldr	r2, [r3, #20]
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	681b      	ldr	r3, [r3, #0]
 802966c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8029670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8029672:	687b      	ldr	r3, [r7, #4]
 8029674:	681b      	ldr	r3, [r3, #0]
 8029676:	68da      	ldr	r2, [r3, #12]
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8029680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029682:	687b      	ldr	r3, [r7, #4]
 8029684:	2200      	movs	r2, #0
 8029686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	2220      	movs	r2, #32
 802968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8029690:	687b      	ldr	r3, [r7, #4]
 8029692:	2220      	movs	r2, #32
 8029694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8029698:	2300      	movs	r3, #0
}
 802969a:	4618      	mov	r0, r3
 802969c:	3708      	adds	r7, #8
 802969e:	46bd      	mov	sp, r7
 80296a0:	bd80      	pop	{r7, pc}

080296a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80296a2:	b580      	push	{r7, lr}
 80296a4:	b08a      	sub	sp, #40	; 0x28
 80296a6:	af02      	add	r7, sp, #8
 80296a8:	60f8      	str	r0, [r7, #12]
 80296aa:	60b9      	str	r1, [r7, #8]
 80296ac:	603b      	str	r3, [r7, #0]
 80296ae:	4613      	mov	r3, r2
 80296b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80296b2:	2300      	movs	r3, #0
 80296b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80296b6:	68fb      	ldr	r3, [r7, #12]
 80296b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80296bc:	b2db      	uxtb	r3, r3
 80296be:	2b20      	cmp	r3, #32
 80296c0:	d17c      	bne.n	80297bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80296c2:	68bb      	ldr	r3, [r7, #8]
 80296c4:	2b00      	cmp	r3, #0
 80296c6:	d002      	beq.n	80296ce <HAL_UART_Transmit+0x2c>
 80296c8:	88fb      	ldrh	r3, [r7, #6]
 80296ca:	2b00      	cmp	r3, #0
 80296cc:	d101      	bne.n	80296d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80296ce:	2301      	movs	r3, #1
 80296d0:	e075      	b.n	80297be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80296d2:	68fb      	ldr	r3, [r7, #12]
 80296d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80296d8:	2b01      	cmp	r3, #1
 80296da:	d101      	bne.n	80296e0 <HAL_UART_Transmit+0x3e>
 80296dc:	2302      	movs	r3, #2
 80296de:	e06e      	b.n	80297be <HAL_UART_Transmit+0x11c>
 80296e0:	68fb      	ldr	r3, [r7, #12]
 80296e2:	2201      	movs	r2, #1
 80296e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80296e8:	68fb      	ldr	r3, [r7, #12]
 80296ea:	2200      	movs	r2, #0
 80296ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80296ee:	68fb      	ldr	r3, [r7, #12]
 80296f0:	2221      	movs	r2, #33	; 0x21
 80296f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80296f6:	f7f9 ffb9 	bl	802366c <HAL_GetTick>
 80296fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80296fc:	68fb      	ldr	r3, [r7, #12]
 80296fe:	88fa      	ldrh	r2, [r7, #6]
 8029700:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8029702:	68fb      	ldr	r3, [r7, #12]
 8029704:	88fa      	ldrh	r2, [r7, #6]
 8029706:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029708:	68fb      	ldr	r3, [r7, #12]
 802970a:	689b      	ldr	r3, [r3, #8]
 802970c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029710:	d108      	bne.n	8029724 <HAL_UART_Transmit+0x82>
 8029712:	68fb      	ldr	r3, [r7, #12]
 8029714:	691b      	ldr	r3, [r3, #16]
 8029716:	2b00      	cmp	r3, #0
 8029718:	d104      	bne.n	8029724 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802971a:	2300      	movs	r3, #0
 802971c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802971e:	68bb      	ldr	r3, [r7, #8]
 8029720:	61bb      	str	r3, [r7, #24]
 8029722:	e003      	b.n	802972c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8029724:	68bb      	ldr	r3, [r7, #8]
 8029726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8029728:	2300      	movs	r3, #0
 802972a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802972c:	68fb      	ldr	r3, [r7, #12]
 802972e:	2200      	movs	r2, #0
 8029730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8029734:	e02a      	b.n	802978c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8029736:	683b      	ldr	r3, [r7, #0]
 8029738:	9300      	str	r3, [sp, #0]
 802973a:	697b      	ldr	r3, [r7, #20]
 802973c:	2200      	movs	r2, #0
 802973e:	2180      	movs	r1, #128	; 0x80
 8029740:	68f8      	ldr	r0, [r7, #12]
 8029742:	f000 f8e2 	bl	802990a <UART_WaitOnFlagUntilTimeout>
 8029746:	4603      	mov	r3, r0
 8029748:	2b00      	cmp	r3, #0
 802974a:	d001      	beq.n	8029750 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 802974c:	2303      	movs	r3, #3
 802974e:	e036      	b.n	80297be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8029750:	69fb      	ldr	r3, [r7, #28]
 8029752:	2b00      	cmp	r3, #0
 8029754:	d10b      	bne.n	802976e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8029756:	69bb      	ldr	r3, [r7, #24]
 8029758:	881b      	ldrh	r3, [r3, #0]
 802975a:	461a      	mov	r2, r3
 802975c:	68fb      	ldr	r3, [r7, #12]
 802975e:	681b      	ldr	r3, [r3, #0]
 8029760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8029764:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8029766:	69bb      	ldr	r3, [r7, #24]
 8029768:	3302      	adds	r3, #2
 802976a:	61bb      	str	r3, [r7, #24]
 802976c:	e007      	b.n	802977e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 802976e:	69fb      	ldr	r3, [r7, #28]
 8029770:	781a      	ldrb	r2, [r3, #0]
 8029772:	68fb      	ldr	r3, [r7, #12]
 8029774:	681b      	ldr	r3, [r3, #0]
 8029776:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8029778:	69fb      	ldr	r3, [r7, #28]
 802977a:	3301      	adds	r3, #1
 802977c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802977e:	68fb      	ldr	r3, [r7, #12]
 8029780:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029782:	b29b      	uxth	r3, r3
 8029784:	3b01      	subs	r3, #1
 8029786:	b29a      	uxth	r2, r3
 8029788:	68fb      	ldr	r3, [r7, #12]
 802978a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 802978c:	68fb      	ldr	r3, [r7, #12]
 802978e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029790:	b29b      	uxth	r3, r3
 8029792:	2b00      	cmp	r3, #0
 8029794:	d1cf      	bne.n	8029736 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8029796:	683b      	ldr	r3, [r7, #0]
 8029798:	9300      	str	r3, [sp, #0]
 802979a:	697b      	ldr	r3, [r7, #20]
 802979c:	2200      	movs	r2, #0
 802979e:	2140      	movs	r1, #64	; 0x40
 80297a0:	68f8      	ldr	r0, [r7, #12]
 80297a2:	f000 f8b2 	bl	802990a <UART_WaitOnFlagUntilTimeout>
 80297a6:	4603      	mov	r3, r0
 80297a8:	2b00      	cmp	r3, #0
 80297aa:	d001      	beq.n	80297b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80297ac:	2303      	movs	r3, #3
 80297ae:	e006      	b.n	80297be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80297b0:	68fb      	ldr	r3, [r7, #12]
 80297b2:	2220      	movs	r2, #32
 80297b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80297b8:	2300      	movs	r3, #0
 80297ba:	e000      	b.n	80297be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80297bc:	2302      	movs	r3, #2
  }
}
 80297be:	4618      	mov	r0, r3
 80297c0:	3720      	adds	r7, #32
 80297c2:	46bd      	mov	sp, r7
 80297c4:	bd80      	pop	{r7, pc}

080297c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80297c6:	b580      	push	{r7, lr}
 80297c8:	b08a      	sub	sp, #40	; 0x28
 80297ca:	af02      	add	r7, sp, #8
 80297cc:	60f8      	str	r0, [r7, #12]
 80297ce:	60b9      	str	r1, [r7, #8]
 80297d0:	603b      	str	r3, [r7, #0]
 80297d2:	4613      	mov	r3, r2
 80297d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80297d6:	2300      	movs	r3, #0
 80297d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80297da:	68fb      	ldr	r3, [r7, #12]
 80297dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80297e0:	b2db      	uxtb	r3, r3
 80297e2:	2b20      	cmp	r3, #32
 80297e4:	f040 808c 	bne.w	8029900 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80297e8:	68bb      	ldr	r3, [r7, #8]
 80297ea:	2b00      	cmp	r3, #0
 80297ec:	d002      	beq.n	80297f4 <HAL_UART_Receive+0x2e>
 80297ee:	88fb      	ldrh	r3, [r7, #6]
 80297f0:	2b00      	cmp	r3, #0
 80297f2:	d101      	bne.n	80297f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80297f4:	2301      	movs	r3, #1
 80297f6:	e084      	b.n	8029902 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80297f8:	68fb      	ldr	r3, [r7, #12]
 80297fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80297fe:	2b01      	cmp	r3, #1
 8029800:	d101      	bne.n	8029806 <HAL_UART_Receive+0x40>
 8029802:	2302      	movs	r3, #2
 8029804:	e07d      	b.n	8029902 <HAL_UART_Receive+0x13c>
 8029806:	68fb      	ldr	r3, [r7, #12]
 8029808:	2201      	movs	r2, #1
 802980a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802980e:	68fb      	ldr	r3, [r7, #12]
 8029810:	2200      	movs	r2, #0
 8029812:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029814:	68fb      	ldr	r3, [r7, #12]
 8029816:	2222      	movs	r2, #34	; 0x22
 8029818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802981c:	68fb      	ldr	r3, [r7, #12]
 802981e:	2200      	movs	r2, #0
 8029820:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8029822:	f7f9 ff23 	bl	802366c <HAL_GetTick>
 8029826:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8029828:	68fb      	ldr	r3, [r7, #12]
 802982a:	88fa      	ldrh	r2, [r7, #6]
 802982c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 802982e:	68fb      	ldr	r3, [r7, #12]
 8029830:	88fa      	ldrh	r2, [r7, #6]
 8029832:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029834:	68fb      	ldr	r3, [r7, #12]
 8029836:	689b      	ldr	r3, [r3, #8]
 8029838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802983c:	d108      	bne.n	8029850 <HAL_UART_Receive+0x8a>
 802983e:	68fb      	ldr	r3, [r7, #12]
 8029840:	691b      	ldr	r3, [r3, #16]
 8029842:	2b00      	cmp	r3, #0
 8029844:	d104      	bne.n	8029850 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8029846:	2300      	movs	r3, #0
 8029848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 802984a:	68bb      	ldr	r3, [r7, #8]
 802984c:	61bb      	str	r3, [r7, #24]
 802984e:	e003      	b.n	8029858 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8029850:	68bb      	ldr	r3, [r7, #8]
 8029852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8029854:	2300      	movs	r3, #0
 8029856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8029858:	68fb      	ldr	r3, [r7, #12]
 802985a:	2200      	movs	r2, #0
 802985c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8029860:	e043      	b.n	80298ea <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8029862:	683b      	ldr	r3, [r7, #0]
 8029864:	9300      	str	r3, [sp, #0]
 8029866:	697b      	ldr	r3, [r7, #20]
 8029868:	2200      	movs	r2, #0
 802986a:	2120      	movs	r1, #32
 802986c:	68f8      	ldr	r0, [r7, #12]
 802986e:	f000 f84c 	bl	802990a <UART_WaitOnFlagUntilTimeout>
 8029872:	4603      	mov	r3, r0
 8029874:	2b00      	cmp	r3, #0
 8029876:	d001      	beq.n	802987c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8029878:	2303      	movs	r3, #3
 802987a:	e042      	b.n	8029902 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 802987c:	69fb      	ldr	r3, [r7, #28]
 802987e:	2b00      	cmp	r3, #0
 8029880:	d10c      	bne.n	802989c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8029882:	68fb      	ldr	r3, [r7, #12]
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	685b      	ldr	r3, [r3, #4]
 8029888:	b29b      	uxth	r3, r3
 802988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802988e:	b29a      	uxth	r2, r3
 8029890:	69bb      	ldr	r3, [r7, #24]
 8029892:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8029894:	69bb      	ldr	r3, [r7, #24]
 8029896:	3302      	adds	r3, #2
 8029898:	61bb      	str	r3, [r7, #24]
 802989a:	e01f      	b.n	80298dc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802989c:	68fb      	ldr	r3, [r7, #12]
 802989e:	689b      	ldr	r3, [r3, #8]
 80298a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80298a4:	d007      	beq.n	80298b6 <HAL_UART_Receive+0xf0>
 80298a6:	68fb      	ldr	r3, [r7, #12]
 80298a8:	689b      	ldr	r3, [r3, #8]
 80298aa:	2b00      	cmp	r3, #0
 80298ac:	d10a      	bne.n	80298c4 <HAL_UART_Receive+0xfe>
 80298ae:	68fb      	ldr	r3, [r7, #12]
 80298b0:	691b      	ldr	r3, [r3, #16]
 80298b2:	2b00      	cmp	r3, #0
 80298b4:	d106      	bne.n	80298c4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80298b6:	68fb      	ldr	r3, [r7, #12]
 80298b8:	681b      	ldr	r3, [r3, #0]
 80298ba:	685b      	ldr	r3, [r3, #4]
 80298bc:	b2da      	uxtb	r2, r3
 80298be:	69fb      	ldr	r3, [r7, #28]
 80298c0:	701a      	strb	r2, [r3, #0]
 80298c2:	e008      	b.n	80298d6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80298c4:	68fb      	ldr	r3, [r7, #12]
 80298c6:	681b      	ldr	r3, [r3, #0]
 80298c8:	685b      	ldr	r3, [r3, #4]
 80298ca:	b2db      	uxtb	r3, r3
 80298cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80298d0:	b2da      	uxtb	r2, r3
 80298d2:	69fb      	ldr	r3, [r7, #28]
 80298d4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80298d6:	69fb      	ldr	r3, [r7, #28]
 80298d8:	3301      	adds	r3, #1
 80298da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80298dc:	68fb      	ldr	r3, [r7, #12]
 80298de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80298e0:	b29b      	uxth	r3, r3
 80298e2:	3b01      	subs	r3, #1
 80298e4:	b29a      	uxth	r2, r3
 80298e6:	68fb      	ldr	r3, [r7, #12]
 80298e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80298ea:	68fb      	ldr	r3, [r7, #12]
 80298ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80298ee:	b29b      	uxth	r3, r3
 80298f0:	2b00      	cmp	r3, #0
 80298f2:	d1b6      	bne.n	8029862 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80298f4:	68fb      	ldr	r3, [r7, #12]
 80298f6:	2220      	movs	r2, #32
 80298f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80298fc:	2300      	movs	r3, #0
 80298fe:	e000      	b.n	8029902 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8029900:	2302      	movs	r3, #2
  }
}
 8029902:	4618      	mov	r0, r3
 8029904:	3720      	adds	r7, #32
 8029906:	46bd      	mov	sp, r7
 8029908:	bd80      	pop	{r7, pc}

0802990a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 802990a:	b580      	push	{r7, lr}
 802990c:	b090      	sub	sp, #64	; 0x40
 802990e:	af00      	add	r7, sp, #0
 8029910:	60f8      	str	r0, [r7, #12]
 8029912:	60b9      	str	r1, [r7, #8]
 8029914:	603b      	str	r3, [r7, #0]
 8029916:	4613      	mov	r3, r2
 8029918:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802991a:	e050      	b.n	80299be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802991c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029922:	d04c      	beq.n	80299be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029926:	2b00      	cmp	r3, #0
 8029928:	d007      	beq.n	802993a <UART_WaitOnFlagUntilTimeout+0x30>
 802992a:	f7f9 fe9f 	bl	802366c <HAL_GetTick>
 802992e:	4602      	mov	r2, r0
 8029930:	683b      	ldr	r3, [r7, #0]
 8029932:	1ad3      	subs	r3, r2, r3
 8029934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029936:	429a      	cmp	r2, r3
 8029938:	d241      	bcs.n	80299be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 802993a:	68fb      	ldr	r3, [r7, #12]
 802993c:	681b      	ldr	r3, [r3, #0]
 802993e:	330c      	adds	r3, #12
 8029940:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029944:	e853 3f00 	ldrex	r3, [r3]
 8029948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802994c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029952:	68fb      	ldr	r3, [r7, #12]
 8029954:	681b      	ldr	r3, [r3, #0]
 8029956:	330c      	adds	r3, #12
 8029958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802995a:	637a      	str	r2, [r7, #52]	; 0x34
 802995c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802995e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029962:	e841 2300 	strex	r3, r2, [r1]
 8029966:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802996a:	2b00      	cmp	r3, #0
 802996c:	d1e5      	bne.n	802993a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802996e:	68fb      	ldr	r3, [r7, #12]
 8029970:	681b      	ldr	r3, [r3, #0]
 8029972:	3314      	adds	r3, #20
 8029974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029976:	697b      	ldr	r3, [r7, #20]
 8029978:	e853 3f00 	ldrex	r3, [r3]
 802997c:	613b      	str	r3, [r7, #16]
   return(result);
 802997e:	693b      	ldr	r3, [r7, #16]
 8029980:	f023 0301 	bic.w	r3, r3, #1
 8029984:	63bb      	str	r3, [r7, #56]	; 0x38
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	681b      	ldr	r3, [r3, #0]
 802998a:	3314      	adds	r3, #20
 802998c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802998e:	623a      	str	r2, [r7, #32]
 8029990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029992:	69f9      	ldr	r1, [r7, #28]
 8029994:	6a3a      	ldr	r2, [r7, #32]
 8029996:	e841 2300 	strex	r3, r2, [r1]
 802999a:	61bb      	str	r3, [r7, #24]
   return(result);
 802999c:	69bb      	ldr	r3, [r7, #24]
 802999e:	2b00      	cmp	r3, #0
 80299a0:	d1e5      	bne.n	802996e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	2220      	movs	r2, #32
 80299a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80299aa:	68fb      	ldr	r3, [r7, #12]
 80299ac:	2220      	movs	r2, #32
 80299ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80299b2:	68fb      	ldr	r3, [r7, #12]
 80299b4:	2200      	movs	r2, #0
 80299b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80299ba:	2303      	movs	r3, #3
 80299bc:	e00f      	b.n	80299de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80299be:	68fb      	ldr	r3, [r7, #12]
 80299c0:	681b      	ldr	r3, [r3, #0]
 80299c2:	681a      	ldr	r2, [r3, #0]
 80299c4:	68bb      	ldr	r3, [r7, #8]
 80299c6:	4013      	ands	r3, r2
 80299c8:	68ba      	ldr	r2, [r7, #8]
 80299ca:	429a      	cmp	r2, r3
 80299cc:	bf0c      	ite	eq
 80299ce:	2301      	moveq	r3, #1
 80299d0:	2300      	movne	r3, #0
 80299d2:	b2db      	uxtb	r3, r3
 80299d4:	461a      	mov	r2, r3
 80299d6:	79fb      	ldrb	r3, [r7, #7]
 80299d8:	429a      	cmp	r2, r3
 80299da:	d09f      	beq.n	802991c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80299dc:	2300      	movs	r3, #0
}
 80299de:	4618      	mov	r0, r3
 80299e0:	3740      	adds	r7, #64	; 0x40
 80299e2:	46bd      	mov	sp, r7
 80299e4:	bd80      	pop	{r7, pc}
	...

080299e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80299e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80299ec:	b0c0      	sub	sp, #256	; 0x100
 80299ee:	af00      	add	r7, sp, #0
 80299f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80299f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80299f8:	681b      	ldr	r3, [r3, #0]
 80299fa:	691b      	ldr	r3, [r3, #16]
 80299fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8029a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a04:	68d9      	ldr	r1, [r3, #12]
 8029a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a0a:	681a      	ldr	r2, [r3, #0]
 8029a0c:	ea40 0301 	orr.w	r3, r0, r1
 8029a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8029a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a16:	689a      	ldr	r2, [r3, #8]
 8029a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a1c:	691b      	ldr	r3, [r3, #16]
 8029a1e:	431a      	orrs	r2, r3
 8029a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a24:	695b      	ldr	r3, [r3, #20]
 8029a26:	431a      	orrs	r2, r3
 8029a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a2c:	69db      	ldr	r3, [r3, #28]
 8029a2e:	4313      	orrs	r3, r2
 8029a30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8029a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a38:	681b      	ldr	r3, [r3, #0]
 8029a3a:	68db      	ldr	r3, [r3, #12]
 8029a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8029a40:	f021 010c 	bic.w	r1, r1, #12
 8029a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a48:	681a      	ldr	r2, [r3, #0]
 8029a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029a4e:	430b      	orrs	r3, r1
 8029a50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8029a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a56:	681b      	ldr	r3, [r3, #0]
 8029a58:	695b      	ldr	r3, [r3, #20]
 8029a5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8029a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a62:	6999      	ldr	r1, [r3, #24]
 8029a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a68:	681a      	ldr	r2, [r3, #0]
 8029a6a:	ea40 0301 	orr.w	r3, r0, r1
 8029a6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8029a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a74:	681a      	ldr	r2, [r3, #0]
 8029a76:	4b8f      	ldr	r3, [pc, #572]	; (8029cb4 <UART_SetConfig+0x2cc>)
 8029a78:	429a      	cmp	r2, r3
 8029a7a:	d005      	beq.n	8029a88 <UART_SetConfig+0xa0>
 8029a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a80:	681a      	ldr	r2, [r3, #0]
 8029a82:	4b8d      	ldr	r3, [pc, #564]	; (8029cb8 <UART_SetConfig+0x2d0>)
 8029a84:	429a      	cmp	r2, r3
 8029a86:	d104      	bne.n	8029a92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8029a88:	f7fe f8c6 	bl	8027c18 <HAL_RCC_GetPCLK2Freq>
 8029a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8029a90:	e003      	b.n	8029a9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8029a92:	f7fe f8ad 	bl	8027bf0 <HAL_RCC_GetPCLK1Freq>
 8029a96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8029a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029a9e:	69db      	ldr	r3, [r3, #28]
 8029aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029aa4:	f040 810c 	bne.w	8029cc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8029aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029aac:	2200      	movs	r2, #0
 8029aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8029ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8029ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8029aba:	4622      	mov	r2, r4
 8029abc:	462b      	mov	r3, r5
 8029abe:	1891      	adds	r1, r2, r2
 8029ac0:	65b9      	str	r1, [r7, #88]	; 0x58
 8029ac2:	415b      	adcs	r3, r3
 8029ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029ac6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8029aca:	4621      	mov	r1, r4
 8029acc:	eb12 0801 	adds.w	r8, r2, r1
 8029ad0:	4629      	mov	r1, r5
 8029ad2:	eb43 0901 	adc.w	r9, r3, r1
 8029ad6:	f04f 0200 	mov.w	r2, #0
 8029ada:	f04f 0300 	mov.w	r3, #0
 8029ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8029ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8029ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8029aea:	4690      	mov	r8, r2
 8029aec:	4699      	mov	r9, r3
 8029aee:	4623      	mov	r3, r4
 8029af0:	eb18 0303 	adds.w	r3, r8, r3
 8029af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8029af8:	462b      	mov	r3, r5
 8029afa:	eb49 0303 	adc.w	r3, r9, r3
 8029afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8029b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b06:	685b      	ldr	r3, [r3, #4]
 8029b08:	2200      	movs	r2, #0
 8029b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8029b0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8029b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8029b16:	460b      	mov	r3, r1
 8029b18:	18db      	adds	r3, r3, r3
 8029b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8029b1c:	4613      	mov	r3, r2
 8029b1e:	eb42 0303 	adc.w	r3, r2, r3
 8029b22:	657b      	str	r3, [r7, #84]	; 0x54
 8029b24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8029b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8029b2c:	f7f6 fbb0 	bl	8020290 <__aeabi_uldivmod>
 8029b30:	4602      	mov	r2, r0
 8029b32:	460b      	mov	r3, r1
 8029b34:	4b61      	ldr	r3, [pc, #388]	; (8029cbc <UART_SetConfig+0x2d4>)
 8029b36:	fba3 2302 	umull	r2, r3, r3, r2
 8029b3a:	095b      	lsrs	r3, r3, #5
 8029b3c:	011c      	lsls	r4, r3, #4
 8029b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029b42:	2200      	movs	r2, #0
 8029b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029b48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8029b4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8029b50:	4642      	mov	r2, r8
 8029b52:	464b      	mov	r3, r9
 8029b54:	1891      	adds	r1, r2, r2
 8029b56:	64b9      	str	r1, [r7, #72]	; 0x48
 8029b58:	415b      	adcs	r3, r3
 8029b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8029b60:	4641      	mov	r1, r8
 8029b62:	eb12 0a01 	adds.w	sl, r2, r1
 8029b66:	4649      	mov	r1, r9
 8029b68:	eb43 0b01 	adc.w	fp, r3, r1
 8029b6c:	f04f 0200 	mov.w	r2, #0
 8029b70:	f04f 0300 	mov.w	r3, #0
 8029b74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8029b78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8029b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8029b80:	4692      	mov	sl, r2
 8029b82:	469b      	mov	fp, r3
 8029b84:	4643      	mov	r3, r8
 8029b86:	eb1a 0303 	adds.w	r3, sl, r3
 8029b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029b8e:	464b      	mov	r3, r9
 8029b90:	eb4b 0303 	adc.w	r3, fp, r3
 8029b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8029b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029b9c:	685b      	ldr	r3, [r3, #4]
 8029b9e:	2200      	movs	r2, #0
 8029ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029ba4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8029ba8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8029bac:	460b      	mov	r3, r1
 8029bae:	18db      	adds	r3, r3, r3
 8029bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8029bb2:	4613      	mov	r3, r2
 8029bb4:	eb42 0303 	adc.w	r3, r2, r3
 8029bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8029bba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8029bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8029bc2:	f7f6 fb65 	bl	8020290 <__aeabi_uldivmod>
 8029bc6:	4602      	mov	r2, r0
 8029bc8:	460b      	mov	r3, r1
 8029bca:	4611      	mov	r1, r2
 8029bcc:	4b3b      	ldr	r3, [pc, #236]	; (8029cbc <UART_SetConfig+0x2d4>)
 8029bce:	fba3 2301 	umull	r2, r3, r3, r1
 8029bd2:	095b      	lsrs	r3, r3, #5
 8029bd4:	2264      	movs	r2, #100	; 0x64
 8029bd6:	fb02 f303 	mul.w	r3, r2, r3
 8029bda:	1acb      	subs	r3, r1, r3
 8029bdc:	00db      	lsls	r3, r3, #3
 8029bde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8029be2:	4b36      	ldr	r3, [pc, #216]	; (8029cbc <UART_SetConfig+0x2d4>)
 8029be4:	fba3 2302 	umull	r2, r3, r3, r2
 8029be8:	095b      	lsrs	r3, r3, #5
 8029bea:	005b      	lsls	r3, r3, #1
 8029bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8029bf0:	441c      	add	r4, r3
 8029bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029bf6:	2200      	movs	r2, #0
 8029bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029bfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8029c00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8029c04:	4642      	mov	r2, r8
 8029c06:	464b      	mov	r3, r9
 8029c08:	1891      	adds	r1, r2, r2
 8029c0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8029c0c:	415b      	adcs	r3, r3
 8029c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8029c14:	4641      	mov	r1, r8
 8029c16:	1851      	adds	r1, r2, r1
 8029c18:	6339      	str	r1, [r7, #48]	; 0x30
 8029c1a:	4649      	mov	r1, r9
 8029c1c:	414b      	adcs	r3, r1
 8029c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8029c20:	f04f 0200 	mov.w	r2, #0
 8029c24:	f04f 0300 	mov.w	r3, #0
 8029c28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8029c2c:	4659      	mov	r1, fp
 8029c2e:	00cb      	lsls	r3, r1, #3
 8029c30:	4651      	mov	r1, sl
 8029c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029c36:	4651      	mov	r1, sl
 8029c38:	00ca      	lsls	r2, r1, #3
 8029c3a:	4610      	mov	r0, r2
 8029c3c:	4619      	mov	r1, r3
 8029c3e:	4603      	mov	r3, r0
 8029c40:	4642      	mov	r2, r8
 8029c42:	189b      	adds	r3, r3, r2
 8029c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029c48:	464b      	mov	r3, r9
 8029c4a:	460a      	mov	r2, r1
 8029c4c:	eb42 0303 	adc.w	r3, r2, r3
 8029c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029c58:	685b      	ldr	r3, [r3, #4]
 8029c5a:	2200      	movs	r2, #0
 8029c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8029c60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8029c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8029c68:	460b      	mov	r3, r1
 8029c6a:	18db      	adds	r3, r3, r3
 8029c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8029c6e:	4613      	mov	r3, r2
 8029c70:	eb42 0303 	adc.w	r3, r2, r3
 8029c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8029c7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8029c7e:	f7f6 fb07 	bl	8020290 <__aeabi_uldivmod>
 8029c82:	4602      	mov	r2, r0
 8029c84:	460b      	mov	r3, r1
 8029c86:	4b0d      	ldr	r3, [pc, #52]	; (8029cbc <UART_SetConfig+0x2d4>)
 8029c88:	fba3 1302 	umull	r1, r3, r3, r2
 8029c8c:	095b      	lsrs	r3, r3, #5
 8029c8e:	2164      	movs	r1, #100	; 0x64
 8029c90:	fb01 f303 	mul.w	r3, r1, r3
 8029c94:	1ad3      	subs	r3, r2, r3
 8029c96:	00db      	lsls	r3, r3, #3
 8029c98:	3332      	adds	r3, #50	; 0x32
 8029c9a:	4a08      	ldr	r2, [pc, #32]	; (8029cbc <UART_SetConfig+0x2d4>)
 8029c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8029ca0:	095b      	lsrs	r3, r3, #5
 8029ca2:	f003 0207 	and.w	r2, r3, #7
 8029ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029caa:	681b      	ldr	r3, [r3, #0]
 8029cac:	4422      	add	r2, r4
 8029cae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8029cb0:	e105      	b.n	8029ebe <UART_SetConfig+0x4d6>
 8029cb2:	bf00      	nop
 8029cb4:	40011000 	.word	0x40011000
 8029cb8:	40011400 	.word	0x40011400
 8029cbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8029cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029cc4:	2200      	movs	r2, #0
 8029cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8029cca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8029cce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8029cd2:	4642      	mov	r2, r8
 8029cd4:	464b      	mov	r3, r9
 8029cd6:	1891      	adds	r1, r2, r2
 8029cd8:	6239      	str	r1, [r7, #32]
 8029cda:	415b      	adcs	r3, r3
 8029cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8029cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8029ce2:	4641      	mov	r1, r8
 8029ce4:	1854      	adds	r4, r2, r1
 8029ce6:	4649      	mov	r1, r9
 8029ce8:	eb43 0501 	adc.w	r5, r3, r1
 8029cec:	f04f 0200 	mov.w	r2, #0
 8029cf0:	f04f 0300 	mov.w	r3, #0
 8029cf4:	00eb      	lsls	r3, r5, #3
 8029cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8029cfa:	00e2      	lsls	r2, r4, #3
 8029cfc:	4614      	mov	r4, r2
 8029cfe:	461d      	mov	r5, r3
 8029d00:	4643      	mov	r3, r8
 8029d02:	18e3      	adds	r3, r4, r3
 8029d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8029d08:	464b      	mov	r3, r9
 8029d0a:	eb45 0303 	adc.w	r3, r5, r3
 8029d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029d16:	685b      	ldr	r3, [r3, #4]
 8029d18:	2200      	movs	r2, #0
 8029d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8029d1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029d22:	f04f 0200 	mov.w	r2, #0
 8029d26:	f04f 0300 	mov.w	r3, #0
 8029d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8029d2e:	4629      	mov	r1, r5
 8029d30:	008b      	lsls	r3, r1, #2
 8029d32:	4621      	mov	r1, r4
 8029d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029d38:	4621      	mov	r1, r4
 8029d3a:	008a      	lsls	r2, r1, #2
 8029d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8029d40:	f7f6 faa6 	bl	8020290 <__aeabi_uldivmod>
 8029d44:	4602      	mov	r2, r0
 8029d46:	460b      	mov	r3, r1
 8029d48:	4b60      	ldr	r3, [pc, #384]	; (8029ecc <UART_SetConfig+0x4e4>)
 8029d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8029d4e:	095b      	lsrs	r3, r3, #5
 8029d50:	011c      	lsls	r4, r3, #4
 8029d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029d56:	2200      	movs	r2, #0
 8029d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8029d5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8029d60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8029d64:	4642      	mov	r2, r8
 8029d66:	464b      	mov	r3, r9
 8029d68:	1891      	adds	r1, r2, r2
 8029d6a:	61b9      	str	r1, [r7, #24]
 8029d6c:	415b      	adcs	r3, r3
 8029d6e:	61fb      	str	r3, [r7, #28]
 8029d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8029d74:	4641      	mov	r1, r8
 8029d76:	1851      	adds	r1, r2, r1
 8029d78:	6139      	str	r1, [r7, #16]
 8029d7a:	4649      	mov	r1, r9
 8029d7c:	414b      	adcs	r3, r1
 8029d7e:	617b      	str	r3, [r7, #20]
 8029d80:	f04f 0200 	mov.w	r2, #0
 8029d84:	f04f 0300 	mov.w	r3, #0
 8029d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8029d8c:	4659      	mov	r1, fp
 8029d8e:	00cb      	lsls	r3, r1, #3
 8029d90:	4651      	mov	r1, sl
 8029d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029d96:	4651      	mov	r1, sl
 8029d98:	00ca      	lsls	r2, r1, #3
 8029d9a:	4610      	mov	r0, r2
 8029d9c:	4619      	mov	r1, r3
 8029d9e:	4603      	mov	r3, r0
 8029da0:	4642      	mov	r2, r8
 8029da2:	189b      	adds	r3, r3, r2
 8029da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8029da8:	464b      	mov	r3, r9
 8029daa:	460a      	mov	r2, r1
 8029dac:	eb42 0303 	adc.w	r3, r2, r3
 8029db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8029db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029db8:	685b      	ldr	r3, [r3, #4]
 8029dba:	2200      	movs	r2, #0
 8029dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8029dbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8029dc0:	f04f 0200 	mov.w	r2, #0
 8029dc4:	f04f 0300 	mov.w	r3, #0
 8029dc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8029dcc:	4649      	mov	r1, r9
 8029dce:	008b      	lsls	r3, r1, #2
 8029dd0:	4641      	mov	r1, r8
 8029dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029dd6:	4641      	mov	r1, r8
 8029dd8:	008a      	lsls	r2, r1, #2
 8029dda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8029dde:	f7f6 fa57 	bl	8020290 <__aeabi_uldivmod>
 8029de2:	4602      	mov	r2, r0
 8029de4:	460b      	mov	r3, r1
 8029de6:	4b39      	ldr	r3, [pc, #228]	; (8029ecc <UART_SetConfig+0x4e4>)
 8029de8:	fba3 1302 	umull	r1, r3, r3, r2
 8029dec:	095b      	lsrs	r3, r3, #5
 8029dee:	2164      	movs	r1, #100	; 0x64
 8029df0:	fb01 f303 	mul.w	r3, r1, r3
 8029df4:	1ad3      	subs	r3, r2, r3
 8029df6:	011b      	lsls	r3, r3, #4
 8029df8:	3332      	adds	r3, #50	; 0x32
 8029dfa:	4a34      	ldr	r2, [pc, #208]	; (8029ecc <UART_SetConfig+0x4e4>)
 8029dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8029e00:	095b      	lsrs	r3, r3, #5
 8029e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8029e06:	441c      	add	r4, r3
 8029e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8029e0c:	2200      	movs	r2, #0
 8029e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8029e10:	677a      	str	r2, [r7, #116]	; 0x74
 8029e12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8029e16:	4642      	mov	r2, r8
 8029e18:	464b      	mov	r3, r9
 8029e1a:	1891      	adds	r1, r2, r2
 8029e1c:	60b9      	str	r1, [r7, #8]
 8029e1e:	415b      	adcs	r3, r3
 8029e20:	60fb      	str	r3, [r7, #12]
 8029e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8029e26:	4641      	mov	r1, r8
 8029e28:	1851      	adds	r1, r2, r1
 8029e2a:	6039      	str	r1, [r7, #0]
 8029e2c:	4649      	mov	r1, r9
 8029e2e:	414b      	adcs	r3, r1
 8029e30:	607b      	str	r3, [r7, #4]
 8029e32:	f04f 0200 	mov.w	r2, #0
 8029e36:	f04f 0300 	mov.w	r3, #0
 8029e3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8029e3e:	4659      	mov	r1, fp
 8029e40:	00cb      	lsls	r3, r1, #3
 8029e42:	4651      	mov	r1, sl
 8029e44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8029e48:	4651      	mov	r1, sl
 8029e4a:	00ca      	lsls	r2, r1, #3
 8029e4c:	4610      	mov	r0, r2
 8029e4e:	4619      	mov	r1, r3
 8029e50:	4603      	mov	r3, r0
 8029e52:	4642      	mov	r2, r8
 8029e54:	189b      	adds	r3, r3, r2
 8029e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8029e58:	464b      	mov	r3, r9
 8029e5a:	460a      	mov	r2, r1
 8029e5c:	eb42 0303 	adc.w	r3, r2, r3
 8029e60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029e66:	685b      	ldr	r3, [r3, #4]
 8029e68:	2200      	movs	r2, #0
 8029e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8029e6c:	667a      	str	r2, [r7, #100]	; 0x64
 8029e6e:	f04f 0200 	mov.w	r2, #0
 8029e72:	f04f 0300 	mov.w	r3, #0
 8029e76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8029e7a:	4649      	mov	r1, r9
 8029e7c:	008b      	lsls	r3, r1, #2
 8029e7e:	4641      	mov	r1, r8
 8029e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8029e84:	4641      	mov	r1, r8
 8029e86:	008a      	lsls	r2, r1, #2
 8029e88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8029e8c:	f7f6 fa00 	bl	8020290 <__aeabi_uldivmod>
 8029e90:	4602      	mov	r2, r0
 8029e92:	460b      	mov	r3, r1
 8029e94:	4b0d      	ldr	r3, [pc, #52]	; (8029ecc <UART_SetConfig+0x4e4>)
 8029e96:	fba3 1302 	umull	r1, r3, r3, r2
 8029e9a:	095b      	lsrs	r3, r3, #5
 8029e9c:	2164      	movs	r1, #100	; 0x64
 8029e9e:	fb01 f303 	mul.w	r3, r1, r3
 8029ea2:	1ad3      	subs	r3, r2, r3
 8029ea4:	011b      	lsls	r3, r3, #4
 8029ea6:	3332      	adds	r3, #50	; 0x32
 8029ea8:	4a08      	ldr	r2, [pc, #32]	; (8029ecc <UART_SetConfig+0x4e4>)
 8029eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8029eae:	095b      	lsrs	r3, r3, #5
 8029eb0:	f003 020f 	and.w	r2, r3, #15
 8029eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029eb8:	681b      	ldr	r3, [r3, #0]
 8029eba:	4422      	add	r2, r4
 8029ebc:	609a      	str	r2, [r3, #8]
}
 8029ebe:	bf00      	nop
 8029ec0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8029ec4:	46bd      	mov	sp, r7
 8029ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8029eca:	bf00      	nop
 8029ecc:	51eb851f 	.word	0x51eb851f

08029ed0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8029ed0:	b480      	push	{r7}
 8029ed2:	b083      	sub	sp, #12
 8029ed4:	af00      	add	r7, sp, #0
 8029ed6:	6078      	str	r0, [r7, #4]
 8029ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8029eda:	683b      	ldr	r3, [r7, #0]
 8029edc:	681b      	ldr	r3, [r3, #0]
 8029ede:	2b00      	cmp	r3, #0
 8029ee0:	d123      	bne.n	8029f2a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	681b      	ldr	r3, [r3, #0]
 8029ee6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029eea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029eee:	683a      	ldr	r2, [r7, #0]
 8029ef0:	6851      	ldr	r1, [r2, #4]
 8029ef2:	683a      	ldr	r2, [r7, #0]
 8029ef4:	6892      	ldr	r2, [r2, #8]
 8029ef6:	4311      	orrs	r1, r2
 8029ef8:	683a      	ldr	r2, [r7, #0]
 8029efa:	68d2      	ldr	r2, [r2, #12]
 8029efc:	4311      	orrs	r1, r2
 8029efe:	683a      	ldr	r2, [r7, #0]
 8029f00:	6912      	ldr	r2, [r2, #16]
 8029f02:	4311      	orrs	r1, r2
 8029f04:	683a      	ldr	r2, [r7, #0]
 8029f06:	6952      	ldr	r2, [r2, #20]
 8029f08:	4311      	orrs	r1, r2
 8029f0a:	683a      	ldr	r2, [r7, #0]
 8029f0c:	6992      	ldr	r2, [r2, #24]
 8029f0e:	4311      	orrs	r1, r2
 8029f10:	683a      	ldr	r2, [r7, #0]
 8029f12:	69d2      	ldr	r2, [r2, #28]
 8029f14:	4311      	orrs	r1, r2
 8029f16:	683a      	ldr	r2, [r7, #0]
 8029f18:	6a12      	ldr	r2, [r2, #32]
 8029f1a:	4311      	orrs	r1, r2
 8029f1c:	683a      	ldr	r2, [r7, #0]
 8029f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8029f20:	430a      	orrs	r2, r1
 8029f22:	431a      	orrs	r2, r3
 8029f24:	687b      	ldr	r3, [r7, #4]
 8029f26:	601a      	str	r2, [r3, #0]
 8029f28:	e028      	b.n	8029f7c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8029f2a:	687b      	ldr	r3, [r7, #4]
 8029f2c:	681b      	ldr	r3, [r3, #0]
 8029f2e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8029f32:	683b      	ldr	r3, [r7, #0]
 8029f34:	69d9      	ldr	r1, [r3, #28]
 8029f36:	683b      	ldr	r3, [r7, #0]
 8029f38:	6a1b      	ldr	r3, [r3, #32]
 8029f3a:	4319      	orrs	r1, r3
 8029f3c:	683b      	ldr	r3, [r7, #0]
 8029f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029f40:	430b      	orrs	r3, r1
 8029f42:	431a      	orrs	r2, r3
 8029f44:	687b      	ldr	r3, [r7, #4]
 8029f46:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	685b      	ldr	r3, [r3, #4]
 8029f4c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8029f50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8029f54:	683a      	ldr	r2, [r7, #0]
 8029f56:	6851      	ldr	r1, [r2, #4]
 8029f58:	683a      	ldr	r2, [r7, #0]
 8029f5a:	6892      	ldr	r2, [r2, #8]
 8029f5c:	4311      	orrs	r1, r2
 8029f5e:	683a      	ldr	r2, [r7, #0]
 8029f60:	68d2      	ldr	r2, [r2, #12]
 8029f62:	4311      	orrs	r1, r2
 8029f64:	683a      	ldr	r2, [r7, #0]
 8029f66:	6912      	ldr	r2, [r2, #16]
 8029f68:	4311      	orrs	r1, r2
 8029f6a:	683a      	ldr	r2, [r7, #0]
 8029f6c:	6952      	ldr	r2, [r2, #20]
 8029f6e:	4311      	orrs	r1, r2
 8029f70:	683a      	ldr	r2, [r7, #0]
 8029f72:	6992      	ldr	r2, [r2, #24]
 8029f74:	430a      	orrs	r2, r1
 8029f76:	431a      	orrs	r2, r3
 8029f78:	687b      	ldr	r3, [r7, #4]
 8029f7a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8029f7c:	2300      	movs	r3, #0
}
 8029f7e:	4618      	mov	r0, r3
 8029f80:	370c      	adds	r7, #12
 8029f82:	46bd      	mov	sp, r7
 8029f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f88:	4770      	bx	lr

08029f8a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8029f8a:	b480      	push	{r7}
 8029f8c:	b085      	sub	sp, #20
 8029f8e:	af00      	add	r7, sp, #0
 8029f90:	60f8      	str	r0, [r7, #12]
 8029f92:	60b9      	str	r1, [r7, #8]
 8029f94:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	2b00      	cmp	r3, #0
 8029f9a:	d128      	bne.n	8029fee <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029f9c:	68fb      	ldr	r3, [r7, #12]
 8029f9e:	689b      	ldr	r3, [r3, #8]
 8029fa0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8029fa4:	68bb      	ldr	r3, [r7, #8]
 8029fa6:	681b      	ldr	r3, [r3, #0]
 8029fa8:	1e59      	subs	r1, r3, #1
 8029faa:	68bb      	ldr	r3, [r7, #8]
 8029fac:	685b      	ldr	r3, [r3, #4]
 8029fae:	3b01      	subs	r3, #1
 8029fb0:	011b      	lsls	r3, r3, #4
 8029fb2:	4319      	orrs	r1, r3
 8029fb4:	68bb      	ldr	r3, [r7, #8]
 8029fb6:	689b      	ldr	r3, [r3, #8]
 8029fb8:	3b01      	subs	r3, #1
 8029fba:	021b      	lsls	r3, r3, #8
 8029fbc:	4319      	orrs	r1, r3
 8029fbe:	68bb      	ldr	r3, [r7, #8]
 8029fc0:	68db      	ldr	r3, [r3, #12]
 8029fc2:	3b01      	subs	r3, #1
 8029fc4:	031b      	lsls	r3, r3, #12
 8029fc6:	4319      	orrs	r1, r3
 8029fc8:	68bb      	ldr	r3, [r7, #8]
 8029fca:	691b      	ldr	r3, [r3, #16]
 8029fcc:	3b01      	subs	r3, #1
 8029fce:	041b      	lsls	r3, r3, #16
 8029fd0:	4319      	orrs	r1, r3
 8029fd2:	68bb      	ldr	r3, [r7, #8]
 8029fd4:	695b      	ldr	r3, [r3, #20]
 8029fd6:	3b01      	subs	r3, #1
 8029fd8:	051b      	lsls	r3, r3, #20
 8029fda:	4319      	orrs	r1, r3
 8029fdc:	68bb      	ldr	r3, [r7, #8]
 8029fde:	699b      	ldr	r3, [r3, #24]
 8029fe0:	3b01      	subs	r3, #1
 8029fe2:	061b      	lsls	r3, r3, #24
 8029fe4:	430b      	orrs	r3, r1
 8029fe6:	431a      	orrs	r2, r3
 8029fe8:	68fb      	ldr	r3, [r7, #12]
 8029fea:	609a      	str	r2, [r3, #8]
 8029fec:	e02f      	b.n	802a04e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8029fee:	68fb      	ldr	r3, [r7, #12]
 8029ff0:	689b      	ldr	r3, [r3, #8]
 8029ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8029ff6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029ffa:	68ba      	ldr	r2, [r7, #8]
 8029ffc:	68d2      	ldr	r2, [r2, #12]
 8029ffe:	3a01      	subs	r2, #1
 802a000:	0311      	lsls	r1, r2, #12
 802a002:	68ba      	ldr	r2, [r7, #8]
 802a004:	6952      	ldr	r2, [r2, #20]
 802a006:	3a01      	subs	r2, #1
 802a008:	0512      	lsls	r2, r2, #20
 802a00a:	430a      	orrs	r2, r1
 802a00c:	431a      	orrs	r2, r3
 802a00e:	68fb      	ldr	r3, [r7, #12]
 802a010:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a012:	68fb      	ldr	r3, [r7, #12]
 802a014:	68db      	ldr	r3, [r3, #12]
 802a016:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a01a:	68bb      	ldr	r3, [r7, #8]
 802a01c:	681b      	ldr	r3, [r3, #0]
 802a01e:	1e59      	subs	r1, r3, #1
 802a020:	68bb      	ldr	r3, [r7, #8]
 802a022:	685b      	ldr	r3, [r3, #4]
 802a024:	3b01      	subs	r3, #1
 802a026:	011b      	lsls	r3, r3, #4
 802a028:	4319      	orrs	r1, r3
 802a02a:	68bb      	ldr	r3, [r7, #8]
 802a02c:	689b      	ldr	r3, [r3, #8]
 802a02e:	3b01      	subs	r3, #1
 802a030:	021b      	lsls	r3, r3, #8
 802a032:	4319      	orrs	r1, r3
 802a034:	68bb      	ldr	r3, [r7, #8]
 802a036:	691b      	ldr	r3, [r3, #16]
 802a038:	3b01      	subs	r3, #1
 802a03a:	041b      	lsls	r3, r3, #16
 802a03c:	4319      	orrs	r1, r3
 802a03e:	68bb      	ldr	r3, [r7, #8]
 802a040:	699b      	ldr	r3, [r3, #24]
 802a042:	3b01      	subs	r3, #1
 802a044:	061b      	lsls	r3, r3, #24
 802a046:	430b      	orrs	r3, r1
 802a048:	431a      	orrs	r2, r3
 802a04a:	68fb      	ldr	r3, [r7, #12]
 802a04c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a04e:	2300      	movs	r3, #0
}
 802a050:	4618      	mov	r0, r3
 802a052:	3714      	adds	r7, #20
 802a054:	46bd      	mov	sp, r7
 802a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a05a:	4770      	bx	lr

0802a05c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802a05c:	b580      	push	{r7, lr}
 802a05e:	b086      	sub	sp, #24
 802a060:	af00      	add	r7, sp, #0
 802a062:	60f8      	str	r0, [r7, #12]
 802a064:	60b9      	str	r1, [r7, #8]
 802a066:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802a068:	2300      	movs	r3, #0
 802a06a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802a06c:	68fb      	ldr	r3, [r7, #12]
 802a06e:	691b      	ldr	r3, [r3, #16]
 802a070:	0d9b      	lsrs	r3, r3, #22
 802a072:	059b      	lsls	r3, r3, #22
 802a074:	68ba      	ldr	r2, [r7, #8]
 802a076:	6811      	ldr	r1, [r2, #0]
 802a078:	68ba      	ldr	r2, [r7, #8]
 802a07a:	6852      	ldr	r2, [r2, #4]
 802a07c:	4311      	orrs	r1, r2
 802a07e:	68ba      	ldr	r2, [r7, #8]
 802a080:	6892      	ldr	r2, [r2, #8]
 802a082:	3a01      	subs	r2, #1
 802a084:	0152      	lsls	r2, r2, #5
 802a086:	4311      	orrs	r1, r2
 802a088:	68ba      	ldr	r2, [r7, #8]
 802a08a:	68d2      	ldr	r2, [r2, #12]
 802a08c:	0252      	lsls	r2, r2, #9
 802a08e:	430a      	orrs	r2, r1
 802a090:	431a      	orrs	r2, r3
 802a092:	68fb      	ldr	r3, [r7, #12]
 802a094:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802a096:	f7f9 fae9 	bl	802366c <HAL_GetTick>
 802a09a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a09c:	e010      	b.n	802a0c0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802a09e:	687b      	ldr	r3, [r7, #4]
 802a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a0a4:	d00c      	beq.n	802a0c0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	2b00      	cmp	r3, #0
 802a0aa:	d007      	beq.n	802a0bc <FMC_SDRAM_SendCommand+0x60>
 802a0ac:	f7f9 fade 	bl	802366c <HAL_GetTick>
 802a0b0:	4602      	mov	r2, r0
 802a0b2:	697b      	ldr	r3, [r7, #20]
 802a0b4:	1ad3      	subs	r3, r2, r3
 802a0b6:	687a      	ldr	r2, [r7, #4]
 802a0b8:	429a      	cmp	r2, r3
 802a0ba:	d201      	bcs.n	802a0c0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802a0bc:	2303      	movs	r3, #3
 802a0be:	e006      	b.n	802a0ce <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a0c0:	68fb      	ldr	r3, [r7, #12]
 802a0c2:	699b      	ldr	r3, [r3, #24]
 802a0c4:	f003 0320 	and.w	r3, r3, #32
 802a0c8:	2b20      	cmp	r3, #32
 802a0ca:	d0e8      	beq.n	802a09e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802a0cc:	2300      	movs	r3, #0
}
 802a0ce:	4618      	mov	r0, r3
 802a0d0:	3718      	adds	r7, #24
 802a0d2:	46bd      	mov	sp, r7
 802a0d4:	bd80      	pop	{r7, pc}

0802a0d6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802a0d6:	b480      	push	{r7}
 802a0d8:	b083      	sub	sp, #12
 802a0da:	af00      	add	r7, sp, #0
 802a0dc:	6078      	str	r0, [r7, #4]
 802a0de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802a0e0:	687b      	ldr	r3, [r7, #4]
 802a0e2:	695b      	ldr	r3, [r3, #20]
 802a0e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802a0e8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802a0ec:	683a      	ldr	r2, [r7, #0]
 802a0ee:	0052      	lsls	r2, r2, #1
 802a0f0:	431a      	orrs	r2, r3
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802a0f6:	2300      	movs	r3, #0
}
 802a0f8:	4618      	mov	r0, r3
 802a0fa:	370c      	adds	r7, #12
 802a0fc:	46bd      	mov	sp, r7
 802a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a102:	4770      	bx	lr

0802a104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a104:	b084      	sub	sp, #16
 802a106:	b580      	push	{r7, lr}
 802a108:	b084      	sub	sp, #16
 802a10a:	af00      	add	r7, sp, #0
 802a10c:	6078      	str	r0, [r7, #4]
 802a10e:	f107 001c 	add.w	r0, r7, #28
 802a112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a118:	2b01      	cmp	r3, #1
 802a11a:	d122      	bne.n	802a162 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802a128:	687b      	ldr	r3, [r7, #4]
 802a12a:	68db      	ldr	r3, [r3, #12]
 802a12c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802a130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a134:	687a      	ldr	r2, [r7, #4]
 802a136:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802a138:	687b      	ldr	r3, [r7, #4]
 802a13a:	68db      	ldr	r3, [r3, #12]
 802a13c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802a140:	687b      	ldr	r3, [r7, #4]
 802a142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802a144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a146:	2b01      	cmp	r3, #1
 802a148:	d105      	bne.n	802a156 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802a14a:	687b      	ldr	r3, [r7, #4]
 802a14c:	68db      	ldr	r3, [r3, #12]
 802a14e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802a152:	687b      	ldr	r3, [r7, #4]
 802a154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802a156:	6878      	ldr	r0, [r7, #4]
 802a158:	f000 f9c0 	bl	802a4dc <USB_CoreReset>
 802a15c:	4603      	mov	r3, r0
 802a15e:	73fb      	strb	r3, [r7, #15]
 802a160:	e01a      	b.n	802a198 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802a162:	687b      	ldr	r3, [r7, #4]
 802a164:	68db      	ldr	r3, [r3, #12]
 802a166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802a16a:	687b      	ldr	r3, [r7, #4]
 802a16c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802a16e:	6878      	ldr	r0, [r7, #4]
 802a170:	f000 f9b4 	bl	802a4dc <USB_CoreReset>
 802a174:	4603      	mov	r3, r0
 802a176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802a178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a17a:	2b00      	cmp	r3, #0
 802a17c:	d106      	bne.n	802a18c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802a186:	687b      	ldr	r3, [r7, #4]
 802a188:	639a      	str	r2, [r3, #56]	; 0x38
 802a18a:	e005      	b.n	802a198 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802a18c:	687b      	ldr	r3, [r7, #4]
 802a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a194:	687b      	ldr	r3, [r7, #4]
 802a196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a19a:	2b01      	cmp	r3, #1
 802a19c:	d10b      	bne.n	802a1b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802a19e:	687b      	ldr	r3, [r7, #4]
 802a1a0:	689b      	ldr	r3, [r3, #8]
 802a1a2:	f043 0206 	orr.w	r2, r3, #6
 802a1a6:	687b      	ldr	r3, [r7, #4]
 802a1a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802a1aa:	687b      	ldr	r3, [r7, #4]
 802a1ac:	689b      	ldr	r3, [r3, #8]
 802a1ae:	f043 0220 	orr.w	r2, r3, #32
 802a1b2:	687b      	ldr	r3, [r7, #4]
 802a1b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 802a1b8:	4618      	mov	r0, r3
 802a1ba:	3710      	adds	r7, #16
 802a1bc:	46bd      	mov	sp, r7
 802a1be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a1c2:	b004      	add	sp, #16
 802a1c4:	4770      	bx	lr

0802a1c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a1c6:	b480      	push	{r7}
 802a1c8:	b083      	sub	sp, #12
 802a1ca:	af00      	add	r7, sp, #0
 802a1cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802a1ce:	687b      	ldr	r3, [r7, #4]
 802a1d0:	689b      	ldr	r3, [r3, #8]
 802a1d2:	f043 0201 	orr.w	r2, r3, #1
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a1da:	2300      	movs	r3, #0
}
 802a1dc:	4618      	mov	r0, r3
 802a1de:	370c      	adds	r7, #12
 802a1e0:	46bd      	mov	sp, r7
 802a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1e6:	4770      	bx	lr

0802a1e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802a1e8:	b480      	push	{r7}
 802a1ea:	b083      	sub	sp, #12
 802a1ec:	af00      	add	r7, sp, #0
 802a1ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802a1f0:	687b      	ldr	r3, [r7, #4]
 802a1f2:	689b      	ldr	r3, [r3, #8]
 802a1f4:	f023 0201 	bic.w	r2, r3, #1
 802a1f8:	687b      	ldr	r3, [r7, #4]
 802a1fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802a1fc:	2300      	movs	r3, #0
}
 802a1fe:	4618      	mov	r0, r3
 802a200:	370c      	adds	r7, #12
 802a202:	46bd      	mov	sp, r7
 802a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a208:	4770      	bx	lr

0802a20a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802a20a:	b580      	push	{r7, lr}
 802a20c:	b084      	sub	sp, #16
 802a20e:	af00      	add	r7, sp, #0
 802a210:	6078      	str	r0, [r7, #4]
 802a212:	460b      	mov	r3, r1
 802a214:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802a216:	2300      	movs	r3, #0
 802a218:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802a21a:	687b      	ldr	r3, [r7, #4]
 802a21c:	68db      	ldr	r3, [r3, #12]
 802a21e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802a222:	687b      	ldr	r3, [r7, #4]
 802a224:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802a226:	78fb      	ldrb	r3, [r7, #3]
 802a228:	2b01      	cmp	r3, #1
 802a22a:	d115      	bne.n	802a258 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	68db      	ldr	r3, [r3, #12]
 802a230:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802a234:	687b      	ldr	r3, [r7, #4]
 802a236:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a238:	2001      	movs	r0, #1
 802a23a:	f7f9 fa23 	bl	8023684 <HAL_Delay>
      ms++;
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	3301      	adds	r3, #1
 802a242:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802a244:	6878      	ldr	r0, [r7, #4]
 802a246:	f000 f93a 	bl	802a4be <USB_GetMode>
 802a24a:	4603      	mov	r3, r0
 802a24c:	2b01      	cmp	r3, #1
 802a24e:	d01e      	beq.n	802a28e <USB_SetCurrentMode+0x84>
 802a250:	68fb      	ldr	r3, [r7, #12]
 802a252:	2b31      	cmp	r3, #49	; 0x31
 802a254:	d9f0      	bls.n	802a238 <USB_SetCurrentMode+0x2e>
 802a256:	e01a      	b.n	802a28e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802a258:	78fb      	ldrb	r3, [r7, #3]
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	d115      	bne.n	802a28a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802a25e:	687b      	ldr	r3, [r7, #4]
 802a260:	68db      	ldr	r3, [r3, #12]
 802a262:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802a266:	687b      	ldr	r3, [r7, #4]
 802a268:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802a26a:	2001      	movs	r0, #1
 802a26c:	f7f9 fa0a 	bl	8023684 <HAL_Delay>
      ms++;
 802a270:	68fb      	ldr	r3, [r7, #12]
 802a272:	3301      	adds	r3, #1
 802a274:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802a276:	6878      	ldr	r0, [r7, #4]
 802a278:	f000 f921 	bl	802a4be <USB_GetMode>
 802a27c:	4603      	mov	r3, r0
 802a27e:	2b00      	cmp	r3, #0
 802a280:	d005      	beq.n	802a28e <USB_SetCurrentMode+0x84>
 802a282:	68fb      	ldr	r3, [r7, #12]
 802a284:	2b31      	cmp	r3, #49	; 0x31
 802a286:	d9f0      	bls.n	802a26a <USB_SetCurrentMode+0x60>
 802a288:	e001      	b.n	802a28e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802a28a:	2301      	movs	r3, #1
 802a28c:	e005      	b.n	802a29a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802a28e:	68fb      	ldr	r3, [r7, #12]
 802a290:	2b32      	cmp	r3, #50	; 0x32
 802a292:	d101      	bne.n	802a298 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802a294:	2301      	movs	r3, #1
 802a296:	e000      	b.n	802a29a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802a298:	2300      	movs	r3, #0
}
 802a29a:	4618      	mov	r0, r3
 802a29c:	3710      	adds	r7, #16
 802a29e:	46bd      	mov	sp, r7
 802a2a0:	bd80      	pop	{r7, pc}
	...

0802a2a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802a2a4:	b480      	push	{r7}
 802a2a6:	b085      	sub	sp, #20
 802a2a8:	af00      	add	r7, sp, #0
 802a2aa:	6078      	str	r0, [r7, #4]
 802a2ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802a2ae:	2300      	movs	r3, #0
 802a2b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a2b2:	68fb      	ldr	r3, [r7, #12]
 802a2b4:	3301      	adds	r3, #1
 802a2b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a2b8:	68fb      	ldr	r3, [r7, #12]
 802a2ba:	4a13      	ldr	r2, [pc, #76]	; (802a308 <USB_FlushTxFifo+0x64>)
 802a2bc:	4293      	cmp	r3, r2
 802a2be:	d901      	bls.n	802a2c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802a2c0:	2303      	movs	r3, #3
 802a2c2:	e01b      	b.n	802a2fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a2c4:	687b      	ldr	r3, [r7, #4]
 802a2c6:	691b      	ldr	r3, [r3, #16]
 802a2c8:	2b00      	cmp	r3, #0
 802a2ca:	daf2      	bge.n	802a2b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802a2cc:	2300      	movs	r3, #0
 802a2ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802a2d0:	683b      	ldr	r3, [r7, #0]
 802a2d2:	019b      	lsls	r3, r3, #6
 802a2d4:	f043 0220 	orr.w	r2, r3, #32
 802a2d8:	687b      	ldr	r3, [r7, #4]
 802a2da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a2dc:	68fb      	ldr	r3, [r7, #12]
 802a2de:	3301      	adds	r3, #1
 802a2e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a2e2:	68fb      	ldr	r3, [r7, #12]
 802a2e4:	4a08      	ldr	r2, [pc, #32]	; (802a308 <USB_FlushTxFifo+0x64>)
 802a2e6:	4293      	cmp	r3, r2
 802a2e8:	d901      	bls.n	802a2ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802a2ea:	2303      	movs	r3, #3
 802a2ec:	e006      	b.n	802a2fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802a2ee:	687b      	ldr	r3, [r7, #4]
 802a2f0:	691b      	ldr	r3, [r3, #16]
 802a2f2:	f003 0320 	and.w	r3, r3, #32
 802a2f6:	2b20      	cmp	r3, #32
 802a2f8:	d0f0      	beq.n	802a2dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802a2fa:	2300      	movs	r3, #0
}
 802a2fc:	4618      	mov	r0, r3
 802a2fe:	3714      	adds	r7, #20
 802a300:	46bd      	mov	sp, r7
 802a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a306:	4770      	bx	lr
 802a308:	00030d40 	.word	0x00030d40

0802a30c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802a30c:	b480      	push	{r7}
 802a30e:	b085      	sub	sp, #20
 802a310:	af00      	add	r7, sp, #0
 802a312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a314:	2300      	movs	r3, #0
 802a316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a318:	68fb      	ldr	r3, [r7, #12]
 802a31a:	3301      	adds	r3, #1
 802a31c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a31e:	68fb      	ldr	r3, [r7, #12]
 802a320:	4a11      	ldr	r2, [pc, #68]	; (802a368 <USB_FlushRxFifo+0x5c>)
 802a322:	4293      	cmp	r3, r2
 802a324:	d901      	bls.n	802a32a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802a326:	2303      	movs	r3, #3
 802a328:	e018      	b.n	802a35c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a32a:	687b      	ldr	r3, [r7, #4]
 802a32c:	691b      	ldr	r3, [r3, #16]
 802a32e:	2b00      	cmp	r3, #0
 802a330:	daf2      	bge.n	802a318 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802a332:	2300      	movs	r3, #0
 802a334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802a336:	687b      	ldr	r3, [r7, #4]
 802a338:	2210      	movs	r2, #16
 802a33a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a33c:	68fb      	ldr	r3, [r7, #12]
 802a33e:	3301      	adds	r3, #1
 802a340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a342:	68fb      	ldr	r3, [r7, #12]
 802a344:	4a08      	ldr	r2, [pc, #32]	; (802a368 <USB_FlushRxFifo+0x5c>)
 802a346:	4293      	cmp	r3, r2
 802a348:	d901      	bls.n	802a34e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802a34a:	2303      	movs	r3, #3
 802a34c:	e006      	b.n	802a35c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	691b      	ldr	r3, [r3, #16]
 802a352:	f003 0310 	and.w	r3, r3, #16
 802a356:	2b10      	cmp	r3, #16
 802a358:	d0f0      	beq.n	802a33c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802a35a:	2300      	movs	r3, #0
}
 802a35c:	4618      	mov	r0, r3
 802a35e:	3714      	adds	r7, #20
 802a360:	46bd      	mov	sp, r7
 802a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a366:	4770      	bx	lr
 802a368:	00030d40 	.word	0x00030d40

0802a36c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802a36c:	b480      	push	{r7}
 802a36e:	b089      	sub	sp, #36	; 0x24
 802a370:	af00      	add	r7, sp, #0
 802a372:	60f8      	str	r0, [r7, #12]
 802a374:	60b9      	str	r1, [r7, #8]
 802a376:	4611      	mov	r1, r2
 802a378:	461a      	mov	r2, r3
 802a37a:	460b      	mov	r3, r1
 802a37c:	71fb      	strb	r3, [r7, #7]
 802a37e:	4613      	mov	r3, r2
 802a380:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a382:	68fb      	ldr	r3, [r7, #12]
 802a384:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802a386:	68bb      	ldr	r3, [r7, #8]
 802a388:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802a38a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802a38e:	2b00      	cmp	r3, #0
 802a390:	d123      	bne.n	802a3da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802a392:	88bb      	ldrh	r3, [r7, #4]
 802a394:	3303      	adds	r3, #3
 802a396:	089b      	lsrs	r3, r3, #2
 802a398:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802a39a:	2300      	movs	r3, #0
 802a39c:	61bb      	str	r3, [r7, #24]
 802a39e:	e018      	b.n	802a3d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802a3a0:	79fb      	ldrb	r3, [r7, #7]
 802a3a2:	031a      	lsls	r2, r3, #12
 802a3a4:	697b      	ldr	r3, [r7, #20]
 802a3a6:	4413      	add	r3, r2
 802a3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a3ac:	461a      	mov	r2, r3
 802a3ae:	69fb      	ldr	r3, [r7, #28]
 802a3b0:	681b      	ldr	r3, [r3, #0]
 802a3b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 802a3b4:	69fb      	ldr	r3, [r7, #28]
 802a3b6:	3301      	adds	r3, #1
 802a3b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a3ba:	69fb      	ldr	r3, [r7, #28]
 802a3bc:	3301      	adds	r3, #1
 802a3be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a3c0:	69fb      	ldr	r3, [r7, #28]
 802a3c2:	3301      	adds	r3, #1
 802a3c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802a3c6:	69fb      	ldr	r3, [r7, #28]
 802a3c8:	3301      	adds	r3, #1
 802a3ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802a3cc:	69bb      	ldr	r3, [r7, #24]
 802a3ce:	3301      	adds	r3, #1
 802a3d0:	61bb      	str	r3, [r7, #24]
 802a3d2:	69ba      	ldr	r2, [r7, #24]
 802a3d4:	693b      	ldr	r3, [r7, #16]
 802a3d6:	429a      	cmp	r2, r3
 802a3d8:	d3e2      	bcc.n	802a3a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802a3da:	2300      	movs	r3, #0
}
 802a3dc:	4618      	mov	r0, r3
 802a3de:	3724      	adds	r7, #36	; 0x24
 802a3e0:	46bd      	mov	sp, r7
 802a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3e6:	4770      	bx	lr

0802a3e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802a3e8:	b480      	push	{r7}
 802a3ea:	b08b      	sub	sp, #44	; 0x2c
 802a3ec:	af00      	add	r7, sp, #0
 802a3ee:	60f8      	str	r0, [r7, #12]
 802a3f0:	60b9      	str	r1, [r7, #8]
 802a3f2:	4613      	mov	r3, r2
 802a3f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a3f6:	68fb      	ldr	r3, [r7, #12]
 802a3f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802a3fa:	68bb      	ldr	r3, [r7, #8]
 802a3fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802a3fe:	88fb      	ldrh	r3, [r7, #6]
 802a400:	089b      	lsrs	r3, r3, #2
 802a402:	b29b      	uxth	r3, r3
 802a404:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802a406:	88fb      	ldrh	r3, [r7, #6]
 802a408:	f003 0303 	and.w	r3, r3, #3
 802a40c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802a40e:	2300      	movs	r3, #0
 802a410:	623b      	str	r3, [r7, #32]
 802a412:	e014      	b.n	802a43e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802a414:	69bb      	ldr	r3, [r7, #24]
 802a416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a41a:	681a      	ldr	r2, [r3, #0]
 802a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a41e:	601a      	str	r2, [r3, #0]
    pDest++;
 802a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a422:	3301      	adds	r3, #1
 802a424:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a428:	3301      	adds	r3, #1
 802a42a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a42e:	3301      	adds	r3, #1
 802a430:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802a432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a434:	3301      	adds	r3, #1
 802a436:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802a438:	6a3b      	ldr	r3, [r7, #32]
 802a43a:	3301      	adds	r3, #1
 802a43c:	623b      	str	r3, [r7, #32]
 802a43e:	6a3a      	ldr	r2, [r7, #32]
 802a440:	697b      	ldr	r3, [r7, #20]
 802a442:	429a      	cmp	r2, r3
 802a444:	d3e6      	bcc.n	802a414 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802a446:	8bfb      	ldrh	r3, [r7, #30]
 802a448:	2b00      	cmp	r3, #0
 802a44a:	d01e      	beq.n	802a48a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802a44c:	2300      	movs	r3, #0
 802a44e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802a450:	69bb      	ldr	r3, [r7, #24]
 802a452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802a456:	461a      	mov	r2, r3
 802a458:	f107 0310 	add.w	r3, r7, #16
 802a45c:	6812      	ldr	r2, [r2, #0]
 802a45e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802a460:	693a      	ldr	r2, [r7, #16]
 802a462:	6a3b      	ldr	r3, [r7, #32]
 802a464:	b2db      	uxtb	r3, r3
 802a466:	00db      	lsls	r3, r3, #3
 802a468:	fa22 f303 	lsr.w	r3, r2, r3
 802a46c:	b2da      	uxtb	r2, r3
 802a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a470:	701a      	strb	r2, [r3, #0]
      i++;
 802a472:	6a3b      	ldr	r3, [r7, #32]
 802a474:	3301      	adds	r3, #1
 802a476:	623b      	str	r3, [r7, #32]
      pDest++;
 802a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a47a:	3301      	adds	r3, #1
 802a47c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802a47e:	8bfb      	ldrh	r3, [r7, #30]
 802a480:	3b01      	subs	r3, #1
 802a482:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802a484:	8bfb      	ldrh	r3, [r7, #30]
 802a486:	2b00      	cmp	r3, #0
 802a488:	d1ea      	bne.n	802a460 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802a48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802a48c:	4618      	mov	r0, r3
 802a48e:	372c      	adds	r7, #44	; 0x2c
 802a490:	46bd      	mov	sp, r7
 802a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a496:	4770      	bx	lr

0802a498 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802a498:	b480      	push	{r7}
 802a49a:	b085      	sub	sp, #20
 802a49c:	af00      	add	r7, sp, #0
 802a49e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802a4a0:	687b      	ldr	r3, [r7, #4]
 802a4a2:	695b      	ldr	r3, [r3, #20]
 802a4a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802a4a6:	687b      	ldr	r3, [r7, #4]
 802a4a8:	699b      	ldr	r3, [r3, #24]
 802a4aa:	68fa      	ldr	r2, [r7, #12]
 802a4ac:	4013      	ands	r3, r2
 802a4ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802a4b0:	68fb      	ldr	r3, [r7, #12]
}
 802a4b2:	4618      	mov	r0, r3
 802a4b4:	3714      	adds	r7, #20
 802a4b6:	46bd      	mov	sp, r7
 802a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4bc:	4770      	bx	lr

0802a4be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802a4be:	b480      	push	{r7}
 802a4c0:	b083      	sub	sp, #12
 802a4c2:	af00      	add	r7, sp, #0
 802a4c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	695b      	ldr	r3, [r3, #20]
 802a4ca:	f003 0301 	and.w	r3, r3, #1
}
 802a4ce:	4618      	mov	r0, r3
 802a4d0:	370c      	adds	r7, #12
 802a4d2:	46bd      	mov	sp, r7
 802a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4d8:	4770      	bx	lr
	...

0802a4dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802a4dc:	b480      	push	{r7}
 802a4de:	b085      	sub	sp, #20
 802a4e0:	af00      	add	r7, sp, #0
 802a4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802a4e4:	2300      	movs	r3, #0
 802a4e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802a4e8:	68fb      	ldr	r3, [r7, #12]
 802a4ea:	3301      	adds	r3, #1
 802a4ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a4ee:	68fb      	ldr	r3, [r7, #12]
 802a4f0:	4a13      	ldr	r2, [pc, #76]	; (802a540 <USB_CoreReset+0x64>)
 802a4f2:	4293      	cmp	r3, r2
 802a4f4:	d901      	bls.n	802a4fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802a4f6:	2303      	movs	r3, #3
 802a4f8:	e01b      	b.n	802a532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802a4fa:	687b      	ldr	r3, [r7, #4]
 802a4fc:	691b      	ldr	r3, [r3, #16]
 802a4fe:	2b00      	cmp	r3, #0
 802a500:	daf2      	bge.n	802a4e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802a502:	2300      	movs	r3, #0
 802a504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802a506:	687b      	ldr	r3, [r7, #4]
 802a508:	691b      	ldr	r3, [r3, #16]
 802a50a:	f043 0201 	orr.w	r2, r3, #1
 802a50e:	687b      	ldr	r3, [r7, #4]
 802a510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802a512:	68fb      	ldr	r3, [r7, #12]
 802a514:	3301      	adds	r3, #1
 802a516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802a518:	68fb      	ldr	r3, [r7, #12]
 802a51a:	4a09      	ldr	r2, [pc, #36]	; (802a540 <USB_CoreReset+0x64>)
 802a51c:	4293      	cmp	r3, r2
 802a51e:	d901      	bls.n	802a524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802a520:	2303      	movs	r3, #3
 802a522:	e006      	b.n	802a532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802a524:	687b      	ldr	r3, [r7, #4]
 802a526:	691b      	ldr	r3, [r3, #16]
 802a528:	f003 0301 	and.w	r3, r3, #1
 802a52c:	2b01      	cmp	r3, #1
 802a52e:	d0f0      	beq.n	802a512 <USB_CoreReset+0x36>

  return HAL_OK;
 802a530:	2300      	movs	r3, #0
}
 802a532:	4618      	mov	r0, r3
 802a534:	3714      	adds	r7, #20
 802a536:	46bd      	mov	sp, r7
 802a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a53c:	4770      	bx	lr
 802a53e:	bf00      	nop
 802a540:	00030d40 	.word	0x00030d40

0802a544 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a544:	b084      	sub	sp, #16
 802a546:	b580      	push	{r7, lr}
 802a548:	b086      	sub	sp, #24
 802a54a:	af00      	add	r7, sp, #0
 802a54c:	6078      	str	r0, [r7, #4]
 802a54e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802a552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802a556:	2300      	movs	r3, #0
 802a558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a55a:	687b      	ldr	r3, [r7, #4]
 802a55c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802a55e:	68fb      	ldr	r3, [r7, #12]
 802a560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802a564:	461a      	mov	r2, r3
 802a566:	2300      	movs	r3, #0
 802a568:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802a56a:	687b      	ldr	r3, [r7, #4]
 802a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a56e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802a572:	687b      	ldr	r3, [r7, #4]
 802a574:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802a576:	687b      	ldr	r3, [r7, #4]
 802a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a57a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802a57e:	687b      	ldr	r3, [r7, #4]
 802a580:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802a582:	687b      	ldr	r3, [r7, #4]
 802a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a586:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802a58a:	687b      	ldr	r3, [r7, #4]
 802a58c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a58e:	687b      	ldr	r3, [r7, #4]
 802a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a596:	2b00      	cmp	r3, #0
 802a598:	d018      	beq.n	802a5cc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a59c:	2b01      	cmp	r3, #1
 802a59e:	d10a      	bne.n	802a5b6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802a5a0:	68fb      	ldr	r3, [r7, #12]
 802a5a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a5a6:	681b      	ldr	r3, [r3, #0]
 802a5a8:	68fa      	ldr	r2, [r7, #12]
 802a5aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a5ae:	f043 0304 	orr.w	r3, r3, #4
 802a5b2:	6013      	str	r3, [r2, #0]
 802a5b4:	e014      	b.n	802a5e0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a5b6:	68fb      	ldr	r3, [r7, #12]
 802a5b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a5bc:	681b      	ldr	r3, [r3, #0]
 802a5be:	68fa      	ldr	r2, [r7, #12]
 802a5c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a5c4:	f023 0304 	bic.w	r3, r3, #4
 802a5c8:	6013      	str	r3, [r2, #0]
 802a5ca:	e009      	b.n	802a5e0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802a5cc:	68fb      	ldr	r3, [r7, #12]
 802a5ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a5d2:	681b      	ldr	r3, [r3, #0]
 802a5d4:	68fa      	ldr	r2, [r7, #12]
 802a5d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a5da:	f023 0304 	bic.w	r3, r3, #4
 802a5de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802a5e0:	2110      	movs	r1, #16
 802a5e2:	6878      	ldr	r0, [r7, #4]
 802a5e4:	f7ff fe5e 	bl	802a2a4 <USB_FlushTxFifo>
 802a5e8:	4603      	mov	r3, r0
 802a5ea:	2b00      	cmp	r3, #0
 802a5ec:	d001      	beq.n	802a5f2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802a5ee:	2301      	movs	r3, #1
 802a5f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802a5f2:	6878      	ldr	r0, [r7, #4]
 802a5f4:	f7ff fe8a 	bl	802a30c <USB_FlushRxFifo>
 802a5f8:	4603      	mov	r3, r0
 802a5fa:	2b00      	cmp	r3, #0
 802a5fc:	d001      	beq.n	802a602 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802a5fe:	2301      	movs	r3, #1
 802a600:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802a602:	2300      	movs	r3, #0
 802a604:	613b      	str	r3, [r7, #16]
 802a606:	e015      	b.n	802a634 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802a608:	693b      	ldr	r3, [r7, #16]
 802a60a:	015a      	lsls	r2, r3, #5
 802a60c:	68fb      	ldr	r3, [r7, #12]
 802a60e:	4413      	add	r3, r2
 802a610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a614:	461a      	mov	r2, r3
 802a616:	f04f 33ff 	mov.w	r3, #4294967295
 802a61a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802a61c:	693b      	ldr	r3, [r7, #16]
 802a61e:	015a      	lsls	r2, r3, #5
 802a620:	68fb      	ldr	r3, [r7, #12]
 802a622:	4413      	add	r3, r2
 802a624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a628:	461a      	mov	r2, r3
 802a62a:	2300      	movs	r3, #0
 802a62c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802a62e:	693b      	ldr	r3, [r7, #16]
 802a630:	3301      	adds	r3, #1
 802a632:	613b      	str	r3, [r7, #16]
 802a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a636:	693a      	ldr	r2, [r7, #16]
 802a638:	429a      	cmp	r2, r3
 802a63a:	d3e5      	bcc.n	802a608 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802a63c:	687b      	ldr	r3, [r7, #4]
 802a63e:	2200      	movs	r2, #0
 802a640:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802a642:	687b      	ldr	r3, [r7, #4]
 802a644:	f04f 32ff 	mov.w	r2, #4294967295
 802a648:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802a64a:	687b      	ldr	r3, [r7, #4]
 802a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a64e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a652:	2b00      	cmp	r3, #0
 802a654:	d00b      	beq.n	802a66e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802a656:	687b      	ldr	r3, [r7, #4]
 802a658:	f44f 7200 	mov.w	r2, #512	; 0x200
 802a65c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802a65e:	687b      	ldr	r3, [r7, #4]
 802a660:	4a13      	ldr	r2, [pc, #76]	; (802a6b0 <USB_HostInit+0x16c>)
 802a662:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802a664:	687b      	ldr	r3, [r7, #4]
 802a666:	4a13      	ldr	r2, [pc, #76]	; (802a6b4 <USB_HostInit+0x170>)
 802a668:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802a66c:	e009      	b.n	802a682 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802a66e:	687b      	ldr	r3, [r7, #4]
 802a670:	2280      	movs	r2, #128	; 0x80
 802a672:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802a674:	687b      	ldr	r3, [r7, #4]
 802a676:	4a10      	ldr	r2, [pc, #64]	; (802a6b8 <USB_HostInit+0x174>)
 802a678:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802a67a:	687b      	ldr	r3, [r7, #4]
 802a67c:	4a0f      	ldr	r2, [pc, #60]	; (802a6bc <USB_HostInit+0x178>)
 802a67e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a684:	2b00      	cmp	r3, #0
 802a686:	d105      	bne.n	802a694 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802a688:	687b      	ldr	r3, [r7, #4]
 802a68a:	699b      	ldr	r3, [r3, #24]
 802a68c:	f043 0210 	orr.w	r2, r3, #16
 802a690:	687b      	ldr	r3, [r7, #4]
 802a692:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802a694:	687b      	ldr	r3, [r7, #4]
 802a696:	699a      	ldr	r2, [r3, #24]
 802a698:	4b09      	ldr	r3, [pc, #36]	; (802a6c0 <USB_HostInit+0x17c>)
 802a69a:	4313      	orrs	r3, r2
 802a69c:	687a      	ldr	r2, [r7, #4]
 802a69e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802a6a0:	7dfb      	ldrb	r3, [r7, #23]
}
 802a6a2:	4618      	mov	r0, r3
 802a6a4:	3718      	adds	r7, #24
 802a6a6:	46bd      	mov	sp, r7
 802a6a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802a6ac:	b004      	add	sp, #16
 802a6ae:	4770      	bx	lr
 802a6b0:	01000200 	.word	0x01000200
 802a6b4:	00e00300 	.word	0x00e00300
 802a6b8:	00600080 	.word	0x00600080
 802a6bc:	004000e0 	.word	0x004000e0
 802a6c0:	a3200008 	.word	0xa3200008

0802a6c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802a6c4:	b480      	push	{r7}
 802a6c6:	b085      	sub	sp, #20
 802a6c8:	af00      	add	r7, sp, #0
 802a6ca:	6078      	str	r0, [r7, #4]
 802a6cc:	460b      	mov	r3, r1
 802a6ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a6d0:	687b      	ldr	r3, [r7, #4]
 802a6d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802a6d4:	68fb      	ldr	r3, [r7, #12]
 802a6d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a6da:	681b      	ldr	r3, [r3, #0]
 802a6dc:	68fa      	ldr	r2, [r7, #12]
 802a6de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802a6e2:	f023 0303 	bic.w	r3, r3, #3
 802a6e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802a6e8:	68fb      	ldr	r3, [r7, #12]
 802a6ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a6ee:	681a      	ldr	r2, [r3, #0]
 802a6f0:	78fb      	ldrb	r3, [r7, #3]
 802a6f2:	f003 0303 	and.w	r3, r3, #3
 802a6f6:	68f9      	ldr	r1, [r7, #12]
 802a6f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a6fc:	4313      	orrs	r3, r2
 802a6fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802a700:	78fb      	ldrb	r3, [r7, #3]
 802a702:	2b01      	cmp	r3, #1
 802a704:	d107      	bne.n	802a716 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802a706:	68fb      	ldr	r3, [r7, #12]
 802a708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a70c:	461a      	mov	r2, r3
 802a70e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802a712:	6053      	str	r3, [r2, #4]
 802a714:	e009      	b.n	802a72a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802a716:	78fb      	ldrb	r3, [r7, #3]
 802a718:	2b02      	cmp	r3, #2
 802a71a:	d106      	bne.n	802a72a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802a71c:	68fb      	ldr	r3, [r7, #12]
 802a71e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a722:	461a      	mov	r2, r3
 802a724:	f241 7370 	movw	r3, #6000	; 0x1770
 802a728:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802a72a:	2300      	movs	r3, #0
}
 802a72c:	4618      	mov	r0, r3
 802a72e:	3714      	adds	r7, #20
 802a730:	46bd      	mov	sp, r7
 802a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a736:	4770      	bx	lr

0802a738 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802a738:	b580      	push	{r7, lr}
 802a73a:	b084      	sub	sp, #16
 802a73c:	af00      	add	r7, sp, #0
 802a73e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a740:	687b      	ldr	r3, [r7, #4]
 802a742:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802a744:	2300      	movs	r3, #0
 802a746:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a748:	68fb      	ldr	r3, [r7, #12]
 802a74a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a74e:	681b      	ldr	r3, [r3, #0]
 802a750:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a752:	68bb      	ldr	r3, [r7, #8]
 802a754:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a758:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802a75a:	68bb      	ldr	r3, [r7, #8]
 802a75c:	68fa      	ldr	r2, [r7, #12]
 802a75e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a766:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802a768:	2064      	movs	r0, #100	; 0x64
 802a76a:	f7f8 ff8b 	bl	8023684 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802a76e:	68bb      	ldr	r3, [r7, #8]
 802a770:	68fa      	ldr	r2, [r7, #12]
 802a772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a77a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802a77c:	200a      	movs	r0, #10
 802a77e:	f7f8 ff81 	bl	8023684 <HAL_Delay>

  return HAL_OK;
 802a782:	2300      	movs	r3, #0
}
 802a784:	4618      	mov	r0, r3
 802a786:	3710      	adds	r7, #16
 802a788:	46bd      	mov	sp, r7
 802a78a:	bd80      	pop	{r7, pc}

0802a78c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802a78c:	b480      	push	{r7}
 802a78e:	b085      	sub	sp, #20
 802a790:	af00      	add	r7, sp, #0
 802a792:	6078      	str	r0, [r7, #4]
 802a794:	460b      	mov	r3, r1
 802a796:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a798:	687b      	ldr	r3, [r7, #4]
 802a79a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a79c:	2300      	movs	r3, #0
 802a79e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a7a0:	68fb      	ldr	r3, [r7, #12]
 802a7a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a7a6:	681b      	ldr	r3, [r3, #0]
 802a7a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802a7aa:	68bb      	ldr	r3, [r7, #8]
 802a7ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802a7b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802a7b2:	68bb      	ldr	r3, [r7, #8]
 802a7b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a7b8:	2b00      	cmp	r3, #0
 802a7ba:	d109      	bne.n	802a7d0 <USB_DriveVbus+0x44>
 802a7bc:	78fb      	ldrb	r3, [r7, #3]
 802a7be:	2b01      	cmp	r3, #1
 802a7c0:	d106      	bne.n	802a7d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802a7c2:	68bb      	ldr	r3, [r7, #8]
 802a7c4:	68fa      	ldr	r2, [r7, #12]
 802a7c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a7ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802a7ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802a7d0:	68bb      	ldr	r3, [r7, #8]
 802a7d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802a7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a7da:	d109      	bne.n	802a7f0 <USB_DriveVbus+0x64>
 802a7dc:	78fb      	ldrb	r3, [r7, #3]
 802a7de:	2b00      	cmp	r3, #0
 802a7e0:	d106      	bne.n	802a7f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802a7e2:	68bb      	ldr	r3, [r7, #8]
 802a7e4:	68fa      	ldr	r2, [r7, #12]
 802a7e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802a7ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a7ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802a7f0:	2300      	movs	r3, #0
}
 802a7f2:	4618      	mov	r0, r3
 802a7f4:	3714      	adds	r7, #20
 802a7f6:	46bd      	mov	sp, r7
 802a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7fc:	4770      	bx	lr

0802a7fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802a7fe:	b480      	push	{r7}
 802a800:	b085      	sub	sp, #20
 802a802:	af00      	add	r7, sp, #0
 802a804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a806:	687b      	ldr	r3, [r7, #4]
 802a808:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802a80a:	2300      	movs	r3, #0
 802a80c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802a80e:	68fb      	ldr	r3, [r7, #12]
 802a810:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802a814:	681b      	ldr	r3, [r3, #0]
 802a816:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802a818:	68bb      	ldr	r3, [r7, #8]
 802a81a:	0c5b      	lsrs	r3, r3, #17
 802a81c:	f003 0303 	and.w	r3, r3, #3
}
 802a820:	4618      	mov	r0, r3
 802a822:	3714      	adds	r7, #20
 802a824:	46bd      	mov	sp, r7
 802a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a82a:	4770      	bx	lr

0802a82c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802a82c:	b480      	push	{r7}
 802a82e:	b085      	sub	sp, #20
 802a830:	af00      	add	r7, sp, #0
 802a832:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a834:	687b      	ldr	r3, [r7, #4]
 802a836:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802a838:	68fb      	ldr	r3, [r7, #12]
 802a83a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a83e:	689b      	ldr	r3, [r3, #8]
 802a840:	b29b      	uxth	r3, r3
}
 802a842:	4618      	mov	r0, r3
 802a844:	3714      	adds	r7, #20
 802a846:	46bd      	mov	sp, r7
 802a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a84c:	4770      	bx	lr
	...

0802a850 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802a850:	b580      	push	{r7, lr}
 802a852:	b088      	sub	sp, #32
 802a854:	af00      	add	r7, sp, #0
 802a856:	6078      	str	r0, [r7, #4]
 802a858:	4608      	mov	r0, r1
 802a85a:	4611      	mov	r1, r2
 802a85c:	461a      	mov	r2, r3
 802a85e:	4603      	mov	r3, r0
 802a860:	70fb      	strb	r3, [r7, #3]
 802a862:	460b      	mov	r3, r1
 802a864:	70bb      	strb	r3, [r7, #2]
 802a866:	4613      	mov	r3, r2
 802a868:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802a86a:	2300      	movs	r3, #0
 802a86c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802a86e:	687b      	ldr	r3, [r7, #4]
 802a870:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802a872:	78fb      	ldrb	r3, [r7, #3]
 802a874:	015a      	lsls	r2, r3, #5
 802a876:	693b      	ldr	r3, [r7, #16]
 802a878:	4413      	add	r3, r2
 802a87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a87e:	461a      	mov	r2, r3
 802a880:	f04f 33ff 	mov.w	r3, #4294967295
 802a884:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802a886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802a88a:	2b03      	cmp	r3, #3
 802a88c:	d87e      	bhi.n	802a98c <USB_HC_Init+0x13c>
 802a88e:	a201      	add	r2, pc, #4	; (adr r2, 802a894 <USB_HC_Init+0x44>)
 802a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802a894:	0802a8a5 	.word	0x0802a8a5
 802a898:	0802a94f 	.word	0x0802a94f
 802a89c:	0802a8a5 	.word	0x0802a8a5
 802a8a0:	0802a911 	.word	0x0802a911
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a8a4:	78fb      	ldrb	r3, [r7, #3]
 802a8a6:	015a      	lsls	r2, r3, #5
 802a8a8:	693b      	ldr	r3, [r7, #16]
 802a8aa:	4413      	add	r3, r2
 802a8ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8b0:	461a      	mov	r2, r3
 802a8b2:	f240 439d 	movw	r3, #1181	; 0x49d
 802a8b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802a8b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a8bc:	2b00      	cmp	r3, #0
 802a8be:	da10      	bge.n	802a8e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a8c0:	78fb      	ldrb	r3, [r7, #3]
 802a8c2:	015a      	lsls	r2, r3, #5
 802a8c4:	693b      	ldr	r3, [r7, #16]
 802a8c6:	4413      	add	r3, r2
 802a8c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8cc:	68db      	ldr	r3, [r3, #12]
 802a8ce:	78fa      	ldrb	r2, [r7, #3]
 802a8d0:	0151      	lsls	r1, r2, #5
 802a8d2:	693a      	ldr	r2, [r7, #16]
 802a8d4:	440a      	add	r2, r1
 802a8d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a8da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a8de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802a8e0:	e057      	b.n	802a992 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802a8e2:	687b      	ldr	r3, [r7, #4]
 802a8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802a8ea:	2b00      	cmp	r3, #0
 802a8ec:	d051      	beq.n	802a992 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802a8ee:	78fb      	ldrb	r3, [r7, #3]
 802a8f0:	015a      	lsls	r2, r3, #5
 802a8f2:	693b      	ldr	r3, [r7, #16]
 802a8f4:	4413      	add	r3, r2
 802a8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a8fa:	68db      	ldr	r3, [r3, #12]
 802a8fc:	78fa      	ldrb	r2, [r7, #3]
 802a8fe:	0151      	lsls	r1, r2, #5
 802a900:	693a      	ldr	r2, [r7, #16]
 802a902:	440a      	add	r2, r1
 802a904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a908:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802a90c:	60d3      	str	r3, [r2, #12]
      break;
 802a90e:	e040      	b.n	802a992 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a910:	78fb      	ldrb	r3, [r7, #3]
 802a912:	015a      	lsls	r2, r3, #5
 802a914:	693b      	ldr	r3, [r7, #16]
 802a916:	4413      	add	r3, r2
 802a918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a91c:	461a      	mov	r2, r3
 802a91e:	f240 639d 	movw	r3, #1693	; 0x69d
 802a922:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a924:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a928:	2b00      	cmp	r3, #0
 802a92a:	da34      	bge.n	802a996 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802a92c:	78fb      	ldrb	r3, [r7, #3]
 802a92e:	015a      	lsls	r2, r3, #5
 802a930:	693b      	ldr	r3, [r7, #16]
 802a932:	4413      	add	r3, r2
 802a934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a938:	68db      	ldr	r3, [r3, #12]
 802a93a:	78fa      	ldrb	r2, [r7, #3]
 802a93c:	0151      	lsls	r1, r2, #5
 802a93e:	693a      	ldr	r2, [r7, #16]
 802a940:	440a      	add	r2, r1
 802a942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802a94a:	60d3      	str	r3, [r2, #12]
      }

      break;
 802a94c:	e023      	b.n	802a996 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802a94e:	78fb      	ldrb	r3, [r7, #3]
 802a950:	015a      	lsls	r2, r3, #5
 802a952:	693b      	ldr	r3, [r7, #16]
 802a954:	4413      	add	r3, r2
 802a956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a95a:	461a      	mov	r2, r3
 802a95c:	f240 2325 	movw	r3, #549	; 0x225
 802a960:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802a962:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a966:	2b00      	cmp	r3, #0
 802a968:	da17      	bge.n	802a99a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802a96a:	78fb      	ldrb	r3, [r7, #3]
 802a96c:	015a      	lsls	r2, r3, #5
 802a96e:	693b      	ldr	r3, [r7, #16]
 802a970:	4413      	add	r3, r2
 802a972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a976:	68db      	ldr	r3, [r3, #12]
 802a978:	78fa      	ldrb	r2, [r7, #3]
 802a97a:	0151      	lsls	r1, r2, #5
 802a97c:	693a      	ldr	r2, [r7, #16]
 802a97e:	440a      	add	r2, r1
 802a980:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a984:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802a988:	60d3      	str	r3, [r2, #12]
      }
      break;
 802a98a:	e006      	b.n	802a99a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802a98c:	2301      	movs	r3, #1
 802a98e:	77fb      	strb	r3, [r7, #31]
      break;
 802a990:	e004      	b.n	802a99c <USB_HC_Init+0x14c>
      break;
 802a992:	bf00      	nop
 802a994:	e002      	b.n	802a99c <USB_HC_Init+0x14c>
      break;
 802a996:	bf00      	nop
 802a998:	e000      	b.n	802a99c <USB_HC_Init+0x14c>
      break;
 802a99a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802a99c:	78fb      	ldrb	r3, [r7, #3]
 802a99e:	015a      	lsls	r2, r3, #5
 802a9a0:	693b      	ldr	r3, [r7, #16]
 802a9a2:	4413      	add	r3, r2
 802a9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802a9a8:	68db      	ldr	r3, [r3, #12]
 802a9aa:	78fa      	ldrb	r2, [r7, #3]
 802a9ac:	0151      	lsls	r1, r2, #5
 802a9ae:	693a      	ldr	r2, [r7, #16]
 802a9b0:	440a      	add	r2, r1
 802a9b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802a9b6:	f043 0302 	orr.w	r3, r3, #2
 802a9ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802a9bc:	693b      	ldr	r3, [r7, #16]
 802a9be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802a9c2:	699a      	ldr	r2, [r3, #24]
 802a9c4:	78fb      	ldrb	r3, [r7, #3]
 802a9c6:	f003 030f 	and.w	r3, r3, #15
 802a9ca:	2101      	movs	r1, #1
 802a9cc:	fa01 f303 	lsl.w	r3, r1, r3
 802a9d0:	6939      	ldr	r1, [r7, #16]
 802a9d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802a9d6:	4313      	orrs	r3, r2
 802a9d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802a9da:	687b      	ldr	r3, [r7, #4]
 802a9dc:	699b      	ldr	r3, [r3, #24]
 802a9de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802a9e2:	687b      	ldr	r3, [r7, #4]
 802a9e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802a9e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802a9ea:	2b00      	cmp	r3, #0
 802a9ec:	da03      	bge.n	802a9f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802a9ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802a9f2:	61bb      	str	r3, [r7, #24]
 802a9f4:	e001      	b.n	802a9fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802a9f6:	2300      	movs	r3, #0
 802a9f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802a9fa:	6878      	ldr	r0, [r7, #4]
 802a9fc:	f7ff feff 	bl	802a7fe <USB_GetHostSpeed>
 802aa00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802aa02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802aa06:	2b02      	cmp	r3, #2
 802aa08:	d106      	bne.n	802aa18 <USB_HC_Init+0x1c8>
 802aa0a:	68fb      	ldr	r3, [r7, #12]
 802aa0c:	2b02      	cmp	r3, #2
 802aa0e:	d003      	beq.n	802aa18 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802aa10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802aa14:	617b      	str	r3, [r7, #20]
 802aa16:	e001      	b.n	802aa1c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802aa18:	2300      	movs	r3, #0
 802aa1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802aa1c:	787b      	ldrb	r3, [r7, #1]
 802aa1e:	059b      	lsls	r3, r3, #22
 802aa20:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802aa24:	78bb      	ldrb	r3, [r7, #2]
 802aa26:	02db      	lsls	r3, r3, #11
 802aa28:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802aa2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802aa2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802aa32:	049b      	lsls	r3, r3, #18
 802aa34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802aa38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802aa3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802aa3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802aa40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802aa42:	69bb      	ldr	r3, [r7, #24]
 802aa44:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802aa46:	78fb      	ldrb	r3, [r7, #3]
 802aa48:	0159      	lsls	r1, r3, #5
 802aa4a:	693b      	ldr	r3, [r7, #16]
 802aa4c:	440b      	add	r3, r1
 802aa4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa52:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802aa54:	697b      	ldr	r3, [r7, #20]
 802aa56:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802aa58:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802aa5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802aa5e:	2b03      	cmp	r3, #3
 802aa60:	d003      	beq.n	802aa6a <USB_HC_Init+0x21a>
 802aa62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802aa66:	2b01      	cmp	r3, #1
 802aa68:	d10f      	bne.n	802aa8a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802aa6a:	78fb      	ldrb	r3, [r7, #3]
 802aa6c:	015a      	lsls	r2, r3, #5
 802aa6e:	693b      	ldr	r3, [r7, #16]
 802aa70:	4413      	add	r3, r2
 802aa72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aa76:	681b      	ldr	r3, [r3, #0]
 802aa78:	78fa      	ldrb	r2, [r7, #3]
 802aa7a:	0151      	lsls	r1, r2, #5
 802aa7c:	693a      	ldr	r2, [r7, #16]
 802aa7e:	440a      	add	r2, r1
 802aa80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aa84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802aa88:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802aa8a:	7ffb      	ldrb	r3, [r7, #31]
}
 802aa8c:	4618      	mov	r0, r3
 802aa8e:	3720      	adds	r7, #32
 802aa90:	46bd      	mov	sp, r7
 802aa92:	bd80      	pop	{r7, pc}

0802aa94 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802aa94:	b580      	push	{r7, lr}
 802aa96:	b08c      	sub	sp, #48	; 0x30
 802aa98:	af02      	add	r7, sp, #8
 802aa9a:	60f8      	str	r0, [r7, #12]
 802aa9c:	60b9      	str	r1, [r7, #8]
 802aa9e:	4613      	mov	r3, r2
 802aaa0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aaa2:	68fb      	ldr	r3, [r7, #12]
 802aaa4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802aaa6:	68bb      	ldr	r3, [r7, #8]
 802aaa8:	785b      	ldrb	r3, [r3, #1]
 802aaaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802aaac:	f44f 7380 	mov.w	r3, #256	; 0x100
 802aab0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802aab2:	68fb      	ldr	r3, [r7, #12]
 802aab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802aab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	d02d      	beq.n	802ab1a <USB_HC_StartXfer+0x86>
 802aabe:	68bb      	ldr	r3, [r7, #8]
 802aac0:	791b      	ldrb	r3, [r3, #4]
 802aac2:	2b00      	cmp	r3, #0
 802aac4:	d129      	bne.n	802ab1a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802aac6:	79fb      	ldrb	r3, [r7, #7]
 802aac8:	2b01      	cmp	r3, #1
 802aaca:	d117      	bne.n	802aafc <USB_HC_StartXfer+0x68>
 802aacc:	68bb      	ldr	r3, [r7, #8]
 802aace:	79db      	ldrb	r3, [r3, #7]
 802aad0:	2b00      	cmp	r3, #0
 802aad2:	d003      	beq.n	802aadc <USB_HC_StartXfer+0x48>
 802aad4:	68bb      	ldr	r3, [r7, #8]
 802aad6:	79db      	ldrb	r3, [r3, #7]
 802aad8:	2b02      	cmp	r3, #2
 802aada:	d10f      	bne.n	802aafc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802aadc:	69fb      	ldr	r3, [r7, #28]
 802aade:	015a      	lsls	r2, r3, #5
 802aae0:	6a3b      	ldr	r3, [r7, #32]
 802aae2:	4413      	add	r3, r2
 802aae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aae8:	68db      	ldr	r3, [r3, #12]
 802aaea:	69fa      	ldr	r2, [r7, #28]
 802aaec:	0151      	lsls	r1, r2, #5
 802aaee:	6a3a      	ldr	r2, [r7, #32]
 802aaf0:	440a      	add	r2, r1
 802aaf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aaf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802aafa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802aafc:	79fb      	ldrb	r3, [r7, #7]
 802aafe:	2b00      	cmp	r3, #0
 802ab00:	d10b      	bne.n	802ab1a <USB_HC_StartXfer+0x86>
 802ab02:	68bb      	ldr	r3, [r7, #8]
 802ab04:	795b      	ldrb	r3, [r3, #5]
 802ab06:	2b01      	cmp	r3, #1
 802ab08:	d107      	bne.n	802ab1a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802ab0a:	68bb      	ldr	r3, [r7, #8]
 802ab0c:	785b      	ldrb	r3, [r3, #1]
 802ab0e:	4619      	mov	r1, r3
 802ab10:	68f8      	ldr	r0, [r7, #12]
 802ab12:	f000 fa0f 	bl	802af34 <USB_DoPing>
      return HAL_OK;
 802ab16:	2300      	movs	r3, #0
 802ab18:	e0f8      	b.n	802ad0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802ab1a:	68bb      	ldr	r3, [r7, #8]
 802ab1c:	695b      	ldr	r3, [r3, #20]
 802ab1e:	2b00      	cmp	r3, #0
 802ab20:	d018      	beq.n	802ab54 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802ab22:	68bb      	ldr	r3, [r7, #8]
 802ab24:	695b      	ldr	r3, [r3, #20]
 802ab26:	68ba      	ldr	r2, [r7, #8]
 802ab28:	8912      	ldrh	r2, [r2, #8]
 802ab2a:	4413      	add	r3, r2
 802ab2c:	3b01      	subs	r3, #1
 802ab2e:	68ba      	ldr	r2, [r7, #8]
 802ab30:	8912      	ldrh	r2, [r2, #8]
 802ab32:	fbb3 f3f2 	udiv	r3, r3, r2
 802ab36:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802ab38:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802ab3a:	8b7b      	ldrh	r3, [r7, #26]
 802ab3c:	429a      	cmp	r2, r3
 802ab3e:	d90b      	bls.n	802ab58 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802ab40:	8b7b      	ldrh	r3, [r7, #26]
 802ab42:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802ab44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ab46:	68ba      	ldr	r2, [r7, #8]
 802ab48:	8912      	ldrh	r2, [r2, #8]
 802ab4a:	fb03 f202 	mul.w	r2, r3, r2
 802ab4e:	68bb      	ldr	r3, [r7, #8]
 802ab50:	611a      	str	r2, [r3, #16]
 802ab52:	e001      	b.n	802ab58 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802ab54:	2301      	movs	r3, #1
 802ab56:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802ab58:	68bb      	ldr	r3, [r7, #8]
 802ab5a:	78db      	ldrb	r3, [r3, #3]
 802ab5c:	2b00      	cmp	r3, #0
 802ab5e:	d007      	beq.n	802ab70 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802ab60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ab62:	68ba      	ldr	r2, [r7, #8]
 802ab64:	8912      	ldrh	r2, [r2, #8]
 802ab66:	fb03 f202 	mul.w	r2, r3, r2
 802ab6a:	68bb      	ldr	r3, [r7, #8]
 802ab6c:	611a      	str	r2, [r3, #16]
 802ab6e:	e003      	b.n	802ab78 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802ab70:	68bb      	ldr	r3, [r7, #8]
 802ab72:	695a      	ldr	r2, [r3, #20]
 802ab74:	68bb      	ldr	r3, [r7, #8]
 802ab76:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ab78:	68bb      	ldr	r3, [r7, #8]
 802ab7a:	691b      	ldr	r3, [r3, #16]
 802ab7c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802ab80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802ab82:	04d9      	lsls	r1, r3, #19
 802ab84:	4b63      	ldr	r3, [pc, #396]	; (802ad14 <USB_HC_StartXfer+0x280>)
 802ab86:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ab88:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802ab8a:	68bb      	ldr	r3, [r7, #8]
 802ab8c:	7a9b      	ldrb	r3, [r3, #10]
 802ab8e:	075b      	lsls	r3, r3, #29
 802ab90:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802ab94:	69f9      	ldr	r1, [r7, #28]
 802ab96:	0148      	lsls	r0, r1, #5
 802ab98:	6a39      	ldr	r1, [r7, #32]
 802ab9a:	4401      	add	r1, r0
 802ab9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802aba0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802aba2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802aba4:	79fb      	ldrb	r3, [r7, #7]
 802aba6:	2b00      	cmp	r3, #0
 802aba8:	d009      	beq.n	802abbe <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802abaa:	68bb      	ldr	r3, [r7, #8]
 802abac:	68d9      	ldr	r1, [r3, #12]
 802abae:	69fb      	ldr	r3, [r7, #28]
 802abb0:	015a      	lsls	r2, r3, #5
 802abb2:	6a3b      	ldr	r3, [r7, #32]
 802abb4:	4413      	add	r3, r2
 802abb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abba:	460a      	mov	r2, r1
 802abbc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802abbe:	6a3b      	ldr	r3, [r7, #32]
 802abc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802abc4:	689b      	ldr	r3, [r3, #8]
 802abc6:	f003 0301 	and.w	r3, r3, #1
 802abca:	2b00      	cmp	r3, #0
 802abcc:	bf0c      	ite	eq
 802abce:	2301      	moveq	r3, #1
 802abd0:	2300      	movne	r3, #0
 802abd2:	b2db      	uxtb	r3, r3
 802abd4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802abd6:	69fb      	ldr	r3, [r7, #28]
 802abd8:	015a      	lsls	r2, r3, #5
 802abda:	6a3b      	ldr	r3, [r7, #32]
 802abdc:	4413      	add	r3, r2
 802abde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802abe2:	681b      	ldr	r3, [r3, #0]
 802abe4:	69fa      	ldr	r2, [r7, #28]
 802abe6:	0151      	lsls	r1, r2, #5
 802abe8:	6a3a      	ldr	r2, [r7, #32]
 802abea:	440a      	add	r2, r1
 802abec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802abf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802abf4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802abf6:	69fb      	ldr	r3, [r7, #28]
 802abf8:	015a      	lsls	r2, r3, #5
 802abfa:	6a3b      	ldr	r3, [r7, #32]
 802abfc:	4413      	add	r3, r2
 802abfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac02:	681a      	ldr	r2, [r3, #0]
 802ac04:	7e7b      	ldrb	r3, [r7, #25]
 802ac06:	075b      	lsls	r3, r3, #29
 802ac08:	69f9      	ldr	r1, [r7, #28]
 802ac0a:	0148      	lsls	r0, r1, #5
 802ac0c:	6a39      	ldr	r1, [r7, #32]
 802ac0e:	4401      	add	r1, r0
 802ac10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802ac14:	4313      	orrs	r3, r2
 802ac16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802ac18:	69fb      	ldr	r3, [r7, #28]
 802ac1a:	015a      	lsls	r2, r3, #5
 802ac1c:	6a3b      	ldr	r3, [r7, #32]
 802ac1e:	4413      	add	r3, r2
 802ac20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac24:	681b      	ldr	r3, [r3, #0]
 802ac26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802ac28:	693b      	ldr	r3, [r7, #16]
 802ac2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802ac2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802ac30:	68bb      	ldr	r3, [r7, #8]
 802ac32:	78db      	ldrb	r3, [r3, #3]
 802ac34:	2b00      	cmp	r3, #0
 802ac36:	d004      	beq.n	802ac42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802ac38:	693b      	ldr	r3, [r7, #16]
 802ac3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802ac3e:	613b      	str	r3, [r7, #16]
 802ac40:	e003      	b.n	802ac4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802ac42:	693b      	ldr	r3, [r7, #16]
 802ac44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802ac48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802ac4a:	693b      	ldr	r3, [r7, #16]
 802ac4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ac50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802ac52:	69fb      	ldr	r3, [r7, #28]
 802ac54:	015a      	lsls	r2, r3, #5
 802ac56:	6a3b      	ldr	r3, [r7, #32]
 802ac58:	4413      	add	r3, r2
 802ac5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ac5e:	461a      	mov	r2, r3
 802ac60:	693b      	ldr	r3, [r7, #16]
 802ac62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802ac64:	79fb      	ldrb	r3, [r7, #7]
 802ac66:	2b00      	cmp	r3, #0
 802ac68:	d001      	beq.n	802ac6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802ac6a:	2300      	movs	r3, #0
 802ac6c:	e04e      	b.n	802ad0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802ac6e:	68bb      	ldr	r3, [r7, #8]
 802ac70:	78db      	ldrb	r3, [r3, #3]
 802ac72:	2b00      	cmp	r3, #0
 802ac74:	d149      	bne.n	802ad0a <USB_HC_StartXfer+0x276>
 802ac76:	68bb      	ldr	r3, [r7, #8]
 802ac78:	695b      	ldr	r3, [r3, #20]
 802ac7a:	2b00      	cmp	r3, #0
 802ac7c:	d045      	beq.n	802ad0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802ac7e:	68bb      	ldr	r3, [r7, #8]
 802ac80:	79db      	ldrb	r3, [r3, #7]
 802ac82:	2b03      	cmp	r3, #3
 802ac84:	d830      	bhi.n	802ace8 <USB_HC_StartXfer+0x254>
 802ac86:	a201      	add	r2, pc, #4	; (adr r2, 802ac8c <USB_HC_StartXfer+0x1f8>)
 802ac88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ac8c:	0802ac9d 	.word	0x0802ac9d
 802ac90:	0802acc1 	.word	0x0802acc1
 802ac94:	0802ac9d 	.word	0x0802ac9d
 802ac98:	0802acc1 	.word	0x0802acc1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802ac9c:	68bb      	ldr	r3, [r7, #8]
 802ac9e:	695b      	ldr	r3, [r3, #20]
 802aca0:	3303      	adds	r3, #3
 802aca2:	089b      	lsrs	r3, r3, #2
 802aca4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802aca6:	8afa      	ldrh	r2, [r7, #22]
 802aca8:	68fb      	ldr	r3, [r7, #12]
 802acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802acac:	b29b      	uxth	r3, r3
 802acae:	429a      	cmp	r2, r3
 802acb0:	d91c      	bls.n	802acec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802acb2:	68fb      	ldr	r3, [r7, #12]
 802acb4:	699b      	ldr	r3, [r3, #24]
 802acb6:	f043 0220 	orr.w	r2, r3, #32
 802acba:	68fb      	ldr	r3, [r7, #12]
 802acbc:	619a      	str	r2, [r3, #24]
        }
        break;
 802acbe:	e015      	b.n	802acec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802acc0:	68bb      	ldr	r3, [r7, #8]
 802acc2:	695b      	ldr	r3, [r3, #20]
 802acc4:	3303      	adds	r3, #3
 802acc6:	089b      	lsrs	r3, r3, #2
 802acc8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802acca:	8afa      	ldrh	r2, [r7, #22]
 802accc:	6a3b      	ldr	r3, [r7, #32]
 802acce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802acd2:	691b      	ldr	r3, [r3, #16]
 802acd4:	b29b      	uxth	r3, r3
 802acd6:	429a      	cmp	r2, r3
 802acd8:	d90a      	bls.n	802acf0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802acda:	68fb      	ldr	r3, [r7, #12]
 802acdc:	699b      	ldr	r3, [r3, #24]
 802acde:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802ace2:	68fb      	ldr	r3, [r7, #12]
 802ace4:	619a      	str	r2, [r3, #24]
        }
        break;
 802ace6:	e003      	b.n	802acf0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802ace8:	bf00      	nop
 802acea:	e002      	b.n	802acf2 <USB_HC_StartXfer+0x25e>
        break;
 802acec:	bf00      	nop
 802acee:	e000      	b.n	802acf2 <USB_HC_StartXfer+0x25e>
        break;
 802acf0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802acf2:	68bb      	ldr	r3, [r7, #8]
 802acf4:	68d9      	ldr	r1, [r3, #12]
 802acf6:	68bb      	ldr	r3, [r7, #8]
 802acf8:	785a      	ldrb	r2, [r3, #1]
 802acfa:	68bb      	ldr	r3, [r7, #8]
 802acfc:	695b      	ldr	r3, [r3, #20]
 802acfe:	b29b      	uxth	r3, r3
 802ad00:	2000      	movs	r0, #0
 802ad02:	9000      	str	r0, [sp, #0]
 802ad04:	68f8      	ldr	r0, [r7, #12]
 802ad06:	f7ff fb31 	bl	802a36c <USB_WritePacket>
  }

  return HAL_OK;
 802ad0a:	2300      	movs	r3, #0
}
 802ad0c:	4618      	mov	r0, r3
 802ad0e:	3728      	adds	r7, #40	; 0x28
 802ad10:	46bd      	mov	sp, r7
 802ad12:	bd80      	pop	{r7, pc}
 802ad14:	1ff80000 	.word	0x1ff80000

0802ad18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802ad18:	b480      	push	{r7}
 802ad1a:	b085      	sub	sp, #20
 802ad1c:	af00      	add	r7, sp, #0
 802ad1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad20:	687b      	ldr	r3, [r7, #4]
 802ad22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802ad24:	68fb      	ldr	r3, [r7, #12]
 802ad26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ad2a:	695b      	ldr	r3, [r3, #20]
 802ad2c:	b29b      	uxth	r3, r3
}
 802ad2e:	4618      	mov	r0, r3
 802ad30:	3714      	adds	r7, #20
 802ad32:	46bd      	mov	sp, r7
 802ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad38:	4770      	bx	lr

0802ad3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802ad3a:	b480      	push	{r7}
 802ad3c:	b089      	sub	sp, #36	; 0x24
 802ad3e:	af00      	add	r7, sp, #0
 802ad40:	6078      	str	r0, [r7, #4]
 802ad42:	460b      	mov	r3, r1
 802ad44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad46:	687b      	ldr	r3, [r7, #4]
 802ad48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802ad4a:	78fb      	ldrb	r3, [r7, #3]
 802ad4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802ad4e:	2300      	movs	r3, #0
 802ad50:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802ad52:	69bb      	ldr	r3, [r7, #24]
 802ad54:	015a      	lsls	r2, r3, #5
 802ad56:	69fb      	ldr	r3, [r7, #28]
 802ad58:	4413      	add	r3, r2
 802ad5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad5e:	681b      	ldr	r3, [r3, #0]
 802ad60:	0c9b      	lsrs	r3, r3, #18
 802ad62:	f003 0303 	and.w	r3, r3, #3
 802ad66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802ad68:	69bb      	ldr	r3, [r7, #24]
 802ad6a:	015a      	lsls	r2, r3, #5
 802ad6c:	69fb      	ldr	r3, [r7, #28]
 802ad6e:	4413      	add	r3, r2
 802ad70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ad74:	681b      	ldr	r3, [r3, #0]
 802ad76:	0fdb      	lsrs	r3, r3, #31
 802ad78:	f003 0301 	and.w	r3, r3, #1
 802ad7c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802ad7e:	687b      	ldr	r3, [r7, #4]
 802ad80:	689b      	ldr	r3, [r3, #8]
 802ad82:	f003 0320 	and.w	r3, r3, #32
 802ad86:	2b20      	cmp	r3, #32
 802ad88:	d104      	bne.n	802ad94 <USB_HC_Halt+0x5a>
 802ad8a:	693b      	ldr	r3, [r7, #16]
 802ad8c:	2b00      	cmp	r3, #0
 802ad8e:	d101      	bne.n	802ad94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802ad90:	2300      	movs	r3, #0
 802ad92:	e0c8      	b.n	802af26 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802ad94:	697b      	ldr	r3, [r7, #20]
 802ad96:	2b00      	cmp	r3, #0
 802ad98:	d002      	beq.n	802ada0 <USB_HC_Halt+0x66>
 802ad9a:	697b      	ldr	r3, [r7, #20]
 802ad9c:	2b02      	cmp	r3, #2
 802ad9e:	d163      	bne.n	802ae68 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802ada0:	69bb      	ldr	r3, [r7, #24]
 802ada2:	015a      	lsls	r2, r3, #5
 802ada4:	69fb      	ldr	r3, [r7, #28]
 802ada6:	4413      	add	r3, r2
 802ada8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802adac:	681b      	ldr	r3, [r3, #0]
 802adae:	69ba      	ldr	r2, [r7, #24]
 802adb0:	0151      	lsls	r1, r2, #5
 802adb2:	69fa      	ldr	r2, [r7, #28]
 802adb4:	440a      	add	r2, r1
 802adb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802adba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802adbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802adc0:	687b      	ldr	r3, [r7, #4]
 802adc2:	689b      	ldr	r3, [r3, #8]
 802adc4:	f003 0320 	and.w	r3, r3, #32
 802adc8:	2b00      	cmp	r3, #0
 802adca:	f040 80ab 	bne.w	802af24 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802adce:	687b      	ldr	r3, [r7, #4]
 802add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802add2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802add6:	2b00      	cmp	r3, #0
 802add8:	d133      	bne.n	802ae42 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802adda:	69bb      	ldr	r3, [r7, #24]
 802addc:	015a      	lsls	r2, r3, #5
 802adde:	69fb      	ldr	r3, [r7, #28]
 802ade0:	4413      	add	r3, r2
 802ade2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ade6:	681b      	ldr	r3, [r3, #0]
 802ade8:	69ba      	ldr	r2, [r7, #24]
 802adea:	0151      	lsls	r1, r2, #5
 802adec:	69fa      	ldr	r2, [r7, #28]
 802adee:	440a      	add	r2, r1
 802adf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802adf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802adf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802adfa:	69bb      	ldr	r3, [r7, #24]
 802adfc:	015a      	lsls	r2, r3, #5
 802adfe:	69fb      	ldr	r3, [r7, #28]
 802ae00:	4413      	add	r3, r2
 802ae02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae06:	681b      	ldr	r3, [r3, #0]
 802ae08:	69ba      	ldr	r2, [r7, #24]
 802ae0a:	0151      	lsls	r1, r2, #5
 802ae0c:	69fa      	ldr	r2, [r7, #28]
 802ae0e:	440a      	add	r2, r1
 802ae10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ae14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ae18:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802ae1a:	68fb      	ldr	r3, [r7, #12]
 802ae1c:	3301      	adds	r3, #1
 802ae1e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802ae20:	68fb      	ldr	r3, [r7, #12]
 802ae22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ae26:	d81d      	bhi.n	802ae64 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ae28:	69bb      	ldr	r3, [r7, #24]
 802ae2a:	015a      	lsls	r2, r3, #5
 802ae2c:	69fb      	ldr	r3, [r7, #28]
 802ae2e:	4413      	add	r3, r2
 802ae30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae34:	681b      	ldr	r3, [r3, #0]
 802ae36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ae3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ae3e:	d0ec      	beq.n	802ae1a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ae40:	e070      	b.n	802af24 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802ae42:	69bb      	ldr	r3, [r7, #24]
 802ae44:	015a      	lsls	r2, r3, #5
 802ae46:	69fb      	ldr	r3, [r7, #28]
 802ae48:	4413      	add	r3, r2
 802ae4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae4e:	681b      	ldr	r3, [r3, #0]
 802ae50:	69ba      	ldr	r2, [r7, #24]
 802ae52:	0151      	lsls	r1, r2, #5
 802ae54:	69fa      	ldr	r2, [r7, #28]
 802ae56:	440a      	add	r2, r1
 802ae58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ae5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802ae60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ae62:	e05f      	b.n	802af24 <USB_HC_Halt+0x1ea>
            break;
 802ae64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802ae66:	e05d      	b.n	802af24 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802ae68:	69bb      	ldr	r3, [r7, #24]
 802ae6a:	015a      	lsls	r2, r3, #5
 802ae6c:	69fb      	ldr	r3, [r7, #28]
 802ae6e:	4413      	add	r3, r2
 802ae70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ae74:	681b      	ldr	r3, [r3, #0]
 802ae76:	69ba      	ldr	r2, [r7, #24]
 802ae78:	0151      	lsls	r1, r2, #5
 802ae7a:	69fa      	ldr	r2, [r7, #28]
 802ae7c:	440a      	add	r2, r1
 802ae7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802ae82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802ae86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802ae88:	69fb      	ldr	r3, [r7, #28]
 802ae8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae8e:	691b      	ldr	r3, [r3, #16]
 802ae90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802ae94:	2b00      	cmp	r3, #0
 802ae96:	d133      	bne.n	802af00 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802ae98:	69bb      	ldr	r3, [r7, #24]
 802ae9a:	015a      	lsls	r2, r3, #5
 802ae9c:	69fb      	ldr	r3, [r7, #28]
 802ae9e:	4413      	add	r3, r2
 802aea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aea4:	681b      	ldr	r3, [r3, #0]
 802aea6:	69ba      	ldr	r2, [r7, #24]
 802aea8:	0151      	lsls	r1, r2, #5
 802aeaa:	69fa      	ldr	r2, [r7, #28]
 802aeac:	440a      	add	r2, r1
 802aeae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aeb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802aeb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802aeb8:	69bb      	ldr	r3, [r7, #24]
 802aeba:	015a      	lsls	r2, r3, #5
 802aebc:	69fb      	ldr	r3, [r7, #28]
 802aebe:	4413      	add	r3, r2
 802aec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aec4:	681b      	ldr	r3, [r3, #0]
 802aec6:	69ba      	ldr	r2, [r7, #24]
 802aec8:	0151      	lsls	r1, r2, #5
 802aeca:	69fa      	ldr	r2, [r7, #28]
 802aecc:	440a      	add	r2, r1
 802aece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802aed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802aed6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802aed8:	68fb      	ldr	r3, [r7, #12]
 802aeda:	3301      	adds	r3, #1
 802aedc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802aede:	68fb      	ldr	r3, [r7, #12]
 802aee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802aee4:	d81d      	bhi.n	802af22 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802aee6:	69bb      	ldr	r3, [r7, #24]
 802aee8:	015a      	lsls	r2, r3, #5
 802aeea:	69fb      	ldr	r3, [r7, #28]
 802aeec:	4413      	add	r3, r2
 802aeee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aef2:	681b      	ldr	r3, [r3, #0]
 802aef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802aef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802aefc:	d0ec      	beq.n	802aed8 <USB_HC_Halt+0x19e>
 802aefe:	e011      	b.n	802af24 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802af00:	69bb      	ldr	r3, [r7, #24]
 802af02:	015a      	lsls	r2, r3, #5
 802af04:	69fb      	ldr	r3, [r7, #28]
 802af06:	4413      	add	r3, r2
 802af08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af0c:	681b      	ldr	r3, [r3, #0]
 802af0e:	69ba      	ldr	r2, [r7, #24]
 802af10:	0151      	lsls	r1, r2, #5
 802af12:	69fa      	ldr	r2, [r7, #28]
 802af14:	440a      	add	r2, r1
 802af16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802af1e:	6013      	str	r3, [r2, #0]
 802af20:	e000      	b.n	802af24 <USB_HC_Halt+0x1ea>
          break;
 802af22:	bf00      	nop
    }
  }

  return HAL_OK;
 802af24:	2300      	movs	r3, #0
}
 802af26:	4618      	mov	r0, r3
 802af28:	3724      	adds	r7, #36	; 0x24
 802af2a:	46bd      	mov	sp, r7
 802af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802af30:	4770      	bx	lr
	...

0802af34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802af34:	b480      	push	{r7}
 802af36:	b087      	sub	sp, #28
 802af38:	af00      	add	r7, sp, #0
 802af3a:	6078      	str	r0, [r7, #4]
 802af3c:	460b      	mov	r3, r1
 802af3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802af40:	687b      	ldr	r3, [r7, #4]
 802af42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802af44:	78fb      	ldrb	r3, [r7, #3]
 802af46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802af48:	2301      	movs	r3, #1
 802af4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802af4c:	68fb      	ldr	r3, [r7, #12]
 802af4e:	04da      	lsls	r2, r3, #19
 802af50:	4b15      	ldr	r3, [pc, #84]	; (802afa8 <USB_DoPing+0x74>)
 802af52:	4013      	ands	r3, r2
 802af54:	693a      	ldr	r2, [r7, #16]
 802af56:	0151      	lsls	r1, r2, #5
 802af58:	697a      	ldr	r2, [r7, #20]
 802af5a:	440a      	add	r2, r1
 802af5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802af60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802af64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802af66:	693b      	ldr	r3, [r7, #16]
 802af68:	015a      	lsls	r2, r3, #5
 802af6a:	697b      	ldr	r3, [r7, #20]
 802af6c:	4413      	add	r3, r2
 802af6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af72:	681b      	ldr	r3, [r3, #0]
 802af74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802af76:	68bb      	ldr	r3, [r7, #8]
 802af78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802af7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802af7e:	68bb      	ldr	r3, [r7, #8]
 802af80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802af84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802af86:	693b      	ldr	r3, [r7, #16]
 802af88:	015a      	lsls	r2, r3, #5
 802af8a:	697b      	ldr	r3, [r7, #20]
 802af8c:	4413      	add	r3, r2
 802af8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af92:	461a      	mov	r2, r3
 802af94:	68bb      	ldr	r3, [r7, #8]
 802af96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802af98:	2300      	movs	r3, #0
}
 802af9a:	4618      	mov	r0, r3
 802af9c:	371c      	adds	r7, #28
 802af9e:	46bd      	mov	sp, r7
 802afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802afa4:	4770      	bx	lr
 802afa6:	bf00      	nop
 802afa8:	1ff80000 	.word	0x1ff80000

0802afac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802afac:	b580      	push	{r7, lr}
 802afae:	b088      	sub	sp, #32
 802afb0:	af00      	add	r7, sp, #0
 802afb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802afb4:	2300      	movs	r3, #0
 802afb6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802afb8:	687b      	ldr	r3, [r7, #4]
 802afba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802afbc:	2300      	movs	r3, #0
 802afbe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802afc0:	6878      	ldr	r0, [r7, #4]
 802afc2:	f7ff f911 	bl	802a1e8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802afc6:	2110      	movs	r1, #16
 802afc8:	6878      	ldr	r0, [r7, #4]
 802afca:	f7ff f96b 	bl	802a2a4 <USB_FlushTxFifo>
 802afce:	4603      	mov	r3, r0
 802afd0:	2b00      	cmp	r3, #0
 802afd2:	d001      	beq.n	802afd8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802afd4:	2301      	movs	r3, #1
 802afd6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802afd8:	6878      	ldr	r0, [r7, #4]
 802afda:	f7ff f997 	bl	802a30c <USB_FlushRxFifo>
 802afde:	4603      	mov	r3, r0
 802afe0:	2b00      	cmp	r3, #0
 802afe2:	d001      	beq.n	802afe8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802afe4:	2301      	movs	r3, #1
 802afe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802afe8:	2300      	movs	r3, #0
 802afea:	61bb      	str	r3, [r7, #24]
 802afec:	e01f      	b.n	802b02e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802afee:	69bb      	ldr	r3, [r7, #24]
 802aff0:	015a      	lsls	r2, r3, #5
 802aff2:	697b      	ldr	r3, [r7, #20]
 802aff4:	4413      	add	r3, r2
 802aff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802affa:	681b      	ldr	r3, [r3, #0]
 802affc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802affe:	693b      	ldr	r3, [r7, #16]
 802b000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b004:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b006:	693b      	ldr	r3, [r7, #16]
 802b008:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b00c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b00e:	693b      	ldr	r3, [r7, #16]
 802b010:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b014:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b016:	69bb      	ldr	r3, [r7, #24]
 802b018:	015a      	lsls	r2, r3, #5
 802b01a:	697b      	ldr	r3, [r7, #20]
 802b01c:	4413      	add	r3, r2
 802b01e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b022:	461a      	mov	r2, r3
 802b024:	693b      	ldr	r3, [r7, #16]
 802b026:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b028:	69bb      	ldr	r3, [r7, #24]
 802b02a:	3301      	adds	r3, #1
 802b02c:	61bb      	str	r3, [r7, #24]
 802b02e:	69bb      	ldr	r3, [r7, #24]
 802b030:	2b0f      	cmp	r3, #15
 802b032:	d9dc      	bls.n	802afee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b034:	2300      	movs	r3, #0
 802b036:	61bb      	str	r3, [r7, #24]
 802b038:	e034      	b.n	802b0a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b03a:	69bb      	ldr	r3, [r7, #24]
 802b03c:	015a      	lsls	r2, r3, #5
 802b03e:	697b      	ldr	r3, [r7, #20]
 802b040:	4413      	add	r3, r2
 802b042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b046:	681b      	ldr	r3, [r3, #0]
 802b048:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b04a:	693b      	ldr	r3, [r7, #16]
 802b04c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b050:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b052:	693b      	ldr	r3, [r7, #16]
 802b054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b058:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b05a:	693b      	ldr	r3, [r7, #16]
 802b05c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b060:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b062:	69bb      	ldr	r3, [r7, #24]
 802b064:	015a      	lsls	r2, r3, #5
 802b066:	697b      	ldr	r3, [r7, #20]
 802b068:	4413      	add	r3, r2
 802b06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b06e:	461a      	mov	r2, r3
 802b070:	693b      	ldr	r3, [r7, #16]
 802b072:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802b074:	68fb      	ldr	r3, [r7, #12]
 802b076:	3301      	adds	r3, #1
 802b078:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802b07a:	68fb      	ldr	r3, [r7, #12]
 802b07c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b080:	d80c      	bhi.n	802b09c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b082:	69bb      	ldr	r3, [r7, #24]
 802b084:	015a      	lsls	r2, r3, #5
 802b086:	697b      	ldr	r3, [r7, #20]
 802b088:	4413      	add	r3, r2
 802b08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b08e:	681b      	ldr	r3, [r3, #0]
 802b090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b098:	d0ec      	beq.n	802b074 <USB_StopHost+0xc8>
 802b09a:	e000      	b.n	802b09e <USB_StopHost+0xf2>
        break;
 802b09c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802b09e:	69bb      	ldr	r3, [r7, #24]
 802b0a0:	3301      	adds	r3, #1
 802b0a2:	61bb      	str	r3, [r7, #24]
 802b0a4:	69bb      	ldr	r3, [r7, #24]
 802b0a6:	2b0f      	cmp	r3, #15
 802b0a8:	d9c7      	bls.n	802b03a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802b0aa:	697b      	ldr	r3, [r7, #20]
 802b0ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0b0:	461a      	mov	r2, r3
 802b0b2:	f04f 33ff 	mov.w	r3, #4294967295
 802b0b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802b0b8:	687b      	ldr	r3, [r7, #4]
 802b0ba:	f04f 32ff 	mov.w	r2, #4294967295
 802b0be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802b0c0:	6878      	ldr	r0, [r7, #4]
 802b0c2:	f7ff f880 	bl	802a1c6 <USB_EnableGlobalInt>

  return ret;
 802b0c6:	7ffb      	ldrb	r3, [r7, #31]
}
 802b0c8:	4618      	mov	r0, r3
 802b0ca:	3720      	adds	r7, #32
 802b0cc:	46bd      	mov	sp, r7
 802b0ce:	bd80      	pop	{r7, pc}

0802b0d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802b0d0:	b590      	push	{r4, r7, lr}
 802b0d2:	b089      	sub	sp, #36	; 0x24
 802b0d4:	af04      	add	r7, sp, #16
 802b0d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802b0d8:	2301      	movs	r3, #1
 802b0da:	2202      	movs	r2, #2
 802b0dc:	2102      	movs	r1, #2
 802b0de:	6878      	ldr	r0, [r7, #4]
 802b0e0:	f000 fc66 	bl	802b9b0 <USBH_FindInterface>
 802b0e4:	4603      	mov	r3, r0
 802b0e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b0e8:	7bfb      	ldrb	r3, [r7, #15]
 802b0ea:	2bff      	cmp	r3, #255	; 0xff
 802b0ec:	d002      	beq.n	802b0f4 <USBH_CDC_InterfaceInit+0x24>
 802b0ee:	7bfb      	ldrb	r3, [r7, #15]
 802b0f0:	2b01      	cmp	r3, #1
 802b0f2:	d901      	bls.n	802b0f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b0f4:	2302      	movs	r3, #2
 802b0f6:	e13d      	b.n	802b374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802b0f8:	7bfb      	ldrb	r3, [r7, #15]
 802b0fa:	4619      	mov	r1, r3
 802b0fc:	6878      	ldr	r0, [r7, #4]
 802b0fe:	f000 fc3b 	bl	802b978 <USBH_SelectInterface>
 802b102:	4603      	mov	r3, r0
 802b104:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802b106:	7bbb      	ldrb	r3, [r7, #14]
 802b108:	2b00      	cmp	r3, #0
 802b10a:	d001      	beq.n	802b110 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802b10c:	2302      	movs	r3, #2
 802b10e:	e131      	b.n	802b374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802b110:	687b      	ldr	r3, [r7, #4]
 802b112:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802b116:	2050      	movs	r0, #80	; 0x50
 802b118:	f002 fb00 	bl	802d71c <malloc>
 802b11c:	4603      	mov	r3, r0
 802b11e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b120:	687b      	ldr	r3, [r7, #4]
 802b122:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b126:	69db      	ldr	r3, [r3, #28]
 802b128:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802b12a:	68bb      	ldr	r3, [r7, #8]
 802b12c:	2b00      	cmp	r3, #0
 802b12e:	d101      	bne.n	802b134 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802b130:	2302      	movs	r3, #2
 802b132:	e11f      	b.n	802b374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802b134:	2250      	movs	r2, #80	; 0x50
 802b136:	2100      	movs	r1, #0
 802b138:	68b8      	ldr	r0, [r7, #8]
 802b13a:	f002 faff 	bl	802d73c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b13e:	7bfb      	ldrb	r3, [r7, #15]
 802b140:	687a      	ldr	r2, [r7, #4]
 802b142:	211a      	movs	r1, #26
 802b144:	fb01 f303 	mul.w	r3, r1, r3
 802b148:	4413      	add	r3, r2
 802b14a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b14e:	781b      	ldrb	r3, [r3, #0]
 802b150:	b25b      	sxtb	r3, r3
 802b152:	2b00      	cmp	r3, #0
 802b154:	da15      	bge.n	802b182 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b156:	7bfb      	ldrb	r3, [r7, #15]
 802b158:	687a      	ldr	r2, [r7, #4]
 802b15a:	211a      	movs	r1, #26
 802b15c:	fb01 f303 	mul.w	r3, r1, r3
 802b160:	4413      	add	r3, r2
 802b162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b166:	781a      	ldrb	r2, [r3, #0]
 802b168:	68bb      	ldr	r3, [r7, #8]
 802b16a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b16c:	7bfb      	ldrb	r3, [r7, #15]
 802b16e:	687a      	ldr	r2, [r7, #4]
 802b170:	211a      	movs	r1, #26
 802b172:	fb01 f303 	mul.w	r3, r1, r3
 802b176:	4413      	add	r3, r2
 802b178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b17c:	881a      	ldrh	r2, [r3, #0]
 802b17e:	68bb      	ldr	r3, [r7, #8]
 802b180:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802b182:	68bb      	ldr	r3, [r7, #8]
 802b184:	785b      	ldrb	r3, [r3, #1]
 802b186:	4619      	mov	r1, r3
 802b188:	6878      	ldr	r0, [r7, #4]
 802b18a:	f001 ff2c 	bl	802cfe6 <USBH_AllocPipe>
 802b18e:	4603      	mov	r3, r0
 802b190:	461a      	mov	r2, r3
 802b192:	68bb      	ldr	r3, [r7, #8]
 802b194:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802b196:	68bb      	ldr	r3, [r7, #8]
 802b198:	7819      	ldrb	r1, [r3, #0]
 802b19a:	68bb      	ldr	r3, [r7, #8]
 802b19c:	7858      	ldrb	r0, [r3, #1]
 802b19e:	687b      	ldr	r3, [r7, #4]
 802b1a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b1a4:	687b      	ldr	r3, [r7, #4]
 802b1a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b1aa:	68ba      	ldr	r2, [r7, #8]
 802b1ac:	8952      	ldrh	r2, [r2, #10]
 802b1ae:	9202      	str	r2, [sp, #8]
 802b1b0:	2203      	movs	r2, #3
 802b1b2:	9201      	str	r2, [sp, #4]
 802b1b4:	9300      	str	r3, [sp, #0]
 802b1b6:	4623      	mov	r3, r4
 802b1b8:	4602      	mov	r2, r0
 802b1ba:	6878      	ldr	r0, [r7, #4]
 802b1bc:	f001 fee4 	bl	802cf88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802b1c0:	68bb      	ldr	r3, [r7, #8]
 802b1c2:	781b      	ldrb	r3, [r3, #0]
 802b1c4:	2200      	movs	r2, #0
 802b1c6:	4619      	mov	r1, r3
 802b1c8:	6878      	ldr	r0, [r7, #4]
 802b1ca:	f002 f9f9 	bl	802d5c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802b1ce:	2300      	movs	r3, #0
 802b1d0:	2200      	movs	r2, #0
 802b1d2:	210a      	movs	r1, #10
 802b1d4:	6878      	ldr	r0, [r7, #4]
 802b1d6:	f000 fbeb 	bl	802b9b0 <USBH_FindInterface>
 802b1da:	4603      	mov	r3, r0
 802b1dc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b1de:	7bfb      	ldrb	r3, [r7, #15]
 802b1e0:	2bff      	cmp	r3, #255	; 0xff
 802b1e2:	d002      	beq.n	802b1ea <USBH_CDC_InterfaceInit+0x11a>
 802b1e4:	7bfb      	ldrb	r3, [r7, #15]
 802b1e6:	2b01      	cmp	r3, #1
 802b1e8:	d901      	bls.n	802b1ee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b1ea:	2302      	movs	r3, #2
 802b1ec:	e0c2      	b.n	802b374 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b1ee:	7bfb      	ldrb	r3, [r7, #15]
 802b1f0:	687a      	ldr	r2, [r7, #4]
 802b1f2:	211a      	movs	r1, #26
 802b1f4:	fb01 f303 	mul.w	r3, r1, r3
 802b1f8:	4413      	add	r3, r2
 802b1fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b1fe:	781b      	ldrb	r3, [r3, #0]
 802b200:	b25b      	sxtb	r3, r3
 802b202:	2b00      	cmp	r3, #0
 802b204:	da16      	bge.n	802b234 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b206:	7bfb      	ldrb	r3, [r7, #15]
 802b208:	687a      	ldr	r2, [r7, #4]
 802b20a:	211a      	movs	r1, #26
 802b20c:	fb01 f303 	mul.w	r3, r1, r3
 802b210:	4413      	add	r3, r2
 802b212:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b216:	781a      	ldrb	r2, [r3, #0]
 802b218:	68bb      	ldr	r3, [r7, #8]
 802b21a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b21c:	7bfb      	ldrb	r3, [r7, #15]
 802b21e:	687a      	ldr	r2, [r7, #4]
 802b220:	211a      	movs	r1, #26
 802b222:	fb01 f303 	mul.w	r3, r1, r3
 802b226:	4413      	add	r3, r2
 802b228:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b22c:	881a      	ldrh	r2, [r3, #0]
 802b22e:	68bb      	ldr	r3, [r7, #8]
 802b230:	835a      	strh	r2, [r3, #26]
 802b232:	e015      	b.n	802b260 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802b234:	7bfb      	ldrb	r3, [r7, #15]
 802b236:	687a      	ldr	r2, [r7, #4]
 802b238:	211a      	movs	r1, #26
 802b23a:	fb01 f303 	mul.w	r3, r1, r3
 802b23e:	4413      	add	r3, r2
 802b240:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802b244:	781a      	ldrb	r2, [r3, #0]
 802b246:	68bb      	ldr	r3, [r7, #8]
 802b248:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802b24a:	7bfb      	ldrb	r3, [r7, #15]
 802b24c:	687a      	ldr	r2, [r7, #4]
 802b24e:	211a      	movs	r1, #26
 802b250:	fb01 f303 	mul.w	r3, r1, r3
 802b254:	4413      	add	r3, r2
 802b256:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802b25a:	881a      	ldrh	r2, [r3, #0]
 802b25c:	68bb      	ldr	r3, [r7, #8]
 802b25e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802b260:	7bfb      	ldrb	r3, [r7, #15]
 802b262:	687a      	ldr	r2, [r7, #4]
 802b264:	211a      	movs	r1, #26
 802b266:	fb01 f303 	mul.w	r3, r1, r3
 802b26a:	4413      	add	r3, r2
 802b26c:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b270:	781b      	ldrb	r3, [r3, #0]
 802b272:	b25b      	sxtb	r3, r3
 802b274:	2b00      	cmp	r3, #0
 802b276:	da16      	bge.n	802b2a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b278:	7bfb      	ldrb	r3, [r7, #15]
 802b27a:	687a      	ldr	r2, [r7, #4]
 802b27c:	211a      	movs	r1, #26
 802b27e:	fb01 f303 	mul.w	r3, r1, r3
 802b282:	4413      	add	r3, r2
 802b284:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b288:	781a      	ldrb	r2, [r3, #0]
 802b28a:	68bb      	ldr	r3, [r7, #8]
 802b28c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b28e:	7bfb      	ldrb	r3, [r7, #15]
 802b290:	687a      	ldr	r2, [r7, #4]
 802b292:	211a      	movs	r1, #26
 802b294:	fb01 f303 	mul.w	r3, r1, r3
 802b298:	4413      	add	r3, r2
 802b29a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b29e:	881a      	ldrh	r2, [r3, #0]
 802b2a0:	68bb      	ldr	r3, [r7, #8]
 802b2a2:	835a      	strh	r2, [r3, #26]
 802b2a4:	e015      	b.n	802b2d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802b2a6:	7bfb      	ldrb	r3, [r7, #15]
 802b2a8:	687a      	ldr	r2, [r7, #4]
 802b2aa:	211a      	movs	r1, #26
 802b2ac:	fb01 f303 	mul.w	r3, r1, r3
 802b2b0:	4413      	add	r3, r2
 802b2b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 802b2b6:	781a      	ldrb	r2, [r3, #0]
 802b2b8:	68bb      	ldr	r3, [r7, #8]
 802b2ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802b2bc:	7bfb      	ldrb	r3, [r7, #15]
 802b2be:	687a      	ldr	r2, [r7, #4]
 802b2c0:	211a      	movs	r1, #26
 802b2c2:	fb01 f303 	mul.w	r3, r1, r3
 802b2c6:	4413      	add	r3, r2
 802b2c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802b2cc:	881a      	ldrh	r2, [r3, #0]
 802b2ce:	68bb      	ldr	r3, [r7, #8]
 802b2d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802b2d2:	68bb      	ldr	r3, [r7, #8]
 802b2d4:	7b9b      	ldrb	r3, [r3, #14]
 802b2d6:	4619      	mov	r1, r3
 802b2d8:	6878      	ldr	r0, [r7, #4]
 802b2da:	f001 fe84 	bl	802cfe6 <USBH_AllocPipe>
 802b2de:	4603      	mov	r3, r0
 802b2e0:	461a      	mov	r2, r3
 802b2e2:	68bb      	ldr	r3, [r7, #8]
 802b2e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802b2e6:	68bb      	ldr	r3, [r7, #8]
 802b2e8:	7bdb      	ldrb	r3, [r3, #15]
 802b2ea:	4619      	mov	r1, r3
 802b2ec:	6878      	ldr	r0, [r7, #4]
 802b2ee:	f001 fe7a 	bl	802cfe6 <USBH_AllocPipe>
 802b2f2:	4603      	mov	r3, r0
 802b2f4:	461a      	mov	r2, r3
 802b2f6:	68bb      	ldr	r3, [r7, #8]
 802b2f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802b2fa:	68bb      	ldr	r3, [r7, #8]
 802b2fc:	7b59      	ldrb	r1, [r3, #13]
 802b2fe:	68bb      	ldr	r3, [r7, #8]
 802b300:	7b98      	ldrb	r0, [r3, #14]
 802b302:	687b      	ldr	r3, [r7, #4]
 802b304:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b308:	687b      	ldr	r3, [r7, #4]
 802b30a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b30e:	68ba      	ldr	r2, [r7, #8]
 802b310:	8b12      	ldrh	r2, [r2, #24]
 802b312:	9202      	str	r2, [sp, #8]
 802b314:	2202      	movs	r2, #2
 802b316:	9201      	str	r2, [sp, #4]
 802b318:	9300      	str	r3, [sp, #0]
 802b31a:	4623      	mov	r3, r4
 802b31c:	4602      	mov	r2, r0
 802b31e:	6878      	ldr	r0, [r7, #4]
 802b320:	f001 fe32 	bl	802cf88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802b324:	68bb      	ldr	r3, [r7, #8]
 802b326:	7b19      	ldrb	r1, [r3, #12]
 802b328:	68bb      	ldr	r3, [r7, #8]
 802b32a:	7bd8      	ldrb	r0, [r3, #15]
 802b32c:	687b      	ldr	r3, [r7, #4]
 802b32e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802b332:	687b      	ldr	r3, [r7, #4]
 802b334:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802b338:	68ba      	ldr	r2, [r7, #8]
 802b33a:	8b52      	ldrh	r2, [r2, #26]
 802b33c:	9202      	str	r2, [sp, #8]
 802b33e:	2202      	movs	r2, #2
 802b340:	9201      	str	r2, [sp, #4]
 802b342:	9300      	str	r3, [sp, #0]
 802b344:	4623      	mov	r3, r4
 802b346:	4602      	mov	r2, r0
 802b348:	6878      	ldr	r0, [r7, #4]
 802b34a:	f001 fe1d 	bl	802cf88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802b34e:	68bb      	ldr	r3, [r7, #8]
 802b350:	2200      	movs	r2, #0
 802b352:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802b356:	68bb      	ldr	r3, [r7, #8]
 802b358:	7b5b      	ldrb	r3, [r3, #13]
 802b35a:	2200      	movs	r2, #0
 802b35c:	4619      	mov	r1, r3
 802b35e:	6878      	ldr	r0, [r7, #4]
 802b360:	f002 f92e 	bl	802d5c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802b364:	68bb      	ldr	r3, [r7, #8]
 802b366:	7b1b      	ldrb	r3, [r3, #12]
 802b368:	2200      	movs	r2, #0
 802b36a:	4619      	mov	r1, r3
 802b36c:	6878      	ldr	r0, [r7, #4]
 802b36e:	f002 f927 	bl	802d5c0 <USBH_LL_SetToggle>

  return USBH_OK;
 802b372:	2300      	movs	r3, #0
}
 802b374:	4618      	mov	r0, r3
 802b376:	3714      	adds	r7, #20
 802b378:	46bd      	mov	sp, r7
 802b37a:	bd90      	pop	{r4, r7, pc}

0802b37c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802b37c:	b580      	push	{r7, lr}
 802b37e:	b084      	sub	sp, #16
 802b380:	af00      	add	r7, sp, #0
 802b382:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b384:	687b      	ldr	r3, [r7, #4]
 802b386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b38a:	69db      	ldr	r3, [r3, #28]
 802b38c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802b38e:	68fb      	ldr	r3, [r7, #12]
 802b390:	781b      	ldrb	r3, [r3, #0]
 802b392:	2b00      	cmp	r3, #0
 802b394:	d00e      	beq.n	802b3b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b396:	68fb      	ldr	r3, [r7, #12]
 802b398:	781b      	ldrb	r3, [r3, #0]
 802b39a:	4619      	mov	r1, r3
 802b39c:	6878      	ldr	r0, [r7, #4]
 802b39e:	f001 fe12 	bl	802cfc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802b3a2:	68fb      	ldr	r3, [r7, #12]
 802b3a4:	781b      	ldrb	r3, [r3, #0]
 802b3a6:	4619      	mov	r1, r3
 802b3a8:	6878      	ldr	r0, [r7, #4]
 802b3aa:	f001 fe3d 	bl	802d028 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802b3ae:	68fb      	ldr	r3, [r7, #12]
 802b3b0:	2200      	movs	r2, #0
 802b3b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802b3b4:	68fb      	ldr	r3, [r7, #12]
 802b3b6:	7b1b      	ldrb	r3, [r3, #12]
 802b3b8:	2b00      	cmp	r3, #0
 802b3ba:	d00e      	beq.n	802b3da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802b3bc:	68fb      	ldr	r3, [r7, #12]
 802b3be:	7b1b      	ldrb	r3, [r3, #12]
 802b3c0:	4619      	mov	r1, r3
 802b3c2:	6878      	ldr	r0, [r7, #4]
 802b3c4:	f001 fdff 	bl	802cfc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802b3c8:	68fb      	ldr	r3, [r7, #12]
 802b3ca:	7b1b      	ldrb	r3, [r3, #12]
 802b3cc:	4619      	mov	r1, r3
 802b3ce:	6878      	ldr	r0, [r7, #4]
 802b3d0:	f001 fe2a 	bl	802d028 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802b3d4:	68fb      	ldr	r3, [r7, #12]
 802b3d6:	2200      	movs	r2, #0
 802b3d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802b3da:	68fb      	ldr	r3, [r7, #12]
 802b3dc:	7b5b      	ldrb	r3, [r3, #13]
 802b3de:	2b00      	cmp	r3, #0
 802b3e0:	d00e      	beq.n	802b400 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b3e2:	68fb      	ldr	r3, [r7, #12]
 802b3e4:	7b5b      	ldrb	r3, [r3, #13]
 802b3e6:	4619      	mov	r1, r3
 802b3e8:	6878      	ldr	r0, [r7, #4]
 802b3ea:	f001 fdec 	bl	802cfc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802b3ee:	68fb      	ldr	r3, [r7, #12]
 802b3f0:	7b5b      	ldrb	r3, [r3, #13]
 802b3f2:	4619      	mov	r1, r3
 802b3f4:	6878      	ldr	r0, [r7, #4]
 802b3f6:	f001 fe17 	bl	802d028 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802b3fa:	68fb      	ldr	r3, [r7, #12]
 802b3fc:	2200      	movs	r2, #0
 802b3fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802b400:	687b      	ldr	r3, [r7, #4]
 802b402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b406:	69db      	ldr	r3, [r3, #28]
 802b408:	2b00      	cmp	r3, #0
 802b40a:	d00b      	beq.n	802b424 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802b40c:	687b      	ldr	r3, [r7, #4]
 802b40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b412:	69db      	ldr	r3, [r3, #28]
 802b414:	4618      	mov	r0, r3
 802b416:	f002 f989 	bl	802d72c <free>
    phost->pActiveClass->pData = 0U;
 802b41a:	687b      	ldr	r3, [r7, #4]
 802b41c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b420:	2200      	movs	r2, #0
 802b422:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802b424:	2300      	movs	r3, #0
}
 802b426:	4618      	mov	r0, r3
 802b428:	3710      	adds	r7, #16
 802b42a:	46bd      	mov	sp, r7
 802b42c:	bd80      	pop	{r7, pc}

0802b42e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802b42e:	b580      	push	{r7, lr}
 802b430:	b084      	sub	sp, #16
 802b432:	af00      	add	r7, sp, #0
 802b434:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b436:	687b      	ldr	r3, [r7, #4]
 802b438:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b43c:	69db      	ldr	r3, [r3, #28]
 802b43e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802b440:	68fb      	ldr	r3, [r7, #12]
 802b442:	3340      	adds	r3, #64	; 0x40
 802b444:	4619      	mov	r1, r3
 802b446:	6878      	ldr	r0, [r7, #4]
 802b448:	f000 f8b1 	bl	802b5ae <GetLineCoding>
 802b44c:	4603      	mov	r3, r0
 802b44e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802b450:	7afb      	ldrb	r3, [r7, #11]
 802b452:	2b00      	cmp	r3, #0
 802b454:	d105      	bne.n	802b462 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802b456:	687b      	ldr	r3, [r7, #4]
 802b458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802b45c:	2102      	movs	r1, #2
 802b45e:	6878      	ldr	r0, [r7, #4]
 802b460:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802b462:	7afb      	ldrb	r3, [r7, #11]
}
 802b464:	4618      	mov	r0, r3
 802b466:	3710      	adds	r7, #16
 802b468:	46bd      	mov	sp, r7
 802b46a:	bd80      	pop	{r7, pc}

0802b46c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802b46c:	b580      	push	{r7, lr}
 802b46e:	b084      	sub	sp, #16
 802b470:	af00      	add	r7, sp, #0
 802b472:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802b474:	2301      	movs	r3, #1
 802b476:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802b478:	2300      	movs	r3, #0
 802b47a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b47c:	687b      	ldr	r3, [r7, #4]
 802b47e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b482:	69db      	ldr	r3, [r3, #28]
 802b484:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802b486:	68bb      	ldr	r3, [r7, #8]
 802b488:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802b48c:	2b04      	cmp	r3, #4
 802b48e:	d877      	bhi.n	802b580 <USBH_CDC_Process+0x114>
 802b490:	a201      	add	r2, pc, #4	; (adr r2, 802b498 <USBH_CDC_Process+0x2c>)
 802b492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b496:	bf00      	nop
 802b498:	0802b4ad 	.word	0x0802b4ad
 802b49c:	0802b4b3 	.word	0x0802b4b3
 802b4a0:	0802b4e3 	.word	0x0802b4e3
 802b4a4:	0802b557 	.word	0x0802b557
 802b4a8:	0802b565 	.word	0x0802b565
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802b4ac:	2300      	movs	r3, #0
 802b4ae:	73fb      	strb	r3, [r7, #15]
      break;
 802b4b0:	e06d      	b.n	802b58e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802b4b2:	68bb      	ldr	r3, [r7, #8]
 802b4b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b4b6:	4619      	mov	r1, r3
 802b4b8:	6878      	ldr	r0, [r7, #4]
 802b4ba:	f000 f897 	bl	802b5ec <SetLineCoding>
 802b4be:	4603      	mov	r3, r0
 802b4c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b4c2:	7bbb      	ldrb	r3, [r7, #14]
 802b4c4:	2b00      	cmp	r3, #0
 802b4c6:	d104      	bne.n	802b4d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802b4c8:	68bb      	ldr	r3, [r7, #8]
 802b4ca:	2202      	movs	r2, #2
 802b4cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b4d0:	e058      	b.n	802b584 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802b4d2:	7bbb      	ldrb	r3, [r7, #14]
 802b4d4:	2b01      	cmp	r3, #1
 802b4d6:	d055      	beq.n	802b584 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b4d8:	68bb      	ldr	r3, [r7, #8]
 802b4da:	2204      	movs	r2, #4
 802b4dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b4e0:	e050      	b.n	802b584 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802b4e2:	68bb      	ldr	r3, [r7, #8]
 802b4e4:	3340      	adds	r3, #64	; 0x40
 802b4e6:	4619      	mov	r1, r3
 802b4e8:	6878      	ldr	r0, [r7, #4]
 802b4ea:	f000 f860 	bl	802b5ae <GetLineCoding>
 802b4ee:	4603      	mov	r3, r0
 802b4f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b4f2:	7bbb      	ldrb	r3, [r7, #14]
 802b4f4:	2b00      	cmp	r3, #0
 802b4f6:	d126      	bne.n	802b546 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802b4f8:	68bb      	ldr	r3, [r7, #8]
 802b4fa:	2200      	movs	r2, #0
 802b4fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b500:	68bb      	ldr	r3, [r7, #8]
 802b502:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802b506:	68bb      	ldr	r3, [r7, #8]
 802b508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b50a:	791b      	ldrb	r3, [r3, #4]
 802b50c:	429a      	cmp	r2, r3
 802b50e:	d13b      	bne.n	802b588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b510:	68bb      	ldr	r3, [r7, #8]
 802b512:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802b516:	68bb      	ldr	r3, [r7, #8]
 802b518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b51a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802b51c:	429a      	cmp	r2, r3
 802b51e:	d133      	bne.n	802b588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b520:	68bb      	ldr	r3, [r7, #8]
 802b522:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802b526:	68bb      	ldr	r3, [r7, #8]
 802b528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b52a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802b52c:	429a      	cmp	r2, r3
 802b52e:	d12b      	bne.n	802b588 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802b530:	68bb      	ldr	r3, [r7, #8]
 802b532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802b534:	68bb      	ldr	r3, [r7, #8]
 802b536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802b538:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802b53a:	429a      	cmp	r2, r3
 802b53c:	d124      	bne.n	802b588 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802b53e:	6878      	ldr	r0, [r7, #4]
 802b540:	f000 f958 	bl	802b7f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802b544:	e020      	b.n	802b588 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802b546:	7bbb      	ldrb	r3, [r7, #14]
 802b548:	2b01      	cmp	r3, #1
 802b54a:	d01d      	beq.n	802b588 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802b54c:	68bb      	ldr	r3, [r7, #8]
 802b54e:	2204      	movs	r2, #4
 802b550:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802b554:	e018      	b.n	802b588 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802b556:	6878      	ldr	r0, [r7, #4]
 802b558:	f000 f867 	bl	802b62a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802b55c:	6878      	ldr	r0, [r7, #4]
 802b55e:	f000 f8da 	bl	802b716 <CDC_ProcessReception>
      break;
 802b562:	e014      	b.n	802b58e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802b564:	2100      	movs	r1, #0
 802b566:	6878      	ldr	r0, [r7, #4]
 802b568:	f000 ffef 	bl	802c54a <USBH_ClrFeature>
 802b56c:	4603      	mov	r3, r0
 802b56e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802b570:	7bbb      	ldrb	r3, [r7, #14]
 802b572:	2b00      	cmp	r3, #0
 802b574:	d10a      	bne.n	802b58c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802b576:	68bb      	ldr	r3, [r7, #8]
 802b578:	2200      	movs	r2, #0
 802b57a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802b57e:	e005      	b.n	802b58c <USBH_CDC_Process+0x120>

    default:
      break;
 802b580:	bf00      	nop
 802b582:	e004      	b.n	802b58e <USBH_CDC_Process+0x122>
      break;
 802b584:	bf00      	nop
 802b586:	e002      	b.n	802b58e <USBH_CDC_Process+0x122>
      break;
 802b588:	bf00      	nop
 802b58a:	e000      	b.n	802b58e <USBH_CDC_Process+0x122>
      break;
 802b58c:	bf00      	nop

  }

  return status;
 802b58e:	7bfb      	ldrb	r3, [r7, #15]
}
 802b590:	4618      	mov	r0, r3
 802b592:	3710      	adds	r7, #16
 802b594:	46bd      	mov	sp, r7
 802b596:	bd80      	pop	{r7, pc}

0802b598 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802b598:	b480      	push	{r7}
 802b59a:	b083      	sub	sp, #12
 802b59c:	af00      	add	r7, sp, #0
 802b59e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802b5a0:	2300      	movs	r3, #0
}
 802b5a2:	4618      	mov	r0, r3
 802b5a4:	370c      	adds	r7, #12
 802b5a6:	46bd      	mov	sp, r7
 802b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5ac:	4770      	bx	lr

0802b5ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802b5ae:	b580      	push	{r7, lr}
 802b5b0:	b082      	sub	sp, #8
 802b5b2:	af00      	add	r7, sp, #0
 802b5b4:	6078      	str	r0, [r7, #4]
 802b5b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802b5b8:	687b      	ldr	r3, [r7, #4]
 802b5ba:	22a1      	movs	r2, #161	; 0xa1
 802b5bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802b5be:	687b      	ldr	r3, [r7, #4]
 802b5c0:	2221      	movs	r2, #33	; 0x21
 802b5c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b5c4:	687b      	ldr	r3, [r7, #4]
 802b5c6:	2200      	movs	r2, #0
 802b5c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802b5ca:	687b      	ldr	r3, [r7, #4]
 802b5cc:	2200      	movs	r2, #0
 802b5ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b5d0:	687b      	ldr	r3, [r7, #4]
 802b5d2:	2207      	movs	r2, #7
 802b5d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b5d6:	683b      	ldr	r3, [r7, #0]
 802b5d8:	2207      	movs	r2, #7
 802b5da:	4619      	mov	r1, r3
 802b5dc:	6878      	ldr	r0, [r7, #4]
 802b5de:	f001 fa81 	bl	802cae4 <USBH_CtlReq>
 802b5e2:	4603      	mov	r3, r0
}
 802b5e4:	4618      	mov	r0, r3
 802b5e6:	3708      	adds	r7, #8
 802b5e8:	46bd      	mov	sp, r7
 802b5ea:	bd80      	pop	{r7, pc}

0802b5ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802b5ec:	b580      	push	{r7, lr}
 802b5ee:	b082      	sub	sp, #8
 802b5f0:	af00      	add	r7, sp, #0
 802b5f2:	6078      	str	r0, [r7, #4]
 802b5f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802b5f6:	687b      	ldr	r3, [r7, #4]
 802b5f8:	2221      	movs	r2, #33	; 0x21
 802b5fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802b5fc:	687b      	ldr	r3, [r7, #4]
 802b5fe:	2220      	movs	r2, #32
 802b600:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802b602:	687b      	ldr	r3, [r7, #4]
 802b604:	2200      	movs	r2, #0
 802b606:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802b608:	687b      	ldr	r3, [r7, #4]
 802b60a:	2200      	movs	r2, #0
 802b60c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802b60e:	687b      	ldr	r3, [r7, #4]
 802b610:	2207      	movs	r2, #7
 802b612:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802b614:	683b      	ldr	r3, [r7, #0]
 802b616:	2207      	movs	r2, #7
 802b618:	4619      	mov	r1, r3
 802b61a:	6878      	ldr	r0, [r7, #4]
 802b61c:	f001 fa62 	bl	802cae4 <USBH_CtlReq>
 802b620:	4603      	mov	r3, r0
}
 802b622:	4618      	mov	r0, r3
 802b624:	3708      	adds	r7, #8
 802b626:	46bd      	mov	sp, r7
 802b628:	bd80      	pop	{r7, pc}

0802b62a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802b62a:	b580      	push	{r7, lr}
 802b62c:	b086      	sub	sp, #24
 802b62e:	af02      	add	r7, sp, #8
 802b630:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b632:	687b      	ldr	r3, [r7, #4]
 802b634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b638:	69db      	ldr	r3, [r3, #28]
 802b63a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b63c:	2300      	movs	r3, #0
 802b63e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802b640:	68fb      	ldr	r3, [r7, #12]
 802b642:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802b646:	2b01      	cmp	r3, #1
 802b648:	d002      	beq.n	802b650 <CDC_ProcessTransmission+0x26>
 802b64a:	2b02      	cmp	r3, #2
 802b64c:	d023      	beq.n	802b696 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802b64e:	e05e      	b.n	802b70e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b650:	68fb      	ldr	r3, [r7, #12]
 802b652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b654:	68fa      	ldr	r2, [r7, #12]
 802b656:	8b12      	ldrh	r2, [r2, #24]
 802b658:	4293      	cmp	r3, r2
 802b65a:	d90b      	bls.n	802b674 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802b65c:	68fb      	ldr	r3, [r7, #12]
 802b65e:	69d9      	ldr	r1, [r3, #28]
 802b660:	68fb      	ldr	r3, [r7, #12]
 802b662:	8b1a      	ldrh	r2, [r3, #24]
 802b664:	68fb      	ldr	r3, [r7, #12]
 802b666:	7b5b      	ldrb	r3, [r3, #13]
 802b668:	2001      	movs	r0, #1
 802b66a:	9000      	str	r0, [sp, #0]
 802b66c:	6878      	ldr	r0, [r7, #4]
 802b66e:	f001 fc48 	bl	802cf02 <USBH_BulkSendData>
 802b672:	e00b      	b.n	802b68c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802b674:	68fb      	ldr	r3, [r7, #12]
 802b676:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802b678:	68fb      	ldr	r3, [r7, #12]
 802b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802b67c:	b29a      	uxth	r2, r3
 802b67e:	68fb      	ldr	r3, [r7, #12]
 802b680:	7b5b      	ldrb	r3, [r3, #13]
 802b682:	2001      	movs	r0, #1
 802b684:	9000      	str	r0, [sp, #0]
 802b686:	6878      	ldr	r0, [r7, #4]
 802b688:	f001 fc3b 	bl	802cf02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802b68c:	68fb      	ldr	r3, [r7, #12]
 802b68e:	2202      	movs	r2, #2
 802b690:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b694:	e03b      	b.n	802b70e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802b696:	68fb      	ldr	r3, [r7, #12]
 802b698:	7b5b      	ldrb	r3, [r3, #13]
 802b69a:	4619      	mov	r1, r3
 802b69c:	6878      	ldr	r0, [r7, #4]
 802b69e:	f001 ff65 	bl	802d56c <USBH_LL_GetURBState>
 802b6a2:	4603      	mov	r3, r0
 802b6a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802b6a6:	7afb      	ldrb	r3, [r7, #11]
 802b6a8:	2b01      	cmp	r3, #1
 802b6aa:	d128      	bne.n	802b6fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802b6ac:	68fb      	ldr	r3, [r7, #12]
 802b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b6b0:	68fa      	ldr	r2, [r7, #12]
 802b6b2:	8b12      	ldrh	r2, [r2, #24]
 802b6b4:	4293      	cmp	r3, r2
 802b6b6:	d90e      	bls.n	802b6d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802b6b8:	68fb      	ldr	r3, [r7, #12]
 802b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b6bc:	68fa      	ldr	r2, [r7, #12]
 802b6be:	8b12      	ldrh	r2, [r2, #24]
 802b6c0:	1a9a      	subs	r2, r3, r2
 802b6c2:	68fb      	ldr	r3, [r7, #12]
 802b6c4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802b6c6:	68fb      	ldr	r3, [r7, #12]
 802b6c8:	69db      	ldr	r3, [r3, #28]
 802b6ca:	68fa      	ldr	r2, [r7, #12]
 802b6cc:	8b12      	ldrh	r2, [r2, #24]
 802b6ce:	441a      	add	r2, r3
 802b6d0:	68fb      	ldr	r3, [r7, #12]
 802b6d2:	61da      	str	r2, [r3, #28]
 802b6d4:	e002      	b.n	802b6dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802b6d6:	68fb      	ldr	r3, [r7, #12]
 802b6d8:	2200      	movs	r2, #0
 802b6da:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b6e0:	2b00      	cmp	r3, #0
 802b6e2:	d004      	beq.n	802b6ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b6e4:	68fb      	ldr	r3, [r7, #12]
 802b6e6:	2201      	movs	r2, #1
 802b6e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b6ec:	e00e      	b.n	802b70c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802b6ee:	68fb      	ldr	r3, [r7, #12]
 802b6f0:	2200      	movs	r2, #0
 802b6f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802b6f6:	6878      	ldr	r0, [r7, #4]
 802b6f8:	f000 f868 	bl	802b7cc <USBH_CDC_TransmitCallback>
      break;
 802b6fc:	e006      	b.n	802b70c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802b6fe:	7afb      	ldrb	r3, [r7, #11]
 802b700:	2b02      	cmp	r3, #2
 802b702:	d103      	bne.n	802b70c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802b704:	68fb      	ldr	r3, [r7, #12]
 802b706:	2201      	movs	r2, #1
 802b708:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802b70c:	bf00      	nop
  }
}
 802b70e:	bf00      	nop
 802b710:	3710      	adds	r7, #16
 802b712:	46bd      	mov	sp, r7
 802b714:	bd80      	pop	{r7, pc}

0802b716 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802b716:	b580      	push	{r7, lr}
 802b718:	b086      	sub	sp, #24
 802b71a:	af00      	add	r7, sp, #0
 802b71c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b71e:	687b      	ldr	r3, [r7, #4]
 802b720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b724:	69db      	ldr	r3, [r3, #28]
 802b726:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802b728:	2300      	movs	r3, #0
 802b72a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802b72c:	697b      	ldr	r3, [r7, #20]
 802b72e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802b732:	2b03      	cmp	r3, #3
 802b734:	d002      	beq.n	802b73c <CDC_ProcessReception+0x26>
 802b736:	2b04      	cmp	r3, #4
 802b738:	d00e      	beq.n	802b758 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802b73a:	e043      	b.n	802b7c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802b73c:	697b      	ldr	r3, [r7, #20]
 802b73e:	6a19      	ldr	r1, [r3, #32]
 802b740:	697b      	ldr	r3, [r7, #20]
 802b742:	8b5a      	ldrh	r2, [r3, #26]
 802b744:	697b      	ldr	r3, [r7, #20]
 802b746:	7b1b      	ldrb	r3, [r3, #12]
 802b748:	6878      	ldr	r0, [r7, #4]
 802b74a:	f001 fbff 	bl	802cf4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802b74e:	697b      	ldr	r3, [r7, #20]
 802b750:	2204      	movs	r2, #4
 802b752:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b756:	e035      	b.n	802b7c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802b758:	697b      	ldr	r3, [r7, #20]
 802b75a:	7b1b      	ldrb	r3, [r3, #12]
 802b75c:	4619      	mov	r1, r3
 802b75e:	6878      	ldr	r0, [r7, #4]
 802b760:	f001 ff04 	bl	802d56c <USBH_LL_GetURBState>
 802b764:	4603      	mov	r3, r0
 802b766:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802b768:	7cfb      	ldrb	r3, [r7, #19]
 802b76a:	2b01      	cmp	r3, #1
 802b76c:	d129      	bne.n	802b7c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802b76e:	697b      	ldr	r3, [r7, #20]
 802b770:	7b1b      	ldrb	r3, [r3, #12]
 802b772:	4619      	mov	r1, r3
 802b774:	6878      	ldr	r0, [r7, #4]
 802b776:	f001 fe67 	bl	802d448 <USBH_LL_GetLastXferSize>
 802b77a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802b77c:	697b      	ldr	r3, [r7, #20]
 802b77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802b780:	68fa      	ldr	r2, [r7, #12]
 802b782:	429a      	cmp	r2, r3
 802b784:	d016      	beq.n	802b7b4 <CDC_ProcessReception+0x9e>
 802b786:	697b      	ldr	r3, [r7, #20]
 802b788:	8b5b      	ldrh	r3, [r3, #26]
 802b78a:	461a      	mov	r2, r3
 802b78c:	68fb      	ldr	r3, [r7, #12]
 802b78e:	4293      	cmp	r3, r2
 802b790:	d910      	bls.n	802b7b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802b792:	697b      	ldr	r3, [r7, #20]
 802b794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802b796:	68fb      	ldr	r3, [r7, #12]
 802b798:	1ad2      	subs	r2, r2, r3
 802b79a:	697b      	ldr	r3, [r7, #20]
 802b79c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802b79e:	697b      	ldr	r3, [r7, #20]
 802b7a0:	6a1a      	ldr	r2, [r3, #32]
 802b7a2:	68fb      	ldr	r3, [r7, #12]
 802b7a4:	441a      	add	r2, r3
 802b7a6:	697b      	ldr	r3, [r7, #20]
 802b7a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802b7aa:	697b      	ldr	r3, [r7, #20]
 802b7ac:	2203      	movs	r2, #3
 802b7ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802b7b2:	e006      	b.n	802b7c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802b7b4:	697b      	ldr	r3, [r7, #20]
 802b7b6:	2200      	movs	r2, #0
 802b7b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802b7bc:	6878      	ldr	r0, [r7, #4]
 802b7be:	f000 f80f 	bl	802b7e0 <USBH_CDC_ReceiveCallback>
      break;
 802b7c2:	bf00      	nop
  }
}
 802b7c4:	bf00      	nop
 802b7c6:	3718      	adds	r7, #24
 802b7c8:	46bd      	mov	sp, r7
 802b7ca:	bd80      	pop	{r7, pc}

0802b7cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802b7cc:	b480      	push	{r7}
 802b7ce:	b083      	sub	sp, #12
 802b7d0:	af00      	add	r7, sp, #0
 802b7d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b7d4:	bf00      	nop
 802b7d6:	370c      	adds	r7, #12
 802b7d8:	46bd      	mov	sp, r7
 802b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7de:	4770      	bx	lr

0802b7e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802b7e0:	b480      	push	{r7}
 802b7e2:	b083      	sub	sp, #12
 802b7e4:	af00      	add	r7, sp, #0
 802b7e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b7e8:	bf00      	nop
 802b7ea:	370c      	adds	r7, #12
 802b7ec:	46bd      	mov	sp, r7
 802b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7f2:	4770      	bx	lr

0802b7f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802b7f4:	b480      	push	{r7}
 802b7f6:	b083      	sub	sp, #12
 802b7f8:	af00      	add	r7, sp, #0
 802b7fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802b7fc:	bf00      	nop
 802b7fe:	370c      	adds	r7, #12
 802b800:	46bd      	mov	sp, r7
 802b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b806:	4770      	bx	lr

0802b808 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802b808:	b580      	push	{r7, lr}
 802b80a:	b084      	sub	sp, #16
 802b80c:	af00      	add	r7, sp, #0
 802b80e:	60f8      	str	r0, [r7, #12]
 802b810:	60b9      	str	r1, [r7, #8]
 802b812:	4613      	mov	r3, r2
 802b814:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802b816:	68fb      	ldr	r3, [r7, #12]
 802b818:	2b00      	cmp	r3, #0
 802b81a:	d101      	bne.n	802b820 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802b81c:	2302      	movs	r3, #2
 802b81e:	e029      	b.n	802b874 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802b820:	68fb      	ldr	r3, [r7, #12]
 802b822:	79fa      	ldrb	r2, [r7, #7]
 802b824:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802b828:	68fb      	ldr	r3, [r7, #12]
 802b82a:	2200      	movs	r2, #0
 802b82c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802b830:	68fb      	ldr	r3, [r7, #12]
 802b832:	2200      	movs	r2, #0
 802b834:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802b838:	68f8      	ldr	r0, [r7, #12]
 802b83a:	f000 f81f 	bl	802b87c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802b83e:	68fb      	ldr	r3, [r7, #12]
 802b840:	2200      	movs	r2, #0
 802b842:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802b846:	68fb      	ldr	r3, [r7, #12]
 802b848:	2200      	movs	r2, #0
 802b84a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802b84e:	68fb      	ldr	r3, [r7, #12]
 802b850:	2200      	movs	r2, #0
 802b852:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802b856:	68fb      	ldr	r3, [r7, #12]
 802b858:	2200      	movs	r2, #0
 802b85a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802b85e:	68bb      	ldr	r3, [r7, #8]
 802b860:	2b00      	cmp	r3, #0
 802b862:	d003      	beq.n	802b86c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802b864:	68fb      	ldr	r3, [r7, #12]
 802b866:	68ba      	ldr	r2, [r7, #8]
 802b868:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802b86c:	68f8      	ldr	r0, [r7, #12]
 802b86e:	f001 fd2d 	bl	802d2cc <USBH_LL_Init>

  return USBH_OK;
 802b872:	2300      	movs	r3, #0
}
 802b874:	4618      	mov	r0, r3
 802b876:	3710      	adds	r7, #16
 802b878:	46bd      	mov	sp, r7
 802b87a:	bd80      	pop	{r7, pc}

0802b87c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802b87c:	b480      	push	{r7}
 802b87e:	b085      	sub	sp, #20
 802b880:	af00      	add	r7, sp, #0
 802b882:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802b884:	2300      	movs	r3, #0
 802b886:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b888:	2300      	movs	r3, #0
 802b88a:	60fb      	str	r3, [r7, #12]
 802b88c:	e009      	b.n	802b8a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802b88e:	687a      	ldr	r2, [r7, #4]
 802b890:	68fb      	ldr	r3, [r7, #12]
 802b892:	33e0      	adds	r3, #224	; 0xe0
 802b894:	009b      	lsls	r3, r3, #2
 802b896:	4413      	add	r3, r2
 802b898:	2200      	movs	r2, #0
 802b89a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802b89c:	68fb      	ldr	r3, [r7, #12]
 802b89e:	3301      	adds	r3, #1
 802b8a0:	60fb      	str	r3, [r7, #12]
 802b8a2:	68fb      	ldr	r3, [r7, #12]
 802b8a4:	2b0f      	cmp	r3, #15
 802b8a6:	d9f2      	bls.n	802b88e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b8a8:	2300      	movs	r3, #0
 802b8aa:	60fb      	str	r3, [r7, #12]
 802b8ac:	e009      	b.n	802b8c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802b8ae:	687a      	ldr	r2, [r7, #4]
 802b8b0:	68fb      	ldr	r3, [r7, #12]
 802b8b2:	4413      	add	r3, r2
 802b8b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802b8b8:	2200      	movs	r2, #0
 802b8ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802b8bc:	68fb      	ldr	r3, [r7, #12]
 802b8be:	3301      	adds	r3, #1
 802b8c0:	60fb      	str	r3, [r7, #12]
 802b8c2:	68fb      	ldr	r3, [r7, #12]
 802b8c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802b8c8:	d3f1      	bcc.n	802b8ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802b8ca:	687b      	ldr	r3, [r7, #4]
 802b8cc:	2200      	movs	r2, #0
 802b8ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802b8d0:	687b      	ldr	r3, [r7, #4]
 802b8d2:	2200      	movs	r2, #0
 802b8d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802b8d6:	687b      	ldr	r3, [r7, #4]
 802b8d8:	2201      	movs	r2, #1
 802b8da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802b8dc:	687b      	ldr	r3, [r7, #4]
 802b8de:	2200      	movs	r2, #0
 802b8e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802b8e4:	687b      	ldr	r3, [r7, #4]
 802b8e6:	2201      	movs	r2, #1
 802b8e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802b8ea:	687b      	ldr	r3, [r7, #4]
 802b8ec:	2240      	movs	r2, #64	; 0x40
 802b8ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802b8f0:	687b      	ldr	r3, [r7, #4]
 802b8f2:	2200      	movs	r2, #0
 802b8f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802b8f6:	687b      	ldr	r3, [r7, #4]
 802b8f8:	2200      	movs	r2, #0
 802b8fa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802b8fe:	687b      	ldr	r3, [r7, #4]
 802b900:	2201      	movs	r2, #1
 802b902:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802b906:	687b      	ldr	r3, [r7, #4]
 802b908:	2200      	movs	r2, #0
 802b90a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802b90e:	687b      	ldr	r3, [r7, #4]
 802b910:	2200      	movs	r2, #0
 802b912:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802b916:	2300      	movs	r3, #0
}
 802b918:	4618      	mov	r0, r3
 802b91a:	3714      	adds	r7, #20
 802b91c:	46bd      	mov	sp, r7
 802b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b922:	4770      	bx	lr

0802b924 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802b924:	b480      	push	{r7}
 802b926:	b085      	sub	sp, #20
 802b928:	af00      	add	r7, sp, #0
 802b92a:	6078      	str	r0, [r7, #4]
 802b92c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802b92e:	2300      	movs	r3, #0
 802b930:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802b932:	683b      	ldr	r3, [r7, #0]
 802b934:	2b00      	cmp	r3, #0
 802b936:	d016      	beq.n	802b966 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802b938:	687b      	ldr	r3, [r7, #4]
 802b93a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b93e:	2b00      	cmp	r3, #0
 802b940:	d10e      	bne.n	802b960 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802b942:	687b      	ldr	r3, [r7, #4]
 802b944:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802b948:	1c59      	adds	r1, r3, #1
 802b94a:	687a      	ldr	r2, [r7, #4]
 802b94c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802b950:	687a      	ldr	r2, [r7, #4]
 802b952:	33de      	adds	r3, #222	; 0xde
 802b954:	6839      	ldr	r1, [r7, #0]
 802b956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802b95a:	2300      	movs	r3, #0
 802b95c:	73fb      	strb	r3, [r7, #15]
 802b95e:	e004      	b.n	802b96a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802b960:	2302      	movs	r3, #2
 802b962:	73fb      	strb	r3, [r7, #15]
 802b964:	e001      	b.n	802b96a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802b966:	2302      	movs	r3, #2
 802b968:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 802b96c:	4618      	mov	r0, r3
 802b96e:	3714      	adds	r7, #20
 802b970:	46bd      	mov	sp, r7
 802b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b976:	4770      	bx	lr

0802b978 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802b978:	b480      	push	{r7}
 802b97a:	b085      	sub	sp, #20
 802b97c:	af00      	add	r7, sp, #0
 802b97e:	6078      	str	r0, [r7, #4]
 802b980:	460b      	mov	r3, r1
 802b982:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802b984:	2300      	movs	r3, #0
 802b986:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802b988:	687b      	ldr	r3, [r7, #4]
 802b98a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802b98e:	78fa      	ldrb	r2, [r7, #3]
 802b990:	429a      	cmp	r2, r3
 802b992:	d204      	bcs.n	802b99e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802b994:	687b      	ldr	r3, [r7, #4]
 802b996:	78fa      	ldrb	r2, [r7, #3]
 802b998:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802b99c:	e001      	b.n	802b9a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802b99e:	2302      	movs	r3, #2
 802b9a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802b9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 802b9a4:	4618      	mov	r0, r3
 802b9a6:	3714      	adds	r7, #20
 802b9a8:	46bd      	mov	sp, r7
 802b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b9ae:	4770      	bx	lr

0802b9b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802b9b0:	b480      	push	{r7}
 802b9b2:	b087      	sub	sp, #28
 802b9b4:	af00      	add	r7, sp, #0
 802b9b6:	6078      	str	r0, [r7, #4]
 802b9b8:	4608      	mov	r0, r1
 802b9ba:	4611      	mov	r1, r2
 802b9bc:	461a      	mov	r2, r3
 802b9be:	4603      	mov	r3, r0
 802b9c0:	70fb      	strb	r3, [r7, #3]
 802b9c2:	460b      	mov	r3, r1
 802b9c4:	70bb      	strb	r3, [r7, #2]
 802b9c6:	4613      	mov	r3, r2
 802b9c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802b9ca:	2300      	movs	r3, #0
 802b9cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802b9ce:	2300      	movs	r3, #0
 802b9d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802b9d2:	687b      	ldr	r3, [r7, #4]
 802b9d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802b9d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802b9da:	e025      	b.n	802ba28 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802b9dc:	7dfb      	ldrb	r3, [r7, #23]
 802b9de:	221a      	movs	r2, #26
 802b9e0:	fb02 f303 	mul.w	r3, r2, r3
 802b9e4:	3308      	adds	r3, #8
 802b9e6:	68fa      	ldr	r2, [r7, #12]
 802b9e8:	4413      	add	r3, r2
 802b9ea:	3302      	adds	r3, #2
 802b9ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802b9ee:	693b      	ldr	r3, [r7, #16]
 802b9f0:	795b      	ldrb	r3, [r3, #5]
 802b9f2:	78fa      	ldrb	r2, [r7, #3]
 802b9f4:	429a      	cmp	r2, r3
 802b9f6:	d002      	beq.n	802b9fe <USBH_FindInterface+0x4e>
 802b9f8:	78fb      	ldrb	r3, [r7, #3]
 802b9fa:	2bff      	cmp	r3, #255	; 0xff
 802b9fc:	d111      	bne.n	802ba22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802b9fe:	693b      	ldr	r3, [r7, #16]
 802ba00:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802ba02:	78ba      	ldrb	r2, [r7, #2]
 802ba04:	429a      	cmp	r2, r3
 802ba06:	d002      	beq.n	802ba0e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802ba08:	78bb      	ldrb	r3, [r7, #2]
 802ba0a:	2bff      	cmp	r3, #255	; 0xff
 802ba0c:	d109      	bne.n	802ba22 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802ba0e:	693b      	ldr	r3, [r7, #16]
 802ba10:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802ba12:	787a      	ldrb	r2, [r7, #1]
 802ba14:	429a      	cmp	r2, r3
 802ba16:	d002      	beq.n	802ba1e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802ba18:	787b      	ldrb	r3, [r7, #1]
 802ba1a:	2bff      	cmp	r3, #255	; 0xff
 802ba1c:	d101      	bne.n	802ba22 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802ba1e:	7dfb      	ldrb	r3, [r7, #23]
 802ba20:	e006      	b.n	802ba30 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802ba22:	7dfb      	ldrb	r3, [r7, #23]
 802ba24:	3301      	adds	r3, #1
 802ba26:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802ba28:	7dfb      	ldrb	r3, [r7, #23]
 802ba2a:	2b01      	cmp	r3, #1
 802ba2c:	d9d6      	bls.n	802b9dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802ba2e:	23ff      	movs	r3, #255	; 0xff
}
 802ba30:	4618      	mov	r0, r3
 802ba32:	371c      	adds	r7, #28
 802ba34:	46bd      	mov	sp, r7
 802ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ba3a:	4770      	bx	lr

0802ba3c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802ba3c:	b580      	push	{r7, lr}
 802ba3e:	b082      	sub	sp, #8
 802ba40:	af00      	add	r7, sp, #0
 802ba42:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802ba44:	6878      	ldr	r0, [r7, #4]
 802ba46:	f001 fc87 	bl	802d358 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802ba4a:	2101      	movs	r1, #1
 802ba4c:	6878      	ldr	r0, [r7, #4]
 802ba4e:	f001 fda0 	bl	802d592 <USBH_LL_DriverVBUS>

  return USBH_OK;
 802ba52:	2300      	movs	r3, #0
}
 802ba54:	4618      	mov	r0, r3
 802ba56:	3708      	adds	r7, #8
 802ba58:	46bd      	mov	sp, r7
 802ba5a:	bd80      	pop	{r7, pc}

0802ba5c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802ba5c:	b580      	push	{r7, lr}
 802ba5e:	b088      	sub	sp, #32
 802ba60:	af04      	add	r7, sp, #16
 802ba62:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802ba64:	2302      	movs	r3, #2
 802ba66:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802ba68:	2300      	movs	r3, #0
 802ba6a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802ba6c:	687b      	ldr	r3, [r7, #4]
 802ba6e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802ba72:	b2db      	uxtb	r3, r3
 802ba74:	2b01      	cmp	r3, #1
 802ba76:	d102      	bne.n	802ba7e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802ba78:	687b      	ldr	r3, [r7, #4]
 802ba7a:	2203      	movs	r2, #3
 802ba7c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802ba7e:	687b      	ldr	r3, [r7, #4]
 802ba80:	781b      	ldrb	r3, [r3, #0]
 802ba82:	b2db      	uxtb	r3, r3
 802ba84:	2b0b      	cmp	r3, #11
 802ba86:	f200 81be 	bhi.w	802be06 <USBH_Process+0x3aa>
 802ba8a:	a201      	add	r2, pc, #4	; (adr r2, 802ba90 <USBH_Process+0x34>)
 802ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802ba90:	0802bac1 	.word	0x0802bac1
 802ba94:	0802baf3 	.word	0x0802baf3
 802ba98:	0802bb5b 	.word	0x0802bb5b
 802ba9c:	0802bda1 	.word	0x0802bda1
 802baa0:	0802be07 	.word	0x0802be07
 802baa4:	0802bbff 	.word	0x0802bbff
 802baa8:	0802bd47 	.word	0x0802bd47
 802baac:	0802bc35 	.word	0x0802bc35
 802bab0:	0802bc55 	.word	0x0802bc55
 802bab4:	0802bc75 	.word	0x0802bc75
 802bab8:	0802bcb9 	.word	0x0802bcb9
 802babc:	0802bd89 	.word	0x0802bd89
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802bac0:	687b      	ldr	r3, [r7, #4]
 802bac2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802bac6:	b2db      	uxtb	r3, r3
 802bac8:	2b00      	cmp	r3, #0
 802baca:	f000 819e 	beq.w	802be0a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802bace:	687b      	ldr	r3, [r7, #4]
 802bad0:	2201      	movs	r2, #1
 802bad2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802bad4:	20c8      	movs	r0, #200	; 0xc8
 802bad6:	f001 fda3 	bl	802d620 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802bada:	6878      	ldr	r0, [r7, #4]
 802badc:	f001 fc99 	bl	802d412 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802bae0:	687b      	ldr	r3, [r7, #4]
 802bae2:	2200      	movs	r2, #0
 802bae4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802bae8:	687b      	ldr	r3, [r7, #4]
 802baea:	2200      	movs	r2, #0
 802baec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802baf0:	e18b      	b.n	802be0a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802baf2:	687b      	ldr	r3, [r7, #4]
 802baf4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802baf8:	2b01      	cmp	r3, #1
 802bafa:	d107      	bne.n	802bb0c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802bafc:	687b      	ldr	r3, [r7, #4]
 802bafe:	2200      	movs	r2, #0
 802bb00:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802bb04:	687b      	ldr	r3, [r7, #4]
 802bb06:	2202      	movs	r2, #2
 802bb08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bb0a:	e18d      	b.n	802be28 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802bb0c:	687b      	ldr	r3, [r7, #4]
 802bb0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802bb12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802bb16:	d914      	bls.n	802bb42 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802bb18:	687b      	ldr	r3, [r7, #4]
 802bb1a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802bb1e:	3301      	adds	r3, #1
 802bb20:	b2da      	uxtb	r2, r3
 802bb22:	687b      	ldr	r3, [r7, #4]
 802bb24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802bb28:	687b      	ldr	r3, [r7, #4]
 802bb2a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802bb2e:	2b03      	cmp	r3, #3
 802bb30:	d903      	bls.n	802bb3a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802bb32:	687b      	ldr	r3, [r7, #4]
 802bb34:	220d      	movs	r2, #13
 802bb36:	701a      	strb	r2, [r3, #0]
      break;
 802bb38:	e176      	b.n	802be28 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802bb3a:	687b      	ldr	r3, [r7, #4]
 802bb3c:	2200      	movs	r2, #0
 802bb3e:	701a      	strb	r2, [r3, #0]
      break;
 802bb40:	e172      	b.n	802be28 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802bb42:	687b      	ldr	r3, [r7, #4]
 802bb44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802bb48:	f103 020a 	add.w	r2, r3, #10
 802bb4c:	687b      	ldr	r3, [r7, #4]
 802bb4e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802bb52:	200a      	movs	r0, #10
 802bb54:	f001 fd64 	bl	802d620 <USBH_Delay>
      break;
 802bb58:	e166      	b.n	802be28 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802bb5a:	687b      	ldr	r3, [r7, #4]
 802bb5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bb60:	2b00      	cmp	r3, #0
 802bb62:	d005      	beq.n	802bb70 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802bb64:	687b      	ldr	r3, [r7, #4]
 802bb66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bb6a:	2104      	movs	r1, #4
 802bb6c:	6878      	ldr	r0, [r7, #4]
 802bb6e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802bb70:	2064      	movs	r0, #100	; 0x64
 802bb72:	f001 fd55 	bl	802d620 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802bb76:	6878      	ldr	r0, [r7, #4]
 802bb78:	f001 fc24 	bl	802d3c4 <USBH_LL_GetSpeed>
 802bb7c:	4603      	mov	r3, r0
 802bb7e:	461a      	mov	r2, r3
 802bb80:	687b      	ldr	r3, [r7, #4]
 802bb82:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802bb86:	687b      	ldr	r3, [r7, #4]
 802bb88:	2205      	movs	r2, #5
 802bb8a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802bb8c:	2100      	movs	r1, #0
 802bb8e:	6878      	ldr	r0, [r7, #4]
 802bb90:	f001 fa29 	bl	802cfe6 <USBH_AllocPipe>
 802bb94:	4603      	mov	r3, r0
 802bb96:	461a      	mov	r2, r3
 802bb98:	687b      	ldr	r3, [r7, #4]
 802bb9a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802bb9c:	2180      	movs	r1, #128	; 0x80
 802bb9e:	6878      	ldr	r0, [r7, #4]
 802bba0:	f001 fa21 	bl	802cfe6 <USBH_AllocPipe>
 802bba4:	4603      	mov	r3, r0
 802bba6:	461a      	mov	r2, r3
 802bba8:	687b      	ldr	r3, [r7, #4]
 802bbaa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802bbac:	687b      	ldr	r3, [r7, #4]
 802bbae:	7919      	ldrb	r1, [r3, #4]
 802bbb0:	687b      	ldr	r3, [r7, #4]
 802bbb2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bbb6:	687b      	ldr	r3, [r7, #4]
 802bbb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802bbbc:	687a      	ldr	r2, [r7, #4]
 802bbbe:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802bbc0:	b292      	uxth	r2, r2
 802bbc2:	9202      	str	r2, [sp, #8]
 802bbc4:	2200      	movs	r2, #0
 802bbc6:	9201      	str	r2, [sp, #4]
 802bbc8:	9300      	str	r3, [sp, #0]
 802bbca:	4603      	mov	r3, r0
 802bbcc:	2280      	movs	r2, #128	; 0x80
 802bbce:	6878      	ldr	r0, [r7, #4]
 802bbd0:	f001 f9da 	bl	802cf88 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802bbd4:	687b      	ldr	r3, [r7, #4]
 802bbd6:	7959      	ldrb	r1, [r3, #5]
 802bbd8:	687b      	ldr	r3, [r7, #4]
 802bbda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bbde:	687b      	ldr	r3, [r7, #4]
 802bbe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802bbe4:	687a      	ldr	r2, [r7, #4]
 802bbe6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802bbe8:	b292      	uxth	r2, r2
 802bbea:	9202      	str	r2, [sp, #8]
 802bbec:	2200      	movs	r2, #0
 802bbee:	9201      	str	r2, [sp, #4]
 802bbf0:	9300      	str	r3, [sp, #0]
 802bbf2:	4603      	mov	r3, r0
 802bbf4:	2200      	movs	r2, #0
 802bbf6:	6878      	ldr	r0, [r7, #4]
 802bbf8:	f001 f9c6 	bl	802cf88 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bbfc:	e114      	b.n	802be28 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802bbfe:	6878      	ldr	r0, [r7, #4]
 802bc00:	f000 f918 	bl	802be34 <USBH_HandleEnum>
 802bc04:	4603      	mov	r3, r0
 802bc06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802bc08:	7bbb      	ldrb	r3, [r7, #14]
 802bc0a:	b2db      	uxtb	r3, r3
 802bc0c:	2b00      	cmp	r3, #0
 802bc0e:	f040 80fe 	bne.w	802be0e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802bc12:	687b      	ldr	r3, [r7, #4]
 802bc14:	2200      	movs	r2, #0
 802bc16:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802bc1a:	687b      	ldr	r3, [r7, #4]
 802bc1c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802bc20:	2b01      	cmp	r3, #1
 802bc22:	d103      	bne.n	802bc2c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802bc24:	687b      	ldr	r3, [r7, #4]
 802bc26:	2208      	movs	r2, #8
 802bc28:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802bc2a:	e0f0      	b.n	802be0e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802bc2c:	687b      	ldr	r3, [r7, #4]
 802bc2e:	2207      	movs	r2, #7
 802bc30:	701a      	strb	r2, [r3, #0]
      break;
 802bc32:	e0ec      	b.n	802be0e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802bc34:	687b      	ldr	r3, [r7, #4]
 802bc36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc3a:	2b00      	cmp	r3, #0
 802bc3c:	f000 80e9 	beq.w	802be12 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802bc40:	687b      	ldr	r3, [r7, #4]
 802bc42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bc46:	2101      	movs	r1, #1
 802bc48:	6878      	ldr	r0, [r7, #4]
 802bc4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802bc4c:	687b      	ldr	r3, [r7, #4]
 802bc4e:	2208      	movs	r2, #8
 802bc50:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802bc52:	e0de      	b.n	802be12 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802bc54:	687b      	ldr	r3, [r7, #4]
 802bc56:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802bc5a:	b29b      	uxth	r3, r3
 802bc5c:	4619      	mov	r1, r3
 802bc5e:	6878      	ldr	r0, [r7, #4]
 802bc60:	f000 fc2c 	bl	802c4bc <USBH_SetCfg>
 802bc64:	4603      	mov	r3, r0
 802bc66:	2b00      	cmp	r3, #0
 802bc68:	f040 80d5 	bne.w	802be16 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802bc6c:	687b      	ldr	r3, [r7, #4]
 802bc6e:	2209      	movs	r2, #9
 802bc70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bc72:	e0d0      	b.n	802be16 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802bc74:	687b      	ldr	r3, [r7, #4]
 802bc76:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802bc7a:	f003 0320 	and.w	r3, r3, #32
 802bc7e:	2b00      	cmp	r3, #0
 802bc80:	d016      	beq.n	802bcb0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802bc82:	2101      	movs	r1, #1
 802bc84:	6878      	ldr	r0, [r7, #4]
 802bc86:	f000 fc3c 	bl	802c502 <USBH_SetFeature>
 802bc8a:	4603      	mov	r3, r0
 802bc8c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bc8e:	7bbb      	ldrb	r3, [r7, #14]
 802bc90:	b2db      	uxtb	r3, r3
 802bc92:	2b00      	cmp	r3, #0
 802bc94:	d103      	bne.n	802bc9e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802bc96:	687b      	ldr	r3, [r7, #4]
 802bc98:	220a      	movs	r2, #10
 802bc9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bc9c:	e0bd      	b.n	802be1a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802bc9e:	7bbb      	ldrb	r3, [r7, #14]
 802bca0:	b2db      	uxtb	r3, r3
 802bca2:	2b03      	cmp	r3, #3
 802bca4:	f040 80b9 	bne.w	802be1a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802bca8:	687b      	ldr	r3, [r7, #4]
 802bcaa:	220a      	movs	r2, #10
 802bcac:	701a      	strb	r2, [r3, #0]
      break;
 802bcae:	e0b4      	b.n	802be1a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802bcb0:	687b      	ldr	r3, [r7, #4]
 802bcb2:	220a      	movs	r2, #10
 802bcb4:	701a      	strb	r2, [r3, #0]
      break;
 802bcb6:	e0b0      	b.n	802be1a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802bcb8:	687b      	ldr	r3, [r7, #4]
 802bcba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802bcbe:	2b00      	cmp	r3, #0
 802bcc0:	f000 80ad 	beq.w	802be1e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802bcc4:	687b      	ldr	r3, [r7, #4]
 802bcc6:	2200      	movs	r2, #0
 802bcc8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bccc:	2300      	movs	r3, #0
 802bcce:	73fb      	strb	r3, [r7, #15]
 802bcd0:	e016      	b.n	802bd00 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802bcd2:	7bfa      	ldrb	r2, [r7, #15]
 802bcd4:	687b      	ldr	r3, [r7, #4]
 802bcd6:	32de      	adds	r2, #222	; 0xde
 802bcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802bcdc:	791a      	ldrb	r2, [r3, #4]
 802bcde:	687b      	ldr	r3, [r7, #4]
 802bce0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802bce4:	429a      	cmp	r2, r3
 802bce6:	d108      	bne.n	802bcfa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802bce8:	7bfa      	ldrb	r2, [r7, #15]
 802bcea:	687b      	ldr	r3, [r7, #4]
 802bcec:	32de      	adds	r2, #222	; 0xde
 802bcee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802bcf2:	687b      	ldr	r3, [r7, #4]
 802bcf4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802bcf8:	e005      	b.n	802bd06 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802bcfa:	7bfb      	ldrb	r3, [r7, #15]
 802bcfc:	3301      	adds	r3, #1
 802bcfe:	73fb      	strb	r3, [r7, #15]
 802bd00:	7bfb      	ldrb	r3, [r7, #15]
 802bd02:	2b00      	cmp	r3, #0
 802bd04:	d0e5      	beq.n	802bcd2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802bd06:	687b      	ldr	r3, [r7, #4]
 802bd08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd0c:	2b00      	cmp	r3, #0
 802bd0e:	d016      	beq.n	802bd3e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd16:	689b      	ldr	r3, [r3, #8]
 802bd18:	6878      	ldr	r0, [r7, #4]
 802bd1a:	4798      	blx	r3
 802bd1c:	4603      	mov	r3, r0
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	d109      	bne.n	802bd36 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802bd22:	687b      	ldr	r3, [r7, #4]
 802bd24:	2206      	movs	r2, #6
 802bd26:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802bd28:	687b      	ldr	r3, [r7, #4]
 802bd2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bd2e:	2103      	movs	r1, #3
 802bd30:	6878      	ldr	r0, [r7, #4]
 802bd32:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bd34:	e073      	b.n	802be1e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802bd36:	687b      	ldr	r3, [r7, #4]
 802bd38:	220d      	movs	r2, #13
 802bd3a:	701a      	strb	r2, [r3, #0]
      break;
 802bd3c:	e06f      	b.n	802be1e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802bd3e:	687b      	ldr	r3, [r7, #4]
 802bd40:	220d      	movs	r2, #13
 802bd42:	701a      	strb	r2, [r3, #0]
      break;
 802bd44:	e06b      	b.n	802be1e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802bd46:	687b      	ldr	r3, [r7, #4]
 802bd48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd4c:	2b00      	cmp	r3, #0
 802bd4e:	d017      	beq.n	802bd80 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802bd50:	687b      	ldr	r3, [r7, #4]
 802bd52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd56:	691b      	ldr	r3, [r3, #16]
 802bd58:	6878      	ldr	r0, [r7, #4]
 802bd5a:	4798      	blx	r3
 802bd5c:	4603      	mov	r3, r0
 802bd5e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802bd60:	7bbb      	ldrb	r3, [r7, #14]
 802bd62:	b2db      	uxtb	r3, r3
 802bd64:	2b00      	cmp	r3, #0
 802bd66:	d103      	bne.n	802bd70 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802bd68:	687b      	ldr	r3, [r7, #4]
 802bd6a:	220b      	movs	r2, #11
 802bd6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bd6e:	e058      	b.n	802be22 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802bd70:	7bbb      	ldrb	r3, [r7, #14]
 802bd72:	b2db      	uxtb	r3, r3
 802bd74:	2b02      	cmp	r3, #2
 802bd76:	d154      	bne.n	802be22 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802bd78:	687b      	ldr	r3, [r7, #4]
 802bd7a:	220d      	movs	r2, #13
 802bd7c:	701a      	strb	r2, [r3, #0]
      break;
 802bd7e:	e050      	b.n	802be22 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802bd80:	687b      	ldr	r3, [r7, #4]
 802bd82:	220d      	movs	r2, #13
 802bd84:	701a      	strb	r2, [r3, #0]
      break;
 802bd86:	e04c      	b.n	802be22 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd8e:	2b00      	cmp	r3, #0
 802bd90:	d049      	beq.n	802be26 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802bd92:	687b      	ldr	r3, [r7, #4]
 802bd94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd98:	695b      	ldr	r3, [r3, #20]
 802bd9a:	6878      	ldr	r0, [r7, #4]
 802bd9c:	4798      	blx	r3
      }
      break;
 802bd9e:	e042      	b.n	802be26 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802bda0:	687b      	ldr	r3, [r7, #4]
 802bda2:	2200      	movs	r2, #0
 802bda4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802bda8:	6878      	ldr	r0, [r7, #4]
 802bdaa:	f7ff fd67 	bl	802b87c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802bdae:	687b      	ldr	r3, [r7, #4]
 802bdb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdb4:	2b00      	cmp	r3, #0
 802bdb6:	d009      	beq.n	802bdcc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802bdb8:	687b      	ldr	r3, [r7, #4]
 802bdba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdbe:	68db      	ldr	r3, [r3, #12]
 802bdc0:	6878      	ldr	r0, [r7, #4]
 802bdc2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802bdc4:	687b      	ldr	r3, [r7, #4]
 802bdc6:	2200      	movs	r2, #0
 802bdc8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802bdcc:	687b      	ldr	r3, [r7, #4]
 802bdce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bdd2:	2b00      	cmp	r3, #0
 802bdd4:	d005      	beq.n	802bde2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802bdd6:	687b      	ldr	r3, [r7, #4]
 802bdd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bddc:	2105      	movs	r1, #5
 802bdde:	6878      	ldr	r0, [r7, #4]
 802bde0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802bde2:	687b      	ldr	r3, [r7, #4]
 802bde4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802bde8:	b2db      	uxtb	r3, r3
 802bdea:	2b01      	cmp	r3, #1
 802bdec:	d107      	bne.n	802bdfe <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802bdee:	687b      	ldr	r3, [r7, #4]
 802bdf0:	2200      	movs	r2, #0
 802bdf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802bdf6:	6878      	ldr	r0, [r7, #4]
 802bdf8:	f7ff fe20 	bl	802ba3c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802bdfc:	e014      	b.n	802be28 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802bdfe:	6878      	ldr	r0, [r7, #4]
 802be00:	f001 faaa 	bl	802d358 <USBH_LL_Start>
      break;
 802be04:	e010      	b.n	802be28 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802be06:	bf00      	nop
 802be08:	e00e      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be0a:	bf00      	nop
 802be0c:	e00c      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be0e:	bf00      	nop
 802be10:	e00a      	b.n	802be28 <USBH_Process+0x3cc>
    break;
 802be12:	bf00      	nop
 802be14:	e008      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be16:	bf00      	nop
 802be18:	e006      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be1a:	bf00      	nop
 802be1c:	e004      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be1e:	bf00      	nop
 802be20:	e002      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be22:	bf00      	nop
 802be24:	e000      	b.n	802be28 <USBH_Process+0x3cc>
      break;
 802be26:	bf00      	nop
  }
  return USBH_OK;
 802be28:	2300      	movs	r3, #0
}
 802be2a:	4618      	mov	r0, r3
 802be2c:	3710      	adds	r7, #16
 802be2e:	46bd      	mov	sp, r7
 802be30:	bd80      	pop	{r7, pc}
 802be32:	bf00      	nop

0802be34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802be34:	b580      	push	{r7, lr}
 802be36:	b088      	sub	sp, #32
 802be38:	af04      	add	r7, sp, #16
 802be3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802be3c:	2301      	movs	r3, #1
 802be3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802be40:	2301      	movs	r3, #1
 802be42:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802be44:	687b      	ldr	r3, [r7, #4]
 802be46:	785b      	ldrb	r3, [r3, #1]
 802be48:	2b07      	cmp	r3, #7
 802be4a:	f200 81c1 	bhi.w	802c1d0 <USBH_HandleEnum+0x39c>
 802be4e:	a201      	add	r2, pc, #4	; (adr r2, 802be54 <USBH_HandleEnum+0x20>)
 802be50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be54:	0802be75 	.word	0x0802be75
 802be58:	0802bf33 	.word	0x0802bf33
 802be5c:	0802bf9d 	.word	0x0802bf9d
 802be60:	0802c02b 	.word	0x0802c02b
 802be64:	0802c095 	.word	0x0802c095
 802be68:	0802c105 	.word	0x0802c105
 802be6c:	0802c14b 	.word	0x0802c14b
 802be70:	0802c191 	.word	0x0802c191
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802be74:	2108      	movs	r1, #8
 802be76:	6878      	ldr	r0, [r7, #4]
 802be78:	f000 fa50 	bl	802c31c <USBH_Get_DevDesc>
 802be7c:	4603      	mov	r3, r0
 802be7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802be80:	7bbb      	ldrb	r3, [r7, #14]
 802be82:	2b00      	cmp	r3, #0
 802be84:	d130      	bne.n	802bee8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802be86:	687b      	ldr	r3, [r7, #4]
 802be88:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802be8c:	687b      	ldr	r3, [r7, #4]
 802be8e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802be90:	687b      	ldr	r3, [r7, #4]
 802be92:	2201      	movs	r2, #1
 802be94:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802be96:	687b      	ldr	r3, [r7, #4]
 802be98:	7919      	ldrb	r1, [r3, #4]
 802be9a:	687b      	ldr	r3, [r7, #4]
 802be9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bea0:	687b      	ldr	r3, [r7, #4]
 802bea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bea6:	687a      	ldr	r2, [r7, #4]
 802bea8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802beaa:	b292      	uxth	r2, r2
 802beac:	9202      	str	r2, [sp, #8]
 802beae:	2200      	movs	r2, #0
 802beb0:	9201      	str	r2, [sp, #4]
 802beb2:	9300      	str	r3, [sp, #0]
 802beb4:	4603      	mov	r3, r0
 802beb6:	2280      	movs	r2, #128	; 0x80
 802beb8:	6878      	ldr	r0, [r7, #4]
 802beba:	f001 f865 	bl	802cf88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bebe:	687b      	ldr	r3, [r7, #4]
 802bec0:	7959      	ldrb	r1, [r3, #5]
 802bec2:	687b      	ldr	r3, [r7, #4]
 802bec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bec8:	687b      	ldr	r3, [r7, #4]
 802beca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bece:	687a      	ldr	r2, [r7, #4]
 802bed0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bed2:	b292      	uxth	r2, r2
 802bed4:	9202      	str	r2, [sp, #8]
 802bed6:	2200      	movs	r2, #0
 802bed8:	9201      	str	r2, [sp, #4]
 802beda:	9300      	str	r3, [sp, #0]
 802bedc:	4603      	mov	r3, r0
 802bede:	2200      	movs	r2, #0
 802bee0:	6878      	ldr	r0, [r7, #4]
 802bee2:	f001 f851 	bl	802cf88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802bee6:	e175      	b.n	802c1d4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bee8:	7bbb      	ldrb	r3, [r7, #14]
 802beea:	2b03      	cmp	r3, #3
 802beec:	f040 8172 	bne.w	802c1d4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802bef0:	687b      	ldr	r3, [r7, #4]
 802bef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bef6:	3301      	adds	r3, #1
 802bef8:	b2da      	uxtb	r2, r3
 802befa:	687b      	ldr	r3, [r7, #4]
 802befc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bf00:	687b      	ldr	r3, [r7, #4]
 802bf02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bf06:	2b03      	cmp	r3, #3
 802bf08:	d903      	bls.n	802bf12 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802bf0a:	687b      	ldr	r3, [r7, #4]
 802bf0c:	220d      	movs	r2, #13
 802bf0e:	701a      	strb	r2, [r3, #0]
      break;
 802bf10:	e160      	b.n	802c1d4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bf12:	687b      	ldr	r3, [r7, #4]
 802bf14:	795b      	ldrb	r3, [r3, #5]
 802bf16:	4619      	mov	r1, r3
 802bf18:	6878      	ldr	r0, [r7, #4]
 802bf1a:	f001 f885 	bl	802d028 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bf1e:	687b      	ldr	r3, [r7, #4]
 802bf20:	791b      	ldrb	r3, [r3, #4]
 802bf22:	4619      	mov	r1, r3
 802bf24:	6878      	ldr	r0, [r7, #4]
 802bf26:	f001 f87f 	bl	802d028 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802bf2a:	687b      	ldr	r3, [r7, #4]
 802bf2c:	2200      	movs	r2, #0
 802bf2e:	701a      	strb	r2, [r3, #0]
      break;
 802bf30:	e150      	b.n	802c1d4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802bf32:	2112      	movs	r1, #18
 802bf34:	6878      	ldr	r0, [r7, #4]
 802bf36:	f000 f9f1 	bl	802c31c <USBH_Get_DevDesc>
 802bf3a:	4603      	mov	r3, r0
 802bf3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bf3e:	7bbb      	ldrb	r3, [r7, #14]
 802bf40:	2b00      	cmp	r3, #0
 802bf42:	d103      	bne.n	802bf4c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	2202      	movs	r2, #2
 802bf48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802bf4a:	e145      	b.n	802c1d8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802bf4c:	7bbb      	ldrb	r3, [r7, #14]
 802bf4e:	2b03      	cmp	r3, #3
 802bf50:	f040 8142 	bne.w	802c1d8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802bf54:	687b      	ldr	r3, [r7, #4]
 802bf56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bf5a:	3301      	adds	r3, #1
 802bf5c:	b2da      	uxtb	r2, r3
 802bf5e:	687b      	ldr	r3, [r7, #4]
 802bf60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802bf64:	687b      	ldr	r3, [r7, #4]
 802bf66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802bf6a:	2b03      	cmp	r3, #3
 802bf6c:	d903      	bls.n	802bf76 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802bf6e:	687b      	ldr	r3, [r7, #4]
 802bf70:	220d      	movs	r2, #13
 802bf72:	701a      	strb	r2, [r3, #0]
      break;
 802bf74:	e130      	b.n	802c1d8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802bf76:	687b      	ldr	r3, [r7, #4]
 802bf78:	795b      	ldrb	r3, [r3, #5]
 802bf7a:	4619      	mov	r1, r3
 802bf7c:	6878      	ldr	r0, [r7, #4]
 802bf7e:	f001 f853 	bl	802d028 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802bf82:	687b      	ldr	r3, [r7, #4]
 802bf84:	791b      	ldrb	r3, [r3, #4]
 802bf86:	4619      	mov	r1, r3
 802bf88:	6878      	ldr	r0, [r7, #4]
 802bf8a:	f001 f84d 	bl	802d028 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802bf8e:	687b      	ldr	r3, [r7, #4]
 802bf90:	2200      	movs	r2, #0
 802bf92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802bf94:	687b      	ldr	r3, [r7, #4]
 802bf96:	2200      	movs	r2, #0
 802bf98:	701a      	strb	r2, [r3, #0]
      break;
 802bf9a:	e11d      	b.n	802c1d8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802bf9c:	2101      	movs	r1, #1
 802bf9e:	6878      	ldr	r0, [r7, #4]
 802bfa0:	f000 fa68 	bl	802c474 <USBH_SetAddress>
 802bfa4:	4603      	mov	r3, r0
 802bfa6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802bfa8:	7bbb      	ldrb	r3, [r7, #14]
 802bfaa:	2b00      	cmp	r3, #0
 802bfac:	d132      	bne.n	802c014 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802bfae:	2002      	movs	r0, #2
 802bfb0:	f001 fb36 	bl	802d620 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802bfb4:	687b      	ldr	r3, [r7, #4]
 802bfb6:	2201      	movs	r2, #1
 802bfb8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802bfbc:	687b      	ldr	r3, [r7, #4]
 802bfbe:	2203      	movs	r2, #3
 802bfc0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bfc2:	687b      	ldr	r3, [r7, #4]
 802bfc4:	7919      	ldrb	r1, [r3, #4]
 802bfc6:	687b      	ldr	r3, [r7, #4]
 802bfc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bfcc:	687b      	ldr	r3, [r7, #4]
 802bfce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bfd2:	687a      	ldr	r2, [r7, #4]
 802bfd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802bfd6:	b292      	uxth	r2, r2
 802bfd8:	9202      	str	r2, [sp, #8]
 802bfda:	2200      	movs	r2, #0
 802bfdc:	9201      	str	r2, [sp, #4]
 802bfde:	9300      	str	r3, [sp, #0]
 802bfe0:	4603      	mov	r3, r0
 802bfe2:	2280      	movs	r2, #128	; 0x80
 802bfe4:	6878      	ldr	r0, [r7, #4]
 802bfe6:	f000 ffcf 	bl	802cf88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bfea:	687b      	ldr	r3, [r7, #4]
 802bfec:	7959      	ldrb	r1, [r3, #5]
 802bfee:	687b      	ldr	r3, [r7, #4]
 802bff0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802bff4:	687b      	ldr	r3, [r7, #4]
 802bff6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802bffa:	687a      	ldr	r2, [r7, #4]
 802bffc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802bffe:	b292      	uxth	r2, r2
 802c000:	9202      	str	r2, [sp, #8]
 802c002:	2200      	movs	r2, #0
 802c004:	9201      	str	r2, [sp, #4]
 802c006:	9300      	str	r3, [sp, #0]
 802c008:	4603      	mov	r3, r0
 802c00a:	2200      	movs	r2, #0
 802c00c:	6878      	ldr	r0, [r7, #4]
 802c00e:	f000 ffbb 	bl	802cf88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c012:	e0e3      	b.n	802c1dc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c014:	7bbb      	ldrb	r3, [r7, #14]
 802c016:	2b03      	cmp	r3, #3
 802c018:	f040 80e0 	bne.w	802c1dc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c01c:	687b      	ldr	r3, [r7, #4]
 802c01e:	220d      	movs	r2, #13
 802c020:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	2200      	movs	r2, #0
 802c026:	705a      	strb	r2, [r3, #1]
      break;
 802c028:	e0d8      	b.n	802c1dc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c02a:	2109      	movs	r1, #9
 802c02c:	6878      	ldr	r0, [r7, #4]
 802c02e:	f000 f99d 	bl	802c36c <USBH_Get_CfgDesc>
 802c032:	4603      	mov	r3, r0
 802c034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c036:	7bbb      	ldrb	r3, [r7, #14]
 802c038:	2b00      	cmp	r3, #0
 802c03a:	d103      	bne.n	802c044 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c03c:	687b      	ldr	r3, [r7, #4]
 802c03e:	2204      	movs	r2, #4
 802c040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c042:	e0cd      	b.n	802c1e0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c044:	7bbb      	ldrb	r3, [r7, #14]
 802c046:	2b03      	cmp	r3, #3
 802c048:	f040 80ca 	bne.w	802c1e0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c04c:	687b      	ldr	r3, [r7, #4]
 802c04e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c052:	3301      	adds	r3, #1
 802c054:	b2da      	uxtb	r2, r3
 802c056:	687b      	ldr	r3, [r7, #4]
 802c058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c05c:	687b      	ldr	r3, [r7, #4]
 802c05e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c062:	2b03      	cmp	r3, #3
 802c064:	d903      	bls.n	802c06e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802c066:	687b      	ldr	r3, [r7, #4]
 802c068:	220d      	movs	r2, #13
 802c06a:	701a      	strb	r2, [r3, #0]
      break;
 802c06c:	e0b8      	b.n	802c1e0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c06e:	687b      	ldr	r3, [r7, #4]
 802c070:	795b      	ldrb	r3, [r3, #5]
 802c072:	4619      	mov	r1, r3
 802c074:	6878      	ldr	r0, [r7, #4]
 802c076:	f000 ffd7 	bl	802d028 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c07a:	687b      	ldr	r3, [r7, #4]
 802c07c:	791b      	ldrb	r3, [r3, #4]
 802c07e:	4619      	mov	r1, r3
 802c080:	6878      	ldr	r0, [r7, #4]
 802c082:	f000 ffd1 	bl	802d028 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c086:	687b      	ldr	r3, [r7, #4]
 802c088:	2200      	movs	r2, #0
 802c08a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c08c:	687b      	ldr	r3, [r7, #4]
 802c08e:	2200      	movs	r2, #0
 802c090:	701a      	strb	r2, [r3, #0]
      break;
 802c092:	e0a5      	b.n	802c1e0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802c094:	687b      	ldr	r3, [r7, #4]
 802c096:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802c09a:	4619      	mov	r1, r3
 802c09c:	6878      	ldr	r0, [r7, #4]
 802c09e:	f000 f965 	bl	802c36c <USBH_Get_CfgDesc>
 802c0a2:	4603      	mov	r3, r0
 802c0a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c0a6:	7bbb      	ldrb	r3, [r7, #14]
 802c0a8:	2b00      	cmp	r3, #0
 802c0aa:	d103      	bne.n	802c0b4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802c0ac:	687b      	ldr	r3, [r7, #4]
 802c0ae:	2205      	movs	r2, #5
 802c0b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c0b2:	e097      	b.n	802c1e4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c0b4:	7bbb      	ldrb	r3, [r7, #14]
 802c0b6:	2b03      	cmp	r3, #3
 802c0b8:	f040 8094 	bne.w	802c1e4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802c0bc:	687b      	ldr	r3, [r7, #4]
 802c0be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c0c2:	3301      	adds	r3, #1
 802c0c4:	b2da      	uxtb	r2, r3
 802c0c6:	687b      	ldr	r3, [r7, #4]
 802c0c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c0cc:	687b      	ldr	r3, [r7, #4]
 802c0ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c0d2:	2b03      	cmp	r3, #3
 802c0d4:	d903      	bls.n	802c0de <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802c0d6:	687b      	ldr	r3, [r7, #4]
 802c0d8:	220d      	movs	r2, #13
 802c0da:	701a      	strb	r2, [r3, #0]
      break;
 802c0dc:	e082      	b.n	802c1e4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c0de:	687b      	ldr	r3, [r7, #4]
 802c0e0:	795b      	ldrb	r3, [r3, #5]
 802c0e2:	4619      	mov	r1, r3
 802c0e4:	6878      	ldr	r0, [r7, #4]
 802c0e6:	f000 ff9f 	bl	802d028 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c0ea:	687b      	ldr	r3, [r7, #4]
 802c0ec:	791b      	ldrb	r3, [r3, #4]
 802c0ee:	4619      	mov	r1, r3
 802c0f0:	6878      	ldr	r0, [r7, #4]
 802c0f2:	f000 ff99 	bl	802d028 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c0f6:	687b      	ldr	r3, [r7, #4]
 802c0f8:	2200      	movs	r2, #0
 802c0fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c0fc:	687b      	ldr	r3, [r7, #4]
 802c0fe:	2200      	movs	r2, #0
 802c100:	701a      	strb	r2, [r3, #0]
      break;
 802c102:	e06f      	b.n	802c1e4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802c104:	687b      	ldr	r3, [r7, #4]
 802c106:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802c10a:	2b00      	cmp	r3, #0
 802c10c:	d019      	beq.n	802c142 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c10e:	687b      	ldr	r3, [r7, #4]
 802c110:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802c114:	687b      	ldr	r3, [r7, #4]
 802c116:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c11a:	23ff      	movs	r3, #255	; 0xff
 802c11c:	6878      	ldr	r0, [r7, #4]
 802c11e:	f000 f949 	bl	802c3b4 <USBH_Get_StringDesc>
 802c122:	4603      	mov	r3, r0
 802c124:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c126:	7bbb      	ldrb	r3, [r7, #14]
 802c128:	2b00      	cmp	r3, #0
 802c12a:	d103      	bne.n	802c134 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c12c:	687b      	ldr	r3, [r7, #4]
 802c12e:	2206      	movs	r2, #6
 802c130:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c132:	e059      	b.n	802c1e8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c134:	7bbb      	ldrb	r3, [r7, #14]
 802c136:	2b03      	cmp	r3, #3
 802c138:	d156      	bne.n	802c1e8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c13a:	687b      	ldr	r3, [r7, #4]
 802c13c:	2206      	movs	r2, #6
 802c13e:	705a      	strb	r2, [r3, #1]
      break;
 802c140:	e052      	b.n	802c1e8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c142:	687b      	ldr	r3, [r7, #4]
 802c144:	2206      	movs	r2, #6
 802c146:	705a      	strb	r2, [r3, #1]
      break;
 802c148:	e04e      	b.n	802c1e8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802c14a:	687b      	ldr	r3, [r7, #4]
 802c14c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802c150:	2b00      	cmp	r3, #0
 802c152:	d019      	beq.n	802c188 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802c15a:	687b      	ldr	r3, [r7, #4]
 802c15c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802c160:	23ff      	movs	r3, #255	; 0xff
 802c162:	6878      	ldr	r0, [r7, #4]
 802c164:	f000 f926 	bl	802c3b4 <USBH_Get_StringDesc>
 802c168:	4603      	mov	r3, r0
 802c16a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c16c:	7bbb      	ldrb	r3, [r7, #14]
 802c16e:	2b00      	cmp	r3, #0
 802c170:	d103      	bne.n	802c17a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c172:	687b      	ldr	r3, [r7, #4]
 802c174:	2207      	movs	r2, #7
 802c176:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c178:	e038      	b.n	802c1ec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c17a:	7bbb      	ldrb	r3, [r7, #14]
 802c17c:	2b03      	cmp	r3, #3
 802c17e:	d135      	bne.n	802c1ec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c180:	687b      	ldr	r3, [r7, #4]
 802c182:	2207      	movs	r2, #7
 802c184:	705a      	strb	r2, [r3, #1]
      break;
 802c186:	e031      	b.n	802c1ec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802c188:	687b      	ldr	r3, [r7, #4]
 802c18a:	2207      	movs	r2, #7
 802c18c:	705a      	strb	r2, [r3, #1]
      break;
 802c18e:	e02d      	b.n	802c1ec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802c190:	687b      	ldr	r3, [r7, #4]
 802c192:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802c196:	2b00      	cmp	r3, #0
 802c198:	d017      	beq.n	802c1ca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802c19a:	687b      	ldr	r3, [r7, #4]
 802c19c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802c1a0:	687b      	ldr	r3, [r7, #4]
 802c1a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802c1a6:	23ff      	movs	r3, #255	; 0xff
 802c1a8:	6878      	ldr	r0, [r7, #4]
 802c1aa:	f000 f903 	bl	802c3b4 <USBH_Get_StringDesc>
 802c1ae:	4603      	mov	r3, r0
 802c1b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c1b2:	7bbb      	ldrb	r3, [r7, #14]
 802c1b4:	2b00      	cmp	r3, #0
 802c1b6:	d102      	bne.n	802c1be <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802c1b8:	2300      	movs	r3, #0
 802c1ba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802c1bc:	e018      	b.n	802c1f0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c1be:	7bbb      	ldrb	r3, [r7, #14]
 802c1c0:	2b03      	cmp	r3, #3
 802c1c2:	d115      	bne.n	802c1f0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802c1c4:	2300      	movs	r3, #0
 802c1c6:	73fb      	strb	r3, [r7, #15]
      break;
 802c1c8:	e012      	b.n	802c1f0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802c1ca:	2300      	movs	r3, #0
 802c1cc:	73fb      	strb	r3, [r7, #15]
      break;
 802c1ce:	e00f      	b.n	802c1f0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 802c1d0:	bf00      	nop
 802c1d2:	e00e      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1d4:	bf00      	nop
 802c1d6:	e00c      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1d8:	bf00      	nop
 802c1da:	e00a      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1dc:	bf00      	nop
 802c1de:	e008      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1e0:	bf00      	nop
 802c1e2:	e006      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1e4:	bf00      	nop
 802c1e6:	e004      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1e8:	bf00      	nop
 802c1ea:	e002      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1ec:	bf00      	nop
 802c1ee:	e000      	b.n	802c1f2 <USBH_HandleEnum+0x3be>
      break;
 802c1f0:	bf00      	nop
  }
  return Status;
 802c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 802c1f4:	4618      	mov	r0, r3
 802c1f6:	3710      	adds	r7, #16
 802c1f8:	46bd      	mov	sp, r7
 802c1fa:	bd80      	pop	{r7, pc}

0802c1fc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802c1fc:	b480      	push	{r7}
 802c1fe:	b083      	sub	sp, #12
 802c200:	af00      	add	r7, sp, #0
 802c202:	6078      	str	r0, [r7, #4]
 802c204:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802c206:	687b      	ldr	r3, [r7, #4]
 802c208:	683a      	ldr	r2, [r7, #0]
 802c20a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802c20e:	bf00      	nop
 802c210:	370c      	adds	r7, #12
 802c212:	46bd      	mov	sp, r7
 802c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c218:	4770      	bx	lr

0802c21a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802c21a:	b580      	push	{r7, lr}
 802c21c:	b082      	sub	sp, #8
 802c21e:	af00      	add	r7, sp, #0
 802c220:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802c222:	687b      	ldr	r3, [r7, #4]
 802c224:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802c228:	1c5a      	adds	r2, r3, #1
 802c22a:	687b      	ldr	r3, [r7, #4]
 802c22c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802c230:	6878      	ldr	r0, [r7, #4]
 802c232:	f000 f804 	bl	802c23e <USBH_HandleSof>
}
 802c236:	bf00      	nop
 802c238:	3708      	adds	r7, #8
 802c23a:	46bd      	mov	sp, r7
 802c23c:	bd80      	pop	{r7, pc}

0802c23e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802c23e:	b580      	push	{r7, lr}
 802c240:	b082      	sub	sp, #8
 802c242:	af00      	add	r7, sp, #0
 802c244:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802c246:	687b      	ldr	r3, [r7, #4]
 802c248:	781b      	ldrb	r3, [r3, #0]
 802c24a:	b2db      	uxtb	r3, r3
 802c24c:	2b0b      	cmp	r3, #11
 802c24e:	d10a      	bne.n	802c266 <USBH_HandleSof+0x28>
 802c250:	687b      	ldr	r3, [r7, #4]
 802c252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c256:	2b00      	cmp	r3, #0
 802c258:	d005      	beq.n	802c266 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802c25a:	687b      	ldr	r3, [r7, #4]
 802c25c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c260:	699b      	ldr	r3, [r3, #24]
 802c262:	6878      	ldr	r0, [r7, #4]
 802c264:	4798      	blx	r3
  }
}
 802c266:	bf00      	nop
 802c268:	3708      	adds	r7, #8
 802c26a:	46bd      	mov	sp, r7
 802c26c:	bd80      	pop	{r7, pc}

0802c26e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802c26e:	b480      	push	{r7}
 802c270:	b083      	sub	sp, #12
 802c272:	af00      	add	r7, sp, #0
 802c274:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802c276:	687b      	ldr	r3, [r7, #4]
 802c278:	2201      	movs	r2, #1
 802c27a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802c27e:	bf00      	nop
}
 802c280:	370c      	adds	r7, #12
 802c282:	46bd      	mov	sp, r7
 802c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c288:	4770      	bx	lr

0802c28a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802c28a:	b480      	push	{r7}
 802c28c:	b083      	sub	sp, #12
 802c28e:	af00      	add	r7, sp, #0
 802c290:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802c292:	687b      	ldr	r3, [r7, #4]
 802c294:	2200      	movs	r2, #0
 802c296:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802c29a:	bf00      	nop
}
 802c29c:	370c      	adds	r7, #12
 802c29e:	46bd      	mov	sp, r7
 802c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2a4:	4770      	bx	lr

0802c2a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802c2a6:	b480      	push	{r7}
 802c2a8:	b083      	sub	sp, #12
 802c2aa:	af00      	add	r7, sp, #0
 802c2ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802c2ae:	687b      	ldr	r3, [r7, #4]
 802c2b0:	2201      	movs	r2, #1
 802c2b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c2b6:	687b      	ldr	r3, [r7, #4]
 802c2b8:	2200      	movs	r2, #0
 802c2ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c2be:	687b      	ldr	r3, [r7, #4]
 802c2c0:	2200      	movs	r2, #0
 802c2c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c2c6:	2300      	movs	r3, #0
}
 802c2c8:	4618      	mov	r0, r3
 802c2ca:	370c      	adds	r7, #12
 802c2cc:	46bd      	mov	sp, r7
 802c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2d2:	4770      	bx	lr

0802c2d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802c2d4:	b580      	push	{r7, lr}
 802c2d6:	b082      	sub	sp, #8
 802c2d8:	af00      	add	r7, sp, #0
 802c2da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802c2dc:	687b      	ldr	r3, [r7, #4]
 802c2de:	2201      	movs	r2, #1
 802c2e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802c2e4:	687b      	ldr	r3, [r7, #4]
 802c2e6:	2200      	movs	r2, #0
 802c2e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802c2ec:	687b      	ldr	r3, [r7, #4]
 802c2ee:	2200      	movs	r2, #0
 802c2f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802c2f4:	6878      	ldr	r0, [r7, #4]
 802c2f6:	f001 f84a 	bl	802d38e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c2fa:	687b      	ldr	r3, [r7, #4]
 802c2fc:	791b      	ldrb	r3, [r3, #4]
 802c2fe:	4619      	mov	r1, r3
 802c300:	6878      	ldr	r0, [r7, #4]
 802c302:	f000 fe91 	bl	802d028 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c306:	687b      	ldr	r3, [r7, #4]
 802c308:	795b      	ldrb	r3, [r3, #5]
 802c30a:	4619      	mov	r1, r3
 802c30c:	6878      	ldr	r0, [r7, #4]
 802c30e:	f000 fe8b 	bl	802d028 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802c312:	2300      	movs	r3, #0
}
 802c314:	4618      	mov	r0, r3
 802c316:	3708      	adds	r7, #8
 802c318:	46bd      	mov	sp, r7
 802c31a:	bd80      	pop	{r7, pc}

0802c31c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802c31c:	b580      	push	{r7, lr}
 802c31e:	b086      	sub	sp, #24
 802c320:	af02      	add	r7, sp, #8
 802c322:	6078      	str	r0, [r7, #4]
 802c324:	460b      	mov	r3, r1
 802c326:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802c328:	687b      	ldr	r3, [r7, #4]
 802c32a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c32e:	78fb      	ldrb	r3, [r7, #3]
 802c330:	b29b      	uxth	r3, r3
 802c332:	9300      	str	r3, [sp, #0]
 802c334:	4613      	mov	r3, r2
 802c336:	f44f 7280 	mov.w	r2, #256	; 0x100
 802c33a:	2100      	movs	r1, #0
 802c33c:	6878      	ldr	r0, [r7, #4]
 802c33e:	f000 f864 	bl	802c40a <USBH_GetDescriptor>
 802c342:	4603      	mov	r3, r0
 802c344:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802c346:	7bfb      	ldrb	r3, [r7, #15]
 802c348:	2b00      	cmp	r3, #0
 802c34a:	d10a      	bne.n	802c362 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802c34c:	687b      	ldr	r3, [r7, #4]
 802c34e:	f203 3026 	addw	r0, r3, #806	; 0x326
 802c352:	687b      	ldr	r3, [r7, #4]
 802c354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c358:	78fa      	ldrb	r2, [r7, #3]
 802c35a:	b292      	uxth	r2, r2
 802c35c:	4619      	mov	r1, r3
 802c35e:	f000 f918 	bl	802c592 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802c362:	7bfb      	ldrb	r3, [r7, #15]
}
 802c364:	4618      	mov	r0, r3
 802c366:	3710      	adds	r7, #16
 802c368:	46bd      	mov	sp, r7
 802c36a:	bd80      	pop	{r7, pc}

0802c36c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802c36c:	b580      	push	{r7, lr}
 802c36e:	b086      	sub	sp, #24
 802c370:	af02      	add	r7, sp, #8
 802c372:	6078      	str	r0, [r7, #4]
 802c374:	460b      	mov	r3, r1
 802c376:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802c378:	687b      	ldr	r3, [r7, #4]
 802c37a:	331c      	adds	r3, #28
 802c37c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802c37e:	887b      	ldrh	r3, [r7, #2]
 802c380:	9300      	str	r3, [sp, #0]
 802c382:	68bb      	ldr	r3, [r7, #8]
 802c384:	f44f 7200 	mov.w	r2, #512	; 0x200
 802c388:	2100      	movs	r1, #0
 802c38a:	6878      	ldr	r0, [r7, #4]
 802c38c:	f000 f83d 	bl	802c40a <USBH_GetDescriptor>
 802c390:	4603      	mov	r3, r0
 802c392:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802c394:	7bfb      	ldrb	r3, [r7, #15]
 802c396:	2b00      	cmp	r3, #0
 802c398:	d107      	bne.n	802c3aa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802c39a:	887b      	ldrh	r3, [r7, #2]
 802c39c:	461a      	mov	r2, r3
 802c39e:	68b9      	ldr	r1, [r7, #8]
 802c3a0:	6878      	ldr	r0, [r7, #4]
 802c3a2:	f000 f987 	bl	802c6b4 <USBH_ParseCfgDesc>
 802c3a6:	4603      	mov	r3, r0
 802c3a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 802c3ac:	4618      	mov	r0, r3
 802c3ae:	3710      	adds	r7, #16
 802c3b0:	46bd      	mov	sp, r7
 802c3b2:	bd80      	pop	{r7, pc}

0802c3b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802c3b4:	b580      	push	{r7, lr}
 802c3b6:	b088      	sub	sp, #32
 802c3b8:	af02      	add	r7, sp, #8
 802c3ba:	60f8      	str	r0, [r7, #12]
 802c3bc:	607a      	str	r2, [r7, #4]
 802c3be:	461a      	mov	r2, r3
 802c3c0:	460b      	mov	r3, r1
 802c3c2:	72fb      	strb	r3, [r7, #11]
 802c3c4:	4613      	mov	r3, r2
 802c3c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802c3c8:	7afb      	ldrb	r3, [r7, #11]
 802c3ca:	b29b      	uxth	r3, r3
 802c3cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802c3d0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802c3d2:	68fb      	ldr	r3, [r7, #12]
 802c3d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802c3d8:	893b      	ldrh	r3, [r7, #8]
 802c3da:	9300      	str	r3, [sp, #0]
 802c3dc:	460b      	mov	r3, r1
 802c3de:	2100      	movs	r1, #0
 802c3e0:	68f8      	ldr	r0, [r7, #12]
 802c3e2:	f000 f812 	bl	802c40a <USBH_GetDescriptor>
 802c3e6:	4603      	mov	r3, r0
 802c3e8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802c3ea:	7dfb      	ldrb	r3, [r7, #23]
 802c3ec:	2b00      	cmp	r3, #0
 802c3ee:	d107      	bne.n	802c400 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802c3f0:	68fb      	ldr	r3, [r7, #12]
 802c3f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c3f6:	893a      	ldrh	r2, [r7, #8]
 802c3f8:	6879      	ldr	r1, [r7, #4]
 802c3fa:	4618      	mov	r0, r3
 802c3fc:	f000 fb24 	bl	802ca48 <USBH_ParseStringDesc>
  }

  return status;
 802c400:	7dfb      	ldrb	r3, [r7, #23]
}
 802c402:	4618      	mov	r0, r3
 802c404:	3718      	adds	r7, #24
 802c406:	46bd      	mov	sp, r7
 802c408:	bd80      	pop	{r7, pc}

0802c40a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802c40a:	b580      	push	{r7, lr}
 802c40c:	b084      	sub	sp, #16
 802c40e:	af00      	add	r7, sp, #0
 802c410:	60f8      	str	r0, [r7, #12]
 802c412:	607b      	str	r3, [r7, #4]
 802c414:	460b      	mov	r3, r1
 802c416:	72fb      	strb	r3, [r7, #11]
 802c418:	4613      	mov	r3, r2
 802c41a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802c41c:	68fb      	ldr	r3, [r7, #12]
 802c41e:	789b      	ldrb	r3, [r3, #2]
 802c420:	2b01      	cmp	r3, #1
 802c422:	d11c      	bne.n	802c45e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802c424:	7afb      	ldrb	r3, [r7, #11]
 802c426:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802c42a:	b2da      	uxtb	r2, r3
 802c42c:	68fb      	ldr	r3, [r7, #12]
 802c42e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802c430:	68fb      	ldr	r3, [r7, #12]
 802c432:	2206      	movs	r2, #6
 802c434:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802c436:	68fb      	ldr	r3, [r7, #12]
 802c438:	893a      	ldrh	r2, [r7, #8]
 802c43a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802c43c:	893b      	ldrh	r3, [r7, #8]
 802c43e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802c446:	d104      	bne.n	802c452 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802c448:	68fb      	ldr	r3, [r7, #12]
 802c44a:	f240 4209 	movw	r2, #1033	; 0x409
 802c44e:	829a      	strh	r2, [r3, #20]
 802c450:	e002      	b.n	802c458 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802c452:	68fb      	ldr	r3, [r7, #12]
 802c454:	2200      	movs	r2, #0
 802c456:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802c458:	68fb      	ldr	r3, [r7, #12]
 802c45a:	8b3a      	ldrh	r2, [r7, #24]
 802c45c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802c45e:	8b3b      	ldrh	r3, [r7, #24]
 802c460:	461a      	mov	r2, r3
 802c462:	6879      	ldr	r1, [r7, #4]
 802c464:	68f8      	ldr	r0, [r7, #12]
 802c466:	f000 fb3d 	bl	802cae4 <USBH_CtlReq>
 802c46a:	4603      	mov	r3, r0
}
 802c46c:	4618      	mov	r0, r3
 802c46e:	3710      	adds	r7, #16
 802c470:	46bd      	mov	sp, r7
 802c472:	bd80      	pop	{r7, pc}

0802c474 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802c474:	b580      	push	{r7, lr}
 802c476:	b082      	sub	sp, #8
 802c478:	af00      	add	r7, sp, #0
 802c47a:	6078      	str	r0, [r7, #4]
 802c47c:	460b      	mov	r3, r1
 802c47e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c480:	687b      	ldr	r3, [r7, #4]
 802c482:	789b      	ldrb	r3, [r3, #2]
 802c484:	2b01      	cmp	r3, #1
 802c486:	d10f      	bne.n	802c4a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802c488:	687b      	ldr	r3, [r7, #4]
 802c48a:	2200      	movs	r2, #0
 802c48c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802c48e:	687b      	ldr	r3, [r7, #4]
 802c490:	2205      	movs	r2, #5
 802c492:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802c494:	78fb      	ldrb	r3, [r7, #3]
 802c496:	b29a      	uxth	r2, r3
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c49c:	687b      	ldr	r3, [r7, #4]
 802c49e:	2200      	movs	r2, #0
 802c4a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c4a2:	687b      	ldr	r3, [r7, #4]
 802c4a4:	2200      	movs	r2, #0
 802c4a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c4a8:	2200      	movs	r2, #0
 802c4aa:	2100      	movs	r1, #0
 802c4ac:	6878      	ldr	r0, [r7, #4]
 802c4ae:	f000 fb19 	bl	802cae4 <USBH_CtlReq>
 802c4b2:	4603      	mov	r3, r0
}
 802c4b4:	4618      	mov	r0, r3
 802c4b6:	3708      	adds	r7, #8
 802c4b8:	46bd      	mov	sp, r7
 802c4ba:	bd80      	pop	{r7, pc}

0802c4bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802c4bc:	b580      	push	{r7, lr}
 802c4be:	b082      	sub	sp, #8
 802c4c0:	af00      	add	r7, sp, #0
 802c4c2:	6078      	str	r0, [r7, #4]
 802c4c4:	460b      	mov	r3, r1
 802c4c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802c4c8:	687b      	ldr	r3, [r7, #4]
 802c4ca:	789b      	ldrb	r3, [r3, #2]
 802c4cc:	2b01      	cmp	r3, #1
 802c4ce:	d10e      	bne.n	802c4ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c4d0:	687b      	ldr	r3, [r7, #4]
 802c4d2:	2200      	movs	r2, #0
 802c4d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802c4d6:	687b      	ldr	r3, [r7, #4]
 802c4d8:	2209      	movs	r2, #9
 802c4da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802c4dc:	687b      	ldr	r3, [r7, #4]
 802c4de:	887a      	ldrh	r2, [r7, #2]
 802c4e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	2200      	movs	r2, #0
 802c4e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	2200      	movs	r2, #0
 802c4ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c4ee:	2200      	movs	r2, #0
 802c4f0:	2100      	movs	r1, #0
 802c4f2:	6878      	ldr	r0, [r7, #4]
 802c4f4:	f000 faf6 	bl	802cae4 <USBH_CtlReq>
 802c4f8:	4603      	mov	r3, r0
}
 802c4fa:	4618      	mov	r0, r3
 802c4fc:	3708      	adds	r7, #8
 802c4fe:	46bd      	mov	sp, r7
 802c500:	bd80      	pop	{r7, pc}

0802c502 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802c502:	b580      	push	{r7, lr}
 802c504:	b082      	sub	sp, #8
 802c506:	af00      	add	r7, sp, #0
 802c508:	6078      	str	r0, [r7, #4]
 802c50a:	460b      	mov	r3, r1
 802c50c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c50e:	687b      	ldr	r3, [r7, #4]
 802c510:	789b      	ldrb	r3, [r3, #2]
 802c512:	2b01      	cmp	r3, #1
 802c514:	d10f      	bne.n	802c536 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802c516:	687b      	ldr	r3, [r7, #4]
 802c518:	2200      	movs	r2, #0
 802c51a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802c51c:	687b      	ldr	r3, [r7, #4]
 802c51e:	2203      	movs	r2, #3
 802c520:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802c522:	78fb      	ldrb	r3, [r7, #3]
 802c524:	b29a      	uxth	r2, r3
 802c526:	687b      	ldr	r3, [r7, #4]
 802c528:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802c52a:	687b      	ldr	r3, [r7, #4]
 802c52c:	2200      	movs	r2, #0
 802c52e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c530:	687b      	ldr	r3, [r7, #4]
 802c532:	2200      	movs	r2, #0
 802c534:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802c536:	2200      	movs	r2, #0
 802c538:	2100      	movs	r1, #0
 802c53a:	6878      	ldr	r0, [r7, #4]
 802c53c:	f000 fad2 	bl	802cae4 <USBH_CtlReq>
 802c540:	4603      	mov	r3, r0
}
 802c542:	4618      	mov	r0, r3
 802c544:	3708      	adds	r7, #8
 802c546:	46bd      	mov	sp, r7
 802c548:	bd80      	pop	{r7, pc}

0802c54a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802c54a:	b580      	push	{r7, lr}
 802c54c:	b082      	sub	sp, #8
 802c54e:	af00      	add	r7, sp, #0
 802c550:	6078      	str	r0, [r7, #4]
 802c552:	460b      	mov	r3, r1
 802c554:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802c556:	687b      	ldr	r3, [r7, #4]
 802c558:	789b      	ldrb	r3, [r3, #2]
 802c55a:	2b01      	cmp	r3, #1
 802c55c:	d10f      	bne.n	802c57e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802c55e:	687b      	ldr	r3, [r7, #4]
 802c560:	2202      	movs	r2, #2
 802c562:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802c564:	687b      	ldr	r3, [r7, #4]
 802c566:	2201      	movs	r2, #1
 802c568:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802c56a:	687b      	ldr	r3, [r7, #4]
 802c56c:	2200      	movs	r2, #0
 802c56e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802c570:	78fb      	ldrb	r3, [r7, #3]
 802c572:	b29a      	uxth	r2, r3
 802c574:	687b      	ldr	r3, [r7, #4]
 802c576:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802c578:	687b      	ldr	r3, [r7, #4]
 802c57a:	2200      	movs	r2, #0
 802c57c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802c57e:	2200      	movs	r2, #0
 802c580:	2100      	movs	r1, #0
 802c582:	6878      	ldr	r0, [r7, #4]
 802c584:	f000 faae 	bl	802cae4 <USBH_CtlReq>
 802c588:	4603      	mov	r3, r0
}
 802c58a:	4618      	mov	r0, r3
 802c58c:	3708      	adds	r7, #8
 802c58e:	46bd      	mov	sp, r7
 802c590:	bd80      	pop	{r7, pc}

0802c592 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802c592:	b480      	push	{r7}
 802c594:	b085      	sub	sp, #20
 802c596:	af00      	add	r7, sp, #0
 802c598:	60f8      	str	r0, [r7, #12]
 802c59a:	60b9      	str	r1, [r7, #8]
 802c59c:	4613      	mov	r3, r2
 802c59e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802c5a0:	68bb      	ldr	r3, [r7, #8]
 802c5a2:	781a      	ldrb	r2, [r3, #0]
 802c5a4:	68fb      	ldr	r3, [r7, #12]
 802c5a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802c5a8:	68bb      	ldr	r3, [r7, #8]
 802c5aa:	785a      	ldrb	r2, [r3, #1]
 802c5ac:	68fb      	ldr	r3, [r7, #12]
 802c5ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802c5b0:	68bb      	ldr	r3, [r7, #8]
 802c5b2:	3302      	adds	r3, #2
 802c5b4:	781b      	ldrb	r3, [r3, #0]
 802c5b6:	b29a      	uxth	r2, r3
 802c5b8:	68bb      	ldr	r3, [r7, #8]
 802c5ba:	3303      	adds	r3, #3
 802c5bc:	781b      	ldrb	r3, [r3, #0]
 802c5be:	b29b      	uxth	r3, r3
 802c5c0:	021b      	lsls	r3, r3, #8
 802c5c2:	b29b      	uxth	r3, r3
 802c5c4:	4313      	orrs	r3, r2
 802c5c6:	b29a      	uxth	r2, r3
 802c5c8:	68fb      	ldr	r3, [r7, #12]
 802c5ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802c5cc:	68bb      	ldr	r3, [r7, #8]
 802c5ce:	791a      	ldrb	r2, [r3, #4]
 802c5d0:	68fb      	ldr	r3, [r7, #12]
 802c5d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802c5d4:	68bb      	ldr	r3, [r7, #8]
 802c5d6:	795a      	ldrb	r2, [r3, #5]
 802c5d8:	68fb      	ldr	r3, [r7, #12]
 802c5da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802c5dc:	68bb      	ldr	r3, [r7, #8]
 802c5de:	799a      	ldrb	r2, [r3, #6]
 802c5e0:	68fb      	ldr	r3, [r7, #12]
 802c5e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802c5e4:	68bb      	ldr	r3, [r7, #8]
 802c5e6:	79da      	ldrb	r2, [r3, #7]
 802c5e8:	68fb      	ldr	r3, [r7, #12]
 802c5ea:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802c5ec:	68fb      	ldr	r3, [r7, #12]
 802c5ee:	79db      	ldrb	r3, [r3, #7]
 802c5f0:	2b20      	cmp	r3, #32
 802c5f2:	dc11      	bgt.n	802c618 <USBH_ParseDevDesc+0x86>
 802c5f4:	2b08      	cmp	r3, #8
 802c5f6:	db16      	blt.n	802c626 <USBH_ParseDevDesc+0x94>
 802c5f8:	3b08      	subs	r3, #8
 802c5fa:	2201      	movs	r2, #1
 802c5fc:	fa02 f303 	lsl.w	r3, r2, r3
 802c600:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802c604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802c608:	2b00      	cmp	r3, #0
 802c60a:	bf14      	ite	ne
 802c60c:	2301      	movne	r3, #1
 802c60e:	2300      	moveq	r3, #0
 802c610:	b2db      	uxtb	r3, r3
 802c612:	2b00      	cmp	r3, #0
 802c614:	d102      	bne.n	802c61c <USBH_ParseDevDesc+0x8a>
 802c616:	e006      	b.n	802c626 <USBH_ParseDevDesc+0x94>
 802c618:	2b40      	cmp	r3, #64	; 0x40
 802c61a:	d104      	bne.n	802c626 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802c61c:	68fb      	ldr	r3, [r7, #12]
 802c61e:	79da      	ldrb	r2, [r3, #7]
 802c620:	68fb      	ldr	r3, [r7, #12]
 802c622:	71da      	strb	r2, [r3, #7]
      break;
 802c624:	e003      	b.n	802c62e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802c626:	68fb      	ldr	r3, [r7, #12]
 802c628:	2240      	movs	r2, #64	; 0x40
 802c62a:	71da      	strb	r2, [r3, #7]
      break;
 802c62c:	bf00      	nop
  }

  if (length > 8U)
 802c62e:	88fb      	ldrh	r3, [r7, #6]
 802c630:	2b08      	cmp	r3, #8
 802c632:	d939      	bls.n	802c6a8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802c634:	68bb      	ldr	r3, [r7, #8]
 802c636:	3308      	adds	r3, #8
 802c638:	781b      	ldrb	r3, [r3, #0]
 802c63a:	b29a      	uxth	r2, r3
 802c63c:	68bb      	ldr	r3, [r7, #8]
 802c63e:	3309      	adds	r3, #9
 802c640:	781b      	ldrb	r3, [r3, #0]
 802c642:	b29b      	uxth	r3, r3
 802c644:	021b      	lsls	r3, r3, #8
 802c646:	b29b      	uxth	r3, r3
 802c648:	4313      	orrs	r3, r2
 802c64a:	b29a      	uxth	r2, r3
 802c64c:	68fb      	ldr	r3, [r7, #12]
 802c64e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802c650:	68bb      	ldr	r3, [r7, #8]
 802c652:	330a      	adds	r3, #10
 802c654:	781b      	ldrb	r3, [r3, #0]
 802c656:	b29a      	uxth	r2, r3
 802c658:	68bb      	ldr	r3, [r7, #8]
 802c65a:	330b      	adds	r3, #11
 802c65c:	781b      	ldrb	r3, [r3, #0]
 802c65e:	b29b      	uxth	r3, r3
 802c660:	021b      	lsls	r3, r3, #8
 802c662:	b29b      	uxth	r3, r3
 802c664:	4313      	orrs	r3, r2
 802c666:	b29a      	uxth	r2, r3
 802c668:	68fb      	ldr	r3, [r7, #12]
 802c66a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802c66c:	68bb      	ldr	r3, [r7, #8]
 802c66e:	330c      	adds	r3, #12
 802c670:	781b      	ldrb	r3, [r3, #0]
 802c672:	b29a      	uxth	r2, r3
 802c674:	68bb      	ldr	r3, [r7, #8]
 802c676:	330d      	adds	r3, #13
 802c678:	781b      	ldrb	r3, [r3, #0]
 802c67a:	b29b      	uxth	r3, r3
 802c67c:	021b      	lsls	r3, r3, #8
 802c67e:	b29b      	uxth	r3, r3
 802c680:	4313      	orrs	r3, r2
 802c682:	b29a      	uxth	r2, r3
 802c684:	68fb      	ldr	r3, [r7, #12]
 802c686:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802c688:	68bb      	ldr	r3, [r7, #8]
 802c68a:	7b9a      	ldrb	r2, [r3, #14]
 802c68c:	68fb      	ldr	r3, [r7, #12]
 802c68e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802c690:	68bb      	ldr	r3, [r7, #8]
 802c692:	7bda      	ldrb	r2, [r3, #15]
 802c694:	68fb      	ldr	r3, [r7, #12]
 802c696:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802c698:	68bb      	ldr	r3, [r7, #8]
 802c69a:	7c1a      	ldrb	r2, [r3, #16]
 802c69c:	68fb      	ldr	r3, [r7, #12]
 802c69e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802c6a0:	68bb      	ldr	r3, [r7, #8]
 802c6a2:	7c5a      	ldrb	r2, [r3, #17]
 802c6a4:	68fb      	ldr	r3, [r7, #12]
 802c6a6:	745a      	strb	r2, [r3, #17]
  }
}
 802c6a8:	bf00      	nop
 802c6aa:	3714      	adds	r7, #20
 802c6ac:	46bd      	mov	sp, r7
 802c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c6b2:	4770      	bx	lr

0802c6b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802c6b4:	b580      	push	{r7, lr}
 802c6b6:	b08c      	sub	sp, #48	; 0x30
 802c6b8:	af00      	add	r7, sp, #0
 802c6ba:	60f8      	str	r0, [r7, #12]
 802c6bc:	60b9      	str	r1, [r7, #8]
 802c6be:	4613      	mov	r3, r2
 802c6c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802c6c2:	68fb      	ldr	r3, [r7, #12]
 802c6c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c6c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802c6ca:	2300      	movs	r3, #0
 802c6cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802c6d0:	68bb      	ldr	r3, [r7, #8]
 802c6d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802c6d4:	2300      	movs	r3, #0
 802c6d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802c6da:	2300      	movs	r3, #0
 802c6dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802c6e0:	68bb      	ldr	r3, [r7, #8]
 802c6e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802c6e4:	68bb      	ldr	r3, [r7, #8]
 802c6e6:	781a      	ldrb	r2, [r3, #0]
 802c6e8:	6a3b      	ldr	r3, [r7, #32]
 802c6ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802c6ec:	68bb      	ldr	r3, [r7, #8]
 802c6ee:	785a      	ldrb	r2, [r3, #1]
 802c6f0:	6a3b      	ldr	r3, [r7, #32]
 802c6f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802c6f4:	68bb      	ldr	r3, [r7, #8]
 802c6f6:	3302      	adds	r3, #2
 802c6f8:	781b      	ldrb	r3, [r3, #0]
 802c6fa:	b29a      	uxth	r2, r3
 802c6fc:	68bb      	ldr	r3, [r7, #8]
 802c6fe:	3303      	adds	r3, #3
 802c700:	781b      	ldrb	r3, [r3, #0]
 802c702:	b29b      	uxth	r3, r3
 802c704:	021b      	lsls	r3, r3, #8
 802c706:	b29b      	uxth	r3, r3
 802c708:	4313      	orrs	r3, r2
 802c70a:	b29b      	uxth	r3, r3
 802c70c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802c710:	bf28      	it	cs
 802c712:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802c716:	b29a      	uxth	r2, r3
 802c718:	6a3b      	ldr	r3, [r7, #32]
 802c71a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802c71c:	68bb      	ldr	r3, [r7, #8]
 802c71e:	791a      	ldrb	r2, [r3, #4]
 802c720:	6a3b      	ldr	r3, [r7, #32]
 802c722:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802c724:	68bb      	ldr	r3, [r7, #8]
 802c726:	795a      	ldrb	r2, [r3, #5]
 802c728:	6a3b      	ldr	r3, [r7, #32]
 802c72a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802c72c:	68bb      	ldr	r3, [r7, #8]
 802c72e:	799a      	ldrb	r2, [r3, #6]
 802c730:	6a3b      	ldr	r3, [r7, #32]
 802c732:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802c734:	68bb      	ldr	r3, [r7, #8]
 802c736:	79da      	ldrb	r2, [r3, #7]
 802c738:	6a3b      	ldr	r3, [r7, #32]
 802c73a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802c73c:	68bb      	ldr	r3, [r7, #8]
 802c73e:	7a1a      	ldrb	r2, [r3, #8]
 802c740:	6a3b      	ldr	r3, [r7, #32]
 802c742:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802c744:	6a3b      	ldr	r3, [r7, #32]
 802c746:	781b      	ldrb	r3, [r3, #0]
 802c748:	2b09      	cmp	r3, #9
 802c74a:	d002      	beq.n	802c752 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802c74c:	6a3b      	ldr	r3, [r7, #32]
 802c74e:	2209      	movs	r2, #9
 802c750:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802c752:	88fb      	ldrh	r3, [r7, #6]
 802c754:	2b09      	cmp	r3, #9
 802c756:	f240 809d 	bls.w	802c894 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802c75a:	2309      	movs	r3, #9
 802c75c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c75e:	2300      	movs	r3, #0
 802c760:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c762:	e081      	b.n	802c868 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c764:	f107 0316 	add.w	r3, r7, #22
 802c768:	4619      	mov	r1, r3
 802c76a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c76c:	f000 f99f 	bl	802caae <USBH_GetNextDesc>
 802c770:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c774:	785b      	ldrb	r3, [r3, #1]
 802c776:	2b04      	cmp	r3, #4
 802c778:	d176      	bne.n	802c868 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802c77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c77c:	781b      	ldrb	r3, [r3, #0]
 802c77e:	2b09      	cmp	r3, #9
 802c780:	d002      	beq.n	802c788 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802c782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c784:	2209      	movs	r2, #9
 802c786:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802c788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c78c:	221a      	movs	r2, #26
 802c78e:	fb02 f303 	mul.w	r3, r2, r3
 802c792:	3308      	adds	r3, #8
 802c794:	6a3a      	ldr	r2, [r7, #32]
 802c796:	4413      	add	r3, r2
 802c798:	3302      	adds	r3, #2
 802c79a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802c79c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802c79e:	69f8      	ldr	r0, [r7, #28]
 802c7a0:	f000 f87e 	bl	802c8a0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802c7a4:	2300      	movs	r3, #0
 802c7a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802c7aa:	2300      	movs	r3, #0
 802c7ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c7ae:	e043      	b.n	802c838 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802c7b0:	f107 0316 	add.w	r3, r7, #22
 802c7b4:	4619      	mov	r1, r3
 802c7b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802c7b8:	f000 f979 	bl	802caae <USBH_GetNextDesc>
 802c7bc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7c0:	785b      	ldrb	r3, [r3, #1]
 802c7c2:	2b05      	cmp	r3, #5
 802c7c4:	d138      	bne.n	802c838 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802c7c6:	69fb      	ldr	r3, [r7, #28]
 802c7c8:	795b      	ldrb	r3, [r3, #5]
 802c7ca:	2b01      	cmp	r3, #1
 802c7cc:	d10f      	bne.n	802c7ee <USBH_ParseCfgDesc+0x13a>
 802c7ce:	69fb      	ldr	r3, [r7, #28]
 802c7d0:	799b      	ldrb	r3, [r3, #6]
 802c7d2:	2b02      	cmp	r3, #2
 802c7d4:	d10b      	bne.n	802c7ee <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c7d6:	69fb      	ldr	r3, [r7, #28]
 802c7d8:	79db      	ldrb	r3, [r3, #7]
 802c7da:	2b00      	cmp	r3, #0
 802c7dc:	d10f      	bne.n	802c7fe <USBH_ParseCfgDesc+0x14a>
 802c7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7e0:	781b      	ldrb	r3, [r3, #0]
 802c7e2:	2b09      	cmp	r3, #9
 802c7e4:	d00b      	beq.n	802c7fe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7e8:	2209      	movs	r2, #9
 802c7ea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c7ec:	e007      	b.n	802c7fe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7f0:	781b      	ldrb	r3, [r3, #0]
 802c7f2:	2b07      	cmp	r3, #7
 802c7f4:	d004      	beq.n	802c800 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c7f8:	2207      	movs	r2, #7
 802c7fa:	701a      	strb	r2, [r3, #0]
 802c7fc:	e000      	b.n	802c800 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802c7fe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802c800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c804:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c808:	3201      	adds	r2, #1
 802c80a:	00d2      	lsls	r2, r2, #3
 802c80c:	211a      	movs	r1, #26
 802c80e:	fb01 f303 	mul.w	r3, r1, r3
 802c812:	4413      	add	r3, r2
 802c814:	3308      	adds	r3, #8
 802c816:	6a3a      	ldr	r2, [r7, #32]
 802c818:	4413      	add	r3, r2
 802c81a:	3304      	adds	r3, #4
 802c81c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802c81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802c820:	69b9      	ldr	r1, [r7, #24]
 802c822:	68f8      	ldr	r0, [r7, #12]
 802c824:	f000 f86b 	bl	802c8fe <USBH_ParseEPDesc>
 802c828:	4603      	mov	r3, r0
 802c82a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802c82e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802c832:	3301      	adds	r3, #1
 802c834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802c838:	69fb      	ldr	r3, [r7, #28]
 802c83a:	791b      	ldrb	r3, [r3, #4]
 802c83c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c840:	429a      	cmp	r2, r3
 802c842:	d204      	bcs.n	802c84e <USBH_ParseCfgDesc+0x19a>
 802c844:	6a3b      	ldr	r3, [r7, #32]
 802c846:	885a      	ldrh	r2, [r3, #2]
 802c848:	8afb      	ldrh	r3, [r7, #22]
 802c84a:	429a      	cmp	r2, r3
 802c84c:	d8b0      	bhi.n	802c7b0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802c84e:	69fb      	ldr	r3, [r7, #28]
 802c850:	791b      	ldrb	r3, [r3, #4]
 802c852:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802c856:	429a      	cmp	r2, r3
 802c858:	d201      	bcs.n	802c85e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802c85a:	2303      	movs	r3, #3
 802c85c:	e01c      	b.n	802c898 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802c85e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c862:	3301      	adds	r3, #1
 802c864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802c868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802c86c:	2b01      	cmp	r3, #1
 802c86e:	d805      	bhi.n	802c87c <USBH_ParseCfgDesc+0x1c8>
 802c870:	6a3b      	ldr	r3, [r7, #32]
 802c872:	885a      	ldrh	r2, [r3, #2]
 802c874:	8afb      	ldrh	r3, [r7, #22]
 802c876:	429a      	cmp	r2, r3
 802c878:	f63f af74 	bhi.w	802c764 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802c87c:	6a3b      	ldr	r3, [r7, #32]
 802c87e:	791b      	ldrb	r3, [r3, #4]
 802c880:	2b02      	cmp	r3, #2
 802c882:	bf28      	it	cs
 802c884:	2302      	movcs	r3, #2
 802c886:	b2db      	uxtb	r3, r3
 802c888:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802c88c:	429a      	cmp	r2, r3
 802c88e:	d201      	bcs.n	802c894 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802c890:	2303      	movs	r3, #3
 802c892:	e001      	b.n	802c898 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802c894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802c898:	4618      	mov	r0, r3
 802c89a:	3730      	adds	r7, #48	; 0x30
 802c89c:	46bd      	mov	sp, r7
 802c89e:	bd80      	pop	{r7, pc}

0802c8a0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802c8a0:	b480      	push	{r7}
 802c8a2:	b083      	sub	sp, #12
 802c8a4:	af00      	add	r7, sp, #0
 802c8a6:	6078      	str	r0, [r7, #4]
 802c8a8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802c8aa:	683b      	ldr	r3, [r7, #0]
 802c8ac:	781a      	ldrb	r2, [r3, #0]
 802c8ae:	687b      	ldr	r3, [r7, #4]
 802c8b0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802c8b2:	683b      	ldr	r3, [r7, #0]
 802c8b4:	785a      	ldrb	r2, [r3, #1]
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802c8ba:	683b      	ldr	r3, [r7, #0]
 802c8bc:	789a      	ldrb	r2, [r3, #2]
 802c8be:	687b      	ldr	r3, [r7, #4]
 802c8c0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802c8c2:	683b      	ldr	r3, [r7, #0]
 802c8c4:	78da      	ldrb	r2, [r3, #3]
 802c8c6:	687b      	ldr	r3, [r7, #4]
 802c8c8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802c8ca:	683b      	ldr	r3, [r7, #0]
 802c8cc:	791a      	ldrb	r2, [r3, #4]
 802c8ce:	687b      	ldr	r3, [r7, #4]
 802c8d0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802c8d2:	683b      	ldr	r3, [r7, #0]
 802c8d4:	795a      	ldrb	r2, [r3, #5]
 802c8d6:	687b      	ldr	r3, [r7, #4]
 802c8d8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802c8da:	683b      	ldr	r3, [r7, #0]
 802c8dc:	799a      	ldrb	r2, [r3, #6]
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802c8e2:	683b      	ldr	r3, [r7, #0]
 802c8e4:	79da      	ldrb	r2, [r3, #7]
 802c8e6:	687b      	ldr	r3, [r7, #4]
 802c8e8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802c8ea:	683b      	ldr	r3, [r7, #0]
 802c8ec:	7a1a      	ldrb	r2, [r3, #8]
 802c8ee:	687b      	ldr	r3, [r7, #4]
 802c8f0:	721a      	strb	r2, [r3, #8]
}
 802c8f2:	bf00      	nop
 802c8f4:	370c      	adds	r7, #12
 802c8f6:	46bd      	mov	sp, r7
 802c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c8fc:	4770      	bx	lr

0802c8fe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802c8fe:	b480      	push	{r7}
 802c900:	b087      	sub	sp, #28
 802c902:	af00      	add	r7, sp, #0
 802c904:	60f8      	str	r0, [r7, #12]
 802c906:	60b9      	str	r1, [r7, #8]
 802c908:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802c90a:	2300      	movs	r3, #0
 802c90c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	781a      	ldrb	r2, [r3, #0]
 802c912:	68bb      	ldr	r3, [r7, #8]
 802c914:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802c916:	687b      	ldr	r3, [r7, #4]
 802c918:	785a      	ldrb	r2, [r3, #1]
 802c91a:	68bb      	ldr	r3, [r7, #8]
 802c91c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802c91e:	687b      	ldr	r3, [r7, #4]
 802c920:	789a      	ldrb	r2, [r3, #2]
 802c922:	68bb      	ldr	r3, [r7, #8]
 802c924:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802c926:	687b      	ldr	r3, [r7, #4]
 802c928:	78da      	ldrb	r2, [r3, #3]
 802c92a:	68bb      	ldr	r3, [r7, #8]
 802c92c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802c92e:	687b      	ldr	r3, [r7, #4]
 802c930:	3304      	adds	r3, #4
 802c932:	781b      	ldrb	r3, [r3, #0]
 802c934:	b29a      	uxth	r2, r3
 802c936:	687b      	ldr	r3, [r7, #4]
 802c938:	3305      	adds	r3, #5
 802c93a:	781b      	ldrb	r3, [r3, #0]
 802c93c:	b29b      	uxth	r3, r3
 802c93e:	021b      	lsls	r3, r3, #8
 802c940:	b29b      	uxth	r3, r3
 802c942:	4313      	orrs	r3, r2
 802c944:	b29a      	uxth	r2, r3
 802c946:	68bb      	ldr	r3, [r7, #8]
 802c948:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	799a      	ldrb	r2, [r3, #6]
 802c94e:	68bb      	ldr	r3, [r7, #8]
 802c950:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802c952:	68bb      	ldr	r3, [r7, #8]
 802c954:	889b      	ldrh	r3, [r3, #4]
 802c956:	2b00      	cmp	r3, #0
 802c958:	d102      	bne.n	802c960 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802c95a:	2303      	movs	r3, #3
 802c95c:	75fb      	strb	r3, [r7, #23]
 802c95e:	e033      	b.n	802c9c8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802c960:	68bb      	ldr	r3, [r7, #8]
 802c962:	889b      	ldrh	r3, [r3, #4]
 802c964:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c968:	f023 0307 	bic.w	r3, r3, #7
 802c96c:	b29a      	uxth	r2, r3
 802c96e:	68bb      	ldr	r3, [r7, #8]
 802c970:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802c972:	68bb      	ldr	r3, [r7, #8]
 802c974:	889b      	ldrh	r3, [r3, #4]
 802c976:	b21a      	sxth	r2, r3
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	3304      	adds	r3, #4
 802c97c:	781b      	ldrb	r3, [r3, #0]
 802c97e:	b299      	uxth	r1, r3
 802c980:	687b      	ldr	r3, [r7, #4]
 802c982:	3305      	adds	r3, #5
 802c984:	781b      	ldrb	r3, [r3, #0]
 802c986:	b29b      	uxth	r3, r3
 802c988:	021b      	lsls	r3, r3, #8
 802c98a:	b29b      	uxth	r3, r3
 802c98c:	430b      	orrs	r3, r1
 802c98e:	b29b      	uxth	r3, r3
 802c990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802c994:	2b00      	cmp	r3, #0
 802c996:	d110      	bne.n	802c9ba <USBH_ParseEPDesc+0xbc>
 802c998:	687b      	ldr	r3, [r7, #4]
 802c99a:	3304      	adds	r3, #4
 802c99c:	781b      	ldrb	r3, [r3, #0]
 802c99e:	b299      	uxth	r1, r3
 802c9a0:	687b      	ldr	r3, [r7, #4]
 802c9a2:	3305      	adds	r3, #5
 802c9a4:	781b      	ldrb	r3, [r3, #0]
 802c9a6:	b29b      	uxth	r3, r3
 802c9a8:	021b      	lsls	r3, r3, #8
 802c9aa:	b29b      	uxth	r3, r3
 802c9ac:	430b      	orrs	r3, r1
 802c9ae:	b29b      	uxth	r3, r3
 802c9b0:	b21b      	sxth	r3, r3
 802c9b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802c9b6:	b21b      	sxth	r3, r3
 802c9b8:	e001      	b.n	802c9be <USBH_ParseEPDesc+0xc0>
 802c9ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 802c9be:	4313      	orrs	r3, r2
 802c9c0:	b21b      	sxth	r3, r3
 802c9c2:	b29a      	uxth	r2, r3
 802c9c4:	68bb      	ldr	r3, [r7, #8]
 802c9c6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802c9c8:	68fb      	ldr	r3, [r7, #12]
 802c9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802c9ce:	2b00      	cmp	r3, #0
 802c9d0:	d116      	bne.n	802ca00 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c9d2:	68bb      	ldr	r3, [r7, #8]
 802c9d4:	78db      	ldrb	r3, [r3, #3]
 802c9d6:	f003 0303 	and.w	r3, r3, #3
 802c9da:	2b01      	cmp	r3, #1
 802c9dc:	d005      	beq.n	802c9ea <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802c9de:	68bb      	ldr	r3, [r7, #8]
 802c9e0:	78db      	ldrb	r3, [r3, #3]
 802c9e2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802c9e6:	2b03      	cmp	r3, #3
 802c9e8:	d127      	bne.n	802ca3a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802c9ea:	68bb      	ldr	r3, [r7, #8]
 802c9ec:	799b      	ldrb	r3, [r3, #6]
 802c9ee:	2b00      	cmp	r3, #0
 802c9f0:	d003      	beq.n	802c9fa <USBH_ParseEPDesc+0xfc>
 802c9f2:	68bb      	ldr	r3, [r7, #8]
 802c9f4:	799b      	ldrb	r3, [r3, #6]
 802c9f6:	2b10      	cmp	r3, #16
 802c9f8:	d91f      	bls.n	802ca3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802c9fa:	2303      	movs	r3, #3
 802c9fc:	75fb      	strb	r3, [r7, #23]
 802c9fe:	e01c      	b.n	802ca3a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802ca00:	68bb      	ldr	r3, [r7, #8]
 802ca02:	78db      	ldrb	r3, [r3, #3]
 802ca04:	f003 0303 	and.w	r3, r3, #3
 802ca08:	2b01      	cmp	r3, #1
 802ca0a:	d10a      	bne.n	802ca22 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802ca0c:	68bb      	ldr	r3, [r7, #8]
 802ca0e:	799b      	ldrb	r3, [r3, #6]
 802ca10:	2b00      	cmp	r3, #0
 802ca12:	d003      	beq.n	802ca1c <USBH_ParseEPDesc+0x11e>
 802ca14:	68bb      	ldr	r3, [r7, #8]
 802ca16:	799b      	ldrb	r3, [r3, #6]
 802ca18:	2b10      	cmp	r3, #16
 802ca1a:	d90e      	bls.n	802ca3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802ca1c:	2303      	movs	r3, #3
 802ca1e:	75fb      	strb	r3, [r7, #23]
 802ca20:	e00b      	b.n	802ca3a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802ca22:	68bb      	ldr	r3, [r7, #8]
 802ca24:	78db      	ldrb	r3, [r3, #3]
 802ca26:	f003 0303 	and.w	r3, r3, #3
 802ca2a:	2b03      	cmp	r3, #3
 802ca2c:	d105      	bne.n	802ca3a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802ca2e:	68bb      	ldr	r3, [r7, #8]
 802ca30:	799b      	ldrb	r3, [r3, #6]
 802ca32:	2b00      	cmp	r3, #0
 802ca34:	d101      	bne.n	802ca3a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802ca36:	2303      	movs	r3, #3
 802ca38:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802ca3a:	7dfb      	ldrb	r3, [r7, #23]
}
 802ca3c:	4618      	mov	r0, r3
 802ca3e:	371c      	adds	r7, #28
 802ca40:	46bd      	mov	sp, r7
 802ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ca46:	4770      	bx	lr

0802ca48 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802ca48:	b480      	push	{r7}
 802ca4a:	b087      	sub	sp, #28
 802ca4c:	af00      	add	r7, sp, #0
 802ca4e:	60f8      	str	r0, [r7, #12]
 802ca50:	60b9      	str	r1, [r7, #8]
 802ca52:	4613      	mov	r3, r2
 802ca54:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802ca56:	68fb      	ldr	r3, [r7, #12]
 802ca58:	3301      	adds	r3, #1
 802ca5a:	781b      	ldrb	r3, [r3, #0]
 802ca5c:	2b03      	cmp	r3, #3
 802ca5e:	d120      	bne.n	802caa2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802ca60:	68fb      	ldr	r3, [r7, #12]
 802ca62:	781b      	ldrb	r3, [r3, #0]
 802ca64:	1e9a      	subs	r2, r3, #2
 802ca66:	88fb      	ldrh	r3, [r7, #6]
 802ca68:	4293      	cmp	r3, r2
 802ca6a:	bf28      	it	cs
 802ca6c:	4613      	movcs	r3, r2
 802ca6e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802ca70:	68fb      	ldr	r3, [r7, #12]
 802ca72:	3302      	adds	r3, #2
 802ca74:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802ca76:	2300      	movs	r3, #0
 802ca78:	82fb      	strh	r3, [r7, #22]
 802ca7a:	e00b      	b.n	802ca94 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802ca7c:	8afb      	ldrh	r3, [r7, #22]
 802ca7e:	68fa      	ldr	r2, [r7, #12]
 802ca80:	4413      	add	r3, r2
 802ca82:	781a      	ldrb	r2, [r3, #0]
 802ca84:	68bb      	ldr	r3, [r7, #8]
 802ca86:	701a      	strb	r2, [r3, #0]
      pdest++;
 802ca88:	68bb      	ldr	r3, [r7, #8]
 802ca8a:	3301      	adds	r3, #1
 802ca8c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802ca8e:	8afb      	ldrh	r3, [r7, #22]
 802ca90:	3302      	adds	r3, #2
 802ca92:	82fb      	strh	r3, [r7, #22]
 802ca94:	8afa      	ldrh	r2, [r7, #22]
 802ca96:	8abb      	ldrh	r3, [r7, #20]
 802ca98:	429a      	cmp	r2, r3
 802ca9a:	d3ef      	bcc.n	802ca7c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802ca9c:	68bb      	ldr	r3, [r7, #8]
 802ca9e:	2200      	movs	r2, #0
 802caa0:	701a      	strb	r2, [r3, #0]
  }
}
 802caa2:	bf00      	nop
 802caa4:	371c      	adds	r7, #28
 802caa6:	46bd      	mov	sp, r7
 802caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802caac:	4770      	bx	lr

0802caae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802caae:	b480      	push	{r7}
 802cab0:	b085      	sub	sp, #20
 802cab2:	af00      	add	r7, sp, #0
 802cab4:	6078      	str	r0, [r7, #4]
 802cab6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802cab8:	683b      	ldr	r3, [r7, #0]
 802caba:	881a      	ldrh	r2, [r3, #0]
 802cabc:	687b      	ldr	r3, [r7, #4]
 802cabe:	781b      	ldrb	r3, [r3, #0]
 802cac0:	b29b      	uxth	r3, r3
 802cac2:	4413      	add	r3, r2
 802cac4:	b29a      	uxth	r2, r3
 802cac6:	683b      	ldr	r3, [r7, #0]
 802cac8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	781b      	ldrb	r3, [r3, #0]
 802cace:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802cad0:	687b      	ldr	r3, [r7, #4]
 802cad2:	4413      	add	r3, r2
 802cad4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802cad6:	68fb      	ldr	r3, [r7, #12]
}
 802cad8:	4618      	mov	r0, r3
 802cada:	3714      	adds	r7, #20
 802cadc:	46bd      	mov	sp, r7
 802cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cae2:	4770      	bx	lr

0802cae4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802cae4:	b580      	push	{r7, lr}
 802cae6:	b086      	sub	sp, #24
 802cae8:	af00      	add	r7, sp, #0
 802caea:	60f8      	str	r0, [r7, #12]
 802caec:	60b9      	str	r1, [r7, #8]
 802caee:	4613      	mov	r3, r2
 802caf0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802caf2:	2301      	movs	r3, #1
 802caf4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802caf6:	68fb      	ldr	r3, [r7, #12]
 802caf8:	789b      	ldrb	r3, [r3, #2]
 802cafa:	2b01      	cmp	r3, #1
 802cafc:	d002      	beq.n	802cb04 <USBH_CtlReq+0x20>
 802cafe:	2b02      	cmp	r3, #2
 802cb00:	d00f      	beq.n	802cb22 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802cb02:	e027      	b.n	802cb54 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802cb04:	68fb      	ldr	r3, [r7, #12]
 802cb06:	68ba      	ldr	r2, [r7, #8]
 802cb08:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802cb0a:	68fb      	ldr	r3, [r7, #12]
 802cb0c:	88fa      	ldrh	r2, [r7, #6]
 802cb0e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802cb10:	68fb      	ldr	r3, [r7, #12]
 802cb12:	2201      	movs	r2, #1
 802cb14:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802cb16:	68fb      	ldr	r3, [r7, #12]
 802cb18:	2202      	movs	r2, #2
 802cb1a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802cb1c:	2301      	movs	r3, #1
 802cb1e:	75fb      	strb	r3, [r7, #23]
      break;
 802cb20:	e018      	b.n	802cb54 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802cb22:	68f8      	ldr	r0, [r7, #12]
 802cb24:	f000 f81c 	bl	802cb60 <USBH_HandleControl>
 802cb28:	4603      	mov	r3, r0
 802cb2a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802cb2c:	7dfb      	ldrb	r3, [r7, #23]
 802cb2e:	2b00      	cmp	r3, #0
 802cb30:	d002      	beq.n	802cb38 <USBH_CtlReq+0x54>
 802cb32:	7dfb      	ldrb	r3, [r7, #23]
 802cb34:	2b03      	cmp	r3, #3
 802cb36:	d106      	bne.n	802cb46 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802cb38:	68fb      	ldr	r3, [r7, #12]
 802cb3a:	2201      	movs	r2, #1
 802cb3c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802cb3e:	68fb      	ldr	r3, [r7, #12]
 802cb40:	2200      	movs	r2, #0
 802cb42:	761a      	strb	r2, [r3, #24]
      break;
 802cb44:	e005      	b.n	802cb52 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802cb46:	7dfb      	ldrb	r3, [r7, #23]
 802cb48:	2b02      	cmp	r3, #2
 802cb4a:	d102      	bne.n	802cb52 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802cb4c:	68fb      	ldr	r3, [r7, #12]
 802cb4e:	2201      	movs	r2, #1
 802cb50:	709a      	strb	r2, [r3, #2]
      break;
 802cb52:	bf00      	nop
  }
  return status;
 802cb54:	7dfb      	ldrb	r3, [r7, #23]
}
 802cb56:	4618      	mov	r0, r3
 802cb58:	3718      	adds	r7, #24
 802cb5a:	46bd      	mov	sp, r7
 802cb5c:	bd80      	pop	{r7, pc}
	...

0802cb60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802cb60:	b580      	push	{r7, lr}
 802cb62:	b086      	sub	sp, #24
 802cb64:	af02      	add	r7, sp, #8
 802cb66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802cb68:	2301      	movs	r3, #1
 802cb6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802cb6c:	2300      	movs	r3, #0
 802cb6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802cb70:	687b      	ldr	r3, [r7, #4]
 802cb72:	7e1b      	ldrb	r3, [r3, #24]
 802cb74:	3b01      	subs	r3, #1
 802cb76:	2b0a      	cmp	r3, #10
 802cb78:	f200 8156 	bhi.w	802ce28 <USBH_HandleControl+0x2c8>
 802cb7c:	a201      	add	r2, pc, #4	; (adr r2, 802cb84 <USBH_HandleControl+0x24>)
 802cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802cb82:	bf00      	nop
 802cb84:	0802cbb1 	.word	0x0802cbb1
 802cb88:	0802cbcb 	.word	0x0802cbcb
 802cb8c:	0802cc35 	.word	0x0802cc35
 802cb90:	0802cc5b 	.word	0x0802cc5b
 802cb94:	0802cc93 	.word	0x0802cc93
 802cb98:	0802ccbd 	.word	0x0802ccbd
 802cb9c:	0802cd0f 	.word	0x0802cd0f
 802cba0:	0802cd31 	.word	0x0802cd31
 802cba4:	0802cd6d 	.word	0x0802cd6d
 802cba8:	0802cd93 	.word	0x0802cd93
 802cbac:	0802cdd1 	.word	0x0802cdd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802cbb0:	687b      	ldr	r3, [r7, #4]
 802cbb2:	f103 0110 	add.w	r1, r3, #16
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	795b      	ldrb	r3, [r3, #5]
 802cbba:	461a      	mov	r2, r3
 802cbbc:	6878      	ldr	r0, [r7, #4]
 802cbbe:	f000 f943 	bl	802ce48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802cbc2:	687b      	ldr	r3, [r7, #4]
 802cbc4:	2202      	movs	r2, #2
 802cbc6:	761a      	strb	r2, [r3, #24]
      break;
 802cbc8:	e139      	b.n	802ce3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cbca:	687b      	ldr	r3, [r7, #4]
 802cbcc:	795b      	ldrb	r3, [r3, #5]
 802cbce:	4619      	mov	r1, r3
 802cbd0:	6878      	ldr	r0, [r7, #4]
 802cbd2:	f000 fccb 	bl	802d56c <USBH_LL_GetURBState>
 802cbd6:	4603      	mov	r3, r0
 802cbd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802cbda:	7bbb      	ldrb	r3, [r7, #14]
 802cbdc:	2b01      	cmp	r3, #1
 802cbde:	d11e      	bne.n	802cc1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802cbe0:	687b      	ldr	r3, [r7, #4]
 802cbe2:	7c1b      	ldrb	r3, [r3, #16]
 802cbe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802cbe8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802cbea:	687b      	ldr	r3, [r7, #4]
 802cbec:	8adb      	ldrh	r3, [r3, #22]
 802cbee:	2b00      	cmp	r3, #0
 802cbf0:	d00a      	beq.n	802cc08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802cbf2:	7b7b      	ldrb	r3, [r7, #13]
 802cbf4:	2b80      	cmp	r3, #128	; 0x80
 802cbf6:	d103      	bne.n	802cc00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802cbf8:	687b      	ldr	r3, [r7, #4]
 802cbfa:	2203      	movs	r2, #3
 802cbfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cbfe:	e115      	b.n	802ce2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802cc00:	687b      	ldr	r3, [r7, #4]
 802cc02:	2205      	movs	r2, #5
 802cc04:	761a      	strb	r2, [r3, #24]
      break;
 802cc06:	e111      	b.n	802ce2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802cc08:	7b7b      	ldrb	r3, [r7, #13]
 802cc0a:	2b80      	cmp	r3, #128	; 0x80
 802cc0c:	d103      	bne.n	802cc16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	2209      	movs	r2, #9
 802cc12:	761a      	strb	r2, [r3, #24]
      break;
 802cc14:	e10a      	b.n	802ce2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802cc16:	687b      	ldr	r3, [r7, #4]
 802cc18:	2207      	movs	r2, #7
 802cc1a:	761a      	strb	r2, [r3, #24]
      break;
 802cc1c:	e106      	b.n	802ce2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802cc1e:	7bbb      	ldrb	r3, [r7, #14]
 802cc20:	2b04      	cmp	r3, #4
 802cc22:	d003      	beq.n	802cc2c <USBH_HandleControl+0xcc>
 802cc24:	7bbb      	ldrb	r3, [r7, #14]
 802cc26:	2b02      	cmp	r3, #2
 802cc28:	f040 8100 	bne.w	802ce2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802cc2c:	687b      	ldr	r3, [r7, #4]
 802cc2e:	220b      	movs	r2, #11
 802cc30:	761a      	strb	r2, [r3, #24]
      break;
 802cc32:	e0fb      	b.n	802ce2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802cc34:	687b      	ldr	r3, [r7, #4]
 802cc36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cc3a:	b29a      	uxth	r2, r3
 802cc3c:	687b      	ldr	r3, [r7, #4]
 802cc3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802cc40:	687b      	ldr	r3, [r7, #4]
 802cc42:	6899      	ldr	r1, [r3, #8]
 802cc44:	687b      	ldr	r3, [r7, #4]
 802cc46:	899a      	ldrh	r2, [r3, #12]
 802cc48:	687b      	ldr	r3, [r7, #4]
 802cc4a:	791b      	ldrb	r3, [r3, #4]
 802cc4c:	6878      	ldr	r0, [r7, #4]
 802cc4e:	f000 f93a 	bl	802cec6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802cc52:	687b      	ldr	r3, [r7, #4]
 802cc54:	2204      	movs	r2, #4
 802cc56:	761a      	strb	r2, [r3, #24]
      break;
 802cc58:	e0f1      	b.n	802ce3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802cc5a:	687b      	ldr	r3, [r7, #4]
 802cc5c:	791b      	ldrb	r3, [r3, #4]
 802cc5e:	4619      	mov	r1, r3
 802cc60:	6878      	ldr	r0, [r7, #4]
 802cc62:	f000 fc83 	bl	802d56c <USBH_LL_GetURBState>
 802cc66:	4603      	mov	r3, r0
 802cc68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802cc6a:	7bbb      	ldrb	r3, [r7, #14]
 802cc6c:	2b01      	cmp	r3, #1
 802cc6e:	d102      	bne.n	802cc76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802cc70:	687b      	ldr	r3, [r7, #4]
 802cc72:	2209      	movs	r2, #9
 802cc74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802cc76:	7bbb      	ldrb	r3, [r7, #14]
 802cc78:	2b05      	cmp	r3, #5
 802cc7a:	d102      	bne.n	802cc82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802cc7c:	2303      	movs	r3, #3
 802cc7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cc80:	e0d6      	b.n	802ce30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802cc82:	7bbb      	ldrb	r3, [r7, #14]
 802cc84:	2b04      	cmp	r3, #4
 802cc86:	f040 80d3 	bne.w	802ce30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802cc8a:	687b      	ldr	r3, [r7, #4]
 802cc8c:	220b      	movs	r2, #11
 802cc8e:	761a      	strb	r2, [r3, #24]
      break;
 802cc90:	e0ce      	b.n	802ce30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802cc92:	687b      	ldr	r3, [r7, #4]
 802cc94:	6899      	ldr	r1, [r3, #8]
 802cc96:	687b      	ldr	r3, [r7, #4]
 802cc98:	899a      	ldrh	r2, [r3, #12]
 802cc9a:	687b      	ldr	r3, [r7, #4]
 802cc9c:	795b      	ldrb	r3, [r3, #5]
 802cc9e:	2001      	movs	r0, #1
 802cca0:	9000      	str	r0, [sp, #0]
 802cca2:	6878      	ldr	r0, [r7, #4]
 802cca4:	f000 f8ea 	bl	802ce7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802cca8:	687b      	ldr	r3, [r7, #4]
 802ccaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802ccae:	b29a      	uxth	r2, r3
 802ccb0:	687b      	ldr	r3, [r7, #4]
 802ccb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802ccb4:	687b      	ldr	r3, [r7, #4]
 802ccb6:	2206      	movs	r2, #6
 802ccb8:	761a      	strb	r2, [r3, #24]
      break;
 802ccba:	e0c0      	b.n	802ce3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802ccbc:	687b      	ldr	r3, [r7, #4]
 802ccbe:	795b      	ldrb	r3, [r3, #5]
 802ccc0:	4619      	mov	r1, r3
 802ccc2:	6878      	ldr	r0, [r7, #4]
 802ccc4:	f000 fc52 	bl	802d56c <USBH_LL_GetURBState>
 802ccc8:	4603      	mov	r3, r0
 802ccca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cccc:	7bbb      	ldrb	r3, [r7, #14]
 802ccce:	2b01      	cmp	r3, #1
 802ccd0:	d103      	bne.n	802ccda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802ccd2:	687b      	ldr	r3, [r7, #4]
 802ccd4:	2207      	movs	r2, #7
 802ccd6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802ccd8:	e0ac      	b.n	802ce34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802ccda:	7bbb      	ldrb	r3, [r7, #14]
 802ccdc:	2b05      	cmp	r3, #5
 802ccde:	d105      	bne.n	802ccec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802cce0:	687b      	ldr	r3, [r7, #4]
 802cce2:	220c      	movs	r2, #12
 802cce4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802cce6:	2303      	movs	r3, #3
 802cce8:	73fb      	strb	r3, [r7, #15]
      break;
 802ccea:	e0a3      	b.n	802ce34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802ccec:	7bbb      	ldrb	r3, [r7, #14]
 802ccee:	2b02      	cmp	r3, #2
 802ccf0:	d103      	bne.n	802ccfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802ccf2:	687b      	ldr	r3, [r7, #4]
 802ccf4:	2205      	movs	r2, #5
 802ccf6:	761a      	strb	r2, [r3, #24]
      break;
 802ccf8:	e09c      	b.n	802ce34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802ccfa:	7bbb      	ldrb	r3, [r7, #14]
 802ccfc:	2b04      	cmp	r3, #4
 802ccfe:	f040 8099 	bne.w	802ce34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802cd02:	687b      	ldr	r3, [r7, #4]
 802cd04:	220b      	movs	r2, #11
 802cd06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802cd08:	2302      	movs	r3, #2
 802cd0a:	73fb      	strb	r3, [r7, #15]
      break;
 802cd0c:	e092      	b.n	802ce34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802cd0e:	687b      	ldr	r3, [r7, #4]
 802cd10:	791b      	ldrb	r3, [r3, #4]
 802cd12:	2200      	movs	r2, #0
 802cd14:	2100      	movs	r1, #0
 802cd16:	6878      	ldr	r0, [r7, #4]
 802cd18:	f000 f8d5 	bl	802cec6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cd1c:	687b      	ldr	r3, [r7, #4]
 802cd1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cd22:	b29a      	uxth	r2, r3
 802cd24:	687b      	ldr	r3, [r7, #4]
 802cd26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802cd28:	687b      	ldr	r3, [r7, #4]
 802cd2a:	2208      	movs	r2, #8
 802cd2c:	761a      	strb	r2, [r3, #24]

      break;
 802cd2e:	e086      	b.n	802ce3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802cd30:	687b      	ldr	r3, [r7, #4]
 802cd32:	791b      	ldrb	r3, [r3, #4]
 802cd34:	4619      	mov	r1, r3
 802cd36:	6878      	ldr	r0, [r7, #4]
 802cd38:	f000 fc18 	bl	802d56c <USBH_LL_GetURBState>
 802cd3c:	4603      	mov	r3, r0
 802cd3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802cd40:	7bbb      	ldrb	r3, [r7, #14]
 802cd42:	2b01      	cmp	r3, #1
 802cd44:	d105      	bne.n	802cd52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802cd46:	687b      	ldr	r3, [r7, #4]
 802cd48:	220d      	movs	r2, #13
 802cd4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802cd4c:	2300      	movs	r3, #0
 802cd4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cd50:	e072      	b.n	802ce38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802cd52:	7bbb      	ldrb	r3, [r7, #14]
 802cd54:	2b04      	cmp	r3, #4
 802cd56:	d103      	bne.n	802cd60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802cd58:	687b      	ldr	r3, [r7, #4]
 802cd5a:	220b      	movs	r2, #11
 802cd5c:	761a      	strb	r2, [r3, #24]
      break;
 802cd5e:	e06b      	b.n	802ce38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802cd60:	7bbb      	ldrb	r3, [r7, #14]
 802cd62:	2b05      	cmp	r3, #5
 802cd64:	d168      	bne.n	802ce38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802cd66:	2303      	movs	r3, #3
 802cd68:	73fb      	strb	r3, [r7, #15]
      break;
 802cd6a:	e065      	b.n	802ce38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802cd6c:	687b      	ldr	r3, [r7, #4]
 802cd6e:	795b      	ldrb	r3, [r3, #5]
 802cd70:	2201      	movs	r2, #1
 802cd72:	9200      	str	r2, [sp, #0]
 802cd74:	2200      	movs	r2, #0
 802cd76:	2100      	movs	r1, #0
 802cd78:	6878      	ldr	r0, [r7, #4]
 802cd7a:	f000 f87f 	bl	802ce7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802cd7e:	687b      	ldr	r3, [r7, #4]
 802cd80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cd84:	b29a      	uxth	r2, r3
 802cd86:	687b      	ldr	r3, [r7, #4]
 802cd88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802cd8a:	687b      	ldr	r3, [r7, #4]
 802cd8c:	220a      	movs	r2, #10
 802cd8e:	761a      	strb	r2, [r3, #24]
      break;
 802cd90:	e055      	b.n	802ce3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802cd92:	687b      	ldr	r3, [r7, #4]
 802cd94:	795b      	ldrb	r3, [r3, #5]
 802cd96:	4619      	mov	r1, r3
 802cd98:	6878      	ldr	r0, [r7, #4]
 802cd9a:	f000 fbe7 	bl	802d56c <USBH_LL_GetURBState>
 802cd9e:	4603      	mov	r3, r0
 802cda0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802cda2:	7bbb      	ldrb	r3, [r7, #14]
 802cda4:	2b01      	cmp	r3, #1
 802cda6:	d105      	bne.n	802cdb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802cda8:	2300      	movs	r3, #0
 802cdaa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802cdac:	687b      	ldr	r3, [r7, #4]
 802cdae:	220d      	movs	r2, #13
 802cdb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802cdb2:	e043      	b.n	802ce3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802cdb4:	7bbb      	ldrb	r3, [r7, #14]
 802cdb6:	2b02      	cmp	r3, #2
 802cdb8:	d103      	bne.n	802cdc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802cdba:	687b      	ldr	r3, [r7, #4]
 802cdbc:	2209      	movs	r2, #9
 802cdbe:	761a      	strb	r2, [r3, #24]
      break;
 802cdc0:	e03c      	b.n	802ce3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802cdc2:	7bbb      	ldrb	r3, [r7, #14]
 802cdc4:	2b04      	cmp	r3, #4
 802cdc6:	d139      	bne.n	802ce3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802cdc8:	687b      	ldr	r3, [r7, #4]
 802cdca:	220b      	movs	r2, #11
 802cdcc:	761a      	strb	r2, [r3, #24]
      break;
 802cdce:	e035      	b.n	802ce3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802cdd0:	687b      	ldr	r3, [r7, #4]
 802cdd2:	7e5b      	ldrb	r3, [r3, #25]
 802cdd4:	3301      	adds	r3, #1
 802cdd6:	b2da      	uxtb	r2, r3
 802cdd8:	687b      	ldr	r3, [r7, #4]
 802cdda:	765a      	strb	r2, [r3, #25]
 802cddc:	687b      	ldr	r3, [r7, #4]
 802cdde:	7e5b      	ldrb	r3, [r3, #25]
 802cde0:	2b02      	cmp	r3, #2
 802cde2:	d806      	bhi.n	802cdf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802cde4:	687b      	ldr	r3, [r7, #4]
 802cde6:	2201      	movs	r2, #1
 802cde8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802cdea:	687b      	ldr	r3, [r7, #4]
 802cdec:	2201      	movs	r2, #1
 802cdee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802cdf0:	e025      	b.n	802ce3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802cdf2:	687b      	ldr	r3, [r7, #4]
 802cdf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802cdf8:	2106      	movs	r1, #6
 802cdfa:	6878      	ldr	r0, [r7, #4]
 802cdfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802cdfe:	687b      	ldr	r3, [r7, #4]
 802ce00:	2200      	movs	r2, #0
 802ce02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ce04:	687b      	ldr	r3, [r7, #4]
 802ce06:	795b      	ldrb	r3, [r3, #5]
 802ce08:	4619      	mov	r1, r3
 802ce0a:	6878      	ldr	r0, [r7, #4]
 802ce0c:	f000 f90c 	bl	802d028 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ce10:	687b      	ldr	r3, [r7, #4]
 802ce12:	791b      	ldrb	r3, [r3, #4]
 802ce14:	4619      	mov	r1, r3
 802ce16:	6878      	ldr	r0, [r7, #4]
 802ce18:	f000 f906 	bl	802d028 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802ce1c:	687b      	ldr	r3, [r7, #4]
 802ce1e:	2200      	movs	r2, #0
 802ce20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802ce22:	2302      	movs	r3, #2
 802ce24:	73fb      	strb	r3, [r7, #15]
      break;
 802ce26:	e00a      	b.n	802ce3e <USBH_HandleControl+0x2de>

    default:
      break;
 802ce28:	bf00      	nop
 802ce2a:	e008      	b.n	802ce3e <USBH_HandleControl+0x2de>
      break;
 802ce2c:	bf00      	nop
 802ce2e:	e006      	b.n	802ce3e <USBH_HandleControl+0x2de>
      break;
 802ce30:	bf00      	nop
 802ce32:	e004      	b.n	802ce3e <USBH_HandleControl+0x2de>
      break;
 802ce34:	bf00      	nop
 802ce36:	e002      	b.n	802ce3e <USBH_HandleControl+0x2de>
      break;
 802ce38:	bf00      	nop
 802ce3a:	e000      	b.n	802ce3e <USBH_HandleControl+0x2de>
      break;
 802ce3c:	bf00      	nop
  }

  return status;
 802ce3e:	7bfb      	ldrb	r3, [r7, #15]
}
 802ce40:	4618      	mov	r0, r3
 802ce42:	3710      	adds	r7, #16
 802ce44:	46bd      	mov	sp, r7
 802ce46:	bd80      	pop	{r7, pc}

0802ce48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802ce48:	b580      	push	{r7, lr}
 802ce4a:	b088      	sub	sp, #32
 802ce4c:	af04      	add	r7, sp, #16
 802ce4e:	60f8      	str	r0, [r7, #12]
 802ce50:	60b9      	str	r1, [r7, #8]
 802ce52:	4613      	mov	r3, r2
 802ce54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802ce56:	79f9      	ldrb	r1, [r7, #7]
 802ce58:	2300      	movs	r3, #0
 802ce5a:	9303      	str	r3, [sp, #12]
 802ce5c:	2308      	movs	r3, #8
 802ce5e:	9302      	str	r3, [sp, #8]
 802ce60:	68bb      	ldr	r3, [r7, #8]
 802ce62:	9301      	str	r3, [sp, #4]
 802ce64:	2300      	movs	r3, #0
 802ce66:	9300      	str	r3, [sp, #0]
 802ce68:	2300      	movs	r3, #0
 802ce6a:	2200      	movs	r2, #0
 802ce6c:	68f8      	ldr	r0, [r7, #12]
 802ce6e:	f000 fb4c 	bl	802d50a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802ce72:	2300      	movs	r3, #0
}
 802ce74:	4618      	mov	r0, r3
 802ce76:	3710      	adds	r7, #16
 802ce78:	46bd      	mov	sp, r7
 802ce7a:	bd80      	pop	{r7, pc}

0802ce7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802ce7c:	b580      	push	{r7, lr}
 802ce7e:	b088      	sub	sp, #32
 802ce80:	af04      	add	r7, sp, #16
 802ce82:	60f8      	str	r0, [r7, #12]
 802ce84:	60b9      	str	r1, [r7, #8]
 802ce86:	4611      	mov	r1, r2
 802ce88:	461a      	mov	r2, r3
 802ce8a:	460b      	mov	r3, r1
 802ce8c:	80fb      	strh	r3, [r7, #6]
 802ce8e:	4613      	mov	r3, r2
 802ce90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802ce92:	68fb      	ldr	r3, [r7, #12]
 802ce94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ce98:	2b00      	cmp	r3, #0
 802ce9a:	d001      	beq.n	802cea0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802ce9c:	2300      	movs	r3, #0
 802ce9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cea0:	7979      	ldrb	r1, [r7, #5]
 802cea2:	7e3b      	ldrb	r3, [r7, #24]
 802cea4:	9303      	str	r3, [sp, #12]
 802cea6:	88fb      	ldrh	r3, [r7, #6]
 802cea8:	9302      	str	r3, [sp, #8]
 802ceaa:	68bb      	ldr	r3, [r7, #8]
 802ceac:	9301      	str	r3, [sp, #4]
 802ceae:	2301      	movs	r3, #1
 802ceb0:	9300      	str	r3, [sp, #0]
 802ceb2:	2300      	movs	r3, #0
 802ceb4:	2200      	movs	r2, #0
 802ceb6:	68f8      	ldr	r0, [r7, #12]
 802ceb8:	f000 fb27 	bl	802d50a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802cebc:	2300      	movs	r3, #0
}
 802cebe:	4618      	mov	r0, r3
 802cec0:	3710      	adds	r7, #16
 802cec2:	46bd      	mov	sp, r7
 802cec4:	bd80      	pop	{r7, pc}

0802cec6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802cec6:	b580      	push	{r7, lr}
 802cec8:	b088      	sub	sp, #32
 802ceca:	af04      	add	r7, sp, #16
 802cecc:	60f8      	str	r0, [r7, #12]
 802cece:	60b9      	str	r1, [r7, #8]
 802ced0:	4611      	mov	r1, r2
 802ced2:	461a      	mov	r2, r3
 802ced4:	460b      	mov	r3, r1
 802ced6:	80fb      	strh	r3, [r7, #6]
 802ced8:	4613      	mov	r3, r2
 802ceda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cedc:	7979      	ldrb	r1, [r7, #5]
 802cede:	2300      	movs	r3, #0
 802cee0:	9303      	str	r3, [sp, #12]
 802cee2:	88fb      	ldrh	r3, [r7, #6]
 802cee4:	9302      	str	r3, [sp, #8]
 802cee6:	68bb      	ldr	r3, [r7, #8]
 802cee8:	9301      	str	r3, [sp, #4]
 802ceea:	2301      	movs	r3, #1
 802ceec:	9300      	str	r3, [sp, #0]
 802ceee:	2300      	movs	r3, #0
 802cef0:	2201      	movs	r2, #1
 802cef2:	68f8      	ldr	r0, [r7, #12]
 802cef4:	f000 fb09 	bl	802d50a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cef8:	2300      	movs	r3, #0

}
 802cefa:	4618      	mov	r0, r3
 802cefc:	3710      	adds	r7, #16
 802cefe:	46bd      	mov	sp, r7
 802cf00:	bd80      	pop	{r7, pc}

0802cf02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802cf02:	b580      	push	{r7, lr}
 802cf04:	b088      	sub	sp, #32
 802cf06:	af04      	add	r7, sp, #16
 802cf08:	60f8      	str	r0, [r7, #12]
 802cf0a:	60b9      	str	r1, [r7, #8]
 802cf0c:	4611      	mov	r1, r2
 802cf0e:	461a      	mov	r2, r3
 802cf10:	460b      	mov	r3, r1
 802cf12:	80fb      	strh	r3, [r7, #6]
 802cf14:	4613      	mov	r3, r2
 802cf16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802cf18:	68fb      	ldr	r3, [r7, #12]
 802cf1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802cf1e:	2b00      	cmp	r3, #0
 802cf20:	d001      	beq.n	802cf26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802cf22:	2300      	movs	r3, #0
 802cf24:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cf26:	7979      	ldrb	r1, [r7, #5]
 802cf28:	7e3b      	ldrb	r3, [r7, #24]
 802cf2a:	9303      	str	r3, [sp, #12]
 802cf2c:	88fb      	ldrh	r3, [r7, #6]
 802cf2e:	9302      	str	r3, [sp, #8]
 802cf30:	68bb      	ldr	r3, [r7, #8]
 802cf32:	9301      	str	r3, [sp, #4]
 802cf34:	2301      	movs	r3, #1
 802cf36:	9300      	str	r3, [sp, #0]
 802cf38:	2302      	movs	r3, #2
 802cf3a:	2200      	movs	r2, #0
 802cf3c:	68f8      	ldr	r0, [r7, #12]
 802cf3e:	f000 fae4 	bl	802d50a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802cf42:	2300      	movs	r3, #0
}
 802cf44:	4618      	mov	r0, r3
 802cf46:	3710      	adds	r7, #16
 802cf48:	46bd      	mov	sp, r7
 802cf4a:	bd80      	pop	{r7, pc}

0802cf4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802cf4c:	b580      	push	{r7, lr}
 802cf4e:	b088      	sub	sp, #32
 802cf50:	af04      	add	r7, sp, #16
 802cf52:	60f8      	str	r0, [r7, #12]
 802cf54:	60b9      	str	r1, [r7, #8]
 802cf56:	4611      	mov	r1, r2
 802cf58:	461a      	mov	r2, r3
 802cf5a:	460b      	mov	r3, r1
 802cf5c:	80fb      	strh	r3, [r7, #6]
 802cf5e:	4613      	mov	r3, r2
 802cf60:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802cf62:	7979      	ldrb	r1, [r7, #5]
 802cf64:	2300      	movs	r3, #0
 802cf66:	9303      	str	r3, [sp, #12]
 802cf68:	88fb      	ldrh	r3, [r7, #6]
 802cf6a:	9302      	str	r3, [sp, #8]
 802cf6c:	68bb      	ldr	r3, [r7, #8]
 802cf6e:	9301      	str	r3, [sp, #4]
 802cf70:	2301      	movs	r3, #1
 802cf72:	9300      	str	r3, [sp, #0]
 802cf74:	2302      	movs	r3, #2
 802cf76:	2201      	movs	r2, #1
 802cf78:	68f8      	ldr	r0, [r7, #12]
 802cf7a:	f000 fac6 	bl	802d50a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802cf7e:	2300      	movs	r3, #0
}
 802cf80:	4618      	mov	r0, r3
 802cf82:	3710      	adds	r7, #16
 802cf84:	46bd      	mov	sp, r7
 802cf86:	bd80      	pop	{r7, pc}

0802cf88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802cf88:	b580      	push	{r7, lr}
 802cf8a:	b086      	sub	sp, #24
 802cf8c:	af04      	add	r7, sp, #16
 802cf8e:	6078      	str	r0, [r7, #4]
 802cf90:	4608      	mov	r0, r1
 802cf92:	4611      	mov	r1, r2
 802cf94:	461a      	mov	r2, r3
 802cf96:	4603      	mov	r3, r0
 802cf98:	70fb      	strb	r3, [r7, #3]
 802cf9a:	460b      	mov	r3, r1
 802cf9c:	70bb      	strb	r3, [r7, #2]
 802cf9e:	4613      	mov	r3, r2
 802cfa0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802cfa2:	7878      	ldrb	r0, [r7, #1]
 802cfa4:	78ba      	ldrb	r2, [r7, #2]
 802cfa6:	78f9      	ldrb	r1, [r7, #3]
 802cfa8:	8b3b      	ldrh	r3, [r7, #24]
 802cfaa:	9302      	str	r3, [sp, #8]
 802cfac:	7d3b      	ldrb	r3, [r7, #20]
 802cfae:	9301      	str	r3, [sp, #4]
 802cfb0:	7c3b      	ldrb	r3, [r7, #16]
 802cfb2:	9300      	str	r3, [sp, #0]
 802cfb4:	4603      	mov	r3, r0
 802cfb6:	6878      	ldr	r0, [r7, #4]
 802cfb8:	f000 fa59 	bl	802d46e <USBH_LL_OpenPipe>

  return USBH_OK;
 802cfbc:	2300      	movs	r3, #0
}
 802cfbe:	4618      	mov	r0, r3
 802cfc0:	3708      	adds	r7, #8
 802cfc2:	46bd      	mov	sp, r7
 802cfc4:	bd80      	pop	{r7, pc}

0802cfc6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802cfc6:	b580      	push	{r7, lr}
 802cfc8:	b082      	sub	sp, #8
 802cfca:	af00      	add	r7, sp, #0
 802cfcc:	6078      	str	r0, [r7, #4]
 802cfce:	460b      	mov	r3, r1
 802cfd0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802cfd2:	78fb      	ldrb	r3, [r7, #3]
 802cfd4:	4619      	mov	r1, r3
 802cfd6:	6878      	ldr	r0, [r7, #4]
 802cfd8:	f000 fa78 	bl	802d4cc <USBH_LL_ClosePipe>

  return USBH_OK;
 802cfdc:	2300      	movs	r3, #0
}
 802cfde:	4618      	mov	r0, r3
 802cfe0:	3708      	adds	r7, #8
 802cfe2:	46bd      	mov	sp, r7
 802cfe4:	bd80      	pop	{r7, pc}

0802cfe6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802cfe6:	b580      	push	{r7, lr}
 802cfe8:	b084      	sub	sp, #16
 802cfea:	af00      	add	r7, sp, #0
 802cfec:	6078      	str	r0, [r7, #4]
 802cfee:	460b      	mov	r3, r1
 802cff0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802cff2:	6878      	ldr	r0, [r7, #4]
 802cff4:	f000 f836 	bl	802d064 <USBH_GetFreePipe>
 802cff8:	4603      	mov	r3, r0
 802cffa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802cffc:	89fb      	ldrh	r3, [r7, #14]
 802cffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d002:	4293      	cmp	r3, r2
 802d004:	d00a      	beq.n	802d01c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d006:	78fa      	ldrb	r2, [r7, #3]
 802d008:	89fb      	ldrh	r3, [r7, #14]
 802d00a:	f003 030f 	and.w	r3, r3, #15
 802d00e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d012:	6879      	ldr	r1, [r7, #4]
 802d014:	33e0      	adds	r3, #224	; 0xe0
 802d016:	009b      	lsls	r3, r3, #2
 802d018:	440b      	add	r3, r1
 802d01a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d01c:	89fb      	ldrh	r3, [r7, #14]
 802d01e:	b2db      	uxtb	r3, r3
}
 802d020:	4618      	mov	r0, r3
 802d022:	3710      	adds	r7, #16
 802d024:	46bd      	mov	sp, r7
 802d026:	bd80      	pop	{r7, pc}

0802d028 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d028:	b480      	push	{r7}
 802d02a:	b083      	sub	sp, #12
 802d02c:	af00      	add	r7, sp, #0
 802d02e:	6078      	str	r0, [r7, #4]
 802d030:	460b      	mov	r3, r1
 802d032:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d034:	78fb      	ldrb	r3, [r7, #3]
 802d036:	2b0f      	cmp	r3, #15
 802d038:	d80d      	bhi.n	802d056 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d03a:	78fb      	ldrb	r3, [r7, #3]
 802d03c:	687a      	ldr	r2, [r7, #4]
 802d03e:	33e0      	adds	r3, #224	; 0xe0
 802d040:	009b      	lsls	r3, r3, #2
 802d042:	4413      	add	r3, r2
 802d044:	685a      	ldr	r2, [r3, #4]
 802d046:	78fb      	ldrb	r3, [r7, #3]
 802d048:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d04c:	6879      	ldr	r1, [r7, #4]
 802d04e:	33e0      	adds	r3, #224	; 0xe0
 802d050:	009b      	lsls	r3, r3, #2
 802d052:	440b      	add	r3, r1
 802d054:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d056:	2300      	movs	r3, #0
}
 802d058:	4618      	mov	r0, r3
 802d05a:	370c      	adds	r7, #12
 802d05c:	46bd      	mov	sp, r7
 802d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d062:	4770      	bx	lr

0802d064 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802d064:	b480      	push	{r7}
 802d066:	b085      	sub	sp, #20
 802d068:	af00      	add	r7, sp, #0
 802d06a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802d06c:	2300      	movs	r3, #0
 802d06e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d070:	2300      	movs	r3, #0
 802d072:	73fb      	strb	r3, [r7, #15]
 802d074:	e00f      	b.n	802d096 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802d076:	7bfb      	ldrb	r3, [r7, #15]
 802d078:	687a      	ldr	r2, [r7, #4]
 802d07a:	33e0      	adds	r3, #224	; 0xe0
 802d07c:	009b      	lsls	r3, r3, #2
 802d07e:	4413      	add	r3, r2
 802d080:	685b      	ldr	r3, [r3, #4]
 802d082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d086:	2b00      	cmp	r3, #0
 802d088:	d102      	bne.n	802d090 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802d08a:	7bfb      	ldrb	r3, [r7, #15]
 802d08c:	b29b      	uxth	r3, r3
 802d08e:	e007      	b.n	802d0a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d090:	7bfb      	ldrb	r3, [r7, #15]
 802d092:	3301      	adds	r3, #1
 802d094:	73fb      	strb	r3, [r7, #15]
 802d096:	7bfb      	ldrb	r3, [r7, #15]
 802d098:	2b0f      	cmp	r3, #15
 802d09a:	d9ec      	bls.n	802d076 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802d09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802d0a0:	4618      	mov	r0, r3
 802d0a2:	3714      	adds	r7, #20
 802d0a4:	46bd      	mov	sp, r7
 802d0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d0aa:	4770      	bx	lr

0802d0ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802d0ac:	b580      	push	{r7, lr}
 802d0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802d0b0:	2200      	movs	r2, #0
 802d0b2:	490e      	ldr	r1, [pc, #56]	; (802d0ec <MX_USB_HOST_Init+0x40>)
 802d0b4:	480e      	ldr	r0, [pc, #56]	; (802d0f0 <MX_USB_HOST_Init+0x44>)
 802d0b6:	f7fe fba7 	bl	802b808 <USBH_Init>
 802d0ba:	4603      	mov	r3, r0
 802d0bc:	2b00      	cmp	r3, #0
 802d0be:	d001      	beq.n	802d0c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802d0c0:	f7f3 ff28 	bl	8020f14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802d0c4:	490b      	ldr	r1, [pc, #44]	; (802d0f4 <MX_USB_HOST_Init+0x48>)
 802d0c6:	480a      	ldr	r0, [pc, #40]	; (802d0f0 <MX_USB_HOST_Init+0x44>)
 802d0c8:	f7fe fc2c 	bl	802b924 <USBH_RegisterClass>
 802d0cc:	4603      	mov	r3, r0
 802d0ce:	2b00      	cmp	r3, #0
 802d0d0:	d001      	beq.n	802d0d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802d0d2:	f7f3 ff1f 	bl	8020f14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802d0d6:	4806      	ldr	r0, [pc, #24]	; (802d0f0 <MX_USB_HOST_Init+0x44>)
 802d0d8:	f7fe fcb0 	bl	802ba3c <USBH_Start>
 802d0dc:	4603      	mov	r3, r0
 802d0de:	2b00      	cmp	r3, #0
 802d0e0:	d001      	beq.n	802d0e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802d0e2:	f7f3 ff17 	bl	8020f14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802d0e6:	bf00      	nop
 802d0e8:	bd80      	pop	{r7, pc}
 802d0ea:	bf00      	nop
 802d0ec:	0802d10d 	.word	0x0802d10d
 802d0f0:	20000ae8 	.word	0x20000ae8
 802d0f4:	20000060 	.word	0x20000060

0802d0f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802d0f8:	b580      	push	{r7, lr}
 802d0fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802d0fc:	4802      	ldr	r0, [pc, #8]	; (802d108 <MX_USB_HOST_Process+0x10>)
 802d0fe:	f7fe fcad 	bl	802ba5c <USBH_Process>
}
 802d102:	bf00      	nop
 802d104:	bd80      	pop	{r7, pc}
 802d106:	bf00      	nop
 802d108:	20000ae8 	.word	0x20000ae8

0802d10c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802d10c:	b480      	push	{r7}
 802d10e:	b083      	sub	sp, #12
 802d110:	af00      	add	r7, sp, #0
 802d112:	6078      	str	r0, [r7, #4]
 802d114:	460b      	mov	r3, r1
 802d116:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802d118:	78fb      	ldrb	r3, [r7, #3]
 802d11a:	3b01      	subs	r3, #1
 802d11c:	2b04      	cmp	r3, #4
 802d11e:	d819      	bhi.n	802d154 <USBH_UserProcess+0x48>
 802d120:	a201      	add	r2, pc, #4	; (adr r2, 802d128 <USBH_UserProcess+0x1c>)
 802d122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d126:	bf00      	nop
 802d128:	0802d155 	.word	0x0802d155
 802d12c:	0802d145 	.word	0x0802d145
 802d130:	0802d155 	.word	0x0802d155
 802d134:	0802d14d 	.word	0x0802d14d
 802d138:	0802d13d 	.word	0x0802d13d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802d13c:	4b09      	ldr	r3, [pc, #36]	; (802d164 <USBH_UserProcess+0x58>)
 802d13e:	2203      	movs	r2, #3
 802d140:	701a      	strb	r2, [r3, #0]
  break;
 802d142:	e008      	b.n	802d156 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802d144:	4b07      	ldr	r3, [pc, #28]	; (802d164 <USBH_UserProcess+0x58>)
 802d146:	2202      	movs	r2, #2
 802d148:	701a      	strb	r2, [r3, #0]
  break;
 802d14a:	e004      	b.n	802d156 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802d14c:	4b05      	ldr	r3, [pc, #20]	; (802d164 <USBH_UserProcess+0x58>)
 802d14e:	2201      	movs	r2, #1
 802d150:	701a      	strb	r2, [r3, #0]
  break;
 802d152:	e000      	b.n	802d156 <USBH_UserProcess+0x4a>

  default:
  break;
 802d154:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802d156:	bf00      	nop
 802d158:	370c      	adds	r7, #12
 802d15a:	46bd      	mov	sp, r7
 802d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d160:	4770      	bx	lr
 802d162:	bf00      	nop
 802d164:	20000ec0 	.word	0x20000ec0

0802d168 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802d168:	b580      	push	{r7, lr}
 802d16a:	b08a      	sub	sp, #40	; 0x28
 802d16c:	af00      	add	r7, sp, #0
 802d16e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802d170:	f107 0314 	add.w	r3, r7, #20
 802d174:	2200      	movs	r2, #0
 802d176:	601a      	str	r2, [r3, #0]
 802d178:	605a      	str	r2, [r3, #4]
 802d17a:	609a      	str	r2, [r3, #8]
 802d17c:	60da      	str	r2, [r3, #12]
 802d17e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802d180:	687b      	ldr	r3, [r7, #4]
 802d182:	681b      	ldr	r3, [r3, #0]
 802d184:	4a24      	ldr	r2, [pc, #144]	; (802d218 <HAL_HCD_MspInit+0xb0>)
 802d186:	4293      	cmp	r3, r2
 802d188:	d141      	bne.n	802d20e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802d18a:	2300      	movs	r3, #0
 802d18c:	613b      	str	r3, [r7, #16]
 802d18e:	4b23      	ldr	r3, [pc, #140]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d192:	4a22      	ldr	r2, [pc, #136]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d194:	f043 0302 	orr.w	r3, r3, #2
 802d198:	6313      	str	r3, [r2, #48]	; 0x30
 802d19a:	4b20      	ldr	r3, [pc, #128]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d19e:	f003 0302 	and.w	r3, r3, #2
 802d1a2:	613b      	str	r3, [r7, #16]
 802d1a4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802d1a6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802d1aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802d1ac:	2302      	movs	r3, #2
 802d1ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d1b0:	2300      	movs	r3, #0
 802d1b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802d1b4:	2300      	movs	r3, #0
 802d1b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802d1b8:	230c      	movs	r3, #12
 802d1ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802d1bc:	f107 0314 	add.w	r3, r7, #20
 802d1c0:	4619      	mov	r1, r3
 802d1c2:	4817      	ldr	r0, [pc, #92]	; (802d220 <HAL_HCD_MspInit+0xb8>)
 802d1c4:	f7f7 fbe0 	bl	8024988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802d1c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802d1cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802d1ce:	2300      	movs	r3, #0
 802d1d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802d1d2:	2300      	movs	r3, #0
 802d1d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802d1d6:	f107 0314 	add.w	r3, r7, #20
 802d1da:	4619      	mov	r1, r3
 802d1dc:	4810      	ldr	r0, [pc, #64]	; (802d220 <HAL_HCD_MspInit+0xb8>)
 802d1de:	f7f7 fbd3 	bl	8024988 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802d1e2:	2300      	movs	r3, #0
 802d1e4:	60fb      	str	r3, [r7, #12]
 802d1e6:	4b0d      	ldr	r3, [pc, #52]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d1ea:	4a0c      	ldr	r2, [pc, #48]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d1ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802d1f0:	6313      	str	r3, [r2, #48]	; 0x30
 802d1f2:	4b0a      	ldr	r3, [pc, #40]	; (802d21c <HAL_HCD_MspInit+0xb4>)
 802d1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d1f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802d1fa:	60fb      	str	r3, [r7, #12]
 802d1fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802d1fe:	2200      	movs	r2, #0
 802d200:	2100      	movs	r1, #0
 802d202:	204d      	movs	r0, #77	; 0x4d
 802d204:	f7f6 fb1a 	bl	802383c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802d208:	204d      	movs	r0, #77	; 0x4d
 802d20a:	f7f6 fb33 	bl	8023874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802d20e:	bf00      	nop
 802d210:	3728      	adds	r7, #40	; 0x28
 802d212:	46bd      	mov	sp, r7
 802d214:	bd80      	pop	{r7, pc}
 802d216:	bf00      	nop
 802d218:	40040000 	.word	0x40040000
 802d21c:	40023800 	.word	0x40023800
 802d220:	40020400 	.word	0x40020400

0802d224 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802d224:	b580      	push	{r7, lr}
 802d226:	b082      	sub	sp, #8
 802d228:	af00      	add	r7, sp, #0
 802d22a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802d22c:	687b      	ldr	r3, [r7, #4]
 802d22e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d232:	4618      	mov	r0, r3
 802d234:	f7fe fff1 	bl	802c21a <USBH_LL_IncTimer>
}
 802d238:	bf00      	nop
 802d23a:	3708      	adds	r7, #8
 802d23c:	46bd      	mov	sp, r7
 802d23e:	bd80      	pop	{r7, pc}

0802d240 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d240:	b580      	push	{r7, lr}
 802d242:	b082      	sub	sp, #8
 802d244:	af00      	add	r7, sp, #0
 802d246:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802d248:	687b      	ldr	r3, [r7, #4]
 802d24a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d24e:	4618      	mov	r0, r3
 802d250:	f7ff f829 	bl	802c2a6 <USBH_LL_Connect>
}
 802d254:	bf00      	nop
 802d256:	3708      	adds	r7, #8
 802d258:	46bd      	mov	sp, r7
 802d25a:	bd80      	pop	{r7, pc}

0802d25c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802d25c:	b580      	push	{r7, lr}
 802d25e:	b082      	sub	sp, #8
 802d260:	af00      	add	r7, sp, #0
 802d262:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802d264:	687b      	ldr	r3, [r7, #4]
 802d266:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d26a:	4618      	mov	r0, r3
 802d26c:	f7ff f832 	bl	802c2d4 <USBH_LL_Disconnect>
}
 802d270:	bf00      	nop
 802d272:	3708      	adds	r7, #8
 802d274:	46bd      	mov	sp, r7
 802d276:	bd80      	pop	{r7, pc}

0802d278 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802d278:	b480      	push	{r7}
 802d27a:	b083      	sub	sp, #12
 802d27c:	af00      	add	r7, sp, #0
 802d27e:	6078      	str	r0, [r7, #4]
 802d280:	460b      	mov	r3, r1
 802d282:	70fb      	strb	r3, [r7, #3]
 802d284:	4613      	mov	r3, r2
 802d286:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802d288:	bf00      	nop
 802d28a:	370c      	adds	r7, #12
 802d28c:	46bd      	mov	sp, r7
 802d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d292:	4770      	bx	lr

0802d294 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d294:	b580      	push	{r7, lr}
 802d296:	b082      	sub	sp, #8
 802d298:	af00      	add	r7, sp, #0
 802d29a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802d29c:	687b      	ldr	r3, [r7, #4]
 802d29e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d2a2:	4618      	mov	r0, r3
 802d2a4:	f7fe ffe3 	bl	802c26e <USBH_LL_PortEnabled>
}
 802d2a8:	bf00      	nop
 802d2aa:	3708      	adds	r7, #8
 802d2ac:	46bd      	mov	sp, r7
 802d2ae:	bd80      	pop	{r7, pc}

0802d2b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802d2b0:	b580      	push	{r7, lr}
 802d2b2:	b082      	sub	sp, #8
 802d2b4:	af00      	add	r7, sp, #0
 802d2b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802d2b8:	687b      	ldr	r3, [r7, #4]
 802d2ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802d2be:	4618      	mov	r0, r3
 802d2c0:	f7fe ffe3 	bl	802c28a <USBH_LL_PortDisabled>
}
 802d2c4:	bf00      	nop
 802d2c6:	3708      	adds	r7, #8
 802d2c8:	46bd      	mov	sp, r7
 802d2ca:	bd80      	pop	{r7, pc}

0802d2cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802d2cc:	b580      	push	{r7, lr}
 802d2ce:	b082      	sub	sp, #8
 802d2d0:	af00      	add	r7, sp, #0
 802d2d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802d2d4:	687b      	ldr	r3, [r7, #4]
 802d2d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d2da:	2b00      	cmp	r3, #0
 802d2dc:	d132      	bne.n	802d344 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802d2de:	4a1c      	ldr	r2, [pc, #112]	; (802d350 <USBH_LL_Init+0x84>)
 802d2e0:	687b      	ldr	r3, [r7, #4]
 802d2e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802d2e6:	687b      	ldr	r3, [r7, #4]
 802d2e8:	4a19      	ldr	r2, [pc, #100]	; (802d350 <USBH_LL_Init+0x84>)
 802d2ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802d2ee:	4b18      	ldr	r3, [pc, #96]	; (802d350 <USBH_LL_Init+0x84>)
 802d2f0:	4a18      	ldr	r2, [pc, #96]	; (802d354 <USBH_LL_Init+0x88>)
 802d2f2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802d2f4:	4b16      	ldr	r3, [pc, #88]	; (802d350 <USBH_LL_Init+0x84>)
 802d2f6:	220c      	movs	r2, #12
 802d2f8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802d2fa:	4b15      	ldr	r3, [pc, #84]	; (802d350 <USBH_LL_Init+0x84>)
 802d2fc:	2201      	movs	r2, #1
 802d2fe:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802d300:	4b13      	ldr	r3, [pc, #76]	; (802d350 <USBH_LL_Init+0x84>)
 802d302:	2200      	movs	r2, #0
 802d304:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802d306:	4b12      	ldr	r3, [pc, #72]	; (802d350 <USBH_LL_Init+0x84>)
 802d308:	2202      	movs	r2, #2
 802d30a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802d30c:	4b10      	ldr	r3, [pc, #64]	; (802d350 <USBH_LL_Init+0x84>)
 802d30e:	2200      	movs	r2, #0
 802d310:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802d312:	4b0f      	ldr	r3, [pc, #60]	; (802d350 <USBH_LL_Init+0x84>)
 802d314:	2200      	movs	r2, #0
 802d316:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802d318:	4b0d      	ldr	r3, [pc, #52]	; (802d350 <USBH_LL_Init+0x84>)
 802d31a:	2200      	movs	r2, #0
 802d31c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802d31e:	4b0c      	ldr	r3, [pc, #48]	; (802d350 <USBH_LL_Init+0x84>)
 802d320:	2200      	movs	r2, #0
 802d322:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802d324:	480a      	ldr	r0, [pc, #40]	; (802d350 <USBH_LL_Init+0x84>)
 802d326:	f7f7 fe19 	bl	8024f5c <HAL_HCD_Init>
 802d32a:	4603      	mov	r3, r0
 802d32c:	2b00      	cmp	r3, #0
 802d32e:	d001      	beq.n	802d334 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802d330:	f7f3 fdf0 	bl	8020f14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802d334:	4806      	ldr	r0, [pc, #24]	; (802d350 <USBH_LL_Init+0x84>)
 802d336:	f7f8 f9fc 	bl	8025732 <HAL_HCD_GetCurrentFrame>
 802d33a:	4603      	mov	r3, r0
 802d33c:	4619      	mov	r1, r3
 802d33e:	6878      	ldr	r0, [r7, #4]
 802d340:	f7fe ff5c 	bl	802c1fc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802d344:	2300      	movs	r3, #0
}
 802d346:	4618      	mov	r0, r3
 802d348:	3708      	adds	r7, #8
 802d34a:	46bd      	mov	sp, r7
 802d34c:	bd80      	pop	{r7, pc}
 802d34e:	bf00      	nop
 802d350:	20000ec4 	.word	0x20000ec4
 802d354:	40040000 	.word	0x40040000

0802d358 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802d358:	b580      	push	{r7, lr}
 802d35a:	b084      	sub	sp, #16
 802d35c:	af00      	add	r7, sp, #0
 802d35e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d360:	2300      	movs	r3, #0
 802d362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d364:	2300      	movs	r3, #0
 802d366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802d368:	687b      	ldr	r3, [r7, #4]
 802d36a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d36e:	4618      	mov	r0, r3
 802d370:	f7f8 f969 	bl	8025646 <HAL_HCD_Start>
 802d374:	4603      	mov	r3, r0
 802d376:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d378:	7bfb      	ldrb	r3, [r7, #15]
 802d37a:	4618      	mov	r0, r3
 802d37c:	f000 f95c 	bl	802d638 <USBH_Get_USB_Status>
 802d380:	4603      	mov	r3, r0
 802d382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d384:	7bbb      	ldrb	r3, [r7, #14]
}
 802d386:	4618      	mov	r0, r3
 802d388:	3710      	adds	r7, #16
 802d38a:	46bd      	mov	sp, r7
 802d38c:	bd80      	pop	{r7, pc}

0802d38e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802d38e:	b580      	push	{r7, lr}
 802d390:	b084      	sub	sp, #16
 802d392:	af00      	add	r7, sp, #0
 802d394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d396:	2300      	movs	r3, #0
 802d398:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d39a:	2300      	movs	r3, #0
 802d39c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802d39e:	687b      	ldr	r3, [r7, #4]
 802d3a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d3a4:	4618      	mov	r0, r3
 802d3a6:	f7f8 f971 	bl	802568c <HAL_HCD_Stop>
 802d3aa:	4603      	mov	r3, r0
 802d3ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d3ae:	7bfb      	ldrb	r3, [r7, #15]
 802d3b0:	4618      	mov	r0, r3
 802d3b2:	f000 f941 	bl	802d638 <USBH_Get_USB_Status>
 802d3b6:	4603      	mov	r3, r0
 802d3b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d3ba:	7bbb      	ldrb	r3, [r7, #14]
}
 802d3bc:	4618      	mov	r0, r3
 802d3be:	3710      	adds	r7, #16
 802d3c0:	46bd      	mov	sp, r7
 802d3c2:	bd80      	pop	{r7, pc}

0802d3c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802d3c4:	b580      	push	{r7, lr}
 802d3c6:	b084      	sub	sp, #16
 802d3c8:	af00      	add	r7, sp, #0
 802d3ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802d3cc:	2301      	movs	r3, #1
 802d3ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802d3d0:	687b      	ldr	r3, [r7, #4]
 802d3d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d3d6:	4618      	mov	r0, r3
 802d3d8:	f7f8 f9b9 	bl	802574e <HAL_HCD_GetCurrentSpeed>
 802d3dc:	4603      	mov	r3, r0
 802d3de:	2b02      	cmp	r3, #2
 802d3e0:	d00c      	beq.n	802d3fc <USBH_LL_GetSpeed+0x38>
 802d3e2:	2b02      	cmp	r3, #2
 802d3e4:	d80d      	bhi.n	802d402 <USBH_LL_GetSpeed+0x3e>
 802d3e6:	2b00      	cmp	r3, #0
 802d3e8:	d002      	beq.n	802d3f0 <USBH_LL_GetSpeed+0x2c>
 802d3ea:	2b01      	cmp	r3, #1
 802d3ec:	d003      	beq.n	802d3f6 <USBH_LL_GetSpeed+0x32>
 802d3ee:	e008      	b.n	802d402 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802d3f0:	2300      	movs	r3, #0
 802d3f2:	73fb      	strb	r3, [r7, #15]
    break;
 802d3f4:	e008      	b.n	802d408 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802d3f6:	2301      	movs	r3, #1
 802d3f8:	73fb      	strb	r3, [r7, #15]
    break;
 802d3fa:	e005      	b.n	802d408 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802d3fc:	2302      	movs	r3, #2
 802d3fe:	73fb      	strb	r3, [r7, #15]
    break;
 802d400:	e002      	b.n	802d408 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802d402:	2301      	movs	r3, #1
 802d404:	73fb      	strb	r3, [r7, #15]
    break;
 802d406:	bf00      	nop
  }
  return  speed;
 802d408:	7bfb      	ldrb	r3, [r7, #15]
}
 802d40a:	4618      	mov	r0, r3
 802d40c:	3710      	adds	r7, #16
 802d40e:	46bd      	mov	sp, r7
 802d410:	bd80      	pop	{r7, pc}

0802d412 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802d412:	b580      	push	{r7, lr}
 802d414:	b084      	sub	sp, #16
 802d416:	af00      	add	r7, sp, #0
 802d418:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d41a:	2300      	movs	r3, #0
 802d41c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d41e:	2300      	movs	r3, #0
 802d420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802d422:	687b      	ldr	r3, [r7, #4]
 802d424:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d428:	4618      	mov	r0, r3
 802d42a:	f7f8 f94c 	bl	80256c6 <HAL_HCD_ResetPort>
 802d42e:	4603      	mov	r3, r0
 802d430:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d432:	7bfb      	ldrb	r3, [r7, #15]
 802d434:	4618      	mov	r0, r3
 802d436:	f000 f8ff 	bl	802d638 <USBH_Get_USB_Status>
 802d43a:	4603      	mov	r3, r0
 802d43c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d43e:	7bbb      	ldrb	r3, [r7, #14]
}
 802d440:	4618      	mov	r0, r3
 802d442:	3710      	adds	r7, #16
 802d444:	46bd      	mov	sp, r7
 802d446:	bd80      	pop	{r7, pc}

0802d448 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d448:	b580      	push	{r7, lr}
 802d44a:	b082      	sub	sp, #8
 802d44c:	af00      	add	r7, sp, #0
 802d44e:	6078      	str	r0, [r7, #4]
 802d450:	460b      	mov	r3, r1
 802d452:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802d454:	687b      	ldr	r3, [r7, #4]
 802d456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d45a:	78fa      	ldrb	r2, [r7, #3]
 802d45c:	4611      	mov	r1, r2
 802d45e:	4618      	mov	r0, r3
 802d460:	f7f8 f953 	bl	802570a <HAL_HCD_HC_GetXferCount>
 802d464:	4603      	mov	r3, r0
}
 802d466:	4618      	mov	r0, r3
 802d468:	3708      	adds	r7, #8
 802d46a:	46bd      	mov	sp, r7
 802d46c:	bd80      	pop	{r7, pc}

0802d46e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d46e:	b590      	push	{r4, r7, lr}
 802d470:	b089      	sub	sp, #36	; 0x24
 802d472:	af04      	add	r7, sp, #16
 802d474:	6078      	str	r0, [r7, #4]
 802d476:	4608      	mov	r0, r1
 802d478:	4611      	mov	r1, r2
 802d47a:	461a      	mov	r2, r3
 802d47c:	4603      	mov	r3, r0
 802d47e:	70fb      	strb	r3, [r7, #3]
 802d480:	460b      	mov	r3, r1
 802d482:	70bb      	strb	r3, [r7, #2]
 802d484:	4613      	mov	r3, r2
 802d486:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d488:	2300      	movs	r3, #0
 802d48a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d48c:	2300      	movs	r3, #0
 802d48e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802d490:	687b      	ldr	r3, [r7, #4]
 802d492:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d496:	787c      	ldrb	r4, [r7, #1]
 802d498:	78ba      	ldrb	r2, [r7, #2]
 802d49a:	78f9      	ldrb	r1, [r7, #3]
 802d49c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d49e:	9302      	str	r3, [sp, #8]
 802d4a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802d4a4:	9301      	str	r3, [sp, #4]
 802d4a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d4aa:	9300      	str	r3, [sp, #0]
 802d4ac:	4623      	mov	r3, r4
 802d4ae:	f7f7 fdb7 	bl	8025020 <HAL_HCD_HC_Init>
 802d4b2:	4603      	mov	r3, r0
 802d4b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802d4b6:	7bfb      	ldrb	r3, [r7, #15]
 802d4b8:	4618      	mov	r0, r3
 802d4ba:	f000 f8bd 	bl	802d638 <USBH_Get_USB_Status>
 802d4be:	4603      	mov	r3, r0
 802d4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 802d4c4:	4618      	mov	r0, r3
 802d4c6:	3714      	adds	r7, #20
 802d4c8:	46bd      	mov	sp, r7
 802d4ca:	bd90      	pop	{r4, r7, pc}

0802d4cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d4cc:	b580      	push	{r7, lr}
 802d4ce:	b084      	sub	sp, #16
 802d4d0:	af00      	add	r7, sp, #0
 802d4d2:	6078      	str	r0, [r7, #4]
 802d4d4:	460b      	mov	r3, r1
 802d4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d4d8:	2300      	movs	r3, #0
 802d4da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d4dc:	2300      	movs	r3, #0
 802d4de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802d4e0:	687b      	ldr	r3, [r7, #4]
 802d4e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d4e6:	78fa      	ldrb	r2, [r7, #3]
 802d4e8:	4611      	mov	r1, r2
 802d4ea:	4618      	mov	r0, r3
 802d4ec:	f7f7 fe27 	bl	802513e <HAL_HCD_HC_Halt>
 802d4f0:	4603      	mov	r3, r0
 802d4f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802d4f4:	7bfb      	ldrb	r3, [r7, #15]
 802d4f6:	4618      	mov	r0, r3
 802d4f8:	f000 f89e 	bl	802d638 <USBH_Get_USB_Status>
 802d4fc:	4603      	mov	r3, r0
 802d4fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d500:	7bbb      	ldrb	r3, [r7, #14]
}
 802d502:	4618      	mov	r0, r3
 802d504:	3710      	adds	r7, #16
 802d506:	46bd      	mov	sp, r7
 802d508:	bd80      	pop	{r7, pc}

0802d50a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802d50a:	b590      	push	{r4, r7, lr}
 802d50c:	b089      	sub	sp, #36	; 0x24
 802d50e:	af04      	add	r7, sp, #16
 802d510:	6078      	str	r0, [r7, #4]
 802d512:	4608      	mov	r0, r1
 802d514:	4611      	mov	r1, r2
 802d516:	461a      	mov	r2, r3
 802d518:	4603      	mov	r3, r0
 802d51a:	70fb      	strb	r3, [r7, #3]
 802d51c:	460b      	mov	r3, r1
 802d51e:	70bb      	strb	r3, [r7, #2]
 802d520:	4613      	mov	r3, r2
 802d522:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802d524:	2300      	movs	r3, #0
 802d526:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d528:	2300      	movs	r3, #0
 802d52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802d52c:	687b      	ldr	r3, [r7, #4]
 802d52e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802d532:	787c      	ldrb	r4, [r7, #1]
 802d534:	78ba      	ldrb	r2, [r7, #2]
 802d536:	78f9      	ldrb	r1, [r7, #3]
 802d538:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802d53c:	9303      	str	r3, [sp, #12]
 802d53e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802d540:	9302      	str	r3, [sp, #8]
 802d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802d544:	9301      	str	r3, [sp, #4]
 802d546:	f897 3020 	ldrb.w	r3, [r7, #32]
 802d54a:	9300      	str	r3, [sp, #0]
 802d54c:	4623      	mov	r3, r4
 802d54e:	f7f7 fe19 	bl	8025184 <HAL_HCD_HC_SubmitRequest>
 802d552:	4603      	mov	r3, r0
 802d554:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802d556:	7bfb      	ldrb	r3, [r7, #15]
 802d558:	4618      	mov	r0, r3
 802d55a:	f000 f86d 	bl	802d638 <USBH_Get_USB_Status>
 802d55e:	4603      	mov	r3, r0
 802d560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802d562:	7bbb      	ldrb	r3, [r7, #14]
}
 802d564:	4618      	mov	r0, r3
 802d566:	3714      	adds	r7, #20
 802d568:	46bd      	mov	sp, r7
 802d56a:	bd90      	pop	{r4, r7, pc}

0802d56c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802d56c:	b580      	push	{r7, lr}
 802d56e:	b082      	sub	sp, #8
 802d570:	af00      	add	r7, sp, #0
 802d572:	6078      	str	r0, [r7, #4]
 802d574:	460b      	mov	r3, r1
 802d576:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802d578:	687b      	ldr	r3, [r7, #4]
 802d57a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d57e:	78fa      	ldrb	r2, [r7, #3]
 802d580:	4611      	mov	r1, r2
 802d582:	4618      	mov	r0, r3
 802d584:	f7f8 f8ad 	bl	80256e2 <HAL_HCD_HC_GetURBState>
 802d588:	4603      	mov	r3, r0
}
 802d58a:	4618      	mov	r0, r3
 802d58c:	3708      	adds	r7, #8
 802d58e:	46bd      	mov	sp, r7
 802d590:	bd80      	pop	{r7, pc}

0802d592 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802d592:	b580      	push	{r7, lr}
 802d594:	b082      	sub	sp, #8
 802d596:	af00      	add	r7, sp, #0
 802d598:	6078      	str	r0, [r7, #4]
 802d59a:	460b      	mov	r3, r1
 802d59c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802d59e:	687b      	ldr	r3, [r7, #4]
 802d5a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802d5a4:	2b00      	cmp	r3, #0
 802d5a6:	d103      	bne.n	802d5b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802d5a8:	78fb      	ldrb	r3, [r7, #3]
 802d5aa:	4618      	mov	r0, r3
 802d5ac:	f000 f870 	bl	802d690 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802d5b0:	20c8      	movs	r0, #200	; 0xc8
 802d5b2:	f7f6 f867 	bl	8023684 <HAL_Delay>
  return USBH_OK;
 802d5b6:	2300      	movs	r3, #0
}
 802d5b8:	4618      	mov	r0, r3
 802d5ba:	3708      	adds	r7, #8
 802d5bc:	46bd      	mov	sp, r7
 802d5be:	bd80      	pop	{r7, pc}

0802d5c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802d5c0:	b480      	push	{r7}
 802d5c2:	b085      	sub	sp, #20
 802d5c4:	af00      	add	r7, sp, #0
 802d5c6:	6078      	str	r0, [r7, #4]
 802d5c8:	460b      	mov	r3, r1
 802d5ca:	70fb      	strb	r3, [r7, #3]
 802d5cc:	4613      	mov	r3, r2
 802d5ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802d5d0:	687b      	ldr	r3, [r7, #4]
 802d5d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802d5d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802d5d8:	78fb      	ldrb	r3, [r7, #3]
 802d5da:	68fa      	ldr	r2, [r7, #12]
 802d5dc:	212c      	movs	r1, #44	; 0x2c
 802d5de:	fb01 f303 	mul.w	r3, r1, r3
 802d5e2:	4413      	add	r3, r2
 802d5e4:	333b      	adds	r3, #59	; 0x3b
 802d5e6:	781b      	ldrb	r3, [r3, #0]
 802d5e8:	2b00      	cmp	r3, #0
 802d5ea:	d009      	beq.n	802d600 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802d5ec:	78fb      	ldrb	r3, [r7, #3]
 802d5ee:	68fa      	ldr	r2, [r7, #12]
 802d5f0:	212c      	movs	r1, #44	; 0x2c
 802d5f2:	fb01 f303 	mul.w	r3, r1, r3
 802d5f6:	4413      	add	r3, r2
 802d5f8:	3354      	adds	r3, #84	; 0x54
 802d5fa:	78ba      	ldrb	r2, [r7, #2]
 802d5fc:	701a      	strb	r2, [r3, #0]
 802d5fe:	e008      	b.n	802d612 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802d600:	78fb      	ldrb	r3, [r7, #3]
 802d602:	68fa      	ldr	r2, [r7, #12]
 802d604:	212c      	movs	r1, #44	; 0x2c
 802d606:	fb01 f303 	mul.w	r3, r1, r3
 802d60a:	4413      	add	r3, r2
 802d60c:	3355      	adds	r3, #85	; 0x55
 802d60e:	78ba      	ldrb	r2, [r7, #2]
 802d610:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802d612:	2300      	movs	r3, #0
}
 802d614:	4618      	mov	r0, r3
 802d616:	3714      	adds	r7, #20
 802d618:	46bd      	mov	sp, r7
 802d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d61e:	4770      	bx	lr

0802d620 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802d620:	b580      	push	{r7, lr}
 802d622:	b082      	sub	sp, #8
 802d624:	af00      	add	r7, sp, #0
 802d626:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802d628:	6878      	ldr	r0, [r7, #4]
 802d62a:	f7f6 f82b 	bl	8023684 <HAL_Delay>
}
 802d62e:	bf00      	nop
 802d630:	3708      	adds	r7, #8
 802d632:	46bd      	mov	sp, r7
 802d634:	bd80      	pop	{r7, pc}
	...

0802d638 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802d638:	b480      	push	{r7}
 802d63a:	b085      	sub	sp, #20
 802d63c:	af00      	add	r7, sp, #0
 802d63e:	4603      	mov	r3, r0
 802d640:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802d642:	2300      	movs	r3, #0
 802d644:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802d646:	79fb      	ldrb	r3, [r7, #7]
 802d648:	2b03      	cmp	r3, #3
 802d64a:	d817      	bhi.n	802d67c <USBH_Get_USB_Status+0x44>
 802d64c:	a201      	add	r2, pc, #4	; (adr r2, 802d654 <USBH_Get_USB_Status+0x1c>)
 802d64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d652:	bf00      	nop
 802d654:	0802d665 	.word	0x0802d665
 802d658:	0802d66b 	.word	0x0802d66b
 802d65c:	0802d671 	.word	0x0802d671
 802d660:	0802d677 	.word	0x0802d677
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802d664:	2300      	movs	r3, #0
 802d666:	73fb      	strb	r3, [r7, #15]
    break;
 802d668:	e00b      	b.n	802d682 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802d66a:	2302      	movs	r3, #2
 802d66c:	73fb      	strb	r3, [r7, #15]
    break;
 802d66e:	e008      	b.n	802d682 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802d670:	2301      	movs	r3, #1
 802d672:	73fb      	strb	r3, [r7, #15]
    break;
 802d674:	e005      	b.n	802d682 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802d676:	2302      	movs	r3, #2
 802d678:	73fb      	strb	r3, [r7, #15]
    break;
 802d67a:	e002      	b.n	802d682 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802d67c:	2302      	movs	r3, #2
 802d67e:	73fb      	strb	r3, [r7, #15]
    break;
 802d680:	bf00      	nop
  }
  return usb_status;
 802d682:	7bfb      	ldrb	r3, [r7, #15]
}
 802d684:	4618      	mov	r0, r3
 802d686:	3714      	adds	r7, #20
 802d688:	46bd      	mov	sp, r7
 802d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d68e:	4770      	bx	lr

0802d690 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802d690:	b580      	push	{r7, lr}
 802d692:	b084      	sub	sp, #16
 802d694:	af00      	add	r7, sp, #0
 802d696:	4603      	mov	r3, r0
 802d698:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802d69a:	79fb      	ldrb	r3, [r7, #7]
 802d69c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802d69e:	79fb      	ldrb	r3, [r7, #7]
 802d6a0:	2b00      	cmp	r3, #0
 802d6a2:	d102      	bne.n	802d6aa <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802d6a4:	2301      	movs	r3, #1
 802d6a6:	73fb      	strb	r3, [r7, #15]
 802d6a8:	e001      	b.n	802d6ae <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802d6aa:	2300      	movs	r3, #0
 802d6ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802d6ae:	7bfb      	ldrb	r3, [r7, #15]
 802d6b0:	461a      	mov	r2, r3
 802d6b2:	2110      	movs	r1, #16
 802d6b4:	4803      	ldr	r0, [pc, #12]	; (802d6c4 <MX_DriverVbusHS+0x34>)
 802d6b6:	f7f7 fc1f 	bl	8024ef8 <HAL_GPIO_WritePin>
}
 802d6ba:	bf00      	nop
 802d6bc:	3710      	adds	r7, #16
 802d6be:	46bd      	mov	sp, r7
 802d6c0:	bd80      	pop	{r7, pc}
 802d6c2:	bf00      	nop
 802d6c4:	40020800 	.word	0x40020800

0802d6c8 <__errno>:
 802d6c8:	4b01      	ldr	r3, [pc, #4]	; (802d6d0 <__errno+0x8>)
 802d6ca:	6818      	ldr	r0, [r3, #0]
 802d6cc:	4770      	bx	lr
 802d6ce:	bf00      	nop
 802d6d0:	20000080 	.word	0x20000080

0802d6d4 <__libc_init_array>:
 802d6d4:	b570      	push	{r4, r5, r6, lr}
 802d6d6:	4d0d      	ldr	r5, [pc, #52]	; (802d70c <__libc_init_array+0x38>)
 802d6d8:	4c0d      	ldr	r4, [pc, #52]	; (802d710 <__libc_init_array+0x3c>)
 802d6da:	1b64      	subs	r4, r4, r5
 802d6dc:	10a4      	asrs	r4, r4, #2
 802d6de:	2600      	movs	r6, #0
 802d6e0:	42a6      	cmp	r6, r4
 802d6e2:	d109      	bne.n	802d6f8 <__libc_init_array+0x24>
 802d6e4:	4d0b      	ldr	r5, [pc, #44]	; (802d714 <__libc_init_array+0x40>)
 802d6e6:	4c0c      	ldr	r4, [pc, #48]	; (802d718 <__libc_init_array+0x44>)
 802d6e8:	f001 fa10 	bl	802eb0c <_init>
 802d6ec:	1b64      	subs	r4, r4, r5
 802d6ee:	10a4      	asrs	r4, r4, #2
 802d6f0:	2600      	movs	r6, #0
 802d6f2:	42a6      	cmp	r6, r4
 802d6f4:	d105      	bne.n	802d702 <__libc_init_array+0x2e>
 802d6f6:	bd70      	pop	{r4, r5, r6, pc}
 802d6f8:	f855 3b04 	ldr.w	r3, [r5], #4
 802d6fc:	4798      	blx	r3
 802d6fe:	3601      	adds	r6, #1
 802d700:	e7ee      	b.n	802d6e0 <__libc_init_array+0xc>
 802d702:	f855 3b04 	ldr.w	r3, [r5], #4
 802d706:	4798      	blx	r3
 802d708:	3601      	adds	r6, #1
 802d70a:	e7f2      	b.n	802d6f2 <__libc_init_array+0x1e>
 802d70c:	08031244 	.word	0x08031244
 802d710:	08031244 	.word	0x08031244
 802d714:	08031244 	.word	0x08031244
 802d718:	08031248 	.word	0x08031248

0802d71c <malloc>:
 802d71c:	4b02      	ldr	r3, [pc, #8]	; (802d728 <malloc+0xc>)
 802d71e:	4601      	mov	r1, r0
 802d720:	6818      	ldr	r0, [r3, #0]
 802d722:	f000 b87f 	b.w	802d824 <_malloc_r>
 802d726:	bf00      	nop
 802d728:	20000080 	.word	0x20000080

0802d72c <free>:
 802d72c:	4b02      	ldr	r3, [pc, #8]	; (802d738 <free+0xc>)
 802d72e:	4601      	mov	r1, r0
 802d730:	6818      	ldr	r0, [r3, #0]
 802d732:	f000 b80b 	b.w	802d74c <_free_r>
 802d736:	bf00      	nop
 802d738:	20000080 	.word	0x20000080

0802d73c <memset>:
 802d73c:	4402      	add	r2, r0
 802d73e:	4603      	mov	r3, r0
 802d740:	4293      	cmp	r3, r2
 802d742:	d100      	bne.n	802d746 <memset+0xa>
 802d744:	4770      	bx	lr
 802d746:	f803 1b01 	strb.w	r1, [r3], #1
 802d74a:	e7f9      	b.n	802d740 <memset+0x4>

0802d74c <_free_r>:
 802d74c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802d74e:	2900      	cmp	r1, #0
 802d750:	d044      	beq.n	802d7dc <_free_r+0x90>
 802d752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802d756:	9001      	str	r0, [sp, #4]
 802d758:	2b00      	cmp	r3, #0
 802d75a:	f1a1 0404 	sub.w	r4, r1, #4
 802d75e:	bfb8      	it	lt
 802d760:	18e4      	addlt	r4, r4, r3
 802d762:	f000 fc71 	bl	802e048 <__malloc_lock>
 802d766:	4a1e      	ldr	r2, [pc, #120]	; (802d7e0 <_free_r+0x94>)
 802d768:	9801      	ldr	r0, [sp, #4]
 802d76a:	6813      	ldr	r3, [r2, #0]
 802d76c:	b933      	cbnz	r3, 802d77c <_free_r+0x30>
 802d76e:	6063      	str	r3, [r4, #4]
 802d770:	6014      	str	r4, [r2, #0]
 802d772:	b003      	add	sp, #12
 802d774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d778:	f000 bc6c 	b.w	802e054 <__malloc_unlock>
 802d77c:	42a3      	cmp	r3, r4
 802d77e:	d908      	bls.n	802d792 <_free_r+0x46>
 802d780:	6825      	ldr	r5, [r4, #0]
 802d782:	1961      	adds	r1, r4, r5
 802d784:	428b      	cmp	r3, r1
 802d786:	bf01      	itttt	eq
 802d788:	6819      	ldreq	r1, [r3, #0]
 802d78a:	685b      	ldreq	r3, [r3, #4]
 802d78c:	1949      	addeq	r1, r1, r5
 802d78e:	6021      	streq	r1, [r4, #0]
 802d790:	e7ed      	b.n	802d76e <_free_r+0x22>
 802d792:	461a      	mov	r2, r3
 802d794:	685b      	ldr	r3, [r3, #4]
 802d796:	b10b      	cbz	r3, 802d79c <_free_r+0x50>
 802d798:	42a3      	cmp	r3, r4
 802d79a:	d9fa      	bls.n	802d792 <_free_r+0x46>
 802d79c:	6811      	ldr	r1, [r2, #0]
 802d79e:	1855      	adds	r5, r2, r1
 802d7a0:	42a5      	cmp	r5, r4
 802d7a2:	d10b      	bne.n	802d7bc <_free_r+0x70>
 802d7a4:	6824      	ldr	r4, [r4, #0]
 802d7a6:	4421      	add	r1, r4
 802d7a8:	1854      	adds	r4, r2, r1
 802d7aa:	42a3      	cmp	r3, r4
 802d7ac:	6011      	str	r1, [r2, #0]
 802d7ae:	d1e0      	bne.n	802d772 <_free_r+0x26>
 802d7b0:	681c      	ldr	r4, [r3, #0]
 802d7b2:	685b      	ldr	r3, [r3, #4]
 802d7b4:	6053      	str	r3, [r2, #4]
 802d7b6:	4421      	add	r1, r4
 802d7b8:	6011      	str	r1, [r2, #0]
 802d7ba:	e7da      	b.n	802d772 <_free_r+0x26>
 802d7bc:	d902      	bls.n	802d7c4 <_free_r+0x78>
 802d7be:	230c      	movs	r3, #12
 802d7c0:	6003      	str	r3, [r0, #0]
 802d7c2:	e7d6      	b.n	802d772 <_free_r+0x26>
 802d7c4:	6825      	ldr	r5, [r4, #0]
 802d7c6:	1961      	adds	r1, r4, r5
 802d7c8:	428b      	cmp	r3, r1
 802d7ca:	bf04      	itt	eq
 802d7cc:	6819      	ldreq	r1, [r3, #0]
 802d7ce:	685b      	ldreq	r3, [r3, #4]
 802d7d0:	6063      	str	r3, [r4, #4]
 802d7d2:	bf04      	itt	eq
 802d7d4:	1949      	addeq	r1, r1, r5
 802d7d6:	6021      	streq	r1, [r4, #0]
 802d7d8:	6054      	str	r4, [r2, #4]
 802d7da:	e7ca      	b.n	802d772 <_free_r+0x26>
 802d7dc:	b003      	add	sp, #12
 802d7de:	bd30      	pop	{r4, r5, pc}
 802d7e0:	200011c8 	.word	0x200011c8

0802d7e4 <sbrk_aligned>:
 802d7e4:	b570      	push	{r4, r5, r6, lr}
 802d7e6:	4e0e      	ldr	r6, [pc, #56]	; (802d820 <sbrk_aligned+0x3c>)
 802d7e8:	460c      	mov	r4, r1
 802d7ea:	6831      	ldr	r1, [r6, #0]
 802d7ec:	4605      	mov	r5, r0
 802d7ee:	b911      	cbnz	r1, 802d7f6 <sbrk_aligned+0x12>
 802d7f0:	f000 f91a 	bl	802da28 <_sbrk_r>
 802d7f4:	6030      	str	r0, [r6, #0]
 802d7f6:	4621      	mov	r1, r4
 802d7f8:	4628      	mov	r0, r5
 802d7fa:	f000 f915 	bl	802da28 <_sbrk_r>
 802d7fe:	1c43      	adds	r3, r0, #1
 802d800:	d00a      	beq.n	802d818 <sbrk_aligned+0x34>
 802d802:	1cc4      	adds	r4, r0, #3
 802d804:	f024 0403 	bic.w	r4, r4, #3
 802d808:	42a0      	cmp	r0, r4
 802d80a:	d007      	beq.n	802d81c <sbrk_aligned+0x38>
 802d80c:	1a21      	subs	r1, r4, r0
 802d80e:	4628      	mov	r0, r5
 802d810:	f000 f90a 	bl	802da28 <_sbrk_r>
 802d814:	3001      	adds	r0, #1
 802d816:	d101      	bne.n	802d81c <sbrk_aligned+0x38>
 802d818:	f04f 34ff 	mov.w	r4, #4294967295
 802d81c:	4620      	mov	r0, r4
 802d81e:	bd70      	pop	{r4, r5, r6, pc}
 802d820:	200011cc 	.word	0x200011cc

0802d824 <_malloc_r>:
 802d824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d828:	1ccd      	adds	r5, r1, #3
 802d82a:	f025 0503 	bic.w	r5, r5, #3
 802d82e:	3508      	adds	r5, #8
 802d830:	2d0c      	cmp	r5, #12
 802d832:	bf38      	it	cc
 802d834:	250c      	movcc	r5, #12
 802d836:	2d00      	cmp	r5, #0
 802d838:	4607      	mov	r7, r0
 802d83a:	db01      	blt.n	802d840 <_malloc_r+0x1c>
 802d83c:	42a9      	cmp	r1, r5
 802d83e:	d905      	bls.n	802d84c <_malloc_r+0x28>
 802d840:	230c      	movs	r3, #12
 802d842:	603b      	str	r3, [r7, #0]
 802d844:	2600      	movs	r6, #0
 802d846:	4630      	mov	r0, r6
 802d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d84c:	4e2e      	ldr	r6, [pc, #184]	; (802d908 <_malloc_r+0xe4>)
 802d84e:	f000 fbfb 	bl	802e048 <__malloc_lock>
 802d852:	6833      	ldr	r3, [r6, #0]
 802d854:	461c      	mov	r4, r3
 802d856:	bb34      	cbnz	r4, 802d8a6 <_malloc_r+0x82>
 802d858:	4629      	mov	r1, r5
 802d85a:	4638      	mov	r0, r7
 802d85c:	f7ff ffc2 	bl	802d7e4 <sbrk_aligned>
 802d860:	1c43      	adds	r3, r0, #1
 802d862:	4604      	mov	r4, r0
 802d864:	d14d      	bne.n	802d902 <_malloc_r+0xde>
 802d866:	6834      	ldr	r4, [r6, #0]
 802d868:	4626      	mov	r6, r4
 802d86a:	2e00      	cmp	r6, #0
 802d86c:	d140      	bne.n	802d8f0 <_malloc_r+0xcc>
 802d86e:	6823      	ldr	r3, [r4, #0]
 802d870:	4631      	mov	r1, r6
 802d872:	4638      	mov	r0, r7
 802d874:	eb04 0803 	add.w	r8, r4, r3
 802d878:	f000 f8d6 	bl	802da28 <_sbrk_r>
 802d87c:	4580      	cmp	r8, r0
 802d87e:	d13a      	bne.n	802d8f6 <_malloc_r+0xd2>
 802d880:	6821      	ldr	r1, [r4, #0]
 802d882:	3503      	adds	r5, #3
 802d884:	1a6d      	subs	r5, r5, r1
 802d886:	f025 0503 	bic.w	r5, r5, #3
 802d88a:	3508      	adds	r5, #8
 802d88c:	2d0c      	cmp	r5, #12
 802d88e:	bf38      	it	cc
 802d890:	250c      	movcc	r5, #12
 802d892:	4629      	mov	r1, r5
 802d894:	4638      	mov	r0, r7
 802d896:	f7ff ffa5 	bl	802d7e4 <sbrk_aligned>
 802d89a:	3001      	adds	r0, #1
 802d89c:	d02b      	beq.n	802d8f6 <_malloc_r+0xd2>
 802d89e:	6823      	ldr	r3, [r4, #0]
 802d8a0:	442b      	add	r3, r5
 802d8a2:	6023      	str	r3, [r4, #0]
 802d8a4:	e00e      	b.n	802d8c4 <_malloc_r+0xa0>
 802d8a6:	6822      	ldr	r2, [r4, #0]
 802d8a8:	1b52      	subs	r2, r2, r5
 802d8aa:	d41e      	bmi.n	802d8ea <_malloc_r+0xc6>
 802d8ac:	2a0b      	cmp	r2, #11
 802d8ae:	d916      	bls.n	802d8de <_malloc_r+0xba>
 802d8b0:	1961      	adds	r1, r4, r5
 802d8b2:	42a3      	cmp	r3, r4
 802d8b4:	6025      	str	r5, [r4, #0]
 802d8b6:	bf18      	it	ne
 802d8b8:	6059      	strne	r1, [r3, #4]
 802d8ba:	6863      	ldr	r3, [r4, #4]
 802d8bc:	bf08      	it	eq
 802d8be:	6031      	streq	r1, [r6, #0]
 802d8c0:	5162      	str	r2, [r4, r5]
 802d8c2:	604b      	str	r3, [r1, #4]
 802d8c4:	4638      	mov	r0, r7
 802d8c6:	f104 060b 	add.w	r6, r4, #11
 802d8ca:	f000 fbc3 	bl	802e054 <__malloc_unlock>
 802d8ce:	f026 0607 	bic.w	r6, r6, #7
 802d8d2:	1d23      	adds	r3, r4, #4
 802d8d4:	1af2      	subs	r2, r6, r3
 802d8d6:	d0b6      	beq.n	802d846 <_malloc_r+0x22>
 802d8d8:	1b9b      	subs	r3, r3, r6
 802d8da:	50a3      	str	r3, [r4, r2]
 802d8dc:	e7b3      	b.n	802d846 <_malloc_r+0x22>
 802d8de:	6862      	ldr	r2, [r4, #4]
 802d8e0:	42a3      	cmp	r3, r4
 802d8e2:	bf0c      	ite	eq
 802d8e4:	6032      	streq	r2, [r6, #0]
 802d8e6:	605a      	strne	r2, [r3, #4]
 802d8e8:	e7ec      	b.n	802d8c4 <_malloc_r+0xa0>
 802d8ea:	4623      	mov	r3, r4
 802d8ec:	6864      	ldr	r4, [r4, #4]
 802d8ee:	e7b2      	b.n	802d856 <_malloc_r+0x32>
 802d8f0:	4634      	mov	r4, r6
 802d8f2:	6876      	ldr	r6, [r6, #4]
 802d8f4:	e7b9      	b.n	802d86a <_malloc_r+0x46>
 802d8f6:	230c      	movs	r3, #12
 802d8f8:	603b      	str	r3, [r7, #0]
 802d8fa:	4638      	mov	r0, r7
 802d8fc:	f000 fbaa 	bl	802e054 <__malloc_unlock>
 802d900:	e7a1      	b.n	802d846 <_malloc_r+0x22>
 802d902:	6025      	str	r5, [r4, #0]
 802d904:	e7de      	b.n	802d8c4 <_malloc_r+0xa0>
 802d906:	bf00      	nop
 802d908:	200011c8 	.word	0x200011c8

0802d90c <iprintf>:
 802d90c:	b40f      	push	{r0, r1, r2, r3}
 802d90e:	4b0a      	ldr	r3, [pc, #40]	; (802d938 <iprintf+0x2c>)
 802d910:	b513      	push	{r0, r1, r4, lr}
 802d912:	681c      	ldr	r4, [r3, #0]
 802d914:	b124      	cbz	r4, 802d920 <iprintf+0x14>
 802d916:	69a3      	ldr	r3, [r4, #24]
 802d918:	b913      	cbnz	r3, 802d920 <iprintf+0x14>
 802d91a:	4620      	mov	r0, r4
 802d91c:	f000 fa8e 	bl	802de3c <__sinit>
 802d920:	ab05      	add	r3, sp, #20
 802d922:	9a04      	ldr	r2, [sp, #16]
 802d924:	68a1      	ldr	r1, [r4, #8]
 802d926:	9301      	str	r3, [sp, #4]
 802d928:	4620      	mov	r0, r4
 802d92a:	f000 fd1f 	bl	802e36c <_vfiprintf_r>
 802d92e:	b002      	add	sp, #8
 802d930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d934:	b004      	add	sp, #16
 802d936:	4770      	bx	lr
 802d938:	20000080 	.word	0x20000080

0802d93c <_puts_r>:
 802d93c:	b570      	push	{r4, r5, r6, lr}
 802d93e:	460e      	mov	r6, r1
 802d940:	4605      	mov	r5, r0
 802d942:	b118      	cbz	r0, 802d94c <_puts_r+0x10>
 802d944:	6983      	ldr	r3, [r0, #24]
 802d946:	b90b      	cbnz	r3, 802d94c <_puts_r+0x10>
 802d948:	f000 fa78 	bl	802de3c <__sinit>
 802d94c:	69ab      	ldr	r3, [r5, #24]
 802d94e:	68ac      	ldr	r4, [r5, #8]
 802d950:	b913      	cbnz	r3, 802d958 <_puts_r+0x1c>
 802d952:	4628      	mov	r0, r5
 802d954:	f000 fa72 	bl	802de3c <__sinit>
 802d958:	4b2c      	ldr	r3, [pc, #176]	; (802da0c <_puts_r+0xd0>)
 802d95a:	429c      	cmp	r4, r3
 802d95c:	d120      	bne.n	802d9a0 <_puts_r+0x64>
 802d95e:	686c      	ldr	r4, [r5, #4]
 802d960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d962:	07db      	lsls	r3, r3, #31
 802d964:	d405      	bmi.n	802d972 <_puts_r+0x36>
 802d966:	89a3      	ldrh	r3, [r4, #12]
 802d968:	0598      	lsls	r0, r3, #22
 802d96a:	d402      	bmi.n	802d972 <_puts_r+0x36>
 802d96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d96e:	f000 fb03 	bl	802df78 <__retarget_lock_acquire_recursive>
 802d972:	89a3      	ldrh	r3, [r4, #12]
 802d974:	0719      	lsls	r1, r3, #28
 802d976:	d51d      	bpl.n	802d9b4 <_puts_r+0x78>
 802d978:	6923      	ldr	r3, [r4, #16]
 802d97a:	b1db      	cbz	r3, 802d9b4 <_puts_r+0x78>
 802d97c:	3e01      	subs	r6, #1
 802d97e:	68a3      	ldr	r3, [r4, #8]
 802d980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802d984:	3b01      	subs	r3, #1
 802d986:	60a3      	str	r3, [r4, #8]
 802d988:	bb39      	cbnz	r1, 802d9da <_puts_r+0x9e>
 802d98a:	2b00      	cmp	r3, #0
 802d98c:	da38      	bge.n	802da00 <_puts_r+0xc4>
 802d98e:	4622      	mov	r2, r4
 802d990:	210a      	movs	r1, #10
 802d992:	4628      	mov	r0, r5
 802d994:	f000 f878 	bl	802da88 <__swbuf_r>
 802d998:	3001      	adds	r0, #1
 802d99a:	d011      	beq.n	802d9c0 <_puts_r+0x84>
 802d99c:	250a      	movs	r5, #10
 802d99e:	e011      	b.n	802d9c4 <_puts_r+0x88>
 802d9a0:	4b1b      	ldr	r3, [pc, #108]	; (802da10 <_puts_r+0xd4>)
 802d9a2:	429c      	cmp	r4, r3
 802d9a4:	d101      	bne.n	802d9aa <_puts_r+0x6e>
 802d9a6:	68ac      	ldr	r4, [r5, #8]
 802d9a8:	e7da      	b.n	802d960 <_puts_r+0x24>
 802d9aa:	4b1a      	ldr	r3, [pc, #104]	; (802da14 <_puts_r+0xd8>)
 802d9ac:	429c      	cmp	r4, r3
 802d9ae:	bf08      	it	eq
 802d9b0:	68ec      	ldreq	r4, [r5, #12]
 802d9b2:	e7d5      	b.n	802d960 <_puts_r+0x24>
 802d9b4:	4621      	mov	r1, r4
 802d9b6:	4628      	mov	r0, r5
 802d9b8:	f000 f8b8 	bl	802db2c <__swsetup_r>
 802d9bc:	2800      	cmp	r0, #0
 802d9be:	d0dd      	beq.n	802d97c <_puts_r+0x40>
 802d9c0:	f04f 35ff 	mov.w	r5, #4294967295
 802d9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802d9c6:	07da      	lsls	r2, r3, #31
 802d9c8:	d405      	bmi.n	802d9d6 <_puts_r+0x9a>
 802d9ca:	89a3      	ldrh	r3, [r4, #12]
 802d9cc:	059b      	lsls	r3, r3, #22
 802d9ce:	d402      	bmi.n	802d9d6 <_puts_r+0x9a>
 802d9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802d9d2:	f000 fad2 	bl	802df7a <__retarget_lock_release_recursive>
 802d9d6:	4628      	mov	r0, r5
 802d9d8:	bd70      	pop	{r4, r5, r6, pc}
 802d9da:	2b00      	cmp	r3, #0
 802d9dc:	da04      	bge.n	802d9e8 <_puts_r+0xac>
 802d9de:	69a2      	ldr	r2, [r4, #24]
 802d9e0:	429a      	cmp	r2, r3
 802d9e2:	dc06      	bgt.n	802d9f2 <_puts_r+0xb6>
 802d9e4:	290a      	cmp	r1, #10
 802d9e6:	d004      	beq.n	802d9f2 <_puts_r+0xb6>
 802d9e8:	6823      	ldr	r3, [r4, #0]
 802d9ea:	1c5a      	adds	r2, r3, #1
 802d9ec:	6022      	str	r2, [r4, #0]
 802d9ee:	7019      	strb	r1, [r3, #0]
 802d9f0:	e7c5      	b.n	802d97e <_puts_r+0x42>
 802d9f2:	4622      	mov	r2, r4
 802d9f4:	4628      	mov	r0, r5
 802d9f6:	f000 f847 	bl	802da88 <__swbuf_r>
 802d9fa:	3001      	adds	r0, #1
 802d9fc:	d1bf      	bne.n	802d97e <_puts_r+0x42>
 802d9fe:	e7df      	b.n	802d9c0 <_puts_r+0x84>
 802da00:	6823      	ldr	r3, [r4, #0]
 802da02:	250a      	movs	r5, #10
 802da04:	1c5a      	adds	r2, r3, #1
 802da06:	6022      	str	r2, [r4, #0]
 802da08:	701d      	strb	r5, [r3, #0]
 802da0a:	e7db      	b.n	802d9c4 <_puts_r+0x88>
 802da0c:	080311c8 	.word	0x080311c8
 802da10:	080311e8 	.word	0x080311e8
 802da14:	080311a8 	.word	0x080311a8

0802da18 <puts>:
 802da18:	4b02      	ldr	r3, [pc, #8]	; (802da24 <puts+0xc>)
 802da1a:	4601      	mov	r1, r0
 802da1c:	6818      	ldr	r0, [r3, #0]
 802da1e:	f7ff bf8d 	b.w	802d93c <_puts_r>
 802da22:	bf00      	nop
 802da24:	20000080 	.word	0x20000080

0802da28 <_sbrk_r>:
 802da28:	b538      	push	{r3, r4, r5, lr}
 802da2a:	4d06      	ldr	r5, [pc, #24]	; (802da44 <_sbrk_r+0x1c>)
 802da2c:	2300      	movs	r3, #0
 802da2e:	4604      	mov	r4, r0
 802da30:	4608      	mov	r0, r1
 802da32:	602b      	str	r3, [r5, #0]
 802da34:	f7f4 fb8e 	bl	8022154 <_sbrk>
 802da38:	1c43      	adds	r3, r0, #1
 802da3a:	d102      	bne.n	802da42 <_sbrk_r+0x1a>
 802da3c:	682b      	ldr	r3, [r5, #0]
 802da3e:	b103      	cbz	r3, 802da42 <_sbrk_r+0x1a>
 802da40:	6023      	str	r3, [r4, #0]
 802da42:	bd38      	pop	{r3, r4, r5, pc}
 802da44:	200011d4 	.word	0x200011d4

0802da48 <siprintf>:
 802da48:	b40e      	push	{r1, r2, r3}
 802da4a:	b500      	push	{lr}
 802da4c:	b09c      	sub	sp, #112	; 0x70
 802da4e:	ab1d      	add	r3, sp, #116	; 0x74
 802da50:	9002      	str	r0, [sp, #8]
 802da52:	9006      	str	r0, [sp, #24]
 802da54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802da58:	4809      	ldr	r0, [pc, #36]	; (802da80 <siprintf+0x38>)
 802da5a:	9107      	str	r1, [sp, #28]
 802da5c:	9104      	str	r1, [sp, #16]
 802da5e:	4909      	ldr	r1, [pc, #36]	; (802da84 <siprintf+0x3c>)
 802da60:	f853 2b04 	ldr.w	r2, [r3], #4
 802da64:	9105      	str	r1, [sp, #20]
 802da66:	6800      	ldr	r0, [r0, #0]
 802da68:	9301      	str	r3, [sp, #4]
 802da6a:	a902      	add	r1, sp, #8
 802da6c:	f000 fb54 	bl	802e118 <_svfiprintf_r>
 802da70:	9b02      	ldr	r3, [sp, #8]
 802da72:	2200      	movs	r2, #0
 802da74:	701a      	strb	r2, [r3, #0]
 802da76:	b01c      	add	sp, #112	; 0x70
 802da78:	f85d eb04 	ldr.w	lr, [sp], #4
 802da7c:	b003      	add	sp, #12
 802da7e:	4770      	bx	lr
 802da80:	20000080 	.word	0x20000080
 802da84:	ffff0208 	.word	0xffff0208

0802da88 <__swbuf_r>:
 802da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da8a:	460e      	mov	r6, r1
 802da8c:	4614      	mov	r4, r2
 802da8e:	4605      	mov	r5, r0
 802da90:	b118      	cbz	r0, 802da9a <__swbuf_r+0x12>
 802da92:	6983      	ldr	r3, [r0, #24]
 802da94:	b90b      	cbnz	r3, 802da9a <__swbuf_r+0x12>
 802da96:	f000 f9d1 	bl	802de3c <__sinit>
 802da9a:	4b21      	ldr	r3, [pc, #132]	; (802db20 <__swbuf_r+0x98>)
 802da9c:	429c      	cmp	r4, r3
 802da9e:	d12b      	bne.n	802daf8 <__swbuf_r+0x70>
 802daa0:	686c      	ldr	r4, [r5, #4]
 802daa2:	69a3      	ldr	r3, [r4, #24]
 802daa4:	60a3      	str	r3, [r4, #8]
 802daa6:	89a3      	ldrh	r3, [r4, #12]
 802daa8:	071a      	lsls	r2, r3, #28
 802daaa:	d52f      	bpl.n	802db0c <__swbuf_r+0x84>
 802daac:	6923      	ldr	r3, [r4, #16]
 802daae:	b36b      	cbz	r3, 802db0c <__swbuf_r+0x84>
 802dab0:	6923      	ldr	r3, [r4, #16]
 802dab2:	6820      	ldr	r0, [r4, #0]
 802dab4:	1ac0      	subs	r0, r0, r3
 802dab6:	6963      	ldr	r3, [r4, #20]
 802dab8:	b2f6      	uxtb	r6, r6
 802daba:	4283      	cmp	r3, r0
 802dabc:	4637      	mov	r7, r6
 802dabe:	dc04      	bgt.n	802daca <__swbuf_r+0x42>
 802dac0:	4621      	mov	r1, r4
 802dac2:	4628      	mov	r0, r5
 802dac4:	f000 f926 	bl	802dd14 <_fflush_r>
 802dac8:	bb30      	cbnz	r0, 802db18 <__swbuf_r+0x90>
 802daca:	68a3      	ldr	r3, [r4, #8]
 802dacc:	3b01      	subs	r3, #1
 802dace:	60a3      	str	r3, [r4, #8]
 802dad0:	6823      	ldr	r3, [r4, #0]
 802dad2:	1c5a      	adds	r2, r3, #1
 802dad4:	6022      	str	r2, [r4, #0]
 802dad6:	701e      	strb	r6, [r3, #0]
 802dad8:	6963      	ldr	r3, [r4, #20]
 802dada:	3001      	adds	r0, #1
 802dadc:	4283      	cmp	r3, r0
 802dade:	d004      	beq.n	802daea <__swbuf_r+0x62>
 802dae0:	89a3      	ldrh	r3, [r4, #12]
 802dae2:	07db      	lsls	r3, r3, #31
 802dae4:	d506      	bpl.n	802daf4 <__swbuf_r+0x6c>
 802dae6:	2e0a      	cmp	r6, #10
 802dae8:	d104      	bne.n	802daf4 <__swbuf_r+0x6c>
 802daea:	4621      	mov	r1, r4
 802daec:	4628      	mov	r0, r5
 802daee:	f000 f911 	bl	802dd14 <_fflush_r>
 802daf2:	b988      	cbnz	r0, 802db18 <__swbuf_r+0x90>
 802daf4:	4638      	mov	r0, r7
 802daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802daf8:	4b0a      	ldr	r3, [pc, #40]	; (802db24 <__swbuf_r+0x9c>)
 802dafa:	429c      	cmp	r4, r3
 802dafc:	d101      	bne.n	802db02 <__swbuf_r+0x7a>
 802dafe:	68ac      	ldr	r4, [r5, #8]
 802db00:	e7cf      	b.n	802daa2 <__swbuf_r+0x1a>
 802db02:	4b09      	ldr	r3, [pc, #36]	; (802db28 <__swbuf_r+0xa0>)
 802db04:	429c      	cmp	r4, r3
 802db06:	bf08      	it	eq
 802db08:	68ec      	ldreq	r4, [r5, #12]
 802db0a:	e7ca      	b.n	802daa2 <__swbuf_r+0x1a>
 802db0c:	4621      	mov	r1, r4
 802db0e:	4628      	mov	r0, r5
 802db10:	f000 f80c 	bl	802db2c <__swsetup_r>
 802db14:	2800      	cmp	r0, #0
 802db16:	d0cb      	beq.n	802dab0 <__swbuf_r+0x28>
 802db18:	f04f 37ff 	mov.w	r7, #4294967295
 802db1c:	e7ea      	b.n	802daf4 <__swbuf_r+0x6c>
 802db1e:	bf00      	nop
 802db20:	080311c8 	.word	0x080311c8
 802db24:	080311e8 	.word	0x080311e8
 802db28:	080311a8 	.word	0x080311a8

0802db2c <__swsetup_r>:
 802db2c:	4b32      	ldr	r3, [pc, #200]	; (802dbf8 <__swsetup_r+0xcc>)
 802db2e:	b570      	push	{r4, r5, r6, lr}
 802db30:	681d      	ldr	r5, [r3, #0]
 802db32:	4606      	mov	r6, r0
 802db34:	460c      	mov	r4, r1
 802db36:	b125      	cbz	r5, 802db42 <__swsetup_r+0x16>
 802db38:	69ab      	ldr	r3, [r5, #24]
 802db3a:	b913      	cbnz	r3, 802db42 <__swsetup_r+0x16>
 802db3c:	4628      	mov	r0, r5
 802db3e:	f000 f97d 	bl	802de3c <__sinit>
 802db42:	4b2e      	ldr	r3, [pc, #184]	; (802dbfc <__swsetup_r+0xd0>)
 802db44:	429c      	cmp	r4, r3
 802db46:	d10f      	bne.n	802db68 <__swsetup_r+0x3c>
 802db48:	686c      	ldr	r4, [r5, #4]
 802db4a:	89a3      	ldrh	r3, [r4, #12]
 802db4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802db50:	0719      	lsls	r1, r3, #28
 802db52:	d42c      	bmi.n	802dbae <__swsetup_r+0x82>
 802db54:	06dd      	lsls	r5, r3, #27
 802db56:	d411      	bmi.n	802db7c <__swsetup_r+0x50>
 802db58:	2309      	movs	r3, #9
 802db5a:	6033      	str	r3, [r6, #0]
 802db5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802db60:	81a3      	strh	r3, [r4, #12]
 802db62:	f04f 30ff 	mov.w	r0, #4294967295
 802db66:	e03e      	b.n	802dbe6 <__swsetup_r+0xba>
 802db68:	4b25      	ldr	r3, [pc, #148]	; (802dc00 <__swsetup_r+0xd4>)
 802db6a:	429c      	cmp	r4, r3
 802db6c:	d101      	bne.n	802db72 <__swsetup_r+0x46>
 802db6e:	68ac      	ldr	r4, [r5, #8]
 802db70:	e7eb      	b.n	802db4a <__swsetup_r+0x1e>
 802db72:	4b24      	ldr	r3, [pc, #144]	; (802dc04 <__swsetup_r+0xd8>)
 802db74:	429c      	cmp	r4, r3
 802db76:	bf08      	it	eq
 802db78:	68ec      	ldreq	r4, [r5, #12]
 802db7a:	e7e6      	b.n	802db4a <__swsetup_r+0x1e>
 802db7c:	0758      	lsls	r0, r3, #29
 802db7e:	d512      	bpl.n	802dba6 <__swsetup_r+0x7a>
 802db80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802db82:	b141      	cbz	r1, 802db96 <__swsetup_r+0x6a>
 802db84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802db88:	4299      	cmp	r1, r3
 802db8a:	d002      	beq.n	802db92 <__swsetup_r+0x66>
 802db8c:	4630      	mov	r0, r6
 802db8e:	f7ff fddd 	bl	802d74c <_free_r>
 802db92:	2300      	movs	r3, #0
 802db94:	6363      	str	r3, [r4, #52]	; 0x34
 802db96:	89a3      	ldrh	r3, [r4, #12]
 802db98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802db9c:	81a3      	strh	r3, [r4, #12]
 802db9e:	2300      	movs	r3, #0
 802dba0:	6063      	str	r3, [r4, #4]
 802dba2:	6923      	ldr	r3, [r4, #16]
 802dba4:	6023      	str	r3, [r4, #0]
 802dba6:	89a3      	ldrh	r3, [r4, #12]
 802dba8:	f043 0308 	orr.w	r3, r3, #8
 802dbac:	81a3      	strh	r3, [r4, #12]
 802dbae:	6923      	ldr	r3, [r4, #16]
 802dbb0:	b94b      	cbnz	r3, 802dbc6 <__swsetup_r+0x9a>
 802dbb2:	89a3      	ldrh	r3, [r4, #12]
 802dbb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802dbb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802dbbc:	d003      	beq.n	802dbc6 <__swsetup_r+0x9a>
 802dbbe:	4621      	mov	r1, r4
 802dbc0:	4630      	mov	r0, r6
 802dbc2:	f000 fa01 	bl	802dfc8 <__smakebuf_r>
 802dbc6:	89a0      	ldrh	r0, [r4, #12]
 802dbc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802dbcc:	f010 0301 	ands.w	r3, r0, #1
 802dbd0:	d00a      	beq.n	802dbe8 <__swsetup_r+0xbc>
 802dbd2:	2300      	movs	r3, #0
 802dbd4:	60a3      	str	r3, [r4, #8]
 802dbd6:	6963      	ldr	r3, [r4, #20]
 802dbd8:	425b      	negs	r3, r3
 802dbda:	61a3      	str	r3, [r4, #24]
 802dbdc:	6923      	ldr	r3, [r4, #16]
 802dbde:	b943      	cbnz	r3, 802dbf2 <__swsetup_r+0xc6>
 802dbe0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802dbe4:	d1ba      	bne.n	802db5c <__swsetup_r+0x30>
 802dbe6:	bd70      	pop	{r4, r5, r6, pc}
 802dbe8:	0781      	lsls	r1, r0, #30
 802dbea:	bf58      	it	pl
 802dbec:	6963      	ldrpl	r3, [r4, #20]
 802dbee:	60a3      	str	r3, [r4, #8]
 802dbf0:	e7f4      	b.n	802dbdc <__swsetup_r+0xb0>
 802dbf2:	2000      	movs	r0, #0
 802dbf4:	e7f7      	b.n	802dbe6 <__swsetup_r+0xba>
 802dbf6:	bf00      	nop
 802dbf8:	20000080 	.word	0x20000080
 802dbfc:	080311c8 	.word	0x080311c8
 802dc00:	080311e8 	.word	0x080311e8
 802dc04:	080311a8 	.word	0x080311a8

0802dc08 <__sflush_r>:
 802dc08:	898a      	ldrh	r2, [r1, #12]
 802dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dc0e:	4605      	mov	r5, r0
 802dc10:	0710      	lsls	r0, r2, #28
 802dc12:	460c      	mov	r4, r1
 802dc14:	d458      	bmi.n	802dcc8 <__sflush_r+0xc0>
 802dc16:	684b      	ldr	r3, [r1, #4]
 802dc18:	2b00      	cmp	r3, #0
 802dc1a:	dc05      	bgt.n	802dc28 <__sflush_r+0x20>
 802dc1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802dc1e:	2b00      	cmp	r3, #0
 802dc20:	dc02      	bgt.n	802dc28 <__sflush_r+0x20>
 802dc22:	2000      	movs	r0, #0
 802dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dc28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dc2a:	2e00      	cmp	r6, #0
 802dc2c:	d0f9      	beq.n	802dc22 <__sflush_r+0x1a>
 802dc2e:	2300      	movs	r3, #0
 802dc30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802dc34:	682f      	ldr	r7, [r5, #0]
 802dc36:	602b      	str	r3, [r5, #0]
 802dc38:	d032      	beq.n	802dca0 <__sflush_r+0x98>
 802dc3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802dc3c:	89a3      	ldrh	r3, [r4, #12]
 802dc3e:	075a      	lsls	r2, r3, #29
 802dc40:	d505      	bpl.n	802dc4e <__sflush_r+0x46>
 802dc42:	6863      	ldr	r3, [r4, #4]
 802dc44:	1ac0      	subs	r0, r0, r3
 802dc46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802dc48:	b10b      	cbz	r3, 802dc4e <__sflush_r+0x46>
 802dc4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802dc4c:	1ac0      	subs	r0, r0, r3
 802dc4e:	2300      	movs	r3, #0
 802dc50:	4602      	mov	r2, r0
 802dc52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802dc54:	6a21      	ldr	r1, [r4, #32]
 802dc56:	4628      	mov	r0, r5
 802dc58:	47b0      	blx	r6
 802dc5a:	1c43      	adds	r3, r0, #1
 802dc5c:	89a3      	ldrh	r3, [r4, #12]
 802dc5e:	d106      	bne.n	802dc6e <__sflush_r+0x66>
 802dc60:	6829      	ldr	r1, [r5, #0]
 802dc62:	291d      	cmp	r1, #29
 802dc64:	d82c      	bhi.n	802dcc0 <__sflush_r+0xb8>
 802dc66:	4a2a      	ldr	r2, [pc, #168]	; (802dd10 <__sflush_r+0x108>)
 802dc68:	40ca      	lsrs	r2, r1
 802dc6a:	07d6      	lsls	r6, r2, #31
 802dc6c:	d528      	bpl.n	802dcc0 <__sflush_r+0xb8>
 802dc6e:	2200      	movs	r2, #0
 802dc70:	6062      	str	r2, [r4, #4]
 802dc72:	04d9      	lsls	r1, r3, #19
 802dc74:	6922      	ldr	r2, [r4, #16]
 802dc76:	6022      	str	r2, [r4, #0]
 802dc78:	d504      	bpl.n	802dc84 <__sflush_r+0x7c>
 802dc7a:	1c42      	adds	r2, r0, #1
 802dc7c:	d101      	bne.n	802dc82 <__sflush_r+0x7a>
 802dc7e:	682b      	ldr	r3, [r5, #0]
 802dc80:	b903      	cbnz	r3, 802dc84 <__sflush_r+0x7c>
 802dc82:	6560      	str	r0, [r4, #84]	; 0x54
 802dc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dc86:	602f      	str	r7, [r5, #0]
 802dc88:	2900      	cmp	r1, #0
 802dc8a:	d0ca      	beq.n	802dc22 <__sflush_r+0x1a>
 802dc8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802dc90:	4299      	cmp	r1, r3
 802dc92:	d002      	beq.n	802dc9a <__sflush_r+0x92>
 802dc94:	4628      	mov	r0, r5
 802dc96:	f7ff fd59 	bl	802d74c <_free_r>
 802dc9a:	2000      	movs	r0, #0
 802dc9c:	6360      	str	r0, [r4, #52]	; 0x34
 802dc9e:	e7c1      	b.n	802dc24 <__sflush_r+0x1c>
 802dca0:	6a21      	ldr	r1, [r4, #32]
 802dca2:	2301      	movs	r3, #1
 802dca4:	4628      	mov	r0, r5
 802dca6:	47b0      	blx	r6
 802dca8:	1c41      	adds	r1, r0, #1
 802dcaa:	d1c7      	bne.n	802dc3c <__sflush_r+0x34>
 802dcac:	682b      	ldr	r3, [r5, #0]
 802dcae:	2b00      	cmp	r3, #0
 802dcb0:	d0c4      	beq.n	802dc3c <__sflush_r+0x34>
 802dcb2:	2b1d      	cmp	r3, #29
 802dcb4:	d001      	beq.n	802dcba <__sflush_r+0xb2>
 802dcb6:	2b16      	cmp	r3, #22
 802dcb8:	d101      	bne.n	802dcbe <__sflush_r+0xb6>
 802dcba:	602f      	str	r7, [r5, #0]
 802dcbc:	e7b1      	b.n	802dc22 <__sflush_r+0x1a>
 802dcbe:	89a3      	ldrh	r3, [r4, #12]
 802dcc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dcc4:	81a3      	strh	r3, [r4, #12]
 802dcc6:	e7ad      	b.n	802dc24 <__sflush_r+0x1c>
 802dcc8:	690f      	ldr	r7, [r1, #16]
 802dcca:	2f00      	cmp	r7, #0
 802dccc:	d0a9      	beq.n	802dc22 <__sflush_r+0x1a>
 802dcce:	0793      	lsls	r3, r2, #30
 802dcd0:	680e      	ldr	r6, [r1, #0]
 802dcd2:	bf08      	it	eq
 802dcd4:	694b      	ldreq	r3, [r1, #20]
 802dcd6:	600f      	str	r7, [r1, #0]
 802dcd8:	bf18      	it	ne
 802dcda:	2300      	movne	r3, #0
 802dcdc:	eba6 0807 	sub.w	r8, r6, r7
 802dce0:	608b      	str	r3, [r1, #8]
 802dce2:	f1b8 0f00 	cmp.w	r8, #0
 802dce6:	dd9c      	ble.n	802dc22 <__sflush_r+0x1a>
 802dce8:	6a21      	ldr	r1, [r4, #32]
 802dcea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802dcec:	4643      	mov	r3, r8
 802dcee:	463a      	mov	r2, r7
 802dcf0:	4628      	mov	r0, r5
 802dcf2:	47b0      	blx	r6
 802dcf4:	2800      	cmp	r0, #0
 802dcf6:	dc06      	bgt.n	802dd06 <__sflush_r+0xfe>
 802dcf8:	89a3      	ldrh	r3, [r4, #12]
 802dcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802dcfe:	81a3      	strh	r3, [r4, #12]
 802dd00:	f04f 30ff 	mov.w	r0, #4294967295
 802dd04:	e78e      	b.n	802dc24 <__sflush_r+0x1c>
 802dd06:	4407      	add	r7, r0
 802dd08:	eba8 0800 	sub.w	r8, r8, r0
 802dd0c:	e7e9      	b.n	802dce2 <__sflush_r+0xda>
 802dd0e:	bf00      	nop
 802dd10:	20400001 	.word	0x20400001

0802dd14 <_fflush_r>:
 802dd14:	b538      	push	{r3, r4, r5, lr}
 802dd16:	690b      	ldr	r3, [r1, #16]
 802dd18:	4605      	mov	r5, r0
 802dd1a:	460c      	mov	r4, r1
 802dd1c:	b913      	cbnz	r3, 802dd24 <_fflush_r+0x10>
 802dd1e:	2500      	movs	r5, #0
 802dd20:	4628      	mov	r0, r5
 802dd22:	bd38      	pop	{r3, r4, r5, pc}
 802dd24:	b118      	cbz	r0, 802dd2e <_fflush_r+0x1a>
 802dd26:	6983      	ldr	r3, [r0, #24]
 802dd28:	b90b      	cbnz	r3, 802dd2e <_fflush_r+0x1a>
 802dd2a:	f000 f887 	bl	802de3c <__sinit>
 802dd2e:	4b14      	ldr	r3, [pc, #80]	; (802dd80 <_fflush_r+0x6c>)
 802dd30:	429c      	cmp	r4, r3
 802dd32:	d11b      	bne.n	802dd6c <_fflush_r+0x58>
 802dd34:	686c      	ldr	r4, [r5, #4]
 802dd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dd3a:	2b00      	cmp	r3, #0
 802dd3c:	d0ef      	beq.n	802dd1e <_fflush_r+0xa>
 802dd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802dd40:	07d0      	lsls	r0, r2, #31
 802dd42:	d404      	bmi.n	802dd4e <_fflush_r+0x3a>
 802dd44:	0599      	lsls	r1, r3, #22
 802dd46:	d402      	bmi.n	802dd4e <_fflush_r+0x3a>
 802dd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dd4a:	f000 f915 	bl	802df78 <__retarget_lock_acquire_recursive>
 802dd4e:	4628      	mov	r0, r5
 802dd50:	4621      	mov	r1, r4
 802dd52:	f7ff ff59 	bl	802dc08 <__sflush_r>
 802dd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802dd58:	07da      	lsls	r2, r3, #31
 802dd5a:	4605      	mov	r5, r0
 802dd5c:	d4e0      	bmi.n	802dd20 <_fflush_r+0xc>
 802dd5e:	89a3      	ldrh	r3, [r4, #12]
 802dd60:	059b      	lsls	r3, r3, #22
 802dd62:	d4dd      	bmi.n	802dd20 <_fflush_r+0xc>
 802dd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802dd66:	f000 f908 	bl	802df7a <__retarget_lock_release_recursive>
 802dd6a:	e7d9      	b.n	802dd20 <_fflush_r+0xc>
 802dd6c:	4b05      	ldr	r3, [pc, #20]	; (802dd84 <_fflush_r+0x70>)
 802dd6e:	429c      	cmp	r4, r3
 802dd70:	d101      	bne.n	802dd76 <_fflush_r+0x62>
 802dd72:	68ac      	ldr	r4, [r5, #8]
 802dd74:	e7df      	b.n	802dd36 <_fflush_r+0x22>
 802dd76:	4b04      	ldr	r3, [pc, #16]	; (802dd88 <_fflush_r+0x74>)
 802dd78:	429c      	cmp	r4, r3
 802dd7a:	bf08      	it	eq
 802dd7c:	68ec      	ldreq	r4, [r5, #12]
 802dd7e:	e7da      	b.n	802dd36 <_fflush_r+0x22>
 802dd80:	080311c8 	.word	0x080311c8
 802dd84:	080311e8 	.word	0x080311e8
 802dd88:	080311a8 	.word	0x080311a8

0802dd8c <std>:
 802dd8c:	2300      	movs	r3, #0
 802dd8e:	b510      	push	{r4, lr}
 802dd90:	4604      	mov	r4, r0
 802dd92:	e9c0 3300 	strd	r3, r3, [r0]
 802dd96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802dd9a:	6083      	str	r3, [r0, #8]
 802dd9c:	8181      	strh	r1, [r0, #12]
 802dd9e:	6643      	str	r3, [r0, #100]	; 0x64
 802dda0:	81c2      	strh	r2, [r0, #14]
 802dda2:	6183      	str	r3, [r0, #24]
 802dda4:	4619      	mov	r1, r3
 802dda6:	2208      	movs	r2, #8
 802dda8:	305c      	adds	r0, #92	; 0x5c
 802ddaa:	f7ff fcc7 	bl	802d73c <memset>
 802ddae:	4b05      	ldr	r3, [pc, #20]	; (802ddc4 <std+0x38>)
 802ddb0:	6263      	str	r3, [r4, #36]	; 0x24
 802ddb2:	4b05      	ldr	r3, [pc, #20]	; (802ddc8 <std+0x3c>)
 802ddb4:	62a3      	str	r3, [r4, #40]	; 0x28
 802ddb6:	4b05      	ldr	r3, [pc, #20]	; (802ddcc <std+0x40>)
 802ddb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 802ddba:	4b05      	ldr	r3, [pc, #20]	; (802ddd0 <std+0x44>)
 802ddbc:	6224      	str	r4, [r4, #32]
 802ddbe:	6323      	str	r3, [r4, #48]	; 0x30
 802ddc0:	bd10      	pop	{r4, pc}
 802ddc2:	bf00      	nop
 802ddc4:	0802e8f5 	.word	0x0802e8f5
 802ddc8:	0802e917 	.word	0x0802e917
 802ddcc:	0802e94f 	.word	0x0802e94f
 802ddd0:	0802e973 	.word	0x0802e973

0802ddd4 <_cleanup_r>:
 802ddd4:	4901      	ldr	r1, [pc, #4]	; (802dddc <_cleanup_r+0x8>)
 802ddd6:	f000 b8af 	b.w	802df38 <_fwalk_reent>
 802ddda:	bf00      	nop
 802dddc:	0802dd15 	.word	0x0802dd15

0802dde0 <__sfmoreglue>:
 802dde0:	b570      	push	{r4, r5, r6, lr}
 802dde2:	2268      	movs	r2, #104	; 0x68
 802dde4:	1e4d      	subs	r5, r1, #1
 802dde6:	4355      	muls	r5, r2
 802dde8:	460e      	mov	r6, r1
 802ddea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802ddee:	f7ff fd19 	bl	802d824 <_malloc_r>
 802ddf2:	4604      	mov	r4, r0
 802ddf4:	b140      	cbz	r0, 802de08 <__sfmoreglue+0x28>
 802ddf6:	2100      	movs	r1, #0
 802ddf8:	e9c0 1600 	strd	r1, r6, [r0]
 802ddfc:	300c      	adds	r0, #12
 802ddfe:	60a0      	str	r0, [r4, #8]
 802de00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802de04:	f7ff fc9a 	bl	802d73c <memset>
 802de08:	4620      	mov	r0, r4
 802de0a:	bd70      	pop	{r4, r5, r6, pc}

0802de0c <__sfp_lock_acquire>:
 802de0c:	4801      	ldr	r0, [pc, #4]	; (802de14 <__sfp_lock_acquire+0x8>)
 802de0e:	f000 b8b3 	b.w	802df78 <__retarget_lock_acquire_recursive>
 802de12:	bf00      	nop
 802de14:	200011d1 	.word	0x200011d1

0802de18 <__sfp_lock_release>:
 802de18:	4801      	ldr	r0, [pc, #4]	; (802de20 <__sfp_lock_release+0x8>)
 802de1a:	f000 b8ae 	b.w	802df7a <__retarget_lock_release_recursive>
 802de1e:	bf00      	nop
 802de20:	200011d1 	.word	0x200011d1

0802de24 <__sinit_lock_acquire>:
 802de24:	4801      	ldr	r0, [pc, #4]	; (802de2c <__sinit_lock_acquire+0x8>)
 802de26:	f000 b8a7 	b.w	802df78 <__retarget_lock_acquire_recursive>
 802de2a:	bf00      	nop
 802de2c:	200011d2 	.word	0x200011d2

0802de30 <__sinit_lock_release>:
 802de30:	4801      	ldr	r0, [pc, #4]	; (802de38 <__sinit_lock_release+0x8>)
 802de32:	f000 b8a2 	b.w	802df7a <__retarget_lock_release_recursive>
 802de36:	bf00      	nop
 802de38:	200011d2 	.word	0x200011d2

0802de3c <__sinit>:
 802de3c:	b510      	push	{r4, lr}
 802de3e:	4604      	mov	r4, r0
 802de40:	f7ff fff0 	bl	802de24 <__sinit_lock_acquire>
 802de44:	69a3      	ldr	r3, [r4, #24]
 802de46:	b11b      	cbz	r3, 802de50 <__sinit+0x14>
 802de48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802de4c:	f7ff bff0 	b.w	802de30 <__sinit_lock_release>
 802de50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802de54:	6523      	str	r3, [r4, #80]	; 0x50
 802de56:	4b13      	ldr	r3, [pc, #76]	; (802dea4 <__sinit+0x68>)
 802de58:	4a13      	ldr	r2, [pc, #76]	; (802dea8 <__sinit+0x6c>)
 802de5a:	681b      	ldr	r3, [r3, #0]
 802de5c:	62a2      	str	r2, [r4, #40]	; 0x28
 802de5e:	42a3      	cmp	r3, r4
 802de60:	bf04      	itt	eq
 802de62:	2301      	moveq	r3, #1
 802de64:	61a3      	streq	r3, [r4, #24]
 802de66:	4620      	mov	r0, r4
 802de68:	f000 f820 	bl	802deac <__sfp>
 802de6c:	6060      	str	r0, [r4, #4]
 802de6e:	4620      	mov	r0, r4
 802de70:	f000 f81c 	bl	802deac <__sfp>
 802de74:	60a0      	str	r0, [r4, #8]
 802de76:	4620      	mov	r0, r4
 802de78:	f000 f818 	bl	802deac <__sfp>
 802de7c:	2200      	movs	r2, #0
 802de7e:	60e0      	str	r0, [r4, #12]
 802de80:	2104      	movs	r1, #4
 802de82:	6860      	ldr	r0, [r4, #4]
 802de84:	f7ff ff82 	bl	802dd8c <std>
 802de88:	68a0      	ldr	r0, [r4, #8]
 802de8a:	2201      	movs	r2, #1
 802de8c:	2109      	movs	r1, #9
 802de8e:	f7ff ff7d 	bl	802dd8c <std>
 802de92:	68e0      	ldr	r0, [r4, #12]
 802de94:	2202      	movs	r2, #2
 802de96:	2112      	movs	r1, #18
 802de98:	f7ff ff78 	bl	802dd8c <std>
 802de9c:	2301      	movs	r3, #1
 802de9e:	61a3      	str	r3, [r4, #24]
 802dea0:	e7d2      	b.n	802de48 <__sinit+0xc>
 802dea2:	bf00      	nop
 802dea4:	080311a4 	.word	0x080311a4
 802dea8:	0802ddd5 	.word	0x0802ddd5

0802deac <__sfp>:
 802deac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802deae:	4607      	mov	r7, r0
 802deb0:	f7ff ffac 	bl	802de0c <__sfp_lock_acquire>
 802deb4:	4b1e      	ldr	r3, [pc, #120]	; (802df30 <__sfp+0x84>)
 802deb6:	681e      	ldr	r6, [r3, #0]
 802deb8:	69b3      	ldr	r3, [r6, #24]
 802deba:	b913      	cbnz	r3, 802dec2 <__sfp+0x16>
 802debc:	4630      	mov	r0, r6
 802debe:	f7ff ffbd 	bl	802de3c <__sinit>
 802dec2:	3648      	adds	r6, #72	; 0x48
 802dec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802dec8:	3b01      	subs	r3, #1
 802deca:	d503      	bpl.n	802ded4 <__sfp+0x28>
 802decc:	6833      	ldr	r3, [r6, #0]
 802dece:	b30b      	cbz	r3, 802df14 <__sfp+0x68>
 802ded0:	6836      	ldr	r6, [r6, #0]
 802ded2:	e7f7      	b.n	802dec4 <__sfp+0x18>
 802ded4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802ded8:	b9d5      	cbnz	r5, 802df10 <__sfp+0x64>
 802deda:	4b16      	ldr	r3, [pc, #88]	; (802df34 <__sfp+0x88>)
 802dedc:	60e3      	str	r3, [r4, #12]
 802dede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802dee2:	6665      	str	r5, [r4, #100]	; 0x64
 802dee4:	f000 f847 	bl	802df76 <__retarget_lock_init_recursive>
 802dee8:	f7ff ff96 	bl	802de18 <__sfp_lock_release>
 802deec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802def0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802def4:	6025      	str	r5, [r4, #0]
 802def6:	61a5      	str	r5, [r4, #24]
 802def8:	2208      	movs	r2, #8
 802defa:	4629      	mov	r1, r5
 802defc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802df00:	f7ff fc1c 	bl	802d73c <memset>
 802df04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802df08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802df0c:	4620      	mov	r0, r4
 802df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802df10:	3468      	adds	r4, #104	; 0x68
 802df12:	e7d9      	b.n	802dec8 <__sfp+0x1c>
 802df14:	2104      	movs	r1, #4
 802df16:	4638      	mov	r0, r7
 802df18:	f7ff ff62 	bl	802dde0 <__sfmoreglue>
 802df1c:	4604      	mov	r4, r0
 802df1e:	6030      	str	r0, [r6, #0]
 802df20:	2800      	cmp	r0, #0
 802df22:	d1d5      	bne.n	802ded0 <__sfp+0x24>
 802df24:	f7ff ff78 	bl	802de18 <__sfp_lock_release>
 802df28:	230c      	movs	r3, #12
 802df2a:	603b      	str	r3, [r7, #0]
 802df2c:	e7ee      	b.n	802df0c <__sfp+0x60>
 802df2e:	bf00      	nop
 802df30:	080311a4 	.word	0x080311a4
 802df34:	ffff0001 	.word	0xffff0001

0802df38 <_fwalk_reent>:
 802df38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802df3c:	4606      	mov	r6, r0
 802df3e:	4688      	mov	r8, r1
 802df40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802df44:	2700      	movs	r7, #0
 802df46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802df4a:	f1b9 0901 	subs.w	r9, r9, #1
 802df4e:	d505      	bpl.n	802df5c <_fwalk_reent+0x24>
 802df50:	6824      	ldr	r4, [r4, #0]
 802df52:	2c00      	cmp	r4, #0
 802df54:	d1f7      	bne.n	802df46 <_fwalk_reent+0xe>
 802df56:	4638      	mov	r0, r7
 802df58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802df5c:	89ab      	ldrh	r3, [r5, #12]
 802df5e:	2b01      	cmp	r3, #1
 802df60:	d907      	bls.n	802df72 <_fwalk_reent+0x3a>
 802df62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802df66:	3301      	adds	r3, #1
 802df68:	d003      	beq.n	802df72 <_fwalk_reent+0x3a>
 802df6a:	4629      	mov	r1, r5
 802df6c:	4630      	mov	r0, r6
 802df6e:	47c0      	blx	r8
 802df70:	4307      	orrs	r7, r0
 802df72:	3568      	adds	r5, #104	; 0x68
 802df74:	e7e9      	b.n	802df4a <_fwalk_reent+0x12>

0802df76 <__retarget_lock_init_recursive>:
 802df76:	4770      	bx	lr

0802df78 <__retarget_lock_acquire_recursive>:
 802df78:	4770      	bx	lr

0802df7a <__retarget_lock_release_recursive>:
 802df7a:	4770      	bx	lr

0802df7c <__swhatbuf_r>:
 802df7c:	b570      	push	{r4, r5, r6, lr}
 802df7e:	460e      	mov	r6, r1
 802df80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802df84:	2900      	cmp	r1, #0
 802df86:	b096      	sub	sp, #88	; 0x58
 802df88:	4614      	mov	r4, r2
 802df8a:	461d      	mov	r5, r3
 802df8c:	da08      	bge.n	802dfa0 <__swhatbuf_r+0x24>
 802df8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802df92:	2200      	movs	r2, #0
 802df94:	602a      	str	r2, [r5, #0]
 802df96:	061a      	lsls	r2, r3, #24
 802df98:	d410      	bmi.n	802dfbc <__swhatbuf_r+0x40>
 802df9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802df9e:	e00e      	b.n	802dfbe <__swhatbuf_r+0x42>
 802dfa0:	466a      	mov	r2, sp
 802dfa2:	f000 fd0d 	bl	802e9c0 <_fstat_r>
 802dfa6:	2800      	cmp	r0, #0
 802dfa8:	dbf1      	blt.n	802df8e <__swhatbuf_r+0x12>
 802dfaa:	9a01      	ldr	r2, [sp, #4]
 802dfac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802dfb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802dfb4:	425a      	negs	r2, r3
 802dfb6:	415a      	adcs	r2, r3
 802dfb8:	602a      	str	r2, [r5, #0]
 802dfba:	e7ee      	b.n	802df9a <__swhatbuf_r+0x1e>
 802dfbc:	2340      	movs	r3, #64	; 0x40
 802dfbe:	2000      	movs	r0, #0
 802dfc0:	6023      	str	r3, [r4, #0]
 802dfc2:	b016      	add	sp, #88	; 0x58
 802dfc4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802dfc8 <__smakebuf_r>:
 802dfc8:	898b      	ldrh	r3, [r1, #12]
 802dfca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802dfcc:	079d      	lsls	r5, r3, #30
 802dfce:	4606      	mov	r6, r0
 802dfd0:	460c      	mov	r4, r1
 802dfd2:	d507      	bpl.n	802dfe4 <__smakebuf_r+0x1c>
 802dfd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802dfd8:	6023      	str	r3, [r4, #0]
 802dfda:	6123      	str	r3, [r4, #16]
 802dfdc:	2301      	movs	r3, #1
 802dfde:	6163      	str	r3, [r4, #20]
 802dfe0:	b002      	add	sp, #8
 802dfe2:	bd70      	pop	{r4, r5, r6, pc}
 802dfe4:	ab01      	add	r3, sp, #4
 802dfe6:	466a      	mov	r2, sp
 802dfe8:	f7ff ffc8 	bl	802df7c <__swhatbuf_r>
 802dfec:	9900      	ldr	r1, [sp, #0]
 802dfee:	4605      	mov	r5, r0
 802dff0:	4630      	mov	r0, r6
 802dff2:	f7ff fc17 	bl	802d824 <_malloc_r>
 802dff6:	b948      	cbnz	r0, 802e00c <__smakebuf_r+0x44>
 802dff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802dffc:	059a      	lsls	r2, r3, #22
 802dffe:	d4ef      	bmi.n	802dfe0 <__smakebuf_r+0x18>
 802e000:	f023 0303 	bic.w	r3, r3, #3
 802e004:	f043 0302 	orr.w	r3, r3, #2
 802e008:	81a3      	strh	r3, [r4, #12]
 802e00a:	e7e3      	b.n	802dfd4 <__smakebuf_r+0xc>
 802e00c:	4b0d      	ldr	r3, [pc, #52]	; (802e044 <__smakebuf_r+0x7c>)
 802e00e:	62b3      	str	r3, [r6, #40]	; 0x28
 802e010:	89a3      	ldrh	r3, [r4, #12]
 802e012:	6020      	str	r0, [r4, #0]
 802e014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e018:	81a3      	strh	r3, [r4, #12]
 802e01a:	9b00      	ldr	r3, [sp, #0]
 802e01c:	6163      	str	r3, [r4, #20]
 802e01e:	9b01      	ldr	r3, [sp, #4]
 802e020:	6120      	str	r0, [r4, #16]
 802e022:	b15b      	cbz	r3, 802e03c <__smakebuf_r+0x74>
 802e024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e028:	4630      	mov	r0, r6
 802e02a:	f000 fcdb 	bl	802e9e4 <_isatty_r>
 802e02e:	b128      	cbz	r0, 802e03c <__smakebuf_r+0x74>
 802e030:	89a3      	ldrh	r3, [r4, #12]
 802e032:	f023 0303 	bic.w	r3, r3, #3
 802e036:	f043 0301 	orr.w	r3, r3, #1
 802e03a:	81a3      	strh	r3, [r4, #12]
 802e03c:	89a0      	ldrh	r0, [r4, #12]
 802e03e:	4305      	orrs	r5, r0
 802e040:	81a5      	strh	r5, [r4, #12]
 802e042:	e7cd      	b.n	802dfe0 <__smakebuf_r+0x18>
 802e044:	0802ddd5 	.word	0x0802ddd5

0802e048 <__malloc_lock>:
 802e048:	4801      	ldr	r0, [pc, #4]	; (802e050 <__malloc_lock+0x8>)
 802e04a:	f7ff bf95 	b.w	802df78 <__retarget_lock_acquire_recursive>
 802e04e:	bf00      	nop
 802e050:	200011d0 	.word	0x200011d0

0802e054 <__malloc_unlock>:
 802e054:	4801      	ldr	r0, [pc, #4]	; (802e05c <__malloc_unlock+0x8>)
 802e056:	f7ff bf90 	b.w	802df7a <__retarget_lock_release_recursive>
 802e05a:	bf00      	nop
 802e05c:	200011d0 	.word	0x200011d0

0802e060 <__ssputs_r>:
 802e060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e064:	688e      	ldr	r6, [r1, #8]
 802e066:	429e      	cmp	r6, r3
 802e068:	4682      	mov	sl, r0
 802e06a:	460c      	mov	r4, r1
 802e06c:	4690      	mov	r8, r2
 802e06e:	461f      	mov	r7, r3
 802e070:	d838      	bhi.n	802e0e4 <__ssputs_r+0x84>
 802e072:	898a      	ldrh	r2, [r1, #12]
 802e074:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802e078:	d032      	beq.n	802e0e0 <__ssputs_r+0x80>
 802e07a:	6825      	ldr	r5, [r4, #0]
 802e07c:	6909      	ldr	r1, [r1, #16]
 802e07e:	eba5 0901 	sub.w	r9, r5, r1
 802e082:	6965      	ldr	r5, [r4, #20]
 802e084:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e08c:	3301      	adds	r3, #1
 802e08e:	444b      	add	r3, r9
 802e090:	106d      	asrs	r5, r5, #1
 802e092:	429d      	cmp	r5, r3
 802e094:	bf38      	it	cc
 802e096:	461d      	movcc	r5, r3
 802e098:	0553      	lsls	r3, r2, #21
 802e09a:	d531      	bpl.n	802e100 <__ssputs_r+0xa0>
 802e09c:	4629      	mov	r1, r5
 802e09e:	f7ff fbc1 	bl	802d824 <_malloc_r>
 802e0a2:	4606      	mov	r6, r0
 802e0a4:	b950      	cbnz	r0, 802e0bc <__ssputs_r+0x5c>
 802e0a6:	230c      	movs	r3, #12
 802e0a8:	f8ca 3000 	str.w	r3, [sl]
 802e0ac:	89a3      	ldrh	r3, [r4, #12]
 802e0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e0b2:	81a3      	strh	r3, [r4, #12]
 802e0b4:	f04f 30ff 	mov.w	r0, #4294967295
 802e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e0bc:	6921      	ldr	r1, [r4, #16]
 802e0be:	464a      	mov	r2, r9
 802e0c0:	f000 fcb2 	bl	802ea28 <memcpy>
 802e0c4:	89a3      	ldrh	r3, [r4, #12]
 802e0c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802e0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e0ce:	81a3      	strh	r3, [r4, #12]
 802e0d0:	6126      	str	r6, [r4, #16]
 802e0d2:	6165      	str	r5, [r4, #20]
 802e0d4:	444e      	add	r6, r9
 802e0d6:	eba5 0509 	sub.w	r5, r5, r9
 802e0da:	6026      	str	r6, [r4, #0]
 802e0dc:	60a5      	str	r5, [r4, #8]
 802e0de:	463e      	mov	r6, r7
 802e0e0:	42be      	cmp	r6, r7
 802e0e2:	d900      	bls.n	802e0e6 <__ssputs_r+0x86>
 802e0e4:	463e      	mov	r6, r7
 802e0e6:	6820      	ldr	r0, [r4, #0]
 802e0e8:	4632      	mov	r2, r6
 802e0ea:	4641      	mov	r1, r8
 802e0ec:	f000 fcaa 	bl	802ea44 <memmove>
 802e0f0:	68a3      	ldr	r3, [r4, #8]
 802e0f2:	1b9b      	subs	r3, r3, r6
 802e0f4:	60a3      	str	r3, [r4, #8]
 802e0f6:	6823      	ldr	r3, [r4, #0]
 802e0f8:	4433      	add	r3, r6
 802e0fa:	6023      	str	r3, [r4, #0]
 802e0fc:	2000      	movs	r0, #0
 802e0fe:	e7db      	b.n	802e0b8 <__ssputs_r+0x58>
 802e100:	462a      	mov	r2, r5
 802e102:	f000 fcb9 	bl	802ea78 <_realloc_r>
 802e106:	4606      	mov	r6, r0
 802e108:	2800      	cmp	r0, #0
 802e10a:	d1e1      	bne.n	802e0d0 <__ssputs_r+0x70>
 802e10c:	6921      	ldr	r1, [r4, #16]
 802e10e:	4650      	mov	r0, sl
 802e110:	f7ff fb1c 	bl	802d74c <_free_r>
 802e114:	e7c7      	b.n	802e0a6 <__ssputs_r+0x46>
	...

0802e118 <_svfiprintf_r>:
 802e118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e11c:	4698      	mov	r8, r3
 802e11e:	898b      	ldrh	r3, [r1, #12]
 802e120:	061b      	lsls	r3, r3, #24
 802e122:	b09d      	sub	sp, #116	; 0x74
 802e124:	4607      	mov	r7, r0
 802e126:	460d      	mov	r5, r1
 802e128:	4614      	mov	r4, r2
 802e12a:	d50e      	bpl.n	802e14a <_svfiprintf_r+0x32>
 802e12c:	690b      	ldr	r3, [r1, #16]
 802e12e:	b963      	cbnz	r3, 802e14a <_svfiprintf_r+0x32>
 802e130:	2140      	movs	r1, #64	; 0x40
 802e132:	f7ff fb77 	bl	802d824 <_malloc_r>
 802e136:	6028      	str	r0, [r5, #0]
 802e138:	6128      	str	r0, [r5, #16]
 802e13a:	b920      	cbnz	r0, 802e146 <_svfiprintf_r+0x2e>
 802e13c:	230c      	movs	r3, #12
 802e13e:	603b      	str	r3, [r7, #0]
 802e140:	f04f 30ff 	mov.w	r0, #4294967295
 802e144:	e0d1      	b.n	802e2ea <_svfiprintf_r+0x1d2>
 802e146:	2340      	movs	r3, #64	; 0x40
 802e148:	616b      	str	r3, [r5, #20]
 802e14a:	2300      	movs	r3, #0
 802e14c:	9309      	str	r3, [sp, #36]	; 0x24
 802e14e:	2320      	movs	r3, #32
 802e150:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e154:	f8cd 800c 	str.w	r8, [sp, #12]
 802e158:	2330      	movs	r3, #48	; 0x30
 802e15a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802e304 <_svfiprintf_r+0x1ec>
 802e15e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e162:	f04f 0901 	mov.w	r9, #1
 802e166:	4623      	mov	r3, r4
 802e168:	469a      	mov	sl, r3
 802e16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e16e:	b10a      	cbz	r2, 802e174 <_svfiprintf_r+0x5c>
 802e170:	2a25      	cmp	r2, #37	; 0x25
 802e172:	d1f9      	bne.n	802e168 <_svfiprintf_r+0x50>
 802e174:	ebba 0b04 	subs.w	fp, sl, r4
 802e178:	d00b      	beq.n	802e192 <_svfiprintf_r+0x7a>
 802e17a:	465b      	mov	r3, fp
 802e17c:	4622      	mov	r2, r4
 802e17e:	4629      	mov	r1, r5
 802e180:	4638      	mov	r0, r7
 802e182:	f7ff ff6d 	bl	802e060 <__ssputs_r>
 802e186:	3001      	adds	r0, #1
 802e188:	f000 80aa 	beq.w	802e2e0 <_svfiprintf_r+0x1c8>
 802e18c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e18e:	445a      	add	r2, fp
 802e190:	9209      	str	r2, [sp, #36]	; 0x24
 802e192:	f89a 3000 	ldrb.w	r3, [sl]
 802e196:	2b00      	cmp	r3, #0
 802e198:	f000 80a2 	beq.w	802e2e0 <_svfiprintf_r+0x1c8>
 802e19c:	2300      	movs	r3, #0
 802e19e:	f04f 32ff 	mov.w	r2, #4294967295
 802e1a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e1a6:	f10a 0a01 	add.w	sl, sl, #1
 802e1aa:	9304      	str	r3, [sp, #16]
 802e1ac:	9307      	str	r3, [sp, #28]
 802e1ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e1b2:	931a      	str	r3, [sp, #104]	; 0x68
 802e1b4:	4654      	mov	r4, sl
 802e1b6:	2205      	movs	r2, #5
 802e1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e1bc:	4851      	ldr	r0, [pc, #324]	; (802e304 <_svfiprintf_r+0x1ec>)
 802e1be:	f7f2 f817 	bl	80201f0 <memchr>
 802e1c2:	9a04      	ldr	r2, [sp, #16]
 802e1c4:	b9d8      	cbnz	r0, 802e1fe <_svfiprintf_r+0xe6>
 802e1c6:	06d0      	lsls	r0, r2, #27
 802e1c8:	bf44      	itt	mi
 802e1ca:	2320      	movmi	r3, #32
 802e1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e1d0:	0711      	lsls	r1, r2, #28
 802e1d2:	bf44      	itt	mi
 802e1d4:	232b      	movmi	r3, #43	; 0x2b
 802e1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e1da:	f89a 3000 	ldrb.w	r3, [sl]
 802e1de:	2b2a      	cmp	r3, #42	; 0x2a
 802e1e0:	d015      	beq.n	802e20e <_svfiprintf_r+0xf6>
 802e1e2:	9a07      	ldr	r2, [sp, #28]
 802e1e4:	4654      	mov	r4, sl
 802e1e6:	2000      	movs	r0, #0
 802e1e8:	f04f 0c0a 	mov.w	ip, #10
 802e1ec:	4621      	mov	r1, r4
 802e1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e1f2:	3b30      	subs	r3, #48	; 0x30
 802e1f4:	2b09      	cmp	r3, #9
 802e1f6:	d94e      	bls.n	802e296 <_svfiprintf_r+0x17e>
 802e1f8:	b1b0      	cbz	r0, 802e228 <_svfiprintf_r+0x110>
 802e1fa:	9207      	str	r2, [sp, #28]
 802e1fc:	e014      	b.n	802e228 <_svfiprintf_r+0x110>
 802e1fe:	eba0 0308 	sub.w	r3, r0, r8
 802e202:	fa09 f303 	lsl.w	r3, r9, r3
 802e206:	4313      	orrs	r3, r2
 802e208:	9304      	str	r3, [sp, #16]
 802e20a:	46a2      	mov	sl, r4
 802e20c:	e7d2      	b.n	802e1b4 <_svfiprintf_r+0x9c>
 802e20e:	9b03      	ldr	r3, [sp, #12]
 802e210:	1d19      	adds	r1, r3, #4
 802e212:	681b      	ldr	r3, [r3, #0]
 802e214:	9103      	str	r1, [sp, #12]
 802e216:	2b00      	cmp	r3, #0
 802e218:	bfbb      	ittet	lt
 802e21a:	425b      	neglt	r3, r3
 802e21c:	f042 0202 	orrlt.w	r2, r2, #2
 802e220:	9307      	strge	r3, [sp, #28]
 802e222:	9307      	strlt	r3, [sp, #28]
 802e224:	bfb8      	it	lt
 802e226:	9204      	strlt	r2, [sp, #16]
 802e228:	7823      	ldrb	r3, [r4, #0]
 802e22a:	2b2e      	cmp	r3, #46	; 0x2e
 802e22c:	d10c      	bne.n	802e248 <_svfiprintf_r+0x130>
 802e22e:	7863      	ldrb	r3, [r4, #1]
 802e230:	2b2a      	cmp	r3, #42	; 0x2a
 802e232:	d135      	bne.n	802e2a0 <_svfiprintf_r+0x188>
 802e234:	9b03      	ldr	r3, [sp, #12]
 802e236:	1d1a      	adds	r2, r3, #4
 802e238:	681b      	ldr	r3, [r3, #0]
 802e23a:	9203      	str	r2, [sp, #12]
 802e23c:	2b00      	cmp	r3, #0
 802e23e:	bfb8      	it	lt
 802e240:	f04f 33ff 	movlt.w	r3, #4294967295
 802e244:	3402      	adds	r4, #2
 802e246:	9305      	str	r3, [sp, #20]
 802e248:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802e314 <_svfiprintf_r+0x1fc>
 802e24c:	7821      	ldrb	r1, [r4, #0]
 802e24e:	2203      	movs	r2, #3
 802e250:	4650      	mov	r0, sl
 802e252:	f7f1 ffcd 	bl	80201f0 <memchr>
 802e256:	b140      	cbz	r0, 802e26a <_svfiprintf_r+0x152>
 802e258:	2340      	movs	r3, #64	; 0x40
 802e25a:	eba0 000a 	sub.w	r0, r0, sl
 802e25e:	fa03 f000 	lsl.w	r0, r3, r0
 802e262:	9b04      	ldr	r3, [sp, #16]
 802e264:	4303      	orrs	r3, r0
 802e266:	3401      	adds	r4, #1
 802e268:	9304      	str	r3, [sp, #16]
 802e26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e26e:	4826      	ldr	r0, [pc, #152]	; (802e308 <_svfiprintf_r+0x1f0>)
 802e270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e274:	2206      	movs	r2, #6
 802e276:	f7f1 ffbb 	bl	80201f0 <memchr>
 802e27a:	2800      	cmp	r0, #0
 802e27c:	d038      	beq.n	802e2f0 <_svfiprintf_r+0x1d8>
 802e27e:	4b23      	ldr	r3, [pc, #140]	; (802e30c <_svfiprintf_r+0x1f4>)
 802e280:	bb1b      	cbnz	r3, 802e2ca <_svfiprintf_r+0x1b2>
 802e282:	9b03      	ldr	r3, [sp, #12]
 802e284:	3307      	adds	r3, #7
 802e286:	f023 0307 	bic.w	r3, r3, #7
 802e28a:	3308      	adds	r3, #8
 802e28c:	9303      	str	r3, [sp, #12]
 802e28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e290:	4433      	add	r3, r6
 802e292:	9309      	str	r3, [sp, #36]	; 0x24
 802e294:	e767      	b.n	802e166 <_svfiprintf_r+0x4e>
 802e296:	fb0c 3202 	mla	r2, ip, r2, r3
 802e29a:	460c      	mov	r4, r1
 802e29c:	2001      	movs	r0, #1
 802e29e:	e7a5      	b.n	802e1ec <_svfiprintf_r+0xd4>
 802e2a0:	2300      	movs	r3, #0
 802e2a2:	3401      	adds	r4, #1
 802e2a4:	9305      	str	r3, [sp, #20]
 802e2a6:	4619      	mov	r1, r3
 802e2a8:	f04f 0c0a 	mov.w	ip, #10
 802e2ac:	4620      	mov	r0, r4
 802e2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e2b2:	3a30      	subs	r2, #48	; 0x30
 802e2b4:	2a09      	cmp	r2, #9
 802e2b6:	d903      	bls.n	802e2c0 <_svfiprintf_r+0x1a8>
 802e2b8:	2b00      	cmp	r3, #0
 802e2ba:	d0c5      	beq.n	802e248 <_svfiprintf_r+0x130>
 802e2bc:	9105      	str	r1, [sp, #20]
 802e2be:	e7c3      	b.n	802e248 <_svfiprintf_r+0x130>
 802e2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 802e2c4:	4604      	mov	r4, r0
 802e2c6:	2301      	movs	r3, #1
 802e2c8:	e7f0      	b.n	802e2ac <_svfiprintf_r+0x194>
 802e2ca:	ab03      	add	r3, sp, #12
 802e2cc:	9300      	str	r3, [sp, #0]
 802e2ce:	462a      	mov	r2, r5
 802e2d0:	4b0f      	ldr	r3, [pc, #60]	; (802e310 <_svfiprintf_r+0x1f8>)
 802e2d2:	a904      	add	r1, sp, #16
 802e2d4:	4638      	mov	r0, r7
 802e2d6:	f3af 8000 	nop.w
 802e2da:	1c42      	adds	r2, r0, #1
 802e2dc:	4606      	mov	r6, r0
 802e2de:	d1d6      	bne.n	802e28e <_svfiprintf_r+0x176>
 802e2e0:	89ab      	ldrh	r3, [r5, #12]
 802e2e2:	065b      	lsls	r3, r3, #25
 802e2e4:	f53f af2c 	bmi.w	802e140 <_svfiprintf_r+0x28>
 802e2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e2ea:	b01d      	add	sp, #116	; 0x74
 802e2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e2f0:	ab03      	add	r3, sp, #12
 802e2f2:	9300      	str	r3, [sp, #0]
 802e2f4:	462a      	mov	r2, r5
 802e2f6:	4b06      	ldr	r3, [pc, #24]	; (802e310 <_svfiprintf_r+0x1f8>)
 802e2f8:	a904      	add	r1, sp, #16
 802e2fa:	4638      	mov	r0, r7
 802e2fc:	f000 f9d4 	bl	802e6a8 <_printf_i>
 802e300:	e7eb      	b.n	802e2da <_svfiprintf_r+0x1c2>
 802e302:	bf00      	nop
 802e304:	08031208 	.word	0x08031208
 802e308:	08031212 	.word	0x08031212
 802e30c:	00000000 	.word	0x00000000
 802e310:	0802e061 	.word	0x0802e061
 802e314:	0803120e 	.word	0x0803120e

0802e318 <__sfputc_r>:
 802e318:	6893      	ldr	r3, [r2, #8]
 802e31a:	3b01      	subs	r3, #1
 802e31c:	2b00      	cmp	r3, #0
 802e31e:	b410      	push	{r4}
 802e320:	6093      	str	r3, [r2, #8]
 802e322:	da08      	bge.n	802e336 <__sfputc_r+0x1e>
 802e324:	6994      	ldr	r4, [r2, #24]
 802e326:	42a3      	cmp	r3, r4
 802e328:	db01      	blt.n	802e32e <__sfputc_r+0x16>
 802e32a:	290a      	cmp	r1, #10
 802e32c:	d103      	bne.n	802e336 <__sfputc_r+0x1e>
 802e32e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e332:	f7ff bba9 	b.w	802da88 <__swbuf_r>
 802e336:	6813      	ldr	r3, [r2, #0]
 802e338:	1c58      	adds	r0, r3, #1
 802e33a:	6010      	str	r0, [r2, #0]
 802e33c:	7019      	strb	r1, [r3, #0]
 802e33e:	4608      	mov	r0, r1
 802e340:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e344:	4770      	bx	lr

0802e346 <__sfputs_r>:
 802e346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e348:	4606      	mov	r6, r0
 802e34a:	460f      	mov	r7, r1
 802e34c:	4614      	mov	r4, r2
 802e34e:	18d5      	adds	r5, r2, r3
 802e350:	42ac      	cmp	r4, r5
 802e352:	d101      	bne.n	802e358 <__sfputs_r+0x12>
 802e354:	2000      	movs	r0, #0
 802e356:	e007      	b.n	802e368 <__sfputs_r+0x22>
 802e358:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e35c:	463a      	mov	r2, r7
 802e35e:	4630      	mov	r0, r6
 802e360:	f7ff ffda 	bl	802e318 <__sfputc_r>
 802e364:	1c43      	adds	r3, r0, #1
 802e366:	d1f3      	bne.n	802e350 <__sfputs_r+0xa>
 802e368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802e36c <_vfiprintf_r>:
 802e36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e370:	460d      	mov	r5, r1
 802e372:	b09d      	sub	sp, #116	; 0x74
 802e374:	4614      	mov	r4, r2
 802e376:	4698      	mov	r8, r3
 802e378:	4606      	mov	r6, r0
 802e37a:	b118      	cbz	r0, 802e384 <_vfiprintf_r+0x18>
 802e37c:	6983      	ldr	r3, [r0, #24]
 802e37e:	b90b      	cbnz	r3, 802e384 <_vfiprintf_r+0x18>
 802e380:	f7ff fd5c 	bl	802de3c <__sinit>
 802e384:	4b89      	ldr	r3, [pc, #548]	; (802e5ac <_vfiprintf_r+0x240>)
 802e386:	429d      	cmp	r5, r3
 802e388:	d11b      	bne.n	802e3c2 <_vfiprintf_r+0x56>
 802e38a:	6875      	ldr	r5, [r6, #4]
 802e38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e38e:	07d9      	lsls	r1, r3, #31
 802e390:	d405      	bmi.n	802e39e <_vfiprintf_r+0x32>
 802e392:	89ab      	ldrh	r3, [r5, #12]
 802e394:	059a      	lsls	r2, r3, #22
 802e396:	d402      	bmi.n	802e39e <_vfiprintf_r+0x32>
 802e398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e39a:	f7ff fded 	bl	802df78 <__retarget_lock_acquire_recursive>
 802e39e:	89ab      	ldrh	r3, [r5, #12]
 802e3a0:	071b      	lsls	r3, r3, #28
 802e3a2:	d501      	bpl.n	802e3a8 <_vfiprintf_r+0x3c>
 802e3a4:	692b      	ldr	r3, [r5, #16]
 802e3a6:	b9eb      	cbnz	r3, 802e3e4 <_vfiprintf_r+0x78>
 802e3a8:	4629      	mov	r1, r5
 802e3aa:	4630      	mov	r0, r6
 802e3ac:	f7ff fbbe 	bl	802db2c <__swsetup_r>
 802e3b0:	b1c0      	cbz	r0, 802e3e4 <_vfiprintf_r+0x78>
 802e3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e3b4:	07dc      	lsls	r4, r3, #31
 802e3b6:	d50e      	bpl.n	802e3d6 <_vfiprintf_r+0x6a>
 802e3b8:	f04f 30ff 	mov.w	r0, #4294967295
 802e3bc:	b01d      	add	sp, #116	; 0x74
 802e3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e3c2:	4b7b      	ldr	r3, [pc, #492]	; (802e5b0 <_vfiprintf_r+0x244>)
 802e3c4:	429d      	cmp	r5, r3
 802e3c6:	d101      	bne.n	802e3cc <_vfiprintf_r+0x60>
 802e3c8:	68b5      	ldr	r5, [r6, #8]
 802e3ca:	e7df      	b.n	802e38c <_vfiprintf_r+0x20>
 802e3cc:	4b79      	ldr	r3, [pc, #484]	; (802e5b4 <_vfiprintf_r+0x248>)
 802e3ce:	429d      	cmp	r5, r3
 802e3d0:	bf08      	it	eq
 802e3d2:	68f5      	ldreq	r5, [r6, #12]
 802e3d4:	e7da      	b.n	802e38c <_vfiprintf_r+0x20>
 802e3d6:	89ab      	ldrh	r3, [r5, #12]
 802e3d8:	0598      	lsls	r0, r3, #22
 802e3da:	d4ed      	bmi.n	802e3b8 <_vfiprintf_r+0x4c>
 802e3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e3de:	f7ff fdcc 	bl	802df7a <__retarget_lock_release_recursive>
 802e3e2:	e7e9      	b.n	802e3b8 <_vfiprintf_r+0x4c>
 802e3e4:	2300      	movs	r3, #0
 802e3e6:	9309      	str	r3, [sp, #36]	; 0x24
 802e3e8:	2320      	movs	r3, #32
 802e3ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802e3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 802e3f2:	2330      	movs	r3, #48	; 0x30
 802e3f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e5b8 <_vfiprintf_r+0x24c>
 802e3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802e3fc:	f04f 0901 	mov.w	r9, #1
 802e400:	4623      	mov	r3, r4
 802e402:	469a      	mov	sl, r3
 802e404:	f813 2b01 	ldrb.w	r2, [r3], #1
 802e408:	b10a      	cbz	r2, 802e40e <_vfiprintf_r+0xa2>
 802e40a:	2a25      	cmp	r2, #37	; 0x25
 802e40c:	d1f9      	bne.n	802e402 <_vfiprintf_r+0x96>
 802e40e:	ebba 0b04 	subs.w	fp, sl, r4
 802e412:	d00b      	beq.n	802e42c <_vfiprintf_r+0xc0>
 802e414:	465b      	mov	r3, fp
 802e416:	4622      	mov	r2, r4
 802e418:	4629      	mov	r1, r5
 802e41a:	4630      	mov	r0, r6
 802e41c:	f7ff ff93 	bl	802e346 <__sfputs_r>
 802e420:	3001      	adds	r0, #1
 802e422:	f000 80aa 	beq.w	802e57a <_vfiprintf_r+0x20e>
 802e426:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e428:	445a      	add	r2, fp
 802e42a:	9209      	str	r2, [sp, #36]	; 0x24
 802e42c:	f89a 3000 	ldrb.w	r3, [sl]
 802e430:	2b00      	cmp	r3, #0
 802e432:	f000 80a2 	beq.w	802e57a <_vfiprintf_r+0x20e>
 802e436:	2300      	movs	r3, #0
 802e438:	f04f 32ff 	mov.w	r2, #4294967295
 802e43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802e440:	f10a 0a01 	add.w	sl, sl, #1
 802e444:	9304      	str	r3, [sp, #16]
 802e446:	9307      	str	r3, [sp, #28]
 802e448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802e44c:	931a      	str	r3, [sp, #104]	; 0x68
 802e44e:	4654      	mov	r4, sl
 802e450:	2205      	movs	r2, #5
 802e452:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e456:	4858      	ldr	r0, [pc, #352]	; (802e5b8 <_vfiprintf_r+0x24c>)
 802e458:	f7f1 feca 	bl	80201f0 <memchr>
 802e45c:	9a04      	ldr	r2, [sp, #16]
 802e45e:	b9d8      	cbnz	r0, 802e498 <_vfiprintf_r+0x12c>
 802e460:	06d1      	lsls	r1, r2, #27
 802e462:	bf44      	itt	mi
 802e464:	2320      	movmi	r3, #32
 802e466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e46a:	0713      	lsls	r3, r2, #28
 802e46c:	bf44      	itt	mi
 802e46e:	232b      	movmi	r3, #43	; 0x2b
 802e470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802e474:	f89a 3000 	ldrb.w	r3, [sl]
 802e478:	2b2a      	cmp	r3, #42	; 0x2a
 802e47a:	d015      	beq.n	802e4a8 <_vfiprintf_r+0x13c>
 802e47c:	9a07      	ldr	r2, [sp, #28]
 802e47e:	4654      	mov	r4, sl
 802e480:	2000      	movs	r0, #0
 802e482:	f04f 0c0a 	mov.w	ip, #10
 802e486:	4621      	mov	r1, r4
 802e488:	f811 3b01 	ldrb.w	r3, [r1], #1
 802e48c:	3b30      	subs	r3, #48	; 0x30
 802e48e:	2b09      	cmp	r3, #9
 802e490:	d94e      	bls.n	802e530 <_vfiprintf_r+0x1c4>
 802e492:	b1b0      	cbz	r0, 802e4c2 <_vfiprintf_r+0x156>
 802e494:	9207      	str	r2, [sp, #28]
 802e496:	e014      	b.n	802e4c2 <_vfiprintf_r+0x156>
 802e498:	eba0 0308 	sub.w	r3, r0, r8
 802e49c:	fa09 f303 	lsl.w	r3, r9, r3
 802e4a0:	4313      	orrs	r3, r2
 802e4a2:	9304      	str	r3, [sp, #16]
 802e4a4:	46a2      	mov	sl, r4
 802e4a6:	e7d2      	b.n	802e44e <_vfiprintf_r+0xe2>
 802e4a8:	9b03      	ldr	r3, [sp, #12]
 802e4aa:	1d19      	adds	r1, r3, #4
 802e4ac:	681b      	ldr	r3, [r3, #0]
 802e4ae:	9103      	str	r1, [sp, #12]
 802e4b0:	2b00      	cmp	r3, #0
 802e4b2:	bfbb      	ittet	lt
 802e4b4:	425b      	neglt	r3, r3
 802e4b6:	f042 0202 	orrlt.w	r2, r2, #2
 802e4ba:	9307      	strge	r3, [sp, #28]
 802e4bc:	9307      	strlt	r3, [sp, #28]
 802e4be:	bfb8      	it	lt
 802e4c0:	9204      	strlt	r2, [sp, #16]
 802e4c2:	7823      	ldrb	r3, [r4, #0]
 802e4c4:	2b2e      	cmp	r3, #46	; 0x2e
 802e4c6:	d10c      	bne.n	802e4e2 <_vfiprintf_r+0x176>
 802e4c8:	7863      	ldrb	r3, [r4, #1]
 802e4ca:	2b2a      	cmp	r3, #42	; 0x2a
 802e4cc:	d135      	bne.n	802e53a <_vfiprintf_r+0x1ce>
 802e4ce:	9b03      	ldr	r3, [sp, #12]
 802e4d0:	1d1a      	adds	r2, r3, #4
 802e4d2:	681b      	ldr	r3, [r3, #0]
 802e4d4:	9203      	str	r2, [sp, #12]
 802e4d6:	2b00      	cmp	r3, #0
 802e4d8:	bfb8      	it	lt
 802e4da:	f04f 33ff 	movlt.w	r3, #4294967295
 802e4de:	3402      	adds	r4, #2
 802e4e0:	9305      	str	r3, [sp, #20]
 802e4e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e5c8 <_vfiprintf_r+0x25c>
 802e4e6:	7821      	ldrb	r1, [r4, #0]
 802e4e8:	2203      	movs	r2, #3
 802e4ea:	4650      	mov	r0, sl
 802e4ec:	f7f1 fe80 	bl	80201f0 <memchr>
 802e4f0:	b140      	cbz	r0, 802e504 <_vfiprintf_r+0x198>
 802e4f2:	2340      	movs	r3, #64	; 0x40
 802e4f4:	eba0 000a 	sub.w	r0, r0, sl
 802e4f8:	fa03 f000 	lsl.w	r0, r3, r0
 802e4fc:	9b04      	ldr	r3, [sp, #16]
 802e4fe:	4303      	orrs	r3, r0
 802e500:	3401      	adds	r4, #1
 802e502:	9304      	str	r3, [sp, #16]
 802e504:	f814 1b01 	ldrb.w	r1, [r4], #1
 802e508:	482c      	ldr	r0, [pc, #176]	; (802e5bc <_vfiprintf_r+0x250>)
 802e50a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802e50e:	2206      	movs	r2, #6
 802e510:	f7f1 fe6e 	bl	80201f0 <memchr>
 802e514:	2800      	cmp	r0, #0
 802e516:	d03f      	beq.n	802e598 <_vfiprintf_r+0x22c>
 802e518:	4b29      	ldr	r3, [pc, #164]	; (802e5c0 <_vfiprintf_r+0x254>)
 802e51a:	bb1b      	cbnz	r3, 802e564 <_vfiprintf_r+0x1f8>
 802e51c:	9b03      	ldr	r3, [sp, #12]
 802e51e:	3307      	adds	r3, #7
 802e520:	f023 0307 	bic.w	r3, r3, #7
 802e524:	3308      	adds	r3, #8
 802e526:	9303      	str	r3, [sp, #12]
 802e528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e52a:	443b      	add	r3, r7
 802e52c:	9309      	str	r3, [sp, #36]	; 0x24
 802e52e:	e767      	b.n	802e400 <_vfiprintf_r+0x94>
 802e530:	fb0c 3202 	mla	r2, ip, r2, r3
 802e534:	460c      	mov	r4, r1
 802e536:	2001      	movs	r0, #1
 802e538:	e7a5      	b.n	802e486 <_vfiprintf_r+0x11a>
 802e53a:	2300      	movs	r3, #0
 802e53c:	3401      	adds	r4, #1
 802e53e:	9305      	str	r3, [sp, #20]
 802e540:	4619      	mov	r1, r3
 802e542:	f04f 0c0a 	mov.w	ip, #10
 802e546:	4620      	mov	r0, r4
 802e548:	f810 2b01 	ldrb.w	r2, [r0], #1
 802e54c:	3a30      	subs	r2, #48	; 0x30
 802e54e:	2a09      	cmp	r2, #9
 802e550:	d903      	bls.n	802e55a <_vfiprintf_r+0x1ee>
 802e552:	2b00      	cmp	r3, #0
 802e554:	d0c5      	beq.n	802e4e2 <_vfiprintf_r+0x176>
 802e556:	9105      	str	r1, [sp, #20]
 802e558:	e7c3      	b.n	802e4e2 <_vfiprintf_r+0x176>
 802e55a:	fb0c 2101 	mla	r1, ip, r1, r2
 802e55e:	4604      	mov	r4, r0
 802e560:	2301      	movs	r3, #1
 802e562:	e7f0      	b.n	802e546 <_vfiprintf_r+0x1da>
 802e564:	ab03      	add	r3, sp, #12
 802e566:	9300      	str	r3, [sp, #0]
 802e568:	462a      	mov	r2, r5
 802e56a:	4b16      	ldr	r3, [pc, #88]	; (802e5c4 <_vfiprintf_r+0x258>)
 802e56c:	a904      	add	r1, sp, #16
 802e56e:	4630      	mov	r0, r6
 802e570:	f3af 8000 	nop.w
 802e574:	4607      	mov	r7, r0
 802e576:	1c78      	adds	r0, r7, #1
 802e578:	d1d6      	bne.n	802e528 <_vfiprintf_r+0x1bc>
 802e57a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e57c:	07d9      	lsls	r1, r3, #31
 802e57e:	d405      	bmi.n	802e58c <_vfiprintf_r+0x220>
 802e580:	89ab      	ldrh	r3, [r5, #12]
 802e582:	059a      	lsls	r2, r3, #22
 802e584:	d402      	bmi.n	802e58c <_vfiprintf_r+0x220>
 802e586:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e588:	f7ff fcf7 	bl	802df7a <__retarget_lock_release_recursive>
 802e58c:	89ab      	ldrh	r3, [r5, #12]
 802e58e:	065b      	lsls	r3, r3, #25
 802e590:	f53f af12 	bmi.w	802e3b8 <_vfiprintf_r+0x4c>
 802e594:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e596:	e711      	b.n	802e3bc <_vfiprintf_r+0x50>
 802e598:	ab03      	add	r3, sp, #12
 802e59a:	9300      	str	r3, [sp, #0]
 802e59c:	462a      	mov	r2, r5
 802e59e:	4b09      	ldr	r3, [pc, #36]	; (802e5c4 <_vfiprintf_r+0x258>)
 802e5a0:	a904      	add	r1, sp, #16
 802e5a2:	4630      	mov	r0, r6
 802e5a4:	f000 f880 	bl	802e6a8 <_printf_i>
 802e5a8:	e7e4      	b.n	802e574 <_vfiprintf_r+0x208>
 802e5aa:	bf00      	nop
 802e5ac:	080311c8 	.word	0x080311c8
 802e5b0:	080311e8 	.word	0x080311e8
 802e5b4:	080311a8 	.word	0x080311a8
 802e5b8:	08031208 	.word	0x08031208
 802e5bc:	08031212 	.word	0x08031212
 802e5c0:	00000000 	.word	0x00000000
 802e5c4:	0802e347 	.word	0x0802e347
 802e5c8:	0803120e 	.word	0x0803120e

0802e5cc <_printf_common>:
 802e5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e5d0:	4616      	mov	r6, r2
 802e5d2:	4699      	mov	r9, r3
 802e5d4:	688a      	ldr	r2, [r1, #8]
 802e5d6:	690b      	ldr	r3, [r1, #16]
 802e5d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e5dc:	4293      	cmp	r3, r2
 802e5de:	bfb8      	it	lt
 802e5e0:	4613      	movlt	r3, r2
 802e5e2:	6033      	str	r3, [r6, #0]
 802e5e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e5e8:	4607      	mov	r7, r0
 802e5ea:	460c      	mov	r4, r1
 802e5ec:	b10a      	cbz	r2, 802e5f2 <_printf_common+0x26>
 802e5ee:	3301      	adds	r3, #1
 802e5f0:	6033      	str	r3, [r6, #0]
 802e5f2:	6823      	ldr	r3, [r4, #0]
 802e5f4:	0699      	lsls	r1, r3, #26
 802e5f6:	bf42      	ittt	mi
 802e5f8:	6833      	ldrmi	r3, [r6, #0]
 802e5fa:	3302      	addmi	r3, #2
 802e5fc:	6033      	strmi	r3, [r6, #0]
 802e5fe:	6825      	ldr	r5, [r4, #0]
 802e600:	f015 0506 	ands.w	r5, r5, #6
 802e604:	d106      	bne.n	802e614 <_printf_common+0x48>
 802e606:	f104 0a19 	add.w	sl, r4, #25
 802e60a:	68e3      	ldr	r3, [r4, #12]
 802e60c:	6832      	ldr	r2, [r6, #0]
 802e60e:	1a9b      	subs	r3, r3, r2
 802e610:	42ab      	cmp	r3, r5
 802e612:	dc26      	bgt.n	802e662 <_printf_common+0x96>
 802e614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e618:	1e13      	subs	r3, r2, #0
 802e61a:	6822      	ldr	r2, [r4, #0]
 802e61c:	bf18      	it	ne
 802e61e:	2301      	movne	r3, #1
 802e620:	0692      	lsls	r2, r2, #26
 802e622:	d42b      	bmi.n	802e67c <_printf_common+0xb0>
 802e624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e628:	4649      	mov	r1, r9
 802e62a:	4638      	mov	r0, r7
 802e62c:	47c0      	blx	r8
 802e62e:	3001      	adds	r0, #1
 802e630:	d01e      	beq.n	802e670 <_printf_common+0xa4>
 802e632:	6823      	ldr	r3, [r4, #0]
 802e634:	68e5      	ldr	r5, [r4, #12]
 802e636:	6832      	ldr	r2, [r6, #0]
 802e638:	f003 0306 	and.w	r3, r3, #6
 802e63c:	2b04      	cmp	r3, #4
 802e63e:	bf08      	it	eq
 802e640:	1aad      	subeq	r5, r5, r2
 802e642:	68a3      	ldr	r3, [r4, #8]
 802e644:	6922      	ldr	r2, [r4, #16]
 802e646:	bf0c      	ite	eq
 802e648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e64c:	2500      	movne	r5, #0
 802e64e:	4293      	cmp	r3, r2
 802e650:	bfc4      	itt	gt
 802e652:	1a9b      	subgt	r3, r3, r2
 802e654:	18ed      	addgt	r5, r5, r3
 802e656:	2600      	movs	r6, #0
 802e658:	341a      	adds	r4, #26
 802e65a:	42b5      	cmp	r5, r6
 802e65c:	d11a      	bne.n	802e694 <_printf_common+0xc8>
 802e65e:	2000      	movs	r0, #0
 802e660:	e008      	b.n	802e674 <_printf_common+0xa8>
 802e662:	2301      	movs	r3, #1
 802e664:	4652      	mov	r2, sl
 802e666:	4649      	mov	r1, r9
 802e668:	4638      	mov	r0, r7
 802e66a:	47c0      	blx	r8
 802e66c:	3001      	adds	r0, #1
 802e66e:	d103      	bne.n	802e678 <_printf_common+0xac>
 802e670:	f04f 30ff 	mov.w	r0, #4294967295
 802e674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e678:	3501      	adds	r5, #1
 802e67a:	e7c6      	b.n	802e60a <_printf_common+0x3e>
 802e67c:	18e1      	adds	r1, r4, r3
 802e67e:	1c5a      	adds	r2, r3, #1
 802e680:	2030      	movs	r0, #48	; 0x30
 802e682:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e686:	4422      	add	r2, r4
 802e688:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e68c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e690:	3302      	adds	r3, #2
 802e692:	e7c7      	b.n	802e624 <_printf_common+0x58>
 802e694:	2301      	movs	r3, #1
 802e696:	4622      	mov	r2, r4
 802e698:	4649      	mov	r1, r9
 802e69a:	4638      	mov	r0, r7
 802e69c:	47c0      	blx	r8
 802e69e:	3001      	adds	r0, #1
 802e6a0:	d0e6      	beq.n	802e670 <_printf_common+0xa4>
 802e6a2:	3601      	adds	r6, #1
 802e6a4:	e7d9      	b.n	802e65a <_printf_common+0x8e>
	...

0802e6a8 <_printf_i>:
 802e6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e6ac:	7e0f      	ldrb	r7, [r1, #24]
 802e6ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e6b0:	2f78      	cmp	r7, #120	; 0x78
 802e6b2:	4691      	mov	r9, r2
 802e6b4:	4680      	mov	r8, r0
 802e6b6:	460c      	mov	r4, r1
 802e6b8:	469a      	mov	sl, r3
 802e6ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e6be:	d807      	bhi.n	802e6d0 <_printf_i+0x28>
 802e6c0:	2f62      	cmp	r7, #98	; 0x62
 802e6c2:	d80a      	bhi.n	802e6da <_printf_i+0x32>
 802e6c4:	2f00      	cmp	r7, #0
 802e6c6:	f000 80d8 	beq.w	802e87a <_printf_i+0x1d2>
 802e6ca:	2f58      	cmp	r7, #88	; 0x58
 802e6cc:	f000 80a3 	beq.w	802e816 <_printf_i+0x16e>
 802e6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e6d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e6d8:	e03a      	b.n	802e750 <_printf_i+0xa8>
 802e6da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e6de:	2b15      	cmp	r3, #21
 802e6e0:	d8f6      	bhi.n	802e6d0 <_printf_i+0x28>
 802e6e2:	a101      	add	r1, pc, #4	; (adr r1, 802e6e8 <_printf_i+0x40>)
 802e6e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e6e8:	0802e741 	.word	0x0802e741
 802e6ec:	0802e755 	.word	0x0802e755
 802e6f0:	0802e6d1 	.word	0x0802e6d1
 802e6f4:	0802e6d1 	.word	0x0802e6d1
 802e6f8:	0802e6d1 	.word	0x0802e6d1
 802e6fc:	0802e6d1 	.word	0x0802e6d1
 802e700:	0802e755 	.word	0x0802e755
 802e704:	0802e6d1 	.word	0x0802e6d1
 802e708:	0802e6d1 	.word	0x0802e6d1
 802e70c:	0802e6d1 	.word	0x0802e6d1
 802e710:	0802e6d1 	.word	0x0802e6d1
 802e714:	0802e861 	.word	0x0802e861
 802e718:	0802e785 	.word	0x0802e785
 802e71c:	0802e843 	.word	0x0802e843
 802e720:	0802e6d1 	.word	0x0802e6d1
 802e724:	0802e6d1 	.word	0x0802e6d1
 802e728:	0802e883 	.word	0x0802e883
 802e72c:	0802e6d1 	.word	0x0802e6d1
 802e730:	0802e785 	.word	0x0802e785
 802e734:	0802e6d1 	.word	0x0802e6d1
 802e738:	0802e6d1 	.word	0x0802e6d1
 802e73c:	0802e84b 	.word	0x0802e84b
 802e740:	682b      	ldr	r3, [r5, #0]
 802e742:	1d1a      	adds	r2, r3, #4
 802e744:	681b      	ldr	r3, [r3, #0]
 802e746:	602a      	str	r2, [r5, #0]
 802e748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e74c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e750:	2301      	movs	r3, #1
 802e752:	e0a3      	b.n	802e89c <_printf_i+0x1f4>
 802e754:	6820      	ldr	r0, [r4, #0]
 802e756:	6829      	ldr	r1, [r5, #0]
 802e758:	0606      	lsls	r6, r0, #24
 802e75a:	f101 0304 	add.w	r3, r1, #4
 802e75e:	d50a      	bpl.n	802e776 <_printf_i+0xce>
 802e760:	680e      	ldr	r6, [r1, #0]
 802e762:	602b      	str	r3, [r5, #0]
 802e764:	2e00      	cmp	r6, #0
 802e766:	da03      	bge.n	802e770 <_printf_i+0xc8>
 802e768:	232d      	movs	r3, #45	; 0x2d
 802e76a:	4276      	negs	r6, r6
 802e76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e770:	485e      	ldr	r0, [pc, #376]	; (802e8ec <_printf_i+0x244>)
 802e772:	230a      	movs	r3, #10
 802e774:	e019      	b.n	802e7aa <_printf_i+0x102>
 802e776:	680e      	ldr	r6, [r1, #0]
 802e778:	602b      	str	r3, [r5, #0]
 802e77a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e77e:	bf18      	it	ne
 802e780:	b236      	sxthne	r6, r6
 802e782:	e7ef      	b.n	802e764 <_printf_i+0xbc>
 802e784:	682b      	ldr	r3, [r5, #0]
 802e786:	6820      	ldr	r0, [r4, #0]
 802e788:	1d19      	adds	r1, r3, #4
 802e78a:	6029      	str	r1, [r5, #0]
 802e78c:	0601      	lsls	r1, r0, #24
 802e78e:	d501      	bpl.n	802e794 <_printf_i+0xec>
 802e790:	681e      	ldr	r6, [r3, #0]
 802e792:	e002      	b.n	802e79a <_printf_i+0xf2>
 802e794:	0646      	lsls	r6, r0, #25
 802e796:	d5fb      	bpl.n	802e790 <_printf_i+0xe8>
 802e798:	881e      	ldrh	r6, [r3, #0]
 802e79a:	4854      	ldr	r0, [pc, #336]	; (802e8ec <_printf_i+0x244>)
 802e79c:	2f6f      	cmp	r7, #111	; 0x6f
 802e79e:	bf0c      	ite	eq
 802e7a0:	2308      	moveq	r3, #8
 802e7a2:	230a      	movne	r3, #10
 802e7a4:	2100      	movs	r1, #0
 802e7a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e7aa:	6865      	ldr	r5, [r4, #4]
 802e7ac:	60a5      	str	r5, [r4, #8]
 802e7ae:	2d00      	cmp	r5, #0
 802e7b0:	bfa2      	ittt	ge
 802e7b2:	6821      	ldrge	r1, [r4, #0]
 802e7b4:	f021 0104 	bicge.w	r1, r1, #4
 802e7b8:	6021      	strge	r1, [r4, #0]
 802e7ba:	b90e      	cbnz	r6, 802e7c0 <_printf_i+0x118>
 802e7bc:	2d00      	cmp	r5, #0
 802e7be:	d04d      	beq.n	802e85c <_printf_i+0x1b4>
 802e7c0:	4615      	mov	r5, r2
 802e7c2:	fbb6 f1f3 	udiv	r1, r6, r3
 802e7c6:	fb03 6711 	mls	r7, r3, r1, r6
 802e7ca:	5dc7      	ldrb	r7, [r0, r7]
 802e7cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e7d0:	4637      	mov	r7, r6
 802e7d2:	42bb      	cmp	r3, r7
 802e7d4:	460e      	mov	r6, r1
 802e7d6:	d9f4      	bls.n	802e7c2 <_printf_i+0x11a>
 802e7d8:	2b08      	cmp	r3, #8
 802e7da:	d10b      	bne.n	802e7f4 <_printf_i+0x14c>
 802e7dc:	6823      	ldr	r3, [r4, #0]
 802e7de:	07de      	lsls	r6, r3, #31
 802e7e0:	d508      	bpl.n	802e7f4 <_printf_i+0x14c>
 802e7e2:	6923      	ldr	r3, [r4, #16]
 802e7e4:	6861      	ldr	r1, [r4, #4]
 802e7e6:	4299      	cmp	r1, r3
 802e7e8:	bfde      	ittt	le
 802e7ea:	2330      	movle	r3, #48	; 0x30
 802e7ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e7f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e7f4:	1b52      	subs	r2, r2, r5
 802e7f6:	6122      	str	r2, [r4, #16]
 802e7f8:	f8cd a000 	str.w	sl, [sp]
 802e7fc:	464b      	mov	r3, r9
 802e7fe:	aa03      	add	r2, sp, #12
 802e800:	4621      	mov	r1, r4
 802e802:	4640      	mov	r0, r8
 802e804:	f7ff fee2 	bl	802e5cc <_printf_common>
 802e808:	3001      	adds	r0, #1
 802e80a:	d14c      	bne.n	802e8a6 <_printf_i+0x1fe>
 802e80c:	f04f 30ff 	mov.w	r0, #4294967295
 802e810:	b004      	add	sp, #16
 802e812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e816:	4835      	ldr	r0, [pc, #212]	; (802e8ec <_printf_i+0x244>)
 802e818:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802e81c:	6829      	ldr	r1, [r5, #0]
 802e81e:	6823      	ldr	r3, [r4, #0]
 802e820:	f851 6b04 	ldr.w	r6, [r1], #4
 802e824:	6029      	str	r1, [r5, #0]
 802e826:	061d      	lsls	r5, r3, #24
 802e828:	d514      	bpl.n	802e854 <_printf_i+0x1ac>
 802e82a:	07df      	lsls	r7, r3, #31
 802e82c:	bf44      	itt	mi
 802e82e:	f043 0320 	orrmi.w	r3, r3, #32
 802e832:	6023      	strmi	r3, [r4, #0]
 802e834:	b91e      	cbnz	r6, 802e83e <_printf_i+0x196>
 802e836:	6823      	ldr	r3, [r4, #0]
 802e838:	f023 0320 	bic.w	r3, r3, #32
 802e83c:	6023      	str	r3, [r4, #0]
 802e83e:	2310      	movs	r3, #16
 802e840:	e7b0      	b.n	802e7a4 <_printf_i+0xfc>
 802e842:	6823      	ldr	r3, [r4, #0]
 802e844:	f043 0320 	orr.w	r3, r3, #32
 802e848:	6023      	str	r3, [r4, #0]
 802e84a:	2378      	movs	r3, #120	; 0x78
 802e84c:	4828      	ldr	r0, [pc, #160]	; (802e8f0 <_printf_i+0x248>)
 802e84e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e852:	e7e3      	b.n	802e81c <_printf_i+0x174>
 802e854:	0659      	lsls	r1, r3, #25
 802e856:	bf48      	it	mi
 802e858:	b2b6      	uxthmi	r6, r6
 802e85a:	e7e6      	b.n	802e82a <_printf_i+0x182>
 802e85c:	4615      	mov	r5, r2
 802e85e:	e7bb      	b.n	802e7d8 <_printf_i+0x130>
 802e860:	682b      	ldr	r3, [r5, #0]
 802e862:	6826      	ldr	r6, [r4, #0]
 802e864:	6961      	ldr	r1, [r4, #20]
 802e866:	1d18      	adds	r0, r3, #4
 802e868:	6028      	str	r0, [r5, #0]
 802e86a:	0635      	lsls	r5, r6, #24
 802e86c:	681b      	ldr	r3, [r3, #0]
 802e86e:	d501      	bpl.n	802e874 <_printf_i+0x1cc>
 802e870:	6019      	str	r1, [r3, #0]
 802e872:	e002      	b.n	802e87a <_printf_i+0x1d2>
 802e874:	0670      	lsls	r0, r6, #25
 802e876:	d5fb      	bpl.n	802e870 <_printf_i+0x1c8>
 802e878:	8019      	strh	r1, [r3, #0]
 802e87a:	2300      	movs	r3, #0
 802e87c:	6123      	str	r3, [r4, #16]
 802e87e:	4615      	mov	r5, r2
 802e880:	e7ba      	b.n	802e7f8 <_printf_i+0x150>
 802e882:	682b      	ldr	r3, [r5, #0]
 802e884:	1d1a      	adds	r2, r3, #4
 802e886:	602a      	str	r2, [r5, #0]
 802e888:	681d      	ldr	r5, [r3, #0]
 802e88a:	6862      	ldr	r2, [r4, #4]
 802e88c:	2100      	movs	r1, #0
 802e88e:	4628      	mov	r0, r5
 802e890:	f7f1 fcae 	bl	80201f0 <memchr>
 802e894:	b108      	cbz	r0, 802e89a <_printf_i+0x1f2>
 802e896:	1b40      	subs	r0, r0, r5
 802e898:	6060      	str	r0, [r4, #4]
 802e89a:	6863      	ldr	r3, [r4, #4]
 802e89c:	6123      	str	r3, [r4, #16]
 802e89e:	2300      	movs	r3, #0
 802e8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e8a4:	e7a8      	b.n	802e7f8 <_printf_i+0x150>
 802e8a6:	6923      	ldr	r3, [r4, #16]
 802e8a8:	462a      	mov	r2, r5
 802e8aa:	4649      	mov	r1, r9
 802e8ac:	4640      	mov	r0, r8
 802e8ae:	47d0      	blx	sl
 802e8b0:	3001      	adds	r0, #1
 802e8b2:	d0ab      	beq.n	802e80c <_printf_i+0x164>
 802e8b4:	6823      	ldr	r3, [r4, #0]
 802e8b6:	079b      	lsls	r3, r3, #30
 802e8b8:	d413      	bmi.n	802e8e2 <_printf_i+0x23a>
 802e8ba:	68e0      	ldr	r0, [r4, #12]
 802e8bc:	9b03      	ldr	r3, [sp, #12]
 802e8be:	4298      	cmp	r0, r3
 802e8c0:	bfb8      	it	lt
 802e8c2:	4618      	movlt	r0, r3
 802e8c4:	e7a4      	b.n	802e810 <_printf_i+0x168>
 802e8c6:	2301      	movs	r3, #1
 802e8c8:	4632      	mov	r2, r6
 802e8ca:	4649      	mov	r1, r9
 802e8cc:	4640      	mov	r0, r8
 802e8ce:	47d0      	blx	sl
 802e8d0:	3001      	adds	r0, #1
 802e8d2:	d09b      	beq.n	802e80c <_printf_i+0x164>
 802e8d4:	3501      	adds	r5, #1
 802e8d6:	68e3      	ldr	r3, [r4, #12]
 802e8d8:	9903      	ldr	r1, [sp, #12]
 802e8da:	1a5b      	subs	r3, r3, r1
 802e8dc:	42ab      	cmp	r3, r5
 802e8de:	dcf2      	bgt.n	802e8c6 <_printf_i+0x21e>
 802e8e0:	e7eb      	b.n	802e8ba <_printf_i+0x212>
 802e8e2:	2500      	movs	r5, #0
 802e8e4:	f104 0619 	add.w	r6, r4, #25
 802e8e8:	e7f5      	b.n	802e8d6 <_printf_i+0x22e>
 802e8ea:	bf00      	nop
 802e8ec:	08031219 	.word	0x08031219
 802e8f0:	0803122a 	.word	0x0803122a

0802e8f4 <__sread>:
 802e8f4:	b510      	push	{r4, lr}
 802e8f6:	460c      	mov	r4, r1
 802e8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e8fc:	f000 f8ec 	bl	802ead8 <_read_r>
 802e900:	2800      	cmp	r0, #0
 802e902:	bfab      	itete	ge
 802e904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e906:	89a3      	ldrhlt	r3, [r4, #12]
 802e908:	181b      	addge	r3, r3, r0
 802e90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e90e:	bfac      	ite	ge
 802e910:	6563      	strge	r3, [r4, #84]	; 0x54
 802e912:	81a3      	strhlt	r3, [r4, #12]
 802e914:	bd10      	pop	{r4, pc}

0802e916 <__swrite>:
 802e916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e91a:	461f      	mov	r7, r3
 802e91c:	898b      	ldrh	r3, [r1, #12]
 802e91e:	05db      	lsls	r3, r3, #23
 802e920:	4605      	mov	r5, r0
 802e922:	460c      	mov	r4, r1
 802e924:	4616      	mov	r6, r2
 802e926:	d505      	bpl.n	802e934 <__swrite+0x1e>
 802e928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e92c:	2302      	movs	r3, #2
 802e92e:	2200      	movs	r2, #0
 802e930:	f000 f868 	bl	802ea04 <_lseek_r>
 802e934:	89a3      	ldrh	r3, [r4, #12]
 802e936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e93e:	81a3      	strh	r3, [r4, #12]
 802e940:	4632      	mov	r2, r6
 802e942:	463b      	mov	r3, r7
 802e944:	4628      	mov	r0, r5
 802e946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e94a:	f000 b817 	b.w	802e97c <_write_r>

0802e94e <__sseek>:
 802e94e:	b510      	push	{r4, lr}
 802e950:	460c      	mov	r4, r1
 802e952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e956:	f000 f855 	bl	802ea04 <_lseek_r>
 802e95a:	1c43      	adds	r3, r0, #1
 802e95c:	89a3      	ldrh	r3, [r4, #12]
 802e95e:	bf15      	itete	ne
 802e960:	6560      	strne	r0, [r4, #84]	; 0x54
 802e962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e96a:	81a3      	strheq	r3, [r4, #12]
 802e96c:	bf18      	it	ne
 802e96e:	81a3      	strhne	r3, [r4, #12]
 802e970:	bd10      	pop	{r4, pc}

0802e972 <__sclose>:
 802e972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e976:	f000 b813 	b.w	802e9a0 <_close_r>
	...

0802e97c <_write_r>:
 802e97c:	b538      	push	{r3, r4, r5, lr}
 802e97e:	4d07      	ldr	r5, [pc, #28]	; (802e99c <_write_r+0x20>)
 802e980:	4604      	mov	r4, r0
 802e982:	4608      	mov	r0, r1
 802e984:	4611      	mov	r1, r2
 802e986:	2200      	movs	r2, #0
 802e988:	602a      	str	r2, [r5, #0]
 802e98a:	461a      	mov	r2, r3
 802e98c:	f7f3 fb91 	bl	80220b2 <_write>
 802e990:	1c43      	adds	r3, r0, #1
 802e992:	d102      	bne.n	802e99a <_write_r+0x1e>
 802e994:	682b      	ldr	r3, [r5, #0]
 802e996:	b103      	cbz	r3, 802e99a <_write_r+0x1e>
 802e998:	6023      	str	r3, [r4, #0]
 802e99a:	bd38      	pop	{r3, r4, r5, pc}
 802e99c:	200011d4 	.word	0x200011d4

0802e9a0 <_close_r>:
 802e9a0:	b538      	push	{r3, r4, r5, lr}
 802e9a2:	4d06      	ldr	r5, [pc, #24]	; (802e9bc <_close_r+0x1c>)
 802e9a4:	2300      	movs	r3, #0
 802e9a6:	4604      	mov	r4, r0
 802e9a8:	4608      	mov	r0, r1
 802e9aa:	602b      	str	r3, [r5, #0]
 802e9ac:	f7f3 fb9d 	bl	80220ea <_close>
 802e9b0:	1c43      	adds	r3, r0, #1
 802e9b2:	d102      	bne.n	802e9ba <_close_r+0x1a>
 802e9b4:	682b      	ldr	r3, [r5, #0]
 802e9b6:	b103      	cbz	r3, 802e9ba <_close_r+0x1a>
 802e9b8:	6023      	str	r3, [r4, #0]
 802e9ba:	bd38      	pop	{r3, r4, r5, pc}
 802e9bc:	200011d4 	.word	0x200011d4

0802e9c0 <_fstat_r>:
 802e9c0:	b538      	push	{r3, r4, r5, lr}
 802e9c2:	4d07      	ldr	r5, [pc, #28]	; (802e9e0 <_fstat_r+0x20>)
 802e9c4:	2300      	movs	r3, #0
 802e9c6:	4604      	mov	r4, r0
 802e9c8:	4608      	mov	r0, r1
 802e9ca:	4611      	mov	r1, r2
 802e9cc:	602b      	str	r3, [r5, #0]
 802e9ce:	f7f3 fb98 	bl	8022102 <_fstat>
 802e9d2:	1c43      	adds	r3, r0, #1
 802e9d4:	d102      	bne.n	802e9dc <_fstat_r+0x1c>
 802e9d6:	682b      	ldr	r3, [r5, #0]
 802e9d8:	b103      	cbz	r3, 802e9dc <_fstat_r+0x1c>
 802e9da:	6023      	str	r3, [r4, #0]
 802e9dc:	bd38      	pop	{r3, r4, r5, pc}
 802e9de:	bf00      	nop
 802e9e0:	200011d4 	.word	0x200011d4

0802e9e4 <_isatty_r>:
 802e9e4:	b538      	push	{r3, r4, r5, lr}
 802e9e6:	4d06      	ldr	r5, [pc, #24]	; (802ea00 <_isatty_r+0x1c>)
 802e9e8:	2300      	movs	r3, #0
 802e9ea:	4604      	mov	r4, r0
 802e9ec:	4608      	mov	r0, r1
 802e9ee:	602b      	str	r3, [r5, #0]
 802e9f0:	f7f3 fb97 	bl	8022122 <_isatty>
 802e9f4:	1c43      	adds	r3, r0, #1
 802e9f6:	d102      	bne.n	802e9fe <_isatty_r+0x1a>
 802e9f8:	682b      	ldr	r3, [r5, #0]
 802e9fa:	b103      	cbz	r3, 802e9fe <_isatty_r+0x1a>
 802e9fc:	6023      	str	r3, [r4, #0]
 802e9fe:	bd38      	pop	{r3, r4, r5, pc}
 802ea00:	200011d4 	.word	0x200011d4

0802ea04 <_lseek_r>:
 802ea04:	b538      	push	{r3, r4, r5, lr}
 802ea06:	4d07      	ldr	r5, [pc, #28]	; (802ea24 <_lseek_r+0x20>)
 802ea08:	4604      	mov	r4, r0
 802ea0a:	4608      	mov	r0, r1
 802ea0c:	4611      	mov	r1, r2
 802ea0e:	2200      	movs	r2, #0
 802ea10:	602a      	str	r2, [r5, #0]
 802ea12:	461a      	mov	r2, r3
 802ea14:	f7f3 fb90 	bl	8022138 <_lseek>
 802ea18:	1c43      	adds	r3, r0, #1
 802ea1a:	d102      	bne.n	802ea22 <_lseek_r+0x1e>
 802ea1c:	682b      	ldr	r3, [r5, #0]
 802ea1e:	b103      	cbz	r3, 802ea22 <_lseek_r+0x1e>
 802ea20:	6023      	str	r3, [r4, #0]
 802ea22:	bd38      	pop	{r3, r4, r5, pc}
 802ea24:	200011d4 	.word	0x200011d4

0802ea28 <memcpy>:
 802ea28:	440a      	add	r2, r1
 802ea2a:	4291      	cmp	r1, r2
 802ea2c:	f100 33ff 	add.w	r3, r0, #4294967295
 802ea30:	d100      	bne.n	802ea34 <memcpy+0xc>
 802ea32:	4770      	bx	lr
 802ea34:	b510      	push	{r4, lr}
 802ea36:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ea3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ea3e:	4291      	cmp	r1, r2
 802ea40:	d1f9      	bne.n	802ea36 <memcpy+0xe>
 802ea42:	bd10      	pop	{r4, pc}

0802ea44 <memmove>:
 802ea44:	4288      	cmp	r0, r1
 802ea46:	b510      	push	{r4, lr}
 802ea48:	eb01 0402 	add.w	r4, r1, r2
 802ea4c:	d902      	bls.n	802ea54 <memmove+0x10>
 802ea4e:	4284      	cmp	r4, r0
 802ea50:	4623      	mov	r3, r4
 802ea52:	d807      	bhi.n	802ea64 <memmove+0x20>
 802ea54:	1e43      	subs	r3, r0, #1
 802ea56:	42a1      	cmp	r1, r4
 802ea58:	d008      	beq.n	802ea6c <memmove+0x28>
 802ea5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ea5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ea62:	e7f8      	b.n	802ea56 <memmove+0x12>
 802ea64:	4402      	add	r2, r0
 802ea66:	4601      	mov	r1, r0
 802ea68:	428a      	cmp	r2, r1
 802ea6a:	d100      	bne.n	802ea6e <memmove+0x2a>
 802ea6c:	bd10      	pop	{r4, pc}
 802ea6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802ea72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802ea76:	e7f7      	b.n	802ea68 <memmove+0x24>

0802ea78 <_realloc_r>:
 802ea78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ea7c:	4680      	mov	r8, r0
 802ea7e:	4614      	mov	r4, r2
 802ea80:	460e      	mov	r6, r1
 802ea82:	b921      	cbnz	r1, 802ea8e <_realloc_r+0x16>
 802ea84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ea88:	4611      	mov	r1, r2
 802ea8a:	f7fe becb 	b.w	802d824 <_malloc_r>
 802ea8e:	b92a      	cbnz	r2, 802ea9c <_realloc_r+0x24>
 802ea90:	f7fe fe5c 	bl	802d74c <_free_r>
 802ea94:	4625      	mov	r5, r4
 802ea96:	4628      	mov	r0, r5
 802ea98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ea9c:	f000 f82e 	bl	802eafc <_malloc_usable_size_r>
 802eaa0:	4284      	cmp	r4, r0
 802eaa2:	4607      	mov	r7, r0
 802eaa4:	d802      	bhi.n	802eaac <_realloc_r+0x34>
 802eaa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802eaaa:	d812      	bhi.n	802ead2 <_realloc_r+0x5a>
 802eaac:	4621      	mov	r1, r4
 802eaae:	4640      	mov	r0, r8
 802eab0:	f7fe feb8 	bl	802d824 <_malloc_r>
 802eab4:	4605      	mov	r5, r0
 802eab6:	2800      	cmp	r0, #0
 802eab8:	d0ed      	beq.n	802ea96 <_realloc_r+0x1e>
 802eaba:	42bc      	cmp	r4, r7
 802eabc:	4622      	mov	r2, r4
 802eabe:	4631      	mov	r1, r6
 802eac0:	bf28      	it	cs
 802eac2:	463a      	movcs	r2, r7
 802eac4:	f7ff ffb0 	bl	802ea28 <memcpy>
 802eac8:	4631      	mov	r1, r6
 802eaca:	4640      	mov	r0, r8
 802eacc:	f7fe fe3e 	bl	802d74c <_free_r>
 802ead0:	e7e1      	b.n	802ea96 <_realloc_r+0x1e>
 802ead2:	4635      	mov	r5, r6
 802ead4:	e7df      	b.n	802ea96 <_realloc_r+0x1e>
	...

0802ead8 <_read_r>:
 802ead8:	b538      	push	{r3, r4, r5, lr}
 802eada:	4d07      	ldr	r5, [pc, #28]	; (802eaf8 <_read_r+0x20>)
 802eadc:	4604      	mov	r4, r0
 802eade:	4608      	mov	r0, r1
 802eae0:	4611      	mov	r1, r2
 802eae2:	2200      	movs	r2, #0
 802eae4:	602a      	str	r2, [r5, #0]
 802eae6:	461a      	mov	r2, r3
 802eae8:	f7f3 fac6 	bl	8022078 <_read>
 802eaec:	1c43      	adds	r3, r0, #1
 802eaee:	d102      	bne.n	802eaf6 <_read_r+0x1e>
 802eaf0:	682b      	ldr	r3, [r5, #0]
 802eaf2:	b103      	cbz	r3, 802eaf6 <_read_r+0x1e>
 802eaf4:	6023      	str	r3, [r4, #0]
 802eaf6:	bd38      	pop	{r3, r4, r5, pc}
 802eaf8:	200011d4 	.word	0x200011d4

0802eafc <_malloc_usable_size_r>:
 802eafc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802eb00:	1f18      	subs	r0, r3, #4
 802eb02:	2b00      	cmp	r3, #0
 802eb04:	bfbc      	itt	lt
 802eb06:	580b      	ldrlt	r3, [r1, r0]
 802eb08:	18c0      	addlt	r0, r0, r3
 802eb0a:	4770      	bx	lr

0802eb0c <_init>:
 802eb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb0e:	bf00      	nop
 802eb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb12:	bc08      	pop	{r3}
 802eb14:	469e      	mov	lr, r3
 802eb16:	4770      	bx	lr

0802eb18 <_fini>:
 802eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb1a:	bf00      	nop
 802eb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb1e:	bc08      	pop	{r3}
 802eb20:	469e      	mov	lr, r3
 802eb22:	4770      	bx	lr
