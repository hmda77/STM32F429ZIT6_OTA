
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f300  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002614  0802f4b0  0802f4b0  0001f4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031ac4  08031ac4  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08031ac4  08031ac4  00021ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031acc  08031acc  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031acc  08031acc  00021acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031ad0  08031ad0  00021ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08031ad4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00001128  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000120c  2000120c  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ca7c  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f7f  00000000  00000000  0005cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  00062b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  00064e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c843  00000000  00000000  00066f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002deec  00000000  00000000  000937cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0d9b  00000000  00000000  000c16b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2452  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f6c  00000000  00000000  001b24a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e4 	.word	0x200000e4
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802f498 	.word	0x0802f498

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e8 	.word	0x200000e8
 80201ec:	0802f498 	.word	0x0802f498

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f003 f836 	bl	8023608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f8a4 	bl	80206e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb3e 	bl	8020c20 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f90c 	bl	80207c0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f91e 	bl	80207e8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fae8 	bl	8020b80 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f94c 	bl	802084c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f98a 	bl	80208cc <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 fa08 	bl	80209cc <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa3c 	bl	8020a38 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fab4 	bl	8020b2c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00d fa38 	bl	802da38 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa86 	bl	8020ad8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4939      	ldr	r1, [pc, #228]	; (80206b4 <main+0x120>)
 80205d0:	4839      	ldr	r0, [pc, #228]	; (80206b8 <main+0x124>)
 80205d2:	f009 f9aa 	bl	802992a <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2309      	movs	r3, #9
 80205dc:	4937      	ldr	r1, [pc, #220]	; (80206bc <main+0x128>)
 80205de:	4838      	ldr	r0, [pc, #224]	; (80206c0 <main+0x12c>)
 80205e0:	f00d fef8 	bl	802e3d4 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2209      	movs	r2, #9
 80205e8:	4619      	mov	r1, r3
 80205ea:	4836      	ldr	r0, [pc, #216]	; (80206c4 <main+0x130>)
 80205ec:	f00d fe54 	bl	802e298 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f002 f984 	bl	80228fc <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f002 fa01 	bl	8022a00 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f002 fa62 	bl	8022ac8 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 fb0c 	bl	8022c24 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 faa7 	bl	8022b64 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f002 fa65 	bl	8022ae8 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	492a      	ldr	r1, [pc, #168]	; (80206c8 <main+0x134>)
 8020620:	2000      	movs	r0, #0
 8020622:	f002 f9ed 	bl	8022a00 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f002 fa4e 	bl	8022ac8 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 fc24 	bl	8022e78 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 faf6 	bl	8022c24 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 fabe 	bl	8022bbc <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4822      	ldr	r0, [pc, #136]	; (80206cc <main+0x138>)
 8020642:	f002 faa3 	bl	8022b8c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4822      	ldr	r0, [pc, #136]	; (80206d0 <main+0x13c>)
 8020648:	f002 fad2 	bl	8022bf0 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a1c      	ldr	r2, [pc, #112]	; (80206c0 <main+0x12c>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 fb52 	bl	8022cfc <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 fa96 	bl	8022b8c <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f002 f9c2 	bl	80229e8 <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a18      	ldr	r2, [pc, #96]	; (80206d4 <main+0x140>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 fb42 	bl	8022cfc <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00d fa04 	bl	802da84 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	4815      	ldr	r0, [pc, #84]	; (80206d8 <main+0x144>)
 8020684:	f004 fcea 	bl	802505c <HAL_GPIO_WritePin>

    /* check serial communication process */
    serial_app();
 8020688:	f000 fc18 	bl	8020ebc <serial_app>

    /* check for OTA Update */
    if( HAL_GetTick() - prOTACheck > OTA_CHECK_INTERVAL)
 802068c:	f002 fff2 	bl	8023674 <HAL_GetTick>
 8020690:	4602      	mov	r2, r0
 8020692:	4b12      	ldr	r3, [pc, #72]	; (80206dc <main+0x148>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	1ad3      	subs	r3, r2, r3
 8020698:	4a11      	ldr	r2, [pc, #68]	; (80206e0 <main+0x14c>)
 802069a:	4293      	cmp	r3, r2
 802069c:	d9ec      	bls.n	8020678 <main+0xe4>
    {
    	printf("Check for Update!\r\n");
 802069e:	4811      	ldr	r0, [pc, #68]	; (80206e4 <main+0x150>)
 80206a0:	f00d fe80 	bl	802e3a4 <puts>
    	prOTACheck = HAL_GetTick();
 80206a4:	f002 ffe6 	bl	8023674 <HAL_GetTick>
 80206a8:	4603      	mov	r3, r0
 80206aa:	4a0c      	ldr	r2, [pc, #48]	; (80206dc <main+0x148>)
 80206ac:	6013      	str	r3, [r2, #0]
    	ota_check();
 80206ae:	f000 fc95 	bl	8020fdc <ota_check>
    MX_USB_HOST_Process();
 80206b2:	e7e1      	b.n	8020678 <main+0xe4>
 80206b4:	20000404 	.word	0x20000404
 80206b8:	200002e4 	.word	0x200002e4
 80206bc:	0802f4b0 	.word	0x0802f4b0
 80206c0:	200003a0 	.word	0x200003a0
 80206c4:	0802f4d0 	.word	0x0802f4d0
 80206c8:	d0130000 	.word	0xd0130000
 80206cc:	ffff0000 	.word	0xffff0000
 80206d0:	2000004c 	.word	0x2000004c
 80206d4:	0802f4f0 	.word	0x0802f4f0
 80206d8:	40021800 	.word	0x40021800
 80206dc:	2000041c 	.word	0x2000041c
 80206e0:	0001d4c0 	.word	0x0001d4c0
 80206e4:	0802f4fc 	.word	0x0802f4fc

080206e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206e8:	b580      	push	{r7, lr}
 80206ea:	b094      	sub	sp, #80	; 0x50
 80206ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206ee:	f107 0320 	add.w	r3, r7, #32
 80206f2:	2230      	movs	r2, #48	; 0x30
 80206f4:	2100      	movs	r1, #0
 80206f6:	4618      	mov	r0, r3
 80206f8:	f00d fce6 	bl	802e0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206fc:	f107 030c 	add.w	r3, r7, #12
 8020700:	2200      	movs	r2, #0
 8020702:	601a      	str	r2, [r3, #0]
 8020704:	605a      	str	r2, [r3, #4]
 8020706:	609a      	str	r2, [r3, #8]
 8020708:	60da      	str	r2, [r3, #12]
 802070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802070c:	2300      	movs	r3, #0
 802070e:	60bb      	str	r3, [r7, #8]
 8020710:	4b29      	ldr	r3, [pc, #164]	; (80207b8 <SystemClock_Config+0xd0>)
 8020712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020714:	4a28      	ldr	r2, [pc, #160]	; (80207b8 <SystemClock_Config+0xd0>)
 8020716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802071a:	6413      	str	r3, [r2, #64]	; 0x40
 802071c:	4b26      	ldr	r3, [pc, #152]	; (80207b8 <SystemClock_Config+0xd0>)
 802071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020724:	60bb      	str	r3, [r7, #8]
 8020726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8020728:	2300      	movs	r3, #0
 802072a:	607b      	str	r3, [r7, #4]
 802072c:	4b23      	ldr	r3, [pc, #140]	; (80207bc <SystemClock_Config+0xd4>)
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020734:	4a21      	ldr	r2, [pc, #132]	; (80207bc <SystemClock_Config+0xd4>)
 8020736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802073a:	6013      	str	r3, [r2, #0]
 802073c:	4b1f      	ldr	r3, [pc, #124]	; (80207bc <SystemClock_Config+0xd4>)
 802073e:	681b      	ldr	r3, [r3, #0]
 8020740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020744:	607b      	str	r3, [r7, #4]
 8020746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020748:	2301      	movs	r3, #1
 802074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020752:	2302      	movs	r3, #2
 8020754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802075c:	2310      	movs	r3, #16
 802075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020760:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020766:	2302      	movs	r3, #2
 8020768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802076a:	2303      	movs	r3, #3
 802076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802076e:	f107 0320 	add.w	r3, r7, #32
 8020772:	4618      	mov	r0, r3
 8020774:	f006 fe7e 	bl	8027474 <HAL_RCC_OscConfig>
 8020778:	4603      	mov	r3, r0
 802077a:	2b00      	cmp	r3, #0
 802077c:	d001      	beq.n	8020782 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802077e:	f000 fb97 	bl	8020eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020782:	230f      	movs	r3, #15
 8020784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020786:	2302      	movs	r3, #2
 8020788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802078a:	2300      	movs	r3, #0
 802078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802079a:	f107 030c 	add.w	r3, r7, #12
 802079e:	2102      	movs	r1, #2
 80207a0:	4618      	mov	r0, r3
 80207a2:	f007 f8df 	bl	8027964 <HAL_RCC_ClockConfig>
 80207a6:	4603      	mov	r3, r0
 80207a8:	2b00      	cmp	r3, #0
 80207aa:	d001      	beq.n	80207b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80207ac:	f000 fb80 	bl	8020eb0 <Error_Handler>
  }
}
 80207b0:	bf00      	nop
 80207b2:	3750      	adds	r7, #80	; 0x50
 80207b4:	46bd      	mov	sp, r7
 80207b6:	bd80      	pop	{r7, pc}
 80207b8:	40023800 	.word	0x40023800
 80207bc:	40007000 	.word	0x40007000

080207c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80207c0:	b580      	push	{r7, lr}
 80207c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80207c4:	4b06      	ldr	r3, [pc, #24]	; (80207e0 <MX_CRC_Init+0x20>)
 80207c6:	4a07      	ldr	r2, [pc, #28]	; (80207e4 <MX_CRC_Init+0x24>)
 80207c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80207ca:	4805      	ldr	r0, [pc, #20]	; (80207e0 <MX_CRC_Init+0x20>)
 80207cc:	f003 f87f 	bl	80238ce <HAL_CRC_Init>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207d6:	f000 fb6b 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207da:	bf00      	nop
 80207dc:	bd80      	pop	{r7, pc}
 80207de:	bf00      	nop
 80207e0:	20000100 	.word	0x20000100
 80207e4:	40023000 	.word	0x40023000

080207e8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207e8:	b580      	push	{r7, lr}
 80207ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207ec:	4b15      	ldr	r3, [pc, #84]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207ee:	4a16      	ldr	r2, [pc, #88]	; (8020848 <MX_DMA2D_Init+0x60>)
 80207f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207f2:	4b14      	ldr	r3, [pc, #80]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207f4:	2200      	movs	r2, #0
 80207f6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207f8:	4b12      	ldr	r3, [pc, #72]	; (8020844 <MX_DMA2D_Init+0x5c>)
 80207fa:	2200      	movs	r2, #0
 80207fc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207fe:	4b11      	ldr	r3, [pc, #68]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020800:	2200      	movs	r2, #0
 8020802:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8020804:	4b0f      	ldr	r3, [pc, #60]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020806:	2200      	movs	r2, #0
 8020808:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 802080a:	4b0e      	ldr	r3, [pc, #56]	; (8020844 <MX_DMA2D_Init+0x5c>)
 802080c:	2200      	movs	r2, #0
 802080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020810:	4b0c      	ldr	r3, [pc, #48]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020812:	2200      	movs	r2, #0
 8020814:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8020816:	4b0b      	ldr	r3, [pc, #44]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020818:	2200      	movs	r2, #0
 802081a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 802081c:	4809      	ldr	r0, [pc, #36]	; (8020844 <MX_DMA2D_Init+0x5c>)
 802081e:	f003 fac3 	bl	8023da8 <HAL_DMA2D_Init>
 8020822:	4603      	mov	r3, r0
 8020824:	2b00      	cmp	r3, #0
 8020826:	d001      	beq.n	802082c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8020828:	f000 fb42 	bl	8020eb0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 802082c:	2101      	movs	r1, #1
 802082e:	4805      	ldr	r0, [pc, #20]	; (8020844 <MX_DMA2D_Init+0x5c>)
 8020830:	f003 fd28 	bl	8024284 <HAL_DMA2D_ConfigLayer>
 8020834:	4603      	mov	r3, r0
 8020836:	2b00      	cmp	r3, #0
 8020838:	d001      	beq.n	802083e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802083a:	f000 fb39 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802083e:	bf00      	nop
 8020840:	bd80      	pop	{r7, pc}
 8020842:	bf00      	nop
 8020844:	20000108 	.word	0x20000108
 8020848:	4002b000 	.word	0x4002b000

0802084c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802084c:	b580      	push	{r7, lr}
 802084e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020850:	4b1b      	ldr	r3, [pc, #108]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020852:	4a1c      	ldr	r2, [pc, #112]	; (80208c4 <MX_I2C3_Init+0x78>)
 8020854:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020856:	4b1a      	ldr	r3, [pc, #104]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020858:	4a1b      	ldr	r2, [pc, #108]	; (80208c8 <MX_I2C3_Init+0x7c>)
 802085a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802085c:	4b18      	ldr	r3, [pc, #96]	; (80208c0 <MX_I2C3_Init+0x74>)
 802085e:	2200      	movs	r2, #0
 8020860:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020862:	4b17      	ldr	r3, [pc, #92]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020864:	2200      	movs	r2, #0
 8020866:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020868:	4b15      	ldr	r3, [pc, #84]	; (80208c0 <MX_I2C3_Init+0x74>)
 802086a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802086e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020870:	4b13      	ldr	r3, [pc, #76]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020872:	2200      	movs	r2, #0
 8020874:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020876:	4b12      	ldr	r3, [pc, #72]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020878:	2200      	movs	r2, #0
 802087a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802087c:	4b10      	ldr	r3, [pc, #64]	; (80208c0 <MX_I2C3_Init+0x74>)
 802087e:	2200      	movs	r2, #0
 8020880:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020882:	4b0f      	ldr	r3, [pc, #60]	; (80208c0 <MX_I2C3_Init+0x74>)
 8020884:	2200      	movs	r2, #0
 8020886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020888:	480d      	ldr	r0, [pc, #52]	; (80208c0 <MX_I2C3_Init+0x74>)
 802088a:	f006 f823 	bl	80268d4 <HAL_I2C_Init>
 802088e:	4603      	mov	r3, r0
 8020890:	2b00      	cmp	r3, #0
 8020892:	d001      	beq.n	8020898 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020894:	f000 fb0c 	bl	8020eb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020898:	2100      	movs	r1, #0
 802089a:	4809      	ldr	r0, [pc, #36]	; (80208c0 <MX_I2C3_Init+0x74>)
 802089c:	f006 f95e 	bl	8026b5c <HAL_I2CEx_ConfigAnalogFilter>
 80208a0:	4603      	mov	r3, r0
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	d001      	beq.n	80208aa <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80208a6:	f000 fb03 	bl	8020eb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80208aa:	2100      	movs	r1, #0
 80208ac:	4804      	ldr	r0, [pc, #16]	; (80208c0 <MX_I2C3_Init+0x74>)
 80208ae:	f006 f991 	bl	8026bd4 <HAL_I2CEx_ConfigDigitalFilter>
 80208b2:	4603      	mov	r3, r0
 80208b4:	2b00      	cmp	r3, #0
 80208b6:	d001      	beq.n	80208bc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80208b8:	f000 fafa 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80208bc:	bf00      	nop
 80208be:	bd80      	pop	{r7, pc}
 80208c0:	20000148 	.word	0x20000148
 80208c4:	40005c00 	.word	0x40005c00
 80208c8:	000186a0 	.word	0x000186a0

080208cc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80208cc:	b580      	push	{r7, lr}
 80208ce:	b08e      	sub	sp, #56	; 0x38
 80208d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208d2:	1d3b      	adds	r3, r7, #4
 80208d4:	2234      	movs	r2, #52	; 0x34
 80208d6:	2100      	movs	r1, #0
 80208d8:	4618      	mov	r0, r3
 80208da:	f00d fbf5 	bl	802e0c8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208de:	4b39      	ldr	r3, [pc, #228]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208e0:	4a39      	ldr	r2, [pc, #228]	; (80209c8 <MX_LTDC_Init+0xfc>)
 80208e2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208e4:	4b37      	ldr	r3, [pc, #220]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208e6:	2200      	movs	r2, #0
 80208e8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ea:	4b36      	ldr	r3, [pc, #216]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208ec:	2200      	movs	r2, #0
 80208ee:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208f0:	4b34      	ldr	r3, [pc, #208]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208f2:	2200      	movs	r2, #0
 80208f4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208f6:	4b33      	ldr	r3, [pc, #204]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208f8:	2200      	movs	r2, #0
 80208fa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208fc:	4b31      	ldr	r3, [pc, #196]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80208fe:	2209      	movs	r2, #9
 8020900:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8020902:	4b30      	ldr	r3, [pc, #192]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020904:	2201      	movs	r2, #1
 8020906:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8020908:	4b2e      	ldr	r3, [pc, #184]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802090a:	221d      	movs	r2, #29
 802090c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 802090e:	4b2d      	ldr	r3, [pc, #180]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020910:	2203      	movs	r2, #3
 8020912:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8020914:	4b2b      	ldr	r3, [pc, #172]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020916:	f240 120d 	movw	r2, #269	; 0x10d
 802091a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 802091c:	4b29      	ldr	r3, [pc, #164]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802091e:	f240 1243 	movw	r2, #323	; 0x143
 8020922:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8020924:	4b27      	ldr	r3, [pc, #156]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020926:	f240 1217 	movw	r2, #279	; 0x117
 802092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 802092c:	4b25      	ldr	r3, [pc, #148]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802092e:	f240 1247 	movw	r2, #327	; 0x147
 8020932:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020934:	4b23      	ldr	r3, [pc, #140]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020936:	2200      	movs	r2, #0
 8020938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802093c:	4b21      	ldr	r3, [pc, #132]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802093e:	2200      	movs	r2, #0
 8020940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020944:	4b1f      	ldr	r3, [pc, #124]	; (80209c4 <MX_LTDC_Init+0xf8>)
 8020946:	2200      	movs	r2, #0
 8020948:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802094c:	481d      	ldr	r0, [pc, #116]	; (80209c4 <MX_LTDC_Init+0xf8>)
 802094e:	f006 f981 	bl	8026c54 <HAL_LTDC_Init>
 8020952:	4603      	mov	r3, r0
 8020954:	2b00      	cmp	r3, #0
 8020956:	d001      	beq.n	802095c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020958:	f000 faaa 	bl	8020eb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802095c:	2300      	movs	r3, #0
 802095e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020960:	23f0      	movs	r3, #240	; 0xf0
 8020962:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020968:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802096c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802096e:	2302      	movs	r3, #2
 8020970:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020972:	23ff      	movs	r3, #255	; 0xff
 8020974:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020976:	2300      	movs	r3, #0
 8020978:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802097a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802097e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020980:	2307      	movs	r3, #7
 8020982:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020984:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020988:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802098a:	23f0      	movs	r3, #240	; 0xf0
 802098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802098e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020992:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020994:	2300      	movs	r3, #0
 8020996:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802099a:	2300      	movs	r3, #0
 802099c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80209a0:	2300      	movs	r3, #0
 80209a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80209a6:	1d3b      	adds	r3, r7, #4
 80209a8:	2200      	movs	r2, #0
 80209aa:	4619      	mov	r1, r3
 80209ac:	4805      	ldr	r0, [pc, #20]	; (80209c4 <MX_LTDC_Init+0xf8>)
 80209ae:	f006 fae3 	bl	8026f78 <HAL_LTDC_ConfigLayer>
 80209b2:	4603      	mov	r3, r0
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d001      	beq.n	80209bc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80209b8:	f000 fa7a 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80209bc:	bf00      	nop
 80209be:	3738      	adds	r7, #56	; 0x38
 80209c0:	46bd      	mov	sp, r7
 80209c2:	bd80      	pop	{r7, pc}
 80209c4:	2000019c 	.word	0x2000019c
 80209c8:	40016800 	.word	0x40016800

080209cc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80209cc:	b580      	push	{r7, lr}
 80209ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209d0:	4b17      	ldr	r3, [pc, #92]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209d2:	4a18      	ldr	r2, [pc, #96]	; (8020a34 <MX_SPI5_Init+0x68>)
 80209d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209d6:	4b16      	ldr	r3, [pc, #88]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209de:	4b14      	ldr	r3, [pc, #80]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209e0:	2200      	movs	r2, #0
 80209e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209e4:	4b12      	ldr	r3, [pc, #72]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209e6:	2200      	movs	r2, #0
 80209e8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ea:	4b11      	ldr	r3, [pc, #68]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209ec:	2200      	movs	r2, #0
 80209ee:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209f0:	4b0f      	ldr	r3, [pc, #60]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209f2:	2200      	movs	r2, #0
 80209f4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209f6:	4b0e      	ldr	r3, [pc, #56]	; (8020a30 <MX_SPI5_Init+0x64>)
 80209f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209fc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209fe:	4b0c      	ldr	r3, [pc, #48]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a00:	2218      	movs	r2, #24
 8020a02:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020a04:	4b0a      	ldr	r3, [pc, #40]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a06:	2200      	movs	r2, #0
 8020a08:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a0a:	4b09      	ldr	r3, [pc, #36]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a0c:	2200      	movs	r2, #0
 8020a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a10:	4b07      	ldr	r3, [pc, #28]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a12:	2200      	movs	r2, #0
 8020a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8020a16:	4b06      	ldr	r3, [pc, #24]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a18:	220a      	movs	r2, #10
 8020a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8020a1c:	4804      	ldr	r0, [pc, #16]	; (8020a30 <MX_SPI5_Init+0x64>)
 8020a1e:	f007 fc44 	bl	80282aa <HAL_SPI_Init>
 8020a22:	4603      	mov	r3, r0
 8020a24:	2b00      	cmp	r3, #0
 8020a26:	d001      	beq.n	8020a2c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8020a28:	f000 fa42 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a2c:	bf00      	nop
 8020a2e:	bd80      	pop	{r7, pc}
 8020a30:	20000244 	.word	0x20000244
 8020a34:	40015000 	.word	0x40015000

08020a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b086      	sub	sp, #24
 8020a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a3e:	f107 0308 	add.w	r3, r7, #8
 8020a42:	2200      	movs	r2, #0
 8020a44:	601a      	str	r2, [r3, #0]
 8020a46:	605a      	str	r2, [r3, #4]
 8020a48:	609a      	str	r2, [r3, #8]
 8020a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a4c:	463b      	mov	r3, r7
 8020a4e:	2200      	movs	r2, #0
 8020a50:	601a      	str	r2, [r3, #0]
 8020a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a54:	4b1e      	ldr	r3, [pc, #120]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a56:	4a1f      	ldr	r2, [pc, #124]	; (8020ad4 <MX_TIM1_Init+0x9c>)
 8020a58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a5a:	4b1d      	ldr	r3, [pc, #116]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a60:	4b1b      	ldr	r3, [pc, #108]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a62:	2200      	movs	r2, #0
 8020a64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a66:	4b1a      	ldr	r3, [pc, #104]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a6e:	4b18      	ldr	r3, [pc, #96]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a70:	2200      	movs	r2, #0
 8020a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a74:	4b16      	ldr	r3, [pc, #88]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a76:	2200      	movs	r2, #0
 8020a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a7a:	4b15      	ldr	r3, [pc, #84]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a7c:	2200      	movs	r2, #0
 8020a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a80:	4813      	ldr	r0, [pc, #76]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a82:	f008 f9f1 	bl	8028e68 <HAL_TIM_Base_Init>
 8020a86:	4603      	mov	r3, r0
 8020a88:	2b00      	cmp	r3, #0
 8020a8a:	d001      	beq.n	8020a90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a8c:	f000 fa10 	bl	8020eb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a96:	f107 0308 	add.w	r3, r7, #8
 8020a9a:	4619      	mov	r1, r3
 8020a9c:	480c      	ldr	r0, [pc, #48]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020a9e:	f008 fbab 	bl	80291f8 <HAL_TIM_ConfigClockSource>
 8020aa2:	4603      	mov	r3, r0
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d001      	beq.n	8020aac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020aa8:	f000 fa02 	bl	8020eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020aac:	2300      	movs	r3, #0
 8020aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020ab0:	2300      	movs	r3, #0
 8020ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020ab4:	463b      	mov	r3, r7
 8020ab6:	4619      	mov	r1, r3
 8020ab8:	4805      	ldr	r0, [pc, #20]	; (8020ad0 <MX_TIM1_Init+0x98>)
 8020aba:	f008 fdc7 	bl	802964c <HAL_TIMEx_MasterConfigSynchronization>
 8020abe:	4603      	mov	r3, r0
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d001      	beq.n	8020ac8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020ac4:	f000 f9f4 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020ac8:	bf00      	nop
 8020aca:	3718      	adds	r7, #24
 8020acc:	46bd      	mov	sp, r7
 8020ace:	bd80      	pop	{r7, pc}
 8020ad0:	2000029c 	.word	0x2000029c
 8020ad4:	40010000 	.word	0x40010000

08020ad8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020ad8:	b580      	push	{r7, lr}
 8020ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020adc:	4b11      	ldr	r3, [pc, #68]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020ade:	4a12      	ldr	r2, [pc, #72]	; (8020b28 <MX_UART5_Init+0x50>)
 8020ae0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8020ae2:	4b10      	ldr	r3, [pc, #64]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020ae4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8020ae8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aea:	4b0e      	ldr	r3, [pc, #56]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020aec:	2200      	movs	r2, #0
 8020aee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020af0:	4b0c      	ldr	r3, [pc, #48]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020af2:	2200      	movs	r2, #0
 8020af4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020af6:	4b0b      	ldr	r3, [pc, #44]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020af8:	2200      	movs	r2, #0
 8020afa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020afc:	4b09      	ldr	r3, [pc, #36]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020afe:	220c      	movs	r2, #12
 8020b00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b02:	4b08      	ldr	r3, [pc, #32]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b04:	2200      	movs	r2, #0
 8020b06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b08:	4b06      	ldr	r3, [pc, #24]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020b0e:	4805      	ldr	r0, [pc, #20]	; (8020b24 <MX_UART5_Init+0x4c>)
 8020b10:	f008 fe2c 	bl	802976c <HAL_UART_Init>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d001      	beq.n	8020b1e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020b1a:	f000 f9c9 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020b1e:	bf00      	nop
 8020b20:	bd80      	pop	{r7, pc}
 8020b22:	bf00      	nop
 8020b24:	200002e4 	.word	0x200002e4
 8020b28:	40005000 	.word	0x40005000

08020b2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b30:	4b11      	ldr	r3, [pc, #68]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b32:	4a12      	ldr	r2, [pc, #72]	; (8020b7c <MX_USART1_UART_Init+0x50>)
 8020b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b36:	4b10      	ldr	r3, [pc, #64]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b3e:	4b0e      	ldr	r3, [pc, #56]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b40:	2200      	movs	r2, #0
 8020b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b44:	4b0c      	ldr	r3, [pc, #48]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b46:	2200      	movs	r2, #0
 8020b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b4a:	4b0b      	ldr	r3, [pc, #44]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b4c:	2200      	movs	r2, #0
 8020b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b50:	4b09      	ldr	r3, [pc, #36]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b52:	220c      	movs	r2, #12
 8020b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b56:	4b08      	ldr	r3, [pc, #32]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b58:	2200      	movs	r2, #0
 8020b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b5c:	4b06      	ldr	r3, [pc, #24]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b5e:	2200      	movs	r2, #0
 8020b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b62:	4805      	ldr	r0, [pc, #20]	; (8020b78 <MX_USART1_UART_Init+0x4c>)
 8020b64:	f008 fe02 	bl	802976c <HAL_UART_Init>
 8020b68:	4603      	mov	r3, r0
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d001      	beq.n	8020b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b6e:	f000 f99f 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b72:	bf00      	nop
 8020b74:	bd80      	pop	{r7, pc}
 8020b76:	bf00      	nop
 8020b78:	20000328 	.word	0x20000328
 8020b7c:	40011000 	.word	0x40011000

08020b80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b80:	b580      	push	{r7, lr}
 8020b82:	b088      	sub	sp, #32
 8020b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b86:	1d3b      	adds	r3, r7, #4
 8020b88:	2200      	movs	r2, #0
 8020b8a:	601a      	str	r2, [r3, #0]
 8020b8c:	605a      	str	r2, [r3, #4]
 8020b8e:	609a      	str	r2, [r3, #8]
 8020b90:	60da      	str	r2, [r3, #12]
 8020b92:	611a      	str	r2, [r3, #16]
 8020b94:	615a      	str	r2, [r3, #20]
 8020b96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b98:	4b1f      	ldr	r3, [pc, #124]	; (8020c18 <MX_FMC_Init+0x98>)
 8020b9a:	4a20      	ldr	r2, [pc, #128]	; (8020c1c <MX_FMC_Init+0x9c>)
 8020b9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b9e:	4b1e      	ldr	r3, [pc, #120]	; (8020c18 <MX_FMC_Init+0x98>)
 8020ba0:	2201      	movs	r2, #1
 8020ba2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020ba4:	4b1c      	ldr	r3, [pc, #112]	; (8020c18 <MX_FMC_Init+0x98>)
 8020ba6:	2200      	movs	r2, #0
 8020ba8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020baa:	4b1b      	ldr	r3, [pc, #108]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bac:	2204      	movs	r2, #4
 8020bae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020bb0:	4b19      	ldr	r3, [pc, #100]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bb2:	2210      	movs	r2, #16
 8020bb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020bb6:	4b18      	ldr	r3, [pc, #96]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bb8:	2240      	movs	r2, #64	; 0x40
 8020bba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020bbc:	4b16      	ldr	r3, [pc, #88]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bbe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020bc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020bc4:	4b14      	ldr	r3, [pc, #80]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020bca:	4b13      	ldr	r3, [pc, #76]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020bd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020bd2:	4b11      	ldr	r3, [pc, #68]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bd4:	2200      	movs	r2, #0
 8020bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020bd8:	4b0f      	ldr	r3, [pc, #60]	; (8020c18 <MX_FMC_Init+0x98>)
 8020bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bde:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020be0:	2302      	movs	r3, #2
 8020be2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020be4:	2307      	movs	r3, #7
 8020be6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020be8:	2304      	movs	r3, #4
 8020bea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bec:	2307      	movs	r3, #7
 8020bee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bf0:	2303      	movs	r3, #3
 8020bf2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bf4:	2302      	movs	r3, #2
 8020bf6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bf8:	2302      	movs	r3, #2
 8020bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bfc:	1d3b      	adds	r3, r7, #4
 8020bfe:	4619      	mov	r1, r3
 8020c00:	4805      	ldr	r0, [pc, #20]	; (8020c18 <MX_FMC_Init+0x98>)
 8020c02:	f007 fac1 	bl	8028188 <HAL_SDRAM_Init>
 8020c06:	4603      	mov	r3, r0
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d001      	beq.n	8020c10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020c0c:	f000 f950 	bl	8020eb0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020c10:	bf00      	nop
 8020c12:	3720      	adds	r7, #32
 8020c14:	46bd      	mov	sp, r7
 8020c16:	bd80      	pop	{r7, pc}
 8020c18:	2000036c 	.word	0x2000036c
 8020c1c:	a0000140 	.word	0xa0000140

08020c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	b08e      	sub	sp, #56	; 0x38
 8020c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c2a:	2200      	movs	r2, #0
 8020c2c:	601a      	str	r2, [r3, #0]
 8020c2e:	605a      	str	r2, [r3, #4]
 8020c30:	609a      	str	r2, [r3, #8]
 8020c32:	60da      	str	r2, [r3, #12]
 8020c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c36:	2300      	movs	r3, #0
 8020c38:	623b      	str	r3, [r7, #32]
 8020c3a:	4b85      	ldr	r3, [pc, #532]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c3e:	4a84      	ldr	r2, [pc, #528]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c40:	f043 0304 	orr.w	r3, r3, #4
 8020c44:	6313      	str	r3, [r2, #48]	; 0x30
 8020c46:	4b82      	ldr	r3, [pc, #520]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c4a:	f003 0304 	and.w	r3, r3, #4
 8020c4e:	623b      	str	r3, [r7, #32]
 8020c50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c52:	2300      	movs	r3, #0
 8020c54:	61fb      	str	r3, [r7, #28]
 8020c56:	4b7e      	ldr	r3, [pc, #504]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c5a:	4a7d      	ldr	r2, [pc, #500]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c5c:	f043 0320 	orr.w	r3, r3, #32
 8020c60:	6313      	str	r3, [r2, #48]	; 0x30
 8020c62:	4b7b      	ldr	r3, [pc, #492]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c66:	f003 0320 	and.w	r3, r3, #32
 8020c6a:	61fb      	str	r3, [r7, #28]
 8020c6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c6e:	2300      	movs	r3, #0
 8020c70:	61bb      	str	r3, [r7, #24]
 8020c72:	4b77      	ldr	r3, [pc, #476]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c76:	4a76      	ldr	r2, [pc, #472]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c7e:	4b74      	ldr	r3, [pc, #464]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c86:	61bb      	str	r3, [r7, #24]
 8020c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	617b      	str	r3, [r7, #20]
 8020c8e:	4b70      	ldr	r3, [pc, #448]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c92:	4a6f      	ldr	r2, [pc, #444]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c94:	f043 0301 	orr.w	r3, r3, #1
 8020c98:	6313      	str	r3, [r2, #48]	; 0x30
 8020c9a:	4b6d      	ldr	r3, [pc, #436]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9e:	f003 0301 	and.w	r3, r3, #1
 8020ca2:	617b      	str	r3, [r7, #20]
 8020ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	613b      	str	r3, [r7, #16]
 8020caa:	4b69      	ldr	r3, [pc, #420]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cae:	4a68      	ldr	r2, [pc, #416]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cb0:	f043 0302 	orr.w	r3, r3, #2
 8020cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8020cb6:	4b66      	ldr	r3, [pc, #408]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cba:	f003 0302 	and.w	r3, r3, #2
 8020cbe:	613b      	str	r3, [r7, #16]
 8020cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	60fb      	str	r3, [r7, #12]
 8020cc6:	4b62      	ldr	r3, [pc, #392]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cca:	4a61      	ldr	r2, [pc, #388]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8020cd2:	4b5f      	ldr	r3, [pc, #380]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cda:	60fb      	str	r3, [r7, #12]
 8020cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cde:	2300      	movs	r3, #0
 8020ce0:	60bb      	str	r3, [r7, #8]
 8020ce2:	4b5b      	ldr	r3, [pc, #364]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ce6:	4a5a      	ldr	r2, [pc, #360]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020ce8:	f043 0310 	orr.w	r3, r3, #16
 8020cec:	6313      	str	r3, [r2, #48]	; 0x30
 8020cee:	4b58      	ldr	r3, [pc, #352]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cf2:	f003 0310 	and.w	r3, r3, #16
 8020cf6:	60bb      	str	r3, [r7, #8]
 8020cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cfa:	2300      	movs	r3, #0
 8020cfc:	607b      	str	r3, [r7, #4]
 8020cfe:	4b54      	ldr	r3, [pc, #336]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d02:	4a53      	ldr	r2, [pc, #332]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d04:	f043 0308 	orr.w	r3, r3, #8
 8020d08:	6313      	str	r3, [r2, #48]	; 0x30
 8020d0a:	4b51      	ldr	r3, [pc, #324]	; (8020e50 <MX_GPIO_Init+0x230>)
 8020d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d0e:	f003 0308 	and.w	r3, r3, #8
 8020d12:	607b      	str	r3, [r7, #4]
 8020d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020d16:	2200      	movs	r2, #0
 8020d18:	2116      	movs	r1, #22
 8020d1a:	484e      	ldr	r0, [pc, #312]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020d1c:	f004 f99e 	bl	802505c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020d20:	2200      	movs	r2, #0
 8020d22:	2180      	movs	r1, #128	; 0x80
 8020d24:	484c      	ldr	r0, [pc, #304]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d26:	f004 f999 	bl	802505c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020d2a:	2200      	movs	r2, #0
 8020d2c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d30:	484a      	ldr	r0, [pc, #296]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020d32:	f004 f993 	bl	802505c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d36:	2200      	movs	r2, #0
 8020d38:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d3c:	4848      	ldr	r0, [pc, #288]	; (8020e60 <MX_GPIO_Init+0x240>)
 8020d3e:	f004 f98d 	bl	802505c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d42:	2316      	movs	r3, #22
 8020d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d46:	2301      	movs	r3, #1
 8020d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d4e:	2300      	movs	r3, #0
 8020d50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d56:	4619      	mov	r1, r3
 8020d58:	483e      	ldr	r0, [pc, #248]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020d5a:	f003 fec7 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d5e:	2301      	movs	r3, #1
 8020d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d68:	2300      	movs	r3, #0
 8020d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d70:	4619      	mov	r1, r3
 8020d72:	4839      	ldr	r0, [pc, #228]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d74:	f003 feba 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d78:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d7e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d84:	2300      	movs	r3, #0
 8020d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d8c:	4619      	mov	r1, r3
 8020d8e:	4832      	ldr	r0, [pc, #200]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020d90:	f003 feac 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d94:	2380      	movs	r3, #128	; 0x80
 8020d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d98:	2301      	movs	r3, #1
 8020d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020da0:	2300      	movs	r3, #0
 8020da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da8:	4619      	mov	r1, r3
 8020daa:	482b      	ldr	r0, [pc, #172]	; (8020e58 <MX_GPIO_Init+0x238>)
 8020dac:	f003 fe9e 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020db0:	2320      	movs	r3, #32
 8020db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020db4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc2:	4619      	mov	r1, r3
 8020dc4:	4823      	ldr	r0, [pc, #140]	; (8020e54 <MX_GPIO_Init+0x234>)
 8020dc6:	f003 fe91 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020dca:	2304      	movs	r3, #4
 8020dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dce:	2300      	movs	r3, #0
 8020dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd2:	2300      	movs	r3, #0
 8020dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dda:	4619      	mov	r1, r3
 8020ddc:	4821      	ldr	r0, [pc, #132]	; (8020e64 <MX_GPIO_Init+0x244>)
 8020dde:	f003 fe85 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020de8:	2300      	movs	r3, #0
 8020dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dec:	2300      	movs	r3, #0
 8020dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020df4:	4619      	mov	r1, r3
 8020df6:	4819      	ldr	r0, [pc, #100]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020df8:	f003 fe78 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dfc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e02:	2301      	movs	r3, #1
 8020e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e06:	2300      	movs	r3, #0
 8020e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e0a:	2300      	movs	r3, #0
 8020e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e12:	4619      	mov	r1, r3
 8020e14:	4811      	ldr	r0, [pc, #68]	; (8020e5c <MX_GPIO_Init+0x23c>)
 8020e16:	f003 fe69 	bl	8024aec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020e1a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e20:	2301      	movs	r3, #1
 8020e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e24:	2300      	movs	r3, #0
 8020e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e28:	2300      	movs	r3, #0
 8020e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e30:	4619      	mov	r1, r3
 8020e32:	480b      	ldr	r0, [pc, #44]	; (8020e60 <MX_GPIO_Init+0x240>)
 8020e34:	f003 fe5a 	bl	8024aec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e38:	2200      	movs	r2, #0
 8020e3a:	2100      	movs	r1, #0
 8020e3c:	2006      	movs	r0, #6
 8020e3e:	f002 fd18 	bl	8023872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e42:	2006      	movs	r0, #6
 8020e44:	f002 fd31 	bl	80238aa <HAL_NVIC_EnableIRQ>

}
 8020e48:	bf00      	nop
 8020e4a:	3738      	adds	r7, #56	; 0x38
 8020e4c:	46bd      	mov	sp, r7
 8020e4e:	bd80      	pop	{r7, pc}
 8020e50:	40023800 	.word	0x40023800
 8020e54:	40020800 	.word	0x40020800
 8020e58:	40020000 	.word	0x40020000
 8020e5c:	40020c00 	.word	0x40020c00
 8020e60:	40021800 	.word	0x40021800
 8020e64:	40020400 	.word	0x40020400

08020e68 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e68:	b580      	push	{r7, lr}
 8020e6a:	b082      	sub	sp, #8
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e70:	1d39      	adds	r1, r7, #4
 8020e72:	f04f 33ff 	mov.w	r3, #4294967295
 8020e76:	2201      	movs	r2, #1
 8020e78:	4803      	ldr	r0, [pc, #12]	; (8020e88 <__io_putchar+0x20>)
 8020e7a:	f008 fcc4 	bl	8029806 <HAL_UART_Transmit>
	return ch;
 8020e7e:	687b      	ldr	r3, [r7, #4]
}
 8020e80:	4618      	mov	r0, r3
 8020e82:	3708      	adds	r7, #8
 8020e84:	46bd      	mov	sp, r7
 8020e86:	bd80      	pop	{r7, pc}
 8020e88:	20000328 	.word	0x20000328

08020e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
 8020e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	681b      	ldr	r3, [r3, #0]
 8020e98:	4a04      	ldr	r2, [pc, #16]	; (8020eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e9a:	4293      	cmp	r3, r2
 8020e9c:	d101      	bne.n	8020ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e9e:	f002 fbd5 	bl	802364c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020ea2:	bf00      	nop
 8020ea4:	3708      	adds	r7, #8
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bd80      	pop	{r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	40001000 	.word	0x40001000

08020eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020eb4:	b672      	cpsid	i
}
 8020eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020eb8:	e7fe      	b.n	8020eb8 <Error_Handler+0x8>
	...

08020ebc <serial_app>:
void go_to_DFU();
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020ebc:	b580      	push	{r7, lr}
 8020ebe:	b082      	sub	sp, #8
 8020ec0:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020ec2:	4b3c      	ldr	r3, [pc, #240]	; (8020fb4 <serial_app+0xf8>)
 8020ec4:	785b      	ldrb	r3, [r3, #1]
 8020ec6:	2b00      	cmp	r3, #0
 8020ec8:	d070      	beq.n	8020fac <serial_app+0xf0>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020eca:	4b3a      	ldr	r3, [pc, #232]	; (8020fb4 <serial_app+0xf8>)
 8020ecc:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020ece:	2b02      	cmp	r3, #2
 8020ed0:	d06c      	beq.n	8020fac <serial_app+0xf0>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020ed2:	2300      	movs	r3, #0
 8020ed4:	71fb      	strb	r3, [r7, #7]

		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ed6:	4b37      	ldr	r3, [pc, #220]	; (8020fb4 <serial_app+0xf8>)
 8020ed8:	785b      	ldrb	r3, [r3, #1]
 8020eda:	2b03      	cmp	r3, #3
 8020edc:	d105      	bne.n	8020eea <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020ede:	4836      	ldr	r0, [pc, #216]	; (8020fb8 <serial_app+0xfc>)
 8020ee0:	f00d fa60 	bl	802e3a4 <puts>
			ret = SER_EX_ERROR;
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	71fb      	strb	r3, [r7, #7]
 8020ee8:	e007      	b.n	8020efa <serial_app+0x3e>
		}
		else
		{
//			printf("Chunk Received!!!\r\n");
			ret = ser_proccess_data(Rx_Buffer, hchunk.data_len);
 8020eea:	4b32      	ldr	r3, [pc, #200]	; (8020fb4 <serial_app+0xf8>)
 8020eec:	889b      	ldrh	r3, [r3, #4]
 8020eee:	4619      	mov	r1, r3
 8020ef0:	4832      	ldr	r0, [pc, #200]	; (8020fbc <serial_app+0x100>)
 8020ef2:	f000 f9a3 	bl	802123c <ser_proccess_data>
 8020ef6:	4603      	mov	r3, r0
 8020ef8:	71fb      	strb	r3, [r7, #7]
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020efa:	79fb      	ldrb	r3, [r7, #7]
 8020efc:	2b00      	cmp	r3, #0
 8020efe:	d00a      	beq.n	8020f16 <serial_app+0x5a>
			ser_state = SER_STATE_START;
 8020f00:	4b2f      	ldr	r3, [pc, #188]	; (8020fc0 <serial_app+0x104>)
 8020f02:	2200      	movs	r2, #0
 8020f04:	701a      	strb	r2, [r3, #0]
			printf("Sending NACK\r\n");
 8020f06:	482f      	ldr	r0, [pc, #188]	; (8020fc4 <serial_app+0x108>)
 8020f08:	f00d fa4c 	bl	802e3a4 <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020f0c:	2101      	movs	r1, #1
 8020f0e:	482e      	ldr	r0, [pc, #184]	; (8020fc8 <serial_app+0x10c>)
 8020f10:	f000 fabc 	bl	802148c <ser_send_resp>
 8020f14:	e047      	b.n	8020fa6 <serial_app+0xea>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020f16:	2100      	movs	r1, #0
 8020f18:	482b      	ldr	r0, [pc, #172]	; (8020fc8 <serial_app+0x10c>)
 8020f1a:	f000 fab7 	bl	802148c <ser_send_resp>

			/* check ota request */
			if (ser_state == SER_STATE_START){
 8020f1e:	4b28      	ldr	r3, [pc, #160]	; (8020fc0 <serial_app+0x104>)
 8020f20:	781b      	ldrb	r3, [r3, #0]
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d13f      	bne.n	8020fa6 <serial_app+0xea>
				if(data_info.data_type == OTA_INFO_DATA)
 8020f26:	4b29      	ldr	r3, [pc, #164]	; (8020fcc <serial_app+0x110>)
 8020f28:	781b      	ldrb	r3, [r3, #0]
 8020f2a:	2b02      	cmp	r3, #2
 8020f2c:	d13b      	bne.n	8020fa6 <serial_app+0xea>
				{
					ota_data.ota_valid = 1u;
 8020f2e:	4b28      	ldr	r3, [pc, #160]	; (8020fd0 <serial_app+0x114>)
 8020f30:	2201      	movs	r2, #1
 8020f32:	721a      	strb	r2, [r3, #8]
					do
					{
						// check update is needed or not
						if(ota_data.ota_major < v_major)
 8020f34:	4b26      	ldr	r3, [pc, #152]	; (8020fd0 <serial_app+0x114>)
 8020f36:	885b      	ldrh	r3, [r3, #2]
 8020f38:	b29b      	uxth	r3, r3
 8020f3a:	2200      	movs	r2, #0
 8020f3c:	4293      	cmp	r3, r2
 8020f3e:	d32f      	bcc.n	8020fa0 <serial_app+0xe4>
						{
							break;
						}

						if(v_major == ota_data.ota_major )
 8020f40:	4b23      	ldr	r3, [pc, #140]	; (8020fd0 <serial_app+0x114>)
 8020f42:	885b      	ldrh	r3, [r3, #2]
 8020f44:	b29b      	uxth	r3, r3
 8020f46:	2200      	movs	r2, #0
 8020f48:	4293      	cmp	r3, r2
 8020f4a:	d104      	bne.n	8020f56 <serial_app+0x9a>
						{
							if(ota_data.ota_minor <= v_minor)
 8020f4c:	4b20      	ldr	r3, [pc, #128]	; (8020fd0 <serial_app+0x114>)
 8020f4e:	685b      	ldr	r3, [r3, #4]
 8020f50:	2209      	movs	r2, #9
 8020f52:	4293      	cmp	r3, r2
 8020f54:	d926      	bls.n	8020fa4 <serial_app+0xe8>
								break;
							}
						}

						// go to DFU mode if firmware downloaded
						if(ota_data.ota_available & ota_data.ota_download & ota_data.ota_valid)
 8020f56:	4b1e      	ldr	r3, [pc, #120]	; (8020fd0 <serial_app+0x114>)
 8020f58:	781a      	ldrb	r2, [r3, #0]
 8020f5a:	4b1d      	ldr	r3, [pc, #116]	; (8020fd0 <serial_app+0x114>)
 8020f5c:	785b      	ldrb	r3, [r3, #1]
 8020f5e:	4013      	ands	r3, r2
 8020f60:	b2da      	uxtb	r2, r3
 8020f62:	4b1b      	ldr	r3, [pc, #108]	; (8020fd0 <serial_app+0x114>)
 8020f64:	7a1b      	ldrb	r3, [r3, #8]
 8020f66:	4013      	ands	r3, r2
 8020f68:	b2db      	uxtb	r3, r3
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	d002      	beq.n	8020f74 <serial_app+0xb8>
						{
							go_to_DFU();
 8020f6e:	f000 fab9 	bl	80214e4 <go_to_DFU>
							break;
 8020f72:	e018      	b.n	8020fa6 <serial_app+0xea>
						}

						printf("A NEW FIRMWARE FOUND!!! VERSION = [%d,%ld]\r\n", ota_data.ota_major,
 8020f74:	4b16      	ldr	r3, [pc, #88]	; (8020fd0 <serial_app+0x114>)
 8020f76:	885b      	ldrh	r3, [r3, #2]
 8020f78:	b29b      	uxth	r3, r3
 8020f7a:	4619      	mov	r1, r3
 8020f7c:	4b14      	ldr	r3, [pc, #80]	; (8020fd0 <serial_app+0x114>)
 8020f7e:	685b      	ldr	r3, [r3, #4]
 8020f80:	461a      	mov	r2, r3
 8020f82:	4814      	ldr	r0, [pc, #80]	; (8020fd4 <serial_app+0x118>)
 8020f84:	f00d f988 	bl	802e298 <iprintf>
																																		 ota_data.ota_minor);

						// request to download firmware
						if( !(ota_data.ota_download) )
 8020f88:	4b11      	ldr	r3, [pc, #68]	; (8020fd0 <serial_app+0x114>)
 8020f8a:	785b      	ldrb	r3, [r3, #1]
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	d10a      	bne.n	8020fa6 <serial_app+0xea>
						{
							printf("request for download!\r\n");
 8020f90:	4811      	ldr	r0, [pc, #68]	; (8020fd8 <serial_app+0x11c>)
 8020f92:	f00d fa07 	bl	802e3a4 <puts>
							ota_req_send(&huart5, SER_CMD_FW_DL);
 8020f96:	2106      	movs	r1, #6
 8020f98:	480b      	ldr	r0, [pc, #44]	; (8020fc8 <serial_app+0x10c>)
 8020f9a:	f000 fb57 	bl	802164c <ota_req_send>
							break;
 8020f9e:	e002      	b.n	8020fa6 <serial_app+0xea>
							break;
 8020fa0:	bf00      	nop
 8020fa2:	e000      	b.n	8020fa6 <serial_app+0xea>
								break;
 8020fa4:	bf00      	nop
				}
			}
		}


		hchunk.chunk_ready = CUN_EMPTY;
 8020fa6:	4b03      	ldr	r3, [pc, #12]	; (8020fb4 <serial_app+0xf8>)
 8020fa8:	2200      	movs	r2, #0
 8020faa:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020fac:	bf00      	nop
 8020fae:	3708      	adds	r7, #8
 8020fb0:	46bd      	mov	sp, r7
 8020fb2:	bd80      	pop	{r7, pc}
 8020fb4:	20000830 	.word	0x20000830
 8020fb8:	0802f510 	.word	0x0802f510
 8020fbc:	20000424 	.word	0x20000424
 8020fc0:	20000420 	.word	0x20000420
 8020fc4:	0802f528 	.word	0x0802f528
 8020fc8:	200002e4 	.word	0x200002e4
 8020fcc:	2000083c 	.word	0x2000083c
 8020fd0:	20000408 	.word	0x20000408
 8020fd4:	0802f538 	.word	0x0802f538
 8020fd8:	0802f568 	.word	0x0802f568

08020fdc <ota_check>:

void ota_check(){
 8020fdc:	b580      	push	{r7, lr}
 8020fde:	af00      	add	r7, sp, #0
	ota_req_send(&huart5, SER_CMD_FW_STATUS);
 8020fe0:	2104      	movs	r1, #4
 8020fe2:	4802      	ldr	r0, [pc, #8]	; (8020fec <ota_check+0x10>)
 8020fe4:	f000 fb32 	bl	802164c <ota_req_send>
}
 8020fe8:	bf00      	nop
 8020fea:	bd80      	pop	{r7, pc}
 8020fec:	200002e4 	.word	0x200002e4

08020ff0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b082      	sub	sp, #8
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	4a0f      	ldr	r2, [pc, #60]	; (8021038 <HAL_UART_RxCpltCallback+0x48>)
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d116      	bne.n	802102e <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 8021000:	4b0e      	ldr	r3, [pc, #56]	; (802103c <HAL_UART_RxCpltCallback+0x4c>)
 8021002:	785b      	ldrb	r3, [r3, #1]
 8021004:	2b00      	cmp	r3, #0
 8021006:	d003      	beq.n	8021010 <HAL_UART_RxCpltCallback+0x20>
 8021008:	4b0c      	ldr	r3, [pc, #48]	; (802103c <HAL_UART_RxCpltCallback+0x4c>)
 802100a:	785b      	ldrb	r3, [r3, #1]
 802100c:	2b02      	cmp	r3, #2
 802100e:	d104      	bne.n	802101a <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8021010:	4b0b      	ldr	r3, [pc, #44]	; (8021040 <HAL_UART_RxCpltCallback+0x50>)
 8021012:	781b      	ldrb	r3, [r3, #0]
 8021014:	4618      	mov	r0, r3
 8021016:	f000 f815 	bl	8021044 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 802101a:	2202      	movs	r2, #2
 802101c:	2100      	movs	r1, #0
 802101e:	4808      	ldr	r0, [pc, #32]	; (8021040 <HAL_UART_RxCpltCallback+0x50>)
 8021020:	f00d f852 	bl	802e0c8 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8021024:	2201      	movs	r2, #1
 8021026:	4906      	ldr	r1, [pc, #24]	; (8021040 <HAL_UART_RxCpltCallback+0x50>)
 8021028:	4803      	ldr	r0, [pc, #12]	; (8021038 <HAL_UART_RxCpltCallback+0x48>)
 802102a:	f008 fc7e 	bl	802992a <HAL_UART_Receive_IT>
	}
}
 802102e:	bf00      	nop
 8021030:	3708      	adds	r7, #8
 8021032:	46bd      	mov	sp, r7
 8021034:	bd80      	pop	{r7, pc}
 8021036:	bf00      	nop
 8021038:	200002e4 	.word	0x200002e4
 802103c:	20000830 	.word	0x20000830
 8021040:	20000404 	.word	0x20000404

08021044 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8021044:	b580      	push	{r7, lr}
 8021046:	b084      	sub	sp, #16
 8021048:	af00      	add	r7, sp, #0
 802104a:	4603      	mov	r3, r0
 802104c:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 802104e:	2300      	movs	r3, #0
 8021050:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 8021052:	4b75      	ldr	r3, [pc, #468]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021054:	781b      	ldrb	r3, [r3, #0]
 8021056:	2b05      	cmp	r3, #5
 8021058:	f200 80e1 	bhi.w	802121e <ser_receive_chunk+0x1da>
 802105c:	a201      	add	r2, pc, #4	; (adr r2, 8021064 <ser_receive_chunk+0x20>)
 802105e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021062:	bf00      	nop
 8021064:	0802107d 	.word	0x0802107d
 8021068:	080210c9 	.word	0x080210c9
 802106c:	0802110f 	.word	0x0802110f
 8021070:	0802114d 	.word	0x0802114d
 8021074:	08021177 	.word	0x08021177
 8021078:	080211b3 	.word	0x080211b3

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 802107c:	f240 4209 	movw	r2, #1033	; 0x409
 8021080:	2100      	movs	r1, #0
 8021082:	486a      	ldr	r0, [pc, #424]	; (802122c <ser_receive_chunk+0x1e8>)
 8021084:	f00d f820 	bl	802e0c8 <memset>
			hchunk.index 		 = 0u;
 8021088:	4b67      	ldr	r3, [pc, #412]	; (8021228 <ser_receive_chunk+0x1e4>)
 802108a:	2200      	movs	r2, #0
 802108c:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 802108e:	4b66      	ldr	r3, [pc, #408]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021090:	2200      	movs	r2, #0
 8021092:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 8021094:	4b64      	ldr	r3, [pc, #400]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021096:	2200      	movs	r2, #0
 8021098:	80da      	strh	r2, [r3, #6]
 802109a:	2200      	movs	r2, #0
 802109c:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 802109e:	79fb      	ldrb	r3, [r7, #7]
 80210a0:	2baa      	cmp	r3, #170	; 0xaa
 80210a2:	f040 80b5 	bne.w	8021210 <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 80210a6:	4b60      	ldr	r3, [pc, #384]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210a8:	885b      	ldrh	r3, [r3, #2]
 80210aa:	1c5a      	adds	r2, r3, #1
 80210ac:	b291      	uxth	r1, r2
 80210ae:	4a5e      	ldr	r2, [pc, #376]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210b0:	8051      	strh	r1, [r2, #2]
 80210b2:	4619      	mov	r1, r3
 80210b4:	4a5d      	ldr	r2, [pc, #372]	; (802122c <ser_receive_chunk+0x1e8>)
 80210b6:	79fb      	ldrb	r3, [r7, #7]
 80210b8:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 80210ba:	4b5b      	ldr	r3, [pc, #364]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210bc:	2201      	movs	r2, #1
 80210be:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 80210c0:	4b59      	ldr	r3, [pc, #356]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210c2:	2202      	movs	r2, #2
 80210c4:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 80210c6:	e0a3      	b.n	8021210 <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 80210c8:	79fb      	ldrb	r3, [r7, #7]
 80210ca:	2baa      	cmp	r3, #170	; 0xaa
 80210cc:	d111      	bne.n	80210f2 <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80210ce:	f240 4209 	movw	r2, #1033	; 0x409
 80210d2:	2100      	movs	r1, #0
 80210d4:	4855      	ldr	r0, [pc, #340]	; (802122c <ser_receive_chunk+0x1e8>)
 80210d6:	f00c fff7 	bl	802e0c8 <memset>
				hchunk.index 		 = 0u;
 80210da:	4b53      	ldr	r3, [pc, #332]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210dc:	2200      	movs	r2, #0
 80210de:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 80210e0:	4b51      	ldr	r3, [pc, #324]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210e2:	2200      	movs	r2, #0
 80210e4:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 80210e6:	4b50      	ldr	r3, [pc, #320]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210e8:	2200      	movs	r2, #0
 80210ea:	80da      	strh	r2, [r3, #6]
 80210ec:	2200      	movs	r2, #0
 80210ee:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 80210f0:	e095      	b.n	802121e <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 80210f2:	4b4d      	ldr	r3, [pc, #308]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210f4:	885b      	ldrh	r3, [r3, #2]
 80210f6:	1c5a      	adds	r2, r3, #1
 80210f8:	b291      	uxth	r1, r2
 80210fa:	4a4b      	ldr	r2, [pc, #300]	; (8021228 <ser_receive_chunk+0x1e4>)
 80210fc:	8051      	strh	r1, [r2, #2]
 80210fe:	4619      	mov	r1, r3
 8021100:	4a4a      	ldr	r2, [pc, #296]	; (802122c <ser_receive_chunk+0x1e8>)
 8021102:	79fb      	ldrb	r3, [r7, #7]
 8021104:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 8021106:	4b48      	ldr	r3, [pc, #288]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021108:	2202      	movs	r2, #2
 802110a:	701a      	strb	r2, [r3, #0]
		break;
 802110c:	e087      	b.n	802121e <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802110e:	4b46      	ldr	r3, [pc, #280]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021110:	885b      	ldrh	r3, [r3, #2]
 8021112:	1c5a      	adds	r2, r3, #1
 8021114:	b291      	uxth	r1, r2
 8021116:	4a44      	ldr	r2, [pc, #272]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021118:	8051      	strh	r1, [r2, #2]
 802111a:	4619      	mov	r1, r3
 802111c:	4a43      	ldr	r2, [pc, #268]	; (802122c <ser_receive_chunk+0x1e8>)
 802111e:	79fb      	ldrb	r3, [r7, #7]
 8021120:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 8021122:	4b41      	ldr	r3, [pc, #260]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021124:	885b      	ldrh	r3, [r3, #2]
 8021126:	2b03      	cmp	r3, #3
 8021128:	d974      	bls.n	8021214 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 802112a:	4b41      	ldr	r3, [pc, #260]	; (8021230 <ser_receive_chunk+0x1ec>)
 802112c:	881a      	ldrh	r2, [r3, #0]
 802112e:	4b3e      	ldr	r3, [pc, #248]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021130:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 8021132:	4b3d      	ldr	r3, [pc, #244]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021134:	889b      	ldrh	r3, [r3, #4]
 8021136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802113a:	d803      	bhi.n	8021144 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 802113c:	4b3a      	ldr	r3, [pc, #232]	; (8021228 <ser_receive_chunk+0x1e4>)
 802113e:	2203      	movs	r2, #3
 8021140:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021142:	e067      	b.n	8021214 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021144:	4b38      	ldr	r3, [pc, #224]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021146:	2200      	movs	r2, #0
 8021148:	701a      	strb	r2, [r3, #0]
		break;
 802114a:	e063      	b.n	8021214 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802114c:	4b36      	ldr	r3, [pc, #216]	; (8021228 <ser_receive_chunk+0x1e4>)
 802114e:	885b      	ldrh	r3, [r3, #2]
 8021150:	1c5a      	adds	r2, r3, #1
 8021152:	b291      	uxth	r1, r2
 8021154:	4a34      	ldr	r2, [pc, #208]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021156:	8051      	strh	r1, [r2, #2]
 8021158:	4619      	mov	r1, r3
 802115a:	4a34      	ldr	r2, [pc, #208]	; (802122c <ser_receive_chunk+0x1e8>)
 802115c:	79fb      	ldrb	r3, [r7, #7]
 802115e:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 8021160:	4b31      	ldr	r3, [pc, #196]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021162:	889b      	ldrh	r3, [r3, #4]
 8021164:	3303      	adds	r3, #3
 8021166:	4a30      	ldr	r2, [pc, #192]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021168:	8852      	ldrh	r2, [r2, #2]
 802116a:	4293      	cmp	r3, r2
 802116c:	da54      	bge.n	8021218 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 802116e:	4b2e      	ldr	r3, [pc, #184]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021170:	2204      	movs	r2, #4
 8021172:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8021174:	e050      	b.n	8021218 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 8021176:	4b2c      	ldr	r3, [pc, #176]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021178:	885b      	ldrh	r3, [r3, #2]
 802117a:	1c5a      	adds	r2, r3, #1
 802117c:	b291      	uxth	r1, r2
 802117e:	4a2a      	ldr	r2, [pc, #168]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021180:	8051      	strh	r1, [r2, #2]
 8021182:	4619      	mov	r1, r3
 8021184:	4a29      	ldr	r2, [pc, #164]	; (802122c <ser_receive_chunk+0x1e8>)
 8021186:	79fb      	ldrb	r3, [r7, #7]
 8021188:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 802118a:	4b27      	ldr	r3, [pc, #156]	; (8021228 <ser_receive_chunk+0x1e4>)
 802118c:	889b      	ldrh	r3, [r3, #4]
 802118e:	3307      	adds	r3, #7
 8021190:	4a25      	ldr	r2, [pc, #148]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021192:	8852      	ldrh	r2, [r2, #2]
 8021194:	4293      	cmp	r3, r2
 8021196:	da41      	bge.n	802121c <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 8021198:	4b23      	ldr	r3, [pc, #140]	; (8021228 <ser_receive_chunk+0x1e4>)
 802119a:	889b      	ldrh	r3, [r3, #4]
 802119c:	3304      	adds	r3, #4
 802119e:	4a23      	ldr	r2, [pc, #140]	; (802122c <ser_receive_chunk+0x1e8>)
 80211a0:	4413      	add	r3, r2
 80211a2:	681b      	ldr	r3, [r3, #0]
 80211a4:	4a20      	ldr	r2, [pc, #128]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211a6:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 80211aa:	4b1f      	ldr	r3, [pc, #124]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211ac:	2205      	movs	r2, #5
 80211ae:	701a      	strb	r2, [r3, #0]
			}
		break;
 80211b0:	e034      	b.n	802121c <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 80211b2:	4b1d      	ldr	r3, [pc, #116]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211b4:	885b      	ldrh	r3, [r3, #2]
 80211b6:	4619      	mov	r1, r3
 80211b8:	4a1c      	ldr	r2, [pc, #112]	; (802122c <ser_receive_chunk+0x1e8>)
 80211ba:	79fb      	ldrb	r3, [r7, #7]
 80211bc:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 80211be:	4b1a      	ldr	r3, [pc, #104]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211c0:	2203      	movs	r2, #3
 80211c2:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 80211c4:	4b18      	ldr	r3, [pc, #96]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211c6:	2200      	movs	r2, #0
 80211c8:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 80211ca:	4b17      	ldr	r3, [pc, #92]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211cc:	885b      	ldrh	r3, [r3, #2]
 80211ce:	461a      	mov	r2, r3
 80211d0:	4b16      	ldr	r3, [pc, #88]	; (802122c <ser_receive_chunk+0x1e8>)
 80211d2:	5c9b      	ldrb	r3, [r3, r2]
 80211d4:	2bbb      	cmp	r3, #187	; 0xbb
 80211d6:	d119      	bne.n	802120c <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 80211d8:	4b13      	ldr	r3, [pc, #76]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211da:	889b      	ldrh	r3, [r3, #4]
 80211dc:	4619      	mov	r1, r3
 80211de:	4815      	ldr	r0, [pc, #84]	; (8021234 <ser_receive_chunk+0x1f0>)
 80211e0:	f000 fa5e 	bl	80216a0 <ser_calcCRC>
 80211e4:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 80211e6:	4b10      	ldr	r3, [pc, #64]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211e8:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80211ec:	68fa      	ldr	r2, [r7, #12]
 80211ee:	429a      	cmp	r2, r3
 80211f0:	d008      	beq.n	8021204 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80211f2:	4b0d      	ldr	r3, [pc, #52]	; (8021228 <ser_receive_chunk+0x1e4>)
 80211f4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80211f8:	461a      	mov	r2, r3
 80211fa:	68f9      	ldr	r1, [r7, #12]
 80211fc:	480e      	ldr	r0, [pc, #56]	; (8021238 <ser_receive_chunk+0x1f4>)
 80211fe:	f00d f84b 	bl	802e298 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 8021202:	e004      	b.n	802120e <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 8021204:	4b08      	ldr	r3, [pc, #32]	; (8021228 <ser_receive_chunk+0x1e4>)
 8021206:	2201      	movs	r2, #1
 8021208:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 802120a:	e008      	b.n	802121e <ser_receive_chunk+0x1da>
					break;
 802120c:	bf00      	nop
		break;
 802120e:	e006      	b.n	802121e <ser_receive_chunk+0x1da>
		break;
 8021210:	bf00      	nop
 8021212:	e004      	b.n	802121e <ser_receive_chunk+0x1da>
		break;
 8021214:	bf00      	nop
 8021216:	e002      	b.n	802121e <ser_receive_chunk+0x1da>
		break;
 8021218:	bf00      	nop
 802121a:	e000      	b.n	802121e <ser_receive_chunk+0x1da>
		break;
 802121c:	bf00      	nop
	}
}
 802121e:	bf00      	nop
 8021220:	3710      	adds	r7, #16
 8021222:	46bd      	mov	sp, r7
 8021224:	bd80      	pop	{r7, pc}
 8021226:	bf00      	nop
 8021228:	20000830 	.word	0x20000830
 802122c:	20000424 	.word	0x20000424
 8021230:	20000426 	.word	0x20000426
 8021234:	20000428 	.word	0x20000428
 8021238:	0802f580 	.word	0x0802f580

0802123c <ser_proccess_data>:


static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len)
{
 802123c:	b5b0      	push	{r4, r5, r7, lr}
 802123e:	b08a      	sub	sp, #40	; 0x28
 8021240:	af00      	add	r7, sp, #0
 8021242:	6078      	str	r0, [r7, #4]
 8021244:	460b      	mov	r3, r1
 8021246:	807b      	strh	r3, [r7, #2]
	SER_EX_ ret = SER_EX_ERROR;
 8021248:	2301      	movs	r3, #1
 802124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf==NULL) || (len == 0u) )
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	2b00      	cmp	r3, #0
 8021252:	f000 80fa 	beq.w	802144a <ser_proccess_data+0x20e>
 8021256:	887b      	ldrh	r3, [r7, #2]
 8021258:	2b00      	cmp	r3, #0
 802125a:	f000 80f6 	beq.w	802144a <ser_proccess_data+0x20e>
		{
			break;
		}

		// Check Serial Abort Command
		SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	623b      	str	r3, [r7, #32]
		if(cmd->packet_type == SER_PACKET_TYPE_CMD)
 8021262:	6a3b      	ldr	r3, [r7, #32]
 8021264:	785b      	ldrb	r3, [r3, #1]
 8021266:	2b00      	cmp	r3, #0
 8021268:	d107      	bne.n	802127a <ser_proccess_data+0x3e>
		{
			if(cmd->cmd == SER_CMD_ABORT)
 802126a:	6a3b      	ldr	r3, [r7, #32]
 802126c:	791b      	ldrb	r3, [r3, #4]
 802126e:	2b02      	cmp	r3, #2
 8021270:	d103      	bne.n	802127a <ser_proccess_data+0x3e>
			{
				// Receive Serial Abort Command. stop process;
				ser_state = SER_STATE_START;
 8021272:	4b7d      	ldr	r3, [pc, #500]	; (8021468 <ser_proccess_data+0x22c>)
 8021274:	2200      	movs	r2, #0
 8021276:	701a      	strb	r2, [r3, #0]
				break;
 8021278:	e0f0      	b.n	802145c <ser_proccess_data+0x220>
			}
		}

		switch(ser_state)
 802127a:	4b7b      	ldr	r3, [pc, #492]	; (8021468 <ser_proccess_data+0x22c>)
 802127c:	781b      	ldrb	r3, [r3, #0]
 802127e:	2b03      	cmp	r3, #3
 8021280:	f200 80df 	bhi.w	8021442 <ser_proccess_data+0x206>
 8021284:	a201      	add	r2, pc, #4	; (adr r2, 802128c <ser_proccess_data+0x50>)
 8021286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802128a:	bf00      	nop
 802128c:	0802129d 	.word	0x0802129d
 8021290:	080212ff 	.word	0x080212ff
 8021294:	08021353 	.word	0x08021353
 8021298:	080213e9 	.word	0x080213e9
		{

			case SER_STATE_START:
			{

				data_info.data_crc 	= 0u;
 802129c:	4b73      	ldr	r3, [pc, #460]	; (802146c <ser_proccess_data+0x230>)
 802129e:	2200      	movs	r2, #0
 80212a0:	715a      	strb	r2, [r3, #5]
 80212a2:	2200      	movs	r2, #0
 80212a4:	719a      	strb	r2, [r3, #6]
 80212a6:	2200      	movs	r2, #0
 80212a8:	71da      	strb	r2, [r3, #7]
 80212aa:	2200      	movs	r2, #0
 80212ac:	721a      	strb	r2, [r3, #8]
				data_info.data_size	= 0u;
 80212ae:	4b6f      	ldr	r3, [pc, #444]	; (802146c <ser_proccess_data+0x230>)
 80212b0:	2200      	movs	r2, #0
 80212b2:	705a      	strb	r2, [r3, #1]
 80212b4:	2200      	movs	r2, #0
 80212b6:	709a      	strb	r2, [r3, #2]
 80212b8:	2200      	movs	r2, #0
 80212ba:	70da      	strb	r2, [r3, #3]
 80212bc:	2200      	movs	r2, #0
 80212be:	711a      	strb	r2, [r3, #4]
				data_info.data_type	= 0u;
 80212c0:	4b6a      	ldr	r3, [pc, #424]	; (802146c <ser_proccess_data+0x230>)
 80212c2:	2200      	movs	r2, #0
 80212c4:	701a      	strb	r2, [r3, #0]
				data_received_size	= 0u;
 80212c6:	4b6a      	ldr	r3, [pc, #424]	; (8021470 <ser_proccess_data+0x234>)
 80212c8:	2200      	movs	r2, #0
 80212ca:	801a      	strh	r2, [r3, #0]
				data_calc_crc				= 0u;
 80212cc:	4b69      	ldr	r3, [pc, #420]	; (8021474 <ser_proccess_data+0x238>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	601a      	str	r2, [r3, #0]

				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	60fb      	str	r3, [r7, #12]
				if( cmd->packet_type == SER_PACKET_TYPE_CMD )
 80212d6:	68fb      	ldr	r3, [r7, #12]
 80212d8:	785b      	ldrb	r3, [r3, #1]
 80212da:	2b00      	cmp	r3, #0
 80212dc:	f040 80b7 	bne.w	802144e <ser_proccess_data+0x212>
				{
					if( cmd->cmd == SER_CMD_START )
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	791b      	ldrb	r3, [r3, #4]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	f040 80b2 	bne.w	802144e <ser_proccess_data+0x212>
					{
						printf("Received Serial Start Command \r\n");
 80212ea:	4863      	ldr	r0, [pc, #396]	; (8021478 <ser_proccess_data+0x23c>)
 80212ec:	f00d f85a 	bl	802e3a4 <puts>
						ser_state = SER_STATE_HEADER;
 80212f0:	4b5d      	ldr	r3, [pc, #372]	; (8021468 <ser_proccess_data+0x22c>)
 80212f2:	2201      	movs	r2, #1
 80212f4:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 80212f6:	2300      	movs	r3, #0
 80212f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 80212fc:	e0a7      	b.n	802144e <ser_proccess_data+0x212>


			case SER_STATE_HEADER:
			{
				SER_HEADER_ *header = (SER_HEADER_ *)buf;
 80212fe:	687b      	ldr	r3, [r7, #4]
 8021300:	613b      	str	r3, [r7, #16]

				if( header->packet_type == SER_PACKET_TYPE_HEADER )
 8021302:	693b      	ldr	r3, [r7, #16]
 8021304:	785b      	ldrb	r3, [r3, #1]
 8021306:	2b02      	cmp	r3, #2
 8021308:	f040 80a3 	bne.w	8021452 <ser_proccess_data+0x216>
				{
					data_info.data_type = header->meta_data.data_type;
 802130c:	693b      	ldr	r3, [r7, #16]
 802130e:	791a      	ldrb	r2, [r3, #4]
 8021310:	4b56      	ldr	r3, [pc, #344]	; (802146c <ser_proccess_data+0x230>)
 8021312:	701a      	strb	r2, [r3, #0]
					data_info.data_size = header->meta_data.data_size;
 8021314:	693b      	ldr	r3, [r7, #16]
 8021316:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802131a:	4a54      	ldr	r2, [pc, #336]	; (802146c <ser_proccess_data+0x230>)
 802131c:	f8c2 3001 	str.w	r3, [r2, #1]
					data_info.data_crc	 = header->meta_data.data_crc;
 8021320:	693b      	ldr	r3, [r7, #16]
 8021322:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8021326:	4a51      	ldr	r2, [pc, #324]	; (802146c <ser_proccess_data+0x230>)
 8021328:	f8c2 3005 	str.w	r3, [r2, #5]

					printf("Received Data Header. type=[%d], size=[%ld], crc=[0x%08lX]\r\n",
																									data_info.data_type,
 802132c:	4b4f      	ldr	r3, [pc, #316]	; (802146c <ser_proccess_data+0x230>)
 802132e:	781b      	ldrb	r3, [r3, #0]
					printf("Received Data Header. type=[%d], size=[%ld], crc=[0x%08lX]\r\n",
 8021330:	4619      	mov	r1, r3
 8021332:	4b4e      	ldr	r3, [pc, #312]	; (802146c <ser_proccess_data+0x230>)
 8021334:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8021338:	4b4c      	ldr	r3, [pc, #304]	; (802146c <ser_proccess_data+0x230>)
 802133a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802133e:	484f      	ldr	r0, [pc, #316]	; (802147c <ser_proccess_data+0x240>)
 8021340:	f00c ffaa 	bl	802e298 <iprintf>
																									data_info.data_size,
																									data_info.data_crc);
					ser_state = SER_STATE_DATA;
 8021344:	4b48      	ldr	r3, [pc, #288]	; (8021468 <ser_proccess_data+0x22c>)
 8021346:	2202      	movs	r2, #2
 8021348:	701a      	strb	r2, [r3, #0]
					ret = SER_EX_OK;
 802134a:	2300      	movs	r3, #0
 802134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}
			break;
 8021350:	e07f      	b.n	8021452 <ser_proccess_data+0x216>


			case SER_STATE_DATA:
			{
				SER_DATA_				*data			= (SER_DATA_ *)buf;
 8021352:	687b      	ldr	r3, [r7, #4]
 8021354:	61bb      	str	r3, [r7, #24]
				uint16_t				data_len	=	data->data_len;
 8021356:	69bb      	ldr	r3, [r7, #24]
 8021358:	789a      	ldrb	r2, [r3, #2]
 802135a:	78db      	ldrb	r3, [r3, #3]
 802135c:	021b      	lsls	r3, r3, #8
 802135e:	4313      	orrs	r3, r2
 8021360:	82fb      	strh	r3, [r7, #22]

				if( data->packet_type == SER_PACKET_TYPE_DATA )
 8021362:	69bb      	ldr	r3, [r7, #24]
 8021364:	785b      	ldrb	r3, [r3, #1]
 8021366:	2b01      	cmp	r3, #1
 8021368:	d175      	bne.n	8021456 <ser_proccess_data+0x21a>
				{
					switch(data_info.data_type)
 802136a:	4b40      	ldr	r3, [pc, #256]	; (802146c <ser_proccess_data+0x230>)
 802136c:	781b      	ldrb	r3, [r3, #0]
 802136e:	2b02      	cmp	r3, #2
 8021370:	d006      	beq.n	8021380 <ser_proccess_data+0x144>
 8021372:	2b02      	cmp	r3, #2
 8021374:	dc25      	bgt.n	80213c2 <ser_proccess_data+0x186>
 8021376:	2b00      	cmp	r3, #0
 8021378:	d027      	beq.n	80213ca <ser_proccess_data+0x18e>
 802137a:	2b01      	cmp	r3, #1
 802137c:	d027      	beq.n	80213ce <ser_proccess_data+0x192>
 802137e:	e020      	b.n	80213c2 <ser_proccess_data+0x186>
						}
						break;

						case OTA_INFO_DATA:
						{
								ota_data = *(ota_info *)&buf[4];
 8021380:	4a3f      	ldr	r2, [pc, #252]	; (8021480 <ser_proccess_data+0x244>)
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	3304      	adds	r3, #4
 8021386:	681d      	ldr	r5, [r3, #0]
 8021388:	685c      	ldr	r4, [r3, #4]
 802138a:	6898      	ldr	r0, [r3, #8]
 802138c:	68d9      	ldr	r1, [r3, #12]
 802138e:	6015      	str	r5, [r2, #0]
 8021390:	6054      	str	r4, [r2, #4]
 8021392:	6090      	str	r0, [r2, #8]
 8021394:	60d1      	str	r1, [r2, #12]
 8021396:	7c1b      	ldrb	r3, [r3, #16]
 8021398:	7413      	strb	r3, [r2, #16]
								ota_data.ota_valid = 0;
 802139a:	4b39      	ldr	r3, [pc, #228]	; (8021480 <ser_proccess_data+0x244>)
 802139c:	2200      	movs	r2, #0
 802139e:	721a      	strb	r2, [r3, #8]
								data_received_size 			= data_len;
 80213a0:	4a33      	ldr	r2, [pc, #204]	; (8021470 <ser_proccess_data+0x234>)
 80213a2:	8afb      	ldrh	r3, [r7, #22]
 80213a4:	8013      	strh	r3, [r2, #0]
								data_calc_crc			 	= ser_calcCRC(&buf[4], data_len);
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	3304      	adds	r3, #4
 80213aa:	8afa      	ldrh	r2, [r7, #22]
 80213ac:	4611      	mov	r1, r2
 80213ae:	4618      	mov	r0, r3
 80213b0:	f000 f976 	bl	80216a0 <ser_calcCRC>
 80213b4:	4603      	mov	r3, r0
 80213b6:	4a2f      	ldr	r2, [pc, #188]	; (8021474 <ser_proccess_data+0x238>)
 80213b8:	6013      	str	r3, [r2, #0]
								ret = SER_EX_OK;
 80213ba:	2300      	movs	r3, #0
 80213bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						}
						break;
 80213c0:	e006      	b.n	80213d0 <ser_proccess_data+0x194>

						default:
						{
							// shouldn't be here
							ret = SER_EX_ERROR;
 80213c2:	2301      	movs	r3, #1
 80213c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						}
						break;
 80213c8:	e002      	b.n	80213d0 <ser_proccess_data+0x194>
						break;
 80213ca:	bf00      	nop
 80213cc:	e000      	b.n	80213d0 <ser_proccess_data+0x194>
						break;
 80213ce:	bf00      	nop
					}

					if( data_received_size >= data_info.data_size )
 80213d0:	4b27      	ldr	r3, [pc, #156]	; (8021470 <ser_proccess_data+0x234>)
 80213d2:	881b      	ldrh	r3, [r3, #0]
 80213d4:	461a      	mov	r2, r3
 80213d6:	4b25      	ldr	r3, [pc, #148]	; (802146c <ser_proccess_data+0x230>)
 80213d8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80213dc:	429a      	cmp	r2, r3
 80213de:	d33a      	bcc.n	8021456 <ser_proccess_data+0x21a>
					{
						//Received All data, move to end
						ser_state = SER_STATE_END;
 80213e0:	4b21      	ldr	r3, [pc, #132]	; (8021468 <ser_proccess_data+0x22c>)
 80213e2:	2203      	movs	r2, #3
 80213e4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 80213e6:	e036      	b.n	8021456 <ser_proccess_data+0x21a>


			case SER_STATE_END:
			{
				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80213e8:	687b      	ldr	r3, [r7, #4]
 80213ea:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == SER_PACKET_TYPE_CMD)
 80213ec:	69fb      	ldr	r3, [r7, #28]
 80213ee:	785b      	ldrb	r3, [r3, #1]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d132      	bne.n	802145a <ser_proccess_data+0x21e>
				{
					if(cmd->cmd == SER_CMD_END)
 80213f4:	69fb      	ldr	r3, [r7, #28]
 80213f6:	791b      	ldrb	r3, [r3, #4]
 80213f8:	2b01      	cmp	r3, #1
 80213fa:	d12e      	bne.n	802145a <ser_proccess_data+0x21e>
					{
						printf("Receive SERIAL END COMMAND\r\n");
 80213fc:	4821      	ldr	r0, [pc, #132]	; (8021484 <ser_proccess_data+0x248>)
 80213fe:	f00c ffd1 	bl	802e3a4 <puts>

						//Validation the received packets
						//TODO: validation normal data

						// one packet data so:
						if( data_info.data_type == OTA_INFO_DATA ||  data_info.data_type == STATUS_DATA )
 8021402:	4b1a      	ldr	r3, [pc, #104]	; (802146c <ser_proccess_data+0x230>)
 8021404:	781b      	ldrb	r3, [r3, #0]
 8021406:	2b02      	cmp	r3, #2
 8021408:	d003      	beq.n	8021412 <ser_proccess_data+0x1d6>
 802140a:	4b18      	ldr	r3, [pc, #96]	; (802146c <ser_proccess_data+0x230>)
 802140c:	781b      	ldrb	r3, [r3, #0]
 802140e:	2b01      	cmp	r3, #1
 8021410:	d110      	bne.n	8021434 <ser_proccess_data+0x1f8>
						{
							if(data_calc_crc != data_info.data_crc)
 8021412:	4b16      	ldr	r3, [pc, #88]	; (802146c <ser_proccess_data+0x230>)
 8021414:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8021418:	4b16      	ldr	r3, [pc, #88]	; (8021474 <ser_proccess_data+0x238>)
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	429a      	cmp	r2, r3
 802141e:	d009      	beq.n	8021434 <ser_proccess_data+0x1f8>
							{
								printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8021420:	4b14      	ldr	r3, [pc, #80]	; (8021474 <ser_proccess_data+0x238>)
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	4a11      	ldr	r2, [pc, #68]	; (802146c <ser_proccess_data+0x230>)
 8021426:	f8d2 2005 	ldr.w	r2, [r2, #5]
 802142a:	4619      	mov	r1, r3
 802142c:	4816      	ldr	r0, [pc, #88]	; (8021488 <ser_proccess_data+0x24c>)
 802142e:	f00c ff33 	bl	802e298 <iprintf>
												data_calc_crc, data_info.data_crc);
								break;
 8021432:	e013      	b.n	802145c <ser_proccess_data+0x220>
							}
						}
//						printf("Validated Successfully!\r\n");

						ser_state = SER_STATE_START;
 8021434:	4b0c      	ldr	r3, [pc, #48]	; (8021468 <ser_proccess_data+0x22c>)
 8021436:	2200      	movs	r2, #0
 8021438:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 802143a:	2300      	movs	r3, #0
 802143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 8021440:	e00b      	b.n	802145a <ser_proccess_data+0x21e>

			default:
			{
				ret = SER_EX_ERROR;
 8021442:	2301      	movs	r3, #1
 8021444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8021448:	e008      	b.n	802145c <ser_proccess_data+0x220>
			// state cases end
		};
 802144a:	bf00      	nop
 802144c:	e006      	b.n	802145c <ser_proccess_data+0x220>
			break;
 802144e:	bf00      	nop
 8021450:	e004      	b.n	802145c <ser_proccess_data+0x220>
			break;
 8021452:	bf00      	nop
 8021454:	e002      	b.n	802145c <ser_proccess_data+0x220>
			break;
 8021456:	bf00      	nop
 8021458:	e000      	b.n	802145c <ser_proccess_data+0x220>
			break;
 802145a:	bf00      	nop

	}while(false);

	return ret;
 802145c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8021460:	4618      	mov	r0, r3
 8021462:	3728      	adds	r7, #40	; 0x28
 8021464:	46bd      	mov	sp, r7
 8021466:	bdb0      	pop	{r4, r5, r7, pc}
 8021468:	20000420 	.word	0x20000420
 802146c:	2000083c 	.word	0x2000083c
 8021470:	2000084e 	.word	0x2000084e
 8021474:	20000850 	.word	0x20000850
 8021478:	0802f5c4 	.word	0x0802f5c4
 802147c:	0802f5e4 	.word	0x0802f5e4
 8021480:	20000408 	.word	0x20000408
 8021484:	0802f624 	.word	0x0802f624
 8021488:	0802f640 	.word	0x0802f640

0802148c <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 802148c:	b580      	push	{r7, lr}
 802148e:	b086      	sub	sp, #24
 8021490:	af00      	add	r7, sp, #0
 8021492:	6078      	str	r0, [r7, #4]
 8021494:	460b      	mov	r3, r1
 8021496:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 8021498:	f107 030c 	add.w	r3, r7, #12
 802149c:	2200      	movs	r2, #0
 802149e:	601a      	str	r2, [r3, #0]
 80214a0:	605a      	str	r2, [r3, #4]
 80214a2:	811a      	strh	r2, [r3, #8]
 80214a4:	23aa      	movs	r3, #170	; 0xaa
 80214a6:	733b      	strb	r3, [r7, #12]
 80214a8:	2303      	movs	r3, #3
 80214aa:	737b      	strb	r3, [r7, #13]
 80214ac:	2301      	movs	r3, #1
 80214ae:	81fb      	strh	r3, [r7, #14]
 80214b0:	78fb      	ldrb	r3, [r7, #3]
 80214b2:	743b      	strb	r3, [r7, #16]
 80214b4:	23bb      	movs	r3, #187	; 0xbb
 80214b6:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 80214b8:	f107 030c 	add.w	r3, r7, #12
 80214bc:	3304      	adds	r3, #4
 80214be:	2101      	movs	r1, #1
 80214c0:	4618      	mov	r0, r3
 80214c2:	f000 f8ed 	bl	80216a0 <ser_calcCRC>
 80214c6:	4603      	mov	r3, r0
 80214c8:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 80214cc:	f107 010c 	add.w	r1, r7, #12
 80214d0:	f04f 33ff 	mov.w	r3, #4294967295
 80214d4:	220a      	movs	r2, #10
 80214d6:	6878      	ldr	r0, [r7, #4]
 80214d8:	f008 f995 	bl	8029806 <HAL_UART_Transmit>

}
 80214dc:	bf00      	nop
 80214de:	3718      	adds	r7, #24
 80214e0:	46bd      	mov	sp, r7
 80214e2:	bd80      	pop	{r7, pc}

080214e4 <go_to_DFU>:
/*
 * @brief save boot reason to OTA update and save data in configuration
 * sector patr
 */
void go_to_DFU()
{
 80214e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214e6:	b08f      	sub	sp, #60	; 0x3c
 80214e8:	af00      	add	r7, sp, #0
	do
	{
		HAL_StatusTypeDef ret = HAL_ERROR;
 80214ea:	2301      	movs	r3, #1
 80214ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* read configuration */
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80214f0:	4b15      	ldr	r3, [pc, #84]	; (8021548 <go_to_DFU+0x64>)
 80214f2:	681b      	ldr	r3, [r3, #0]
 80214f4:	461c      	mov	r4, r3
 80214f6:	1d3e      	adds	r6, r7, #4
 80214f8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80214fc:	4635      	mov	r5, r6
 80214fe:	4623      	mov	r3, r4
 8021500:	6818      	ldr	r0, [r3, #0]
 8021502:	6859      	ldr	r1, [r3, #4]
 8021504:	689a      	ldr	r2, [r3, #8]
 8021506:	68db      	ldr	r3, [r3, #12]
 8021508:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802150a:	3410      	adds	r4, #16
 802150c:	3610      	adds	r6, #16
 802150e:	4564      	cmp	r4, ip
 8021510:	d1f4      	bne.n	80214fc <go_to_DFU+0x18>

		/* set reboot cause to ota request */
		cfg.reboot_cause = OTA_UPDATE_APP;
 8021512:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 8021516:	607b      	str	r3, [r7, #4]

		/* write back config */
		ret = write_cfg_to_flash(&cfg);
 8021518:	1d3b      	adds	r3, r7, #4
 802151a:	4618      	mov	r0, r3
 802151c:	f000 f81a 	bl	8021554 <write_cfg_to_flash>
 8021520:	4603      	mov	r3, r0
 8021522:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if( ret != HAL_OK )
 8021526:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 802152a:	2b00      	cmp	r3, #0
 802152c:	d003      	beq.n	8021536 <go_to_DFU+0x52>
		{
			printf("Write configuratin Error!!!\r\n");
 802152e:	4807      	ldr	r0, [pc, #28]	; (802154c <go_to_DFU+0x68>)
 8021530:	f00c ff38 	bl	802e3a4 <puts>
		printf("Reboot for Update...\r\n");

		HAL_NVIC_SystemReset();

	}while(false);
}
 8021534:	e004      	b.n	8021540 <go_to_DFU+0x5c>
		printf("Reboot for Update...\r\n");
 8021536:	4806      	ldr	r0, [pc, #24]	; (8021550 <go_to_DFU+0x6c>)
 8021538:	f00c ff34 	bl	802e3a4 <puts>
		HAL_NVIC_SystemReset();
 802153c:	f002 f9c3 	bl	80238c6 <HAL_NVIC_SystemReset>
}
 8021540:	bf00      	nop
 8021542:	373c      	adds	r7, #60	; 0x3c
 8021544:	46bd      	mov	sp, r7
 8021546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021548:	20000000 	.word	0x20000000
 802154c:	0802f684 	.word	0x0802f684
 8021550:	0802f6a4 	.word	0x0802f6a4

08021554 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 8021554:	b5b0      	push	{r4, r5, r7, lr}
 8021556:	b08c      	sub	sp, #48	; 0x30
 8021558:	af00      	add	r7, sp, #0
 802155a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 802155c:	2301      	movs	r3, #1
 802155e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	2b00      	cmp	r3, #0
 8021566:	d05f      	beq.n	8021628 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 8021568:	f003 f80e 	bl	8024588 <HAL_FLASH_Unlock>
 802156c:	4603      	mov	r3, r0
 802156e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 8021572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021576:	2b00      	cmp	r3, #0
 8021578:	d158      	bne.n	802162c <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 802157a:	f04f 30ff 	mov.w	r0, #4294967295
 802157e:	f003 f835 	bl	80245ec <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8021582:	2300      	movs	r3, #0
 8021584:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 8021586:	2304      	movs	r3, #4
 8021588:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 802158a:	2301      	movs	r3, #1
 802158c:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 802158e:	2302      	movs	r3, #2
 8021590:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8021592:	4b2c      	ldr	r3, [pc, #176]	; (8021644 <write_cfg_to_flash+0xf0>)
 8021594:	2273      	movs	r2, #115	; 0x73
 8021596:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8021598:	f107 020c 	add.w	r2, r7, #12
 802159c:	f107 0310 	add.w	r3, r7, #16
 80215a0:	4611      	mov	r1, r2
 80215a2:	4618      	mov	r0, r3
 80215a4:	f003 f962 	bl	802486c <HAL_FLASHEx_Erase>
 80215a8:	4603      	mov	r3, r0
 80215aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80215ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215b2:	2b00      	cmp	r3, #0
 80215b4:	d13c      	bne.n	8021630 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215ba:	2300      	movs	r3, #0
 80215bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80215be:	e01f      	b.n	8021600 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215c2:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80215c6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 80215ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215ce:	4413      	add	r3, r2
 80215d0:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215d2:	b2db      	uxtb	r3, r3
 80215d4:	2200      	movs	r2, #0
 80215d6:	461c      	mov	r4, r3
 80215d8:	4615      	mov	r5, r2
 80215da:	4622      	mov	r2, r4
 80215dc:	462b      	mov	r3, r5
 80215de:	2000      	movs	r0, #0
 80215e0:	f002 ff7e 	bl	80244e0 <HAL_FLASH_Program>
 80215e4:	4603      	mov	r3, r0
 80215e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 80215ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d003      	beq.n	80215fa <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 80215f2:	4815      	ldr	r0, [pc, #84]	; (8021648 <write_cfg_to_flash+0xf4>)
 80215f4:	f00c fed6 	bl	802e3a4 <puts>
				break;
 80215f8:	e005      	b.n	8021606 <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215fc:	3301      	adds	r3, #1
 80215fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8021600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021602:	2b2f      	cmp	r3, #47	; 0x2f
 8021604:	d9dc      	bls.n	80215c0 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8021606:	f04f 30ff 	mov.w	r0, #4294967295
 802160a:	f002 ffef 	bl	80245ec <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 802160e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021612:	2b00      	cmp	r3, #0
 8021614:	d10e      	bne.n	8021634 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8021616:	f002 ffd9 	bl	80245cc <HAL_FLASH_Lock>
 802161a:	4603      	mov	r3, r0
 802161c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8021620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021624:	2b00      	cmp	r3, #0
 8021626:	e006      	b.n	8021636 <write_cfg_to_flash+0xe2>
			break;
 8021628:	bf00      	nop
 802162a:	e004      	b.n	8021636 <write_cfg_to_flash+0xe2>
			break;
 802162c:	bf00      	nop
 802162e:	e002      	b.n	8021636 <write_cfg_to_flash+0xe2>
			break;
 8021630:	bf00      	nop
 8021632:	e000      	b.n	8021636 <write_cfg_to_flash+0xe2>
	      break;
 8021634:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 8021636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802163a:	4618      	mov	r0, r3
 802163c:	3730      	adds	r7, #48	; 0x30
 802163e:	46bd      	mov	sp, r7
 8021640:	bdb0      	pop	{r4, r5, r7, pc}
 8021642:	bf00      	nop
 8021644:	40023c00 	.word	0x40023c00
 8021648:	0802f6bc 	.word	0x0802f6bc

0802164c <ota_req_send>:
 * @brief send request to host
 * @param huart uart handler
 * @retval none
 */
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd)
{
 802164c:	b580      	push	{r7, lr}
 802164e:	b086      	sub	sp, #24
 8021650:	af00      	add	r7, sp, #0
 8021652:	6078      	str	r0, [r7, #4]
 8021654:	460b      	mov	r3, r1
 8021656:	70fb      	strb	r3, [r7, #3]
	SER_COMMAND_ pack =
 8021658:	f107 030c 	add.w	r3, r7, #12
 802165c:	2200      	movs	r2, #0
 802165e:	601a      	str	r2, [r3, #0]
 8021660:	605a      	str	r2, [r3, #4]
 8021662:	811a      	strh	r2, [r3, #8]
 8021664:	23aa      	movs	r3, #170	; 0xaa
 8021666:	733b      	strb	r3, [r7, #12]
 8021668:	2301      	movs	r3, #1
 802166a:	81fb      	strh	r3, [r7, #14]
 802166c:	78fb      	ldrb	r3, [r7, #3]
 802166e:	743b      	strb	r3, [r7, #16]
 8021670:	23bb      	movs	r3, #187	; 0xbb
 8021672:	757b      	strb	r3, [r7, #21]
		.data_len			= 1u,
		.cmd					= cmd,
		.eof					= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.cmd, 1);
 8021674:	f107 030c 	add.w	r3, r7, #12
 8021678:	3304      	adds	r3, #4
 802167a:	2101      	movs	r1, #1
 802167c:	4618      	mov	r0, r3
 802167e:	f000 f80f 	bl	80216a0 <ser_calcCRC>
 8021682:	4603      	mov	r3, r0
 8021684:	f8c7 3011 	str.w	r3, [r7, #17]

	//send request
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_COMMAND_),HAL_MAX_DELAY);
 8021688:	f107 010c 	add.w	r1, r7, #12
 802168c:	f04f 33ff 	mov.w	r3, #4294967295
 8021690:	220a      	movs	r2, #10
 8021692:	6878      	ldr	r0, [r7, #4]
 8021694:	f008 f8b7 	bl	8029806 <HAL_UART_Transmit>
}
 8021698:	bf00      	nop
 802169a:	3718      	adds	r7, #24
 802169c:	46bd      	mov	sp, r7
 802169e:	bd80      	pop	{r7, pc}

080216a0 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80216a0:	b480      	push	{r7}
 80216a2:	b087      	sub	sp, #28
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
 80216a8:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80216aa:	f04f 33ff 	mov.w	r3, #4294967295
 80216ae:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216b0:	2300      	movs	r3, #0
 80216b2:	613b      	str	r3, [r7, #16]
 80216b4:	e014      	b.n	80216e0 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80216b6:	697b      	ldr	r3, [r7, #20]
 80216b8:	0e1b      	lsrs	r3, r3, #24
 80216ba:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80216bc:	687a      	ldr	r2, [r7, #4]
 80216be:	693b      	ldr	r3, [r7, #16]
 80216c0:	4413      	add	r3, r2
 80216c2:	781a      	ldrb	r2, [r3, #0]
 80216c4:	7bfb      	ldrb	r3, [r7, #15]
 80216c6:	4053      	eors	r3, r2
 80216c8:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80216ca:	697b      	ldr	r3, [r7, #20]
 80216cc:	021a      	lsls	r2, r3, #8
 80216ce:	7bfb      	ldrb	r3, [r7, #15]
 80216d0:	4909      	ldr	r1, [pc, #36]	; (80216f8 <ser_calcCRC+0x58>)
 80216d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80216d6:	4053      	eors	r3, r2
 80216d8:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216da:	693b      	ldr	r3, [r7, #16]
 80216dc:	3301      	adds	r3, #1
 80216de:	613b      	str	r3, [r7, #16]
 80216e0:	693a      	ldr	r2, [r7, #16]
 80216e2:	683b      	ldr	r3, [r7, #0]
 80216e4:	429a      	cmp	r2, r3
 80216e6:	d3e6      	bcc.n	80216b6 <ser_calcCRC+0x16>
    }
    return Checksum;
 80216e8:	697b      	ldr	r3, [r7, #20]
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	371c      	adds	r7, #28
 80216ee:	46bd      	mov	sp, r7
 80216f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f4:	4770      	bx	lr
 80216f6:	bf00      	nop
 80216f8:	0802f6e0 	.word	0x0802f6e0

080216fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80216fc:	b480      	push	{r7}
 80216fe:	b083      	sub	sp, #12
 8021700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021702:	2300      	movs	r3, #0
 8021704:	607b      	str	r3, [r7, #4]
 8021706:	4b10      	ldr	r3, [pc, #64]	; (8021748 <HAL_MspInit+0x4c>)
 8021708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802170a:	4a0f      	ldr	r2, [pc, #60]	; (8021748 <HAL_MspInit+0x4c>)
 802170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021710:	6453      	str	r3, [r2, #68]	; 0x44
 8021712:	4b0d      	ldr	r3, [pc, #52]	; (8021748 <HAL_MspInit+0x4c>)
 8021714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802171a:	607b      	str	r3, [r7, #4]
 802171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802171e:	2300      	movs	r3, #0
 8021720:	603b      	str	r3, [r7, #0]
 8021722:	4b09      	ldr	r3, [pc, #36]	; (8021748 <HAL_MspInit+0x4c>)
 8021724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021726:	4a08      	ldr	r2, [pc, #32]	; (8021748 <HAL_MspInit+0x4c>)
 8021728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802172c:	6413      	str	r3, [r2, #64]	; 0x40
 802172e:	4b06      	ldr	r3, [pc, #24]	; (8021748 <HAL_MspInit+0x4c>)
 8021730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021736:	603b      	str	r3, [r7, #0]
 8021738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802173a:	bf00      	nop
 802173c:	370c      	adds	r7, #12
 802173e:	46bd      	mov	sp, r7
 8021740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021744:	4770      	bx	lr
 8021746:	bf00      	nop
 8021748:	40023800 	.word	0x40023800

0802174c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 802174c:	b480      	push	{r7}
 802174e:	b085      	sub	sp, #20
 8021750:	af00      	add	r7, sp, #0
 8021752:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8021754:	687b      	ldr	r3, [r7, #4]
 8021756:	681b      	ldr	r3, [r3, #0]
 8021758:	4a0b      	ldr	r2, [pc, #44]	; (8021788 <HAL_CRC_MspInit+0x3c>)
 802175a:	4293      	cmp	r3, r2
 802175c:	d10d      	bne.n	802177a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 802175e:	2300      	movs	r3, #0
 8021760:	60fb      	str	r3, [r7, #12]
 8021762:	4b0a      	ldr	r3, [pc, #40]	; (802178c <HAL_CRC_MspInit+0x40>)
 8021764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021766:	4a09      	ldr	r2, [pc, #36]	; (802178c <HAL_CRC_MspInit+0x40>)
 8021768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802176c:	6313      	str	r3, [r2, #48]	; 0x30
 802176e:	4b07      	ldr	r3, [pc, #28]	; (802178c <HAL_CRC_MspInit+0x40>)
 8021770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021776:	60fb      	str	r3, [r7, #12]
 8021778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 802177a:	bf00      	nop
 802177c:	3714      	adds	r7, #20
 802177e:	46bd      	mov	sp, r7
 8021780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021784:	4770      	bx	lr
 8021786:	bf00      	nop
 8021788:	40023000 	.word	0x40023000
 802178c:	40023800 	.word	0x40023800

08021790 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8021790:	b580      	push	{r7, lr}
 8021792:	b084      	sub	sp, #16
 8021794:	af00      	add	r7, sp, #0
 8021796:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	681b      	ldr	r3, [r3, #0]
 802179c:	4a0e      	ldr	r2, [pc, #56]	; (80217d8 <HAL_DMA2D_MspInit+0x48>)
 802179e:	4293      	cmp	r3, r2
 80217a0:	d115      	bne.n	80217ce <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80217a2:	2300      	movs	r3, #0
 80217a4:	60fb      	str	r3, [r7, #12]
 80217a6:	4b0d      	ldr	r3, [pc, #52]	; (80217dc <HAL_DMA2D_MspInit+0x4c>)
 80217a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217aa:	4a0c      	ldr	r2, [pc, #48]	; (80217dc <HAL_DMA2D_MspInit+0x4c>)
 80217ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80217b0:	6313      	str	r3, [r2, #48]	; 0x30
 80217b2:	4b0a      	ldr	r3, [pc, #40]	; (80217dc <HAL_DMA2D_MspInit+0x4c>)
 80217b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80217ba:	60fb      	str	r3, [r7, #12]
 80217bc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80217be:	2200      	movs	r2, #0
 80217c0:	2105      	movs	r1, #5
 80217c2:	205a      	movs	r0, #90	; 0x5a
 80217c4:	f002 f855 	bl	8023872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80217c8:	205a      	movs	r0, #90	; 0x5a
 80217ca:	f002 f86e 	bl	80238aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80217ce:	bf00      	nop
 80217d0:	3710      	adds	r7, #16
 80217d2:	46bd      	mov	sp, r7
 80217d4:	bd80      	pop	{r7, pc}
 80217d6:	bf00      	nop
 80217d8:	4002b000 	.word	0x4002b000
 80217dc:	40023800 	.word	0x40023800

080217e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80217e0:	b580      	push	{r7, lr}
 80217e2:	b08a      	sub	sp, #40	; 0x28
 80217e4:	af00      	add	r7, sp, #0
 80217e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80217e8:	f107 0314 	add.w	r3, r7, #20
 80217ec:	2200      	movs	r2, #0
 80217ee:	601a      	str	r2, [r3, #0]
 80217f0:	605a      	str	r2, [r3, #4]
 80217f2:	609a      	str	r2, [r3, #8]
 80217f4:	60da      	str	r2, [r3, #12]
 80217f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80217f8:	687b      	ldr	r3, [r7, #4]
 80217fa:	681b      	ldr	r3, [r3, #0]
 80217fc:	4a29      	ldr	r2, [pc, #164]	; (80218a4 <HAL_I2C_MspInit+0xc4>)
 80217fe:	4293      	cmp	r3, r2
 8021800:	d14b      	bne.n	802189a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021802:	2300      	movs	r3, #0
 8021804:	613b      	str	r3, [r7, #16]
 8021806:	4b28      	ldr	r3, [pc, #160]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802180a:	4a27      	ldr	r2, [pc, #156]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 802180c:	f043 0304 	orr.w	r3, r3, #4
 8021810:	6313      	str	r3, [r2, #48]	; 0x30
 8021812:	4b25      	ldr	r3, [pc, #148]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021816:	f003 0304 	and.w	r3, r3, #4
 802181a:	613b      	str	r3, [r7, #16]
 802181c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802181e:	2300      	movs	r3, #0
 8021820:	60fb      	str	r3, [r7, #12]
 8021822:	4b21      	ldr	r3, [pc, #132]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021826:	4a20      	ldr	r2, [pc, #128]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021828:	f043 0301 	orr.w	r3, r3, #1
 802182c:	6313      	str	r3, [r2, #48]	; 0x30
 802182e:	4b1e      	ldr	r3, [pc, #120]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021832:	f003 0301 	and.w	r3, r3, #1
 8021836:	60fb      	str	r3, [r7, #12]
 8021838:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 802183a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021840:	2312      	movs	r3, #18
 8021842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021844:	2301      	movs	r3, #1
 8021846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021848:	2300      	movs	r3, #0
 802184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802184c:	2304      	movs	r3, #4
 802184e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021850:	f107 0314 	add.w	r3, r7, #20
 8021854:	4619      	mov	r1, r3
 8021856:	4815      	ldr	r0, [pc, #84]	; (80218ac <HAL_I2C_MspInit+0xcc>)
 8021858:	f003 f948 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 802185c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021862:	2312      	movs	r3, #18
 8021864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021866:	2301      	movs	r3, #1
 8021868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802186a:	2300      	movs	r3, #0
 802186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802186e:	2304      	movs	r3, #4
 8021870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8021872:	f107 0314 	add.w	r3, r7, #20
 8021876:	4619      	mov	r1, r3
 8021878:	480d      	ldr	r0, [pc, #52]	; (80218b0 <HAL_I2C_MspInit+0xd0>)
 802187a:	f003 f937 	bl	8024aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 802187e:	2300      	movs	r3, #0
 8021880:	60bb      	str	r3, [r7, #8]
 8021882:	4b09      	ldr	r3, [pc, #36]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021886:	4a08      	ldr	r2, [pc, #32]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021888:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 802188c:	6413      	str	r3, [r2, #64]	; 0x40
 802188e:	4b06      	ldr	r3, [pc, #24]	; (80218a8 <HAL_I2C_MspInit+0xc8>)
 8021890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021896:	60bb      	str	r3, [r7, #8]
 8021898:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 802189a:	bf00      	nop
 802189c:	3728      	adds	r7, #40	; 0x28
 802189e:	46bd      	mov	sp, r7
 80218a0:	bd80      	pop	{r7, pc}
 80218a2:	bf00      	nop
 80218a4:	40005c00 	.word	0x40005c00
 80218a8:	40023800 	.word	0x40023800
 80218ac:	40020800 	.word	0x40020800
 80218b0:	40020000 	.word	0x40020000

080218b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80218b4:	b580      	push	{r7, lr}
 80218b6:	b09a      	sub	sp, #104	; 0x68
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80218c0:	2200      	movs	r2, #0
 80218c2:	601a      	str	r2, [r3, #0]
 80218c4:	605a      	str	r2, [r3, #4]
 80218c6:	609a      	str	r2, [r3, #8]
 80218c8:	60da      	str	r2, [r3, #12]
 80218ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80218cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218d0:	2230      	movs	r2, #48	; 0x30
 80218d2:	2100      	movs	r1, #0
 80218d4:	4618      	mov	r0, r3
 80218d6:	f00c fbf7 	bl	802e0c8 <memset>
  if(hltdc->Instance==LTDC)
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	4a85      	ldr	r2, [pc, #532]	; (8021af4 <HAL_LTDC_MspInit+0x240>)
 80218e0:	4293      	cmp	r3, r2
 80218e2:	f040 8102 	bne.w	8021aea <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80218e6:	2308      	movs	r3, #8
 80218e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80218ea:	2331      	movs	r3, #49	; 0x31
 80218ec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80218ee:	2302      	movs	r3, #2
 80218f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80218f2:	2300      	movs	r3, #0
 80218f4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80218f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218fa:	4618      	mov	r0, r3
 80218fc:	f006 fa84 	bl	8027e08 <HAL_RCCEx_PeriphCLKConfig>
 8021900:	4603      	mov	r3, r0
 8021902:	2b00      	cmp	r3, #0
 8021904:	d001      	beq.n	802190a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8021906:	f7ff fad3 	bl	8020eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 802190a:	2300      	movs	r3, #0
 802190c:	623b      	str	r3, [r7, #32]
 802190e:	4b7a      	ldr	r3, [pc, #488]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021912:	4a79      	ldr	r2, [pc, #484]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021918:	6453      	str	r3, [r2, #68]	; 0x44
 802191a:	4b77      	ldr	r3, [pc, #476]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 802191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802191e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021922:	623b      	str	r3, [r7, #32]
 8021924:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021926:	2300      	movs	r3, #0
 8021928:	61fb      	str	r3, [r7, #28]
 802192a:	4b73      	ldr	r3, [pc, #460]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 802192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802192e:	4a72      	ldr	r2, [pc, #456]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021930:	f043 0320 	orr.w	r3, r3, #32
 8021934:	6313      	str	r3, [r2, #48]	; 0x30
 8021936:	4b70      	ldr	r3, [pc, #448]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802193a:	f003 0320 	and.w	r3, r3, #32
 802193e:	61fb      	str	r3, [r7, #28]
 8021940:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021942:	2300      	movs	r3, #0
 8021944:	61bb      	str	r3, [r7, #24]
 8021946:	4b6c      	ldr	r3, [pc, #432]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802194a:	4a6b      	ldr	r2, [pc, #428]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 802194c:	f043 0301 	orr.w	r3, r3, #1
 8021950:	6313      	str	r3, [r2, #48]	; 0x30
 8021952:	4b69      	ldr	r3, [pc, #420]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021956:	f003 0301 	and.w	r3, r3, #1
 802195a:	61bb      	str	r3, [r7, #24]
 802195c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802195e:	2300      	movs	r3, #0
 8021960:	617b      	str	r3, [r7, #20]
 8021962:	4b65      	ldr	r3, [pc, #404]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021966:	4a64      	ldr	r2, [pc, #400]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021968:	f043 0302 	orr.w	r3, r3, #2
 802196c:	6313      	str	r3, [r2, #48]	; 0x30
 802196e:	4b62      	ldr	r3, [pc, #392]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021972:	f003 0302 	and.w	r3, r3, #2
 8021976:	617b      	str	r3, [r7, #20]
 8021978:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 802197a:	2300      	movs	r3, #0
 802197c:	613b      	str	r3, [r7, #16]
 802197e:	4b5e      	ldr	r3, [pc, #376]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021982:	4a5d      	ldr	r2, [pc, #372]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 8021984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021988:	6313      	str	r3, [r2, #48]	; 0x30
 802198a:	4b5b      	ldr	r3, [pc, #364]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 802198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021992:	613b      	str	r3, [r7, #16]
 8021994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021996:	2300      	movs	r3, #0
 8021998:	60fb      	str	r3, [r7, #12]
 802199a:	4b57      	ldr	r3, [pc, #348]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 802199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802199e:	4a56      	ldr	r2, [pc, #344]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 80219a0:	f043 0304 	orr.w	r3, r3, #4
 80219a4:	6313      	str	r3, [r2, #48]	; 0x30
 80219a6:	4b54      	ldr	r3, [pc, #336]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 80219a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219aa:	f003 0304 	and.w	r3, r3, #4
 80219ae:	60fb      	str	r3, [r7, #12]
 80219b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80219b2:	2300      	movs	r3, #0
 80219b4:	60bb      	str	r3, [r7, #8]
 80219b6:	4b50      	ldr	r3, [pc, #320]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 80219b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219ba:	4a4f      	ldr	r2, [pc, #316]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 80219bc:	f043 0308 	orr.w	r3, r3, #8
 80219c0:	6313      	str	r3, [r2, #48]	; 0x30
 80219c2:	4b4d      	ldr	r3, [pc, #308]	; (8021af8 <HAL_LTDC_MspInit+0x244>)
 80219c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219c6:	f003 0308 	and.w	r3, r3, #8
 80219ca:	60bb      	str	r3, [r7, #8]
 80219cc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80219ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80219d2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219d4:	2302      	movs	r3, #2
 80219d6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219d8:	2300      	movs	r3, #0
 80219da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219dc:	2300      	movs	r3, #0
 80219de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219e0:	230e      	movs	r3, #14
 80219e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80219e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80219e8:	4619      	mov	r1, r3
 80219ea:	4844      	ldr	r0, [pc, #272]	; (8021afc <HAL_LTDC_MspInit+0x248>)
 80219ec:	f003 f87e 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80219f0:	f641 0358 	movw	r3, #6232	; 0x1858
 80219f4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219f6:	2302      	movs	r3, #2
 80219f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219fa:	2300      	movs	r3, #0
 80219fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219fe:	2300      	movs	r3, #0
 8021a00:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a02:	230e      	movs	r3, #14
 8021a04:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a0a:	4619      	mov	r1, r3
 8021a0c:	483c      	ldr	r0, [pc, #240]	; (8021b00 <HAL_LTDC_MspInit+0x24c>)
 8021a0e:	f003 f86d 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021a12:	2303      	movs	r3, #3
 8021a14:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a16:	2302      	movs	r3, #2
 8021a18:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a1e:	2300      	movs	r3, #0
 8021a20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021a22:	2309      	movs	r3, #9
 8021a24:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a2a:	4619      	mov	r1, r3
 8021a2c:	4835      	ldr	r0, [pc, #212]	; (8021b04 <HAL_LTDC_MspInit+0x250>)
 8021a2e:	f003 f85d 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021a32:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8021a36:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a38:	2302      	movs	r3, #2
 8021a3a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a40:	2300      	movs	r3, #0
 8021a42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a44:	230e      	movs	r3, #14
 8021a46:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a4c:	4619      	mov	r1, r3
 8021a4e:	482d      	ldr	r0, [pc, #180]	; (8021b04 <HAL_LTDC_MspInit+0x250>)
 8021a50:	f003 f84c 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021a54:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021a58:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a5a:	2302      	movs	r3, #2
 8021a5c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a5e:	2300      	movs	r3, #0
 8021a60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a62:	2300      	movs	r3, #0
 8021a64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a66:	230e      	movs	r3, #14
 8021a68:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021a6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a6e:	4619      	mov	r1, r3
 8021a70:	4825      	ldr	r0, [pc, #148]	; (8021b08 <HAL_LTDC_MspInit+0x254>)
 8021a72:	f003 f83b 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8021a76:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8021a7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a7c:	2302      	movs	r3, #2
 8021a7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a80:	2300      	movs	r3, #0
 8021a82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a84:	2300      	movs	r3, #0
 8021a86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a88:	230e      	movs	r3, #14
 8021a8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a90:	4619      	mov	r1, r3
 8021a92:	481e      	ldr	r0, [pc, #120]	; (8021b0c <HAL_LTDC_MspInit+0x258>)
 8021a94:	f003 f82a 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8021a98:	2348      	movs	r3, #72	; 0x48
 8021a9a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a9c:	2302      	movs	r3, #2
 8021a9e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021aa4:	2300      	movs	r3, #0
 8021aa6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021aa8:	230e      	movs	r3, #14
 8021aaa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021aac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ab0:	4619      	mov	r1, r3
 8021ab2:	4817      	ldr	r0, [pc, #92]	; (8021b10 <HAL_LTDC_MspInit+0x25c>)
 8021ab4:	f003 f81a 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8021ab8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021abc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021abe:	2302      	movs	r3, #2
 8021ac0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021aca:	2309      	movs	r3, #9
 8021acc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021ace:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ad2:	4619      	mov	r1, r3
 8021ad4:	480c      	ldr	r0, [pc, #48]	; (8021b08 <HAL_LTDC_MspInit+0x254>)
 8021ad6:	f003 f809 	bl	8024aec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021ada:	2200      	movs	r2, #0
 8021adc:	2105      	movs	r1, #5
 8021ade:	2058      	movs	r0, #88	; 0x58
 8021ae0:	f001 fec7 	bl	8023872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021ae4:	2058      	movs	r0, #88	; 0x58
 8021ae6:	f001 fee0 	bl	80238aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021aea:	bf00      	nop
 8021aec:	3768      	adds	r7, #104	; 0x68
 8021aee:	46bd      	mov	sp, r7
 8021af0:	bd80      	pop	{r7, pc}
 8021af2:	bf00      	nop
 8021af4:	40016800 	.word	0x40016800
 8021af8:	40023800 	.word	0x40023800
 8021afc:	40021400 	.word	0x40021400
 8021b00:	40020000 	.word	0x40020000
 8021b04:	40020400 	.word	0x40020400
 8021b08:	40021800 	.word	0x40021800
 8021b0c:	40020800 	.word	0x40020800
 8021b10:	40020c00 	.word	0x40020c00

08021b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021b14:	b580      	push	{r7, lr}
 8021b16:	b08a      	sub	sp, #40	; 0x28
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b1c:	f107 0314 	add.w	r3, r7, #20
 8021b20:	2200      	movs	r2, #0
 8021b22:	601a      	str	r2, [r3, #0]
 8021b24:	605a      	str	r2, [r3, #4]
 8021b26:	609a      	str	r2, [r3, #8]
 8021b28:	60da      	str	r2, [r3, #12]
 8021b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	4a19      	ldr	r2, [pc, #100]	; (8021b98 <HAL_SPI_MspInit+0x84>)
 8021b32:	4293      	cmp	r3, r2
 8021b34:	d12c      	bne.n	8021b90 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8021b36:	2300      	movs	r3, #0
 8021b38:	613b      	str	r3, [r7, #16]
 8021b3a:	4b18      	ldr	r3, [pc, #96]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b3e:	4a17      	ldr	r2, [pc, #92]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b44:	6453      	str	r3, [r2, #68]	; 0x44
 8021b46:	4b15      	ldr	r3, [pc, #84]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b4e:	613b      	str	r3, [r7, #16]
 8021b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021b52:	2300      	movs	r3, #0
 8021b54:	60fb      	str	r3, [r7, #12]
 8021b56:	4b11      	ldr	r3, [pc, #68]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b5a:	4a10      	ldr	r2, [pc, #64]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b5c:	f043 0320 	orr.w	r3, r3, #32
 8021b60:	6313      	str	r3, [r2, #48]	; 0x30
 8021b62:	4b0e      	ldr	r3, [pc, #56]	; (8021b9c <HAL_SPI_MspInit+0x88>)
 8021b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b66:	f003 0320 	and.w	r3, r3, #32
 8021b6a:	60fb      	str	r3, [r7, #12]
 8021b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021b6e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b74:	2302      	movs	r3, #2
 8021b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b78:	2300      	movs	r3, #0
 8021b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b7c:	2300      	movs	r3, #0
 8021b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021b80:	2305      	movs	r3, #5
 8021b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021b84:	f107 0314 	add.w	r3, r7, #20
 8021b88:	4619      	mov	r1, r3
 8021b8a:	4805      	ldr	r0, [pc, #20]	; (8021ba0 <HAL_SPI_MspInit+0x8c>)
 8021b8c:	f002 ffae 	bl	8024aec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021b90:	bf00      	nop
 8021b92:	3728      	adds	r7, #40	; 0x28
 8021b94:	46bd      	mov	sp, r7
 8021b96:	bd80      	pop	{r7, pc}
 8021b98:	40015000 	.word	0x40015000
 8021b9c:	40023800 	.word	0x40023800
 8021ba0:	40021400 	.word	0x40021400

08021ba4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021ba4:	b580      	push	{r7, lr}
 8021ba6:	b082      	sub	sp, #8
 8021ba8:	af00      	add	r7, sp, #0
 8021baa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	4a08      	ldr	r2, [pc, #32]	; (8021bd4 <HAL_SPI_MspDeInit+0x30>)
 8021bb2:	4293      	cmp	r3, r2
 8021bb4:	d10a      	bne.n	8021bcc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8021bb6:	4b08      	ldr	r3, [pc, #32]	; (8021bd8 <HAL_SPI_MspDeInit+0x34>)
 8021bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bba:	4a07      	ldr	r2, [pc, #28]	; (8021bd8 <HAL_SPI_MspDeInit+0x34>)
 8021bbc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021bc0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021bc2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8021bc6:	4805      	ldr	r0, [pc, #20]	; (8021bdc <HAL_SPI_MspDeInit+0x38>)
 8021bc8:	f003 f93c 	bl	8024e44 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021bcc:	bf00      	nop
 8021bce:	3708      	adds	r7, #8
 8021bd0:	46bd      	mov	sp, r7
 8021bd2:	bd80      	pop	{r7, pc}
 8021bd4:	40015000 	.word	0x40015000
 8021bd8:	40023800 	.word	0x40023800
 8021bdc:	40021400 	.word	0x40021400

08021be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021be0:	b480      	push	{r7}
 8021be2:	b085      	sub	sp, #20
 8021be4:	af00      	add	r7, sp, #0
 8021be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	4a0b      	ldr	r2, [pc, #44]	; (8021c1c <HAL_TIM_Base_MspInit+0x3c>)
 8021bee:	4293      	cmp	r3, r2
 8021bf0:	d10d      	bne.n	8021c0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021bf2:	2300      	movs	r3, #0
 8021bf4:	60fb      	str	r3, [r7, #12]
 8021bf6:	4b0a      	ldr	r3, [pc, #40]	; (8021c20 <HAL_TIM_Base_MspInit+0x40>)
 8021bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bfa:	4a09      	ldr	r2, [pc, #36]	; (8021c20 <HAL_TIM_Base_MspInit+0x40>)
 8021bfc:	f043 0301 	orr.w	r3, r3, #1
 8021c00:	6453      	str	r3, [r2, #68]	; 0x44
 8021c02:	4b07      	ldr	r3, [pc, #28]	; (8021c20 <HAL_TIM_Base_MspInit+0x40>)
 8021c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c06:	f003 0301 	and.w	r3, r3, #1
 8021c0a:	60fb      	str	r3, [r7, #12]
 8021c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021c0e:	bf00      	nop
 8021c10:	3714      	adds	r7, #20
 8021c12:	46bd      	mov	sp, r7
 8021c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c18:	4770      	bx	lr
 8021c1a:	bf00      	nop
 8021c1c:	40010000 	.word	0x40010000
 8021c20:	40023800 	.word	0x40023800

08021c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021c24:	b580      	push	{r7, lr}
 8021c26:	b08c      	sub	sp, #48	; 0x30
 8021c28:	af00      	add	r7, sp, #0
 8021c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c2c:	f107 031c 	add.w	r3, r7, #28
 8021c30:	2200      	movs	r2, #0
 8021c32:	601a      	str	r2, [r3, #0]
 8021c34:	605a      	str	r2, [r3, #4]
 8021c36:	609a      	str	r2, [r3, #8]
 8021c38:	60da      	str	r2, [r3, #12]
 8021c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	4a46      	ldr	r2, [pc, #280]	; (8021d5c <HAL_UART_MspInit+0x138>)
 8021c42:	4293      	cmp	r3, r2
 8021c44:	d153      	bne.n	8021cee <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8021c46:	2300      	movs	r3, #0
 8021c48:	61bb      	str	r3, [r7, #24]
 8021c4a:	4b45      	ldr	r3, [pc, #276]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c4e:	4a44      	ldr	r2, [pc, #272]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021c54:	6413      	str	r3, [r2, #64]	; 0x40
 8021c56:	4b42      	ldr	r3, [pc, #264]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021c5e:	61bb      	str	r3, [r7, #24]
 8021c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021c62:	2300      	movs	r3, #0
 8021c64:	617b      	str	r3, [r7, #20]
 8021c66:	4b3e      	ldr	r3, [pc, #248]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c6a:	4a3d      	ldr	r2, [pc, #244]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c6c:	f043 0304 	orr.w	r3, r3, #4
 8021c70:	6313      	str	r3, [r2, #48]	; 0x30
 8021c72:	4b3b      	ldr	r3, [pc, #236]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c76:	f003 0304 	and.w	r3, r3, #4
 8021c7a:	617b      	str	r3, [r7, #20]
 8021c7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021c7e:	2300      	movs	r3, #0
 8021c80:	613b      	str	r3, [r7, #16]
 8021c82:	4b37      	ldr	r3, [pc, #220]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c86:	4a36      	ldr	r2, [pc, #216]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c88:	f043 0308 	orr.w	r3, r3, #8
 8021c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8021c8e:	4b34      	ldr	r3, [pc, #208]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c92:	f003 0308 	and.w	r3, r3, #8
 8021c96:	613b      	str	r3, [r7, #16]
 8021c98:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ca0:	2302      	movs	r3, #2
 8021ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ca4:	2300      	movs	r3, #0
 8021ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ca8:	2303      	movs	r3, #3
 8021caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021cac:	2308      	movs	r3, #8
 8021cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cb0:	f107 031c 	add.w	r3, r7, #28
 8021cb4:	4619      	mov	r1, r3
 8021cb6:	482b      	ldr	r0, [pc, #172]	; (8021d64 <HAL_UART_MspInit+0x140>)
 8021cb8:	f002 ff18 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021cbc:	2304      	movs	r3, #4
 8021cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cc0:	2302      	movs	r3, #2
 8021cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cc8:	2303      	movs	r3, #3
 8021cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021ccc:	2308      	movs	r3, #8
 8021cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021cd0:	f107 031c 	add.w	r3, r7, #28
 8021cd4:	4619      	mov	r1, r3
 8021cd6:	4824      	ldr	r0, [pc, #144]	; (8021d68 <HAL_UART_MspInit+0x144>)
 8021cd8:	f002 ff08 	bl	8024aec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021cdc:	2200      	movs	r2, #0
 8021cde:	2100      	movs	r1, #0
 8021ce0:	2035      	movs	r0, #53	; 0x35
 8021ce2:	f001 fdc6 	bl	8023872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8021ce6:	2035      	movs	r0, #53	; 0x35
 8021ce8:	f001 fddf 	bl	80238aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021cec:	e031      	b.n	8021d52 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021cee:	687b      	ldr	r3, [r7, #4]
 8021cf0:	681b      	ldr	r3, [r3, #0]
 8021cf2:	4a1e      	ldr	r2, [pc, #120]	; (8021d6c <HAL_UART_MspInit+0x148>)
 8021cf4:	4293      	cmp	r3, r2
 8021cf6:	d12c      	bne.n	8021d52 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021cf8:	2300      	movs	r3, #0
 8021cfa:	60fb      	str	r3, [r7, #12]
 8021cfc:	4b18      	ldr	r3, [pc, #96]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d00:	4a17      	ldr	r2, [pc, #92]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021d02:	f043 0310 	orr.w	r3, r3, #16
 8021d06:	6453      	str	r3, [r2, #68]	; 0x44
 8021d08:	4b15      	ldr	r3, [pc, #84]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d0c:	f003 0310 	and.w	r3, r3, #16
 8021d10:	60fb      	str	r3, [r7, #12]
 8021d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d14:	2300      	movs	r3, #0
 8021d16:	60bb      	str	r3, [r7, #8]
 8021d18:	4b11      	ldr	r3, [pc, #68]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d1c:	4a10      	ldr	r2, [pc, #64]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021d1e:	f043 0301 	orr.w	r3, r3, #1
 8021d22:	6313      	str	r3, [r2, #48]	; 0x30
 8021d24:	4b0e      	ldr	r3, [pc, #56]	; (8021d60 <HAL_UART_MspInit+0x13c>)
 8021d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d28:	f003 0301 	and.w	r3, r3, #1
 8021d2c:	60bb      	str	r3, [r7, #8]
 8021d2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021d30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d36:	2302      	movs	r3, #2
 8021d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d3a:	2300      	movs	r3, #0
 8021d3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d3e:	2303      	movs	r3, #3
 8021d40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021d42:	2307      	movs	r3, #7
 8021d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d46:	f107 031c 	add.w	r3, r7, #28
 8021d4a:	4619      	mov	r1, r3
 8021d4c:	4808      	ldr	r0, [pc, #32]	; (8021d70 <HAL_UART_MspInit+0x14c>)
 8021d4e:	f002 fecd 	bl	8024aec <HAL_GPIO_Init>
}
 8021d52:	bf00      	nop
 8021d54:	3730      	adds	r7, #48	; 0x30
 8021d56:	46bd      	mov	sp, r7
 8021d58:	bd80      	pop	{r7, pc}
 8021d5a:	bf00      	nop
 8021d5c:	40005000 	.word	0x40005000
 8021d60:	40023800 	.word	0x40023800
 8021d64:	40020800 	.word	0x40020800
 8021d68:	40020c00 	.word	0x40020c00
 8021d6c:	40011000 	.word	0x40011000
 8021d70:	40020000 	.word	0x40020000

08021d74 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021d74:	b580      	push	{r7, lr}
 8021d76:	b086      	sub	sp, #24
 8021d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021d7a:	1d3b      	adds	r3, r7, #4
 8021d7c:	2200      	movs	r2, #0
 8021d7e:	601a      	str	r2, [r3, #0]
 8021d80:	605a      	str	r2, [r3, #4]
 8021d82:	609a      	str	r2, [r3, #8]
 8021d84:	60da      	str	r2, [r3, #12]
 8021d86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021d88:	4b3b      	ldr	r3, [pc, #236]	; (8021e78 <HAL_FMC_MspInit+0x104>)
 8021d8a:	681b      	ldr	r3, [r3, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d16f      	bne.n	8021e70 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021d90:	4b39      	ldr	r3, [pc, #228]	; (8021e78 <HAL_FMC_MspInit+0x104>)
 8021d92:	2201      	movs	r2, #1
 8021d94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021d96:	2300      	movs	r3, #0
 8021d98:	603b      	str	r3, [r7, #0]
 8021d9a:	4b38      	ldr	r3, [pc, #224]	; (8021e7c <HAL_FMC_MspInit+0x108>)
 8021d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d9e:	4a37      	ldr	r2, [pc, #220]	; (8021e7c <HAL_FMC_MspInit+0x108>)
 8021da0:	f043 0301 	orr.w	r3, r3, #1
 8021da4:	6393      	str	r3, [r2, #56]	; 0x38
 8021da6:	4b35      	ldr	r3, [pc, #212]	; (8021e7c <HAL_FMC_MspInit+0x108>)
 8021da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021daa:	f003 0301 	and.w	r3, r3, #1
 8021dae:	603b      	str	r3, [r7, #0]
 8021db0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021db2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021db6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021db8:	2302      	movs	r3, #2
 8021dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dbc:	2300      	movs	r3, #0
 8021dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dc0:	2303      	movs	r3, #3
 8021dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dc4:	230c      	movs	r3, #12
 8021dc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021dc8:	1d3b      	adds	r3, r7, #4
 8021dca:	4619      	mov	r1, r3
 8021dcc:	482c      	ldr	r0, [pc, #176]	; (8021e80 <HAL_FMC_MspInit+0x10c>)
 8021dce:	f002 fe8d 	bl	8024aec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021dd2:	2301      	movs	r3, #1
 8021dd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dd6:	2302      	movs	r3, #2
 8021dd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dda:	2300      	movs	r3, #0
 8021ddc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dde:	2303      	movs	r3, #3
 8021de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021de2:	230c      	movs	r3, #12
 8021de4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021de6:	1d3b      	adds	r3, r7, #4
 8021de8:	4619      	mov	r1, r3
 8021dea:	4826      	ldr	r0, [pc, #152]	; (8021e84 <HAL_FMC_MspInit+0x110>)
 8021dec:	f002 fe7e 	bl	8024aec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021df0:	f248 1333 	movw	r3, #33075	; 0x8133
 8021df4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021df6:	2302      	movs	r3, #2
 8021df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dfe:	2303      	movs	r3, #3
 8021e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e02:	230c      	movs	r3, #12
 8021e04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021e06:	1d3b      	adds	r3, r7, #4
 8021e08:	4619      	mov	r1, r3
 8021e0a:	481f      	ldr	r0, [pc, #124]	; (8021e88 <HAL_FMC_MspInit+0x114>)
 8021e0c:	f002 fe6e 	bl	8024aec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021e10:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021e14:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e16:	2302      	movs	r3, #2
 8021e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e1e:	2303      	movs	r3, #3
 8021e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e22:	230c      	movs	r3, #12
 8021e24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021e26:	1d3b      	adds	r3, r7, #4
 8021e28:	4619      	mov	r1, r3
 8021e2a:	4818      	ldr	r0, [pc, #96]	; (8021e8c <HAL_FMC_MspInit+0x118>)
 8021e2c:	f002 fe5e 	bl	8024aec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021e30:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021e34:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e36:	2302      	movs	r3, #2
 8021e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e3e:	2303      	movs	r3, #3
 8021e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e42:	230c      	movs	r3, #12
 8021e44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021e46:	1d3b      	adds	r3, r7, #4
 8021e48:	4619      	mov	r1, r3
 8021e4a:	4811      	ldr	r0, [pc, #68]	; (8021e90 <HAL_FMC_MspInit+0x11c>)
 8021e4c:	f002 fe4e 	bl	8024aec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021e50:	2360      	movs	r3, #96	; 0x60
 8021e52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e54:	2302      	movs	r3, #2
 8021e56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e58:	2300      	movs	r3, #0
 8021e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e5c:	2303      	movs	r3, #3
 8021e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e60:	230c      	movs	r3, #12
 8021e62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e64:	1d3b      	adds	r3, r7, #4
 8021e66:	4619      	mov	r1, r3
 8021e68:	480a      	ldr	r0, [pc, #40]	; (8021e94 <HAL_FMC_MspInit+0x120>)
 8021e6a:	f002 fe3f 	bl	8024aec <HAL_GPIO_Init>
 8021e6e:	e000      	b.n	8021e72 <HAL_FMC_MspInit+0xfe>
    return;
 8021e70:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021e72:	3718      	adds	r7, #24
 8021e74:	46bd      	mov	sp, r7
 8021e76:	bd80      	pop	{r7, pc}
 8021e78:	20000854 	.word	0x20000854
 8021e7c:	40023800 	.word	0x40023800
 8021e80:	40021400 	.word	0x40021400
 8021e84:	40020800 	.word	0x40020800
 8021e88:	40021800 	.word	0x40021800
 8021e8c:	40021000 	.word	0x40021000
 8021e90:	40020c00 	.word	0x40020c00
 8021e94:	40020400 	.word	0x40020400

08021e98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	b082      	sub	sp, #8
 8021e9c:	af00      	add	r7, sp, #0
 8021e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021ea0:	f7ff ff68 	bl	8021d74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021ea4:	bf00      	nop
 8021ea6:	3708      	adds	r7, #8
 8021ea8:	46bd      	mov	sp, r7
 8021eaa:	bd80      	pop	{r7, pc}

08021eac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021eac:	b580      	push	{r7, lr}
 8021eae:	b08e      	sub	sp, #56	; 0x38
 8021eb0:	af00      	add	r7, sp, #0
 8021eb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021eb8:	2300      	movs	r3, #0
 8021eba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021ebc:	2300      	movs	r3, #0
 8021ebe:	60fb      	str	r3, [r7, #12]
 8021ec0:	4b33      	ldr	r3, [pc, #204]	; (8021f90 <HAL_InitTick+0xe4>)
 8021ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ec4:	4a32      	ldr	r2, [pc, #200]	; (8021f90 <HAL_InitTick+0xe4>)
 8021ec6:	f043 0310 	orr.w	r3, r3, #16
 8021eca:	6413      	str	r3, [r2, #64]	; 0x40
 8021ecc:	4b30      	ldr	r3, [pc, #192]	; (8021f90 <HAL_InitTick+0xe4>)
 8021ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ed0:	f003 0310 	and.w	r3, r3, #16
 8021ed4:	60fb      	str	r3, [r7, #12]
 8021ed6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021ed8:	f107 0210 	add.w	r2, r7, #16
 8021edc:	f107 0314 	add.w	r3, r7, #20
 8021ee0:	4611      	mov	r1, r2
 8021ee2:	4618      	mov	r0, r3
 8021ee4:	f005 ff5e 	bl	8027da4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021ee8:	6a3b      	ldr	r3, [r7, #32]
 8021eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021eee:	2b00      	cmp	r3, #0
 8021ef0:	d103      	bne.n	8021efa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021ef2:	f005 ff2f 	bl	8027d54 <HAL_RCC_GetPCLK1Freq>
 8021ef6:	6378      	str	r0, [r7, #52]	; 0x34
 8021ef8:	e004      	b.n	8021f04 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021efa:	f005 ff2b 	bl	8027d54 <HAL_RCC_GetPCLK1Freq>
 8021efe:	4603      	mov	r3, r0
 8021f00:	005b      	lsls	r3, r3, #1
 8021f02:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f06:	4a23      	ldr	r2, [pc, #140]	; (8021f94 <HAL_InitTick+0xe8>)
 8021f08:	fba2 2303 	umull	r2, r3, r2, r3
 8021f0c:	0c9b      	lsrs	r3, r3, #18
 8021f0e:	3b01      	subs	r3, #1
 8021f10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021f12:	4b21      	ldr	r3, [pc, #132]	; (8021f98 <HAL_InitTick+0xec>)
 8021f14:	4a21      	ldr	r2, [pc, #132]	; (8021f9c <HAL_InitTick+0xf0>)
 8021f16:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021f18:	4b1f      	ldr	r3, [pc, #124]	; (8021f98 <HAL_InitTick+0xec>)
 8021f1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021f1e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021f20:	4a1d      	ldr	r2, [pc, #116]	; (8021f98 <HAL_InitTick+0xec>)
 8021f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f24:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021f26:	4b1c      	ldr	r3, [pc, #112]	; (8021f98 <HAL_InitTick+0xec>)
 8021f28:	2200      	movs	r2, #0
 8021f2a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f2c:	4b1a      	ldr	r3, [pc, #104]	; (8021f98 <HAL_InitTick+0xec>)
 8021f2e:	2200      	movs	r2, #0
 8021f30:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f32:	4b19      	ldr	r3, [pc, #100]	; (8021f98 <HAL_InitTick+0xec>)
 8021f34:	2200      	movs	r2, #0
 8021f36:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021f38:	4817      	ldr	r0, [pc, #92]	; (8021f98 <HAL_InitTick+0xec>)
 8021f3a:	f006 ff95 	bl	8028e68 <HAL_TIM_Base_Init>
 8021f3e:	4603      	mov	r3, r0
 8021f40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021f44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f48:	2b00      	cmp	r3, #0
 8021f4a:	d11b      	bne.n	8021f84 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021f4c:	4812      	ldr	r0, [pc, #72]	; (8021f98 <HAL_InitTick+0xec>)
 8021f4e:	f006 ffdb 	bl	8028f08 <HAL_TIM_Base_Start_IT>
 8021f52:	4603      	mov	r3, r0
 8021f54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021f58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d111      	bne.n	8021f84 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021f60:	2036      	movs	r0, #54	; 0x36
 8021f62:	f001 fca2 	bl	80238aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	2b0f      	cmp	r3, #15
 8021f6a:	d808      	bhi.n	8021f7e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021f6c:	2200      	movs	r2, #0
 8021f6e:	6879      	ldr	r1, [r7, #4]
 8021f70:	2036      	movs	r0, #54	; 0x36
 8021f72:	f001 fc7e 	bl	8023872 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021f76:	4a0a      	ldr	r2, [pc, #40]	; (8021fa0 <HAL_InitTick+0xf4>)
 8021f78:	687b      	ldr	r3, [r7, #4]
 8021f7a:	6013      	str	r3, [r2, #0]
 8021f7c:	e002      	b.n	8021f84 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021f7e:	2301      	movs	r3, #1
 8021f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021f88:	4618      	mov	r0, r3
 8021f8a:	3738      	adds	r7, #56	; 0x38
 8021f8c:	46bd      	mov	sp, r7
 8021f8e:	bd80      	pop	{r7, pc}
 8021f90:	40023800 	.word	0x40023800
 8021f94:	431bde83 	.word	0x431bde83
 8021f98:	20000858 	.word	0x20000858
 8021f9c:	40001000 	.word	0x40001000
 8021fa0:	20000058 	.word	0x20000058

08021fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fa4:	b480      	push	{r7}
 8021fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fa8:	e7fe      	b.n	8021fa8 <NMI_Handler+0x4>

08021faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021faa:	b480      	push	{r7}
 8021fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fae:	e7fe      	b.n	8021fae <HardFault_Handler+0x4>

08021fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fb0:	b480      	push	{r7}
 8021fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fb4:	e7fe      	b.n	8021fb4 <MemManage_Handler+0x4>

08021fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fb6:	b480      	push	{r7}
 8021fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fba:	e7fe      	b.n	8021fba <BusFault_Handler+0x4>

08021fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fbc:	b480      	push	{r7}
 8021fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fc0:	e7fe      	b.n	8021fc0 <UsageFault_Handler+0x4>

08021fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fc2:	b480      	push	{r7}
 8021fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021fc6:	bf00      	nop
 8021fc8:	46bd      	mov	sp, r7
 8021fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fce:	4770      	bx	lr

08021fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fd0:	b480      	push	{r7}
 8021fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fd4:	bf00      	nop
 8021fd6:	46bd      	mov	sp, r7
 8021fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fdc:	4770      	bx	lr

08021fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021fde:	b480      	push	{r7}
 8021fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021fe2:	bf00      	nop
 8021fe4:	46bd      	mov	sp, r7
 8021fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fea:	4770      	bx	lr

08021fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021fec:	b480      	push	{r7}
 8021fee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021ff0:	bf00      	nop
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff8:	4770      	bx	lr

08021ffa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021ffa:	b580      	push	{r7, lr}
 8021ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021ffe:	2001      	movs	r0, #1
 8022000:	f003 f846 	bl	8025090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8022004:	bf00      	nop
 8022006:	bd80      	pop	{r7, pc}

08022008 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8022008:	b580      	push	{r7, lr}
 802200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 802200c:	4802      	ldr	r0, [pc, #8]	; (8022018 <UART5_IRQHandler+0x10>)
 802200e:	f007 fcbd 	bl	802998c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8022012:	bf00      	nop
 8022014:	bd80      	pop	{r7, pc}
 8022016:	bf00      	nop
 8022018:	200002e4 	.word	0x200002e4

0802201c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802201c:	b580      	push	{r7, lr}
 802201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022020:	4802      	ldr	r0, [pc, #8]	; (802202c <TIM6_DAC_IRQHandler+0x10>)
 8022022:	f006 ffe1 	bl	8028fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022026:	bf00      	nop
 8022028:	bd80      	pop	{r7, pc}
 802202a:	bf00      	nop
 802202c:	20000858 	.word	0x20000858

08022030 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8022030:	b580      	push	{r7, lr}
 8022032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8022034:	4802      	ldr	r0, [pc, #8]	; (8022040 <OTG_HS_IRQHandler+0x10>)
 8022036:	f003 faad 	bl	8025594 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 802203a:	bf00      	nop
 802203c:	bd80      	pop	{r7, pc}
 802203e:	bf00      	nop
 8022040:	20000ef8 	.word	0x20000ef8

08022044 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8022044:	b580      	push	{r7, lr}
 8022046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8022048:	4802      	ldr	r0, [pc, #8]	; (8022054 <LTDC_IRQHandler+0x10>)
 802204a:	f004 fed3 	bl	8026df4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 802204e:	bf00      	nop
 8022050:	bd80      	pop	{r7, pc}
 8022052:	bf00      	nop
 8022054:	2000019c 	.word	0x2000019c

08022058 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8022058:	b580      	push	{r7, lr}
 802205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 802205c:	4802      	ldr	r0, [pc, #8]	; (8022068 <DMA2D_IRQHandler+0x10>)
 802205e:	f002 f800 	bl	8024062 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8022062:	bf00      	nop
 8022064:	bd80      	pop	{r7, pc}
 8022066:	bf00      	nop
 8022068:	20000108 	.word	0x20000108

0802206c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 802206c:	b480      	push	{r7}
 802206e:	b083      	sub	sp, #12
 8022070:	af00      	add	r7, sp, #0
 8022072:	4603      	mov	r3, r0
 8022074:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8022076:	bf00      	nop
 8022078:	370c      	adds	r7, #12
 802207a:	46bd      	mov	sp, r7
 802207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022080:	4770      	bx	lr

08022082 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8022082:	b580      	push	{r7, lr}
 8022084:	b086      	sub	sp, #24
 8022086:	af00      	add	r7, sp, #0
 8022088:	60f8      	str	r0, [r7, #12]
 802208a:	60b9      	str	r1, [r7, #8]
 802208c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802208e:	2300      	movs	r3, #0
 8022090:	617b      	str	r3, [r7, #20]
 8022092:	e00a      	b.n	80220aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8022094:	f3af 8000 	nop.w
 8022098:	4601      	mov	r1, r0
 802209a:	68bb      	ldr	r3, [r7, #8]
 802209c:	1c5a      	adds	r2, r3, #1
 802209e:	60ba      	str	r2, [r7, #8]
 80220a0:	b2ca      	uxtb	r2, r1
 80220a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220a4:	697b      	ldr	r3, [r7, #20]
 80220a6:	3301      	adds	r3, #1
 80220a8:	617b      	str	r3, [r7, #20]
 80220aa:	697a      	ldr	r2, [r7, #20]
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	429a      	cmp	r2, r3
 80220b0:	dbf0      	blt.n	8022094 <_read+0x12>
  }

  return len;
 80220b2:	687b      	ldr	r3, [r7, #4]
}
 80220b4:	4618      	mov	r0, r3
 80220b6:	3718      	adds	r7, #24
 80220b8:	46bd      	mov	sp, r7
 80220ba:	bd80      	pop	{r7, pc}

080220bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80220bc:	b580      	push	{r7, lr}
 80220be:	b086      	sub	sp, #24
 80220c0:	af00      	add	r7, sp, #0
 80220c2:	60f8      	str	r0, [r7, #12]
 80220c4:	60b9      	str	r1, [r7, #8]
 80220c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220c8:	2300      	movs	r3, #0
 80220ca:	617b      	str	r3, [r7, #20]
 80220cc:	e009      	b.n	80220e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80220ce:	68bb      	ldr	r3, [r7, #8]
 80220d0:	1c5a      	adds	r2, r3, #1
 80220d2:	60ba      	str	r2, [r7, #8]
 80220d4:	781b      	ldrb	r3, [r3, #0]
 80220d6:	4618      	mov	r0, r3
 80220d8:	f7fe fec6 	bl	8020e68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220dc:	697b      	ldr	r3, [r7, #20]
 80220de:	3301      	adds	r3, #1
 80220e0:	617b      	str	r3, [r7, #20]
 80220e2:	697a      	ldr	r2, [r7, #20]
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	429a      	cmp	r2, r3
 80220e8:	dbf1      	blt.n	80220ce <_write+0x12>
  }
  return len;
 80220ea:	687b      	ldr	r3, [r7, #4]
}
 80220ec:	4618      	mov	r0, r3
 80220ee:	3718      	adds	r7, #24
 80220f0:	46bd      	mov	sp, r7
 80220f2:	bd80      	pop	{r7, pc}

080220f4 <_close>:

int _close(int file)
{
 80220f4:	b480      	push	{r7}
 80220f6:	b083      	sub	sp, #12
 80220f8:	af00      	add	r7, sp, #0
 80220fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80220fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022100:	4618      	mov	r0, r3
 8022102:	370c      	adds	r7, #12
 8022104:	46bd      	mov	sp, r7
 8022106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802210a:	4770      	bx	lr

0802210c <_fstat>:


int _fstat(int file, struct stat *st)
{
 802210c:	b480      	push	{r7}
 802210e:	b083      	sub	sp, #12
 8022110:	af00      	add	r7, sp, #0
 8022112:	6078      	str	r0, [r7, #4]
 8022114:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8022116:	683b      	ldr	r3, [r7, #0]
 8022118:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802211c:	605a      	str	r2, [r3, #4]
  return 0;
 802211e:	2300      	movs	r3, #0
}
 8022120:	4618      	mov	r0, r3
 8022122:	370c      	adds	r7, #12
 8022124:	46bd      	mov	sp, r7
 8022126:	f85d 7b04 	ldr.w	r7, [sp], #4
 802212a:	4770      	bx	lr

0802212c <_isatty>:

int _isatty(int file)
{
 802212c:	b480      	push	{r7}
 802212e:	b083      	sub	sp, #12
 8022130:	af00      	add	r7, sp, #0
 8022132:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8022134:	2301      	movs	r3, #1
}
 8022136:	4618      	mov	r0, r3
 8022138:	370c      	adds	r7, #12
 802213a:	46bd      	mov	sp, r7
 802213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022140:	4770      	bx	lr

08022142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8022142:	b480      	push	{r7}
 8022144:	b085      	sub	sp, #20
 8022146:	af00      	add	r7, sp, #0
 8022148:	60f8      	str	r0, [r7, #12]
 802214a:	60b9      	str	r1, [r7, #8]
 802214c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802214e:	2300      	movs	r3, #0
}
 8022150:	4618      	mov	r0, r3
 8022152:	3714      	adds	r7, #20
 8022154:	46bd      	mov	sp, r7
 8022156:	f85d 7b04 	ldr.w	r7, [sp], #4
 802215a:	4770      	bx	lr

0802215c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802215c:	b580      	push	{r7, lr}
 802215e:	b086      	sub	sp, #24
 8022160:	af00      	add	r7, sp, #0
 8022162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022164:	4a14      	ldr	r2, [pc, #80]	; (80221b8 <_sbrk+0x5c>)
 8022166:	4b15      	ldr	r3, [pc, #84]	; (80221bc <_sbrk+0x60>)
 8022168:	1ad3      	subs	r3, r2, r3
 802216a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802216c:	697b      	ldr	r3, [r7, #20]
 802216e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022170:	4b13      	ldr	r3, [pc, #76]	; (80221c0 <_sbrk+0x64>)
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	2b00      	cmp	r3, #0
 8022176:	d102      	bne.n	802217e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022178:	4b11      	ldr	r3, [pc, #68]	; (80221c0 <_sbrk+0x64>)
 802217a:	4a12      	ldr	r2, [pc, #72]	; (80221c4 <_sbrk+0x68>)
 802217c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802217e:	4b10      	ldr	r3, [pc, #64]	; (80221c0 <_sbrk+0x64>)
 8022180:	681a      	ldr	r2, [r3, #0]
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	4413      	add	r3, r2
 8022186:	693a      	ldr	r2, [r7, #16]
 8022188:	429a      	cmp	r2, r3
 802218a:	d207      	bcs.n	802219c <_sbrk+0x40>
  {
    errno = ENOMEM;
 802218c:	f00b ff62 	bl	802e054 <__errno>
 8022190:	4603      	mov	r3, r0
 8022192:	220c      	movs	r2, #12
 8022194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8022196:	f04f 33ff 	mov.w	r3, #4294967295
 802219a:	e009      	b.n	80221b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802219c:	4b08      	ldr	r3, [pc, #32]	; (80221c0 <_sbrk+0x64>)
 802219e:	681b      	ldr	r3, [r3, #0]
 80221a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80221a2:	4b07      	ldr	r3, [pc, #28]	; (80221c0 <_sbrk+0x64>)
 80221a4:	681a      	ldr	r2, [r3, #0]
 80221a6:	687b      	ldr	r3, [r7, #4]
 80221a8:	4413      	add	r3, r2
 80221aa:	4a05      	ldr	r2, [pc, #20]	; (80221c0 <_sbrk+0x64>)
 80221ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80221ae:	68fb      	ldr	r3, [r7, #12]
}
 80221b0:	4618      	mov	r0, r3
 80221b2:	3718      	adds	r7, #24
 80221b4:	46bd      	mov	sp, r7
 80221b6:	bd80      	pop	{r7, pc}
 80221b8:	20030000 	.word	0x20030000
 80221bc:	00000400 	.word	0x00000400
 80221c0:	200008a0 	.word	0x200008a0
 80221c4:	20001210 	.word	0x20001210

080221c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80221c8:	b480      	push	{r7}
 80221ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80221cc:	4b07      	ldr	r3, [pc, #28]	; (80221ec <SystemInit+0x24>)
 80221ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80221d2:	4a06      	ldr	r2, [pc, #24]	; (80221ec <SystemInit+0x24>)
 80221d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80221d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80221dc:	4b03      	ldr	r3, [pc, #12]	; (80221ec <SystemInit+0x24>)
 80221de:	4a04      	ldr	r2, [pc, #16]	; (80221f0 <SystemInit+0x28>)
 80221e0:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80221e2:	bf00      	nop
 80221e4:	46bd      	mov	sp, r7
 80221e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ea:	4770      	bx	lr
 80221ec:	e000ed00 	.word	0xe000ed00
 80221f0:	08020000 	.word	0x08020000

080221f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80221f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 802222c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80221f8:	480d      	ldr	r0, [pc, #52]	; (8022230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80221fa:	490e      	ldr	r1, [pc, #56]	; (8022234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80221fc:	4a0e      	ldr	r2, [pc, #56]	; (8022238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80221fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022200:	e002      	b.n	8022208 <LoopCopyDataInit>

08022202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8022202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8022204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8022206:	3304      	adds	r3, #4

08022208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802220c:	d3f9      	bcc.n	8022202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802220e:	4a0b      	ldr	r2, [pc, #44]	; (802223c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022210:	4c0b      	ldr	r4, [pc, #44]	; (8022240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8022212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8022214:	e001      	b.n	802221a <LoopFillZerobss>

08022216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8022216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022218:	3204      	adds	r2, #4

0802221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802221c:	d3fb      	bcc.n	8022216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802221e:	f7ff ffd3 	bl	80221c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022222:	f00b ff1d 	bl	802e060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022226:	f7fe f9b5 	bl	8020594 <main>
  bx  lr    
 802222a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 802222c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8022230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022234:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8022238:	08031ad4 	.word	0x08031ad4
  ldr r2, =_sbss
 802223c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8022240:	2000120c 	.word	0x2000120c

08022244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022244:	e7fe      	b.n	8022244 <ADC_IRQHandler>

08022246 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8022246:	b580      	push	{r7, lr}
 8022248:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 802224a:	f000 fa5d 	bl	8022708 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 802224e:	20ca      	movs	r0, #202	; 0xca
 8022250:	f000 f95d 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8022254:	20c3      	movs	r0, #195	; 0xc3
 8022256:	f000 f967 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 802225a:	2008      	movs	r0, #8
 802225c:	f000 f964 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8022260:	2050      	movs	r0, #80	; 0x50
 8022262:	f000 f961 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8022266:	20cf      	movs	r0, #207	; 0xcf
 8022268:	f000 f951 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802226c:	2000      	movs	r0, #0
 802226e:	f000 f95b 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8022272:	20c1      	movs	r0, #193	; 0xc1
 8022274:	f000 f958 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8022278:	2030      	movs	r0, #48	; 0x30
 802227a:	f000 f955 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 802227e:	20ed      	movs	r0, #237	; 0xed
 8022280:	f000 f945 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8022284:	2064      	movs	r0, #100	; 0x64
 8022286:	f000 f94f 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 802228a:	2003      	movs	r0, #3
 802228c:	f000 f94c 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8022290:	2012      	movs	r0, #18
 8022292:	f000 f949 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8022296:	2081      	movs	r0, #129	; 0x81
 8022298:	f000 f946 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 802229c:	20e8      	movs	r0, #232	; 0xe8
 802229e:	f000 f936 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80222a2:	2085      	movs	r0, #133	; 0x85
 80222a4:	f000 f940 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222a8:	2000      	movs	r0, #0
 80222aa:	f000 f93d 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80222ae:	2078      	movs	r0, #120	; 0x78
 80222b0:	f000 f93a 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80222b4:	20cb      	movs	r0, #203	; 0xcb
 80222b6:	f000 f92a 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80222ba:	2039      	movs	r0, #57	; 0x39
 80222bc:	f000 f934 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80222c0:	202c      	movs	r0, #44	; 0x2c
 80222c2:	f000 f931 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222c6:	2000      	movs	r0, #0
 80222c8:	f000 f92e 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80222cc:	2034      	movs	r0, #52	; 0x34
 80222ce:	f000 f92b 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80222d2:	2002      	movs	r0, #2
 80222d4:	f000 f928 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80222d8:	20f7      	movs	r0, #247	; 0xf7
 80222da:	f000 f918 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80222de:	2020      	movs	r0, #32
 80222e0:	f000 f922 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80222e4:	20ea      	movs	r0, #234	; 0xea
 80222e6:	f000 f912 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222ea:	2000      	movs	r0, #0
 80222ec:	f000 f91c 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222f0:	2000      	movs	r0, #0
 80222f2:	f000 f919 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80222f6:	20b1      	movs	r0, #177	; 0xb1
 80222f8:	f000 f909 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222fc:	2000      	movs	r0, #0
 80222fe:	f000 f913 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022302:	201b      	movs	r0, #27
 8022304:	f000 f910 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022308:	20b6      	movs	r0, #182	; 0xb6
 802230a:	f000 f900 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 802230e:	200a      	movs	r0, #10
 8022310:	f000 f90a 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8022314:	20a2      	movs	r0, #162	; 0xa2
 8022316:	f000 f907 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 802231a:	20c0      	movs	r0, #192	; 0xc0
 802231c:	f000 f8f7 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022320:	2010      	movs	r0, #16
 8022322:	f000 f901 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8022326:	20c1      	movs	r0, #193	; 0xc1
 8022328:	f000 f8f1 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 802232c:	2010      	movs	r0, #16
 802232e:	f000 f8fb 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8022332:	20c5      	movs	r0, #197	; 0xc5
 8022334:	f000 f8eb 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8022338:	2045      	movs	r0, #69	; 0x45
 802233a:	f000 f8f5 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 802233e:	2015      	movs	r0, #21
 8022340:	f000 f8f2 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8022344:	20c7      	movs	r0, #199	; 0xc7
 8022346:	f000 f8e2 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 802234a:	2090      	movs	r0, #144	; 0x90
 802234c:	f000 f8ec 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8022350:	2036      	movs	r0, #54	; 0x36
 8022352:	f000 f8dc 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8022356:	20c8      	movs	r0, #200	; 0xc8
 8022358:	f000 f8e6 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 802235c:	20f2      	movs	r0, #242	; 0xf2
 802235e:	f000 f8d6 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022362:	2000      	movs	r0, #0
 8022364:	f000 f8e0 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8022368:	20b0      	movs	r0, #176	; 0xb0
 802236a:	f000 f8d0 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 802236e:	20c2      	movs	r0, #194	; 0xc2
 8022370:	f000 f8da 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022374:	20b6      	movs	r0, #182	; 0xb6
 8022376:	f000 f8ca 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 802237a:	200a      	movs	r0, #10
 802237c:	f000 f8d4 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8022380:	20a7      	movs	r0, #167	; 0xa7
 8022382:	f000 f8d1 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8022386:	2027      	movs	r0, #39	; 0x27
 8022388:	f000 f8ce 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 802238c:	2004      	movs	r0, #4
 802238e:	f000 f8cb 	bl	8022528 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8022392:	202a      	movs	r0, #42	; 0x2a
 8022394:	f000 f8bb 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022398:	2000      	movs	r0, #0
 802239a:	f000 f8c5 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802239e:	2000      	movs	r0, #0
 80223a0:	f000 f8c2 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223a4:	2000      	movs	r0, #0
 80223a6:	f000 f8bf 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80223aa:	20ef      	movs	r0, #239	; 0xef
 80223ac:	f000 f8bc 	bl	8022528 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80223b0:	202b      	movs	r0, #43	; 0x2b
 80223b2:	f000 f8ac 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80223b6:	2000      	movs	r0, #0
 80223b8:	f000 f8b6 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223bc:	2000      	movs	r0, #0
 80223be:	f000 f8b3 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80223c2:	2001      	movs	r0, #1
 80223c4:	f000 f8b0 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80223c8:	203f      	movs	r0, #63	; 0x3f
 80223ca:	f000 f8ad 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80223ce:	20f6      	movs	r0, #246	; 0xf6
 80223d0:	f000 f89d 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223d4:	2001      	movs	r0, #1
 80223d6:	f000 f8a7 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223da:	2000      	movs	r0, #0
 80223dc:	f000 f8a4 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80223e0:	2006      	movs	r0, #6
 80223e2:	f000 f8a1 	bl	8022528 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80223e6:	202c      	movs	r0, #44	; 0x2c
 80223e8:	f000 f891 	bl	802250e <ili9341_WriteReg>
  LCD_Delay(200);
 80223ec:	20c8      	movs	r0, #200	; 0xc8
 80223ee:	f000 fa79 	bl	80228e4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80223f2:	2026      	movs	r0, #38	; 0x26
 80223f4:	f000 f88b 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223f8:	2001      	movs	r0, #1
 80223fa:	f000 f895 	bl	8022528 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80223fe:	20e0      	movs	r0, #224	; 0xe0
 8022400:	f000 f885 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8022404:	200f      	movs	r0, #15
 8022406:	f000 f88f 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 802240a:	2029      	movs	r0, #41	; 0x29
 802240c:	f000 f88c 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8022410:	2024      	movs	r0, #36	; 0x24
 8022412:	f000 f889 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8022416:	200c      	movs	r0, #12
 8022418:	f000 f886 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 802241c:	200e      	movs	r0, #14
 802241e:	f000 f883 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8022422:	2009      	movs	r0, #9
 8022424:	f000 f880 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8022428:	204e      	movs	r0, #78	; 0x4e
 802242a:	f000 f87d 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 802242e:	2078      	movs	r0, #120	; 0x78
 8022430:	f000 f87a 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8022434:	203c      	movs	r0, #60	; 0x3c
 8022436:	f000 f877 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 802243a:	2009      	movs	r0, #9
 802243c:	f000 f874 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8022440:	2013      	movs	r0, #19
 8022442:	f000 f871 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8022446:	2005      	movs	r0, #5
 8022448:	f000 f86e 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 802244c:	2017      	movs	r0, #23
 802244e:	f000 f86b 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022452:	2011      	movs	r0, #17
 8022454:	f000 f868 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022458:	2000      	movs	r0, #0
 802245a:	f000 f865 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 802245e:	20e1      	movs	r0, #225	; 0xe1
 8022460:	f000 f855 	bl	802250e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022464:	2000      	movs	r0, #0
 8022466:	f000 f85f 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 802246a:	2016      	movs	r0, #22
 802246c:	f000 f85c 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022470:	201b      	movs	r0, #27
 8022472:	f000 f859 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8022476:	2004      	movs	r0, #4
 8022478:	f000 f856 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 802247c:	2011      	movs	r0, #17
 802247e:	f000 f853 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8022482:	2007      	movs	r0, #7
 8022484:	f000 f850 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8022488:	2031      	movs	r0, #49	; 0x31
 802248a:	f000 f84d 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 802248e:	2033      	movs	r0, #51	; 0x33
 8022490:	f000 f84a 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8022494:	2042      	movs	r0, #66	; 0x42
 8022496:	f000 f847 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 802249a:	2005      	movs	r0, #5
 802249c:	f000 f844 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80224a0:	200c      	movs	r0, #12
 80224a2:	f000 f841 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80224a6:	200a      	movs	r0, #10
 80224a8:	f000 f83e 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80224ac:	2028      	movs	r0, #40	; 0x28
 80224ae:	f000 f83b 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80224b2:	202f      	movs	r0, #47	; 0x2f
 80224b4:	f000 f838 	bl	8022528 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80224b8:	200f      	movs	r0, #15
 80224ba:	f000 f835 	bl	8022528 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80224be:	2011      	movs	r0, #17
 80224c0:	f000 f825 	bl	802250e <ili9341_WriteReg>
  LCD_Delay(200);
 80224c4:	20c8      	movs	r0, #200	; 0xc8
 80224c6:	f000 fa0d 	bl	80228e4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224ca:	2029      	movs	r0, #41	; 0x29
 80224cc:	f000 f81f 	bl	802250e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80224d0:	202c      	movs	r0, #44	; 0x2c
 80224d2:	f000 f81c 	bl	802250e <ili9341_WriteReg>
}
 80224d6:	bf00      	nop
 80224d8:	bd80      	pop	{r7, pc}

080224da <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80224da:	b580      	push	{r7, lr}
 80224dc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80224de:	f000 f913 	bl	8022708 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80224e2:	2103      	movs	r1, #3
 80224e4:	20d3      	movs	r0, #211	; 0xd3
 80224e6:	f000 f82c 	bl	8022542 <ili9341_ReadData>
 80224ea:	4603      	mov	r3, r0
 80224ec:	b29b      	uxth	r3, r3
}
 80224ee:	4618      	mov	r0, r3
 80224f0:	bd80      	pop	{r7, pc}

080224f2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80224f2:	b580      	push	{r7, lr}
 80224f4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224f6:	2029      	movs	r0, #41	; 0x29
 80224f8:	f000 f809 	bl	802250e <ili9341_WriteReg>
}
 80224fc:	bf00      	nop
 80224fe:	bd80      	pop	{r7, pc}

08022500 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8022500:	b580      	push	{r7, lr}
 8022502:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8022504:	2028      	movs	r0, #40	; 0x28
 8022506:	f000 f802 	bl	802250e <ili9341_WriteReg>
}
 802250a:	bf00      	nop
 802250c:	bd80      	pop	{r7, pc}

0802250e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 802250e:	b580      	push	{r7, lr}
 8022510:	b082      	sub	sp, #8
 8022512:	af00      	add	r7, sp, #0
 8022514:	4603      	mov	r3, r0
 8022516:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8022518:	79fb      	ldrb	r3, [r7, #7]
 802251a:	4618      	mov	r0, r3
 802251c:	f000 f98e 	bl	802283c <LCD_IO_WriteReg>
}
 8022520:	bf00      	nop
 8022522:	3708      	adds	r7, #8
 8022524:	46bd      	mov	sp, r7
 8022526:	bd80      	pop	{r7, pc}

08022528 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8022528:	b580      	push	{r7, lr}
 802252a:	b082      	sub	sp, #8
 802252c:	af00      	add	r7, sp, #0
 802252e:	4603      	mov	r3, r0
 8022530:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8022532:	88fb      	ldrh	r3, [r7, #6]
 8022534:	4618      	mov	r0, r3
 8022536:	f000 f95f 	bl	80227f8 <LCD_IO_WriteData>
}
 802253a:	bf00      	nop
 802253c:	3708      	adds	r7, #8
 802253e:	46bd      	mov	sp, r7
 8022540:	bd80      	pop	{r7, pc}

08022542 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8022542:	b580      	push	{r7, lr}
 8022544:	b082      	sub	sp, #8
 8022546:	af00      	add	r7, sp, #0
 8022548:	4603      	mov	r3, r0
 802254a:	460a      	mov	r2, r1
 802254c:	80fb      	strh	r3, [r7, #6]
 802254e:	4613      	mov	r3, r2
 8022550:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8022552:	797a      	ldrb	r2, [r7, #5]
 8022554:	88fb      	ldrh	r3, [r7, #6]
 8022556:	4611      	mov	r1, r2
 8022558:	4618      	mov	r0, r3
 802255a:	f000 f991 	bl	8022880 <LCD_IO_ReadData>
 802255e:	4603      	mov	r3, r0
}
 8022560:	4618      	mov	r0, r3
 8022562:	3708      	adds	r7, #8
 8022564:	46bd      	mov	sp, r7
 8022566:	bd80      	pop	{r7, pc}

08022568 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8022568:	b480      	push	{r7}
 802256a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 802256c:	23f0      	movs	r3, #240	; 0xf0
}
 802256e:	4618      	mov	r0, r3
 8022570:	46bd      	mov	sp, r7
 8022572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022576:	4770      	bx	lr

08022578 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8022578:	b480      	push	{r7}
 802257a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 802257c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8022580:	4618      	mov	r0, r3
 8022582:	46bd      	mov	sp, r7
 8022584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022588:	4770      	bx	lr
	...

0802258c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 802258c:	b580      	push	{r7, lr}
 802258e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8022590:	4819      	ldr	r0, [pc, #100]	; (80225f8 <SPIx_Init+0x6c>)
 8022592:	f006 fb2a 	bl	8028bea <HAL_SPI_GetState>
 8022596:	4603      	mov	r3, r0
 8022598:	2b00      	cmp	r3, #0
 802259a:	d12b      	bne.n	80225f4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 802259c:	4b16      	ldr	r3, [pc, #88]	; (80225f8 <SPIx_Init+0x6c>)
 802259e:	4a17      	ldr	r2, [pc, #92]	; (80225fc <SPIx_Init+0x70>)
 80225a0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80225a2:	4b15      	ldr	r3, [pc, #84]	; (80225f8 <SPIx_Init+0x6c>)
 80225a4:	2218      	movs	r2, #24
 80225a6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80225a8:	4b13      	ldr	r3, [pc, #76]	; (80225f8 <SPIx_Init+0x6c>)
 80225aa:	2200      	movs	r2, #0
 80225ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80225ae:	4b12      	ldr	r3, [pc, #72]	; (80225f8 <SPIx_Init+0x6c>)
 80225b0:	2200      	movs	r2, #0
 80225b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80225b4:	4b10      	ldr	r3, [pc, #64]	; (80225f8 <SPIx_Init+0x6c>)
 80225b6:	2200      	movs	r2, #0
 80225b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80225ba:	4b0f      	ldr	r3, [pc, #60]	; (80225f8 <SPIx_Init+0x6c>)
 80225bc:	2200      	movs	r2, #0
 80225be:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80225c0:	4b0d      	ldr	r3, [pc, #52]	; (80225f8 <SPIx_Init+0x6c>)
 80225c2:	2207      	movs	r2, #7
 80225c4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80225c6:	4b0c      	ldr	r3, [pc, #48]	; (80225f8 <SPIx_Init+0x6c>)
 80225c8:	2200      	movs	r2, #0
 80225ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80225cc:	4b0a      	ldr	r3, [pc, #40]	; (80225f8 <SPIx_Init+0x6c>)
 80225ce:	2200      	movs	r2, #0
 80225d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80225d2:	4b09      	ldr	r3, [pc, #36]	; (80225f8 <SPIx_Init+0x6c>)
 80225d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80225d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80225da:	4b07      	ldr	r3, [pc, #28]	; (80225f8 <SPIx_Init+0x6c>)
 80225dc:	2200      	movs	r2, #0
 80225de:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80225e0:	4b05      	ldr	r3, [pc, #20]	; (80225f8 <SPIx_Init+0x6c>)
 80225e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80225e6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80225e8:	4803      	ldr	r0, [pc, #12]	; (80225f8 <SPIx_Init+0x6c>)
 80225ea:	f000 f853 	bl	8022694 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80225ee:	4802      	ldr	r0, [pc, #8]	; (80225f8 <SPIx_Init+0x6c>)
 80225f0:	f005 fe5b 	bl	80282aa <HAL_SPI_Init>
  } 
}
 80225f4:	bf00      	nop
 80225f6:	bd80      	pop	{r7, pc}
 80225f8:	200008a4 	.word	0x200008a4
 80225fc:	40015000 	.word	0x40015000

08022600 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8022600:	b580      	push	{r7, lr}
 8022602:	b084      	sub	sp, #16
 8022604:	af00      	add	r7, sp, #0
 8022606:	4603      	mov	r3, r0
 8022608:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 802260a:	2300      	movs	r3, #0
 802260c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 802260e:	79fb      	ldrb	r3, [r7, #7]
 8022610:	b29a      	uxth	r2, r3
 8022612:	4b09      	ldr	r3, [pc, #36]	; (8022638 <SPIx_Read+0x38>)
 8022614:	681b      	ldr	r3, [r3, #0]
 8022616:	f107 0108 	add.w	r1, r7, #8
 802261a:	4808      	ldr	r0, [pc, #32]	; (802263c <SPIx_Read+0x3c>)
 802261c:	f006 f832 	bl	8028684 <HAL_SPI_Receive>
 8022620:	4603      	mov	r3, r0
 8022622:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022624:	7bfb      	ldrb	r3, [r7, #15]
 8022626:	2b00      	cmp	r3, #0
 8022628:	d001      	beq.n	802262e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802262a:	f000 f827 	bl	802267c <SPIx_Error>
  }
  
  return readvalue;
 802262e:	68bb      	ldr	r3, [r7, #8]
}
 8022630:	4618      	mov	r0, r3
 8022632:	3710      	adds	r7, #16
 8022634:	46bd      	mov	sp, r7
 8022636:	bd80      	pop	{r7, pc}
 8022638:	20000040 	.word	0x20000040
 802263c:	200008a4 	.word	0x200008a4

08022640 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8022640:	b580      	push	{r7, lr}
 8022642:	b084      	sub	sp, #16
 8022644:	af00      	add	r7, sp, #0
 8022646:	4603      	mov	r3, r0
 8022648:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 802264a:	2300      	movs	r3, #0
 802264c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 802264e:	4b09      	ldr	r3, [pc, #36]	; (8022674 <SPIx_Write+0x34>)
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	1db9      	adds	r1, r7, #6
 8022654:	2201      	movs	r2, #1
 8022656:	4808      	ldr	r0, [pc, #32]	; (8022678 <SPIx_Write+0x38>)
 8022658:	f005 fed8 	bl	802840c <HAL_SPI_Transmit>
 802265c:	4603      	mov	r3, r0
 802265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022660:	7bfb      	ldrb	r3, [r7, #15]
 8022662:	2b00      	cmp	r3, #0
 8022664:	d001      	beq.n	802266a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022666:	f000 f809 	bl	802267c <SPIx_Error>
  }
}
 802266a:	bf00      	nop
 802266c:	3710      	adds	r7, #16
 802266e:	46bd      	mov	sp, r7
 8022670:	bd80      	pop	{r7, pc}
 8022672:	bf00      	nop
 8022674:	20000040 	.word	0x20000040
 8022678:	200008a4 	.word	0x200008a4

0802267c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 802267c:	b580      	push	{r7, lr}
 802267e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8022680:	4803      	ldr	r0, [pc, #12]	; (8022690 <SPIx_Error+0x14>)
 8022682:	f005 fe9b 	bl	80283bc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8022686:	f7ff ff81 	bl	802258c <SPIx_Init>
}
 802268a:	bf00      	nop
 802268c:	bd80      	pop	{r7, pc}
 802268e:	bf00      	nop
 8022690:	200008a4 	.word	0x200008a4

08022694 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8022694:	b580      	push	{r7, lr}
 8022696:	b08a      	sub	sp, #40	; 0x28
 8022698:	af00      	add	r7, sp, #0
 802269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 802269c:	2300      	movs	r3, #0
 802269e:	613b      	str	r3, [r7, #16]
 80226a0:	4b17      	ldr	r3, [pc, #92]	; (8022700 <SPIx_MspInit+0x6c>)
 80226a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226a4:	4a16      	ldr	r2, [pc, #88]	; (8022700 <SPIx_MspInit+0x6c>)
 80226a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226aa:	6453      	str	r3, [r2, #68]	; 0x44
 80226ac:	4b14      	ldr	r3, [pc, #80]	; (8022700 <SPIx_MspInit+0x6c>)
 80226ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80226b4:	613b      	str	r3, [r7, #16]
 80226b6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80226b8:	2300      	movs	r3, #0
 80226ba:	60fb      	str	r3, [r7, #12]
 80226bc:	4b10      	ldr	r3, [pc, #64]	; (8022700 <SPIx_MspInit+0x6c>)
 80226be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c0:	4a0f      	ldr	r2, [pc, #60]	; (8022700 <SPIx_MspInit+0x6c>)
 80226c2:	f043 0320 	orr.w	r3, r3, #32
 80226c6:	6313      	str	r3, [r2, #48]	; 0x30
 80226c8:	4b0d      	ldr	r3, [pc, #52]	; (8022700 <SPIx_MspInit+0x6c>)
 80226ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226cc:	f003 0320 	and.w	r3, r3, #32
 80226d0:	60fb      	str	r3, [r7, #12]
 80226d2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80226d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80226d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80226da:	2302      	movs	r3, #2
 80226dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80226de:	2302      	movs	r3, #2
 80226e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80226e2:	2301      	movs	r3, #1
 80226e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80226e6:	2305      	movs	r3, #5
 80226e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80226ea:	f107 0314 	add.w	r3, r7, #20
 80226ee:	4619      	mov	r1, r3
 80226f0:	4804      	ldr	r0, [pc, #16]	; (8022704 <SPIx_MspInit+0x70>)
 80226f2:	f002 f9fb 	bl	8024aec <HAL_GPIO_Init>
}
 80226f6:	bf00      	nop
 80226f8:	3728      	adds	r7, #40	; 0x28
 80226fa:	46bd      	mov	sp, r7
 80226fc:	bd80      	pop	{r7, pc}
 80226fe:	bf00      	nop
 8022700:	40023800 	.word	0x40023800
 8022704:	40021400 	.word	0x40021400

08022708 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8022708:	b580      	push	{r7, lr}
 802270a:	b088      	sub	sp, #32
 802270c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 802270e:	4b36      	ldr	r3, [pc, #216]	; (80227e8 <LCD_IO_Init+0xe0>)
 8022710:	781b      	ldrb	r3, [r3, #0]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d164      	bne.n	80227e0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8022716:	4b34      	ldr	r3, [pc, #208]	; (80227e8 <LCD_IO_Init+0xe0>)
 8022718:	2201      	movs	r2, #1
 802271a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 802271c:	2300      	movs	r3, #0
 802271e:	60bb      	str	r3, [r7, #8]
 8022720:	4b32      	ldr	r3, [pc, #200]	; (80227ec <LCD_IO_Init+0xe4>)
 8022722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022724:	4a31      	ldr	r2, [pc, #196]	; (80227ec <LCD_IO_Init+0xe4>)
 8022726:	f043 0308 	orr.w	r3, r3, #8
 802272a:	6313      	str	r3, [r2, #48]	; 0x30
 802272c:	4b2f      	ldr	r3, [pc, #188]	; (80227ec <LCD_IO_Init+0xe4>)
 802272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022730:	f003 0308 	and.w	r3, r3, #8
 8022734:	60bb      	str	r3, [r7, #8]
 8022736:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8022738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802273c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 802273e:	2301      	movs	r3, #1
 8022740:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022742:	2300      	movs	r3, #0
 8022744:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022746:	2302      	movs	r3, #2
 8022748:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 802274a:	f107 030c 	add.w	r3, r7, #12
 802274e:	4619      	mov	r1, r3
 8022750:	4827      	ldr	r0, [pc, #156]	; (80227f0 <LCD_IO_Init+0xe8>)
 8022752:	f002 f9cb 	bl	8024aec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8022756:	2300      	movs	r3, #0
 8022758:	607b      	str	r3, [r7, #4]
 802275a:	4b24      	ldr	r3, [pc, #144]	; (80227ec <LCD_IO_Init+0xe4>)
 802275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802275e:	4a23      	ldr	r2, [pc, #140]	; (80227ec <LCD_IO_Init+0xe4>)
 8022760:	f043 0308 	orr.w	r3, r3, #8
 8022764:	6313      	str	r3, [r2, #48]	; 0x30
 8022766:	4b21      	ldr	r3, [pc, #132]	; (80227ec <LCD_IO_Init+0xe4>)
 8022768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802276a:	f003 0308 	and.w	r3, r3, #8
 802276e:	607b      	str	r3, [r7, #4]
 8022770:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8022772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022776:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022778:	2301      	movs	r3, #1
 802277a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 802277c:	2300      	movs	r3, #0
 802277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022780:	2302      	movs	r3, #2
 8022782:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8022784:	f107 030c 	add.w	r3, r7, #12
 8022788:	4619      	mov	r1, r3
 802278a:	4819      	ldr	r0, [pc, #100]	; (80227f0 <LCD_IO_Init+0xe8>)
 802278c:	f002 f9ae 	bl	8024aec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8022790:	2300      	movs	r3, #0
 8022792:	603b      	str	r3, [r7, #0]
 8022794:	4b15      	ldr	r3, [pc, #84]	; (80227ec <LCD_IO_Init+0xe4>)
 8022796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022798:	4a14      	ldr	r2, [pc, #80]	; (80227ec <LCD_IO_Init+0xe4>)
 802279a:	f043 0304 	orr.w	r3, r3, #4
 802279e:	6313      	str	r3, [r2, #48]	; 0x30
 80227a0:	4b12      	ldr	r3, [pc, #72]	; (80227ec <LCD_IO_Init+0xe4>)
 80227a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227a4:	f003 0304 	and.w	r3, r3, #4
 80227a8:	603b      	str	r3, [r7, #0]
 80227aa:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80227ac:	2304      	movs	r3, #4
 80227ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80227b0:	2301      	movs	r3, #1
 80227b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80227b4:	2300      	movs	r3, #0
 80227b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80227b8:	2302      	movs	r3, #2
 80227ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80227bc:	f107 030c 	add.w	r3, r7, #12
 80227c0:	4619      	mov	r1, r3
 80227c2:	480c      	ldr	r0, [pc, #48]	; (80227f4 <LCD_IO_Init+0xec>)
 80227c4:	f002 f992 	bl	8024aec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80227c8:	2200      	movs	r2, #0
 80227ca:	2104      	movs	r1, #4
 80227cc:	4809      	ldr	r0, [pc, #36]	; (80227f4 <LCD_IO_Init+0xec>)
 80227ce:	f002 fc45 	bl	802505c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80227d2:	2201      	movs	r2, #1
 80227d4:	2104      	movs	r1, #4
 80227d6:	4807      	ldr	r0, [pc, #28]	; (80227f4 <LCD_IO_Init+0xec>)
 80227d8:	f002 fc40 	bl	802505c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80227dc:	f7ff fed6 	bl	802258c <SPIx_Init>
  }
}
 80227e0:	bf00      	nop
 80227e2:	3720      	adds	r7, #32
 80227e4:	46bd      	mov	sp, r7
 80227e6:	bd80      	pop	{r7, pc}
 80227e8:	200008fc 	.word	0x200008fc
 80227ec:	40023800 	.word	0x40023800
 80227f0:	40020c00 	.word	0x40020c00
 80227f4:	40020800 	.word	0x40020800

080227f8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80227f8:	b580      	push	{r7, lr}
 80227fa:	b082      	sub	sp, #8
 80227fc:	af00      	add	r7, sp, #0
 80227fe:	4603      	mov	r3, r0
 8022800:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022802:	2201      	movs	r2, #1
 8022804:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022808:	480a      	ldr	r0, [pc, #40]	; (8022834 <LCD_IO_WriteData+0x3c>)
 802280a:	f002 fc27 	bl	802505c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 802280e:	2200      	movs	r2, #0
 8022810:	2104      	movs	r1, #4
 8022812:	4809      	ldr	r0, [pc, #36]	; (8022838 <LCD_IO_WriteData+0x40>)
 8022814:	f002 fc22 	bl	802505c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022818:	88fb      	ldrh	r3, [r7, #6]
 802281a:	4618      	mov	r0, r3
 802281c:	f7ff ff10 	bl	8022640 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022820:	2201      	movs	r2, #1
 8022822:	2104      	movs	r1, #4
 8022824:	4804      	ldr	r0, [pc, #16]	; (8022838 <LCD_IO_WriteData+0x40>)
 8022826:	f002 fc19 	bl	802505c <HAL_GPIO_WritePin>
}
 802282a:	bf00      	nop
 802282c:	3708      	adds	r7, #8
 802282e:	46bd      	mov	sp, r7
 8022830:	bd80      	pop	{r7, pc}
 8022832:	bf00      	nop
 8022834:	40020c00 	.word	0x40020c00
 8022838:	40020800 	.word	0x40020800

0802283c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 802283c:	b580      	push	{r7, lr}
 802283e:	b082      	sub	sp, #8
 8022840:	af00      	add	r7, sp, #0
 8022842:	4603      	mov	r3, r0
 8022844:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022846:	2200      	movs	r2, #0
 8022848:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802284c:	480a      	ldr	r0, [pc, #40]	; (8022878 <LCD_IO_WriteReg+0x3c>)
 802284e:	f002 fc05 	bl	802505c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8022852:	2200      	movs	r2, #0
 8022854:	2104      	movs	r1, #4
 8022856:	4809      	ldr	r0, [pc, #36]	; (802287c <LCD_IO_WriteReg+0x40>)
 8022858:	f002 fc00 	bl	802505c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 802285c:	79fb      	ldrb	r3, [r7, #7]
 802285e:	b29b      	uxth	r3, r3
 8022860:	4618      	mov	r0, r3
 8022862:	f7ff feed 	bl	8022640 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022866:	2201      	movs	r2, #1
 8022868:	2104      	movs	r1, #4
 802286a:	4804      	ldr	r0, [pc, #16]	; (802287c <LCD_IO_WriteReg+0x40>)
 802286c:	f002 fbf6 	bl	802505c <HAL_GPIO_WritePin>
}
 8022870:	bf00      	nop
 8022872:	3708      	adds	r7, #8
 8022874:	46bd      	mov	sp, r7
 8022876:	bd80      	pop	{r7, pc}
 8022878:	40020c00 	.word	0x40020c00
 802287c:	40020800 	.word	0x40020800

08022880 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8022880:	b580      	push	{r7, lr}
 8022882:	b084      	sub	sp, #16
 8022884:	af00      	add	r7, sp, #0
 8022886:	4603      	mov	r3, r0
 8022888:	460a      	mov	r2, r1
 802288a:	80fb      	strh	r3, [r7, #6]
 802288c:	4613      	mov	r3, r2
 802288e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8022890:	2300      	movs	r3, #0
 8022892:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022894:	2200      	movs	r2, #0
 8022896:	2104      	movs	r1, #4
 8022898:	4810      	ldr	r0, [pc, #64]	; (80228dc <LCD_IO_ReadData+0x5c>)
 802289a:	f002 fbdf 	bl	802505c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 802289e:	2200      	movs	r2, #0
 80228a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228a4:	480e      	ldr	r0, [pc, #56]	; (80228e0 <LCD_IO_ReadData+0x60>)
 80228a6:	f002 fbd9 	bl	802505c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80228aa:	88fb      	ldrh	r3, [r7, #6]
 80228ac:	4618      	mov	r0, r3
 80228ae:	f7ff fec7 	bl	8022640 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80228b2:	797b      	ldrb	r3, [r7, #5]
 80228b4:	4618      	mov	r0, r3
 80228b6:	f7ff fea3 	bl	8022600 <SPIx_Read>
 80228ba:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80228bc:	2201      	movs	r2, #1
 80228be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228c2:	4807      	ldr	r0, [pc, #28]	; (80228e0 <LCD_IO_ReadData+0x60>)
 80228c4:	f002 fbca 	bl	802505c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80228c8:	2201      	movs	r2, #1
 80228ca:	2104      	movs	r1, #4
 80228cc:	4803      	ldr	r0, [pc, #12]	; (80228dc <LCD_IO_ReadData+0x5c>)
 80228ce:	f002 fbc5 	bl	802505c <HAL_GPIO_WritePin>
  
  return readvalue;
 80228d2:	68fb      	ldr	r3, [r7, #12]
}
 80228d4:	4618      	mov	r0, r3
 80228d6:	3710      	adds	r7, #16
 80228d8:	46bd      	mov	sp, r7
 80228da:	bd80      	pop	{r7, pc}
 80228dc:	40020800 	.word	0x40020800
 80228e0:	40020c00 	.word	0x40020c00

080228e4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80228e4:	b580      	push	{r7, lr}
 80228e6:	b082      	sub	sp, #8
 80228e8:	af00      	add	r7, sp, #0
 80228ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80228ec:	6878      	ldr	r0, [r7, #4]
 80228ee:	f000 fecd 	bl	802368c <HAL_Delay>
}
 80228f2:	bf00      	nop
 80228f4:	3708      	adds	r7, #8
 80228f6:	46bd      	mov	sp, r7
 80228f8:	bd80      	pop	{r7, pc}
	...

080228fc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80228fc:	b580      	push	{r7, lr}
 80228fe:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022900:	4b2d      	ldr	r3, [pc, #180]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022902:	4a2e      	ldr	r2, [pc, #184]	; (80229bc <BSP_LCD_Init+0xc0>)
 8022904:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8022906:	4b2c      	ldr	r3, [pc, #176]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022908:	2209      	movs	r2, #9
 802290a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 802290c:	4b2a      	ldr	r3, [pc, #168]	; (80229b8 <BSP_LCD_Init+0xbc>)
 802290e:	2201      	movs	r2, #1
 8022910:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8022912:	4b29      	ldr	r3, [pc, #164]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022914:	221d      	movs	r2, #29
 8022916:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022918:	4b27      	ldr	r3, [pc, #156]	; (80229b8 <BSP_LCD_Init+0xbc>)
 802291a:	2203      	movs	r2, #3
 802291c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 802291e:	4b26      	ldr	r3, [pc, #152]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022920:	f240 120d 	movw	r2, #269	; 0x10d
 8022924:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8022926:	4b24      	ldr	r3, [pc, #144]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022928:	f240 1243 	movw	r2, #323	; 0x143
 802292c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 802292e:	4b22      	ldr	r3, [pc, #136]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022930:	f240 1217 	movw	r2, #279	; 0x117
 8022934:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8022936:	4b20      	ldr	r3, [pc, #128]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022938:	f240 1247 	movw	r2, #327	; 0x147
 802293c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 802293e:	4b1e      	ldr	r3, [pc, #120]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022940:	2200      	movs	r2, #0
 8022942:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8022946:	4b1c      	ldr	r3, [pc, #112]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022948:	2200      	movs	r2, #0
 802294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 802294e:	4b1a      	ldr	r3, [pc, #104]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022950:	2200      	movs	r2, #0
 8022952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8022956:	4b1a      	ldr	r3, [pc, #104]	; (80229c0 <BSP_LCD_Init+0xc4>)
 8022958:	2208      	movs	r2, #8
 802295a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 802295c:	4b18      	ldr	r3, [pc, #96]	; (80229c0 <BSP_LCD_Init+0xc4>)
 802295e:	22c0      	movs	r2, #192	; 0xc0
 8022960:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8022962:	4b17      	ldr	r3, [pc, #92]	; (80229c0 <BSP_LCD_Init+0xc4>)
 8022964:	2204      	movs	r2, #4
 8022966:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8022968:	4b15      	ldr	r3, [pc, #84]	; (80229c0 <BSP_LCD_Init+0xc4>)
 802296a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802296e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8022970:	4813      	ldr	r0, [pc, #76]	; (80229c0 <BSP_LCD_Init+0xc4>)
 8022972:	f005 fa49 	bl	8027e08 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8022976:	4b10      	ldr	r3, [pc, #64]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022978:	2200      	movs	r2, #0
 802297a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 802297c:	4b0e      	ldr	r3, [pc, #56]	; (80229b8 <BSP_LCD_Init+0xbc>)
 802297e:	2200      	movs	r2, #0
 8022980:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8022982:	4b0d      	ldr	r3, [pc, #52]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022984:	2200      	movs	r2, #0
 8022986:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8022988:	4b0b      	ldr	r3, [pc, #44]	; (80229b8 <BSP_LCD_Init+0xbc>)
 802298a:	2200      	movs	r2, #0
 802298c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 802298e:	f000 fa83 	bl	8022e98 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8022992:	4809      	ldr	r0, [pc, #36]	; (80229b8 <BSP_LCD_Init+0xbc>)
 8022994:	f004 f95e 	bl	8026c54 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8022998:	4b0a      	ldr	r3, [pc, #40]	; (80229c4 <BSP_LCD_Init+0xc8>)
 802299a:	4a0b      	ldr	r2, [pc, #44]	; (80229c8 <BSP_LCD_Init+0xcc>)
 802299c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 802299e:	4b09      	ldr	r3, [pc, #36]	; (80229c4 <BSP_LCD_Init+0xc8>)
 80229a0:	681b      	ldr	r3, [r3, #0]
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80229a6:	f000 fc65 	bl	8023274 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80229aa:	4808      	ldr	r0, [pc, #32]	; (80229cc <BSP_LCD_Init+0xd0>)
 80229ac:	f000 f920 	bl	8022bf0 <BSP_LCD_SetFont>

  return LCD_OK;
 80229b0:	2300      	movs	r3, #0
}  
 80229b2:	4618      	mov	r0, r3
 80229b4:	bd80      	pop	{r7, pc}
 80229b6:	bf00      	nop
 80229b8:	20000900 	.word	0x20000900
 80229bc:	40016800 	.word	0x40016800
 80229c0:	200009e8 	.word	0x200009e8
 80229c4:	20000a34 	.word	0x20000a34
 80229c8:	20000008 	.word	0x20000008
 80229cc:	20000044 	.word	0x20000044

080229d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80229d0:	b580      	push	{r7, lr}
 80229d2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80229d4:	4b03      	ldr	r3, [pc, #12]	; (80229e4 <BSP_LCD_GetXSize+0x14>)
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229da:	4798      	blx	r3
 80229dc:	4603      	mov	r3, r0
}
 80229de:	4618      	mov	r0, r3
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	20000a34 	.word	0x20000a34

080229e8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80229e8:	b580      	push	{r7, lr}
 80229ea:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80229ec:	4b03      	ldr	r3, [pc, #12]	; (80229fc <BSP_LCD_GetYSize+0x14>)
 80229ee:	681b      	ldr	r3, [r3, #0]
 80229f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229f2:	4798      	blx	r3
 80229f4:	4603      	mov	r3, r0
}
 80229f6:	4618      	mov	r0, r3
 80229f8:	bd80      	pop	{r7, pc}
 80229fa:	bf00      	nop
 80229fc:	20000a34 	.word	0x20000a34

08022a00 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022a00:	b580      	push	{r7, lr}
 8022a02:	b090      	sub	sp, #64	; 0x40
 8022a04:	af00      	add	r7, sp, #0
 8022a06:	4603      	mov	r3, r0
 8022a08:	6039      	str	r1, [r7, #0]
 8022a0a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022a0c:	2300      	movs	r3, #0
 8022a0e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022a10:	f7ff ffde 	bl	80229d0 <BSP_LCD_GetXSize>
 8022a14:	4603      	mov	r3, r0
 8022a16:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022a18:	2300      	movs	r3, #0
 8022a1a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022a1c:	f7ff ffe4 	bl	80229e8 <BSP_LCD_GetYSize>
 8022a20:	4603      	mov	r3, r0
 8022a22:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022a24:	2300      	movs	r3, #0
 8022a26:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022a28:	683b      	ldr	r3, [r7, #0]
 8022a2a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022a2c:	23ff      	movs	r3, #255	; 0xff
 8022a2e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022a30:	2300      	movs	r3, #0
 8022a32:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022a34:	2300      	movs	r3, #0
 8022a36:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8022a3a:	2300      	movs	r3, #0
 8022a3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022a40:	2300      	movs	r3, #0
 8022a42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022a46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8022a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022a4c:	2307      	movs	r3, #7
 8022a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022a50:	f7ff ffbe 	bl	80229d0 <BSP_LCD_GetXSize>
 8022a54:	4603      	mov	r3, r0
 8022a56:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8022a58:	f7ff ffc6 	bl	80229e8 <BSP_LCD_GetYSize>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022a60:	88fa      	ldrh	r2, [r7, #6]
 8022a62:	f107 030c 	add.w	r3, r7, #12
 8022a66:	4619      	mov	r1, r3
 8022a68:	4814      	ldr	r0, [pc, #80]	; (8022abc <BSP_LCD_LayerDefaultInit+0xbc>)
 8022a6a:	f004 fa85 	bl	8026f78 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022a6e:	88fa      	ldrh	r2, [r7, #6]
 8022a70:	4913      	ldr	r1, [pc, #76]	; (8022ac0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a72:	4613      	mov	r3, r2
 8022a74:	005b      	lsls	r3, r3, #1
 8022a76:	4413      	add	r3, r2
 8022a78:	009b      	lsls	r3, r3, #2
 8022a7a:	440b      	add	r3, r1
 8022a7c:	3304      	adds	r3, #4
 8022a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8022a82:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022a84:	88fa      	ldrh	r2, [r7, #6]
 8022a86:	490e      	ldr	r1, [pc, #56]	; (8022ac0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a88:	4613      	mov	r3, r2
 8022a8a:	005b      	lsls	r3, r3, #1
 8022a8c:	4413      	add	r3, r2
 8022a8e:	009b      	lsls	r3, r3, #2
 8022a90:	440b      	add	r3, r1
 8022a92:	3308      	adds	r3, #8
 8022a94:	4a0b      	ldr	r2, [pc, #44]	; (8022ac4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8022a96:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8022a98:	88fa      	ldrh	r2, [r7, #6]
 8022a9a:	4909      	ldr	r1, [pc, #36]	; (8022ac0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a9c:	4613      	mov	r3, r2
 8022a9e:	005b      	lsls	r3, r3, #1
 8022aa0:	4413      	add	r3, r2
 8022aa2:	009b      	lsls	r3, r3, #2
 8022aa4:	440b      	add	r3, r1
 8022aa6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8022aaa:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022aac:	4803      	ldr	r0, [pc, #12]	; (8022abc <BSP_LCD_LayerDefaultInit+0xbc>)
 8022aae:	f004 fb1f 	bl	80270f0 <HAL_LTDC_EnableDither>
}
 8022ab2:	bf00      	nop
 8022ab4:	3740      	adds	r7, #64	; 0x40
 8022ab6:	46bd      	mov	sp, r7
 8022ab8:	bd80      	pop	{r7, pc}
 8022aba:	bf00      	nop
 8022abc:	20000900 	.word	0x20000900
 8022ac0:	20000a1c 	.word	0x20000a1c
 8022ac4:	20000044 	.word	0x20000044

08022ac8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8022ac8:	b480      	push	{r7}
 8022aca:	b083      	sub	sp, #12
 8022acc:	af00      	add	r7, sp, #0
 8022ace:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022ad0:	4a04      	ldr	r2, [pc, #16]	; (8022ae4 <BSP_LCD_SelectLayer+0x1c>)
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	6013      	str	r3, [r2, #0]
}
 8022ad6:	bf00      	nop
 8022ad8:	370c      	adds	r7, #12
 8022ada:	46bd      	mov	sp, r7
 8022adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae0:	4770      	bx	lr
 8022ae2:	bf00      	nop
 8022ae4:	20000a18 	.word	0x20000a18

08022ae8 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022ae8:	b480      	push	{r7}
 8022aea:	b083      	sub	sp, #12
 8022aec:	af00      	add	r7, sp, #0
 8022aee:	6078      	str	r0, [r7, #4]
 8022af0:	460b      	mov	r3, r1
 8022af2:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022af4:	78fb      	ldrb	r3, [r7, #3]
 8022af6:	2b01      	cmp	r3, #1
 8022af8:	d112      	bne.n	8022b20 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022afa:	4b19      	ldr	r3, [pc, #100]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	461a      	mov	r2, r3
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	01db      	lsls	r3, r3, #7
 8022b04:	4413      	add	r3, r2
 8022b06:	3384      	adds	r3, #132	; 0x84
 8022b08:	681b      	ldr	r3, [r3, #0]
 8022b0a:	4a15      	ldr	r2, [pc, #84]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022b0c:	6812      	ldr	r2, [r2, #0]
 8022b0e:	4611      	mov	r1, r2
 8022b10:	687a      	ldr	r2, [r7, #4]
 8022b12:	01d2      	lsls	r2, r2, #7
 8022b14:	440a      	add	r2, r1
 8022b16:	3284      	adds	r2, #132	; 0x84
 8022b18:	f043 0301 	orr.w	r3, r3, #1
 8022b1c:	6013      	str	r3, [r2, #0]
 8022b1e:	e011      	b.n	8022b44 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022b20:	4b0f      	ldr	r3, [pc, #60]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022b22:	681b      	ldr	r3, [r3, #0]
 8022b24:	461a      	mov	r2, r3
 8022b26:	687b      	ldr	r3, [r7, #4]
 8022b28:	01db      	lsls	r3, r3, #7
 8022b2a:	4413      	add	r3, r2
 8022b2c:	3384      	adds	r3, #132	; 0x84
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	4a0b      	ldr	r2, [pc, #44]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022b32:	6812      	ldr	r2, [r2, #0]
 8022b34:	4611      	mov	r1, r2
 8022b36:	687a      	ldr	r2, [r7, #4]
 8022b38:	01d2      	lsls	r2, r2, #7
 8022b3a:	440a      	add	r2, r1
 8022b3c:	3284      	adds	r2, #132	; 0x84
 8022b3e:	f023 0301 	bic.w	r3, r3, #1
 8022b42:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022b44:	4b06      	ldr	r3, [pc, #24]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022b4a:	4b05      	ldr	r3, [pc, #20]	; (8022b60 <BSP_LCD_SetLayerVisible+0x78>)
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	f042 0201 	orr.w	r2, r2, #1
 8022b52:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022b54:	bf00      	nop
 8022b56:	370c      	adds	r7, #12
 8022b58:	46bd      	mov	sp, r7
 8022b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b5e:	4770      	bx	lr
 8022b60:	20000900 	.word	0x20000900

08022b64 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022b64:	b580      	push	{r7, lr}
 8022b66:	b082      	sub	sp, #8
 8022b68:	af00      	add	r7, sp, #0
 8022b6a:	6078      	str	r0, [r7, #4]
 8022b6c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022b6e:	687a      	ldr	r2, [r7, #4]
 8022b70:	6839      	ldr	r1, [r7, #0]
 8022b72:	4805      	ldr	r0, [pc, #20]	; (8022b88 <BSP_LCD_SetColorKeying+0x24>)
 8022b74:	f004 fa3e 	bl	8026ff4 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8022b78:	6879      	ldr	r1, [r7, #4]
 8022b7a:	4803      	ldr	r0, [pc, #12]	; (8022b88 <BSP_LCD_SetColorKeying+0x24>)
 8022b7c:	f004 fa7e 	bl	802707c <HAL_LTDC_EnableColorKeying>
}
 8022b80:	bf00      	nop
 8022b82:	3708      	adds	r7, #8
 8022b84:	46bd      	mov	sp, r7
 8022b86:	bd80      	pop	{r7, pc}
 8022b88:	20000900 	.word	0x20000900

08022b8c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022b8c:	b480      	push	{r7}
 8022b8e:	b083      	sub	sp, #12
 8022b90:	af00      	add	r7, sp, #0
 8022b92:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022b94:	4b07      	ldr	r3, [pc, #28]	; (8022bb4 <BSP_LCD_SetTextColor+0x28>)
 8022b96:	681a      	ldr	r2, [r3, #0]
 8022b98:	4907      	ldr	r1, [pc, #28]	; (8022bb8 <BSP_LCD_SetTextColor+0x2c>)
 8022b9a:	4613      	mov	r3, r2
 8022b9c:	005b      	lsls	r3, r3, #1
 8022b9e:	4413      	add	r3, r2
 8022ba0:	009b      	lsls	r3, r3, #2
 8022ba2:	440b      	add	r3, r1
 8022ba4:	687a      	ldr	r2, [r7, #4]
 8022ba6:	601a      	str	r2, [r3, #0]
}
 8022ba8:	bf00      	nop
 8022baa:	370c      	adds	r7, #12
 8022bac:	46bd      	mov	sp, r7
 8022bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bb2:	4770      	bx	lr
 8022bb4:	20000a18 	.word	0x20000a18
 8022bb8:	20000a1c 	.word	0x20000a1c

08022bbc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022bbc:	b480      	push	{r7}
 8022bbe:	b083      	sub	sp, #12
 8022bc0:	af00      	add	r7, sp, #0
 8022bc2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022bc4:	4b08      	ldr	r3, [pc, #32]	; (8022be8 <BSP_LCD_SetBackColor+0x2c>)
 8022bc6:	681a      	ldr	r2, [r3, #0]
 8022bc8:	4908      	ldr	r1, [pc, #32]	; (8022bec <BSP_LCD_SetBackColor+0x30>)
 8022bca:	4613      	mov	r3, r2
 8022bcc:	005b      	lsls	r3, r3, #1
 8022bce:	4413      	add	r3, r2
 8022bd0:	009b      	lsls	r3, r3, #2
 8022bd2:	440b      	add	r3, r1
 8022bd4:	3304      	adds	r3, #4
 8022bd6:	687a      	ldr	r2, [r7, #4]
 8022bd8:	601a      	str	r2, [r3, #0]
}
 8022bda:	bf00      	nop
 8022bdc:	370c      	adds	r7, #12
 8022bde:	46bd      	mov	sp, r7
 8022be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022be4:	4770      	bx	lr
 8022be6:	bf00      	nop
 8022be8:	20000a18 	.word	0x20000a18
 8022bec:	20000a1c 	.word	0x20000a1c

08022bf0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022bf0:	b480      	push	{r7}
 8022bf2:	b083      	sub	sp, #12
 8022bf4:	af00      	add	r7, sp, #0
 8022bf6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022bf8:	4b08      	ldr	r3, [pc, #32]	; (8022c1c <BSP_LCD_SetFont+0x2c>)
 8022bfa:	681a      	ldr	r2, [r3, #0]
 8022bfc:	4908      	ldr	r1, [pc, #32]	; (8022c20 <BSP_LCD_SetFont+0x30>)
 8022bfe:	4613      	mov	r3, r2
 8022c00:	005b      	lsls	r3, r3, #1
 8022c02:	4413      	add	r3, r2
 8022c04:	009b      	lsls	r3, r3, #2
 8022c06:	440b      	add	r3, r1
 8022c08:	3308      	adds	r3, #8
 8022c0a:	687a      	ldr	r2, [r7, #4]
 8022c0c:	601a      	str	r2, [r3, #0]
}
 8022c0e:	bf00      	nop
 8022c10:	370c      	adds	r7, #12
 8022c12:	46bd      	mov	sp, r7
 8022c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c18:	4770      	bx	lr
 8022c1a:	bf00      	nop
 8022c1c:	20000a18 	.word	0x20000a18
 8022c20:	20000a1c 	.word	0x20000a1c

08022c24 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c26:	b085      	sub	sp, #20
 8022c28:	af02      	add	r7, sp, #8
 8022c2a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022c2c:	4b0f      	ldr	r3, [pc, #60]	; (8022c6c <BSP_LCD_Clear+0x48>)
 8022c2e:	681c      	ldr	r4, [r3, #0]
 8022c30:	4b0e      	ldr	r3, [pc, #56]	; (8022c6c <BSP_LCD_Clear+0x48>)
 8022c32:	681b      	ldr	r3, [r3, #0]
 8022c34:	4a0e      	ldr	r2, [pc, #56]	; (8022c70 <BSP_LCD_Clear+0x4c>)
 8022c36:	2134      	movs	r1, #52	; 0x34
 8022c38:	fb01 f303 	mul.w	r3, r1, r3
 8022c3c:	4413      	add	r3, r2
 8022c3e:	335c      	adds	r3, #92	; 0x5c
 8022c40:	681b      	ldr	r3, [r3, #0]
 8022c42:	461e      	mov	r6, r3
 8022c44:	f7ff fec4 	bl	80229d0 <BSP_LCD_GetXSize>
 8022c48:	4605      	mov	r5, r0
 8022c4a:	f7ff fecd 	bl	80229e8 <BSP_LCD_GetYSize>
 8022c4e:	4602      	mov	r2, r0
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	9301      	str	r3, [sp, #4]
 8022c54:	2300      	movs	r3, #0
 8022c56:	9300      	str	r3, [sp, #0]
 8022c58:	4613      	mov	r3, r2
 8022c5a:	462a      	mov	r2, r5
 8022c5c:	4631      	mov	r1, r6
 8022c5e:	4620      	mov	r0, r4
 8022c60:	f000 fad0 	bl	8023204 <FillBuffer>
}
 8022c64:	bf00      	nop
 8022c66:	370c      	adds	r7, #12
 8022c68:	46bd      	mov	sp, r7
 8022c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c6c:	20000a18 	.word	0x20000a18
 8022c70:	20000900 	.word	0x20000900

08022c74 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022c74:	b590      	push	{r4, r7, lr}
 8022c76:	b083      	sub	sp, #12
 8022c78:	af00      	add	r7, sp, #0
 8022c7a:	4603      	mov	r3, r0
 8022c7c:	80fb      	strh	r3, [r7, #6]
 8022c7e:	460b      	mov	r3, r1
 8022c80:	80bb      	strh	r3, [r7, #4]
 8022c82:	4613      	mov	r3, r2
 8022c84:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022c86:	4b1b      	ldr	r3, [pc, #108]	; (8022cf4 <BSP_LCD_DisplayChar+0x80>)
 8022c88:	681a      	ldr	r2, [r3, #0]
 8022c8a:	491b      	ldr	r1, [pc, #108]	; (8022cf8 <BSP_LCD_DisplayChar+0x84>)
 8022c8c:	4613      	mov	r3, r2
 8022c8e:	005b      	lsls	r3, r3, #1
 8022c90:	4413      	add	r3, r2
 8022c92:	009b      	lsls	r3, r3, #2
 8022c94:	440b      	add	r3, r1
 8022c96:	3308      	adds	r3, #8
 8022c98:	681b      	ldr	r3, [r3, #0]
 8022c9a:	6819      	ldr	r1, [r3, #0]
 8022c9c:	78fb      	ldrb	r3, [r7, #3]
 8022c9e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022ca2:	4b14      	ldr	r3, [pc, #80]	; (8022cf4 <BSP_LCD_DisplayChar+0x80>)
 8022ca4:	681a      	ldr	r2, [r3, #0]
 8022ca6:	4c14      	ldr	r4, [pc, #80]	; (8022cf8 <BSP_LCD_DisplayChar+0x84>)
 8022ca8:	4613      	mov	r3, r2
 8022caa:	005b      	lsls	r3, r3, #1
 8022cac:	4413      	add	r3, r2
 8022cae:	009b      	lsls	r3, r3, #2
 8022cb0:	4423      	add	r3, r4
 8022cb2:	3308      	adds	r3, #8
 8022cb4:	681b      	ldr	r3, [r3, #0]
 8022cb6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cb8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022cbc:	4b0d      	ldr	r3, [pc, #52]	; (8022cf4 <BSP_LCD_DisplayChar+0x80>)
 8022cbe:	681a      	ldr	r2, [r3, #0]
 8022cc0:	4c0d      	ldr	r4, [pc, #52]	; (8022cf8 <BSP_LCD_DisplayChar+0x84>)
 8022cc2:	4613      	mov	r3, r2
 8022cc4:	005b      	lsls	r3, r3, #1
 8022cc6:	4413      	add	r3, r2
 8022cc8:	009b      	lsls	r3, r3, #2
 8022cca:	4423      	add	r3, r4
 8022ccc:	3308      	adds	r3, #8
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	889b      	ldrh	r3, [r3, #4]
 8022cd2:	3307      	adds	r3, #7
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	da00      	bge.n	8022cda <BSP_LCD_DisplayChar+0x66>
 8022cd8:	3307      	adds	r3, #7
 8022cda:	10db      	asrs	r3, r3, #3
 8022cdc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022ce0:	18ca      	adds	r2, r1, r3
 8022ce2:	88b9      	ldrh	r1, [r7, #4]
 8022ce4:	88fb      	ldrh	r3, [r7, #6]
 8022ce6:	4618      	mov	r0, r3
 8022ce8:	f000 f9d2 	bl	8023090 <DrawChar>
}
 8022cec:	bf00      	nop
 8022cee:	370c      	adds	r7, #12
 8022cf0:	46bd      	mov	sp, r7
 8022cf2:	bd90      	pop	{r4, r7, pc}
 8022cf4:	20000a18 	.word	0x20000a18
 8022cf8:	20000a1c 	.word	0x20000a1c

08022cfc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022cfc:	b5b0      	push	{r4, r5, r7, lr}
 8022cfe:	b088      	sub	sp, #32
 8022d00:	af00      	add	r7, sp, #0
 8022d02:	60ba      	str	r2, [r7, #8]
 8022d04:	461a      	mov	r2, r3
 8022d06:	4603      	mov	r3, r0
 8022d08:	81fb      	strh	r3, [r7, #14]
 8022d0a:	460b      	mov	r3, r1
 8022d0c:	81bb      	strh	r3, [r7, #12]
 8022d0e:	4613      	mov	r3, r2
 8022d10:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022d12:	2301      	movs	r3, #1
 8022d14:	83fb      	strh	r3, [r7, #30]
 8022d16:	2300      	movs	r3, #0
 8022d18:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	61bb      	str	r3, [r7, #24]
 8022d1e:	2300      	movs	r3, #0
 8022d20:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022d22:	68bb      	ldr	r3, [r7, #8]
 8022d24:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022d26:	e002      	b.n	8022d2e <BSP_LCD_DisplayStringAt+0x32>
 8022d28:	69bb      	ldr	r3, [r7, #24]
 8022d2a:	3301      	adds	r3, #1
 8022d2c:	61bb      	str	r3, [r7, #24]
 8022d2e:	697b      	ldr	r3, [r7, #20]
 8022d30:	1c5a      	adds	r2, r3, #1
 8022d32:	617a      	str	r2, [r7, #20]
 8022d34:	781b      	ldrb	r3, [r3, #0]
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d1f6      	bne.n	8022d28 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022d3a:	f7ff fe49 	bl	80229d0 <BSP_LCD_GetXSize>
 8022d3e:	4601      	mov	r1, r0
 8022d40:	4b4b      	ldr	r3, [pc, #300]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022d42:	681a      	ldr	r2, [r3, #0]
 8022d44:	484b      	ldr	r0, [pc, #300]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022d46:	4613      	mov	r3, r2
 8022d48:	005b      	lsls	r3, r3, #1
 8022d4a:	4413      	add	r3, r2
 8022d4c:	009b      	lsls	r3, r3, #2
 8022d4e:	4403      	add	r3, r0
 8022d50:	3308      	adds	r3, #8
 8022d52:	681b      	ldr	r3, [r3, #0]
 8022d54:	889b      	ldrh	r3, [r3, #4]
 8022d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8022d5a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022d5c:	79fb      	ldrb	r3, [r7, #7]
 8022d5e:	2b03      	cmp	r3, #3
 8022d60:	d01c      	beq.n	8022d9c <BSP_LCD_DisplayStringAt+0xa0>
 8022d62:	2b03      	cmp	r3, #3
 8022d64:	dc33      	bgt.n	8022dce <BSP_LCD_DisplayStringAt+0xd2>
 8022d66:	2b01      	cmp	r3, #1
 8022d68:	d002      	beq.n	8022d70 <BSP_LCD_DisplayStringAt+0x74>
 8022d6a:	2b02      	cmp	r3, #2
 8022d6c:	d019      	beq.n	8022da2 <BSP_LCD_DisplayStringAt+0xa6>
 8022d6e:	e02e      	b.n	8022dce <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022d70:	693a      	ldr	r2, [r7, #16]
 8022d72:	69bb      	ldr	r3, [r7, #24]
 8022d74:	1ad1      	subs	r1, r2, r3
 8022d76:	4b3e      	ldr	r3, [pc, #248]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022d78:	681a      	ldr	r2, [r3, #0]
 8022d7a:	483e      	ldr	r0, [pc, #248]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022d7c:	4613      	mov	r3, r2
 8022d7e:	005b      	lsls	r3, r3, #1
 8022d80:	4413      	add	r3, r2
 8022d82:	009b      	lsls	r3, r3, #2
 8022d84:	4403      	add	r3, r0
 8022d86:	3308      	adds	r3, #8
 8022d88:	681b      	ldr	r3, [r3, #0]
 8022d8a:	889b      	ldrh	r3, [r3, #4]
 8022d8c:	fb01 f303 	mul.w	r3, r1, r3
 8022d90:	085b      	lsrs	r3, r3, #1
 8022d92:	b29a      	uxth	r2, r3
 8022d94:	89fb      	ldrh	r3, [r7, #14]
 8022d96:	4413      	add	r3, r2
 8022d98:	83fb      	strh	r3, [r7, #30]
      break;
 8022d9a:	e01b      	b.n	8022dd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022d9c:	89fb      	ldrh	r3, [r7, #14]
 8022d9e:	83fb      	strh	r3, [r7, #30]
      break;
 8022da0:	e018      	b.n	8022dd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022da2:	693a      	ldr	r2, [r7, #16]
 8022da4:	69bb      	ldr	r3, [r7, #24]
 8022da6:	1ad3      	subs	r3, r2, r3
 8022da8:	b299      	uxth	r1, r3
 8022daa:	4b31      	ldr	r3, [pc, #196]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022dac:	681a      	ldr	r2, [r3, #0]
 8022dae:	4831      	ldr	r0, [pc, #196]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022db0:	4613      	mov	r3, r2
 8022db2:	005b      	lsls	r3, r3, #1
 8022db4:	4413      	add	r3, r2
 8022db6:	009b      	lsls	r3, r3, #2
 8022db8:	4403      	add	r3, r0
 8022dba:	3308      	adds	r3, #8
 8022dbc:	681b      	ldr	r3, [r3, #0]
 8022dbe:	889b      	ldrh	r3, [r3, #4]
 8022dc0:	fb11 f303 	smulbb	r3, r1, r3
 8022dc4:	b29a      	uxth	r2, r3
 8022dc6:	89fb      	ldrh	r3, [r7, #14]
 8022dc8:	4413      	add	r3, r2
 8022dca:	83fb      	strh	r3, [r7, #30]
      break;
 8022dcc:	e002      	b.n	8022dd4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022dce:	89fb      	ldrh	r3, [r7, #14]
 8022dd0:	83fb      	strh	r3, [r7, #30]
      break;
 8022dd2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022dd4:	e01a      	b.n	8022e0c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022dd6:	68bb      	ldr	r3, [r7, #8]
 8022dd8:	781a      	ldrb	r2, [r3, #0]
 8022dda:	89b9      	ldrh	r1, [r7, #12]
 8022ddc:	8bfb      	ldrh	r3, [r7, #30]
 8022dde:	4618      	mov	r0, r3
 8022de0:	f7ff ff48 	bl	8022c74 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022de4:	4b22      	ldr	r3, [pc, #136]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022de6:	681a      	ldr	r2, [r3, #0]
 8022de8:	4922      	ldr	r1, [pc, #136]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022dea:	4613      	mov	r3, r2
 8022dec:	005b      	lsls	r3, r3, #1
 8022dee:	4413      	add	r3, r2
 8022df0:	009b      	lsls	r3, r3, #2
 8022df2:	440b      	add	r3, r1
 8022df4:	3308      	adds	r3, #8
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	889a      	ldrh	r2, [r3, #4]
 8022dfa:	8bfb      	ldrh	r3, [r7, #30]
 8022dfc:	4413      	add	r3, r2
 8022dfe:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022e00:	68bb      	ldr	r3, [r7, #8]
 8022e02:	3301      	adds	r3, #1
 8022e04:	60bb      	str	r3, [r7, #8]
    i++;
 8022e06:	8bbb      	ldrh	r3, [r7, #28]
 8022e08:	3301      	adds	r3, #1
 8022e0a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022e0c:	68bb      	ldr	r3, [r7, #8]
 8022e0e:	781b      	ldrb	r3, [r3, #0]
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	bf14      	ite	ne
 8022e14:	2301      	movne	r3, #1
 8022e16:	2300      	moveq	r3, #0
 8022e18:	b2dc      	uxtb	r4, r3
 8022e1a:	f7ff fdd9 	bl	80229d0 <BSP_LCD_GetXSize>
 8022e1e:	8bb9      	ldrh	r1, [r7, #28]
 8022e20:	4b13      	ldr	r3, [pc, #76]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022e22:	681a      	ldr	r2, [r3, #0]
 8022e24:	4d13      	ldr	r5, [pc, #76]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022e26:	4613      	mov	r3, r2
 8022e28:	005b      	lsls	r3, r3, #1
 8022e2a:	4413      	add	r3, r2
 8022e2c:	009b      	lsls	r3, r3, #2
 8022e2e:	442b      	add	r3, r5
 8022e30:	3308      	adds	r3, #8
 8022e32:	681b      	ldr	r3, [r3, #0]
 8022e34:	889b      	ldrh	r3, [r3, #4]
 8022e36:	fb01 f303 	mul.w	r3, r1, r3
 8022e3a:	1ac3      	subs	r3, r0, r3
 8022e3c:	b299      	uxth	r1, r3
 8022e3e:	4b0c      	ldr	r3, [pc, #48]	; (8022e70 <BSP_LCD_DisplayStringAt+0x174>)
 8022e40:	681a      	ldr	r2, [r3, #0]
 8022e42:	480c      	ldr	r0, [pc, #48]	; (8022e74 <BSP_LCD_DisplayStringAt+0x178>)
 8022e44:	4613      	mov	r3, r2
 8022e46:	005b      	lsls	r3, r3, #1
 8022e48:	4413      	add	r3, r2
 8022e4a:	009b      	lsls	r3, r3, #2
 8022e4c:	4403      	add	r3, r0
 8022e4e:	3308      	adds	r3, #8
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	889b      	ldrh	r3, [r3, #4]
 8022e54:	4299      	cmp	r1, r3
 8022e56:	bf2c      	ite	cs
 8022e58:	2301      	movcs	r3, #1
 8022e5a:	2300      	movcc	r3, #0
 8022e5c:	b2db      	uxtb	r3, r3
 8022e5e:	4023      	ands	r3, r4
 8022e60:	b2db      	uxtb	r3, r3
 8022e62:	2b00      	cmp	r3, #0
 8022e64:	d1b7      	bne.n	8022dd6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022e66:	bf00      	nop
 8022e68:	bf00      	nop
 8022e6a:	3720      	adds	r7, #32
 8022e6c:	46bd      	mov	sp, r7
 8022e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8022e70:	20000a18 	.word	0x20000a18
 8022e74:	20000a1c 	.word	0x20000a1c

08022e78 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022e78:	b580      	push	{r7, lr}
 8022e7a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022e7c:	4b05      	ldr	r3, [pc, #20]	; (8022e94 <BSP_LCD_DisplayOn+0x1c>)
 8022e7e:	681b      	ldr	r3, [r3, #0]
 8022e80:	689b      	ldr	r3, [r3, #8]
 8022e82:	2b00      	cmp	r3, #0
 8022e84:	d003      	beq.n	8022e8e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022e86:	4b03      	ldr	r3, [pc, #12]	; (8022e94 <BSP_LCD_DisplayOn+0x1c>)
 8022e88:	681b      	ldr	r3, [r3, #0]
 8022e8a:	689b      	ldr	r3, [r3, #8]
 8022e8c:	4798      	blx	r3
  }
}
 8022e8e:	bf00      	nop
 8022e90:	bd80      	pop	{r7, pc}
 8022e92:	bf00      	nop
 8022e94:	20000a34 	.word	0x20000a34

08022e98 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022e98:	b580      	push	{r7, lr}
 8022e9a:	b08e      	sub	sp, #56	; 0x38
 8022e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022e9e:	2300      	movs	r3, #0
 8022ea0:	623b      	str	r3, [r7, #32]
 8022ea2:	4b61      	ldr	r3, [pc, #388]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022ea6:	4a60      	ldr	r2, [pc, #384]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022eac:	6453      	str	r3, [r2, #68]	; 0x44
 8022eae:	4b5e      	ldr	r3, [pc, #376]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022eb6:	623b      	str	r3, [r7, #32]
 8022eb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022eba:	2300      	movs	r3, #0
 8022ebc:	61fb      	str	r3, [r7, #28]
 8022ebe:	4b5a      	ldr	r3, [pc, #360]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ec2:	4a59      	ldr	r2, [pc, #356]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ec4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8022eca:	4b57      	ldr	r3, [pc, #348]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022ed2:	61fb      	str	r3, [r7, #28]
 8022ed4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022ed6:	2300      	movs	r3, #0
 8022ed8:	61bb      	str	r3, [r7, #24]
 8022eda:	4b53      	ldr	r3, [pc, #332]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ede:	4a52      	ldr	r2, [pc, #328]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ee0:	f043 0301 	orr.w	r3, r3, #1
 8022ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8022ee6:	4b50      	ldr	r3, [pc, #320]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eea:	f003 0301 	and.w	r3, r3, #1
 8022eee:	61bb      	str	r3, [r7, #24]
 8022ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	617b      	str	r3, [r7, #20]
 8022ef6:	4b4c      	ldr	r3, [pc, #304]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022efa:	4a4b      	ldr	r2, [pc, #300]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022efc:	f043 0302 	orr.w	r3, r3, #2
 8022f00:	6313      	str	r3, [r2, #48]	; 0x30
 8022f02:	4b49      	ldr	r3, [pc, #292]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f06:	f003 0302 	and.w	r3, r3, #2
 8022f0a:	617b      	str	r3, [r7, #20]
 8022f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022f0e:	2300      	movs	r3, #0
 8022f10:	613b      	str	r3, [r7, #16]
 8022f12:	4b45      	ldr	r3, [pc, #276]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f16:	4a44      	ldr	r2, [pc, #272]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f18:	f043 0304 	orr.w	r3, r3, #4
 8022f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f1e:	4b42      	ldr	r3, [pc, #264]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f22:	f003 0304 	and.w	r3, r3, #4
 8022f26:	613b      	str	r3, [r7, #16]
 8022f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022f2a:	2300      	movs	r3, #0
 8022f2c:	60fb      	str	r3, [r7, #12]
 8022f2e:	4b3e      	ldr	r3, [pc, #248]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f32:	4a3d      	ldr	r2, [pc, #244]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f34:	f043 0308 	orr.w	r3, r3, #8
 8022f38:	6313      	str	r3, [r2, #48]	; 0x30
 8022f3a:	4b3b      	ldr	r3, [pc, #236]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f3e:	f003 0308 	and.w	r3, r3, #8
 8022f42:	60fb      	str	r3, [r7, #12]
 8022f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022f46:	2300      	movs	r3, #0
 8022f48:	60bb      	str	r3, [r7, #8]
 8022f4a:	4b37      	ldr	r3, [pc, #220]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f4e:	4a36      	ldr	r2, [pc, #216]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f50:	f043 0320 	orr.w	r3, r3, #32
 8022f54:	6313      	str	r3, [r2, #48]	; 0x30
 8022f56:	4b34      	ldr	r3, [pc, #208]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f5a:	f003 0320 	and.w	r3, r3, #32
 8022f5e:	60bb      	str	r3, [r7, #8]
 8022f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022f62:	2300      	movs	r3, #0
 8022f64:	607b      	str	r3, [r7, #4]
 8022f66:	4b30      	ldr	r3, [pc, #192]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f6a:	4a2f      	ldr	r2, [pc, #188]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f70:	6313      	str	r3, [r2, #48]	; 0x30
 8022f72:	4b2d      	ldr	r3, [pc, #180]	; (8023028 <BSP_LCD_MspInit+0x190>)
 8022f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f7a:	607b      	str	r3, [r7, #4]
 8022f7c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022f7e:	f641 0358 	movw	r3, #6232	; 0x1858
 8022f82:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022f84:	2302      	movs	r3, #2
 8022f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022f88:	2300      	movs	r3, #0
 8022f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022f8c:	2302      	movs	r3, #2
 8022f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022f90:	230e      	movs	r3, #14
 8022f92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f98:	4619      	mov	r1, r3
 8022f9a:	4824      	ldr	r0, [pc, #144]	; (802302c <BSP_LCD_MspInit+0x194>)
 8022f9c:	f001 fda6 	bl	8024aec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022fa0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022fa4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022faa:	4619      	mov	r1, r3
 8022fac:	4820      	ldr	r0, [pc, #128]	; (8023030 <BSP_LCD_MspInit+0x198>)
 8022fae:	f001 fd9d 	bl	8024aec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022fb2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022fb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fbc:	4619      	mov	r1, r3
 8022fbe:	481d      	ldr	r0, [pc, #116]	; (8023034 <BSP_LCD_MspInit+0x19c>)
 8022fc0:	f001 fd94 	bl	8024aec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022fc4:	2348      	movs	r3, #72	; 0x48
 8022fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fcc:	4619      	mov	r1, r3
 8022fce:	481a      	ldr	r0, [pc, #104]	; (8023038 <BSP_LCD_MspInit+0x1a0>)
 8022fd0:	f001 fd8c 	bl	8024aec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022fd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fde:	4619      	mov	r1, r3
 8022fe0:	4816      	ldr	r0, [pc, #88]	; (802303c <BSP_LCD_MspInit+0x1a4>)
 8022fe2:	f001 fd83 	bl	8024aec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022fe6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022fea:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ff0:	4619      	mov	r1, r3
 8022ff2:	4813      	ldr	r0, [pc, #76]	; (8023040 <BSP_LCD_MspInit+0x1a8>)
 8022ff4:	f001 fd7a 	bl	8024aec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022ff8:	2303      	movs	r3, #3
 8022ffa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022ffc:	2309      	movs	r3, #9
 8022ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8023000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023004:	4619      	mov	r1, r3
 8023006:	480a      	ldr	r0, [pc, #40]	; (8023030 <BSP_LCD_MspInit+0x198>)
 8023008:	f001 fd70 	bl	8024aec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 802300c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8023012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023016:	4619      	mov	r1, r3
 8023018:	4809      	ldr	r0, [pc, #36]	; (8023040 <BSP_LCD_MspInit+0x1a8>)
 802301a:	f001 fd67 	bl	8024aec <HAL_GPIO_Init>
}
 802301e:	bf00      	nop
 8023020:	3738      	adds	r7, #56	; 0x38
 8023022:	46bd      	mov	sp, r7
 8023024:	bd80      	pop	{r7, pc}
 8023026:	bf00      	nop
 8023028:	40023800 	.word	0x40023800
 802302c:	40020000 	.word	0x40020000
 8023030:	40020400 	.word	0x40020400
 8023034:	40020800 	.word	0x40020800
 8023038:	40020c00 	.word	0x40020c00
 802303c:	40021400 	.word	0x40021400
 8023040:	40021800 	.word	0x40021800

08023044 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8023044:	b5b0      	push	{r4, r5, r7, lr}
 8023046:	b082      	sub	sp, #8
 8023048:	af00      	add	r7, sp, #0
 802304a:	4603      	mov	r3, r0
 802304c:	603a      	str	r2, [r7, #0]
 802304e:	80fb      	strh	r3, [r7, #6]
 8023050:	460b      	mov	r3, r1
 8023052:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8023054:	4b0c      	ldr	r3, [pc, #48]	; (8023088 <BSP_LCD_DrawPixel+0x44>)
 8023056:	681b      	ldr	r3, [r3, #0]
 8023058:	4a0c      	ldr	r2, [pc, #48]	; (802308c <BSP_LCD_DrawPixel+0x48>)
 802305a:	2134      	movs	r1, #52	; 0x34
 802305c:	fb01 f303 	mul.w	r3, r1, r3
 8023060:	4413      	add	r3, r2
 8023062:	335c      	adds	r3, #92	; 0x5c
 8023064:	681c      	ldr	r4, [r3, #0]
 8023066:	88bd      	ldrh	r5, [r7, #4]
 8023068:	f7ff fcb2 	bl	80229d0 <BSP_LCD_GetXSize>
 802306c:	4603      	mov	r3, r0
 802306e:	fb03 f205 	mul.w	r2, r3, r5
 8023072:	88fb      	ldrh	r3, [r7, #6]
 8023074:	4413      	add	r3, r2
 8023076:	009b      	lsls	r3, r3, #2
 8023078:	4423      	add	r3, r4
 802307a:	461a      	mov	r2, r3
 802307c:	683b      	ldr	r3, [r7, #0]
 802307e:	6013      	str	r3, [r2, #0]
}
 8023080:	bf00      	nop
 8023082:	3708      	adds	r7, #8
 8023084:	46bd      	mov	sp, r7
 8023086:	bdb0      	pop	{r4, r5, r7, pc}
 8023088:	20000a18 	.word	0x20000a18
 802308c:	20000900 	.word	0x20000900

08023090 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8023090:	b580      	push	{r7, lr}
 8023092:	b088      	sub	sp, #32
 8023094:	af00      	add	r7, sp, #0
 8023096:	4603      	mov	r3, r0
 8023098:	603a      	str	r2, [r7, #0]
 802309a:	80fb      	strh	r3, [r7, #6]
 802309c:	460b      	mov	r3, r1
 802309e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80230a0:	2300      	movs	r3, #0
 80230a2:	61fb      	str	r3, [r7, #28]
 80230a4:	2300      	movs	r3, #0
 80230a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80230a8:	2300      	movs	r3, #0
 80230aa:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80230ac:	4b53      	ldr	r3, [pc, #332]	; (80231fc <DrawChar+0x16c>)
 80230ae:	681a      	ldr	r2, [r3, #0]
 80230b0:	4953      	ldr	r1, [pc, #332]	; (8023200 <DrawChar+0x170>)
 80230b2:	4613      	mov	r3, r2
 80230b4:	005b      	lsls	r3, r3, #1
 80230b6:	4413      	add	r3, r2
 80230b8:	009b      	lsls	r3, r3, #2
 80230ba:	440b      	add	r3, r1
 80230bc:	3308      	adds	r3, #8
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	88db      	ldrh	r3, [r3, #6]
 80230c2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80230c4:	4b4d      	ldr	r3, [pc, #308]	; (80231fc <DrawChar+0x16c>)
 80230c6:	681a      	ldr	r2, [r3, #0]
 80230c8:	494d      	ldr	r1, [pc, #308]	; (8023200 <DrawChar+0x170>)
 80230ca:	4613      	mov	r3, r2
 80230cc:	005b      	lsls	r3, r3, #1
 80230ce:	4413      	add	r3, r2
 80230d0:	009b      	lsls	r3, r3, #2
 80230d2:	440b      	add	r3, r1
 80230d4:	3308      	adds	r3, #8
 80230d6:	681b      	ldr	r3, [r3, #0]
 80230d8:	889b      	ldrh	r3, [r3, #4]
 80230da:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80230dc:	8a3b      	ldrh	r3, [r7, #16]
 80230de:	3307      	adds	r3, #7
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	da00      	bge.n	80230e6 <DrawChar+0x56>
 80230e4:	3307      	adds	r3, #7
 80230e6:	10db      	asrs	r3, r3, #3
 80230e8:	b2db      	uxtb	r3, r3
 80230ea:	00db      	lsls	r3, r3, #3
 80230ec:	b2da      	uxtb	r2, r3
 80230ee:	8a3b      	ldrh	r3, [r7, #16]
 80230f0:	b2db      	uxtb	r3, r3
 80230f2:	1ad3      	subs	r3, r2, r3
 80230f4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80230f6:	2300      	movs	r3, #0
 80230f8:	61fb      	str	r3, [r7, #28]
 80230fa:	e076      	b.n	80231ea <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80230fc:	8a3b      	ldrh	r3, [r7, #16]
 80230fe:	3307      	adds	r3, #7
 8023100:	2b00      	cmp	r3, #0
 8023102:	da00      	bge.n	8023106 <DrawChar+0x76>
 8023104:	3307      	adds	r3, #7
 8023106:	10db      	asrs	r3, r3, #3
 8023108:	461a      	mov	r2, r3
 802310a:	69fb      	ldr	r3, [r7, #28]
 802310c:	fb02 f303 	mul.w	r3, r2, r3
 8023110:	683a      	ldr	r2, [r7, #0]
 8023112:	4413      	add	r3, r2
 8023114:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8023116:	8a3b      	ldrh	r3, [r7, #16]
 8023118:	3307      	adds	r3, #7
 802311a:	2b00      	cmp	r3, #0
 802311c:	da00      	bge.n	8023120 <DrawChar+0x90>
 802311e:	3307      	adds	r3, #7
 8023120:	10db      	asrs	r3, r3, #3
 8023122:	2b01      	cmp	r3, #1
 8023124:	d002      	beq.n	802312c <DrawChar+0x9c>
 8023126:	2b02      	cmp	r3, #2
 8023128:	d004      	beq.n	8023134 <DrawChar+0xa4>
 802312a:	e00c      	b.n	8023146 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 802312c:	68bb      	ldr	r3, [r7, #8]
 802312e:	781b      	ldrb	r3, [r3, #0]
 8023130:	617b      	str	r3, [r7, #20]
      break;
 8023132:	e016      	b.n	8023162 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8023134:	68bb      	ldr	r3, [r7, #8]
 8023136:	781b      	ldrb	r3, [r3, #0]
 8023138:	021b      	lsls	r3, r3, #8
 802313a:	68ba      	ldr	r2, [r7, #8]
 802313c:	3201      	adds	r2, #1
 802313e:	7812      	ldrb	r2, [r2, #0]
 8023140:	4313      	orrs	r3, r2
 8023142:	617b      	str	r3, [r7, #20]
      break;
 8023144:	e00d      	b.n	8023162 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8023146:	68bb      	ldr	r3, [r7, #8]
 8023148:	781b      	ldrb	r3, [r3, #0]
 802314a:	041a      	lsls	r2, r3, #16
 802314c:	68bb      	ldr	r3, [r7, #8]
 802314e:	3301      	adds	r3, #1
 8023150:	781b      	ldrb	r3, [r3, #0]
 8023152:	021b      	lsls	r3, r3, #8
 8023154:	4313      	orrs	r3, r2
 8023156:	68ba      	ldr	r2, [r7, #8]
 8023158:	3202      	adds	r2, #2
 802315a:	7812      	ldrb	r2, [r2, #0]
 802315c:	4313      	orrs	r3, r2
 802315e:	617b      	str	r3, [r7, #20]
      break;
 8023160:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8023162:	2300      	movs	r3, #0
 8023164:	61bb      	str	r3, [r7, #24]
 8023166:	e036      	b.n	80231d6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8023168:	8a3a      	ldrh	r2, [r7, #16]
 802316a:	69bb      	ldr	r3, [r7, #24]
 802316c:	1ad2      	subs	r2, r2, r3
 802316e:	7bfb      	ldrb	r3, [r7, #15]
 8023170:	4413      	add	r3, r2
 8023172:	3b01      	subs	r3, #1
 8023174:	2201      	movs	r2, #1
 8023176:	fa02 f303 	lsl.w	r3, r2, r3
 802317a:	461a      	mov	r2, r3
 802317c:	697b      	ldr	r3, [r7, #20]
 802317e:	4013      	ands	r3, r2
 8023180:	2b00      	cmp	r3, #0
 8023182:	d012      	beq.n	80231aa <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8023184:	69bb      	ldr	r3, [r7, #24]
 8023186:	b29a      	uxth	r2, r3
 8023188:	88fb      	ldrh	r3, [r7, #6]
 802318a:	4413      	add	r3, r2
 802318c:	b298      	uxth	r0, r3
 802318e:	4b1b      	ldr	r3, [pc, #108]	; (80231fc <DrawChar+0x16c>)
 8023190:	681a      	ldr	r2, [r3, #0]
 8023192:	491b      	ldr	r1, [pc, #108]	; (8023200 <DrawChar+0x170>)
 8023194:	4613      	mov	r3, r2
 8023196:	005b      	lsls	r3, r3, #1
 8023198:	4413      	add	r3, r2
 802319a:	009b      	lsls	r3, r3, #2
 802319c:	440b      	add	r3, r1
 802319e:	681a      	ldr	r2, [r3, #0]
 80231a0:	88bb      	ldrh	r3, [r7, #4]
 80231a2:	4619      	mov	r1, r3
 80231a4:	f7ff ff4e 	bl	8023044 <BSP_LCD_DrawPixel>
 80231a8:	e012      	b.n	80231d0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80231aa:	69bb      	ldr	r3, [r7, #24]
 80231ac:	b29a      	uxth	r2, r3
 80231ae:	88fb      	ldrh	r3, [r7, #6]
 80231b0:	4413      	add	r3, r2
 80231b2:	b298      	uxth	r0, r3
 80231b4:	4b11      	ldr	r3, [pc, #68]	; (80231fc <DrawChar+0x16c>)
 80231b6:	681a      	ldr	r2, [r3, #0]
 80231b8:	4911      	ldr	r1, [pc, #68]	; (8023200 <DrawChar+0x170>)
 80231ba:	4613      	mov	r3, r2
 80231bc:	005b      	lsls	r3, r3, #1
 80231be:	4413      	add	r3, r2
 80231c0:	009b      	lsls	r3, r3, #2
 80231c2:	440b      	add	r3, r1
 80231c4:	3304      	adds	r3, #4
 80231c6:	681a      	ldr	r2, [r3, #0]
 80231c8:	88bb      	ldrh	r3, [r7, #4]
 80231ca:	4619      	mov	r1, r3
 80231cc:	f7ff ff3a 	bl	8023044 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80231d0:	69bb      	ldr	r3, [r7, #24]
 80231d2:	3301      	adds	r3, #1
 80231d4:	61bb      	str	r3, [r7, #24]
 80231d6:	8a3b      	ldrh	r3, [r7, #16]
 80231d8:	69ba      	ldr	r2, [r7, #24]
 80231da:	429a      	cmp	r2, r3
 80231dc:	d3c4      	bcc.n	8023168 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80231de:	88bb      	ldrh	r3, [r7, #4]
 80231e0:	3301      	adds	r3, #1
 80231e2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80231e4:	69fb      	ldr	r3, [r7, #28]
 80231e6:	3301      	adds	r3, #1
 80231e8:	61fb      	str	r3, [r7, #28]
 80231ea:	8a7b      	ldrh	r3, [r7, #18]
 80231ec:	69fa      	ldr	r2, [r7, #28]
 80231ee:	429a      	cmp	r2, r3
 80231f0:	d384      	bcc.n	80230fc <DrawChar+0x6c>
  }
}
 80231f2:	bf00      	nop
 80231f4:	bf00      	nop
 80231f6:	3720      	adds	r7, #32
 80231f8:	46bd      	mov	sp, r7
 80231fa:	bd80      	pop	{r7, pc}
 80231fc:	20000a18 	.word	0x20000a18
 8023200:	20000a1c 	.word	0x20000a1c

08023204 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8023204:	b580      	push	{r7, lr}
 8023206:	b086      	sub	sp, #24
 8023208:	af02      	add	r7, sp, #8
 802320a:	60f8      	str	r0, [r7, #12]
 802320c:	60b9      	str	r1, [r7, #8]
 802320e:	607a      	str	r2, [r7, #4]
 8023210:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8023212:	4b16      	ldr	r3, [pc, #88]	; (802326c <FillBuffer+0x68>)
 8023214:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8023218:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 802321a:	4b14      	ldr	r3, [pc, #80]	; (802326c <FillBuffer+0x68>)
 802321c:	2200      	movs	r2, #0
 802321e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8023220:	4a12      	ldr	r2, [pc, #72]	; (802326c <FillBuffer+0x68>)
 8023222:	69bb      	ldr	r3, [r7, #24]
 8023224:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8023226:	4b11      	ldr	r3, [pc, #68]	; (802326c <FillBuffer+0x68>)
 8023228:	4a11      	ldr	r2, [pc, #68]	; (8023270 <FillBuffer+0x6c>)
 802322a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 802322c:	480f      	ldr	r0, [pc, #60]	; (802326c <FillBuffer+0x68>)
 802322e:	f000 fdbb 	bl	8023da8 <HAL_DMA2D_Init>
 8023232:	4603      	mov	r3, r0
 8023234:	2b00      	cmp	r3, #0
 8023236:	d115      	bne.n	8023264 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8023238:	68f9      	ldr	r1, [r7, #12]
 802323a:	480c      	ldr	r0, [pc, #48]	; (802326c <FillBuffer+0x68>)
 802323c:	f001 f822 	bl	8024284 <HAL_DMA2D_ConfigLayer>
 8023240:	4603      	mov	r3, r0
 8023242:	2b00      	cmp	r3, #0
 8023244:	d10e      	bne.n	8023264 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8023246:	68ba      	ldr	r2, [r7, #8]
 8023248:	683b      	ldr	r3, [r7, #0]
 802324a:	9300      	str	r3, [sp, #0]
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	69f9      	ldr	r1, [r7, #28]
 8023250:	4806      	ldr	r0, [pc, #24]	; (802326c <FillBuffer+0x68>)
 8023252:	f000 fdf2 	bl	8023e3a <HAL_DMA2D_Start>
 8023256:	4603      	mov	r3, r0
 8023258:	2b00      	cmp	r3, #0
 802325a:	d103      	bne.n	8023264 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 802325c:	210a      	movs	r1, #10
 802325e:	4803      	ldr	r0, [pc, #12]	; (802326c <FillBuffer+0x68>)
 8023260:	f000 fe16 	bl	8023e90 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8023264:	bf00      	nop
 8023266:	3710      	adds	r7, #16
 8023268:	46bd      	mov	sp, r7
 802326a:	bd80      	pop	{r7, pc}
 802326c:	200009a8 	.word	0x200009a8
 8023270:	4002b000 	.word	0x4002b000

08023274 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8023274:	b580      	push	{r7, lr}
 8023276:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8023278:	4b29      	ldr	r3, [pc, #164]	; (8023320 <BSP_SDRAM_Init+0xac>)
 802327a:	4a2a      	ldr	r2, [pc, #168]	; (8023324 <BSP_SDRAM_Init+0xb0>)
 802327c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 802327e:	4b2a      	ldr	r3, [pc, #168]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 8023280:	2202      	movs	r2, #2
 8023282:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8023284:	4b28      	ldr	r3, [pc, #160]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 8023286:	2207      	movs	r2, #7
 8023288:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 802328a:	4b27      	ldr	r3, [pc, #156]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 802328c:	2204      	movs	r2, #4
 802328e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8023290:	4b25      	ldr	r3, [pc, #148]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 8023292:	2207      	movs	r2, #7
 8023294:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8023296:	4b24      	ldr	r3, [pc, #144]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 8023298:	2202      	movs	r2, #2
 802329a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 802329c:	4b22      	ldr	r3, [pc, #136]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 802329e:	2202      	movs	r2, #2
 80232a0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80232a2:	4b21      	ldr	r3, [pc, #132]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 80232a4:	2202      	movs	r2, #2
 80232a6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80232a8:	4b1d      	ldr	r3, [pc, #116]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232aa:	2201      	movs	r2, #1
 80232ac:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80232ae:	4b1c      	ldr	r3, [pc, #112]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232b0:	2200      	movs	r2, #0
 80232b2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80232b4:	4b1a      	ldr	r3, [pc, #104]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232b6:	2204      	movs	r2, #4
 80232b8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80232ba:	4b19      	ldr	r3, [pc, #100]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232bc:	2210      	movs	r2, #16
 80232be:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80232c0:	4b17      	ldr	r3, [pc, #92]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232c2:	2240      	movs	r2, #64	; 0x40
 80232c4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80232c6:	4b16      	ldr	r3, [pc, #88]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80232cc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80232ce:	4b14      	ldr	r3, [pc, #80]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232d0:	2200      	movs	r2, #0
 80232d2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80232d4:	4b12      	ldr	r3, [pc, #72]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80232da:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80232dc:	4b10      	ldr	r3, [pc, #64]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232de:	2200      	movs	r2, #0
 80232e0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80232e2:	4b0f      	ldr	r3, [pc, #60]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80232e8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80232ea:	2100      	movs	r1, #0
 80232ec:	480c      	ldr	r0, [pc, #48]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232ee:	f000 f87f 	bl	80233f0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80232f2:	490d      	ldr	r1, [pc, #52]	; (8023328 <BSP_SDRAM_Init+0xb4>)
 80232f4:	480a      	ldr	r0, [pc, #40]	; (8023320 <BSP_SDRAM_Init+0xac>)
 80232f6:	f004 ff47 	bl	8028188 <HAL_SDRAM_Init>
 80232fa:	4603      	mov	r3, r0
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d003      	beq.n	8023308 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8023300:	4b0a      	ldr	r3, [pc, #40]	; (802332c <BSP_SDRAM_Init+0xb8>)
 8023302:	2201      	movs	r2, #1
 8023304:	701a      	strb	r2, [r3, #0]
 8023306:	e002      	b.n	802330e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8023308:	4b08      	ldr	r3, [pc, #32]	; (802332c <BSP_SDRAM_Init+0xb8>)
 802330a:	2200      	movs	r2, #0
 802330c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 802330e:	f240 506a 	movw	r0, #1386	; 0x56a
 8023312:	f000 f80d 	bl	8023330 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8023316:	4b05      	ldr	r3, [pc, #20]	; (802332c <BSP_SDRAM_Init+0xb8>)
 8023318:	781b      	ldrb	r3, [r3, #0]
}
 802331a:	4618      	mov	r0, r3
 802331c:	bd80      	pop	{r7, pc}
 802331e:	bf00      	nop
 8023320:	20000a38 	.word	0x20000a38
 8023324:	a0000140 	.word	0xa0000140
 8023328:	20000a6c 	.word	0x20000a6c
 802332c:	20000054 	.word	0x20000054

08023330 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8023330:	b580      	push	{r7, lr}
 8023332:	b084      	sub	sp, #16
 8023334:	af00      	add	r7, sp, #0
 8023336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8023338:	2300      	movs	r3, #0
 802333a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 802333c:	4b2a      	ldr	r3, [pc, #168]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802333e:	2201      	movs	r2, #1
 8023340:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023342:	4b29      	ldr	r3, [pc, #164]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023344:	2208      	movs	r2, #8
 8023346:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023348:	4b27      	ldr	r3, [pc, #156]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802334a:	2201      	movs	r2, #1
 802334c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 802334e:	4b26      	ldr	r3, [pc, #152]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023350:	2200      	movs	r2, #0
 8023352:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8023354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023358:	4923      	ldr	r1, [pc, #140]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802335a:	4824      	ldr	r0, [pc, #144]	; (80233ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 802335c:	f004 ff48 	bl	80281f0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8023360:	2001      	movs	r0, #1
 8023362:	f000 f993 	bl	802368c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8023366:	4b20      	ldr	r3, [pc, #128]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023368:	2202      	movs	r2, #2
 802336a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802336c:	4b1e      	ldr	r3, [pc, #120]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802336e:	2208      	movs	r2, #8
 8023370:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023372:	4b1d      	ldr	r3, [pc, #116]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023374:	2201      	movs	r2, #1
 8023376:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023378:	4b1b      	ldr	r3, [pc, #108]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802337a:	2200      	movs	r2, #0
 802337c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 802337e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023382:	4919      	ldr	r1, [pc, #100]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023384:	4819      	ldr	r0, [pc, #100]	; (80233ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023386:	f004 ff33 	bl	80281f0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 802338a:	4b17      	ldr	r3, [pc, #92]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802338c:	2203      	movs	r2, #3
 802338e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023390:	4b15      	ldr	r3, [pc, #84]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023392:	2208      	movs	r2, #8
 8023394:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8023396:	4b14      	ldr	r3, [pc, #80]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023398:	2204      	movs	r2, #4
 802339a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 802339c:	4b12      	ldr	r3, [pc, #72]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802339e:	2200      	movs	r2, #0
 80233a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233a6:	4910      	ldr	r1, [pc, #64]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233a8:	4810      	ldr	r0, [pc, #64]	; (80233ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233aa:	f004 ff21 	bl	80281f0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80233ae:	f44f 730c 	mov.w	r3, #560	; 0x230
 80233b2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80233b4:	4b0c      	ldr	r3, [pc, #48]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b6:	2204      	movs	r2, #4
 80233b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80233ba:	4b0b      	ldr	r3, [pc, #44]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233bc:	2208      	movs	r2, #8
 80233be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80233c0:	4b09      	ldr	r3, [pc, #36]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233c2:	2201      	movs	r2, #1
 80233c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80233c6:	68fb      	ldr	r3, [r7, #12]
 80233c8:	4a07      	ldr	r2, [pc, #28]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ca:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233d0:	4905      	ldr	r1, [pc, #20]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233d2:	4806      	ldr	r0, [pc, #24]	; (80233ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233d4:	f004 ff0c 	bl	80281f0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80233d8:	6879      	ldr	r1, [r7, #4]
 80233da:	4804      	ldr	r0, [pc, #16]	; (80233ec <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233dc:	f004 ff3d 	bl	802825a <HAL_SDRAM_ProgramRefreshRate>
}
 80233e0:	bf00      	nop
 80233e2:	3710      	adds	r7, #16
 80233e4:	46bd      	mov	sp, r7
 80233e6:	bd80      	pop	{r7, pc}
 80233e8:	20000a88 	.word	0x20000a88
 80233ec:	20000a38 	.word	0x20000a38

080233f0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80233f0:	b580      	push	{r7, lr}
 80233f2:	b090      	sub	sp, #64	; 0x40
 80233f4:	af00      	add	r7, sp, #0
 80233f6:	6078      	str	r0, [r7, #4]
 80233f8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	2b00      	cmp	r3, #0
 80233fe:	f000 80ec 	beq.w	80235da <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8023402:	2300      	movs	r3, #0
 8023404:	62bb      	str	r3, [r7, #40]	; 0x28
 8023406:	4b77      	ldr	r3, [pc, #476]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802340a:	4a76      	ldr	r2, [pc, #472]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 802340c:	f043 0301 	orr.w	r3, r3, #1
 8023410:	6393      	str	r3, [r2, #56]	; 0x38
 8023412:	4b74      	ldr	r3, [pc, #464]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023416:	f003 0301 	and.w	r3, r3, #1
 802341a:	62bb      	str	r3, [r7, #40]	; 0x28
 802341c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 802341e:	2300      	movs	r3, #0
 8023420:	627b      	str	r3, [r7, #36]	; 0x24
 8023422:	4b70      	ldr	r3, [pc, #448]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023426:	4a6f      	ldr	r2, [pc, #444]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802342c:	6313      	str	r3, [r2, #48]	; 0x30
 802342e:	4b6d      	ldr	r3, [pc, #436]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023436:	627b      	str	r3, [r7, #36]	; 0x24
 8023438:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802343a:	2300      	movs	r3, #0
 802343c:	623b      	str	r3, [r7, #32]
 802343e:	4b69      	ldr	r3, [pc, #420]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023442:	4a68      	ldr	r2, [pc, #416]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023444:	f043 0302 	orr.w	r3, r3, #2
 8023448:	6313      	str	r3, [r2, #48]	; 0x30
 802344a:	4b66      	ldr	r3, [pc, #408]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 802344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802344e:	f003 0302 	and.w	r3, r3, #2
 8023452:	623b      	str	r3, [r7, #32]
 8023454:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023456:	2300      	movs	r3, #0
 8023458:	61fb      	str	r3, [r7, #28]
 802345a:	4b62      	ldr	r3, [pc, #392]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 802345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802345e:	4a61      	ldr	r2, [pc, #388]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023460:	f043 0304 	orr.w	r3, r3, #4
 8023464:	6313      	str	r3, [r2, #48]	; 0x30
 8023466:	4b5f      	ldr	r3, [pc, #380]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802346a:	f003 0304 	and.w	r3, r3, #4
 802346e:	61fb      	str	r3, [r7, #28]
 8023470:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023472:	2300      	movs	r3, #0
 8023474:	61bb      	str	r3, [r7, #24]
 8023476:	4b5b      	ldr	r3, [pc, #364]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802347a:	4a5a      	ldr	r2, [pc, #360]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 802347c:	f043 0308 	orr.w	r3, r3, #8
 8023480:	6313      	str	r3, [r2, #48]	; 0x30
 8023482:	4b58      	ldr	r3, [pc, #352]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023486:	f003 0308 	and.w	r3, r3, #8
 802348a:	61bb      	str	r3, [r7, #24]
 802348c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802348e:	2300      	movs	r3, #0
 8023490:	617b      	str	r3, [r7, #20]
 8023492:	4b54      	ldr	r3, [pc, #336]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023496:	4a53      	ldr	r2, [pc, #332]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 8023498:	f043 0310 	orr.w	r3, r3, #16
 802349c:	6313      	str	r3, [r2, #48]	; 0x30
 802349e:	4b51      	ldr	r3, [pc, #324]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234a2:	f003 0310 	and.w	r3, r3, #16
 80234a6:	617b      	str	r3, [r7, #20]
 80234a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80234aa:	2300      	movs	r3, #0
 80234ac:	613b      	str	r3, [r7, #16]
 80234ae:	4b4d      	ldr	r3, [pc, #308]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234b2:	4a4c      	ldr	r2, [pc, #304]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234b4:	f043 0320 	orr.w	r3, r3, #32
 80234b8:	6313      	str	r3, [r2, #48]	; 0x30
 80234ba:	4b4a      	ldr	r3, [pc, #296]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234be:	f003 0320 	and.w	r3, r3, #32
 80234c2:	613b      	str	r3, [r7, #16]
 80234c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80234c6:	2300      	movs	r3, #0
 80234c8:	60fb      	str	r3, [r7, #12]
 80234ca:	4b46      	ldr	r3, [pc, #280]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ce:	4a45      	ldr	r2, [pc, #276]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234d4:	6313      	str	r3, [r2, #48]	; 0x30
 80234d6:	4b43      	ldr	r3, [pc, #268]	; (80235e4 <BSP_SDRAM_MspInit+0x1f4>)
 80234d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80234de:	60fb      	str	r3, [r7, #12]
 80234e0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80234e2:	2302      	movs	r3, #2
 80234e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80234e6:	2302      	movs	r3, #2
 80234e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80234ea:	2300      	movs	r3, #0
 80234ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80234ee:	230c      	movs	r3, #12
 80234f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80234f2:	2360      	movs	r3, #96	; 0x60
 80234f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80234f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80234fa:	4619      	mov	r1, r3
 80234fc:	483a      	ldr	r0, [pc, #232]	; (80235e8 <BSP_SDRAM_MspInit+0x1f8>)
 80234fe:	f001 faf5 	bl	8024aec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8023502:	2301      	movs	r3, #1
 8023504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8023506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802350a:	4619      	mov	r1, r3
 802350c:	4837      	ldr	r0, [pc, #220]	; (80235ec <BSP_SDRAM_MspInit+0x1fc>)
 802350e:	f001 faed 	bl	8024aec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8023512:	f24c 7303 	movw	r3, #50947	; 0xc703
 8023516:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8023518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802351c:	4619      	mov	r1, r3
 802351e:	4834      	ldr	r0, [pc, #208]	; (80235f0 <BSP_SDRAM_MspInit+0x200>)
 8023520:	f001 fae4 	bl	8024aec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8023524:	f64f 7383 	movw	r3, #65411	; 0xff83
 8023528:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 802352a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802352e:	4619      	mov	r1, r3
 8023530:	4830      	ldr	r0, [pc, #192]	; (80235f4 <BSP_SDRAM_MspInit+0x204>)
 8023532:	f001 fadb 	bl	8024aec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8023536:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802353a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 802353c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023540:	4619      	mov	r1, r3
 8023542:	482d      	ldr	r0, [pc, #180]	; (80235f8 <BSP_SDRAM_MspInit+0x208>)
 8023544:	f001 fad2 	bl	8024aec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8023548:	f248 1333 	movw	r3, #33075	; 0x8133
 802354c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802354e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023552:	4619      	mov	r1, r3
 8023554:	4829      	ldr	r0, [pc, #164]	; (80235fc <BSP_SDRAM_MspInit+0x20c>)
 8023556:	f001 fac9 	bl	8024aec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 802355a:	4b29      	ldr	r3, [pc, #164]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 802355c:	2200      	movs	r2, #0
 802355e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023560:	4b27      	ldr	r3, [pc, #156]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023562:	2280      	movs	r2, #128	; 0x80
 8023564:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8023566:	4b26      	ldr	r3, [pc, #152]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023568:	f44f 7200 	mov.w	r2, #512	; 0x200
 802356c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 802356e:	4b24      	ldr	r3, [pc, #144]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023574:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8023576:	4b22      	ldr	r3, [pc, #136]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023578:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 802357c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 802357e:	4b20      	ldr	r3, [pc, #128]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023580:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023584:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8023586:	4b1e      	ldr	r3, [pc, #120]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023588:	2200      	movs	r2, #0
 802358a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 802358c:	4b1c      	ldr	r3, [pc, #112]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 802358e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8023592:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8023594:	4b1a      	ldr	r3, [pc, #104]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 8023596:	2200      	movs	r2, #0
 8023598:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 802359a:	4b19      	ldr	r3, [pc, #100]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 802359c:	2203      	movs	r2, #3
 802359e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80235a0:	4b17      	ldr	r3, [pc, #92]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235a2:	2200      	movs	r2, #0
 80235a4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80235a6:	4b16      	ldr	r3, [pc, #88]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235a8:	2200      	movs	r2, #0
 80235aa:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80235ac:	4b14      	ldr	r3, [pc, #80]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235ae:	4a15      	ldr	r2, [pc, #84]	; (8023604 <BSP_SDRAM_MspInit+0x214>)
 80235b0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80235b2:	687b      	ldr	r3, [r7, #4]
 80235b4:	4a12      	ldr	r2, [pc, #72]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235b6:	631a      	str	r2, [r3, #48]	; 0x30
 80235b8:	4a11      	ldr	r2, [pc, #68]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80235be:	4810      	ldr	r0, [pc, #64]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235c0:	f000 fa50 	bl	8023a64 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80235c4:	480e      	ldr	r0, [pc, #56]	; (8023600 <BSP_SDRAM_MspInit+0x210>)
 80235c6:	f000 f99f 	bl	8023908 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80235ca:	2200      	movs	r2, #0
 80235cc:	210f      	movs	r1, #15
 80235ce:	2038      	movs	r0, #56	; 0x38
 80235d0:	f000 f94f 	bl	8023872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80235d4:	2038      	movs	r0, #56	; 0x38
 80235d6:	f000 f968 	bl	80238aa <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80235da:	bf00      	nop
 80235dc:	3740      	adds	r7, #64	; 0x40
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}
 80235e2:	bf00      	nop
 80235e4:	40023800 	.word	0x40023800
 80235e8:	40020400 	.word	0x40020400
 80235ec:	40020800 	.word	0x40020800
 80235f0:	40020c00 	.word	0x40020c00
 80235f4:	40021000 	.word	0x40021000
 80235f8:	40021400 	.word	0x40021400
 80235fc:	40021800 	.word	0x40021800
 8023600:	20000a98 	.word	0x20000a98
 8023604:	40026410 	.word	0x40026410

08023608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023608:	b580      	push	{r7, lr}
 802360a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802360c:	4b0e      	ldr	r3, [pc, #56]	; (8023648 <HAL_Init+0x40>)
 802360e:	681b      	ldr	r3, [r3, #0]
 8023610:	4a0d      	ldr	r2, [pc, #52]	; (8023648 <HAL_Init+0x40>)
 8023612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023618:	4b0b      	ldr	r3, [pc, #44]	; (8023648 <HAL_Init+0x40>)
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	4a0a      	ldr	r2, [pc, #40]	; (8023648 <HAL_Init+0x40>)
 802361e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023624:	4b08      	ldr	r3, [pc, #32]	; (8023648 <HAL_Init+0x40>)
 8023626:	681b      	ldr	r3, [r3, #0]
 8023628:	4a07      	ldr	r2, [pc, #28]	; (8023648 <HAL_Init+0x40>)
 802362a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802362e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023630:	2003      	movs	r0, #3
 8023632:	f000 f913 	bl	802385c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8023636:	200f      	movs	r0, #15
 8023638:	f7fe fc38 	bl	8021eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802363c:	f7fe f85e 	bl	80216fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023640:	2300      	movs	r3, #0
}
 8023642:	4618      	mov	r0, r3
 8023644:	bd80      	pop	{r7, pc}
 8023646:	bf00      	nop
 8023648:	40023c00 	.word	0x40023c00

0802364c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802364c:	b480      	push	{r7}
 802364e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023650:	4b06      	ldr	r3, [pc, #24]	; (802366c <HAL_IncTick+0x20>)
 8023652:	781b      	ldrb	r3, [r3, #0]
 8023654:	461a      	mov	r2, r3
 8023656:	4b06      	ldr	r3, [pc, #24]	; (8023670 <HAL_IncTick+0x24>)
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	4413      	add	r3, r2
 802365c:	4a04      	ldr	r2, [pc, #16]	; (8023670 <HAL_IncTick+0x24>)
 802365e:	6013      	str	r3, [r2, #0]
}
 8023660:	bf00      	nop
 8023662:	46bd      	mov	sp, r7
 8023664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023668:	4770      	bx	lr
 802366a:	bf00      	nop
 802366c:	2000005c 	.word	0x2000005c
 8023670:	20000af8 	.word	0x20000af8

08023674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023674:	b480      	push	{r7}
 8023676:	af00      	add	r7, sp, #0
  return uwTick;
 8023678:	4b03      	ldr	r3, [pc, #12]	; (8023688 <HAL_GetTick+0x14>)
 802367a:	681b      	ldr	r3, [r3, #0]
}
 802367c:	4618      	mov	r0, r3
 802367e:	46bd      	mov	sp, r7
 8023680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023684:	4770      	bx	lr
 8023686:	bf00      	nop
 8023688:	20000af8 	.word	0x20000af8

0802368c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 802368c:	b580      	push	{r7, lr}
 802368e:	b084      	sub	sp, #16
 8023690:	af00      	add	r7, sp, #0
 8023692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023694:	f7ff ffee 	bl	8023674 <HAL_GetTick>
 8023698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 802369a:	687b      	ldr	r3, [r7, #4]
 802369c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802369e:	68fb      	ldr	r3, [r7, #12]
 80236a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236a4:	d005      	beq.n	80236b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80236a6:	4b0a      	ldr	r3, [pc, #40]	; (80236d0 <HAL_Delay+0x44>)
 80236a8:	781b      	ldrb	r3, [r3, #0]
 80236aa:	461a      	mov	r2, r3
 80236ac:	68fb      	ldr	r3, [r7, #12]
 80236ae:	4413      	add	r3, r2
 80236b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80236b2:	bf00      	nop
 80236b4:	f7ff ffde 	bl	8023674 <HAL_GetTick>
 80236b8:	4602      	mov	r2, r0
 80236ba:	68bb      	ldr	r3, [r7, #8]
 80236bc:	1ad3      	subs	r3, r2, r3
 80236be:	68fa      	ldr	r2, [r7, #12]
 80236c0:	429a      	cmp	r2, r3
 80236c2:	d8f7      	bhi.n	80236b4 <HAL_Delay+0x28>
  {
  }
}
 80236c4:	bf00      	nop
 80236c6:	bf00      	nop
 80236c8:	3710      	adds	r7, #16
 80236ca:	46bd      	mov	sp, r7
 80236cc:	bd80      	pop	{r7, pc}
 80236ce:	bf00      	nop
 80236d0:	2000005c 	.word	0x2000005c

080236d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80236d4:	b480      	push	{r7}
 80236d6:	b085      	sub	sp, #20
 80236d8:	af00      	add	r7, sp, #0
 80236da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	f003 0307 	and.w	r3, r3, #7
 80236e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80236e4:	4b0c      	ldr	r3, [pc, #48]	; (8023718 <__NVIC_SetPriorityGrouping+0x44>)
 80236e6:	68db      	ldr	r3, [r3, #12]
 80236e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80236ea:	68ba      	ldr	r2, [r7, #8]
 80236ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80236f0:	4013      	ands	r3, r2
 80236f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80236f4:	68fb      	ldr	r3, [r7, #12]
 80236f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80236f8:	68bb      	ldr	r3, [r7, #8]
 80236fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80236fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8023706:	4a04      	ldr	r2, [pc, #16]	; (8023718 <__NVIC_SetPriorityGrouping+0x44>)
 8023708:	68bb      	ldr	r3, [r7, #8]
 802370a:	60d3      	str	r3, [r2, #12]
}
 802370c:	bf00      	nop
 802370e:	3714      	adds	r7, #20
 8023710:	46bd      	mov	sp, r7
 8023712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023716:	4770      	bx	lr
 8023718:	e000ed00 	.word	0xe000ed00

0802371c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802371c:	b480      	push	{r7}
 802371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023720:	4b04      	ldr	r3, [pc, #16]	; (8023734 <__NVIC_GetPriorityGrouping+0x18>)
 8023722:	68db      	ldr	r3, [r3, #12]
 8023724:	0a1b      	lsrs	r3, r3, #8
 8023726:	f003 0307 	and.w	r3, r3, #7
}
 802372a:	4618      	mov	r0, r3
 802372c:	46bd      	mov	sp, r7
 802372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023732:	4770      	bx	lr
 8023734:	e000ed00 	.word	0xe000ed00

08023738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023738:	b480      	push	{r7}
 802373a:	b083      	sub	sp, #12
 802373c:	af00      	add	r7, sp, #0
 802373e:	4603      	mov	r3, r0
 8023740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023746:	2b00      	cmp	r3, #0
 8023748:	db0b      	blt.n	8023762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802374a:	79fb      	ldrb	r3, [r7, #7]
 802374c:	f003 021f 	and.w	r2, r3, #31
 8023750:	4907      	ldr	r1, [pc, #28]	; (8023770 <__NVIC_EnableIRQ+0x38>)
 8023752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023756:	095b      	lsrs	r3, r3, #5
 8023758:	2001      	movs	r0, #1
 802375a:	fa00 f202 	lsl.w	r2, r0, r2
 802375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023762:	bf00      	nop
 8023764:	370c      	adds	r7, #12
 8023766:	46bd      	mov	sp, r7
 8023768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802376c:	4770      	bx	lr
 802376e:	bf00      	nop
 8023770:	e000e100 	.word	0xe000e100

08023774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023774:	b480      	push	{r7}
 8023776:	b083      	sub	sp, #12
 8023778:	af00      	add	r7, sp, #0
 802377a:	4603      	mov	r3, r0
 802377c:	6039      	str	r1, [r7, #0]
 802377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023784:	2b00      	cmp	r3, #0
 8023786:	db0a      	blt.n	802379e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023788:	683b      	ldr	r3, [r7, #0]
 802378a:	b2da      	uxtb	r2, r3
 802378c:	490c      	ldr	r1, [pc, #48]	; (80237c0 <__NVIC_SetPriority+0x4c>)
 802378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023792:	0112      	lsls	r2, r2, #4
 8023794:	b2d2      	uxtb	r2, r2
 8023796:	440b      	add	r3, r1
 8023798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802379c:	e00a      	b.n	80237b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802379e:	683b      	ldr	r3, [r7, #0]
 80237a0:	b2da      	uxtb	r2, r3
 80237a2:	4908      	ldr	r1, [pc, #32]	; (80237c4 <__NVIC_SetPriority+0x50>)
 80237a4:	79fb      	ldrb	r3, [r7, #7]
 80237a6:	f003 030f 	and.w	r3, r3, #15
 80237aa:	3b04      	subs	r3, #4
 80237ac:	0112      	lsls	r2, r2, #4
 80237ae:	b2d2      	uxtb	r2, r2
 80237b0:	440b      	add	r3, r1
 80237b2:	761a      	strb	r2, [r3, #24]
}
 80237b4:	bf00      	nop
 80237b6:	370c      	adds	r7, #12
 80237b8:	46bd      	mov	sp, r7
 80237ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237be:	4770      	bx	lr
 80237c0:	e000e100 	.word	0xe000e100
 80237c4:	e000ed00 	.word	0xe000ed00

080237c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80237c8:	b480      	push	{r7}
 80237ca:	b089      	sub	sp, #36	; 0x24
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	60f8      	str	r0, [r7, #12]
 80237d0:	60b9      	str	r1, [r7, #8]
 80237d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80237d4:	68fb      	ldr	r3, [r7, #12]
 80237d6:	f003 0307 	and.w	r3, r3, #7
 80237da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80237dc:	69fb      	ldr	r3, [r7, #28]
 80237de:	f1c3 0307 	rsb	r3, r3, #7
 80237e2:	2b04      	cmp	r3, #4
 80237e4:	bf28      	it	cs
 80237e6:	2304      	movcs	r3, #4
 80237e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80237ea:	69fb      	ldr	r3, [r7, #28]
 80237ec:	3304      	adds	r3, #4
 80237ee:	2b06      	cmp	r3, #6
 80237f0:	d902      	bls.n	80237f8 <NVIC_EncodePriority+0x30>
 80237f2:	69fb      	ldr	r3, [r7, #28]
 80237f4:	3b03      	subs	r3, #3
 80237f6:	e000      	b.n	80237fa <NVIC_EncodePriority+0x32>
 80237f8:	2300      	movs	r3, #0
 80237fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80237fc:	f04f 32ff 	mov.w	r2, #4294967295
 8023800:	69bb      	ldr	r3, [r7, #24]
 8023802:	fa02 f303 	lsl.w	r3, r2, r3
 8023806:	43da      	mvns	r2, r3
 8023808:	68bb      	ldr	r3, [r7, #8]
 802380a:	401a      	ands	r2, r3
 802380c:	697b      	ldr	r3, [r7, #20]
 802380e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023810:	f04f 31ff 	mov.w	r1, #4294967295
 8023814:	697b      	ldr	r3, [r7, #20]
 8023816:	fa01 f303 	lsl.w	r3, r1, r3
 802381a:	43d9      	mvns	r1, r3
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023820:	4313      	orrs	r3, r2
         );
}
 8023822:	4618      	mov	r0, r3
 8023824:	3724      	adds	r7, #36	; 0x24
 8023826:	46bd      	mov	sp, r7
 8023828:	f85d 7b04 	ldr.w	r7, [sp], #4
 802382c:	4770      	bx	lr
	...

08023830 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8023830:	b480      	push	{r7}
 8023832:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8023834:	f3bf 8f4f 	dsb	sy
}
 8023838:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802383a:	4b06      	ldr	r3, [pc, #24]	; (8023854 <__NVIC_SystemReset+0x24>)
 802383c:	68db      	ldr	r3, [r3, #12]
 802383e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8023842:	4904      	ldr	r1, [pc, #16]	; (8023854 <__NVIC_SystemReset+0x24>)
 8023844:	4b04      	ldr	r3, [pc, #16]	; (8023858 <__NVIC_SystemReset+0x28>)
 8023846:	4313      	orrs	r3, r2
 8023848:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802384a:	f3bf 8f4f 	dsb	sy
}
 802384e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8023850:	bf00      	nop
 8023852:	e7fd      	b.n	8023850 <__NVIC_SystemReset+0x20>
 8023854:	e000ed00 	.word	0xe000ed00
 8023858:	05fa0004 	.word	0x05fa0004

0802385c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802385c:	b580      	push	{r7, lr}
 802385e:	b082      	sub	sp, #8
 8023860:	af00      	add	r7, sp, #0
 8023862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023864:	6878      	ldr	r0, [r7, #4]
 8023866:	f7ff ff35 	bl	80236d4 <__NVIC_SetPriorityGrouping>
}
 802386a:	bf00      	nop
 802386c:	3708      	adds	r7, #8
 802386e:	46bd      	mov	sp, r7
 8023870:	bd80      	pop	{r7, pc}

08023872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8023872:	b580      	push	{r7, lr}
 8023874:	b086      	sub	sp, #24
 8023876:	af00      	add	r7, sp, #0
 8023878:	4603      	mov	r3, r0
 802387a:	60b9      	str	r1, [r7, #8]
 802387c:	607a      	str	r2, [r7, #4]
 802387e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023880:	2300      	movs	r3, #0
 8023882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8023884:	f7ff ff4a 	bl	802371c <__NVIC_GetPriorityGrouping>
 8023888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802388a:	687a      	ldr	r2, [r7, #4]
 802388c:	68b9      	ldr	r1, [r7, #8]
 802388e:	6978      	ldr	r0, [r7, #20]
 8023890:	f7ff ff9a 	bl	80237c8 <NVIC_EncodePriority>
 8023894:	4602      	mov	r2, r0
 8023896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802389a:	4611      	mov	r1, r2
 802389c:	4618      	mov	r0, r3
 802389e:	f7ff ff69 	bl	8023774 <__NVIC_SetPriority>
}
 80238a2:	bf00      	nop
 80238a4:	3718      	adds	r7, #24
 80238a6:	46bd      	mov	sp, r7
 80238a8:	bd80      	pop	{r7, pc}

080238aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80238aa:	b580      	push	{r7, lr}
 80238ac:	b082      	sub	sp, #8
 80238ae:	af00      	add	r7, sp, #0
 80238b0:	4603      	mov	r3, r0
 80238b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80238b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80238b8:	4618      	mov	r0, r3
 80238ba:	f7ff ff3d 	bl	8023738 <__NVIC_EnableIRQ>
}
 80238be:	bf00      	nop
 80238c0:	3708      	adds	r7, #8
 80238c2:	46bd      	mov	sp, r7
 80238c4:	bd80      	pop	{r7, pc}

080238c6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80238c6:	b580      	push	{r7, lr}
 80238c8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80238ca:	f7ff ffb1 	bl	8023830 <__NVIC_SystemReset>

080238ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80238ce:	b580      	push	{r7, lr}
 80238d0:	b082      	sub	sp, #8
 80238d2:	af00      	add	r7, sp, #0
 80238d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	2b00      	cmp	r3, #0
 80238da:	d101      	bne.n	80238e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80238dc:	2301      	movs	r3, #1
 80238de:	e00e      	b.n	80238fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80238e0:	687b      	ldr	r3, [r7, #4]
 80238e2:	795b      	ldrb	r3, [r3, #5]
 80238e4:	b2db      	uxtb	r3, r3
 80238e6:	2b00      	cmp	r3, #0
 80238e8:	d105      	bne.n	80238f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80238ea:	687b      	ldr	r3, [r7, #4]
 80238ec:	2200      	movs	r2, #0
 80238ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80238f0:	6878      	ldr	r0, [r7, #4]
 80238f2:	f7fd ff2b 	bl	802174c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80238f6:	687b      	ldr	r3, [r7, #4]
 80238f8:	2201      	movs	r2, #1
 80238fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80238fc:	2300      	movs	r3, #0
}
 80238fe:	4618      	mov	r0, r3
 8023900:	3708      	adds	r7, #8
 8023902:	46bd      	mov	sp, r7
 8023904:	bd80      	pop	{r7, pc}
	...

08023908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023908:	b580      	push	{r7, lr}
 802390a:	b086      	sub	sp, #24
 802390c:	af00      	add	r7, sp, #0
 802390e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8023910:	2300      	movs	r3, #0
 8023912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023914:	f7ff feae 	bl	8023674 <HAL_GetTick>
 8023918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	2b00      	cmp	r3, #0
 802391e:	d101      	bne.n	8023924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8023920:	2301      	movs	r3, #1
 8023922:	e099      	b.n	8023a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023924:	687b      	ldr	r3, [r7, #4]
 8023926:	2202      	movs	r2, #2
 8023928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802392c:	687b      	ldr	r3, [r7, #4]
 802392e:	2200      	movs	r2, #0
 8023930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	681b      	ldr	r3, [r3, #0]
 8023938:	681a      	ldr	r2, [r3, #0]
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	681b      	ldr	r3, [r3, #0]
 802393e:	f022 0201 	bic.w	r2, r2, #1
 8023942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023944:	e00f      	b.n	8023966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023946:	f7ff fe95 	bl	8023674 <HAL_GetTick>
 802394a:	4602      	mov	r2, r0
 802394c:	693b      	ldr	r3, [r7, #16]
 802394e:	1ad3      	subs	r3, r2, r3
 8023950:	2b05      	cmp	r3, #5
 8023952:	d908      	bls.n	8023966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023954:	687b      	ldr	r3, [r7, #4]
 8023956:	2220      	movs	r2, #32
 8023958:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	2203      	movs	r2, #3
 802395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023962:	2303      	movs	r3, #3
 8023964:	e078      	b.n	8023a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023966:	687b      	ldr	r3, [r7, #4]
 8023968:	681b      	ldr	r3, [r3, #0]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	f003 0301 	and.w	r3, r3, #1
 8023970:	2b00      	cmp	r3, #0
 8023972:	d1e8      	bne.n	8023946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023974:	687b      	ldr	r3, [r7, #4]
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	681b      	ldr	r3, [r3, #0]
 802397a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802397c:	697a      	ldr	r2, [r7, #20]
 802397e:	4b38      	ldr	r3, [pc, #224]	; (8023a60 <HAL_DMA_Init+0x158>)
 8023980:	4013      	ands	r3, r2
 8023982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	685a      	ldr	r2, [r3, #4]
 8023988:	687b      	ldr	r3, [r7, #4]
 802398a:	689b      	ldr	r3, [r3, #8]
 802398c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802398e:	687b      	ldr	r3, [r7, #4]
 8023990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023994:	687b      	ldr	r3, [r7, #4]
 8023996:	691b      	ldr	r3, [r3, #16]
 8023998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802399e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	699b      	ldr	r3, [r3, #24]
 80239a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	6a1b      	ldr	r3, [r3, #32]
 80239b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80239b2:	697a      	ldr	r2, [r7, #20]
 80239b4:	4313      	orrs	r3, r2
 80239b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239b8:	687b      	ldr	r3, [r7, #4]
 80239ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239bc:	2b04      	cmp	r3, #4
 80239be:	d107      	bne.n	80239d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239c8:	4313      	orrs	r3, r2
 80239ca:	697a      	ldr	r2, [r7, #20]
 80239cc:	4313      	orrs	r3, r2
 80239ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	697a      	ldr	r2, [r7, #20]
 80239d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	681b      	ldr	r3, [r3, #0]
 80239dc:	695b      	ldr	r3, [r3, #20]
 80239de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80239e0:	697b      	ldr	r3, [r7, #20]
 80239e2:	f023 0307 	bic.w	r3, r3, #7
 80239e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239ec:	697a      	ldr	r2, [r7, #20]
 80239ee:	4313      	orrs	r3, r2
 80239f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239f6:	2b04      	cmp	r3, #4
 80239f8:	d117      	bne.n	8023a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239fe:	697a      	ldr	r2, [r7, #20]
 8023a00:	4313      	orrs	r3, r2
 8023a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a08:	2b00      	cmp	r3, #0
 8023a0a:	d00e      	beq.n	8023a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023a0c:	6878      	ldr	r0, [r7, #4]
 8023a0e:	f000 f94f 	bl	8023cb0 <DMA_CheckFifoParam>
 8023a12:	4603      	mov	r3, r0
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	d008      	beq.n	8023a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	2240      	movs	r2, #64	; 0x40
 8023a1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023a1e:	687b      	ldr	r3, [r7, #4]
 8023a20:	2201      	movs	r2, #1
 8023a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023a26:	2301      	movs	r3, #1
 8023a28:	e016      	b.n	8023a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	681b      	ldr	r3, [r3, #0]
 8023a2e:	697a      	ldr	r2, [r7, #20]
 8023a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023a32:	6878      	ldr	r0, [r7, #4]
 8023a34:	f000 f906 	bl	8023c44 <DMA_CalcBaseAndBitshift>
 8023a38:	4603      	mov	r3, r0
 8023a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a40:	223f      	movs	r2, #63	; 0x3f
 8023a42:	409a      	lsls	r2, r3
 8023a44:	68fb      	ldr	r3, [r7, #12]
 8023a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	2200      	movs	r2, #0
 8023a4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	2201      	movs	r2, #1
 8023a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023a56:	2300      	movs	r3, #0
}
 8023a58:	4618      	mov	r0, r3
 8023a5a:	3718      	adds	r7, #24
 8023a5c:	46bd      	mov	sp, r7
 8023a5e:	bd80      	pop	{r7, pc}
 8023a60:	f010803f 	.word	0xf010803f

08023a64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023a64:	b580      	push	{r7, lr}
 8023a66:	b084      	sub	sp, #16
 8023a68:	af00      	add	r7, sp, #0
 8023a6a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023a6c:	687b      	ldr	r3, [r7, #4]
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	d101      	bne.n	8023a76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023a72:	2301      	movs	r3, #1
 8023a74:	e050      	b.n	8023b18 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023a7c:	b2db      	uxtb	r3, r3
 8023a7e:	2b02      	cmp	r3, #2
 8023a80:	d101      	bne.n	8023a86 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023a82:	2302      	movs	r3, #2
 8023a84:	e048      	b.n	8023b18 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	681a      	ldr	r2, [r3, #0]
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	681b      	ldr	r3, [r3, #0]
 8023a90:	f022 0201 	bic.w	r2, r2, #1
 8023a94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	681b      	ldr	r3, [r3, #0]
 8023a9a:	2200      	movs	r2, #0
 8023a9c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	2200      	movs	r2, #0
 8023aa4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023aa6:	687b      	ldr	r3, [r7, #4]
 8023aa8:	681b      	ldr	r3, [r3, #0]
 8023aaa:	2200      	movs	r2, #0
 8023aac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8023aae:	687b      	ldr	r3, [r7, #4]
 8023ab0:	681b      	ldr	r3, [r3, #0]
 8023ab2:	2200      	movs	r2, #0
 8023ab4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	2200      	movs	r2, #0
 8023abc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8023abe:	687b      	ldr	r3, [r7, #4]
 8023ac0:	681b      	ldr	r3, [r3, #0]
 8023ac2:	2221      	movs	r2, #33	; 0x21
 8023ac4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023ac6:	6878      	ldr	r0, [r7, #4]
 8023ac8:	f000 f8bc 	bl	8023c44 <DMA_CalcBaseAndBitshift>
 8023acc:	4603      	mov	r3, r0
 8023ace:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023ad0:	687b      	ldr	r3, [r7, #4]
 8023ad2:	2200      	movs	r2, #0
 8023ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	2200      	movs	r2, #0
 8023ada:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023adc:	687b      	ldr	r3, [r7, #4]
 8023ade:	2200      	movs	r2, #0
 8023ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	2200      	movs	r2, #0
 8023ae6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	2200      	movs	r2, #0
 8023aec:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023aee:	687b      	ldr	r3, [r7, #4]
 8023af0:	2200      	movs	r2, #0
 8023af2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023af4:	687b      	ldr	r3, [r7, #4]
 8023af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023af8:	223f      	movs	r2, #63	; 0x3f
 8023afa:	409a      	lsls	r2, r3
 8023afc:	68fb      	ldr	r3, [r7, #12]
 8023afe:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023b00:	687b      	ldr	r3, [r7, #4]
 8023b02:	2200      	movs	r2, #0
 8023b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	2200      	movs	r2, #0
 8023b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	2200      	movs	r2, #0
 8023b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023b16:	2300      	movs	r3, #0
}
 8023b18:	4618      	mov	r0, r3
 8023b1a:	3710      	adds	r7, #16
 8023b1c:	46bd      	mov	sp, r7
 8023b1e:	bd80      	pop	{r7, pc}

08023b20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8023b20:	b580      	push	{r7, lr}
 8023b22:	b084      	sub	sp, #16
 8023b24:	af00      	add	r7, sp, #0
 8023b26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023b2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8023b2e:	f7ff fda1 	bl	8023674 <HAL_GetTick>
 8023b32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023b34:	687b      	ldr	r3, [r7, #4]
 8023b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b3a:	b2db      	uxtb	r3, r3
 8023b3c:	2b02      	cmp	r3, #2
 8023b3e:	d008      	beq.n	8023b52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	2280      	movs	r2, #128	; 0x80
 8023b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	2200      	movs	r2, #0
 8023b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8023b4e:	2301      	movs	r3, #1
 8023b50:	e052      	b.n	8023bf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	681b      	ldr	r3, [r3, #0]
 8023b56:	681a      	ldr	r2, [r3, #0]
 8023b58:	687b      	ldr	r3, [r7, #4]
 8023b5a:	681b      	ldr	r3, [r3, #0]
 8023b5c:	f022 0216 	bic.w	r2, r2, #22
 8023b60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023b62:	687b      	ldr	r3, [r7, #4]
 8023b64:	681b      	ldr	r3, [r3, #0]
 8023b66:	695a      	ldr	r2, [r3, #20]
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	681b      	ldr	r3, [r3, #0]
 8023b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023b70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023b72:	687b      	ldr	r3, [r7, #4]
 8023b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b76:	2b00      	cmp	r3, #0
 8023b78:	d103      	bne.n	8023b82 <HAL_DMA_Abort+0x62>
 8023b7a:	687b      	ldr	r3, [r7, #4]
 8023b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d007      	beq.n	8023b92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b82:	687b      	ldr	r3, [r7, #4]
 8023b84:	681b      	ldr	r3, [r3, #0]
 8023b86:	681a      	ldr	r2, [r3, #0]
 8023b88:	687b      	ldr	r3, [r7, #4]
 8023b8a:	681b      	ldr	r3, [r3, #0]
 8023b8c:	f022 0208 	bic.w	r2, r2, #8
 8023b90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023b92:	687b      	ldr	r3, [r7, #4]
 8023b94:	681b      	ldr	r3, [r3, #0]
 8023b96:	681a      	ldr	r2, [r3, #0]
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	681b      	ldr	r3, [r3, #0]
 8023b9c:	f022 0201 	bic.w	r2, r2, #1
 8023ba0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023ba2:	e013      	b.n	8023bcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023ba4:	f7ff fd66 	bl	8023674 <HAL_GetTick>
 8023ba8:	4602      	mov	r2, r0
 8023baa:	68bb      	ldr	r3, [r7, #8]
 8023bac:	1ad3      	subs	r3, r2, r3
 8023bae:	2b05      	cmp	r3, #5
 8023bb0:	d90c      	bls.n	8023bcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	2220      	movs	r2, #32
 8023bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	2203      	movs	r2, #3
 8023bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	2200      	movs	r2, #0
 8023bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023bc8:	2303      	movs	r3, #3
 8023bca:	e015      	b.n	8023bf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	681b      	ldr	r3, [r3, #0]
 8023bd2:	f003 0301 	and.w	r3, r3, #1
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d1e4      	bne.n	8023ba4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023bde:	223f      	movs	r2, #63	; 0x3f
 8023be0:	409a      	lsls	r2, r3
 8023be2:	68fb      	ldr	r3, [r7, #12]
 8023be4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023be6:	687b      	ldr	r3, [r7, #4]
 8023be8:	2201      	movs	r2, #1
 8023bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	2200      	movs	r2, #0
 8023bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023bf6:	2300      	movs	r3, #0
}
 8023bf8:	4618      	mov	r0, r3
 8023bfa:	3710      	adds	r7, #16
 8023bfc:	46bd      	mov	sp, r7
 8023bfe:	bd80      	pop	{r7, pc}

08023c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023c00:	b480      	push	{r7}
 8023c02:	b083      	sub	sp, #12
 8023c04:	af00      	add	r7, sp, #0
 8023c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023c08:	687b      	ldr	r3, [r7, #4]
 8023c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023c0e:	b2db      	uxtb	r3, r3
 8023c10:	2b02      	cmp	r3, #2
 8023c12:	d004      	beq.n	8023c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	2280      	movs	r2, #128	; 0x80
 8023c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023c1a:	2301      	movs	r3, #1
 8023c1c:	e00c      	b.n	8023c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023c1e:	687b      	ldr	r3, [r7, #4]
 8023c20:	2205      	movs	r2, #5
 8023c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	681b      	ldr	r3, [r3, #0]
 8023c2a:	681a      	ldr	r2, [r3, #0]
 8023c2c:	687b      	ldr	r3, [r7, #4]
 8023c2e:	681b      	ldr	r3, [r3, #0]
 8023c30:	f022 0201 	bic.w	r2, r2, #1
 8023c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023c36:	2300      	movs	r3, #0
}
 8023c38:	4618      	mov	r0, r3
 8023c3a:	370c      	adds	r7, #12
 8023c3c:	46bd      	mov	sp, r7
 8023c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c42:	4770      	bx	lr

08023c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023c44:	b480      	push	{r7}
 8023c46:	b085      	sub	sp, #20
 8023c48:	af00      	add	r7, sp, #0
 8023c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023c4c:	687b      	ldr	r3, [r7, #4]
 8023c4e:	681b      	ldr	r3, [r3, #0]
 8023c50:	b2db      	uxtb	r3, r3
 8023c52:	3b10      	subs	r3, #16
 8023c54:	4a14      	ldr	r2, [pc, #80]	; (8023ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8023c56:	fba2 2303 	umull	r2, r3, r2, r3
 8023c5a:	091b      	lsrs	r3, r3, #4
 8023c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023c5e:	4a13      	ldr	r2, [pc, #76]	; (8023cac <DMA_CalcBaseAndBitshift+0x68>)
 8023c60:	68fb      	ldr	r3, [r7, #12]
 8023c62:	4413      	add	r3, r2
 8023c64:	781b      	ldrb	r3, [r3, #0]
 8023c66:	461a      	mov	r2, r3
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023c6c:	68fb      	ldr	r3, [r7, #12]
 8023c6e:	2b03      	cmp	r3, #3
 8023c70:	d909      	bls.n	8023c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	681b      	ldr	r3, [r3, #0]
 8023c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023c7a:	f023 0303 	bic.w	r3, r3, #3
 8023c7e:	1d1a      	adds	r2, r3, #4
 8023c80:	687b      	ldr	r3, [r7, #4]
 8023c82:	659a      	str	r2, [r3, #88]	; 0x58
 8023c84:	e007      	b.n	8023c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023c86:	687b      	ldr	r3, [r7, #4]
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023c8e:	f023 0303 	bic.w	r3, r3, #3
 8023c92:	687a      	ldr	r2, [r7, #4]
 8023c94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023c96:	687b      	ldr	r3, [r7, #4]
 8023c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	3714      	adds	r7, #20
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca4:	4770      	bx	lr
 8023ca6:	bf00      	nop
 8023ca8:	aaaaaaab 	.word	0xaaaaaaab
 8023cac:	08031a24 	.word	0x08031a24

08023cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023cb0:	b480      	push	{r7}
 8023cb2:	b085      	sub	sp, #20
 8023cb4:	af00      	add	r7, sp, #0
 8023cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023cb8:	2300      	movs	r3, #0
 8023cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023cbc:	687b      	ldr	r3, [r7, #4]
 8023cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	699b      	ldr	r3, [r3, #24]
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	d11f      	bne.n	8023d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023cca:	68bb      	ldr	r3, [r7, #8]
 8023ccc:	2b03      	cmp	r3, #3
 8023cce:	d856      	bhi.n	8023d7e <DMA_CheckFifoParam+0xce>
 8023cd0:	a201      	add	r2, pc, #4	; (adr r2, 8023cd8 <DMA_CheckFifoParam+0x28>)
 8023cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023cd6:	bf00      	nop
 8023cd8:	08023ce9 	.word	0x08023ce9
 8023cdc:	08023cfb 	.word	0x08023cfb
 8023ce0:	08023ce9 	.word	0x08023ce9
 8023ce4:	08023d7f 	.word	0x08023d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023cf0:	2b00      	cmp	r3, #0
 8023cf2:	d046      	beq.n	8023d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023cf4:	2301      	movs	r3, #1
 8023cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023cf8:	e043      	b.n	8023d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023cfa:	687b      	ldr	r3, [r7, #4]
 8023cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023d02:	d140      	bne.n	8023d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023d04:	2301      	movs	r3, #1
 8023d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d08:	e03d      	b.n	8023d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023d0a:	687b      	ldr	r3, [r7, #4]
 8023d0c:	699b      	ldr	r3, [r3, #24]
 8023d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023d12:	d121      	bne.n	8023d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023d14:	68bb      	ldr	r3, [r7, #8]
 8023d16:	2b03      	cmp	r3, #3
 8023d18:	d837      	bhi.n	8023d8a <DMA_CheckFifoParam+0xda>
 8023d1a:	a201      	add	r2, pc, #4	; (adr r2, 8023d20 <DMA_CheckFifoParam+0x70>)
 8023d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023d20:	08023d31 	.word	0x08023d31
 8023d24:	08023d37 	.word	0x08023d37
 8023d28:	08023d31 	.word	0x08023d31
 8023d2c:	08023d49 	.word	0x08023d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023d30:	2301      	movs	r3, #1
 8023d32:	73fb      	strb	r3, [r7, #15]
      break;
 8023d34:	e030      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d025      	beq.n	8023d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023d42:	2301      	movs	r3, #1
 8023d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d46:	e022      	b.n	8023d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023d50:	d11f      	bne.n	8023d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023d52:	2301      	movs	r3, #1
 8023d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023d56:	e01c      	b.n	8023d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023d58:	68bb      	ldr	r3, [r7, #8]
 8023d5a:	2b02      	cmp	r3, #2
 8023d5c:	d903      	bls.n	8023d66 <DMA_CheckFifoParam+0xb6>
 8023d5e:	68bb      	ldr	r3, [r7, #8]
 8023d60:	2b03      	cmp	r3, #3
 8023d62:	d003      	beq.n	8023d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023d64:	e018      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023d66:	2301      	movs	r3, #1
 8023d68:	73fb      	strb	r3, [r7, #15]
      break;
 8023d6a:	e015      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d6c:	687b      	ldr	r3, [r7, #4]
 8023d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	d00e      	beq.n	8023d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023d78:	2301      	movs	r3, #1
 8023d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8023d7c:	e00b      	b.n	8023d96 <DMA_CheckFifoParam+0xe6>
      break;
 8023d7e:	bf00      	nop
 8023d80:	e00a      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;
 8023d82:	bf00      	nop
 8023d84:	e008      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;
 8023d86:	bf00      	nop
 8023d88:	e006      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;
 8023d8a:	bf00      	nop
 8023d8c:	e004      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;
 8023d8e:	bf00      	nop
 8023d90:	e002      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8023d92:	bf00      	nop
 8023d94:	e000      	b.n	8023d98 <DMA_CheckFifoParam+0xe8>
      break;
 8023d96:	bf00      	nop
    }
  } 
  
  return status; 
 8023d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d9a:	4618      	mov	r0, r3
 8023d9c:	3714      	adds	r7, #20
 8023d9e:	46bd      	mov	sp, r7
 8023da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023da4:	4770      	bx	lr
 8023da6:	bf00      	nop

08023da8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023da8:	b580      	push	{r7, lr}
 8023daa:	b082      	sub	sp, #8
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023db0:	687b      	ldr	r3, [r7, #4]
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	d101      	bne.n	8023dba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023db6:	2301      	movs	r3, #1
 8023db8:	e03b      	b.n	8023e32 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023dc0:	b2db      	uxtb	r3, r3
 8023dc2:	2b00      	cmp	r3, #0
 8023dc4:	d106      	bne.n	8023dd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023dc6:	687b      	ldr	r3, [r7, #4]
 8023dc8:	2200      	movs	r2, #0
 8023dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023dce:	6878      	ldr	r0, [r7, #4]
 8023dd0:	f7fd fcde 	bl	8021790 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023dd4:	687b      	ldr	r3, [r7, #4]
 8023dd6:	2202      	movs	r2, #2
 8023dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023ddc:	687b      	ldr	r3, [r7, #4]
 8023dde:	681b      	ldr	r3, [r3, #0]
 8023de0:	681b      	ldr	r3, [r3, #0]
 8023de2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	685a      	ldr	r2, [r3, #4]
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	430a      	orrs	r2, r1
 8023df0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023df2:	687b      	ldr	r3, [r7, #4]
 8023df4:	681b      	ldr	r3, [r3, #0]
 8023df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023df8:	f023 0107 	bic.w	r1, r3, #7
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	689a      	ldr	r2, [r3, #8]
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	681b      	ldr	r3, [r3, #0]
 8023e04:	430a      	orrs	r2, r1
 8023e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	681b      	ldr	r3, [r3, #0]
 8023e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023e12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023e16:	687a      	ldr	r2, [r7, #4]
 8023e18:	68d1      	ldr	r1, [r2, #12]
 8023e1a:	687a      	ldr	r2, [r7, #4]
 8023e1c:	6812      	ldr	r2, [r2, #0]
 8023e1e:	430b      	orrs	r3, r1
 8023e20:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	2200      	movs	r2, #0
 8023e26:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	2201      	movs	r2, #1
 8023e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023e30:	2300      	movs	r3, #0
}
 8023e32:	4618      	mov	r0, r3
 8023e34:	3708      	adds	r7, #8
 8023e36:	46bd      	mov	sp, r7
 8023e38:	bd80      	pop	{r7, pc}

08023e3a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023e3a:	b580      	push	{r7, lr}
 8023e3c:	b086      	sub	sp, #24
 8023e3e:	af02      	add	r7, sp, #8
 8023e40:	60f8      	str	r0, [r7, #12]
 8023e42:	60b9      	str	r1, [r7, #8]
 8023e44:	607a      	str	r2, [r7, #4]
 8023e46:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023e48:	68fb      	ldr	r3, [r7, #12]
 8023e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023e4e:	2b01      	cmp	r3, #1
 8023e50:	d101      	bne.n	8023e56 <HAL_DMA2D_Start+0x1c>
 8023e52:	2302      	movs	r3, #2
 8023e54:	e018      	b.n	8023e88 <HAL_DMA2D_Start+0x4e>
 8023e56:	68fb      	ldr	r3, [r7, #12]
 8023e58:	2201      	movs	r2, #1
 8023e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023e5e:	68fb      	ldr	r3, [r7, #12]
 8023e60:	2202      	movs	r2, #2
 8023e62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023e66:	69bb      	ldr	r3, [r7, #24]
 8023e68:	9300      	str	r3, [sp, #0]
 8023e6a:	683b      	ldr	r3, [r7, #0]
 8023e6c:	687a      	ldr	r2, [r7, #4]
 8023e6e:	68b9      	ldr	r1, [r7, #8]
 8023e70:	68f8      	ldr	r0, [r7, #12]
 8023e72:	f000 fa99 	bl	80243a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023e76:	68fb      	ldr	r3, [r7, #12]
 8023e78:	681b      	ldr	r3, [r3, #0]
 8023e7a:	681a      	ldr	r2, [r3, #0]
 8023e7c:	68fb      	ldr	r3, [r7, #12]
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	f042 0201 	orr.w	r2, r2, #1
 8023e84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023e86:	2300      	movs	r3, #0
}
 8023e88:	4618      	mov	r0, r3
 8023e8a:	3710      	adds	r7, #16
 8023e8c:	46bd      	mov	sp, r7
 8023e8e:	bd80      	pop	{r7, pc}

08023e90 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023e90:	b580      	push	{r7, lr}
 8023e92:	b086      	sub	sp, #24
 8023e94:	af00      	add	r7, sp, #0
 8023e96:	6078      	str	r0, [r7, #4]
 8023e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023e9a:	2300      	movs	r3, #0
 8023e9c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	681b      	ldr	r3, [r3, #0]
 8023ea2:	681b      	ldr	r3, [r3, #0]
 8023ea4:	f003 0301 	and.w	r3, r3, #1
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	d056      	beq.n	8023f5a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023eac:	f7ff fbe2 	bl	8023674 <HAL_GetTick>
 8023eb0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023eb2:	e04b      	b.n	8023f4c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	681b      	ldr	r3, [r3, #0]
 8023eb8:	685b      	ldr	r3, [r3, #4]
 8023eba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023ebc:	68fb      	ldr	r3, [r7, #12]
 8023ebe:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	d023      	beq.n	8023f0e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023ec6:	68fb      	ldr	r3, [r7, #12]
 8023ec8:	f003 0320 	and.w	r3, r3, #32
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	d005      	beq.n	8023edc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ed4:	f043 0202 	orr.w	r2, r3, #2
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023edc:	68fb      	ldr	r3, [r7, #12]
 8023ede:	f003 0301 	and.w	r3, r3, #1
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d005      	beq.n	8023ef2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eea:	f043 0201 	orr.w	r2, r3, #1
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023ef2:	687b      	ldr	r3, [r7, #4]
 8023ef4:	681b      	ldr	r3, [r3, #0]
 8023ef6:	2221      	movs	r2, #33	; 0x21
 8023ef8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	2204      	movs	r2, #4
 8023efe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	2200      	movs	r2, #0
 8023f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023f0a:	2301      	movs	r3, #1
 8023f0c:	e0a5      	b.n	802405a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023f0e:	683b      	ldr	r3, [r7, #0]
 8023f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f14:	d01a      	beq.n	8023f4c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023f16:	f7ff fbad 	bl	8023674 <HAL_GetTick>
 8023f1a:	4602      	mov	r2, r0
 8023f1c:	697b      	ldr	r3, [r7, #20]
 8023f1e:	1ad3      	subs	r3, r2, r3
 8023f20:	683a      	ldr	r2, [r7, #0]
 8023f22:	429a      	cmp	r2, r3
 8023f24:	d302      	bcc.n	8023f2c <HAL_DMA2D_PollForTransfer+0x9c>
 8023f26:	683b      	ldr	r3, [r7, #0]
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	d10f      	bne.n	8023f4c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023f2c:	687b      	ldr	r3, [r7, #4]
 8023f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f30:	f043 0220 	orr.w	r2, r3, #32
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023f38:	687b      	ldr	r3, [r7, #4]
 8023f3a:	2203      	movs	r2, #3
 8023f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	2200      	movs	r2, #0
 8023f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023f48:	2303      	movs	r3, #3
 8023f4a:	e086      	b.n	802405a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	685b      	ldr	r3, [r3, #4]
 8023f52:	f003 0302 	and.w	r3, r3, #2
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d0ac      	beq.n	8023eb4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023f5a:	687b      	ldr	r3, [r7, #4]
 8023f5c:	681b      	ldr	r3, [r3, #0]
 8023f5e:	69db      	ldr	r3, [r3, #28]
 8023f60:	f003 0320 	and.w	r3, r3, #32
 8023f64:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023f66:	687b      	ldr	r3, [r7, #4]
 8023f68:	681b      	ldr	r3, [r3, #0]
 8023f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f6c:	f003 0320 	and.w	r3, r3, #32
 8023f70:	693a      	ldr	r2, [r7, #16]
 8023f72:	4313      	orrs	r3, r2
 8023f74:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023f76:	693b      	ldr	r3, [r7, #16]
 8023f78:	2b00      	cmp	r3, #0
 8023f7a:	d061      	beq.n	8024040 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023f7c:	f7ff fb7a 	bl	8023674 <HAL_GetTick>
 8023f80:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023f82:	e056      	b.n	8024032 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	681b      	ldr	r3, [r3, #0]
 8023f88:	685b      	ldr	r3, [r3, #4]
 8023f8a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023f8c:	68fb      	ldr	r3, [r7, #12]
 8023f8e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023f92:	2b00      	cmp	r3, #0
 8023f94:	d02e      	beq.n	8023ff4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023f96:	68fb      	ldr	r3, [r7, #12]
 8023f98:	f003 0308 	and.w	r3, r3, #8
 8023f9c:	2b00      	cmp	r3, #0
 8023f9e:	d005      	beq.n	8023fac <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fa4:	f043 0204 	orr.w	r2, r3, #4
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023fac:	68fb      	ldr	r3, [r7, #12]
 8023fae:	f003 0320 	and.w	r3, r3, #32
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	d005      	beq.n	8023fc2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fba:	f043 0202 	orr.w	r2, r3, #2
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023fc2:	68fb      	ldr	r3, [r7, #12]
 8023fc4:	f003 0301 	and.w	r3, r3, #1
 8023fc8:	2b00      	cmp	r3, #0
 8023fca:	d005      	beq.n	8023fd8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023fcc:	687b      	ldr	r3, [r7, #4]
 8023fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fd0:	f043 0201 	orr.w	r2, r3, #1
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	2229      	movs	r2, #41	; 0x29
 8023fde:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023fe0:	687b      	ldr	r3, [r7, #4]
 8023fe2:	2204      	movs	r2, #4
 8023fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	2200      	movs	r2, #0
 8023fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023ff0:	2301      	movs	r3, #1
 8023ff2:	e032      	b.n	802405a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023ff4:	683b      	ldr	r3, [r7, #0]
 8023ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ffa:	d01a      	beq.n	8024032 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023ffc:	f7ff fb3a 	bl	8023674 <HAL_GetTick>
 8024000:	4602      	mov	r2, r0
 8024002:	697b      	ldr	r3, [r7, #20]
 8024004:	1ad3      	subs	r3, r2, r3
 8024006:	683a      	ldr	r2, [r7, #0]
 8024008:	429a      	cmp	r2, r3
 802400a:	d302      	bcc.n	8024012 <HAL_DMA2D_PollForTransfer+0x182>
 802400c:	683b      	ldr	r3, [r7, #0]
 802400e:	2b00      	cmp	r3, #0
 8024010:	d10f      	bne.n	8024032 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024016:	f043 0220 	orr.w	r2, r3, #32
 802401a:	687b      	ldr	r3, [r7, #4]
 802401c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802401e:	687b      	ldr	r3, [r7, #4]
 8024020:	2203      	movs	r2, #3
 8024022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	2200      	movs	r2, #0
 802402a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 802402e:	2303      	movs	r3, #3
 8024030:	e013      	b.n	802405a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	685b      	ldr	r3, [r3, #4]
 8024038:	f003 0310 	and.w	r3, r3, #16
 802403c:	2b00      	cmp	r3, #0
 802403e:	d0a1      	beq.n	8023f84 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8024040:	687b      	ldr	r3, [r7, #4]
 8024042:	681b      	ldr	r3, [r3, #0]
 8024044:	2212      	movs	r2, #18
 8024046:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024048:	687b      	ldr	r3, [r7, #4]
 802404a:	2201      	movs	r2, #1
 802404c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8024050:	687b      	ldr	r3, [r7, #4]
 8024052:	2200      	movs	r2, #0
 8024054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024058:	2300      	movs	r3, #0
}
 802405a:	4618      	mov	r0, r3
 802405c:	3718      	adds	r7, #24
 802405e:	46bd      	mov	sp, r7
 8024060:	bd80      	pop	{r7, pc}

08024062 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8024062:	b580      	push	{r7, lr}
 8024064:	b084      	sub	sp, #16
 8024066:	af00      	add	r7, sp, #0
 8024068:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	685b      	ldr	r3, [r3, #4]
 8024070:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8024072:	687b      	ldr	r3, [r7, #4]
 8024074:	681b      	ldr	r3, [r3, #0]
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 802407a:	68fb      	ldr	r3, [r7, #12]
 802407c:	f003 0301 	and.w	r3, r3, #1
 8024080:	2b00      	cmp	r3, #0
 8024082:	d026      	beq.n	80240d2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8024084:	68bb      	ldr	r3, [r7, #8]
 8024086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802408a:	2b00      	cmp	r3, #0
 802408c:	d021      	beq.n	80240d2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	681a      	ldr	r2, [r3, #0]
 8024094:	687b      	ldr	r3, [r7, #4]
 8024096:	681b      	ldr	r3, [r3, #0]
 8024098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802409c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240a2:	f043 0201 	orr.w	r2, r3, #1
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	681b      	ldr	r3, [r3, #0]
 80240ae:	2201      	movs	r2, #1
 80240b0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80240b2:	687b      	ldr	r3, [r7, #4]
 80240b4:	2204      	movs	r2, #4
 80240b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80240ba:	687b      	ldr	r3, [r7, #4]
 80240bc:	2200      	movs	r2, #0
 80240be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	695b      	ldr	r3, [r3, #20]
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	d003      	beq.n	80240d2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	695b      	ldr	r3, [r3, #20]
 80240ce:	6878      	ldr	r0, [r7, #4]
 80240d0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80240d2:	68fb      	ldr	r3, [r7, #12]
 80240d4:	f003 0320 	and.w	r3, r3, #32
 80240d8:	2b00      	cmp	r3, #0
 80240da:	d026      	beq.n	802412a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80240dc:	68bb      	ldr	r3, [r7, #8]
 80240de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	d021      	beq.n	802412a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	681b      	ldr	r3, [r3, #0]
 80240ea:	681a      	ldr	r2, [r3, #0]
 80240ec:	687b      	ldr	r3, [r7, #4]
 80240ee:	681b      	ldr	r3, [r3, #0]
 80240f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80240f4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	2220      	movs	r2, #32
 80240fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80240fe:	687b      	ldr	r3, [r7, #4]
 8024100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024102:	f043 0202 	orr.w	r2, r3, #2
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	2204      	movs	r2, #4
 802410e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	2200      	movs	r2, #0
 8024116:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802411a:	687b      	ldr	r3, [r7, #4]
 802411c:	695b      	ldr	r3, [r3, #20]
 802411e:	2b00      	cmp	r3, #0
 8024120:	d003      	beq.n	802412a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8024122:	687b      	ldr	r3, [r7, #4]
 8024124:	695b      	ldr	r3, [r3, #20]
 8024126:	6878      	ldr	r0, [r7, #4]
 8024128:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 802412a:	68fb      	ldr	r3, [r7, #12]
 802412c:	f003 0308 	and.w	r3, r3, #8
 8024130:	2b00      	cmp	r3, #0
 8024132:	d026      	beq.n	8024182 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8024134:	68bb      	ldr	r3, [r7, #8]
 8024136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802413a:	2b00      	cmp	r3, #0
 802413c:	d021      	beq.n	8024182 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 802413e:	687b      	ldr	r3, [r7, #4]
 8024140:	681b      	ldr	r3, [r3, #0]
 8024142:	681a      	ldr	r2, [r3, #0]
 8024144:	687b      	ldr	r3, [r7, #4]
 8024146:	681b      	ldr	r3, [r3, #0]
 8024148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802414c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	681b      	ldr	r3, [r3, #0]
 8024152:	2208      	movs	r2, #8
 8024154:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8024156:	687b      	ldr	r3, [r7, #4]
 8024158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802415a:	f043 0204 	orr.w	r2, r3, #4
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8024162:	687b      	ldr	r3, [r7, #4]
 8024164:	2204      	movs	r2, #4
 8024166:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802416a:	687b      	ldr	r3, [r7, #4]
 802416c:	2200      	movs	r2, #0
 802416e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8024172:	687b      	ldr	r3, [r7, #4]
 8024174:	695b      	ldr	r3, [r3, #20]
 8024176:	2b00      	cmp	r3, #0
 8024178:	d003      	beq.n	8024182 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 802417a:	687b      	ldr	r3, [r7, #4]
 802417c:	695b      	ldr	r3, [r3, #20]
 802417e:	6878      	ldr	r0, [r7, #4]
 8024180:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8024182:	68fb      	ldr	r3, [r7, #12]
 8024184:	f003 0304 	and.w	r3, r3, #4
 8024188:	2b00      	cmp	r3, #0
 802418a:	d013      	beq.n	80241b4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 802418c:	68bb      	ldr	r3, [r7, #8]
 802418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024192:	2b00      	cmp	r3, #0
 8024194:	d00e      	beq.n	80241b4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8024196:	687b      	ldr	r3, [r7, #4]
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	681a      	ldr	r2, [r3, #0]
 802419c:	687b      	ldr	r3, [r7, #4]
 802419e:	681b      	ldr	r3, [r3, #0]
 80241a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80241a4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80241a6:	687b      	ldr	r3, [r7, #4]
 80241a8:	681b      	ldr	r3, [r3, #0]
 80241aa:	2204      	movs	r2, #4
 80241ac:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80241ae:	6878      	ldr	r0, [r7, #4]
 80241b0:	f000 f853 	bl	802425a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80241b4:	68fb      	ldr	r3, [r7, #12]
 80241b6:	f003 0302 	and.w	r3, r3, #2
 80241ba:	2b00      	cmp	r3, #0
 80241bc:	d024      	beq.n	8024208 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80241be:	68bb      	ldr	r3, [r7, #8]
 80241c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80241c4:	2b00      	cmp	r3, #0
 80241c6:	d01f      	beq.n	8024208 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	681b      	ldr	r3, [r3, #0]
 80241cc:	681a      	ldr	r2, [r3, #0]
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	681b      	ldr	r3, [r3, #0]
 80241d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80241d6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	681b      	ldr	r3, [r3, #0]
 80241dc:	2202      	movs	r2, #2
 80241de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	2201      	movs	r2, #1
 80241ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	2200      	movs	r2, #0
 80241f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	691b      	ldr	r3, [r3, #16]
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	d003      	beq.n	8024208 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	691b      	ldr	r3, [r3, #16]
 8024204:	6878      	ldr	r0, [r7, #4]
 8024206:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8024208:	68fb      	ldr	r3, [r7, #12]
 802420a:	f003 0310 	and.w	r3, r3, #16
 802420e:	2b00      	cmp	r3, #0
 8024210:	d01f      	beq.n	8024252 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8024212:	68bb      	ldr	r3, [r7, #8]
 8024214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024218:	2b00      	cmp	r3, #0
 802421a:	d01a      	beq.n	8024252 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 802421c:	687b      	ldr	r3, [r7, #4]
 802421e:	681b      	ldr	r3, [r3, #0]
 8024220:	681a      	ldr	r2, [r3, #0]
 8024222:	687b      	ldr	r3, [r7, #4]
 8024224:	681b      	ldr	r3, [r3, #0]
 8024226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802422a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	2210      	movs	r2, #16
 8024232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802423c:	687b      	ldr	r3, [r7, #4]
 802423e:	2201      	movs	r2, #1
 8024240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	2200      	movs	r2, #0
 8024248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 802424c:	6878      	ldr	r0, [r7, #4]
 802424e:	f000 f80e 	bl	802426e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8024252:	bf00      	nop
 8024254:	3710      	adds	r7, #16
 8024256:	46bd      	mov	sp, r7
 8024258:	bd80      	pop	{r7, pc}

0802425a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802425a:	b480      	push	{r7}
 802425c:	b083      	sub	sp, #12
 802425e:	af00      	add	r7, sp, #0
 8024260:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8024262:	bf00      	nop
 8024264:	370c      	adds	r7, #12
 8024266:	46bd      	mov	sp, r7
 8024268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802426c:	4770      	bx	lr

0802426e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802426e:	b480      	push	{r7}
 8024270:	b083      	sub	sp, #12
 8024272:	af00      	add	r7, sp, #0
 8024274:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8024276:	bf00      	nop
 8024278:	370c      	adds	r7, #12
 802427a:	46bd      	mov	sp, r7
 802427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024280:	4770      	bx	lr
	...

08024284 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8024284:	b480      	push	{r7}
 8024286:	b087      	sub	sp, #28
 8024288:	af00      	add	r7, sp, #0
 802428a:	6078      	str	r0, [r7, #4]
 802428c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	685b      	ldr	r3, [r3, #4]
 8024292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8024296:	687b      	ldr	r3, [r7, #4]
 8024298:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802429c:	2b01      	cmp	r3, #1
 802429e:	d101      	bne.n	80242a4 <HAL_DMA2D_ConfigLayer+0x20>
 80242a0:	2302      	movs	r3, #2
 80242a2:	e079      	b.n	8024398 <HAL_DMA2D_ConfigLayer+0x114>
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	2201      	movs	r2, #1
 80242a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	2202      	movs	r2, #2
 80242b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80242b4:	683b      	ldr	r3, [r7, #0]
 80242b6:	011b      	lsls	r3, r3, #4
 80242b8:	3318      	adds	r3, #24
 80242ba:	687a      	ldr	r2, [r7, #4]
 80242bc:	4413      	add	r3, r2
 80242be:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80242c0:	693b      	ldr	r3, [r7, #16]
 80242c2:	685a      	ldr	r2, [r3, #4]
 80242c4:	693b      	ldr	r3, [r7, #16]
 80242c6:	689b      	ldr	r3, [r3, #8]
 80242c8:	041b      	lsls	r3, r3, #16
 80242ca:	4313      	orrs	r3, r2
 80242cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80242ce:	4b35      	ldr	r3, [pc, #212]	; (80243a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80242d0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80242d2:	693b      	ldr	r3, [r7, #16]
 80242d4:	685b      	ldr	r3, [r3, #4]
 80242d6:	2b0a      	cmp	r3, #10
 80242d8:	d003      	beq.n	80242e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80242da:	693b      	ldr	r3, [r7, #16]
 80242dc:	685b      	ldr	r3, [r3, #4]
 80242de:	2b09      	cmp	r3, #9
 80242e0:	d107      	bne.n	80242f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80242e2:	693b      	ldr	r3, [r7, #16]
 80242e4:	68db      	ldr	r3, [r3, #12]
 80242e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80242ea:	697a      	ldr	r2, [r7, #20]
 80242ec:	4313      	orrs	r3, r2
 80242ee:	617b      	str	r3, [r7, #20]
 80242f0:	e005      	b.n	80242fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80242f2:	693b      	ldr	r3, [r7, #16]
 80242f4:	68db      	ldr	r3, [r3, #12]
 80242f6:	061b      	lsls	r3, r3, #24
 80242f8:	697a      	ldr	r2, [r7, #20]
 80242fa:	4313      	orrs	r3, r2
 80242fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80242fe:	683b      	ldr	r3, [r7, #0]
 8024300:	2b00      	cmp	r3, #0
 8024302:	d120      	bne.n	8024346 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802430a:	68fb      	ldr	r3, [r7, #12]
 802430c:	43db      	mvns	r3, r3
 802430e:	ea02 0103 	and.w	r1, r2, r3
 8024312:	687b      	ldr	r3, [r7, #4]
 8024314:	681b      	ldr	r3, [r3, #0]
 8024316:	697a      	ldr	r2, [r7, #20]
 8024318:	430a      	orrs	r2, r1
 802431a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	693a      	ldr	r2, [r7, #16]
 8024322:	6812      	ldr	r2, [r2, #0]
 8024324:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024326:	693b      	ldr	r3, [r7, #16]
 8024328:	685b      	ldr	r3, [r3, #4]
 802432a:	2b0a      	cmp	r3, #10
 802432c:	d003      	beq.n	8024336 <HAL_DMA2D_ConfigLayer+0xb2>
 802432e:	693b      	ldr	r3, [r7, #16]
 8024330:	685b      	ldr	r3, [r3, #4]
 8024332:	2b09      	cmp	r3, #9
 8024334:	d127      	bne.n	8024386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8024336:	693b      	ldr	r3, [r7, #16]
 8024338:	68da      	ldr	r2, [r3, #12]
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	681b      	ldr	r3, [r3, #0]
 802433e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8024342:	629a      	str	r2, [r3, #40]	; 0x28
 8024344:	e01f      	b.n	8024386 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	681b      	ldr	r3, [r3, #0]
 802434a:	69da      	ldr	r2, [r3, #28]
 802434c:	68fb      	ldr	r3, [r7, #12]
 802434e:	43db      	mvns	r3, r3
 8024350:	ea02 0103 	and.w	r1, r2, r3
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	681b      	ldr	r3, [r3, #0]
 8024358:	697a      	ldr	r2, [r7, #20]
 802435a:	430a      	orrs	r2, r1
 802435c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802435e:	687b      	ldr	r3, [r7, #4]
 8024360:	681b      	ldr	r3, [r3, #0]
 8024362:	693a      	ldr	r2, [r7, #16]
 8024364:	6812      	ldr	r2, [r2, #0]
 8024366:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024368:	693b      	ldr	r3, [r7, #16]
 802436a:	685b      	ldr	r3, [r3, #4]
 802436c:	2b0a      	cmp	r3, #10
 802436e:	d003      	beq.n	8024378 <HAL_DMA2D_ConfigLayer+0xf4>
 8024370:	693b      	ldr	r3, [r7, #16]
 8024372:	685b      	ldr	r3, [r3, #4]
 8024374:	2b09      	cmp	r3, #9
 8024376:	d106      	bne.n	8024386 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8024378:	693b      	ldr	r3, [r7, #16]
 802437a:	68da      	ldr	r2, [r3, #12]
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	681b      	ldr	r3, [r3, #0]
 8024380:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8024384:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	2201      	movs	r2, #1
 802438a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 802438e:	687b      	ldr	r3, [r7, #4]
 8024390:	2200      	movs	r2, #0
 8024392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024396:	2300      	movs	r3, #0
}
 8024398:	4618      	mov	r0, r3
 802439a:	371c      	adds	r7, #28
 802439c:	46bd      	mov	sp, r7
 802439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243a2:	4770      	bx	lr
 80243a4:	ff03000f 	.word	0xff03000f

080243a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80243a8:	b480      	push	{r7}
 80243aa:	b08b      	sub	sp, #44	; 0x2c
 80243ac:	af00      	add	r7, sp, #0
 80243ae:	60f8      	str	r0, [r7, #12]
 80243b0:	60b9      	str	r1, [r7, #8]
 80243b2:	607a      	str	r2, [r7, #4]
 80243b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80243b6:	68fb      	ldr	r3, [r7, #12]
 80243b8:	681b      	ldr	r3, [r3, #0]
 80243ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80243bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80243c0:	683b      	ldr	r3, [r7, #0]
 80243c2:	041a      	lsls	r2, r3, #16
 80243c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243c6:	431a      	orrs	r2, r3
 80243c8:	68fb      	ldr	r3, [r7, #12]
 80243ca:	681b      	ldr	r3, [r3, #0]
 80243cc:	430a      	orrs	r2, r1
 80243ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80243d0:	68fb      	ldr	r3, [r7, #12]
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	687a      	ldr	r2, [r7, #4]
 80243d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80243d8:	68fb      	ldr	r3, [r7, #12]
 80243da:	685b      	ldr	r3, [r3, #4]
 80243dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80243e0:	d174      	bne.n	80244cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80243e2:	68bb      	ldr	r3, [r7, #8]
 80243e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80243e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80243ea:	68bb      	ldr	r3, [r7, #8]
 80243ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80243f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80243f2:	68bb      	ldr	r3, [r7, #8]
 80243f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80243fa:	68bb      	ldr	r3, [r7, #8]
 80243fc:	b2db      	uxtb	r3, r3
 80243fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8024400:	68fb      	ldr	r3, [r7, #12]
 8024402:	689b      	ldr	r3, [r3, #8]
 8024404:	2b00      	cmp	r3, #0
 8024406:	d108      	bne.n	802441a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8024408:	69ba      	ldr	r2, [r7, #24]
 802440a:	69fb      	ldr	r3, [r7, #28]
 802440c:	431a      	orrs	r2, r3
 802440e:	6a3b      	ldr	r3, [r7, #32]
 8024410:	4313      	orrs	r3, r2
 8024412:	697a      	ldr	r2, [r7, #20]
 8024414:	4313      	orrs	r3, r2
 8024416:	627b      	str	r3, [r7, #36]	; 0x24
 8024418:	e053      	b.n	80244c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 802441a:	68fb      	ldr	r3, [r7, #12]
 802441c:	689b      	ldr	r3, [r3, #8]
 802441e:	2b01      	cmp	r3, #1
 8024420:	d106      	bne.n	8024430 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8024422:	69ba      	ldr	r2, [r7, #24]
 8024424:	69fb      	ldr	r3, [r7, #28]
 8024426:	4313      	orrs	r3, r2
 8024428:	697a      	ldr	r2, [r7, #20]
 802442a:	4313      	orrs	r3, r2
 802442c:	627b      	str	r3, [r7, #36]	; 0x24
 802442e:	e048      	b.n	80244c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8024430:	68fb      	ldr	r3, [r7, #12]
 8024432:	689b      	ldr	r3, [r3, #8]
 8024434:	2b02      	cmp	r3, #2
 8024436:	d111      	bne.n	802445c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8024438:	69fb      	ldr	r3, [r7, #28]
 802443a:	0cdb      	lsrs	r3, r3, #19
 802443c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 802443e:	69bb      	ldr	r3, [r7, #24]
 8024440:	0a9b      	lsrs	r3, r3, #10
 8024442:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024444:	697b      	ldr	r3, [r7, #20]
 8024446:	08db      	lsrs	r3, r3, #3
 8024448:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 802444a:	69bb      	ldr	r3, [r7, #24]
 802444c:	015a      	lsls	r2, r3, #5
 802444e:	69fb      	ldr	r3, [r7, #28]
 8024450:	02db      	lsls	r3, r3, #11
 8024452:	4313      	orrs	r3, r2
 8024454:	697a      	ldr	r2, [r7, #20]
 8024456:	4313      	orrs	r3, r2
 8024458:	627b      	str	r3, [r7, #36]	; 0x24
 802445a:	e032      	b.n	80244c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 802445c:	68fb      	ldr	r3, [r7, #12]
 802445e:	689b      	ldr	r3, [r3, #8]
 8024460:	2b03      	cmp	r3, #3
 8024462:	d117      	bne.n	8024494 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8024464:	6a3b      	ldr	r3, [r7, #32]
 8024466:	0fdb      	lsrs	r3, r3, #31
 8024468:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 802446a:	69fb      	ldr	r3, [r7, #28]
 802446c:	0cdb      	lsrs	r3, r3, #19
 802446e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8024470:	69bb      	ldr	r3, [r7, #24]
 8024472:	0adb      	lsrs	r3, r3, #11
 8024474:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024476:	697b      	ldr	r3, [r7, #20]
 8024478:	08db      	lsrs	r3, r3, #3
 802447a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 802447c:	69bb      	ldr	r3, [r7, #24]
 802447e:	015a      	lsls	r2, r3, #5
 8024480:	69fb      	ldr	r3, [r7, #28]
 8024482:	029b      	lsls	r3, r3, #10
 8024484:	431a      	orrs	r2, r3
 8024486:	6a3b      	ldr	r3, [r7, #32]
 8024488:	03db      	lsls	r3, r3, #15
 802448a:	4313      	orrs	r3, r2
 802448c:	697a      	ldr	r2, [r7, #20]
 802448e:	4313      	orrs	r3, r2
 8024490:	627b      	str	r3, [r7, #36]	; 0x24
 8024492:	e016      	b.n	80244c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8024494:	6a3b      	ldr	r3, [r7, #32]
 8024496:	0f1b      	lsrs	r3, r3, #28
 8024498:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 802449a:	69fb      	ldr	r3, [r7, #28]
 802449c:	0d1b      	lsrs	r3, r3, #20
 802449e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80244a0:	69bb      	ldr	r3, [r7, #24]
 80244a2:	0b1b      	lsrs	r3, r3, #12
 80244a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80244a6:	697b      	ldr	r3, [r7, #20]
 80244a8:	091b      	lsrs	r3, r3, #4
 80244aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80244ac:	69bb      	ldr	r3, [r7, #24]
 80244ae:	011a      	lsls	r2, r3, #4
 80244b0:	69fb      	ldr	r3, [r7, #28]
 80244b2:	021b      	lsls	r3, r3, #8
 80244b4:	431a      	orrs	r2, r3
 80244b6:	6a3b      	ldr	r3, [r7, #32]
 80244b8:	031b      	lsls	r3, r3, #12
 80244ba:	4313      	orrs	r3, r2
 80244bc:	697a      	ldr	r2, [r7, #20]
 80244be:	4313      	orrs	r3, r2
 80244c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80244c2:	68fb      	ldr	r3, [r7, #12]
 80244c4:	681b      	ldr	r3, [r3, #0]
 80244c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80244ca:	e003      	b.n	80244d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80244cc:	68fb      	ldr	r3, [r7, #12]
 80244ce:	681b      	ldr	r3, [r3, #0]
 80244d0:	68ba      	ldr	r2, [r7, #8]
 80244d2:	60da      	str	r2, [r3, #12]
}
 80244d4:	bf00      	nop
 80244d6:	372c      	adds	r7, #44	; 0x2c
 80244d8:	46bd      	mov	sp, r7
 80244da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244de:	4770      	bx	lr

080244e0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80244e0:	b580      	push	{r7, lr}
 80244e2:	b086      	sub	sp, #24
 80244e4:	af00      	add	r7, sp, #0
 80244e6:	60f8      	str	r0, [r7, #12]
 80244e8:	60b9      	str	r1, [r7, #8]
 80244ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80244ee:	2301      	movs	r3, #1
 80244f0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80244f2:	4b23      	ldr	r3, [pc, #140]	; (8024580 <HAL_FLASH_Program+0xa0>)
 80244f4:	7e1b      	ldrb	r3, [r3, #24]
 80244f6:	2b01      	cmp	r3, #1
 80244f8:	d101      	bne.n	80244fe <HAL_FLASH_Program+0x1e>
 80244fa:	2302      	movs	r3, #2
 80244fc:	e03b      	b.n	8024576 <HAL_FLASH_Program+0x96>
 80244fe:	4b20      	ldr	r3, [pc, #128]	; (8024580 <HAL_FLASH_Program+0xa0>)
 8024500:	2201      	movs	r2, #1
 8024502:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024508:	f000 f870 	bl	80245ec <FLASH_WaitForLastOperation>
 802450c:	4603      	mov	r3, r0
 802450e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8024510:	7dfb      	ldrb	r3, [r7, #23]
 8024512:	2b00      	cmp	r3, #0
 8024514:	d12b      	bne.n	802456e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8024516:	68fb      	ldr	r3, [r7, #12]
 8024518:	2b00      	cmp	r3, #0
 802451a:	d105      	bne.n	8024528 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802451c:	783b      	ldrb	r3, [r7, #0]
 802451e:	4619      	mov	r1, r3
 8024520:	68b8      	ldr	r0, [r7, #8]
 8024522:	f000 f91b 	bl	802475c <FLASH_Program_Byte>
 8024526:	e016      	b.n	8024556 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8024528:	68fb      	ldr	r3, [r7, #12]
 802452a:	2b01      	cmp	r3, #1
 802452c:	d105      	bne.n	802453a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802452e:	883b      	ldrh	r3, [r7, #0]
 8024530:	4619      	mov	r1, r3
 8024532:	68b8      	ldr	r0, [r7, #8]
 8024534:	f000 f8ee 	bl	8024714 <FLASH_Program_HalfWord>
 8024538:	e00d      	b.n	8024556 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802453a:	68fb      	ldr	r3, [r7, #12]
 802453c:	2b02      	cmp	r3, #2
 802453e:	d105      	bne.n	802454c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8024540:	683b      	ldr	r3, [r7, #0]
 8024542:	4619      	mov	r1, r3
 8024544:	68b8      	ldr	r0, [r7, #8]
 8024546:	f000 f8c3 	bl	80246d0 <FLASH_Program_Word>
 802454a:	e004      	b.n	8024556 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802454c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024550:	68b8      	ldr	r0, [r7, #8]
 8024552:	f000 f88b 	bl	802466c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024556:	f24c 3050 	movw	r0, #50000	; 0xc350
 802455a:	f000 f847 	bl	80245ec <FLASH_WaitForLastOperation>
 802455e:	4603      	mov	r3, r0
 8024560:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8024562:	4b08      	ldr	r3, [pc, #32]	; (8024584 <HAL_FLASH_Program+0xa4>)
 8024564:	691b      	ldr	r3, [r3, #16]
 8024566:	4a07      	ldr	r2, [pc, #28]	; (8024584 <HAL_FLASH_Program+0xa4>)
 8024568:	f023 0301 	bic.w	r3, r3, #1
 802456c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802456e:	4b04      	ldr	r3, [pc, #16]	; (8024580 <HAL_FLASH_Program+0xa0>)
 8024570:	2200      	movs	r2, #0
 8024572:	761a      	strb	r2, [r3, #24]
  
  return status;
 8024574:	7dfb      	ldrb	r3, [r7, #23]
}
 8024576:	4618      	mov	r0, r3
 8024578:	3718      	adds	r7, #24
 802457a:	46bd      	mov	sp, r7
 802457c:	bd80      	pop	{r7, pc}
 802457e:	bf00      	nop
 8024580:	20000afc 	.word	0x20000afc
 8024584:	40023c00 	.word	0x40023c00

08024588 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8024588:	b480      	push	{r7}
 802458a:	b083      	sub	sp, #12
 802458c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802458e:	2300      	movs	r3, #0
 8024590:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8024592:	4b0b      	ldr	r3, [pc, #44]	; (80245c0 <HAL_FLASH_Unlock+0x38>)
 8024594:	691b      	ldr	r3, [r3, #16]
 8024596:	2b00      	cmp	r3, #0
 8024598:	da0b      	bge.n	80245b2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802459a:	4b09      	ldr	r3, [pc, #36]	; (80245c0 <HAL_FLASH_Unlock+0x38>)
 802459c:	4a09      	ldr	r2, [pc, #36]	; (80245c4 <HAL_FLASH_Unlock+0x3c>)
 802459e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80245a0:	4b07      	ldr	r3, [pc, #28]	; (80245c0 <HAL_FLASH_Unlock+0x38>)
 80245a2:	4a09      	ldr	r2, [pc, #36]	; (80245c8 <HAL_FLASH_Unlock+0x40>)
 80245a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80245a6:	4b06      	ldr	r3, [pc, #24]	; (80245c0 <HAL_FLASH_Unlock+0x38>)
 80245a8:	691b      	ldr	r3, [r3, #16]
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	da01      	bge.n	80245b2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80245ae:	2301      	movs	r3, #1
 80245b0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80245b2:	79fb      	ldrb	r3, [r7, #7]
}
 80245b4:	4618      	mov	r0, r3
 80245b6:	370c      	adds	r7, #12
 80245b8:	46bd      	mov	sp, r7
 80245ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245be:	4770      	bx	lr
 80245c0:	40023c00 	.word	0x40023c00
 80245c4:	45670123 	.word	0x45670123
 80245c8:	cdef89ab 	.word	0xcdef89ab

080245cc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80245cc:	b480      	push	{r7}
 80245ce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80245d0:	4b05      	ldr	r3, [pc, #20]	; (80245e8 <HAL_FLASH_Lock+0x1c>)
 80245d2:	691b      	ldr	r3, [r3, #16]
 80245d4:	4a04      	ldr	r2, [pc, #16]	; (80245e8 <HAL_FLASH_Lock+0x1c>)
 80245d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80245da:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80245dc:	2300      	movs	r3, #0
}
 80245de:	4618      	mov	r0, r3
 80245e0:	46bd      	mov	sp, r7
 80245e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e6:	4770      	bx	lr
 80245e8:	40023c00 	.word	0x40023c00

080245ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80245ec:	b580      	push	{r7, lr}
 80245ee:	b084      	sub	sp, #16
 80245f0:	af00      	add	r7, sp, #0
 80245f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80245f4:	2300      	movs	r3, #0
 80245f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80245f8:	4b1a      	ldr	r3, [pc, #104]	; (8024664 <FLASH_WaitForLastOperation+0x78>)
 80245fa:	2200      	movs	r2, #0
 80245fc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80245fe:	f7ff f839 	bl	8023674 <HAL_GetTick>
 8024602:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024604:	e010      	b.n	8024628 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	f1b3 3fff 	cmp.w	r3, #4294967295
 802460c:	d00c      	beq.n	8024628 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802460e:	687b      	ldr	r3, [r7, #4]
 8024610:	2b00      	cmp	r3, #0
 8024612:	d007      	beq.n	8024624 <FLASH_WaitForLastOperation+0x38>
 8024614:	f7ff f82e 	bl	8023674 <HAL_GetTick>
 8024618:	4602      	mov	r2, r0
 802461a:	68fb      	ldr	r3, [r7, #12]
 802461c:	1ad3      	subs	r3, r2, r3
 802461e:	687a      	ldr	r2, [r7, #4]
 8024620:	429a      	cmp	r2, r3
 8024622:	d201      	bcs.n	8024628 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8024624:	2303      	movs	r3, #3
 8024626:	e019      	b.n	802465c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024628:	4b0f      	ldr	r3, [pc, #60]	; (8024668 <FLASH_WaitForLastOperation+0x7c>)
 802462a:	68db      	ldr	r3, [r3, #12]
 802462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024630:	2b00      	cmp	r3, #0
 8024632:	d1e8      	bne.n	8024606 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8024634:	4b0c      	ldr	r3, [pc, #48]	; (8024668 <FLASH_WaitForLastOperation+0x7c>)
 8024636:	68db      	ldr	r3, [r3, #12]
 8024638:	f003 0301 	and.w	r3, r3, #1
 802463c:	2b00      	cmp	r3, #0
 802463e:	d002      	beq.n	8024646 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8024640:	4b09      	ldr	r3, [pc, #36]	; (8024668 <FLASH_WaitForLastOperation+0x7c>)
 8024642:	2201      	movs	r2, #1
 8024644:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8024646:	4b08      	ldr	r3, [pc, #32]	; (8024668 <FLASH_WaitForLastOperation+0x7c>)
 8024648:	68db      	ldr	r3, [r3, #12]
 802464a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 802464e:	2b00      	cmp	r3, #0
 8024650:	d003      	beq.n	802465a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8024652:	f000 f8a5 	bl	80247a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8024656:	2301      	movs	r3, #1
 8024658:	e000      	b.n	802465c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802465a:	2300      	movs	r3, #0
  
}  
 802465c:	4618      	mov	r0, r3
 802465e:	3710      	adds	r7, #16
 8024660:	46bd      	mov	sp, r7
 8024662:	bd80      	pop	{r7, pc}
 8024664:	20000afc 	.word	0x20000afc
 8024668:	40023c00 	.word	0x40023c00

0802466c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802466c:	b480      	push	{r7}
 802466e:	b085      	sub	sp, #20
 8024670:	af00      	add	r7, sp, #0
 8024672:	60f8      	str	r0, [r7, #12]
 8024674:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024678:	4b14      	ldr	r3, [pc, #80]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 802467a:	691b      	ldr	r3, [r3, #16]
 802467c:	4a13      	ldr	r2, [pc, #76]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 802467e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024682:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8024684:	4b11      	ldr	r3, [pc, #68]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 8024686:	691b      	ldr	r3, [r3, #16]
 8024688:	4a10      	ldr	r2, [pc, #64]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 802468a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802468e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024690:	4b0e      	ldr	r3, [pc, #56]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 8024692:	691b      	ldr	r3, [r3, #16]
 8024694:	4a0d      	ldr	r2, [pc, #52]	; (80246cc <FLASH_Program_DoubleWord+0x60>)
 8024696:	f043 0301 	orr.w	r3, r3, #1
 802469a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 802469c:	68fb      	ldr	r3, [r7, #12]
 802469e:	683a      	ldr	r2, [r7, #0]
 80246a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80246a2:	f3bf 8f6f 	isb	sy
}
 80246a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80246a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80246ac:	f04f 0200 	mov.w	r2, #0
 80246b0:	f04f 0300 	mov.w	r3, #0
 80246b4:	000a      	movs	r2, r1
 80246b6:	2300      	movs	r3, #0
 80246b8:	68f9      	ldr	r1, [r7, #12]
 80246ba:	3104      	adds	r1, #4
 80246bc:	4613      	mov	r3, r2
 80246be:	600b      	str	r3, [r1, #0]
}
 80246c0:	bf00      	nop
 80246c2:	3714      	adds	r7, #20
 80246c4:	46bd      	mov	sp, r7
 80246c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246ca:	4770      	bx	lr
 80246cc:	40023c00 	.word	0x40023c00

080246d0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80246d0:	b480      	push	{r7}
 80246d2:	b083      	sub	sp, #12
 80246d4:	af00      	add	r7, sp, #0
 80246d6:	6078      	str	r0, [r7, #4]
 80246d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80246da:	4b0d      	ldr	r3, [pc, #52]	; (8024710 <FLASH_Program_Word+0x40>)
 80246dc:	691b      	ldr	r3, [r3, #16]
 80246de:	4a0c      	ldr	r2, [pc, #48]	; (8024710 <FLASH_Program_Word+0x40>)
 80246e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80246e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80246e6:	4b0a      	ldr	r3, [pc, #40]	; (8024710 <FLASH_Program_Word+0x40>)
 80246e8:	691b      	ldr	r3, [r3, #16]
 80246ea:	4a09      	ldr	r2, [pc, #36]	; (8024710 <FLASH_Program_Word+0x40>)
 80246ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80246f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80246f2:	4b07      	ldr	r3, [pc, #28]	; (8024710 <FLASH_Program_Word+0x40>)
 80246f4:	691b      	ldr	r3, [r3, #16]
 80246f6:	4a06      	ldr	r2, [pc, #24]	; (8024710 <FLASH_Program_Word+0x40>)
 80246f8:	f043 0301 	orr.w	r3, r3, #1
 80246fc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80246fe:	687b      	ldr	r3, [r7, #4]
 8024700:	683a      	ldr	r2, [r7, #0]
 8024702:	601a      	str	r2, [r3, #0]
}
 8024704:	bf00      	nop
 8024706:	370c      	adds	r7, #12
 8024708:	46bd      	mov	sp, r7
 802470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802470e:	4770      	bx	lr
 8024710:	40023c00 	.word	0x40023c00

08024714 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8024714:	b480      	push	{r7}
 8024716:	b083      	sub	sp, #12
 8024718:	af00      	add	r7, sp, #0
 802471a:	6078      	str	r0, [r7, #4]
 802471c:	460b      	mov	r3, r1
 802471e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024720:	4b0d      	ldr	r3, [pc, #52]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 8024722:	691b      	ldr	r3, [r3, #16]
 8024724:	4a0c      	ldr	r2, [pc, #48]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 8024726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802472a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802472c:	4b0a      	ldr	r3, [pc, #40]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 802472e:	691b      	ldr	r3, [r3, #16]
 8024730:	4a09      	ldr	r2, [pc, #36]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 8024732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024736:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024738:	4b07      	ldr	r3, [pc, #28]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 802473a:	691b      	ldr	r3, [r3, #16]
 802473c:	4a06      	ldr	r2, [pc, #24]	; (8024758 <FLASH_Program_HalfWord+0x44>)
 802473e:	f043 0301 	orr.w	r3, r3, #1
 8024742:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	887a      	ldrh	r2, [r7, #2]
 8024748:	801a      	strh	r2, [r3, #0]
}
 802474a:	bf00      	nop
 802474c:	370c      	adds	r7, #12
 802474e:	46bd      	mov	sp, r7
 8024750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024754:	4770      	bx	lr
 8024756:	bf00      	nop
 8024758:	40023c00 	.word	0x40023c00

0802475c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802475c:	b480      	push	{r7}
 802475e:	b083      	sub	sp, #12
 8024760:	af00      	add	r7, sp, #0
 8024762:	6078      	str	r0, [r7, #4]
 8024764:	460b      	mov	r3, r1
 8024766:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024768:	4b0c      	ldr	r3, [pc, #48]	; (802479c <FLASH_Program_Byte+0x40>)
 802476a:	691b      	ldr	r3, [r3, #16]
 802476c:	4a0b      	ldr	r2, [pc, #44]	; (802479c <FLASH_Program_Byte+0x40>)
 802476e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024772:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8024774:	4b09      	ldr	r3, [pc, #36]	; (802479c <FLASH_Program_Byte+0x40>)
 8024776:	4a09      	ldr	r2, [pc, #36]	; (802479c <FLASH_Program_Byte+0x40>)
 8024778:	691b      	ldr	r3, [r3, #16]
 802477a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802477c:	4b07      	ldr	r3, [pc, #28]	; (802479c <FLASH_Program_Byte+0x40>)
 802477e:	691b      	ldr	r3, [r3, #16]
 8024780:	4a06      	ldr	r2, [pc, #24]	; (802479c <FLASH_Program_Byte+0x40>)
 8024782:	f043 0301 	orr.w	r3, r3, #1
 8024786:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8024788:	687b      	ldr	r3, [r7, #4]
 802478a:	78fa      	ldrb	r2, [r7, #3]
 802478c:	701a      	strb	r2, [r3, #0]
}
 802478e:	bf00      	nop
 8024790:	370c      	adds	r7, #12
 8024792:	46bd      	mov	sp, r7
 8024794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024798:	4770      	bx	lr
 802479a:	bf00      	nop
 802479c:	40023c00 	.word	0x40023c00

080247a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80247a0:	b480      	push	{r7}
 80247a2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80247a4:	4b2f      	ldr	r3, [pc, #188]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247a6:	68db      	ldr	r3, [r3, #12]
 80247a8:	f003 0310 	and.w	r3, r3, #16
 80247ac:	2b00      	cmp	r3, #0
 80247ae:	d008      	beq.n	80247c2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80247b0:	4b2d      	ldr	r3, [pc, #180]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247b2:	69db      	ldr	r3, [r3, #28]
 80247b4:	f043 0310 	orr.w	r3, r3, #16
 80247b8:	4a2b      	ldr	r2, [pc, #172]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247ba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80247bc:	4b29      	ldr	r3, [pc, #164]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247be:	2210      	movs	r2, #16
 80247c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80247c2:	4b28      	ldr	r3, [pc, #160]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247c4:	68db      	ldr	r3, [r3, #12]
 80247c6:	f003 0320 	and.w	r3, r3, #32
 80247ca:	2b00      	cmp	r3, #0
 80247cc:	d008      	beq.n	80247e0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80247ce:	4b26      	ldr	r3, [pc, #152]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247d0:	69db      	ldr	r3, [r3, #28]
 80247d2:	f043 0308 	orr.w	r3, r3, #8
 80247d6:	4a24      	ldr	r2, [pc, #144]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247d8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80247da:	4b22      	ldr	r3, [pc, #136]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247dc:	2220      	movs	r2, #32
 80247de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80247e0:	4b20      	ldr	r3, [pc, #128]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247e2:	68db      	ldr	r3, [r3, #12]
 80247e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80247e8:	2b00      	cmp	r3, #0
 80247ea:	d008      	beq.n	80247fe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80247ec:	4b1e      	ldr	r3, [pc, #120]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247ee:	69db      	ldr	r3, [r3, #28]
 80247f0:	f043 0304 	orr.w	r3, r3, #4
 80247f4:	4a1c      	ldr	r2, [pc, #112]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 80247f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80247f8:	4b1a      	ldr	r3, [pc, #104]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 80247fa:	2240      	movs	r2, #64	; 0x40
 80247fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80247fe:	4b19      	ldr	r3, [pc, #100]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 8024800:	68db      	ldr	r3, [r3, #12]
 8024802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024806:	2b00      	cmp	r3, #0
 8024808:	d008      	beq.n	802481c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802480a:	4b17      	ldr	r3, [pc, #92]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 802480c:	69db      	ldr	r3, [r3, #28]
 802480e:	f043 0302 	orr.w	r3, r3, #2
 8024812:	4a15      	ldr	r2, [pc, #84]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 8024814:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8024816:	4b13      	ldr	r3, [pc, #76]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 8024818:	2280      	movs	r2, #128	; 0x80
 802481a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 802481c:	4b11      	ldr	r3, [pc, #68]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 802481e:	68db      	ldr	r3, [r3, #12]
 8024820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024824:	2b00      	cmp	r3, #0
 8024826:	d009      	beq.n	802483c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8024828:	4b0f      	ldr	r3, [pc, #60]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 802482a:	69db      	ldr	r3, [r3, #28]
 802482c:	f043 0301 	orr.w	r3, r3, #1
 8024830:	4a0d      	ldr	r2, [pc, #52]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 8024832:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8024834:	4b0b      	ldr	r3, [pc, #44]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 8024836:	f44f 7280 	mov.w	r2, #256	; 0x100
 802483a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802483c:	4b09      	ldr	r3, [pc, #36]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 802483e:	68db      	ldr	r3, [r3, #12]
 8024840:	f003 0302 	and.w	r3, r3, #2
 8024844:	2b00      	cmp	r3, #0
 8024846:	d008      	beq.n	802485a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8024848:	4b07      	ldr	r3, [pc, #28]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 802484a:	69db      	ldr	r3, [r3, #28]
 802484c:	f043 0320 	orr.w	r3, r3, #32
 8024850:	4a05      	ldr	r2, [pc, #20]	; (8024868 <FLASH_SetErrorCode+0xc8>)
 8024852:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8024854:	4b03      	ldr	r3, [pc, #12]	; (8024864 <FLASH_SetErrorCode+0xc4>)
 8024856:	2202      	movs	r2, #2
 8024858:	60da      	str	r2, [r3, #12]
  }
}
 802485a:	bf00      	nop
 802485c:	46bd      	mov	sp, r7
 802485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024862:	4770      	bx	lr
 8024864:	40023c00 	.word	0x40023c00
 8024868:	20000afc 	.word	0x20000afc

0802486c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802486c:	b580      	push	{r7, lr}
 802486e:	b084      	sub	sp, #16
 8024870:	af00      	add	r7, sp, #0
 8024872:	6078      	str	r0, [r7, #4]
 8024874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024876:	2301      	movs	r3, #1
 8024878:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802487a:	2300      	movs	r3, #0
 802487c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802487e:	4b32      	ldr	r3, [pc, #200]	; (8024948 <HAL_FLASHEx_Erase+0xdc>)
 8024880:	7e1b      	ldrb	r3, [r3, #24]
 8024882:	2b01      	cmp	r3, #1
 8024884:	d101      	bne.n	802488a <HAL_FLASHEx_Erase+0x1e>
 8024886:	2302      	movs	r3, #2
 8024888:	e05a      	b.n	8024940 <HAL_FLASHEx_Erase+0xd4>
 802488a:	4b2f      	ldr	r3, [pc, #188]	; (8024948 <HAL_FLASHEx_Erase+0xdc>)
 802488c:	2201      	movs	r2, #1
 802488e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024890:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024894:	f7ff feaa 	bl	80245ec <FLASH_WaitForLastOperation>
 8024898:	4603      	mov	r3, r0
 802489a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 802489c:	7bfb      	ldrb	r3, [r7, #15]
 802489e:	2b00      	cmp	r3, #0
 80248a0:	d14a      	bne.n	8024938 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80248a2:	683b      	ldr	r3, [r7, #0]
 80248a4:	f04f 32ff 	mov.w	r2, #4294967295
 80248a8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80248aa:	687b      	ldr	r3, [r7, #4]
 80248ac:	681b      	ldr	r3, [r3, #0]
 80248ae:	2b01      	cmp	r3, #1
 80248b0:	d117      	bne.n	80248e2 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	691b      	ldr	r3, [r3, #16]
 80248b6:	b2da      	uxtb	r2, r3
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	685b      	ldr	r3, [r3, #4]
 80248bc:	4619      	mov	r1, r3
 80248be:	4610      	mov	r0, r2
 80248c0:	f000 f846 	bl	8024950 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248c8:	f7ff fe90 	bl	80245ec <FLASH_WaitForLastOperation>
 80248cc:	4603      	mov	r3, r0
 80248ce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80248d0:	4b1e      	ldr	r3, [pc, #120]	; (802494c <HAL_FLASHEx_Erase+0xe0>)
 80248d2:	691b      	ldr	r3, [r3, #16]
 80248d4:	4a1d      	ldr	r2, [pc, #116]	; (802494c <HAL_FLASHEx_Erase+0xe0>)
 80248d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80248da:	f023 0304 	bic.w	r3, r3, #4
 80248de:	6113      	str	r3, [r2, #16]
 80248e0:	e028      	b.n	8024934 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	689b      	ldr	r3, [r3, #8]
 80248e6:	60bb      	str	r3, [r7, #8]
 80248e8:	e01c      	b.n	8024924 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	691b      	ldr	r3, [r3, #16]
 80248ee:	b2db      	uxtb	r3, r3
 80248f0:	4619      	mov	r1, r3
 80248f2:	68b8      	ldr	r0, [r7, #8]
 80248f4:	f000 f866 	bl	80249c4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248fc:	f7ff fe76 	bl	80245ec <FLASH_WaitForLastOperation>
 8024900:	4603      	mov	r3, r0
 8024902:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8024904:	4b11      	ldr	r3, [pc, #68]	; (802494c <HAL_FLASHEx_Erase+0xe0>)
 8024906:	691b      	ldr	r3, [r3, #16]
 8024908:	4a10      	ldr	r2, [pc, #64]	; (802494c <HAL_FLASHEx_Erase+0xe0>)
 802490a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802490e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8024910:	7bfb      	ldrb	r3, [r7, #15]
 8024912:	2b00      	cmp	r3, #0
 8024914:	d003      	beq.n	802491e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8024916:	683b      	ldr	r3, [r7, #0]
 8024918:	68ba      	ldr	r2, [r7, #8]
 802491a:	601a      	str	r2, [r3, #0]
          break;
 802491c:	e00a      	b.n	8024934 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802491e:	68bb      	ldr	r3, [r7, #8]
 8024920:	3301      	adds	r3, #1
 8024922:	60bb      	str	r3, [r7, #8]
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	68da      	ldr	r2, [r3, #12]
 8024928:	687b      	ldr	r3, [r7, #4]
 802492a:	689b      	ldr	r3, [r3, #8]
 802492c:	4413      	add	r3, r2
 802492e:	68ba      	ldr	r2, [r7, #8]
 8024930:	429a      	cmp	r2, r3
 8024932:	d3da      	bcc.n	80248ea <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8024934:	f000 f894 	bl	8024a60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024938:	4b03      	ldr	r3, [pc, #12]	; (8024948 <HAL_FLASHEx_Erase+0xdc>)
 802493a:	2200      	movs	r2, #0
 802493c:	761a      	strb	r2, [r3, #24]

  return status;
 802493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024940:	4618      	mov	r0, r3
 8024942:	3710      	adds	r7, #16
 8024944:	46bd      	mov	sp, r7
 8024946:	bd80      	pop	{r7, pc}
 8024948:	20000afc 	.word	0x20000afc
 802494c:	40023c00 	.word	0x40023c00

08024950 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8024950:	b480      	push	{r7}
 8024952:	b083      	sub	sp, #12
 8024954:	af00      	add	r7, sp, #0
 8024956:	4603      	mov	r3, r0
 8024958:	6039      	str	r1, [r7, #0]
 802495a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802495c:	4b18      	ldr	r3, [pc, #96]	; (80249c0 <FLASH_MassErase+0x70>)
 802495e:	691b      	ldr	r3, [r3, #16]
 8024960:	4a17      	ldr	r2, [pc, #92]	; (80249c0 <FLASH_MassErase+0x70>)
 8024962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024966:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8024968:	683b      	ldr	r3, [r7, #0]
 802496a:	2b03      	cmp	r3, #3
 802496c:	d108      	bne.n	8024980 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 802496e:	4b14      	ldr	r3, [pc, #80]	; (80249c0 <FLASH_MassErase+0x70>)
 8024970:	691b      	ldr	r3, [r3, #16]
 8024972:	4a13      	ldr	r2, [pc, #76]	; (80249c0 <FLASH_MassErase+0x70>)
 8024974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024978:	f043 0304 	orr.w	r3, r3, #4
 802497c:	6113      	str	r3, [r2, #16]
 802497e:	e00f      	b.n	80249a0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8024980:	683b      	ldr	r3, [r7, #0]
 8024982:	2b01      	cmp	r3, #1
 8024984:	d106      	bne.n	8024994 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8024986:	4b0e      	ldr	r3, [pc, #56]	; (80249c0 <FLASH_MassErase+0x70>)
 8024988:	691b      	ldr	r3, [r3, #16]
 802498a:	4a0d      	ldr	r2, [pc, #52]	; (80249c0 <FLASH_MassErase+0x70>)
 802498c:	f043 0304 	orr.w	r3, r3, #4
 8024990:	6113      	str	r3, [r2, #16]
 8024992:	e005      	b.n	80249a0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8024994:	4b0a      	ldr	r3, [pc, #40]	; (80249c0 <FLASH_MassErase+0x70>)
 8024996:	691b      	ldr	r3, [r3, #16]
 8024998:	4a09      	ldr	r2, [pc, #36]	; (80249c0 <FLASH_MassErase+0x70>)
 802499a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802499e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80249a0:	4b07      	ldr	r3, [pc, #28]	; (80249c0 <FLASH_MassErase+0x70>)
 80249a2:	691a      	ldr	r2, [r3, #16]
 80249a4:	79fb      	ldrb	r3, [r7, #7]
 80249a6:	021b      	lsls	r3, r3, #8
 80249a8:	4313      	orrs	r3, r2
 80249aa:	4a05      	ldr	r2, [pc, #20]	; (80249c0 <FLASH_MassErase+0x70>)
 80249ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80249b0:	6113      	str	r3, [r2, #16]
}
 80249b2:	bf00      	nop
 80249b4:	370c      	adds	r7, #12
 80249b6:	46bd      	mov	sp, r7
 80249b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249bc:	4770      	bx	lr
 80249be:	bf00      	nop
 80249c0:	40023c00 	.word	0x40023c00

080249c4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80249c4:	b480      	push	{r7}
 80249c6:	b085      	sub	sp, #20
 80249c8:	af00      	add	r7, sp, #0
 80249ca:	6078      	str	r0, [r7, #4]
 80249cc:	460b      	mov	r3, r1
 80249ce:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80249d0:	2300      	movs	r3, #0
 80249d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80249d4:	78fb      	ldrb	r3, [r7, #3]
 80249d6:	2b00      	cmp	r3, #0
 80249d8:	d102      	bne.n	80249e0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80249da:	2300      	movs	r3, #0
 80249dc:	60fb      	str	r3, [r7, #12]
 80249de:	e010      	b.n	8024a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80249e0:	78fb      	ldrb	r3, [r7, #3]
 80249e2:	2b01      	cmp	r3, #1
 80249e4:	d103      	bne.n	80249ee <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80249e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80249ea:	60fb      	str	r3, [r7, #12]
 80249ec:	e009      	b.n	8024a02 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80249ee:	78fb      	ldrb	r3, [r7, #3]
 80249f0:	2b02      	cmp	r3, #2
 80249f2:	d103      	bne.n	80249fc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80249f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80249f8:	60fb      	str	r3, [r7, #12]
 80249fa:	e002      	b.n	8024a02 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80249fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024a00:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	2b0b      	cmp	r3, #11
 8024a06:	d902      	bls.n	8024a0e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8024a08:	687b      	ldr	r3, [r7, #4]
 8024a0a:	3304      	adds	r3, #4
 8024a0c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024a0e:	4b13      	ldr	r3, [pc, #76]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a10:	691b      	ldr	r3, [r3, #16]
 8024a12:	4a12      	ldr	r2, [pc, #72]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024a18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8024a1a:	4b10      	ldr	r3, [pc, #64]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a1c:	691a      	ldr	r2, [r3, #16]
 8024a1e:	490f      	ldr	r1, [pc, #60]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a20:	68fb      	ldr	r3, [r7, #12]
 8024a22:	4313      	orrs	r3, r2
 8024a24:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8024a26:	4b0d      	ldr	r3, [pc, #52]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a28:	691b      	ldr	r3, [r3, #16]
 8024a2a:	4a0c      	ldr	r2, [pc, #48]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8024a30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8024a32:	4b0a      	ldr	r3, [pc, #40]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a34:	691a      	ldr	r2, [r3, #16]
 8024a36:	687b      	ldr	r3, [r7, #4]
 8024a38:	00db      	lsls	r3, r3, #3
 8024a3a:	4313      	orrs	r3, r2
 8024a3c:	4a07      	ldr	r2, [pc, #28]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a3e:	f043 0302 	orr.w	r3, r3, #2
 8024a42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8024a44:	4b05      	ldr	r3, [pc, #20]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a46:	691b      	ldr	r3, [r3, #16]
 8024a48:	4a04      	ldr	r2, [pc, #16]	; (8024a5c <FLASH_Erase_Sector+0x98>)
 8024a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024a4e:	6113      	str	r3, [r2, #16]
}
 8024a50:	bf00      	nop
 8024a52:	3714      	adds	r7, #20
 8024a54:	46bd      	mov	sp, r7
 8024a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a5a:	4770      	bx	lr
 8024a5c:	40023c00 	.word	0x40023c00

08024a60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8024a60:	b480      	push	{r7}
 8024a62:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8024a64:	4b20      	ldr	r3, [pc, #128]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a66:	681b      	ldr	r3, [r3, #0]
 8024a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	d017      	beq.n	8024aa0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8024a70:	4b1d      	ldr	r3, [pc, #116]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a72:	681b      	ldr	r3, [r3, #0]
 8024a74:	4a1c      	ldr	r2, [pc, #112]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024a7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8024a7c:	4b1a      	ldr	r3, [pc, #104]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a7e:	681b      	ldr	r3, [r3, #0]
 8024a80:	4a19      	ldr	r2, [pc, #100]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024a86:	6013      	str	r3, [r2, #0]
 8024a88:	4b17      	ldr	r3, [pc, #92]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	4a16      	ldr	r2, [pc, #88]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024a92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024a94:	4b14      	ldr	r3, [pc, #80]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a96:	681b      	ldr	r3, [r3, #0]
 8024a98:	4a13      	ldr	r2, [pc, #76]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024a9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8024aa0:	4b11      	ldr	r3, [pc, #68]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	d017      	beq.n	8024adc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8024aac:	4b0e      	ldr	r3, [pc, #56]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024aae:	681b      	ldr	r3, [r3, #0]
 8024ab0:	4a0d      	ldr	r2, [pc, #52]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024ab6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024ab8:	4b0b      	ldr	r3, [pc, #44]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024aba:	681b      	ldr	r3, [r3, #0]
 8024abc:	4a0a      	ldr	r2, [pc, #40]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024ac2:	6013      	str	r3, [r2, #0]
 8024ac4:	4b08      	ldr	r3, [pc, #32]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	4a07      	ldr	r2, [pc, #28]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024ace:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8024ad0:	4b05      	ldr	r3, [pc, #20]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024ad2:	681b      	ldr	r3, [r3, #0]
 8024ad4:	4a04      	ldr	r2, [pc, #16]	; (8024ae8 <FLASH_FlushCaches+0x88>)
 8024ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024ada:	6013      	str	r3, [r2, #0]
  }
}
 8024adc:	bf00      	nop
 8024ade:	46bd      	mov	sp, r7
 8024ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ae4:	4770      	bx	lr
 8024ae6:	bf00      	nop
 8024ae8:	40023c00 	.word	0x40023c00

08024aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024aec:	b480      	push	{r7}
 8024aee:	b089      	sub	sp, #36	; 0x24
 8024af0:	af00      	add	r7, sp, #0
 8024af2:	6078      	str	r0, [r7, #4]
 8024af4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024af6:	2300      	movs	r3, #0
 8024af8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024afa:	2300      	movs	r3, #0
 8024afc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024afe:	2300      	movs	r3, #0
 8024b00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024b02:	2300      	movs	r3, #0
 8024b04:	61fb      	str	r3, [r7, #28]
 8024b06:	e177      	b.n	8024df8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024b08:	2201      	movs	r2, #1
 8024b0a:	69fb      	ldr	r3, [r7, #28]
 8024b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8024b10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024b12:	683b      	ldr	r3, [r7, #0]
 8024b14:	681b      	ldr	r3, [r3, #0]
 8024b16:	697a      	ldr	r2, [r7, #20]
 8024b18:	4013      	ands	r3, r2
 8024b1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024b1c:	693a      	ldr	r2, [r7, #16]
 8024b1e:	697b      	ldr	r3, [r7, #20]
 8024b20:	429a      	cmp	r2, r3
 8024b22:	f040 8166 	bne.w	8024df2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b26:	683b      	ldr	r3, [r7, #0]
 8024b28:	685b      	ldr	r3, [r3, #4]
 8024b2a:	f003 0303 	and.w	r3, r3, #3
 8024b2e:	2b01      	cmp	r3, #1
 8024b30:	d005      	beq.n	8024b3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024b32:	683b      	ldr	r3, [r7, #0]
 8024b34:	685b      	ldr	r3, [r3, #4]
 8024b36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b3a:	2b02      	cmp	r3, #2
 8024b3c:	d130      	bne.n	8024ba0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	689b      	ldr	r3, [r3, #8]
 8024b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024b44:	69fb      	ldr	r3, [r7, #28]
 8024b46:	005b      	lsls	r3, r3, #1
 8024b48:	2203      	movs	r2, #3
 8024b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8024b4e:	43db      	mvns	r3, r3
 8024b50:	69ba      	ldr	r2, [r7, #24]
 8024b52:	4013      	ands	r3, r2
 8024b54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024b56:	683b      	ldr	r3, [r7, #0]
 8024b58:	68da      	ldr	r2, [r3, #12]
 8024b5a:	69fb      	ldr	r3, [r7, #28]
 8024b5c:	005b      	lsls	r3, r3, #1
 8024b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8024b62:	69ba      	ldr	r2, [r7, #24]
 8024b64:	4313      	orrs	r3, r2
 8024b66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	69ba      	ldr	r2, [r7, #24]
 8024b6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	685b      	ldr	r3, [r3, #4]
 8024b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024b74:	2201      	movs	r2, #1
 8024b76:	69fb      	ldr	r3, [r7, #28]
 8024b78:	fa02 f303 	lsl.w	r3, r2, r3
 8024b7c:	43db      	mvns	r3, r3
 8024b7e:	69ba      	ldr	r2, [r7, #24]
 8024b80:	4013      	ands	r3, r2
 8024b82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024b84:	683b      	ldr	r3, [r7, #0]
 8024b86:	685b      	ldr	r3, [r3, #4]
 8024b88:	091b      	lsrs	r3, r3, #4
 8024b8a:	f003 0201 	and.w	r2, r3, #1
 8024b8e:	69fb      	ldr	r3, [r7, #28]
 8024b90:	fa02 f303 	lsl.w	r3, r2, r3
 8024b94:	69ba      	ldr	r2, [r7, #24]
 8024b96:	4313      	orrs	r3, r2
 8024b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024b9a:	687b      	ldr	r3, [r7, #4]
 8024b9c:	69ba      	ldr	r2, [r7, #24]
 8024b9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024ba0:	683b      	ldr	r3, [r7, #0]
 8024ba2:	685b      	ldr	r3, [r3, #4]
 8024ba4:	f003 0303 	and.w	r3, r3, #3
 8024ba8:	2b03      	cmp	r3, #3
 8024baa:	d017      	beq.n	8024bdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024bac:	687b      	ldr	r3, [r7, #4]
 8024bae:	68db      	ldr	r3, [r3, #12]
 8024bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024bb2:	69fb      	ldr	r3, [r7, #28]
 8024bb4:	005b      	lsls	r3, r3, #1
 8024bb6:	2203      	movs	r2, #3
 8024bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8024bbc:	43db      	mvns	r3, r3
 8024bbe:	69ba      	ldr	r2, [r7, #24]
 8024bc0:	4013      	ands	r3, r2
 8024bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024bc4:	683b      	ldr	r3, [r7, #0]
 8024bc6:	689a      	ldr	r2, [r3, #8]
 8024bc8:	69fb      	ldr	r3, [r7, #28]
 8024bca:	005b      	lsls	r3, r3, #1
 8024bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8024bd0:	69ba      	ldr	r2, [r7, #24]
 8024bd2:	4313      	orrs	r3, r2
 8024bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024bd6:	687b      	ldr	r3, [r7, #4]
 8024bd8:	69ba      	ldr	r2, [r7, #24]
 8024bda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024bdc:	683b      	ldr	r3, [r7, #0]
 8024bde:	685b      	ldr	r3, [r3, #4]
 8024be0:	f003 0303 	and.w	r3, r3, #3
 8024be4:	2b02      	cmp	r3, #2
 8024be6:	d123      	bne.n	8024c30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024be8:	69fb      	ldr	r3, [r7, #28]
 8024bea:	08da      	lsrs	r2, r3, #3
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	3208      	adds	r2, #8
 8024bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024bf6:	69fb      	ldr	r3, [r7, #28]
 8024bf8:	f003 0307 	and.w	r3, r3, #7
 8024bfc:	009b      	lsls	r3, r3, #2
 8024bfe:	220f      	movs	r2, #15
 8024c00:	fa02 f303 	lsl.w	r3, r2, r3
 8024c04:	43db      	mvns	r3, r3
 8024c06:	69ba      	ldr	r2, [r7, #24]
 8024c08:	4013      	ands	r3, r2
 8024c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024c0c:	683b      	ldr	r3, [r7, #0]
 8024c0e:	691a      	ldr	r2, [r3, #16]
 8024c10:	69fb      	ldr	r3, [r7, #28]
 8024c12:	f003 0307 	and.w	r3, r3, #7
 8024c16:	009b      	lsls	r3, r3, #2
 8024c18:	fa02 f303 	lsl.w	r3, r2, r3
 8024c1c:	69ba      	ldr	r2, [r7, #24]
 8024c1e:	4313      	orrs	r3, r2
 8024c20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024c22:	69fb      	ldr	r3, [r7, #28]
 8024c24:	08da      	lsrs	r2, r3, #3
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	3208      	adds	r2, #8
 8024c2a:	69b9      	ldr	r1, [r7, #24]
 8024c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	681b      	ldr	r3, [r3, #0]
 8024c34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024c36:	69fb      	ldr	r3, [r7, #28]
 8024c38:	005b      	lsls	r3, r3, #1
 8024c3a:	2203      	movs	r2, #3
 8024c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8024c40:	43db      	mvns	r3, r3
 8024c42:	69ba      	ldr	r2, [r7, #24]
 8024c44:	4013      	ands	r3, r2
 8024c46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024c48:	683b      	ldr	r3, [r7, #0]
 8024c4a:	685b      	ldr	r3, [r3, #4]
 8024c4c:	f003 0203 	and.w	r2, r3, #3
 8024c50:	69fb      	ldr	r3, [r7, #28]
 8024c52:	005b      	lsls	r3, r3, #1
 8024c54:	fa02 f303 	lsl.w	r3, r2, r3
 8024c58:	69ba      	ldr	r2, [r7, #24]
 8024c5a:	4313      	orrs	r3, r2
 8024c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	69ba      	ldr	r2, [r7, #24]
 8024c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024c64:	683b      	ldr	r3, [r7, #0]
 8024c66:	685b      	ldr	r3, [r3, #4]
 8024c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024c6c:	2b00      	cmp	r3, #0
 8024c6e:	f000 80c0 	beq.w	8024df2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024c72:	2300      	movs	r3, #0
 8024c74:	60fb      	str	r3, [r7, #12]
 8024c76:	4b66      	ldr	r3, [pc, #408]	; (8024e10 <HAL_GPIO_Init+0x324>)
 8024c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c7a:	4a65      	ldr	r2, [pc, #404]	; (8024e10 <HAL_GPIO_Init+0x324>)
 8024c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024c80:	6453      	str	r3, [r2, #68]	; 0x44
 8024c82:	4b63      	ldr	r3, [pc, #396]	; (8024e10 <HAL_GPIO_Init+0x324>)
 8024c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024c8a:	60fb      	str	r3, [r7, #12]
 8024c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024c8e:	4a61      	ldr	r2, [pc, #388]	; (8024e14 <HAL_GPIO_Init+0x328>)
 8024c90:	69fb      	ldr	r3, [r7, #28]
 8024c92:	089b      	lsrs	r3, r3, #2
 8024c94:	3302      	adds	r3, #2
 8024c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024c9c:	69fb      	ldr	r3, [r7, #28]
 8024c9e:	f003 0303 	and.w	r3, r3, #3
 8024ca2:	009b      	lsls	r3, r3, #2
 8024ca4:	220f      	movs	r2, #15
 8024ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8024caa:	43db      	mvns	r3, r3
 8024cac:	69ba      	ldr	r2, [r7, #24]
 8024cae:	4013      	ands	r3, r2
 8024cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	4a58      	ldr	r2, [pc, #352]	; (8024e18 <HAL_GPIO_Init+0x32c>)
 8024cb6:	4293      	cmp	r3, r2
 8024cb8:	d037      	beq.n	8024d2a <HAL_GPIO_Init+0x23e>
 8024cba:	687b      	ldr	r3, [r7, #4]
 8024cbc:	4a57      	ldr	r2, [pc, #348]	; (8024e1c <HAL_GPIO_Init+0x330>)
 8024cbe:	4293      	cmp	r3, r2
 8024cc0:	d031      	beq.n	8024d26 <HAL_GPIO_Init+0x23a>
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	4a56      	ldr	r2, [pc, #344]	; (8024e20 <HAL_GPIO_Init+0x334>)
 8024cc6:	4293      	cmp	r3, r2
 8024cc8:	d02b      	beq.n	8024d22 <HAL_GPIO_Init+0x236>
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	4a55      	ldr	r2, [pc, #340]	; (8024e24 <HAL_GPIO_Init+0x338>)
 8024cce:	4293      	cmp	r3, r2
 8024cd0:	d025      	beq.n	8024d1e <HAL_GPIO_Init+0x232>
 8024cd2:	687b      	ldr	r3, [r7, #4]
 8024cd4:	4a54      	ldr	r2, [pc, #336]	; (8024e28 <HAL_GPIO_Init+0x33c>)
 8024cd6:	4293      	cmp	r3, r2
 8024cd8:	d01f      	beq.n	8024d1a <HAL_GPIO_Init+0x22e>
 8024cda:	687b      	ldr	r3, [r7, #4]
 8024cdc:	4a53      	ldr	r2, [pc, #332]	; (8024e2c <HAL_GPIO_Init+0x340>)
 8024cde:	4293      	cmp	r3, r2
 8024ce0:	d019      	beq.n	8024d16 <HAL_GPIO_Init+0x22a>
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	4a52      	ldr	r2, [pc, #328]	; (8024e30 <HAL_GPIO_Init+0x344>)
 8024ce6:	4293      	cmp	r3, r2
 8024ce8:	d013      	beq.n	8024d12 <HAL_GPIO_Init+0x226>
 8024cea:	687b      	ldr	r3, [r7, #4]
 8024cec:	4a51      	ldr	r2, [pc, #324]	; (8024e34 <HAL_GPIO_Init+0x348>)
 8024cee:	4293      	cmp	r3, r2
 8024cf0:	d00d      	beq.n	8024d0e <HAL_GPIO_Init+0x222>
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	4a50      	ldr	r2, [pc, #320]	; (8024e38 <HAL_GPIO_Init+0x34c>)
 8024cf6:	4293      	cmp	r3, r2
 8024cf8:	d007      	beq.n	8024d0a <HAL_GPIO_Init+0x21e>
 8024cfa:	687b      	ldr	r3, [r7, #4]
 8024cfc:	4a4f      	ldr	r2, [pc, #316]	; (8024e3c <HAL_GPIO_Init+0x350>)
 8024cfe:	4293      	cmp	r3, r2
 8024d00:	d101      	bne.n	8024d06 <HAL_GPIO_Init+0x21a>
 8024d02:	2309      	movs	r3, #9
 8024d04:	e012      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d06:	230a      	movs	r3, #10
 8024d08:	e010      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d0a:	2308      	movs	r3, #8
 8024d0c:	e00e      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d0e:	2307      	movs	r3, #7
 8024d10:	e00c      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d12:	2306      	movs	r3, #6
 8024d14:	e00a      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d16:	2305      	movs	r3, #5
 8024d18:	e008      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d1a:	2304      	movs	r3, #4
 8024d1c:	e006      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d1e:	2303      	movs	r3, #3
 8024d20:	e004      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d22:	2302      	movs	r3, #2
 8024d24:	e002      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d26:	2301      	movs	r3, #1
 8024d28:	e000      	b.n	8024d2c <HAL_GPIO_Init+0x240>
 8024d2a:	2300      	movs	r3, #0
 8024d2c:	69fa      	ldr	r2, [r7, #28]
 8024d2e:	f002 0203 	and.w	r2, r2, #3
 8024d32:	0092      	lsls	r2, r2, #2
 8024d34:	4093      	lsls	r3, r2
 8024d36:	69ba      	ldr	r2, [r7, #24]
 8024d38:	4313      	orrs	r3, r2
 8024d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024d3c:	4935      	ldr	r1, [pc, #212]	; (8024e14 <HAL_GPIO_Init+0x328>)
 8024d3e:	69fb      	ldr	r3, [r7, #28]
 8024d40:	089b      	lsrs	r3, r3, #2
 8024d42:	3302      	adds	r3, #2
 8024d44:	69ba      	ldr	r2, [r7, #24]
 8024d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024d4a:	4b3d      	ldr	r3, [pc, #244]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024d4c:	689b      	ldr	r3, [r3, #8]
 8024d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d50:	693b      	ldr	r3, [r7, #16]
 8024d52:	43db      	mvns	r3, r3
 8024d54:	69ba      	ldr	r2, [r7, #24]
 8024d56:	4013      	ands	r3, r2
 8024d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024d5a:	683b      	ldr	r3, [r7, #0]
 8024d5c:	685b      	ldr	r3, [r3, #4]
 8024d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024d62:	2b00      	cmp	r3, #0
 8024d64:	d003      	beq.n	8024d6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024d66:	69ba      	ldr	r2, [r7, #24]
 8024d68:	693b      	ldr	r3, [r7, #16]
 8024d6a:	4313      	orrs	r3, r2
 8024d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024d6e:	4a34      	ldr	r2, [pc, #208]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024d70:	69bb      	ldr	r3, [r7, #24]
 8024d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024d74:	4b32      	ldr	r3, [pc, #200]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024d76:	68db      	ldr	r3, [r3, #12]
 8024d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d7a:	693b      	ldr	r3, [r7, #16]
 8024d7c:	43db      	mvns	r3, r3
 8024d7e:	69ba      	ldr	r2, [r7, #24]
 8024d80:	4013      	ands	r3, r2
 8024d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024d84:	683b      	ldr	r3, [r7, #0]
 8024d86:	685b      	ldr	r3, [r3, #4]
 8024d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d003      	beq.n	8024d98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024d90:	69ba      	ldr	r2, [r7, #24]
 8024d92:	693b      	ldr	r3, [r7, #16]
 8024d94:	4313      	orrs	r3, r2
 8024d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024d98:	4a29      	ldr	r2, [pc, #164]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024d9a:	69bb      	ldr	r3, [r7, #24]
 8024d9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8024d9e:	4b28      	ldr	r3, [pc, #160]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024da0:	685b      	ldr	r3, [r3, #4]
 8024da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024da4:	693b      	ldr	r3, [r7, #16]
 8024da6:	43db      	mvns	r3, r3
 8024da8:	69ba      	ldr	r2, [r7, #24]
 8024daa:	4013      	ands	r3, r2
 8024dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8024dae:	683b      	ldr	r3, [r7, #0]
 8024db0:	685b      	ldr	r3, [r3, #4]
 8024db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024db6:	2b00      	cmp	r3, #0
 8024db8:	d003      	beq.n	8024dc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8024dba:	69ba      	ldr	r2, [r7, #24]
 8024dbc:	693b      	ldr	r3, [r7, #16]
 8024dbe:	4313      	orrs	r3, r2
 8024dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024dc2:	4a1f      	ldr	r2, [pc, #124]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024dc4:	69bb      	ldr	r3, [r7, #24]
 8024dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024dc8:	4b1d      	ldr	r3, [pc, #116]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024dca:	681b      	ldr	r3, [r3, #0]
 8024dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024dce:	693b      	ldr	r3, [r7, #16]
 8024dd0:	43db      	mvns	r3, r3
 8024dd2:	69ba      	ldr	r2, [r7, #24]
 8024dd4:	4013      	ands	r3, r2
 8024dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024dd8:	683b      	ldr	r3, [r7, #0]
 8024dda:	685b      	ldr	r3, [r3, #4]
 8024ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024de0:	2b00      	cmp	r3, #0
 8024de2:	d003      	beq.n	8024dec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024de4:	69ba      	ldr	r2, [r7, #24]
 8024de6:	693b      	ldr	r3, [r7, #16]
 8024de8:	4313      	orrs	r3, r2
 8024dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024dec:	4a14      	ldr	r2, [pc, #80]	; (8024e40 <HAL_GPIO_Init+0x354>)
 8024dee:	69bb      	ldr	r3, [r7, #24]
 8024df0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024df2:	69fb      	ldr	r3, [r7, #28]
 8024df4:	3301      	adds	r3, #1
 8024df6:	61fb      	str	r3, [r7, #28]
 8024df8:	69fb      	ldr	r3, [r7, #28]
 8024dfa:	2b0f      	cmp	r3, #15
 8024dfc:	f67f ae84 	bls.w	8024b08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024e00:	bf00      	nop
 8024e02:	bf00      	nop
 8024e04:	3724      	adds	r7, #36	; 0x24
 8024e06:	46bd      	mov	sp, r7
 8024e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e0c:	4770      	bx	lr
 8024e0e:	bf00      	nop
 8024e10:	40023800 	.word	0x40023800
 8024e14:	40013800 	.word	0x40013800
 8024e18:	40020000 	.word	0x40020000
 8024e1c:	40020400 	.word	0x40020400
 8024e20:	40020800 	.word	0x40020800
 8024e24:	40020c00 	.word	0x40020c00
 8024e28:	40021000 	.word	0x40021000
 8024e2c:	40021400 	.word	0x40021400
 8024e30:	40021800 	.word	0x40021800
 8024e34:	40021c00 	.word	0x40021c00
 8024e38:	40022000 	.word	0x40022000
 8024e3c:	40022400 	.word	0x40022400
 8024e40:	40013c00 	.word	0x40013c00

08024e44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024e44:	b480      	push	{r7}
 8024e46:	b087      	sub	sp, #28
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
 8024e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024e4e:	2300      	movs	r3, #0
 8024e50:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024e52:	2300      	movs	r3, #0
 8024e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024e56:	2300      	movs	r3, #0
 8024e58:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024e5a:	2300      	movs	r3, #0
 8024e5c:	617b      	str	r3, [r7, #20]
 8024e5e:	e0d9      	b.n	8025014 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024e60:	2201      	movs	r2, #1
 8024e62:	697b      	ldr	r3, [r7, #20]
 8024e64:	fa02 f303 	lsl.w	r3, r2, r3
 8024e68:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024e6a:	683a      	ldr	r2, [r7, #0]
 8024e6c:	693b      	ldr	r3, [r7, #16]
 8024e6e:	4013      	ands	r3, r2
 8024e70:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024e72:	68fa      	ldr	r2, [r7, #12]
 8024e74:	693b      	ldr	r3, [r7, #16]
 8024e76:	429a      	cmp	r2, r3
 8024e78:	f040 80c9 	bne.w	802500e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024e7c:	4a6b      	ldr	r2, [pc, #428]	; (802502c <HAL_GPIO_DeInit+0x1e8>)
 8024e7e:	697b      	ldr	r3, [r7, #20]
 8024e80:	089b      	lsrs	r3, r3, #2
 8024e82:	3302      	adds	r3, #2
 8024e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024e88:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024e8a:	697b      	ldr	r3, [r7, #20]
 8024e8c:	f003 0303 	and.w	r3, r3, #3
 8024e90:	009b      	lsls	r3, r3, #2
 8024e92:	220f      	movs	r2, #15
 8024e94:	fa02 f303 	lsl.w	r3, r2, r3
 8024e98:	68ba      	ldr	r2, [r7, #8]
 8024e9a:	4013      	ands	r3, r2
 8024e9c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8024e9e:	687b      	ldr	r3, [r7, #4]
 8024ea0:	4a63      	ldr	r2, [pc, #396]	; (8025030 <HAL_GPIO_DeInit+0x1ec>)
 8024ea2:	4293      	cmp	r3, r2
 8024ea4:	d037      	beq.n	8024f16 <HAL_GPIO_DeInit+0xd2>
 8024ea6:	687b      	ldr	r3, [r7, #4]
 8024ea8:	4a62      	ldr	r2, [pc, #392]	; (8025034 <HAL_GPIO_DeInit+0x1f0>)
 8024eaa:	4293      	cmp	r3, r2
 8024eac:	d031      	beq.n	8024f12 <HAL_GPIO_DeInit+0xce>
 8024eae:	687b      	ldr	r3, [r7, #4]
 8024eb0:	4a61      	ldr	r2, [pc, #388]	; (8025038 <HAL_GPIO_DeInit+0x1f4>)
 8024eb2:	4293      	cmp	r3, r2
 8024eb4:	d02b      	beq.n	8024f0e <HAL_GPIO_DeInit+0xca>
 8024eb6:	687b      	ldr	r3, [r7, #4]
 8024eb8:	4a60      	ldr	r2, [pc, #384]	; (802503c <HAL_GPIO_DeInit+0x1f8>)
 8024eba:	4293      	cmp	r3, r2
 8024ebc:	d025      	beq.n	8024f0a <HAL_GPIO_DeInit+0xc6>
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	4a5f      	ldr	r2, [pc, #380]	; (8025040 <HAL_GPIO_DeInit+0x1fc>)
 8024ec2:	4293      	cmp	r3, r2
 8024ec4:	d01f      	beq.n	8024f06 <HAL_GPIO_DeInit+0xc2>
 8024ec6:	687b      	ldr	r3, [r7, #4]
 8024ec8:	4a5e      	ldr	r2, [pc, #376]	; (8025044 <HAL_GPIO_DeInit+0x200>)
 8024eca:	4293      	cmp	r3, r2
 8024ecc:	d019      	beq.n	8024f02 <HAL_GPIO_DeInit+0xbe>
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	4a5d      	ldr	r2, [pc, #372]	; (8025048 <HAL_GPIO_DeInit+0x204>)
 8024ed2:	4293      	cmp	r3, r2
 8024ed4:	d013      	beq.n	8024efe <HAL_GPIO_DeInit+0xba>
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	4a5c      	ldr	r2, [pc, #368]	; (802504c <HAL_GPIO_DeInit+0x208>)
 8024eda:	4293      	cmp	r3, r2
 8024edc:	d00d      	beq.n	8024efa <HAL_GPIO_DeInit+0xb6>
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	4a5b      	ldr	r2, [pc, #364]	; (8025050 <HAL_GPIO_DeInit+0x20c>)
 8024ee2:	4293      	cmp	r3, r2
 8024ee4:	d007      	beq.n	8024ef6 <HAL_GPIO_DeInit+0xb2>
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	4a5a      	ldr	r2, [pc, #360]	; (8025054 <HAL_GPIO_DeInit+0x210>)
 8024eea:	4293      	cmp	r3, r2
 8024eec:	d101      	bne.n	8024ef2 <HAL_GPIO_DeInit+0xae>
 8024eee:	2309      	movs	r3, #9
 8024ef0:	e012      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024ef2:	230a      	movs	r3, #10
 8024ef4:	e010      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024ef6:	2308      	movs	r3, #8
 8024ef8:	e00e      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024efa:	2307      	movs	r3, #7
 8024efc:	e00c      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024efe:	2306      	movs	r3, #6
 8024f00:	e00a      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f02:	2305      	movs	r3, #5
 8024f04:	e008      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f06:	2304      	movs	r3, #4
 8024f08:	e006      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f0a:	2303      	movs	r3, #3
 8024f0c:	e004      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f0e:	2302      	movs	r3, #2
 8024f10:	e002      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f12:	2301      	movs	r3, #1
 8024f14:	e000      	b.n	8024f18 <HAL_GPIO_DeInit+0xd4>
 8024f16:	2300      	movs	r3, #0
 8024f18:	697a      	ldr	r2, [r7, #20]
 8024f1a:	f002 0203 	and.w	r2, r2, #3
 8024f1e:	0092      	lsls	r2, r2, #2
 8024f20:	4093      	lsls	r3, r2
 8024f22:	68ba      	ldr	r2, [r7, #8]
 8024f24:	429a      	cmp	r2, r3
 8024f26:	d132      	bne.n	8024f8e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024f28:	4b4b      	ldr	r3, [pc, #300]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f2a:	681a      	ldr	r2, [r3, #0]
 8024f2c:	68fb      	ldr	r3, [r7, #12]
 8024f2e:	43db      	mvns	r3, r3
 8024f30:	4949      	ldr	r1, [pc, #292]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f32:	4013      	ands	r3, r2
 8024f34:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024f36:	4b48      	ldr	r3, [pc, #288]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f38:	685a      	ldr	r2, [r3, #4]
 8024f3a:	68fb      	ldr	r3, [r7, #12]
 8024f3c:	43db      	mvns	r3, r3
 8024f3e:	4946      	ldr	r1, [pc, #280]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f40:	4013      	ands	r3, r2
 8024f42:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024f44:	4b44      	ldr	r3, [pc, #272]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f46:	68da      	ldr	r2, [r3, #12]
 8024f48:	68fb      	ldr	r3, [r7, #12]
 8024f4a:	43db      	mvns	r3, r3
 8024f4c:	4942      	ldr	r1, [pc, #264]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f4e:	4013      	ands	r3, r2
 8024f50:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024f52:	4b41      	ldr	r3, [pc, #260]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f54:	689a      	ldr	r2, [r3, #8]
 8024f56:	68fb      	ldr	r3, [r7, #12]
 8024f58:	43db      	mvns	r3, r3
 8024f5a:	493f      	ldr	r1, [pc, #252]	; (8025058 <HAL_GPIO_DeInit+0x214>)
 8024f5c:	4013      	ands	r3, r2
 8024f5e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024f60:	697b      	ldr	r3, [r7, #20]
 8024f62:	f003 0303 	and.w	r3, r3, #3
 8024f66:	009b      	lsls	r3, r3, #2
 8024f68:	220f      	movs	r2, #15
 8024f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8024f6e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024f70:	4a2e      	ldr	r2, [pc, #184]	; (802502c <HAL_GPIO_DeInit+0x1e8>)
 8024f72:	697b      	ldr	r3, [r7, #20]
 8024f74:	089b      	lsrs	r3, r3, #2
 8024f76:	3302      	adds	r3, #2
 8024f78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024f7c:	68bb      	ldr	r3, [r7, #8]
 8024f7e:	43da      	mvns	r2, r3
 8024f80:	482a      	ldr	r0, [pc, #168]	; (802502c <HAL_GPIO_DeInit+0x1e8>)
 8024f82:	697b      	ldr	r3, [r7, #20]
 8024f84:	089b      	lsrs	r3, r3, #2
 8024f86:	400a      	ands	r2, r1
 8024f88:	3302      	adds	r3, #2
 8024f8a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024f8e:	687b      	ldr	r3, [r7, #4]
 8024f90:	681a      	ldr	r2, [r3, #0]
 8024f92:	697b      	ldr	r3, [r7, #20]
 8024f94:	005b      	lsls	r3, r3, #1
 8024f96:	2103      	movs	r1, #3
 8024f98:	fa01 f303 	lsl.w	r3, r1, r3
 8024f9c:	43db      	mvns	r3, r3
 8024f9e:	401a      	ands	r2, r3
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024fa4:	697b      	ldr	r3, [r7, #20]
 8024fa6:	08da      	lsrs	r2, r3, #3
 8024fa8:	687b      	ldr	r3, [r7, #4]
 8024faa:	3208      	adds	r2, #8
 8024fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024fb0:	697b      	ldr	r3, [r7, #20]
 8024fb2:	f003 0307 	and.w	r3, r3, #7
 8024fb6:	009b      	lsls	r3, r3, #2
 8024fb8:	220f      	movs	r2, #15
 8024fba:	fa02 f303 	lsl.w	r3, r2, r3
 8024fbe:	43db      	mvns	r3, r3
 8024fc0:	697a      	ldr	r2, [r7, #20]
 8024fc2:	08d2      	lsrs	r2, r2, #3
 8024fc4:	4019      	ands	r1, r3
 8024fc6:	687b      	ldr	r3, [r7, #4]
 8024fc8:	3208      	adds	r2, #8
 8024fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024fce:	687b      	ldr	r3, [r7, #4]
 8024fd0:	68da      	ldr	r2, [r3, #12]
 8024fd2:	697b      	ldr	r3, [r7, #20]
 8024fd4:	005b      	lsls	r3, r3, #1
 8024fd6:	2103      	movs	r1, #3
 8024fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8024fdc:	43db      	mvns	r3, r3
 8024fde:	401a      	ands	r2, r3
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	685a      	ldr	r2, [r3, #4]
 8024fe8:	2101      	movs	r1, #1
 8024fea:	697b      	ldr	r3, [r7, #20]
 8024fec:	fa01 f303 	lsl.w	r3, r1, r3
 8024ff0:	43db      	mvns	r3, r3
 8024ff2:	401a      	ands	r2, r3
 8024ff4:	687b      	ldr	r3, [r7, #4]
 8024ff6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	689a      	ldr	r2, [r3, #8]
 8024ffc:	697b      	ldr	r3, [r7, #20]
 8024ffe:	005b      	lsls	r3, r3, #1
 8025000:	2103      	movs	r1, #3
 8025002:	fa01 f303 	lsl.w	r3, r1, r3
 8025006:	43db      	mvns	r3, r3
 8025008:	401a      	ands	r2, r3
 802500a:	687b      	ldr	r3, [r7, #4]
 802500c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802500e:	697b      	ldr	r3, [r7, #20]
 8025010:	3301      	adds	r3, #1
 8025012:	617b      	str	r3, [r7, #20]
 8025014:	697b      	ldr	r3, [r7, #20]
 8025016:	2b0f      	cmp	r3, #15
 8025018:	f67f af22 	bls.w	8024e60 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 802501c:	bf00      	nop
 802501e:	bf00      	nop
 8025020:	371c      	adds	r7, #28
 8025022:	46bd      	mov	sp, r7
 8025024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025028:	4770      	bx	lr
 802502a:	bf00      	nop
 802502c:	40013800 	.word	0x40013800
 8025030:	40020000 	.word	0x40020000
 8025034:	40020400 	.word	0x40020400
 8025038:	40020800 	.word	0x40020800
 802503c:	40020c00 	.word	0x40020c00
 8025040:	40021000 	.word	0x40021000
 8025044:	40021400 	.word	0x40021400
 8025048:	40021800 	.word	0x40021800
 802504c:	40021c00 	.word	0x40021c00
 8025050:	40022000 	.word	0x40022000
 8025054:	40022400 	.word	0x40022400
 8025058:	40013c00 	.word	0x40013c00

0802505c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802505c:	b480      	push	{r7}
 802505e:	b083      	sub	sp, #12
 8025060:	af00      	add	r7, sp, #0
 8025062:	6078      	str	r0, [r7, #4]
 8025064:	460b      	mov	r3, r1
 8025066:	807b      	strh	r3, [r7, #2]
 8025068:	4613      	mov	r3, r2
 802506a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802506c:	787b      	ldrb	r3, [r7, #1]
 802506e:	2b00      	cmp	r3, #0
 8025070:	d003      	beq.n	802507a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025072:	887a      	ldrh	r2, [r7, #2]
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025078:	e003      	b.n	8025082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802507a:	887b      	ldrh	r3, [r7, #2]
 802507c:	041a      	lsls	r2, r3, #16
 802507e:	687b      	ldr	r3, [r7, #4]
 8025080:	619a      	str	r2, [r3, #24]
}
 8025082:	bf00      	nop
 8025084:	370c      	adds	r7, #12
 8025086:	46bd      	mov	sp, r7
 8025088:	f85d 7b04 	ldr.w	r7, [sp], #4
 802508c:	4770      	bx	lr
	...

08025090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8025090:	b580      	push	{r7, lr}
 8025092:	b082      	sub	sp, #8
 8025094:	af00      	add	r7, sp, #0
 8025096:	4603      	mov	r3, r0
 8025098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 802509a:	4b08      	ldr	r3, [pc, #32]	; (80250bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 802509c:	695a      	ldr	r2, [r3, #20]
 802509e:	88fb      	ldrh	r3, [r7, #6]
 80250a0:	4013      	ands	r3, r2
 80250a2:	2b00      	cmp	r3, #0
 80250a4:	d006      	beq.n	80250b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80250a6:	4a05      	ldr	r2, [pc, #20]	; (80250bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80250a8:	88fb      	ldrh	r3, [r7, #6]
 80250aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80250ac:	88fb      	ldrh	r3, [r7, #6]
 80250ae:	4618      	mov	r0, r3
 80250b0:	f7fc ffdc 	bl	802206c <HAL_GPIO_EXTI_Callback>
  }
}
 80250b4:	bf00      	nop
 80250b6:	3708      	adds	r7, #8
 80250b8:	46bd      	mov	sp, r7
 80250ba:	bd80      	pop	{r7, pc}
 80250bc:	40013c00 	.word	0x40013c00

080250c0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80250c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250c2:	b08f      	sub	sp, #60	; 0x3c
 80250c4:	af0a      	add	r7, sp, #40	; 0x28
 80250c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80250c8:	687b      	ldr	r3, [r7, #4]
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	d101      	bne.n	80250d2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80250ce:	2301      	movs	r3, #1
 80250d0:	e054      	b.n	802517c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	681b      	ldr	r3, [r3, #0]
 80250d6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80250d8:	687b      	ldr	r3, [r7, #4]
 80250da:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80250de:	b2db      	uxtb	r3, r3
 80250e0:	2b00      	cmp	r3, #0
 80250e2:	d106      	bne.n	80250f2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	2200      	movs	r2, #0
 80250e8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80250ec:	6878      	ldr	r0, [r7, #4]
 80250ee:	f008 fd01 	bl	802daf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80250f2:	687b      	ldr	r3, [r7, #4]
 80250f4:	2203      	movs	r2, #3
 80250f6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80250fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025102:	2b00      	cmp	r3, #0
 8025104:	d102      	bne.n	802510c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	2200      	movs	r2, #0
 802510a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 802510c:	687b      	ldr	r3, [r7, #4]
 802510e:	681b      	ldr	r3, [r3, #0]
 8025110:	4618      	mov	r0, r3
 8025112:	f005 fd2f 	bl	802ab74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8025116:	687b      	ldr	r3, [r7, #4]
 8025118:	681b      	ldr	r3, [r3, #0]
 802511a:	603b      	str	r3, [r7, #0]
 802511c:	687e      	ldr	r6, [r7, #4]
 802511e:	466d      	mov	r5, sp
 8025120:	f106 0410 	add.w	r4, r6, #16
 8025124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025128:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802512a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802512c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025130:	e885 0003 	stmia.w	r5, {r0, r1}
 8025134:	1d33      	adds	r3, r6, #4
 8025136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025138:	6838      	ldr	r0, [r7, #0]
 802513a:	f005 fca9 	bl	802aa90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802513e:	687b      	ldr	r3, [r7, #4]
 8025140:	681b      	ldr	r3, [r3, #0]
 8025142:	2101      	movs	r1, #1
 8025144:	4618      	mov	r0, r3
 8025146:	f005 fd26 	bl	802ab96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	681b      	ldr	r3, [r3, #0]
 802514e:	603b      	str	r3, [r7, #0]
 8025150:	687e      	ldr	r6, [r7, #4]
 8025152:	466d      	mov	r5, sp
 8025154:	f106 0410 	add.w	r4, r6, #16
 8025158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802515a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802515c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802515e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025160:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025164:	e885 0003 	stmia.w	r5, {r0, r1}
 8025168:	1d33      	adds	r3, r6, #4
 802516a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802516c:	6838      	ldr	r0, [r7, #0]
 802516e:	f005 feaf 	bl	802aed0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8025172:	687b      	ldr	r3, [r7, #4]
 8025174:	2201      	movs	r2, #1
 8025176:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 802517a:	2300      	movs	r3, #0
}
 802517c:	4618      	mov	r0, r3
 802517e:	3714      	adds	r7, #20
 8025180:	46bd      	mov	sp, r7
 8025182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025184 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8025184:	b590      	push	{r4, r7, lr}
 8025186:	b089      	sub	sp, #36	; 0x24
 8025188:	af04      	add	r7, sp, #16
 802518a:	6078      	str	r0, [r7, #4]
 802518c:	4608      	mov	r0, r1
 802518e:	4611      	mov	r1, r2
 8025190:	461a      	mov	r2, r3
 8025192:	4603      	mov	r3, r0
 8025194:	70fb      	strb	r3, [r7, #3]
 8025196:	460b      	mov	r3, r1
 8025198:	70bb      	strb	r3, [r7, #2]
 802519a:	4613      	mov	r3, r2
 802519c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80251a4:	2b01      	cmp	r3, #1
 80251a6:	d101      	bne.n	80251ac <HAL_HCD_HC_Init+0x28>
 80251a8:	2302      	movs	r3, #2
 80251aa:	e076      	b.n	802529a <HAL_HCD_HC_Init+0x116>
 80251ac:	687b      	ldr	r3, [r7, #4]
 80251ae:	2201      	movs	r2, #1
 80251b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80251b4:	78fb      	ldrb	r3, [r7, #3]
 80251b6:	687a      	ldr	r2, [r7, #4]
 80251b8:	212c      	movs	r1, #44	; 0x2c
 80251ba:	fb01 f303 	mul.w	r3, r1, r3
 80251be:	4413      	add	r3, r2
 80251c0:	333d      	adds	r3, #61	; 0x3d
 80251c2:	2200      	movs	r2, #0
 80251c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80251c6:	78fb      	ldrb	r3, [r7, #3]
 80251c8:	687a      	ldr	r2, [r7, #4]
 80251ca:	212c      	movs	r1, #44	; 0x2c
 80251cc:	fb01 f303 	mul.w	r3, r1, r3
 80251d0:	4413      	add	r3, r2
 80251d2:	3338      	adds	r3, #56	; 0x38
 80251d4:	787a      	ldrb	r2, [r7, #1]
 80251d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80251d8:	78fb      	ldrb	r3, [r7, #3]
 80251da:	687a      	ldr	r2, [r7, #4]
 80251dc:	212c      	movs	r1, #44	; 0x2c
 80251de:	fb01 f303 	mul.w	r3, r1, r3
 80251e2:	4413      	add	r3, r2
 80251e4:	3340      	adds	r3, #64	; 0x40
 80251e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80251e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80251ea:	78fb      	ldrb	r3, [r7, #3]
 80251ec:	687a      	ldr	r2, [r7, #4]
 80251ee:	212c      	movs	r1, #44	; 0x2c
 80251f0:	fb01 f303 	mul.w	r3, r1, r3
 80251f4:	4413      	add	r3, r2
 80251f6:	3339      	adds	r3, #57	; 0x39
 80251f8:	78fa      	ldrb	r2, [r7, #3]
 80251fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80251fc:	78fb      	ldrb	r3, [r7, #3]
 80251fe:	687a      	ldr	r2, [r7, #4]
 8025200:	212c      	movs	r1, #44	; 0x2c
 8025202:	fb01 f303 	mul.w	r3, r1, r3
 8025206:	4413      	add	r3, r2
 8025208:	333f      	adds	r3, #63	; 0x3f
 802520a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802520e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8025210:	78fb      	ldrb	r3, [r7, #3]
 8025212:	78ba      	ldrb	r2, [r7, #2]
 8025214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8025218:	b2d0      	uxtb	r0, r2
 802521a:	687a      	ldr	r2, [r7, #4]
 802521c:	212c      	movs	r1, #44	; 0x2c
 802521e:	fb01 f303 	mul.w	r3, r1, r3
 8025222:	4413      	add	r3, r2
 8025224:	333a      	adds	r3, #58	; 0x3a
 8025226:	4602      	mov	r2, r0
 8025228:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 802522a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802522e:	2b00      	cmp	r3, #0
 8025230:	da09      	bge.n	8025246 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8025232:	78fb      	ldrb	r3, [r7, #3]
 8025234:	687a      	ldr	r2, [r7, #4]
 8025236:	212c      	movs	r1, #44	; 0x2c
 8025238:	fb01 f303 	mul.w	r3, r1, r3
 802523c:	4413      	add	r3, r2
 802523e:	333b      	adds	r3, #59	; 0x3b
 8025240:	2201      	movs	r2, #1
 8025242:	701a      	strb	r2, [r3, #0]
 8025244:	e008      	b.n	8025258 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8025246:	78fb      	ldrb	r3, [r7, #3]
 8025248:	687a      	ldr	r2, [r7, #4]
 802524a:	212c      	movs	r1, #44	; 0x2c
 802524c:	fb01 f303 	mul.w	r3, r1, r3
 8025250:	4413      	add	r3, r2
 8025252:	333b      	adds	r3, #59	; 0x3b
 8025254:	2200      	movs	r2, #0
 8025256:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8025258:	78fb      	ldrb	r3, [r7, #3]
 802525a:	687a      	ldr	r2, [r7, #4]
 802525c:	212c      	movs	r1, #44	; 0x2c
 802525e:	fb01 f303 	mul.w	r3, r1, r3
 8025262:	4413      	add	r3, r2
 8025264:	333c      	adds	r3, #60	; 0x3c
 8025266:	f897 2020 	ldrb.w	r2, [r7, #32]
 802526a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	6818      	ldr	r0, [r3, #0]
 8025270:	787c      	ldrb	r4, [r7, #1]
 8025272:	78ba      	ldrb	r2, [r7, #2]
 8025274:	78f9      	ldrb	r1, [r7, #3]
 8025276:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8025278:	9302      	str	r3, [sp, #8]
 802527a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802527e:	9301      	str	r3, [sp, #4]
 8025280:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025284:	9300      	str	r3, [sp, #0]
 8025286:	4623      	mov	r3, r4
 8025288:	f005 ffa8 	bl	802b1dc <USB_HC_Init>
 802528c:	4603      	mov	r3, r0
 802528e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	2200      	movs	r2, #0
 8025294:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8025298:	7bfb      	ldrb	r3, [r7, #15]
}
 802529a:	4618      	mov	r0, r3
 802529c:	3714      	adds	r7, #20
 802529e:	46bd      	mov	sp, r7
 80252a0:	bd90      	pop	{r4, r7, pc}

080252a2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80252a2:	b580      	push	{r7, lr}
 80252a4:	b084      	sub	sp, #16
 80252a6:	af00      	add	r7, sp, #0
 80252a8:	6078      	str	r0, [r7, #4]
 80252aa:	460b      	mov	r3, r1
 80252ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80252ae:	2300      	movs	r3, #0
 80252b0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80252b8:	2b01      	cmp	r3, #1
 80252ba:	d101      	bne.n	80252c0 <HAL_HCD_HC_Halt+0x1e>
 80252bc:	2302      	movs	r3, #2
 80252be:	e00f      	b.n	80252e0 <HAL_HCD_HC_Halt+0x3e>
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	2201      	movs	r2, #1
 80252c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252c8:	687b      	ldr	r3, [r7, #4]
 80252ca:	681b      	ldr	r3, [r3, #0]
 80252cc:	78fa      	ldrb	r2, [r7, #3]
 80252ce:	4611      	mov	r1, r2
 80252d0:	4618      	mov	r0, r3
 80252d2:	f006 f9f8 	bl	802b6c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	2200      	movs	r2, #0
 80252da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80252de:	7bfb      	ldrb	r3, [r7, #15]
}
 80252e0:	4618      	mov	r0, r3
 80252e2:	3710      	adds	r7, #16
 80252e4:	46bd      	mov	sp, r7
 80252e6:	bd80      	pop	{r7, pc}

080252e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80252e8:	b580      	push	{r7, lr}
 80252ea:	b082      	sub	sp, #8
 80252ec:	af00      	add	r7, sp, #0
 80252ee:	6078      	str	r0, [r7, #4]
 80252f0:	4608      	mov	r0, r1
 80252f2:	4611      	mov	r1, r2
 80252f4:	461a      	mov	r2, r3
 80252f6:	4603      	mov	r3, r0
 80252f8:	70fb      	strb	r3, [r7, #3]
 80252fa:	460b      	mov	r3, r1
 80252fc:	70bb      	strb	r3, [r7, #2]
 80252fe:	4613      	mov	r3, r2
 8025300:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8025302:	78fb      	ldrb	r3, [r7, #3]
 8025304:	687a      	ldr	r2, [r7, #4]
 8025306:	212c      	movs	r1, #44	; 0x2c
 8025308:	fb01 f303 	mul.w	r3, r1, r3
 802530c:	4413      	add	r3, r2
 802530e:	333b      	adds	r3, #59	; 0x3b
 8025310:	78ba      	ldrb	r2, [r7, #2]
 8025312:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8025314:	78fb      	ldrb	r3, [r7, #3]
 8025316:	687a      	ldr	r2, [r7, #4]
 8025318:	212c      	movs	r1, #44	; 0x2c
 802531a:	fb01 f303 	mul.w	r3, r1, r3
 802531e:	4413      	add	r3, r2
 8025320:	333f      	adds	r3, #63	; 0x3f
 8025322:	787a      	ldrb	r2, [r7, #1]
 8025324:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8025326:	7c3b      	ldrb	r3, [r7, #16]
 8025328:	2b00      	cmp	r3, #0
 802532a:	d112      	bne.n	8025352 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 802532c:	78fb      	ldrb	r3, [r7, #3]
 802532e:	687a      	ldr	r2, [r7, #4]
 8025330:	212c      	movs	r1, #44	; 0x2c
 8025332:	fb01 f303 	mul.w	r3, r1, r3
 8025336:	4413      	add	r3, r2
 8025338:	3342      	adds	r3, #66	; 0x42
 802533a:	2203      	movs	r2, #3
 802533c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802533e:	78fb      	ldrb	r3, [r7, #3]
 8025340:	687a      	ldr	r2, [r7, #4]
 8025342:	212c      	movs	r1, #44	; 0x2c
 8025344:	fb01 f303 	mul.w	r3, r1, r3
 8025348:	4413      	add	r3, r2
 802534a:	333d      	adds	r3, #61	; 0x3d
 802534c:	7f3a      	ldrb	r2, [r7, #28]
 802534e:	701a      	strb	r2, [r3, #0]
 8025350:	e008      	b.n	8025364 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025352:	78fb      	ldrb	r3, [r7, #3]
 8025354:	687a      	ldr	r2, [r7, #4]
 8025356:	212c      	movs	r1, #44	; 0x2c
 8025358:	fb01 f303 	mul.w	r3, r1, r3
 802535c:	4413      	add	r3, r2
 802535e:	3342      	adds	r3, #66	; 0x42
 8025360:	2202      	movs	r2, #2
 8025362:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8025364:	787b      	ldrb	r3, [r7, #1]
 8025366:	2b03      	cmp	r3, #3
 8025368:	f200 80c6 	bhi.w	80254f8 <HAL_HCD_HC_SubmitRequest+0x210>
 802536c:	a201      	add	r2, pc, #4	; (adr r2, 8025374 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025372:	bf00      	nop
 8025374:	08025385 	.word	0x08025385
 8025378:	080254e5 	.word	0x080254e5
 802537c:	080253e9 	.word	0x080253e9
 8025380:	08025467 	.word	0x08025467
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8025384:	7c3b      	ldrb	r3, [r7, #16]
 8025386:	2b01      	cmp	r3, #1
 8025388:	f040 80b8 	bne.w	80254fc <HAL_HCD_HC_SubmitRequest+0x214>
 802538c:	78bb      	ldrb	r3, [r7, #2]
 802538e:	2b00      	cmp	r3, #0
 8025390:	f040 80b4 	bne.w	80254fc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8025394:	8b3b      	ldrh	r3, [r7, #24]
 8025396:	2b00      	cmp	r3, #0
 8025398:	d108      	bne.n	80253ac <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 802539a:	78fb      	ldrb	r3, [r7, #3]
 802539c:	687a      	ldr	r2, [r7, #4]
 802539e:	212c      	movs	r1, #44	; 0x2c
 80253a0:	fb01 f303 	mul.w	r3, r1, r3
 80253a4:	4413      	add	r3, r2
 80253a6:	3355      	adds	r3, #85	; 0x55
 80253a8:	2201      	movs	r2, #1
 80253aa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80253ac:	78fb      	ldrb	r3, [r7, #3]
 80253ae:	687a      	ldr	r2, [r7, #4]
 80253b0:	212c      	movs	r1, #44	; 0x2c
 80253b2:	fb01 f303 	mul.w	r3, r1, r3
 80253b6:	4413      	add	r3, r2
 80253b8:	3355      	adds	r3, #85	; 0x55
 80253ba:	781b      	ldrb	r3, [r3, #0]
 80253bc:	2b00      	cmp	r3, #0
 80253be:	d109      	bne.n	80253d4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253c0:	78fb      	ldrb	r3, [r7, #3]
 80253c2:	687a      	ldr	r2, [r7, #4]
 80253c4:	212c      	movs	r1, #44	; 0x2c
 80253c6:	fb01 f303 	mul.w	r3, r1, r3
 80253ca:	4413      	add	r3, r2
 80253cc:	3342      	adds	r3, #66	; 0x42
 80253ce:	2200      	movs	r2, #0
 80253d0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80253d2:	e093      	b.n	80254fc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80253d4:	78fb      	ldrb	r3, [r7, #3]
 80253d6:	687a      	ldr	r2, [r7, #4]
 80253d8:	212c      	movs	r1, #44	; 0x2c
 80253da:	fb01 f303 	mul.w	r3, r1, r3
 80253de:	4413      	add	r3, r2
 80253e0:	3342      	adds	r3, #66	; 0x42
 80253e2:	2202      	movs	r2, #2
 80253e4:	701a      	strb	r2, [r3, #0]
      break;
 80253e6:	e089      	b.n	80254fc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80253e8:	78bb      	ldrb	r3, [r7, #2]
 80253ea:	2b00      	cmp	r3, #0
 80253ec:	d11d      	bne.n	802542a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80253ee:	78fb      	ldrb	r3, [r7, #3]
 80253f0:	687a      	ldr	r2, [r7, #4]
 80253f2:	212c      	movs	r1, #44	; 0x2c
 80253f4:	fb01 f303 	mul.w	r3, r1, r3
 80253f8:	4413      	add	r3, r2
 80253fa:	3355      	adds	r3, #85	; 0x55
 80253fc:	781b      	ldrb	r3, [r3, #0]
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d109      	bne.n	8025416 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025402:	78fb      	ldrb	r3, [r7, #3]
 8025404:	687a      	ldr	r2, [r7, #4]
 8025406:	212c      	movs	r1, #44	; 0x2c
 8025408:	fb01 f303 	mul.w	r3, r1, r3
 802540c:	4413      	add	r3, r2
 802540e:	3342      	adds	r3, #66	; 0x42
 8025410:	2200      	movs	r2, #0
 8025412:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8025414:	e073      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025416:	78fb      	ldrb	r3, [r7, #3]
 8025418:	687a      	ldr	r2, [r7, #4]
 802541a:	212c      	movs	r1, #44	; 0x2c
 802541c:	fb01 f303 	mul.w	r3, r1, r3
 8025420:	4413      	add	r3, r2
 8025422:	3342      	adds	r3, #66	; 0x42
 8025424:	2202      	movs	r2, #2
 8025426:	701a      	strb	r2, [r3, #0]
      break;
 8025428:	e069      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 802542a:	78fb      	ldrb	r3, [r7, #3]
 802542c:	687a      	ldr	r2, [r7, #4]
 802542e:	212c      	movs	r1, #44	; 0x2c
 8025430:	fb01 f303 	mul.w	r3, r1, r3
 8025434:	4413      	add	r3, r2
 8025436:	3354      	adds	r3, #84	; 0x54
 8025438:	781b      	ldrb	r3, [r3, #0]
 802543a:	2b00      	cmp	r3, #0
 802543c:	d109      	bne.n	8025452 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802543e:	78fb      	ldrb	r3, [r7, #3]
 8025440:	687a      	ldr	r2, [r7, #4]
 8025442:	212c      	movs	r1, #44	; 0x2c
 8025444:	fb01 f303 	mul.w	r3, r1, r3
 8025448:	4413      	add	r3, r2
 802544a:	3342      	adds	r3, #66	; 0x42
 802544c:	2200      	movs	r2, #0
 802544e:	701a      	strb	r2, [r3, #0]
      break;
 8025450:	e055      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025452:	78fb      	ldrb	r3, [r7, #3]
 8025454:	687a      	ldr	r2, [r7, #4]
 8025456:	212c      	movs	r1, #44	; 0x2c
 8025458:	fb01 f303 	mul.w	r3, r1, r3
 802545c:	4413      	add	r3, r2
 802545e:	3342      	adds	r3, #66	; 0x42
 8025460:	2202      	movs	r2, #2
 8025462:	701a      	strb	r2, [r3, #0]
      break;
 8025464:	e04b      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8025466:	78bb      	ldrb	r3, [r7, #2]
 8025468:	2b00      	cmp	r3, #0
 802546a:	d11d      	bne.n	80254a8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802546c:	78fb      	ldrb	r3, [r7, #3]
 802546e:	687a      	ldr	r2, [r7, #4]
 8025470:	212c      	movs	r1, #44	; 0x2c
 8025472:	fb01 f303 	mul.w	r3, r1, r3
 8025476:	4413      	add	r3, r2
 8025478:	3355      	adds	r3, #85	; 0x55
 802547a:	781b      	ldrb	r3, [r3, #0]
 802547c:	2b00      	cmp	r3, #0
 802547e:	d109      	bne.n	8025494 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025480:	78fb      	ldrb	r3, [r7, #3]
 8025482:	687a      	ldr	r2, [r7, #4]
 8025484:	212c      	movs	r1, #44	; 0x2c
 8025486:	fb01 f303 	mul.w	r3, r1, r3
 802548a:	4413      	add	r3, r2
 802548c:	3342      	adds	r3, #66	; 0x42
 802548e:	2200      	movs	r2, #0
 8025490:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8025492:	e034      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025494:	78fb      	ldrb	r3, [r7, #3]
 8025496:	687a      	ldr	r2, [r7, #4]
 8025498:	212c      	movs	r1, #44	; 0x2c
 802549a:	fb01 f303 	mul.w	r3, r1, r3
 802549e:	4413      	add	r3, r2
 80254a0:	3342      	adds	r3, #66	; 0x42
 80254a2:	2202      	movs	r2, #2
 80254a4:	701a      	strb	r2, [r3, #0]
      break;
 80254a6:	e02a      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80254a8:	78fb      	ldrb	r3, [r7, #3]
 80254aa:	687a      	ldr	r2, [r7, #4]
 80254ac:	212c      	movs	r1, #44	; 0x2c
 80254ae:	fb01 f303 	mul.w	r3, r1, r3
 80254b2:	4413      	add	r3, r2
 80254b4:	3354      	adds	r3, #84	; 0x54
 80254b6:	781b      	ldrb	r3, [r3, #0]
 80254b8:	2b00      	cmp	r3, #0
 80254ba:	d109      	bne.n	80254d0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254bc:	78fb      	ldrb	r3, [r7, #3]
 80254be:	687a      	ldr	r2, [r7, #4]
 80254c0:	212c      	movs	r1, #44	; 0x2c
 80254c2:	fb01 f303 	mul.w	r3, r1, r3
 80254c6:	4413      	add	r3, r2
 80254c8:	3342      	adds	r3, #66	; 0x42
 80254ca:	2200      	movs	r2, #0
 80254cc:	701a      	strb	r2, [r3, #0]
      break;
 80254ce:	e016      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80254d0:	78fb      	ldrb	r3, [r7, #3]
 80254d2:	687a      	ldr	r2, [r7, #4]
 80254d4:	212c      	movs	r1, #44	; 0x2c
 80254d6:	fb01 f303 	mul.w	r3, r1, r3
 80254da:	4413      	add	r3, r2
 80254dc:	3342      	adds	r3, #66	; 0x42
 80254de:	2202      	movs	r2, #2
 80254e0:	701a      	strb	r2, [r3, #0]
      break;
 80254e2:	e00c      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254e4:	78fb      	ldrb	r3, [r7, #3]
 80254e6:	687a      	ldr	r2, [r7, #4]
 80254e8:	212c      	movs	r1, #44	; 0x2c
 80254ea:	fb01 f303 	mul.w	r3, r1, r3
 80254ee:	4413      	add	r3, r2
 80254f0:	3342      	adds	r3, #66	; 0x42
 80254f2:	2200      	movs	r2, #0
 80254f4:	701a      	strb	r2, [r3, #0]
      break;
 80254f6:	e002      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80254f8:	bf00      	nop
 80254fa:	e000      	b.n	80254fe <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80254fc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80254fe:	78fb      	ldrb	r3, [r7, #3]
 8025500:	687a      	ldr	r2, [r7, #4]
 8025502:	212c      	movs	r1, #44	; 0x2c
 8025504:	fb01 f303 	mul.w	r3, r1, r3
 8025508:	4413      	add	r3, r2
 802550a:	3344      	adds	r3, #68	; 0x44
 802550c:	697a      	ldr	r2, [r7, #20]
 802550e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8025510:	78fb      	ldrb	r3, [r7, #3]
 8025512:	8b3a      	ldrh	r2, [r7, #24]
 8025514:	6879      	ldr	r1, [r7, #4]
 8025516:	202c      	movs	r0, #44	; 0x2c
 8025518:	fb00 f303 	mul.w	r3, r0, r3
 802551c:	440b      	add	r3, r1
 802551e:	334c      	adds	r3, #76	; 0x4c
 8025520:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8025522:	78fb      	ldrb	r3, [r7, #3]
 8025524:	687a      	ldr	r2, [r7, #4]
 8025526:	212c      	movs	r1, #44	; 0x2c
 8025528:	fb01 f303 	mul.w	r3, r1, r3
 802552c:	4413      	add	r3, r2
 802552e:	3360      	adds	r3, #96	; 0x60
 8025530:	2200      	movs	r2, #0
 8025532:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8025534:	78fb      	ldrb	r3, [r7, #3]
 8025536:	687a      	ldr	r2, [r7, #4]
 8025538:	212c      	movs	r1, #44	; 0x2c
 802553a:	fb01 f303 	mul.w	r3, r1, r3
 802553e:	4413      	add	r3, r2
 8025540:	3350      	adds	r3, #80	; 0x50
 8025542:	2200      	movs	r2, #0
 8025544:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025546:	78fb      	ldrb	r3, [r7, #3]
 8025548:	687a      	ldr	r2, [r7, #4]
 802554a:	212c      	movs	r1, #44	; 0x2c
 802554c:	fb01 f303 	mul.w	r3, r1, r3
 8025550:	4413      	add	r3, r2
 8025552:	3339      	adds	r3, #57	; 0x39
 8025554:	78fa      	ldrb	r2, [r7, #3]
 8025556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8025558:	78fb      	ldrb	r3, [r7, #3]
 802555a:	687a      	ldr	r2, [r7, #4]
 802555c:	212c      	movs	r1, #44	; 0x2c
 802555e:	fb01 f303 	mul.w	r3, r1, r3
 8025562:	4413      	add	r3, r2
 8025564:	3361      	adds	r3, #97	; 0x61
 8025566:	2200      	movs	r2, #0
 8025568:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 802556a:	687b      	ldr	r3, [r7, #4]
 802556c:	6818      	ldr	r0, [r3, #0]
 802556e:	78fb      	ldrb	r3, [r7, #3]
 8025570:	222c      	movs	r2, #44	; 0x2c
 8025572:	fb02 f303 	mul.w	r3, r2, r3
 8025576:	3338      	adds	r3, #56	; 0x38
 8025578:	687a      	ldr	r2, [r7, #4]
 802557a:	18d1      	adds	r1, r2, r3
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	691b      	ldr	r3, [r3, #16]
 8025580:	b2db      	uxtb	r3, r3
 8025582:	461a      	mov	r2, r3
 8025584:	f005 ff4c 	bl	802b420 <USB_HC_StartXfer>
 8025588:	4603      	mov	r3, r0
}
 802558a:	4618      	mov	r0, r3
 802558c:	3708      	adds	r7, #8
 802558e:	46bd      	mov	sp, r7
 8025590:	bd80      	pop	{r7, pc}
 8025592:	bf00      	nop

08025594 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025594:	b580      	push	{r7, lr}
 8025596:	b086      	sub	sp, #24
 8025598:	af00      	add	r7, sp, #0
 802559a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802559c:	687b      	ldr	r3, [r7, #4]
 802559e:	681b      	ldr	r3, [r3, #0]
 80255a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80255a2:	693b      	ldr	r3, [r7, #16]
 80255a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80255a6:	687b      	ldr	r3, [r7, #4]
 80255a8:	681b      	ldr	r3, [r3, #0]
 80255aa:	4618      	mov	r0, r3
 80255ac:	f005 fc4d 	bl	802ae4a <USB_GetMode>
 80255b0:	4603      	mov	r3, r0
 80255b2:	2b01      	cmp	r3, #1
 80255b4:	f040 80f6 	bne.w	80257a4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80255b8:	687b      	ldr	r3, [r7, #4]
 80255ba:	681b      	ldr	r3, [r3, #0]
 80255bc:	4618      	mov	r0, r3
 80255be:	f005 fc31 	bl	802ae24 <USB_ReadInterrupts>
 80255c2:	4603      	mov	r3, r0
 80255c4:	2b00      	cmp	r3, #0
 80255c6:	f000 80ec 	beq.w	80257a2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80255ca:	687b      	ldr	r3, [r7, #4]
 80255cc:	681b      	ldr	r3, [r3, #0]
 80255ce:	4618      	mov	r0, r3
 80255d0:	f005 fc28 	bl	802ae24 <USB_ReadInterrupts>
 80255d4:	4603      	mov	r3, r0
 80255d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80255da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80255de:	d104      	bne.n	80255ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80255e0:	687b      	ldr	r3, [r7, #4]
 80255e2:	681b      	ldr	r3, [r3, #0]
 80255e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80255e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80255ea:	687b      	ldr	r3, [r7, #4]
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	4618      	mov	r0, r3
 80255f0:	f005 fc18 	bl	802ae24 <USB_ReadInterrupts>
 80255f4:	4603      	mov	r3, r0
 80255f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80255fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80255fe:	d104      	bne.n	802560a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8025600:	687b      	ldr	r3, [r7, #4]
 8025602:	681b      	ldr	r3, [r3, #0]
 8025604:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025608:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	681b      	ldr	r3, [r3, #0]
 802560e:	4618      	mov	r0, r3
 8025610:	f005 fc08 	bl	802ae24 <USB_ReadInterrupts>
 8025614:	4603      	mov	r3, r0
 8025616:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802561a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802561e:	d104      	bne.n	802562a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	681b      	ldr	r3, [r3, #0]
 8025624:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 802562a:	687b      	ldr	r3, [r7, #4]
 802562c:	681b      	ldr	r3, [r3, #0]
 802562e:	4618      	mov	r0, r3
 8025630:	f005 fbf8 	bl	802ae24 <USB_ReadInterrupts>
 8025634:	4603      	mov	r3, r0
 8025636:	f003 0302 	and.w	r3, r3, #2
 802563a:	2b02      	cmp	r3, #2
 802563c:	d103      	bne.n	8025646 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	681b      	ldr	r3, [r3, #0]
 8025642:	2202      	movs	r2, #2
 8025644:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8025646:	687b      	ldr	r3, [r7, #4]
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	4618      	mov	r0, r3
 802564c:	f005 fbea 	bl	802ae24 <USB_ReadInterrupts>
 8025650:	4603      	mov	r3, r0
 8025652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8025656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802565a:	d11c      	bne.n	8025696 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 802565c:	687b      	ldr	r3, [r7, #4]
 802565e:	681b      	ldr	r3, [r3, #0]
 8025660:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8025664:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8025666:	68fb      	ldr	r3, [r7, #12]
 8025668:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802566c:	681b      	ldr	r3, [r3, #0]
 802566e:	f003 0301 	and.w	r3, r3, #1
 8025672:	2b00      	cmp	r3, #0
 8025674:	d10f      	bne.n	8025696 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8025676:	2110      	movs	r1, #16
 8025678:	6938      	ldr	r0, [r7, #16]
 802567a:	f005 fad9 	bl	802ac30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 802567e:	6938      	ldr	r0, [r7, #16]
 8025680:	f005 fb0a 	bl	802ac98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025684:	687b      	ldr	r3, [r7, #4]
 8025686:	681b      	ldr	r3, [r3, #0]
 8025688:	2101      	movs	r1, #1
 802568a:	4618      	mov	r0, r3
 802568c:	f005 fce0 	bl	802b050 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8025690:	6878      	ldr	r0, [r7, #4]
 8025692:	f008 faa9 	bl	802dbe8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	681b      	ldr	r3, [r3, #0]
 802569a:	4618      	mov	r0, r3
 802569c:	f005 fbc2 	bl	802ae24 <USB_ReadInterrupts>
 80256a0:	4603      	mov	r3, r0
 80256a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80256a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80256aa:	d102      	bne.n	80256b2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80256ac:	6878      	ldr	r0, [r7, #4]
 80256ae:	f001 f89e 	bl	80267ee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80256b2:	687b      	ldr	r3, [r7, #4]
 80256b4:	681b      	ldr	r3, [r3, #0]
 80256b6:	4618      	mov	r0, r3
 80256b8:	f005 fbb4 	bl	802ae24 <USB_ReadInterrupts>
 80256bc:	4603      	mov	r3, r0
 80256be:	f003 0308 	and.w	r3, r3, #8
 80256c2:	2b08      	cmp	r3, #8
 80256c4:	d106      	bne.n	80256d4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80256c6:	6878      	ldr	r0, [r7, #4]
 80256c8:	f008 fa72 	bl	802dbb0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	681b      	ldr	r3, [r3, #0]
 80256d0:	2208      	movs	r2, #8
 80256d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80256d4:	687b      	ldr	r3, [r7, #4]
 80256d6:	681b      	ldr	r3, [r3, #0]
 80256d8:	4618      	mov	r0, r3
 80256da:	f005 fba3 	bl	802ae24 <USB_ReadInterrupts>
 80256de:	4603      	mov	r3, r0
 80256e0:	f003 0310 	and.w	r3, r3, #16
 80256e4:	2b10      	cmp	r3, #16
 80256e6:	d101      	bne.n	80256ec <HAL_HCD_IRQHandler+0x158>
 80256e8:	2301      	movs	r3, #1
 80256ea:	e000      	b.n	80256ee <HAL_HCD_IRQHandler+0x15a>
 80256ec:	2300      	movs	r3, #0
 80256ee:	2b00      	cmp	r3, #0
 80256f0:	d012      	beq.n	8025718 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80256f2:	687b      	ldr	r3, [r7, #4]
 80256f4:	681b      	ldr	r3, [r3, #0]
 80256f6:	699a      	ldr	r2, [r3, #24]
 80256f8:	687b      	ldr	r3, [r7, #4]
 80256fa:	681b      	ldr	r3, [r3, #0]
 80256fc:	f022 0210 	bic.w	r2, r2, #16
 8025700:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8025702:	6878      	ldr	r0, [r7, #4]
 8025704:	f000 ffa1 	bl	802664a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025708:	687b      	ldr	r3, [r7, #4]
 802570a:	681b      	ldr	r3, [r3, #0]
 802570c:	699a      	ldr	r2, [r3, #24]
 802570e:	687b      	ldr	r3, [r7, #4]
 8025710:	681b      	ldr	r3, [r3, #0]
 8025712:	f042 0210 	orr.w	r2, r2, #16
 8025716:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	681b      	ldr	r3, [r3, #0]
 802571c:	4618      	mov	r0, r3
 802571e:	f005 fb81 	bl	802ae24 <USB_ReadInterrupts>
 8025722:	4603      	mov	r3, r0
 8025724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025728:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802572c:	d13a      	bne.n	80257a4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 802572e:	687b      	ldr	r3, [r7, #4]
 8025730:	681b      	ldr	r3, [r3, #0]
 8025732:	4618      	mov	r0, r3
 8025734:	f005 ffb6 	bl	802b6a4 <USB_HC_ReadInterrupt>
 8025738:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 802573a:	2300      	movs	r3, #0
 802573c:	617b      	str	r3, [r7, #20]
 802573e:	e025      	b.n	802578c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8025740:	697b      	ldr	r3, [r7, #20]
 8025742:	f003 030f 	and.w	r3, r3, #15
 8025746:	68ba      	ldr	r2, [r7, #8]
 8025748:	fa22 f303 	lsr.w	r3, r2, r3
 802574c:	f003 0301 	and.w	r3, r3, #1
 8025750:	2b00      	cmp	r3, #0
 8025752:	d018      	beq.n	8025786 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8025754:	697b      	ldr	r3, [r7, #20]
 8025756:	015a      	lsls	r2, r3, #5
 8025758:	68fb      	ldr	r3, [r7, #12]
 802575a:	4413      	add	r3, r2
 802575c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025760:	681b      	ldr	r3, [r3, #0]
 8025762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802576a:	d106      	bne.n	802577a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 802576c:	697b      	ldr	r3, [r7, #20]
 802576e:	b2db      	uxtb	r3, r3
 8025770:	4619      	mov	r1, r3
 8025772:	6878      	ldr	r0, [r7, #4]
 8025774:	f000 f8ab 	bl	80258ce <HCD_HC_IN_IRQHandler>
 8025778:	e005      	b.n	8025786 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 802577a:	697b      	ldr	r3, [r7, #20]
 802577c:	b2db      	uxtb	r3, r3
 802577e:	4619      	mov	r1, r3
 8025780:	6878      	ldr	r0, [r7, #4]
 8025782:	f000 fbf9 	bl	8025f78 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025786:	697b      	ldr	r3, [r7, #20]
 8025788:	3301      	adds	r3, #1
 802578a:	617b      	str	r3, [r7, #20]
 802578c:	687b      	ldr	r3, [r7, #4]
 802578e:	689b      	ldr	r3, [r3, #8]
 8025790:	697a      	ldr	r2, [r7, #20]
 8025792:	429a      	cmp	r2, r3
 8025794:	d3d4      	bcc.n	8025740 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8025796:	687b      	ldr	r3, [r7, #4]
 8025798:	681b      	ldr	r3, [r3, #0]
 802579a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802579e:	615a      	str	r2, [r3, #20]
 80257a0:	e000      	b.n	80257a4 <HAL_HCD_IRQHandler+0x210>
      return;
 80257a2:	bf00      	nop
    }
  }
}
 80257a4:	3718      	adds	r7, #24
 80257a6:	46bd      	mov	sp, r7
 80257a8:	bd80      	pop	{r7, pc}

080257aa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80257aa:	b580      	push	{r7, lr}
 80257ac:	b082      	sub	sp, #8
 80257ae:	af00      	add	r7, sp, #0
 80257b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80257b8:	2b01      	cmp	r3, #1
 80257ba:	d101      	bne.n	80257c0 <HAL_HCD_Start+0x16>
 80257bc:	2302      	movs	r3, #2
 80257be:	e013      	b.n	80257e8 <HAL_HCD_Start+0x3e>
 80257c0:	687b      	ldr	r3, [r7, #4]
 80257c2:	2201      	movs	r2, #1
 80257c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80257c8:	687b      	ldr	r3, [r7, #4]
 80257ca:	681b      	ldr	r3, [r3, #0]
 80257cc:	2101      	movs	r1, #1
 80257ce:	4618      	mov	r0, r3
 80257d0:	f005 fca2 	bl	802b118 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80257d4:	687b      	ldr	r3, [r7, #4]
 80257d6:	681b      	ldr	r3, [r3, #0]
 80257d8:	4618      	mov	r0, r3
 80257da:	f005 f9ba 	bl	802ab52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80257de:	687b      	ldr	r3, [r7, #4]
 80257e0:	2200      	movs	r2, #0
 80257e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80257e6:	2300      	movs	r3, #0
}
 80257e8:	4618      	mov	r0, r3
 80257ea:	3708      	adds	r7, #8
 80257ec:	46bd      	mov	sp, r7
 80257ee:	bd80      	pop	{r7, pc}

080257f0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80257f0:	b580      	push	{r7, lr}
 80257f2:	b082      	sub	sp, #8
 80257f4:	af00      	add	r7, sp, #0
 80257f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80257f8:	687b      	ldr	r3, [r7, #4]
 80257fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80257fe:	2b01      	cmp	r3, #1
 8025800:	d101      	bne.n	8025806 <HAL_HCD_Stop+0x16>
 8025802:	2302      	movs	r3, #2
 8025804:	e00d      	b.n	8025822 <HAL_HCD_Stop+0x32>
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	2201      	movs	r2, #1
 802580a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	4618      	mov	r0, r3
 8025814:	f006 f890 	bl	802b938 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025818:	687b      	ldr	r3, [r7, #4]
 802581a:	2200      	movs	r2, #0
 802581c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025820:	2300      	movs	r3, #0
}
 8025822:	4618      	mov	r0, r3
 8025824:	3708      	adds	r7, #8
 8025826:	46bd      	mov	sp, r7
 8025828:	bd80      	pop	{r7, pc}

0802582a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 802582a:	b580      	push	{r7, lr}
 802582c:	b082      	sub	sp, #8
 802582e:	af00      	add	r7, sp, #0
 8025830:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8025832:	687b      	ldr	r3, [r7, #4]
 8025834:	681b      	ldr	r3, [r3, #0]
 8025836:	4618      	mov	r0, r3
 8025838:	f005 fc44 	bl	802b0c4 <USB_ResetPort>
 802583c:	4603      	mov	r3, r0
}
 802583e:	4618      	mov	r0, r3
 8025840:	3708      	adds	r7, #8
 8025842:	46bd      	mov	sp, r7
 8025844:	bd80      	pop	{r7, pc}

08025846 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025846:	b480      	push	{r7}
 8025848:	b083      	sub	sp, #12
 802584a:	af00      	add	r7, sp, #0
 802584c:	6078      	str	r0, [r7, #4]
 802584e:	460b      	mov	r3, r1
 8025850:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8025852:	78fb      	ldrb	r3, [r7, #3]
 8025854:	687a      	ldr	r2, [r7, #4]
 8025856:	212c      	movs	r1, #44	; 0x2c
 8025858:	fb01 f303 	mul.w	r3, r1, r3
 802585c:	4413      	add	r3, r2
 802585e:	3360      	adds	r3, #96	; 0x60
 8025860:	781b      	ldrb	r3, [r3, #0]
}
 8025862:	4618      	mov	r0, r3
 8025864:	370c      	adds	r7, #12
 8025866:	46bd      	mov	sp, r7
 8025868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802586c:	4770      	bx	lr

0802586e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802586e:	b480      	push	{r7}
 8025870:	b083      	sub	sp, #12
 8025872:	af00      	add	r7, sp, #0
 8025874:	6078      	str	r0, [r7, #4]
 8025876:	460b      	mov	r3, r1
 8025878:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 802587a:	78fb      	ldrb	r3, [r7, #3]
 802587c:	687a      	ldr	r2, [r7, #4]
 802587e:	212c      	movs	r1, #44	; 0x2c
 8025880:	fb01 f303 	mul.w	r3, r1, r3
 8025884:	4413      	add	r3, r2
 8025886:	3350      	adds	r3, #80	; 0x50
 8025888:	681b      	ldr	r3, [r3, #0]
}
 802588a:	4618      	mov	r0, r3
 802588c:	370c      	adds	r7, #12
 802588e:	46bd      	mov	sp, r7
 8025890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025894:	4770      	bx	lr

08025896 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8025896:	b580      	push	{r7, lr}
 8025898:	b082      	sub	sp, #8
 802589a:	af00      	add	r7, sp, #0
 802589c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 802589e:	687b      	ldr	r3, [r7, #4]
 80258a0:	681b      	ldr	r3, [r3, #0]
 80258a2:	4618      	mov	r0, r3
 80258a4:	f005 fc88 	bl	802b1b8 <USB_GetCurrentFrame>
 80258a8:	4603      	mov	r3, r0
}
 80258aa:	4618      	mov	r0, r3
 80258ac:	3708      	adds	r7, #8
 80258ae:	46bd      	mov	sp, r7
 80258b0:	bd80      	pop	{r7, pc}

080258b2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80258b2:	b580      	push	{r7, lr}
 80258b4:	b082      	sub	sp, #8
 80258b6:	af00      	add	r7, sp, #0
 80258b8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80258ba:	687b      	ldr	r3, [r7, #4]
 80258bc:	681b      	ldr	r3, [r3, #0]
 80258be:	4618      	mov	r0, r3
 80258c0:	f005 fc63 	bl	802b18a <USB_GetHostSpeed>
 80258c4:	4603      	mov	r3, r0
}
 80258c6:	4618      	mov	r0, r3
 80258c8:	3708      	adds	r7, #8
 80258ca:	46bd      	mov	sp, r7
 80258cc:	bd80      	pop	{r7, pc}

080258ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80258ce:	b580      	push	{r7, lr}
 80258d0:	b086      	sub	sp, #24
 80258d2:	af00      	add	r7, sp, #0
 80258d4:	6078      	str	r0, [r7, #4]
 80258d6:	460b      	mov	r3, r1
 80258d8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80258da:	687b      	ldr	r3, [r7, #4]
 80258dc:	681b      	ldr	r3, [r3, #0]
 80258de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80258e0:	697b      	ldr	r3, [r7, #20]
 80258e2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80258e4:	78fb      	ldrb	r3, [r7, #3]
 80258e6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80258e8:	68fb      	ldr	r3, [r7, #12]
 80258ea:	015a      	lsls	r2, r3, #5
 80258ec:	693b      	ldr	r3, [r7, #16]
 80258ee:	4413      	add	r3, r2
 80258f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258f4:	689b      	ldr	r3, [r3, #8]
 80258f6:	f003 0304 	and.w	r3, r3, #4
 80258fa:	2b04      	cmp	r3, #4
 80258fc:	d11a      	bne.n	8025934 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80258fe:	68fb      	ldr	r3, [r7, #12]
 8025900:	015a      	lsls	r2, r3, #5
 8025902:	693b      	ldr	r3, [r7, #16]
 8025904:	4413      	add	r3, r2
 8025906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802590a:	461a      	mov	r2, r3
 802590c:	2304      	movs	r3, #4
 802590e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025910:	687a      	ldr	r2, [r7, #4]
 8025912:	68fb      	ldr	r3, [r7, #12]
 8025914:	212c      	movs	r1, #44	; 0x2c
 8025916:	fb01 f303 	mul.w	r3, r1, r3
 802591a:	4413      	add	r3, r2
 802591c:	3361      	adds	r3, #97	; 0x61
 802591e:	2206      	movs	r2, #6
 8025920:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025922:	687b      	ldr	r3, [r7, #4]
 8025924:	681b      	ldr	r3, [r3, #0]
 8025926:	68fa      	ldr	r2, [r7, #12]
 8025928:	b2d2      	uxtb	r2, r2
 802592a:	4611      	mov	r1, r2
 802592c:	4618      	mov	r0, r3
 802592e:	f005 feca 	bl	802b6c6 <USB_HC_Halt>
 8025932:	e0af      	b.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025934:	68fb      	ldr	r3, [r7, #12]
 8025936:	015a      	lsls	r2, r3, #5
 8025938:	693b      	ldr	r3, [r7, #16]
 802593a:	4413      	add	r3, r2
 802593c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025940:	689b      	ldr	r3, [r3, #8]
 8025942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802594a:	d11b      	bne.n	8025984 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 802594c:	68fb      	ldr	r3, [r7, #12]
 802594e:	015a      	lsls	r2, r3, #5
 8025950:	693b      	ldr	r3, [r7, #16]
 8025952:	4413      	add	r3, r2
 8025954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025958:	461a      	mov	r2, r3
 802595a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802595e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8025960:	687a      	ldr	r2, [r7, #4]
 8025962:	68fb      	ldr	r3, [r7, #12]
 8025964:	212c      	movs	r1, #44	; 0x2c
 8025966:	fb01 f303 	mul.w	r3, r1, r3
 802596a:	4413      	add	r3, r2
 802596c:	3361      	adds	r3, #97	; 0x61
 802596e:	2207      	movs	r2, #7
 8025970:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	681b      	ldr	r3, [r3, #0]
 8025976:	68fa      	ldr	r2, [r7, #12]
 8025978:	b2d2      	uxtb	r2, r2
 802597a:	4611      	mov	r1, r2
 802597c:	4618      	mov	r0, r3
 802597e:	f005 fea2 	bl	802b6c6 <USB_HC_Halt>
 8025982:	e087      	b.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	015a      	lsls	r2, r3, #5
 8025988:	693b      	ldr	r3, [r7, #16]
 802598a:	4413      	add	r3, r2
 802598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025990:	689b      	ldr	r3, [r3, #8]
 8025992:	f003 0320 	and.w	r3, r3, #32
 8025996:	2b20      	cmp	r3, #32
 8025998:	d109      	bne.n	80259ae <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 802599a:	68fb      	ldr	r3, [r7, #12]
 802599c:	015a      	lsls	r2, r3, #5
 802599e:	693b      	ldr	r3, [r7, #16]
 80259a0:	4413      	add	r3, r2
 80259a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259a6:	461a      	mov	r2, r3
 80259a8:	2320      	movs	r3, #32
 80259aa:	6093      	str	r3, [r2, #8]
 80259ac:	e072      	b.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80259ae:	68fb      	ldr	r3, [r7, #12]
 80259b0:	015a      	lsls	r2, r3, #5
 80259b2:	693b      	ldr	r3, [r7, #16]
 80259b4:	4413      	add	r3, r2
 80259b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259ba:	689b      	ldr	r3, [r3, #8]
 80259bc:	f003 0308 	and.w	r3, r3, #8
 80259c0:	2b08      	cmp	r3, #8
 80259c2:	d11a      	bne.n	80259fa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80259c4:	68fb      	ldr	r3, [r7, #12]
 80259c6:	015a      	lsls	r2, r3, #5
 80259c8:	693b      	ldr	r3, [r7, #16]
 80259ca:	4413      	add	r3, r2
 80259cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259d0:	461a      	mov	r2, r3
 80259d2:	2308      	movs	r3, #8
 80259d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80259d6:	687a      	ldr	r2, [r7, #4]
 80259d8:	68fb      	ldr	r3, [r7, #12]
 80259da:	212c      	movs	r1, #44	; 0x2c
 80259dc:	fb01 f303 	mul.w	r3, r1, r3
 80259e0:	4413      	add	r3, r2
 80259e2:	3361      	adds	r3, #97	; 0x61
 80259e4:	2205      	movs	r2, #5
 80259e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259e8:	687b      	ldr	r3, [r7, #4]
 80259ea:	681b      	ldr	r3, [r3, #0]
 80259ec:	68fa      	ldr	r2, [r7, #12]
 80259ee:	b2d2      	uxtb	r2, r2
 80259f0:	4611      	mov	r1, r2
 80259f2:	4618      	mov	r0, r3
 80259f4:	f005 fe67 	bl	802b6c6 <USB_HC_Halt>
 80259f8:	e04c      	b.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80259fa:	68fb      	ldr	r3, [r7, #12]
 80259fc:	015a      	lsls	r2, r3, #5
 80259fe:	693b      	ldr	r3, [r7, #16]
 8025a00:	4413      	add	r3, r2
 8025a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a06:	689b      	ldr	r3, [r3, #8]
 8025a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025a10:	d11b      	bne.n	8025a4a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025a12:	68fb      	ldr	r3, [r7, #12]
 8025a14:	015a      	lsls	r2, r3, #5
 8025a16:	693b      	ldr	r3, [r7, #16]
 8025a18:	4413      	add	r3, r2
 8025a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a1e:	461a      	mov	r2, r3
 8025a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025a24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025a26:	687a      	ldr	r2, [r7, #4]
 8025a28:	68fb      	ldr	r3, [r7, #12]
 8025a2a:	212c      	movs	r1, #44	; 0x2c
 8025a2c:	fb01 f303 	mul.w	r3, r1, r3
 8025a30:	4413      	add	r3, r2
 8025a32:	3361      	adds	r3, #97	; 0x61
 8025a34:	2208      	movs	r2, #8
 8025a36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a38:	687b      	ldr	r3, [r7, #4]
 8025a3a:	681b      	ldr	r3, [r3, #0]
 8025a3c:	68fa      	ldr	r2, [r7, #12]
 8025a3e:	b2d2      	uxtb	r2, r2
 8025a40:	4611      	mov	r1, r2
 8025a42:	4618      	mov	r0, r3
 8025a44:	f005 fe3f 	bl	802b6c6 <USB_HC_Halt>
 8025a48:	e024      	b.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025a4a:	68fb      	ldr	r3, [r7, #12]
 8025a4c:	015a      	lsls	r2, r3, #5
 8025a4e:	693b      	ldr	r3, [r7, #16]
 8025a50:	4413      	add	r3, r2
 8025a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a56:	689b      	ldr	r3, [r3, #8]
 8025a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025a5c:	2b80      	cmp	r3, #128	; 0x80
 8025a5e:	d119      	bne.n	8025a94 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025a60:	68fb      	ldr	r3, [r7, #12]
 8025a62:	015a      	lsls	r2, r3, #5
 8025a64:	693b      	ldr	r3, [r7, #16]
 8025a66:	4413      	add	r3, r2
 8025a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a6c:	461a      	mov	r2, r3
 8025a6e:	2380      	movs	r3, #128	; 0x80
 8025a70:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025a72:	687a      	ldr	r2, [r7, #4]
 8025a74:	68fb      	ldr	r3, [r7, #12]
 8025a76:	212c      	movs	r1, #44	; 0x2c
 8025a78:	fb01 f303 	mul.w	r3, r1, r3
 8025a7c:	4413      	add	r3, r2
 8025a7e:	3361      	adds	r3, #97	; 0x61
 8025a80:	2206      	movs	r2, #6
 8025a82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	681b      	ldr	r3, [r3, #0]
 8025a88:	68fa      	ldr	r2, [r7, #12]
 8025a8a:	b2d2      	uxtb	r2, r2
 8025a8c:	4611      	mov	r1, r2
 8025a8e:	4618      	mov	r0, r3
 8025a90:	f005 fe19 	bl	802b6c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025a94:	68fb      	ldr	r3, [r7, #12]
 8025a96:	015a      	lsls	r2, r3, #5
 8025a98:	693b      	ldr	r3, [r7, #16]
 8025a9a:	4413      	add	r3, r2
 8025a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025aa0:	689b      	ldr	r3, [r3, #8]
 8025aa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025aaa:	d112      	bne.n	8025ad2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025aac:	687b      	ldr	r3, [r7, #4]
 8025aae:	681b      	ldr	r3, [r3, #0]
 8025ab0:	68fa      	ldr	r2, [r7, #12]
 8025ab2:	b2d2      	uxtb	r2, r2
 8025ab4:	4611      	mov	r1, r2
 8025ab6:	4618      	mov	r0, r3
 8025ab8:	f005 fe05 	bl	802b6c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025abc:	68fb      	ldr	r3, [r7, #12]
 8025abe:	015a      	lsls	r2, r3, #5
 8025ac0:	693b      	ldr	r3, [r7, #16]
 8025ac2:	4413      	add	r3, r2
 8025ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ac8:	461a      	mov	r2, r3
 8025aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025ace:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025ad0:	e24e      	b.n	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025ad2:	68fb      	ldr	r3, [r7, #12]
 8025ad4:	015a      	lsls	r2, r3, #5
 8025ad6:	693b      	ldr	r3, [r7, #16]
 8025ad8:	4413      	add	r3, r2
 8025ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ade:	689b      	ldr	r3, [r3, #8]
 8025ae0:	f003 0301 	and.w	r3, r3, #1
 8025ae4:	2b01      	cmp	r3, #1
 8025ae6:	f040 80df 	bne.w	8025ca8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025aea:	687b      	ldr	r3, [r7, #4]
 8025aec:	691b      	ldr	r3, [r3, #16]
 8025aee:	2b00      	cmp	r3, #0
 8025af0:	d019      	beq.n	8025b26 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025af2:	687a      	ldr	r2, [r7, #4]
 8025af4:	68fb      	ldr	r3, [r7, #12]
 8025af6:	212c      	movs	r1, #44	; 0x2c
 8025af8:	fb01 f303 	mul.w	r3, r1, r3
 8025afc:	4413      	add	r3, r2
 8025afe:	3348      	adds	r3, #72	; 0x48
 8025b00:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025b02:	68fb      	ldr	r3, [r7, #12]
 8025b04:	0159      	lsls	r1, r3, #5
 8025b06:	693b      	ldr	r3, [r7, #16]
 8025b08:	440b      	add	r3, r1
 8025b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b0e:	691b      	ldr	r3, [r3, #16]
 8025b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025b14:	1ad2      	subs	r2, r2, r3
 8025b16:	6879      	ldr	r1, [r7, #4]
 8025b18:	68fb      	ldr	r3, [r7, #12]
 8025b1a:	202c      	movs	r0, #44	; 0x2c
 8025b1c:	fb00 f303 	mul.w	r3, r0, r3
 8025b20:	440b      	add	r3, r1
 8025b22:	3350      	adds	r3, #80	; 0x50
 8025b24:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025b26:	687a      	ldr	r2, [r7, #4]
 8025b28:	68fb      	ldr	r3, [r7, #12]
 8025b2a:	212c      	movs	r1, #44	; 0x2c
 8025b2c:	fb01 f303 	mul.w	r3, r1, r3
 8025b30:	4413      	add	r3, r2
 8025b32:	3361      	adds	r3, #97	; 0x61
 8025b34:	2201      	movs	r2, #1
 8025b36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025b38:	687a      	ldr	r2, [r7, #4]
 8025b3a:	68fb      	ldr	r3, [r7, #12]
 8025b3c:	212c      	movs	r1, #44	; 0x2c
 8025b3e:	fb01 f303 	mul.w	r3, r1, r3
 8025b42:	4413      	add	r3, r2
 8025b44:	335c      	adds	r3, #92	; 0x5c
 8025b46:	2200      	movs	r2, #0
 8025b48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025b4a:	68fb      	ldr	r3, [r7, #12]
 8025b4c:	015a      	lsls	r2, r3, #5
 8025b4e:	693b      	ldr	r3, [r7, #16]
 8025b50:	4413      	add	r3, r2
 8025b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b56:	461a      	mov	r2, r3
 8025b58:	2301      	movs	r3, #1
 8025b5a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b5c:	687a      	ldr	r2, [r7, #4]
 8025b5e:	68fb      	ldr	r3, [r7, #12]
 8025b60:	212c      	movs	r1, #44	; 0x2c
 8025b62:	fb01 f303 	mul.w	r3, r1, r3
 8025b66:	4413      	add	r3, r2
 8025b68:	333f      	adds	r3, #63	; 0x3f
 8025b6a:	781b      	ldrb	r3, [r3, #0]
 8025b6c:	2b00      	cmp	r3, #0
 8025b6e:	d009      	beq.n	8025b84 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025b70:	687a      	ldr	r2, [r7, #4]
 8025b72:	68fb      	ldr	r3, [r7, #12]
 8025b74:	212c      	movs	r1, #44	; 0x2c
 8025b76:	fb01 f303 	mul.w	r3, r1, r3
 8025b7a:	4413      	add	r3, r2
 8025b7c:	333f      	adds	r3, #63	; 0x3f
 8025b7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b80:	2b02      	cmp	r3, #2
 8025b82:	d111      	bne.n	8025ba8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b84:	687b      	ldr	r3, [r7, #4]
 8025b86:	681b      	ldr	r3, [r3, #0]
 8025b88:	68fa      	ldr	r2, [r7, #12]
 8025b8a:	b2d2      	uxtb	r2, r2
 8025b8c:	4611      	mov	r1, r2
 8025b8e:	4618      	mov	r0, r3
 8025b90:	f005 fd99 	bl	802b6c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025b94:	68fb      	ldr	r3, [r7, #12]
 8025b96:	015a      	lsls	r2, r3, #5
 8025b98:	693b      	ldr	r3, [r7, #16]
 8025b9a:	4413      	add	r3, r2
 8025b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ba0:	461a      	mov	r2, r3
 8025ba2:	2310      	movs	r3, #16
 8025ba4:	6093      	str	r3, [r2, #8]
 8025ba6:	e03a      	b.n	8025c1e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025ba8:	687a      	ldr	r2, [r7, #4]
 8025baa:	68fb      	ldr	r3, [r7, #12]
 8025bac:	212c      	movs	r1, #44	; 0x2c
 8025bae:	fb01 f303 	mul.w	r3, r1, r3
 8025bb2:	4413      	add	r3, r2
 8025bb4:	333f      	adds	r3, #63	; 0x3f
 8025bb6:	781b      	ldrb	r3, [r3, #0]
 8025bb8:	2b03      	cmp	r3, #3
 8025bba:	d009      	beq.n	8025bd0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025bbc:	687a      	ldr	r2, [r7, #4]
 8025bbe:	68fb      	ldr	r3, [r7, #12]
 8025bc0:	212c      	movs	r1, #44	; 0x2c
 8025bc2:	fb01 f303 	mul.w	r3, r1, r3
 8025bc6:	4413      	add	r3, r2
 8025bc8:	333f      	adds	r3, #63	; 0x3f
 8025bca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025bcc:	2b01      	cmp	r3, #1
 8025bce:	d126      	bne.n	8025c1e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025bd0:	68fb      	ldr	r3, [r7, #12]
 8025bd2:	015a      	lsls	r2, r3, #5
 8025bd4:	693b      	ldr	r3, [r7, #16]
 8025bd6:	4413      	add	r3, r2
 8025bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bdc:	681b      	ldr	r3, [r3, #0]
 8025bde:	68fa      	ldr	r2, [r7, #12]
 8025be0:	0151      	lsls	r1, r2, #5
 8025be2:	693a      	ldr	r2, [r7, #16]
 8025be4:	440a      	add	r2, r1
 8025be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025bee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025bf0:	687a      	ldr	r2, [r7, #4]
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	212c      	movs	r1, #44	; 0x2c
 8025bf6:	fb01 f303 	mul.w	r3, r1, r3
 8025bfa:	4413      	add	r3, r2
 8025bfc:	3360      	adds	r3, #96	; 0x60
 8025bfe:	2201      	movs	r2, #1
 8025c00:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025c02:	68fb      	ldr	r3, [r7, #12]
 8025c04:	b2d9      	uxtb	r1, r3
 8025c06:	687a      	ldr	r2, [r7, #4]
 8025c08:	68fb      	ldr	r3, [r7, #12]
 8025c0a:	202c      	movs	r0, #44	; 0x2c
 8025c0c:	fb00 f303 	mul.w	r3, r0, r3
 8025c10:	4413      	add	r3, r2
 8025c12:	3360      	adds	r3, #96	; 0x60
 8025c14:	781b      	ldrb	r3, [r3, #0]
 8025c16:	461a      	mov	r2, r3
 8025c18:	6878      	ldr	r0, [r7, #4]
 8025c1a:	f007 fff3 	bl	802dc04 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025c1e:	687b      	ldr	r3, [r7, #4]
 8025c20:	691b      	ldr	r3, [r3, #16]
 8025c22:	2b01      	cmp	r3, #1
 8025c24:	d12b      	bne.n	8025c7e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025c26:	687a      	ldr	r2, [r7, #4]
 8025c28:	68fb      	ldr	r3, [r7, #12]
 8025c2a:	212c      	movs	r1, #44	; 0x2c
 8025c2c:	fb01 f303 	mul.w	r3, r1, r3
 8025c30:	4413      	add	r3, r2
 8025c32:	3348      	adds	r3, #72	; 0x48
 8025c34:	681b      	ldr	r3, [r3, #0]
 8025c36:	6879      	ldr	r1, [r7, #4]
 8025c38:	68fa      	ldr	r2, [r7, #12]
 8025c3a:	202c      	movs	r0, #44	; 0x2c
 8025c3c:	fb00 f202 	mul.w	r2, r0, r2
 8025c40:	440a      	add	r2, r1
 8025c42:	3240      	adds	r2, #64	; 0x40
 8025c44:	8812      	ldrh	r2, [r2, #0]
 8025c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8025c4a:	f003 0301 	and.w	r3, r3, #1
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	f000 818e 	beq.w	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c54:	687a      	ldr	r2, [r7, #4]
 8025c56:	68fb      	ldr	r3, [r7, #12]
 8025c58:	212c      	movs	r1, #44	; 0x2c
 8025c5a:	fb01 f303 	mul.w	r3, r1, r3
 8025c5e:	4413      	add	r3, r2
 8025c60:	3354      	adds	r3, #84	; 0x54
 8025c62:	781b      	ldrb	r3, [r3, #0]
 8025c64:	f083 0301 	eor.w	r3, r3, #1
 8025c68:	b2d8      	uxtb	r0, r3
 8025c6a:	687a      	ldr	r2, [r7, #4]
 8025c6c:	68fb      	ldr	r3, [r7, #12]
 8025c6e:	212c      	movs	r1, #44	; 0x2c
 8025c70:	fb01 f303 	mul.w	r3, r1, r3
 8025c74:	4413      	add	r3, r2
 8025c76:	3354      	adds	r3, #84	; 0x54
 8025c78:	4602      	mov	r2, r0
 8025c7a:	701a      	strb	r2, [r3, #0]
}
 8025c7c:	e178      	b.n	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c7e:	687a      	ldr	r2, [r7, #4]
 8025c80:	68fb      	ldr	r3, [r7, #12]
 8025c82:	212c      	movs	r1, #44	; 0x2c
 8025c84:	fb01 f303 	mul.w	r3, r1, r3
 8025c88:	4413      	add	r3, r2
 8025c8a:	3354      	adds	r3, #84	; 0x54
 8025c8c:	781b      	ldrb	r3, [r3, #0]
 8025c8e:	f083 0301 	eor.w	r3, r3, #1
 8025c92:	b2d8      	uxtb	r0, r3
 8025c94:	687a      	ldr	r2, [r7, #4]
 8025c96:	68fb      	ldr	r3, [r7, #12]
 8025c98:	212c      	movs	r1, #44	; 0x2c
 8025c9a:	fb01 f303 	mul.w	r3, r1, r3
 8025c9e:	4413      	add	r3, r2
 8025ca0:	3354      	adds	r3, #84	; 0x54
 8025ca2:	4602      	mov	r2, r0
 8025ca4:	701a      	strb	r2, [r3, #0]
}
 8025ca6:	e163      	b.n	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025ca8:	68fb      	ldr	r3, [r7, #12]
 8025caa:	015a      	lsls	r2, r3, #5
 8025cac:	693b      	ldr	r3, [r7, #16]
 8025cae:	4413      	add	r3, r2
 8025cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cb4:	689b      	ldr	r3, [r3, #8]
 8025cb6:	f003 0302 	and.w	r3, r3, #2
 8025cba:	2b02      	cmp	r3, #2
 8025cbc:	f040 80f6 	bne.w	8025eac <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025cc0:	687a      	ldr	r2, [r7, #4]
 8025cc2:	68fb      	ldr	r3, [r7, #12]
 8025cc4:	212c      	movs	r1, #44	; 0x2c
 8025cc6:	fb01 f303 	mul.w	r3, r1, r3
 8025cca:	4413      	add	r3, r2
 8025ccc:	3361      	adds	r3, #97	; 0x61
 8025cce:	781b      	ldrb	r3, [r3, #0]
 8025cd0:	2b01      	cmp	r3, #1
 8025cd2:	d109      	bne.n	8025ce8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025cd4:	687a      	ldr	r2, [r7, #4]
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	212c      	movs	r1, #44	; 0x2c
 8025cda:	fb01 f303 	mul.w	r3, r1, r3
 8025cde:	4413      	add	r3, r2
 8025ce0:	3360      	adds	r3, #96	; 0x60
 8025ce2:	2201      	movs	r2, #1
 8025ce4:	701a      	strb	r2, [r3, #0]
 8025ce6:	e0c9      	b.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025ce8:	687a      	ldr	r2, [r7, #4]
 8025cea:	68fb      	ldr	r3, [r7, #12]
 8025cec:	212c      	movs	r1, #44	; 0x2c
 8025cee:	fb01 f303 	mul.w	r3, r1, r3
 8025cf2:	4413      	add	r3, r2
 8025cf4:	3361      	adds	r3, #97	; 0x61
 8025cf6:	781b      	ldrb	r3, [r3, #0]
 8025cf8:	2b05      	cmp	r3, #5
 8025cfa:	d109      	bne.n	8025d10 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025cfc:	687a      	ldr	r2, [r7, #4]
 8025cfe:	68fb      	ldr	r3, [r7, #12]
 8025d00:	212c      	movs	r1, #44	; 0x2c
 8025d02:	fb01 f303 	mul.w	r3, r1, r3
 8025d06:	4413      	add	r3, r2
 8025d08:	3360      	adds	r3, #96	; 0x60
 8025d0a:	2205      	movs	r2, #5
 8025d0c:	701a      	strb	r2, [r3, #0]
 8025d0e:	e0b5      	b.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d10:	687a      	ldr	r2, [r7, #4]
 8025d12:	68fb      	ldr	r3, [r7, #12]
 8025d14:	212c      	movs	r1, #44	; 0x2c
 8025d16:	fb01 f303 	mul.w	r3, r1, r3
 8025d1a:	4413      	add	r3, r2
 8025d1c:	3361      	adds	r3, #97	; 0x61
 8025d1e:	781b      	ldrb	r3, [r3, #0]
 8025d20:	2b06      	cmp	r3, #6
 8025d22:	d009      	beq.n	8025d38 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025d24:	687a      	ldr	r2, [r7, #4]
 8025d26:	68fb      	ldr	r3, [r7, #12]
 8025d28:	212c      	movs	r1, #44	; 0x2c
 8025d2a:	fb01 f303 	mul.w	r3, r1, r3
 8025d2e:	4413      	add	r3, r2
 8025d30:	3361      	adds	r3, #97	; 0x61
 8025d32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d34:	2b08      	cmp	r3, #8
 8025d36:	d150      	bne.n	8025dda <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025d38:	687a      	ldr	r2, [r7, #4]
 8025d3a:	68fb      	ldr	r3, [r7, #12]
 8025d3c:	212c      	movs	r1, #44	; 0x2c
 8025d3e:	fb01 f303 	mul.w	r3, r1, r3
 8025d42:	4413      	add	r3, r2
 8025d44:	335c      	adds	r3, #92	; 0x5c
 8025d46:	681b      	ldr	r3, [r3, #0]
 8025d48:	1c5a      	adds	r2, r3, #1
 8025d4a:	6879      	ldr	r1, [r7, #4]
 8025d4c:	68fb      	ldr	r3, [r7, #12]
 8025d4e:	202c      	movs	r0, #44	; 0x2c
 8025d50:	fb00 f303 	mul.w	r3, r0, r3
 8025d54:	440b      	add	r3, r1
 8025d56:	335c      	adds	r3, #92	; 0x5c
 8025d58:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d5a:	687a      	ldr	r2, [r7, #4]
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	212c      	movs	r1, #44	; 0x2c
 8025d60:	fb01 f303 	mul.w	r3, r1, r3
 8025d64:	4413      	add	r3, r2
 8025d66:	335c      	adds	r3, #92	; 0x5c
 8025d68:	681b      	ldr	r3, [r3, #0]
 8025d6a:	2b02      	cmp	r3, #2
 8025d6c:	d912      	bls.n	8025d94 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025d6e:	687a      	ldr	r2, [r7, #4]
 8025d70:	68fb      	ldr	r3, [r7, #12]
 8025d72:	212c      	movs	r1, #44	; 0x2c
 8025d74:	fb01 f303 	mul.w	r3, r1, r3
 8025d78:	4413      	add	r3, r2
 8025d7a:	335c      	adds	r3, #92	; 0x5c
 8025d7c:	2200      	movs	r2, #0
 8025d7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d80:	687a      	ldr	r2, [r7, #4]
 8025d82:	68fb      	ldr	r3, [r7, #12]
 8025d84:	212c      	movs	r1, #44	; 0x2c
 8025d86:	fb01 f303 	mul.w	r3, r1, r3
 8025d8a:	4413      	add	r3, r2
 8025d8c:	3360      	adds	r3, #96	; 0x60
 8025d8e:	2204      	movs	r2, #4
 8025d90:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d92:	e073      	b.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025d94:	687a      	ldr	r2, [r7, #4]
 8025d96:	68fb      	ldr	r3, [r7, #12]
 8025d98:	212c      	movs	r1, #44	; 0x2c
 8025d9a:	fb01 f303 	mul.w	r3, r1, r3
 8025d9e:	4413      	add	r3, r2
 8025da0:	3360      	adds	r3, #96	; 0x60
 8025da2:	2202      	movs	r2, #2
 8025da4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025da6:	68fb      	ldr	r3, [r7, #12]
 8025da8:	015a      	lsls	r2, r3, #5
 8025daa:	693b      	ldr	r3, [r7, #16]
 8025dac:	4413      	add	r3, r2
 8025dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025db2:	681b      	ldr	r3, [r3, #0]
 8025db4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025db6:	68bb      	ldr	r3, [r7, #8]
 8025db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025dbc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025dbe:	68bb      	ldr	r3, [r7, #8]
 8025dc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025dc4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025dc6:	68fb      	ldr	r3, [r7, #12]
 8025dc8:	015a      	lsls	r2, r3, #5
 8025dca:	693b      	ldr	r3, [r7, #16]
 8025dcc:	4413      	add	r3, r2
 8025dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dd2:	461a      	mov	r2, r3
 8025dd4:	68bb      	ldr	r3, [r7, #8]
 8025dd6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025dd8:	e050      	b.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025dda:	687a      	ldr	r2, [r7, #4]
 8025ddc:	68fb      	ldr	r3, [r7, #12]
 8025dde:	212c      	movs	r1, #44	; 0x2c
 8025de0:	fb01 f303 	mul.w	r3, r1, r3
 8025de4:	4413      	add	r3, r2
 8025de6:	3361      	adds	r3, #97	; 0x61
 8025de8:	781b      	ldrb	r3, [r3, #0]
 8025dea:	2b03      	cmp	r3, #3
 8025dec:	d122      	bne.n	8025e34 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025dee:	687a      	ldr	r2, [r7, #4]
 8025df0:	68fb      	ldr	r3, [r7, #12]
 8025df2:	212c      	movs	r1, #44	; 0x2c
 8025df4:	fb01 f303 	mul.w	r3, r1, r3
 8025df8:	4413      	add	r3, r2
 8025dfa:	3360      	adds	r3, #96	; 0x60
 8025dfc:	2202      	movs	r2, #2
 8025dfe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025e00:	68fb      	ldr	r3, [r7, #12]
 8025e02:	015a      	lsls	r2, r3, #5
 8025e04:	693b      	ldr	r3, [r7, #16]
 8025e06:	4413      	add	r3, r2
 8025e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e0c:	681b      	ldr	r3, [r3, #0]
 8025e0e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025e10:	68bb      	ldr	r3, [r7, #8]
 8025e12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025e16:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025e18:	68bb      	ldr	r3, [r7, #8]
 8025e1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025e1e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025e20:	68fb      	ldr	r3, [r7, #12]
 8025e22:	015a      	lsls	r2, r3, #5
 8025e24:	693b      	ldr	r3, [r7, #16]
 8025e26:	4413      	add	r3, r2
 8025e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e2c:	461a      	mov	r2, r3
 8025e2e:	68bb      	ldr	r3, [r7, #8]
 8025e30:	6013      	str	r3, [r2, #0]
 8025e32:	e023      	b.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025e34:	687a      	ldr	r2, [r7, #4]
 8025e36:	68fb      	ldr	r3, [r7, #12]
 8025e38:	212c      	movs	r1, #44	; 0x2c
 8025e3a:	fb01 f303 	mul.w	r3, r1, r3
 8025e3e:	4413      	add	r3, r2
 8025e40:	3361      	adds	r3, #97	; 0x61
 8025e42:	781b      	ldrb	r3, [r3, #0]
 8025e44:	2b07      	cmp	r3, #7
 8025e46:	d119      	bne.n	8025e7c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025e48:	687a      	ldr	r2, [r7, #4]
 8025e4a:	68fb      	ldr	r3, [r7, #12]
 8025e4c:	212c      	movs	r1, #44	; 0x2c
 8025e4e:	fb01 f303 	mul.w	r3, r1, r3
 8025e52:	4413      	add	r3, r2
 8025e54:	335c      	adds	r3, #92	; 0x5c
 8025e56:	681b      	ldr	r3, [r3, #0]
 8025e58:	1c5a      	adds	r2, r3, #1
 8025e5a:	6879      	ldr	r1, [r7, #4]
 8025e5c:	68fb      	ldr	r3, [r7, #12]
 8025e5e:	202c      	movs	r0, #44	; 0x2c
 8025e60:	fb00 f303 	mul.w	r3, r0, r3
 8025e64:	440b      	add	r3, r1
 8025e66:	335c      	adds	r3, #92	; 0x5c
 8025e68:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025e6a:	687a      	ldr	r2, [r7, #4]
 8025e6c:	68fb      	ldr	r3, [r7, #12]
 8025e6e:	212c      	movs	r1, #44	; 0x2c
 8025e70:	fb01 f303 	mul.w	r3, r1, r3
 8025e74:	4413      	add	r3, r2
 8025e76:	3360      	adds	r3, #96	; 0x60
 8025e78:	2204      	movs	r2, #4
 8025e7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025e7c:	68fb      	ldr	r3, [r7, #12]
 8025e7e:	015a      	lsls	r2, r3, #5
 8025e80:	693b      	ldr	r3, [r7, #16]
 8025e82:	4413      	add	r3, r2
 8025e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e88:	461a      	mov	r2, r3
 8025e8a:	2302      	movs	r3, #2
 8025e8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	b2d9      	uxtb	r1, r3
 8025e92:	687a      	ldr	r2, [r7, #4]
 8025e94:	68fb      	ldr	r3, [r7, #12]
 8025e96:	202c      	movs	r0, #44	; 0x2c
 8025e98:	fb00 f303 	mul.w	r3, r0, r3
 8025e9c:	4413      	add	r3, r2
 8025e9e:	3360      	adds	r3, #96	; 0x60
 8025ea0:	781b      	ldrb	r3, [r3, #0]
 8025ea2:	461a      	mov	r2, r3
 8025ea4:	6878      	ldr	r0, [r7, #4]
 8025ea6:	f007 fead 	bl	802dc04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025eaa:	e061      	b.n	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025eac:	68fb      	ldr	r3, [r7, #12]
 8025eae:	015a      	lsls	r2, r3, #5
 8025eb0:	693b      	ldr	r3, [r7, #16]
 8025eb2:	4413      	add	r3, r2
 8025eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025eb8:	689b      	ldr	r3, [r3, #8]
 8025eba:	f003 0310 	and.w	r3, r3, #16
 8025ebe:	2b10      	cmp	r3, #16
 8025ec0:	d156      	bne.n	8025f70 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025ec2:	687a      	ldr	r2, [r7, #4]
 8025ec4:	68fb      	ldr	r3, [r7, #12]
 8025ec6:	212c      	movs	r1, #44	; 0x2c
 8025ec8:	fb01 f303 	mul.w	r3, r1, r3
 8025ecc:	4413      	add	r3, r2
 8025ece:	333f      	adds	r3, #63	; 0x3f
 8025ed0:	781b      	ldrb	r3, [r3, #0]
 8025ed2:	2b03      	cmp	r3, #3
 8025ed4:	d111      	bne.n	8025efa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025ed6:	687a      	ldr	r2, [r7, #4]
 8025ed8:	68fb      	ldr	r3, [r7, #12]
 8025eda:	212c      	movs	r1, #44	; 0x2c
 8025edc:	fb01 f303 	mul.w	r3, r1, r3
 8025ee0:	4413      	add	r3, r2
 8025ee2:	335c      	adds	r3, #92	; 0x5c
 8025ee4:	2200      	movs	r2, #0
 8025ee6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ee8:	687b      	ldr	r3, [r7, #4]
 8025eea:	681b      	ldr	r3, [r3, #0]
 8025eec:	68fa      	ldr	r2, [r7, #12]
 8025eee:	b2d2      	uxtb	r2, r2
 8025ef0:	4611      	mov	r1, r2
 8025ef2:	4618      	mov	r0, r3
 8025ef4:	f005 fbe7 	bl	802b6c6 <USB_HC_Halt>
 8025ef8:	e031      	b.n	8025f5e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025efa:	687a      	ldr	r2, [r7, #4]
 8025efc:	68fb      	ldr	r3, [r7, #12]
 8025efe:	212c      	movs	r1, #44	; 0x2c
 8025f00:	fb01 f303 	mul.w	r3, r1, r3
 8025f04:	4413      	add	r3, r2
 8025f06:	333f      	adds	r3, #63	; 0x3f
 8025f08:	781b      	ldrb	r3, [r3, #0]
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	d009      	beq.n	8025f22 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025f0e:	687a      	ldr	r2, [r7, #4]
 8025f10:	68fb      	ldr	r3, [r7, #12]
 8025f12:	212c      	movs	r1, #44	; 0x2c
 8025f14:	fb01 f303 	mul.w	r3, r1, r3
 8025f18:	4413      	add	r3, r2
 8025f1a:	333f      	adds	r3, #63	; 0x3f
 8025f1c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025f1e:	2b02      	cmp	r3, #2
 8025f20:	d11d      	bne.n	8025f5e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025f22:	687a      	ldr	r2, [r7, #4]
 8025f24:	68fb      	ldr	r3, [r7, #12]
 8025f26:	212c      	movs	r1, #44	; 0x2c
 8025f28:	fb01 f303 	mul.w	r3, r1, r3
 8025f2c:	4413      	add	r3, r2
 8025f2e:	335c      	adds	r3, #92	; 0x5c
 8025f30:	2200      	movs	r2, #0
 8025f32:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025f34:	687b      	ldr	r3, [r7, #4]
 8025f36:	691b      	ldr	r3, [r3, #16]
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	d110      	bne.n	8025f5e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025f3c:	687a      	ldr	r2, [r7, #4]
 8025f3e:	68fb      	ldr	r3, [r7, #12]
 8025f40:	212c      	movs	r1, #44	; 0x2c
 8025f42:	fb01 f303 	mul.w	r3, r1, r3
 8025f46:	4413      	add	r3, r2
 8025f48:	3361      	adds	r3, #97	; 0x61
 8025f4a:	2203      	movs	r2, #3
 8025f4c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	681b      	ldr	r3, [r3, #0]
 8025f52:	68fa      	ldr	r2, [r7, #12]
 8025f54:	b2d2      	uxtb	r2, r2
 8025f56:	4611      	mov	r1, r2
 8025f58:	4618      	mov	r0, r3
 8025f5a:	f005 fbb4 	bl	802b6c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025f5e:	68fb      	ldr	r3, [r7, #12]
 8025f60:	015a      	lsls	r2, r3, #5
 8025f62:	693b      	ldr	r3, [r7, #16]
 8025f64:	4413      	add	r3, r2
 8025f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f6a:	461a      	mov	r2, r3
 8025f6c:	2310      	movs	r3, #16
 8025f6e:	6093      	str	r3, [r2, #8]
}
 8025f70:	bf00      	nop
 8025f72:	3718      	adds	r7, #24
 8025f74:	46bd      	mov	sp, r7
 8025f76:	bd80      	pop	{r7, pc}

08025f78 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025f78:	b580      	push	{r7, lr}
 8025f7a:	b088      	sub	sp, #32
 8025f7c:	af00      	add	r7, sp, #0
 8025f7e:	6078      	str	r0, [r7, #4]
 8025f80:	460b      	mov	r3, r1
 8025f82:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025f84:	687b      	ldr	r3, [r7, #4]
 8025f86:	681b      	ldr	r3, [r3, #0]
 8025f88:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025f8a:	69fb      	ldr	r3, [r7, #28]
 8025f8c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025f8e:	78fb      	ldrb	r3, [r7, #3]
 8025f90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025f92:	697b      	ldr	r3, [r7, #20]
 8025f94:	015a      	lsls	r2, r3, #5
 8025f96:	69bb      	ldr	r3, [r7, #24]
 8025f98:	4413      	add	r3, r2
 8025f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f9e:	689b      	ldr	r3, [r3, #8]
 8025fa0:	f003 0304 	and.w	r3, r3, #4
 8025fa4:	2b04      	cmp	r3, #4
 8025fa6:	d11a      	bne.n	8025fde <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025fa8:	697b      	ldr	r3, [r7, #20]
 8025faa:	015a      	lsls	r2, r3, #5
 8025fac:	69bb      	ldr	r3, [r7, #24]
 8025fae:	4413      	add	r3, r2
 8025fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fb4:	461a      	mov	r2, r3
 8025fb6:	2304      	movs	r3, #4
 8025fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025fba:	687a      	ldr	r2, [r7, #4]
 8025fbc:	697b      	ldr	r3, [r7, #20]
 8025fbe:	212c      	movs	r1, #44	; 0x2c
 8025fc0:	fb01 f303 	mul.w	r3, r1, r3
 8025fc4:	4413      	add	r3, r2
 8025fc6:	3361      	adds	r3, #97	; 0x61
 8025fc8:	2206      	movs	r2, #6
 8025fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025fcc:	687b      	ldr	r3, [r7, #4]
 8025fce:	681b      	ldr	r3, [r3, #0]
 8025fd0:	697a      	ldr	r2, [r7, #20]
 8025fd2:	b2d2      	uxtb	r2, r2
 8025fd4:	4611      	mov	r1, r2
 8025fd6:	4618      	mov	r0, r3
 8025fd8:	f005 fb75 	bl	802b6c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8025fdc:	e331      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025fde:	697b      	ldr	r3, [r7, #20]
 8025fe0:	015a      	lsls	r2, r3, #5
 8025fe2:	69bb      	ldr	r3, [r7, #24]
 8025fe4:	4413      	add	r3, r2
 8025fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fea:	689b      	ldr	r3, [r3, #8]
 8025fec:	f003 0320 	and.w	r3, r3, #32
 8025ff0:	2b20      	cmp	r3, #32
 8025ff2:	d12e      	bne.n	8026052 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025ff4:	697b      	ldr	r3, [r7, #20]
 8025ff6:	015a      	lsls	r2, r3, #5
 8025ff8:	69bb      	ldr	r3, [r7, #24]
 8025ffa:	4413      	add	r3, r2
 8025ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026000:	461a      	mov	r2, r3
 8026002:	2320      	movs	r3, #32
 8026004:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8026006:	687a      	ldr	r2, [r7, #4]
 8026008:	697b      	ldr	r3, [r7, #20]
 802600a:	212c      	movs	r1, #44	; 0x2c
 802600c:	fb01 f303 	mul.w	r3, r1, r3
 8026010:	4413      	add	r3, r2
 8026012:	333d      	adds	r3, #61	; 0x3d
 8026014:	781b      	ldrb	r3, [r3, #0]
 8026016:	2b01      	cmp	r3, #1
 8026018:	f040 8313 	bne.w	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 802601c:	687a      	ldr	r2, [r7, #4]
 802601e:	697b      	ldr	r3, [r7, #20]
 8026020:	212c      	movs	r1, #44	; 0x2c
 8026022:	fb01 f303 	mul.w	r3, r1, r3
 8026026:	4413      	add	r3, r2
 8026028:	333d      	adds	r3, #61	; 0x3d
 802602a:	2200      	movs	r2, #0
 802602c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802602e:	687a      	ldr	r2, [r7, #4]
 8026030:	697b      	ldr	r3, [r7, #20]
 8026032:	212c      	movs	r1, #44	; 0x2c
 8026034:	fb01 f303 	mul.w	r3, r1, r3
 8026038:	4413      	add	r3, r2
 802603a:	3360      	adds	r3, #96	; 0x60
 802603c:	2202      	movs	r2, #2
 802603e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026040:	687b      	ldr	r3, [r7, #4]
 8026042:	681b      	ldr	r3, [r3, #0]
 8026044:	697a      	ldr	r2, [r7, #20]
 8026046:	b2d2      	uxtb	r2, r2
 8026048:	4611      	mov	r1, r2
 802604a:	4618      	mov	r0, r3
 802604c:	f005 fb3b 	bl	802b6c6 <USB_HC_Halt>
}
 8026050:	e2f7      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8026052:	697b      	ldr	r3, [r7, #20]
 8026054:	015a      	lsls	r2, r3, #5
 8026056:	69bb      	ldr	r3, [r7, #24]
 8026058:	4413      	add	r3, r2
 802605a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802605e:	689b      	ldr	r3, [r3, #8]
 8026060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026068:	d112      	bne.n	8026090 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 802606a:	697b      	ldr	r3, [r7, #20]
 802606c:	015a      	lsls	r2, r3, #5
 802606e:	69bb      	ldr	r3, [r7, #24]
 8026070:	4413      	add	r3, r2
 8026072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026076:	461a      	mov	r2, r3
 8026078:	f44f 7300 	mov.w	r3, #512	; 0x200
 802607c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802607e:	687b      	ldr	r3, [r7, #4]
 8026080:	681b      	ldr	r3, [r3, #0]
 8026082:	697a      	ldr	r2, [r7, #20]
 8026084:	b2d2      	uxtb	r2, r2
 8026086:	4611      	mov	r1, r2
 8026088:	4618      	mov	r0, r3
 802608a:	f005 fb1c 	bl	802b6c6 <USB_HC_Halt>
}
 802608e:	e2d8      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8026090:	697b      	ldr	r3, [r7, #20]
 8026092:	015a      	lsls	r2, r3, #5
 8026094:	69bb      	ldr	r3, [r7, #24]
 8026096:	4413      	add	r3, r2
 8026098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802609c:	689b      	ldr	r3, [r3, #8]
 802609e:	f003 0301 	and.w	r3, r3, #1
 80260a2:	2b01      	cmp	r3, #1
 80260a4:	d140      	bne.n	8026128 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80260a6:	687a      	ldr	r2, [r7, #4]
 80260a8:	697b      	ldr	r3, [r7, #20]
 80260aa:	212c      	movs	r1, #44	; 0x2c
 80260ac:	fb01 f303 	mul.w	r3, r1, r3
 80260b0:	4413      	add	r3, r2
 80260b2:	335c      	adds	r3, #92	; 0x5c
 80260b4:	2200      	movs	r2, #0
 80260b6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80260b8:	697b      	ldr	r3, [r7, #20]
 80260ba:	015a      	lsls	r2, r3, #5
 80260bc:	69bb      	ldr	r3, [r7, #24]
 80260be:	4413      	add	r3, r2
 80260c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260c4:	689b      	ldr	r3, [r3, #8]
 80260c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80260ca:	2b40      	cmp	r3, #64	; 0x40
 80260cc:	d111      	bne.n	80260f2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80260ce:	687a      	ldr	r2, [r7, #4]
 80260d0:	697b      	ldr	r3, [r7, #20]
 80260d2:	212c      	movs	r1, #44	; 0x2c
 80260d4:	fb01 f303 	mul.w	r3, r1, r3
 80260d8:	4413      	add	r3, r2
 80260da:	333d      	adds	r3, #61	; 0x3d
 80260dc:	2201      	movs	r2, #1
 80260de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80260e0:	697b      	ldr	r3, [r7, #20]
 80260e2:	015a      	lsls	r2, r3, #5
 80260e4:	69bb      	ldr	r3, [r7, #24]
 80260e6:	4413      	add	r3, r2
 80260e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260ec:	461a      	mov	r2, r3
 80260ee:	2340      	movs	r3, #64	; 0x40
 80260f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80260f2:	697b      	ldr	r3, [r7, #20]
 80260f4:	015a      	lsls	r2, r3, #5
 80260f6:	69bb      	ldr	r3, [r7, #24]
 80260f8:	4413      	add	r3, r2
 80260fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260fe:	461a      	mov	r2, r3
 8026100:	2301      	movs	r3, #1
 8026102:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8026104:	687a      	ldr	r2, [r7, #4]
 8026106:	697b      	ldr	r3, [r7, #20]
 8026108:	212c      	movs	r1, #44	; 0x2c
 802610a:	fb01 f303 	mul.w	r3, r1, r3
 802610e:	4413      	add	r3, r2
 8026110:	3361      	adds	r3, #97	; 0x61
 8026112:	2201      	movs	r2, #1
 8026114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	697a      	ldr	r2, [r7, #20]
 802611c:	b2d2      	uxtb	r2, r2
 802611e:	4611      	mov	r1, r2
 8026120:	4618      	mov	r0, r3
 8026122:	f005 fad0 	bl	802b6c6 <USB_HC_Halt>
}
 8026126:	e28c      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026128:	697b      	ldr	r3, [r7, #20]
 802612a:	015a      	lsls	r2, r3, #5
 802612c:	69bb      	ldr	r3, [r7, #24]
 802612e:	4413      	add	r3, r2
 8026130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026134:	689b      	ldr	r3, [r3, #8]
 8026136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802613a:	2b40      	cmp	r3, #64	; 0x40
 802613c:	d12c      	bne.n	8026198 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802613e:	687a      	ldr	r2, [r7, #4]
 8026140:	697b      	ldr	r3, [r7, #20]
 8026142:	212c      	movs	r1, #44	; 0x2c
 8026144:	fb01 f303 	mul.w	r3, r1, r3
 8026148:	4413      	add	r3, r2
 802614a:	3361      	adds	r3, #97	; 0x61
 802614c:	2204      	movs	r2, #4
 802614e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8026150:	687a      	ldr	r2, [r7, #4]
 8026152:	697b      	ldr	r3, [r7, #20]
 8026154:	212c      	movs	r1, #44	; 0x2c
 8026156:	fb01 f303 	mul.w	r3, r1, r3
 802615a:	4413      	add	r3, r2
 802615c:	333d      	adds	r3, #61	; 0x3d
 802615e:	2201      	movs	r2, #1
 8026160:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026162:	687a      	ldr	r2, [r7, #4]
 8026164:	697b      	ldr	r3, [r7, #20]
 8026166:	212c      	movs	r1, #44	; 0x2c
 8026168:	fb01 f303 	mul.w	r3, r1, r3
 802616c:	4413      	add	r3, r2
 802616e:	335c      	adds	r3, #92	; 0x5c
 8026170:	2200      	movs	r2, #0
 8026172:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	681b      	ldr	r3, [r3, #0]
 8026178:	697a      	ldr	r2, [r7, #20]
 802617a:	b2d2      	uxtb	r2, r2
 802617c:	4611      	mov	r1, r2
 802617e:	4618      	mov	r0, r3
 8026180:	f005 faa1 	bl	802b6c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8026184:	697b      	ldr	r3, [r7, #20]
 8026186:	015a      	lsls	r2, r3, #5
 8026188:	69bb      	ldr	r3, [r7, #24]
 802618a:	4413      	add	r3, r2
 802618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026190:	461a      	mov	r2, r3
 8026192:	2340      	movs	r3, #64	; 0x40
 8026194:	6093      	str	r3, [r2, #8]
}
 8026196:	e254      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8026198:	697b      	ldr	r3, [r7, #20]
 802619a:	015a      	lsls	r2, r3, #5
 802619c:	69bb      	ldr	r3, [r7, #24]
 802619e:	4413      	add	r3, r2
 80261a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261a4:	689b      	ldr	r3, [r3, #8]
 80261a6:	f003 0308 	and.w	r3, r3, #8
 80261aa:	2b08      	cmp	r3, #8
 80261ac:	d11a      	bne.n	80261e4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80261ae:	697b      	ldr	r3, [r7, #20]
 80261b0:	015a      	lsls	r2, r3, #5
 80261b2:	69bb      	ldr	r3, [r7, #24]
 80261b4:	4413      	add	r3, r2
 80261b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261ba:	461a      	mov	r2, r3
 80261bc:	2308      	movs	r3, #8
 80261be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80261c0:	687a      	ldr	r2, [r7, #4]
 80261c2:	697b      	ldr	r3, [r7, #20]
 80261c4:	212c      	movs	r1, #44	; 0x2c
 80261c6:	fb01 f303 	mul.w	r3, r1, r3
 80261ca:	4413      	add	r3, r2
 80261cc:	3361      	adds	r3, #97	; 0x61
 80261ce:	2205      	movs	r2, #5
 80261d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261d2:	687b      	ldr	r3, [r7, #4]
 80261d4:	681b      	ldr	r3, [r3, #0]
 80261d6:	697a      	ldr	r2, [r7, #20]
 80261d8:	b2d2      	uxtb	r2, r2
 80261da:	4611      	mov	r1, r2
 80261dc:	4618      	mov	r0, r3
 80261de:	f005 fa72 	bl	802b6c6 <USB_HC_Halt>
}
 80261e2:	e22e      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80261e4:	697b      	ldr	r3, [r7, #20]
 80261e6:	015a      	lsls	r2, r3, #5
 80261e8:	69bb      	ldr	r3, [r7, #24]
 80261ea:	4413      	add	r3, r2
 80261ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261f0:	689b      	ldr	r3, [r3, #8]
 80261f2:	f003 0310 	and.w	r3, r3, #16
 80261f6:	2b10      	cmp	r3, #16
 80261f8:	d140      	bne.n	802627c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80261fa:	687a      	ldr	r2, [r7, #4]
 80261fc:	697b      	ldr	r3, [r7, #20]
 80261fe:	212c      	movs	r1, #44	; 0x2c
 8026200:	fb01 f303 	mul.w	r3, r1, r3
 8026204:	4413      	add	r3, r2
 8026206:	335c      	adds	r3, #92	; 0x5c
 8026208:	2200      	movs	r2, #0
 802620a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 802620c:	687a      	ldr	r2, [r7, #4]
 802620e:	697b      	ldr	r3, [r7, #20]
 8026210:	212c      	movs	r1, #44	; 0x2c
 8026212:	fb01 f303 	mul.w	r3, r1, r3
 8026216:	4413      	add	r3, r2
 8026218:	3361      	adds	r3, #97	; 0x61
 802621a:	2203      	movs	r2, #3
 802621c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802621e:	687a      	ldr	r2, [r7, #4]
 8026220:	697b      	ldr	r3, [r7, #20]
 8026222:	212c      	movs	r1, #44	; 0x2c
 8026224:	fb01 f303 	mul.w	r3, r1, r3
 8026228:	4413      	add	r3, r2
 802622a:	333d      	adds	r3, #61	; 0x3d
 802622c:	781b      	ldrb	r3, [r3, #0]
 802622e:	2b00      	cmp	r3, #0
 8026230:	d112      	bne.n	8026258 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8026232:	687a      	ldr	r2, [r7, #4]
 8026234:	697b      	ldr	r3, [r7, #20]
 8026236:	212c      	movs	r1, #44	; 0x2c
 8026238:	fb01 f303 	mul.w	r3, r1, r3
 802623c:	4413      	add	r3, r2
 802623e:	333c      	adds	r3, #60	; 0x3c
 8026240:	781b      	ldrb	r3, [r3, #0]
 8026242:	2b00      	cmp	r3, #0
 8026244:	d108      	bne.n	8026258 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8026246:	687a      	ldr	r2, [r7, #4]
 8026248:	697b      	ldr	r3, [r7, #20]
 802624a:	212c      	movs	r1, #44	; 0x2c
 802624c:	fb01 f303 	mul.w	r3, r1, r3
 8026250:	4413      	add	r3, r2
 8026252:	333d      	adds	r3, #61	; 0x3d
 8026254:	2201      	movs	r2, #1
 8026256:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026258:	687b      	ldr	r3, [r7, #4]
 802625a:	681b      	ldr	r3, [r3, #0]
 802625c:	697a      	ldr	r2, [r7, #20]
 802625e:	b2d2      	uxtb	r2, r2
 8026260:	4611      	mov	r1, r2
 8026262:	4618      	mov	r0, r3
 8026264:	f005 fa2f 	bl	802b6c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026268:	697b      	ldr	r3, [r7, #20]
 802626a:	015a      	lsls	r2, r3, #5
 802626c:	69bb      	ldr	r3, [r7, #24]
 802626e:	4413      	add	r3, r2
 8026270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026274:	461a      	mov	r2, r3
 8026276:	2310      	movs	r3, #16
 8026278:	6093      	str	r3, [r2, #8]
}
 802627a:	e1e2      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 802627c:	697b      	ldr	r3, [r7, #20]
 802627e:	015a      	lsls	r2, r3, #5
 8026280:	69bb      	ldr	r3, [r7, #24]
 8026282:	4413      	add	r3, r2
 8026284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026288:	689b      	ldr	r3, [r3, #8]
 802628a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802628e:	2b80      	cmp	r3, #128	; 0x80
 8026290:	d164      	bne.n	802635c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8026292:	687b      	ldr	r3, [r7, #4]
 8026294:	691b      	ldr	r3, [r3, #16]
 8026296:	2b00      	cmp	r3, #0
 8026298:	d111      	bne.n	80262be <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 802629a:	687a      	ldr	r2, [r7, #4]
 802629c:	697b      	ldr	r3, [r7, #20]
 802629e:	212c      	movs	r1, #44	; 0x2c
 80262a0:	fb01 f303 	mul.w	r3, r1, r3
 80262a4:	4413      	add	r3, r2
 80262a6:	3361      	adds	r3, #97	; 0x61
 80262a8:	2206      	movs	r2, #6
 80262aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262ac:	687b      	ldr	r3, [r7, #4]
 80262ae:	681b      	ldr	r3, [r3, #0]
 80262b0:	697a      	ldr	r2, [r7, #20]
 80262b2:	b2d2      	uxtb	r2, r2
 80262b4:	4611      	mov	r1, r2
 80262b6:	4618      	mov	r0, r3
 80262b8:	f005 fa05 	bl	802b6c6 <USB_HC_Halt>
 80262bc:	e044      	b.n	8026348 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80262be:	687a      	ldr	r2, [r7, #4]
 80262c0:	697b      	ldr	r3, [r7, #20]
 80262c2:	212c      	movs	r1, #44	; 0x2c
 80262c4:	fb01 f303 	mul.w	r3, r1, r3
 80262c8:	4413      	add	r3, r2
 80262ca:	335c      	adds	r3, #92	; 0x5c
 80262cc:	681b      	ldr	r3, [r3, #0]
 80262ce:	1c5a      	adds	r2, r3, #1
 80262d0:	6879      	ldr	r1, [r7, #4]
 80262d2:	697b      	ldr	r3, [r7, #20]
 80262d4:	202c      	movs	r0, #44	; 0x2c
 80262d6:	fb00 f303 	mul.w	r3, r0, r3
 80262da:	440b      	add	r3, r1
 80262dc:	335c      	adds	r3, #92	; 0x5c
 80262de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80262e0:	687a      	ldr	r2, [r7, #4]
 80262e2:	697b      	ldr	r3, [r7, #20]
 80262e4:	212c      	movs	r1, #44	; 0x2c
 80262e6:	fb01 f303 	mul.w	r3, r1, r3
 80262ea:	4413      	add	r3, r2
 80262ec:	335c      	adds	r3, #92	; 0x5c
 80262ee:	681b      	ldr	r3, [r3, #0]
 80262f0:	2b02      	cmp	r3, #2
 80262f2:	d920      	bls.n	8026336 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80262f4:	687a      	ldr	r2, [r7, #4]
 80262f6:	697b      	ldr	r3, [r7, #20]
 80262f8:	212c      	movs	r1, #44	; 0x2c
 80262fa:	fb01 f303 	mul.w	r3, r1, r3
 80262fe:	4413      	add	r3, r2
 8026300:	335c      	adds	r3, #92	; 0x5c
 8026302:	2200      	movs	r2, #0
 8026304:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026306:	687a      	ldr	r2, [r7, #4]
 8026308:	697b      	ldr	r3, [r7, #20]
 802630a:	212c      	movs	r1, #44	; 0x2c
 802630c:	fb01 f303 	mul.w	r3, r1, r3
 8026310:	4413      	add	r3, r2
 8026312:	3360      	adds	r3, #96	; 0x60
 8026314:	2204      	movs	r2, #4
 8026316:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026318:	697b      	ldr	r3, [r7, #20]
 802631a:	b2d9      	uxtb	r1, r3
 802631c:	687a      	ldr	r2, [r7, #4]
 802631e:	697b      	ldr	r3, [r7, #20]
 8026320:	202c      	movs	r0, #44	; 0x2c
 8026322:	fb00 f303 	mul.w	r3, r0, r3
 8026326:	4413      	add	r3, r2
 8026328:	3360      	adds	r3, #96	; 0x60
 802632a:	781b      	ldrb	r3, [r3, #0]
 802632c:	461a      	mov	r2, r3
 802632e:	6878      	ldr	r0, [r7, #4]
 8026330:	f007 fc68 	bl	802dc04 <HAL_HCD_HC_NotifyURBChange_Callback>
 8026334:	e008      	b.n	8026348 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026336:	687a      	ldr	r2, [r7, #4]
 8026338:	697b      	ldr	r3, [r7, #20]
 802633a:	212c      	movs	r1, #44	; 0x2c
 802633c:	fb01 f303 	mul.w	r3, r1, r3
 8026340:	4413      	add	r3, r2
 8026342:	3360      	adds	r3, #96	; 0x60
 8026344:	2202      	movs	r2, #2
 8026346:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8026348:	697b      	ldr	r3, [r7, #20]
 802634a:	015a      	lsls	r2, r3, #5
 802634c:	69bb      	ldr	r3, [r7, #24]
 802634e:	4413      	add	r3, r2
 8026350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026354:	461a      	mov	r2, r3
 8026356:	2380      	movs	r3, #128	; 0x80
 8026358:	6093      	str	r3, [r2, #8]
}
 802635a:	e172      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802635c:	697b      	ldr	r3, [r7, #20]
 802635e:	015a      	lsls	r2, r3, #5
 8026360:	69bb      	ldr	r3, [r7, #24]
 8026362:	4413      	add	r3, r2
 8026364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026368:	689b      	ldr	r3, [r3, #8]
 802636a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8026372:	d11b      	bne.n	80263ac <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8026374:	687a      	ldr	r2, [r7, #4]
 8026376:	697b      	ldr	r3, [r7, #20]
 8026378:	212c      	movs	r1, #44	; 0x2c
 802637a:	fb01 f303 	mul.w	r3, r1, r3
 802637e:	4413      	add	r3, r2
 8026380:	3361      	adds	r3, #97	; 0x61
 8026382:	2208      	movs	r2, #8
 8026384:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026386:	687b      	ldr	r3, [r7, #4]
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	697a      	ldr	r2, [r7, #20]
 802638c:	b2d2      	uxtb	r2, r2
 802638e:	4611      	mov	r1, r2
 8026390:	4618      	mov	r0, r3
 8026392:	f005 f998 	bl	802b6c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8026396:	697b      	ldr	r3, [r7, #20]
 8026398:	015a      	lsls	r2, r3, #5
 802639a:	69bb      	ldr	r3, [r7, #24]
 802639c:	4413      	add	r3, r2
 802639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263a2:	461a      	mov	r2, r3
 80263a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80263a8:	6093      	str	r3, [r2, #8]
}
 80263aa:	e14a      	b.n	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80263ac:	697b      	ldr	r3, [r7, #20]
 80263ae:	015a      	lsls	r2, r3, #5
 80263b0:	69bb      	ldr	r3, [r7, #24]
 80263b2:	4413      	add	r3, r2
 80263b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263b8:	689b      	ldr	r3, [r3, #8]
 80263ba:	f003 0302 	and.w	r3, r3, #2
 80263be:	2b02      	cmp	r3, #2
 80263c0:	f040 813f 	bne.w	8026642 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80263c4:	687a      	ldr	r2, [r7, #4]
 80263c6:	697b      	ldr	r3, [r7, #20]
 80263c8:	212c      	movs	r1, #44	; 0x2c
 80263ca:	fb01 f303 	mul.w	r3, r1, r3
 80263ce:	4413      	add	r3, r2
 80263d0:	3361      	adds	r3, #97	; 0x61
 80263d2:	781b      	ldrb	r3, [r3, #0]
 80263d4:	2b01      	cmp	r3, #1
 80263d6:	d17d      	bne.n	80264d4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80263d8:	687a      	ldr	r2, [r7, #4]
 80263da:	697b      	ldr	r3, [r7, #20]
 80263dc:	212c      	movs	r1, #44	; 0x2c
 80263de:	fb01 f303 	mul.w	r3, r1, r3
 80263e2:	4413      	add	r3, r2
 80263e4:	3360      	adds	r3, #96	; 0x60
 80263e6:	2201      	movs	r2, #1
 80263e8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80263ea:	687a      	ldr	r2, [r7, #4]
 80263ec:	697b      	ldr	r3, [r7, #20]
 80263ee:	212c      	movs	r1, #44	; 0x2c
 80263f0:	fb01 f303 	mul.w	r3, r1, r3
 80263f4:	4413      	add	r3, r2
 80263f6:	333f      	adds	r3, #63	; 0x3f
 80263f8:	781b      	ldrb	r3, [r3, #0]
 80263fa:	2b02      	cmp	r3, #2
 80263fc:	d00a      	beq.n	8026414 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80263fe:	687a      	ldr	r2, [r7, #4]
 8026400:	697b      	ldr	r3, [r7, #20]
 8026402:	212c      	movs	r1, #44	; 0x2c
 8026404:	fb01 f303 	mul.w	r3, r1, r3
 8026408:	4413      	add	r3, r2
 802640a:	333f      	adds	r3, #63	; 0x3f
 802640c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802640e:	2b03      	cmp	r3, #3
 8026410:	f040 8100 	bne.w	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8026414:	687b      	ldr	r3, [r7, #4]
 8026416:	691b      	ldr	r3, [r3, #16]
 8026418:	2b00      	cmp	r3, #0
 802641a:	d113      	bne.n	8026444 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 802641c:	687a      	ldr	r2, [r7, #4]
 802641e:	697b      	ldr	r3, [r7, #20]
 8026420:	212c      	movs	r1, #44	; 0x2c
 8026422:	fb01 f303 	mul.w	r3, r1, r3
 8026426:	4413      	add	r3, r2
 8026428:	3355      	adds	r3, #85	; 0x55
 802642a:	781b      	ldrb	r3, [r3, #0]
 802642c:	f083 0301 	eor.w	r3, r3, #1
 8026430:	b2d8      	uxtb	r0, r3
 8026432:	687a      	ldr	r2, [r7, #4]
 8026434:	697b      	ldr	r3, [r7, #20]
 8026436:	212c      	movs	r1, #44	; 0x2c
 8026438:	fb01 f303 	mul.w	r3, r1, r3
 802643c:	4413      	add	r3, r2
 802643e:	3355      	adds	r3, #85	; 0x55
 8026440:	4602      	mov	r2, r0
 8026442:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	691b      	ldr	r3, [r3, #16]
 8026448:	2b01      	cmp	r3, #1
 802644a:	f040 80e3 	bne.w	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
 802644e:	687a      	ldr	r2, [r7, #4]
 8026450:	697b      	ldr	r3, [r7, #20]
 8026452:	212c      	movs	r1, #44	; 0x2c
 8026454:	fb01 f303 	mul.w	r3, r1, r3
 8026458:	4413      	add	r3, r2
 802645a:	334c      	adds	r3, #76	; 0x4c
 802645c:	681b      	ldr	r3, [r3, #0]
 802645e:	2b00      	cmp	r3, #0
 8026460:	f000 80d8 	beq.w	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8026464:	687a      	ldr	r2, [r7, #4]
 8026466:	697b      	ldr	r3, [r7, #20]
 8026468:	212c      	movs	r1, #44	; 0x2c
 802646a:	fb01 f303 	mul.w	r3, r1, r3
 802646e:	4413      	add	r3, r2
 8026470:	334c      	adds	r3, #76	; 0x4c
 8026472:	681b      	ldr	r3, [r3, #0]
 8026474:	6879      	ldr	r1, [r7, #4]
 8026476:	697a      	ldr	r2, [r7, #20]
 8026478:	202c      	movs	r0, #44	; 0x2c
 802647a:	fb00 f202 	mul.w	r2, r0, r2
 802647e:	440a      	add	r2, r1
 8026480:	3240      	adds	r2, #64	; 0x40
 8026482:	8812      	ldrh	r2, [r2, #0]
 8026484:	4413      	add	r3, r2
 8026486:	3b01      	subs	r3, #1
 8026488:	6879      	ldr	r1, [r7, #4]
 802648a:	697a      	ldr	r2, [r7, #20]
 802648c:	202c      	movs	r0, #44	; 0x2c
 802648e:	fb00 f202 	mul.w	r2, r0, r2
 8026492:	440a      	add	r2, r1
 8026494:	3240      	adds	r2, #64	; 0x40
 8026496:	8812      	ldrh	r2, [r2, #0]
 8026498:	fbb3 f3f2 	udiv	r3, r3, r2
 802649c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 802649e:	68fb      	ldr	r3, [r7, #12]
 80264a0:	f003 0301 	and.w	r3, r3, #1
 80264a4:	2b00      	cmp	r3, #0
 80264a6:	f000 80b5 	beq.w	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80264aa:	687a      	ldr	r2, [r7, #4]
 80264ac:	697b      	ldr	r3, [r7, #20]
 80264ae:	212c      	movs	r1, #44	; 0x2c
 80264b0:	fb01 f303 	mul.w	r3, r1, r3
 80264b4:	4413      	add	r3, r2
 80264b6:	3355      	adds	r3, #85	; 0x55
 80264b8:	781b      	ldrb	r3, [r3, #0]
 80264ba:	f083 0301 	eor.w	r3, r3, #1
 80264be:	b2d8      	uxtb	r0, r3
 80264c0:	687a      	ldr	r2, [r7, #4]
 80264c2:	697b      	ldr	r3, [r7, #20]
 80264c4:	212c      	movs	r1, #44	; 0x2c
 80264c6:	fb01 f303 	mul.w	r3, r1, r3
 80264ca:	4413      	add	r3, r2
 80264cc:	3355      	adds	r3, #85	; 0x55
 80264ce:	4602      	mov	r2, r0
 80264d0:	701a      	strb	r2, [r3, #0]
 80264d2:	e09f      	b.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80264d4:	687a      	ldr	r2, [r7, #4]
 80264d6:	697b      	ldr	r3, [r7, #20]
 80264d8:	212c      	movs	r1, #44	; 0x2c
 80264da:	fb01 f303 	mul.w	r3, r1, r3
 80264de:	4413      	add	r3, r2
 80264e0:	3361      	adds	r3, #97	; 0x61
 80264e2:	781b      	ldrb	r3, [r3, #0]
 80264e4:	2b03      	cmp	r3, #3
 80264e6:	d109      	bne.n	80264fc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80264e8:	687a      	ldr	r2, [r7, #4]
 80264ea:	697b      	ldr	r3, [r7, #20]
 80264ec:	212c      	movs	r1, #44	; 0x2c
 80264ee:	fb01 f303 	mul.w	r3, r1, r3
 80264f2:	4413      	add	r3, r2
 80264f4:	3360      	adds	r3, #96	; 0x60
 80264f6:	2202      	movs	r2, #2
 80264f8:	701a      	strb	r2, [r3, #0]
 80264fa:	e08b      	b.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80264fc:	687a      	ldr	r2, [r7, #4]
 80264fe:	697b      	ldr	r3, [r7, #20]
 8026500:	212c      	movs	r1, #44	; 0x2c
 8026502:	fb01 f303 	mul.w	r3, r1, r3
 8026506:	4413      	add	r3, r2
 8026508:	3361      	adds	r3, #97	; 0x61
 802650a:	781b      	ldrb	r3, [r3, #0]
 802650c:	2b04      	cmp	r3, #4
 802650e:	d109      	bne.n	8026524 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026510:	687a      	ldr	r2, [r7, #4]
 8026512:	697b      	ldr	r3, [r7, #20]
 8026514:	212c      	movs	r1, #44	; 0x2c
 8026516:	fb01 f303 	mul.w	r3, r1, r3
 802651a:	4413      	add	r3, r2
 802651c:	3360      	adds	r3, #96	; 0x60
 802651e:	2202      	movs	r2, #2
 8026520:	701a      	strb	r2, [r3, #0]
 8026522:	e077      	b.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8026524:	687a      	ldr	r2, [r7, #4]
 8026526:	697b      	ldr	r3, [r7, #20]
 8026528:	212c      	movs	r1, #44	; 0x2c
 802652a:	fb01 f303 	mul.w	r3, r1, r3
 802652e:	4413      	add	r3, r2
 8026530:	3361      	adds	r3, #97	; 0x61
 8026532:	781b      	ldrb	r3, [r3, #0]
 8026534:	2b05      	cmp	r3, #5
 8026536:	d109      	bne.n	802654c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8026538:	687a      	ldr	r2, [r7, #4]
 802653a:	697b      	ldr	r3, [r7, #20]
 802653c:	212c      	movs	r1, #44	; 0x2c
 802653e:	fb01 f303 	mul.w	r3, r1, r3
 8026542:	4413      	add	r3, r2
 8026544:	3360      	adds	r3, #96	; 0x60
 8026546:	2205      	movs	r2, #5
 8026548:	701a      	strb	r2, [r3, #0]
 802654a:	e063      	b.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802654c:	687a      	ldr	r2, [r7, #4]
 802654e:	697b      	ldr	r3, [r7, #20]
 8026550:	212c      	movs	r1, #44	; 0x2c
 8026552:	fb01 f303 	mul.w	r3, r1, r3
 8026556:	4413      	add	r3, r2
 8026558:	3361      	adds	r3, #97	; 0x61
 802655a:	781b      	ldrb	r3, [r3, #0]
 802655c:	2b06      	cmp	r3, #6
 802655e:	d009      	beq.n	8026574 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8026560:	687a      	ldr	r2, [r7, #4]
 8026562:	697b      	ldr	r3, [r7, #20]
 8026564:	212c      	movs	r1, #44	; 0x2c
 8026566:	fb01 f303 	mul.w	r3, r1, r3
 802656a:	4413      	add	r3, r2
 802656c:	3361      	adds	r3, #97	; 0x61
 802656e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026570:	2b08      	cmp	r3, #8
 8026572:	d14f      	bne.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8026574:	687a      	ldr	r2, [r7, #4]
 8026576:	697b      	ldr	r3, [r7, #20]
 8026578:	212c      	movs	r1, #44	; 0x2c
 802657a:	fb01 f303 	mul.w	r3, r1, r3
 802657e:	4413      	add	r3, r2
 8026580:	335c      	adds	r3, #92	; 0x5c
 8026582:	681b      	ldr	r3, [r3, #0]
 8026584:	1c5a      	adds	r2, r3, #1
 8026586:	6879      	ldr	r1, [r7, #4]
 8026588:	697b      	ldr	r3, [r7, #20]
 802658a:	202c      	movs	r0, #44	; 0x2c
 802658c:	fb00 f303 	mul.w	r3, r0, r3
 8026590:	440b      	add	r3, r1
 8026592:	335c      	adds	r3, #92	; 0x5c
 8026594:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026596:	687a      	ldr	r2, [r7, #4]
 8026598:	697b      	ldr	r3, [r7, #20]
 802659a:	212c      	movs	r1, #44	; 0x2c
 802659c:	fb01 f303 	mul.w	r3, r1, r3
 80265a0:	4413      	add	r3, r2
 80265a2:	335c      	adds	r3, #92	; 0x5c
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	2b02      	cmp	r3, #2
 80265a8:	d912      	bls.n	80265d0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80265aa:	687a      	ldr	r2, [r7, #4]
 80265ac:	697b      	ldr	r3, [r7, #20]
 80265ae:	212c      	movs	r1, #44	; 0x2c
 80265b0:	fb01 f303 	mul.w	r3, r1, r3
 80265b4:	4413      	add	r3, r2
 80265b6:	335c      	adds	r3, #92	; 0x5c
 80265b8:	2200      	movs	r2, #0
 80265ba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80265bc:	687a      	ldr	r2, [r7, #4]
 80265be:	697b      	ldr	r3, [r7, #20]
 80265c0:	212c      	movs	r1, #44	; 0x2c
 80265c2:	fb01 f303 	mul.w	r3, r1, r3
 80265c6:	4413      	add	r3, r2
 80265c8:	3360      	adds	r3, #96	; 0x60
 80265ca:	2204      	movs	r2, #4
 80265cc:	701a      	strb	r2, [r3, #0]
 80265ce:	e021      	b.n	8026614 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80265d0:	687a      	ldr	r2, [r7, #4]
 80265d2:	697b      	ldr	r3, [r7, #20]
 80265d4:	212c      	movs	r1, #44	; 0x2c
 80265d6:	fb01 f303 	mul.w	r3, r1, r3
 80265da:	4413      	add	r3, r2
 80265dc:	3360      	adds	r3, #96	; 0x60
 80265de:	2202      	movs	r2, #2
 80265e0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80265e2:	697b      	ldr	r3, [r7, #20]
 80265e4:	015a      	lsls	r2, r3, #5
 80265e6:	69bb      	ldr	r3, [r7, #24]
 80265e8:	4413      	add	r3, r2
 80265ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80265f2:	693b      	ldr	r3, [r7, #16]
 80265f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80265f8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80265fa:	693b      	ldr	r3, [r7, #16]
 80265fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026600:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8026602:	697b      	ldr	r3, [r7, #20]
 8026604:	015a      	lsls	r2, r3, #5
 8026606:	69bb      	ldr	r3, [r7, #24]
 8026608:	4413      	add	r3, r2
 802660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802660e:	461a      	mov	r2, r3
 8026610:	693b      	ldr	r3, [r7, #16]
 8026612:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8026614:	697b      	ldr	r3, [r7, #20]
 8026616:	015a      	lsls	r2, r3, #5
 8026618:	69bb      	ldr	r3, [r7, #24]
 802661a:	4413      	add	r3, r2
 802661c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026620:	461a      	mov	r2, r3
 8026622:	2302      	movs	r3, #2
 8026624:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026626:	697b      	ldr	r3, [r7, #20]
 8026628:	b2d9      	uxtb	r1, r3
 802662a:	687a      	ldr	r2, [r7, #4]
 802662c:	697b      	ldr	r3, [r7, #20]
 802662e:	202c      	movs	r0, #44	; 0x2c
 8026630:	fb00 f303 	mul.w	r3, r0, r3
 8026634:	4413      	add	r3, r2
 8026636:	3360      	adds	r3, #96	; 0x60
 8026638:	781b      	ldrb	r3, [r3, #0]
 802663a:	461a      	mov	r2, r3
 802663c:	6878      	ldr	r0, [r7, #4]
 802663e:	f007 fae1 	bl	802dc04 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8026642:	bf00      	nop
 8026644:	3720      	adds	r7, #32
 8026646:	46bd      	mov	sp, r7
 8026648:	bd80      	pop	{r7, pc}

0802664a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802664a:	b580      	push	{r7, lr}
 802664c:	b08a      	sub	sp, #40	; 0x28
 802664e:	af00      	add	r7, sp, #0
 8026650:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026652:	687b      	ldr	r3, [r7, #4]
 8026654:	681b      	ldr	r3, [r3, #0]
 8026656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802665a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	681b      	ldr	r3, [r3, #0]
 8026660:	6a1b      	ldr	r3, [r3, #32]
 8026662:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8026664:	69fb      	ldr	r3, [r7, #28]
 8026666:	f003 030f 	and.w	r3, r3, #15
 802666a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 802666c:	69fb      	ldr	r3, [r7, #28]
 802666e:	0c5b      	lsrs	r3, r3, #17
 8026670:	f003 030f 	and.w	r3, r3, #15
 8026674:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026676:	69fb      	ldr	r3, [r7, #28]
 8026678:	091b      	lsrs	r3, r3, #4
 802667a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802667e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8026680:	697b      	ldr	r3, [r7, #20]
 8026682:	2b02      	cmp	r3, #2
 8026684:	d004      	beq.n	8026690 <HCD_RXQLVL_IRQHandler+0x46>
 8026686:	697b      	ldr	r3, [r7, #20]
 8026688:	2b05      	cmp	r3, #5
 802668a:	f000 80a9 	beq.w	80267e0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 802668e:	e0aa      	b.n	80267e6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8026690:	693b      	ldr	r3, [r7, #16]
 8026692:	2b00      	cmp	r3, #0
 8026694:	f000 80a6 	beq.w	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
 8026698:	687a      	ldr	r2, [r7, #4]
 802669a:	69bb      	ldr	r3, [r7, #24]
 802669c:	212c      	movs	r1, #44	; 0x2c
 802669e:	fb01 f303 	mul.w	r3, r1, r3
 80266a2:	4413      	add	r3, r2
 80266a4:	3344      	adds	r3, #68	; 0x44
 80266a6:	681b      	ldr	r3, [r3, #0]
 80266a8:	2b00      	cmp	r3, #0
 80266aa:	f000 809b 	beq.w	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80266ae:	687a      	ldr	r2, [r7, #4]
 80266b0:	69bb      	ldr	r3, [r7, #24]
 80266b2:	212c      	movs	r1, #44	; 0x2c
 80266b4:	fb01 f303 	mul.w	r3, r1, r3
 80266b8:	4413      	add	r3, r2
 80266ba:	3350      	adds	r3, #80	; 0x50
 80266bc:	681a      	ldr	r2, [r3, #0]
 80266be:	693b      	ldr	r3, [r7, #16]
 80266c0:	441a      	add	r2, r3
 80266c2:	6879      	ldr	r1, [r7, #4]
 80266c4:	69bb      	ldr	r3, [r7, #24]
 80266c6:	202c      	movs	r0, #44	; 0x2c
 80266c8:	fb00 f303 	mul.w	r3, r0, r3
 80266cc:	440b      	add	r3, r1
 80266ce:	334c      	adds	r3, #76	; 0x4c
 80266d0:	681b      	ldr	r3, [r3, #0]
 80266d2:	429a      	cmp	r2, r3
 80266d4:	d87a      	bhi.n	80267cc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80266d6:	687b      	ldr	r3, [r7, #4]
 80266d8:	6818      	ldr	r0, [r3, #0]
 80266da:	687a      	ldr	r2, [r7, #4]
 80266dc:	69bb      	ldr	r3, [r7, #24]
 80266de:	212c      	movs	r1, #44	; 0x2c
 80266e0:	fb01 f303 	mul.w	r3, r1, r3
 80266e4:	4413      	add	r3, r2
 80266e6:	3344      	adds	r3, #68	; 0x44
 80266e8:	681b      	ldr	r3, [r3, #0]
 80266ea:	693a      	ldr	r2, [r7, #16]
 80266ec:	b292      	uxth	r2, r2
 80266ee:	4619      	mov	r1, r3
 80266f0:	f004 fb40 	bl	802ad74 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80266f4:	687a      	ldr	r2, [r7, #4]
 80266f6:	69bb      	ldr	r3, [r7, #24]
 80266f8:	212c      	movs	r1, #44	; 0x2c
 80266fa:	fb01 f303 	mul.w	r3, r1, r3
 80266fe:	4413      	add	r3, r2
 8026700:	3344      	adds	r3, #68	; 0x44
 8026702:	681a      	ldr	r2, [r3, #0]
 8026704:	693b      	ldr	r3, [r7, #16]
 8026706:	441a      	add	r2, r3
 8026708:	6879      	ldr	r1, [r7, #4]
 802670a:	69bb      	ldr	r3, [r7, #24]
 802670c:	202c      	movs	r0, #44	; 0x2c
 802670e:	fb00 f303 	mul.w	r3, r0, r3
 8026712:	440b      	add	r3, r1
 8026714:	3344      	adds	r3, #68	; 0x44
 8026716:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026718:	687a      	ldr	r2, [r7, #4]
 802671a:	69bb      	ldr	r3, [r7, #24]
 802671c:	212c      	movs	r1, #44	; 0x2c
 802671e:	fb01 f303 	mul.w	r3, r1, r3
 8026722:	4413      	add	r3, r2
 8026724:	3350      	adds	r3, #80	; 0x50
 8026726:	681a      	ldr	r2, [r3, #0]
 8026728:	693b      	ldr	r3, [r7, #16]
 802672a:	441a      	add	r2, r3
 802672c:	6879      	ldr	r1, [r7, #4]
 802672e:	69bb      	ldr	r3, [r7, #24]
 8026730:	202c      	movs	r0, #44	; 0x2c
 8026732:	fb00 f303 	mul.w	r3, r0, r3
 8026736:	440b      	add	r3, r1
 8026738:	3350      	adds	r3, #80	; 0x50
 802673a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 802673c:	69bb      	ldr	r3, [r7, #24]
 802673e:	015a      	lsls	r2, r3, #5
 8026740:	6a3b      	ldr	r3, [r7, #32]
 8026742:	4413      	add	r3, r2
 8026744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026748:	691b      	ldr	r3, [r3, #16]
 802674a:	0cdb      	lsrs	r3, r3, #19
 802674c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8026750:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8026752:	687a      	ldr	r2, [r7, #4]
 8026754:	69bb      	ldr	r3, [r7, #24]
 8026756:	212c      	movs	r1, #44	; 0x2c
 8026758:	fb01 f303 	mul.w	r3, r1, r3
 802675c:	4413      	add	r3, r2
 802675e:	3340      	adds	r3, #64	; 0x40
 8026760:	881b      	ldrh	r3, [r3, #0]
 8026762:	461a      	mov	r2, r3
 8026764:	693b      	ldr	r3, [r7, #16]
 8026766:	4293      	cmp	r3, r2
 8026768:	d13c      	bne.n	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	2b00      	cmp	r3, #0
 802676e:	d039      	beq.n	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8026770:	69bb      	ldr	r3, [r7, #24]
 8026772:	015a      	lsls	r2, r3, #5
 8026774:	6a3b      	ldr	r3, [r7, #32]
 8026776:	4413      	add	r3, r2
 8026778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802677c:	681b      	ldr	r3, [r3, #0]
 802677e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8026780:	68bb      	ldr	r3, [r7, #8]
 8026782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026786:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026788:	68bb      	ldr	r3, [r7, #8]
 802678a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802678e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8026790:	69bb      	ldr	r3, [r7, #24]
 8026792:	015a      	lsls	r2, r3, #5
 8026794:	6a3b      	ldr	r3, [r7, #32]
 8026796:	4413      	add	r3, r2
 8026798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802679c:	461a      	mov	r2, r3
 802679e:	68bb      	ldr	r3, [r7, #8]
 80267a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80267a2:	687a      	ldr	r2, [r7, #4]
 80267a4:	69bb      	ldr	r3, [r7, #24]
 80267a6:	212c      	movs	r1, #44	; 0x2c
 80267a8:	fb01 f303 	mul.w	r3, r1, r3
 80267ac:	4413      	add	r3, r2
 80267ae:	3354      	adds	r3, #84	; 0x54
 80267b0:	781b      	ldrb	r3, [r3, #0]
 80267b2:	f083 0301 	eor.w	r3, r3, #1
 80267b6:	b2d8      	uxtb	r0, r3
 80267b8:	687a      	ldr	r2, [r7, #4]
 80267ba:	69bb      	ldr	r3, [r7, #24]
 80267bc:	212c      	movs	r1, #44	; 0x2c
 80267be:	fb01 f303 	mul.w	r3, r1, r3
 80267c2:	4413      	add	r3, r2
 80267c4:	3354      	adds	r3, #84	; 0x54
 80267c6:	4602      	mov	r2, r0
 80267c8:	701a      	strb	r2, [r3, #0]
      break;
 80267ca:	e00b      	b.n	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80267cc:	687a      	ldr	r2, [r7, #4]
 80267ce:	69bb      	ldr	r3, [r7, #24]
 80267d0:	212c      	movs	r1, #44	; 0x2c
 80267d2:	fb01 f303 	mul.w	r3, r1, r3
 80267d6:	4413      	add	r3, r2
 80267d8:	3360      	adds	r3, #96	; 0x60
 80267da:	2204      	movs	r2, #4
 80267dc:	701a      	strb	r2, [r3, #0]
      break;
 80267de:	e001      	b.n	80267e4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80267e0:	bf00      	nop
 80267e2:	e000      	b.n	80267e6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80267e4:	bf00      	nop
  }
}
 80267e6:	bf00      	nop
 80267e8:	3728      	adds	r7, #40	; 0x28
 80267ea:	46bd      	mov	sp, r7
 80267ec:	bd80      	pop	{r7, pc}

080267ee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80267ee:	b580      	push	{r7, lr}
 80267f0:	b086      	sub	sp, #24
 80267f2:	af00      	add	r7, sp, #0
 80267f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	681b      	ldr	r3, [r3, #0]
 80267fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80267fc:	697b      	ldr	r3, [r7, #20]
 80267fe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8026800:	693b      	ldr	r3, [r7, #16]
 8026802:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 802680a:	693b      	ldr	r3, [r7, #16]
 802680c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026810:	681b      	ldr	r3, [r3, #0]
 8026812:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8026814:	68bb      	ldr	r3, [r7, #8]
 8026816:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802681a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 802681c:	68fb      	ldr	r3, [r7, #12]
 802681e:	f003 0302 	and.w	r3, r3, #2
 8026822:	2b02      	cmp	r3, #2
 8026824:	d10b      	bne.n	802683e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026826:	68fb      	ldr	r3, [r7, #12]
 8026828:	f003 0301 	and.w	r3, r3, #1
 802682c:	2b01      	cmp	r3, #1
 802682e:	d102      	bne.n	8026836 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8026830:	6878      	ldr	r0, [r7, #4]
 8026832:	f007 f9cb 	bl	802dbcc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8026836:	68bb      	ldr	r3, [r7, #8]
 8026838:	f043 0302 	orr.w	r3, r3, #2
 802683c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 802683e:	68fb      	ldr	r3, [r7, #12]
 8026840:	f003 0308 	and.w	r3, r3, #8
 8026844:	2b08      	cmp	r3, #8
 8026846:	d132      	bne.n	80268ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026848:	68bb      	ldr	r3, [r7, #8]
 802684a:	f043 0308 	orr.w	r3, r3, #8
 802684e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8026850:	68fb      	ldr	r3, [r7, #12]
 8026852:	f003 0304 	and.w	r3, r3, #4
 8026856:	2b04      	cmp	r3, #4
 8026858:	d126      	bne.n	80268a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	699b      	ldr	r3, [r3, #24]
 802685e:	2b02      	cmp	r3, #2
 8026860:	d113      	bne.n	802688a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8026862:	68fb      	ldr	r3, [r7, #12]
 8026864:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802686c:	d106      	bne.n	802687c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	681b      	ldr	r3, [r3, #0]
 8026872:	2102      	movs	r1, #2
 8026874:	4618      	mov	r0, r3
 8026876:	f004 fbeb 	bl	802b050 <USB_InitFSLSPClkSel>
 802687a:	e011      	b.n	80268a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	2101      	movs	r1, #1
 8026882:	4618      	mov	r0, r3
 8026884:	f004 fbe4 	bl	802b050 <USB_InitFSLSPClkSel>
 8026888:	e00a      	b.n	80268a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 802688a:	687b      	ldr	r3, [r7, #4]
 802688c:	68db      	ldr	r3, [r3, #12]
 802688e:	2b01      	cmp	r3, #1
 8026890:	d106      	bne.n	80268a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8026892:	693b      	ldr	r3, [r7, #16]
 8026894:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026898:	461a      	mov	r2, r3
 802689a:	f64e 2360 	movw	r3, #60000	; 0xea60
 802689e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80268a0:	6878      	ldr	r0, [r7, #4]
 80268a2:	f007 f9bd 	bl	802dc20 <HAL_HCD_PortEnabled_Callback>
 80268a6:	e002      	b.n	80268ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80268a8:	6878      	ldr	r0, [r7, #4]
 80268aa:	f007 f9c7 	bl	802dc3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80268ae:	68fb      	ldr	r3, [r7, #12]
 80268b0:	f003 0320 	and.w	r3, r3, #32
 80268b4:	2b20      	cmp	r3, #32
 80268b6:	d103      	bne.n	80268c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80268b8:	68bb      	ldr	r3, [r7, #8]
 80268ba:	f043 0320 	orr.w	r3, r3, #32
 80268be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80268c0:	693b      	ldr	r3, [r7, #16]
 80268c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80268c6:	461a      	mov	r2, r3
 80268c8:	68bb      	ldr	r3, [r7, #8]
 80268ca:	6013      	str	r3, [r2, #0]
}
 80268cc:	bf00      	nop
 80268ce:	3718      	adds	r7, #24
 80268d0:	46bd      	mov	sp, r7
 80268d2:	bd80      	pop	{r7, pc}

080268d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80268d4:	b580      	push	{r7, lr}
 80268d6:	b084      	sub	sp, #16
 80268d8:	af00      	add	r7, sp, #0
 80268da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80268dc:	687b      	ldr	r3, [r7, #4]
 80268de:	2b00      	cmp	r3, #0
 80268e0:	d101      	bne.n	80268e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80268e2:	2301      	movs	r3, #1
 80268e4:	e12b      	b.n	8026b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80268e6:	687b      	ldr	r3, [r7, #4]
 80268e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80268ec:	b2db      	uxtb	r3, r3
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	d106      	bne.n	8026900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	2200      	movs	r2, #0
 80268f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80268fa:	6878      	ldr	r0, [r7, #4]
 80268fc:	f7fa ff70 	bl	80217e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026900:	687b      	ldr	r3, [r7, #4]
 8026902:	2224      	movs	r2, #36	; 0x24
 8026904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026908:	687b      	ldr	r3, [r7, #4]
 802690a:	681b      	ldr	r3, [r3, #0]
 802690c:	681a      	ldr	r2, [r3, #0]
 802690e:	687b      	ldr	r3, [r7, #4]
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	f022 0201 	bic.w	r2, r2, #1
 8026916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026918:	687b      	ldr	r3, [r7, #4]
 802691a:	681b      	ldr	r3, [r3, #0]
 802691c:	681a      	ldr	r2, [r3, #0]
 802691e:	687b      	ldr	r3, [r7, #4]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026928:	687b      	ldr	r3, [r7, #4]
 802692a:	681b      	ldr	r3, [r3, #0]
 802692c:	681a      	ldr	r2, [r3, #0]
 802692e:	687b      	ldr	r3, [r7, #4]
 8026930:	681b      	ldr	r3, [r3, #0]
 8026932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026938:	f001 fa0c 	bl	8027d54 <HAL_RCC_GetPCLK1Freq>
 802693c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	685b      	ldr	r3, [r3, #4]
 8026942:	4a81      	ldr	r2, [pc, #516]	; (8026b48 <HAL_I2C_Init+0x274>)
 8026944:	4293      	cmp	r3, r2
 8026946:	d807      	bhi.n	8026958 <HAL_I2C_Init+0x84>
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	4a80      	ldr	r2, [pc, #512]	; (8026b4c <HAL_I2C_Init+0x278>)
 802694c:	4293      	cmp	r3, r2
 802694e:	bf94      	ite	ls
 8026950:	2301      	movls	r3, #1
 8026952:	2300      	movhi	r3, #0
 8026954:	b2db      	uxtb	r3, r3
 8026956:	e006      	b.n	8026966 <HAL_I2C_Init+0x92>
 8026958:	68fb      	ldr	r3, [r7, #12]
 802695a:	4a7d      	ldr	r2, [pc, #500]	; (8026b50 <HAL_I2C_Init+0x27c>)
 802695c:	4293      	cmp	r3, r2
 802695e:	bf94      	ite	ls
 8026960:	2301      	movls	r3, #1
 8026962:	2300      	movhi	r3, #0
 8026964:	b2db      	uxtb	r3, r3
 8026966:	2b00      	cmp	r3, #0
 8026968:	d001      	beq.n	802696e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802696a:	2301      	movs	r3, #1
 802696c:	e0e7      	b.n	8026b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802696e:	68fb      	ldr	r3, [r7, #12]
 8026970:	4a78      	ldr	r2, [pc, #480]	; (8026b54 <HAL_I2C_Init+0x280>)
 8026972:	fba2 2303 	umull	r2, r3, r2, r3
 8026976:	0c9b      	lsrs	r3, r3, #18
 8026978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802697a:	687b      	ldr	r3, [r7, #4]
 802697c:	681b      	ldr	r3, [r3, #0]
 802697e:	685b      	ldr	r3, [r3, #4]
 8026980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	68ba      	ldr	r2, [r7, #8]
 802698a:	430a      	orrs	r2, r1
 802698c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	681b      	ldr	r3, [r3, #0]
 8026992:	6a1b      	ldr	r3, [r3, #32]
 8026994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026998:	687b      	ldr	r3, [r7, #4]
 802699a:	685b      	ldr	r3, [r3, #4]
 802699c:	4a6a      	ldr	r2, [pc, #424]	; (8026b48 <HAL_I2C_Init+0x274>)
 802699e:	4293      	cmp	r3, r2
 80269a0:	d802      	bhi.n	80269a8 <HAL_I2C_Init+0xd4>
 80269a2:	68bb      	ldr	r3, [r7, #8]
 80269a4:	3301      	adds	r3, #1
 80269a6:	e009      	b.n	80269bc <HAL_I2C_Init+0xe8>
 80269a8:	68bb      	ldr	r3, [r7, #8]
 80269aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80269ae:	fb02 f303 	mul.w	r3, r2, r3
 80269b2:	4a69      	ldr	r2, [pc, #420]	; (8026b58 <HAL_I2C_Init+0x284>)
 80269b4:	fba2 2303 	umull	r2, r3, r2, r3
 80269b8:	099b      	lsrs	r3, r3, #6
 80269ba:	3301      	adds	r3, #1
 80269bc:	687a      	ldr	r2, [r7, #4]
 80269be:	6812      	ldr	r2, [r2, #0]
 80269c0:	430b      	orrs	r3, r1
 80269c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	69db      	ldr	r3, [r3, #28]
 80269ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80269ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	685b      	ldr	r3, [r3, #4]
 80269d6:	495c      	ldr	r1, [pc, #368]	; (8026b48 <HAL_I2C_Init+0x274>)
 80269d8:	428b      	cmp	r3, r1
 80269da:	d819      	bhi.n	8026a10 <HAL_I2C_Init+0x13c>
 80269dc:	68fb      	ldr	r3, [r7, #12]
 80269de:	1e59      	subs	r1, r3, #1
 80269e0:	687b      	ldr	r3, [r7, #4]
 80269e2:	685b      	ldr	r3, [r3, #4]
 80269e4:	005b      	lsls	r3, r3, #1
 80269e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80269ea:	1c59      	adds	r1, r3, #1
 80269ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80269f0:	400b      	ands	r3, r1
 80269f2:	2b00      	cmp	r3, #0
 80269f4:	d00a      	beq.n	8026a0c <HAL_I2C_Init+0x138>
 80269f6:	68fb      	ldr	r3, [r7, #12]
 80269f8:	1e59      	subs	r1, r3, #1
 80269fa:	687b      	ldr	r3, [r7, #4]
 80269fc:	685b      	ldr	r3, [r3, #4]
 80269fe:	005b      	lsls	r3, r3, #1
 8026a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8026a04:	3301      	adds	r3, #1
 8026a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a0a:	e051      	b.n	8026ab0 <HAL_I2C_Init+0x1dc>
 8026a0c:	2304      	movs	r3, #4
 8026a0e:	e04f      	b.n	8026ab0 <HAL_I2C_Init+0x1dc>
 8026a10:	687b      	ldr	r3, [r7, #4]
 8026a12:	689b      	ldr	r3, [r3, #8]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	d111      	bne.n	8026a3c <HAL_I2C_Init+0x168>
 8026a18:	68fb      	ldr	r3, [r7, #12]
 8026a1a:	1e58      	subs	r0, r3, #1
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	6859      	ldr	r1, [r3, #4]
 8026a20:	460b      	mov	r3, r1
 8026a22:	005b      	lsls	r3, r3, #1
 8026a24:	440b      	add	r3, r1
 8026a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a2a:	3301      	adds	r3, #1
 8026a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a30:	2b00      	cmp	r3, #0
 8026a32:	bf0c      	ite	eq
 8026a34:	2301      	moveq	r3, #1
 8026a36:	2300      	movne	r3, #0
 8026a38:	b2db      	uxtb	r3, r3
 8026a3a:	e012      	b.n	8026a62 <HAL_I2C_Init+0x18e>
 8026a3c:	68fb      	ldr	r3, [r7, #12]
 8026a3e:	1e58      	subs	r0, r3, #1
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	6859      	ldr	r1, [r3, #4]
 8026a44:	460b      	mov	r3, r1
 8026a46:	009b      	lsls	r3, r3, #2
 8026a48:	440b      	add	r3, r1
 8026a4a:	0099      	lsls	r1, r3, #2
 8026a4c:	440b      	add	r3, r1
 8026a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a52:	3301      	adds	r3, #1
 8026a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a58:	2b00      	cmp	r3, #0
 8026a5a:	bf0c      	ite	eq
 8026a5c:	2301      	moveq	r3, #1
 8026a5e:	2300      	movne	r3, #0
 8026a60:	b2db      	uxtb	r3, r3
 8026a62:	2b00      	cmp	r3, #0
 8026a64:	d001      	beq.n	8026a6a <HAL_I2C_Init+0x196>
 8026a66:	2301      	movs	r3, #1
 8026a68:	e022      	b.n	8026ab0 <HAL_I2C_Init+0x1dc>
 8026a6a:	687b      	ldr	r3, [r7, #4]
 8026a6c:	689b      	ldr	r3, [r3, #8]
 8026a6e:	2b00      	cmp	r3, #0
 8026a70:	d10e      	bne.n	8026a90 <HAL_I2C_Init+0x1bc>
 8026a72:	68fb      	ldr	r3, [r7, #12]
 8026a74:	1e58      	subs	r0, r3, #1
 8026a76:	687b      	ldr	r3, [r7, #4]
 8026a78:	6859      	ldr	r1, [r3, #4]
 8026a7a:	460b      	mov	r3, r1
 8026a7c:	005b      	lsls	r3, r3, #1
 8026a7e:	440b      	add	r3, r1
 8026a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a84:	3301      	adds	r3, #1
 8026a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026a8e:	e00f      	b.n	8026ab0 <HAL_I2C_Init+0x1dc>
 8026a90:	68fb      	ldr	r3, [r7, #12]
 8026a92:	1e58      	subs	r0, r3, #1
 8026a94:	687b      	ldr	r3, [r7, #4]
 8026a96:	6859      	ldr	r1, [r3, #4]
 8026a98:	460b      	mov	r3, r1
 8026a9a:	009b      	lsls	r3, r3, #2
 8026a9c:	440b      	add	r3, r1
 8026a9e:	0099      	lsls	r1, r3, #2
 8026aa0:	440b      	add	r3, r1
 8026aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8026aa6:	3301      	adds	r3, #1
 8026aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026ab0:	6879      	ldr	r1, [r7, #4]
 8026ab2:	6809      	ldr	r1, [r1, #0]
 8026ab4:	4313      	orrs	r3, r2
 8026ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026ab8:	687b      	ldr	r3, [r7, #4]
 8026aba:	681b      	ldr	r3, [r3, #0]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	69da      	ldr	r2, [r3, #28]
 8026ac6:	687b      	ldr	r3, [r7, #4]
 8026ac8:	6a1b      	ldr	r3, [r3, #32]
 8026aca:	431a      	orrs	r2, r3
 8026acc:	687b      	ldr	r3, [r7, #4]
 8026ace:	681b      	ldr	r3, [r3, #0]
 8026ad0:	430a      	orrs	r2, r1
 8026ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	689b      	ldr	r3, [r3, #8]
 8026ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8026ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026ae2:	687a      	ldr	r2, [r7, #4]
 8026ae4:	6911      	ldr	r1, [r2, #16]
 8026ae6:	687a      	ldr	r2, [r7, #4]
 8026ae8:	68d2      	ldr	r2, [r2, #12]
 8026aea:	4311      	orrs	r1, r2
 8026aec:	687a      	ldr	r2, [r7, #4]
 8026aee:	6812      	ldr	r2, [r2, #0]
 8026af0:	430b      	orrs	r3, r1
 8026af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	68db      	ldr	r3, [r3, #12]
 8026afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	695a      	ldr	r2, [r3, #20]
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	699b      	ldr	r3, [r3, #24]
 8026b06:	431a      	orrs	r2, r3
 8026b08:	687b      	ldr	r3, [r7, #4]
 8026b0a:	681b      	ldr	r3, [r3, #0]
 8026b0c:	430a      	orrs	r2, r1
 8026b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026b10:	687b      	ldr	r3, [r7, #4]
 8026b12:	681b      	ldr	r3, [r3, #0]
 8026b14:	681a      	ldr	r2, [r3, #0]
 8026b16:	687b      	ldr	r3, [r7, #4]
 8026b18:	681b      	ldr	r3, [r3, #0]
 8026b1a:	f042 0201 	orr.w	r2, r2, #1
 8026b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	2200      	movs	r2, #0
 8026b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026b26:	687b      	ldr	r3, [r7, #4]
 8026b28:	2220      	movs	r2, #32
 8026b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	2200      	movs	r2, #0
 8026b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	2200      	movs	r2, #0
 8026b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8026b3c:	2300      	movs	r3, #0
}
 8026b3e:	4618      	mov	r0, r3
 8026b40:	3710      	adds	r7, #16
 8026b42:	46bd      	mov	sp, r7
 8026b44:	bd80      	pop	{r7, pc}
 8026b46:	bf00      	nop
 8026b48:	000186a0 	.word	0x000186a0
 8026b4c:	001e847f 	.word	0x001e847f
 8026b50:	003d08ff 	.word	0x003d08ff
 8026b54:	431bde83 	.word	0x431bde83
 8026b58:	10624dd3 	.word	0x10624dd3

08026b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026b5c:	b480      	push	{r7}
 8026b5e:	b083      	sub	sp, #12
 8026b60:	af00      	add	r7, sp, #0
 8026b62:	6078      	str	r0, [r7, #4]
 8026b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026b66:	687b      	ldr	r3, [r7, #4]
 8026b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026b6c:	b2db      	uxtb	r3, r3
 8026b6e:	2b20      	cmp	r3, #32
 8026b70:	d129      	bne.n	8026bc6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026b72:	687b      	ldr	r3, [r7, #4]
 8026b74:	2224      	movs	r2, #36	; 0x24
 8026b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026b7a:	687b      	ldr	r3, [r7, #4]
 8026b7c:	681b      	ldr	r3, [r3, #0]
 8026b7e:	681a      	ldr	r2, [r3, #0]
 8026b80:	687b      	ldr	r3, [r7, #4]
 8026b82:	681b      	ldr	r3, [r3, #0]
 8026b84:	f022 0201 	bic.w	r2, r2, #1
 8026b88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8026b8a:	687b      	ldr	r3, [r7, #4]
 8026b8c:	681b      	ldr	r3, [r3, #0]
 8026b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026b90:	687b      	ldr	r3, [r7, #4]
 8026b92:	681b      	ldr	r3, [r3, #0]
 8026b94:	f022 0210 	bic.w	r2, r2, #16
 8026b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8026b9a:	687b      	ldr	r3, [r7, #4]
 8026b9c:	681b      	ldr	r3, [r3, #0]
 8026b9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026ba0:	687b      	ldr	r3, [r7, #4]
 8026ba2:	681b      	ldr	r3, [r3, #0]
 8026ba4:	683a      	ldr	r2, [r7, #0]
 8026ba6:	430a      	orrs	r2, r1
 8026ba8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026baa:	687b      	ldr	r3, [r7, #4]
 8026bac:	681b      	ldr	r3, [r3, #0]
 8026bae:	681a      	ldr	r2, [r3, #0]
 8026bb0:	687b      	ldr	r3, [r7, #4]
 8026bb2:	681b      	ldr	r3, [r3, #0]
 8026bb4:	f042 0201 	orr.w	r2, r2, #1
 8026bb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026bba:	687b      	ldr	r3, [r7, #4]
 8026bbc:	2220      	movs	r2, #32
 8026bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026bc2:	2300      	movs	r3, #0
 8026bc4:	e000      	b.n	8026bc8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026bc6:	2302      	movs	r3, #2
  }
}
 8026bc8:	4618      	mov	r0, r3
 8026bca:	370c      	adds	r7, #12
 8026bcc:	46bd      	mov	sp, r7
 8026bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bd2:	4770      	bx	lr

08026bd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026bd4:	b480      	push	{r7}
 8026bd6:	b085      	sub	sp, #20
 8026bd8:	af00      	add	r7, sp, #0
 8026bda:	6078      	str	r0, [r7, #4]
 8026bdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8026bde:	2300      	movs	r3, #0
 8026be0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026be2:	687b      	ldr	r3, [r7, #4]
 8026be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026be8:	b2db      	uxtb	r3, r3
 8026bea:	2b20      	cmp	r3, #32
 8026bec:	d12a      	bne.n	8026c44 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	2224      	movs	r2, #36	; 0x24
 8026bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026bf6:	687b      	ldr	r3, [r7, #4]
 8026bf8:	681b      	ldr	r3, [r3, #0]
 8026bfa:	681a      	ldr	r2, [r3, #0]
 8026bfc:	687b      	ldr	r3, [r7, #4]
 8026bfe:	681b      	ldr	r3, [r3, #0]
 8026c00:	f022 0201 	bic.w	r2, r2, #1
 8026c04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026c06:	687b      	ldr	r3, [r7, #4]
 8026c08:	681b      	ldr	r3, [r3, #0]
 8026c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c0c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8026c0e:	89fb      	ldrh	r3, [r7, #14]
 8026c10:	f023 030f 	bic.w	r3, r3, #15
 8026c14:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026c16:	683b      	ldr	r3, [r7, #0]
 8026c18:	b29a      	uxth	r2, r3
 8026c1a:	89fb      	ldrh	r3, [r7, #14]
 8026c1c:	4313      	orrs	r3, r2
 8026c1e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	681b      	ldr	r3, [r3, #0]
 8026c24:	89fa      	ldrh	r2, [r7, #14]
 8026c26:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026c28:	687b      	ldr	r3, [r7, #4]
 8026c2a:	681b      	ldr	r3, [r3, #0]
 8026c2c:	681a      	ldr	r2, [r3, #0]
 8026c2e:	687b      	ldr	r3, [r7, #4]
 8026c30:	681b      	ldr	r3, [r3, #0]
 8026c32:	f042 0201 	orr.w	r2, r2, #1
 8026c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	2220      	movs	r2, #32
 8026c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026c40:	2300      	movs	r3, #0
 8026c42:	e000      	b.n	8026c46 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026c44:	2302      	movs	r3, #2
  }
}
 8026c46:	4618      	mov	r0, r3
 8026c48:	3714      	adds	r7, #20
 8026c4a:	46bd      	mov	sp, r7
 8026c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c50:	4770      	bx	lr
	...

08026c54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026c54:	b580      	push	{r7, lr}
 8026c56:	b084      	sub	sp, #16
 8026c58:	af00      	add	r7, sp, #0
 8026c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026c5c:	687b      	ldr	r3, [r7, #4]
 8026c5e:	2b00      	cmp	r3, #0
 8026c60:	d101      	bne.n	8026c66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026c62:	2301      	movs	r3, #1
 8026c64:	e0bf      	b.n	8026de6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026c66:	687b      	ldr	r3, [r7, #4]
 8026c68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8026c6c:	b2db      	uxtb	r3, r3
 8026c6e:	2b00      	cmp	r3, #0
 8026c70:	d106      	bne.n	8026c80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026c72:	687b      	ldr	r3, [r7, #4]
 8026c74:	2200      	movs	r2, #0
 8026c76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8026c7a:	6878      	ldr	r0, [r7, #4]
 8026c7c:	f7fa fe1a 	bl	80218b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026c80:	687b      	ldr	r3, [r7, #4]
 8026c82:	2202      	movs	r2, #2
 8026c84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026c88:	687b      	ldr	r3, [r7, #4]
 8026c8a:	681b      	ldr	r3, [r3, #0]
 8026c8c:	699a      	ldr	r2, [r3, #24]
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026c96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026c98:	687b      	ldr	r3, [r7, #4]
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	6999      	ldr	r1, [r3, #24]
 8026c9e:	687b      	ldr	r3, [r7, #4]
 8026ca0:	685a      	ldr	r2, [r3, #4]
 8026ca2:	687b      	ldr	r3, [r7, #4]
 8026ca4:	689b      	ldr	r3, [r3, #8]
 8026ca6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026ca8:	687b      	ldr	r3, [r7, #4]
 8026caa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026cac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026cae:	687b      	ldr	r3, [r7, #4]
 8026cb0:	691b      	ldr	r3, [r3, #16]
 8026cb2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026cb4:	687b      	ldr	r3, [r7, #4]
 8026cb6:	681b      	ldr	r3, [r3, #0]
 8026cb8:	430a      	orrs	r2, r1
 8026cba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026cbc:	687b      	ldr	r3, [r7, #4]
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	6899      	ldr	r1, [r3, #8]
 8026cc2:	687b      	ldr	r3, [r7, #4]
 8026cc4:	681a      	ldr	r2, [r3, #0]
 8026cc6:	4b4a      	ldr	r3, [pc, #296]	; (8026df0 <HAL_LTDC_Init+0x19c>)
 8026cc8:	400b      	ands	r3, r1
 8026cca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026ccc:	687b      	ldr	r3, [r7, #4]
 8026cce:	695b      	ldr	r3, [r3, #20]
 8026cd0:	041b      	lsls	r3, r3, #16
 8026cd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026cd4:	687b      	ldr	r3, [r7, #4]
 8026cd6:	681b      	ldr	r3, [r3, #0]
 8026cd8:	6899      	ldr	r1, [r3, #8]
 8026cda:	687b      	ldr	r3, [r7, #4]
 8026cdc:	699a      	ldr	r2, [r3, #24]
 8026cde:	68fb      	ldr	r3, [r7, #12]
 8026ce0:	431a      	orrs	r2, r3
 8026ce2:	687b      	ldr	r3, [r7, #4]
 8026ce4:	681b      	ldr	r3, [r3, #0]
 8026ce6:	430a      	orrs	r2, r1
 8026ce8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026cea:	687b      	ldr	r3, [r7, #4]
 8026cec:	681b      	ldr	r3, [r3, #0]
 8026cee:	68d9      	ldr	r1, [r3, #12]
 8026cf0:	687b      	ldr	r3, [r7, #4]
 8026cf2:	681a      	ldr	r2, [r3, #0]
 8026cf4:	4b3e      	ldr	r3, [pc, #248]	; (8026df0 <HAL_LTDC_Init+0x19c>)
 8026cf6:	400b      	ands	r3, r1
 8026cf8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026cfa:	687b      	ldr	r3, [r7, #4]
 8026cfc:	69db      	ldr	r3, [r3, #28]
 8026cfe:	041b      	lsls	r3, r3, #16
 8026d00:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026d02:	687b      	ldr	r3, [r7, #4]
 8026d04:	681b      	ldr	r3, [r3, #0]
 8026d06:	68d9      	ldr	r1, [r3, #12]
 8026d08:	687b      	ldr	r3, [r7, #4]
 8026d0a:	6a1a      	ldr	r2, [r3, #32]
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	431a      	orrs	r2, r3
 8026d10:	687b      	ldr	r3, [r7, #4]
 8026d12:	681b      	ldr	r3, [r3, #0]
 8026d14:	430a      	orrs	r2, r1
 8026d16:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026d18:	687b      	ldr	r3, [r7, #4]
 8026d1a:	681b      	ldr	r3, [r3, #0]
 8026d1c:	6919      	ldr	r1, [r3, #16]
 8026d1e:	687b      	ldr	r3, [r7, #4]
 8026d20:	681a      	ldr	r2, [r3, #0]
 8026d22:	4b33      	ldr	r3, [pc, #204]	; (8026df0 <HAL_LTDC_Init+0x19c>)
 8026d24:	400b      	ands	r3, r1
 8026d26:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026d28:	687b      	ldr	r3, [r7, #4]
 8026d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d2c:	041b      	lsls	r3, r3, #16
 8026d2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026d30:	687b      	ldr	r3, [r7, #4]
 8026d32:	681b      	ldr	r3, [r3, #0]
 8026d34:	6919      	ldr	r1, [r3, #16]
 8026d36:	687b      	ldr	r3, [r7, #4]
 8026d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026d3a:	68fb      	ldr	r3, [r7, #12]
 8026d3c:	431a      	orrs	r2, r3
 8026d3e:	687b      	ldr	r3, [r7, #4]
 8026d40:	681b      	ldr	r3, [r3, #0]
 8026d42:	430a      	orrs	r2, r1
 8026d44:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026d46:	687b      	ldr	r3, [r7, #4]
 8026d48:	681b      	ldr	r3, [r3, #0]
 8026d4a:	6959      	ldr	r1, [r3, #20]
 8026d4c:	687b      	ldr	r3, [r7, #4]
 8026d4e:	681a      	ldr	r2, [r3, #0]
 8026d50:	4b27      	ldr	r3, [pc, #156]	; (8026df0 <HAL_LTDC_Init+0x19c>)
 8026d52:	400b      	ands	r3, r1
 8026d54:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026d56:	687b      	ldr	r3, [r7, #4]
 8026d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d5a:	041b      	lsls	r3, r3, #16
 8026d5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8026d5e:	687b      	ldr	r3, [r7, #4]
 8026d60:	681b      	ldr	r3, [r3, #0]
 8026d62:	6959      	ldr	r1, [r3, #20]
 8026d64:	687b      	ldr	r3, [r7, #4]
 8026d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026d68:	68fb      	ldr	r3, [r7, #12]
 8026d6a:	431a      	orrs	r2, r3
 8026d6c:	687b      	ldr	r3, [r7, #4]
 8026d6e:	681b      	ldr	r3, [r3, #0]
 8026d70:	430a      	orrs	r2, r1
 8026d72:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026d74:	687b      	ldr	r3, [r7, #4]
 8026d76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026d7a:	021b      	lsls	r3, r3, #8
 8026d7c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8026d7e:	687b      	ldr	r3, [r7, #4]
 8026d80:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026d84:	041b      	lsls	r3, r3, #16
 8026d86:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	681b      	ldr	r3, [r3, #0]
 8026d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d8e:	687b      	ldr	r3, [r7, #4]
 8026d90:	681b      	ldr	r3, [r3, #0]
 8026d92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026d98:	687b      	ldr	r3, [r7, #4]
 8026d9a:	681b      	ldr	r3, [r3, #0]
 8026d9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026d9e:	68ba      	ldr	r2, [r7, #8]
 8026da0:	68fb      	ldr	r3, [r7, #12]
 8026da2:	4313      	orrs	r3, r2
 8026da4:	687a      	ldr	r2, [r7, #4]
 8026da6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026daa:	431a      	orrs	r2, r3
 8026dac:	687b      	ldr	r3, [r7, #4]
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	430a      	orrs	r2, r1
 8026db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026db4:	687b      	ldr	r3, [r7, #4]
 8026db6:	681b      	ldr	r3, [r3, #0]
 8026db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	f042 0206 	orr.w	r2, r2, #6
 8026dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	681b      	ldr	r3, [r3, #0]
 8026dc8:	699a      	ldr	r2, [r3, #24]
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	681b      	ldr	r3, [r3, #0]
 8026dce:	f042 0201 	orr.w	r2, r2, #1
 8026dd2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026dd4:	687b      	ldr	r3, [r7, #4]
 8026dd6:	2200      	movs	r2, #0
 8026dd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026ddc:	687b      	ldr	r3, [r7, #4]
 8026dde:	2201      	movs	r2, #1
 8026de0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026de4:	2300      	movs	r3, #0
}
 8026de6:	4618      	mov	r0, r3
 8026de8:	3710      	adds	r7, #16
 8026dea:	46bd      	mov	sp, r7
 8026dec:	bd80      	pop	{r7, pc}
 8026dee:	bf00      	nop
 8026df0:	f000f800 	.word	0xf000f800

08026df4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026df4:	b580      	push	{r7, lr}
 8026df6:	b084      	sub	sp, #16
 8026df8:	af00      	add	r7, sp, #0
 8026dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026dfc:	687b      	ldr	r3, [r7, #4]
 8026dfe:	681b      	ldr	r3, [r3, #0]
 8026e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026e02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026e04:	687b      	ldr	r3, [r7, #4]
 8026e06:	681b      	ldr	r3, [r3, #0]
 8026e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026e0a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026e0c:	68fb      	ldr	r3, [r7, #12]
 8026e0e:	f003 0304 	and.w	r3, r3, #4
 8026e12:	2b00      	cmp	r3, #0
 8026e14:	d023      	beq.n	8026e5e <HAL_LTDC_IRQHandler+0x6a>
 8026e16:	68bb      	ldr	r3, [r7, #8]
 8026e18:	f003 0304 	and.w	r3, r3, #4
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	d01e      	beq.n	8026e5e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026e20:	687b      	ldr	r3, [r7, #4]
 8026e22:	681b      	ldr	r3, [r3, #0]
 8026e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e26:	687b      	ldr	r3, [r7, #4]
 8026e28:	681b      	ldr	r3, [r3, #0]
 8026e2a:	f022 0204 	bic.w	r2, r2, #4
 8026e2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026e30:	687b      	ldr	r3, [r7, #4]
 8026e32:	681b      	ldr	r3, [r3, #0]
 8026e34:	2204      	movs	r2, #4
 8026e36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026e38:	687b      	ldr	r3, [r7, #4]
 8026e3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026e3e:	f043 0201 	orr.w	r2, r3, #1
 8026e42:	687b      	ldr	r3, [r7, #4]
 8026e44:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026e48:	687b      	ldr	r3, [r7, #4]
 8026e4a:	2204      	movs	r2, #4
 8026e4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e50:	687b      	ldr	r3, [r7, #4]
 8026e52:	2200      	movs	r2, #0
 8026e54:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026e58:	6878      	ldr	r0, [r7, #4]
 8026e5a:	f000 f86f 	bl	8026f3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026e5e:	68fb      	ldr	r3, [r7, #12]
 8026e60:	f003 0302 	and.w	r3, r3, #2
 8026e64:	2b00      	cmp	r3, #0
 8026e66:	d023      	beq.n	8026eb0 <HAL_LTDC_IRQHandler+0xbc>
 8026e68:	68bb      	ldr	r3, [r7, #8]
 8026e6a:	f003 0302 	and.w	r3, r3, #2
 8026e6e:	2b00      	cmp	r3, #0
 8026e70:	d01e      	beq.n	8026eb0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026e72:	687b      	ldr	r3, [r7, #4]
 8026e74:	681b      	ldr	r3, [r3, #0]
 8026e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e78:	687b      	ldr	r3, [r7, #4]
 8026e7a:	681b      	ldr	r3, [r3, #0]
 8026e7c:	f022 0202 	bic.w	r2, r2, #2
 8026e80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026e82:	687b      	ldr	r3, [r7, #4]
 8026e84:	681b      	ldr	r3, [r3, #0]
 8026e86:	2202      	movs	r2, #2
 8026e88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026e90:	f043 0202 	orr.w	r2, r3, #2
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026e9a:	687b      	ldr	r3, [r7, #4]
 8026e9c:	2204      	movs	r2, #4
 8026e9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026ea2:	687b      	ldr	r3, [r7, #4]
 8026ea4:	2200      	movs	r2, #0
 8026ea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026eaa:	6878      	ldr	r0, [r7, #4]
 8026eac:	f000 f846 	bl	8026f3c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026eb0:	68fb      	ldr	r3, [r7, #12]
 8026eb2:	f003 0301 	and.w	r3, r3, #1
 8026eb6:	2b00      	cmp	r3, #0
 8026eb8:	d01b      	beq.n	8026ef2 <HAL_LTDC_IRQHandler+0xfe>
 8026eba:	68bb      	ldr	r3, [r7, #8]
 8026ebc:	f003 0301 	and.w	r3, r3, #1
 8026ec0:	2b00      	cmp	r3, #0
 8026ec2:	d016      	beq.n	8026ef2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	681b      	ldr	r3, [r3, #0]
 8026ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026eca:	687b      	ldr	r3, [r7, #4]
 8026ecc:	681b      	ldr	r3, [r3, #0]
 8026ece:	f022 0201 	bic.w	r2, r2, #1
 8026ed2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	681b      	ldr	r3, [r3, #0]
 8026ed8:	2201      	movs	r2, #1
 8026eda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	2201      	movs	r2, #1
 8026ee0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026ee4:	687b      	ldr	r3, [r7, #4]
 8026ee6:	2200      	movs	r2, #0
 8026ee8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8026eec:	6878      	ldr	r0, [r7, #4]
 8026eee:	f000 f82f 	bl	8026f50 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026ef2:	68fb      	ldr	r3, [r7, #12]
 8026ef4:	f003 0308 	and.w	r3, r3, #8
 8026ef8:	2b00      	cmp	r3, #0
 8026efa:	d01b      	beq.n	8026f34 <HAL_LTDC_IRQHandler+0x140>
 8026efc:	68bb      	ldr	r3, [r7, #8]
 8026efe:	f003 0308 	and.w	r3, r3, #8
 8026f02:	2b00      	cmp	r3, #0
 8026f04:	d016      	beq.n	8026f34 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026f06:	687b      	ldr	r3, [r7, #4]
 8026f08:	681b      	ldr	r3, [r3, #0]
 8026f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	681b      	ldr	r3, [r3, #0]
 8026f10:	f022 0208 	bic.w	r2, r2, #8
 8026f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026f16:	687b      	ldr	r3, [r7, #4]
 8026f18:	681b      	ldr	r3, [r3, #0]
 8026f1a:	2208      	movs	r2, #8
 8026f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026f1e:	687b      	ldr	r3, [r7, #4]
 8026f20:	2201      	movs	r2, #1
 8026f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026f26:	687b      	ldr	r3, [r7, #4]
 8026f28:	2200      	movs	r2, #0
 8026f2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026f2e:	6878      	ldr	r0, [r7, #4]
 8026f30:	f000 f818 	bl	8026f64 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026f34:	bf00      	nop
 8026f36:	3710      	adds	r7, #16
 8026f38:	46bd      	mov	sp, r7
 8026f3a:	bd80      	pop	{r7, pc}

08026f3c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f3c:	b480      	push	{r7}
 8026f3e:	b083      	sub	sp, #12
 8026f40:	af00      	add	r7, sp, #0
 8026f42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026f44:	bf00      	nop
 8026f46:	370c      	adds	r7, #12
 8026f48:	46bd      	mov	sp, r7
 8026f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f4e:	4770      	bx	lr

08026f50 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f50:	b480      	push	{r7}
 8026f52:	b083      	sub	sp, #12
 8026f54:	af00      	add	r7, sp, #0
 8026f56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026f58:	bf00      	nop
 8026f5a:	370c      	adds	r7, #12
 8026f5c:	46bd      	mov	sp, r7
 8026f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f62:	4770      	bx	lr

08026f64 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f64:	b480      	push	{r7}
 8026f66:	b083      	sub	sp, #12
 8026f68:	af00      	add	r7, sp, #0
 8026f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026f6c:	bf00      	nop
 8026f6e:	370c      	adds	r7, #12
 8026f70:	46bd      	mov	sp, r7
 8026f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f76:	4770      	bx	lr

08026f78 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026f78:	b5b0      	push	{r4, r5, r7, lr}
 8026f7a:	b084      	sub	sp, #16
 8026f7c:	af00      	add	r7, sp, #0
 8026f7e:	60f8      	str	r0, [r7, #12]
 8026f80:	60b9      	str	r1, [r7, #8]
 8026f82:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f84:	68fb      	ldr	r3, [r7, #12]
 8026f86:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026f8a:	2b01      	cmp	r3, #1
 8026f8c:	d101      	bne.n	8026f92 <HAL_LTDC_ConfigLayer+0x1a>
 8026f8e:	2302      	movs	r3, #2
 8026f90:	e02c      	b.n	8026fec <HAL_LTDC_ConfigLayer+0x74>
 8026f92:	68fb      	ldr	r3, [r7, #12]
 8026f94:	2201      	movs	r2, #1
 8026f96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026f9a:	68fb      	ldr	r3, [r7, #12]
 8026f9c:	2202      	movs	r2, #2
 8026f9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026fa2:	68fa      	ldr	r2, [r7, #12]
 8026fa4:	687b      	ldr	r3, [r7, #4]
 8026fa6:	2134      	movs	r1, #52	; 0x34
 8026fa8:	fb01 f303 	mul.w	r3, r1, r3
 8026fac:	4413      	add	r3, r2
 8026fae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026fb2:	68bb      	ldr	r3, [r7, #8]
 8026fb4:	4614      	mov	r4, r2
 8026fb6:	461d      	mov	r5, r3
 8026fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fc4:	682b      	ldr	r3, [r5, #0]
 8026fc6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026fc8:	687a      	ldr	r2, [r7, #4]
 8026fca:	68b9      	ldr	r1, [r7, #8]
 8026fcc:	68f8      	ldr	r0, [r7, #12]
 8026fce:	f000 f8b9 	bl	8027144 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026fd2:	68fb      	ldr	r3, [r7, #12]
 8026fd4:	681b      	ldr	r3, [r3, #0]
 8026fd6:	2201      	movs	r2, #1
 8026fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026fda:	68fb      	ldr	r3, [r7, #12]
 8026fdc:	2201      	movs	r2, #1
 8026fde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026fe2:	68fb      	ldr	r3, [r7, #12]
 8026fe4:	2200      	movs	r2, #0
 8026fe6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026fea:	2300      	movs	r3, #0
}
 8026fec:	4618      	mov	r0, r3
 8026fee:	3710      	adds	r7, #16
 8026ff0:	46bd      	mov	sp, r7
 8026ff2:	bdb0      	pop	{r4, r5, r7, pc}

08026ff4 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026ff4:	b480      	push	{r7}
 8026ff6:	b085      	sub	sp, #20
 8026ff8:	af00      	add	r7, sp, #0
 8026ffa:	60f8      	str	r0, [r7, #12]
 8026ffc:	60b9      	str	r1, [r7, #8]
 8026ffe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8027000:	68fb      	ldr	r3, [r7, #12]
 8027002:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8027006:	2b01      	cmp	r3, #1
 8027008:	d101      	bne.n	802700e <HAL_LTDC_ConfigColorKeying+0x1a>
 802700a:	2302      	movs	r3, #2
 802700c:	e030      	b.n	8027070 <HAL_LTDC_ConfigColorKeying+0x7c>
 802700e:	68fb      	ldr	r3, [r7, #12]
 8027010:	2201      	movs	r2, #1
 8027012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8027016:	68fb      	ldr	r3, [r7, #12]
 8027018:	2202      	movs	r2, #2
 802701a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 802701e:	68fb      	ldr	r3, [r7, #12]
 8027020:	681b      	ldr	r3, [r3, #0]
 8027022:	461a      	mov	r2, r3
 8027024:	687b      	ldr	r3, [r7, #4]
 8027026:	01db      	lsls	r3, r3, #7
 8027028:	4413      	add	r3, r2
 802702a:	3384      	adds	r3, #132	; 0x84
 802702c:	68db      	ldr	r3, [r3, #12]
 802702e:	68fa      	ldr	r2, [r7, #12]
 8027030:	6812      	ldr	r2, [r2, #0]
 8027032:	4611      	mov	r1, r2
 8027034:	687a      	ldr	r2, [r7, #4]
 8027036:	01d2      	lsls	r2, r2, #7
 8027038:	440a      	add	r2, r1
 802703a:	3284      	adds	r2, #132	; 0x84
 802703c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8027040:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8027042:	68fb      	ldr	r3, [r7, #12]
 8027044:	681b      	ldr	r3, [r3, #0]
 8027046:	461a      	mov	r2, r3
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	01db      	lsls	r3, r3, #7
 802704c:	4413      	add	r3, r2
 802704e:	3384      	adds	r3, #132	; 0x84
 8027050:	461a      	mov	r2, r3
 8027052:	68bb      	ldr	r3, [r7, #8]
 8027054:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8027056:	68fb      	ldr	r3, [r7, #12]
 8027058:	681b      	ldr	r3, [r3, #0]
 802705a:	2201      	movs	r2, #1
 802705c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802705e:	68fb      	ldr	r3, [r7, #12]
 8027060:	2201      	movs	r2, #1
 8027062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	2200      	movs	r2, #0
 802706a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802706e:	2300      	movs	r3, #0
}
 8027070:	4618      	mov	r0, r3
 8027072:	3714      	adds	r7, #20
 8027074:	46bd      	mov	sp, r7
 8027076:	f85d 7b04 	ldr.w	r7, [sp], #4
 802707a:	4770      	bx	lr

0802707c <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 802707c:	b480      	push	{r7}
 802707e:	b083      	sub	sp, #12
 8027080:	af00      	add	r7, sp, #0
 8027082:	6078      	str	r0, [r7, #4]
 8027084:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802708c:	2b01      	cmp	r3, #1
 802708e:	d101      	bne.n	8027094 <HAL_LTDC_EnableColorKeying+0x18>
 8027090:	2302      	movs	r3, #2
 8027092:	e026      	b.n	80270e2 <HAL_LTDC_EnableColorKeying+0x66>
 8027094:	687b      	ldr	r3, [r7, #4]
 8027096:	2201      	movs	r2, #1
 8027098:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	2202      	movs	r2, #2
 80270a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80270a4:	687b      	ldr	r3, [r7, #4]
 80270a6:	681b      	ldr	r3, [r3, #0]
 80270a8:	461a      	mov	r2, r3
 80270aa:	683b      	ldr	r3, [r7, #0]
 80270ac:	01db      	lsls	r3, r3, #7
 80270ae:	4413      	add	r3, r2
 80270b0:	3384      	adds	r3, #132	; 0x84
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	687a      	ldr	r2, [r7, #4]
 80270b6:	6812      	ldr	r2, [r2, #0]
 80270b8:	4611      	mov	r1, r2
 80270ba:	683a      	ldr	r2, [r7, #0]
 80270bc:	01d2      	lsls	r2, r2, #7
 80270be:	440a      	add	r2, r1
 80270c0:	3284      	adds	r2, #132	; 0x84
 80270c2:	f043 0302 	orr.w	r3, r3, #2
 80270c6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80270c8:	687b      	ldr	r3, [r7, #4]
 80270ca:	681b      	ldr	r3, [r3, #0]
 80270cc:	2201      	movs	r2, #1
 80270ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80270d0:	687b      	ldr	r3, [r7, #4]
 80270d2:	2201      	movs	r2, #1
 80270d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80270d8:	687b      	ldr	r3, [r7, #4]
 80270da:	2200      	movs	r2, #0
 80270dc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80270e0:	2300      	movs	r3, #0
}
 80270e2:	4618      	mov	r0, r3
 80270e4:	370c      	adds	r7, #12
 80270e6:	46bd      	mov	sp, r7
 80270e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270ec:	4770      	bx	lr
	...

080270f0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80270f0:	b480      	push	{r7}
 80270f2:	b083      	sub	sp, #12
 80270f4:	af00      	add	r7, sp, #0
 80270f6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80270f8:	687b      	ldr	r3, [r7, #4]
 80270fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80270fe:	2b01      	cmp	r3, #1
 8027100:	d101      	bne.n	8027106 <HAL_LTDC_EnableDither+0x16>
 8027102:	2302      	movs	r3, #2
 8027104:	e016      	b.n	8027134 <HAL_LTDC_EnableDither+0x44>
 8027106:	687b      	ldr	r3, [r7, #4]
 8027108:	2201      	movs	r2, #1
 802710a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	2202      	movs	r2, #2
 8027112:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8027116:	4b0a      	ldr	r3, [pc, #40]	; (8027140 <HAL_LTDC_EnableDither+0x50>)
 8027118:	699b      	ldr	r3, [r3, #24]
 802711a:	4a09      	ldr	r2, [pc, #36]	; (8027140 <HAL_LTDC_EnableDither+0x50>)
 802711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027120:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8027122:	687b      	ldr	r3, [r7, #4]
 8027124:	2201      	movs	r2, #1
 8027126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802712a:	687b      	ldr	r3, [r7, #4]
 802712c:	2200      	movs	r2, #0
 802712e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8027132:	2300      	movs	r3, #0
}
 8027134:	4618      	mov	r0, r3
 8027136:	370c      	adds	r7, #12
 8027138:	46bd      	mov	sp, r7
 802713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802713e:	4770      	bx	lr
 8027140:	40016800 	.word	0x40016800

08027144 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8027144:	b480      	push	{r7}
 8027146:	b089      	sub	sp, #36	; 0x24
 8027148:	af00      	add	r7, sp, #0
 802714a:	60f8      	str	r0, [r7, #12]
 802714c:	60b9      	str	r1, [r7, #8]
 802714e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8027150:	68bb      	ldr	r3, [r7, #8]
 8027152:	685a      	ldr	r2, [r3, #4]
 8027154:	68fb      	ldr	r3, [r7, #12]
 8027156:	681b      	ldr	r3, [r3, #0]
 8027158:	68db      	ldr	r3, [r3, #12]
 802715a:	0c1b      	lsrs	r3, r3, #16
 802715c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027160:	4413      	add	r3, r2
 8027162:	041b      	lsls	r3, r3, #16
 8027164:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8027166:	68fb      	ldr	r3, [r7, #12]
 8027168:	681b      	ldr	r3, [r3, #0]
 802716a:	461a      	mov	r2, r3
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	01db      	lsls	r3, r3, #7
 8027170:	4413      	add	r3, r2
 8027172:	3384      	adds	r3, #132	; 0x84
 8027174:	685b      	ldr	r3, [r3, #4]
 8027176:	68fa      	ldr	r2, [r7, #12]
 8027178:	6812      	ldr	r2, [r2, #0]
 802717a:	4611      	mov	r1, r2
 802717c:	687a      	ldr	r2, [r7, #4]
 802717e:	01d2      	lsls	r2, r2, #7
 8027180:	440a      	add	r2, r1
 8027182:	3284      	adds	r2, #132	; 0x84
 8027184:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8027188:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802718a:	68bb      	ldr	r3, [r7, #8]
 802718c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802718e:	68fb      	ldr	r3, [r7, #12]
 8027190:	681b      	ldr	r3, [r3, #0]
 8027192:	68db      	ldr	r3, [r3, #12]
 8027194:	0c1b      	lsrs	r3, r3, #16
 8027196:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802719a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802719c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802719e:	68fb      	ldr	r3, [r7, #12]
 80271a0:	681b      	ldr	r3, [r3, #0]
 80271a2:	4619      	mov	r1, r3
 80271a4:	687b      	ldr	r3, [r7, #4]
 80271a6:	01db      	lsls	r3, r3, #7
 80271a8:	440b      	add	r3, r1
 80271aa:	3384      	adds	r3, #132	; 0x84
 80271ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80271ae:	69fb      	ldr	r3, [r7, #28]
 80271b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80271b4:	68bb      	ldr	r3, [r7, #8]
 80271b6:	68da      	ldr	r2, [r3, #12]
 80271b8:	68fb      	ldr	r3, [r7, #12]
 80271ba:	681b      	ldr	r3, [r3, #0]
 80271bc:	68db      	ldr	r3, [r3, #12]
 80271be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80271c2:	4413      	add	r3, r2
 80271c4:	041b      	lsls	r3, r3, #16
 80271c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80271c8:	68fb      	ldr	r3, [r7, #12]
 80271ca:	681b      	ldr	r3, [r3, #0]
 80271cc:	461a      	mov	r2, r3
 80271ce:	687b      	ldr	r3, [r7, #4]
 80271d0:	01db      	lsls	r3, r3, #7
 80271d2:	4413      	add	r3, r2
 80271d4:	3384      	adds	r3, #132	; 0x84
 80271d6:	689b      	ldr	r3, [r3, #8]
 80271d8:	68fa      	ldr	r2, [r7, #12]
 80271da:	6812      	ldr	r2, [r2, #0]
 80271dc:	4611      	mov	r1, r2
 80271de:	687a      	ldr	r2, [r7, #4]
 80271e0:	01d2      	lsls	r2, r2, #7
 80271e2:	440a      	add	r2, r1
 80271e4:	3284      	adds	r2, #132	; 0x84
 80271e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80271ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80271ec:	68bb      	ldr	r3, [r7, #8]
 80271ee:	689a      	ldr	r2, [r3, #8]
 80271f0:	68fb      	ldr	r3, [r7, #12]
 80271f2:	681b      	ldr	r3, [r3, #0]
 80271f4:	68db      	ldr	r3, [r3, #12]
 80271f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80271fa:	4413      	add	r3, r2
 80271fc:	1c5a      	adds	r2, r3, #1
 80271fe:	68fb      	ldr	r3, [r7, #12]
 8027200:	681b      	ldr	r3, [r3, #0]
 8027202:	4619      	mov	r1, r3
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	01db      	lsls	r3, r3, #7
 8027208:	440b      	add	r3, r1
 802720a:	3384      	adds	r3, #132	; 0x84
 802720c:	4619      	mov	r1, r3
 802720e:	69fb      	ldr	r3, [r7, #28]
 8027210:	4313      	orrs	r3, r2
 8027212:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8027214:	68fb      	ldr	r3, [r7, #12]
 8027216:	681b      	ldr	r3, [r3, #0]
 8027218:	461a      	mov	r2, r3
 802721a:	687b      	ldr	r3, [r7, #4]
 802721c:	01db      	lsls	r3, r3, #7
 802721e:	4413      	add	r3, r2
 8027220:	3384      	adds	r3, #132	; 0x84
 8027222:	691b      	ldr	r3, [r3, #16]
 8027224:	68fa      	ldr	r2, [r7, #12]
 8027226:	6812      	ldr	r2, [r2, #0]
 8027228:	4611      	mov	r1, r2
 802722a:	687a      	ldr	r2, [r7, #4]
 802722c:	01d2      	lsls	r2, r2, #7
 802722e:	440a      	add	r2, r1
 8027230:	3284      	adds	r2, #132	; 0x84
 8027232:	f023 0307 	bic.w	r3, r3, #7
 8027236:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8027238:	68fb      	ldr	r3, [r7, #12]
 802723a:	681b      	ldr	r3, [r3, #0]
 802723c:	461a      	mov	r2, r3
 802723e:	687b      	ldr	r3, [r7, #4]
 8027240:	01db      	lsls	r3, r3, #7
 8027242:	4413      	add	r3, r2
 8027244:	3384      	adds	r3, #132	; 0x84
 8027246:	461a      	mov	r2, r3
 8027248:	68bb      	ldr	r3, [r7, #8]
 802724a:	691b      	ldr	r3, [r3, #16]
 802724c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802724e:	68bb      	ldr	r3, [r7, #8]
 8027250:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8027254:	021b      	lsls	r3, r3, #8
 8027256:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8027258:	68bb      	ldr	r3, [r7, #8]
 802725a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802725e:	041b      	lsls	r3, r3, #16
 8027260:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8027262:	68bb      	ldr	r3, [r7, #8]
 8027264:	699b      	ldr	r3, [r3, #24]
 8027266:	061b      	lsls	r3, r3, #24
 8027268:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 802726a:	68fb      	ldr	r3, [r7, #12]
 802726c:	681b      	ldr	r3, [r3, #0]
 802726e:	461a      	mov	r2, r3
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	01db      	lsls	r3, r3, #7
 8027274:	4413      	add	r3, r2
 8027276:	3384      	adds	r3, #132	; 0x84
 8027278:	699b      	ldr	r3, [r3, #24]
 802727a:	68fb      	ldr	r3, [r7, #12]
 802727c:	681b      	ldr	r3, [r3, #0]
 802727e:	461a      	mov	r2, r3
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	01db      	lsls	r3, r3, #7
 8027284:	4413      	add	r3, r2
 8027286:	3384      	adds	r3, #132	; 0x84
 8027288:	461a      	mov	r2, r3
 802728a:	2300      	movs	r3, #0
 802728c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 802728e:	68bb      	ldr	r3, [r7, #8]
 8027290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8027294:	461a      	mov	r2, r3
 8027296:	69fb      	ldr	r3, [r7, #28]
 8027298:	431a      	orrs	r2, r3
 802729a:	69bb      	ldr	r3, [r7, #24]
 802729c:	431a      	orrs	r2, r3
 802729e:	68fb      	ldr	r3, [r7, #12]
 80272a0:	681b      	ldr	r3, [r3, #0]
 80272a2:	4619      	mov	r1, r3
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	01db      	lsls	r3, r3, #7
 80272a8:	440b      	add	r3, r1
 80272aa:	3384      	adds	r3, #132	; 0x84
 80272ac:	4619      	mov	r1, r3
 80272ae:	697b      	ldr	r3, [r7, #20]
 80272b0:	4313      	orrs	r3, r2
 80272b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80272b4:	68fb      	ldr	r3, [r7, #12]
 80272b6:	681b      	ldr	r3, [r3, #0]
 80272b8:	461a      	mov	r2, r3
 80272ba:	687b      	ldr	r3, [r7, #4]
 80272bc:	01db      	lsls	r3, r3, #7
 80272be:	4413      	add	r3, r2
 80272c0:	3384      	adds	r3, #132	; 0x84
 80272c2:	695b      	ldr	r3, [r3, #20]
 80272c4:	68fa      	ldr	r2, [r7, #12]
 80272c6:	6812      	ldr	r2, [r2, #0]
 80272c8:	4611      	mov	r1, r2
 80272ca:	687a      	ldr	r2, [r7, #4]
 80272cc:	01d2      	lsls	r2, r2, #7
 80272ce:	440a      	add	r2, r1
 80272d0:	3284      	adds	r2, #132	; 0x84
 80272d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80272d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80272d8:	68fb      	ldr	r3, [r7, #12]
 80272da:	681b      	ldr	r3, [r3, #0]
 80272dc:	461a      	mov	r2, r3
 80272de:	687b      	ldr	r3, [r7, #4]
 80272e0:	01db      	lsls	r3, r3, #7
 80272e2:	4413      	add	r3, r2
 80272e4:	3384      	adds	r3, #132	; 0x84
 80272e6:	461a      	mov	r2, r3
 80272e8:	68bb      	ldr	r3, [r7, #8]
 80272ea:	695b      	ldr	r3, [r3, #20]
 80272ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80272ee:	68fb      	ldr	r3, [r7, #12]
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	461a      	mov	r2, r3
 80272f4:	687b      	ldr	r3, [r7, #4]
 80272f6:	01db      	lsls	r3, r3, #7
 80272f8:	4413      	add	r3, r2
 80272fa:	3384      	adds	r3, #132	; 0x84
 80272fc:	69db      	ldr	r3, [r3, #28]
 80272fe:	68fa      	ldr	r2, [r7, #12]
 8027300:	6812      	ldr	r2, [r2, #0]
 8027302:	4611      	mov	r1, r2
 8027304:	687a      	ldr	r2, [r7, #4]
 8027306:	01d2      	lsls	r2, r2, #7
 8027308:	440a      	add	r2, r1
 802730a:	3284      	adds	r2, #132	; 0x84
 802730c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8027310:	f023 0307 	bic.w	r3, r3, #7
 8027314:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8027316:	68bb      	ldr	r3, [r7, #8]
 8027318:	69da      	ldr	r2, [r3, #28]
 802731a:	68bb      	ldr	r3, [r7, #8]
 802731c:	6a1b      	ldr	r3, [r3, #32]
 802731e:	68f9      	ldr	r1, [r7, #12]
 8027320:	6809      	ldr	r1, [r1, #0]
 8027322:	4608      	mov	r0, r1
 8027324:	6879      	ldr	r1, [r7, #4]
 8027326:	01c9      	lsls	r1, r1, #7
 8027328:	4401      	add	r1, r0
 802732a:	3184      	adds	r1, #132	; 0x84
 802732c:	4313      	orrs	r3, r2
 802732e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8027330:	68fb      	ldr	r3, [r7, #12]
 8027332:	681b      	ldr	r3, [r3, #0]
 8027334:	461a      	mov	r2, r3
 8027336:	687b      	ldr	r3, [r7, #4]
 8027338:	01db      	lsls	r3, r3, #7
 802733a:	4413      	add	r3, r2
 802733c:	3384      	adds	r3, #132	; 0x84
 802733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027340:	68fb      	ldr	r3, [r7, #12]
 8027342:	681b      	ldr	r3, [r3, #0]
 8027344:	461a      	mov	r2, r3
 8027346:	687b      	ldr	r3, [r7, #4]
 8027348:	01db      	lsls	r3, r3, #7
 802734a:	4413      	add	r3, r2
 802734c:	3384      	adds	r3, #132	; 0x84
 802734e:	461a      	mov	r2, r3
 8027350:	2300      	movs	r3, #0
 8027352:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8027354:	68fb      	ldr	r3, [r7, #12]
 8027356:	681b      	ldr	r3, [r3, #0]
 8027358:	461a      	mov	r2, r3
 802735a:	687b      	ldr	r3, [r7, #4]
 802735c:	01db      	lsls	r3, r3, #7
 802735e:	4413      	add	r3, r2
 8027360:	3384      	adds	r3, #132	; 0x84
 8027362:	461a      	mov	r2, r3
 8027364:	68bb      	ldr	r3, [r7, #8]
 8027366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027368:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802736a:	68bb      	ldr	r3, [r7, #8]
 802736c:	691b      	ldr	r3, [r3, #16]
 802736e:	2b00      	cmp	r3, #0
 8027370:	d102      	bne.n	8027378 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8027372:	2304      	movs	r3, #4
 8027374:	61fb      	str	r3, [r7, #28]
 8027376:	e01b      	b.n	80273b0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8027378:	68bb      	ldr	r3, [r7, #8]
 802737a:	691b      	ldr	r3, [r3, #16]
 802737c:	2b01      	cmp	r3, #1
 802737e:	d102      	bne.n	8027386 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8027380:	2303      	movs	r3, #3
 8027382:	61fb      	str	r3, [r7, #28]
 8027384:	e014      	b.n	80273b0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8027386:	68bb      	ldr	r3, [r7, #8]
 8027388:	691b      	ldr	r3, [r3, #16]
 802738a:	2b04      	cmp	r3, #4
 802738c:	d00b      	beq.n	80273a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802738e:	68bb      	ldr	r3, [r7, #8]
 8027390:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8027392:	2b02      	cmp	r3, #2
 8027394:	d007      	beq.n	80273a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8027396:	68bb      	ldr	r3, [r7, #8]
 8027398:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802739a:	2b03      	cmp	r3, #3
 802739c:	d003      	beq.n	80273a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 802739e:	68bb      	ldr	r3, [r7, #8]
 80273a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80273a2:	2b07      	cmp	r3, #7
 80273a4:	d102      	bne.n	80273ac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80273a6:	2302      	movs	r3, #2
 80273a8:	61fb      	str	r3, [r7, #28]
 80273aa:	e001      	b.n	80273b0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80273ac:	2301      	movs	r3, #1
 80273ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80273b0:	68fb      	ldr	r3, [r7, #12]
 80273b2:	681b      	ldr	r3, [r3, #0]
 80273b4:	461a      	mov	r2, r3
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	01db      	lsls	r3, r3, #7
 80273ba:	4413      	add	r3, r2
 80273bc:	3384      	adds	r3, #132	; 0x84
 80273be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273c0:	68fa      	ldr	r2, [r7, #12]
 80273c2:	6812      	ldr	r2, [r2, #0]
 80273c4:	4611      	mov	r1, r2
 80273c6:	687a      	ldr	r2, [r7, #4]
 80273c8:	01d2      	lsls	r2, r2, #7
 80273ca:	440a      	add	r2, r1
 80273cc:	3284      	adds	r2, #132	; 0x84
 80273ce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80273d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80273d4:	68bb      	ldr	r3, [r7, #8]
 80273d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80273d8:	69fa      	ldr	r2, [r7, #28]
 80273da:	fb02 f303 	mul.w	r3, r2, r3
 80273de:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80273e0:	68bb      	ldr	r3, [r7, #8]
 80273e2:	6859      	ldr	r1, [r3, #4]
 80273e4:	68bb      	ldr	r3, [r7, #8]
 80273e6:	681b      	ldr	r3, [r3, #0]
 80273e8:	1acb      	subs	r3, r1, r3
 80273ea:	69f9      	ldr	r1, [r7, #28]
 80273ec:	fb01 f303 	mul.w	r3, r1, r3
 80273f0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80273f2:	68f9      	ldr	r1, [r7, #12]
 80273f4:	6809      	ldr	r1, [r1, #0]
 80273f6:	4608      	mov	r0, r1
 80273f8:	6879      	ldr	r1, [r7, #4]
 80273fa:	01c9      	lsls	r1, r1, #7
 80273fc:	4401      	add	r1, r0
 80273fe:	3184      	adds	r1, #132	; 0x84
 8027400:	4313      	orrs	r3, r2
 8027402:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8027404:	68fb      	ldr	r3, [r7, #12]
 8027406:	681b      	ldr	r3, [r3, #0]
 8027408:	461a      	mov	r2, r3
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	01db      	lsls	r3, r3, #7
 802740e:	4413      	add	r3, r2
 8027410:	3384      	adds	r3, #132	; 0x84
 8027412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027414:	68fa      	ldr	r2, [r7, #12]
 8027416:	6812      	ldr	r2, [r2, #0]
 8027418:	4611      	mov	r1, r2
 802741a:	687a      	ldr	r2, [r7, #4]
 802741c:	01d2      	lsls	r2, r2, #7
 802741e:	440a      	add	r2, r1
 8027420:	3284      	adds	r2, #132	; 0x84
 8027422:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027426:	f023 0307 	bic.w	r3, r3, #7
 802742a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 802742c:	68fb      	ldr	r3, [r7, #12]
 802742e:	681b      	ldr	r3, [r3, #0]
 8027430:	461a      	mov	r2, r3
 8027432:	687b      	ldr	r3, [r7, #4]
 8027434:	01db      	lsls	r3, r3, #7
 8027436:	4413      	add	r3, r2
 8027438:	3384      	adds	r3, #132	; 0x84
 802743a:	461a      	mov	r2, r3
 802743c:	68bb      	ldr	r3, [r7, #8]
 802743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027440:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8027442:	68fb      	ldr	r3, [r7, #12]
 8027444:	681b      	ldr	r3, [r3, #0]
 8027446:	461a      	mov	r2, r3
 8027448:	687b      	ldr	r3, [r7, #4]
 802744a:	01db      	lsls	r3, r3, #7
 802744c:	4413      	add	r3, r2
 802744e:	3384      	adds	r3, #132	; 0x84
 8027450:	681b      	ldr	r3, [r3, #0]
 8027452:	68fa      	ldr	r2, [r7, #12]
 8027454:	6812      	ldr	r2, [r2, #0]
 8027456:	4611      	mov	r1, r2
 8027458:	687a      	ldr	r2, [r7, #4]
 802745a:	01d2      	lsls	r2, r2, #7
 802745c:	440a      	add	r2, r1
 802745e:	3284      	adds	r2, #132	; 0x84
 8027460:	f043 0301 	orr.w	r3, r3, #1
 8027464:	6013      	str	r3, [r2, #0]
}
 8027466:	bf00      	nop
 8027468:	3724      	adds	r7, #36	; 0x24
 802746a:	46bd      	mov	sp, r7
 802746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027470:	4770      	bx	lr
	...

08027474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027474:	b580      	push	{r7, lr}
 8027476:	b086      	sub	sp, #24
 8027478:	af00      	add	r7, sp, #0
 802747a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 802747c:	687b      	ldr	r3, [r7, #4]
 802747e:	2b00      	cmp	r3, #0
 8027480:	d101      	bne.n	8027486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8027482:	2301      	movs	r3, #1
 8027484:	e267      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027486:	687b      	ldr	r3, [r7, #4]
 8027488:	681b      	ldr	r3, [r3, #0]
 802748a:	f003 0301 	and.w	r3, r3, #1
 802748e:	2b00      	cmp	r3, #0
 8027490:	d075      	beq.n	802757e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8027492:	4b88      	ldr	r3, [pc, #544]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027494:	689b      	ldr	r3, [r3, #8]
 8027496:	f003 030c 	and.w	r3, r3, #12
 802749a:	2b04      	cmp	r3, #4
 802749c:	d00c      	beq.n	80274b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802749e:	4b85      	ldr	r3, [pc, #532]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274a0:	689b      	ldr	r3, [r3, #8]
 80274a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80274a6:	2b08      	cmp	r3, #8
 80274a8:	d112      	bne.n	80274d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80274aa:	4b82      	ldr	r3, [pc, #520]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274ac:	685b      	ldr	r3, [r3, #4]
 80274ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80274b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80274b6:	d10b      	bne.n	80274d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80274b8:	4b7e      	ldr	r3, [pc, #504]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274ba:	681b      	ldr	r3, [r3, #0]
 80274bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80274c0:	2b00      	cmp	r3, #0
 80274c2:	d05b      	beq.n	802757c <HAL_RCC_OscConfig+0x108>
 80274c4:	687b      	ldr	r3, [r7, #4]
 80274c6:	685b      	ldr	r3, [r3, #4]
 80274c8:	2b00      	cmp	r3, #0
 80274ca:	d157      	bne.n	802757c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80274cc:	2301      	movs	r3, #1
 80274ce:	e242      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80274d0:	687b      	ldr	r3, [r7, #4]
 80274d2:	685b      	ldr	r3, [r3, #4]
 80274d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80274d8:	d106      	bne.n	80274e8 <HAL_RCC_OscConfig+0x74>
 80274da:	4b76      	ldr	r3, [pc, #472]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274dc:	681b      	ldr	r3, [r3, #0]
 80274de:	4a75      	ldr	r2, [pc, #468]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80274e4:	6013      	str	r3, [r2, #0]
 80274e6:	e01d      	b.n	8027524 <HAL_RCC_OscConfig+0xb0>
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	685b      	ldr	r3, [r3, #4]
 80274ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80274f0:	d10c      	bne.n	802750c <HAL_RCC_OscConfig+0x98>
 80274f2:	4b70      	ldr	r3, [pc, #448]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274f4:	681b      	ldr	r3, [r3, #0]
 80274f6:	4a6f      	ldr	r2, [pc, #444]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80274f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80274fc:	6013      	str	r3, [r2, #0]
 80274fe:	4b6d      	ldr	r3, [pc, #436]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027500:	681b      	ldr	r3, [r3, #0]
 8027502:	4a6c      	ldr	r2, [pc, #432]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027508:	6013      	str	r3, [r2, #0]
 802750a:	e00b      	b.n	8027524 <HAL_RCC_OscConfig+0xb0>
 802750c:	4b69      	ldr	r3, [pc, #420]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 802750e:	681b      	ldr	r3, [r3, #0]
 8027510:	4a68      	ldr	r2, [pc, #416]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027516:	6013      	str	r3, [r2, #0]
 8027518:	4b66      	ldr	r3, [pc, #408]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	4a65      	ldr	r2, [pc, #404]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 802751e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027524:	687b      	ldr	r3, [r7, #4]
 8027526:	685b      	ldr	r3, [r3, #4]
 8027528:	2b00      	cmp	r3, #0
 802752a:	d013      	beq.n	8027554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802752c:	f7fc f8a2 	bl	8023674 <HAL_GetTick>
 8027530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027532:	e008      	b.n	8027546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027534:	f7fc f89e 	bl	8023674 <HAL_GetTick>
 8027538:	4602      	mov	r2, r0
 802753a:	693b      	ldr	r3, [r7, #16]
 802753c:	1ad3      	subs	r3, r2, r3
 802753e:	2b64      	cmp	r3, #100	; 0x64
 8027540:	d901      	bls.n	8027546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027542:	2303      	movs	r3, #3
 8027544:	e207      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027546:	4b5b      	ldr	r3, [pc, #364]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027548:	681b      	ldr	r3, [r3, #0]
 802754a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802754e:	2b00      	cmp	r3, #0
 8027550:	d0f0      	beq.n	8027534 <HAL_RCC_OscConfig+0xc0>
 8027552:	e014      	b.n	802757e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027554:	f7fc f88e 	bl	8023674 <HAL_GetTick>
 8027558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802755a:	e008      	b.n	802756e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802755c:	f7fc f88a 	bl	8023674 <HAL_GetTick>
 8027560:	4602      	mov	r2, r0
 8027562:	693b      	ldr	r3, [r7, #16]
 8027564:	1ad3      	subs	r3, r2, r3
 8027566:	2b64      	cmp	r3, #100	; 0x64
 8027568:	d901      	bls.n	802756e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802756a:	2303      	movs	r3, #3
 802756c:	e1f3      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802756e:	4b51      	ldr	r3, [pc, #324]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027570:	681b      	ldr	r3, [r3, #0]
 8027572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027576:	2b00      	cmp	r3, #0
 8027578:	d1f0      	bne.n	802755c <HAL_RCC_OscConfig+0xe8>
 802757a:	e000      	b.n	802757e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802757c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	681b      	ldr	r3, [r3, #0]
 8027582:	f003 0302 	and.w	r3, r3, #2
 8027586:	2b00      	cmp	r3, #0
 8027588:	d063      	beq.n	8027652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802758a:	4b4a      	ldr	r3, [pc, #296]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 802758c:	689b      	ldr	r3, [r3, #8]
 802758e:	f003 030c 	and.w	r3, r3, #12
 8027592:	2b00      	cmp	r3, #0
 8027594:	d00b      	beq.n	80275ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027596:	4b47      	ldr	r3, [pc, #284]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027598:	689b      	ldr	r3, [r3, #8]
 802759a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802759e:	2b08      	cmp	r3, #8
 80275a0:	d11c      	bne.n	80275dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80275a2:	4b44      	ldr	r3, [pc, #272]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80275a4:	685b      	ldr	r3, [r3, #4]
 80275a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80275aa:	2b00      	cmp	r3, #0
 80275ac:	d116      	bne.n	80275dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275ae:	4b41      	ldr	r3, [pc, #260]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80275b0:	681b      	ldr	r3, [r3, #0]
 80275b2:	f003 0302 	and.w	r3, r3, #2
 80275b6:	2b00      	cmp	r3, #0
 80275b8:	d005      	beq.n	80275c6 <HAL_RCC_OscConfig+0x152>
 80275ba:	687b      	ldr	r3, [r7, #4]
 80275bc:	68db      	ldr	r3, [r3, #12]
 80275be:	2b01      	cmp	r3, #1
 80275c0:	d001      	beq.n	80275c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80275c2:	2301      	movs	r3, #1
 80275c4:	e1c7      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80275c6:	4b3b      	ldr	r3, [pc, #236]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80275c8:	681b      	ldr	r3, [r3, #0]
 80275ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80275ce:	687b      	ldr	r3, [r7, #4]
 80275d0:	691b      	ldr	r3, [r3, #16]
 80275d2:	00db      	lsls	r3, r3, #3
 80275d4:	4937      	ldr	r1, [pc, #220]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 80275d6:	4313      	orrs	r3, r2
 80275d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275da:	e03a      	b.n	8027652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80275dc:	687b      	ldr	r3, [r7, #4]
 80275de:	68db      	ldr	r3, [r3, #12]
 80275e0:	2b00      	cmp	r3, #0
 80275e2:	d020      	beq.n	8027626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80275e4:	4b34      	ldr	r3, [pc, #208]	; (80276b8 <HAL_RCC_OscConfig+0x244>)
 80275e6:	2201      	movs	r2, #1
 80275e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80275ea:	f7fc f843 	bl	8023674 <HAL_GetTick>
 80275ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80275f0:	e008      	b.n	8027604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80275f2:	f7fc f83f 	bl	8023674 <HAL_GetTick>
 80275f6:	4602      	mov	r2, r0
 80275f8:	693b      	ldr	r3, [r7, #16]
 80275fa:	1ad3      	subs	r3, r2, r3
 80275fc:	2b02      	cmp	r3, #2
 80275fe:	d901      	bls.n	8027604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027600:	2303      	movs	r3, #3
 8027602:	e1a8      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027604:	4b2b      	ldr	r3, [pc, #172]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027606:	681b      	ldr	r3, [r3, #0]
 8027608:	f003 0302 	and.w	r3, r3, #2
 802760c:	2b00      	cmp	r3, #0
 802760e:	d0f0      	beq.n	80275f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027610:	4b28      	ldr	r3, [pc, #160]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027612:	681b      	ldr	r3, [r3, #0]
 8027614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027618:	687b      	ldr	r3, [r7, #4]
 802761a:	691b      	ldr	r3, [r3, #16]
 802761c:	00db      	lsls	r3, r3, #3
 802761e:	4925      	ldr	r1, [pc, #148]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027620:	4313      	orrs	r3, r2
 8027622:	600b      	str	r3, [r1, #0]
 8027624:	e015      	b.n	8027652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8027626:	4b24      	ldr	r3, [pc, #144]	; (80276b8 <HAL_RCC_OscConfig+0x244>)
 8027628:	2200      	movs	r2, #0
 802762a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802762c:	f7fc f822 	bl	8023674 <HAL_GetTick>
 8027630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027632:	e008      	b.n	8027646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027634:	f7fc f81e 	bl	8023674 <HAL_GetTick>
 8027638:	4602      	mov	r2, r0
 802763a:	693b      	ldr	r3, [r7, #16]
 802763c:	1ad3      	subs	r3, r2, r3
 802763e:	2b02      	cmp	r3, #2
 8027640:	d901      	bls.n	8027646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8027642:	2303      	movs	r3, #3
 8027644:	e187      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027646:	4b1b      	ldr	r3, [pc, #108]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027648:	681b      	ldr	r3, [r3, #0]
 802764a:	f003 0302 	and.w	r3, r3, #2
 802764e:	2b00      	cmp	r3, #0
 8027650:	d1f0      	bne.n	8027634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8027652:	687b      	ldr	r3, [r7, #4]
 8027654:	681b      	ldr	r3, [r3, #0]
 8027656:	f003 0308 	and.w	r3, r3, #8
 802765a:	2b00      	cmp	r3, #0
 802765c:	d036      	beq.n	80276cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802765e:	687b      	ldr	r3, [r7, #4]
 8027660:	695b      	ldr	r3, [r3, #20]
 8027662:	2b00      	cmp	r3, #0
 8027664:	d016      	beq.n	8027694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027666:	4b15      	ldr	r3, [pc, #84]	; (80276bc <HAL_RCC_OscConfig+0x248>)
 8027668:	2201      	movs	r2, #1
 802766a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802766c:	f7fc f802 	bl	8023674 <HAL_GetTick>
 8027670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027672:	e008      	b.n	8027686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027674:	f7fb fffe 	bl	8023674 <HAL_GetTick>
 8027678:	4602      	mov	r2, r0
 802767a:	693b      	ldr	r3, [r7, #16]
 802767c:	1ad3      	subs	r3, r2, r3
 802767e:	2b02      	cmp	r3, #2
 8027680:	d901      	bls.n	8027686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8027682:	2303      	movs	r3, #3
 8027684:	e167      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027686:	4b0b      	ldr	r3, [pc, #44]	; (80276b4 <HAL_RCC_OscConfig+0x240>)
 8027688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802768a:	f003 0302 	and.w	r3, r3, #2
 802768e:	2b00      	cmp	r3, #0
 8027690:	d0f0      	beq.n	8027674 <HAL_RCC_OscConfig+0x200>
 8027692:	e01b      	b.n	80276cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027694:	4b09      	ldr	r3, [pc, #36]	; (80276bc <HAL_RCC_OscConfig+0x248>)
 8027696:	2200      	movs	r2, #0
 8027698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802769a:	f7fb ffeb 	bl	8023674 <HAL_GetTick>
 802769e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80276a0:	e00e      	b.n	80276c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80276a2:	f7fb ffe7 	bl	8023674 <HAL_GetTick>
 80276a6:	4602      	mov	r2, r0
 80276a8:	693b      	ldr	r3, [r7, #16]
 80276aa:	1ad3      	subs	r3, r2, r3
 80276ac:	2b02      	cmp	r3, #2
 80276ae:	d907      	bls.n	80276c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80276b0:	2303      	movs	r3, #3
 80276b2:	e150      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
 80276b4:	40023800 	.word	0x40023800
 80276b8:	42470000 	.word	0x42470000
 80276bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80276c0:	4b88      	ldr	r3, [pc, #544]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80276c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80276c4:	f003 0302 	and.w	r3, r3, #2
 80276c8:	2b00      	cmp	r3, #0
 80276ca:	d1ea      	bne.n	80276a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80276cc:	687b      	ldr	r3, [r7, #4]
 80276ce:	681b      	ldr	r3, [r3, #0]
 80276d0:	f003 0304 	and.w	r3, r3, #4
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	f000 8097 	beq.w	8027808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80276da:	2300      	movs	r3, #0
 80276dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80276de:	4b81      	ldr	r3, [pc, #516]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80276e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80276e6:	2b00      	cmp	r3, #0
 80276e8:	d10f      	bne.n	802770a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80276ea:	2300      	movs	r3, #0
 80276ec:	60bb      	str	r3, [r7, #8]
 80276ee:	4b7d      	ldr	r3, [pc, #500]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80276f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276f2:	4a7c      	ldr	r2, [pc, #496]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80276f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80276f8:	6413      	str	r3, [r2, #64]	; 0x40
 80276fa:	4b7a      	ldr	r3, [pc, #488]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80276fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027702:	60bb      	str	r3, [r7, #8]
 8027704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027706:	2301      	movs	r3, #1
 8027708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802770a:	4b77      	ldr	r3, [pc, #476]	; (80278e8 <HAL_RCC_OscConfig+0x474>)
 802770c:	681b      	ldr	r3, [r3, #0]
 802770e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027712:	2b00      	cmp	r3, #0
 8027714:	d118      	bne.n	8027748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8027716:	4b74      	ldr	r3, [pc, #464]	; (80278e8 <HAL_RCC_OscConfig+0x474>)
 8027718:	681b      	ldr	r3, [r3, #0]
 802771a:	4a73      	ldr	r2, [pc, #460]	; (80278e8 <HAL_RCC_OscConfig+0x474>)
 802771c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8027722:	f7fb ffa7 	bl	8023674 <HAL_GetTick>
 8027726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027728:	e008      	b.n	802773c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802772a:	f7fb ffa3 	bl	8023674 <HAL_GetTick>
 802772e:	4602      	mov	r2, r0
 8027730:	693b      	ldr	r3, [r7, #16]
 8027732:	1ad3      	subs	r3, r2, r3
 8027734:	2b02      	cmp	r3, #2
 8027736:	d901      	bls.n	802773c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8027738:	2303      	movs	r3, #3
 802773a:	e10c      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802773c:	4b6a      	ldr	r3, [pc, #424]	; (80278e8 <HAL_RCC_OscConfig+0x474>)
 802773e:	681b      	ldr	r3, [r3, #0]
 8027740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027744:	2b00      	cmp	r3, #0
 8027746:	d0f0      	beq.n	802772a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027748:	687b      	ldr	r3, [r7, #4]
 802774a:	689b      	ldr	r3, [r3, #8]
 802774c:	2b01      	cmp	r3, #1
 802774e:	d106      	bne.n	802775e <HAL_RCC_OscConfig+0x2ea>
 8027750:	4b64      	ldr	r3, [pc, #400]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027754:	4a63      	ldr	r2, [pc, #396]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027756:	f043 0301 	orr.w	r3, r3, #1
 802775a:	6713      	str	r3, [r2, #112]	; 0x70
 802775c:	e01c      	b.n	8027798 <HAL_RCC_OscConfig+0x324>
 802775e:	687b      	ldr	r3, [r7, #4]
 8027760:	689b      	ldr	r3, [r3, #8]
 8027762:	2b05      	cmp	r3, #5
 8027764:	d10c      	bne.n	8027780 <HAL_RCC_OscConfig+0x30c>
 8027766:	4b5f      	ldr	r3, [pc, #380]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802776a:	4a5e      	ldr	r2, [pc, #376]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 802776c:	f043 0304 	orr.w	r3, r3, #4
 8027770:	6713      	str	r3, [r2, #112]	; 0x70
 8027772:	4b5c      	ldr	r3, [pc, #368]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027776:	4a5b      	ldr	r2, [pc, #364]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027778:	f043 0301 	orr.w	r3, r3, #1
 802777c:	6713      	str	r3, [r2, #112]	; 0x70
 802777e:	e00b      	b.n	8027798 <HAL_RCC_OscConfig+0x324>
 8027780:	4b58      	ldr	r3, [pc, #352]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027784:	4a57      	ldr	r2, [pc, #348]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027786:	f023 0301 	bic.w	r3, r3, #1
 802778a:	6713      	str	r3, [r2, #112]	; 0x70
 802778c:	4b55      	ldr	r3, [pc, #340]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 802778e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027790:	4a54      	ldr	r2, [pc, #336]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027792:	f023 0304 	bic.w	r3, r3, #4
 8027796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027798:	687b      	ldr	r3, [r7, #4]
 802779a:	689b      	ldr	r3, [r3, #8]
 802779c:	2b00      	cmp	r3, #0
 802779e:	d015      	beq.n	80277cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80277a0:	f7fb ff68 	bl	8023674 <HAL_GetTick>
 80277a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277a6:	e00a      	b.n	80277be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277a8:	f7fb ff64 	bl	8023674 <HAL_GetTick>
 80277ac:	4602      	mov	r2, r0
 80277ae:	693b      	ldr	r3, [r7, #16]
 80277b0:	1ad3      	subs	r3, r2, r3
 80277b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80277b6:	4293      	cmp	r3, r2
 80277b8:	d901      	bls.n	80277be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80277ba:	2303      	movs	r3, #3
 80277bc:	e0cb      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277be:	4b49      	ldr	r3, [pc, #292]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80277c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277c2:	f003 0302 	and.w	r3, r3, #2
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	d0ee      	beq.n	80277a8 <HAL_RCC_OscConfig+0x334>
 80277ca:	e014      	b.n	80277f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80277cc:	f7fb ff52 	bl	8023674 <HAL_GetTick>
 80277d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80277d2:	e00a      	b.n	80277ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277d4:	f7fb ff4e 	bl	8023674 <HAL_GetTick>
 80277d8:	4602      	mov	r2, r0
 80277da:	693b      	ldr	r3, [r7, #16]
 80277dc:	1ad3      	subs	r3, r2, r3
 80277de:	f241 3288 	movw	r2, #5000	; 0x1388
 80277e2:	4293      	cmp	r3, r2
 80277e4:	d901      	bls.n	80277ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80277e6:	2303      	movs	r3, #3
 80277e8:	e0b5      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80277ea:	4b3e      	ldr	r3, [pc, #248]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80277ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277ee:	f003 0302 	and.w	r3, r3, #2
 80277f2:	2b00      	cmp	r3, #0
 80277f4:	d1ee      	bne.n	80277d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80277f6:	7dfb      	ldrb	r3, [r7, #23]
 80277f8:	2b01      	cmp	r3, #1
 80277fa:	d105      	bne.n	8027808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80277fc:	4b39      	ldr	r3, [pc, #228]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80277fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027800:	4a38      	ldr	r2, [pc, #224]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	699b      	ldr	r3, [r3, #24]
 802780c:	2b00      	cmp	r3, #0
 802780e:	f000 80a1 	beq.w	8027954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8027812:	4b34      	ldr	r3, [pc, #208]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027814:	689b      	ldr	r3, [r3, #8]
 8027816:	f003 030c 	and.w	r3, r3, #12
 802781a:	2b08      	cmp	r3, #8
 802781c:	d05c      	beq.n	80278d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802781e:	687b      	ldr	r3, [r7, #4]
 8027820:	699b      	ldr	r3, [r3, #24]
 8027822:	2b02      	cmp	r3, #2
 8027824:	d141      	bne.n	80278aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027826:	4b31      	ldr	r3, [pc, #196]	; (80278ec <HAL_RCC_OscConfig+0x478>)
 8027828:	2200      	movs	r2, #0
 802782a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802782c:	f7fb ff22 	bl	8023674 <HAL_GetTick>
 8027830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027832:	e008      	b.n	8027846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027834:	f7fb ff1e 	bl	8023674 <HAL_GetTick>
 8027838:	4602      	mov	r2, r0
 802783a:	693b      	ldr	r3, [r7, #16]
 802783c:	1ad3      	subs	r3, r2, r3
 802783e:	2b02      	cmp	r3, #2
 8027840:	d901      	bls.n	8027846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8027842:	2303      	movs	r3, #3
 8027844:	e087      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027846:	4b27      	ldr	r3, [pc, #156]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027848:	681b      	ldr	r3, [r3, #0]
 802784a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802784e:	2b00      	cmp	r3, #0
 8027850:	d1f0      	bne.n	8027834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	69da      	ldr	r2, [r3, #28]
 8027856:	687b      	ldr	r3, [r7, #4]
 8027858:	6a1b      	ldr	r3, [r3, #32]
 802785a:	431a      	orrs	r2, r3
 802785c:	687b      	ldr	r3, [r7, #4]
 802785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027860:	019b      	lsls	r3, r3, #6
 8027862:	431a      	orrs	r2, r3
 8027864:	687b      	ldr	r3, [r7, #4]
 8027866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027868:	085b      	lsrs	r3, r3, #1
 802786a:	3b01      	subs	r3, #1
 802786c:	041b      	lsls	r3, r3, #16
 802786e:	431a      	orrs	r2, r3
 8027870:	687b      	ldr	r3, [r7, #4]
 8027872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027874:	061b      	lsls	r3, r3, #24
 8027876:	491b      	ldr	r1, [pc, #108]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 8027878:	4313      	orrs	r3, r2
 802787a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802787c:	4b1b      	ldr	r3, [pc, #108]	; (80278ec <HAL_RCC_OscConfig+0x478>)
 802787e:	2201      	movs	r2, #1
 8027880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027882:	f7fb fef7 	bl	8023674 <HAL_GetTick>
 8027886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027888:	e008      	b.n	802789c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802788a:	f7fb fef3 	bl	8023674 <HAL_GetTick>
 802788e:	4602      	mov	r2, r0
 8027890:	693b      	ldr	r3, [r7, #16]
 8027892:	1ad3      	subs	r3, r2, r3
 8027894:	2b02      	cmp	r3, #2
 8027896:	d901      	bls.n	802789c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8027898:	2303      	movs	r3, #3
 802789a:	e05c      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802789c:	4b11      	ldr	r3, [pc, #68]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 802789e:	681b      	ldr	r3, [r3, #0]
 80278a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d0f0      	beq.n	802788a <HAL_RCC_OscConfig+0x416>
 80278a8:	e054      	b.n	8027954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80278aa:	4b10      	ldr	r3, [pc, #64]	; (80278ec <HAL_RCC_OscConfig+0x478>)
 80278ac:	2200      	movs	r2, #0
 80278ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80278b0:	f7fb fee0 	bl	8023674 <HAL_GetTick>
 80278b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278b6:	e008      	b.n	80278ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80278b8:	f7fb fedc 	bl	8023674 <HAL_GetTick>
 80278bc:	4602      	mov	r2, r0
 80278be:	693b      	ldr	r3, [r7, #16]
 80278c0:	1ad3      	subs	r3, r2, r3
 80278c2:	2b02      	cmp	r3, #2
 80278c4:	d901      	bls.n	80278ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80278c6:	2303      	movs	r3, #3
 80278c8:	e045      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278ca:	4b06      	ldr	r3, [pc, #24]	; (80278e4 <HAL_RCC_OscConfig+0x470>)
 80278cc:	681b      	ldr	r3, [r3, #0]
 80278ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278d2:	2b00      	cmp	r3, #0
 80278d4:	d1f0      	bne.n	80278b8 <HAL_RCC_OscConfig+0x444>
 80278d6:	e03d      	b.n	8027954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80278d8:	687b      	ldr	r3, [r7, #4]
 80278da:	699b      	ldr	r3, [r3, #24]
 80278dc:	2b01      	cmp	r3, #1
 80278de:	d107      	bne.n	80278f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80278e0:	2301      	movs	r3, #1
 80278e2:	e038      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
 80278e4:	40023800 	.word	0x40023800
 80278e8:	40007000 	.word	0x40007000
 80278ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80278f0:	4b1b      	ldr	r3, [pc, #108]	; (8027960 <HAL_RCC_OscConfig+0x4ec>)
 80278f2:	685b      	ldr	r3, [r3, #4]
 80278f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	699b      	ldr	r3, [r3, #24]
 80278fa:	2b01      	cmp	r3, #1
 80278fc:	d028      	beq.n	8027950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80278fe:	68fb      	ldr	r3, [r7, #12]
 8027900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027904:	687b      	ldr	r3, [r7, #4]
 8027906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027908:	429a      	cmp	r2, r3
 802790a:	d121      	bne.n	8027950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802790c:	68fb      	ldr	r3, [r7, #12]
 802790e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027912:	687b      	ldr	r3, [r7, #4]
 8027914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027916:	429a      	cmp	r2, r3
 8027918:	d11a      	bne.n	8027950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802791a:	68fa      	ldr	r2, [r7, #12]
 802791c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027920:	4013      	ands	r3, r2
 8027922:	687a      	ldr	r2, [r7, #4]
 8027924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027928:	4293      	cmp	r3, r2
 802792a:	d111      	bne.n	8027950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802792c:	68fb      	ldr	r3, [r7, #12]
 802792e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027932:	687b      	ldr	r3, [r7, #4]
 8027934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027936:	085b      	lsrs	r3, r3, #1
 8027938:	3b01      	subs	r3, #1
 802793a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802793c:	429a      	cmp	r2, r3
 802793e:	d107      	bne.n	8027950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8027940:	68fb      	ldr	r3, [r7, #12]
 8027942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8027946:	687b      	ldr	r3, [r7, #4]
 8027948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802794a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802794c:	429a      	cmp	r2, r3
 802794e:	d001      	beq.n	8027954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8027950:	2301      	movs	r3, #1
 8027952:	e000      	b.n	8027956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8027954:	2300      	movs	r3, #0
}
 8027956:	4618      	mov	r0, r3
 8027958:	3718      	adds	r7, #24
 802795a:	46bd      	mov	sp, r7
 802795c:	bd80      	pop	{r7, pc}
 802795e:	bf00      	nop
 8027960:	40023800 	.word	0x40023800

08027964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027964:	b580      	push	{r7, lr}
 8027966:	b084      	sub	sp, #16
 8027968:	af00      	add	r7, sp, #0
 802796a:	6078      	str	r0, [r7, #4]
 802796c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802796e:	687b      	ldr	r3, [r7, #4]
 8027970:	2b00      	cmp	r3, #0
 8027972:	d101      	bne.n	8027978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027974:	2301      	movs	r3, #1
 8027976:	e0cc      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027978:	4b68      	ldr	r3, [pc, #416]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 802797a:	681b      	ldr	r3, [r3, #0]
 802797c:	f003 030f 	and.w	r3, r3, #15
 8027980:	683a      	ldr	r2, [r7, #0]
 8027982:	429a      	cmp	r2, r3
 8027984:	d90c      	bls.n	80279a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027986:	4b65      	ldr	r3, [pc, #404]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 8027988:	683a      	ldr	r2, [r7, #0]
 802798a:	b2d2      	uxtb	r2, r2
 802798c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802798e:	4b63      	ldr	r3, [pc, #396]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 8027990:	681b      	ldr	r3, [r3, #0]
 8027992:	f003 030f 	and.w	r3, r3, #15
 8027996:	683a      	ldr	r2, [r7, #0]
 8027998:	429a      	cmp	r2, r3
 802799a:	d001      	beq.n	80279a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 802799c:	2301      	movs	r3, #1
 802799e:	e0b8      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80279a0:	687b      	ldr	r3, [r7, #4]
 80279a2:	681b      	ldr	r3, [r3, #0]
 80279a4:	f003 0302 	and.w	r3, r3, #2
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	d020      	beq.n	80279ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	681b      	ldr	r3, [r3, #0]
 80279b0:	f003 0304 	and.w	r3, r3, #4
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d005      	beq.n	80279c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80279b8:	4b59      	ldr	r3, [pc, #356]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279ba:	689b      	ldr	r3, [r3, #8]
 80279bc:	4a58      	ldr	r2, [pc, #352]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80279c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	681b      	ldr	r3, [r3, #0]
 80279c8:	f003 0308 	and.w	r3, r3, #8
 80279cc:	2b00      	cmp	r3, #0
 80279ce:	d005      	beq.n	80279dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80279d0:	4b53      	ldr	r3, [pc, #332]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279d2:	689b      	ldr	r3, [r3, #8]
 80279d4:	4a52      	ldr	r2, [pc, #328]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80279da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80279dc:	4b50      	ldr	r3, [pc, #320]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279de:	689b      	ldr	r3, [r3, #8]
 80279e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80279e4:	687b      	ldr	r3, [r7, #4]
 80279e6:	689b      	ldr	r3, [r3, #8]
 80279e8:	494d      	ldr	r1, [pc, #308]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 80279ea:	4313      	orrs	r3, r2
 80279ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80279ee:	687b      	ldr	r3, [r7, #4]
 80279f0:	681b      	ldr	r3, [r3, #0]
 80279f2:	f003 0301 	and.w	r3, r3, #1
 80279f6:	2b00      	cmp	r3, #0
 80279f8:	d044      	beq.n	8027a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	685b      	ldr	r3, [r3, #4]
 80279fe:	2b01      	cmp	r3, #1
 8027a00:	d107      	bne.n	8027a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027a02:	4b47      	ldr	r3, [pc, #284]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a04:	681b      	ldr	r3, [r3, #0]
 8027a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a0a:	2b00      	cmp	r3, #0
 8027a0c:	d119      	bne.n	8027a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a0e:	2301      	movs	r3, #1
 8027a10:	e07f      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a12:	687b      	ldr	r3, [r7, #4]
 8027a14:	685b      	ldr	r3, [r3, #4]
 8027a16:	2b02      	cmp	r3, #2
 8027a18:	d003      	beq.n	8027a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8027a1a:	687b      	ldr	r3, [r7, #4]
 8027a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a1e:	2b03      	cmp	r3, #3
 8027a20:	d107      	bne.n	8027a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027a22:	4b3f      	ldr	r3, [pc, #252]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a24:	681b      	ldr	r3, [r3, #0]
 8027a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	d109      	bne.n	8027a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a2e:	2301      	movs	r3, #1
 8027a30:	e06f      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027a32:	4b3b      	ldr	r3, [pc, #236]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a34:	681b      	ldr	r3, [r3, #0]
 8027a36:	f003 0302 	and.w	r3, r3, #2
 8027a3a:	2b00      	cmp	r3, #0
 8027a3c:	d101      	bne.n	8027a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a3e:	2301      	movs	r3, #1
 8027a40:	e067      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027a42:	4b37      	ldr	r3, [pc, #220]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a44:	689b      	ldr	r3, [r3, #8]
 8027a46:	f023 0203 	bic.w	r2, r3, #3
 8027a4a:	687b      	ldr	r3, [r7, #4]
 8027a4c:	685b      	ldr	r3, [r3, #4]
 8027a4e:	4934      	ldr	r1, [pc, #208]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a50:	4313      	orrs	r3, r2
 8027a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027a54:	f7fb fe0e 	bl	8023674 <HAL_GetTick>
 8027a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a5a:	e00a      	b.n	8027a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027a5c:	f7fb fe0a 	bl	8023674 <HAL_GetTick>
 8027a60:	4602      	mov	r2, r0
 8027a62:	68fb      	ldr	r3, [r7, #12]
 8027a64:	1ad3      	subs	r3, r2, r3
 8027a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8027a6a:	4293      	cmp	r3, r2
 8027a6c:	d901      	bls.n	8027a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8027a6e:	2303      	movs	r3, #3
 8027a70:	e04f      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a72:	4b2b      	ldr	r3, [pc, #172]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027a74:	689b      	ldr	r3, [r3, #8]
 8027a76:	f003 020c 	and.w	r2, r3, #12
 8027a7a:	687b      	ldr	r3, [r7, #4]
 8027a7c:	685b      	ldr	r3, [r3, #4]
 8027a7e:	009b      	lsls	r3, r3, #2
 8027a80:	429a      	cmp	r2, r3
 8027a82:	d1eb      	bne.n	8027a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027a84:	4b25      	ldr	r3, [pc, #148]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 8027a86:	681b      	ldr	r3, [r3, #0]
 8027a88:	f003 030f 	and.w	r3, r3, #15
 8027a8c:	683a      	ldr	r2, [r7, #0]
 8027a8e:	429a      	cmp	r2, r3
 8027a90:	d20c      	bcs.n	8027aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027a92:	4b22      	ldr	r3, [pc, #136]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 8027a94:	683a      	ldr	r2, [r7, #0]
 8027a96:	b2d2      	uxtb	r2, r2
 8027a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027a9a:	4b20      	ldr	r3, [pc, #128]	; (8027b1c <HAL_RCC_ClockConfig+0x1b8>)
 8027a9c:	681b      	ldr	r3, [r3, #0]
 8027a9e:	f003 030f 	and.w	r3, r3, #15
 8027aa2:	683a      	ldr	r2, [r7, #0]
 8027aa4:	429a      	cmp	r2, r3
 8027aa6:	d001      	beq.n	8027aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027aa8:	2301      	movs	r3, #1
 8027aaa:	e032      	b.n	8027b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027aac:	687b      	ldr	r3, [r7, #4]
 8027aae:	681b      	ldr	r3, [r3, #0]
 8027ab0:	f003 0304 	and.w	r3, r3, #4
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d008      	beq.n	8027aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027ab8:	4b19      	ldr	r3, [pc, #100]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027aba:	689b      	ldr	r3, [r3, #8]
 8027abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027ac0:	687b      	ldr	r3, [r7, #4]
 8027ac2:	68db      	ldr	r3, [r3, #12]
 8027ac4:	4916      	ldr	r1, [pc, #88]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027ac6:	4313      	orrs	r3, r2
 8027ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027aca:	687b      	ldr	r3, [r7, #4]
 8027acc:	681b      	ldr	r3, [r3, #0]
 8027ace:	f003 0308 	and.w	r3, r3, #8
 8027ad2:	2b00      	cmp	r3, #0
 8027ad4:	d009      	beq.n	8027aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027ad6:	4b12      	ldr	r3, [pc, #72]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027ad8:	689b      	ldr	r3, [r3, #8]
 8027ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027ade:	687b      	ldr	r3, [r7, #4]
 8027ae0:	691b      	ldr	r3, [r3, #16]
 8027ae2:	00db      	lsls	r3, r3, #3
 8027ae4:	490e      	ldr	r1, [pc, #56]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027ae6:	4313      	orrs	r3, r2
 8027ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027aea:	f000 f821 	bl	8027b30 <HAL_RCC_GetSysClockFreq>
 8027aee:	4602      	mov	r2, r0
 8027af0:	4b0b      	ldr	r3, [pc, #44]	; (8027b20 <HAL_RCC_ClockConfig+0x1bc>)
 8027af2:	689b      	ldr	r3, [r3, #8]
 8027af4:	091b      	lsrs	r3, r3, #4
 8027af6:	f003 030f 	and.w	r3, r3, #15
 8027afa:	490a      	ldr	r1, [pc, #40]	; (8027b24 <HAL_RCC_ClockConfig+0x1c0>)
 8027afc:	5ccb      	ldrb	r3, [r1, r3]
 8027afe:	fa22 f303 	lsr.w	r3, r2, r3
 8027b02:	4a09      	ldr	r2, [pc, #36]	; (8027b28 <HAL_RCC_ClockConfig+0x1c4>)
 8027b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027b06:	4b09      	ldr	r3, [pc, #36]	; (8027b2c <HAL_RCC_ClockConfig+0x1c8>)
 8027b08:	681b      	ldr	r3, [r3, #0]
 8027b0a:	4618      	mov	r0, r3
 8027b0c:	f7fa f9ce 	bl	8021eac <HAL_InitTick>

  return HAL_OK;
 8027b10:	2300      	movs	r3, #0
}
 8027b12:	4618      	mov	r0, r3
 8027b14:	3710      	adds	r7, #16
 8027b16:	46bd      	mov	sp, r7
 8027b18:	bd80      	pop	{r7, pc}
 8027b1a:	bf00      	nop
 8027b1c:	40023c00 	.word	0x40023c00
 8027b20:	40023800 	.word	0x40023800
 8027b24:	0802fae0 	.word	0x0802fae0
 8027b28:	20000004 	.word	0x20000004
 8027b2c:	20000058 	.word	0x20000058

08027b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027b34:	b094      	sub	sp, #80	; 0x50
 8027b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027b38:	2300      	movs	r3, #0
 8027b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8027b3c:	2300      	movs	r3, #0
 8027b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027b40:	2300      	movs	r3, #0
 8027b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8027b44:	2300      	movs	r3, #0
 8027b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027b48:	4b79      	ldr	r3, [pc, #484]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b4a:	689b      	ldr	r3, [r3, #8]
 8027b4c:	f003 030c 	and.w	r3, r3, #12
 8027b50:	2b08      	cmp	r3, #8
 8027b52:	d00d      	beq.n	8027b70 <HAL_RCC_GetSysClockFreq+0x40>
 8027b54:	2b08      	cmp	r3, #8
 8027b56:	f200 80e1 	bhi.w	8027d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8027b5a:	2b00      	cmp	r3, #0
 8027b5c:	d002      	beq.n	8027b64 <HAL_RCC_GetSysClockFreq+0x34>
 8027b5e:	2b04      	cmp	r3, #4
 8027b60:	d003      	beq.n	8027b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8027b62:	e0db      	b.n	8027d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027b64:	4b73      	ldr	r3, [pc, #460]	; (8027d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8027b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027b68:	e0db      	b.n	8027d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027b6a:	4b73      	ldr	r3, [pc, #460]	; (8027d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8027b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027b6e:	e0d8      	b.n	8027d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027b70:	4b6f      	ldr	r3, [pc, #444]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b72:	685b      	ldr	r3, [r3, #4]
 8027b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027b7a:	4b6d      	ldr	r3, [pc, #436]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b7c:	685b      	ldr	r3, [r3, #4]
 8027b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027b82:	2b00      	cmp	r3, #0
 8027b84:	d063      	beq.n	8027c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027b86:	4b6a      	ldr	r3, [pc, #424]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b88:	685b      	ldr	r3, [r3, #4]
 8027b8a:	099b      	lsrs	r3, r3, #6
 8027b8c:	2200      	movs	r2, #0
 8027b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8027b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027b98:	633b      	str	r3, [r7, #48]	; 0x30
 8027b9a:	2300      	movs	r3, #0
 8027b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8027b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027ba2:	4622      	mov	r2, r4
 8027ba4:	462b      	mov	r3, r5
 8027ba6:	f04f 0000 	mov.w	r0, #0
 8027baa:	f04f 0100 	mov.w	r1, #0
 8027bae:	0159      	lsls	r1, r3, #5
 8027bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027bb4:	0150      	lsls	r0, r2, #5
 8027bb6:	4602      	mov	r2, r0
 8027bb8:	460b      	mov	r3, r1
 8027bba:	4621      	mov	r1, r4
 8027bbc:	1a51      	subs	r1, r2, r1
 8027bbe:	6139      	str	r1, [r7, #16]
 8027bc0:	4629      	mov	r1, r5
 8027bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8027bc6:	617b      	str	r3, [r7, #20]
 8027bc8:	f04f 0200 	mov.w	r2, #0
 8027bcc:	f04f 0300 	mov.w	r3, #0
 8027bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027bd4:	4659      	mov	r1, fp
 8027bd6:	018b      	lsls	r3, r1, #6
 8027bd8:	4651      	mov	r1, sl
 8027bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8027bde:	4651      	mov	r1, sl
 8027be0:	018a      	lsls	r2, r1, #6
 8027be2:	4651      	mov	r1, sl
 8027be4:	ebb2 0801 	subs.w	r8, r2, r1
 8027be8:	4659      	mov	r1, fp
 8027bea:	eb63 0901 	sbc.w	r9, r3, r1
 8027bee:	f04f 0200 	mov.w	r2, #0
 8027bf2:	f04f 0300 	mov.w	r3, #0
 8027bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8027bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027c02:	4690      	mov	r8, r2
 8027c04:	4699      	mov	r9, r3
 8027c06:	4623      	mov	r3, r4
 8027c08:	eb18 0303 	adds.w	r3, r8, r3
 8027c0c:	60bb      	str	r3, [r7, #8]
 8027c0e:	462b      	mov	r3, r5
 8027c10:	eb49 0303 	adc.w	r3, r9, r3
 8027c14:	60fb      	str	r3, [r7, #12]
 8027c16:	f04f 0200 	mov.w	r2, #0
 8027c1a:	f04f 0300 	mov.w	r3, #0
 8027c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027c22:	4629      	mov	r1, r5
 8027c24:	024b      	lsls	r3, r1, #9
 8027c26:	4621      	mov	r1, r4
 8027c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8027c2c:	4621      	mov	r1, r4
 8027c2e:	024a      	lsls	r2, r1, #9
 8027c30:	4610      	mov	r0, r2
 8027c32:	4619      	mov	r1, r3
 8027c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c36:	2200      	movs	r2, #0
 8027c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8027c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027c40:	f7f8 fb26 	bl	8020290 <__aeabi_uldivmod>
 8027c44:	4602      	mov	r2, r0
 8027c46:	460b      	mov	r3, r1
 8027c48:	4613      	mov	r3, r2
 8027c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027c4c:	e058      	b.n	8027d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027c4e:	4b38      	ldr	r3, [pc, #224]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027c50:	685b      	ldr	r3, [r3, #4]
 8027c52:	099b      	lsrs	r3, r3, #6
 8027c54:	2200      	movs	r2, #0
 8027c56:	4618      	mov	r0, r3
 8027c58:	4611      	mov	r1, r2
 8027c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8027c5e:	623b      	str	r3, [r7, #32]
 8027c60:	2300      	movs	r3, #0
 8027c62:	627b      	str	r3, [r7, #36]	; 0x24
 8027c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027c68:	4642      	mov	r2, r8
 8027c6a:	464b      	mov	r3, r9
 8027c6c:	f04f 0000 	mov.w	r0, #0
 8027c70:	f04f 0100 	mov.w	r1, #0
 8027c74:	0159      	lsls	r1, r3, #5
 8027c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027c7a:	0150      	lsls	r0, r2, #5
 8027c7c:	4602      	mov	r2, r0
 8027c7e:	460b      	mov	r3, r1
 8027c80:	4641      	mov	r1, r8
 8027c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8027c86:	4649      	mov	r1, r9
 8027c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8027c8c:	f04f 0200 	mov.w	r2, #0
 8027c90:	f04f 0300 	mov.w	r3, #0
 8027c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8027c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8027ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8027ca8:	f04f 0200 	mov.w	r2, #0
 8027cac:	f04f 0300 	mov.w	r3, #0
 8027cb0:	00eb      	lsls	r3, r5, #3
 8027cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027cb6:	00e2      	lsls	r2, r4, #3
 8027cb8:	4614      	mov	r4, r2
 8027cba:	461d      	mov	r5, r3
 8027cbc:	4643      	mov	r3, r8
 8027cbe:	18e3      	adds	r3, r4, r3
 8027cc0:	603b      	str	r3, [r7, #0]
 8027cc2:	464b      	mov	r3, r9
 8027cc4:	eb45 0303 	adc.w	r3, r5, r3
 8027cc8:	607b      	str	r3, [r7, #4]
 8027cca:	f04f 0200 	mov.w	r2, #0
 8027cce:	f04f 0300 	mov.w	r3, #0
 8027cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027cd6:	4629      	mov	r1, r5
 8027cd8:	028b      	lsls	r3, r1, #10
 8027cda:	4621      	mov	r1, r4
 8027cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027ce0:	4621      	mov	r1, r4
 8027ce2:	028a      	lsls	r2, r1, #10
 8027ce4:	4610      	mov	r0, r2
 8027ce6:	4619      	mov	r1, r3
 8027ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027cea:	2200      	movs	r2, #0
 8027cec:	61bb      	str	r3, [r7, #24]
 8027cee:	61fa      	str	r2, [r7, #28]
 8027cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027cf4:	f7f8 facc 	bl	8020290 <__aeabi_uldivmod>
 8027cf8:	4602      	mov	r2, r0
 8027cfa:	460b      	mov	r3, r1
 8027cfc:	4613      	mov	r3, r2
 8027cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027d00:	4b0b      	ldr	r3, [pc, #44]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8027d02:	685b      	ldr	r3, [r3, #4]
 8027d04:	0c1b      	lsrs	r3, r3, #16
 8027d06:	f003 0303 	and.w	r3, r3, #3
 8027d0a:	3301      	adds	r3, #1
 8027d0c:	005b      	lsls	r3, r3, #1
 8027d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d1a:	e002      	b.n	8027d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027d1c:	4b05      	ldr	r3, [pc, #20]	; (8027d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8027d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027d24:	4618      	mov	r0, r3
 8027d26:	3750      	adds	r7, #80	; 0x50
 8027d28:	46bd      	mov	sp, r7
 8027d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027d2e:	bf00      	nop
 8027d30:	40023800 	.word	0x40023800
 8027d34:	00f42400 	.word	0x00f42400
 8027d38:	007a1200 	.word	0x007a1200

08027d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027d3c:	b480      	push	{r7}
 8027d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027d40:	4b03      	ldr	r3, [pc, #12]	; (8027d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8027d42:	681b      	ldr	r3, [r3, #0]
}
 8027d44:	4618      	mov	r0, r3
 8027d46:	46bd      	mov	sp, r7
 8027d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d4c:	4770      	bx	lr
 8027d4e:	bf00      	nop
 8027d50:	20000004 	.word	0x20000004

08027d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027d54:	b580      	push	{r7, lr}
 8027d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027d58:	f7ff fff0 	bl	8027d3c <HAL_RCC_GetHCLKFreq>
 8027d5c:	4602      	mov	r2, r0
 8027d5e:	4b05      	ldr	r3, [pc, #20]	; (8027d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027d60:	689b      	ldr	r3, [r3, #8]
 8027d62:	0a9b      	lsrs	r3, r3, #10
 8027d64:	f003 0307 	and.w	r3, r3, #7
 8027d68:	4903      	ldr	r1, [pc, #12]	; (8027d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027d6a:	5ccb      	ldrb	r3, [r1, r3]
 8027d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027d70:	4618      	mov	r0, r3
 8027d72:	bd80      	pop	{r7, pc}
 8027d74:	40023800 	.word	0x40023800
 8027d78:	0802faf0 	.word	0x0802faf0

08027d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027d7c:	b580      	push	{r7, lr}
 8027d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027d80:	f7ff ffdc 	bl	8027d3c <HAL_RCC_GetHCLKFreq>
 8027d84:	4602      	mov	r2, r0
 8027d86:	4b05      	ldr	r3, [pc, #20]	; (8027d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8027d88:	689b      	ldr	r3, [r3, #8]
 8027d8a:	0b5b      	lsrs	r3, r3, #13
 8027d8c:	f003 0307 	and.w	r3, r3, #7
 8027d90:	4903      	ldr	r1, [pc, #12]	; (8027da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8027d92:	5ccb      	ldrb	r3, [r1, r3]
 8027d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027d98:	4618      	mov	r0, r3
 8027d9a:	bd80      	pop	{r7, pc}
 8027d9c:	40023800 	.word	0x40023800
 8027da0:	0802faf0 	.word	0x0802faf0

08027da4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027da4:	b480      	push	{r7}
 8027da6:	b083      	sub	sp, #12
 8027da8:	af00      	add	r7, sp, #0
 8027daa:	6078      	str	r0, [r7, #4]
 8027dac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027dae:	687b      	ldr	r3, [r7, #4]
 8027db0:	220f      	movs	r2, #15
 8027db2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027db4:	4b12      	ldr	r3, [pc, #72]	; (8027e00 <HAL_RCC_GetClockConfig+0x5c>)
 8027db6:	689b      	ldr	r3, [r3, #8]
 8027db8:	f003 0203 	and.w	r2, r3, #3
 8027dbc:	687b      	ldr	r3, [r7, #4]
 8027dbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027dc0:	4b0f      	ldr	r3, [pc, #60]	; (8027e00 <HAL_RCC_GetClockConfig+0x5c>)
 8027dc2:	689b      	ldr	r3, [r3, #8]
 8027dc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027dc8:	687b      	ldr	r3, [r7, #4]
 8027dca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027dcc:	4b0c      	ldr	r3, [pc, #48]	; (8027e00 <HAL_RCC_GetClockConfig+0x5c>)
 8027dce:	689b      	ldr	r3, [r3, #8]
 8027dd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027dd4:	687b      	ldr	r3, [r7, #4]
 8027dd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027dd8:	4b09      	ldr	r3, [pc, #36]	; (8027e00 <HAL_RCC_GetClockConfig+0x5c>)
 8027dda:	689b      	ldr	r3, [r3, #8]
 8027ddc:	08db      	lsrs	r3, r3, #3
 8027dde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027de2:	687b      	ldr	r3, [r7, #4]
 8027de4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027de6:	4b07      	ldr	r3, [pc, #28]	; (8027e04 <HAL_RCC_GetClockConfig+0x60>)
 8027de8:	681b      	ldr	r3, [r3, #0]
 8027dea:	f003 020f 	and.w	r2, r3, #15
 8027dee:	683b      	ldr	r3, [r7, #0]
 8027df0:	601a      	str	r2, [r3, #0]
}
 8027df2:	bf00      	nop
 8027df4:	370c      	adds	r7, #12
 8027df6:	46bd      	mov	sp, r7
 8027df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dfc:	4770      	bx	lr
 8027dfe:	bf00      	nop
 8027e00:	40023800 	.word	0x40023800
 8027e04:	40023c00 	.word	0x40023c00

08027e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027e08:	b580      	push	{r7, lr}
 8027e0a:	b086      	sub	sp, #24
 8027e0c:	af00      	add	r7, sp, #0
 8027e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027e10:	2300      	movs	r3, #0
 8027e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027e14:	2300      	movs	r3, #0
 8027e16:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e18:	687b      	ldr	r3, [r7, #4]
 8027e1a:	681b      	ldr	r3, [r3, #0]
 8027e1c:	f003 0301 	and.w	r3, r3, #1
 8027e20:	2b00      	cmp	r3, #0
 8027e22:	d10b      	bne.n	8027e3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e24:	687b      	ldr	r3, [r7, #4]
 8027e26:	681b      	ldr	r3, [r3, #0]
 8027e28:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d105      	bne.n	8027e3c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027e30:	687b      	ldr	r3, [r7, #4]
 8027e32:	681b      	ldr	r3, [r3, #0]
 8027e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e38:	2b00      	cmp	r3, #0
 8027e3a:	d075      	beq.n	8027f28 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027e3c:	4b91      	ldr	r3, [pc, #580]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027e3e:	2200      	movs	r2, #0
 8027e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027e42:	f7fb fc17 	bl	8023674 <HAL_GetTick>
 8027e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e48:	e008      	b.n	8027e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027e4a:	f7fb fc13 	bl	8023674 <HAL_GetTick>
 8027e4e:	4602      	mov	r2, r0
 8027e50:	697b      	ldr	r3, [r7, #20]
 8027e52:	1ad3      	subs	r3, r2, r3
 8027e54:	2b02      	cmp	r3, #2
 8027e56:	d901      	bls.n	8027e5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e58:	2303      	movs	r3, #3
 8027e5a:	e189      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e5c:	4b8a      	ldr	r3, [pc, #552]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e5e:	681b      	ldr	r3, [r3, #0]
 8027e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027e64:	2b00      	cmp	r3, #0
 8027e66:	d1f0      	bne.n	8027e4a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027e68:	687b      	ldr	r3, [r7, #4]
 8027e6a:	681b      	ldr	r3, [r3, #0]
 8027e6c:	f003 0301 	and.w	r3, r3, #1
 8027e70:	2b00      	cmp	r3, #0
 8027e72:	d009      	beq.n	8027e88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027e74:	687b      	ldr	r3, [r7, #4]
 8027e76:	685b      	ldr	r3, [r3, #4]
 8027e78:	019a      	lsls	r2, r3, #6
 8027e7a:	687b      	ldr	r3, [r7, #4]
 8027e7c:	689b      	ldr	r3, [r3, #8]
 8027e7e:	071b      	lsls	r3, r3, #28
 8027e80:	4981      	ldr	r1, [pc, #516]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e82:	4313      	orrs	r3, r2
 8027e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027e88:	687b      	ldr	r3, [r7, #4]
 8027e8a:	681b      	ldr	r3, [r3, #0]
 8027e8c:	f003 0302 	and.w	r3, r3, #2
 8027e90:	2b00      	cmp	r3, #0
 8027e92:	d01f      	beq.n	8027ed4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027e94:	4b7c      	ldr	r3, [pc, #496]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027e9a:	0f1b      	lsrs	r3, r3, #28
 8027e9c:	f003 0307 	and.w	r3, r3, #7
 8027ea0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	685b      	ldr	r3, [r3, #4]
 8027ea6:	019a      	lsls	r2, r3, #6
 8027ea8:	687b      	ldr	r3, [r7, #4]
 8027eaa:	68db      	ldr	r3, [r3, #12]
 8027eac:	061b      	lsls	r3, r3, #24
 8027eae:	431a      	orrs	r2, r3
 8027eb0:	693b      	ldr	r3, [r7, #16]
 8027eb2:	071b      	lsls	r3, r3, #28
 8027eb4:	4974      	ldr	r1, [pc, #464]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eb6:	4313      	orrs	r3, r2
 8027eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027ebc:	4b72      	ldr	r3, [pc, #456]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027ec2:	f023 021f 	bic.w	r2, r3, #31
 8027ec6:	687b      	ldr	r3, [r7, #4]
 8027ec8:	69db      	ldr	r3, [r3, #28]
 8027eca:	3b01      	subs	r3, #1
 8027ecc:	496e      	ldr	r1, [pc, #440]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ece:	4313      	orrs	r3, r2
 8027ed0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027ed4:	687b      	ldr	r3, [r7, #4]
 8027ed6:	681b      	ldr	r3, [r3, #0]
 8027ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027edc:	2b00      	cmp	r3, #0
 8027ede:	d00d      	beq.n	8027efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	685b      	ldr	r3, [r3, #4]
 8027ee4:	019a      	lsls	r2, r3, #6
 8027ee6:	687b      	ldr	r3, [r7, #4]
 8027ee8:	68db      	ldr	r3, [r3, #12]
 8027eea:	061b      	lsls	r3, r3, #24
 8027eec:	431a      	orrs	r2, r3
 8027eee:	687b      	ldr	r3, [r7, #4]
 8027ef0:	689b      	ldr	r3, [r3, #8]
 8027ef2:	071b      	lsls	r3, r3, #28
 8027ef4:	4964      	ldr	r1, [pc, #400]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ef6:	4313      	orrs	r3, r2
 8027ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027efc:	4b61      	ldr	r3, [pc, #388]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027efe:	2201      	movs	r2, #1
 8027f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f02:	f7fb fbb7 	bl	8023674 <HAL_GetTick>
 8027f06:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f08:	e008      	b.n	8027f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027f0a:	f7fb fbb3 	bl	8023674 <HAL_GetTick>
 8027f0e:	4602      	mov	r2, r0
 8027f10:	697b      	ldr	r3, [r7, #20]
 8027f12:	1ad3      	subs	r3, r2, r3
 8027f14:	2b02      	cmp	r3, #2
 8027f16:	d901      	bls.n	8027f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f18:	2303      	movs	r3, #3
 8027f1a:	e129      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f1c:	4b5a      	ldr	r3, [pc, #360]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f1e:	681b      	ldr	r3, [r3, #0]
 8027f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027f24:	2b00      	cmp	r3, #0
 8027f26:	d0f0      	beq.n	8027f0a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f28:	687b      	ldr	r3, [r7, #4]
 8027f2a:	681b      	ldr	r3, [r3, #0]
 8027f2c:	f003 0304 	and.w	r3, r3, #4
 8027f30:	2b00      	cmp	r3, #0
 8027f32:	d105      	bne.n	8027f40 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027f34:	687b      	ldr	r3, [r7, #4]
 8027f36:	681b      	ldr	r3, [r3, #0]
 8027f38:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f3c:	2b00      	cmp	r3, #0
 8027f3e:	d079      	beq.n	8028034 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027f40:	4b52      	ldr	r3, [pc, #328]	; (802808c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027f42:	2200      	movs	r2, #0
 8027f44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f46:	f7fb fb95 	bl	8023674 <HAL_GetTick>
 8027f4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f4c:	e008      	b.n	8027f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027f4e:	f7fb fb91 	bl	8023674 <HAL_GetTick>
 8027f52:	4602      	mov	r2, r0
 8027f54:	697b      	ldr	r3, [r7, #20]
 8027f56:	1ad3      	subs	r3, r2, r3
 8027f58:	2b02      	cmp	r3, #2
 8027f5a:	d901      	bls.n	8027f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f5c:	2303      	movs	r3, #3
 8027f5e:	e107      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f60:	4b49      	ldr	r3, [pc, #292]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f62:	681b      	ldr	r3, [r3, #0]
 8027f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f6c:	d0ef      	beq.n	8027f4e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027f6e:	687b      	ldr	r3, [r7, #4]
 8027f70:	681b      	ldr	r3, [r3, #0]
 8027f72:	f003 0304 	and.w	r3, r3, #4
 8027f76:	2b00      	cmp	r3, #0
 8027f78:	d020      	beq.n	8027fbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f7a:	4b43      	ldr	r3, [pc, #268]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f80:	0f1b      	lsrs	r3, r3, #28
 8027f82:	f003 0307 	and.w	r3, r3, #7
 8027f86:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027f88:	687b      	ldr	r3, [r7, #4]
 8027f8a:	691b      	ldr	r3, [r3, #16]
 8027f8c:	019a      	lsls	r2, r3, #6
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	695b      	ldr	r3, [r3, #20]
 8027f92:	061b      	lsls	r3, r3, #24
 8027f94:	431a      	orrs	r2, r3
 8027f96:	693b      	ldr	r3, [r7, #16]
 8027f98:	071b      	lsls	r3, r3, #28
 8027f9a:	493b      	ldr	r1, [pc, #236]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f9c:	4313      	orrs	r3, r2
 8027f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027fa2:	4b39      	ldr	r3, [pc, #228]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027fa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	6a1b      	ldr	r3, [r3, #32]
 8027fb0:	3b01      	subs	r3, #1
 8027fb2:	021b      	lsls	r3, r3, #8
 8027fb4:	4934      	ldr	r1, [pc, #208]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fb6:	4313      	orrs	r3, r2
 8027fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027fbc:	687b      	ldr	r3, [r7, #4]
 8027fbe:	681b      	ldr	r3, [r3, #0]
 8027fc0:	f003 0308 	and.w	r3, r3, #8
 8027fc4:	2b00      	cmp	r3, #0
 8027fc6:	d01e      	beq.n	8028006 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027fc8:	4b2f      	ldr	r3, [pc, #188]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fce:	0e1b      	lsrs	r3, r3, #24
 8027fd0:	f003 030f 	and.w	r3, r3, #15
 8027fd4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027fd6:	687b      	ldr	r3, [r7, #4]
 8027fd8:	691b      	ldr	r3, [r3, #16]
 8027fda:	019a      	lsls	r2, r3, #6
 8027fdc:	693b      	ldr	r3, [r7, #16]
 8027fde:	061b      	lsls	r3, r3, #24
 8027fe0:	431a      	orrs	r2, r3
 8027fe2:	687b      	ldr	r3, [r7, #4]
 8027fe4:	699b      	ldr	r3, [r3, #24]
 8027fe6:	071b      	lsls	r3, r3, #28
 8027fe8:	4927      	ldr	r1, [pc, #156]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fea:	4313      	orrs	r3, r2
 8027fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027ff0:	4b25      	ldr	r3, [pc, #148]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027ffa:	687b      	ldr	r3, [r7, #4]
 8027ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027ffe:	4922      	ldr	r1, [pc, #136]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028000:	4313      	orrs	r3, r2
 8028002:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8028006:	4b21      	ldr	r3, [pc, #132]	; (802808c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8028008:	2201      	movs	r2, #1
 802800a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 802800c:	f7fb fb32 	bl	8023674 <HAL_GetTick>
 8028010:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8028012:	e008      	b.n	8028026 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8028014:	f7fb fb2e 	bl	8023674 <HAL_GetTick>
 8028018:	4602      	mov	r2, r0
 802801a:	697b      	ldr	r3, [r7, #20]
 802801c:	1ad3      	subs	r3, r2, r3
 802801e:	2b02      	cmp	r3, #2
 8028020:	d901      	bls.n	8028026 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8028022:	2303      	movs	r3, #3
 8028024:	e0a4      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8028026:	4b18      	ldr	r3, [pc, #96]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028028:	681b      	ldr	r3, [r3, #0]
 802802a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802802e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8028032:	d1ef      	bne.n	8028014 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8028034:	687b      	ldr	r3, [r7, #4]
 8028036:	681b      	ldr	r3, [r3, #0]
 8028038:	f003 0320 	and.w	r3, r3, #32
 802803c:	2b00      	cmp	r3, #0
 802803e:	f000 808b 	beq.w	8028158 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8028042:	2300      	movs	r3, #0
 8028044:	60fb      	str	r3, [r7, #12]
 8028046:	4b10      	ldr	r3, [pc, #64]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802804a:	4a0f      	ldr	r2, [pc, #60]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 802804c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028050:	6413      	str	r3, [r2, #64]	; 0x40
 8028052:	4b0d      	ldr	r3, [pc, #52]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802805a:	60fb      	str	r3, [r7, #12]
 802805c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802805e:	4b0c      	ldr	r3, [pc, #48]	; (8028090 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8028060:	681b      	ldr	r3, [r3, #0]
 8028062:	4a0b      	ldr	r2, [pc, #44]	; (8028090 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8028064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028068:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 802806a:	f7fb fb03 	bl	8023674 <HAL_GetTick>
 802806e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8028070:	e010      	b.n	8028094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8028072:	f7fb faff 	bl	8023674 <HAL_GetTick>
 8028076:	4602      	mov	r2, r0
 8028078:	697b      	ldr	r3, [r7, #20]
 802807a:	1ad3      	subs	r3, r2, r3
 802807c:	2b02      	cmp	r3, #2
 802807e:	d909      	bls.n	8028094 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8028080:	2303      	movs	r3, #3
 8028082:	e075      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8028084:	42470068 	.word	0x42470068
 8028088:	40023800 	.word	0x40023800
 802808c:	42470070 	.word	0x42470070
 8028090:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8028094:	4b38      	ldr	r3, [pc, #224]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8028096:	681b      	ldr	r3, [r3, #0]
 8028098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802809c:	2b00      	cmp	r3, #0
 802809e:	d0e8      	beq.n	8028072 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80280a0:	4b36      	ldr	r3, [pc, #216]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80280aa:	693b      	ldr	r3, [r7, #16]
 80280ac:	2b00      	cmp	r3, #0
 80280ae:	d02f      	beq.n	8028110 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80280b0:	687b      	ldr	r3, [r7, #4]
 80280b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80280b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280b8:	693a      	ldr	r2, [r7, #16]
 80280ba:	429a      	cmp	r2, r3
 80280bc:	d028      	beq.n	8028110 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80280be:	4b2f      	ldr	r3, [pc, #188]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80280c8:	4b2d      	ldr	r3, [pc, #180]	; (8028180 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280ca:	2201      	movs	r2, #1
 80280cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80280ce:	4b2c      	ldr	r3, [pc, #176]	; (8028180 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280d0:	2200      	movs	r2, #0
 80280d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80280d4:	4a29      	ldr	r2, [pc, #164]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280d6:	693b      	ldr	r3, [r7, #16]
 80280d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80280da:	4b28      	ldr	r3, [pc, #160]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280de:	f003 0301 	and.w	r3, r3, #1
 80280e2:	2b01      	cmp	r3, #1
 80280e4:	d114      	bne.n	8028110 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80280e6:	f7fb fac5 	bl	8023674 <HAL_GetTick>
 80280ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80280ec:	e00a      	b.n	8028104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80280ee:	f7fb fac1 	bl	8023674 <HAL_GetTick>
 80280f2:	4602      	mov	r2, r0
 80280f4:	697b      	ldr	r3, [r7, #20]
 80280f6:	1ad3      	subs	r3, r2, r3
 80280f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80280fc:	4293      	cmp	r3, r2
 80280fe:	d901      	bls.n	8028104 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8028100:	2303      	movs	r3, #3
 8028102:	e035      	b.n	8028170 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028104:	4b1d      	ldr	r3, [pc, #116]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028108:	f003 0302 	and.w	r3, r3, #2
 802810c:	2b00      	cmp	r3, #0
 802810e:	d0ee      	beq.n	80280ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8028110:	687b      	ldr	r3, [r7, #4]
 8028112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802811c:	d10d      	bne.n	802813a <HAL_RCCEx_PeriphCLKConfig+0x332>
 802811e:	4b17      	ldr	r3, [pc, #92]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028120:	689b      	ldr	r3, [r3, #8]
 8028122:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8028126:	687b      	ldr	r3, [r7, #4]
 8028128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802812a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802812e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028132:	4912      	ldr	r1, [pc, #72]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028134:	4313      	orrs	r3, r2
 8028136:	608b      	str	r3, [r1, #8]
 8028138:	e005      	b.n	8028146 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 802813a:	4b10      	ldr	r3, [pc, #64]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802813c:	689b      	ldr	r3, [r3, #8]
 802813e:	4a0f      	ldr	r2, [pc, #60]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028140:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8028144:	6093      	str	r3, [r2, #8]
 8028146:	4b0d      	ldr	r3, [pc, #52]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028148:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802814a:	687b      	ldr	r3, [r7, #4]
 802814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802814e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028152:	490a      	ldr	r1, [pc, #40]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028154:	4313      	orrs	r3, r2
 8028156:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8028158:	687b      	ldr	r3, [r7, #4]
 802815a:	681b      	ldr	r3, [r3, #0]
 802815c:	f003 0310 	and.w	r3, r3, #16
 8028160:	2b00      	cmp	r3, #0
 8028162:	d004      	beq.n	802816e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8028164:	687b      	ldr	r3, [r7, #4]
 8028166:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 802816a:	4b06      	ldr	r3, [pc, #24]	; (8028184 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 802816c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802816e:	2300      	movs	r3, #0
}
 8028170:	4618      	mov	r0, r3
 8028172:	3718      	adds	r7, #24
 8028174:	46bd      	mov	sp, r7
 8028176:	bd80      	pop	{r7, pc}
 8028178:	40007000 	.word	0x40007000
 802817c:	40023800 	.word	0x40023800
 8028180:	42470e40 	.word	0x42470e40
 8028184:	424711e0 	.word	0x424711e0

08028188 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8028188:	b580      	push	{r7, lr}
 802818a:	b082      	sub	sp, #8
 802818c:	af00      	add	r7, sp, #0
 802818e:	6078      	str	r0, [r7, #4]
 8028190:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8028192:	687b      	ldr	r3, [r7, #4]
 8028194:	2b00      	cmp	r3, #0
 8028196:	d101      	bne.n	802819c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8028198:	2301      	movs	r3, #1
 802819a:	e025      	b.n	80281e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 802819c:	687b      	ldr	r3, [r7, #4]
 802819e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80281a2:	b2db      	uxtb	r3, r3
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d106      	bne.n	80281b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80281a8:	687b      	ldr	r3, [r7, #4]
 80281aa:	2200      	movs	r2, #0
 80281ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80281b0:	6878      	ldr	r0, [r7, #4]
 80281b2:	f7f9 fe71 	bl	8021e98 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80281b6:	687b      	ldr	r3, [r7, #4]
 80281b8:	2202      	movs	r2, #2
 80281ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	681a      	ldr	r2, [r3, #0]
 80281c2:	687b      	ldr	r3, [r7, #4]
 80281c4:	3304      	adds	r3, #4
 80281c6:	4619      	mov	r1, r3
 80281c8:	4610      	mov	r0, r2
 80281ca:	f002 fb47 	bl	802a85c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	6818      	ldr	r0, [r3, #0]
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	685b      	ldr	r3, [r3, #4]
 80281d6:	461a      	mov	r2, r3
 80281d8:	6839      	ldr	r1, [r7, #0]
 80281da:	f002 fb9c 	bl	802a916 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80281de:	687b      	ldr	r3, [r7, #4]
 80281e0:	2201      	movs	r2, #1
 80281e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80281e6:	2300      	movs	r3, #0
}
 80281e8:	4618      	mov	r0, r3
 80281ea:	3708      	adds	r7, #8
 80281ec:	46bd      	mov	sp, r7
 80281ee:	bd80      	pop	{r7, pc}

080281f0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80281f0:	b580      	push	{r7, lr}
 80281f2:	b086      	sub	sp, #24
 80281f4:	af00      	add	r7, sp, #0
 80281f6:	60f8      	str	r0, [r7, #12]
 80281f8:	60b9      	str	r1, [r7, #8]
 80281fa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80281fc:	68fb      	ldr	r3, [r7, #12]
 80281fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028202:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8028204:	7dfb      	ldrb	r3, [r7, #23]
 8028206:	2b02      	cmp	r3, #2
 8028208:	d101      	bne.n	802820e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 802820a:	2302      	movs	r3, #2
 802820c:	e021      	b.n	8028252 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802820e:	7dfb      	ldrb	r3, [r7, #23]
 8028210:	2b01      	cmp	r3, #1
 8028212:	d002      	beq.n	802821a <HAL_SDRAM_SendCommand+0x2a>
 8028214:	7dfb      	ldrb	r3, [r7, #23]
 8028216:	2b05      	cmp	r3, #5
 8028218:	d118      	bne.n	802824c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	2202      	movs	r2, #2
 802821e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8028222:	68fb      	ldr	r3, [r7, #12]
 8028224:	681b      	ldr	r3, [r3, #0]
 8028226:	687a      	ldr	r2, [r7, #4]
 8028228:	68b9      	ldr	r1, [r7, #8]
 802822a:	4618      	mov	r0, r3
 802822c:	f002 fbdc 	bl	802a9e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028230:	68bb      	ldr	r3, [r7, #8]
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	2b02      	cmp	r3, #2
 8028236:	d104      	bne.n	8028242 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8028238:	68fb      	ldr	r3, [r7, #12]
 802823a:	2205      	movs	r2, #5
 802823c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028240:	e006      	b.n	8028250 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8028242:	68fb      	ldr	r3, [r7, #12]
 8028244:	2201      	movs	r2, #1
 8028246:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802824a:	e001      	b.n	8028250 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 802824c:	2301      	movs	r3, #1
 802824e:	e000      	b.n	8028252 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8028250:	2300      	movs	r3, #0
}
 8028252:	4618      	mov	r0, r3
 8028254:	3718      	adds	r7, #24
 8028256:	46bd      	mov	sp, r7
 8028258:	bd80      	pop	{r7, pc}

0802825a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 802825a:	b580      	push	{r7, lr}
 802825c:	b082      	sub	sp, #8
 802825e:	af00      	add	r7, sp, #0
 8028260:	6078      	str	r0, [r7, #4]
 8028262:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8028264:	687b      	ldr	r3, [r7, #4]
 8028266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802826a:	b2db      	uxtb	r3, r3
 802826c:	2b02      	cmp	r3, #2
 802826e:	d101      	bne.n	8028274 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8028270:	2302      	movs	r3, #2
 8028272:	e016      	b.n	80282a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8028274:	687b      	ldr	r3, [r7, #4]
 8028276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802827a:	b2db      	uxtb	r3, r3
 802827c:	2b01      	cmp	r3, #1
 802827e:	d10f      	bne.n	80282a0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8028280:	687b      	ldr	r3, [r7, #4]
 8028282:	2202      	movs	r2, #2
 8028284:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8028288:	687b      	ldr	r3, [r7, #4]
 802828a:	681b      	ldr	r3, [r3, #0]
 802828c:	6839      	ldr	r1, [r7, #0]
 802828e:	4618      	mov	r0, r3
 8028290:	f002 fbe7 	bl	802aa62 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8028294:	687b      	ldr	r3, [r7, #4]
 8028296:	2201      	movs	r2, #1
 8028298:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 802829c:	2300      	movs	r3, #0
 802829e:	e000      	b.n	80282a2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80282a0:	2301      	movs	r3, #1
}
 80282a2:	4618      	mov	r0, r3
 80282a4:	3708      	adds	r7, #8
 80282a6:	46bd      	mov	sp, r7
 80282a8:	bd80      	pop	{r7, pc}

080282aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80282aa:	b580      	push	{r7, lr}
 80282ac:	b082      	sub	sp, #8
 80282ae:	af00      	add	r7, sp, #0
 80282b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80282b2:	687b      	ldr	r3, [r7, #4]
 80282b4:	2b00      	cmp	r3, #0
 80282b6:	d101      	bne.n	80282bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80282b8:	2301      	movs	r3, #1
 80282ba:	e07b      	b.n	80283b4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282c0:	2b00      	cmp	r3, #0
 80282c2:	d108      	bne.n	80282d6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	685b      	ldr	r3, [r3, #4]
 80282c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80282cc:	d009      	beq.n	80282e2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80282ce:	687b      	ldr	r3, [r7, #4]
 80282d0:	2200      	movs	r2, #0
 80282d2:	61da      	str	r2, [r3, #28]
 80282d4:	e005      	b.n	80282e2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80282d6:	687b      	ldr	r3, [r7, #4]
 80282d8:	2200      	movs	r2, #0
 80282da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80282dc:	687b      	ldr	r3, [r7, #4]
 80282de:	2200      	movs	r2, #0
 80282e0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80282e2:	687b      	ldr	r3, [r7, #4]
 80282e4:	2200      	movs	r2, #0
 80282e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80282e8:	687b      	ldr	r3, [r7, #4]
 80282ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80282ee:	b2db      	uxtb	r3, r3
 80282f0:	2b00      	cmp	r3, #0
 80282f2:	d106      	bne.n	8028302 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	2200      	movs	r2, #0
 80282f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80282fc:	6878      	ldr	r0, [r7, #4]
 80282fe:	f7f9 fc09 	bl	8021b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028302:	687b      	ldr	r3, [r7, #4]
 8028304:	2202      	movs	r2, #2
 8028306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802830a:	687b      	ldr	r3, [r7, #4]
 802830c:	681b      	ldr	r3, [r3, #0]
 802830e:	681a      	ldr	r2, [r3, #0]
 8028310:	687b      	ldr	r3, [r7, #4]
 8028312:	681b      	ldr	r3, [r3, #0]
 8028314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802831a:	687b      	ldr	r3, [r7, #4]
 802831c:	685b      	ldr	r3, [r3, #4]
 802831e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8028322:	687b      	ldr	r3, [r7, #4]
 8028324:	689b      	ldr	r3, [r3, #8]
 8028326:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802832a:	431a      	orrs	r2, r3
 802832c:	687b      	ldr	r3, [r7, #4]
 802832e:	68db      	ldr	r3, [r3, #12]
 8028330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028334:	431a      	orrs	r2, r3
 8028336:	687b      	ldr	r3, [r7, #4]
 8028338:	691b      	ldr	r3, [r3, #16]
 802833a:	f003 0302 	and.w	r3, r3, #2
 802833e:	431a      	orrs	r2, r3
 8028340:	687b      	ldr	r3, [r7, #4]
 8028342:	695b      	ldr	r3, [r3, #20]
 8028344:	f003 0301 	and.w	r3, r3, #1
 8028348:	431a      	orrs	r2, r3
 802834a:	687b      	ldr	r3, [r7, #4]
 802834c:	699b      	ldr	r3, [r3, #24]
 802834e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028352:	431a      	orrs	r2, r3
 8028354:	687b      	ldr	r3, [r7, #4]
 8028356:	69db      	ldr	r3, [r3, #28]
 8028358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802835c:	431a      	orrs	r2, r3
 802835e:	687b      	ldr	r3, [r7, #4]
 8028360:	6a1b      	ldr	r3, [r3, #32]
 8028362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028366:	ea42 0103 	orr.w	r1, r2, r3
 802836a:	687b      	ldr	r3, [r7, #4]
 802836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802836e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8028372:	687b      	ldr	r3, [r7, #4]
 8028374:	681b      	ldr	r3, [r3, #0]
 8028376:	430a      	orrs	r2, r1
 8028378:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 802837a:	687b      	ldr	r3, [r7, #4]
 802837c:	699b      	ldr	r3, [r3, #24]
 802837e:	0c1b      	lsrs	r3, r3, #16
 8028380:	f003 0104 	and.w	r1, r3, #4
 8028384:	687b      	ldr	r3, [r7, #4]
 8028386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028388:	f003 0210 	and.w	r2, r3, #16
 802838c:	687b      	ldr	r3, [r7, #4]
 802838e:	681b      	ldr	r3, [r3, #0]
 8028390:	430a      	orrs	r2, r1
 8028392:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028394:	687b      	ldr	r3, [r7, #4]
 8028396:	681b      	ldr	r3, [r3, #0]
 8028398:	69da      	ldr	r2, [r3, #28]
 802839a:	687b      	ldr	r3, [r7, #4]
 802839c:	681b      	ldr	r3, [r3, #0]
 802839e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80283a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	2200      	movs	r2, #0
 80283a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80283aa:	687b      	ldr	r3, [r7, #4]
 80283ac:	2201      	movs	r2, #1
 80283ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80283b2:	2300      	movs	r3, #0
}
 80283b4:	4618      	mov	r0, r3
 80283b6:	3708      	adds	r7, #8
 80283b8:	46bd      	mov	sp, r7
 80283ba:	bd80      	pop	{r7, pc}

080283bc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80283bc:	b580      	push	{r7, lr}
 80283be:	b082      	sub	sp, #8
 80283c0:	af00      	add	r7, sp, #0
 80283c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80283c4:	687b      	ldr	r3, [r7, #4]
 80283c6:	2b00      	cmp	r3, #0
 80283c8:	d101      	bne.n	80283ce <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80283ca:	2301      	movs	r3, #1
 80283cc:	e01a      	b.n	8028404 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80283ce:	687b      	ldr	r3, [r7, #4]
 80283d0:	2202      	movs	r2, #2
 80283d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80283d6:	687b      	ldr	r3, [r7, #4]
 80283d8:	681b      	ldr	r3, [r3, #0]
 80283da:	681a      	ldr	r2, [r3, #0]
 80283dc:	687b      	ldr	r3, [r7, #4]
 80283de:	681b      	ldr	r3, [r3, #0]
 80283e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80283e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80283e6:	6878      	ldr	r0, [r7, #4]
 80283e8:	f7f9 fbdc 	bl	8021ba4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80283ec:	687b      	ldr	r3, [r7, #4]
 80283ee:	2200      	movs	r2, #0
 80283f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	2200      	movs	r2, #0
 80283f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80283fa:	687b      	ldr	r3, [r7, #4]
 80283fc:	2200      	movs	r2, #0
 80283fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8028402:	2300      	movs	r3, #0
}
 8028404:	4618      	mov	r0, r3
 8028406:	3708      	adds	r7, #8
 8028408:	46bd      	mov	sp, r7
 802840a:	bd80      	pop	{r7, pc}

0802840c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802840c:	b580      	push	{r7, lr}
 802840e:	b088      	sub	sp, #32
 8028410:	af00      	add	r7, sp, #0
 8028412:	60f8      	str	r0, [r7, #12]
 8028414:	60b9      	str	r1, [r7, #8]
 8028416:	603b      	str	r3, [r7, #0]
 8028418:	4613      	mov	r3, r2
 802841a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802841c:	2300      	movs	r3, #0
 802841e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028420:	68fb      	ldr	r3, [r7, #12]
 8028422:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028426:	2b01      	cmp	r3, #1
 8028428:	d101      	bne.n	802842e <HAL_SPI_Transmit+0x22>
 802842a:	2302      	movs	r3, #2
 802842c:	e126      	b.n	802867c <HAL_SPI_Transmit+0x270>
 802842e:	68fb      	ldr	r3, [r7, #12]
 8028430:	2201      	movs	r2, #1
 8028432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028436:	f7fb f91d 	bl	8023674 <HAL_GetTick>
 802843a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802843c:	88fb      	ldrh	r3, [r7, #6]
 802843e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028440:	68fb      	ldr	r3, [r7, #12]
 8028442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028446:	b2db      	uxtb	r3, r3
 8028448:	2b01      	cmp	r3, #1
 802844a:	d002      	beq.n	8028452 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802844c:	2302      	movs	r3, #2
 802844e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028450:	e10b      	b.n	802866a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028452:	68bb      	ldr	r3, [r7, #8]
 8028454:	2b00      	cmp	r3, #0
 8028456:	d002      	beq.n	802845e <HAL_SPI_Transmit+0x52>
 8028458:	88fb      	ldrh	r3, [r7, #6]
 802845a:	2b00      	cmp	r3, #0
 802845c:	d102      	bne.n	8028464 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802845e:	2301      	movs	r3, #1
 8028460:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028462:	e102      	b.n	802866a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028464:	68fb      	ldr	r3, [r7, #12]
 8028466:	2203      	movs	r2, #3
 8028468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802846c:	68fb      	ldr	r3, [r7, #12]
 802846e:	2200      	movs	r2, #0
 8028470:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028472:	68fb      	ldr	r3, [r7, #12]
 8028474:	68ba      	ldr	r2, [r7, #8]
 8028476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028478:	68fb      	ldr	r3, [r7, #12]
 802847a:	88fa      	ldrh	r2, [r7, #6]
 802847c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802847e:	68fb      	ldr	r3, [r7, #12]
 8028480:	88fa      	ldrh	r2, [r7, #6]
 8028482:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028484:	68fb      	ldr	r3, [r7, #12]
 8028486:	2200      	movs	r2, #0
 8028488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 802848a:	68fb      	ldr	r3, [r7, #12]
 802848c:	2200      	movs	r2, #0
 802848e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028490:	68fb      	ldr	r3, [r7, #12]
 8028492:	2200      	movs	r2, #0
 8028494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028496:	68fb      	ldr	r3, [r7, #12]
 8028498:	2200      	movs	r2, #0
 802849a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 802849c:	68fb      	ldr	r3, [r7, #12]
 802849e:	2200      	movs	r2, #0
 80284a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80284a2:	68fb      	ldr	r3, [r7, #12]
 80284a4:	689b      	ldr	r3, [r3, #8]
 80284a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80284aa:	d10f      	bne.n	80284cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80284ac:	68fb      	ldr	r3, [r7, #12]
 80284ae:	681b      	ldr	r3, [r3, #0]
 80284b0:	681a      	ldr	r2, [r3, #0]
 80284b2:	68fb      	ldr	r3, [r7, #12]
 80284b4:	681b      	ldr	r3, [r3, #0]
 80284b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80284ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80284bc:	68fb      	ldr	r3, [r7, #12]
 80284be:	681b      	ldr	r3, [r3, #0]
 80284c0:	681a      	ldr	r2, [r3, #0]
 80284c2:	68fb      	ldr	r3, [r7, #12]
 80284c4:	681b      	ldr	r3, [r3, #0]
 80284c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80284ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80284cc:	68fb      	ldr	r3, [r7, #12]
 80284ce:	681b      	ldr	r3, [r3, #0]
 80284d0:	681b      	ldr	r3, [r3, #0]
 80284d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80284d6:	2b40      	cmp	r3, #64	; 0x40
 80284d8:	d007      	beq.n	80284ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80284da:	68fb      	ldr	r3, [r7, #12]
 80284dc:	681b      	ldr	r3, [r3, #0]
 80284de:	681a      	ldr	r2, [r3, #0]
 80284e0:	68fb      	ldr	r3, [r7, #12]
 80284e2:	681b      	ldr	r3, [r3, #0]
 80284e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80284e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80284ea:	68fb      	ldr	r3, [r7, #12]
 80284ec:	68db      	ldr	r3, [r3, #12]
 80284ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80284f2:	d14b      	bne.n	802858c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80284f4:	68fb      	ldr	r3, [r7, #12]
 80284f6:	685b      	ldr	r3, [r3, #4]
 80284f8:	2b00      	cmp	r3, #0
 80284fa:	d002      	beq.n	8028502 <HAL_SPI_Transmit+0xf6>
 80284fc:	8afb      	ldrh	r3, [r7, #22]
 80284fe:	2b01      	cmp	r3, #1
 8028500:	d13e      	bne.n	8028580 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028502:	68fb      	ldr	r3, [r7, #12]
 8028504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028506:	881a      	ldrh	r2, [r3, #0]
 8028508:	68fb      	ldr	r3, [r7, #12]
 802850a:	681b      	ldr	r3, [r3, #0]
 802850c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802850e:	68fb      	ldr	r3, [r7, #12]
 8028510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028512:	1c9a      	adds	r2, r3, #2
 8028514:	68fb      	ldr	r3, [r7, #12]
 8028516:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028518:	68fb      	ldr	r3, [r7, #12]
 802851a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802851c:	b29b      	uxth	r3, r3
 802851e:	3b01      	subs	r3, #1
 8028520:	b29a      	uxth	r2, r3
 8028522:	68fb      	ldr	r3, [r7, #12]
 8028524:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028526:	e02b      	b.n	8028580 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028528:	68fb      	ldr	r3, [r7, #12]
 802852a:	681b      	ldr	r3, [r3, #0]
 802852c:	689b      	ldr	r3, [r3, #8]
 802852e:	f003 0302 	and.w	r3, r3, #2
 8028532:	2b02      	cmp	r3, #2
 8028534:	d112      	bne.n	802855c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028536:	68fb      	ldr	r3, [r7, #12]
 8028538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802853a:	881a      	ldrh	r2, [r3, #0]
 802853c:	68fb      	ldr	r3, [r7, #12]
 802853e:	681b      	ldr	r3, [r3, #0]
 8028540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028542:	68fb      	ldr	r3, [r7, #12]
 8028544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028546:	1c9a      	adds	r2, r3, #2
 8028548:	68fb      	ldr	r3, [r7, #12]
 802854a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802854c:	68fb      	ldr	r3, [r7, #12]
 802854e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028550:	b29b      	uxth	r3, r3
 8028552:	3b01      	subs	r3, #1
 8028554:	b29a      	uxth	r2, r3
 8028556:	68fb      	ldr	r3, [r7, #12]
 8028558:	86da      	strh	r2, [r3, #54]	; 0x36
 802855a:	e011      	b.n	8028580 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802855c:	f7fb f88a 	bl	8023674 <HAL_GetTick>
 8028560:	4602      	mov	r2, r0
 8028562:	69bb      	ldr	r3, [r7, #24]
 8028564:	1ad3      	subs	r3, r2, r3
 8028566:	683a      	ldr	r2, [r7, #0]
 8028568:	429a      	cmp	r2, r3
 802856a:	d803      	bhi.n	8028574 <HAL_SPI_Transmit+0x168>
 802856c:	683b      	ldr	r3, [r7, #0]
 802856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028572:	d102      	bne.n	802857a <HAL_SPI_Transmit+0x16e>
 8028574:	683b      	ldr	r3, [r7, #0]
 8028576:	2b00      	cmp	r3, #0
 8028578:	d102      	bne.n	8028580 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 802857a:	2303      	movs	r3, #3
 802857c:	77fb      	strb	r3, [r7, #31]
          goto error;
 802857e:	e074      	b.n	802866a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028584:	b29b      	uxth	r3, r3
 8028586:	2b00      	cmp	r3, #0
 8028588:	d1ce      	bne.n	8028528 <HAL_SPI_Transmit+0x11c>
 802858a:	e04c      	b.n	8028626 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802858c:	68fb      	ldr	r3, [r7, #12]
 802858e:	685b      	ldr	r3, [r3, #4]
 8028590:	2b00      	cmp	r3, #0
 8028592:	d002      	beq.n	802859a <HAL_SPI_Transmit+0x18e>
 8028594:	8afb      	ldrh	r3, [r7, #22]
 8028596:	2b01      	cmp	r3, #1
 8028598:	d140      	bne.n	802861c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802859a:	68fb      	ldr	r3, [r7, #12]
 802859c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802859e:	68fb      	ldr	r3, [r7, #12]
 80285a0:	681b      	ldr	r3, [r3, #0]
 80285a2:	330c      	adds	r3, #12
 80285a4:	7812      	ldrb	r2, [r2, #0]
 80285a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80285a8:	68fb      	ldr	r3, [r7, #12]
 80285aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285ac:	1c5a      	adds	r2, r3, #1
 80285ae:	68fb      	ldr	r3, [r7, #12]
 80285b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80285b2:	68fb      	ldr	r3, [r7, #12]
 80285b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80285b6:	b29b      	uxth	r3, r3
 80285b8:	3b01      	subs	r3, #1
 80285ba:	b29a      	uxth	r2, r3
 80285bc:	68fb      	ldr	r3, [r7, #12]
 80285be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80285c0:	e02c      	b.n	802861c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80285c2:	68fb      	ldr	r3, [r7, #12]
 80285c4:	681b      	ldr	r3, [r3, #0]
 80285c6:	689b      	ldr	r3, [r3, #8]
 80285c8:	f003 0302 	and.w	r3, r3, #2
 80285cc:	2b02      	cmp	r3, #2
 80285ce:	d113      	bne.n	80285f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80285d0:	68fb      	ldr	r3, [r7, #12]
 80285d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80285d4:	68fb      	ldr	r3, [r7, #12]
 80285d6:	681b      	ldr	r3, [r3, #0]
 80285d8:	330c      	adds	r3, #12
 80285da:	7812      	ldrb	r2, [r2, #0]
 80285dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80285de:	68fb      	ldr	r3, [r7, #12]
 80285e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285e2:	1c5a      	adds	r2, r3, #1
 80285e4:	68fb      	ldr	r3, [r7, #12]
 80285e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80285e8:	68fb      	ldr	r3, [r7, #12]
 80285ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80285ec:	b29b      	uxth	r3, r3
 80285ee:	3b01      	subs	r3, #1
 80285f0:	b29a      	uxth	r2, r3
 80285f2:	68fb      	ldr	r3, [r7, #12]
 80285f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80285f6:	e011      	b.n	802861c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80285f8:	f7fb f83c 	bl	8023674 <HAL_GetTick>
 80285fc:	4602      	mov	r2, r0
 80285fe:	69bb      	ldr	r3, [r7, #24]
 8028600:	1ad3      	subs	r3, r2, r3
 8028602:	683a      	ldr	r2, [r7, #0]
 8028604:	429a      	cmp	r2, r3
 8028606:	d803      	bhi.n	8028610 <HAL_SPI_Transmit+0x204>
 8028608:	683b      	ldr	r3, [r7, #0]
 802860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802860e:	d102      	bne.n	8028616 <HAL_SPI_Transmit+0x20a>
 8028610:	683b      	ldr	r3, [r7, #0]
 8028612:	2b00      	cmp	r3, #0
 8028614:	d102      	bne.n	802861c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8028616:	2303      	movs	r3, #3
 8028618:	77fb      	strb	r3, [r7, #31]
          goto error;
 802861a:	e026      	b.n	802866a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802861c:	68fb      	ldr	r3, [r7, #12]
 802861e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028620:	b29b      	uxth	r3, r3
 8028622:	2b00      	cmp	r3, #0
 8028624:	d1cd      	bne.n	80285c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028626:	69ba      	ldr	r2, [r7, #24]
 8028628:	6839      	ldr	r1, [r7, #0]
 802862a:	68f8      	ldr	r0, [r7, #12]
 802862c:	f000 fbda 	bl	8028de4 <SPI_EndRxTxTransaction>
 8028630:	4603      	mov	r3, r0
 8028632:	2b00      	cmp	r3, #0
 8028634:	d002      	beq.n	802863c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028636:	68fb      	ldr	r3, [r7, #12]
 8028638:	2220      	movs	r2, #32
 802863a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802863c:	68fb      	ldr	r3, [r7, #12]
 802863e:	689b      	ldr	r3, [r3, #8]
 8028640:	2b00      	cmp	r3, #0
 8028642:	d10a      	bne.n	802865a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028644:	2300      	movs	r3, #0
 8028646:	613b      	str	r3, [r7, #16]
 8028648:	68fb      	ldr	r3, [r7, #12]
 802864a:	681b      	ldr	r3, [r3, #0]
 802864c:	68db      	ldr	r3, [r3, #12]
 802864e:	613b      	str	r3, [r7, #16]
 8028650:	68fb      	ldr	r3, [r7, #12]
 8028652:	681b      	ldr	r3, [r3, #0]
 8028654:	689b      	ldr	r3, [r3, #8]
 8028656:	613b      	str	r3, [r7, #16]
 8028658:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802865a:	68fb      	ldr	r3, [r7, #12]
 802865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802865e:	2b00      	cmp	r3, #0
 8028660:	d002      	beq.n	8028668 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8028662:	2301      	movs	r3, #1
 8028664:	77fb      	strb	r3, [r7, #31]
 8028666:	e000      	b.n	802866a <HAL_SPI_Transmit+0x25e>
  }

error:
 8028668:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802866a:	68fb      	ldr	r3, [r7, #12]
 802866c:	2201      	movs	r2, #1
 802866e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028672:	68fb      	ldr	r3, [r7, #12]
 8028674:	2200      	movs	r2, #0
 8028676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802867a:	7ffb      	ldrb	r3, [r7, #31]
}
 802867c:	4618      	mov	r0, r3
 802867e:	3720      	adds	r7, #32
 8028680:	46bd      	mov	sp, r7
 8028682:	bd80      	pop	{r7, pc}

08028684 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028684:	b580      	push	{r7, lr}
 8028686:	b088      	sub	sp, #32
 8028688:	af02      	add	r7, sp, #8
 802868a:	60f8      	str	r0, [r7, #12]
 802868c:	60b9      	str	r1, [r7, #8]
 802868e:	603b      	str	r3, [r7, #0]
 8028690:	4613      	mov	r3, r2
 8028692:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028694:	2300      	movs	r3, #0
 8028696:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028698:	68fb      	ldr	r3, [r7, #12]
 802869a:	685b      	ldr	r3, [r3, #4]
 802869c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80286a0:	d112      	bne.n	80286c8 <HAL_SPI_Receive+0x44>
 80286a2:	68fb      	ldr	r3, [r7, #12]
 80286a4:	689b      	ldr	r3, [r3, #8]
 80286a6:	2b00      	cmp	r3, #0
 80286a8:	d10e      	bne.n	80286c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80286aa:	68fb      	ldr	r3, [r7, #12]
 80286ac:	2204      	movs	r2, #4
 80286ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80286b2:	88fa      	ldrh	r2, [r7, #6]
 80286b4:	683b      	ldr	r3, [r7, #0]
 80286b6:	9300      	str	r3, [sp, #0]
 80286b8:	4613      	mov	r3, r2
 80286ba:	68ba      	ldr	r2, [r7, #8]
 80286bc:	68b9      	ldr	r1, [r7, #8]
 80286be:	68f8      	ldr	r0, [r7, #12]
 80286c0:	f000 f8f1 	bl	80288a6 <HAL_SPI_TransmitReceive>
 80286c4:	4603      	mov	r3, r0
 80286c6:	e0ea      	b.n	802889e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80286c8:	68fb      	ldr	r3, [r7, #12]
 80286ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80286ce:	2b01      	cmp	r3, #1
 80286d0:	d101      	bne.n	80286d6 <HAL_SPI_Receive+0x52>
 80286d2:	2302      	movs	r3, #2
 80286d4:	e0e3      	b.n	802889e <HAL_SPI_Receive+0x21a>
 80286d6:	68fb      	ldr	r3, [r7, #12]
 80286d8:	2201      	movs	r2, #1
 80286da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80286de:	f7fa ffc9 	bl	8023674 <HAL_GetTick>
 80286e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80286e4:	68fb      	ldr	r3, [r7, #12]
 80286e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80286ea:	b2db      	uxtb	r3, r3
 80286ec:	2b01      	cmp	r3, #1
 80286ee:	d002      	beq.n	80286f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80286f0:	2302      	movs	r3, #2
 80286f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80286f4:	e0ca      	b.n	802888c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80286f6:	68bb      	ldr	r3, [r7, #8]
 80286f8:	2b00      	cmp	r3, #0
 80286fa:	d002      	beq.n	8028702 <HAL_SPI_Receive+0x7e>
 80286fc:	88fb      	ldrh	r3, [r7, #6]
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d102      	bne.n	8028708 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028702:	2301      	movs	r3, #1
 8028704:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028706:	e0c1      	b.n	802888c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028708:	68fb      	ldr	r3, [r7, #12]
 802870a:	2204      	movs	r2, #4
 802870c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028710:	68fb      	ldr	r3, [r7, #12]
 8028712:	2200      	movs	r2, #0
 8028714:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028716:	68fb      	ldr	r3, [r7, #12]
 8028718:	68ba      	ldr	r2, [r7, #8]
 802871a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802871c:	68fb      	ldr	r3, [r7, #12]
 802871e:	88fa      	ldrh	r2, [r7, #6]
 8028720:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028722:	68fb      	ldr	r3, [r7, #12]
 8028724:	88fa      	ldrh	r2, [r7, #6]
 8028726:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028728:	68fb      	ldr	r3, [r7, #12]
 802872a:	2200      	movs	r2, #0
 802872c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802872e:	68fb      	ldr	r3, [r7, #12]
 8028730:	2200      	movs	r2, #0
 8028732:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028734:	68fb      	ldr	r3, [r7, #12]
 8028736:	2200      	movs	r2, #0
 8028738:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 802873a:	68fb      	ldr	r3, [r7, #12]
 802873c:	2200      	movs	r2, #0
 802873e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028740:	68fb      	ldr	r3, [r7, #12]
 8028742:	2200      	movs	r2, #0
 8028744:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028746:	68fb      	ldr	r3, [r7, #12]
 8028748:	689b      	ldr	r3, [r3, #8]
 802874a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802874e:	d10f      	bne.n	8028770 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8028750:	68fb      	ldr	r3, [r7, #12]
 8028752:	681b      	ldr	r3, [r3, #0]
 8028754:	681a      	ldr	r2, [r3, #0]
 8028756:	68fb      	ldr	r3, [r7, #12]
 8028758:	681b      	ldr	r3, [r3, #0]
 802875a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802875e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8028760:	68fb      	ldr	r3, [r7, #12]
 8028762:	681b      	ldr	r3, [r3, #0]
 8028764:	681a      	ldr	r2, [r3, #0]
 8028766:	68fb      	ldr	r3, [r7, #12]
 8028768:	681b      	ldr	r3, [r3, #0]
 802876a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802876e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028770:	68fb      	ldr	r3, [r7, #12]
 8028772:	681b      	ldr	r3, [r3, #0]
 8028774:	681b      	ldr	r3, [r3, #0]
 8028776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802877a:	2b40      	cmp	r3, #64	; 0x40
 802877c:	d007      	beq.n	802878e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802877e:	68fb      	ldr	r3, [r7, #12]
 8028780:	681b      	ldr	r3, [r3, #0]
 8028782:	681a      	ldr	r2, [r3, #0]
 8028784:	68fb      	ldr	r3, [r7, #12]
 8028786:	681b      	ldr	r3, [r3, #0]
 8028788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802878c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802878e:	68fb      	ldr	r3, [r7, #12]
 8028790:	68db      	ldr	r3, [r3, #12]
 8028792:	2b00      	cmp	r3, #0
 8028794:	d162      	bne.n	802885c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028796:	e02e      	b.n	80287f6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028798:	68fb      	ldr	r3, [r7, #12]
 802879a:	681b      	ldr	r3, [r3, #0]
 802879c:	689b      	ldr	r3, [r3, #8]
 802879e:	f003 0301 	and.w	r3, r3, #1
 80287a2:	2b01      	cmp	r3, #1
 80287a4:	d115      	bne.n	80287d2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80287a6:	68fb      	ldr	r3, [r7, #12]
 80287a8:	681b      	ldr	r3, [r3, #0]
 80287aa:	f103 020c 	add.w	r2, r3, #12
 80287ae:	68fb      	ldr	r3, [r7, #12]
 80287b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287b2:	7812      	ldrb	r2, [r2, #0]
 80287b4:	b2d2      	uxtb	r2, r2
 80287b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80287b8:	68fb      	ldr	r3, [r7, #12]
 80287ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287bc:	1c5a      	adds	r2, r3, #1
 80287be:	68fb      	ldr	r3, [r7, #12]
 80287c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80287c2:	68fb      	ldr	r3, [r7, #12]
 80287c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80287c6:	b29b      	uxth	r3, r3
 80287c8:	3b01      	subs	r3, #1
 80287ca:	b29a      	uxth	r2, r3
 80287cc:	68fb      	ldr	r3, [r7, #12]
 80287ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80287d0:	e011      	b.n	80287f6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80287d2:	f7fa ff4f 	bl	8023674 <HAL_GetTick>
 80287d6:	4602      	mov	r2, r0
 80287d8:	693b      	ldr	r3, [r7, #16]
 80287da:	1ad3      	subs	r3, r2, r3
 80287dc:	683a      	ldr	r2, [r7, #0]
 80287de:	429a      	cmp	r2, r3
 80287e0:	d803      	bhi.n	80287ea <HAL_SPI_Receive+0x166>
 80287e2:	683b      	ldr	r3, [r7, #0]
 80287e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80287e8:	d102      	bne.n	80287f0 <HAL_SPI_Receive+0x16c>
 80287ea:	683b      	ldr	r3, [r7, #0]
 80287ec:	2b00      	cmp	r3, #0
 80287ee:	d102      	bne.n	80287f6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80287f0:	2303      	movs	r3, #3
 80287f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80287f4:	e04a      	b.n	802888c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80287f6:	68fb      	ldr	r3, [r7, #12]
 80287f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80287fa:	b29b      	uxth	r3, r3
 80287fc:	2b00      	cmp	r3, #0
 80287fe:	d1cb      	bne.n	8028798 <HAL_SPI_Receive+0x114>
 8028800:	e031      	b.n	8028866 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028802:	68fb      	ldr	r3, [r7, #12]
 8028804:	681b      	ldr	r3, [r3, #0]
 8028806:	689b      	ldr	r3, [r3, #8]
 8028808:	f003 0301 	and.w	r3, r3, #1
 802880c:	2b01      	cmp	r3, #1
 802880e:	d113      	bne.n	8028838 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028810:	68fb      	ldr	r3, [r7, #12]
 8028812:	681b      	ldr	r3, [r3, #0]
 8028814:	68da      	ldr	r2, [r3, #12]
 8028816:	68fb      	ldr	r3, [r7, #12]
 8028818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802881a:	b292      	uxth	r2, r2
 802881c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802881e:	68fb      	ldr	r3, [r7, #12]
 8028820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028822:	1c9a      	adds	r2, r3, #2
 8028824:	68fb      	ldr	r3, [r7, #12]
 8028826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028828:	68fb      	ldr	r3, [r7, #12]
 802882a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802882c:	b29b      	uxth	r3, r3
 802882e:	3b01      	subs	r3, #1
 8028830:	b29a      	uxth	r2, r3
 8028832:	68fb      	ldr	r3, [r7, #12]
 8028834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028836:	e011      	b.n	802885c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028838:	f7fa ff1c 	bl	8023674 <HAL_GetTick>
 802883c:	4602      	mov	r2, r0
 802883e:	693b      	ldr	r3, [r7, #16]
 8028840:	1ad3      	subs	r3, r2, r3
 8028842:	683a      	ldr	r2, [r7, #0]
 8028844:	429a      	cmp	r2, r3
 8028846:	d803      	bhi.n	8028850 <HAL_SPI_Receive+0x1cc>
 8028848:	683b      	ldr	r3, [r7, #0]
 802884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802884e:	d102      	bne.n	8028856 <HAL_SPI_Receive+0x1d2>
 8028850:	683b      	ldr	r3, [r7, #0]
 8028852:	2b00      	cmp	r3, #0
 8028854:	d102      	bne.n	802885c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8028856:	2303      	movs	r3, #3
 8028858:	75fb      	strb	r3, [r7, #23]
          goto error;
 802885a:	e017      	b.n	802888c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802885c:	68fb      	ldr	r3, [r7, #12]
 802885e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028860:	b29b      	uxth	r3, r3
 8028862:	2b00      	cmp	r3, #0
 8028864:	d1cd      	bne.n	8028802 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028866:	693a      	ldr	r2, [r7, #16]
 8028868:	6839      	ldr	r1, [r7, #0]
 802886a:	68f8      	ldr	r0, [r7, #12]
 802886c:	f000 fa54 	bl	8028d18 <SPI_EndRxTransaction>
 8028870:	4603      	mov	r3, r0
 8028872:	2b00      	cmp	r3, #0
 8028874:	d002      	beq.n	802887c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028876:	68fb      	ldr	r3, [r7, #12]
 8028878:	2220      	movs	r2, #32
 802887a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802887c:	68fb      	ldr	r3, [r7, #12]
 802887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028880:	2b00      	cmp	r3, #0
 8028882:	d002      	beq.n	802888a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8028884:	2301      	movs	r3, #1
 8028886:	75fb      	strb	r3, [r7, #23]
 8028888:	e000      	b.n	802888c <HAL_SPI_Receive+0x208>
  }

error :
 802888a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802888c:	68fb      	ldr	r3, [r7, #12]
 802888e:	2201      	movs	r2, #1
 8028890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028894:	68fb      	ldr	r3, [r7, #12]
 8028896:	2200      	movs	r2, #0
 8028898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802889c:	7dfb      	ldrb	r3, [r7, #23]
}
 802889e:	4618      	mov	r0, r3
 80288a0:	3718      	adds	r7, #24
 80288a2:	46bd      	mov	sp, r7
 80288a4:	bd80      	pop	{r7, pc}

080288a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80288a6:	b580      	push	{r7, lr}
 80288a8:	b08c      	sub	sp, #48	; 0x30
 80288aa:	af00      	add	r7, sp, #0
 80288ac:	60f8      	str	r0, [r7, #12]
 80288ae:	60b9      	str	r1, [r7, #8]
 80288b0:	607a      	str	r2, [r7, #4]
 80288b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80288b4:	2301      	movs	r3, #1
 80288b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80288b8:	2300      	movs	r3, #0
 80288ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80288be:	68fb      	ldr	r3, [r7, #12]
 80288c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80288c4:	2b01      	cmp	r3, #1
 80288c6:	d101      	bne.n	80288cc <HAL_SPI_TransmitReceive+0x26>
 80288c8:	2302      	movs	r3, #2
 80288ca:	e18a      	b.n	8028be2 <HAL_SPI_TransmitReceive+0x33c>
 80288cc:	68fb      	ldr	r3, [r7, #12]
 80288ce:	2201      	movs	r2, #1
 80288d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80288d4:	f7fa fece 	bl	8023674 <HAL_GetTick>
 80288d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80288da:	68fb      	ldr	r3, [r7, #12]
 80288dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80288e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80288e4:	68fb      	ldr	r3, [r7, #12]
 80288e6:	685b      	ldr	r3, [r3, #4]
 80288e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80288ea:	887b      	ldrh	r3, [r7, #2]
 80288ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80288ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80288f2:	2b01      	cmp	r3, #1
 80288f4:	d00f      	beq.n	8028916 <HAL_SPI_TransmitReceive+0x70>
 80288f6:	69fb      	ldr	r3, [r7, #28]
 80288f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80288fc:	d107      	bne.n	802890e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80288fe:	68fb      	ldr	r3, [r7, #12]
 8028900:	689b      	ldr	r3, [r3, #8]
 8028902:	2b00      	cmp	r3, #0
 8028904:	d103      	bne.n	802890e <HAL_SPI_TransmitReceive+0x68>
 8028906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802890a:	2b04      	cmp	r3, #4
 802890c:	d003      	beq.n	8028916 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802890e:	2302      	movs	r3, #2
 8028910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028914:	e15b      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028916:	68bb      	ldr	r3, [r7, #8]
 8028918:	2b00      	cmp	r3, #0
 802891a:	d005      	beq.n	8028928 <HAL_SPI_TransmitReceive+0x82>
 802891c:	687b      	ldr	r3, [r7, #4]
 802891e:	2b00      	cmp	r3, #0
 8028920:	d002      	beq.n	8028928 <HAL_SPI_TransmitReceive+0x82>
 8028922:	887b      	ldrh	r3, [r7, #2]
 8028924:	2b00      	cmp	r3, #0
 8028926:	d103      	bne.n	8028930 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028928:	2301      	movs	r3, #1
 802892a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802892e:	e14e      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028936:	b2db      	uxtb	r3, r3
 8028938:	2b04      	cmp	r3, #4
 802893a:	d003      	beq.n	8028944 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802893c:	68fb      	ldr	r3, [r7, #12]
 802893e:	2205      	movs	r2, #5
 8028940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028944:	68fb      	ldr	r3, [r7, #12]
 8028946:	2200      	movs	r2, #0
 8028948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802894a:	68fb      	ldr	r3, [r7, #12]
 802894c:	687a      	ldr	r2, [r7, #4]
 802894e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028950:	68fb      	ldr	r3, [r7, #12]
 8028952:	887a      	ldrh	r2, [r7, #2]
 8028954:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028956:	68fb      	ldr	r3, [r7, #12]
 8028958:	887a      	ldrh	r2, [r7, #2]
 802895a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802895c:	68fb      	ldr	r3, [r7, #12]
 802895e:	68ba      	ldr	r2, [r7, #8]
 8028960:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028962:	68fb      	ldr	r3, [r7, #12]
 8028964:	887a      	ldrh	r2, [r7, #2]
 8028966:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028968:	68fb      	ldr	r3, [r7, #12]
 802896a:	887a      	ldrh	r2, [r7, #2]
 802896c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802896e:	68fb      	ldr	r3, [r7, #12]
 8028970:	2200      	movs	r2, #0
 8028972:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028974:	68fb      	ldr	r3, [r7, #12]
 8028976:	2200      	movs	r2, #0
 8028978:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802897a:	68fb      	ldr	r3, [r7, #12]
 802897c:	681b      	ldr	r3, [r3, #0]
 802897e:	681b      	ldr	r3, [r3, #0]
 8028980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028984:	2b40      	cmp	r3, #64	; 0x40
 8028986:	d007      	beq.n	8028998 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028988:	68fb      	ldr	r3, [r7, #12]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	681a      	ldr	r2, [r3, #0]
 802898e:	68fb      	ldr	r3, [r7, #12]
 8028990:	681b      	ldr	r3, [r3, #0]
 8028992:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028998:	68fb      	ldr	r3, [r7, #12]
 802899a:	68db      	ldr	r3, [r3, #12]
 802899c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80289a0:	d178      	bne.n	8028a94 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80289a2:	68fb      	ldr	r3, [r7, #12]
 80289a4:	685b      	ldr	r3, [r3, #4]
 80289a6:	2b00      	cmp	r3, #0
 80289a8:	d002      	beq.n	80289b0 <HAL_SPI_TransmitReceive+0x10a>
 80289aa:	8b7b      	ldrh	r3, [r7, #26]
 80289ac:	2b01      	cmp	r3, #1
 80289ae:	d166      	bne.n	8028a7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289b0:	68fb      	ldr	r3, [r7, #12]
 80289b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289b4:	881a      	ldrh	r2, [r3, #0]
 80289b6:	68fb      	ldr	r3, [r7, #12]
 80289b8:	681b      	ldr	r3, [r3, #0]
 80289ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80289bc:	68fb      	ldr	r3, [r7, #12]
 80289be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289c0:	1c9a      	adds	r2, r3, #2
 80289c2:	68fb      	ldr	r3, [r7, #12]
 80289c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289c6:	68fb      	ldr	r3, [r7, #12]
 80289c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289ca:	b29b      	uxth	r3, r3
 80289cc:	3b01      	subs	r3, #1
 80289ce:	b29a      	uxth	r2, r3
 80289d0:	68fb      	ldr	r3, [r7, #12]
 80289d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80289d4:	e053      	b.n	8028a7e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80289d6:	68fb      	ldr	r3, [r7, #12]
 80289d8:	681b      	ldr	r3, [r3, #0]
 80289da:	689b      	ldr	r3, [r3, #8]
 80289dc:	f003 0302 	and.w	r3, r3, #2
 80289e0:	2b02      	cmp	r3, #2
 80289e2:	d11b      	bne.n	8028a1c <HAL_SPI_TransmitReceive+0x176>
 80289e4:	68fb      	ldr	r3, [r7, #12]
 80289e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289e8:	b29b      	uxth	r3, r3
 80289ea:	2b00      	cmp	r3, #0
 80289ec:	d016      	beq.n	8028a1c <HAL_SPI_TransmitReceive+0x176>
 80289ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289f0:	2b01      	cmp	r3, #1
 80289f2:	d113      	bne.n	8028a1c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289f8:	881a      	ldrh	r2, [r3, #0]
 80289fa:	68fb      	ldr	r3, [r7, #12]
 80289fc:	681b      	ldr	r3, [r3, #0]
 80289fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028a00:	68fb      	ldr	r3, [r7, #12]
 8028a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a04:	1c9a      	adds	r2, r3, #2
 8028a06:	68fb      	ldr	r3, [r7, #12]
 8028a08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a0a:	68fb      	ldr	r3, [r7, #12]
 8028a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a0e:	b29b      	uxth	r3, r3
 8028a10:	3b01      	subs	r3, #1
 8028a12:	b29a      	uxth	r2, r3
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028a18:	2300      	movs	r3, #0
 8028a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028a1c:	68fb      	ldr	r3, [r7, #12]
 8028a1e:	681b      	ldr	r3, [r3, #0]
 8028a20:	689b      	ldr	r3, [r3, #8]
 8028a22:	f003 0301 	and.w	r3, r3, #1
 8028a26:	2b01      	cmp	r3, #1
 8028a28:	d119      	bne.n	8028a5e <HAL_SPI_TransmitReceive+0x1b8>
 8028a2a:	68fb      	ldr	r3, [r7, #12]
 8028a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a2e:	b29b      	uxth	r3, r3
 8028a30:	2b00      	cmp	r3, #0
 8028a32:	d014      	beq.n	8028a5e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028a34:	68fb      	ldr	r3, [r7, #12]
 8028a36:	681b      	ldr	r3, [r3, #0]
 8028a38:	68da      	ldr	r2, [r3, #12]
 8028a3a:	68fb      	ldr	r3, [r7, #12]
 8028a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a3e:	b292      	uxth	r2, r2
 8028a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a46:	1c9a      	adds	r2, r3, #2
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a50:	b29b      	uxth	r3, r3
 8028a52:	3b01      	subs	r3, #1
 8028a54:	b29a      	uxth	r2, r3
 8028a56:	68fb      	ldr	r3, [r7, #12]
 8028a58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028a5a:	2301      	movs	r3, #1
 8028a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028a5e:	f7fa fe09 	bl	8023674 <HAL_GetTick>
 8028a62:	4602      	mov	r2, r0
 8028a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a66:	1ad3      	subs	r3, r2, r3
 8028a68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028a6a:	429a      	cmp	r2, r3
 8028a6c:	d807      	bhi.n	8028a7e <HAL_SPI_TransmitReceive+0x1d8>
 8028a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a74:	d003      	beq.n	8028a7e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028a76:	2303      	movs	r3, #3
 8028a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028a7c:	e0a7      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028a7e:	68fb      	ldr	r3, [r7, #12]
 8028a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a82:	b29b      	uxth	r3, r3
 8028a84:	2b00      	cmp	r3, #0
 8028a86:	d1a6      	bne.n	80289d6 <HAL_SPI_TransmitReceive+0x130>
 8028a88:	68fb      	ldr	r3, [r7, #12]
 8028a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a8c:	b29b      	uxth	r3, r3
 8028a8e:	2b00      	cmp	r3, #0
 8028a90:	d1a1      	bne.n	80289d6 <HAL_SPI_TransmitReceive+0x130>
 8028a92:	e07c      	b.n	8028b8e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028a94:	68fb      	ldr	r3, [r7, #12]
 8028a96:	685b      	ldr	r3, [r3, #4]
 8028a98:	2b00      	cmp	r3, #0
 8028a9a:	d002      	beq.n	8028aa2 <HAL_SPI_TransmitReceive+0x1fc>
 8028a9c:	8b7b      	ldrh	r3, [r7, #26]
 8028a9e:	2b01      	cmp	r3, #1
 8028aa0:	d16b      	bne.n	8028b7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028aa2:	68fb      	ldr	r3, [r7, #12]
 8028aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028aa6:	68fb      	ldr	r3, [r7, #12]
 8028aa8:	681b      	ldr	r3, [r3, #0]
 8028aaa:	330c      	adds	r3, #12
 8028aac:	7812      	ldrb	r2, [r2, #0]
 8028aae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028ab0:	68fb      	ldr	r3, [r7, #12]
 8028ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ab4:	1c5a      	adds	r2, r3, #1
 8028ab6:	68fb      	ldr	r3, [r7, #12]
 8028ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028aba:	68fb      	ldr	r3, [r7, #12]
 8028abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028abe:	b29b      	uxth	r3, r3
 8028ac0:	3b01      	subs	r3, #1
 8028ac2:	b29a      	uxth	r2, r3
 8028ac4:	68fb      	ldr	r3, [r7, #12]
 8028ac6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028ac8:	e057      	b.n	8028b7a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028aca:	68fb      	ldr	r3, [r7, #12]
 8028acc:	681b      	ldr	r3, [r3, #0]
 8028ace:	689b      	ldr	r3, [r3, #8]
 8028ad0:	f003 0302 	and.w	r3, r3, #2
 8028ad4:	2b02      	cmp	r3, #2
 8028ad6:	d11c      	bne.n	8028b12 <HAL_SPI_TransmitReceive+0x26c>
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028adc:	b29b      	uxth	r3, r3
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	d017      	beq.n	8028b12 <HAL_SPI_TransmitReceive+0x26c>
 8028ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ae4:	2b01      	cmp	r3, #1
 8028ae6:	d114      	bne.n	8028b12 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028aec:	68fb      	ldr	r3, [r7, #12]
 8028aee:	681b      	ldr	r3, [r3, #0]
 8028af0:	330c      	adds	r3, #12
 8028af2:	7812      	ldrb	r2, [r2, #0]
 8028af4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028af6:	68fb      	ldr	r3, [r7, #12]
 8028af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028afa:	1c5a      	adds	r2, r3, #1
 8028afc:	68fb      	ldr	r3, [r7, #12]
 8028afe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028b00:	68fb      	ldr	r3, [r7, #12]
 8028b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b04:	b29b      	uxth	r3, r3
 8028b06:	3b01      	subs	r3, #1
 8028b08:	b29a      	uxth	r2, r3
 8028b0a:	68fb      	ldr	r3, [r7, #12]
 8028b0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028b0e:	2300      	movs	r3, #0
 8028b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028b12:	68fb      	ldr	r3, [r7, #12]
 8028b14:	681b      	ldr	r3, [r3, #0]
 8028b16:	689b      	ldr	r3, [r3, #8]
 8028b18:	f003 0301 	and.w	r3, r3, #1
 8028b1c:	2b01      	cmp	r3, #1
 8028b1e:	d119      	bne.n	8028b54 <HAL_SPI_TransmitReceive+0x2ae>
 8028b20:	68fb      	ldr	r3, [r7, #12]
 8028b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b24:	b29b      	uxth	r3, r3
 8028b26:	2b00      	cmp	r3, #0
 8028b28:	d014      	beq.n	8028b54 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028b2a:	68fb      	ldr	r3, [r7, #12]
 8028b2c:	681b      	ldr	r3, [r3, #0]
 8028b2e:	68da      	ldr	r2, [r3, #12]
 8028b30:	68fb      	ldr	r3, [r7, #12]
 8028b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b34:	b2d2      	uxtb	r2, r2
 8028b36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028b38:	68fb      	ldr	r3, [r7, #12]
 8028b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b3c:	1c5a      	adds	r2, r3, #1
 8028b3e:	68fb      	ldr	r3, [r7, #12]
 8028b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028b42:	68fb      	ldr	r3, [r7, #12]
 8028b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b46:	b29b      	uxth	r3, r3
 8028b48:	3b01      	subs	r3, #1
 8028b4a:	b29a      	uxth	r2, r3
 8028b4c:	68fb      	ldr	r3, [r7, #12]
 8028b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028b50:	2301      	movs	r3, #1
 8028b52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028b54:	f7fa fd8e 	bl	8023674 <HAL_GetTick>
 8028b58:	4602      	mov	r2, r0
 8028b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b5c:	1ad3      	subs	r3, r2, r3
 8028b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028b60:	429a      	cmp	r2, r3
 8028b62:	d803      	bhi.n	8028b6c <HAL_SPI_TransmitReceive+0x2c6>
 8028b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b6a:	d102      	bne.n	8028b72 <HAL_SPI_TransmitReceive+0x2cc>
 8028b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b6e:	2b00      	cmp	r3, #0
 8028b70:	d103      	bne.n	8028b7a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028b72:	2303      	movs	r3, #3
 8028b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028b78:	e029      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028b7a:	68fb      	ldr	r3, [r7, #12]
 8028b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b7e:	b29b      	uxth	r3, r3
 8028b80:	2b00      	cmp	r3, #0
 8028b82:	d1a2      	bne.n	8028aca <HAL_SPI_TransmitReceive+0x224>
 8028b84:	68fb      	ldr	r3, [r7, #12]
 8028b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b88:	b29b      	uxth	r3, r3
 8028b8a:	2b00      	cmp	r3, #0
 8028b8c:	d19d      	bne.n	8028aca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028b90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028b92:	68f8      	ldr	r0, [r7, #12]
 8028b94:	f000 f926 	bl	8028de4 <SPI_EndRxTxTransaction>
 8028b98:	4603      	mov	r3, r0
 8028b9a:	2b00      	cmp	r3, #0
 8028b9c:	d006      	beq.n	8028bac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028b9e:	2301      	movs	r3, #1
 8028ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028ba4:	68fb      	ldr	r3, [r7, #12]
 8028ba6:	2220      	movs	r2, #32
 8028ba8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028baa:	e010      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028bac:	68fb      	ldr	r3, [r7, #12]
 8028bae:	689b      	ldr	r3, [r3, #8]
 8028bb0:	2b00      	cmp	r3, #0
 8028bb2:	d10b      	bne.n	8028bcc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028bb4:	2300      	movs	r3, #0
 8028bb6:	617b      	str	r3, [r7, #20]
 8028bb8:	68fb      	ldr	r3, [r7, #12]
 8028bba:	681b      	ldr	r3, [r3, #0]
 8028bbc:	68db      	ldr	r3, [r3, #12]
 8028bbe:	617b      	str	r3, [r7, #20]
 8028bc0:	68fb      	ldr	r3, [r7, #12]
 8028bc2:	681b      	ldr	r3, [r3, #0]
 8028bc4:	689b      	ldr	r3, [r3, #8]
 8028bc6:	617b      	str	r3, [r7, #20]
 8028bc8:	697b      	ldr	r3, [r7, #20]
 8028bca:	e000      	b.n	8028bce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028bcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028bce:	68fb      	ldr	r3, [r7, #12]
 8028bd0:	2201      	movs	r2, #1
 8028bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028bd6:	68fb      	ldr	r3, [r7, #12]
 8028bd8:	2200      	movs	r2, #0
 8028bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028bde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028be2:	4618      	mov	r0, r3
 8028be4:	3730      	adds	r7, #48	; 0x30
 8028be6:	46bd      	mov	sp, r7
 8028be8:	bd80      	pop	{r7, pc}

08028bea <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8028bea:	b480      	push	{r7}
 8028bec:	b083      	sub	sp, #12
 8028bee:	af00      	add	r7, sp, #0
 8028bf0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028bf2:	687b      	ldr	r3, [r7, #4]
 8028bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028bf8:	b2db      	uxtb	r3, r3
}
 8028bfa:	4618      	mov	r0, r3
 8028bfc:	370c      	adds	r7, #12
 8028bfe:	46bd      	mov	sp, r7
 8028c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c04:	4770      	bx	lr
	...

08028c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028c08:	b580      	push	{r7, lr}
 8028c0a:	b088      	sub	sp, #32
 8028c0c:	af00      	add	r7, sp, #0
 8028c0e:	60f8      	str	r0, [r7, #12]
 8028c10:	60b9      	str	r1, [r7, #8]
 8028c12:	603b      	str	r3, [r7, #0]
 8028c14:	4613      	mov	r3, r2
 8028c16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028c18:	f7fa fd2c 	bl	8023674 <HAL_GetTick>
 8028c1c:	4602      	mov	r2, r0
 8028c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c20:	1a9b      	subs	r3, r3, r2
 8028c22:	683a      	ldr	r2, [r7, #0]
 8028c24:	4413      	add	r3, r2
 8028c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028c28:	f7fa fd24 	bl	8023674 <HAL_GetTick>
 8028c2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028c2e:	4b39      	ldr	r3, [pc, #228]	; (8028d14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028c30:	681b      	ldr	r3, [r3, #0]
 8028c32:	015b      	lsls	r3, r3, #5
 8028c34:	0d1b      	lsrs	r3, r3, #20
 8028c36:	69fa      	ldr	r2, [r7, #28]
 8028c38:	fb02 f303 	mul.w	r3, r2, r3
 8028c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028c3e:	e054      	b.n	8028cea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028c40:	683b      	ldr	r3, [r7, #0]
 8028c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c46:	d050      	beq.n	8028cea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028c48:	f7fa fd14 	bl	8023674 <HAL_GetTick>
 8028c4c:	4602      	mov	r2, r0
 8028c4e:	69bb      	ldr	r3, [r7, #24]
 8028c50:	1ad3      	subs	r3, r2, r3
 8028c52:	69fa      	ldr	r2, [r7, #28]
 8028c54:	429a      	cmp	r2, r3
 8028c56:	d902      	bls.n	8028c5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8028c58:	69fb      	ldr	r3, [r7, #28]
 8028c5a:	2b00      	cmp	r3, #0
 8028c5c:	d13d      	bne.n	8028cda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028c5e:	68fb      	ldr	r3, [r7, #12]
 8028c60:	681b      	ldr	r3, [r3, #0]
 8028c62:	685a      	ldr	r2, [r3, #4]
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	681b      	ldr	r3, [r3, #0]
 8028c68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028c6e:	68fb      	ldr	r3, [r7, #12]
 8028c70:	685b      	ldr	r3, [r3, #4]
 8028c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c76:	d111      	bne.n	8028c9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	689b      	ldr	r3, [r3, #8]
 8028c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028c80:	d004      	beq.n	8028c8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028c82:	68fb      	ldr	r3, [r7, #12]
 8028c84:	689b      	ldr	r3, [r3, #8]
 8028c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028c8a:	d107      	bne.n	8028c9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028c8c:	68fb      	ldr	r3, [r7, #12]
 8028c8e:	681b      	ldr	r3, [r3, #0]
 8028c90:	681a      	ldr	r2, [r3, #0]
 8028c92:	68fb      	ldr	r3, [r7, #12]
 8028c94:	681b      	ldr	r3, [r3, #0]
 8028c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028c9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028ca4:	d10f      	bne.n	8028cc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028ca6:	68fb      	ldr	r3, [r7, #12]
 8028ca8:	681b      	ldr	r3, [r3, #0]
 8028caa:	681a      	ldr	r2, [r3, #0]
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	681b      	ldr	r3, [r3, #0]
 8028cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028cb4:	601a      	str	r2, [r3, #0]
 8028cb6:	68fb      	ldr	r3, [r7, #12]
 8028cb8:	681b      	ldr	r3, [r3, #0]
 8028cba:	681a      	ldr	r2, [r3, #0]
 8028cbc:	68fb      	ldr	r3, [r7, #12]
 8028cbe:	681b      	ldr	r3, [r3, #0]
 8028cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028cc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	2201      	movs	r2, #1
 8028cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028cce:	68fb      	ldr	r3, [r7, #12]
 8028cd0:	2200      	movs	r2, #0
 8028cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028cd6:	2303      	movs	r3, #3
 8028cd8:	e017      	b.n	8028d0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028cda:	697b      	ldr	r3, [r7, #20]
 8028cdc:	2b00      	cmp	r3, #0
 8028cde:	d101      	bne.n	8028ce4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028ce0:	2300      	movs	r3, #0
 8028ce2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028ce4:	697b      	ldr	r3, [r7, #20]
 8028ce6:	3b01      	subs	r3, #1
 8028ce8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028cea:	68fb      	ldr	r3, [r7, #12]
 8028cec:	681b      	ldr	r3, [r3, #0]
 8028cee:	689a      	ldr	r2, [r3, #8]
 8028cf0:	68bb      	ldr	r3, [r7, #8]
 8028cf2:	4013      	ands	r3, r2
 8028cf4:	68ba      	ldr	r2, [r7, #8]
 8028cf6:	429a      	cmp	r2, r3
 8028cf8:	bf0c      	ite	eq
 8028cfa:	2301      	moveq	r3, #1
 8028cfc:	2300      	movne	r3, #0
 8028cfe:	b2db      	uxtb	r3, r3
 8028d00:	461a      	mov	r2, r3
 8028d02:	79fb      	ldrb	r3, [r7, #7]
 8028d04:	429a      	cmp	r2, r3
 8028d06:	d19b      	bne.n	8028c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028d08:	2300      	movs	r3, #0
}
 8028d0a:	4618      	mov	r0, r3
 8028d0c:	3720      	adds	r7, #32
 8028d0e:	46bd      	mov	sp, r7
 8028d10:	bd80      	pop	{r7, pc}
 8028d12:	bf00      	nop
 8028d14:	20000004 	.word	0x20000004

08028d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028d18:	b580      	push	{r7, lr}
 8028d1a:	b086      	sub	sp, #24
 8028d1c:	af02      	add	r7, sp, #8
 8028d1e:	60f8      	str	r0, [r7, #12]
 8028d20:	60b9      	str	r1, [r7, #8]
 8028d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	685b      	ldr	r3, [r3, #4]
 8028d28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d2c:	d111      	bne.n	8028d52 <SPI_EndRxTransaction+0x3a>
 8028d2e:	68fb      	ldr	r3, [r7, #12]
 8028d30:	689b      	ldr	r3, [r3, #8]
 8028d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028d36:	d004      	beq.n	8028d42 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	689b      	ldr	r3, [r3, #8]
 8028d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d40:	d107      	bne.n	8028d52 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028d42:	68fb      	ldr	r3, [r7, #12]
 8028d44:	681b      	ldr	r3, [r3, #0]
 8028d46:	681a      	ldr	r2, [r3, #0]
 8028d48:	68fb      	ldr	r3, [r7, #12]
 8028d4a:	681b      	ldr	r3, [r3, #0]
 8028d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028d50:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028d52:	68fb      	ldr	r3, [r7, #12]
 8028d54:	685b      	ldr	r3, [r3, #4]
 8028d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d5a:	d12a      	bne.n	8028db2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028d5c:	68fb      	ldr	r3, [r7, #12]
 8028d5e:	689b      	ldr	r3, [r3, #8]
 8028d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d64:	d012      	beq.n	8028d8c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028d66:	687b      	ldr	r3, [r7, #4]
 8028d68:	9300      	str	r3, [sp, #0]
 8028d6a:	68bb      	ldr	r3, [r7, #8]
 8028d6c:	2200      	movs	r2, #0
 8028d6e:	2180      	movs	r1, #128	; 0x80
 8028d70:	68f8      	ldr	r0, [r7, #12]
 8028d72:	f7ff ff49 	bl	8028c08 <SPI_WaitFlagStateUntilTimeout>
 8028d76:	4603      	mov	r3, r0
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d02d      	beq.n	8028dd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028d80:	f043 0220 	orr.w	r2, r3, #32
 8028d84:	68fb      	ldr	r3, [r7, #12]
 8028d86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028d88:	2303      	movs	r3, #3
 8028d8a:	e026      	b.n	8028dda <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028d8c:	687b      	ldr	r3, [r7, #4]
 8028d8e:	9300      	str	r3, [sp, #0]
 8028d90:	68bb      	ldr	r3, [r7, #8]
 8028d92:	2200      	movs	r2, #0
 8028d94:	2101      	movs	r1, #1
 8028d96:	68f8      	ldr	r0, [r7, #12]
 8028d98:	f7ff ff36 	bl	8028c08 <SPI_WaitFlagStateUntilTimeout>
 8028d9c:	4603      	mov	r3, r0
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d01a      	beq.n	8028dd8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028da6:	f043 0220 	orr.w	r2, r3, #32
 8028daa:	68fb      	ldr	r3, [r7, #12]
 8028dac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028dae:	2303      	movs	r3, #3
 8028db0:	e013      	b.n	8028dda <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028db2:	687b      	ldr	r3, [r7, #4]
 8028db4:	9300      	str	r3, [sp, #0]
 8028db6:	68bb      	ldr	r3, [r7, #8]
 8028db8:	2200      	movs	r2, #0
 8028dba:	2101      	movs	r1, #1
 8028dbc:	68f8      	ldr	r0, [r7, #12]
 8028dbe:	f7ff ff23 	bl	8028c08 <SPI_WaitFlagStateUntilTimeout>
 8028dc2:	4603      	mov	r3, r0
 8028dc4:	2b00      	cmp	r3, #0
 8028dc6:	d007      	beq.n	8028dd8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028dcc:	f043 0220 	orr.w	r2, r3, #32
 8028dd0:	68fb      	ldr	r3, [r7, #12]
 8028dd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028dd4:	2303      	movs	r3, #3
 8028dd6:	e000      	b.n	8028dda <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028dd8:	2300      	movs	r3, #0
}
 8028dda:	4618      	mov	r0, r3
 8028ddc:	3710      	adds	r7, #16
 8028dde:	46bd      	mov	sp, r7
 8028de0:	bd80      	pop	{r7, pc}
	...

08028de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028de4:	b580      	push	{r7, lr}
 8028de6:	b088      	sub	sp, #32
 8028de8:	af02      	add	r7, sp, #8
 8028dea:	60f8      	str	r0, [r7, #12]
 8028dec:	60b9      	str	r1, [r7, #8]
 8028dee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028df0:	4b1b      	ldr	r3, [pc, #108]	; (8028e60 <SPI_EndRxTxTransaction+0x7c>)
 8028df2:	681b      	ldr	r3, [r3, #0]
 8028df4:	4a1b      	ldr	r2, [pc, #108]	; (8028e64 <SPI_EndRxTxTransaction+0x80>)
 8028df6:	fba2 2303 	umull	r2, r3, r2, r3
 8028dfa:	0d5b      	lsrs	r3, r3, #21
 8028dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028e00:	fb02 f303 	mul.w	r3, r2, r3
 8028e04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028e06:	68fb      	ldr	r3, [r7, #12]
 8028e08:	685b      	ldr	r3, [r3, #4]
 8028e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028e0e:	d112      	bne.n	8028e36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028e10:	687b      	ldr	r3, [r7, #4]
 8028e12:	9300      	str	r3, [sp, #0]
 8028e14:	68bb      	ldr	r3, [r7, #8]
 8028e16:	2200      	movs	r2, #0
 8028e18:	2180      	movs	r1, #128	; 0x80
 8028e1a:	68f8      	ldr	r0, [r7, #12]
 8028e1c:	f7ff fef4 	bl	8028c08 <SPI_WaitFlagStateUntilTimeout>
 8028e20:	4603      	mov	r3, r0
 8028e22:	2b00      	cmp	r3, #0
 8028e24:	d016      	beq.n	8028e54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028e26:	68fb      	ldr	r3, [r7, #12]
 8028e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e2a:	f043 0220 	orr.w	r2, r3, #32
 8028e2e:	68fb      	ldr	r3, [r7, #12]
 8028e30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028e32:	2303      	movs	r3, #3
 8028e34:	e00f      	b.n	8028e56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028e36:	697b      	ldr	r3, [r7, #20]
 8028e38:	2b00      	cmp	r3, #0
 8028e3a:	d00a      	beq.n	8028e52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028e3c:	697b      	ldr	r3, [r7, #20]
 8028e3e:	3b01      	subs	r3, #1
 8028e40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028e42:	68fb      	ldr	r3, [r7, #12]
 8028e44:	681b      	ldr	r3, [r3, #0]
 8028e46:	689b      	ldr	r3, [r3, #8]
 8028e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028e4c:	2b80      	cmp	r3, #128	; 0x80
 8028e4e:	d0f2      	beq.n	8028e36 <SPI_EndRxTxTransaction+0x52>
 8028e50:	e000      	b.n	8028e54 <SPI_EndRxTxTransaction+0x70>
        break;
 8028e52:	bf00      	nop
  }

  return HAL_OK;
 8028e54:	2300      	movs	r3, #0
}
 8028e56:	4618      	mov	r0, r3
 8028e58:	3718      	adds	r7, #24
 8028e5a:	46bd      	mov	sp, r7
 8028e5c:	bd80      	pop	{r7, pc}
 8028e5e:	bf00      	nop
 8028e60:	20000004 	.word	0x20000004
 8028e64:	165e9f81 	.word	0x165e9f81

08028e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028e68:	b580      	push	{r7, lr}
 8028e6a:	b082      	sub	sp, #8
 8028e6c:	af00      	add	r7, sp, #0
 8028e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028e70:	687b      	ldr	r3, [r7, #4]
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d101      	bne.n	8028e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028e76:	2301      	movs	r3, #1
 8028e78:	e041      	b.n	8028efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028e7a:	687b      	ldr	r3, [r7, #4]
 8028e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e80:	b2db      	uxtb	r3, r3
 8028e82:	2b00      	cmp	r3, #0
 8028e84:	d106      	bne.n	8028e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028e86:	687b      	ldr	r3, [r7, #4]
 8028e88:	2200      	movs	r2, #0
 8028e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028e8e:	6878      	ldr	r0, [r7, #4]
 8028e90:	f7f8 fea6 	bl	8021be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028e94:	687b      	ldr	r3, [r7, #4]
 8028e96:	2202      	movs	r2, #2
 8028e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	681a      	ldr	r2, [r3, #0]
 8028ea0:	687b      	ldr	r3, [r7, #4]
 8028ea2:	3304      	adds	r3, #4
 8028ea4:	4619      	mov	r1, r3
 8028ea6:	4610      	mov	r0, r2
 8028ea8:	f000 fa96 	bl	80293d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028eac:	687b      	ldr	r3, [r7, #4]
 8028eae:	2201      	movs	r2, #1
 8028eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028eb4:	687b      	ldr	r3, [r7, #4]
 8028eb6:	2201      	movs	r2, #1
 8028eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028ebc:	687b      	ldr	r3, [r7, #4]
 8028ebe:	2201      	movs	r2, #1
 8028ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028ec4:	687b      	ldr	r3, [r7, #4]
 8028ec6:	2201      	movs	r2, #1
 8028ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028ecc:	687b      	ldr	r3, [r7, #4]
 8028ece:	2201      	movs	r2, #1
 8028ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028ed4:	687b      	ldr	r3, [r7, #4]
 8028ed6:	2201      	movs	r2, #1
 8028ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	2201      	movs	r2, #1
 8028ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028ee4:	687b      	ldr	r3, [r7, #4]
 8028ee6:	2201      	movs	r2, #1
 8028ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028eec:	687b      	ldr	r3, [r7, #4]
 8028eee:	2201      	movs	r2, #1
 8028ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028ef4:	687b      	ldr	r3, [r7, #4]
 8028ef6:	2201      	movs	r2, #1
 8028ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028efc:	2300      	movs	r3, #0
}
 8028efe:	4618      	mov	r0, r3
 8028f00:	3708      	adds	r7, #8
 8028f02:	46bd      	mov	sp, r7
 8028f04:	bd80      	pop	{r7, pc}
	...

08028f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028f08:	b480      	push	{r7}
 8028f0a:	b085      	sub	sp, #20
 8028f0c:	af00      	add	r7, sp, #0
 8028f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028f10:	687b      	ldr	r3, [r7, #4]
 8028f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028f16:	b2db      	uxtb	r3, r3
 8028f18:	2b01      	cmp	r3, #1
 8028f1a:	d001      	beq.n	8028f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028f1c:	2301      	movs	r3, #1
 8028f1e:	e04e      	b.n	8028fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028f20:	687b      	ldr	r3, [r7, #4]
 8028f22:	2202      	movs	r2, #2
 8028f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028f28:	687b      	ldr	r3, [r7, #4]
 8028f2a:	681b      	ldr	r3, [r3, #0]
 8028f2c:	68da      	ldr	r2, [r3, #12]
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	681b      	ldr	r3, [r3, #0]
 8028f32:	f042 0201 	orr.w	r2, r2, #1
 8028f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028f38:	687b      	ldr	r3, [r7, #4]
 8028f3a:	681b      	ldr	r3, [r3, #0]
 8028f3c:	4a23      	ldr	r2, [pc, #140]	; (8028fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8028f3e:	4293      	cmp	r3, r2
 8028f40:	d022      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f42:	687b      	ldr	r3, [r7, #4]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028f4a:	d01d      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	681b      	ldr	r3, [r3, #0]
 8028f50:	4a1f      	ldr	r2, [pc, #124]	; (8028fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8028f52:	4293      	cmp	r3, r2
 8028f54:	d018      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f56:	687b      	ldr	r3, [r7, #4]
 8028f58:	681b      	ldr	r3, [r3, #0]
 8028f5a:	4a1e      	ldr	r2, [pc, #120]	; (8028fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8028f5c:	4293      	cmp	r3, r2
 8028f5e:	d013      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	681b      	ldr	r3, [r3, #0]
 8028f64:	4a1c      	ldr	r2, [pc, #112]	; (8028fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8028f66:	4293      	cmp	r3, r2
 8028f68:	d00e      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f6a:	687b      	ldr	r3, [r7, #4]
 8028f6c:	681b      	ldr	r3, [r3, #0]
 8028f6e:	4a1b      	ldr	r2, [pc, #108]	; (8028fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8028f70:	4293      	cmp	r3, r2
 8028f72:	d009      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f74:	687b      	ldr	r3, [r7, #4]
 8028f76:	681b      	ldr	r3, [r3, #0]
 8028f78:	4a19      	ldr	r2, [pc, #100]	; (8028fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8028f7a:	4293      	cmp	r3, r2
 8028f7c:	d004      	beq.n	8028f88 <HAL_TIM_Base_Start_IT+0x80>
 8028f7e:	687b      	ldr	r3, [r7, #4]
 8028f80:	681b      	ldr	r3, [r3, #0]
 8028f82:	4a18      	ldr	r2, [pc, #96]	; (8028fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8028f84:	4293      	cmp	r3, r2
 8028f86:	d111      	bne.n	8028fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028f88:	687b      	ldr	r3, [r7, #4]
 8028f8a:	681b      	ldr	r3, [r3, #0]
 8028f8c:	689b      	ldr	r3, [r3, #8]
 8028f8e:	f003 0307 	and.w	r3, r3, #7
 8028f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	2b06      	cmp	r3, #6
 8028f98:	d010      	beq.n	8028fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028f9a:	687b      	ldr	r3, [r7, #4]
 8028f9c:	681b      	ldr	r3, [r3, #0]
 8028f9e:	681a      	ldr	r2, [r3, #0]
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	f042 0201 	orr.w	r2, r2, #1
 8028fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028faa:	e007      	b.n	8028fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028fac:	687b      	ldr	r3, [r7, #4]
 8028fae:	681b      	ldr	r3, [r3, #0]
 8028fb0:	681a      	ldr	r2, [r3, #0]
 8028fb2:	687b      	ldr	r3, [r7, #4]
 8028fb4:	681b      	ldr	r3, [r3, #0]
 8028fb6:	f042 0201 	orr.w	r2, r2, #1
 8028fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028fbc:	2300      	movs	r3, #0
}
 8028fbe:	4618      	mov	r0, r3
 8028fc0:	3714      	adds	r7, #20
 8028fc2:	46bd      	mov	sp, r7
 8028fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fc8:	4770      	bx	lr
 8028fca:	bf00      	nop
 8028fcc:	40010000 	.word	0x40010000
 8028fd0:	40000400 	.word	0x40000400
 8028fd4:	40000800 	.word	0x40000800
 8028fd8:	40000c00 	.word	0x40000c00
 8028fdc:	40010400 	.word	0x40010400
 8028fe0:	40014000 	.word	0x40014000
 8028fe4:	40001800 	.word	0x40001800

08028fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028fe8:	b580      	push	{r7, lr}
 8028fea:	b082      	sub	sp, #8
 8028fec:	af00      	add	r7, sp, #0
 8028fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028ff0:	687b      	ldr	r3, [r7, #4]
 8028ff2:	681b      	ldr	r3, [r3, #0]
 8028ff4:	691b      	ldr	r3, [r3, #16]
 8028ff6:	f003 0302 	and.w	r3, r3, #2
 8028ffa:	2b02      	cmp	r3, #2
 8028ffc:	d122      	bne.n	8029044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	681b      	ldr	r3, [r3, #0]
 8029002:	68db      	ldr	r3, [r3, #12]
 8029004:	f003 0302 	and.w	r3, r3, #2
 8029008:	2b02      	cmp	r3, #2
 802900a:	d11b      	bne.n	8029044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	f06f 0202 	mvn.w	r2, #2
 8029014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	2201      	movs	r2, #1
 802901a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	699b      	ldr	r3, [r3, #24]
 8029022:	f003 0303 	and.w	r3, r3, #3
 8029026:	2b00      	cmp	r3, #0
 8029028:	d003      	beq.n	8029032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802902a:	6878      	ldr	r0, [r7, #4]
 802902c:	f000 f9b5 	bl	802939a <HAL_TIM_IC_CaptureCallback>
 8029030:	e005      	b.n	802903e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029032:	6878      	ldr	r0, [r7, #4]
 8029034:	f000 f9a7 	bl	8029386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029038:	6878      	ldr	r0, [r7, #4]
 802903a:	f000 f9b8 	bl	80293ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802903e:	687b      	ldr	r3, [r7, #4]
 8029040:	2200      	movs	r2, #0
 8029042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029044:	687b      	ldr	r3, [r7, #4]
 8029046:	681b      	ldr	r3, [r3, #0]
 8029048:	691b      	ldr	r3, [r3, #16]
 802904a:	f003 0304 	and.w	r3, r3, #4
 802904e:	2b04      	cmp	r3, #4
 8029050:	d122      	bne.n	8029098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029052:	687b      	ldr	r3, [r7, #4]
 8029054:	681b      	ldr	r3, [r3, #0]
 8029056:	68db      	ldr	r3, [r3, #12]
 8029058:	f003 0304 	and.w	r3, r3, #4
 802905c:	2b04      	cmp	r3, #4
 802905e:	d11b      	bne.n	8029098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	f06f 0204 	mvn.w	r2, #4
 8029068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802906a:	687b      	ldr	r3, [r7, #4]
 802906c:	2202      	movs	r2, #2
 802906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	699b      	ldr	r3, [r3, #24]
 8029076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802907a:	2b00      	cmp	r3, #0
 802907c:	d003      	beq.n	8029086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802907e:	6878      	ldr	r0, [r7, #4]
 8029080:	f000 f98b 	bl	802939a <HAL_TIM_IC_CaptureCallback>
 8029084:	e005      	b.n	8029092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029086:	6878      	ldr	r0, [r7, #4]
 8029088:	f000 f97d 	bl	8029386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802908c:	6878      	ldr	r0, [r7, #4]
 802908e:	f000 f98e 	bl	80293ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029092:	687b      	ldr	r3, [r7, #4]
 8029094:	2200      	movs	r2, #0
 8029096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029098:	687b      	ldr	r3, [r7, #4]
 802909a:	681b      	ldr	r3, [r3, #0]
 802909c:	691b      	ldr	r3, [r3, #16]
 802909e:	f003 0308 	and.w	r3, r3, #8
 80290a2:	2b08      	cmp	r3, #8
 80290a4:	d122      	bne.n	80290ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80290a6:	687b      	ldr	r3, [r7, #4]
 80290a8:	681b      	ldr	r3, [r3, #0]
 80290aa:	68db      	ldr	r3, [r3, #12]
 80290ac:	f003 0308 	and.w	r3, r3, #8
 80290b0:	2b08      	cmp	r3, #8
 80290b2:	d11b      	bne.n	80290ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80290b4:	687b      	ldr	r3, [r7, #4]
 80290b6:	681b      	ldr	r3, [r3, #0]
 80290b8:	f06f 0208 	mvn.w	r2, #8
 80290bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80290be:	687b      	ldr	r3, [r7, #4]
 80290c0:	2204      	movs	r2, #4
 80290c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80290c4:	687b      	ldr	r3, [r7, #4]
 80290c6:	681b      	ldr	r3, [r3, #0]
 80290c8:	69db      	ldr	r3, [r3, #28]
 80290ca:	f003 0303 	and.w	r3, r3, #3
 80290ce:	2b00      	cmp	r3, #0
 80290d0:	d003      	beq.n	80290da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80290d2:	6878      	ldr	r0, [r7, #4]
 80290d4:	f000 f961 	bl	802939a <HAL_TIM_IC_CaptureCallback>
 80290d8:	e005      	b.n	80290e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80290da:	6878      	ldr	r0, [r7, #4]
 80290dc:	f000 f953 	bl	8029386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290e0:	6878      	ldr	r0, [r7, #4]
 80290e2:	f000 f964 	bl	80293ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290e6:	687b      	ldr	r3, [r7, #4]
 80290e8:	2200      	movs	r2, #0
 80290ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80290ec:	687b      	ldr	r3, [r7, #4]
 80290ee:	681b      	ldr	r3, [r3, #0]
 80290f0:	691b      	ldr	r3, [r3, #16]
 80290f2:	f003 0310 	and.w	r3, r3, #16
 80290f6:	2b10      	cmp	r3, #16
 80290f8:	d122      	bne.n	8029140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80290fa:	687b      	ldr	r3, [r7, #4]
 80290fc:	681b      	ldr	r3, [r3, #0]
 80290fe:	68db      	ldr	r3, [r3, #12]
 8029100:	f003 0310 	and.w	r3, r3, #16
 8029104:	2b10      	cmp	r3, #16
 8029106:	d11b      	bne.n	8029140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029108:	687b      	ldr	r3, [r7, #4]
 802910a:	681b      	ldr	r3, [r3, #0]
 802910c:	f06f 0210 	mvn.w	r2, #16
 8029110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	2208      	movs	r2, #8
 8029116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029118:	687b      	ldr	r3, [r7, #4]
 802911a:	681b      	ldr	r3, [r3, #0]
 802911c:	69db      	ldr	r3, [r3, #28]
 802911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029122:	2b00      	cmp	r3, #0
 8029124:	d003      	beq.n	802912e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029126:	6878      	ldr	r0, [r7, #4]
 8029128:	f000 f937 	bl	802939a <HAL_TIM_IC_CaptureCallback>
 802912c:	e005      	b.n	802913a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802912e:	6878      	ldr	r0, [r7, #4]
 8029130:	f000 f929 	bl	8029386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029134:	6878      	ldr	r0, [r7, #4]
 8029136:	f000 f93a 	bl	80293ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802913a:	687b      	ldr	r3, [r7, #4]
 802913c:	2200      	movs	r2, #0
 802913e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029140:	687b      	ldr	r3, [r7, #4]
 8029142:	681b      	ldr	r3, [r3, #0]
 8029144:	691b      	ldr	r3, [r3, #16]
 8029146:	f003 0301 	and.w	r3, r3, #1
 802914a:	2b01      	cmp	r3, #1
 802914c:	d10e      	bne.n	802916c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802914e:	687b      	ldr	r3, [r7, #4]
 8029150:	681b      	ldr	r3, [r3, #0]
 8029152:	68db      	ldr	r3, [r3, #12]
 8029154:	f003 0301 	and.w	r3, r3, #1
 8029158:	2b01      	cmp	r3, #1
 802915a:	d107      	bne.n	802916c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802915c:	687b      	ldr	r3, [r7, #4]
 802915e:	681b      	ldr	r3, [r3, #0]
 8029160:	f06f 0201 	mvn.w	r2, #1
 8029164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029166:	6878      	ldr	r0, [r7, #4]
 8029168:	f7f7 fe90 	bl	8020e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	681b      	ldr	r3, [r3, #0]
 8029170:	691b      	ldr	r3, [r3, #16]
 8029172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029176:	2b80      	cmp	r3, #128	; 0x80
 8029178:	d10e      	bne.n	8029198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802917a:	687b      	ldr	r3, [r7, #4]
 802917c:	681b      	ldr	r3, [r3, #0]
 802917e:	68db      	ldr	r3, [r3, #12]
 8029180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029184:	2b80      	cmp	r3, #128	; 0x80
 8029186:	d107      	bne.n	8029198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029188:	687b      	ldr	r3, [r7, #4]
 802918a:	681b      	ldr	r3, [r3, #0]
 802918c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029192:	6878      	ldr	r0, [r7, #4]
 8029194:	f000 fae0 	bl	8029758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029198:	687b      	ldr	r3, [r7, #4]
 802919a:	681b      	ldr	r3, [r3, #0]
 802919c:	691b      	ldr	r3, [r3, #16]
 802919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291a2:	2b40      	cmp	r3, #64	; 0x40
 80291a4:	d10e      	bne.n	80291c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80291a6:	687b      	ldr	r3, [r7, #4]
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	68db      	ldr	r3, [r3, #12]
 80291ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291b0:	2b40      	cmp	r3, #64	; 0x40
 80291b2:	d107      	bne.n	80291c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80291b4:	687b      	ldr	r3, [r7, #4]
 80291b6:	681b      	ldr	r3, [r3, #0]
 80291b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80291bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80291be:	6878      	ldr	r0, [r7, #4]
 80291c0:	f000 f8ff 	bl	80293c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80291c4:	687b      	ldr	r3, [r7, #4]
 80291c6:	681b      	ldr	r3, [r3, #0]
 80291c8:	691b      	ldr	r3, [r3, #16]
 80291ca:	f003 0320 	and.w	r3, r3, #32
 80291ce:	2b20      	cmp	r3, #32
 80291d0:	d10e      	bne.n	80291f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80291d2:	687b      	ldr	r3, [r7, #4]
 80291d4:	681b      	ldr	r3, [r3, #0]
 80291d6:	68db      	ldr	r3, [r3, #12]
 80291d8:	f003 0320 	and.w	r3, r3, #32
 80291dc:	2b20      	cmp	r3, #32
 80291de:	d107      	bne.n	80291f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80291e0:	687b      	ldr	r3, [r7, #4]
 80291e2:	681b      	ldr	r3, [r3, #0]
 80291e4:	f06f 0220 	mvn.w	r2, #32
 80291e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80291ea:	6878      	ldr	r0, [r7, #4]
 80291ec:	f000 faaa 	bl	8029744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80291f0:	bf00      	nop
 80291f2:	3708      	adds	r7, #8
 80291f4:	46bd      	mov	sp, r7
 80291f6:	bd80      	pop	{r7, pc}

080291f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80291f8:	b580      	push	{r7, lr}
 80291fa:	b084      	sub	sp, #16
 80291fc:	af00      	add	r7, sp, #0
 80291fe:	6078      	str	r0, [r7, #4]
 8029200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8029202:	2300      	movs	r3, #0
 8029204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029206:	687b      	ldr	r3, [r7, #4]
 8029208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802920c:	2b01      	cmp	r3, #1
 802920e:	d101      	bne.n	8029214 <HAL_TIM_ConfigClockSource+0x1c>
 8029210:	2302      	movs	r3, #2
 8029212:	e0b4      	b.n	802937e <HAL_TIM_ConfigClockSource+0x186>
 8029214:	687b      	ldr	r3, [r7, #4]
 8029216:	2201      	movs	r2, #1
 8029218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802921c:	687b      	ldr	r3, [r7, #4]
 802921e:	2202      	movs	r2, #2
 8029220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029224:	687b      	ldr	r3, [r7, #4]
 8029226:	681b      	ldr	r3, [r3, #0]
 8029228:	689b      	ldr	r3, [r3, #8]
 802922a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802922c:	68bb      	ldr	r3, [r7, #8]
 802922e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029234:	68bb      	ldr	r3, [r7, #8]
 8029236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802923a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802923c:	687b      	ldr	r3, [r7, #4]
 802923e:	681b      	ldr	r3, [r3, #0]
 8029240:	68ba      	ldr	r2, [r7, #8]
 8029242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029244:	683b      	ldr	r3, [r7, #0]
 8029246:	681b      	ldr	r3, [r3, #0]
 8029248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802924c:	d03e      	beq.n	80292cc <HAL_TIM_ConfigClockSource+0xd4>
 802924e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029252:	f200 8087 	bhi.w	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 8029256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802925a:	f000 8086 	beq.w	802936a <HAL_TIM_ConfigClockSource+0x172>
 802925e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029262:	d87f      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 8029264:	2b70      	cmp	r3, #112	; 0x70
 8029266:	d01a      	beq.n	802929e <HAL_TIM_ConfigClockSource+0xa6>
 8029268:	2b70      	cmp	r3, #112	; 0x70
 802926a:	d87b      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 802926c:	2b60      	cmp	r3, #96	; 0x60
 802926e:	d050      	beq.n	8029312 <HAL_TIM_ConfigClockSource+0x11a>
 8029270:	2b60      	cmp	r3, #96	; 0x60
 8029272:	d877      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 8029274:	2b50      	cmp	r3, #80	; 0x50
 8029276:	d03c      	beq.n	80292f2 <HAL_TIM_ConfigClockSource+0xfa>
 8029278:	2b50      	cmp	r3, #80	; 0x50
 802927a:	d873      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 802927c:	2b40      	cmp	r3, #64	; 0x40
 802927e:	d058      	beq.n	8029332 <HAL_TIM_ConfigClockSource+0x13a>
 8029280:	2b40      	cmp	r3, #64	; 0x40
 8029282:	d86f      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 8029284:	2b30      	cmp	r3, #48	; 0x30
 8029286:	d064      	beq.n	8029352 <HAL_TIM_ConfigClockSource+0x15a>
 8029288:	2b30      	cmp	r3, #48	; 0x30
 802928a:	d86b      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 802928c:	2b20      	cmp	r3, #32
 802928e:	d060      	beq.n	8029352 <HAL_TIM_ConfigClockSource+0x15a>
 8029290:	2b20      	cmp	r3, #32
 8029292:	d867      	bhi.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
 8029294:	2b00      	cmp	r3, #0
 8029296:	d05c      	beq.n	8029352 <HAL_TIM_ConfigClockSource+0x15a>
 8029298:	2b10      	cmp	r3, #16
 802929a:	d05a      	beq.n	8029352 <HAL_TIM_ConfigClockSource+0x15a>
 802929c:	e062      	b.n	8029364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802929e:	687b      	ldr	r3, [r7, #4]
 80292a0:	6818      	ldr	r0, [r3, #0]
 80292a2:	683b      	ldr	r3, [r7, #0]
 80292a4:	6899      	ldr	r1, [r3, #8]
 80292a6:	683b      	ldr	r3, [r7, #0]
 80292a8:	685a      	ldr	r2, [r3, #4]
 80292aa:	683b      	ldr	r3, [r7, #0]
 80292ac:	68db      	ldr	r3, [r3, #12]
 80292ae:	f000 f9ad 	bl	802960c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80292b2:	687b      	ldr	r3, [r7, #4]
 80292b4:	681b      	ldr	r3, [r3, #0]
 80292b6:	689b      	ldr	r3, [r3, #8]
 80292b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80292ba:	68bb      	ldr	r3, [r7, #8]
 80292bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80292c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80292c2:	687b      	ldr	r3, [r7, #4]
 80292c4:	681b      	ldr	r3, [r3, #0]
 80292c6:	68ba      	ldr	r2, [r7, #8]
 80292c8:	609a      	str	r2, [r3, #8]
      break;
 80292ca:	e04f      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80292cc:	687b      	ldr	r3, [r7, #4]
 80292ce:	6818      	ldr	r0, [r3, #0]
 80292d0:	683b      	ldr	r3, [r7, #0]
 80292d2:	6899      	ldr	r1, [r3, #8]
 80292d4:	683b      	ldr	r3, [r7, #0]
 80292d6:	685a      	ldr	r2, [r3, #4]
 80292d8:	683b      	ldr	r3, [r7, #0]
 80292da:	68db      	ldr	r3, [r3, #12]
 80292dc:	f000 f996 	bl	802960c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80292e0:	687b      	ldr	r3, [r7, #4]
 80292e2:	681b      	ldr	r3, [r3, #0]
 80292e4:	689a      	ldr	r2, [r3, #8]
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	681b      	ldr	r3, [r3, #0]
 80292ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80292ee:	609a      	str	r2, [r3, #8]
      break;
 80292f0:	e03c      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80292f2:	687b      	ldr	r3, [r7, #4]
 80292f4:	6818      	ldr	r0, [r3, #0]
 80292f6:	683b      	ldr	r3, [r7, #0]
 80292f8:	6859      	ldr	r1, [r3, #4]
 80292fa:	683b      	ldr	r3, [r7, #0]
 80292fc:	68db      	ldr	r3, [r3, #12]
 80292fe:	461a      	mov	r2, r3
 8029300:	f000 f90a 	bl	8029518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029304:	687b      	ldr	r3, [r7, #4]
 8029306:	681b      	ldr	r3, [r3, #0]
 8029308:	2150      	movs	r1, #80	; 0x50
 802930a:	4618      	mov	r0, r3
 802930c:	f000 f963 	bl	80295d6 <TIM_ITRx_SetConfig>
      break;
 8029310:	e02c      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	6818      	ldr	r0, [r3, #0]
 8029316:	683b      	ldr	r3, [r7, #0]
 8029318:	6859      	ldr	r1, [r3, #4]
 802931a:	683b      	ldr	r3, [r7, #0]
 802931c:	68db      	ldr	r3, [r3, #12]
 802931e:	461a      	mov	r2, r3
 8029320:	f000 f929 	bl	8029576 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029324:	687b      	ldr	r3, [r7, #4]
 8029326:	681b      	ldr	r3, [r3, #0]
 8029328:	2160      	movs	r1, #96	; 0x60
 802932a:	4618      	mov	r0, r3
 802932c:	f000 f953 	bl	80295d6 <TIM_ITRx_SetConfig>
      break;
 8029330:	e01c      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029332:	687b      	ldr	r3, [r7, #4]
 8029334:	6818      	ldr	r0, [r3, #0]
 8029336:	683b      	ldr	r3, [r7, #0]
 8029338:	6859      	ldr	r1, [r3, #4]
 802933a:	683b      	ldr	r3, [r7, #0]
 802933c:	68db      	ldr	r3, [r3, #12]
 802933e:	461a      	mov	r2, r3
 8029340:	f000 f8ea 	bl	8029518 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029344:	687b      	ldr	r3, [r7, #4]
 8029346:	681b      	ldr	r3, [r3, #0]
 8029348:	2140      	movs	r1, #64	; 0x40
 802934a:	4618      	mov	r0, r3
 802934c:	f000 f943 	bl	80295d6 <TIM_ITRx_SetConfig>
      break;
 8029350:	e00c      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029352:	687b      	ldr	r3, [r7, #4]
 8029354:	681a      	ldr	r2, [r3, #0]
 8029356:	683b      	ldr	r3, [r7, #0]
 8029358:	681b      	ldr	r3, [r3, #0]
 802935a:	4619      	mov	r1, r3
 802935c:	4610      	mov	r0, r2
 802935e:	f000 f93a 	bl	80295d6 <TIM_ITRx_SetConfig>
      break;
 8029362:	e003      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8029364:	2301      	movs	r3, #1
 8029366:	73fb      	strb	r3, [r7, #15]
      break;
 8029368:	e000      	b.n	802936c <HAL_TIM_ConfigClockSource+0x174>
      break;
 802936a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802936c:	687b      	ldr	r3, [r7, #4]
 802936e:	2201      	movs	r2, #1
 8029370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	2200      	movs	r2, #0
 8029378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 802937c:	7bfb      	ldrb	r3, [r7, #15]
}
 802937e:	4618      	mov	r0, r3
 8029380:	3710      	adds	r7, #16
 8029382:	46bd      	mov	sp, r7
 8029384:	bd80      	pop	{r7, pc}

08029386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029386:	b480      	push	{r7}
 8029388:	b083      	sub	sp, #12
 802938a:	af00      	add	r7, sp, #0
 802938c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802938e:	bf00      	nop
 8029390:	370c      	adds	r7, #12
 8029392:	46bd      	mov	sp, r7
 8029394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029398:	4770      	bx	lr

0802939a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802939a:	b480      	push	{r7}
 802939c:	b083      	sub	sp, #12
 802939e:	af00      	add	r7, sp, #0
 80293a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80293a2:	bf00      	nop
 80293a4:	370c      	adds	r7, #12
 80293a6:	46bd      	mov	sp, r7
 80293a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293ac:	4770      	bx	lr

080293ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80293ae:	b480      	push	{r7}
 80293b0:	b083      	sub	sp, #12
 80293b2:	af00      	add	r7, sp, #0
 80293b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80293b6:	bf00      	nop
 80293b8:	370c      	adds	r7, #12
 80293ba:	46bd      	mov	sp, r7
 80293bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293c0:	4770      	bx	lr

080293c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80293c2:	b480      	push	{r7}
 80293c4:	b083      	sub	sp, #12
 80293c6:	af00      	add	r7, sp, #0
 80293c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80293ca:	bf00      	nop
 80293cc:	370c      	adds	r7, #12
 80293ce:	46bd      	mov	sp, r7
 80293d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d4:	4770      	bx	lr
	...

080293d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80293d8:	b480      	push	{r7}
 80293da:	b085      	sub	sp, #20
 80293dc:	af00      	add	r7, sp, #0
 80293de:	6078      	str	r0, [r7, #4]
 80293e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80293e2:	687b      	ldr	r3, [r7, #4]
 80293e4:	681b      	ldr	r3, [r3, #0]
 80293e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80293e8:	687b      	ldr	r3, [r7, #4]
 80293ea:	4a40      	ldr	r2, [pc, #256]	; (80294ec <TIM_Base_SetConfig+0x114>)
 80293ec:	4293      	cmp	r3, r2
 80293ee:	d013      	beq.n	8029418 <TIM_Base_SetConfig+0x40>
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80293f6:	d00f      	beq.n	8029418 <TIM_Base_SetConfig+0x40>
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	4a3d      	ldr	r2, [pc, #244]	; (80294f0 <TIM_Base_SetConfig+0x118>)
 80293fc:	4293      	cmp	r3, r2
 80293fe:	d00b      	beq.n	8029418 <TIM_Base_SetConfig+0x40>
 8029400:	687b      	ldr	r3, [r7, #4]
 8029402:	4a3c      	ldr	r2, [pc, #240]	; (80294f4 <TIM_Base_SetConfig+0x11c>)
 8029404:	4293      	cmp	r3, r2
 8029406:	d007      	beq.n	8029418 <TIM_Base_SetConfig+0x40>
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	4a3b      	ldr	r2, [pc, #236]	; (80294f8 <TIM_Base_SetConfig+0x120>)
 802940c:	4293      	cmp	r3, r2
 802940e:	d003      	beq.n	8029418 <TIM_Base_SetConfig+0x40>
 8029410:	687b      	ldr	r3, [r7, #4]
 8029412:	4a3a      	ldr	r2, [pc, #232]	; (80294fc <TIM_Base_SetConfig+0x124>)
 8029414:	4293      	cmp	r3, r2
 8029416:	d108      	bne.n	802942a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029418:	68fb      	ldr	r3, [r7, #12]
 802941a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802941e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029420:	683b      	ldr	r3, [r7, #0]
 8029422:	685b      	ldr	r3, [r3, #4]
 8029424:	68fa      	ldr	r2, [r7, #12]
 8029426:	4313      	orrs	r3, r2
 8029428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802942a:	687b      	ldr	r3, [r7, #4]
 802942c:	4a2f      	ldr	r2, [pc, #188]	; (80294ec <TIM_Base_SetConfig+0x114>)
 802942e:	4293      	cmp	r3, r2
 8029430:	d02b      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029432:	687b      	ldr	r3, [r7, #4]
 8029434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029438:	d027      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 802943a:	687b      	ldr	r3, [r7, #4]
 802943c:	4a2c      	ldr	r2, [pc, #176]	; (80294f0 <TIM_Base_SetConfig+0x118>)
 802943e:	4293      	cmp	r3, r2
 8029440:	d023      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029442:	687b      	ldr	r3, [r7, #4]
 8029444:	4a2b      	ldr	r2, [pc, #172]	; (80294f4 <TIM_Base_SetConfig+0x11c>)
 8029446:	4293      	cmp	r3, r2
 8029448:	d01f      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	4a2a      	ldr	r2, [pc, #168]	; (80294f8 <TIM_Base_SetConfig+0x120>)
 802944e:	4293      	cmp	r3, r2
 8029450:	d01b      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	4a29      	ldr	r2, [pc, #164]	; (80294fc <TIM_Base_SetConfig+0x124>)
 8029456:	4293      	cmp	r3, r2
 8029458:	d017      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 802945a:	687b      	ldr	r3, [r7, #4]
 802945c:	4a28      	ldr	r2, [pc, #160]	; (8029500 <TIM_Base_SetConfig+0x128>)
 802945e:	4293      	cmp	r3, r2
 8029460:	d013      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	4a27      	ldr	r2, [pc, #156]	; (8029504 <TIM_Base_SetConfig+0x12c>)
 8029466:	4293      	cmp	r3, r2
 8029468:	d00f      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	4a26      	ldr	r2, [pc, #152]	; (8029508 <TIM_Base_SetConfig+0x130>)
 802946e:	4293      	cmp	r3, r2
 8029470:	d00b      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	4a25      	ldr	r2, [pc, #148]	; (802950c <TIM_Base_SetConfig+0x134>)
 8029476:	4293      	cmp	r3, r2
 8029478:	d007      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 802947a:	687b      	ldr	r3, [r7, #4]
 802947c:	4a24      	ldr	r2, [pc, #144]	; (8029510 <TIM_Base_SetConfig+0x138>)
 802947e:	4293      	cmp	r3, r2
 8029480:	d003      	beq.n	802948a <TIM_Base_SetConfig+0xb2>
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	4a23      	ldr	r2, [pc, #140]	; (8029514 <TIM_Base_SetConfig+0x13c>)
 8029486:	4293      	cmp	r3, r2
 8029488:	d108      	bne.n	802949c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802948a:	68fb      	ldr	r3, [r7, #12]
 802948c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029492:	683b      	ldr	r3, [r7, #0]
 8029494:	68db      	ldr	r3, [r3, #12]
 8029496:	68fa      	ldr	r2, [r7, #12]
 8029498:	4313      	orrs	r3, r2
 802949a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802949c:	68fb      	ldr	r3, [r7, #12]
 802949e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80294a2:	683b      	ldr	r3, [r7, #0]
 80294a4:	695b      	ldr	r3, [r3, #20]
 80294a6:	4313      	orrs	r3, r2
 80294a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	68fa      	ldr	r2, [r7, #12]
 80294ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80294b0:	683b      	ldr	r3, [r7, #0]
 80294b2:	689a      	ldr	r2, [r3, #8]
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80294b8:	683b      	ldr	r3, [r7, #0]
 80294ba:	681a      	ldr	r2, [r3, #0]
 80294bc:	687b      	ldr	r3, [r7, #4]
 80294be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80294c0:	687b      	ldr	r3, [r7, #4]
 80294c2:	4a0a      	ldr	r2, [pc, #40]	; (80294ec <TIM_Base_SetConfig+0x114>)
 80294c4:	4293      	cmp	r3, r2
 80294c6:	d003      	beq.n	80294d0 <TIM_Base_SetConfig+0xf8>
 80294c8:	687b      	ldr	r3, [r7, #4]
 80294ca:	4a0c      	ldr	r2, [pc, #48]	; (80294fc <TIM_Base_SetConfig+0x124>)
 80294cc:	4293      	cmp	r3, r2
 80294ce:	d103      	bne.n	80294d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80294d0:	683b      	ldr	r3, [r7, #0]
 80294d2:	691a      	ldr	r2, [r3, #16]
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80294d8:	687b      	ldr	r3, [r7, #4]
 80294da:	2201      	movs	r2, #1
 80294dc:	615a      	str	r2, [r3, #20]
}
 80294de:	bf00      	nop
 80294e0:	3714      	adds	r7, #20
 80294e2:	46bd      	mov	sp, r7
 80294e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e8:	4770      	bx	lr
 80294ea:	bf00      	nop
 80294ec:	40010000 	.word	0x40010000
 80294f0:	40000400 	.word	0x40000400
 80294f4:	40000800 	.word	0x40000800
 80294f8:	40000c00 	.word	0x40000c00
 80294fc:	40010400 	.word	0x40010400
 8029500:	40014000 	.word	0x40014000
 8029504:	40014400 	.word	0x40014400
 8029508:	40014800 	.word	0x40014800
 802950c:	40001800 	.word	0x40001800
 8029510:	40001c00 	.word	0x40001c00
 8029514:	40002000 	.word	0x40002000

08029518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029518:	b480      	push	{r7}
 802951a:	b087      	sub	sp, #28
 802951c:	af00      	add	r7, sp, #0
 802951e:	60f8      	str	r0, [r7, #12]
 8029520:	60b9      	str	r1, [r7, #8]
 8029522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029524:	68fb      	ldr	r3, [r7, #12]
 8029526:	6a1b      	ldr	r3, [r3, #32]
 8029528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802952a:	68fb      	ldr	r3, [r7, #12]
 802952c:	6a1b      	ldr	r3, [r3, #32]
 802952e:	f023 0201 	bic.w	r2, r3, #1
 8029532:	68fb      	ldr	r3, [r7, #12]
 8029534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029536:	68fb      	ldr	r3, [r7, #12]
 8029538:	699b      	ldr	r3, [r3, #24]
 802953a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802953c:	693b      	ldr	r3, [r7, #16]
 802953e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	011b      	lsls	r3, r3, #4
 8029548:	693a      	ldr	r2, [r7, #16]
 802954a:	4313      	orrs	r3, r2
 802954c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802954e:	697b      	ldr	r3, [r7, #20]
 8029550:	f023 030a 	bic.w	r3, r3, #10
 8029554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029556:	697a      	ldr	r2, [r7, #20]
 8029558:	68bb      	ldr	r3, [r7, #8]
 802955a:	4313      	orrs	r3, r2
 802955c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802955e:	68fb      	ldr	r3, [r7, #12]
 8029560:	693a      	ldr	r2, [r7, #16]
 8029562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029564:	68fb      	ldr	r3, [r7, #12]
 8029566:	697a      	ldr	r2, [r7, #20]
 8029568:	621a      	str	r2, [r3, #32]
}
 802956a:	bf00      	nop
 802956c:	371c      	adds	r7, #28
 802956e:	46bd      	mov	sp, r7
 8029570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029574:	4770      	bx	lr

08029576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029576:	b480      	push	{r7}
 8029578:	b087      	sub	sp, #28
 802957a:	af00      	add	r7, sp, #0
 802957c:	60f8      	str	r0, [r7, #12]
 802957e:	60b9      	str	r1, [r7, #8]
 8029580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029582:	68fb      	ldr	r3, [r7, #12]
 8029584:	6a1b      	ldr	r3, [r3, #32]
 8029586:	f023 0210 	bic.w	r2, r3, #16
 802958a:	68fb      	ldr	r3, [r7, #12]
 802958c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802958e:	68fb      	ldr	r3, [r7, #12]
 8029590:	699b      	ldr	r3, [r3, #24]
 8029592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029594:	68fb      	ldr	r3, [r7, #12]
 8029596:	6a1b      	ldr	r3, [r3, #32]
 8029598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802959a:	697b      	ldr	r3, [r7, #20]
 802959c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80295a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	031b      	lsls	r3, r3, #12
 80295a6:	697a      	ldr	r2, [r7, #20]
 80295a8:	4313      	orrs	r3, r2
 80295aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80295ac:	693b      	ldr	r3, [r7, #16]
 80295ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80295b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80295b4:	68bb      	ldr	r3, [r7, #8]
 80295b6:	011b      	lsls	r3, r3, #4
 80295b8:	693a      	ldr	r2, [r7, #16]
 80295ba:	4313      	orrs	r3, r2
 80295bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80295be:	68fb      	ldr	r3, [r7, #12]
 80295c0:	697a      	ldr	r2, [r7, #20]
 80295c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80295c4:	68fb      	ldr	r3, [r7, #12]
 80295c6:	693a      	ldr	r2, [r7, #16]
 80295c8:	621a      	str	r2, [r3, #32]
}
 80295ca:	bf00      	nop
 80295cc:	371c      	adds	r7, #28
 80295ce:	46bd      	mov	sp, r7
 80295d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295d4:	4770      	bx	lr

080295d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80295d6:	b480      	push	{r7}
 80295d8:	b085      	sub	sp, #20
 80295da:	af00      	add	r7, sp, #0
 80295dc:	6078      	str	r0, [r7, #4]
 80295de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	689b      	ldr	r3, [r3, #8]
 80295e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80295e6:	68fb      	ldr	r3, [r7, #12]
 80295e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80295ee:	683a      	ldr	r2, [r7, #0]
 80295f0:	68fb      	ldr	r3, [r7, #12]
 80295f2:	4313      	orrs	r3, r2
 80295f4:	f043 0307 	orr.w	r3, r3, #7
 80295f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	68fa      	ldr	r2, [r7, #12]
 80295fe:	609a      	str	r2, [r3, #8]
}
 8029600:	bf00      	nop
 8029602:	3714      	adds	r7, #20
 8029604:	46bd      	mov	sp, r7
 8029606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802960a:	4770      	bx	lr

0802960c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802960c:	b480      	push	{r7}
 802960e:	b087      	sub	sp, #28
 8029610:	af00      	add	r7, sp, #0
 8029612:	60f8      	str	r0, [r7, #12]
 8029614:	60b9      	str	r1, [r7, #8]
 8029616:	607a      	str	r2, [r7, #4]
 8029618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802961a:	68fb      	ldr	r3, [r7, #12]
 802961c:	689b      	ldr	r3, [r3, #8]
 802961e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029620:	697b      	ldr	r3, [r7, #20]
 8029622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029628:	683b      	ldr	r3, [r7, #0]
 802962a:	021a      	lsls	r2, r3, #8
 802962c:	687b      	ldr	r3, [r7, #4]
 802962e:	431a      	orrs	r2, r3
 8029630:	68bb      	ldr	r3, [r7, #8]
 8029632:	4313      	orrs	r3, r2
 8029634:	697a      	ldr	r2, [r7, #20]
 8029636:	4313      	orrs	r3, r2
 8029638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802963a:	68fb      	ldr	r3, [r7, #12]
 802963c:	697a      	ldr	r2, [r7, #20]
 802963e:	609a      	str	r2, [r3, #8]
}
 8029640:	bf00      	nop
 8029642:	371c      	adds	r7, #28
 8029644:	46bd      	mov	sp, r7
 8029646:	f85d 7b04 	ldr.w	r7, [sp], #4
 802964a:	4770      	bx	lr

0802964c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802964c:	b480      	push	{r7}
 802964e:	b085      	sub	sp, #20
 8029650:	af00      	add	r7, sp, #0
 8029652:	6078      	str	r0, [r7, #4]
 8029654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029656:	687b      	ldr	r3, [r7, #4]
 8029658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802965c:	2b01      	cmp	r3, #1
 802965e:	d101      	bne.n	8029664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029660:	2302      	movs	r3, #2
 8029662:	e05a      	b.n	802971a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029664:	687b      	ldr	r3, [r7, #4]
 8029666:	2201      	movs	r2, #1
 8029668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802966c:	687b      	ldr	r3, [r7, #4]
 802966e:	2202      	movs	r2, #2
 8029670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	681b      	ldr	r3, [r3, #0]
 8029678:	685b      	ldr	r3, [r3, #4]
 802967a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802967c:	687b      	ldr	r3, [r7, #4]
 802967e:	681b      	ldr	r3, [r3, #0]
 8029680:	689b      	ldr	r3, [r3, #8]
 8029682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029684:	68fb      	ldr	r3, [r7, #12]
 8029686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802968a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802968c:	683b      	ldr	r3, [r7, #0]
 802968e:	681b      	ldr	r3, [r3, #0]
 8029690:	68fa      	ldr	r2, [r7, #12]
 8029692:	4313      	orrs	r3, r2
 8029694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029696:	687b      	ldr	r3, [r7, #4]
 8029698:	681b      	ldr	r3, [r3, #0]
 802969a:	68fa      	ldr	r2, [r7, #12]
 802969c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802969e:	687b      	ldr	r3, [r7, #4]
 80296a0:	681b      	ldr	r3, [r3, #0]
 80296a2:	4a21      	ldr	r2, [pc, #132]	; (8029728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80296a4:	4293      	cmp	r3, r2
 80296a6:	d022      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	681b      	ldr	r3, [r3, #0]
 80296ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80296b0:	d01d      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296b2:	687b      	ldr	r3, [r7, #4]
 80296b4:	681b      	ldr	r3, [r3, #0]
 80296b6:	4a1d      	ldr	r2, [pc, #116]	; (802972c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80296b8:	4293      	cmp	r3, r2
 80296ba:	d018      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296bc:	687b      	ldr	r3, [r7, #4]
 80296be:	681b      	ldr	r3, [r3, #0]
 80296c0:	4a1b      	ldr	r2, [pc, #108]	; (8029730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80296c2:	4293      	cmp	r3, r2
 80296c4:	d013      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296c6:	687b      	ldr	r3, [r7, #4]
 80296c8:	681b      	ldr	r3, [r3, #0]
 80296ca:	4a1a      	ldr	r2, [pc, #104]	; (8029734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80296cc:	4293      	cmp	r3, r2
 80296ce:	d00e      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296d0:	687b      	ldr	r3, [r7, #4]
 80296d2:	681b      	ldr	r3, [r3, #0]
 80296d4:	4a18      	ldr	r2, [pc, #96]	; (8029738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80296d6:	4293      	cmp	r3, r2
 80296d8:	d009      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296da:	687b      	ldr	r3, [r7, #4]
 80296dc:	681b      	ldr	r3, [r3, #0]
 80296de:	4a17      	ldr	r2, [pc, #92]	; (802973c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80296e0:	4293      	cmp	r3, r2
 80296e2:	d004      	beq.n	80296ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296e4:	687b      	ldr	r3, [r7, #4]
 80296e6:	681b      	ldr	r3, [r3, #0]
 80296e8:	4a15      	ldr	r2, [pc, #84]	; (8029740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80296ea:	4293      	cmp	r3, r2
 80296ec:	d10c      	bne.n	8029708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80296ee:	68bb      	ldr	r3, [r7, #8]
 80296f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80296f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80296f6:	683b      	ldr	r3, [r7, #0]
 80296f8:	685b      	ldr	r3, [r3, #4]
 80296fa:	68ba      	ldr	r2, [r7, #8]
 80296fc:	4313      	orrs	r3, r2
 80296fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	681b      	ldr	r3, [r3, #0]
 8029704:	68ba      	ldr	r2, [r7, #8]
 8029706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029708:	687b      	ldr	r3, [r7, #4]
 802970a:	2201      	movs	r2, #1
 802970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029710:	687b      	ldr	r3, [r7, #4]
 8029712:	2200      	movs	r2, #0
 8029714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029718:	2300      	movs	r3, #0
}
 802971a:	4618      	mov	r0, r3
 802971c:	3714      	adds	r7, #20
 802971e:	46bd      	mov	sp, r7
 8029720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029724:	4770      	bx	lr
 8029726:	bf00      	nop
 8029728:	40010000 	.word	0x40010000
 802972c:	40000400 	.word	0x40000400
 8029730:	40000800 	.word	0x40000800
 8029734:	40000c00 	.word	0x40000c00
 8029738:	40010400 	.word	0x40010400
 802973c:	40014000 	.word	0x40014000
 8029740:	40001800 	.word	0x40001800

08029744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029744:	b480      	push	{r7}
 8029746:	b083      	sub	sp, #12
 8029748:	af00      	add	r7, sp, #0
 802974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802974c:	bf00      	nop
 802974e:	370c      	adds	r7, #12
 8029750:	46bd      	mov	sp, r7
 8029752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029756:	4770      	bx	lr

08029758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029758:	b480      	push	{r7}
 802975a:	b083      	sub	sp, #12
 802975c:	af00      	add	r7, sp, #0
 802975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029760:	bf00      	nop
 8029762:	370c      	adds	r7, #12
 8029764:	46bd      	mov	sp, r7
 8029766:	f85d 7b04 	ldr.w	r7, [sp], #4
 802976a:	4770      	bx	lr

0802976c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802976c:	b580      	push	{r7, lr}
 802976e:	b082      	sub	sp, #8
 8029770:	af00      	add	r7, sp, #0
 8029772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	2b00      	cmp	r3, #0
 8029778:	d101      	bne.n	802977e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 802977a:	2301      	movs	r3, #1
 802977c:	e03f      	b.n	80297fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802977e:	687b      	ldr	r3, [r7, #4]
 8029780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029784:	b2db      	uxtb	r3, r3
 8029786:	2b00      	cmp	r3, #0
 8029788:	d106      	bne.n	8029798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802978a:	687b      	ldr	r3, [r7, #4]
 802978c:	2200      	movs	r2, #0
 802978e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8029792:	6878      	ldr	r0, [r7, #4]
 8029794:	f7f8 fa46 	bl	8021c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8029798:	687b      	ldr	r3, [r7, #4]
 802979a:	2224      	movs	r2, #36	; 0x24
 802979c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80297a0:	687b      	ldr	r3, [r7, #4]
 80297a2:	681b      	ldr	r3, [r3, #0]
 80297a4:	68da      	ldr	r2, [r3, #12]
 80297a6:	687b      	ldr	r3, [r7, #4]
 80297a8:	681b      	ldr	r3, [r3, #0]
 80297aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80297ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80297b0:	6878      	ldr	r0, [r7, #4]
 80297b2:	f000 fddf 	bl	802a374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80297b6:	687b      	ldr	r3, [r7, #4]
 80297b8:	681b      	ldr	r3, [r3, #0]
 80297ba:	691a      	ldr	r2, [r3, #16]
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	681b      	ldr	r3, [r3, #0]
 80297c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80297c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	681b      	ldr	r3, [r3, #0]
 80297ca:	695a      	ldr	r2, [r3, #20]
 80297cc:	687b      	ldr	r3, [r7, #4]
 80297ce:	681b      	ldr	r3, [r3, #0]
 80297d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80297d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80297d6:	687b      	ldr	r3, [r7, #4]
 80297d8:	681b      	ldr	r3, [r3, #0]
 80297da:	68da      	ldr	r2, [r3, #12]
 80297dc:	687b      	ldr	r3, [r7, #4]
 80297de:	681b      	ldr	r3, [r3, #0]
 80297e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80297e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80297e6:	687b      	ldr	r3, [r7, #4]
 80297e8:	2200      	movs	r2, #0
 80297ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	2220      	movs	r2, #32
 80297f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	2220      	movs	r2, #32
 80297f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80297fc:	2300      	movs	r3, #0
}
 80297fe:	4618      	mov	r0, r3
 8029800:	3708      	adds	r7, #8
 8029802:	46bd      	mov	sp, r7
 8029804:	bd80      	pop	{r7, pc}

08029806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8029806:	b580      	push	{r7, lr}
 8029808:	b08a      	sub	sp, #40	; 0x28
 802980a:	af02      	add	r7, sp, #8
 802980c:	60f8      	str	r0, [r7, #12]
 802980e:	60b9      	str	r1, [r7, #8]
 8029810:	603b      	str	r3, [r7, #0]
 8029812:	4613      	mov	r3, r2
 8029814:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8029816:	2300      	movs	r3, #0
 8029818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802981a:	68fb      	ldr	r3, [r7, #12]
 802981c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029820:	b2db      	uxtb	r3, r3
 8029822:	2b20      	cmp	r3, #32
 8029824:	d17c      	bne.n	8029920 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8029826:	68bb      	ldr	r3, [r7, #8]
 8029828:	2b00      	cmp	r3, #0
 802982a:	d002      	beq.n	8029832 <HAL_UART_Transmit+0x2c>
 802982c:	88fb      	ldrh	r3, [r7, #6]
 802982e:	2b00      	cmp	r3, #0
 8029830:	d101      	bne.n	8029836 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8029832:	2301      	movs	r3, #1
 8029834:	e075      	b.n	8029922 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029836:	68fb      	ldr	r3, [r7, #12]
 8029838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802983c:	2b01      	cmp	r3, #1
 802983e:	d101      	bne.n	8029844 <HAL_UART_Transmit+0x3e>
 8029840:	2302      	movs	r3, #2
 8029842:	e06e      	b.n	8029922 <HAL_UART_Transmit+0x11c>
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	2201      	movs	r2, #1
 8029848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802984c:	68fb      	ldr	r3, [r7, #12]
 802984e:	2200      	movs	r2, #0
 8029850:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8029852:	68fb      	ldr	r3, [r7, #12]
 8029854:	2221      	movs	r2, #33	; 0x21
 8029856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802985a:	f7f9 ff0b 	bl	8023674 <HAL_GetTick>
 802985e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8029860:	68fb      	ldr	r3, [r7, #12]
 8029862:	88fa      	ldrh	r2, [r7, #6]
 8029864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8029866:	68fb      	ldr	r3, [r7, #12]
 8029868:	88fa      	ldrh	r2, [r7, #6]
 802986a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802986c:	68fb      	ldr	r3, [r7, #12]
 802986e:	689b      	ldr	r3, [r3, #8]
 8029870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029874:	d108      	bne.n	8029888 <HAL_UART_Transmit+0x82>
 8029876:	68fb      	ldr	r3, [r7, #12]
 8029878:	691b      	ldr	r3, [r3, #16]
 802987a:	2b00      	cmp	r3, #0
 802987c:	d104      	bne.n	8029888 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802987e:	2300      	movs	r3, #0
 8029880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8029882:	68bb      	ldr	r3, [r7, #8]
 8029884:	61bb      	str	r3, [r7, #24]
 8029886:	e003      	b.n	8029890 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8029888:	68bb      	ldr	r3, [r7, #8]
 802988a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802988c:	2300      	movs	r3, #0
 802988e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8029890:	68fb      	ldr	r3, [r7, #12]
 8029892:	2200      	movs	r2, #0
 8029894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8029898:	e02a      	b.n	80298f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802989a:	683b      	ldr	r3, [r7, #0]
 802989c:	9300      	str	r3, [sp, #0]
 802989e:	697b      	ldr	r3, [r7, #20]
 80298a0:	2200      	movs	r2, #0
 80298a2:	2180      	movs	r1, #128	; 0x80
 80298a4:	68f8      	ldr	r0, [r7, #12]
 80298a6:	f000 fb1f 	bl	8029ee8 <UART_WaitOnFlagUntilTimeout>
 80298aa:	4603      	mov	r3, r0
 80298ac:	2b00      	cmp	r3, #0
 80298ae:	d001      	beq.n	80298b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80298b0:	2303      	movs	r3, #3
 80298b2:	e036      	b.n	8029922 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80298b4:	69fb      	ldr	r3, [r7, #28]
 80298b6:	2b00      	cmp	r3, #0
 80298b8:	d10b      	bne.n	80298d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80298ba:	69bb      	ldr	r3, [r7, #24]
 80298bc:	881b      	ldrh	r3, [r3, #0]
 80298be:	461a      	mov	r2, r3
 80298c0:	68fb      	ldr	r3, [r7, #12]
 80298c2:	681b      	ldr	r3, [r3, #0]
 80298c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80298c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80298ca:	69bb      	ldr	r3, [r7, #24]
 80298cc:	3302      	adds	r3, #2
 80298ce:	61bb      	str	r3, [r7, #24]
 80298d0:	e007      	b.n	80298e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80298d2:	69fb      	ldr	r3, [r7, #28]
 80298d4:	781a      	ldrb	r2, [r3, #0]
 80298d6:	68fb      	ldr	r3, [r7, #12]
 80298d8:	681b      	ldr	r3, [r3, #0]
 80298da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80298dc:	69fb      	ldr	r3, [r7, #28]
 80298de:	3301      	adds	r3, #1
 80298e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80298e2:	68fb      	ldr	r3, [r7, #12]
 80298e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298e6:	b29b      	uxth	r3, r3
 80298e8:	3b01      	subs	r3, #1
 80298ea:	b29a      	uxth	r2, r3
 80298ec:	68fb      	ldr	r3, [r7, #12]
 80298ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80298f0:	68fb      	ldr	r3, [r7, #12]
 80298f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298f4:	b29b      	uxth	r3, r3
 80298f6:	2b00      	cmp	r3, #0
 80298f8:	d1cf      	bne.n	802989a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80298fa:	683b      	ldr	r3, [r7, #0]
 80298fc:	9300      	str	r3, [sp, #0]
 80298fe:	697b      	ldr	r3, [r7, #20]
 8029900:	2200      	movs	r2, #0
 8029902:	2140      	movs	r1, #64	; 0x40
 8029904:	68f8      	ldr	r0, [r7, #12]
 8029906:	f000 faef 	bl	8029ee8 <UART_WaitOnFlagUntilTimeout>
 802990a:	4603      	mov	r3, r0
 802990c:	2b00      	cmp	r3, #0
 802990e:	d001      	beq.n	8029914 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8029910:	2303      	movs	r3, #3
 8029912:	e006      	b.n	8029922 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8029914:	68fb      	ldr	r3, [r7, #12]
 8029916:	2220      	movs	r2, #32
 8029918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802991c:	2300      	movs	r3, #0
 802991e:	e000      	b.n	8029922 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8029920:	2302      	movs	r3, #2
  }
}
 8029922:	4618      	mov	r0, r3
 8029924:	3720      	adds	r7, #32
 8029926:	46bd      	mov	sp, r7
 8029928:	bd80      	pop	{r7, pc}

0802992a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802992a:	b580      	push	{r7, lr}
 802992c:	b084      	sub	sp, #16
 802992e:	af00      	add	r7, sp, #0
 8029930:	60f8      	str	r0, [r7, #12]
 8029932:	60b9      	str	r1, [r7, #8]
 8029934:	4613      	mov	r3, r2
 8029936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8029938:	68fb      	ldr	r3, [r7, #12]
 802993a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802993e:	b2db      	uxtb	r3, r3
 8029940:	2b20      	cmp	r3, #32
 8029942:	d11d      	bne.n	8029980 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8029944:	68bb      	ldr	r3, [r7, #8]
 8029946:	2b00      	cmp	r3, #0
 8029948:	d002      	beq.n	8029950 <HAL_UART_Receive_IT+0x26>
 802994a:	88fb      	ldrh	r3, [r7, #6]
 802994c:	2b00      	cmp	r3, #0
 802994e:	d101      	bne.n	8029954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8029950:	2301      	movs	r3, #1
 8029952:	e016      	b.n	8029982 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029954:	68fb      	ldr	r3, [r7, #12]
 8029956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802995a:	2b01      	cmp	r3, #1
 802995c:	d101      	bne.n	8029962 <HAL_UART_Receive_IT+0x38>
 802995e:	2302      	movs	r3, #2
 8029960:	e00f      	b.n	8029982 <HAL_UART_Receive_IT+0x58>
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	2201      	movs	r2, #1
 8029966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802996a:	68fb      	ldr	r3, [r7, #12]
 802996c:	2200      	movs	r2, #0
 802996e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8029970:	88fb      	ldrh	r3, [r7, #6]
 8029972:	461a      	mov	r2, r3
 8029974:	68b9      	ldr	r1, [r7, #8]
 8029976:	68f8      	ldr	r0, [r7, #12]
 8029978:	f000 fb24 	bl	8029fc4 <UART_Start_Receive_IT>
 802997c:	4603      	mov	r3, r0
 802997e:	e000      	b.n	8029982 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8029980:	2302      	movs	r3, #2
  }
}
 8029982:	4618      	mov	r0, r3
 8029984:	3710      	adds	r7, #16
 8029986:	46bd      	mov	sp, r7
 8029988:	bd80      	pop	{r7, pc}
	...

0802998c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 802998c:	b580      	push	{r7, lr}
 802998e:	b0ba      	sub	sp, #232	; 0xe8
 8029990:	af00      	add	r7, sp, #0
 8029992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	681b      	ldr	r3, [r3, #0]
 8029998:	681b      	ldr	r3, [r3, #0]
 802999a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802999e:	687b      	ldr	r3, [r7, #4]
 80299a0:	681b      	ldr	r3, [r3, #0]
 80299a2:	68db      	ldr	r3, [r3, #12]
 80299a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	681b      	ldr	r3, [r3, #0]
 80299ac:	695b      	ldr	r3, [r3, #20]
 80299ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80299b2:	2300      	movs	r3, #0
 80299b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80299b8:	2300      	movs	r3, #0
 80299ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80299be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299c2:	f003 030f 	and.w	r3, r3, #15
 80299c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80299ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80299ce:	2b00      	cmp	r3, #0
 80299d0:	d10f      	bne.n	80299f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80299d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299d6:	f003 0320 	and.w	r3, r3, #32
 80299da:	2b00      	cmp	r3, #0
 80299dc:	d009      	beq.n	80299f2 <HAL_UART_IRQHandler+0x66>
 80299de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299e2:	f003 0320 	and.w	r3, r3, #32
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	d003      	beq.n	80299f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80299ea:	6878      	ldr	r0, [r7, #4]
 80299ec:	f000 fc07 	bl	802a1fe <UART_Receive_IT>
      return;
 80299f0:	e256      	b.n	8029ea0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80299f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80299f6:	2b00      	cmp	r3, #0
 80299f8:	f000 80de 	beq.w	8029bb8 <HAL_UART_IRQHandler+0x22c>
 80299fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a00:	f003 0301 	and.w	r3, r3, #1
 8029a04:	2b00      	cmp	r3, #0
 8029a06:	d106      	bne.n	8029a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8029a10:	2b00      	cmp	r3, #0
 8029a12:	f000 80d1 	beq.w	8029bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a1a:	f003 0301 	and.w	r3, r3, #1
 8029a1e:	2b00      	cmp	r3, #0
 8029a20:	d00b      	beq.n	8029a3a <HAL_UART_IRQHandler+0xae>
 8029a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029a2a:	2b00      	cmp	r3, #0
 8029a2c:	d005      	beq.n	8029a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029a2e:	687b      	ldr	r3, [r7, #4]
 8029a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a32:	f043 0201 	orr.w	r2, r3, #1
 8029a36:	687b      	ldr	r3, [r7, #4]
 8029a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a3e:	f003 0304 	and.w	r3, r3, #4
 8029a42:	2b00      	cmp	r3, #0
 8029a44:	d00b      	beq.n	8029a5e <HAL_UART_IRQHandler+0xd2>
 8029a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a4a:	f003 0301 	and.w	r3, r3, #1
 8029a4e:	2b00      	cmp	r3, #0
 8029a50:	d005      	beq.n	8029a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8029a52:	687b      	ldr	r3, [r7, #4]
 8029a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a56:	f043 0202 	orr.w	r2, r3, #2
 8029a5a:	687b      	ldr	r3, [r7, #4]
 8029a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a62:	f003 0302 	and.w	r3, r3, #2
 8029a66:	2b00      	cmp	r3, #0
 8029a68:	d00b      	beq.n	8029a82 <HAL_UART_IRQHandler+0xf6>
 8029a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a6e:	f003 0301 	and.w	r3, r3, #1
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	d005      	beq.n	8029a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8029a76:	687b      	ldr	r3, [r7, #4]
 8029a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a7a:	f043 0204 	orr.w	r2, r3, #4
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8029a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a86:	f003 0308 	and.w	r3, r3, #8
 8029a8a:	2b00      	cmp	r3, #0
 8029a8c:	d011      	beq.n	8029ab2 <HAL_UART_IRQHandler+0x126>
 8029a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a92:	f003 0320 	and.w	r3, r3, #32
 8029a96:	2b00      	cmp	r3, #0
 8029a98:	d105      	bne.n	8029aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8029a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a9e:	f003 0301 	and.w	r3, r3, #1
 8029aa2:	2b00      	cmp	r3, #0
 8029aa4:	d005      	beq.n	8029ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8029aa6:	687b      	ldr	r3, [r7, #4]
 8029aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029aaa:	f043 0208 	orr.w	r2, r3, #8
 8029aae:	687b      	ldr	r3, [r7, #4]
 8029ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029ab2:	687b      	ldr	r3, [r7, #4]
 8029ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029ab6:	2b00      	cmp	r3, #0
 8029ab8:	f000 81ed 	beq.w	8029e96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8029abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029ac0:	f003 0320 	and.w	r3, r3, #32
 8029ac4:	2b00      	cmp	r3, #0
 8029ac6:	d008      	beq.n	8029ada <HAL_UART_IRQHandler+0x14e>
 8029ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029acc:	f003 0320 	and.w	r3, r3, #32
 8029ad0:	2b00      	cmp	r3, #0
 8029ad2:	d002      	beq.n	8029ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8029ad4:	6878      	ldr	r0, [r7, #4]
 8029ad6:	f000 fb92 	bl	802a1fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8029ada:	687b      	ldr	r3, [r7, #4]
 8029adc:	681b      	ldr	r3, [r3, #0]
 8029ade:	695b      	ldr	r3, [r3, #20]
 8029ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ae4:	2b40      	cmp	r3, #64	; 0x40
 8029ae6:	bf0c      	ite	eq
 8029ae8:	2301      	moveq	r3, #1
 8029aea:	2300      	movne	r3, #0
 8029aec:	b2db      	uxtb	r3, r3
 8029aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029af6:	f003 0308 	and.w	r3, r3, #8
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	d103      	bne.n	8029b06 <HAL_UART_IRQHandler+0x17a>
 8029afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029b02:	2b00      	cmp	r3, #0
 8029b04:	d04f      	beq.n	8029ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029b06:	6878      	ldr	r0, [r7, #4]
 8029b08:	f000 fa9a 	bl	802a040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b0c:	687b      	ldr	r3, [r7, #4]
 8029b0e:	681b      	ldr	r3, [r3, #0]
 8029b10:	695b      	ldr	r3, [r3, #20]
 8029b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029b16:	2b40      	cmp	r3, #64	; 0x40
 8029b18:	d141      	bne.n	8029b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	681b      	ldr	r3, [r3, #0]
 8029b1e:	3314      	adds	r3, #20
 8029b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029b28:	e853 3f00 	ldrex	r3, [r3]
 8029b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029b3c:	687b      	ldr	r3, [r7, #4]
 8029b3e:	681b      	ldr	r3, [r3, #0]
 8029b40:	3314      	adds	r3, #20
 8029b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029b56:	e841 2300 	strex	r3, r2, [r1]
 8029b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029b62:	2b00      	cmp	r3, #0
 8029b64:	d1d9      	bne.n	8029b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8029b66:	687b      	ldr	r3, [r7, #4]
 8029b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b6a:	2b00      	cmp	r3, #0
 8029b6c:	d013      	beq.n	8029b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029b6e:	687b      	ldr	r3, [r7, #4]
 8029b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b72:	4a7d      	ldr	r2, [pc, #500]	; (8029d68 <HAL_UART_IRQHandler+0x3dc>)
 8029b74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029b76:	687b      	ldr	r3, [r7, #4]
 8029b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b7a:	4618      	mov	r0, r3
 8029b7c:	f7fa f840 	bl	8023c00 <HAL_DMA_Abort_IT>
 8029b80:	4603      	mov	r3, r0
 8029b82:	2b00      	cmp	r3, #0
 8029b84:	d016      	beq.n	8029bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029b86:	687b      	ldr	r3, [r7, #4]
 8029b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029b8c:	687a      	ldr	r2, [r7, #4]
 8029b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029b90:	4610      	mov	r0, r2
 8029b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b94:	e00e      	b.n	8029bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029b96:	6878      	ldr	r0, [r7, #4]
 8029b98:	f000 f990 	bl	8029ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b9c:	e00a      	b.n	8029bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029b9e:	6878      	ldr	r0, [r7, #4]
 8029ba0:	f000 f98c 	bl	8029ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029ba4:	e006      	b.n	8029bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029ba6:	6878      	ldr	r0, [r7, #4]
 8029ba8:	f000 f988 	bl	8029ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029bac:	687b      	ldr	r3, [r7, #4]
 8029bae:	2200      	movs	r2, #0
 8029bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029bb2:	e170      	b.n	8029e96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bb4:	bf00      	nop
    return;
 8029bb6:	e16e      	b.n	8029e96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029bb8:	687b      	ldr	r3, [r7, #4]
 8029bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029bbc:	2b01      	cmp	r3, #1
 8029bbe:	f040 814a 	bne.w	8029e56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029bc6:	f003 0310 	and.w	r3, r3, #16
 8029bca:	2b00      	cmp	r3, #0
 8029bcc:	f000 8143 	beq.w	8029e56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029bd4:	f003 0310 	and.w	r3, r3, #16
 8029bd8:	2b00      	cmp	r3, #0
 8029bda:	f000 813c 	beq.w	8029e56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029bde:	2300      	movs	r3, #0
 8029be0:	60bb      	str	r3, [r7, #8]
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	681b      	ldr	r3, [r3, #0]
 8029be6:	681b      	ldr	r3, [r3, #0]
 8029be8:	60bb      	str	r3, [r7, #8]
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	681b      	ldr	r3, [r3, #0]
 8029bee:	685b      	ldr	r3, [r3, #4]
 8029bf0:	60bb      	str	r3, [r7, #8]
 8029bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bf4:	687b      	ldr	r3, [r7, #4]
 8029bf6:	681b      	ldr	r3, [r3, #0]
 8029bf8:	695b      	ldr	r3, [r3, #20]
 8029bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029bfe:	2b40      	cmp	r3, #64	; 0x40
 8029c00:	f040 80b4 	bne.w	8029d6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c08:	681b      	ldr	r3, [r3, #0]
 8029c0a:	685b      	ldr	r3, [r3, #4]
 8029c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029c14:	2b00      	cmp	r3, #0
 8029c16:	f000 8140 	beq.w	8029e9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c22:	429a      	cmp	r2, r3
 8029c24:	f080 8139 	bcs.w	8029e9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029c28:	687b      	ldr	r3, [r7, #4]
 8029c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c34:	69db      	ldr	r3, [r3, #28]
 8029c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029c3a:	f000 8088 	beq.w	8029d4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029c3e:	687b      	ldr	r3, [r7, #4]
 8029c40:	681b      	ldr	r3, [r3, #0]
 8029c42:	330c      	adds	r3, #12
 8029c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029c4c:	e853 3f00 	ldrex	r3, [r3]
 8029c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029c60:	687b      	ldr	r3, [r7, #4]
 8029c62:	681b      	ldr	r3, [r3, #0]
 8029c64:	330c      	adds	r3, #12
 8029c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8029c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029c7a:	e841 2300 	strex	r3, r2, [r1]
 8029c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029c86:	2b00      	cmp	r3, #0
 8029c88:	d1d9      	bne.n	8029c3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	681b      	ldr	r3, [r3, #0]
 8029c8e:	3314      	adds	r3, #20
 8029c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029c94:	e853 3f00 	ldrex	r3, [r3]
 8029c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029c9c:	f023 0301 	bic.w	r3, r3, #1
 8029ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029ca4:	687b      	ldr	r3, [r7, #4]
 8029ca6:	681b      	ldr	r3, [r3, #0]
 8029ca8:	3314      	adds	r3, #20
 8029caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029cba:	e841 2300 	strex	r3, r2, [r1]
 8029cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029cc2:	2b00      	cmp	r3, #0
 8029cc4:	d1e1      	bne.n	8029c8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	681b      	ldr	r3, [r3, #0]
 8029cca:	3314      	adds	r3, #20
 8029ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029cd0:	e853 3f00 	ldrex	r3, [r3]
 8029cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	681b      	ldr	r3, [r3, #0]
 8029ce4:	3314      	adds	r3, #20
 8029ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029cf2:	e841 2300 	strex	r3, r2, [r1]
 8029cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029cfa:	2b00      	cmp	r3, #0
 8029cfc:	d1e3      	bne.n	8029cc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029cfe:	687b      	ldr	r3, [r7, #4]
 8029d00:	2220      	movs	r2, #32
 8029d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d06:	687b      	ldr	r3, [r7, #4]
 8029d08:	2200      	movs	r2, #0
 8029d0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d0c:	687b      	ldr	r3, [r7, #4]
 8029d0e:	681b      	ldr	r3, [r3, #0]
 8029d10:	330c      	adds	r3, #12
 8029d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d16:	e853 3f00 	ldrex	r3, [r3]
 8029d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d1e:	f023 0310 	bic.w	r3, r3, #16
 8029d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029d26:	687b      	ldr	r3, [r7, #4]
 8029d28:	681b      	ldr	r3, [r3, #0]
 8029d2a:	330c      	adds	r3, #12
 8029d2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8029d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029d38:	e841 2300 	strex	r3, r2, [r1]
 8029d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d40:	2b00      	cmp	r3, #0
 8029d42:	d1e3      	bne.n	8029d0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029d44:	687b      	ldr	r3, [r7, #4]
 8029d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029d48:	4618      	mov	r0, r3
 8029d4a:	f7f9 fee9 	bl	8023b20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029d4e:	687b      	ldr	r3, [r7, #4]
 8029d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d56:	b29b      	uxth	r3, r3
 8029d58:	1ad3      	subs	r3, r2, r3
 8029d5a:	b29b      	uxth	r3, r3
 8029d5c:	4619      	mov	r1, r3
 8029d5e:	6878      	ldr	r0, [r7, #4]
 8029d60:	f000 f8b6 	bl	8029ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029d64:	e099      	b.n	8029e9a <HAL_UART_IRQHandler+0x50e>
 8029d66:	bf00      	nop
 8029d68:	0802a107 	.word	0x0802a107
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d70:	687b      	ldr	r3, [r7, #4]
 8029d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d74:	b29b      	uxth	r3, r3
 8029d76:	1ad3      	subs	r3, r2, r3
 8029d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029d7c:	687b      	ldr	r3, [r7, #4]
 8029d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d80:	b29b      	uxth	r3, r3
 8029d82:	2b00      	cmp	r3, #0
 8029d84:	f000 808b 	beq.w	8029e9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8029d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029d8c:	2b00      	cmp	r3, #0
 8029d8e:	f000 8086 	beq.w	8029e9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029d92:	687b      	ldr	r3, [r7, #4]
 8029d94:	681b      	ldr	r3, [r3, #0]
 8029d96:	330c      	adds	r3, #12
 8029d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029d9c:	e853 3f00 	ldrex	r3, [r3]
 8029da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	681b      	ldr	r3, [r3, #0]
 8029db0:	330c      	adds	r3, #12
 8029db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029db6:	647a      	str	r2, [r7, #68]	; 0x44
 8029db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029dbe:	e841 2300 	strex	r3, r2, [r1]
 8029dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dc6:	2b00      	cmp	r3, #0
 8029dc8:	d1e3      	bne.n	8029d92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029dca:	687b      	ldr	r3, [r7, #4]
 8029dcc:	681b      	ldr	r3, [r3, #0]
 8029dce:	3314      	adds	r3, #20
 8029dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029dd4:	e853 3f00 	ldrex	r3, [r3]
 8029dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8029dda:	6a3b      	ldr	r3, [r7, #32]
 8029ddc:	f023 0301 	bic.w	r3, r3, #1
 8029de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029de4:	687b      	ldr	r3, [r7, #4]
 8029de6:	681b      	ldr	r3, [r3, #0]
 8029de8:	3314      	adds	r3, #20
 8029dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029dee:	633a      	str	r2, [r7, #48]	; 0x30
 8029df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029df6:	e841 2300 	strex	r3, r2, [r1]
 8029dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029dfe:	2b00      	cmp	r3, #0
 8029e00:	d1e3      	bne.n	8029dca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	2220      	movs	r2, #32
 8029e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029e0a:	687b      	ldr	r3, [r7, #4]
 8029e0c:	2200      	movs	r2, #0
 8029e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029e10:	687b      	ldr	r3, [r7, #4]
 8029e12:	681b      	ldr	r3, [r3, #0]
 8029e14:	330c      	adds	r3, #12
 8029e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e18:	693b      	ldr	r3, [r7, #16]
 8029e1a:	e853 3f00 	ldrex	r3, [r3]
 8029e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8029e20:	68fb      	ldr	r3, [r7, #12]
 8029e22:	f023 0310 	bic.w	r3, r3, #16
 8029e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029e2a:	687b      	ldr	r3, [r7, #4]
 8029e2c:	681b      	ldr	r3, [r3, #0]
 8029e2e:	330c      	adds	r3, #12
 8029e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029e34:	61fa      	str	r2, [r7, #28]
 8029e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e38:	69b9      	ldr	r1, [r7, #24]
 8029e3a:	69fa      	ldr	r2, [r7, #28]
 8029e3c:	e841 2300 	strex	r3, r2, [r1]
 8029e40:	617b      	str	r3, [r7, #20]
   return(result);
 8029e42:	697b      	ldr	r3, [r7, #20]
 8029e44:	2b00      	cmp	r3, #0
 8029e46:	d1e3      	bne.n	8029e10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029e4c:	4619      	mov	r1, r3
 8029e4e:	6878      	ldr	r0, [r7, #4]
 8029e50:	f000 f83e 	bl	8029ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029e54:	e023      	b.n	8029e9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e5e:	2b00      	cmp	r3, #0
 8029e60:	d009      	beq.n	8029e76 <HAL_UART_IRQHandler+0x4ea>
 8029e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e6a:	2b00      	cmp	r3, #0
 8029e6c:	d003      	beq.n	8029e76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8029e6e:	6878      	ldr	r0, [r7, #4]
 8029e70:	f000 f95d 	bl	802a12e <UART_Transmit_IT>
    return;
 8029e74:	e014      	b.n	8029ea0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8029e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029e7e:	2b00      	cmp	r3, #0
 8029e80:	d00e      	beq.n	8029ea0 <HAL_UART_IRQHandler+0x514>
 8029e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029e8a:	2b00      	cmp	r3, #0
 8029e8c:	d008      	beq.n	8029ea0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8029e8e:	6878      	ldr	r0, [r7, #4]
 8029e90:	f000 f99d 	bl	802a1ce <UART_EndTransmit_IT>
    return;
 8029e94:	e004      	b.n	8029ea0 <HAL_UART_IRQHandler+0x514>
    return;
 8029e96:	bf00      	nop
 8029e98:	e002      	b.n	8029ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8029e9a:	bf00      	nop
 8029e9c:	e000      	b.n	8029ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8029e9e:	bf00      	nop
  }
}
 8029ea0:	37e8      	adds	r7, #232	; 0xe8
 8029ea2:	46bd      	mov	sp, r7
 8029ea4:	bd80      	pop	{r7, pc}
 8029ea6:	bf00      	nop

08029ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029ea8:	b480      	push	{r7}
 8029eaa:	b083      	sub	sp, #12
 8029eac:	af00      	add	r7, sp, #0
 8029eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029eb0:	bf00      	nop
 8029eb2:	370c      	adds	r7, #12
 8029eb4:	46bd      	mov	sp, r7
 8029eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029eba:	4770      	bx	lr

08029ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8029ebc:	b480      	push	{r7}
 8029ebe:	b083      	sub	sp, #12
 8029ec0:	af00      	add	r7, sp, #0
 8029ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029ec4:	bf00      	nop
 8029ec6:	370c      	adds	r7, #12
 8029ec8:	46bd      	mov	sp, r7
 8029eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ece:	4770      	bx	lr

08029ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029ed0:	b480      	push	{r7}
 8029ed2:	b083      	sub	sp, #12
 8029ed4:	af00      	add	r7, sp, #0
 8029ed6:	6078      	str	r0, [r7, #4]
 8029ed8:	460b      	mov	r3, r1
 8029eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8029edc:	bf00      	nop
 8029ede:	370c      	adds	r7, #12
 8029ee0:	46bd      	mov	sp, r7
 8029ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ee6:	4770      	bx	lr

08029ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029ee8:	b580      	push	{r7, lr}
 8029eea:	b090      	sub	sp, #64	; 0x40
 8029eec:	af00      	add	r7, sp, #0
 8029eee:	60f8      	str	r0, [r7, #12]
 8029ef0:	60b9      	str	r1, [r7, #8]
 8029ef2:	603b      	str	r3, [r7, #0]
 8029ef4:	4613      	mov	r3, r2
 8029ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029ef8:	e050      	b.n	8029f9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029f00:	d04c      	beq.n	8029f9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f04:	2b00      	cmp	r3, #0
 8029f06:	d007      	beq.n	8029f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8029f08:	f7f9 fbb4 	bl	8023674 <HAL_GetTick>
 8029f0c:	4602      	mov	r2, r0
 8029f0e:	683b      	ldr	r3, [r7, #0]
 8029f10:	1ad3      	subs	r3, r2, r3
 8029f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029f14:	429a      	cmp	r2, r3
 8029f16:	d241      	bcs.n	8029f9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029f18:	68fb      	ldr	r3, [r7, #12]
 8029f1a:	681b      	ldr	r3, [r3, #0]
 8029f1c:	330c      	adds	r3, #12
 8029f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029f22:	e853 3f00 	ldrex	r3, [r3]
 8029f26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029f30:	68fb      	ldr	r3, [r7, #12]
 8029f32:	681b      	ldr	r3, [r3, #0]
 8029f34:	330c      	adds	r3, #12
 8029f36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029f38:	637a      	str	r2, [r7, #52]	; 0x34
 8029f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029f40:	e841 2300 	strex	r3, r2, [r1]
 8029f44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029f48:	2b00      	cmp	r3, #0
 8029f4a:	d1e5      	bne.n	8029f18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029f4c:	68fb      	ldr	r3, [r7, #12]
 8029f4e:	681b      	ldr	r3, [r3, #0]
 8029f50:	3314      	adds	r3, #20
 8029f52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f54:	697b      	ldr	r3, [r7, #20]
 8029f56:	e853 3f00 	ldrex	r3, [r3]
 8029f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8029f5c:	693b      	ldr	r3, [r7, #16]
 8029f5e:	f023 0301 	bic.w	r3, r3, #1
 8029f62:	63bb      	str	r3, [r7, #56]	; 0x38
 8029f64:	68fb      	ldr	r3, [r7, #12]
 8029f66:	681b      	ldr	r3, [r3, #0]
 8029f68:	3314      	adds	r3, #20
 8029f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029f6c:	623a      	str	r2, [r7, #32]
 8029f6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f70:	69f9      	ldr	r1, [r7, #28]
 8029f72:	6a3a      	ldr	r2, [r7, #32]
 8029f74:	e841 2300 	strex	r3, r2, [r1]
 8029f78:	61bb      	str	r3, [r7, #24]
   return(result);
 8029f7a:	69bb      	ldr	r3, [r7, #24]
 8029f7c:	2b00      	cmp	r3, #0
 8029f7e:	d1e5      	bne.n	8029f4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029f80:	68fb      	ldr	r3, [r7, #12]
 8029f82:	2220      	movs	r2, #32
 8029f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029f88:	68fb      	ldr	r3, [r7, #12]
 8029f8a:	2220      	movs	r2, #32
 8029f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029f90:	68fb      	ldr	r3, [r7, #12]
 8029f92:	2200      	movs	r2, #0
 8029f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8029f98:	2303      	movs	r3, #3
 8029f9a:	e00f      	b.n	8029fbc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029f9c:	68fb      	ldr	r3, [r7, #12]
 8029f9e:	681b      	ldr	r3, [r3, #0]
 8029fa0:	681a      	ldr	r2, [r3, #0]
 8029fa2:	68bb      	ldr	r3, [r7, #8]
 8029fa4:	4013      	ands	r3, r2
 8029fa6:	68ba      	ldr	r2, [r7, #8]
 8029fa8:	429a      	cmp	r2, r3
 8029faa:	bf0c      	ite	eq
 8029fac:	2301      	moveq	r3, #1
 8029fae:	2300      	movne	r3, #0
 8029fb0:	b2db      	uxtb	r3, r3
 8029fb2:	461a      	mov	r2, r3
 8029fb4:	79fb      	ldrb	r3, [r7, #7]
 8029fb6:	429a      	cmp	r2, r3
 8029fb8:	d09f      	beq.n	8029efa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8029fba:	2300      	movs	r3, #0
}
 8029fbc:	4618      	mov	r0, r3
 8029fbe:	3740      	adds	r7, #64	; 0x40
 8029fc0:	46bd      	mov	sp, r7
 8029fc2:	bd80      	pop	{r7, pc}

08029fc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029fc4:	b480      	push	{r7}
 8029fc6:	b085      	sub	sp, #20
 8029fc8:	af00      	add	r7, sp, #0
 8029fca:	60f8      	str	r0, [r7, #12]
 8029fcc:	60b9      	str	r1, [r7, #8]
 8029fce:	4613      	mov	r3, r2
 8029fd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029fd2:	68fb      	ldr	r3, [r7, #12]
 8029fd4:	68ba      	ldr	r2, [r7, #8]
 8029fd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029fd8:	68fb      	ldr	r3, [r7, #12]
 8029fda:	88fa      	ldrh	r2, [r7, #6]
 8029fdc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8029fde:	68fb      	ldr	r3, [r7, #12]
 8029fe0:	88fa      	ldrh	r2, [r7, #6]
 8029fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029fe4:	68fb      	ldr	r3, [r7, #12]
 8029fe6:	2200      	movs	r2, #0
 8029fe8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029fea:	68fb      	ldr	r3, [r7, #12]
 8029fec:	2222      	movs	r2, #34	; 0x22
 8029fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029ff2:	68fb      	ldr	r3, [r7, #12]
 8029ff4:	2200      	movs	r2, #0
 8029ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8029ffa:	68fb      	ldr	r3, [r7, #12]
 8029ffc:	691b      	ldr	r3, [r3, #16]
 8029ffe:	2b00      	cmp	r3, #0
 802a000:	d007      	beq.n	802a012 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 802a002:	68fb      	ldr	r3, [r7, #12]
 802a004:	681b      	ldr	r3, [r3, #0]
 802a006:	68da      	ldr	r2, [r3, #12]
 802a008:	68fb      	ldr	r3, [r7, #12]
 802a00a:	681b      	ldr	r3, [r3, #0]
 802a00c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a010:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802a012:	68fb      	ldr	r3, [r7, #12]
 802a014:	681b      	ldr	r3, [r3, #0]
 802a016:	695a      	ldr	r2, [r3, #20]
 802a018:	68fb      	ldr	r3, [r7, #12]
 802a01a:	681b      	ldr	r3, [r3, #0]
 802a01c:	f042 0201 	orr.w	r2, r2, #1
 802a020:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802a022:	68fb      	ldr	r3, [r7, #12]
 802a024:	681b      	ldr	r3, [r3, #0]
 802a026:	68da      	ldr	r2, [r3, #12]
 802a028:	68fb      	ldr	r3, [r7, #12]
 802a02a:	681b      	ldr	r3, [r3, #0]
 802a02c:	f042 0220 	orr.w	r2, r2, #32
 802a030:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802a032:	2300      	movs	r3, #0
}
 802a034:	4618      	mov	r0, r3
 802a036:	3714      	adds	r7, #20
 802a038:	46bd      	mov	sp, r7
 802a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a03e:	4770      	bx	lr

0802a040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802a040:	b480      	push	{r7}
 802a042:	b095      	sub	sp, #84	; 0x54
 802a044:	af00      	add	r7, sp, #0
 802a046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802a048:	687b      	ldr	r3, [r7, #4]
 802a04a:	681b      	ldr	r3, [r3, #0]
 802a04c:	330c      	adds	r3, #12
 802a04e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a052:	e853 3f00 	ldrex	r3, [r3]
 802a056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a05a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802a05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	330c      	adds	r3, #12
 802a066:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802a068:	643a      	str	r2, [r7, #64]	; 0x40
 802a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a06c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802a06e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802a070:	e841 2300 	strex	r3, r2, [r1]
 802a074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a078:	2b00      	cmp	r3, #0
 802a07a:	d1e5      	bne.n	802a048 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a07c:	687b      	ldr	r3, [r7, #4]
 802a07e:	681b      	ldr	r3, [r3, #0]
 802a080:	3314      	adds	r3, #20
 802a082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a084:	6a3b      	ldr	r3, [r7, #32]
 802a086:	e853 3f00 	ldrex	r3, [r3]
 802a08a:	61fb      	str	r3, [r7, #28]
   return(result);
 802a08c:	69fb      	ldr	r3, [r7, #28]
 802a08e:	f023 0301 	bic.w	r3, r3, #1
 802a092:	64bb      	str	r3, [r7, #72]	; 0x48
 802a094:	687b      	ldr	r3, [r7, #4]
 802a096:	681b      	ldr	r3, [r3, #0]
 802a098:	3314      	adds	r3, #20
 802a09a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802a09c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a09e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802a0a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a0a4:	e841 2300 	strex	r3, r2, [r1]
 802a0a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0ac:	2b00      	cmp	r3, #0
 802a0ae:	d1e5      	bne.n	802a07c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a0b0:	687b      	ldr	r3, [r7, #4]
 802a0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0b4:	2b01      	cmp	r3, #1
 802a0b6:	d119      	bne.n	802a0ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	681b      	ldr	r3, [r3, #0]
 802a0bc:	330c      	adds	r3, #12
 802a0be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a0c0:	68fb      	ldr	r3, [r7, #12]
 802a0c2:	e853 3f00 	ldrex	r3, [r3]
 802a0c6:	60bb      	str	r3, [r7, #8]
   return(result);
 802a0c8:	68bb      	ldr	r3, [r7, #8]
 802a0ca:	f023 0310 	bic.w	r3, r3, #16
 802a0ce:	647b      	str	r3, [r7, #68]	; 0x44
 802a0d0:	687b      	ldr	r3, [r7, #4]
 802a0d2:	681b      	ldr	r3, [r3, #0]
 802a0d4:	330c      	adds	r3, #12
 802a0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a0d8:	61ba      	str	r2, [r7, #24]
 802a0da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0dc:	6979      	ldr	r1, [r7, #20]
 802a0de:	69ba      	ldr	r2, [r7, #24]
 802a0e0:	e841 2300 	strex	r3, r2, [r1]
 802a0e4:	613b      	str	r3, [r7, #16]
   return(result);
 802a0e6:	693b      	ldr	r3, [r7, #16]
 802a0e8:	2b00      	cmp	r3, #0
 802a0ea:	d1e5      	bne.n	802a0b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	2220      	movs	r2, #32
 802a0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a0f4:	687b      	ldr	r3, [r7, #4]
 802a0f6:	2200      	movs	r2, #0
 802a0f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 802a0fa:	bf00      	nop
 802a0fc:	3754      	adds	r7, #84	; 0x54
 802a0fe:	46bd      	mov	sp, r7
 802a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a104:	4770      	bx	lr

0802a106 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802a106:	b580      	push	{r7, lr}
 802a108:	b084      	sub	sp, #16
 802a10a:	af00      	add	r7, sp, #0
 802a10c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802a10e:	687b      	ldr	r3, [r7, #4]
 802a110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802a114:	68fb      	ldr	r3, [r7, #12]
 802a116:	2200      	movs	r2, #0
 802a118:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802a11a:	68fb      	ldr	r3, [r7, #12]
 802a11c:	2200      	movs	r2, #0
 802a11e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802a120:	68f8      	ldr	r0, [r7, #12]
 802a122:	f7ff fecb 	bl	8029ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802a126:	bf00      	nop
 802a128:	3710      	adds	r7, #16
 802a12a:	46bd      	mov	sp, r7
 802a12c:	bd80      	pop	{r7, pc}

0802a12e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802a12e:	b480      	push	{r7}
 802a130:	b085      	sub	sp, #20
 802a132:	af00      	add	r7, sp, #0
 802a134:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802a136:	687b      	ldr	r3, [r7, #4]
 802a138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a13c:	b2db      	uxtb	r3, r3
 802a13e:	2b21      	cmp	r3, #33	; 0x21
 802a140:	d13e      	bne.n	802a1c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a142:	687b      	ldr	r3, [r7, #4]
 802a144:	689b      	ldr	r3, [r3, #8]
 802a146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a14a:	d114      	bne.n	802a176 <UART_Transmit_IT+0x48>
 802a14c:	687b      	ldr	r3, [r7, #4]
 802a14e:	691b      	ldr	r3, [r3, #16]
 802a150:	2b00      	cmp	r3, #0
 802a152:	d110      	bne.n	802a176 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	6a1b      	ldr	r3, [r3, #32]
 802a158:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802a15a:	68fb      	ldr	r3, [r7, #12]
 802a15c:	881b      	ldrh	r3, [r3, #0]
 802a15e:	461a      	mov	r2, r3
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	681b      	ldr	r3, [r3, #0]
 802a164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802a168:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802a16a:	687b      	ldr	r3, [r7, #4]
 802a16c:	6a1b      	ldr	r3, [r3, #32]
 802a16e:	1c9a      	adds	r2, r3, #2
 802a170:	687b      	ldr	r3, [r7, #4]
 802a172:	621a      	str	r2, [r3, #32]
 802a174:	e008      	b.n	802a188 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802a176:	687b      	ldr	r3, [r7, #4]
 802a178:	6a1b      	ldr	r3, [r3, #32]
 802a17a:	1c59      	adds	r1, r3, #1
 802a17c:	687a      	ldr	r2, [r7, #4]
 802a17e:	6211      	str	r1, [r2, #32]
 802a180:	781a      	ldrb	r2, [r3, #0]
 802a182:	687b      	ldr	r3, [r7, #4]
 802a184:	681b      	ldr	r3, [r3, #0]
 802a186:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802a188:	687b      	ldr	r3, [r7, #4]
 802a18a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802a18c:	b29b      	uxth	r3, r3
 802a18e:	3b01      	subs	r3, #1
 802a190:	b29b      	uxth	r3, r3
 802a192:	687a      	ldr	r2, [r7, #4]
 802a194:	4619      	mov	r1, r3
 802a196:	84d1      	strh	r1, [r2, #38]	; 0x26
 802a198:	2b00      	cmp	r3, #0
 802a19a:	d10f      	bne.n	802a1bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	681b      	ldr	r3, [r3, #0]
 802a1a0:	68da      	ldr	r2, [r3, #12]
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	681b      	ldr	r3, [r3, #0]
 802a1a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802a1aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802a1ac:	687b      	ldr	r3, [r7, #4]
 802a1ae:	681b      	ldr	r3, [r3, #0]
 802a1b0:	68da      	ldr	r2, [r3, #12]
 802a1b2:	687b      	ldr	r3, [r7, #4]
 802a1b4:	681b      	ldr	r3, [r3, #0]
 802a1b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802a1ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802a1bc:	2300      	movs	r3, #0
 802a1be:	e000      	b.n	802a1c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802a1c0:	2302      	movs	r3, #2
  }
}
 802a1c2:	4618      	mov	r0, r3
 802a1c4:	3714      	adds	r7, #20
 802a1c6:	46bd      	mov	sp, r7
 802a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1cc:	4770      	bx	lr

0802a1ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802a1ce:	b580      	push	{r7, lr}
 802a1d0:	b082      	sub	sp, #8
 802a1d2:	af00      	add	r7, sp, #0
 802a1d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802a1d6:	687b      	ldr	r3, [r7, #4]
 802a1d8:	681b      	ldr	r3, [r3, #0]
 802a1da:	68da      	ldr	r2, [r3, #12]
 802a1dc:	687b      	ldr	r3, [r7, #4]
 802a1de:	681b      	ldr	r3, [r3, #0]
 802a1e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802a1e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802a1e6:	687b      	ldr	r3, [r7, #4]
 802a1e8:	2220      	movs	r2, #32
 802a1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802a1ee:	6878      	ldr	r0, [r7, #4]
 802a1f0:	f7ff fe5a 	bl	8029ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802a1f4:	2300      	movs	r3, #0
}
 802a1f6:	4618      	mov	r0, r3
 802a1f8:	3708      	adds	r7, #8
 802a1fa:	46bd      	mov	sp, r7
 802a1fc:	bd80      	pop	{r7, pc}

0802a1fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802a1fe:	b580      	push	{r7, lr}
 802a200:	b08c      	sub	sp, #48	; 0x30
 802a202:	af00      	add	r7, sp, #0
 802a204:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802a20c:	b2db      	uxtb	r3, r3
 802a20e:	2b22      	cmp	r3, #34	; 0x22
 802a210:	f040 80ab 	bne.w	802a36a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a214:	687b      	ldr	r3, [r7, #4]
 802a216:	689b      	ldr	r3, [r3, #8]
 802a218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a21c:	d117      	bne.n	802a24e <UART_Receive_IT+0x50>
 802a21e:	687b      	ldr	r3, [r7, #4]
 802a220:	691b      	ldr	r3, [r3, #16]
 802a222:	2b00      	cmp	r3, #0
 802a224:	d113      	bne.n	802a24e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802a226:	2300      	movs	r3, #0
 802a228:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802a22a:	687b      	ldr	r3, [r7, #4]
 802a22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a22e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802a230:	687b      	ldr	r3, [r7, #4]
 802a232:	681b      	ldr	r3, [r3, #0]
 802a234:	685b      	ldr	r3, [r3, #4]
 802a236:	b29b      	uxth	r3, r3
 802a238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a23c:	b29a      	uxth	r2, r3
 802a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a240:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802a242:	687b      	ldr	r3, [r7, #4]
 802a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a246:	1c9a      	adds	r2, r3, #2
 802a248:	687b      	ldr	r3, [r7, #4]
 802a24a:	629a      	str	r2, [r3, #40]	; 0x28
 802a24c:	e026      	b.n	802a29c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802a24e:	687b      	ldr	r3, [r7, #4]
 802a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a252:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802a254:	2300      	movs	r3, #0
 802a256:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802a258:	687b      	ldr	r3, [r7, #4]
 802a25a:	689b      	ldr	r3, [r3, #8]
 802a25c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a260:	d007      	beq.n	802a272 <UART_Receive_IT+0x74>
 802a262:	687b      	ldr	r3, [r7, #4]
 802a264:	689b      	ldr	r3, [r3, #8]
 802a266:	2b00      	cmp	r3, #0
 802a268:	d10a      	bne.n	802a280 <UART_Receive_IT+0x82>
 802a26a:	687b      	ldr	r3, [r7, #4]
 802a26c:	691b      	ldr	r3, [r3, #16]
 802a26e:	2b00      	cmp	r3, #0
 802a270:	d106      	bne.n	802a280 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802a272:	687b      	ldr	r3, [r7, #4]
 802a274:	681b      	ldr	r3, [r3, #0]
 802a276:	685b      	ldr	r3, [r3, #4]
 802a278:	b2da      	uxtb	r2, r3
 802a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a27c:	701a      	strb	r2, [r3, #0]
 802a27e:	e008      	b.n	802a292 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802a280:	687b      	ldr	r3, [r7, #4]
 802a282:	681b      	ldr	r3, [r3, #0]
 802a284:	685b      	ldr	r3, [r3, #4]
 802a286:	b2db      	uxtb	r3, r3
 802a288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a28c:	b2da      	uxtb	r2, r3
 802a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a290:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802a292:	687b      	ldr	r3, [r7, #4]
 802a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a296:	1c5a      	adds	r2, r3, #1
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802a29c:	687b      	ldr	r3, [r7, #4]
 802a29e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802a2a0:	b29b      	uxth	r3, r3
 802a2a2:	3b01      	subs	r3, #1
 802a2a4:	b29b      	uxth	r3, r3
 802a2a6:	687a      	ldr	r2, [r7, #4]
 802a2a8:	4619      	mov	r1, r3
 802a2aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802a2ac:	2b00      	cmp	r3, #0
 802a2ae:	d15a      	bne.n	802a366 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	681b      	ldr	r3, [r3, #0]
 802a2b4:	68da      	ldr	r2, [r3, #12]
 802a2b6:	687b      	ldr	r3, [r7, #4]
 802a2b8:	681b      	ldr	r3, [r3, #0]
 802a2ba:	f022 0220 	bic.w	r2, r2, #32
 802a2be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802a2c0:	687b      	ldr	r3, [r7, #4]
 802a2c2:	681b      	ldr	r3, [r3, #0]
 802a2c4:	68da      	ldr	r2, [r3, #12]
 802a2c6:	687b      	ldr	r3, [r7, #4]
 802a2c8:	681b      	ldr	r3, [r3, #0]
 802a2ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a2ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802a2d0:	687b      	ldr	r3, [r7, #4]
 802a2d2:	681b      	ldr	r3, [r3, #0]
 802a2d4:	695a      	ldr	r2, [r3, #20]
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	681b      	ldr	r3, [r3, #0]
 802a2da:	f022 0201 	bic.w	r2, r2, #1
 802a2de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802a2e0:	687b      	ldr	r3, [r7, #4]
 802a2e2:	2220      	movs	r2, #32
 802a2e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a2e8:	687b      	ldr	r3, [r7, #4]
 802a2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a2ec:	2b01      	cmp	r3, #1
 802a2ee:	d135      	bne.n	802a35c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a2f0:	687b      	ldr	r3, [r7, #4]
 802a2f2:	2200      	movs	r2, #0
 802a2f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a2f6:	687b      	ldr	r3, [r7, #4]
 802a2f8:	681b      	ldr	r3, [r3, #0]
 802a2fa:	330c      	adds	r3, #12
 802a2fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a2fe:	697b      	ldr	r3, [r7, #20]
 802a300:	e853 3f00 	ldrex	r3, [r3]
 802a304:	613b      	str	r3, [r7, #16]
   return(result);
 802a306:	693b      	ldr	r3, [r7, #16]
 802a308:	f023 0310 	bic.w	r3, r3, #16
 802a30c:	627b      	str	r3, [r7, #36]	; 0x24
 802a30e:	687b      	ldr	r3, [r7, #4]
 802a310:	681b      	ldr	r3, [r3, #0]
 802a312:	330c      	adds	r3, #12
 802a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a316:	623a      	str	r2, [r7, #32]
 802a318:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a31a:	69f9      	ldr	r1, [r7, #28]
 802a31c:	6a3a      	ldr	r2, [r7, #32]
 802a31e:	e841 2300 	strex	r3, r2, [r1]
 802a322:	61bb      	str	r3, [r7, #24]
   return(result);
 802a324:	69bb      	ldr	r3, [r7, #24]
 802a326:	2b00      	cmp	r3, #0
 802a328:	d1e5      	bne.n	802a2f6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802a32a:	687b      	ldr	r3, [r7, #4]
 802a32c:	681b      	ldr	r3, [r3, #0]
 802a32e:	681b      	ldr	r3, [r3, #0]
 802a330:	f003 0310 	and.w	r3, r3, #16
 802a334:	2b10      	cmp	r3, #16
 802a336:	d10a      	bne.n	802a34e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802a338:	2300      	movs	r3, #0
 802a33a:	60fb      	str	r3, [r7, #12]
 802a33c:	687b      	ldr	r3, [r7, #4]
 802a33e:	681b      	ldr	r3, [r3, #0]
 802a340:	681b      	ldr	r3, [r3, #0]
 802a342:	60fb      	str	r3, [r7, #12]
 802a344:	687b      	ldr	r3, [r7, #4]
 802a346:	681b      	ldr	r3, [r3, #0]
 802a348:	685b      	ldr	r3, [r3, #4]
 802a34a:	60fb      	str	r3, [r7, #12]
 802a34c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802a352:	4619      	mov	r1, r3
 802a354:	6878      	ldr	r0, [r7, #4]
 802a356:	f7ff fdbb 	bl	8029ed0 <HAL_UARTEx_RxEventCallback>
 802a35a:	e002      	b.n	802a362 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802a35c:	6878      	ldr	r0, [r7, #4]
 802a35e:	f7f6 fe47 	bl	8020ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802a362:	2300      	movs	r3, #0
 802a364:	e002      	b.n	802a36c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802a366:	2300      	movs	r3, #0
 802a368:	e000      	b.n	802a36c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802a36a:	2302      	movs	r3, #2
  }
}
 802a36c:	4618      	mov	r0, r3
 802a36e:	3730      	adds	r7, #48	; 0x30
 802a370:	46bd      	mov	sp, r7
 802a372:	bd80      	pop	{r7, pc}

0802a374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802a374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a378:	b0c0      	sub	sp, #256	; 0x100
 802a37a:	af00      	add	r7, sp, #0
 802a37c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a384:	681b      	ldr	r3, [r3, #0]
 802a386:	691b      	ldr	r3, [r3, #16]
 802a388:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802a38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a390:	68d9      	ldr	r1, [r3, #12]
 802a392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a396:	681a      	ldr	r2, [r3, #0]
 802a398:	ea40 0301 	orr.w	r3, r0, r1
 802a39c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802a39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3a2:	689a      	ldr	r2, [r3, #8]
 802a3a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3a8:	691b      	ldr	r3, [r3, #16]
 802a3aa:	431a      	orrs	r2, r3
 802a3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3b0:	695b      	ldr	r3, [r3, #20]
 802a3b2:	431a      	orrs	r2, r3
 802a3b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3b8:	69db      	ldr	r3, [r3, #28]
 802a3ba:	4313      	orrs	r3, r2
 802a3bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802a3c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3c4:	681b      	ldr	r3, [r3, #0]
 802a3c6:	68db      	ldr	r3, [r3, #12]
 802a3c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802a3cc:	f021 010c 	bic.w	r1, r1, #12
 802a3d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3d4:	681a      	ldr	r2, [r3, #0]
 802a3d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802a3da:	430b      	orrs	r3, r1
 802a3dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802a3de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3e2:	681b      	ldr	r3, [r3, #0]
 802a3e4:	695b      	ldr	r3, [r3, #20]
 802a3e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802a3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ee:	6999      	ldr	r1, [r3, #24]
 802a3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3f4:	681a      	ldr	r2, [r3, #0]
 802a3f6:	ea40 0301 	orr.w	r3, r0, r1
 802a3fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802a3fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a400:	681a      	ldr	r2, [r3, #0]
 802a402:	4b8f      	ldr	r3, [pc, #572]	; (802a640 <UART_SetConfig+0x2cc>)
 802a404:	429a      	cmp	r2, r3
 802a406:	d005      	beq.n	802a414 <UART_SetConfig+0xa0>
 802a408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a40c:	681a      	ldr	r2, [r3, #0]
 802a40e:	4b8d      	ldr	r3, [pc, #564]	; (802a644 <UART_SetConfig+0x2d0>)
 802a410:	429a      	cmp	r2, r3
 802a412:	d104      	bne.n	802a41e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802a414:	f7fd fcb2 	bl	8027d7c <HAL_RCC_GetPCLK2Freq>
 802a418:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802a41c:	e003      	b.n	802a426 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802a41e:	f7fd fc99 	bl	8027d54 <HAL_RCC_GetPCLK1Freq>
 802a422:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a42a:	69db      	ldr	r3, [r3, #28]
 802a42c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a430:	f040 810c 	bne.w	802a64c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802a434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a438:	2200      	movs	r2, #0
 802a43a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802a43e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802a442:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802a446:	4622      	mov	r2, r4
 802a448:	462b      	mov	r3, r5
 802a44a:	1891      	adds	r1, r2, r2
 802a44c:	65b9      	str	r1, [r7, #88]	; 0x58
 802a44e:	415b      	adcs	r3, r3
 802a450:	65fb      	str	r3, [r7, #92]	; 0x5c
 802a452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802a456:	4621      	mov	r1, r4
 802a458:	eb12 0801 	adds.w	r8, r2, r1
 802a45c:	4629      	mov	r1, r5
 802a45e:	eb43 0901 	adc.w	r9, r3, r1
 802a462:	f04f 0200 	mov.w	r2, #0
 802a466:	f04f 0300 	mov.w	r3, #0
 802a46a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802a46e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802a472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802a476:	4690      	mov	r8, r2
 802a478:	4699      	mov	r9, r3
 802a47a:	4623      	mov	r3, r4
 802a47c:	eb18 0303 	adds.w	r3, r8, r3
 802a480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802a484:	462b      	mov	r3, r5
 802a486:	eb49 0303 	adc.w	r3, r9, r3
 802a48a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802a48e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a492:	685b      	ldr	r3, [r3, #4]
 802a494:	2200      	movs	r2, #0
 802a496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802a49a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802a49e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802a4a2:	460b      	mov	r3, r1
 802a4a4:	18db      	adds	r3, r3, r3
 802a4a6:	653b      	str	r3, [r7, #80]	; 0x50
 802a4a8:	4613      	mov	r3, r2
 802a4aa:	eb42 0303 	adc.w	r3, r2, r3
 802a4ae:	657b      	str	r3, [r7, #84]	; 0x54
 802a4b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802a4b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802a4b8:	f7f5 feea 	bl	8020290 <__aeabi_uldivmod>
 802a4bc:	4602      	mov	r2, r0
 802a4be:	460b      	mov	r3, r1
 802a4c0:	4b61      	ldr	r3, [pc, #388]	; (802a648 <UART_SetConfig+0x2d4>)
 802a4c2:	fba3 2302 	umull	r2, r3, r3, r2
 802a4c6:	095b      	lsrs	r3, r3, #5
 802a4c8:	011c      	lsls	r4, r3, #4
 802a4ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a4ce:	2200      	movs	r2, #0
 802a4d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802a4d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802a4d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802a4dc:	4642      	mov	r2, r8
 802a4de:	464b      	mov	r3, r9
 802a4e0:	1891      	adds	r1, r2, r2
 802a4e2:	64b9      	str	r1, [r7, #72]	; 0x48
 802a4e4:	415b      	adcs	r3, r3
 802a4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a4e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802a4ec:	4641      	mov	r1, r8
 802a4ee:	eb12 0a01 	adds.w	sl, r2, r1
 802a4f2:	4649      	mov	r1, r9
 802a4f4:	eb43 0b01 	adc.w	fp, r3, r1
 802a4f8:	f04f 0200 	mov.w	r2, #0
 802a4fc:	f04f 0300 	mov.w	r3, #0
 802a500:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802a504:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802a508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802a50c:	4692      	mov	sl, r2
 802a50e:	469b      	mov	fp, r3
 802a510:	4643      	mov	r3, r8
 802a512:	eb1a 0303 	adds.w	r3, sl, r3
 802a516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802a51a:	464b      	mov	r3, r9
 802a51c:	eb4b 0303 	adc.w	r3, fp, r3
 802a520:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802a524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a528:	685b      	ldr	r3, [r3, #4]
 802a52a:	2200      	movs	r2, #0
 802a52c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802a530:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802a534:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802a538:	460b      	mov	r3, r1
 802a53a:	18db      	adds	r3, r3, r3
 802a53c:	643b      	str	r3, [r7, #64]	; 0x40
 802a53e:	4613      	mov	r3, r2
 802a540:	eb42 0303 	adc.w	r3, r2, r3
 802a544:	647b      	str	r3, [r7, #68]	; 0x44
 802a546:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802a54a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802a54e:	f7f5 fe9f 	bl	8020290 <__aeabi_uldivmod>
 802a552:	4602      	mov	r2, r0
 802a554:	460b      	mov	r3, r1
 802a556:	4611      	mov	r1, r2
 802a558:	4b3b      	ldr	r3, [pc, #236]	; (802a648 <UART_SetConfig+0x2d4>)
 802a55a:	fba3 2301 	umull	r2, r3, r3, r1
 802a55e:	095b      	lsrs	r3, r3, #5
 802a560:	2264      	movs	r2, #100	; 0x64
 802a562:	fb02 f303 	mul.w	r3, r2, r3
 802a566:	1acb      	subs	r3, r1, r3
 802a568:	00db      	lsls	r3, r3, #3
 802a56a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802a56e:	4b36      	ldr	r3, [pc, #216]	; (802a648 <UART_SetConfig+0x2d4>)
 802a570:	fba3 2302 	umull	r2, r3, r3, r2
 802a574:	095b      	lsrs	r3, r3, #5
 802a576:	005b      	lsls	r3, r3, #1
 802a578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802a57c:	441c      	add	r4, r3
 802a57e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a582:	2200      	movs	r2, #0
 802a584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802a588:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802a58c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802a590:	4642      	mov	r2, r8
 802a592:	464b      	mov	r3, r9
 802a594:	1891      	adds	r1, r2, r2
 802a596:	63b9      	str	r1, [r7, #56]	; 0x38
 802a598:	415b      	adcs	r3, r3
 802a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a59c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802a5a0:	4641      	mov	r1, r8
 802a5a2:	1851      	adds	r1, r2, r1
 802a5a4:	6339      	str	r1, [r7, #48]	; 0x30
 802a5a6:	4649      	mov	r1, r9
 802a5a8:	414b      	adcs	r3, r1
 802a5aa:	637b      	str	r3, [r7, #52]	; 0x34
 802a5ac:	f04f 0200 	mov.w	r2, #0
 802a5b0:	f04f 0300 	mov.w	r3, #0
 802a5b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802a5b8:	4659      	mov	r1, fp
 802a5ba:	00cb      	lsls	r3, r1, #3
 802a5bc:	4651      	mov	r1, sl
 802a5be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a5c2:	4651      	mov	r1, sl
 802a5c4:	00ca      	lsls	r2, r1, #3
 802a5c6:	4610      	mov	r0, r2
 802a5c8:	4619      	mov	r1, r3
 802a5ca:	4603      	mov	r3, r0
 802a5cc:	4642      	mov	r2, r8
 802a5ce:	189b      	adds	r3, r3, r2
 802a5d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802a5d4:	464b      	mov	r3, r9
 802a5d6:	460a      	mov	r2, r1
 802a5d8:	eb42 0303 	adc.w	r3, r2, r3
 802a5dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802a5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a5e4:	685b      	ldr	r3, [r3, #4]
 802a5e6:	2200      	movs	r2, #0
 802a5e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802a5ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802a5f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802a5f4:	460b      	mov	r3, r1
 802a5f6:	18db      	adds	r3, r3, r3
 802a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
 802a5fa:	4613      	mov	r3, r2
 802a5fc:	eb42 0303 	adc.w	r3, r2, r3
 802a600:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802a606:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802a60a:	f7f5 fe41 	bl	8020290 <__aeabi_uldivmod>
 802a60e:	4602      	mov	r2, r0
 802a610:	460b      	mov	r3, r1
 802a612:	4b0d      	ldr	r3, [pc, #52]	; (802a648 <UART_SetConfig+0x2d4>)
 802a614:	fba3 1302 	umull	r1, r3, r3, r2
 802a618:	095b      	lsrs	r3, r3, #5
 802a61a:	2164      	movs	r1, #100	; 0x64
 802a61c:	fb01 f303 	mul.w	r3, r1, r3
 802a620:	1ad3      	subs	r3, r2, r3
 802a622:	00db      	lsls	r3, r3, #3
 802a624:	3332      	adds	r3, #50	; 0x32
 802a626:	4a08      	ldr	r2, [pc, #32]	; (802a648 <UART_SetConfig+0x2d4>)
 802a628:	fba2 2303 	umull	r2, r3, r2, r3
 802a62c:	095b      	lsrs	r3, r3, #5
 802a62e:	f003 0207 	and.w	r2, r3, #7
 802a632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a636:	681b      	ldr	r3, [r3, #0]
 802a638:	4422      	add	r2, r4
 802a63a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802a63c:	e105      	b.n	802a84a <UART_SetConfig+0x4d6>
 802a63e:	bf00      	nop
 802a640:	40011000 	.word	0x40011000
 802a644:	40011400 	.word	0x40011400
 802a648:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802a64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a650:	2200      	movs	r2, #0
 802a652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a656:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802a65a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802a65e:	4642      	mov	r2, r8
 802a660:	464b      	mov	r3, r9
 802a662:	1891      	adds	r1, r2, r2
 802a664:	6239      	str	r1, [r7, #32]
 802a666:	415b      	adcs	r3, r3
 802a668:	627b      	str	r3, [r7, #36]	; 0x24
 802a66a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a66e:	4641      	mov	r1, r8
 802a670:	1854      	adds	r4, r2, r1
 802a672:	4649      	mov	r1, r9
 802a674:	eb43 0501 	adc.w	r5, r3, r1
 802a678:	f04f 0200 	mov.w	r2, #0
 802a67c:	f04f 0300 	mov.w	r3, #0
 802a680:	00eb      	lsls	r3, r5, #3
 802a682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a686:	00e2      	lsls	r2, r4, #3
 802a688:	4614      	mov	r4, r2
 802a68a:	461d      	mov	r5, r3
 802a68c:	4643      	mov	r3, r8
 802a68e:	18e3      	adds	r3, r4, r3
 802a690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a694:	464b      	mov	r3, r9
 802a696:	eb45 0303 	adc.w	r3, r5, r3
 802a69a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a69e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a6a2:	685b      	ldr	r3, [r3, #4]
 802a6a4:	2200      	movs	r2, #0
 802a6a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802a6aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802a6ae:	f04f 0200 	mov.w	r2, #0
 802a6b2:	f04f 0300 	mov.w	r3, #0
 802a6b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802a6ba:	4629      	mov	r1, r5
 802a6bc:	008b      	lsls	r3, r1, #2
 802a6be:	4621      	mov	r1, r4
 802a6c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a6c4:	4621      	mov	r1, r4
 802a6c6:	008a      	lsls	r2, r1, #2
 802a6c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802a6cc:	f7f5 fde0 	bl	8020290 <__aeabi_uldivmod>
 802a6d0:	4602      	mov	r2, r0
 802a6d2:	460b      	mov	r3, r1
 802a6d4:	4b60      	ldr	r3, [pc, #384]	; (802a858 <UART_SetConfig+0x4e4>)
 802a6d6:	fba3 2302 	umull	r2, r3, r3, r2
 802a6da:	095b      	lsrs	r3, r3, #5
 802a6dc:	011c      	lsls	r4, r3, #4
 802a6de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a6e2:	2200      	movs	r2, #0
 802a6e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a6e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802a6ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802a6f0:	4642      	mov	r2, r8
 802a6f2:	464b      	mov	r3, r9
 802a6f4:	1891      	adds	r1, r2, r2
 802a6f6:	61b9      	str	r1, [r7, #24]
 802a6f8:	415b      	adcs	r3, r3
 802a6fa:	61fb      	str	r3, [r7, #28]
 802a6fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a700:	4641      	mov	r1, r8
 802a702:	1851      	adds	r1, r2, r1
 802a704:	6139      	str	r1, [r7, #16]
 802a706:	4649      	mov	r1, r9
 802a708:	414b      	adcs	r3, r1
 802a70a:	617b      	str	r3, [r7, #20]
 802a70c:	f04f 0200 	mov.w	r2, #0
 802a710:	f04f 0300 	mov.w	r3, #0
 802a714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802a718:	4659      	mov	r1, fp
 802a71a:	00cb      	lsls	r3, r1, #3
 802a71c:	4651      	mov	r1, sl
 802a71e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a722:	4651      	mov	r1, sl
 802a724:	00ca      	lsls	r2, r1, #3
 802a726:	4610      	mov	r0, r2
 802a728:	4619      	mov	r1, r3
 802a72a:	4603      	mov	r3, r0
 802a72c:	4642      	mov	r2, r8
 802a72e:	189b      	adds	r3, r3, r2
 802a730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a734:	464b      	mov	r3, r9
 802a736:	460a      	mov	r2, r1
 802a738:	eb42 0303 	adc.w	r3, r2, r3
 802a73c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a744:	685b      	ldr	r3, [r3, #4]
 802a746:	2200      	movs	r2, #0
 802a748:	67bb      	str	r3, [r7, #120]	; 0x78
 802a74a:	67fa      	str	r2, [r7, #124]	; 0x7c
 802a74c:	f04f 0200 	mov.w	r2, #0
 802a750:	f04f 0300 	mov.w	r3, #0
 802a754:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802a758:	4649      	mov	r1, r9
 802a75a:	008b      	lsls	r3, r1, #2
 802a75c:	4641      	mov	r1, r8
 802a75e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a762:	4641      	mov	r1, r8
 802a764:	008a      	lsls	r2, r1, #2
 802a766:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802a76a:	f7f5 fd91 	bl	8020290 <__aeabi_uldivmod>
 802a76e:	4602      	mov	r2, r0
 802a770:	460b      	mov	r3, r1
 802a772:	4b39      	ldr	r3, [pc, #228]	; (802a858 <UART_SetConfig+0x4e4>)
 802a774:	fba3 1302 	umull	r1, r3, r3, r2
 802a778:	095b      	lsrs	r3, r3, #5
 802a77a:	2164      	movs	r1, #100	; 0x64
 802a77c:	fb01 f303 	mul.w	r3, r1, r3
 802a780:	1ad3      	subs	r3, r2, r3
 802a782:	011b      	lsls	r3, r3, #4
 802a784:	3332      	adds	r3, #50	; 0x32
 802a786:	4a34      	ldr	r2, [pc, #208]	; (802a858 <UART_SetConfig+0x4e4>)
 802a788:	fba2 2303 	umull	r2, r3, r2, r3
 802a78c:	095b      	lsrs	r3, r3, #5
 802a78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a792:	441c      	add	r4, r3
 802a794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a798:	2200      	movs	r2, #0
 802a79a:	673b      	str	r3, [r7, #112]	; 0x70
 802a79c:	677a      	str	r2, [r7, #116]	; 0x74
 802a79e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802a7a2:	4642      	mov	r2, r8
 802a7a4:	464b      	mov	r3, r9
 802a7a6:	1891      	adds	r1, r2, r2
 802a7a8:	60b9      	str	r1, [r7, #8]
 802a7aa:	415b      	adcs	r3, r3
 802a7ac:	60fb      	str	r3, [r7, #12]
 802a7ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a7b2:	4641      	mov	r1, r8
 802a7b4:	1851      	adds	r1, r2, r1
 802a7b6:	6039      	str	r1, [r7, #0]
 802a7b8:	4649      	mov	r1, r9
 802a7ba:	414b      	adcs	r3, r1
 802a7bc:	607b      	str	r3, [r7, #4]
 802a7be:	f04f 0200 	mov.w	r2, #0
 802a7c2:	f04f 0300 	mov.w	r3, #0
 802a7c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802a7ca:	4659      	mov	r1, fp
 802a7cc:	00cb      	lsls	r3, r1, #3
 802a7ce:	4651      	mov	r1, sl
 802a7d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a7d4:	4651      	mov	r1, sl
 802a7d6:	00ca      	lsls	r2, r1, #3
 802a7d8:	4610      	mov	r0, r2
 802a7da:	4619      	mov	r1, r3
 802a7dc:	4603      	mov	r3, r0
 802a7de:	4642      	mov	r2, r8
 802a7e0:	189b      	adds	r3, r3, r2
 802a7e2:	66bb      	str	r3, [r7, #104]	; 0x68
 802a7e4:	464b      	mov	r3, r9
 802a7e6:	460a      	mov	r2, r1
 802a7e8:	eb42 0303 	adc.w	r3, r2, r3
 802a7ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a7ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a7f2:	685b      	ldr	r3, [r3, #4]
 802a7f4:	2200      	movs	r2, #0
 802a7f6:	663b      	str	r3, [r7, #96]	; 0x60
 802a7f8:	667a      	str	r2, [r7, #100]	; 0x64
 802a7fa:	f04f 0200 	mov.w	r2, #0
 802a7fe:	f04f 0300 	mov.w	r3, #0
 802a802:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802a806:	4649      	mov	r1, r9
 802a808:	008b      	lsls	r3, r1, #2
 802a80a:	4641      	mov	r1, r8
 802a80c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a810:	4641      	mov	r1, r8
 802a812:	008a      	lsls	r2, r1, #2
 802a814:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802a818:	f7f5 fd3a 	bl	8020290 <__aeabi_uldivmod>
 802a81c:	4602      	mov	r2, r0
 802a81e:	460b      	mov	r3, r1
 802a820:	4b0d      	ldr	r3, [pc, #52]	; (802a858 <UART_SetConfig+0x4e4>)
 802a822:	fba3 1302 	umull	r1, r3, r3, r2
 802a826:	095b      	lsrs	r3, r3, #5
 802a828:	2164      	movs	r1, #100	; 0x64
 802a82a:	fb01 f303 	mul.w	r3, r1, r3
 802a82e:	1ad3      	subs	r3, r2, r3
 802a830:	011b      	lsls	r3, r3, #4
 802a832:	3332      	adds	r3, #50	; 0x32
 802a834:	4a08      	ldr	r2, [pc, #32]	; (802a858 <UART_SetConfig+0x4e4>)
 802a836:	fba2 2303 	umull	r2, r3, r2, r3
 802a83a:	095b      	lsrs	r3, r3, #5
 802a83c:	f003 020f 	and.w	r2, r3, #15
 802a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a844:	681b      	ldr	r3, [r3, #0]
 802a846:	4422      	add	r2, r4
 802a848:	609a      	str	r2, [r3, #8]
}
 802a84a:	bf00      	nop
 802a84c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802a850:	46bd      	mov	sp, r7
 802a852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a856:	bf00      	nop
 802a858:	51eb851f 	.word	0x51eb851f

0802a85c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 802a85c:	b480      	push	{r7}
 802a85e:	b083      	sub	sp, #12
 802a860:	af00      	add	r7, sp, #0
 802a862:	6078      	str	r0, [r7, #4]
 802a864:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 802a866:	683b      	ldr	r3, [r7, #0]
 802a868:	681b      	ldr	r3, [r3, #0]
 802a86a:	2b00      	cmp	r3, #0
 802a86c:	d123      	bne.n	802a8b6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a86e:	687b      	ldr	r3, [r7, #4]
 802a870:	681b      	ldr	r3, [r3, #0]
 802a872:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a87a:	683a      	ldr	r2, [r7, #0]
 802a87c:	6851      	ldr	r1, [r2, #4]
 802a87e:	683a      	ldr	r2, [r7, #0]
 802a880:	6892      	ldr	r2, [r2, #8]
 802a882:	4311      	orrs	r1, r2
 802a884:	683a      	ldr	r2, [r7, #0]
 802a886:	68d2      	ldr	r2, [r2, #12]
 802a888:	4311      	orrs	r1, r2
 802a88a:	683a      	ldr	r2, [r7, #0]
 802a88c:	6912      	ldr	r2, [r2, #16]
 802a88e:	4311      	orrs	r1, r2
 802a890:	683a      	ldr	r2, [r7, #0]
 802a892:	6952      	ldr	r2, [r2, #20]
 802a894:	4311      	orrs	r1, r2
 802a896:	683a      	ldr	r2, [r7, #0]
 802a898:	6992      	ldr	r2, [r2, #24]
 802a89a:	4311      	orrs	r1, r2
 802a89c:	683a      	ldr	r2, [r7, #0]
 802a89e:	69d2      	ldr	r2, [r2, #28]
 802a8a0:	4311      	orrs	r1, r2
 802a8a2:	683a      	ldr	r2, [r7, #0]
 802a8a4:	6a12      	ldr	r2, [r2, #32]
 802a8a6:	4311      	orrs	r1, r2
 802a8a8:	683a      	ldr	r2, [r7, #0]
 802a8aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a8ac:	430a      	orrs	r2, r1
 802a8ae:	431a      	orrs	r2, r3
 802a8b0:	687b      	ldr	r3, [r7, #4]
 802a8b2:	601a      	str	r2, [r3, #0]
 802a8b4:	e028      	b.n	802a908 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a8b6:	687b      	ldr	r3, [r7, #4]
 802a8b8:	681b      	ldr	r3, [r3, #0]
 802a8ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 802a8be:	683b      	ldr	r3, [r7, #0]
 802a8c0:	69d9      	ldr	r1, [r3, #28]
 802a8c2:	683b      	ldr	r3, [r7, #0]
 802a8c4:	6a1b      	ldr	r3, [r3, #32]
 802a8c6:	4319      	orrs	r1, r3
 802a8c8:	683b      	ldr	r3, [r7, #0]
 802a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8cc:	430b      	orrs	r3, r1
 802a8ce:	431a      	orrs	r2, r3
 802a8d0:	687b      	ldr	r3, [r7, #4]
 802a8d2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802a8d4:	687b      	ldr	r3, [r7, #4]
 802a8d6:	685b      	ldr	r3, [r3, #4]
 802a8d8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a8dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a8e0:	683a      	ldr	r2, [r7, #0]
 802a8e2:	6851      	ldr	r1, [r2, #4]
 802a8e4:	683a      	ldr	r2, [r7, #0]
 802a8e6:	6892      	ldr	r2, [r2, #8]
 802a8e8:	4311      	orrs	r1, r2
 802a8ea:	683a      	ldr	r2, [r7, #0]
 802a8ec:	68d2      	ldr	r2, [r2, #12]
 802a8ee:	4311      	orrs	r1, r2
 802a8f0:	683a      	ldr	r2, [r7, #0]
 802a8f2:	6912      	ldr	r2, [r2, #16]
 802a8f4:	4311      	orrs	r1, r2
 802a8f6:	683a      	ldr	r2, [r7, #0]
 802a8f8:	6952      	ldr	r2, [r2, #20]
 802a8fa:	4311      	orrs	r1, r2
 802a8fc:	683a      	ldr	r2, [r7, #0]
 802a8fe:	6992      	ldr	r2, [r2, #24]
 802a900:	430a      	orrs	r2, r1
 802a902:	431a      	orrs	r2, r3
 802a904:	687b      	ldr	r3, [r7, #4]
 802a906:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 802a908:	2300      	movs	r3, #0
}
 802a90a:	4618      	mov	r0, r3
 802a90c:	370c      	adds	r7, #12
 802a90e:	46bd      	mov	sp, r7
 802a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a914:	4770      	bx	lr

0802a916 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802a916:	b480      	push	{r7}
 802a918:	b085      	sub	sp, #20
 802a91a:	af00      	add	r7, sp, #0
 802a91c:	60f8      	str	r0, [r7, #12]
 802a91e:	60b9      	str	r1, [r7, #8]
 802a920:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 802a922:	687b      	ldr	r3, [r7, #4]
 802a924:	2b00      	cmp	r3, #0
 802a926:	d128      	bne.n	802a97a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a928:	68fb      	ldr	r3, [r7, #12]
 802a92a:	689b      	ldr	r3, [r3, #8]
 802a92c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a930:	68bb      	ldr	r3, [r7, #8]
 802a932:	681b      	ldr	r3, [r3, #0]
 802a934:	1e59      	subs	r1, r3, #1
 802a936:	68bb      	ldr	r3, [r7, #8]
 802a938:	685b      	ldr	r3, [r3, #4]
 802a93a:	3b01      	subs	r3, #1
 802a93c:	011b      	lsls	r3, r3, #4
 802a93e:	4319      	orrs	r1, r3
 802a940:	68bb      	ldr	r3, [r7, #8]
 802a942:	689b      	ldr	r3, [r3, #8]
 802a944:	3b01      	subs	r3, #1
 802a946:	021b      	lsls	r3, r3, #8
 802a948:	4319      	orrs	r1, r3
 802a94a:	68bb      	ldr	r3, [r7, #8]
 802a94c:	68db      	ldr	r3, [r3, #12]
 802a94e:	3b01      	subs	r3, #1
 802a950:	031b      	lsls	r3, r3, #12
 802a952:	4319      	orrs	r1, r3
 802a954:	68bb      	ldr	r3, [r7, #8]
 802a956:	691b      	ldr	r3, [r3, #16]
 802a958:	3b01      	subs	r3, #1
 802a95a:	041b      	lsls	r3, r3, #16
 802a95c:	4319      	orrs	r1, r3
 802a95e:	68bb      	ldr	r3, [r7, #8]
 802a960:	695b      	ldr	r3, [r3, #20]
 802a962:	3b01      	subs	r3, #1
 802a964:	051b      	lsls	r3, r3, #20
 802a966:	4319      	orrs	r1, r3
 802a968:	68bb      	ldr	r3, [r7, #8]
 802a96a:	699b      	ldr	r3, [r3, #24]
 802a96c:	3b01      	subs	r3, #1
 802a96e:	061b      	lsls	r3, r3, #24
 802a970:	430b      	orrs	r3, r1
 802a972:	431a      	orrs	r2, r3
 802a974:	68fb      	ldr	r3, [r7, #12]
 802a976:	609a      	str	r2, [r3, #8]
 802a978:	e02f      	b.n	802a9da <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a97a:	68fb      	ldr	r3, [r7, #12]
 802a97c:	689b      	ldr	r3, [r3, #8]
 802a97e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802a982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a986:	68ba      	ldr	r2, [r7, #8]
 802a988:	68d2      	ldr	r2, [r2, #12]
 802a98a:	3a01      	subs	r2, #1
 802a98c:	0311      	lsls	r1, r2, #12
 802a98e:	68ba      	ldr	r2, [r7, #8]
 802a990:	6952      	ldr	r2, [r2, #20]
 802a992:	3a01      	subs	r2, #1
 802a994:	0512      	lsls	r2, r2, #20
 802a996:	430a      	orrs	r2, r1
 802a998:	431a      	orrs	r2, r3
 802a99a:	68fb      	ldr	r3, [r7, #12]
 802a99c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a99e:	68fb      	ldr	r3, [r7, #12]
 802a9a0:	68db      	ldr	r3, [r3, #12]
 802a9a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a9a6:	68bb      	ldr	r3, [r7, #8]
 802a9a8:	681b      	ldr	r3, [r3, #0]
 802a9aa:	1e59      	subs	r1, r3, #1
 802a9ac:	68bb      	ldr	r3, [r7, #8]
 802a9ae:	685b      	ldr	r3, [r3, #4]
 802a9b0:	3b01      	subs	r3, #1
 802a9b2:	011b      	lsls	r3, r3, #4
 802a9b4:	4319      	orrs	r1, r3
 802a9b6:	68bb      	ldr	r3, [r7, #8]
 802a9b8:	689b      	ldr	r3, [r3, #8]
 802a9ba:	3b01      	subs	r3, #1
 802a9bc:	021b      	lsls	r3, r3, #8
 802a9be:	4319      	orrs	r1, r3
 802a9c0:	68bb      	ldr	r3, [r7, #8]
 802a9c2:	691b      	ldr	r3, [r3, #16]
 802a9c4:	3b01      	subs	r3, #1
 802a9c6:	041b      	lsls	r3, r3, #16
 802a9c8:	4319      	orrs	r1, r3
 802a9ca:	68bb      	ldr	r3, [r7, #8]
 802a9cc:	699b      	ldr	r3, [r3, #24]
 802a9ce:	3b01      	subs	r3, #1
 802a9d0:	061b      	lsls	r3, r3, #24
 802a9d2:	430b      	orrs	r3, r1
 802a9d4:	431a      	orrs	r2, r3
 802a9d6:	68fb      	ldr	r3, [r7, #12]
 802a9d8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a9da:	2300      	movs	r3, #0
}
 802a9dc:	4618      	mov	r0, r3
 802a9de:	3714      	adds	r7, #20
 802a9e0:	46bd      	mov	sp, r7
 802a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9e6:	4770      	bx	lr

0802a9e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802a9e8:	b580      	push	{r7, lr}
 802a9ea:	b086      	sub	sp, #24
 802a9ec:	af00      	add	r7, sp, #0
 802a9ee:	60f8      	str	r0, [r7, #12]
 802a9f0:	60b9      	str	r1, [r7, #8]
 802a9f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802a9f4:	2300      	movs	r3, #0
 802a9f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802a9f8:	68fb      	ldr	r3, [r7, #12]
 802a9fa:	691b      	ldr	r3, [r3, #16]
 802a9fc:	0d9b      	lsrs	r3, r3, #22
 802a9fe:	059b      	lsls	r3, r3, #22
 802aa00:	68ba      	ldr	r2, [r7, #8]
 802aa02:	6811      	ldr	r1, [r2, #0]
 802aa04:	68ba      	ldr	r2, [r7, #8]
 802aa06:	6852      	ldr	r2, [r2, #4]
 802aa08:	4311      	orrs	r1, r2
 802aa0a:	68ba      	ldr	r2, [r7, #8]
 802aa0c:	6892      	ldr	r2, [r2, #8]
 802aa0e:	3a01      	subs	r2, #1
 802aa10:	0152      	lsls	r2, r2, #5
 802aa12:	4311      	orrs	r1, r2
 802aa14:	68ba      	ldr	r2, [r7, #8]
 802aa16:	68d2      	ldr	r2, [r2, #12]
 802aa18:	0252      	lsls	r2, r2, #9
 802aa1a:	430a      	orrs	r2, r1
 802aa1c:	431a      	orrs	r2, r3
 802aa1e:	68fb      	ldr	r3, [r7, #12]
 802aa20:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802aa22:	f7f8 fe27 	bl	8023674 <HAL_GetTick>
 802aa26:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa28:	e010      	b.n	802aa4c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802aa2a:	687b      	ldr	r3, [r7, #4]
 802aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aa30:	d00c      	beq.n	802aa4c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802aa32:	687b      	ldr	r3, [r7, #4]
 802aa34:	2b00      	cmp	r3, #0
 802aa36:	d007      	beq.n	802aa48 <FMC_SDRAM_SendCommand+0x60>
 802aa38:	f7f8 fe1c 	bl	8023674 <HAL_GetTick>
 802aa3c:	4602      	mov	r2, r0
 802aa3e:	697b      	ldr	r3, [r7, #20]
 802aa40:	1ad3      	subs	r3, r2, r3
 802aa42:	687a      	ldr	r2, [r7, #4]
 802aa44:	429a      	cmp	r2, r3
 802aa46:	d201      	bcs.n	802aa4c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802aa48:	2303      	movs	r3, #3
 802aa4a:	e006      	b.n	802aa5a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa4c:	68fb      	ldr	r3, [r7, #12]
 802aa4e:	699b      	ldr	r3, [r3, #24]
 802aa50:	f003 0320 	and.w	r3, r3, #32
 802aa54:	2b20      	cmp	r3, #32
 802aa56:	d0e8      	beq.n	802aa2a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802aa58:	2300      	movs	r3, #0
}
 802aa5a:	4618      	mov	r0, r3
 802aa5c:	3718      	adds	r7, #24
 802aa5e:	46bd      	mov	sp, r7
 802aa60:	bd80      	pop	{r7, pc}

0802aa62 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802aa62:	b480      	push	{r7}
 802aa64:	b083      	sub	sp, #12
 802aa66:	af00      	add	r7, sp, #0
 802aa68:	6078      	str	r0, [r7, #4]
 802aa6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802aa6c:	687b      	ldr	r3, [r7, #4]
 802aa6e:	695b      	ldr	r3, [r3, #20]
 802aa70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802aa74:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802aa78:	683a      	ldr	r2, [r7, #0]
 802aa7a:	0052      	lsls	r2, r2, #1
 802aa7c:	431a      	orrs	r2, r3
 802aa7e:	687b      	ldr	r3, [r7, #4]
 802aa80:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802aa82:	2300      	movs	r3, #0
}
 802aa84:	4618      	mov	r0, r3
 802aa86:	370c      	adds	r7, #12
 802aa88:	46bd      	mov	sp, r7
 802aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa8e:	4770      	bx	lr

0802aa90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aa90:	b084      	sub	sp, #16
 802aa92:	b580      	push	{r7, lr}
 802aa94:	b084      	sub	sp, #16
 802aa96:	af00      	add	r7, sp, #0
 802aa98:	6078      	str	r0, [r7, #4]
 802aa9a:	f107 001c 	add.w	r0, r7, #28
 802aa9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aaa4:	2b01      	cmp	r3, #1
 802aaa6:	d122      	bne.n	802aaee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802aaa8:	687b      	ldr	r3, [r7, #4]
 802aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aaac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802aab0:	687b      	ldr	r3, [r7, #4]
 802aab2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	68db      	ldr	r3, [r3, #12]
 802aab8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802aabc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802aac0:	687a      	ldr	r2, [r7, #4]
 802aac2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802aac4:	687b      	ldr	r3, [r7, #4]
 802aac6:	68db      	ldr	r3, [r3, #12]
 802aac8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802aacc:	687b      	ldr	r3, [r7, #4]
 802aace:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802aad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802aad2:	2b01      	cmp	r3, #1
 802aad4:	d105      	bne.n	802aae2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802aad6:	687b      	ldr	r3, [r7, #4]
 802aad8:	68db      	ldr	r3, [r3, #12]
 802aada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802aade:	687b      	ldr	r3, [r7, #4]
 802aae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aae2:	6878      	ldr	r0, [r7, #4]
 802aae4:	f000 f9c0 	bl	802ae68 <USB_CoreReset>
 802aae8:	4603      	mov	r3, r0
 802aaea:	73fb      	strb	r3, [r7, #15]
 802aaec:	e01a      	b.n	802ab24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802aaee:	687b      	ldr	r3, [r7, #4]
 802aaf0:	68db      	ldr	r3, [r3, #12]
 802aaf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802aaf6:	687b      	ldr	r3, [r7, #4]
 802aaf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aafa:	6878      	ldr	r0, [r7, #4]
 802aafc:	f000 f9b4 	bl	802ae68 <USB_CoreReset>
 802ab00:	4603      	mov	r3, r0
 802ab02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802ab04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ab06:	2b00      	cmp	r3, #0
 802ab08:	d106      	bne.n	802ab18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802ab0a:	687b      	ldr	r3, [r7, #4]
 802ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ab12:	687b      	ldr	r3, [r7, #4]
 802ab14:	639a      	str	r2, [r3, #56]	; 0x38
 802ab16:	e005      	b.n	802ab24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ab18:	687b      	ldr	r3, [r7, #4]
 802ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ab20:	687b      	ldr	r3, [r7, #4]
 802ab22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab26:	2b01      	cmp	r3, #1
 802ab28:	d10b      	bne.n	802ab42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802ab2a:	687b      	ldr	r3, [r7, #4]
 802ab2c:	689b      	ldr	r3, [r3, #8]
 802ab2e:	f043 0206 	orr.w	r2, r3, #6
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802ab36:	687b      	ldr	r3, [r7, #4]
 802ab38:	689b      	ldr	r3, [r3, #8]
 802ab3a:	f043 0220 	orr.w	r2, r3, #32
 802ab3e:	687b      	ldr	r3, [r7, #4]
 802ab40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 802ab44:	4618      	mov	r0, r3
 802ab46:	3710      	adds	r7, #16
 802ab48:	46bd      	mov	sp, r7
 802ab4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802ab4e:	b004      	add	sp, #16
 802ab50:	4770      	bx	lr

0802ab52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab52:	b480      	push	{r7}
 802ab54:	b083      	sub	sp, #12
 802ab56:	af00      	add	r7, sp, #0
 802ab58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802ab5a:	687b      	ldr	r3, [r7, #4]
 802ab5c:	689b      	ldr	r3, [r3, #8]
 802ab5e:	f043 0201 	orr.w	r2, r3, #1
 802ab62:	687b      	ldr	r3, [r7, #4]
 802ab64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ab66:	2300      	movs	r3, #0
}
 802ab68:	4618      	mov	r0, r3
 802ab6a:	370c      	adds	r7, #12
 802ab6c:	46bd      	mov	sp, r7
 802ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab72:	4770      	bx	lr

0802ab74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab74:	b480      	push	{r7}
 802ab76:	b083      	sub	sp, #12
 802ab78:	af00      	add	r7, sp, #0
 802ab7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	689b      	ldr	r3, [r3, #8]
 802ab80:	f023 0201 	bic.w	r2, r3, #1
 802ab84:	687b      	ldr	r3, [r7, #4]
 802ab86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ab88:	2300      	movs	r3, #0
}
 802ab8a:	4618      	mov	r0, r3
 802ab8c:	370c      	adds	r7, #12
 802ab8e:	46bd      	mov	sp, r7
 802ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab94:	4770      	bx	lr

0802ab96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802ab96:	b580      	push	{r7, lr}
 802ab98:	b084      	sub	sp, #16
 802ab9a:	af00      	add	r7, sp, #0
 802ab9c:	6078      	str	r0, [r7, #4]
 802ab9e:	460b      	mov	r3, r1
 802aba0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802aba2:	2300      	movs	r3, #0
 802aba4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802aba6:	687b      	ldr	r3, [r7, #4]
 802aba8:	68db      	ldr	r3, [r3, #12]
 802abaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802abae:	687b      	ldr	r3, [r7, #4]
 802abb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802abb2:	78fb      	ldrb	r3, [r7, #3]
 802abb4:	2b01      	cmp	r3, #1
 802abb6:	d115      	bne.n	802abe4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802abb8:	687b      	ldr	r3, [r7, #4]
 802abba:	68db      	ldr	r3, [r3, #12]
 802abbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802abc0:	687b      	ldr	r3, [r7, #4]
 802abc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802abc4:	2001      	movs	r0, #1
 802abc6:	f7f8 fd61 	bl	802368c <HAL_Delay>
      ms++;
 802abca:	68fb      	ldr	r3, [r7, #12]
 802abcc:	3301      	adds	r3, #1
 802abce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802abd0:	6878      	ldr	r0, [r7, #4]
 802abd2:	f000 f93a 	bl	802ae4a <USB_GetMode>
 802abd6:	4603      	mov	r3, r0
 802abd8:	2b01      	cmp	r3, #1
 802abda:	d01e      	beq.n	802ac1a <USB_SetCurrentMode+0x84>
 802abdc:	68fb      	ldr	r3, [r7, #12]
 802abde:	2b31      	cmp	r3, #49	; 0x31
 802abe0:	d9f0      	bls.n	802abc4 <USB_SetCurrentMode+0x2e>
 802abe2:	e01a      	b.n	802ac1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802abe4:	78fb      	ldrb	r3, [r7, #3]
 802abe6:	2b00      	cmp	r3, #0
 802abe8:	d115      	bne.n	802ac16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802abea:	687b      	ldr	r3, [r7, #4]
 802abec:	68db      	ldr	r3, [r3, #12]
 802abee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802abf2:	687b      	ldr	r3, [r7, #4]
 802abf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802abf6:	2001      	movs	r0, #1
 802abf8:	f7f8 fd48 	bl	802368c <HAL_Delay>
      ms++;
 802abfc:	68fb      	ldr	r3, [r7, #12]
 802abfe:	3301      	adds	r3, #1
 802ac00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802ac02:	6878      	ldr	r0, [r7, #4]
 802ac04:	f000 f921 	bl	802ae4a <USB_GetMode>
 802ac08:	4603      	mov	r3, r0
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d005      	beq.n	802ac1a <USB_SetCurrentMode+0x84>
 802ac0e:	68fb      	ldr	r3, [r7, #12]
 802ac10:	2b31      	cmp	r3, #49	; 0x31
 802ac12:	d9f0      	bls.n	802abf6 <USB_SetCurrentMode+0x60>
 802ac14:	e001      	b.n	802ac1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ac16:	2301      	movs	r3, #1
 802ac18:	e005      	b.n	802ac26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ac1a:	68fb      	ldr	r3, [r7, #12]
 802ac1c:	2b32      	cmp	r3, #50	; 0x32
 802ac1e:	d101      	bne.n	802ac24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ac20:	2301      	movs	r3, #1
 802ac22:	e000      	b.n	802ac26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ac24:	2300      	movs	r3, #0
}
 802ac26:	4618      	mov	r0, r3
 802ac28:	3710      	adds	r7, #16
 802ac2a:	46bd      	mov	sp, r7
 802ac2c:	bd80      	pop	{r7, pc}
	...

0802ac30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802ac30:	b480      	push	{r7}
 802ac32:	b085      	sub	sp, #20
 802ac34:	af00      	add	r7, sp, #0
 802ac36:	6078      	str	r0, [r7, #4]
 802ac38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802ac3a:	2300      	movs	r3, #0
 802ac3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ac3e:	68fb      	ldr	r3, [r7, #12]
 802ac40:	3301      	adds	r3, #1
 802ac42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac44:	68fb      	ldr	r3, [r7, #12]
 802ac46:	4a13      	ldr	r2, [pc, #76]	; (802ac94 <USB_FlushTxFifo+0x64>)
 802ac48:	4293      	cmp	r3, r2
 802ac4a:	d901      	bls.n	802ac50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802ac4c:	2303      	movs	r3, #3
 802ac4e:	e01b      	b.n	802ac88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ac50:	687b      	ldr	r3, [r7, #4]
 802ac52:	691b      	ldr	r3, [r3, #16]
 802ac54:	2b00      	cmp	r3, #0
 802ac56:	daf2      	bge.n	802ac3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802ac58:	2300      	movs	r3, #0
 802ac5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802ac5c:	683b      	ldr	r3, [r7, #0]
 802ac5e:	019b      	lsls	r3, r3, #6
 802ac60:	f043 0220 	orr.w	r2, r3, #32
 802ac64:	687b      	ldr	r3, [r7, #4]
 802ac66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ac68:	68fb      	ldr	r3, [r7, #12]
 802ac6a:	3301      	adds	r3, #1
 802ac6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac6e:	68fb      	ldr	r3, [r7, #12]
 802ac70:	4a08      	ldr	r2, [pc, #32]	; (802ac94 <USB_FlushTxFifo+0x64>)
 802ac72:	4293      	cmp	r3, r2
 802ac74:	d901      	bls.n	802ac7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802ac76:	2303      	movs	r3, #3
 802ac78:	e006      	b.n	802ac88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802ac7a:	687b      	ldr	r3, [r7, #4]
 802ac7c:	691b      	ldr	r3, [r3, #16]
 802ac7e:	f003 0320 	and.w	r3, r3, #32
 802ac82:	2b20      	cmp	r3, #32
 802ac84:	d0f0      	beq.n	802ac68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802ac86:	2300      	movs	r3, #0
}
 802ac88:	4618      	mov	r0, r3
 802ac8a:	3714      	adds	r7, #20
 802ac8c:	46bd      	mov	sp, r7
 802ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac92:	4770      	bx	lr
 802ac94:	00030d40 	.word	0x00030d40

0802ac98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802ac98:	b480      	push	{r7}
 802ac9a:	b085      	sub	sp, #20
 802ac9c:	af00      	add	r7, sp, #0
 802ac9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802aca0:	2300      	movs	r3, #0
 802aca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802aca4:	68fb      	ldr	r3, [r7, #12]
 802aca6:	3301      	adds	r3, #1
 802aca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802acaa:	68fb      	ldr	r3, [r7, #12]
 802acac:	4a11      	ldr	r2, [pc, #68]	; (802acf4 <USB_FlushRxFifo+0x5c>)
 802acae:	4293      	cmp	r3, r2
 802acb0:	d901      	bls.n	802acb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802acb2:	2303      	movs	r3, #3
 802acb4:	e018      	b.n	802ace8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802acb6:	687b      	ldr	r3, [r7, #4]
 802acb8:	691b      	ldr	r3, [r3, #16]
 802acba:	2b00      	cmp	r3, #0
 802acbc:	daf2      	bge.n	802aca4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802acbe:	2300      	movs	r3, #0
 802acc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802acc2:	687b      	ldr	r3, [r7, #4]
 802acc4:	2210      	movs	r2, #16
 802acc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802acc8:	68fb      	ldr	r3, [r7, #12]
 802acca:	3301      	adds	r3, #1
 802accc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802acce:	68fb      	ldr	r3, [r7, #12]
 802acd0:	4a08      	ldr	r2, [pc, #32]	; (802acf4 <USB_FlushRxFifo+0x5c>)
 802acd2:	4293      	cmp	r3, r2
 802acd4:	d901      	bls.n	802acda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802acd6:	2303      	movs	r3, #3
 802acd8:	e006      	b.n	802ace8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802acda:	687b      	ldr	r3, [r7, #4]
 802acdc:	691b      	ldr	r3, [r3, #16]
 802acde:	f003 0310 	and.w	r3, r3, #16
 802ace2:	2b10      	cmp	r3, #16
 802ace4:	d0f0      	beq.n	802acc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802ace6:	2300      	movs	r3, #0
}
 802ace8:	4618      	mov	r0, r3
 802acea:	3714      	adds	r7, #20
 802acec:	46bd      	mov	sp, r7
 802acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acf2:	4770      	bx	lr
 802acf4:	00030d40 	.word	0x00030d40

0802acf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802acf8:	b480      	push	{r7}
 802acfa:	b089      	sub	sp, #36	; 0x24
 802acfc:	af00      	add	r7, sp, #0
 802acfe:	60f8      	str	r0, [r7, #12]
 802ad00:	60b9      	str	r1, [r7, #8]
 802ad02:	4611      	mov	r1, r2
 802ad04:	461a      	mov	r2, r3
 802ad06:	460b      	mov	r3, r1
 802ad08:	71fb      	strb	r3, [r7, #7]
 802ad0a:	4613      	mov	r3, r2
 802ad0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad0e:	68fb      	ldr	r3, [r7, #12]
 802ad10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802ad12:	68bb      	ldr	r3, [r7, #8]
 802ad14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802ad16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ad1a:	2b00      	cmp	r3, #0
 802ad1c:	d123      	bne.n	802ad66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ad1e:	88bb      	ldrh	r3, [r7, #4]
 802ad20:	3303      	adds	r3, #3
 802ad22:	089b      	lsrs	r3, r3, #2
 802ad24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ad26:	2300      	movs	r3, #0
 802ad28:	61bb      	str	r3, [r7, #24]
 802ad2a:	e018      	b.n	802ad5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ad2c:	79fb      	ldrb	r3, [r7, #7]
 802ad2e:	031a      	lsls	r2, r3, #12
 802ad30:	697b      	ldr	r3, [r7, #20]
 802ad32:	4413      	add	r3, r2
 802ad34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ad38:	461a      	mov	r2, r3
 802ad3a:	69fb      	ldr	r3, [r7, #28]
 802ad3c:	681b      	ldr	r3, [r3, #0]
 802ad3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ad40:	69fb      	ldr	r3, [r7, #28]
 802ad42:	3301      	adds	r3, #1
 802ad44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad46:	69fb      	ldr	r3, [r7, #28]
 802ad48:	3301      	adds	r3, #1
 802ad4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad4c:	69fb      	ldr	r3, [r7, #28]
 802ad4e:	3301      	adds	r3, #1
 802ad50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad52:	69fb      	ldr	r3, [r7, #28]
 802ad54:	3301      	adds	r3, #1
 802ad56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ad58:	69bb      	ldr	r3, [r7, #24]
 802ad5a:	3301      	adds	r3, #1
 802ad5c:	61bb      	str	r3, [r7, #24]
 802ad5e:	69ba      	ldr	r2, [r7, #24]
 802ad60:	693b      	ldr	r3, [r7, #16]
 802ad62:	429a      	cmp	r2, r3
 802ad64:	d3e2      	bcc.n	802ad2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ad66:	2300      	movs	r3, #0
}
 802ad68:	4618      	mov	r0, r3
 802ad6a:	3724      	adds	r7, #36	; 0x24
 802ad6c:	46bd      	mov	sp, r7
 802ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad72:	4770      	bx	lr

0802ad74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802ad74:	b480      	push	{r7}
 802ad76:	b08b      	sub	sp, #44	; 0x2c
 802ad78:	af00      	add	r7, sp, #0
 802ad7a:	60f8      	str	r0, [r7, #12]
 802ad7c:	60b9      	str	r1, [r7, #8]
 802ad7e:	4613      	mov	r3, r2
 802ad80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad82:	68fb      	ldr	r3, [r7, #12]
 802ad84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802ad86:	68bb      	ldr	r3, [r7, #8]
 802ad88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802ad8a:	88fb      	ldrh	r3, [r7, #6]
 802ad8c:	089b      	lsrs	r3, r3, #2
 802ad8e:	b29b      	uxth	r3, r3
 802ad90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802ad92:	88fb      	ldrh	r3, [r7, #6]
 802ad94:	f003 0303 	and.w	r3, r3, #3
 802ad98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802ad9a:	2300      	movs	r3, #0
 802ad9c:	623b      	str	r3, [r7, #32]
 802ad9e:	e014      	b.n	802adca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802ada0:	69bb      	ldr	r3, [r7, #24]
 802ada2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ada6:	681a      	ldr	r2, [r3, #0]
 802ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adaa:	601a      	str	r2, [r3, #0]
    pDest++;
 802adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adae:	3301      	adds	r3, #1
 802adb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adb4:	3301      	adds	r3, #1
 802adb6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adba:	3301      	adds	r3, #1
 802adbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adc0:	3301      	adds	r3, #1
 802adc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802adc4:	6a3b      	ldr	r3, [r7, #32]
 802adc6:	3301      	adds	r3, #1
 802adc8:	623b      	str	r3, [r7, #32]
 802adca:	6a3a      	ldr	r2, [r7, #32]
 802adcc:	697b      	ldr	r3, [r7, #20]
 802adce:	429a      	cmp	r2, r3
 802add0:	d3e6      	bcc.n	802ada0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802add2:	8bfb      	ldrh	r3, [r7, #30]
 802add4:	2b00      	cmp	r3, #0
 802add6:	d01e      	beq.n	802ae16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802add8:	2300      	movs	r3, #0
 802adda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802addc:	69bb      	ldr	r3, [r7, #24]
 802adde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ade2:	461a      	mov	r2, r3
 802ade4:	f107 0310 	add.w	r3, r7, #16
 802ade8:	6812      	ldr	r2, [r2, #0]
 802adea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802adec:	693a      	ldr	r2, [r7, #16]
 802adee:	6a3b      	ldr	r3, [r7, #32]
 802adf0:	b2db      	uxtb	r3, r3
 802adf2:	00db      	lsls	r3, r3, #3
 802adf4:	fa22 f303 	lsr.w	r3, r2, r3
 802adf8:	b2da      	uxtb	r2, r3
 802adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adfc:	701a      	strb	r2, [r3, #0]
      i++;
 802adfe:	6a3b      	ldr	r3, [r7, #32]
 802ae00:	3301      	adds	r3, #1
 802ae02:	623b      	str	r3, [r7, #32]
      pDest++;
 802ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae06:	3301      	adds	r3, #1
 802ae08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802ae0a:	8bfb      	ldrh	r3, [r7, #30]
 802ae0c:	3b01      	subs	r3, #1
 802ae0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802ae10:	8bfb      	ldrh	r3, [r7, #30]
 802ae12:	2b00      	cmp	r3, #0
 802ae14:	d1ea      	bne.n	802adec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802ae18:	4618      	mov	r0, r3
 802ae1a:	372c      	adds	r7, #44	; 0x2c
 802ae1c:	46bd      	mov	sp, r7
 802ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae22:	4770      	bx	lr

0802ae24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802ae24:	b480      	push	{r7}
 802ae26:	b085      	sub	sp, #20
 802ae28:	af00      	add	r7, sp, #0
 802ae2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802ae2c:	687b      	ldr	r3, [r7, #4]
 802ae2e:	695b      	ldr	r3, [r3, #20]
 802ae30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	699b      	ldr	r3, [r3, #24]
 802ae36:	68fa      	ldr	r2, [r7, #12]
 802ae38:	4013      	ands	r3, r2
 802ae3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802ae3c:	68fb      	ldr	r3, [r7, #12]
}
 802ae3e:	4618      	mov	r0, r3
 802ae40:	3714      	adds	r7, #20
 802ae42:	46bd      	mov	sp, r7
 802ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae48:	4770      	bx	lr

0802ae4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802ae4a:	b480      	push	{r7}
 802ae4c:	b083      	sub	sp, #12
 802ae4e:	af00      	add	r7, sp, #0
 802ae50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802ae52:	687b      	ldr	r3, [r7, #4]
 802ae54:	695b      	ldr	r3, [r3, #20]
 802ae56:	f003 0301 	and.w	r3, r3, #1
}
 802ae5a:	4618      	mov	r0, r3
 802ae5c:	370c      	adds	r7, #12
 802ae5e:	46bd      	mov	sp, r7
 802ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae64:	4770      	bx	lr
	...

0802ae68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802ae68:	b480      	push	{r7}
 802ae6a:	b085      	sub	sp, #20
 802ae6c:	af00      	add	r7, sp, #0
 802ae6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ae70:	2300      	movs	r3, #0
 802ae72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ae74:	68fb      	ldr	r3, [r7, #12]
 802ae76:	3301      	adds	r3, #1
 802ae78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ae7a:	68fb      	ldr	r3, [r7, #12]
 802ae7c:	4a13      	ldr	r2, [pc, #76]	; (802aecc <USB_CoreReset+0x64>)
 802ae7e:	4293      	cmp	r3, r2
 802ae80:	d901      	bls.n	802ae86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802ae82:	2303      	movs	r3, #3
 802ae84:	e01b      	b.n	802aebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ae86:	687b      	ldr	r3, [r7, #4]
 802ae88:	691b      	ldr	r3, [r3, #16]
 802ae8a:	2b00      	cmp	r3, #0
 802ae8c:	daf2      	bge.n	802ae74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802ae8e:	2300      	movs	r3, #0
 802ae90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802ae92:	687b      	ldr	r3, [r7, #4]
 802ae94:	691b      	ldr	r3, [r3, #16]
 802ae96:	f043 0201 	orr.w	r2, r3, #1
 802ae9a:	687b      	ldr	r3, [r7, #4]
 802ae9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ae9e:	68fb      	ldr	r3, [r7, #12]
 802aea0:	3301      	adds	r3, #1
 802aea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802aea4:	68fb      	ldr	r3, [r7, #12]
 802aea6:	4a09      	ldr	r2, [pc, #36]	; (802aecc <USB_CoreReset+0x64>)
 802aea8:	4293      	cmp	r3, r2
 802aeaa:	d901      	bls.n	802aeb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802aeac:	2303      	movs	r3, #3
 802aeae:	e006      	b.n	802aebe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802aeb0:	687b      	ldr	r3, [r7, #4]
 802aeb2:	691b      	ldr	r3, [r3, #16]
 802aeb4:	f003 0301 	and.w	r3, r3, #1
 802aeb8:	2b01      	cmp	r3, #1
 802aeba:	d0f0      	beq.n	802ae9e <USB_CoreReset+0x36>

  return HAL_OK;
 802aebc:	2300      	movs	r3, #0
}
 802aebe:	4618      	mov	r0, r3
 802aec0:	3714      	adds	r7, #20
 802aec2:	46bd      	mov	sp, r7
 802aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aec8:	4770      	bx	lr
 802aeca:	bf00      	nop
 802aecc:	00030d40 	.word	0x00030d40

0802aed0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aed0:	b084      	sub	sp, #16
 802aed2:	b580      	push	{r7, lr}
 802aed4:	b086      	sub	sp, #24
 802aed6:	af00      	add	r7, sp, #0
 802aed8:	6078      	str	r0, [r7, #4]
 802aeda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802aede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802aee2:	2300      	movs	r3, #0
 802aee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aee6:	687b      	ldr	r3, [r7, #4]
 802aee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802aeea:	68fb      	ldr	r3, [r7, #12]
 802aeec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802aef0:	461a      	mov	r2, r3
 802aef2:	2300      	movs	r3, #0
 802aef4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802aef6:	687b      	ldr	r3, [r7, #4]
 802aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aefa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802af02:	687b      	ldr	r3, [r7, #4]
 802af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af06:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802af0a:	687b      	ldr	r3, [r7, #4]
 802af0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802af0e:	687b      	ldr	r3, [r7, #4]
 802af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802af1a:	687b      	ldr	r3, [r7, #4]
 802af1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802af1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802af22:	2b00      	cmp	r3, #0
 802af24:	d018      	beq.n	802af58 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802af26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802af28:	2b01      	cmp	r3, #1
 802af2a:	d10a      	bne.n	802af42 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802af2c:	68fb      	ldr	r3, [r7, #12]
 802af2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af32:	681b      	ldr	r3, [r3, #0]
 802af34:	68fa      	ldr	r2, [r7, #12]
 802af36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af3a:	f043 0304 	orr.w	r3, r3, #4
 802af3e:	6013      	str	r3, [r2, #0]
 802af40:	e014      	b.n	802af6c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af42:	68fb      	ldr	r3, [r7, #12]
 802af44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af48:	681b      	ldr	r3, [r3, #0]
 802af4a:	68fa      	ldr	r2, [r7, #12]
 802af4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af50:	f023 0304 	bic.w	r3, r3, #4
 802af54:	6013      	str	r3, [r2, #0]
 802af56:	e009      	b.n	802af6c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af58:	68fb      	ldr	r3, [r7, #12]
 802af5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af5e:	681b      	ldr	r3, [r3, #0]
 802af60:	68fa      	ldr	r2, [r7, #12]
 802af62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af66:	f023 0304 	bic.w	r3, r3, #4
 802af6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802af6c:	2110      	movs	r1, #16
 802af6e:	6878      	ldr	r0, [r7, #4]
 802af70:	f7ff fe5e 	bl	802ac30 <USB_FlushTxFifo>
 802af74:	4603      	mov	r3, r0
 802af76:	2b00      	cmp	r3, #0
 802af78:	d001      	beq.n	802af7e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802af7a:	2301      	movs	r3, #1
 802af7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802af7e:	6878      	ldr	r0, [r7, #4]
 802af80:	f7ff fe8a 	bl	802ac98 <USB_FlushRxFifo>
 802af84:	4603      	mov	r3, r0
 802af86:	2b00      	cmp	r3, #0
 802af88:	d001      	beq.n	802af8e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802af8a:	2301      	movs	r3, #1
 802af8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802af8e:	2300      	movs	r3, #0
 802af90:	613b      	str	r3, [r7, #16]
 802af92:	e015      	b.n	802afc0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802af94:	693b      	ldr	r3, [r7, #16]
 802af96:	015a      	lsls	r2, r3, #5
 802af98:	68fb      	ldr	r3, [r7, #12]
 802af9a:	4413      	add	r3, r2
 802af9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afa0:	461a      	mov	r2, r3
 802afa2:	f04f 33ff 	mov.w	r3, #4294967295
 802afa6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802afa8:	693b      	ldr	r3, [r7, #16]
 802afaa:	015a      	lsls	r2, r3, #5
 802afac:	68fb      	ldr	r3, [r7, #12]
 802afae:	4413      	add	r3, r2
 802afb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afb4:	461a      	mov	r2, r3
 802afb6:	2300      	movs	r3, #0
 802afb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802afba:	693b      	ldr	r3, [r7, #16]
 802afbc:	3301      	adds	r3, #1
 802afbe:	613b      	str	r3, [r7, #16]
 802afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802afc2:	693a      	ldr	r2, [r7, #16]
 802afc4:	429a      	cmp	r2, r3
 802afc6:	d3e5      	bcc.n	802af94 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802afc8:	687b      	ldr	r3, [r7, #4]
 802afca:	2200      	movs	r2, #0
 802afcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802afce:	687b      	ldr	r3, [r7, #4]
 802afd0:	f04f 32ff 	mov.w	r2, #4294967295
 802afd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802afd6:	687b      	ldr	r3, [r7, #4]
 802afd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802afda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802afde:	2b00      	cmp	r3, #0
 802afe0:	d00b      	beq.n	802affa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802afe2:	687b      	ldr	r3, [r7, #4]
 802afe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 802afe8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802afea:	687b      	ldr	r3, [r7, #4]
 802afec:	4a13      	ldr	r2, [pc, #76]	; (802b03c <USB_HostInit+0x16c>)
 802afee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802aff0:	687b      	ldr	r3, [r7, #4]
 802aff2:	4a13      	ldr	r2, [pc, #76]	; (802b040 <USB_HostInit+0x170>)
 802aff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802aff8:	e009      	b.n	802b00e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802affa:	687b      	ldr	r3, [r7, #4]
 802affc:	2280      	movs	r2, #128	; 0x80
 802affe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802b000:	687b      	ldr	r3, [r7, #4]
 802b002:	4a10      	ldr	r2, [pc, #64]	; (802b044 <USB_HostInit+0x174>)
 802b004:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802b006:	687b      	ldr	r3, [r7, #4]
 802b008:	4a0f      	ldr	r2, [pc, #60]	; (802b048 <USB_HostInit+0x178>)
 802b00a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b010:	2b00      	cmp	r3, #0
 802b012:	d105      	bne.n	802b020 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802b014:	687b      	ldr	r3, [r7, #4]
 802b016:	699b      	ldr	r3, [r3, #24]
 802b018:	f043 0210 	orr.w	r2, r3, #16
 802b01c:	687b      	ldr	r3, [r7, #4]
 802b01e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802b020:	687b      	ldr	r3, [r7, #4]
 802b022:	699a      	ldr	r2, [r3, #24]
 802b024:	4b09      	ldr	r3, [pc, #36]	; (802b04c <USB_HostInit+0x17c>)
 802b026:	4313      	orrs	r3, r2
 802b028:	687a      	ldr	r2, [r7, #4]
 802b02a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802b02c:	7dfb      	ldrb	r3, [r7, #23]
}
 802b02e:	4618      	mov	r0, r3
 802b030:	3718      	adds	r7, #24
 802b032:	46bd      	mov	sp, r7
 802b034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b038:	b004      	add	sp, #16
 802b03a:	4770      	bx	lr
 802b03c:	01000200 	.word	0x01000200
 802b040:	00e00300 	.word	0x00e00300
 802b044:	00600080 	.word	0x00600080
 802b048:	004000e0 	.word	0x004000e0
 802b04c:	a3200008 	.word	0xa3200008

0802b050 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802b050:	b480      	push	{r7}
 802b052:	b085      	sub	sp, #20
 802b054:	af00      	add	r7, sp, #0
 802b056:	6078      	str	r0, [r7, #4]
 802b058:	460b      	mov	r3, r1
 802b05a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b05c:	687b      	ldr	r3, [r7, #4]
 802b05e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802b060:	68fb      	ldr	r3, [r7, #12]
 802b062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b066:	681b      	ldr	r3, [r3, #0]
 802b068:	68fa      	ldr	r2, [r7, #12]
 802b06a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802b06e:	f023 0303 	bic.w	r3, r3, #3
 802b072:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802b074:	68fb      	ldr	r3, [r7, #12]
 802b076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b07a:	681a      	ldr	r2, [r3, #0]
 802b07c:	78fb      	ldrb	r3, [r7, #3]
 802b07e:	f003 0303 	and.w	r3, r3, #3
 802b082:	68f9      	ldr	r1, [r7, #12]
 802b084:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b088:	4313      	orrs	r3, r2
 802b08a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802b08c:	78fb      	ldrb	r3, [r7, #3]
 802b08e:	2b01      	cmp	r3, #1
 802b090:	d107      	bne.n	802b0a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802b092:	68fb      	ldr	r3, [r7, #12]
 802b094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b098:	461a      	mov	r2, r3
 802b09a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802b09e:	6053      	str	r3, [r2, #4]
 802b0a0:	e009      	b.n	802b0b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802b0a2:	78fb      	ldrb	r3, [r7, #3]
 802b0a4:	2b02      	cmp	r3, #2
 802b0a6:	d106      	bne.n	802b0b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802b0a8:	68fb      	ldr	r3, [r7, #12]
 802b0aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0ae:	461a      	mov	r2, r3
 802b0b0:	f241 7370 	movw	r3, #6000	; 0x1770
 802b0b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802b0b6:	2300      	movs	r3, #0
}
 802b0b8:	4618      	mov	r0, r3
 802b0ba:	3714      	adds	r7, #20
 802b0bc:	46bd      	mov	sp, r7
 802b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0c2:	4770      	bx	lr

0802b0c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802b0c4:	b580      	push	{r7, lr}
 802b0c6:	b084      	sub	sp, #16
 802b0c8:	af00      	add	r7, sp, #0
 802b0ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0cc:	687b      	ldr	r3, [r7, #4]
 802b0ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802b0d0:	2300      	movs	r3, #0
 802b0d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b0d4:	68fb      	ldr	r3, [r7, #12]
 802b0d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b0da:	681b      	ldr	r3, [r3, #0]
 802b0dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b0de:	68bb      	ldr	r3, [r7, #8]
 802b0e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b0e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802b0e6:	68bb      	ldr	r3, [r7, #8]
 802b0e8:	68fa      	ldr	r2, [r7, #12]
 802b0ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b0ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802b0f4:	2064      	movs	r0, #100	; 0x64
 802b0f6:	f7f8 fac9 	bl	802368c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802b0fa:	68bb      	ldr	r3, [r7, #8]
 802b0fc:	68fa      	ldr	r2, [r7, #12]
 802b0fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b106:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802b108:	200a      	movs	r0, #10
 802b10a:	f7f8 fabf 	bl	802368c <HAL_Delay>

  return HAL_OK;
 802b10e:	2300      	movs	r3, #0
}
 802b110:	4618      	mov	r0, r3
 802b112:	3710      	adds	r7, #16
 802b114:	46bd      	mov	sp, r7
 802b116:	bd80      	pop	{r7, pc}

0802b118 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802b118:	b480      	push	{r7}
 802b11a:	b085      	sub	sp, #20
 802b11c:	af00      	add	r7, sp, #0
 802b11e:	6078      	str	r0, [r7, #4]
 802b120:	460b      	mov	r3, r1
 802b122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b124:	687b      	ldr	r3, [r7, #4]
 802b126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b128:	2300      	movs	r3, #0
 802b12a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b12c:	68fb      	ldr	r3, [r7, #12]
 802b12e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b132:	681b      	ldr	r3, [r3, #0]
 802b134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b136:	68bb      	ldr	r3, [r7, #8]
 802b138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b13c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802b13e:	68bb      	ldr	r3, [r7, #8]
 802b140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b144:	2b00      	cmp	r3, #0
 802b146:	d109      	bne.n	802b15c <USB_DriveVbus+0x44>
 802b148:	78fb      	ldrb	r3, [r7, #3]
 802b14a:	2b01      	cmp	r3, #1
 802b14c:	d106      	bne.n	802b15c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802b14e:	68bb      	ldr	r3, [r7, #8]
 802b150:	68fa      	ldr	r2, [r7, #12]
 802b152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b15a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802b15c:	68bb      	ldr	r3, [r7, #8]
 802b15e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b166:	d109      	bne.n	802b17c <USB_DriveVbus+0x64>
 802b168:	78fb      	ldrb	r3, [r7, #3]
 802b16a:	2b00      	cmp	r3, #0
 802b16c:	d106      	bne.n	802b17c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802b16e:	68bb      	ldr	r3, [r7, #8]
 802b170:	68fa      	ldr	r2, [r7, #12]
 802b172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b17a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802b17c:	2300      	movs	r3, #0
}
 802b17e:	4618      	mov	r0, r3
 802b180:	3714      	adds	r7, #20
 802b182:	46bd      	mov	sp, r7
 802b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b188:	4770      	bx	lr

0802b18a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802b18a:	b480      	push	{r7}
 802b18c:	b085      	sub	sp, #20
 802b18e:	af00      	add	r7, sp, #0
 802b190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b192:	687b      	ldr	r3, [r7, #4]
 802b194:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b196:	2300      	movs	r3, #0
 802b198:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b19a:	68fb      	ldr	r3, [r7, #12]
 802b19c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b1a0:	681b      	ldr	r3, [r3, #0]
 802b1a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802b1a4:	68bb      	ldr	r3, [r7, #8]
 802b1a6:	0c5b      	lsrs	r3, r3, #17
 802b1a8:	f003 0303 	and.w	r3, r3, #3
}
 802b1ac:	4618      	mov	r0, r3
 802b1ae:	3714      	adds	r7, #20
 802b1b0:	46bd      	mov	sp, r7
 802b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1b6:	4770      	bx	lr

0802b1b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802b1b8:	b480      	push	{r7}
 802b1ba:	b085      	sub	sp, #20
 802b1bc:	af00      	add	r7, sp, #0
 802b1be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1c0:	687b      	ldr	r3, [r7, #4]
 802b1c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802b1c4:	68fb      	ldr	r3, [r7, #12]
 802b1c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b1ca:	689b      	ldr	r3, [r3, #8]
 802b1cc:	b29b      	uxth	r3, r3
}
 802b1ce:	4618      	mov	r0, r3
 802b1d0:	3714      	adds	r7, #20
 802b1d2:	46bd      	mov	sp, r7
 802b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1d8:	4770      	bx	lr
	...

0802b1dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802b1dc:	b580      	push	{r7, lr}
 802b1de:	b088      	sub	sp, #32
 802b1e0:	af00      	add	r7, sp, #0
 802b1e2:	6078      	str	r0, [r7, #4]
 802b1e4:	4608      	mov	r0, r1
 802b1e6:	4611      	mov	r1, r2
 802b1e8:	461a      	mov	r2, r3
 802b1ea:	4603      	mov	r3, r0
 802b1ec:	70fb      	strb	r3, [r7, #3]
 802b1ee:	460b      	mov	r3, r1
 802b1f0:	70bb      	strb	r3, [r7, #2]
 802b1f2:	4613      	mov	r3, r2
 802b1f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802b1f6:	2300      	movs	r3, #0
 802b1f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1fa:	687b      	ldr	r3, [r7, #4]
 802b1fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802b1fe:	78fb      	ldrb	r3, [r7, #3]
 802b200:	015a      	lsls	r2, r3, #5
 802b202:	693b      	ldr	r3, [r7, #16]
 802b204:	4413      	add	r3, r2
 802b206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b20a:	461a      	mov	r2, r3
 802b20c:	f04f 33ff 	mov.w	r3, #4294967295
 802b210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802b212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b216:	2b03      	cmp	r3, #3
 802b218:	d87e      	bhi.n	802b318 <USB_HC_Init+0x13c>
 802b21a:	a201      	add	r2, pc, #4	; (adr r2, 802b220 <USB_HC_Init+0x44>)
 802b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b220:	0802b231 	.word	0x0802b231
 802b224:	0802b2db 	.word	0x0802b2db
 802b228:	0802b231 	.word	0x0802b231
 802b22c:	0802b29d 	.word	0x0802b29d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b230:	78fb      	ldrb	r3, [r7, #3]
 802b232:	015a      	lsls	r2, r3, #5
 802b234:	693b      	ldr	r3, [r7, #16]
 802b236:	4413      	add	r3, r2
 802b238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b23c:	461a      	mov	r2, r3
 802b23e:	f240 439d 	movw	r3, #1181	; 0x49d
 802b242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802b244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b248:	2b00      	cmp	r3, #0
 802b24a:	da10      	bge.n	802b26e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b24c:	78fb      	ldrb	r3, [r7, #3]
 802b24e:	015a      	lsls	r2, r3, #5
 802b250:	693b      	ldr	r3, [r7, #16]
 802b252:	4413      	add	r3, r2
 802b254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b258:	68db      	ldr	r3, [r3, #12]
 802b25a:	78fa      	ldrb	r2, [r7, #3]
 802b25c:	0151      	lsls	r1, r2, #5
 802b25e:	693a      	ldr	r2, [r7, #16]
 802b260:	440a      	add	r2, r1
 802b262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b26a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802b26c:	e057      	b.n	802b31e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802b26e:	687b      	ldr	r3, [r7, #4]
 802b270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b276:	2b00      	cmp	r3, #0
 802b278:	d051      	beq.n	802b31e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802b27a:	78fb      	ldrb	r3, [r7, #3]
 802b27c:	015a      	lsls	r2, r3, #5
 802b27e:	693b      	ldr	r3, [r7, #16]
 802b280:	4413      	add	r3, r2
 802b282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b286:	68db      	ldr	r3, [r3, #12]
 802b288:	78fa      	ldrb	r2, [r7, #3]
 802b28a:	0151      	lsls	r1, r2, #5
 802b28c:	693a      	ldr	r2, [r7, #16]
 802b28e:	440a      	add	r2, r1
 802b290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802b298:	60d3      	str	r3, [r2, #12]
      break;
 802b29a:	e040      	b.n	802b31e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b29c:	78fb      	ldrb	r3, [r7, #3]
 802b29e:	015a      	lsls	r2, r3, #5
 802b2a0:	693b      	ldr	r3, [r7, #16]
 802b2a2:	4413      	add	r3, r2
 802b2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2a8:	461a      	mov	r2, r3
 802b2aa:	f240 639d 	movw	r3, #1693	; 0x69d
 802b2ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b2b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2b4:	2b00      	cmp	r3, #0
 802b2b6:	da34      	bge.n	802b322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b2b8:	78fb      	ldrb	r3, [r7, #3]
 802b2ba:	015a      	lsls	r2, r3, #5
 802b2bc:	693b      	ldr	r3, [r7, #16]
 802b2be:	4413      	add	r3, r2
 802b2c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2c4:	68db      	ldr	r3, [r3, #12]
 802b2c6:	78fa      	ldrb	r2, [r7, #3]
 802b2c8:	0151      	lsls	r1, r2, #5
 802b2ca:	693a      	ldr	r2, [r7, #16]
 802b2cc:	440a      	add	r2, r1
 802b2ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b2d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b2d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 802b2d8:	e023      	b.n	802b322 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b2da:	78fb      	ldrb	r3, [r7, #3]
 802b2dc:	015a      	lsls	r2, r3, #5
 802b2de:	693b      	ldr	r3, [r7, #16]
 802b2e0:	4413      	add	r3, r2
 802b2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2e6:	461a      	mov	r2, r3
 802b2e8:	f240 2325 	movw	r3, #549	; 0x225
 802b2ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b2ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2f2:	2b00      	cmp	r3, #0
 802b2f4:	da17      	bge.n	802b326 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802b2f6:	78fb      	ldrb	r3, [r7, #3]
 802b2f8:	015a      	lsls	r2, r3, #5
 802b2fa:	693b      	ldr	r3, [r7, #16]
 802b2fc:	4413      	add	r3, r2
 802b2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b302:	68db      	ldr	r3, [r3, #12]
 802b304:	78fa      	ldrb	r2, [r7, #3]
 802b306:	0151      	lsls	r1, r2, #5
 802b308:	693a      	ldr	r2, [r7, #16]
 802b30a:	440a      	add	r2, r1
 802b30c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b310:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802b314:	60d3      	str	r3, [r2, #12]
      }
      break;
 802b316:	e006      	b.n	802b326 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802b318:	2301      	movs	r3, #1
 802b31a:	77fb      	strb	r3, [r7, #31]
      break;
 802b31c:	e004      	b.n	802b328 <USB_HC_Init+0x14c>
      break;
 802b31e:	bf00      	nop
 802b320:	e002      	b.n	802b328 <USB_HC_Init+0x14c>
      break;
 802b322:	bf00      	nop
 802b324:	e000      	b.n	802b328 <USB_HC_Init+0x14c>
      break;
 802b326:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802b328:	78fb      	ldrb	r3, [r7, #3]
 802b32a:	015a      	lsls	r2, r3, #5
 802b32c:	693b      	ldr	r3, [r7, #16]
 802b32e:	4413      	add	r3, r2
 802b330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b334:	68db      	ldr	r3, [r3, #12]
 802b336:	78fa      	ldrb	r2, [r7, #3]
 802b338:	0151      	lsls	r1, r2, #5
 802b33a:	693a      	ldr	r2, [r7, #16]
 802b33c:	440a      	add	r2, r1
 802b33e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b342:	f043 0302 	orr.w	r3, r3, #2
 802b346:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802b348:	693b      	ldr	r3, [r7, #16]
 802b34a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b34e:	699a      	ldr	r2, [r3, #24]
 802b350:	78fb      	ldrb	r3, [r7, #3]
 802b352:	f003 030f 	and.w	r3, r3, #15
 802b356:	2101      	movs	r1, #1
 802b358:	fa01 f303 	lsl.w	r3, r1, r3
 802b35c:	6939      	ldr	r1, [r7, #16]
 802b35e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b362:	4313      	orrs	r3, r2
 802b364:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802b366:	687b      	ldr	r3, [r7, #4]
 802b368:	699b      	ldr	r3, [r3, #24]
 802b36a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802b36e:	687b      	ldr	r3, [r7, #4]
 802b370:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802b372:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b376:	2b00      	cmp	r3, #0
 802b378:	da03      	bge.n	802b382 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802b37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802b37e:	61bb      	str	r3, [r7, #24]
 802b380:	e001      	b.n	802b386 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802b382:	2300      	movs	r3, #0
 802b384:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802b386:	6878      	ldr	r0, [r7, #4]
 802b388:	f7ff feff 	bl	802b18a <USB_GetHostSpeed>
 802b38c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802b38e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802b392:	2b02      	cmp	r3, #2
 802b394:	d106      	bne.n	802b3a4 <USB_HC_Init+0x1c8>
 802b396:	68fb      	ldr	r3, [r7, #12]
 802b398:	2b02      	cmp	r3, #2
 802b39a:	d003      	beq.n	802b3a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802b39c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802b3a0:	617b      	str	r3, [r7, #20]
 802b3a2:	e001      	b.n	802b3a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802b3a4:	2300      	movs	r3, #0
 802b3a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3a8:	787b      	ldrb	r3, [r7, #1]
 802b3aa:	059b      	lsls	r3, r3, #22
 802b3ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3b0:	78bb      	ldrb	r3, [r7, #2]
 802b3b2:	02db      	lsls	r3, r3, #11
 802b3b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3be:	049b      	lsls	r3, r3, #18
 802b3c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b3c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3ce:	69bb      	ldr	r3, [r7, #24]
 802b3d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3d2:	78fb      	ldrb	r3, [r7, #3]
 802b3d4:	0159      	lsls	r1, r3, #5
 802b3d6:	693b      	ldr	r3, [r7, #16]
 802b3d8:	440b      	add	r3, r1
 802b3da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b3de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3e0:	697b      	ldr	r3, [r7, #20]
 802b3e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802b3e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3ea:	2b03      	cmp	r3, #3
 802b3ec:	d003      	beq.n	802b3f6 <USB_HC_Init+0x21a>
 802b3ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3f2:	2b01      	cmp	r3, #1
 802b3f4:	d10f      	bne.n	802b416 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802b3f6:	78fb      	ldrb	r3, [r7, #3]
 802b3f8:	015a      	lsls	r2, r3, #5
 802b3fa:	693b      	ldr	r3, [r7, #16]
 802b3fc:	4413      	add	r3, r2
 802b3fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b402:	681b      	ldr	r3, [r3, #0]
 802b404:	78fa      	ldrb	r2, [r7, #3]
 802b406:	0151      	lsls	r1, r2, #5
 802b408:	693a      	ldr	r2, [r7, #16]
 802b40a:	440a      	add	r2, r1
 802b40c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b410:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802b414:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802b416:	7ffb      	ldrb	r3, [r7, #31]
}
 802b418:	4618      	mov	r0, r3
 802b41a:	3720      	adds	r7, #32
 802b41c:	46bd      	mov	sp, r7
 802b41e:	bd80      	pop	{r7, pc}

0802b420 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802b420:	b580      	push	{r7, lr}
 802b422:	b08c      	sub	sp, #48	; 0x30
 802b424:	af02      	add	r7, sp, #8
 802b426:	60f8      	str	r0, [r7, #12]
 802b428:	60b9      	str	r1, [r7, #8]
 802b42a:	4613      	mov	r3, r2
 802b42c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b42e:	68fb      	ldr	r3, [r7, #12]
 802b430:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802b432:	68bb      	ldr	r3, [r7, #8]
 802b434:	785b      	ldrb	r3, [r3, #1]
 802b436:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802b438:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b43c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802b43e:	68fb      	ldr	r3, [r7, #12]
 802b440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b446:	2b00      	cmp	r3, #0
 802b448:	d02d      	beq.n	802b4a6 <USB_HC_StartXfer+0x86>
 802b44a:	68bb      	ldr	r3, [r7, #8]
 802b44c:	791b      	ldrb	r3, [r3, #4]
 802b44e:	2b00      	cmp	r3, #0
 802b450:	d129      	bne.n	802b4a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802b452:	79fb      	ldrb	r3, [r7, #7]
 802b454:	2b01      	cmp	r3, #1
 802b456:	d117      	bne.n	802b488 <USB_HC_StartXfer+0x68>
 802b458:	68bb      	ldr	r3, [r7, #8]
 802b45a:	79db      	ldrb	r3, [r3, #7]
 802b45c:	2b00      	cmp	r3, #0
 802b45e:	d003      	beq.n	802b468 <USB_HC_StartXfer+0x48>
 802b460:	68bb      	ldr	r3, [r7, #8]
 802b462:	79db      	ldrb	r3, [r3, #7]
 802b464:	2b02      	cmp	r3, #2
 802b466:	d10f      	bne.n	802b488 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802b468:	69fb      	ldr	r3, [r7, #28]
 802b46a:	015a      	lsls	r2, r3, #5
 802b46c:	6a3b      	ldr	r3, [r7, #32]
 802b46e:	4413      	add	r3, r2
 802b470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b474:	68db      	ldr	r3, [r3, #12]
 802b476:	69fa      	ldr	r2, [r7, #28]
 802b478:	0151      	lsls	r1, r2, #5
 802b47a:	6a3a      	ldr	r2, [r7, #32]
 802b47c:	440a      	add	r2, r1
 802b47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802b486:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802b488:	79fb      	ldrb	r3, [r7, #7]
 802b48a:	2b00      	cmp	r3, #0
 802b48c:	d10b      	bne.n	802b4a6 <USB_HC_StartXfer+0x86>
 802b48e:	68bb      	ldr	r3, [r7, #8]
 802b490:	795b      	ldrb	r3, [r3, #5]
 802b492:	2b01      	cmp	r3, #1
 802b494:	d107      	bne.n	802b4a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802b496:	68bb      	ldr	r3, [r7, #8]
 802b498:	785b      	ldrb	r3, [r3, #1]
 802b49a:	4619      	mov	r1, r3
 802b49c:	68f8      	ldr	r0, [r7, #12]
 802b49e:	f000 fa0f 	bl	802b8c0 <USB_DoPing>
      return HAL_OK;
 802b4a2:	2300      	movs	r3, #0
 802b4a4:	e0f8      	b.n	802b698 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802b4a6:	68bb      	ldr	r3, [r7, #8]
 802b4a8:	695b      	ldr	r3, [r3, #20]
 802b4aa:	2b00      	cmp	r3, #0
 802b4ac:	d018      	beq.n	802b4e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802b4ae:	68bb      	ldr	r3, [r7, #8]
 802b4b0:	695b      	ldr	r3, [r3, #20]
 802b4b2:	68ba      	ldr	r2, [r7, #8]
 802b4b4:	8912      	ldrh	r2, [r2, #8]
 802b4b6:	4413      	add	r3, r2
 802b4b8:	3b01      	subs	r3, #1
 802b4ba:	68ba      	ldr	r2, [r7, #8]
 802b4bc:	8912      	ldrh	r2, [r2, #8]
 802b4be:	fbb3 f3f2 	udiv	r3, r3, r2
 802b4c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802b4c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b4c6:	8b7b      	ldrh	r3, [r7, #26]
 802b4c8:	429a      	cmp	r2, r3
 802b4ca:	d90b      	bls.n	802b4e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802b4cc:	8b7b      	ldrh	r3, [r7, #26]
 802b4ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b4d2:	68ba      	ldr	r2, [r7, #8]
 802b4d4:	8912      	ldrh	r2, [r2, #8]
 802b4d6:	fb03 f202 	mul.w	r2, r3, r2
 802b4da:	68bb      	ldr	r3, [r7, #8]
 802b4dc:	611a      	str	r2, [r3, #16]
 802b4de:	e001      	b.n	802b4e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802b4e0:	2301      	movs	r3, #1
 802b4e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802b4e4:	68bb      	ldr	r3, [r7, #8]
 802b4e6:	78db      	ldrb	r3, [r3, #3]
 802b4e8:	2b00      	cmp	r3, #0
 802b4ea:	d007      	beq.n	802b4fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b4ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b4ee:	68ba      	ldr	r2, [r7, #8]
 802b4f0:	8912      	ldrh	r2, [r2, #8]
 802b4f2:	fb03 f202 	mul.w	r2, r3, r2
 802b4f6:	68bb      	ldr	r3, [r7, #8]
 802b4f8:	611a      	str	r2, [r3, #16]
 802b4fa:	e003      	b.n	802b504 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802b4fc:	68bb      	ldr	r3, [r7, #8]
 802b4fe:	695a      	ldr	r2, [r3, #20]
 802b500:	68bb      	ldr	r3, [r7, #8]
 802b502:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b504:	68bb      	ldr	r3, [r7, #8]
 802b506:	691b      	ldr	r3, [r3, #16]
 802b508:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b50c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b50e:	04d9      	lsls	r1, r3, #19
 802b510:	4b63      	ldr	r3, [pc, #396]	; (802b6a0 <USB_HC_StartXfer+0x280>)
 802b512:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b514:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802b516:	68bb      	ldr	r3, [r7, #8]
 802b518:	7a9b      	ldrb	r3, [r3, #10]
 802b51a:	075b      	lsls	r3, r3, #29
 802b51c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b520:	69f9      	ldr	r1, [r7, #28]
 802b522:	0148      	lsls	r0, r1, #5
 802b524:	6a39      	ldr	r1, [r7, #32]
 802b526:	4401      	add	r1, r0
 802b528:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b52c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b52e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802b530:	79fb      	ldrb	r3, [r7, #7]
 802b532:	2b00      	cmp	r3, #0
 802b534:	d009      	beq.n	802b54a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802b536:	68bb      	ldr	r3, [r7, #8]
 802b538:	68d9      	ldr	r1, [r3, #12]
 802b53a:	69fb      	ldr	r3, [r7, #28]
 802b53c:	015a      	lsls	r2, r3, #5
 802b53e:	6a3b      	ldr	r3, [r7, #32]
 802b540:	4413      	add	r3, r2
 802b542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b546:	460a      	mov	r2, r1
 802b548:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802b54a:	6a3b      	ldr	r3, [r7, #32]
 802b54c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b550:	689b      	ldr	r3, [r3, #8]
 802b552:	f003 0301 	and.w	r3, r3, #1
 802b556:	2b00      	cmp	r3, #0
 802b558:	bf0c      	ite	eq
 802b55a:	2301      	moveq	r3, #1
 802b55c:	2300      	movne	r3, #0
 802b55e:	b2db      	uxtb	r3, r3
 802b560:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802b562:	69fb      	ldr	r3, [r7, #28]
 802b564:	015a      	lsls	r2, r3, #5
 802b566:	6a3b      	ldr	r3, [r7, #32]
 802b568:	4413      	add	r3, r2
 802b56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b56e:	681b      	ldr	r3, [r3, #0]
 802b570:	69fa      	ldr	r2, [r7, #28]
 802b572:	0151      	lsls	r1, r2, #5
 802b574:	6a3a      	ldr	r2, [r7, #32]
 802b576:	440a      	add	r2, r1
 802b578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b57c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b580:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802b582:	69fb      	ldr	r3, [r7, #28]
 802b584:	015a      	lsls	r2, r3, #5
 802b586:	6a3b      	ldr	r3, [r7, #32]
 802b588:	4413      	add	r3, r2
 802b58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b58e:	681a      	ldr	r2, [r3, #0]
 802b590:	7e7b      	ldrb	r3, [r7, #25]
 802b592:	075b      	lsls	r3, r3, #29
 802b594:	69f9      	ldr	r1, [r7, #28]
 802b596:	0148      	lsls	r0, r1, #5
 802b598:	6a39      	ldr	r1, [r7, #32]
 802b59a:	4401      	add	r1, r0
 802b59c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802b5a0:	4313      	orrs	r3, r2
 802b5a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802b5a4:	69fb      	ldr	r3, [r7, #28]
 802b5a6:	015a      	lsls	r2, r3, #5
 802b5a8:	6a3b      	ldr	r3, [r7, #32]
 802b5aa:	4413      	add	r3, r2
 802b5ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5b0:	681b      	ldr	r3, [r3, #0]
 802b5b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b5b4:	693b      	ldr	r3, [r7, #16]
 802b5b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b5ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802b5bc:	68bb      	ldr	r3, [r7, #8]
 802b5be:	78db      	ldrb	r3, [r3, #3]
 802b5c0:	2b00      	cmp	r3, #0
 802b5c2:	d004      	beq.n	802b5ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802b5c4:	693b      	ldr	r3, [r7, #16]
 802b5c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b5ca:	613b      	str	r3, [r7, #16]
 802b5cc:	e003      	b.n	802b5d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802b5ce:	693b      	ldr	r3, [r7, #16]
 802b5d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b5d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b5d6:	693b      	ldr	r3, [r7, #16]
 802b5d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b5dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802b5de:	69fb      	ldr	r3, [r7, #28]
 802b5e0:	015a      	lsls	r2, r3, #5
 802b5e2:	6a3b      	ldr	r3, [r7, #32]
 802b5e4:	4413      	add	r3, r2
 802b5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5ea:	461a      	mov	r2, r3
 802b5ec:	693b      	ldr	r3, [r7, #16]
 802b5ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802b5f0:	79fb      	ldrb	r3, [r7, #7]
 802b5f2:	2b00      	cmp	r3, #0
 802b5f4:	d001      	beq.n	802b5fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802b5f6:	2300      	movs	r3, #0
 802b5f8:	e04e      	b.n	802b698 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802b5fa:	68bb      	ldr	r3, [r7, #8]
 802b5fc:	78db      	ldrb	r3, [r3, #3]
 802b5fe:	2b00      	cmp	r3, #0
 802b600:	d149      	bne.n	802b696 <USB_HC_StartXfer+0x276>
 802b602:	68bb      	ldr	r3, [r7, #8]
 802b604:	695b      	ldr	r3, [r3, #20]
 802b606:	2b00      	cmp	r3, #0
 802b608:	d045      	beq.n	802b696 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802b60a:	68bb      	ldr	r3, [r7, #8]
 802b60c:	79db      	ldrb	r3, [r3, #7]
 802b60e:	2b03      	cmp	r3, #3
 802b610:	d830      	bhi.n	802b674 <USB_HC_StartXfer+0x254>
 802b612:	a201      	add	r2, pc, #4	; (adr r2, 802b618 <USB_HC_StartXfer+0x1f8>)
 802b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b618:	0802b629 	.word	0x0802b629
 802b61c:	0802b64d 	.word	0x0802b64d
 802b620:	0802b629 	.word	0x0802b629
 802b624:	0802b64d 	.word	0x0802b64d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b628:	68bb      	ldr	r3, [r7, #8]
 802b62a:	695b      	ldr	r3, [r3, #20]
 802b62c:	3303      	adds	r3, #3
 802b62e:	089b      	lsrs	r3, r3, #2
 802b630:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802b632:	8afa      	ldrh	r2, [r7, #22]
 802b634:	68fb      	ldr	r3, [r7, #12]
 802b636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b638:	b29b      	uxth	r3, r3
 802b63a:	429a      	cmp	r2, r3
 802b63c:	d91c      	bls.n	802b678 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802b63e:	68fb      	ldr	r3, [r7, #12]
 802b640:	699b      	ldr	r3, [r3, #24]
 802b642:	f043 0220 	orr.w	r2, r3, #32
 802b646:	68fb      	ldr	r3, [r7, #12]
 802b648:	619a      	str	r2, [r3, #24]
        }
        break;
 802b64a:	e015      	b.n	802b678 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b64c:	68bb      	ldr	r3, [r7, #8]
 802b64e:	695b      	ldr	r3, [r3, #20]
 802b650:	3303      	adds	r3, #3
 802b652:	089b      	lsrs	r3, r3, #2
 802b654:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802b656:	8afa      	ldrh	r2, [r7, #22]
 802b658:	6a3b      	ldr	r3, [r7, #32]
 802b65a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b65e:	691b      	ldr	r3, [r3, #16]
 802b660:	b29b      	uxth	r3, r3
 802b662:	429a      	cmp	r2, r3
 802b664:	d90a      	bls.n	802b67c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802b666:	68fb      	ldr	r3, [r7, #12]
 802b668:	699b      	ldr	r3, [r3, #24]
 802b66a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802b66e:	68fb      	ldr	r3, [r7, #12]
 802b670:	619a      	str	r2, [r3, #24]
        }
        break;
 802b672:	e003      	b.n	802b67c <USB_HC_StartXfer+0x25c>

      default:
        break;
 802b674:	bf00      	nop
 802b676:	e002      	b.n	802b67e <USB_HC_StartXfer+0x25e>
        break;
 802b678:	bf00      	nop
 802b67a:	e000      	b.n	802b67e <USB_HC_StartXfer+0x25e>
        break;
 802b67c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802b67e:	68bb      	ldr	r3, [r7, #8]
 802b680:	68d9      	ldr	r1, [r3, #12]
 802b682:	68bb      	ldr	r3, [r7, #8]
 802b684:	785a      	ldrb	r2, [r3, #1]
 802b686:	68bb      	ldr	r3, [r7, #8]
 802b688:	695b      	ldr	r3, [r3, #20]
 802b68a:	b29b      	uxth	r3, r3
 802b68c:	2000      	movs	r0, #0
 802b68e:	9000      	str	r0, [sp, #0]
 802b690:	68f8      	ldr	r0, [r7, #12]
 802b692:	f7ff fb31 	bl	802acf8 <USB_WritePacket>
  }

  return HAL_OK;
 802b696:	2300      	movs	r3, #0
}
 802b698:	4618      	mov	r0, r3
 802b69a:	3728      	adds	r7, #40	; 0x28
 802b69c:	46bd      	mov	sp, r7
 802b69e:	bd80      	pop	{r7, pc}
 802b6a0:	1ff80000 	.word	0x1ff80000

0802b6a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802b6a4:	b480      	push	{r7}
 802b6a6:	b085      	sub	sp, #20
 802b6a8:	af00      	add	r7, sp, #0
 802b6aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6ac:	687b      	ldr	r3, [r7, #4]
 802b6ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802b6b0:	68fb      	ldr	r3, [r7, #12]
 802b6b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b6b6:	695b      	ldr	r3, [r3, #20]
 802b6b8:	b29b      	uxth	r3, r3
}
 802b6ba:	4618      	mov	r0, r3
 802b6bc:	3714      	adds	r7, #20
 802b6be:	46bd      	mov	sp, r7
 802b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6c4:	4770      	bx	lr

0802b6c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802b6c6:	b480      	push	{r7}
 802b6c8:	b089      	sub	sp, #36	; 0x24
 802b6ca:	af00      	add	r7, sp, #0
 802b6cc:	6078      	str	r0, [r7, #4]
 802b6ce:	460b      	mov	r3, r1
 802b6d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6d2:	687b      	ldr	r3, [r7, #4]
 802b6d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802b6d6:	78fb      	ldrb	r3, [r7, #3]
 802b6d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802b6da:	2300      	movs	r3, #0
 802b6dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802b6de:	69bb      	ldr	r3, [r7, #24]
 802b6e0:	015a      	lsls	r2, r3, #5
 802b6e2:	69fb      	ldr	r3, [r7, #28]
 802b6e4:	4413      	add	r3, r2
 802b6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6ea:	681b      	ldr	r3, [r3, #0]
 802b6ec:	0c9b      	lsrs	r3, r3, #18
 802b6ee:	f003 0303 	and.w	r3, r3, #3
 802b6f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802b6f4:	69bb      	ldr	r3, [r7, #24]
 802b6f6:	015a      	lsls	r2, r3, #5
 802b6f8:	69fb      	ldr	r3, [r7, #28]
 802b6fa:	4413      	add	r3, r2
 802b6fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b700:	681b      	ldr	r3, [r3, #0]
 802b702:	0fdb      	lsrs	r3, r3, #31
 802b704:	f003 0301 	and.w	r3, r3, #1
 802b708:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802b70a:	687b      	ldr	r3, [r7, #4]
 802b70c:	689b      	ldr	r3, [r3, #8]
 802b70e:	f003 0320 	and.w	r3, r3, #32
 802b712:	2b20      	cmp	r3, #32
 802b714:	d104      	bne.n	802b720 <USB_HC_Halt+0x5a>
 802b716:	693b      	ldr	r3, [r7, #16]
 802b718:	2b00      	cmp	r3, #0
 802b71a:	d101      	bne.n	802b720 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802b71c:	2300      	movs	r3, #0
 802b71e:	e0c8      	b.n	802b8b2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802b720:	697b      	ldr	r3, [r7, #20]
 802b722:	2b00      	cmp	r3, #0
 802b724:	d002      	beq.n	802b72c <USB_HC_Halt+0x66>
 802b726:	697b      	ldr	r3, [r7, #20]
 802b728:	2b02      	cmp	r3, #2
 802b72a:	d163      	bne.n	802b7f4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b72c:	69bb      	ldr	r3, [r7, #24]
 802b72e:	015a      	lsls	r2, r3, #5
 802b730:	69fb      	ldr	r3, [r7, #28]
 802b732:	4413      	add	r3, r2
 802b734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b738:	681b      	ldr	r3, [r3, #0]
 802b73a:	69ba      	ldr	r2, [r7, #24]
 802b73c:	0151      	lsls	r1, r2, #5
 802b73e:	69fa      	ldr	r2, [r7, #28]
 802b740:	440a      	add	r2, r1
 802b742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b74a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b74c:	687b      	ldr	r3, [r7, #4]
 802b74e:	689b      	ldr	r3, [r3, #8]
 802b750:	f003 0320 	and.w	r3, r3, #32
 802b754:	2b00      	cmp	r3, #0
 802b756:	f040 80ab 	bne.w	802b8b0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802b75a:	687b      	ldr	r3, [r7, #4]
 802b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b75e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b762:	2b00      	cmp	r3, #0
 802b764:	d133      	bne.n	802b7ce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b766:	69bb      	ldr	r3, [r7, #24]
 802b768:	015a      	lsls	r2, r3, #5
 802b76a:	69fb      	ldr	r3, [r7, #28]
 802b76c:	4413      	add	r3, r2
 802b76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b772:	681b      	ldr	r3, [r3, #0]
 802b774:	69ba      	ldr	r2, [r7, #24]
 802b776:	0151      	lsls	r1, r2, #5
 802b778:	69fa      	ldr	r2, [r7, #28]
 802b77a:	440a      	add	r2, r1
 802b77c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b784:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b786:	69bb      	ldr	r3, [r7, #24]
 802b788:	015a      	lsls	r2, r3, #5
 802b78a:	69fb      	ldr	r3, [r7, #28]
 802b78c:	4413      	add	r3, r2
 802b78e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b792:	681b      	ldr	r3, [r3, #0]
 802b794:	69ba      	ldr	r2, [r7, #24]
 802b796:	0151      	lsls	r1, r2, #5
 802b798:	69fa      	ldr	r2, [r7, #28]
 802b79a:	440a      	add	r2, r1
 802b79c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b7a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7a4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802b7a6:	68fb      	ldr	r3, [r7, #12]
 802b7a8:	3301      	adds	r3, #1
 802b7aa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802b7ac:	68fb      	ldr	r3, [r7, #12]
 802b7ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b7b2:	d81d      	bhi.n	802b7f0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b7b4:	69bb      	ldr	r3, [r7, #24]
 802b7b6:	015a      	lsls	r2, r3, #5
 802b7b8:	69fb      	ldr	r3, [r7, #28]
 802b7ba:	4413      	add	r3, r2
 802b7bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7c0:	681b      	ldr	r3, [r3, #0]
 802b7c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b7c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b7ca:	d0ec      	beq.n	802b7a6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7cc:	e070      	b.n	802b8b0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b7ce:	69bb      	ldr	r3, [r7, #24]
 802b7d0:	015a      	lsls	r2, r3, #5
 802b7d2:	69fb      	ldr	r3, [r7, #28]
 802b7d4:	4413      	add	r3, r2
 802b7d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7da:	681b      	ldr	r3, [r3, #0]
 802b7dc:	69ba      	ldr	r2, [r7, #24]
 802b7de:	0151      	lsls	r1, r2, #5
 802b7e0:	69fa      	ldr	r2, [r7, #28]
 802b7e2:	440a      	add	r2, r1
 802b7e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b7e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7ee:	e05f      	b.n	802b8b0 <USB_HC_Halt+0x1ea>
            break;
 802b7f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7f2:	e05d      	b.n	802b8b0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b7f4:	69bb      	ldr	r3, [r7, #24]
 802b7f6:	015a      	lsls	r2, r3, #5
 802b7f8:	69fb      	ldr	r3, [r7, #28]
 802b7fa:	4413      	add	r3, r2
 802b7fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b800:	681b      	ldr	r3, [r3, #0]
 802b802:	69ba      	ldr	r2, [r7, #24]
 802b804:	0151      	lsls	r1, r2, #5
 802b806:	69fa      	ldr	r2, [r7, #28]
 802b808:	440a      	add	r2, r1
 802b80a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b80e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b812:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802b814:	69fb      	ldr	r3, [r7, #28]
 802b816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b81a:	691b      	ldr	r3, [r3, #16]
 802b81c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b820:	2b00      	cmp	r3, #0
 802b822:	d133      	bne.n	802b88c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b824:	69bb      	ldr	r3, [r7, #24]
 802b826:	015a      	lsls	r2, r3, #5
 802b828:	69fb      	ldr	r3, [r7, #28]
 802b82a:	4413      	add	r3, r2
 802b82c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b830:	681b      	ldr	r3, [r3, #0]
 802b832:	69ba      	ldr	r2, [r7, #24]
 802b834:	0151      	lsls	r1, r2, #5
 802b836:	69fa      	ldr	r2, [r7, #28]
 802b838:	440a      	add	r2, r1
 802b83a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b83e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b842:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b844:	69bb      	ldr	r3, [r7, #24]
 802b846:	015a      	lsls	r2, r3, #5
 802b848:	69fb      	ldr	r3, [r7, #28]
 802b84a:	4413      	add	r3, r2
 802b84c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b850:	681b      	ldr	r3, [r3, #0]
 802b852:	69ba      	ldr	r2, [r7, #24]
 802b854:	0151      	lsls	r1, r2, #5
 802b856:	69fa      	ldr	r2, [r7, #28]
 802b858:	440a      	add	r2, r1
 802b85a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b85e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b862:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802b864:	68fb      	ldr	r3, [r7, #12]
 802b866:	3301      	adds	r3, #1
 802b868:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802b86a:	68fb      	ldr	r3, [r7, #12]
 802b86c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b870:	d81d      	bhi.n	802b8ae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b872:	69bb      	ldr	r3, [r7, #24]
 802b874:	015a      	lsls	r2, r3, #5
 802b876:	69fb      	ldr	r3, [r7, #28]
 802b878:	4413      	add	r3, r2
 802b87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b87e:	681b      	ldr	r3, [r3, #0]
 802b880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b888:	d0ec      	beq.n	802b864 <USB_HC_Halt+0x19e>
 802b88a:	e011      	b.n	802b8b0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b88c:	69bb      	ldr	r3, [r7, #24]
 802b88e:	015a      	lsls	r2, r3, #5
 802b890:	69fb      	ldr	r3, [r7, #28]
 802b892:	4413      	add	r3, r2
 802b894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b898:	681b      	ldr	r3, [r3, #0]
 802b89a:	69ba      	ldr	r2, [r7, #24]
 802b89c:	0151      	lsls	r1, r2, #5
 802b89e:	69fa      	ldr	r2, [r7, #28]
 802b8a0:	440a      	add	r2, r1
 802b8a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b8a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b8aa:	6013      	str	r3, [r2, #0]
 802b8ac:	e000      	b.n	802b8b0 <USB_HC_Halt+0x1ea>
          break;
 802b8ae:	bf00      	nop
    }
  }

  return HAL_OK;
 802b8b0:	2300      	movs	r3, #0
}
 802b8b2:	4618      	mov	r0, r3
 802b8b4:	3724      	adds	r7, #36	; 0x24
 802b8b6:	46bd      	mov	sp, r7
 802b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8bc:	4770      	bx	lr
	...

0802b8c0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802b8c0:	b480      	push	{r7}
 802b8c2:	b087      	sub	sp, #28
 802b8c4:	af00      	add	r7, sp, #0
 802b8c6:	6078      	str	r0, [r7, #4]
 802b8c8:	460b      	mov	r3, r1
 802b8ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b8cc:	687b      	ldr	r3, [r7, #4]
 802b8ce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802b8d0:	78fb      	ldrb	r3, [r7, #3]
 802b8d2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802b8d4:	2301      	movs	r3, #1
 802b8d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b8d8:	68fb      	ldr	r3, [r7, #12]
 802b8da:	04da      	lsls	r2, r3, #19
 802b8dc:	4b15      	ldr	r3, [pc, #84]	; (802b934 <USB_DoPing+0x74>)
 802b8de:	4013      	ands	r3, r2
 802b8e0:	693a      	ldr	r2, [r7, #16]
 802b8e2:	0151      	lsls	r1, r2, #5
 802b8e4:	697a      	ldr	r2, [r7, #20]
 802b8e6:	440a      	add	r2, r1
 802b8e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b8ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b8f0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802b8f2:	693b      	ldr	r3, [r7, #16]
 802b8f4:	015a      	lsls	r2, r3, #5
 802b8f6:	697b      	ldr	r3, [r7, #20]
 802b8f8:	4413      	add	r3, r2
 802b8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b8fe:	681b      	ldr	r3, [r3, #0]
 802b900:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b902:	68bb      	ldr	r3, [r7, #8]
 802b904:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b908:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b90a:	68bb      	ldr	r3, [r7, #8]
 802b90c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b910:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802b912:	693b      	ldr	r3, [r7, #16]
 802b914:	015a      	lsls	r2, r3, #5
 802b916:	697b      	ldr	r3, [r7, #20]
 802b918:	4413      	add	r3, r2
 802b91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b91e:	461a      	mov	r2, r3
 802b920:	68bb      	ldr	r3, [r7, #8]
 802b922:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802b924:	2300      	movs	r3, #0
}
 802b926:	4618      	mov	r0, r3
 802b928:	371c      	adds	r7, #28
 802b92a:	46bd      	mov	sp, r7
 802b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b930:	4770      	bx	lr
 802b932:	bf00      	nop
 802b934:	1ff80000 	.word	0x1ff80000

0802b938 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802b938:	b580      	push	{r7, lr}
 802b93a:	b088      	sub	sp, #32
 802b93c:	af00      	add	r7, sp, #0
 802b93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802b940:	2300      	movs	r3, #0
 802b942:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b944:	687b      	ldr	r3, [r7, #4]
 802b946:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802b948:	2300      	movs	r3, #0
 802b94a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802b94c:	6878      	ldr	r0, [r7, #4]
 802b94e:	f7ff f911 	bl	802ab74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802b952:	2110      	movs	r1, #16
 802b954:	6878      	ldr	r0, [r7, #4]
 802b956:	f7ff f96b 	bl	802ac30 <USB_FlushTxFifo>
 802b95a:	4603      	mov	r3, r0
 802b95c:	2b00      	cmp	r3, #0
 802b95e:	d001      	beq.n	802b964 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802b960:	2301      	movs	r3, #1
 802b962:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802b964:	6878      	ldr	r0, [r7, #4]
 802b966:	f7ff f997 	bl	802ac98 <USB_FlushRxFifo>
 802b96a:	4603      	mov	r3, r0
 802b96c:	2b00      	cmp	r3, #0
 802b96e:	d001      	beq.n	802b974 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802b970:	2301      	movs	r3, #1
 802b972:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802b974:	2300      	movs	r3, #0
 802b976:	61bb      	str	r3, [r7, #24]
 802b978:	e01f      	b.n	802b9ba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802b97a:	69bb      	ldr	r3, [r7, #24]
 802b97c:	015a      	lsls	r2, r3, #5
 802b97e:	697b      	ldr	r3, [r7, #20]
 802b980:	4413      	add	r3, r2
 802b982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b986:	681b      	ldr	r3, [r3, #0]
 802b988:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802b98a:	693b      	ldr	r3, [r7, #16]
 802b98c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b990:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b992:	693b      	ldr	r3, [r7, #16]
 802b994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b998:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b99a:	693b      	ldr	r3, [r7, #16]
 802b99c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b9a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b9a2:	69bb      	ldr	r3, [r7, #24]
 802b9a4:	015a      	lsls	r2, r3, #5
 802b9a6:	697b      	ldr	r3, [r7, #20]
 802b9a8:	4413      	add	r3, r2
 802b9aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9ae:	461a      	mov	r2, r3
 802b9b0:	693b      	ldr	r3, [r7, #16]
 802b9b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b9b4:	69bb      	ldr	r3, [r7, #24]
 802b9b6:	3301      	adds	r3, #1
 802b9b8:	61bb      	str	r3, [r7, #24]
 802b9ba:	69bb      	ldr	r3, [r7, #24]
 802b9bc:	2b0f      	cmp	r3, #15
 802b9be:	d9dc      	bls.n	802b97a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b9c0:	2300      	movs	r3, #0
 802b9c2:	61bb      	str	r3, [r7, #24]
 802b9c4:	e034      	b.n	802ba30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b9c6:	69bb      	ldr	r3, [r7, #24]
 802b9c8:	015a      	lsls	r2, r3, #5
 802b9ca:	697b      	ldr	r3, [r7, #20]
 802b9cc:	4413      	add	r3, r2
 802b9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9d2:	681b      	ldr	r3, [r3, #0]
 802b9d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b9d6:	693b      	ldr	r3, [r7, #16]
 802b9d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b9dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b9de:	693b      	ldr	r3, [r7, #16]
 802b9e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b9e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b9e6:	693b      	ldr	r3, [r7, #16]
 802b9e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b9ec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b9ee:	69bb      	ldr	r3, [r7, #24]
 802b9f0:	015a      	lsls	r2, r3, #5
 802b9f2:	697b      	ldr	r3, [r7, #20]
 802b9f4:	4413      	add	r3, r2
 802b9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9fa:	461a      	mov	r2, r3
 802b9fc:	693b      	ldr	r3, [r7, #16]
 802b9fe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802ba00:	68fb      	ldr	r3, [r7, #12]
 802ba02:	3301      	adds	r3, #1
 802ba04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802ba06:	68fb      	ldr	r3, [r7, #12]
 802ba08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ba0c:	d80c      	bhi.n	802ba28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ba0e:	69bb      	ldr	r3, [r7, #24]
 802ba10:	015a      	lsls	r2, r3, #5
 802ba12:	697b      	ldr	r3, [r7, #20]
 802ba14:	4413      	add	r3, r2
 802ba16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ba1a:	681b      	ldr	r3, [r3, #0]
 802ba1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ba20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ba24:	d0ec      	beq.n	802ba00 <USB_StopHost+0xc8>
 802ba26:	e000      	b.n	802ba2a <USB_StopHost+0xf2>
        break;
 802ba28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802ba2a:	69bb      	ldr	r3, [r7, #24]
 802ba2c:	3301      	adds	r3, #1
 802ba2e:	61bb      	str	r3, [r7, #24]
 802ba30:	69bb      	ldr	r3, [r7, #24]
 802ba32:	2b0f      	cmp	r3, #15
 802ba34:	d9c7      	bls.n	802b9c6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802ba36:	697b      	ldr	r3, [r7, #20]
 802ba38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ba3c:	461a      	mov	r2, r3
 802ba3e:	f04f 33ff 	mov.w	r3, #4294967295
 802ba42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802ba44:	687b      	ldr	r3, [r7, #4]
 802ba46:	f04f 32ff 	mov.w	r2, #4294967295
 802ba4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802ba4c:	6878      	ldr	r0, [r7, #4]
 802ba4e:	f7ff f880 	bl	802ab52 <USB_EnableGlobalInt>

  return ret;
 802ba52:	7ffb      	ldrb	r3, [r7, #31]
}
 802ba54:	4618      	mov	r0, r3
 802ba56:	3720      	adds	r7, #32
 802ba58:	46bd      	mov	sp, r7
 802ba5a:	bd80      	pop	{r7, pc}

0802ba5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802ba5c:	b590      	push	{r4, r7, lr}
 802ba5e:	b089      	sub	sp, #36	; 0x24
 802ba60:	af04      	add	r7, sp, #16
 802ba62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802ba64:	2301      	movs	r3, #1
 802ba66:	2202      	movs	r2, #2
 802ba68:	2102      	movs	r1, #2
 802ba6a:	6878      	ldr	r0, [r7, #4]
 802ba6c:	f000 fc66 	bl	802c33c <USBH_FindInterface>
 802ba70:	4603      	mov	r3, r0
 802ba72:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ba74:	7bfb      	ldrb	r3, [r7, #15]
 802ba76:	2bff      	cmp	r3, #255	; 0xff
 802ba78:	d002      	beq.n	802ba80 <USBH_CDC_InterfaceInit+0x24>
 802ba7a:	7bfb      	ldrb	r3, [r7, #15]
 802ba7c:	2b01      	cmp	r3, #1
 802ba7e:	d901      	bls.n	802ba84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802ba80:	2302      	movs	r3, #2
 802ba82:	e13d      	b.n	802bd00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802ba84:	7bfb      	ldrb	r3, [r7, #15]
 802ba86:	4619      	mov	r1, r3
 802ba88:	6878      	ldr	r0, [r7, #4]
 802ba8a:	f000 fc3b 	bl	802c304 <USBH_SelectInterface>
 802ba8e:	4603      	mov	r3, r0
 802ba90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802ba92:	7bbb      	ldrb	r3, [r7, #14]
 802ba94:	2b00      	cmp	r3, #0
 802ba96:	d001      	beq.n	802ba9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802ba98:	2302      	movs	r3, #2
 802ba9a:	e131      	b.n	802bd00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802ba9c:	687b      	ldr	r3, [r7, #4]
 802ba9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802baa2:	2050      	movs	r0, #80	; 0x50
 802baa4:	f002 fb00 	bl	802e0a8 <malloc>
 802baa8:	4603      	mov	r3, r0
 802baaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802baac:	687b      	ldr	r3, [r7, #4]
 802baae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bab2:	69db      	ldr	r3, [r3, #28]
 802bab4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802bab6:	68bb      	ldr	r3, [r7, #8]
 802bab8:	2b00      	cmp	r3, #0
 802baba:	d101      	bne.n	802bac0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802babc:	2302      	movs	r3, #2
 802babe:	e11f      	b.n	802bd00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802bac0:	2250      	movs	r2, #80	; 0x50
 802bac2:	2100      	movs	r1, #0
 802bac4:	68b8      	ldr	r0, [r7, #8]
 802bac6:	f002 faff 	bl	802e0c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802baca:	7bfb      	ldrb	r3, [r7, #15]
 802bacc:	687a      	ldr	r2, [r7, #4]
 802bace:	211a      	movs	r1, #26
 802bad0:	fb01 f303 	mul.w	r3, r1, r3
 802bad4:	4413      	add	r3, r2
 802bad6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bada:	781b      	ldrb	r3, [r3, #0]
 802badc:	b25b      	sxtb	r3, r3
 802bade:	2b00      	cmp	r3, #0
 802bae0:	da15      	bge.n	802bb0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bae2:	7bfb      	ldrb	r3, [r7, #15]
 802bae4:	687a      	ldr	r2, [r7, #4]
 802bae6:	211a      	movs	r1, #26
 802bae8:	fb01 f303 	mul.w	r3, r1, r3
 802baec:	4413      	add	r3, r2
 802baee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802baf2:	781a      	ldrb	r2, [r3, #0]
 802baf4:	68bb      	ldr	r3, [r7, #8]
 802baf6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802baf8:	7bfb      	ldrb	r3, [r7, #15]
 802bafa:	687a      	ldr	r2, [r7, #4]
 802bafc:	211a      	movs	r1, #26
 802bafe:	fb01 f303 	mul.w	r3, r1, r3
 802bb02:	4413      	add	r3, r2
 802bb04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bb08:	881a      	ldrh	r2, [r3, #0]
 802bb0a:	68bb      	ldr	r3, [r7, #8]
 802bb0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802bb0e:	68bb      	ldr	r3, [r7, #8]
 802bb10:	785b      	ldrb	r3, [r3, #1]
 802bb12:	4619      	mov	r1, r3
 802bb14:	6878      	ldr	r0, [r7, #4]
 802bb16:	f001 ff2c 	bl	802d972 <USBH_AllocPipe>
 802bb1a:	4603      	mov	r3, r0
 802bb1c:	461a      	mov	r2, r3
 802bb1e:	68bb      	ldr	r3, [r7, #8]
 802bb20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802bb22:	68bb      	ldr	r3, [r7, #8]
 802bb24:	7819      	ldrb	r1, [r3, #0]
 802bb26:	68bb      	ldr	r3, [r7, #8]
 802bb28:	7858      	ldrb	r0, [r3, #1]
 802bb2a:	687b      	ldr	r3, [r7, #4]
 802bb2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bb30:	687b      	ldr	r3, [r7, #4]
 802bb32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bb36:	68ba      	ldr	r2, [r7, #8]
 802bb38:	8952      	ldrh	r2, [r2, #10]
 802bb3a:	9202      	str	r2, [sp, #8]
 802bb3c:	2203      	movs	r2, #3
 802bb3e:	9201      	str	r2, [sp, #4]
 802bb40:	9300      	str	r3, [sp, #0]
 802bb42:	4623      	mov	r3, r4
 802bb44:	4602      	mov	r2, r0
 802bb46:	6878      	ldr	r0, [r7, #4]
 802bb48:	f001 fee4 	bl	802d914 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802bb4c:	68bb      	ldr	r3, [r7, #8]
 802bb4e:	781b      	ldrb	r3, [r3, #0]
 802bb50:	2200      	movs	r2, #0
 802bb52:	4619      	mov	r1, r3
 802bb54:	6878      	ldr	r0, [r7, #4]
 802bb56:	f002 f9f9 	bl	802df4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802bb5a:	2300      	movs	r3, #0
 802bb5c:	2200      	movs	r2, #0
 802bb5e:	210a      	movs	r1, #10
 802bb60:	6878      	ldr	r0, [r7, #4]
 802bb62:	f000 fbeb 	bl	802c33c <USBH_FindInterface>
 802bb66:	4603      	mov	r3, r0
 802bb68:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802bb6a:	7bfb      	ldrb	r3, [r7, #15]
 802bb6c:	2bff      	cmp	r3, #255	; 0xff
 802bb6e:	d002      	beq.n	802bb76 <USBH_CDC_InterfaceInit+0x11a>
 802bb70:	7bfb      	ldrb	r3, [r7, #15]
 802bb72:	2b01      	cmp	r3, #1
 802bb74:	d901      	bls.n	802bb7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802bb76:	2302      	movs	r3, #2
 802bb78:	e0c2      	b.n	802bd00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802bb7a:	7bfb      	ldrb	r3, [r7, #15]
 802bb7c:	687a      	ldr	r2, [r7, #4]
 802bb7e:	211a      	movs	r1, #26
 802bb80:	fb01 f303 	mul.w	r3, r1, r3
 802bb84:	4413      	add	r3, r2
 802bb86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bb8a:	781b      	ldrb	r3, [r3, #0]
 802bb8c:	b25b      	sxtb	r3, r3
 802bb8e:	2b00      	cmp	r3, #0
 802bb90:	da16      	bge.n	802bbc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bb92:	7bfb      	ldrb	r3, [r7, #15]
 802bb94:	687a      	ldr	r2, [r7, #4]
 802bb96:	211a      	movs	r1, #26
 802bb98:	fb01 f303 	mul.w	r3, r1, r3
 802bb9c:	4413      	add	r3, r2
 802bb9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bba2:	781a      	ldrb	r2, [r3, #0]
 802bba4:	68bb      	ldr	r3, [r7, #8]
 802bba6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bba8:	7bfb      	ldrb	r3, [r7, #15]
 802bbaa:	687a      	ldr	r2, [r7, #4]
 802bbac:	211a      	movs	r1, #26
 802bbae:	fb01 f303 	mul.w	r3, r1, r3
 802bbb2:	4413      	add	r3, r2
 802bbb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbb8:	881a      	ldrh	r2, [r3, #0]
 802bbba:	68bb      	ldr	r3, [r7, #8]
 802bbbc:	835a      	strh	r2, [r3, #26]
 802bbbe:	e015      	b.n	802bbec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bbc0:	7bfb      	ldrb	r3, [r7, #15]
 802bbc2:	687a      	ldr	r2, [r7, #4]
 802bbc4:	211a      	movs	r1, #26
 802bbc6:	fb01 f303 	mul.w	r3, r1, r3
 802bbca:	4413      	add	r3, r2
 802bbcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bbd0:	781a      	ldrb	r2, [r3, #0]
 802bbd2:	68bb      	ldr	r3, [r7, #8]
 802bbd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bbd6:	7bfb      	ldrb	r3, [r7, #15]
 802bbd8:	687a      	ldr	r2, [r7, #4]
 802bbda:	211a      	movs	r1, #26
 802bbdc:	fb01 f303 	mul.w	r3, r1, r3
 802bbe0:	4413      	add	r3, r2
 802bbe2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbe6:	881a      	ldrh	r2, [r3, #0]
 802bbe8:	68bb      	ldr	r3, [r7, #8]
 802bbea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802bbec:	7bfb      	ldrb	r3, [r7, #15]
 802bbee:	687a      	ldr	r2, [r7, #4]
 802bbf0:	211a      	movs	r1, #26
 802bbf2:	fb01 f303 	mul.w	r3, r1, r3
 802bbf6:	4413      	add	r3, r2
 802bbf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bbfc:	781b      	ldrb	r3, [r3, #0]
 802bbfe:	b25b      	sxtb	r3, r3
 802bc00:	2b00      	cmp	r3, #0
 802bc02:	da16      	bge.n	802bc32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc04:	7bfb      	ldrb	r3, [r7, #15]
 802bc06:	687a      	ldr	r2, [r7, #4]
 802bc08:	211a      	movs	r1, #26
 802bc0a:	fb01 f303 	mul.w	r3, r1, r3
 802bc0e:	4413      	add	r3, r2
 802bc10:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc14:	781a      	ldrb	r2, [r3, #0]
 802bc16:	68bb      	ldr	r3, [r7, #8]
 802bc18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc1a:	7bfb      	ldrb	r3, [r7, #15]
 802bc1c:	687a      	ldr	r2, [r7, #4]
 802bc1e:	211a      	movs	r1, #26
 802bc20:	fb01 f303 	mul.w	r3, r1, r3
 802bc24:	4413      	add	r3, r2
 802bc26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc2a:	881a      	ldrh	r2, [r3, #0]
 802bc2c:	68bb      	ldr	r3, [r7, #8]
 802bc2e:	835a      	strh	r2, [r3, #26]
 802bc30:	e015      	b.n	802bc5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc32:	7bfb      	ldrb	r3, [r7, #15]
 802bc34:	687a      	ldr	r2, [r7, #4]
 802bc36:	211a      	movs	r1, #26
 802bc38:	fb01 f303 	mul.w	r3, r1, r3
 802bc3c:	4413      	add	r3, r2
 802bc3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc42:	781a      	ldrb	r2, [r3, #0]
 802bc44:	68bb      	ldr	r3, [r7, #8]
 802bc46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc48:	7bfb      	ldrb	r3, [r7, #15]
 802bc4a:	687a      	ldr	r2, [r7, #4]
 802bc4c:	211a      	movs	r1, #26
 802bc4e:	fb01 f303 	mul.w	r3, r1, r3
 802bc52:	4413      	add	r3, r2
 802bc54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc58:	881a      	ldrh	r2, [r3, #0]
 802bc5a:	68bb      	ldr	r3, [r7, #8]
 802bc5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802bc5e:	68bb      	ldr	r3, [r7, #8]
 802bc60:	7b9b      	ldrb	r3, [r3, #14]
 802bc62:	4619      	mov	r1, r3
 802bc64:	6878      	ldr	r0, [r7, #4]
 802bc66:	f001 fe84 	bl	802d972 <USBH_AllocPipe>
 802bc6a:	4603      	mov	r3, r0
 802bc6c:	461a      	mov	r2, r3
 802bc6e:	68bb      	ldr	r3, [r7, #8]
 802bc70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802bc72:	68bb      	ldr	r3, [r7, #8]
 802bc74:	7bdb      	ldrb	r3, [r3, #15]
 802bc76:	4619      	mov	r1, r3
 802bc78:	6878      	ldr	r0, [r7, #4]
 802bc7a:	f001 fe7a 	bl	802d972 <USBH_AllocPipe>
 802bc7e:	4603      	mov	r3, r0
 802bc80:	461a      	mov	r2, r3
 802bc82:	68bb      	ldr	r3, [r7, #8]
 802bc84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802bc86:	68bb      	ldr	r3, [r7, #8]
 802bc88:	7b59      	ldrb	r1, [r3, #13]
 802bc8a:	68bb      	ldr	r3, [r7, #8]
 802bc8c:	7b98      	ldrb	r0, [r3, #14]
 802bc8e:	687b      	ldr	r3, [r7, #4]
 802bc90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bc94:	687b      	ldr	r3, [r7, #4]
 802bc96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bc9a:	68ba      	ldr	r2, [r7, #8]
 802bc9c:	8b12      	ldrh	r2, [r2, #24]
 802bc9e:	9202      	str	r2, [sp, #8]
 802bca0:	2202      	movs	r2, #2
 802bca2:	9201      	str	r2, [sp, #4]
 802bca4:	9300      	str	r3, [sp, #0]
 802bca6:	4623      	mov	r3, r4
 802bca8:	4602      	mov	r2, r0
 802bcaa:	6878      	ldr	r0, [r7, #4]
 802bcac:	f001 fe32 	bl	802d914 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802bcb0:	68bb      	ldr	r3, [r7, #8]
 802bcb2:	7b19      	ldrb	r1, [r3, #12]
 802bcb4:	68bb      	ldr	r3, [r7, #8]
 802bcb6:	7bd8      	ldrb	r0, [r3, #15]
 802bcb8:	687b      	ldr	r3, [r7, #4]
 802bcba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bcbe:	687b      	ldr	r3, [r7, #4]
 802bcc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bcc4:	68ba      	ldr	r2, [r7, #8]
 802bcc6:	8b52      	ldrh	r2, [r2, #26]
 802bcc8:	9202      	str	r2, [sp, #8]
 802bcca:	2202      	movs	r2, #2
 802bccc:	9201      	str	r2, [sp, #4]
 802bcce:	9300      	str	r3, [sp, #0]
 802bcd0:	4623      	mov	r3, r4
 802bcd2:	4602      	mov	r2, r0
 802bcd4:	6878      	ldr	r0, [r7, #4]
 802bcd6:	f001 fe1d 	bl	802d914 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802bcda:	68bb      	ldr	r3, [r7, #8]
 802bcdc:	2200      	movs	r2, #0
 802bcde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802bce2:	68bb      	ldr	r3, [r7, #8]
 802bce4:	7b5b      	ldrb	r3, [r3, #13]
 802bce6:	2200      	movs	r2, #0
 802bce8:	4619      	mov	r1, r3
 802bcea:	6878      	ldr	r0, [r7, #4]
 802bcec:	f002 f92e 	bl	802df4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802bcf0:	68bb      	ldr	r3, [r7, #8]
 802bcf2:	7b1b      	ldrb	r3, [r3, #12]
 802bcf4:	2200      	movs	r2, #0
 802bcf6:	4619      	mov	r1, r3
 802bcf8:	6878      	ldr	r0, [r7, #4]
 802bcfa:	f002 f927 	bl	802df4c <USBH_LL_SetToggle>

  return USBH_OK;
 802bcfe:	2300      	movs	r3, #0
}
 802bd00:	4618      	mov	r0, r3
 802bd02:	3714      	adds	r7, #20
 802bd04:	46bd      	mov	sp, r7
 802bd06:	bd90      	pop	{r4, r7, pc}

0802bd08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802bd08:	b580      	push	{r7, lr}
 802bd0a:	b084      	sub	sp, #16
 802bd0c:	af00      	add	r7, sp, #0
 802bd0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bd10:	687b      	ldr	r3, [r7, #4]
 802bd12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd16:	69db      	ldr	r3, [r3, #28]
 802bd18:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802bd1a:	68fb      	ldr	r3, [r7, #12]
 802bd1c:	781b      	ldrb	r3, [r3, #0]
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	d00e      	beq.n	802bd40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd22:	68fb      	ldr	r3, [r7, #12]
 802bd24:	781b      	ldrb	r3, [r3, #0]
 802bd26:	4619      	mov	r1, r3
 802bd28:	6878      	ldr	r0, [r7, #4]
 802bd2a:	f001 fe12 	bl	802d952 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd2e:	68fb      	ldr	r3, [r7, #12]
 802bd30:	781b      	ldrb	r3, [r3, #0]
 802bd32:	4619      	mov	r1, r3
 802bd34:	6878      	ldr	r0, [r7, #4]
 802bd36:	f001 fe3d 	bl	802d9b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802bd3a:	68fb      	ldr	r3, [r7, #12]
 802bd3c:	2200      	movs	r2, #0
 802bd3e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802bd40:	68fb      	ldr	r3, [r7, #12]
 802bd42:	7b1b      	ldrb	r3, [r3, #12]
 802bd44:	2b00      	cmp	r3, #0
 802bd46:	d00e      	beq.n	802bd66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd48:	68fb      	ldr	r3, [r7, #12]
 802bd4a:	7b1b      	ldrb	r3, [r3, #12]
 802bd4c:	4619      	mov	r1, r3
 802bd4e:	6878      	ldr	r0, [r7, #4]
 802bd50:	f001 fdff 	bl	802d952 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd54:	68fb      	ldr	r3, [r7, #12]
 802bd56:	7b1b      	ldrb	r3, [r3, #12]
 802bd58:	4619      	mov	r1, r3
 802bd5a:	6878      	ldr	r0, [r7, #4]
 802bd5c:	f001 fe2a 	bl	802d9b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802bd60:	68fb      	ldr	r3, [r7, #12]
 802bd62:	2200      	movs	r2, #0
 802bd64:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802bd66:	68fb      	ldr	r3, [r7, #12]
 802bd68:	7b5b      	ldrb	r3, [r3, #13]
 802bd6a:	2b00      	cmp	r3, #0
 802bd6c:	d00e      	beq.n	802bd8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd6e:	68fb      	ldr	r3, [r7, #12]
 802bd70:	7b5b      	ldrb	r3, [r3, #13]
 802bd72:	4619      	mov	r1, r3
 802bd74:	6878      	ldr	r0, [r7, #4]
 802bd76:	f001 fdec 	bl	802d952 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd7a:	68fb      	ldr	r3, [r7, #12]
 802bd7c:	7b5b      	ldrb	r3, [r3, #13]
 802bd7e:	4619      	mov	r1, r3
 802bd80:	6878      	ldr	r0, [r7, #4]
 802bd82:	f001 fe17 	bl	802d9b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802bd86:	68fb      	ldr	r3, [r7, #12]
 802bd88:	2200      	movs	r2, #0
 802bd8a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802bd8c:	687b      	ldr	r3, [r7, #4]
 802bd8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd92:	69db      	ldr	r3, [r3, #28]
 802bd94:	2b00      	cmp	r3, #0
 802bd96:	d00b      	beq.n	802bdb0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802bd98:	687b      	ldr	r3, [r7, #4]
 802bd9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd9e:	69db      	ldr	r3, [r3, #28]
 802bda0:	4618      	mov	r0, r3
 802bda2:	f002 f989 	bl	802e0b8 <free>
    phost->pActiveClass->pData = 0U;
 802bda6:	687b      	ldr	r3, [r7, #4]
 802bda8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdac:	2200      	movs	r2, #0
 802bdae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802bdb0:	2300      	movs	r3, #0
}
 802bdb2:	4618      	mov	r0, r3
 802bdb4:	3710      	adds	r7, #16
 802bdb6:	46bd      	mov	sp, r7
 802bdb8:	bd80      	pop	{r7, pc}

0802bdba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802bdba:	b580      	push	{r7, lr}
 802bdbc:	b084      	sub	sp, #16
 802bdbe:	af00      	add	r7, sp, #0
 802bdc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bdc2:	687b      	ldr	r3, [r7, #4]
 802bdc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdc8:	69db      	ldr	r3, [r3, #28]
 802bdca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802bdcc:	68fb      	ldr	r3, [r7, #12]
 802bdce:	3340      	adds	r3, #64	; 0x40
 802bdd0:	4619      	mov	r1, r3
 802bdd2:	6878      	ldr	r0, [r7, #4]
 802bdd4:	f000 f8b1 	bl	802bf3a <GetLineCoding>
 802bdd8:	4603      	mov	r3, r0
 802bdda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802bddc:	7afb      	ldrb	r3, [r7, #11]
 802bdde:	2b00      	cmp	r3, #0
 802bde0:	d105      	bne.n	802bdee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802bde2:	687b      	ldr	r3, [r7, #4]
 802bde4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bde8:	2102      	movs	r1, #2
 802bdea:	6878      	ldr	r0, [r7, #4]
 802bdec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802bdee:	7afb      	ldrb	r3, [r7, #11]
}
 802bdf0:	4618      	mov	r0, r3
 802bdf2:	3710      	adds	r7, #16
 802bdf4:	46bd      	mov	sp, r7
 802bdf6:	bd80      	pop	{r7, pc}

0802bdf8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802bdf8:	b580      	push	{r7, lr}
 802bdfa:	b084      	sub	sp, #16
 802bdfc:	af00      	add	r7, sp, #0
 802bdfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802be00:	2301      	movs	r3, #1
 802be02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802be04:	2300      	movs	r3, #0
 802be06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802be08:	687b      	ldr	r3, [r7, #4]
 802be0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be0e:	69db      	ldr	r3, [r3, #28]
 802be10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802be12:	68bb      	ldr	r3, [r7, #8]
 802be14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802be18:	2b04      	cmp	r3, #4
 802be1a:	d877      	bhi.n	802bf0c <USBH_CDC_Process+0x114>
 802be1c:	a201      	add	r2, pc, #4	; (adr r2, 802be24 <USBH_CDC_Process+0x2c>)
 802be1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be22:	bf00      	nop
 802be24:	0802be39 	.word	0x0802be39
 802be28:	0802be3f 	.word	0x0802be3f
 802be2c:	0802be6f 	.word	0x0802be6f
 802be30:	0802bee3 	.word	0x0802bee3
 802be34:	0802bef1 	.word	0x0802bef1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802be38:	2300      	movs	r3, #0
 802be3a:	73fb      	strb	r3, [r7, #15]
      break;
 802be3c:	e06d      	b.n	802bf1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802be3e:	68bb      	ldr	r3, [r7, #8]
 802be40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802be42:	4619      	mov	r1, r3
 802be44:	6878      	ldr	r0, [r7, #4]
 802be46:	f000 f897 	bl	802bf78 <SetLineCoding>
 802be4a:	4603      	mov	r3, r0
 802be4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be4e:	7bbb      	ldrb	r3, [r7, #14]
 802be50:	2b00      	cmp	r3, #0
 802be52:	d104      	bne.n	802be5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802be54:	68bb      	ldr	r3, [r7, #8]
 802be56:	2202      	movs	r2, #2
 802be58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802be5c:	e058      	b.n	802bf10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802be5e:	7bbb      	ldrb	r3, [r7, #14]
 802be60:	2b01      	cmp	r3, #1
 802be62:	d055      	beq.n	802bf10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802be64:	68bb      	ldr	r3, [r7, #8]
 802be66:	2204      	movs	r2, #4
 802be68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802be6c:	e050      	b.n	802bf10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802be6e:	68bb      	ldr	r3, [r7, #8]
 802be70:	3340      	adds	r3, #64	; 0x40
 802be72:	4619      	mov	r1, r3
 802be74:	6878      	ldr	r0, [r7, #4]
 802be76:	f000 f860 	bl	802bf3a <GetLineCoding>
 802be7a:	4603      	mov	r3, r0
 802be7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be7e:	7bbb      	ldrb	r3, [r7, #14]
 802be80:	2b00      	cmp	r3, #0
 802be82:	d126      	bne.n	802bed2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802be84:	68bb      	ldr	r3, [r7, #8]
 802be86:	2200      	movs	r2, #0
 802be88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802be8c:	68bb      	ldr	r3, [r7, #8]
 802be8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802be92:	68bb      	ldr	r3, [r7, #8]
 802be94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802be96:	791b      	ldrb	r3, [r3, #4]
 802be98:	429a      	cmp	r2, r3
 802be9a:	d13b      	bne.n	802bf14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802be9c:	68bb      	ldr	r3, [r7, #8]
 802be9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802bea2:	68bb      	ldr	r3, [r7, #8]
 802bea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bea6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bea8:	429a      	cmp	r2, r3
 802beaa:	d133      	bne.n	802bf14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802beac:	68bb      	ldr	r3, [r7, #8]
 802beae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802beb2:	68bb      	ldr	r3, [r7, #8]
 802beb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802beb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802beb8:	429a      	cmp	r2, r3
 802beba:	d12b      	bne.n	802bf14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802bebc:	68bb      	ldr	r3, [r7, #8]
 802bebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802bec0:	68bb      	ldr	r3, [r7, #8]
 802bec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bec4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bec6:	429a      	cmp	r2, r3
 802bec8:	d124      	bne.n	802bf14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802beca:	6878      	ldr	r0, [r7, #4]
 802becc:	f000 f958 	bl	802c180 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802bed0:	e020      	b.n	802bf14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802bed2:	7bbb      	ldrb	r3, [r7, #14]
 802bed4:	2b01      	cmp	r3, #1
 802bed6:	d01d      	beq.n	802bf14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802bed8:	68bb      	ldr	r3, [r7, #8]
 802beda:	2204      	movs	r2, #4
 802bedc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802bee0:	e018      	b.n	802bf14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802bee2:	6878      	ldr	r0, [r7, #4]
 802bee4:	f000 f867 	bl	802bfb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802bee8:	6878      	ldr	r0, [r7, #4]
 802beea:	f000 f8da 	bl	802c0a2 <CDC_ProcessReception>
      break;
 802beee:	e014      	b.n	802bf1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802bef0:	2100      	movs	r1, #0
 802bef2:	6878      	ldr	r0, [r7, #4]
 802bef4:	f000 ffef 	bl	802ced6 <USBH_ClrFeature>
 802bef8:	4603      	mov	r3, r0
 802befa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802befc:	7bbb      	ldrb	r3, [r7, #14]
 802befe:	2b00      	cmp	r3, #0
 802bf00:	d10a      	bne.n	802bf18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802bf02:	68bb      	ldr	r3, [r7, #8]
 802bf04:	2200      	movs	r2, #0
 802bf06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802bf0a:	e005      	b.n	802bf18 <USBH_CDC_Process+0x120>

    default:
      break;
 802bf0c:	bf00      	nop
 802bf0e:	e004      	b.n	802bf1a <USBH_CDC_Process+0x122>
      break;
 802bf10:	bf00      	nop
 802bf12:	e002      	b.n	802bf1a <USBH_CDC_Process+0x122>
      break;
 802bf14:	bf00      	nop
 802bf16:	e000      	b.n	802bf1a <USBH_CDC_Process+0x122>
      break;
 802bf18:	bf00      	nop

  }

  return status;
 802bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 802bf1c:	4618      	mov	r0, r3
 802bf1e:	3710      	adds	r7, #16
 802bf20:	46bd      	mov	sp, r7
 802bf22:	bd80      	pop	{r7, pc}

0802bf24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802bf24:	b480      	push	{r7}
 802bf26:	b083      	sub	sp, #12
 802bf28:	af00      	add	r7, sp, #0
 802bf2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802bf2c:	2300      	movs	r3, #0
}
 802bf2e:	4618      	mov	r0, r3
 802bf30:	370c      	adds	r7, #12
 802bf32:	46bd      	mov	sp, r7
 802bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf38:	4770      	bx	lr

0802bf3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802bf3a:	b580      	push	{r7, lr}
 802bf3c:	b082      	sub	sp, #8
 802bf3e:	af00      	add	r7, sp, #0
 802bf40:	6078      	str	r0, [r7, #4]
 802bf42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802bf44:	687b      	ldr	r3, [r7, #4]
 802bf46:	22a1      	movs	r2, #161	; 0xa1
 802bf48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802bf4a:	687b      	ldr	r3, [r7, #4]
 802bf4c:	2221      	movs	r2, #33	; 0x21
 802bf4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bf50:	687b      	ldr	r3, [r7, #4]
 802bf52:	2200      	movs	r2, #0
 802bf54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802bf56:	687b      	ldr	r3, [r7, #4]
 802bf58:	2200      	movs	r2, #0
 802bf5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bf5c:	687b      	ldr	r3, [r7, #4]
 802bf5e:	2207      	movs	r2, #7
 802bf60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bf62:	683b      	ldr	r3, [r7, #0]
 802bf64:	2207      	movs	r2, #7
 802bf66:	4619      	mov	r1, r3
 802bf68:	6878      	ldr	r0, [r7, #4]
 802bf6a:	f001 fa81 	bl	802d470 <USBH_CtlReq>
 802bf6e:	4603      	mov	r3, r0
}
 802bf70:	4618      	mov	r0, r3
 802bf72:	3708      	adds	r7, #8
 802bf74:	46bd      	mov	sp, r7
 802bf76:	bd80      	pop	{r7, pc}

0802bf78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802bf78:	b580      	push	{r7, lr}
 802bf7a:	b082      	sub	sp, #8
 802bf7c:	af00      	add	r7, sp, #0
 802bf7e:	6078      	str	r0, [r7, #4]
 802bf80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802bf82:	687b      	ldr	r3, [r7, #4]
 802bf84:	2221      	movs	r2, #33	; 0x21
 802bf86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802bf88:	687b      	ldr	r3, [r7, #4]
 802bf8a:	2220      	movs	r2, #32
 802bf8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bf8e:	687b      	ldr	r3, [r7, #4]
 802bf90:	2200      	movs	r2, #0
 802bf92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802bf94:	687b      	ldr	r3, [r7, #4]
 802bf96:	2200      	movs	r2, #0
 802bf98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bf9a:	687b      	ldr	r3, [r7, #4]
 802bf9c:	2207      	movs	r2, #7
 802bf9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bfa0:	683b      	ldr	r3, [r7, #0]
 802bfa2:	2207      	movs	r2, #7
 802bfa4:	4619      	mov	r1, r3
 802bfa6:	6878      	ldr	r0, [r7, #4]
 802bfa8:	f001 fa62 	bl	802d470 <USBH_CtlReq>
 802bfac:	4603      	mov	r3, r0
}
 802bfae:	4618      	mov	r0, r3
 802bfb0:	3708      	adds	r7, #8
 802bfb2:	46bd      	mov	sp, r7
 802bfb4:	bd80      	pop	{r7, pc}

0802bfb6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802bfb6:	b580      	push	{r7, lr}
 802bfb8:	b086      	sub	sp, #24
 802bfba:	af02      	add	r7, sp, #8
 802bfbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bfbe:	687b      	ldr	r3, [r7, #4]
 802bfc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bfc4:	69db      	ldr	r3, [r3, #28]
 802bfc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bfc8:	2300      	movs	r3, #0
 802bfca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802bfcc:	68fb      	ldr	r3, [r7, #12]
 802bfce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802bfd2:	2b01      	cmp	r3, #1
 802bfd4:	d002      	beq.n	802bfdc <CDC_ProcessTransmission+0x26>
 802bfd6:	2b02      	cmp	r3, #2
 802bfd8:	d023      	beq.n	802c022 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802bfda:	e05e      	b.n	802c09a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802bfdc:	68fb      	ldr	r3, [r7, #12]
 802bfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bfe0:	68fa      	ldr	r2, [r7, #12]
 802bfe2:	8b12      	ldrh	r2, [r2, #24]
 802bfe4:	4293      	cmp	r3, r2
 802bfe6:	d90b      	bls.n	802c000 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802bfe8:	68fb      	ldr	r3, [r7, #12]
 802bfea:	69d9      	ldr	r1, [r3, #28]
 802bfec:	68fb      	ldr	r3, [r7, #12]
 802bfee:	8b1a      	ldrh	r2, [r3, #24]
 802bff0:	68fb      	ldr	r3, [r7, #12]
 802bff2:	7b5b      	ldrb	r3, [r3, #13]
 802bff4:	2001      	movs	r0, #1
 802bff6:	9000      	str	r0, [sp, #0]
 802bff8:	6878      	ldr	r0, [r7, #4]
 802bffa:	f001 fc48 	bl	802d88e <USBH_BulkSendData>
 802bffe:	e00b      	b.n	802c018 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802c000:	68fb      	ldr	r3, [r7, #12]
 802c002:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802c004:	68fb      	ldr	r3, [r7, #12]
 802c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802c008:	b29a      	uxth	r2, r3
 802c00a:	68fb      	ldr	r3, [r7, #12]
 802c00c:	7b5b      	ldrb	r3, [r3, #13]
 802c00e:	2001      	movs	r0, #1
 802c010:	9000      	str	r0, [sp, #0]
 802c012:	6878      	ldr	r0, [r7, #4]
 802c014:	f001 fc3b 	bl	802d88e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802c018:	68fb      	ldr	r3, [r7, #12]
 802c01a:	2202      	movs	r2, #2
 802c01c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c020:	e03b      	b.n	802c09a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802c022:	68fb      	ldr	r3, [r7, #12]
 802c024:	7b5b      	ldrb	r3, [r3, #13]
 802c026:	4619      	mov	r1, r3
 802c028:	6878      	ldr	r0, [r7, #4]
 802c02a:	f001 ff65 	bl	802def8 <USBH_LL_GetURBState>
 802c02e:	4603      	mov	r3, r0
 802c030:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802c032:	7afb      	ldrb	r3, [r7, #11]
 802c034:	2b01      	cmp	r3, #1
 802c036:	d128      	bne.n	802c08a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802c038:	68fb      	ldr	r3, [r7, #12]
 802c03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c03c:	68fa      	ldr	r2, [r7, #12]
 802c03e:	8b12      	ldrh	r2, [r2, #24]
 802c040:	4293      	cmp	r3, r2
 802c042:	d90e      	bls.n	802c062 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802c044:	68fb      	ldr	r3, [r7, #12]
 802c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c048:	68fa      	ldr	r2, [r7, #12]
 802c04a:	8b12      	ldrh	r2, [r2, #24]
 802c04c:	1a9a      	subs	r2, r3, r2
 802c04e:	68fb      	ldr	r3, [r7, #12]
 802c050:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	69db      	ldr	r3, [r3, #28]
 802c056:	68fa      	ldr	r2, [r7, #12]
 802c058:	8b12      	ldrh	r2, [r2, #24]
 802c05a:	441a      	add	r2, r3
 802c05c:	68fb      	ldr	r3, [r7, #12]
 802c05e:	61da      	str	r2, [r3, #28]
 802c060:	e002      	b.n	802c068 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802c062:	68fb      	ldr	r3, [r7, #12]
 802c064:	2200      	movs	r2, #0
 802c066:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802c068:	68fb      	ldr	r3, [r7, #12]
 802c06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c06c:	2b00      	cmp	r3, #0
 802c06e:	d004      	beq.n	802c07a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c070:	68fb      	ldr	r3, [r7, #12]
 802c072:	2201      	movs	r2, #1
 802c074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c078:	e00e      	b.n	802c098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802c07a:	68fb      	ldr	r3, [r7, #12]
 802c07c:	2200      	movs	r2, #0
 802c07e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802c082:	6878      	ldr	r0, [r7, #4]
 802c084:	f000 f868 	bl	802c158 <USBH_CDC_TransmitCallback>
      break;
 802c088:	e006      	b.n	802c098 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802c08a:	7afb      	ldrb	r3, [r7, #11]
 802c08c:	2b02      	cmp	r3, #2
 802c08e:	d103      	bne.n	802c098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c090:	68fb      	ldr	r3, [r7, #12]
 802c092:	2201      	movs	r2, #1
 802c094:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c098:	bf00      	nop
  }
}
 802c09a:	bf00      	nop
 802c09c:	3710      	adds	r7, #16
 802c09e:	46bd      	mov	sp, r7
 802c0a0:	bd80      	pop	{r7, pc}

0802c0a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802c0a2:	b580      	push	{r7, lr}
 802c0a4:	b086      	sub	sp, #24
 802c0a6:	af00      	add	r7, sp, #0
 802c0a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802c0aa:	687b      	ldr	r3, [r7, #4]
 802c0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c0b0:	69db      	ldr	r3, [r3, #28]
 802c0b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c0b4:	2300      	movs	r3, #0
 802c0b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802c0b8:	697b      	ldr	r3, [r7, #20]
 802c0ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802c0be:	2b03      	cmp	r3, #3
 802c0c0:	d002      	beq.n	802c0c8 <CDC_ProcessReception+0x26>
 802c0c2:	2b04      	cmp	r3, #4
 802c0c4:	d00e      	beq.n	802c0e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802c0c6:	e043      	b.n	802c150 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802c0c8:	697b      	ldr	r3, [r7, #20]
 802c0ca:	6a19      	ldr	r1, [r3, #32]
 802c0cc:	697b      	ldr	r3, [r7, #20]
 802c0ce:	8b5a      	ldrh	r2, [r3, #26]
 802c0d0:	697b      	ldr	r3, [r7, #20]
 802c0d2:	7b1b      	ldrb	r3, [r3, #12]
 802c0d4:	6878      	ldr	r0, [r7, #4]
 802c0d6:	f001 fbff 	bl	802d8d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802c0da:	697b      	ldr	r3, [r7, #20]
 802c0dc:	2204      	movs	r2, #4
 802c0de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c0e2:	e035      	b.n	802c150 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802c0e4:	697b      	ldr	r3, [r7, #20]
 802c0e6:	7b1b      	ldrb	r3, [r3, #12]
 802c0e8:	4619      	mov	r1, r3
 802c0ea:	6878      	ldr	r0, [r7, #4]
 802c0ec:	f001 ff04 	bl	802def8 <USBH_LL_GetURBState>
 802c0f0:	4603      	mov	r3, r0
 802c0f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802c0f4:	7cfb      	ldrb	r3, [r7, #19]
 802c0f6:	2b01      	cmp	r3, #1
 802c0f8:	d129      	bne.n	802c14e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802c0fa:	697b      	ldr	r3, [r7, #20]
 802c0fc:	7b1b      	ldrb	r3, [r3, #12]
 802c0fe:	4619      	mov	r1, r3
 802c100:	6878      	ldr	r0, [r7, #4]
 802c102:	f001 fe67 	bl	802ddd4 <USBH_LL_GetLastXferSize>
 802c106:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802c108:	697b      	ldr	r3, [r7, #20]
 802c10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c10c:	68fa      	ldr	r2, [r7, #12]
 802c10e:	429a      	cmp	r2, r3
 802c110:	d016      	beq.n	802c140 <CDC_ProcessReception+0x9e>
 802c112:	697b      	ldr	r3, [r7, #20]
 802c114:	8b5b      	ldrh	r3, [r3, #26]
 802c116:	461a      	mov	r2, r3
 802c118:	68fb      	ldr	r3, [r7, #12]
 802c11a:	4293      	cmp	r3, r2
 802c11c:	d910      	bls.n	802c140 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802c11e:	697b      	ldr	r3, [r7, #20]
 802c120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c122:	68fb      	ldr	r3, [r7, #12]
 802c124:	1ad2      	subs	r2, r2, r3
 802c126:	697b      	ldr	r3, [r7, #20]
 802c128:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802c12a:	697b      	ldr	r3, [r7, #20]
 802c12c:	6a1a      	ldr	r2, [r3, #32]
 802c12e:	68fb      	ldr	r3, [r7, #12]
 802c130:	441a      	add	r2, r3
 802c132:	697b      	ldr	r3, [r7, #20]
 802c134:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802c136:	697b      	ldr	r3, [r7, #20]
 802c138:	2203      	movs	r2, #3
 802c13a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c13e:	e006      	b.n	802c14e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802c140:	697b      	ldr	r3, [r7, #20]
 802c142:	2200      	movs	r2, #0
 802c144:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802c148:	6878      	ldr	r0, [r7, #4]
 802c14a:	f000 f80f 	bl	802c16c <USBH_CDC_ReceiveCallback>
      break;
 802c14e:	bf00      	nop
  }
}
 802c150:	bf00      	nop
 802c152:	3718      	adds	r7, #24
 802c154:	46bd      	mov	sp, r7
 802c156:	bd80      	pop	{r7, pc}

0802c158 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802c158:	b480      	push	{r7}
 802c15a:	b083      	sub	sp, #12
 802c15c:	af00      	add	r7, sp, #0
 802c15e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c160:	bf00      	nop
 802c162:	370c      	adds	r7, #12
 802c164:	46bd      	mov	sp, r7
 802c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c16a:	4770      	bx	lr

0802c16c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802c16c:	b480      	push	{r7}
 802c16e:	b083      	sub	sp, #12
 802c170:	af00      	add	r7, sp, #0
 802c172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c174:	bf00      	nop
 802c176:	370c      	adds	r7, #12
 802c178:	46bd      	mov	sp, r7
 802c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c17e:	4770      	bx	lr

0802c180 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802c180:	b480      	push	{r7}
 802c182:	b083      	sub	sp, #12
 802c184:	af00      	add	r7, sp, #0
 802c186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c188:	bf00      	nop
 802c18a:	370c      	adds	r7, #12
 802c18c:	46bd      	mov	sp, r7
 802c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c192:	4770      	bx	lr

0802c194 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802c194:	b580      	push	{r7, lr}
 802c196:	b084      	sub	sp, #16
 802c198:	af00      	add	r7, sp, #0
 802c19a:	60f8      	str	r0, [r7, #12]
 802c19c:	60b9      	str	r1, [r7, #8]
 802c19e:	4613      	mov	r3, r2
 802c1a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802c1a2:	68fb      	ldr	r3, [r7, #12]
 802c1a4:	2b00      	cmp	r3, #0
 802c1a6:	d101      	bne.n	802c1ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802c1a8:	2302      	movs	r3, #2
 802c1aa:	e029      	b.n	802c200 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802c1ac:	68fb      	ldr	r3, [r7, #12]
 802c1ae:	79fa      	ldrb	r2, [r7, #7]
 802c1b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802c1b4:	68fb      	ldr	r3, [r7, #12]
 802c1b6:	2200      	movs	r2, #0
 802c1b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802c1bc:	68fb      	ldr	r3, [r7, #12]
 802c1be:	2200      	movs	r2, #0
 802c1c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802c1c4:	68f8      	ldr	r0, [r7, #12]
 802c1c6:	f000 f81f 	bl	802c208 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802c1ca:	68fb      	ldr	r3, [r7, #12]
 802c1cc:	2200      	movs	r2, #0
 802c1ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802c1d2:	68fb      	ldr	r3, [r7, #12]
 802c1d4:	2200      	movs	r2, #0
 802c1d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c1da:	68fb      	ldr	r3, [r7, #12]
 802c1dc:	2200      	movs	r2, #0
 802c1de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c1e2:	68fb      	ldr	r3, [r7, #12]
 802c1e4:	2200      	movs	r2, #0
 802c1e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802c1ea:	68bb      	ldr	r3, [r7, #8]
 802c1ec:	2b00      	cmp	r3, #0
 802c1ee:	d003      	beq.n	802c1f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802c1f0:	68fb      	ldr	r3, [r7, #12]
 802c1f2:	68ba      	ldr	r2, [r7, #8]
 802c1f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802c1f8:	68f8      	ldr	r0, [r7, #12]
 802c1fa:	f001 fd2d 	bl	802dc58 <USBH_LL_Init>

  return USBH_OK;
 802c1fe:	2300      	movs	r3, #0
}
 802c200:	4618      	mov	r0, r3
 802c202:	3710      	adds	r7, #16
 802c204:	46bd      	mov	sp, r7
 802c206:	bd80      	pop	{r7, pc}

0802c208 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802c208:	b480      	push	{r7}
 802c20a:	b085      	sub	sp, #20
 802c20c:	af00      	add	r7, sp, #0
 802c20e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802c210:	2300      	movs	r3, #0
 802c212:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c214:	2300      	movs	r3, #0
 802c216:	60fb      	str	r3, [r7, #12]
 802c218:	e009      	b.n	802c22e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802c21a:	687a      	ldr	r2, [r7, #4]
 802c21c:	68fb      	ldr	r3, [r7, #12]
 802c21e:	33e0      	adds	r3, #224	; 0xe0
 802c220:	009b      	lsls	r3, r3, #2
 802c222:	4413      	add	r3, r2
 802c224:	2200      	movs	r2, #0
 802c226:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c228:	68fb      	ldr	r3, [r7, #12]
 802c22a:	3301      	adds	r3, #1
 802c22c:	60fb      	str	r3, [r7, #12]
 802c22e:	68fb      	ldr	r3, [r7, #12]
 802c230:	2b0f      	cmp	r3, #15
 802c232:	d9f2      	bls.n	802c21a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c234:	2300      	movs	r3, #0
 802c236:	60fb      	str	r3, [r7, #12]
 802c238:	e009      	b.n	802c24e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802c23a:	687a      	ldr	r2, [r7, #4]
 802c23c:	68fb      	ldr	r3, [r7, #12]
 802c23e:	4413      	add	r3, r2
 802c240:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c244:	2200      	movs	r2, #0
 802c246:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c248:	68fb      	ldr	r3, [r7, #12]
 802c24a:	3301      	adds	r3, #1
 802c24c:	60fb      	str	r3, [r7, #12]
 802c24e:	68fb      	ldr	r3, [r7, #12]
 802c250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c254:	d3f1      	bcc.n	802c23a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802c256:	687b      	ldr	r3, [r7, #4]
 802c258:	2200      	movs	r2, #0
 802c25a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802c25c:	687b      	ldr	r3, [r7, #4]
 802c25e:	2200      	movs	r2, #0
 802c260:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802c262:	687b      	ldr	r3, [r7, #4]
 802c264:	2201      	movs	r2, #1
 802c266:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802c268:	687b      	ldr	r3, [r7, #4]
 802c26a:	2200      	movs	r2, #0
 802c26c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802c270:	687b      	ldr	r3, [r7, #4]
 802c272:	2201      	movs	r2, #1
 802c274:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802c276:	687b      	ldr	r3, [r7, #4]
 802c278:	2240      	movs	r2, #64	; 0x40
 802c27a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802c27c:	687b      	ldr	r3, [r7, #4]
 802c27e:	2200      	movs	r2, #0
 802c280:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802c282:	687b      	ldr	r3, [r7, #4]
 802c284:	2200      	movs	r2, #0
 802c286:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802c28a:	687b      	ldr	r3, [r7, #4]
 802c28c:	2201      	movs	r2, #1
 802c28e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802c292:	687b      	ldr	r3, [r7, #4]
 802c294:	2200      	movs	r2, #0
 802c296:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802c29a:	687b      	ldr	r3, [r7, #4]
 802c29c:	2200      	movs	r2, #0
 802c29e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802c2a2:	2300      	movs	r3, #0
}
 802c2a4:	4618      	mov	r0, r3
 802c2a6:	3714      	adds	r7, #20
 802c2a8:	46bd      	mov	sp, r7
 802c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2ae:	4770      	bx	lr

0802c2b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802c2b0:	b480      	push	{r7}
 802c2b2:	b085      	sub	sp, #20
 802c2b4:	af00      	add	r7, sp, #0
 802c2b6:	6078      	str	r0, [r7, #4]
 802c2b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802c2ba:	2300      	movs	r3, #0
 802c2bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802c2be:	683b      	ldr	r3, [r7, #0]
 802c2c0:	2b00      	cmp	r3, #0
 802c2c2:	d016      	beq.n	802c2f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802c2c4:	687b      	ldr	r3, [r7, #4]
 802c2c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2ca:	2b00      	cmp	r3, #0
 802c2cc:	d10e      	bne.n	802c2ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802c2ce:	687b      	ldr	r3, [r7, #4]
 802c2d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2d4:	1c59      	adds	r1, r3, #1
 802c2d6:	687a      	ldr	r2, [r7, #4]
 802c2d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802c2dc:	687a      	ldr	r2, [r7, #4]
 802c2de:	33de      	adds	r3, #222	; 0xde
 802c2e0:	6839      	ldr	r1, [r7, #0]
 802c2e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802c2e6:	2300      	movs	r3, #0
 802c2e8:	73fb      	strb	r3, [r7, #15]
 802c2ea:	e004      	b.n	802c2f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802c2ec:	2302      	movs	r3, #2
 802c2ee:	73fb      	strb	r3, [r7, #15]
 802c2f0:	e001      	b.n	802c2f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802c2f2:	2302      	movs	r3, #2
 802c2f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 802c2f8:	4618      	mov	r0, r3
 802c2fa:	3714      	adds	r7, #20
 802c2fc:	46bd      	mov	sp, r7
 802c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c302:	4770      	bx	lr

0802c304 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802c304:	b480      	push	{r7}
 802c306:	b085      	sub	sp, #20
 802c308:	af00      	add	r7, sp, #0
 802c30a:	6078      	str	r0, [r7, #4]
 802c30c:	460b      	mov	r3, r1
 802c30e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802c310:	2300      	movs	r3, #0
 802c312:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802c314:	687b      	ldr	r3, [r7, #4]
 802c316:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802c31a:	78fa      	ldrb	r2, [r7, #3]
 802c31c:	429a      	cmp	r2, r3
 802c31e:	d204      	bcs.n	802c32a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802c320:	687b      	ldr	r3, [r7, #4]
 802c322:	78fa      	ldrb	r2, [r7, #3]
 802c324:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802c328:	e001      	b.n	802c32e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802c32a:	2302      	movs	r3, #2
 802c32c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c32e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c330:	4618      	mov	r0, r3
 802c332:	3714      	adds	r7, #20
 802c334:	46bd      	mov	sp, r7
 802c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c33a:	4770      	bx	lr

0802c33c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802c33c:	b480      	push	{r7}
 802c33e:	b087      	sub	sp, #28
 802c340:	af00      	add	r7, sp, #0
 802c342:	6078      	str	r0, [r7, #4]
 802c344:	4608      	mov	r0, r1
 802c346:	4611      	mov	r1, r2
 802c348:	461a      	mov	r2, r3
 802c34a:	4603      	mov	r3, r0
 802c34c:	70fb      	strb	r3, [r7, #3]
 802c34e:	460b      	mov	r3, r1
 802c350:	70bb      	strb	r3, [r7, #2]
 802c352:	4613      	mov	r3, r2
 802c354:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802c356:	2300      	movs	r3, #0
 802c358:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c35a:	2300      	movs	r3, #0
 802c35c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802c35e:	687b      	ldr	r3, [r7, #4]
 802c360:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c364:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c366:	e025      	b.n	802c3b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802c368:	7dfb      	ldrb	r3, [r7, #23]
 802c36a:	221a      	movs	r2, #26
 802c36c:	fb02 f303 	mul.w	r3, r2, r3
 802c370:	3308      	adds	r3, #8
 802c372:	68fa      	ldr	r2, [r7, #12]
 802c374:	4413      	add	r3, r2
 802c376:	3302      	adds	r3, #2
 802c378:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c37a:	693b      	ldr	r3, [r7, #16]
 802c37c:	795b      	ldrb	r3, [r3, #5]
 802c37e:	78fa      	ldrb	r2, [r7, #3]
 802c380:	429a      	cmp	r2, r3
 802c382:	d002      	beq.n	802c38a <USBH_FindInterface+0x4e>
 802c384:	78fb      	ldrb	r3, [r7, #3]
 802c386:	2bff      	cmp	r3, #255	; 0xff
 802c388:	d111      	bne.n	802c3ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c38a:	693b      	ldr	r3, [r7, #16]
 802c38c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c38e:	78ba      	ldrb	r2, [r7, #2]
 802c390:	429a      	cmp	r2, r3
 802c392:	d002      	beq.n	802c39a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c394:	78bb      	ldrb	r3, [r7, #2]
 802c396:	2bff      	cmp	r3, #255	; 0xff
 802c398:	d109      	bne.n	802c3ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c39a:	693b      	ldr	r3, [r7, #16]
 802c39c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c39e:	787a      	ldrb	r2, [r7, #1]
 802c3a0:	429a      	cmp	r2, r3
 802c3a2:	d002      	beq.n	802c3aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c3a4:	787b      	ldrb	r3, [r7, #1]
 802c3a6:	2bff      	cmp	r3, #255	; 0xff
 802c3a8:	d101      	bne.n	802c3ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802c3aa:	7dfb      	ldrb	r3, [r7, #23]
 802c3ac:	e006      	b.n	802c3bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 802c3ae:	7dfb      	ldrb	r3, [r7, #23]
 802c3b0:	3301      	adds	r3, #1
 802c3b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c3b4:	7dfb      	ldrb	r3, [r7, #23]
 802c3b6:	2b01      	cmp	r3, #1
 802c3b8:	d9d6      	bls.n	802c368 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802c3ba:	23ff      	movs	r3, #255	; 0xff
}
 802c3bc:	4618      	mov	r0, r3
 802c3be:	371c      	adds	r7, #28
 802c3c0:	46bd      	mov	sp, r7
 802c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3c6:	4770      	bx	lr

0802c3c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802c3c8:	b580      	push	{r7, lr}
 802c3ca:	b082      	sub	sp, #8
 802c3cc:	af00      	add	r7, sp, #0
 802c3ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802c3d0:	6878      	ldr	r0, [r7, #4]
 802c3d2:	f001 fc87 	bl	802dce4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802c3d6:	2101      	movs	r1, #1
 802c3d8:	6878      	ldr	r0, [r7, #4]
 802c3da:	f001 fda0 	bl	802df1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 802c3de:	2300      	movs	r3, #0
}
 802c3e0:	4618      	mov	r0, r3
 802c3e2:	3708      	adds	r7, #8
 802c3e4:	46bd      	mov	sp, r7
 802c3e6:	bd80      	pop	{r7, pc}

0802c3e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802c3e8:	b580      	push	{r7, lr}
 802c3ea:	b088      	sub	sp, #32
 802c3ec:	af04      	add	r7, sp, #16
 802c3ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802c3f0:	2302      	movs	r3, #2
 802c3f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802c3f4:	2300      	movs	r3, #0
 802c3f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802c3f8:	687b      	ldr	r3, [r7, #4]
 802c3fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802c3fe:	b2db      	uxtb	r3, r3
 802c400:	2b01      	cmp	r3, #1
 802c402:	d102      	bne.n	802c40a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802c404:	687b      	ldr	r3, [r7, #4]
 802c406:	2203      	movs	r2, #3
 802c408:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802c40a:	687b      	ldr	r3, [r7, #4]
 802c40c:	781b      	ldrb	r3, [r3, #0]
 802c40e:	b2db      	uxtb	r3, r3
 802c410:	2b0b      	cmp	r3, #11
 802c412:	f200 81be 	bhi.w	802c792 <USBH_Process+0x3aa>
 802c416:	a201      	add	r2, pc, #4	; (adr r2, 802c41c <USBH_Process+0x34>)
 802c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c41c:	0802c44d 	.word	0x0802c44d
 802c420:	0802c47f 	.word	0x0802c47f
 802c424:	0802c4e7 	.word	0x0802c4e7
 802c428:	0802c72d 	.word	0x0802c72d
 802c42c:	0802c793 	.word	0x0802c793
 802c430:	0802c58b 	.word	0x0802c58b
 802c434:	0802c6d3 	.word	0x0802c6d3
 802c438:	0802c5c1 	.word	0x0802c5c1
 802c43c:	0802c5e1 	.word	0x0802c5e1
 802c440:	0802c601 	.word	0x0802c601
 802c444:	0802c645 	.word	0x0802c645
 802c448:	0802c715 	.word	0x0802c715
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802c44c:	687b      	ldr	r3, [r7, #4]
 802c44e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802c452:	b2db      	uxtb	r3, r3
 802c454:	2b00      	cmp	r3, #0
 802c456:	f000 819e 	beq.w	802c796 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802c45a:	687b      	ldr	r3, [r7, #4]
 802c45c:	2201      	movs	r2, #1
 802c45e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802c460:	20c8      	movs	r0, #200	; 0xc8
 802c462:	f001 fda3 	bl	802dfac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802c466:	6878      	ldr	r0, [r7, #4]
 802c468:	f001 fc99 	bl	802dd9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802c46c:	687b      	ldr	r3, [r7, #4]
 802c46e:	2200      	movs	r2, #0
 802c470:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802c474:	687b      	ldr	r3, [r7, #4]
 802c476:	2200      	movs	r2, #0
 802c478:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c47c:	e18b      	b.n	802c796 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802c47e:	687b      	ldr	r3, [r7, #4]
 802c480:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802c484:	2b01      	cmp	r3, #1
 802c486:	d107      	bne.n	802c498 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802c488:	687b      	ldr	r3, [r7, #4]
 802c48a:	2200      	movs	r2, #0
 802c48c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	2202      	movs	r2, #2
 802c494:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c496:	e18d      	b.n	802c7b4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802c498:	687b      	ldr	r3, [r7, #4]
 802c49a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c49e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c4a2:	d914      	bls.n	802c4ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802c4a4:	687b      	ldr	r3, [r7, #4]
 802c4a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4aa:	3301      	adds	r3, #1
 802c4ac:	b2da      	uxtb	r2, r3
 802c4ae:	687b      	ldr	r3, [r7, #4]
 802c4b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802c4b4:	687b      	ldr	r3, [r7, #4]
 802c4b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4ba:	2b03      	cmp	r3, #3
 802c4bc:	d903      	bls.n	802c4c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802c4be:	687b      	ldr	r3, [r7, #4]
 802c4c0:	220d      	movs	r2, #13
 802c4c2:	701a      	strb	r2, [r3, #0]
      break;
 802c4c4:	e176      	b.n	802c7b4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802c4c6:	687b      	ldr	r3, [r7, #4]
 802c4c8:	2200      	movs	r2, #0
 802c4ca:	701a      	strb	r2, [r3, #0]
      break;
 802c4cc:	e172      	b.n	802c7b4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c4d4:	f103 020a 	add.w	r2, r3, #10
 802c4d8:	687b      	ldr	r3, [r7, #4]
 802c4da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802c4de:	200a      	movs	r0, #10
 802c4e0:	f001 fd64 	bl	802dfac <USBH_Delay>
      break;
 802c4e4:	e166      	b.n	802c7b4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802c4e6:	687b      	ldr	r3, [r7, #4]
 802c4e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c4ec:	2b00      	cmp	r3, #0
 802c4ee:	d005      	beq.n	802c4fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c4f6:	2104      	movs	r1, #4
 802c4f8:	6878      	ldr	r0, [r7, #4]
 802c4fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802c4fc:	2064      	movs	r0, #100	; 0x64
 802c4fe:	f001 fd55 	bl	802dfac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802c502:	6878      	ldr	r0, [r7, #4]
 802c504:	f001 fc24 	bl	802dd50 <USBH_LL_GetSpeed>
 802c508:	4603      	mov	r3, r0
 802c50a:	461a      	mov	r2, r3
 802c50c:	687b      	ldr	r3, [r7, #4]
 802c50e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802c512:	687b      	ldr	r3, [r7, #4]
 802c514:	2205      	movs	r2, #5
 802c516:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802c518:	2100      	movs	r1, #0
 802c51a:	6878      	ldr	r0, [r7, #4]
 802c51c:	f001 fa29 	bl	802d972 <USBH_AllocPipe>
 802c520:	4603      	mov	r3, r0
 802c522:	461a      	mov	r2, r3
 802c524:	687b      	ldr	r3, [r7, #4]
 802c526:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802c528:	2180      	movs	r1, #128	; 0x80
 802c52a:	6878      	ldr	r0, [r7, #4]
 802c52c:	f001 fa21 	bl	802d972 <USBH_AllocPipe>
 802c530:	4603      	mov	r3, r0
 802c532:	461a      	mov	r2, r3
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c538:	687b      	ldr	r3, [r7, #4]
 802c53a:	7919      	ldrb	r1, [r3, #4]
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c542:	687b      	ldr	r3, [r7, #4]
 802c544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c548:	687a      	ldr	r2, [r7, #4]
 802c54a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c54c:	b292      	uxth	r2, r2
 802c54e:	9202      	str	r2, [sp, #8]
 802c550:	2200      	movs	r2, #0
 802c552:	9201      	str	r2, [sp, #4]
 802c554:	9300      	str	r3, [sp, #0]
 802c556:	4603      	mov	r3, r0
 802c558:	2280      	movs	r2, #128	; 0x80
 802c55a:	6878      	ldr	r0, [r7, #4]
 802c55c:	f001 f9da 	bl	802d914 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c560:	687b      	ldr	r3, [r7, #4]
 802c562:	7959      	ldrb	r1, [r3, #5]
 802c564:	687b      	ldr	r3, [r7, #4]
 802c566:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c56a:	687b      	ldr	r3, [r7, #4]
 802c56c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c570:	687a      	ldr	r2, [r7, #4]
 802c572:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c574:	b292      	uxth	r2, r2
 802c576:	9202      	str	r2, [sp, #8]
 802c578:	2200      	movs	r2, #0
 802c57a:	9201      	str	r2, [sp, #4]
 802c57c:	9300      	str	r3, [sp, #0]
 802c57e:	4603      	mov	r3, r0
 802c580:	2200      	movs	r2, #0
 802c582:	6878      	ldr	r0, [r7, #4]
 802c584:	f001 f9c6 	bl	802d914 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c588:	e114      	b.n	802c7b4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802c58a:	6878      	ldr	r0, [r7, #4]
 802c58c:	f000 f918 	bl	802c7c0 <USBH_HandleEnum>
 802c590:	4603      	mov	r3, r0
 802c592:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802c594:	7bbb      	ldrb	r3, [r7, #14]
 802c596:	b2db      	uxtb	r3, r3
 802c598:	2b00      	cmp	r3, #0
 802c59a:	f040 80fe 	bne.w	802c79a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802c59e:	687b      	ldr	r3, [r7, #4]
 802c5a0:	2200      	movs	r2, #0
 802c5a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802c5a6:	687b      	ldr	r3, [r7, #4]
 802c5a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802c5ac:	2b01      	cmp	r3, #1
 802c5ae:	d103      	bne.n	802c5b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802c5b0:	687b      	ldr	r3, [r7, #4]
 802c5b2:	2208      	movs	r2, #8
 802c5b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c5b6:	e0f0      	b.n	802c79a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802c5b8:	687b      	ldr	r3, [r7, #4]
 802c5ba:	2207      	movs	r2, #7
 802c5bc:	701a      	strb	r2, [r3, #0]
      break;
 802c5be:	e0ec      	b.n	802c79a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802c5c0:	687b      	ldr	r3, [r7, #4]
 802c5c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5c6:	2b00      	cmp	r3, #0
 802c5c8:	f000 80e9 	beq.w	802c79e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5d2:	2101      	movs	r1, #1
 802c5d4:	6878      	ldr	r0, [r7, #4]
 802c5d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802c5d8:	687b      	ldr	r3, [r7, #4]
 802c5da:	2208      	movs	r2, #8
 802c5dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802c5de:	e0de      	b.n	802c79e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802c5e0:	687b      	ldr	r3, [r7, #4]
 802c5e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802c5e6:	b29b      	uxth	r3, r3
 802c5e8:	4619      	mov	r1, r3
 802c5ea:	6878      	ldr	r0, [r7, #4]
 802c5ec:	f000 fc2c 	bl	802ce48 <USBH_SetCfg>
 802c5f0:	4603      	mov	r3, r0
 802c5f2:	2b00      	cmp	r3, #0
 802c5f4:	f040 80d5 	bne.w	802c7a2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802c5f8:	687b      	ldr	r3, [r7, #4]
 802c5fa:	2209      	movs	r2, #9
 802c5fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c5fe:	e0d0      	b.n	802c7a2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802c600:	687b      	ldr	r3, [r7, #4]
 802c602:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802c606:	f003 0320 	and.w	r3, r3, #32
 802c60a:	2b00      	cmp	r3, #0
 802c60c:	d016      	beq.n	802c63c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802c60e:	2101      	movs	r1, #1
 802c610:	6878      	ldr	r0, [r7, #4]
 802c612:	f000 fc3c 	bl	802ce8e <USBH_SetFeature>
 802c616:	4603      	mov	r3, r0
 802c618:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c61a:	7bbb      	ldrb	r3, [r7, #14]
 802c61c:	b2db      	uxtb	r3, r3
 802c61e:	2b00      	cmp	r3, #0
 802c620:	d103      	bne.n	802c62a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802c622:	687b      	ldr	r3, [r7, #4]
 802c624:	220a      	movs	r2, #10
 802c626:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c628:	e0bd      	b.n	802c7a6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802c62a:	7bbb      	ldrb	r3, [r7, #14]
 802c62c:	b2db      	uxtb	r3, r3
 802c62e:	2b03      	cmp	r3, #3
 802c630:	f040 80b9 	bne.w	802c7a6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802c634:	687b      	ldr	r3, [r7, #4]
 802c636:	220a      	movs	r2, #10
 802c638:	701a      	strb	r2, [r3, #0]
      break;
 802c63a:	e0b4      	b.n	802c7a6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802c63c:	687b      	ldr	r3, [r7, #4]
 802c63e:	220a      	movs	r2, #10
 802c640:	701a      	strb	r2, [r3, #0]
      break;
 802c642:	e0b0      	b.n	802c7a6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802c644:	687b      	ldr	r3, [r7, #4]
 802c646:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c64a:	2b00      	cmp	r3, #0
 802c64c:	f000 80ad 	beq.w	802c7aa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	2200      	movs	r2, #0
 802c654:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c658:	2300      	movs	r3, #0
 802c65a:	73fb      	strb	r3, [r7, #15]
 802c65c:	e016      	b.n	802c68c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802c65e:	7bfa      	ldrb	r2, [r7, #15]
 802c660:	687b      	ldr	r3, [r7, #4]
 802c662:	32de      	adds	r2, #222	; 0xde
 802c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c668:	791a      	ldrb	r2, [r3, #4]
 802c66a:	687b      	ldr	r3, [r7, #4]
 802c66c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802c670:	429a      	cmp	r2, r3
 802c672:	d108      	bne.n	802c686 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802c674:	7bfa      	ldrb	r2, [r7, #15]
 802c676:	687b      	ldr	r3, [r7, #4]
 802c678:	32de      	adds	r2, #222	; 0xde
 802c67a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c67e:	687b      	ldr	r3, [r7, #4]
 802c680:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802c684:	e005      	b.n	802c692 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c686:	7bfb      	ldrb	r3, [r7, #15]
 802c688:	3301      	adds	r3, #1
 802c68a:	73fb      	strb	r3, [r7, #15]
 802c68c:	7bfb      	ldrb	r3, [r7, #15]
 802c68e:	2b00      	cmp	r3, #0
 802c690:	d0e5      	beq.n	802c65e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802c692:	687b      	ldr	r3, [r7, #4]
 802c694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c698:	2b00      	cmp	r3, #0
 802c69a:	d016      	beq.n	802c6ca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802c69c:	687b      	ldr	r3, [r7, #4]
 802c69e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6a2:	689b      	ldr	r3, [r3, #8]
 802c6a4:	6878      	ldr	r0, [r7, #4]
 802c6a6:	4798      	blx	r3
 802c6a8:	4603      	mov	r3, r0
 802c6aa:	2b00      	cmp	r3, #0
 802c6ac:	d109      	bne.n	802c6c2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802c6ae:	687b      	ldr	r3, [r7, #4]
 802c6b0:	2206      	movs	r2, #6
 802c6b2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802c6b4:	687b      	ldr	r3, [r7, #4]
 802c6b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c6ba:	2103      	movs	r1, #3
 802c6bc:	6878      	ldr	r0, [r7, #4]
 802c6be:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6c0:	e073      	b.n	802c7aa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802c6c2:	687b      	ldr	r3, [r7, #4]
 802c6c4:	220d      	movs	r2, #13
 802c6c6:	701a      	strb	r2, [r3, #0]
      break;
 802c6c8:	e06f      	b.n	802c7aa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	220d      	movs	r2, #13
 802c6ce:	701a      	strb	r2, [r3, #0]
      break;
 802c6d0:	e06b      	b.n	802c7aa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802c6d2:	687b      	ldr	r3, [r7, #4]
 802c6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6d8:	2b00      	cmp	r3, #0
 802c6da:	d017      	beq.n	802c70c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802c6dc:	687b      	ldr	r3, [r7, #4]
 802c6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6e2:	691b      	ldr	r3, [r3, #16]
 802c6e4:	6878      	ldr	r0, [r7, #4]
 802c6e6:	4798      	blx	r3
 802c6e8:	4603      	mov	r3, r0
 802c6ea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c6ec:	7bbb      	ldrb	r3, [r7, #14]
 802c6ee:	b2db      	uxtb	r3, r3
 802c6f0:	2b00      	cmp	r3, #0
 802c6f2:	d103      	bne.n	802c6fc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802c6f4:	687b      	ldr	r3, [r7, #4]
 802c6f6:	220b      	movs	r2, #11
 802c6f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6fa:	e058      	b.n	802c7ae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802c6fc:	7bbb      	ldrb	r3, [r7, #14]
 802c6fe:	b2db      	uxtb	r3, r3
 802c700:	2b02      	cmp	r3, #2
 802c702:	d154      	bne.n	802c7ae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802c704:	687b      	ldr	r3, [r7, #4]
 802c706:	220d      	movs	r2, #13
 802c708:	701a      	strb	r2, [r3, #0]
      break;
 802c70a:	e050      	b.n	802c7ae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802c70c:	687b      	ldr	r3, [r7, #4]
 802c70e:	220d      	movs	r2, #13
 802c710:	701a      	strb	r2, [r3, #0]
      break;
 802c712:	e04c      	b.n	802c7ae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802c714:	687b      	ldr	r3, [r7, #4]
 802c716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c71a:	2b00      	cmp	r3, #0
 802c71c:	d049      	beq.n	802c7b2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802c71e:	687b      	ldr	r3, [r7, #4]
 802c720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c724:	695b      	ldr	r3, [r3, #20]
 802c726:	6878      	ldr	r0, [r7, #4]
 802c728:	4798      	blx	r3
      }
      break;
 802c72a:	e042      	b.n	802c7b2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802c72c:	687b      	ldr	r3, [r7, #4]
 802c72e:	2200      	movs	r2, #0
 802c730:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802c734:	6878      	ldr	r0, [r7, #4]
 802c736:	f7ff fd67 	bl	802c208 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802c73a:	687b      	ldr	r3, [r7, #4]
 802c73c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c740:	2b00      	cmp	r3, #0
 802c742:	d009      	beq.n	802c758 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802c744:	687b      	ldr	r3, [r7, #4]
 802c746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c74a:	68db      	ldr	r3, [r3, #12]
 802c74c:	6878      	ldr	r0, [r7, #4]
 802c74e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802c750:	687b      	ldr	r3, [r7, #4]
 802c752:	2200      	movs	r2, #0
 802c754:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802c758:	687b      	ldr	r3, [r7, #4]
 802c75a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c75e:	2b00      	cmp	r3, #0
 802c760:	d005      	beq.n	802c76e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802c762:	687b      	ldr	r3, [r7, #4]
 802c764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c768:	2105      	movs	r1, #5
 802c76a:	6878      	ldr	r0, [r7, #4]
 802c76c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802c76e:	687b      	ldr	r3, [r7, #4]
 802c770:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802c774:	b2db      	uxtb	r3, r3
 802c776:	2b01      	cmp	r3, #1
 802c778:	d107      	bne.n	802c78a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802c77a:	687b      	ldr	r3, [r7, #4]
 802c77c:	2200      	movs	r2, #0
 802c77e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802c782:	6878      	ldr	r0, [r7, #4]
 802c784:	f7ff fe20 	bl	802c3c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c788:	e014      	b.n	802c7b4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802c78a:	6878      	ldr	r0, [r7, #4]
 802c78c:	f001 faaa 	bl	802dce4 <USBH_LL_Start>
      break;
 802c790:	e010      	b.n	802c7b4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802c792:	bf00      	nop
 802c794:	e00e      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c796:	bf00      	nop
 802c798:	e00c      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c79a:	bf00      	nop
 802c79c:	e00a      	b.n	802c7b4 <USBH_Process+0x3cc>
    break;
 802c79e:	bf00      	nop
 802c7a0:	e008      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c7a2:	bf00      	nop
 802c7a4:	e006      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c7a6:	bf00      	nop
 802c7a8:	e004      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c7aa:	bf00      	nop
 802c7ac:	e002      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c7ae:	bf00      	nop
 802c7b0:	e000      	b.n	802c7b4 <USBH_Process+0x3cc>
      break;
 802c7b2:	bf00      	nop
  }
  return USBH_OK;
 802c7b4:	2300      	movs	r3, #0
}
 802c7b6:	4618      	mov	r0, r3
 802c7b8:	3710      	adds	r7, #16
 802c7ba:	46bd      	mov	sp, r7
 802c7bc:	bd80      	pop	{r7, pc}
 802c7be:	bf00      	nop

0802c7c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802c7c0:	b580      	push	{r7, lr}
 802c7c2:	b088      	sub	sp, #32
 802c7c4:	af04      	add	r7, sp, #16
 802c7c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802c7c8:	2301      	movs	r3, #1
 802c7ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802c7cc:	2301      	movs	r3, #1
 802c7ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802c7d0:	687b      	ldr	r3, [r7, #4]
 802c7d2:	785b      	ldrb	r3, [r3, #1]
 802c7d4:	2b07      	cmp	r3, #7
 802c7d6:	f200 81c1 	bhi.w	802cb5c <USBH_HandleEnum+0x39c>
 802c7da:	a201      	add	r2, pc, #4	; (adr r2, 802c7e0 <USBH_HandleEnum+0x20>)
 802c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c7e0:	0802c801 	.word	0x0802c801
 802c7e4:	0802c8bf 	.word	0x0802c8bf
 802c7e8:	0802c929 	.word	0x0802c929
 802c7ec:	0802c9b7 	.word	0x0802c9b7
 802c7f0:	0802ca21 	.word	0x0802ca21
 802c7f4:	0802ca91 	.word	0x0802ca91
 802c7f8:	0802cad7 	.word	0x0802cad7
 802c7fc:	0802cb1d 	.word	0x0802cb1d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802c800:	2108      	movs	r1, #8
 802c802:	6878      	ldr	r0, [r7, #4]
 802c804:	f000 fa50 	bl	802cca8 <USBH_Get_DevDesc>
 802c808:	4603      	mov	r3, r0
 802c80a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c80c:	7bbb      	ldrb	r3, [r7, #14]
 802c80e:	2b00      	cmp	r3, #0
 802c810:	d130      	bne.n	802c874 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802c812:	687b      	ldr	r3, [r7, #4]
 802c814:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802c81c:	687b      	ldr	r3, [r7, #4]
 802c81e:	2201      	movs	r2, #1
 802c820:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c822:	687b      	ldr	r3, [r7, #4]
 802c824:	7919      	ldrb	r1, [r3, #4]
 802c826:	687b      	ldr	r3, [r7, #4]
 802c828:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c82c:	687b      	ldr	r3, [r7, #4]
 802c82e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c832:	687a      	ldr	r2, [r7, #4]
 802c834:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c836:	b292      	uxth	r2, r2
 802c838:	9202      	str	r2, [sp, #8]
 802c83a:	2200      	movs	r2, #0
 802c83c:	9201      	str	r2, [sp, #4]
 802c83e:	9300      	str	r3, [sp, #0]
 802c840:	4603      	mov	r3, r0
 802c842:	2280      	movs	r2, #128	; 0x80
 802c844:	6878      	ldr	r0, [r7, #4]
 802c846:	f001 f865 	bl	802d914 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c84a:	687b      	ldr	r3, [r7, #4]
 802c84c:	7959      	ldrb	r1, [r3, #5]
 802c84e:	687b      	ldr	r3, [r7, #4]
 802c850:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c854:	687b      	ldr	r3, [r7, #4]
 802c856:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c85a:	687a      	ldr	r2, [r7, #4]
 802c85c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c85e:	b292      	uxth	r2, r2
 802c860:	9202      	str	r2, [sp, #8]
 802c862:	2200      	movs	r2, #0
 802c864:	9201      	str	r2, [sp, #4]
 802c866:	9300      	str	r3, [sp, #0]
 802c868:	4603      	mov	r3, r0
 802c86a:	2200      	movs	r2, #0
 802c86c:	6878      	ldr	r0, [r7, #4]
 802c86e:	f001 f851 	bl	802d914 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c872:	e175      	b.n	802cb60 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c874:	7bbb      	ldrb	r3, [r7, #14]
 802c876:	2b03      	cmp	r3, #3
 802c878:	f040 8172 	bne.w	802cb60 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802c87c:	687b      	ldr	r3, [r7, #4]
 802c87e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c882:	3301      	adds	r3, #1
 802c884:	b2da      	uxtb	r2, r3
 802c886:	687b      	ldr	r3, [r7, #4]
 802c888:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c88c:	687b      	ldr	r3, [r7, #4]
 802c88e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c892:	2b03      	cmp	r3, #3
 802c894:	d903      	bls.n	802c89e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802c896:	687b      	ldr	r3, [r7, #4]
 802c898:	220d      	movs	r2, #13
 802c89a:	701a      	strb	r2, [r3, #0]
      break;
 802c89c:	e160      	b.n	802cb60 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c89e:	687b      	ldr	r3, [r7, #4]
 802c8a0:	795b      	ldrb	r3, [r3, #5]
 802c8a2:	4619      	mov	r1, r3
 802c8a4:	6878      	ldr	r0, [r7, #4]
 802c8a6:	f001 f885 	bl	802d9b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c8aa:	687b      	ldr	r3, [r7, #4]
 802c8ac:	791b      	ldrb	r3, [r3, #4]
 802c8ae:	4619      	mov	r1, r3
 802c8b0:	6878      	ldr	r0, [r7, #4]
 802c8b2:	f001 f87f 	bl	802d9b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802c8b6:	687b      	ldr	r3, [r7, #4]
 802c8b8:	2200      	movs	r2, #0
 802c8ba:	701a      	strb	r2, [r3, #0]
      break;
 802c8bc:	e150      	b.n	802cb60 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802c8be:	2112      	movs	r1, #18
 802c8c0:	6878      	ldr	r0, [r7, #4]
 802c8c2:	f000 f9f1 	bl	802cca8 <USBH_Get_DevDesc>
 802c8c6:	4603      	mov	r3, r0
 802c8c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c8ca:	7bbb      	ldrb	r3, [r7, #14]
 802c8cc:	2b00      	cmp	r3, #0
 802c8ce:	d103      	bne.n	802c8d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802c8d0:	687b      	ldr	r3, [r7, #4]
 802c8d2:	2202      	movs	r2, #2
 802c8d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c8d6:	e145      	b.n	802cb64 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c8d8:	7bbb      	ldrb	r3, [r7, #14]
 802c8da:	2b03      	cmp	r3, #3
 802c8dc:	f040 8142 	bne.w	802cb64 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802c8e0:	687b      	ldr	r3, [r7, #4]
 802c8e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8e6:	3301      	adds	r3, #1
 802c8e8:	b2da      	uxtb	r2, r3
 802c8ea:	687b      	ldr	r3, [r7, #4]
 802c8ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c8f0:	687b      	ldr	r3, [r7, #4]
 802c8f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8f6:	2b03      	cmp	r3, #3
 802c8f8:	d903      	bls.n	802c902 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802c8fa:	687b      	ldr	r3, [r7, #4]
 802c8fc:	220d      	movs	r2, #13
 802c8fe:	701a      	strb	r2, [r3, #0]
      break;
 802c900:	e130      	b.n	802cb64 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c902:	687b      	ldr	r3, [r7, #4]
 802c904:	795b      	ldrb	r3, [r3, #5]
 802c906:	4619      	mov	r1, r3
 802c908:	6878      	ldr	r0, [r7, #4]
 802c90a:	f001 f853 	bl	802d9b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c90e:	687b      	ldr	r3, [r7, #4]
 802c910:	791b      	ldrb	r3, [r3, #4]
 802c912:	4619      	mov	r1, r3
 802c914:	6878      	ldr	r0, [r7, #4]
 802c916:	f001 f84d 	bl	802d9b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c91a:	687b      	ldr	r3, [r7, #4]
 802c91c:	2200      	movs	r2, #0
 802c91e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c920:	687b      	ldr	r3, [r7, #4]
 802c922:	2200      	movs	r2, #0
 802c924:	701a      	strb	r2, [r3, #0]
      break;
 802c926:	e11d      	b.n	802cb64 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802c928:	2101      	movs	r1, #1
 802c92a:	6878      	ldr	r0, [r7, #4]
 802c92c:	f000 fa68 	bl	802ce00 <USBH_SetAddress>
 802c930:	4603      	mov	r3, r0
 802c932:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c934:	7bbb      	ldrb	r3, [r7, #14]
 802c936:	2b00      	cmp	r3, #0
 802c938:	d132      	bne.n	802c9a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802c93a:	2002      	movs	r0, #2
 802c93c:	f001 fb36 	bl	802dfac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802c940:	687b      	ldr	r3, [r7, #4]
 802c942:	2201      	movs	r2, #1
 802c944:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802c948:	687b      	ldr	r3, [r7, #4]
 802c94a:	2203      	movs	r2, #3
 802c94c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c94e:	687b      	ldr	r3, [r7, #4]
 802c950:	7919      	ldrb	r1, [r3, #4]
 802c952:	687b      	ldr	r3, [r7, #4]
 802c954:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c958:	687b      	ldr	r3, [r7, #4]
 802c95a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c95e:	687a      	ldr	r2, [r7, #4]
 802c960:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c962:	b292      	uxth	r2, r2
 802c964:	9202      	str	r2, [sp, #8]
 802c966:	2200      	movs	r2, #0
 802c968:	9201      	str	r2, [sp, #4]
 802c96a:	9300      	str	r3, [sp, #0]
 802c96c:	4603      	mov	r3, r0
 802c96e:	2280      	movs	r2, #128	; 0x80
 802c970:	6878      	ldr	r0, [r7, #4]
 802c972:	f000 ffcf 	bl	802d914 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c976:	687b      	ldr	r3, [r7, #4]
 802c978:	7959      	ldrb	r1, [r3, #5]
 802c97a:	687b      	ldr	r3, [r7, #4]
 802c97c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c980:	687b      	ldr	r3, [r7, #4]
 802c982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c986:	687a      	ldr	r2, [r7, #4]
 802c988:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c98a:	b292      	uxth	r2, r2
 802c98c:	9202      	str	r2, [sp, #8]
 802c98e:	2200      	movs	r2, #0
 802c990:	9201      	str	r2, [sp, #4]
 802c992:	9300      	str	r3, [sp, #0]
 802c994:	4603      	mov	r3, r0
 802c996:	2200      	movs	r2, #0
 802c998:	6878      	ldr	r0, [r7, #4]
 802c99a:	f000 ffbb 	bl	802d914 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c99e:	e0e3      	b.n	802cb68 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9a0:	7bbb      	ldrb	r3, [r7, #14]
 802c9a2:	2b03      	cmp	r3, #3
 802c9a4:	f040 80e0 	bne.w	802cb68 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c9a8:	687b      	ldr	r3, [r7, #4]
 802c9aa:	220d      	movs	r2, #13
 802c9ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c9ae:	687b      	ldr	r3, [r7, #4]
 802c9b0:	2200      	movs	r2, #0
 802c9b2:	705a      	strb	r2, [r3, #1]
      break;
 802c9b4:	e0d8      	b.n	802cb68 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c9b6:	2109      	movs	r1, #9
 802c9b8:	6878      	ldr	r0, [r7, #4]
 802c9ba:	f000 f99d 	bl	802ccf8 <USBH_Get_CfgDesc>
 802c9be:	4603      	mov	r3, r0
 802c9c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c9c2:	7bbb      	ldrb	r3, [r7, #14]
 802c9c4:	2b00      	cmp	r3, #0
 802c9c6:	d103      	bne.n	802c9d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c9c8:	687b      	ldr	r3, [r7, #4]
 802c9ca:	2204      	movs	r2, #4
 802c9cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c9ce:	e0cd      	b.n	802cb6c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9d0:	7bbb      	ldrb	r3, [r7, #14]
 802c9d2:	2b03      	cmp	r3, #3
 802c9d4:	f040 80ca 	bne.w	802cb6c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c9d8:	687b      	ldr	r3, [r7, #4]
 802c9da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c9de:	3301      	adds	r3, #1
 802c9e0:	b2da      	uxtb	r2, r3
 802c9e2:	687b      	ldr	r3, [r7, #4]
 802c9e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c9e8:	687b      	ldr	r3, [r7, #4]
 802c9ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c9ee:	2b03      	cmp	r3, #3
 802c9f0:	d903      	bls.n	802c9fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802c9f2:	687b      	ldr	r3, [r7, #4]
 802c9f4:	220d      	movs	r2, #13
 802c9f6:	701a      	strb	r2, [r3, #0]
      break;
 802c9f8:	e0b8      	b.n	802cb6c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c9fa:	687b      	ldr	r3, [r7, #4]
 802c9fc:	795b      	ldrb	r3, [r3, #5]
 802c9fe:	4619      	mov	r1, r3
 802ca00:	6878      	ldr	r0, [r7, #4]
 802ca02:	f000 ffd7 	bl	802d9b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca06:	687b      	ldr	r3, [r7, #4]
 802ca08:	791b      	ldrb	r3, [r3, #4]
 802ca0a:	4619      	mov	r1, r3
 802ca0c:	6878      	ldr	r0, [r7, #4]
 802ca0e:	f000 ffd1 	bl	802d9b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca12:	687b      	ldr	r3, [r7, #4]
 802ca14:	2200      	movs	r2, #0
 802ca16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ca18:	687b      	ldr	r3, [r7, #4]
 802ca1a:	2200      	movs	r2, #0
 802ca1c:	701a      	strb	r2, [r3, #0]
      break;
 802ca1e:	e0a5      	b.n	802cb6c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802ca20:	687b      	ldr	r3, [r7, #4]
 802ca22:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802ca26:	4619      	mov	r1, r3
 802ca28:	6878      	ldr	r0, [r7, #4]
 802ca2a:	f000 f965 	bl	802ccf8 <USBH_Get_CfgDesc>
 802ca2e:	4603      	mov	r3, r0
 802ca30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ca32:	7bbb      	ldrb	r3, [r7, #14]
 802ca34:	2b00      	cmp	r3, #0
 802ca36:	d103      	bne.n	802ca40 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802ca38:	687b      	ldr	r3, [r7, #4]
 802ca3a:	2205      	movs	r2, #5
 802ca3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ca3e:	e097      	b.n	802cb70 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ca40:	7bbb      	ldrb	r3, [r7, #14]
 802ca42:	2b03      	cmp	r3, #3
 802ca44:	f040 8094 	bne.w	802cb70 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802ca48:	687b      	ldr	r3, [r7, #4]
 802ca4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca4e:	3301      	adds	r3, #1
 802ca50:	b2da      	uxtb	r2, r3
 802ca52:	687b      	ldr	r3, [r7, #4]
 802ca54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ca58:	687b      	ldr	r3, [r7, #4]
 802ca5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca5e:	2b03      	cmp	r3, #3
 802ca60:	d903      	bls.n	802ca6a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802ca62:	687b      	ldr	r3, [r7, #4]
 802ca64:	220d      	movs	r2, #13
 802ca66:	701a      	strb	r2, [r3, #0]
      break;
 802ca68:	e082      	b.n	802cb70 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ca6a:	687b      	ldr	r3, [r7, #4]
 802ca6c:	795b      	ldrb	r3, [r3, #5]
 802ca6e:	4619      	mov	r1, r3
 802ca70:	6878      	ldr	r0, [r7, #4]
 802ca72:	f000 ff9f 	bl	802d9b4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca76:	687b      	ldr	r3, [r7, #4]
 802ca78:	791b      	ldrb	r3, [r3, #4]
 802ca7a:	4619      	mov	r1, r3
 802ca7c:	6878      	ldr	r0, [r7, #4]
 802ca7e:	f000 ff99 	bl	802d9b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca82:	687b      	ldr	r3, [r7, #4]
 802ca84:	2200      	movs	r2, #0
 802ca86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ca88:	687b      	ldr	r3, [r7, #4]
 802ca8a:	2200      	movs	r2, #0
 802ca8c:	701a      	strb	r2, [r3, #0]
      break;
 802ca8e:	e06f      	b.n	802cb70 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802ca90:	687b      	ldr	r3, [r7, #4]
 802ca92:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	d019      	beq.n	802cace <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ca9a:	687b      	ldr	r3, [r7, #4]
 802ca9c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802caa0:	687b      	ldr	r3, [r7, #4]
 802caa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802caa6:	23ff      	movs	r3, #255	; 0xff
 802caa8:	6878      	ldr	r0, [r7, #4]
 802caaa:	f000 f949 	bl	802cd40 <USBH_Get_StringDesc>
 802caae:	4603      	mov	r3, r0
 802cab0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802cab2:	7bbb      	ldrb	r3, [r7, #14]
 802cab4:	2b00      	cmp	r3, #0
 802cab6:	d103      	bne.n	802cac0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cab8:	687b      	ldr	r3, [r7, #4]
 802caba:	2206      	movs	r2, #6
 802cabc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802cabe:	e059      	b.n	802cb74 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cac0:	7bbb      	ldrb	r3, [r7, #14]
 802cac2:	2b03      	cmp	r3, #3
 802cac4:	d156      	bne.n	802cb74 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cac6:	687b      	ldr	r3, [r7, #4]
 802cac8:	2206      	movs	r2, #6
 802caca:	705a      	strb	r2, [r3, #1]
      break;
 802cacc:	e052      	b.n	802cb74 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cace:	687b      	ldr	r3, [r7, #4]
 802cad0:	2206      	movs	r2, #6
 802cad2:	705a      	strb	r2, [r3, #1]
      break;
 802cad4:	e04e      	b.n	802cb74 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802cad6:	687b      	ldr	r3, [r7, #4]
 802cad8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802cadc:	2b00      	cmp	r3, #0
 802cade:	d019      	beq.n	802cb14 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802cae0:	687b      	ldr	r3, [r7, #4]
 802cae2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802caec:	23ff      	movs	r3, #255	; 0xff
 802caee:	6878      	ldr	r0, [r7, #4]
 802caf0:	f000 f926 	bl	802cd40 <USBH_Get_StringDesc>
 802caf4:	4603      	mov	r3, r0
 802caf6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802caf8:	7bbb      	ldrb	r3, [r7, #14]
 802cafa:	2b00      	cmp	r3, #0
 802cafc:	d103      	bne.n	802cb06 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cafe:	687b      	ldr	r3, [r7, #4]
 802cb00:	2207      	movs	r2, #7
 802cb02:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802cb04:	e038      	b.n	802cb78 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb06:	7bbb      	ldrb	r3, [r7, #14]
 802cb08:	2b03      	cmp	r3, #3
 802cb0a:	d135      	bne.n	802cb78 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb0c:	687b      	ldr	r3, [r7, #4]
 802cb0e:	2207      	movs	r2, #7
 802cb10:	705a      	strb	r2, [r3, #1]
      break;
 802cb12:	e031      	b.n	802cb78 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb14:	687b      	ldr	r3, [r7, #4]
 802cb16:	2207      	movs	r2, #7
 802cb18:	705a      	strb	r2, [r3, #1]
      break;
 802cb1a:	e02d      	b.n	802cb78 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802cb1c:	687b      	ldr	r3, [r7, #4]
 802cb1e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802cb22:	2b00      	cmp	r3, #0
 802cb24:	d017      	beq.n	802cb56 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb26:	687b      	ldr	r3, [r7, #4]
 802cb28:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802cb2c:	687b      	ldr	r3, [r7, #4]
 802cb2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb32:	23ff      	movs	r3, #255	; 0xff
 802cb34:	6878      	ldr	r0, [r7, #4]
 802cb36:	f000 f903 	bl	802cd40 <USBH_Get_StringDesc>
 802cb3a:	4603      	mov	r3, r0
 802cb3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802cb3e:	7bbb      	ldrb	r3, [r7, #14]
 802cb40:	2b00      	cmp	r3, #0
 802cb42:	d102      	bne.n	802cb4a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802cb44:	2300      	movs	r3, #0
 802cb46:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802cb48:	e018      	b.n	802cb7c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb4a:	7bbb      	ldrb	r3, [r7, #14]
 802cb4c:	2b03      	cmp	r3, #3
 802cb4e:	d115      	bne.n	802cb7c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802cb50:	2300      	movs	r3, #0
 802cb52:	73fb      	strb	r3, [r7, #15]
      break;
 802cb54:	e012      	b.n	802cb7c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802cb56:	2300      	movs	r3, #0
 802cb58:	73fb      	strb	r3, [r7, #15]
      break;
 802cb5a:	e00f      	b.n	802cb7c <USBH_HandleEnum+0x3bc>

    default:
      break;
 802cb5c:	bf00      	nop
 802cb5e:	e00e      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb60:	bf00      	nop
 802cb62:	e00c      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb64:	bf00      	nop
 802cb66:	e00a      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb68:	bf00      	nop
 802cb6a:	e008      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb6c:	bf00      	nop
 802cb6e:	e006      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb70:	bf00      	nop
 802cb72:	e004      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb74:	bf00      	nop
 802cb76:	e002      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb78:	bf00      	nop
 802cb7a:	e000      	b.n	802cb7e <USBH_HandleEnum+0x3be>
      break;
 802cb7c:	bf00      	nop
  }
  return Status;
 802cb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 802cb80:	4618      	mov	r0, r3
 802cb82:	3710      	adds	r7, #16
 802cb84:	46bd      	mov	sp, r7
 802cb86:	bd80      	pop	{r7, pc}

0802cb88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802cb88:	b480      	push	{r7}
 802cb8a:	b083      	sub	sp, #12
 802cb8c:	af00      	add	r7, sp, #0
 802cb8e:	6078      	str	r0, [r7, #4]
 802cb90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802cb92:	687b      	ldr	r3, [r7, #4]
 802cb94:	683a      	ldr	r2, [r7, #0]
 802cb96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802cb9a:	bf00      	nop
 802cb9c:	370c      	adds	r7, #12
 802cb9e:	46bd      	mov	sp, r7
 802cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cba4:	4770      	bx	lr

0802cba6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802cba6:	b580      	push	{r7, lr}
 802cba8:	b082      	sub	sp, #8
 802cbaa:	af00      	add	r7, sp, #0
 802cbac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802cbae:	687b      	ldr	r3, [r7, #4]
 802cbb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cbb4:	1c5a      	adds	r2, r3, #1
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802cbbc:	6878      	ldr	r0, [r7, #4]
 802cbbe:	f000 f804 	bl	802cbca <USBH_HandleSof>
}
 802cbc2:	bf00      	nop
 802cbc4:	3708      	adds	r7, #8
 802cbc6:	46bd      	mov	sp, r7
 802cbc8:	bd80      	pop	{r7, pc}

0802cbca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802cbca:	b580      	push	{r7, lr}
 802cbcc:	b082      	sub	sp, #8
 802cbce:	af00      	add	r7, sp, #0
 802cbd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802cbd2:	687b      	ldr	r3, [r7, #4]
 802cbd4:	781b      	ldrb	r3, [r3, #0]
 802cbd6:	b2db      	uxtb	r3, r3
 802cbd8:	2b0b      	cmp	r3, #11
 802cbda:	d10a      	bne.n	802cbf2 <USBH_HandleSof+0x28>
 802cbdc:	687b      	ldr	r3, [r7, #4]
 802cbde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbe2:	2b00      	cmp	r3, #0
 802cbe4:	d005      	beq.n	802cbf2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802cbe6:	687b      	ldr	r3, [r7, #4]
 802cbe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbec:	699b      	ldr	r3, [r3, #24]
 802cbee:	6878      	ldr	r0, [r7, #4]
 802cbf0:	4798      	blx	r3
  }
}
 802cbf2:	bf00      	nop
 802cbf4:	3708      	adds	r7, #8
 802cbf6:	46bd      	mov	sp, r7
 802cbf8:	bd80      	pop	{r7, pc}

0802cbfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802cbfa:	b480      	push	{r7}
 802cbfc:	b083      	sub	sp, #12
 802cbfe:	af00      	add	r7, sp, #0
 802cc00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802cc02:	687b      	ldr	r3, [r7, #4]
 802cc04:	2201      	movs	r2, #1
 802cc06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802cc0a:	bf00      	nop
}
 802cc0c:	370c      	adds	r7, #12
 802cc0e:	46bd      	mov	sp, r7
 802cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc14:	4770      	bx	lr

0802cc16 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802cc16:	b480      	push	{r7}
 802cc18:	b083      	sub	sp, #12
 802cc1a:	af00      	add	r7, sp, #0
 802cc1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802cc1e:	687b      	ldr	r3, [r7, #4]
 802cc20:	2200      	movs	r2, #0
 802cc22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802cc26:	bf00      	nop
}
 802cc28:	370c      	adds	r7, #12
 802cc2a:	46bd      	mov	sp, r7
 802cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc30:	4770      	bx	lr

0802cc32 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802cc32:	b480      	push	{r7}
 802cc34:	b083      	sub	sp, #12
 802cc36:	af00      	add	r7, sp, #0
 802cc38:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802cc3a:	687b      	ldr	r3, [r7, #4]
 802cc3c:	2201      	movs	r2, #1
 802cc3e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802cc42:	687b      	ldr	r3, [r7, #4]
 802cc44:	2200      	movs	r2, #0
 802cc46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802cc4a:	687b      	ldr	r3, [r7, #4]
 802cc4c:	2200      	movs	r2, #0
 802cc4e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cc52:	2300      	movs	r3, #0
}
 802cc54:	4618      	mov	r0, r3
 802cc56:	370c      	adds	r7, #12
 802cc58:	46bd      	mov	sp, r7
 802cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc5e:	4770      	bx	lr

0802cc60 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802cc60:	b580      	push	{r7, lr}
 802cc62:	b082      	sub	sp, #8
 802cc64:	af00      	add	r7, sp, #0
 802cc66:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802cc68:	687b      	ldr	r3, [r7, #4]
 802cc6a:	2201      	movs	r2, #1
 802cc6c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802cc70:	687b      	ldr	r3, [r7, #4]
 802cc72:	2200      	movs	r2, #0
 802cc74:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802cc78:	687b      	ldr	r3, [r7, #4]
 802cc7a:	2200      	movs	r2, #0
 802cc7c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802cc80:	6878      	ldr	r0, [r7, #4]
 802cc82:	f001 f84a 	bl	802dd1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cc86:	687b      	ldr	r3, [r7, #4]
 802cc88:	791b      	ldrb	r3, [r3, #4]
 802cc8a:	4619      	mov	r1, r3
 802cc8c:	6878      	ldr	r0, [r7, #4]
 802cc8e:	f000 fe91 	bl	802d9b4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cc92:	687b      	ldr	r3, [r7, #4]
 802cc94:	795b      	ldrb	r3, [r3, #5]
 802cc96:	4619      	mov	r1, r3
 802cc98:	6878      	ldr	r0, [r7, #4]
 802cc9a:	f000 fe8b 	bl	802d9b4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cc9e:	2300      	movs	r3, #0
}
 802cca0:	4618      	mov	r0, r3
 802cca2:	3708      	adds	r7, #8
 802cca4:	46bd      	mov	sp, r7
 802cca6:	bd80      	pop	{r7, pc}

0802cca8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802cca8:	b580      	push	{r7, lr}
 802ccaa:	b086      	sub	sp, #24
 802ccac:	af02      	add	r7, sp, #8
 802ccae:	6078      	str	r0, [r7, #4]
 802ccb0:	460b      	mov	r3, r1
 802ccb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802ccb4:	687b      	ldr	r3, [r7, #4]
 802ccb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802ccba:	78fb      	ldrb	r3, [r7, #3]
 802ccbc:	b29b      	uxth	r3, r3
 802ccbe:	9300      	str	r3, [sp, #0]
 802ccc0:	4613      	mov	r3, r2
 802ccc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ccc6:	2100      	movs	r1, #0
 802ccc8:	6878      	ldr	r0, [r7, #4]
 802ccca:	f000 f864 	bl	802cd96 <USBH_GetDescriptor>
 802ccce:	4603      	mov	r3, r0
 802ccd0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802ccd2:	7bfb      	ldrb	r3, [r7, #15]
 802ccd4:	2b00      	cmp	r3, #0
 802ccd6:	d10a      	bne.n	802ccee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802ccd8:	687b      	ldr	r3, [r7, #4]
 802ccda:	f203 3026 	addw	r0, r3, #806	; 0x326
 802ccde:	687b      	ldr	r3, [r7, #4]
 802cce0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cce4:	78fa      	ldrb	r2, [r7, #3]
 802cce6:	b292      	uxth	r2, r2
 802cce8:	4619      	mov	r1, r3
 802ccea:	f000 f918 	bl	802cf1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 802ccf0:	4618      	mov	r0, r3
 802ccf2:	3710      	adds	r7, #16
 802ccf4:	46bd      	mov	sp, r7
 802ccf6:	bd80      	pop	{r7, pc}

0802ccf8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802ccf8:	b580      	push	{r7, lr}
 802ccfa:	b086      	sub	sp, #24
 802ccfc:	af02      	add	r7, sp, #8
 802ccfe:	6078      	str	r0, [r7, #4]
 802cd00:	460b      	mov	r3, r1
 802cd02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802cd04:	687b      	ldr	r3, [r7, #4]
 802cd06:	331c      	adds	r3, #28
 802cd08:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802cd0a:	887b      	ldrh	r3, [r7, #2]
 802cd0c:	9300      	str	r3, [sp, #0]
 802cd0e:	68bb      	ldr	r3, [r7, #8]
 802cd10:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cd14:	2100      	movs	r1, #0
 802cd16:	6878      	ldr	r0, [r7, #4]
 802cd18:	f000 f83d 	bl	802cd96 <USBH_GetDescriptor>
 802cd1c:	4603      	mov	r3, r0
 802cd1e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802cd20:	7bfb      	ldrb	r3, [r7, #15]
 802cd22:	2b00      	cmp	r3, #0
 802cd24:	d107      	bne.n	802cd36 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802cd26:	887b      	ldrh	r3, [r7, #2]
 802cd28:	461a      	mov	r2, r3
 802cd2a:	68b9      	ldr	r1, [r7, #8]
 802cd2c:	6878      	ldr	r0, [r7, #4]
 802cd2e:	f000 f987 	bl	802d040 <USBH_ParseCfgDesc>
 802cd32:	4603      	mov	r3, r0
 802cd34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 802cd38:	4618      	mov	r0, r3
 802cd3a:	3710      	adds	r7, #16
 802cd3c:	46bd      	mov	sp, r7
 802cd3e:	bd80      	pop	{r7, pc}

0802cd40 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802cd40:	b580      	push	{r7, lr}
 802cd42:	b088      	sub	sp, #32
 802cd44:	af02      	add	r7, sp, #8
 802cd46:	60f8      	str	r0, [r7, #12]
 802cd48:	607a      	str	r2, [r7, #4]
 802cd4a:	461a      	mov	r2, r3
 802cd4c:	460b      	mov	r3, r1
 802cd4e:	72fb      	strb	r3, [r7, #11]
 802cd50:	4613      	mov	r3, r2
 802cd52:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802cd54:	7afb      	ldrb	r3, [r7, #11]
 802cd56:	b29b      	uxth	r3, r3
 802cd58:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802cd5c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802cd5e:	68fb      	ldr	r3, [r7, #12]
 802cd60:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802cd64:	893b      	ldrh	r3, [r7, #8]
 802cd66:	9300      	str	r3, [sp, #0]
 802cd68:	460b      	mov	r3, r1
 802cd6a:	2100      	movs	r1, #0
 802cd6c:	68f8      	ldr	r0, [r7, #12]
 802cd6e:	f000 f812 	bl	802cd96 <USBH_GetDescriptor>
 802cd72:	4603      	mov	r3, r0
 802cd74:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802cd76:	7dfb      	ldrb	r3, [r7, #23]
 802cd78:	2b00      	cmp	r3, #0
 802cd7a:	d107      	bne.n	802cd8c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802cd7c:	68fb      	ldr	r3, [r7, #12]
 802cd7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cd82:	893a      	ldrh	r2, [r7, #8]
 802cd84:	6879      	ldr	r1, [r7, #4]
 802cd86:	4618      	mov	r0, r3
 802cd88:	f000 fb24 	bl	802d3d4 <USBH_ParseStringDesc>
  }

  return status;
 802cd8c:	7dfb      	ldrb	r3, [r7, #23]
}
 802cd8e:	4618      	mov	r0, r3
 802cd90:	3718      	adds	r7, #24
 802cd92:	46bd      	mov	sp, r7
 802cd94:	bd80      	pop	{r7, pc}

0802cd96 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802cd96:	b580      	push	{r7, lr}
 802cd98:	b084      	sub	sp, #16
 802cd9a:	af00      	add	r7, sp, #0
 802cd9c:	60f8      	str	r0, [r7, #12]
 802cd9e:	607b      	str	r3, [r7, #4]
 802cda0:	460b      	mov	r3, r1
 802cda2:	72fb      	strb	r3, [r7, #11]
 802cda4:	4613      	mov	r3, r2
 802cda6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802cda8:	68fb      	ldr	r3, [r7, #12]
 802cdaa:	789b      	ldrb	r3, [r3, #2]
 802cdac:	2b01      	cmp	r3, #1
 802cdae:	d11c      	bne.n	802cdea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802cdb0:	7afb      	ldrb	r3, [r7, #11]
 802cdb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802cdb6:	b2da      	uxtb	r2, r3
 802cdb8:	68fb      	ldr	r3, [r7, #12]
 802cdba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802cdbc:	68fb      	ldr	r3, [r7, #12]
 802cdbe:	2206      	movs	r2, #6
 802cdc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802cdc2:	68fb      	ldr	r3, [r7, #12]
 802cdc4:	893a      	ldrh	r2, [r7, #8]
 802cdc6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802cdc8:	893b      	ldrh	r3, [r7, #8]
 802cdca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802cdce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802cdd2:	d104      	bne.n	802cdde <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802cdd4:	68fb      	ldr	r3, [r7, #12]
 802cdd6:	f240 4209 	movw	r2, #1033	; 0x409
 802cdda:	829a      	strh	r2, [r3, #20]
 802cddc:	e002      	b.n	802cde4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802cdde:	68fb      	ldr	r3, [r7, #12]
 802cde0:	2200      	movs	r2, #0
 802cde2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802cde4:	68fb      	ldr	r3, [r7, #12]
 802cde6:	8b3a      	ldrh	r2, [r7, #24]
 802cde8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802cdea:	8b3b      	ldrh	r3, [r7, #24]
 802cdec:	461a      	mov	r2, r3
 802cdee:	6879      	ldr	r1, [r7, #4]
 802cdf0:	68f8      	ldr	r0, [r7, #12]
 802cdf2:	f000 fb3d 	bl	802d470 <USBH_CtlReq>
 802cdf6:	4603      	mov	r3, r0
}
 802cdf8:	4618      	mov	r0, r3
 802cdfa:	3710      	adds	r7, #16
 802cdfc:	46bd      	mov	sp, r7
 802cdfe:	bd80      	pop	{r7, pc}

0802ce00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802ce00:	b580      	push	{r7, lr}
 802ce02:	b082      	sub	sp, #8
 802ce04:	af00      	add	r7, sp, #0
 802ce06:	6078      	str	r0, [r7, #4]
 802ce08:	460b      	mov	r3, r1
 802ce0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce0c:	687b      	ldr	r3, [r7, #4]
 802ce0e:	789b      	ldrb	r3, [r3, #2]
 802ce10:	2b01      	cmp	r3, #1
 802ce12:	d10f      	bne.n	802ce34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802ce14:	687b      	ldr	r3, [r7, #4]
 802ce16:	2200      	movs	r2, #0
 802ce18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802ce1a:	687b      	ldr	r3, [r7, #4]
 802ce1c:	2205      	movs	r2, #5
 802ce1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802ce20:	78fb      	ldrb	r3, [r7, #3]
 802ce22:	b29a      	uxth	r2, r3
 802ce24:	687b      	ldr	r3, [r7, #4]
 802ce26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce28:	687b      	ldr	r3, [r7, #4]
 802ce2a:	2200      	movs	r2, #0
 802ce2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce2e:	687b      	ldr	r3, [r7, #4]
 802ce30:	2200      	movs	r2, #0
 802ce32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce34:	2200      	movs	r2, #0
 802ce36:	2100      	movs	r1, #0
 802ce38:	6878      	ldr	r0, [r7, #4]
 802ce3a:	f000 fb19 	bl	802d470 <USBH_CtlReq>
 802ce3e:	4603      	mov	r3, r0
}
 802ce40:	4618      	mov	r0, r3
 802ce42:	3708      	adds	r7, #8
 802ce44:	46bd      	mov	sp, r7
 802ce46:	bd80      	pop	{r7, pc}

0802ce48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802ce48:	b580      	push	{r7, lr}
 802ce4a:	b082      	sub	sp, #8
 802ce4c:	af00      	add	r7, sp, #0
 802ce4e:	6078      	str	r0, [r7, #4]
 802ce50:	460b      	mov	r3, r1
 802ce52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802ce54:	687b      	ldr	r3, [r7, #4]
 802ce56:	789b      	ldrb	r3, [r3, #2]
 802ce58:	2b01      	cmp	r3, #1
 802ce5a:	d10e      	bne.n	802ce7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802ce5c:	687b      	ldr	r3, [r7, #4]
 802ce5e:	2200      	movs	r2, #0
 802ce60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802ce62:	687b      	ldr	r3, [r7, #4]
 802ce64:	2209      	movs	r2, #9
 802ce66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802ce68:	687b      	ldr	r3, [r7, #4]
 802ce6a:	887a      	ldrh	r2, [r7, #2]
 802ce6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce6e:	687b      	ldr	r3, [r7, #4]
 802ce70:	2200      	movs	r2, #0
 802ce72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce74:	687b      	ldr	r3, [r7, #4]
 802ce76:	2200      	movs	r2, #0
 802ce78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce7a:	2200      	movs	r2, #0
 802ce7c:	2100      	movs	r1, #0
 802ce7e:	6878      	ldr	r0, [r7, #4]
 802ce80:	f000 faf6 	bl	802d470 <USBH_CtlReq>
 802ce84:	4603      	mov	r3, r0
}
 802ce86:	4618      	mov	r0, r3
 802ce88:	3708      	adds	r7, #8
 802ce8a:	46bd      	mov	sp, r7
 802ce8c:	bd80      	pop	{r7, pc}

0802ce8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802ce8e:	b580      	push	{r7, lr}
 802ce90:	b082      	sub	sp, #8
 802ce92:	af00      	add	r7, sp, #0
 802ce94:	6078      	str	r0, [r7, #4]
 802ce96:	460b      	mov	r3, r1
 802ce98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce9a:	687b      	ldr	r3, [r7, #4]
 802ce9c:	789b      	ldrb	r3, [r3, #2]
 802ce9e:	2b01      	cmp	r3, #1
 802cea0:	d10f      	bne.n	802cec2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802cea2:	687b      	ldr	r3, [r7, #4]
 802cea4:	2200      	movs	r2, #0
 802cea6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802cea8:	687b      	ldr	r3, [r7, #4]
 802ceaa:	2203      	movs	r2, #3
 802ceac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802ceae:	78fb      	ldrb	r3, [r7, #3]
 802ceb0:	b29a      	uxth	r2, r3
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ceb6:	687b      	ldr	r3, [r7, #4]
 802ceb8:	2200      	movs	r2, #0
 802ceba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cebc:	687b      	ldr	r3, [r7, #4]
 802cebe:	2200      	movs	r2, #0
 802cec0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802cec2:	2200      	movs	r2, #0
 802cec4:	2100      	movs	r1, #0
 802cec6:	6878      	ldr	r0, [r7, #4]
 802cec8:	f000 fad2 	bl	802d470 <USBH_CtlReq>
 802cecc:	4603      	mov	r3, r0
}
 802cece:	4618      	mov	r0, r3
 802ced0:	3708      	adds	r7, #8
 802ced2:	46bd      	mov	sp, r7
 802ced4:	bd80      	pop	{r7, pc}

0802ced6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802ced6:	b580      	push	{r7, lr}
 802ced8:	b082      	sub	sp, #8
 802ceda:	af00      	add	r7, sp, #0
 802cedc:	6078      	str	r0, [r7, #4]
 802cede:	460b      	mov	r3, r1
 802cee0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802cee2:	687b      	ldr	r3, [r7, #4]
 802cee4:	789b      	ldrb	r3, [r3, #2]
 802cee6:	2b01      	cmp	r3, #1
 802cee8:	d10f      	bne.n	802cf0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802ceea:	687b      	ldr	r3, [r7, #4]
 802ceec:	2202      	movs	r2, #2
 802ceee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802cef0:	687b      	ldr	r3, [r7, #4]
 802cef2:	2201      	movs	r2, #1
 802cef4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802cef6:	687b      	ldr	r3, [r7, #4]
 802cef8:	2200      	movs	r2, #0
 802cefa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802cefc:	78fb      	ldrb	r3, [r7, #3]
 802cefe:	b29a      	uxth	r2, r3
 802cf00:	687b      	ldr	r3, [r7, #4]
 802cf02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cf04:	687b      	ldr	r3, [r7, #4]
 802cf06:	2200      	movs	r2, #0
 802cf08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802cf0a:	2200      	movs	r2, #0
 802cf0c:	2100      	movs	r1, #0
 802cf0e:	6878      	ldr	r0, [r7, #4]
 802cf10:	f000 faae 	bl	802d470 <USBH_CtlReq>
 802cf14:	4603      	mov	r3, r0
}
 802cf16:	4618      	mov	r0, r3
 802cf18:	3708      	adds	r7, #8
 802cf1a:	46bd      	mov	sp, r7
 802cf1c:	bd80      	pop	{r7, pc}

0802cf1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802cf1e:	b480      	push	{r7}
 802cf20:	b085      	sub	sp, #20
 802cf22:	af00      	add	r7, sp, #0
 802cf24:	60f8      	str	r0, [r7, #12]
 802cf26:	60b9      	str	r1, [r7, #8]
 802cf28:	4613      	mov	r3, r2
 802cf2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802cf2c:	68bb      	ldr	r3, [r7, #8]
 802cf2e:	781a      	ldrb	r2, [r3, #0]
 802cf30:	68fb      	ldr	r3, [r7, #12]
 802cf32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802cf34:	68bb      	ldr	r3, [r7, #8]
 802cf36:	785a      	ldrb	r2, [r3, #1]
 802cf38:	68fb      	ldr	r3, [r7, #12]
 802cf3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802cf3c:	68bb      	ldr	r3, [r7, #8]
 802cf3e:	3302      	adds	r3, #2
 802cf40:	781b      	ldrb	r3, [r3, #0]
 802cf42:	b29a      	uxth	r2, r3
 802cf44:	68bb      	ldr	r3, [r7, #8]
 802cf46:	3303      	adds	r3, #3
 802cf48:	781b      	ldrb	r3, [r3, #0]
 802cf4a:	b29b      	uxth	r3, r3
 802cf4c:	021b      	lsls	r3, r3, #8
 802cf4e:	b29b      	uxth	r3, r3
 802cf50:	4313      	orrs	r3, r2
 802cf52:	b29a      	uxth	r2, r3
 802cf54:	68fb      	ldr	r3, [r7, #12]
 802cf56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802cf58:	68bb      	ldr	r3, [r7, #8]
 802cf5a:	791a      	ldrb	r2, [r3, #4]
 802cf5c:	68fb      	ldr	r3, [r7, #12]
 802cf5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802cf60:	68bb      	ldr	r3, [r7, #8]
 802cf62:	795a      	ldrb	r2, [r3, #5]
 802cf64:	68fb      	ldr	r3, [r7, #12]
 802cf66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802cf68:	68bb      	ldr	r3, [r7, #8]
 802cf6a:	799a      	ldrb	r2, [r3, #6]
 802cf6c:	68fb      	ldr	r3, [r7, #12]
 802cf6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802cf70:	68bb      	ldr	r3, [r7, #8]
 802cf72:	79da      	ldrb	r2, [r3, #7]
 802cf74:	68fb      	ldr	r3, [r7, #12]
 802cf76:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802cf78:	68fb      	ldr	r3, [r7, #12]
 802cf7a:	79db      	ldrb	r3, [r3, #7]
 802cf7c:	2b20      	cmp	r3, #32
 802cf7e:	dc11      	bgt.n	802cfa4 <USBH_ParseDevDesc+0x86>
 802cf80:	2b08      	cmp	r3, #8
 802cf82:	db16      	blt.n	802cfb2 <USBH_ParseDevDesc+0x94>
 802cf84:	3b08      	subs	r3, #8
 802cf86:	2201      	movs	r2, #1
 802cf88:	fa02 f303 	lsl.w	r3, r2, r3
 802cf8c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802cf90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cf94:	2b00      	cmp	r3, #0
 802cf96:	bf14      	ite	ne
 802cf98:	2301      	movne	r3, #1
 802cf9a:	2300      	moveq	r3, #0
 802cf9c:	b2db      	uxtb	r3, r3
 802cf9e:	2b00      	cmp	r3, #0
 802cfa0:	d102      	bne.n	802cfa8 <USBH_ParseDevDesc+0x8a>
 802cfa2:	e006      	b.n	802cfb2 <USBH_ParseDevDesc+0x94>
 802cfa4:	2b40      	cmp	r3, #64	; 0x40
 802cfa6:	d104      	bne.n	802cfb2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802cfa8:	68fb      	ldr	r3, [r7, #12]
 802cfaa:	79da      	ldrb	r2, [r3, #7]
 802cfac:	68fb      	ldr	r3, [r7, #12]
 802cfae:	71da      	strb	r2, [r3, #7]
      break;
 802cfb0:	e003      	b.n	802cfba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802cfb2:	68fb      	ldr	r3, [r7, #12]
 802cfb4:	2240      	movs	r2, #64	; 0x40
 802cfb6:	71da      	strb	r2, [r3, #7]
      break;
 802cfb8:	bf00      	nop
  }

  if (length > 8U)
 802cfba:	88fb      	ldrh	r3, [r7, #6]
 802cfbc:	2b08      	cmp	r3, #8
 802cfbe:	d939      	bls.n	802d034 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802cfc0:	68bb      	ldr	r3, [r7, #8]
 802cfc2:	3308      	adds	r3, #8
 802cfc4:	781b      	ldrb	r3, [r3, #0]
 802cfc6:	b29a      	uxth	r2, r3
 802cfc8:	68bb      	ldr	r3, [r7, #8]
 802cfca:	3309      	adds	r3, #9
 802cfcc:	781b      	ldrb	r3, [r3, #0]
 802cfce:	b29b      	uxth	r3, r3
 802cfd0:	021b      	lsls	r3, r3, #8
 802cfd2:	b29b      	uxth	r3, r3
 802cfd4:	4313      	orrs	r3, r2
 802cfd6:	b29a      	uxth	r2, r3
 802cfd8:	68fb      	ldr	r3, [r7, #12]
 802cfda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802cfdc:	68bb      	ldr	r3, [r7, #8]
 802cfde:	330a      	adds	r3, #10
 802cfe0:	781b      	ldrb	r3, [r3, #0]
 802cfe2:	b29a      	uxth	r2, r3
 802cfe4:	68bb      	ldr	r3, [r7, #8]
 802cfe6:	330b      	adds	r3, #11
 802cfe8:	781b      	ldrb	r3, [r3, #0]
 802cfea:	b29b      	uxth	r3, r3
 802cfec:	021b      	lsls	r3, r3, #8
 802cfee:	b29b      	uxth	r3, r3
 802cff0:	4313      	orrs	r3, r2
 802cff2:	b29a      	uxth	r2, r3
 802cff4:	68fb      	ldr	r3, [r7, #12]
 802cff6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802cff8:	68bb      	ldr	r3, [r7, #8]
 802cffa:	330c      	adds	r3, #12
 802cffc:	781b      	ldrb	r3, [r3, #0]
 802cffe:	b29a      	uxth	r2, r3
 802d000:	68bb      	ldr	r3, [r7, #8]
 802d002:	330d      	adds	r3, #13
 802d004:	781b      	ldrb	r3, [r3, #0]
 802d006:	b29b      	uxth	r3, r3
 802d008:	021b      	lsls	r3, r3, #8
 802d00a:	b29b      	uxth	r3, r3
 802d00c:	4313      	orrs	r3, r2
 802d00e:	b29a      	uxth	r2, r3
 802d010:	68fb      	ldr	r3, [r7, #12]
 802d012:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802d014:	68bb      	ldr	r3, [r7, #8]
 802d016:	7b9a      	ldrb	r2, [r3, #14]
 802d018:	68fb      	ldr	r3, [r7, #12]
 802d01a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802d01c:	68bb      	ldr	r3, [r7, #8]
 802d01e:	7bda      	ldrb	r2, [r3, #15]
 802d020:	68fb      	ldr	r3, [r7, #12]
 802d022:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802d024:	68bb      	ldr	r3, [r7, #8]
 802d026:	7c1a      	ldrb	r2, [r3, #16]
 802d028:	68fb      	ldr	r3, [r7, #12]
 802d02a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802d02c:	68bb      	ldr	r3, [r7, #8]
 802d02e:	7c5a      	ldrb	r2, [r3, #17]
 802d030:	68fb      	ldr	r3, [r7, #12]
 802d032:	745a      	strb	r2, [r3, #17]
  }
}
 802d034:	bf00      	nop
 802d036:	3714      	adds	r7, #20
 802d038:	46bd      	mov	sp, r7
 802d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d03e:	4770      	bx	lr

0802d040 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802d040:	b580      	push	{r7, lr}
 802d042:	b08c      	sub	sp, #48	; 0x30
 802d044:	af00      	add	r7, sp, #0
 802d046:	60f8      	str	r0, [r7, #12]
 802d048:	60b9      	str	r1, [r7, #8]
 802d04a:	4613      	mov	r3, r2
 802d04c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802d04e:	68fb      	ldr	r3, [r7, #12]
 802d050:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802d054:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802d056:	2300      	movs	r3, #0
 802d058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802d05c:	68bb      	ldr	r3, [r7, #8]
 802d05e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802d060:	2300      	movs	r3, #0
 802d062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802d066:	2300      	movs	r3, #0
 802d068:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802d06c:	68bb      	ldr	r3, [r7, #8]
 802d06e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802d070:	68bb      	ldr	r3, [r7, #8]
 802d072:	781a      	ldrb	r2, [r3, #0]
 802d074:	6a3b      	ldr	r3, [r7, #32]
 802d076:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802d078:	68bb      	ldr	r3, [r7, #8]
 802d07a:	785a      	ldrb	r2, [r3, #1]
 802d07c:	6a3b      	ldr	r3, [r7, #32]
 802d07e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802d080:	68bb      	ldr	r3, [r7, #8]
 802d082:	3302      	adds	r3, #2
 802d084:	781b      	ldrb	r3, [r3, #0]
 802d086:	b29a      	uxth	r2, r3
 802d088:	68bb      	ldr	r3, [r7, #8]
 802d08a:	3303      	adds	r3, #3
 802d08c:	781b      	ldrb	r3, [r3, #0]
 802d08e:	b29b      	uxth	r3, r3
 802d090:	021b      	lsls	r3, r3, #8
 802d092:	b29b      	uxth	r3, r3
 802d094:	4313      	orrs	r3, r2
 802d096:	b29b      	uxth	r3, r3
 802d098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d09c:	bf28      	it	cs
 802d09e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802d0a2:	b29a      	uxth	r2, r3
 802d0a4:	6a3b      	ldr	r3, [r7, #32]
 802d0a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802d0a8:	68bb      	ldr	r3, [r7, #8]
 802d0aa:	791a      	ldrb	r2, [r3, #4]
 802d0ac:	6a3b      	ldr	r3, [r7, #32]
 802d0ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802d0b0:	68bb      	ldr	r3, [r7, #8]
 802d0b2:	795a      	ldrb	r2, [r3, #5]
 802d0b4:	6a3b      	ldr	r3, [r7, #32]
 802d0b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802d0b8:	68bb      	ldr	r3, [r7, #8]
 802d0ba:	799a      	ldrb	r2, [r3, #6]
 802d0bc:	6a3b      	ldr	r3, [r7, #32]
 802d0be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802d0c0:	68bb      	ldr	r3, [r7, #8]
 802d0c2:	79da      	ldrb	r2, [r3, #7]
 802d0c4:	6a3b      	ldr	r3, [r7, #32]
 802d0c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802d0c8:	68bb      	ldr	r3, [r7, #8]
 802d0ca:	7a1a      	ldrb	r2, [r3, #8]
 802d0cc:	6a3b      	ldr	r3, [r7, #32]
 802d0ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802d0d0:	6a3b      	ldr	r3, [r7, #32]
 802d0d2:	781b      	ldrb	r3, [r3, #0]
 802d0d4:	2b09      	cmp	r3, #9
 802d0d6:	d002      	beq.n	802d0de <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802d0d8:	6a3b      	ldr	r3, [r7, #32]
 802d0da:	2209      	movs	r2, #9
 802d0dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802d0de:	88fb      	ldrh	r3, [r7, #6]
 802d0e0:	2b09      	cmp	r3, #9
 802d0e2:	f240 809d 	bls.w	802d220 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802d0e6:	2309      	movs	r3, #9
 802d0e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802d0ea:	2300      	movs	r3, #0
 802d0ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d0ee:	e081      	b.n	802d1f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d0f0:	f107 0316 	add.w	r3, r7, #22
 802d0f4:	4619      	mov	r1, r3
 802d0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d0f8:	f000 f99f 	bl	802d43a <USBH_GetNextDesc>
 802d0fc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d100:	785b      	ldrb	r3, [r3, #1]
 802d102:	2b04      	cmp	r3, #4
 802d104:	d176      	bne.n	802d1f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d108:	781b      	ldrb	r3, [r3, #0]
 802d10a:	2b09      	cmp	r3, #9
 802d10c:	d002      	beq.n	802d114 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d110:	2209      	movs	r2, #9
 802d112:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802d114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d118:	221a      	movs	r2, #26
 802d11a:	fb02 f303 	mul.w	r3, r2, r3
 802d11e:	3308      	adds	r3, #8
 802d120:	6a3a      	ldr	r2, [r7, #32]
 802d122:	4413      	add	r3, r2
 802d124:	3302      	adds	r3, #2
 802d126:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802d128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802d12a:	69f8      	ldr	r0, [r7, #28]
 802d12c:	f000 f87e 	bl	802d22c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802d130:	2300      	movs	r3, #0
 802d132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802d136:	2300      	movs	r3, #0
 802d138:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d13a:	e043      	b.n	802d1c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d13c:	f107 0316 	add.w	r3, r7, #22
 802d140:	4619      	mov	r1, r3
 802d142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d144:	f000 f979 	bl	802d43a <USBH_GetNextDesc>
 802d148:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d14c:	785b      	ldrb	r3, [r3, #1]
 802d14e:	2b05      	cmp	r3, #5
 802d150:	d138      	bne.n	802d1c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802d152:	69fb      	ldr	r3, [r7, #28]
 802d154:	795b      	ldrb	r3, [r3, #5]
 802d156:	2b01      	cmp	r3, #1
 802d158:	d10f      	bne.n	802d17a <USBH_ParseCfgDesc+0x13a>
 802d15a:	69fb      	ldr	r3, [r7, #28]
 802d15c:	799b      	ldrb	r3, [r3, #6]
 802d15e:	2b02      	cmp	r3, #2
 802d160:	d10b      	bne.n	802d17a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d162:	69fb      	ldr	r3, [r7, #28]
 802d164:	79db      	ldrb	r3, [r3, #7]
 802d166:	2b00      	cmp	r3, #0
 802d168:	d10f      	bne.n	802d18a <USBH_ParseCfgDesc+0x14a>
 802d16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d16c:	781b      	ldrb	r3, [r3, #0]
 802d16e:	2b09      	cmp	r3, #9
 802d170:	d00b      	beq.n	802d18a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802d172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d174:	2209      	movs	r2, #9
 802d176:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d178:	e007      	b.n	802d18a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d17c:	781b      	ldrb	r3, [r3, #0]
 802d17e:	2b07      	cmp	r3, #7
 802d180:	d004      	beq.n	802d18c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802d182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d184:	2207      	movs	r2, #7
 802d186:	701a      	strb	r2, [r3, #0]
 802d188:	e000      	b.n	802d18c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d18a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802d18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d190:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d194:	3201      	adds	r2, #1
 802d196:	00d2      	lsls	r2, r2, #3
 802d198:	211a      	movs	r1, #26
 802d19a:	fb01 f303 	mul.w	r3, r1, r3
 802d19e:	4413      	add	r3, r2
 802d1a0:	3308      	adds	r3, #8
 802d1a2:	6a3a      	ldr	r2, [r7, #32]
 802d1a4:	4413      	add	r3, r2
 802d1a6:	3304      	adds	r3, #4
 802d1a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802d1aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d1ac:	69b9      	ldr	r1, [r7, #24]
 802d1ae:	68f8      	ldr	r0, [r7, #12]
 802d1b0:	f000 f86b 	bl	802d28a <USBH_ParseEPDesc>
 802d1b4:	4603      	mov	r3, r0
 802d1b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802d1ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d1be:	3301      	adds	r3, #1
 802d1c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d1c4:	69fb      	ldr	r3, [r7, #28]
 802d1c6:	791b      	ldrb	r3, [r3, #4]
 802d1c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1cc:	429a      	cmp	r2, r3
 802d1ce:	d204      	bcs.n	802d1da <USBH_ParseCfgDesc+0x19a>
 802d1d0:	6a3b      	ldr	r3, [r7, #32]
 802d1d2:	885a      	ldrh	r2, [r3, #2]
 802d1d4:	8afb      	ldrh	r3, [r7, #22]
 802d1d6:	429a      	cmp	r2, r3
 802d1d8:	d8b0      	bhi.n	802d13c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802d1da:	69fb      	ldr	r3, [r7, #28]
 802d1dc:	791b      	ldrb	r3, [r3, #4]
 802d1de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1e2:	429a      	cmp	r2, r3
 802d1e4:	d201      	bcs.n	802d1ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802d1e6:	2303      	movs	r3, #3
 802d1e8:	e01c      	b.n	802d224 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802d1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d1ee:	3301      	adds	r3, #1
 802d1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d1f8:	2b01      	cmp	r3, #1
 802d1fa:	d805      	bhi.n	802d208 <USBH_ParseCfgDesc+0x1c8>
 802d1fc:	6a3b      	ldr	r3, [r7, #32]
 802d1fe:	885a      	ldrh	r2, [r3, #2]
 802d200:	8afb      	ldrh	r3, [r7, #22]
 802d202:	429a      	cmp	r2, r3
 802d204:	f63f af74 	bhi.w	802d0f0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802d208:	6a3b      	ldr	r3, [r7, #32]
 802d20a:	791b      	ldrb	r3, [r3, #4]
 802d20c:	2b02      	cmp	r3, #2
 802d20e:	bf28      	it	cs
 802d210:	2302      	movcs	r3, #2
 802d212:	b2db      	uxtb	r3, r3
 802d214:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802d218:	429a      	cmp	r2, r3
 802d21a:	d201      	bcs.n	802d220 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802d21c:	2303      	movs	r3, #3
 802d21e:	e001      	b.n	802d224 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802d220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802d224:	4618      	mov	r0, r3
 802d226:	3730      	adds	r7, #48	; 0x30
 802d228:	46bd      	mov	sp, r7
 802d22a:	bd80      	pop	{r7, pc}

0802d22c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802d22c:	b480      	push	{r7}
 802d22e:	b083      	sub	sp, #12
 802d230:	af00      	add	r7, sp, #0
 802d232:	6078      	str	r0, [r7, #4]
 802d234:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802d236:	683b      	ldr	r3, [r7, #0]
 802d238:	781a      	ldrb	r2, [r3, #0]
 802d23a:	687b      	ldr	r3, [r7, #4]
 802d23c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802d23e:	683b      	ldr	r3, [r7, #0]
 802d240:	785a      	ldrb	r2, [r3, #1]
 802d242:	687b      	ldr	r3, [r7, #4]
 802d244:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802d246:	683b      	ldr	r3, [r7, #0]
 802d248:	789a      	ldrb	r2, [r3, #2]
 802d24a:	687b      	ldr	r3, [r7, #4]
 802d24c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802d24e:	683b      	ldr	r3, [r7, #0]
 802d250:	78da      	ldrb	r2, [r3, #3]
 802d252:	687b      	ldr	r3, [r7, #4]
 802d254:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802d256:	683b      	ldr	r3, [r7, #0]
 802d258:	791a      	ldrb	r2, [r3, #4]
 802d25a:	687b      	ldr	r3, [r7, #4]
 802d25c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802d25e:	683b      	ldr	r3, [r7, #0]
 802d260:	795a      	ldrb	r2, [r3, #5]
 802d262:	687b      	ldr	r3, [r7, #4]
 802d264:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802d266:	683b      	ldr	r3, [r7, #0]
 802d268:	799a      	ldrb	r2, [r3, #6]
 802d26a:	687b      	ldr	r3, [r7, #4]
 802d26c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802d26e:	683b      	ldr	r3, [r7, #0]
 802d270:	79da      	ldrb	r2, [r3, #7]
 802d272:	687b      	ldr	r3, [r7, #4]
 802d274:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802d276:	683b      	ldr	r3, [r7, #0]
 802d278:	7a1a      	ldrb	r2, [r3, #8]
 802d27a:	687b      	ldr	r3, [r7, #4]
 802d27c:	721a      	strb	r2, [r3, #8]
}
 802d27e:	bf00      	nop
 802d280:	370c      	adds	r7, #12
 802d282:	46bd      	mov	sp, r7
 802d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d288:	4770      	bx	lr

0802d28a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802d28a:	b480      	push	{r7}
 802d28c:	b087      	sub	sp, #28
 802d28e:	af00      	add	r7, sp, #0
 802d290:	60f8      	str	r0, [r7, #12]
 802d292:	60b9      	str	r1, [r7, #8]
 802d294:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802d296:	2300      	movs	r3, #0
 802d298:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802d29a:	687b      	ldr	r3, [r7, #4]
 802d29c:	781a      	ldrb	r2, [r3, #0]
 802d29e:	68bb      	ldr	r3, [r7, #8]
 802d2a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802d2a2:	687b      	ldr	r3, [r7, #4]
 802d2a4:	785a      	ldrb	r2, [r3, #1]
 802d2a6:	68bb      	ldr	r3, [r7, #8]
 802d2a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802d2aa:	687b      	ldr	r3, [r7, #4]
 802d2ac:	789a      	ldrb	r2, [r3, #2]
 802d2ae:	68bb      	ldr	r3, [r7, #8]
 802d2b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802d2b2:	687b      	ldr	r3, [r7, #4]
 802d2b4:	78da      	ldrb	r2, [r3, #3]
 802d2b6:	68bb      	ldr	r3, [r7, #8]
 802d2b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802d2ba:	687b      	ldr	r3, [r7, #4]
 802d2bc:	3304      	adds	r3, #4
 802d2be:	781b      	ldrb	r3, [r3, #0]
 802d2c0:	b29a      	uxth	r2, r3
 802d2c2:	687b      	ldr	r3, [r7, #4]
 802d2c4:	3305      	adds	r3, #5
 802d2c6:	781b      	ldrb	r3, [r3, #0]
 802d2c8:	b29b      	uxth	r3, r3
 802d2ca:	021b      	lsls	r3, r3, #8
 802d2cc:	b29b      	uxth	r3, r3
 802d2ce:	4313      	orrs	r3, r2
 802d2d0:	b29a      	uxth	r2, r3
 802d2d2:	68bb      	ldr	r3, [r7, #8]
 802d2d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802d2d6:	687b      	ldr	r3, [r7, #4]
 802d2d8:	799a      	ldrb	r2, [r3, #6]
 802d2da:	68bb      	ldr	r3, [r7, #8]
 802d2dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802d2de:	68bb      	ldr	r3, [r7, #8]
 802d2e0:	889b      	ldrh	r3, [r3, #4]
 802d2e2:	2b00      	cmp	r3, #0
 802d2e4:	d102      	bne.n	802d2ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802d2e6:	2303      	movs	r3, #3
 802d2e8:	75fb      	strb	r3, [r7, #23]
 802d2ea:	e033      	b.n	802d354 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802d2ec:	68bb      	ldr	r3, [r7, #8]
 802d2ee:	889b      	ldrh	r3, [r3, #4]
 802d2f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802d2f4:	f023 0307 	bic.w	r3, r3, #7
 802d2f8:	b29a      	uxth	r2, r3
 802d2fa:	68bb      	ldr	r3, [r7, #8]
 802d2fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802d2fe:	68bb      	ldr	r3, [r7, #8]
 802d300:	889b      	ldrh	r3, [r3, #4]
 802d302:	b21a      	sxth	r2, r3
 802d304:	687b      	ldr	r3, [r7, #4]
 802d306:	3304      	adds	r3, #4
 802d308:	781b      	ldrb	r3, [r3, #0]
 802d30a:	b299      	uxth	r1, r3
 802d30c:	687b      	ldr	r3, [r7, #4]
 802d30e:	3305      	adds	r3, #5
 802d310:	781b      	ldrb	r3, [r3, #0]
 802d312:	b29b      	uxth	r3, r3
 802d314:	021b      	lsls	r3, r3, #8
 802d316:	b29b      	uxth	r3, r3
 802d318:	430b      	orrs	r3, r1
 802d31a:	b29b      	uxth	r3, r3
 802d31c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d320:	2b00      	cmp	r3, #0
 802d322:	d110      	bne.n	802d346 <USBH_ParseEPDesc+0xbc>
 802d324:	687b      	ldr	r3, [r7, #4]
 802d326:	3304      	adds	r3, #4
 802d328:	781b      	ldrb	r3, [r3, #0]
 802d32a:	b299      	uxth	r1, r3
 802d32c:	687b      	ldr	r3, [r7, #4]
 802d32e:	3305      	adds	r3, #5
 802d330:	781b      	ldrb	r3, [r3, #0]
 802d332:	b29b      	uxth	r3, r3
 802d334:	021b      	lsls	r3, r3, #8
 802d336:	b29b      	uxth	r3, r3
 802d338:	430b      	orrs	r3, r1
 802d33a:	b29b      	uxth	r3, r3
 802d33c:	b21b      	sxth	r3, r3
 802d33e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802d342:	b21b      	sxth	r3, r3
 802d344:	e001      	b.n	802d34a <USBH_ParseEPDesc+0xc0>
 802d346:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d34a:	4313      	orrs	r3, r2
 802d34c:	b21b      	sxth	r3, r3
 802d34e:	b29a      	uxth	r2, r3
 802d350:	68bb      	ldr	r3, [r7, #8]
 802d352:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802d354:	68fb      	ldr	r3, [r7, #12]
 802d356:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d35a:	2b00      	cmp	r3, #0
 802d35c:	d116      	bne.n	802d38c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d35e:	68bb      	ldr	r3, [r7, #8]
 802d360:	78db      	ldrb	r3, [r3, #3]
 802d362:	f003 0303 	and.w	r3, r3, #3
 802d366:	2b01      	cmp	r3, #1
 802d368:	d005      	beq.n	802d376 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802d36a:	68bb      	ldr	r3, [r7, #8]
 802d36c:	78db      	ldrb	r3, [r3, #3]
 802d36e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d372:	2b03      	cmp	r3, #3
 802d374:	d127      	bne.n	802d3c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d376:	68bb      	ldr	r3, [r7, #8]
 802d378:	799b      	ldrb	r3, [r3, #6]
 802d37a:	2b00      	cmp	r3, #0
 802d37c:	d003      	beq.n	802d386 <USBH_ParseEPDesc+0xfc>
 802d37e:	68bb      	ldr	r3, [r7, #8]
 802d380:	799b      	ldrb	r3, [r3, #6]
 802d382:	2b10      	cmp	r3, #16
 802d384:	d91f      	bls.n	802d3c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d386:	2303      	movs	r3, #3
 802d388:	75fb      	strb	r3, [r7, #23]
 802d38a:	e01c      	b.n	802d3c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802d38c:	68bb      	ldr	r3, [r7, #8]
 802d38e:	78db      	ldrb	r3, [r3, #3]
 802d390:	f003 0303 	and.w	r3, r3, #3
 802d394:	2b01      	cmp	r3, #1
 802d396:	d10a      	bne.n	802d3ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d398:	68bb      	ldr	r3, [r7, #8]
 802d39a:	799b      	ldrb	r3, [r3, #6]
 802d39c:	2b00      	cmp	r3, #0
 802d39e:	d003      	beq.n	802d3a8 <USBH_ParseEPDesc+0x11e>
 802d3a0:	68bb      	ldr	r3, [r7, #8]
 802d3a2:	799b      	ldrb	r3, [r3, #6]
 802d3a4:	2b10      	cmp	r3, #16
 802d3a6:	d90e      	bls.n	802d3c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3a8:	2303      	movs	r3, #3
 802d3aa:	75fb      	strb	r3, [r7, #23]
 802d3ac:	e00b      	b.n	802d3c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802d3ae:	68bb      	ldr	r3, [r7, #8]
 802d3b0:	78db      	ldrb	r3, [r3, #3]
 802d3b2:	f003 0303 	and.w	r3, r3, #3
 802d3b6:	2b03      	cmp	r3, #3
 802d3b8:	d105      	bne.n	802d3c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802d3ba:	68bb      	ldr	r3, [r7, #8]
 802d3bc:	799b      	ldrb	r3, [r3, #6]
 802d3be:	2b00      	cmp	r3, #0
 802d3c0:	d101      	bne.n	802d3c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3c2:	2303      	movs	r3, #3
 802d3c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802d3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 802d3c8:	4618      	mov	r0, r3
 802d3ca:	371c      	adds	r7, #28
 802d3cc:	46bd      	mov	sp, r7
 802d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d3d2:	4770      	bx	lr

0802d3d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802d3d4:	b480      	push	{r7}
 802d3d6:	b087      	sub	sp, #28
 802d3d8:	af00      	add	r7, sp, #0
 802d3da:	60f8      	str	r0, [r7, #12]
 802d3dc:	60b9      	str	r1, [r7, #8]
 802d3de:	4613      	mov	r3, r2
 802d3e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802d3e2:	68fb      	ldr	r3, [r7, #12]
 802d3e4:	3301      	adds	r3, #1
 802d3e6:	781b      	ldrb	r3, [r3, #0]
 802d3e8:	2b03      	cmp	r3, #3
 802d3ea:	d120      	bne.n	802d42e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802d3ec:	68fb      	ldr	r3, [r7, #12]
 802d3ee:	781b      	ldrb	r3, [r3, #0]
 802d3f0:	1e9a      	subs	r2, r3, #2
 802d3f2:	88fb      	ldrh	r3, [r7, #6]
 802d3f4:	4293      	cmp	r3, r2
 802d3f6:	bf28      	it	cs
 802d3f8:	4613      	movcs	r3, r2
 802d3fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802d3fc:	68fb      	ldr	r3, [r7, #12]
 802d3fe:	3302      	adds	r3, #2
 802d400:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802d402:	2300      	movs	r3, #0
 802d404:	82fb      	strh	r3, [r7, #22]
 802d406:	e00b      	b.n	802d420 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802d408:	8afb      	ldrh	r3, [r7, #22]
 802d40a:	68fa      	ldr	r2, [r7, #12]
 802d40c:	4413      	add	r3, r2
 802d40e:	781a      	ldrb	r2, [r3, #0]
 802d410:	68bb      	ldr	r3, [r7, #8]
 802d412:	701a      	strb	r2, [r3, #0]
      pdest++;
 802d414:	68bb      	ldr	r3, [r7, #8]
 802d416:	3301      	adds	r3, #1
 802d418:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802d41a:	8afb      	ldrh	r3, [r7, #22]
 802d41c:	3302      	adds	r3, #2
 802d41e:	82fb      	strh	r3, [r7, #22]
 802d420:	8afa      	ldrh	r2, [r7, #22]
 802d422:	8abb      	ldrh	r3, [r7, #20]
 802d424:	429a      	cmp	r2, r3
 802d426:	d3ef      	bcc.n	802d408 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802d428:	68bb      	ldr	r3, [r7, #8]
 802d42a:	2200      	movs	r2, #0
 802d42c:	701a      	strb	r2, [r3, #0]
  }
}
 802d42e:	bf00      	nop
 802d430:	371c      	adds	r7, #28
 802d432:	46bd      	mov	sp, r7
 802d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d438:	4770      	bx	lr

0802d43a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802d43a:	b480      	push	{r7}
 802d43c:	b085      	sub	sp, #20
 802d43e:	af00      	add	r7, sp, #0
 802d440:	6078      	str	r0, [r7, #4]
 802d442:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802d444:	683b      	ldr	r3, [r7, #0]
 802d446:	881a      	ldrh	r2, [r3, #0]
 802d448:	687b      	ldr	r3, [r7, #4]
 802d44a:	781b      	ldrb	r3, [r3, #0]
 802d44c:	b29b      	uxth	r3, r3
 802d44e:	4413      	add	r3, r2
 802d450:	b29a      	uxth	r2, r3
 802d452:	683b      	ldr	r3, [r7, #0]
 802d454:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802d456:	687b      	ldr	r3, [r7, #4]
 802d458:	781b      	ldrb	r3, [r3, #0]
 802d45a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802d45c:	687b      	ldr	r3, [r7, #4]
 802d45e:	4413      	add	r3, r2
 802d460:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802d462:	68fb      	ldr	r3, [r7, #12]
}
 802d464:	4618      	mov	r0, r3
 802d466:	3714      	adds	r7, #20
 802d468:	46bd      	mov	sp, r7
 802d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d46e:	4770      	bx	lr

0802d470 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802d470:	b580      	push	{r7, lr}
 802d472:	b086      	sub	sp, #24
 802d474:	af00      	add	r7, sp, #0
 802d476:	60f8      	str	r0, [r7, #12]
 802d478:	60b9      	str	r1, [r7, #8]
 802d47a:	4613      	mov	r3, r2
 802d47c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802d47e:	2301      	movs	r3, #1
 802d480:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802d482:	68fb      	ldr	r3, [r7, #12]
 802d484:	789b      	ldrb	r3, [r3, #2]
 802d486:	2b01      	cmp	r3, #1
 802d488:	d002      	beq.n	802d490 <USBH_CtlReq+0x20>
 802d48a:	2b02      	cmp	r3, #2
 802d48c:	d00f      	beq.n	802d4ae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802d48e:	e027      	b.n	802d4e0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802d490:	68fb      	ldr	r3, [r7, #12]
 802d492:	68ba      	ldr	r2, [r7, #8]
 802d494:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802d496:	68fb      	ldr	r3, [r7, #12]
 802d498:	88fa      	ldrh	r2, [r7, #6]
 802d49a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802d49c:	68fb      	ldr	r3, [r7, #12]
 802d49e:	2201      	movs	r2, #1
 802d4a0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802d4a2:	68fb      	ldr	r3, [r7, #12]
 802d4a4:	2202      	movs	r2, #2
 802d4a6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802d4a8:	2301      	movs	r3, #1
 802d4aa:	75fb      	strb	r3, [r7, #23]
      break;
 802d4ac:	e018      	b.n	802d4e0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802d4ae:	68f8      	ldr	r0, [r7, #12]
 802d4b0:	f000 f81c 	bl	802d4ec <USBH_HandleControl>
 802d4b4:	4603      	mov	r3, r0
 802d4b6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802d4b8:	7dfb      	ldrb	r3, [r7, #23]
 802d4ba:	2b00      	cmp	r3, #0
 802d4bc:	d002      	beq.n	802d4c4 <USBH_CtlReq+0x54>
 802d4be:	7dfb      	ldrb	r3, [r7, #23]
 802d4c0:	2b03      	cmp	r3, #3
 802d4c2:	d106      	bne.n	802d4d2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802d4c4:	68fb      	ldr	r3, [r7, #12]
 802d4c6:	2201      	movs	r2, #1
 802d4c8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802d4ca:	68fb      	ldr	r3, [r7, #12]
 802d4cc:	2200      	movs	r2, #0
 802d4ce:	761a      	strb	r2, [r3, #24]
      break;
 802d4d0:	e005      	b.n	802d4de <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802d4d2:	7dfb      	ldrb	r3, [r7, #23]
 802d4d4:	2b02      	cmp	r3, #2
 802d4d6:	d102      	bne.n	802d4de <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802d4d8:	68fb      	ldr	r3, [r7, #12]
 802d4da:	2201      	movs	r2, #1
 802d4dc:	709a      	strb	r2, [r3, #2]
      break;
 802d4de:	bf00      	nop
  }
  return status;
 802d4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 802d4e2:	4618      	mov	r0, r3
 802d4e4:	3718      	adds	r7, #24
 802d4e6:	46bd      	mov	sp, r7
 802d4e8:	bd80      	pop	{r7, pc}
	...

0802d4ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802d4ec:	b580      	push	{r7, lr}
 802d4ee:	b086      	sub	sp, #24
 802d4f0:	af02      	add	r7, sp, #8
 802d4f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802d4f4:	2301      	movs	r3, #1
 802d4f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d4f8:	2300      	movs	r3, #0
 802d4fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802d4fc:	687b      	ldr	r3, [r7, #4]
 802d4fe:	7e1b      	ldrb	r3, [r3, #24]
 802d500:	3b01      	subs	r3, #1
 802d502:	2b0a      	cmp	r3, #10
 802d504:	f200 8156 	bhi.w	802d7b4 <USBH_HandleControl+0x2c8>
 802d508:	a201      	add	r2, pc, #4	; (adr r2, 802d510 <USBH_HandleControl+0x24>)
 802d50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d50e:	bf00      	nop
 802d510:	0802d53d 	.word	0x0802d53d
 802d514:	0802d557 	.word	0x0802d557
 802d518:	0802d5c1 	.word	0x0802d5c1
 802d51c:	0802d5e7 	.word	0x0802d5e7
 802d520:	0802d61f 	.word	0x0802d61f
 802d524:	0802d649 	.word	0x0802d649
 802d528:	0802d69b 	.word	0x0802d69b
 802d52c:	0802d6bd 	.word	0x0802d6bd
 802d530:	0802d6f9 	.word	0x0802d6f9
 802d534:	0802d71f 	.word	0x0802d71f
 802d538:	0802d75d 	.word	0x0802d75d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802d53c:	687b      	ldr	r3, [r7, #4]
 802d53e:	f103 0110 	add.w	r1, r3, #16
 802d542:	687b      	ldr	r3, [r7, #4]
 802d544:	795b      	ldrb	r3, [r3, #5]
 802d546:	461a      	mov	r2, r3
 802d548:	6878      	ldr	r0, [r7, #4]
 802d54a:	f000 f943 	bl	802d7d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802d54e:	687b      	ldr	r3, [r7, #4]
 802d550:	2202      	movs	r2, #2
 802d552:	761a      	strb	r2, [r3, #24]
      break;
 802d554:	e139      	b.n	802d7ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d556:	687b      	ldr	r3, [r7, #4]
 802d558:	795b      	ldrb	r3, [r3, #5]
 802d55a:	4619      	mov	r1, r3
 802d55c:	6878      	ldr	r0, [r7, #4]
 802d55e:	f000 fccb 	bl	802def8 <USBH_LL_GetURBState>
 802d562:	4603      	mov	r3, r0
 802d564:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802d566:	7bbb      	ldrb	r3, [r7, #14]
 802d568:	2b01      	cmp	r3, #1
 802d56a:	d11e      	bne.n	802d5aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802d56c:	687b      	ldr	r3, [r7, #4]
 802d56e:	7c1b      	ldrb	r3, [r3, #16]
 802d570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802d574:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802d576:	687b      	ldr	r3, [r7, #4]
 802d578:	8adb      	ldrh	r3, [r3, #22]
 802d57a:	2b00      	cmp	r3, #0
 802d57c:	d00a      	beq.n	802d594 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802d57e:	7b7b      	ldrb	r3, [r7, #13]
 802d580:	2b80      	cmp	r3, #128	; 0x80
 802d582:	d103      	bne.n	802d58c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802d584:	687b      	ldr	r3, [r7, #4]
 802d586:	2203      	movs	r2, #3
 802d588:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d58a:	e115      	b.n	802d7b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802d58c:	687b      	ldr	r3, [r7, #4]
 802d58e:	2205      	movs	r2, #5
 802d590:	761a      	strb	r2, [r3, #24]
      break;
 802d592:	e111      	b.n	802d7b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802d594:	7b7b      	ldrb	r3, [r7, #13]
 802d596:	2b80      	cmp	r3, #128	; 0x80
 802d598:	d103      	bne.n	802d5a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802d59a:	687b      	ldr	r3, [r7, #4]
 802d59c:	2209      	movs	r2, #9
 802d59e:	761a      	strb	r2, [r3, #24]
      break;
 802d5a0:	e10a      	b.n	802d7b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802d5a2:	687b      	ldr	r3, [r7, #4]
 802d5a4:	2207      	movs	r2, #7
 802d5a6:	761a      	strb	r2, [r3, #24]
      break;
 802d5a8:	e106      	b.n	802d7b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802d5aa:	7bbb      	ldrb	r3, [r7, #14]
 802d5ac:	2b04      	cmp	r3, #4
 802d5ae:	d003      	beq.n	802d5b8 <USBH_HandleControl+0xcc>
 802d5b0:	7bbb      	ldrb	r3, [r7, #14]
 802d5b2:	2b02      	cmp	r3, #2
 802d5b4:	f040 8100 	bne.w	802d7b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802d5b8:	687b      	ldr	r3, [r7, #4]
 802d5ba:	220b      	movs	r2, #11
 802d5bc:	761a      	strb	r2, [r3, #24]
      break;
 802d5be:	e0fb      	b.n	802d7b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802d5c0:	687b      	ldr	r3, [r7, #4]
 802d5c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d5c6:	b29a      	uxth	r2, r3
 802d5c8:	687b      	ldr	r3, [r7, #4]
 802d5ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802d5cc:	687b      	ldr	r3, [r7, #4]
 802d5ce:	6899      	ldr	r1, [r3, #8]
 802d5d0:	687b      	ldr	r3, [r7, #4]
 802d5d2:	899a      	ldrh	r2, [r3, #12]
 802d5d4:	687b      	ldr	r3, [r7, #4]
 802d5d6:	791b      	ldrb	r3, [r3, #4]
 802d5d8:	6878      	ldr	r0, [r7, #4]
 802d5da:	f000 f93a 	bl	802d852 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802d5de:	687b      	ldr	r3, [r7, #4]
 802d5e0:	2204      	movs	r2, #4
 802d5e2:	761a      	strb	r2, [r3, #24]
      break;
 802d5e4:	e0f1      	b.n	802d7ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d5e6:	687b      	ldr	r3, [r7, #4]
 802d5e8:	791b      	ldrb	r3, [r3, #4]
 802d5ea:	4619      	mov	r1, r3
 802d5ec:	6878      	ldr	r0, [r7, #4]
 802d5ee:	f000 fc83 	bl	802def8 <USBH_LL_GetURBState>
 802d5f2:	4603      	mov	r3, r0
 802d5f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802d5f6:	7bbb      	ldrb	r3, [r7, #14]
 802d5f8:	2b01      	cmp	r3, #1
 802d5fa:	d102      	bne.n	802d602 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802d5fc:	687b      	ldr	r3, [r7, #4]
 802d5fe:	2209      	movs	r2, #9
 802d600:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802d602:	7bbb      	ldrb	r3, [r7, #14]
 802d604:	2b05      	cmp	r3, #5
 802d606:	d102      	bne.n	802d60e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802d608:	2303      	movs	r3, #3
 802d60a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d60c:	e0d6      	b.n	802d7bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802d60e:	7bbb      	ldrb	r3, [r7, #14]
 802d610:	2b04      	cmp	r3, #4
 802d612:	f040 80d3 	bne.w	802d7bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802d616:	687b      	ldr	r3, [r7, #4]
 802d618:	220b      	movs	r2, #11
 802d61a:	761a      	strb	r2, [r3, #24]
      break;
 802d61c:	e0ce      	b.n	802d7bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802d61e:	687b      	ldr	r3, [r7, #4]
 802d620:	6899      	ldr	r1, [r3, #8]
 802d622:	687b      	ldr	r3, [r7, #4]
 802d624:	899a      	ldrh	r2, [r3, #12]
 802d626:	687b      	ldr	r3, [r7, #4]
 802d628:	795b      	ldrb	r3, [r3, #5]
 802d62a:	2001      	movs	r0, #1
 802d62c:	9000      	str	r0, [sp, #0]
 802d62e:	6878      	ldr	r0, [r7, #4]
 802d630:	f000 f8ea 	bl	802d808 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802d634:	687b      	ldr	r3, [r7, #4]
 802d636:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d63a:	b29a      	uxth	r2, r3
 802d63c:	687b      	ldr	r3, [r7, #4]
 802d63e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802d640:	687b      	ldr	r3, [r7, #4]
 802d642:	2206      	movs	r2, #6
 802d644:	761a      	strb	r2, [r3, #24]
      break;
 802d646:	e0c0      	b.n	802d7ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d648:	687b      	ldr	r3, [r7, #4]
 802d64a:	795b      	ldrb	r3, [r3, #5]
 802d64c:	4619      	mov	r1, r3
 802d64e:	6878      	ldr	r0, [r7, #4]
 802d650:	f000 fc52 	bl	802def8 <USBH_LL_GetURBState>
 802d654:	4603      	mov	r3, r0
 802d656:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d658:	7bbb      	ldrb	r3, [r7, #14]
 802d65a:	2b01      	cmp	r3, #1
 802d65c:	d103      	bne.n	802d666 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802d65e:	687b      	ldr	r3, [r7, #4]
 802d660:	2207      	movs	r2, #7
 802d662:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d664:	e0ac      	b.n	802d7c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802d666:	7bbb      	ldrb	r3, [r7, #14]
 802d668:	2b05      	cmp	r3, #5
 802d66a:	d105      	bne.n	802d678 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802d66c:	687b      	ldr	r3, [r7, #4]
 802d66e:	220c      	movs	r2, #12
 802d670:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802d672:	2303      	movs	r3, #3
 802d674:	73fb      	strb	r3, [r7, #15]
      break;
 802d676:	e0a3      	b.n	802d7c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d678:	7bbb      	ldrb	r3, [r7, #14]
 802d67a:	2b02      	cmp	r3, #2
 802d67c:	d103      	bne.n	802d686 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802d67e:	687b      	ldr	r3, [r7, #4]
 802d680:	2205      	movs	r2, #5
 802d682:	761a      	strb	r2, [r3, #24]
      break;
 802d684:	e09c      	b.n	802d7c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802d686:	7bbb      	ldrb	r3, [r7, #14]
 802d688:	2b04      	cmp	r3, #4
 802d68a:	f040 8099 	bne.w	802d7c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802d68e:	687b      	ldr	r3, [r7, #4]
 802d690:	220b      	movs	r2, #11
 802d692:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802d694:	2302      	movs	r3, #2
 802d696:	73fb      	strb	r3, [r7, #15]
      break;
 802d698:	e092      	b.n	802d7c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802d69a:	687b      	ldr	r3, [r7, #4]
 802d69c:	791b      	ldrb	r3, [r3, #4]
 802d69e:	2200      	movs	r2, #0
 802d6a0:	2100      	movs	r1, #0
 802d6a2:	6878      	ldr	r0, [r7, #4]
 802d6a4:	f000 f8d5 	bl	802d852 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d6a8:	687b      	ldr	r3, [r7, #4]
 802d6aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d6ae:	b29a      	uxth	r2, r3
 802d6b0:	687b      	ldr	r3, [r7, #4]
 802d6b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802d6b4:	687b      	ldr	r3, [r7, #4]
 802d6b6:	2208      	movs	r2, #8
 802d6b8:	761a      	strb	r2, [r3, #24]

      break;
 802d6ba:	e086      	b.n	802d7ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d6bc:	687b      	ldr	r3, [r7, #4]
 802d6be:	791b      	ldrb	r3, [r3, #4]
 802d6c0:	4619      	mov	r1, r3
 802d6c2:	6878      	ldr	r0, [r7, #4]
 802d6c4:	f000 fc18 	bl	802def8 <USBH_LL_GetURBState>
 802d6c8:	4603      	mov	r3, r0
 802d6ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d6cc:	7bbb      	ldrb	r3, [r7, #14]
 802d6ce:	2b01      	cmp	r3, #1
 802d6d0:	d105      	bne.n	802d6de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802d6d2:	687b      	ldr	r3, [r7, #4]
 802d6d4:	220d      	movs	r2, #13
 802d6d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802d6d8:	2300      	movs	r3, #0
 802d6da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d6dc:	e072      	b.n	802d7c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802d6de:	7bbb      	ldrb	r3, [r7, #14]
 802d6e0:	2b04      	cmp	r3, #4
 802d6e2:	d103      	bne.n	802d6ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802d6e4:	687b      	ldr	r3, [r7, #4]
 802d6e6:	220b      	movs	r2, #11
 802d6e8:	761a      	strb	r2, [r3, #24]
      break;
 802d6ea:	e06b      	b.n	802d7c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802d6ec:	7bbb      	ldrb	r3, [r7, #14]
 802d6ee:	2b05      	cmp	r3, #5
 802d6f0:	d168      	bne.n	802d7c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802d6f2:	2303      	movs	r3, #3
 802d6f4:	73fb      	strb	r3, [r7, #15]
      break;
 802d6f6:	e065      	b.n	802d7c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802d6f8:	687b      	ldr	r3, [r7, #4]
 802d6fa:	795b      	ldrb	r3, [r3, #5]
 802d6fc:	2201      	movs	r2, #1
 802d6fe:	9200      	str	r2, [sp, #0]
 802d700:	2200      	movs	r2, #0
 802d702:	2100      	movs	r1, #0
 802d704:	6878      	ldr	r0, [r7, #4]
 802d706:	f000 f87f 	bl	802d808 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d70a:	687b      	ldr	r3, [r7, #4]
 802d70c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d710:	b29a      	uxth	r2, r3
 802d712:	687b      	ldr	r3, [r7, #4]
 802d714:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802d716:	687b      	ldr	r3, [r7, #4]
 802d718:	220a      	movs	r2, #10
 802d71a:	761a      	strb	r2, [r3, #24]
      break;
 802d71c:	e055      	b.n	802d7ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d71e:	687b      	ldr	r3, [r7, #4]
 802d720:	795b      	ldrb	r3, [r3, #5]
 802d722:	4619      	mov	r1, r3
 802d724:	6878      	ldr	r0, [r7, #4]
 802d726:	f000 fbe7 	bl	802def8 <USBH_LL_GetURBState>
 802d72a:	4603      	mov	r3, r0
 802d72c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802d72e:	7bbb      	ldrb	r3, [r7, #14]
 802d730:	2b01      	cmp	r3, #1
 802d732:	d105      	bne.n	802d740 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802d734:	2300      	movs	r3, #0
 802d736:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802d738:	687b      	ldr	r3, [r7, #4]
 802d73a:	220d      	movs	r2, #13
 802d73c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d73e:	e043      	b.n	802d7c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d740:	7bbb      	ldrb	r3, [r7, #14]
 802d742:	2b02      	cmp	r3, #2
 802d744:	d103      	bne.n	802d74e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802d746:	687b      	ldr	r3, [r7, #4]
 802d748:	2209      	movs	r2, #9
 802d74a:	761a      	strb	r2, [r3, #24]
      break;
 802d74c:	e03c      	b.n	802d7c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802d74e:	7bbb      	ldrb	r3, [r7, #14]
 802d750:	2b04      	cmp	r3, #4
 802d752:	d139      	bne.n	802d7c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802d754:	687b      	ldr	r3, [r7, #4]
 802d756:	220b      	movs	r2, #11
 802d758:	761a      	strb	r2, [r3, #24]
      break;
 802d75a:	e035      	b.n	802d7c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802d75c:	687b      	ldr	r3, [r7, #4]
 802d75e:	7e5b      	ldrb	r3, [r3, #25]
 802d760:	3301      	adds	r3, #1
 802d762:	b2da      	uxtb	r2, r3
 802d764:	687b      	ldr	r3, [r7, #4]
 802d766:	765a      	strb	r2, [r3, #25]
 802d768:	687b      	ldr	r3, [r7, #4]
 802d76a:	7e5b      	ldrb	r3, [r3, #25]
 802d76c:	2b02      	cmp	r3, #2
 802d76e:	d806      	bhi.n	802d77e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802d770:	687b      	ldr	r3, [r7, #4]
 802d772:	2201      	movs	r2, #1
 802d774:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802d776:	687b      	ldr	r3, [r7, #4]
 802d778:	2201      	movs	r2, #1
 802d77a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802d77c:	e025      	b.n	802d7ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802d77e:	687b      	ldr	r3, [r7, #4]
 802d780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d784:	2106      	movs	r1, #6
 802d786:	6878      	ldr	r0, [r7, #4]
 802d788:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802d78a:	687b      	ldr	r3, [r7, #4]
 802d78c:	2200      	movs	r2, #0
 802d78e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802d790:	687b      	ldr	r3, [r7, #4]
 802d792:	795b      	ldrb	r3, [r3, #5]
 802d794:	4619      	mov	r1, r3
 802d796:	6878      	ldr	r0, [r7, #4]
 802d798:	f000 f90c 	bl	802d9b4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802d79c:	687b      	ldr	r3, [r7, #4]
 802d79e:	791b      	ldrb	r3, [r3, #4]
 802d7a0:	4619      	mov	r1, r3
 802d7a2:	6878      	ldr	r0, [r7, #4]
 802d7a4:	f000 f906 	bl	802d9b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802d7a8:	687b      	ldr	r3, [r7, #4]
 802d7aa:	2200      	movs	r2, #0
 802d7ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802d7ae:	2302      	movs	r3, #2
 802d7b0:	73fb      	strb	r3, [r7, #15]
      break;
 802d7b2:	e00a      	b.n	802d7ca <USBH_HandleControl+0x2de>

    default:
      break;
 802d7b4:	bf00      	nop
 802d7b6:	e008      	b.n	802d7ca <USBH_HandleControl+0x2de>
      break;
 802d7b8:	bf00      	nop
 802d7ba:	e006      	b.n	802d7ca <USBH_HandleControl+0x2de>
      break;
 802d7bc:	bf00      	nop
 802d7be:	e004      	b.n	802d7ca <USBH_HandleControl+0x2de>
      break;
 802d7c0:	bf00      	nop
 802d7c2:	e002      	b.n	802d7ca <USBH_HandleControl+0x2de>
      break;
 802d7c4:	bf00      	nop
 802d7c6:	e000      	b.n	802d7ca <USBH_HandleControl+0x2de>
      break;
 802d7c8:	bf00      	nop
  }

  return status;
 802d7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 802d7cc:	4618      	mov	r0, r3
 802d7ce:	3710      	adds	r7, #16
 802d7d0:	46bd      	mov	sp, r7
 802d7d2:	bd80      	pop	{r7, pc}

0802d7d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802d7d4:	b580      	push	{r7, lr}
 802d7d6:	b088      	sub	sp, #32
 802d7d8:	af04      	add	r7, sp, #16
 802d7da:	60f8      	str	r0, [r7, #12]
 802d7dc:	60b9      	str	r1, [r7, #8]
 802d7de:	4613      	mov	r3, r2
 802d7e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d7e2:	79f9      	ldrb	r1, [r7, #7]
 802d7e4:	2300      	movs	r3, #0
 802d7e6:	9303      	str	r3, [sp, #12]
 802d7e8:	2308      	movs	r3, #8
 802d7ea:	9302      	str	r3, [sp, #8]
 802d7ec:	68bb      	ldr	r3, [r7, #8]
 802d7ee:	9301      	str	r3, [sp, #4]
 802d7f0:	2300      	movs	r3, #0
 802d7f2:	9300      	str	r3, [sp, #0]
 802d7f4:	2300      	movs	r3, #0
 802d7f6:	2200      	movs	r2, #0
 802d7f8:	68f8      	ldr	r0, [r7, #12]
 802d7fa:	f000 fb4c 	bl	802de96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802d7fe:	2300      	movs	r3, #0
}
 802d800:	4618      	mov	r0, r3
 802d802:	3710      	adds	r7, #16
 802d804:	46bd      	mov	sp, r7
 802d806:	bd80      	pop	{r7, pc}

0802d808 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802d808:	b580      	push	{r7, lr}
 802d80a:	b088      	sub	sp, #32
 802d80c:	af04      	add	r7, sp, #16
 802d80e:	60f8      	str	r0, [r7, #12]
 802d810:	60b9      	str	r1, [r7, #8]
 802d812:	4611      	mov	r1, r2
 802d814:	461a      	mov	r2, r3
 802d816:	460b      	mov	r3, r1
 802d818:	80fb      	strh	r3, [r7, #6]
 802d81a:	4613      	mov	r3, r2
 802d81c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d81e:	68fb      	ldr	r3, [r7, #12]
 802d820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d824:	2b00      	cmp	r3, #0
 802d826:	d001      	beq.n	802d82c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802d828:	2300      	movs	r3, #0
 802d82a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d82c:	7979      	ldrb	r1, [r7, #5]
 802d82e:	7e3b      	ldrb	r3, [r7, #24]
 802d830:	9303      	str	r3, [sp, #12]
 802d832:	88fb      	ldrh	r3, [r7, #6]
 802d834:	9302      	str	r3, [sp, #8]
 802d836:	68bb      	ldr	r3, [r7, #8]
 802d838:	9301      	str	r3, [sp, #4]
 802d83a:	2301      	movs	r3, #1
 802d83c:	9300      	str	r3, [sp, #0]
 802d83e:	2300      	movs	r3, #0
 802d840:	2200      	movs	r2, #0
 802d842:	68f8      	ldr	r0, [r7, #12]
 802d844:	f000 fb27 	bl	802de96 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802d848:	2300      	movs	r3, #0
}
 802d84a:	4618      	mov	r0, r3
 802d84c:	3710      	adds	r7, #16
 802d84e:	46bd      	mov	sp, r7
 802d850:	bd80      	pop	{r7, pc}

0802d852 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802d852:	b580      	push	{r7, lr}
 802d854:	b088      	sub	sp, #32
 802d856:	af04      	add	r7, sp, #16
 802d858:	60f8      	str	r0, [r7, #12]
 802d85a:	60b9      	str	r1, [r7, #8]
 802d85c:	4611      	mov	r1, r2
 802d85e:	461a      	mov	r2, r3
 802d860:	460b      	mov	r3, r1
 802d862:	80fb      	strh	r3, [r7, #6]
 802d864:	4613      	mov	r3, r2
 802d866:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d868:	7979      	ldrb	r1, [r7, #5]
 802d86a:	2300      	movs	r3, #0
 802d86c:	9303      	str	r3, [sp, #12]
 802d86e:	88fb      	ldrh	r3, [r7, #6]
 802d870:	9302      	str	r3, [sp, #8]
 802d872:	68bb      	ldr	r3, [r7, #8]
 802d874:	9301      	str	r3, [sp, #4]
 802d876:	2301      	movs	r3, #1
 802d878:	9300      	str	r3, [sp, #0]
 802d87a:	2300      	movs	r3, #0
 802d87c:	2201      	movs	r2, #1
 802d87e:	68f8      	ldr	r0, [r7, #12]
 802d880:	f000 fb09 	bl	802de96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d884:	2300      	movs	r3, #0

}
 802d886:	4618      	mov	r0, r3
 802d888:	3710      	adds	r7, #16
 802d88a:	46bd      	mov	sp, r7
 802d88c:	bd80      	pop	{r7, pc}

0802d88e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802d88e:	b580      	push	{r7, lr}
 802d890:	b088      	sub	sp, #32
 802d892:	af04      	add	r7, sp, #16
 802d894:	60f8      	str	r0, [r7, #12]
 802d896:	60b9      	str	r1, [r7, #8]
 802d898:	4611      	mov	r1, r2
 802d89a:	461a      	mov	r2, r3
 802d89c:	460b      	mov	r3, r1
 802d89e:	80fb      	strh	r3, [r7, #6]
 802d8a0:	4613      	mov	r3, r2
 802d8a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d8a4:	68fb      	ldr	r3, [r7, #12]
 802d8a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d8aa:	2b00      	cmp	r3, #0
 802d8ac:	d001      	beq.n	802d8b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802d8ae:	2300      	movs	r3, #0
 802d8b0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d8b2:	7979      	ldrb	r1, [r7, #5]
 802d8b4:	7e3b      	ldrb	r3, [r7, #24]
 802d8b6:	9303      	str	r3, [sp, #12]
 802d8b8:	88fb      	ldrh	r3, [r7, #6]
 802d8ba:	9302      	str	r3, [sp, #8]
 802d8bc:	68bb      	ldr	r3, [r7, #8]
 802d8be:	9301      	str	r3, [sp, #4]
 802d8c0:	2301      	movs	r3, #1
 802d8c2:	9300      	str	r3, [sp, #0]
 802d8c4:	2302      	movs	r3, #2
 802d8c6:	2200      	movs	r2, #0
 802d8c8:	68f8      	ldr	r0, [r7, #12]
 802d8ca:	f000 fae4 	bl	802de96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802d8ce:	2300      	movs	r3, #0
}
 802d8d0:	4618      	mov	r0, r3
 802d8d2:	3710      	adds	r7, #16
 802d8d4:	46bd      	mov	sp, r7
 802d8d6:	bd80      	pop	{r7, pc}

0802d8d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802d8d8:	b580      	push	{r7, lr}
 802d8da:	b088      	sub	sp, #32
 802d8dc:	af04      	add	r7, sp, #16
 802d8de:	60f8      	str	r0, [r7, #12]
 802d8e0:	60b9      	str	r1, [r7, #8]
 802d8e2:	4611      	mov	r1, r2
 802d8e4:	461a      	mov	r2, r3
 802d8e6:	460b      	mov	r3, r1
 802d8e8:	80fb      	strh	r3, [r7, #6]
 802d8ea:	4613      	mov	r3, r2
 802d8ec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d8ee:	7979      	ldrb	r1, [r7, #5]
 802d8f0:	2300      	movs	r3, #0
 802d8f2:	9303      	str	r3, [sp, #12]
 802d8f4:	88fb      	ldrh	r3, [r7, #6]
 802d8f6:	9302      	str	r3, [sp, #8]
 802d8f8:	68bb      	ldr	r3, [r7, #8]
 802d8fa:	9301      	str	r3, [sp, #4]
 802d8fc:	2301      	movs	r3, #1
 802d8fe:	9300      	str	r3, [sp, #0]
 802d900:	2302      	movs	r3, #2
 802d902:	2201      	movs	r2, #1
 802d904:	68f8      	ldr	r0, [r7, #12]
 802d906:	f000 fac6 	bl	802de96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d90a:	2300      	movs	r3, #0
}
 802d90c:	4618      	mov	r0, r3
 802d90e:	3710      	adds	r7, #16
 802d910:	46bd      	mov	sp, r7
 802d912:	bd80      	pop	{r7, pc}

0802d914 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d914:	b580      	push	{r7, lr}
 802d916:	b086      	sub	sp, #24
 802d918:	af04      	add	r7, sp, #16
 802d91a:	6078      	str	r0, [r7, #4]
 802d91c:	4608      	mov	r0, r1
 802d91e:	4611      	mov	r1, r2
 802d920:	461a      	mov	r2, r3
 802d922:	4603      	mov	r3, r0
 802d924:	70fb      	strb	r3, [r7, #3]
 802d926:	460b      	mov	r3, r1
 802d928:	70bb      	strb	r3, [r7, #2]
 802d92a:	4613      	mov	r3, r2
 802d92c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802d92e:	7878      	ldrb	r0, [r7, #1]
 802d930:	78ba      	ldrb	r2, [r7, #2]
 802d932:	78f9      	ldrb	r1, [r7, #3]
 802d934:	8b3b      	ldrh	r3, [r7, #24]
 802d936:	9302      	str	r3, [sp, #8]
 802d938:	7d3b      	ldrb	r3, [r7, #20]
 802d93a:	9301      	str	r3, [sp, #4]
 802d93c:	7c3b      	ldrb	r3, [r7, #16]
 802d93e:	9300      	str	r3, [sp, #0]
 802d940:	4603      	mov	r3, r0
 802d942:	6878      	ldr	r0, [r7, #4]
 802d944:	f000 fa59 	bl	802ddfa <USBH_LL_OpenPipe>

  return USBH_OK;
 802d948:	2300      	movs	r3, #0
}
 802d94a:	4618      	mov	r0, r3
 802d94c:	3708      	adds	r7, #8
 802d94e:	46bd      	mov	sp, r7
 802d950:	bd80      	pop	{r7, pc}

0802d952 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802d952:	b580      	push	{r7, lr}
 802d954:	b082      	sub	sp, #8
 802d956:	af00      	add	r7, sp, #0
 802d958:	6078      	str	r0, [r7, #4]
 802d95a:	460b      	mov	r3, r1
 802d95c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802d95e:	78fb      	ldrb	r3, [r7, #3]
 802d960:	4619      	mov	r1, r3
 802d962:	6878      	ldr	r0, [r7, #4]
 802d964:	f000 fa78 	bl	802de58 <USBH_LL_ClosePipe>

  return USBH_OK;
 802d968:	2300      	movs	r3, #0
}
 802d96a:	4618      	mov	r0, r3
 802d96c:	3708      	adds	r7, #8
 802d96e:	46bd      	mov	sp, r7
 802d970:	bd80      	pop	{r7, pc}

0802d972 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802d972:	b580      	push	{r7, lr}
 802d974:	b084      	sub	sp, #16
 802d976:	af00      	add	r7, sp, #0
 802d978:	6078      	str	r0, [r7, #4]
 802d97a:	460b      	mov	r3, r1
 802d97c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802d97e:	6878      	ldr	r0, [r7, #4]
 802d980:	f000 f836 	bl	802d9f0 <USBH_GetFreePipe>
 802d984:	4603      	mov	r3, r0
 802d986:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802d988:	89fb      	ldrh	r3, [r7, #14]
 802d98a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d98e:	4293      	cmp	r3, r2
 802d990:	d00a      	beq.n	802d9a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d992:	78fa      	ldrb	r2, [r7, #3]
 802d994:	89fb      	ldrh	r3, [r7, #14]
 802d996:	f003 030f 	and.w	r3, r3, #15
 802d99a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d99e:	6879      	ldr	r1, [r7, #4]
 802d9a0:	33e0      	adds	r3, #224	; 0xe0
 802d9a2:	009b      	lsls	r3, r3, #2
 802d9a4:	440b      	add	r3, r1
 802d9a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d9a8:	89fb      	ldrh	r3, [r7, #14]
 802d9aa:	b2db      	uxtb	r3, r3
}
 802d9ac:	4618      	mov	r0, r3
 802d9ae:	3710      	adds	r7, #16
 802d9b0:	46bd      	mov	sp, r7
 802d9b2:	bd80      	pop	{r7, pc}

0802d9b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d9b4:	b480      	push	{r7}
 802d9b6:	b083      	sub	sp, #12
 802d9b8:	af00      	add	r7, sp, #0
 802d9ba:	6078      	str	r0, [r7, #4]
 802d9bc:	460b      	mov	r3, r1
 802d9be:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d9c0:	78fb      	ldrb	r3, [r7, #3]
 802d9c2:	2b0f      	cmp	r3, #15
 802d9c4:	d80d      	bhi.n	802d9e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d9c6:	78fb      	ldrb	r3, [r7, #3]
 802d9c8:	687a      	ldr	r2, [r7, #4]
 802d9ca:	33e0      	adds	r3, #224	; 0xe0
 802d9cc:	009b      	lsls	r3, r3, #2
 802d9ce:	4413      	add	r3, r2
 802d9d0:	685a      	ldr	r2, [r3, #4]
 802d9d2:	78fb      	ldrb	r3, [r7, #3]
 802d9d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d9d8:	6879      	ldr	r1, [r7, #4]
 802d9da:	33e0      	adds	r3, #224	; 0xe0
 802d9dc:	009b      	lsls	r3, r3, #2
 802d9de:	440b      	add	r3, r1
 802d9e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d9e2:	2300      	movs	r3, #0
}
 802d9e4:	4618      	mov	r0, r3
 802d9e6:	370c      	adds	r7, #12
 802d9e8:	46bd      	mov	sp, r7
 802d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d9ee:	4770      	bx	lr

0802d9f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802d9f0:	b480      	push	{r7}
 802d9f2:	b085      	sub	sp, #20
 802d9f4:	af00      	add	r7, sp, #0
 802d9f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802d9f8:	2300      	movs	r3, #0
 802d9fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d9fc:	2300      	movs	r3, #0
 802d9fe:	73fb      	strb	r3, [r7, #15]
 802da00:	e00f      	b.n	802da22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802da02:	7bfb      	ldrb	r3, [r7, #15]
 802da04:	687a      	ldr	r2, [r7, #4]
 802da06:	33e0      	adds	r3, #224	; 0xe0
 802da08:	009b      	lsls	r3, r3, #2
 802da0a:	4413      	add	r3, r2
 802da0c:	685b      	ldr	r3, [r3, #4]
 802da0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802da12:	2b00      	cmp	r3, #0
 802da14:	d102      	bne.n	802da1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802da16:	7bfb      	ldrb	r3, [r7, #15]
 802da18:	b29b      	uxth	r3, r3
 802da1a:	e007      	b.n	802da2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802da1c:	7bfb      	ldrb	r3, [r7, #15]
 802da1e:	3301      	adds	r3, #1
 802da20:	73fb      	strb	r3, [r7, #15]
 802da22:	7bfb      	ldrb	r3, [r7, #15]
 802da24:	2b0f      	cmp	r3, #15
 802da26:	d9ec      	bls.n	802da02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802da28:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802da2c:	4618      	mov	r0, r3
 802da2e:	3714      	adds	r7, #20
 802da30:	46bd      	mov	sp, r7
 802da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da36:	4770      	bx	lr

0802da38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802da38:	b580      	push	{r7, lr}
 802da3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802da3c:	2200      	movs	r2, #0
 802da3e:	490e      	ldr	r1, [pc, #56]	; (802da78 <MX_USB_HOST_Init+0x40>)
 802da40:	480e      	ldr	r0, [pc, #56]	; (802da7c <MX_USB_HOST_Init+0x44>)
 802da42:	f7fe fba7 	bl	802c194 <USBH_Init>
 802da46:	4603      	mov	r3, r0
 802da48:	2b00      	cmp	r3, #0
 802da4a:	d001      	beq.n	802da50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802da4c:	f7f3 fa30 	bl	8020eb0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802da50:	490b      	ldr	r1, [pc, #44]	; (802da80 <MX_USB_HOST_Init+0x48>)
 802da52:	480a      	ldr	r0, [pc, #40]	; (802da7c <MX_USB_HOST_Init+0x44>)
 802da54:	f7fe fc2c 	bl	802c2b0 <USBH_RegisterClass>
 802da58:	4603      	mov	r3, r0
 802da5a:	2b00      	cmp	r3, #0
 802da5c:	d001      	beq.n	802da62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802da5e:	f7f3 fa27 	bl	8020eb0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802da62:	4806      	ldr	r0, [pc, #24]	; (802da7c <MX_USB_HOST_Init+0x44>)
 802da64:	f7fe fcb0 	bl	802c3c8 <USBH_Start>
 802da68:	4603      	mov	r3, r0
 802da6a:	2b00      	cmp	r3, #0
 802da6c:	d001      	beq.n	802da72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802da6e:	f7f3 fa1f 	bl	8020eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802da72:	bf00      	nop
 802da74:	bd80      	pop	{r7, pc}
 802da76:	bf00      	nop
 802da78:	0802da99 	.word	0x0802da99
 802da7c:	20000b1c 	.word	0x20000b1c
 802da80:	20000060 	.word	0x20000060

0802da84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802da84:	b580      	push	{r7, lr}
 802da86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802da88:	4802      	ldr	r0, [pc, #8]	; (802da94 <MX_USB_HOST_Process+0x10>)
 802da8a:	f7fe fcad 	bl	802c3e8 <USBH_Process>
}
 802da8e:	bf00      	nop
 802da90:	bd80      	pop	{r7, pc}
 802da92:	bf00      	nop
 802da94:	20000b1c 	.word	0x20000b1c

0802da98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802da98:	b480      	push	{r7}
 802da9a:	b083      	sub	sp, #12
 802da9c:	af00      	add	r7, sp, #0
 802da9e:	6078      	str	r0, [r7, #4]
 802daa0:	460b      	mov	r3, r1
 802daa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802daa4:	78fb      	ldrb	r3, [r7, #3]
 802daa6:	3b01      	subs	r3, #1
 802daa8:	2b04      	cmp	r3, #4
 802daaa:	d819      	bhi.n	802dae0 <USBH_UserProcess+0x48>
 802daac:	a201      	add	r2, pc, #4	; (adr r2, 802dab4 <USBH_UserProcess+0x1c>)
 802daae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dab2:	bf00      	nop
 802dab4:	0802dae1 	.word	0x0802dae1
 802dab8:	0802dad1 	.word	0x0802dad1
 802dabc:	0802dae1 	.word	0x0802dae1
 802dac0:	0802dad9 	.word	0x0802dad9
 802dac4:	0802dac9 	.word	0x0802dac9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802dac8:	4b09      	ldr	r3, [pc, #36]	; (802daf0 <USBH_UserProcess+0x58>)
 802daca:	2203      	movs	r2, #3
 802dacc:	701a      	strb	r2, [r3, #0]
  break;
 802dace:	e008      	b.n	802dae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802dad0:	4b07      	ldr	r3, [pc, #28]	; (802daf0 <USBH_UserProcess+0x58>)
 802dad2:	2202      	movs	r2, #2
 802dad4:	701a      	strb	r2, [r3, #0]
  break;
 802dad6:	e004      	b.n	802dae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802dad8:	4b05      	ldr	r3, [pc, #20]	; (802daf0 <USBH_UserProcess+0x58>)
 802dada:	2201      	movs	r2, #1
 802dadc:	701a      	strb	r2, [r3, #0]
  break;
 802dade:	e000      	b.n	802dae2 <USBH_UserProcess+0x4a>

  default:
  break;
 802dae0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802dae2:	bf00      	nop
 802dae4:	370c      	adds	r7, #12
 802dae6:	46bd      	mov	sp, r7
 802dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802daec:	4770      	bx	lr
 802daee:	bf00      	nop
 802daf0:	20000ef4 	.word	0x20000ef4

0802daf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802daf4:	b580      	push	{r7, lr}
 802daf6:	b08a      	sub	sp, #40	; 0x28
 802daf8:	af00      	add	r7, sp, #0
 802dafa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802dafc:	f107 0314 	add.w	r3, r7, #20
 802db00:	2200      	movs	r2, #0
 802db02:	601a      	str	r2, [r3, #0]
 802db04:	605a      	str	r2, [r3, #4]
 802db06:	609a      	str	r2, [r3, #8]
 802db08:	60da      	str	r2, [r3, #12]
 802db0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802db0c:	687b      	ldr	r3, [r7, #4]
 802db0e:	681b      	ldr	r3, [r3, #0]
 802db10:	4a24      	ldr	r2, [pc, #144]	; (802dba4 <HAL_HCD_MspInit+0xb0>)
 802db12:	4293      	cmp	r3, r2
 802db14:	d141      	bne.n	802db9a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802db16:	2300      	movs	r3, #0
 802db18:	613b      	str	r3, [r7, #16]
 802db1a:	4b23      	ldr	r3, [pc, #140]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db1e:	4a22      	ldr	r2, [pc, #136]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db20:	f043 0302 	orr.w	r3, r3, #2
 802db24:	6313      	str	r3, [r2, #48]	; 0x30
 802db26:	4b20      	ldr	r3, [pc, #128]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db2a:	f003 0302 	and.w	r3, r3, #2
 802db2e:	613b      	str	r3, [r7, #16]
 802db30:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802db32:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802db36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802db38:	2302      	movs	r3, #2
 802db3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db3c:	2300      	movs	r3, #0
 802db3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802db40:	2300      	movs	r3, #0
 802db42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802db44:	230c      	movs	r3, #12
 802db46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802db48:	f107 0314 	add.w	r3, r7, #20
 802db4c:	4619      	mov	r1, r3
 802db4e:	4817      	ldr	r0, [pc, #92]	; (802dbac <HAL_HCD_MspInit+0xb8>)
 802db50:	f7f6 ffcc 	bl	8024aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802db54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802db58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802db5a:	2300      	movs	r3, #0
 802db5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db5e:	2300      	movs	r3, #0
 802db60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802db62:	f107 0314 	add.w	r3, r7, #20
 802db66:	4619      	mov	r1, r3
 802db68:	4810      	ldr	r0, [pc, #64]	; (802dbac <HAL_HCD_MspInit+0xb8>)
 802db6a:	f7f6 ffbf 	bl	8024aec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802db6e:	2300      	movs	r3, #0
 802db70:	60fb      	str	r3, [r7, #12]
 802db72:	4b0d      	ldr	r3, [pc, #52]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db76:	4a0c      	ldr	r2, [pc, #48]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802db7c:	6313      	str	r3, [r2, #48]	; 0x30
 802db7e:	4b0a      	ldr	r3, [pc, #40]	; (802dba8 <HAL_HCD_MspInit+0xb4>)
 802db80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802db86:	60fb      	str	r3, [r7, #12]
 802db88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802db8a:	2200      	movs	r2, #0
 802db8c:	2100      	movs	r1, #0
 802db8e:	204d      	movs	r0, #77	; 0x4d
 802db90:	f7f5 fe6f 	bl	8023872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802db94:	204d      	movs	r0, #77	; 0x4d
 802db96:	f7f5 fe88 	bl	80238aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802db9a:	bf00      	nop
 802db9c:	3728      	adds	r7, #40	; 0x28
 802db9e:	46bd      	mov	sp, r7
 802dba0:	bd80      	pop	{r7, pc}
 802dba2:	bf00      	nop
 802dba4:	40040000 	.word	0x40040000
 802dba8:	40023800 	.word	0x40023800
 802dbac:	40020400 	.word	0x40020400

0802dbb0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbb0:	b580      	push	{r7, lr}
 802dbb2:	b082      	sub	sp, #8
 802dbb4:	af00      	add	r7, sp, #0
 802dbb6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802dbb8:	687b      	ldr	r3, [r7, #4]
 802dbba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbbe:	4618      	mov	r0, r3
 802dbc0:	f7fe fff1 	bl	802cba6 <USBH_LL_IncTimer>
}
 802dbc4:	bf00      	nop
 802dbc6:	3708      	adds	r7, #8
 802dbc8:	46bd      	mov	sp, r7
 802dbca:	bd80      	pop	{r7, pc}

0802dbcc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbcc:	b580      	push	{r7, lr}
 802dbce:	b082      	sub	sp, #8
 802dbd0:	af00      	add	r7, sp, #0
 802dbd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802dbd4:	687b      	ldr	r3, [r7, #4]
 802dbd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbda:	4618      	mov	r0, r3
 802dbdc:	f7ff f829 	bl	802cc32 <USBH_LL_Connect>
}
 802dbe0:	bf00      	nop
 802dbe2:	3708      	adds	r7, #8
 802dbe4:	46bd      	mov	sp, r7
 802dbe6:	bd80      	pop	{r7, pc}

0802dbe8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbe8:	b580      	push	{r7, lr}
 802dbea:	b082      	sub	sp, #8
 802dbec:	af00      	add	r7, sp, #0
 802dbee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802dbf0:	687b      	ldr	r3, [r7, #4]
 802dbf2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbf6:	4618      	mov	r0, r3
 802dbf8:	f7ff f832 	bl	802cc60 <USBH_LL_Disconnect>
}
 802dbfc:	bf00      	nop
 802dbfe:	3708      	adds	r7, #8
 802dc00:	46bd      	mov	sp, r7
 802dc02:	bd80      	pop	{r7, pc}

0802dc04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802dc04:	b480      	push	{r7}
 802dc06:	b083      	sub	sp, #12
 802dc08:	af00      	add	r7, sp, #0
 802dc0a:	6078      	str	r0, [r7, #4]
 802dc0c:	460b      	mov	r3, r1
 802dc0e:	70fb      	strb	r3, [r7, #3]
 802dc10:	4613      	mov	r3, r2
 802dc12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802dc14:	bf00      	nop
 802dc16:	370c      	adds	r7, #12
 802dc18:	46bd      	mov	sp, r7
 802dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc1e:	4770      	bx	lr

0802dc20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc20:	b580      	push	{r7, lr}
 802dc22:	b082      	sub	sp, #8
 802dc24:	af00      	add	r7, sp, #0
 802dc26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802dc28:	687b      	ldr	r3, [r7, #4]
 802dc2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc2e:	4618      	mov	r0, r3
 802dc30:	f7fe ffe3 	bl	802cbfa <USBH_LL_PortEnabled>
}
 802dc34:	bf00      	nop
 802dc36:	3708      	adds	r7, #8
 802dc38:	46bd      	mov	sp, r7
 802dc3a:	bd80      	pop	{r7, pc}

0802dc3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc3c:	b580      	push	{r7, lr}
 802dc3e:	b082      	sub	sp, #8
 802dc40:	af00      	add	r7, sp, #0
 802dc42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802dc44:	687b      	ldr	r3, [r7, #4]
 802dc46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc4a:	4618      	mov	r0, r3
 802dc4c:	f7fe ffe3 	bl	802cc16 <USBH_LL_PortDisabled>
}
 802dc50:	bf00      	nop
 802dc52:	3708      	adds	r7, #8
 802dc54:	46bd      	mov	sp, r7
 802dc56:	bd80      	pop	{r7, pc}

0802dc58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802dc58:	b580      	push	{r7, lr}
 802dc5a:	b082      	sub	sp, #8
 802dc5c:	af00      	add	r7, sp, #0
 802dc5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802dc60:	687b      	ldr	r3, [r7, #4]
 802dc62:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802dc66:	2b00      	cmp	r3, #0
 802dc68:	d132      	bne.n	802dcd0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802dc6a:	4a1c      	ldr	r2, [pc, #112]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc6c:	687b      	ldr	r3, [r7, #4]
 802dc6e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802dc72:	687b      	ldr	r3, [r7, #4]
 802dc74:	4a19      	ldr	r2, [pc, #100]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc76:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802dc7a:	4b18      	ldr	r3, [pc, #96]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc7c:	4a18      	ldr	r2, [pc, #96]	; (802dce0 <USBH_LL_Init+0x88>)
 802dc7e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802dc80:	4b16      	ldr	r3, [pc, #88]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc82:	220c      	movs	r2, #12
 802dc84:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802dc86:	4b15      	ldr	r3, [pc, #84]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc88:	2201      	movs	r2, #1
 802dc8a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802dc8c:	4b13      	ldr	r3, [pc, #76]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc8e:	2200      	movs	r2, #0
 802dc90:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802dc92:	4b12      	ldr	r3, [pc, #72]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc94:	2202      	movs	r2, #2
 802dc96:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802dc98:	4b10      	ldr	r3, [pc, #64]	; (802dcdc <USBH_LL_Init+0x84>)
 802dc9a:	2200      	movs	r2, #0
 802dc9c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802dc9e:	4b0f      	ldr	r3, [pc, #60]	; (802dcdc <USBH_LL_Init+0x84>)
 802dca0:	2200      	movs	r2, #0
 802dca2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802dca4:	4b0d      	ldr	r3, [pc, #52]	; (802dcdc <USBH_LL_Init+0x84>)
 802dca6:	2200      	movs	r2, #0
 802dca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802dcaa:	4b0c      	ldr	r3, [pc, #48]	; (802dcdc <USBH_LL_Init+0x84>)
 802dcac:	2200      	movs	r2, #0
 802dcae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802dcb0:	480a      	ldr	r0, [pc, #40]	; (802dcdc <USBH_LL_Init+0x84>)
 802dcb2:	f7f7 fa05 	bl	80250c0 <HAL_HCD_Init>
 802dcb6:	4603      	mov	r3, r0
 802dcb8:	2b00      	cmp	r3, #0
 802dcba:	d001      	beq.n	802dcc0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802dcbc:	f7f3 f8f8 	bl	8020eb0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802dcc0:	4806      	ldr	r0, [pc, #24]	; (802dcdc <USBH_LL_Init+0x84>)
 802dcc2:	f7f7 fde8 	bl	8025896 <HAL_HCD_GetCurrentFrame>
 802dcc6:	4603      	mov	r3, r0
 802dcc8:	4619      	mov	r1, r3
 802dcca:	6878      	ldr	r0, [r7, #4]
 802dccc:	f7fe ff5c 	bl	802cb88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802dcd0:	2300      	movs	r3, #0
}
 802dcd2:	4618      	mov	r0, r3
 802dcd4:	3708      	adds	r7, #8
 802dcd6:	46bd      	mov	sp, r7
 802dcd8:	bd80      	pop	{r7, pc}
 802dcda:	bf00      	nop
 802dcdc:	20000ef8 	.word	0x20000ef8
 802dce0:	40040000 	.word	0x40040000

0802dce4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802dce4:	b580      	push	{r7, lr}
 802dce6:	b084      	sub	sp, #16
 802dce8:	af00      	add	r7, sp, #0
 802dcea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dcec:	2300      	movs	r3, #0
 802dcee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dcf0:	2300      	movs	r3, #0
 802dcf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802dcf4:	687b      	ldr	r3, [r7, #4]
 802dcf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dcfa:	4618      	mov	r0, r3
 802dcfc:	f7f7 fd55 	bl	80257aa <HAL_HCD_Start>
 802dd00:	4603      	mov	r3, r0
 802dd02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd04:	7bfb      	ldrb	r3, [r7, #15]
 802dd06:	4618      	mov	r0, r3
 802dd08:	f000 f95c 	bl	802dfc4 <USBH_Get_USB_Status>
 802dd0c:	4603      	mov	r3, r0
 802dd0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd10:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd12:	4618      	mov	r0, r3
 802dd14:	3710      	adds	r7, #16
 802dd16:	46bd      	mov	sp, r7
 802dd18:	bd80      	pop	{r7, pc}

0802dd1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802dd1a:	b580      	push	{r7, lr}
 802dd1c:	b084      	sub	sp, #16
 802dd1e:	af00      	add	r7, sp, #0
 802dd20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd22:	2300      	movs	r3, #0
 802dd24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd26:	2300      	movs	r3, #0
 802dd28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802dd2a:	687b      	ldr	r3, [r7, #4]
 802dd2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd30:	4618      	mov	r0, r3
 802dd32:	f7f7 fd5d 	bl	80257f0 <HAL_HCD_Stop>
 802dd36:	4603      	mov	r3, r0
 802dd38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd3a:	7bfb      	ldrb	r3, [r7, #15]
 802dd3c:	4618      	mov	r0, r3
 802dd3e:	f000 f941 	bl	802dfc4 <USBH_Get_USB_Status>
 802dd42:	4603      	mov	r3, r0
 802dd44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd46:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd48:	4618      	mov	r0, r3
 802dd4a:	3710      	adds	r7, #16
 802dd4c:	46bd      	mov	sp, r7
 802dd4e:	bd80      	pop	{r7, pc}

0802dd50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802dd50:	b580      	push	{r7, lr}
 802dd52:	b084      	sub	sp, #16
 802dd54:	af00      	add	r7, sp, #0
 802dd56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802dd58:	2301      	movs	r3, #1
 802dd5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802dd5c:	687b      	ldr	r3, [r7, #4]
 802dd5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd62:	4618      	mov	r0, r3
 802dd64:	f7f7 fda5 	bl	80258b2 <HAL_HCD_GetCurrentSpeed>
 802dd68:	4603      	mov	r3, r0
 802dd6a:	2b02      	cmp	r3, #2
 802dd6c:	d00c      	beq.n	802dd88 <USBH_LL_GetSpeed+0x38>
 802dd6e:	2b02      	cmp	r3, #2
 802dd70:	d80d      	bhi.n	802dd8e <USBH_LL_GetSpeed+0x3e>
 802dd72:	2b00      	cmp	r3, #0
 802dd74:	d002      	beq.n	802dd7c <USBH_LL_GetSpeed+0x2c>
 802dd76:	2b01      	cmp	r3, #1
 802dd78:	d003      	beq.n	802dd82 <USBH_LL_GetSpeed+0x32>
 802dd7a:	e008      	b.n	802dd8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802dd7c:	2300      	movs	r3, #0
 802dd7e:	73fb      	strb	r3, [r7, #15]
    break;
 802dd80:	e008      	b.n	802dd94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802dd82:	2301      	movs	r3, #1
 802dd84:	73fb      	strb	r3, [r7, #15]
    break;
 802dd86:	e005      	b.n	802dd94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802dd88:	2302      	movs	r3, #2
 802dd8a:	73fb      	strb	r3, [r7, #15]
    break;
 802dd8c:	e002      	b.n	802dd94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802dd8e:	2301      	movs	r3, #1
 802dd90:	73fb      	strb	r3, [r7, #15]
    break;
 802dd92:	bf00      	nop
  }
  return  speed;
 802dd94:	7bfb      	ldrb	r3, [r7, #15]
}
 802dd96:	4618      	mov	r0, r3
 802dd98:	3710      	adds	r7, #16
 802dd9a:	46bd      	mov	sp, r7
 802dd9c:	bd80      	pop	{r7, pc}

0802dd9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802dd9e:	b580      	push	{r7, lr}
 802dda0:	b084      	sub	sp, #16
 802dda2:	af00      	add	r7, sp, #0
 802dda4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dda6:	2300      	movs	r3, #0
 802dda8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802ddaa:	2300      	movs	r3, #0
 802ddac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802ddae:	687b      	ldr	r3, [r7, #4]
 802ddb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802ddb4:	4618      	mov	r0, r3
 802ddb6:	f7f7 fd38 	bl	802582a <HAL_HCD_ResetPort>
 802ddba:	4603      	mov	r3, r0
 802ddbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802ddbe:	7bfb      	ldrb	r3, [r7, #15]
 802ddc0:	4618      	mov	r0, r3
 802ddc2:	f000 f8ff 	bl	802dfc4 <USBH_Get_USB_Status>
 802ddc6:	4603      	mov	r3, r0
 802ddc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802ddca:	7bbb      	ldrb	r3, [r7, #14]
}
 802ddcc:	4618      	mov	r0, r3
 802ddce:	3710      	adds	r7, #16
 802ddd0:	46bd      	mov	sp, r7
 802ddd2:	bd80      	pop	{r7, pc}

0802ddd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802ddd4:	b580      	push	{r7, lr}
 802ddd6:	b082      	sub	sp, #8
 802ddd8:	af00      	add	r7, sp, #0
 802ddda:	6078      	str	r0, [r7, #4]
 802dddc:	460b      	mov	r3, r1
 802ddde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802dde0:	687b      	ldr	r3, [r7, #4]
 802dde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dde6:	78fa      	ldrb	r2, [r7, #3]
 802dde8:	4611      	mov	r1, r2
 802ddea:	4618      	mov	r0, r3
 802ddec:	f7f7 fd3f 	bl	802586e <HAL_HCD_HC_GetXferCount>
 802ddf0:	4603      	mov	r3, r0
}
 802ddf2:	4618      	mov	r0, r3
 802ddf4:	3708      	adds	r7, #8
 802ddf6:	46bd      	mov	sp, r7
 802ddf8:	bd80      	pop	{r7, pc}

0802ddfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802ddfa:	b590      	push	{r4, r7, lr}
 802ddfc:	b089      	sub	sp, #36	; 0x24
 802ddfe:	af04      	add	r7, sp, #16
 802de00:	6078      	str	r0, [r7, #4]
 802de02:	4608      	mov	r0, r1
 802de04:	4611      	mov	r1, r2
 802de06:	461a      	mov	r2, r3
 802de08:	4603      	mov	r3, r0
 802de0a:	70fb      	strb	r3, [r7, #3]
 802de0c:	460b      	mov	r3, r1
 802de0e:	70bb      	strb	r3, [r7, #2]
 802de10:	4613      	mov	r3, r2
 802de12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de14:	2300      	movs	r3, #0
 802de16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de18:	2300      	movs	r3, #0
 802de1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802de1c:	687b      	ldr	r3, [r7, #4]
 802de1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802de22:	787c      	ldrb	r4, [r7, #1]
 802de24:	78ba      	ldrb	r2, [r7, #2]
 802de26:	78f9      	ldrb	r1, [r7, #3]
 802de28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802de2a:	9302      	str	r3, [sp, #8]
 802de2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802de30:	9301      	str	r3, [sp, #4]
 802de32:	f897 3020 	ldrb.w	r3, [r7, #32]
 802de36:	9300      	str	r3, [sp, #0]
 802de38:	4623      	mov	r3, r4
 802de3a:	f7f7 f9a3 	bl	8025184 <HAL_HCD_HC_Init>
 802de3e:	4603      	mov	r3, r0
 802de40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802de42:	7bfb      	ldrb	r3, [r7, #15]
 802de44:	4618      	mov	r0, r3
 802de46:	f000 f8bd 	bl	802dfc4 <USBH_Get_USB_Status>
 802de4a:	4603      	mov	r3, r0
 802de4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de4e:	7bbb      	ldrb	r3, [r7, #14]
}
 802de50:	4618      	mov	r0, r3
 802de52:	3714      	adds	r7, #20
 802de54:	46bd      	mov	sp, r7
 802de56:	bd90      	pop	{r4, r7, pc}

0802de58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802de58:	b580      	push	{r7, lr}
 802de5a:	b084      	sub	sp, #16
 802de5c:	af00      	add	r7, sp, #0
 802de5e:	6078      	str	r0, [r7, #4]
 802de60:	460b      	mov	r3, r1
 802de62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de64:	2300      	movs	r3, #0
 802de66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de68:	2300      	movs	r3, #0
 802de6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802de6c:	687b      	ldr	r3, [r7, #4]
 802de6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802de72:	78fa      	ldrb	r2, [r7, #3]
 802de74:	4611      	mov	r1, r2
 802de76:	4618      	mov	r0, r3
 802de78:	f7f7 fa13 	bl	80252a2 <HAL_HCD_HC_Halt>
 802de7c:	4603      	mov	r3, r0
 802de7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802de80:	7bfb      	ldrb	r3, [r7, #15]
 802de82:	4618      	mov	r0, r3
 802de84:	f000 f89e 	bl	802dfc4 <USBH_Get_USB_Status>
 802de88:	4603      	mov	r3, r0
 802de8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de8c:	7bbb      	ldrb	r3, [r7, #14]
}
 802de8e:	4618      	mov	r0, r3
 802de90:	3710      	adds	r7, #16
 802de92:	46bd      	mov	sp, r7
 802de94:	bd80      	pop	{r7, pc}

0802de96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802de96:	b590      	push	{r4, r7, lr}
 802de98:	b089      	sub	sp, #36	; 0x24
 802de9a:	af04      	add	r7, sp, #16
 802de9c:	6078      	str	r0, [r7, #4]
 802de9e:	4608      	mov	r0, r1
 802dea0:	4611      	mov	r1, r2
 802dea2:	461a      	mov	r2, r3
 802dea4:	4603      	mov	r3, r0
 802dea6:	70fb      	strb	r3, [r7, #3]
 802dea8:	460b      	mov	r3, r1
 802deaa:	70bb      	strb	r3, [r7, #2]
 802deac:	4613      	mov	r3, r2
 802deae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802deb0:	2300      	movs	r3, #0
 802deb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802deb4:	2300      	movs	r3, #0
 802deb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802deb8:	687b      	ldr	r3, [r7, #4]
 802deba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802debe:	787c      	ldrb	r4, [r7, #1]
 802dec0:	78ba      	ldrb	r2, [r7, #2]
 802dec2:	78f9      	ldrb	r1, [r7, #3]
 802dec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802dec8:	9303      	str	r3, [sp, #12]
 802deca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802decc:	9302      	str	r3, [sp, #8]
 802dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ded0:	9301      	str	r3, [sp, #4]
 802ded2:	f897 3020 	ldrb.w	r3, [r7, #32]
 802ded6:	9300      	str	r3, [sp, #0]
 802ded8:	4623      	mov	r3, r4
 802deda:	f7f7 fa05 	bl	80252e8 <HAL_HCD_HC_SubmitRequest>
 802dede:	4603      	mov	r3, r0
 802dee0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802dee2:	7bfb      	ldrb	r3, [r7, #15]
 802dee4:	4618      	mov	r0, r3
 802dee6:	f000 f86d 	bl	802dfc4 <USBH_Get_USB_Status>
 802deea:	4603      	mov	r3, r0
 802deec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802deee:	7bbb      	ldrb	r3, [r7, #14]
}
 802def0:	4618      	mov	r0, r3
 802def2:	3714      	adds	r7, #20
 802def4:	46bd      	mov	sp, r7
 802def6:	bd90      	pop	{r4, r7, pc}

0802def8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802def8:	b580      	push	{r7, lr}
 802defa:	b082      	sub	sp, #8
 802defc:	af00      	add	r7, sp, #0
 802defe:	6078      	str	r0, [r7, #4]
 802df00:	460b      	mov	r3, r1
 802df02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802df04:	687b      	ldr	r3, [r7, #4]
 802df06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df0a:	78fa      	ldrb	r2, [r7, #3]
 802df0c:	4611      	mov	r1, r2
 802df0e:	4618      	mov	r0, r3
 802df10:	f7f7 fc99 	bl	8025846 <HAL_HCD_HC_GetURBState>
 802df14:	4603      	mov	r3, r0
}
 802df16:	4618      	mov	r0, r3
 802df18:	3708      	adds	r7, #8
 802df1a:	46bd      	mov	sp, r7
 802df1c:	bd80      	pop	{r7, pc}

0802df1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802df1e:	b580      	push	{r7, lr}
 802df20:	b082      	sub	sp, #8
 802df22:	af00      	add	r7, sp, #0
 802df24:	6078      	str	r0, [r7, #4]
 802df26:	460b      	mov	r3, r1
 802df28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802df2a:	687b      	ldr	r3, [r7, #4]
 802df2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802df30:	2b00      	cmp	r3, #0
 802df32:	d103      	bne.n	802df3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802df34:	78fb      	ldrb	r3, [r7, #3]
 802df36:	4618      	mov	r0, r3
 802df38:	f000 f870 	bl	802e01c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802df3c:	20c8      	movs	r0, #200	; 0xc8
 802df3e:	f7f5 fba5 	bl	802368c <HAL_Delay>
  return USBH_OK;
 802df42:	2300      	movs	r3, #0
}
 802df44:	4618      	mov	r0, r3
 802df46:	3708      	adds	r7, #8
 802df48:	46bd      	mov	sp, r7
 802df4a:	bd80      	pop	{r7, pc}

0802df4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802df4c:	b480      	push	{r7}
 802df4e:	b085      	sub	sp, #20
 802df50:	af00      	add	r7, sp, #0
 802df52:	6078      	str	r0, [r7, #4]
 802df54:	460b      	mov	r3, r1
 802df56:	70fb      	strb	r3, [r7, #3]
 802df58:	4613      	mov	r3, r2
 802df5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802df5c:	687b      	ldr	r3, [r7, #4]
 802df5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802df64:	78fb      	ldrb	r3, [r7, #3]
 802df66:	68fa      	ldr	r2, [r7, #12]
 802df68:	212c      	movs	r1, #44	; 0x2c
 802df6a:	fb01 f303 	mul.w	r3, r1, r3
 802df6e:	4413      	add	r3, r2
 802df70:	333b      	adds	r3, #59	; 0x3b
 802df72:	781b      	ldrb	r3, [r3, #0]
 802df74:	2b00      	cmp	r3, #0
 802df76:	d009      	beq.n	802df8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802df78:	78fb      	ldrb	r3, [r7, #3]
 802df7a:	68fa      	ldr	r2, [r7, #12]
 802df7c:	212c      	movs	r1, #44	; 0x2c
 802df7e:	fb01 f303 	mul.w	r3, r1, r3
 802df82:	4413      	add	r3, r2
 802df84:	3354      	adds	r3, #84	; 0x54
 802df86:	78ba      	ldrb	r2, [r7, #2]
 802df88:	701a      	strb	r2, [r3, #0]
 802df8a:	e008      	b.n	802df9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802df8c:	78fb      	ldrb	r3, [r7, #3]
 802df8e:	68fa      	ldr	r2, [r7, #12]
 802df90:	212c      	movs	r1, #44	; 0x2c
 802df92:	fb01 f303 	mul.w	r3, r1, r3
 802df96:	4413      	add	r3, r2
 802df98:	3355      	adds	r3, #85	; 0x55
 802df9a:	78ba      	ldrb	r2, [r7, #2]
 802df9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802df9e:	2300      	movs	r3, #0
}
 802dfa0:	4618      	mov	r0, r3
 802dfa2:	3714      	adds	r7, #20
 802dfa4:	46bd      	mov	sp, r7
 802dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfaa:	4770      	bx	lr

0802dfac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802dfac:	b580      	push	{r7, lr}
 802dfae:	b082      	sub	sp, #8
 802dfb0:	af00      	add	r7, sp, #0
 802dfb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802dfb4:	6878      	ldr	r0, [r7, #4]
 802dfb6:	f7f5 fb69 	bl	802368c <HAL_Delay>
}
 802dfba:	bf00      	nop
 802dfbc:	3708      	adds	r7, #8
 802dfbe:	46bd      	mov	sp, r7
 802dfc0:	bd80      	pop	{r7, pc}
	...

0802dfc4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802dfc4:	b480      	push	{r7}
 802dfc6:	b085      	sub	sp, #20
 802dfc8:	af00      	add	r7, sp, #0
 802dfca:	4603      	mov	r3, r0
 802dfcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dfce:	2300      	movs	r3, #0
 802dfd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802dfd2:	79fb      	ldrb	r3, [r7, #7]
 802dfd4:	2b03      	cmp	r3, #3
 802dfd6:	d817      	bhi.n	802e008 <USBH_Get_USB_Status+0x44>
 802dfd8:	a201      	add	r2, pc, #4	; (adr r2, 802dfe0 <USBH_Get_USB_Status+0x1c>)
 802dfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dfde:	bf00      	nop
 802dfe0:	0802dff1 	.word	0x0802dff1
 802dfe4:	0802dff7 	.word	0x0802dff7
 802dfe8:	0802dffd 	.word	0x0802dffd
 802dfec:	0802e003 	.word	0x0802e003
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802dff0:	2300      	movs	r3, #0
 802dff2:	73fb      	strb	r3, [r7, #15]
    break;
 802dff4:	e00b      	b.n	802e00e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802dff6:	2302      	movs	r3, #2
 802dff8:	73fb      	strb	r3, [r7, #15]
    break;
 802dffa:	e008      	b.n	802e00e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802dffc:	2301      	movs	r3, #1
 802dffe:	73fb      	strb	r3, [r7, #15]
    break;
 802e000:	e005      	b.n	802e00e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802e002:	2302      	movs	r3, #2
 802e004:	73fb      	strb	r3, [r7, #15]
    break;
 802e006:	e002      	b.n	802e00e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802e008:	2302      	movs	r3, #2
 802e00a:	73fb      	strb	r3, [r7, #15]
    break;
 802e00c:	bf00      	nop
  }
  return usb_status;
 802e00e:	7bfb      	ldrb	r3, [r7, #15]
}
 802e010:	4618      	mov	r0, r3
 802e012:	3714      	adds	r7, #20
 802e014:	46bd      	mov	sp, r7
 802e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e01a:	4770      	bx	lr

0802e01c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802e01c:	b580      	push	{r7, lr}
 802e01e:	b084      	sub	sp, #16
 802e020:	af00      	add	r7, sp, #0
 802e022:	4603      	mov	r3, r0
 802e024:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802e026:	79fb      	ldrb	r3, [r7, #7]
 802e028:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802e02a:	79fb      	ldrb	r3, [r7, #7]
 802e02c:	2b00      	cmp	r3, #0
 802e02e:	d102      	bne.n	802e036 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802e030:	2301      	movs	r3, #1
 802e032:	73fb      	strb	r3, [r7, #15]
 802e034:	e001      	b.n	802e03a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802e036:	2300      	movs	r3, #0
 802e038:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802e03a:	7bfb      	ldrb	r3, [r7, #15]
 802e03c:	461a      	mov	r2, r3
 802e03e:	2110      	movs	r1, #16
 802e040:	4803      	ldr	r0, [pc, #12]	; (802e050 <MX_DriverVbusHS+0x34>)
 802e042:	f7f7 f80b 	bl	802505c <HAL_GPIO_WritePin>
}
 802e046:	bf00      	nop
 802e048:	3710      	adds	r7, #16
 802e04a:	46bd      	mov	sp, r7
 802e04c:	bd80      	pop	{r7, pc}
 802e04e:	bf00      	nop
 802e050:	40020800 	.word	0x40020800

0802e054 <__errno>:
 802e054:	4b01      	ldr	r3, [pc, #4]	; (802e05c <__errno+0x8>)
 802e056:	6818      	ldr	r0, [r3, #0]
 802e058:	4770      	bx	lr
 802e05a:	bf00      	nop
 802e05c:	20000080 	.word	0x20000080

0802e060 <__libc_init_array>:
 802e060:	b570      	push	{r4, r5, r6, lr}
 802e062:	4d0d      	ldr	r5, [pc, #52]	; (802e098 <__libc_init_array+0x38>)
 802e064:	4c0d      	ldr	r4, [pc, #52]	; (802e09c <__libc_init_array+0x3c>)
 802e066:	1b64      	subs	r4, r4, r5
 802e068:	10a4      	asrs	r4, r4, #2
 802e06a:	2600      	movs	r6, #0
 802e06c:	42a6      	cmp	r6, r4
 802e06e:	d109      	bne.n	802e084 <__libc_init_array+0x24>
 802e070:	4d0b      	ldr	r5, [pc, #44]	; (802e0a0 <__libc_init_array+0x40>)
 802e072:	4c0c      	ldr	r4, [pc, #48]	; (802e0a4 <__libc_init_array+0x44>)
 802e074:	f001 fa10 	bl	802f498 <_init>
 802e078:	1b64      	subs	r4, r4, r5
 802e07a:	10a4      	asrs	r4, r4, #2
 802e07c:	2600      	movs	r6, #0
 802e07e:	42a6      	cmp	r6, r4
 802e080:	d105      	bne.n	802e08e <__libc_init_array+0x2e>
 802e082:	bd70      	pop	{r4, r5, r6, pc}
 802e084:	f855 3b04 	ldr.w	r3, [r5], #4
 802e088:	4798      	blx	r3
 802e08a:	3601      	adds	r6, #1
 802e08c:	e7ee      	b.n	802e06c <__libc_init_array+0xc>
 802e08e:	f855 3b04 	ldr.w	r3, [r5], #4
 802e092:	4798      	blx	r3
 802e094:	3601      	adds	r6, #1
 802e096:	e7f2      	b.n	802e07e <__libc_init_array+0x1e>
 802e098:	08031acc 	.word	0x08031acc
 802e09c:	08031acc 	.word	0x08031acc
 802e0a0:	08031acc 	.word	0x08031acc
 802e0a4:	08031ad0 	.word	0x08031ad0

0802e0a8 <malloc>:
 802e0a8:	4b02      	ldr	r3, [pc, #8]	; (802e0b4 <malloc+0xc>)
 802e0aa:	4601      	mov	r1, r0
 802e0ac:	6818      	ldr	r0, [r3, #0]
 802e0ae:	f000 b87f 	b.w	802e1b0 <_malloc_r>
 802e0b2:	bf00      	nop
 802e0b4:	20000080 	.word	0x20000080

0802e0b8 <free>:
 802e0b8:	4b02      	ldr	r3, [pc, #8]	; (802e0c4 <free+0xc>)
 802e0ba:	4601      	mov	r1, r0
 802e0bc:	6818      	ldr	r0, [r3, #0]
 802e0be:	f000 b80b 	b.w	802e0d8 <_free_r>
 802e0c2:	bf00      	nop
 802e0c4:	20000080 	.word	0x20000080

0802e0c8 <memset>:
 802e0c8:	4402      	add	r2, r0
 802e0ca:	4603      	mov	r3, r0
 802e0cc:	4293      	cmp	r3, r2
 802e0ce:	d100      	bne.n	802e0d2 <memset+0xa>
 802e0d0:	4770      	bx	lr
 802e0d2:	f803 1b01 	strb.w	r1, [r3], #1
 802e0d6:	e7f9      	b.n	802e0cc <memset+0x4>

0802e0d8 <_free_r>:
 802e0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e0da:	2900      	cmp	r1, #0
 802e0dc:	d044      	beq.n	802e168 <_free_r+0x90>
 802e0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e0e2:	9001      	str	r0, [sp, #4]
 802e0e4:	2b00      	cmp	r3, #0
 802e0e6:	f1a1 0404 	sub.w	r4, r1, #4
 802e0ea:	bfb8      	it	lt
 802e0ec:	18e4      	addlt	r4, r4, r3
 802e0ee:	f000 fc71 	bl	802e9d4 <__malloc_lock>
 802e0f2:	4a1e      	ldr	r2, [pc, #120]	; (802e16c <_free_r+0x94>)
 802e0f4:	9801      	ldr	r0, [sp, #4]
 802e0f6:	6813      	ldr	r3, [r2, #0]
 802e0f8:	b933      	cbnz	r3, 802e108 <_free_r+0x30>
 802e0fa:	6063      	str	r3, [r4, #4]
 802e0fc:	6014      	str	r4, [r2, #0]
 802e0fe:	b003      	add	sp, #12
 802e100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e104:	f000 bc6c 	b.w	802e9e0 <__malloc_unlock>
 802e108:	42a3      	cmp	r3, r4
 802e10a:	d908      	bls.n	802e11e <_free_r+0x46>
 802e10c:	6825      	ldr	r5, [r4, #0]
 802e10e:	1961      	adds	r1, r4, r5
 802e110:	428b      	cmp	r3, r1
 802e112:	bf01      	itttt	eq
 802e114:	6819      	ldreq	r1, [r3, #0]
 802e116:	685b      	ldreq	r3, [r3, #4]
 802e118:	1949      	addeq	r1, r1, r5
 802e11a:	6021      	streq	r1, [r4, #0]
 802e11c:	e7ed      	b.n	802e0fa <_free_r+0x22>
 802e11e:	461a      	mov	r2, r3
 802e120:	685b      	ldr	r3, [r3, #4]
 802e122:	b10b      	cbz	r3, 802e128 <_free_r+0x50>
 802e124:	42a3      	cmp	r3, r4
 802e126:	d9fa      	bls.n	802e11e <_free_r+0x46>
 802e128:	6811      	ldr	r1, [r2, #0]
 802e12a:	1855      	adds	r5, r2, r1
 802e12c:	42a5      	cmp	r5, r4
 802e12e:	d10b      	bne.n	802e148 <_free_r+0x70>
 802e130:	6824      	ldr	r4, [r4, #0]
 802e132:	4421      	add	r1, r4
 802e134:	1854      	adds	r4, r2, r1
 802e136:	42a3      	cmp	r3, r4
 802e138:	6011      	str	r1, [r2, #0]
 802e13a:	d1e0      	bne.n	802e0fe <_free_r+0x26>
 802e13c:	681c      	ldr	r4, [r3, #0]
 802e13e:	685b      	ldr	r3, [r3, #4]
 802e140:	6053      	str	r3, [r2, #4]
 802e142:	4421      	add	r1, r4
 802e144:	6011      	str	r1, [r2, #0]
 802e146:	e7da      	b.n	802e0fe <_free_r+0x26>
 802e148:	d902      	bls.n	802e150 <_free_r+0x78>
 802e14a:	230c      	movs	r3, #12
 802e14c:	6003      	str	r3, [r0, #0]
 802e14e:	e7d6      	b.n	802e0fe <_free_r+0x26>
 802e150:	6825      	ldr	r5, [r4, #0]
 802e152:	1961      	adds	r1, r4, r5
 802e154:	428b      	cmp	r3, r1
 802e156:	bf04      	itt	eq
 802e158:	6819      	ldreq	r1, [r3, #0]
 802e15a:	685b      	ldreq	r3, [r3, #4]
 802e15c:	6063      	str	r3, [r4, #4]
 802e15e:	bf04      	itt	eq
 802e160:	1949      	addeq	r1, r1, r5
 802e162:	6021      	streq	r1, [r4, #0]
 802e164:	6054      	str	r4, [r2, #4]
 802e166:	e7ca      	b.n	802e0fe <_free_r+0x26>
 802e168:	b003      	add	sp, #12
 802e16a:	bd30      	pop	{r4, r5, pc}
 802e16c:	200011fc 	.word	0x200011fc

0802e170 <sbrk_aligned>:
 802e170:	b570      	push	{r4, r5, r6, lr}
 802e172:	4e0e      	ldr	r6, [pc, #56]	; (802e1ac <sbrk_aligned+0x3c>)
 802e174:	460c      	mov	r4, r1
 802e176:	6831      	ldr	r1, [r6, #0]
 802e178:	4605      	mov	r5, r0
 802e17a:	b911      	cbnz	r1, 802e182 <sbrk_aligned+0x12>
 802e17c:	f000 f91a 	bl	802e3b4 <_sbrk_r>
 802e180:	6030      	str	r0, [r6, #0]
 802e182:	4621      	mov	r1, r4
 802e184:	4628      	mov	r0, r5
 802e186:	f000 f915 	bl	802e3b4 <_sbrk_r>
 802e18a:	1c43      	adds	r3, r0, #1
 802e18c:	d00a      	beq.n	802e1a4 <sbrk_aligned+0x34>
 802e18e:	1cc4      	adds	r4, r0, #3
 802e190:	f024 0403 	bic.w	r4, r4, #3
 802e194:	42a0      	cmp	r0, r4
 802e196:	d007      	beq.n	802e1a8 <sbrk_aligned+0x38>
 802e198:	1a21      	subs	r1, r4, r0
 802e19a:	4628      	mov	r0, r5
 802e19c:	f000 f90a 	bl	802e3b4 <_sbrk_r>
 802e1a0:	3001      	adds	r0, #1
 802e1a2:	d101      	bne.n	802e1a8 <sbrk_aligned+0x38>
 802e1a4:	f04f 34ff 	mov.w	r4, #4294967295
 802e1a8:	4620      	mov	r0, r4
 802e1aa:	bd70      	pop	{r4, r5, r6, pc}
 802e1ac:	20001200 	.word	0x20001200

0802e1b0 <_malloc_r>:
 802e1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e1b4:	1ccd      	adds	r5, r1, #3
 802e1b6:	f025 0503 	bic.w	r5, r5, #3
 802e1ba:	3508      	adds	r5, #8
 802e1bc:	2d0c      	cmp	r5, #12
 802e1be:	bf38      	it	cc
 802e1c0:	250c      	movcc	r5, #12
 802e1c2:	2d00      	cmp	r5, #0
 802e1c4:	4607      	mov	r7, r0
 802e1c6:	db01      	blt.n	802e1cc <_malloc_r+0x1c>
 802e1c8:	42a9      	cmp	r1, r5
 802e1ca:	d905      	bls.n	802e1d8 <_malloc_r+0x28>
 802e1cc:	230c      	movs	r3, #12
 802e1ce:	603b      	str	r3, [r7, #0]
 802e1d0:	2600      	movs	r6, #0
 802e1d2:	4630      	mov	r0, r6
 802e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e1d8:	4e2e      	ldr	r6, [pc, #184]	; (802e294 <_malloc_r+0xe4>)
 802e1da:	f000 fbfb 	bl	802e9d4 <__malloc_lock>
 802e1de:	6833      	ldr	r3, [r6, #0]
 802e1e0:	461c      	mov	r4, r3
 802e1e2:	bb34      	cbnz	r4, 802e232 <_malloc_r+0x82>
 802e1e4:	4629      	mov	r1, r5
 802e1e6:	4638      	mov	r0, r7
 802e1e8:	f7ff ffc2 	bl	802e170 <sbrk_aligned>
 802e1ec:	1c43      	adds	r3, r0, #1
 802e1ee:	4604      	mov	r4, r0
 802e1f0:	d14d      	bne.n	802e28e <_malloc_r+0xde>
 802e1f2:	6834      	ldr	r4, [r6, #0]
 802e1f4:	4626      	mov	r6, r4
 802e1f6:	2e00      	cmp	r6, #0
 802e1f8:	d140      	bne.n	802e27c <_malloc_r+0xcc>
 802e1fa:	6823      	ldr	r3, [r4, #0]
 802e1fc:	4631      	mov	r1, r6
 802e1fe:	4638      	mov	r0, r7
 802e200:	eb04 0803 	add.w	r8, r4, r3
 802e204:	f000 f8d6 	bl	802e3b4 <_sbrk_r>
 802e208:	4580      	cmp	r8, r0
 802e20a:	d13a      	bne.n	802e282 <_malloc_r+0xd2>
 802e20c:	6821      	ldr	r1, [r4, #0]
 802e20e:	3503      	adds	r5, #3
 802e210:	1a6d      	subs	r5, r5, r1
 802e212:	f025 0503 	bic.w	r5, r5, #3
 802e216:	3508      	adds	r5, #8
 802e218:	2d0c      	cmp	r5, #12
 802e21a:	bf38      	it	cc
 802e21c:	250c      	movcc	r5, #12
 802e21e:	4629      	mov	r1, r5
 802e220:	4638      	mov	r0, r7
 802e222:	f7ff ffa5 	bl	802e170 <sbrk_aligned>
 802e226:	3001      	adds	r0, #1
 802e228:	d02b      	beq.n	802e282 <_malloc_r+0xd2>
 802e22a:	6823      	ldr	r3, [r4, #0]
 802e22c:	442b      	add	r3, r5
 802e22e:	6023      	str	r3, [r4, #0]
 802e230:	e00e      	b.n	802e250 <_malloc_r+0xa0>
 802e232:	6822      	ldr	r2, [r4, #0]
 802e234:	1b52      	subs	r2, r2, r5
 802e236:	d41e      	bmi.n	802e276 <_malloc_r+0xc6>
 802e238:	2a0b      	cmp	r2, #11
 802e23a:	d916      	bls.n	802e26a <_malloc_r+0xba>
 802e23c:	1961      	adds	r1, r4, r5
 802e23e:	42a3      	cmp	r3, r4
 802e240:	6025      	str	r5, [r4, #0]
 802e242:	bf18      	it	ne
 802e244:	6059      	strne	r1, [r3, #4]
 802e246:	6863      	ldr	r3, [r4, #4]
 802e248:	bf08      	it	eq
 802e24a:	6031      	streq	r1, [r6, #0]
 802e24c:	5162      	str	r2, [r4, r5]
 802e24e:	604b      	str	r3, [r1, #4]
 802e250:	4638      	mov	r0, r7
 802e252:	f104 060b 	add.w	r6, r4, #11
 802e256:	f000 fbc3 	bl	802e9e0 <__malloc_unlock>
 802e25a:	f026 0607 	bic.w	r6, r6, #7
 802e25e:	1d23      	adds	r3, r4, #4
 802e260:	1af2      	subs	r2, r6, r3
 802e262:	d0b6      	beq.n	802e1d2 <_malloc_r+0x22>
 802e264:	1b9b      	subs	r3, r3, r6
 802e266:	50a3      	str	r3, [r4, r2]
 802e268:	e7b3      	b.n	802e1d2 <_malloc_r+0x22>
 802e26a:	6862      	ldr	r2, [r4, #4]
 802e26c:	42a3      	cmp	r3, r4
 802e26e:	bf0c      	ite	eq
 802e270:	6032      	streq	r2, [r6, #0]
 802e272:	605a      	strne	r2, [r3, #4]
 802e274:	e7ec      	b.n	802e250 <_malloc_r+0xa0>
 802e276:	4623      	mov	r3, r4
 802e278:	6864      	ldr	r4, [r4, #4]
 802e27a:	e7b2      	b.n	802e1e2 <_malloc_r+0x32>
 802e27c:	4634      	mov	r4, r6
 802e27e:	6876      	ldr	r6, [r6, #4]
 802e280:	e7b9      	b.n	802e1f6 <_malloc_r+0x46>
 802e282:	230c      	movs	r3, #12
 802e284:	603b      	str	r3, [r7, #0]
 802e286:	4638      	mov	r0, r7
 802e288:	f000 fbaa 	bl	802e9e0 <__malloc_unlock>
 802e28c:	e7a1      	b.n	802e1d2 <_malloc_r+0x22>
 802e28e:	6025      	str	r5, [r4, #0]
 802e290:	e7de      	b.n	802e250 <_malloc_r+0xa0>
 802e292:	bf00      	nop
 802e294:	200011fc 	.word	0x200011fc

0802e298 <iprintf>:
 802e298:	b40f      	push	{r0, r1, r2, r3}
 802e29a:	4b0a      	ldr	r3, [pc, #40]	; (802e2c4 <iprintf+0x2c>)
 802e29c:	b513      	push	{r0, r1, r4, lr}
 802e29e:	681c      	ldr	r4, [r3, #0]
 802e2a0:	b124      	cbz	r4, 802e2ac <iprintf+0x14>
 802e2a2:	69a3      	ldr	r3, [r4, #24]
 802e2a4:	b913      	cbnz	r3, 802e2ac <iprintf+0x14>
 802e2a6:	4620      	mov	r0, r4
 802e2a8:	f000 fa8e 	bl	802e7c8 <__sinit>
 802e2ac:	ab05      	add	r3, sp, #20
 802e2ae:	9a04      	ldr	r2, [sp, #16]
 802e2b0:	68a1      	ldr	r1, [r4, #8]
 802e2b2:	9301      	str	r3, [sp, #4]
 802e2b4:	4620      	mov	r0, r4
 802e2b6:	f000 fd1f 	bl	802ecf8 <_vfiprintf_r>
 802e2ba:	b002      	add	sp, #8
 802e2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e2c0:	b004      	add	sp, #16
 802e2c2:	4770      	bx	lr
 802e2c4:	20000080 	.word	0x20000080

0802e2c8 <_puts_r>:
 802e2c8:	b570      	push	{r4, r5, r6, lr}
 802e2ca:	460e      	mov	r6, r1
 802e2cc:	4605      	mov	r5, r0
 802e2ce:	b118      	cbz	r0, 802e2d8 <_puts_r+0x10>
 802e2d0:	6983      	ldr	r3, [r0, #24]
 802e2d2:	b90b      	cbnz	r3, 802e2d8 <_puts_r+0x10>
 802e2d4:	f000 fa78 	bl	802e7c8 <__sinit>
 802e2d8:	69ab      	ldr	r3, [r5, #24]
 802e2da:	68ac      	ldr	r4, [r5, #8]
 802e2dc:	b913      	cbnz	r3, 802e2e4 <_puts_r+0x1c>
 802e2de:	4628      	mov	r0, r5
 802e2e0:	f000 fa72 	bl	802e7c8 <__sinit>
 802e2e4:	4b2c      	ldr	r3, [pc, #176]	; (802e398 <_puts_r+0xd0>)
 802e2e6:	429c      	cmp	r4, r3
 802e2e8:	d120      	bne.n	802e32c <_puts_r+0x64>
 802e2ea:	686c      	ldr	r4, [r5, #4]
 802e2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e2ee:	07db      	lsls	r3, r3, #31
 802e2f0:	d405      	bmi.n	802e2fe <_puts_r+0x36>
 802e2f2:	89a3      	ldrh	r3, [r4, #12]
 802e2f4:	0598      	lsls	r0, r3, #22
 802e2f6:	d402      	bmi.n	802e2fe <_puts_r+0x36>
 802e2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e2fa:	f000 fb03 	bl	802e904 <__retarget_lock_acquire_recursive>
 802e2fe:	89a3      	ldrh	r3, [r4, #12]
 802e300:	0719      	lsls	r1, r3, #28
 802e302:	d51d      	bpl.n	802e340 <_puts_r+0x78>
 802e304:	6923      	ldr	r3, [r4, #16]
 802e306:	b1db      	cbz	r3, 802e340 <_puts_r+0x78>
 802e308:	3e01      	subs	r6, #1
 802e30a:	68a3      	ldr	r3, [r4, #8]
 802e30c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e310:	3b01      	subs	r3, #1
 802e312:	60a3      	str	r3, [r4, #8]
 802e314:	bb39      	cbnz	r1, 802e366 <_puts_r+0x9e>
 802e316:	2b00      	cmp	r3, #0
 802e318:	da38      	bge.n	802e38c <_puts_r+0xc4>
 802e31a:	4622      	mov	r2, r4
 802e31c:	210a      	movs	r1, #10
 802e31e:	4628      	mov	r0, r5
 802e320:	f000 f878 	bl	802e414 <__swbuf_r>
 802e324:	3001      	adds	r0, #1
 802e326:	d011      	beq.n	802e34c <_puts_r+0x84>
 802e328:	250a      	movs	r5, #10
 802e32a:	e011      	b.n	802e350 <_puts_r+0x88>
 802e32c:	4b1b      	ldr	r3, [pc, #108]	; (802e39c <_puts_r+0xd4>)
 802e32e:	429c      	cmp	r4, r3
 802e330:	d101      	bne.n	802e336 <_puts_r+0x6e>
 802e332:	68ac      	ldr	r4, [r5, #8]
 802e334:	e7da      	b.n	802e2ec <_puts_r+0x24>
 802e336:	4b1a      	ldr	r3, [pc, #104]	; (802e3a0 <_puts_r+0xd8>)
 802e338:	429c      	cmp	r4, r3
 802e33a:	bf08      	it	eq
 802e33c:	68ec      	ldreq	r4, [r5, #12]
 802e33e:	e7d5      	b.n	802e2ec <_puts_r+0x24>
 802e340:	4621      	mov	r1, r4
 802e342:	4628      	mov	r0, r5
 802e344:	f000 f8b8 	bl	802e4b8 <__swsetup_r>
 802e348:	2800      	cmp	r0, #0
 802e34a:	d0dd      	beq.n	802e308 <_puts_r+0x40>
 802e34c:	f04f 35ff 	mov.w	r5, #4294967295
 802e350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e352:	07da      	lsls	r2, r3, #31
 802e354:	d405      	bmi.n	802e362 <_puts_r+0x9a>
 802e356:	89a3      	ldrh	r3, [r4, #12]
 802e358:	059b      	lsls	r3, r3, #22
 802e35a:	d402      	bmi.n	802e362 <_puts_r+0x9a>
 802e35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e35e:	f000 fad2 	bl	802e906 <__retarget_lock_release_recursive>
 802e362:	4628      	mov	r0, r5
 802e364:	bd70      	pop	{r4, r5, r6, pc}
 802e366:	2b00      	cmp	r3, #0
 802e368:	da04      	bge.n	802e374 <_puts_r+0xac>
 802e36a:	69a2      	ldr	r2, [r4, #24]
 802e36c:	429a      	cmp	r2, r3
 802e36e:	dc06      	bgt.n	802e37e <_puts_r+0xb6>
 802e370:	290a      	cmp	r1, #10
 802e372:	d004      	beq.n	802e37e <_puts_r+0xb6>
 802e374:	6823      	ldr	r3, [r4, #0]
 802e376:	1c5a      	adds	r2, r3, #1
 802e378:	6022      	str	r2, [r4, #0]
 802e37a:	7019      	strb	r1, [r3, #0]
 802e37c:	e7c5      	b.n	802e30a <_puts_r+0x42>
 802e37e:	4622      	mov	r2, r4
 802e380:	4628      	mov	r0, r5
 802e382:	f000 f847 	bl	802e414 <__swbuf_r>
 802e386:	3001      	adds	r0, #1
 802e388:	d1bf      	bne.n	802e30a <_puts_r+0x42>
 802e38a:	e7df      	b.n	802e34c <_puts_r+0x84>
 802e38c:	6823      	ldr	r3, [r4, #0]
 802e38e:	250a      	movs	r5, #10
 802e390:	1c5a      	adds	r2, r3, #1
 802e392:	6022      	str	r2, [r4, #0]
 802e394:	701d      	strb	r5, [r3, #0]
 802e396:	e7db      	b.n	802e350 <_puts_r+0x88>
 802e398:	08031a50 	.word	0x08031a50
 802e39c:	08031a70 	.word	0x08031a70
 802e3a0:	08031a30 	.word	0x08031a30

0802e3a4 <puts>:
 802e3a4:	4b02      	ldr	r3, [pc, #8]	; (802e3b0 <puts+0xc>)
 802e3a6:	4601      	mov	r1, r0
 802e3a8:	6818      	ldr	r0, [r3, #0]
 802e3aa:	f7ff bf8d 	b.w	802e2c8 <_puts_r>
 802e3ae:	bf00      	nop
 802e3b0:	20000080 	.word	0x20000080

0802e3b4 <_sbrk_r>:
 802e3b4:	b538      	push	{r3, r4, r5, lr}
 802e3b6:	4d06      	ldr	r5, [pc, #24]	; (802e3d0 <_sbrk_r+0x1c>)
 802e3b8:	2300      	movs	r3, #0
 802e3ba:	4604      	mov	r4, r0
 802e3bc:	4608      	mov	r0, r1
 802e3be:	602b      	str	r3, [r5, #0]
 802e3c0:	f7f3 fecc 	bl	802215c <_sbrk>
 802e3c4:	1c43      	adds	r3, r0, #1
 802e3c6:	d102      	bne.n	802e3ce <_sbrk_r+0x1a>
 802e3c8:	682b      	ldr	r3, [r5, #0]
 802e3ca:	b103      	cbz	r3, 802e3ce <_sbrk_r+0x1a>
 802e3cc:	6023      	str	r3, [r4, #0]
 802e3ce:	bd38      	pop	{r3, r4, r5, pc}
 802e3d0:	20001208 	.word	0x20001208

0802e3d4 <siprintf>:
 802e3d4:	b40e      	push	{r1, r2, r3}
 802e3d6:	b500      	push	{lr}
 802e3d8:	b09c      	sub	sp, #112	; 0x70
 802e3da:	ab1d      	add	r3, sp, #116	; 0x74
 802e3dc:	9002      	str	r0, [sp, #8]
 802e3de:	9006      	str	r0, [sp, #24]
 802e3e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e3e4:	4809      	ldr	r0, [pc, #36]	; (802e40c <siprintf+0x38>)
 802e3e6:	9107      	str	r1, [sp, #28]
 802e3e8:	9104      	str	r1, [sp, #16]
 802e3ea:	4909      	ldr	r1, [pc, #36]	; (802e410 <siprintf+0x3c>)
 802e3ec:	f853 2b04 	ldr.w	r2, [r3], #4
 802e3f0:	9105      	str	r1, [sp, #20]
 802e3f2:	6800      	ldr	r0, [r0, #0]
 802e3f4:	9301      	str	r3, [sp, #4]
 802e3f6:	a902      	add	r1, sp, #8
 802e3f8:	f000 fb54 	bl	802eaa4 <_svfiprintf_r>
 802e3fc:	9b02      	ldr	r3, [sp, #8]
 802e3fe:	2200      	movs	r2, #0
 802e400:	701a      	strb	r2, [r3, #0]
 802e402:	b01c      	add	sp, #112	; 0x70
 802e404:	f85d eb04 	ldr.w	lr, [sp], #4
 802e408:	b003      	add	sp, #12
 802e40a:	4770      	bx	lr
 802e40c:	20000080 	.word	0x20000080
 802e410:	ffff0208 	.word	0xffff0208

0802e414 <__swbuf_r>:
 802e414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e416:	460e      	mov	r6, r1
 802e418:	4614      	mov	r4, r2
 802e41a:	4605      	mov	r5, r0
 802e41c:	b118      	cbz	r0, 802e426 <__swbuf_r+0x12>
 802e41e:	6983      	ldr	r3, [r0, #24]
 802e420:	b90b      	cbnz	r3, 802e426 <__swbuf_r+0x12>
 802e422:	f000 f9d1 	bl	802e7c8 <__sinit>
 802e426:	4b21      	ldr	r3, [pc, #132]	; (802e4ac <__swbuf_r+0x98>)
 802e428:	429c      	cmp	r4, r3
 802e42a:	d12b      	bne.n	802e484 <__swbuf_r+0x70>
 802e42c:	686c      	ldr	r4, [r5, #4]
 802e42e:	69a3      	ldr	r3, [r4, #24]
 802e430:	60a3      	str	r3, [r4, #8]
 802e432:	89a3      	ldrh	r3, [r4, #12]
 802e434:	071a      	lsls	r2, r3, #28
 802e436:	d52f      	bpl.n	802e498 <__swbuf_r+0x84>
 802e438:	6923      	ldr	r3, [r4, #16]
 802e43a:	b36b      	cbz	r3, 802e498 <__swbuf_r+0x84>
 802e43c:	6923      	ldr	r3, [r4, #16]
 802e43e:	6820      	ldr	r0, [r4, #0]
 802e440:	1ac0      	subs	r0, r0, r3
 802e442:	6963      	ldr	r3, [r4, #20]
 802e444:	b2f6      	uxtb	r6, r6
 802e446:	4283      	cmp	r3, r0
 802e448:	4637      	mov	r7, r6
 802e44a:	dc04      	bgt.n	802e456 <__swbuf_r+0x42>
 802e44c:	4621      	mov	r1, r4
 802e44e:	4628      	mov	r0, r5
 802e450:	f000 f926 	bl	802e6a0 <_fflush_r>
 802e454:	bb30      	cbnz	r0, 802e4a4 <__swbuf_r+0x90>
 802e456:	68a3      	ldr	r3, [r4, #8]
 802e458:	3b01      	subs	r3, #1
 802e45a:	60a3      	str	r3, [r4, #8]
 802e45c:	6823      	ldr	r3, [r4, #0]
 802e45e:	1c5a      	adds	r2, r3, #1
 802e460:	6022      	str	r2, [r4, #0]
 802e462:	701e      	strb	r6, [r3, #0]
 802e464:	6963      	ldr	r3, [r4, #20]
 802e466:	3001      	adds	r0, #1
 802e468:	4283      	cmp	r3, r0
 802e46a:	d004      	beq.n	802e476 <__swbuf_r+0x62>
 802e46c:	89a3      	ldrh	r3, [r4, #12]
 802e46e:	07db      	lsls	r3, r3, #31
 802e470:	d506      	bpl.n	802e480 <__swbuf_r+0x6c>
 802e472:	2e0a      	cmp	r6, #10
 802e474:	d104      	bne.n	802e480 <__swbuf_r+0x6c>
 802e476:	4621      	mov	r1, r4
 802e478:	4628      	mov	r0, r5
 802e47a:	f000 f911 	bl	802e6a0 <_fflush_r>
 802e47e:	b988      	cbnz	r0, 802e4a4 <__swbuf_r+0x90>
 802e480:	4638      	mov	r0, r7
 802e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e484:	4b0a      	ldr	r3, [pc, #40]	; (802e4b0 <__swbuf_r+0x9c>)
 802e486:	429c      	cmp	r4, r3
 802e488:	d101      	bne.n	802e48e <__swbuf_r+0x7a>
 802e48a:	68ac      	ldr	r4, [r5, #8]
 802e48c:	e7cf      	b.n	802e42e <__swbuf_r+0x1a>
 802e48e:	4b09      	ldr	r3, [pc, #36]	; (802e4b4 <__swbuf_r+0xa0>)
 802e490:	429c      	cmp	r4, r3
 802e492:	bf08      	it	eq
 802e494:	68ec      	ldreq	r4, [r5, #12]
 802e496:	e7ca      	b.n	802e42e <__swbuf_r+0x1a>
 802e498:	4621      	mov	r1, r4
 802e49a:	4628      	mov	r0, r5
 802e49c:	f000 f80c 	bl	802e4b8 <__swsetup_r>
 802e4a0:	2800      	cmp	r0, #0
 802e4a2:	d0cb      	beq.n	802e43c <__swbuf_r+0x28>
 802e4a4:	f04f 37ff 	mov.w	r7, #4294967295
 802e4a8:	e7ea      	b.n	802e480 <__swbuf_r+0x6c>
 802e4aa:	bf00      	nop
 802e4ac:	08031a50 	.word	0x08031a50
 802e4b0:	08031a70 	.word	0x08031a70
 802e4b4:	08031a30 	.word	0x08031a30

0802e4b8 <__swsetup_r>:
 802e4b8:	4b32      	ldr	r3, [pc, #200]	; (802e584 <__swsetup_r+0xcc>)
 802e4ba:	b570      	push	{r4, r5, r6, lr}
 802e4bc:	681d      	ldr	r5, [r3, #0]
 802e4be:	4606      	mov	r6, r0
 802e4c0:	460c      	mov	r4, r1
 802e4c2:	b125      	cbz	r5, 802e4ce <__swsetup_r+0x16>
 802e4c4:	69ab      	ldr	r3, [r5, #24]
 802e4c6:	b913      	cbnz	r3, 802e4ce <__swsetup_r+0x16>
 802e4c8:	4628      	mov	r0, r5
 802e4ca:	f000 f97d 	bl	802e7c8 <__sinit>
 802e4ce:	4b2e      	ldr	r3, [pc, #184]	; (802e588 <__swsetup_r+0xd0>)
 802e4d0:	429c      	cmp	r4, r3
 802e4d2:	d10f      	bne.n	802e4f4 <__swsetup_r+0x3c>
 802e4d4:	686c      	ldr	r4, [r5, #4]
 802e4d6:	89a3      	ldrh	r3, [r4, #12]
 802e4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e4dc:	0719      	lsls	r1, r3, #28
 802e4de:	d42c      	bmi.n	802e53a <__swsetup_r+0x82>
 802e4e0:	06dd      	lsls	r5, r3, #27
 802e4e2:	d411      	bmi.n	802e508 <__swsetup_r+0x50>
 802e4e4:	2309      	movs	r3, #9
 802e4e6:	6033      	str	r3, [r6, #0]
 802e4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e4ec:	81a3      	strh	r3, [r4, #12]
 802e4ee:	f04f 30ff 	mov.w	r0, #4294967295
 802e4f2:	e03e      	b.n	802e572 <__swsetup_r+0xba>
 802e4f4:	4b25      	ldr	r3, [pc, #148]	; (802e58c <__swsetup_r+0xd4>)
 802e4f6:	429c      	cmp	r4, r3
 802e4f8:	d101      	bne.n	802e4fe <__swsetup_r+0x46>
 802e4fa:	68ac      	ldr	r4, [r5, #8]
 802e4fc:	e7eb      	b.n	802e4d6 <__swsetup_r+0x1e>
 802e4fe:	4b24      	ldr	r3, [pc, #144]	; (802e590 <__swsetup_r+0xd8>)
 802e500:	429c      	cmp	r4, r3
 802e502:	bf08      	it	eq
 802e504:	68ec      	ldreq	r4, [r5, #12]
 802e506:	e7e6      	b.n	802e4d6 <__swsetup_r+0x1e>
 802e508:	0758      	lsls	r0, r3, #29
 802e50a:	d512      	bpl.n	802e532 <__swsetup_r+0x7a>
 802e50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e50e:	b141      	cbz	r1, 802e522 <__swsetup_r+0x6a>
 802e510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e514:	4299      	cmp	r1, r3
 802e516:	d002      	beq.n	802e51e <__swsetup_r+0x66>
 802e518:	4630      	mov	r0, r6
 802e51a:	f7ff fddd 	bl	802e0d8 <_free_r>
 802e51e:	2300      	movs	r3, #0
 802e520:	6363      	str	r3, [r4, #52]	; 0x34
 802e522:	89a3      	ldrh	r3, [r4, #12]
 802e524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e528:	81a3      	strh	r3, [r4, #12]
 802e52a:	2300      	movs	r3, #0
 802e52c:	6063      	str	r3, [r4, #4]
 802e52e:	6923      	ldr	r3, [r4, #16]
 802e530:	6023      	str	r3, [r4, #0]
 802e532:	89a3      	ldrh	r3, [r4, #12]
 802e534:	f043 0308 	orr.w	r3, r3, #8
 802e538:	81a3      	strh	r3, [r4, #12]
 802e53a:	6923      	ldr	r3, [r4, #16]
 802e53c:	b94b      	cbnz	r3, 802e552 <__swsetup_r+0x9a>
 802e53e:	89a3      	ldrh	r3, [r4, #12]
 802e540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e548:	d003      	beq.n	802e552 <__swsetup_r+0x9a>
 802e54a:	4621      	mov	r1, r4
 802e54c:	4630      	mov	r0, r6
 802e54e:	f000 fa01 	bl	802e954 <__smakebuf_r>
 802e552:	89a0      	ldrh	r0, [r4, #12]
 802e554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e558:	f010 0301 	ands.w	r3, r0, #1
 802e55c:	d00a      	beq.n	802e574 <__swsetup_r+0xbc>
 802e55e:	2300      	movs	r3, #0
 802e560:	60a3      	str	r3, [r4, #8]
 802e562:	6963      	ldr	r3, [r4, #20]
 802e564:	425b      	negs	r3, r3
 802e566:	61a3      	str	r3, [r4, #24]
 802e568:	6923      	ldr	r3, [r4, #16]
 802e56a:	b943      	cbnz	r3, 802e57e <__swsetup_r+0xc6>
 802e56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e570:	d1ba      	bne.n	802e4e8 <__swsetup_r+0x30>
 802e572:	bd70      	pop	{r4, r5, r6, pc}
 802e574:	0781      	lsls	r1, r0, #30
 802e576:	bf58      	it	pl
 802e578:	6963      	ldrpl	r3, [r4, #20]
 802e57a:	60a3      	str	r3, [r4, #8]
 802e57c:	e7f4      	b.n	802e568 <__swsetup_r+0xb0>
 802e57e:	2000      	movs	r0, #0
 802e580:	e7f7      	b.n	802e572 <__swsetup_r+0xba>
 802e582:	bf00      	nop
 802e584:	20000080 	.word	0x20000080
 802e588:	08031a50 	.word	0x08031a50
 802e58c:	08031a70 	.word	0x08031a70
 802e590:	08031a30 	.word	0x08031a30

0802e594 <__sflush_r>:
 802e594:	898a      	ldrh	r2, [r1, #12]
 802e596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e59a:	4605      	mov	r5, r0
 802e59c:	0710      	lsls	r0, r2, #28
 802e59e:	460c      	mov	r4, r1
 802e5a0:	d458      	bmi.n	802e654 <__sflush_r+0xc0>
 802e5a2:	684b      	ldr	r3, [r1, #4]
 802e5a4:	2b00      	cmp	r3, #0
 802e5a6:	dc05      	bgt.n	802e5b4 <__sflush_r+0x20>
 802e5a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e5aa:	2b00      	cmp	r3, #0
 802e5ac:	dc02      	bgt.n	802e5b4 <__sflush_r+0x20>
 802e5ae:	2000      	movs	r0, #0
 802e5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5b6:	2e00      	cmp	r6, #0
 802e5b8:	d0f9      	beq.n	802e5ae <__sflush_r+0x1a>
 802e5ba:	2300      	movs	r3, #0
 802e5bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e5c0:	682f      	ldr	r7, [r5, #0]
 802e5c2:	602b      	str	r3, [r5, #0]
 802e5c4:	d032      	beq.n	802e62c <__sflush_r+0x98>
 802e5c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e5c8:	89a3      	ldrh	r3, [r4, #12]
 802e5ca:	075a      	lsls	r2, r3, #29
 802e5cc:	d505      	bpl.n	802e5da <__sflush_r+0x46>
 802e5ce:	6863      	ldr	r3, [r4, #4]
 802e5d0:	1ac0      	subs	r0, r0, r3
 802e5d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e5d4:	b10b      	cbz	r3, 802e5da <__sflush_r+0x46>
 802e5d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e5d8:	1ac0      	subs	r0, r0, r3
 802e5da:	2300      	movs	r3, #0
 802e5dc:	4602      	mov	r2, r0
 802e5de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5e0:	6a21      	ldr	r1, [r4, #32]
 802e5e2:	4628      	mov	r0, r5
 802e5e4:	47b0      	blx	r6
 802e5e6:	1c43      	adds	r3, r0, #1
 802e5e8:	89a3      	ldrh	r3, [r4, #12]
 802e5ea:	d106      	bne.n	802e5fa <__sflush_r+0x66>
 802e5ec:	6829      	ldr	r1, [r5, #0]
 802e5ee:	291d      	cmp	r1, #29
 802e5f0:	d82c      	bhi.n	802e64c <__sflush_r+0xb8>
 802e5f2:	4a2a      	ldr	r2, [pc, #168]	; (802e69c <__sflush_r+0x108>)
 802e5f4:	40ca      	lsrs	r2, r1
 802e5f6:	07d6      	lsls	r6, r2, #31
 802e5f8:	d528      	bpl.n	802e64c <__sflush_r+0xb8>
 802e5fa:	2200      	movs	r2, #0
 802e5fc:	6062      	str	r2, [r4, #4]
 802e5fe:	04d9      	lsls	r1, r3, #19
 802e600:	6922      	ldr	r2, [r4, #16]
 802e602:	6022      	str	r2, [r4, #0]
 802e604:	d504      	bpl.n	802e610 <__sflush_r+0x7c>
 802e606:	1c42      	adds	r2, r0, #1
 802e608:	d101      	bne.n	802e60e <__sflush_r+0x7a>
 802e60a:	682b      	ldr	r3, [r5, #0]
 802e60c:	b903      	cbnz	r3, 802e610 <__sflush_r+0x7c>
 802e60e:	6560      	str	r0, [r4, #84]	; 0x54
 802e610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e612:	602f      	str	r7, [r5, #0]
 802e614:	2900      	cmp	r1, #0
 802e616:	d0ca      	beq.n	802e5ae <__sflush_r+0x1a>
 802e618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e61c:	4299      	cmp	r1, r3
 802e61e:	d002      	beq.n	802e626 <__sflush_r+0x92>
 802e620:	4628      	mov	r0, r5
 802e622:	f7ff fd59 	bl	802e0d8 <_free_r>
 802e626:	2000      	movs	r0, #0
 802e628:	6360      	str	r0, [r4, #52]	; 0x34
 802e62a:	e7c1      	b.n	802e5b0 <__sflush_r+0x1c>
 802e62c:	6a21      	ldr	r1, [r4, #32]
 802e62e:	2301      	movs	r3, #1
 802e630:	4628      	mov	r0, r5
 802e632:	47b0      	blx	r6
 802e634:	1c41      	adds	r1, r0, #1
 802e636:	d1c7      	bne.n	802e5c8 <__sflush_r+0x34>
 802e638:	682b      	ldr	r3, [r5, #0]
 802e63a:	2b00      	cmp	r3, #0
 802e63c:	d0c4      	beq.n	802e5c8 <__sflush_r+0x34>
 802e63e:	2b1d      	cmp	r3, #29
 802e640:	d001      	beq.n	802e646 <__sflush_r+0xb2>
 802e642:	2b16      	cmp	r3, #22
 802e644:	d101      	bne.n	802e64a <__sflush_r+0xb6>
 802e646:	602f      	str	r7, [r5, #0]
 802e648:	e7b1      	b.n	802e5ae <__sflush_r+0x1a>
 802e64a:	89a3      	ldrh	r3, [r4, #12]
 802e64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e650:	81a3      	strh	r3, [r4, #12]
 802e652:	e7ad      	b.n	802e5b0 <__sflush_r+0x1c>
 802e654:	690f      	ldr	r7, [r1, #16]
 802e656:	2f00      	cmp	r7, #0
 802e658:	d0a9      	beq.n	802e5ae <__sflush_r+0x1a>
 802e65a:	0793      	lsls	r3, r2, #30
 802e65c:	680e      	ldr	r6, [r1, #0]
 802e65e:	bf08      	it	eq
 802e660:	694b      	ldreq	r3, [r1, #20]
 802e662:	600f      	str	r7, [r1, #0]
 802e664:	bf18      	it	ne
 802e666:	2300      	movne	r3, #0
 802e668:	eba6 0807 	sub.w	r8, r6, r7
 802e66c:	608b      	str	r3, [r1, #8]
 802e66e:	f1b8 0f00 	cmp.w	r8, #0
 802e672:	dd9c      	ble.n	802e5ae <__sflush_r+0x1a>
 802e674:	6a21      	ldr	r1, [r4, #32]
 802e676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e678:	4643      	mov	r3, r8
 802e67a:	463a      	mov	r2, r7
 802e67c:	4628      	mov	r0, r5
 802e67e:	47b0      	blx	r6
 802e680:	2800      	cmp	r0, #0
 802e682:	dc06      	bgt.n	802e692 <__sflush_r+0xfe>
 802e684:	89a3      	ldrh	r3, [r4, #12]
 802e686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e68a:	81a3      	strh	r3, [r4, #12]
 802e68c:	f04f 30ff 	mov.w	r0, #4294967295
 802e690:	e78e      	b.n	802e5b0 <__sflush_r+0x1c>
 802e692:	4407      	add	r7, r0
 802e694:	eba8 0800 	sub.w	r8, r8, r0
 802e698:	e7e9      	b.n	802e66e <__sflush_r+0xda>
 802e69a:	bf00      	nop
 802e69c:	20400001 	.word	0x20400001

0802e6a0 <_fflush_r>:
 802e6a0:	b538      	push	{r3, r4, r5, lr}
 802e6a2:	690b      	ldr	r3, [r1, #16]
 802e6a4:	4605      	mov	r5, r0
 802e6a6:	460c      	mov	r4, r1
 802e6a8:	b913      	cbnz	r3, 802e6b0 <_fflush_r+0x10>
 802e6aa:	2500      	movs	r5, #0
 802e6ac:	4628      	mov	r0, r5
 802e6ae:	bd38      	pop	{r3, r4, r5, pc}
 802e6b0:	b118      	cbz	r0, 802e6ba <_fflush_r+0x1a>
 802e6b2:	6983      	ldr	r3, [r0, #24]
 802e6b4:	b90b      	cbnz	r3, 802e6ba <_fflush_r+0x1a>
 802e6b6:	f000 f887 	bl	802e7c8 <__sinit>
 802e6ba:	4b14      	ldr	r3, [pc, #80]	; (802e70c <_fflush_r+0x6c>)
 802e6bc:	429c      	cmp	r4, r3
 802e6be:	d11b      	bne.n	802e6f8 <_fflush_r+0x58>
 802e6c0:	686c      	ldr	r4, [r5, #4]
 802e6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e6c6:	2b00      	cmp	r3, #0
 802e6c8:	d0ef      	beq.n	802e6aa <_fflush_r+0xa>
 802e6ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e6cc:	07d0      	lsls	r0, r2, #31
 802e6ce:	d404      	bmi.n	802e6da <_fflush_r+0x3a>
 802e6d0:	0599      	lsls	r1, r3, #22
 802e6d2:	d402      	bmi.n	802e6da <_fflush_r+0x3a>
 802e6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e6d6:	f000 f915 	bl	802e904 <__retarget_lock_acquire_recursive>
 802e6da:	4628      	mov	r0, r5
 802e6dc:	4621      	mov	r1, r4
 802e6de:	f7ff ff59 	bl	802e594 <__sflush_r>
 802e6e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e6e4:	07da      	lsls	r2, r3, #31
 802e6e6:	4605      	mov	r5, r0
 802e6e8:	d4e0      	bmi.n	802e6ac <_fflush_r+0xc>
 802e6ea:	89a3      	ldrh	r3, [r4, #12]
 802e6ec:	059b      	lsls	r3, r3, #22
 802e6ee:	d4dd      	bmi.n	802e6ac <_fflush_r+0xc>
 802e6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e6f2:	f000 f908 	bl	802e906 <__retarget_lock_release_recursive>
 802e6f6:	e7d9      	b.n	802e6ac <_fflush_r+0xc>
 802e6f8:	4b05      	ldr	r3, [pc, #20]	; (802e710 <_fflush_r+0x70>)
 802e6fa:	429c      	cmp	r4, r3
 802e6fc:	d101      	bne.n	802e702 <_fflush_r+0x62>
 802e6fe:	68ac      	ldr	r4, [r5, #8]
 802e700:	e7df      	b.n	802e6c2 <_fflush_r+0x22>
 802e702:	4b04      	ldr	r3, [pc, #16]	; (802e714 <_fflush_r+0x74>)
 802e704:	429c      	cmp	r4, r3
 802e706:	bf08      	it	eq
 802e708:	68ec      	ldreq	r4, [r5, #12]
 802e70a:	e7da      	b.n	802e6c2 <_fflush_r+0x22>
 802e70c:	08031a50 	.word	0x08031a50
 802e710:	08031a70 	.word	0x08031a70
 802e714:	08031a30 	.word	0x08031a30

0802e718 <std>:
 802e718:	2300      	movs	r3, #0
 802e71a:	b510      	push	{r4, lr}
 802e71c:	4604      	mov	r4, r0
 802e71e:	e9c0 3300 	strd	r3, r3, [r0]
 802e722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e726:	6083      	str	r3, [r0, #8]
 802e728:	8181      	strh	r1, [r0, #12]
 802e72a:	6643      	str	r3, [r0, #100]	; 0x64
 802e72c:	81c2      	strh	r2, [r0, #14]
 802e72e:	6183      	str	r3, [r0, #24]
 802e730:	4619      	mov	r1, r3
 802e732:	2208      	movs	r2, #8
 802e734:	305c      	adds	r0, #92	; 0x5c
 802e736:	f7ff fcc7 	bl	802e0c8 <memset>
 802e73a:	4b05      	ldr	r3, [pc, #20]	; (802e750 <std+0x38>)
 802e73c:	6263      	str	r3, [r4, #36]	; 0x24
 802e73e:	4b05      	ldr	r3, [pc, #20]	; (802e754 <std+0x3c>)
 802e740:	62a3      	str	r3, [r4, #40]	; 0x28
 802e742:	4b05      	ldr	r3, [pc, #20]	; (802e758 <std+0x40>)
 802e744:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e746:	4b05      	ldr	r3, [pc, #20]	; (802e75c <std+0x44>)
 802e748:	6224      	str	r4, [r4, #32]
 802e74a:	6323      	str	r3, [r4, #48]	; 0x30
 802e74c:	bd10      	pop	{r4, pc}
 802e74e:	bf00      	nop
 802e750:	0802f281 	.word	0x0802f281
 802e754:	0802f2a3 	.word	0x0802f2a3
 802e758:	0802f2db 	.word	0x0802f2db
 802e75c:	0802f2ff 	.word	0x0802f2ff

0802e760 <_cleanup_r>:
 802e760:	4901      	ldr	r1, [pc, #4]	; (802e768 <_cleanup_r+0x8>)
 802e762:	f000 b8af 	b.w	802e8c4 <_fwalk_reent>
 802e766:	bf00      	nop
 802e768:	0802e6a1 	.word	0x0802e6a1

0802e76c <__sfmoreglue>:
 802e76c:	b570      	push	{r4, r5, r6, lr}
 802e76e:	2268      	movs	r2, #104	; 0x68
 802e770:	1e4d      	subs	r5, r1, #1
 802e772:	4355      	muls	r5, r2
 802e774:	460e      	mov	r6, r1
 802e776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e77a:	f7ff fd19 	bl	802e1b0 <_malloc_r>
 802e77e:	4604      	mov	r4, r0
 802e780:	b140      	cbz	r0, 802e794 <__sfmoreglue+0x28>
 802e782:	2100      	movs	r1, #0
 802e784:	e9c0 1600 	strd	r1, r6, [r0]
 802e788:	300c      	adds	r0, #12
 802e78a:	60a0      	str	r0, [r4, #8]
 802e78c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e790:	f7ff fc9a 	bl	802e0c8 <memset>
 802e794:	4620      	mov	r0, r4
 802e796:	bd70      	pop	{r4, r5, r6, pc}

0802e798 <__sfp_lock_acquire>:
 802e798:	4801      	ldr	r0, [pc, #4]	; (802e7a0 <__sfp_lock_acquire+0x8>)
 802e79a:	f000 b8b3 	b.w	802e904 <__retarget_lock_acquire_recursive>
 802e79e:	bf00      	nop
 802e7a0:	20001205 	.word	0x20001205

0802e7a4 <__sfp_lock_release>:
 802e7a4:	4801      	ldr	r0, [pc, #4]	; (802e7ac <__sfp_lock_release+0x8>)
 802e7a6:	f000 b8ae 	b.w	802e906 <__retarget_lock_release_recursive>
 802e7aa:	bf00      	nop
 802e7ac:	20001205 	.word	0x20001205

0802e7b0 <__sinit_lock_acquire>:
 802e7b0:	4801      	ldr	r0, [pc, #4]	; (802e7b8 <__sinit_lock_acquire+0x8>)
 802e7b2:	f000 b8a7 	b.w	802e904 <__retarget_lock_acquire_recursive>
 802e7b6:	bf00      	nop
 802e7b8:	20001206 	.word	0x20001206

0802e7bc <__sinit_lock_release>:
 802e7bc:	4801      	ldr	r0, [pc, #4]	; (802e7c4 <__sinit_lock_release+0x8>)
 802e7be:	f000 b8a2 	b.w	802e906 <__retarget_lock_release_recursive>
 802e7c2:	bf00      	nop
 802e7c4:	20001206 	.word	0x20001206

0802e7c8 <__sinit>:
 802e7c8:	b510      	push	{r4, lr}
 802e7ca:	4604      	mov	r4, r0
 802e7cc:	f7ff fff0 	bl	802e7b0 <__sinit_lock_acquire>
 802e7d0:	69a3      	ldr	r3, [r4, #24]
 802e7d2:	b11b      	cbz	r3, 802e7dc <__sinit+0x14>
 802e7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e7d8:	f7ff bff0 	b.w	802e7bc <__sinit_lock_release>
 802e7dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e7e0:	6523      	str	r3, [r4, #80]	; 0x50
 802e7e2:	4b13      	ldr	r3, [pc, #76]	; (802e830 <__sinit+0x68>)
 802e7e4:	4a13      	ldr	r2, [pc, #76]	; (802e834 <__sinit+0x6c>)
 802e7e6:	681b      	ldr	r3, [r3, #0]
 802e7e8:	62a2      	str	r2, [r4, #40]	; 0x28
 802e7ea:	42a3      	cmp	r3, r4
 802e7ec:	bf04      	itt	eq
 802e7ee:	2301      	moveq	r3, #1
 802e7f0:	61a3      	streq	r3, [r4, #24]
 802e7f2:	4620      	mov	r0, r4
 802e7f4:	f000 f820 	bl	802e838 <__sfp>
 802e7f8:	6060      	str	r0, [r4, #4]
 802e7fa:	4620      	mov	r0, r4
 802e7fc:	f000 f81c 	bl	802e838 <__sfp>
 802e800:	60a0      	str	r0, [r4, #8]
 802e802:	4620      	mov	r0, r4
 802e804:	f000 f818 	bl	802e838 <__sfp>
 802e808:	2200      	movs	r2, #0
 802e80a:	60e0      	str	r0, [r4, #12]
 802e80c:	2104      	movs	r1, #4
 802e80e:	6860      	ldr	r0, [r4, #4]
 802e810:	f7ff ff82 	bl	802e718 <std>
 802e814:	68a0      	ldr	r0, [r4, #8]
 802e816:	2201      	movs	r2, #1
 802e818:	2109      	movs	r1, #9
 802e81a:	f7ff ff7d 	bl	802e718 <std>
 802e81e:	68e0      	ldr	r0, [r4, #12]
 802e820:	2202      	movs	r2, #2
 802e822:	2112      	movs	r1, #18
 802e824:	f7ff ff78 	bl	802e718 <std>
 802e828:	2301      	movs	r3, #1
 802e82a:	61a3      	str	r3, [r4, #24]
 802e82c:	e7d2      	b.n	802e7d4 <__sinit+0xc>
 802e82e:	bf00      	nop
 802e830:	08031a2c 	.word	0x08031a2c
 802e834:	0802e761 	.word	0x0802e761

0802e838 <__sfp>:
 802e838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e83a:	4607      	mov	r7, r0
 802e83c:	f7ff ffac 	bl	802e798 <__sfp_lock_acquire>
 802e840:	4b1e      	ldr	r3, [pc, #120]	; (802e8bc <__sfp+0x84>)
 802e842:	681e      	ldr	r6, [r3, #0]
 802e844:	69b3      	ldr	r3, [r6, #24]
 802e846:	b913      	cbnz	r3, 802e84e <__sfp+0x16>
 802e848:	4630      	mov	r0, r6
 802e84a:	f7ff ffbd 	bl	802e7c8 <__sinit>
 802e84e:	3648      	adds	r6, #72	; 0x48
 802e850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e854:	3b01      	subs	r3, #1
 802e856:	d503      	bpl.n	802e860 <__sfp+0x28>
 802e858:	6833      	ldr	r3, [r6, #0]
 802e85a:	b30b      	cbz	r3, 802e8a0 <__sfp+0x68>
 802e85c:	6836      	ldr	r6, [r6, #0]
 802e85e:	e7f7      	b.n	802e850 <__sfp+0x18>
 802e860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e864:	b9d5      	cbnz	r5, 802e89c <__sfp+0x64>
 802e866:	4b16      	ldr	r3, [pc, #88]	; (802e8c0 <__sfp+0x88>)
 802e868:	60e3      	str	r3, [r4, #12]
 802e86a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e86e:	6665      	str	r5, [r4, #100]	; 0x64
 802e870:	f000 f847 	bl	802e902 <__retarget_lock_init_recursive>
 802e874:	f7ff ff96 	bl	802e7a4 <__sfp_lock_release>
 802e878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e87c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e880:	6025      	str	r5, [r4, #0]
 802e882:	61a5      	str	r5, [r4, #24]
 802e884:	2208      	movs	r2, #8
 802e886:	4629      	mov	r1, r5
 802e888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e88c:	f7ff fc1c 	bl	802e0c8 <memset>
 802e890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e898:	4620      	mov	r0, r4
 802e89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e89c:	3468      	adds	r4, #104	; 0x68
 802e89e:	e7d9      	b.n	802e854 <__sfp+0x1c>
 802e8a0:	2104      	movs	r1, #4
 802e8a2:	4638      	mov	r0, r7
 802e8a4:	f7ff ff62 	bl	802e76c <__sfmoreglue>
 802e8a8:	4604      	mov	r4, r0
 802e8aa:	6030      	str	r0, [r6, #0]
 802e8ac:	2800      	cmp	r0, #0
 802e8ae:	d1d5      	bne.n	802e85c <__sfp+0x24>
 802e8b0:	f7ff ff78 	bl	802e7a4 <__sfp_lock_release>
 802e8b4:	230c      	movs	r3, #12
 802e8b6:	603b      	str	r3, [r7, #0]
 802e8b8:	e7ee      	b.n	802e898 <__sfp+0x60>
 802e8ba:	bf00      	nop
 802e8bc:	08031a2c 	.word	0x08031a2c
 802e8c0:	ffff0001 	.word	0xffff0001

0802e8c4 <_fwalk_reent>:
 802e8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e8c8:	4606      	mov	r6, r0
 802e8ca:	4688      	mov	r8, r1
 802e8cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e8d0:	2700      	movs	r7, #0
 802e8d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e8d6:	f1b9 0901 	subs.w	r9, r9, #1
 802e8da:	d505      	bpl.n	802e8e8 <_fwalk_reent+0x24>
 802e8dc:	6824      	ldr	r4, [r4, #0]
 802e8de:	2c00      	cmp	r4, #0
 802e8e0:	d1f7      	bne.n	802e8d2 <_fwalk_reent+0xe>
 802e8e2:	4638      	mov	r0, r7
 802e8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e8e8:	89ab      	ldrh	r3, [r5, #12]
 802e8ea:	2b01      	cmp	r3, #1
 802e8ec:	d907      	bls.n	802e8fe <_fwalk_reent+0x3a>
 802e8ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e8f2:	3301      	adds	r3, #1
 802e8f4:	d003      	beq.n	802e8fe <_fwalk_reent+0x3a>
 802e8f6:	4629      	mov	r1, r5
 802e8f8:	4630      	mov	r0, r6
 802e8fa:	47c0      	blx	r8
 802e8fc:	4307      	orrs	r7, r0
 802e8fe:	3568      	adds	r5, #104	; 0x68
 802e900:	e7e9      	b.n	802e8d6 <_fwalk_reent+0x12>

0802e902 <__retarget_lock_init_recursive>:
 802e902:	4770      	bx	lr

0802e904 <__retarget_lock_acquire_recursive>:
 802e904:	4770      	bx	lr

0802e906 <__retarget_lock_release_recursive>:
 802e906:	4770      	bx	lr

0802e908 <__swhatbuf_r>:
 802e908:	b570      	push	{r4, r5, r6, lr}
 802e90a:	460e      	mov	r6, r1
 802e90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e910:	2900      	cmp	r1, #0
 802e912:	b096      	sub	sp, #88	; 0x58
 802e914:	4614      	mov	r4, r2
 802e916:	461d      	mov	r5, r3
 802e918:	da08      	bge.n	802e92c <__swhatbuf_r+0x24>
 802e91a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e91e:	2200      	movs	r2, #0
 802e920:	602a      	str	r2, [r5, #0]
 802e922:	061a      	lsls	r2, r3, #24
 802e924:	d410      	bmi.n	802e948 <__swhatbuf_r+0x40>
 802e926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e92a:	e00e      	b.n	802e94a <__swhatbuf_r+0x42>
 802e92c:	466a      	mov	r2, sp
 802e92e:	f000 fd0d 	bl	802f34c <_fstat_r>
 802e932:	2800      	cmp	r0, #0
 802e934:	dbf1      	blt.n	802e91a <__swhatbuf_r+0x12>
 802e936:	9a01      	ldr	r2, [sp, #4]
 802e938:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e93c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e940:	425a      	negs	r2, r3
 802e942:	415a      	adcs	r2, r3
 802e944:	602a      	str	r2, [r5, #0]
 802e946:	e7ee      	b.n	802e926 <__swhatbuf_r+0x1e>
 802e948:	2340      	movs	r3, #64	; 0x40
 802e94a:	2000      	movs	r0, #0
 802e94c:	6023      	str	r3, [r4, #0]
 802e94e:	b016      	add	sp, #88	; 0x58
 802e950:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e954 <__smakebuf_r>:
 802e954:	898b      	ldrh	r3, [r1, #12]
 802e956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e958:	079d      	lsls	r5, r3, #30
 802e95a:	4606      	mov	r6, r0
 802e95c:	460c      	mov	r4, r1
 802e95e:	d507      	bpl.n	802e970 <__smakebuf_r+0x1c>
 802e960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e964:	6023      	str	r3, [r4, #0]
 802e966:	6123      	str	r3, [r4, #16]
 802e968:	2301      	movs	r3, #1
 802e96a:	6163      	str	r3, [r4, #20]
 802e96c:	b002      	add	sp, #8
 802e96e:	bd70      	pop	{r4, r5, r6, pc}
 802e970:	ab01      	add	r3, sp, #4
 802e972:	466a      	mov	r2, sp
 802e974:	f7ff ffc8 	bl	802e908 <__swhatbuf_r>
 802e978:	9900      	ldr	r1, [sp, #0]
 802e97a:	4605      	mov	r5, r0
 802e97c:	4630      	mov	r0, r6
 802e97e:	f7ff fc17 	bl	802e1b0 <_malloc_r>
 802e982:	b948      	cbnz	r0, 802e998 <__smakebuf_r+0x44>
 802e984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e988:	059a      	lsls	r2, r3, #22
 802e98a:	d4ef      	bmi.n	802e96c <__smakebuf_r+0x18>
 802e98c:	f023 0303 	bic.w	r3, r3, #3
 802e990:	f043 0302 	orr.w	r3, r3, #2
 802e994:	81a3      	strh	r3, [r4, #12]
 802e996:	e7e3      	b.n	802e960 <__smakebuf_r+0xc>
 802e998:	4b0d      	ldr	r3, [pc, #52]	; (802e9d0 <__smakebuf_r+0x7c>)
 802e99a:	62b3      	str	r3, [r6, #40]	; 0x28
 802e99c:	89a3      	ldrh	r3, [r4, #12]
 802e99e:	6020      	str	r0, [r4, #0]
 802e9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e9a4:	81a3      	strh	r3, [r4, #12]
 802e9a6:	9b00      	ldr	r3, [sp, #0]
 802e9a8:	6163      	str	r3, [r4, #20]
 802e9aa:	9b01      	ldr	r3, [sp, #4]
 802e9ac:	6120      	str	r0, [r4, #16]
 802e9ae:	b15b      	cbz	r3, 802e9c8 <__smakebuf_r+0x74>
 802e9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e9b4:	4630      	mov	r0, r6
 802e9b6:	f000 fcdb 	bl	802f370 <_isatty_r>
 802e9ba:	b128      	cbz	r0, 802e9c8 <__smakebuf_r+0x74>
 802e9bc:	89a3      	ldrh	r3, [r4, #12]
 802e9be:	f023 0303 	bic.w	r3, r3, #3
 802e9c2:	f043 0301 	orr.w	r3, r3, #1
 802e9c6:	81a3      	strh	r3, [r4, #12]
 802e9c8:	89a0      	ldrh	r0, [r4, #12]
 802e9ca:	4305      	orrs	r5, r0
 802e9cc:	81a5      	strh	r5, [r4, #12]
 802e9ce:	e7cd      	b.n	802e96c <__smakebuf_r+0x18>
 802e9d0:	0802e761 	.word	0x0802e761

0802e9d4 <__malloc_lock>:
 802e9d4:	4801      	ldr	r0, [pc, #4]	; (802e9dc <__malloc_lock+0x8>)
 802e9d6:	f7ff bf95 	b.w	802e904 <__retarget_lock_acquire_recursive>
 802e9da:	bf00      	nop
 802e9dc:	20001204 	.word	0x20001204

0802e9e0 <__malloc_unlock>:
 802e9e0:	4801      	ldr	r0, [pc, #4]	; (802e9e8 <__malloc_unlock+0x8>)
 802e9e2:	f7ff bf90 	b.w	802e906 <__retarget_lock_release_recursive>
 802e9e6:	bf00      	nop
 802e9e8:	20001204 	.word	0x20001204

0802e9ec <__ssputs_r>:
 802e9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e9f0:	688e      	ldr	r6, [r1, #8]
 802e9f2:	429e      	cmp	r6, r3
 802e9f4:	4682      	mov	sl, r0
 802e9f6:	460c      	mov	r4, r1
 802e9f8:	4690      	mov	r8, r2
 802e9fa:	461f      	mov	r7, r3
 802e9fc:	d838      	bhi.n	802ea70 <__ssputs_r+0x84>
 802e9fe:	898a      	ldrh	r2, [r1, #12]
 802ea00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ea04:	d032      	beq.n	802ea6c <__ssputs_r+0x80>
 802ea06:	6825      	ldr	r5, [r4, #0]
 802ea08:	6909      	ldr	r1, [r1, #16]
 802ea0a:	eba5 0901 	sub.w	r9, r5, r1
 802ea0e:	6965      	ldr	r5, [r4, #20]
 802ea10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ea14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ea18:	3301      	adds	r3, #1
 802ea1a:	444b      	add	r3, r9
 802ea1c:	106d      	asrs	r5, r5, #1
 802ea1e:	429d      	cmp	r5, r3
 802ea20:	bf38      	it	cc
 802ea22:	461d      	movcc	r5, r3
 802ea24:	0553      	lsls	r3, r2, #21
 802ea26:	d531      	bpl.n	802ea8c <__ssputs_r+0xa0>
 802ea28:	4629      	mov	r1, r5
 802ea2a:	f7ff fbc1 	bl	802e1b0 <_malloc_r>
 802ea2e:	4606      	mov	r6, r0
 802ea30:	b950      	cbnz	r0, 802ea48 <__ssputs_r+0x5c>
 802ea32:	230c      	movs	r3, #12
 802ea34:	f8ca 3000 	str.w	r3, [sl]
 802ea38:	89a3      	ldrh	r3, [r4, #12]
 802ea3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ea3e:	81a3      	strh	r3, [r4, #12]
 802ea40:	f04f 30ff 	mov.w	r0, #4294967295
 802ea44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea48:	6921      	ldr	r1, [r4, #16]
 802ea4a:	464a      	mov	r2, r9
 802ea4c:	f000 fcb2 	bl	802f3b4 <memcpy>
 802ea50:	89a3      	ldrh	r3, [r4, #12]
 802ea52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ea56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ea5a:	81a3      	strh	r3, [r4, #12]
 802ea5c:	6126      	str	r6, [r4, #16]
 802ea5e:	6165      	str	r5, [r4, #20]
 802ea60:	444e      	add	r6, r9
 802ea62:	eba5 0509 	sub.w	r5, r5, r9
 802ea66:	6026      	str	r6, [r4, #0]
 802ea68:	60a5      	str	r5, [r4, #8]
 802ea6a:	463e      	mov	r6, r7
 802ea6c:	42be      	cmp	r6, r7
 802ea6e:	d900      	bls.n	802ea72 <__ssputs_r+0x86>
 802ea70:	463e      	mov	r6, r7
 802ea72:	6820      	ldr	r0, [r4, #0]
 802ea74:	4632      	mov	r2, r6
 802ea76:	4641      	mov	r1, r8
 802ea78:	f000 fcaa 	bl	802f3d0 <memmove>
 802ea7c:	68a3      	ldr	r3, [r4, #8]
 802ea7e:	1b9b      	subs	r3, r3, r6
 802ea80:	60a3      	str	r3, [r4, #8]
 802ea82:	6823      	ldr	r3, [r4, #0]
 802ea84:	4433      	add	r3, r6
 802ea86:	6023      	str	r3, [r4, #0]
 802ea88:	2000      	movs	r0, #0
 802ea8a:	e7db      	b.n	802ea44 <__ssputs_r+0x58>
 802ea8c:	462a      	mov	r2, r5
 802ea8e:	f000 fcb9 	bl	802f404 <_realloc_r>
 802ea92:	4606      	mov	r6, r0
 802ea94:	2800      	cmp	r0, #0
 802ea96:	d1e1      	bne.n	802ea5c <__ssputs_r+0x70>
 802ea98:	6921      	ldr	r1, [r4, #16]
 802ea9a:	4650      	mov	r0, sl
 802ea9c:	f7ff fb1c 	bl	802e0d8 <_free_r>
 802eaa0:	e7c7      	b.n	802ea32 <__ssputs_r+0x46>
	...

0802eaa4 <_svfiprintf_r>:
 802eaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eaa8:	4698      	mov	r8, r3
 802eaaa:	898b      	ldrh	r3, [r1, #12]
 802eaac:	061b      	lsls	r3, r3, #24
 802eaae:	b09d      	sub	sp, #116	; 0x74
 802eab0:	4607      	mov	r7, r0
 802eab2:	460d      	mov	r5, r1
 802eab4:	4614      	mov	r4, r2
 802eab6:	d50e      	bpl.n	802ead6 <_svfiprintf_r+0x32>
 802eab8:	690b      	ldr	r3, [r1, #16]
 802eaba:	b963      	cbnz	r3, 802ead6 <_svfiprintf_r+0x32>
 802eabc:	2140      	movs	r1, #64	; 0x40
 802eabe:	f7ff fb77 	bl	802e1b0 <_malloc_r>
 802eac2:	6028      	str	r0, [r5, #0]
 802eac4:	6128      	str	r0, [r5, #16]
 802eac6:	b920      	cbnz	r0, 802ead2 <_svfiprintf_r+0x2e>
 802eac8:	230c      	movs	r3, #12
 802eaca:	603b      	str	r3, [r7, #0]
 802eacc:	f04f 30ff 	mov.w	r0, #4294967295
 802ead0:	e0d1      	b.n	802ec76 <_svfiprintf_r+0x1d2>
 802ead2:	2340      	movs	r3, #64	; 0x40
 802ead4:	616b      	str	r3, [r5, #20]
 802ead6:	2300      	movs	r3, #0
 802ead8:	9309      	str	r3, [sp, #36]	; 0x24
 802eada:	2320      	movs	r3, #32
 802eadc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802eae0:	f8cd 800c 	str.w	r8, [sp, #12]
 802eae4:	2330      	movs	r3, #48	; 0x30
 802eae6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ec90 <_svfiprintf_r+0x1ec>
 802eaea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802eaee:	f04f 0901 	mov.w	r9, #1
 802eaf2:	4623      	mov	r3, r4
 802eaf4:	469a      	mov	sl, r3
 802eaf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 802eafa:	b10a      	cbz	r2, 802eb00 <_svfiprintf_r+0x5c>
 802eafc:	2a25      	cmp	r2, #37	; 0x25
 802eafe:	d1f9      	bne.n	802eaf4 <_svfiprintf_r+0x50>
 802eb00:	ebba 0b04 	subs.w	fp, sl, r4
 802eb04:	d00b      	beq.n	802eb1e <_svfiprintf_r+0x7a>
 802eb06:	465b      	mov	r3, fp
 802eb08:	4622      	mov	r2, r4
 802eb0a:	4629      	mov	r1, r5
 802eb0c:	4638      	mov	r0, r7
 802eb0e:	f7ff ff6d 	bl	802e9ec <__ssputs_r>
 802eb12:	3001      	adds	r0, #1
 802eb14:	f000 80aa 	beq.w	802ec6c <_svfiprintf_r+0x1c8>
 802eb18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802eb1a:	445a      	add	r2, fp
 802eb1c:	9209      	str	r2, [sp, #36]	; 0x24
 802eb1e:	f89a 3000 	ldrb.w	r3, [sl]
 802eb22:	2b00      	cmp	r3, #0
 802eb24:	f000 80a2 	beq.w	802ec6c <_svfiprintf_r+0x1c8>
 802eb28:	2300      	movs	r3, #0
 802eb2a:	f04f 32ff 	mov.w	r2, #4294967295
 802eb2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802eb32:	f10a 0a01 	add.w	sl, sl, #1
 802eb36:	9304      	str	r3, [sp, #16]
 802eb38:	9307      	str	r3, [sp, #28]
 802eb3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802eb3e:	931a      	str	r3, [sp, #104]	; 0x68
 802eb40:	4654      	mov	r4, sl
 802eb42:	2205      	movs	r2, #5
 802eb44:	f814 1b01 	ldrb.w	r1, [r4], #1
 802eb48:	4851      	ldr	r0, [pc, #324]	; (802ec90 <_svfiprintf_r+0x1ec>)
 802eb4a:	f7f1 fb51 	bl	80201f0 <memchr>
 802eb4e:	9a04      	ldr	r2, [sp, #16]
 802eb50:	b9d8      	cbnz	r0, 802eb8a <_svfiprintf_r+0xe6>
 802eb52:	06d0      	lsls	r0, r2, #27
 802eb54:	bf44      	itt	mi
 802eb56:	2320      	movmi	r3, #32
 802eb58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb5c:	0711      	lsls	r1, r2, #28
 802eb5e:	bf44      	itt	mi
 802eb60:	232b      	movmi	r3, #43	; 0x2b
 802eb62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb66:	f89a 3000 	ldrb.w	r3, [sl]
 802eb6a:	2b2a      	cmp	r3, #42	; 0x2a
 802eb6c:	d015      	beq.n	802eb9a <_svfiprintf_r+0xf6>
 802eb6e:	9a07      	ldr	r2, [sp, #28]
 802eb70:	4654      	mov	r4, sl
 802eb72:	2000      	movs	r0, #0
 802eb74:	f04f 0c0a 	mov.w	ip, #10
 802eb78:	4621      	mov	r1, r4
 802eb7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802eb7e:	3b30      	subs	r3, #48	; 0x30
 802eb80:	2b09      	cmp	r3, #9
 802eb82:	d94e      	bls.n	802ec22 <_svfiprintf_r+0x17e>
 802eb84:	b1b0      	cbz	r0, 802ebb4 <_svfiprintf_r+0x110>
 802eb86:	9207      	str	r2, [sp, #28]
 802eb88:	e014      	b.n	802ebb4 <_svfiprintf_r+0x110>
 802eb8a:	eba0 0308 	sub.w	r3, r0, r8
 802eb8e:	fa09 f303 	lsl.w	r3, r9, r3
 802eb92:	4313      	orrs	r3, r2
 802eb94:	9304      	str	r3, [sp, #16]
 802eb96:	46a2      	mov	sl, r4
 802eb98:	e7d2      	b.n	802eb40 <_svfiprintf_r+0x9c>
 802eb9a:	9b03      	ldr	r3, [sp, #12]
 802eb9c:	1d19      	adds	r1, r3, #4
 802eb9e:	681b      	ldr	r3, [r3, #0]
 802eba0:	9103      	str	r1, [sp, #12]
 802eba2:	2b00      	cmp	r3, #0
 802eba4:	bfbb      	ittet	lt
 802eba6:	425b      	neglt	r3, r3
 802eba8:	f042 0202 	orrlt.w	r2, r2, #2
 802ebac:	9307      	strge	r3, [sp, #28]
 802ebae:	9307      	strlt	r3, [sp, #28]
 802ebb0:	bfb8      	it	lt
 802ebb2:	9204      	strlt	r2, [sp, #16]
 802ebb4:	7823      	ldrb	r3, [r4, #0]
 802ebb6:	2b2e      	cmp	r3, #46	; 0x2e
 802ebb8:	d10c      	bne.n	802ebd4 <_svfiprintf_r+0x130>
 802ebba:	7863      	ldrb	r3, [r4, #1]
 802ebbc:	2b2a      	cmp	r3, #42	; 0x2a
 802ebbe:	d135      	bne.n	802ec2c <_svfiprintf_r+0x188>
 802ebc0:	9b03      	ldr	r3, [sp, #12]
 802ebc2:	1d1a      	adds	r2, r3, #4
 802ebc4:	681b      	ldr	r3, [r3, #0]
 802ebc6:	9203      	str	r2, [sp, #12]
 802ebc8:	2b00      	cmp	r3, #0
 802ebca:	bfb8      	it	lt
 802ebcc:	f04f 33ff 	movlt.w	r3, #4294967295
 802ebd0:	3402      	adds	r4, #2
 802ebd2:	9305      	str	r3, [sp, #20]
 802ebd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802eca0 <_svfiprintf_r+0x1fc>
 802ebd8:	7821      	ldrb	r1, [r4, #0]
 802ebda:	2203      	movs	r2, #3
 802ebdc:	4650      	mov	r0, sl
 802ebde:	f7f1 fb07 	bl	80201f0 <memchr>
 802ebe2:	b140      	cbz	r0, 802ebf6 <_svfiprintf_r+0x152>
 802ebe4:	2340      	movs	r3, #64	; 0x40
 802ebe6:	eba0 000a 	sub.w	r0, r0, sl
 802ebea:	fa03 f000 	lsl.w	r0, r3, r0
 802ebee:	9b04      	ldr	r3, [sp, #16]
 802ebf0:	4303      	orrs	r3, r0
 802ebf2:	3401      	adds	r4, #1
 802ebf4:	9304      	str	r3, [sp, #16]
 802ebf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ebfa:	4826      	ldr	r0, [pc, #152]	; (802ec94 <_svfiprintf_r+0x1f0>)
 802ebfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ec00:	2206      	movs	r2, #6
 802ec02:	f7f1 faf5 	bl	80201f0 <memchr>
 802ec06:	2800      	cmp	r0, #0
 802ec08:	d038      	beq.n	802ec7c <_svfiprintf_r+0x1d8>
 802ec0a:	4b23      	ldr	r3, [pc, #140]	; (802ec98 <_svfiprintf_r+0x1f4>)
 802ec0c:	bb1b      	cbnz	r3, 802ec56 <_svfiprintf_r+0x1b2>
 802ec0e:	9b03      	ldr	r3, [sp, #12]
 802ec10:	3307      	adds	r3, #7
 802ec12:	f023 0307 	bic.w	r3, r3, #7
 802ec16:	3308      	adds	r3, #8
 802ec18:	9303      	str	r3, [sp, #12]
 802ec1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ec1c:	4433      	add	r3, r6
 802ec1e:	9309      	str	r3, [sp, #36]	; 0x24
 802ec20:	e767      	b.n	802eaf2 <_svfiprintf_r+0x4e>
 802ec22:	fb0c 3202 	mla	r2, ip, r2, r3
 802ec26:	460c      	mov	r4, r1
 802ec28:	2001      	movs	r0, #1
 802ec2a:	e7a5      	b.n	802eb78 <_svfiprintf_r+0xd4>
 802ec2c:	2300      	movs	r3, #0
 802ec2e:	3401      	adds	r4, #1
 802ec30:	9305      	str	r3, [sp, #20]
 802ec32:	4619      	mov	r1, r3
 802ec34:	f04f 0c0a 	mov.w	ip, #10
 802ec38:	4620      	mov	r0, r4
 802ec3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ec3e:	3a30      	subs	r2, #48	; 0x30
 802ec40:	2a09      	cmp	r2, #9
 802ec42:	d903      	bls.n	802ec4c <_svfiprintf_r+0x1a8>
 802ec44:	2b00      	cmp	r3, #0
 802ec46:	d0c5      	beq.n	802ebd4 <_svfiprintf_r+0x130>
 802ec48:	9105      	str	r1, [sp, #20]
 802ec4a:	e7c3      	b.n	802ebd4 <_svfiprintf_r+0x130>
 802ec4c:	fb0c 2101 	mla	r1, ip, r1, r2
 802ec50:	4604      	mov	r4, r0
 802ec52:	2301      	movs	r3, #1
 802ec54:	e7f0      	b.n	802ec38 <_svfiprintf_r+0x194>
 802ec56:	ab03      	add	r3, sp, #12
 802ec58:	9300      	str	r3, [sp, #0]
 802ec5a:	462a      	mov	r2, r5
 802ec5c:	4b0f      	ldr	r3, [pc, #60]	; (802ec9c <_svfiprintf_r+0x1f8>)
 802ec5e:	a904      	add	r1, sp, #16
 802ec60:	4638      	mov	r0, r7
 802ec62:	f3af 8000 	nop.w
 802ec66:	1c42      	adds	r2, r0, #1
 802ec68:	4606      	mov	r6, r0
 802ec6a:	d1d6      	bne.n	802ec1a <_svfiprintf_r+0x176>
 802ec6c:	89ab      	ldrh	r3, [r5, #12]
 802ec6e:	065b      	lsls	r3, r3, #25
 802ec70:	f53f af2c 	bmi.w	802eacc <_svfiprintf_r+0x28>
 802ec74:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ec76:	b01d      	add	sp, #116	; 0x74
 802ec78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ec7c:	ab03      	add	r3, sp, #12
 802ec7e:	9300      	str	r3, [sp, #0]
 802ec80:	462a      	mov	r2, r5
 802ec82:	4b06      	ldr	r3, [pc, #24]	; (802ec9c <_svfiprintf_r+0x1f8>)
 802ec84:	a904      	add	r1, sp, #16
 802ec86:	4638      	mov	r0, r7
 802ec88:	f000 f9d4 	bl	802f034 <_printf_i>
 802ec8c:	e7eb      	b.n	802ec66 <_svfiprintf_r+0x1c2>
 802ec8e:	bf00      	nop
 802ec90:	08031a90 	.word	0x08031a90
 802ec94:	08031a9a 	.word	0x08031a9a
 802ec98:	00000000 	.word	0x00000000
 802ec9c:	0802e9ed 	.word	0x0802e9ed
 802eca0:	08031a96 	.word	0x08031a96

0802eca4 <__sfputc_r>:
 802eca4:	6893      	ldr	r3, [r2, #8]
 802eca6:	3b01      	subs	r3, #1
 802eca8:	2b00      	cmp	r3, #0
 802ecaa:	b410      	push	{r4}
 802ecac:	6093      	str	r3, [r2, #8]
 802ecae:	da08      	bge.n	802ecc2 <__sfputc_r+0x1e>
 802ecb0:	6994      	ldr	r4, [r2, #24]
 802ecb2:	42a3      	cmp	r3, r4
 802ecb4:	db01      	blt.n	802ecba <__sfputc_r+0x16>
 802ecb6:	290a      	cmp	r1, #10
 802ecb8:	d103      	bne.n	802ecc2 <__sfputc_r+0x1e>
 802ecba:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ecbe:	f7ff bba9 	b.w	802e414 <__swbuf_r>
 802ecc2:	6813      	ldr	r3, [r2, #0]
 802ecc4:	1c58      	adds	r0, r3, #1
 802ecc6:	6010      	str	r0, [r2, #0]
 802ecc8:	7019      	strb	r1, [r3, #0]
 802ecca:	4608      	mov	r0, r1
 802eccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ecd0:	4770      	bx	lr

0802ecd2 <__sfputs_r>:
 802ecd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ecd4:	4606      	mov	r6, r0
 802ecd6:	460f      	mov	r7, r1
 802ecd8:	4614      	mov	r4, r2
 802ecda:	18d5      	adds	r5, r2, r3
 802ecdc:	42ac      	cmp	r4, r5
 802ecde:	d101      	bne.n	802ece4 <__sfputs_r+0x12>
 802ece0:	2000      	movs	r0, #0
 802ece2:	e007      	b.n	802ecf4 <__sfputs_r+0x22>
 802ece4:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ece8:	463a      	mov	r2, r7
 802ecea:	4630      	mov	r0, r6
 802ecec:	f7ff ffda 	bl	802eca4 <__sfputc_r>
 802ecf0:	1c43      	adds	r3, r0, #1
 802ecf2:	d1f3      	bne.n	802ecdc <__sfputs_r+0xa>
 802ecf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ecf8 <_vfiprintf_r>:
 802ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ecfc:	460d      	mov	r5, r1
 802ecfe:	b09d      	sub	sp, #116	; 0x74
 802ed00:	4614      	mov	r4, r2
 802ed02:	4698      	mov	r8, r3
 802ed04:	4606      	mov	r6, r0
 802ed06:	b118      	cbz	r0, 802ed10 <_vfiprintf_r+0x18>
 802ed08:	6983      	ldr	r3, [r0, #24]
 802ed0a:	b90b      	cbnz	r3, 802ed10 <_vfiprintf_r+0x18>
 802ed0c:	f7ff fd5c 	bl	802e7c8 <__sinit>
 802ed10:	4b89      	ldr	r3, [pc, #548]	; (802ef38 <_vfiprintf_r+0x240>)
 802ed12:	429d      	cmp	r5, r3
 802ed14:	d11b      	bne.n	802ed4e <_vfiprintf_r+0x56>
 802ed16:	6875      	ldr	r5, [r6, #4]
 802ed18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed1a:	07d9      	lsls	r1, r3, #31
 802ed1c:	d405      	bmi.n	802ed2a <_vfiprintf_r+0x32>
 802ed1e:	89ab      	ldrh	r3, [r5, #12]
 802ed20:	059a      	lsls	r2, r3, #22
 802ed22:	d402      	bmi.n	802ed2a <_vfiprintf_r+0x32>
 802ed24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed26:	f7ff fded 	bl	802e904 <__retarget_lock_acquire_recursive>
 802ed2a:	89ab      	ldrh	r3, [r5, #12]
 802ed2c:	071b      	lsls	r3, r3, #28
 802ed2e:	d501      	bpl.n	802ed34 <_vfiprintf_r+0x3c>
 802ed30:	692b      	ldr	r3, [r5, #16]
 802ed32:	b9eb      	cbnz	r3, 802ed70 <_vfiprintf_r+0x78>
 802ed34:	4629      	mov	r1, r5
 802ed36:	4630      	mov	r0, r6
 802ed38:	f7ff fbbe 	bl	802e4b8 <__swsetup_r>
 802ed3c:	b1c0      	cbz	r0, 802ed70 <_vfiprintf_r+0x78>
 802ed3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed40:	07dc      	lsls	r4, r3, #31
 802ed42:	d50e      	bpl.n	802ed62 <_vfiprintf_r+0x6a>
 802ed44:	f04f 30ff 	mov.w	r0, #4294967295
 802ed48:	b01d      	add	sp, #116	; 0x74
 802ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ed4e:	4b7b      	ldr	r3, [pc, #492]	; (802ef3c <_vfiprintf_r+0x244>)
 802ed50:	429d      	cmp	r5, r3
 802ed52:	d101      	bne.n	802ed58 <_vfiprintf_r+0x60>
 802ed54:	68b5      	ldr	r5, [r6, #8]
 802ed56:	e7df      	b.n	802ed18 <_vfiprintf_r+0x20>
 802ed58:	4b79      	ldr	r3, [pc, #484]	; (802ef40 <_vfiprintf_r+0x248>)
 802ed5a:	429d      	cmp	r5, r3
 802ed5c:	bf08      	it	eq
 802ed5e:	68f5      	ldreq	r5, [r6, #12]
 802ed60:	e7da      	b.n	802ed18 <_vfiprintf_r+0x20>
 802ed62:	89ab      	ldrh	r3, [r5, #12]
 802ed64:	0598      	lsls	r0, r3, #22
 802ed66:	d4ed      	bmi.n	802ed44 <_vfiprintf_r+0x4c>
 802ed68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed6a:	f7ff fdcc 	bl	802e906 <__retarget_lock_release_recursive>
 802ed6e:	e7e9      	b.n	802ed44 <_vfiprintf_r+0x4c>
 802ed70:	2300      	movs	r3, #0
 802ed72:	9309      	str	r3, [sp, #36]	; 0x24
 802ed74:	2320      	movs	r3, #32
 802ed76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ed7a:	f8cd 800c 	str.w	r8, [sp, #12]
 802ed7e:	2330      	movs	r3, #48	; 0x30
 802ed80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802ef44 <_vfiprintf_r+0x24c>
 802ed84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ed88:	f04f 0901 	mov.w	r9, #1
 802ed8c:	4623      	mov	r3, r4
 802ed8e:	469a      	mov	sl, r3
 802ed90:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ed94:	b10a      	cbz	r2, 802ed9a <_vfiprintf_r+0xa2>
 802ed96:	2a25      	cmp	r2, #37	; 0x25
 802ed98:	d1f9      	bne.n	802ed8e <_vfiprintf_r+0x96>
 802ed9a:	ebba 0b04 	subs.w	fp, sl, r4
 802ed9e:	d00b      	beq.n	802edb8 <_vfiprintf_r+0xc0>
 802eda0:	465b      	mov	r3, fp
 802eda2:	4622      	mov	r2, r4
 802eda4:	4629      	mov	r1, r5
 802eda6:	4630      	mov	r0, r6
 802eda8:	f7ff ff93 	bl	802ecd2 <__sfputs_r>
 802edac:	3001      	adds	r0, #1
 802edae:	f000 80aa 	beq.w	802ef06 <_vfiprintf_r+0x20e>
 802edb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802edb4:	445a      	add	r2, fp
 802edb6:	9209      	str	r2, [sp, #36]	; 0x24
 802edb8:	f89a 3000 	ldrb.w	r3, [sl]
 802edbc:	2b00      	cmp	r3, #0
 802edbe:	f000 80a2 	beq.w	802ef06 <_vfiprintf_r+0x20e>
 802edc2:	2300      	movs	r3, #0
 802edc4:	f04f 32ff 	mov.w	r2, #4294967295
 802edc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802edcc:	f10a 0a01 	add.w	sl, sl, #1
 802edd0:	9304      	str	r3, [sp, #16]
 802edd2:	9307      	str	r3, [sp, #28]
 802edd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802edd8:	931a      	str	r3, [sp, #104]	; 0x68
 802edda:	4654      	mov	r4, sl
 802eddc:	2205      	movs	r2, #5
 802edde:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ede2:	4858      	ldr	r0, [pc, #352]	; (802ef44 <_vfiprintf_r+0x24c>)
 802ede4:	f7f1 fa04 	bl	80201f0 <memchr>
 802ede8:	9a04      	ldr	r2, [sp, #16]
 802edea:	b9d8      	cbnz	r0, 802ee24 <_vfiprintf_r+0x12c>
 802edec:	06d1      	lsls	r1, r2, #27
 802edee:	bf44      	itt	mi
 802edf0:	2320      	movmi	r3, #32
 802edf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802edf6:	0713      	lsls	r3, r2, #28
 802edf8:	bf44      	itt	mi
 802edfa:	232b      	movmi	r3, #43	; 0x2b
 802edfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ee00:	f89a 3000 	ldrb.w	r3, [sl]
 802ee04:	2b2a      	cmp	r3, #42	; 0x2a
 802ee06:	d015      	beq.n	802ee34 <_vfiprintf_r+0x13c>
 802ee08:	9a07      	ldr	r2, [sp, #28]
 802ee0a:	4654      	mov	r4, sl
 802ee0c:	2000      	movs	r0, #0
 802ee0e:	f04f 0c0a 	mov.w	ip, #10
 802ee12:	4621      	mov	r1, r4
 802ee14:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ee18:	3b30      	subs	r3, #48	; 0x30
 802ee1a:	2b09      	cmp	r3, #9
 802ee1c:	d94e      	bls.n	802eebc <_vfiprintf_r+0x1c4>
 802ee1e:	b1b0      	cbz	r0, 802ee4e <_vfiprintf_r+0x156>
 802ee20:	9207      	str	r2, [sp, #28]
 802ee22:	e014      	b.n	802ee4e <_vfiprintf_r+0x156>
 802ee24:	eba0 0308 	sub.w	r3, r0, r8
 802ee28:	fa09 f303 	lsl.w	r3, r9, r3
 802ee2c:	4313      	orrs	r3, r2
 802ee2e:	9304      	str	r3, [sp, #16]
 802ee30:	46a2      	mov	sl, r4
 802ee32:	e7d2      	b.n	802edda <_vfiprintf_r+0xe2>
 802ee34:	9b03      	ldr	r3, [sp, #12]
 802ee36:	1d19      	adds	r1, r3, #4
 802ee38:	681b      	ldr	r3, [r3, #0]
 802ee3a:	9103      	str	r1, [sp, #12]
 802ee3c:	2b00      	cmp	r3, #0
 802ee3e:	bfbb      	ittet	lt
 802ee40:	425b      	neglt	r3, r3
 802ee42:	f042 0202 	orrlt.w	r2, r2, #2
 802ee46:	9307      	strge	r3, [sp, #28]
 802ee48:	9307      	strlt	r3, [sp, #28]
 802ee4a:	bfb8      	it	lt
 802ee4c:	9204      	strlt	r2, [sp, #16]
 802ee4e:	7823      	ldrb	r3, [r4, #0]
 802ee50:	2b2e      	cmp	r3, #46	; 0x2e
 802ee52:	d10c      	bne.n	802ee6e <_vfiprintf_r+0x176>
 802ee54:	7863      	ldrb	r3, [r4, #1]
 802ee56:	2b2a      	cmp	r3, #42	; 0x2a
 802ee58:	d135      	bne.n	802eec6 <_vfiprintf_r+0x1ce>
 802ee5a:	9b03      	ldr	r3, [sp, #12]
 802ee5c:	1d1a      	adds	r2, r3, #4
 802ee5e:	681b      	ldr	r3, [r3, #0]
 802ee60:	9203      	str	r2, [sp, #12]
 802ee62:	2b00      	cmp	r3, #0
 802ee64:	bfb8      	it	lt
 802ee66:	f04f 33ff 	movlt.w	r3, #4294967295
 802ee6a:	3402      	adds	r4, #2
 802ee6c:	9305      	str	r3, [sp, #20]
 802ee6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802ef54 <_vfiprintf_r+0x25c>
 802ee72:	7821      	ldrb	r1, [r4, #0]
 802ee74:	2203      	movs	r2, #3
 802ee76:	4650      	mov	r0, sl
 802ee78:	f7f1 f9ba 	bl	80201f0 <memchr>
 802ee7c:	b140      	cbz	r0, 802ee90 <_vfiprintf_r+0x198>
 802ee7e:	2340      	movs	r3, #64	; 0x40
 802ee80:	eba0 000a 	sub.w	r0, r0, sl
 802ee84:	fa03 f000 	lsl.w	r0, r3, r0
 802ee88:	9b04      	ldr	r3, [sp, #16]
 802ee8a:	4303      	orrs	r3, r0
 802ee8c:	3401      	adds	r4, #1
 802ee8e:	9304      	str	r3, [sp, #16]
 802ee90:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ee94:	482c      	ldr	r0, [pc, #176]	; (802ef48 <_vfiprintf_r+0x250>)
 802ee96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ee9a:	2206      	movs	r2, #6
 802ee9c:	f7f1 f9a8 	bl	80201f0 <memchr>
 802eea0:	2800      	cmp	r0, #0
 802eea2:	d03f      	beq.n	802ef24 <_vfiprintf_r+0x22c>
 802eea4:	4b29      	ldr	r3, [pc, #164]	; (802ef4c <_vfiprintf_r+0x254>)
 802eea6:	bb1b      	cbnz	r3, 802eef0 <_vfiprintf_r+0x1f8>
 802eea8:	9b03      	ldr	r3, [sp, #12]
 802eeaa:	3307      	adds	r3, #7
 802eeac:	f023 0307 	bic.w	r3, r3, #7
 802eeb0:	3308      	adds	r3, #8
 802eeb2:	9303      	str	r3, [sp, #12]
 802eeb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eeb6:	443b      	add	r3, r7
 802eeb8:	9309      	str	r3, [sp, #36]	; 0x24
 802eeba:	e767      	b.n	802ed8c <_vfiprintf_r+0x94>
 802eebc:	fb0c 3202 	mla	r2, ip, r2, r3
 802eec0:	460c      	mov	r4, r1
 802eec2:	2001      	movs	r0, #1
 802eec4:	e7a5      	b.n	802ee12 <_vfiprintf_r+0x11a>
 802eec6:	2300      	movs	r3, #0
 802eec8:	3401      	adds	r4, #1
 802eeca:	9305      	str	r3, [sp, #20]
 802eecc:	4619      	mov	r1, r3
 802eece:	f04f 0c0a 	mov.w	ip, #10
 802eed2:	4620      	mov	r0, r4
 802eed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 802eed8:	3a30      	subs	r2, #48	; 0x30
 802eeda:	2a09      	cmp	r2, #9
 802eedc:	d903      	bls.n	802eee6 <_vfiprintf_r+0x1ee>
 802eede:	2b00      	cmp	r3, #0
 802eee0:	d0c5      	beq.n	802ee6e <_vfiprintf_r+0x176>
 802eee2:	9105      	str	r1, [sp, #20]
 802eee4:	e7c3      	b.n	802ee6e <_vfiprintf_r+0x176>
 802eee6:	fb0c 2101 	mla	r1, ip, r1, r2
 802eeea:	4604      	mov	r4, r0
 802eeec:	2301      	movs	r3, #1
 802eeee:	e7f0      	b.n	802eed2 <_vfiprintf_r+0x1da>
 802eef0:	ab03      	add	r3, sp, #12
 802eef2:	9300      	str	r3, [sp, #0]
 802eef4:	462a      	mov	r2, r5
 802eef6:	4b16      	ldr	r3, [pc, #88]	; (802ef50 <_vfiprintf_r+0x258>)
 802eef8:	a904      	add	r1, sp, #16
 802eefa:	4630      	mov	r0, r6
 802eefc:	f3af 8000 	nop.w
 802ef00:	4607      	mov	r7, r0
 802ef02:	1c78      	adds	r0, r7, #1
 802ef04:	d1d6      	bne.n	802eeb4 <_vfiprintf_r+0x1bc>
 802ef06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ef08:	07d9      	lsls	r1, r3, #31
 802ef0a:	d405      	bmi.n	802ef18 <_vfiprintf_r+0x220>
 802ef0c:	89ab      	ldrh	r3, [r5, #12]
 802ef0e:	059a      	lsls	r2, r3, #22
 802ef10:	d402      	bmi.n	802ef18 <_vfiprintf_r+0x220>
 802ef12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ef14:	f7ff fcf7 	bl	802e906 <__retarget_lock_release_recursive>
 802ef18:	89ab      	ldrh	r3, [r5, #12]
 802ef1a:	065b      	lsls	r3, r3, #25
 802ef1c:	f53f af12 	bmi.w	802ed44 <_vfiprintf_r+0x4c>
 802ef20:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ef22:	e711      	b.n	802ed48 <_vfiprintf_r+0x50>
 802ef24:	ab03      	add	r3, sp, #12
 802ef26:	9300      	str	r3, [sp, #0]
 802ef28:	462a      	mov	r2, r5
 802ef2a:	4b09      	ldr	r3, [pc, #36]	; (802ef50 <_vfiprintf_r+0x258>)
 802ef2c:	a904      	add	r1, sp, #16
 802ef2e:	4630      	mov	r0, r6
 802ef30:	f000 f880 	bl	802f034 <_printf_i>
 802ef34:	e7e4      	b.n	802ef00 <_vfiprintf_r+0x208>
 802ef36:	bf00      	nop
 802ef38:	08031a50 	.word	0x08031a50
 802ef3c:	08031a70 	.word	0x08031a70
 802ef40:	08031a30 	.word	0x08031a30
 802ef44:	08031a90 	.word	0x08031a90
 802ef48:	08031a9a 	.word	0x08031a9a
 802ef4c:	00000000 	.word	0x00000000
 802ef50:	0802ecd3 	.word	0x0802ecd3
 802ef54:	08031a96 	.word	0x08031a96

0802ef58 <_printf_common>:
 802ef58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ef5c:	4616      	mov	r6, r2
 802ef5e:	4699      	mov	r9, r3
 802ef60:	688a      	ldr	r2, [r1, #8]
 802ef62:	690b      	ldr	r3, [r1, #16]
 802ef64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ef68:	4293      	cmp	r3, r2
 802ef6a:	bfb8      	it	lt
 802ef6c:	4613      	movlt	r3, r2
 802ef6e:	6033      	str	r3, [r6, #0]
 802ef70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ef74:	4607      	mov	r7, r0
 802ef76:	460c      	mov	r4, r1
 802ef78:	b10a      	cbz	r2, 802ef7e <_printf_common+0x26>
 802ef7a:	3301      	adds	r3, #1
 802ef7c:	6033      	str	r3, [r6, #0]
 802ef7e:	6823      	ldr	r3, [r4, #0]
 802ef80:	0699      	lsls	r1, r3, #26
 802ef82:	bf42      	ittt	mi
 802ef84:	6833      	ldrmi	r3, [r6, #0]
 802ef86:	3302      	addmi	r3, #2
 802ef88:	6033      	strmi	r3, [r6, #0]
 802ef8a:	6825      	ldr	r5, [r4, #0]
 802ef8c:	f015 0506 	ands.w	r5, r5, #6
 802ef90:	d106      	bne.n	802efa0 <_printf_common+0x48>
 802ef92:	f104 0a19 	add.w	sl, r4, #25
 802ef96:	68e3      	ldr	r3, [r4, #12]
 802ef98:	6832      	ldr	r2, [r6, #0]
 802ef9a:	1a9b      	subs	r3, r3, r2
 802ef9c:	42ab      	cmp	r3, r5
 802ef9e:	dc26      	bgt.n	802efee <_printf_common+0x96>
 802efa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802efa4:	1e13      	subs	r3, r2, #0
 802efa6:	6822      	ldr	r2, [r4, #0]
 802efa8:	bf18      	it	ne
 802efaa:	2301      	movne	r3, #1
 802efac:	0692      	lsls	r2, r2, #26
 802efae:	d42b      	bmi.n	802f008 <_printf_common+0xb0>
 802efb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802efb4:	4649      	mov	r1, r9
 802efb6:	4638      	mov	r0, r7
 802efb8:	47c0      	blx	r8
 802efba:	3001      	adds	r0, #1
 802efbc:	d01e      	beq.n	802effc <_printf_common+0xa4>
 802efbe:	6823      	ldr	r3, [r4, #0]
 802efc0:	68e5      	ldr	r5, [r4, #12]
 802efc2:	6832      	ldr	r2, [r6, #0]
 802efc4:	f003 0306 	and.w	r3, r3, #6
 802efc8:	2b04      	cmp	r3, #4
 802efca:	bf08      	it	eq
 802efcc:	1aad      	subeq	r5, r5, r2
 802efce:	68a3      	ldr	r3, [r4, #8]
 802efd0:	6922      	ldr	r2, [r4, #16]
 802efd2:	bf0c      	ite	eq
 802efd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802efd8:	2500      	movne	r5, #0
 802efda:	4293      	cmp	r3, r2
 802efdc:	bfc4      	itt	gt
 802efde:	1a9b      	subgt	r3, r3, r2
 802efe0:	18ed      	addgt	r5, r5, r3
 802efe2:	2600      	movs	r6, #0
 802efe4:	341a      	adds	r4, #26
 802efe6:	42b5      	cmp	r5, r6
 802efe8:	d11a      	bne.n	802f020 <_printf_common+0xc8>
 802efea:	2000      	movs	r0, #0
 802efec:	e008      	b.n	802f000 <_printf_common+0xa8>
 802efee:	2301      	movs	r3, #1
 802eff0:	4652      	mov	r2, sl
 802eff2:	4649      	mov	r1, r9
 802eff4:	4638      	mov	r0, r7
 802eff6:	47c0      	blx	r8
 802eff8:	3001      	adds	r0, #1
 802effa:	d103      	bne.n	802f004 <_printf_common+0xac>
 802effc:	f04f 30ff 	mov.w	r0, #4294967295
 802f000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f004:	3501      	adds	r5, #1
 802f006:	e7c6      	b.n	802ef96 <_printf_common+0x3e>
 802f008:	18e1      	adds	r1, r4, r3
 802f00a:	1c5a      	adds	r2, r3, #1
 802f00c:	2030      	movs	r0, #48	; 0x30
 802f00e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802f012:	4422      	add	r2, r4
 802f014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802f018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802f01c:	3302      	adds	r3, #2
 802f01e:	e7c7      	b.n	802efb0 <_printf_common+0x58>
 802f020:	2301      	movs	r3, #1
 802f022:	4622      	mov	r2, r4
 802f024:	4649      	mov	r1, r9
 802f026:	4638      	mov	r0, r7
 802f028:	47c0      	blx	r8
 802f02a:	3001      	adds	r0, #1
 802f02c:	d0e6      	beq.n	802effc <_printf_common+0xa4>
 802f02e:	3601      	adds	r6, #1
 802f030:	e7d9      	b.n	802efe6 <_printf_common+0x8e>
	...

0802f034 <_printf_i>:
 802f034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802f038:	7e0f      	ldrb	r7, [r1, #24]
 802f03a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802f03c:	2f78      	cmp	r7, #120	; 0x78
 802f03e:	4691      	mov	r9, r2
 802f040:	4680      	mov	r8, r0
 802f042:	460c      	mov	r4, r1
 802f044:	469a      	mov	sl, r3
 802f046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802f04a:	d807      	bhi.n	802f05c <_printf_i+0x28>
 802f04c:	2f62      	cmp	r7, #98	; 0x62
 802f04e:	d80a      	bhi.n	802f066 <_printf_i+0x32>
 802f050:	2f00      	cmp	r7, #0
 802f052:	f000 80d8 	beq.w	802f206 <_printf_i+0x1d2>
 802f056:	2f58      	cmp	r7, #88	; 0x58
 802f058:	f000 80a3 	beq.w	802f1a2 <_printf_i+0x16e>
 802f05c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802f064:	e03a      	b.n	802f0dc <_printf_i+0xa8>
 802f066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802f06a:	2b15      	cmp	r3, #21
 802f06c:	d8f6      	bhi.n	802f05c <_printf_i+0x28>
 802f06e:	a101      	add	r1, pc, #4	; (adr r1, 802f074 <_printf_i+0x40>)
 802f070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802f074:	0802f0cd 	.word	0x0802f0cd
 802f078:	0802f0e1 	.word	0x0802f0e1
 802f07c:	0802f05d 	.word	0x0802f05d
 802f080:	0802f05d 	.word	0x0802f05d
 802f084:	0802f05d 	.word	0x0802f05d
 802f088:	0802f05d 	.word	0x0802f05d
 802f08c:	0802f0e1 	.word	0x0802f0e1
 802f090:	0802f05d 	.word	0x0802f05d
 802f094:	0802f05d 	.word	0x0802f05d
 802f098:	0802f05d 	.word	0x0802f05d
 802f09c:	0802f05d 	.word	0x0802f05d
 802f0a0:	0802f1ed 	.word	0x0802f1ed
 802f0a4:	0802f111 	.word	0x0802f111
 802f0a8:	0802f1cf 	.word	0x0802f1cf
 802f0ac:	0802f05d 	.word	0x0802f05d
 802f0b0:	0802f05d 	.word	0x0802f05d
 802f0b4:	0802f20f 	.word	0x0802f20f
 802f0b8:	0802f05d 	.word	0x0802f05d
 802f0bc:	0802f111 	.word	0x0802f111
 802f0c0:	0802f05d 	.word	0x0802f05d
 802f0c4:	0802f05d 	.word	0x0802f05d
 802f0c8:	0802f1d7 	.word	0x0802f1d7
 802f0cc:	682b      	ldr	r3, [r5, #0]
 802f0ce:	1d1a      	adds	r2, r3, #4
 802f0d0:	681b      	ldr	r3, [r3, #0]
 802f0d2:	602a      	str	r2, [r5, #0]
 802f0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f0d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802f0dc:	2301      	movs	r3, #1
 802f0de:	e0a3      	b.n	802f228 <_printf_i+0x1f4>
 802f0e0:	6820      	ldr	r0, [r4, #0]
 802f0e2:	6829      	ldr	r1, [r5, #0]
 802f0e4:	0606      	lsls	r6, r0, #24
 802f0e6:	f101 0304 	add.w	r3, r1, #4
 802f0ea:	d50a      	bpl.n	802f102 <_printf_i+0xce>
 802f0ec:	680e      	ldr	r6, [r1, #0]
 802f0ee:	602b      	str	r3, [r5, #0]
 802f0f0:	2e00      	cmp	r6, #0
 802f0f2:	da03      	bge.n	802f0fc <_printf_i+0xc8>
 802f0f4:	232d      	movs	r3, #45	; 0x2d
 802f0f6:	4276      	negs	r6, r6
 802f0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f0fc:	485e      	ldr	r0, [pc, #376]	; (802f278 <_printf_i+0x244>)
 802f0fe:	230a      	movs	r3, #10
 802f100:	e019      	b.n	802f136 <_printf_i+0x102>
 802f102:	680e      	ldr	r6, [r1, #0]
 802f104:	602b      	str	r3, [r5, #0]
 802f106:	f010 0f40 	tst.w	r0, #64	; 0x40
 802f10a:	bf18      	it	ne
 802f10c:	b236      	sxthne	r6, r6
 802f10e:	e7ef      	b.n	802f0f0 <_printf_i+0xbc>
 802f110:	682b      	ldr	r3, [r5, #0]
 802f112:	6820      	ldr	r0, [r4, #0]
 802f114:	1d19      	adds	r1, r3, #4
 802f116:	6029      	str	r1, [r5, #0]
 802f118:	0601      	lsls	r1, r0, #24
 802f11a:	d501      	bpl.n	802f120 <_printf_i+0xec>
 802f11c:	681e      	ldr	r6, [r3, #0]
 802f11e:	e002      	b.n	802f126 <_printf_i+0xf2>
 802f120:	0646      	lsls	r6, r0, #25
 802f122:	d5fb      	bpl.n	802f11c <_printf_i+0xe8>
 802f124:	881e      	ldrh	r6, [r3, #0]
 802f126:	4854      	ldr	r0, [pc, #336]	; (802f278 <_printf_i+0x244>)
 802f128:	2f6f      	cmp	r7, #111	; 0x6f
 802f12a:	bf0c      	ite	eq
 802f12c:	2308      	moveq	r3, #8
 802f12e:	230a      	movne	r3, #10
 802f130:	2100      	movs	r1, #0
 802f132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802f136:	6865      	ldr	r5, [r4, #4]
 802f138:	60a5      	str	r5, [r4, #8]
 802f13a:	2d00      	cmp	r5, #0
 802f13c:	bfa2      	ittt	ge
 802f13e:	6821      	ldrge	r1, [r4, #0]
 802f140:	f021 0104 	bicge.w	r1, r1, #4
 802f144:	6021      	strge	r1, [r4, #0]
 802f146:	b90e      	cbnz	r6, 802f14c <_printf_i+0x118>
 802f148:	2d00      	cmp	r5, #0
 802f14a:	d04d      	beq.n	802f1e8 <_printf_i+0x1b4>
 802f14c:	4615      	mov	r5, r2
 802f14e:	fbb6 f1f3 	udiv	r1, r6, r3
 802f152:	fb03 6711 	mls	r7, r3, r1, r6
 802f156:	5dc7      	ldrb	r7, [r0, r7]
 802f158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802f15c:	4637      	mov	r7, r6
 802f15e:	42bb      	cmp	r3, r7
 802f160:	460e      	mov	r6, r1
 802f162:	d9f4      	bls.n	802f14e <_printf_i+0x11a>
 802f164:	2b08      	cmp	r3, #8
 802f166:	d10b      	bne.n	802f180 <_printf_i+0x14c>
 802f168:	6823      	ldr	r3, [r4, #0]
 802f16a:	07de      	lsls	r6, r3, #31
 802f16c:	d508      	bpl.n	802f180 <_printf_i+0x14c>
 802f16e:	6923      	ldr	r3, [r4, #16]
 802f170:	6861      	ldr	r1, [r4, #4]
 802f172:	4299      	cmp	r1, r3
 802f174:	bfde      	ittt	le
 802f176:	2330      	movle	r3, #48	; 0x30
 802f178:	f805 3c01 	strble.w	r3, [r5, #-1]
 802f17c:	f105 35ff 	addle.w	r5, r5, #4294967295
 802f180:	1b52      	subs	r2, r2, r5
 802f182:	6122      	str	r2, [r4, #16]
 802f184:	f8cd a000 	str.w	sl, [sp]
 802f188:	464b      	mov	r3, r9
 802f18a:	aa03      	add	r2, sp, #12
 802f18c:	4621      	mov	r1, r4
 802f18e:	4640      	mov	r0, r8
 802f190:	f7ff fee2 	bl	802ef58 <_printf_common>
 802f194:	3001      	adds	r0, #1
 802f196:	d14c      	bne.n	802f232 <_printf_i+0x1fe>
 802f198:	f04f 30ff 	mov.w	r0, #4294967295
 802f19c:	b004      	add	sp, #16
 802f19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f1a2:	4835      	ldr	r0, [pc, #212]	; (802f278 <_printf_i+0x244>)
 802f1a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802f1a8:	6829      	ldr	r1, [r5, #0]
 802f1aa:	6823      	ldr	r3, [r4, #0]
 802f1ac:	f851 6b04 	ldr.w	r6, [r1], #4
 802f1b0:	6029      	str	r1, [r5, #0]
 802f1b2:	061d      	lsls	r5, r3, #24
 802f1b4:	d514      	bpl.n	802f1e0 <_printf_i+0x1ac>
 802f1b6:	07df      	lsls	r7, r3, #31
 802f1b8:	bf44      	itt	mi
 802f1ba:	f043 0320 	orrmi.w	r3, r3, #32
 802f1be:	6023      	strmi	r3, [r4, #0]
 802f1c0:	b91e      	cbnz	r6, 802f1ca <_printf_i+0x196>
 802f1c2:	6823      	ldr	r3, [r4, #0]
 802f1c4:	f023 0320 	bic.w	r3, r3, #32
 802f1c8:	6023      	str	r3, [r4, #0]
 802f1ca:	2310      	movs	r3, #16
 802f1cc:	e7b0      	b.n	802f130 <_printf_i+0xfc>
 802f1ce:	6823      	ldr	r3, [r4, #0]
 802f1d0:	f043 0320 	orr.w	r3, r3, #32
 802f1d4:	6023      	str	r3, [r4, #0]
 802f1d6:	2378      	movs	r3, #120	; 0x78
 802f1d8:	4828      	ldr	r0, [pc, #160]	; (802f27c <_printf_i+0x248>)
 802f1da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802f1de:	e7e3      	b.n	802f1a8 <_printf_i+0x174>
 802f1e0:	0659      	lsls	r1, r3, #25
 802f1e2:	bf48      	it	mi
 802f1e4:	b2b6      	uxthmi	r6, r6
 802f1e6:	e7e6      	b.n	802f1b6 <_printf_i+0x182>
 802f1e8:	4615      	mov	r5, r2
 802f1ea:	e7bb      	b.n	802f164 <_printf_i+0x130>
 802f1ec:	682b      	ldr	r3, [r5, #0]
 802f1ee:	6826      	ldr	r6, [r4, #0]
 802f1f0:	6961      	ldr	r1, [r4, #20]
 802f1f2:	1d18      	adds	r0, r3, #4
 802f1f4:	6028      	str	r0, [r5, #0]
 802f1f6:	0635      	lsls	r5, r6, #24
 802f1f8:	681b      	ldr	r3, [r3, #0]
 802f1fa:	d501      	bpl.n	802f200 <_printf_i+0x1cc>
 802f1fc:	6019      	str	r1, [r3, #0]
 802f1fe:	e002      	b.n	802f206 <_printf_i+0x1d2>
 802f200:	0670      	lsls	r0, r6, #25
 802f202:	d5fb      	bpl.n	802f1fc <_printf_i+0x1c8>
 802f204:	8019      	strh	r1, [r3, #0]
 802f206:	2300      	movs	r3, #0
 802f208:	6123      	str	r3, [r4, #16]
 802f20a:	4615      	mov	r5, r2
 802f20c:	e7ba      	b.n	802f184 <_printf_i+0x150>
 802f20e:	682b      	ldr	r3, [r5, #0]
 802f210:	1d1a      	adds	r2, r3, #4
 802f212:	602a      	str	r2, [r5, #0]
 802f214:	681d      	ldr	r5, [r3, #0]
 802f216:	6862      	ldr	r2, [r4, #4]
 802f218:	2100      	movs	r1, #0
 802f21a:	4628      	mov	r0, r5
 802f21c:	f7f0 ffe8 	bl	80201f0 <memchr>
 802f220:	b108      	cbz	r0, 802f226 <_printf_i+0x1f2>
 802f222:	1b40      	subs	r0, r0, r5
 802f224:	6060      	str	r0, [r4, #4]
 802f226:	6863      	ldr	r3, [r4, #4]
 802f228:	6123      	str	r3, [r4, #16]
 802f22a:	2300      	movs	r3, #0
 802f22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f230:	e7a8      	b.n	802f184 <_printf_i+0x150>
 802f232:	6923      	ldr	r3, [r4, #16]
 802f234:	462a      	mov	r2, r5
 802f236:	4649      	mov	r1, r9
 802f238:	4640      	mov	r0, r8
 802f23a:	47d0      	blx	sl
 802f23c:	3001      	adds	r0, #1
 802f23e:	d0ab      	beq.n	802f198 <_printf_i+0x164>
 802f240:	6823      	ldr	r3, [r4, #0]
 802f242:	079b      	lsls	r3, r3, #30
 802f244:	d413      	bmi.n	802f26e <_printf_i+0x23a>
 802f246:	68e0      	ldr	r0, [r4, #12]
 802f248:	9b03      	ldr	r3, [sp, #12]
 802f24a:	4298      	cmp	r0, r3
 802f24c:	bfb8      	it	lt
 802f24e:	4618      	movlt	r0, r3
 802f250:	e7a4      	b.n	802f19c <_printf_i+0x168>
 802f252:	2301      	movs	r3, #1
 802f254:	4632      	mov	r2, r6
 802f256:	4649      	mov	r1, r9
 802f258:	4640      	mov	r0, r8
 802f25a:	47d0      	blx	sl
 802f25c:	3001      	adds	r0, #1
 802f25e:	d09b      	beq.n	802f198 <_printf_i+0x164>
 802f260:	3501      	adds	r5, #1
 802f262:	68e3      	ldr	r3, [r4, #12]
 802f264:	9903      	ldr	r1, [sp, #12]
 802f266:	1a5b      	subs	r3, r3, r1
 802f268:	42ab      	cmp	r3, r5
 802f26a:	dcf2      	bgt.n	802f252 <_printf_i+0x21e>
 802f26c:	e7eb      	b.n	802f246 <_printf_i+0x212>
 802f26e:	2500      	movs	r5, #0
 802f270:	f104 0619 	add.w	r6, r4, #25
 802f274:	e7f5      	b.n	802f262 <_printf_i+0x22e>
 802f276:	bf00      	nop
 802f278:	08031aa1 	.word	0x08031aa1
 802f27c:	08031ab2 	.word	0x08031ab2

0802f280 <__sread>:
 802f280:	b510      	push	{r4, lr}
 802f282:	460c      	mov	r4, r1
 802f284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f288:	f000 f8ec 	bl	802f464 <_read_r>
 802f28c:	2800      	cmp	r0, #0
 802f28e:	bfab      	itete	ge
 802f290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f292:	89a3      	ldrhlt	r3, [r4, #12]
 802f294:	181b      	addge	r3, r3, r0
 802f296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f29a:	bfac      	ite	ge
 802f29c:	6563      	strge	r3, [r4, #84]	; 0x54
 802f29e:	81a3      	strhlt	r3, [r4, #12]
 802f2a0:	bd10      	pop	{r4, pc}

0802f2a2 <__swrite>:
 802f2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f2a6:	461f      	mov	r7, r3
 802f2a8:	898b      	ldrh	r3, [r1, #12]
 802f2aa:	05db      	lsls	r3, r3, #23
 802f2ac:	4605      	mov	r5, r0
 802f2ae:	460c      	mov	r4, r1
 802f2b0:	4616      	mov	r6, r2
 802f2b2:	d505      	bpl.n	802f2c0 <__swrite+0x1e>
 802f2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2b8:	2302      	movs	r3, #2
 802f2ba:	2200      	movs	r2, #0
 802f2bc:	f000 f868 	bl	802f390 <_lseek_r>
 802f2c0:	89a3      	ldrh	r3, [r4, #12]
 802f2c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f2c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f2ca:	81a3      	strh	r3, [r4, #12]
 802f2cc:	4632      	mov	r2, r6
 802f2ce:	463b      	mov	r3, r7
 802f2d0:	4628      	mov	r0, r5
 802f2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f2d6:	f000 b817 	b.w	802f308 <_write_r>

0802f2da <__sseek>:
 802f2da:	b510      	push	{r4, lr}
 802f2dc:	460c      	mov	r4, r1
 802f2de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2e2:	f000 f855 	bl	802f390 <_lseek_r>
 802f2e6:	1c43      	adds	r3, r0, #1
 802f2e8:	89a3      	ldrh	r3, [r4, #12]
 802f2ea:	bf15      	itete	ne
 802f2ec:	6560      	strne	r0, [r4, #84]	; 0x54
 802f2ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f2f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f2f6:	81a3      	strheq	r3, [r4, #12]
 802f2f8:	bf18      	it	ne
 802f2fa:	81a3      	strhne	r3, [r4, #12]
 802f2fc:	bd10      	pop	{r4, pc}

0802f2fe <__sclose>:
 802f2fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f302:	f000 b813 	b.w	802f32c <_close_r>
	...

0802f308 <_write_r>:
 802f308:	b538      	push	{r3, r4, r5, lr}
 802f30a:	4d07      	ldr	r5, [pc, #28]	; (802f328 <_write_r+0x20>)
 802f30c:	4604      	mov	r4, r0
 802f30e:	4608      	mov	r0, r1
 802f310:	4611      	mov	r1, r2
 802f312:	2200      	movs	r2, #0
 802f314:	602a      	str	r2, [r5, #0]
 802f316:	461a      	mov	r2, r3
 802f318:	f7f2 fed0 	bl	80220bc <_write>
 802f31c:	1c43      	adds	r3, r0, #1
 802f31e:	d102      	bne.n	802f326 <_write_r+0x1e>
 802f320:	682b      	ldr	r3, [r5, #0]
 802f322:	b103      	cbz	r3, 802f326 <_write_r+0x1e>
 802f324:	6023      	str	r3, [r4, #0]
 802f326:	bd38      	pop	{r3, r4, r5, pc}
 802f328:	20001208 	.word	0x20001208

0802f32c <_close_r>:
 802f32c:	b538      	push	{r3, r4, r5, lr}
 802f32e:	4d06      	ldr	r5, [pc, #24]	; (802f348 <_close_r+0x1c>)
 802f330:	2300      	movs	r3, #0
 802f332:	4604      	mov	r4, r0
 802f334:	4608      	mov	r0, r1
 802f336:	602b      	str	r3, [r5, #0]
 802f338:	f7f2 fedc 	bl	80220f4 <_close>
 802f33c:	1c43      	adds	r3, r0, #1
 802f33e:	d102      	bne.n	802f346 <_close_r+0x1a>
 802f340:	682b      	ldr	r3, [r5, #0]
 802f342:	b103      	cbz	r3, 802f346 <_close_r+0x1a>
 802f344:	6023      	str	r3, [r4, #0]
 802f346:	bd38      	pop	{r3, r4, r5, pc}
 802f348:	20001208 	.word	0x20001208

0802f34c <_fstat_r>:
 802f34c:	b538      	push	{r3, r4, r5, lr}
 802f34e:	4d07      	ldr	r5, [pc, #28]	; (802f36c <_fstat_r+0x20>)
 802f350:	2300      	movs	r3, #0
 802f352:	4604      	mov	r4, r0
 802f354:	4608      	mov	r0, r1
 802f356:	4611      	mov	r1, r2
 802f358:	602b      	str	r3, [r5, #0]
 802f35a:	f7f2 fed7 	bl	802210c <_fstat>
 802f35e:	1c43      	adds	r3, r0, #1
 802f360:	d102      	bne.n	802f368 <_fstat_r+0x1c>
 802f362:	682b      	ldr	r3, [r5, #0]
 802f364:	b103      	cbz	r3, 802f368 <_fstat_r+0x1c>
 802f366:	6023      	str	r3, [r4, #0]
 802f368:	bd38      	pop	{r3, r4, r5, pc}
 802f36a:	bf00      	nop
 802f36c:	20001208 	.word	0x20001208

0802f370 <_isatty_r>:
 802f370:	b538      	push	{r3, r4, r5, lr}
 802f372:	4d06      	ldr	r5, [pc, #24]	; (802f38c <_isatty_r+0x1c>)
 802f374:	2300      	movs	r3, #0
 802f376:	4604      	mov	r4, r0
 802f378:	4608      	mov	r0, r1
 802f37a:	602b      	str	r3, [r5, #0]
 802f37c:	f7f2 fed6 	bl	802212c <_isatty>
 802f380:	1c43      	adds	r3, r0, #1
 802f382:	d102      	bne.n	802f38a <_isatty_r+0x1a>
 802f384:	682b      	ldr	r3, [r5, #0]
 802f386:	b103      	cbz	r3, 802f38a <_isatty_r+0x1a>
 802f388:	6023      	str	r3, [r4, #0]
 802f38a:	bd38      	pop	{r3, r4, r5, pc}
 802f38c:	20001208 	.word	0x20001208

0802f390 <_lseek_r>:
 802f390:	b538      	push	{r3, r4, r5, lr}
 802f392:	4d07      	ldr	r5, [pc, #28]	; (802f3b0 <_lseek_r+0x20>)
 802f394:	4604      	mov	r4, r0
 802f396:	4608      	mov	r0, r1
 802f398:	4611      	mov	r1, r2
 802f39a:	2200      	movs	r2, #0
 802f39c:	602a      	str	r2, [r5, #0]
 802f39e:	461a      	mov	r2, r3
 802f3a0:	f7f2 fecf 	bl	8022142 <_lseek>
 802f3a4:	1c43      	adds	r3, r0, #1
 802f3a6:	d102      	bne.n	802f3ae <_lseek_r+0x1e>
 802f3a8:	682b      	ldr	r3, [r5, #0]
 802f3aa:	b103      	cbz	r3, 802f3ae <_lseek_r+0x1e>
 802f3ac:	6023      	str	r3, [r4, #0]
 802f3ae:	bd38      	pop	{r3, r4, r5, pc}
 802f3b0:	20001208 	.word	0x20001208

0802f3b4 <memcpy>:
 802f3b4:	440a      	add	r2, r1
 802f3b6:	4291      	cmp	r1, r2
 802f3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 802f3bc:	d100      	bne.n	802f3c0 <memcpy+0xc>
 802f3be:	4770      	bx	lr
 802f3c0:	b510      	push	{r4, lr}
 802f3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f3ca:	4291      	cmp	r1, r2
 802f3cc:	d1f9      	bne.n	802f3c2 <memcpy+0xe>
 802f3ce:	bd10      	pop	{r4, pc}

0802f3d0 <memmove>:
 802f3d0:	4288      	cmp	r0, r1
 802f3d2:	b510      	push	{r4, lr}
 802f3d4:	eb01 0402 	add.w	r4, r1, r2
 802f3d8:	d902      	bls.n	802f3e0 <memmove+0x10>
 802f3da:	4284      	cmp	r4, r0
 802f3dc:	4623      	mov	r3, r4
 802f3de:	d807      	bhi.n	802f3f0 <memmove+0x20>
 802f3e0:	1e43      	subs	r3, r0, #1
 802f3e2:	42a1      	cmp	r1, r4
 802f3e4:	d008      	beq.n	802f3f8 <memmove+0x28>
 802f3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f3ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 802f3ee:	e7f8      	b.n	802f3e2 <memmove+0x12>
 802f3f0:	4402      	add	r2, r0
 802f3f2:	4601      	mov	r1, r0
 802f3f4:	428a      	cmp	r2, r1
 802f3f6:	d100      	bne.n	802f3fa <memmove+0x2a>
 802f3f8:	bd10      	pop	{r4, pc}
 802f3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f3fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802f402:	e7f7      	b.n	802f3f4 <memmove+0x24>

0802f404 <_realloc_r>:
 802f404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f408:	4680      	mov	r8, r0
 802f40a:	4614      	mov	r4, r2
 802f40c:	460e      	mov	r6, r1
 802f40e:	b921      	cbnz	r1, 802f41a <_realloc_r+0x16>
 802f410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f414:	4611      	mov	r1, r2
 802f416:	f7fe becb 	b.w	802e1b0 <_malloc_r>
 802f41a:	b92a      	cbnz	r2, 802f428 <_realloc_r+0x24>
 802f41c:	f7fe fe5c 	bl	802e0d8 <_free_r>
 802f420:	4625      	mov	r5, r4
 802f422:	4628      	mov	r0, r5
 802f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f428:	f000 f82e 	bl	802f488 <_malloc_usable_size_r>
 802f42c:	4284      	cmp	r4, r0
 802f42e:	4607      	mov	r7, r0
 802f430:	d802      	bhi.n	802f438 <_realloc_r+0x34>
 802f432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802f436:	d812      	bhi.n	802f45e <_realloc_r+0x5a>
 802f438:	4621      	mov	r1, r4
 802f43a:	4640      	mov	r0, r8
 802f43c:	f7fe feb8 	bl	802e1b0 <_malloc_r>
 802f440:	4605      	mov	r5, r0
 802f442:	2800      	cmp	r0, #0
 802f444:	d0ed      	beq.n	802f422 <_realloc_r+0x1e>
 802f446:	42bc      	cmp	r4, r7
 802f448:	4622      	mov	r2, r4
 802f44a:	4631      	mov	r1, r6
 802f44c:	bf28      	it	cs
 802f44e:	463a      	movcs	r2, r7
 802f450:	f7ff ffb0 	bl	802f3b4 <memcpy>
 802f454:	4631      	mov	r1, r6
 802f456:	4640      	mov	r0, r8
 802f458:	f7fe fe3e 	bl	802e0d8 <_free_r>
 802f45c:	e7e1      	b.n	802f422 <_realloc_r+0x1e>
 802f45e:	4635      	mov	r5, r6
 802f460:	e7df      	b.n	802f422 <_realloc_r+0x1e>
	...

0802f464 <_read_r>:
 802f464:	b538      	push	{r3, r4, r5, lr}
 802f466:	4d07      	ldr	r5, [pc, #28]	; (802f484 <_read_r+0x20>)
 802f468:	4604      	mov	r4, r0
 802f46a:	4608      	mov	r0, r1
 802f46c:	4611      	mov	r1, r2
 802f46e:	2200      	movs	r2, #0
 802f470:	602a      	str	r2, [r5, #0]
 802f472:	461a      	mov	r2, r3
 802f474:	f7f2 fe05 	bl	8022082 <_read>
 802f478:	1c43      	adds	r3, r0, #1
 802f47a:	d102      	bne.n	802f482 <_read_r+0x1e>
 802f47c:	682b      	ldr	r3, [r5, #0]
 802f47e:	b103      	cbz	r3, 802f482 <_read_r+0x1e>
 802f480:	6023      	str	r3, [r4, #0]
 802f482:	bd38      	pop	{r3, r4, r5, pc}
 802f484:	20001208 	.word	0x20001208

0802f488 <_malloc_usable_size_r>:
 802f488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f48c:	1f18      	subs	r0, r3, #4
 802f48e:	2b00      	cmp	r3, #0
 802f490:	bfbc      	itt	lt
 802f492:	580b      	ldrlt	r3, [r1, r0]
 802f494:	18c0      	addlt	r0, r0, r3
 802f496:	4770      	bx	lr

0802f498 <_init>:
 802f498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f49a:	bf00      	nop
 802f49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f49e:	bc08      	pop	{r3}
 802f4a0:	469e      	mov	lr, r3
 802f4a2:	4770      	bx	lr

0802f4a4 <_fini>:
 802f4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f4a6:	bf00      	nop
 802f4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f4aa:	bc08      	pop	{r3}
 802f4ac:	469e      	mov	lr, r3
 802f4ae:	4770      	bx	lr
