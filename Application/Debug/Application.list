
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2fc  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002624  0802f4ac  0802f4ac  0001f4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031ad0  08031ad0  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08031ad0  08031ad0  00021ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031ad8  08031ad8  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031ad8  08031ad8  00021ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031adc  08031adc  00021adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08031ae0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00001128  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000120c  2000120c  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ca7c  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f7f  00000000  00000000  0005cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  00062b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  00064e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c843  00000000  00000000  00066f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d2d7  00000000  00000000  000937cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0d9b  00000000  00000000  000c0aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b183d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f6c  00000000  00000000  001b1890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e4 	.word	0x200000e4
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802f494 	.word	0x0802f494

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e8 	.word	0x200000e8
 80201ec:	0802f494 	.word	0x0802f494

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f003 f834 	bl	8023604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f8a0 	bl	80206e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb3a 	bl	8020c18 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f908 	bl	80207b8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f91a 	bl	80207e0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fae4 	bl	8020b78 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f948 	bl	8020844 <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f986 	bl	80208c4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 fa04 	bl	80209c4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa38 	bl	8020a30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fab0 	bl	8020b24 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00d fa36 	bl	802da34 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa82 	bl	8020ad0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4938      	ldr	r1, [pc, #224]	; (80206b0 <main+0x11c>)
 80205d0:	4838      	ldr	r0, [pc, #224]	; (80206b4 <main+0x120>)
 80205d2:	f009 f9a8 	bl	8029926 <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2304      	movs	r3, #4
 80205dc:	4936      	ldr	r1, [pc, #216]	; (80206b8 <main+0x124>)
 80205de:	4837      	ldr	r0, [pc, #220]	; (80206bc <main+0x128>)
 80205e0:	f00d fef6 	bl	802e3d0 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2204      	movs	r2, #4
 80205e8:	4619      	mov	r1, r3
 80205ea:	4835      	ldr	r0, [pc, #212]	; (80206c0 <main+0x12c>)
 80205ec:	f00d fe52 	bl	802e294 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f002 f982 	bl	80228f8 <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f002 f9ff 	bl	80229fc <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f002 fa60 	bl	8022ac4 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 fb0a 	bl	8022c20 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 faa5 	bl	8022b60 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f002 fa63 	bl	8022ae4 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4929      	ldr	r1, [pc, #164]	; (80206c4 <main+0x130>)
 8020620:	2000      	movs	r0, #0
 8020622:	f002 f9eb 	bl	80229fc <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f002 fa4c 	bl	8022ac4 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 fc22 	bl	8022e74 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 faf4 	bl	8022c20 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 fabc 	bl	8022bb8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4821      	ldr	r0, [pc, #132]	; (80206c8 <main+0x134>)
 8020642:	f002 faa1 	bl	8022b88 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4821      	ldr	r0, [pc, #132]	; (80206cc <main+0x138>)
 8020648:	f002 fad0 	bl	8022bec <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a1b      	ldr	r2, [pc, #108]	; (80206bc <main+0x128>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 fb50 	bl	8022cf8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 fa94 	bl	8022b88 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f002 f9c0 	bl	80229e4 <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a17      	ldr	r2, [pc, #92]	; (80206d0 <main+0x13c>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 fb40 	bl	8022cf8 <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00d fa02 	bl	802da80 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	4814      	ldr	r0, [pc, #80]	; (80206d4 <main+0x140>)
 8020684:	f004 fce8 	bl	8025058 <HAL_GPIO_WritePin>

    /* check serial communication process */
    serial_app();
 8020688:	f000 fc14 	bl	8020eb4 <serial_app>

    /* check for OTA Update */
    if( HAL_GetTick() - prOTACheck > OTA_CHECK_INTERVAL)
 802068c:	f002 fff0 	bl	8023670 <HAL_GetTick>
 8020690:	4602      	mov	r2, r0
 8020692:	4b11      	ldr	r3, [pc, #68]	; (80206d8 <main+0x144>)
 8020694:	681b      	ldr	r3, [r3, #0]
 8020696:	1ad3      	subs	r3, r2, r3
 8020698:	4a10      	ldr	r2, [pc, #64]	; (80206dc <main+0x148>)
 802069a:	4293      	cmp	r3, r2
 802069c:	d9ec      	bls.n	8020678 <main+0xe4>
    {
    	prOTACheck = HAL_GetTick();
 802069e:	f002 ffe7 	bl	8023670 <HAL_GetTick>
 80206a2:	4603      	mov	r3, r0
 80206a4:	4a0c      	ldr	r2, [pc, #48]	; (80206d8 <main+0x144>)
 80206a6:	6013      	str	r3, [r2, #0]
    	ota_check();
 80206a8:	f000 fc90 	bl	8020fcc <ota_check>
    MX_USB_HOST_Process();
 80206ac:	e7e4      	b.n	8020678 <main+0xe4>
 80206ae:	bf00      	nop
 80206b0:	20000404 	.word	0x20000404
 80206b4:	200002e4 	.word	0x200002e4
 80206b8:	0802f4ac 	.word	0x0802f4ac
 80206bc:	200003a0 	.word	0x200003a0
 80206c0:	0802f4cc 	.word	0x0802f4cc
 80206c4:	d0130000 	.word	0xd0130000
 80206c8:	ffff0000 	.word	0xffff0000
 80206cc:	2000004c 	.word	0x2000004c
 80206d0:	0802f4ec 	.word	0x0802f4ec
 80206d4:	40021800 	.word	0x40021800
 80206d8:	2000041c 	.word	0x2000041c
 80206dc:	0001d4c0 	.word	0x0001d4c0

080206e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b094      	sub	sp, #80	; 0x50
 80206e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206e6:	f107 0320 	add.w	r3, r7, #32
 80206ea:	2230      	movs	r2, #48	; 0x30
 80206ec:	2100      	movs	r1, #0
 80206ee:	4618      	mov	r0, r3
 80206f0:	f00d fce8 	bl	802e0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206f4:	f107 030c 	add.w	r3, r7, #12
 80206f8:	2200      	movs	r2, #0
 80206fa:	601a      	str	r2, [r3, #0]
 80206fc:	605a      	str	r2, [r3, #4]
 80206fe:	609a      	str	r2, [r3, #8]
 8020700:	60da      	str	r2, [r3, #12]
 8020702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020704:	2300      	movs	r3, #0
 8020706:	60bb      	str	r3, [r7, #8]
 8020708:	4b29      	ldr	r3, [pc, #164]	; (80207b0 <SystemClock_Config+0xd0>)
 802070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802070c:	4a28      	ldr	r2, [pc, #160]	; (80207b0 <SystemClock_Config+0xd0>)
 802070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020712:	6413      	str	r3, [r2, #64]	; 0x40
 8020714:	4b26      	ldr	r3, [pc, #152]	; (80207b0 <SystemClock_Config+0xd0>)
 8020716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802071c:	60bb      	str	r3, [r7, #8]
 802071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8020720:	2300      	movs	r3, #0
 8020722:	607b      	str	r3, [r7, #4]
 8020724:	4b23      	ldr	r3, [pc, #140]	; (80207b4 <SystemClock_Config+0xd4>)
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 802072c:	4a21      	ldr	r2, [pc, #132]	; (80207b4 <SystemClock_Config+0xd4>)
 802072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020732:	6013      	str	r3, [r2, #0]
 8020734:	4b1f      	ldr	r3, [pc, #124]	; (80207b4 <SystemClock_Config+0xd4>)
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 802073c:	607b      	str	r3, [r7, #4]
 802073e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020740:	2301      	movs	r3, #1
 8020742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802074a:	2302      	movs	r3, #2
 802074c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802074e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8020754:	2310      	movs	r3, #16
 8020756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020758:	f44f 73a8 	mov.w	r3, #336	; 0x150
 802075c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802075e:	2302      	movs	r3, #2
 8020760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8020762:	2303      	movs	r3, #3
 8020764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020766:	f107 0320 	add.w	r3, r7, #32
 802076a:	4618      	mov	r0, r3
 802076c:	f006 fe80 	bl	8027470 <HAL_RCC_OscConfig>
 8020770:	4603      	mov	r3, r0
 8020772:	2b00      	cmp	r3, #0
 8020774:	d001      	beq.n	802077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020776:	f000 fb97 	bl	8020ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802077a:	230f      	movs	r3, #15
 802077c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802077e:	2302      	movs	r3, #2
 8020780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020782:	2300      	movs	r3, #0
 8020784:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020786:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802078a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 802078c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8020792:	f107 030c 	add.w	r3, r7, #12
 8020796:	2102      	movs	r1, #2
 8020798:	4618      	mov	r0, r3
 802079a:	f007 f8e1 	bl	8027960 <HAL_RCC_ClockConfig>
 802079e:	4603      	mov	r3, r0
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d001      	beq.n	80207a8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80207a4:	f000 fb80 	bl	8020ea8 <Error_Handler>
  }
}
 80207a8:	bf00      	nop
 80207aa:	3750      	adds	r7, #80	; 0x50
 80207ac:	46bd      	mov	sp, r7
 80207ae:	bd80      	pop	{r7, pc}
 80207b0:	40023800 	.word	0x40023800
 80207b4:	40007000 	.word	0x40007000

080207b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80207bc:	4b06      	ldr	r3, [pc, #24]	; (80207d8 <MX_CRC_Init+0x20>)
 80207be:	4a07      	ldr	r2, [pc, #28]	; (80207dc <MX_CRC_Init+0x24>)
 80207c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80207c2:	4805      	ldr	r0, [pc, #20]	; (80207d8 <MX_CRC_Init+0x20>)
 80207c4:	f003 f881 	bl	80238ca <HAL_CRC_Init>
 80207c8:	4603      	mov	r3, r0
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d001      	beq.n	80207d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207ce:	f000 fb6b 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207d2:	bf00      	nop
 80207d4:	bd80      	pop	{r7, pc}
 80207d6:	bf00      	nop
 80207d8:	20000100 	.word	0x20000100
 80207dc:	40023000 	.word	0x40023000

080207e0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207e0:	b580      	push	{r7, lr}
 80207e2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207e4:	4b15      	ldr	r3, [pc, #84]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207e6:	4a16      	ldr	r2, [pc, #88]	; (8020840 <MX_DMA2D_Init+0x60>)
 80207e8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207ea:	4b14      	ldr	r3, [pc, #80]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207ec:	2200      	movs	r2, #0
 80207ee:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207f0:	4b12      	ldr	r3, [pc, #72]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207f2:	2200      	movs	r2, #0
 80207f4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207f6:	4b11      	ldr	r3, [pc, #68]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207f8:	2200      	movs	r2, #0
 80207fa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207fc:	4b0f      	ldr	r3, [pc, #60]	; (802083c <MX_DMA2D_Init+0x5c>)
 80207fe:	2200      	movs	r2, #0
 8020800:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8020802:	4b0e      	ldr	r3, [pc, #56]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020804:	2200      	movs	r2, #0
 8020806:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8020808:	4b0c      	ldr	r3, [pc, #48]	; (802083c <MX_DMA2D_Init+0x5c>)
 802080a:	2200      	movs	r2, #0
 802080c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 802080e:	4b0b      	ldr	r3, [pc, #44]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020810:	2200      	movs	r2, #0
 8020812:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8020814:	4809      	ldr	r0, [pc, #36]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020816:	f003 fac5 	bl	8023da4 <HAL_DMA2D_Init>
 802081a:	4603      	mov	r3, r0
 802081c:	2b00      	cmp	r3, #0
 802081e:	d001      	beq.n	8020824 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8020820:	f000 fb42 	bl	8020ea8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8020824:	2101      	movs	r1, #1
 8020826:	4805      	ldr	r0, [pc, #20]	; (802083c <MX_DMA2D_Init+0x5c>)
 8020828:	f003 fd2a 	bl	8024280 <HAL_DMA2D_ConfigLayer>
 802082c:	4603      	mov	r3, r0
 802082e:	2b00      	cmp	r3, #0
 8020830:	d001      	beq.n	8020836 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8020832:	f000 fb39 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8020836:	bf00      	nop
 8020838:	bd80      	pop	{r7, pc}
 802083a:	bf00      	nop
 802083c:	20000108 	.word	0x20000108
 8020840:	4002b000 	.word	0x4002b000

08020844 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8020844:	b580      	push	{r7, lr}
 8020846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020848:	4b1b      	ldr	r3, [pc, #108]	; (80208b8 <MX_I2C3_Init+0x74>)
 802084a:	4a1c      	ldr	r2, [pc, #112]	; (80208bc <MX_I2C3_Init+0x78>)
 802084c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 802084e:	4b1a      	ldr	r3, [pc, #104]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020850:	4a1b      	ldr	r2, [pc, #108]	; (80208c0 <MX_I2C3_Init+0x7c>)
 8020852:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020854:	4b18      	ldr	r3, [pc, #96]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020856:	2200      	movs	r2, #0
 8020858:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 802085a:	4b17      	ldr	r3, [pc, #92]	; (80208b8 <MX_I2C3_Init+0x74>)
 802085c:	2200      	movs	r2, #0
 802085e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020860:	4b15      	ldr	r3, [pc, #84]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020866:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020868:	4b13      	ldr	r3, [pc, #76]	; (80208b8 <MX_I2C3_Init+0x74>)
 802086a:	2200      	movs	r2, #0
 802086c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 802086e:	4b12      	ldr	r3, [pc, #72]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020870:	2200      	movs	r2, #0
 8020872:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020874:	4b10      	ldr	r3, [pc, #64]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020876:	2200      	movs	r2, #0
 8020878:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802087a:	4b0f      	ldr	r3, [pc, #60]	; (80208b8 <MX_I2C3_Init+0x74>)
 802087c:	2200      	movs	r2, #0
 802087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020880:	480d      	ldr	r0, [pc, #52]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020882:	f006 f825 	bl	80268d0 <HAL_I2C_Init>
 8020886:	4603      	mov	r3, r0
 8020888:	2b00      	cmp	r3, #0
 802088a:	d001      	beq.n	8020890 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 802088c:	f000 fb0c 	bl	8020ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020890:	2100      	movs	r1, #0
 8020892:	4809      	ldr	r0, [pc, #36]	; (80208b8 <MX_I2C3_Init+0x74>)
 8020894:	f006 f960 	bl	8026b58 <HAL_I2CEx_ConfigAnalogFilter>
 8020898:	4603      	mov	r3, r0
 802089a:	2b00      	cmp	r3, #0
 802089c:	d001      	beq.n	80208a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 802089e:	f000 fb03 	bl	8020ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80208a2:	2100      	movs	r1, #0
 80208a4:	4804      	ldr	r0, [pc, #16]	; (80208b8 <MX_I2C3_Init+0x74>)
 80208a6:	f006 f993 	bl	8026bd0 <HAL_I2CEx_ConfigDigitalFilter>
 80208aa:	4603      	mov	r3, r0
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d001      	beq.n	80208b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80208b0:	f000 fafa 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80208b4:	bf00      	nop
 80208b6:	bd80      	pop	{r7, pc}
 80208b8:	20000148 	.word	0x20000148
 80208bc:	40005c00 	.word	0x40005c00
 80208c0:	000186a0 	.word	0x000186a0

080208c4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80208c4:	b580      	push	{r7, lr}
 80208c6:	b08e      	sub	sp, #56	; 0x38
 80208c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208ca:	1d3b      	adds	r3, r7, #4
 80208cc:	2234      	movs	r2, #52	; 0x34
 80208ce:	2100      	movs	r1, #0
 80208d0:	4618      	mov	r0, r3
 80208d2:	f00d fbf7 	bl	802e0c4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208d6:	4b39      	ldr	r3, [pc, #228]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208d8:	4a39      	ldr	r2, [pc, #228]	; (80209c0 <MX_LTDC_Init+0xfc>)
 80208da:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208dc:	4b37      	ldr	r3, [pc, #220]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208de:	2200      	movs	r2, #0
 80208e0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208e2:	4b36      	ldr	r3, [pc, #216]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208e4:	2200      	movs	r2, #0
 80208e6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208e8:	4b34      	ldr	r3, [pc, #208]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208ea:	2200      	movs	r2, #0
 80208ec:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208ee:	4b33      	ldr	r3, [pc, #204]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208f0:	2200      	movs	r2, #0
 80208f2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208f4:	4b31      	ldr	r3, [pc, #196]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208f6:	2209      	movs	r2, #9
 80208f8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208fa:	4b30      	ldr	r3, [pc, #192]	; (80209bc <MX_LTDC_Init+0xf8>)
 80208fc:	2201      	movs	r2, #1
 80208fe:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8020900:	4b2e      	ldr	r3, [pc, #184]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020902:	221d      	movs	r2, #29
 8020904:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8020906:	4b2d      	ldr	r3, [pc, #180]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020908:	2203      	movs	r2, #3
 802090a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 802090c:	4b2b      	ldr	r3, [pc, #172]	; (80209bc <MX_LTDC_Init+0xf8>)
 802090e:	f240 120d 	movw	r2, #269	; 0x10d
 8020912:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8020914:	4b29      	ldr	r3, [pc, #164]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020916:	f240 1243 	movw	r2, #323	; 0x143
 802091a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 802091c:	4b27      	ldr	r3, [pc, #156]	; (80209bc <MX_LTDC_Init+0xf8>)
 802091e:	f240 1217 	movw	r2, #279	; 0x117
 8020922:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8020924:	4b25      	ldr	r3, [pc, #148]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020926:	f240 1247 	movw	r2, #327	; 0x147
 802092a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 802092c:	4b23      	ldr	r3, [pc, #140]	; (80209bc <MX_LTDC_Init+0xf8>)
 802092e:	2200      	movs	r2, #0
 8020930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8020934:	4b21      	ldr	r3, [pc, #132]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020936:	2200      	movs	r2, #0
 8020938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 802093c:	4b1f      	ldr	r3, [pc, #124]	; (80209bc <MX_LTDC_Init+0xf8>)
 802093e:	2200      	movs	r2, #0
 8020940:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8020944:	481d      	ldr	r0, [pc, #116]	; (80209bc <MX_LTDC_Init+0xf8>)
 8020946:	f006 f983 	bl	8026c50 <HAL_LTDC_Init>
 802094a:	4603      	mov	r3, r0
 802094c:	2b00      	cmp	r3, #0
 802094e:	d001      	beq.n	8020954 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020950:	f000 faaa 	bl	8020ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8020954:	2300      	movs	r3, #0
 8020956:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020958:	23f0      	movs	r3, #240	; 0xf0
 802095a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 802095c:	2300      	movs	r3, #0
 802095e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020960:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020964:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020966:	2302      	movs	r3, #2
 8020968:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 802096a:	23ff      	movs	r3, #255	; 0xff
 802096c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 802096e:	2300      	movs	r3, #0
 8020970:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8020972:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8020976:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020978:	2307      	movs	r3, #7
 802097a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 802097c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020980:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8020982:	23f0      	movs	r3, #240	; 0xf0
 8020984:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8020986:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802098a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 802098c:	2300      	movs	r3, #0
 802098e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8020992:	2300      	movs	r3, #0
 8020994:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020998:	2300      	movs	r3, #0
 802099a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 802099e:	1d3b      	adds	r3, r7, #4
 80209a0:	2200      	movs	r2, #0
 80209a2:	4619      	mov	r1, r3
 80209a4:	4805      	ldr	r0, [pc, #20]	; (80209bc <MX_LTDC_Init+0xf8>)
 80209a6:	f006 fae5 	bl	8026f74 <HAL_LTDC_ConfigLayer>
 80209aa:	4603      	mov	r3, r0
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	d001      	beq.n	80209b4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80209b0:	f000 fa7a 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80209b4:	bf00      	nop
 80209b6:	3738      	adds	r7, #56	; 0x38
 80209b8:	46bd      	mov	sp, r7
 80209ba:	bd80      	pop	{r7, pc}
 80209bc:	2000019c 	.word	0x2000019c
 80209c0:	40016800 	.word	0x40016800

080209c4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209c8:	4b17      	ldr	r3, [pc, #92]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209ca:	4a18      	ldr	r2, [pc, #96]	; (8020a2c <MX_SPI5_Init+0x68>)
 80209cc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209ce:	4b16      	ldr	r3, [pc, #88]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209d4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209d6:	4b14      	ldr	r3, [pc, #80]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209d8:	2200      	movs	r2, #0
 80209da:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209dc:	4b12      	ldr	r3, [pc, #72]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209de:	2200      	movs	r2, #0
 80209e0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209e2:	4b11      	ldr	r3, [pc, #68]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209e4:	2200      	movs	r2, #0
 80209e6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209e8:	4b0f      	ldr	r3, [pc, #60]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209ea:	2200      	movs	r2, #0
 80209ec:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209ee:	4b0e      	ldr	r3, [pc, #56]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209f4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209f6:	4b0c      	ldr	r3, [pc, #48]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209f8:	2218      	movs	r2, #24
 80209fa:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209fc:	4b0a      	ldr	r3, [pc, #40]	; (8020a28 <MX_SPI5_Init+0x64>)
 80209fe:	2200      	movs	r2, #0
 8020a00:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8020a02:	4b09      	ldr	r3, [pc, #36]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a04:	2200      	movs	r2, #0
 8020a06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020a08:	4b07      	ldr	r3, [pc, #28]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8020a0e:	4b06      	ldr	r3, [pc, #24]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a10:	220a      	movs	r2, #10
 8020a12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8020a14:	4804      	ldr	r0, [pc, #16]	; (8020a28 <MX_SPI5_Init+0x64>)
 8020a16:	f007 fc46 	bl	80282a6 <HAL_SPI_Init>
 8020a1a:	4603      	mov	r3, r0
 8020a1c:	2b00      	cmp	r3, #0
 8020a1e:	d001      	beq.n	8020a24 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8020a20:	f000 fa42 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8020a24:	bf00      	nop
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	20000244 	.word	0x20000244
 8020a2c:	40015000 	.word	0x40015000

08020a30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b086      	sub	sp, #24
 8020a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a36:	f107 0308 	add.w	r3, r7, #8
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	601a      	str	r2, [r3, #0]
 8020a3e:	605a      	str	r2, [r3, #4]
 8020a40:	609a      	str	r2, [r3, #8]
 8020a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a44:	463b      	mov	r3, r7
 8020a46:	2200      	movs	r2, #0
 8020a48:	601a      	str	r2, [r3, #0]
 8020a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a4c:	4b1e      	ldr	r3, [pc, #120]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a4e:	4a1f      	ldr	r2, [pc, #124]	; (8020acc <MX_TIM1_Init+0x9c>)
 8020a50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a52:	4b1d      	ldr	r3, [pc, #116]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a54:	2200      	movs	r2, #0
 8020a56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a58:	4b1b      	ldr	r3, [pc, #108]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a5a:	2200      	movs	r2, #0
 8020a5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a5e:	4b1a      	ldr	r3, [pc, #104]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a66:	4b18      	ldr	r3, [pc, #96]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a68:	2200      	movs	r2, #0
 8020a6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a6c:	4b16      	ldr	r3, [pc, #88]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a6e:	2200      	movs	r2, #0
 8020a70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a72:	4b15      	ldr	r3, [pc, #84]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a74:	2200      	movs	r2, #0
 8020a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a78:	4813      	ldr	r0, [pc, #76]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a7a:	f008 f9f3 	bl	8028e64 <HAL_TIM_Base_Init>
 8020a7e:	4603      	mov	r3, r0
 8020a80:	2b00      	cmp	r3, #0
 8020a82:	d001      	beq.n	8020a88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a84:	f000 fa10 	bl	8020ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a8e:	f107 0308 	add.w	r3, r7, #8
 8020a92:	4619      	mov	r1, r3
 8020a94:	480c      	ldr	r0, [pc, #48]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020a96:	f008 fbad 	bl	80291f4 <HAL_TIM_ConfigClockSource>
 8020a9a:	4603      	mov	r3, r0
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d001      	beq.n	8020aa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020aa0:	f000 fa02 	bl	8020ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020aa4:	2300      	movs	r3, #0
 8020aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020aa8:	2300      	movs	r3, #0
 8020aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020aac:	463b      	mov	r3, r7
 8020aae:	4619      	mov	r1, r3
 8020ab0:	4805      	ldr	r0, [pc, #20]	; (8020ac8 <MX_TIM1_Init+0x98>)
 8020ab2:	f008 fdc9 	bl	8029648 <HAL_TIMEx_MasterConfigSynchronization>
 8020ab6:	4603      	mov	r3, r0
 8020ab8:	2b00      	cmp	r3, #0
 8020aba:	d001      	beq.n	8020ac0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020abc:	f000 f9f4 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020ac0:	bf00      	nop
 8020ac2:	3718      	adds	r7, #24
 8020ac4:	46bd      	mov	sp, r7
 8020ac6:	bd80      	pop	{r7, pc}
 8020ac8:	2000029c 	.word	0x2000029c
 8020acc:	40010000 	.word	0x40010000

08020ad0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020ad4:	4b11      	ldr	r3, [pc, #68]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020ad6:	4a12      	ldr	r2, [pc, #72]	; (8020b20 <MX_UART5_Init+0x50>)
 8020ad8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8020ada:	4b10      	ldr	r3, [pc, #64]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8020ae0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020ae2:	4b0e      	ldr	r3, [pc, #56]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020ae4:	2200      	movs	r2, #0
 8020ae6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ae8:	4b0c      	ldr	r3, [pc, #48]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020aea:	2200      	movs	r2, #0
 8020aec:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020aee:	4b0b      	ldr	r3, [pc, #44]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020af0:	2200      	movs	r2, #0
 8020af2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020af4:	4b09      	ldr	r3, [pc, #36]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020af6:	220c      	movs	r2, #12
 8020af8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020afa:	4b08      	ldr	r3, [pc, #32]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020afc:	2200      	movs	r2, #0
 8020afe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b00:	4b06      	ldr	r3, [pc, #24]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020b02:	2200      	movs	r2, #0
 8020b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020b06:	4805      	ldr	r0, [pc, #20]	; (8020b1c <MX_UART5_Init+0x4c>)
 8020b08:	f008 fe2e 	bl	8029768 <HAL_UART_Init>
 8020b0c:	4603      	mov	r3, r0
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d001      	beq.n	8020b16 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020b12:	f000 f9c9 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020b16:	bf00      	nop
 8020b18:	bd80      	pop	{r7, pc}
 8020b1a:	bf00      	nop
 8020b1c:	200002e4 	.word	0x200002e4
 8020b20:	40005000 	.word	0x40005000

08020b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b28:	4b11      	ldr	r3, [pc, #68]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b2a:	4a12      	ldr	r2, [pc, #72]	; (8020b74 <MX_USART1_UART_Init+0x50>)
 8020b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b2e:	4b10      	ldr	r3, [pc, #64]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b36:	4b0e      	ldr	r3, [pc, #56]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b38:	2200      	movs	r2, #0
 8020b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b3c:	4b0c      	ldr	r3, [pc, #48]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b3e:	2200      	movs	r2, #0
 8020b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b42:	4b0b      	ldr	r3, [pc, #44]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b44:	2200      	movs	r2, #0
 8020b46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b48:	4b09      	ldr	r3, [pc, #36]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b4a:	220c      	movs	r2, #12
 8020b4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b4e:	4b08      	ldr	r3, [pc, #32]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b50:	2200      	movs	r2, #0
 8020b52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b54:	4b06      	ldr	r3, [pc, #24]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b56:	2200      	movs	r2, #0
 8020b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b5a:	4805      	ldr	r0, [pc, #20]	; (8020b70 <MX_USART1_UART_Init+0x4c>)
 8020b5c:	f008 fe04 	bl	8029768 <HAL_UART_Init>
 8020b60:	4603      	mov	r3, r0
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d001      	beq.n	8020b6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b66:	f000 f99f 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b6a:	bf00      	nop
 8020b6c:	bd80      	pop	{r7, pc}
 8020b6e:	bf00      	nop
 8020b70:	20000328 	.word	0x20000328
 8020b74:	40011000 	.word	0x40011000

08020b78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b088      	sub	sp, #32
 8020b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b7e:	1d3b      	adds	r3, r7, #4
 8020b80:	2200      	movs	r2, #0
 8020b82:	601a      	str	r2, [r3, #0]
 8020b84:	605a      	str	r2, [r3, #4]
 8020b86:	609a      	str	r2, [r3, #8]
 8020b88:	60da      	str	r2, [r3, #12]
 8020b8a:	611a      	str	r2, [r3, #16]
 8020b8c:	615a      	str	r2, [r3, #20]
 8020b8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b90:	4b1f      	ldr	r3, [pc, #124]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b92:	4a20      	ldr	r2, [pc, #128]	; (8020c14 <MX_FMC_Init+0x9c>)
 8020b94:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b96:	4b1e      	ldr	r3, [pc, #120]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b98:	2201      	movs	r2, #1
 8020b9a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b9c:	4b1c      	ldr	r3, [pc, #112]	; (8020c10 <MX_FMC_Init+0x98>)
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020ba2:	4b1b      	ldr	r3, [pc, #108]	; (8020c10 <MX_FMC_Init+0x98>)
 8020ba4:	2204      	movs	r2, #4
 8020ba6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020ba8:	4b19      	ldr	r3, [pc, #100]	; (8020c10 <MX_FMC_Init+0x98>)
 8020baa:	2210      	movs	r2, #16
 8020bac:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020bae:	4b18      	ldr	r3, [pc, #96]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bb0:	2240      	movs	r2, #64	; 0x40
 8020bb2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020bb4:	4b16      	ldr	r3, [pc, #88]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bb6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020bba:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020bbc:	4b14      	ldr	r3, [pc, #80]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bbe:	2200      	movs	r2, #0
 8020bc0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020bc2:	4b13      	ldr	r3, [pc, #76]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020bc8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020bca:	4b11      	ldr	r3, [pc, #68]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bcc:	2200      	movs	r2, #0
 8020bce:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020bd0:	4b0f      	ldr	r3, [pc, #60]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bd6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bd8:	2302      	movs	r3, #2
 8020bda:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bdc:	2307      	movs	r3, #7
 8020bde:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020be0:	2304      	movs	r3, #4
 8020be2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020be4:	2307      	movs	r3, #7
 8020be6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020be8:	2303      	movs	r3, #3
 8020bea:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bec:	2302      	movs	r3, #2
 8020bee:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bf0:	2302      	movs	r3, #2
 8020bf2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bf4:	1d3b      	adds	r3, r7, #4
 8020bf6:	4619      	mov	r1, r3
 8020bf8:	4805      	ldr	r0, [pc, #20]	; (8020c10 <MX_FMC_Init+0x98>)
 8020bfa:	f007 fac3 	bl	8028184 <HAL_SDRAM_Init>
 8020bfe:	4603      	mov	r3, r0
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d001      	beq.n	8020c08 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020c04:	f000 f950 	bl	8020ea8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020c08:	bf00      	nop
 8020c0a:	3720      	adds	r7, #32
 8020c0c:	46bd      	mov	sp, r7
 8020c0e:	bd80      	pop	{r7, pc}
 8020c10:	2000036c 	.word	0x2000036c
 8020c14:	a0000140 	.word	0xa0000140

08020c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020c18:	b580      	push	{r7, lr}
 8020c1a:	b08e      	sub	sp, #56	; 0x38
 8020c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020c22:	2200      	movs	r2, #0
 8020c24:	601a      	str	r2, [r3, #0]
 8020c26:	605a      	str	r2, [r3, #4]
 8020c28:	609a      	str	r2, [r3, #8]
 8020c2a:	60da      	str	r2, [r3, #12]
 8020c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c2e:	2300      	movs	r3, #0
 8020c30:	623b      	str	r3, [r7, #32]
 8020c32:	4b85      	ldr	r3, [pc, #532]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	4a84      	ldr	r2, [pc, #528]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c38:	f043 0304 	orr.w	r3, r3, #4
 8020c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c3e:	4b82      	ldr	r3, [pc, #520]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c42:	f003 0304 	and.w	r3, r3, #4
 8020c46:	623b      	str	r3, [r7, #32]
 8020c48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	61fb      	str	r3, [r7, #28]
 8020c4e:	4b7e      	ldr	r3, [pc, #504]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	4a7d      	ldr	r2, [pc, #500]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c54:	f043 0320 	orr.w	r3, r3, #32
 8020c58:	6313      	str	r3, [r2, #48]	; 0x30
 8020c5a:	4b7b      	ldr	r3, [pc, #492]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c5e:	f003 0320 	and.w	r3, r3, #32
 8020c62:	61fb      	str	r3, [r7, #28]
 8020c64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c66:	2300      	movs	r3, #0
 8020c68:	61bb      	str	r3, [r7, #24]
 8020c6a:	4b77      	ldr	r3, [pc, #476]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	4a76      	ldr	r2, [pc, #472]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c74:	6313      	str	r3, [r2, #48]	; 0x30
 8020c76:	4b74      	ldr	r3, [pc, #464]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c7e:	61bb      	str	r3, [r7, #24]
 8020c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c82:	2300      	movs	r3, #0
 8020c84:	617b      	str	r3, [r7, #20]
 8020c86:	4b70      	ldr	r3, [pc, #448]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	4a6f      	ldr	r2, [pc, #444]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c8c:	f043 0301 	orr.w	r3, r3, #1
 8020c90:	6313      	str	r3, [r2, #48]	; 0x30
 8020c92:	4b6d      	ldr	r3, [pc, #436]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c96:	f003 0301 	and.w	r3, r3, #1
 8020c9a:	617b      	str	r3, [r7, #20]
 8020c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c9e:	2300      	movs	r3, #0
 8020ca0:	613b      	str	r3, [r7, #16]
 8020ca2:	4b69      	ldr	r3, [pc, #420]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	4a68      	ldr	r2, [pc, #416]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ca8:	f043 0302 	orr.w	r3, r3, #2
 8020cac:	6313      	str	r3, [r2, #48]	; 0x30
 8020cae:	4b66      	ldr	r3, [pc, #408]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb2:	f003 0302 	and.w	r3, r3, #2
 8020cb6:	613b      	str	r3, [r7, #16]
 8020cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020cba:	2300      	movs	r3, #0
 8020cbc:	60fb      	str	r3, [r7, #12]
 8020cbe:	4b62      	ldr	r3, [pc, #392]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	4a61      	ldr	r2, [pc, #388]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cca:	4b5f      	ldr	r3, [pc, #380]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020cd2:	60fb      	str	r3, [r7, #12]
 8020cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cd6:	2300      	movs	r3, #0
 8020cd8:	60bb      	str	r3, [r7, #8]
 8020cda:	4b5b      	ldr	r3, [pc, #364]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	4a5a      	ldr	r2, [pc, #360]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ce0:	f043 0310 	orr.w	r3, r3, #16
 8020ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8020ce6:	4b58      	ldr	r3, [pc, #352]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cea:	f003 0310 	and.w	r3, r3, #16
 8020cee:	60bb      	str	r3, [r7, #8]
 8020cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	607b      	str	r3, [r7, #4]
 8020cf6:	4b54      	ldr	r3, [pc, #336]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cfa:	4a53      	ldr	r2, [pc, #332]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020cfc:	f043 0308 	orr.w	r3, r3, #8
 8020d00:	6313      	str	r3, [r2, #48]	; 0x30
 8020d02:	4b51      	ldr	r3, [pc, #324]	; (8020e48 <MX_GPIO_Init+0x230>)
 8020d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020d06:	f003 0308 	and.w	r3, r3, #8
 8020d0a:	607b      	str	r3, [r7, #4]
 8020d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020d0e:	2200      	movs	r2, #0
 8020d10:	2116      	movs	r1, #22
 8020d12:	484e      	ldr	r0, [pc, #312]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020d14:	f004 f9a0 	bl	8025058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020d18:	2200      	movs	r2, #0
 8020d1a:	2180      	movs	r1, #128	; 0x80
 8020d1c:	484c      	ldr	r0, [pc, #304]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d1e:	f004 f99b 	bl	8025058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020d22:	2200      	movs	r2, #0
 8020d24:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d28:	484a      	ldr	r0, [pc, #296]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020d2a:	f004 f995 	bl	8025058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d2e:	2200      	movs	r2, #0
 8020d30:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d34:	4848      	ldr	r0, [pc, #288]	; (8020e58 <MX_GPIO_Init+0x240>)
 8020d36:	f004 f98f 	bl	8025058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d3a:	2316      	movs	r3, #22
 8020d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d3e:	2301      	movs	r3, #1
 8020d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d42:	2300      	movs	r3, #0
 8020d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d46:	2300      	movs	r3, #0
 8020d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d4e:	4619      	mov	r1, r3
 8020d50:	483e      	ldr	r0, [pc, #248]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020d52:	f003 fec9 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d56:	2301      	movs	r3, #1
 8020d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d60:	2300      	movs	r3, #0
 8020d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d68:	4619      	mov	r1, r3
 8020d6a:	4839      	ldr	r0, [pc, #228]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d6c:	f003 febc 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d70:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d76:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d84:	4619      	mov	r1, r3
 8020d86:	4832      	ldr	r0, [pc, #200]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020d88:	f003 feae 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d8c:	2380      	movs	r3, #128	; 0x80
 8020d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d90:	2301      	movs	r3, #1
 8020d92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d94:	2300      	movs	r3, #0
 8020d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d98:	2300      	movs	r3, #0
 8020d9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020da0:	4619      	mov	r1, r3
 8020da2:	482b      	ldr	r0, [pc, #172]	; (8020e50 <MX_GPIO_Init+0x238>)
 8020da4:	f003 fea0 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020da8:	2320      	movs	r3, #32
 8020daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020dac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020db2:	2300      	movs	r3, #0
 8020db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dba:	4619      	mov	r1, r3
 8020dbc:	4823      	ldr	r0, [pc, #140]	; (8020e4c <MX_GPIO_Init+0x234>)
 8020dbe:	f003 fe93 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020dc2:	2304      	movs	r3, #4
 8020dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dd2:	4619      	mov	r1, r3
 8020dd4:	4821      	ldr	r0, [pc, #132]	; (8020e5c <MX_GPIO_Init+0x244>)
 8020dd6:	f003 fe87 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020de0:	2300      	movs	r3, #0
 8020de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020de4:	2300      	movs	r3, #0
 8020de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dec:	4619      	mov	r1, r3
 8020dee:	4819      	ldr	r0, [pc, #100]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020df0:	f003 fe7a 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020df4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dfa:	2301      	movs	r3, #1
 8020dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dfe:	2300      	movs	r3, #0
 8020e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e02:	2300      	movs	r3, #0
 8020e04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e0a:	4619      	mov	r1, r3
 8020e0c:	4811      	ldr	r0, [pc, #68]	; (8020e54 <MX_GPIO_Init+0x23c>)
 8020e0e:	f003 fe6b 	bl	8024ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020e12:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020e18:	2301      	movs	r3, #1
 8020e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020e20:	2300      	movs	r3, #0
 8020e22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e28:	4619      	mov	r1, r3
 8020e2a:	480b      	ldr	r0, [pc, #44]	; (8020e58 <MX_GPIO_Init+0x240>)
 8020e2c:	f003 fe5c 	bl	8024ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e30:	2200      	movs	r2, #0
 8020e32:	2100      	movs	r1, #0
 8020e34:	2006      	movs	r0, #6
 8020e36:	f002 fd1a 	bl	802386e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e3a:	2006      	movs	r0, #6
 8020e3c:	f002 fd33 	bl	80238a6 <HAL_NVIC_EnableIRQ>

}
 8020e40:	bf00      	nop
 8020e42:	3738      	adds	r7, #56	; 0x38
 8020e44:	46bd      	mov	sp, r7
 8020e46:	bd80      	pop	{r7, pc}
 8020e48:	40023800 	.word	0x40023800
 8020e4c:	40020800 	.word	0x40020800
 8020e50:	40020000 	.word	0x40020000
 8020e54:	40020c00 	.word	0x40020c00
 8020e58:	40021800 	.word	0x40021800
 8020e5c:	40020400 	.word	0x40020400

08020e60 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b082      	sub	sp, #8
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e68:	1d39      	adds	r1, r7, #4
 8020e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8020e6e:	2201      	movs	r2, #1
 8020e70:	4803      	ldr	r0, [pc, #12]	; (8020e80 <__io_putchar+0x20>)
 8020e72:	f008 fcc6 	bl	8029802 <HAL_UART_Transmit>
	return ch;
 8020e76:	687b      	ldr	r3, [r7, #4]
}
 8020e78:	4618      	mov	r0, r3
 8020e7a:	3708      	adds	r7, #8
 8020e7c:	46bd      	mov	sp, r7
 8020e7e:	bd80      	pop	{r7, pc}
 8020e80:	20000328 	.word	0x20000328

08020e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e84:	b580      	push	{r7, lr}
 8020e86:	b082      	sub	sp, #8
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	4a04      	ldr	r2, [pc, #16]	; (8020ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e92:	4293      	cmp	r3, r2
 8020e94:	d101      	bne.n	8020e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e96:	f002 fbd7 	bl	8023648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e9a:	bf00      	nop
 8020e9c:	3708      	adds	r7, #8
 8020e9e:	46bd      	mov	sp, r7
 8020ea0:	bd80      	pop	{r7, pc}
 8020ea2:	bf00      	nop
 8020ea4:	40001000 	.word	0x40001000

08020ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020ea8:	b480      	push	{r7}
 8020eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020eac:	b672      	cpsid	i
}
 8020eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020eb0:	e7fe      	b.n	8020eb0 <Error_Handler+0x8>
	...

08020eb4 <serial_app>:
void go_to_DFU();
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd);
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020eb4:	b580      	push	{r7, lr}
 8020eb6:	b082      	sub	sp, #8
 8020eb8:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020eba:	4b3a      	ldr	r3, [pc, #232]	; (8020fa4 <serial_app+0xf0>)
 8020ebc:	785b      	ldrb	r3, [r3, #1]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d06c      	beq.n	8020f9c <serial_app+0xe8>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020ec2:	4b38      	ldr	r3, [pc, #224]	; (8020fa4 <serial_app+0xf0>)
 8020ec4:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020ec6:	2b02      	cmp	r3, #2
 8020ec8:	d068      	beq.n	8020f9c <serial_app+0xe8>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020eca:	2300      	movs	r3, #0
 8020ecc:	71fb      	strb	r3, [r7, #7]

		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ece:	4b35      	ldr	r3, [pc, #212]	; (8020fa4 <serial_app+0xf0>)
 8020ed0:	785b      	ldrb	r3, [r3, #1]
 8020ed2:	2b03      	cmp	r3, #3
 8020ed4:	d105      	bne.n	8020ee2 <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020ed6:	4834      	ldr	r0, [pc, #208]	; (8020fa8 <serial_app+0xf4>)
 8020ed8:	f00d fa62 	bl	802e3a0 <puts>
			ret = SER_EX_ERROR;
 8020edc:	2301      	movs	r3, #1
 8020ede:	71fb      	strb	r3, [r7, #7]
 8020ee0:	e00a      	b.n	8020ef8 <serial_app+0x44>
		}
		else
		{
			printf("Chunk Received!!!\r\n");
 8020ee2:	4832      	ldr	r0, [pc, #200]	; (8020fac <serial_app+0xf8>)
 8020ee4:	f00d fa5c 	bl	802e3a0 <puts>
			ret = ser_proccess_data(Rx_Buffer, hchunk.data_len);
 8020ee8:	4b2e      	ldr	r3, [pc, #184]	; (8020fa4 <serial_app+0xf0>)
 8020eea:	889b      	ldrh	r3, [r3, #4]
 8020eec:	4619      	mov	r1, r3
 8020eee:	4830      	ldr	r0, [pc, #192]	; (8020fb0 <serial_app+0xfc>)
 8020ef0:	f000 f99c 	bl	802122c <ser_proccess_data>
 8020ef4:	4603      	mov	r3, r0
 8020ef6:	71fb      	strb	r3, [r7, #7]
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020ef8:	79fb      	ldrb	r3, [r7, #7]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d00a      	beq.n	8020f14 <serial_app+0x60>
			ser_state = SER_STATE_START;
 8020efe:	4b2d      	ldr	r3, [pc, #180]	; (8020fb4 <serial_app+0x100>)
 8020f00:	2200      	movs	r2, #0
 8020f02:	701a      	strb	r2, [r3, #0]
			printf("Sending NACK\r\n");
 8020f04:	482c      	ldr	r0, [pc, #176]	; (8020fb8 <serial_app+0x104>)
 8020f06:	f00d fa4b 	bl	802e3a0 <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020f0a:	2101      	movs	r1, #1
 8020f0c:	482b      	ldr	r0, [pc, #172]	; (8020fbc <serial_app+0x108>)
 8020f0e:	f000 fabb 	bl	8021488 <ser_send_resp>
 8020f12:	e003      	b.n	8020f1c <serial_app+0x68>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020f14:	2100      	movs	r1, #0
 8020f16:	4829      	ldr	r0, [pc, #164]	; (8020fbc <serial_app+0x108>)
 8020f18:	f000 fab6 	bl	8021488 <ser_send_resp>
		}

		/* check ota request */
		if(data_info.data_type == OTA_INFO_DATA)
 8020f1c:	4b28      	ldr	r3, [pc, #160]	; (8020fc0 <serial_app+0x10c>)
 8020f1e:	781b      	ldrb	r3, [r3, #0]
 8020f20:	2b02      	cmp	r3, #2
 8020f22:	d138      	bne.n	8020f96 <serial_app+0xe2>
		{
			ota_data.ota_valid = 1u;
 8020f24:	4b27      	ldr	r3, [pc, #156]	; (8020fc4 <serial_app+0x110>)
 8020f26:	2201      	movs	r2, #1
 8020f28:	721a      	strb	r2, [r3, #8]
			do
			{
				// check update is needed or not
				if(ota_data.ota_major < v_major)
 8020f2a:	4b26      	ldr	r3, [pc, #152]	; (8020fc4 <serial_app+0x110>)
 8020f2c:	885b      	ldrh	r3, [r3, #2]
 8020f2e:	b29b      	uxth	r3, r3
 8020f30:	2200      	movs	r2, #0
 8020f32:	4293      	cmp	r3, r2
 8020f34:	d32c      	bcc.n	8020f90 <serial_app+0xdc>
				{
					break;
				}

				if(v_major == ota_data.ota_major )
 8020f36:	4b23      	ldr	r3, [pc, #140]	; (8020fc4 <serial_app+0x110>)
 8020f38:	885b      	ldrh	r3, [r3, #2]
 8020f3a:	b29b      	uxth	r3, r3
 8020f3c:	2200      	movs	r2, #0
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d104      	bne.n	8020f4c <serial_app+0x98>
				{
					if(ota_data.ota_minor <= v_minor)
 8020f42:	4b20      	ldr	r3, [pc, #128]	; (8020fc4 <serial_app+0x110>)
 8020f44:	685b      	ldr	r3, [r3, #4]
 8020f46:	2204      	movs	r2, #4
 8020f48:	4293      	cmp	r3, r2
 8020f4a:	d923      	bls.n	8020f94 <serial_app+0xe0>
						break;
					}
				}

				// go to DFU mode if firmware downloaded
				if(ota_data.ota_available & ota_data.ota_download & ota_data.ota_valid)
 8020f4c:	4b1d      	ldr	r3, [pc, #116]	; (8020fc4 <serial_app+0x110>)
 8020f4e:	781a      	ldrb	r2, [r3, #0]
 8020f50:	4b1c      	ldr	r3, [pc, #112]	; (8020fc4 <serial_app+0x110>)
 8020f52:	785b      	ldrb	r3, [r3, #1]
 8020f54:	4013      	ands	r3, r2
 8020f56:	b2da      	uxtb	r2, r3
 8020f58:	4b1a      	ldr	r3, [pc, #104]	; (8020fc4 <serial_app+0x110>)
 8020f5a:	7a1b      	ldrb	r3, [r3, #8]
 8020f5c:	4013      	ands	r3, r2
 8020f5e:	b2db      	uxtb	r3, r3
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d002      	beq.n	8020f6a <serial_app+0xb6>
				{
					go_to_DFU();
 8020f64:	f000 fabc 	bl	80214e0 <go_to_DFU>
					break;
 8020f68:	e015      	b.n	8020f96 <serial_app+0xe2>
				}

				printf("A NEW FIRMWARE FOUND!!! VERSION = [%d,%ld]\r\n", ota_data.ota_major,
 8020f6a:	4b16      	ldr	r3, [pc, #88]	; (8020fc4 <serial_app+0x110>)
 8020f6c:	885b      	ldrh	r3, [r3, #2]
 8020f6e:	b29b      	uxth	r3, r3
 8020f70:	4619      	mov	r1, r3
 8020f72:	4b14      	ldr	r3, [pc, #80]	; (8020fc4 <serial_app+0x110>)
 8020f74:	685b      	ldr	r3, [r3, #4]
 8020f76:	461a      	mov	r2, r3
 8020f78:	4813      	ldr	r0, [pc, #76]	; (8020fc8 <serial_app+0x114>)
 8020f7a:	f00d f98b 	bl	802e294 <iprintf>
																																 ota_data.ota_minor);

				// request to download firmware
				if( !(ota_data.ota_download) )
 8020f7e:	4b11      	ldr	r3, [pc, #68]	; (8020fc4 <serial_app+0x110>)
 8020f80:	785b      	ldrb	r3, [r3, #1]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	d107      	bne.n	8020f96 <serial_app+0xe2>
				{
					ota_req_send(&huart5, SER_CMD_FW_DL);
 8020f86:	2106      	movs	r1, #6
 8020f88:	480c      	ldr	r0, [pc, #48]	; (8020fbc <serial_app+0x108>)
 8020f8a:	f000 fb5d 	bl	8021648 <ota_req_send>
					break;
 8020f8e:	e002      	b.n	8020f96 <serial_app+0xe2>
					break;
 8020f90:	bf00      	nop
 8020f92:	e000      	b.n	8020f96 <serial_app+0xe2>
						break;
 8020f94:	bf00      	nop

			}while(false);
		}


		hchunk.chunk_ready = CUN_EMPTY;
 8020f96:	4b03      	ldr	r3, [pc, #12]	; (8020fa4 <serial_app+0xf0>)
 8020f98:	2200      	movs	r2, #0
 8020f9a:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020f9c:	bf00      	nop
 8020f9e:	3708      	adds	r7, #8
 8020fa0:	46bd      	mov	sp, r7
 8020fa2:	bd80      	pop	{r7, pc}
 8020fa4:	20000830 	.word	0x20000830
 8020fa8:	0802f4f8 	.word	0x0802f4f8
 8020fac:	0802f510 	.word	0x0802f510
 8020fb0:	20000424 	.word	0x20000424
 8020fb4:	20000420 	.word	0x20000420
 8020fb8:	0802f524 	.word	0x0802f524
 8020fbc:	200002e4 	.word	0x200002e4
 8020fc0:	2000083c 	.word	0x2000083c
 8020fc4:	20000408 	.word	0x20000408
 8020fc8:	0802f534 	.word	0x0802f534

08020fcc <ota_check>:

void ota_check(){
 8020fcc:	b580      	push	{r7, lr}
 8020fce:	af00      	add	r7, sp, #0
	ota_req_send(&huart5, SER_CMD_FW_STATUS);
 8020fd0:	2104      	movs	r1, #4
 8020fd2:	4802      	ldr	r0, [pc, #8]	; (8020fdc <ota_check+0x10>)
 8020fd4:	f000 fb38 	bl	8021648 <ota_req_send>
}
 8020fd8:	bf00      	nop
 8020fda:	bd80      	pop	{r7, pc}
 8020fdc:	200002e4 	.word	0x200002e4

08020fe0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020fe0:	b580      	push	{r7, lr}
 8020fe2:	b082      	sub	sp, #8
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	4a0f      	ldr	r2, [pc, #60]	; (8021028 <HAL_UART_RxCpltCallback+0x48>)
 8020fec:	4293      	cmp	r3, r2
 8020fee:	d116      	bne.n	802101e <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 8020ff0:	4b0e      	ldr	r3, [pc, #56]	; (802102c <HAL_UART_RxCpltCallback+0x4c>)
 8020ff2:	785b      	ldrb	r3, [r3, #1]
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d003      	beq.n	8021000 <HAL_UART_RxCpltCallback+0x20>
 8020ff8:	4b0c      	ldr	r3, [pc, #48]	; (802102c <HAL_UART_RxCpltCallback+0x4c>)
 8020ffa:	785b      	ldrb	r3, [r3, #1]
 8020ffc:	2b02      	cmp	r3, #2
 8020ffe:	d104      	bne.n	802100a <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8021000:	4b0b      	ldr	r3, [pc, #44]	; (8021030 <HAL_UART_RxCpltCallback+0x50>)
 8021002:	781b      	ldrb	r3, [r3, #0]
 8021004:	4618      	mov	r0, r3
 8021006:	f000 f815 	bl	8021034 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 802100a:	2202      	movs	r2, #2
 802100c:	2100      	movs	r1, #0
 802100e:	4808      	ldr	r0, [pc, #32]	; (8021030 <HAL_UART_RxCpltCallback+0x50>)
 8021010:	f00d f858 	bl	802e0c4 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8021014:	2201      	movs	r2, #1
 8021016:	4906      	ldr	r1, [pc, #24]	; (8021030 <HAL_UART_RxCpltCallback+0x50>)
 8021018:	4803      	ldr	r0, [pc, #12]	; (8021028 <HAL_UART_RxCpltCallback+0x48>)
 802101a:	f008 fc84 	bl	8029926 <HAL_UART_Receive_IT>
	}
}
 802101e:	bf00      	nop
 8021020:	3708      	adds	r7, #8
 8021022:	46bd      	mov	sp, r7
 8021024:	bd80      	pop	{r7, pc}
 8021026:	bf00      	nop
 8021028:	200002e4 	.word	0x200002e4
 802102c:	20000830 	.word	0x20000830
 8021030:	20000404 	.word	0x20000404

08021034 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8021034:	b580      	push	{r7, lr}
 8021036:	b084      	sub	sp, #16
 8021038:	af00      	add	r7, sp, #0
 802103a:	4603      	mov	r3, r0
 802103c:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 802103e:	2300      	movs	r3, #0
 8021040:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 8021042:	4b75      	ldr	r3, [pc, #468]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021044:	781b      	ldrb	r3, [r3, #0]
 8021046:	2b05      	cmp	r3, #5
 8021048:	f200 80e1 	bhi.w	802120e <ser_receive_chunk+0x1da>
 802104c:	a201      	add	r2, pc, #4	; (adr r2, 8021054 <ser_receive_chunk+0x20>)
 802104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021052:	bf00      	nop
 8021054:	0802106d 	.word	0x0802106d
 8021058:	080210b9 	.word	0x080210b9
 802105c:	080210ff 	.word	0x080210ff
 8021060:	0802113d 	.word	0x0802113d
 8021064:	08021167 	.word	0x08021167
 8021068:	080211a3 	.word	0x080211a3

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 802106c:	f240 4209 	movw	r2, #1033	; 0x409
 8021070:	2100      	movs	r1, #0
 8021072:	486a      	ldr	r0, [pc, #424]	; (802121c <ser_receive_chunk+0x1e8>)
 8021074:	f00d f826 	bl	802e0c4 <memset>
			hchunk.index 		 = 0u;
 8021078:	4b67      	ldr	r3, [pc, #412]	; (8021218 <ser_receive_chunk+0x1e4>)
 802107a:	2200      	movs	r2, #0
 802107c:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 802107e:	4b66      	ldr	r3, [pc, #408]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021080:	2200      	movs	r2, #0
 8021082:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 8021084:	4b64      	ldr	r3, [pc, #400]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021086:	2200      	movs	r2, #0
 8021088:	80da      	strh	r2, [r3, #6]
 802108a:	2200      	movs	r2, #0
 802108c:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 802108e:	79fb      	ldrb	r3, [r7, #7]
 8021090:	2baa      	cmp	r3, #170	; 0xaa
 8021092:	f040 80b5 	bne.w	8021200 <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 8021096:	4b60      	ldr	r3, [pc, #384]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021098:	885b      	ldrh	r3, [r3, #2]
 802109a:	1c5a      	adds	r2, r3, #1
 802109c:	b291      	uxth	r1, r2
 802109e:	4a5e      	ldr	r2, [pc, #376]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210a0:	8051      	strh	r1, [r2, #2]
 80210a2:	4619      	mov	r1, r3
 80210a4:	4a5d      	ldr	r2, [pc, #372]	; (802121c <ser_receive_chunk+0x1e8>)
 80210a6:	79fb      	ldrb	r3, [r7, #7]
 80210a8:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 80210aa:	4b5b      	ldr	r3, [pc, #364]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210ac:	2201      	movs	r2, #1
 80210ae:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 80210b0:	4b59      	ldr	r3, [pc, #356]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210b2:	2202      	movs	r2, #2
 80210b4:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 80210b6:	e0a3      	b.n	8021200 <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 80210b8:	79fb      	ldrb	r3, [r7, #7]
 80210ba:	2baa      	cmp	r3, #170	; 0xaa
 80210bc:	d111      	bne.n	80210e2 <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80210be:	f240 4209 	movw	r2, #1033	; 0x409
 80210c2:	2100      	movs	r1, #0
 80210c4:	4855      	ldr	r0, [pc, #340]	; (802121c <ser_receive_chunk+0x1e8>)
 80210c6:	f00c fffd 	bl	802e0c4 <memset>
				hchunk.index 		 = 0u;
 80210ca:	4b53      	ldr	r3, [pc, #332]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210cc:	2200      	movs	r2, #0
 80210ce:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 80210d0:	4b51      	ldr	r3, [pc, #324]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210d2:	2200      	movs	r2, #0
 80210d4:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 80210d6:	4b50      	ldr	r3, [pc, #320]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210d8:	2200      	movs	r2, #0
 80210da:	80da      	strh	r2, [r3, #6]
 80210dc:	2200      	movs	r2, #0
 80210de:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 80210e0:	e095      	b.n	802120e <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 80210e2:	4b4d      	ldr	r3, [pc, #308]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210e4:	885b      	ldrh	r3, [r3, #2]
 80210e6:	1c5a      	adds	r2, r3, #1
 80210e8:	b291      	uxth	r1, r2
 80210ea:	4a4b      	ldr	r2, [pc, #300]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210ec:	8051      	strh	r1, [r2, #2]
 80210ee:	4619      	mov	r1, r3
 80210f0:	4a4a      	ldr	r2, [pc, #296]	; (802121c <ser_receive_chunk+0x1e8>)
 80210f2:	79fb      	ldrb	r3, [r7, #7]
 80210f4:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 80210f6:	4b48      	ldr	r3, [pc, #288]	; (8021218 <ser_receive_chunk+0x1e4>)
 80210f8:	2202      	movs	r2, #2
 80210fa:	701a      	strb	r2, [r3, #0]
		break;
 80210fc:	e087      	b.n	802120e <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 80210fe:	4b46      	ldr	r3, [pc, #280]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021100:	885b      	ldrh	r3, [r3, #2]
 8021102:	1c5a      	adds	r2, r3, #1
 8021104:	b291      	uxth	r1, r2
 8021106:	4a44      	ldr	r2, [pc, #272]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021108:	8051      	strh	r1, [r2, #2]
 802110a:	4619      	mov	r1, r3
 802110c:	4a43      	ldr	r2, [pc, #268]	; (802121c <ser_receive_chunk+0x1e8>)
 802110e:	79fb      	ldrb	r3, [r7, #7]
 8021110:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 8021112:	4b41      	ldr	r3, [pc, #260]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021114:	885b      	ldrh	r3, [r3, #2]
 8021116:	2b03      	cmp	r3, #3
 8021118:	d974      	bls.n	8021204 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 802111a:	4b41      	ldr	r3, [pc, #260]	; (8021220 <ser_receive_chunk+0x1ec>)
 802111c:	881a      	ldrh	r2, [r3, #0]
 802111e:	4b3e      	ldr	r3, [pc, #248]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021120:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 8021122:	4b3d      	ldr	r3, [pc, #244]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021124:	889b      	ldrh	r3, [r3, #4]
 8021126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802112a:	d803      	bhi.n	8021134 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 802112c:	4b3a      	ldr	r3, [pc, #232]	; (8021218 <ser_receive_chunk+0x1e4>)
 802112e:	2203      	movs	r2, #3
 8021130:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021132:	e067      	b.n	8021204 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021134:	4b38      	ldr	r3, [pc, #224]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021136:	2200      	movs	r2, #0
 8021138:	701a      	strb	r2, [r3, #0]
		break;
 802113a:	e063      	b.n	8021204 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802113c:	4b36      	ldr	r3, [pc, #216]	; (8021218 <ser_receive_chunk+0x1e4>)
 802113e:	885b      	ldrh	r3, [r3, #2]
 8021140:	1c5a      	adds	r2, r3, #1
 8021142:	b291      	uxth	r1, r2
 8021144:	4a34      	ldr	r2, [pc, #208]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021146:	8051      	strh	r1, [r2, #2]
 8021148:	4619      	mov	r1, r3
 802114a:	4a34      	ldr	r2, [pc, #208]	; (802121c <ser_receive_chunk+0x1e8>)
 802114c:	79fb      	ldrb	r3, [r7, #7]
 802114e:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 8021150:	4b31      	ldr	r3, [pc, #196]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021152:	889b      	ldrh	r3, [r3, #4]
 8021154:	3303      	adds	r3, #3
 8021156:	4a30      	ldr	r2, [pc, #192]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021158:	8852      	ldrh	r2, [r2, #2]
 802115a:	4293      	cmp	r3, r2
 802115c:	da54      	bge.n	8021208 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 802115e:	4b2e      	ldr	r3, [pc, #184]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021160:	2204      	movs	r2, #4
 8021162:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8021164:	e050      	b.n	8021208 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 8021166:	4b2c      	ldr	r3, [pc, #176]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021168:	885b      	ldrh	r3, [r3, #2]
 802116a:	1c5a      	adds	r2, r3, #1
 802116c:	b291      	uxth	r1, r2
 802116e:	4a2a      	ldr	r2, [pc, #168]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021170:	8051      	strh	r1, [r2, #2]
 8021172:	4619      	mov	r1, r3
 8021174:	4a29      	ldr	r2, [pc, #164]	; (802121c <ser_receive_chunk+0x1e8>)
 8021176:	79fb      	ldrb	r3, [r7, #7]
 8021178:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 802117a:	4b27      	ldr	r3, [pc, #156]	; (8021218 <ser_receive_chunk+0x1e4>)
 802117c:	889b      	ldrh	r3, [r3, #4]
 802117e:	3307      	adds	r3, #7
 8021180:	4a25      	ldr	r2, [pc, #148]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021182:	8852      	ldrh	r2, [r2, #2]
 8021184:	4293      	cmp	r3, r2
 8021186:	da41      	bge.n	802120c <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 8021188:	4b23      	ldr	r3, [pc, #140]	; (8021218 <ser_receive_chunk+0x1e4>)
 802118a:	889b      	ldrh	r3, [r3, #4]
 802118c:	3304      	adds	r3, #4
 802118e:	4a23      	ldr	r2, [pc, #140]	; (802121c <ser_receive_chunk+0x1e8>)
 8021190:	4413      	add	r3, r2
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	4a20      	ldr	r2, [pc, #128]	; (8021218 <ser_receive_chunk+0x1e4>)
 8021196:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 802119a:	4b1f      	ldr	r3, [pc, #124]	; (8021218 <ser_receive_chunk+0x1e4>)
 802119c:	2205      	movs	r2, #5
 802119e:	701a      	strb	r2, [r3, #0]
			}
		break;
 80211a0:	e034      	b.n	802120c <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 80211a2:	4b1d      	ldr	r3, [pc, #116]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211a4:	885b      	ldrh	r3, [r3, #2]
 80211a6:	4619      	mov	r1, r3
 80211a8:	4a1c      	ldr	r2, [pc, #112]	; (802121c <ser_receive_chunk+0x1e8>)
 80211aa:	79fb      	ldrb	r3, [r7, #7]
 80211ac:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 80211ae:	4b1a      	ldr	r3, [pc, #104]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211b0:	2203      	movs	r2, #3
 80211b2:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 80211b4:	4b18      	ldr	r3, [pc, #96]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211b6:	2200      	movs	r2, #0
 80211b8:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 80211ba:	4b17      	ldr	r3, [pc, #92]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211bc:	885b      	ldrh	r3, [r3, #2]
 80211be:	461a      	mov	r2, r3
 80211c0:	4b16      	ldr	r3, [pc, #88]	; (802121c <ser_receive_chunk+0x1e8>)
 80211c2:	5c9b      	ldrb	r3, [r3, r2]
 80211c4:	2bbb      	cmp	r3, #187	; 0xbb
 80211c6:	d119      	bne.n	80211fc <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 80211c8:	4b13      	ldr	r3, [pc, #76]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211ca:	889b      	ldrh	r3, [r3, #4]
 80211cc:	4619      	mov	r1, r3
 80211ce:	4815      	ldr	r0, [pc, #84]	; (8021224 <ser_receive_chunk+0x1f0>)
 80211d0:	f000 fa64 	bl	802169c <ser_calcCRC>
 80211d4:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 80211d6:	4b10      	ldr	r3, [pc, #64]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211d8:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80211dc:	68fa      	ldr	r2, [r7, #12]
 80211de:	429a      	cmp	r2, r3
 80211e0:	d008      	beq.n	80211f4 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80211e2:	4b0d      	ldr	r3, [pc, #52]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211e4:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80211e8:	461a      	mov	r2, r3
 80211ea:	68f9      	ldr	r1, [r7, #12]
 80211ec:	480e      	ldr	r0, [pc, #56]	; (8021228 <ser_receive_chunk+0x1f4>)
 80211ee:	f00d f851 	bl	802e294 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 80211f2:	e004      	b.n	80211fe <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 80211f4:	4b08      	ldr	r3, [pc, #32]	; (8021218 <ser_receive_chunk+0x1e4>)
 80211f6:	2201      	movs	r2, #1
 80211f8:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 80211fa:	e008      	b.n	802120e <ser_receive_chunk+0x1da>
					break;
 80211fc:	bf00      	nop
		break;
 80211fe:	e006      	b.n	802120e <ser_receive_chunk+0x1da>
		break;
 8021200:	bf00      	nop
 8021202:	e004      	b.n	802120e <ser_receive_chunk+0x1da>
		break;
 8021204:	bf00      	nop
 8021206:	e002      	b.n	802120e <ser_receive_chunk+0x1da>
		break;
 8021208:	bf00      	nop
 802120a:	e000      	b.n	802120e <ser_receive_chunk+0x1da>
		break;
 802120c:	bf00      	nop
	}
}
 802120e:	bf00      	nop
 8021210:	3710      	adds	r7, #16
 8021212:	46bd      	mov	sp, r7
 8021214:	bd80      	pop	{r7, pc}
 8021216:	bf00      	nop
 8021218:	20000830 	.word	0x20000830
 802121c:	20000424 	.word	0x20000424
 8021220:	20000426 	.word	0x20000426
 8021224:	20000428 	.word	0x20000428
 8021228:	0802f564 	.word	0x0802f564

0802122c <ser_proccess_data>:


static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len)
{
 802122c:	b5b0      	push	{r4, r5, r7, lr}
 802122e:	b08a      	sub	sp, #40	; 0x28
 8021230:	af00      	add	r7, sp, #0
 8021232:	6078      	str	r0, [r7, #4]
 8021234:	460b      	mov	r3, r1
 8021236:	807b      	strh	r3, [r7, #2]
	SER_EX_ ret = SER_EX_ERROR;
 8021238:	2301      	movs	r3, #1
 802123a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf==NULL) || (len == 0u) )
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	2b00      	cmp	r3, #0
 8021242:	f000 80fd 	beq.w	8021440 <ser_proccess_data+0x214>
 8021246:	887b      	ldrh	r3, [r7, #2]
 8021248:	2b00      	cmp	r3, #0
 802124a:	f000 80f9 	beq.w	8021440 <ser_proccess_data+0x214>
		{
			break;
		}

		// Check Serial Abort Command
		SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	623b      	str	r3, [r7, #32]
		if(cmd->packet_type == SER_PACKET_TYPE_CMD)
 8021252:	6a3b      	ldr	r3, [r7, #32]
 8021254:	785b      	ldrb	r3, [r3, #1]
 8021256:	2b00      	cmp	r3, #0
 8021258:	d107      	bne.n	802126a <ser_proccess_data+0x3e>
		{
			if(cmd->cmd == SER_CMD_ABORT)
 802125a:	6a3b      	ldr	r3, [r7, #32]
 802125c:	791b      	ldrb	r3, [r3, #4]
 802125e:	2b02      	cmp	r3, #2
 8021260:	d103      	bne.n	802126a <ser_proccess_data+0x3e>
			{
				// Receive Serial Abort Command. stop process;
				ser_state = SER_STATE_START;
 8021262:	4b7f      	ldr	r3, [pc, #508]	; (8021460 <ser_proccess_data+0x234>)
 8021264:	2200      	movs	r2, #0
 8021266:	701a      	strb	r2, [r3, #0]
				break;
 8021268:	e0f3      	b.n	8021452 <ser_proccess_data+0x226>
			}
		}

		switch(ser_state)
 802126a:	4b7d      	ldr	r3, [pc, #500]	; (8021460 <ser_proccess_data+0x234>)
 802126c:	781b      	ldrb	r3, [r3, #0]
 802126e:	2b03      	cmp	r3, #3
 8021270:	f200 80e2 	bhi.w	8021438 <ser_proccess_data+0x20c>
 8021274:	a201      	add	r2, pc, #4	; (adr r2, 802127c <ser_proccess_data+0x50>)
 8021276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802127a:	bf00      	nop
 802127c:	0802128d 	.word	0x0802128d
 8021280:	080212ef 	.word	0x080212ef
 8021284:	08021343 	.word	0x08021343
 8021288:	080213d9 	.word	0x080213d9
		{

			case SER_STATE_START:
			{

				data_info.data_crc 	= 0u;
 802128c:	4b75      	ldr	r3, [pc, #468]	; (8021464 <ser_proccess_data+0x238>)
 802128e:	2200      	movs	r2, #0
 8021290:	715a      	strb	r2, [r3, #5]
 8021292:	2200      	movs	r2, #0
 8021294:	719a      	strb	r2, [r3, #6]
 8021296:	2200      	movs	r2, #0
 8021298:	71da      	strb	r2, [r3, #7]
 802129a:	2200      	movs	r2, #0
 802129c:	721a      	strb	r2, [r3, #8]
				data_info.data_size	= 0u;
 802129e:	4b71      	ldr	r3, [pc, #452]	; (8021464 <ser_proccess_data+0x238>)
 80212a0:	2200      	movs	r2, #0
 80212a2:	705a      	strb	r2, [r3, #1]
 80212a4:	2200      	movs	r2, #0
 80212a6:	709a      	strb	r2, [r3, #2]
 80212a8:	2200      	movs	r2, #0
 80212aa:	70da      	strb	r2, [r3, #3]
 80212ac:	2200      	movs	r2, #0
 80212ae:	711a      	strb	r2, [r3, #4]
				data_info.data_type	= 0u;
 80212b0:	4b6c      	ldr	r3, [pc, #432]	; (8021464 <ser_proccess_data+0x238>)
 80212b2:	2200      	movs	r2, #0
 80212b4:	701a      	strb	r2, [r3, #0]
				data_received_size	= 0u;
 80212b6:	4b6c      	ldr	r3, [pc, #432]	; (8021468 <ser_proccess_data+0x23c>)
 80212b8:	2200      	movs	r2, #0
 80212ba:	801a      	strh	r2, [r3, #0]
				data_calc_crc				= 0u;
 80212bc:	4b6b      	ldr	r3, [pc, #428]	; (802146c <ser_proccess_data+0x240>)
 80212be:	2200      	movs	r2, #0
 80212c0:	601a      	str	r2, [r3, #0]

				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80212c2:	687b      	ldr	r3, [r7, #4]
 80212c4:	60fb      	str	r3, [r7, #12]
				if( cmd->packet_type == SER_PACKET_TYPE_CMD )
 80212c6:	68fb      	ldr	r3, [r7, #12]
 80212c8:	785b      	ldrb	r3, [r3, #1]
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	f040 80ba 	bne.w	8021444 <ser_proccess_data+0x218>
				{
					if( cmd->cmd == SER_CMD_START )
 80212d0:	68fb      	ldr	r3, [r7, #12]
 80212d2:	791b      	ldrb	r3, [r3, #4]
 80212d4:	2b00      	cmp	r3, #0
 80212d6:	f040 80b5 	bne.w	8021444 <ser_proccess_data+0x218>
					{
						printf("Received Serial Start Command \r\n");
 80212da:	4865      	ldr	r0, [pc, #404]	; (8021470 <ser_proccess_data+0x244>)
 80212dc:	f00d f860 	bl	802e3a0 <puts>
						ser_state = SER_STATE_HEADER;
 80212e0:	4b5f      	ldr	r3, [pc, #380]	; (8021460 <ser_proccess_data+0x234>)
 80212e2:	2201      	movs	r2, #1
 80212e4:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 80212e6:	2300      	movs	r3, #0
 80212e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 80212ec:	e0aa      	b.n	8021444 <ser_proccess_data+0x218>


			case SER_STATE_HEADER:
			{
				SER_HEADER_ *header = (SER_HEADER_ *)buf;
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	613b      	str	r3, [r7, #16]

				if( header->packet_type == SER_PACKET_TYPE_HEADER )
 80212f2:	693b      	ldr	r3, [r7, #16]
 80212f4:	785b      	ldrb	r3, [r3, #1]
 80212f6:	2b02      	cmp	r3, #2
 80212f8:	f040 80a6 	bne.w	8021448 <ser_proccess_data+0x21c>
				{
					data_info.data_type = header->meta_data.data_type;
 80212fc:	693b      	ldr	r3, [r7, #16]
 80212fe:	791a      	ldrb	r2, [r3, #4]
 8021300:	4b58      	ldr	r3, [pc, #352]	; (8021464 <ser_proccess_data+0x238>)
 8021302:	701a      	strb	r2, [r3, #0]
					data_info.data_size = header->meta_data.data_size;
 8021304:	693b      	ldr	r3, [r7, #16]
 8021306:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802130a:	4a56      	ldr	r2, [pc, #344]	; (8021464 <ser_proccess_data+0x238>)
 802130c:	f8c2 3001 	str.w	r3, [r2, #1]
					data_info.data_crc	 = header->meta_data.data_crc;
 8021310:	693b      	ldr	r3, [r7, #16]
 8021312:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8021316:	4a53      	ldr	r2, [pc, #332]	; (8021464 <ser_proccess_data+0x238>)
 8021318:	f8c2 3005 	str.w	r3, [r2, #5]

					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
																									data_info.data_type,
 802131c:	4b51      	ldr	r3, [pc, #324]	; (8021464 <ser_proccess_data+0x238>)
 802131e:	781b      	ldrb	r3, [r3, #0]
					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
 8021320:	4619      	mov	r1, r3
 8021322:	4b50      	ldr	r3, [pc, #320]	; (8021464 <ser_proccess_data+0x238>)
 8021324:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8021328:	4b4e      	ldr	r3, [pc, #312]	; (8021464 <ser_proccess_data+0x238>)
 802132a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802132e:	4851      	ldr	r0, [pc, #324]	; (8021474 <ser_proccess_data+0x248>)
 8021330:	f00c ffb0 	bl	802e294 <iprintf>
																									data_info.data_size,
																									data_info.data_crc);
					ser_state = SER_STATE_DATA;
 8021334:	4b4a      	ldr	r3, [pc, #296]	; (8021460 <ser_proccess_data+0x234>)
 8021336:	2202      	movs	r2, #2
 8021338:	701a      	strb	r2, [r3, #0]
					ret = SER_EX_OK;
 802133a:	2300      	movs	r3, #0
 802133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}
			break;
 8021340:	e082      	b.n	8021448 <ser_proccess_data+0x21c>


			case SER_STATE_DATA:
			{
				SER_DATA_				*data			= (SER_DATA_ *)buf;
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	61bb      	str	r3, [r7, #24]
				uint16_t				data_len	=	data->data_len;
 8021346:	69bb      	ldr	r3, [r7, #24]
 8021348:	789a      	ldrb	r2, [r3, #2]
 802134a:	78db      	ldrb	r3, [r3, #3]
 802134c:	021b      	lsls	r3, r3, #8
 802134e:	4313      	orrs	r3, r2
 8021350:	82fb      	strh	r3, [r7, #22]

				if( data->packet_type == SER_PACKET_TYPE_DATA )
 8021352:	69bb      	ldr	r3, [r7, #24]
 8021354:	785b      	ldrb	r3, [r3, #1]
 8021356:	2b01      	cmp	r3, #1
 8021358:	d178      	bne.n	802144c <ser_proccess_data+0x220>
				{
					switch(data_info.data_type)
 802135a:	4b42      	ldr	r3, [pc, #264]	; (8021464 <ser_proccess_data+0x238>)
 802135c:	781b      	ldrb	r3, [r3, #0]
 802135e:	2b02      	cmp	r3, #2
 8021360:	d006      	beq.n	8021370 <ser_proccess_data+0x144>
 8021362:	2b02      	cmp	r3, #2
 8021364:	dc25      	bgt.n	80213b2 <ser_proccess_data+0x186>
 8021366:	2b00      	cmp	r3, #0
 8021368:	d027      	beq.n	80213ba <ser_proccess_data+0x18e>
 802136a:	2b01      	cmp	r3, #1
 802136c:	d027      	beq.n	80213be <ser_proccess_data+0x192>
 802136e:	e020      	b.n	80213b2 <ser_proccess_data+0x186>
						}
						break;

						case OTA_INFO_DATA:
						{
								ota_data = *(ota_info *)&buf[4];
 8021370:	4a41      	ldr	r2, [pc, #260]	; (8021478 <ser_proccess_data+0x24c>)
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	3304      	adds	r3, #4
 8021376:	681d      	ldr	r5, [r3, #0]
 8021378:	685c      	ldr	r4, [r3, #4]
 802137a:	6898      	ldr	r0, [r3, #8]
 802137c:	68d9      	ldr	r1, [r3, #12]
 802137e:	6015      	str	r5, [r2, #0]
 8021380:	6054      	str	r4, [r2, #4]
 8021382:	6090      	str	r0, [r2, #8]
 8021384:	60d1      	str	r1, [r2, #12]
 8021386:	7c1b      	ldrb	r3, [r3, #16]
 8021388:	7413      	strb	r3, [r2, #16]
								ota_data.ota_valid = 0;
 802138a:	4b3b      	ldr	r3, [pc, #236]	; (8021478 <ser_proccess_data+0x24c>)
 802138c:	2200      	movs	r2, #0
 802138e:	721a      	strb	r2, [r3, #8]
								data_received_size 			= data_len;
 8021390:	4a35      	ldr	r2, [pc, #212]	; (8021468 <ser_proccess_data+0x23c>)
 8021392:	8afb      	ldrh	r3, [r7, #22]
 8021394:	8013      	strh	r3, [r2, #0]
								data_calc_crc			 	= ser_calcCRC(&buf[4], data_len);
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	3304      	adds	r3, #4
 802139a:	8afa      	ldrh	r2, [r7, #22]
 802139c:	4611      	mov	r1, r2
 802139e:	4618      	mov	r0, r3
 80213a0:	f000 f97c 	bl	802169c <ser_calcCRC>
 80213a4:	4603      	mov	r3, r0
 80213a6:	4a31      	ldr	r2, [pc, #196]	; (802146c <ser_proccess_data+0x240>)
 80213a8:	6013      	str	r3, [r2, #0]
								ret = SER_EX_OK;
 80213aa:	2300      	movs	r3, #0
 80213ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						}
						break;
 80213b0:	e006      	b.n	80213c0 <ser_proccess_data+0x194>

						default:
						{
							// shouldn't be here
							ret = SER_EX_ERROR;
 80213b2:	2301      	movs	r3, #1
 80213b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						}
						break;
 80213b8:	e002      	b.n	80213c0 <ser_proccess_data+0x194>
						break;
 80213ba:	bf00      	nop
 80213bc:	e000      	b.n	80213c0 <ser_proccess_data+0x194>
						break;
 80213be:	bf00      	nop
					}

					if( data_received_size >= data_info.data_size )
 80213c0:	4b29      	ldr	r3, [pc, #164]	; (8021468 <ser_proccess_data+0x23c>)
 80213c2:	881b      	ldrh	r3, [r3, #0]
 80213c4:	461a      	mov	r2, r3
 80213c6:	4b27      	ldr	r3, [pc, #156]	; (8021464 <ser_proccess_data+0x238>)
 80213c8:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80213cc:	429a      	cmp	r2, r3
 80213ce:	d33d      	bcc.n	802144c <ser_proccess_data+0x220>
					{
						//Received All data, move to end
						ser_state = SER_STATE_END;
 80213d0:	4b23      	ldr	r3, [pc, #140]	; (8021460 <ser_proccess_data+0x234>)
 80213d2:	2203      	movs	r2, #3
 80213d4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 80213d6:	e039      	b.n	802144c <ser_proccess_data+0x220>


			case SER_STATE_END:
			{
				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == SER_PACKET_TYPE_CMD)
 80213dc:	69fb      	ldr	r3, [r7, #28]
 80213de:	785b      	ldrb	r3, [r3, #1]
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d135      	bne.n	8021450 <ser_proccess_data+0x224>
				{
					if(cmd->cmd == SER_CMD_END)
 80213e4:	69fb      	ldr	r3, [r7, #28]
 80213e6:	791b      	ldrb	r3, [r3, #4]
 80213e8:	2b01      	cmp	r3, #1
 80213ea:	d131      	bne.n	8021450 <ser_proccess_data+0x224>
					{
						printf("Receive SERIAL END COMMAND\r\nValidation...\r\n");
 80213ec:	4823      	ldr	r0, [pc, #140]	; (802147c <ser_proccess_data+0x250>)
 80213ee:	f00c ffd7 	bl	802e3a0 <puts>

						//Validation the received packets
						//TODO: validation normal data

						// one packet data so:
						if( data_info.data_type == OTA_INFO_DATA ||  data_info.data_type == STATUS_DATA )
 80213f2:	4b1c      	ldr	r3, [pc, #112]	; (8021464 <ser_proccess_data+0x238>)
 80213f4:	781b      	ldrb	r3, [r3, #0]
 80213f6:	2b02      	cmp	r3, #2
 80213f8:	d003      	beq.n	8021402 <ser_proccess_data+0x1d6>
 80213fa:	4b1a      	ldr	r3, [pc, #104]	; (8021464 <ser_proccess_data+0x238>)
 80213fc:	781b      	ldrb	r3, [r3, #0]
 80213fe:	2b01      	cmp	r3, #1
 8021400:	d110      	bne.n	8021424 <ser_proccess_data+0x1f8>
						{
							if(data_calc_crc != data_info.data_crc)
 8021402:	4b18      	ldr	r3, [pc, #96]	; (8021464 <ser_proccess_data+0x238>)
 8021404:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8021408:	4b18      	ldr	r3, [pc, #96]	; (802146c <ser_proccess_data+0x240>)
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	429a      	cmp	r2, r3
 802140e:	d009      	beq.n	8021424 <ser_proccess_data+0x1f8>
							{
								printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8021410:	4b16      	ldr	r3, [pc, #88]	; (802146c <ser_proccess_data+0x240>)
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	4a13      	ldr	r2, [pc, #76]	; (8021464 <ser_proccess_data+0x238>)
 8021416:	f8d2 2005 	ldr.w	r2, [r2, #5]
 802141a:	4619      	mov	r1, r3
 802141c:	4818      	ldr	r0, [pc, #96]	; (8021480 <ser_proccess_data+0x254>)
 802141e:	f00c ff39 	bl	802e294 <iprintf>
												data_calc_crc, data_info.data_crc);
								break;
 8021422:	e016      	b.n	8021452 <ser_proccess_data+0x226>
							}
						}
						printf("Validated Successfully!\r\n");
 8021424:	4817      	ldr	r0, [pc, #92]	; (8021484 <ser_proccess_data+0x258>)
 8021426:	f00c ffbb 	bl	802e3a0 <puts>

						ser_state = SER_STATE_START;
 802142a:	4b0d      	ldr	r3, [pc, #52]	; (8021460 <ser_proccess_data+0x234>)
 802142c:	2200      	movs	r2, #0
 802142e:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 8021430:	2300      	movs	r3, #0
 8021432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					}
				}
			}
			break;
 8021436:	e00b      	b.n	8021450 <ser_proccess_data+0x224>

			default:
			{
				ret = SER_EX_ERROR;
 8021438:	2301      	movs	r3, #1
 802143a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 802143e:	e008      	b.n	8021452 <ser_proccess_data+0x226>
			// state cases end
		};
 8021440:	bf00      	nop
 8021442:	e006      	b.n	8021452 <ser_proccess_data+0x226>
			break;
 8021444:	bf00      	nop
 8021446:	e004      	b.n	8021452 <ser_proccess_data+0x226>
			break;
 8021448:	bf00      	nop
 802144a:	e002      	b.n	8021452 <ser_proccess_data+0x226>
			break;
 802144c:	bf00      	nop
 802144e:	e000      	b.n	8021452 <ser_proccess_data+0x226>
			break;
 8021450:	bf00      	nop

	}while(false);

	return ret;
 8021452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8021456:	4618      	mov	r0, r3
 8021458:	3728      	adds	r7, #40	; 0x28
 802145a:	46bd      	mov	sp, r7
 802145c:	bdb0      	pop	{r4, r5, r7, pc}
 802145e:	bf00      	nop
 8021460:	20000420 	.word	0x20000420
 8021464:	2000083c 	.word	0x2000083c
 8021468:	2000084e 	.word	0x2000084e
 802146c:	20000850 	.word	0x20000850
 8021470:	0802f5a8 	.word	0x0802f5a8
 8021474:	0802f5c8 	.word	0x0802f5c8
 8021478:	20000408 	.word	0x20000408
 802147c:	0802f604 	.word	0x0802f604
 8021480:	0802f630 	.word	0x0802f630
 8021484:	0802f674 	.word	0x0802f674

08021488 <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8021488:	b580      	push	{r7, lr}
 802148a:	b086      	sub	sp, #24
 802148c:	af00      	add	r7, sp, #0
 802148e:	6078      	str	r0, [r7, #4]
 8021490:	460b      	mov	r3, r1
 8021492:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 8021494:	f107 030c 	add.w	r3, r7, #12
 8021498:	2200      	movs	r2, #0
 802149a:	601a      	str	r2, [r3, #0]
 802149c:	605a      	str	r2, [r3, #4]
 802149e:	811a      	strh	r2, [r3, #8]
 80214a0:	23aa      	movs	r3, #170	; 0xaa
 80214a2:	733b      	strb	r3, [r7, #12]
 80214a4:	2303      	movs	r3, #3
 80214a6:	737b      	strb	r3, [r7, #13]
 80214a8:	2301      	movs	r3, #1
 80214aa:	81fb      	strh	r3, [r7, #14]
 80214ac:	78fb      	ldrb	r3, [r7, #3]
 80214ae:	743b      	strb	r3, [r7, #16]
 80214b0:	23bb      	movs	r3, #187	; 0xbb
 80214b2:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 80214b4:	f107 030c 	add.w	r3, r7, #12
 80214b8:	3304      	adds	r3, #4
 80214ba:	2101      	movs	r1, #1
 80214bc:	4618      	mov	r0, r3
 80214be:	f000 f8ed 	bl	802169c <ser_calcCRC>
 80214c2:	4603      	mov	r3, r0
 80214c4:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 80214c8:	f107 010c 	add.w	r1, r7, #12
 80214cc:	f04f 33ff 	mov.w	r3, #4294967295
 80214d0:	220a      	movs	r2, #10
 80214d2:	6878      	ldr	r0, [r7, #4]
 80214d4:	f008 f995 	bl	8029802 <HAL_UART_Transmit>

}
 80214d8:	bf00      	nop
 80214da:	3718      	adds	r7, #24
 80214dc:	46bd      	mov	sp, r7
 80214de:	bd80      	pop	{r7, pc}

080214e0 <go_to_DFU>:
/*
 * @brief save boot reason to OTA update and save data in configuration
 * sector patr
 */
void go_to_DFU()
{
 80214e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80214e2:	b08f      	sub	sp, #60	; 0x3c
 80214e4:	af00      	add	r7, sp, #0
	do
	{
		HAL_StatusTypeDef ret = HAL_ERROR;
 80214e6:	2301      	movs	r3, #1
 80214e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* read configuration */
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80214ec:	4b15      	ldr	r3, [pc, #84]	; (8021544 <go_to_DFU+0x64>)
 80214ee:	681b      	ldr	r3, [r3, #0]
 80214f0:	461c      	mov	r4, r3
 80214f2:	1d3e      	adds	r6, r7, #4
 80214f4:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80214f8:	4635      	mov	r5, r6
 80214fa:	4623      	mov	r3, r4
 80214fc:	6818      	ldr	r0, [r3, #0]
 80214fe:	6859      	ldr	r1, [r3, #4]
 8021500:	689a      	ldr	r2, [r3, #8]
 8021502:	68db      	ldr	r3, [r3, #12]
 8021504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021506:	3410      	adds	r4, #16
 8021508:	3610      	adds	r6, #16
 802150a:	4564      	cmp	r4, ip
 802150c:	d1f4      	bne.n	80214f8 <go_to_DFU+0x18>

		/* set reboot cause to ota request */
		cfg.reboot_cause = OTA_UPDATE_APP;
 802150e:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 8021512:	607b      	str	r3, [r7, #4]

		/* write back config */
		ret = write_cfg_to_flash(&cfg);
 8021514:	1d3b      	adds	r3, r7, #4
 8021516:	4618      	mov	r0, r3
 8021518:	f000 f81a 	bl	8021550 <write_cfg_to_flash>
 802151c:	4603      	mov	r3, r0
 802151e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if( ret != HAL_OK )
 8021522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8021526:	2b00      	cmp	r3, #0
 8021528:	d003      	beq.n	8021532 <go_to_DFU+0x52>
		{
			printf("Write configuratin Error!!!\r\n");
 802152a:	4807      	ldr	r0, [pc, #28]	; (8021548 <go_to_DFU+0x68>)
 802152c:	f00c ff38 	bl	802e3a0 <puts>
		printf("Reboot for Update...\r\n");

		HAL_NVIC_SystemReset();

	}while(false);
}
 8021530:	e004      	b.n	802153c <go_to_DFU+0x5c>
		printf("Reboot for Update...\r\n");
 8021532:	4806      	ldr	r0, [pc, #24]	; (802154c <go_to_DFU+0x6c>)
 8021534:	f00c ff34 	bl	802e3a0 <puts>
		HAL_NVIC_SystemReset();
 8021538:	f002 f9c3 	bl	80238c2 <HAL_NVIC_SystemReset>
}
 802153c:	bf00      	nop
 802153e:	373c      	adds	r7, #60	; 0x3c
 8021540:	46bd      	mov	sp, r7
 8021542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021544:	20000000 	.word	0x20000000
 8021548:	0802f690 	.word	0x0802f690
 802154c:	0802f6b0 	.word	0x0802f6b0

08021550 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 8021550:	b5b0      	push	{r4, r5, r7, lr}
 8021552:	b08c      	sub	sp, #48	; 0x30
 8021554:	af00      	add	r7, sp, #0
 8021556:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8021558:	2301      	movs	r3, #1
 802155a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 802155e:	687b      	ldr	r3, [r7, #4]
 8021560:	2b00      	cmp	r3, #0
 8021562:	d05f      	beq.n	8021624 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 8021564:	f003 f80e 	bl	8024584 <HAL_FLASH_Unlock>
 8021568:	4603      	mov	r3, r0
 802156a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 802156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021572:	2b00      	cmp	r3, #0
 8021574:	d158      	bne.n	8021628 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8021576:	f04f 30ff 	mov.w	r0, #4294967295
 802157a:	f003 f835 	bl	80245e8 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 802157e:	2300      	movs	r3, #0
 8021580:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 8021582:	2304      	movs	r3, #4
 8021584:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 8021586:	2301      	movs	r3, #1
 8021588:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 802158a:	2302      	movs	r3, #2
 802158c:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 802158e:	4b2c      	ldr	r3, [pc, #176]	; (8021640 <write_cfg_to_flash+0xf0>)
 8021590:	2273      	movs	r2, #115	; 0x73
 8021592:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8021594:	f107 020c 	add.w	r2, r7, #12
 8021598:	f107 0310 	add.w	r3, r7, #16
 802159c:	4611      	mov	r1, r2
 802159e:	4618      	mov	r0, r3
 80215a0:	f003 f962 	bl	8024868 <HAL_FLASHEx_Erase>
 80215a4:	4603      	mov	r3, r0
 80215a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80215aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	d13c      	bne.n	802162c <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215b6:	2300      	movs	r3, #0
 80215b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80215ba:	e01f      	b.n	80215fc <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215be:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80215c2:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 80215c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215ca:	4413      	add	r3, r2
 80215cc:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80215ce:	b2db      	uxtb	r3, r3
 80215d0:	2200      	movs	r2, #0
 80215d2:	461c      	mov	r4, r3
 80215d4:	4615      	mov	r5, r2
 80215d6:	4622      	mov	r2, r4
 80215d8:	462b      	mov	r3, r5
 80215da:	2000      	movs	r0, #0
 80215dc:	f002 ff7e 	bl	80244dc <HAL_FLASH_Program>
 80215e0:	4603      	mov	r3, r0
 80215e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 80215e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d003      	beq.n	80215f6 <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 80215ee:	4815      	ldr	r0, [pc, #84]	; (8021644 <write_cfg_to_flash+0xf4>)
 80215f0:	f00c fed6 	bl	802e3a0 <puts>
				break;
 80215f4:	e005      	b.n	8021602 <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80215f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215f8:	3301      	adds	r3, #1
 80215fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80215fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215fe:	2b2f      	cmp	r3, #47	; 0x2f
 8021600:	d9dc      	bls.n	80215bc <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8021602:	f04f 30ff 	mov.w	r0, #4294967295
 8021606:	f002 ffef 	bl	80245e8 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 802160a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802160e:	2b00      	cmp	r3, #0
 8021610:	d10e      	bne.n	8021630 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8021612:	f002 ffd9 	bl	80245c8 <HAL_FLASH_Lock>
 8021616:	4603      	mov	r3, r0
 8021618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 802161c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021620:	2b00      	cmp	r3, #0
 8021622:	e006      	b.n	8021632 <write_cfg_to_flash+0xe2>
			break;
 8021624:	bf00      	nop
 8021626:	e004      	b.n	8021632 <write_cfg_to_flash+0xe2>
			break;
 8021628:	bf00      	nop
 802162a:	e002      	b.n	8021632 <write_cfg_to_flash+0xe2>
			break;
 802162c:	bf00      	nop
 802162e:	e000      	b.n	8021632 <write_cfg_to_flash+0xe2>
	      break;
 8021630:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 8021632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8021636:	4618      	mov	r0, r3
 8021638:	3730      	adds	r7, #48	; 0x30
 802163a:	46bd      	mov	sp, r7
 802163c:	bdb0      	pop	{r4, r5, r7, pc}
 802163e:	bf00      	nop
 8021640:	40023c00 	.word	0x40023c00
 8021644:	0802f6c8 	.word	0x0802f6c8

08021648 <ota_req_send>:
 * @brief send request to host
 * @param huart uart handler
 * @retval none
 */
static void ota_req_send(UART_HandleTypeDef *huart, uint8_t cmd)
{
 8021648:	b580      	push	{r7, lr}
 802164a:	b086      	sub	sp, #24
 802164c:	af00      	add	r7, sp, #0
 802164e:	6078      	str	r0, [r7, #4]
 8021650:	460b      	mov	r3, r1
 8021652:	70fb      	strb	r3, [r7, #3]
	SER_COMMAND_ pack =
 8021654:	f107 030c 	add.w	r3, r7, #12
 8021658:	2200      	movs	r2, #0
 802165a:	601a      	str	r2, [r3, #0]
 802165c:	605a      	str	r2, [r3, #4]
 802165e:	811a      	strh	r2, [r3, #8]
 8021660:	23aa      	movs	r3, #170	; 0xaa
 8021662:	733b      	strb	r3, [r7, #12]
 8021664:	2301      	movs	r3, #1
 8021666:	81fb      	strh	r3, [r7, #14]
 8021668:	78fb      	ldrb	r3, [r7, #3]
 802166a:	743b      	strb	r3, [r7, #16]
 802166c:	23bb      	movs	r3, #187	; 0xbb
 802166e:	757b      	strb	r3, [r7, #21]
		.data_len			= 1u,
		.cmd					= cmd,
		.eof					= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.cmd, 1);
 8021670:	f107 030c 	add.w	r3, r7, #12
 8021674:	3304      	adds	r3, #4
 8021676:	2101      	movs	r1, #1
 8021678:	4618      	mov	r0, r3
 802167a:	f000 f80f 	bl	802169c <ser_calcCRC>
 802167e:	4603      	mov	r3, r0
 8021680:	f8c7 3011 	str.w	r3, [r7, #17]

	//send request
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_COMMAND_),HAL_MAX_DELAY);
 8021684:	f107 010c 	add.w	r1, r7, #12
 8021688:	f04f 33ff 	mov.w	r3, #4294967295
 802168c:	220a      	movs	r2, #10
 802168e:	6878      	ldr	r0, [r7, #4]
 8021690:	f008 f8b7 	bl	8029802 <HAL_UART_Transmit>
}
 8021694:	bf00      	nop
 8021696:	3718      	adds	r7, #24
 8021698:	46bd      	mov	sp, r7
 802169a:	bd80      	pop	{r7, pc}

0802169c <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 802169c:	b480      	push	{r7}
 802169e:	b087      	sub	sp, #28
 80216a0:	af00      	add	r7, sp, #0
 80216a2:	6078      	str	r0, [r7, #4]
 80216a4:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80216a6:	f04f 33ff 	mov.w	r3, #4294967295
 80216aa:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216ac:	2300      	movs	r3, #0
 80216ae:	613b      	str	r3, [r7, #16]
 80216b0:	e014      	b.n	80216dc <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80216b2:	697b      	ldr	r3, [r7, #20]
 80216b4:	0e1b      	lsrs	r3, r3, #24
 80216b6:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80216b8:	687a      	ldr	r2, [r7, #4]
 80216ba:	693b      	ldr	r3, [r7, #16]
 80216bc:	4413      	add	r3, r2
 80216be:	781a      	ldrb	r2, [r3, #0]
 80216c0:	7bfb      	ldrb	r3, [r7, #15]
 80216c2:	4053      	eors	r3, r2
 80216c4:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80216c6:	697b      	ldr	r3, [r7, #20]
 80216c8:	021a      	lsls	r2, r3, #8
 80216ca:	7bfb      	ldrb	r3, [r7, #15]
 80216cc:	4909      	ldr	r1, [pc, #36]	; (80216f4 <ser_calcCRC+0x58>)
 80216ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80216d2:	4053      	eors	r3, r2
 80216d4:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80216d6:	693b      	ldr	r3, [r7, #16]
 80216d8:	3301      	adds	r3, #1
 80216da:	613b      	str	r3, [r7, #16]
 80216dc:	693a      	ldr	r2, [r7, #16]
 80216de:	683b      	ldr	r3, [r7, #0]
 80216e0:	429a      	cmp	r2, r3
 80216e2:	d3e6      	bcc.n	80216b2 <ser_calcCRC+0x16>
    }
    return Checksum;
 80216e4:	697b      	ldr	r3, [r7, #20]
}
 80216e6:	4618      	mov	r0, r3
 80216e8:	371c      	adds	r7, #28
 80216ea:	46bd      	mov	sp, r7
 80216ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216f0:	4770      	bx	lr
 80216f2:	bf00      	nop
 80216f4:	0802f6ec 	.word	0x0802f6ec

080216f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80216f8:	b480      	push	{r7}
 80216fa:	b083      	sub	sp, #12
 80216fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80216fe:	2300      	movs	r3, #0
 8021700:	607b      	str	r3, [r7, #4]
 8021702:	4b10      	ldr	r3, [pc, #64]	; (8021744 <HAL_MspInit+0x4c>)
 8021704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021706:	4a0f      	ldr	r2, [pc, #60]	; (8021744 <HAL_MspInit+0x4c>)
 8021708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802170c:	6453      	str	r3, [r2, #68]	; 0x44
 802170e:	4b0d      	ldr	r3, [pc, #52]	; (8021744 <HAL_MspInit+0x4c>)
 8021710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021716:	607b      	str	r3, [r7, #4]
 8021718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802171a:	2300      	movs	r3, #0
 802171c:	603b      	str	r3, [r7, #0]
 802171e:	4b09      	ldr	r3, [pc, #36]	; (8021744 <HAL_MspInit+0x4c>)
 8021720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021722:	4a08      	ldr	r2, [pc, #32]	; (8021744 <HAL_MspInit+0x4c>)
 8021724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021728:	6413      	str	r3, [r2, #64]	; 0x40
 802172a:	4b06      	ldr	r3, [pc, #24]	; (8021744 <HAL_MspInit+0x4c>)
 802172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021732:	603b      	str	r3, [r7, #0]
 8021734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8021736:	bf00      	nop
 8021738:	370c      	adds	r7, #12
 802173a:	46bd      	mov	sp, r7
 802173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021740:	4770      	bx	lr
 8021742:	bf00      	nop
 8021744:	40023800 	.word	0x40023800

08021748 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8021748:	b480      	push	{r7}
 802174a:	b085      	sub	sp, #20
 802174c:	af00      	add	r7, sp, #0
 802174e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8021750:	687b      	ldr	r3, [r7, #4]
 8021752:	681b      	ldr	r3, [r3, #0]
 8021754:	4a0b      	ldr	r2, [pc, #44]	; (8021784 <HAL_CRC_MspInit+0x3c>)
 8021756:	4293      	cmp	r3, r2
 8021758:	d10d      	bne.n	8021776 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 802175a:	2300      	movs	r3, #0
 802175c:	60fb      	str	r3, [r7, #12]
 802175e:	4b0a      	ldr	r3, [pc, #40]	; (8021788 <HAL_CRC_MspInit+0x40>)
 8021760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021762:	4a09      	ldr	r2, [pc, #36]	; (8021788 <HAL_CRC_MspInit+0x40>)
 8021764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8021768:	6313      	str	r3, [r2, #48]	; 0x30
 802176a:	4b07      	ldr	r3, [pc, #28]	; (8021788 <HAL_CRC_MspInit+0x40>)
 802176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021772:	60fb      	str	r3, [r7, #12]
 8021774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8021776:	bf00      	nop
 8021778:	3714      	adds	r7, #20
 802177a:	46bd      	mov	sp, r7
 802177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021780:	4770      	bx	lr
 8021782:	bf00      	nop
 8021784:	40023000 	.word	0x40023000
 8021788:	40023800 	.word	0x40023800

0802178c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 802178c:	b580      	push	{r7, lr}
 802178e:	b084      	sub	sp, #16
 8021790:	af00      	add	r7, sp, #0
 8021792:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	4a0e      	ldr	r2, [pc, #56]	; (80217d4 <HAL_DMA2D_MspInit+0x48>)
 802179a:	4293      	cmp	r3, r2
 802179c:	d115      	bne.n	80217ca <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 802179e:	2300      	movs	r3, #0
 80217a0:	60fb      	str	r3, [r7, #12]
 80217a2:	4b0d      	ldr	r3, [pc, #52]	; (80217d8 <HAL_DMA2D_MspInit+0x4c>)
 80217a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217a6:	4a0c      	ldr	r2, [pc, #48]	; (80217d8 <HAL_DMA2D_MspInit+0x4c>)
 80217a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80217ac:	6313      	str	r3, [r2, #48]	; 0x30
 80217ae:	4b0a      	ldr	r3, [pc, #40]	; (80217d8 <HAL_DMA2D_MspInit+0x4c>)
 80217b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80217b6:	60fb      	str	r3, [r7, #12]
 80217b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80217ba:	2200      	movs	r2, #0
 80217bc:	2105      	movs	r1, #5
 80217be:	205a      	movs	r0, #90	; 0x5a
 80217c0:	f002 f855 	bl	802386e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80217c4:	205a      	movs	r0, #90	; 0x5a
 80217c6:	f002 f86e 	bl	80238a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80217ca:	bf00      	nop
 80217cc:	3710      	adds	r7, #16
 80217ce:	46bd      	mov	sp, r7
 80217d0:	bd80      	pop	{r7, pc}
 80217d2:	bf00      	nop
 80217d4:	4002b000 	.word	0x4002b000
 80217d8:	40023800 	.word	0x40023800

080217dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80217dc:	b580      	push	{r7, lr}
 80217de:	b08a      	sub	sp, #40	; 0x28
 80217e0:	af00      	add	r7, sp, #0
 80217e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80217e4:	f107 0314 	add.w	r3, r7, #20
 80217e8:	2200      	movs	r2, #0
 80217ea:	601a      	str	r2, [r3, #0]
 80217ec:	605a      	str	r2, [r3, #4]
 80217ee:	609a      	str	r2, [r3, #8]
 80217f0:	60da      	str	r2, [r3, #12]
 80217f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	681b      	ldr	r3, [r3, #0]
 80217f8:	4a29      	ldr	r2, [pc, #164]	; (80218a0 <HAL_I2C_MspInit+0xc4>)
 80217fa:	4293      	cmp	r3, r2
 80217fc:	d14b      	bne.n	8021896 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80217fe:	2300      	movs	r3, #0
 8021800:	613b      	str	r3, [r7, #16]
 8021802:	4b28      	ldr	r3, [pc, #160]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021806:	4a27      	ldr	r2, [pc, #156]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021808:	f043 0304 	orr.w	r3, r3, #4
 802180c:	6313      	str	r3, [r2, #48]	; 0x30
 802180e:	4b25      	ldr	r3, [pc, #148]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021812:	f003 0304 	and.w	r3, r3, #4
 8021816:	613b      	str	r3, [r7, #16]
 8021818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802181a:	2300      	movs	r3, #0
 802181c:	60fb      	str	r3, [r7, #12]
 802181e:	4b21      	ldr	r3, [pc, #132]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021822:	4a20      	ldr	r2, [pc, #128]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021824:	f043 0301 	orr.w	r3, r3, #1
 8021828:	6313      	str	r3, [r2, #48]	; 0x30
 802182a:	4b1e      	ldr	r3, [pc, #120]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 802182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802182e:	f003 0301 	and.w	r3, r3, #1
 8021832:	60fb      	str	r3, [r7, #12]
 8021834:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8021836:	f44f 7300 	mov.w	r3, #512	; 0x200
 802183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802183c:	2312      	movs	r3, #18
 802183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021840:	2301      	movs	r3, #1
 8021842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021844:	2300      	movs	r3, #0
 8021846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8021848:	2304      	movs	r3, #4
 802184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 802184c:	f107 0314 	add.w	r3, r7, #20
 8021850:	4619      	mov	r1, r3
 8021852:	4815      	ldr	r0, [pc, #84]	; (80218a8 <HAL_I2C_MspInit+0xcc>)
 8021854:	f003 f948 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8021858:	f44f 7380 	mov.w	r3, #256	; 0x100
 802185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802185e:	2312      	movs	r3, #18
 8021860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021862:	2301      	movs	r3, #1
 8021864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021866:	2300      	movs	r3, #0
 8021868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802186a:	2304      	movs	r3, #4
 802186c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 802186e:	f107 0314 	add.w	r3, r7, #20
 8021872:	4619      	mov	r1, r3
 8021874:	480d      	ldr	r0, [pc, #52]	; (80218ac <HAL_I2C_MspInit+0xd0>)
 8021876:	f003 f937 	bl	8024ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 802187a:	2300      	movs	r3, #0
 802187c:	60bb      	str	r3, [r7, #8]
 802187e:	4b09      	ldr	r3, [pc, #36]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021882:	4a08      	ldr	r2, [pc, #32]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 8021884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8021888:	6413      	str	r3, [r2, #64]	; 0x40
 802188a:	4b06      	ldr	r3, [pc, #24]	; (80218a4 <HAL_I2C_MspInit+0xc8>)
 802188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802188e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8021892:	60bb      	str	r3, [r7, #8]
 8021894:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8021896:	bf00      	nop
 8021898:	3728      	adds	r7, #40	; 0x28
 802189a:	46bd      	mov	sp, r7
 802189c:	bd80      	pop	{r7, pc}
 802189e:	bf00      	nop
 80218a0:	40005c00 	.word	0x40005c00
 80218a4:	40023800 	.word	0x40023800
 80218a8:	40020800 	.word	0x40020800
 80218ac:	40020000 	.word	0x40020000

080218b0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80218b0:	b580      	push	{r7, lr}
 80218b2:	b09a      	sub	sp, #104	; 0x68
 80218b4:	af00      	add	r7, sp, #0
 80218b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80218b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80218bc:	2200      	movs	r2, #0
 80218be:	601a      	str	r2, [r3, #0]
 80218c0:	605a      	str	r2, [r3, #4]
 80218c2:	609a      	str	r2, [r3, #8]
 80218c4:	60da      	str	r2, [r3, #12]
 80218c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80218c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218cc:	2230      	movs	r2, #48	; 0x30
 80218ce:	2100      	movs	r1, #0
 80218d0:	4618      	mov	r0, r3
 80218d2:	f00c fbf7 	bl	802e0c4 <memset>
  if(hltdc->Instance==LTDC)
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	681b      	ldr	r3, [r3, #0]
 80218da:	4a85      	ldr	r2, [pc, #532]	; (8021af0 <HAL_LTDC_MspInit+0x240>)
 80218dc:	4293      	cmp	r3, r2
 80218de:	f040 8102 	bne.w	8021ae6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80218e2:	2308      	movs	r3, #8
 80218e4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 80218e6:	2331      	movs	r3, #49	; 0x31
 80218e8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80218ea:	2302      	movs	r3, #2
 80218ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80218ee:	2300      	movs	r3, #0
 80218f0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80218f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80218f6:	4618      	mov	r0, r3
 80218f8:	f006 fa84 	bl	8027e04 <HAL_RCCEx_PeriphCLKConfig>
 80218fc:	4603      	mov	r3, r0
 80218fe:	2b00      	cmp	r3, #0
 8021900:	d001      	beq.n	8021906 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8021902:	f7ff fad1 	bl	8020ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021906:	2300      	movs	r3, #0
 8021908:	623b      	str	r3, [r7, #32]
 802190a:	4b7a      	ldr	r3, [pc, #488]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 802190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802190e:	4a79      	ldr	r2, [pc, #484]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021914:	6453      	str	r3, [r2, #68]	; 0x44
 8021916:	4b77      	ldr	r3, [pc, #476]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802191a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802191e:	623b      	str	r3, [r7, #32]
 8021920:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021922:	2300      	movs	r3, #0
 8021924:	61fb      	str	r3, [r7, #28]
 8021926:	4b73      	ldr	r3, [pc, #460]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802192a:	4a72      	ldr	r2, [pc, #456]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 802192c:	f043 0320 	orr.w	r3, r3, #32
 8021930:	6313      	str	r3, [r2, #48]	; 0x30
 8021932:	4b70      	ldr	r3, [pc, #448]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021936:	f003 0320 	and.w	r3, r3, #32
 802193a:	61fb      	str	r3, [r7, #28]
 802193c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802193e:	2300      	movs	r3, #0
 8021940:	61bb      	str	r3, [r7, #24]
 8021942:	4b6c      	ldr	r3, [pc, #432]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021946:	4a6b      	ldr	r2, [pc, #428]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021948:	f043 0301 	orr.w	r3, r3, #1
 802194c:	6313      	str	r3, [r2, #48]	; 0x30
 802194e:	4b69      	ldr	r3, [pc, #420]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021952:	f003 0301 	and.w	r3, r3, #1
 8021956:	61bb      	str	r3, [r7, #24]
 8021958:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802195a:	2300      	movs	r3, #0
 802195c:	617b      	str	r3, [r7, #20]
 802195e:	4b65      	ldr	r3, [pc, #404]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021962:	4a64      	ldr	r2, [pc, #400]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021964:	f043 0302 	orr.w	r3, r3, #2
 8021968:	6313      	str	r3, [r2, #48]	; 0x30
 802196a:	4b62      	ldr	r3, [pc, #392]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 802196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802196e:	f003 0302 	and.w	r3, r3, #2
 8021972:	617b      	str	r3, [r7, #20]
 8021974:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021976:	2300      	movs	r3, #0
 8021978:	613b      	str	r3, [r7, #16]
 802197a:	4b5e      	ldr	r3, [pc, #376]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 802197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802197e:	4a5d      	ldr	r2, [pc, #372]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021984:	6313      	str	r3, [r2, #48]	; 0x30
 8021986:	4b5b      	ldr	r3, [pc, #364]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802198e:	613b      	str	r3, [r7, #16]
 8021990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021992:	2300      	movs	r3, #0
 8021994:	60fb      	str	r3, [r7, #12]
 8021996:	4b57      	ldr	r3, [pc, #348]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 8021998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802199a:	4a56      	ldr	r2, [pc, #344]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 802199c:	f043 0304 	orr.w	r3, r3, #4
 80219a0:	6313      	str	r3, [r2, #48]	; 0x30
 80219a2:	4b54      	ldr	r3, [pc, #336]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 80219a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219a6:	f003 0304 	and.w	r3, r3, #4
 80219aa:	60fb      	str	r3, [r7, #12]
 80219ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80219ae:	2300      	movs	r3, #0
 80219b0:	60bb      	str	r3, [r7, #8]
 80219b2:	4b50      	ldr	r3, [pc, #320]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 80219b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219b6:	4a4f      	ldr	r2, [pc, #316]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 80219b8:	f043 0308 	orr.w	r3, r3, #8
 80219bc:	6313      	str	r3, [r2, #48]	; 0x30
 80219be:	4b4d      	ldr	r3, [pc, #308]	; (8021af4 <HAL_LTDC_MspInit+0x244>)
 80219c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80219c2:	f003 0308 	and.w	r3, r3, #8
 80219c6:	60bb      	str	r3, [r7, #8]
 80219c8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80219ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80219ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219d0:	2302      	movs	r3, #2
 80219d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219d4:	2300      	movs	r3, #0
 80219d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219d8:	2300      	movs	r3, #0
 80219da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219dc:	230e      	movs	r3, #14
 80219de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80219e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80219e4:	4619      	mov	r1, r3
 80219e6:	4844      	ldr	r0, [pc, #272]	; (8021af8 <HAL_LTDC_MspInit+0x248>)
 80219e8:	f003 f87e 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80219ec:	f641 0358 	movw	r3, #6232	; 0x1858
 80219f0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219f2:	2302      	movs	r3, #2
 80219f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219f6:	2300      	movs	r3, #0
 80219f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219fa:	2300      	movs	r3, #0
 80219fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219fe:	230e      	movs	r3, #14
 8021a00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a06:	4619      	mov	r1, r3
 8021a08:	483c      	ldr	r0, [pc, #240]	; (8021afc <HAL_LTDC_MspInit+0x24c>)
 8021a0a:	f003 f86d 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021a0e:	2303      	movs	r3, #3
 8021a10:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a12:	2302      	movs	r3, #2
 8021a14:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a16:	2300      	movs	r3, #0
 8021a18:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a1a:	2300      	movs	r3, #0
 8021a1c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021a1e:	2309      	movs	r3, #9
 8021a20:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a26:	4619      	mov	r1, r3
 8021a28:	4835      	ldr	r0, [pc, #212]	; (8021b00 <HAL_LTDC_MspInit+0x250>)
 8021a2a:	f003 f85d 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021a2e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8021a32:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a34:	2302      	movs	r3, #2
 8021a36:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a38:	2300      	movs	r3, #0
 8021a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a40:	230e      	movs	r3, #14
 8021a42:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a48:	4619      	mov	r1, r3
 8021a4a:	482d      	ldr	r0, [pc, #180]	; (8021b00 <HAL_LTDC_MspInit+0x250>)
 8021a4c:	f003 f84c 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021a50:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021a54:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a56:	2302      	movs	r3, #2
 8021a58:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a5e:	2300      	movs	r3, #0
 8021a60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a62:	230e      	movs	r3, #14
 8021a64:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a6a:	4619      	mov	r1, r3
 8021a6c:	4825      	ldr	r0, [pc, #148]	; (8021b04 <HAL_LTDC_MspInit+0x254>)
 8021a6e:	f003 f83b 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8021a72:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8021a76:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a78:	2302      	movs	r3, #2
 8021a7a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a7c:	2300      	movs	r3, #0
 8021a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021a80:	2300      	movs	r3, #0
 8021a82:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021a84:	230e      	movs	r3, #14
 8021a86:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021a88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a8c:	4619      	mov	r1, r3
 8021a8e:	481e      	ldr	r0, [pc, #120]	; (8021b08 <HAL_LTDC_MspInit+0x258>)
 8021a90:	f003 f82a 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8021a94:	2348      	movs	r3, #72	; 0x48
 8021a96:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021a98:	2302      	movs	r3, #2
 8021a9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021aa4:	230e      	movs	r3, #14
 8021aa6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021aa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021aac:	4619      	mov	r1, r3
 8021aae:	4817      	ldr	r0, [pc, #92]	; (8021b0c <HAL_LTDC_MspInit+0x25c>)
 8021ab0:	f003 f81a 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8021ab4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021ab8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021aba:	2302      	movs	r3, #2
 8021abc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021abe:	2300      	movs	r3, #0
 8021ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021ac6:	2309      	movs	r3, #9
 8021ac8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021ace:	4619      	mov	r1, r3
 8021ad0:	480c      	ldr	r0, [pc, #48]	; (8021b04 <HAL_LTDC_MspInit+0x254>)
 8021ad2:	f003 f809 	bl	8024ae8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	2105      	movs	r1, #5
 8021ada:	2058      	movs	r0, #88	; 0x58
 8021adc:	f001 fec7 	bl	802386e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021ae0:	2058      	movs	r0, #88	; 0x58
 8021ae2:	f001 fee0 	bl	80238a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021ae6:	bf00      	nop
 8021ae8:	3768      	adds	r7, #104	; 0x68
 8021aea:	46bd      	mov	sp, r7
 8021aec:	bd80      	pop	{r7, pc}
 8021aee:	bf00      	nop
 8021af0:	40016800 	.word	0x40016800
 8021af4:	40023800 	.word	0x40023800
 8021af8:	40021400 	.word	0x40021400
 8021afc:	40020000 	.word	0x40020000
 8021b00:	40020400 	.word	0x40020400
 8021b04:	40021800 	.word	0x40021800
 8021b08:	40020800 	.word	0x40020800
 8021b0c:	40020c00 	.word	0x40020c00

08021b10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021b10:	b580      	push	{r7, lr}
 8021b12:	b08a      	sub	sp, #40	; 0x28
 8021b14:	af00      	add	r7, sp, #0
 8021b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b18:	f107 0314 	add.w	r3, r7, #20
 8021b1c:	2200      	movs	r2, #0
 8021b1e:	601a      	str	r2, [r3, #0]
 8021b20:	605a      	str	r2, [r3, #4]
 8021b22:	609a      	str	r2, [r3, #8]
 8021b24:	60da      	str	r2, [r3, #12]
 8021b26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021b28:	687b      	ldr	r3, [r7, #4]
 8021b2a:	681b      	ldr	r3, [r3, #0]
 8021b2c:	4a19      	ldr	r2, [pc, #100]	; (8021b94 <HAL_SPI_MspInit+0x84>)
 8021b2e:	4293      	cmp	r3, r2
 8021b30:	d12c      	bne.n	8021b8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8021b32:	2300      	movs	r3, #0
 8021b34:	613b      	str	r3, [r7, #16]
 8021b36:	4b18      	ldr	r3, [pc, #96]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b3a:	4a17      	ldr	r2, [pc, #92]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b40:	6453      	str	r3, [r2, #68]	; 0x44
 8021b42:	4b15      	ldr	r3, [pc, #84]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b4a:	613b      	str	r3, [r7, #16]
 8021b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021b4e:	2300      	movs	r3, #0
 8021b50:	60fb      	str	r3, [r7, #12]
 8021b52:	4b11      	ldr	r3, [pc, #68]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b56:	4a10      	ldr	r2, [pc, #64]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b58:	f043 0320 	orr.w	r3, r3, #32
 8021b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8021b5e:	4b0e      	ldr	r3, [pc, #56]	; (8021b98 <HAL_SPI_MspInit+0x88>)
 8021b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b62:	f003 0320 	and.w	r3, r3, #32
 8021b66:	60fb      	str	r3, [r7, #12]
 8021b68:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021b6a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b70:	2302      	movs	r3, #2
 8021b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b74:	2300      	movs	r3, #0
 8021b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b78:	2300      	movs	r3, #0
 8021b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021b7c:	2305      	movs	r3, #5
 8021b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021b80:	f107 0314 	add.w	r3, r7, #20
 8021b84:	4619      	mov	r1, r3
 8021b86:	4805      	ldr	r0, [pc, #20]	; (8021b9c <HAL_SPI_MspInit+0x8c>)
 8021b88:	f002 ffae 	bl	8024ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021b8c:	bf00      	nop
 8021b8e:	3728      	adds	r7, #40	; 0x28
 8021b90:	46bd      	mov	sp, r7
 8021b92:	bd80      	pop	{r7, pc}
 8021b94:	40015000 	.word	0x40015000
 8021b98:	40023800 	.word	0x40023800
 8021b9c:	40021400 	.word	0x40021400

08021ba0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021ba0:	b580      	push	{r7, lr}
 8021ba2:	b082      	sub	sp, #8
 8021ba4:	af00      	add	r7, sp, #0
 8021ba6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021ba8:	687b      	ldr	r3, [r7, #4]
 8021baa:	681b      	ldr	r3, [r3, #0]
 8021bac:	4a08      	ldr	r2, [pc, #32]	; (8021bd0 <HAL_SPI_MspDeInit+0x30>)
 8021bae:	4293      	cmp	r3, r2
 8021bb0:	d10a      	bne.n	8021bc8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8021bb2:	4b08      	ldr	r3, [pc, #32]	; (8021bd4 <HAL_SPI_MspDeInit+0x34>)
 8021bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bb6:	4a07      	ldr	r2, [pc, #28]	; (8021bd4 <HAL_SPI_MspDeInit+0x34>)
 8021bb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021bbc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021bbe:	f44f 7160 	mov.w	r1, #896	; 0x380
 8021bc2:	4805      	ldr	r0, [pc, #20]	; (8021bd8 <HAL_SPI_MspDeInit+0x38>)
 8021bc4:	f003 f93c 	bl	8024e40 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021bc8:	bf00      	nop
 8021bca:	3708      	adds	r7, #8
 8021bcc:	46bd      	mov	sp, r7
 8021bce:	bd80      	pop	{r7, pc}
 8021bd0:	40015000 	.word	0x40015000
 8021bd4:	40023800 	.word	0x40023800
 8021bd8:	40021400 	.word	0x40021400

08021bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021bdc:	b480      	push	{r7}
 8021bde:	b085      	sub	sp, #20
 8021be0:	af00      	add	r7, sp, #0
 8021be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	681b      	ldr	r3, [r3, #0]
 8021be8:	4a0b      	ldr	r2, [pc, #44]	; (8021c18 <HAL_TIM_Base_MspInit+0x3c>)
 8021bea:	4293      	cmp	r3, r2
 8021bec:	d10d      	bne.n	8021c0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021bee:	2300      	movs	r3, #0
 8021bf0:	60fb      	str	r3, [r7, #12]
 8021bf2:	4b0a      	ldr	r3, [pc, #40]	; (8021c1c <HAL_TIM_Base_MspInit+0x40>)
 8021bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021bf6:	4a09      	ldr	r2, [pc, #36]	; (8021c1c <HAL_TIM_Base_MspInit+0x40>)
 8021bf8:	f043 0301 	orr.w	r3, r3, #1
 8021bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8021bfe:	4b07      	ldr	r3, [pc, #28]	; (8021c1c <HAL_TIM_Base_MspInit+0x40>)
 8021c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c02:	f003 0301 	and.w	r3, r3, #1
 8021c06:	60fb      	str	r3, [r7, #12]
 8021c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021c0a:	bf00      	nop
 8021c0c:	3714      	adds	r7, #20
 8021c0e:	46bd      	mov	sp, r7
 8021c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c14:	4770      	bx	lr
 8021c16:	bf00      	nop
 8021c18:	40010000 	.word	0x40010000
 8021c1c:	40023800 	.word	0x40023800

08021c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021c20:	b580      	push	{r7, lr}
 8021c22:	b08c      	sub	sp, #48	; 0x30
 8021c24:	af00      	add	r7, sp, #0
 8021c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021c28:	f107 031c 	add.w	r3, r7, #28
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	601a      	str	r2, [r3, #0]
 8021c30:	605a      	str	r2, [r3, #4]
 8021c32:	609a      	str	r2, [r3, #8]
 8021c34:	60da      	str	r2, [r3, #12]
 8021c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	681b      	ldr	r3, [r3, #0]
 8021c3c:	4a46      	ldr	r2, [pc, #280]	; (8021d58 <HAL_UART_MspInit+0x138>)
 8021c3e:	4293      	cmp	r3, r2
 8021c40:	d153      	bne.n	8021cea <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8021c42:	2300      	movs	r3, #0
 8021c44:	61bb      	str	r3, [r7, #24]
 8021c46:	4b45      	ldr	r3, [pc, #276]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c4a:	4a44      	ldr	r2, [pc, #272]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021c50:	6413      	str	r3, [r2, #64]	; 0x40
 8021c52:	4b42      	ldr	r3, [pc, #264]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021c5a:	61bb      	str	r3, [r7, #24]
 8021c5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021c5e:	2300      	movs	r3, #0
 8021c60:	617b      	str	r3, [r7, #20]
 8021c62:	4b3e      	ldr	r3, [pc, #248]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c66:	4a3d      	ldr	r2, [pc, #244]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c68:	f043 0304 	orr.w	r3, r3, #4
 8021c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8021c6e:	4b3b      	ldr	r3, [pc, #236]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c72:	f003 0304 	and.w	r3, r3, #4
 8021c76:	617b      	str	r3, [r7, #20]
 8021c78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021c7a:	2300      	movs	r3, #0
 8021c7c:	613b      	str	r3, [r7, #16]
 8021c7e:	4b37      	ldr	r3, [pc, #220]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c82:	4a36      	ldr	r2, [pc, #216]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c84:	f043 0308 	orr.w	r3, r3, #8
 8021c88:	6313      	str	r3, [r2, #48]	; 0x30
 8021c8a:	4b34      	ldr	r3, [pc, #208]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c8e:	f003 0308 	and.w	r3, r3, #8
 8021c92:	613b      	str	r3, [r7, #16]
 8021c94:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c9c:	2302      	movs	r3, #2
 8021c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ca0:	2300      	movs	r3, #0
 8021ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021ca4:	2303      	movs	r3, #3
 8021ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021ca8:	2308      	movs	r3, #8
 8021caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021cac:	f107 031c 	add.w	r3, r7, #28
 8021cb0:	4619      	mov	r1, r3
 8021cb2:	482b      	ldr	r0, [pc, #172]	; (8021d60 <HAL_UART_MspInit+0x140>)
 8021cb4:	f002 ff18 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021cb8:	2304      	movs	r3, #4
 8021cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021cbc:	2302      	movs	r3, #2
 8021cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cc0:	2300      	movs	r3, #0
 8021cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cc4:	2303      	movs	r3, #3
 8021cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021cc8:	2308      	movs	r3, #8
 8021cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021ccc:	f107 031c 	add.w	r3, r7, #28
 8021cd0:	4619      	mov	r1, r3
 8021cd2:	4824      	ldr	r0, [pc, #144]	; (8021d64 <HAL_UART_MspInit+0x144>)
 8021cd4:	f002 ff08 	bl	8024ae8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021cd8:	2200      	movs	r2, #0
 8021cda:	2100      	movs	r1, #0
 8021cdc:	2035      	movs	r0, #53	; 0x35
 8021cde:	f001 fdc6 	bl	802386e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8021ce2:	2035      	movs	r0, #53	; 0x35
 8021ce4:	f001 fddf 	bl	80238a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021ce8:	e031      	b.n	8021d4e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	4a1e      	ldr	r2, [pc, #120]	; (8021d68 <HAL_UART_MspInit+0x148>)
 8021cf0:	4293      	cmp	r3, r2
 8021cf2:	d12c      	bne.n	8021d4e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021cf4:	2300      	movs	r3, #0
 8021cf6:	60fb      	str	r3, [r7, #12]
 8021cf8:	4b18      	ldr	r3, [pc, #96]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cfc:	4a17      	ldr	r2, [pc, #92]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021cfe:	f043 0310 	orr.w	r3, r3, #16
 8021d02:	6453      	str	r3, [r2, #68]	; 0x44
 8021d04:	4b15      	ldr	r3, [pc, #84]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d08:	f003 0310 	and.w	r3, r3, #16
 8021d0c:	60fb      	str	r3, [r7, #12]
 8021d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021d10:	2300      	movs	r3, #0
 8021d12:	60bb      	str	r3, [r7, #8]
 8021d14:	4b11      	ldr	r3, [pc, #68]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d18:	4a10      	ldr	r2, [pc, #64]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021d1a:	f043 0301 	orr.w	r3, r3, #1
 8021d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8021d20:	4b0e      	ldr	r3, [pc, #56]	; (8021d5c <HAL_UART_MspInit+0x13c>)
 8021d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d24:	f003 0301 	and.w	r3, r3, #1
 8021d28:	60bb      	str	r3, [r7, #8]
 8021d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021d2c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d32:	2302      	movs	r3, #2
 8021d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d36:	2300      	movs	r3, #0
 8021d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d3a:	2303      	movs	r3, #3
 8021d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021d3e:	2307      	movs	r3, #7
 8021d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021d42:	f107 031c 	add.w	r3, r7, #28
 8021d46:	4619      	mov	r1, r3
 8021d48:	4808      	ldr	r0, [pc, #32]	; (8021d6c <HAL_UART_MspInit+0x14c>)
 8021d4a:	f002 fecd 	bl	8024ae8 <HAL_GPIO_Init>
}
 8021d4e:	bf00      	nop
 8021d50:	3730      	adds	r7, #48	; 0x30
 8021d52:	46bd      	mov	sp, r7
 8021d54:	bd80      	pop	{r7, pc}
 8021d56:	bf00      	nop
 8021d58:	40005000 	.word	0x40005000
 8021d5c:	40023800 	.word	0x40023800
 8021d60:	40020800 	.word	0x40020800
 8021d64:	40020c00 	.word	0x40020c00
 8021d68:	40011000 	.word	0x40011000
 8021d6c:	40020000 	.word	0x40020000

08021d70 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021d70:	b580      	push	{r7, lr}
 8021d72:	b086      	sub	sp, #24
 8021d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021d76:	1d3b      	adds	r3, r7, #4
 8021d78:	2200      	movs	r2, #0
 8021d7a:	601a      	str	r2, [r3, #0]
 8021d7c:	605a      	str	r2, [r3, #4]
 8021d7e:	609a      	str	r2, [r3, #8]
 8021d80:	60da      	str	r2, [r3, #12]
 8021d82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021d84:	4b3b      	ldr	r3, [pc, #236]	; (8021e74 <HAL_FMC_MspInit+0x104>)
 8021d86:	681b      	ldr	r3, [r3, #0]
 8021d88:	2b00      	cmp	r3, #0
 8021d8a:	d16f      	bne.n	8021e6c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021d8c:	4b39      	ldr	r3, [pc, #228]	; (8021e74 <HAL_FMC_MspInit+0x104>)
 8021d8e:	2201      	movs	r2, #1
 8021d90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021d92:	2300      	movs	r3, #0
 8021d94:	603b      	str	r3, [r7, #0]
 8021d96:	4b38      	ldr	r3, [pc, #224]	; (8021e78 <HAL_FMC_MspInit+0x108>)
 8021d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d9a:	4a37      	ldr	r2, [pc, #220]	; (8021e78 <HAL_FMC_MspInit+0x108>)
 8021d9c:	f043 0301 	orr.w	r3, r3, #1
 8021da0:	6393      	str	r3, [r2, #56]	; 0x38
 8021da2:	4b35      	ldr	r3, [pc, #212]	; (8021e78 <HAL_FMC_MspInit+0x108>)
 8021da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021da6:	f003 0301 	and.w	r3, r3, #1
 8021daa:	603b      	str	r3, [r7, #0]
 8021dac:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021dae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021db2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021db4:	2302      	movs	r3, #2
 8021db6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021db8:	2300      	movs	r3, #0
 8021dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dbc:	2303      	movs	r3, #3
 8021dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dc0:	230c      	movs	r3, #12
 8021dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021dc4:	1d3b      	adds	r3, r7, #4
 8021dc6:	4619      	mov	r1, r3
 8021dc8:	482c      	ldr	r0, [pc, #176]	; (8021e7c <HAL_FMC_MspInit+0x10c>)
 8021dca:	f002 fe8d 	bl	8024ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021dce:	2301      	movs	r3, #1
 8021dd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dd2:	2302      	movs	r3, #2
 8021dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021dd6:	2300      	movs	r3, #0
 8021dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dda:	2303      	movs	r3, #3
 8021ddc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dde:	230c      	movs	r3, #12
 8021de0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021de2:	1d3b      	adds	r3, r7, #4
 8021de4:	4619      	mov	r1, r3
 8021de6:	4826      	ldr	r0, [pc, #152]	; (8021e80 <HAL_FMC_MspInit+0x110>)
 8021de8:	f002 fe7e 	bl	8024ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021dec:	f248 1333 	movw	r3, #33075	; 0x8133
 8021df0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021df2:	2302      	movs	r3, #2
 8021df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df6:	2300      	movs	r3, #0
 8021df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021dfa:	2303      	movs	r3, #3
 8021dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021dfe:	230c      	movs	r3, #12
 8021e00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021e02:	1d3b      	adds	r3, r7, #4
 8021e04:	4619      	mov	r1, r3
 8021e06:	481f      	ldr	r0, [pc, #124]	; (8021e84 <HAL_FMC_MspInit+0x114>)
 8021e08:	f002 fe6e 	bl	8024ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021e0c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021e10:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e12:	2302      	movs	r3, #2
 8021e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e16:	2300      	movs	r3, #0
 8021e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e1a:	2303      	movs	r3, #3
 8021e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e1e:	230c      	movs	r3, #12
 8021e20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021e22:	1d3b      	adds	r3, r7, #4
 8021e24:	4619      	mov	r1, r3
 8021e26:	4818      	ldr	r0, [pc, #96]	; (8021e88 <HAL_FMC_MspInit+0x118>)
 8021e28:	f002 fe5e 	bl	8024ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021e2c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021e30:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e32:	2302      	movs	r3, #2
 8021e34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e36:	2300      	movs	r3, #0
 8021e38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e3a:	2303      	movs	r3, #3
 8021e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e3e:	230c      	movs	r3, #12
 8021e40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021e42:	1d3b      	adds	r3, r7, #4
 8021e44:	4619      	mov	r1, r3
 8021e46:	4811      	ldr	r0, [pc, #68]	; (8021e8c <HAL_FMC_MspInit+0x11c>)
 8021e48:	f002 fe4e 	bl	8024ae8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021e4c:	2360      	movs	r3, #96	; 0x60
 8021e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e50:	2302      	movs	r3, #2
 8021e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e54:	2300      	movs	r3, #0
 8021e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021e58:	2303      	movs	r3, #3
 8021e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021e5c:	230c      	movs	r3, #12
 8021e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e60:	1d3b      	adds	r3, r7, #4
 8021e62:	4619      	mov	r1, r3
 8021e64:	480a      	ldr	r0, [pc, #40]	; (8021e90 <HAL_FMC_MspInit+0x120>)
 8021e66:	f002 fe3f 	bl	8024ae8 <HAL_GPIO_Init>
 8021e6a:	e000      	b.n	8021e6e <HAL_FMC_MspInit+0xfe>
    return;
 8021e6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021e6e:	3718      	adds	r7, #24
 8021e70:	46bd      	mov	sp, r7
 8021e72:	bd80      	pop	{r7, pc}
 8021e74:	20000854 	.word	0x20000854
 8021e78:	40023800 	.word	0x40023800
 8021e7c:	40021400 	.word	0x40021400
 8021e80:	40020800 	.word	0x40020800
 8021e84:	40021800 	.word	0x40021800
 8021e88:	40021000 	.word	0x40021000
 8021e8c:	40020c00 	.word	0x40020c00
 8021e90:	40020400 	.word	0x40020400

08021e94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021e94:	b580      	push	{r7, lr}
 8021e96:	b082      	sub	sp, #8
 8021e98:	af00      	add	r7, sp, #0
 8021e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021e9c:	f7ff ff68 	bl	8021d70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021ea0:	bf00      	nop
 8021ea2:	3708      	adds	r7, #8
 8021ea4:	46bd      	mov	sp, r7
 8021ea6:	bd80      	pop	{r7, pc}

08021ea8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	b08e      	sub	sp, #56	; 0x38
 8021eac:	af00      	add	r7, sp, #0
 8021eae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021eb8:	2300      	movs	r3, #0
 8021eba:	60fb      	str	r3, [r7, #12]
 8021ebc:	4b33      	ldr	r3, [pc, #204]	; (8021f8c <HAL_InitTick+0xe4>)
 8021ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ec0:	4a32      	ldr	r2, [pc, #200]	; (8021f8c <HAL_InitTick+0xe4>)
 8021ec2:	f043 0310 	orr.w	r3, r3, #16
 8021ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8021ec8:	4b30      	ldr	r3, [pc, #192]	; (8021f8c <HAL_InitTick+0xe4>)
 8021eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ecc:	f003 0310 	and.w	r3, r3, #16
 8021ed0:	60fb      	str	r3, [r7, #12]
 8021ed2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021ed4:	f107 0210 	add.w	r2, r7, #16
 8021ed8:	f107 0314 	add.w	r3, r7, #20
 8021edc:	4611      	mov	r1, r2
 8021ede:	4618      	mov	r0, r3
 8021ee0:	f005 ff5e 	bl	8027da0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021ee4:	6a3b      	ldr	r3, [r7, #32]
 8021ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d103      	bne.n	8021ef6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021eee:	f005 ff2f 	bl	8027d50 <HAL_RCC_GetPCLK1Freq>
 8021ef2:	6378      	str	r0, [r7, #52]	; 0x34
 8021ef4:	e004      	b.n	8021f00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021ef6:	f005 ff2b 	bl	8027d50 <HAL_RCC_GetPCLK1Freq>
 8021efa:	4603      	mov	r3, r0
 8021efc:	005b      	lsls	r3, r3, #1
 8021efe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f02:	4a23      	ldr	r2, [pc, #140]	; (8021f90 <HAL_InitTick+0xe8>)
 8021f04:	fba2 2303 	umull	r2, r3, r2, r3
 8021f08:	0c9b      	lsrs	r3, r3, #18
 8021f0a:	3b01      	subs	r3, #1
 8021f0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021f0e:	4b21      	ldr	r3, [pc, #132]	; (8021f94 <HAL_InitTick+0xec>)
 8021f10:	4a21      	ldr	r2, [pc, #132]	; (8021f98 <HAL_InitTick+0xf0>)
 8021f12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021f14:	4b1f      	ldr	r3, [pc, #124]	; (8021f94 <HAL_InitTick+0xec>)
 8021f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021f1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021f1c:	4a1d      	ldr	r2, [pc, #116]	; (8021f94 <HAL_InitTick+0xec>)
 8021f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021f22:	4b1c      	ldr	r3, [pc, #112]	; (8021f94 <HAL_InitTick+0xec>)
 8021f24:	2200      	movs	r2, #0
 8021f26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f28:	4b1a      	ldr	r3, [pc, #104]	; (8021f94 <HAL_InitTick+0xec>)
 8021f2a:	2200      	movs	r2, #0
 8021f2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f2e:	4b19      	ldr	r3, [pc, #100]	; (8021f94 <HAL_InitTick+0xec>)
 8021f30:	2200      	movs	r2, #0
 8021f32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021f34:	4817      	ldr	r0, [pc, #92]	; (8021f94 <HAL_InitTick+0xec>)
 8021f36:	f006 ff95 	bl	8028e64 <HAL_TIM_Base_Init>
 8021f3a:	4603      	mov	r3, r0
 8021f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f44:	2b00      	cmp	r3, #0
 8021f46:	d11b      	bne.n	8021f80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021f48:	4812      	ldr	r0, [pc, #72]	; (8021f94 <HAL_InitTick+0xec>)
 8021f4a:	f006 ffdb 	bl	8028f04 <HAL_TIM_Base_Start_IT>
 8021f4e:	4603      	mov	r3, r0
 8021f50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021f54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d111      	bne.n	8021f80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021f5c:	2036      	movs	r0, #54	; 0x36
 8021f5e:	f001 fca2 	bl	80238a6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021f62:	687b      	ldr	r3, [r7, #4]
 8021f64:	2b0f      	cmp	r3, #15
 8021f66:	d808      	bhi.n	8021f7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021f68:	2200      	movs	r2, #0
 8021f6a:	6879      	ldr	r1, [r7, #4]
 8021f6c:	2036      	movs	r0, #54	; 0x36
 8021f6e:	f001 fc7e 	bl	802386e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021f72:	4a0a      	ldr	r2, [pc, #40]	; (8021f9c <HAL_InitTick+0xf4>)
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	6013      	str	r3, [r2, #0]
 8021f78:	e002      	b.n	8021f80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021f7a:	2301      	movs	r3, #1
 8021f7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021f80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021f84:	4618      	mov	r0, r3
 8021f86:	3738      	adds	r7, #56	; 0x38
 8021f88:	46bd      	mov	sp, r7
 8021f8a:	bd80      	pop	{r7, pc}
 8021f8c:	40023800 	.word	0x40023800
 8021f90:	431bde83 	.word	0x431bde83
 8021f94:	20000858 	.word	0x20000858
 8021f98:	40001000 	.word	0x40001000
 8021f9c:	20000058 	.word	0x20000058

08021fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fa0:	b480      	push	{r7}
 8021fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fa4:	e7fe      	b.n	8021fa4 <NMI_Handler+0x4>

08021fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fa6:	b480      	push	{r7}
 8021fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021faa:	e7fe      	b.n	8021faa <HardFault_Handler+0x4>

08021fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fac:	b480      	push	{r7}
 8021fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fb0:	e7fe      	b.n	8021fb0 <MemManage_Handler+0x4>

08021fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fb2:	b480      	push	{r7}
 8021fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fb6:	e7fe      	b.n	8021fb6 <BusFault_Handler+0x4>

08021fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fb8:	b480      	push	{r7}
 8021fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fbc:	e7fe      	b.n	8021fbc <UsageFault_Handler+0x4>

08021fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fbe:	b480      	push	{r7}
 8021fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021fc2:	bf00      	nop
 8021fc4:	46bd      	mov	sp, r7
 8021fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fca:	4770      	bx	lr

08021fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fcc:	b480      	push	{r7}
 8021fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fd0:	bf00      	nop
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fd8:	4770      	bx	lr

08021fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021fda:	b480      	push	{r7}
 8021fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021fde:	bf00      	nop
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe6:	4770      	bx	lr

08021fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021fe8:	b480      	push	{r7}
 8021fea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021fec:	bf00      	nop
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff4:	4770      	bx	lr

08021ff6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021ff6:	b580      	push	{r7, lr}
 8021ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021ffa:	2001      	movs	r0, #1
 8021ffc:	f003 f846 	bl	802508c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8022000:	bf00      	nop
 8022002:	bd80      	pop	{r7, pc}

08022004 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8022004:	b580      	push	{r7, lr}
 8022006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8022008:	4802      	ldr	r0, [pc, #8]	; (8022014 <UART5_IRQHandler+0x10>)
 802200a:	f007 fcbd 	bl	8029988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 802200e:	bf00      	nop
 8022010:	bd80      	pop	{r7, pc}
 8022012:	bf00      	nop
 8022014:	200002e4 	.word	0x200002e4

08022018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 802201c:	4802      	ldr	r0, [pc, #8]	; (8022028 <TIM6_DAC_IRQHandler+0x10>)
 802201e:	f006 ffe1 	bl	8028fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022022:	bf00      	nop
 8022024:	bd80      	pop	{r7, pc}
 8022026:	bf00      	nop
 8022028:	20000858 	.word	0x20000858

0802202c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 802202c:	b580      	push	{r7, lr}
 802202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8022030:	4802      	ldr	r0, [pc, #8]	; (802203c <OTG_HS_IRQHandler+0x10>)
 8022032:	f003 faad 	bl	8025590 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8022036:	bf00      	nop
 8022038:	bd80      	pop	{r7, pc}
 802203a:	bf00      	nop
 802203c:	20000ef8 	.word	0x20000ef8

08022040 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8022040:	b580      	push	{r7, lr}
 8022042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8022044:	4802      	ldr	r0, [pc, #8]	; (8022050 <LTDC_IRQHandler+0x10>)
 8022046:	f004 fed3 	bl	8026df0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 802204a:	bf00      	nop
 802204c:	bd80      	pop	{r7, pc}
 802204e:	bf00      	nop
 8022050:	2000019c 	.word	0x2000019c

08022054 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8022058:	4802      	ldr	r0, [pc, #8]	; (8022064 <DMA2D_IRQHandler+0x10>)
 802205a:	f002 f800 	bl	802405e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 802205e:	bf00      	nop
 8022060:	bd80      	pop	{r7, pc}
 8022062:	bf00      	nop
 8022064:	20000108 	.word	0x20000108

08022068 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8022068:	b480      	push	{r7}
 802206a:	b083      	sub	sp, #12
 802206c:	af00      	add	r7, sp, #0
 802206e:	4603      	mov	r3, r0
 8022070:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8022072:	bf00      	nop
 8022074:	370c      	adds	r7, #12
 8022076:	46bd      	mov	sp, r7
 8022078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802207c:	4770      	bx	lr

0802207e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 802207e:	b580      	push	{r7, lr}
 8022080:	b086      	sub	sp, #24
 8022082:	af00      	add	r7, sp, #0
 8022084:	60f8      	str	r0, [r7, #12]
 8022086:	60b9      	str	r1, [r7, #8]
 8022088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802208a:	2300      	movs	r3, #0
 802208c:	617b      	str	r3, [r7, #20]
 802208e:	e00a      	b.n	80220a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8022090:	f3af 8000 	nop.w
 8022094:	4601      	mov	r1, r0
 8022096:	68bb      	ldr	r3, [r7, #8]
 8022098:	1c5a      	adds	r2, r3, #1
 802209a:	60ba      	str	r2, [r7, #8]
 802209c:	b2ca      	uxtb	r2, r1
 802209e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220a0:	697b      	ldr	r3, [r7, #20]
 80220a2:	3301      	adds	r3, #1
 80220a4:	617b      	str	r3, [r7, #20]
 80220a6:	697a      	ldr	r2, [r7, #20]
 80220a8:	687b      	ldr	r3, [r7, #4]
 80220aa:	429a      	cmp	r2, r3
 80220ac:	dbf0      	blt.n	8022090 <_read+0x12>
  }

  return len;
 80220ae:	687b      	ldr	r3, [r7, #4]
}
 80220b0:	4618      	mov	r0, r3
 80220b2:	3718      	adds	r7, #24
 80220b4:	46bd      	mov	sp, r7
 80220b6:	bd80      	pop	{r7, pc}

080220b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b086      	sub	sp, #24
 80220bc:	af00      	add	r7, sp, #0
 80220be:	60f8      	str	r0, [r7, #12]
 80220c0:	60b9      	str	r1, [r7, #8]
 80220c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220c4:	2300      	movs	r3, #0
 80220c6:	617b      	str	r3, [r7, #20]
 80220c8:	e009      	b.n	80220de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80220ca:	68bb      	ldr	r3, [r7, #8]
 80220cc:	1c5a      	adds	r2, r3, #1
 80220ce:	60ba      	str	r2, [r7, #8]
 80220d0:	781b      	ldrb	r3, [r3, #0]
 80220d2:	4618      	mov	r0, r3
 80220d4:	f7fe fec4 	bl	8020e60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80220d8:	697b      	ldr	r3, [r7, #20]
 80220da:	3301      	adds	r3, #1
 80220dc:	617b      	str	r3, [r7, #20]
 80220de:	697a      	ldr	r2, [r7, #20]
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	429a      	cmp	r2, r3
 80220e4:	dbf1      	blt.n	80220ca <_write+0x12>
  }
  return len;
 80220e6:	687b      	ldr	r3, [r7, #4]
}
 80220e8:	4618      	mov	r0, r3
 80220ea:	3718      	adds	r7, #24
 80220ec:	46bd      	mov	sp, r7
 80220ee:	bd80      	pop	{r7, pc}

080220f0 <_close>:

int _close(int file)
{
 80220f0:	b480      	push	{r7}
 80220f2:	b083      	sub	sp, #12
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80220f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80220fc:	4618      	mov	r0, r3
 80220fe:	370c      	adds	r7, #12
 8022100:	46bd      	mov	sp, r7
 8022102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022106:	4770      	bx	lr

08022108 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8022108:	b480      	push	{r7}
 802210a:	b083      	sub	sp, #12
 802210c:	af00      	add	r7, sp, #0
 802210e:	6078      	str	r0, [r7, #4]
 8022110:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8022112:	683b      	ldr	r3, [r7, #0]
 8022114:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8022118:	605a      	str	r2, [r3, #4]
  return 0;
 802211a:	2300      	movs	r3, #0
}
 802211c:	4618      	mov	r0, r3
 802211e:	370c      	adds	r7, #12
 8022120:	46bd      	mov	sp, r7
 8022122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022126:	4770      	bx	lr

08022128 <_isatty>:

int _isatty(int file)
{
 8022128:	b480      	push	{r7}
 802212a:	b083      	sub	sp, #12
 802212c:	af00      	add	r7, sp, #0
 802212e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8022130:	2301      	movs	r3, #1
}
 8022132:	4618      	mov	r0, r3
 8022134:	370c      	adds	r7, #12
 8022136:	46bd      	mov	sp, r7
 8022138:	f85d 7b04 	ldr.w	r7, [sp], #4
 802213c:	4770      	bx	lr

0802213e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 802213e:	b480      	push	{r7}
 8022140:	b085      	sub	sp, #20
 8022142:	af00      	add	r7, sp, #0
 8022144:	60f8      	str	r0, [r7, #12]
 8022146:	60b9      	str	r1, [r7, #8]
 8022148:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802214a:	2300      	movs	r3, #0
}
 802214c:	4618      	mov	r0, r3
 802214e:	3714      	adds	r7, #20
 8022150:	46bd      	mov	sp, r7
 8022152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022156:	4770      	bx	lr

08022158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b086      	sub	sp, #24
 802215c:	af00      	add	r7, sp, #0
 802215e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022160:	4a14      	ldr	r2, [pc, #80]	; (80221b4 <_sbrk+0x5c>)
 8022162:	4b15      	ldr	r3, [pc, #84]	; (80221b8 <_sbrk+0x60>)
 8022164:	1ad3      	subs	r3, r2, r3
 8022166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022168:	697b      	ldr	r3, [r7, #20]
 802216a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 802216c:	4b13      	ldr	r3, [pc, #76]	; (80221bc <_sbrk+0x64>)
 802216e:	681b      	ldr	r3, [r3, #0]
 8022170:	2b00      	cmp	r3, #0
 8022172:	d102      	bne.n	802217a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022174:	4b11      	ldr	r3, [pc, #68]	; (80221bc <_sbrk+0x64>)
 8022176:	4a12      	ldr	r2, [pc, #72]	; (80221c0 <_sbrk+0x68>)
 8022178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802217a:	4b10      	ldr	r3, [pc, #64]	; (80221bc <_sbrk+0x64>)
 802217c:	681a      	ldr	r2, [r3, #0]
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	4413      	add	r3, r2
 8022182:	693a      	ldr	r2, [r7, #16]
 8022184:	429a      	cmp	r2, r3
 8022186:	d207      	bcs.n	8022198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022188:	f00b ff62 	bl	802e050 <__errno>
 802218c:	4603      	mov	r3, r0
 802218e:	220c      	movs	r2, #12
 8022190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8022192:	f04f 33ff 	mov.w	r3, #4294967295
 8022196:	e009      	b.n	80221ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022198:	4b08      	ldr	r3, [pc, #32]	; (80221bc <_sbrk+0x64>)
 802219a:	681b      	ldr	r3, [r3, #0]
 802219c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802219e:	4b07      	ldr	r3, [pc, #28]	; (80221bc <_sbrk+0x64>)
 80221a0:	681a      	ldr	r2, [r3, #0]
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	4413      	add	r3, r2
 80221a6:	4a05      	ldr	r2, [pc, #20]	; (80221bc <_sbrk+0x64>)
 80221a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80221aa:	68fb      	ldr	r3, [r7, #12]
}
 80221ac:	4618      	mov	r0, r3
 80221ae:	3718      	adds	r7, #24
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	20030000 	.word	0x20030000
 80221b8:	00000400 	.word	0x00000400
 80221bc:	200008a0 	.word	0x200008a0
 80221c0:	20001210 	.word	0x20001210

080221c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80221c4:	b480      	push	{r7}
 80221c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80221c8:	4b07      	ldr	r3, [pc, #28]	; (80221e8 <SystemInit+0x24>)
 80221ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80221ce:	4a06      	ldr	r2, [pc, #24]	; (80221e8 <SystemInit+0x24>)
 80221d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80221d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80221d8:	4b03      	ldr	r3, [pc, #12]	; (80221e8 <SystemInit+0x24>)
 80221da:	4a04      	ldr	r2, [pc, #16]	; (80221ec <SystemInit+0x28>)
 80221dc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80221de:	bf00      	nop
 80221e0:	46bd      	mov	sp, r7
 80221e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221e6:	4770      	bx	lr
 80221e8:	e000ed00 	.word	0xe000ed00
 80221ec:	08020000 	.word	0x08020000

080221f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80221f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022228 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80221f4:	480d      	ldr	r0, [pc, #52]	; (802222c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80221f6:	490e      	ldr	r1, [pc, #56]	; (8022230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80221f8:	4a0e      	ldr	r2, [pc, #56]	; (8022234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80221fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80221fc:	e002      	b.n	8022204 <LoopCopyDataInit>

080221fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80221fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8022200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8022202:	3304      	adds	r3, #4

08022204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8022206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8022208:	d3f9      	bcc.n	80221fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802220a:	4a0b      	ldr	r2, [pc, #44]	; (8022238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 802220c:	4c0b      	ldr	r4, [pc, #44]	; (802223c <LoopFillZerobss+0x26>)
  movs r3, #0
 802220e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8022210:	e001      	b.n	8022216 <LoopFillZerobss>

08022212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8022212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022214:	3204      	adds	r2, #4

08022216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8022216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8022218:	d3fb      	bcc.n	8022212 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802221a:	f7ff ffd3 	bl	80221c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802221e:	f00b ff1d 	bl	802e05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022222:	f7fe f9b7 	bl	8020594 <main>
  bx  lr    
 8022226:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8022228:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 802222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022230:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8022234:	08031ae0 	.word	0x08031ae0
  ldr r2, =_sbss
 8022238:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 802223c:	2000120c 	.word	0x2000120c

08022240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022240:	e7fe      	b.n	8022240 <ADC_IRQHandler>

08022242 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8022242:	b580      	push	{r7, lr}
 8022244:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8022246:	f000 fa5d 	bl	8022704 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 802224a:	20ca      	movs	r0, #202	; 0xca
 802224c:	f000 f95d 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8022250:	20c3      	movs	r0, #195	; 0xc3
 8022252:	f000 f967 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8022256:	2008      	movs	r0, #8
 8022258:	f000 f964 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 802225c:	2050      	movs	r0, #80	; 0x50
 802225e:	f000 f961 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8022262:	20cf      	movs	r0, #207	; 0xcf
 8022264:	f000 f951 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022268:	2000      	movs	r0, #0
 802226a:	f000 f95b 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 802226e:	20c1      	movs	r0, #193	; 0xc1
 8022270:	f000 f958 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8022274:	2030      	movs	r0, #48	; 0x30
 8022276:	f000 f955 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 802227a:	20ed      	movs	r0, #237	; 0xed
 802227c:	f000 f945 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8022280:	2064      	movs	r0, #100	; 0x64
 8022282:	f000 f94f 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8022286:	2003      	movs	r0, #3
 8022288:	f000 f94c 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 802228c:	2012      	movs	r0, #18
 802228e:	f000 f949 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8022292:	2081      	movs	r0, #129	; 0x81
 8022294:	f000 f946 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8022298:	20e8      	movs	r0, #232	; 0xe8
 802229a:	f000 f936 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 802229e:	2085      	movs	r0, #133	; 0x85
 80222a0:	f000 f940 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222a4:	2000      	movs	r0, #0
 80222a6:	f000 f93d 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80222aa:	2078      	movs	r0, #120	; 0x78
 80222ac:	f000 f93a 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80222b0:	20cb      	movs	r0, #203	; 0xcb
 80222b2:	f000 f92a 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80222b6:	2039      	movs	r0, #57	; 0x39
 80222b8:	f000 f934 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80222bc:	202c      	movs	r0, #44	; 0x2c
 80222be:	f000 f931 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222c2:	2000      	movs	r0, #0
 80222c4:	f000 f92e 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80222c8:	2034      	movs	r0, #52	; 0x34
 80222ca:	f000 f92b 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80222ce:	2002      	movs	r0, #2
 80222d0:	f000 f928 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80222d4:	20f7      	movs	r0, #247	; 0xf7
 80222d6:	f000 f918 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80222da:	2020      	movs	r0, #32
 80222dc:	f000 f922 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80222e0:	20ea      	movs	r0, #234	; 0xea
 80222e2:	f000 f912 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222e6:	2000      	movs	r0, #0
 80222e8:	f000 f91c 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222ec:	2000      	movs	r0, #0
 80222ee:	f000 f919 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80222f2:	20b1      	movs	r0, #177	; 0xb1
 80222f4:	f000 f909 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222f8:	2000      	movs	r0, #0
 80222fa:	f000 f913 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80222fe:	201b      	movs	r0, #27
 8022300:	f000 f910 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022304:	20b6      	movs	r0, #182	; 0xb6
 8022306:	f000 f900 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 802230a:	200a      	movs	r0, #10
 802230c:	f000 f90a 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8022310:	20a2      	movs	r0, #162	; 0xa2
 8022312:	f000 f907 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8022316:	20c0      	movs	r0, #192	; 0xc0
 8022318:	f000 f8f7 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 802231c:	2010      	movs	r0, #16
 802231e:	f000 f901 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8022322:	20c1      	movs	r0, #193	; 0xc1
 8022324:	f000 f8f1 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022328:	2010      	movs	r0, #16
 802232a:	f000 f8fb 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 802232e:	20c5      	movs	r0, #197	; 0xc5
 8022330:	f000 f8eb 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8022334:	2045      	movs	r0, #69	; 0x45
 8022336:	f000 f8f5 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 802233a:	2015      	movs	r0, #21
 802233c:	f000 f8f2 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8022340:	20c7      	movs	r0, #199	; 0xc7
 8022342:	f000 f8e2 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8022346:	2090      	movs	r0, #144	; 0x90
 8022348:	f000 f8ec 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 802234c:	2036      	movs	r0, #54	; 0x36
 802234e:	f000 f8dc 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8022352:	20c8      	movs	r0, #200	; 0xc8
 8022354:	f000 f8e6 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8022358:	20f2      	movs	r0, #242	; 0xf2
 802235a:	f000 f8d6 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802235e:	2000      	movs	r0, #0
 8022360:	f000 f8e0 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8022364:	20b0      	movs	r0, #176	; 0xb0
 8022366:	f000 f8d0 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 802236a:	20c2      	movs	r0, #194	; 0xc2
 802236c:	f000 f8da 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022370:	20b6      	movs	r0, #182	; 0xb6
 8022372:	f000 f8ca 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8022376:	200a      	movs	r0, #10
 8022378:	f000 f8d4 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 802237c:	20a7      	movs	r0, #167	; 0xa7
 802237e:	f000 f8d1 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8022382:	2027      	movs	r0, #39	; 0x27
 8022384:	f000 f8ce 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8022388:	2004      	movs	r0, #4
 802238a:	f000 f8cb 	bl	8022524 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 802238e:	202a      	movs	r0, #42	; 0x2a
 8022390:	f000 f8bb 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022394:	2000      	movs	r0, #0
 8022396:	f000 f8c5 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802239a:	2000      	movs	r0, #0
 802239c:	f000 f8c2 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223a0:	2000      	movs	r0, #0
 80223a2:	f000 f8bf 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80223a6:	20ef      	movs	r0, #239	; 0xef
 80223a8:	f000 f8bc 	bl	8022524 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80223ac:	202b      	movs	r0, #43	; 0x2b
 80223ae:	f000 f8ac 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80223b2:	2000      	movs	r0, #0
 80223b4:	f000 f8b6 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223b8:	2000      	movs	r0, #0
 80223ba:	f000 f8b3 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80223be:	2001      	movs	r0, #1
 80223c0:	f000 f8b0 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80223c4:	203f      	movs	r0, #63	; 0x3f
 80223c6:	f000 f8ad 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80223ca:	20f6      	movs	r0, #246	; 0xf6
 80223cc:	f000 f89d 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223d0:	2001      	movs	r0, #1
 80223d2:	f000 f8a7 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80223d6:	2000      	movs	r0, #0
 80223d8:	f000 f8a4 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80223dc:	2006      	movs	r0, #6
 80223de:	f000 f8a1 	bl	8022524 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80223e2:	202c      	movs	r0, #44	; 0x2c
 80223e4:	f000 f891 	bl	802250a <ili9341_WriteReg>
  LCD_Delay(200);
 80223e8:	20c8      	movs	r0, #200	; 0xc8
 80223ea:	f000 fa79 	bl	80228e0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80223ee:	2026      	movs	r0, #38	; 0x26
 80223f0:	f000 f88b 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80223f4:	2001      	movs	r0, #1
 80223f6:	f000 f895 	bl	8022524 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80223fa:	20e0      	movs	r0, #224	; 0xe0
 80223fc:	f000 f885 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8022400:	200f      	movs	r0, #15
 8022402:	f000 f88f 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8022406:	2029      	movs	r0, #41	; 0x29
 8022408:	f000 f88c 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 802240c:	2024      	movs	r0, #36	; 0x24
 802240e:	f000 f889 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8022412:	200c      	movs	r0, #12
 8022414:	f000 f886 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8022418:	200e      	movs	r0, #14
 802241a:	f000 f883 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 802241e:	2009      	movs	r0, #9
 8022420:	f000 f880 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8022424:	204e      	movs	r0, #78	; 0x4e
 8022426:	f000 f87d 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 802242a:	2078      	movs	r0, #120	; 0x78
 802242c:	f000 f87a 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8022430:	203c      	movs	r0, #60	; 0x3c
 8022432:	f000 f877 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8022436:	2009      	movs	r0, #9
 8022438:	f000 f874 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 802243c:	2013      	movs	r0, #19
 802243e:	f000 f871 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8022442:	2005      	movs	r0, #5
 8022444:	f000 f86e 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8022448:	2017      	movs	r0, #23
 802244a:	f000 f86b 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 802244e:	2011      	movs	r0, #17
 8022450:	f000 f868 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022454:	2000      	movs	r0, #0
 8022456:	f000 f865 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 802245a:	20e1      	movs	r0, #225	; 0xe1
 802245c:	f000 f855 	bl	802250a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022460:	2000      	movs	r0, #0
 8022462:	f000 f85f 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8022466:	2016      	movs	r0, #22
 8022468:	f000 f85c 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 802246c:	201b      	movs	r0, #27
 802246e:	f000 f859 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8022472:	2004      	movs	r0, #4
 8022474:	f000 f856 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022478:	2011      	movs	r0, #17
 802247a:	f000 f853 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 802247e:	2007      	movs	r0, #7
 8022480:	f000 f850 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8022484:	2031      	movs	r0, #49	; 0x31
 8022486:	f000 f84d 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 802248a:	2033      	movs	r0, #51	; 0x33
 802248c:	f000 f84a 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8022490:	2042      	movs	r0, #66	; 0x42
 8022492:	f000 f847 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8022496:	2005      	movs	r0, #5
 8022498:	f000 f844 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 802249c:	200c      	movs	r0, #12
 802249e:	f000 f841 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80224a2:	200a      	movs	r0, #10
 80224a4:	f000 f83e 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80224a8:	2028      	movs	r0, #40	; 0x28
 80224aa:	f000 f83b 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80224ae:	202f      	movs	r0, #47	; 0x2f
 80224b0:	f000 f838 	bl	8022524 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80224b4:	200f      	movs	r0, #15
 80224b6:	f000 f835 	bl	8022524 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80224ba:	2011      	movs	r0, #17
 80224bc:	f000 f825 	bl	802250a <ili9341_WriteReg>
  LCD_Delay(200);
 80224c0:	20c8      	movs	r0, #200	; 0xc8
 80224c2:	f000 fa0d 	bl	80228e0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224c6:	2029      	movs	r0, #41	; 0x29
 80224c8:	f000 f81f 	bl	802250a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80224cc:	202c      	movs	r0, #44	; 0x2c
 80224ce:	f000 f81c 	bl	802250a <ili9341_WriteReg>
}
 80224d2:	bf00      	nop
 80224d4:	bd80      	pop	{r7, pc}

080224d6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80224d6:	b580      	push	{r7, lr}
 80224d8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80224da:	f000 f913 	bl	8022704 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80224de:	2103      	movs	r1, #3
 80224e0:	20d3      	movs	r0, #211	; 0xd3
 80224e2:	f000 f82c 	bl	802253e <ili9341_ReadData>
 80224e6:	4603      	mov	r3, r0
 80224e8:	b29b      	uxth	r3, r3
}
 80224ea:	4618      	mov	r0, r3
 80224ec:	bd80      	pop	{r7, pc}

080224ee <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80224ee:	b580      	push	{r7, lr}
 80224f0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80224f2:	2029      	movs	r0, #41	; 0x29
 80224f4:	f000 f809 	bl	802250a <ili9341_WriteReg>
}
 80224f8:	bf00      	nop
 80224fa:	bd80      	pop	{r7, pc}

080224fc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8022500:	2028      	movs	r0, #40	; 0x28
 8022502:	f000 f802 	bl	802250a <ili9341_WriteReg>
}
 8022506:	bf00      	nop
 8022508:	bd80      	pop	{r7, pc}

0802250a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 802250a:	b580      	push	{r7, lr}
 802250c:	b082      	sub	sp, #8
 802250e:	af00      	add	r7, sp, #0
 8022510:	4603      	mov	r3, r0
 8022512:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8022514:	79fb      	ldrb	r3, [r7, #7]
 8022516:	4618      	mov	r0, r3
 8022518:	f000 f98e 	bl	8022838 <LCD_IO_WriteReg>
}
 802251c:	bf00      	nop
 802251e:	3708      	adds	r7, #8
 8022520:	46bd      	mov	sp, r7
 8022522:	bd80      	pop	{r7, pc}

08022524 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8022524:	b580      	push	{r7, lr}
 8022526:	b082      	sub	sp, #8
 8022528:	af00      	add	r7, sp, #0
 802252a:	4603      	mov	r3, r0
 802252c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 802252e:	88fb      	ldrh	r3, [r7, #6]
 8022530:	4618      	mov	r0, r3
 8022532:	f000 f95f 	bl	80227f4 <LCD_IO_WriteData>
}
 8022536:	bf00      	nop
 8022538:	3708      	adds	r7, #8
 802253a:	46bd      	mov	sp, r7
 802253c:	bd80      	pop	{r7, pc}

0802253e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 802253e:	b580      	push	{r7, lr}
 8022540:	b082      	sub	sp, #8
 8022542:	af00      	add	r7, sp, #0
 8022544:	4603      	mov	r3, r0
 8022546:	460a      	mov	r2, r1
 8022548:	80fb      	strh	r3, [r7, #6]
 802254a:	4613      	mov	r3, r2
 802254c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 802254e:	797a      	ldrb	r2, [r7, #5]
 8022550:	88fb      	ldrh	r3, [r7, #6]
 8022552:	4611      	mov	r1, r2
 8022554:	4618      	mov	r0, r3
 8022556:	f000 f991 	bl	802287c <LCD_IO_ReadData>
 802255a:	4603      	mov	r3, r0
}
 802255c:	4618      	mov	r0, r3
 802255e:	3708      	adds	r7, #8
 8022560:	46bd      	mov	sp, r7
 8022562:	bd80      	pop	{r7, pc}

08022564 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8022564:	b480      	push	{r7}
 8022566:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8022568:	23f0      	movs	r3, #240	; 0xf0
}
 802256a:	4618      	mov	r0, r3
 802256c:	46bd      	mov	sp, r7
 802256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022572:	4770      	bx	lr

08022574 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8022574:	b480      	push	{r7}
 8022576:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8022578:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 802257c:	4618      	mov	r0, r3
 802257e:	46bd      	mov	sp, r7
 8022580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022584:	4770      	bx	lr
	...

08022588 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8022588:	b580      	push	{r7, lr}
 802258a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 802258c:	4819      	ldr	r0, [pc, #100]	; (80225f4 <SPIx_Init+0x6c>)
 802258e:	f006 fb2a 	bl	8028be6 <HAL_SPI_GetState>
 8022592:	4603      	mov	r3, r0
 8022594:	2b00      	cmp	r3, #0
 8022596:	d12b      	bne.n	80225f0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8022598:	4b16      	ldr	r3, [pc, #88]	; (80225f4 <SPIx_Init+0x6c>)
 802259a:	4a17      	ldr	r2, [pc, #92]	; (80225f8 <SPIx_Init+0x70>)
 802259c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 802259e:	4b15      	ldr	r3, [pc, #84]	; (80225f4 <SPIx_Init+0x6c>)
 80225a0:	2218      	movs	r2, #24
 80225a2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80225a4:	4b13      	ldr	r3, [pc, #76]	; (80225f4 <SPIx_Init+0x6c>)
 80225a6:	2200      	movs	r2, #0
 80225a8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80225aa:	4b12      	ldr	r3, [pc, #72]	; (80225f4 <SPIx_Init+0x6c>)
 80225ac:	2200      	movs	r2, #0
 80225ae:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80225b0:	4b10      	ldr	r3, [pc, #64]	; (80225f4 <SPIx_Init+0x6c>)
 80225b2:	2200      	movs	r2, #0
 80225b4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80225b6:	4b0f      	ldr	r3, [pc, #60]	; (80225f4 <SPIx_Init+0x6c>)
 80225b8:	2200      	movs	r2, #0
 80225ba:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80225bc:	4b0d      	ldr	r3, [pc, #52]	; (80225f4 <SPIx_Init+0x6c>)
 80225be:	2207      	movs	r2, #7
 80225c0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80225c2:	4b0c      	ldr	r3, [pc, #48]	; (80225f4 <SPIx_Init+0x6c>)
 80225c4:	2200      	movs	r2, #0
 80225c6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80225c8:	4b0a      	ldr	r3, [pc, #40]	; (80225f4 <SPIx_Init+0x6c>)
 80225ca:	2200      	movs	r2, #0
 80225cc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80225ce:	4b09      	ldr	r3, [pc, #36]	; (80225f4 <SPIx_Init+0x6c>)
 80225d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80225d4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80225d6:	4b07      	ldr	r3, [pc, #28]	; (80225f4 <SPIx_Init+0x6c>)
 80225d8:	2200      	movs	r2, #0
 80225da:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80225dc:	4b05      	ldr	r3, [pc, #20]	; (80225f4 <SPIx_Init+0x6c>)
 80225de:	f44f 7282 	mov.w	r2, #260	; 0x104
 80225e2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80225e4:	4803      	ldr	r0, [pc, #12]	; (80225f4 <SPIx_Init+0x6c>)
 80225e6:	f000 f853 	bl	8022690 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80225ea:	4802      	ldr	r0, [pc, #8]	; (80225f4 <SPIx_Init+0x6c>)
 80225ec:	f005 fe5b 	bl	80282a6 <HAL_SPI_Init>
  } 
}
 80225f0:	bf00      	nop
 80225f2:	bd80      	pop	{r7, pc}
 80225f4:	200008a4 	.word	0x200008a4
 80225f8:	40015000 	.word	0x40015000

080225fc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80225fc:	b580      	push	{r7, lr}
 80225fe:	b084      	sub	sp, #16
 8022600:	af00      	add	r7, sp, #0
 8022602:	4603      	mov	r3, r0
 8022604:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8022606:	2300      	movs	r3, #0
 8022608:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 802260a:	79fb      	ldrb	r3, [r7, #7]
 802260c:	b29a      	uxth	r2, r3
 802260e:	4b09      	ldr	r3, [pc, #36]	; (8022634 <SPIx_Read+0x38>)
 8022610:	681b      	ldr	r3, [r3, #0]
 8022612:	f107 0108 	add.w	r1, r7, #8
 8022616:	4808      	ldr	r0, [pc, #32]	; (8022638 <SPIx_Read+0x3c>)
 8022618:	f006 f832 	bl	8028680 <HAL_SPI_Receive>
 802261c:	4603      	mov	r3, r0
 802261e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022620:	7bfb      	ldrb	r3, [r7, #15]
 8022622:	2b00      	cmp	r3, #0
 8022624:	d001      	beq.n	802262a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022626:	f000 f827 	bl	8022678 <SPIx_Error>
  }
  
  return readvalue;
 802262a:	68bb      	ldr	r3, [r7, #8]
}
 802262c:	4618      	mov	r0, r3
 802262e:	3710      	adds	r7, #16
 8022630:	46bd      	mov	sp, r7
 8022632:	bd80      	pop	{r7, pc}
 8022634:	20000040 	.word	0x20000040
 8022638:	200008a4 	.word	0x200008a4

0802263c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 802263c:	b580      	push	{r7, lr}
 802263e:	b084      	sub	sp, #16
 8022640:	af00      	add	r7, sp, #0
 8022642:	4603      	mov	r3, r0
 8022644:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8022646:	2300      	movs	r3, #0
 8022648:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 802264a:	4b09      	ldr	r3, [pc, #36]	; (8022670 <SPIx_Write+0x34>)
 802264c:	681b      	ldr	r3, [r3, #0]
 802264e:	1db9      	adds	r1, r7, #6
 8022650:	2201      	movs	r2, #1
 8022652:	4808      	ldr	r0, [pc, #32]	; (8022674 <SPIx_Write+0x38>)
 8022654:	f005 fed8 	bl	8028408 <HAL_SPI_Transmit>
 8022658:	4603      	mov	r3, r0
 802265a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 802265c:	7bfb      	ldrb	r3, [r7, #15]
 802265e:	2b00      	cmp	r3, #0
 8022660:	d001      	beq.n	8022666 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022662:	f000 f809 	bl	8022678 <SPIx_Error>
  }
}
 8022666:	bf00      	nop
 8022668:	3710      	adds	r7, #16
 802266a:	46bd      	mov	sp, r7
 802266c:	bd80      	pop	{r7, pc}
 802266e:	bf00      	nop
 8022670:	20000040 	.word	0x20000040
 8022674:	200008a4 	.word	0x200008a4

08022678 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8022678:	b580      	push	{r7, lr}
 802267a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 802267c:	4803      	ldr	r0, [pc, #12]	; (802268c <SPIx_Error+0x14>)
 802267e:	f005 fe9b 	bl	80283b8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8022682:	f7ff ff81 	bl	8022588 <SPIx_Init>
}
 8022686:	bf00      	nop
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop
 802268c:	200008a4 	.word	0x200008a4

08022690 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b08a      	sub	sp, #40	; 0x28
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8022698:	2300      	movs	r3, #0
 802269a:	613b      	str	r3, [r7, #16]
 802269c:	4b17      	ldr	r3, [pc, #92]	; (80226fc <SPIx_MspInit+0x6c>)
 802269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226a0:	4a16      	ldr	r2, [pc, #88]	; (80226fc <SPIx_MspInit+0x6c>)
 80226a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80226a6:	6453      	str	r3, [r2, #68]	; 0x44
 80226a8:	4b14      	ldr	r3, [pc, #80]	; (80226fc <SPIx_MspInit+0x6c>)
 80226aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80226ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80226b0:	613b      	str	r3, [r7, #16]
 80226b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80226b4:	2300      	movs	r3, #0
 80226b6:	60fb      	str	r3, [r7, #12]
 80226b8:	4b10      	ldr	r3, [pc, #64]	; (80226fc <SPIx_MspInit+0x6c>)
 80226ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226bc:	4a0f      	ldr	r2, [pc, #60]	; (80226fc <SPIx_MspInit+0x6c>)
 80226be:	f043 0320 	orr.w	r3, r3, #32
 80226c2:	6313      	str	r3, [r2, #48]	; 0x30
 80226c4:	4b0d      	ldr	r3, [pc, #52]	; (80226fc <SPIx_MspInit+0x6c>)
 80226c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c8:	f003 0320 	and.w	r3, r3, #32
 80226cc:	60fb      	str	r3, [r7, #12]
 80226ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80226d0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80226d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80226d6:	2302      	movs	r3, #2
 80226d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80226da:	2302      	movs	r3, #2
 80226dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80226de:	2301      	movs	r3, #1
 80226e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80226e2:	2305      	movs	r3, #5
 80226e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80226e6:	f107 0314 	add.w	r3, r7, #20
 80226ea:	4619      	mov	r1, r3
 80226ec:	4804      	ldr	r0, [pc, #16]	; (8022700 <SPIx_MspInit+0x70>)
 80226ee:	f002 f9fb 	bl	8024ae8 <HAL_GPIO_Init>
}
 80226f2:	bf00      	nop
 80226f4:	3728      	adds	r7, #40	; 0x28
 80226f6:	46bd      	mov	sp, r7
 80226f8:	bd80      	pop	{r7, pc}
 80226fa:	bf00      	nop
 80226fc:	40023800 	.word	0x40023800
 8022700:	40021400 	.word	0x40021400

08022704 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8022704:	b580      	push	{r7, lr}
 8022706:	b088      	sub	sp, #32
 8022708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 802270a:	4b36      	ldr	r3, [pc, #216]	; (80227e4 <LCD_IO_Init+0xe0>)
 802270c:	781b      	ldrb	r3, [r3, #0]
 802270e:	2b00      	cmp	r3, #0
 8022710:	d164      	bne.n	80227dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8022712:	4b34      	ldr	r3, [pc, #208]	; (80227e4 <LCD_IO_Init+0xe0>)
 8022714:	2201      	movs	r2, #1
 8022716:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8022718:	2300      	movs	r3, #0
 802271a:	60bb      	str	r3, [r7, #8]
 802271c:	4b32      	ldr	r3, [pc, #200]	; (80227e8 <LCD_IO_Init+0xe4>)
 802271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022720:	4a31      	ldr	r2, [pc, #196]	; (80227e8 <LCD_IO_Init+0xe4>)
 8022722:	f043 0308 	orr.w	r3, r3, #8
 8022726:	6313      	str	r3, [r2, #48]	; 0x30
 8022728:	4b2f      	ldr	r3, [pc, #188]	; (80227e8 <LCD_IO_Init+0xe4>)
 802272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802272c:	f003 0308 	and.w	r3, r3, #8
 8022730:	60bb      	str	r3, [r7, #8]
 8022732:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8022734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8022738:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 802273a:	2301      	movs	r3, #1
 802273c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 802273e:	2300      	movs	r3, #0
 8022740:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022742:	2302      	movs	r3, #2
 8022744:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8022746:	f107 030c 	add.w	r3, r7, #12
 802274a:	4619      	mov	r1, r3
 802274c:	4827      	ldr	r0, [pc, #156]	; (80227ec <LCD_IO_Init+0xe8>)
 802274e:	f002 f9cb 	bl	8024ae8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8022752:	2300      	movs	r3, #0
 8022754:	607b      	str	r3, [r7, #4]
 8022756:	4b24      	ldr	r3, [pc, #144]	; (80227e8 <LCD_IO_Init+0xe4>)
 8022758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802275a:	4a23      	ldr	r2, [pc, #140]	; (80227e8 <LCD_IO_Init+0xe4>)
 802275c:	f043 0308 	orr.w	r3, r3, #8
 8022760:	6313      	str	r3, [r2, #48]	; 0x30
 8022762:	4b21      	ldr	r3, [pc, #132]	; (80227e8 <LCD_IO_Init+0xe4>)
 8022764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022766:	f003 0308 	and.w	r3, r3, #8
 802276a:	607b      	str	r3, [r7, #4]
 802276c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 802276e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022772:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8022774:	2301      	movs	r3, #1
 8022776:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022778:	2300      	movs	r3, #0
 802277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 802277c:	2302      	movs	r3, #2
 802277e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8022780:	f107 030c 	add.w	r3, r7, #12
 8022784:	4619      	mov	r1, r3
 8022786:	4819      	ldr	r0, [pc, #100]	; (80227ec <LCD_IO_Init+0xe8>)
 8022788:	f002 f9ae 	bl	8024ae8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 802278c:	2300      	movs	r3, #0
 802278e:	603b      	str	r3, [r7, #0]
 8022790:	4b15      	ldr	r3, [pc, #84]	; (80227e8 <LCD_IO_Init+0xe4>)
 8022792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022794:	4a14      	ldr	r2, [pc, #80]	; (80227e8 <LCD_IO_Init+0xe4>)
 8022796:	f043 0304 	orr.w	r3, r3, #4
 802279a:	6313      	str	r3, [r2, #48]	; 0x30
 802279c:	4b12      	ldr	r3, [pc, #72]	; (80227e8 <LCD_IO_Init+0xe4>)
 802279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227a0:	f003 0304 	and.w	r3, r3, #4
 80227a4:	603b      	str	r3, [r7, #0]
 80227a6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80227a8:	2304      	movs	r3, #4
 80227aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80227ac:	2301      	movs	r3, #1
 80227ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80227b0:	2300      	movs	r3, #0
 80227b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80227b4:	2302      	movs	r3, #2
 80227b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80227b8:	f107 030c 	add.w	r3, r7, #12
 80227bc:	4619      	mov	r1, r3
 80227be:	480c      	ldr	r0, [pc, #48]	; (80227f0 <LCD_IO_Init+0xec>)
 80227c0:	f002 f992 	bl	8024ae8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80227c4:	2200      	movs	r2, #0
 80227c6:	2104      	movs	r1, #4
 80227c8:	4809      	ldr	r0, [pc, #36]	; (80227f0 <LCD_IO_Init+0xec>)
 80227ca:	f002 fc45 	bl	8025058 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80227ce:	2201      	movs	r2, #1
 80227d0:	2104      	movs	r1, #4
 80227d2:	4807      	ldr	r0, [pc, #28]	; (80227f0 <LCD_IO_Init+0xec>)
 80227d4:	f002 fc40 	bl	8025058 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80227d8:	f7ff fed6 	bl	8022588 <SPIx_Init>
  }
}
 80227dc:	bf00      	nop
 80227de:	3720      	adds	r7, #32
 80227e0:	46bd      	mov	sp, r7
 80227e2:	bd80      	pop	{r7, pc}
 80227e4:	200008fc 	.word	0x200008fc
 80227e8:	40023800 	.word	0x40023800
 80227ec:	40020c00 	.word	0x40020c00
 80227f0:	40020800 	.word	0x40020800

080227f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80227f4:	b580      	push	{r7, lr}
 80227f6:	b082      	sub	sp, #8
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	4603      	mov	r3, r0
 80227fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80227fe:	2201      	movs	r2, #1
 8022800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022804:	480a      	ldr	r0, [pc, #40]	; (8022830 <LCD_IO_WriteData+0x3c>)
 8022806:	f002 fc27 	bl	8025058 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 802280a:	2200      	movs	r2, #0
 802280c:	2104      	movs	r1, #4
 802280e:	4809      	ldr	r0, [pc, #36]	; (8022834 <LCD_IO_WriteData+0x40>)
 8022810:	f002 fc22 	bl	8025058 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022814:	88fb      	ldrh	r3, [r7, #6]
 8022816:	4618      	mov	r0, r3
 8022818:	f7ff ff10 	bl	802263c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 802281c:	2201      	movs	r2, #1
 802281e:	2104      	movs	r1, #4
 8022820:	4804      	ldr	r0, [pc, #16]	; (8022834 <LCD_IO_WriteData+0x40>)
 8022822:	f002 fc19 	bl	8025058 <HAL_GPIO_WritePin>
}
 8022826:	bf00      	nop
 8022828:	3708      	adds	r7, #8
 802282a:	46bd      	mov	sp, r7
 802282c:	bd80      	pop	{r7, pc}
 802282e:	bf00      	nop
 8022830:	40020c00 	.word	0x40020c00
 8022834:	40020800 	.word	0x40020800

08022838 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8022838:	b580      	push	{r7, lr}
 802283a:	b082      	sub	sp, #8
 802283c:	af00      	add	r7, sp, #0
 802283e:	4603      	mov	r3, r0
 8022840:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022842:	2200      	movs	r2, #0
 8022844:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022848:	480a      	ldr	r0, [pc, #40]	; (8022874 <LCD_IO_WriteReg+0x3c>)
 802284a:	f002 fc05 	bl	8025058 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 802284e:	2200      	movs	r2, #0
 8022850:	2104      	movs	r1, #4
 8022852:	4809      	ldr	r0, [pc, #36]	; (8022878 <LCD_IO_WriteReg+0x40>)
 8022854:	f002 fc00 	bl	8025058 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8022858:	79fb      	ldrb	r3, [r7, #7]
 802285a:	b29b      	uxth	r3, r3
 802285c:	4618      	mov	r0, r3
 802285e:	f7ff feed 	bl	802263c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022862:	2201      	movs	r2, #1
 8022864:	2104      	movs	r1, #4
 8022866:	4804      	ldr	r0, [pc, #16]	; (8022878 <LCD_IO_WriteReg+0x40>)
 8022868:	f002 fbf6 	bl	8025058 <HAL_GPIO_WritePin>
}
 802286c:	bf00      	nop
 802286e:	3708      	adds	r7, #8
 8022870:	46bd      	mov	sp, r7
 8022872:	bd80      	pop	{r7, pc}
 8022874:	40020c00 	.word	0x40020c00
 8022878:	40020800 	.word	0x40020800

0802287c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 802287c:	b580      	push	{r7, lr}
 802287e:	b084      	sub	sp, #16
 8022880:	af00      	add	r7, sp, #0
 8022882:	4603      	mov	r3, r0
 8022884:	460a      	mov	r2, r1
 8022886:	80fb      	strh	r3, [r7, #6]
 8022888:	4613      	mov	r3, r2
 802288a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 802288c:	2300      	movs	r3, #0
 802288e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8022890:	2200      	movs	r2, #0
 8022892:	2104      	movs	r1, #4
 8022894:	4810      	ldr	r0, [pc, #64]	; (80228d8 <LCD_IO_ReadData+0x5c>)
 8022896:	f002 fbdf 	bl	8025058 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 802289a:	2200      	movs	r2, #0
 802289c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228a0:	480e      	ldr	r0, [pc, #56]	; (80228dc <LCD_IO_ReadData+0x60>)
 80228a2:	f002 fbd9 	bl	8025058 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80228a6:	88fb      	ldrh	r3, [r7, #6]
 80228a8:	4618      	mov	r0, r3
 80228aa:	f7ff fec7 	bl	802263c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80228ae:	797b      	ldrb	r3, [r7, #5]
 80228b0:	4618      	mov	r0, r3
 80228b2:	f7ff fea3 	bl	80225fc <SPIx_Read>
 80228b6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80228b8:	2201      	movs	r2, #1
 80228ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80228be:	4807      	ldr	r0, [pc, #28]	; (80228dc <LCD_IO_ReadData+0x60>)
 80228c0:	f002 fbca 	bl	8025058 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80228c4:	2201      	movs	r2, #1
 80228c6:	2104      	movs	r1, #4
 80228c8:	4803      	ldr	r0, [pc, #12]	; (80228d8 <LCD_IO_ReadData+0x5c>)
 80228ca:	f002 fbc5 	bl	8025058 <HAL_GPIO_WritePin>
  
  return readvalue;
 80228ce:	68fb      	ldr	r3, [r7, #12]
}
 80228d0:	4618      	mov	r0, r3
 80228d2:	3710      	adds	r7, #16
 80228d4:	46bd      	mov	sp, r7
 80228d6:	bd80      	pop	{r7, pc}
 80228d8:	40020800 	.word	0x40020800
 80228dc:	40020c00 	.word	0x40020c00

080228e0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80228e0:	b580      	push	{r7, lr}
 80228e2:	b082      	sub	sp, #8
 80228e4:	af00      	add	r7, sp, #0
 80228e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80228e8:	6878      	ldr	r0, [r7, #4]
 80228ea:	f000 fecd 	bl	8023688 <HAL_Delay>
}
 80228ee:	bf00      	nop
 80228f0:	3708      	adds	r7, #8
 80228f2:	46bd      	mov	sp, r7
 80228f4:	bd80      	pop	{r7, pc}
	...

080228f8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80228f8:	b580      	push	{r7, lr}
 80228fa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80228fc:	4b2d      	ldr	r3, [pc, #180]	; (80229b4 <BSP_LCD_Init+0xbc>)
 80228fe:	4a2e      	ldr	r2, [pc, #184]	; (80229b8 <BSP_LCD_Init+0xc0>)
 8022900:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8022902:	4b2c      	ldr	r3, [pc, #176]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022904:	2209      	movs	r2, #9
 8022906:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8022908:	4b2a      	ldr	r3, [pc, #168]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802290a:	2201      	movs	r2, #1
 802290c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 802290e:	4b29      	ldr	r3, [pc, #164]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022910:	221d      	movs	r2, #29
 8022912:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022914:	4b27      	ldr	r3, [pc, #156]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022916:	2203      	movs	r2, #3
 8022918:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 802291a:	4b26      	ldr	r3, [pc, #152]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802291c:	f240 120d 	movw	r2, #269	; 0x10d
 8022920:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8022922:	4b24      	ldr	r3, [pc, #144]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022924:	f240 1243 	movw	r2, #323	; 0x143
 8022928:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 802292a:	4b22      	ldr	r3, [pc, #136]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802292c:	f240 1217 	movw	r2, #279	; 0x117
 8022930:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8022932:	4b20      	ldr	r3, [pc, #128]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022934:	f240 1247 	movw	r2, #327	; 0x147
 8022938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 802293a:	4b1e      	ldr	r3, [pc, #120]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802293c:	2200      	movs	r2, #0
 802293e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8022942:	4b1c      	ldr	r3, [pc, #112]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022944:	2200      	movs	r2, #0
 8022946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 802294a:	4b1a      	ldr	r3, [pc, #104]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802294c:	2200      	movs	r2, #0
 802294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8022952:	4b1a      	ldr	r3, [pc, #104]	; (80229bc <BSP_LCD_Init+0xc4>)
 8022954:	2208      	movs	r2, #8
 8022956:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8022958:	4b18      	ldr	r3, [pc, #96]	; (80229bc <BSP_LCD_Init+0xc4>)
 802295a:	22c0      	movs	r2, #192	; 0xc0
 802295c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 802295e:	4b17      	ldr	r3, [pc, #92]	; (80229bc <BSP_LCD_Init+0xc4>)
 8022960:	2204      	movs	r2, #4
 8022962:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8022964:	4b15      	ldr	r3, [pc, #84]	; (80229bc <BSP_LCD_Init+0xc4>)
 8022966:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802296a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 802296c:	4813      	ldr	r0, [pc, #76]	; (80229bc <BSP_LCD_Init+0xc4>)
 802296e:	f005 fa49 	bl	8027e04 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8022972:	4b10      	ldr	r3, [pc, #64]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022974:	2200      	movs	r2, #0
 8022976:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8022978:	4b0e      	ldr	r3, [pc, #56]	; (80229b4 <BSP_LCD_Init+0xbc>)
 802297a:	2200      	movs	r2, #0
 802297c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 802297e:	4b0d      	ldr	r3, [pc, #52]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022980:	2200      	movs	r2, #0
 8022982:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8022984:	4b0b      	ldr	r3, [pc, #44]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022986:	2200      	movs	r2, #0
 8022988:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 802298a:	f000 fa83 	bl	8022e94 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 802298e:	4809      	ldr	r0, [pc, #36]	; (80229b4 <BSP_LCD_Init+0xbc>)
 8022990:	f004 f95e 	bl	8026c50 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8022994:	4b0a      	ldr	r3, [pc, #40]	; (80229c0 <BSP_LCD_Init+0xc8>)
 8022996:	4a0b      	ldr	r2, [pc, #44]	; (80229c4 <BSP_LCD_Init+0xcc>)
 8022998:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 802299a:	4b09      	ldr	r3, [pc, #36]	; (80229c0 <BSP_LCD_Init+0xc8>)
 802299c:	681b      	ldr	r3, [r3, #0]
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80229a2:	f000 fc65 	bl	8023270 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80229a6:	4808      	ldr	r0, [pc, #32]	; (80229c8 <BSP_LCD_Init+0xd0>)
 80229a8:	f000 f920 	bl	8022bec <BSP_LCD_SetFont>

  return LCD_OK;
 80229ac:	2300      	movs	r3, #0
}  
 80229ae:	4618      	mov	r0, r3
 80229b0:	bd80      	pop	{r7, pc}
 80229b2:	bf00      	nop
 80229b4:	20000900 	.word	0x20000900
 80229b8:	40016800 	.word	0x40016800
 80229bc:	200009e8 	.word	0x200009e8
 80229c0:	20000a34 	.word	0x20000a34
 80229c4:	20000008 	.word	0x20000008
 80229c8:	20000044 	.word	0x20000044

080229cc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80229cc:	b580      	push	{r7, lr}
 80229ce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80229d0:	4b03      	ldr	r3, [pc, #12]	; (80229e0 <BSP_LCD_GetXSize+0x14>)
 80229d2:	681b      	ldr	r3, [r3, #0]
 80229d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80229d6:	4798      	blx	r3
 80229d8:	4603      	mov	r3, r0
}
 80229da:	4618      	mov	r0, r3
 80229dc:	bd80      	pop	{r7, pc}
 80229de:	bf00      	nop
 80229e0:	20000a34 	.word	0x20000a34

080229e4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80229e4:	b580      	push	{r7, lr}
 80229e6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80229e8:	4b03      	ldr	r3, [pc, #12]	; (80229f8 <BSP_LCD_GetYSize+0x14>)
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229ee:	4798      	blx	r3
 80229f0:	4603      	mov	r3, r0
}
 80229f2:	4618      	mov	r0, r3
 80229f4:	bd80      	pop	{r7, pc}
 80229f6:	bf00      	nop
 80229f8:	20000a34 	.word	0x20000a34

080229fc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80229fc:	b580      	push	{r7, lr}
 80229fe:	b090      	sub	sp, #64	; 0x40
 8022a00:	af00      	add	r7, sp, #0
 8022a02:	4603      	mov	r3, r0
 8022a04:	6039      	str	r1, [r7, #0]
 8022a06:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8022a08:	2300      	movs	r3, #0
 8022a0a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022a0c:	f7ff ffde 	bl	80229cc <BSP_LCD_GetXSize>
 8022a10:	4603      	mov	r3, r0
 8022a12:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022a14:	2300      	movs	r3, #0
 8022a16:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8022a18:	f7ff ffe4 	bl	80229e4 <BSP_LCD_GetYSize>
 8022a1c:	4603      	mov	r3, r0
 8022a1e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022a20:	2300      	movs	r3, #0
 8022a22:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022a24:	683b      	ldr	r3, [r7, #0]
 8022a26:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8022a28:	23ff      	movs	r3, #255	; 0xff
 8022a2a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022a2c:	2300      	movs	r3, #0
 8022a2e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022a30:	2300      	movs	r3, #0
 8022a32:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8022a36:	2300      	movs	r3, #0
 8022a38:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022a3c:	2300      	movs	r3, #0
 8022a3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022a42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8022a46:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8022a48:	2307      	movs	r3, #7
 8022a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022a4c:	f7ff ffbe 	bl	80229cc <BSP_LCD_GetXSize>
 8022a50:	4603      	mov	r3, r0
 8022a52:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8022a54:	f7ff ffc6 	bl	80229e4 <BSP_LCD_GetYSize>
 8022a58:	4603      	mov	r3, r0
 8022a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022a5c:	88fa      	ldrh	r2, [r7, #6]
 8022a5e:	f107 030c 	add.w	r3, r7, #12
 8022a62:	4619      	mov	r1, r3
 8022a64:	4814      	ldr	r0, [pc, #80]	; (8022ab8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022a66:	f004 fa85 	bl	8026f74 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8022a6a:	88fa      	ldrh	r2, [r7, #6]
 8022a6c:	4913      	ldr	r1, [pc, #76]	; (8022abc <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a6e:	4613      	mov	r3, r2
 8022a70:	005b      	lsls	r3, r3, #1
 8022a72:	4413      	add	r3, r2
 8022a74:	009b      	lsls	r3, r3, #2
 8022a76:	440b      	add	r3, r1
 8022a78:	3304      	adds	r3, #4
 8022a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8022a7e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8022a80:	88fa      	ldrh	r2, [r7, #6]
 8022a82:	490e      	ldr	r1, [pc, #56]	; (8022abc <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a84:	4613      	mov	r3, r2
 8022a86:	005b      	lsls	r3, r3, #1
 8022a88:	4413      	add	r3, r2
 8022a8a:	009b      	lsls	r3, r3, #2
 8022a8c:	440b      	add	r3, r1
 8022a8e:	3308      	adds	r3, #8
 8022a90:	4a0b      	ldr	r2, [pc, #44]	; (8022ac0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8022a92:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8022a94:	88fa      	ldrh	r2, [r7, #6]
 8022a96:	4909      	ldr	r1, [pc, #36]	; (8022abc <BSP_LCD_LayerDefaultInit+0xc0>)
 8022a98:	4613      	mov	r3, r2
 8022a9a:	005b      	lsls	r3, r3, #1
 8022a9c:	4413      	add	r3, r2
 8022a9e:	009b      	lsls	r3, r3, #2
 8022aa0:	440b      	add	r3, r1
 8022aa2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8022aa6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8022aa8:	4803      	ldr	r0, [pc, #12]	; (8022ab8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8022aaa:	f004 fb1f 	bl	80270ec <HAL_LTDC_EnableDither>
}
 8022aae:	bf00      	nop
 8022ab0:	3740      	adds	r7, #64	; 0x40
 8022ab2:	46bd      	mov	sp, r7
 8022ab4:	bd80      	pop	{r7, pc}
 8022ab6:	bf00      	nop
 8022ab8:	20000900 	.word	0x20000900
 8022abc:	20000a1c 	.word	0x20000a1c
 8022ac0:	20000044 	.word	0x20000044

08022ac4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8022ac4:	b480      	push	{r7}
 8022ac6:	b083      	sub	sp, #12
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022acc:	4a04      	ldr	r2, [pc, #16]	; (8022ae0 <BSP_LCD_SelectLayer+0x1c>)
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	6013      	str	r3, [r2, #0]
}
 8022ad2:	bf00      	nop
 8022ad4:	370c      	adds	r7, #12
 8022ad6:	46bd      	mov	sp, r7
 8022ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022adc:	4770      	bx	lr
 8022ade:	bf00      	nop
 8022ae0:	20000a18 	.word	0x20000a18

08022ae4 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022ae4:	b480      	push	{r7}
 8022ae6:	b083      	sub	sp, #12
 8022ae8:	af00      	add	r7, sp, #0
 8022aea:	6078      	str	r0, [r7, #4]
 8022aec:	460b      	mov	r3, r1
 8022aee:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022af0:	78fb      	ldrb	r3, [r7, #3]
 8022af2:	2b01      	cmp	r3, #1
 8022af4:	d112      	bne.n	8022b1c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022af6:	4b19      	ldr	r3, [pc, #100]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022af8:	681b      	ldr	r3, [r3, #0]
 8022afa:	461a      	mov	r2, r3
 8022afc:	687b      	ldr	r3, [r7, #4]
 8022afe:	01db      	lsls	r3, r3, #7
 8022b00:	4413      	add	r3, r2
 8022b02:	3384      	adds	r3, #132	; 0x84
 8022b04:	681b      	ldr	r3, [r3, #0]
 8022b06:	4a15      	ldr	r2, [pc, #84]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022b08:	6812      	ldr	r2, [r2, #0]
 8022b0a:	4611      	mov	r1, r2
 8022b0c:	687a      	ldr	r2, [r7, #4]
 8022b0e:	01d2      	lsls	r2, r2, #7
 8022b10:	440a      	add	r2, r1
 8022b12:	3284      	adds	r2, #132	; 0x84
 8022b14:	f043 0301 	orr.w	r3, r3, #1
 8022b18:	6013      	str	r3, [r2, #0]
 8022b1a:	e011      	b.n	8022b40 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022b1c:	4b0f      	ldr	r3, [pc, #60]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022b1e:	681b      	ldr	r3, [r3, #0]
 8022b20:	461a      	mov	r2, r3
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	01db      	lsls	r3, r3, #7
 8022b26:	4413      	add	r3, r2
 8022b28:	3384      	adds	r3, #132	; 0x84
 8022b2a:	681b      	ldr	r3, [r3, #0]
 8022b2c:	4a0b      	ldr	r2, [pc, #44]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022b2e:	6812      	ldr	r2, [r2, #0]
 8022b30:	4611      	mov	r1, r2
 8022b32:	687a      	ldr	r2, [r7, #4]
 8022b34:	01d2      	lsls	r2, r2, #7
 8022b36:	440a      	add	r2, r1
 8022b38:	3284      	adds	r2, #132	; 0x84
 8022b3a:	f023 0301 	bic.w	r3, r3, #1
 8022b3e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022b40:	4b06      	ldr	r3, [pc, #24]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022b46:	4b05      	ldr	r3, [pc, #20]	; (8022b5c <BSP_LCD_SetLayerVisible+0x78>)
 8022b48:	681b      	ldr	r3, [r3, #0]
 8022b4a:	f042 0201 	orr.w	r2, r2, #1
 8022b4e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022b50:	bf00      	nop
 8022b52:	370c      	adds	r7, #12
 8022b54:	46bd      	mov	sp, r7
 8022b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b5a:	4770      	bx	lr
 8022b5c:	20000900 	.word	0x20000900

08022b60 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022b60:	b580      	push	{r7, lr}
 8022b62:	b082      	sub	sp, #8
 8022b64:	af00      	add	r7, sp, #0
 8022b66:	6078      	str	r0, [r7, #4]
 8022b68:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022b6a:	687a      	ldr	r2, [r7, #4]
 8022b6c:	6839      	ldr	r1, [r7, #0]
 8022b6e:	4805      	ldr	r0, [pc, #20]	; (8022b84 <BSP_LCD_SetColorKeying+0x24>)
 8022b70:	f004 fa3e 	bl	8026ff0 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8022b74:	6879      	ldr	r1, [r7, #4]
 8022b76:	4803      	ldr	r0, [pc, #12]	; (8022b84 <BSP_LCD_SetColorKeying+0x24>)
 8022b78:	f004 fa7e 	bl	8027078 <HAL_LTDC_EnableColorKeying>
}
 8022b7c:	bf00      	nop
 8022b7e:	3708      	adds	r7, #8
 8022b80:	46bd      	mov	sp, r7
 8022b82:	bd80      	pop	{r7, pc}
 8022b84:	20000900 	.word	0x20000900

08022b88 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022b88:	b480      	push	{r7}
 8022b8a:	b083      	sub	sp, #12
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022b90:	4b07      	ldr	r3, [pc, #28]	; (8022bb0 <BSP_LCD_SetTextColor+0x28>)
 8022b92:	681a      	ldr	r2, [r3, #0]
 8022b94:	4907      	ldr	r1, [pc, #28]	; (8022bb4 <BSP_LCD_SetTextColor+0x2c>)
 8022b96:	4613      	mov	r3, r2
 8022b98:	005b      	lsls	r3, r3, #1
 8022b9a:	4413      	add	r3, r2
 8022b9c:	009b      	lsls	r3, r3, #2
 8022b9e:	440b      	add	r3, r1
 8022ba0:	687a      	ldr	r2, [r7, #4]
 8022ba2:	601a      	str	r2, [r3, #0]
}
 8022ba4:	bf00      	nop
 8022ba6:	370c      	adds	r7, #12
 8022ba8:	46bd      	mov	sp, r7
 8022baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bae:	4770      	bx	lr
 8022bb0:	20000a18 	.word	0x20000a18
 8022bb4:	20000a1c 	.word	0x20000a1c

08022bb8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022bb8:	b480      	push	{r7}
 8022bba:	b083      	sub	sp, #12
 8022bbc:	af00      	add	r7, sp, #0
 8022bbe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022bc0:	4b08      	ldr	r3, [pc, #32]	; (8022be4 <BSP_LCD_SetBackColor+0x2c>)
 8022bc2:	681a      	ldr	r2, [r3, #0]
 8022bc4:	4908      	ldr	r1, [pc, #32]	; (8022be8 <BSP_LCD_SetBackColor+0x30>)
 8022bc6:	4613      	mov	r3, r2
 8022bc8:	005b      	lsls	r3, r3, #1
 8022bca:	4413      	add	r3, r2
 8022bcc:	009b      	lsls	r3, r3, #2
 8022bce:	440b      	add	r3, r1
 8022bd0:	3304      	adds	r3, #4
 8022bd2:	687a      	ldr	r2, [r7, #4]
 8022bd4:	601a      	str	r2, [r3, #0]
}
 8022bd6:	bf00      	nop
 8022bd8:	370c      	adds	r7, #12
 8022bda:	46bd      	mov	sp, r7
 8022bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022be0:	4770      	bx	lr
 8022be2:	bf00      	nop
 8022be4:	20000a18 	.word	0x20000a18
 8022be8:	20000a1c 	.word	0x20000a1c

08022bec <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022bec:	b480      	push	{r7}
 8022bee:	b083      	sub	sp, #12
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022bf4:	4b08      	ldr	r3, [pc, #32]	; (8022c18 <BSP_LCD_SetFont+0x2c>)
 8022bf6:	681a      	ldr	r2, [r3, #0]
 8022bf8:	4908      	ldr	r1, [pc, #32]	; (8022c1c <BSP_LCD_SetFont+0x30>)
 8022bfa:	4613      	mov	r3, r2
 8022bfc:	005b      	lsls	r3, r3, #1
 8022bfe:	4413      	add	r3, r2
 8022c00:	009b      	lsls	r3, r3, #2
 8022c02:	440b      	add	r3, r1
 8022c04:	3308      	adds	r3, #8
 8022c06:	687a      	ldr	r2, [r7, #4]
 8022c08:	601a      	str	r2, [r3, #0]
}
 8022c0a:	bf00      	nop
 8022c0c:	370c      	adds	r7, #12
 8022c0e:	46bd      	mov	sp, r7
 8022c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c14:	4770      	bx	lr
 8022c16:	bf00      	nop
 8022c18:	20000a18 	.word	0x20000a18
 8022c1c:	20000a1c 	.word	0x20000a1c

08022c20 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c22:	b085      	sub	sp, #20
 8022c24:	af02      	add	r7, sp, #8
 8022c26:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022c28:	4b0f      	ldr	r3, [pc, #60]	; (8022c68 <BSP_LCD_Clear+0x48>)
 8022c2a:	681c      	ldr	r4, [r3, #0]
 8022c2c:	4b0e      	ldr	r3, [pc, #56]	; (8022c68 <BSP_LCD_Clear+0x48>)
 8022c2e:	681b      	ldr	r3, [r3, #0]
 8022c30:	4a0e      	ldr	r2, [pc, #56]	; (8022c6c <BSP_LCD_Clear+0x4c>)
 8022c32:	2134      	movs	r1, #52	; 0x34
 8022c34:	fb01 f303 	mul.w	r3, r1, r3
 8022c38:	4413      	add	r3, r2
 8022c3a:	335c      	adds	r3, #92	; 0x5c
 8022c3c:	681b      	ldr	r3, [r3, #0]
 8022c3e:	461e      	mov	r6, r3
 8022c40:	f7ff fec4 	bl	80229cc <BSP_LCD_GetXSize>
 8022c44:	4605      	mov	r5, r0
 8022c46:	f7ff fecd 	bl	80229e4 <BSP_LCD_GetYSize>
 8022c4a:	4602      	mov	r2, r0
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	9301      	str	r3, [sp, #4]
 8022c50:	2300      	movs	r3, #0
 8022c52:	9300      	str	r3, [sp, #0]
 8022c54:	4613      	mov	r3, r2
 8022c56:	462a      	mov	r2, r5
 8022c58:	4631      	mov	r1, r6
 8022c5a:	4620      	mov	r0, r4
 8022c5c:	f000 fad0 	bl	8023200 <FillBuffer>
}
 8022c60:	bf00      	nop
 8022c62:	370c      	adds	r7, #12
 8022c64:	46bd      	mov	sp, r7
 8022c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022c68:	20000a18 	.word	0x20000a18
 8022c6c:	20000900 	.word	0x20000900

08022c70 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022c70:	b590      	push	{r4, r7, lr}
 8022c72:	b083      	sub	sp, #12
 8022c74:	af00      	add	r7, sp, #0
 8022c76:	4603      	mov	r3, r0
 8022c78:	80fb      	strh	r3, [r7, #6]
 8022c7a:	460b      	mov	r3, r1
 8022c7c:	80bb      	strh	r3, [r7, #4]
 8022c7e:	4613      	mov	r3, r2
 8022c80:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022c82:	4b1b      	ldr	r3, [pc, #108]	; (8022cf0 <BSP_LCD_DisplayChar+0x80>)
 8022c84:	681a      	ldr	r2, [r3, #0]
 8022c86:	491b      	ldr	r1, [pc, #108]	; (8022cf4 <BSP_LCD_DisplayChar+0x84>)
 8022c88:	4613      	mov	r3, r2
 8022c8a:	005b      	lsls	r3, r3, #1
 8022c8c:	4413      	add	r3, r2
 8022c8e:	009b      	lsls	r3, r3, #2
 8022c90:	440b      	add	r3, r1
 8022c92:	3308      	adds	r3, #8
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	6819      	ldr	r1, [r3, #0]
 8022c98:	78fb      	ldrb	r3, [r7, #3]
 8022c9a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022c9e:	4b14      	ldr	r3, [pc, #80]	; (8022cf0 <BSP_LCD_DisplayChar+0x80>)
 8022ca0:	681a      	ldr	r2, [r3, #0]
 8022ca2:	4c14      	ldr	r4, [pc, #80]	; (8022cf4 <BSP_LCD_DisplayChar+0x84>)
 8022ca4:	4613      	mov	r3, r2
 8022ca6:	005b      	lsls	r3, r3, #1
 8022ca8:	4413      	add	r3, r2
 8022caa:	009b      	lsls	r3, r3, #2
 8022cac:	4423      	add	r3, r4
 8022cae:	3308      	adds	r3, #8
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cb4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022cb8:	4b0d      	ldr	r3, [pc, #52]	; (8022cf0 <BSP_LCD_DisplayChar+0x80>)
 8022cba:	681a      	ldr	r2, [r3, #0]
 8022cbc:	4c0d      	ldr	r4, [pc, #52]	; (8022cf4 <BSP_LCD_DisplayChar+0x84>)
 8022cbe:	4613      	mov	r3, r2
 8022cc0:	005b      	lsls	r3, r3, #1
 8022cc2:	4413      	add	r3, r2
 8022cc4:	009b      	lsls	r3, r3, #2
 8022cc6:	4423      	add	r3, r4
 8022cc8:	3308      	adds	r3, #8
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	889b      	ldrh	r3, [r3, #4]
 8022cce:	3307      	adds	r3, #7
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	da00      	bge.n	8022cd6 <BSP_LCD_DisplayChar+0x66>
 8022cd4:	3307      	adds	r3, #7
 8022cd6:	10db      	asrs	r3, r3, #3
 8022cd8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022cdc:	18ca      	adds	r2, r1, r3
 8022cde:	88b9      	ldrh	r1, [r7, #4]
 8022ce0:	88fb      	ldrh	r3, [r7, #6]
 8022ce2:	4618      	mov	r0, r3
 8022ce4:	f000 f9d2 	bl	802308c <DrawChar>
}
 8022ce8:	bf00      	nop
 8022cea:	370c      	adds	r7, #12
 8022cec:	46bd      	mov	sp, r7
 8022cee:	bd90      	pop	{r4, r7, pc}
 8022cf0:	20000a18 	.word	0x20000a18
 8022cf4:	20000a1c 	.word	0x20000a1c

08022cf8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022cf8:	b5b0      	push	{r4, r5, r7, lr}
 8022cfa:	b088      	sub	sp, #32
 8022cfc:	af00      	add	r7, sp, #0
 8022cfe:	60ba      	str	r2, [r7, #8]
 8022d00:	461a      	mov	r2, r3
 8022d02:	4603      	mov	r3, r0
 8022d04:	81fb      	strh	r3, [r7, #14]
 8022d06:	460b      	mov	r3, r1
 8022d08:	81bb      	strh	r3, [r7, #12]
 8022d0a:	4613      	mov	r3, r2
 8022d0c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022d0e:	2301      	movs	r3, #1
 8022d10:	83fb      	strh	r3, [r7, #30]
 8022d12:	2300      	movs	r3, #0
 8022d14:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022d16:	2300      	movs	r3, #0
 8022d18:	61bb      	str	r3, [r7, #24]
 8022d1a:	2300      	movs	r3, #0
 8022d1c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022d1e:	68bb      	ldr	r3, [r7, #8]
 8022d20:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022d22:	e002      	b.n	8022d2a <BSP_LCD_DisplayStringAt+0x32>
 8022d24:	69bb      	ldr	r3, [r7, #24]
 8022d26:	3301      	adds	r3, #1
 8022d28:	61bb      	str	r3, [r7, #24]
 8022d2a:	697b      	ldr	r3, [r7, #20]
 8022d2c:	1c5a      	adds	r2, r3, #1
 8022d2e:	617a      	str	r2, [r7, #20]
 8022d30:	781b      	ldrb	r3, [r3, #0]
 8022d32:	2b00      	cmp	r3, #0
 8022d34:	d1f6      	bne.n	8022d24 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022d36:	f7ff fe49 	bl	80229cc <BSP_LCD_GetXSize>
 8022d3a:	4601      	mov	r1, r0
 8022d3c:	4b4b      	ldr	r3, [pc, #300]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022d3e:	681a      	ldr	r2, [r3, #0]
 8022d40:	484b      	ldr	r0, [pc, #300]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022d42:	4613      	mov	r3, r2
 8022d44:	005b      	lsls	r3, r3, #1
 8022d46:	4413      	add	r3, r2
 8022d48:	009b      	lsls	r3, r3, #2
 8022d4a:	4403      	add	r3, r0
 8022d4c:	3308      	adds	r3, #8
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	889b      	ldrh	r3, [r3, #4]
 8022d52:	fbb1 f3f3 	udiv	r3, r1, r3
 8022d56:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022d58:	79fb      	ldrb	r3, [r7, #7]
 8022d5a:	2b03      	cmp	r3, #3
 8022d5c:	d01c      	beq.n	8022d98 <BSP_LCD_DisplayStringAt+0xa0>
 8022d5e:	2b03      	cmp	r3, #3
 8022d60:	dc33      	bgt.n	8022dca <BSP_LCD_DisplayStringAt+0xd2>
 8022d62:	2b01      	cmp	r3, #1
 8022d64:	d002      	beq.n	8022d6c <BSP_LCD_DisplayStringAt+0x74>
 8022d66:	2b02      	cmp	r3, #2
 8022d68:	d019      	beq.n	8022d9e <BSP_LCD_DisplayStringAt+0xa6>
 8022d6a:	e02e      	b.n	8022dca <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022d6c:	693a      	ldr	r2, [r7, #16]
 8022d6e:	69bb      	ldr	r3, [r7, #24]
 8022d70:	1ad1      	subs	r1, r2, r3
 8022d72:	4b3e      	ldr	r3, [pc, #248]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022d74:	681a      	ldr	r2, [r3, #0]
 8022d76:	483e      	ldr	r0, [pc, #248]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022d78:	4613      	mov	r3, r2
 8022d7a:	005b      	lsls	r3, r3, #1
 8022d7c:	4413      	add	r3, r2
 8022d7e:	009b      	lsls	r3, r3, #2
 8022d80:	4403      	add	r3, r0
 8022d82:	3308      	adds	r3, #8
 8022d84:	681b      	ldr	r3, [r3, #0]
 8022d86:	889b      	ldrh	r3, [r3, #4]
 8022d88:	fb01 f303 	mul.w	r3, r1, r3
 8022d8c:	085b      	lsrs	r3, r3, #1
 8022d8e:	b29a      	uxth	r2, r3
 8022d90:	89fb      	ldrh	r3, [r7, #14]
 8022d92:	4413      	add	r3, r2
 8022d94:	83fb      	strh	r3, [r7, #30]
      break;
 8022d96:	e01b      	b.n	8022dd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022d98:	89fb      	ldrh	r3, [r7, #14]
 8022d9a:	83fb      	strh	r3, [r7, #30]
      break;
 8022d9c:	e018      	b.n	8022dd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022d9e:	693a      	ldr	r2, [r7, #16]
 8022da0:	69bb      	ldr	r3, [r7, #24]
 8022da2:	1ad3      	subs	r3, r2, r3
 8022da4:	b299      	uxth	r1, r3
 8022da6:	4b31      	ldr	r3, [pc, #196]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022da8:	681a      	ldr	r2, [r3, #0]
 8022daa:	4831      	ldr	r0, [pc, #196]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022dac:	4613      	mov	r3, r2
 8022dae:	005b      	lsls	r3, r3, #1
 8022db0:	4413      	add	r3, r2
 8022db2:	009b      	lsls	r3, r3, #2
 8022db4:	4403      	add	r3, r0
 8022db6:	3308      	adds	r3, #8
 8022db8:	681b      	ldr	r3, [r3, #0]
 8022dba:	889b      	ldrh	r3, [r3, #4]
 8022dbc:	fb11 f303 	smulbb	r3, r1, r3
 8022dc0:	b29a      	uxth	r2, r3
 8022dc2:	89fb      	ldrh	r3, [r7, #14]
 8022dc4:	4413      	add	r3, r2
 8022dc6:	83fb      	strh	r3, [r7, #30]
      break;
 8022dc8:	e002      	b.n	8022dd0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022dca:	89fb      	ldrh	r3, [r7, #14]
 8022dcc:	83fb      	strh	r3, [r7, #30]
      break;
 8022dce:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022dd0:	e01a      	b.n	8022e08 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022dd2:	68bb      	ldr	r3, [r7, #8]
 8022dd4:	781a      	ldrb	r2, [r3, #0]
 8022dd6:	89b9      	ldrh	r1, [r7, #12]
 8022dd8:	8bfb      	ldrh	r3, [r7, #30]
 8022dda:	4618      	mov	r0, r3
 8022ddc:	f7ff ff48 	bl	8022c70 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022de0:	4b22      	ldr	r3, [pc, #136]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022de2:	681a      	ldr	r2, [r3, #0]
 8022de4:	4922      	ldr	r1, [pc, #136]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022de6:	4613      	mov	r3, r2
 8022de8:	005b      	lsls	r3, r3, #1
 8022dea:	4413      	add	r3, r2
 8022dec:	009b      	lsls	r3, r3, #2
 8022dee:	440b      	add	r3, r1
 8022df0:	3308      	adds	r3, #8
 8022df2:	681b      	ldr	r3, [r3, #0]
 8022df4:	889a      	ldrh	r2, [r3, #4]
 8022df6:	8bfb      	ldrh	r3, [r7, #30]
 8022df8:	4413      	add	r3, r2
 8022dfa:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022dfc:	68bb      	ldr	r3, [r7, #8]
 8022dfe:	3301      	adds	r3, #1
 8022e00:	60bb      	str	r3, [r7, #8]
    i++;
 8022e02:	8bbb      	ldrh	r3, [r7, #28]
 8022e04:	3301      	adds	r3, #1
 8022e06:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022e08:	68bb      	ldr	r3, [r7, #8]
 8022e0a:	781b      	ldrb	r3, [r3, #0]
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	bf14      	ite	ne
 8022e10:	2301      	movne	r3, #1
 8022e12:	2300      	moveq	r3, #0
 8022e14:	b2dc      	uxtb	r4, r3
 8022e16:	f7ff fdd9 	bl	80229cc <BSP_LCD_GetXSize>
 8022e1a:	8bb9      	ldrh	r1, [r7, #28]
 8022e1c:	4b13      	ldr	r3, [pc, #76]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022e1e:	681a      	ldr	r2, [r3, #0]
 8022e20:	4d13      	ldr	r5, [pc, #76]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022e22:	4613      	mov	r3, r2
 8022e24:	005b      	lsls	r3, r3, #1
 8022e26:	4413      	add	r3, r2
 8022e28:	009b      	lsls	r3, r3, #2
 8022e2a:	442b      	add	r3, r5
 8022e2c:	3308      	adds	r3, #8
 8022e2e:	681b      	ldr	r3, [r3, #0]
 8022e30:	889b      	ldrh	r3, [r3, #4]
 8022e32:	fb01 f303 	mul.w	r3, r1, r3
 8022e36:	1ac3      	subs	r3, r0, r3
 8022e38:	b299      	uxth	r1, r3
 8022e3a:	4b0c      	ldr	r3, [pc, #48]	; (8022e6c <BSP_LCD_DisplayStringAt+0x174>)
 8022e3c:	681a      	ldr	r2, [r3, #0]
 8022e3e:	480c      	ldr	r0, [pc, #48]	; (8022e70 <BSP_LCD_DisplayStringAt+0x178>)
 8022e40:	4613      	mov	r3, r2
 8022e42:	005b      	lsls	r3, r3, #1
 8022e44:	4413      	add	r3, r2
 8022e46:	009b      	lsls	r3, r3, #2
 8022e48:	4403      	add	r3, r0
 8022e4a:	3308      	adds	r3, #8
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	889b      	ldrh	r3, [r3, #4]
 8022e50:	4299      	cmp	r1, r3
 8022e52:	bf2c      	ite	cs
 8022e54:	2301      	movcs	r3, #1
 8022e56:	2300      	movcc	r3, #0
 8022e58:	b2db      	uxtb	r3, r3
 8022e5a:	4023      	ands	r3, r4
 8022e5c:	b2db      	uxtb	r3, r3
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d1b7      	bne.n	8022dd2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022e62:	bf00      	nop
 8022e64:	bf00      	nop
 8022e66:	3720      	adds	r7, #32
 8022e68:	46bd      	mov	sp, r7
 8022e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8022e6c:	20000a18 	.word	0x20000a18
 8022e70:	20000a1c 	.word	0x20000a1c

08022e74 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022e74:	b580      	push	{r7, lr}
 8022e76:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022e78:	4b05      	ldr	r3, [pc, #20]	; (8022e90 <BSP_LCD_DisplayOn+0x1c>)
 8022e7a:	681b      	ldr	r3, [r3, #0]
 8022e7c:	689b      	ldr	r3, [r3, #8]
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d003      	beq.n	8022e8a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022e82:	4b03      	ldr	r3, [pc, #12]	; (8022e90 <BSP_LCD_DisplayOn+0x1c>)
 8022e84:	681b      	ldr	r3, [r3, #0]
 8022e86:	689b      	ldr	r3, [r3, #8]
 8022e88:	4798      	blx	r3
  }
}
 8022e8a:	bf00      	nop
 8022e8c:	bd80      	pop	{r7, pc}
 8022e8e:	bf00      	nop
 8022e90:	20000a34 	.word	0x20000a34

08022e94 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022e94:	b580      	push	{r7, lr}
 8022e96:	b08e      	sub	sp, #56	; 0x38
 8022e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022e9a:	2300      	movs	r3, #0
 8022e9c:	623b      	str	r3, [r7, #32]
 8022e9e:	4b61      	ldr	r3, [pc, #388]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022ea2:	4a60      	ldr	r2, [pc, #384]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8022eaa:	4b5e      	ldr	r3, [pc, #376]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022eb2:	623b      	str	r3, [r7, #32]
 8022eb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022eb6:	2300      	movs	r3, #0
 8022eb8:	61fb      	str	r3, [r7, #28]
 8022eba:	4b5a      	ldr	r3, [pc, #360]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ebe:	4a59      	ldr	r2, [pc, #356]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ec0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8022ec6:	4b57      	ldr	r3, [pc, #348]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022ece:	61fb      	str	r3, [r7, #28]
 8022ed0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	61bb      	str	r3, [r7, #24]
 8022ed6:	4b53      	ldr	r3, [pc, #332]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eda:	4a52      	ldr	r2, [pc, #328]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022edc:	f043 0301 	orr.w	r3, r3, #1
 8022ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8022ee2:	4b50      	ldr	r3, [pc, #320]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ee6:	f003 0301 	and.w	r3, r3, #1
 8022eea:	61bb      	str	r3, [r7, #24]
 8022eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022eee:	2300      	movs	r3, #0
 8022ef0:	617b      	str	r3, [r7, #20]
 8022ef2:	4b4c      	ldr	r3, [pc, #304]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ef6:	4a4b      	ldr	r2, [pc, #300]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022ef8:	f043 0302 	orr.w	r3, r3, #2
 8022efc:	6313      	str	r3, [r2, #48]	; 0x30
 8022efe:	4b49      	ldr	r3, [pc, #292]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f02:	f003 0302 	and.w	r3, r3, #2
 8022f06:	617b      	str	r3, [r7, #20]
 8022f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	613b      	str	r3, [r7, #16]
 8022f0e:	4b45      	ldr	r3, [pc, #276]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f12:	4a44      	ldr	r2, [pc, #272]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f14:	f043 0304 	orr.w	r3, r3, #4
 8022f18:	6313      	str	r3, [r2, #48]	; 0x30
 8022f1a:	4b42      	ldr	r3, [pc, #264]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f1e:	f003 0304 	and.w	r3, r3, #4
 8022f22:	613b      	str	r3, [r7, #16]
 8022f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022f26:	2300      	movs	r3, #0
 8022f28:	60fb      	str	r3, [r7, #12]
 8022f2a:	4b3e      	ldr	r3, [pc, #248]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f2e:	4a3d      	ldr	r2, [pc, #244]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f30:	f043 0308 	orr.w	r3, r3, #8
 8022f34:	6313      	str	r3, [r2, #48]	; 0x30
 8022f36:	4b3b      	ldr	r3, [pc, #236]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f3a:	f003 0308 	and.w	r3, r3, #8
 8022f3e:	60fb      	str	r3, [r7, #12]
 8022f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022f42:	2300      	movs	r3, #0
 8022f44:	60bb      	str	r3, [r7, #8]
 8022f46:	4b37      	ldr	r3, [pc, #220]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f4a:	4a36      	ldr	r2, [pc, #216]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f4c:	f043 0320 	orr.w	r3, r3, #32
 8022f50:	6313      	str	r3, [r2, #48]	; 0x30
 8022f52:	4b34      	ldr	r3, [pc, #208]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f56:	f003 0320 	and.w	r3, r3, #32
 8022f5a:	60bb      	str	r3, [r7, #8]
 8022f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022f5e:	2300      	movs	r3, #0
 8022f60:	607b      	str	r3, [r7, #4]
 8022f62:	4b30      	ldr	r3, [pc, #192]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f66:	4a2f      	ldr	r2, [pc, #188]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8022f6e:	4b2d      	ldr	r3, [pc, #180]	; (8023024 <BSP_LCD_MspInit+0x190>)
 8022f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022f76:	607b      	str	r3, [r7, #4]
 8022f78:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022f7a:	f641 0358 	movw	r3, #6232	; 0x1858
 8022f7e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022f80:	2302      	movs	r3, #2
 8022f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022f84:	2300      	movs	r3, #0
 8022f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022f88:	2302      	movs	r3, #2
 8022f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022f8c:	230e      	movs	r3, #14
 8022f8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f94:	4619      	mov	r1, r3
 8022f96:	4824      	ldr	r0, [pc, #144]	; (8023028 <BSP_LCD_MspInit+0x194>)
 8022f98:	f001 fda6 	bl	8024ae8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022f9c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022fa0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fa6:	4619      	mov	r1, r3
 8022fa8:	4820      	ldr	r0, [pc, #128]	; (802302c <BSP_LCD_MspInit+0x198>)
 8022faa:	f001 fd9d 	bl	8024ae8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022fae:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fb8:	4619      	mov	r1, r3
 8022fba:	481d      	ldr	r0, [pc, #116]	; (8023030 <BSP_LCD_MspInit+0x19c>)
 8022fbc:	f001 fd94 	bl	8024ae8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022fc0:	2348      	movs	r3, #72	; 0x48
 8022fc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fc8:	4619      	mov	r1, r3
 8022fca:	481a      	ldr	r0, [pc, #104]	; (8023034 <BSP_LCD_MspInit+0x1a0>)
 8022fcc:	f001 fd8c 	bl	8024ae8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fda:	4619      	mov	r1, r3
 8022fdc:	4816      	ldr	r0, [pc, #88]	; (8023038 <BSP_LCD_MspInit+0x1a4>)
 8022fde:	f001 fd83 	bl	8024ae8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022fe2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022fe6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022fec:	4619      	mov	r1, r3
 8022fee:	4813      	ldr	r0, [pc, #76]	; (802303c <BSP_LCD_MspInit+0x1a8>)
 8022ff0:	f001 fd7a 	bl	8024ae8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022ff4:	2303      	movs	r3, #3
 8022ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022ff8:	2309      	movs	r3, #9
 8022ffa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023000:	4619      	mov	r1, r3
 8023002:	480a      	ldr	r0, [pc, #40]	; (802302c <BSP_LCD_MspInit+0x198>)
 8023004:	f001 fd70 	bl	8024ae8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8023008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802300c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023012:	4619      	mov	r1, r3
 8023014:	4809      	ldr	r0, [pc, #36]	; (802303c <BSP_LCD_MspInit+0x1a8>)
 8023016:	f001 fd67 	bl	8024ae8 <HAL_GPIO_Init>
}
 802301a:	bf00      	nop
 802301c:	3738      	adds	r7, #56	; 0x38
 802301e:	46bd      	mov	sp, r7
 8023020:	bd80      	pop	{r7, pc}
 8023022:	bf00      	nop
 8023024:	40023800 	.word	0x40023800
 8023028:	40020000 	.word	0x40020000
 802302c:	40020400 	.word	0x40020400
 8023030:	40020800 	.word	0x40020800
 8023034:	40020c00 	.word	0x40020c00
 8023038:	40021400 	.word	0x40021400
 802303c:	40021800 	.word	0x40021800

08023040 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8023040:	b5b0      	push	{r4, r5, r7, lr}
 8023042:	b082      	sub	sp, #8
 8023044:	af00      	add	r7, sp, #0
 8023046:	4603      	mov	r3, r0
 8023048:	603a      	str	r2, [r7, #0]
 802304a:	80fb      	strh	r3, [r7, #6]
 802304c:	460b      	mov	r3, r1
 802304e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8023050:	4b0c      	ldr	r3, [pc, #48]	; (8023084 <BSP_LCD_DrawPixel+0x44>)
 8023052:	681b      	ldr	r3, [r3, #0]
 8023054:	4a0c      	ldr	r2, [pc, #48]	; (8023088 <BSP_LCD_DrawPixel+0x48>)
 8023056:	2134      	movs	r1, #52	; 0x34
 8023058:	fb01 f303 	mul.w	r3, r1, r3
 802305c:	4413      	add	r3, r2
 802305e:	335c      	adds	r3, #92	; 0x5c
 8023060:	681c      	ldr	r4, [r3, #0]
 8023062:	88bd      	ldrh	r5, [r7, #4]
 8023064:	f7ff fcb2 	bl	80229cc <BSP_LCD_GetXSize>
 8023068:	4603      	mov	r3, r0
 802306a:	fb03 f205 	mul.w	r2, r3, r5
 802306e:	88fb      	ldrh	r3, [r7, #6]
 8023070:	4413      	add	r3, r2
 8023072:	009b      	lsls	r3, r3, #2
 8023074:	4423      	add	r3, r4
 8023076:	461a      	mov	r2, r3
 8023078:	683b      	ldr	r3, [r7, #0]
 802307a:	6013      	str	r3, [r2, #0]
}
 802307c:	bf00      	nop
 802307e:	3708      	adds	r7, #8
 8023080:	46bd      	mov	sp, r7
 8023082:	bdb0      	pop	{r4, r5, r7, pc}
 8023084:	20000a18 	.word	0x20000a18
 8023088:	20000900 	.word	0x20000900

0802308c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 802308c:	b580      	push	{r7, lr}
 802308e:	b088      	sub	sp, #32
 8023090:	af00      	add	r7, sp, #0
 8023092:	4603      	mov	r3, r0
 8023094:	603a      	str	r2, [r7, #0]
 8023096:	80fb      	strh	r3, [r7, #6]
 8023098:	460b      	mov	r3, r1
 802309a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 802309c:	2300      	movs	r3, #0
 802309e:	61fb      	str	r3, [r7, #28]
 80230a0:	2300      	movs	r3, #0
 80230a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80230a4:	2300      	movs	r3, #0
 80230a6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80230a8:	4b53      	ldr	r3, [pc, #332]	; (80231f8 <DrawChar+0x16c>)
 80230aa:	681a      	ldr	r2, [r3, #0]
 80230ac:	4953      	ldr	r1, [pc, #332]	; (80231fc <DrawChar+0x170>)
 80230ae:	4613      	mov	r3, r2
 80230b0:	005b      	lsls	r3, r3, #1
 80230b2:	4413      	add	r3, r2
 80230b4:	009b      	lsls	r3, r3, #2
 80230b6:	440b      	add	r3, r1
 80230b8:	3308      	adds	r3, #8
 80230ba:	681b      	ldr	r3, [r3, #0]
 80230bc:	88db      	ldrh	r3, [r3, #6]
 80230be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80230c0:	4b4d      	ldr	r3, [pc, #308]	; (80231f8 <DrawChar+0x16c>)
 80230c2:	681a      	ldr	r2, [r3, #0]
 80230c4:	494d      	ldr	r1, [pc, #308]	; (80231fc <DrawChar+0x170>)
 80230c6:	4613      	mov	r3, r2
 80230c8:	005b      	lsls	r3, r3, #1
 80230ca:	4413      	add	r3, r2
 80230cc:	009b      	lsls	r3, r3, #2
 80230ce:	440b      	add	r3, r1
 80230d0:	3308      	adds	r3, #8
 80230d2:	681b      	ldr	r3, [r3, #0]
 80230d4:	889b      	ldrh	r3, [r3, #4]
 80230d6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80230d8:	8a3b      	ldrh	r3, [r7, #16]
 80230da:	3307      	adds	r3, #7
 80230dc:	2b00      	cmp	r3, #0
 80230de:	da00      	bge.n	80230e2 <DrawChar+0x56>
 80230e0:	3307      	adds	r3, #7
 80230e2:	10db      	asrs	r3, r3, #3
 80230e4:	b2db      	uxtb	r3, r3
 80230e6:	00db      	lsls	r3, r3, #3
 80230e8:	b2da      	uxtb	r2, r3
 80230ea:	8a3b      	ldrh	r3, [r7, #16]
 80230ec:	b2db      	uxtb	r3, r3
 80230ee:	1ad3      	subs	r3, r2, r3
 80230f0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80230f2:	2300      	movs	r3, #0
 80230f4:	61fb      	str	r3, [r7, #28]
 80230f6:	e076      	b.n	80231e6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80230f8:	8a3b      	ldrh	r3, [r7, #16]
 80230fa:	3307      	adds	r3, #7
 80230fc:	2b00      	cmp	r3, #0
 80230fe:	da00      	bge.n	8023102 <DrawChar+0x76>
 8023100:	3307      	adds	r3, #7
 8023102:	10db      	asrs	r3, r3, #3
 8023104:	461a      	mov	r2, r3
 8023106:	69fb      	ldr	r3, [r7, #28]
 8023108:	fb02 f303 	mul.w	r3, r2, r3
 802310c:	683a      	ldr	r2, [r7, #0]
 802310e:	4413      	add	r3, r2
 8023110:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8023112:	8a3b      	ldrh	r3, [r7, #16]
 8023114:	3307      	adds	r3, #7
 8023116:	2b00      	cmp	r3, #0
 8023118:	da00      	bge.n	802311c <DrawChar+0x90>
 802311a:	3307      	adds	r3, #7
 802311c:	10db      	asrs	r3, r3, #3
 802311e:	2b01      	cmp	r3, #1
 8023120:	d002      	beq.n	8023128 <DrawChar+0x9c>
 8023122:	2b02      	cmp	r3, #2
 8023124:	d004      	beq.n	8023130 <DrawChar+0xa4>
 8023126:	e00c      	b.n	8023142 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8023128:	68bb      	ldr	r3, [r7, #8]
 802312a:	781b      	ldrb	r3, [r3, #0]
 802312c:	617b      	str	r3, [r7, #20]
      break;
 802312e:	e016      	b.n	802315e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8023130:	68bb      	ldr	r3, [r7, #8]
 8023132:	781b      	ldrb	r3, [r3, #0]
 8023134:	021b      	lsls	r3, r3, #8
 8023136:	68ba      	ldr	r2, [r7, #8]
 8023138:	3201      	adds	r2, #1
 802313a:	7812      	ldrb	r2, [r2, #0]
 802313c:	4313      	orrs	r3, r2
 802313e:	617b      	str	r3, [r7, #20]
      break;
 8023140:	e00d      	b.n	802315e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8023142:	68bb      	ldr	r3, [r7, #8]
 8023144:	781b      	ldrb	r3, [r3, #0]
 8023146:	041a      	lsls	r2, r3, #16
 8023148:	68bb      	ldr	r3, [r7, #8]
 802314a:	3301      	adds	r3, #1
 802314c:	781b      	ldrb	r3, [r3, #0]
 802314e:	021b      	lsls	r3, r3, #8
 8023150:	4313      	orrs	r3, r2
 8023152:	68ba      	ldr	r2, [r7, #8]
 8023154:	3202      	adds	r2, #2
 8023156:	7812      	ldrb	r2, [r2, #0]
 8023158:	4313      	orrs	r3, r2
 802315a:	617b      	str	r3, [r7, #20]
      break;
 802315c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 802315e:	2300      	movs	r3, #0
 8023160:	61bb      	str	r3, [r7, #24]
 8023162:	e036      	b.n	80231d2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8023164:	8a3a      	ldrh	r2, [r7, #16]
 8023166:	69bb      	ldr	r3, [r7, #24]
 8023168:	1ad2      	subs	r2, r2, r3
 802316a:	7bfb      	ldrb	r3, [r7, #15]
 802316c:	4413      	add	r3, r2
 802316e:	3b01      	subs	r3, #1
 8023170:	2201      	movs	r2, #1
 8023172:	fa02 f303 	lsl.w	r3, r2, r3
 8023176:	461a      	mov	r2, r3
 8023178:	697b      	ldr	r3, [r7, #20]
 802317a:	4013      	ands	r3, r2
 802317c:	2b00      	cmp	r3, #0
 802317e:	d012      	beq.n	80231a6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8023180:	69bb      	ldr	r3, [r7, #24]
 8023182:	b29a      	uxth	r2, r3
 8023184:	88fb      	ldrh	r3, [r7, #6]
 8023186:	4413      	add	r3, r2
 8023188:	b298      	uxth	r0, r3
 802318a:	4b1b      	ldr	r3, [pc, #108]	; (80231f8 <DrawChar+0x16c>)
 802318c:	681a      	ldr	r2, [r3, #0]
 802318e:	491b      	ldr	r1, [pc, #108]	; (80231fc <DrawChar+0x170>)
 8023190:	4613      	mov	r3, r2
 8023192:	005b      	lsls	r3, r3, #1
 8023194:	4413      	add	r3, r2
 8023196:	009b      	lsls	r3, r3, #2
 8023198:	440b      	add	r3, r1
 802319a:	681a      	ldr	r2, [r3, #0]
 802319c:	88bb      	ldrh	r3, [r7, #4]
 802319e:	4619      	mov	r1, r3
 80231a0:	f7ff ff4e 	bl	8023040 <BSP_LCD_DrawPixel>
 80231a4:	e012      	b.n	80231cc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80231a6:	69bb      	ldr	r3, [r7, #24]
 80231a8:	b29a      	uxth	r2, r3
 80231aa:	88fb      	ldrh	r3, [r7, #6]
 80231ac:	4413      	add	r3, r2
 80231ae:	b298      	uxth	r0, r3
 80231b0:	4b11      	ldr	r3, [pc, #68]	; (80231f8 <DrawChar+0x16c>)
 80231b2:	681a      	ldr	r2, [r3, #0]
 80231b4:	4911      	ldr	r1, [pc, #68]	; (80231fc <DrawChar+0x170>)
 80231b6:	4613      	mov	r3, r2
 80231b8:	005b      	lsls	r3, r3, #1
 80231ba:	4413      	add	r3, r2
 80231bc:	009b      	lsls	r3, r3, #2
 80231be:	440b      	add	r3, r1
 80231c0:	3304      	adds	r3, #4
 80231c2:	681a      	ldr	r2, [r3, #0]
 80231c4:	88bb      	ldrh	r3, [r7, #4]
 80231c6:	4619      	mov	r1, r3
 80231c8:	f7ff ff3a 	bl	8023040 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80231cc:	69bb      	ldr	r3, [r7, #24]
 80231ce:	3301      	adds	r3, #1
 80231d0:	61bb      	str	r3, [r7, #24]
 80231d2:	8a3b      	ldrh	r3, [r7, #16]
 80231d4:	69ba      	ldr	r2, [r7, #24]
 80231d6:	429a      	cmp	r2, r3
 80231d8:	d3c4      	bcc.n	8023164 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80231da:	88bb      	ldrh	r3, [r7, #4]
 80231dc:	3301      	adds	r3, #1
 80231de:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80231e0:	69fb      	ldr	r3, [r7, #28]
 80231e2:	3301      	adds	r3, #1
 80231e4:	61fb      	str	r3, [r7, #28]
 80231e6:	8a7b      	ldrh	r3, [r7, #18]
 80231e8:	69fa      	ldr	r2, [r7, #28]
 80231ea:	429a      	cmp	r2, r3
 80231ec:	d384      	bcc.n	80230f8 <DrawChar+0x6c>
  }
}
 80231ee:	bf00      	nop
 80231f0:	bf00      	nop
 80231f2:	3720      	adds	r7, #32
 80231f4:	46bd      	mov	sp, r7
 80231f6:	bd80      	pop	{r7, pc}
 80231f8:	20000a18 	.word	0x20000a18
 80231fc:	20000a1c 	.word	0x20000a1c

08023200 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8023200:	b580      	push	{r7, lr}
 8023202:	b086      	sub	sp, #24
 8023204:	af02      	add	r7, sp, #8
 8023206:	60f8      	str	r0, [r7, #12]
 8023208:	60b9      	str	r1, [r7, #8]
 802320a:	607a      	str	r2, [r7, #4]
 802320c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 802320e:	4b16      	ldr	r3, [pc, #88]	; (8023268 <FillBuffer+0x68>)
 8023210:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8023214:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8023216:	4b14      	ldr	r3, [pc, #80]	; (8023268 <FillBuffer+0x68>)
 8023218:	2200      	movs	r2, #0
 802321a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 802321c:	4a12      	ldr	r2, [pc, #72]	; (8023268 <FillBuffer+0x68>)
 802321e:	69bb      	ldr	r3, [r7, #24]
 8023220:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8023222:	4b11      	ldr	r3, [pc, #68]	; (8023268 <FillBuffer+0x68>)
 8023224:	4a11      	ldr	r2, [pc, #68]	; (802326c <FillBuffer+0x6c>)
 8023226:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8023228:	480f      	ldr	r0, [pc, #60]	; (8023268 <FillBuffer+0x68>)
 802322a:	f000 fdbb 	bl	8023da4 <HAL_DMA2D_Init>
 802322e:	4603      	mov	r3, r0
 8023230:	2b00      	cmp	r3, #0
 8023232:	d115      	bne.n	8023260 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8023234:	68f9      	ldr	r1, [r7, #12]
 8023236:	480c      	ldr	r0, [pc, #48]	; (8023268 <FillBuffer+0x68>)
 8023238:	f001 f822 	bl	8024280 <HAL_DMA2D_ConfigLayer>
 802323c:	4603      	mov	r3, r0
 802323e:	2b00      	cmp	r3, #0
 8023240:	d10e      	bne.n	8023260 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8023242:	68ba      	ldr	r2, [r7, #8]
 8023244:	683b      	ldr	r3, [r7, #0]
 8023246:	9300      	str	r3, [sp, #0]
 8023248:	687b      	ldr	r3, [r7, #4]
 802324a:	69f9      	ldr	r1, [r7, #28]
 802324c:	4806      	ldr	r0, [pc, #24]	; (8023268 <FillBuffer+0x68>)
 802324e:	f000 fdf2 	bl	8023e36 <HAL_DMA2D_Start>
 8023252:	4603      	mov	r3, r0
 8023254:	2b00      	cmp	r3, #0
 8023256:	d103      	bne.n	8023260 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8023258:	210a      	movs	r1, #10
 802325a:	4803      	ldr	r0, [pc, #12]	; (8023268 <FillBuffer+0x68>)
 802325c:	f000 fe16 	bl	8023e8c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8023260:	bf00      	nop
 8023262:	3710      	adds	r7, #16
 8023264:	46bd      	mov	sp, r7
 8023266:	bd80      	pop	{r7, pc}
 8023268:	200009a8 	.word	0x200009a8
 802326c:	4002b000 	.word	0x4002b000

08023270 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8023270:	b580      	push	{r7, lr}
 8023272:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8023274:	4b29      	ldr	r3, [pc, #164]	; (802331c <BSP_SDRAM_Init+0xac>)
 8023276:	4a2a      	ldr	r2, [pc, #168]	; (8023320 <BSP_SDRAM_Init+0xb0>)
 8023278:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 802327a:	4b2a      	ldr	r3, [pc, #168]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 802327c:	2202      	movs	r2, #2
 802327e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8023280:	4b28      	ldr	r3, [pc, #160]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 8023282:	2207      	movs	r2, #7
 8023284:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8023286:	4b27      	ldr	r3, [pc, #156]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 8023288:	2204      	movs	r2, #4
 802328a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 802328c:	4b25      	ldr	r3, [pc, #148]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 802328e:	2207      	movs	r2, #7
 8023290:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8023292:	4b24      	ldr	r3, [pc, #144]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 8023294:	2202      	movs	r2, #2
 8023296:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8023298:	4b22      	ldr	r3, [pc, #136]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 802329a:	2202      	movs	r2, #2
 802329c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 802329e:	4b21      	ldr	r3, [pc, #132]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 80232a0:	2202      	movs	r2, #2
 80232a2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80232a4:	4b1d      	ldr	r3, [pc, #116]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232a6:	2201      	movs	r2, #1
 80232a8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80232aa:	4b1c      	ldr	r3, [pc, #112]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232ac:	2200      	movs	r2, #0
 80232ae:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80232b0:	4b1a      	ldr	r3, [pc, #104]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232b2:	2204      	movs	r2, #4
 80232b4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80232b6:	4b19      	ldr	r3, [pc, #100]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232b8:	2210      	movs	r2, #16
 80232ba:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80232bc:	4b17      	ldr	r3, [pc, #92]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232be:	2240      	movs	r2, #64	; 0x40
 80232c0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80232c2:	4b16      	ldr	r3, [pc, #88]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232c4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80232c8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80232ca:	4b14      	ldr	r3, [pc, #80]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232cc:	2200      	movs	r2, #0
 80232ce:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80232d0:	4b12      	ldr	r3, [pc, #72]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80232d6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80232d8:	4b10      	ldr	r3, [pc, #64]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232da:	2200      	movs	r2, #0
 80232dc:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80232de:	4b0f      	ldr	r3, [pc, #60]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80232e4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80232e6:	2100      	movs	r1, #0
 80232e8:	480c      	ldr	r0, [pc, #48]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232ea:	f000 f87f 	bl	80233ec <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80232ee:	490d      	ldr	r1, [pc, #52]	; (8023324 <BSP_SDRAM_Init+0xb4>)
 80232f0:	480a      	ldr	r0, [pc, #40]	; (802331c <BSP_SDRAM_Init+0xac>)
 80232f2:	f004 ff47 	bl	8028184 <HAL_SDRAM_Init>
 80232f6:	4603      	mov	r3, r0
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d003      	beq.n	8023304 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80232fc:	4b0a      	ldr	r3, [pc, #40]	; (8023328 <BSP_SDRAM_Init+0xb8>)
 80232fe:	2201      	movs	r2, #1
 8023300:	701a      	strb	r2, [r3, #0]
 8023302:	e002      	b.n	802330a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8023304:	4b08      	ldr	r3, [pc, #32]	; (8023328 <BSP_SDRAM_Init+0xb8>)
 8023306:	2200      	movs	r2, #0
 8023308:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 802330a:	f240 506a 	movw	r0, #1386	; 0x56a
 802330e:	f000 f80d 	bl	802332c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8023312:	4b05      	ldr	r3, [pc, #20]	; (8023328 <BSP_SDRAM_Init+0xb8>)
 8023314:	781b      	ldrb	r3, [r3, #0]
}
 8023316:	4618      	mov	r0, r3
 8023318:	bd80      	pop	{r7, pc}
 802331a:	bf00      	nop
 802331c:	20000a38 	.word	0x20000a38
 8023320:	a0000140 	.word	0xa0000140
 8023324:	20000a6c 	.word	0x20000a6c
 8023328:	20000054 	.word	0x20000054

0802332c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 802332c:	b580      	push	{r7, lr}
 802332e:	b084      	sub	sp, #16
 8023330:	af00      	add	r7, sp, #0
 8023332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8023334:	2300      	movs	r3, #0
 8023336:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8023338:	4b2a      	ldr	r3, [pc, #168]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802333a:	2201      	movs	r2, #1
 802333c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802333e:	4b29      	ldr	r3, [pc, #164]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023340:	2208      	movs	r2, #8
 8023342:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023344:	4b27      	ldr	r3, [pc, #156]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023346:	2201      	movs	r2, #1
 8023348:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 802334a:	4b26      	ldr	r3, [pc, #152]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802334c:	2200      	movs	r2, #0
 802334e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8023350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023354:	4923      	ldr	r1, [pc, #140]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023356:	4824      	ldr	r0, [pc, #144]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023358:	f004 ff48 	bl	80281ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 802335c:	2001      	movs	r0, #1
 802335e:	f000 f993 	bl	8023688 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8023362:	4b20      	ldr	r3, [pc, #128]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023364:	2202      	movs	r2, #2
 8023366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023368:	4b1e      	ldr	r3, [pc, #120]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802336a:	2208      	movs	r2, #8
 802336c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 802336e:	4b1d      	ldr	r3, [pc, #116]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023370:	2201      	movs	r2, #1
 8023372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023374:	4b1b      	ldr	r3, [pc, #108]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023376:	2200      	movs	r2, #0
 8023378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 802337a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802337e:	4919      	ldr	r1, [pc, #100]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023380:	4819      	ldr	r0, [pc, #100]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023382:	f004 ff33 	bl	80281ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8023386:	4b17      	ldr	r3, [pc, #92]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023388:	2203      	movs	r2, #3
 802338a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802338c:	4b15      	ldr	r3, [pc, #84]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802338e:	2208      	movs	r2, #8
 8023390:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8023392:	4b14      	ldr	r3, [pc, #80]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023394:	2204      	movs	r2, #4
 8023396:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8023398:	4b12      	ldr	r3, [pc, #72]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802339a:	2200      	movs	r2, #0
 802339c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 802339e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233a2:	4910      	ldr	r1, [pc, #64]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233a4:	4810      	ldr	r0, [pc, #64]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233a6:	f004 ff21 	bl	80281ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80233aa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80233ae:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80233b0:	4b0c      	ldr	r3, [pc, #48]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b2:	2204      	movs	r2, #4
 80233b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80233b6:	4b0b      	ldr	r3, [pc, #44]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233b8:	2208      	movs	r2, #8
 80233ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80233bc:	4b09      	ldr	r3, [pc, #36]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233be:	2201      	movs	r2, #1
 80233c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80233c2:	68fb      	ldr	r3, [r7, #12]
 80233c4:	4a07      	ldr	r2, [pc, #28]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233c6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80233c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80233cc:	4905      	ldr	r1, [pc, #20]	; (80233e4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80233ce:	4806      	ldr	r0, [pc, #24]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233d0:	f004 ff0c 	bl	80281ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80233d4:	6879      	ldr	r1, [r7, #4]
 80233d6:	4804      	ldr	r0, [pc, #16]	; (80233e8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80233d8:	f004 ff3d 	bl	8028256 <HAL_SDRAM_ProgramRefreshRate>
}
 80233dc:	bf00      	nop
 80233de:	3710      	adds	r7, #16
 80233e0:	46bd      	mov	sp, r7
 80233e2:	bd80      	pop	{r7, pc}
 80233e4:	20000a88 	.word	0x20000a88
 80233e8:	20000a38 	.word	0x20000a38

080233ec <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80233ec:	b580      	push	{r7, lr}
 80233ee:	b090      	sub	sp, #64	; 0x40
 80233f0:	af00      	add	r7, sp, #0
 80233f2:	6078      	str	r0, [r7, #4]
 80233f4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80233f6:	687b      	ldr	r3, [r7, #4]
 80233f8:	2b00      	cmp	r3, #0
 80233fa:	f000 80ec 	beq.w	80235d6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80233fe:	2300      	movs	r3, #0
 8023400:	62bb      	str	r3, [r7, #40]	; 0x28
 8023402:	4b77      	ldr	r3, [pc, #476]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023406:	4a76      	ldr	r2, [pc, #472]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023408:	f043 0301 	orr.w	r3, r3, #1
 802340c:	6393      	str	r3, [r2, #56]	; 0x38
 802340e:	4b74      	ldr	r3, [pc, #464]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023412:	f003 0301 	and.w	r3, r3, #1
 8023416:	62bb      	str	r3, [r7, #40]	; 0x28
 8023418:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 802341a:	2300      	movs	r3, #0
 802341c:	627b      	str	r3, [r7, #36]	; 0x24
 802341e:	4b70      	ldr	r3, [pc, #448]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023422:	4a6f      	ldr	r2, [pc, #444]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023428:	6313      	str	r3, [r2, #48]	; 0x30
 802342a:	4b6d      	ldr	r3, [pc, #436]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 802342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023432:	627b      	str	r3, [r7, #36]	; 0x24
 8023434:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023436:	2300      	movs	r3, #0
 8023438:	623b      	str	r3, [r7, #32]
 802343a:	4b69      	ldr	r3, [pc, #420]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 802343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802343e:	4a68      	ldr	r2, [pc, #416]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023440:	f043 0302 	orr.w	r3, r3, #2
 8023444:	6313      	str	r3, [r2, #48]	; 0x30
 8023446:	4b66      	ldr	r3, [pc, #408]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802344a:	f003 0302 	and.w	r3, r3, #2
 802344e:	623b      	str	r3, [r7, #32]
 8023450:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023452:	2300      	movs	r3, #0
 8023454:	61fb      	str	r3, [r7, #28]
 8023456:	4b62      	ldr	r3, [pc, #392]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802345a:	4a61      	ldr	r2, [pc, #388]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 802345c:	f043 0304 	orr.w	r3, r3, #4
 8023460:	6313      	str	r3, [r2, #48]	; 0x30
 8023462:	4b5f      	ldr	r3, [pc, #380]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023466:	f003 0304 	and.w	r3, r3, #4
 802346a:	61fb      	str	r3, [r7, #28]
 802346c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802346e:	2300      	movs	r3, #0
 8023470:	61bb      	str	r3, [r7, #24]
 8023472:	4b5b      	ldr	r3, [pc, #364]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023476:	4a5a      	ldr	r2, [pc, #360]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023478:	f043 0308 	orr.w	r3, r3, #8
 802347c:	6313      	str	r3, [r2, #48]	; 0x30
 802347e:	4b58      	ldr	r3, [pc, #352]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023482:	f003 0308 	and.w	r3, r3, #8
 8023486:	61bb      	str	r3, [r7, #24]
 8023488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802348a:	2300      	movs	r3, #0
 802348c:	617b      	str	r3, [r7, #20]
 802348e:	4b54      	ldr	r3, [pc, #336]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023492:	4a53      	ldr	r2, [pc, #332]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 8023494:	f043 0310 	orr.w	r3, r3, #16
 8023498:	6313      	str	r3, [r2, #48]	; 0x30
 802349a:	4b51      	ldr	r3, [pc, #324]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 802349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802349e:	f003 0310 	and.w	r3, r3, #16
 80234a2:	617b      	str	r3, [r7, #20]
 80234a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80234a6:	2300      	movs	r3, #0
 80234a8:	613b      	str	r3, [r7, #16]
 80234aa:	4b4d      	ldr	r3, [pc, #308]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ae:	4a4c      	ldr	r2, [pc, #304]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234b0:	f043 0320 	orr.w	r3, r3, #32
 80234b4:	6313      	str	r3, [r2, #48]	; 0x30
 80234b6:	4b4a      	ldr	r3, [pc, #296]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ba:	f003 0320 	and.w	r3, r3, #32
 80234be:	613b      	str	r3, [r7, #16]
 80234c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80234c2:	2300      	movs	r3, #0
 80234c4:	60fb      	str	r3, [r7, #12]
 80234c6:	4b46      	ldr	r3, [pc, #280]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234ca:	4a45      	ldr	r2, [pc, #276]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234d0:	6313      	str	r3, [r2, #48]	; 0x30
 80234d2:	4b43      	ldr	r3, [pc, #268]	; (80235e0 <BSP_SDRAM_MspInit+0x1f4>)
 80234d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80234d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80234da:	60fb      	str	r3, [r7, #12]
 80234dc:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80234de:	2302      	movs	r3, #2
 80234e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80234e2:	2302      	movs	r3, #2
 80234e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80234e6:	2300      	movs	r3, #0
 80234e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80234ea:	230c      	movs	r3, #12
 80234ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80234ee:	2360      	movs	r3, #96	; 0x60
 80234f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80234f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80234f6:	4619      	mov	r1, r3
 80234f8:	483a      	ldr	r0, [pc, #232]	; (80235e4 <BSP_SDRAM_MspInit+0x1f8>)
 80234fa:	f001 faf5 	bl	8024ae8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80234fe:	2301      	movs	r3, #1
 8023500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8023502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023506:	4619      	mov	r1, r3
 8023508:	4837      	ldr	r0, [pc, #220]	; (80235e8 <BSP_SDRAM_MspInit+0x1fc>)
 802350a:	f001 faed 	bl	8024ae8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 802350e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8023512:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8023514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023518:	4619      	mov	r1, r3
 802351a:	4834      	ldr	r0, [pc, #208]	; (80235ec <BSP_SDRAM_MspInit+0x200>)
 802351c:	f001 fae4 	bl	8024ae8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8023520:	f64f 7383 	movw	r3, #65411	; 0xff83
 8023524:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8023526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802352a:	4619      	mov	r1, r3
 802352c:	4830      	ldr	r0, [pc, #192]	; (80235f0 <BSP_SDRAM_MspInit+0x204>)
 802352e:	f001 fadb 	bl	8024ae8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8023532:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8023536:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8023538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802353c:	4619      	mov	r1, r3
 802353e:	482d      	ldr	r0, [pc, #180]	; (80235f4 <BSP_SDRAM_MspInit+0x208>)
 8023540:	f001 fad2 	bl	8024ae8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8023544:	f248 1333 	movw	r3, #33075	; 0x8133
 8023548:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802354a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802354e:	4619      	mov	r1, r3
 8023550:	4829      	ldr	r0, [pc, #164]	; (80235f8 <BSP_SDRAM_MspInit+0x20c>)
 8023552:	f001 fac9 	bl	8024ae8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8023556:	4b29      	ldr	r3, [pc, #164]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023558:	2200      	movs	r2, #0
 802355a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 802355c:	4b27      	ldr	r3, [pc, #156]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 802355e:	2280      	movs	r2, #128	; 0x80
 8023560:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8023562:	4b26      	ldr	r3, [pc, #152]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023568:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 802356a:	4b24      	ldr	r3, [pc, #144]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 802356c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023570:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8023572:	4b22      	ldr	r3, [pc, #136]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023578:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 802357a:	4b20      	ldr	r3, [pc, #128]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 802357c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023580:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8023582:	4b1e      	ldr	r3, [pc, #120]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023584:	2200      	movs	r2, #0
 8023586:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8023588:	4b1c      	ldr	r3, [pc, #112]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 802358a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802358e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8023590:	4b1a      	ldr	r3, [pc, #104]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023592:	2200      	movs	r2, #0
 8023594:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8023596:	4b19      	ldr	r3, [pc, #100]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 8023598:	2203      	movs	r2, #3
 802359a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 802359c:	4b17      	ldr	r3, [pc, #92]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 802359e:	2200      	movs	r2, #0
 80235a0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80235a2:	4b16      	ldr	r3, [pc, #88]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235a4:	2200      	movs	r2, #0
 80235a6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80235a8:	4b14      	ldr	r3, [pc, #80]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235aa:	4a15      	ldr	r2, [pc, #84]	; (8023600 <BSP_SDRAM_MspInit+0x214>)
 80235ac:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80235ae:	687b      	ldr	r3, [r7, #4]
 80235b0:	4a12      	ldr	r2, [pc, #72]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235b2:	631a      	str	r2, [r3, #48]	; 0x30
 80235b4:	4a11      	ldr	r2, [pc, #68]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235b6:	687b      	ldr	r3, [r7, #4]
 80235b8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80235ba:	4810      	ldr	r0, [pc, #64]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235bc:	f000 fa50 	bl	8023a60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80235c0:	480e      	ldr	r0, [pc, #56]	; (80235fc <BSP_SDRAM_MspInit+0x210>)
 80235c2:	f000 f99f 	bl	8023904 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80235c6:	2200      	movs	r2, #0
 80235c8:	210f      	movs	r1, #15
 80235ca:	2038      	movs	r0, #56	; 0x38
 80235cc:	f000 f94f 	bl	802386e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80235d0:	2038      	movs	r0, #56	; 0x38
 80235d2:	f000 f968 	bl	80238a6 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80235d6:	bf00      	nop
 80235d8:	3740      	adds	r7, #64	; 0x40
 80235da:	46bd      	mov	sp, r7
 80235dc:	bd80      	pop	{r7, pc}
 80235de:	bf00      	nop
 80235e0:	40023800 	.word	0x40023800
 80235e4:	40020400 	.word	0x40020400
 80235e8:	40020800 	.word	0x40020800
 80235ec:	40020c00 	.word	0x40020c00
 80235f0:	40021000 	.word	0x40021000
 80235f4:	40021400 	.word	0x40021400
 80235f8:	40021800 	.word	0x40021800
 80235fc:	20000a98 	.word	0x20000a98
 8023600:	40026410 	.word	0x40026410

08023604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023604:	b580      	push	{r7, lr}
 8023606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8023608:	4b0e      	ldr	r3, [pc, #56]	; (8023644 <HAL_Init+0x40>)
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	4a0d      	ldr	r2, [pc, #52]	; (8023644 <HAL_Init+0x40>)
 802360e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023614:	4b0b      	ldr	r3, [pc, #44]	; (8023644 <HAL_Init+0x40>)
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	4a0a      	ldr	r2, [pc, #40]	; (8023644 <HAL_Init+0x40>)
 802361a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802361e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023620:	4b08      	ldr	r3, [pc, #32]	; (8023644 <HAL_Init+0x40>)
 8023622:	681b      	ldr	r3, [r3, #0]
 8023624:	4a07      	ldr	r2, [pc, #28]	; (8023644 <HAL_Init+0x40>)
 8023626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802362a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802362c:	2003      	movs	r0, #3
 802362e:	f000 f913 	bl	8023858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8023632:	200f      	movs	r0, #15
 8023634:	f7fe fc38 	bl	8021ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8023638:	f7fe f85e 	bl	80216f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802363c:	2300      	movs	r3, #0
}
 802363e:	4618      	mov	r0, r3
 8023640:	bd80      	pop	{r7, pc}
 8023642:	bf00      	nop
 8023644:	40023c00 	.word	0x40023c00

08023648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8023648:	b480      	push	{r7}
 802364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802364c:	4b06      	ldr	r3, [pc, #24]	; (8023668 <HAL_IncTick+0x20>)
 802364e:	781b      	ldrb	r3, [r3, #0]
 8023650:	461a      	mov	r2, r3
 8023652:	4b06      	ldr	r3, [pc, #24]	; (802366c <HAL_IncTick+0x24>)
 8023654:	681b      	ldr	r3, [r3, #0]
 8023656:	4413      	add	r3, r2
 8023658:	4a04      	ldr	r2, [pc, #16]	; (802366c <HAL_IncTick+0x24>)
 802365a:	6013      	str	r3, [r2, #0]
}
 802365c:	bf00      	nop
 802365e:	46bd      	mov	sp, r7
 8023660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023664:	4770      	bx	lr
 8023666:	bf00      	nop
 8023668:	2000005c 	.word	0x2000005c
 802366c:	20000af8 	.word	0x20000af8

08023670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8023670:	b480      	push	{r7}
 8023672:	af00      	add	r7, sp, #0
  return uwTick;
 8023674:	4b03      	ldr	r3, [pc, #12]	; (8023684 <HAL_GetTick+0x14>)
 8023676:	681b      	ldr	r3, [r3, #0]
}
 8023678:	4618      	mov	r0, r3
 802367a:	46bd      	mov	sp, r7
 802367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023680:	4770      	bx	lr
 8023682:	bf00      	nop
 8023684:	20000af8 	.word	0x20000af8

08023688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8023688:	b580      	push	{r7, lr}
 802368a:	b084      	sub	sp, #16
 802368c:	af00      	add	r7, sp, #0
 802368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8023690:	f7ff ffee 	bl	8023670 <HAL_GetTick>
 8023694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8023696:	687b      	ldr	r3, [r7, #4]
 8023698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802369a:	68fb      	ldr	r3, [r7, #12]
 802369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80236a0:	d005      	beq.n	80236ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80236a2:	4b0a      	ldr	r3, [pc, #40]	; (80236cc <HAL_Delay+0x44>)
 80236a4:	781b      	ldrb	r3, [r3, #0]
 80236a6:	461a      	mov	r2, r3
 80236a8:	68fb      	ldr	r3, [r7, #12]
 80236aa:	4413      	add	r3, r2
 80236ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80236ae:	bf00      	nop
 80236b0:	f7ff ffde 	bl	8023670 <HAL_GetTick>
 80236b4:	4602      	mov	r2, r0
 80236b6:	68bb      	ldr	r3, [r7, #8]
 80236b8:	1ad3      	subs	r3, r2, r3
 80236ba:	68fa      	ldr	r2, [r7, #12]
 80236bc:	429a      	cmp	r2, r3
 80236be:	d8f7      	bhi.n	80236b0 <HAL_Delay+0x28>
  {
  }
}
 80236c0:	bf00      	nop
 80236c2:	bf00      	nop
 80236c4:	3710      	adds	r7, #16
 80236c6:	46bd      	mov	sp, r7
 80236c8:	bd80      	pop	{r7, pc}
 80236ca:	bf00      	nop
 80236cc:	2000005c 	.word	0x2000005c

080236d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80236d0:	b480      	push	{r7}
 80236d2:	b085      	sub	sp, #20
 80236d4:	af00      	add	r7, sp, #0
 80236d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	f003 0307 	and.w	r3, r3, #7
 80236de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80236e0:	4b0c      	ldr	r3, [pc, #48]	; (8023714 <__NVIC_SetPriorityGrouping+0x44>)
 80236e2:	68db      	ldr	r3, [r3, #12]
 80236e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80236e6:	68ba      	ldr	r2, [r7, #8]
 80236e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80236ec:	4013      	ands	r3, r2
 80236ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80236f0:	68fb      	ldr	r3, [r7, #12]
 80236f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80236f4:	68bb      	ldr	r3, [r7, #8]
 80236f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80236f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80236fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8023702:	4a04      	ldr	r2, [pc, #16]	; (8023714 <__NVIC_SetPriorityGrouping+0x44>)
 8023704:	68bb      	ldr	r3, [r7, #8]
 8023706:	60d3      	str	r3, [r2, #12]
}
 8023708:	bf00      	nop
 802370a:	3714      	adds	r7, #20
 802370c:	46bd      	mov	sp, r7
 802370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023712:	4770      	bx	lr
 8023714:	e000ed00 	.word	0xe000ed00

08023718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8023718:	b480      	push	{r7}
 802371a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802371c:	4b04      	ldr	r3, [pc, #16]	; (8023730 <__NVIC_GetPriorityGrouping+0x18>)
 802371e:	68db      	ldr	r3, [r3, #12]
 8023720:	0a1b      	lsrs	r3, r3, #8
 8023722:	f003 0307 	and.w	r3, r3, #7
}
 8023726:	4618      	mov	r0, r3
 8023728:	46bd      	mov	sp, r7
 802372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802372e:	4770      	bx	lr
 8023730:	e000ed00 	.word	0xe000ed00

08023734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023734:	b480      	push	{r7}
 8023736:	b083      	sub	sp, #12
 8023738:	af00      	add	r7, sp, #0
 802373a:	4603      	mov	r3, r0
 802373c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023742:	2b00      	cmp	r3, #0
 8023744:	db0b      	blt.n	802375e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8023746:	79fb      	ldrb	r3, [r7, #7]
 8023748:	f003 021f 	and.w	r2, r3, #31
 802374c:	4907      	ldr	r1, [pc, #28]	; (802376c <__NVIC_EnableIRQ+0x38>)
 802374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023752:	095b      	lsrs	r3, r3, #5
 8023754:	2001      	movs	r0, #1
 8023756:	fa00 f202 	lsl.w	r2, r0, r2
 802375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 802375e:	bf00      	nop
 8023760:	370c      	adds	r7, #12
 8023762:	46bd      	mov	sp, r7
 8023764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023768:	4770      	bx	lr
 802376a:	bf00      	nop
 802376c:	e000e100 	.word	0xe000e100

08023770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023770:	b480      	push	{r7}
 8023772:	b083      	sub	sp, #12
 8023774:	af00      	add	r7, sp, #0
 8023776:	4603      	mov	r3, r0
 8023778:	6039      	str	r1, [r7, #0]
 802377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023780:	2b00      	cmp	r3, #0
 8023782:	db0a      	blt.n	802379a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023784:	683b      	ldr	r3, [r7, #0]
 8023786:	b2da      	uxtb	r2, r3
 8023788:	490c      	ldr	r1, [pc, #48]	; (80237bc <__NVIC_SetPriority+0x4c>)
 802378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802378e:	0112      	lsls	r2, r2, #4
 8023790:	b2d2      	uxtb	r2, r2
 8023792:	440b      	add	r3, r1
 8023794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8023798:	e00a      	b.n	80237b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802379a:	683b      	ldr	r3, [r7, #0]
 802379c:	b2da      	uxtb	r2, r3
 802379e:	4908      	ldr	r1, [pc, #32]	; (80237c0 <__NVIC_SetPriority+0x50>)
 80237a0:	79fb      	ldrb	r3, [r7, #7]
 80237a2:	f003 030f 	and.w	r3, r3, #15
 80237a6:	3b04      	subs	r3, #4
 80237a8:	0112      	lsls	r2, r2, #4
 80237aa:	b2d2      	uxtb	r2, r2
 80237ac:	440b      	add	r3, r1
 80237ae:	761a      	strb	r2, [r3, #24]
}
 80237b0:	bf00      	nop
 80237b2:	370c      	adds	r7, #12
 80237b4:	46bd      	mov	sp, r7
 80237b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ba:	4770      	bx	lr
 80237bc:	e000e100 	.word	0xe000e100
 80237c0:	e000ed00 	.word	0xe000ed00

080237c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80237c4:	b480      	push	{r7}
 80237c6:	b089      	sub	sp, #36	; 0x24
 80237c8:	af00      	add	r7, sp, #0
 80237ca:	60f8      	str	r0, [r7, #12]
 80237cc:	60b9      	str	r1, [r7, #8]
 80237ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80237d0:	68fb      	ldr	r3, [r7, #12]
 80237d2:	f003 0307 	and.w	r3, r3, #7
 80237d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80237d8:	69fb      	ldr	r3, [r7, #28]
 80237da:	f1c3 0307 	rsb	r3, r3, #7
 80237de:	2b04      	cmp	r3, #4
 80237e0:	bf28      	it	cs
 80237e2:	2304      	movcs	r3, #4
 80237e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80237e6:	69fb      	ldr	r3, [r7, #28]
 80237e8:	3304      	adds	r3, #4
 80237ea:	2b06      	cmp	r3, #6
 80237ec:	d902      	bls.n	80237f4 <NVIC_EncodePriority+0x30>
 80237ee:	69fb      	ldr	r3, [r7, #28]
 80237f0:	3b03      	subs	r3, #3
 80237f2:	e000      	b.n	80237f6 <NVIC_EncodePriority+0x32>
 80237f4:	2300      	movs	r3, #0
 80237f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80237f8:	f04f 32ff 	mov.w	r2, #4294967295
 80237fc:	69bb      	ldr	r3, [r7, #24]
 80237fe:	fa02 f303 	lsl.w	r3, r2, r3
 8023802:	43da      	mvns	r2, r3
 8023804:	68bb      	ldr	r3, [r7, #8]
 8023806:	401a      	ands	r2, r3
 8023808:	697b      	ldr	r3, [r7, #20]
 802380a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802380c:	f04f 31ff 	mov.w	r1, #4294967295
 8023810:	697b      	ldr	r3, [r7, #20]
 8023812:	fa01 f303 	lsl.w	r3, r1, r3
 8023816:	43d9      	mvns	r1, r3
 8023818:	687b      	ldr	r3, [r7, #4]
 802381a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802381c:	4313      	orrs	r3, r2
         );
}
 802381e:	4618      	mov	r0, r3
 8023820:	3724      	adds	r7, #36	; 0x24
 8023822:	46bd      	mov	sp, r7
 8023824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023828:	4770      	bx	lr
	...

0802382c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 802382c:	b480      	push	{r7}
 802382e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8023830:	f3bf 8f4f 	dsb	sy
}
 8023834:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8023836:	4b06      	ldr	r3, [pc, #24]	; (8023850 <__NVIC_SystemReset+0x24>)
 8023838:	68db      	ldr	r3, [r3, #12]
 802383a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 802383e:	4904      	ldr	r1, [pc, #16]	; (8023850 <__NVIC_SystemReset+0x24>)
 8023840:	4b04      	ldr	r3, [pc, #16]	; (8023854 <__NVIC_SystemReset+0x28>)
 8023842:	4313      	orrs	r3, r2
 8023844:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8023846:	f3bf 8f4f 	dsb	sy
}
 802384a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 802384c:	bf00      	nop
 802384e:	e7fd      	b.n	802384c <__NVIC_SystemReset+0x20>
 8023850:	e000ed00 	.word	0xe000ed00
 8023854:	05fa0004 	.word	0x05fa0004

08023858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023858:	b580      	push	{r7, lr}
 802385a:	b082      	sub	sp, #8
 802385c:	af00      	add	r7, sp, #0
 802385e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023860:	6878      	ldr	r0, [r7, #4]
 8023862:	f7ff ff35 	bl	80236d0 <__NVIC_SetPriorityGrouping>
}
 8023866:	bf00      	nop
 8023868:	3708      	adds	r7, #8
 802386a:	46bd      	mov	sp, r7
 802386c:	bd80      	pop	{r7, pc}

0802386e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802386e:	b580      	push	{r7, lr}
 8023870:	b086      	sub	sp, #24
 8023872:	af00      	add	r7, sp, #0
 8023874:	4603      	mov	r3, r0
 8023876:	60b9      	str	r1, [r7, #8]
 8023878:	607a      	str	r2, [r7, #4]
 802387a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802387c:	2300      	movs	r3, #0
 802387e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8023880:	f7ff ff4a 	bl	8023718 <__NVIC_GetPriorityGrouping>
 8023884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023886:	687a      	ldr	r2, [r7, #4]
 8023888:	68b9      	ldr	r1, [r7, #8]
 802388a:	6978      	ldr	r0, [r7, #20]
 802388c:	f7ff ff9a 	bl	80237c4 <NVIC_EncodePriority>
 8023890:	4602      	mov	r2, r0
 8023892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023896:	4611      	mov	r1, r2
 8023898:	4618      	mov	r0, r3
 802389a:	f7ff ff69 	bl	8023770 <__NVIC_SetPriority>
}
 802389e:	bf00      	nop
 80238a0:	3718      	adds	r7, #24
 80238a2:	46bd      	mov	sp, r7
 80238a4:	bd80      	pop	{r7, pc}

080238a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80238a6:	b580      	push	{r7, lr}
 80238a8:	b082      	sub	sp, #8
 80238aa:	af00      	add	r7, sp, #0
 80238ac:	4603      	mov	r3, r0
 80238ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80238b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80238b4:	4618      	mov	r0, r3
 80238b6:	f7ff ff3d 	bl	8023734 <__NVIC_EnableIRQ>
}
 80238ba:	bf00      	nop
 80238bc:	3708      	adds	r7, #8
 80238be:	46bd      	mov	sp, r7
 80238c0:	bd80      	pop	{r7, pc}

080238c2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80238c2:	b580      	push	{r7, lr}
 80238c4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80238c6:	f7ff ffb1 	bl	802382c <__NVIC_SystemReset>

080238ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80238ca:	b580      	push	{r7, lr}
 80238cc:	b082      	sub	sp, #8
 80238ce:	af00      	add	r7, sp, #0
 80238d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80238d2:	687b      	ldr	r3, [r7, #4]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	d101      	bne.n	80238dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80238d8:	2301      	movs	r3, #1
 80238da:	e00e      	b.n	80238fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	795b      	ldrb	r3, [r3, #5]
 80238e0:	b2db      	uxtb	r3, r3
 80238e2:	2b00      	cmp	r3, #0
 80238e4:	d105      	bne.n	80238f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80238e6:	687b      	ldr	r3, [r7, #4]
 80238e8:	2200      	movs	r2, #0
 80238ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80238ec:	6878      	ldr	r0, [r7, #4]
 80238ee:	f7fd ff2b 	bl	8021748 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80238f2:	687b      	ldr	r3, [r7, #4]
 80238f4:	2201      	movs	r2, #1
 80238f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80238f8:	2300      	movs	r3, #0
}
 80238fa:	4618      	mov	r0, r3
 80238fc:	3708      	adds	r7, #8
 80238fe:	46bd      	mov	sp, r7
 8023900:	bd80      	pop	{r7, pc}
	...

08023904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023904:	b580      	push	{r7, lr}
 8023906:	b086      	sub	sp, #24
 8023908:	af00      	add	r7, sp, #0
 802390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802390c:	2300      	movs	r3, #0
 802390e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023910:	f7ff feae 	bl	8023670 <HAL_GetTick>
 8023914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	2b00      	cmp	r3, #0
 802391a:	d101      	bne.n	8023920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802391c:	2301      	movs	r3, #1
 802391e:	e099      	b.n	8023a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	2202      	movs	r2, #2
 8023924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8023928:	687b      	ldr	r3, [r7, #4]
 802392a:	2200      	movs	r2, #0
 802392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	681b      	ldr	r3, [r3, #0]
 8023934:	681a      	ldr	r2, [r3, #0]
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	681b      	ldr	r3, [r3, #0]
 802393a:	f022 0201 	bic.w	r2, r2, #1
 802393e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023940:	e00f      	b.n	8023962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023942:	f7ff fe95 	bl	8023670 <HAL_GetTick>
 8023946:	4602      	mov	r2, r0
 8023948:	693b      	ldr	r3, [r7, #16]
 802394a:	1ad3      	subs	r3, r2, r3
 802394c:	2b05      	cmp	r3, #5
 802394e:	d908      	bls.n	8023962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023950:	687b      	ldr	r3, [r7, #4]
 8023952:	2220      	movs	r2, #32
 8023954:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023956:	687b      	ldr	r3, [r7, #4]
 8023958:	2203      	movs	r2, #3
 802395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802395e:	2303      	movs	r3, #3
 8023960:	e078      	b.n	8023a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	f003 0301 	and.w	r3, r3, #1
 802396c:	2b00      	cmp	r3, #0
 802396e:	d1e8      	bne.n	8023942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	681b      	ldr	r3, [r3, #0]
 8023974:	681b      	ldr	r3, [r3, #0]
 8023976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8023978:	697a      	ldr	r2, [r7, #20]
 802397a:	4b38      	ldr	r3, [pc, #224]	; (8023a5c <HAL_DMA_Init+0x158>)
 802397c:	4013      	ands	r3, r2
 802397e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	685a      	ldr	r2, [r3, #4]
 8023984:	687b      	ldr	r3, [r7, #4]
 8023986:	689b      	ldr	r3, [r3, #8]
 8023988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 802398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023990:	687b      	ldr	r3, [r7, #4]
 8023992:	691b      	ldr	r3, [r3, #16]
 8023994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023996:	687b      	ldr	r3, [r7, #4]
 8023998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802399a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	699b      	ldr	r3, [r3, #24]
 80239a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239a2:	687b      	ldr	r3, [r7, #4]
 80239a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80239a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80239a8:	687b      	ldr	r3, [r7, #4]
 80239aa:	6a1b      	ldr	r3, [r3, #32]
 80239ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80239ae:	697a      	ldr	r2, [r7, #20]
 80239b0:	4313      	orrs	r3, r2
 80239b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239b4:	687b      	ldr	r3, [r7, #4]
 80239b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239b8:	2b04      	cmp	r3, #4
 80239ba:	d107      	bne.n	80239cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80239c0:	687b      	ldr	r3, [r7, #4]
 80239c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239c4:	4313      	orrs	r3, r2
 80239c6:	697a      	ldr	r2, [r7, #20]
 80239c8:	4313      	orrs	r3, r2
 80239ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80239cc:	687b      	ldr	r3, [r7, #4]
 80239ce:	681b      	ldr	r3, [r3, #0]
 80239d0:	697a      	ldr	r2, [r7, #20]
 80239d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80239d4:	687b      	ldr	r3, [r7, #4]
 80239d6:	681b      	ldr	r3, [r3, #0]
 80239d8:	695b      	ldr	r3, [r3, #20]
 80239da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80239dc:	697b      	ldr	r3, [r7, #20]
 80239de:	f023 0307 	bic.w	r3, r3, #7
 80239e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239e8:	697a      	ldr	r2, [r7, #20]
 80239ea:	4313      	orrs	r3, r2
 80239ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80239f2:	2b04      	cmp	r3, #4
 80239f4:	d117      	bne.n	8023a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80239f6:	687b      	ldr	r3, [r7, #4]
 80239f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80239fa:	697a      	ldr	r2, [r7, #20]
 80239fc:	4313      	orrs	r3, r2
 80239fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d00e      	beq.n	8023a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8023a08:	6878      	ldr	r0, [r7, #4]
 8023a0a:	f000 f94f 	bl	8023cac <DMA_CheckFifoParam>
 8023a0e:	4603      	mov	r3, r0
 8023a10:	2b00      	cmp	r3, #0
 8023a12:	d008      	beq.n	8023a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	2240      	movs	r2, #64	; 0x40
 8023a18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	2201      	movs	r2, #1
 8023a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023a22:	2301      	movs	r3, #1
 8023a24:	e016      	b.n	8023a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8023a26:	687b      	ldr	r3, [r7, #4]
 8023a28:	681b      	ldr	r3, [r3, #0]
 8023a2a:	697a      	ldr	r2, [r7, #20]
 8023a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023a2e:	6878      	ldr	r0, [r7, #4]
 8023a30:	f000 f906 	bl	8023c40 <DMA_CalcBaseAndBitshift>
 8023a34:	4603      	mov	r3, r0
 8023a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023a38:	687b      	ldr	r3, [r7, #4]
 8023a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a3c:	223f      	movs	r2, #63	; 0x3f
 8023a3e:	409a      	lsls	r2, r3
 8023a40:	68fb      	ldr	r3, [r7, #12]
 8023a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	2200      	movs	r2, #0
 8023a48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	2201      	movs	r2, #1
 8023a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023a52:	2300      	movs	r3, #0
}
 8023a54:	4618      	mov	r0, r3
 8023a56:	3718      	adds	r7, #24
 8023a58:	46bd      	mov	sp, r7
 8023a5a:	bd80      	pop	{r7, pc}
 8023a5c:	f010803f 	.word	0xf010803f

08023a60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023a60:	b580      	push	{r7, lr}
 8023a62:	b084      	sub	sp, #16
 8023a64:	af00      	add	r7, sp, #0
 8023a66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d101      	bne.n	8023a72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8023a6e:	2301      	movs	r3, #1
 8023a70:	e050      	b.n	8023b14 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023a78:	b2db      	uxtb	r3, r3
 8023a7a:	2b02      	cmp	r3, #2
 8023a7c:	d101      	bne.n	8023a82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8023a7e:	2302      	movs	r3, #2
 8023a80:	e048      	b.n	8023b14 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	681a      	ldr	r2, [r3, #0]
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	f022 0201 	bic.w	r2, r2, #1
 8023a90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8023a92:	687b      	ldr	r3, [r7, #4]
 8023a94:	681b      	ldr	r3, [r3, #0]
 8023a96:	2200      	movs	r2, #0
 8023a98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	681b      	ldr	r3, [r3, #0]
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	2200      	movs	r2, #0
 8023ab0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	2200      	movs	r2, #0
 8023ab8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	681b      	ldr	r3, [r3, #0]
 8023abe:	2221      	movs	r2, #33	; 0x21
 8023ac0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023ac2:	6878      	ldr	r0, [r7, #4]
 8023ac4:	f000 f8bc 	bl	8023c40 <DMA_CalcBaseAndBitshift>
 8023ac8:	4603      	mov	r3, r0
 8023aca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023acc:	687b      	ldr	r3, [r7, #4]
 8023ace:	2200      	movs	r2, #0
 8023ad0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023ad2:	687b      	ldr	r3, [r7, #4]
 8023ad4:	2200      	movs	r2, #0
 8023ad6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023ad8:	687b      	ldr	r3, [r7, #4]
 8023ada:	2200      	movs	r2, #0
 8023adc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	2200      	movs	r2, #0
 8023ae2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	2200      	movs	r2, #0
 8023ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	2200      	movs	r2, #0
 8023aee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023af4:	223f      	movs	r2, #63	; 0x3f
 8023af6:	409a      	lsls	r2, r3
 8023af8:	68fb      	ldr	r3, [r7, #12]
 8023afa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	2200      	movs	r2, #0
 8023b00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	2200      	movs	r2, #0
 8023b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	2200      	movs	r2, #0
 8023b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023b12:	2300      	movs	r3, #0
}
 8023b14:	4618      	mov	r0, r3
 8023b16:	3710      	adds	r7, #16
 8023b18:	46bd      	mov	sp, r7
 8023b1a:	bd80      	pop	{r7, pc}

08023b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8023b1c:	b580      	push	{r7, lr}
 8023b1e:	b084      	sub	sp, #16
 8023b20:	af00      	add	r7, sp, #0
 8023b22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023b28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8023b2a:	f7ff fda1 	bl	8023670 <HAL_GetTick>
 8023b2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b36:	b2db      	uxtb	r3, r3
 8023b38:	2b02      	cmp	r3, #2
 8023b3a:	d008      	beq.n	8023b4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	2280      	movs	r2, #128	; 0x80
 8023b40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	2200      	movs	r2, #0
 8023b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8023b4a:	2301      	movs	r3, #1
 8023b4c:	e052      	b.n	8023bf4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	681b      	ldr	r3, [r3, #0]
 8023b52:	681a      	ldr	r2, [r3, #0]
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	681b      	ldr	r3, [r3, #0]
 8023b58:	f022 0216 	bic.w	r2, r2, #22
 8023b5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	695a      	ldr	r2, [r3, #20]
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023b6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b72:	2b00      	cmp	r3, #0
 8023b74:	d103      	bne.n	8023b7e <HAL_DMA_Abort+0x62>
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	d007      	beq.n	8023b8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	681b      	ldr	r3, [r3, #0]
 8023b82:	681a      	ldr	r2, [r3, #0]
 8023b84:	687b      	ldr	r3, [r7, #4]
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	f022 0208 	bic.w	r2, r2, #8
 8023b8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	681a      	ldr	r2, [r3, #0]
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	681b      	ldr	r3, [r3, #0]
 8023b98:	f022 0201 	bic.w	r2, r2, #1
 8023b9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023b9e:	e013      	b.n	8023bc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023ba0:	f7ff fd66 	bl	8023670 <HAL_GetTick>
 8023ba4:	4602      	mov	r2, r0
 8023ba6:	68bb      	ldr	r3, [r7, #8]
 8023ba8:	1ad3      	subs	r3, r2, r3
 8023baa:	2b05      	cmp	r3, #5
 8023bac:	d90c      	bls.n	8023bc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023bae:	687b      	ldr	r3, [r7, #4]
 8023bb0:	2220      	movs	r2, #32
 8023bb2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023bb4:	687b      	ldr	r3, [r7, #4]
 8023bb6:	2203      	movs	r2, #3
 8023bb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023bbc:	687b      	ldr	r3, [r7, #4]
 8023bbe:	2200      	movs	r2, #0
 8023bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023bc4:	2303      	movs	r3, #3
 8023bc6:	e015      	b.n	8023bf4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023bc8:	687b      	ldr	r3, [r7, #4]
 8023bca:	681b      	ldr	r3, [r3, #0]
 8023bcc:	681b      	ldr	r3, [r3, #0]
 8023bce:	f003 0301 	and.w	r3, r3, #1
 8023bd2:	2b00      	cmp	r3, #0
 8023bd4:	d1e4      	bne.n	8023ba0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023bda:	223f      	movs	r2, #63	; 0x3f
 8023bdc:	409a      	lsls	r2, r3
 8023bde:	68fb      	ldr	r3, [r7, #12]
 8023be0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023be2:	687b      	ldr	r3, [r7, #4]
 8023be4:	2201      	movs	r2, #1
 8023be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	2200      	movs	r2, #0
 8023bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023bf2:	2300      	movs	r3, #0
}
 8023bf4:	4618      	mov	r0, r3
 8023bf6:	3710      	adds	r7, #16
 8023bf8:	46bd      	mov	sp, r7
 8023bfa:	bd80      	pop	{r7, pc}

08023bfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023bfc:	b480      	push	{r7}
 8023bfe:	b083      	sub	sp, #12
 8023c00:	af00      	add	r7, sp, #0
 8023c02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023c04:	687b      	ldr	r3, [r7, #4]
 8023c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023c0a:	b2db      	uxtb	r3, r3
 8023c0c:	2b02      	cmp	r3, #2
 8023c0e:	d004      	beq.n	8023c1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023c10:	687b      	ldr	r3, [r7, #4]
 8023c12:	2280      	movs	r2, #128	; 0x80
 8023c14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023c16:	2301      	movs	r3, #1
 8023c18:	e00c      	b.n	8023c34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	2205      	movs	r2, #5
 8023c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	681b      	ldr	r3, [r3, #0]
 8023c26:	681a      	ldr	r2, [r3, #0]
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	f022 0201 	bic.w	r2, r2, #1
 8023c30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023c32:	2300      	movs	r3, #0
}
 8023c34:	4618      	mov	r0, r3
 8023c36:	370c      	adds	r7, #12
 8023c38:	46bd      	mov	sp, r7
 8023c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c3e:	4770      	bx	lr

08023c40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023c40:	b480      	push	{r7}
 8023c42:	b085      	sub	sp, #20
 8023c44:	af00      	add	r7, sp, #0
 8023c46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	681b      	ldr	r3, [r3, #0]
 8023c4c:	b2db      	uxtb	r3, r3
 8023c4e:	3b10      	subs	r3, #16
 8023c50:	4a14      	ldr	r2, [pc, #80]	; (8023ca4 <DMA_CalcBaseAndBitshift+0x64>)
 8023c52:	fba2 2303 	umull	r2, r3, r2, r3
 8023c56:	091b      	lsrs	r3, r3, #4
 8023c58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023c5a:	4a13      	ldr	r2, [pc, #76]	; (8023ca8 <DMA_CalcBaseAndBitshift+0x68>)
 8023c5c:	68fb      	ldr	r3, [r7, #12]
 8023c5e:	4413      	add	r3, r2
 8023c60:	781b      	ldrb	r3, [r3, #0]
 8023c62:	461a      	mov	r2, r3
 8023c64:	687b      	ldr	r3, [r7, #4]
 8023c66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023c68:	68fb      	ldr	r3, [r7, #12]
 8023c6a:	2b03      	cmp	r3, #3
 8023c6c:	d909      	bls.n	8023c82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023c76:	f023 0303 	bic.w	r3, r3, #3
 8023c7a:	1d1a      	adds	r2, r3, #4
 8023c7c:	687b      	ldr	r3, [r7, #4]
 8023c7e:	659a      	str	r2, [r3, #88]	; 0x58
 8023c80:	e007      	b.n	8023c92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023c82:	687b      	ldr	r3, [r7, #4]
 8023c84:	681b      	ldr	r3, [r3, #0]
 8023c86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023c8a:	f023 0303 	bic.w	r3, r3, #3
 8023c8e:	687a      	ldr	r2, [r7, #4]
 8023c90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023c96:	4618      	mov	r0, r3
 8023c98:	3714      	adds	r7, #20
 8023c9a:	46bd      	mov	sp, r7
 8023c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ca0:	4770      	bx	lr
 8023ca2:	bf00      	nop
 8023ca4:	aaaaaaab 	.word	0xaaaaaaab
 8023ca8:	08031a30 	.word	0x08031a30

08023cac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023cac:	b480      	push	{r7}
 8023cae:	b085      	sub	sp, #20
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023cb4:	2300      	movs	r3, #0
 8023cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023cb8:	687b      	ldr	r3, [r7, #4]
 8023cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023cbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	699b      	ldr	r3, [r3, #24]
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d11f      	bne.n	8023d06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023cc6:	68bb      	ldr	r3, [r7, #8]
 8023cc8:	2b03      	cmp	r3, #3
 8023cca:	d856      	bhi.n	8023d7a <DMA_CheckFifoParam+0xce>
 8023ccc:	a201      	add	r2, pc, #4	; (adr r2, 8023cd4 <DMA_CheckFifoParam+0x28>)
 8023cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023cd2:	bf00      	nop
 8023cd4:	08023ce5 	.word	0x08023ce5
 8023cd8:	08023cf7 	.word	0x08023cf7
 8023cdc:	08023ce5 	.word	0x08023ce5
 8023ce0:	08023d7b 	.word	0x08023d7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023cec:	2b00      	cmp	r3, #0
 8023cee:	d046      	beq.n	8023d7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023cf0:	2301      	movs	r3, #1
 8023cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023cf4:	e043      	b.n	8023d7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cfa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023cfe:	d140      	bne.n	8023d82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023d00:	2301      	movs	r3, #1
 8023d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d04:	e03d      	b.n	8023d82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	699b      	ldr	r3, [r3, #24]
 8023d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023d0e:	d121      	bne.n	8023d54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023d10:	68bb      	ldr	r3, [r7, #8]
 8023d12:	2b03      	cmp	r3, #3
 8023d14:	d837      	bhi.n	8023d86 <DMA_CheckFifoParam+0xda>
 8023d16:	a201      	add	r2, pc, #4	; (adr r2, 8023d1c <DMA_CheckFifoParam+0x70>)
 8023d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023d1c:	08023d2d 	.word	0x08023d2d
 8023d20:	08023d33 	.word	0x08023d33
 8023d24:	08023d2d 	.word	0x08023d2d
 8023d28:	08023d45 	.word	0x08023d45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023d2c:	2301      	movs	r3, #1
 8023d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8023d30:	e030      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d32:	687b      	ldr	r3, [r7, #4]
 8023d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	d025      	beq.n	8023d8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023d3e:	2301      	movs	r3, #1
 8023d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023d42:	e022      	b.n	8023d8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023d44:	687b      	ldr	r3, [r7, #4]
 8023d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023d4c:	d11f      	bne.n	8023d8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023d4e:	2301      	movs	r3, #1
 8023d50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023d52:	e01c      	b.n	8023d8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023d54:	68bb      	ldr	r3, [r7, #8]
 8023d56:	2b02      	cmp	r3, #2
 8023d58:	d903      	bls.n	8023d62 <DMA_CheckFifoParam+0xb6>
 8023d5a:	68bb      	ldr	r3, [r7, #8]
 8023d5c:	2b03      	cmp	r3, #3
 8023d5e:	d003      	beq.n	8023d68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023d60:	e018      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023d62:	2301      	movs	r3, #1
 8023d64:	73fb      	strb	r3, [r7, #15]
      break;
 8023d66:	e015      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023d68:	687b      	ldr	r3, [r7, #4]
 8023d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023d6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d00e      	beq.n	8023d92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023d74:	2301      	movs	r3, #1
 8023d76:	73fb      	strb	r3, [r7, #15]
      break;
 8023d78:	e00b      	b.n	8023d92 <DMA_CheckFifoParam+0xe6>
      break;
 8023d7a:	bf00      	nop
 8023d7c:	e00a      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;
 8023d7e:	bf00      	nop
 8023d80:	e008      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;
 8023d82:	bf00      	nop
 8023d84:	e006      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;
 8023d86:	bf00      	nop
 8023d88:	e004      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;
 8023d8a:	bf00      	nop
 8023d8c:	e002      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;   
 8023d8e:	bf00      	nop
 8023d90:	e000      	b.n	8023d94 <DMA_CheckFifoParam+0xe8>
      break;
 8023d92:	bf00      	nop
    }
  } 
  
  return status; 
 8023d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8023d96:	4618      	mov	r0, r3
 8023d98:	3714      	adds	r7, #20
 8023d9a:	46bd      	mov	sp, r7
 8023d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023da0:	4770      	bx	lr
 8023da2:	bf00      	nop

08023da4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023da4:	b580      	push	{r7, lr}
 8023da6:	b082      	sub	sp, #8
 8023da8:	af00      	add	r7, sp, #0
 8023daa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	2b00      	cmp	r3, #0
 8023db0:	d101      	bne.n	8023db6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023db2:	2301      	movs	r3, #1
 8023db4:	e03b      	b.n	8023e2e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023dbc:	b2db      	uxtb	r3, r3
 8023dbe:	2b00      	cmp	r3, #0
 8023dc0:	d106      	bne.n	8023dd0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023dc2:	687b      	ldr	r3, [r7, #4]
 8023dc4:	2200      	movs	r2, #0
 8023dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023dca:	6878      	ldr	r0, [r7, #4]
 8023dcc:	f7fd fcde 	bl	802178c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	2202      	movs	r2, #2
 8023dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023dd8:	687b      	ldr	r3, [r7, #4]
 8023dda:	681b      	ldr	r3, [r3, #0]
 8023ddc:	681b      	ldr	r3, [r3, #0]
 8023dde:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023de2:	687b      	ldr	r3, [r7, #4]
 8023de4:	685a      	ldr	r2, [r3, #4]
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	681b      	ldr	r3, [r3, #0]
 8023dea:	430a      	orrs	r2, r1
 8023dec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023dee:	687b      	ldr	r3, [r7, #4]
 8023df0:	681b      	ldr	r3, [r3, #0]
 8023df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023df4:	f023 0107 	bic.w	r1, r3, #7
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	689a      	ldr	r2, [r3, #8]
 8023dfc:	687b      	ldr	r3, [r7, #4]
 8023dfe:	681b      	ldr	r3, [r3, #0]
 8023e00:	430a      	orrs	r2, r1
 8023e02:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023e04:	687b      	ldr	r3, [r7, #4]
 8023e06:	681b      	ldr	r3, [r3, #0]
 8023e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023e0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023e12:	687a      	ldr	r2, [r7, #4]
 8023e14:	68d1      	ldr	r1, [r2, #12]
 8023e16:	687a      	ldr	r2, [r7, #4]
 8023e18:	6812      	ldr	r2, [r2, #0]
 8023e1a:	430b      	orrs	r3, r1
 8023e1c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	2200      	movs	r2, #0
 8023e22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023e24:	687b      	ldr	r3, [r7, #4]
 8023e26:	2201      	movs	r2, #1
 8023e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023e2c:	2300      	movs	r3, #0
}
 8023e2e:	4618      	mov	r0, r3
 8023e30:	3708      	adds	r7, #8
 8023e32:	46bd      	mov	sp, r7
 8023e34:	bd80      	pop	{r7, pc}

08023e36 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023e36:	b580      	push	{r7, lr}
 8023e38:	b086      	sub	sp, #24
 8023e3a:	af02      	add	r7, sp, #8
 8023e3c:	60f8      	str	r0, [r7, #12]
 8023e3e:	60b9      	str	r1, [r7, #8]
 8023e40:	607a      	str	r2, [r7, #4]
 8023e42:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023e44:	68fb      	ldr	r3, [r7, #12]
 8023e46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023e4a:	2b01      	cmp	r3, #1
 8023e4c:	d101      	bne.n	8023e52 <HAL_DMA2D_Start+0x1c>
 8023e4e:	2302      	movs	r3, #2
 8023e50:	e018      	b.n	8023e84 <HAL_DMA2D_Start+0x4e>
 8023e52:	68fb      	ldr	r3, [r7, #12]
 8023e54:	2201      	movs	r2, #1
 8023e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023e5a:	68fb      	ldr	r3, [r7, #12]
 8023e5c:	2202      	movs	r2, #2
 8023e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023e62:	69bb      	ldr	r3, [r7, #24]
 8023e64:	9300      	str	r3, [sp, #0]
 8023e66:	683b      	ldr	r3, [r7, #0]
 8023e68:	687a      	ldr	r2, [r7, #4]
 8023e6a:	68b9      	ldr	r1, [r7, #8]
 8023e6c:	68f8      	ldr	r0, [r7, #12]
 8023e6e:	f000 fa99 	bl	80243a4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023e72:	68fb      	ldr	r3, [r7, #12]
 8023e74:	681b      	ldr	r3, [r3, #0]
 8023e76:	681a      	ldr	r2, [r3, #0]
 8023e78:	68fb      	ldr	r3, [r7, #12]
 8023e7a:	681b      	ldr	r3, [r3, #0]
 8023e7c:	f042 0201 	orr.w	r2, r2, #1
 8023e80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023e82:	2300      	movs	r3, #0
}
 8023e84:	4618      	mov	r0, r3
 8023e86:	3710      	adds	r7, #16
 8023e88:	46bd      	mov	sp, r7
 8023e8a:	bd80      	pop	{r7, pc}

08023e8c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023e8c:	b580      	push	{r7, lr}
 8023e8e:	b086      	sub	sp, #24
 8023e90:	af00      	add	r7, sp, #0
 8023e92:	6078      	str	r0, [r7, #4]
 8023e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023e96:	2300      	movs	r3, #0
 8023e98:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023e9a:	687b      	ldr	r3, [r7, #4]
 8023e9c:	681b      	ldr	r3, [r3, #0]
 8023e9e:	681b      	ldr	r3, [r3, #0]
 8023ea0:	f003 0301 	and.w	r3, r3, #1
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	d056      	beq.n	8023f56 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023ea8:	f7ff fbe2 	bl	8023670 <HAL_GetTick>
 8023eac:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023eae:	e04b      	b.n	8023f48 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	681b      	ldr	r3, [r3, #0]
 8023eb4:	685b      	ldr	r3, [r3, #4]
 8023eb6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023eb8:	68fb      	ldr	r3, [r7, #12]
 8023eba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d023      	beq.n	8023f0a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023ec2:	68fb      	ldr	r3, [r7, #12]
 8023ec4:	f003 0320 	and.w	r3, r3, #32
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d005      	beq.n	8023ed8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023ecc:	687b      	ldr	r3, [r7, #4]
 8023ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ed0:	f043 0202 	orr.w	r2, r3, #2
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023ed8:	68fb      	ldr	r3, [r7, #12]
 8023eda:	f003 0301 	and.w	r3, r3, #1
 8023ede:	2b00      	cmp	r3, #0
 8023ee0:	d005      	beq.n	8023eee <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ee6:	f043 0201 	orr.w	r2, r3, #1
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	681b      	ldr	r3, [r3, #0]
 8023ef2:	2221      	movs	r2, #33	; 0x21
 8023ef4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023ef6:	687b      	ldr	r3, [r7, #4]
 8023ef8:	2204      	movs	r2, #4
 8023efa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023efe:	687b      	ldr	r3, [r7, #4]
 8023f00:	2200      	movs	r2, #0
 8023f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023f06:	2301      	movs	r3, #1
 8023f08:	e0a5      	b.n	8024056 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023f0a:	683b      	ldr	r3, [r7, #0]
 8023f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f10:	d01a      	beq.n	8023f48 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023f12:	f7ff fbad 	bl	8023670 <HAL_GetTick>
 8023f16:	4602      	mov	r2, r0
 8023f18:	697b      	ldr	r3, [r7, #20]
 8023f1a:	1ad3      	subs	r3, r2, r3
 8023f1c:	683a      	ldr	r2, [r7, #0]
 8023f1e:	429a      	cmp	r2, r3
 8023f20:	d302      	bcc.n	8023f28 <HAL_DMA2D_PollForTransfer+0x9c>
 8023f22:	683b      	ldr	r3, [r7, #0]
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	d10f      	bne.n	8023f48 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f2c:	f043 0220 	orr.w	r2, r3, #32
 8023f30:	687b      	ldr	r3, [r7, #4]
 8023f32:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	2203      	movs	r2, #3
 8023f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023f3c:	687b      	ldr	r3, [r7, #4]
 8023f3e:	2200      	movs	r2, #0
 8023f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023f44:	2303      	movs	r3, #3
 8023f46:	e086      	b.n	8024056 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	685b      	ldr	r3, [r3, #4]
 8023f4e:	f003 0302 	and.w	r3, r3, #2
 8023f52:	2b00      	cmp	r3, #0
 8023f54:	d0ac      	beq.n	8023eb0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	69db      	ldr	r3, [r3, #28]
 8023f5c:	f003 0320 	and.w	r3, r3, #32
 8023f60:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	681b      	ldr	r3, [r3, #0]
 8023f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023f68:	f003 0320 	and.w	r3, r3, #32
 8023f6c:	693a      	ldr	r2, [r7, #16]
 8023f6e:	4313      	orrs	r3, r2
 8023f70:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023f72:	693b      	ldr	r3, [r7, #16]
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	d061      	beq.n	802403c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023f78:	f7ff fb7a 	bl	8023670 <HAL_GetTick>
 8023f7c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023f7e:	e056      	b.n	802402e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023f80:	687b      	ldr	r3, [r7, #4]
 8023f82:	681b      	ldr	r3, [r3, #0]
 8023f84:	685b      	ldr	r3, [r3, #4]
 8023f86:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023f88:	68fb      	ldr	r3, [r7, #12]
 8023f8a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023f8e:	2b00      	cmp	r3, #0
 8023f90:	d02e      	beq.n	8023ff0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023f92:	68fb      	ldr	r3, [r7, #12]
 8023f94:	f003 0308 	and.w	r3, r3, #8
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d005      	beq.n	8023fa8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fa0:	f043 0204 	orr.w	r2, r3, #4
 8023fa4:	687b      	ldr	r3, [r7, #4]
 8023fa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023fa8:	68fb      	ldr	r3, [r7, #12]
 8023faa:	f003 0320 	and.w	r3, r3, #32
 8023fae:	2b00      	cmp	r3, #0
 8023fb0:	d005      	beq.n	8023fbe <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023fb2:	687b      	ldr	r3, [r7, #4]
 8023fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fb6:	f043 0202 	orr.w	r2, r3, #2
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023fbe:	68fb      	ldr	r3, [r7, #12]
 8023fc0:	f003 0301 	and.w	r3, r3, #1
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d005      	beq.n	8023fd4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fcc:	f043 0201 	orr.w	r2, r3, #1
 8023fd0:	687b      	ldr	r3, [r7, #4]
 8023fd2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023fd4:	687b      	ldr	r3, [r7, #4]
 8023fd6:	681b      	ldr	r3, [r3, #0]
 8023fd8:	2229      	movs	r2, #41	; 0x29
 8023fda:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023fdc:	687b      	ldr	r3, [r7, #4]
 8023fde:	2204      	movs	r2, #4
 8023fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023fe4:	687b      	ldr	r3, [r7, #4]
 8023fe6:	2200      	movs	r2, #0
 8023fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023fec:	2301      	movs	r3, #1
 8023fee:	e032      	b.n	8024056 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023ff0:	683b      	ldr	r3, [r7, #0]
 8023ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023ff6:	d01a      	beq.n	802402e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023ff8:	f7ff fb3a 	bl	8023670 <HAL_GetTick>
 8023ffc:	4602      	mov	r2, r0
 8023ffe:	697b      	ldr	r3, [r7, #20]
 8024000:	1ad3      	subs	r3, r2, r3
 8024002:	683a      	ldr	r2, [r7, #0]
 8024004:	429a      	cmp	r2, r3
 8024006:	d302      	bcc.n	802400e <HAL_DMA2D_PollForTransfer+0x182>
 8024008:	683b      	ldr	r3, [r7, #0]
 802400a:	2b00      	cmp	r3, #0
 802400c:	d10f      	bne.n	802402e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024012:	f043 0220 	orr.w	r2, r3, #32
 8024016:	687b      	ldr	r3, [r7, #4]
 8024018:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 802401a:	687b      	ldr	r3, [r7, #4]
 802401c:	2203      	movs	r2, #3
 802401e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8024022:	687b      	ldr	r3, [r7, #4]
 8024024:	2200      	movs	r2, #0
 8024026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 802402a:	2303      	movs	r3, #3
 802402c:	e013      	b.n	8024056 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	681b      	ldr	r3, [r3, #0]
 8024032:	685b      	ldr	r3, [r3, #4]
 8024034:	f003 0310 	and.w	r3, r3, #16
 8024038:	2b00      	cmp	r3, #0
 802403a:	d0a1      	beq.n	8023f80 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 802403c:	687b      	ldr	r3, [r7, #4]
 802403e:	681b      	ldr	r3, [r3, #0]
 8024040:	2212      	movs	r2, #18
 8024042:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024044:	687b      	ldr	r3, [r7, #4]
 8024046:	2201      	movs	r2, #1
 8024048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	2200      	movs	r2, #0
 8024050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024054:	2300      	movs	r3, #0
}
 8024056:	4618      	mov	r0, r3
 8024058:	3718      	adds	r7, #24
 802405a:	46bd      	mov	sp, r7
 802405c:	bd80      	pop	{r7, pc}

0802405e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 802405e:	b580      	push	{r7, lr}
 8024060:	b084      	sub	sp, #16
 8024062:	af00      	add	r7, sp, #0
 8024064:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8024066:	687b      	ldr	r3, [r7, #4]
 8024068:	681b      	ldr	r3, [r3, #0]
 802406a:	685b      	ldr	r3, [r3, #4]
 802406c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	681b      	ldr	r3, [r3, #0]
 8024072:	681b      	ldr	r3, [r3, #0]
 8024074:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	f003 0301 	and.w	r3, r3, #1
 802407c:	2b00      	cmp	r3, #0
 802407e:	d026      	beq.n	80240ce <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8024080:	68bb      	ldr	r3, [r7, #8]
 8024082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024086:	2b00      	cmp	r3, #0
 8024088:	d021      	beq.n	80240ce <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 802408a:	687b      	ldr	r3, [r7, #4]
 802408c:	681b      	ldr	r3, [r3, #0]
 802408e:	681a      	ldr	r2, [r3, #0]
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024098:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802409e:	f043 0201 	orr.w	r2, r3, #1
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	2201      	movs	r2, #1
 80240ac:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80240ae:	687b      	ldr	r3, [r7, #4]
 80240b0:	2204      	movs	r2, #4
 80240b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	2200      	movs	r2, #0
 80240ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80240be:	687b      	ldr	r3, [r7, #4]
 80240c0:	695b      	ldr	r3, [r3, #20]
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	d003      	beq.n	80240ce <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	695b      	ldr	r3, [r3, #20]
 80240ca:	6878      	ldr	r0, [r7, #4]
 80240cc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80240ce:	68fb      	ldr	r3, [r7, #12]
 80240d0:	f003 0320 	and.w	r3, r3, #32
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d026      	beq.n	8024126 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80240d8:	68bb      	ldr	r3, [r7, #8]
 80240da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d021      	beq.n	8024126 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	681a      	ldr	r2, [r3, #0]
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	681b      	ldr	r3, [r3, #0]
 80240ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80240f0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80240f2:	687b      	ldr	r3, [r7, #4]
 80240f4:	681b      	ldr	r3, [r3, #0]
 80240f6:	2220      	movs	r2, #32
 80240f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80240fe:	f043 0202 	orr.w	r2, r3, #2
 8024102:	687b      	ldr	r3, [r7, #4]
 8024104:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8024106:	687b      	ldr	r3, [r7, #4]
 8024108:	2204      	movs	r2, #4
 802410a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	2200      	movs	r2, #0
 8024112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8024116:	687b      	ldr	r3, [r7, #4]
 8024118:	695b      	ldr	r3, [r3, #20]
 802411a:	2b00      	cmp	r3, #0
 802411c:	d003      	beq.n	8024126 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	695b      	ldr	r3, [r3, #20]
 8024122:	6878      	ldr	r0, [r7, #4]
 8024124:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8024126:	68fb      	ldr	r3, [r7, #12]
 8024128:	f003 0308 	and.w	r3, r3, #8
 802412c:	2b00      	cmp	r3, #0
 802412e:	d026      	beq.n	802417e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8024130:	68bb      	ldr	r3, [r7, #8]
 8024132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8024136:	2b00      	cmp	r3, #0
 8024138:	d021      	beq.n	802417e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	681b      	ldr	r3, [r3, #0]
 802413e:	681a      	ldr	r2, [r3, #0]
 8024140:	687b      	ldr	r3, [r7, #4]
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024148:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	681b      	ldr	r3, [r3, #0]
 802414e:	2208      	movs	r2, #8
 8024150:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8024152:	687b      	ldr	r3, [r7, #4]
 8024154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024156:	f043 0204 	orr.w	r2, r3, #4
 802415a:	687b      	ldr	r3, [r7, #4]
 802415c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	2204      	movs	r2, #4
 8024162:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024166:	687b      	ldr	r3, [r7, #4]
 8024168:	2200      	movs	r2, #0
 802416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802416e:	687b      	ldr	r3, [r7, #4]
 8024170:	695b      	ldr	r3, [r3, #20]
 8024172:	2b00      	cmp	r3, #0
 8024174:	d003      	beq.n	802417e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8024176:	687b      	ldr	r3, [r7, #4]
 8024178:	695b      	ldr	r3, [r3, #20]
 802417a:	6878      	ldr	r0, [r7, #4]
 802417c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 802417e:	68fb      	ldr	r3, [r7, #12]
 8024180:	f003 0304 	and.w	r3, r3, #4
 8024184:	2b00      	cmp	r3, #0
 8024186:	d013      	beq.n	80241b0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8024188:	68bb      	ldr	r3, [r7, #8]
 802418a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802418e:	2b00      	cmp	r3, #0
 8024190:	d00e      	beq.n	80241b0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	681a      	ldr	r2, [r3, #0]
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	681b      	ldr	r3, [r3, #0]
 802419c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80241a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80241a2:	687b      	ldr	r3, [r7, #4]
 80241a4:	681b      	ldr	r3, [r3, #0]
 80241a6:	2204      	movs	r2, #4
 80241a8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80241aa:	6878      	ldr	r0, [r7, #4]
 80241ac:	f000 f853 	bl	8024256 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80241b0:	68fb      	ldr	r3, [r7, #12]
 80241b2:	f003 0302 	and.w	r3, r3, #2
 80241b6:	2b00      	cmp	r3, #0
 80241b8:	d024      	beq.n	8024204 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80241ba:	68bb      	ldr	r3, [r7, #8]
 80241bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	d01f      	beq.n	8024204 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	681b      	ldr	r3, [r3, #0]
 80241c8:	681a      	ldr	r2, [r3, #0]
 80241ca:	687b      	ldr	r3, [r7, #4]
 80241cc:	681b      	ldr	r3, [r3, #0]
 80241ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80241d2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	681b      	ldr	r3, [r3, #0]
 80241d8:	2202      	movs	r2, #2
 80241da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80241e0:	687b      	ldr	r3, [r7, #4]
 80241e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	2201      	movs	r2, #1
 80241e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80241ec:	687b      	ldr	r3, [r7, #4]
 80241ee:	2200      	movs	r2, #0
 80241f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	691b      	ldr	r3, [r3, #16]
 80241f8:	2b00      	cmp	r3, #0
 80241fa:	d003      	beq.n	8024204 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	691b      	ldr	r3, [r3, #16]
 8024200:	6878      	ldr	r0, [r7, #4]
 8024202:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8024204:	68fb      	ldr	r3, [r7, #12]
 8024206:	f003 0310 	and.w	r3, r3, #16
 802420a:	2b00      	cmp	r3, #0
 802420c:	d01f      	beq.n	802424e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 802420e:	68bb      	ldr	r3, [r7, #8]
 8024210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024214:	2b00      	cmp	r3, #0
 8024216:	d01a      	beq.n	802424e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	681b      	ldr	r3, [r3, #0]
 802421c:	681a      	ldr	r2, [r3, #0]
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	681b      	ldr	r3, [r3, #0]
 8024222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8024226:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	681b      	ldr	r3, [r3, #0]
 802422c:	2210      	movs	r2, #16
 802422e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	2201      	movs	r2, #1
 802423c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024240:	687b      	ldr	r3, [r7, #4]
 8024242:	2200      	movs	r2, #0
 8024244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8024248:	6878      	ldr	r0, [r7, #4]
 802424a:	f000 f80e 	bl	802426a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 802424e:	bf00      	nop
 8024250:	3710      	adds	r7, #16
 8024252:	46bd      	mov	sp, r7
 8024254:	bd80      	pop	{r7, pc}

08024256 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8024256:	b480      	push	{r7}
 8024258:	b083      	sub	sp, #12
 802425a:	af00      	add	r7, sp, #0
 802425c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 802425e:	bf00      	nop
 8024260:	370c      	adds	r7, #12
 8024262:	46bd      	mov	sp, r7
 8024264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024268:	4770      	bx	lr

0802426a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802426a:	b480      	push	{r7}
 802426c:	b083      	sub	sp, #12
 802426e:	af00      	add	r7, sp, #0
 8024270:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8024272:	bf00      	nop
 8024274:	370c      	adds	r7, #12
 8024276:	46bd      	mov	sp, r7
 8024278:	f85d 7b04 	ldr.w	r7, [sp], #4
 802427c:	4770      	bx	lr
	...

08024280 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8024280:	b480      	push	{r7}
 8024282:	b087      	sub	sp, #28
 8024284:	af00      	add	r7, sp, #0
 8024286:	6078      	str	r0, [r7, #4]
 8024288:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	685b      	ldr	r3, [r3, #4]
 802428e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8024292:	687b      	ldr	r3, [r7, #4]
 8024294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8024298:	2b01      	cmp	r3, #1
 802429a:	d101      	bne.n	80242a0 <HAL_DMA2D_ConfigLayer+0x20>
 802429c:	2302      	movs	r3, #2
 802429e:	e079      	b.n	8024394 <HAL_DMA2D_ConfigLayer+0x114>
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	2201      	movs	r2, #1
 80242a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80242a8:	687b      	ldr	r3, [r7, #4]
 80242aa:	2202      	movs	r2, #2
 80242ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80242b0:	683b      	ldr	r3, [r7, #0]
 80242b2:	011b      	lsls	r3, r3, #4
 80242b4:	3318      	adds	r3, #24
 80242b6:	687a      	ldr	r2, [r7, #4]
 80242b8:	4413      	add	r3, r2
 80242ba:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80242bc:	693b      	ldr	r3, [r7, #16]
 80242be:	685a      	ldr	r2, [r3, #4]
 80242c0:	693b      	ldr	r3, [r7, #16]
 80242c2:	689b      	ldr	r3, [r3, #8]
 80242c4:	041b      	lsls	r3, r3, #16
 80242c6:	4313      	orrs	r3, r2
 80242c8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80242ca:	4b35      	ldr	r3, [pc, #212]	; (80243a0 <HAL_DMA2D_ConfigLayer+0x120>)
 80242cc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80242ce:	693b      	ldr	r3, [r7, #16]
 80242d0:	685b      	ldr	r3, [r3, #4]
 80242d2:	2b0a      	cmp	r3, #10
 80242d4:	d003      	beq.n	80242de <HAL_DMA2D_ConfigLayer+0x5e>
 80242d6:	693b      	ldr	r3, [r7, #16]
 80242d8:	685b      	ldr	r3, [r3, #4]
 80242da:	2b09      	cmp	r3, #9
 80242dc:	d107      	bne.n	80242ee <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80242de:	693b      	ldr	r3, [r7, #16]
 80242e0:	68db      	ldr	r3, [r3, #12]
 80242e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80242e6:	697a      	ldr	r2, [r7, #20]
 80242e8:	4313      	orrs	r3, r2
 80242ea:	617b      	str	r3, [r7, #20]
 80242ec:	e005      	b.n	80242fa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80242ee:	693b      	ldr	r3, [r7, #16]
 80242f0:	68db      	ldr	r3, [r3, #12]
 80242f2:	061b      	lsls	r3, r3, #24
 80242f4:	697a      	ldr	r2, [r7, #20]
 80242f6:	4313      	orrs	r3, r2
 80242f8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80242fa:	683b      	ldr	r3, [r7, #0]
 80242fc:	2b00      	cmp	r3, #0
 80242fe:	d120      	bne.n	8024342 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8024300:	687b      	ldr	r3, [r7, #4]
 8024302:	681b      	ldr	r3, [r3, #0]
 8024304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024306:	68fb      	ldr	r3, [r7, #12]
 8024308:	43db      	mvns	r3, r3
 802430a:	ea02 0103 	and.w	r1, r2, r3
 802430e:	687b      	ldr	r3, [r7, #4]
 8024310:	681b      	ldr	r3, [r3, #0]
 8024312:	697a      	ldr	r2, [r7, #20]
 8024314:	430a      	orrs	r2, r1
 8024316:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	681b      	ldr	r3, [r3, #0]
 802431c:	693a      	ldr	r2, [r7, #16]
 802431e:	6812      	ldr	r2, [r2, #0]
 8024320:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024322:	693b      	ldr	r3, [r7, #16]
 8024324:	685b      	ldr	r3, [r3, #4]
 8024326:	2b0a      	cmp	r3, #10
 8024328:	d003      	beq.n	8024332 <HAL_DMA2D_ConfigLayer+0xb2>
 802432a:	693b      	ldr	r3, [r7, #16]
 802432c:	685b      	ldr	r3, [r3, #4]
 802432e:	2b09      	cmp	r3, #9
 8024330:	d127      	bne.n	8024382 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8024332:	693b      	ldr	r3, [r7, #16]
 8024334:	68da      	ldr	r2, [r3, #12]
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	681b      	ldr	r3, [r3, #0]
 802433a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 802433e:	629a      	str	r2, [r3, #40]	; 0x28
 8024340:	e01f      	b.n	8024382 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	681b      	ldr	r3, [r3, #0]
 8024346:	69da      	ldr	r2, [r3, #28]
 8024348:	68fb      	ldr	r3, [r7, #12]
 802434a:	43db      	mvns	r3, r3
 802434c:	ea02 0103 	and.w	r1, r2, r3
 8024350:	687b      	ldr	r3, [r7, #4]
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	697a      	ldr	r2, [r7, #20]
 8024356:	430a      	orrs	r2, r1
 8024358:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	681b      	ldr	r3, [r3, #0]
 802435e:	693a      	ldr	r2, [r7, #16]
 8024360:	6812      	ldr	r2, [r2, #0]
 8024362:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024364:	693b      	ldr	r3, [r7, #16]
 8024366:	685b      	ldr	r3, [r3, #4]
 8024368:	2b0a      	cmp	r3, #10
 802436a:	d003      	beq.n	8024374 <HAL_DMA2D_ConfigLayer+0xf4>
 802436c:	693b      	ldr	r3, [r7, #16]
 802436e:	685b      	ldr	r3, [r3, #4]
 8024370:	2b09      	cmp	r3, #9
 8024372:	d106      	bne.n	8024382 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8024374:	693b      	ldr	r3, [r7, #16]
 8024376:	68da      	ldr	r2, [r3, #12]
 8024378:	687b      	ldr	r3, [r7, #4]
 802437a:	681b      	ldr	r3, [r3, #0]
 802437c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8024380:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	2201      	movs	r2, #1
 8024386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	2200      	movs	r2, #0
 802438e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8024392:	2300      	movs	r3, #0
}
 8024394:	4618      	mov	r0, r3
 8024396:	371c      	adds	r7, #28
 8024398:	46bd      	mov	sp, r7
 802439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802439e:	4770      	bx	lr
 80243a0:	ff03000f 	.word	0xff03000f

080243a4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80243a4:	b480      	push	{r7}
 80243a6:	b08b      	sub	sp, #44	; 0x2c
 80243a8:	af00      	add	r7, sp, #0
 80243aa:	60f8      	str	r0, [r7, #12]
 80243ac:	60b9      	str	r1, [r7, #8]
 80243ae:	607a      	str	r2, [r7, #4]
 80243b0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80243b2:	68fb      	ldr	r3, [r7, #12]
 80243b4:	681b      	ldr	r3, [r3, #0]
 80243b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80243b8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80243bc:	683b      	ldr	r3, [r7, #0]
 80243be:	041a      	lsls	r2, r3, #16
 80243c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80243c2:	431a      	orrs	r2, r3
 80243c4:	68fb      	ldr	r3, [r7, #12]
 80243c6:	681b      	ldr	r3, [r3, #0]
 80243c8:	430a      	orrs	r2, r1
 80243ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80243cc:	68fb      	ldr	r3, [r7, #12]
 80243ce:	681b      	ldr	r3, [r3, #0]
 80243d0:	687a      	ldr	r2, [r7, #4]
 80243d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80243d4:	68fb      	ldr	r3, [r7, #12]
 80243d6:	685b      	ldr	r3, [r3, #4]
 80243d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80243dc:	d174      	bne.n	80244c8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80243de:	68bb      	ldr	r3, [r7, #8]
 80243e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80243e4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80243e6:	68bb      	ldr	r3, [r7, #8]
 80243e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80243ec:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80243ee:	68bb      	ldr	r3, [r7, #8]
 80243f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80243f4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80243f6:	68bb      	ldr	r3, [r7, #8]
 80243f8:	b2db      	uxtb	r3, r3
 80243fa:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80243fc:	68fb      	ldr	r3, [r7, #12]
 80243fe:	689b      	ldr	r3, [r3, #8]
 8024400:	2b00      	cmp	r3, #0
 8024402:	d108      	bne.n	8024416 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8024404:	69ba      	ldr	r2, [r7, #24]
 8024406:	69fb      	ldr	r3, [r7, #28]
 8024408:	431a      	orrs	r2, r3
 802440a:	6a3b      	ldr	r3, [r7, #32]
 802440c:	4313      	orrs	r3, r2
 802440e:	697a      	ldr	r2, [r7, #20]
 8024410:	4313      	orrs	r3, r2
 8024412:	627b      	str	r3, [r7, #36]	; 0x24
 8024414:	e053      	b.n	80244be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8024416:	68fb      	ldr	r3, [r7, #12]
 8024418:	689b      	ldr	r3, [r3, #8]
 802441a:	2b01      	cmp	r3, #1
 802441c:	d106      	bne.n	802442c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 802441e:	69ba      	ldr	r2, [r7, #24]
 8024420:	69fb      	ldr	r3, [r7, #28]
 8024422:	4313      	orrs	r3, r2
 8024424:	697a      	ldr	r2, [r7, #20]
 8024426:	4313      	orrs	r3, r2
 8024428:	627b      	str	r3, [r7, #36]	; 0x24
 802442a:	e048      	b.n	80244be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 802442c:	68fb      	ldr	r3, [r7, #12]
 802442e:	689b      	ldr	r3, [r3, #8]
 8024430:	2b02      	cmp	r3, #2
 8024432:	d111      	bne.n	8024458 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8024434:	69fb      	ldr	r3, [r7, #28]
 8024436:	0cdb      	lsrs	r3, r3, #19
 8024438:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 802443a:	69bb      	ldr	r3, [r7, #24]
 802443c:	0a9b      	lsrs	r3, r3, #10
 802443e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024440:	697b      	ldr	r3, [r7, #20]
 8024442:	08db      	lsrs	r3, r3, #3
 8024444:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8024446:	69bb      	ldr	r3, [r7, #24]
 8024448:	015a      	lsls	r2, r3, #5
 802444a:	69fb      	ldr	r3, [r7, #28]
 802444c:	02db      	lsls	r3, r3, #11
 802444e:	4313      	orrs	r3, r2
 8024450:	697a      	ldr	r2, [r7, #20]
 8024452:	4313      	orrs	r3, r2
 8024454:	627b      	str	r3, [r7, #36]	; 0x24
 8024456:	e032      	b.n	80244be <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8024458:	68fb      	ldr	r3, [r7, #12]
 802445a:	689b      	ldr	r3, [r3, #8]
 802445c:	2b03      	cmp	r3, #3
 802445e:	d117      	bne.n	8024490 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8024460:	6a3b      	ldr	r3, [r7, #32]
 8024462:	0fdb      	lsrs	r3, r3, #31
 8024464:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8024466:	69fb      	ldr	r3, [r7, #28]
 8024468:	0cdb      	lsrs	r3, r3, #19
 802446a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 802446c:	69bb      	ldr	r3, [r7, #24]
 802446e:	0adb      	lsrs	r3, r3, #11
 8024470:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024472:	697b      	ldr	r3, [r7, #20]
 8024474:	08db      	lsrs	r3, r3, #3
 8024476:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8024478:	69bb      	ldr	r3, [r7, #24]
 802447a:	015a      	lsls	r2, r3, #5
 802447c:	69fb      	ldr	r3, [r7, #28]
 802447e:	029b      	lsls	r3, r3, #10
 8024480:	431a      	orrs	r2, r3
 8024482:	6a3b      	ldr	r3, [r7, #32]
 8024484:	03db      	lsls	r3, r3, #15
 8024486:	4313      	orrs	r3, r2
 8024488:	697a      	ldr	r2, [r7, #20]
 802448a:	4313      	orrs	r3, r2
 802448c:	627b      	str	r3, [r7, #36]	; 0x24
 802448e:	e016      	b.n	80244be <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8024490:	6a3b      	ldr	r3, [r7, #32]
 8024492:	0f1b      	lsrs	r3, r3, #28
 8024494:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8024496:	69fb      	ldr	r3, [r7, #28]
 8024498:	0d1b      	lsrs	r3, r3, #20
 802449a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 802449c:	69bb      	ldr	r3, [r7, #24]
 802449e:	0b1b      	lsrs	r3, r3, #12
 80244a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80244a2:	697b      	ldr	r3, [r7, #20]
 80244a4:	091b      	lsrs	r3, r3, #4
 80244a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80244a8:	69bb      	ldr	r3, [r7, #24]
 80244aa:	011a      	lsls	r2, r3, #4
 80244ac:	69fb      	ldr	r3, [r7, #28]
 80244ae:	021b      	lsls	r3, r3, #8
 80244b0:	431a      	orrs	r2, r3
 80244b2:	6a3b      	ldr	r3, [r7, #32]
 80244b4:	031b      	lsls	r3, r3, #12
 80244b6:	4313      	orrs	r3, r2
 80244b8:	697a      	ldr	r2, [r7, #20]
 80244ba:	4313      	orrs	r3, r2
 80244bc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80244be:	68fb      	ldr	r3, [r7, #12]
 80244c0:	681b      	ldr	r3, [r3, #0]
 80244c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80244c4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80244c6:	e003      	b.n	80244d0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80244c8:	68fb      	ldr	r3, [r7, #12]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	68ba      	ldr	r2, [r7, #8]
 80244ce:	60da      	str	r2, [r3, #12]
}
 80244d0:	bf00      	nop
 80244d2:	372c      	adds	r7, #44	; 0x2c
 80244d4:	46bd      	mov	sp, r7
 80244d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244da:	4770      	bx	lr

080244dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80244dc:	b580      	push	{r7, lr}
 80244de:	b086      	sub	sp, #24
 80244e0:	af00      	add	r7, sp, #0
 80244e2:	60f8      	str	r0, [r7, #12]
 80244e4:	60b9      	str	r1, [r7, #8]
 80244e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80244ea:	2301      	movs	r3, #1
 80244ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80244ee:	4b23      	ldr	r3, [pc, #140]	; (802457c <HAL_FLASH_Program+0xa0>)
 80244f0:	7e1b      	ldrb	r3, [r3, #24]
 80244f2:	2b01      	cmp	r3, #1
 80244f4:	d101      	bne.n	80244fa <HAL_FLASH_Program+0x1e>
 80244f6:	2302      	movs	r3, #2
 80244f8:	e03b      	b.n	8024572 <HAL_FLASH_Program+0x96>
 80244fa:	4b20      	ldr	r3, [pc, #128]	; (802457c <HAL_FLASH_Program+0xa0>)
 80244fc:	2201      	movs	r2, #1
 80244fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024500:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024504:	f000 f870 	bl	80245e8 <FLASH_WaitForLastOperation>
 8024508:	4603      	mov	r3, r0
 802450a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 802450c:	7dfb      	ldrb	r3, [r7, #23]
 802450e:	2b00      	cmp	r3, #0
 8024510:	d12b      	bne.n	802456a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8024512:	68fb      	ldr	r3, [r7, #12]
 8024514:	2b00      	cmp	r3, #0
 8024516:	d105      	bne.n	8024524 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8024518:	783b      	ldrb	r3, [r7, #0]
 802451a:	4619      	mov	r1, r3
 802451c:	68b8      	ldr	r0, [r7, #8]
 802451e:	f000 f91b 	bl	8024758 <FLASH_Program_Byte>
 8024522:	e016      	b.n	8024552 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8024524:	68fb      	ldr	r3, [r7, #12]
 8024526:	2b01      	cmp	r3, #1
 8024528:	d105      	bne.n	8024536 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802452a:	883b      	ldrh	r3, [r7, #0]
 802452c:	4619      	mov	r1, r3
 802452e:	68b8      	ldr	r0, [r7, #8]
 8024530:	f000 f8ee 	bl	8024710 <FLASH_Program_HalfWord>
 8024534:	e00d      	b.n	8024552 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8024536:	68fb      	ldr	r3, [r7, #12]
 8024538:	2b02      	cmp	r3, #2
 802453a:	d105      	bne.n	8024548 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802453c:	683b      	ldr	r3, [r7, #0]
 802453e:	4619      	mov	r1, r3
 8024540:	68b8      	ldr	r0, [r7, #8]
 8024542:	f000 f8c3 	bl	80246cc <FLASH_Program_Word>
 8024546:	e004      	b.n	8024552 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8024548:	e9d7 2300 	ldrd	r2, r3, [r7]
 802454c:	68b8      	ldr	r0, [r7, #8]
 802454e:	f000 f88b 	bl	8024668 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024552:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024556:	f000 f847 	bl	80245e8 <FLASH_WaitForLastOperation>
 802455a:	4603      	mov	r3, r0
 802455c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802455e:	4b08      	ldr	r3, [pc, #32]	; (8024580 <HAL_FLASH_Program+0xa4>)
 8024560:	691b      	ldr	r3, [r3, #16]
 8024562:	4a07      	ldr	r2, [pc, #28]	; (8024580 <HAL_FLASH_Program+0xa4>)
 8024564:	f023 0301 	bic.w	r3, r3, #1
 8024568:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802456a:	4b04      	ldr	r3, [pc, #16]	; (802457c <HAL_FLASH_Program+0xa0>)
 802456c:	2200      	movs	r2, #0
 802456e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8024570:	7dfb      	ldrb	r3, [r7, #23]
}
 8024572:	4618      	mov	r0, r3
 8024574:	3718      	adds	r7, #24
 8024576:	46bd      	mov	sp, r7
 8024578:	bd80      	pop	{r7, pc}
 802457a:	bf00      	nop
 802457c:	20000afc 	.word	0x20000afc
 8024580:	40023c00 	.word	0x40023c00

08024584 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8024584:	b480      	push	{r7}
 8024586:	b083      	sub	sp, #12
 8024588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802458a:	2300      	movs	r3, #0
 802458c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802458e:	4b0b      	ldr	r3, [pc, #44]	; (80245bc <HAL_FLASH_Unlock+0x38>)
 8024590:	691b      	ldr	r3, [r3, #16]
 8024592:	2b00      	cmp	r3, #0
 8024594:	da0b      	bge.n	80245ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8024596:	4b09      	ldr	r3, [pc, #36]	; (80245bc <HAL_FLASH_Unlock+0x38>)
 8024598:	4a09      	ldr	r2, [pc, #36]	; (80245c0 <HAL_FLASH_Unlock+0x3c>)
 802459a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 802459c:	4b07      	ldr	r3, [pc, #28]	; (80245bc <HAL_FLASH_Unlock+0x38>)
 802459e:	4a09      	ldr	r2, [pc, #36]	; (80245c4 <HAL_FLASH_Unlock+0x40>)
 80245a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80245a2:	4b06      	ldr	r3, [pc, #24]	; (80245bc <HAL_FLASH_Unlock+0x38>)
 80245a4:	691b      	ldr	r3, [r3, #16]
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	da01      	bge.n	80245ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80245aa:	2301      	movs	r3, #1
 80245ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80245ae:	79fb      	ldrb	r3, [r7, #7]
}
 80245b0:	4618      	mov	r0, r3
 80245b2:	370c      	adds	r7, #12
 80245b4:	46bd      	mov	sp, r7
 80245b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245ba:	4770      	bx	lr
 80245bc:	40023c00 	.word	0x40023c00
 80245c0:	45670123 	.word	0x45670123
 80245c4:	cdef89ab 	.word	0xcdef89ab

080245c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80245c8:	b480      	push	{r7}
 80245ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80245cc:	4b05      	ldr	r3, [pc, #20]	; (80245e4 <HAL_FLASH_Lock+0x1c>)
 80245ce:	691b      	ldr	r3, [r3, #16]
 80245d0:	4a04      	ldr	r2, [pc, #16]	; (80245e4 <HAL_FLASH_Lock+0x1c>)
 80245d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80245d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80245d8:	2300      	movs	r3, #0
}
 80245da:	4618      	mov	r0, r3
 80245dc:	46bd      	mov	sp, r7
 80245de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245e2:	4770      	bx	lr
 80245e4:	40023c00 	.word	0x40023c00

080245e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80245e8:	b580      	push	{r7, lr}
 80245ea:	b084      	sub	sp, #16
 80245ec:	af00      	add	r7, sp, #0
 80245ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80245f0:	2300      	movs	r3, #0
 80245f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80245f4:	4b1a      	ldr	r3, [pc, #104]	; (8024660 <FLASH_WaitForLastOperation+0x78>)
 80245f6:	2200      	movs	r2, #0
 80245f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80245fa:	f7ff f839 	bl	8023670 <HAL_GetTick>
 80245fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024600:	e010      	b.n	8024624 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8024602:	687b      	ldr	r3, [r7, #4]
 8024604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024608:	d00c      	beq.n	8024624 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802460a:	687b      	ldr	r3, [r7, #4]
 802460c:	2b00      	cmp	r3, #0
 802460e:	d007      	beq.n	8024620 <FLASH_WaitForLastOperation+0x38>
 8024610:	f7ff f82e 	bl	8023670 <HAL_GetTick>
 8024614:	4602      	mov	r2, r0
 8024616:	68fb      	ldr	r3, [r7, #12]
 8024618:	1ad3      	subs	r3, r2, r3
 802461a:	687a      	ldr	r2, [r7, #4]
 802461c:	429a      	cmp	r2, r3
 802461e:	d201      	bcs.n	8024624 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8024620:	2303      	movs	r3, #3
 8024622:	e019      	b.n	8024658 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024624:	4b0f      	ldr	r3, [pc, #60]	; (8024664 <FLASH_WaitForLastOperation+0x7c>)
 8024626:	68db      	ldr	r3, [r3, #12]
 8024628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802462c:	2b00      	cmp	r3, #0
 802462e:	d1e8      	bne.n	8024602 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8024630:	4b0c      	ldr	r3, [pc, #48]	; (8024664 <FLASH_WaitForLastOperation+0x7c>)
 8024632:	68db      	ldr	r3, [r3, #12]
 8024634:	f003 0301 	and.w	r3, r3, #1
 8024638:	2b00      	cmp	r3, #0
 802463a:	d002      	beq.n	8024642 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802463c:	4b09      	ldr	r3, [pc, #36]	; (8024664 <FLASH_WaitForLastOperation+0x7c>)
 802463e:	2201      	movs	r2, #1
 8024640:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8024642:	4b08      	ldr	r3, [pc, #32]	; (8024664 <FLASH_WaitForLastOperation+0x7c>)
 8024644:	68db      	ldr	r3, [r3, #12]
 8024646:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 802464a:	2b00      	cmp	r3, #0
 802464c:	d003      	beq.n	8024656 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802464e:	f000 f8a5 	bl	802479c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8024652:	2301      	movs	r3, #1
 8024654:	e000      	b.n	8024658 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8024656:	2300      	movs	r3, #0
  
}  
 8024658:	4618      	mov	r0, r3
 802465a:	3710      	adds	r7, #16
 802465c:	46bd      	mov	sp, r7
 802465e:	bd80      	pop	{r7, pc}
 8024660:	20000afc 	.word	0x20000afc
 8024664:	40023c00 	.word	0x40023c00

08024668 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8024668:	b480      	push	{r7}
 802466a:	b085      	sub	sp, #20
 802466c:	af00      	add	r7, sp, #0
 802466e:	60f8      	str	r0, [r7, #12]
 8024670:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024674:	4b14      	ldr	r3, [pc, #80]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 8024676:	691b      	ldr	r3, [r3, #16]
 8024678:	4a13      	ldr	r2, [pc, #76]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 802467a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802467e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8024680:	4b11      	ldr	r3, [pc, #68]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 8024682:	691b      	ldr	r3, [r3, #16]
 8024684:	4a10      	ldr	r2, [pc, #64]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 8024686:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802468a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802468c:	4b0e      	ldr	r3, [pc, #56]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 802468e:	691b      	ldr	r3, [r3, #16]
 8024690:	4a0d      	ldr	r2, [pc, #52]	; (80246c8 <FLASH_Program_DoubleWord+0x60>)
 8024692:	f043 0301 	orr.w	r3, r3, #1
 8024696:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8024698:	68fb      	ldr	r3, [r7, #12]
 802469a:	683a      	ldr	r2, [r7, #0]
 802469c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 802469e:	f3bf 8f6f 	isb	sy
}
 80246a2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80246a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80246a8:	f04f 0200 	mov.w	r2, #0
 80246ac:	f04f 0300 	mov.w	r3, #0
 80246b0:	000a      	movs	r2, r1
 80246b2:	2300      	movs	r3, #0
 80246b4:	68f9      	ldr	r1, [r7, #12]
 80246b6:	3104      	adds	r1, #4
 80246b8:	4613      	mov	r3, r2
 80246ba:	600b      	str	r3, [r1, #0]
}
 80246bc:	bf00      	nop
 80246be:	3714      	adds	r7, #20
 80246c0:	46bd      	mov	sp, r7
 80246c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246c6:	4770      	bx	lr
 80246c8:	40023c00 	.word	0x40023c00

080246cc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80246cc:	b480      	push	{r7}
 80246ce:	b083      	sub	sp, #12
 80246d0:	af00      	add	r7, sp, #0
 80246d2:	6078      	str	r0, [r7, #4]
 80246d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80246d6:	4b0d      	ldr	r3, [pc, #52]	; (802470c <FLASH_Program_Word+0x40>)
 80246d8:	691b      	ldr	r3, [r3, #16]
 80246da:	4a0c      	ldr	r2, [pc, #48]	; (802470c <FLASH_Program_Word+0x40>)
 80246dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80246e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80246e2:	4b0a      	ldr	r3, [pc, #40]	; (802470c <FLASH_Program_Word+0x40>)
 80246e4:	691b      	ldr	r3, [r3, #16]
 80246e6:	4a09      	ldr	r2, [pc, #36]	; (802470c <FLASH_Program_Word+0x40>)
 80246e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80246ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80246ee:	4b07      	ldr	r3, [pc, #28]	; (802470c <FLASH_Program_Word+0x40>)
 80246f0:	691b      	ldr	r3, [r3, #16]
 80246f2:	4a06      	ldr	r2, [pc, #24]	; (802470c <FLASH_Program_Word+0x40>)
 80246f4:	f043 0301 	orr.w	r3, r3, #1
 80246f8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	683a      	ldr	r2, [r7, #0]
 80246fe:	601a      	str	r2, [r3, #0]
}
 8024700:	bf00      	nop
 8024702:	370c      	adds	r7, #12
 8024704:	46bd      	mov	sp, r7
 8024706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802470a:	4770      	bx	lr
 802470c:	40023c00 	.word	0x40023c00

08024710 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8024710:	b480      	push	{r7}
 8024712:	b083      	sub	sp, #12
 8024714:	af00      	add	r7, sp, #0
 8024716:	6078      	str	r0, [r7, #4]
 8024718:	460b      	mov	r3, r1
 802471a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802471c:	4b0d      	ldr	r3, [pc, #52]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 802471e:	691b      	ldr	r3, [r3, #16]
 8024720:	4a0c      	ldr	r2, [pc, #48]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 8024722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8024728:	4b0a      	ldr	r3, [pc, #40]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 802472a:	691b      	ldr	r3, [r3, #16]
 802472c:	4a09      	ldr	r2, [pc, #36]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 802472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024734:	4b07      	ldr	r3, [pc, #28]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 8024736:	691b      	ldr	r3, [r3, #16]
 8024738:	4a06      	ldr	r2, [pc, #24]	; (8024754 <FLASH_Program_HalfWord+0x44>)
 802473a:	f043 0301 	orr.w	r3, r3, #1
 802473e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	887a      	ldrh	r2, [r7, #2]
 8024744:	801a      	strh	r2, [r3, #0]
}
 8024746:	bf00      	nop
 8024748:	370c      	adds	r7, #12
 802474a:	46bd      	mov	sp, r7
 802474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024750:	4770      	bx	lr
 8024752:	bf00      	nop
 8024754:	40023c00 	.word	0x40023c00

08024758 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8024758:	b480      	push	{r7}
 802475a:	b083      	sub	sp, #12
 802475c:	af00      	add	r7, sp, #0
 802475e:	6078      	str	r0, [r7, #4]
 8024760:	460b      	mov	r3, r1
 8024762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024764:	4b0c      	ldr	r3, [pc, #48]	; (8024798 <FLASH_Program_Byte+0x40>)
 8024766:	691b      	ldr	r3, [r3, #16]
 8024768:	4a0b      	ldr	r2, [pc, #44]	; (8024798 <FLASH_Program_Byte+0x40>)
 802476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802476e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8024770:	4b09      	ldr	r3, [pc, #36]	; (8024798 <FLASH_Program_Byte+0x40>)
 8024772:	4a09      	ldr	r2, [pc, #36]	; (8024798 <FLASH_Program_Byte+0x40>)
 8024774:	691b      	ldr	r3, [r3, #16]
 8024776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024778:	4b07      	ldr	r3, [pc, #28]	; (8024798 <FLASH_Program_Byte+0x40>)
 802477a:	691b      	ldr	r3, [r3, #16]
 802477c:	4a06      	ldr	r2, [pc, #24]	; (8024798 <FLASH_Program_Byte+0x40>)
 802477e:	f043 0301 	orr.w	r3, r3, #1
 8024782:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8024784:	687b      	ldr	r3, [r7, #4]
 8024786:	78fa      	ldrb	r2, [r7, #3]
 8024788:	701a      	strb	r2, [r3, #0]
}
 802478a:	bf00      	nop
 802478c:	370c      	adds	r7, #12
 802478e:	46bd      	mov	sp, r7
 8024790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024794:	4770      	bx	lr
 8024796:	bf00      	nop
 8024798:	40023c00 	.word	0x40023c00

0802479c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 802479c:	b480      	push	{r7}
 802479e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80247a0:	4b2f      	ldr	r3, [pc, #188]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247a2:	68db      	ldr	r3, [r3, #12]
 80247a4:	f003 0310 	and.w	r3, r3, #16
 80247a8:	2b00      	cmp	r3, #0
 80247aa:	d008      	beq.n	80247be <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80247ac:	4b2d      	ldr	r3, [pc, #180]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247ae:	69db      	ldr	r3, [r3, #28]
 80247b0:	f043 0310 	orr.w	r3, r3, #16
 80247b4:	4a2b      	ldr	r2, [pc, #172]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247b6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80247b8:	4b29      	ldr	r3, [pc, #164]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247ba:	2210      	movs	r2, #16
 80247bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80247be:	4b28      	ldr	r3, [pc, #160]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247c0:	68db      	ldr	r3, [r3, #12]
 80247c2:	f003 0320 	and.w	r3, r3, #32
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	d008      	beq.n	80247dc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80247ca:	4b26      	ldr	r3, [pc, #152]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247cc:	69db      	ldr	r3, [r3, #28]
 80247ce:	f043 0308 	orr.w	r3, r3, #8
 80247d2:	4a24      	ldr	r2, [pc, #144]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247d4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80247d6:	4b22      	ldr	r3, [pc, #136]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247d8:	2220      	movs	r2, #32
 80247da:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80247dc:	4b20      	ldr	r3, [pc, #128]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247de:	68db      	ldr	r3, [r3, #12]
 80247e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80247e4:	2b00      	cmp	r3, #0
 80247e6:	d008      	beq.n	80247fa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80247e8:	4b1e      	ldr	r3, [pc, #120]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247ea:	69db      	ldr	r3, [r3, #28]
 80247ec:	f043 0304 	orr.w	r3, r3, #4
 80247f0:	4a1c      	ldr	r2, [pc, #112]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 80247f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80247f4:	4b1a      	ldr	r3, [pc, #104]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247f6:	2240      	movs	r2, #64	; 0x40
 80247f8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80247fa:	4b19      	ldr	r3, [pc, #100]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 80247fc:	68db      	ldr	r3, [r3, #12]
 80247fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024802:	2b00      	cmp	r3, #0
 8024804:	d008      	beq.n	8024818 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8024806:	4b17      	ldr	r3, [pc, #92]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 8024808:	69db      	ldr	r3, [r3, #28]
 802480a:	f043 0302 	orr.w	r3, r3, #2
 802480e:	4a15      	ldr	r2, [pc, #84]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 8024810:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8024812:	4b13      	ldr	r3, [pc, #76]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 8024814:	2280      	movs	r2, #128	; 0x80
 8024816:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8024818:	4b11      	ldr	r3, [pc, #68]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 802481a:	68db      	ldr	r3, [r3, #12]
 802481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024820:	2b00      	cmp	r3, #0
 8024822:	d009      	beq.n	8024838 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8024824:	4b0f      	ldr	r3, [pc, #60]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 8024826:	69db      	ldr	r3, [r3, #28]
 8024828:	f043 0301 	orr.w	r3, r3, #1
 802482c:	4a0d      	ldr	r2, [pc, #52]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 802482e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8024830:	4b0b      	ldr	r3, [pc, #44]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 8024832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8024836:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8024838:	4b09      	ldr	r3, [pc, #36]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 802483a:	68db      	ldr	r3, [r3, #12]
 802483c:	f003 0302 	and.w	r3, r3, #2
 8024840:	2b00      	cmp	r3, #0
 8024842:	d008      	beq.n	8024856 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8024844:	4b07      	ldr	r3, [pc, #28]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 8024846:	69db      	ldr	r3, [r3, #28]
 8024848:	f043 0320 	orr.w	r3, r3, #32
 802484c:	4a05      	ldr	r2, [pc, #20]	; (8024864 <FLASH_SetErrorCode+0xc8>)
 802484e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8024850:	4b03      	ldr	r3, [pc, #12]	; (8024860 <FLASH_SetErrorCode+0xc4>)
 8024852:	2202      	movs	r2, #2
 8024854:	60da      	str	r2, [r3, #12]
  }
}
 8024856:	bf00      	nop
 8024858:	46bd      	mov	sp, r7
 802485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802485e:	4770      	bx	lr
 8024860:	40023c00 	.word	0x40023c00
 8024864:	20000afc 	.word	0x20000afc

08024868 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8024868:	b580      	push	{r7, lr}
 802486a:	b084      	sub	sp, #16
 802486c:	af00      	add	r7, sp, #0
 802486e:	6078      	str	r0, [r7, #4]
 8024870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8024872:	2301      	movs	r3, #1
 8024874:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8024876:	2300      	movs	r3, #0
 8024878:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802487a:	4b32      	ldr	r3, [pc, #200]	; (8024944 <HAL_FLASHEx_Erase+0xdc>)
 802487c:	7e1b      	ldrb	r3, [r3, #24]
 802487e:	2b01      	cmp	r3, #1
 8024880:	d101      	bne.n	8024886 <HAL_FLASHEx_Erase+0x1e>
 8024882:	2302      	movs	r3, #2
 8024884:	e05a      	b.n	802493c <HAL_FLASHEx_Erase+0xd4>
 8024886:	4b2f      	ldr	r3, [pc, #188]	; (8024944 <HAL_FLASHEx_Erase+0xdc>)
 8024888:	2201      	movs	r2, #1
 802488a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802488c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024890:	f7ff feaa 	bl	80245e8 <FLASH_WaitForLastOperation>
 8024894:	4603      	mov	r3, r0
 8024896:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8024898:	7bfb      	ldrb	r3, [r7, #15]
 802489a:	2b00      	cmp	r3, #0
 802489c:	d14a      	bne.n	8024934 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802489e:	683b      	ldr	r3, [r7, #0]
 80248a0:	f04f 32ff 	mov.w	r2, #4294967295
 80248a4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80248a6:	687b      	ldr	r3, [r7, #4]
 80248a8:	681b      	ldr	r3, [r3, #0]
 80248aa:	2b01      	cmp	r3, #1
 80248ac:	d117      	bne.n	80248de <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	691b      	ldr	r3, [r3, #16]
 80248b2:	b2da      	uxtb	r2, r3
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	685b      	ldr	r3, [r3, #4]
 80248b8:	4619      	mov	r1, r3
 80248ba:	4610      	mov	r0, r2
 80248bc:	f000 f846 	bl	802494c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248c4:	f7ff fe90 	bl	80245e8 <FLASH_WaitForLastOperation>
 80248c8:	4603      	mov	r3, r0
 80248ca:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80248cc:	4b1e      	ldr	r3, [pc, #120]	; (8024948 <HAL_FLASHEx_Erase+0xe0>)
 80248ce:	691b      	ldr	r3, [r3, #16]
 80248d0:	4a1d      	ldr	r2, [pc, #116]	; (8024948 <HAL_FLASHEx_Erase+0xe0>)
 80248d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80248d6:	f023 0304 	bic.w	r3, r3, #4
 80248da:	6113      	str	r3, [r2, #16]
 80248dc:	e028      	b.n	8024930 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80248de:	687b      	ldr	r3, [r7, #4]
 80248e0:	689b      	ldr	r3, [r3, #8]
 80248e2:	60bb      	str	r3, [r7, #8]
 80248e4:	e01c      	b.n	8024920 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80248e6:	687b      	ldr	r3, [r7, #4]
 80248e8:	691b      	ldr	r3, [r3, #16]
 80248ea:	b2db      	uxtb	r3, r3
 80248ec:	4619      	mov	r1, r3
 80248ee:	68b8      	ldr	r0, [r7, #8]
 80248f0:	f000 f866 	bl	80249c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80248f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80248f8:	f7ff fe76 	bl	80245e8 <FLASH_WaitForLastOperation>
 80248fc:	4603      	mov	r3, r0
 80248fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8024900:	4b11      	ldr	r3, [pc, #68]	; (8024948 <HAL_FLASHEx_Erase+0xe0>)
 8024902:	691b      	ldr	r3, [r3, #16]
 8024904:	4a10      	ldr	r2, [pc, #64]	; (8024948 <HAL_FLASHEx_Erase+0xe0>)
 8024906:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802490a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 802490c:	7bfb      	ldrb	r3, [r7, #15]
 802490e:	2b00      	cmp	r3, #0
 8024910:	d003      	beq.n	802491a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8024912:	683b      	ldr	r3, [r7, #0]
 8024914:	68ba      	ldr	r2, [r7, #8]
 8024916:	601a      	str	r2, [r3, #0]
          break;
 8024918:	e00a      	b.n	8024930 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802491a:	68bb      	ldr	r3, [r7, #8]
 802491c:	3301      	adds	r3, #1
 802491e:	60bb      	str	r3, [r7, #8]
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	68da      	ldr	r2, [r3, #12]
 8024924:	687b      	ldr	r3, [r7, #4]
 8024926:	689b      	ldr	r3, [r3, #8]
 8024928:	4413      	add	r3, r2
 802492a:	68ba      	ldr	r2, [r7, #8]
 802492c:	429a      	cmp	r2, r3
 802492e:	d3da      	bcc.n	80248e6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8024930:	f000 f894 	bl	8024a5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024934:	4b03      	ldr	r3, [pc, #12]	; (8024944 <HAL_FLASHEx_Erase+0xdc>)
 8024936:	2200      	movs	r2, #0
 8024938:	761a      	strb	r2, [r3, #24]

  return status;
 802493a:	7bfb      	ldrb	r3, [r7, #15]
}
 802493c:	4618      	mov	r0, r3
 802493e:	3710      	adds	r7, #16
 8024940:	46bd      	mov	sp, r7
 8024942:	bd80      	pop	{r7, pc}
 8024944:	20000afc 	.word	0x20000afc
 8024948:	40023c00 	.word	0x40023c00

0802494c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 802494c:	b480      	push	{r7}
 802494e:	b083      	sub	sp, #12
 8024950:	af00      	add	r7, sp, #0
 8024952:	4603      	mov	r3, r0
 8024954:	6039      	str	r1, [r7, #0]
 8024956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024958:	4b18      	ldr	r3, [pc, #96]	; (80249bc <FLASH_MassErase+0x70>)
 802495a:	691b      	ldr	r3, [r3, #16]
 802495c:	4a17      	ldr	r2, [pc, #92]	; (80249bc <FLASH_MassErase+0x70>)
 802495e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024962:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8024964:	683b      	ldr	r3, [r7, #0]
 8024966:	2b03      	cmp	r3, #3
 8024968:	d108      	bne.n	802497c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 802496a:	4b14      	ldr	r3, [pc, #80]	; (80249bc <FLASH_MassErase+0x70>)
 802496c:	691b      	ldr	r3, [r3, #16]
 802496e:	4a13      	ldr	r2, [pc, #76]	; (80249bc <FLASH_MassErase+0x70>)
 8024970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8024974:	f043 0304 	orr.w	r3, r3, #4
 8024978:	6113      	str	r3, [r2, #16]
 802497a:	e00f      	b.n	802499c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 802497c:	683b      	ldr	r3, [r7, #0]
 802497e:	2b01      	cmp	r3, #1
 8024980:	d106      	bne.n	8024990 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8024982:	4b0e      	ldr	r3, [pc, #56]	; (80249bc <FLASH_MassErase+0x70>)
 8024984:	691b      	ldr	r3, [r3, #16]
 8024986:	4a0d      	ldr	r2, [pc, #52]	; (80249bc <FLASH_MassErase+0x70>)
 8024988:	f043 0304 	orr.w	r3, r3, #4
 802498c:	6113      	str	r3, [r2, #16]
 802498e:	e005      	b.n	802499c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8024990:	4b0a      	ldr	r3, [pc, #40]	; (80249bc <FLASH_MassErase+0x70>)
 8024992:	691b      	ldr	r3, [r3, #16]
 8024994:	4a09      	ldr	r2, [pc, #36]	; (80249bc <FLASH_MassErase+0x70>)
 8024996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802499a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 802499c:	4b07      	ldr	r3, [pc, #28]	; (80249bc <FLASH_MassErase+0x70>)
 802499e:	691a      	ldr	r2, [r3, #16]
 80249a0:	79fb      	ldrb	r3, [r7, #7]
 80249a2:	021b      	lsls	r3, r3, #8
 80249a4:	4313      	orrs	r3, r2
 80249a6:	4a05      	ldr	r2, [pc, #20]	; (80249bc <FLASH_MassErase+0x70>)
 80249a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80249ac:	6113      	str	r3, [r2, #16]
}
 80249ae:	bf00      	nop
 80249b0:	370c      	adds	r7, #12
 80249b2:	46bd      	mov	sp, r7
 80249b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249b8:	4770      	bx	lr
 80249ba:	bf00      	nop
 80249bc:	40023c00 	.word	0x40023c00

080249c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80249c0:	b480      	push	{r7}
 80249c2:	b085      	sub	sp, #20
 80249c4:	af00      	add	r7, sp, #0
 80249c6:	6078      	str	r0, [r7, #4]
 80249c8:	460b      	mov	r3, r1
 80249ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80249cc:	2300      	movs	r3, #0
 80249ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80249d0:	78fb      	ldrb	r3, [r7, #3]
 80249d2:	2b00      	cmp	r3, #0
 80249d4:	d102      	bne.n	80249dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80249d6:	2300      	movs	r3, #0
 80249d8:	60fb      	str	r3, [r7, #12]
 80249da:	e010      	b.n	80249fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80249dc:	78fb      	ldrb	r3, [r7, #3]
 80249de:	2b01      	cmp	r3, #1
 80249e0:	d103      	bne.n	80249ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80249e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80249e6:	60fb      	str	r3, [r7, #12]
 80249e8:	e009      	b.n	80249fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80249ea:	78fb      	ldrb	r3, [r7, #3]
 80249ec:	2b02      	cmp	r3, #2
 80249ee:	d103      	bne.n	80249f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80249f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80249f4:	60fb      	str	r3, [r7, #12]
 80249f6:	e002      	b.n	80249fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80249f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80249fc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80249fe:	687b      	ldr	r3, [r7, #4]
 8024a00:	2b0b      	cmp	r3, #11
 8024a02:	d902      	bls.n	8024a0a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	3304      	adds	r3, #4
 8024a08:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024a0a:	4b13      	ldr	r3, [pc, #76]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a0c:	691b      	ldr	r3, [r3, #16]
 8024a0e:	4a12      	ldr	r2, [pc, #72]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024a14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8024a16:	4b10      	ldr	r3, [pc, #64]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a18:	691a      	ldr	r2, [r3, #16]
 8024a1a:	490f      	ldr	r1, [pc, #60]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a1c:	68fb      	ldr	r3, [r7, #12]
 8024a1e:	4313      	orrs	r3, r2
 8024a20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8024a22:	4b0d      	ldr	r3, [pc, #52]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a24:	691b      	ldr	r3, [r3, #16]
 8024a26:	4a0c      	ldr	r2, [pc, #48]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8024a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8024a2e:	4b0a      	ldr	r3, [pc, #40]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a30:	691a      	ldr	r2, [r3, #16]
 8024a32:	687b      	ldr	r3, [r7, #4]
 8024a34:	00db      	lsls	r3, r3, #3
 8024a36:	4313      	orrs	r3, r2
 8024a38:	4a07      	ldr	r2, [pc, #28]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a3a:	f043 0302 	orr.w	r3, r3, #2
 8024a3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8024a40:	4b05      	ldr	r3, [pc, #20]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a42:	691b      	ldr	r3, [r3, #16]
 8024a44:	4a04      	ldr	r2, [pc, #16]	; (8024a58 <FLASH_Erase_Sector+0x98>)
 8024a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024a4a:	6113      	str	r3, [r2, #16]
}
 8024a4c:	bf00      	nop
 8024a4e:	3714      	adds	r7, #20
 8024a50:	46bd      	mov	sp, r7
 8024a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a56:	4770      	bx	lr
 8024a58:	40023c00 	.word	0x40023c00

08024a5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8024a5c:	b480      	push	{r7}
 8024a5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8024a60:	4b20      	ldr	r3, [pc, #128]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a62:	681b      	ldr	r3, [r3, #0]
 8024a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024a68:	2b00      	cmp	r3, #0
 8024a6a:	d017      	beq.n	8024a9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8024a6c:	4b1d      	ldr	r3, [pc, #116]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	4a1c      	ldr	r2, [pc, #112]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024a76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8024a78:	4b1a      	ldr	r3, [pc, #104]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	4a19      	ldr	r2, [pc, #100]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8024a82:	6013      	str	r3, [r2, #0]
 8024a84:	4b17      	ldr	r3, [pc, #92]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	4a16      	ldr	r2, [pc, #88]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024a8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8024a90:	4b14      	ldr	r3, [pc, #80]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a92:	681b      	ldr	r3, [r3, #0]
 8024a94:	4a13      	ldr	r2, [pc, #76]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024a9a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8024a9c:	4b11      	ldr	r3, [pc, #68]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024a9e:	681b      	ldr	r3, [r3, #0]
 8024aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024aa4:	2b00      	cmp	r3, #0
 8024aa6:	d017      	beq.n	8024ad8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8024aa8:	4b0e      	ldr	r3, [pc, #56]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024aaa:	681b      	ldr	r3, [r3, #0]
 8024aac:	4a0d      	ldr	r2, [pc, #52]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024ab2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8024ab4:	4b0b      	ldr	r3, [pc, #44]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	4a0a      	ldr	r2, [pc, #40]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8024abe:	6013      	str	r3, [r2, #0]
 8024ac0:	4b08      	ldr	r3, [pc, #32]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024ac2:	681b      	ldr	r3, [r3, #0]
 8024ac4:	4a07      	ldr	r2, [pc, #28]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024aca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8024acc:	4b05      	ldr	r3, [pc, #20]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024ace:	681b      	ldr	r3, [r3, #0]
 8024ad0:	4a04      	ldr	r2, [pc, #16]	; (8024ae4 <FLASH_FlushCaches+0x88>)
 8024ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024ad6:	6013      	str	r3, [r2, #0]
  }
}
 8024ad8:	bf00      	nop
 8024ada:	46bd      	mov	sp, r7
 8024adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ae0:	4770      	bx	lr
 8024ae2:	bf00      	nop
 8024ae4:	40023c00 	.word	0x40023c00

08024ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024ae8:	b480      	push	{r7}
 8024aea:	b089      	sub	sp, #36	; 0x24
 8024aec:	af00      	add	r7, sp, #0
 8024aee:	6078      	str	r0, [r7, #4]
 8024af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024af2:	2300      	movs	r3, #0
 8024af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024af6:	2300      	movs	r3, #0
 8024af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024afa:	2300      	movs	r3, #0
 8024afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024afe:	2300      	movs	r3, #0
 8024b00:	61fb      	str	r3, [r7, #28]
 8024b02:	e177      	b.n	8024df4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024b04:	2201      	movs	r2, #1
 8024b06:	69fb      	ldr	r3, [r7, #28]
 8024b08:	fa02 f303 	lsl.w	r3, r2, r3
 8024b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024b0e:	683b      	ldr	r3, [r7, #0]
 8024b10:	681b      	ldr	r3, [r3, #0]
 8024b12:	697a      	ldr	r2, [r7, #20]
 8024b14:	4013      	ands	r3, r2
 8024b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024b18:	693a      	ldr	r2, [r7, #16]
 8024b1a:	697b      	ldr	r3, [r7, #20]
 8024b1c:	429a      	cmp	r2, r3
 8024b1e:	f040 8166 	bne.w	8024dee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b22:	683b      	ldr	r3, [r7, #0]
 8024b24:	685b      	ldr	r3, [r3, #4]
 8024b26:	f003 0303 	and.w	r3, r3, #3
 8024b2a:	2b01      	cmp	r3, #1
 8024b2c:	d005      	beq.n	8024b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024b2e:	683b      	ldr	r3, [r7, #0]
 8024b30:	685b      	ldr	r3, [r3, #4]
 8024b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024b36:	2b02      	cmp	r3, #2
 8024b38:	d130      	bne.n	8024b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	689b      	ldr	r3, [r3, #8]
 8024b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024b40:	69fb      	ldr	r3, [r7, #28]
 8024b42:	005b      	lsls	r3, r3, #1
 8024b44:	2203      	movs	r2, #3
 8024b46:	fa02 f303 	lsl.w	r3, r2, r3
 8024b4a:	43db      	mvns	r3, r3
 8024b4c:	69ba      	ldr	r2, [r7, #24]
 8024b4e:	4013      	ands	r3, r2
 8024b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024b52:	683b      	ldr	r3, [r7, #0]
 8024b54:	68da      	ldr	r2, [r3, #12]
 8024b56:	69fb      	ldr	r3, [r7, #28]
 8024b58:	005b      	lsls	r3, r3, #1
 8024b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8024b5e:	69ba      	ldr	r2, [r7, #24]
 8024b60:	4313      	orrs	r3, r2
 8024b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	69ba      	ldr	r2, [r7, #24]
 8024b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	685b      	ldr	r3, [r3, #4]
 8024b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024b70:	2201      	movs	r2, #1
 8024b72:	69fb      	ldr	r3, [r7, #28]
 8024b74:	fa02 f303 	lsl.w	r3, r2, r3
 8024b78:	43db      	mvns	r3, r3
 8024b7a:	69ba      	ldr	r2, [r7, #24]
 8024b7c:	4013      	ands	r3, r2
 8024b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024b80:	683b      	ldr	r3, [r7, #0]
 8024b82:	685b      	ldr	r3, [r3, #4]
 8024b84:	091b      	lsrs	r3, r3, #4
 8024b86:	f003 0201 	and.w	r2, r3, #1
 8024b8a:	69fb      	ldr	r3, [r7, #28]
 8024b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8024b90:	69ba      	ldr	r2, [r7, #24]
 8024b92:	4313      	orrs	r3, r2
 8024b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024b96:	687b      	ldr	r3, [r7, #4]
 8024b98:	69ba      	ldr	r2, [r7, #24]
 8024b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024b9c:	683b      	ldr	r3, [r7, #0]
 8024b9e:	685b      	ldr	r3, [r3, #4]
 8024ba0:	f003 0303 	and.w	r3, r3, #3
 8024ba4:	2b03      	cmp	r3, #3
 8024ba6:	d017      	beq.n	8024bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024ba8:	687b      	ldr	r3, [r7, #4]
 8024baa:	68db      	ldr	r3, [r3, #12]
 8024bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024bae:	69fb      	ldr	r3, [r7, #28]
 8024bb0:	005b      	lsls	r3, r3, #1
 8024bb2:	2203      	movs	r2, #3
 8024bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8024bb8:	43db      	mvns	r3, r3
 8024bba:	69ba      	ldr	r2, [r7, #24]
 8024bbc:	4013      	ands	r3, r2
 8024bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024bc0:	683b      	ldr	r3, [r7, #0]
 8024bc2:	689a      	ldr	r2, [r3, #8]
 8024bc4:	69fb      	ldr	r3, [r7, #28]
 8024bc6:	005b      	lsls	r3, r3, #1
 8024bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8024bcc:	69ba      	ldr	r2, [r7, #24]
 8024bce:	4313      	orrs	r3, r2
 8024bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	69ba      	ldr	r2, [r7, #24]
 8024bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024bd8:	683b      	ldr	r3, [r7, #0]
 8024bda:	685b      	ldr	r3, [r3, #4]
 8024bdc:	f003 0303 	and.w	r3, r3, #3
 8024be0:	2b02      	cmp	r3, #2
 8024be2:	d123      	bne.n	8024c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024be4:	69fb      	ldr	r3, [r7, #28]
 8024be6:	08da      	lsrs	r2, r3, #3
 8024be8:	687b      	ldr	r3, [r7, #4]
 8024bea:	3208      	adds	r2, #8
 8024bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024bf2:	69fb      	ldr	r3, [r7, #28]
 8024bf4:	f003 0307 	and.w	r3, r3, #7
 8024bf8:	009b      	lsls	r3, r3, #2
 8024bfa:	220f      	movs	r2, #15
 8024bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8024c00:	43db      	mvns	r3, r3
 8024c02:	69ba      	ldr	r2, [r7, #24]
 8024c04:	4013      	ands	r3, r2
 8024c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024c08:	683b      	ldr	r3, [r7, #0]
 8024c0a:	691a      	ldr	r2, [r3, #16]
 8024c0c:	69fb      	ldr	r3, [r7, #28]
 8024c0e:	f003 0307 	and.w	r3, r3, #7
 8024c12:	009b      	lsls	r3, r3, #2
 8024c14:	fa02 f303 	lsl.w	r3, r2, r3
 8024c18:	69ba      	ldr	r2, [r7, #24]
 8024c1a:	4313      	orrs	r3, r2
 8024c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024c1e:	69fb      	ldr	r3, [r7, #28]
 8024c20:	08da      	lsrs	r2, r3, #3
 8024c22:	687b      	ldr	r3, [r7, #4]
 8024c24:	3208      	adds	r2, #8
 8024c26:	69b9      	ldr	r1, [r7, #24]
 8024c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024c2c:	687b      	ldr	r3, [r7, #4]
 8024c2e:	681b      	ldr	r3, [r3, #0]
 8024c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024c32:	69fb      	ldr	r3, [r7, #28]
 8024c34:	005b      	lsls	r3, r3, #1
 8024c36:	2203      	movs	r2, #3
 8024c38:	fa02 f303 	lsl.w	r3, r2, r3
 8024c3c:	43db      	mvns	r3, r3
 8024c3e:	69ba      	ldr	r2, [r7, #24]
 8024c40:	4013      	ands	r3, r2
 8024c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024c44:	683b      	ldr	r3, [r7, #0]
 8024c46:	685b      	ldr	r3, [r3, #4]
 8024c48:	f003 0203 	and.w	r2, r3, #3
 8024c4c:	69fb      	ldr	r3, [r7, #28]
 8024c4e:	005b      	lsls	r3, r3, #1
 8024c50:	fa02 f303 	lsl.w	r3, r2, r3
 8024c54:	69ba      	ldr	r2, [r7, #24]
 8024c56:	4313      	orrs	r3, r2
 8024c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	69ba      	ldr	r2, [r7, #24]
 8024c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024c60:	683b      	ldr	r3, [r7, #0]
 8024c62:	685b      	ldr	r3, [r3, #4]
 8024c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	f000 80c0 	beq.w	8024dee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024c6e:	2300      	movs	r3, #0
 8024c70:	60fb      	str	r3, [r7, #12]
 8024c72:	4b66      	ldr	r3, [pc, #408]	; (8024e0c <HAL_GPIO_Init+0x324>)
 8024c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c76:	4a65      	ldr	r2, [pc, #404]	; (8024e0c <HAL_GPIO_Init+0x324>)
 8024c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8024c7e:	4b63      	ldr	r3, [pc, #396]	; (8024e0c <HAL_GPIO_Init+0x324>)
 8024c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024c86:	60fb      	str	r3, [r7, #12]
 8024c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024c8a:	4a61      	ldr	r2, [pc, #388]	; (8024e10 <HAL_GPIO_Init+0x328>)
 8024c8c:	69fb      	ldr	r3, [r7, #28]
 8024c8e:	089b      	lsrs	r3, r3, #2
 8024c90:	3302      	adds	r3, #2
 8024c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024c98:	69fb      	ldr	r3, [r7, #28]
 8024c9a:	f003 0303 	and.w	r3, r3, #3
 8024c9e:	009b      	lsls	r3, r3, #2
 8024ca0:	220f      	movs	r2, #15
 8024ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8024ca6:	43db      	mvns	r3, r3
 8024ca8:	69ba      	ldr	r2, [r7, #24]
 8024caa:	4013      	ands	r3, r2
 8024cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024cae:	687b      	ldr	r3, [r7, #4]
 8024cb0:	4a58      	ldr	r2, [pc, #352]	; (8024e14 <HAL_GPIO_Init+0x32c>)
 8024cb2:	4293      	cmp	r3, r2
 8024cb4:	d037      	beq.n	8024d26 <HAL_GPIO_Init+0x23e>
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	4a57      	ldr	r2, [pc, #348]	; (8024e18 <HAL_GPIO_Init+0x330>)
 8024cba:	4293      	cmp	r3, r2
 8024cbc:	d031      	beq.n	8024d22 <HAL_GPIO_Init+0x23a>
 8024cbe:	687b      	ldr	r3, [r7, #4]
 8024cc0:	4a56      	ldr	r2, [pc, #344]	; (8024e1c <HAL_GPIO_Init+0x334>)
 8024cc2:	4293      	cmp	r3, r2
 8024cc4:	d02b      	beq.n	8024d1e <HAL_GPIO_Init+0x236>
 8024cc6:	687b      	ldr	r3, [r7, #4]
 8024cc8:	4a55      	ldr	r2, [pc, #340]	; (8024e20 <HAL_GPIO_Init+0x338>)
 8024cca:	4293      	cmp	r3, r2
 8024ccc:	d025      	beq.n	8024d1a <HAL_GPIO_Init+0x232>
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	4a54      	ldr	r2, [pc, #336]	; (8024e24 <HAL_GPIO_Init+0x33c>)
 8024cd2:	4293      	cmp	r3, r2
 8024cd4:	d01f      	beq.n	8024d16 <HAL_GPIO_Init+0x22e>
 8024cd6:	687b      	ldr	r3, [r7, #4]
 8024cd8:	4a53      	ldr	r2, [pc, #332]	; (8024e28 <HAL_GPIO_Init+0x340>)
 8024cda:	4293      	cmp	r3, r2
 8024cdc:	d019      	beq.n	8024d12 <HAL_GPIO_Init+0x22a>
 8024cde:	687b      	ldr	r3, [r7, #4]
 8024ce0:	4a52      	ldr	r2, [pc, #328]	; (8024e2c <HAL_GPIO_Init+0x344>)
 8024ce2:	4293      	cmp	r3, r2
 8024ce4:	d013      	beq.n	8024d0e <HAL_GPIO_Init+0x226>
 8024ce6:	687b      	ldr	r3, [r7, #4]
 8024ce8:	4a51      	ldr	r2, [pc, #324]	; (8024e30 <HAL_GPIO_Init+0x348>)
 8024cea:	4293      	cmp	r3, r2
 8024cec:	d00d      	beq.n	8024d0a <HAL_GPIO_Init+0x222>
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	4a50      	ldr	r2, [pc, #320]	; (8024e34 <HAL_GPIO_Init+0x34c>)
 8024cf2:	4293      	cmp	r3, r2
 8024cf4:	d007      	beq.n	8024d06 <HAL_GPIO_Init+0x21e>
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	4a4f      	ldr	r2, [pc, #316]	; (8024e38 <HAL_GPIO_Init+0x350>)
 8024cfa:	4293      	cmp	r3, r2
 8024cfc:	d101      	bne.n	8024d02 <HAL_GPIO_Init+0x21a>
 8024cfe:	2309      	movs	r3, #9
 8024d00:	e012      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d02:	230a      	movs	r3, #10
 8024d04:	e010      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d06:	2308      	movs	r3, #8
 8024d08:	e00e      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d0a:	2307      	movs	r3, #7
 8024d0c:	e00c      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d0e:	2306      	movs	r3, #6
 8024d10:	e00a      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d12:	2305      	movs	r3, #5
 8024d14:	e008      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d16:	2304      	movs	r3, #4
 8024d18:	e006      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d1a:	2303      	movs	r3, #3
 8024d1c:	e004      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d1e:	2302      	movs	r3, #2
 8024d20:	e002      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d22:	2301      	movs	r3, #1
 8024d24:	e000      	b.n	8024d28 <HAL_GPIO_Init+0x240>
 8024d26:	2300      	movs	r3, #0
 8024d28:	69fa      	ldr	r2, [r7, #28]
 8024d2a:	f002 0203 	and.w	r2, r2, #3
 8024d2e:	0092      	lsls	r2, r2, #2
 8024d30:	4093      	lsls	r3, r2
 8024d32:	69ba      	ldr	r2, [r7, #24]
 8024d34:	4313      	orrs	r3, r2
 8024d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024d38:	4935      	ldr	r1, [pc, #212]	; (8024e10 <HAL_GPIO_Init+0x328>)
 8024d3a:	69fb      	ldr	r3, [r7, #28]
 8024d3c:	089b      	lsrs	r3, r3, #2
 8024d3e:	3302      	adds	r3, #2
 8024d40:	69ba      	ldr	r2, [r7, #24]
 8024d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024d46:	4b3d      	ldr	r3, [pc, #244]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024d48:	689b      	ldr	r3, [r3, #8]
 8024d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d4c:	693b      	ldr	r3, [r7, #16]
 8024d4e:	43db      	mvns	r3, r3
 8024d50:	69ba      	ldr	r2, [r7, #24]
 8024d52:	4013      	ands	r3, r2
 8024d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024d56:	683b      	ldr	r3, [r7, #0]
 8024d58:	685b      	ldr	r3, [r3, #4]
 8024d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d003      	beq.n	8024d6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024d62:	69ba      	ldr	r2, [r7, #24]
 8024d64:	693b      	ldr	r3, [r7, #16]
 8024d66:	4313      	orrs	r3, r2
 8024d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024d6a:	4a34      	ldr	r2, [pc, #208]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024d6c:	69bb      	ldr	r3, [r7, #24]
 8024d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024d70:	4b32      	ldr	r3, [pc, #200]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024d72:	68db      	ldr	r3, [r3, #12]
 8024d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024d76:	693b      	ldr	r3, [r7, #16]
 8024d78:	43db      	mvns	r3, r3
 8024d7a:	69ba      	ldr	r2, [r7, #24]
 8024d7c:	4013      	ands	r3, r2
 8024d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024d80:	683b      	ldr	r3, [r7, #0]
 8024d82:	685b      	ldr	r3, [r3, #4]
 8024d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	d003      	beq.n	8024d94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024d8c:	69ba      	ldr	r2, [r7, #24]
 8024d8e:	693b      	ldr	r3, [r7, #16]
 8024d90:	4313      	orrs	r3, r2
 8024d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024d94:	4a29      	ldr	r2, [pc, #164]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024d96:	69bb      	ldr	r3, [r7, #24]
 8024d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8024d9a:	4b28      	ldr	r3, [pc, #160]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024d9c:	685b      	ldr	r3, [r3, #4]
 8024d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024da0:	693b      	ldr	r3, [r7, #16]
 8024da2:	43db      	mvns	r3, r3
 8024da4:	69ba      	ldr	r2, [r7, #24]
 8024da6:	4013      	ands	r3, r2
 8024da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8024daa:	683b      	ldr	r3, [r7, #0]
 8024dac:	685b      	ldr	r3, [r3, #4]
 8024dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024db2:	2b00      	cmp	r3, #0
 8024db4:	d003      	beq.n	8024dbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8024db6:	69ba      	ldr	r2, [r7, #24]
 8024db8:	693b      	ldr	r3, [r7, #16]
 8024dba:	4313      	orrs	r3, r2
 8024dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024dbe:	4a1f      	ldr	r2, [pc, #124]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024dc0:	69bb      	ldr	r3, [r7, #24]
 8024dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024dc4:	4b1d      	ldr	r3, [pc, #116]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024dca:	693b      	ldr	r3, [r7, #16]
 8024dcc:	43db      	mvns	r3, r3
 8024dce:	69ba      	ldr	r2, [r7, #24]
 8024dd0:	4013      	ands	r3, r2
 8024dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024dd4:	683b      	ldr	r3, [r7, #0]
 8024dd6:	685b      	ldr	r3, [r3, #4]
 8024dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024ddc:	2b00      	cmp	r3, #0
 8024dde:	d003      	beq.n	8024de8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024de0:	69ba      	ldr	r2, [r7, #24]
 8024de2:	693b      	ldr	r3, [r7, #16]
 8024de4:	4313      	orrs	r3, r2
 8024de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024de8:	4a14      	ldr	r2, [pc, #80]	; (8024e3c <HAL_GPIO_Init+0x354>)
 8024dea:	69bb      	ldr	r3, [r7, #24]
 8024dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024dee:	69fb      	ldr	r3, [r7, #28]
 8024df0:	3301      	adds	r3, #1
 8024df2:	61fb      	str	r3, [r7, #28]
 8024df4:	69fb      	ldr	r3, [r7, #28]
 8024df6:	2b0f      	cmp	r3, #15
 8024df8:	f67f ae84 	bls.w	8024b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024dfc:	bf00      	nop
 8024dfe:	bf00      	nop
 8024e00:	3724      	adds	r7, #36	; 0x24
 8024e02:	46bd      	mov	sp, r7
 8024e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e08:	4770      	bx	lr
 8024e0a:	bf00      	nop
 8024e0c:	40023800 	.word	0x40023800
 8024e10:	40013800 	.word	0x40013800
 8024e14:	40020000 	.word	0x40020000
 8024e18:	40020400 	.word	0x40020400
 8024e1c:	40020800 	.word	0x40020800
 8024e20:	40020c00 	.word	0x40020c00
 8024e24:	40021000 	.word	0x40021000
 8024e28:	40021400 	.word	0x40021400
 8024e2c:	40021800 	.word	0x40021800
 8024e30:	40021c00 	.word	0x40021c00
 8024e34:	40022000 	.word	0x40022000
 8024e38:	40022400 	.word	0x40022400
 8024e3c:	40013c00 	.word	0x40013c00

08024e40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024e40:	b480      	push	{r7}
 8024e42:	b087      	sub	sp, #28
 8024e44:	af00      	add	r7, sp, #0
 8024e46:	6078      	str	r0, [r7, #4]
 8024e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024e4a:	2300      	movs	r3, #0
 8024e4c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024e4e:	2300      	movs	r3, #0
 8024e50:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024e52:	2300      	movs	r3, #0
 8024e54:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024e56:	2300      	movs	r3, #0
 8024e58:	617b      	str	r3, [r7, #20]
 8024e5a:	e0d9      	b.n	8025010 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024e5c:	2201      	movs	r2, #1
 8024e5e:	697b      	ldr	r3, [r7, #20]
 8024e60:	fa02 f303 	lsl.w	r3, r2, r3
 8024e64:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024e66:	683a      	ldr	r2, [r7, #0]
 8024e68:	693b      	ldr	r3, [r7, #16]
 8024e6a:	4013      	ands	r3, r2
 8024e6c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024e6e:	68fa      	ldr	r2, [r7, #12]
 8024e70:	693b      	ldr	r3, [r7, #16]
 8024e72:	429a      	cmp	r2, r3
 8024e74:	f040 80c9 	bne.w	802500a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024e78:	4a6b      	ldr	r2, [pc, #428]	; (8025028 <HAL_GPIO_DeInit+0x1e8>)
 8024e7a:	697b      	ldr	r3, [r7, #20]
 8024e7c:	089b      	lsrs	r3, r3, #2
 8024e7e:	3302      	adds	r3, #2
 8024e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024e84:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024e86:	697b      	ldr	r3, [r7, #20]
 8024e88:	f003 0303 	and.w	r3, r3, #3
 8024e8c:	009b      	lsls	r3, r3, #2
 8024e8e:	220f      	movs	r2, #15
 8024e90:	fa02 f303 	lsl.w	r3, r2, r3
 8024e94:	68ba      	ldr	r2, [r7, #8]
 8024e96:	4013      	ands	r3, r2
 8024e98:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8024e9a:	687b      	ldr	r3, [r7, #4]
 8024e9c:	4a63      	ldr	r2, [pc, #396]	; (802502c <HAL_GPIO_DeInit+0x1ec>)
 8024e9e:	4293      	cmp	r3, r2
 8024ea0:	d037      	beq.n	8024f12 <HAL_GPIO_DeInit+0xd2>
 8024ea2:	687b      	ldr	r3, [r7, #4]
 8024ea4:	4a62      	ldr	r2, [pc, #392]	; (8025030 <HAL_GPIO_DeInit+0x1f0>)
 8024ea6:	4293      	cmp	r3, r2
 8024ea8:	d031      	beq.n	8024f0e <HAL_GPIO_DeInit+0xce>
 8024eaa:	687b      	ldr	r3, [r7, #4]
 8024eac:	4a61      	ldr	r2, [pc, #388]	; (8025034 <HAL_GPIO_DeInit+0x1f4>)
 8024eae:	4293      	cmp	r3, r2
 8024eb0:	d02b      	beq.n	8024f0a <HAL_GPIO_DeInit+0xca>
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	4a60      	ldr	r2, [pc, #384]	; (8025038 <HAL_GPIO_DeInit+0x1f8>)
 8024eb6:	4293      	cmp	r3, r2
 8024eb8:	d025      	beq.n	8024f06 <HAL_GPIO_DeInit+0xc6>
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	4a5f      	ldr	r2, [pc, #380]	; (802503c <HAL_GPIO_DeInit+0x1fc>)
 8024ebe:	4293      	cmp	r3, r2
 8024ec0:	d01f      	beq.n	8024f02 <HAL_GPIO_DeInit+0xc2>
 8024ec2:	687b      	ldr	r3, [r7, #4]
 8024ec4:	4a5e      	ldr	r2, [pc, #376]	; (8025040 <HAL_GPIO_DeInit+0x200>)
 8024ec6:	4293      	cmp	r3, r2
 8024ec8:	d019      	beq.n	8024efe <HAL_GPIO_DeInit+0xbe>
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	4a5d      	ldr	r2, [pc, #372]	; (8025044 <HAL_GPIO_DeInit+0x204>)
 8024ece:	4293      	cmp	r3, r2
 8024ed0:	d013      	beq.n	8024efa <HAL_GPIO_DeInit+0xba>
 8024ed2:	687b      	ldr	r3, [r7, #4]
 8024ed4:	4a5c      	ldr	r2, [pc, #368]	; (8025048 <HAL_GPIO_DeInit+0x208>)
 8024ed6:	4293      	cmp	r3, r2
 8024ed8:	d00d      	beq.n	8024ef6 <HAL_GPIO_DeInit+0xb6>
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	4a5b      	ldr	r2, [pc, #364]	; (802504c <HAL_GPIO_DeInit+0x20c>)
 8024ede:	4293      	cmp	r3, r2
 8024ee0:	d007      	beq.n	8024ef2 <HAL_GPIO_DeInit+0xb2>
 8024ee2:	687b      	ldr	r3, [r7, #4]
 8024ee4:	4a5a      	ldr	r2, [pc, #360]	; (8025050 <HAL_GPIO_DeInit+0x210>)
 8024ee6:	4293      	cmp	r3, r2
 8024ee8:	d101      	bne.n	8024eee <HAL_GPIO_DeInit+0xae>
 8024eea:	2309      	movs	r3, #9
 8024eec:	e012      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024eee:	230a      	movs	r3, #10
 8024ef0:	e010      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024ef2:	2308      	movs	r3, #8
 8024ef4:	e00e      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024ef6:	2307      	movs	r3, #7
 8024ef8:	e00c      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024efa:	2306      	movs	r3, #6
 8024efc:	e00a      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024efe:	2305      	movs	r3, #5
 8024f00:	e008      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024f02:	2304      	movs	r3, #4
 8024f04:	e006      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024f06:	2303      	movs	r3, #3
 8024f08:	e004      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024f0a:	2302      	movs	r3, #2
 8024f0c:	e002      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024f0e:	2301      	movs	r3, #1
 8024f10:	e000      	b.n	8024f14 <HAL_GPIO_DeInit+0xd4>
 8024f12:	2300      	movs	r3, #0
 8024f14:	697a      	ldr	r2, [r7, #20]
 8024f16:	f002 0203 	and.w	r2, r2, #3
 8024f1a:	0092      	lsls	r2, r2, #2
 8024f1c:	4093      	lsls	r3, r2
 8024f1e:	68ba      	ldr	r2, [r7, #8]
 8024f20:	429a      	cmp	r2, r3
 8024f22:	d132      	bne.n	8024f8a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024f24:	4b4b      	ldr	r3, [pc, #300]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f26:	681a      	ldr	r2, [r3, #0]
 8024f28:	68fb      	ldr	r3, [r7, #12]
 8024f2a:	43db      	mvns	r3, r3
 8024f2c:	4949      	ldr	r1, [pc, #292]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f2e:	4013      	ands	r3, r2
 8024f30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024f32:	4b48      	ldr	r3, [pc, #288]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f34:	685a      	ldr	r2, [r3, #4]
 8024f36:	68fb      	ldr	r3, [r7, #12]
 8024f38:	43db      	mvns	r3, r3
 8024f3a:	4946      	ldr	r1, [pc, #280]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f3c:	4013      	ands	r3, r2
 8024f3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024f40:	4b44      	ldr	r3, [pc, #272]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f42:	68da      	ldr	r2, [r3, #12]
 8024f44:	68fb      	ldr	r3, [r7, #12]
 8024f46:	43db      	mvns	r3, r3
 8024f48:	4942      	ldr	r1, [pc, #264]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f4a:	4013      	ands	r3, r2
 8024f4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024f4e:	4b41      	ldr	r3, [pc, #260]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f50:	689a      	ldr	r2, [r3, #8]
 8024f52:	68fb      	ldr	r3, [r7, #12]
 8024f54:	43db      	mvns	r3, r3
 8024f56:	493f      	ldr	r1, [pc, #252]	; (8025054 <HAL_GPIO_DeInit+0x214>)
 8024f58:	4013      	ands	r3, r2
 8024f5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024f5c:	697b      	ldr	r3, [r7, #20]
 8024f5e:	f003 0303 	and.w	r3, r3, #3
 8024f62:	009b      	lsls	r3, r3, #2
 8024f64:	220f      	movs	r2, #15
 8024f66:	fa02 f303 	lsl.w	r3, r2, r3
 8024f6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024f6c:	4a2e      	ldr	r2, [pc, #184]	; (8025028 <HAL_GPIO_DeInit+0x1e8>)
 8024f6e:	697b      	ldr	r3, [r7, #20]
 8024f70:	089b      	lsrs	r3, r3, #2
 8024f72:	3302      	adds	r3, #2
 8024f74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024f78:	68bb      	ldr	r3, [r7, #8]
 8024f7a:	43da      	mvns	r2, r3
 8024f7c:	482a      	ldr	r0, [pc, #168]	; (8025028 <HAL_GPIO_DeInit+0x1e8>)
 8024f7e:	697b      	ldr	r3, [r7, #20]
 8024f80:	089b      	lsrs	r3, r3, #2
 8024f82:	400a      	ands	r2, r1
 8024f84:	3302      	adds	r3, #2
 8024f86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024f8a:	687b      	ldr	r3, [r7, #4]
 8024f8c:	681a      	ldr	r2, [r3, #0]
 8024f8e:	697b      	ldr	r3, [r7, #20]
 8024f90:	005b      	lsls	r3, r3, #1
 8024f92:	2103      	movs	r1, #3
 8024f94:	fa01 f303 	lsl.w	r3, r1, r3
 8024f98:	43db      	mvns	r3, r3
 8024f9a:	401a      	ands	r2, r3
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024fa0:	697b      	ldr	r3, [r7, #20]
 8024fa2:	08da      	lsrs	r2, r3, #3
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	3208      	adds	r2, #8
 8024fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024fac:	697b      	ldr	r3, [r7, #20]
 8024fae:	f003 0307 	and.w	r3, r3, #7
 8024fb2:	009b      	lsls	r3, r3, #2
 8024fb4:	220f      	movs	r2, #15
 8024fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8024fba:	43db      	mvns	r3, r3
 8024fbc:	697a      	ldr	r2, [r7, #20]
 8024fbe:	08d2      	lsrs	r2, r2, #3
 8024fc0:	4019      	ands	r1, r3
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	3208      	adds	r2, #8
 8024fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024fca:	687b      	ldr	r3, [r7, #4]
 8024fcc:	68da      	ldr	r2, [r3, #12]
 8024fce:	697b      	ldr	r3, [r7, #20]
 8024fd0:	005b      	lsls	r3, r3, #1
 8024fd2:	2103      	movs	r1, #3
 8024fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8024fd8:	43db      	mvns	r3, r3
 8024fda:	401a      	ands	r2, r3
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024fe0:	687b      	ldr	r3, [r7, #4]
 8024fe2:	685a      	ldr	r2, [r3, #4]
 8024fe4:	2101      	movs	r1, #1
 8024fe6:	697b      	ldr	r3, [r7, #20]
 8024fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8024fec:	43db      	mvns	r3, r3
 8024fee:	401a      	ands	r2, r3
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024ff4:	687b      	ldr	r3, [r7, #4]
 8024ff6:	689a      	ldr	r2, [r3, #8]
 8024ff8:	697b      	ldr	r3, [r7, #20]
 8024ffa:	005b      	lsls	r3, r3, #1
 8024ffc:	2103      	movs	r1, #3
 8024ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8025002:	43db      	mvns	r3, r3
 8025004:	401a      	ands	r2, r3
 8025006:	687b      	ldr	r3, [r7, #4]
 8025008:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 802500a:	697b      	ldr	r3, [r7, #20]
 802500c:	3301      	adds	r3, #1
 802500e:	617b      	str	r3, [r7, #20]
 8025010:	697b      	ldr	r3, [r7, #20]
 8025012:	2b0f      	cmp	r3, #15
 8025014:	f67f af22 	bls.w	8024e5c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8025018:	bf00      	nop
 802501a:	bf00      	nop
 802501c:	371c      	adds	r7, #28
 802501e:	46bd      	mov	sp, r7
 8025020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025024:	4770      	bx	lr
 8025026:	bf00      	nop
 8025028:	40013800 	.word	0x40013800
 802502c:	40020000 	.word	0x40020000
 8025030:	40020400 	.word	0x40020400
 8025034:	40020800 	.word	0x40020800
 8025038:	40020c00 	.word	0x40020c00
 802503c:	40021000 	.word	0x40021000
 8025040:	40021400 	.word	0x40021400
 8025044:	40021800 	.word	0x40021800
 8025048:	40021c00 	.word	0x40021c00
 802504c:	40022000 	.word	0x40022000
 8025050:	40022400 	.word	0x40022400
 8025054:	40013c00 	.word	0x40013c00

08025058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025058:	b480      	push	{r7}
 802505a:	b083      	sub	sp, #12
 802505c:	af00      	add	r7, sp, #0
 802505e:	6078      	str	r0, [r7, #4]
 8025060:	460b      	mov	r3, r1
 8025062:	807b      	strh	r3, [r7, #2]
 8025064:	4613      	mov	r3, r2
 8025066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025068:	787b      	ldrb	r3, [r7, #1]
 802506a:	2b00      	cmp	r3, #0
 802506c:	d003      	beq.n	8025076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802506e:	887a      	ldrh	r2, [r7, #2]
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025074:	e003      	b.n	802507e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8025076:	887b      	ldrh	r3, [r7, #2]
 8025078:	041a      	lsls	r2, r3, #16
 802507a:	687b      	ldr	r3, [r7, #4]
 802507c:	619a      	str	r2, [r3, #24]
}
 802507e:	bf00      	nop
 8025080:	370c      	adds	r7, #12
 8025082:	46bd      	mov	sp, r7
 8025084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025088:	4770      	bx	lr
	...

0802508c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 802508c:	b580      	push	{r7, lr}
 802508e:	b082      	sub	sp, #8
 8025090:	af00      	add	r7, sp, #0
 8025092:	4603      	mov	r3, r0
 8025094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8025096:	4b08      	ldr	r3, [pc, #32]	; (80250b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8025098:	695a      	ldr	r2, [r3, #20]
 802509a:	88fb      	ldrh	r3, [r7, #6]
 802509c:	4013      	ands	r3, r2
 802509e:	2b00      	cmp	r3, #0
 80250a0:	d006      	beq.n	80250b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80250a2:	4a05      	ldr	r2, [pc, #20]	; (80250b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80250a4:	88fb      	ldrh	r3, [r7, #6]
 80250a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80250a8:	88fb      	ldrh	r3, [r7, #6]
 80250aa:	4618      	mov	r0, r3
 80250ac:	f7fc ffdc 	bl	8022068 <HAL_GPIO_EXTI_Callback>
  }
}
 80250b0:	bf00      	nop
 80250b2:	3708      	adds	r7, #8
 80250b4:	46bd      	mov	sp, r7
 80250b6:	bd80      	pop	{r7, pc}
 80250b8:	40013c00 	.word	0x40013c00

080250bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80250bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80250be:	b08f      	sub	sp, #60	; 0x3c
 80250c0:	af0a      	add	r7, sp, #40	; 0x28
 80250c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80250c4:	687b      	ldr	r3, [r7, #4]
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d101      	bne.n	80250ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80250ca:	2301      	movs	r3, #1
 80250cc:	e054      	b.n	8025178 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	681b      	ldr	r3, [r3, #0]
 80250d2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80250da:	b2db      	uxtb	r3, r3
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d106      	bne.n	80250ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	2200      	movs	r2, #0
 80250e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80250e8:	6878      	ldr	r0, [r7, #4]
 80250ea:	f008 fd01 	bl	802daf0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	2203      	movs	r2, #3
 80250f2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80250f6:	68fb      	ldr	r3, [r7, #12]
 80250f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80250fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80250fe:	2b00      	cmp	r3, #0
 8025100:	d102      	bne.n	8025108 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	2200      	movs	r2, #0
 8025106:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	681b      	ldr	r3, [r3, #0]
 802510c:	4618      	mov	r0, r3
 802510e:	f005 fd2f 	bl	802ab70 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	681b      	ldr	r3, [r3, #0]
 8025116:	603b      	str	r3, [r7, #0]
 8025118:	687e      	ldr	r6, [r7, #4]
 802511a:	466d      	mov	r5, sp
 802511c:	f106 0410 	add.w	r4, r6, #16
 8025120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025128:	e894 0003 	ldmia.w	r4, {r0, r1}
 802512c:	e885 0003 	stmia.w	r5, {r0, r1}
 8025130:	1d33      	adds	r3, r6, #4
 8025132:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025134:	6838      	ldr	r0, [r7, #0]
 8025136:	f005 fca9 	bl	802aa8c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802513a:	687b      	ldr	r3, [r7, #4]
 802513c:	681b      	ldr	r3, [r3, #0]
 802513e:	2101      	movs	r1, #1
 8025140:	4618      	mov	r0, r3
 8025142:	f005 fd26 	bl	802ab92 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	681b      	ldr	r3, [r3, #0]
 802514a:	603b      	str	r3, [r7, #0]
 802514c:	687e      	ldr	r6, [r7, #4]
 802514e:	466d      	mov	r5, sp
 8025150:	f106 0410 	add.w	r4, r6, #16
 8025154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802515a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802515c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025160:	e885 0003 	stmia.w	r5, {r0, r1}
 8025164:	1d33      	adds	r3, r6, #4
 8025166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025168:	6838      	ldr	r0, [r7, #0]
 802516a:	f005 feaf 	bl	802aecc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	2201      	movs	r2, #1
 8025172:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8025176:	2300      	movs	r3, #0
}
 8025178:	4618      	mov	r0, r3
 802517a:	3714      	adds	r7, #20
 802517c:	46bd      	mov	sp, r7
 802517e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08025180 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8025180:	b590      	push	{r4, r7, lr}
 8025182:	b089      	sub	sp, #36	; 0x24
 8025184:	af04      	add	r7, sp, #16
 8025186:	6078      	str	r0, [r7, #4]
 8025188:	4608      	mov	r0, r1
 802518a:	4611      	mov	r1, r2
 802518c:	461a      	mov	r2, r3
 802518e:	4603      	mov	r3, r0
 8025190:	70fb      	strb	r3, [r7, #3]
 8025192:	460b      	mov	r3, r1
 8025194:	70bb      	strb	r3, [r7, #2]
 8025196:	4613      	mov	r3, r2
 8025198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 802519a:	687b      	ldr	r3, [r7, #4]
 802519c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80251a0:	2b01      	cmp	r3, #1
 80251a2:	d101      	bne.n	80251a8 <HAL_HCD_HC_Init+0x28>
 80251a4:	2302      	movs	r3, #2
 80251a6:	e076      	b.n	8025296 <HAL_HCD_HC_Init+0x116>
 80251a8:	687b      	ldr	r3, [r7, #4]
 80251aa:	2201      	movs	r2, #1
 80251ac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80251b0:	78fb      	ldrb	r3, [r7, #3]
 80251b2:	687a      	ldr	r2, [r7, #4]
 80251b4:	212c      	movs	r1, #44	; 0x2c
 80251b6:	fb01 f303 	mul.w	r3, r1, r3
 80251ba:	4413      	add	r3, r2
 80251bc:	333d      	adds	r3, #61	; 0x3d
 80251be:	2200      	movs	r2, #0
 80251c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80251c2:	78fb      	ldrb	r3, [r7, #3]
 80251c4:	687a      	ldr	r2, [r7, #4]
 80251c6:	212c      	movs	r1, #44	; 0x2c
 80251c8:	fb01 f303 	mul.w	r3, r1, r3
 80251cc:	4413      	add	r3, r2
 80251ce:	3338      	adds	r3, #56	; 0x38
 80251d0:	787a      	ldrb	r2, [r7, #1]
 80251d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80251d4:	78fb      	ldrb	r3, [r7, #3]
 80251d6:	687a      	ldr	r2, [r7, #4]
 80251d8:	212c      	movs	r1, #44	; 0x2c
 80251da:	fb01 f303 	mul.w	r3, r1, r3
 80251de:	4413      	add	r3, r2
 80251e0:	3340      	adds	r3, #64	; 0x40
 80251e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80251e4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80251e6:	78fb      	ldrb	r3, [r7, #3]
 80251e8:	687a      	ldr	r2, [r7, #4]
 80251ea:	212c      	movs	r1, #44	; 0x2c
 80251ec:	fb01 f303 	mul.w	r3, r1, r3
 80251f0:	4413      	add	r3, r2
 80251f2:	3339      	adds	r3, #57	; 0x39
 80251f4:	78fa      	ldrb	r2, [r7, #3]
 80251f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80251f8:	78fb      	ldrb	r3, [r7, #3]
 80251fa:	687a      	ldr	r2, [r7, #4]
 80251fc:	212c      	movs	r1, #44	; 0x2c
 80251fe:	fb01 f303 	mul.w	r3, r1, r3
 8025202:	4413      	add	r3, r2
 8025204:	333f      	adds	r3, #63	; 0x3f
 8025206:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802520a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 802520c:	78fb      	ldrb	r3, [r7, #3]
 802520e:	78ba      	ldrb	r2, [r7, #2]
 8025210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8025214:	b2d0      	uxtb	r0, r2
 8025216:	687a      	ldr	r2, [r7, #4]
 8025218:	212c      	movs	r1, #44	; 0x2c
 802521a:	fb01 f303 	mul.w	r3, r1, r3
 802521e:	4413      	add	r3, r2
 8025220:	333a      	adds	r3, #58	; 0x3a
 8025222:	4602      	mov	r2, r0
 8025224:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8025226:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802522a:	2b00      	cmp	r3, #0
 802522c:	da09      	bge.n	8025242 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 802522e:	78fb      	ldrb	r3, [r7, #3]
 8025230:	687a      	ldr	r2, [r7, #4]
 8025232:	212c      	movs	r1, #44	; 0x2c
 8025234:	fb01 f303 	mul.w	r3, r1, r3
 8025238:	4413      	add	r3, r2
 802523a:	333b      	adds	r3, #59	; 0x3b
 802523c:	2201      	movs	r2, #1
 802523e:	701a      	strb	r2, [r3, #0]
 8025240:	e008      	b.n	8025254 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8025242:	78fb      	ldrb	r3, [r7, #3]
 8025244:	687a      	ldr	r2, [r7, #4]
 8025246:	212c      	movs	r1, #44	; 0x2c
 8025248:	fb01 f303 	mul.w	r3, r1, r3
 802524c:	4413      	add	r3, r2
 802524e:	333b      	adds	r3, #59	; 0x3b
 8025250:	2200      	movs	r2, #0
 8025252:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8025254:	78fb      	ldrb	r3, [r7, #3]
 8025256:	687a      	ldr	r2, [r7, #4]
 8025258:	212c      	movs	r1, #44	; 0x2c
 802525a:	fb01 f303 	mul.w	r3, r1, r3
 802525e:	4413      	add	r3, r2
 8025260:	333c      	adds	r3, #60	; 0x3c
 8025262:	f897 2020 	ldrb.w	r2, [r7, #32]
 8025266:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8025268:	687b      	ldr	r3, [r7, #4]
 802526a:	6818      	ldr	r0, [r3, #0]
 802526c:	787c      	ldrb	r4, [r7, #1]
 802526e:	78ba      	ldrb	r2, [r7, #2]
 8025270:	78f9      	ldrb	r1, [r7, #3]
 8025272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8025274:	9302      	str	r3, [sp, #8]
 8025276:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802527a:	9301      	str	r3, [sp, #4]
 802527c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8025280:	9300      	str	r3, [sp, #0]
 8025282:	4623      	mov	r3, r4
 8025284:	f005 ffa8 	bl	802b1d8 <USB_HC_Init>
 8025288:	4603      	mov	r3, r0
 802528a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	2200      	movs	r2, #0
 8025290:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8025294:	7bfb      	ldrb	r3, [r7, #15]
}
 8025296:	4618      	mov	r0, r3
 8025298:	3714      	adds	r7, #20
 802529a:	46bd      	mov	sp, r7
 802529c:	bd90      	pop	{r4, r7, pc}

0802529e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 802529e:	b580      	push	{r7, lr}
 80252a0:	b084      	sub	sp, #16
 80252a2:	af00      	add	r7, sp, #0
 80252a4:	6078      	str	r0, [r7, #4]
 80252a6:	460b      	mov	r3, r1
 80252a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80252aa:	2300      	movs	r3, #0
 80252ac:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80252b4:	2b01      	cmp	r3, #1
 80252b6:	d101      	bne.n	80252bc <HAL_HCD_HC_Halt+0x1e>
 80252b8:	2302      	movs	r3, #2
 80252ba:	e00f      	b.n	80252dc <HAL_HCD_HC_Halt+0x3e>
 80252bc:	687b      	ldr	r3, [r7, #4]
 80252be:	2201      	movs	r2, #1
 80252c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	681b      	ldr	r3, [r3, #0]
 80252c8:	78fa      	ldrb	r2, [r7, #3]
 80252ca:	4611      	mov	r1, r2
 80252cc:	4618      	mov	r0, r3
 80252ce:	f006 f9f8 	bl	802b6c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80252d2:	687b      	ldr	r3, [r7, #4]
 80252d4:	2200      	movs	r2, #0
 80252d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80252da:	7bfb      	ldrb	r3, [r7, #15]
}
 80252dc:	4618      	mov	r0, r3
 80252de:	3710      	adds	r7, #16
 80252e0:	46bd      	mov	sp, r7
 80252e2:	bd80      	pop	{r7, pc}

080252e4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80252e4:	b580      	push	{r7, lr}
 80252e6:	b082      	sub	sp, #8
 80252e8:	af00      	add	r7, sp, #0
 80252ea:	6078      	str	r0, [r7, #4]
 80252ec:	4608      	mov	r0, r1
 80252ee:	4611      	mov	r1, r2
 80252f0:	461a      	mov	r2, r3
 80252f2:	4603      	mov	r3, r0
 80252f4:	70fb      	strb	r3, [r7, #3]
 80252f6:	460b      	mov	r3, r1
 80252f8:	70bb      	strb	r3, [r7, #2]
 80252fa:	4613      	mov	r3, r2
 80252fc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80252fe:	78fb      	ldrb	r3, [r7, #3]
 8025300:	687a      	ldr	r2, [r7, #4]
 8025302:	212c      	movs	r1, #44	; 0x2c
 8025304:	fb01 f303 	mul.w	r3, r1, r3
 8025308:	4413      	add	r3, r2
 802530a:	333b      	adds	r3, #59	; 0x3b
 802530c:	78ba      	ldrb	r2, [r7, #2]
 802530e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8025310:	78fb      	ldrb	r3, [r7, #3]
 8025312:	687a      	ldr	r2, [r7, #4]
 8025314:	212c      	movs	r1, #44	; 0x2c
 8025316:	fb01 f303 	mul.w	r3, r1, r3
 802531a:	4413      	add	r3, r2
 802531c:	333f      	adds	r3, #63	; 0x3f
 802531e:	787a      	ldrb	r2, [r7, #1]
 8025320:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8025322:	7c3b      	ldrb	r3, [r7, #16]
 8025324:	2b00      	cmp	r3, #0
 8025326:	d112      	bne.n	802534e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8025328:	78fb      	ldrb	r3, [r7, #3]
 802532a:	687a      	ldr	r2, [r7, #4]
 802532c:	212c      	movs	r1, #44	; 0x2c
 802532e:	fb01 f303 	mul.w	r3, r1, r3
 8025332:	4413      	add	r3, r2
 8025334:	3342      	adds	r3, #66	; 0x42
 8025336:	2203      	movs	r2, #3
 8025338:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802533a:	78fb      	ldrb	r3, [r7, #3]
 802533c:	687a      	ldr	r2, [r7, #4]
 802533e:	212c      	movs	r1, #44	; 0x2c
 8025340:	fb01 f303 	mul.w	r3, r1, r3
 8025344:	4413      	add	r3, r2
 8025346:	333d      	adds	r3, #61	; 0x3d
 8025348:	7f3a      	ldrb	r2, [r7, #28]
 802534a:	701a      	strb	r2, [r3, #0]
 802534c:	e008      	b.n	8025360 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802534e:	78fb      	ldrb	r3, [r7, #3]
 8025350:	687a      	ldr	r2, [r7, #4]
 8025352:	212c      	movs	r1, #44	; 0x2c
 8025354:	fb01 f303 	mul.w	r3, r1, r3
 8025358:	4413      	add	r3, r2
 802535a:	3342      	adds	r3, #66	; 0x42
 802535c:	2202      	movs	r2, #2
 802535e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8025360:	787b      	ldrb	r3, [r7, #1]
 8025362:	2b03      	cmp	r3, #3
 8025364:	f200 80c6 	bhi.w	80254f4 <HAL_HCD_HC_SubmitRequest+0x210>
 8025368:	a201      	add	r2, pc, #4	; (adr r2, 8025370 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802536e:	bf00      	nop
 8025370:	08025381 	.word	0x08025381
 8025374:	080254e1 	.word	0x080254e1
 8025378:	080253e5 	.word	0x080253e5
 802537c:	08025463 	.word	0x08025463
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8025380:	7c3b      	ldrb	r3, [r7, #16]
 8025382:	2b01      	cmp	r3, #1
 8025384:	f040 80b8 	bne.w	80254f8 <HAL_HCD_HC_SubmitRequest+0x214>
 8025388:	78bb      	ldrb	r3, [r7, #2]
 802538a:	2b00      	cmp	r3, #0
 802538c:	f040 80b4 	bne.w	80254f8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8025390:	8b3b      	ldrh	r3, [r7, #24]
 8025392:	2b00      	cmp	r3, #0
 8025394:	d108      	bne.n	80253a8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8025396:	78fb      	ldrb	r3, [r7, #3]
 8025398:	687a      	ldr	r2, [r7, #4]
 802539a:	212c      	movs	r1, #44	; 0x2c
 802539c:	fb01 f303 	mul.w	r3, r1, r3
 80253a0:	4413      	add	r3, r2
 80253a2:	3355      	adds	r3, #85	; 0x55
 80253a4:	2201      	movs	r2, #1
 80253a6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80253a8:	78fb      	ldrb	r3, [r7, #3]
 80253aa:	687a      	ldr	r2, [r7, #4]
 80253ac:	212c      	movs	r1, #44	; 0x2c
 80253ae:	fb01 f303 	mul.w	r3, r1, r3
 80253b2:	4413      	add	r3, r2
 80253b4:	3355      	adds	r3, #85	; 0x55
 80253b6:	781b      	ldrb	r3, [r3, #0]
 80253b8:	2b00      	cmp	r3, #0
 80253ba:	d109      	bne.n	80253d0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253bc:	78fb      	ldrb	r3, [r7, #3]
 80253be:	687a      	ldr	r2, [r7, #4]
 80253c0:	212c      	movs	r1, #44	; 0x2c
 80253c2:	fb01 f303 	mul.w	r3, r1, r3
 80253c6:	4413      	add	r3, r2
 80253c8:	3342      	adds	r3, #66	; 0x42
 80253ca:	2200      	movs	r2, #0
 80253cc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80253ce:	e093      	b.n	80254f8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80253d0:	78fb      	ldrb	r3, [r7, #3]
 80253d2:	687a      	ldr	r2, [r7, #4]
 80253d4:	212c      	movs	r1, #44	; 0x2c
 80253d6:	fb01 f303 	mul.w	r3, r1, r3
 80253da:	4413      	add	r3, r2
 80253dc:	3342      	adds	r3, #66	; 0x42
 80253de:	2202      	movs	r2, #2
 80253e0:	701a      	strb	r2, [r3, #0]
      break;
 80253e2:	e089      	b.n	80254f8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80253e4:	78bb      	ldrb	r3, [r7, #2]
 80253e6:	2b00      	cmp	r3, #0
 80253e8:	d11d      	bne.n	8025426 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80253ea:	78fb      	ldrb	r3, [r7, #3]
 80253ec:	687a      	ldr	r2, [r7, #4]
 80253ee:	212c      	movs	r1, #44	; 0x2c
 80253f0:	fb01 f303 	mul.w	r3, r1, r3
 80253f4:	4413      	add	r3, r2
 80253f6:	3355      	adds	r3, #85	; 0x55
 80253f8:	781b      	ldrb	r3, [r3, #0]
 80253fa:	2b00      	cmp	r3, #0
 80253fc:	d109      	bne.n	8025412 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253fe:	78fb      	ldrb	r3, [r7, #3]
 8025400:	687a      	ldr	r2, [r7, #4]
 8025402:	212c      	movs	r1, #44	; 0x2c
 8025404:	fb01 f303 	mul.w	r3, r1, r3
 8025408:	4413      	add	r3, r2
 802540a:	3342      	adds	r3, #66	; 0x42
 802540c:	2200      	movs	r2, #0
 802540e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8025410:	e073      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025412:	78fb      	ldrb	r3, [r7, #3]
 8025414:	687a      	ldr	r2, [r7, #4]
 8025416:	212c      	movs	r1, #44	; 0x2c
 8025418:	fb01 f303 	mul.w	r3, r1, r3
 802541c:	4413      	add	r3, r2
 802541e:	3342      	adds	r3, #66	; 0x42
 8025420:	2202      	movs	r2, #2
 8025422:	701a      	strb	r2, [r3, #0]
      break;
 8025424:	e069      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8025426:	78fb      	ldrb	r3, [r7, #3]
 8025428:	687a      	ldr	r2, [r7, #4]
 802542a:	212c      	movs	r1, #44	; 0x2c
 802542c:	fb01 f303 	mul.w	r3, r1, r3
 8025430:	4413      	add	r3, r2
 8025432:	3354      	adds	r3, #84	; 0x54
 8025434:	781b      	ldrb	r3, [r3, #0]
 8025436:	2b00      	cmp	r3, #0
 8025438:	d109      	bne.n	802544e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802543a:	78fb      	ldrb	r3, [r7, #3]
 802543c:	687a      	ldr	r2, [r7, #4]
 802543e:	212c      	movs	r1, #44	; 0x2c
 8025440:	fb01 f303 	mul.w	r3, r1, r3
 8025444:	4413      	add	r3, r2
 8025446:	3342      	adds	r3, #66	; 0x42
 8025448:	2200      	movs	r2, #0
 802544a:	701a      	strb	r2, [r3, #0]
      break;
 802544c:	e055      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 802544e:	78fb      	ldrb	r3, [r7, #3]
 8025450:	687a      	ldr	r2, [r7, #4]
 8025452:	212c      	movs	r1, #44	; 0x2c
 8025454:	fb01 f303 	mul.w	r3, r1, r3
 8025458:	4413      	add	r3, r2
 802545a:	3342      	adds	r3, #66	; 0x42
 802545c:	2202      	movs	r2, #2
 802545e:	701a      	strb	r2, [r3, #0]
      break;
 8025460:	e04b      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8025462:	78bb      	ldrb	r3, [r7, #2]
 8025464:	2b00      	cmp	r3, #0
 8025466:	d11d      	bne.n	80254a4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8025468:	78fb      	ldrb	r3, [r7, #3]
 802546a:	687a      	ldr	r2, [r7, #4]
 802546c:	212c      	movs	r1, #44	; 0x2c
 802546e:	fb01 f303 	mul.w	r3, r1, r3
 8025472:	4413      	add	r3, r2
 8025474:	3355      	adds	r3, #85	; 0x55
 8025476:	781b      	ldrb	r3, [r3, #0]
 8025478:	2b00      	cmp	r3, #0
 802547a:	d109      	bne.n	8025490 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802547c:	78fb      	ldrb	r3, [r7, #3]
 802547e:	687a      	ldr	r2, [r7, #4]
 8025480:	212c      	movs	r1, #44	; 0x2c
 8025482:	fb01 f303 	mul.w	r3, r1, r3
 8025486:	4413      	add	r3, r2
 8025488:	3342      	adds	r3, #66	; 0x42
 802548a:	2200      	movs	r2, #0
 802548c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 802548e:	e034      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025490:	78fb      	ldrb	r3, [r7, #3]
 8025492:	687a      	ldr	r2, [r7, #4]
 8025494:	212c      	movs	r1, #44	; 0x2c
 8025496:	fb01 f303 	mul.w	r3, r1, r3
 802549a:	4413      	add	r3, r2
 802549c:	3342      	adds	r3, #66	; 0x42
 802549e:	2202      	movs	r2, #2
 80254a0:	701a      	strb	r2, [r3, #0]
      break;
 80254a2:	e02a      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80254a4:	78fb      	ldrb	r3, [r7, #3]
 80254a6:	687a      	ldr	r2, [r7, #4]
 80254a8:	212c      	movs	r1, #44	; 0x2c
 80254aa:	fb01 f303 	mul.w	r3, r1, r3
 80254ae:	4413      	add	r3, r2
 80254b0:	3354      	adds	r3, #84	; 0x54
 80254b2:	781b      	ldrb	r3, [r3, #0]
 80254b4:	2b00      	cmp	r3, #0
 80254b6:	d109      	bne.n	80254cc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254b8:	78fb      	ldrb	r3, [r7, #3]
 80254ba:	687a      	ldr	r2, [r7, #4]
 80254bc:	212c      	movs	r1, #44	; 0x2c
 80254be:	fb01 f303 	mul.w	r3, r1, r3
 80254c2:	4413      	add	r3, r2
 80254c4:	3342      	adds	r3, #66	; 0x42
 80254c6:	2200      	movs	r2, #0
 80254c8:	701a      	strb	r2, [r3, #0]
      break;
 80254ca:	e016      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80254cc:	78fb      	ldrb	r3, [r7, #3]
 80254ce:	687a      	ldr	r2, [r7, #4]
 80254d0:	212c      	movs	r1, #44	; 0x2c
 80254d2:	fb01 f303 	mul.w	r3, r1, r3
 80254d6:	4413      	add	r3, r2
 80254d8:	3342      	adds	r3, #66	; 0x42
 80254da:	2202      	movs	r2, #2
 80254dc:	701a      	strb	r2, [r3, #0]
      break;
 80254de:	e00c      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80254e0:	78fb      	ldrb	r3, [r7, #3]
 80254e2:	687a      	ldr	r2, [r7, #4]
 80254e4:	212c      	movs	r1, #44	; 0x2c
 80254e6:	fb01 f303 	mul.w	r3, r1, r3
 80254ea:	4413      	add	r3, r2
 80254ec:	3342      	adds	r3, #66	; 0x42
 80254ee:	2200      	movs	r2, #0
 80254f0:	701a      	strb	r2, [r3, #0]
      break;
 80254f2:	e002      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80254f4:	bf00      	nop
 80254f6:	e000      	b.n	80254fa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80254f8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80254fa:	78fb      	ldrb	r3, [r7, #3]
 80254fc:	687a      	ldr	r2, [r7, #4]
 80254fe:	212c      	movs	r1, #44	; 0x2c
 8025500:	fb01 f303 	mul.w	r3, r1, r3
 8025504:	4413      	add	r3, r2
 8025506:	3344      	adds	r3, #68	; 0x44
 8025508:	697a      	ldr	r2, [r7, #20]
 802550a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 802550c:	78fb      	ldrb	r3, [r7, #3]
 802550e:	8b3a      	ldrh	r2, [r7, #24]
 8025510:	6879      	ldr	r1, [r7, #4]
 8025512:	202c      	movs	r0, #44	; 0x2c
 8025514:	fb00 f303 	mul.w	r3, r0, r3
 8025518:	440b      	add	r3, r1
 802551a:	334c      	adds	r3, #76	; 0x4c
 802551c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 802551e:	78fb      	ldrb	r3, [r7, #3]
 8025520:	687a      	ldr	r2, [r7, #4]
 8025522:	212c      	movs	r1, #44	; 0x2c
 8025524:	fb01 f303 	mul.w	r3, r1, r3
 8025528:	4413      	add	r3, r2
 802552a:	3360      	adds	r3, #96	; 0x60
 802552c:	2200      	movs	r2, #0
 802552e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8025530:	78fb      	ldrb	r3, [r7, #3]
 8025532:	687a      	ldr	r2, [r7, #4]
 8025534:	212c      	movs	r1, #44	; 0x2c
 8025536:	fb01 f303 	mul.w	r3, r1, r3
 802553a:	4413      	add	r3, r2
 802553c:	3350      	adds	r3, #80	; 0x50
 802553e:	2200      	movs	r2, #0
 8025540:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025542:	78fb      	ldrb	r3, [r7, #3]
 8025544:	687a      	ldr	r2, [r7, #4]
 8025546:	212c      	movs	r1, #44	; 0x2c
 8025548:	fb01 f303 	mul.w	r3, r1, r3
 802554c:	4413      	add	r3, r2
 802554e:	3339      	adds	r3, #57	; 0x39
 8025550:	78fa      	ldrb	r2, [r7, #3]
 8025552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8025554:	78fb      	ldrb	r3, [r7, #3]
 8025556:	687a      	ldr	r2, [r7, #4]
 8025558:	212c      	movs	r1, #44	; 0x2c
 802555a:	fb01 f303 	mul.w	r3, r1, r3
 802555e:	4413      	add	r3, r2
 8025560:	3361      	adds	r3, #97	; 0x61
 8025562:	2200      	movs	r2, #0
 8025564:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8025566:	687b      	ldr	r3, [r7, #4]
 8025568:	6818      	ldr	r0, [r3, #0]
 802556a:	78fb      	ldrb	r3, [r7, #3]
 802556c:	222c      	movs	r2, #44	; 0x2c
 802556e:	fb02 f303 	mul.w	r3, r2, r3
 8025572:	3338      	adds	r3, #56	; 0x38
 8025574:	687a      	ldr	r2, [r7, #4]
 8025576:	18d1      	adds	r1, r2, r3
 8025578:	687b      	ldr	r3, [r7, #4]
 802557a:	691b      	ldr	r3, [r3, #16]
 802557c:	b2db      	uxtb	r3, r3
 802557e:	461a      	mov	r2, r3
 8025580:	f005 ff4c 	bl	802b41c <USB_HC_StartXfer>
 8025584:	4603      	mov	r3, r0
}
 8025586:	4618      	mov	r0, r3
 8025588:	3708      	adds	r7, #8
 802558a:	46bd      	mov	sp, r7
 802558c:	bd80      	pop	{r7, pc}
 802558e:	bf00      	nop

08025590 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8025590:	b580      	push	{r7, lr}
 8025592:	b086      	sub	sp, #24
 8025594:	af00      	add	r7, sp, #0
 8025596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	681b      	ldr	r3, [r3, #0]
 802559c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802559e:	693b      	ldr	r3, [r7, #16]
 80255a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80255a2:	687b      	ldr	r3, [r7, #4]
 80255a4:	681b      	ldr	r3, [r3, #0]
 80255a6:	4618      	mov	r0, r3
 80255a8:	f005 fc4d 	bl	802ae46 <USB_GetMode>
 80255ac:	4603      	mov	r3, r0
 80255ae:	2b01      	cmp	r3, #1
 80255b0:	f040 80f6 	bne.w	80257a0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	4618      	mov	r0, r3
 80255ba:	f005 fc31 	bl	802ae20 <USB_ReadInterrupts>
 80255be:	4603      	mov	r3, r0
 80255c0:	2b00      	cmp	r3, #0
 80255c2:	f000 80ec 	beq.w	802579e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	681b      	ldr	r3, [r3, #0]
 80255ca:	4618      	mov	r0, r3
 80255cc:	f005 fc28 	bl	802ae20 <USB_ReadInterrupts>
 80255d0:	4603      	mov	r3, r0
 80255d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80255d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80255da:	d104      	bne.n	80255e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80255dc:	687b      	ldr	r3, [r7, #4]
 80255de:	681b      	ldr	r3, [r3, #0]
 80255e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80255e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80255e6:	687b      	ldr	r3, [r7, #4]
 80255e8:	681b      	ldr	r3, [r3, #0]
 80255ea:	4618      	mov	r0, r3
 80255ec:	f005 fc18 	bl	802ae20 <USB_ReadInterrupts>
 80255f0:	4603      	mov	r3, r0
 80255f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80255f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80255fa:	d104      	bne.n	8025606 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80255fc:	687b      	ldr	r3, [r7, #4]
 80255fe:	681b      	ldr	r3, [r3, #0]
 8025600:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025604:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8025606:	687b      	ldr	r3, [r7, #4]
 8025608:	681b      	ldr	r3, [r3, #0]
 802560a:	4618      	mov	r0, r3
 802560c:	f005 fc08 	bl	802ae20 <USB_ReadInterrupts>
 8025610:	4603      	mov	r3, r0
 8025612:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8025616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802561a:	d104      	bne.n	8025626 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	681b      	ldr	r3, [r3, #0]
 8025620:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025624:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8025626:	687b      	ldr	r3, [r7, #4]
 8025628:	681b      	ldr	r3, [r3, #0]
 802562a:	4618      	mov	r0, r3
 802562c:	f005 fbf8 	bl	802ae20 <USB_ReadInterrupts>
 8025630:	4603      	mov	r3, r0
 8025632:	f003 0302 	and.w	r3, r3, #2
 8025636:	2b02      	cmp	r3, #2
 8025638:	d103      	bne.n	8025642 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 802563a:	687b      	ldr	r3, [r7, #4]
 802563c:	681b      	ldr	r3, [r3, #0]
 802563e:	2202      	movs	r2, #2
 8025640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	681b      	ldr	r3, [r3, #0]
 8025646:	4618      	mov	r0, r3
 8025648:	f005 fbea 	bl	802ae20 <USB_ReadInterrupts>
 802564c:	4603      	mov	r3, r0
 802564e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8025652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8025656:	d11c      	bne.n	8025692 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8025658:	687b      	ldr	r3, [r7, #4]
 802565a:	681b      	ldr	r3, [r3, #0]
 802565c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8025660:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8025662:	68fb      	ldr	r3, [r7, #12]
 8025664:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8025668:	681b      	ldr	r3, [r3, #0]
 802566a:	f003 0301 	and.w	r3, r3, #1
 802566e:	2b00      	cmp	r3, #0
 8025670:	d10f      	bne.n	8025692 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8025672:	2110      	movs	r1, #16
 8025674:	6938      	ldr	r0, [r7, #16]
 8025676:	f005 fad9 	bl	802ac2c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 802567a:	6938      	ldr	r0, [r7, #16]
 802567c:	f005 fb0a 	bl	802ac94 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8025680:	687b      	ldr	r3, [r7, #4]
 8025682:	681b      	ldr	r3, [r3, #0]
 8025684:	2101      	movs	r1, #1
 8025686:	4618      	mov	r0, r3
 8025688:	f005 fce0 	bl	802b04c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 802568c:	6878      	ldr	r0, [r7, #4]
 802568e:	f008 faa9 	bl	802dbe4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8025692:	687b      	ldr	r3, [r7, #4]
 8025694:	681b      	ldr	r3, [r3, #0]
 8025696:	4618      	mov	r0, r3
 8025698:	f005 fbc2 	bl	802ae20 <USB_ReadInterrupts>
 802569c:	4603      	mov	r3, r0
 802569e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80256a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80256a6:	d102      	bne.n	80256ae <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80256a8:	6878      	ldr	r0, [r7, #4]
 80256aa:	f001 f89e 	bl	80267ea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	681b      	ldr	r3, [r3, #0]
 80256b2:	4618      	mov	r0, r3
 80256b4:	f005 fbb4 	bl	802ae20 <USB_ReadInterrupts>
 80256b8:	4603      	mov	r3, r0
 80256ba:	f003 0308 	and.w	r3, r3, #8
 80256be:	2b08      	cmp	r3, #8
 80256c0:	d106      	bne.n	80256d0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80256c2:	6878      	ldr	r0, [r7, #4]
 80256c4:	f008 fa72 	bl	802dbac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80256c8:	687b      	ldr	r3, [r7, #4]
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	2208      	movs	r2, #8
 80256ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80256d0:	687b      	ldr	r3, [r7, #4]
 80256d2:	681b      	ldr	r3, [r3, #0]
 80256d4:	4618      	mov	r0, r3
 80256d6:	f005 fba3 	bl	802ae20 <USB_ReadInterrupts>
 80256da:	4603      	mov	r3, r0
 80256dc:	f003 0310 	and.w	r3, r3, #16
 80256e0:	2b10      	cmp	r3, #16
 80256e2:	d101      	bne.n	80256e8 <HAL_HCD_IRQHandler+0x158>
 80256e4:	2301      	movs	r3, #1
 80256e6:	e000      	b.n	80256ea <HAL_HCD_IRQHandler+0x15a>
 80256e8:	2300      	movs	r3, #0
 80256ea:	2b00      	cmp	r3, #0
 80256ec:	d012      	beq.n	8025714 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80256ee:	687b      	ldr	r3, [r7, #4]
 80256f0:	681b      	ldr	r3, [r3, #0]
 80256f2:	699a      	ldr	r2, [r3, #24]
 80256f4:	687b      	ldr	r3, [r7, #4]
 80256f6:	681b      	ldr	r3, [r3, #0]
 80256f8:	f022 0210 	bic.w	r2, r2, #16
 80256fc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80256fe:	6878      	ldr	r0, [r7, #4]
 8025700:	f000 ffa1 	bl	8026646 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	681b      	ldr	r3, [r3, #0]
 8025708:	699a      	ldr	r2, [r3, #24]
 802570a:	687b      	ldr	r3, [r7, #4]
 802570c:	681b      	ldr	r3, [r3, #0]
 802570e:	f042 0210 	orr.w	r2, r2, #16
 8025712:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025714:	687b      	ldr	r3, [r7, #4]
 8025716:	681b      	ldr	r3, [r3, #0]
 8025718:	4618      	mov	r0, r3
 802571a:	f005 fb81 	bl	802ae20 <USB_ReadInterrupts>
 802571e:	4603      	mov	r3, r0
 8025720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8025728:	d13a      	bne.n	80257a0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 802572a:	687b      	ldr	r3, [r7, #4]
 802572c:	681b      	ldr	r3, [r3, #0]
 802572e:	4618      	mov	r0, r3
 8025730:	f005 ffb6 	bl	802b6a0 <USB_HC_ReadInterrupt>
 8025734:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025736:	2300      	movs	r3, #0
 8025738:	617b      	str	r3, [r7, #20]
 802573a:	e025      	b.n	8025788 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 802573c:	697b      	ldr	r3, [r7, #20]
 802573e:	f003 030f 	and.w	r3, r3, #15
 8025742:	68ba      	ldr	r2, [r7, #8]
 8025744:	fa22 f303 	lsr.w	r3, r2, r3
 8025748:	f003 0301 	and.w	r3, r3, #1
 802574c:	2b00      	cmp	r3, #0
 802574e:	d018      	beq.n	8025782 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8025750:	697b      	ldr	r3, [r7, #20]
 8025752:	015a      	lsls	r2, r3, #5
 8025754:	68fb      	ldr	r3, [r7, #12]
 8025756:	4413      	add	r3, r2
 8025758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802575c:	681b      	ldr	r3, [r3, #0]
 802575e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025766:	d106      	bne.n	8025776 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8025768:	697b      	ldr	r3, [r7, #20]
 802576a:	b2db      	uxtb	r3, r3
 802576c:	4619      	mov	r1, r3
 802576e:	6878      	ldr	r0, [r7, #4]
 8025770:	f000 f8ab 	bl	80258ca <HCD_HC_IN_IRQHandler>
 8025774:	e005      	b.n	8025782 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8025776:	697b      	ldr	r3, [r7, #20]
 8025778:	b2db      	uxtb	r3, r3
 802577a:	4619      	mov	r1, r3
 802577c:	6878      	ldr	r0, [r7, #4]
 802577e:	f000 fbf9 	bl	8025f74 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8025782:	697b      	ldr	r3, [r7, #20]
 8025784:	3301      	adds	r3, #1
 8025786:	617b      	str	r3, [r7, #20]
 8025788:	687b      	ldr	r3, [r7, #4]
 802578a:	689b      	ldr	r3, [r3, #8]
 802578c:	697a      	ldr	r2, [r7, #20]
 802578e:	429a      	cmp	r2, r3
 8025790:	d3d4      	bcc.n	802573c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	681b      	ldr	r3, [r3, #0]
 8025796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 802579a:	615a      	str	r2, [r3, #20]
 802579c:	e000      	b.n	80257a0 <HAL_HCD_IRQHandler+0x210>
      return;
 802579e:	bf00      	nop
    }
  }
}
 80257a0:	3718      	adds	r7, #24
 80257a2:	46bd      	mov	sp, r7
 80257a4:	bd80      	pop	{r7, pc}

080257a6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80257a6:	b580      	push	{r7, lr}
 80257a8:	b082      	sub	sp, #8
 80257aa:	af00      	add	r7, sp, #0
 80257ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80257ae:	687b      	ldr	r3, [r7, #4]
 80257b0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80257b4:	2b01      	cmp	r3, #1
 80257b6:	d101      	bne.n	80257bc <HAL_HCD_Start+0x16>
 80257b8:	2302      	movs	r3, #2
 80257ba:	e013      	b.n	80257e4 <HAL_HCD_Start+0x3e>
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	2201      	movs	r2, #1
 80257c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80257c4:	687b      	ldr	r3, [r7, #4]
 80257c6:	681b      	ldr	r3, [r3, #0]
 80257c8:	2101      	movs	r1, #1
 80257ca:	4618      	mov	r0, r3
 80257cc:	f005 fca2 	bl	802b114 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80257d0:	687b      	ldr	r3, [r7, #4]
 80257d2:	681b      	ldr	r3, [r3, #0]
 80257d4:	4618      	mov	r0, r3
 80257d6:	f005 f9ba 	bl	802ab4e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80257da:	687b      	ldr	r3, [r7, #4]
 80257dc:	2200      	movs	r2, #0
 80257de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80257e2:	2300      	movs	r3, #0
}
 80257e4:	4618      	mov	r0, r3
 80257e6:	3708      	adds	r7, #8
 80257e8:	46bd      	mov	sp, r7
 80257ea:	bd80      	pop	{r7, pc}

080257ec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80257ec:	b580      	push	{r7, lr}
 80257ee:	b082      	sub	sp, #8
 80257f0:	af00      	add	r7, sp, #0
 80257f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80257fa:	2b01      	cmp	r3, #1
 80257fc:	d101      	bne.n	8025802 <HAL_HCD_Stop+0x16>
 80257fe:	2302      	movs	r3, #2
 8025800:	e00d      	b.n	802581e <HAL_HCD_Stop+0x32>
 8025802:	687b      	ldr	r3, [r7, #4]
 8025804:	2201      	movs	r2, #1
 8025806:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 802580a:	687b      	ldr	r3, [r7, #4]
 802580c:	681b      	ldr	r3, [r3, #0]
 802580e:	4618      	mov	r0, r3
 8025810:	f006 f890 	bl	802b934 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025814:	687b      	ldr	r3, [r7, #4]
 8025816:	2200      	movs	r2, #0
 8025818:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 802581c:	2300      	movs	r3, #0
}
 802581e:	4618      	mov	r0, r3
 8025820:	3708      	adds	r7, #8
 8025822:	46bd      	mov	sp, r7
 8025824:	bd80      	pop	{r7, pc}

08025826 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8025826:	b580      	push	{r7, lr}
 8025828:	b082      	sub	sp, #8
 802582a:	af00      	add	r7, sp, #0
 802582c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 802582e:	687b      	ldr	r3, [r7, #4]
 8025830:	681b      	ldr	r3, [r3, #0]
 8025832:	4618      	mov	r0, r3
 8025834:	f005 fc44 	bl	802b0c0 <USB_ResetPort>
 8025838:	4603      	mov	r3, r0
}
 802583a:	4618      	mov	r0, r3
 802583c:	3708      	adds	r7, #8
 802583e:	46bd      	mov	sp, r7
 8025840:	bd80      	pop	{r7, pc}

08025842 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025842:	b480      	push	{r7}
 8025844:	b083      	sub	sp, #12
 8025846:	af00      	add	r7, sp, #0
 8025848:	6078      	str	r0, [r7, #4]
 802584a:	460b      	mov	r3, r1
 802584c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 802584e:	78fb      	ldrb	r3, [r7, #3]
 8025850:	687a      	ldr	r2, [r7, #4]
 8025852:	212c      	movs	r1, #44	; 0x2c
 8025854:	fb01 f303 	mul.w	r3, r1, r3
 8025858:	4413      	add	r3, r2
 802585a:	3360      	adds	r3, #96	; 0x60
 802585c:	781b      	ldrb	r3, [r3, #0]
}
 802585e:	4618      	mov	r0, r3
 8025860:	370c      	adds	r7, #12
 8025862:	46bd      	mov	sp, r7
 8025864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025868:	4770      	bx	lr

0802586a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802586a:	b480      	push	{r7}
 802586c:	b083      	sub	sp, #12
 802586e:	af00      	add	r7, sp, #0
 8025870:	6078      	str	r0, [r7, #4]
 8025872:	460b      	mov	r3, r1
 8025874:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8025876:	78fb      	ldrb	r3, [r7, #3]
 8025878:	687a      	ldr	r2, [r7, #4]
 802587a:	212c      	movs	r1, #44	; 0x2c
 802587c:	fb01 f303 	mul.w	r3, r1, r3
 8025880:	4413      	add	r3, r2
 8025882:	3350      	adds	r3, #80	; 0x50
 8025884:	681b      	ldr	r3, [r3, #0]
}
 8025886:	4618      	mov	r0, r3
 8025888:	370c      	adds	r7, #12
 802588a:	46bd      	mov	sp, r7
 802588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025890:	4770      	bx	lr

08025892 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8025892:	b580      	push	{r7, lr}
 8025894:	b082      	sub	sp, #8
 8025896:	af00      	add	r7, sp, #0
 8025898:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	681b      	ldr	r3, [r3, #0]
 802589e:	4618      	mov	r0, r3
 80258a0:	f005 fc88 	bl	802b1b4 <USB_GetCurrentFrame>
 80258a4:	4603      	mov	r3, r0
}
 80258a6:	4618      	mov	r0, r3
 80258a8:	3708      	adds	r7, #8
 80258aa:	46bd      	mov	sp, r7
 80258ac:	bd80      	pop	{r7, pc}

080258ae <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80258ae:	b580      	push	{r7, lr}
 80258b0:	b082      	sub	sp, #8
 80258b2:	af00      	add	r7, sp, #0
 80258b4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	681b      	ldr	r3, [r3, #0]
 80258ba:	4618      	mov	r0, r3
 80258bc:	f005 fc63 	bl	802b186 <USB_GetHostSpeed>
 80258c0:	4603      	mov	r3, r0
}
 80258c2:	4618      	mov	r0, r3
 80258c4:	3708      	adds	r7, #8
 80258c6:	46bd      	mov	sp, r7
 80258c8:	bd80      	pop	{r7, pc}

080258ca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80258ca:	b580      	push	{r7, lr}
 80258cc:	b086      	sub	sp, #24
 80258ce:	af00      	add	r7, sp, #0
 80258d0:	6078      	str	r0, [r7, #4]
 80258d2:	460b      	mov	r3, r1
 80258d4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	681b      	ldr	r3, [r3, #0]
 80258da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80258dc:	697b      	ldr	r3, [r7, #20]
 80258de:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80258e0:	78fb      	ldrb	r3, [r7, #3]
 80258e2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80258e4:	68fb      	ldr	r3, [r7, #12]
 80258e6:	015a      	lsls	r2, r3, #5
 80258e8:	693b      	ldr	r3, [r7, #16]
 80258ea:	4413      	add	r3, r2
 80258ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258f0:	689b      	ldr	r3, [r3, #8]
 80258f2:	f003 0304 	and.w	r3, r3, #4
 80258f6:	2b04      	cmp	r3, #4
 80258f8:	d11a      	bne.n	8025930 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80258fa:	68fb      	ldr	r3, [r7, #12]
 80258fc:	015a      	lsls	r2, r3, #5
 80258fe:	693b      	ldr	r3, [r7, #16]
 8025900:	4413      	add	r3, r2
 8025902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025906:	461a      	mov	r2, r3
 8025908:	2304      	movs	r3, #4
 802590a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 802590c:	687a      	ldr	r2, [r7, #4]
 802590e:	68fb      	ldr	r3, [r7, #12]
 8025910:	212c      	movs	r1, #44	; 0x2c
 8025912:	fb01 f303 	mul.w	r3, r1, r3
 8025916:	4413      	add	r3, r2
 8025918:	3361      	adds	r3, #97	; 0x61
 802591a:	2206      	movs	r2, #6
 802591c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802591e:	687b      	ldr	r3, [r7, #4]
 8025920:	681b      	ldr	r3, [r3, #0]
 8025922:	68fa      	ldr	r2, [r7, #12]
 8025924:	b2d2      	uxtb	r2, r2
 8025926:	4611      	mov	r1, r2
 8025928:	4618      	mov	r0, r3
 802592a:	f005 feca 	bl	802b6c2 <USB_HC_Halt>
 802592e:	e0af      	b.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025930:	68fb      	ldr	r3, [r7, #12]
 8025932:	015a      	lsls	r2, r3, #5
 8025934:	693b      	ldr	r3, [r7, #16]
 8025936:	4413      	add	r3, r2
 8025938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802593c:	689b      	ldr	r3, [r3, #8]
 802593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8025946:	d11b      	bne.n	8025980 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8025948:	68fb      	ldr	r3, [r7, #12]
 802594a:	015a      	lsls	r2, r3, #5
 802594c:	693b      	ldr	r3, [r7, #16]
 802594e:	4413      	add	r3, r2
 8025950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025954:	461a      	mov	r2, r3
 8025956:	f44f 7380 	mov.w	r3, #256	; 0x100
 802595a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 802595c:	687a      	ldr	r2, [r7, #4]
 802595e:	68fb      	ldr	r3, [r7, #12]
 8025960:	212c      	movs	r1, #44	; 0x2c
 8025962:	fb01 f303 	mul.w	r3, r1, r3
 8025966:	4413      	add	r3, r2
 8025968:	3361      	adds	r3, #97	; 0x61
 802596a:	2207      	movs	r2, #7
 802596c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	681b      	ldr	r3, [r3, #0]
 8025972:	68fa      	ldr	r2, [r7, #12]
 8025974:	b2d2      	uxtb	r2, r2
 8025976:	4611      	mov	r1, r2
 8025978:	4618      	mov	r0, r3
 802597a:	f005 fea2 	bl	802b6c2 <USB_HC_Halt>
 802597e:	e087      	b.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025980:	68fb      	ldr	r3, [r7, #12]
 8025982:	015a      	lsls	r2, r3, #5
 8025984:	693b      	ldr	r3, [r7, #16]
 8025986:	4413      	add	r3, r2
 8025988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802598c:	689b      	ldr	r3, [r3, #8]
 802598e:	f003 0320 	and.w	r3, r3, #32
 8025992:	2b20      	cmp	r3, #32
 8025994:	d109      	bne.n	80259aa <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025996:	68fb      	ldr	r3, [r7, #12]
 8025998:	015a      	lsls	r2, r3, #5
 802599a:	693b      	ldr	r3, [r7, #16]
 802599c:	4413      	add	r3, r2
 802599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259a2:	461a      	mov	r2, r3
 80259a4:	2320      	movs	r3, #32
 80259a6:	6093      	str	r3, [r2, #8]
 80259a8:	e072      	b.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80259aa:	68fb      	ldr	r3, [r7, #12]
 80259ac:	015a      	lsls	r2, r3, #5
 80259ae:	693b      	ldr	r3, [r7, #16]
 80259b0:	4413      	add	r3, r2
 80259b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259b6:	689b      	ldr	r3, [r3, #8]
 80259b8:	f003 0308 	and.w	r3, r3, #8
 80259bc:	2b08      	cmp	r3, #8
 80259be:	d11a      	bne.n	80259f6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80259c0:	68fb      	ldr	r3, [r7, #12]
 80259c2:	015a      	lsls	r2, r3, #5
 80259c4:	693b      	ldr	r3, [r7, #16]
 80259c6:	4413      	add	r3, r2
 80259c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259cc:	461a      	mov	r2, r3
 80259ce:	2308      	movs	r3, #8
 80259d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80259d2:	687a      	ldr	r2, [r7, #4]
 80259d4:	68fb      	ldr	r3, [r7, #12]
 80259d6:	212c      	movs	r1, #44	; 0x2c
 80259d8:	fb01 f303 	mul.w	r3, r1, r3
 80259dc:	4413      	add	r3, r2
 80259de:	3361      	adds	r3, #97	; 0x61
 80259e0:	2205      	movs	r2, #5
 80259e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259e4:	687b      	ldr	r3, [r7, #4]
 80259e6:	681b      	ldr	r3, [r3, #0]
 80259e8:	68fa      	ldr	r2, [r7, #12]
 80259ea:	b2d2      	uxtb	r2, r2
 80259ec:	4611      	mov	r1, r2
 80259ee:	4618      	mov	r0, r3
 80259f0:	f005 fe67 	bl	802b6c2 <USB_HC_Halt>
 80259f4:	e04c      	b.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80259f6:	68fb      	ldr	r3, [r7, #12]
 80259f8:	015a      	lsls	r2, r3, #5
 80259fa:	693b      	ldr	r3, [r7, #16]
 80259fc:	4413      	add	r3, r2
 80259fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a02:	689b      	ldr	r3, [r3, #8]
 8025a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8025a08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025a0c:	d11b      	bne.n	8025a46 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025a0e:	68fb      	ldr	r3, [r7, #12]
 8025a10:	015a      	lsls	r2, r3, #5
 8025a12:	693b      	ldr	r3, [r7, #16]
 8025a14:	4413      	add	r3, r2
 8025a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a1a:	461a      	mov	r2, r3
 8025a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025a20:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025a22:	687a      	ldr	r2, [r7, #4]
 8025a24:	68fb      	ldr	r3, [r7, #12]
 8025a26:	212c      	movs	r1, #44	; 0x2c
 8025a28:	fb01 f303 	mul.w	r3, r1, r3
 8025a2c:	4413      	add	r3, r2
 8025a2e:	3361      	adds	r3, #97	; 0x61
 8025a30:	2208      	movs	r2, #8
 8025a32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	681b      	ldr	r3, [r3, #0]
 8025a38:	68fa      	ldr	r2, [r7, #12]
 8025a3a:	b2d2      	uxtb	r2, r2
 8025a3c:	4611      	mov	r1, r2
 8025a3e:	4618      	mov	r0, r3
 8025a40:	f005 fe3f 	bl	802b6c2 <USB_HC_Halt>
 8025a44:	e024      	b.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8025a46:	68fb      	ldr	r3, [r7, #12]
 8025a48:	015a      	lsls	r2, r3, #5
 8025a4a:	693b      	ldr	r3, [r7, #16]
 8025a4c:	4413      	add	r3, r2
 8025a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a52:	689b      	ldr	r3, [r3, #8]
 8025a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025a58:	2b80      	cmp	r3, #128	; 0x80
 8025a5a:	d119      	bne.n	8025a90 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025a5c:	68fb      	ldr	r3, [r7, #12]
 8025a5e:	015a      	lsls	r2, r3, #5
 8025a60:	693b      	ldr	r3, [r7, #16]
 8025a62:	4413      	add	r3, r2
 8025a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a68:	461a      	mov	r2, r3
 8025a6a:	2380      	movs	r3, #128	; 0x80
 8025a6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025a6e:	687a      	ldr	r2, [r7, #4]
 8025a70:	68fb      	ldr	r3, [r7, #12]
 8025a72:	212c      	movs	r1, #44	; 0x2c
 8025a74:	fb01 f303 	mul.w	r3, r1, r3
 8025a78:	4413      	add	r3, r2
 8025a7a:	3361      	adds	r3, #97	; 0x61
 8025a7c:	2206      	movs	r2, #6
 8025a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025a80:	687b      	ldr	r3, [r7, #4]
 8025a82:	681b      	ldr	r3, [r3, #0]
 8025a84:	68fa      	ldr	r2, [r7, #12]
 8025a86:	b2d2      	uxtb	r2, r2
 8025a88:	4611      	mov	r1, r2
 8025a8a:	4618      	mov	r0, r3
 8025a8c:	f005 fe19 	bl	802b6c2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	015a      	lsls	r2, r3, #5
 8025a94:	693b      	ldr	r3, [r7, #16]
 8025a96:	4413      	add	r3, r2
 8025a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a9c:	689b      	ldr	r3, [r3, #8]
 8025a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025aa6:	d112      	bne.n	8025ace <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025aa8:	687b      	ldr	r3, [r7, #4]
 8025aaa:	681b      	ldr	r3, [r3, #0]
 8025aac:	68fa      	ldr	r2, [r7, #12]
 8025aae:	b2d2      	uxtb	r2, r2
 8025ab0:	4611      	mov	r1, r2
 8025ab2:	4618      	mov	r0, r3
 8025ab4:	f005 fe05 	bl	802b6c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025ab8:	68fb      	ldr	r3, [r7, #12]
 8025aba:	015a      	lsls	r2, r3, #5
 8025abc:	693b      	ldr	r3, [r7, #16]
 8025abe:	4413      	add	r3, r2
 8025ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ac4:	461a      	mov	r2, r3
 8025ac6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025aca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025acc:	e24e      	b.n	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025ace:	68fb      	ldr	r3, [r7, #12]
 8025ad0:	015a      	lsls	r2, r3, #5
 8025ad2:	693b      	ldr	r3, [r7, #16]
 8025ad4:	4413      	add	r3, r2
 8025ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ada:	689b      	ldr	r3, [r3, #8]
 8025adc:	f003 0301 	and.w	r3, r3, #1
 8025ae0:	2b01      	cmp	r3, #1
 8025ae2:	f040 80df 	bne.w	8025ca4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025ae6:	687b      	ldr	r3, [r7, #4]
 8025ae8:	691b      	ldr	r3, [r3, #16]
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d019      	beq.n	8025b22 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025aee:	687a      	ldr	r2, [r7, #4]
 8025af0:	68fb      	ldr	r3, [r7, #12]
 8025af2:	212c      	movs	r1, #44	; 0x2c
 8025af4:	fb01 f303 	mul.w	r3, r1, r3
 8025af8:	4413      	add	r3, r2
 8025afa:	3348      	adds	r3, #72	; 0x48
 8025afc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025afe:	68fb      	ldr	r3, [r7, #12]
 8025b00:	0159      	lsls	r1, r3, #5
 8025b02:	693b      	ldr	r3, [r7, #16]
 8025b04:	440b      	add	r3, r1
 8025b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b0a:	691b      	ldr	r3, [r3, #16]
 8025b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025b10:	1ad2      	subs	r2, r2, r3
 8025b12:	6879      	ldr	r1, [r7, #4]
 8025b14:	68fb      	ldr	r3, [r7, #12]
 8025b16:	202c      	movs	r0, #44	; 0x2c
 8025b18:	fb00 f303 	mul.w	r3, r0, r3
 8025b1c:	440b      	add	r3, r1
 8025b1e:	3350      	adds	r3, #80	; 0x50
 8025b20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025b22:	687a      	ldr	r2, [r7, #4]
 8025b24:	68fb      	ldr	r3, [r7, #12]
 8025b26:	212c      	movs	r1, #44	; 0x2c
 8025b28:	fb01 f303 	mul.w	r3, r1, r3
 8025b2c:	4413      	add	r3, r2
 8025b2e:	3361      	adds	r3, #97	; 0x61
 8025b30:	2201      	movs	r2, #1
 8025b32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025b34:	687a      	ldr	r2, [r7, #4]
 8025b36:	68fb      	ldr	r3, [r7, #12]
 8025b38:	212c      	movs	r1, #44	; 0x2c
 8025b3a:	fb01 f303 	mul.w	r3, r1, r3
 8025b3e:	4413      	add	r3, r2
 8025b40:	335c      	adds	r3, #92	; 0x5c
 8025b42:	2200      	movs	r2, #0
 8025b44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025b46:	68fb      	ldr	r3, [r7, #12]
 8025b48:	015a      	lsls	r2, r3, #5
 8025b4a:	693b      	ldr	r3, [r7, #16]
 8025b4c:	4413      	add	r3, r2
 8025b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b52:	461a      	mov	r2, r3
 8025b54:	2301      	movs	r3, #1
 8025b56:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b58:	687a      	ldr	r2, [r7, #4]
 8025b5a:	68fb      	ldr	r3, [r7, #12]
 8025b5c:	212c      	movs	r1, #44	; 0x2c
 8025b5e:	fb01 f303 	mul.w	r3, r1, r3
 8025b62:	4413      	add	r3, r2
 8025b64:	333f      	adds	r3, #63	; 0x3f
 8025b66:	781b      	ldrb	r3, [r3, #0]
 8025b68:	2b00      	cmp	r3, #0
 8025b6a:	d009      	beq.n	8025b80 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025b6c:	687a      	ldr	r2, [r7, #4]
 8025b6e:	68fb      	ldr	r3, [r7, #12]
 8025b70:	212c      	movs	r1, #44	; 0x2c
 8025b72:	fb01 f303 	mul.w	r3, r1, r3
 8025b76:	4413      	add	r3, r2
 8025b78:	333f      	adds	r3, #63	; 0x3f
 8025b7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025b7c:	2b02      	cmp	r3, #2
 8025b7e:	d111      	bne.n	8025ba4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025b80:	687b      	ldr	r3, [r7, #4]
 8025b82:	681b      	ldr	r3, [r3, #0]
 8025b84:	68fa      	ldr	r2, [r7, #12]
 8025b86:	b2d2      	uxtb	r2, r2
 8025b88:	4611      	mov	r1, r2
 8025b8a:	4618      	mov	r0, r3
 8025b8c:	f005 fd99 	bl	802b6c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025b90:	68fb      	ldr	r3, [r7, #12]
 8025b92:	015a      	lsls	r2, r3, #5
 8025b94:	693b      	ldr	r3, [r7, #16]
 8025b96:	4413      	add	r3, r2
 8025b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b9c:	461a      	mov	r2, r3
 8025b9e:	2310      	movs	r3, #16
 8025ba0:	6093      	str	r3, [r2, #8]
 8025ba2:	e03a      	b.n	8025c1a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025ba4:	687a      	ldr	r2, [r7, #4]
 8025ba6:	68fb      	ldr	r3, [r7, #12]
 8025ba8:	212c      	movs	r1, #44	; 0x2c
 8025baa:	fb01 f303 	mul.w	r3, r1, r3
 8025bae:	4413      	add	r3, r2
 8025bb0:	333f      	adds	r3, #63	; 0x3f
 8025bb2:	781b      	ldrb	r3, [r3, #0]
 8025bb4:	2b03      	cmp	r3, #3
 8025bb6:	d009      	beq.n	8025bcc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025bb8:	687a      	ldr	r2, [r7, #4]
 8025bba:	68fb      	ldr	r3, [r7, #12]
 8025bbc:	212c      	movs	r1, #44	; 0x2c
 8025bbe:	fb01 f303 	mul.w	r3, r1, r3
 8025bc2:	4413      	add	r3, r2
 8025bc4:	333f      	adds	r3, #63	; 0x3f
 8025bc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025bc8:	2b01      	cmp	r3, #1
 8025bca:	d126      	bne.n	8025c1a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025bcc:	68fb      	ldr	r3, [r7, #12]
 8025bce:	015a      	lsls	r2, r3, #5
 8025bd0:	693b      	ldr	r3, [r7, #16]
 8025bd2:	4413      	add	r3, r2
 8025bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025bd8:	681b      	ldr	r3, [r3, #0]
 8025bda:	68fa      	ldr	r2, [r7, #12]
 8025bdc:	0151      	lsls	r1, r2, #5
 8025bde:	693a      	ldr	r2, [r7, #16]
 8025be0:	440a      	add	r2, r1
 8025be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025be6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025bea:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025bec:	687a      	ldr	r2, [r7, #4]
 8025bee:	68fb      	ldr	r3, [r7, #12]
 8025bf0:	212c      	movs	r1, #44	; 0x2c
 8025bf2:	fb01 f303 	mul.w	r3, r1, r3
 8025bf6:	4413      	add	r3, r2
 8025bf8:	3360      	adds	r3, #96	; 0x60
 8025bfa:	2201      	movs	r2, #1
 8025bfc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025bfe:	68fb      	ldr	r3, [r7, #12]
 8025c00:	b2d9      	uxtb	r1, r3
 8025c02:	687a      	ldr	r2, [r7, #4]
 8025c04:	68fb      	ldr	r3, [r7, #12]
 8025c06:	202c      	movs	r0, #44	; 0x2c
 8025c08:	fb00 f303 	mul.w	r3, r0, r3
 8025c0c:	4413      	add	r3, r2
 8025c0e:	3360      	adds	r3, #96	; 0x60
 8025c10:	781b      	ldrb	r3, [r3, #0]
 8025c12:	461a      	mov	r2, r3
 8025c14:	6878      	ldr	r0, [r7, #4]
 8025c16:	f007 fff3 	bl	802dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025c1a:	687b      	ldr	r3, [r7, #4]
 8025c1c:	691b      	ldr	r3, [r3, #16]
 8025c1e:	2b01      	cmp	r3, #1
 8025c20:	d12b      	bne.n	8025c7a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025c22:	687a      	ldr	r2, [r7, #4]
 8025c24:	68fb      	ldr	r3, [r7, #12]
 8025c26:	212c      	movs	r1, #44	; 0x2c
 8025c28:	fb01 f303 	mul.w	r3, r1, r3
 8025c2c:	4413      	add	r3, r2
 8025c2e:	3348      	adds	r3, #72	; 0x48
 8025c30:	681b      	ldr	r3, [r3, #0]
 8025c32:	6879      	ldr	r1, [r7, #4]
 8025c34:	68fa      	ldr	r2, [r7, #12]
 8025c36:	202c      	movs	r0, #44	; 0x2c
 8025c38:	fb00 f202 	mul.w	r2, r0, r2
 8025c3c:	440a      	add	r2, r1
 8025c3e:	3240      	adds	r2, #64	; 0x40
 8025c40:	8812      	ldrh	r2, [r2, #0]
 8025c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8025c46:	f003 0301 	and.w	r3, r3, #1
 8025c4a:	2b00      	cmp	r3, #0
 8025c4c:	f000 818e 	beq.w	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c50:	687a      	ldr	r2, [r7, #4]
 8025c52:	68fb      	ldr	r3, [r7, #12]
 8025c54:	212c      	movs	r1, #44	; 0x2c
 8025c56:	fb01 f303 	mul.w	r3, r1, r3
 8025c5a:	4413      	add	r3, r2
 8025c5c:	3354      	adds	r3, #84	; 0x54
 8025c5e:	781b      	ldrb	r3, [r3, #0]
 8025c60:	f083 0301 	eor.w	r3, r3, #1
 8025c64:	b2d8      	uxtb	r0, r3
 8025c66:	687a      	ldr	r2, [r7, #4]
 8025c68:	68fb      	ldr	r3, [r7, #12]
 8025c6a:	212c      	movs	r1, #44	; 0x2c
 8025c6c:	fb01 f303 	mul.w	r3, r1, r3
 8025c70:	4413      	add	r3, r2
 8025c72:	3354      	adds	r3, #84	; 0x54
 8025c74:	4602      	mov	r2, r0
 8025c76:	701a      	strb	r2, [r3, #0]
}
 8025c78:	e178      	b.n	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025c7a:	687a      	ldr	r2, [r7, #4]
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	212c      	movs	r1, #44	; 0x2c
 8025c80:	fb01 f303 	mul.w	r3, r1, r3
 8025c84:	4413      	add	r3, r2
 8025c86:	3354      	adds	r3, #84	; 0x54
 8025c88:	781b      	ldrb	r3, [r3, #0]
 8025c8a:	f083 0301 	eor.w	r3, r3, #1
 8025c8e:	b2d8      	uxtb	r0, r3
 8025c90:	687a      	ldr	r2, [r7, #4]
 8025c92:	68fb      	ldr	r3, [r7, #12]
 8025c94:	212c      	movs	r1, #44	; 0x2c
 8025c96:	fb01 f303 	mul.w	r3, r1, r3
 8025c9a:	4413      	add	r3, r2
 8025c9c:	3354      	adds	r3, #84	; 0x54
 8025c9e:	4602      	mov	r2, r0
 8025ca0:	701a      	strb	r2, [r3, #0]
}
 8025ca2:	e163      	b.n	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025ca4:	68fb      	ldr	r3, [r7, #12]
 8025ca6:	015a      	lsls	r2, r3, #5
 8025ca8:	693b      	ldr	r3, [r7, #16]
 8025caa:	4413      	add	r3, r2
 8025cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025cb0:	689b      	ldr	r3, [r3, #8]
 8025cb2:	f003 0302 	and.w	r3, r3, #2
 8025cb6:	2b02      	cmp	r3, #2
 8025cb8:	f040 80f6 	bne.w	8025ea8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025cbc:	687a      	ldr	r2, [r7, #4]
 8025cbe:	68fb      	ldr	r3, [r7, #12]
 8025cc0:	212c      	movs	r1, #44	; 0x2c
 8025cc2:	fb01 f303 	mul.w	r3, r1, r3
 8025cc6:	4413      	add	r3, r2
 8025cc8:	3361      	adds	r3, #97	; 0x61
 8025cca:	781b      	ldrb	r3, [r3, #0]
 8025ccc:	2b01      	cmp	r3, #1
 8025cce:	d109      	bne.n	8025ce4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025cd0:	687a      	ldr	r2, [r7, #4]
 8025cd2:	68fb      	ldr	r3, [r7, #12]
 8025cd4:	212c      	movs	r1, #44	; 0x2c
 8025cd6:	fb01 f303 	mul.w	r3, r1, r3
 8025cda:	4413      	add	r3, r2
 8025cdc:	3360      	adds	r3, #96	; 0x60
 8025cde:	2201      	movs	r2, #1
 8025ce0:	701a      	strb	r2, [r3, #0]
 8025ce2:	e0c9      	b.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025ce4:	687a      	ldr	r2, [r7, #4]
 8025ce6:	68fb      	ldr	r3, [r7, #12]
 8025ce8:	212c      	movs	r1, #44	; 0x2c
 8025cea:	fb01 f303 	mul.w	r3, r1, r3
 8025cee:	4413      	add	r3, r2
 8025cf0:	3361      	adds	r3, #97	; 0x61
 8025cf2:	781b      	ldrb	r3, [r3, #0]
 8025cf4:	2b05      	cmp	r3, #5
 8025cf6:	d109      	bne.n	8025d0c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025cf8:	687a      	ldr	r2, [r7, #4]
 8025cfa:	68fb      	ldr	r3, [r7, #12]
 8025cfc:	212c      	movs	r1, #44	; 0x2c
 8025cfe:	fb01 f303 	mul.w	r3, r1, r3
 8025d02:	4413      	add	r3, r2
 8025d04:	3360      	adds	r3, #96	; 0x60
 8025d06:	2205      	movs	r2, #5
 8025d08:	701a      	strb	r2, [r3, #0]
 8025d0a:	e0b5      	b.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d0c:	687a      	ldr	r2, [r7, #4]
 8025d0e:	68fb      	ldr	r3, [r7, #12]
 8025d10:	212c      	movs	r1, #44	; 0x2c
 8025d12:	fb01 f303 	mul.w	r3, r1, r3
 8025d16:	4413      	add	r3, r2
 8025d18:	3361      	adds	r3, #97	; 0x61
 8025d1a:	781b      	ldrb	r3, [r3, #0]
 8025d1c:	2b06      	cmp	r3, #6
 8025d1e:	d009      	beq.n	8025d34 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025d20:	687a      	ldr	r2, [r7, #4]
 8025d22:	68fb      	ldr	r3, [r7, #12]
 8025d24:	212c      	movs	r1, #44	; 0x2c
 8025d26:	fb01 f303 	mul.w	r3, r1, r3
 8025d2a:	4413      	add	r3, r2
 8025d2c:	3361      	adds	r3, #97	; 0x61
 8025d2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025d30:	2b08      	cmp	r3, #8
 8025d32:	d150      	bne.n	8025dd6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025d34:	687a      	ldr	r2, [r7, #4]
 8025d36:	68fb      	ldr	r3, [r7, #12]
 8025d38:	212c      	movs	r1, #44	; 0x2c
 8025d3a:	fb01 f303 	mul.w	r3, r1, r3
 8025d3e:	4413      	add	r3, r2
 8025d40:	335c      	adds	r3, #92	; 0x5c
 8025d42:	681b      	ldr	r3, [r3, #0]
 8025d44:	1c5a      	adds	r2, r3, #1
 8025d46:	6879      	ldr	r1, [r7, #4]
 8025d48:	68fb      	ldr	r3, [r7, #12]
 8025d4a:	202c      	movs	r0, #44	; 0x2c
 8025d4c:	fb00 f303 	mul.w	r3, r0, r3
 8025d50:	440b      	add	r3, r1
 8025d52:	335c      	adds	r3, #92	; 0x5c
 8025d54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d56:	687a      	ldr	r2, [r7, #4]
 8025d58:	68fb      	ldr	r3, [r7, #12]
 8025d5a:	212c      	movs	r1, #44	; 0x2c
 8025d5c:	fb01 f303 	mul.w	r3, r1, r3
 8025d60:	4413      	add	r3, r2
 8025d62:	335c      	adds	r3, #92	; 0x5c
 8025d64:	681b      	ldr	r3, [r3, #0]
 8025d66:	2b02      	cmp	r3, #2
 8025d68:	d912      	bls.n	8025d90 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025d6a:	687a      	ldr	r2, [r7, #4]
 8025d6c:	68fb      	ldr	r3, [r7, #12]
 8025d6e:	212c      	movs	r1, #44	; 0x2c
 8025d70:	fb01 f303 	mul.w	r3, r1, r3
 8025d74:	4413      	add	r3, r2
 8025d76:	335c      	adds	r3, #92	; 0x5c
 8025d78:	2200      	movs	r2, #0
 8025d7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d7c:	687a      	ldr	r2, [r7, #4]
 8025d7e:	68fb      	ldr	r3, [r7, #12]
 8025d80:	212c      	movs	r1, #44	; 0x2c
 8025d82:	fb01 f303 	mul.w	r3, r1, r3
 8025d86:	4413      	add	r3, r2
 8025d88:	3360      	adds	r3, #96	; 0x60
 8025d8a:	2204      	movs	r2, #4
 8025d8c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d8e:	e073      	b.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025d90:	687a      	ldr	r2, [r7, #4]
 8025d92:	68fb      	ldr	r3, [r7, #12]
 8025d94:	212c      	movs	r1, #44	; 0x2c
 8025d96:	fb01 f303 	mul.w	r3, r1, r3
 8025d9a:	4413      	add	r3, r2
 8025d9c:	3360      	adds	r3, #96	; 0x60
 8025d9e:	2202      	movs	r2, #2
 8025da0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025da2:	68fb      	ldr	r3, [r7, #12]
 8025da4:	015a      	lsls	r2, r3, #5
 8025da6:	693b      	ldr	r3, [r7, #16]
 8025da8:	4413      	add	r3, r2
 8025daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dae:	681b      	ldr	r3, [r3, #0]
 8025db0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025db2:	68bb      	ldr	r3, [r7, #8]
 8025db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025db8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025dba:	68bb      	ldr	r3, [r7, #8]
 8025dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025dc0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025dc2:	68fb      	ldr	r3, [r7, #12]
 8025dc4:	015a      	lsls	r2, r3, #5
 8025dc6:	693b      	ldr	r3, [r7, #16]
 8025dc8:	4413      	add	r3, r2
 8025dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025dce:	461a      	mov	r2, r3
 8025dd0:	68bb      	ldr	r3, [r7, #8]
 8025dd2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025dd4:	e050      	b.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025dd6:	687a      	ldr	r2, [r7, #4]
 8025dd8:	68fb      	ldr	r3, [r7, #12]
 8025dda:	212c      	movs	r1, #44	; 0x2c
 8025ddc:	fb01 f303 	mul.w	r3, r1, r3
 8025de0:	4413      	add	r3, r2
 8025de2:	3361      	adds	r3, #97	; 0x61
 8025de4:	781b      	ldrb	r3, [r3, #0]
 8025de6:	2b03      	cmp	r3, #3
 8025de8:	d122      	bne.n	8025e30 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025dea:	687a      	ldr	r2, [r7, #4]
 8025dec:	68fb      	ldr	r3, [r7, #12]
 8025dee:	212c      	movs	r1, #44	; 0x2c
 8025df0:	fb01 f303 	mul.w	r3, r1, r3
 8025df4:	4413      	add	r3, r2
 8025df6:	3360      	adds	r3, #96	; 0x60
 8025df8:	2202      	movs	r2, #2
 8025dfa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025dfc:	68fb      	ldr	r3, [r7, #12]
 8025dfe:	015a      	lsls	r2, r3, #5
 8025e00:	693b      	ldr	r3, [r7, #16]
 8025e02:	4413      	add	r3, r2
 8025e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025e0c:	68bb      	ldr	r3, [r7, #8]
 8025e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025e12:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025e14:	68bb      	ldr	r3, [r7, #8]
 8025e16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025e1a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025e1c:	68fb      	ldr	r3, [r7, #12]
 8025e1e:	015a      	lsls	r2, r3, #5
 8025e20:	693b      	ldr	r3, [r7, #16]
 8025e22:	4413      	add	r3, r2
 8025e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e28:	461a      	mov	r2, r3
 8025e2a:	68bb      	ldr	r3, [r7, #8]
 8025e2c:	6013      	str	r3, [r2, #0]
 8025e2e:	e023      	b.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025e30:	687a      	ldr	r2, [r7, #4]
 8025e32:	68fb      	ldr	r3, [r7, #12]
 8025e34:	212c      	movs	r1, #44	; 0x2c
 8025e36:	fb01 f303 	mul.w	r3, r1, r3
 8025e3a:	4413      	add	r3, r2
 8025e3c:	3361      	adds	r3, #97	; 0x61
 8025e3e:	781b      	ldrb	r3, [r3, #0]
 8025e40:	2b07      	cmp	r3, #7
 8025e42:	d119      	bne.n	8025e78 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025e44:	687a      	ldr	r2, [r7, #4]
 8025e46:	68fb      	ldr	r3, [r7, #12]
 8025e48:	212c      	movs	r1, #44	; 0x2c
 8025e4a:	fb01 f303 	mul.w	r3, r1, r3
 8025e4e:	4413      	add	r3, r2
 8025e50:	335c      	adds	r3, #92	; 0x5c
 8025e52:	681b      	ldr	r3, [r3, #0]
 8025e54:	1c5a      	adds	r2, r3, #1
 8025e56:	6879      	ldr	r1, [r7, #4]
 8025e58:	68fb      	ldr	r3, [r7, #12]
 8025e5a:	202c      	movs	r0, #44	; 0x2c
 8025e5c:	fb00 f303 	mul.w	r3, r0, r3
 8025e60:	440b      	add	r3, r1
 8025e62:	335c      	adds	r3, #92	; 0x5c
 8025e64:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025e66:	687a      	ldr	r2, [r7, #4]
 8025e68:	68fb      	ldr	r3, [r7, #12]
 8025e6a:	212c      	movs	r1, #44	; 0x2c
 8025e6c:	fb01 f303 	mul.w	r3, r1, r3
 8025e70:	4413      	add	r3, r2
 8025e72:	3360      	adds	r3, #96	; 0x60
 8025e74:	2204      	movs	r2, #4
 8025e76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025e78:	68fb      	ldr	r3, [r7, #12]
 8025e7a:	015a      	lsls	r2, r3, #5
 8025e7c:	693b      	ldr	r3, [r7, #16]
 8025e7e:	4413      	add	r3, r2
 8025e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e84:	461a      	mov	r2, r3
 8025e86:	2302      	movs	r3, #2
 8025e88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025e8a:	68fb      	ldr	r3, [r7, #12]
 8025e8c:	b2d9      	uxtb	r1, r3
 8025e8e:	687a      	ldr	r2, [r7, #4]
 8025e90:	68fb      	ldr	r3, [r7, #12]
 8025e92:	202c      	movs	r0, #44	; 0x2c
 8025e94:	fb00 f303 	mul.w	r3, r0, r3
 8025e98:	4413      	add	r3, r2
 8025e9a:	3360      	adds	r3, #96	; 0x60
 8025e9c:	781b      	ldrb	r3, [r3, #0]
 8025e9e:	461a      	mov	r2, r3
 8025ea0:	6878      	ldr	r0, [r7, #4]
 8025ea2:	f007 fead 	bl	802dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025ea6:	e061      	b.n	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025ea8:	68fb      	ldr	r3, [r7, #12]
 8025eaa:	015a      	lsls	r2, r3, #5
 8025eac:	693b      	ldr	r3, [r7, #16]
 8025eae:	4413      	add	r3, r2
 8025eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025eb4:	689b      	ldr	r3, [r3, #8]
 8025eb6:	f003 0310 	and.w	r3, r3, #16
 8025eba:	2b10      	cmp	r3, #16
 8025ebc:	d156      	bne.n	8025f6c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025ebe:	687a      	ldr	r2, [r7, #4]
 8025ec0:	68fb      	ldr	r3, [r7, #12]
 8025ec2:	212c      	movs	r1, #44	; 0x2c
 8025ec4:	fb01 f303 	mul.w	r3, r1, r3
 8025ec8:	4413      	add	r3, r2
 8025eca:	333f      	adds	r3, #63	; 0x3f
 8025ecc:	781b      	ldrb	r3, [r3, #0]
 8025ece:	2b03      	cmp	r3, #3
 8025ed0:	d111      	bne.n	8025ef6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025ed2:	687a      	ldr	r2, [r7, #4]
 8025ed4:	68fb      	ldr	r3, [r7, #12]
 8025ed6:	212c      	movs	r1, #44	; 0x2c
 8025ed8:	fb01 f303 	mul.w	r3, r1, r3
 8025edc:	4413      	add	r3, r2
 8025ede:	335c      	adds	r3, #92	; 0x5c
 8025ee0:	2200      	movs	r2, #0
 8025ee2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ee4:	687b      	ldr	r3, [r7, #4]
 8025ee6:	681b      	ldr	r3, [r3, #0]
 8025ee8:	68fa      	ldr	r2, [r7, #12]
 8025eea:	b2d2      	uxtb	r2, r2
 8025eec:	4611      	mov	r1, r2
 8025eee:	4618      	mov	r0, r3
 8025ef0:	f005 fbe7 	bl	802b6c2 <USB_HC_Halt>
 8025ef4:	e031      	b.n	8025f5a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025ef6:	687a      	ldr	r2, [r7, #4]
 8025ef8:	68fb      	ldr	r3, [r7, #12]
 8025efa:	212c      	movs	r1, #44	; 0x2c
 8025efc:	fb01 f303 	mul.w	r3, r1, r3
 8025f00:	4413      	add	r3, r2
 8025f02:	333f      	adds	r3, #63	; 0x3f
 8025f04:	781b      	ldrb	r3, [r3, #0]
 8025f06:	2b00      	cmp	r3, #0
 8025f08:	d009      	beq.n	8025f1e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025f0a:	687a      	ldr	r2, [r7, #4]
 8025f0c:	68fb      	ldr	r3, [r7, #12]
 8025f0e:	212c      	movs	r1, #44	; 0x2c
 8025f10:	fb01 f303 	mul.w	r3, r1, r3
 8025f14:	4413      	add	r3, r2
 8025f16:	333f      	adds	r3, #63	; 0x3f
 8025f18:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025f1a:	2b02      	cmp	r3, #2
 8025f1c:	d11d      	bne.n	8025f5a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025f1e:	687a      	ldr	r2, [r7, #4]
 8025f20:	68fb      	ldr	r3, [r7, #12]
 8025f22:	212c      	movs	r1, #44	; 0x2c
 8025f24:	fb01 f303 	mul.w	r3, r1, r3
 8025f28:	4413      	add	r3, r2
 8025f2a:	335c      	adds	r3, #92	; 0x5c
 8025f2c:	2200      	movs	r2, #0
 8025f2e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025f30:	687b      	ldr	r3, [r7, #4]
 8025f32:	691b      	ldr	r3, [r3, #16]
 8025f34:	2b00      	cmp	r3, #0
 8025f36:	d110      	bne.n	8025f5a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025f38:	687a      	ldr	r2, [r7, #4]
 8025f3a:	68fb      	ldr	r3, [r7, #12]
 8025f3c:	212c      	movs	r1, #44	; 0x2c
 8025f3e:	fb01 f303 	mul.w	r3, r1, r3
 8025f42:	4413      	add	r3, r2
 8025f44:	3361      	adds	r3, #97	; 0x61
 8025f46:	2203      	movs	r2, #3
 8025f48:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f4a:	687b      	ldr	r3, [r7, #4]
 8025f4c:	681b      	ldr	r3, [r3, #0]
 8025f4e:	68fa      	ldr	r2, [r7, #12]
 8025f50:	b2d2      	uxtb	r2, r2
 8025f52:	4611      	mov	r1, r2
 8025f54:	4618      	mov	r0, r3
 8025f56:	f005 fbb4 	bl	802b6c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025f5a:	68fb      	ldr	r3, [r7, #12]
 8025f5c:	015a      	lsls	r2, r3, #5
 8025f5e:	693b      	ldr	r3, [r7, #16]
 8025f60:	4413      	add	r3, r2
 8025f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f66:	461a      	mov	r2, r3
 8025f68:	2310      	movs	r3, #16
 8025f6a:	6093      	str	r3, [r2, #8]
}
 8025f6c:	bf00      	nop
 8025f6e:	3718      	adds	r7, #24
 8025f70:	46bd      	mov	sp, r7
 8025f72:	bd80      	pop	{r7, pc}

08025f74 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025f74:	b580      	push	{r7, lr}
 8025f76:	b088      	sub	sp, #32
 8025f78:	af00      	add	r7, sp, #0
 8025f7a:	6078      	str	r0, [r7, #4]
 8025f7c:	460b      	mov	r3, r1
 8025f7e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025f80:	687b      	ldr	r3, [r7, #4]
 8025f82:	681b      	ldr	r3, [r3, #0]
 8025f84:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025f86:	69fb      	ldr	r3, [r7, #28]
 8025f88:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025f8a:	78fb      	ldrb	r3, [r7, #3]
 8025f8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025f8e:	697b      	ldr	r3, [r7, #20]
 8025f90:	015a      	lsls	r2, r3, #5
 8025f92:	69bb      	ldr	r3, [r7, #24]
 8025f94:	4413      	add	r3, r2
 8025f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f9a:	689b      	ldr	r3, [r3, #8]
 8025f9c:	f003 0304 	and.w	r3, r3, #4
 8025fa0:	2b04      	cmp	r3, #4
 8025fa2:	d11a      	bne.n	8025fda <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025fa4:	697b      	ldr	r3, [r7, #20]
 8025fa6:	015a      	lsls	r2, r3, #5
 8025fa8:	69bb      	ldr	r3, [r7, #24]
 8025faa:	4413      	add	r3, r2
 8025fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fb0:	461a      	mov	r2, r3
 8025fb2:	2304      	movs	r3, #4
 8025fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025fb6:	687a      	ldr	r2, [r7, #4]
 8025fb8:	697b      	ldr	r3, [r7, #20]
 8025fba:	212c      	movs	r1, #44	; 0x2c
 8025fbc:	fb01 f303 	mul.w	r3, r1, r3
 8025fc0:	4413      	add	r3, r2
 8025fc2:	3361      	adds	r3, #97	; 0x61
 8025fc4:	2206      	movs	r2, #6
 8025fc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025fc8:	687b      	ldr	r3, [r7, #4]
 8025fca:	681b      	ldr	r3, [r3, #0]
 8025fcc:	697a      	ldr	r2, [r7, #20]
 8025fce:	b2d2      	uxtb	r2, r2
 8025fd0:	4611      	mov	r1, r2
 8025fd2:	4618      	mov	r0, r3
 8025fd4:	f005 fb75 	bl	802b6c2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8025fd8:	e331      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025fda:	697b      	ldr	r3, [r7, #20]
 8025fdc:	015a      	lsls	r2, r3, #5
 8025fde:	69bb      	ldr	r3, [r7, #24]
 8025fe0:	4413      	add	r3, r2
 8025fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fe6:	689b      	ldr	r3, [r3, #8]
 8025fe8:	f003 0320 	and.w	r3, r3, #32
 8025fec:	2b20      	cmp	r3, #32
 8025fee:	d12e      	bne.n	802604e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025ff0:	697b      	ldr	r3, [r7, #20]
 8025ff2:	015a      	lsls	r2, r3, #5
 8025ff4:	69bb      	ldr	r3, [r7, #24]
 8025ff6:	4413      	add	r3, r2
 8025ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ffc:	461a      	mov	r2, r3
 8025ffe:	2320      	movs	r3, #32
 8026000:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8026002:	687a      	ldr	r2, [r7, #4]
 8026004:	697b      	ldr	r3, [r7, #20]
 8026006:	212c      	movs	r1, #44	; 0x2c
 8026008:	fb01 f303 	mul.w	r3, r1, r3
 802600c:	4413      	add	r3, r2
 802600e:	333d      	adds	r3, #61	; 0x3d
 8026010:	781b      	ldrb	r3, [r3, #0]
 8026012:	2b01      	cmp	r3, #1
 8026014:	f040 8313 	bne.w	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8026018:	687a      	ldr	r2, [r7, #4]
 802601a:	697b      	ldr	r3, [r7, #20]
 802601c:	212c      	movs	r1, #44	; 0x2c
 802601e:	fb01 f303 	mul.w	r3, r1, r3
 8026022:	4413      	add	r3, r2
 8026024:	333d      	adds	r3, #61	; 0x3d
 8026026:	2200      	movs	r2, #0
 8026028:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 802602a:	687a      	ldr	r2, [r7, #4]
 802602c:	697b      	ldr	r3, [r7, #20]
 802602e:	212c      	movs	r1, #44	; 0x2c
 8026030:	fb01 f303 	mul.w	r3, r1, r3
 8026034:	4413      	add	r3, r2
 8026036:	3360      	adds	r3, #96	; 0x60
 8026038:	2202      	movs	r2, #2
 802603a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802603c:	687b      	ldr	r3, [r7, #4]
 802603e:	681b      	ldr	r3, [r3, #0]
 8026040:	697a      	ldr	r2, [r7, #20]
 8026042:	b2d2      	uxtb	r2, r2
 8026044:	4611      	mov	r1, r2
 8026046:	4618      	mov	r0, r3
 8026048:	f005 fb3b 	bl	802b6c2 <USB_HC_Halt>
}
 802604c:	e2f7      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 802604e:	697b      	ldr	r3, [r7, #20]
 8026050:	015a      	lsls	r2, r3, #5
 8026052:	69bb      	ldr	r3, [r7, #24]
 8026054:	4413      	add	r3, r2
 8026056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802605a:	689b      	ldr	r3, [r3, #8]
 802605c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026064:	d112      	bne.n	802608c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8026066:	697b      	ldr	r3, [r7, #20]
 8026068:	015a      	lsls	r2, r3, #5
 802606a:	69bb      	ldr	r3, [r7, #24]
 802606c:	4413      	add	r3, r2
 802606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026072:	461a      	mov	r2, r3
 8026074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8026078:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	697a      	ldr	r2, [r7, #20]
 8026080:	b2d2      	uxtb	r2, r2
 8026082:	4611      	mov	r1, r2
 8026084:	4618      	mov	r0, r3
 8026086:	f005 fb1c 	bl	802b6c2 <USB_HC_Halt>
}
 802608a:	e2d8      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 802608c:	697b      	ldr	r3, [r7, #20]
 802608e:	015a      	lsls	r2, r3, #5
 8026090:	69bb      	ldr	r3, [r7, #24]
 8026092:	4413      	add	r3, r2
 8026094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026098:	689b      	ldr	r3, [r3, #8]
 802609a:	f003 0301 	and.w	r3, r3, #1
 802609e:	2b01      	cmp	r3, #1
 80260a0:	d140      	bne.n	8026124 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80260a2:	687a      	ldr	r2, [r7, #4]
 80260a4:	697b      	ldr	r3, [r7, #20]
 80260a6:	212c      	movs	r1, #44	; 0x2c
 80260a8:	fb01 f303 	mul.w	r3, r1, r3
 80260ac:	4413      	add	r3, r2
 80260ae:	335c      	adds	r3, #92	; 0x5c
 80260b0:	2200      	movs	r2, #0
 80260b2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80260b4:	697b      	ldr	r3, [r7, #20]
 80260b6:	015a      	lsls	r2, r3, #5
 80260b8:	69bb      	ldr	r3, [r7, #24]
 80260ba:	4413      	add	r3, r2
 80260bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260c0:	689b      	ldr	r3, [r3, #8]
 80260c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80260c6:	2b40      	cmp	r3, #64	; 0x40
 80260c8:	d111      	bne.n	80260ee <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80260ca:	687a      	ldr	r2, [r7, #4]
 80260cc:	697b      	ldr	r3, [r7, #20]
 80260ce:	212c      	movs	r1, #44	; 0x2c
 80260d0:	fb01 f303 	mul.w	r3, r1, r3
 80260d4:	4413      	add	r3, r2
 80260d6:	333d      	adds	r3, #61	; 0x3d
 80260d8:	2201      	movs	r2, #1
 80260da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80260dc:	697b      	ldr	r3, [r7, #20]
 80260de:	015a      	lsls	r2, r3, #5
 80260e0:	69bb      	ldr	r3, [r7, #24]
 80260e2:	4413      	add	r3, r2
 80260e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260e8:	461a      	mov	r2, r3
 80260ea:	2340      	movs	r3, #64	; 0x40
 80260ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80260ee:	697b      	ldr	r3, [r7, #20]
 80260f0:	015a      	lsls	r2, r3, #5
 80260f2:	69bb      	ldr	r3, [r7, #24]
 80260f4:	4413      	add	r3, r2
 80260f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260fa:	461a      	mov	r2, r3
 80260fc:	2301      	movs	r3, #1
 80260fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8026100:	687a      	ldr	r2, [r7, #4]
 8026102:	697b      	ldr	r3, [r7, #20]
 8026104:	212c      	movs	r1, #44	; 0x2c
 8026106:	fb01 f303 	mul.w	r3, r1, r3
 802610a:	4413      	add	r3, r2
 802610c:	3361      	adds	r3, #97	; 0x61
 802610e:	2201      	movs	r2, #1
 8026110:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026112:	687b      	ldr	r3, [r7, #4]
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	697a      	ldr	r2, [r7, #20]
 8026118:	b2d2      	uxtb	r2, r2
 802611a:	4611      	mov	r1, r2
 802611c:	4618      	mov	r0, r3
 802611e:	f005 fad0 	bl	802b6c2 <USB_HC_Halt>
}
 8026122:	e28c      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026124:	697b      	ldr	r3, [r7, #20]
 8026126:	015a      	lsls	r2, r3, #5
 8026128:	69bb      	ldr	r3, [r7, #24]
 802612a:	4413      	add	r3, r2
 802612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026130:	689b      	ldr	r3, [r3, #8]
 8026132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026136:	2b40      	cmp	r3, #64	; 0x40
 8026138:	d12c      	bne.n	8026194 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802613a:	687a      	ldr	r2, [r7, #4]
 802613c:	697b      	ldr	r3, [r7, #20]
 802613e:	212c      	movs	r1, #44	; 0x2c
 8026140:	fb01 f303 	mul.w	r3, r1, r3
 8026144:	4413      	add	r3, r2
 8026146:	3361      	adds	r3, #97	; 0x61
 8026148:	2204      	movs	r2, #4
 802614a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 802614c:	687a      	ldr	r2, [r7, #4]
 802614e:	697b      	ldr	r3, [r7, #20]
 8026150:	212c      	movs	r1, #44	; 0x2c
 8026152:	fb01 f303 	mul.w	r3, r1, r3
 8026156:	4413      	add	r3, r2
 8026158:	333d      	adds	r3, #61	; 0x3d
 802615a:	2201      	movs	r2, #1
 802615c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 802615e:	687a      	ldr	r2, [r7, #4]
 8026160:	697b      	ldr	r3, [r7, #20]
 8026162:	212c      	movs	r1, #44	; 0x2c
 8026164:	fb01 f303 	mul.w	r3, r1, r3
 8026168:	4413      	add	r3, r2
 802616a:	335c      	adds	r3, #92	; 0x5c
 802616c:	2200      	movs	r2, #0
 802616e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026170:	687b      	ldr	r3, [r7, #4]
 8026172:	681b      	ldr	r3, [r3, #0]
 8026174:	697a      	ldr	r2, [r7, #20]
 8026176:	b2d2      	uxtb	r2, r2
 8026178:	4611      	mov	r1, r2
 802617a:	4618      	mov	r0, r3
 802617c:	f005 faa1 	bl	802b6c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8026180:	697b      	ldr	r3, [r7, #20]
 8026182:	015a      	lsls	r2, r3, #5
 8026184:	69bb      	ldr	r3, [r7, #24]
 8026186:	4413      	add	r3, r2
 8026188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802618c:	461a      	mov	r2, r3
 802618e:	2340      	movs	r3, #64	; 0x40
 8026190:	6093      	str	r3, [r2, #8]
}
 8026192:	e254      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8026194:	697b      	ldr	r3, [r7, #20]
 8026196:	015a      	lsls	r2, r3, #5
 8026198:	69bb      	ldr	r3, [r7, #24]
 802619a:	4413      	add	r3, r2
 802619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261a0:	689b      	ldr	r3, [r3, #8]
 80261a2:	f003 0308 	and.w	r3, r3, #8
 80261a6:	2b08      	cmp	r3, #8
 80261a8:	d11a      	bne.n	80261e0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80261aa:	697b      	ldr	r3, [r7, #20]
 80261ac:	015a      	lsls	r2, r3, #5
 80261ae:	69bb      	ldr	r3, [r7, #24]
 80261b0:	4413      	add	r3, r2
 80261b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261b6:	461a      	mov	r2, r3
 80261b8:	2308      	movs	r3, #8
 80261ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80261bc:	687a      	ldr	r2, [r7, #4]
 80261be:	697b      	ldr	r3, [r7, #20]
 80261c0:	212c      	movs	r1, #44	; 0x2c
 80261c2:	fb01 f303 	mul.w	r3, r1, r3
 80261c6:	4413      	add	r3, r2
 80261c8:	3361      	adds	r3, #97	; 0x61
 80261ca:	2205      	movs	r2, #5
 80261cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261ce:	687b      	ldr	r3, [r7, #4]
 80261d0:	681b      	ldr	r3, [r3, #0]
 80261d2:	697a      	ldr	r2, [r7, #20]
 80261d4:	b2d2      	uxtb	r2, r2
 80261d6:	4611      	mov	r1, r2
 80261d8:	4618      	mov	r0, r3
 80261da:	f005 fa72 	bl	802b6c2 <USB_HC_Halt>
}
 80261de:	e22e      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80261e0:	697b      	ldr	r3, [r7, #20]
 80261e2:	015a      	lsls	r2, r3, #5
 80261e4:	69bb      	ldr	r3, [r7, #24]
 80261e6:	4413      	add	r3, r2
 80261e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261ec:	689b      	ldr	r3, [r3, #8]
 80261ee:	f003 0310 	and.w	r3, r3, #16
 80261f2:	2b10      	cmp	r3, #16
 80261f4:	d140      	bne.n	8026278 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80261f6:	687a      	ldr	r2, [r7, #4]
 80261f8:	697b      	ldr	r3, [r7, #20]
 80261fa:	212c      	movs	r1, #44	; 0x2c
 80261fc:	fb01 f303 	mul.w	r3, r1, r3
 8026200:	4413      	add	r3, r2
 8026202:	335c      	adds	r3, #92	; 0x5c
 8026204:	2200      	movs	r2, #0
 8026206:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8026208:	687a      	ldr	r2, [r7, #4]
 802620a:	697b      	ldr	r3, [r7, #20]
 802620c:	212c      	movs	r1, #44	; 0x2c
 802620e:	fb01 f303 	mul.w	r3, r1, r3
 8026212:	4413      	add	r3, r2
 8026214:	3361      	adds	r3, #97	; 0x61
 8026216:	2203      	movs	r2, #3
 8026218:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802621a:	687a      	ldr	r2, [r7, #4]
 802621c:	697b      	ldr	r3, [r7, #20]
 802621e:	212c      	movs	r1, #44	; 0x2c
 8026220:	fb01 f303 	mul.w	r3, r1, r3
 8026224:	4413      	add	r3, r2
 8026226:	333d      	adds	r3, #61	; 0x3d
 8026228:	781b      	ldrb	r3, [r3, #0]
 802622a:	2b00      	cmp	r3, #0
 802622c:	d112      	bne.n	8026254 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 802622e:	687a      	ldr	r2, [r7, #4]
 8026230:	697b      	ldr	r3, [r7, #20]
 8026232:	212c      	movs	r1, #44	; 0x2c
 8026234:	fb01 f303 	mul.w	r3, r1, r3
 8026238:	4413      	add	r3, r2
 802623a:	333c      	adds	r3, #60	; 0x3c
 802623c:	781b      	ldrb	r3, [r3, #0]
 802623e:	2b00      	cmp	r3, #0
 8026240:	d108      	bne.n	8026254 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8026242:	687a      	ldr	r2, [r7, #4]
 8026244:	697b      	ldr	r3, [r7, #20]
 8026246:	212c      	movs	r1, #44	; 0x2c
 8026248:	fb01 f303 	mul.w	r3, r1, r3
 802624c:	4413      	add	r3, r2
 802624e:	333d      	adds	r3, #61	; 0x3d
 8026250:	2201      	movs	r2, #1
 8026252:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026254:	687b      	ldr	r3, [r7, #4]
 8026256:	681b      	ldr	r3, [r3, #0]
 8026258:	697a      	ldr	r2, [r7, #20]
 802625a:	b2d2      	uxtb	r2, r2
 802625c:	4611      	mov	r1, r2
 802625e:	4618      	mov	r0, r3
 8026260:	f005 fa2f 	bl	802b6c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026264:	697b      	ldr	r3, [r7, #20]
 8026266:	015a      	lsls	r2, r3, #5
 8026268:	69bb      	ldr	r3, [r7, #24]
 802626a:	4413      	add	r3, r2
 802626c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026270:	461a      	mov	r2, r3
 8026272:	2310      	movs	r3, #16
 8026274:	6093      	str	r3, [r2, #8]
}
 8026276:	e1e2      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8026278:	697b      	ldr	r3, [r7, #20]
 802627a:	015a      	lsls	r2, r3, #5
 802627c:	69bb      	ldr	r3, [r7, #24]
 802627e:	4413      	add	r3, r2
 8026280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026284:	689b      	ldr	r3, [r3, #8]
 8026286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802628a:	2b80      	cmp	r3, #128	; 0x80
 802628c:	d164      	bne.n	8026358 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	691b      	ldr	r3, [r3, #16]
 8026292:	2b00      	cmp	r3, #0
 8026294:	d111      	bne.n	80262ba <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8026296:	687a      	ldr	r2, [r7, #4]
 8026298:	697b      	ldr	r3, [r7, #20]
 802629a:	212c      	movs	r1, #44	; 0x2c
 802629c:	fb01 f303 	mul.w	r3, r1, r3
 80262a0:	4413      	add	r3, r2
 80262a2:	3361      	adds	r3, #97	; 0x61
 80262a4:	2206      	movs	r2, #6
 80262a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	697a      	ldr	r2, [r7, #20]
 80262ae:	b2d2      	uxtb	r2, r2
 80262b0:	4611      	mov	r1, r2
 80262b2:	4618      	mov	r0, r3
 80262b4:	f005 fa05 	bl	802b6c2 <USB_HC_Halt>
 80262b8:	e044      	b.n	8026344 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80262ba:	687a      	ldr	r2, [r7, #4]
 80262bc:	697b      	ldr	r3, [r7, #20]
 80262be:	212c      	movs	r1, #44	; 0x2c
 80262c0:	fb01 f303 	mul.w	r3, r1, r3
 80262c4:	4413      	add	r3, r2
 80262c6:	335c      	adds	r3, #92	; 0x5c
 80262c8:	681b      	ldr	r3, [r3, #0]
 80262ca:	1c5a      	adds	r2, r3, #1
 80262cc:	6879      	ldr	r1, [r7, #4]
 80262ce:	697b      	ldr	r3, [r7, #20]
 80262d0:	202c      	movs	r0, #44	; 0x2c
 80262d2:	fb00 f303 	mul.w	r3, r0, r3
 80262d6:	440b      	add	r3, r1
 80262d8:	335c      	adds	r3, #92	; 0x5c
 80262da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80262dc:	687a      	ldr	r2, [r7, #4]
 80262de:	697b      	ldr	r3, [r7, #20]
 80262e0:	212c      	movs	r1, #44	; 0x2c
 80262e2:	fb01 f303 	mul.w	r3, r1, r3
 80262e6:	4413      	add	r3, r2
 80262e8:	335c      	adds	r3, #92	; 0x5c
 80262ea:	681b      	ldr	r3, [r3, #0]
 80262ec:	2b02      	cmp	r3, #2
 80262ee:	d920      	bls.n	8026332 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80262f0:	687a      	ldr	r2, [r7, #4]
 80262f2:	697b      	ldr	r3, [r7, #20]
 80262f4:	212c      	movs	r1, #44	; 0x2c
 80262f6:	fb01 f303 	mul.w	r3, r1, r3
 80262fa:	4413      	add	r3, r2
 80262fc:	335c      	adds	r3, #92	; 0x5c
 80262fe:	2200      	movs	r2, #0
 8026300:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026302:	687a      	ldr	r2, [r7, #4]
 8026304:	697b      	ldr	r3, [r7, #20]
 8026306:	212c      	movs	r1, #44	; 0x2c
 8026308:	fb01 f303 	mul.w	r3, r1, r3
 802630c:	4413      	add	r3, r2
 802630e:	3360      	adds	r3, #96	; 0x60
 8026310:	2204      	movs	r2, #4
 8026312:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026314:	697b      	ldr	r3, [r7, #20]
 8026316:	b2d9      	uxtb	r1, r3
 8026318:	687a      	ldr	r2, [r7, #4]
 802631a:	697b      	ldr	r3, [r7, #20]
 802631c:	202c      	movs	r0, #44	; 0x2c
 802631e:	fb00 f303 	mul.w	r3, r0, r3
 8026322:	4413      	add	r3, r2
 8026324:	3360      	adds	r3, #96	; 0x60
 8026326:	781b      	ldrb	r3, [r3, #0]
 8026328:	461a      	mov	r2, r3
 802632a:	6878      	ldr	r0, [r7, #4]
 802632c:	f007 fc68 	bl	802dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
 8026330:	e008      	b.n	8026344 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026332:	687a      	ldr	r2, [r7, #4]
 8026334:	697b      	ldr	r3, [r7, #20]
 8026336:	212c      	movs	r1, #44	; 0x2c
 8026338:	fb01 f303 	mul.w	r3, r1, r3
 802633c:	4413      	add	r3, r2
 802633e:	3360      	adds	r3, #96	; 0x60
 8026340:	2202      	movs	r2, #2
 8026342:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8026344:	697b      	ldr	r3, [r7, #20]
 8026346:	015a      	lsls	r2, r3, #5
 8026348:	69bb      	ldr	r3, [r7, #24]
 802634a:	4413      	add	r3, r2
 802634c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026350:	461a      	mov	r2, r3
 8026352:	2380      	movs	r3, #128	; 0x80
 8026354:	6093      	str	r3, [r2, #8]
}
 8026356:	e172      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8026358:	697b      	ldr	r3, [r7, #20]
 802635a:	015a      	lsls	r2, r3, #5
 802635c:	69bb      	ldr	r3, [r7, #24]
 802635e:	4413      	add	r3, r2
 8026360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026364:	689b      	ldr	r3, [r3, #8]
 8026366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802636e:	d11b      	bne.n	80263a8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8026370:	687a      	ldr	r2, [r7, #4]
 8026372:	697b      	ldr	r3, [r7, #20]
 8026374:	212c      	movs	r1, #44	; 0x2c
 8026376:	fb01 f303 	mul.w	r3, r1, r3
 802637a:	4413      	add	r3, r2
 802637c:	3361      	adds	r3, #97	; 0x61
 802637e:	2208      	movs	r2, #8
 8026380:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026382:	687b      	ldr	r3, [r7, #4]
 8026384:	681b      	ldr	r3, [r3, #0]
 8026386:	697a      	ldr	r2, [r7, #20]
 8026388:	b2d2      	uxtb	r2, r2
 802638a:	4611      	mov	r1, r2
 802638c:	4618      	mov	r0, r3
 802638e:	f005 f998 	bl	802b6c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8026392:	697b      	ldr	r3, [r7, #20]
 8026394:	015a      	lsls	r2, r3, #5
 8026396:	69bb      	ldr	r3, [r7, #24]
 8026398:	4413      	add	r3, r2
 802639a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802639e:	461a      	mov	r2, r3
 80263a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80263a4:	6093      	str	r3, [r2, #8]
}
 80263a6:	e14a      	b.n	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80263a8:	697b      	ldr	r3, [r7, #20]
 80263aa:	015a      	lsls	r2, r3, #5
 80263ac:	69bb      	ldr	r3, [r7, #24]
 80263ae:	4413      	add	r3, r2
 80263b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80263b4:	689b      	ldr	r3, [r3, #8]
 80263b6:	f003 0302 	and.w	r3, r3, #2
 80263ba:	2b02      	cmp	r3, #2
 80263bc:	f040 813f 	bne.w	802663e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80263c0:	687a      	ldr	r2, [r7, #4]
 80263c2:	697b      	ldr	r3, [r7, #20]
 80263c4:	212c      	movs	r1, #44	; 0x2c
 80263c6:	fb01 f303 	mul.w	r3, r1, r3
 80263ca:	4413      	add	r3, r2
 80263cc:	3361      	adds	r3, #97	; 0x61
 80263ce:	781b      	ldrb	r3, [r3, #0]
 80263d0:	2b01      	cmp	r3, #1
 80263d2:	d17d      	bne.n	80264d0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80263d4:	687a      	ldr	r2, [r7, #4]
 80263d6:	697b      	ldr	r3, [r7, #20]
 80263d8:	212c      	movs	r1, #44	; 0x2c
 80263da:	fb01 f303 	mul.w	r3, r1, r3
 80263de:	4413      	add	r3, r2
 80263e0:	3360      	adds	r3, #96	; 0x60
 80263e2:	2201      	movs	r2, #1
 80263e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80263e6:	687a      	ldr	r2, [r7, #4]
 80263e8:	697b      	ldr	r3, [r7, #20]
 80263ea:	212c      	movs	r1, #44	; 0x2c
 80263ec:	fb01 f303 	mul.w	r3, r1, r3
 80263f0:	4413      	add	r3, r2
 80263f2:	333f      	adds	r3, #63	; 0x3f
 80263f4:	781b      	ldrb	r3, [r3, #0]
 80263f6:	2b02      	cmp	r3, #2
 80263f8:	d00a      	beq.n	8026410 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80263fa:	687a      	ldr	r2, [r7, #4]
 80263fc:	697b      	ldr	r3, [r7, #20]
 80263fe:	212c      	movs	r1, #44	; 0x2c
 8026400:	fb01 f303 	mul.w	r3, r1, r3
 8026404:	4413      	add	r3, r2
 8026406:	333f      	adds	r3, #63	; 0x3f
 8026408:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802640a:	2b03      	cmp	r3, #3
 802640c:	f040 8100 	bne.w	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8026410:	687b      	ldr	r3, [r7, #4]
 8026412:	691b      	ldr	r3, [r3, #16]
 8026414:	2b00      	cmp	r3, #0
 8026416:	d113      	bne.n	8026440 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8026418:	687a      	ldr	r2, [r7, #4]
 802641a:	697b      	ldr	r3, [r7, #20]
 802641c:	212c      	movs	r1, #44	; 0x2c
 802641e:	fb01 f303 	mul.w	r3, r1, r3
 8026422:	4413      	add	r3, r2
 8026424:	3355      	adds	r3, #85	; 0x55
 8026426:	781b      	ldrb	r3, [r3, #0]
 8026428:	f083 0301 	eor.w	r3, r3, #1
 802642c:	b2d8      	uxtb	r0, r3
 802642e:	687a      	ldr	r2, [r7, #4]
 8026430:	697b      	ldr	r3, [r7, #20]
 8026432:	212c      	movs	r1, #44	; 0x2c
 8026434:	fb01 f303 	mul.w	r3, r1, r3
 8026438:	4413      	add	r3, r2
 802643a:	3355      	adds	r3, #85	; 0x55
 802643c:	4602      	mov	r2, r0
 802643e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8026440:	687b      	ldr	r3, [r7, #4]
 8026442:	691b      	ldr	r3, [r3, #16]
 8026444:	2b01      	cmp	r3, #1
 8026446:	f040 80e3 	bne.w	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
 802644a:	687a      	ldr	r2, [r7, #4]
 802644c:	697b      	ldr	r3, [r7, #20]
 802644e:	212c      	movs	r1, #44	; 0x2c
 8026450:	fb01 f303 	mul.w	r3, r1, r3
 8026454:	4413      	add	r3, r2
 8026456:	334c      	adds	r3, #76	; 0x4c
 8026458:	681b      	ldr	r3, [r3, #0]
 802645a:	2b00      	cmp	r3, #0
 802645c:	f000 80d8 	beq.w	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8026460:	687a      	ldr	r2, [r7, #4]
 8026462:	697b      	ldr	r3, [r7, #20]
 8026464:	212c      	movs	r1, #44	; 0x2c
 8026466:	fb01 f303 	mul.w	r3, r1, r3
 802646a:	4413      	add	r3, r2
 802646c:	334c      	adds	r3, #76	; 0x4c
 802646e:	681b      	ldr	r3, [r3, #0]
 8026470:	6879      	ldr	r1, [r7, #4]
 8026472:	697a      	ldr	r2, [r7, #20]
 8026474:	202c      	movs	r0, #44	; 0x2c
 8026476:	fb00 f202 	mul.w	r2, r0, r2
 802647a:	440a      	add	r2, r1
 802647c:	3240      	adds	r2, #64	; 0x40
 802647e:	8812      	ldrh	r2, [r2, #0]
 8026480:	4413      	add	r3, r2
 8026482:	3b01      	subs	r3, #1
 8026484:	6879      	ldr	r1, [r7, #4]
 8026486:	697a      	ldr	r2, [r7, #20]
 8026488:	202c      	movs	r0, #44	; 0x2c
 802648a:	fb00 f202 	mul.w	r2, r0, r2
 802648e:	440a      	add	r2, r1
 8026490:	3240      	adds	r2, #64	; 0x40
 8026492:	8812      	ldrh	r2, [r2, #0]
 8026494:	fbb3 f3f2 	udiv	r3, r3, r2
 8026498:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 802649a:	68fb      	ldr	r3, [r7, #12]
 802649c:	f003 0301 	and.w	r3, r3, #1
 80264a0:	2b00      	cmp	r3, #0
 80264a2:	f000 80b5 	beq.w	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80264a6:	687a      	ldr	r2, [r7, #4]
 80264a8:	697b      	ldr	r3, [r7, #20]
 80264aa:	212c      	movs	r1, #44	; 0x2c
 80264ac:	fb01 f303 	mul.w	r3, r1, r3
 80264b0:	4413      	add	r3, r2
 80264b2:	3355      	adds	r3, #85	; 0x55
 80264b4:	781b      	ldrb	r3, [r3, #0]
 80264b6:	f083 0301 	eor.w	r3, r3, #1
 80264ba:	b2d8      	uxtb	r0, r3
 80264bc:	687a      	ldr	r2, [r7, #4]
 80264be:	697b      	ldr	r3, [r7, #20]
 80264c0:	212c      	movs	r1, #44	; 0x2c
 80264c2:	fb01 f303 	mul.w	r3, r1, r3
 80264c6:	4413      	add	r3, r2
 80264c8:	3355      	adds	r3, #85	; 0x55
 80264ca:	4602      	mov	r2, r0
 80264cc:	701a      	strb	r2, [r3, #0]
 80264ce:	e09f      	b.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80264d0:	687a      	ldr	r2, [r7, #4]
 80264d2:	697b      	ldr	r3, [r7, #20]
 80264d4:	212c      	movs	r1, #44	; 0x2c
 80264d6:	fb01 f303 	mul.w	r3, r1, r3
 80264da:	4413      	add	r3, r2
 80264dc:	3361      	adds	r3, #97	; 0x61
 80264de:	781b      	ldrb	r3, [r3, #0]
 80264e0:	2b03      	cmp	r3, #3
 80264e2:	d109      	bne.n	80264f8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80264e4:	687a      	ldr	r2, [r7, #4]
 80264e6:	697b      	ldr	r3, [r7, #20]
 80264e8:	212c      	movs	r1, #44	; 0x2c
 80264ea:	fb01 f303 	mul.w	r3, r1, r3
 80264ee:	4413      	add	r3, r2
 80264f0:	3360      	adds	r3, #96	; 0x60
 80264f2:	2202      	movs	r2, #2
 80264f4:	701a      	strb	r2, [r3, #0]
 80264f6:	e08b      	b.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80264f8:	687a      	ldr	r2, [r7, #4]
 80264fa:	697b      	ldr	r3, [r7, #20]
 80264fc:	212c      	movs	r1, #44	; 0x2c
 80264fe:	fb01 f303 	mul.w	r3, r1, r3
 8026502:	4413      	add	r3, r2
 8026504:	3361      	adds	r3, #97	; 0x61
 8026506:	781b      	ldrb	r3, [r3, #0]
 8026508:	2b04      	cmp	r3, #4
 802650a:	d109      	bne.n	8026520 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 802650c:	687a      	ldr	r2, [r7, #4]
 802650e:	697b      	ldr	r3, [r7, #20]
 8026510:	212c      	movs	r1, #44	; 0x2c
 8026512:	fb01 f303 	mul.w	r3, r1, r3
 8026516:	4413      	add	r3, r2
 8026518:	3360      	adds	r3, #96	; 0x60
 802651a:	2202      	movs	r2, #2
 802651c:	701a      	strb	r2, [r3, #0]
 802651e:	e077      	b.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8026520:	687a      	ldr	r2, [r7, #4]
 8026522:	697b      	ldr	r3, [r7, #20]
 8026524:	212c      	movs	r1, #44	; 0x2c
 8026526:	fb01 f303 	mul.w	r3, r1, r3
 802652a:	4413      	add	r3, r2
 802652c:	3361      	adds	r3, #97	; 0x61
 802652e:	781b      	ldrb	r3, [r3, #0]
 8026530:	2b05      	cmp	r3, #5
 8026532:	d109      	bne.n	8026548 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8026534:	687a      	ldr	r2, [r7, #4]
 8026536:	697b      	ldr	r3, [r7, #20]
 8026538:	212c      	movs	r1, #44	; 0x2c
 802653a:	fb01 f303 	mul.w	r3, r1, r3
 802653e:	4413      	add	r3, r2
 8026540:	3360      	adds	r3, #96	; 0x60
 8026542:	2205      	movs	r2, #5
 8026544:	701a      	strb	r2, [r3, #0]
 8026546:	e063      	b.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8026548:	687a      	ldr	r2, [r7, #4]
 802654a:	697b      	ldr	r3, [r7, #20]
 802654c:	212c      	movs	r1, #44	; 0x2c
 802654e:	fb01 f303 	mul.w	r3, r1, r3
 8026552:	4413      	add	r3, r2
 8026554:	3361      	adds	r3, #97	; 0x61
 8026556:	781b      	ldrb	r3, [r3, #0]
 8026558:	2b06      	cmp	r3, #6
 802655a:	d009      	beq.n	8026570 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 802655c:	687a      	ldr	r2, [r7, #4]
 802655e:	697b      	ldr	r3, [r7, #20]
 8026560:	212c      	movs	r1, #44	; 0x2c
 8026562:	fb01 f303 	mul.w	r3, r1, r3
 8026566:	4413      	add	r3, r2
 8026568:	3361      	adds	r3, #97	; 0x61
 802656a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802656c:	2b08      	cmp	r3, #8
 802656e:	d14f      	bne.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8026570:	687a      	ldr	r2, [r7, #4]
 8026572:	697b      	ldr	r3, [r7, #20]
 8026574:	212c      	movs	r1, #44	; 0x2c
 8026576:	fb01 f303 	mul.w	r3, r1, r3
 802657a:	4413      	add	r3, r2
 802657c:	335c      	adds	r3, #92	; 0x5c
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	1c5a      	adds	r2, r3, #1
 8026582:	6879      	ldr	r1, [r7, #4]
 8026584:	697b      	ldr	r3, [r7, #20]
 8026586:	202c      	movs	r0, #44	; 0x2c
 8026588:	fb00 f303 	mul.w	r3, r0, r3
 802658c:	440b      	add	r3, r1
 802658e:	335c      	adds	r3, #92	; 0x5c
 8026590:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026592:	687a      	ldr	r2, [r7, #4]
 8026594:	697b      	ldr	r3, [r7, #20]
 8026596:	212c      	movs	r1, #44	; 0x2c
 8026598:	fb01 f303 	mul.w	r3, r1, r3
 802659c:	4413      	add	r3, r2
 802659e:	335c      	adds	r3, #92	; 0x5c
 80265a0:	681b      	ldr	r3, [r3, #0]
 80265a2:	2b02      	cmp	r3, #2
 80265a4:	d912      	bls.n	80265cc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80265a6:	687a      	ldr	r2, [r7, #4]
 80265a8:	697b      	ldr	r3, [r7, #20]
 80265aa:	212c      	movs	r1, #44	; 0x2c
 80265ac:	fb01 f303 	mul.w	r3, r1, r3
 80265b0:	4413      	add	r3, r2
 80265b2:	335c      	adds	r3, #92	; 0x5c
 80265b4:	2200      	movs	r2, #0
 80265b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80265b8:	687a      	ldr	r2, [r7, #4]
 80265ba:	697b      	ldr	r3, [r7, #20]
 80265bc:	212c      	movs	r1, #44	; 0x2c
 80265be:	fb01 f303 	mul.w	r3, r1, r3
 80265c2:	4413      	add	r3, r2
 80265c4:	3360      	adds	r3, #96	; 0x60
 80265c6:	2204      	movs	r2, #4
 80265c8:	701a      	strb	r2, [r3, #0]
 80265ca:	e021      	b.n	8026610 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80265cc:	687a      	ldr	r2, [r7, #4]
 80265ce:	697b      	ldr	r3, [r7, #20]
 80265d0:	212c      	movs	r1, #44	; 0x2c
 80265d2:	fb01 f303 	mul.w	r3, r1, r3
 80265d6:	4413      	add	r3, r2
 80265d8:	3360      	adds	r3, #96	; 0x60
 80265da:	2202      	movs	r2, #2
 80265dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80265de:	697b      	ldr	r3, [r7, #20]
 80265e0:	015a      	lsls	r2, r3, #5
 80265e2:	69bb      	ldr	r3, [r7, #24]
 80265e4:	4413      	add	r3, r2
 80265e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80265ea:	681b      	ldr	r3, [r3, #0]
 80265ec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80265ee:	693b      	ldr	r3, [r7, #16]
 80265f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80265f4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80265f6:	693b      	ldr	r3, [r7, #16]
 80265f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80265fc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80265fe:	697b      	ldr	r3, [r7, #20]
 8026600:	015a      	lsls	r2, r3, #5
 8026602:	69bb      	ldr	r3, [r7, #24]
 8026604:	4413      	add	r3, r2
 8026606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802660a:	461a      	mov	r2, r3
 802660c:	693b      	ldr	r3, [r7, #16]
 802660e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8026610:	697b      	ldr	r3, [r7, #20]
 8026612:	015a      	lsls	r2, r3, #5
 8026614:	69bb      	ldr	r3, [r7, #24]
 8026616:	4413      	add	r3, r2
 8026618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802661c:	461a      	mov	r2, r3
 802661e:	2302      	movs	r3, #2
 8026620:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026622:	697b      	ldr	r3, [r7, #20]
 8026624:	b2d9      	uxtb	r1, r3
 8026626:	687a      	ldr	r2, [r7, #4]
 8026628:	697b      	ldr	r3, [r7, #20]
 802662a:	202c      	movs	r0, #44	; 0x2c
 802662c:	fb00 f303 	mul.w	r3, r0, r3
 8026630:	4413      	add	r3, r2
 8026632:	3360      	adds	r3, #96	; 0x60
 8026634:	781b      	ldrb	r3, [r3, #0]
 8026636:	461a      	mov	r2, r3
 8026638:	6878      	ldr	r0, [r7, #4]
 802663a:	f007 fae1 	bl	802dc00 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 802663e:	bf00      	nop
 8026640:	3720      	adds	r7, #32
 8026642:	46bd      	mov	sp, r7
 8026644:	bd80      	pop	{r7, pc}

08026646 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8026646:	b580      	push	{r7, lr}
 8026648:	b08a      	sub	sp, #40	; 0x28
 802664a:	af00      	add	r7, sp, #0
 802664c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026656:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8026658:	687b      	ldr	r3, [r7, #4]
 802665a:	681b      	ldr	r3, [r3, #0]
 802665c:	6a1b      	ldr	r3, [r3, #32]
 802665e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8026660:	69fb      	ldr	r3, [r7, #28]
 8026662:	f003 030f 	and.w	r3, r3, #15
 8026666:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8026668:	69fb      	ldr	r3, [r7, #28]
 802666a:	0c5b      	lsrs	r3, r3, #17
 802666c:	f003 030f 	and.w	r3, r3, #15
 8026670:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8026672:	69fb      	ldr	r3, [r7, #28]
 8026674:	091b      	lsrs	r3, r3, #4
 8026676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802667a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 802667c:	697b      	ldr	r3, [r7, #20]
 802667e:	2b02      	cmp	r3, #2
 8026680:	d004      	beq.n	802668c <HCD_RXQLVL_IRQHandler+0x46>
 8026682:	697b      	ldr	r3, [r7, #20]
 8026684:	2b05      	cmp	r3, #5
 8026686:	f000 80a9 	beq.w	80267dc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 802668a:	e0aa      	b.n	80267e2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 802668c:	693b      	ldr	r3, [r7, #16]
 802668e:	2b00      	cmp	r3, #0
 8026690:	f000 80a6 	beq.w	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8026694:	687a      	ldr	r2, [r7, #4]
 8026696:	69bb      	ldr	r3, [r7, #24]
 8026698:	212c      	movs	r1, #44	; 0x2c
 802669a:	fb01 f303 	mul.w	r3, r1, r3
 802669e:	4413      	add	r3, r2
 80266a0:	3344      	adds	r3, #68	; 0x44
 80266a2:	681b      	ldr	r3, [r3, #0]
 80266a4:	2b00      	cmp	r3, #0
 80266a6:	f000 809b 	beq.w	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80266aa:	687a      	ldr	r2, [r7, #4]
 80266ac:	69bb      	ldr	r3, [r7, #24]
 80266ae:	212c      	movs	r1, #44	; 0x2c
 80266b0:	fb01 f303 	mul.w	r3, r1, r3
 80266b4:	4413      	add	r3, r2
 80266b6:	3350      	adds	r3, #80	; 0x50
 80266b8:	681a      	ldr	r2, [r3, #0]
 80266ba:	693b      	ldr	r3, [r7, #16]
 80266bc:	441a      	add	r2, r3
 80266be:	6879      	ldr	r1, [r7, #4]
 80266c0:	69bb      	ldr	r3, [r7, #24]
 80266c2:	202c      	movs	r0, #44	; 0x2c
 80266c4:	fb00 f303 	mul.w	r3, r0, r3
 80266c8:	440b      	add	r3, r1
 80266ca:	334c      	adds	r3, #76	; 0x4c
 80266cc:	681b      	ldr	r3, [r3, #0]
 80266ce:	429a      	cmp	r2, r3
 80266d0:	d87a      	bhi.n	80267c8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80266d2:	687b      	ldr	r3, [r7, #4]
 80266d4:	6818      	ldr	r0, [r3, #0]
 80266d6:	687a      	ldr	r2, [r7, #4]
 80266d8:	69bb      	ldr	r3, [r7, #24]
 80266da:	212c      	movs	r1, #44	; 0x2c
 80266dc:	fb01 f303 	mul.w	r3, r1, r3
 80266e0:	4413      	add	r3, r2
 80266e2:	3344      	adds	r3, #68	; 0x44
 80266e4:	681b      	ldr	r3, [r3, #0]
 80266e6:	693a      	ldr	r2, [r7, #16]
 80266e8:	b292      	uxth	r2, r2
 80266ea:	4619      	mov	r1, r3
 80266ec:	f004 fb40 	bl	802ad70 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80266f0:	687a      	ldr	r2, [r7, #4]
 80266f2:	69bb      	ldr	r3, [r7, #24]
 80266f4:	212c      	movs	r1, #44	; 0x2c
 80266f6:	fb01 f303 	mul.w	r3, r1, r3
 80266fa:	4413      	add	r3, r2
 80266fc:	3344      	adds	r3, #68	; 0x44
 80266fe:	681a      	ldr	r2, [r3, #0]
 8026700:	693b      	ldr	r3, [r7, #16]
 8026702:	441a      	add	r2, r3
 8026704:	6879      	ldr	r1, [r7, #4]
 8026706:	69bb      	ldr	r3, [r7, #24]
 8026708:	202c      	movs	r0, #44	; 0x2c
 802670a:	fb00 f303 	mul.w	r3, r0, r3
 802670e:	440b      	add	r3, r1
 8026710:	3344      	adds	r3, #68	; 0x44
 8026712:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026714:	687a      	ldr	r2, [r7, #4]
 8026716:	69bb      	ldr	r3, [r7, #24]
 8026718:	212c      	movs	r1, #44	; 0x2c
 802671a:	fb01 f303 	mul.w	r3, r1, r3
 802671e:	4413      	add	r3, r2
 8026720:	3350      	adds	r3, #80	; 0x50
 8026722:	681a      	ldr	r2, [r3, #0]
 8026724:	693b      	ldr	r3, [r7, #16]
 8026726:	441a      	add	r2, r3
 8026728:	6879      	ldr	r1, [r7, #4]
 802672a:	69bb      	ldr	r3, [r7, #24]
 802672c:	202c      	movs	r0, #44	; 0x2c
 802672e:	fb00 f303 	mul.w	r3, r0, r3
 8026732:	440b      	add	r3, r1
 8026734:	3350      	adds	r3, #80	; 0x50
 8026736:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8026738:	69bb      	ldr	r3, [r7, #24]
 802673a:	015a      	lsls	r2, r3, #5
 802673c:	6a3b      	ldr	r3, [r7, #32]
 802673e:	4413      	add	r3, r2
 8026740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026744:	691b      	ldr	r3, [r3, #16]
 8026746:	0cdb      	lsrs	r3, r3, #19
 8026748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 802674c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 802674e:	687a      	ldr	r2, [r7, #4]
 8026750:	69bb      	ldr	r3, [r7, #24]
 8026752:	212c      	movs	r1, #44	; 0x2c
 8026754:	fb01 f303 	mul.w	r3, r1, r3
 8026758:	4413      	add	r3, r2
 802675a:	3340      	adds	r3, #64	; 0x40
 802675c:	881b      	ldrh	r3, [r3, #0]
 802675e:	461a      	mov	r2, r3
 8026760:	693b      	ldr	r3, [r7, #16]
 8026762:	4293      	cmp	r3, r2
 8026764:	d13c      	bne.n	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
 8026766:	68fb      	ldr	r3, [r7, #12]
 8026768:	2b00      	cmp	r3, #0
 802676a:	d039      	beq.n	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 802676c:	69bb      	ldr	r3, [r7, #24]
 802676e:	015a      	lsls	r2, r3, #5
 8026770:	6a3b      	ldr	r3, [r7, #32]
 8026772:	4413      	add	r3, r2
 8026774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802677c:	68bb      	ldr	r3, [r7, #8]
 802677e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026782:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8026784:	68bb      	ldr	r3, [r7, #8]
 8026786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802678a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 802678c:	69bb      	ldr	r3, [r7, #24]
 802678e:	015a      	lsls	r2, r3, #5
 8026790:	6a3b      	ldr	r3, [r7, #32]
 8026792:	4413      	add	r3, r2
 8026794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026798:	461a      	mov	r2, r3
 802679a:	68bb      	ldr	r3, [r7, #8]
 802679c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 802679e:	687a      	ldr	r2, [r7, #4]
 80267a0:	69bb      	ldr	r3, [r7, #24]
 80267a2:	212c      	movs	r1, #44	; 0x2c
 80267a4:	fb01 f303 	mul.w	r3, r1, r3
 80267a8:	4413      	add	r3, r2
 80267aa:	3354      	adds	r3, #84	; 0x54
 80267ac:	781b      	ldrb	r3, [r3, #0]
 80267ae:	f083 0301 	eor.w	r3, r3, #1
 80267b2:	b2d8      	uxtb	r0, r3
 80267b4:	687a      	ldr	r2, [r7, #4]
 80267b6:	69bb      	ldr	r3, [r7, #24]
 80267b8:	212c      	movs	r1, #44	; 0x2c
 80267ba:	fb01 f303 	mul.w	r3, r1, r3
 80267be:	4413      	add	r3, r2
 80267c0:	3354      	adds	r3, #84	; 0x54
 80267c2:	4602      	mov	r2, r0
 80267c4:	701a      	strb	r2, [r3, #0]
      break;
 80267c6:	e00b      	b.n	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80267c8:	687a      	ldr	r2, [r7, #4]
 80267ca:	69bb      	ldr	r3, [r7, #24]
 80267cc:	212c      	movs	r1, #44	; 0x2c
 80267ce:	fb01 f303 	mul.w	r3, r1, r3
 80267d2:	4413      	add	r3, r2
 80267d4:	3360      	adds	r3, #96	; 0x60
 80267d6:	2204      	movs	r2, #4
 80267d8:	701a      	strb	r2, [r3, #0]
      break;
 80267da:	e001      	b.n	80267e0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80267dc:	bf00      	nop
 80267de:	e000      	b.n	80267e2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80267e0:	bf00      	nop
  }
}
 80267e2:	bf00      	nop
 80267e4:	3728      	adds	r7, #40	; 0x28
 80267e6:	46bd      	mov	sp, r7
 80267e8:	bd80      	pop	{r7, pc}

080267ea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80267ea:	b580      	push	{r7, lr}
 80267ec:	b086      	sub	sp, #24
 80267ee:	af00      	add	r7, sp, #0
 80267f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	681b      	ldr	r3, [r3, #0]
 80267f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80267f8:	697b      	ldr	r3, [r7, #20]
 80267fa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80267fc:	693b      	ldr	r3, [r7, #16]
 80267fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026802:	681b      	ldr	r3, [r3, #0]
 8026804:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8026806:	693b      	ldr	r3, [r7, #16]
 8026808:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8026810:	68bb      	ldr	r3, [r7, #8]
 8026812:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8026816:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8026818:	68fb      	ldr	r3, [r7, #12]
 802681a:	f003 0302 	and.w	r3, r3, #2
 802681e:	2b02      	cmp	r3, #2
 8026820:	d10b      	bne.n	802683a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026822:	68fb      	ldr	r3, [r7, #12]
 8026824:	f003 0301 	and.w	r3, r3, #1
 8026828:	2b01      	cmp	r3, #1
 802682a:	d102      	bne.n	8026832 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 802682c:	6878      	ldr	r0, [r7, #4]
 802682e:	f007 f9cb 	bl	802dbc8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8026832:	68bb      	ldr	r3, [r7, #8]
 8026834:	f043 0302 	orr.w	r3, r3, #2
 8026838:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 802683a:	68fb      	ldr	r3, [r7, #12]
 802683c:	f003 0308 	and.w	r3, r3, #8
 8026840:	2b08      	cmp	r3, #8
 8026842:	d132      	bne.n	80268aa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026844:	68bb      	ldr	r3, [r7, #8]
 8026846:	f043 0308 	orr.w	r3, r3, #8
 802684a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 802684c:	68fb      	ldr	r3, [r7, #12]
 802684e:	f003 0304 	and.w	r3, r3, #4
 8026852:	2b04      	cmp	r3, #4
 8026854:	d126      	bne.n	80268a4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8026856:	687b      	ldr	r3, [r7, #4]
 8026858:	699b      	ldr	r3, [r3, #24]
 802685a:	2b02      	cmp	r3, #2
 802685c:	d113      	bne.n	8026886 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 802685e:	68fb      	ldr	r3, [r7, #12]
 8026860:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026864:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8026868:	d106      	bne.n	8026878 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802686a:	687b      	ldr	r3, [r7, #4]
 802686c:	681b      	ldr	r3, [r3, #0]
 802686e:	2102      	movs	r1, #2
 8026870:	4618      	mov	r0, r3
 8026872:	f004 fbeb 	bl	802b04c <USB_InitFSLSPClkSel>
 8026876:	e011      	b.n	802689c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	681b      	ldr	r3, [r3, #0]
 802687c:	2101      	movs	r1, #1
 802687e:	4618      	mov	r0, r3
 8026880:	f004 fbe4 	bl	802b04c <USB_InitFSLSPClkSel>
 8026884:	e00a      	b.n	802689c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8026886:	687b      	ldr	r3, [r7, #4]
 8026888:	68db      	ldr	r3, [r3, #12]
 802688a:	2b01      	cmp	r3, #1
 802688c:	d106      	bne.n	802689c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 802688e:	693b      	ldr	r3, [r7, #16]
 8026890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8026894:	461a      	mov	r2, r3
 8026896:	f64e 2360 	movw	r3, #60000	; 0xea60
 802689a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 802689c:	6878      	ldr	r0, [r7, #4]
 802689e:	f007 f9bd 	bl	802dc1c <HAL_HCD_PortEnabled_Callback>
 80268a2:	e002      	b.n	80268aa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80268a4:	6878      	ldr	r0, [r7, #4]
 80268a6:	f007 f9c7 	bl	802dc38 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80268aa:	68fb      	ldr	r3, [r7, #12]
 80268ac:	f003 0320 	and.w	r3, r3, #32
 80268b0:	2b20      	cmp	r3, #32
 80268b2:	d103      	bne.n	80268bc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80268b4:	68bb      	ldr	r3, [r7, #8]
 80268b6:	f043 0320 	orr.w	r3, r3, #32
 80268ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80268bc:	693b      	ldr	r3, [r7, #16]
 80268be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80268c2:	461a      	mov	r2, r3
 80268c4:	68bb      	ldr	r3, [r7, #8]
 80268c6:	6013      	str	r3, [r2, #0]
}
 80268c8:	bf00      	nop
 80268ca:	3718      	adds	r7, #24
 80268cc:	46bd      	mov	sp, r7
 80268ce:	bd80      	pop	{r7, pc}

080268d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80268d0:	b580      	push	{r7, lr}
 80268d2:	b084      	sub	sp, #16
 80268d4:	af00      	add	r7, sp, #0
 80268d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80268d8:	687b      	ldr	r3, [r7, #4]
 80268da:	2b00      	cmp	r3, #0
 80268dc:	d101      	bne.n	80268e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80268de:	2301      	movs	r3, #1
 80268e0:	e12b      	b.n	8026b3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80268e2:	687b      	ldr	r3, [r7, #4]
 80268e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80268e8:	b2db      	uxtb	r3, r3
 80268ea:	2b00      	cmp	r3, #0
 80268ec:	d106      	bne.n	80268fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80268ee:	687b      	ldr	r3, [r7, #4]
 80268f0:	2200      	movs	r2, #0
 80268f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80268f6:	6878      	ldr	r0, [r7, #4]
 80268f8:	f7fa ff70 	bl	80217dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80268fc:	687b      	ldr	r3, [r7, #4]
 80268fe:	2224      	movs	r2, #36	; 0x24
 8026900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026904:	687b      	ldr	r3, [r7, #4]
 8026906:	681b      	ldr	r3, [r3, #0]
 8026908:	681a      	ldr	r2, [r3, #0]
 802690a:	687b      	ldr	r3, [r7, #4]
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	f022 0201 	bic.w	r2, r2, #1
 8026912:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026914:	687b      	ldr	r3, [r7, #4]
 8026916:	681b      	ldr	r3, [r3, #0]
 8026918:	681a      	ldr	r2, [r3, #0]
 802691a:	687b      	ldr	r3, [r7, #4]
 802691c:	681b      	ldr	r3, [r3, #0]
 802691e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026922:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026924:	687b      	ldr	r3, [r7, #4]
 8026926:	681b      	ldr	r3, [r3, #0]
 8026928:	681a      	ldr	r2, [r3, #0]
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	681b      	ldr	r3, [r3, #0]
 802692e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026932:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026934:	f001 fa0c 	bl	8027d50 <HAL_RCC_GetPCLK1Freq>
 8026938:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	685b      	ldr	r3, [r3, #4]
 802693e:	4a81      	ldr	r2, [pc, #516]	; (8026b44 <HAL_I2C_Init+0x274>)
 8026940:	4293      	cmp	r3, r2
 8026942:	d807      	bhi.n	8026954 <HAL_I2C_Init+0x84>
 8026944:	68fb      	ldr	r3, [r7, #12]
 8026946:	4a80      	ldr	r2, [pc, #512]	; (8026b48 <HAL_I2C_Init+0x278>)
 8026948:	4293      	cmp	r3, r2
 802694a:	bf94      	ite	ls
 802694c:	2301      	movls	r3, #1
 802694e:	2300      	movhi	r3, #0
 8026950:	b2db      	uxtb	r3, r3
 8026952:	e006      	b.n	8026962 <HAL_I2C_Init+0x92>
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	4a7d      	ldr	r2, [pc, #500]	; (8026b4c <HAL_I2C_Init+0x27c>)
 8026958:	4293      	cmp	r3, r2
 802695a:	bf94      	ite	ls
 802695c:	2301      	movls	r3, #1
 802695e:	2300      	movhi	r3, #0
 8026960:	b2db      	uxtb	r3, r3
 8026962:	2b00      	cmp	r3, #0
 8026964:	d001      	beq.n	802696a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8026966:	2301      	movs	r3, #1
 8026968:	e0e7      	b.n	8026b3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802696a:	68fb      	ldr	r3, [r7, #12]
 802696c:	4a78      	ldr	r2, [pc, #480]	; (8026b50 <HAL_I2C_Init+0x280>)
 802696e:	fba2 2303 	umull	r2, r3, r2, r3
 8026972:	0c9b      	lsrs	r3, r3, #18
 8026974:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	685b      	ldr	r3, [r3, #4]
 802697c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026980:	687b      	ldr	r3, [r7, #4]
 8026982:	681b      	ldr	r3, [r3, #0]
 8026984:	68ba      	ldr	r2, [r7, #8]
 8026986:	430a      	orrs	r2, r1
 8026988:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	681b      	ldr	r3, [r3, #0]
 802698e:	6a1b      	ldr	r3, [r3, #32]
 8026990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	685b      	ldr	r3, [r3, #4]
 8026998:	4a6a      	ldr	r2, [pc, #424]	; (8026b44 <HAL_I2C_Init+0x274>)
 802699a:	4293      	cmp	r3, r2
 802699c:	d802      	bhi.n	80269a4 <HAL_I2C_Init+0xd4>
 802699e:	68bb      	ldr	r3, [r7, #8]
 80269a0:	3301      	adds	r3, #1
 80269a2:	e009      	b.n	80269b8 <HAL_I2C_Init+0xe8>
 80269a4:	68bb      	ldr	r3, [r7, #8]
 80269a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80269aa:	fb02 f303 	mul.w	r3, r2, r3
 80269ae:	4a69      	ldr	r2, [pc, #420]	; (8026b54 <HAL_I2C_Init+0x284>)
 80269b0:	fba2 2303 	umull	r2, r3, r2, r3
 80269b4:	099b      	lsrs	r3, r3, #6
 80269b6:	3301      	adds	r3, #1
 80269b8:	687a      	ldr	r2, [r7, #4]
 80269ba:	6812      	ldr	r2, [r2, #0]
 80269bc:	430b      	orrs	r3, r1
 80269be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	681b      	ldr	r3, [r3, #0]
 80269c4:	69db      	ldr	r3, [r3, #28]
 80269c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80269ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	685b      	ldr	r3, [r3, #4]
 80269d2:	495c      	ldr	r1, [pc, #368]	; (8026b44 <HAL_I2C_Init+0x274>)
 80269d4:	428b      	cmp	r3, r1
 80269d6:	d819      	bhi.n	8026a0c <HAL_I2C_Init+0x13c>
 80269d8:	68fb      	ldr	r3, [r7, #12]
 80269da:	1e59      	subs	r1, r3, #1
 80269dc:	687b      	ldr	r3, [r7, #4]
 80269de:	685b      	ldr	r3, [r3, #4]
 80269e0:	005b      	lsls	r3, r3, #1
 80269e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80269e6:	1c59      	adds	r1, r3, #1
 80269e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80269ec:	400b      	ands	r3, r1
 80269ee:	2b00      	cmp	r3, #0
 80269f0:	d00a      	beq.n	8026a08 <HAL_I2C_Init+0x138>
 80269f2:	68fb      	ldr	r3, [r7, #12]
 80269f4:	1e59      	subs	r1, r3, #1
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	685b      	ldr	r3, [r3, #4]
 80269fa:	005b      	lsls	r3, r3, #1
 80269fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8026a00:	3301      	adds	r3, #1
 8026a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a06:	e051      	b.n	8026aac <HAL_I2C_Init+0x1dc>
 8026a08:	2304      	movs	r3, #4
 8026a0a:	e04f      	b.n	8026aac <HAL_I2C_Init+0x1dc>
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	689b      	ldr	r3, [r3, #8]
 8026a10:	2b00      	cmp	r3, #0
 8026a12:	d111      	bne.n	8026a38 <HAL_I2C_Init+0x168>
 8026a14:	68fb      	ldr	r3, [r7, #12]
 8026a16:	1e58      	subs	r0, r3, #1
 8026a18:	687b      	ldr	r3, [r7, #4]
 8026a1a:	6859      	ldr	r1, [r3, #4]
 8026a1c:	460b      	mov	r3, r1
 8026a1e:	005b      	lsls	r3, r3, #1
 8026a20:	440b      	add	r3, r1
 8026a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a26:	3301      	adds	r3, #1
 8026a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a2c:	2b00      	cmp	r3, #0
 8026a2e:	bf0c      	ite	eq
 8026a30:	2301      	moveq	r3, #1
 8026a32:	2300      	movne	r3, #0
 8026a34:	b2db      	uxtb	r3, r3
 8026a36:	e012      	b.n	8026a5e <HAL_I2C_Init+0x18e>
 8026a38:	68fb      	ldr	r3, [r7, #12]
 8026a3a:	1e58      	subs	r0, r3, #1
 8026a3c:	687b      	ldr	r3, [r7, #4]
 8026a3e:	6859      	ldr	r1, [r3, #4]
 8026a40:	460b      	mov	r3, r1
 8026a42:	009b      	lsls	r3, r3, #2
 8026a44:	440b      	add	r3, r1
 8026a46:	0099      	lsls	r1, r3, #2
 8026a48:	440b      	add	r3, r1
 8026a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a4e:	3301      	adds	r3, #1
 8026a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a54:	2b00      	cmp	r3, #0
 8026a56:	bf0c      	ite	eq
 8026a58:	2301      	moveq	r3, #1
 8026a5a:	2300      	movne	r3, #0
 8026a5c:	b2db      	uxtb	r3, r3
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d001      	beq.n	8026a66 <HAL_I2C_Init+0x196>
 8026a62:	2301      	movs	r3, #1
 8026a64:	e022      	b.n	8026aac <HAL_I2C_Init+0x1dc>
 8026a66:	687b      	ldr	r3, [r7, #4]
 8026a68:	689b      	ldr	r3, [r3, #8]
 8026a6a:	2b00      	cmp	r3, #0
 8026a6c:	d10e      	bne.n	8026a8c <HAL_I2C_Init+0x1bc>
 8026a6e:	68fb      	ldr	r3, [r7, #12]
 8026a70:	1e58      	subs	r0, r3, #1
 8026a72:	687b      	ldr	r3, [r7, #4]
 8026a74:	6859      	ldr	r1, [r3, #4]
 8026a76:	460b      	mov	r3, r1
 8026a78:	005b      	lsls	r3, r3, #1
 8026a7a:	440b      	add	r3, r1
 8026a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8026a80:	3301      	adds	r3, #1
 8026a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8026a8a:	e00f      	b.n	8026aac <HAL_I2C_Init+0x1dc>
 8026a8c:	68fb      	ldr	r3, [r7, #12]
 8026a8e:	1e58      	subs	r0, r3, #1
 8026a90:	687b      	ldr	r3, [r7, #4]
 8026a92:	6859      	ldr	r1, [r3, #4]
 8026a94:	460b      	mov	r3, r1
 8026a96:	009b      	lsls	r3, r3, #2
 8026a98:	440b      	add	r3, r1
 8026a9a:	0099      	lsls	r1, r3, #2
 8026a9c:	440b      	add	r3, r1
 8026a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026aa2:	3301      	adds	r3, #1
 8026aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8026aac:	6879      	ldr	r1, [r7, #4]
 8026aae:	6809      	ldr	r1, [r1, #0]
 8026ab0:	4313      	orrs	r3, r2
 8026ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8026ab4:	687b      	ldr	r3, [r7, #4]
 8026ab6:	681b      	ldr	r3, [r3, #0]
 8026ab8:	681b      	ldr	r3, [r3, #0]
 8026aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8026abe:	687b      	ldr	r3, [r7, #4]
 8026ac0:	69da      	ldr	r2, [r3, #28]
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	6a1b      	ldr	r3, [r3, #32]
 8026ac6:	431a      	orrs	r2, r3
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	681b      	ldr	r3, [r3, #0]
 8026acc:	430a      	orrs	r2, r1
 8026ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	689b      	ldr	r3, [r3, #8]
 8026ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8026ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026ade:	687a      	ldr	r2, [r7, #4]
 8026ae0:	6911      	ldr	r1, [r2, #16]
 8026ae2:	687a      	ldr	r2, [r7, #4]
 8026ae4:	68d2      	ldr	r2, [r2, #12]
 8026ae6:	4311      	orrs	r1, r2
 8026ae8:	687a      	ldr	r2, [r7, #4]
 8026aea:	6812      	ldr	r2, [r2, #0]
 8026aec:	430b      	orrs	r3, r1
 8026aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	681b      	ldr	r3, [r3, #0]
 8026af4:	68db      	ldr	r3, [r3, #12]
 8026af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	695a      	ldr	r2, [r3, #20]
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	699b      	ldr	r3, [r3, #24]
 8026b02:	431a      	orrs	r2, r3
 8026b04:	687b      	ldr	r3, [r7, #4]
 8026b06:	681b      	ldr	r3, [r3, #0]
 8026b08:	430a      	orrs	r2, r1
 8026b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	681a      	ldr	r2, [r3, #0]
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	f042 0201 	orr.w	r2, r2, #1
 8026b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026b1c:	687b      	ldr	r3, [r7, #4]
 8026b1e:	2200      	movs	r2, #0
 8026b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	2220      	movs	r2, #32
 8026b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026b2a:	687b      	ldr	r3, [r7, #4]
 8026b2c:	2200      	movs	r2, #0
 8026b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026b30:	687b      	ldr	r3, [r7, #4]
 8026b32:	2200      	movs	r2, #0
 8026b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8026b38:	2300      	movs	r3, #0
}
 8026b3a:	4618      	mov	r0, r3
 8026b3c:	3710      	adds	r7, #16
 8026b3e:	46bd      	mov	sp, r7
 8026b40:	bd80      	pop	{r7, pc}
 8026b42:	bf00      	nop
 8026b44:	000186a0 	.word	0x000186a0
 8026b48:	001e847f 	.word	0x001e847f
 8026b4c:	003d08ff 	.word	0x003d08ff
 8026b50:	431bde83 	.word	0x431bde83
 8026b54:	10624dd3 	.word	0x10624dd3

08026b58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026b58:	b480      	push	{r7}
 8026b5a:	b083      	sub	sp, #12
 8026b5c:	af00      	add	r7, sp, #0
 8026b5e:	6078      	str	r0, [r7, #4]
 8026b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026b62:	687b      	ldr	r3, [r7, #4]
 8026b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026b68:	b2db      	uxtb	r3, r3
 8026b6a:	2b20      	cmp	r3, #32
 8026b6c:	d129      	bne.n	8026bc2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026b6e:	687b      	ldr	r3, [r7, #4]
 8026b70:	2224      	movs	r2, #36	; 0x24
 8026b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026b76:	687b      	ldr	r3, [r7, #4]
 8026b78:	681b      	ldr	r3, [r3, #0]
 8026b7a:	681a      	ldr	r2, [r3, #0]
 8026b7c:	687b      	ldr	r3, [r7, #4]
 8026b7e:	681b      	ldr	r3, [r3, #0]
 8026b80:	f022 0201 	bic.w	r2, r2, #1
 8026b84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8026b86:	687b      	ldr	r3, [r7, #4]
 8026b88:	681b      	ldr	r3, [r3, #0]
 8026b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	681b      	ldr	r3, [r3, #0]
 8026b90:	f022 0210 	bic.w	r2, r2, #16
 8026b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026b9c:	687b      	ldr	r3, [r7, #4]
 8026b9e:	681b      	ldr	r3, [r3, #0]
 8026ba0:	683a      	ldr	r2, [r7, #0]
 8026ba2:	430a      	orrs	r2, r1
 8026ba4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026ba6:	687b      	ldr	r3, [r7, #4]
 8026ba8:	681b      	ldr	r3, [r3, #0]
 8026baa:	681a      	ldr	r2, [r3, #0]
 8026bac:	687b      	ldr	r3, [r7, #4]
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	f042 0201 	orr.w	r2, r2, #1
 8026bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026bb6:	687b      	ldr	r3, [r7, #4]
 8026bb8:	2220      	movs	r2, #32
 8026bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026bbe:	2300      	movs	r3, #0
 8026bc0:	e000      	b.n	8026bc4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026bc2:	2302      	movs	r3, #2
  }
}
 8026bc4:	4618      	mov	r0, r3
 8026bc6:	370c      	adds	r7, #12
 8026bc8:	46bd      	mov	sp, r7
 8026bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026bce:	4770      	bx	lr

08026bd0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026bd0:	b480      	push	{r7}
 8026bd2:	b085      	sub	sp, #20
 8026bd4:	af00      	add	r7, sp, #0
 8026bd6:	6078      	str	r0, [r7, #4]
 8026bd8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8026bda:	2300      	movs	r3, #0
 8026bdc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026be4:	b2db      	uxtb	r3, r3
 8026be6:	2b20      	cmp	r3, #32
 8026be8:	d12a      	bne.n	8026c40 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	2224      	movs	r2, #36	; 0x24
 8026bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	681a      	ldr	r2, [r3, #0]
 8026bf8:	687b      	ldr	r3, [r7, #4]
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	f022 0201 	bic.w	r2, r2, #1
 8026c00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026c02:	687b      	ldr	r3, [r7, #4]
 8026c04:	681b      	ldr	r3, [r3, #0]
 8026c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c08:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8026c0a:	89fb      	ldrh	r3, [r7, #14]
 8026c0c:	f023 030f 	bic.w	r3, r3, #15
 8026c10:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026c12:	683b      	ldr	r3, [r7, #0]
 8026c14:	b29a      	uxth	r2, r3
 8026c16:	89fb      	ldrh	r3, [r7, #14]
 8026c18:	4313      	orrs	r3, r2
 8026c1a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026c1c:	687b      	ldr	r3, [r7, #4]
 8026c1e:	681b      	ldr	r3, [r3, #0]
 8026c20:	89fa      	ldrh	r2, [r7, #14]
 8026c22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026c24:	687b      	ldr	r3, [r7, #4]
 8026c26:	681b      	ldr	r3, [r3, #0]
 8026c28:	681a      	ldr	r2, [r3, #0]
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	681b      	ldr	r3, [r3, #0]
 8026c2e:	f042 0201 	orr.w	r2, r2, #1
 8026c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	2220      	movs	r2, #32
 8026c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026c3c:	2300      	movs	r3, #0
 8026c3e:	e000      	b.n	8026c42 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026c40:	2302      	movs	r3, #2
  }
}
 8026c42:	4618      	mov	r0, r3
 8026c44:	3714      	adds	r7, #20
 8026c46:	46bd      	mov	sp, r7
 8026c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c4c:	4770      	bx	lr
	...

08026c50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026c50:	b580      	push	{r7, lr}
 8026c52:	b084      	sub	sp, #16
 8026c54:	af00      	add	r7, sp, #0
 8026c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	d101      	bne.n	8026c62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026c5e:	2301      	movs	r3, #1
 8026c60:	e0bf      	b.n	8026de2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026c62:	687b      	ldr	r3, [r7, #4]
 8026c64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8026c68:	b2db      	uxtb	r3, r3
 8026c6a:	2b00      	cmp	r3, #0
 8026c6c:	d106      	bne.n	8026c7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026c6e:	687b      	ldr	r3, [r7, #4]
 8026c70:	2200      	movs	r2, #0
 8026c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8026c76:	6878      	ldr	r0, [r7, #4]
 8026c78:	f7fa fe1a 	bl	80218b0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026c7c:	687b      	ldr	r3, [r7, #4]
 8026c7e:	2202      	movs	r2, #2
 8026c80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026c84:	687b      	ldr	r3, [r7, #4]
 8026c86:	681b      	ldr	r3, [r3, #0]
 8026c88:	699a      	ldr	r2, [r3, #24]
 8026c8a:	687b      	ldr	r3, [r7, #4]
 8026c8c:	681b      	ldr	r3, [r3, #0]
 8026c8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026c92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026c94:	687b      	ldr	r3, [r7, #4]
 8026c96:	681b      	ldr	r3, [r3, #0]
 8026c98:	6999      	ldr	r1, [r3, #24]
 8026c9a:	687b      	ldr	r3, [r7, #4]
 8026c9c:	685a      	ldr	r2, [r3, #4]
 8026c9e:	687b      	ldr	r3, [r7, #4]
 8026ca0:	689b      	ldr	r3, [r3, #8]
 8026ca2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026ca8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026caa:	687b      	ldr	r3, [r7, #4]
 8026cac:	691b      	ldr	r3, [r3, #16]
 8026cae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026cb0:	687b      	ldr	r3, [r7, #4]
 8026cb2:	681b      	ldr	r3, [r3, #0]
 8026cb4:	430a      	orrs	r2, r1
 8026cb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026cb8:	687b      	ldr	r3, [r7, #4]
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	6899      	ldr	r1, [r3, #8]
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	681a      	ldr	r2, [r3, #0]
 8026cc2:	4b4a      	ldr	r3, [pc, #296]	; (8026dec <HAL_LTDC_Init+0x19c>)
 8026cc4:	400b      	ands	r3, r1
 8026cc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	695b      	ldr	r3, [r3, #20]
 8026ccc:	041b      	lsls	r3, r3, #16
 8026cce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026cd0:	687b      	ldr	r3, [r7, #4]
 8026cd2:	681b      	ldr	r3, [r3, #0]
 8026cd4:	6899      	ldr	r1, [r3, #8]
 8026cd6:	687b      	ldr	r3, [r7, #4]
 8026cd8:	699a      	ldr	r2, [r3, #24]
 8026cda:	68fb      	ldr	r3, [r7, #12]
 8026cdc:	431a      	orrs	r2, r3
 8026cde:	687b      	ldr	r3, [r7, #4]
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	430a      	orrs	r2, r1
 8026ce4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026ce6:	687b      	ldr	r3, [r7, #4]
 8026ce8:	681b      	ldr	r3, [r3, #0]
 8026cea:	68d9      	ldr	r1, [r3, #12]
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	681a      	ldr	r2, [r3, #0]
 8026cf0:	4b3e      	ldr	r3, [pc, #248]	; (8026dec <HAL_LTDC_Init+0x19c>)
 8026cf2:	400b      	ands	r3, r1
 8026cf4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026cf6:	687b      	ldr	r3, [r7, #4]
 8026cf8:	69db      	ldr	r3, [r3, #28]
 8026cfa:	041b      	lsls	r3, r3, #16
 8026cfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026cfe:	687b      	ldr	r3, [r7, #4]
 8026d00:	681b      	ldr	r3, [r3, #0]
 8026d02:	68d9      	ldr	r1, [r3, #12]
 8026d04:	687b      	ldr	r3, [r7, #4]
 8026d06:	6a1a      	ldr	r2, [r3, #32]
 8026d08:	68fb      	ldr	r3, [r7, #12]
 8026d0a:	431a      	orrs	r2, r3
 8026d0c:	687b      	ldr	r3, [r7, #4]
 8026d0e:	681b      	ldr	r3, [r3, #0]
 8026d10:	430a      	orrs	r2, r1
 8026d12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026d14:	687b      	ldr	r3, [r7, #4]
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	6919      	ldr	r1, [r3, #16]
 8026d1a:	687b      	ldr	r3, [r7, #4]
 8026d1c:	681a      	ldr	r2, [r3, #0]
 8026d1e:	4b33      	ldr	r3, [pc, #204]	; (8026dec <HAL_LTDC_Init+0x19c>)
 8026d20:	400b      	ands	r3, r1
 8026d22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026d24:	687b      	ldr	r3, [r7, #4]
 8026d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026d28:	041b      	lsls	r3, r3, #16
 8026d2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026d2c:	687b      	ldr	r3, [r7, #4]
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	6919      	ldr	r1, [r3, #16]
 8026d32:	687b      	ldr	r3, [r7, #4]
 8026d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026d36:	68fb      	ldr	r3, [r7, #12]
 8026d38:	431a      	orrs	r2, r3
 8026d3a:	687b      	ldr	r3, [r7, #4]
 8026d3c:	681b      	ldr	r3, [r3, #0]
 8026d3e:	430a      	orrs	r2, r1
 8026d40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	681b      	ldr	r3, [r3, #0]
 8026d46:	6959      	ldr	r1, [r3, #20]
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	681a      	ldr	r2, [r3, #0]
 8026d4c:	4b27      	ldr	r3, [pc, #156]	; (8026dec <HAL_LTDC_Init+0x19c>)
 8026d4e:	400b      	ands	r3, r1
 8026d50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026d52:	687b      	ldr	r3, [r7, #4]
 8026d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026d56:	041b      	lsls	r3, r3, #16
 8026d58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8026d5a:	687b      	ldr	r3, [r7, #4]
 8026d5c:	681b      	ldr	r3, [r3, #0]
 8026d5e:	6959      	ldr	r1, [r3, #20]
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026d64:	68fb      	ldr	r3, [r7, #12]
 8026d66:	431a      	orrs	r2, r3
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	681b      	ldr	r3, [r3, #0]
 8026d6c:	430a      	orrs	r2, r1
 8026d6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026d70:	687b      	ldr	r3, [r7, #4]
 8026d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026d76:	021b      	lsls	r3, r3, #8
 8026d78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8026d7a:	687b      	ldr	r3, [r7, #4]
 8026d7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026d80:	041b      	lsls	r3, r3, #16
 8026d82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026d84:	687b      	ldr	r3, [r7, #4]
 8026d86:	681b      	ldr	r3, [r3, #0]
 8026d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026d8a:	687b      	ldr	r3, [r7, #4]
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026d94:	687b      	ldr	r3, [r7, #4]
 8026d96:	681b      	ldr	r3, [r3, #0]
 8026d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026d9a:	68ba      	ldr	r2, [r7, #8]
 8026d9c:	68fb      	ldr	r3, [r7, #12]
 8026d9e:	4313      	orrs	r3, r2
 8026da0:	687a      	ldr	r2, [r7, #4]
 8026da2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026da6:	431a      	orrs	r2, r3
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	430a      	orrs	r2, r1
 8026dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026db0:	687b      	ldr	r3, [r7, #4]
 8026db2:	681b      	ldr	r3, [r3, #0]
 8026db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026db6:	687b      	ldr	r3, [r7, #4]
 8026db8:	681b      	ldr	r3, [r3, #0]
 8026dba:	f042 0206 	orr.w	r2, r2, #6
 8026dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026dc0:	687b      	ldr	r3, [r7, #4]
 8026dc2:	681b      	ldr	r3, [r3, #0]
 8026dc4:	699a      	ldr	r2, [r3, #24]
 8026dc6:	687b      	ldr	r3, [r7, #4]
 8026dc8:	681b      	ldr	r3, [r3, #0]
 8026dca:	f042 0201 	orr.w	r2, r2, #1
 8026dce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	2200      	movs	r2, #0
 8026dd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	2201      	movs	r2, #1
 8026ddc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026de0:	2300      	movs	r3, #0
}
 8026de2:	4618      	mov	r0, r3
 8026de4:	3710      	adds	r7, #16
 8026de6:	46bd      	mov	sp, r7
 8026de8:	bd80      	pop	{r7, pc}
 8026dea:	bf00      	nop
 8026dec:	f000f800 	.word	0xf000f800

08026df0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026df0:	b580      	push	{r7, lr}
 8026df2:	b084      	sub	sp, #16
 8026df4:	af00      	add	r7, sp, #0
 8026df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026df8:	687b      	ldr	r3, [r7, #4]
 8026dfa:	681b      	ldr	r3, [r3, #0]
 8026dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026e06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026e08:	68fb      	ldr	r3, [r7, #12]
 8026e0a:	f003 0304 	and.w	r3, r3, #4
 8026e0e:	2b00      	cmp	r3, #0
 8026e10:	d023      	beq.n	8026e5a <HAL_LTDC_IRQHandler+0x6a>
 8026e12:	68bb      	ldr	r3, [r7, #8]
 8026e14:	f003 0304 	and.w	r3, r3, #4
 8026e18:	2b00      	cmp	r3, #0
 8026e1a:	d01e      	beq.n	8026e5a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026e1c:	687b      	ldr	r3, [r7, #4]
 8026e1e:	681b      	ldr	r3, [r3, #0]
 8026e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	681b      	ldr	r3, [r3, #0]
 8026e26:	f022 0204 	bic.w	r2, r2, #4
 8026e2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	681b      	ldr	r3, [r3, #0]
 8026e30:	2204      	movs	r2, #4
 8026e32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026e3a:	f043 0201 	orr.w	r2, r3, #1
 8026e3e:	687b      	ldr	r3, [r7, #4]
 8026e40:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026e44:	687b      	ldr	r3, [r7, #4]
 8026e46:	2204      	movs	r2, #4
 8026e48:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e4c:	687b      	ldr	r3, [r7, #4]
 8026e4e:	2200      	movs	r2, #0
 8026e50:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026e54:	6878      	ldr	r0, [r7, #4]
 8026e56:	f000 f86f 	bl	8026f38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026e5a:	68fb      	ldr	r3, [r7, #12]
 8026e5c:	f003 0302 	and.w	r3, r3, #2
 8026e60:	2b00      	cmp	r3, #0
 8026e62:	d023      	beq.n	8026eac <HAL_LTDC_IRQHandler+0xbc>
 8026e64:	68bb      	ldr	r3, [r7, #8]
 8026e66:	f003 0302 	and.w	r3, r3, #2
 8026e6a:	2b00      	cmp	r3, #0
 8026e6c:	d01e      	beq.n	8026eac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026e6e:	687b      	ldr	r3, [r7, #4]
 8026e70:	681b      	ldr	r3, [r3, #0]
 8026e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e74:	687b      	ldr	r3, [r7, #4]
 8026e76:	681b      	ldr	r3, [r3, #0]
 8026e78:	f022 0202 	bic.w	r2, r2, #2
 8026e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	681b      	ldr	r3, [r3, #0]
 8026e82:	2202      	movs	r2, #2
 8026e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026e86:	687b      	ldr	r3, [r7, #4]
 8026e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026e8c:	f043 0202 	orr.w	r2, r3, #2
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026e96:	687b      	ldr	r3, [r7, #4]
 8026e98:	2204      	movs	r2, #4
 8026e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e9e:	687b      	ldr	r3, [r7, #4]
 8026ea0:	2200      	movs	r2, #0
 8026ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026ea6:	6878      	ldr	r0, [r7, #4]
 8026ea8:	f000 f846 	bl	8026f38 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	f003 0301 	and.w	r3, r3, #1
 8026eb2:	2b00      	cmp	r3, #0
 8026eb4:	d01b      	beq.n	8026eee <HAL_LTDC_IRQHandler+0xfe>
 8026eb6:	68bb      	ldr	r3, [r7, #8]
 8026eb8:	f003 0301 	and.w	r3, r3, #1
 8026ebc:	2b00      	cmp	r3, #0
 8026ebe:	d016      	beq.n	8026eee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	681b      	ldr	r3, [r3, #0]
 8026ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026ec6:	687b      	ldr	r3, [r7, #4]
 8026ec8:	681b      	ldr	r3, [r3, #0]
 8026eca:	f022 0201 	bic.w	r2, r2, #1
 8026ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026ed0:	687b      	ldr	r3, [r7, #4]
 8026ed2:	681b      	ldr	r3, [r3, #0]
 8026ed4:	2201      	movs	r2, #1
 8026ed6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026ed8:	687b      	ldr	r3, [r7, #4]
 8026eda:	2201      	movs	r2, #1
 8026edc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	2200      	movs	r2, #0
 8026ee4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8026ee8:	6878      	ldr	r0, [r7, #4]
 8026eea:	f000 f82f 	bl	8026f4c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026eee:	68fb      	ldr	r3, [r7, #12]
 8026ef0:	f003 0308 	and.w	r3, r3, #8
 8026ef4:	2b00      	cmp	r3, #0
 8026ef6:	d01b      	beq.n	8026f30 <HAL_LTDC_IRQHandler+0x140>
 8026ef8:	68bb      	ldr	r3, [r7, #8]
 8026efa:	f003 0308 	and.w	r3, r3, #8
 8026efe:	2b00      	cmp	r3, #0
 8026f00:	d016      	beq.n	8026f30 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	681b      	ldr	r3, [r3, #0]
 8026f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026f08:	687b      	ldr	r3, [r7, #4]
 8026f0a:	681b      	ldr	r3, [r3, #0]
 8026f0c:	f022 0208 	bic.w	r2, r2, #8
 8026f10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026f12:	687b      	ldr	r3, [r7, #4]
 8026f14:	681b      	ldr	r3, [r3, #0]
 8026f16:	2208      	movs	r2, #8
 8026f18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026f1a:	687b      	ldr	r3, [r7, #4]
 8026f1c:	2201      	movs	r2, #1
 8026f1e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	2200      	movs	r2, #0
 8026f26:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026f2a:	6878      	ldr	r0, [r7, #4]
 8026f2c:	f000 f818 	bl	8026f60 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026f30:	bf00      	nop
 8026f32:	3710      	adds	r7, #16
 8026f34:	46bd      	mov	sp, r7
 8026f36:	bd80      	pop	{r7, pc}

08026f38 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f38:	b480      	push	{r7}
 8026f3a:	b083      	sub	sp, #12
 8026f3c:	af00      	add	r7, sp, #0
 8026f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026f40:	bf00      	nop
 8026f42:	370c      	adds	r7, #12
 8026f44:	46bd      	mov	sp, r7
 8026f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f4a:	4770      	bx	lr

08026f4c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f4c:	b480      	push	{r7}
 8026f4e:	b083      	sub	sp, #12
 8026f50:	af00      	add	r7, sp, #0
 8026f52:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026f54:	bf00      	nop
 8026f56:	370c      	adds	r7, #12
 8026f58:	46bd      	mov	sp, r7
 8026f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f5e:	4770      	bx	lr

08026f60 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026f60:	b480      	push	{r7}
 8026f62:	b083      	sub	sp, #12
 8026f64:	af00      	add	r7, sp, #0
 8026f66:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026f68:	bf00      	nop
 8026f6a:	370c      	adds	r7, #12
 8026f6c:	46bd      	mov	sp, r7
 8026f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f72:	4770      	bx	lr

08026f74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026f74:	b5b0      	push	{r4, r5, r7, lr}
 8026f76:	b084      	sub	sp, #16
 8026f78:	af00      	add	r7, sp, #0
 8026f7a:	60f8      	str	r0, [r7, #12]
 8026f7c:	60b9      	str	r1, [r7, #8]
 8026f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f80:	68fb      	ldr	r3, [r7, #12]
 8026f82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026f86:	2b01      	cmp	r3, #1
 8026f88:	d101      	bne.n	8026f8e <HAL_LTDC_ConfigLayer+0x1a>
 8026f8a:	2302      	movs	r3, #2
 8026f8c:	e02c      	b.n	8026fe8 <HAL_LTDC_ConfigLayer+0x74>
 8026f8e:	68fb      	ldr	r3, [r7, #12]
 8026f90:	2201      	movs	r2, #1
 8026f92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026f96:	68fb      	ldr	r3, [r7, #12]
 8026f98:	2202      	movs	r2, #2
 8026f9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026f9e:	68fa      	ldr	r2, [r7, #12]
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	2134      	movs	r1, #52	; 0x34
 8026fa4:	fb01 f303 	mul.w	r3, r1, r3
 8026fa8:	4413      	add	r3, r2
 8026faa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026fae:	68bb      	ldr	r3, [r7, #8]
 8026fb0:	4614      	mov	r4, r2
 8026fb2:	461d      	mov	r5, r3
 8026fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026fc0:	682b      	ldr	r3, [r5, #0]
 8026fc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026fc4:	687a      	ldr	r2, [r7, #4]
 8026fc6:	68b9      	ldr	r1, [r7, #8]
 8026fc8:	68f8      	ldr	r0, [r7, #12]
 8026fca:	f000 f8b9 	bl	8027140 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026fce:	68fb      	ldr	r3, [r7, #12]
 8026fd0:	681b      	ldr	r3, [r3, #0]
 8026fd2:	2201      	movs	r2, #1
 8026fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026fd6:	68fb      	ldr	r3, [r7, #12]
 8026fd8:	2201      	movs	r2, #1
 8026fda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026fde:	68fb      	ldr	r3, [r7, #12]
 8026fe0:	2200      	movs	r2, #0
 8026fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026fe6:	2300      	movs	r3, #0
}
 8026fe8:	4618      	mov	r0, r3
 8026fea:	3710      	adds	r7, #16
 8026fec:	46bd      	mov	sp, r7
 8026fee:	bdb0      	pop	{r4, r5, r7, pc}

08026ff0 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026ff0:	b480      	push	{r7}
 8026ff2:	b085      	sub	sp, #20
 8026ff4:	af00      	add	r7, sp, #0
 8026ff6:	60f8      	str	r0, [r7, #12]
 8026ff8:	60b9      	str	r1, [r7, #8]
 8026ffa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026ffc:	68fb      	ldr	r3, [r7, #12]
 8026ffe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8027002:	2b01      	cmp	r3, #1
 8027004:	d101      	bne.n	802700a <HAL_LTDC_ConfigColorKeying+0x1a>
 8027006:	2302      	movs	r3, #2
 8027008:	e030      	b.n	802706c <HAL_LTDC_ConfigColorKeying+0x7c>
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	2201      	movs	r2, #1
 802700e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8027012:	68fb      	ldr	r3, [r7, #12]
 8027014:	2202      	movs	r2, #2
 8027016:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 802701a:	68fb      	ldr	r3, [r7, #12]
 802701c:	681b      	ldr	r3, [r3, #0]
 802701e:	461a      	mov	r2, r3
 8027020:	687b      	ldr	r3, [r7, #4]
 8027022:	01db      	lsls	r3, r3, #7
 8027024:	4413      	add	r3, r2
 8027026:	3384      	adds	r3, #132	; 0x84
 8027028:	68db      	ldr	r3, [r3, #12]
 802702a:	68fa      	ldr	r2, [r7, #12]
 802702c:	6812      	ldr	r2, [r2, #0]
 802702e:	4611      	mov	r1, r2
 8027030:	687a      	ldr	r2, [r7, #4]
 8027032:	01d2      	lsls	r2, r2, #7
 8027034:	440a      	add	r2, r1
 8027036:	3284      	adds	r2, #132	; 0x84
 8027038:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 802703c:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 802703e:	68fb      	ldr	r3, [r7, #12]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	461a      	mov	r2, r3
 8027044:	687b      	ldr	r3, [r7, #4]
 8027046:	01db      	lsls	r3, r3, #7
 8027048:	4413      	add	r3, r2
 802704a:	3384      	adds	r3, #132	; 0x84
 802704c:	461a      	mov	r2, r3
 802704e:	68bb      	ldr	r3, [r7, #8]
 8027050:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	2201      	movs	r2, #1
 8027058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802705a:	68fb      	ldr	r3, [r7, #12]
 802705c:	2201      	movs	r2, #1
 802705e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8027062:	68fb      	ldr	r3, [r7, #12]
 8027064:	2200      	movs	r2, #0
 8027066:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802706a:	2300      	movs	r3, #0
}
 802706c:	4618      	mov	r0, r3
 802706e:	3714      	adds	r7, #20
 8027070:	46bd      	mov	sp, r7
 8027072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027076:	4770      	bx	lr

08027078 <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8027078:	b480      	push	{r7}
 802707a:	b083      	sub	sp, #12
 802707c:	af00      	add	r7, sp, #0
 802707e:	6078      	str	r0, [r7, #4]
 8027080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8027082:	687b      	ldr	r3, [r7, #4]
 8027084:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8027088:	2b01      	cmp	r3, #1
 802708a:	d101      	bne.n	8027090 <HAL_LTDC_EnableColorKeying+0x18>
 802708c:	2302      	movs	r3, #2
 802708e:	e026      	b.n	80270de <HAL_LTDC_EnableColorKeying+0x66>
 8027090:	687b      	ldr	r3, [r7, #4]
 8027092:	2201      	movs	r2, #1
 8027094:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	2202      	movs	r2, #2
 802709c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80270a0:	687b      	ldr	r3, [r7, #4]
 80270a2:	681b      	ldr	r3, [r3, #0]
 80270a4:	461a      	mov	r2, r3
 80270a6:	683b      	ldr	r3, [r7, #0]
 80270a8:	01db      	lsls	r3, r3, #7
 80270aa:	4413      	add	r3, r2
 80270ac:	3384      	adds	r3, #132	; 0x84
 80270ae:	681b      	ldr	r3, [r3, #0]
 80270b0:	687a      	ldr	r2, [r7, #4]
 80270b2:	6812      	ldr	r2, [r2, #0]
 80270b4:	4611      	mov	r1, r2
 80270b6:	683a      	ldr	r2, [r7, #0]
 80270b8:	01d2      	lsls	r2, r2, #7
 80270ba:	440a      	add	r2, r1
 80270bc:	3284      	adds	r2, #132	; 0x84
 80270be:	f043 0302 	orr.w	r3, r3, #2
 80270c2:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80270c4:	687b      	ldr	r3, [r7, #4]
 80270c6:	681b      	ldr	r3, [r3, #0]
 80270c8:	2201      	movs	r2, #1
 80270ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80270cc:	687b      	ldr	r3, [r7, #4]
 80270ce:	2201      	movs	r2, #1
 80270d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80270d4:	687b      	ldr	r3, [r7, #4]
 80270d6:	2200      	movs	r2, #0
 80270d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80270dc:	2300      	movs	r3, #0
}
 80270de:	4618      	mov	r0, r3
 80270e0:	370c      	adds	r7, #12
 80270e2:	46bd      	mov	sp, r7
 80270e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270e8:	4770      	bx	lr
	...

080270ec <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80270ec:	b480      	push	{r7}
 80270ee:	b083      	sub	sp, #12
 80270f0:	af00      	add	r7, sp, #0
 80270f2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80270fa:	2b01      	cmp	r3, #1
 80270fc:	d101      	bne.n	8027102 <HAL_LTDC_EnableDither+0x16>
 80270fe:	2302      	movs	r3, #2
 8027100:	e016      	b.n	8027130 <HAL_LTDC_EnableDither+0x44>
 8027102:	687b      	ldr	r3, [r7, #4]
 8027104:	2201      	movs	r2, #1
 8027106:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802710a:	687b      	ldr	r3, [r7, #4]
 802710c:	2202      	movs	r2, #2
 802710e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8027112:	4b0a      	ldr	r3, [pc, #40]	; (802713c <HAL_LTDC_EnableDither+0x50>)
 8027114:	699b      	ldr	r3, [r3, #24]
 8027116:	4a09      	ldr	r2, [pc, #36]	; (802713c <HAL_LTDC_EnableDither+0x50>)
 8027118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802711c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	2201      	movs	r2, #1
 8027122:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	2200      	movs	r2, #0
 802712a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 802712e:	2300      	movs	r3, #0
}
 8027130:	4618      	mov	r0, r3
 8027132:	370c      	adds	r7, #12
 8027134:	46bd      	mov	sp, r7
 8027136:	f85d 7b04 	ldr.w	r7, [sp], #4
 802713a:	4770      	bx	lr
 802713c:	40016800 	.word	0x40016800

08027140 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8027140:	b480      	push	{r7}
 8027142:	b089      	sub	sp, #36	; 0x24
 8027144:	af00      	add	r7, sp, #0
 8027146:	60f8      	str	r0, [r7, #12]
 8027148:	60b9      	str	r1, [r7, #8]
 802714a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 802714c:	68bb      	ldr	r3, [r7, #8]
 802714e:	685a      	ldr	r2, [r3, #4]
 8027150:	68fb      	ldr	r3, [r7, #12]
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	68db      	ldr	r3, [r3, #12]
 8027156:	0c1b      	lsrs	r3, r3, #16
 8027158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802715c:	4413      	add	r3, r2
 802715e:	041b      	lsls	r3, r3, #16
 8027160:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8027162:	68fb      	ldr	r3, [r7, #12]
 8027164:	681b      	ldr	r3, [r3, #0]
 8027166:	461a      	mov	r2, r3
 8027168:	687b      	ldr	r3, [r7, #4]
 802716a:	01db      	lsls	r3, r3, #7
 802716c:	4413      	add	r3, r2
 802716e:	3384      	adds	r3, #132	; 0x84
 8027170:	685b      	ldr	r3, [r3, #4]
 8027172:	68fa      	ldr	r2, [r7, #12]
 8027174:	6812      	ldr	r2, [r2, #0]
 8027176:	4611      	mov	r1, r2
 8027178:	687a      	ldr	r2, [r7, #4]
 802717a:	01d2      	lsls	r2, r2, #7
 802717c:	440a      	add	r2, r1
 802717e:	3284      	adds	r2, #132	; 0x84
 8027180:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8027184:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8027186:	68bb      	ldr	r3, [r7, #8]
 8027188:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 802718a:	68fb      	ldr	r3, [r7, #12]
 802718c:	681b      	ldr	r3, [r3, #0]
 802718e:	68db      	ldr	r3, [r3, #12]
 8027190:	0c1b      	lsrs	r3, r3, #16
 8027192:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8027196:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8027198:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 802719a:	68fb      	ldr	r3, [r7, #12]
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	4619      	mov	r1, r3
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	01db      	lsls	r3, r3, #7
 80271a4:	440b      	add	r3, r1
 80271a6:	3384      	adds	r3, #132	; 0x84
 80271a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80271aa:	69fb      	ldr	r3, [r7, #28]
 80271ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80271ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80271b0:	68bb      	ldr	r3, [r7, #8]
 80271b2:	68da      	ldr	r2, [r3, #12]
 80271b4:	68fb      	ldr	r3, [r7, #12]
 80271b6:	681b      	ldr	r3, [r3, #0]
 80271b8:	68db      	ldr	r3, [r3, #12]
 80271ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80271be:	4413      	add	r3, r2
 80271c0:	041b      	lsls	r3, r3, #16
 80271c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80271c4:	68fb      	ldr	r3, [r7, #12]
 80271c6:	681b      	ldr	r3, [r3, #0]
 80271c8:	461a      	mov	r2, r3
 80271ca:	687b      	ldr	r3, [r7, #4]
 80271cc:	01db      	lsls	r3, r3, #7
 80271ce:	4413      	add	r3, r2
 80271d0:	3384      	adds	r3, #132	; 0x84
 80271d2:	689b      	ldr	r3, [r3, #8]
 80271d4:	68fa      	ldr	r2, [r7, #12]
 80271d6:	6812      	ldr	r2, [r2, #0]
 80271d8:	4611      	mov	r1, r2
 80271da:	687a      	ldr	r2, [r7, #4]
 80271dc:	01d2      	lsls	r2, r2, #7
 80271de:	440a      	add	r2, r1
 80271e0:	3284      	adds	r2, #132	; 0x84
 80271e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80271e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80271e8:	68bb      	ldr	r3, [r7, #8]
 80271ea:	689a      	ldr	r2, [r3, #8]
 80271ec:	68fb      	ldr	r3, [r7, #12]
 80271ee:	681b      	ldr	r3, [r3, #0]
 80271f0:	68db      	ldr	r3, [r3, #12]
 80271f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80271f6:	4413      	add	r3, r2
 80271f8:	1c5a      	adds	r2, r3, #1
 80271fa:	68fb      	ldr	r3, [r7, #12]
 80271fc:	681b      	ldr	r3, [r3, #0]
 80271fe:	4619      	mov	r1, r3
 8027200:	687b      	ldr	r3, [r7, #4]
 8027202:	01db      	lsls	r3, r3, #7
 8027204:	440b      	add	r3, r1
 8027206:	3384      	adds	r3, #132	; 0x84
 8027208:	4619      	mov	r1, r3
 802720a:	69fb      	ldr	r3, [r7, #28]
 802720c:	4313      	orrs	r3, r2
 802720e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8027210:	68fb      	ldr	r3, [r7, #12]
 8027212:	681b      	ldr	r3, [r3, #0]
 8027214:	461a      	mov	r2, r3
 8027216:	687b      	ldr	r3, [r7, #4]
 8027218:	01db      	lsls	r3, r3, #7
 802721a:	4413      	add	r3, r2
 802721c:	3384      	adds	r3, #132	; 0x84
 802721e:	691b      	ldr	r3, [r3, #16]
 8027220:	68fa      	ldr	r2, [r7, #12]
 8027222:	6812      	ldr	r2, [r2, #0]
 8027224:	4611      	mov	r1, r2
 8027226:	687a      	ldr	r2, [r7, #4]
 8027228:	01d2      	lsls	r2, r2, #7
 802722a:	440a      	add	r2, r1
 802722c:	3284      	adds	r2, #132	; 0x84
 802722e:	f023 0307 	bic.w	r3, r3, #7
 8027232:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8027234:	68fb      	ldr	r3, [r7, #12]
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	461a      	mov	r2, r3
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	01db      	lsls	r3, r3, #7
 802723e:	4413      	add	r3, r2
 8027240:	3384      	adds	r3, #132	; 0x84
 8027242:	461a      	mov	r2, r3
 8027244:	68bb      	ldr	r3, [r7, #8]
 8027246:	691b      	ldr	r3, [r3, #16]
 8027248:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802724a:	68bb      	ldr	r3, [r7, #8]
 802724c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8027250:	021b      	lsls	r3, r3, #8
 8027252:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8027254:	68bb      	ldr	r3, [r7, #8]
 8027256:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802725a:	041b      	lsls	r3, r3, #16
 802725c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 802725e:	68bb      	ldr	r3, [r7, #8]
 8027260:	699b      	ldr	r3, [r3, #24]
 8027262:	061b      	lsls	r3, r3, #24
 8027264:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8027266:	68fb      	ldr	r3, [r7, #12]
 8027268:	681b      	ldr	r3, [r3, #0]
 802726a:	461a      	mov	r2, r3
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	01db      	lsls	r3, r3, #7
 8027270:	4413      	add	r3, r2
 8027272:	3384      	adds	r3, #132	; 0x84
 8027274:	699b      	ldr	r3, [r3, #24]
 8027276:	68fb      	ldr	r3, [r7, #12]
 8027278:	681b      	ldr	r3, [r3, #0]
 802727a:	461a      	mov	r2, r3
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	01db      	lsls	r3, r3, #7
 8027280:	4413      	add	r3, r2
 8027282:	3384      	adds	r3, #132	; 0x84
 8027284:	461a      	mov	r2, r3
 8027286:	2300      	movs	r3, #0
 8027288:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 802728a:	68bb      	ldr	r3, [r7, #8]
 802728c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8027290:	461a      	mov	r2, r3
 8027292:	69fb      	ldr	r3, [r7, #28]
 8027294:	431a      	orrs	r2, r3
 8027296:	69bb      	ldr	r3, [r7, #24]
 8027298:	431a      	orrs	r2, r3
 802729a:	68fb      	ldr	r3, [r7, #12]
 802729c:	681b      	ldr	r3, [r3, #0]
 802729e:	4619      	mov	r1, r3
 80272a0:	687b      	ldr	r3, [r7, #4]
 80272a2:	01db      	lsls	r3, r3, #7
 80272a4:	440b      	add	r3, r1
 80272a6:	3384      	adds	r3, #132	; 0x84
 80272a8:	4619      	mov	r1, r3
 80272aa:	697b      	ldr	r3, [r7, #20]
 80272ac:	4313      	orrs	r3, r2
 80272ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80272b0:	68fb      	ldr	r3, [r7, #12]
 80272b2:	681b      	ldr	r3, [r3, #0]
 80272b4:	461a      	mov	r2, r3
 80272b6:	687b      	ldr	r3, [r7, #4]
 80272b8:	01db      	lsls	r3, r3, #7
 80272ba:	4413      	add	r3, r2
 80272bc:	3384      	adds	r3, #132	; 0x84
 80272be:	695b      	ldr	r3, [r3, #20]
 80272c0:	68fa      	ldr	r2, [r7, #12]
 80272c2:	6812      	ldr	r2, [r2, #0]
 80272c4:	4611      	mov	r1, r2
 80272c6:	687a      	ldr	r2, [r7, #4]
 80272c8:	01d2      	lsls	r2, r2, #7
 80272ca:	440a      	add	r2, r1
 80272cc:	3284      	adds	r2, #132	; 0x84
 80272ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80272d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80272d4:	68fb      	ldr	r3, [r7, #12]
 80272d6:	681b      	ldr	r3, [r3, #0]
 80272d8:	461a      	mov	r2, r3
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	01db      	lsls	r3, r3, #7
 80272de:	4413      	add	r3, r2
 80272e0:	3384      	adds	r3, #132	; 0x84
 80272e2:	461a      	mov	r2, r3
 80272e4:	68bb      	ldr	r3, [r7, #8]
 80272e6:	695b      	ldr	r3, [r3, #20]
 80272e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80272ea:	68fb      	ldr	r3, [r7, #12]
 80272ec:	681b      	ldr	r3, [r3, #0]
 80272ee:	461a      	mov	r2, r3
 80272f0:	687b      	ldr	r3, [r7, #4]
 80272f2:	01db      	lsls	r3, r3, #7
 80272f4:	4413      	add	r3, r2
 80272f6:	3384      	adds	r3, #132	; 0x84
 80272f8:	69db      	ldr	r3, [r3, #28]
 80272fa:	68fa      	ldr	r2, [r7, #12]
 80272fc:	6812      	ldr	r2, [r2, #0]
 80272fe:	4611      	mov	r1, r2
 8027300:	687a      	ldr	r2, [r7, #4]
 8027302:	01d2      	lsls	r2, r2, #7
 8027304:	440a      	add	r2, r1
 8027306:	3284      	adds	r2, #132	; 0x84
 8027308:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802730c:	f023 0307 	bic.w	r3, r3, #7
 8027310:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8027312:	68bb      	ldr	r3, [r7, #8]
 8027314:	69da      	ldr	r2, [r3, #28]
 8027316:	68bb      	ldr	r3, [r7, #8]
 8027318:	6a1b      	ldr	r3, [r3, #32]
 802731a:	68f9      	ldr	r1, [r7, #12]
 802731c:	6809      	ldr	r1, [r1, #0]
 802731e:	4608      	mov	r0, r1
 8027320:	6879      	ldr	r1, [r7, #4]
 8027322:	01c9      	lsls	r1, r1, #7
 8027324:	4401      	add	r1, r0
 8027326:	3184      	adds	r1, #132	; 0x84
 8027328:	4313      	orrs	r3, r2
 802732a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 802732c:	68fb      	ldr	r3, [r7, #12]
 802732e:	681b      	ldr	r3, [r3, #0]
 8027330:	461a      	mov	r2, r3
 8027332:	687b      	ldr	r3, [r7, #4]
 8027334:	01db      	lsls	r3, r3, #7
 8027336:	4413      	add	r3, r2
 8027338:	3384      	adds	r3, #132	; 0x84
 802733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802733c:	68fb      	ldr	r3, [r7, #12]
 802733e:	681b      	ldr	r3, [r3, #0]
 8027340:	461a      	mov	r2, r3
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	01db      	lsls	r3, r3, #7
 8027346:	4413      	add	r3, r2
 8027348:	3384      	adds	r3, #132	; 0x84
 802734a:	461a      	mov	r2, r3
 802734c:	2300      	movs	r3, #0
 802734e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8027350:	68fb      	ldr	r3, [r7, #12]
 8027352:	681b      	ldr	r3, [r3, #0]
 8027354:	461a      	mov	r2, r3
 8027356:	687b      	ldr	r3, [r7, #4]
 8027358:	01db      	lsls	r3, r3, #7
 802735a:	4413      	add	r3, r2
 802735c:	3384      	adds	r3, #132	; 0x84
 802735e:	461a      	mov	r2, r3
 8027360:	68bb      	ldr	r3, [r7, #8]
 8027362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027364:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8027366:	68bb      	ldr	r3, [r7, #8]
 8027368:	691b      	ldr	r3, [r3, #16]
 802736a:	2b00      	cmp	r3, #0
 802736c:	d102      	bne.n	8027374 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 802736e:	2304      	movs	r3, #4
 8027370:	61fb      	str	r3, [r7, #28]
 8027372:	e01b      	b.n	80273ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8027374:	68bb      	ldr	r3, [r7, #8]
 8027376:	691b      	ldr	r3, [r3, #16]
 8027378:	2b01      	cmp	r3, #1
 802737a:	d102      	bne.n	8027382 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 802737c:	2303      	movs	r3, #3
 802737e:	61fb      	str	r3, [r7, #28]
 8027380:	e014      	b.n	80273ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8027382:	68bb      	ldr	r3, [r7, #8]
 8027384:	691b      	ldr	r3, [r3, #16]
 8027386:	2b04      	cmp	r3, #4
 8027388:	d00b      	beq.n	80273a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 802738a:	68bb      	ldr	r3, [r7, #8]
 802738c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 802738e:	2b02      	cmp	r3, #2
 8027390:	d007      	beq.n	80273a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8027392:	68bb      	ldr	r3, [r7, #8]
 8027394:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8027396:	2b03      	cmp	r3, #3
 8027398:	d003      	beq.n	80273a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 802739a:	68bb      	ldr	r3, [r7, #8]
 802739c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 802739e:	2b07      	cmp	r3, #7
 80273a0:	d102      	bne.n	80273a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80273a2:	2302      	movs	r3, #2
 80273a4:	61fb      	str	r3, [r7, #28]
 80273a6:	e001      	b.n	80273ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80273a8:	2301      	movs	r3, #1
 80273aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80273ac:	68fb      	ldr	r3, [r7, #12]
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	461a      	mov	r2, r3
 80273b2:	687b      	ldr	r3, [r7, #4]
 80273b4:	01db      	lsls	r3, r3, #7
 80273b6:	4413      	add	r3, r2
 80273b8:	3384      	adds	r3, #132	; 0x84
 80273ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80273bc:	68fa      	ldr	r2, [r7, #12]
 80273be:	6812      	ldr	r2, [r2, #0]
 80273c0:	4611      	mov	r1, r2
 80273c2:	687a      	ldr	r2, [r7, #4]
 80273c4:	01d2      	lsls	r2, r2, #7
 80273c6:	440a      	add	r2, r1
 80273c8:	3284      	adds	r2, #132	; 0x84
 80273ca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80273ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80273d0:	68bb      	ldr	r3, [r7, #8]
 80273d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80273d4:	69fa      	ldr	r2, [r7, #28]
 80273d6:	fb02 f303 	mul.w	r3, r2, r3
 80273da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80273dc:	68bb      	ldr	r3, [r7, #8]
 80273de:	6859      	ldr	r1, [r3, #4]
 80273e0:	68bb      	ldr	r3, [r7, #8]
 80273e2:	681b      	ldr	r3, [r3, #0]
 80273e4:	1acb      	subs	r3, r1, r3
 80273e6:	69f9      	ldr	r1, [r7, #28]
 80273e8:	fb01 f303 	mul.w	r3, r1, r3
 80273ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80273ee:	68f9      	ldr	r1, [r7, #12]
 80273f0:	6809      	ldr	r1, [r1, #0]
 80273f2:	4608      	mov	r0, r1
 80273f4:	6879      	ldr	r1, [r7, #4]
 80273f6:	01c9      	lsls	r1, r1, #7
 80273f8:	4401      	add	r1, r0
 80273fa:	3184      	adds	r1, #132	; 0x84
 80273fc:	4313      	orrs	r3, r2
 80273fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8027400:	68fb      	ldr	r3, [r7, #12]
 8027402:	681b      	ldr	r3, [r3, #0]
 8027404:	461a      	mov	r2, r3
 8027406:	687b      	ldr	r3, [r7, #4]
 8027408:	01db      	lsls	r3, r3, #7
 802740a:	4413      	add	r3, r2
 802740c:	3384      	adds	r3, #132	; 0x84
 802740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027410:	68fa      	ldr	r2, [r7, #12]
 8027412:	6812      	ldr	r2, [r2, #0]
 8027414:	4611      	mov	r1, r2
 8027416:	687a      	ldr	r2, [r7, #4]
 8027418:	01d2      	lsls	r2, r2, #7
 802741a:	440a      	add	r2, r1
 802741c:	3284      	adds	r2, #132	; 0x84
 802741e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027422:	f023 0307 	bic.w	r3, r3, #7
 8027426:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8027428:	68fb      	ldr	r3, [r7, #12]
 802742a:	681b      	ldr	r3, [r3, #0]
 802742c:	461a      	mov	r2, r3
 802742e:	687b      	ldr	r3, [r7, #4]
 8027430:	01db      	lsls	r3, r3, #7
 8027432:	4413      	add	r3, r2
 8027434:	3384      	adds	r3, #132	; 0x84
 8027436:	461a      	mov	r2, r3
 8027438:	68bb      	ldr	r3, [r7, #8]
 802743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802743c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 802743e:	68fb      	ldr	r3, [r7, #12]
 8027440:	681b      	ldr	r3, [r3, #0]
 8027442:	461a      	mov	r2, r3
 8027444:	687b      	ldr	r3, [r7, #4]
 8027446:	01db      	lsls	r3, r3, #7
 8027448:	4413      	add	r3, r2
 802744a:	3384      	adds	r3, #132	; 0x84
 802744c:	681b      	ldr	r3, [r3, #0]
 802744e:	68fa      	ldr	r2, [r7, #12]
 8027450:	6812      	ldr	r2, [r2, #0]
 8027452:	4611      	mov	r1, r2
 8027454:	687a      	ldr	r2, [r7, #4]
 8027456:	01d2      	lsls	r2, r2, #7
 8027458:	440a      	add	r2, r1
 802745a:	3284      	adds	r2, #132	; 0x84
 802745c:	f043 0301 	orr.w	r3, r3, #1
 8027460:	6013      	str	r3, [r2, #0]
}
 8027462:	bf00      	nop
 8027464:	3724      	adds	r7, #36	; 0x24
 8027466:	46bd      	mov	sp, r7
 8027468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802746c:	4770      	bx	lr
	...

08027470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8027470:	b580      	push	{r7, lr}
 8027472:	b086      	sub	sp, #24
 8027474:	af00      	add	r7, sp, #0
 8027476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8027478:	687b      	ldr	r3, [r7, #4]
 802747a:	2b00      	cmp	r3, #0
 802747c:	d101      	bne.n	8027482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802747e:	2301      	movs	r3, #1
 8027480:	e267      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8027482:	687b      	ldr	r3, [r7, #4]
 8027484:	681b      	ldr	r3, [r3, #0]
 8027486:	f003 0301 	and.w	r3, r3, #1
 802748a:	2b00      	cmp	r3, #0
 802748c:	d075      	beq.n	802757a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802748e:	4b88      	ldr	r3, [pc, #544]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027490:	689b      	ldr	r3, [r3, #8]
 8027492:	f003 030c 	and.w	r3, r3, #12
 8027496:	2b04      	cmp	r3, #4
 8027498:	d00c      	beq.n	80274b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802749a:	4b85      	ldr	r3, [pc, #532]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802749c:	689b      	ldr	r3, [r3, #8]
 802749e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80274a2:	2b08      	cmp	r3, #8
 80274a4:	d112      	bne.n	80274cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80274a6:	4b82      	ldr	r3, [pc, #520]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274a8:	685b      	ldr	r3, [r3, #4]
 80274aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80274ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80274b2:	d10b      	bne.n	80274cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80274b4:	4b7e      	ldr	r3, [pc, #504]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274b6:	681b      	ldr	r3, [r3, #0]
 80274b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80274bc:	2b00      	cmp	r3, #0
 80274be:	d05b      	beq.n	8027578 <HAL_RCC_OscConfig+0x108>
 80274c0:	687b      	ldr	r3, [r7, #4]
 80274c2:	685b      	ldr	r3, [r3, #4]
 80274c4:	2b00      	cmp	r3, #0
 80274c6:	d157      	bne.n	8027578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80274c8:	2301      	movs	r3, #1
 80274ca:	e242      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80274cc:	687b      	ldr	r3, [r7, #4]
 80274ce:	685b      	ldr	r3, [r3, #4]
 80274d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80274d4:	d106      	bne.n	80274e4 <HAL_RCC_OscConfig+0x74>
 80274d6:	4b76      	ldr	r3, [pc, #472]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274d8:	681b      	ldr	r3, [r3, #0]
 80274da:	4a75      	ldr	r2, [pc, #468]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80274e0:	6013      	str	r3, [r2, #0]
 80274e2:	e01d      	b.n	8027520 <HAL_RCC_OscConfig+0xb0>
 80274e4:	687b      	ldr	r3, [r7, #4]
 80274e6:	685b      	ldr	r3, [r3, #4]
 80274e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80274ec:	d10c      	bne.n	8027508 <HAL_RCC_OscConfig+0x98>
 80274ee:	4b70      	ldr	r3, [pc, #448]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274f0:	681b      	ldr	r3, [r3, #0]
 80274f2:	4a6f      	ldr	r2, [pc, #444]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80274f8:	6013      	str	r3, [r2, #0]
 80274fa:	4b6d      	ldr	r3, [pc, #436]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80274fc:	681b      	ldr	r3, [r3, #0]
 80274fe:	4a6c      	ldr	r2, [pc, #432]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027504:	6013      	str	r3, [r2, #0]
 8027506:	e00b      	b.n	8027520 <HAL_RCC_OscConfig+0xb0>
 8027508:	4b69      	ldr	r3, [pc, #420]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802750a:	681b      	ldr	r3, [r3, #0]
 802750c:	4a68      	ldr	r2, [pc, #416]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802750e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027512:	6013      	str	r3, [r2, #0]
 8027514:	4b66      	ldr	r3, [pc, #408]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027516:	681b      	ldr	r3, [r3, #0]
 8027518:	4a65      	ldr	r2, [pc, #404]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802751a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802751e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027520:	687b      	ldr	r3, [r7, #4]
 8027522:	685b      	ldr	r3, [r3, #4]
 8027524:	2b00      	cmp	r3, #0
 8027526:	d013      	beq.n	8027550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027528:	f7fc f8a2 	bl	8023670 <HAL_GetTick>
 802752c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802752e:	e008      	b.n	8027542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027530:	f7fc f89e 	bl	8023670 <HAL_GetTick>
 8027534:	4602      	mov	r2, r0
 8027536:	693b      	ldr	r3, [r7, #16]
 8027538:	1ad3      	subs	r3, r2, r3
 802753a:	2b64      	cmp	r3, #100	; 0x64
 802753c:	d901      	bls.n	8027542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802753e:	2303      	movs	r3, #3
 8027540:	e207      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027542:	4b5b      	ldr	r3, [pc, #364]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027544:	681b      	ldr	r3, [r3, #0]
 8027546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802754a:	2b00      	cmp	r3, #0
 802754c:	d0f0      	beq.n	8027530 <HAL_RCC_OscConfig+0xc0>
 802754e:	e014      	b.n	802757a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027550:	f7fc f88e 	bl	8023670 <HAL_GetTick>
 8027554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8027556:	e008      	b.n	802756a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027558:	f7fc f88a 	bl	8023670 <HAL_GetTick>
 802755c:	4602      	mov	r2, r0
 802755e:	693b      	ldr	r3, [r7, #16]
 8027560:	1ad3      	subs	r3, r2, r3
 8027562:	2b64      	cmp	r3, #100	; 0x64
 8027564:	d901      	bls.n	802756a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8027566:	2303      	movs	r3, #3
 8027568:	e1f3      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802756a:	4b51      	ldr	r3, [pc, #324]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802756c:	681b      	ldr	r3, [r3, #0]
 802756e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027572:	2b00      	cmp	r3, #0
 8027574:	d1f0      	bne.n	8027558 <HAL_RCC_OscConfig+0xe8>
 8027576:	e000      	b.n	802757a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8027578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802757a:	687b      	ldr	r3, [r7, #4]
 802757c:	681b      	ldr	r3, [r3, #0]
 802757e:	f003 0302 	and.w	r3, r3, #2
 8027582:	2b00      	cmp	r3, #0
 8027584:	d063      	beq.n	802764e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8027586:	4b4a      	ldr	r3, [pc, #296]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027588:	689b      	ldr	r3, [r3, #8]
 802758a:	f003 030c 	and.w	r3, r3, #12
 802758e:	2b00      	cmp	r3, #0
 8027590:	d00b      	beq.n	80275aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8027592:	4b47      	ldr	r3, [pc, #284]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027594:	689b      	ldr	r3, [r3, #8]
 8027596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802759a:	2b08      	cmp	r3, #8
 802759c:	d11c      	bne.n	80275d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802759e:	4b44      	ldr	r3, [pc, #272]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80275a0:	685b      	ldr	r3, [r3, #4]
 80275a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80275a6:	2b00      	cmp	r3, #0
 80275a8:	d116      	bne.n	80275d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275aa:	4b41      	ldr	r3, [pc, #260]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80275ac:	681b      	ldr	r3, [r3, #0]
 80275ae:	f003 0302 	and.w	r3, r3, #2
 80275b2:	2b00      	cmp	r3, #0
 80275b4:	d005      	beq.n	80275c2 <HAL_RCC_OscConfig+0x152>
 80275b6:	687b      	ldr	r3, [r7, #4]
 80275b8:	68db      	ldr	r3, [r3, #12]
 80275ba:	2b01      	cmp	r3, #1
 80275bc:	d001      	beq.n	80275c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80275be:	2301      	movs	r3, #1
 80275c0:	e1c7      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80275c2:	4b3b      	ldr	r3, [pc, #236]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80275c4:	681b      	ldr	r3, [r3, #0]
 80275c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80275ca:	687b      	ldr	r3, [r7, #4]
 80275cc:	691b      	ldr	r3, [r3, #16]
 80275ce:	00db      	lsls	r3, r3, #3
 80275d0:	4937      	ldr	r1, [pc, #220]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 80275d2:	4313      	orrs	r3, r2
 80275d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80275d6:	e03a      	b.n	802764e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80275d8:	687b      	ldr	r3, [r7, #4]
 80275da:	68db      	ldr	r3, [r3, #12]
 80275dc:	2b00      	cmp	r3, #0
 80275de:	d020      	beq.n	8027622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80275e0:	4b34      	ldr	r3, [pc, #208]	; (80276b4 <HAL_RCC_OscConfig+0x244>)
 80275e2:	2201      	movs	r2, #1
 80275e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80275e6:	f7fc f843 	bl	8023670 <HAL_GetTick>
 80275ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80275ec:	e008      	b.n	8027600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80275ee:	f7fc f83f 	bl	8023670 <HAL_GetTick>
 80275f2:	4602      	mov	r2, r0
 80275f4:	693b      	ldr	r3, [r7, #16]
 80275f6:	1ad3      	subs	r3, r2, r3
 80275f8:	2b02      	cmp	r3, #2
 80275fa:	d901      	bls.n	8027600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80275fc:	2303      	movs	r3, #3
 80275fe:	e1a8      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027600:	4b2b      	ldr	r3, [pc, #172]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027602:	681b      	ldr	r3, [r3, #0]
 8027604:	f003 0302 	and.w	r3, r3, #2
 8027608:	2b00      	cmp	r3, #0
 802760a:	d0f0      	beq.n	80275ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802760c:	4b28      	ldr	r3, [pc, #160]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802760e:	681b      	ldr	r3, [r3, #0]
 8027610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027614:	687b      	ldr	r3, [r7, #4]
 8027616:	691b      	ldr	r3, [r3, #16]
 8027618:	00db      	lsls	r3, r3, #3
 802761a:	4925      	ldr	r1, [pc, #148]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 802761c:	4313      	orrs	r3, r2
 802761e:	600b      	str	r3, [r1, #0]
 8027620:	e015      	b.n	802764e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8027622:	4b24      	ldr	r3, [pc, #144]	; (80276b4 <HAL_RCC_OscConfig+0x244>)
 8027624:	2200      	movs	r2, #0
 8027626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8027628:	f7fc f822 	bl	8023670 <HAL_GetTick>
 802762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802762e:	e008      	b.n	8027642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027630:	f7fc f81e 	bl	8023670 <HAL_GetTick>
 8027634:	4602      	mov	r2, r0
 8027636:	693b      	ldr	r3, [r7, #16]
 8027638:	1ad3      	subs	r3, r2, r3
 802763a:	2b02      	cmp	r3, #2
 802763c:	d901      	bls.n	8027642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802763e:	2303      	movs	r3, #3
 8027640:	e187      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027642:	4b1b      	ldr	r3, [pc, #108]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027644:	681b      	ldr	r3, [r3, #0]
 8027646:	f003 0302 	and.w	r3, r3, #2
 802764a:	2b00      	cmp	r3, #0
 802764c:	d1f0      	bne.n	8027630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802764e:	687b      	ldr	r3, [r7, #4]
 8027650:	681b      	ldr	r3, [r3, #0]
 8027652:	f003 0308 	and.w	r3, r3, #8
 8027656:	2b00      	cmp	r3, #0
 8027658:	d036      	beq.n	80276c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802765a:	687b      	ldr	r3, [r7, #4]
 802765c:	695b      	ldr	r3, [r3, #20]
 802765e:	2b00      	cmp	r3, #0
 8027660:	d016      	beq.n	8027690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027662:	4b15      	ldr	r3, [pc, #84]	; (80276b8 <HAL_RCC_OscConfig+0x248>)
 8027664:	2201      	movs	r2, #1
 8027666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8027668:	f7fc f802 	bl	8023670 <HAL_GetTick>
 802766c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802766e:	e008      	b.n	8027682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8027670:	f7fb fffe 	bl	8023670 <HAL_GetTick>
 8027674:	4602      	mov	r2, r0
 8027676:	693b      	ldr	r3, [r7, #16]
 8027678:	1ad3      	subs	r3, r2, r3
 802767a:	2b02      	cmp	r3, #2
 802767c:	d901      	bls.n	8027682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802767e:	2303      	movs	r3, #3
 8027680:	e167      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8027682:	4b0b      	ldr	r3, [pc, #44]	; (80276b0 <HAL_RCC_OscConfig+0x240>)
 8027684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027686:	f003 0302 	and.w	r3, r3, #2
 802768a:	2b00      	cmp	r3, #0
 802768c:	d0f0      	beq.n	8027670 <HAL_RCC_OscConfig+0x200>
 802768e:	e01b      	b.n	80276c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8027690:	4b09      	ldr	r3, [pc, #36]	; (80276b8 <HAL_RCC_OscConfig+0x248>)
 8027692:	2200      	movs	r2, #0
 8027694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8027696:	f7fb ffeb 	bl	8023670 <HAL_GetTick>
 802769a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 802769c:	e00e      	b.n	80276bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802769e:	f7fb ffe7 	bl	8023670 <HAL_GetTick>
 80276a2:	4602      	mov	r2, r0
 80276a4:	693b      	ldr	r3, [r7, #16]
 80276a6:	1ad3      	subs	r3, r2, r3
 80276a8:	2b02      	cmp	r3, #2
 80276aa:	d907      	bls.n	80276bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80276ac:	2303      	movs	r3, #3
 80276ae:	e150      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
 80276b0:	40023800 	.word	0x40023800
 80276b4:	42470000 	.word	0x42470000
 80276b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80276bc:	4b88      	ldr	r3, [pc, #544]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80276be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80276c0:	f003 0302 	and.w	r3, r3, #2
 80276c4:	2b00      	cmp	r3, #0
 80276c6:	d1ea      	bne.n	802769e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80276c8:	687b      	ldr	r3, [r7, #4]
 80276ca:	681b      	ldr	r3, [r3, #0]
 80276cc:	f003 0304 	and.w	r3, r3, #4
 80276d0:	2b00      	cmp	r3, #0
 80276d2:	f000 8097 	beq.w	8027804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80276d6:	2300      	movs	r3, #0
 80276d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80276da:	4b81      	ldr	r3, [pc, #516]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80276dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80276e2:	2b00      	cmp	r3, #0
 80276e4:	d10f      	bne.n	8027706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80276e6:	2300      	movs	r3, #0
 80276e8:	60bb      	str	r3, [r7, #8]
 80276ea:	4b7d      	ldr	r3, [pc, #500]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80276ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276ee:	4a7c      	ldr	r2, [pc, #496]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80276f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80276f4:	6413      	str	r3, [r2, #64]	; 0x40
 80276f6:	4b7a      	ldr	r3, [pc, #488]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80276f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80276fe:	60bb      	str	r3, [r7, #8]
 8027700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027702:	2301      	movs	r3, #1
 8027704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027706:	4b77      	ldr	r3, [pc, #476]	; (80278e4 <HAL_RCC_OscConfig+0x474>)
 8027708:	681b      	ldr	r3, [r3, #0]
 802770a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802770e:	2b00      	cmp	r3, #0
 8027710:	d118      	bne.n	8027744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8027712:	4b74      	ldr	r3, [pc, #464]	; (80278e4 <HAL_RCC_OscConfig+0x474>)
 8027714:	681b      	ldr	r3, [r3, #0]
 8027716:	4a73      	ldr	r2, [pc, #460]	; (80278e4 <HAL_RCC_OscConfig+0x474>)
 8027718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802771c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802771e:	f7fb ffa7 	bl	8023670 <HAL_GetTick>
 8027722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027724:	e008      	b.n	8027738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8027726:	f7fb ffa3 	bl	8023670 <HAL_GetTick>
 802772a:	4602      	mov	r2, r0
 802772c:	693b      	ldr	r3, [r7, #16]
 802772e:	1ad3      	subs	r3, r2, r3
 8027730:	2b02      	cmp	r3, #2
 8027732:	d901      	bls.n	8027738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8027734:	2303      	movs	r3, #3
 8027736:	e10c      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027738:	4b6a      	ldr	r3, [pc, #424]	; (80278e4 <HAL_RCC_OscConfig+0x474>)
 802773a:	681b      	ldr	r3, [r3, #0]
 802773c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027740:	2b00      	cmp	r3, #0
 8027742:	d0f0      	beq.n	8027726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027744:	687b      	ldr	r3, [r7, #4]
 8027746:	689b      	ldr	r3, [r3, #8]
 8027748:	2b01      	cmp	r3, #1
 802774a:	d106      	bne.n	802775a <HAL_RCC_OscConfig+0x2ea>
 802774c:	4b64      	ldr	r3, [pc, #400]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 802774e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027750:	4a63      	ldr	r2, [pc, #396]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027752:	f043 0301 	orr.w	r3, r3, #1
 8027756:	6713      	str	r3, [r2, #112]	; 0x70
 8027758:	e01c      	b.n	8027794 <HAL_RCC_OscConfig+0x324>
 802775a:	687b      	ldr	r3, [r7, #4]
 802775c:	689b      	ldr	r3, [r3, #8]
 802775e:	2b05      	cmp	r3, #5
 8027760:	d10c      	bne.n	802777c <HAL_RCC_OscConfig+0x30c>
 8027762:	4b5f      	ldr	r3, [pc, #380]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027766:	4a5e      	ldr	r2, [pc, #376]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027768:	f043 0304 	orr.w	r3, r3, #4
 802776c:	6713      	str	r3, [r2, #112]	; 0x70
 802776e:	4b5c      	ldr	r3, [pc, #368]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027772:	4a5b      	ldr	r2, [pc, #364]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027774:	f043 0301 	orr.w	r3, r3, #1
 8027778:	6713      	str	r3, [r2, #112]	; 0x70
 802777a:	e00b      	b.n	8027794 <HAL_RCC_OscConfig+0x324>
 802777c:	4b58      	ldr	r3, [pc, #352]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 802777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027780:	4a57      	ldr	r2, [pc, #348]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027782:	f023 0301 	bic.w	r3, r3, #1
 8027786:	6713      	str	r3, [r2, #112]	; 0x70
 8027788:	4b55      	ldr	r3, [pc, #340]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 802778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802778c:	4a54      	ldr	r2, [pc, #336]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 802778e:	f023 0304 	bic.w	r3, r3, #4
 8027792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	689b      	ldr	r3, [r3, #8]
 8027798:	2b00      	cmp	r3, #0
 802779a:	d015      	beq.n	80277c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802779c:	f7fb ff68 	bl	8023670 <HAL_GetTick>
 80277a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277a2:	e00a      	b.n	80277ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277a4:	f7fb ff64 	bl	8023670 <HAL_GetTick>
 80277a8:	4602      	mov	r2, r0
 80277aa:	693b      	ldr	r3, [r7, #16]
 80277ac:	1ad3      	subs	r3, r2, r3
 80277ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80277b2:	4293      	cmp	r3, r2
 80277b4:	d901      	bls.n	80277ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80277b6:	2303      	movs	r3, #3
 80277b8:	e0cb      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80277ba:	4b49      	ldr	r3, [pc, #292]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80277bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277be:	f003 0302 	and.w	r3, r3, #2
 80277c2:	2b00      	cmp	r3, #0
 80277c4:	d0ee      	beq.n	80277a4 <HAL_RCC_OscConfig+0x334>
 80277c6:	e014      	b.n	80277f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80277c8:	f7fb ff52 	bl	8023670 <HAL_GetTick>
 80277cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80277ce:	e00a      	b.n	80277e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80277d0:	f7fb ff4e 	bl	8023670 <HAL_GetTick>
 80277d4:	4602      	mov	r2, r0
 80277d6:	693b      	ldr	r3, [r7, #16]
 80277d8:	1ad3      	subs	r3, r2, r3
 80277da:	f241 3288 	movw	r2, #5000	; 0x1388
 80277de:	4293      	cmp	r3, r2
 80277e0:	d901      	bls.n	80277e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80277e2:	2303      	movs	r3, #3
 80277e4:	e0b5      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80277e6:	4b3e      	ldr	r3, [pc, #248]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80277e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80277ea:	f003 0302 	and.w	r3, r3, #2
 80277ee:	2b00      	cmp	r3, #0
 80277f0:	d1ee      	bne.n	80277d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80277f2:	7dfb      	ldrb	r3, [r7, #23]
 80277f4:	2b01      	cmp	r3, #1
 80277f6:	d105      	bne.n	8027804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80277f8:	4b39      	ldr	r3, [pc, #228]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80277fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80277fc:	4a38      	ldr	r2, [pc, #224]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80277fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027804:	687b      	ldr	r3, [r7, #4]
 8027806:	699b      	ldr	r3, [r3, #24]
 8027808:	2b00      	cmp	r3, #0
 802780a:	f000 80a1 	beq.w	8027950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802780e:	4b34      	ldr	r3, [pc, #208]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027810:	689b      	ldr	r3, [r3, #8]
 8027812:	f003 030c 	and.w	r3, r3, #12
 8027816:	2b08      	cmp	r3, #8
 8027818:	d05c      	beq.n	80278d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802781a:	687b      	ldr	r3, [r7, #4]
 802781c:	699b      	ldr	r3, [r3, #24]
 802781e:	2b02      	cmp	r3, #2
 8027820:	d141      	bne.n	80278a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027822:	4b31      	ldr	r3, [pc, #196]	; (80278e8 <HAL_RCC_OscConfig+0x478>)
 8027824:	2200      	movs	r2, #0
 8027826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027828:	f7fb ff22 	bl	8023670 <HAL_GetTick>
 802782c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802782e:	e008      	b.n	8027842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027830:	f7fb ff1e 	bl	8023670 <HAL_GetTick>
 8027834:	4602      	mov	r2, r0
 8027836:	693b      	ldr	r3, [r7, #16]
 8027838:	1ad3      	subs	r3, r2, r3
 802783a:	2b02      	cmp	r3, #2
 802783c:	d901      	bls.n	8027842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 802783e:	2303      	movs	r3, #3
 8027840:	e087      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027842:	4b27      	ldr	r3, [pc, #156]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027844:	681b      	ldr	r3, [r3, #0]
 8027846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802784a:	2b00      	cmp	r3, #0
 802784c:	d1f0      	bne.n	8027830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802784e:	687b      	ldr	r3, [r7, #4]
 8027850:	69da      	ldr	r2, [r3, #28]
 8027852:	687b      	ldr	r3, [r7, #4]
 8027854:	6a1b      	ldr	r3, [r3, #32]
 8027856:	431a      	orrs	r2, r3
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802785c:	019b      	lsls	r3, r3, #6
 802785e:	431a      	orrs	r2, r3
 8027860:	687b      	ldr	r3, [r7, #4]
 8027862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027864:	085b      	lsrs	r3, r3, #1
 8027866:	3b01      	subs	r3, #1
 8027868:	041b      	lsls	r3, r3, #16
 802786a:	431a      	orrs	r2, r3
 802786c:	687b      	ldr	r3, [r7, #4]
 802786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027870:	061b      	lsls	r3, r3, #24
 8027872:	491b      	ldr	r1, [pc, #108]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 8027874:	4313      	orrs	r3, r2
 8027876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8027878:	4b1b      	ldr	r3, [pc, #108]	; (80278e8 <HAL_RCC_OscConfig+0x478>)
 802787a:	2201      	movs	r2, #1
 802787c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802787e:	f7fb fef7 	bl	8023670 <HAL_GetTick>
 8027882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027884:	e008      	b.n	8027898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027886:	f7fb fef3 	bl	8023670 <HAL_GetTick>
 802788a:	4602      	mov	r2, r0
 802788c:	693b      	ldr	r3, [r7, #16]
 802788e:	1ad3      	subs	r3, r2, r3
 8027890:	2b02      	cmp	r3, #2
 8027892:	d901      	bls.n	8027898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8027894:	2303      	movs	r3, #3
 8027896:	e05c      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027898:	4b11      	ldr	r3, [pc, #68]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 802789a:	681b      	ldr	r3, [r3, #0]
 802789c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278a0:	2b00      	cmp	r3, #0
 80278a2:	d0f0      	beq.n	8027886 <HAL_RCC_OscConfig+0x416>
 80278a4:	e054      	b.n	8027950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80278a6:	4b10      	ldr	r3, [pc, #64]	; (80278e8 <HAL_RCC_OscConfig+0x478>)
 80278a8:	2200      	movs	r2, #0
 80278aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80278ac:	f7fb fee0 	bl	8023670 <HAL_GetTick>
 80278b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278b2:	e008      	b.n	80278c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80278b4:	f7fb fedc 	bl	8023670 <HAL_GetTick>
 80278b8:	4602      	mov	r2, r0
 80278ba:	693b      	ldr	r3, [r7, #16]
 80278bc:	1ad3      	subs	r3, r2, r3
 80278be:	2b02      	cmp	r3, #2
 80278c0:	d901      	bls.n	80278c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80278c2:	2303      	movs	r3, #3
 80278c4:	e045      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80278c6:	4b06      	ldr	r3, [pc, #24]	; (80278e0 <HAL_RCC_OscConfig+0x470>)
 80278c8:	681b      	ldr	r3, [r3, #0]
 80278ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	d1f0      	bne.n	80278b4 <HAL_RCC_OscConfig+0x444>
 80278d2:	e03d      	b.n	8027950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80278d4:	687b      	ldr	r3, [r7, #4]
 80278d6:	699b      	ldr	r3, [r3, #24]
 80278d8:	2b01      	cmp	r3, #1
 80278da:	d107      	bne.n	80278ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80278dc:	2301      	movs	r3, #1
 80278de:	e038      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
 80278e0:	40023800 	.word	0x40023800
 80278e4:	40007000 	.word	0x40007000
 80278e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80278ec:	4b1b      	ldr	r3, [pc, #108]	; (802795c <HAL_RCC_OscConfig+0x4ec>)
 80278ee:	685b      	ldr	r3, [r3, #4]
 80278f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80278f2:	687b      	ldr	r3, [r7, #4]
 80278f4:	699b      	ldr	r3, [r3, #24]
 80278f6:	2b01      	cmp	r3, #1
 80278f8:	d028      	beq.n	802794c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80278fa:	68fb      	ldr	r3, [r7, #12]
 80278fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027900:	687b      	ldr	r3, [r7, #4]
 8027902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027904:	429a      	cmp	r2, r3
 8027906:	d121      	bne.n	802794c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027908:	68fb      	ldr	r3, [r7, #12]
 802790a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802790e:	687b      	ldr	r3, [r7, #4]
 8027910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027912:	429a      	cmp	r2, r3
 8027914:	d11a      	bne.n	802794c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027916:	68fa      	ldr	r2, [r7, #12]
 8027918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802791c:	4013      	ands	r3, r2
 802791e:	687a      	ldr	r2, [r7, #4]
 8027920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027924:	4293      	cmp	r3, r2
 8027926:	d111      	bne.n	802794c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027928:	68fb      	ldr	r3, [r7, #12]
 802792a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802792e:	687b      	ldr	r3, [r7, #4]
 8027930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027932:	085b      	lsrs	r3, r3, #1
 8027934:	3b01      	subs	r3, #1
 8027936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8027938:	429a      	cmp	r2, r3
 802793a:	d107      	bne.n	802794c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 802793c:	68fb      	ldr	r3, [r7, #12]
 802793e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8027942:	687b      	ldr	r3, [r7, #4]
 8027944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8027948:	429a      	cmp	r2, r3
 802794a:	d001      	beq.n	8027950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 802794c:	2301      	movs	r3, #1
 802794e:	e000      	b.n	8027952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8027950:	2300      	movs	r3, #0
}
 8027952:	4618      	mov	r0, r3
 8027954:	3718      	adds	r7, #24
 8027956:	46bd      	mov	sp, r7
 8027958:	bd80      	pop	{r7, pc}
 802795a:	bf00      	nop
 802795c:	40023800 	.word	0x40023800

08027960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027960:	b580      	push	{r7, lr}
 8027962:	b084      	sub	sp, #16
 8027964:	af00      	add	r7, sp, #0
 8027966:	6078      	str	r0, [r7, #4]
 8027968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802796a:	687b      	ldr	r3, [r7, #4]
 802796c:	2b00      	cmp	r3, #0
 802796e:	d101      	bne.n	8027974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8027970:	2301      	movs	r3, #1
 8027972:	e0cc      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8027974:	4b68      	ldr	r3, [pc, #416]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 8027976:	681b      	ldr	r3, [r3, #0]
 8027978:	f003 030f 	and.w	r3, r3, #15
 802797c:	683a      	ldr	r2, [r7, #0]
 802797e:	429a      	cmp	r2, r3
 8027980:	d90c      	bls.n	802799c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027982:	4b65      	ldr	r3, [pc, #404]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 8027984:	683a      	ldr	r2, [r7, #0]
 8027986:	b2d2      	uxtb	r2, r2
 8027988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802798a:	4b63      	ldr	r3, [pc, #396]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 802798c:	681b      	ldr	r3, [r3, #0]
 802798e:	f003 030f 	and.w	r3, r3, #15
 8027992:	683a      	ldr	r2, [r7, #0]
 8027994:	429a      	cmp	r2, r3
 8027996:	d001      	beq.n	802799c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8027998:	2301      	movs	r3, #1
 802799a:	e0b8      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802799c:	687b      	ldr	r3, [r7, #4]
 802799e:	681b      	ldr	r3, [r3, #0]
 80279a0:	f003 0302 	and.w	r3, r3, #2
 80279a4:	2b00      	cmp	r3, #0
 80279a6:	d020      	beq.n	80279ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80279a8:	687b      	ldr	r3, [r7, #4]
 80279aa:	681b      	ldr	r3, [r3, #0]
 80279ac:	f003 0304 	and.w	r3, r3, #4
 80279b0:	2b00      	cmp	r3, #0
 80279b2:	d005      	beq.n	80279c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80279b4:	4b59      	ldr	r3, [pc, #356]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279b6:	689b      	ldr	r3, [r3, #8]
 80279b8:	4a58      	ldr	r2, [pc, #352]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80279be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80279c0:	687b      	ldr	r3, [r7, #4]
 80279c2:	681b      	ldr	r3, [r3, #0]
 80279c4:	f003 0308 	and.w	r3, r3, #8
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	d005      	beq.n	80279d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80279cc:	4b53      	ldr	r3, [pc, #332]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279ce:	689b      	ldr	r3, [r3, #8]
 80279d0:	4a52      	ldr	r2, [pc, #328]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80279d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80279d8:	4b50      	ldr	r3, [pc, #320]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279da:	689b      	ldr	r3, [r3, #8]
 80279dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80279e0:	687b      	ldr	r3, [r7, #4]
 80279e2:	689b      	ldr	r3, [r3, #8]
 80279e4:	494d      	ldr	r1, [pc, #308]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 80279e6:	4313      	orrs	r3, r2
 80279e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80279ea:	687b      	ldr	r3, [r7, #4]
 80279ec:	681b      	ldr	r3, [r3, #0]
 80279ee:	f003 0301 	and.w	r3, r3, #1
 80279f2:	2b00      	cmp	r3, #0
 80279f4:	d044      	beq.n	8027a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80279f6:	687b      	ldr	r3, [r7, #4]
 80279f8:	685b      	ldr	r3, [r3, #4]
 80279fa:	2b01      	cmp	r3, #1
 80279fc:	d107      	bne.n	8027a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80279fe:	4b47      	ldr	r3, [pc, #284]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a00:	681b      	ldr	r3, [r3, #0]
 8027a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027a06:	2b00      	cmp	r3, #0
 8027a08:	d119      	bne.n	8027a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a0a:	2301      	movs	r3, #1
 8027a0c:	e07f      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a0e:	687b      	ldr	r3, [r7, #4]
 8027a10:	685b      	ldr	r3, [r3, #4]
 8027a12:	2b02      	cmp	r3, #2
 8027a14:	d003      	beq.n	8027a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8027a16:	687b      	ldr	r3, [r7, #4]
 8027a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027a1a:	2b03      	cmp	r3, #3
 8027a1c:	d107      	bne.n	8027a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027a1e:	4b3f      	ldr	r3, [pc, #252]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a20:	681b      	ldr	r3, [r3, #0]
 8027a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027a26:	2b00      	cmp	r3, #0
 8027a28:	d109      	bne.n	8027a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a2a:	2301      	movs	r3, #1
 8027a2c:	e06f      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027a2e:	4b3b      	ldr	r3, [pc, #236]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a30:	681b      	ldr	r3, [r3, #0]
 8027a32:	f003 0302 	and.w	r3, r3, #2
 8027a36:	2b00      	cmp	r3, #0
 8027a38:	d101      	bne.n	8027a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8027a3a:	2301      	movs	r3, #1
 8027a3c:	e067      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027a3e:	4b37      	ldr	r3, [pc, #220]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a40:	689b      	ldr	r3, [r3, #8]
 8027a42:	f023 0203 	bic.w	r2, r3, #3
 8027a46:	687b      	ldr	r3, [r7, #4]
 8027a48:	685b      	ldr	r3, [r3, #4]
 8027a4a:	4934      	ldr	r1, [pc, #208]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a4c:	4313      	orrs	r3, r2
 8027a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027a50:	f7fb fe0e 	bl	8023670 <HAL_GetTick>
 8027a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a56:	e00a      	b.n	8027a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8027a58:	f7fb fe0a 	bl	8023670 <HAL_GetTick>
 8027a5c:	4602      	mov	r2, r0
 8027a5e:	68fb      	ldr	r3, [r7, #12]
 8027a60:	1ad3      	subs	r3, r2, r3
 8027a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8027a66:	4293      	cmp	r3, r2
 8027a68:	d901      	bls.n	8027a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8027a6a:	2303      	movs	r3, #3
 8027a6c:	e04f      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8027a6e:	4b2b      	ldr	r3, [pc, #172]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027a70:	689b      	ldr	r3, [r3, #8]
 8027a72:	f003 020c 	and.w	r2, r3, #12
 8027a76:	687b      	ldr	r3, [r7, #4]
 8027a78:	685b      	ldr	r3, [r3, #4]
 8027a7a:	009b      	lsls	r3, r3, #2
 8027a7c:	429a      	cmp	r2, r3
 8027a7e:	d1eb      	bne.n	8027a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8027a80:	4b25      	ldr	r3, [pc, #148]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 8027a82:	681b      	ldr	r3, [r3, #0]
 8027a84:	f003 030f 	and.w	r3, r3, #15
 8027a88:	683a      	ldr	r2, [r7, #0]
 8027a8a:	429a      	cmp	r2, r3
 8027a8c:	d20c      	bcs.n	8027aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8027a8e:	4b22      	ldr	r3, [pc, #136]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 8027a90:	683a      	ldr	r2, [r7, #0]
 8027a92:	b2d2      	uxtb	r2, r2
 8027a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8027a96:	4b20      	ldr	r3, [pc, #128]	; (8027b18 <HAL_RCC_ClockConfig+0x1b8>)
 8027a98:	681b      	ldr	r3, [r3, #0]
 8027a9a:	f003 030f 	and.w	r3, r3, #15
 8027a9e:	683a      	ldr	r2, [r7, #0]
 8027aa0:	429a      	cmp	r2, r3
 8027aa2:	d001      	beq.n	8027aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8027aa4:	2301      	movs	r3, #1
 8027aa6:	e032      	b.n	8027b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8027aa8:	687b      	ldr	r3, [r7, #4]
 8027aaa:	681b      	ldr	r3, [r3, #0]
 8027aac:	f003 0304 	and.w	r3, r3, #4
 8027ab0:	2b00      	cmp	r3, #0
 8027ab2:	d008      	beq.n	8027ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8027ab4:	4b19      	ldr	r3, [pc, #100]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027ab6:	689b      	ldr	r3, [r3, #8]
 8027ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8027abc:	687b      	ldr	r3, [r7, #4]
 8027abe:	68db      	ldr	r3, [r3, #12]
 8027ac0:	4916      	ldr	r1, [pc, #88]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027ac2:	4313      	orrs	r3, r2
 8027ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8027ac6:	687b      	ldr	r3, [r7, #4]
 8027ac8:	681b      	ldr	r3, [r3, #0]
 8027aca:	f003 0308 	and.w	r3, r3, #8
 8027ace:	2b00      	cmp	r3, #0
 8027ad0:	d009      	beq.n	8027ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027ad2:	4b12      	ldr	r3, [pc, #72]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027ad4:	689b      	ldr	r3, [r3, #8]
 8027ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027ada:	687b      	ldr	r3, [r7, #4]
 8027adc:	691b      	ldr	r3, [r3, #16]
 8027ade:	00db      	lsls	r3, r3, #3
 8027ae0:	490e      	ldr	r1, [pc, #56]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027ae2:	4313      	orrs	r3, r2
 8027ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027ae6:	f000 f821 	bl	8027b2c <HAL_RCC_GetSysClockFreq>
 8027aea:	4602      	mov	r2, r0
 8027aec:	4b0b      	ldr	r3, [pc, #44]	; (8027b1c <HAL_RCC_ClockConfig+0x1bc>)
 8027aee:	689b      	ldr	r3, [r3, #8]
 8027af0:	091b      	lsrs	r3, r3, #4
 8027af2:	f003 030f 	and.w	r3, r3, #15
 8027af6:	490a      	ldr	r1, [pc, #40]	; (8027b20 <HAL_RCC_ClockConfig+0x1c0>)
 8027af8:	5ccb      	ldrb	r3, [r1, r3]
 8027afa:	fa22 f303 	lsr.w	r3, r2, r3
 8027afe:	4a09      	ldr	r2, [pc, #36]	; (8027b24 <HAL_RCC_ClockConfig+0x1c4>)
 8027b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027b02:	4b09      	ldr	r3, [pc, #36]	; (8027b28 <HAL_RCC_ClockConfig+0x1c8>)
 8027b04:	681b      	ldr	r3, [r3, #0]
 8027b06:	4618      	mov	r0, r3
 8027b08:	f7fa f9ce 	bl	8021ea8 <HAL_InitTick>

  return HAL_OK;
 8027b0c:	2300      	movs	r3, #0
}
 8027b0e:	4618      	mov	r0, r3
 8027b10:	3710      	adds	r7, #16
 8027b12:	46bd      	mov	sp, r7
 8027b14:	bd80      	pop	{r7, pc}
 8027b16:	bf00      	nop
 8027b18:	40023c00 	.word	0x40023c00
 8027b1c:	40023800 	.word	0x40023800
 8027b20:	0802faec 	.word	0x0802faec
 8027b24:	20000004 	.word	0x20000004
 8027b28:	20000058 	.word	0x20000058

08027b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027b30:	b094      	sub	sp, #80	; 0x50
 8027b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027b34:	2300      	movs	r3, #0
 8027b36:	647b      	str	r3, [r7, #68]	; 0x44
 8027b38:	2300      	movs	r3, #0
 8027b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027b3c:	2300      	movs	r3, #0
 8027b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8027b40:	2300      	movs	r3, #0
 8027b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027b44:	4b79      	ldr	r3, [pc, #484]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027b46:	689b      	ldr	r3, [r3, #8]
 8027b48:	f003 030c 	and.w	r3, r3, #12
 8027b4c:	2b08      	cmp	r3, #8
 8027b4e:	d00d      	beq.n	8027b6c <HAL_RCC_GetSysClockFreq+0x40>
 8027b50:	2b08      	cmp	r3, #8
 8027b52:	f200 80e1 	bhi.w	8027d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8027b56:	2b00      	cmp	r3, #0
 8027b58:	d002      	beq.n	8027b60 <HAL_RCC_GetSysClockFreq+0x34>
 8027b5a:	2b04      	cmp	r3, #4
 8027b5c:	d003      	beq.n	8027b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8027b5e:	e0db      	b.n	8027d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027b60:	4b73      	ldr	r3, [pc, #460]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8027b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027b64:	e0db      	b.n	8027d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027b66:	4b73      	ldr	r3, [pc, #460]	; (8027d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8027b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027b6a:	e0d8      	b.n	8027d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027b6c:	4b6f      	ldr	r3, [pc, #444]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027b6e:	685b      	ldr	r3, [r3, #4]
 8027b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027b76:	4b6d      	ldr	r3, [pc, #436]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027b78:	685b      	ldr	r3, [r3, #4]
 8027b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027b7e:	2b00      	cmp	r3, #0
 8027b80:	d063      	beq.n	8027c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027b82:	4b6a      	ldr	r3, [pc, #424]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027b84:	685b      	ldr	r3, [r3, #4]
 8027b86:	099b      	lsrs	r3, r3, #6
 8027b88:	2200      	movs	r2, #0
 8027b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8027b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027b94:	633b      	str	r3, [r7, #48]	; 0x30
 8027b96:	2300      	movs	r3, #0
 8027b98:	637b      	str	r3, [r7, #52]	; 0x34
 8027b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027b9e:	4622      	mov	r2, r4
 8027ba0:	462b      	mov	r3, r5
 8027ba2:	f04f 0000 	mov.w	r0, #0
 8027ba6:	f04f 0100 	mov.w	r1, #0
 8027baa:	0159      	lsls	r1, r3, #5
 8027bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027bb0:	0150      	lsls	r0, r2, #5
 8027bb2:	4602      	mov	r2, r0
 8027bb4:	460b      	mov	r3, r1
 8027bb6:	4621      	mov	r1, r4
 8027bb8:	1a51      	subs	r1, r2, r1
 8027bba:	6139      	str	r1, [r7, #16]
 8027bbc:	4629      	mov	r1, r5
 8027bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8027bc2:	617b      	str	r3, [r7, #20]
 8027bc4:	f04f 0200 	mov.w	r2, #0
 8027bc8:	f04f 0300 	mov.w	r3, #0
 8027bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027bd0:	4659      	mov	r1, fp
 8027bd2:	018b      	lsls	r3, r1, #6
 8027bd4:	4651      	mov	r1, sl
 8027bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8027bda:	4651      	mov	r1, sl
 8027bdc:	018a      	lsls	r2, r1, #6
 8027bde:	4651      	mov	r1, sl
 8027be0:	ebb2 0801 	subs.w	r8, r2, r1
 8027be4:	4659      	mov	r1, fp
 8027be6:	eb63 0901 	sbc.w	r9, r3, r1
 8027bea:	f04f 0200 	mov.w	r2, #0
 8027bee:	f04f 0300 	mov.w	r3, #0
 8027bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8027bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027bfe:	4690      	mov	r8, r2
 8027c00:	4699      	mov	r9, r3
 8027c02:	4623      	mov	r3, r4
 8027c04:	eb18 0303 	adds.w	r3, r8, r3
 8027c08:	60bb      	str	r3, [r7, #8]
 8027c0a:	462b      	mov	r3, r5
 8027c0c:	eb49 0303 	adc.w	r3, r9, r3
 8027c10:	60fb      	str	r3, [r7, #12]
 8027c12:	f04f 0200 	mov.w	r2, #0
 8027c16:	f04f 0300 	mov.w	r3, #0
 8027c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027c1e:	4629      	mov	r1, r5
 8027c20:	024b      	lsls	r3, r1, #9
 8027c22:	4621      	mov	r1, r4
 8027c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8027c28:	4621      	mov	r1, r4
 8027c2a:	024a      	lsls	r2, r1, #9
 8027c2c:	4610      	mov	r0, r2
 8027c2e:	4619      	mov	r1, r3
 8027c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c32:	2200      	movs	r2, #0
 8027c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8027c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027c3c:	f7f8 fb28 	bl	8020290 <__aeabi_uldivmod>
 8027c40:	4602      	mov	r2, r0
 8027c42:	460b      	mov	r3, r1
 8027c44:	4613      	mov	r3, r2
 8027c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027c48:	e058      	b.n	8027cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027c4a:	4b38      	ldr	r3, [pc, #224]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027c4c:	685b      	ldr	r3, [r3, #4]
 8027c4e:	099b      	lsrs	r3, r3, #6
 8027c50:	2200      	movs	r2, #0
 8027c52:	4618      	mov	r0, r3
 8027c54:	4611      	mov	r1, r2
 8027c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8027c5a:	623b      	str	r3, [r7, #32]
 8027c5c:	2300      	movs	r3, #0
 8027c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8027c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027c64:	4642      	mov	r2, r8
 8027c66:	464b      	mov	r3, r9
 8027c68:	f04f 0000 	mov.w	r0, #0
 8027c6c:	f04f 0100 	mov.w	r1, #0
 8027c70:	0159      	lsls	r1, r3, #5
 8027c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027c76:	0150      	lsls	r0, r2, #5
 8027c78:	4602      	mov	r2, r0
 8027c7a:	460b      	mov	r3, r1
 8027c7c:	4641      	mov	r1, r8
 8027c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8027c82:	4649      	mov	r1, r9
 8027c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8027c88:	f04f 0200 	mov.w	r2, #0
 8027c8c:	f04f 0300 	mov.w	r3, #0
 8027c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8027c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8027ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8027ca4:	f04f 0200 	mov.w	r2, #0
 8027ca8:	f04f 0300 	mov.w	r3, #0
 8027cac:	00eb      	lsls	r3, r5, #3
 8027cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027cb2:	00e2      	lsls	r2, r4, #3
 8027cb4:	4614      	mov	r4, r2
 8027cb6:	461d      	mov	r5, r3
 8027cb8:	4643      	mov	r3, r8
 8027cba:	18e3      	adds	r3, r4, r3
 8027cbc:	603b      	str	r3, [r7, #0]
 8027cbe:	464b      	mov	r3, r9
 8027cc0:	eb45 0303 	adc.w	r3, r5, r3
 8027cc4:	607b      	str	r3, [r7, #4]
 8027cc6:	f04f 0200 	mov.w	r2, #0
 8027cca:	f04f 0300 	mov.w	r3, #0
 8027cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027cd2:	4629      	mov	r1, r5
 8027cd4:	028b      	lsls	r3, r1, #10
 8027cd6:	4621      	mov	r1, r4
 8027cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027cdc:	4621      	mov	r1, r4
 8027cde:	028a      	lsls	r2, r1, #10
 8027ce0:	4610      	mov	r0, r2
 8027ce2:	4619      	mov	r1, r3
 8027ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027ce6:	2200      	movs	r2, #0
 8027ce8:	61bb      	str	r3, [r7, #24]
 8027cea:	61fa      	str	r2, [r7, #28]
 8027cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027cf0:	f7f8 face 	bl	8020290 <__aeabi_uldivmod>
 8027cf4:	4602      	mov	r2, r0
 8027cf6:	460b      	mov	r3, r1
 8027cf8:	4613      	mov	r3, r2
 8027cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027cfc:	4b0b      	ldr	r3, [pc, #44]	; (8027d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8027cfe:	685b      	ldr	r3, [r3, #4]
 8027d00:	0c1b      	lsrs	r3, r3, #16
 8027d02:	f003 0303 	and.w	r3, r3, #3
 8027d06:	3301      	adds	r3, #1
 8027d08:	005b      	lsls	r3, r3, #1
 8027d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d16:	e002      	b.n	8027d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027d18:	4b05      	ldr	r3, [pc, #20]	; (8027d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8027d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027d20:	4618      	mov	r0, r3
 8027d22:	3750      	adds	r7, #80	; 0x50
 8027d24:	46bd      	mov	sp, r7
 8027d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027d2a:	bf00      	nop
 8027d2c:	40023800 	.word	0x40023800
 8027d30:	00f42400 	.word	0x00f42400
 8027d34:	007a1200 	.word	0x007a1200

08027d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027d38:	b480      	push	{r7}
 8027d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027d3c:	4b03      	ldr	r3, [pc, #12]	; (8027d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8027d3e:	681b      	ldr	r3, [r3, #0]
}
 8027d40:	4618      	mov	r0, r3
 8027d42:	46bd      	mov	sp, r7
 8027d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d48:	4770      	bx	lr
 8027d4a:	bf00      	nop
 8027d4c:	20000004 	.word	0x20000004

08027d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027d50:	b580      	push	{r7, lr}
 8027d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027d54:	f7ff fff0 	bl	8027d38 <HAL_RCC_GetHCLKFreq>
 8027d58:	4602      	mov	r2, r0
 8027d5a:	4b05      	ldr	r3, [pc, #20]	; (8027d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027d5c:	689b      	ldr	r3, [r3, #8]
 8027d5e:	0a9b      	lsrs	r3, r3, #10
 8027d60:	f003 0307 	and.w	r3, r3, #7
 8027d64:	4903      	ldr	r1, [pc, #12]	; (8027d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027d66:	5ccb      	ldrb	r3, [r1, r3]
 8027d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027d6c:	4618      	mov	r0, r3
 8027d6e:	bd80      	pop	{r7, pc}
 8027d70:	40023800 	.word	0x40023800
 8027d74:	0802fafc 	.word	0x0802fafc

08027d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027d78:	b580      	push	{r7, lr}
 8027d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027d7c:	f7ff ffdc 	bl	8027d38 <HAL_RCC_GetHCLKFreq>
 8027d80:	4602      	mov	r2, r0
 8027d82:	4b05      	ldr	r3, [pc, #20]	; (8027d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8027d84:	689b      	ldr	r3, [r3, #8]
 8027d86:	0b5b      	lsrs	r3, r3, #13
 8027d88:	f003 0307 	and.w	r3, r3, #7
 8027d8c:	4903      	ldr	r1, [pc, #12]	; (8027d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8027d8e:	5ccb      	ldrb	r3, [r1, r3]
 8027d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027d94:	4618      	mov	r0, r3
 8027d96:	bd80      	pop	{r7, pc}
 8027d98:	40023800 	.word	0x40023800
 8027d9c:	0802fafc 	.word	0x0802fafc

08027da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027da0:	b480      	push	{r7}
 8027da2:	b083      	sub	sp, #12
 8027da4:	af00      	add	r7, sp, #0
 8027da6:	6078      	str	r0, [r7, #4]
 8027da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	220f      	movs	r2, #15
 8027dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027db0:	4b12      	ldr	r3, [pc, #72]	; (8027dfc <HAL_RCC_GetClockConfig+0x5c>)
 8027db2:	689b      	ldr	r3, [r3, #8]
 8027db4:	f003 0203 	and.w	r2, r3, #3
 8027db8:	687b      	ldr	r3, [r7, #4]
 8027dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027dbc:	4b0f      	ldr	r3, [pc, #60]	; (8027dfc <HAL_RCC_GetClockConfig+0x5c>)
 8027dbe:	689b      	ldr	r3, [r3, #8]
 8027dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027dc4:	687b      	ldr	r3, [r7, #4]
 8027dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027dc8:	4b0c      	ldr	r3, [pc, #48]	; (8027dfc <HAL_RCC_GetClockConfig+0x5c>)
 8027dca:	689b      	ldr	r3, [r3, #8]
 8027dcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027dd0:	687b      	ldr	r3, [r7, #4]
 8027dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027dd4:	4b09      	ldr	r3, [pc, #36]	; (8027dfc <HAL_RCC_GetClockConfig+0x5c>)
 8027dd6:	689b      	ldr	r3, [r3, #8]
 8027dd8:	08db      	lsrs	r3, r3, #3
 8027dda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027dde:	687b      	ldr	r3, [r7, #4]
 8027de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027de2:	4b07      	ldr	r3, [pc, #28]	; (8027e00 <HAL_RCC_GetClockConfig+0x60>)
 8027de4:	681b      	ldr	r3, [r3, #0]
 8027de6:	f003 020f 	and.w	r2, r3, #15
 8027dea:	683b      	ldr	r3, [r7, #0]
 8027dec:	601a      	str	r2, [r3, #0]
}
 8027dee:	bf00      	nop
 8027df0:	370c      	adds	r7, #12
 8027df2:	46bd      	mov	sp, r7
 8027df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df8:	4770      	bx	lr
 8027dfa:	bf00      	nop
 8027dfc:	40023800 	.word	0x40023800
 8027e00:	40023c00 	.word	0x40023c00

08027e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027e04:	b580      	push	{r7, lr}
 8027e06:	b086      	sub	sp, #24
 8027e08:	af00      	add	r7, sp, #0
 8027e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027e0c:	2300      	movs	r3, #0
 8027e0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027e10:	2300      	movs	r3, #0
 8027e12:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	681b      	ldr	r3, [r3, #0]
 8027e18:	f003 0301 	and.w	r3, r3, #1
 8027e1c:	2b00      	cmp	r3, #0
 8027e1e:	d10b      	bne.n	8027e38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e20:	687b      	ldr	r3, [r7, #4]
 8027e22:	681b      	ldr	r3, [r3, #0]
 8027e24:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027e28:	2b00      	cmp	r3, #0
 8027e2a:	d105      	bne.n	8027e38 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027e2c:	687b      	ldr	r3, [r7, #4]
 8027e2e:	681b      	ldr	r3, [r3, #0]
 8027e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027e34:	2b00      	cmp	r3, #0
 8027e36:	d075      	beq.n	8027f24 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027e38:	4b91      	ldr	r3, [pc, #580]	; (8028080 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027e3a:	2200      	movs	r2, #0
 8027e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027e3e:	f7fb fc17 	bl	8023670 <HAL_GetTick>
 8027e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e44:	e008      	b.n	8027e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027e46:	f7fb fc13 	bl	8023670 <HAL_GetTick>
 8027e4a:	4602      	mov	r2, r0
 8027e4c:	697b      	ldr	r3, [r7, #20]
 8027e4e:	1ad3      	subs	r3, r2, r3
 8027e50:	2b02      	cmp	r3, #2
 8027e52:	d901      	bls.n	8027e58 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e54:	2303      	movs	r3, #3
 8027e56:	e189      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027e58:	4b8a      	ldr	r3, [pc, #552]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d1f0      	bne.n	8027e46 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027e64:	687b      	ldr	r3, [r7, #4]
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	f003 0301 	and.w	r3, r3, #1
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d009      	beq.n	8027e84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027e70:	687b      	ldr	r3, [r7, #4]
 8027e72:	685b      	ldr	r3, [r3, #4]
 8027e74:	019a      	lsls	r2, r3, #6
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	689b      	ldr	r3, [r3, #8]
 8027e7a:	071b      	lsls	r3, r3, #28
 8027e7c:	4981      	ldr	r1, [pc, #516]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e7e:	4313      	orrs	r3, r2
 8027e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	681b      	ldr	r3, [r3, #0]
 8027e88:	f003 0302 	and.w	r3, r3, #2
 8027e8c:	2b00      	cmp	r3, #0
 8027e8e:	d01f      	beq.n	8027ed0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027e90:	4b7c      	ldr	r3, [pc, #496]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027e96:	0f1b      	lsrs	r3, r3, #28
 8027e98:	f003 0307 	and.w	r3, r3, #7
 8027e9c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	685b      	ldr	r3, [r3, #4]
 8027ea2:	019a      	lsls	r2, r3, #6
 8027ea4:	687b      	ldr	r3, [r7, #4]
 8027ea6:	68db      	ldr	r3, [r3, #12]
 8027ea8:	061b      	lsls	r3, r3, #24
 8027eaa:	431a      	orrs	r2, r3
 8027eac:	693b      	ldr	r3, [r7, #16]
 8027eae:	071b      	lsls	r3, r3, #28
 8027eb0:	4974      	ldr	r1, [pc, #464]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eb2:	4313      	orrs	r3, r2
 8027eb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027eb8:	4b72      	ldr	r3, [pc, #456]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027ebe:	f023 021f 	bic.w	r2, r3, #31
 8027ec2:	687b      	ldr	r3, [r7, #4]
 8027ec4:	69db      	ldr	r3, [r3, #28]
 8027ec6:	3b01      	subs	r3, #1
 8027ec8:	496e      	ldr	r1, [pc, #440]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eca:	4313      	orrs	r3, r2
 8027ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027ed0:	687b      	ldr	r3, [r7, #4]
 8027ed2:	681b      	ldr	r3, [r3, #0]
 8027ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	d00d      	beq.n	8027ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	685b      	ldr	r3, [r3, #4]
 8027ee0:	019a      	lsls	r2, r3, #6
 8027ee2:	687b      	ldr	r3, [r7, #4]
 8027ee4:	68db      	ldr	r3, [r3, #12]
 8027ee6:	061b      	lsls	r3, r3, #24
 8027ee8:	431a      	orrs	r2, r3
 8027eea:	687b      	ldr	r3, [r7, #4]
 8027eec:	689b      	ldr	r3, [r3, #8]
 8027eee:	071b      	lsls	r3, r3, #28
 8027ef0:	4964      	ldr	r1, [pc, #400]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ef2:	4313      	orrs	r3, r2
 8027ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027ef8:	4b61      	ldr	r3, [pc, #388]	; (8028080 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027efa:	2201      	movs	r2, #1
 8027efc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027efe:	f7fb fbb7 	bl	8023670 <HAL_GetTick>
 8027f02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f04:	e008      	b.n	8027f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027f06:	f7fb fbb3 	bl	8023670 <HAL_GetTick>
 8027f0a:	4602      	mov	r2, r0
 8027f0c:	697b      	ldr	r3, [r7, #20]
 8027f0e:	1ad3      	subs	r3, r2, r3
 8027f10:	2b02      	cmp	r3, #2
 8027f12:	d901      	bls.n	8027f18 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f14:	2303      	movs	r3, #3
 8027f16:	e129      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027f18:	4b5a      	ldr	r3, [pc, #360]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f1a:	681b      	ldr	r3, [r3, #0]
 8027f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027f20:	2b00      	cmp	r3, #0
 8027f22:	d0f0      	beq.n	8027f06 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f24:	687b      	ldr	r3, [r7, #4]
 8027f26:	681b      	ldr	r3, [r3, #0]
 8027f28:	f003 0304 	and.w	r3, r3, #4
 8027f2c:	2b00      	cmp	r3, #0
 8027f2e:	d105      	bne.n	8027f3c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027f30:	687b      	ldr	r3, [r7, #4]
 8027f32:	681b      	ldr	r3, [r3, #0]
 8027f34:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	d079      	beq.n	8028030 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027f3c:	4b52      	ldr	r3, [pc, #328]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027f3e:	2200      	movs	r2, #0
 8027f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f42:	f7fb fb95 	bl	8023670 <HAL_GetTick>
 8027f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f48:	e008      	b.n	8027f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027f4a:	f7fb fb91 	bl	8023670 <HAL_GetTick>
 8027f4e:	4602      	mov	r2, r0
 8027f50:	697b      	ldr	r3, [r7, #20]
 8027f52:	1ad3      	subs	r3, r2, r3
 8027f54:	2b02      	cmp	r3, #2
 8027f56:	d901      	bls.n	8027f5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f58:	2303      	movs	r3, #3
 8027f5a:	e107      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027f5c:	4b49      	ldr	r3, [pc, #292]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f5e:	681b      	ldr	r3, [r3, #0]
 8027f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f68:	d0ef      	beq.n	8027f4a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027f6a:	687b      	ldr	r3, [r7, #4]
 8027f6c:	681b      	ldr	r3, [r3, #0]
 8027f6e:	f003 0304 	and.w	r3, r3, #4
 8027f72:	2b00      	cmp	r3, #0
 8027f74:	d020      	beq.n	8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027f76:	4b43      	ldr	r3, [pc, #268]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027f7c:	0f1b      	lsrs	r3, r3, #28
 8027f7e:	f003 0307 	and.w	r3, r3, #7
 8027f82:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	691b      	ldr	r3, [r3, #16]
 8027f88:	019a      	lsls	r2, r3, #6
 8027f8a:	687b      	ldr	r3, [r7, #4]
 8027f8c:	695b      	ldr	r3, [r3, #20]
 8027f8e:	061b      	lsls	r3, r3, #24
 8027f90:	431a      	orrs	r2, r3
 8027f92:	693b      	ldr	r3, [r7, #16]
 8027f94:	071b      	lsls	r3, r3, #28
 8027f96:	493b      	ldr	r1, [pc, #236]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f98:	4313      	orrs	r3, r2
 8027f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027f9e:	4b39      	ldr	r3, [pc, #228]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027fa8:	687b      	ldr	r3, [r7, #4]
 8027faa:	6a1b      	ldr	r3, [r3, #32]
 8027fac:	3b01      	subs	r3, #1
 8027fae:	021b      	lsls	r3, r3, #8
 8027fb0:	4934      	ldr	r1, [pc, #208]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fb2:	4313      	orrs	r3, r2
 8027fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027fb8:	687b      	ldr	r3, [r7, #4]
 8027fba:	681b      	ldr	r3, [r3, #0]
 8027fbc:	f003 0308 	and.w	r3, r3, #8
 8027fc0:	2b00      	cmp	r3, #0
 8027fc2:	d01e      	beq.n	8028002 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027fc4:	4b2f      	ldr	r3, [pc, #188]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027fca:	0e1b      	lsrs	r3, r3, #24
 8027fcc:	f003 030f 	and.w	r3, r3, #15
 8027fd0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027fd2:	687b      	ldr	r3, [r7, #4]
 8027fd4:	691b      	ldr	r3, [r3, #16]
 8027fd6:	019a      	lsls	r2, r3, #6
 8027fd8:	693b      	ldr	r3, [r7, #16]
 8027fda:	061b      	lsls	r3, r3, #24
 8027fdc:	431a      	orrs	r2, r3
 8027fde:	687b      	ldr	r3, [r7, #4]
 8027fe0:	699b      	ldr	r3, [r3, #24]
 8027fe2:	071b      	lsls	r3, r3, #28
 8027fe4:	4927      	ldr	r1, [pc, #156]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fe6:	4313      	orrs	r3, r2
 8027fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027fec:	4b25      	ldr	r3, [pc, #148]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027ff6:	687b      	ldr	r3, [r7, #4]
 8027ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027ffa:	4922      	ldr	r1, [pc, #136]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ffc:	4313      	orrs	r3, r2
 8027ffe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8028002:	4b21      	ldr	r3, [pc, #132]	; (8028088 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8028004:	2201      	movs	r2, #1
 8028006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8028008:	f7fb fb32 	bl	8023670 <HAL_GetTick>
 802800c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 802800e:	e008      	b.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8028010:	f7fb fb2e 	bl	8023670 <HAL_GetTick>
 8028014:	4602      	mov	r2, r0
 8028016:	697b      	ldr	r3, [r7, #20]
 8028018:	1ad3      	subs	r3, r2, r3
 802801a:	2b02      	cmp	r3, #2
 802801c:	d901      	bls.n	8028022 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 802801e:	2303      	movs	r3, #3
 8028020:	e0a4      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8028022:	4b18      	ldr	r3, [pc, #96]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028024:	681b      	ldr	r3, [r3, #0]
 8028026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802802a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802802e:	d1ef      	bne.n	8028010 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8028030:	687b      	ldr	r3, [r7, #4]
 8028032:	681b      	ldr	r3, [r3, #0]
 8028034:	f003 0320 	and.w	r3, r3, #32
 8028038:	2b00      	cmp	r3, #0
 802803a:	f000 808b 	beq.w	8028154 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 802803e:	2300      	movs	r3, #0
 8028040:	60fb      	str	r3, [r7, #12]
 8028042:	4b10      	ldr	r3, [pc, #64]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028046:	4a0f      	ldr	r2, [pc, #60]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802804c:	6413      	str	r3, [r2, #64]	; 0x40
 802804e:	4b0d      	ldr	r3, [pc, #52]	; (8028084 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8028050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028056:	60fb      	str	r3, [r7, #12]
 8028058:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 802805a:	4b0c      	ldr	r3, [pc, #48]	; (802808c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 802805c:	681b      	ldr	r3, [r3, #0]
 802805e:	4a0b      	ldr	r2, [pc, #44]	; (802808c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8028060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028064:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8028066:	f7fb fb03 	bl	8023670 <HAL_GetTick>
 802806a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 802806c:	e010      	b.n	8028090 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 802806e:	f7fb faff 	bl	8023670 <HAL_GetTick>
 8028072:	4602      	mov	r2, r0
 8028074:	697b      	ldr	r3, [r7, #20]
 8028076:	1ad3      	subs	r3, r2, r3
 8028078:	2b02      	cmp	r3, #2
 802807a:	d909      	bls.n	8028090 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 802807c:	2303      	movs	r3, #3
 802807e:	e075      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8028080:	42470068 	.word	0x42470068
 8028084:	40023800 	.word	0x40023800
 8028088:	42470070 	.word	0x42470070
 802808c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8028090:	4b38      	ldr	r3, [pc, #224]	; (8028174 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8028092:	681b      	ldr	r3, [r3, #0]
 8028094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028098:	2b00      	cmp	r3, #0
 802809a:	d0e8      	beq.n	802806e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 802809c:	4b36      	ldr	r3, [pc, #216]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80280a6:	693b      	ldr	r3, [r7, #16]
 80280a8:	2b00      	cmp	r3, #0
 80280aa:	d02f      	beq.n	802810c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80280ac:	687b      	ldr	r3, [r7, #4]
 80280ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80280b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80280b4:	693a      	ldr	r2, [r7, #16]
 80280b6:	429a      	cmp	r2, r3
 80280b8:	d028      	beq.n	802810c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80280ba:	4b2f      	ldr	r3, [pc, #188]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80280c4:	4b2d      	ldr	r3, [pc, #180]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280c6:	2201      	movs	r2, #1
 80280c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80280ca:	4b2c      	ldr	r3, [pc, #176]	; (802817c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80280cc:	2200      	movs	r2, #0
 80280ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80280d0:	4a29      	ldr	r2, [pc, #164]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280d2:	693b      	ldr	r3, [r7, #16]
 80280d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80280d6:	4b28      	ldr	r3, [pc, #160]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80280d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80280da:	f003 0301 	and.w	r3, r3, #1
 80280de:	2b01      	cmp	r3, #1
 80280e0:	d114      	bne.n	802810c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80280e2:	f7fb fac5 	bl	8023670 <HAL_GetTick>
 80280e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80280e8:	e00a      	b.n	8028100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80280ea:	f7fb fac1 	bl	8023670 <HAL_GetTick>
 80280ee:	4602      	mov	r2, r0
 80280f0:	697b      	ldr	r3, [r7, #20]
 80280f2:	1ad3      	subs	r3, r2, r3
 80280f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80280f8:	4293      	cmp	r3, r2
 80280fa:	d901      	bls.n	8028100 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80280fc:	2303      	movs	r3, #3
 80280fe:	e035      	b.n	802816c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028100:	4b1d      	ldr	r3, [pc, #116]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028104:	f003 0302 	and.w	r3, r3, #2
 8028108:	2b00      	cmp	r3, #0
 802810a:	d0ee      	beq.n	80280ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802810c:	687b      	ldr	r3, [r7, #4]
 802810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028114:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8028118:	d10d      	bne.n	8028136 <HAL_RCCEx_PeriphCLKConfig+0x332>
 802811a:	4b17      	ldr	r3, [pc, #92]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802811c:	689b      	ldr	r3, [r3, #8]
 802811e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8028122:	687b      	ldr	r3, [r7, #4]
 8028124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028126:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802812a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802812e:	4912      	ldr	r1, [pc, #72]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028130:	4313      	orrs	r3, r2
 8028132:	608b      	str	r3, [r1, #8]
 8028134:	e005      	b.n	8028142 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8028136:	4b10      	ldr	r3, [pc, #64]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028138:	689b      	ldr	r3, [r3, #8]
 802813a:	4a0f      	ldr	r2, [pc, #60]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802813c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8028140:	6093      	str	r3, [r2, #8]
 8028142:	4b0d      	ldr	r3, [pc, #52]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8028146:	687b      	ldr	r3, [r7, #4]
 8028148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802814a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802814e:	490a      	ldr	r1, [pc, #40]	; (8028178 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028150:	4313      	orrs	r3, r2
 8028152:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8028154:	687b      	ldr	r3, [r7, #4]
 8028156:	681b      	ldr	r3, [r3, #0]
 8028158:	f003 0310 	and.w	r3, r3, #16
 802815c:	2b00      	cmp	r3, #0
 802815e:	d004      	beq.n	802816a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8028166:	4b06      	ldr	r3, [pc, #24]	; (8028180 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8028168:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802816a:	2300      	movs	r3, #0
}
 802816c:	4618      	mov	r0, r3
 802816e:	3718      	adds	r7, #24
 8028170:	46bd      	mov	sp, r7
 8028172:	bd80      	pop	{r7, pc}
 8028174:	40007000 	.word	0x40007000
 8028178:	40023800 	.word	0x40023800
 802817c:	42470e40 	.word	0x42470e40
 8028180:	424711e0 	.word	0x424711e0

08028184 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8028184:	b580      	push	{r7, lr}
 8028186:	b082      	sub	sp, #8
 8028188:	af00      	add	r7, sp, #0
 802818a:	6078      	str	r0, [r7, #4]
 802818c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 802818e:	687b      	ldr	r3, [r7, #4]
 8028190:	2b00      	cmp	r3, #0
 8028192:	d101      	bne.n	8028198 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8028194:	2301      	movs	r3, #1
 8028196:	e025      	b.n	80281e4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8028198:	687b      	ldr	r3, [r7, #4]
 802819a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802819e:	b2db      	uxtb	r3, r3
 80281a0:	2b00      	cmp	r3, #0
 80281a2:	d106      	bne.n	80281b2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80281a4:	687b      	ldr	r3, [r7, #4]
 80281a6:	2200      	movs	r2, #0
 80281a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80281ac:	6878      	ldr	r0, [r7, #4]
 80281ae:	f7f9 fe71 	bl	8021e94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80281b2:	687b      	ldr	r3, [r7, #4]
 80281b4:	2202      	movs	r2, #2
 80281b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80281ba:	687b      	ldr	r3, [r7, #4]
 80281bc:	681a      	ldr	r2, [r3, #0]
 80281be:	687b      	ldr	r3, [r7, #4]
 80281c0:	3304      	adds	r3, #4
 80281c2:	4619      	mov	r1, r3
 80281c4:	4610      	mov	r0, r2
 80281c6:	f002 fb47 	bl	802a858 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80281ca:	687b      	ldr	r3, [r7, #4]
 80281cc:	6818      	ldr	r0, [r3, #0]
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	685b      	ldr	r3, [r3, #4]
 80281d2:	461a      	mov	r2, r3
 80281d4:	6839      	ldr	r1, [r7, #0]
 80281d6:	f002 fb9c 	bl	802a912 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80281da:	687b      	ldr	r3, [r7, #4]
 80281dc:	2201      	movs	r2, #1
 80281de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80281e2:	2300      	movs	r3, #0
}
 80281e4:	4618      	mov	r0, r3
 80281e6:	3708      	adds	r7, #8
 80281e8:	46bd      	mov	sp, r7
 80281ea:	bd80      	pop	{r7, pc}

080281ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80281ec:	b580      	push	{r7, lr}
 80281ee:	b086      	sub	sp, #24
 80281f0:	af00      	add	r7, sp, #0
 80281f2:	60f8      	str	r0, [r7, #12]
 80281f4:	60b9      	str	r1, [r7, #8]
 80281f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80281f8:	68fb      	ldr	r3, [r7, #12]
 80281fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80281fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8028200:	7dfb      	ldrb	r3, [r7, #23]
 8028202:	2b02      	cmp	r3, #2
 8028204:	d101      	bne.n	802820a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8028206:	2302      	movs	r3, #2
 8028208:	e021      	b.n	802824e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802820a:	7dfb      	ldrb	r3, [r7, #23]
 802820c:	2b01      	cmp	r3, #1
 802820e:	d002      	beq.n	8028216 <HAL_SDRAM_SendCommand+0x2a>
 8028210:	7dfb      	ldrb	r3, [r7, #23]
 8028212:	2b05      	cmp	r3, #5
 8028214:	d118      	bne.n	8028248 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8028216:	68fb      	ldr	r3, [r7, #12]
 8028218:	2202      	movs	r2, #2
 802821a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 802821e:	68fb      	ldr	r3, [r7, #12]
 8028220:	681b      	ldr	r3, [r3, #0]
 8028222:	687a      	ldr	r2, [r7, #4]
 8028224:	68b9      	ldr	r1, [r7, #8]
 8028226:	4618      	mov	r0, r3
 8028228:	f002 fbdc 	bl	802a9e4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802822c:	68bb      	ldr	r3, [r7, #8]
 802822e:	681b      	ldr	r3, [r3, #0]
 8028230:	2b02      	cmp	r3, #2
 8028232:	d104      	bne.n	802823e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8028234:	68fb      	ldr	r3, [r7, #12]
 8028236:	2205      	movs	r2, #5
 8028238:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802823c:	e006      	b.n	802824c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 802823e:	68fb      	ldr	r3, [r7, #12]
 8028240:	2201      	movs	r2, #1
 8028242:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028246:	e001      	b.n	802824c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8028248:	2301      	movs	r3, #1
 802824a:	e000      	b.n	802824e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 802824c:	2300      	movs	r3, #0
}
 802824e:	4618      	mov	r0, r3
 8028250:	3718      	adds	r7, #24
 8028252:	46bd      	mov	sp, r7
 8028254:	bd80      	pop	{r7, pc}

08028256 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8028256:	b580      	push	{r7, lr}
 8028258:	b082      	sub	sp, #8
 802825a:	af00      	add	r7, sp, #0
 802825c:	6078      	str	r0, [r7, #4]
 802825e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8028260:	687b      	ldr	r3, [r7, #4]
 8028262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028266:	b2db      	uxtb	r3, r3
 8028268:	2b02      	cmp	r3, #2
 802826a:	d101      	bne.n	8028270 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 802826c:	2302      	movs	r3, #2
 802826e:	e016      	b.n	802829e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028276:	b2db      	uxtb	r3, r3
 8028278:	2b01      	cmp	r3, #1
 802827a:	d10f      	bne.n	802829c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802827c:	687b      	ldr	r3, [r7, #4]
 802827e:	2202      	movs	r2, #2
 8028280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	681b      	ldr	r3, [r3, #0]
 8028288:	6839      	ldr	r1, [r7, #0]
 802828a:	4618      	mov	r0, r3
 802828c:	f002 fbe7 	bl	802aa5e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8028290:	687b      	ldr	r3, [r7, #4]
 8028292:	2201      	movs	r2, #1
 8028294:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8028298:	2300      	movs	r3, #0
 802829a:	e000      	b.n	802829e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 802829c:	2301      	movs	r3, #1
}
 802829e:	4618      	mov	r0, r3
 80282a0:	3708      	adds	r7, #8
 80282a2:	46bd      	mov	sp, r7
 80282a4:	bd80      	pop	{r7, pc}

080282a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80282a6:	b580      	push	{r7, lr}
 80282a8:	b082      	sub	sp, #8
 80282aa:	af00      	add	r7, sp, #0
 80282ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80282ae:	687b      	ldr	r3, [r7, #4]
 80282b0:	2b00      	cmp	r3, #0
 80282b2:	d101      	bne.n	80282b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80282b4:	2301      	movs	r3, #1
 80282b6:	e07b      	b.n	80283b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80282b8:	687b      	ldr	r3, [r7, #4]
 80282ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282bc:	2b00      	cmp	r3, #0
 80282be:	d108      	bne.n	80282d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80282c0:	687b      	ldr	r3, [r7, #4]
 80282c2:	685b      	ldr	r3, [r3, #4]
 80282c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80282c8:	d009      	beq.n	80282de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80282ca:	687b      	ldr	r3, [r7, #4]
 80282cc:	2200      	movs	r2, #0
 80282ce:	61da      	str	r2, [r3, #28]
 80282d0:	e005      	b.n	80282de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80282d2:	687b      	ldr	r3, [r7, #4]
 80282d4:	2200      	movs	r2, #0
 80282d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80282d8:	687b      	ldr	r3, [r7, #4]
 80282da:	2200      	movs	r2, #0
 80282dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80282de:	687b      	ldr	r3, [r7, #4]
 80282e0:	2200      	movs	r2, #0
 80282e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80282ea:	b2db      	uxtb	r3, r3
 80282ec:	2b00      	cmp	r3, #0
 80282ee:	d106      	bne.n	80282fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80282f0:	687b      	ldr	r3, [r7, #4]
 80282f2:	2200      	movs	r2, #0
 80282f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80282f8:	6878      	ldr	r0, [r7, #4]
 80282fa:	f7f9 fc09 	bl	8021b10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80282fe:	687b      	ldr	r3, [r7, #4]
 8028300:	2202      	movs	r2, #2
 8028302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8028306:	687b      	ldr	r3, [r7, #4]
 8028308:	681b      	ldr	r3, [r3, #0]
 802830a:	681a      	ldr	r2, [r3, #0]
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	681b      	ldr	r3, [r3, #0]
 8028310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028314:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8028316:	687b      	ldr	r3, [r7, #4]
 8028318:	685b      	ldr	r3, [r3, #4]
 802831a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 802831e:	687b      	ldr	r3, [r7, #4]
 8028320:	689b      	ldr	r3, [r3, #8]
 8028322:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8028326:	431a      	orrs	r2, r3
 8028328:	687b      	ldr	r3, [r7, #4]
 802832a:	68db      	ldr	r3, [r3, #12]
 802832c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028330:	431a      	orrs	r2, r3
 8028332:	687b      	ldr	r3, [r7, #4]
 8028334:	691b      	ldr	r3, [r3, #16]
 8028336:	f003 0302 	and.w	r3, r3, #2
 802833a:	431a      	orrs	r2, r3
 802833c:	687b      	ldr	r3, [r7, #4]
 802833e:	695b      	ldr	r3, [r3, #20]
 8028340:	f003 0301 	and.w	r3, r3, #1
 8028344:	431a      	orrs	r2, r3
 8028346:	687b      	ldr	r3, [r7, #4]
 8028348:	699b      	ldr	r3, [r3, #24]
 802834a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802834e:	431a      	orrs	r2, r3
 8028350:	687b      	ldr	r3, [r7, #4]
 8028352:	69db      	ldr	r3, [r3, #28]
 8028354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8028358:	431a      	orrs	r2, r3
 802835a:	687b      	ldr	r3, [r7, #4]
 802835c:	6a1b      	ldr	r3, [r3, #32]
 802835e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028362:	ea42 0103 	orr.w	r1, r2, r3
 8028366:	687b      	ldr	r3, [r7, #4]
 8028368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802836a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 802836e:	687b      	ldr	r3, [r7, #4]
 8028370:	681b      	ldr	r3, [r3, #0]
 8028372:	430a      	orrs	r2, r1
 8028374:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8028376:	687b      	ldr	r3, [r7, #4]
 8028378:	699b      	ldr	r3, [r3, #24]
 802837a:	0c1b      	lsrs	r3, r3, #16
 802837c:	f003 0104 	and.w	r1, r3, #4
 8028380:	687b      	ldr	r3, [r7, #4]
 8028382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028384:	f003 0210 	and.w	r2, r3, #16
 8028388:	687b      	ldr	r3, [r7, #4]
 802838a:	681b      	ldr	r3, [r3, #0]
 802838c:	430a      	orrs	r2, r1
 802838e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	681b      	ldr	r3, [r3, #0]
 8028394:	69da      	ldr	r2, [r3, #28]
 8028396:	687b      	ldr	r3, [r7, #4]
 8028398:	681b      	ldr	r3, [r3, #0]
 802839a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802839e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80283a0:	687b      	ldr	r3, [r7, #4]
 80283a2:	2200      	movs	r2, #0
 80283a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80283a6:	687b      	ldr	r3, [r7, #4]
 80283a8:	2201      	movs	r2, #1
 80283aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80283ae:	2300      	movs	r3, #0
}
 80283b0:	4618      	mov	r0, r3
 80283b2:	3708      	adds	r7, #8
 80283b4:	46bd      	mov	sp, r7
 80283b6:	bd80      	pop	{r7, pc}

080283b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80283b8:	b580      	push	{r7, lr}
 80283ba:	b082      	sub	sp, #8
 80283bc:	af00      	add	r7, sp, #0
 80283be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80283c0:	687b      	ldr	r3, [r7, #4]
 80283c2:	2b00      	cmp	r3, #0
 80283c4:	d101      	bne.n	80283ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80283c6:	2301      	movs	r3, #1
 80283c8:	e01a      	b.n	8028400 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80283ca:	687b      	ldr	r3, [r7, #4]
 80283cc:	2202      	movs	r2, #2
 80283ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80283d2:	687b      	ldr	r3, [r7, #4]
 80283d4:	681b      	ldr	r3, [r3, #0]
 80283d6:	681a      	ldr	r2, [r3, #0]
 80283d8:	687b      	ldr	r3, [r7, #4]
 80283da:	681b      	ldr	r3, [r3, #0]
 80283dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80283e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80283e2:	6878      	ldr	r0, [r7, #4]
 80283e4:	f7f9 fbdc 	bl	8021ba0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80283e8:	687b      	ldr	r3, [r7, #4]
 80283ea:	2200      	movs	r2, #0
 80283ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80283ee:	687b      	ldr	r3, [r7, #4]
 80283f0:	2200      	movs	r2, #0
 80283f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80283f6:	687b      	ldr	r3, [r7, #4]
 80283f8:	2200      	movs	r2, #0
 80283fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80283fe:	2300      	movs	r3, #0
}
 8028400:	4618      	mov	r0, r3
 8028402:	3708      	adds	r7, #8
 8028404:	46bd      	mov	sp, r7
 8028406:	bd80      	pop	{r7, pc}

08028408 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028408:	b580      	push	{r7, lr}
 802840a:	b088      	sub	sp, #32
 802840c:	af00      	add	r7, sp, #0
 802840e:	60f8      	str	r0, [r7, #12]
 8028410:	60b9      	str	r1, [r7, #8]
 8028412:	603b      	str	r3, [r7, #0]
 8028414:	4613      	mov	r3, r2
 8028416:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028418:	2300      	movs	r3, #0
 802841a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 802841c:	68fb      	ldr	r3, [r7, #12]
 802841e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028422:	2b01      	cmp	r3, #1
 8028424:	d101      	bne.n	802842a <HAL_SPI_Transmit+0x22>
 8028426:	2302      	movs	r3, #2
 8028428:	e126      	b.n	8028678 <HAL_SPI_Transmit+0x270>
 802842a:	68fb      	ldr	r3, [r7, #12]
 802842c:	2201      	movs	r2, #1
 802842e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028432:	f7fb f91d 	bl	8023670 <HAL_GetTick>
 8028436:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028438:	88fb      	ldrh	r3, [r7, #6]
 802843a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 802843c:	68fb      	ldr	r3, [r7, #12]
 802843e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028442:	b2db      	uxtb	r3, r3
 8028444:	2b01      	cmp	r3, #1
 8028446:	d002      	beq.n	802844e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028448:	2302      	movs	r3, #2
 802844a:	77fb      	strb	r3, [r7, #31]
    goto error;
 802844c:	e10b      	b.n	8028666 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 802844e:	68bb      	ldr	r3, [r7, #8]
 8028450:	2b00      	cmp	r3, #0
 8028452:	d002      	beq.n	802845a <HAL_SPI_Transmit+0x52>
 8028454:	88fb      	ldrh	r3, [r7, #6]
 8028456:	2b00      	cmp	r3, #0
 8028458:	d102      	bne.n	8028460 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802845a:	2301      	movs	r3, #1
 802845c:	77fb      	strb	r3, [r7, #31]
    goto error;
 802845e:	e102      	b.n	8028666 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028460:	68fb      	ldr	r3, [r7, #12]
 8028462:	2203      	movs	r2, #3
 8028464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028468:	68fb      	ldr	r3, [r7, #12]
 802846a:	2200      	movs	r2, #0
 802846c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 802846e:	68fb      	ldr	r3, [r7, #12]
 8028470:	68ba      	ldr	r2, [r7, #8]
 8028472:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028474:	68fb      	ldr	r3, [r7, #12]
 8028476:	88fa      	ldrh	r2, [r7, #6]
 8028478:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 802847a:	68fb      	ldr	r3, [r7, #12]
 802847c:	88fa      	ldrh	r2, [r7, #6]
 802847e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028480:	68fb      	ldr	r3, [r7, #12]
 8028482:	2200      	movs	r2, #0
 8028484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028486:	68fb      	ldr	r3, [r7, #12]
 8028488:	2200      	movs	r2, #0
 802848a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 802848c:	68fb      	ldr	r3, [r7, #12]
 802848e:	2200      	movs	r2, #0
 8028490:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028492:	68fb      	ldr	r3, [r7, #12]
 8028494:	2200      	movs	r2, #0
 8028496:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028498:	68fb      	ldr	r3, [r7, #12]
 802849a:	2200      	movs	r2, #0
 802849c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802849e:	68fb      	ldr	r3, [r7, #12]
 80284a0:	689b      	ldr	r3, [r3, #8]
 80284a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80284a6:	d10f      	bne.n	80284c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80284a8:	68fb      	ldr	r3, [r7, #12]
 80284aa:	681b      	ldr	r3, [r3, #0]
 80284ac:	681a      	ldr	r2, [r3, #0]
 80284ae:	68fb      	ldr	r3, [r7, #12]
 80284b0:	681b      	ldr	r3, [r3, #0]
 80284b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80284b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80284b8:	68fb      	ldr	r3, [r7, #12]
 80284ba:	681b      	ldr	r3, [r3, #0]
 80284bc:	681a      	ldr	r2, [r3, #0]
 80284be:	68fb      	ldr	r3, [r7, #12]
 80284c0:	681b      	ldr	r3, [r3, #0]
 80284c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80284c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80284c8:	68fb      	ldr	r3, [r7, #12]
 80284ca:	681b      	ldr	r3, [r3, #0]
 80284cc:	681b      	ldr	r3, [r3, #0]
 80284ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80284d2:	2b40      	cmp	r3, #64	; 0x40
 80284d4:	d007      	beq.n	80284e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80284d6:	68fb      	ldr	r3, [r7, #12]
 80284d8:	681b      	ldr	r3, [r3, #0]
 80284da:	681a      	ldr	r2, [r3, #0]
 80284dc:	68fb      	ldr	r3, [r7, #12]
 80284de:	681b      	ldr	r3, [r3, #0]
 80284e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80284e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80284e6:	68fb      	ldr	r3, [r7, #12]
 80284e8:	68db      	ldr	r3, [r3, #12]
 80284ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80284ee:	d14b      	bne.n	8028588 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80284f0:	68fb      	ldr	r3, [r7, #12]
 80284f2:	685b      	ldr	r3, [r3, #4]
 80284f4:	2b00      	cmp	r3, #0
 80284f6:	d002      	beq.n	80284fe <HAL_SPI_Transmit+0xf6>
 80284f8:	8afb      	ldrh	r3, [r7, #22]
 80284fa:	2b01      	cmp	r3, #1
 80284fc:	d13e      	bne.n	802857c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80284fe:	68fb      	ldr	r3, [r7, #12]
 8028500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028502:	881a      	ldrh	r2, [r3, #0]
 8028504:	68fb      	ldr	r3, [r7, #12]
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802850a:	68fb      	ldr	r3, [r7, #12]
 802850c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802850e:	1c9a      	adds	r2, r3, #2
 8028510:	68fb      	ldr	r3, [r7, #12]
 8028512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028514:	68fb      	ldr	r3, [r7, #12]
 8028516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028518:	b29b      	uxth	r3, r3
 802851a:	3b01      	subs	r3, #1
 802851c:	b29a      	uxth	r2, r3
 802851e:	68fb      	ldr	r3, [r7, #12]
 8028520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028522:	e02b      	b.n	802857c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028524:	68fb      	ldr	r3, [r7, #12]
 8028526:	681b      	ldr	r3, [r3, #0]
 8028528:	689b      	ldr	r3, [r3, #8]
 802852a:	f003 0302 	and.w	r3, r3, #2
 802852e:	2b02      	cmp	r3, #2
 8028530:	d112      	bne.n	8028558 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028532:	68fb      	ldr	r3, [r7, #12]
 8028534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028536:	881a      	ldrh	r2, [r3, #0]
 8028538:	68fb      	ldr	r3, [r7, #12]
 802853a:	681b      	ldr	r3, [r3, #0]
 802853c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 802853e:	68fb      	ldr	r3, [r7, #12]
 8028540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028542:	1c9a      	adds	r2, r3, #2
 8028544:	68fb      	ldr	r3, [r7, #12]
 8028546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028548:	68fb      	ldr	r3, [r7, #12]
 802854a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802854c:	b29b      	uxth	r3, r3
 802854e:	3b01      	subs	r3, #1
 8028550:	b29a      	uxth	r2, r3
 8028552:	68fb      	ldr	r3, [r7, #12]
 8028554:	86da      	strh	r2, [r3, #54]	; 0x36
 8028556:	e011      	b.n	802857c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028558:	f7fb f88a 	bl	8023670 <HAL_GetTick>
 802855c:	4602      	mov	r2, r0
 802855e:	69bb      	ldr	r3, [r7, #24]
 8028560:	1ad3      	subs	r3, r2, r3
 8028562:	683a      	ldr	r2, [r7, #0]
 8028564:	429a      	cmp	r2, r3
 8028566:	d803      	bhi.n	8028570 <HAL_SPI_Transmit+0x168>
 8028568:	683b      	ldr	r3, [r7, #0]
 802856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802856e:	d102      	bne.n	8028576 <HAL_SPI_Transmit+0x16e>
 8028570:	683b      	ldr	r3, [r7, #0]
 8028572:	2b00      	cmp	r3, #0
 8028574:	d102      	bne.n	802857c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8028576:	2303      	movs	r3, #3
 8028578:	77fb      	strb	r3, [r7, #31]
          goto error;
 802857a:	e074      	b.n	8028666 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802857c:	68fb      	ldr	r3, [r7, #12]
 802857e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028580:	b29b      	uxth	r3, r3
 8028582:	2b00      	cmp	r3, #0
 8028584:	d1ce      	bne.n	8028524 <HAL_SPI_Transmit+0x11c>
 8028586:	e04c      	b.n	8028622 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028588:	68fb      	ldr	r3, [r7, #12]
 802858a:	685b      	ldr	r3, [r3, #4]
 802858c:	2b00      	cmp	r3, #0
 802858e:	d002      	beq.n	8028596 <HAL_SPI_Transmit+0x18e>
 8028590:	8afb      	ldrh	r3, [r7, #22]
 8028592:	2b01      	cmp	r3, #1
 8028594:	d140      	bne.n	8028618 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028596:	68fb      	ldr	r3, [r7, #12]
 8028598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802859a:	68fb      	ldr	r3, [r7, #12]
 802859c:	681b      	ldr	r3, [r3, #0]
 802859e:	330c      	adds	r3, #12
 80285a0:	7812      	ldrb	r2, [r2, #0]
 80285a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80285a4:	68fb      	ldr	r3, [r7, #12]
 80285a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285a8:	1c5a      	adds	r2, r3, #1
 80285aa:	68fb      	ldr	r3, [r7, #12]
 80285ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80285ae:	68fb      	ldr	r3, [r7, #12]
 80285b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80285b2:	b29b      	uxth	r3, r3
 80285b4:	3b01      	subs	r3, #1
 80285b6:	b29a      	uxth	r2, r3
 80285b8:	68fb      	ldr	r3, [r7, #12]
 80285ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80285bc:	e02c      	b.n	8028618 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80285be:	68fb      	ldr	r3, [r7, #12]
 80285c0:	681b      	ldr	r3, [r3, #0]
 80285c2:	689b      	ldr	r3, [r3, #8]
 80285c4:	f003 0302 	and.w	r3, r3, #2
 80285c8:	2b02      	cmp	r3, #2
 80285ca:	d113      	bne.n	80285f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80285cc:	68fb      	ldr	r3, [r7, #12]
 80285ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80285d0:	68fb      	ldr	r3, [r7, #12]
 80285d2:	681b      	ldr	r3, [r3, #0]
 80285d4:	330c      	adds	r3, #12
 80285d6:	7812      	ldrb	r2, [r2, #0]
 80285d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80285da:	68fb      	ldr	r3, [r7, #12]
 80285dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285de:	1c5a      	adds	r2, r3, #1
 80285e0:	68fb      	ldr	r3, [r7, #12]
 80285e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80285e4:	68fb      	ldr	r3, [r7, #12]
 80285e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80285e8:	b29b      	uxth	r3, r3
 80285ea:	3b01      	subs	r3, #1
 80285ec:	b29a      	uxth	r2, r3
 80285ee:	68fb      	ldr	r3, [r7, #12]
 80285f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80285f2:	e011      	b.n	8028618 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80285f4:	f7fb f83c 	bl	8023670 <HAL_GetTick>
 80285f8:	4602      	mov	r2, r0
 80285fa:	69bb      	ldr	r3, [r7, #24]
 80285fc:	1ad3      	subs	r3, r2, r3
 80285fe:	683a      	ldr	r2, [r7, #0]
 8028600:	429a      	cmp	r2, r3
 8028602:	d803      	bhi.n	802860c <HAL_SPI_Transmit+0x204>
 8028604:	683b      	ldr	r3, [r7, #0]
 8028606:	f1b3 3fff 	cmp.w	r3, #4294967295
 802860a:	d102      	bne.n	8028612 <HAL_SPI_Transmit+0x20a>
 802860c:	683b      	ldr	r3, [r7, #0]
 802860e:	2b00      	cmp	r3, #0
 8028610:	d102      	bne.n	8028618 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8028612:	2303      	movs	r3, #3
 8028614:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028616:	e026      	b.n	8028666 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8028618:	68fb      	ldr	r3, [r7, #12]
 802861a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802861c:	b29b      	uxth	r3, r3
 802861e:	2b00      	cmp	r3, #0
 8028620:	d1cd      	bne.n	80285be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028622:	69ba      	ldr	r2, [r7, #24]
 8028624:	6839      	ldr	r1, [r7, #0]
 8028626:	68f8      	ldr	r0, [r7, #12]
 8028628:	f000 fbda 	bl	8028de0 <SPI_EndRxTxTransaction>
 802862c:	4603      	mov	r3, r0
 802862e:	2b00      	cmp	r3, #0
 8028630:	d002      	beq.n	8028638 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028632:	68fb      	ldr	r3, [r7, #12]
 8028634:	2220      	movs	r2, #32
 8028636:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028638:	68fb      	ldr	r3, [r7, #12]
 802863a:	689b      	ldr	r3, [r3, #8]
 802863c:	2b00      	cmp	r3, #0
 802863e:	d10a      	bne.n	8028656 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028640:	2300      	movs	r3, #0
 8028642:	613b      	str	r3, [r7, #16]
 8028644:	68fb      	ldr	r3, [r7, #12]
 8028646:	681b      	ldr	r3, [r3, #0]
 8028648:	68db      	ldr	r3, [r3, #12]
 802864a:	613b      	str	r3, [r7, #16]
 802864c:	68fb      	ldr	r3, [r7, #12]
 802864e:	681b      	ldr	r3, [r3, #0]
 8028650:	689b      	ldr	r3, [r3, #8]
 8028652:	613b      	str	r3, [r7, #16]
 8028654:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028656:	68fb      	ldr	r3, [r7, #12]
 8028658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802865a:	2b00      	cmp	r3, #0
 802865c:	d002      	beq.n	8028664 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 802865e:	2301      	movs	r3, #1
 8028660:	77fb      	strb	r3, [r7, #31]
 8028662:	e000      	b.n	8028666 <HAL_SPI_Transmit+0x25e>
  }

error:
 8028664:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028666:	68fb      	ldr	r3, [r7, #12]
 8028668:	2201      	movs	r2, #1
 802866a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 802866e:	68fb      	ldr	r3, [r7, #12]
 8028670:	2200      	movs	r2, #0
 8028672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028676:	7ffb      	ldrb	r3, [r7, #31]
}
 8028678:	4618      	mov	r0, r3
 802867a:	3720      	adds	r7, #32
 802867c:	46bd      	mov	sp, r7
 802867e:	bd80      	pop	{r7, pc}

08028680 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028680:	b580      	push	{r7, lr}
 8028682:	b088      	sub	sp, #32
 8028684:	af02      	add	r7, sp, #8
 8028686:	60f8      	str	r0, [r7, #12]
 8028688:	60b9      	str	r1, [r7, #8]
 802868a:	603b      	str	r3, [r7, #0]
 802868c:	4613      	mov	r3, r2
 802868e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028690:	2300      	movs	r3, #0
 8028692:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028694:	68fb      	ldr	r3, [r7, #12]
 8028696:	685b      	ldr	r3, [r3, #4]
 8028698:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802869c:	d112      	bne.n	80286c4 <HAL_SPI_Receive+0x44>
 802869e:	68fb      	ldr	r3, [r7, #12]
 80286a0:	689b      	ldr	r3, [r3, #8]
 80286a2:	2b00      	cmp	r3, #0
 80286a4:	d10e      	bne.n	80286c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80286a6:	68fb      	ldr	r3, [r7, #12]
 80286a8:	2204      	movs	r2, #4
 80286aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80286ae:	88fa      	ldrh	r2, [r7, #6]
 80286b0:	683b      	ldr	r3, [r7, #0]
 80286b2:	9300      	str	r3, [sp, #0]
 80286b4:	4613      	mov	r3, r2
 80286b6:	68ba      	ldr	r2, [r7, #8]
 80286b8:	68b9      	ldr	r1, [r7, #8]
 80286ba:	68f8      	ldr	r0, [r7, #12]
 80286bc:	f000 f8f1 	bl	80288a2 <HAL_SPI_TransmitReceive>
 80286c0:	4603      	mov	r3, r0
 80286c2:	e0ea      	b.n	802889a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80286c4:	68fb      	ldr	r3, [r7, #12]
 80286c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80286ca:	2b01      	cmp	r3, #1
 80286cc:	d101      	bne.n	80286d2 <HAL_SPI_Receive+0x52>
 80286ce:	2302      	movs	r3, #2
 80286d0:	e0e3      	b.n	802889a <HAL_SPI_Receive+0x21a>
 80286d2:	68fb      	ldr	r3, [r7, #12]
 80286d4:	2201      	movs	r2, #1
 80286d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80286da:	f7fa ffc9 	bl	8023670 <HAL_GetTick>
 80286de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80286e0:	68fb      	ldr	r3, [r7, #12]
 80286e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80286e6:	b2db      	uxtb	r3, r3
 80286e8:	2b01      	cmp	r3, #1
 80286ea:	d002      	beq.n	80286f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80286ec:	2302      	movs	r3, #2
 80286ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80286f0:	e0ca      	b.n	8028888 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80286f2:	68bb      	ldr	r3, [r7, #8]
 80286f4:	2b00      	cmp	r3, #0
 80286f6:	d002      	beq.n	80286fe <HAL_SPI_Receive+0x7e>
 80286f8:	88fb      	ldrh	r3, [r7, #6]
 80286fa:	2b00      	cmp	r3, #0
 80286fc:	d102      	bne.n	8028704 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80286fe:	2301      	movs	r3, #1
 8028700:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028702:	e0c1      	b.n	8028888 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028704:	68fb      	ldr	r3, [r7, #12]
 8028706:	2204      	movs	r2, #4
 8028708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802870c:	68fb      	ldr	r3, [r7, #12]
 802870e:	2200      	movs	r2, #0
 8028710:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028712:	68fb      	ldr	r3, [r7, #12]
 8028714:	68ba      	ldr	r2, [r7, #8]
 8028716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028718:	68fb      	ldr	r3, [r7, #12]
 802871a:	88fa      	ldrh	r2, [r7, #6]
 802871c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802871e:	68fb      	ldr	r3, [r7, #12]
 8028720:	88fa      	ldrh	r2, [r7, #6]
 8028722:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028724:	68fb      	ldr	r3, [r7, #12]
 8028726:	2200      	movs	r2, #0
 8028728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802872a:	68fb      	ldr	r3, [r7, #12]
 802872c:	2200      	movs	r2, #0
 802872e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028730:	68fb      	ldr	r3, [r7, #12]
 8028732:	2200      	movs	r2, #0
 8028734:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028736:	68fb      	ldr	r3, [r7, #12]
 8028738:	2200      	movs	r2, #0
 802873a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 802873c:	68fb      	ldr	r3, [r7, #12]
 802873e:	2200      	movs	r2, #0
 8028740:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028742:	68fb      	ldr	r3, [r7, #12]
 8028744:	689b      	ldr	r3, [r3, #8]
 8028746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802874a:	d10f      	bne.n	802876c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 802874c:	68fb      	ldr	r3, [r7, #12]
 802874e:	681b      	ldr	r3, [r3, #0]
 8028750:	681a      	ldr	r2, [r3, #0]
 8028752:	68fb      	ldr	r3, [r7, #12]
 8028754:	681b      	ldr	r3, [r3, #0]
 8028756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802875a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 802875c:	68fb      	ldr	r3, [r7, #12]
 802875e:	681b      	ldr	r3, [r3, #0]
 8028760:	681a      	ldr	r2, [r3, #0]
 8028762:	68fb      	ldr	r3, [r7, #12]
 8028764:	681b      	ldr	r3, [r3, #0]
 8028766:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802876a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 802876c:	68fb      	ldr	r3, [r7, #12]
 802876e:	681b      	ldr	r3, [r3, #0]
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028776:	2b40      	cmp	r3, #64	; 0x40
 8028778:	d007      	beq.n	802878a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802877a:	68fb      	ldr	r3, [r7, #12]
 802877c:	681b      	ldr	r3, [r3, #0]
 802877e:	681a      	ldr	r2, [r3, #0]
 8028780:	68fb      	ldr	r3, [r7, #12]
 8028782:	681b      	ldr	r3, [r3, #0]
 8028784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028788:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 802878a:	68fb      	ldr	r3, [r7, #12]
 802878c:	68db      	ldr	r3, [r3, #12]
 802878e:	2b00      	cmp	r3, #0
 8028790:	d162      	bne.n	8028858 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028792:	e02e      	b.n	80287f2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028794:	68fb      	ldr	r3, [r7, #12]
 8028796:	681b      	ldr	r3, [r3, #0]
 8028798:	689b      	ldr	r3, [r3, #8]
 802879a:	f003 0301 	and.w	r3, r3, #1
 802879e:	2b01      	cmp	r3, #1
 80287a0:	d115      	bne.n	80287ce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80287a2:	68fb      	ldr	r3, [r7, #12]
 80287a4:	681b      	ldr	r3, [r3, #0]
 80287a6:	f103 020c 	add.w	r2, r3, #12
 80287aa:	68fb      	ldr	r3, [r7, #12]
 80287ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287ae:	7812      	ldrb	r2, [r2, #0]
 80287b0:	b2d2      	uxtb	r2, r2
 80287b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80287b4:	68fb      	ldr	r3, [r7, #12]
 80287b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80287b8:	1c5a      	adds	r2, r3, #1
 80287ba:	68fb      	ldr	r3, [r7, #12]
 80287bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80287be:	68fb      	ldr	r3, [r7, #12]
 80287c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80287c2:	b29b      	uxth	r3, r3
 80287c4:	3b01      	subs	r3, #1
 80287c6:	b29a      	uxth	r2, r3
 80287c8:	68fb      	ldr	r3, [r7, #12]
 80287ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80287cc:	e011      	b.n	80287f2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80287ce:	f7fa ff4f 	bl	8023670 <HAL_GetTick>
 80287d2:	4602      	mov	r2, r0
 80287d4:	693b      	ldr	r3, [r7, #16]
 80287d6:	1ad3      	subs	r3, r2, r3
 80287d8:	683a      	ldr	r2, [r7, #0]
 80287da:	429a      	cmp	r2, r3
 80287dc:	d803      	bhi.n	80287e6 <HAL_SPI_Receive+0x166>
 80287de:	683b      	ldr	r3, [r7, #0]
 80287e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80287e4:	d102      	bne.n	80287ec <HAL_SPI_Receive+0x16c>
 80287e6:	683b      	ldr	r3, [r7, #0]
 80287e8:	2b00      	cmp	r3, #0
 80287ea:	d102      	bne.n	80287f2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80287ec:	2303      	movs	r3, #3
 80287ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80287f0:	e04a      	b.n	8028888 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80287f2:	68fb      	ldr	r3, [r7, #12]
 80287f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80287f6:	b29b      	uxth	r3, r3
 80287f8:	2b00      	cmp	r3, #0
 80287fa:	d1cb      	bne.n	8028794 <HAL_SPI_Receive+0x114>
 80287fc:	e031      	b.n	8028862 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80287fe:	68fb      	ldr	r3, [r7, #12]
 8028800:	681b      	ldr	r3, [r3, #0]
 8028802:	689b      	ldr	r3, [r3, #8]
 8028804:	f003 0301 	and.w	r3, r3, #1
 8028808:	2b01      	cmp	r3, #1
 802880a:	d113      	bne.n	8028834 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802880c:	68fb      	ldr	r3, [r7, #12]
 802880e:	681b      	ldr	r3, [r3, #0]
 8028810:	68da      	ldr	r2, [r3, #12]
 8028812:	68fb      	ldr	r3, [r7, #12]
 8028814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028816:	b292      	uxth	r2, r2
 8028818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802881a:	68fb      	ldr	r3, [r7, #12]
 802881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802881e:	1c9a      	adds	r2, r3, #2
 8028820:	68fb      	ldr	r3, [r7, #12]
 8028822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028824:	68fb      	ldr	r3, [r7, #12]
 8028826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028828:	b29b      	uxth	r3, r3
 802882a:	3b01      	subs	r3, #1
 802882c:	b29a      	uxth	r2, r3
 802882e:	68fb      	ldr	r3, [r7, #12]
 8028830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028832:	e011      	b.n	8028858 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028834:	f7fa ff1c 	bl	8023670 <HAL_GetTick>
 8028838:	4602      	mov	r2, r0
 802883a:	693b      	ldr	r3, [r7, #16]
 802883c:	1ad3      	subs	r3, r2, r3
 802883e:	683a      	ldr	r2, [r7, #0]
 8028840:	429a      	cmp	r2, r3
 8028842:	d803      	bhi.n	802884c <HAL_SPI_Receive+0x1cc>
 8028844:	683b      	ldr	r3, [r7, #0]
 8028846:	f1b3 3fff 	cmp.w	r3, #4294967295
 802884a:	d102      	bne.n	8028852 <HAL_SPI_Receive+0x1d2>
 802884c:	683b      	ldr	r3, [r7, #0]
 802884e:	2b00      	cmp	r3, #0
 8028850:	d102      	bne.n	8028858 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8028852:	2303      	movs	r3, #3
 8028854:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028856:	e017      	b.n	8028888 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8028858:	68fb      	ldr	r3, [r7, #12]
 802885a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802885c:	b29b      	uxth	r3, r3
 802885e:	2b00      	cmp	r3, #0
 8028860:	d1cd      	bne.n	80287fe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028862:	693a      	ldr	r2, [r7, #16]
 8028864:	6839      	ldr	r1, [r7, #0]
 8028866:	68f8      	ldr	r0, [r7, #12]
 8028868:	f000 fa54 	bl	8028d14 <SPI_EndRxTransaction>
 802886c:	4603      	mov	r3, r0
 802886e:	2b00      	cmp	r3, #0
 8028870:	d002      	beq.n	8028878 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028872:	68fb      	ldr	r3, [r7, #12]
 8028874:	2220      	movs	r2, #32
 8028876:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028878:	68fb      	ldr	r3, [r7, #12]
 802887a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802887c:	2b00      	cmp	r3, #0
 802887e:	d002      	beq.n	8028886 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8028880:	2301      	movs	r3, #1
 8028882:	75fb      	strb	r3, [r7, #23]
 8028884:	e000      	b.n	8028888 <HAL_SPI_Receive+0x208>
  }

error :
 8028886:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028888:	68fb      	ldr	r3, [r7, #12]
 802888a:	2201      	movs	r2, #1
 802888c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028890:	68fb      	ldr	r3, [r7, #12]
 8028892:	2200      	movs	r2, #0
 8028894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028898:	7dfb      	ldrb	r3, [r7, #23]
}
 802889a:	4618      	mov	r0, r3
 802889c:	3718      	adds	r7, #24
 802889e:	46bd      	mov	sp, r7
 80288a0:	bd80      	pop	{r7, pc}

080288a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80288a2:	b580      	push	{r7, lr}
 80288a4:	b08c      	sub	sp, #48	; 0x30
 80288a6:	af00      	add	r7, sp, #0
 80288a8:	60f8      	str	r0, [r7, #12]
 80288aa:	60b9      	str	r1, [r7, #8]
 80288ac:	607a      	str	r2, [r7, #4]
 80288ae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80288b0:	2301      	movs	r3, #1
 80288b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80288b4:	2300      	movs	r3, #0
 80288b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80288ba:	68fb      	ldr	r3, [r7, #12]
 80288bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80288c0:	2b01      	cmp	r3, #1
 80288c2:	d101      	bne.n	80288c8 <HAL_SPI_TransmitReceive+0x26>
 80288c4:	2302      	movs	r3, #2
 80288c6:	e18a      	b.n	8028bde <HAL_SPI_TransmitReceive+0x33c>
 80288c8:	68fb      	ldr	r3, [r7, #12]
 80288ca:	2201      	movs	r2, #1
 80288cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80288d0:	f7fa fece 	bl	8023670 <HAL_GetTick>
 80288d4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80288d6:	68fb      	ldr	r3, [r7, #12]
 80288d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80288dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	685b      	ldr	r3, [r3, #4]
 80288e4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80288e6:	887b      	ldrh	r3, [r7, #2]
 80288e8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80288ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80288ee:	2b01      	cmp	r3, #1
 80288f0:	d00f      	beq.n	8028912 <HAL_SPI_TransmitReceive+0x70>
 80288f2:	69fb      	ldr	r3, [r7, #28]
 80288f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80288f8:	d107      	bne.n	802890a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80288fa:	68fb      	ldr	r3, [r7, #12]
 80288fc:	689b      	ldr	r3, [r3, #8]
 80288fe:	2b00      	cmp	r3, #0
 8028900:	d103      	bne.n	802890a <HAL_SPI_TransmitReceive+0x68>
 8028902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028906:	2b04      	cmp	r3, #4
 8028908:	d003      	beq.n	8028912 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802890a:	2302      	movs	r3, #2
 802890c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028910:	e15b      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028912:	68bb      	ldr	r3, [r7, #8]
 8028914:	2b00      	cmp	r3, #0
 8028916:	d005      	beq.n	8028924 <HAL_SPI_TransmitReceive+0x82>
 8028918:	687b      	ldr	r3, [r7, #4]
 802891a:	2b00      	cmp	r3, #0
 802891c:	d002      	beq.n	8028924 <HAL_SPI_TransmitReceive+0x82>
 802891e:	887b      	ldrh	r3, [r7, #2]
 8028920:	2b00      	cmp	r3, #0
 8028922:	d103      	bne.n	802892c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028924:	2301      	movs	r3, #1
 8028926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802892a:	e14e      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 802892c:	68fb      	ldr	r3, [r7, #12]
 802892e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028932:	b2db      	uxtb	r3, r3
 8028934:	2b04      	cmp	r3, #4
 8028936:	d003      	beq.n	8028940 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028938:	68fb      	ldr	r3, [r7, #12]
 802893a:	2205      	movs	r2, #5
 802893c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028940:	68fb      	ldr	r3, [r7, #12]
 8028942:	2200      	movs	r2, #0
 8028944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028946:	68fb      	ldr	r3, [r7, #12]
 8028948:	687a      	ldr	r2, [r7, #4]
 802894a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 802894c:	68fb      	ldr	r3, [r7, #12]
 802894e:	887a      	ldrh	r2, [r7, #2]
 8028950:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028952:	68fb      	ldr	r3, [r7, #12]
 8028954:	887a      	ldrh	r2, [r7, #2]
 8028956:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028958:	68fb      	ldr	r3, [r7, #12]
 802895a:	68ba      	ldr	r2, [r7, #8]
 802895c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 802895e:	68fb      	ldr	r3, [r7, #12]
 8028960:	887a      	ldrh	r2, [r7, #2]
 8028962:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028964:	68fb      	ldr	r3, [r7, #12]
 8028966:	887a      	ldrh	r2, [r7, #2]
 8028968:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802896a:	68fb      	ldr	r3, [r7, #12]
 802896c:	2200      	movs	r2, #0
 802896e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028970:	68fb      	ldr	r3, [r7, #12]
 8028972:	2200      	movs	r2, #0
 8028974:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028976:	68fb      	ldr	r3, [r7, #12]
 8028978:	681b      	ldr	r3, [r3, #0]
 802897a:	681b      	ldr	r3, [r3, #0]
 802897c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028980:	2b40      	cmp	r3, #64	; 0x40
 8028982:	d007      	beq.n	8028994 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028984:	68fb      	ldr	r3, [r7, #12]
 8028986:	681b      	ldr	r3, [r3, #0]
 8028988:	681a      	ldr	r2, [r3, #0]
 802898a:	68fb      	ldr	r3, [r7, #12]
 802898c:	681b      	ldr	r3, [r3, #0]
 802898e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028994:	68fb      	ldr	r3, [r7, #12]
 8028996:	68db      	ldr	r3, [r3, #12]
 8028998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802899c:	d178      	bne.n	8028a90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802899e:	68fb      	ldr	r3, [r7, #12]
 80289a0:	685b      	ldr	r3, [r3, #4]
 80289a2:	2b00      	cmp	r3, #0
 80289a4:	d002      	beq.n	80289ac <HAL_SPI_TransmitReceive+0x10a>
 80289a6:	8b7b      	ldrh	r3, [r7, #26]
 80289a8:	2b01      	cmp	r3, #1
 80289aa:	d166      	bne.n	8028a7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289ac:	68fb      	ldr	r3, [r7, #12]
 80289ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289b0:	881a      	ldrh	r2, [r3, #0]
 80289b2:	68fb      	ldr	r3, [r7, #12]
 80289b4:	681b      	ldr	r3, [r3, #0]
 80289b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80289b8:	68fb      	ldr	r3, [r7, #12]
 80289ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289bc:	1c9a      	adds	r2, r3, #2
 80289be:	68fb      	ldr	r3, [r7, #12]
 80289c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289c2:	68fb      	ldr	r3, [r7, #12]
 80289c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289c6:	b29b      	uxth	r3, r3
 80289c8:	3b01      	subs	r3, #1
 80289ca:	b29a      	uxth	r2, r3
 80289cc:	68fb      	ldr	r3, [r7, #12]
 80289ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80289d0:	e053      	b.n	8028a7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80289d2:	68fb      	ldr	r3, [r7, #12]
 80289d4:	681b      	ldr	r3, [r3, #0]
 80289d6:	689b      	ldr	r3, [r3, #8]
 80289d8:	f003 0302 	and.w	r3, r3, #2
 80289dc:	2b02      	cmp	r3, #2
 80289de:	d11b      	bne.n	8028a18 <HAL_SPI_TransmitReceive+0x176>
 80289e0:	68fb      	ldr	r3, [r7, #12]
 80289e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289e4:	b29b      	uxth	r3, r3
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	d016      	beq.n	8028a18 <HAL_SPI_TransmitReceive+0x176>
 80289ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80289ec:	2b01      	cmp	r3, #1
 80289ee:	d113      	bne.n	8028a18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80289f0:	68fb      	ldr	r3, [r7, #12]
 80289f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289f4:	881a      	ldrh	r2, [r3, #0]
 80289f6:	68fb      	ldr	r3, [r7, #12]
 80289f8:	681b      	ldr	r3, [r3, #0]
 80289fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80289fc:	68fb      	ldr	r3, [r7, #12]
 80289fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a00:	1c9a      	adds	r2, r3, #2
 8028a02:	68fb      	ldr	r3, [r7, #12]
 8028a04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a06:	68fb      	ldr	r3, [r7, #12]
 8028a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a0a:	b29b      	uxth	r3, r3
 8028a0c:	3b01      	subs	r3, #1
 8028a0e:	b29a      	uxth	r2, r3
 8028a10:	68fb      	ldr	r3, [r7, #12]
 8028a12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028a14:	2300      	movs	r3, #0
 8028a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028a18:	68fb      	ldr	r3, [r7, #12]
 8028a1a:	681b      	ldr	r3, [r3, #0]
 8028a1c:	689b      	ldr	r3, [r3, #8]
 8028a1e:	f003 0301 	and.w	r3, r3, #1
 8028a22:	2b01      	cmp	r3, #1
 8028a24:	d119      	bne.n	8028a5a <HAL_SPI_TransmitReceive+0x1b8>
 8028a26:	68fb      	ldr	r3, [r7, #12]
 8028a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a2a:	b29b      	uxth	r3, r3
 8028a2c:	2b00      	cmp	r3, #0
 8028a2e:	d014      	beq.n	8028a5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	681b      	ldr	r3, [r3, #0]
 8028a34:	68da      	ldr	r2, [r3, #12]
 8028a36:	68fb      	ldr	r3, [r7, #12]
 8028a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a3a:	b292      	uxth	r2, r2
 8028a3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028a3e:	68fb      	ldr	r3, [r7, #12]
 8028a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a42:	1c9a      	adds	r2, r3, #2
 8028a44:	68fb      	ldr	r3, [r7, #12]
 8028a46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a4c:	b29b      	uxth	r3, r3
 8028a4e:	3b01      	subs	r3, #1
 8028a50:	b29a      	uxth	r2, r3
 8028a52:	68fb      	ldr	r3, [r7, #12]
 8028a54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028a56:	2301      	movs	r3, #1
 8028a58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028a5a:	f7fa fe09 	bl	8023670 <HAL_GetTick>
 8028a5e:	4602      	mov	r2, r0
 8028a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a62:	1ad3      	subs	r3, r2, r3
 8028a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028a66:	429a      	cmp	r2, r3
 8028a68:	d807      	bhi.n	8028a7a <HAL_SPI_TransmitReceive+0x1d8>
 8028a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a70:	d003      	beq.n	8028a7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8028a72:	2303      	movs	r3, #3
 8028a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028a78:	e0a7      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028a7a:	68fb      	ldr	r3, [r7, #12]
 8028a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a7e:	b29b      	uxth	r3, r3
 8028a80:	2b00      	cmp	r3, #0
 8028a82:	d1a6      	bne.n	80289d2 <HAL_SPI_TransmitReceive+0x130>
 8028a84:	68fb      	ldr	r3, [r7, #12]
 8028a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a88:	b29b      	uxth	r3, r3
 8028a8a:	2b00      	cmp	r3, #0
 8028a8c:	d1a1      	bne.n	80289d2 <HAL_SPI_TransmitReceive+0x130>
 8028a8e:	e07c      	b.n	8028b8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	685b      	ldr	r3, [r3, #4]
 8028a94:	2b00      	cmp	r3, #0
 8028a96:	d002      	beq.n	8028a9e <HAL_SPI_TransmitReceive+0x1fc>
 8028a98:	8b7b      	ldrh	r3, [r7, #26]
 8028a9a:	2b01      	cmp	r3, #1
 8028a9c:	d16b      	bne.n	8028b76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028a9e:	68fb      	ldr	r3, [r7, #12]
 8028aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028aa2:	68fb      	ldr	r3, [r7, #12]
 8028aa4:	681b      	ldr	r3, [r3, #0]
 8028aa6:	330c      	adds	r3, #12
 8028aa8:	7812      	ldrb	r2, [r2, #0]
 8028aaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028aac:	68fb      	ldr	r3, [r7, #12]
 8028aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ab0:	1c5a      	adds	r2, r3, #1
 8028ab2:	68fb      	ldr	r3, [r7, #12]
 8028ab4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028ab6:	68fb      	ldr	r3, [r7, #12]
 8028ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028aba:	b29b      	uxth	r3, r3
 8028abc:	3b01      	subs	r3, #1
 8028abe:	b29a      	uxth	r2, r3
 8028ac0:	68fb      	ldr	r3, [r7, #12]
 8028ac2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028ac4:	e057      	b.n	8028b76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028ac6:	68fb      	ldr	r3, [r7, #12]
 8028ac8:	681b      	ldr	r3, [r3, #0]
 8028aca:	689b      	ldr	r3, [r3, #8]
 8028acc:	f003 0302 	and.w	r3, r3, #2
 8028ad0:	2b02      	cmp	r3, #2
 8028ad2:	d11c      	bne.n	8028b0e <HAL_SPI_TransmitReceive+0x26c>
 8028ad4:	68fb      	ldr	r3, [r7, #12]
 8028ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ad8:	b29b      	uxth	r3, r3
 8028ada:	2b00      	cmp	r3, #0
 8028adc:	d017      	beq.n	8028b0e <HAL_SPI_TransmitReceive+0x26c>
 8028ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ae0:	2b01      	cmp	r3, #1
 8028ae2:	d114      	bne.n	8028b0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028ae4:	68fb      	ldr	r3, [r7, #12]
 8028ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	681b      	ldr	r3, [r3, #0]
 8028aec:	330c      	adds	r3, #12
 8028aee:	7812      	ldrb	r2, [r2, #0]
 8028af0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028af2:	68fb      	ldr	r3, [r7, #12]
 8028af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028af6:	1c5a      	adds	r2, r3, #1
 8028af8:	68fb      	ldr	r3, [r7, #12]
 8028afa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028afc:	68fb      	ldr	r3, [r7, #12]
 8028afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b00:	b29b      	uxth	r3, r3
 8028b02:	3b01      	subs	r3, #1
 8028b04:	b29a      	uxth	r2, r3
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028b0a:	2300      	movs	r3, #0
 8028b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028b0e:	68fb      	ldr	r3, [r7, #12]
 8028b10:	681b      	ldr	r3, [r3, #0]
 8028b12:	689b      	ldr	r3, [r3, #8]
 8028b14:	f003 0301 	and.w	r3, r3, #1
 8028b18:	2b01      	cmp	r3, #1
 8028b1a:	d119      	bne.n	8028b50 <HAL_SPI_TransmitReceive+0x2ae>
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b20:	b29b      	uxth	r3, r3
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	d014      	beq.n	8028b50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028b26:	68fb      	ldr	r3, [r7, #12]
 8028b28:	681b      	ldr	r3, [r3, #0]
 8028b2a:	68da      	ldr	r2, [r3, #12]
 8028b2c:	68fb      	ldr	r3, [r7, #12]
 8028b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b30:	b2d2      	uxtb	r2, r2
 8028b32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028b34:	68fb      	ldr	r3, [r7, #12]
 8028b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b38:	1c5a      	adds	r2, r3, #1
 8028b3a:	68fb      	ldr	r3, [r7, #12]
 8028b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028b3e:	68fb      	ldr	r3, [r7, #12]
 8028b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b42:	b29b      	uxth	r3, r3
 8028b44:	3b01      	subs	r3, #1
 8028b46:	b29a      	uxth	r2, r3
 8028b48:	68fb      	ldr	r3, [r7, #12]
 8028b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028b4c:	2301      	movs	r3, #1
 8028b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028b50:	f7fa fd8e 	bl	8023670 <HAL_GetTick>
 8028b54:	4602      	mov	r2, r0
 8028b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028b58:	1ad3      	subs	r3, r2, r3
 8028b5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028b5c:	429a      	cmp	r2, r3
 8028b5e:	d803      	bhi.n	8028b68 <HAL_SPI_TransmitReceive+0x2c6>
 8028b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b66:	d102      	bne.n	8028b6e <HAL_SPI_TransmitReceive+0x2cc>
 8028b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028b6a:	2b00      	cmp	r3, #0
 8028b6c:	d103      	bne.n	8028b76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028b6e:	2303      	movs	r3, #3
 8028b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028b74:	e029      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028b76:	68fb      	ldr	r3, [r7, #12]
 8028b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b7a:	b29b      	uxth	r3, r3
 8028b7c:	2b00      	cmp	r3, #0
 8028b7e:	d1a2      	bne.n	8028ac6 <HAL_SPI_TransmitReceive+0x224>
 8028b80:	68fb      	ldr	r3, [r7, #12]
 8028b82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028b84:	b29b      	uxth	r3, r3
 8028b86:	2b00      	cmp	r3, #0
 8028b88:	d19d      	bne.n	8028ac6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028b8e:	68f8      	ldr	r0, [r7, #12]
 8028b90:	f000 f926 	bl	8028de0 <SPI_EndRxTxTransaction>
 8028b94:	4603      	mov	r3, r0
 8028b96:	2b00      	cmp	r3, #0
 8028b98:	d006      	beq.n	8028ba8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028b9a:	2301      	movs	r3, #1
 8028b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028ba0:	68fb      	ldr	r3, [r7, #12]
 8028ba2:	2220      	movs	r2, #32
 8028ba4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028ba6:	e010      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028ba8:	68fb      	ldr	r3, [r7, #12]
 8028baa:	689b      	ldr	r3, [r3, #8]
 8028bac:	2b00      	cmp	r3, #0
 8028bae:	d10b      	bne.n	8028bc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028bb0:	2300      	movs	r3, #0
 8028bb2:	617b      	str	r3, [r7, #20]
 8028bb4:	68fb      	ldr	r3, [r7, #12]
 8028bb6:	681b      	ldr	r3, [r3, #0]
 8028bb8:	68db      	ldr	r3, [r3, #12]
 8028bba:	617b      	str	r3, [r7, #20]
 8028bbc:	68fb      	ldr	r3, [r7, #12]
 8028bbe:	681b      	ldr	r3, [r3, #0]
 8028bc0:	689b      	ldr	r3, [r3, #8]
 8028bc2:	617b      	str	r3, [r7, #20]
 8028bc4:	697b      	ldr	r3, [r7, #20]
 8028bc6:	e000      	b.n	8028bca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028bc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028bca:	68fb      	ldr	r3, [r7, #12]
 8028bcc:	2201      	movs	r2, #1
 8028bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028bd2:	68fb      	ldr	r3, [r7, #12]
 8028bd4:	2200      	movs	r2, #0
 8028bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028bde:	4618      	mov	r0, r3
 8028be0:	3730      	adds	r7, #48	; 0x30
 8028be2:	46bd      	mov	sp, r7
 8028be4:	bd80      	pop	{r7, pc}

08028be6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8028be6:	b480      	push	{r7}
 8028be8:	b083      	sub	sp, #12
 8028bea:	af00      	add	r7, sp, #0
 8028bec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028bee:	687b      	ldr	r3, [r7, #4]
 8028bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028bf4:	b2db      	uxtb	r3, r3
}
 8028bf6:	4618      	mov	r0, r3
 8028bf8:	370c      	adds	r7, #12
 8028bfa:	46bd      	mov	sp, r7
 8028bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028c00:	4770      	bx	lr
	...

08028c04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028c04:	b580      	push	{r7, lr}
 8028c06:	b088      	sub	sp, #32
 8028c08:	af00      	add	r7, sp, #0
 8028c0a:	60f8      	str	r0, [r7, #12]
 8028c0c:	60b9      	str	r1, [r7, #8]
 8028c0e:	603b      	str	r3, [r7, #0]
 8028c10:	4613      	mov	r3, r2
 8028c12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028c14:	f7fa fd2c 	bl	8023670 <HAL_GetTick>
 8028c18:	4602      	mov	r2, r0
 8028c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c1c:	1a9b      	subs	r3, r3, r2
 8028c1e:	683a      	ldr	r2, [r7, #0]
 8028c20:	4413      	add	r3, r2
 8028c22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028c24:	f7fa fd24 	bl	8023670 <HAL_GetTick>
 8028c28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028c2a:	4b39      	ldr	r3, [pc, #228]	; (8028d10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028c2c:	681b      	ldr	r3, [r3, #0]
 8028c2e:	015b      	lsls	r3, r3, #5
 8028c30:	0d1b      	lsrs	r3, r3, #20
 8028c32:	69fa      	ldr	r2, [r7, #28]
 8028c34:	fb02 f303 	mul.w	r3, r2, r3
 8028c38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028c3a:	e054      	b.n	8028ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028c3c:	683b      	ldr	r3, [r7, #0]
 8028c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c42:	d050      	beq.n	8028ce6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028c44:	f7fa fd14 	bl	8023670 <HAL_GetTick>
 8028c48:	4602      	mov	r2, r0
 8028c4a:	69bb      	ldr	r3, [r7, #24]
 8028c4c:	1ad3      	subs	r3, r2, r3
 8028c4e:	69fa      	ldr	r2, [r7, #28]
 8028c50:	429a      	cmp	r2, r3
 8028c52:	d902      	bls.n	8028c5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8028c54:	69fb      	ldr	r3, [r7, #28]
 8028c56:	2b00      	cmp	r3, #0
 8028c58:	d13d      	bne.n	8028cd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028c5a:	68fb      	ldr	r3, [r7, #12]
 8028c5c:	681b      	ldr	r3, [r3, #0]
 8028c5e:	685a      	ldr	r2, [r3, #4]
 8028c60:	68fb      	ldr	r3, [r7, #12]
 8028c62:	681b      	ldr	r3, [r3, #0]
 8028c64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028c68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028c6a:	68fb      	ldr	r3, [r7, #12]
 8028c6c:	685b      	ldr	r3, [r3, #4]
 8028c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c72:	d111      	bne.n	8028c98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8028c74:	68fb      	ldr	r3, [r7, #12]
 8028c76:	689b      	ldr	r3, [r3, #8]
 8028c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028c7c:	d004      	beq.n	8028c88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028c7e:	68fb      	ldr	r3, [r7, #12]
 8028c80:	689b      	ldr	r3, [r3, #8]
 8028c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028c86:	d107      	bne.n	8028c98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028c88:	68fb      	ldr	r3, [r7, #12]
 8028c8a:	681b      	ldr	r3, [r3, #0]
 8028c8c:	681a      	ldr	r2, [r3, #0]
 8028c8e:	68fb      	ldr	r3, [r7, #12]
 8028c90:	681b      	ldr	r3, [r3, #0]
 8028c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028c96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028c98:	68fb      	ldr	r3, [r7, #12]
 8028c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028ca0:	d10f      	bne.n	8028cc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028ca2:	68fb      	ldr	r3, [r7, #12]
 8028ca4:	681b      	ldr	r3, [r3, #0]
 8028ca6:	681a      	ldr	r2, [r3, #0]
 8028ca8:	68fb      	ldr	r3, [r7, #12]
 8028caa:	681b      	ldr	r3, [r3, #0]
 8028cac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028cb0:	601a      	str	r2, [r3, #0]
 8028cb2:	68fb      	ldr	r3, [r7, #12]
 8028cb4:	681b      	ldr	r3, [r3, #0]
 8028cb6:	681a      	ldr	r2, [r3, #0]
 8028cb8:	68fb      	ldr	r3, [r7, #12]
 8028cba:	681b      	ldr	r3, [r3, #0]
 8028cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028cc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028cc2:	68fb      	ldr	r3, [r7, #12]
 8028cc4:	2201      	movs	r2, #1
 8028cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	2200      	movs	r2, #0
 8028cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028cd2:	2303      	movs	r3, #3
 8028cd4:	e017      	b.n	8028d06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028cd6:	697b      	ldr	r3, [r7, #20]
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d101      	bne.n	8028ce0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028cdc:	2300      	movs	r3, #0
 8028cde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028ce0:	697b      	ldr	r3, [r7, #20]
 8028ce2:	3b01      	subs	r3, #1
 8028ce4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	689a      	ldr	r2, [r3, #8]
 8028cec:	68bb      	ldr	r3, [r7, #8]
 8028cee:	4013      	ands	r3, r2
 8028cf0:	68ba      	ldr	r2, [r7, #8]
 8028cf2:	429a      	cmp	r2, r3
 8028cf4:	bf0c      	ite	eq
 8028cf6:	2301      	moveq	r3, #1
 8028cf8:	2300      	movne	r3, #0
 8028cfa:	b2db      	uxtb	r3, r3
 8028cfc:	461a      	mov	r2, r3
 8028cfe:	79fb      	ldrb	r3, [r7, #7]
 8028d00:	429a      	cmp	r2, r3
 8028d02:	d19b      	bne.n	8028c3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028d04:	2300      	movs	r3, #0
}
 8028d06:	4618      	mov	r0, r3
 8028d08:	3720      	adds	r7, #32
 8028d0a:	46bd      	mov	sp, r7
 8028d0c:	bd80      	pop	{r7, pc}
 8028d0e:	bf00      	nop
 8028d10:	20000004 	.word	0x20000004

08028d14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028d14:	b580      	push	{r7, lr}
 8028d16:	b086      	sub	sp, #24
 8028d18:	af02      	add	r7, sp, #8
 8028d1a:	60f8      	str	r0, [r7, #12]
 8028d1c:	60b9      	str	r1, [r7, #8]
 8028d1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d20:	68fb      	ldr	r3, [r7, #12]
 8028d22:	685b      	ldr	r3, [r3, #4]
 8028d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d28:	d111      	bne.n	8028d4e <SPI_EndRxTransaction+0x3a>
 8028d2a:	68fb      	ldr	r3, [r7, #12]
 8028d2c:	689b      	ldr	r3, [r3, #8]
 8028d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028d32:	d004      	beq.n	8028d3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028d34:	68fb      	ldr	r3, [r7, #12]
 8028d36:	689b      	ldr	r3, [r3, #8]
 8028d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d3c:	d107      	bne.n	8028d4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028d3e:	68fb      	ldr	r3, [r7, #12]
 8028d40:	681b      	ldr	r3, [r3, #0]
 8028d42:	681a      	ldr	r2, [r3, #0]
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	681b      	ldr	r3, [r3, #0]
 8028d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028d4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028d4e:	68fb      	ldr	r3, [r7, #12]
 8028d50:	685b      	ldr	r3, [r3, #4]
 8028d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d56:	d12a      	bne.n	8028dae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028d58:	68fb      	ldr	r3, [r7, #12]
 8028d5a:	689b      	ldr	r3, [r3, #8]
 8028d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028d60:	d012      	beq.n	8028d88 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	9300      	str	r3, [sp, #0]
 8028d66:	68bb      	ldr	r3, [r7, #8]
 8028d68:	2200      	movs	r2, #0
 8028d6a:	2180      	movs	r1, #128	; 0x80
 8028d6c:	68f8      	ldr	r0, [r7, #12]
 8028d6e:	f7ff ff49 	bl	8028c04 <SPI_WaitFlagStateUntilTimeout>
 8028d72:	4603      	mov	r3, r0
 8028d74:	2b00      	cmp	r3, #0
 8028d76:	d02d      	beq.n	8028dd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028d78:	68fb      	ldr	r3, [r7, #12]
 8028d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028d7c:	f043 0220 	orr.w	r2, r3, #32
 8028d80:	68fb      	ldr	r3, [r7, #12]
 8028d82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028d84:	2303      	movs	r3, #3
 8028d86:	e026      	b.n	8028dd6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028d88:	687b      	ldr	r3, [r7, #4]
 8028d8a:	9300      	str	r3, [sp, #0]
 8028d8c:	68bb      	ldr	r3, [r7, #8]
 8028d8e:	2200      	movs	r2, #0
 8028d90:	2101      	movs	r1, #1
 8028d92:	68f8      	ldr	r0, [r7, #12]
 8028d94:	f7ff ff36 	bl	8028c04 <SPI_WaitFlagStateUntilTimeout>
 8028d98:	4603      	mov	r3, r0
 8028d9a:	2b00      	cmp	r3, #0
 8028d9c:	d01a      	beq.n	8028dd4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028d9e:	68fb      	ldr	r3, [r7, #12]
 8028da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028da2:	f043 0220 	orr.w	r2, r3, #32
 8028da6:	68fb      	ldr	r3, [r7, #12]
 8028da8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028daa:	2303      	movs	r3, #3
 8028dac:	e013      	b.n	8028dd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028dae:	687b      	ldr	r3, [r7, #4]
 8028db0:	9300      	str	r3, [sp, #0]
 8028db2:	68bb      	ldr	r3, [r7, #8]
 8028db4:	2200      	movs	r2, #0
 8028db6:	2101      	movs	r1, #1
 8028db8:	68f8      	ldr	r0, [r7, #12]
 8028dba:	f7ff ff23 	bl	8028c04 <SPI_WaitFlagStateUntilTimeout>
 8028dbe:	4603      	mov	r3, r0
 8028dc0:	2b00      	cmp	r3, #0
 8028dc2:	d007      	beq.n	8028dd4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028dc4:	68fb      	ldr	r3, [r7, #12]
 8028dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028dc8:	f043 0220 	orr.w	r2, r3, #32
 8028dcc:	68fb      	ldr	r3, [r7, #12]
 8028dce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028dd0:	2303      	movs	r3, #3
 8028dd2:	e000      	b.n	8028dd6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028dd4:	2300      	movs	r3, #0
}
 8028dd6:	4618      	mov	r0, r3
 8028dd8:	3710      	adds	r7, #16
 8028dda:	46bd      	mov	sp, r7
 8028ddc:	bd80      	pop	{r7, pc}
	...

08028de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028de0:	b580      	push	{r7, lr}
 8028de2:	b088      	sub	sp, #32
 8028de4:	af02      	add	r7, sp, #8
 8028de6:	60f8      	str	r0, [r7, #12]
 8028de8:	60b9      	str	r1, [r7, #8]
 8028dea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028dec:	4b1b      	ldr	r3, [pc, #108]	; (8028e5c <SPI_EndRxTxTransaction+0x7c>)
 8028dee:	681b      	ldr	r3, [r3, #0]
 8028df0:	4a1b      	ldr	r2, [pc, #108]	; (8028e60 <SPI_EndRxTxTransaction+0x80>)
 8028df2:	fba2 2303 	umull	r2, r3, r2, r3
 8028df6:	0d5b      	lsrs	r3, r3, #21
 8028df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028dfc:	fb02 f303 	mul.w	r3, r2, r3
 8028e00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	685b      	ldr	r3, [r3, #4]
 8028e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028e0a:	d112      	bne.n	8028e32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	9300      	str	r3, [sp, #0]
 8028e10:	68bb      	ldr	r3, [r7, #8]
 8028e12:	2200      	movs	r2, #0
 8028e14:	2180      	movs	r1, #128	; 0x80
 8028e16:	68f8      	ldr	r0, [r7, #12]
 8028e18:	f7ff fef4 	bl	8028c04 <SPI_WaitFlagStateUntilTimeout>
 8028e1c:	4603      	mov	r3, r0
 8028e1e:	2b00      	cmp	r3, #0
 8028e20:	d016      	beq.n	8028e50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028e22:	68fb      	ldr	r3, [r7, #12]
 8028e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e26:	f043 0220 	orr.w	r2, r3, #32
 8028e2a:	68fb      	ldr	r3, [r7, #12]
 8028e2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028e2e:	2303      	movs	r3, #3
 8028e30:	e00f      	b.n	8028e52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028e32:	697b      	ldr	r3, [r7, #20]
 8028e34:	2b00      	cmp	r3, #0
 8028e36:	d00a      	beq.n	8028e4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028e38:	697b      	ldr	r3, [r7, #20]
 8028e3a:	3b01      	subs	r3, #1
 8028e3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028e3e:	68fb      	ldr	r3, [r7, #12]
 8028e40:	681b      	ldr	r3, [r3, #0]
 8028e42:	689b      	ldr	r3, [r3, #8]
 8028e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028e48:	2b80      	cmp	r3, #128	; 0x80
 8028e4a:	d0f2      	beq.n	8028e32 <SPI_EndRxTxTransaction+0x52>
 8028e4c:	e000      	b.n	8028e50 <SPI_EndRxTxTransaction+0x70>
        break;
 8028e4e:	bf00      	nop
  }

  return HAL_OK;
 8028e50:	2300      	movs	r3, #0
}
 8028e52:	4618      	mov	r0, r3
 8028e54:	3718      	adds	r7, #24
 8028e56:	46bd      	mov	sp, r7
 8028e58:	bd80      	pop	{r7, pc}
 8028e5a:	bf00      	nop
 8028e5c:	20000004 	.word	0x20000004
 8028e60:	165e9f81 	.word	0x165e9f81

08028e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028e64:	b580      	push	{r7, lr}
 8028e66:	b082      	sub	sp, #8
 8028e68:	af00      	add	r7, sp, #0
 8028e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028e6c:	687b      	ldr	r3, [r7, #4]
 8028e6e:	2b00      	cmp	r3, #0
 8028e70:	d101      	bne.n	8028e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028e72:	2301      	movs	r3, #1
 8028e74:	e041      	b.n	8028efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028e76:	687b      	ldr	r3, [r7, #4]
 8028e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e7c:	b2db      	uxtb	r3, r3
 8028e7e:	2b00      	cmp	r3, #0
 8028e80:	d106      	bne.n	8028e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028e82:	687b      	ldr	r3, [r7, #4]
 8028e84:	2200      	movs	r2, #0
 8028e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028e8a:	6878      	ldr	r0, [r7, #4]
 8028e8c:	f7f8 fea6 	bl	8021bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	2202      	movs	r2, #2
 8028e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028e98:	687b      	ldr	r3, [r7, #4]
 8028e9a:	681a      	ldr	r2, [r3, #0]
 8028e9c:	687b      	ldr	r3, [r7, #4]
 8028e9e:	3304      	adds	r3, #4
 8028ea0:	4619      	mov	r1, r3
 8028ea2:	4610      	mov	r0, r2
 8028ea4:	f000 fa96 	bl	80293d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	2201      	movs	r2, #1
 8028eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028eb0:	687b      	ldr	r3, [r7, #4]
 8028eb2:	2201      	movs	r2, #1
 8028eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028eb8:	687b      	ldr	r3, [r7, #4]
 8028eba:	2201      	movs	r2, #1
 8028ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028ec0:	687b      	ldr	r3, [r7, #4]
 8028ec2:	2201      	movs	r2, #1
 8028ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028ec8:	687b      	ldr	r3, [r7, #4]
 8028eca:	2201      	movs	r2, #1
 8028ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028ed0:	687b      	ldr	r3, [r7, #4]
 8028ed2:	2201      	movs	r2, #1
 8028ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028ed8:	687b      	ldr	r3, [r7, #4]
 8028eda:	2201      	movs	r2, #1
 8028edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028ee0:	687b      	ldr	r3, [r7, #4]
 8028ee2:	2201      	movs	r2, #1
 8028ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028ee8:	687b      	ldr	r3, [r7, #4]
 8028eea:	2201      	movs	r2, #1
 8028eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028ef0:	687b      	ldr	r3, [r7, #4]
 8028ef2:	2201      	movs	r2, #1
 8028ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028ef8:	2300      	movs	r3, #0
}
 8028efa:	4618      	mov	r0, r3
 8028efc:	3708      	adds	r7, #8
 8028efe:	46bd      	mov	sp, r7
 8028f00:	bd80      	pop	{r7, pc}
	...

08028f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028f04:	b480      	push	{r7}
 8028f06:	b085      	sub	sp, #20
 8028f08:	af00      	add	r7, sp, #0
 8028f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028f0c:	687b      	ldr	r3, [r7, #4]
 8028f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028f12:	b2db      	uxtb	r3, r3
 8028f14:	2b01      	cmp	r3, #1
 8028f16:	d001      	beq.n	8028f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028f18:	2301      	movs	r3, #1
 8028f1a:	e04e      	b.n	8028fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028f1c:	687b      	ldr	r3, [r7, #4]
 8028f1e:	2202      	movs	r2, #2
 8028f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028f24:	687b      	ldr	r3, [r7, #4]
 8028f26:	681b      	ldr	r3, [r3, #0]
 8028f28:	68da      	ldr	r2, [r3, #12]
 8028f2a:	687b      	ldr	r3, [r7, #4]
 8028f2c:	681b      	ldr	r3, [r3, #0]
 8028f2e:	f042 0201 	orr.w	r2, r2, #1
 8028f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028f34:	687b      	ldr	r3, [r7, #4]
 8028f36:	681b      	ldr	r3, [r3, #0]
 8028f38:	4a23      	ldr	r2, [pc, #140]	; (8028fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8028f3a:	4293      	cmp	r3, r2
 8028f3c:	d022      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f3e:	687b      	ldr	r3, [r7, #4]
 8028f40:	681b      	ldr	r3, [r3, #0]
 8028f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028f46:	d01d      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f48:	687b      	ldr	r3, [r7, #4]
 8028f4a:	681b      	ldr	r3, [r3, #0]
 8028f4c:	4a1f      	ldr	r2, [pc, #124]	; (8028fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8028f4e:	4293      	cmp	r3, r2
 8028f50:	d018      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f52:	687b      	ldr	r3, [r7, #4]
 8028f54:	681b      	ldr	r3, [r3, #0]
 8028f56:	4a1e      	ldr	r2, [pc, #120]	; (8028fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8028f58:	4293      	cmp	r3, r2
 8028f5a:	d013      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f5c:	687b      	ldr	r3, [r7, #4]
 8028f5e:	681b      	ldr	r3, [r3, #0]
 8028f60:	4a1c      	ldr	r2, [pc, #112]	; (8028fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8028f62:	4293      	cmp	r3, r2
 8028f64:	d00e      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	681b      	ldr	r3, [r3, #0]
 8028f6a:	4a1b      	ldr	r2, [pc, #108]	; (8028fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8028f6c:	4293      	cmp	r3, r2
 8028f6e:	d009      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f70:	687b      	ldr	r3, [r7, #4]
 8028f72:	681b      	ldr	r3, [r3, #0]
 8028f74:	4a19      	ldr	r2, [pc, #100]	; (8028fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8028f76:	4293      	cmp	r3, r2
 8028f78:	d004      	beq.n	8028f84 <HAL_TIM_Base_Start_IT+0x80>
 8028f7a:	687b      	ldr	r3, [r7, #4]
 8028f7c:	681b      	ldr	r3, [r3, #0]
 8028f7e:	4a18      	ldr	r2, [pc, #96]	; (8028fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8028f80:	4293      	cmp	r3, r2
 8028f82:	d111      	bne.n	8028fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028f84:	687b      	ldr	r3, [r7, #4]
 8028f86:	681b      	ldr	r3, [r3, #0]
 8028f88:	689b      	ldr	r3, [r3, #8]
 8028f8a:	f003 0307 	and.w	r3, r3, #7
 8028f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028f90:	68fb      	ldr	r3, [r7, #12]
 8028f92:	2b06      	cmp	r3, #6
 8028f94:	d010      	beq.n	8028fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028f96:	687b      	ldr	r3, [r7, #4]
 8028f98:	681b      	ldr	r3, [r3, #0]
 8028f9a:	681a      	ldr	r2, [r3, #0]
 8028f9c:	687b      	ldr	r3, [r7, #4]
 8028f9e:	681b      	ldr	r3, [r3, #0]
 8028fa0:	f042 0201 	orr.w	r2, r2, #1
 8028fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028fa6:	e007      	b.n	8028fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028fa8:	687b      	ldr	r3, [r7, #4]
 8028faa:	681b      	ldr	r3, [r3, #0]
 8028fac:	681a      	ldr	r2, [r3, #0]
 8028fae:	687b      	ldr	r3, [r7, #4]
 8028fb0:	681b      	ldr	r3, [r3, #0]
 8028fb2:	f042 0201 	orr.w	r2, r2, #1
 8028fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028fb8:	2300      	movs	r3, #0
}
 8028fba:	4618      	mov	r0, r3
 8028fbc:	3714      	adds	r7, #20
 8028fbe:	46bd      	mov	sp, r7
 8028fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028fc4:	4770      	bx	lr
 8028fc6:	bf00      	nop
 8028fc8:	40010000 	.word	0x40010000
 8028fcc:	40000400 	.word	0x40000400
 8028fd0:	40000800 	.word	0x40000800
 8028fd4:	40000c00 	.word	0x40000c00
 8028fd8:	40010400 	.word	0x40010400
 8028fdc:	40014000 	.word	0x40014000
 8028fe0:	40001800 	.word	0x40001800

08028fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028fe4:	b580      	push	{r7, lr}
 8028fe6:	b082      	sub	sp, #8
 8028fe8:	af00      	add	r7, sp, #0
 8028fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028fec:	687b      	ldr	r3, [r7, #4]
 8028fee:	681b      	ldr	r3, [r3, #0]
 8028ff0:	691b      	ldr	r3, [r3, #16]
 8028ff2:	f003 0302 	and.w	r3, r3, #2
 8028ff6:	2b02      	cmp	r3, #2
 8028ff8:	d122      	bne.n	8029040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028ffa:	687b      	ldr	r3, [r7, #4]
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	68db      	ldr	r3, [r3, #12]
 8029000:	f003 0302 	and.w	r3, r3, #2
 8029004:	2b02      	cmp	r3, #2
 8029006:	d11b      	bne.n	8029040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029008:	687b      	ldr	r3, [r7, #4]
 802900a:	681b      	ldr	r3, [r3, #0]
 802900c:	f06f 0202 	mvn.w	r2, #2
 8029010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029012:	687b      	ldr	r3, [r7, #4]
 8029014:	2201      	movs	r2, #1
 8029016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029018:	687b      	ldr	r3, [r7, #4]
 802901a:	681b      	ldr	r3, [r3, #0]
 802901c:	699b      	ldr	r3, [r3, #24]
 802901e:	f003 0303 	and.w	r3, r3, #3
 8029022:	2b00      	cmp	r3, #0
 8029024:	d003      	beq.n	802902e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029026:	6878      	ldr	r0, [r7, #4]
 8029028:	f000 f9b5 	bl	8029396 <HAL_TIM_IC_CaptureCallback>
 802902c:	e005      	b.n	802903a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802902e:	6878      	ldr	r0, [r7, #4]
 8029030:	f000 f9a7 	bl	8029382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029034:	6878      	ldr	r0, [r7, #4]
 8029036:	f000 f9b8 	bl	80293aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802903a:	687b      	ldr	r3, [r7, #4]
 802903c:	2200      	movs	r2, #0
 802903e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029040:	687b      	ldr	r3, [r7, #4]
 8029042:	681b      	ldr	r3, [r3, #0]
 8029044:	691b      	ldr	r3, [r3, #16]
 8029046:	f003 0304 	and.w	r3, r3, #4
 802904a:	2b04      	cmp	r3, #4
 802904c:	d122      	bne.n	8029094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802904e:	687b      	ldr	r3, [r7, #4]
 8029050:	681b      	ldr	r3, [r3, #0]
 8029052:	68db      	ldr	r3, [r3, #12]
 8029054:	f003 0304 	and.w	r3, r3, #4
 8029058:	2b04      	cmp	r3, #4
 802905a:	d11b      	bne.n	8029094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802905c:	687b      	ldr	r3, [r7, #4]
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	f06f 0204 	mvn.w	r2, #4
 8029064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029066:	687b      	ldr	r3, [r7, #4]
 8029068:	2202      	movs	r2, #2
 802906a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	681b      	ldr	r3, [r3, #0]
 8029070:	699b      	ldr	r3, [r3, #24]
 8029072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029076:	2b00      	cmp	r3, #0
 8029078:	d003      	beq.n	8029082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802907a:	6878      	ldr	r0, [r7, #4]
 802907c:	f000 f98b 	bl	8029396 <HAL_TIM_IC_CaptureCallback>
 8029080:	e005      	b.n	802908e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029082:	6878      	ldr	r0, [r7, #4]
 8029084:	f000 f97d 	bl	8029382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029088:	6878      	ldr	r0, [r7, #4]
 802908a:	f000 f98e 	bl	80293aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802908e:	687b      	ldr	r3, [r7, #4]
 8029090:	2200      	movs	r2, #0
 8029092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029094:	687b      	ldr	r3, [r7, #4]
 8029096:	681b      	ldr	r3, [r3, #0]
 8029098:	691b      	ldr	r3, [r3, #16]
 802909a:	f003 0308 	and.w	r3, r3, #8
 802909e:	2b08      	cmp	r3, #8
 80290a0:	d122      	bne.n	80290e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80290a2:	687b      	ldr	r3, [r7, #4]
 80290a4:	681b      	ldr	r3, [r3, #0]
 80290a6:	68db      	ldr	r3, [r3, #12]
 80290a8:	f003 0308 	and.w	r3, r3, #8
 80290ac:	2b08      	cmp	r3, #8
 80290ae:	d11b      	bne.n	80290e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80290b0:	687b      	ldr	r3, [r7, #4]
 80290b2:	681b      	ldr	r3, [r3, #0]
 80290b4:	f06f 0208 	mvn.w	r2, #8
 80290b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80290ba:	687b      	ldr	r3, [r7, #4]
 80290bc:	2204      	movs	r2, #4
 80290be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80290c0:	687b      	ldr	r3, [r7, #4]
 80290c2:	681b      	ldr	r3, [r3, #0]
 80290c4:	69db      	ldr	r3, [r3, #28]
 80290c6:	f003 0303 	and.w	r3, r3, #3
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	d003      	beq.n	80290d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80290ce:	6878      	ldr	r0, [r7, #4]
 80290d0:	f000 f961 	bl	8029396 <HAL_TIM_IC_CaptureCallback>
 80290d4:	e005      	b.n	80290e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80290d6:	6878      	ldr	r0, [r7, #4]
 80290d8:	f000 f953 	bl	8029382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80290dc:	6878      	ldr	r0, [r7, #4]
 80290de:	f000 f964 	bl	80293aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80290e2:	687b      	ldr	r3, [r7, #4]
 80290e4:	2200      	movs	r2, #0
 80290e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	691b      	ldr	r3, [r3, #16]
 80290ee:	f003 0310 	and.w	r3, r3, #16
 80290f2:	2b10      	cmp	r3, #16
 80290f4:	d122      	bne.n	802913c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80290f6:	687b      	ldr	r3, [r7, #4]
 80290f8:	681b      	ldr	r3, [r3, #0]
 80290fa:	68db      	ldr	r3, [r3, #12]
 80290fc:	f003 0310 	and.w	r3, r3, #16
 8029100:	2b10      	cmp	r3, #16
 8029102:	d11b      	bne.n	802913c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029104:	687b      	ldr	r3, [r7, #4]
 8029106:	681b      	ldr	r3, [r3, #0]
 8029108:	f06f 0210 	mvn.w	r2, #16
 802910c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802910e:	687b      	ldr	r3, [r7, #4]
 8029110:	2208      	movs	r2, #8
 8029112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029114:	687b      	ldr	r3, [r7, #4]
 8029116:	681b      	ldr	r3, [r3, #0]
 8029118:	69db      	ldr	r3, [r3, #28]
 802911a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802911e:	2b00      	cmp	r3, #0
 8029120:	d003      	beq.n	802912a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029122:	6878      	ldr	r0, [r7, #4]
 8029124:	f000 f937 	bl	8029396 <HAL_TIM_IC_CaptureCallback>
 8029128:	e005      	b.n	8029136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802912a:	6878      	ldr	r0, [r7, #4]
 802912c:	f000 f929 	bl	8029382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029130:	6878      	ldr	r0, [r7, #4]
 8029132:	f000 f93a 	bl	80293aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029136:	687b      	ldr	r3, [r7, #4]
 8029138:	2200      	movs	r2, #0
 802913a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802913c:	687b      	ldr	r3, [r7, #4]
 802913e:	681b      	ldr	r3, [r3, #0]
 8029140:	691b      	ldr	r3, [r3, #16]
 8029142:	f003 0301 	and.w	r3, r3, #1
 8029146:	2b01      	cmp	r3, #1
 8029148:	d10e      	bne.n	8029168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802914a:	687b      	ldr	r3, [r7, #4]
 802914c:	681b      	ldr	r3, [r3, #0]
 802914e:	68db      	ldr	r3, [r3, #12]
 8029150:	f003 0301 	and.w	r3, r3, #1
 8029154:	2b01      	cmp	r3, #1
 8029156:	d107      	bne.n	8029168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029158:	687b      	ldr	r3, [r7, #4]
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	f06f 0201 	mvn.w	r2, #1
 8029160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029162:	6878      	ldr	r0, [r7, #4]
 8029164:	f7f7 fe8e 	bl	8020e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029168:	687b      	ldr	r3, [r7, #4]
 802916a:	681b      	ldr	r3, [r3, #0]
 802916c:	691b      	ldr	r3, [r3, #16]
 802916e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029172:	2b80      	cmp	r3, #128	; 0x80
 8029174:	d10e      	bne.n	8029194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029176:	687b      	ldr	r3, [r7, #4]
 8029178:	681b      	ldr	r3, [r3, #0]
 802917a:	68db      	ldr	r3, [r3, #12]
 802917c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029180:	2b80      	cmp	r3, #128	; 0x80
 8029182:	d107      	bne.n	8029194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029184:	687b      	ldr	r3, [r7, #4]
 8029186:	681b      	ldr	r3, [r3, #0]
 8029188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802918c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802918e:	6878      	ldr	r0, [r7, #4]
 8029190:	f000 fae0 	bl	8029754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029194:	687b      	ldr	r3, [r7, #4]
 8029196:	681b      	ldr	r3, [r3, #0]
 8029198:	691b      	ldr	r3, [r3, #16]
 802919a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802919e:	2b40      	cmp	r3, #64	; 0x40
 80291a0:	d10e      	bne.n	80291c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80291a2:	687b      	ldr	r3, [r7, #4]
 80291a4:	681b      	ldr	r3, [r3, #0]
 80291a6:	68db      	ldr	r3, [r3, #12]
 80291a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80291ac:	2b40      	cmp	r3, #64	; 0x40
 80291ae:	d107      	bne.n	80291c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	681b      	ldr	r3, [r3, #0]
 80291b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80291b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80291ba:	6878      	ldr	r0, [r7, #4]
 80291bc:	f000 f8ff 	bl	80293be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80291c0:	687b      	ldr	r3, [r7, #4]
 80291c2:	681b      	ldr	r3, [r3, #0]
 80291c4:	691b      	ldr	r3, [r3, #16]
 80291c6:	f003 0320 	and.w	r3, r3, #32
 80291ca:	2b20      	cmp	r3, #32
 80291cc:	d10e      	bne.n	80291ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	68db      	ldr	r3, [r3, #12]
 80291d4:	f003 0320 	and.w	r3, r3, #32
 80291d8:	2b20      	cmp	r3, #32
 80291da:	d107      	bne.n	80291ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80291dc:	687b      	ldr	r3, [r7, #4]
 80291de:	681b      	ldr	r3, [r3, #0]
 80291e0:	f06f 0220 	mvn.w	r2, #32
 80291e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80291e6:	6878      	ldr	r0, [r7, #4]
 80291e8:	f000 faaa 	bl	8029740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80291ec:	bf00      	nop
 80291ee:	3708      	adds	r7, #8
 80291f0:	46bd      	mov	sp, r7
 80291f2:	bd80      	pop	{r7, pc}

080291f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80291f4:	b580      	push	{r7, lr}
 80291f6:	b084      	sub	sp, #16
 80291f8:	af00      	add	r7, sp, #0
 80291fa:	6078      	str	r0, [r7, #4]
 80291fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80291fe:	2300      	movs	r3, #0
 8029200:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029202:	687b      	ldr	r3, [r7, #4]
 8029204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029208:	2b01      	cmp	r3, #1
 802920a:	d101      	bne.n	8029210 <HAL_TIM_ConfigClockSource+0x1c>
 802920c:	2302      	movs	r3, #2
 802920e:	e0b4      	b.n	802937a <HAL_TIM_ConfigClockSource+0x186>
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	2201      	movs	r2, #1
 8029214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029218:	687b      	ldr	r3, [r7, #4]
 802921a:	2202      	movs	r2, #2
 802921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029220:	687b      	ldr	r3, [r7, #4]
 8029222:	681b      	ldr	r3, [r3, #0]
 8029224:	689b      	ldr	r3, [r3, #8]
 8029226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029228:	68bb      	ldr	r3, [r7, #8]
 802922a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802922e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029230:	68bb      	ldr	r3, [r7, #8]
 8029232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8029238:	687b      	ldr	r3, [r7, #4]
 802923a:	681b      	ldr	r3, [r3, #0]
 802923c:	68ba      	ldr	r2, [r7, #8]
 802923e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029240:	683b      	ldr	r3, [r7, #0]
 8029242:	681b      	ldr	r3, [r3, #0]
 8029244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029248:	d03e      	beq.n	80292c8 <HAL_TIM_ConfigClockSource+0xd4>
 802924a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802924e:	f200 8087 	bhi.w	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029256:	f000 8086 	beq.w	8029366 <HAL_TIM_ConfigClockSource+0x172>
 802925a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802925e:	d87f      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029260:	2b70      	cmp	r3, #112	; 0x70
 8029262:	d01a      	beq.n	802929a <HAL_TIM_ConfigClockSource+0xa6>
 8029264:	2b70      	cmp	r3, #112	; 0x70
 8029266:	d87b      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029268:	2b60      	cmp	r3, #96	; 0x60
 802926a:	d050      	beq.n	802930e <HAL_TIM_ConfigClockSource+0x11a>
 802926c:	2b60      	cmp	r3, #96	; 0x60
 802926e:	d877      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029270:	2b50      	cmp	r3, #80	; 0x50
 8029272:	d03c      	beq.n	80292ee <HAL_TIM_ConfigClockSource+0xfa>
 8029274:	2b50      	cmp	r3, #80	; 0x50
 8029276:	d873      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029278:	2b40      	cmp	r3, #64	; 0x40
 802927a:	d058      	beq.n	802932e <HAL_TIM_ConfigClockSource+0x13a>
 802927c:	2b40      	cmp	r3, #64	; 0x40
 802927e:	d86f      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029280:	2b30      	cmp	r3, #48	; 0x30
 8029282:	d064      	beq.n	802934e <HAL_TIM_ConfigClockSource+0x15a>
 8029284:	2b30      	cmp	r3, #48	; 0x30
 8029286:	d86b      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029288:	2b20      	cmp	r3, #32
 802928a:	d060      	beq.n	802934e <HAL_TIM_ConfigClockSource+0x15a>
 802928c:	2b20      	cmp	r3, #32
 802928e:	d867      	bhi.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
 8029290:	2b00      	cmp	r3, #0
 8029292:	d05c      	beq.n	802934e <HAL_TIM_ConfigClockSource+0x15a>
 8029294:	2b10      	cmp	r3, #16
 8029296:	d05a      	beq.n	802934e <HAL_TIM_ConfigClockSource+0x15a>
 8029298:	e062      	b.n	8029360 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802929a:	687b      	ldr	r3, [r7, #4]
 802929c:	6818      	ldr	r0, [r3, #0]
 802929e:	683b      	ldr	r3, [r7, #0]
 80292a0:	6899      	ldr	r1, [r3, #8]
 80292a2:	683b      	ldr	r3, [r7, #0]
 80292a4:	685a      	ldr	r2, [r3, #4]
 80292a6:	683b      	ldr	r3, [r7, #0]
 80292a8:	68db      	ldr	r3, [r3, #12]
 80292aa:	f000 f9ad 	bl	8029608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80292ae:	687b      	ldr	r3, [r7, #4]
 80292b0:	681b      	ldr	r3, [r3, #0]
 80292b2:	689b      	ldr	r3, [r3, #8]
 80292b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80292b6:	68bb      	ldr	r3, [r7, #8]
 80292b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80292bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80292be:	687b      	ldr	r3, [r7, #4]
 80292c0:	681b      	ldr	r3, [r3, #0]
 80292c2:	68ba      	ldr	r2, [r7, #8]
 80292c4:	609a      	str	r2, [r3, #8]
      break;
 80292c6:	e04f      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80292c8:	687b      	ldr	r3, [r7, #4]
 80292ca:	6818      	ldr	r0, [r3, #0]
 80292cc:	683b      	ldr	r3, [r7, #0]
 80292ce:	6899      	ldr	r1, [r3, #8]
 80292d0:	683b      	ldr	r3, [r7, #0]
 80292d2:	685a      	ldr	r2, [r3, #4]
 80292d4:	683b      	ldr	r3, [r7, #0]
 80292d6:	68db      	ldr	r3, [r3, #12]
 80292d8:	f000 f996 	bl	8029608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80292dc:	687b      	ldr	r3, [r7, #4]
 80292de:	681b      	ldr	r3, [r3, #0]
 80292e0:	689a      	ldr	r2, [r3, #8]
 80292e2:	687b      	ldr	r3, [r7, #4]
 80292e4:	681b      	ldr	r3, [r3, #0]
 80292e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80292ea:	609a      	str	r2, [r3, #8]
      break;
 80292ec:	e03c      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	6818      	ldr	r0, [r3, #0]
 80292f2:	683b      	ldr	r3, [r7, #0]
 80292f4:	6859      	ldr	r1, [r3, #4]
 80292f6:	683b      	ldr	r3, [r7, #0]
 80292f8:	68db      	ldr	r3, [r3, #12]
 80292fa:	461a      	mov	r2, r3
 80292fc:	f000 f90a 	bl	8029514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029300:	687b      	ldr	r3, [r7, #4]
 8029302:	681b      	ldr	r3, [r3, #0]
 8029304:	2150      	movs	r1, #80	; 0x50
 8029306:	4618      	mov	r0, r3
 8029308:	f000 f963 	bl	80295d2 <TIM_ITRx_SetConfig>
      break;
 802930c:	e02c      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802930e:	687b      	ldr	r3, [r7, #4]
 8029310:	6818      	ldr	r0, [r3, #0]
 8029312:	683b      	ldr	r3, [r7, #0]
 8029314:	6859      	ldr	r1, [r3, #4]
 8029316:	683b      	ldr	r3, [r7, #0]
 8029318:	68db      	ldr	r3, [r3, #12]
 802931a:	461a      	mov	r2, r3
 802931c:	f000 f929 	bl	8029572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029320:	687b      	ldr	r3, [r7, #4]
 8029322:	681b      	ldr	r3, [r3, #0]
 8029324:	2160      	movs	r1, #96	; 0x60
 8029326:	4618      	mov	r0, r3
 8029328:	f000 f953 	bl	80295d2 <TIM_ITRx_SetConfig>
      break;
 802932c:	e01c      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802932e:	687b      	ldr	r3, [r7, #4]
 8029330:	6818      	ldr	r0, [r3, #0]
 8029332:	683b      	ldr	r3, [r7, #0]
 8029334:	6859      	ldr	r1, [r3, #4]
 8029336:	683b      	ldr	r3, [r7, #0]
 8029338:	68db      	ldr	r3, [r3, #12]
 802933a:	461a      	mov	r2, r3
 802933c:	f000 f8ea 	bl	8029514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	681b      	ldr	r3, [r3, #0]
 8029344:	2140      	movs	r1, #64	; 0x40
 8029346:	4618      	mov	r0, r3
 8029348:	f000 f943 	bl	80295d2 <TIM_ITRx_SetConfig>
      break;
 802934c:	e00c      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802934e:	687b      	ldr	r3, [r7, #4]
 8029350:	681a      	ldr	r2, [r3, #0]
 8029352:	683b      	ldr	r3, [r7, #0]
 8029354:	681b      	ldr	r3, [r3, #0]
 8029356:	4619      	mov	r1, r3
 8029358:	4610      	mov	r0, r2
 802935a:	f000 f93a 	bl	80295d2 <TIM_ITRx_SetConfig>
      break;
 802935e:	e003      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8029360:	2301      	movs	r3, #1
 8029362:	73fb      	strb	r3, [r7, #15]
      break;
 8029364:	e000      	b.n	8029368 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8029366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	2201      	movs	r2, #1
 802936c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029370:	687b      	ldr	r3, [r7, #4]
 8029372:	2200      	movs	r2, #0
 8029374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8029378:	7bfb      	ldrb	r3, [r7, #15]
}
 802937a:	4618      	mov	r0, r3
 802937c:	3710      	adds	r7, #16
 802937e:	46bd      	mov	sp, r7
 8029380:	bd80      	pop	{r7, pc}

08029382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029382:	b480      	push	{r7}
 8029384:	b083      	sub	sp, #12
 8029386:	af00      	add	r7, sp, #0
 8029388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802938a:	bf00      	nop
 802938c:	370c      	adds	r7, #12
 802938e:	46bd      	mov	sp, r7
 8029390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029394:	4770      	bx	lr

08029396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029396:	b480      	push	{r7}
 8029398:	b083      	sub	sp, #12
 802939a:	af00      	add	r7, sp, #0
 802939c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802939e:	bf00      	nop
 80293a0:	370c      	adds	r7, #12
 80293a2:	46bd      	mov	sp, r7
 80293a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293a8:	4770      	bx	lr

080293aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80293aa:	b480      	push	{r7}
 80293ac:	b083      	sub	sp, #12
 80293ae:	af00      	add	r7, sp, #0
 80293b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80293b2:	bf00      	nop
 80293b4:	370c      	adds	r7, #12
 80293b6:	46bd      	mov	sp, r7
 80293b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293bc:	4770      	bx	lr

080293be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80293be:	b480      	push	{r7}
 80293c0:	b083      	sub	sp, #12
 80293c2:	af00      	add	r7, sp, #0
 80293c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80293c6:	bf00      	nop
 80293c8:	370c      	adds	r7, #12
 80293ca:	46bd      	mov	sp, r7
 80293cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80293d0:	4770      	bx	lr
	...

080293d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80293d4:	b480      	push	{r7}
 80293d6:	b085      	sub	sp, #20
 80293d8:	af00      	add	r7, sp, #0
 80293da:	6078      	str	r0, [r7, #4]
 80293dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	681b      	ldr	r3, [r3, #0]
 80293e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	4a40      	ldr	r2, [pc, #256]	; (80294e8 <TIM_Base_SetConfig+0x114>)
 80293e8:	4293      	cmp	r3, r2
 80293ea:	d013      	beq.n	8029414 <TIM_Base_SetConfig+0x40>
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80293f2:	d00f      	beq.n	8029414 <TIM_Base_SetConfig+0x40>
 80293f4:	687b      	ldr	r3, [r7, #4]
 80293f6:	4a3d      	ldr	r2, [pc, #244]	; (80294ec <TIM_Base_SetConfig+0x118>)
 80293f8:	4293      	cmp	r3, r2
 80293fa:	d00b      	beq.n	8029414 <TIM_Base_SetConfig+0x40>
 80293fc:	687b      	ldr	r3, [r7, #4]
 80293fe:	4a3c      	ldr	r2, [pc, #240]	; (80294f0 <TIM_Base_SetConfig+0x11c>)
 8029400:	4293      	cmp	r3, r2
 8029402:	d007      	beq.n	8029414 <TIM_Base_SetConfig+0x40>
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	4a3b      	ldr	r2, [pc, #236]	; (80294f4 <TIM_Base_SetConfig+0x120>)
 8029408:	4293      	cmp	r3, r2
 802940a:	d003      	beq.n	8029414 <TIM_Base_SetConfig+0x40>
 802940c:	687b      	ldr	r3, [r7, #4]
 802940e:	4a3a      	ldr	r2, [pc, #232]	; (80294f8 <TIM_Base_SetConfig+0x124>)
 8029410:	4293      	cmp	r3, r2
 8029412:	d108      	bne.n	8029426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029414:	68fb      	ldr	r3, [r7, #12]
 8029416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802941a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802941c:	683b      	ldr	r3, [r7, #0]
 802941e:	685b      	ldr	r3, [r3, #4]
 8029420:	68fa      	ldr	r2, [r7, #12]
 8029422:	4313      	orrs	r3, r2
 8029424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	4a2f      	ldr	r2, [pc, #188]	; (80294e8 <TIM_Base_SetConfig+0x114>)
 802942a:	4293      	cmp	r3, r2
 802942c:	d02b      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029434:	d027      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 8029436:	687b      	ldr	r3, [r7, #4]
 8029438:	4a2c      	ldr	r2, [pc, #176]	; (80294ec <TIM_Base_SetConfig+0x118>)
 802943a:	4293      	cmp	r3, r2
 802943c:	d023      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	4a2b      	ldr	r2, [pc, #172]	; (80294f0 <TIM_Base_SetConfig+0x11c>)
 8029442:	4293      	cmp	r3, r2
 8029444:	d01f      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 8029446:	687b      	ldr	r3, [r7, #4]
 8029448:	4a2a      	ldr	r2, [pc, #168]	; (80294f4 <TIM_Base_SetConfig+0x120>)
 802944a:	4293      	cmp	r3, r2
 802944c:	d01b      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	4a29      	ldr	r2, [pc, #164]	; (80294f8 <TIM_Base_SetConfig+0x124>)
 8029452:	4293      	cmp	r3, r2
 8029454:	d017      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 8029456:	687b      	ldr	r3, [r7, #4]
 8029458:	4a28      	ldr	r2, [pc, #160]	; (80294fc <TIM_Base_SetConfig+0x128>)
 802945a:	4293      	cmp	r3, r2
 802945c:	d013      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	4a27      	ldr	r2, [pc, #156]	; (8029500 <TIM_Base_SetConfig+0x12c>)
 8029462:	4293      	cmp	r3, r2
 8029464:	d00f      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	4a26      	ldr	r2, [pc, #152]	; (8029504 <TIM_Base_SetConfig+0x130>)
 802946a:	4293      	cmp	r3, r2
 802946c:	d00b      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	4a25      	ldr	r2, [pc, #148]	; (8029508 <TIM_Base_SetConfig+0x134>)
 8029472:	4293      	cmp	r3, r2
 8029474:	d007      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 8029476:	687b      	ldr	r3, [r7, #4]
 8029478:	4a24      	ldr	r2, [pc, #144]	; (802950c <TIM_Base_SetConfig+0x138>)
 802947a:	4293      	cmp	r3, r2
 802947c:	d003      	beq.n	8029486 <TIM_Base_SetConfig+0xb2>
 802947e:	687b      	ldr	r3, [r7, #4]
 8029480:	4a23      	ldr	r2, [pc, #140]	; (8029510 <TIM_Base_SetConfig+0x13c>)
 8029482:	4293      	cmp	r3, r2
 8029484:	d108      	bne.n	8029498 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029486:	68fb      	ldr	r3, [r7, #12]
 8029488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802948c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802948e:	683b      	ldr	r3, [r7, #0]
 8029490:	68db      	ldr	r3, [r3, #12]
 8029492:	68fa      	ldr	r2, [r7, #12]
 8029494:	4313      	orrs	r3, r2
 8029496:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029498:	68fb      	ldr	r3, [r7, #12]
 802949a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802949e:	683b      	ldr	r3, [r7, #0]
 80294a0:	695b      	ldr	r3, [r3, #20]
 80294a2:	4313      	orrs	r3, r2
 80294a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80294a6:	687b      	ldr	r3, [r7, #4]
 80294a8:	68fa      	ldr	r2, [r7, #12]
 80294aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80294ac:	683b      	ldr	r3, [r7, #0]
 80294ae:	689a      	ldr	r2, [r3, #8]
 80294b0:	687b      	ldr	r3, [r7, #4]
 80294b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80294b4:	683b      	ldr	r3, [r7, #0]
 80294b6:	681a      	ldr	r2, [r3, #0]
 80294b8:	687b      	ldr	r3, [r7, #4]
 80294ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80294bc:	687b      	ldr	r3, [r7, #4]
 80294be:	4a0a      	ldr	r2, [pc, #40]	; (80294e8 <TIM_Base_SetConfig+0x114>)
 80294c0:	4293      	cmp	r3, r2
 80294c2:	d003      	beq.n	80294cc <TIM_Base_SetConfig+0xf8>
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	4a0c      	ldr	r2, [pc, #48]	; (80294f8 <TIM_Base_SetConfig+0x124>)
 80294c8:	4293      	cmp	r3, r2
 80294ca:	d103      	bne.n	80294d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80294cc:	683b      	ldr	r3, [r7, #0]
 80294ce:	691a      	ldr	r2, [r3, #16]
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	2201      	movs	r2, #1
 80294d8:	615a      	str	r2, [r3, #20]
}
 80294da:	bf00      	nop
 80294dc:	3714      	adds	r7, #20
 80294de:	46bd      	mov	sp, r7
 80294e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294e4:	4770      	bx	lr
 80294e6:	bf00      	nop
 80294e8:	40010000 	.word	0x40010000
 80294ec:	40000400 	.word	0x40000400
 80294f0:	40000800 	.word	0x40000800
 80294f4:	40000c00 	.word	0x40000c00
 80294f8:	40010400 	.word	0x40010400
 80294fc:	40014000 	.word	0x40014000
 8029500:	40014400 	.word	0x40014400
 8029504:	40014800 	.word	0x40014800
 8029508:	40001800 	.word	0x40001800
 802950c:	40001c00 	.word	0x40001c00
 8029510:	40002000 	.word	0x40002000

08029514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029514:	b480      	push	{r7}
 8029516:	b087      	sub	sp, #28
 8029518:	af00      	add	r7, sp, #0
 802951a:	60f8      	str	r0, [r7, #12]
 802951c:	60b9      	str	r1, [r7, #8]
 802951e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029520:	68fb      	ldr	r3, [r7, #12]
 8029522:	6a1b      	ldr	r3, [r3, #32]
 8029524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029526:	68fb      	ldr	r3, [r7, #12]
 8029528:	6a1b      	ldr	r3, [r3, #32]
 802952a:	f023 0201 	bic.w	r2, r3, #1
 802952e:	68fb      	ldr	r3, [r7, #12]
 8029530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029532:	68fb      	ldr	r3, [r7, #12]
 8029534:	699b      	ldr	r3, [r3, #24]
 8029536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8029538:	693b      	ldr	r3, [r7, #16]
 802953a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802953e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	011b      	lsls	r3, r3, #4
 8029544:	693a      	ldr	r2, [r7, #16]
 8029546:	4313      	orrs	r3, r2
 8029548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802954a:	697b      	ldr	r3, [r7, #20]
 802954c:	f023 030a 	bic.w	r3, r3, #10
 8029550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029552:	697a      	ldr	r2, [r7, #20]
 8029554:	68bb      	ldr	r3, [r7, #8]
 8029556:	4313      	orrs	r3, r2
 8029558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802955a:	68fb      	ldr	r3, [r7, #12]
 802955c:	693a      	ldr	r2, [r7, #16]
 802955e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029560:	68fb      	ldr	r3, [r7, #12]
 8029562:	697a      	ldr	r2, [r7, #20]
 8029564:	621a      	str	r2, [r3, #32]
}
 8029566:	bf00      	nop
 8029568:	371c      	adds	r7, #28
 802956a:	46bd      	mov	sp, r7
 802956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029570:	4770      	bx	lr

08029572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029572:	b480      	push	{r7}
 8029574:	b087      	sub	sp, #28
 8029576:	af00      	add	r7, sp, #0
 8029578:	60f8      	str	r0, [r7, #12]
 802957a:	60b9      	str	r1, [r7, #8]
 802957c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802957e:	68fb      	ldr	r3, [r7, #12]
 8029580:	6a1b      	ldr	r3, [r3, #32]
 8029582:	f023 0210 	bic.w	r2, r3, #16
 8029586:	68fb      	ldr	r3, [r7, #12]
 8029588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802958a:	68fb      	ldr	r3, [r7, #12]
 802958c:	699b      	ldr	r3, [r3, #24]
 802958e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8029590:	68fb      	ldr	r3, [r7, #12]
 8029592:	6a1b      	ldr	r3, [r3, #32]
 8029594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8029596:	697b      	ldr	r3, [r7, #20]
 8029598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802959c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802959e:	687b      	ldr	r3, [r7, #4]
 80295a0:	031b      	lsls	r3, r3, #12
 80295a2:	697a      	ldr	r2, [r7, #20]
 80295a4:	4313      	orrs	r3, r2
 80295a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80295a8:	693b      	ldr	r3, [r7, #16]
 80295aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80295ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80295b0:	68bb      	ldr	r3, [r7, #8]
 80295b2:	011b      	lsls	r3, r3, #4
 80295b4:	693a      	ldr	r2, [r7, #16]
 80295b6:	4313      	orrs	r3, r2
 80295b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80295ba:	68fb      	ldr	r3, [r7, #12]
 80295bc:	697a      	ldr	r2, [r7, #20]
 80295be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80295c0:	68fb      	ldr	r3, [r7, #12]
 80295c2:	693a      	ldr	r2, [r7, #16]
 80295c4:	621a      	str	r2, [r3, #32]
}
 80295c6:	bf00      	nop
 80295c8:	371c      	adds	r7, #28
 80295ca:	46bd      	mov	sp, r7
 80295cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80295d0:	4770      	bx	lr

080295d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80295d2:	b480      	push	{r7}
 80295d4:	b085      	sub	sp, #20
 80295d6:	af00      	add	r7, sp, #0
 80295d8:	6078      	str	r0, [r7, #4]
 80295da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	689b      	ldr	r3, [r3, #8]
 80295e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80295e2:	68fb      	ldr	r3, [r7, #12]
 80295e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80295ea:	683a      	ldr	r2, [r7, #0]
 80295ec:	68fb      	ldr	r3, [r7, #12]
 80295ee:	4313      	orrs	r3, r2
 80295f0:	f043 0307 	orr.w	r3, r3, #7
 80295f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	68fa      	ldr	r2, [r7, #12]
 80295fa:	609a      	str	r2, [r3, #8]
}
 80295fc:	bf00      	nop
 80295fe:	3714      	adds	r7, #20
 8029600:	46bd      	mov	sp, r7
 8029602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029606:	4770      	bx	lr

08029608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8029608:	b480      	push	{r7}
 802960a:	b087      	sub	sp, #28
 802960c:	af00      	add	r7, sp, #0
 802960e:	60f8      	str	r0, [r7, #12]
 8029610:	60b9      	str	r1, [r7, #8]
 8029612:	607a      	str	r2, [r7, #4]
 8029614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8029616:	68fb      	ldr	r3, [r7, #12]
 8029618:	689b      	ldr	r3, [r3, #8]
 802961a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802961c:	697b      	ldr	r3, [r7, #20]
 802961e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029624:	683b      	ldr	r3, [r7, #0]
 8029626:	021a      	lsls	r2, r3, #8
 8029628:	687b      	ldr	r3, [r7, #4]
 802962a:	431a      	orrs	r2, r3
 802962c:	68bb      	ldr	r3, [r7, #8]
 802962e:	4313      	orrs	r3, r2
 8029630:	697a      	ldr	r2, [r7, #20]
 8029632:	4313      	orrs	r3, r2
 8029634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8029636:	68fb      	ldr	r3, [r7, #12]
 8029638:	697a      	ldr	r2, [r7, #20]
 802963a:	609a      	str	r2, [r3, #8]
}
 802963c:	bf00      	nop
 802963e:	371c      	adds	r7, #28
 8029640:	46bd      	mov	sp, r7
 8029642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029646:	4770      	bx	lr

08029648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8029648:	b480      	push	{r7}
 802964a:	b085      	sub	sp, #20
 802964c:	af00      	add	r7, sp, #0
 802964e:	6078      	str	r0, [r7, #4]
 8029650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029652:	687b      	ldr	r3, [r7, #4]
 8029654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029658:	2b01      	cmp	r3, #1
 802965a:	d101      	bne.n	8029660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802965c:	2302      	movs	r3, #2
 802965e:	e05a      	b.n	8029716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	2201      	movs	r2, #1
 8029664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029668:	687b      	ldr	r3, [r7, #4]
 802966a:	2202      	movs	r2, #2
 802966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8029670:	687b      	ldr	r3, [r7, #4]
 8029672:	681b      	ldr	r3, [r3, #0]
 8029674:	685b      	ldr	r3, [r3, #4]
 8029676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029678:	687b      	ldr	r3, [r7, #4]
 802967a:	681b      	ldr	r3, [r3, #0]
 802967c:	689b      	ldr	r3, [r3, #8]
 802967e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8029680:	68fb      	ldr	r3, [r7, #12]
 8029682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8029688:	683b      	ldr	r3, [r7, #0]
 802968a:	681b      	ldr	r3, [r3, #0]
 802968c:	68fa      	ldr	r2, [r7, #12]
 802968e:	4313      	orrs	r3, r2
 8029690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	681b      	ldr	r3, [r3, #0]
 8029696:	68fa      	ldr	r2, [r7, #12]
 8029698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	681b      	ldr	r3, [r3, #0]
 802969e:	4a21      	ldr	r2, [pc, #132]	; (8029724 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80296a0:	4293      	cmp	r3, r2
 80296a2:	d022      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296a4:	687b      	ldr	r3, [r7, #4]
 80296a6:	681b      	ldr	r3, [r3, #0]
 80296a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80296ac:	d01d      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	681b      	ldr	r3, [r3, #0]
 80296b2:	4a1d      	ldr	r2, [pc, #116]	; (8029728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80296b4:	4293      	cmp	r3, r2
 80296b6:	d018      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296b8:	687b      	ldr	r3, [r7, #4]
 80296ba:	681b      	ldr	r3, [r3, #0]
 80296bc:	4a1b      	ldr	r2, [pc, #108]	; (802972c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80296be:	4293      	cmp	r3, r2
 80296c0:	d013      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	681b      	ldr	r3, [r3, #0]
 80296c6:	4a1a      	ldr	r2, [pc, #104]	; (8029730 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80296c8:	4293      	cmp	r3, r2
 80296ca:	d00e      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296cc:	687b      	ldr	r3, [r7, #4]
 80296ce:	681b      	ldr	r3, [r3, #0]
 80296d0:	4a18      	ldr	r2, [pc, #96]	; (8029734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80296d2:	4293      	cmp	r3, r2
 80296d4:	d009      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	681b      	ldr	r3, [r3, #0]
 80296da:	4a17      	ldr	r2, [pc, #92]	; (8029738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80296dc:	4293      	cmp	r3, r2
 80296de:	d004      	beq.n	80296ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80296e0:	687b      	ldr	r3, [r7, #4]
 80296e2:	681b      	ldr	r3, [r3, #0]
 80296e4:	4a15      	ldr	r2, [pc, #84]	; (802973c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80296e6:	4293      	cmp	r3, r2
 80296e8:	d10c      	bne.n	8029704 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80296ea:	68bb      	ldr	r3, [r7, #8]
 80296ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80296f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80296f2:	683b      	ldr	r3, [r7, #0]
 80296f4:	685b      	ldr	r3, [r3, #4]
 80296f6:	68ba      	ldr	r2, [r7, #8]
 80296f8:	4313      	orrs	r3, r2
 80296fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80296fc:	687b      	ldr	r3, [r7, #4]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	68ba      	ldr	r2, [r7, #8]
 8029702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029704:	687b      	ldr	r3, [r7, #4]
 8029706:	2201      	movs	r2, #1
 8029708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	2200      	movs	r2, #0
 8029710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029714:	2300      	movs	r3, #0
}
 8029716:	4618      	mov	r0, r3
 8029718:	3714      	adds	r7, #20
 802971a:	46bd      	mov	sp, r7
 802971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029720:	4770      	bx	lr
 8029722:	bf00      	nop
 8029724:	40010000 	.word	0x40010000
 8029728:	40000400 	.word	0x40000400
 802972c:	40000800 	.word	0x40000800
 8029730:	40000c00 	.word	0x40000c00
 8029734:	40010400 	.word	0x40010400
 8029738:	40014000 	.word	0x40014000
 802973c:	40001800 	.word	0x40001800

08029740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029740:	b480      	push	{r7}
 8029742:	b083      	sub	sp, #12
 8029744:	af00      	add	r7, sp, #0
 8029746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8029748:	bf00      	nop
 802974a:	370c      	adds	r7, #12
 802974c:	46bd      	mov	sp, r7
 802974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029752:	4770      	bx	lr

08029754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029754:	b480      	push	{r7}
 8029756:	b083      	sub	sp, #12
 8029758:	af00      	add	r7, sp, #0
 802975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802975c:	bf00      	nop
 802975e:	370c      	adds	r7, #12
 8029760:	46bd      	mov	sp, r7
 8029762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029766:	4770      	bx	lr

08029768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8029768:	b580      	push	{r7, lr}
 802976a:	b082      	sub	sp, #8
 802976c:	af00      	add	r7, sp, #0
 802976e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8029770:	687b      	ldr	r3, [r7, #4]
 8029772:	2b00      	cmp	r3, #0
 8029774:	d101      	bne.n	802977a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8029776:	2301      	movs	r3, #1
 8029778:	e03f      	b.n	80297fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 802977a:	687b      	ldr	r3, [r7, #4]
 802977c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029780:	b2db      	uxtb	r3, r3
 8029782:	2b00      	cmp	r3, #0
 8029784:	d106      	bne.n	8029794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	2200      	movs	r2, #0
 802978a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802978e:	6878      	ldr	r0, [r7, #4]
 8029790:	f7f8 fa46 	bl	8021c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8029794:	687b      	ldr	r3, [r7, #4]
 8029796:	2224      	movs	r2, #36	; 0x24
 8029798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 802979c:	687b      	ldr	r3, [r7, #4]
 802979e:	681b      	ldr	r3, [r3, #0]
 80297a0:	68da      	ldr	r2, [r3, #12]
 80297a2:	687b      	ldr	r3, [r7, #4]
 80297a4:	681b      	ldr	r3, [r3, #0]
 80297a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80297aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80297ac:	6878      	ldr	r0, [r7, #4]
 80297ae:	f000 fddf 	bl	802a370 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80297b2:	687b      	ldr	r3, [r7, #4]
 80297b4:	681b      	ldr	r3, [r3, #0]
 80297b6:	691a      	ldr	r2, [r3, #16]
 80297b8:	687b      	ldr	r3, [r7, #4]
 80297ba:	681b      	ldr	r3, [r3, #0]
 80297bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80297c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80297c2:	687b      	ldr	r3, [r7, #4]
 80297c4:	681b      	ldr	r3, [r3, #0]
 80297c6:	695a      	ldr	r2, [r3, #20]
 80297c8:	687b      	ldr	r3, [r7, #4]
 80297ca:	681b      	ldr	r3, [r3, #0]
 80297cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80297d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80297d2:	687b      	ldr	r3, [r7, #4]
 80297d4:	681b      	ldr	r3, [r3, #0]
 80297d6:	68da      	ldr	r2, [r3, #12]
 80297d8:	687b      	ldr	r3, [r7, #4]
 80297da:	681b      	ldr	r3, [r3, #0]
 80297dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80297e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	2200      	movs	r2, #0
 80297e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80297e8:	687b      	ldr	r3, [r7, #4]
 80297ea:	2220      	movs	r2, #32
 80297ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	2220      	movs	r2, #32
 80297f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80297f8:	2300      	movs	r3, #0
}
 80297fa:	4618      	mov	r0, r3
 80297fc:	3708      	adds	r7, #8
 80297fe:	46bd      	mov	sp, r7
 8029800:	bd80      	pop	{r7, pc}

08029802 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8029802:	b580      	push	{r7, lr}
 8029804:	b08a      	sub	sp, #40	; 0x28
 8029806:	af02      	add	r7, sp, #8
 8029808:	60f8      	str	r0, [r7, #12]
 802980a:	60b9      	str	r1, [r7, #8]
 802980c:	603b      	str	r3, [r7, #0]
 802980e:	4613      	mov	r3, r2
 8029810:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8029812:	2300      	movs	r3, #0
 8029814:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8029816:	68fb      	ldr	r3, [r7, #12]
 8029818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802981c:	b2db      	uxtb	r3, r3
 802981e:	2b20      	cmp	r3, #32
 8029820:	d17c      	bne.n	802991c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8029822:	68bb      	ldr	r3, [r7, #8]
 8029824:	2b00      	cmp	r3, #0
 8029826:	d002      	beq.n	802982e <HAL_UART_Transmit+0x2c>
 8029828:	88fb      	ldrh	r3, [r7, #6]
 802982a:	2b00      	cmp	r3, #0
 802982c:	d101      	bne.n	8029832 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 802982e:	2301      	movs	r3, #1
 8029830:	e075      	b.n	802991e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029832:	68fb      	ldr	r3, [r7, #12]
 8029834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029838:	2b01      	cmp	r3, #1
 802983a:	d101      	bne.n	8029840 <HAL_UART_Transmit+0x3e>
 802983c:	2302      	movs	r3, #2
 802983e:	e06e      	b.n	802991e <HAL_UART_Transmit+0x11c>
 8029840:	68fb      	ldr	r3, [r7, #12]
 8029842:	2201      	movs	r2, #1
 8029844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029848:	68fb      	ldr	r3, [r7, #12]
 802984a:	2200      	movs	r2, #0
 802984c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802984e:	68fb      	ldr	r3, [r7, #12]
 8029850:	2221      	movs	r2, #33	; 0x21
 8029852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8029856:	f7f9 ff0b 	bl	8023670 <HAL_GetTick>
 802985a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802985c:	68fb      	ldr	r3, [r7, #12]
 802985e:	88fa      	ldrh	r2, [r7, #6]
 8029860:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8029862:	68fb      	ldr	r3, [r7, #12]
 8029864:	88fa      	ldrh	r2, [r7, #6]
 8029866:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8029868:	68fb      	ldr	r3, [r7, #12]
 802986a:	689b      	ldr	r3, [r3, #8]
 802986c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029870:	d108      	bne.n	8029884 <HAL_UART_Transmit+0x82>
 8029872:	68fb      	ldr	r3, [r7, #12]
 8029874:	691b      	ldr	r3, [r3, #16]
 8029876:	2b00      	cmp	r3, #0
 8029878:	d104      	bne.n	8029884 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 802987a:	2300      	movs	r3, #0
 802987c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802987e:	68bb      	ldr	r3, [r7, #8]
 8029880:	61bb      	str	r3, [r7, #24]
 8029882:	e003      	b.n	802988c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8029884:	68bb      	ldr	r3, [r7, #8]
 8029886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8029888:	2300      	movs	r3, #0
 802988a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802988c:	68fb      	ldr	r3, [r7, #12]
 802988e:	2200      	movs	r2, #0
 8029890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8029894:	e02a      	b.n	80298ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8029896:	683b      	ldr	r3, [r7, #0]
 8029898:	9300      	str	r3, [sp, #0]
 802989a:	697b      	ldr	r3, [r7, #20]
 802989c:	2200      	movs	r2, #0
 802989e:	2180      	movs	r1, #128	; 0x80
 80298a0:	68f8      	ldr	r0, [r7, #12]
 80298a2:	f000 fb1f 	bl	8029ee4 <UART_WaitOnFlagUntilTimeout>
 80298a6:	4603      	mov	r3, r0
 80298a8:	2b00      	cmp	r3, #0
 80298aa:	d001      	beq.n	80298b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80298ac:	2303      	movs	r3, #3
 80298ae:	e036      	b.n	802991e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80298b0:	69fb      	ldr	r3, [r7, #28]
 80298b2:	2b00      	cmp	r3, #0
 80298b4:	d10b      	bne.n	80298ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80298b6:	69bb      	ldr	r3, [r7, #24]
 80298b8:	881b      	ldrh	r3, [r3, #0]
 80298ba:	461a      	mov	r2, r3
 80298bc:	68fb      	ldr	r3, [r7, #12]
 80298be:	681b      	ldr	r3, [r3, #0]
 80298c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80298c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80298c6:	69bb      	ldr	r3, [r7, #24]
 80298c8:	3302      	adds	r3, #2
 80298ca:	61bb      	str	r3, [r7, #24]
 80298cc:	e007      	b.n	80298de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80298ce:	69fb      	ldr	r3, [r7, #28]
 80298d0:	781a      	ldrb	r2, [r3, #0]
 80298d2:	68fb      	ldr	r3, [r7, #12]
 80298d4:	681b      	ldr	r3, [r3, #0]
 80298d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80298d8:	69fb      	ldr	r3, [r7, #28]
 80298da:	3301      	adds	r3, #1
 80298dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80298de:	68fb      	ldr	r3, [r7, #12]
 80298e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298e2:	b29b      	uxth	r3, r3
 80298e4:	3b01      	subs	r3, #1
 80298e6:	b29a      	uxth	r2, r3
 80298e8:	68fb      	ldr	r3, [r7, #12]
 80298ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80298ec:	68fb      	ldr	r3, [r7, #12]
 80298ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80298f0:	b29b      	uxth	r3, r3
 80298f2:	2b00      	cmp	r3, #0
 80298f4:	d1cf      	bne.n	8029896 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80298f6:	683b      	ldr	r3, [r7, #0]
 80298f8:	9300      	str	r3, [sp, #0]
 80298fa:	697b      	ldr	r3, [r7, #20]
 80298fc:	2200      	movs	r2, #0
 80298fe:	2140      	movs	r1, #64	; 0x40
 8029900:	68f8      	ldr	r0, [r7, #12]
 8029902:	f000 faef 	bl	8029ee4 <UART_WaitOnFlagUntilTimeout>
 8029906:	4603      	mov	r3, r0
 8029908:	2b00      	cmp	r3, #0
 802990a:	d001      	beq.n	8029910 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 802990c:	2303      	movs	r3, #3
 802990e:	e006      	b.n	802991e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8029910:	68fb      	ldr	r3, [r7, #12]
 8029912:	2220      	movs	r2, #32
 8029914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8029918:	2300      	movs	r3, #0
 802991a:	e000      	b.n	802991e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 802991c:	2302      	movs	r3, #2
  }
}
 802991e:	4618      	mov	r0, r3
 8029920:	3720      	adds	r7, #32
 8029922:	46bd      	mov	sp, r7
 8029924:	bd80      	pop	{r7, pc}

08029926 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029926:	b580      	push	{r7, lr}
 8029928:	b084      	sub	sp, #16
 802992a:	af00      	add	r7, sp, #0
 802992c:	60f8      	str	r0, [r7, #12]
 802992e:	60b9      	str	r1, [r7, #8]
 8029930:	4613      	mov	r3, r2
 8029932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8029934:	68fb      	ldr	r3, [r7, #12]
 8029936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802993a:	b2db      	uxtb	r3, r3
 802993c:	2b20      	cmp	r3, #32
 802993e:	d11d      	bne.n	802997c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8029940:	68bb      	ldr	r3, [r7, #8]
 8029942:	2b00      	cmp	r3, #0
 8029944:	d002      	beq.n	802994c <HAL_UART_Receive_IT+0x26>
 8029946:	88fb      	ldrh	r3, [r7, #6]
 8029948:	2b00      	cmp	r3, #0
 802994a:	d101      	bne.n	8029950 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 802994c:	2301      	movs	r3, #1
 802994e:	e016      	b.n	802997e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029950:	68fb      	ldr	r3, [r7, #12]
 8029952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029956:	2b01      	cmp	r3, #1
 8029958:	d101      	bne.n	802995e <HAL_UART_Receive_IT+0x38>
 802995a:	2302      	movs	r3, #2
 802995c:	e00f      	b.n	802997e <HAL_UART_Receive_IT+0x58>
 802995e:	68fb      	ldr	r3, [r7, #12]
 8029960:	2201      	movs	r2, #1
 8029962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029966:	68fb      	ldr	r3, [r7, #12]
 8029968:	2200      	movs	r2, #0
 802996a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 802996c:	88fb      	ldrh	r3, [r7, #6]
 802996e:	461a      	mov	r2, r3
 8029970:	68b9      	ldr	r1, [r7, #8]
 8029972:	68f8      	ldr	r0, [r7, #12]
 8029974:	f000 fb24 	bl	8029fc0 <UART_Start_Receive_IT>
 8029978:	4603      	mov	r3, r0
 802997a:	e000      	b.n	802997e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 802997c:	2302      	movs	r3, #2
  }
}
 802997e:	4618      	mov	r0, r3
 8029980:	3710      	adds	r7, #16
 8029982:	46bd      	mov	sp, r7
 8029984:	bd80      	pop	{r7, pc}
	...

08029988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8029988:	b580      	push	{r7, lr}
 802998a:	b0ba      	sub	sp, #232	; 0xe8
 802998c:	af00      	add	r7, sp, #0
 802998e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8029990:	687b      	ldr	r3, [r7, #4]
 8029992:	681b      	ldr	r3, [r3, #0]
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 802999a:	687b      	ldr	r3, [r7, #4]
 802999c:	681b      	ldr	r3, [r3, #0]
 802999e:	68db      	ldr	r3, [r3, #12]
 80299a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80299a4:	687b      	ldr	r3, [r7, #4]
 80299a6:	681b      	ldr	r3, [r3, #0]
 80299a8:	695b      	ldr	r3, [r3, #20]
 80299aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80299ae:	2300      	movs	r3, #0
 80299b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80299b4:	2300      	movs	r3, #0
 80299b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80299ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299be:	f003 030f 	and.w	r3, r3, #15
 80299c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80299c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80299ca:	2b00      	cmp	r3, #0
 80299cc:	d10f      	bne.n	80299ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80299ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299d2:	f003 0320 	and.w	r3, r3, #32
 80299d6:	2b00      	cmp	r3, #0
 80299d8:	d009      	beq.n	80299ee <HAL_UART_IRQHandler+0x66>
 80299da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299de:	f003 0320 	and.w	r3, r3, #32
 80299e2:	2b00      	cmp	r3, #0
 80299e4:	d003      	beq.n	80299ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80299e6:	6878      	ldr	r0, [r7, #4]
 80299e8:	f000 fc07 	bl	802a1fa <UART_Receive_IT>
      return;
 80299ec:	e256      	b.n	8029e9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80299ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80299f2:	2b00      	cmp	r3, #0
 80299f4:	f000 80de 	beq.w	8029bb4 <HAL_UART_IRQHandler+0x22c>
 80299f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80299fc:	f003 0301 	and.w	r3, r3, #1
 8029a00:	2b00      	cmp	r3, #0
 8029a02:	d106      	bne.n	8029a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8029a0c:	2b00      	cmp	r3, #0
 8029a0e:	f000 80d1 	beq.w	8029bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a16:	f003 0301 	and.w	r3, r3, #1
 8029a1a:	2b00      	cmp	r3, #0
 8029a1c:	d00b      	beq.n	8029a36 <HAL_UART_IRQHandler+0xae>
 8029a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	d005      	beq.n	8029a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8029a2a:	687b      	ldr	r3, [r7, #4]
 8029a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a2e:	f043 0201 	orr.w	r2, r3, #1
 8029a32:	687b      	ldr	r3, [r7, #4]
 8029a34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a3a:	f003 0304 	and.w	r3, r3, #4
 8029a3e:	2b00      	cmp	r3, #0
 8029a40:	d00b      	beq.n	8029a5a <HAL_UART_IRQHandler+0xd2>
 8029a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a46:	f003 0301 	and.w	r3, r3, #1
 8029a4a:	2b00      	cmp	r3, #0
 8029a4c:	d005      	beq.n	8029a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8029a4e:	687b      	ldr	r3, [r7, #4]
 8029a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a52:	f043 0202 	orr.w	r2, r3, #2
 8029a56:	687b      	ldr	r3, [r7, #4]
 8029a58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8029a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a5e:	f003 0302 	and.w	r3, r3, #2
 8029a62:	2b00      	cmp	r3, #0
 8029a64:	d00b      	beq.n	8029a7e <HAL_UART_IRQHandler+0xf6>
 8029a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a6a:	f003 0301 	and.w	r3, r3, #1
 8029a6e:	2b00      	cmp	r3, #0
 8029a70:	d005      	beq.n	8029a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8029a72:	687b      	ldr	r3, [r7, #4]
 8029a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a76:	f043 0204 	orr.w	r2, r3, #4
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8029a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029a82:	f003 0308 	and.w	r3, r3, #8
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	d011      	beq.n	8029aae <HAL_UART_IRQHandler+0x126>
 8029a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029a8e:	f003 0320 	and.w	r3, r3, #32
 8029a92:	2b00      	cmp	r3, #0
 8029a94:	d105      	bne.n	8029aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8029a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029a9a:	f003 0301 	and.w	r3, r3, #1
 8029a9e:	2b00      	cmp	r3, #0
 8029aa0:	d005      	beq.n	8029aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8029aa2:	687b      	ldr	r3, [r7, #4]
 8029aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029aa6:	f043 0208 	orr.w	r2, r3, #8
 8029aaa:	687b      	ldr	r3, [r7, #4]
 8029aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8029aae:	687b      	ldr	r3, [r7, #4]
 8029ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029ab2:	2b00      	cmp	r3, #0
 8029ab4:	f000 81ed 	beq.w	8029e92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8029ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029abc:	f003 0320 	and.w	r3, r3, #32
 8029ac0:	2b00      	cmp	r3, #0
 8029ac2:	d008      	beq.n	8029ad6 <HAL_UART_IRQHandler+0x14e>
 8029ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029ac8:	f003 0320 	and.w	r3, r3, #32
 8029acc:	2b00      	cmp	r3, #0
 8029ace:	d002      	beq.n	8029ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8029ad0:	6878      	ldr	r0, [r7, #4]
 8029ad2:	f000 fb92 	bl	802a1fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8029ad6:	687b      	ldr	r3, [r7, #4]
 8029ad8:	681b      	ldr	r3, [r3, #0]
 8029ada:	695b      	ldr	r3, [r3, #20]
 8029adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029ae0:	2b40      	cmp	r3, #64	; 0x40
 8029ae2:	bf0c      	ite	eq
 8029ae4:	2301      	moveq	r3, #1
 8029ae6:	2300      	movne	r3, #0
 8029ae8:	b2db      	uxtb	r3, r3
 8029aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029af2:	f003 0308 	and.w	r3, r3, #8
 8029af6:	2b00      	cmp	r3, #0
 8029af8:	d103      	bne.n	8029b02 <HAL_UART_IRQHandler+0x17a>
 8029afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029afe:	2b00      	cmp	r3, #0
 8029b00:	d04f      	beq.n	8029ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029b02:	6878      	ldr	r0, [r7, #4]
 8029b04:	f000 fa9a 	bl	802a03c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b08:	687b      	ldr	r3, [r7, #4]
 8029b0a:	681b      	ldr	r3, [r3, #0]
 8029b0c:	695b      	ldr	r3, [r3, #20]
 8029b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029b12:	2b40      	cmp	r3, #64	; 0x40
 8029b14:	d141      	bne.n	8029b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029b16:	687b      	ldr	r3, [r7, #4]
 8029b18:	681b      	ldr	r3, [r3, #0]
 8029b1a:	3314      	adds	r3, #20
 8029b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029b24:	e853 3f00 	ldrex	r3, [r3]
 8029b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029b38:	687b      	ldr	r3, [r7, #4]
 8029b3a:	681b      	ldr	r3, [r3, #0]
 8029b3c:	3314      	adds	r3, #20
 8029b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029b52:	e841 2300 	strex	r3, r2, [r1]
 8029b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029b5e:	2b00      	cmp	r3, #0
 8029b60:	d1d9      	bne.n	8029b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8029b62:	687b      	ldr	r3, [r7, #4]
 8029b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b66:	2b00      	cmp	r3, #0
 8029b68:	d013      	beq.n	8029b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029b6a:	687b      	ldr	r3, [r7, #4]
 8029b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b6e:	4a7d      	ldr	r2, [pc, #500]	; (8029d64 <HAL_UART_IRQHandler+0x3dc>)
 8029b70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b76:	4618      	mov	r0, r3
 8029b78:	f7fa f840 	bl	8023bfc <HAL_DMA_Abort_IT>
 8029b7c:	4603      	mov	r3, r0
 8029b7e:	2b00      	cmp	r3, #0
 8029b80:	d016      	beq.n	8029bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029b88:	687a      	ldr	r2, [r7, #4]
 8029b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029b8c:	4610      	mov	r0, r2
 8029b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b90:	e00e      	b.n	8029bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029b92:	6878      	ldr	r0, [r7, #4]
 8029b94:	f000 f990 	bl	8029eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b98:	e00a      	b.n	8029bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029b9a:	6878      	ldr	r0, [r7, #4]
 8029b9c:	f000 f98c 	bl	8029eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029ba0:	e006      	b.n	8029bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029ba2:	6878      	ldr	r0, [r7, #4]
 8029ba4:	f000 f988 	bl	8029eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029ba8:	687b      	ldr	r3, [r7, #4]
 8029baa:	2200      	movs	r2, #0
 8029bac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029bae:	e170      	b.n	8029e92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bb0:	bf00      	nop
    return;
 8029bb2:	e16e      	b.n	8029e92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029bb4:	687b      	ldr	r3, [r7, #4]
 8029bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029bb8:	2b01      	cmp	r3, #1
 8029bba:	f040 814a 	bne.w	8029e52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029bc2:	f003 0310 	and.w	r3, r3, #16
 8029bc6:	2b00      	cmp	r3, #0
 8029bc8:	f000 8143 	beq.w	8029e52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029bd0:	f003 0310 	and.w	r3, r3, #16
 8029bd4:	2b00      	cmp	r3, #0
 8029bd6:	f000 813c 	beq.w	8029e52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029bda:	2300      	movs	r3, #0
 8029bdc:	60bb      	str	r3, [r7, #8]
 8029bde:	687b      	ldr	r3, [r7, #4]
 8029be0:	681b      	ldr	r3, [r3, #0]
 8029be2:	681b      	ldr	r3, [r3, #0]
 8029be4:	60bb      	str	r3, [r7, #8]
 8029be6:	687b      	ldr	r3, [r7, #4]
 8029be8:	681b      	ldr	r3, [r3, #0]
 8029bea:	685b      	ldr	r3, [r3, #4]
 8029bec:	60bb      	str	r3, [r7, #8]
 8029bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029bf0:	687b      	ldr	r3, [r7, #4]
 8029bf2:	681b      	ldr	r3, [r3, #0]
 8029bf4:	695b      	ldr	r3, [r3, #20]
 8029bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029bfa:	2b40      	cmp	r3, #64	; 0x40
 8029bfc:	f040 80b4 	bne.w	8029d68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029c00:	687b      	ldr	r3, [r7, #4]
 8029c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c04:	681b      	ldr	r3, [r3, #0]
 8029c06:	685b      	ldr	r3, [r3, #4]
 8029c08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029c10:	2b00      	cmp	r3, #0
 8029c12:	f000 8140 	beq.w	8029e96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029c16:	687b      	ldr	r3, [r7, #4]
 8029c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c1e:	429a      	cmp	r2, r3
 8029c20:	f080 8139 	bcs.w	8029e96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029c24:	687b      	ldr	r3, [r7, #4]
 8029c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029c2c:	687b      	ldr	r3, [r7, #4]
 8029c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c30:	69db      	ldr	r3, [r3, #28]
 8029c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029c36:	f000 8088 	beq.w	8029d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029c3a:	687b      	ldr	r3, [r7, #4]
 8029c3c:	681b      	ldr	r3, [r3, #0]
 8029c3e:	330c      	adds	r3, #12
 8029c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029c48:	e853 3f00 	ldrex	r3, [r3]
 8029c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029c5c:	687b      	ldr	r3, [r7, #4]
 8029c5e:	681b      	ldr	r3, [r3, #0]
 8029c60:	330c      	adds	r3, #12
 8029c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8029c66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029c76:	e841 2300 	strex	r3, r2, [r1]
 8029c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029c82:	2b00      	cmp	r3, #0
 8029c84:	d1d9      	bne.n	8029c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029c86:	687b      	ldr	r3, [r7, #4]
 8029c88:	681b      	ldr	r3, [r3, #0]
 8029c8a:	3314      	adds	r3, #20
 8029c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029c90:	e853 3f00 	ldrex	r3, [r3]
 8029c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029c98:	f023 0301 	bic.w	r3, r3, #1
 8029c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029ca0:	687b      	ldr	r3, [r7, #4]
 8029ca2:	681b      	ldr	r3, [r3, #0]
 8029ca4:	3314      	adds	r3, #20
 8029ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029cb6:	e841 2300 	strex	r3, r2, [r1]
 8029cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029cbe:	2b00      	cmp	r3, #0
 8029cc0:	d1e1      	bne.n	8029c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	681b      	ldr	r3, [r3, #0]
 8029cc6:	3314      	adds	r3, #20
 8029cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029ccc:	e853 3f00 	ldrex	r3, [r3]
 8029cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029cdc:	687b      	ldr	r3, [r7, #4]
 8029cde:	681b      	ldr	r3, [r3, #0]
 8029ce0:	3314      	adds	r3, #20
 8029ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029cee:	e841 2300 	strex	r3, r2, [r1]
 8029cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029cf6:	2b00      	cmp	r3, #0
 8029cf8:	d1e3      	bne.n	8029cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029cfa:	687b      	ldr	r3, [r7, #4]
 8029cfc:	2220      	movs	r2, #32
 8029cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	2200      	movs	r2, #0
 8029d06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d08:	687b      	ldr	r3, [r7, #4]
 8029d0a:	681b      	ldr	r3, [r3, #0]
 8029d0c:	330c      	adds	r3, #12
 8029d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d12:	e853 3f00 	ldrex	r3, [r3]
 8029d16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d1a:	f023 0310 	bic.w	r3, r3, #16
 8029d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	681b      	ldr	r3, [r3, #0]
 8029d26:	330c      	adds	r3, #12
 8029d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029d2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8029d2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029d34:	e841 2300 	strex	r3, r2, [r1]
 8029d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029d3c:	2b00      	cmp	r3, #0
 8029d3e:	d1e3      	bne.n	8029d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029d40:	687b      	ldr	r3, [r7, #4]
 8029d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029d44:	4618      	mov	r0, r3
 8029d46:	f7f9 fee9 	bl	8023b1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d4e:	687b      	ldr	r3, [r7, #4]
 8029d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d52:	b29b      	uxth	r3, r3
 8029d54:	1ad3      	subs	r3, r2, r3
 8029d56:	b29b      	uxth	r3, r3
 8029d58:	4619      	mov	r1, r3
 8029d5a:	6878      	ldr	r0, [r7, #4]
 8029d5c:	f000 f8b6 	bl	8029ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029d60:	e099      	b.n	8029e96 <HAL_UART_IRQHandler+0x50e>
 8029d62:	bf00      	nop
 8029d64:	0802a103 	.word	0x0802a103
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d70:	b29b      	uxth	r3, r3
 8029d72:	1ad3      	subs	r3, r2, r3
 8029d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029d78:	687b      	ldr	r3, [r7, #4]
 8029d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029d7c:	b29b      	uxth	r3, r3
 8029d7e:	2b00      	cmp	r3, #0
 8029d80:	f000 808b 	beq.w	8029e9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8029d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029d88:	2b00      	cmp	r3, #0
 8029d8a:	f000 8086 	beq.w	8029e9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029d8e:	687b      	ldr	r3, [r7, #4]
 8029d90:	681b      	ldr	r3, [r3, #0]
 8029d92:	330c      	adds	r3, #12
 8029d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029d98:	e853 3f00 	ldrex	r3, [r3]
 8029d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029da8:	687b      	ldr	r3, [r7, #4]
 8029daa:	681b      	ldr	r3, [r3, #0]
 8029dac:	330c      	adds	r3, #12
 8029dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029db2:	647a      	str	r2, [r7, #68]	; 0x44
 8029db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029dba:	e841 2300 	strex	r3, r2, [r1]
 8029dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	d1e3      	bne.n	8029d8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029dc6:	687b      	ldr	r3, [r7, #4]
 8029dc8:	681b      	ldr	r3, [r3, #0]
 8029dca:	3314      	adds	r3, #20
 8029dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029dd0:	e853 3f00 	ldrex	r3, [r3]
 8029dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8029dd6:	6a3b      	ldr	r3, [r7, #32]
 8029dd8:	f023 0301 	bic.w	r3, r3, #1
 8029ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029de0:	687b      	ldr	r3, [r7, #4]
 8029de2:	681b      	ldr	r3, [r3, #0]
 8029de4:	3314      	adds	r3, #20
 8029de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029dea:	633a      	str	r2, [r7, #48]	; 0x30
 8029dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029df2:	e841 2300 	strex	r3, r2, [r1]
 8029df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	d1e3      	bne.n	8029dc6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029dfe:	687b      	ldr	r3, [r7, #4]
 8029e00:	2220      	movs	r2, #32
 8029e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	2200      	movs	r2, #0
 8029e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	681b      	ldr	r3, [r3, #0]
 8029e10:	330c      	adds	r3, #12
 8029e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e14:	693b      	ldr	r3, [r7, #16]
 8029e16:	e853 3f00 	ldrex	r3, [r3]
 8029e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8029e1c:	68fb      	ldr	r3, [r7, #12]
 8029e1e:	f023 0310 	bic.w	r3, r3, #16
 8029e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	681b      	ldr	r3, [r3, #0]
 8029e2a:	330c      	adds	r3, #12
 8029e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029e30:	61fa      	str	r2, [r7, #28]
 8029e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e34:	69b9      	ldr	r1, [r7, #24]
 8029e36:	69fa      	ldr	r2, [r7, #28]
 8029e38:	e841 2300 	strex	r3, r2, [r1]
 8029e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8029e3e:	697b      	ldr	r3, [r7, #20]
 8029e40:	2b00      	cmp	r3, #0
 8029e42:	d1e3      	bne.n	8029e0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029e48:	4619      	mov	r1, r3
 8029e4a:	6878      	ldr	r0, [r7, #4]
 8029e4c:	f000 f83e 	bl	8029ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029e50:	e023      	b.n	8029e9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e5a:	2b00      	cmp	r3, #0
 8029e5c:	d009      	beq.n	8029e72 <HAL_UART_IRQHandler+0x4ea>
 8029e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029e66:	2b00      	cmp	r3, #0
 8029e68:	d003      	beq.n	8029e72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8029e6a:	6878      	ldr	r0, [r7, #4]
 8029e6c:	f000 f95d 	bl	802a12a <UART_Transmit_IT>
    return;
 8029e70:	e014      	b.n	8029e9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8029e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029e7a:	2b00      	cmp	r3, #0
 8029e7c:	d00e      	beq.n	8029e9c <HAL_UART_IRQHandler+0x514>
 8029e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029e86:	2b00      	cmp	r3, #0
 8029e88:	d008      	beq.n	8029e9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8029e8a:	6878      	ldr	r0, [r7, #4]
 8029e8c:	f000 f99d 	bl	802a1ca <UART_EndTransmit_IT>
    return;
 8029e90:	e004      	b.n	8029e9c <HAL_UART_IRQHandler+0x514>
    return;
 8029e92:	bf00      	nop
 8029e94:	e002      	b.n	8029e9c <HAL_UART_IRQHandler+0x514>
      return;
 8029e96:	bf00      	nop
 8029e98:	e000      	b.n	8029e9c <HAL_UART_IRQHandler+0x514>
      return;
 8029e9a:	bf00      	nop
  }
}
 8029e9c:	37e8      	adds	r7, #232	; 0xe8
 8029e9e:	46bd      	mov	sp, r7
 8029ea0:	bd80      	pop	{r7, pc}
 8029ea2:	bf00      	nop

08029ea4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029ea4:	b480      	push	{r7}
 8029ea6:	b083      	sub	sp, #12
 8029ea8:	af00      	add	r7, sp, #0
 8029eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029eac:	bf00      	nop
 8029eae:	370c      	adds	r7, #12
 8029eb0:	46bd      	mov	sp, r7
 8029eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029eb6:	4770      	bx	lr

08029eb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8029eb8:	b480      	push	{r7}
 8029eba:	b083      	sub	sp, #12
 8029ebc:	af00      	add	r7, sp, #0
 8029ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029ec0:	bf00      	nop
 8029ec2:	370c      	adds	r7, #12
 8029ec4:	46bd      	mov	sp, r7
 8029ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029eca:	4770      	bx	lr

08029ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029ecc:	b480      	push	{r7}
 8029ece:	b083      	sub	sp, #12
 8029ed0:	af00      	add	r7, sp, #0
 8029ed2:	6078      	str	r0, [r7, #4]
 8029ed4:	460b      	mov	r3, r1
 8029ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8029ed8:	bf00      	nop
 8029eda:	370c      	adds	r7, #12
 8029edc:	46bd      	mov	sp, r7
 8029ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ee2:	4770      	bx	lr

08029ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029ee4:	b580      	push	{r7, lr}
 8029ee6:	b090      	sub	sp, #64	; 0x40
 8029ee8:	af00      	add	r7, sp, #0
 8029eea:	60f8      	str	r0, [r7, #12]
 8029eec:	60b9      	str	r1, [r7, #8]
 8029eee:	603b      	str	r3, [r7, #0]
 8029ef0:	4613      	mov	r3, r2
 8029ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029ef4:	e050      	b.n	8029f98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029efc:	d04c      	beq.n	8029f98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029f00:	2b00      	cmp	r3, #0
 8029f02:	d007      	beq.n	8029f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8029f04:	f7f9 fbb4 	bl	8023670 <HAL_GetTick>
 8029f08:	4602      	mov	r2, r0
 8029f0a:	683b      	ldr	r3, [r7, #0]
 8029f0c:	1ad3      	subs	r3, r2, r3
 8029f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029f10:	429a      	cmp	r2, r3
 8029f12:	d241      	bcs.n	8029f98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029f14:	68fb      	ldr	r3, [r7, #12]
 8029f16:	681b      	ldr	r3, [r3, #0]
 8029f18:	330c      	adds	r3, #12
 8029f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029f1e:	e853 3f00 	ldrex	r3, [r3]
 8029f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029f2c:	68fb      	ldr	r3, [r7, #12]
 8029f2e:	681b      	ldr	r3, [r3, #0]
 8029f30:	330c      	adds	r3, #12
 8029f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029f34:	637a      	str	r2, [r7, #52]	; 0x34
 8029f36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029f3c:	e841 2300 	strex	r3, r2, [r1]
 8029f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029f44:	2b00      	cmp	r3, #0
 8029f46:	d1e5      	bne.n	8029f14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	681b      	ldr	r3, [r3, #0]
 8029f4c:	3314      	adds	r3, #20
 8029f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f50:	697b      	ldr	r3, [r7, #20]
 8029f52:	e853 3f00 	ldrex	r3, [r3]
 8029f56:	613b      	str	r3, [r7, #16]
   return(result);
 8029f58:	693b      	ldr	r3, [r7, #16]
 8029f5a:	f023 0301 	bic.w	r3, r3, #1
 8029f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8029f60:	68fb      	ldr	r3, [r7, #12]
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	3314      	adds	r3, #20
 8029f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029f68:	623a      	str	r2, [r7, #32]
 8029f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f6c:	69f9      	ldr	r1, [r7, #28]
 8029f6e:	6a3a      	ldr	r2, [r7, #32]
 8029f70:	e841 2300 	strex	r3, r2, [r1]
 8029f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8029f76:	69bb      	ldr	r3, [r7, #24]
 8029f78:	2b00      	cmp	r3, #0
 8029f7a:	d1e5      	bne.n	8029f48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029f7c:	68fb      	ldr	r3, [r7, #12]
 8029f7e:	2220      	movs	r2, #32
 8029f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029f84:	68fb      	ldr	r3, [r7, #12]
 8029f86:	2220      	movs	r2, #32
 8029f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029f8c:	68fb      	ldr	r3, [r7, #12]
 8029f8e:	2200      	movs	r2, #0
 8029f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8029f94:	2303      	movs	r3, #3
 8029f96:	e00f      	b.n	8029fb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029f98:	68fb      	ldr	r3, [r7, #12]
 8029f9a:	681b      	ldr	r3, [r3, #0]
 8029f9c:	681a      	ldr	r2, [r3, #0]
 8029f9e:	68bb      	ldr	r3, [r7, #8]
 8029fa0:	4013      	ands	r3, r2
 8029fa2:	68ba      	ldr	r2, [r7, #8]
 8029fa4:	429a      	cmp	r2, r3
 8029fa6:	bf0c      	ite	eq
 8029fa8:	2301      	moveq	r3, #1
 8029faa:	2300      	movne	r3, #0
 8029fac:	b2db      	uxtb	r3, r3
 8029fae:	461a      	mov	r2, r3
 8029fb0:	79fb      	ldrb	r3, [r7, #7]
 8029fb2:	429a      	cmp	r2, r3
 8029fb4:	d09f      	beq.n	8029ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8029fb6:	2300      	movs	r3, #0
}
 8029fb8:	4618      	mov	r0, r3
 8029fba:	3740      	adds	r7, #64	; 0x40
 8029fbc:	46bd      	mov	sp, r7
 8029fbe:	bd80      	pop	{r7, pc}

08029fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029fc0:	b480      	push	{r7}
 8029fc2:	b085      	sub	sp, #20
 8029fc4:	af00      	add	r7, sp, #0
 8029fc6:	60f8      	str	r0, [r7, #12]
 8029fc8:	60b9      	str	r1, [r7, #8]
 8029fca:	4613      	mov	r3, r2
 8029fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029fce:	68fb      	ldr	r3, [r7, #12]
 8029fd0:	68ba      	ldr	r2, [r7, #8]
 8029fd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029fd4:	68fb      	ldr	r3, [r7, #12]
 8029fd6:	88fa      	ldrh	r2, [r7, #6]
 8029fd8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8029fda:	68fb      	ldr	r3, [r7, #12]
 8029fdc:	88fa      	ldrh	r2, [r7, #6]
 8029fde:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029fe0:	68fb      	ldr	r3, [r7, #12]
 8029fe2:	2200      	movs	r2, #0
 8029fe4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029fe6:	68fb      	ldr	r3, [r7, #12]
 8029fe8:	2222      	movs	r2, #34	; 0x22
 8029fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029fee:	68fb      	ldr	r3, [r7, #12]
 8029ff0:	2200      	movs	r2, #0
 8029ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8029ff6:	68fb      	ldr	r3, [r7, #12]
 8029ff8:	691b      	ldr	r3, [r3, #16]
 8029ffa:	2b00      	cmp	r3, #0
 8029ffc:	d007      	beq.n	802a00e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8029ffe:	68fb      	ldr	r3, [r7, #12]
 802a000:	681b      	ldr	r3, [r3, #0]
 802a002:	68da      	ldr	r2, [r3, #12]
 802a004:	68fb      	ldr	r3, [r7, #12]
 802a006:	681b      	ldr	r3, [r3, #0]
 802a008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802a00c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 802a00e:	68fb      	ldr	r3, [r7, #12]
 802a010:	681b      	ldr	r3, [r3, #0]
 802a012:	695a      	ldr	r2, [r3, #20]
 802a014:	68fb      	ldr	r3, [r7, #12]
 802a016:	681b      	ldr	r3, [r3, #0]
 802a018:	f042 0201 	orr.w	r2, r2, #1
 802a01c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 802a01e:	68fb      	ldr	r3, [r7, #12]
 802a020:	681b      	ldr	r3, [r3, #0]
 802a022:	68da      	ldr	r2, [r3, #12]
 802a024:	68fb      	ldr	r3, [r7, #12]
 802a026:	681b      	ldr	r3, [r3, #0]
 802a028:	f042 0220 	orr.w	r2, r2, #32
 802a02c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 802a02e:	2300      	movs	r3, #0
}
 802a030:	4618      	mov	r0, r3
 802a032:	3714      	adds	r7, #20
 802a034:	46bd      	mov	sp, r7
 802a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a03a:	4770      	bx	lr

0802a03c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802a03c:	b480      	push	{r7}
 802a03e:	b095      	sub	sp, #84	; 0x54
 802a040:	af00      	add	r7, sp, #0
 802a042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802a044:	687b      	ldr	r3, [r7, #4]
 802a046:	681b      	ldr	r3, [r3, #0]
 802a048:	330c      	adds	r3, #12
 802a04a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a04e:	e853 3f00 	ldrex	r3, [r3]
 802a052:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802a054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a056:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 802a05a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a05c:	687b      	ldr	r3, [r7, #4]
 802a05e:	681b      	ldr	r3, [r3, #0]
 802a060:	330c      	adds	r3, #12
 802a062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802a064:	643a      	str	r2, [r7, #64]	; 0x40
 802a066:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a068:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 802a06a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802a06c:	e841 2300 	strex	r3, r2, [r1]
 802a070:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802a072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802a074:	2b00      	cmp	r3, #0
 802a076:	d1e5      	bne.n	802a044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802a078:	687b      	ldr	r3, [r7, #4]
 802a07a:	681b      	ldr	r3, [r3, #0]
 802a07c:	3314      	adds	r3, #20
 802a07e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a080:	6a3b      	ldr	r3, [r7, #32]
 802a082:	e853 3f00 	ldrex	r3, [r3]
 802a086:	61fb      	str	r3, [r7, #28]
   return(result);
 802a088:	69fb      	ldr	r3, [r7, #28]
 802a08a:	f023 0301 	bic.w	r3, r3, #1
 802a08e:	64bb      	str	r3, [r7, #72]	; 0x48
 802a090:	687b      	ldr	r3, [r7, #4]
 802a092:	681b      	ldr	r3, [r3, #0]
 802a094:	3314      	adds	r3, #20
 802a096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802a098:	62fa      	str	r2, [r7, #44]	; 0x2c
 802a09a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a09c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802a09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802a0a0:	e841 2300 	strex	r3, r2, [r1]
 802a0a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a0a8:	2b00      	cmp	r3, #0
 802a0aa:	d1e5      	bne.n	802a078 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a0ac:	687b      	ldr	r3, [r7, #4]
 802a0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0b0:	2b01      	cmp	r3, #1
 802a0b2:	d119      	bne.n	802a0e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a0b4:	687b      	ldr	r3, [r7, #4]
 802a0b6:	681b      	ldr	r3, [r3, #0]
 802a0b8:	330c      	adds	r3, #12
 802a0ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a0bc:	68fb      	ldr	r3, [r7, #12]
 802a0be:	e853 3f00 	ldrex	r3, [r3]
 802a0c2:	60bb      	str	r3, [r7, #8]
   return(result);
 802a0c4:	68bb      	ldr	r3, [r7, #8]
 802a0c6:	f023 0310 	bic.w	r3, r3, #16
 802a0ca:	647b      	str	r3, [r7, #68]	; 0x44
 802a0cc:	687b      	ldr	r3, [r7, #4]
 802a0ce:	681b      	ldr	r3, [r3, #0]
 802a0d0:	330c      	adds	r3, #12
 802a0d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a0d4:	61ba      	str	r2, [r7, #24]
 802a0d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a0d8:	6979      	ldr	r1, [r7, #20]
 802a0da:	69ba      	ldr	r2, [r7, #24]
 802a0dc:	e841 2300 	strex	r3, r2, [r1]
 802a0e0:	613b      	str	r3, [r7, #16]
   return(result);
 802a0e2:	693b      	ldr	r3, [r7, #16]
 802a0e4:	2b00      	cmp	r3, #0
 802a0e6:	d1e5      	bne.n	802a0b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802a0e8:	687b      	ldr	r3, [r7, #4]
 802a0ea:	2220      	movs	r2, #32
 802a0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a0f0:	687b      	ldr	r3, [r7, #4]
 802a0f2:	2200      	movs	r2, #0
 802a0f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 802a0f6:	bf00      	nop
 802a0f8:	3754      	adds	r7, #84	; 0x54
 802a0fa:	46bd      	mov	sp, r7
 802a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a100:	4770      	bx	lr

0802a102 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802a102:	b580      	push	{r7, lr}
 802a104:	b084      	sub	sp, #16
 802a106:	af00      	add	r7, sp, #0
 802a108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802a10a:	687b      	ldr	r3, [r7, #4]
 802a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a10e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802a110:	68fb      	ldr	r3, [r7, #12]
 802a112:	2200      	movs	r2, #0
 802a114:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802a116:	68fb      	ldr	r3, [r7, #12]
 802a118:	2200      	movs	r2, #0
 802a11a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802a11c:	68f8      	ldr	r0, [r7, #12]
 802a11e:	f7ff fecb 	bl	8029eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802a122:	bf00      	nop
 802a124:	3710      	adds	r7, #16
 802a126:	46bd      	mov	sp, r7
 802a128:	bd80      	pop	{r7, pc}

0802a12a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802a12a:	b480      	push	{r7}
 802a12c:	b085      	sub	sp, #20
 802a12e:	af00      	add	r7, sp, #0
 802a130:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802a132:	687b      	ldr	r3, [r7, #4]
 802a134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a138:	b2db      	uxtb	r3, r3
 802a13a:	2b21      	cmp	r3, #33	; 0x21
 802a13c:	d13e      	bne.n	802a1bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a13e:	687b      	ldr	r3, [r7, #4]
 802a140:	689b      	ldr	r3, [r3, #8]
 802a142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a146:	d114      	bne.n	802a172 <UART_Transmit_IT+0x48>
 802a148:	687b      	ldr	r3, [r7, #4]
 802a14a:	691b      	ldr	r3, [r3, #16]
 802a14c:	2b00      	cmp	r3, #0
 802a14e:	d110      	bne.n	802a172 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802a150:	687b      	ldr	r3, [r7, #4]
 802a152:	6a1b      	ldr	r3, [r3, #32]
 802a154:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802a156:	68fb      	ldr	r3, [r7, #12]
 802a158:	881b      	ldrh	r3, [r3, #0]
 802a15a:	461a      	mov	r2, r3
 802a15c:	687b      	ldr	r3, [r7, #4]
 802a15e:	681b      	ldr	r3, [r3, #0]
 802a160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802a164:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802a166:	687b      	ldr	r3, [r7, #4]
 802a168:	6a1b      	ldr	r3, [r3, #32]
 802a16a:	1c9a      	adds	r2, r3, #2
 802a16c:	687b      	ldr	r3, [r7, #4]
 802a16e:	621a      	str	r2, [r3, #32]
 802a170:	e008      	b.n	802a184 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802a172:	687b      	ldr	r3, [r7, #4]
 802a174:	6a1b      	ldr	r3, [r3, #32]
 802a176:	1c59      	adds	r1, r3, #1
 802a178:	687a      	ldr	r2, [r7, #4]
 802a17a:	6211      	str	r1, [r2, #32]
 802a17c:	781a      	ldrb	r2, [r3, #0]
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	681b      	ldr	r3, [r3, #0]
 802a182:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802a184:	687b      	ldr	r3, [r7, #4]
 802a186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802a188:	b29b      	uxth	r3, r3
 802a18a:	3b01      	subs	r3, #1
 802a18c:	b29b      	uxth	r3, r3
 802a18e:	687a      	ldr	r2, [r7, #4]
 802a190:	4619      	mov	r1, r3
 802a192:	84d1      	strh	r1, [r2, #38]	; 0x26
 802a194:	2b00      	cmp	r3, #0
 802a196:	d10f      	bne.n	802a1b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802a198:	687b      	ldr	r3, [r7, #4]
 802a19a:	681b      	ldr	r3, [r3, #0]
 802a19c:	68da      	ldr	r2, [r3, #12]
 802a19e:	687b      	ldr	r3, [r7, #4]
 802a1a0:	681b      	ldr	r3, [r3, #0]
 802a1a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802a1a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802a1a8:	687b      	ldr	r3, [r7, #4]
 802a1aa:	681b      	ldr	r3, [r3, #0]
 802a1ac:	68da      	ldr	r2, [r3, #12]
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	681b      	ldr	r3, [r3, #0]
 802a1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802a1b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802a1b8:	2300      	movs	r3, #0
 802a1ba:	e000      	b.n	802a1be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802a1bc:	2302      	movs	r3, #2
  }
}
 802a1be:	4618      	mov	r0, r3
 802a1c0:	3714      	adds	r7, #20
 802a1c2:	46bd      	mov	sp, r7
 802a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1c8:	4770      	bx	lr

0802a1ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802a1ca:	b580      	push	{r7, lr}
 802a1cc:	b082      	sub	sp, #8
 802a1ce:	af00      	add	r7, sp, #0
 802a1d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802a1d2:	687b      	ldr	r3, [r7, #4]
 802a1d4:	681b      	ldr	r3, [r3, #0]
 802a1d6:	68da      	ldr	r2, [r3, #12]
 802a1d8:	687b      	ldr	r3, [r7, #4]
 802a1da:	681b      	ldr	r3, [r3, #0]
 802a1dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802a1e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802a1e2:	687b      	ldr	r3, [r7, #4]
 802a1e4:	2220      	movs	r2, #32
 802a1e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802a1ea:	6878      	ldr	r0, [r7, #4]
 802a1ec:	f7ff fe5a 	bl	8029ea4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802a1f0:	2300      	movs	r3, #0
}
 802a1f2:	4618      	mov	r0, r3
 802a1f4:	3708      	adds	r7, #8
 802a1f6:	46bd      	mov	sp, r7
 802a1f8:	bd80      	pop	{r7, pc}

0802a1fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802a1fa:	b580      	push	{r7, lr}
 802a1fc:	b08c      	sub	sp, #48	; 0x30
 802a1fe:	af00      	add	r7, sp, #0
 802a200:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802a202:	687b      	ldr	r3, [r7, #4]
 802a204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802a208:	b2db      	uxtb	r3, r3
 802a20a:	2b22      	cmp	r3, #34	; 0x22
 802a20c:	f040 80ab 	bne.w	802a366 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a210:	687b      	ldr	r3, [r7, #4]
 802a212:	689b      	ldr	r3, [r3, #8]
 802a214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a218:	d117      	bne.n	802a24a <UART_Receive_IT+0x50>
 802a21a:	687b      	ldr	r3, [r7, #4]
 802a21c:	691b      	ldr	r3, [r3, #16]
 802a21e:	2b00      	cmp	r3, #0
 802a220:	d113      	bne.n	802a24a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802a222:	2300      	movs	r3, #0
 802a224:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802a226:	687b      	ldr	r3, [r7, #4]
 802a228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a22a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802a22c:	687b      	ldr	r3, [r7, #4]
 802a22e:	681b      	ldr	r3, [r3, #0]
 802a230:	685b      	ldr	r3, [r3, #4]
 802a232:	b29b      	uxth	r3, r3
 802a234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a238:	b29a      	uxth	r2, r3
 802a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a23c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802a23e:	687b      	ldr	r3, [r7, #4]
 802a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a242:	1c9a      	adds	r2, r3, #2
 802a244:	687b      	ldr	r3, [r7, #4]
 802a246:	629a      	str	r2, [r3, #40]	; 0x28
 802a248:	e026      	b.n	802a298 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802a24a:	687b      	ldr	r3, [r7, #4]
 802a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802a250:	2300      	movs	r3, #0
 802a252:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802a254:	687b      	ldr	r3, [r7, #4]
 802a256:	689b      	ldr	r3, [r3, #8]
 802a258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a25c:	d007      	beq.n	802a26e <UART_Receive_IT+0x74>
 802a25e:	687b      	ldr	r3, [r7, #4]
 802a260:	689b      	ldr	r3, [r3, #8]
 802a262:	2b00      	cmp	r3, #0
 802a264:	d10a      	bne.n	802a27c <UART_Receive_IT+0x82>
 802a266:	687b      	ldr	r3, [r7, #4]
 802a268:	691b      	ldr	r3, [r3, #16]
 802a26a:	2b00      	cmp	r3, #0
 802a26c:	d106      	bne.n	802a27c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802a26e:	687b      	ldr	r3, [r7, #4]
 802a270:	681b      	ldr	r3, [r3, #0]
 802a272:	685b      	ldr	r3, [r3, #4]
 802a274:	b2da      	uxtb	r2, r3
 802a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a278:	701a      	strb	r2, [r3, #0]
 802a27a:	e008      	b.n	802a28e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802a27c:	687b      	ldr	r3, [r7, #4]
 802a27e:	681b      	ldr	r3, [r3, #0]
 802a280:	685b      	ldr	r3, [r3, #4]
 802a282:	b2db      	uxtb	r3, r3
 802a284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a288:	b2da      	uxtb	r2, r3
 802a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a28c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802a28e:	687b      	ldr	r3, [r7, #4]
 802a290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a292:	1c5a      	adds	r2, r3, #1
 802a294:	687b      	ldr	r3, [r7, #4]
 802a296:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802a29c:	b29b      	uxth	r3, r3
 802a29e:	3b01      	subs	r3, #1
 802a2a0:	b29b      	uxth	r3, r3
 802a2a2:	687a      	ldr	r2, [r7, #4]
 802a2a4:	4619      	mov	r1, r3
 802a2a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	d15a      	bne.n	802a362 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802a2ac:	687b      	ldr	r3, [r7, #4]
 802a2ae:	681b      	ldr	r3, [r3, #0]
 802a2b0:	68da      	ldr	r2, [r3, #12]
 802a2b2:	687b      	ldr	r3, [r7, #4]
 802a2b4:	681b      	ldr	r3, [r3, #0]
 802a2b6:	f022 0220 	bic.w	r2, r2, #32
 802a2ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802a2bc:	687b      	ldr	r3, [r7, #4]
 802a2be:	681b      	ldr	r3, [r3, #0]
 802a2c0:	68da      	ldr	r2, [r3, #12]
 802a2c2:	687b      	ldr	r3, [r7, #4]
 802a2c4:	681b      	ldr	r3, [r3, #0]
 802a2c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a2ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802a2cc:	687b      	ldr	r3, [r7, #4]
 802a2ce:	681b      	ldr	r3, [r3, #0]
 802a2d0:	695a      	ldr	r2, [r3, #20]
 802a2d2:	687b      	ldr	r3, [r7, #4]
 802a2d4:	681b      	ldr	r3, [r3, #0]
 802a2d6:	f022 0201 	bic.w	r2, r2, #1
 802a2da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	2220      	movs	r2, #32
 802a2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a2e8:	2b01      	cmp	r3, #1
 802a2ea:	d135      	bne.n	802a358 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a2ec:	687b      	ldr	r3, [r7, #4]
 802a2ee:	2200      	movs	r2, #0
 802a2f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a2f2:	687b      	ldr	r3, [r7, #4]
 802a2f4:	681b      	ldr	r3, [r3, #0]
 802a2f6:	330c      	adds	r3, #12
 802a2f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a2fa:	697b      	ldr	r3, [r7, #20]
 802a2fc:	e853 3f00 	ldrex	r3, [r3]
 802a300:	613b      	str	r3, [r7, #16]
   return(result);
 802a302:	693b      	ldr	r3, [r7, #16]
 802a304:	f023 0310 	bic.w	r3, r3, #16
 802a308:	627b      	str	r3, [r7, #36]	; 0x24
 802a30a:	687b      	ldr	r3, [r7, #4]
 802a30c:	681b      	ldr	r3, [r3, #0]
 802a30e:	330c      	adds	r3, #12
 802a310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a312:	623a      	str	r2, [r7, #32]
 802a314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a316:	69f9      	ldr	r1, [r7, #28]
 802a318:	6a3a      	ldr	r2, [r7, #32]
 802a31a:	e841 2300 	strex	r3, r2, [r1]
 802a31e:	61bb      	str	r3, [r7, #24]
   return(result);
 802a320:	69bb      	ldr	r3, [r7, #24]
 802a322:	2b00      	cmp	r3, #0
 802a324:	d1e5      	bne.n	802a2f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802a326:	687b      	ldr	r3, [r7, #4]
 802a328:	681b      	ldr	r3, [r3, #0]
 802a32a:	681b      	ldr	r3, [r3, #0]
 802a32c:	f003 0310 	and.w	r3, r3, #16
 802a330:	2b10      	cmp	r3, #16
 802a332:	d10a      	bne.n	802a34a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802a334:	2300      	movs	r3, #0
 802a336:	60fb      	str	r3, [r7, #12]
 802a338:	687b      	ldr	r3, [r7, #4]
 802a33a:	681b      	ldr	r3, [r3, #0]
 802a33c:	681b      	ldr	r3, [r3, #0]
 802a33e:	60fb      	str	r3, [r7, #12]
 802a340:	687b      	ldr	r3, [r7, #4]
 802a342:	681b      	ldr	r3, [r3, #0]
 802a344:	685b      	ldr	r3, [r3, #4]
 802a346:	60fb      	str	r3, [r7, #12]
 802a348:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802a34e:	4619      	mov	r1, r3
 802a350:	6878      	ldr	r0, [r7, #4]
 802a352:	f7ff fdbb 	bl	8029ecc <HAL_UARTEx_RxEventCallback>
 802a356:	e002      	b.n	802a35e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802a358:	6878      	ldr	r0, [r7, #4]
 802a35a:	f7f6 fe41 	bl	8020fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802a35e:	2300      	movs	r3, #0
 802a360:	e002      	b.n	802a368 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802a362:	2300      	movs	r3, #0
 802a364:	e000      	b.n	802a368 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802a366:	2302      	movs	r3, #2
  }
}
 802a368:	4618      	mov	r0, r3
 802a36a:	3730      	adds	r7, #48	; 0x30
 802a36c:	46bd      	mov	sp, r7
 802a36e:	bd80      	pop	{r7, pc}

0802a370 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802a370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a374:	b0c0      	sub	sp, #256	; 0x100
 802a376:	af00      	add	r7, sp, #0
 802a378:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a380:	681b      	ldr	r3, [r3, #0]
 802a382:	691b      	ldr	r3, [r3, #16]
 802a384:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802a388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a38c:	68d9      	ldr	r1, [r3, #12]
 802a38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a392:	681a      	ldr	r2, [r3, #0]
 802a394:	ea40 0301 	orr.w	r3, r0, r1
 802a398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802a39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a39e:	689a      	ldr	r2, [r3, #8]
 802a3a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3a4:	691b      	ldr	r3, [r3, #16]
 802a3a6:	431a      	orrs	r2, r3
 802a3a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ac:	695b      	ldr	r3, [r3, #20]
 802a3ae:	431a      	orrs	r2, r3
 802a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3b4:	69db      	ldr	r3, [r3, #28]
 802a3b6:	4313      	orrs	r3, r2
 802a3b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802a3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3c0:	681b      	ldr	r3, [r3, #0]
 802a3c2:	68db      	ldr	r3, [r3, #12]
 802a3c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802a3c8:	f021 010c 	bic.w	r1, r1, #12
 802a3cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3d0:	681a      	ldr	r2, [r3, #0]
 802a3d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802a3d6:	430b      	orrs	r3, r1
 802a3d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802a3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3de:	681b      	ldr	r3, [r3, #0]
 802a3e0:	695b      	ldr	r3, [r3, #20]
 802a3e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802a3e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3ea:	6999      	ldr	r1, [r3, #24]
 802a3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3f0:	681a      	ldr	r2, [r3, #0]
 802a3f2:	ea40 0301 	orr.w	r3, r0, r1
 802a3f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802a3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3fc:	681a      	ldr	r2, [r3, #0]
 802a3fe:	4b8f      	ldr	r3, [pc, #572]	; (802a63c <UART_SetConfig+0x2cc>)
 802a400:	429a      	cmp	r2, r3
 802a402:	d005      	beq.n	802a410 <UART_SetConfig+0xa0>
 802a404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a408:	681a      	ldr	r2, [r3, #0]
 802a40a:	4b8d      	ldr	r3, [pc, #564]	; (802a640 <UART_SetConfig+0x2d0>)
 802a40c:	429a      	cmp	r2, r3
 802a40e:	d104      	bne.n	802a41a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802a410:	f7fd fcb2 	bl	8027d78 <HAL_RCC_GetPCLK2Freq>
 802a414:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802a418:	e003      	b.n	802a422 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802a41a:	f7fd fc99 	bl	8027d50 <HAL_RCC_GetPCLK1Freq>
 802a41e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a426:	69db      	ldr	r3, [r3, #28]
 802a428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a42c:	f040 810c 	bne.w	802a648 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802a430:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a434:	2200      	movs	r2, #0
 802a436:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802a43a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802a43e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802a442:	4622      	mov	r2, r4
 802a444:	462b      	mov	r3, r5
 802a446:	1891      	adds	r1, r2, r2
 802a448:	65b9      	str	r1, [r7, #88]	; 0x58
 802a44a:	415b      	adcs	r3, r3
 802a44c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802a44e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802a452:	4621      	mov	r1, r4
 802a454:	eb12 0801 	adds.w	r8, r2, r1
 802a458:	4629      	mov	r1, r5
 802a45a:	eb43 0901 	adc.w	r9, r3, r1
 802a45e:	f04f 0200 	mov.w	r2, #0
 802a462:	f04f 0300 	mov.w	r3, #0
 802a466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802a46a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802a46e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802a472:	4690      	mov	r8, r2
 802a474:	4699      	mov	r9, r3
 802a476:	4623      	mov	r3, r4
 802a478:	eb18 0303 	adds.w	r3, r8, r3
 802a47c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802a480:	462b      	mov	r3, r5
 802a482:	eb49 0303 	adc.w	r3, r9, r3
 802a486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802a48a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a48e:	685b      	ldr	r3, [r3, #4]
 802a490:	2200      	movs	r2, #0
 802a492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802a496:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802a49a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802a49e:	460b      	mov	r3, r1
 802a4a0:	18db      	adds	r3, r3, r3
 802a4a2:	653b      	str	r3, [r7, #80]	; 0x50
 802a4a4:	4613      	mov	r3, r2
 802a4a6:	eb42 0303 	adc.w	r3, r2, r3
 802a4aa:	657b      	str	r3, [r7, #84]	; 0x54
 802a4ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802a4b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802a4b4:	f7f5 feec 	bl	8020290 <__aeabi_uldivmod>
 802a4b8:	4602      	mov	r2, r0
 802a4ba:	460b      	mov	r3, r1
 802a4bc:	4b61      	ldr	r3, [pc, #388]	; (802a644 <UART_SetConfig+0x2d4>)
 802a4be:	fba3 2302 	umull	r2, r3, r3, r2
 802a4c2:	095b      	lsrs	r3, r3, #5
 802a4c4:	011c      	lsls	r4, r3, #4
 802a4c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a4ca:	2200      	movs	r2, #0
 802a4cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802a4d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802a4d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802a4d8:	4642      	mov	r2, r8
 802a4da:	464b      	mov	r3, r9
 802a4dc:	1891      	adds	r1, r2, r2
 802a4de:	64b9      	str	r1, [r7, #72]	; 0x48
 802a4e0:	415b      	adcs	r3, r3
 802a4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a4e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802a4e8:	4641      	mov	r1, r8
 802a4ea:	eb12 0a01 	adds.w	sl, r2, r1
 802a4ee:	4649      	mov	r1, r9
 802a4f0:	eb43 0b01 	adc.w	fp, r3, r1
 802a4f4:	f04f 0200 	mov.w	r2, #0
 802a4f8:	f04f 0300 	mov.w	r3, #0
 802a4fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802a500:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802a504:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802a508:	4692      	mov	sl, r2
 802a50a:	469b      	mov	fp, r3
 802a50c:	4643      	mov	r3, r8
 802a50e:	eb1a 0303 	adds.w	r3, sl, r3
 802a512:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802a516:	464b      	mov	r3, r9
 802a518:	eb4b 0303 	adc.w	r3, fp, r3
 802a51c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802a520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a524:	685b      	ldr	r3, [r3, #4]
 802a526:	2200      	movs	r2, #0
 802a528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802a52c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802a530:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802a534:	460b      	mov	r3, r1
 802a536:	18db      	adds	r3, r3, r3
 802a538:	643b      	str	r3, [r7, #64]	; 0x40
 802a53a:	4613      	mov	r3, r2
 802a53c:	eb42 0303 	adc.w	r3, r2, r3
 802a540:	647b      	str	r3, [r7, #68]	; 0x44
 802a542:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802a546:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802a54a:	f7f5 fea1 	bl	8020290 <__aeabi_uldivmod>
 802a54e:	4602      	mov	r2, r0
 802a550:	460b      	mov	r3, r1
 802a552:	4611      	mov	r1, r2
 802a554:	4b3b      	ldr	r3, [pc, #236]	; (802a644 <UART_SetConfig+0x2d4>)
 802a556:	fba3 2301 	umull	r2, r3, r3, r1
 802a55a:	095b      	lsrs	r3, r3, #5
 802a55c:	2264      	movs	r2, #100	; 0x64
 802a55e:	fb02 f303 	mul.w	r3, r2, r3
 802a562:	1acb      	subs	r3, r1, r3
 802a564:	00db      	lsls	r3, r3, #3
 802a566:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802a56a:	4b36      	ldr	r3, [pc, #216]	; (802a644 <UART_SetConfig+0x2d4>)
 802a56c:	fba3 2302 	umull	r2, r3, r3, r2
 802a570:	095b      	lsrs	r3, r3, #5
 802a572:	005b      	lsls	r3, r3, #1
 802a574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802a578:	441c      	add	r4, r3
 802a57a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a57e:	2200      	movs	r2, #0
 802a580:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802a584:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802a588:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802a58c:	4642      	mov	r2, r8
 802a58e:	464b      	mov	r3, r9
 802a590:	1891      	adds	r1, r2, r2
 802a592:	63b9      	str	r1, [r7, #56]	; 0x38
 802a594:	415b      	adcs	r3, r3
 802a596:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a598:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802a59c:	4641      	mov	r1, r8
 802a59e:	1851      	adds	r1, r2, r1
 802a5a0:	6339      	str	r1, [r7, #48]	; 0x30
 802a5a2:	4649      	mov	r1, r9
 802a5a4:	414b      	adcs	r3, r1
 802a5a6:	637b      	str	r3, [r7, #52]	; 0x34
 802a5a8:	f04f 0200 	mov.w	r2, #0
 802a5ac:	f04f 0300 	mov.w	r3, #0
 802a5b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802a5b4:	4659      	mov	r1, fp
 802a5b6:	00cb      	lsls	r3, r1, #3
 802a5b8:	4651      	mov	r1, sl
 802a5ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a5be:	4651      	mov	r1, sl
 802a5c0:	00ca      	lsls	r2, r1, #3
 802a5c2:	4610      	mov	r0, r2
 802a5c4:	4619      	mov	r1, r3
 802a5c6:	4603      	mov	r3, r0
 802a5c8:	4642      	mov	r2, r8
 802a5ca:	189b      	adds	r3, r3, r2
 802a5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802a5d0:	464b      	mov	r3, r9
 802a5d2:	460a      	mov	r2, r1
 802a5d4:	eb42 0303 	adc.w	r3, r2, r3
 802a5d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a5e0:	685b      	ldr	r3, [r3, #4]
 802a5e2:	2200      	movs	r2, #0
 802a5e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802a5e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802a5ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802a5f0:	460b      	mov	r3, r1
 802a5f2:	18db      	adds	r3, r3, r3
 802a5f4:	62bb      	str	r3, [r7, #40]	; 0x28
 802a5f6:	4613      	mov	r3, r2
 802a5f8:	eb42 0303 	adc.w	r3, r2, r3
 802a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a5fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802a602:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802a606:	f7f5 fe43 	bl	8020290 <__aeabi_uldivmod>
 802a60a:	4602      	mov	r2, r0
 802a60c:	460b      	mov	r3, r1
 802a60e:	4b0d      	ldr	r3, [pc, #52]	; (802a644 <UART_SetConfig+0x2d4>)
 802a610:	fba3 1302 	umull	r1, r3, r3, r2
 802a614:	095b      	lsrs	r3, r3, #5
 802a616:	2164      	movs	r1, #100	; 0x64
 802a618:	fb01 f303 	mul.w	r3, r1, r3
 802a61c:	1ad3      	subs	r3, r2, r3
 802a61e:	00db      	lsls	r3, r3, #3
 802a620:	3332      	adds	r3, #50	; 0x32
 802a622:	4a08      	ldr	r2, [pc, #32]	; (802a644 <UART_SetConfig+0x2d4>)
 802a624:	fba2 2303 	umull	r2, r3, r2, r3
 802a628:	095b      	lsrs	r3, r3, #5
 802a62a:	f003 0207 	and.w	r2, r3, #7
 802a62e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a632:	681b      	ldr	r3, [r3, #0]
 802a634:	4422      	add	r2, r4
 802a636:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802a638:	e105      	b.n	802a846 <UART_SetConfig+0x4d6>
 802a63a:	bf00      	nop
 802a63c:	40011000 	.word	0x40011000
 802a640:	40011400 	.word	0x40011400
 802a644:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802a648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a64c:	2200      	movs	r2, #0
 802a64e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a652:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802a656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802a65a:	4642      	mov	r2, r8
 802a65c:	464b      	mov	r3, r9
 802a65e:	1891      	adds	r1, r2, r2
 802a660:	6239      	str	r1, [r7, #32]
 802a662:	415b      	adcs	r3, r3
 802a664:	627b      	str	r3, [r7, #36]	; 0x24
 802a666:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a66a:	4641      	mov	r1, r8
 802a66c:	1854      	adds	r4, r2, r1
 802a66e:	4649      	mov	r1, r9
 802a670:	eb43 0501 	adc.w	r5, r3, r1
 802a674:	f04f 0200 	mov.w	r2, #0
 802a678:	f04f 0300 	mov.w	r3, #0
 802a67c:	00eb      	lsls	r3, r5, #3
 802a67e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a682:	00e2      	lsls	r2, r4, #3
 802a684:	4614      	mov	r4, r2
 802a686:	461d      	mov	r5, r3
 802a688:	4643      	mov	r3, r8
 802a68a:	18e3      	adds	r3, r4, r3
 802a68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a690:	464b      	mov	r3, r9
 802a692:	eb45 0303 	adc.w	r3, r5, r3
 802a696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a69e:	685b      	ldr	r3, [r3, #4]
 802a6a0:	2200      	movs	r2, #0
 802a6a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802a6a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802a6aa:	f04f 0200 	mov.w	r2, #0
 802a6ae:	f04f 0300 	mov.w	r3, #0
 802a6b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802a6b6:	4629      	mov	r1, r5
 802a6b8:	008b      	lsls	r3, r1, #2
 802a6ba:	4621      	mov	r1, r4
 802a6bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a6c0:	4621      	mov	r1, r4
 802a6c2:	008a      	lsls	r2, r1, #2
 802a6c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802a6c8:	f7f5 fde2 	bl	8020290 <__aeabi_uldivmod>
 802a6cc:	4602      	mov	r2, r0
 802a6ce:	460b      	mov	r3, r1
 802a6d0:	4b60      	ldr	r3, [pc, #384]	; (802a854 <UART_SetConfig+0x4e4>)
 802a6d2:	fba3 2302 	umull	r2, r3, r3, r2
 802a6d6:	095b      	lsrs	r3, r3, #5
 802a6d8:	011c      	lsls	r4, r3, #4
 802a6da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a6de:	2200      	movs	r2, #0
 802a6e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a6e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802a6e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802a6ec:	4642      	mov	r2, r8
 802a6ee:	464b      	mov	r3, r9
 802a6f0:	1891      	adds	r1, r2, r2
 802a6f2:	61b9      	str	r1, [r7, #24]
 802a6f4:	415b      	adcs	r3, r3
 802a6f6:	61fb      	str	r3, [r7, #28]
 802a6f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a6fc:	4641      	mov	r1, r8
 802a6fe:	1851      	adds	r1, r2, r1
 802a700:	6139      	str	r1, [r7, #16]
 802a702:	4649      	mov	r1, r9
 802a704:	414b      	adcs	r3, r1
 802a706:	617b      	str	r3, [r7, #20]
 802a708:	f04f 0200 	mov.w	r2, #0
 802a70c:	f04f 0300 	mov.w	r3, #0
 802a710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802a714:	4659      	mov	r1, fp
 802a716:	00cb      	lsls	r3, r1, #3
 802a718:	4651      	mov	r1, sl
 802a71a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a71e:	4651      	mov	r1, sl
 802a720:	00ca      	lsls	r2, r1, #3
 802a722:	4610      	mov	r0, r2
 802a724:	4619      	mov	r1, r3
 802a726:	4603      	mov	r3, r0
 802a728:	4642      	mov	r2, r8
 802a72a:	189b      	adds	r3, r3, r2
 802a72c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a730:	464b      	mov	r3, r9
 802a732:	460a      	mov	r2, r1
 802a734:	eb42 0303 	adc.w	r3, r2, r3
 802a738:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a73c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a740:	685b      	ldr	r3, [r3, #4]
 802a742:	2200      	movs	r2, #0
 802a744:	67bb      	str	r3, [r7, #120]	; 0x78
 802a746:	67fa      	str	r2, [r7, #124]	; 0x7c
 802a748:	f04f 0200 	mov.w	r2, #0
 802a74c:	f04f 0300 	mov.w	r3, #0
 802a750:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802a754:	4649      	mov	r1, r9
 802a756:	008b      	lsls	r3, r1, #2
 802a758:	4641      	mov	r1, r8
 802a75a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a75e:	4641      	mov	r1, r8
 802a760:	008a      	lsls	r2, r1, #2
 802a762:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802a766:	f7f5 fd93 	bl	8020290 <__aeabi_uldivmod>
 802a76a:	4602      	mov	r2, r0
 802a76c:	460b      	mov	r3, r1
 802a76e:	4b39      	ldr	r3, [pc, #228]	; (802a854 <UART_SetConfig+0x4e4>)
 802a770:	fba3 1302 	umull	r1, r3, r3, r2
 802a774:	095b      	lsrs	r3, r3, #5
 802a776:	2164      	movs	r1, #100	; 0x64
 802a778:	fb01 f303 	mul.w	r3, r1, r3
 802a77c:	1ad3      	subs	r3, r2, r3
 802a77e:	011b      	lsls	r3, r3, #4
 802a780:	3332      	adds	r3, #50	; 0x32
 802a782:	4a34      	ldr	r2, [pc, #208]	; (802a854 <UART_SetConfig+0x4e4>)
 802a784:	fba2 2303 	umull	r2, r3, r2, r3
 802a788:	095b      	lsrs	r3, r3, #5
 802a78a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a78e:	441c      	add	r4, r3
 802a790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a794:	2200      	movs	r2, #0
 802a796:	673b      	str	r3, [r7, #112]	; 0x70
 802a798:	677a      	str	r2, [r7, #116]	; 0x74
 802a79a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802a79e:	4642      	mov	r2, r8
 802a7a0:	464b      	mov	r3, r9
 802a7a2:	1891      	adds	r1, r2, r2
 802a7a4:	60b9      	str	r1, [r7, #8]
 802a7a6:	415b      	adcs	r3, r3
 802a7a8:	60fb      	str	r3, [r7, #12]
 802a7aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a7ae:	4641      	mov	r1, r8
 802a7b0:	1851      	adds	r1, r2, r1
 802a7b2:	6039      	str	r1, [r7, #0]
 802a7b4:	4649      	mov	r1, r9
 802a7b6:	414b      	adcs	r3, r1
 802a7b8:	607b      	str	r3, [r7, #4]
 802a7ba:	f04f 0200 	mov.w	r2, #0
 802a7be:	f04f 0300 	mov.w	r3, #0
 802a7c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802a7c6:	4659      	mov	r1, fp
 802a7c8:	00cb      	lsls	r3, r1, #3
 802a7ca:	4651      	mov	r1, sl
 802a7cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a7d0:	4651      	mov	r1, sl
 802a7d2:	00ca      	lsls	r2, r1, #3
 802a7d4:	4610      	mov	r0, r2
 802a7d6:	4619      	mov	r1, r3
 802a7d8:	4603      	mov	r3, r0
 802a7da:	4642      	mov	r2, r8
 802a7dc:	189b      	adds	r3, r3, r2
 802a7de:	66bb      	str	r3, [r7, #104]	; 0x68
 802a7e0:	464b      	mov	r3, r9
 802a7e2:	460a      	mov	r2, r1
 802a7e4:	eb42 0303 	adc.w	r3, r2, r3
 802a7e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a7ee:	685b      	ldr	r3, [r3, #4]
 802a7f0:	2200      	movs	r2, #0
 802a7f2:	663b      	str	r3, [r7, #96]	; 0x60
 802a7f4:	667a      	str	r2, [r7, #100]	; 0x64
 802a7f6:	f04f 0200 	mov.w	r2, #0
 802a7fa:	f04f 0300 	mov.w	r3, #0
 802a7fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802a802:	4649      	mov	r1, r9
 802a804:	008b      	lsls	r3, r1, #2
 802a806:	4641      	mov	r1, r8
 802a808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a80c:	4641      	mov	r1, r8
 802a80e:	008a      	lsls	r2, r1, #2
 802a810:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802a814:	f7f5 fd3c 	bl	8020290 <__aeabi_uldivmod>
 802a818:	4602      	mov	r2, r0
 802a81a:	460b      	mov	r3, r1
 802a81c:	4b0d      	ldr	r3, [pc, #52]	; (802a854 <UART_SetConfig+0x4e4>)
 802a81e:	fba3 1302 	umull	r1, r3, r3, r2
 802a822:	095b      	lsrs	r3, r3, #5
 802a824:	2164      	movs	r1, #100	; 0x64
 802a826:	fb01 f303 	mul.w	r3, r1, r3
 802a82a:	1ad3      	subs	r3, r2, r3
 802a82c:	011b      	lsls	r3, r3, #4
 802a82e:	3332      	adds	r3, #50	; 0x32
 802a830:	4a08      	ldr	r2, [pc, #32]	; (802a854 <UART_SetConfig+0x4e4>)
 802a832:	fba2 2303 	umull	r2, r3, r2, r3
 802a836:	095b      	lsrs	r3, r3, #5
 802a838:	f003 020f 	and.w	r2, r3, #15
 802a83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a840:	681b      	ldr	r3, [r3, #0]
 802a842:	4422      	add	r2, r4
 802a844:	609a      	str	r2, [r3, #8]
}
 802a846:	bf00      	nop
 802a848:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802a84c:	46bd      	mov	sp, r7
 802a84e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a852:	bf00      	nop
 802a854:	51eb851f 	.word	0x51eb851f

0802a858 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 802a858:	b480      	push	{r7}
 802a85a:	b083      	sub	sp, #12
 802a85c:	af00      	add	r7, sp, #0
 802a85e:	6078      	str	r0, [r7, #4]
 802a860:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 802a862:	683b      	ldr	r3, [r7, #0]
 802a864:	681b      	ldr	r3, [r3, #0]
 802a866:	2b00      	cmp	r3, #0
 802a868:	d123      	bne.n	802a8b2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a86a:	687b      	ldr	r3, [r7, #4]
 802a86c:	681b      	ldr	r3, [r3, #0]
 802a86e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a872:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a876:	683a      	ldr	r2, [r7, #0]
 802a878:	6851      	ldr	r1, [r2, #4]
 802a87a:	683a      	ldr	r2, [r7, #0]
 802a87c:	6892      	ldr	r2, [r2, #8]
 802a87e:	4311      	orrs	r1, r2
 802a880:	683a      	ldr	r2, [r7, #0]
 802a882:	68d2      	ldr	r2, [r2, #12]
 802a884:	4311      	orrs	r1, r2
 802a886:	683a      	ldr	r2, [r7, #0]
 802a888:	6912      	ldr	r2, [r2, #16]
 802a88a:	4311      	orrs	r1, r2
 802a88c:	683a      	ldr	r2, [r7, #0]
 802a88e:	6952      	ldr	r2, [r2, #20]
 802a890:	4311      	orrs	r1, r2
 802a892:	683a      	ldr	r2, [r7, #0]
 802a894:	6992      	ldr	r2, [r2, #24]
 802a896:	4311      	orrs	r1, r2
 802a898:	683a      	ldr	r2, [r7, #0]
 802a89a:	69d2      	ldr	r2, [r2, #28]
 802a89c:	4311      	orrs	r1, r2
 802a89e:	683a      	ldr	r2, [r7, #0]
 802a8a0:	6a12      	ldr	r2, [r2, #32]
 802a8a2:	4311      	orrs	r1, r2
 802a8a4:	683a      	ldr	r2, [r7, #0]
 802a8a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a8a8:	430a      	orrs	r2, r1
 802a8aa:	431a      	orrs	r2, r3
 802a8ac:	687b      	ldr	r3, [r7, #4]
 802a8ae:	601a      	str	r2, [r3, #0]
 802a8b0:	e028      	b.n	802a904 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a8b2:	687b      	ldr	r3, [r7, #4]
 802a8b4:	681b      	ldr	r3, [r3, #0]
 802a8b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 802a8ba:	683b      	ldr	r3, [r7, #0]
 802a8bc:	69d9      	ldr	r1, [r3, #28]
 802a8be:	683b      	ldr	r3, [r7, #0]
 802a8c0:	6a1b      	ldr	r3, [r3, #32]
 802a8c2:	4319      	orrs	r1, r3
 802a8c4:	683b      	ldr	r3, [r7, #0]
 802a8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8c8:	430b      	orrs	r3, r1
 802a8ca:	431a      	orrs	r2, r3
 802a8cc:	687b      	ldr	r3, [r7, #4]
 802a8ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802a8d0:	687b      	ldr	r3, [r7, #4]
 802a8d2:	685b      	ldr	r3, [r3, #4]
 802a8d4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a8d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a8dc:	683a      	ldr	r2, [r7, #0]
 802a8de:	6851      	ldr	r1, [r2, #4]
 802a8e0:	683a      	ldr	r2, [r7, #0]
 802a8e2:	6892      	ldr	r2, [r2, #8]
 802a8e4:	4311      	orrs	r1, r2
 802a8e6:	683a      	ldr	r2, [r7, #0]
 802a8e8:	68d2      	ldr	r2, [r2, #12]
 802a8ea:	4311      	orrs	r1, r2
 802a8ec:	683a      	ldr	r2, [r7, #0]
 802a8ee:	6912      	ldr	r2, [r2, #16]
 802a8f0:	4311      	orrs	r1, r2
 802a8f2:	683a      	ldr	r2, [r7, #0]
 802a8f4:	6952      	ldr	r2, [r2, #20]
 802a8f6:	4311      	orrs	r1, r2
 802a8f8:	683a      	ldr	r2, [r7, #0]
 802a8fa:	6992      	ldr	r2, [r2, #24]
 802a8fc:	430a      	orrs	r2, r1
 802a8fe:	431a      	orrs	r2, r3
 802a900:	687b      	ldr	r3, [r7, #4]
 802a902:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 802a904:	2300      	movs	r3, #0
}
 802a906:	4618      	mov	r0, r3
 802a908:	370c      	adds	r7, #12
 802a90a:	46bd      	mov	sp, r7
 802a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a910:	4770      	bx	lr

0802a912 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802a912:	b480      	push	{r7}
 802a914:	b085      	sub	sp, #20
 802a916:	af00      	add	r7, sp, #0
 802a918:	60f8      	str	r0, [r7, #12]
 802a91a:	60b9      	str	r1, [r7, #8]
 802a91c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 802a91e:	687b      	ldr	r3, [r7, #4]
 802a920:	2b00      	cmp	r3, #0
 802a922:	d128      	bne.n	802a976 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a924:	68fb      	ldr	r3, [r7, #12]
 802a926:	689b      	ldr	r3, [r3, #8]
 802a928:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a92c:	68bb      	ldr	r3, [r7, #8]
 802a92e:	681b      	ldr	r3, [r3, #0]
 802a930:	1e59      	subs	r1, r3, #1
 802a932:	68bb      	ldr	r3, [r7, #8]
 802a934:	685b      	ldr	r3, [r3, #4]
 802a936:	3b01      	subs	r3, #1
 802a938:	011b      	lsls	r3, r3, #4
 802a93a:	4319      	orrs	r1, r3
 802a93c:	68bb      	ldr	r3, [r7, #8]
 802a93e:	689b      	ldr	r3, [r3, #8]
 802a940:	3b01      	subs	r3, #1
 802a942:	021b      	lsls	r3, r3, #8
 802a944:	4319      	orrs	r1, r3
 802a946:	68bb      	ldr	r3, [r7, #8]
 802a948:	68db      	ldr	r3, [r3, #12]
 802a94a:	3b01      	subs	r3, #1
 802a94c:	031b      	lsls	r3, r3, #12
 802a94e:	4319      	orrs	r1, r3
 802a950:	68bb      	ldr	r3, [r7, #8]
 802a952:	691b      	ldr	r3, [r3, #16]
 802a954:	3b01      	subs	r3, #1
 802a956:	041b      	lsls	r3, r3, #16
 802a958:	4319      	orrs	r1, r3
 802a95a:	68bb      	ldr	r3, [r7, #8]
 802a95c:	695b      	ldr	r3, [r3, #20]
 802a95e:	3b01      	subs	r3, #1
 802a960:	051b      	lsls	r3, r3, #20
 802a962:	4319      	orrs	r1, r3
 802a964:	68bb      	ldr	r3, [r7, #8]
 802a966:	699b      	ldr	r3, [r3, #24]
 802a968:	3b01      	subs	r3, #1
 802a96a:	061b      	lsls	r3, r3, #24
 802a96c:	430b      	orrs	r3, r1
 802a96e:	431a      	orrs	r2, r3
 802a970:	68fb      	ldr	r3, [r7, #12]
 802a972:	609a      	str	r2, [r3, #8]
 802a974:	e02f      	b.n	802a9d6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a976:	68fb      	ldr	r3, [r7, #12]
 802a978:	689b      	ldr	r3, [r3, #8]
 802a97a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802a97e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a982:	68ba      	ldr	r2, [r7, #8]
 802a984:	68d2      	ldr	r2, [r2, #12]
 802a986:	3a01      	subs	r2, #1
 802a988:	0311      	lsls	r1, r2, #12
 802a98a:	68ba      	ldr	r2, [r7, #8]
 802a98c:	6952      	ldr	r2, [r2, #20]
 802a98e:	3a01      	subs	r2, #1
 802a990:	0512      	lsls	r2, r2, #20
 802a992:	430a      	orrs	r2, r1
 802a994:	431a      	orrs	r2, r3
 802a996:	68fb      	ldr	r3, [r7, #12]
 802a998:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a99a:	68fb      	ldr	r3, [r7, #12]
 802a99c:	68db      	ldr	r3, [r3, #12]
 802a99e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a9a2:	68bb      	ldr	r3, [r7, #8]
 802a9a4:	681b      	ldr	r3, [r3, #0]
 802a9a6:	1e59      	subs	r1, r3, #1
 802a9a8:	68bb      	ldr	r3, [r7, #8]
 802a9aa:	685b      	ldr	r3, [r3, #4]
 802a9ac:	3b01      	subs	r3, #1
 802a9ae:	011b      	lsls	r3, r3, #4
 802a9b0:	4319      	orrs	r1, r3
 802a9b2:	68bb      	ldr	r3, [r7, #8]
 802a9b4:	689b      	ldr	r3, [r3, #8]
 802a9b6:	3b01      	subs	r3, #1
 802a9b8:	021b      	lsls	r3, r3, #8
 802a9ba:	4319      	orrs	r1, r3
 802a9bc:	68bb      	ldr	r3, [r7, #8]
 802a9be:	691b      	ldr	r3, [r3, #16]
 802a9c0:	3b01      	subs	r3, #1
 802a9c2:	041b      	lsls	r3, r3, #16
 802a9c4:	4319      	orrs	r1, r3
 802a9c6:	68bb      	ldr	r3, [r7, #8]
 802a9c8:	699b      	ldr	r3, [r3, #24]
 802a9ca:	3b01      	subs	r3, #1
 802a9cc:	061b      	lsls	r3, r3, #24
 802a9ce:	430b      	orrs	r3, r1
 802a9d0:	431a      	orrs	r2, r3
 802a9d2:	68fb      	ldr	r3, [r7, #12]
 802a9d4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a9d6:	2300      	movs	r3, #0
}
 802a9d8:	4618      	mov	r0, r3
 802a9da:	3714      	adds	r7, #20
 802a9dc:	46bd      	mov	sp, r7
 802a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9e2:	4770      	bx	lr

0802a9e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802a9e4:	b580      	push	{r7, lr}
 802a9e6:	b086      	sub	sp, #24
 802a9e8:	af00      	add	r7, sp, #0
 802a9ea:	60f8      	str	r0, [r7, #12]
 802a9ec:	60b9      	str	r1, [r7, #8]
 802a9ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802a9f0:	2300      	movs	r3, #0
 802a9f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802a9f4:	68fb      	ldr	r3, [r7, #12]
 802a9f6:	691b      	ldr	r3, [r3, #16]
 802a9f8:	0d9b      	lsrs	r3, r3, #22
 802a9fa:	059b      	lsls	r3, r3, #22
 802a9fc:	68ba      	ldr	r2, [r7, #8]
 802a9fe:	6811      	ldr	r1, [r2, #0]
 802aa00:	68ba      	ldr	r2, [r7, #8]
 802aa02:	6852      	ldr	r2, [r2, #4]
 802aa04:	4311      	orrs	r1, r2
 802aa06:	68ba      	ldr	r2, [r7, #8]
 802aa08:	6892      	ldr	r2, [r2, #8]
 802aa0a:	3a01      	subs	r2, #1
 802aa0c:	0152      	lsls	r2, r2, #5
 802aa0e:	4311      	orrs	r1, r2
 802aa10:	68ba      	ldr	r2, [r7, #8]
 802aa12:	68d2      	ldr	r2, [r2, #12]
 802aa14:	0252      	lsls	r2, r2, #9
 802aa16:	430a      	orrs	r2, r1
 802aa18:	431a      	orrs	r2, r3
 802aa1a:	68fb      	ldr	r3, [r7, #12]
 802aa1c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802aa1e:	f7f8 fe27 	bl	8023670 <HAL_GetTick>
 802aa22:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa24:	e010      	b.n	802aa48 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802aa26:	687b      	ldr	r3, [r7, #4]
 802aa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 802aa2c:	d00c      	beq.n	802aa48 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802aa2e:	687b      	ldr	r3, [r7, #4]
 802aa30:	2b00      	cmp	r3, #0
 802aa32:	d007      	beq.n	802aa44 <FMC_SDRAM_SendCommand+0x60>
 802aa34:	f7f8 fe1c 	bl	8023670 <HAL_GetTick>
 802aa38:	4602      	mov	r2, r0
 802aa3a:	697b      	ldr	r3, [r7, #20]
 802aa3c:	1ad3      	subs	r3, r2, r3
 802aa3e:	687a      	ldr	r2, [r7, #4]
 802aa40:	429a      	cmp	r2, r3
 802aa42:	d201      	bcs.n	802aa48 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802aa44:	2303      	movs	r3, #3
 802aa46:	e006      	b.n	802aa56 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802aa48:	68fb      	ldr	r3, [r7, #12]
 802aa4a:	699b      	ldr	r3, [r3, #24]
 802aa4c:	f003 0320 	and.w	r3, r3, #32
 802aa50:	2b20      	cmp	r3, #32
 802aa52:	d0e8      	beq.n	802aa26 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802aa54:	2300      	movs	r3, #0
}
 802aa56:	4618      	mov	r0, r3
 802aa58:	3718      	adds	r7, #24
 802aa5a:	46bd      	mov	sp, r7
 802aa5c:	bd80      	pop	{r7, pc}

0802aa5e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802aa5e:	b480      	push	{r7}
 802aa60:	b083      	sub	sp, #12
 802aa62:	af00      	add	r7, sp, #0
 802aa64:	6078      	str	r0, [r7, #4]
 802aa66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802aa68:	687b      	ldr	r3, [r7, #4]
 802aa6a:	695b      	ldr	r3, [r3, #20]
 802aa6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802aa70:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802aa74:	683a      	ldr	r2, [r7, #0]
 802aa76:	0052      	lsls	r2, r2, #1
 802aa78:	431a      	orrs	r2, r3
 802aa7a:	687b      	ldr	r3, [r7, #4]
 802aa7c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802aa7e:	2300      	movs	r3, #0
}
 802aa80:	4618      	mov	r0, r3
 802aa82:	370c      	adds	r7, #12
 802aa84:	46bd      	mov	sp, r7
 802aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa8a:	4770      	bx	lr

0802aa8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aa8c:	b084      	sub	sp, #16
 802aa8e:	b580      	push	{r7, lr}
 802aa90:	b084      	sub	sp, #16
 802aa92:	af00      	add	r7, sp, #0
 802aa94:	6078      	str	r0, [r7, #4]
 802aa96:	f107 001c 	add.w	r0, r7, #28
 802aa9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802aaa0:	2b01      	cmp	r3, #1
 802aaa2:	d122      	bne.n	802aaea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802aaa4:	687b      	ldr	r3, [r7, #4]
 802aaa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aaa8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802aaac:	687b      	ldr	r3, [r7, #4]
 802aaae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802aab0:	687b      	ldr	r3, [r7, #4]
 802aab2:	68db      	ldr	r3, [r3, #12]
 802aab4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802aab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802aabc:	687a      	ldr	r2, [r7, #4]
 802aabe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802aac0:	687b      	ldr	r3, [r7, #4]
 802aac2:	68db      	ldr	r3, [r3, #12]
 802aac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802aac8:	687b      	ldr	r3, [r7, #4]
 802aaca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802aacc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802aace:	2b01      	cmp	r3, #1
 802aad0:	d105      	bne.n	802aade <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802aad2:	687b      	ldr	r3, [r7, #4]
 802aad4:	68db      	ldr	r3, [r3, #12]
 802aad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802aada:	687b      	ldr	r3, [r7, #4]
 802aadc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aade:	6878      	ldr	r0, [r7, #4]
 802aae0:	f000 f9c0 	bl	802ae64 <USB_CoreReset>
 802aae4:	4603      	mov	r3, r0
 802aae6:	73fb      	strb	r3, [r7, #15]
 802aae8:	e01a      	b.n	802ab20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802aaea:	687b      	ldr	r3, [r7, #4]
 802aaec:	68db      	ldr	r3, [r3, #12]
 802aaee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802aaf2:	687b      	ldr	r3, [r7, #4]
 802aaf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aaf6:	6878      	ldr	r0, [r7, #4]
 802aaf8:	f000 f9b4 	bl	802ae64 <USB_CoreReset>
 802aafc:	4603      	mov	r3, r0
 802aafe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802ab00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802ab02:	2b00      	cmp	r3, #0
 802ab04:	d106      	bne.n	802ab14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802ab06:	687b      	ldr	r3, [r7, #4]
 802ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802ab0e:	687b      	ldr	r3, [r7, #4]
 802ab10:	639a      	str	r2, [r3, #56]	; 0x38
 802ab12:	e005      	b.n	802ab20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802ab14:	687b      	ldr	r3, [r7, #4]
 802ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ab18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802ab1c:	687b      	ldr	r3, [r7, #4]
 802ab1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ab22:	2b01      	cmp	r3, #1
 802ab24:	d10b      	bne.n	802ab3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802ab26:	687b      	ldr	r3, [r7, #4]
 802ab28:	689b      	ldr	r3, [r3, #8]
 802ab2a:	f043 0206 	orr.w	r2, r3, #6
 802ab2e:	687b      	ldr	r3, [r7, #4]
 802ab30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802ab32:	687b      	ldr	r3, [r7, #4]
 802ab34:	689b      	ldr	r3, [r3, #8]
 802ab36:	f043 0220 	orr.w	r2, r3, #32
 802ab3a:	687b      	ldr	r3, [r7, #4]
 802ab3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802ab3e:	7bfb      	ldrb	r3, [r7, #15]
}
 802ab40:	4618      	mov	r0, r3
 802ab42:	3710      	adds	r7, #16
 802ab44:	46bd      	mov	sp, r7
 802ab46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802ab4a:	b004      	add	sp, #16
 802ab4c:	4770      	bx	lr

0802ab4e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab4e:	b480      	push	{r7}
 802ab50:	b083      	sub	sp, #12
 802ab52:	af00      	add	r7, sp, #0
 802ab54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802ab56:	687b      	ldr	r3, [r7, #4]
 802ab58:	689b      	ldr	r3, [r3, #8]
 802ab5a:	f043 0201 	orr.w	r2, r3, #1
 802ab5e:	687b      	ldr	r3, [r7, #4]
 802ab60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ab62:	2300      	movs	r3, #0
}
 802ab64:	4618      	mov	r0, r3
 802ab66:	370c      	adds	r7, #12
 802ab68:	46bd      	mov	sp, r7
 802ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab6e:	4770      	bx	lr

0802ab70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802ab70:	b480      	push	{r7}
 802ab72:	b083      	sub	sp, #12
 802ab74:	af00      	add	r7, sp, #0
 802ab76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802ab78:	687b      	ldr	r3, [r7, #4]
 802ab7a:	689b      	ldr	r3, [r3, #8]
 802ab7c:	f023 0201 	bic.w	r2, r3, #1
 802ab80:	687b      	ldr	r3, [r7, #4]
 802ab82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802ab84:	2300      	movs	r3, #0
}
 802ab86:	4618      	mov	r0, r3
 802ab88:	370c      	adds	r7, #12
 802ab8a:	46bd      	mov	sp, r7
 802ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab90:	4770      	bx	lr

0802ab92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802ab92:	b580      	push	{r7, lr}
 802ab94:	b084      	sub	sp, #16
 802ab96:	af00      	add	r7, sp, #0
 802ab98:	6078      	str	r0, [r7, #4]
 802ab9a:	460b      	mov	r3, r1
 802ab9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802ab9e:	2300      	movs	r3, #0
 802aba0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802aba2:	687b      	ldr	r3, [r7, #4]
 802aba4:	68db      	ldr	r3, [r3, #12]
 802aba6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802abaa:	687b      	ldr	r3, [r7, #4]
 802abac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802abae:	78fb      	ldrb	r3, [r7, #3]
 802abb0:	2b01      	cmp	r3, #1
 802abb2:	d115      	bne.n	802abe0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802abb4:	687b      	ldr	r3, [r7, #4]
 802abb6:	68db      	ldr	r3, [r3, #12]
 802abb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802abbc:	687b      	ldr	r3, [r7, #4]
 802abbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802abc0:	2001      	movs	r0, #1
 802abc2:	f7f8 fd61 	bl	8023688 <HAL_Delay>
      ms++;
 802abc6:	68fb      	ldr	r3, [r7, #12]
 802abc8:	3301      	adds	r3, #1
 802abca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802abcc:	6878      	ldr	r0, [r7, #4]
 802abce:	f000 f93a 	bl	802ae46 <USB_GetMode>
 802abd2:	4603      	mov	r3, r0
 802abd4:	2b01      	cmp	r3, #1
 802abd6:	d01e      	beq.n	802ac16 <USB_SetCurrentMode+0x84>
 802abd8:	68fb      	ldr	r3, [r7, #12]
 802abda:	2b31      	cmp	r3, #49	; 0x31
 802abdc:	d9f0      	bls.n	802abc0 <USB_SetCurrentMode+0x2e>
 802abde:	e01a      	b.n	802ac16 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802abe0:	78fb      	ldrb	r3, [r7, #3]
 802abe2:	2b00      	cmp	r3, #0
 802abe4:	d115      	bne.n	802ac12 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802abe6:	687b      	ldr	r3, [r7, #4]
 802abe8:	68db      	ldr	r3, [r3, #12]
 802abea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802abee:	687b      	ldr	r3, [r7, #4]
 802abf0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802abf2:	2001      	movs	r0, #1
 802abf4:	f7f8 fd48 	bl	8023688 <HAL_Delay>
      ms++;
 802abf8:	68fb      	ldr	r3, [r7, #12]
 802abfa:	3301      	adds	r3, #1
 802abfc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802abfe:	6878      	ldr	r0, [r7, #4]
 802ac00:	f000 f921 	bl	802ae46 <USB_GetMode>
 802ac04:	4603      	mov	r3, r0
 802ac06:	2b00      	cmp	r3, #0
 802ac08:	d005      	beq.n	802ac16 <USB_SetCurrentMode+0x84>
 802ac0a:	68fb      	ldr	r3, [r7, #12]
 802ac0c:	2b31      	cmp	r3, #49	; 0x31
 802ac0e:	d9f0      	bls.n	802abf2 <USB_SetCurrentMode+0x60>
 802ac10:	e001      	b.n	802ac16 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ac12:	2301      	movs	r3, #1
 802ac14:	e005      	b.n	802ac22 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ac16:	68fb      	ldr	r3, [r7, #12]
 802ac18:	2b32      	cmp	r3, #50	; 0x32
 802ac1a:	d101      	bne.n	802ac20 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ac1c:	2301      	movs	r3, #1
 802ac1e:	e000      	b.n	802ac22 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ac20:	2300      	movs	r3, #0
}
 802ac22:	4618      	mov	r0, r3
 802ac24:	3710      	adds	r7, #16
 802ac26:	46bd      	mov	sp, r7
 802ac28:	bd80      	pop	{r7, pc}
	...

0802ac2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802ac2c:	b480      	push	{r7}
 802ac2e:	b085      	sub	sp, #20
 802ac30:	af00      	add	r7, sp, #0
 802ac32:	6078      	str	r0, [r7, #4]
 802ac34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802ac36:	2300      	movs	r3, #0
 802ac38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ac3a:	68fb      	ldr	r3, [r7, #12]
 802ac3c:	3301      	adds	r3, #1
 802ac3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac40:	68fb      	ldr	r3, [r7, #12]
 802ac42:	4a13      	ldr	r2, [pc, #76]	; (802ac90 <USB_FlushTxFifo+0x64>)
 802ac44:	4293      	cmp	r3, r2
 802ac46:	d901      	bls.n	802ac4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802ac48:	2303      	movs	r3, #3
 802ac4a:	e01b      	b.n	802ac84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ac4c:	687b      	ldr	r3, [r7, #4]
 802ac4e:	691b      	ldr	r3, [r3, #16]
 802ac50:	2b00      	cmp	r3, #0
 802ac52:	daf2      	bge.n	802ac3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802ac54:	2300      	movs	r3, #0
 802ac56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802ac58:	683b      	ldr	r3, [r7, #0]
 802ac5a:	019b      	lsls	r3, r3, #6
 802ac5c:	f043 0220 	orr.w	r2, r3, #32
 802ac60:	687b      	ldr	r3, [r7, #4]
 802ac62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ac64:	68fb      	ldr	r3, [r7, #12]
 802ac66:	3301      	adds	r3, #1
 802ac68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ac6a:	68fb      	ldr	r3, [r7, #12]
 802ac6c:	4a08      	ldr	r2, [pc, #32]	; (802ac90 <USB_FlushTxFifo+0x64>)
 802ac6e:	4293      	cmp	r3, r2
 802ac70:	d901      	bls.n	802ac76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802ac72:	2303      	movs	r3, #3
 802ac74:	e006      	b.n	802ac84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802ac76:	687b      	ldr	r3, [r7, #4]
 802ac78:	691b      	ldr	r3, [r3, #16]
 802ac7a:	f003 0320 	and.w	r3, r3, #32
 802ac7e:	2b20      	cmp	r3, #32
 802ac80:	d0f0      	beq.n	802ac64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802ac82:	2300      	movs	r3, #0
}
 802ac84:	4618      	mov	r0, r3
 802ac86:	3714      	adds	r7, #20
 802ac88:	46bd      	mov	sp, r7
 802ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac8e:	4770      	bx	lr
 802ac90:	00030d40 	.word	0x00030d40

0802ac94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802ac94:	b480      	push	{r7}
 802ac96:	b085      	sub	sp, #20
 802ac98:	af00      	add	r7, sp, #0
 802ac9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ac9c:	2300      	movs	r3, #0
 802ac9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802aca0:	68fb      	ldr	r3, [r7, #12]
 802aca2:	3301      	adds	r3, #1
 802aca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802aca6:	68fb      	ldr	r3, [r7, #12]
 802aca8:	4a11      	ldr	r2, [pc, #68]	; (802acf0 <USB_FlushRxFifo+0x5c>)
 802acaa:	4293      	cmp	r3, r2
 802acac:	d901      	bls.n	802acb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802acae:	2303      	movs	r3, #3
 802acb0:	e018      	b.n	802ace4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802acb2:	687b      	ldr	r3, [r7, #4]
 802acb4:	691b      	ldr	r3, [r3, #16]
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	daf2      	bge.n	802aca0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802acba:	2300      	movs	r3, #0
 802acbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802acbe:	687b      	ldr	r3, [r7, #4]
 802acc0:	2210      	movs	r2, #16
 802acc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802acc4:	68fb      	ldr	r3, [r7, #12]
 802acc6:	3301      	adds	r3, #1
 802acc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802acca:	68fb      	ldr	r3, [r7, #12]
 802accc:	4a08      	ldr	r2, [pc, #32]	; (802acf0 <USB_FlushRxFifo+0x5c>)
 802acce:	4293      	cmp	r3, r2
 802acd0:	d901      	bls.n	802acd6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802acd2:	2303      	movs	r3, #3
 802acd4:	e006      	b.n	802ace4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802acd6:	687b      	ldr	r3, [r7, #4]
 802acd8:	691b      	ldr	r3, [r3, #16]
 802acda:	f003 0310 	and.w	r3, r3, #16
 802acde:	2b10      	cmp	r3, #16
 802ace0:	d0f0      	beq.n	802acc4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802ace2:	2300      	movs	r3, #0
}
 802ace4:	4618      	mov	r0, r3
 802ace6:	3714      	adds	r7, #20
 802ace8:	46bd      	mov	sp, r7
 802acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802acee:	4770      	bx	lr
 802acf0:	00030d40 	.word	0x00030d40

0802acf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802acf4:	b480      	push	{r7}
 802acf6:	b089      	sub	sp, #36	; 0x24
 802acf8:	af00      	add	r7, sp, #0
 802acfa:	60f8      	str	r0, [r7, #12]
 802acfc:	60b9      	str	r1, [r7, #8]
 802acfe:	4611      	mov	r1, r2
 802ad00:	461a      	mov	r2, r3
 802ad02:	460b      	mov	r3, r1
 802ad04:	71fb      	strb	r3, [r7, #7]
 802ad06:	4613      	mov	r3, r2
 802ad08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad0a:	68fb      	ldr	r3, [r7, #12]
 802ad0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802ad0e:	68bb      	ldr	r3, [r7, #8]
 802ad10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802ad12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ad16:	2b00      	cmp	r3, #0
 802ad18:	d123      	bne.n	802ad62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ad1a:	88bb      	ldrh	r3, [r7, #4]
 802ad1c:	3303      	adds	r3, #3
 802ad1e:	089b      	lsrs	r3, r3, #2
 802ad20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ad22:	2300      	movs	r3, #0
 802ad24:	61bb      	str	r3, [r7, #24]
 802ad26:	e018      	b.n	802ad5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ad28:	79fb      	ldrb	r3, [r7, #7]
 802ad2a:	031a      	lsls	r2, r3, #12
 802ad2c:	697b      	ldr	r3, [r7, #20]
 802ad2e:	4413      	add	r3, r2
 802ad30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ad34:	461a      	mov	r2, r3
 802ad36:	69fb      	ldr	r3, [r7, #28]
 802ad38:	681b      	ldr	r3, [r3, #0]
 802ad3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ad3c:	69fb      	ldr	r3, [r7, #28]
 802ad3e:	3301      	adds	r3, #1
 802ad40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad42:	69fb      	ldr	r3, [r7, #28]
 802ad44:	3301      	adds	r3, #1
 802ad46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad48:	69fb      	ldr	r3, [r7, #28]
 802ad4a:	3301      	adds	r3, #1
 802ad4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ad4e:	69fb      	ldr	r3, [r7, #28]
 802ad50:	3301      	adds	r3, #1
 802ad52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ad54:	69bb      	ldr	r3, [r7, #24]
 802ad56:	3301      	adds	r3, #1
 802ad58:	61bb      	str	r3, [r7, #24]
 802ad5a:	69ba      	ldr	r2, [r7, #24]
 802ad5c:	693b      	ldr	r3, [r7, #16]
 802ad5e:	429a      	cmp	r2, r3
 802ad60:	d3e2      	bcc.n	802ad28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ad62:	2300      	movs	r3, #0
}
 802ad64:	4618      	mov	r0, r3
 802ad66:	3724      	adds	r7, #36	; 0x24
 802ad68:	46bd      	mov	sp, r7
 802ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad6e:	4770      	bx	lr

0802ad70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802ad70:	b480      	push	{r7}
 802ad72:	b08b      	sub	sp, #44	; 0x2c
 802ad74:	af00      	add	r7, sp, #0
 802ad76:	60f8      	str	r0, [r7, #12]
 802ad78:	60b9      	str	r1, [r7, #8]
 802ad7a:	4613      	mov	r3, r2
 802ad7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ad7e:	68fb      	ldr	r3, [r7, #12]
 802ad80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802ad82:	68bb      	ldr	r3, [r7, #8]
 802ad84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802ad86:	88fb      	ldrh	r3, [r7, #6]
 802ad88:	089b      	lsrs	r3, r3, #2
 802ad8a:	b29b      	uxth	r3, r3
 802ad8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802ad8e:	88fb      	ldrh	r3, [r7, #6]
 802ad90:	f003 0303 	and.w	r3, r3, #3
 802ad94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802ad96:	2300      	movs	r3, #0
 802ad98:	623b      	str	r3, [r7, #32]
 802ad9a:	e014      	b.n	802adc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802ad9c:	69bb      	ldr	r3, [r7, #24]
 802ad9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ada2:	681a      	ldr	r2, [r3, #0]
 802ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ada6:	601a      	str	r2, [r3, #0]
    pDest++;
 802ada8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adaa:	3301      	adds	r3, #1
 802adac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adb0:	3301      	adds	r3, #1
 802adb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adb6:	3301      	adds	r3, #1
 802adb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adbc:	3301      	adds	r3, #1
 802adbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802adc0:	6a3b      	ldr	r3, [r7, #32]
 802adc2:	3301      	adds	r3, #1
 802adc4:	623b      	str	r3, [r7, #32]
 802adc6:	6a3a      	ldr	r2, [r7, #32]
 802adc8:	697b      	ldr	r3, [r7, #20]
 802adca:	429a      	cmp	r2, r3
 802adcc:	d3e6      	bcc.n	802ad9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802adce:	8bfb      	ldrh	r3, [r7, #30]
 802add0:	2b00      	cmp	r3, #0
 802add2:	d01e      	beq.n	802ae12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802add4:	2300      	movs	r3, #0
 802add6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802add8:	69bb      	ldr	r3, [r7, #24]
 802adda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802adde:	461a      	mov	r2, r3
 802ade0:	f107 0310 	add.w	r3, r7, #16
 802ade4:	6812      	ldr	r2, [r2, #0]
 802ade6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802ade8:	693a      	ldr	r2, [r7, #16]
 802adea:	6a3b      	ldr	r3, [r7, #32]
 802adec:	b2db      	uxtb	r3, r3
 802adee:	00db      	lsls	r3, r3, #3
 802adf0:	fa22 f303 	lsr.w	r3, r2, r3
 802adf4:	b2da      	uxtb	r2, r3
 802adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802adf8:	701a      	strb	r2, [r3, #0]
      i++;
 802adfa:	6a3b      	ldr	r3, [r7, #32]
 802adfc:	3301      	adds	r3, #1
 802adfe:	623b      	str	r3, [r7, #32]
      pDest++;
 802ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ae02:	3301      	adds	r3, #1
 802ae04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802ae06:	8bfb      	ldrh	r3, [r7, #30]
 802ae08:	3b01      	subs	r3, #1
 802ae0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802ae0c:	8bfb      	ldrh	r3, [r7, #30]
 802ae0e:	2b00      	cmp	r3, #0
 802ae10:	d1ea      	bne.n	802ade8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802ae14:	4618      	mov	r0, r3
 802ae16:	372c      	adds	r7, #44	; 0x2c
 802ae18:	46bd      	mov	sp, r7
 802ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae1e:	4770      	bx	lr

0802ae20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802ae20:	b480      	push	{r7}
 802ae22:	b085      	sub	sp, #20
 802ae24:	af00      	add	r7, sp, #0
 802ae26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802ae28:	687b      	ldr	r3, [r7, #4]
 802ae2a:	695b      	ldr	r3, [r3, #20]
 802ae2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802ae2e:	687b      	ldr	r3, [r7, #4]
 802ae30:	699b      	ldr	r3, [r3, #24]
 802ae32:	68fa      	ldr	r2, [r7, #12]
 802ae34:	4013      	ands	r3, r2
 802ae36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802ae38:	68fb      	ldr	r3, [r7, #12]
}
 802ae3a:	4618      	mov	r0, r3
 802ae3c:	3714      	adds	r7, #20
 802ae3e:	46bd      	mov	sp, r7
 802ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae44:	4770      	bx	lr

0802ae46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802ae46:	b480      	push	{r7}
 802ae48:	b083      	sub	sp, #12
 802ae4a:	af00      	add	r7, sp, #0
 802ae4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802ae4e:	687b      	ldr	r3, [r7, #4]
 802ae50:	695b      	ldr	r3, [r3, #20]
 802ae52:	f003 0301 	and.w	r3, r3, #1
}
 802ae56:	4618      	mov	r0, r3
 802ae58:	370c      	adds	r7, #12
 802ae5a:	46bd      	mov	sp, r7
 802ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae60:	4770      	bx	lr
	...

0802ae64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802ae64:	b480      	push	{r7}
 802ae66:	b085      	sub	sp, #20
 802ae68:	af00      	add	r7, sp, #0
 802ae6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ae6c:	2300      	movs	r3, #0
 802ae6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ae70:	68fb      	ldr	r3, [r7, #12]
 802ae72:	3301      	adds	r3, #1
 802ae74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ae76:	68fb      	ldr	r3, [r7, #12]
 802ae78:	4a13      	ldr	r2, [pc, #76]	; (802aec8 <USB_CoreReset+0x64>)
 802ae7a:	4293      	cmp	r3, r2
 802ae7c:	d901      	bls.n	802ae82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802ae7e:	2303      	movs	r3, #3
 802ae80:	e01b      	b.n	802aeba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ae82:	687b      	ldr	r3, [r7, #4]
 802ae84:	691b      	ldr	r3, [r3, #16]
 802ae86:	2b00      	cmp	r3, #0
 802ae88:	daf2      	bge.n	802ae70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802ae8a:	2300      	movs	r3, #0
 802ae8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802ae8e:	687b      	ldr	r3, [r7, #4]
 802ae90:	691b      	ldr	r3, [r3, #16]
 802ae92:	f043 0201 	orr.w	r2, r3, #1
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ae9a:	68fb      	ldr	r3, [r7, #12]
 802ae9c:	3301      	adds	r3, #1
 802ae9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802aea0:	68fb      	ldr	r3, [r7, #12]
 802aea2:	4a09      	ldr	r2, [pc, #36]	; (802aec8 <USB_CoreReset+0x64>)
 802aea4:	4293      	cmp	r3, r2
 802aea6:	d901      	bls.n	802aeac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802aea8:	2303      	movs	r3, #3
 802aeaa:	e006      	b.n	802aeba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802aeac:	687b      	ldr	r3, [r7, #4]
 802aeae:	691b      	ldr	r3, [r3, #16]
 802aeb0:	f003 0301 	and.w	r3, r3, #1
 802aeb4:	2b01      	cmp	r3, #1
 802aeb6:	d0f0      	beq.n	802ae9a <USB_CoreReset+0x36>

  return HAL_OK;
 802aeb8:	2300      	movs	r3, #0
}
 802aeba:	4618      	mov	r0, r3
 802aebc:	3714      	adds	r7, #20
 802aebe:	46bd      	mov	sp, r7
 802aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aec4:	4770      	bx	lr
 802aec6:	bf00      	nop
 802aec8:	00030d40 	.word	0x00030d40

0802aecc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802aecc:	b084      	sub	sp, #16
 802aece:	b580      	push	{r7, lr}
 802aed0:	b086      	sub	sp, #24
 802aed2:	af00      	add	r7, sp, #0
 802aed4:	6078      	str	r0, [r7, #4]
 802aed6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802aeda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802aede:	2300      	movs	r3, #0
 802aee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802aee2:	687b      	ldr	r3, [r7, #4]
 802aee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802aee6:	68fb      	ldr	r3, [r7, #12]
 802aee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802aeec:	461a      	mov	r2, r3
 802aeee:	2300      	movs	r3, #0
 802aef0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802aef2:	687b      	ldr	r3, [r7, #4]
 802aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aef6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802aefa:	687b      	ldr	r3, [r7, #4]
 802aefc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af02:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802af06:	687b      	ldr	r3, [r7, #4]
 802af08:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802af0a:	687b      	ldr	r3, [r7, #4]
 802af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802af0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802af12:	687b      	ldr	r3, [r7, #4]
 802af14:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802af1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802af1e:	2b00      	cmp	r3, #0
 802af20:	d018      	beq.n	802af54 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802af24:	2b01      	cmp	r3, #1
 802af26:	d10a      	bne.n	802af3e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802af28:	68fb      	ldr	r3, [r7, #12]
 802af2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af2e:	681b      	ldr	r3, [r3, #0]
 802af30:	68fa      	ldr	r2, [r7, #12]
 802af32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af36:	f043 0304 	orr.w	r3, r3, #4
 802af3a:	6013      	str	r3, [r2, #0]
 802af3c:	e014      	b.n	802af68 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af3e:	68fb      	ldr	r3, [r7, #12]
 802af40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af44:	681b      	ldr	r3, [r3, #0]
 802af46:	68fa      	ldr	r2, [r7, #12]
 802af48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af4c:	f023 0304 	bic.w	r3, r3, #4
 802af50:	6013      	str	r3, [r2, #0]
 802af52:	e009      	b.n	802af68 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802af54:	68fb      	ldr	r3, [r7, #12]
 802af56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af5a:	681b      	ldr	r3, [r3, #0]
 802af5c:	68fa      	ldr	r2, [r7, #12]
 802af5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af62:	f023 0304 	bic.w	r3, r3, #4
 802af66:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802af68:	2110      	movs	r1, #16
 802af6a:	6878      	ldr	r0, [r7, #4]
 802af6c:	f7ff fe5e 	bl	802ac2c <USB_FlushTxFifo>
 802af70:	4603      	mov	r3, r0
 802af72:	2b00      	cmp	r3, #0
 802af74:	d001      	beq.n	802af7a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802af76:	2301      	movs	r3, #1
 802af78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802af7a:	6878      	ldr	r0, [r7, #4]
 802af7c:	f7ff fe8a 	bl	802ac94 <USB_FlushRxFifo>
 802af80:	4603      	mov	r3, r0
 802af82:	2b00      	cmp	r3, #0
 802af84:	d001      	beq.n	802af8a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802af86:	2301      	movs	r3, #1
 802af88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802af8a:	2300      	movs	r3, #0
 802af8c:	613b      	str	r3, [r7, #16]
 802af8e:	e015      	b.n	802afbc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802af90:	693b      	ldr	r3, [r7, #16]
 802af92:	015a      	lsls	r2, r3, #5
 802af94:	68fb      	ldr	r3, [r7, #12]
 802af96:	4413      	add	r3, r2
 802af98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802af9c:	461a      	mov	r2, r3
 802af9e:	f04f 33ff 	mov.w	r3, #4294967295
 802afa2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802afa4:	693b      	ldr	r3, [r7, #16]
 802afa6:	015a      	lsls	r2, r3, #5
 802afa8:	68fb      	ldr	r3, [r7, #12]
 802afaa:	4413      	add	r3, r2
 802afac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802afb0:	461a      	mov	r2, r3
 802afb2:	2300      	movs	r3, #0
 802afb4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802afb6:	693b      	ldr	r3, [r7, #16]
 802afb8:	3301      	adds	r3, #1
 802afba:	613b      	str	r3, [r7, #16]
 802afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802afbe:	693a      	ldr	r2, [r7, #16]
 802afc0:	429a      	cmp	r2, r3
 802afc2:	d3e5      	bcc.n	802af90 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802afc4:	687b      	ldr	r3, [r7, #4]
 802afc6:	2200      	movs	r2, #0
 802afc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802afca:	687b      	ldr	r3, [r7, #4]
 802afcc:	f04f 32ff 	mov.w	r2, #4294967295
 802afd0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802afd2:	687b      	ldr	r3, [r7, #4]
 802afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802afd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802afda:	2b00      	cmp	r3, #0
 802afdc:	d00b      	beq.n	802aff6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802afde:	687b      	ldr	r3, [r7, #4]
 802afe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 802afe4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802afe6:	687b      	ldr	r3, [r7, #4]
 802afe8:	4a13      	ldr	r2, [pc, #76]	; (802b038 <USB_HostInit+0x16c>)
 802afea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802afec:	687b      	ldr	r3, [r7, #4]
 802afee:	4a13      	ldr	r2, [pc, #76]	; (802b03c <USB_HostInit+0x170>)
 802aff0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802aff4:	e009      	b.n	802b00a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802aff6:	687b      	ldr	r3, [r7, #4]
 802aff8:	2280      	movs	r2, #128	; 0x80
 802affa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802affc:	687b      	ldr	r3, [r7, #4]
 802affe:	4a10      	ldr	r2, [pc, #64]	; (802b040 <USB_HostInit+0x174>)
 802b000:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802b002:	687b      	ldr	r3, [r7, #4]
 802b004:	4a0f      	ldr	r2, [pc, #60]	; (802b044 <USB_HostInit+0x178>)
 802b006:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b00c:	2b00      	cmp	r3, #0
 802b00e:	d105      	bne.n	802b01c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802b010:	687b      	ldr	r3, [r7, #4]
 802b012:	699b      	ldr	r3, [r3, #24]
 802b014:	f043 0210 	orr.w	r2, r3, #16
 802b018:	687b      	ldr	r3, [r7, #4]
 802b01a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802b01c:	687b      	ldr	r3, [r7, #4]
 802b01e:	699a      	ldr	r2, [r3, #24]
 802b020:	4b09      	ldr	r3, [pc, #36]	; (802b048 <USB_HostInit+0x17c>)
 802b022:	4313      	orrs	r3, r2
 802b024:	687a      	ldr	r2, [r7, #4]
 802b026:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802b028:	7dfb      	ldrb	r3, [r7, #23]
}
 802b02a:	4618      	mov	r0, r3
 802b02c:	3718      	adds	r7, #24
 802b02e:	46bd      	mov	sp, r7
 802b030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802b034:	b004      	add	sp, #16
 802b036:	4770      	bx	lr
 802b038:	01000200 	.word	0x01000200
 802b03c:	00e00300 	.word	0x00e00300
 802b040:	00600080 	.word	0x00600080
 802b044:	004000e0 	.word	0x004000e0
 802b048:	a3200008 	.word	0xa3200008

0802b04c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802b04c:	b480      	push	{r7}
 802b04e:	b085      	sub	sp, #20
 802b050:	af00      	add	r7, sp, #0
 802b052:	6078      	str	r0, [r7, #4]
 802b054:	460b      	mov	r3, r1
 802b056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b058:	687b      	ldr	r3, [r7, #4]
 802b05a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802b05c:	68fb      	ldr	r3, [r7, #12]
 802b05e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b062:	681b      	ldr	r3, [r3, #0]
 802b064:	68fa      	ldr	r2, [r7, #12]
 802b066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802b06a:	f023 0303 	bic.w	r3, r3, #3
 802b06e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802b070:	68fb      	ldr	r3, [r7, #12]
 802b072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b076:	681a      	ldr	r2, [r3, #0]
 802b078:	78fb      	ldrb	r3, [r7, #3]
 802b07a:	f003 0303 	and.w	r3, r3, #3
 802b07e:	68f9      	ldr	r1, [r7, #12]
 802b080:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b084:	4313      	orrs	r3, r2
 802b086:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802b088:	78fb      	ldrb	r3, [r7, #3]
 802b08a:	2b01      	cmp	r3, #1
 802b08c:	d107      	bne.n	802b09e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802b08e:	68fb      	ldr	r3, [r7, #12]
 802b090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b094:	461a      	mov	r2, r3
 802b096:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802b09a:	6053      	str	r3, [r2, #4]
 802b09c:	e009      	b.n	802b0b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802b09e:	78fb      	ldrb	r3, [r7, #3]
 802b0a0:	2b02      	cmp	r3, #2
 802b0a2:	d106      	bne.n	802b0b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802b0a4:	68fb      	ldr	r3, [r7, #12]
 802b0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0aa:	461a      	mov	r2, r3
 802b0ac:	f241 7370 	movw	r3, #6000	; 0x1770
 802b0b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802b0b2:	2300      	movs	r3, #0
}
 802b0b4:	4618      	mov	r0, r3
 802b0b6:	3714      	adds	r7, #20
 802b0b8:	46bd      	mov	sp, r7
 802b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0be:	4770      	bx	lr

0802b0c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802b0c0:	b580      	push	{r7, lr}
 802b0c2:	b084      	sub	sp, #16
 802b0c4:	af00      	add	r7, sp, #0
 802b0c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0c8:	687b      	ldr	r3, [r7, #4]
 802b0ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802b0cc:	2300      	movs	r3, #0
 802b0ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b0d0:	68fb      	ldr	r3, [r7, #12]
 802b0d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b0d6:	681b      	ldr	r3, [r3, #0]
 802b0d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b0da:	68bb      	ldr	r3, [r7, #8]
 802b0dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b0e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802b0e2:	68bb      	ldr	r3, [r7, #8]
 802b0e4:	68fa      	ldr	r2, [r7, #12]
 802b0e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b0ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b0ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802b0f0:	2064      	movs	r0, #100	; 0x64
 802b0f2:	f7f8 fac9 	bl	8023688 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802b0f6:	68bb      	ldr	r3, [r7, #8]
 802b0f8:	68fa      	ldr	r2, [r7, #12]
 802b0fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b0fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b102:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802b104:	200a      	movs	r0, #10
 802b106:	f7f8 fabf 	bl	8023688 <HAL_Delay>

  return HAL_OK;
 802b10a:	2300      	movs	r3, #0
}
 802b10c:	4618      	mov	r0, r3
 802b10e:	3710      	adds	r7, #16
 802b110:	46bd      	mov	sp, r7
 802b112:	bd80      	pop	{r7, pc}

0802b114 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802b114:	b480      	push	{r7}
 802b116:	b085      	sub	sp, #20
 802b118:	af00      	add	r7, sp, #0
 802b11a:	6078      	str	r0, [r7, #4]
 802b11c:	460b      	mov	r3, r1
 802b11e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b120:	687b      	ldr	r3, [r7, #4]
 802b122:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b124:	2300      	movs	r3, #0
 802b126:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b128:	68fb      	ldr	r3, [r7, #12]
 802b12a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b12e:	681b      	ldr	r3, [r3, #0]
 802b130:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b132:	68bb      	ldr	r3, [r7, #8]
 802b134:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b138:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802b13a:	68bb      	ldr	r3, [r7, #8]
 802b13c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b140:	2b00      	cmp	r3, #0
 802b142:	d109      	bne.n	802b158 <USB_DriveVbus+0x44>
 802b144:	78fb      	ldrb	r3, [r7, #3]
 802b146:	2b01      	cmp	r3, #1
 802b148:	d106      	bne.n	802b158 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802b14a:	68bb      	ldr	r3, [r7, #8]
 802b14c:	68fa      	ldr	r2, [r7, #12]
 802b14e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b156:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802b158:	68bb      	ldr	r3, [r7, #8]
 802b15a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b162:	d109      	bne.n	802b178 <USB_DriveVbus+0x64>
 802b164:	78fb      	ldrb	r3, [r7, #3]
 802b166:	2b00      	cmp	r3, #0
 802b168:	d106      	bne.n	802b178 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802b16a:	68bb      	ldr	r3, [r7, #8]
 802b16c:	68fa      	ldr	r2, [r7, #12]
 802b16e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b176:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802b178:	2300      	movs	r3, #0
}
 802b17a:	4618      	mov	r0, r3
 802b17c:	3714      	adds	r7, #20
 802b17e:	46bd      	mov	sp, r7
 802b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b184:	4770      	bx	lr

0802b186 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802b186:	b480      	push	{r7}
 802b188:	b085      	sub	sp, #20
 802b18a:	af00      	add	r7, sp, #0
 802b18c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b18e:	687b      	ldr	r3, [r7, #4]
 802b190:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b192:	2300      	movs	r3, #0
 802b194:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b196:	68fb      	ldr	r3, [r7, #12]
 802b198:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b19c:	681b      	ldr	r3, [r3, #0]
 802b19e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802b1a0:	68bb      	ldr	r3, [r7, #8]
 802b1a2:	0c5b      	lsrs	r3, r3, #17
 802b1a4:	f003 0303 	and.w	r3, r3, #3
}
 802b1a8:	4618      	mov	r0, r3
 802b1aa:	3714      	adds	r7, #20
 802b1ac:	46bd      	mov	sp, r7
 802b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1b2:	4770      	bx	lr

0802b1b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802b1b4:	b480      	push	{r7}
 802b1b6:	b085      	sub	sp, #20
 802b1b8:	af00      	add	r7, sp, #0
 802b1ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1bc:	687b      	ldr	r3, [r7, #4]
 802b1be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802b1c0:	68fb      	ldr	r3, [r7, #12]
 802b1c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b1c6:	689b      	ldr	r3, [r3, #8]
 802b1c8:	b29b      	uxth	r3, r3
}
 802b1ca:	4618      	mov	r0, r3
 802b1cc:	3714      	adds	r7, #20
 802b1ce:	46bd      	mov	sp, r7
 802b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b1d4:	4770      	bx	lr
	...

0802b1d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802b1d8:	b580      	push	{r7, lr}
 802b1da:	b088      	sub	sp, #32
 802b1dc:	af00      	add	r7, sp, #0
 802b1de:	6078      	str	r0, [r7, #4]
 802b1e0:	4608      	mov	r0, r1
 802b1e2:	4611      	mov	r1, r2
 802b1e4:	461a      	mov	r2, r3
 802b1e6:	4603      	mov	r3, r0
 802b1e8:	70fb      	strb	r3, [r7, #3]
 802b1ea:	460b      	mov	r3, r1
 802b1ec:	70bb      	strb	r3, [r7, #2]
 802b1ee:	4613      	mov	r3, r2
 802b1f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802b1f2:	2300      	movs	r3, #0
 802b1f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b1f6:	687b      	ldr	r3, [r7, #4]
 802b1f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802b1fa:	78fb      	ldrb	r3, [r7, #3]
 802b1fc:	015a      	lsls	r2, r3, #5
 802b1fe:	693b      	ldr	r3, [r7, #16]
 802b200:	4413      	add	r3, r2
 802b202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b206:	461a      	mov	r2, r3
 802b208:	f04f 33ff 	mov.w	r3, #4294967295
 802b20c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802b20e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b212:	2b03      	cmp	r3, #3
 802b214:	d87e      	bhi.n	802b314 <USB_HC_Init+0x13c>
 802b216:	a201      	add	r2, pc, #4	; (adr r2, 802b21c <USB_HC_Init+0x44>)
 802b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b21c:	0802b22d 	.word	0x0802b22d
 802b220:	0802b2d7 	.word	0x0802b2d7
 802b224:	0802b22d 	.word	0x0802b22d
 802b228:	0802b299 	.word	0x0802b299
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b22c:	78fb      	ldrb	r3, [r7, #3]
 802b22e:	015a      	lsls	r2, r3, #5
 802b230:	693b      	ldr	r3, [r7, #16]
 802b232:	4413      	add	r3, r2
 802b234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b238:	461a      	mov	r2, r3
 802b23a:	f240 439d 	movw	r3, #1181	; 0x49d
 802b23e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802b240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b244:	2b00      	cmp	r3, #0
 802b246:	da10      	bge.n	802b26a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b248:	78fb      	ldrb	r3, [r7, #3]
 802b24a:	015a      	lsls	r2, r3, #5
 802b24c:	693b      	ldr	r3, [r7, #16]
 802b24e:	4413      	add	r3, r2
 802b250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b254:	68db      	ldr	r3, [r3, #12]
 802b256:	78fa      	ldrb	r2, [r7, #3]
 802b258:	0151      	lsls	r1, r2, #5
 802b25a:	693a      	ldr	r2, [r7, #16]
 802b25c:	440a      	add	r2, r1
 802b25e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b266:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802b268:	e057      	b.n	802b31a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802b26a:	687b      	ldr	r3, [r7, #4]
 802b26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b26e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b272:	2b00      	cmp	r3, #0
 802b274:	d051      	beq.n	802b31a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802b276:	78fb      	ldrb	r3, [r7, #3]
 802b278:	015a      	lsls	r2, r3, #5
 802b27a:	693b      	ldr	r3, [r7, #16]
 802b27c:	4413      	add	r3, r2
 802b27e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b282:	68db      	ldr	r3, [r3, #12]
 802b284:	78fa      	ldrb	r2, [r7, #3]
 802b286:	0151      	lsls	r1, r2, #5
 802b288:	693a      	ldr	r2, [r7, #16]
 802b28a:	440a      	add	r2, r1
 802b28c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b290:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802b294:	60d3      	str	r3, [r2, #12]
      break;
 802b296:	e040      	b.n	802b31a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b298:	78fb      	ldrb	r3, [r7, #3]
 802b29a:	015a      	lsls	r2, r3, #5
 802b29c:	693b      	ldr	r3, [r7, #16]
 802b29e:	4413      	add	r3, r2
 802b2a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2a4:	461a      	mov	r2, r3
 802b2a6:	f240 639d 	movw	r3, #1693	; 0x69d
 802b2aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b2ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2b0:	2b00      	cmp	r3, #0
 802b2b2:	da34      	bge.n	802b31e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b2b4:	78fb      	ldrb	r3, [r7, #3]
 802b2b6:	015a      	lsls	r2, r3, #5
 802b2b8:	693b      	ldr	r3, [r7, #16]
 802b2ba:	4413      	add	r3, r2
 802b2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2c0:	68db      	ldr	r3, [r3, #12]
 802b2c2:	78fa      	ldrb	r2, [r7, #3]
 802b2c4:	0151      	lsls	r1, r2, #5
 802b2c6:	693a      	ldr	r2, [r7, #16]
 802b2c8:	440a      	add	r2, r1
 802b2ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b2ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b2d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 802b2d4:	e023      	b.n	802b31e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b2d6:	78fb      	ldrb	r3, [r7, #3]
 802b2d8:	015a      	lsls	r2, r3, #5
 802b2da:	693b      	ldr	r3, [r7, #16]
 802b2dc:	4413      	add	r3, r2
 802b2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2e2:	461a      	mov	r2, r3
 802b2e4:	f240 2325 	movw	r3, #549	; 0x225
 802b2e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b2ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2ee:	2b00      	cmp	r3, #0
 802b2f0:	da17      	bge.n	802b322 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802b2f2:	78fb      	ldrb	r3, [r7, #3]
 802b2f4:	015a      	lsls	r2, r3, #5
 802b2f6:	693b      	ldr	r3, [r7, #16]
 802b2f8:	4413      	add	r3, r2
 802b2fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b2fe:	68db      	ldr	r3, [r3, #12]
 802b300:	78fa      	ldrb	r2, [r7, #3]
 802b302:	0151      	lsls	r1, r2, #5
 802b304:	693a      	ldr	r2, [r7, #16]
 802b306:	440a      	add	r2, r1
 802b308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b30c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802b310:	60d3      	str	r3, [r2, #12]
      }
      break;
 802b312:	e006      	b.n	802b322 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802b314:	2301      	movs	r3, #1
 802b316:	77fb      	strb	r3, [r7, #31]
      break;
 802b318:	e004      	b.n	802b324 <USB_HC_Init+0x14c>
      break;
 802b31a:	bf00      	nop
 802b31c:	e002      	b.n	802b324 <USB_HC_Init+0x14c>
      break;
 802b31e:	bf00      	nop
 802b320:	e000      	b.n	802b324 <USB_HC_Init+0x14c>
      break;
 802b322:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802b324:	78fb      	ldrb	r3, [r7, #3]
 802b326:	015a      	lsls	r2, r3, #5
 802b328:	693b      	ldr	r3, [r7, #16]
 802b32a:	4413      	add	r3, r2
 802b32c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b330:	68db      	ldr	r3, [r3, #12]
 802b332:	78fa      	ldrb	r2, [r7, #3]
 802b334:	0151      	lsls	r1, r2, #5
 802b336:	693a      	ldr	r2, [r7, #16]
 802b338:	440a      	add	r2, r1
 802b33a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b33e:	f043 0302 	orr.w	r3, r3, #2
 802b342:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802b344:	693b      	ldr	r3, [r7, #16]
 802b346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b34a:	699a      	ldr	r2, [r3, #24]
 802b34c:	78fb      	ldrb	r3, [r7, #3]
 802b34e:	f003 030f 	and.w	r3, r3, #15
 802b352:	2101      	movs	r1, #1
 802b354:	fa01 f303 	lsl.w	r3, r1, r3
 802b358:	6939      	ldr	r1, [r7, #16]
 802b35a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b35e:	4313      	orrs	r3, r2
 802b360:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802b362:	687b      	ldr	r3, [r7, #4]
 802b364:	699b      	ldr	r3, [r3, #24]
 802b366:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802b36a:	687b      	ldr	r3, [r7, #4]
 802b36c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802b36e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b372:	2b00      	cmp	r3, #0
 802b374:	da03      	bge.n	802b37e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802b376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802b37a:	61bb      	str	r3, [r7, #24]
 802b37c:	e001      	b.n	802b382 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802b37e:	2300      	movs	r3, #0
 802b380:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802b382:	6878      	ldr	r0, [r7, #4]
 802b384:	f7ff feff 	bl	802b186 <USB_GetHostSpeed>
 802b388:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802b38a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802b38e:	2b02      	cmp	r3, #2
 802b390:	d106      	bne.n	802b3a0 <USB_HC_Init+0x1c8>
 802b392:	68fb      	ldr	r3, [r7, #12]
 802b394:	2b02      	cmp	r3, #2
 802b396:	d003      	beq.n	802b3a0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802b398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802b39c:	617b      	str	r3, [r7, #20]
 802b39e:	e001      	b.n	802b3a4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802b3a0:	2300      	movs	r3, #0
 802b3a2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3a4:	787b      	ldrb	r3, [r7, #1]
 802b3a6:	059b      	lsls	r3, r3, #22
 802b3a8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3ac:	78bb      	ldrb	r3, [r7, #2]
 802b3ae:	02db      	lsls	r3, r3, #11
 802b3b0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3b4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3ba:	049b      	lsls	r3, r3, #18
 802b3bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b3c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b3c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b3c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3ca:	69bb      	ldr	r3, [r7, #24]
 802b3cc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3ce:	78fb      	ldrb	r3, [r7, #3]
 802b3d0:	0159      	lsls	r1, r3, #5
 802b3d2:	693b      	ldr	r3, [r7, #16]
 802b3d4:	440b      	add	r3, r1
 802b3d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b3da:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b3dc:	697b      	ldr	r3, [r7, #20]
 802b3de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b3e0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802b3e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3e6:	2b03      	cmp	r3, #3
 802b3e8:	d003      	beq.n	802b3f2 <USB_HC_Init+0x21a>
 802b3ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b3ee:	2b01      	cmp	r3, #1
 802b3f0:	d10f      	bne.n	802b412 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802b3f2:	78fb      	ldrb	r3, [r7, #3]
 802b3f4:	015a      	lsls	r2, r3, #5
 802b3f6:	693b      	ldr	r3, [r7, #16]
 802b3f8:	4413      	add	r3, r2
 802b3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b3fe:	681b      	ldr	r3, [r3, #0]
 802b400:	78fa      	ldrb	r2, [r7, #3]
 802b402:	0151      	lsls	r1, r2, #5
 802b404:	693a      	ldr	r2, [r7, #16]
 802b406:	440a      	add	r2, r1
 802b408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b40c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802b410:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802b412:	7ffb      	ldrb	r3, [r7, #31]
}
 802b414:	4618      	mov	r0, r3
 802b416:	3720      	adds	r7, #32
 802b418:	46bd      	mov	sp, r7
 802b41a:	bd80      	pop	{r7, pc}

0802b41c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802b41c:	b580      	push	{r7, lr}
 802b41e:	b08c      	sub	sp, #48	; 0x30
 802b420:	af02      	add	r7, sp, #8
 802b422:	60f8      	str	r0, [r7, #12]
 802b424:	60b9      	str	r1, [r7, #8]
 802b426:	4613      	mov	r3, r2
 802b428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b42a:	68fb      	ldr	r3, [r7, #12]
 802b42c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802b42e:	68bb      	ldr	r3, [r7, #8]
 802b430:	785b      	ldrb	r3, [r3, #1]
 802b432:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802b434:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b438:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802b43a:	68fb      	ldr	r3, [r7, #12]
 802b43c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b43e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b442:	2b00      	cmp	r3, #0
 802b444:	d02d      	beq.n	802b4a2 <USB_HC_StartXfer+0x86>
 802b446:	68bb      	ldr	r3, [r7, #8]
 802b448:	791b      	ldrb	r3, [r3, #4]
 802b44a:	2b00      	cmp	r3, #0
 802b44c:	d129      	bne.n	802b4a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802b44e:	79fb      	ldrb	r3, [r7, #7]
 802b450:	2b01      	cmp	r3, #1
 802b452:	d117      	bne.n	802b484 <USB_HC_StartXfer+0x68>
 802b454:	68bb      	ldr	r3, [r7, #8]
 802b456:	79db      	ldrb	r3, [r3, #7]
 802b458:	2b00      	cmp	r3, #0
 802b45a:	d003      	beq.n	802b464 <USB_HC_StartXfer+0x48>
 802b45c:	68bb      	ldr	r3, [r7, #8]
 802b45e:	79db      	ldrb	r3, [r3, #7]
 802b460:	2b02      	cmp	r3, #2
 802b462:	d10f      	bne.n	802b484 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802b464:	69fb      	ldr	r3, [r7, #28]
 802b466:	015a      	lsls	r2, r3, #5
 802b468:	6a3b      	ldr	r3, [r7, #32]
 802b46a:	4413      	add	r3, r2
 802b46c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b470:	68db      	ldr	r3, [r3, #12]
 802b472:	69fa      	ldr	r2, [r7, #28]
 802b474:	0151      	lsls	r1, r2, #5
 802b476:	6a3a      	ldr	r2, [r7, #32]
 802b478:	440a      	add	r2, r1
 802b47a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b47e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802b482:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802b484:	79fb      	ldrb	r3, [r7, #7]
 802b486:	2b00      	cmp	r3, #0
 802b488:	d10b      	bne.n	802b4a2 <USB_HC_StartXfer+0x86>
 802b48a:	68bb      	ldr	r3, [r7, #8]
 802b48c:	795b      	ldrb	r3, [r3, #5]
 802b48e:	2b01      	cmp	r3, #1
 802b490:	d107      	bne.n	802b4a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802b492:	68bb      	ldr	r3, [r7, #8]
 802b494:	785b      	ldrb	r3, [r3, #1]
 802b496:	4619      	mov	r1, r3
 802b498:	68f8      	ldr	r0, [r7, #12]
 802b49a:	f000 fa0f 	bl	802b8bc <USB_DoPing>
      return HAL_OK;
 802b49e:	2300      	movs	r3, #0
 802b4a0:	e0f8      	b.n	802b694 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802b4a2:	68bb      	ldr	r3, [r7, #8]
 802b4a4:	695b      	ldr	r3, [r3, #20]
 802b4a6:	2b00      	cmp	r3, #0
 802b4a8:	d018      	beq.n	802b4dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802b4aa:	68bb      	ldr	r3, [r7, #8]
 802b4ac:	695b      	ldr	r3, [r3, #20]
 802b4ae:	68ba      	ldr	r2, [r7, #8]
 802b4b0:	8912      	ldrh	r2, [r2, #8]
 802b4b2:	4413      	add	r3, r2
 802b4b4:	3b01      	subs	r3, #1
 802b4b6:	68ba      	ldr	r2, [r7, #8]
 802b4b8:	8912      	ldrh	r2, [r2, #8]
 802b4ba:	fbb3 f3f2 	udiv	r3, r3, r2
 802b4be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802b4c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b4c2:	8b7b      	ldrh	r3, [r7, #26]
 802b4c4:	429a      	cmp	r2, r3
 802b4c6:	d90b      	bls.n	802b4e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802b4c8:	8b7b      	ldrh	r3, [r7, #26]
 802b4ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b4cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b4ce:	68ba      	ldr	r2, [r7, #8]
 802b4d0:	8912      	ldrh	r2, [r2, #8]
 802b4d2:	fb03 f202 	mul.w	r2, r3, r2
 802b4d6:	68bb      	ldr	r3, [r7, #8]
 802b4d8:	611a      	str	r2, [r3, #16]
 802b4da:	e001      	b.n	802b4e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802b4dc:	2301      	movs	r3, #1
 802b4de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802b4e0:	68bb      	ldr	r3, [r7, #8]
 802b4e2:	78db      	ldrb	r3, [r3, #3]
 802b4e4:	2b00      	cmp	r3, #0
 802b4e6:	d007      	beq.n	802b4f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b4e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b4ea:	68ba      	ldr	r2, [r7, #8]
 802b4ec:	8912      	ldrh	r2, [r2, #8]
 802b4ee:	fb03 f202 	mul.w	r2, r3, r2
 802b4f2:	68bb      	ldr	r3, [r7, #8]
 802b4f4:	611a      	str	r2, [r3, #16]
 802b4f6:	e003      	b.n	802b500 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802b4f8:	68bb      	ldr	r3, [r7, #8]
 802b4fa:	695a      	ldr	r2, [r3, #20]
 802b4fc:	68bb      	ldr	r3, [r7, #8]
 802b4fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b500:	68bb      	ldr	r3, [r7, #8]
 802b502:	691b      	ldr	r3, [r3, #16]
 802b504:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b508:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b50a:	04d9      	lsls	r1, r3, #19
 802b50c:	4b63      	ldr	r3, [pc, #396]	; (802b69c <USB_HC_StartXfer+0x280>)
 802b50e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b510:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802b512:	68bb      	ldr	r3, [r7, #8]
 802b514:	7a9b      	ldrb	r3, [r3, #10]
 802b516:	075b      	lsls	r3, r3, #29
 802b518:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b51c:	69f9      	ldr	r1, [r7, #28]
 802b51e:	0148      	lsls	r0, r1, #5
 802b520:	6a39      	ldr	r1, [r7, #32]
 802b522:	4401      	add	r1, r0
 802b524:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b528:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b52a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802b52c:	79fb      	ldrb	r3, [r7, #7]
 802b52e:	2b00      	cmp	r3, #0
 802b530:	d009      	beq.n	802b546 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802b532:	68bb      	ldr	r3, [r7, #8]
 802b534:	68d9      	ldr	r1, [r3, #12]
 802b536:	69fb      	ldr	r3, [r7, #28]
 802b538:	015a      	lsls	r2, r3, #5
 802b53a:	6a3b      	ldr	r3, [r7, #32]
 802b53c:	4413      	add	r3, r2
 802b53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b542:	460a      	mov	r2, r1
 802b544:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802b546:	6a3b      	ldr	r3, [r7, #32]
 802b548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b54c:	689b      	ldr	r3, [r3, #8]
 802b54e:	f003 0301 	and.w	r3, r3, #1
 802b552:	2b00      	cmp	r3, #0
 802b554:	bf0c      	ite	eq
 802b556:	2301      	moveq	r3, #1
 802b558:	2300      	movne	r3, #0
 802b55a:	b2db      	uxtb	r3, r3
 802b55c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802b55e:	69fb      	ldr	r3, [r7, #28]
 802b560:	015a      	lsls	r2, r3, #5
 802b562:	6a3b      	ldr	r3, [r7, #32]
 802b564:	4413      	add	r3, r2
 802b566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	69fa      	ldr	r2, [r7, #28]
 802b56e:	0151      	lsls	r1, r2, #5
 802b570:	6a3a      	ldr	r2, [r7, #32]
 802b572:	440a      	add	r2, r1
 802b574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b57c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802b57e:	69fb      	ldr	r3, [r7, #28]
 802b580:	015a      	lsls	r2, r3, #5
 802b582:	6a3b      	ldr	r3, [r7, #32]
 802b584:	4413      	add	r3, r2
 802b586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b58a:	681a      	ldr	r2, [r3, #0]
 802b58c:	7e7b      	ldrb	r3, [r7, #25]
 802b58e:	075b      	lsls	r3, r3, #29
 802b590:	69f9      	ldr	r1, [r7, #28]
 802b592:	0148      	lsls	r0, r1, #5
 802b594:	6a39      	ldr	r1, [r7, #32]
 802b596:	4401      	add	r1, r0
 802b598:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802b59c:	4313      	orrs	r3, r2
 802b59e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802b5a0:	69fb      	ldr	r3, [r7, #28]
 802b5a2:	015a      	lsls	r2, r3, #5
 802b5a4:	6a3b      	ldr	r3, [r7, #32]
 802b5a6:	4413      	add	r3, r2
 802b5a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5ac:	681b      	ldr	r3, [r3, #0]
 802b5ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b5b0:	693b      	ldr	r3, [r7, #16]
 802b5b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b5b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802b5b8:	68bb      	ldr	r3, [r7, #8]
 802b5ba:	78db      	ldrb	r3, [r3, #3]
 802b5bc:	2b00      	cmp	r3, #0
 802b5be:	d004      	beq.n	802b5ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802b5c0:	693b      	ldr	r3, [r7, #16]
 802b5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b5c6:	613b      	str	r3, [r7, #16]
 802b5c8:	e003      	b.n	802b5d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802b5ca:	693b      	ldr	r3, [r7, #16]
 802b5cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b5d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b5d2:	693b      	ldr	r3, [r7, #16]
 802b5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b5d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802b5da:	69fb      	ldr	r3, [r7, #28]
 802b5dc:	015a      	lsls	r2, r3, #5
 802b5de:	6a3b      	ldr	r3, [r7, #32]
 802b5e0:	4413      	add	r3, r2
 802b5e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b5e6:	461a      	mov	r2, r3
 802b5e8:	693b      	ldr	r3, [r7, #16]
 802b5ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802b5ec:	79fb      	ldrb	r3, [r7, #7]
 802b5ee:	2b00      	cmp	r3, #0
 802b5f0:	d001      	beq.n	802b5f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802b5f2:	2300      	movs	r3, #0
 802b5f4:	e04e      	b.n	802b694 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802b5f6:	68bb      	ldr	r3, [r7, #8]
 802b5f8:	78db      	ldrb	r3, [r3, #3]
 802b5fa:	2b00      	cmp	r3, #0
 802b5fc:	d149      	bne.n	802b692 <USB_HC_StartXfer+0x276>
 802b5fe:	68bb      	ldr	r3, [r7, #8]
 802b600:	695b      	ldr	r3, [r3, #20]
 802b602:	2b00      	cmp	r3, #0
 802b604:	d045      	beq.n	802b692 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802b606:	68bb      	ldr	r3, [r7, #8]
 802b608:	79db      	ldrb	r3, [r3, #7]
 802b60a:	2b03      	cmp	r3, #3
 802b60c:	d830      	bhi.n	802b670 <USB_HC_StartXfer+0x254>
 802b60e:	a201      	add	r2, pc, #4	; (adr r2, 802b614 <USB_HC_StartXfer+0x1f8>)
 802b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b614:	0802b625 	.word	0x0802b625
 802b618:	0802b649 	.word	0x0802b649
 802b61c:	0802b625 	.word	0x0802b625
 802b620:	0802b649 	.word	0x0802b649
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b624:	68bb      	ldr	r3, [r7, #8]
 802b626:	695b      	ldr	r3, [r3, #20]
 802b628:	3303      	adds	r3, #3
 802b62a:	089b      	lsrs	r3, r3, #2
 802b62c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802b62e:	8afa      	ldrh	r2, [r7, #22]
 802b630:	68fb      	ldr	r3, [r7, #12]
 802b632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b634:	b29b      	uxth	r3, r3
 802b636:	429a      	cmp	r2, r3
 802b638:	d91c      	bls.n	802b674 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802b63a:	68fb      	ldr	r3, [r7, #12]
 802b63c:	699b      	ldr	r3, [r3, #24]
 802b63e:	f043 0220 	orr.w	r2, r3, #32
 802b642:	68fb      	ldr	r3, [r7, #12]
 802b644:	619a      	str	r2, [r3, #24]
        }
        break;
 802b646:	e015      	b.n	802b674 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b648:	68bb      	ldr	r3, [r7, #8]
 802b64a:	695b      	ldr	r3, [r3, #20]
 802b64c:	3303      	adds	r3, #3
 802b64e:	089b      	lsrs	r3, r3, #2
 802b650:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802b652:	8afa      	ldrh	r2, [r7, #22]
 802b654:	6a3b      	ldr	r3, [r7, #32]
 802b656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b65a:	691b      	ldr	r3, [r3, #16]
 802b65c:	b29b      	uxth	r3, r3
 802b65e:	429a      	cmp	r2, r3
 802b660:	d90a      	bls.n	802b678 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802b662:	68fb      	ldr	r3, [r7, #12]
 802b664:	699b      	ldr	r3, [r3, #24]
 802b666:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802b66a:	68fb      	ldr	r3, [r7, #12]
 802b66c:	619a      	str	r2, [r3, #24]
        }
        break;
 802b66e:	e003      	b.n	802b678 <USB_HC_StartXfer+0x25c>

      default:
        break;
 802b670:	bf00      	nop
 802b672:	e002      	b.n	802b67a <USB_HC_StartXfer+0x25e>
        break;
 802b674:	bf00      	nop
 802b676:	e000      	b.n	802b67a <USB_HC_StartXfer+0x25e>
        break;
 802b678:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802b67a:	68bb      	ldr	r3, [r7, #8]
 802b67c:	68d9      	ldr	r1, [r3, #12]
 802b67e:	68bb      	ldr	r3, [r7, #8]
 802b680:	785a      	ldrb	r2, [r3, #1]
 802b682:	68bb      	ldr	r3, [r7, #8]
 802b684:	695b      	ldr	r3, [r3, #20]
 802b686:	b29b      	uxth	r3, r3
 802b688:	2000      	movs	r0, #0
 802b68a:	9000      	str	r0, [sp, #0]
 802b68c:	68f8      	ldr	r0, [r7, #12]
 802b68e:	f7ff fb31 	bl	802acf4 <USB_WritePacket>
  }

  return HAL_OK;
 802b692:	2300      	movs	r3, #0
}
 802b694:	4618      	mov	r0, r3
 802b696:	3728      	adds	r7, #40	; 0x28
 802b698:	46bd      	mov	sp, r7
 802b69a:	bd80      	pop	{r7, pc}
 802b69c:	1ff80000 	.word	0x1ff80000

0802b6a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802b6a0:	b480      	push	{r7}
 802b6a2:	b085      	sub	sp, #20
 802b6a4:	af00      	add	r7, sp, #0
 802b6a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6a8:	687b      	ldr	r3, [r7, #4]
 802b6aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802b6ac:	68fb      	ldr	r3, [r7, #12]
 802b6ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b6b2:	695b      	ldr	r3, [r3, #20]
 802b6b4:	b29b      	uxth	r3, r3
}
 802b6b6:	4618      	mov	r0, r3
 802b6b8:	3714      	adds	r7, #20
 802b6ba:	46bd      	mov	sp, r7
 802b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6c0:	4770      	bx	lr

0802b6c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802b6c2:	b480      	push	{r7}
 802b6c4:	b089      	sub	sp, #36	; 0x24
 802b6c6:	af00      	add	r7, sp, #0
 802b6c8:	6078      	str	r0, [r7, #4]
 802b6ca:	460b      	mov	r3, r1
 802b6cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b6ce:	687b      	ldr	r3, [r7, #4]
 802b6d0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802b6d2:	78fb      	ldrb	r3, [r7, #3]
 802b6d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802b6d6:	2300      	movs	r3, #0
 802b6d8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802b6da:	69bb      	ldr	r3, [r7, #24]
 802b6dc:	015a      	lsls	r2, r3, #5
 802b6de:	69fb      	ldr	r3, [r7, #28]
 802b6e0:	4413      	add	r3, r2
 802b6e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6e6:	681b      	ldr	r3, [r3, #0]
 802b6e8:	0c9b      	lsrs	r3, r3, #18
 802b6ea:	f003 0303 	and.w	r3, r3, #3
 802b6ee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802b6f0:	69bb      	ldr	r3, [r7, #24]
 802b6f2:	015a      	lsls	r2, r3, #5
 802b6f4:	69fb      	ldr	r3, [r7, #28]
 802b6f6:	4413      	add	r3, r2
 802b6f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6fc:	681b      	ldr	r3, [r3, #0]
 802b6fe:	0fdb      	lsrs	r3, r3, #31
 802b700:	f003 0301 	and.w	r3, r3, #1
 802b704:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802b706:	687b      	ldr	r3, [r7, #4]
 802b708:	689b      	ldr	r3, [r3, #8]
 802b70a:	f003 0320 	and.w	r3, r3, #32
 802b70e:	2b20      	cmp	r3, #32
 802b710:	d104      	bne.n	802b71c <USB_HC_Halt+0x5a>
 802b712:	693b      	ldr	r3, [r7, #16]
 802b714:	2b00      	cmp	r3, #0
 802b716:	d101      	bne.n	802b71c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802b718:	2300      	movs	r3, #0
 802b71a:	e0c8      	b.n	802b8ae <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802b71c:	697b      	ldr	r3, [r7, #20]
 802b71e:	2b00      	cmp	r3, #0
 802b720:	d002      	beq.n	802b728 <USB_HC_Halt+0x66>
 802b722:	697b      	ldr	r3, [r7, #20]
 802b724:	2b02      	cmp	r3, #2
 802b726:	d163      	bne.n	802b7f0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b728:	69bb      	ldr	r3, [r7, #24]
 802b72a:	015a      	lsls	r2, r3, #5
 802b72c:	69fb      	ldr	r3, [r7, #28]
 802b72e:	4413      	add	r3, r2
 802b730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b734:	681b      	ldr	r3, [r3, #0]
 802b736:	69ba      	ldr	r2, [r7, #24]
 802b738:	0151      	lsls	r1, r2, #5
 802b73a:	69fa      	ldr	r2, [r7, #28]
 802b73c:	440a      	add	r2, r1
 802b73e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b746:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b748:	687b      	ldr	r3, [r7, #4]
 802b74a:	689b      	ldr	r3, [r3, #8]
 802b74c:	f003 0320 	and.w	r3, r3, #32
 802b750:	2b00      	cmp	r3, #0
 802b752:	f040 80ab 	bne.w	802b8ac <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802b756:	687b      	ldr	r3, [r7, #4]
 802b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b75a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b75e:	2b00      	cmp	r3, #0
 802b760:	d133      	bne.n	802b7ca <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b762:	69bb      	ldr	r3, [r7, #24]
 802b764:	015a      	lsls	r2, r3, #5
 802b766:	69fb      	ldr	r3, [r7, #28]
 802b768:	4413      	add	r3, r2
 802b76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b76e:	681b      	ldr	r3, [r3, #0]
 802b770:	69ba      	ldr	r2, [r7, #24]
 802b772:	0151      	lsls	r1, r2, #5
 802b774:	69fa      	ldr	r2, [r7, #28]
 802b776:	440a      	add	r2, r1
 802b778:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b77c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b780:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b782:	69bb      	ldr	r3, [r7, #24]
 802b784:	015a      	lsls	r2, r3, #5
 802b786:	69fb      	ldr	r3, [r7, #28]
 802b788:	4413      	add	r3, r2
 802b78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b78e:	681b      	ldr	r3, [r3, #0]
 802b790:	69ba      	ldr	r2, [r7, #24]
 802b792:	0151      	lsls	r1, r2, #5
 802b794:	69fa      	ldr	r2, [r7, #28]
 802b796:	440a      	add	r2, r1
 802b798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b79c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7a0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802b7a2:	68fb      	ldr	r3, [r7, #12]
 802b7a4:	3301      	adds	r3, #1
 802b7a6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802b7a8:	68fb      	ldr	r3, [r7, #12]
 802b7aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b7ae:	d81d      	bhi.n	802b7ec <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b7b0:	69bb      	ldr	r3, [r7, #24]
 802b7b2:	015a      	lsls	r2, r3, #5
 802b7b4:	69fb      	ldr	r3, [r7, #28]
 802b7b6:	4413      	add	r3, r2
 802b7b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7bc:	681b      	ldr	r3, [r3, #0]
 802b7be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b7c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b7c6:	d0ec      	beq.n	802b7a2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7c8:	e070      	b.n	802b8ac <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b7ca:	69bb      	ldr	r3, [r7, #24]
 802b7cc:	015a      	lsls	r2, r3, #5
 802b7ce:	69fb      	ldr	r3, [r7, #28]
 802b7d0:	4413      	add	r3, r2
 802b7d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7d6:	681b      	ldr	r3, [r3, #0]
 802b7d8:	69ba      	ldr	r2, [r7, #24]
 802b7da:	0151      	lsls	r1, r2, #5
 802b7dc:	69fa      	ldr	r2, [r7, #28]
 802b7de:	440a      	add	r2, r1
 802b7e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b7e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7e8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7ea:	e05f      	b.n	802b8ac <USB_HC_Halt+0x1ea>
            break;
 802b7ec:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b7ee:	e05d      	b.n	802b8ac <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b7f0:	69bb      	ldr	r3, [r7, #24]
 802b7f2:	015a      	lsls	r2, r3, #5
 802b7f4:	69fb      	ldr	r3, [r7, #28]
 802b7f6:	4413      	add	r3, r2
 802b7f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7fc:	681b      	ldr	r3, [r3, #0]
 802b7fe:	69ba      	ldr	r2, [r7, #24]
 802b800:	0151      	lsls	r1, r2, #5
 802b802:	69fa      	ldr	r2, [r7, #28]
 802b804:	440a      	add	r2, r1
 802b806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b80a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b80e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802b810:	69fb      	ldr	r3, [r7, #28]
 802b812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b816:	691b      	ldr	r3, [r3, #16]
 802b818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b81c:	2b00      	cmp	r3, #0
 802b81e:	d133      	bne.n	802b888 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b820:	69bb      	ldr	r3, [r7, #24]
 802b822:	015a      	lsls	r2, r3, #5
 802b824:	69fb      	ldr	r3, [r7, #28]
 802b826:	4413      	add	r3, r2
 802b828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b82c:	681b      	ldr	r3, [r3, #0]
 802b82e:	69ba      	ldr	r2, [r7, #24]
 802b830:	0151      	lsls	r1, r2, #5
 802b832:	69fa      	ldr	r2, [r7, #28]
 802b834:	440a      	add	r2, r1
 802b836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b83a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b83e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b840:	69bb      	ldr	r3, [r7, #24]
 802b842:	015a      	lsls	r2, r3, #5
 802b844:	69fb      	ldr	r3, [r7, #28]
 802b846:	4413      	add	r3, r2
 802b848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b84c:	681b      	ldr	r3, [r3, #0]
 802b84e:	69ba      	ldr	r2, [r7, #24]
 802b850:	0151      	lsls	r1, r2, #5
 802b852:	69fa      	ldr	r2, [r7, #28]
 802b854:	440a      	add	r2, r1
 802b856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b85a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b85e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802b860:	68fb      	ldr	r3, [r7, #12]
 802b862:	3301      	adds	r3, #1
 802b864:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802b866:	68fb      	ldr	r3, [r7, #12]
 802b868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b86c:	d81d      	bhi.n	802b8aa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b86e:	69bb      	ldr	r3, [r7, #24]
 802b870:	015a      	lsls	r2, r3, #5
 802b872:	69fb      	ldr	r3, [r7, #28]
 802b874:	4413      	add	r3, r2
 802b876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b87a:	681b      	ldr	r3, [r3, #0]
 802b87c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b884:	d0ec      	beq.n	802b860 <USB_HC_Halt+0x19e>
 802b886:	e011      	b.n	802b8ac <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b888:	69bb      	ldr	r3, [r7, #24]
 802b88a:	015a      	lsls	r2, r3, #5
 802b88c:	69fb      	ldr	r3, [r7, #28]
 802b88e:	4413      	add	r3, r2
 802b890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b894:	681b      	ldr	r3, [r3, #0]
 802b896:	69ba      	ldr	r2, [r7, #24]
 802b898:	0151      	lsls	r1, r2, #5
 802b89a:	69fa      	ldr	r2, [r7, #28]
 802b89c:	440a      	add	r2, r1
 802b89e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b8a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b8a6:	6013      	str	r3, [r2, #0]
 802b8a8:	e000      	b.n	802b8ac <USB_HC_Halt+0x1ea>
          break;
 802b8aa:	bf00      	nop
    }
  }

  return HAL_OK;
 802b8ac:	2300      	movs	r3, #0
}
 802b8ae:	4618      	mov	r0, r3
 802b8b0:	3724      	adds	r7, #36	; 0x24
 802b8b2:	46bd      	mov	sp, r7
 802b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b8b8:	4770      	bx	lr
	...

0802b8bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802b8bc:	b480      	push	{r7}
 802b8be:	b087      	sub	sp, #28
 802b8c0:	af00      	add	r7, sp, #0
 802b8c2:	6078      	str	r0, [r7, #4]
 802b8c4:	460b      	mov	r3, r1
 802b8c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b8c8:	687b      	ldr	r3, [r7, #4]
 802b8ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802b8cc:	78fb      	ldrb	r3, [r7, #3]
 802b8ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802b8d0:	2301      	movs	r3, #1
 802b8d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b8d4:	68fb      	ldr	r3, [r7, #12]
 802b8d6:	04da      	lsls	r2, r3, #19
 802b8d8:	4b15      	ldr	r3, [pc, #84]	; (802b930 <USB_DoPing+0x74>)
 802b8da:	4013      	ands	r3, r2
 802b8dc:	693a      	ldr	r2, [r7, #16]
 802b8de:	0151      	lsls	r1, r2, #5
 802b8e0:	697a      	ldr	r2, [r7, #20]
 802b8e2:	440a      	add	r2, r1
 802b8e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b8e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b8ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802b8ee:	693b      	ldr	r3, [r7, #16]
 802b8f0:	015a      	lsls	r2, r3, #5
 802b8f2:	697b      	ldr	r3, [r7, #20]
 802b8f4:	4413      	add	r3, r2
 802b8f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b8fa:	681b      	ldr	r3, [r3, #0]
 802b8fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b8fe:	68bb      	ldr	r3, [r7, #8]
 802b900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b904:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b906:	68bb      	ldr	r3, [r7, #8]
 802b908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b90c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802b90e:	693b      	ldr	r3, [r7, #16]
 802b910:	015a      	lsls	r2, r3, #5
 802b912:	697b      	ldr	r3, [r7, #20]
 802b914:	4413      	add	r3, r2
 802b916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b91a:	461a      	mov	r2, r3
 802b91c:	68bb      	ldr	r3, [r7, #8]
 802b91e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802b920:	2300      	movs	r3, #0
}
 802b922:	4618      	mov	r0, r3
 802b924:	371c      	adds	r7, #28
 802b926:	46bd      	mov	sp, r7
 802b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b92c:	4770      	bx	lr
 802b92e:	bf00      	nop
 802b930:	1ff80000 	.word	0x1ff80000

0802b934 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802b934:	b580      	push	{r7, lr}
 802b936:	b088      	sub	sp, #32
 802b938:	af00      	add	r7, sp, #0
 802b93a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802b93c:	2300      	movs	r3, #0
 802b93e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b940:	687b      	ldr	r3, [r7, #4]
 802b942:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802b944:	2300      	movs	r3, #0
 802b946:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802b948:	6878      	ldr	r0, [r7, #4]
 802b94a:	f7ff f911 	bl	802ab70 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802b94e:	2110      	movs	r1, #16
 802b950:	6878      	ldr	r0, [r7, #4]
 802b952:	f7ff f96b 	bl	802ac2c <USB_FlushTxFifo>
 802b956:	4603      	mov	r3, r0
 802b958:	2b00      	cmp	r3, #0
 802b95a:	d001      	beq.n	802b960 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802b95c:	2301      	movs	r3, #1
 802b95e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802b960:	6878      	ldr	r0, [r7, #4]
 802b962:	f7ff f997 	bl	802ac94 <USB_FlushRxFifo>
 802b966:	4603      	mov	r3, r0
 802b968:	2b00      	cmp	r3, #0
 802b96a:	d001      	beq.n	802b970 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802b96c:	2301      	movs	r3, #1
 802b96e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802b970:	2300      	movs	r3, #0
 802b972:	61bb      	str	r3, [r7, #24]
 802b974:	e01f      	b.n	802b9b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802b976:	69bb      	ldr	r3, [r7, #24]
 802b978:	015a      	lsls	r2, r3, #5
 802b97a:	697b      	ldr	r3, [r7, #20]
 802b97c:	4413      	add	r3, r2
 802b97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b982:	681b      	ldr	r3, [r3, #0]
 802b984:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802b986:	693b      	ldr	r3, [r7, #16]
 802b988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b98c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b98e:	693b      	ldr	r3, [r7, #16]
 802b990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b994:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b996:	693b      	ldr	r3, [r7, #16]
 802b998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b99c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b99e:	69bb      	ldr	r3, [r7, #24]
 802b9a0:	015a      	lsls	r2, r3, #5
 802b9a2:	697b      	ldr	r3, [r7, #20]
 802b9a4:	4413      	add	r3, r2
 802b9a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9aa:	461a      	mov	r2, r3
 802b9ac:	693b      	ldr	r3, [r7, #16]
 802b9ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b9b0:	69bb      	ldr	r3, [r7, #24]
 802b9b2:	3301      	adds	r3, #1
 802b9b4:	61bb      	str	r3, [r7, #24]
 802b9b6:	69bb      	ldr	r3, [r7, #24]
 802b9b8:	2b0f      	cmp	r3, #15
 802b9ba:	d9dc      	bls.n	802b976 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b9bc:	2300      	movs	r3, #0
 802b9be:	61bb      	str	r3, [r7, #24]
 802b9c0:	e034      	b.n	802ba2c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b9c2:	69bb      	ldr	r3, [r7, #24]
 802b9c4:	015a      	lsls	r2, r3, #5
 802b9c6:	697b      	ldr	r3, [r7, #20]
 802b9c8:	4413      	add	r3, r2
 802b9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9ce:	681b      	ldr	r3, [r3, #0]
 802b9d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b9d2:	693b      	ldr	r3, [r7, #16]
 802b9d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b9d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b9da:	693b      	ldr	r3, [r7, #16]
 802b9dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b9e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b9e2:	693b      	ldr	r3, [r7, #16]
 802b9e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b9e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b9ea:	69bb      	ldr	r3, [r7, #24]
 802b9ec:	015a      	lsls	r2, r3, #5
 802b9ee:	697b      	ldr	r3, [r7, #20]
 802b9f0:	4413      	add	r3, r2
 802b9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b9f6:	461a      	mov	r2, r3
 802b9f8:	693b      	ldr	r3, [r7, #16]
 802b9fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802b9fc:	68fb      	ldr	r3, [r7, #12]
 802b9fe:	3301      	adds	r3, #1
 802ba00:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802ba02:	68fb      	ldr	r3, [r7, #12]
 802ba04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802ba08:	d80c      	bhi.n	802ba24 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802ba0a:	69bb      	ldr	r3, [r7, #24]
 802ba0c:	015a      	lsls	r2, r3, #5
 802ba0e:	697b      	ldr	r3, [r7, #20]
 802ba10:	4413      	add	r3, r2
 802ba12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802ba16:	681b      	ldr	r3, [r3, #0]
 802ba18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802ba1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802ba20:	d0ec      	beq.n	802b9fc <USB_StopHost+0xc8>
 802ba22:	e000      	b.n	802ba26 <USB_StopHost+0xf2>
        break;
 802ba24:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802ba26:	69bb      	ldr	r3, [r7, #24]
 802ba28:	3301      	adds	r3, #1
 802ba2a:	61bb      	str	r3, [r7, #24]
 802ba2c:	69bb      	ldr	r3, [r7, #24]
 802ba2e:	2b0f      	cmp	r3, #15
 802ba30:	d9c7      	bls.n	802b9c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802ba32:	697b      	ldr	r3, [r7, #20]
 802ba34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ba38:	461a      	mov	r2, r3
 802ba3a:	f04f 33ff 	mov.w	r3, #4294967295
 802ba3e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802ba40:	687b      	ldr	r3, [r7, #4]
 802ba42:	f04f 32ff 	mov.w	r2, #4294967295
 802ba46:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802ba48:	6878      	ldr	r0, [r7, #4]
 802ba4a:	f7ff f880 	bl	802ab4e <USB_EnableGlobalInt>

  return ret;
 802ba4e:	7ffb      	ldrb	r3, [r7, #31]
}
 802ba50:	4618      	mov	r0, r3
 802ba52:	3720      	adds	r7, #32
 802ba54:	46bd      	mov	sp, r7
 802ba56:	bd80      	pop	{r7, pc}

0802ba58 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802ba58:	b590      	push	{r4, r7, lr}
 802ba5a:	b089      	sub	sp, #36	; 0x24
 802ba5c:	af04      	add	r7, sp, #16
 802ba5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802ba60:	2301      	movs	r3, #1
 802ba62:	2202      	movs	r2, #2
 802ba64:	2102      	movs	r1, #2
 802ba66:	6878      	ldr	r0, [r7, #4]
 802ba68:	f000 fc66 	bl	802c338 <USBH_FindInterface>
 802ba6c:	4603      	mov	r3, r0
 802ba6e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ba70:	7bfb      	ldrb	r3, [r7, #15]
 802ba72:	2bff      	cmp	r3, #255	; 0xff
 802ba74:	d002      	beq.n	802ba7c <USBH_CDC_InterfaceInit+0x24>
 802ba76:	7bfb      	ldrb	r3, [r7, #15]
 802ba78:	2b01      	cmp	r3, #1
 802ba7a:	d901      	bls.n	802ba80 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802ba7c:	2302      	movs	r3, #2
 802ba7e:	e13d      	b.n	802bcfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802ba80:	7bfb      	ldrb	r3, [r7, #15]
 802ba82:	4619      	mov	r1, r3
 802ba84:	6878      	ldr	r0, [r7, #4]
 802ba86:	f000 fc3b 	bl	802c300 <USBH_SelectInterface>
 802ba8a:	4603      	mov	r3, r0
 802ba8c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802ba8e:	7bbb      	ldrb	r3, [r7, #14]
 802ba90:	2b00      	cmp	r3, #0
 802ba92:	d001      	beq.n	802ba98 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802ba94:	2302      	movs	r3, #2
 802ba96:	e131      	b.n	802bcfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802ba98:	687b      	ldr	r3, [r7, #4]
 802ba9a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802ba9e:	2050      	movs	r0, #80	; 0x50
 802baa0:	f002 fb00 	bl	802e0a4 <malloc>
 802baa4:	4603      	mov	r3, r0
 802baa6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802baa8:	687b      	ldr	r3, [r7, #4]
 802baaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802baae:	69db      	ldr	r3, [r3, #28]
 802bab0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802bab2:	68bb      	ldr	r3, [r7, #8]
 802bab4:	2b00      	cmp	r3, #0
 802bab6:	d101      	bne.n	802babc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802bab8:	2302      	movs	r3, #2
 802baba:	e11f      	b.n	802bcfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802babc:	2250      	movs	r2, #80	; 0x50
 802babe:	2100      	movs	r1, #0
 802bac0:	68b8      	ldr	r0, [r7, #8]
 802bac2:	f002 faff 	bl	802e0c4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802bac6:	7bfb      	ldrb	r3, [r7, #15]
 802bac8:	687a      	ldr	r2, [r7, #4]
 802baca:	211a      	movs	r1, #26
 802bacc:	fb01 f303 	mul.w	r3, r1, r3
 802bad0:	4413      	add	r3, r2
 802bad2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bad6:	781b      	ldrb	r3, [r3, #0]
 802bad8:	b25b      	sxtb	r3, r3
 802bada:	2b00      	cmp	r3, #0
 802badc:	da15      	bge.n	802bb0a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bade:	7bfb      	ldrb	r3, [r7, #15]
 802bae0:	687a      	ldr	r2, [r7, #4]
 802bae2:	211a      	movs	r1, #26
 802bae4:	fb01 f303 	mul.w	r3, r1, r3
 802bae8:	4413      	add	r3, r2
 802baea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802baee:	781a      	ldrb	r2, [r3, #0]
 802baf0:	68bb      	ldr	r3, [r7, #8]
 802baf2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802baf4:	7bfb      	ldrb	r3, [r7, #15]
 802baf6:	687a      	ldr	r2, [r7, #4]
 802baf8:	211a      	movs	r1, #26
 802bafa:	fb01 f303 	mul.w	r3, r1, r3
 802bafe:	4413      	add	r3, r2
 802bb00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bb04:	881a      	ldrh	r2, [r3, #0]
 802bb06:	68bb      	ldr	r3, [r7, #8]
 802bb08:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802bb0a:	68bb      	ldr	r3, [r7, #8]
 802bb0c:	785b      	ldrb	r3, [r3, #1]
 802bb0e:	4619      	mov	r1, r3
 802bb10:	6878      	ldr	r0, [r7, #4]
 802bb12:	f001 ff2c 	bl	802d96e <USBH_AllocPipe>
 802bb16:	4603      	mov	r3, r0
 802bb18:	461a      	mov	r2, r3
 802bb1a:	68bb      	ldr	r3, [r7, #8]
 802bb1c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802bb1e:	68bb      	ldr	r3, [r7, #8]
 802bb20:	7819      	ldrb	r1, [r3, #0]
 802bb22:	68bb      	ldr	r3, [r7, #8]
 802bb24:	7858      	ldrb	r0, [r3, #1]
 802bb26:	687b      	ldr	r3, [r7, #4]
 802bb28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bb2c:	687b      	ldr	r3, [r7, #4]
 802bb2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bb32:	68ba      	ldr	r2, [r7, #8]
 802bb34:	8952      	ldrh	r2, [r2, #10]
 802bb36:	9202      	str	r2, [sp, #8]
 802bb38:	2203      	movs	r2, #3
 802bb3a:	9201      	str	r2, [sp, #4]
 802bb3c:	9300      	str	r3, [sp, #0]
 802bb3e:	4623      	mov	r3, r4
 802bb40:	4602      	mov	r2, r0
 802bb42:	6878      	ldr	r0, [r7, #4]
 802bb44:	f001 fee4 	bl	802d910 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802bb48:	68bb      	ldr	r3, [r7, #8]
 802bb4a:	781b      	ldrb	r3, [r3, #0]
 802bb4c:	2200      	movs	r2, #0
 802bb4e:	4619      	mov	r1, r3
 802bb50:	6878      	ldr	r0, [r7, #4]
 802bb52:	f002 f9f9 	bl	802df48 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802bb56:	2300      	movs	r3, #0
 802bb58:	2200      	movs	r2, #0
 802bb5a:	210a      	movs	r1, #10
 802bb5c:	6878      	ldr	r0, [r7, #4]
 802bb5e:	f000 fbeb 	bl	802c338 <USBH_FindInterface>
 802bb62:	4603      	mov	r3, r0
 802bb64:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802bb66:	7bfb      	ldrb	r3, [r7, #15]
 802bb68:	2bff      	cmp	r3, #255	; 0xff
 802bb6a:	d002      	beq.n	802bb72 <USBH_CDC_InterfaceInit+0x11a>
 802bb6c:	7bfb      	ldrb	r3, [r7, #15]
 802bb6e:	2b01      	cmp	r3, #1
 802bb70:	d901      	bls.n	802bb76 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802bb72:	2302      	movs	r3, #2
 802bb74:	e0c2      	b.n	802bcfc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802bb76:	7bfb      	ldrb	r3, [r7, #15]
 802bb78:	687a      	ldr	r2, [r7, #4]
 802bb7a:	211a      	movs	r1, #26
 802bb7c:	fb01 f303 	mul.w	r3, r1, r3
 802bb80:	4413      	add	r3, r2
 802bb82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bb86:	781b      	ldrb	r3, [r3, #0]
 802bb88:	b25b      	sxtb	r3, r3
 802bb8a:	2b00      	cmp	r3, #0
 802bb8c:	da16      	bge.n	802bbbc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bb8e:	7bfb      	ldrb	r3, [r7, #15]
 802bb90:	687a      	ldr	r2, [r7, #4]
 802bb92:	211a      	movs	r1, #26
 802bb94:	fb01 f303 	mul.w	r3, r1, r3
 802bb98:	4413      	add	r3, r2
 802bb9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bb9e:	781a      	ldrb	r2, [r3, #0]
 802bba0:	68bb      	ldr	r3, [r7, #8]
 802bba2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bba4:	7bfb      	ldrb	r3, [r7, #15]
 802bba6:	687a      	ldr	r2, [r7, #4]
 802bba8:	211a      	movs	r1, #26
 802bbaa:	fb01 f303 	mul.w	r3, r1, r3
 802bbae:	4413      	add	r3, r2
 802bbb0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbb4:	881a      	ldrh	r2, [r3, #0]
 802bbb6:	68bb      	ldr	r3, [r7, #8]
 802bbb8:	835a      	strh	r2, [r3, #26]
 802bbba:	e015      	b.n	802bbe8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bbbc:	7bfb      	ldrb	r3, [r7, #15]
 802bbbe:	687a      	ldr	r2, [r7, #4]
 802bbc0:	211a      	movs	r1, #26
 802bbc2:	fb01 f303 	mul.w	r3, r1, r3
 802bbc6:	4413      	add	r3, r2
 802bbc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bbcc:	781a      	ldrb	r2, [r3, #0]
 802bbce:	68bb      	ldr	r3, [r7, #8]
 802bbd0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bbd2:	7bfb      	ldrb	r3, [r7, #15]
 802bbd4:	687a      	ldr	r2, [r7, #4]
 802bbd6:	211a      	movs	r1, #26
 802bbd8:	fb01 f303 	mul.w	r3, r1, r3
 802bbdc:	4413      	add	r3, r2
 802bbde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bbe2:	881a      	ldrh	r2, [r3, #0]
 802bbe4:	68bb      	ldr	r3, [r7, #8]
 802bbe6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802bbe8:	7bfb      	ldrb	r3, [r7, #15]
 802bbea:	687a      	ldr	r2, [r7, #4]
 802bbec:	211a      	movs	r1, #26
 802bbee:	fb01 f303 	mul.w	r3, r1, r3
 802bbf2:	4413      	add	r3, r2
 802bbf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bbf8:	781b      	ldrb	r3, [r3, #0]
 802bbfa:	b25b      	sxtb	r3, r3
 802bbfc:	2b00      	cmp	r3, #0
 802bbfe:	da16      	bge.n	802bc2e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc00:	7bfb      	ldrb	r3, [r7, #15]
 802bc02:	687a      	ldr	r2, [r7, #4]
 802bc04:	211a      	movs	r1, #26
 802bc06:	fb01 f303 	mul.w	r3, r1, r3
 802bc0a:	4413      	add	r3, r2
 802bc0c:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc10:	781a      	ldrb	r2, [r3, #0]
 802bc12:	68bb      	ldr	r3, [r7, #8]
 802bc14:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc16:	7bfb      	ldrb	r3, [r7, #15]
 802bc18:	687a      	ldr	r2, [r7, #4]
 802bc1a:	211a      	movs	r1, #26
 802bc1c:	fb01 f303 	mul.w	r3, r1, r3
 802bc20:	4413      	add	r3, r2
 802bc22:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc26:	881a      	ldrh	r2, [r3, #0]
 802bc28:	68bb      	ldr	r3, [r7, #8]
 802bc2a:	835a      	strh	r2, [r3, #26]
 802bc2c:	e015      	b.n	802bc5a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bc2e:	7bfb      	ldrb	r3, [r7, #15]
 802bc30:	687a      	ldr	r2, [r7, #4]
 802bc32:	211a      	movs	r1, #26
 802bc34:	fb01 f303 	mul.w	r3, r1, r3
 802bc38:	4413      	add	r3, r2
 802bc3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bc3e:	781a      	ldrb	r2, [r3, #0]
 802bc40:	68bb      	ldr	r3, [r7, #8]
 802bc42:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bc44:	7bfb      	ldrb	r3, [r7, #15]
 802bc46:	687a      	ldr	r2, [r7, #4]
 802bc48:	211a      	movs	r1, #26
 802bc4a:	fb01 f303 	mul.w	r3, r1, r3
 802bc4e:	4413      	add	r3, r2
 802bc50:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bc54:	881a      	ldrh	r2, [r3, #0]
 802bc56:	68bb      	ldr	r3, [r7, #8]
 802bc58:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802bc5a:	68bb      	ldr	r3, [r7, #8]
 802bc5c:	7b9b      	ldrb	r3, [r3, #14]
 802bc5e:	4619      	mov	r1, r3
 802bc60:	6878      	ldr	r0, [r7, #4]
 802bc62:	f001 fe84 	bl	802d96e <USBH_AllocPipe>
 802bc66:	4603      	mov	r3, r0
 802bc68:	461a      	mov	r2, r3
 802bc6a:	68bb      	ldr	r3, [r7, #8]
 802bc6c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802bc6e:	68bb      	ldr	r3, [r7, #8]
 802bc70:	7bdb      	ldrb	r3, [r3, #15]
 802bc72:	4619      	mov	r1, r3
 802bc74:	6878      	ldr	r0, [r7, #4]
 802bc76:	f001 fe7a 	bl	802d96e <USBH_AllocPipe>
 802bc7a:	4603      	mov	r3, r0
 802bc7c:	461a      	mov	r2, r3
 802bc7e:	68bb      	ldr	r3, [r7, #8]
 802bc80:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802bc82:	68bb      	ldr	r3, [r7, #8]
 802bc84:	7b59      	ldrb	r1, [r3, #13]
 802bc86:	68bb      	ldr	r3, [r7, #8]
 802bc88:	7b98      	ldrb	r0, [r3, #14]
 802bc8a:	687b      	ldr	r3, [r7, #4]
 802bc8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bc90:	687b      	ldr	r3, [r7, #4]
 802bc92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bc96:	68ba      	ldr	r2, [r7, #8]
 802bc98:	8b12      	ldrh	r2, [r2, #24]
 802bc9a:	9202      	str	r2, [sp, #8]
 802bc9c:	2202      	movs	r2, #2
 802bc9e:	9201      	str	r2, [sp, #4]
 802bca0:	9300      	str	r3, [sp, #0]
 802bca2:	4623      	mov	r3, r4
 802bca4:	4602      	mov	r2, r0
 802bca6:	6878      	ldr	r0, [r7, #4]
 802bca8:	f001 fe32 	bl	802d910 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802bcac:	68bb      	ldr	r3, [r7, #8]
 802bcae:	7b19      	ldrb	r1, [r3, #12]
 802bcb0:	68bb      	ldr	r3, [r7, #8]
 802bcb2:	7bd8      	ldrb	r0, [r3, #15]
 802bcb4:	687b      	ldr	r3, [r7, #4]
 802bcb6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bcba:	687b      	ldr	r3, [r7, #4]
 802bcbc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bcc0:	68ba      	ldr	r2, [r7, #8]
 802bcc2:	8b52      	ldrh	r2, [r2, #26]
 802bcc4:	9202      	str	r2, [sp, #8]
 802bcc6:	2202      	movs	r2, #2
 802bcc8:	9201      	str	r2, [sp, #4]
 802bcca:	9300      	str	r3, [sp, #0]
 802bccc:	4623      	mov	r3, r4
 802bcce:	4602      	mov	r2, r0
 802bcd0:	6878      	ldr	r0, [r7, #4]
 802bcd2:	f001 fe1d 	bl	802d910 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802bcd6:	68bb      	ldr	r3, [r7, #8]
 802bcd8:	2200      	movs	r2, #0
 802bcda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802bcde:	68bb      	ldr	r3, [r7, #8]
 802bce0:	7b5b      	ldrb	r3, [r3, #13]
 802bce2:	2200      	movs	r2, #0
 802bce4:	4619      	mov	r1, r3
 802bce6:	6878      	ldr	r0, [r7, #4]
 802bce8:	f002 f92e 	bl	802df48 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802bcec:	68bb      	ldr	r3, [r7, #8]
 802bcee:	7b1b      	ldrb	r3, [r3, #12]
 802bcf0:	2200      	movs	r2, #0
 802bcf2:	4619      	mov	r1, r3
 802bcf4:	6878      	ldr	r0, [r7, #4]
 802bcf6:	f002 f927 	bl	802df48 <USBH_LL_SetToggle>

  return USBH_OK;
 802bcfa:	2300      	movs	r3, #0
}
 802bcfc:	4618      	mov	r0, r3
 802bcfe:	3714      	adds	r7, #20
 802bd00:	46bd      	mov	sp, r7
 802bd02:	bd90      	pop	{r4, r7, pc}

0802bd04 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802bd04:	b580      	push	{r7, lr}
 802bd06:	b084      	sub	sp, #16
 802bd08:	af00      	add	r7, sp, #0
 802bd0a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bd0c:	687b      	ldr	r3, [r7, #4]
 802bd0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd12:	69db      	ldr	r3, [r3, #28]
 802bd14:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802bd16:	68fb      	ldr	r3, [r7, #12]
 802bd18:	781b      	ldrb	r3, [r3, #0]
 802bd1a:	2b00      	cmp	r3, #0
 802bd1c:	d00e      	beq.n	802bd3c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd1e:	68fb      	ldr	r3, [r7, #12]
 802bd20:	781b      	ldrb	r3, [r3, #0]
 802bd22:	4619      	mov	r1, r3
 802bd24:	6878      	ldr	r0, [r7, #4]
 802bd26:	f001 fe12 	bl	802d94e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bd2a:	68fb      	ldr	r3, [r7, #12]
 802bd2c:	781b      	ldrb	r3, [r3, #0]
 802bd2e:	4619      	mov	r1, r3
 802bd30:	6878      	ldr	r0, [r7, #4]
 802bd32:	f001 fe3d 	bl	802d9b0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802bd36:	68fb      	ldr	r3, [r7, #12]
 802bd38:	2200      	movs	r2, #0
 802bd3a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802bd3c:	68fb      	ldr	r3, [r7, #12]
 802bd3e:	7b1b      	ldrb	r3, [r3, #12]
 802bd40:	2b00      	cmp	r3, #0
 802bd42:	d00e      	beq.n	802bd62 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd44:	68fb      	ldr	r3, [r7, #12]
 802bd46:	7b1b      	ldrb	r3, [r3, #12]
 802bd48:	4619      	mov	r1, r3
 802bd4a:	6878      	ldr	r0, [r7, #4]
 802bd4c:	f001 fdff 	bl	802d94e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802bd50:	68fb      	ldr	r3, [r7, #12]
 802bd52:	7b1b      	ldrb	r3, [r3, #12]
 802bd54:	4619      	mov	r1, r3
 802bd56:	6878      	ldr	r0, [r7, #4]
 802bd58:	f001 fe2a 	bl	802d9b0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802bd5c:	68fb      	ldr	r3, [r7, #12]
 802bd5e:	2200      	movs	r2, #0
 802bd60:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802bd62:	68fb      	ldr	r3, [r7, #12]
 802bd64:	7b5b      	ldrb	r3, [r3, #13]
 802bd66:	2b00      	cmp	r3, #0
 802bd68:	d00e      	beq.n	802bd88 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd6a:	68fb      	ldr	r3, [r7, #12]
 802bd6c:	7b5b      	ldrb	r3, [r3, #13]
 802bd6e:	4619      	mov	r1, r3
 802bd70:	6878      	ldr	r0, [r7, #4]
 802bd72:	f001 fdec 	bl	802d94e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bd76:	68fb      	ldr	r3, [r7, #12]
 802bd78:	7b5b      	ldrb	r3, [r3, #13]
 802bd7a:	4619      	mov	r1, r3
 802bd7c:	6878      	ldr	r0, [r7, #4]
 802bd7e:	f001 fe17 	bl	802d9b0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802bd82:	68fb      	ldr	r3, [r7, #12]
 802bd84:	2200      	movs	r2, #0
 802bd86:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802bd88:	687b      	ldr	r3, [r7, #4]
 802bd8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd8e:	69db      	ldr	r3, [r3, #28]
 802bd90:	2b00      	cmp	r3, #0
 802bd92:	d00b      	beq.n	802bdac <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802bd94:	687b      	ldr	r3, [r7, #4]
 802bd96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd9a:	69db      	ldr	r3, [r3, #28]
 802bd9c:	4618      	mov	r0, r3
 802bd9e:	f002 f989 	bl	802e0b4 <free>
    phost->pActiveClass->pData = 0U;
 802bda2:	687b      	ldr	r3, [r7, #4]
 802bda4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bda8:	2200      	movs	r2, #0
 802bdaa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802bdac:	2300      	movs	r3, #0
}
 802bdae:	4618      	mov	r0, r3
 802bdb0:	3710      	adds	r7, #16
 802bdb2:	46bd      	mov	sp, r7
 802bdb4:	bd80      	pop	{r7, pc}

0802bdb6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802bdb6:	b580      	push	{r7, lr}
 802bdb8:	b084      	sub	sp, #16
 802bdba:	af00      	add	r7, sp, #0
 802bdbc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bdbe:	687b      	ldr	r3, [r7, #4]
 802bdc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bdc4:	69db      	ldr	r3, [r3, #28]
 802bdc6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802bdc8:	68fb      	ldr	r3, [r7, #12]
 802bdca:	3340      	adds	r3, #64	; 0x40
 802bdcc:	4619      	mov	r1, r3
 802bdce:	6878      	ldr	r0, [r7, #4]
 802bdd0:	f000 f8b1 	bl	802bf36 <GetLineCoding>
 802bdd4:	4603      	mov	r3, r0
 802bdd6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802bdd8:	7afb      	ldrb	r3, [r7, #11]
 802bdda:	2b00      	cmp	r3, #0
 802bddc:	d105      	bne.n	802bdea <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802bdde:	687b      	ldr	r3, [r7, #4]
 802bde0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bde4:	2102      	movs	r1, #2
 802bde6:	6878      	ldr	r0, [r7, #4]
 802bde8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802bdea:	7afb      	ldrb	r3, [r7, #11]
}
 802bdec:	4618      	mov	r0, r3
 802bdee:	3710      	adds	r7, #16
 802bdf0:	46bd      	mov	sp, r7
 802bdf2:	bd80      	pop	{r7, pc}

0802bdf4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802bdf4:	b580      	push	{r7, lr}
 802bdf6:	b084      	sub	sp, #16
 802bdf8:	af00      	add	r7, sp, #0
 802bdfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802bdfc:	2301      	movs	r3, #1
 802bdfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802be00:	2300      	movs	r3, #0
 802be02:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802be04:	687b      	ldr	r3, [r7, #4]
 802be06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802be0a:	69db      	ldr	r3, [r3, #28]
 802be0c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802be0e:	68bb      	ldr	r3, [r7, #8]
 802be10:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802be14:	2b04      	cmp	r3, #4
 802be16:	d877      	bhi.n	802bf08 <USBH_CDC_Process+0x114>
 802be18:	a201      	add	r2, pc, #4	; (adr r2, 802be20 <USBH_CDC_Process+0x2c>)
 802be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802be1e:	bf00      	nop
 802be20:	0802be35 	.word	0x0802be35
 802be24:	0802be3b 	.word	0x0802be3b
 802be28:	0802be6b 	.word	0x0802be6b
 802be2c:	0802bedf 	.word	0x0802bedf
 802be30:	0802beed 	.word	0x0802beed
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802be34:	2300      	movs	r3, #0
 802be36:	73fb      	strb	r3, [r7, #15]
      break;
 802be38:	e06d      	b.n	802bf16 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802be3a:	68bb      	ldr	r3, [r7, #8]
 802be3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802be3e:	4619      	mov	r1, r3
 802be40:	6878      	ldr	r0, [r7, #4]
 802be42:	f000 f897 	bl	802bf74 <SetLineCoding>
 802be46:	4603      	mov	r3, r0
 802be48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be4a:	7bbb      	ldrb	r3, [r7, #14]
 802be4c:	2b00      	cmp	r3, #0
 802be4e:	d104      	bne.n	802be5a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802be50:	68bb      	ldr	r3, [r7, #8]
 802be52:	2202      	movs	r2, #2
 802be54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802be58:	e058      	b.n	802bf0c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802be5a:	7bbb      	ldrb	r3, [r7, #14]
 802be5c:	2b01      	cmp	r3, #1
 802be5e:	d055      	beq.n	802bf0c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802be60:	68bb      	ldr	r3, [r7, #8]
 802be62:	2204      	movs	r2, #4
 802be64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802be68:	e050      	b.n	802bf0c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802be6a:	68bb      	ldr	r3, [r7, #8]
 802be6c:	3340      	adds	r3, #64	; 0x40
 802be6e:	4619      	mov	r1, r3
 802be70:	6878      	ldr	r0, [r7, #4]
 802be72:	f000 f860 	bl	802bf36 <GetLineCoding>
 802be76:	4603      	mov	r3, r0
 802be78:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be7a:	7bbb      	ldrb	r3, [r7, #14]
 802be7c:	2b00      	cmp	r3, #0
 802be7e:	d126      	bne.n	802bece <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802be80:	68bb      	ldr	r3, [r7, #8]
 802be82:	2200      	movs	r2, #0
 802be84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802be88:	68bb      	ldr	r3, [r7, #8]
 802be8a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802be8e:	68bb      	ldr	r3, [r7, #8]
 802be90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802be92:	791b      	ldrb	r3, [r3, #4]
 802be94:	429a      	cmp	r2, r3
 802be96:	d13b      	bne.n	802bf10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802be98:	68bb      	ldr	r3, [r7, #8]
 802be9a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802be9e:	68bb      	ldr	r3, [r7, #8]
 802bea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bea2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bea4:	429a      	cmp	r2, r3
 802bea6:	d133      	bne.n	802bf10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bea8:	68bb      	ldr	r3, [r7, #8]
 802beaa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802beae:	68bb      	ldr	r3, [r7, #8]
 802beb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802beb2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802beb4:	429a      	cmp	r2, r3
 802beb6:	d12b      	bne.n	802bf10 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802beb8:	68bb      	ldr	r3, [r7, #8]
 802beba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802bebc:	68bb      	ldr	r3, [r7, #8]
 802bebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bec0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bec2:	429a      	cmp	r2, r3
 802bec4:	d124      	bne.n	802bf10 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802bec6:	6878      	ldr	r0, [r7, #4]
 802bec8:	f000 f958 	bl	802c17c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802becc:	e020      	b.n	802bf10 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802bece:	7bbb      	ldrb	r3, [r7, #14]
 802bed0:	2b01      	cmp	r3, #1
 802bed2:	d01d      	beq.n	802bf10 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802bed4:	68bb      	ldr	r3, [r7, #8]
 802bed6:	2204      	movs	r2, #4
 802bed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802bedc:	e018      	b.n	802bf10 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802bede:	6878      	ldr	r0, [r7, #4]
 802bee0:	f000 f867 	bl	802bfb2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802bee4:	6878      	ldr	r0, [r7, #4]
 802bee6:	f000 f8da 	bl	802c09e <CDC_ProcessReception>
      break;
 802beea:	e014      	b.n	802bf16 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802beec:	2100      	movs	r1, #0
 802beee:	6878      	ldr	r0, [r7, #4]
 802bef0:	f000 ffef 	bl	802ced2 <USBH_ClrFeature>
 802bef4:	4603      	mov	r3, r0
 802bef6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802bef8:	7bbb      	ldrb	r3, [r7, #14]
 802befa:	2b00      	cmp	r3, #0
 802befc:	d10a      	bne.n	802bf14 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802befe:	68bb      	ldr	r3, [r7, #8]
 802bf00:	2200      	movs	r2, #0
 802bf02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802bf06:	e005      	b.n	802bf14 <USBH_CDC_Process+0x120>

    default:
      break;
 802bf08:	bf00      	nop
 802bf0a:	e004      	b.n	802bf16 <USBH_CDC_Process+0x122>
      break;
 802bf0c:	bf00      	nop
 802bf0e:	e002      	b.n	802bf16 <USBH_CDC_Process+0x122>
      break;
 802bf10:	bf00      	nop
 802bf12:	e000      	b.n	802bf16 <USBH_CDC_Process+0x122>
      break;
 802bf14:	bf00      	nop

  }

  return status;
 802bf16:	7bfb      	ldrb	r3, [r7, #15]
}
 802bf18:	4618      	mov	r0, r3
 802bf1a:	3710      	adds	r7, #16
 802bf1c:	46bd      	mov	sp, r7
 802bf1e:	bd80      	pop	{r7, pc}

0802bf20 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802bf20:	b480      	push	{r7}
 802bf22:	b083      	sub	sp, #12
 802bf24:	af00      	add	r7, sp, #0
 802bf26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802bf28:	2300      	movs	r3, #0
}
 802bf2a:	4618      	mov	r0, r3
 802bf2c:	370c      	adds	r7, #12
 802bf2e:	46bd      	mov	sp, r7
 802bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 802bf34:	4770      	bx	lr

0802bf36 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802bf36:	b580      	push	{r7, lr}
 802bf38:	b082      	sub	sp, #8
 802bf3a:	af00      	add	r7, sp, #0
 802bf3c:	6078      	str	r0, [r7, #4]
 802bf3e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802bf40:	687b      	ldr	r3, [r7, #4]
 802bf42:	22a1      	movs	r2, #161	; 0xa1
 802bf44:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802bf46:	687b      	ldr	r3, [r7, #4]
 802bf48:	2221      	movs	r2, #33	; 0x21
 802bf4a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bf4c:	687b      	ldr	r3, [r7, #4]
 802bf4e:	2200      	movs	r2, #0
 802bf50:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802bf52:	687b      	ldr	r3, [r7, #4]
 802bf54:	2200      	movs	r2, #0
 802bf56:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bf58:	687b      	ldr	r3, [r7, #4]
 802bf5a:	2207      	movs	r2, #7
 802bf5c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bf5e:	683b      	ldr	r3, [r7, #0]
 802bf60:	2207      	movs	r2, #7
 802bf62:	4619      	mov	r1, r3
 802bf64:	6878      	ldr	r0, [r7, #4]
 802bf66:	f001 fa81 	bl	802d46c <USBH_CtlReq>
 802bf6a:	4603      	mov	r3, r0
}
 802bf6c:	4618      	mov	r0, r3
 802bf6e:	3708      	adds	r7, #8
 802bf70:	46bd      	mov	sp, r7
 802bf72:	bd80      	pop	{r7, pc}

0802bf74 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802bf74:	b580      	push	{r7, lr}
 802bf76:	b082      	sub	sp, #8
 802bf78:	af00      	add	r7, sp, #0
 802bf7a:	6078      	str	r0, [r7, #4]
 802bf7c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802bf7e:	687b      	ldr	r3, [r7, #4]
 802bf80:	2221      	movs	r2, #33	; 0x21
 802bf82:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802bf84:	687b      	ldr	r3, [r7, #4]
 802bf86:	2220      	movs	r2, #32
 802bf88:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bf8a:	687b      	ldr	r3, [r7, #4]
 802bf8c:	2200      	movs	r2, #0
 802bf8e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802bf90:	687b      	ldr	r3, [r7, #4]
 802bf92:	2200      	movs	r2, #0
 802bf94:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802bf96:	687b      	ldr	r3, [r7, #4]
 802bf98:	2207      	movs	r2, #7
 802bf9a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bf9c:	683b      	ldr	r3, [r7, #0]
 802bf9e:	2207      	movs	r2, #7
 802bfa0:	4619      	mov	r1, r3
 802bfa2:	6878      	ldr	r0, [r7, #4]
 802bfa4:	f001 fa62 	bl	802d46c <USBH_CtlReq>
 802bfa8:	4603      	mov	r3, r0
}
 802bfaa:	4618      	mov	r0, r3
 802bfac:	3708      	adds	r7, #8
 802bfae:	46bd      	mov	sp, r7
 802bfb0:	bd80      	pop	{r7, pc}

0802bfb2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802bfb2:	b580      	push	{r7, lr}
 802bfb4:	b086      	sub	sp, #24
 802bfb6:	af02      	add	r7, sp, #8
 802bfb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bfba:	687b      	ldr	r3, [r7, #4]
 802bfbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bfc0:	69db      	ldr	r3, [r3, #28]
 802bfc2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bfc4:	2300      	movs	r3, #0
 802bfc6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802bfc8:	68fb      	ldr	r3, [r7, #12]
 802bfca:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802bfce:	2b01      	cmp	r3, #1
 802bfd0:	d002      	beq.n	802bfd8 <CDC_ProcessTransmission+0x26>
 802bfd2:	2b02      	cmp	r3, #2
 802bfd4:	d023      	beq.n	802c01e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802bfd6:	e05e      	b.n	802c096 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802bfd8:	68fb      	ldr	r3, [r7, #12]
 802bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bfdc:	68fa      	ldr	r2, [r7, #12]
 802bfde:	8b12      	ldrh	r2, [r2, #24]
 802bfe0:	4293      	cmp	r3, r2
 802bfe2:	d90b      	bls.n	802bffc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802bfe4:	68fb      	ldr	r3, [r7, #12]
 802bfe6:	69d9      	ldr	r1, [r3, #28]
 802bfe8:	68fb      	ldr	r3, [r7, #12]
 802bfea:	8b1a      	ldrh	r2, [r3, #24]
 802bfec:	68fb      	ldr	r3, [r7, #12]
 802bfee:	7b5b      	ldrb	r3, [r3, #13]
 802bff0:	2001      	movs	r0, #1
 802bff2:	9000      	str	r0, [sp, #0]
 802bff4:	6878      	ldr	r0, [r7, #4]
 802bff6:	f001 fc48 	bl	802d88a <USBH_BulkSendData>
 802bffa:	e00b      	b.n	802c014 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802bffc:	68fb      	ldr	r3, [r7, #12]
 802bffe:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802c000:	68fb      	ldr	r3, [r7, #12]
 802c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802c004:	b29a      	uxth	r2, r3
 802c006:	68fb      	ldr	r3, [r7, #12]
 802c008:	7b5b      	ldrb	r3, [r3, #13]
 802c00a:	2001      	movs	r0, #1
 802c00c:	9000      	str	r0, [sp, #0]
 802c00e:	6878      	ldr	r0, [r7, #4]
 802c010:	f001 fc3b 	bl	802d88a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802c014:	68fb      	ldr	r3, [r7, #12]
 802c016:	2202      	movs	r2, #2
 802c018:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c01c:	e03b      	b.n	802c096 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802c01e:	68fb      	ldr	r3, [r7, #12]
 802c020:	7b5b      	ldrb	r3, [r3, #13]
 802c022:	4619      	mov	r1, r3
 802c024:	6878      	ldr	r0, [r7, #4]
 802c026:	f001 ff65 	bl	802def4 <USBH_LL_GetURBState>
 802c02a:	4603      	mov	r3, r0
 802c02c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802c02e:	7afb      	ldrb	r3, [r7, #11]
 802c030:	2b01      	cmp	r3, #1
 802c032:	d128      	bne.n	802c086 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802c034:	68fb      	ldr	r3, [r7, #12]
 802c036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c038:	68fa      	ldr	r2, [r7, #12]
 802c03a:	8b12      	ldrh	r2, [r2, #24]
 802c03c:	4293      	cmp	r3, r2
 802c03e:	d90e      	bls.n	802c05e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802c040:	68fb      	ldr	r3, [r7, #12]
 802c042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c044:	68fa      	ldr	r2, [r7, #12]
 802c046:	8b12      	ldrh	r2, [r2, #24]
 802c048:	1a9a      	subs	r2, r3, r2
 802c04a:	68fb      	ldr	r3, [r7, #12]
 802c04c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802c04e:	68fb      	ldr	r3, [r7, #12]
 802c050:	69db      	ldr	r3, [r3, #28]
 802c052:	68fa      	ldr	r2, [r7, #12]
 802c054:	8b12      	ldrh	r2, [r2, #24]
 802c056:	441a      	add	r2, r3
 802c058:	68fb      	ldr	r3, [r7, #12]
 802c05a:	61da      	str	r2, [r3, #28]
 802c05c:	e002      	b.n	802c064 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802c05e:	68fb      	ldr	r3, [r7, #12]
 802c060:	2200      	movs	r2, #0
 802c062:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802c064:	68fb      	ldr	r3, [r7, #12]
 802c066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802c068:	2b00      	cmp	r3, #0
 802c06a:	d004      	beq.n	802c076 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c06c:	68fb      	ldr	r3, [r7, #12]
 802c06e:	2201      	movs	r2, #1
 802c070:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c074:	e00e      	b.n	802c094 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802c076:	68fb      	ldr	r3, [r7, #12]
 802c078:	2200      	movs	r2, #0
 802c07a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802c07e:	6878      	ldr	r0, [r7, #4]
 802c080:	f000 f868 	bl	802c154 <USBH_CDC_TransmitCallback>
      break;
 802c084:	e006      	b.n	802c094 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802c086:	7afb      	ldrb	r3, [r7, #11]
 802c088:	2b02      	cmp	r3, #2
 802c08a:	d103      	bne.n	802c094 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802c08c:	68fb      	ldr	r3, [r7, #12]
 802c08e:	2201      	movs	r2, #1
 802c090:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802c094:	bf00      	nop
  }
}
 802c096:	bf00      	nop
 802c098:	3710      	adds	r7, #16
 802c09a:	46bd      	mov	sp, r7
 802c09c:	bd80      	pop	{r7, pc}

0802c09e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802c09e:	b580      	push	{r7, lr}
 802c0a0:	b086      	sub	sp, #24
 802c0a2:	af00      	add	r7, sp, #0
 802c0a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802c0a6:	687b      	ldr	r3, [r7, #4]
 802c0a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c0ac:	69db      	ldr	r3, [r3, #28]
 802c0ae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802c0b0:	2300      	movs	r3, #0
 802c0b2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802c0b4:	697b      	ldr	r3, [r7, #20]
 802c0b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802c0ba:	2b03      	cmp	r3, #3
 802c0bc:	d002      	beq.n	802c0c4 <CDC_ProcessReception+0x26>
 802c0be:	2b04      	cmp	r3, #4
 802c0c0:	d00e      	beq.n	802c0e0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802c0c2:	e043      	b.n	802c14c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802c0c4:	697b      	ldr	r3, [r7, #20]
 802c0c6:	6a19      	ldr	r1, [r3, #32]
 802c0c8:	697b      	ldr	r3, [r7, #20]
 802c0ca:	8b5a      	ldrh	r2, [r3, #26]
 802c0cc:	697b      	ldr	r3, [r7, #20]
 802c0ce:	7b1b      	ldrb	r3, [r3, #12]
 802c0d0:	6878      	ldr	r0, [r7, #4]
 802c0d2:	f001 fbff 	bl	802d8d4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802c0d6:	697b      	ldr	r3, [r7, #20]
 802c0d8:	2204      	movs	r2, #4
 802c0da:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c0de:	e035      	b.n	802c14c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802c0e0:	697b      	ldr	r3, [r7, #20]
 802c0e2:	7b1b      	ldrb	r3, [r3, #12]
 802c0e4:	4619      	mov	r1, r3
 802c0e6:	6878      	ldr	r0, [r7, #4]
 802c0e8:	f001 ff04 	bl	802def4 <USBH_LL_GetURBState>
 802c0ec:	4603      	mov	r3, r0
 802c0ee:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802c0f0:	7cfb      	ldrb	r3, [r7, #19]
 802c0f2:	2b01      	cmp	r3, #1
 802c0f4:	d129      	bne.n	802c14a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802c0f6:	697b      	ldr	r3, [r7, #20]
 802c0f8:	7b1b      	ldrb	r3, [r3, #12]
 802c0fa:	4619      	mov	r1, r3
 802c0fc:	6878      	ldr	r0, [r7, #4]
 802c0fe:	f001 fe67 	bl	802ddd0 <USBH_LL_GetLastXferSize>
 802c102:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802c104:	697b      	ldr	r3, [r7, #20]
 802c106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c108:	68fa      	ldr	r2, [r7, #12]
 802c10a:	429a      	cmp	r2, r3
 802c10c:	d016      	beq.n	802c13c <CDC_ProcessReception+0x9e>
 802c10e:	697b      	ldr	r3, [r7, #20]
 802c110:	8b5b      	ldrh	r3, [r3, #26]
 802c112:	461a      	mov	r2, r3
 802c114:	68fb      	ldr	r3, [r7, #12]
 802c116:	4293      	cmp	r3, r2
 802c118:	d910      	bls.n	802c13c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802c11a:	697b      	ldr	r3, [r7, #20]
 802c11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c11e:	68fb      	ldr	r3, [r7, #12]
 802c120:	1ad2      	subs	r2, r2, r3
 802c122:	697b      	ldr	r3, [r7, #20]
 802c124:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802c126:	697b      	ldr	r3, [r7, #20]
 802c128:	6a1a      	ldr	r2, [r3, #32]
 802c12a:	68fb      	ldr	r3, [r7, #12]
 802c12c:	441a      	add	r2, r3
 802c12e:	697b      	ldr	r3, [r7, #20]
 802c130:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802c132:	697b      	ldr	r3, [r7, #20]
 802c134:	2203      	movs	r2, #3
 802c136:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c13a:	e006      	b.n	802c14a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802c13c:	697b      	ldr	r3, [r7, #20]
 802c13e:	2200      	movs	r2, #0
 802c140:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802c144:	6878      	ldr	r0, [r7, #4]
 802c146:	f000 f80f 	bl	802c168 <USBH_CDC_ReceiveCallback>
      break;
 802c14a:	bf00      	nop
  }
}
 802c14c:	bf00      	nop
 802c14e:	3718      	adds	r7, #24
 802c150:	46bd      	mov	sp, r7
 802c152:	bd80      	pop	{r7, pc}

0802c154 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802c154:	b480      	push	{r7}
 802c156:	b083      	sub	sp, #12
 802c158:	af00      	add	r7, sp, #0
 802c15a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c15c:	bf00      	nop
 802c15e:	370c      	adds	r7, #12
 802c160:	46bd      	mov	sp, r7
 802c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c166:	4770      	bx	lr

0802c168 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802c168:	b480      	push	{r7}
 802c16a:	b083      	sub	sp, #12
 802c16c:	af00      	add	r7, sp, #0
 802c16e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c170:	bf00      	nop
 802c172:	370c      	adds	r7, #12
 802c174:	46bd      	mov	sp, r7
 802c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c17a:	4770      	bx	lr

0802c17c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802c17c:	b480      	push	{r7}
 802c17e:	b083      	sub	sp, #12
 802c180:	af00      	add	r7, sp, #0
 802c182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c184:	bf00      	nop
 802c186:	370c      	adds	r7, #12
 802c188:	46bd      	mov	sp, r7
 802c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c18e:	4770      	bx	lr

0802c190 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802c190:	b580      	push	{r7, lr}
 802c192:	b084      	sub	sp, #16
 802c194:	af00      	add	r7, sp, #0
 802c196:	60f8      	str	r0, [r7, #12]
 802c198:	60b9      	str	r1, [r7, #8]
 802c19a:	4613      	mov	r3, r2
 802c19c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802c19e:	68fb      	ldr	r3, [r7, #12]
 802c1a0:	2b00      	cmp	r3, #0
 802c1a2:	d101      	bne.n	802c1a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802c1a4:	2302      	movs	r3, #2
 802c1a6:	e029      	b.n	802c1fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802c1a8:	68fb      	ldr	r3, [r7, #12]
 802c1aa:	79fa      	ldrb	r2, [r7, #7]
 802c1ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802c1b0:	68fb      	ldr	r3, [r7, #12]
 802c1b2:	2200      	movs	r2, #0
 802c1b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802c1b8:	68fb      	ldr	r3, [r7, #12]
 802c1ba:	2200      	movs	r2, #0
 802c1bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802c1c0:	68f8      	ldr	r0, [r7, #12]
 802c1c2:	f000 f81f 	bl	802c204 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802c1c6:	68fb      	ldr	r3, [r7, #12]
 802c1c8:	2200      	movs	r2, #0
 802c1ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802c1ce:	68fb      	ldr	r3, [r7, #12]
 802c1d0:	2200      	movs	r2, #0
 802c1d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c1d6:	68fb      	ldr	r3, [r7, #12]
 802c1d8:	2200      	movs	r2, #0
 802c1da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c1de:	68fb      	ldr	r3, [r7, #12]
 802c1e0:	2200      	movs	r2, #0
 802c1e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802c1e6:	68bb      	ldr	r3, [r7, #8]
 802c1e8:	2b00      	cmp	r3, #0
 802c1ea:	d003      	beq.n	802c1f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802c1ec:	68fb      	ldr	r3, [r7, #12]
 802c1ee:	68ba      	ldr	r2, [r7, #8]
 802c1f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802c1f4:	68f8      	ldr	r0, [r7, #12]
 802c1f6:	f001 fd2d 	bl	802dc54 <USBH_LL_Init>

  return USBH_OK;
 802c1fa:	2300      	movs	r3, #0
}
 802c1fc:	4618      	mov	r0, r3
 802c1fe:	3710      	adds	r7, #16
 802c200:	46bd      	mov	sp, r7
 802c202:	bd80      	pop	{r7, pc}

0802c204 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802c204:	b480      	push	{r7}
 802c206:	b085      	sub	sp, #20
 802c208:	af00      	add	r7, sp, #0
 802c20a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802c20c:	2300      	movs	r3, #0
 802c20e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c210:	2300      	movs	r3, #0
 802c212:	60fb      	str	r3, [r7, #12]
 802c214:	e009      	b.n	802c22a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802c216:	687a      	ldr	r2, [r7, #4]
 802c218:	68fb      	ldr	r3, [r7, #12]
 802c21a:	33e0      	adds	r3, #224	; 0xe0
 802c21c:	009b      	lsls	r3, r3, #2
 802c21e:	4413      	add	r3, r2
 802c220:	2200      	movs	r2, #0
 802c222:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c224:	68fb      	ldr	r3, [r7, #12]
 802c226:	3301      	adds	r3, #1
 802c228:	60fb      	str	r3, [r7, #12]
 802c22a:	68fb      	ldr	r3, [r7, #12]
 802c22c:	2b0f      	cmp	r3, #15
 802c22e:	d9f2      	bls.n	802c216 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c230:	2300      	movs	r3, #0
 802c232:	60fb      	str	r3, [r7, #12]
 802c234:	e009      	b.n	802c24a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802c236:	687a      	ldr	r2, [r7, #4]
 802c238:	68fb      	ldr	r3, [r7, #12]
 802c23a:	4413      	add	r3, r2
 802c23c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c240:	2200      	movs	r2, #0
 802c242:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c244:	68fb      	ldr	r3, [r7, #12]
 802c246:	3301      	adds	r3, #1
 802c248:	60fb      	str	r3, [r7, #12]
 802c24a:	68fb      	ldr	r3, [r7, #12]
 802c24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c250:	d3f1      	bcc.n	802c236 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802c252:	687b      	ldr	r3, [r7, #4]
 802c254:	2200      	movs	r2, #0
 802c256:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802c258:	687b      	ldr	r3, [r7, #4]
 802c25a:	2200      	movs	r2, #0
 802c25c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802c25e:	687b      	ldr	r3, [r7, #4]
 802c260:	2201      	movs	r2, #1
 802c262:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802c264:	687b      	ldr	r3, [r7, #4]
 802c266:	2200      	movs	r2, #0
 802c268:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802c26c:	687b      	ldr	r3, [r7, #4]
 802c26e:	2201      	movs	r2, #1
 802c270:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802c272:	687b      	ldr	r3, [r7, #4]
 802c274:	2240      	movs	r2, #64	; 0x40
 802c276:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802c278:	687b      	ldr	r3, [r7, #4]
 802c27a:	2200      	movs	r2, #0
 802c27c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802c27e:	687b      	ldr	r3, [r7, #4]
 802c280:	2200      	movs	r2, #0
 802c282:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802c286:	687b      	ldr	r3, [r7, #4]
 802c288:	2201      	movs	r2, #1
 802c28a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802c28e:	687b      	ldr	r3, [r7, #4]
 802c290:	2200      	movs	r2, #0
 802c292:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	2200      	movs	r2, #0
 802c29a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802c29e:	2300      	movs	r3, #0
}
 802c2a0:	4618      	mov	r0, r3
 802c2a2:	3714      	adds	r7, #20
 802c2a4:	46bd      	mov	sp, r7
 802c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2aa:	4770      	bx	lr

0802c2ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802c2ac:	b480      	push	{r7}
 802c2ae:	b085      	sub	sp, #20
 802c2b0:	af00      	add	r7, sp, #0
 802c2b2:	6078      	str	r0, [r7, #4]
 802c2b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802c2b6:	2300      	movs	r3, #0
 802c2b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802c2ba:	683b      	ldr	r3, [r7, #0]
 802c2bc:	2b00      	cmp	r3, #0
 802c2be:	d016      	beq.n	802c2ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802c2c0:	687b      	ldr	r3, [r7, #4]
 802c2c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2c6:	2b00      	cmp	r3, #0
 802c2c8:	d10e      	bne.n	802c2e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802c2ca:	687b      	ldr	r3, [r7, #4]
 802c2cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c2d0:	1c59      	adds	r1, r3, #1
 802c2d2:	687a      	ldr	r2, [r7, #4]
 802c2d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802c2d8:	687a      	ldr	r2, [r7, #4]
 802c2da:	33de      	adds	r3, #222	; 0xde
 802c2dc:	6839      	ldr	r1, [r7, #0]
 802c2de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802c2e2:	2300      	movs	r3, #0
 802c2e4:	73fb      	strb	r3, [r7, #15]
 802c2e6:	e004      	b.n	802c2f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802c2e8:	2302      	movs	r3, #2
 802c2ea:	73fb      	strb	r3, [r7, #15]
 802c2ec:	e001      	b.n	802c2f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802c2ee:	2302      	movs	r3, #2
 802c2f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 802c2f4:	4618      	mov	r0, r3
 802c2f6:	3714      	adds	r7, #20
 802c2f8:	46bd      	mov	sp, r7
 802c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2fe:	4770      	bx	lr

0802c300 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802c300:	b480      	push	{r7}
 802c302:	b085      	sub	sp, #20
 802c304:	af00      	add	r7, sp, #0
 802c306:	6078      	str	r0, [r7, #4]
 802c308:	460b      	mov	r3, r1
 802c30a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802c30c:	2300      	movs	r3, #0
 802c30e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802c310:	687b      	ldr	r3, [r7, #4]
 802c312:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802c316:	78fa      	ldrb	r2, [r7, #3]
 802c318:	429a      	cmp	r2, r3
 802c31a:	d204      	bcs.n	802c326 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802c31c:	687b      	ldr	r3, [r7, #4]
 802c31e:	78fa      	ldrb	r2, [r7, #3]
 802c320:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802c324:	e001      	b.n	802c32a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802c326:	2302      	movs	r3, #2
 802c328:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c32a:	7bfb      	ldrb	r3, [r7, #15]
}
 802c32c:	4618      	mov	r0, r3
 802c32e:	3714      	adds	r7, #20
 802c330:	46bd      	mov	sp, r7
 802c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c336:	4770      	bx	lr

0802c338 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802c338:	b480      	push	{r7}
 802c33a:	b087      	sub	sp, #28
 802c33c:	af00      	add	r7, sp, #0
 802c33e:	6078      	str	r0, [r7, #4]
 802c340:	4608      	mov	r0, r1
 802c342:	4611      	mov	r1, r2
 802c344:	461a      	mov	r2, r3
 802c346:	4603      	mov	r3, r0
 802c348:	70fb      	strb	r3, [r7, #3]
 802c34a:	460b      	mov	r3, r1
 802c34c:	70bb      	strb	r3, [r7, #2]
 802c34e:	4613      	mov	r3, r2
 802c350:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802c352:	2300      	movs	r3, #0
 802c354:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c356:	2300      	movs	r3, #0
 802c358:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802c35a:	687b      	ldr	r3, [r7, #4]
 802c35c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c360:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c362:	e025      	b.n	802c3b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802c364:	7dfb      	ldrb	r3, [r7, #23]
 802c366:	221a      	movs	r2, #26
 802c368:	fb02 f303 	mul.w	r3, r2, r3
 802c36c:	3308      	adds	r3, #8
 802c36e:	68fa      	ldr	r2, [r7, #12]
 802c370:	4413      	add	r3, r2
 802c372:	3302      	adds	r3, #2
 802c374:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c376:	693b      	ldr	r3, [r7, #16]
 802c378:	795b      	ldrb	r3, [r3, #5]
 802c37a:	78fa      	ldrb	r2, [r7, #3]
 802c37c:	429a      	cmp	r2, r3
 802c37e:	d002      	beq.n	802c386 <USBH_FindInterface+0x4e>
 802c380:	78fb      	ldrb	r3, [r7, #3]
 802c382:	2bff      	cmp	r3, #255	; 0xff
 802c384:	d111      	bne.n	802c3aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c386:	693b      	ldr	r3, [r7, #16]
 802c388:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c38a:	78ba      	ldrb	r2, [r7, #2]
 802c38c:	429a      	cmp	r2, r3
 802c38e:	d002      	beq.n	802c396 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c390:	78bb      	ldrb	r3, [r7, #2]
 802c392:	2bff      	cmp	r3, #255	; 0xff
 802c394:	d109      	bne.n	802c3aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c396:	693b      	ldr	r3, [r7, #16]
 802c398:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c39a:	787a      	ldrb	r2, [r7, #1]
 802c39c:	429a      	cmp	r2, r3
 802c39e:	d002      	beq.n	802c3a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c3a0:	787b      	ldrb	r3, [r7, #1]
 802c3a2:	2bff      	cmp	r3, #255	; 0xff
 802c3a4:	d101      	bne.n	802c3aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802c3a6:	7dfb      	ldrb	r3, [r7, #23]
 802c3a8:	e006      	b.n	802c3b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802c3aa:	7dfb      	ldrb	r3, [r7, #23]
 802c3ac:	3301      	adds	r3, #1
 802c3ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c3b0:	7dfb      	ldrb	r3, [r7, #23]
 802c3b2:	2b01      	cmp	r3, #1
 802c3b4:	d9d6      	bls.n	802c364 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802c3b6:	23ff      	movs	r3, #255	; 0xff
}
 802c3b8:	4618      	mov	r0, r3
 802c3ba:	371c      	adds	r7, #28
 802c3bc:	46bd      	mov	sp, r7
 802c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3c2:	4770      	bx	lr

0802c3c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802c3c4:	b580      	push	{r7, lr}
 802c3c6:	b082      	sub	sp, #8
 802c3c8:	af00      	add	r7, sp, #0
 802c3ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802c3cc:	6878      	ldr	r0, [r7, #4]
 802c3ce:	f001 fc87 	bl	802dce0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802c3d2:	2101      	movs	r1, #1
 802c3d4:	6878      	ldr	r0, [r7, #4]
 802c3d6:	f001 fda0 	bl	802df1a <USBH_LL_DriverVBUS>

  return USBH_OK;
 802c3da:	2300      	movs	r3, #0
}
 802c3dc:	4618      	mov	r0, r3
 802c3de:	3708      	adds	r7, #8
 802c3e0:	46bd      	mov	sp, r7
 802c3e2:	bd80      	pop	{r7, pc}

0802c3e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802c3e4:	b580      	push	{r7, lr}
 802c3e6:	b088      	sub	sp, #32
 802c3e8:	af04      	add	r7, sp, #16
 802c3ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802c3ec:	2302      	movs	r3, #2
 802c3ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802c3f0:	2300      	movs	r3, #0
 802c3f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802c3f4:	687b      	ldr	r3, [r7, #4]
 802c3f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802c3fa:	b2db      	uxtb	r3, r3
 802c3fc:	2b01      	cmp	r3, #1
 802c3fe:	d102      	bne.n	802c406 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802c400:	687b      	ldr	r3, [r7, #4]
 802c402:	2203      	movs	r2, #3
 802c404:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802c406:	687b      	ldr	r3, [r7, #4]
 802c408:	781b      	ldrb	r3, [r3, #0]
 802c40a:	b2db      	uxtb	r3, r3
 802c40c:	2b0b      	cmp	r3, #11
 802c40e:	f200 81be 	bhi.w	802c78e <USBH_Process+0x3aa>
 802c412:	a201      	add	r2, pc, #4	; (adr r2, 802c418 <USBH_Process+0x34>)
 802c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c418:	0802c449 	.word	0x0802c449
 802c41c:	0802c47b 	.word	0x0802c47b
 802c420:	0802c4e3 	.word	0x0802c4e3
 802c424:	0802c729 	.word	0x0802c729
 802c428:	0802c78f 	.word	0x0802c78f
 802c42c:	0802c587 	.word	0x0802c587
 802c430:	0802c6cf 	.word	0x0802c6cf
 802c434:	0802c5bd 	.word	0x0802c5bd
 802c438:	0802c5dd 	.word	0x0802c5dd
 802c43c:	0802c5fd 	.word	0x0802c5fd
 802c440:	0802c641 	.word	0x0802c641
 802c444:	0802c711 	.word	0x0802c711
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802c448:	687b      	ldr	r3, [r7, #4]
 802c44a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802c44e:	b2db      	uxtb	r3, r3
 802c450:	2b00      	cmp	r3, #0
 802c452:	f000 819e 	beq.w	802c792 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802c456:	687b      	ldr	r3, [r7, #4]
 802c458:	2201      	movs	r2, #1
 802c45a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802c45c:	20c8      	movs	r0, #200	; 0xc8
 802c45e:	f001 fda3 	bl	802dfa8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802c462:	6878      	ldr	r0, [r7, #4]
 802c464:	f001 fc99 	bl	802dd9a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802c468:	687b      	ldr	r3, [r7, #4]
 802c46a:	2200      	movs	r2, #0
 802c46c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802c470:	687b      	ldr	r3, [r7, #4]
 802c472:	2200      	movs	r2, #0
 802c474:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c478:	e18b      	b.n	802c792 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802c47a:	687b      	ldr	r3, [r7, #4]
 802c47c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802c480:	2b01      	cmp	r3, #1
 802c482:	d107      	bne.n	802c494 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802c484:	687b      	ldr	r3, [r7, #4]
 802c486:	2200      	movs	r2, #0
 802c488:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802c48c:	687b      	ldr	r3, [r7, #4]
 802c48e:	2202      	movs	r2, #2
 802c490:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c492:	e18d      	b.n	802c7b0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802c494:	687b      	ldr	r3, [r7, #4]
 802c496:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c49a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c49e:	d914      	bls.n	802c4ca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802c4a0:	687b      	ldr	r3, [r7, #4]
 802c4a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4a6:	3301      	adds	r3, #1
 802c4a8:	b2da      	uxtb	r2, r3
 802c4aa:	687b      	ldr	r3, [r7, #4]
 802c4ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802c4b0:	687b      	ldr	r3, [r7, #4]
 802c4b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c4b6:	2b03      	cmp	r3, #3
 802c4b8:	d903      	bls.n	802c4c2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802c4ba:	687b      	ldr	r3, [r7, #4]
 802c4bc:	220d      	movs	r2, #13
 802c4be:	701a      	strb	r2, [r3, #0]
      break;
 802c4c0:	e176      	b.n	802c7b0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802c4c2:	687b      	ldr	r3, [r7, #4]
 802c4c4:	2200      	movs	r2, #0
 802c4c6:	701a      	strb	r2, [r3, #0]
      break;
 802c4c8:	e172      	b.n	802c7b0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802c4ca:	687b      	ldr	r3, [r7, #4]
 802c4cc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c4d0:	f103 020a 	add.w	r2, r3, #10
 802c4d4:	687b      	ldr	r3, [r7, #4]
 802c4d6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802c4da:	200a      	movs	r0, #10
 802c4dc:	f001 fd64 	bl	802dfa8 <USBH_Delay>
      break;
 802c4e0:	e166      	b.n	802c7b0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802c4e2:	687b      	ldr	r3, [r7, #4]
 802c4e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c4e8:	2b00      	cmp	r3, #0
 802c4ea:	d005      	beq.n	802c4f8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802c4ec:	687b      	ldr	r3, [r7, #4]
 802c4ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c4f2:	2104      	movs	r1, #4
 802c4f4:	6878      	ldr	r0, [r7, #4]
 802c4f6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802c4f8:	2064      	movs	r0, #100	; 0x64
 802c4fa:	f001 fd55 	bl	802dfa8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802c4fe:	6878      	ldr	r0, [r7, #4]
 802c500:	f001 fc24 	bl	802dd4c <USBH_LL_GetSpeed>
 802c504:	4603      	mov	r3, r0
 802c506:	461a      	mov	r2, r3
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802c50e:	687b      	ldr	r3, [r7, #4]
 802c510:	2205      	movs	r2, #5
 802c512:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802c514:	2100      	movs	r1, #0
 802c516:	6878      	ldr	r0, [r7, #4]
 802c518:	f001 fa29 	bl	802d96e <USBH_AllocPipe>
 802c51c:	4603      	mov	r3, r0
 802c51e:	461a      	mov	r2, r3
 802c520:	687b      	ldr	r3, [r7, #4]
 802c522:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802c524:	2180      	movs	r1, #128	; 0x80
 802c526:	6878      	ldr	r0, [r7, #4]
 802c528:	f001 fa21 	bl	802d96e <USBH_AllocPipe>
 802c52c:	4603      	mov	r3, r0
 802c52e:	461a      	mov	r2, r3
 802c530:	687b      	ldr	r3, [r7, #4]
 802c532:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c534:	687b      	ldr	r3, [r7, #4]
 802c536:	7919      	ldrb	r1, [r3, #4]
 802c538:	687b      	ldr	r3, [r7, #4]
 802c53a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c53e:	687b      	ldr	r3, [r7, #4]
 802c540:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c544:	687a      	ldr	r2, [r7, #4]
 802c546:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c548:	b292      	uxth	r2, r2
 802c54a:	9202      	str	r2, [sp, #8]
 802c54c:	2200      	movs	r2, #0
 802c54e:	9201      	str	r2, [sp, #4]
 802c550:	9300      	str	r3, [sp, #0]
 802c552:	4603      	mov	r3, r0
 802c554:	2280      	movs	r2, #128	; 0x80
 802c556:	6878      	ldr	r0, [r7, #4]
 802c558:	f001 f9da 	bl	802d910 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c55c:	687b      	ldr	r3, [r7, #4]
 802c55e:	7959      	ldrb	r1, [r3, #5]
 802c560:	687b      	ldr	r3, [r7, #4]
 802c562:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c566:	687b      	ldr	r3, [r7, #4]
 802c568:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c56c:	687a      	ldr	r2, [r7, #4]
 802c56e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c570:	b292      	uxth	r2, r2
 802c572:	9202      	str	r2, [sp, #8]
 802c574:	2200      	movs	r2, #0
 802c576:	9201      	str	r2, [sp, #4]
 802c578:	9300      	str	r3, [sp, #0]
 802c57a:	4603      	mov	r3, r0
 802c57c:	2200      	movs	r2, #0
 802c57e:	6878      	ldr	r0, [r7, #4]
 802c580:	f001 f9c6 	bl	802d910 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c584:	e114      	b.n	802c7b0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802c586:	6878      	ldr	r0, [r7, #4]
 802c588:	f000 f918 	bl	802c7bc <USBH_HandleEnum>
 802c58c:	4603      	mov	r3, r0
 802c58e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802c590:	7bbb      	ldrb	r3, [r7, #14]
 802c592:	b2db      	uxtb	r3, r3
 802c594:	2b00      	cmp	r3, #0
 802c596:	f040 80fe 	bne.w	802c796 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802c59a:	687b      	ldr	r3, [r7, #4]
 802c59c:	2200      	movs	r2, #0
 802c59e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802c5a8:	2b01      	cmp	r3, #1
 802c5aa:	d103      	bne.n	802c5b4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802c5ac:	687b      	ldr	r3, [r7, #4]
 802c5ae:	2208      	movs	r2, #8
 802c5b0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c5b2:	e0f0      	b.n	802c796 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802c5b4:	687b      	ldr	r3, [r7, #4]
 802c5b6:	2207      	movs	r2, #7
 802c5b8:	701a      	strb	r2, [r3, #0]
      break;
 802c5ba:	e0ec      	b.n	802c796 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802c5bc:	687b      	ldr	r3, [r7, #4]
 802c5be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5c2:	2b00      	cmp	r3, #0
 802c5c4:	f000 80e9 	beq.w	802c79a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802c5c8:	687b      	ldr	r3, [r7, #4]
 802c5ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5ce:	2101      	movs	r1, #1
 802c5d0:	6878      	ldr	r0, [r7, #4]
 802c5d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802c5d4:	687b      	ldr	r3, [r7, #4]
 802c5d6:	2208      	movs	r2, #8
 802c5d8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802c5da:	e0de      	b.n	802c79a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802c5dc:	687b      	ldr	r3, [r7, #4]
 802c5de:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802c5e2:	b29b      	uxth	r3, r3
 802c5e4:	4619      	mov	r1, r3
 802c5e6:	6878      	ldr	r0, [r7, #4]
 802c5e8:	f000 fc2c 	bl	802ce44 <USBH_SetCfg>
 802c5ec:	4603      	mov	r3, r0
 802c5ee:	2b00      	cmp	r3, #0
 802c5f0:	f040 80d5 	bne.w	802c79e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802c5f4:	687b      	ldr	r3, [r7, #4]
 802c5f6:	2209      	movs	r2, #9
 802c5f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c5fa:	e0d0      	b.n	802c79e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802c5fc:	687b      	ldr	r3, [r7, #4]
 802c5fe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802c602:	f003 0320 	and.w	r3, r3, #32
 802c606:	2b00      	cmp	r3, #0
 802c608:	d016      	beq.n	802c638 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802c60a:	2101      	movs	r1, #1
 802c60c:	6878      	ldr	r0, [r7, #4]
 802c60e:	f000 fc3c 	bl	802ce8a <USBH_SetFeature>
 802c612:	4603      	mov	r3, r0
 802c614:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c616:	7bbb      	ldrb	r3, [r7, #14]
 802c618:	b2db      	uxtb	r3, r3
 802c61a:	2b00      	cmp	r3, #0
 802c61c:	d103      	bne.n	802c626 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	220a      	movs	r2, #10
 802c622:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c624:	e0bd      	b.n	802c7a2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802c626:	7bbb      	ldrb	r3, [r7, #14]
 802c628:	b2db      	uxtb	r3, r3
 802c62a:	2b03      	cmp	r3, #3
 802c62c:	f040 80b9 	bne.w	802c7a2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802c630:	687b      	ldr	r3, [r7, #4]
 802c632:	220a      	movs	r2, #10
 802c634:	701a      	strb	r2, [r3, #0]
      break;
 802c636:	e0b4      	b.n	802c7a2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802c638:	687b      	ldr	r3, [r7, #4]
 802c63a:	220a      	movs	r2, #10
 802c63c:	701a      	strb	r2, [r3, #0]
      break;
 802c63e:	e0b0      	b.n	802c7a2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802c640:	687b      	ldr	r3, [r7, #4]
 802c642:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c646:	2b00      	cmp	r3, #0
 802c648:	f000 80ad 	beq.w	802c7a6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802c64c:	687b      	ldr	r3, [r7, #4]
 802c64e:	2200      	movs	r2, #0
 802c650:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c654:	2300      	movs	r3, #0
 802c656:	73fb      	strb	r3, [r7, #15]
 802c658:	e016      	b.n	802c688 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802c65a:	7bfa      	ldrb	r2, [r7, #15]
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	32de      	adds	r2, #222	; 0xde
 802c660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c664:	791a      	ldrb	r2, [r3, #4]
 802c666:	687b      	ldr	r3, [r7, #4]
 802c668:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802c66c:	429a      	cmp	r2, r3
 802c66e:	d108      	bne.n	802c682 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802c670:	7bfa      	ldrb	r2, [r7, #15]
 802c672:	687b      	ldr	r3, [r7, #4]
 802c674:	32de      	adds	r2, #222	; 0xde
 802c676:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802c680:	e005      	b.n	802c68e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c682:	7bfb      	ldrb	r3, [r7, #15]
 802c684:	3301      	adds	r3, #1
 802c686:	73fb      	strb	r3, [r7, #15]
 802c688:	7bfb      	ldrb	r3, [r7, #15]
 802c68a:	2b00      	cmp	r3, #0
 802c68c:	d0e5      	beq.n	802c65a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802c68e:	687b      	ldr	r3, [r7, #4]
 802c690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c694:	2b00      	cmp	r3, #0
 802c696:	d016      	beq.n	802c6c6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802c698:	687b      	ldr	r3, [r7, #4]
 802c69a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c69e:	689b      	ldr	r3, [r3, #8]
 802c6a0:	6878      	ldr	r0, [r7, #4]
 802c6a2:	4798      	blx	r3
 802c6a4:	4603      	mov	r3, r0
 802c6a6:	2b00      	cmp	r3, #0
 802c6a8:	d109      	bne.n	802c6be <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	2206      	movs	r2, #6
 802c6ae:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802c6b0:	687b      	ldr	r3, [r7, #4]
 802c6b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c6b6:	2103      	movs	r1, #3
 802c6b8:	6878      	ldr	r0, [r7, #4]
 802c6ba:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6bc:	e073      	b.n	802c7a6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802c6be:	687b      	ldr	r3, [r7, #4]
 802c6c0:	220d      	movs	r2, #13
 802c6c2:	701a      	strb	r2, [r3, #0]
      break;
 802c6c4:	e06f      	b.n	802c7a6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802c6c6:	687b      	ldr	r3, [r7, #4]
 802c6c8:	220d      	movs	r2, #13
 802c6ca:	701a      	strb	r2, [r3, #0]
      break;
 802c6cc:	e06b      	b.n	802c7a6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802c6ce:	687b      	ldr	r3, [r7, #4]
 802c6d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6d4:	2b00      	cmp	r3, #0
 802c6d6:	d017      	beq.n	802c708 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802c6d8:	687b      	ldr	r3, [r7, #4]
 802c6da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c6de:	691b      	ldr	r3, [r3, #16]
 802c6e0:	6878      	ldr	r0, [r7, #4]
 802c6e2:	4798      	blx	r3
 802c6e4:	4603      	mov	r3, r0
 802c6e6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c6e8:	7bbb      	ldrb	r3, [r7, #14]
 802c6ea:	b2db      	uxtb	r3, r3
 802c6ec:	2b00      	cmp	r3, #0
 802c6ee:	d103      	bne.n	802c6f8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802c6f0:	687b      	ldr	r3, [r7, #4]
 802c6f2:	220b      	movs	r2, #11
 802c6f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6f6:	e058      	b.n	802c7aa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802c6f8:	7bbb      	ldrb	r3, [r7, #14]
 802c6fa:	b2db      	uxtb	r3, r3
 802c6fc:	2b02      	cmp	r3, #2
 802c6fe:	d154      	bne.n	802c7aa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	220d      	movs	r2, #13
 802c704:	701a      	strb	r2, [r3, #0]
      break;
 802c706:	e050      	b.n	802c7aa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802c708:	687b      	ldr	r3, [r7, #4]
 802c70a:	220d      	movs	r2, #13
 802c70c:	701a      	strb	r2, [r3, #0]
      break;
 802c70e:	e04c      	b.n	802c7aa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802c710:	687b      	ldr	r3, [r7, #4]
 802c712:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c716:	2b00      	cmp	r3, #0
 802c718:	d049      	beq.n	802c7ae <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802c71a:	687b      	ldr	r3, [r7, #4]
 802c71c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c720:	695b      	ldr	r3, [r3, #20]
 802c722:	6878      	ldr	r0, [r7, #4]
 802c724:	4798      	blx	r3
      }
      break;
 802c726:	e042      	b.n	802c7ae <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802c728:	687b      	ldr	r3, [r7, #4]
 802c72a:	2200      	movs	r2, #0
 802c72c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802c730:	6878      	ldr	r0, [r7, #4]
 802c732:	f7ff fd67 	bl	802c204 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802c736:	687b      	ldr	r3, [r7, #4]
 802c738:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c73c:	2b00      	cmp	r3, #0
 802c73e:	d009      	beq.n	802c754 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802c740:	687b      	ldr	r3, [r7, #4]
 802c742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c746:	68db      	ldr	r3, [r3, #12]
 802c748:	6878      	ldr	r0, [r7, #4]
 802c74a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	2200      	movs	r2, #0
 802c750:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802c754:	687b      	ldr	r3, [r7, #4]
 802c756:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c75a:	2b00      	cmp	r3, #0
 802c75c:	d005      	beq.n	802c76a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802c75e:	687b      	ldr	r3, [r7, #4]
 802c760:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c764:	2105      	movs	r1, #5
 802c766:	6878      	ldr	r0, [r7, #4]
 802c768:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802c76a:	687b      	ldr	r3, [r7, #4]
 802c76c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802c770:	b2db      	uxtb	r3, r3
 802c772:	2b01      	cmp	r3, #1
 802c774:	d107      	bne.n	802c786 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802c776:	687b      	ldr	r3, [r7, #4]
 802c778:	2200      	movs	r2, #0
 802c77a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802c77e:	6878      	ldr	r0, [r7, #4]
 802c780:	f7ff fe20 	bl	802c3c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c784:	e014      	b.n	802c7b0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802c786:	6878      	ldr	r0, [r7, #4]
 802c788:	f001 faaa 	bl	802dce0 <USBH_LL_Start>
      break;
 802c78c:	e010      	b.n	802c7b0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802c78e:	bf00      	nop
 802c790:	e00e      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c792:	bf00      	nop
 802c794:	e00c      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c796:	bf00      	nop
 802c798:	e00a      	b.n	802c7b0 <USBH_Process+0x3cc>
    break;
 802c79a:	bf00      	nop
 802c79c:	e008      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c79e:	bf00      	nop
 802c7a0:	e006      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c7a2:	bf00      	nop
 802c7a4:	e004      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c7a6:	bf00      	nop
 802c7a8:	e002      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c7aa:	bf00      	nop
 802c7ac:	e000      	b.n	802c7b0 <USBH_Process+0x3cc>
      break;
 802c7ae:	bf00      	nop
  }
  return USBH_OK;
 802c7b0:	2300      	movs	r3, #0
}
 802c7b2:	4618      	mov	r0, r3
 802c7b4:	3710      	adds	r7, #16
 802c7b6:	46bd      	mov	sp, r7
 802c7b8:	bd80      	pop	{r7, pc}
 802c7ba:	bf00      	nop

0802c7bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802c7bc:	b580      	push	{r7, lr}
 802c7be:	b088      	sub	sp, #32
 802c7c0:	af04      	add	r7, sp, #16
 802c7c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802c7c4:	2301      	movs	r3, #1
 802c7c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802c7c8:	2301      	movs	r3, #1
 802c7ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802c7cc:	687b      	ldr	r3, [r7, #4]
 802c7ce:	785b      	ldrb	r3, [r3, #1]
 802c7d0:	2b07      	cmp	r3, #7
 802c7d2:	f200 81c1 	bhi.w	802cb58 <USBH_HandleEnum+0x39c>
 802c7d6:	a201      	add	r2, pc, #4	; (adr r2, 802c7dc <USBH_HandleEnum+0x20>)
 802c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c7dc:	0802c7fd 	.word	0x0802c7fd
 802c7e0:	0802c8bb 	.word	0x0802c8bb
 802c7e4:	0802c925 	.word	0x0802c925
 802c7e8:	0802c9b3 	.word	0x0802c9b3
 802c7ec:	0802ca1d 	.word	0x0802ca1d
 802c7f0:	0802ca8d 	.word	0x0802ca8d
 802c7f4:	0802cad3 	.word	0x0802cad3
 802c7f8:	0802cb19 	.word	0x0802cb19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802c7fc:	2108      	movs	r1, #8
 802c7fe:	6878      	ldr	r0, [r7, #4]
 802c800:	f000 fa50 	bl	802cca4 <USBH_Get_DevDesc>
 802c804:	4603      	mov	r3, r0
 802c806:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c808:	7bbb      	ldrb	r3, [r7, #14]
 802c80a:	2b00      	cmp	r3, #0
 802c80c:	d130      	bne.n	802c870 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802c80e:	687b      	ldr	r3, [r7, #4]
 802c810:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802c814:	687b      	ldr	r3, [r7, #4]
 802c816:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802c818:	687b      	ldr	r3, [r7, #4]
 802c81a:	2201      	movs	r2, #1
 802c81c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c81e:	687b      	ldr	r3, [r7, #4]
 802c820:	7919      	ldrb	r1, [r3, #4]
 802c822:	687b      	ldr	r3, [r7, #4]
 802c824:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c828:	687b      	ldr	r3, [r7, #4]
 802c82a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c82e:	687a      	ldr	r2, [r7, #4]
 802c830:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c832:	b292      	uxth	r2, r2
 802c834:	9202      	str	r2, [sp, #8]
 802c836:	2200      	movs	r2, #0
 802c838:	9201      	str	r2, [sp, #4]
 802c83a:	9300      	str	r3, [sp, #0]
 802c83c:	4603      	mov	r3, r0
 802c83e:	2280      	movs	r2, #128	; 0x80
 802c840:	6878      	ldr	r0, [r7, #4]
 802c842:	f001 f865 	bl	802d910 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c846:	687b      	ldr	r3, [r7, #4]
 802c848:	7959      	ldrb	r1, [r3, #5]
 802c84a:	687b      	ldr	r3, [r7, #4]
 802c84c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c856:	687a      	ldr	r2, [r7, #4]
 802c858:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c85a:	b292      	uxth	r2, r2
 802c85c:	9202      	str	r2, [sp, #8]
 802c85e:	2200      	movs	r2, #0
 802c860:	9201      	str	r2, [sp, #4]
 802c862:	9300      	str	r3, [sp, #0]
 802c864:	4603      	mov	r3, r0
 802c866:	2200      	movs	r2, #0
 802c868:	6878      	ldr	r0, [r7, #4]
 802c86a:	f001 f851 	bl	802d910 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c86e:	e175      	b.n	802cb5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c870:	7bbb      	ldrb	r3, [r7, #14]
 802c872:	2b03      	cmp	r3, #3
 802c874:	f040 8172 	bne.w	802cb5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802c878:	687b      	ldr	r3, [r7, #4]
 802c87a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c87e:	3301      	adds	r3, #1
 802c880:	b2da      	uxtb	r2, r3
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c888:	687b      	ldr	r3, [r7, #4]
 802c88a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c88e:	2b03      	cmp	r3, #3
 802c890:	d903      	bls.n	802c89a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802c892:	687b      	ldr	r3, [r7, #4]
 802c894:	220d      	movs	r2, #13
 802c896:	701a      	strb	r2, [r3, #0]
      break;
 802c898:	e160      	b.n	802cb5c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c89a:	687b      	ldr	r3, [r7, #4]
 802c89c:	795b      	ldrb	r3, [r3, #5]
 802c89e:	4619      	mov	r1, r3
 802c8a0:	6878      	ldr	r0, [r7, #4]
 802c8a2:	f001 f885 	bl	802d9b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	791b      	ldrb	r3, [r3, #4]
 802c8aa:	4619      	mov	r1, r3
 802c8ac:	6878      	ldr	r0, [r7, #4]
 802c8ae:	f001 f87f 	bl	802d9b0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802c8b2:	687b      	ldr	r3, [r7, #4]
 802c8b4:	2200      	movs	r2, #0
 802c8b6:	701a      	strb	r2, [r3, #0]
      break;
 802c8b8:	e150      	b.n	802cb5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802c8ba:	2112      	movs	r1, #18
 802c8bc:	6878      	ldr	r0, [r7, #4]
 802c8be:	f000 f9f1 	bl	802cca4 <USBH_Get_DevDesc>
 802c8c2:	4603      	mov	r3, r0
 802c8c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c8c6:	7bbb      	ldrb	r3, [r7, #14]
 802c8c8:	2b00      	cmp	r3, #0
 802c8ca:	d103      	bne.n	802c8d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802c8cc:	687b      	ldr	r3, [r7, #4]
 802c8ce:	2202      	movs	r2, #2
 802c8d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c8d2:	e145      	b.n	802cb60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c8d4:	7bbb      	ldrb	r3, [r7, #14]
 802c8d6:	2b03      	cmp	r3, #3
 802c8d8:	f040 8142 	bne.w	802cb60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802c8dc:	687b      	ldr	r3, [r7, #4]
 802c8de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8e2:	3301      	adds	r3, #1
 802c8e4:	b2da      	uxtb	r2, r3
 802c8e6:	687b      	ldr	r3, [r7, #4]
 802c8e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c8ec:	687b      	ldr	r3, [r7, #4]
 802c8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c8f2:	2b03      	cmp	r3, #3
 802c8f4:	d903      	bls.n	802c8fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802c8f6:	687b      	ldr	r3, [r7, #4]
 802c8f8:	220d      	movs	r2, #13
 802c8fa:	701a      	strb	r2, [r3, #0]
      break;
 802c8fc:	e130      	b.n	802cb60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c8fe:	687b      	ldr	r3, [r7, #4]
 802c900:	795b      	ldrb	r3, [r3, #5]
 802c902:	4619      	mov	r1, r3
 802c904:	6878      	ldr	r0, [r7, #4]
 802c906:	f001 f853 	bl	802d9b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c90a:	687b      	ldr	r3, [r7, #4]
 802c90c:	791b      	ldrb	r3, [r3, #4]
 802c90e:	4619      	mov	r1, r3
 802c910:	6878      	ldr	r0, [r7, #4]
 802c912:	f001 f84d 	bl	802d9b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c916:	687b      	ldr	r3, [r7, #4]
 802c918:	2200      	movs	r2, #0
 802c91a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c91c:	687b      	ldr	r3, [r7, #4]
 802c91e:	2200      	movs	r2, #0
 802c920:	701a      	strb	r2, [r3, #0]
      break;
 802c922:	e11d      	b.n	802cb60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802c924:	2101      	movs	r1, #1
 802c926:	6878      	ldr	r0, [r7, #4]
 802c928:	f000 fa68 	bl	802cdfc <USBH_SetAddress>
 802c92c:	4603      	mov	r3, r0
 802c92e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c930:	7bbb      	ldrb	r3, [r7, #14]
 802c932:	2b00      	cmp	r3, #0
 802c934:	d132      	bne.n	802c99c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802c936:	2002      	movs	r0, #2
 802c938:	f001 fb36 	bl	802dfa8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802c93c:	687b      	ldr	r3, [r7, #4]
 802c93e:	2201      	movs	r2, #1
 802c940:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802c944:	687b      	ldr	r3, [r7, #4]
 802c946:	2203      	movs	r2, #3
 802c948:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c94a:	687b      	ldr	r3, [r7, #4]
 802c94c:	7919      	ldrb	r1, [r3, #4]
 802c94e:	687b      	ldr	r3, [r7, #4]
 802c950:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c954:	687b      	ldr	r3, [r7, #4]
 802c956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c95a:	687a      	ldr	r2, [r7, #4]
 802c95c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c95e:	b292      	uxth	r2, r2
 802c960:	9202      	str	r2, [sp, #8]
 802c962:	2200      	movs	r2, #0
 802c964:	9201      	str	r2, [sp, #4]
 802c966:	9300      	str	r3, [sp, #0]
 802c968:	4603      	mov	r3, r0
 802c96a:	2280      	movs	r2, #128	; 0x80
 802c96c:	6878      	ldr	r0, [r7, #4]
 802c96e:	f000 ffcf 	bl	802d910 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c972:	687b      	ldr	r3, [r7, #4]
 802c974:	7959      	ldrb	r1, [r3, #5]
 802c976:	687b      	ldr	r3, [r7, #4]
 802c978:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c97c:	687b      	ldr	r3, [r7, #4]
 802c97e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c982:	687a      	ldr	r2, [r7, #4]
 802c984:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c986:	b292      	uxth	r2, r2
 802c988:	9202      	str	r2, [sp, #8]
 802c98a:	2200      	movs	r2, #0
 802c98c:	9201      	str	r2, [sp, #4]
 802c98e:	9300      	str	r3, [sp, #0]
 802c990:	4603      	mov	r3, r0
 802c992:	2200      	movs	r2, #0
 802c994:	6878      	ldr	r0, [r7, #4]
 802c996:	f000 ffbb 	bl	802d910 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c99a:	e0e3      	b.n	802cb64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c99c:	7bbb      	ldrb	r3, [r7, #14]
 802c99e:	2b03      	cmp	r3, #3
 802c9a0:	f040 80e0 	bne.w	802cb64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c9a4:	687b      	ldr	r3, [r7, #4]
 802c9a6:	220d      	movs	r2, #13
 802c9a8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c9aa:	687b      	ldr	r3, [r7, #4]
 802c9ac:	2200      	movs	r2, #0
 802c9ae:	705a      	strb	r2, [r3, #1]
      break;
 802c9b0:	e0d8      	b.n	802cb64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c9b2:	2109      	movs	r1, #9
 802c9b4:	6878      	ldr	r0, [r7, #4]
 802c9b6:	f000 f99d 	bl	802ccf4 <USBH_Get_CfgDesc>
 802c9ba:	4603      	mov	r3, r0
 802c9bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c9be:	7bbb      	ldrb	r3, [r7, #14]
 802c9c0:	2b00      	cmp	r3, #0
 802c9c2:	d103      	bne.n	802c9cc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c9c4:	687b      	ldr	r3, [r7, #4]
 802c9c6:	2204      	movs	r2, #4
 802c9c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c9ca:	e0cd      	b.n	802cb68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9cc:	7bbb      	ldrb	r3, [r7, #14]
 802c9ce:	2b03      	cmp	r3, #3
 802c9d0:	f040 80ca 	bne.w	802cb68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c9d4:	687b      	ldr	r3, [r7, #4]
 802c9d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c9da:	3301      	adds	r3, #1
 802c9dc:	b2da      	uxtb	r2, r3
 802c9de:	687b      	ldr	r3, [r7, #4]
 802c9e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c9e4:	687b      	ldr	r3, [r7, #4]
 802c9e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c9ea:	2b03      	cmp	r3, #3
 802c9ec:	d903      	bls.n	802c9f6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802c9ee:	687b      	ldr	r3, [r7, #4]
 802c9f0:	220d      	movs	r2, #13
 802c9f2:	701a      	strb	r2, [r3, #0]
      break;
 802c9f4:	e0b8      	b.n	802cb68 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c9f6:	687b      	ldr	r3, [r7, #4]
 802c9f8:	795b      	ldrb	r3, [r3, #5]
 802c9fa:	4619      	mov	r1, r3
 802c9fc:	6878      	ldr	r0, [r7, #4]
 802c9fe:	f000 ffd7 	bl	802d9b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca02:	687b      	ldr	r3, [r7, #4]
 802ca04:	791b      	ldrb	r3, [r3, #4]
 802ca06:	4619      	mov	r1, r3
 802ca08:	6878      	ldr	r0, [r7, #4]
 802ca0a:	f000 ffd1 	bl	802d9b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca0e:	687b      	ldr	r3, [r7, #4]
 802ca10:	2200      	movs	r2, #0
 802ca12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ca14:	687b      	ldr	r3, [r7, #4]
 802ca16:	2200      	movs	r2, #0
 802ca18:	701a      	strb	r2, [r3, #0]
      break;
 802ca1a:	e0a5      	b.n	802cb68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802ca1c:	687b      	ldr	r3, [r7, #4]
 802ca1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802ca22:	4619      	mov	r1, r3
 802ca24:	6878      	ldr	r0, [r7, #4]
 802ca26:	f000 f965 	bl	802ccf4 <USBH_Get_CfgDesc>
 802ca2a:	4603      	mov	r3, r0
 802ca2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802ca2e:	7bbb      	ldrb	r3, [r7, #14]
 802ca30:	2b00      	cmp	r3, #0
 802ca32:	d103      	bne.n	802ca3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802ca34:	687b      	ldr	r3, [r7, #4]
 802ca36:	2205      	movs	r2, #5
 802ca38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802ca3a:	e097      	b.n	802cb6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ca3c:	7bbb      	ldrb	r3, [r7, #14]
 802ca3e:	2b03      	cmp	r3, #3
 802ca40:	f040 8094 	bne.w	802cb6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802ca44:	687b      	ldr	r3, [r7, #4]
 802ca46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca4a:	3301      	adds	r3, #1
 802ca4c:	b2da      	uxtb	r2, r3
 802ca4e:	687b      	ldr	r3, [r7, #4]
 802ca50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802ca54:	687b      	ldr	r3, [r7, #4]
 802ca56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802ca5a:	2b03      	cmp	r3, #3
 802ca5c:	d903      	bls.n	802ca66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802ca5e:	687b      	ldr	r3, [r7, #4]
 802ca60:	220d      	movs	r2, #13
 802ca62:	701a      	strb	r2, [r3, #0]
      break;
 802ca64:	e082      	b.n	802cb6c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802ca66:	687b      	ldr	r3, [r7, #4]
 802ca68:	795b      	ldrb	r3, [r3, #5]
 802ca6a:	4619      	mov	r1, r3
 802ca6c:	6878      	ldr	r0, [r7, #4]
 802ca6e:	f000 ff9f 	bl	802d9b0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802ca72:	687b      	ldr	r3, [r7, #4]
 802ca74:	791b      	ldrb	r3, [r3, #4]
 802ca76:	4619      	mov	r1, r3
 802ca78:	6878      	ldr	r0, [r7, #4]
 802ca7a:	f000 ff99 	bl	802d9b0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802ca7e:	687b      	ldr	r3, [r7, #4]
 802ca80:	2200      	movs	r2, #0
 802ca82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802ca84:	687b      	ldr	r3, [r7, #4]
 802ca86:	2200      	movs	r2, #0
 802ca88:	701a      	strb	r2, [r3, #0]
      break;
 802ca8a:	e06f      	b.n	802cb6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802ca8c:	687b      	ldr	r3, [r7, #4]
 802ca8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802ca92:	2b00      	cmp	r3, #0
 802ca94:	d019      	beq.n	802caca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802ca96:	687b      	ldr	r3, [r7, #4]
 802ca98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802ca9c:	687b      	ldr	r3, [r7, #4]
 802ca9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802caa2:	23ff      	movs	r3, #255	; 0xff
 802caa4:	6878      	ldr	r0, [r7, #4]
 802caa6:	f000 f949 	bl	802cd3c <USBH_Get_StringDesc>
 802caaa:	4603      	mov	r3, r0
 802caac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802caae:	7bbb      	ldrb	r3, [r7, #14]
 802cab0:	2b00      	cmp	r3, #0
 802cab2:	d103      	bne.n	802cabc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cab4:	687b      	ldr	r3, [r7, #4]
 802cab6:	2206      	movs	r2, #6
 802cab8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802caba:	e059      	b.n	802cb70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cabc:	7bbb      	ldrb	r3, [r7, #14]
 802cabe:	2b03      	cmp	r3, #3
 802cac0:	d156      	bne.n	802cb70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802cac2:	687b      	ldr	r3, [r7, #4]
 802cac4:	2206      	movs	r2, #6
 802cac6:	705a      	strb	r2, [r3, #1]
      break;
 802cac8:	e052      	b.n	802cb70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802caca:	687b      	ldr	r3, [r7, #4]
 802cacc:	2206      	movs	r2, #6
 802cace:	705a      	strb	r2, [r3, #1]
      break;
 802cad0:	e04e      	b.n	802cb70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802cad2:	687b      	ldr	r3, [r7, #4]
 802cad4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802cad8:	2b00      	cmp	r3, #0
 802cada:	d019      	beq.n	802cb10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802cadc:	687b      	ldr	r3, [r7, #4]
 802cade:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802cae2:	687b      	ldr	r3, [r7, #4]
 802cae4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802cae8:	23ff      	movs	r3, #255	; 0xff
 802caea:	6878      	ldr	r0, [r7, #4]
 802caec:	f000 f926 	bl	802cd3c <USBH_Get_StringDesc>
 802caf0:	4603      	mov	r3, r0
 802caf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802caf4:	7bbb      	ldrb	r3, [r7, #14]
 802caf6:	2b00      	cmp	r3, #0
 802caf8:	d103      	bne.n	802cb02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cafa:	687b      	ldr	r3, [r7, #4]
 802cafc:	2207      	movs	r2, #7
 802cafe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802cb00:	e038      	b.n	802cb74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb02:	7bbb      	ldrb	r3, [r7, #14]
 802cb04:	2b03      	cmp	r3, #3
 802cb06:	d135      	bne.n	802cb74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb08:	687b      	ldr	r3, [r7, #4]
 802cb0a:	2207      	movs	r2, #7
 802cb0c:	705a      	strb	r2, [r3, #1]
      break;
 802cb0e:	e031      	b.n	802cb74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802cb10:	687b      	ldr	r3, [r7, #4]
 802cb12:	2207      	movs	r2, #7
 802cb14:	705a      	strb	r2, [r3, #1]
      break;
 802cb16:	e02d      	b.n	802cb74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802cb18:	687b      	ldr	r3, [r7, #4]
 802cb1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802cb1e:	2b00      	cmp	r3, #0
 802cb20:	d017      	beq.n	802cb52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb22:	687b      	ldr	r3, [r7, #4]
 802cb24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802cb28:	687b      	ldr	r3, [r7, #4]
 802cb2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802cb2e:	23ff      	movs	r3, #255	; 0xff
 802cb30:	6878      	ldr	r0, [r7, #4]
 802cb32:	f000 f903 	bl	802cd3c <USBH_Get_StringDesc>
 802cb36:	4603      	mov	r3, r0
 802cb38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802cb3a:	7bbb      	ldrb	r3, [r7, #14]
 802cb3c:	2b00      	cmp	r3, #0
 802cb3e:	d102      	bne.n	802cb46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802cb40:	2300      	movs	r3, #0
 802cb42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802cb44:	e018      	b.n	802cb78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802cb46:	7bbb      	ldrb	r3, [r7, #14]
 802cb48:	2b03      	cmp	r3, #3
 802cb4a:	d115      	bne.n	802cb78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802cb4c:	2300      	movs	r3, #0
 802cb4e:	73fb      	strb	r3, [r7, #15]
      break;
 802cb50:	e012      	b.n	802cb78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802cb52:	2300      	movs	r3, #0
 802cb54:	73fb      	strb	r3, [r7, #15]
      break;
 802cb56:	e00f      	b.n	802cb78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 802cb58:	bf00      	nop
 802cb5a:	e00e      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb5c:	bf00      	nop
 802cb5e:	e00c      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb60:	bf00      	nop
 802cb62:	e00a      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb64:	bf00      	nop
 802cb66:	e008      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb68:	bf00      	nop
 802cb6a:	e006      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb6c:	bf00      	nop
 802cb6e:	e004      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb70:	bf00      	nop
 802cb72:	e002      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb74:	bf00      	nop
 802cb76:	e000      	b.n	802cb7a <USBH_HandleEnum+0x3be>
      break;
 802cb78:	bf00      	nop
  }
  return Status;
 802cb7a:	7bfb      	ldrb	r3, [r7, #15]
}
 802cb7c:	4618      	mov	r0, r3
 802cb7e:	3710      	adds	r7, #16
 802cb80:	46bd      	mov	sp, r7
 802cb82:	bd80      	pop	{r7, pc}

0802cb84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802cb84:	b480      	push	{r7}
 802cb86:	b083      	sub	sp, #12
 802cb88:	af00      	add	r7, sp, #0
 802cb8a:	6078      	str	r0, [r7, #4]
 802cb8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802cb8e:	687b      	ldr	r3, [r7, #4]
 802cb90:	683a      	ldr	r2, [r7, #0]
 802cb92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802cb96:	bf00      	nop
 802cb98:	370c      	adds	r7, #12
 802cb9a:	46bd      	mov	sp, r7
 802cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cba0:	4770      	bx	lr

0802cba2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802cba2:	b580      	push	{r7, lr}
 802cba4:	b082      	sub	sp, #8
 802cba6:	af00      	add	r7, sp, #0
 802cba8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802cbaa:	687b      	ldr	r3, [r7, #4]
 802cbac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cbb0:	1c5a      	adds	r2, r3, #1
 802cbb2:	687b      	ldr	r3, [r7, #4]
 802cbb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802cbb8:	6878      	ldr	r0, [r7, #4]
 802cbba:	f000 f804 	bl	802cbc6 <USBH_HandleSof>
}
 802cbbe:	bf00      	nop
 802cbc0:	3708      	adds	r7, #8
 802cbc2:	46bd      	mov	sp, r7
 802cbc4:	bd80      	pop	{r7, pc}

0802cbc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802cbc6:	b580      	push	{r7, lr}
 802cbc8:	b082      	sub	sp, #8
 802cbca:	af00      	add	r7, sp, #0
 802cbcc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802cbce:	687b      	ldr	r3, [r7, #4]
 802cbd0:	781b      	ldrb	r3, [r3, #0]
 802cbd2:	b2db      	uxtb	r3, r3
 802cbd4:	2b0b      	cmp	r3, #11
 802cbd6:	d10a      	bne.n	802cbee <USBH_HandleSof+0x28>
 802cbd8:	687b      	ldr	r3, [r7, #4]
 802cbda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbde:	2b00      	cmp	r3, #0
 802cbe0:	d005      	beq.n	802cbee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802cbe2:	687b      	ldr	r3, [r7, #4]
 802cbe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cbe8:	699b      	ldr	r3, [r3, #24]
 802cbea:	6878      	ldr	r0, [r7, #4]
 802cbec:	4798      	blx	r3
  }
}
 802cbee:	bf00      	nop
 802cbf0:	3708      	adds	r7, #8
 802cbf2:	46bd      	mov	sp, r7
 802cbf4:	bd80      	pop	{r7, pc}

0802cbf6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802cbf6:	b480      	push	{r7}
 802cbf8:	b083      	sub	sp, #12
 802cbfa:	af00      	add	r7, sp, #0
 802cbfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802cbfe:	687b      	ldr	r3, [r7, #4]
 802cc00:	2201      	movs	r2, #1
 802cc02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802cc06:	bf00      	nop
}
 802cc08:	370c      	adds	r7, #12
 802cc0a:	46bd      	mov	sp, r7
 802cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc10:	4770      	bx	lr

0802cc12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802cc12:	b480      	push	{r7}
 802cc14:	b083      	sub	sp, #12
 802cc16:	af00      	add	r7, sp, #0
 802cc18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802cc1a:	687b      	ldr	r3, [r7, #4]
 802cc1c:	2200      	movs	r2, #0
 802cc1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802cc22:	bf00      	nop
}
 802cc24:	370c      	adds	r7, #12
 802cc26:	46bd      	mov	sp, r7
 802cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc2c:	4770      	bx	lr

0802cc2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802cc2e:	b480      	push	{r7}
 802cc30:	b083      	sub	sp, #12
 802cc32:	af00      	add	r7, sp, #0
 802cc34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802cc36:	687b      	ldr	r3, [r7, #4]
 802cc38:	2201      	movs	r2, #1
 802cc3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802cc3e:	687b      	ldr	r3, [r7, #4]
 802cc40:	2200      	movs	r2, #0
 802cc42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802cc46:	687b      	ldr	r3, [r7, #4]
 802cc48:	2200      	movs	r2, #0
 802cc4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cc4e:	2300      	movs	r3, #0
}
 802cc50:	4618      	mov	r0, r3
 802cc52:	370c      	adds	r7, #12
 802cc54:	46bd      	mov	sp, r7
 802cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cc5a:	4770      	bx	lr

0802cc5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802cc5c:	b580      	push	{r7, lr}
 802cc5e:	b082      	sub	sp, #8
 802cc60:	af00      	add	r7, sp, #0
 802cc62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802cc64:	687b      	ldr	r3, [r7, #4]
 802cc66:	2201      	movs	r2, #1
 802cc68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802cc6c:	687b      	ldr	r3, [r7, #4]
 802cc6e:	2200      	movs	r2, #0
 802cc70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802cc74:	687b      	ldr	r3, [r7, #4]
 802cc76:	2200      	movs	r2, #0
 802cc78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802cc7c:	6878      	ldr	r0, [r7, #4]
 802cc7e:	f001 f84a 	bl	802dd16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cc82:	687b      	ldr	r3, [r7, #4]
 802cc84:	791b      	ldrb	r3, [r3, #4]
 802cc86:	4619      	mov	r1, r3
 802cc88:	6878      	ldr	r0, [r7, #4]
 802cc8a:	f000 fe91 	bl	802d9b0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cc8e:	687b      	ldr	r3, [r7, #4]
 802cc90:	795b      	ldrb	r3, [r3, #5]
 802cc92:	4619      	mov	r1, r3
 802cc94:	6878      	ldr	r0, [r7, #4]
 802cc96:	f000 fe8b 	bl	802d9b0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cc9a:	2300      	movs	r3, #0
}
 802cc9c:	4618      	mov	r0, r3
 802cc9e:	3708      	adds	r7, #8
 802cca0:	46bd      	mov	sp, r7
 802cca2:	bd80      	pop	{r7, pc}

0802cca4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802cca4:	b580      	push	{r7, lr}
 802cca6:	b086      	sub	sp, #24
 802cca8:	af02      	add	r7, sp, #8
 802ccaa:	6078      	str	r0, [r7, #4]
 802ccac:	460b      	mov	r3, r1
 802ccae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802ccb0:	687b      	ldr	r3, [r7, #4]
 802ccb2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802ccb6:	78fb      	ldrb	r3, [r7, #3]
 802ccb8:	b29b      	uxth	r3, r3
 802ccba:	9300      	str	r3, [sp, #0]
 802ccbc:	4613      	mov	r3, r2
 802ccbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 802ccc2:	2100      	movs	r1, #0
 802ccc4:	6878      	ldr	r0, [r7, #4]
 802ccc6:	f000 f864 	bl	802cd92 <USBH_GetDescriptor>
 802ccca:	4603      	mov	r3, r0
 802cccc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802ccce:	7bfb      	ldrb	r3, [r7, #15]
 802ccd0:	2b00      	cmp	r3, #0
 802ccd2:	d10a      	bne.n	802ccea <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802ccd4:	687b      	ldr	r3, [r7, #4]
 802ccd6:	f203 3026 	addw	r0, r3, #806	; 0x326
 802ccda:	687b      	ldr	r3, [r7, #4]
 802ccdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cce0:	78fa      	ldrb	r2, [r7, #3]
 802cce2:	b292      	uxth	r2, r2
 802cce4:	4619      	mov	r1, r3
 802cce6:	f000 f918 	bl	802cf1a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802ccea:	7bfb      	ldrb	r3, [r7, #15]
}
 802ccec:	4618      	mov	r0, r3
 802ccee:	3710      	adds	r7, #16
 802ccf0:	46bd      	mov	sp, r7
 802ccf2:	bd80      	pop	{r7, pc}

0802ccf4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802ccf4:	b580      	push	{r7, lr}
 802ccf6:	b086      	sub	sp, #24
 802ccf8:	af02      	add	r7, sp, #8
 802ccfa:	6078      	str	r0, [r7, #4]
 802ccfc:	460b      	mov	r3, r1
 802ccfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802cd00:	687b      	ldr	r3, [r7, #4]
 802cd02:	331c      	adds	r3, #28
 802cd04:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802cd06:	887b      	ldrh	r3, [r7, #2]
 802cd08:	9300      	str	r3, [sp, #0]
 802cd0a:	68bb      	ldr	r3, [r7, #8]
 802cd0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cd10:	2100      	movs	r1, #0
 802cd12:	6878      	ldr	r0, [r7, #4]
 802cd14:	f000 f83d 	bl	802cd92 <USBH_GetDescriptor>
 802cd18:	4603      	mov	r3, r0
 802cd1a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802cd1c:	7bfb      	ldrb	r3, [r7, #15]
 802cd1e:	2b00      	cmp	r3, #0
 802cd20:	d107      	bne.n	802cd32 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802cd22:	887b      	ldrh	r3, [r7, #2]
 802cd24:	461a      	mov	r2, r3
 802cd26:	68b9      	ldr	r1, [r7, #8]
 802cd28:	6878      	ldr	r0, [r7, #4]
 802cd2a:	f000 f987 	bl	802d03c <USBH_ParseCfgDesc>
 802cd2e:	4603      	mov	r3, r0
 802cd30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802cd32:	7bfb      	ldrb	r3, [r7, #15]
}
 802cd34:	4618      	mov	r0, r3
 802cd36:	3710      	adds	r7, #16
 802cd38:	46bd      	mov	sp, r7
 802cd3a:	bd80      	pop	{r7, pc}

0802cd3c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802cd3c:	b580      	push	{r7, lr}
 802cd3e:	b088      	sub	sp, #32
 802cd40:	af02      	add	r7, sp, #8
 802cd42:	60f8      	str	r0, [r7, #12]
 802cd44:	607a      	str	r2, [r7, #4]
 802cd46:	461a      	mov	r2, r3
 802cd48:	460b      	mov	r3, r1
 802cd4a:	72fb      	strb	r3, [r7, #11]
 802cd4c:	4613      	mov	r3, r2
 802cd4e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802cd50:	7afb      	ldrb	r3, [r7, #11]
 802cd52:	b29b      	uxth	r3, r3
 802cd54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802cd58:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802cd5a:	68fb      	ldr	r3, [r7, #12]
 802cd5c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802cd60:	893b      	ldrh	r3, [r7, #8]
 802cd62:	9300      	str	r3, [sp, #0]
 802cd64:	460b      	mov	r3, r1
 802cd66:	2100      	movs	r1, #0
 802cd68:	68f8      	ldr	r0, [r7, #12]
 802cd6a:	f000 f812 	bl	802cd92 <USBH_GetDescriptor>
 802cd6e:	4603      	mov	r3, r0
 802cd70:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802cd72:	7dfb      	ldrb	r3, [r7, #23]
 802cd74:	2b00      	cmp	r3, #0
 802cd76:	d107      	bne.n	802cd88 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802cd78:	68fb      	ldr	r3, [r7, #12]
 802cd7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cd7e:	893a      	ldrh	r2, [r7, #8]
 802cd80:	6879      	ldr	r1, [r7, #4]
 802cd82:	4618      	mov	r0, r3
 802cd84:	f000 fb24 	bl	802d3d0 <USBH_ParseStringDesc>
  }

  return status;
 802cd88:	7dfb      	ldrb	r3, [r7, #23]
}
 802cd8a:	4618      	mov	r0, r3
 802cd8c:	3718      	adds	r7, #24
 802cd8e:	46bd      	mov	sp, r7
 802cd90:	bd80      	pop	{r7, pc}

0802cd92 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802cd92:	b580      	push	{r7, lr}
 802cd94:	b084      	sub	sp, #16
 802cd96:	af00      	add	r7, sp, #0
 802cd98:	60f8      	str	r0, [r7, #12]
 802cd9a:	607b      	str	r3, [r7, #4]
 802cd9c:	460b      	mov	r3, r1
 802cd9e:	72fb      	strb	r3, [r7, #11]
 802cda0:	4613      	mov	r3, r2
 802cda2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802cda4:	68fb      	ldr	r3, [r7, #12]
 802cda6:	789b      	ldrb	r3, [r3, #2]
 802cda8:	2b01      	cmp	r3, #1
 802cdaa:	d11c      	bne.n	802cde6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802cdac:	7afb      	ldrb	r3, [r7, #11]
 802cdae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802cdb2:	b2da      	uxtb	r2, r3
 802cdb4:	68fb      	ldr	r3, [r7, #12]
 802cdb6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802cdb8:	68fb      	ldr	r3, [r7, #12]
 802cdba:	2206      	movs	r2, #6
 802cdbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802cdbe:	68fb      	ldr	r3, [r7, #12]
 802cdc0:	893a      	ldrh	r2, [r7, #8]
 802cdc2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802cdc4:	893b      	ldrh	r3, [r7, #8]
 802cdc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802cdca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802cdce:	d104      	bne.n	802cdda <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802cdd0:	68fb      	ldr	r3, [r7, #12]
 802cdd2:	f240 4209 	movw	r2, #1033	; 0x409
 802cdd6:	829a      	strh	r2, [r3, #20]
 802cdd8:	e002      	b.n	802cde0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802cdda:	68fb      	ldr	r3, [r7, #12]
 802cddc:	2200      	movs	r2, #0
 802cdde:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802cde0:	68fb      	ldr	r3, [r7, #12]
 802cde2:	8b3a      	ldrh	r2, [r7, #24]
 802cde4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802cde6:	8b3b      	ldrh	r3, [r7, #24]
 802cde8:	461a      	mov	r2, r3
 802cdea:	6879      	ldr	r1, [r7, #4]
 802cdec:	68f8      	ldr	r0, [r7, #12]
 802cdee:	f000 fb3d 	bl	802d46c <USBH_CtlReq>
 802cdf2:	4603      	mov	r3, r0
}
 802cdf4:	4618      	mov	r0, r3
 802cdf6:	3710      	adds	r7, #16
 802cdf8:	46bd      	mov	sp, r7
 802cdfa:	bd80      	pop	{r7, pc}

0802cdfc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802cdfc:	b580      	push	{r7, lr}
 802cdfe:	b082      	sub	sp, #8
 802ce00:	af00      	add	r7, sp, #0
 802ce02:	6078      	str	r0, [r7, #4]
 802ce04:	460b      	mov	r3, r1
 802ce06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce08:	687b      	ldr	r3, [r7, #4]
 802ce0a:	789b      	ldrb	r3, [r3, #2]
 802ce0c:	2b01      	cmp	r3, #1
 802ce0e:	d10f      	bne.n	802ce30 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802ce10:	687b      	ldr	r3, [r7, #4]
 802ce12:	2200      	movs	r2, #0
 802ce14:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802ce16:	687b      	ldr	r3, [r7, #4]
 802ce18:	2205      	movs	r2, #5
 802ce1a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802ce1c:	78fb      	ldrb	r3, [r7, #3]
 802ce1e:	b29a      	uxth	r2, r3
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce24:	687b      	ldr	r3, [r7, #4]
 802ce26:	2200      	movs	r2, #0
 802ce28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce2a:	687b      	ldr	r3, [r7, #4]
 802ce2c:	2200      	movs	r2, #0
 802ce2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce30:	2200      	movs	r2, #0
 802ce32:	2100      	movs	r1, #0
 802ce34:	6878      	ldr	r0, [r7, #4]
 802ce36:	f000 fb19 	bl	802d46c <USBH_CtlReq>
 802ce3a:	4603      	mov	r3, r0
}
 802ce3c:	4618      	mov	r0, r3
 802ce3e:	3708      	adds	r7, #8
 802ce40:	46bd      	mov	sp, r7
 802ce42:	bd80      	pop	{r7, pc}

0802ce44 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802ce44:	b580      	push	{r7, lr}
 802ce46:	b082      	sub	sp, #8
 802ce48:	af00      	add	r7, sp, #0
 802ce4a:	6078      	str	r0, [r7, #4]
 802ce4c:	460b      	mov	r3, r1
 802ce4e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802ce50:	687b      	ldr	r3, [r7, #4]
 802ce52:	789b      	ldrb	r3, [r3, #2]
 802ce54:	2b01      	cmp	r3, #1
 802ce56:	d10e      	bne.n	802ce76 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802ce58:	687b      	ldr	r3, [r7, #4]
 802ce5a:	2200      	movs	r2, #0
 802ce5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802ce5e:	687b      	ldr	r3, [r7, #4]
 802ce60:	2209      	movs	r2, #9
 802ce62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802ce64:	687b      	ldr	r3, [r7, #4]
 802ce66:	887a      	ldrh	r2, [r7, #2]
 802ce68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ce6a:	687b      	ldr	r3, [r7, #4]
 802ce6c:	2200      	movs	r2, #0
 802ce6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce70:	687b      	ldr	r3, [r7, #4]
 802ce72:	2200      	movs	r2, #0
 802ce74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802ce76:	2200      	movs	r2, #0
 802ce78:	2100      	movs	r1, #0
 802ce7a:	6878      	ldr	r0, [r7, #4]
 802ce7c:	f000 faf6 	bl	802d46c <USBH_CtlReq>
 802ce80:	4603      	mov	r3, r0
}
 802ce82:	4618      	mov	r0, r3
 802ce84:	3708      	adds	r7, #8
 802ce86:	46bd      	mov	sp, r7
 802ce88:	bd80      	pop	{r7, pc}

0802ce8a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802ce8a:	b580      	push	{r7, lr}
 802ce8c:	b082      	sub	sp, #8
 802ce8e:	af00      	add	r7, sp, #0
 802ce90:	6078      	str	r0, [r7, #4]
 802ce92:	460b      	mov	r3, r1
 802ce94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce96:	687b      	ldr	r3, [r7, #4]
 802ce98:	789b      	ldrb	r3, [r3, #2]
 802ce9a:	2b01      	cmp	r3, #1
 802ce9c:	d10f      	bne.n	802cebe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802ce9e:	687b      	ldr	r3, [r7, #4]
 802cea0:	2200      	movs	r2, #0
 802cea2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802cea4:	687b      	ldr	r3, [r7, #4]
 802cea6:	2203      	movs	r2, #3
 802cea8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802ceaa:	78fb      	ldrb	r3, [r7, #3]
 802ceac:	b29a      	uxth	r2, r3
 802ceae:	687b      	ldr	r3, [r7, #4]
 802ceb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802ceb2:	687b      	ldr	r3, [r7, #4]
 802ceb4:	2200      	movs	r2, #0
 802ceb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ceb8:	687b      	ldr	r3, [r7, #4]
 802ceba:	2200      	movs	r2, #0
 802cebc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802cebe:	2200      	movs	r2, #0
 802cec0:	2100      	movs	r1, #0
 802cec2:	6878      	ldr	r0, [r7, #4]
 802cec4:	f000 fad2 	bl	802d46c <USBH_CtlReq>
 802cec8:	4603      	mov	r3, r0
}
 802ceca:	4618      	mov	r0, r3
 802cecc:	3708      	adds	r7, #8
 802cece:	46bd      	mov	sp, r7
 802ced0:	bd80      	pop	{r7, pc}

0802ced2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802ced2:	b580      	push	{r7, lr}
 802ced4:	b082      	sub	sp, #8
 802ced6:	af00      	add	r7, sp, #0
 802ced8:	6078      	str	r0, [r7, #4]
 802ceda:	460b      	mov	r3, r1
 802cedc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802cede:	687b      	ldr	r3, [r7, #4]
 802cee0:	789b      	ldrb	r3, [r3, #2]
 802cee2:	2b01      	cmp	r3, #1
 802cee4:	d10f      	bne.n	802cf06 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802cee6:	687b      	ldr	r3, [r7, #4]
 802cee8:	2202      	movs	r2, #2
 802ceea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802ceec:	687b      	ldr	r3, [r7, #4]
 802ceee:	2201      	movs	r2, #1
 802cef0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802cef2:	687b      	ldr	r3, [r7, #4]
 802cef4:	2200      	movs	r2, #0
 802cef6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802cef8:	78fb      	ldrb	r3, [r7, #3]
 802cefa:	b29a      	uxth	r2, r3
 802cefc:	687b      	ldr	r3, [r7, #4]
 802cefe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cf00:	687b      	ldr	r3, [r7, #4]
 802cf02:	2200      	movs	r2, #0
 802cf04:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802cf06:	2200      	movs	r2, #0
 802cf08:	2100      	movs	r1, #0
 802cf0a:	6878      	ldr	r0, [r7, #4]
 802cf0c:	f000 faae 	bl	802d46c <USBH_CtlReq>
 802cf10:	4603      	mov	r3, r0
}
 802cf12:	4618      	mov	r0, r3
 802cf14:	3708      	adds	r7, #8
 802cf16:	46bd      	mov	sp, r7
 802cf18:	bd80      	pop	{r7, pc}

0802cf1a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802cf1a:	b480      	push	{r7}
 802cf1c:	b085      	sub	sp, #20
 802cf1e:	af00      	add	r7, sp, #0
 802cf20:	60f8      	str	r0, [r7, #12]
 802cf22:	60b9      	str	r1, [r7, #8]
 802cf24:	4613      	mov	r3, r2
 802cf26:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802cf28:	68bb      	ldr	r3, [r7, #8]
 802cf2a:	781a      	ldrb	r2, [r3, #0]
 802cf2c:	68fb      	ldr	r3, [r7, #12]
 802cf2e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802cf30:	68bb      	ldr	r3, [r7, #8]
 802cf32:	785a      	ldrb	r2, [r3, #1]
 802cf34:	68fb      	ldr	r3, [r7, #12]
 802cf36:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802cf38:	68bb      	ldr	r3, [r7, #8]
 802cf3a:	3302      	adds	r3, #2
 802cf3c:	781b      	ldrb	r3, [r3, #0]
 802cf3e:	b29a      	uxth	r2, r3
 802cf40:	68bb      	ldr	r3, [r7, #8]
 802cf42:	3303      	adds	r3, #3
 802cf44:	781b      	ldrb	r3, [r3, #0]
 802cf46:	b29b      	uxth	r3, r3
 802cf48:	021b      	lsls	r3, r3, #8
 802cf4a:	b29b      	uxth	r3, r3
 802cf4c:	4313      	orrs	r3, r2
 802cf4e:	b29a      	uxth	r2, r3
 802cf50:	68fb      	ldr	r3, [r7, #12]
 802cf52:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802cf54:	68bb      	ldr	r3, [r7, #8]
 802cf56:	791a      	ldrb	r2, [r3, #4]
 802cf58:	68fb      	ldr	r3, [r7, #12]
 802cf5a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802cf5c:	68bb      	ldr	r3, [r7, #8]
 802cf5e:	795a      	ldrb	r2, [r3, #5]
 802cf60:	68fb      	ldr	r3, [r7, #12]
 802cf62:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802cf64:	68bb      	ldr	r3, [r7, #8]
 802cf66:	799a      	ldrb	r2, [r3, #6]
 802cf68:	68fb      	ldr	r3, [r7, #12]
 802cf6a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802cf6c:	68bb      	ldr	r3, [r7, #8]
 802cf6e:	79da      	ldrb	r2, [r3, #7]
 802cf70:	68fb      	ldr	r3, [r7, #12]
 802cf72:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802cf74:	68fb      	ldr	r3, [r7, #12]
 802cf76:	79db      	ldrb	r3, [r3, #7]
 802cf78:	2b20      	cmp	r3, #32
 802cf7a:	dc11      	bgt.n	802cfa0 <USBH_ParseDevDesc+0x86>
 802cf7c:	2b08      	cmp	r3, #8
 802cf7e:	db16      	blt.n	802cfae <USBH_ParseDevDesc+0x94>
 802cf80:	3b08      	subs	r3, #8
 802cf82:	2201      	movs	r2, #1
 802cf84:	fa02 f303 	lsl.w	r3, r2, r3
 802cf88:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802cf8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cf90:	2b00      	cmp	r3, #0
 802cf92:	bf14      	ite	ne
 802cf94:	2301      	movne	r3, #1
 802cf96:	2300      	moveq	r3, #0
 802cf98:	b2db      	uxtb	r3, r3
 802cf9a:	2b00      	cmp	r3, #0
 802cf9c:	d102      	bne.n	802cfa4 <USBH_ParseDevDesc+0x8a>
 802cf9e:	e006      	b.n	802cfae <USBH_ParseDevDesc+0x94>
 802cfa0:	2b40      	cmp	r3, #64	; 0x40
 802cfa2:	d104      	bne.n	802cfae <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802cfa4:	68fb      	ldr	r3, [r7, #12]
 802cfa6:	79da      	ldrb	r2, [r3, #7]
 802cfa8:	68fb      	ldr	r3, [r7, #12]
 802cfaa:	71da      	strb	r2, [r3, #7]
      break;
 802cfac:	e003      	b.n	802cfb6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802cfae:	68fb      	ldr	r3, [r7, #12]
 802cfb0:	2240      	movs	r2, #64	; 0x40
 802cfb2:	71da      	strb	r2, [r3, #7]
      break;
 802cfb4:	bf00      	nop
  }

  if (length > 8U)
 802cfb6:	88fb      	ldrh	r3, [r7, #6]
 802cfb8:	2b08      	cmp	r3, #8
 802cfba:	d939      	bls.n	802d030 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802cfbc:	68bb      	ldr	r3, [r7, #8]
 802cfbe:	3308      	adds	r3, #8
 802cfc0:	781b      	ldrb	r3, [r3, #0]
 802cfc2:	b29a      	uxth	r2, r3
 802cfc4:	68bb      	ldr	r3, [r7, #8]
 802cfc6:	3309      	adds	r3, #9
 802cfc8:	781b      	ldrb	r3, [r3, #0]
 802cfca:	b29b      	uxth	r3, r3
 802cfcc:	021b      	lsls	r3, r3, #8
 802cfce:	b29b      	uxth	r3, r3
 802cfd0:	4313      	orrs	r3, r2
 802cfd2:	b29a      	uxth	r2, r3
 802cfd4:	68fb      	ldr	r3, [r7, #12]
 802cfd6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802cfd8:	68bb      	ldr	r3, [r7, #8]
 802cfda:	330a      	adds	r3, #10
 802cfdc:	781b      	ldrb	r3, [r3, #0]
 802cfde:	b29a      	uxth	r2, r3
 802cfe0:	68bb      	ldr	r3, [r7, #8]
 802cfe2:	330b      	adds	r3, #11
 802cfe4:	781b      	ldrb	r3, [r3, #0]
 802cfe6:	b29b      	uxth	r3, r3
 802cfe8:	021b      	lsls	r3, r3, #8
 802cfea:	b29b      	uxth	r3, r3
 802cfec:	4313      	orrs	r3, r2
 802cfee:	b29a      	uxth	r2, r3
 802cff0:	68fb      	ldr	r3, [r7, #12]
 802cff2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802cff4:	68bb      	ldr	r3, [r7, #8]
 802cff6:	330c      	adds	r3, #12
 802cff8:	781b      	ldrb	r3, [r3, #0]
 802cffa:	b29a      	uxth	r2, r3
 802cffc:	68bb      	ldr	r3, [r7, #8]
 802cffe:	330d      	adds	r3, #13
 802d000:	781b      	ldrb	r3, [r3, #0]
 802d002:	b29b      	uxth	r3, r3
 802d004:	021b      	lsls	r3, r3, #8
 802d006:	b29b      	uxth	r3, r3
 802d008:	4313      	orrs	r3, r2
 802d00a:	b29a      	uxth	r2, r3
 802d00c:	68fb      	ldr	r3, [r7, #12]
 802d00e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802d010:	68bb      	ldr	r3, [r7, #8]
 802d012:	7b9a      	ldrb	r2, [r3, #14]
 802d014:	68fb      	ldr	r3, [r7, #12]
 802d016:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802d018:	68bb      	ldr	r3, [r7, #8]
 802d01a:	7bda      	ldrb	r2, [r3, #15]
 802d01c:	68fb      	ldr	r3, [r7, #12]
 802d01e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802d020:	68bb      	ldr	r3, [r7, #8]
 802d022:	7c1a      	ldrb	r2, [r3, #16]
 802d024:	68fb      	ldr	r3, [r7, #12]
 802d026:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802d028:	68bb      	ldr	r3, [r7, #8]
 802d02a:	7c5a      	ldrb	r2, [r3, #17]
 802d02c:	68fb      	ldr	r3, [r7, #12]
 802d02e:	745a      	strb	r2, [r3, #17]
  }
}
 802d030:	bf00      	nop
 802d032:	3714      	adds	r7, #20
 802d034:	46bd      	mov	sp, r7
 802d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d03a:	4770      	bx	lr

0802d03c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802d03c:	b580      	push	{r7, lr}
 802d03e:	b08c      	sub	sp, #48	; 0x30
 802d040:	af00      	add	r7, sp, #0
 802d042:	60f8      	str	r0, [r7, #12]
 802d044:	60b9      	str	r1, [r7, #8]
 802d046:	4613      	mov	r3, r2
 802d048:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802d04a:	68fb      	ldr	r3, [r7, #12]
 802d04c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802d050:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802d052:	2300      	movs	r3, #0
 802d054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802d058:	68bb      	ldr	r3, [r7, #8]
 802d05a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802d05c:	2300      	movs	r3, #0
 802d05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802d062:	2300      	movs	r3, #0
 802d064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802d068:	68bb      	ldr	r3, [r7, #8]
 802d06a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802d06c:	68bb      	ldr	r3, [r7, #8]
 802d06e:	781a      	ldrb	r2, [r3, #0]
 802d070:	6a3b      	ldr	r3, [r7, #32]
 802d072:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802d074:	68bb      	ldr	r3, [r7, #8]
 802d076:	785a      	ldrb	r2, [r3, #1]
 802d078:	6a3b      	ldr	r3, [r7, #32]
 802d07a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802d07c:	68bb      	ldr	r3, [r7, #8]
 802d07e:	3302      	adds	r3, #2
 802d080:	781b      	ldrb	r3, [r3, #0]
 802d082:	b29a      	uxth	r2, r3
 802d084:	68bb      	ldr	r3, [r7, #8]
 802d086:	3303      	adds	r3, #3
 802d088:	781b      	ldrb	r3, [r3, #0]
 802d08a:	b29b      	uxth	r3, r3
 802d08c:	021b      	lsls	r3, r3, #8
 802d08e:	b29b      	uxth	r3, r3
 802d090:	4313      	orrs	r3, r2
 802d092:	b29b      	uxth	r3, r3
 802d094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802d098:	bf28      	it	cs
 802d09a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802d09e:	b29a      	uxth	r2, r3
 802d0a0:	6a3b      	ldr	r3, [r7, #32]
 802d0a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802d0a4:	68bb      	ldr	r3, [r7, #8]
 802d0a6:	791a      	ldrb	r2, [r3, #4]
 802d0a8:	6a3b      	ldr	r3, [r7, #32]
 802d0aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802d0ac:	68bb      	ldr	r3, [r7, #8]
 802d0ae:	795a      	ldrb	r2, [r3, #5]
 802d0b0:	6a3b      	ldr	r3, [r7, #32]
 802d0b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802d0b4:	68bb      	ldr	r3, [r7, #8]
 802d0b6:	799a      	ldrb	r2, [r3, #6]
 802d0b8:	6a3b      	ldr	r3, [r7, #32]
 802d0ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802d0bc:	68bb      	ldr	r3, [r7, #8]
 802d0be:	79da      	ldrb	r2, [r3, #7]
 802d0c0:	6a3b      	ldr	r3, [r7, #32]
 802d0c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802d0c4:	68bb      	ldr	r3, [r7, #8]
 802d0c6:	7a1a      	ldrb	r2, [r3, #8]
 802d0c8:	6a3b      	ldr	r3, [r7, #32]
 802d0ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802d0cc:	6a3b      	ldr	r3, [r7, #32]
 802d0ce:	781b      	ldrb	r3, [r3, #0]
 802d0d0:	2b09      	cmp	r3, #9
 802d0d2:	d002      	beq.n	802d0da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802d0d4:	6a3b      	ldr	r3, [r7, #32]
 802d0d6:	2209      	movs	r2, #9
 802d0d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802d0da:	88fb      	ldrh	r3, [r7, #6]
 802d0dc:	2b09      	cmp	r3, #9
 802d0de:	f240 809d 	bls.w	802d21c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802d0e2:	2309      	movs	r3, #9
 802d0e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802d0e6:	2300      	movs	r3, #0
 802d0e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d0ea:	e081      	b.n	802d1f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d0ec:	f107 0316 	add.w	r3, r7, #22
 802d0f0:	4619      	mov	r1, r3
 802d0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d0f4:	f000 f99f 	bl	802d436 <USBH_GetNextDesc>
 802d0f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0fc:	785b      	ldrb	r3, [r3, #1]
 802d0fe:	2b04      	cmp	r3, #4
 802d100:	d176      	bne.n	802d1f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802d102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d104:	781b      	ldrb	r3, [r3, #0]
 802d106:	2b09      	cmp	r3, #9
 802d108:	d002      	beq.n	802d110 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d10c:	2209      	movs	r2, #9
 802d10e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802d110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d114:	221a      	movs	r2, #26
 802d116:	fb02 f303 	mul.w	r3, r2, r3
 802d11a:	3308      	adds	r3, #8
 802d11c:	6a3a      	ldr	r2, [r7, #32]
 802d11e:	4413      	add	r3, r2
 802d120:	3302      	adds	r3, #2
 802d122:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802d124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802d126:	69f8      	ldr	r0, [r7, #28]
 802d128:	f000 f87e 	bl	802d228 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802d12c:	2300      	movs	r3, #0
 802d12e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802d132:	2300      	movs	r3, #0
 802d134:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d136:	e043      	b.n	802d1c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d138:	f107 0316 	add.w	r3, r7, #22
 802d13c:	4619      	mov	r1, r3
 802d13e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d140:	f000 f979 	bl	802d436 <USBH_GetNextDesc>
 802d144:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d148:	785b      	ldrb	r3, [r3, #1]
 802d14a:	2b05      	cmp	r3, #5
 802d14c:	d138      	bne.n	802d1c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802d14e:	69fb      	ldr	r3, [r7, #28]
 802d150:	795b      	ldrb	r3, [r3, #5]
 802d152:	2b01      	cmp	r3, #1
 802d154:	d10f      	bne.n	802d176 <USBH_ParseCfgDesc+0x13a>
 802d156:	69fb      	ldr	r3, [r7, #28]
 802d158:	799b      	ldrb	r3, [r3, #6]
 802d15a:	2b02      	cmp	r3, #2
 802d15c:	d10b      	bne.n	802d176 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d15e:	69fb      	ldr	r3, [r7, #28]
 802d160:	79db      	ldrb	r3, [r3, #7]
 802d162:	2b00      	cmp	r3, #0
 802d164:	d10f      	bne.n	802d186 <USBH_ParseCfgDesc+0x14a>
 802d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d168:	781b      	ldrb	r3, [r3, #0]
 802d16a:	2b09      	cmp	r3, #9
 802d16c:	d00b      	beq.n	802d186 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d170:	2209      	movs	r2, #9
 802d172:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d174:	e007      	b.n	802d186 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802d176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d178:	781b      	ldrb	r3, [r3, #0]
 802d17a:	2b07      	cmp	r3, #7
 802d17c:	d004      	beq.n	802d188 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d180:	2207      	movs	r2, #7
 802d182:	701a      	strb	r2, [r3, #0]
 802d184:	e000      	b.n	802d188 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d186:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802d188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d18c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d190:	3201      	adds	r2, #1
 802d192:	00d2      	lsls	r2, r2, #3
 802d194:	211a      	movs	r1, #26
 802d196:	fb01 f303 	mul.w	r3, r1, r3
 802d19a:	4413      	add	r3, r2
 802d19c:	3308      	adds	r3, #8
 802d19e:	6a3a      	ldr	r2, [r7, #32]
 802d1a0:	4413      	add	r3, r2
 802d1a2:	3304      	adds	r3, #4
 802d1a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802d1a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d1a8:	69b9      	ldr	r1, [r7, #24]
 802d1aa:	68f8      	ldr	r0, [r7, #12]
 802d1ac:	f000 f86b 	bl	802d286 <USBH_ParseEPDesc>
 802d1b0:	4603      	mov	r3, r0
 802d1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802d1b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d1ba:	3301      	adds	r3, #1
 802d1bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d1c0:	69fb      	ldr	r3, [r7, #28]
 802d1c2:	791b      	ldrb	r3, [r3, #4]
 802d1c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1c8:	429a      	cmp	r2, r3
 802d1ca:	d204      	bcs.n	802d1d6 <USBH_ParseCfgDesc+0x19a>
 802d1cc:	6a3b      	ldr	r3, [r7, #32]
 802d1ce:	885a      	ldrh	r2, [r3, #2]
 802d1d0:	8afb      	ldrh	r3, [r7, #22]
 802d1d2:	429a      	cmp	r2, r3
 802d1d4:	d8b0      	bhi.n	802d138 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802d1d6:	69fb      	ldr	r3, [r7, #28]
 802d1d8:	791b      	ldrb	r3, [r3, #4]
 802d1da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d1de:	429a      	cmp	r2, r3
 802d1e0:	d201      	bcs.n	802d1e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802d1e2:	2303      	movs	r3, #3
 802d1e4:	e01c      	b.n	802d220 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802d1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d1ea:	3301      	adds	r3, #1
 802d1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d1f4:	2b01      	cmp	r3, #1
 802d1f6:	d805      	bhi.n	802d204 <USBH_ParseCfgDesc+0x1c8>
 802d1f8:	6a3b      	ldr	r3, [r7, #32]
 802d1fa:	885a      	ldrh	r2, [r3, #2]
 802d1fc:	8afb      	ldrh	r3, [r7, #22]
 802d1fe:	429a      	cmp	r2, r3
 802d200:	f63f af74 	bhi.w	802d0ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802d204:	6a3b      	ldr	r3, [r7, #32]
 802d206:	791b      	ldrb	r3, [r3, #4]
 802d208:	2b02      	cmp	r3, #2
 802d20a:	bf28      	it	cs
 802d20c:	2302      	movcs	r3, #2
 802d20e:	b2db      	uxtb	r3, r3
 802d210:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802d214:	429a      	cmp	r2, r3
 802d216:	d201      	bcs.n	802d21c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802d218:	2303      	movs	r3, #3
 802d21a:	e001      	b.n	802d220 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802d21c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802d220:	4618      	mov	r0, r3
 802d222:	3730      	adds	r7, #48	; 0x30
 802d224:	46bd      	mov	sp, r7
 802d226:	bd80      	pop	{r7, pc}

0802d228 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802d228:	b480      	push	{r7}
 802d22a:	b083      	sub	sp, #12
 802d22c:	af00      	add	r7, sp, #0
 802d22e:	6078      	str	r0, [r7, #4]
 802d230:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802d232:	683b      	ldr	r3, [r7, #0]
 802d234:	781a      	ldrb	r2, [r3, #0]
 802d236:	687b      	ldr	r3, [r7, #4]
 802d238:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802d23a:	683b      	ldr	r3, [r7, #0]
 802d23c:	785a      	ldrb	r2, [r3, #1]
 802d23e:	687b      	ldr	r3, [r7, #4]
 802d240:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802d242:	683b      	ldr	r3, [r7, #0]
 802d244:	789a      	ldrb	r2, [r3, #2]
 802d246:	687b      	ldr	r3, [r7, #4]
 802d248:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802d24a:	683b      	ldr	r3, [r7, #0]
 802d24c:	78da      	ldrb	r2, [r3, #3]
 802d24e:	687b      	ldr	r3, [r7, #4]
 802d250:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802d252:	683b      	ldr	r3, [r7, #0]
 802d254:	791a      	ldrb	r2, [r3, #4]
 802d256:	687b      	ldr	r3, [r7, #4]
 802d258:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802d25a:	683b      	ldr	r3, [r7, #0]
 802d25c:	795a      	ldrb	r2, [r3, #5]
 802d25e:	687b      	ldr	r3, [r7, #4]
 802d260:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802d262:	683b      	ldr	r3, [r7, #0]
 802d264:	799a      	ldrb	r2, [r3, #6]
 802d266:	687b      	ldr	r3, [r7, #4]
 802d268:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802d26a:	683b      	ldr	r3, [r7, #0]
 802d26c:	79da      	ldrb	r2, [r3, #7]
 802d26e:	687b      	ldr	r3, [r7, #4]
 802d270:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802d272:	683b      	ldr	r3, [r7, #0]
 802d274:	7a1a      	ldrb	r2, [r3, #8]
 802d276:	687b      	ldr	r3, [r7, #4]
 802d278:	721a      	strb	r2, [r3, #8]
}
 802d27a:	bf00      	nop
 802d27c:	370c      	adds	r7, #12
 802d27e:	46bd      	mov	sp, r7
 802d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d284:	4770      	bx	lr

0802d286 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802d286:	b480      	push	{r7}
 802d288:	b087      	sub	sp, #28
 802d28a:	af00      	add	r7, sp, #0
 802d28c:	60f8      	str	r0, [r7, #12]
 802d28e:	60b9      	str	r1, [r7, #8]
 802d290:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802d292:	2300      	movs	r3, #0
 802d294:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802d296:	687b      	ldr	r3, [r7, #4]
 802d298:	781a      	ldrb	r2, [r3, #0]
 802d29a:	68bb      	ldr	r3, [r7, #8]
 802d29c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802d29e:	687b      	ldr	r3, [r7, #4]
 802d2a0:	785a      	ldrb	r2, [r3, #1]
 802d2a2:	68bb      	ldr	r3, [r7, #8]
 802d2a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802d2a6:	687b      	ldr	r3, [r7, #4]
 802d2a8:	789a      	ldrb	r2, [r3, #2]
 802d2aa:	68bb      	ldr	r3, [r7, #8]
 802d2ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802d2ae:	687b      	ldr	r3, [r7, #4]
 802d2b0:	78da      	ldrb	r2, [r3, #3]
 802d2b2:	68bb      	ldr	r3, [r7, #8]
 802d2b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802d2b6:	687b      	ldr	r3, [r7, #4]
 802d2b8:	3304      	adds	r3, #4
 802d2ba:	781b      	ldrb	r3, [r3, #0]
 802d2bc:	b29a      	uxth	r2, r3
 802d2be:	687b      	ldr	r3, [r7, #4]
 802d2c0:	3305      	adds	r3, #5
 802d2c2:	781b      	ldrb	r3, [r3, #0]
 802d2c4:	b29b      	uxth	r3, r3
 802d2c6:	021b      	lsls	r3, r3, #8
 802d2c8:	b29b      	uxth	r3, r3
 802d2ca:	4313      	orrs	r3, r2
 802d2cc:	b29a      	uxth	r2, r3
 802d2ce:	68bb      	ldr	r3, [r7, #8]
 802d2d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802d2d2:	687b      	ldr	r3, [r7, #4]
 802d2d4:	799a      	ldrb	r2, [r3, #6]
 802d2d6:	68bb      	ldr	r3, [r7, #8]
 802d2d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802d2da:	68bb      	ldr	r3, [r7, #8]
 802d2dc:	889b      	ldrh	r3, [r3, #4]
 802d2de:	2b00      	cmp	r3, #0
 802d2e0:	d102      	bne.n	802d2e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802d2e2:	2303      	movs	r3, #3
 802d2e4:	75fb      	strb	r3, [r7, #23]
 802d2e6:	e033      	b.n	802d350 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802d2e8:	68bb      	ldr	r3, [r7, #8]
 802d2ea:	889b      	ldrh	r3, [r3, #4]
 802d2ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802d2f0:	f023 0307 	bic.w	r3, r3, #7
 802d2f4:	b29a      	uxth	r2, r3
 802d2f6:	68bb      	ldr	r3, [r7, #8]
 802d2f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802d2fa:	68bb      	ldr	r3, [r7, #8]
 802d2fc:	889b      	ldrh	r3, [r3, #4]
 802d2fe:	b21a      	sxth	r2, r3
 802d300:	687b      	ldr	r3, [r7, #4]
 802d302:	3304      	adds	r3, #4
 802d304:	781b      	ldrb	r3, [r3, #0]
 802d306:	b299      	uxth	r1, r3
 802d308:	687b      	ldr	r3, [r7, #4]
 802d30a:	3305      	adds	r3, #5
 802d30c:	781b      	ldrb	r3, [r3, #0]
 802d30e:	b29b      	uxth	r3, r3
 802d310:	021b      	lsls	r3, r3, #8
 802d312:	b29b      	uxth	r3, r3
 802d314:	430b      	orrs	r3, r1
 802d316:	b29b      	uxth	r3, r3
 802d318:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d31c:	2b00      	cmp	r3, #0
 802d31e:	d110      	bne.n	802d342 <USBH_ParseEPDesc+0xbc>
 802d320:	687b      	ldr	r3, [r7, #4]
 802d322:	3304      	adds	r3, #4
 802d324:	781b      	ldrb	r3, [r3, #0]
 802d326:	b299      	uxth	r1, r3
 802d328:	687b      	ldr	r3, [r7, #4]
 802d32a:	3305      	adds	r3, #5
 802d32c:	781b      	ldrb	r3, [r3, #0]
 802d32e:	b29b      	uxth	r3, r3
 802d330:	021b      	lsls	r3, r3, #8
 802d332:	b29b      	uxth	r3, r3
 802d334:	430b      	orrs	r3, r1
 802d336:	b29b      	uxth	r3, r3
 802d338:	b21b      	sxth	r3, r3
 802d33a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802d33e:	b21b      	sxth	r3, r3
 802d340:	e001      	b.n	802d346 <USBH_ParseEPDesc+0xc0>
 802d342:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d346:	4313      	orrs	r3, r2
 802d348:	b21b      	sxth	r3, r3
 802d34a:	b29a      	uxth	r2, r3
 802d34c:	68bb      	ldr	r3, [r7, #8]
 802d34e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802d350:	68fb      	ldr	r3, [r7, #12]
 802d352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d356:	2b00      	cmp	r3, #0
 802d358:	d116      	bne.n	802d388 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d35a:	68bb      	ldr	r3, [r7, #8]
 802d35c:	78db      	ldrb	r3, [r3, #3]
 802d35e:	f003 0303 	and.w	r3, r3, #3
 802d362:	2b01      	cmp	r3, #1
 802d364:	d005      	beq.n	802d372 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802d366:	68bb      	ldr	r3, [r7, #8]
 802d368:	78db      	ldrb	r3, [r3, #3]
 802d36a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d36e:	2b03      	cmp	r3, #3
 802d370:	d127      	bne.n	802d3c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d372:	68bb      	ldr	r3, [r7, #8]
 802d374:	799b      	ldrb	r3, [r3, #6]
 802d376:	2b00      	cmp	r3, #0
 802d378:	d003      	beq.n	802d382 <USBH_ParseEPDesc+0xfc>
 802d37a:	68bb      	ldr	r3, [r7, #8]
 802d37c:	799b      	ldrb	r3, [r3, #6]
 802d37e:	2b10      	cmp	r3, #16
 802d380:	d91f      	bls.n	802d3c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d382:	2303      	movs	r3, #3
 802d384:	75fb      	strb	r3, [r7, #23]
 802d386:	e01c      	b.n	802d3c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802d388:	68bb      	ldr	r3, [r7, #8]
 802d38a:	78db      	ldrb	r3, [r3, #3]
 802d38c:	f003 0303 	and.w	r3, r3, #3
 802d390:	2b01      	cmp	r3, #1
 802d392:	d10a      	bne.n	802d3aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d394:	68bb      	ldr	r3, [r7, #8]
 802d396:	799b      	ldrb	r3, [r3, #6]
 802d398:	2b00      	cmp	r3, #0
 802d39a:	d003      	beq.n	802d3a4 <USBH_ParseEPDesc+0x11e>
 802d39c:	68bb      	ldr	r3, [r7, #8]
 802d39e:	799b      	ldrb	r3, [r3, #6]
 802d3a0:	2b10      	cmp	r3, #16
 802d3a2:	d90e      	bls.n	802d3c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3a4:	2303      	movs	r3, #3
 802d3a6:	75fb      	strb	r3, [r7, #23]
 802d3a8:	e00b      	b.n	802d3c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802d3aa:	68bb      	ldr	r3, [r7, #8]
 802d3ac:	78db      	ldrb	r3, [r3, #3]
 802d3ae:	f003 0303 	and.w	r3, r3, #3
 802d3b2:	2b03      	cmp	r3, #3
 802d3b4:	d105      	bne.n	802d3c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802d3b6:	68bb      	ldr	r3, [r7, #8]
 802d3b8:	799b      	ldrb	r3, [r3, #6]
 802d3ba:	2b00      	cmp	r3, #0
 802d3bc:	d101      	bne.n	802d3c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d3be:	2303      	movs	r3, #3
 802d3c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802d3c2:	7dfb      	ldrb	r3, [r7, #23]
}
 802d3c4:	4618      	mov	r0, r3
 802d3c6:	371c      	adds	r7, #28
 802d3c8:	46bd      	mov	sp, r7
 802d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d3ce:	4770      	bx	lr

0802d3d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802d3d0:	b480      	push	{r7}
 802d3d2:	b087      	sub	sp, #28
 802d3d4:	af00      	add	r7, sp, #0
 802d3d6:	60f8      	str	r0, [r7, #12]
 802d3d8:	60b9      	str	r1, [r7, #8]
 802d3da:	4613      	mov	r3, r2
 802d3dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802d3de:	68fb      	ldr	r3, [r7, #12]
 802d3e0:	3301      	adds	r3, #1
 802d3e2:	781b      	ldrb	r3, [r3, #0]
 802d3e4:	2b03      	cmp	r3, #3
 802d3e6:	d120      	bne.n	802d42a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802d3e8:	68fb      	ldr	r3, [r7, #12]
 802d3ea:	781b      	ldrb	r3, [r3, #0]
 802d3ec:	1e9a      	subs	r2, r3, #2
 802d3ee:	88fb      	ldrh	r3, [r7, #6]
 802d3f0:	4293      	cmp	r3, r2
 802d3f2:	bf28      	it	cs
 802d3f4:	4613      	movcs	r3, r2
 802d3f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802d3f8:	68fb      	ldr	r3, [r7, #12]
 802d3fa:	3302      	adds	r3, #2
 802d3fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802d3fe:	2300      	movs	r3, #0
 802d400:	82fb      	strh	r3, [r7, #22]
 802d402:	e00b      	b.n	802d41c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802d404:	8afb      	ldrh	r3, [r7, #22]
 802d406:	68fa      	ldr	r2, [r7, #12]
 802d408:	4413      	add	r3, r2
 802d40a:	781a      	ldrb	r2, [r3, #0]
 802d40c:	68bb      	ldr	r3, [r7, #8]
 802d40e:	701a      	strb	r2, [r3, #0]
      pdest++;
 802d410:	68bb      	ldr	r3, [r7, #8]
 802d412:	3301      	adds	r3, #1
 802d414:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802d416:	8afb      	ldrh	r3, [r7, #22]
 802d418:	3302      	adds	r3, #2
 802d41a:	82fb      	strh	r3, [r7, #22]
 802d41c:	8afa      	ldrh	r2, [r7, #22]
 802d41e:	8abb      	ldrh	r3, [r7, #20]
 802d420:	429a      	cmp	r2, r3
 802d422:	d3ef      	bcc.n	802d404 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802d424:	68bb      	ldr	r3, [r7, #8]
 802d426:	2200      	movs	r2, #0
 802d428:	701a      	strb	r2, [r3, #0]
  }
}
 802d42a:	bf00      	nop
 802d42c:	371c      	adds	r7, #28
 802d42e:	46bd      	mov	sp, r7
 802d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d434:	4770      	bx	lr

0802d436 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802d436:	b480      	push	{r7}
 802d438:	b085      	sub	sp, #20
 802d43a:	af00      	add	r7, sp, #0
 802d43c:	6078      	str	r0, [r7, #4]
 802d43e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802d440:	683b      	ldr	r3, [r7, #0]
 802d442:	881a      	ldrh	r2, [r3, #0]
 802d444:	687b      	ldr	r3, [r7, #4]
 802d446:	781b      	ldrb	r3, [r3, #0]
 802d448:	b29b      	uxth	r3, r3
 802d44a:	4413      	add	r3, r2
 802d44c:	b29a      	uxth	r2, r3
 802d44e:	683b      	ldr	r3, [r7, #0]
 802d450:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802d452:	687b      	ldr	r3, [r7, #4]
 802d454:	781b      	ldrb	r3, [r3, #0]
 802d456:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802d458:	687b      	ldr	r3, [r7, #4]
 802d45a:	4413      	add	r3, r2
 802d45c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802d45e:	68fb      	ldr	r3, [r7, #12]
}
 802d460:	4618      	mov	r0, r3
 802d462:	3714      	adds	r7, #20
 802d464:	46bd      	mov	sp, r7
 802d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d46a:	4770      	bx	lr

0802d46c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802d46c:	b580      	push	{r7, lr}
 802d46e:	b086      	sub	sp, #24
 802d470:	af00      	add	r7, sp, #0
 802d472:	60f8      	str	r0, [r7, #12]
 802d474:	60b9      	str	r1, [r7, #8]
 802d476:	4613      	mov	r3, r2
 802d478:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802d47a:	2301      	movs	r3, #1
 802d47c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802d47e:	68fb      	ldr	r3, [r7, #12]
 802d480:	789b      	ldrb	r3, [r3, #2]
 802d482:	2b01      	cmp	r3, #1
 802d484:	d002      	beq.n	802d48c <USBH_CtlReq+0x20>
 802d486:	2b02      	cmp	r3, #2
 802d488:	d00f      	beq.n	802d4aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802d48a:	e027      	b.n	802d4dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802d48c:	68fb      	ldr	r3, [r7, #12]
 802d48e:	68ba      	ldr	r2, [r7, #8]
 802d490:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802d492:	68fb      	ldr	r3, [r7, #12]
 802d494:	88fa      	ldrh	r2, [r7, #6]
 802d496:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802d498:	68fb      	ldr	r3, [r7, #12]
 802d49a:	2201      	movs	r2, #1
 802d49c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802d49e:	68fb      	ldr	r3, [r7, #12]
 802d4a0:	2202      	movs	r2, #2
 802d4a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802d4a4:	2301      	movs	r3, #1
 802d4a6:	75fb      	strb	r3, [r7, #23]
      break;
 802d4a8:	e018      	b.n	802d4dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802d4aa:	68f8      	ldr	r0, [r7, #12]
 802d4ac:	f000 f81c 	bl	802d4e8 <USBH_HandleControl>
 802d4b0:	4603      	mov	r3, r0
 802d4b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802d4b4:	7dfb      	ldrb	r3, [r7, #23]
 802d4b6:	2b00      	cmp	r3, #0
 802d4b8:	d002      	beq.n	802d4c0 <USBH_CtlReq+0x54>
 802d4ba:	7dfb      	ldrb	r3, [r7, #23]
 802d4bc:	2b03      	cmp	r3, #3
 802d4be:	d106      	bne.n	802d4ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802d4c0:	68fb      	ldr	r3, [r7, #12]
 802d4c2:	2201      	movs	r2, #1
 802d4c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802d4c6:	68fb      	ldr	r3, [r7, #12]
 802d4c8:	2200      	movs	r2, #0
 802d4ca:	761a      	strb	r2, [r3, #24]
      break;
 802d4cc:	e005      	b.n	802d4da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802d4ce:	7dfb      	ldrb	r3, [r7, #23]
 802d4d0:	2b02      	cmp	r3, #2
 802d4d2:	d102      	bne.n	802d4da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802d4d4:	68fb      	ldr	r3, [r7, #12]
 802d4d6:	2201      	movs	r2, #1
 802d4d8:	709a      	strb	r2, [r3, #2]
      break;
 802d4da:	bf00      	nop
  }
  return status;
 802d4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 802d4de:	4618      	mov	r0, r3
 802d4e0:	3718      	adds	r7, #24
 802d4e2:	46bd      	mov	sp, r7
 802d4e4:	bd80      	pop	{r7, pc}
	...

0802d4e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802d4e8:	b580      	push	{r7, lr}
 802d4ea:	b086      	sub	sp, #24
 802d4ec:	af02      	add	r7, sp, #8
 802d4ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802d4f0:	2301      	movs	r3, #1
 802d4f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d4f4:	2300      	movs	r3, #0
 802d4f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802d4f8:	687b      	ldr	r3, [r7, #4]
 802d4fa:	7e1b      	ldrb	r3, [r3, #24]
 802d4fc:	3b01      	subs	r3, #1
 802d4fe:	2b0a      	cmp	r3, #10
 802d500:	f200 8156 	bhi.w	802d7b0 <USBH_HandleControl+0x2c8>
 802d504:	a201      	add	r2, pc, #4	; (adr r2, 802d50c <USBH_HandleControl+0x24>)
 802d506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d50a:	bf00      	nop
 802d50c:	0802d539 	.word	0x0802d539
 802d510:	0802d553 	.word	0x0802d553
 802d514:	0802d5bd 	.word	0x0802d5bd
 802d518:	0802d5e3 	.word	0x0802d5e3
 802d51c:	0802d61b 	.word	0x0802d61b
 802d520:	0802d645 	.word	0x0802d645
 802d524:	0802d697 	.word	0x0802d697
 802d528:	0802d6b9 	.word	0x0802d6b9
 802d52c:	0802d6f5 	.word	0x0802d6f5
 802d530:	0802d71b 	.word	0x0802d71b
 802d534:	0802d759 	.word	0x0802d759
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802d538:	687b      	ldr	r3, [r7, #4]
 802d53a:	f103 0110 	add.w	r1, r3, #16
 802d53e:	687b      	ldr	r3, [r7, #4]
 802d540:	795b      	ldrb	r3, [r3, #5]
 802d542:	461a      	mov	r2, r3
 802d544:	6878      	ldr	r0, [r7, #4]
 802d546:	f000 f943 	bl	802d7d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802d54a:	687b      	ldr	r3, [r7, #4]
 802d54c:	2202      	movs	r2, #2
 802d54e:	761a      	strb	r2, [r3, #24]
      break;
 802d550:	e139      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d552:	687b      	ldr	r3, [r7, #4]
 802d554:	795b      	ldrb	r3, [r3, #5]
 802d556:	4619      	mov	r1, r3
 802d558:	6878      	ldr	r0, [r7, #4]
 802d55a:	f000 fccb 	bl	802def4 <USBH_LL_GetURBState>
 802d55e:	4603      	mov	r3, r0
 802d560:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802d562:	7bbb      	ldrb	r3, [r7, #14]
 802d564:	2b01      	cmp	r3, #1
 802d566:	d11e      	bne.n	802d5a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802d568:	687b      	ldr	r3, [r7, #4]
 802d56a:	7c1b      	ldrb	r3, [r3, #16]
 802d56c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802d570:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802d572:	687b      	ldr	r3, [r7, #4]
 802d574:	8adb      	ldrh	r3, [r3, #22]
 802d576:	2b00      	cmp	r3, #0
 802d578:	d00a      	beq.n	802d590 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802d57a:	7b7b      	ldrb	r3, [r7, #13]
 802d57c:	2b80      	cmp	r3, #128	; 0x80
 802d57e:	d103      	bne.n	802d588 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802d580:	687b      	ldr	r3, [r7, #4]
 802d582:	2203      	movs	r2, #3
 802d584:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d586:	e115      	b.n	802d7b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802d588:	687b      	ldr	r3, [r7, #4]
 802d58a:	2205      	movs	r2, #5
 802d58c:	761a      	strb	r2, [r3, #24]
      break;
 802d58e:	e111      	b.n	802d7b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802d590:	7b7b      	ldrb	r3, [r7, #13]
 802d592:	2b80      	cmp	r3, #128	; 0x80
 802d594:	d103      	bne.n	802d59e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802d596:	687b      	ldr	r3, [r7, #4]
 802d598:	2209      	movs	r2, #9
 802d59a:	761a      	strb	r2, [r3, #24]
      break;
 802d59c:	e10a      	b.n	802d7b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802d59e:	687b      	ldr	r3, [r7, #4]
 802d5a0:	2207      	movs	r2, #7
 802d5a2:	761a      	strb	r2, [r3, #24]
      break;
 802d5a4:	e106      	b.n	802d7b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802d5a6:	7bbb      	ldrb	r3, [r7, #14]
 802d5a8:	2b04      	cmp	r3, #4
 802d5aa:	d003      	beq.n	802d5b4 <USBH_HandleControl+0xcc>
 802d5ac:	7bbb      	ldrb	r3, [r7, #14]
 802d5ae:	2b02      	cmp	r3, #2
 802d5b0:	f040 8100 	bne.w	802d7b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802d5b4:	687b      	ldr	r3, [r7, #4]
 802d5b6:	220b      	movs	r2, #11
 802d5b8:	761a      	strb	r2, [r3, #24]
      break;
 802d5ba:	e0fb      	b.n	802d7b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802d5bc:	687b      	ldr	r3, [r7, #4]
 802d5be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d5c2:	b29a      	uxth	r2, r3
 802d5c4:	687b      	ldr	r3, [r7, #4]
 802d5c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802d5c8:	687b      	ldr	r3, [r7, #4]
 802d5ca:	6899      	ldr	r1, [r3, #8]
 802d5cc:	687b      	ldr	r3, [r7, #4]
 802d5ce:	899a      	ldrh	r2, [r3, #12]
 802d5d0:	687b      	ldr	r3, [r7, #4]
 802d5d2:	791b      	ldrb	r3, [r3, #4]
 802d5d4:	6878      	ldr	r0, [r7, #4]
 802d5d6:	f000 f93a 	bl	802d84e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802d5da:	687b      	ldr	r3, [r7, #4]
 802d5dc:	2204      	movs	r2, #4
 802d5de:	761a      	strb	r2, [r3, #24]
      break;
 802d5e0:	e0f1      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d5e2:	687b      	ldr	r3, [r7, #4]
 802d5e4:	791b      	ldrb	r3, [r3, #4]
 802d5e6:	4619      	mov	r1, r3
 802d5e8:	6878      	ldr	r0, [r7, #4]
 802d5ea:	f000 fc83 	bl	802def4 <USBH_LL_GetURBState>
 802d5ee:	4603      	mov	r3, r0
 802d5f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802d5f2:	7bbb      	ldrb	r3, [r7, #14]
 802d5f4:	2b01      	cmp	r3, #1
 802d5f6:	d102      	bne.n	802d5fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802d5f8:	687b      	ldr	r3, [r7, #4]
 802d5fa:	2209      	movs	r2, #9
 802d5fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802d5fe:	7bbb      	ldrb	r3, [r7, #14]
 802d600:	2b05      	cmp	r3, #5
 802d602:	d102      	bne.n	802d60a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802d604:	2303      	movs	r3, #3
 802d606:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d608:	e0d6      	b.n	802d7b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802d60a:	7bbb      	ldrb	r3, [r7, #14]
 802d60c:	2b04      	cmp	r3, #4
 802d60e:	f040 80d3 	bne.w	802d7b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802d612:	687b      	ldr	r3, [r7, #4]
 802d614:	220b      	movs	r2, #11
 802d616:	761a      	strb	r2, [r3, #24]
      break;
 802d618:	e0ce      	b.n	802d7b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802d61a:	687b      	ldr	r3, [r7, #4]
 802d61c:	6899      	ldr	r1, [r3, #8]
 802d61e:	687b      	ldr	r3, [r7, #4]
 802d620:	899a      	ldrh	r2, [r3, #12]
 802d622:	687b      	ldr	r3, [r7, #4]
 802d624:	795b      	ldrb	r3, [r3, #5]
 802d626:	2001      	movs	r0, #1
 802d628:	9000      	str	r0, [sp, #0]
 802d62a:	6878      	ldr	r0, [r7, #4]
 802d62c:	f000 f8ea 	bl	802d804 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802d630:	687b      	ldr	r3, [r7, #4]
 802d632:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d636:	b29a      	uxth	r2, r3
 802d638:	687b      	ldr	r3, [r7, #4]
 802d63a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802d63c:	687b      	ldr	r3, [r7, #4]
 802d63e:	2206      	movs	r2, #6
 802d640:	761a      	strb	r2, [r3, #24]
      break;
 802d642:	e0c0      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d644:	687b      	ldr	r3, [r7, #4]
 802d646:	795b      	ldrb	r3, [r3, #5]
 802d648:	4619      	mov	r1, r3
 802d64a:	6878      	ldr	r0, [r7, #4]
 802d64c:	f000 fc52 	bl	802def4 <USBH_LL_GetURBState>
 802d650:	4603      	mov	r3, r0
 802d652:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d654:	7bbb      	ldrb	r3, [r7, #14]
 802d656:	2b01      	cmp	r3, #1
 802d658:	d103      	bne.n	802d662 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802d65a:	687b      	ldr	r3, [r7, #4]
 802d65c:	2207      	movs	r2, #7
 802d65e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d660:	e0ac      	b.n	802d7bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802d662:	7bbb      	ldrb	r3, [r7, #14]
 802d664:	2b05      	cmp	r3, #5
 802d666:	d105      	bne.n	802d674 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802d668:	687b      	ldr	r3, [r7, #4]
 802d66a:	220c      	movs	r2, #12
 802d66c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802d66e:	2303      	movs	r3, #3
 802d670:	73fb      	strb	r3, [r7, #15]
      break;
 802d672:	e0a3      	b.n	802d7bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d674:	7bbb      	ldrb	r3, [r7, #14]
 802d676:	2b02      	cmp	r3, #2
 802d678:	d103      	bne.n	802d682 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802d67a:	687b      	ldr	r3, [r7, #4]
 802d67c:	2205      	movs	r2, #5
 802d67e:	761a      	strb	r2, [r3, #24]
      break;
 802d680:	e09c      	b.n	802d7bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802d682:	7bbb      	ldrb	r3, [r7, #14]
 802d684:	2b04      	cmp	r3, #4
 802d686:	f040 8099 	bne.w	802d7bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802d68a:	687b      	ldr	r3, [r7, #4]
 802d68c:	220b      	movs	r2, #11
 802d68e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802d690:	2302      	movs	r3, #2
 802d692:	73fb      	strb	r3, [r7, #15]
      break;
 802d694:	e092      	b.n	802d7bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802d696:	687b      	ldr	r3, [r7, #4]
 802d698:	791b      	ldrb	r3, [r3, #4]
 802d69a:	2200      	movs	r2, #0
 802d69c:	2100      	movs	r1, #0
 802d69e:	6878      	ldr	r0, [r7, #4]
 802d6a0:	f000 f8d5 	bl	802d84e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d6a4:	687b      	ldr	r3, [r7, #4]
 802d6a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d6aa:	b29a      	uxth	r2, r3
 802d6ac:	687b      	ldr	r3, [r7, #4]
 802d6ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802d6b0:	687b      	ldr	r3, [r7, #4]
 802d6b2:	2208      	movs	r2, #8
 802d6b4:	761a      	strb	r2, [r3, #24]

      break;
 802d6b6:	e086      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d6b8:	687b      	ldr	r3, [r7, #4]
 802d6ba:	791b      	ldrb	r3, [r3, #4]
 802d6bc:	4619      	mov	r1, r3
 802d6be:	6878      	ldr	r0, [r7, #4]
 802d6c0:	f000 fc18 	bl	802def4 <USBH_LL_GetURBState>
 802d6c4:	4603      	mov	r3, r0
 802d6c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d6c8:	7bbb      	ldrb	r3, [r7, #14]
 802d6ca:	2b01      	cmp	r3, #1
 802d6cc:	d105      	bne.n	802d6da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802d6ce:	687b      	ldr	r3, [r7, #4]
 802d6d0:	220d      	movs	r2, #13
 802d6d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802d6d4:	2300      	movs	r3, #0
 802d6d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d6d8:	e072      	b.n	802d7c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802d6da:	7bbb      	ldrb	r3, [r7, #14]
 802d6dc:	2b04      	cmp	r3, #4
 802d6de:	d103      	bne.n	802d6e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802d6e0:	687b      	ldr	r3, [r7, #4]
 802d6e2:	220b      	movs	r2, #11
 802d6e4:	761a      	strb	r2, [r3, #24]
      break;
 802d6e6:	e06b      	b.n	802d7c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802d6e8:	7bbb      	ldrb	r3, [r7, #14]
 802d6ea:	2b05      	cmp	r3, #5
 802d6ec:	d168      	bne.n	802d7c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802d6ee:	2303      	movs	r3, #3
 802d6f0:	73fb      	strb	r3, [r7, #15]
      break;
 802d6f2:	e065      	b.n	802d7c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802d6f4:	687b      	ldr	r3, [r7, #4]
 802d6f6:	795b      	ldrb	r3, [r3, #5]
 802d6f8:	2201      	movs	r2, #1
 802d6fa:	9200      	str	r2, [sp, #0]
 802d6fc:	2200      	movs	r2, #0
 802d6fe:	2100      	movs	r1, #0
 802d700:	6878      	ldr	r0, [r7, #4]
 802d702:	f000 f87f 	bl	802d804 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d706:	687b      	ldr	r3, [r7, #4]
 802d708:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d70c:	b29a      	uxth	r2, r3
 802d70e:	687b      	ldr	r3, [r7, #4]
 802d710:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802d712:	687b      	ldr	r3, [r7, #4]
 802d714:	220a      	movs	r2, #10
 802d716:	761a      	strb	r2, [r3, #24]
      break;
 802d718:	e055      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d71a:	687b      	ldr	r3, [r7, #4]
 802d71c:	795b      	ldrb	r3, [r3, #5]
 802d71e:	4619      	mov	r1, r3
 802d720:	6878      	ldr	r0, [r7, #4]
 802d722:	f000 fbe7 	bl	802def4 <USBH_LL_GetURBState>
 802d726:	4603      	mov	r3, r0
 802d728:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802d72a:	7bbb      	ldrb	r3, [r7, #14]
 802d72c:	2b01      	cmp	r3, #1
 802d72e:	d105      	bne.n	802d73c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802d730:	2300      	movs	r3, #0
 802d732:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802d734:	687b      	ldr	r3, [r7, #4]
 802d736:	220d      	movs	r2, #13
 802d738:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d73a:	e043      	b.n	802d7c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d73c:	7bbb      	ldrb	r3, [r7, #14]
 802d73e:	2b02      	cmp	r3, #2
 802d740:	d103      	bne.n	802d74a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802d742:	687b      	ldr	r3, [r7, #4]
 802d744:	2209      	movs	r2, #9
 802d746:	761a      	strb	r2, [r3, #24]
      break;
 802d748:	e03c      	b.n	802d7c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802d74a:	7bbb      	ldrb	r3, [r7, #14]
 802d74c:	2b04      	cmp	r3, #4
 802d74e:	d139      	bne.n	802d7c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802d750:	687b      	ldr	r3, [r7, #4]
 802d752:	220b      	movs	r2, #11
 802d754:	761a      	strb	r2, [r3, #24]
      break;
 802d756:	e035      	b.n	802d7c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802d758:	687b      	ldr	r3, [r7, #4]
 802d75a:	7e5b      	ldrb	r3, [r3, #25]
 802d75c:	3301      	adds	r3, #1
 802d75e:	b2da      	uxtb	r2, r3
 802d760:	687b      	ldr	r3, [r7, #4]
 802d762:	765a      	strb	r2, [r3, #25]
 802d764:	687b      	ldr	r3, [r7, #4]
 802d766:	7e5b      	ldrb	r3, [r3, #25]
 802d768:	2b02      	cmp	r3, #2
 802d76a:	d806      	bhi.n	802d77a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802d76c:	687b      	ldr	r3, [r7, #4]
 802d76e:	2201      	movs	r2, #1
 802d770:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802d772:	687b      	ldr	r3, [r7, #4]
 802d774:	2201      	movs	r2, #1
 802d776:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802d778:	e025      	b.n	802d7c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802d77a:	687b      	ldr	r3, [r7, #4]
 802d77c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d780:	2106      	movs	r1, #6
 802d782:	6878      	ldr	r0, [r7, #4]
 802d784:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802d786:	687b      	ldr	r3, [r7, #4]
 802d788:	2200      	movs	r2, #0
 802d78a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802d78c:	687b      	ldr	r3, [r7, #4]
 802d78e:	795b      	ldrb	r3, [r3, #5]
 802d790:	4619      	mov	r1, r3
 802d792:	6878      	ldr	r0, [r7, #4]
 802d794:	f000 f90c 	bl	802d9b0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802d798:	687b      	ldr	r3, [r7, #4]
 802d79a:	791b      	ldrb	r3, [r3, #4]
 802d79c:	4619      	mov	r1, r3
 802d79e:	6878      	ldr	r0, [r7, #4]
 802d7a0:	f000 f906 	bl	802d9b0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802d7a4:	687b      	ldr	r3, [r7, #4]
 802d7a6:	2200      	movs	r2, #0
 802d7a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802d7aa:	2302      	movs	r3, #2
 802d7ac:	73fb      	strb	r3, [r7, #15]
      break;
 802d7ae:	e00a      	b.n	802d7c6 <USBH_HandleControl+0x2de>

    default:
      break;
 802d7b0:	bf00      	nop
 802d7b2:	e008      	b.n	802d7c6 <USBH_HandleControl+0x2de>
      break;
 802d7b4:	bf00      	nop
 802d7b6:	e006      	b.n	802d7c6 <USBH_HandleControl+0x2de>
      break;
 802d7b8:	bf00      	nop
 802d7ba:	e004      	b.n	802d7c6 <USBH_HandleControl+0x2de>
      break;
 802d7bc:	bf00      	nop
 802d7be:	e002      	b.n	802d7c6 <USBH_HandleControl+0x2de>
      break;
 802d7c0:	bf00      	nop
 802d7c2:	e000      	b.n	802d7c6 <USBH_HandleControl+0x2de>
      break;
 802d7c4:	bf00      	nop
  }

  return status;
 802d7c6:	7bfb      	ldrb	r3, [r7, #15]
}
 802d7c8:	4618      	mov	r0, r3
 802d7ca:	3710      	adds	r7, #16
 802d7cc:	46bd      	mov	sp, r7
 802d7ce:	bd80      	pop	{r7, pc}

0802d7d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802d7d0:	b580      	push	{r7, lr}
 802d7d2:	b088      	sub	sp, #32
 802d7d4:	af04      	add	r7, sp, #16
 802d7d6:	60f8      	str	r0, [r7, #12]
 802d7d8:	60b9      	str	r1, [r7, #8]
 802d7da:	4613      	mov	r3, r2
 802d7dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d7de:	79f9      	ldrb	r1, [r7, #7]
 802d7e0:	2300      	movs	r3, #0
 802d7e2:	9303      	str	r3, [sp, #12]
 802d7e4:	2308      	movs	r3, #8
 802d7e6:	9302      	str	r3, [sp, #8]
 802d7e8:	68bb      	ldr	r3, [r7, #8]
 802d7ea:	9301      	str	r3, [sp, #4]
 802d7ec:	2300      	movs	r3, #0
 802d7ee:	9300      	str	r3, [sp, #0]
 802d7f0:	2300      	movs	r3, #0
 802d7f2:	2200      	movs	r2, #0
 802d7f4:	68f8      	ldr	r0, [r7, #12]
 802d7f6:	f000 fb4c 	bl	802de92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802d7fa:	2300      	movs	r3, #0
}
 802d7fc:	4618      	mov	r0, r3
 802d7fe:	3710      	adds	r7, #16
 802d800:	46bd      	mov	sp, r7
 802d802:	bd80      	pop	{r7, pc}

0802d804 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802d804:	b580      	push	{r7, lr}
 802d806:	b088      	sub	sp, #32
 802d808:	af04      	add	r7, sp, #16
 802d80a:	60f8      	str	r0, [r7, #12]
 802d80c:	60b9      	str	r1, [r7, #8]
 802d80e:	4611      	mov	r1, r2
 802d810:	461a      	mov	r2, r3
 802d812:	460b      	mov	r3, r1
 802d814:	80fb      	strh	r3, [r7, #6]
 802d816:	4613      	mov	r3, r2
 802d818:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d81a:	68fb      	ldr	r3, [r7, #12]
 802d81c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d820:	2b00      	cmp	r3, #0
 802d822:	d001      	beq.n	802d828 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802d824:	2300      	movs	r3, #0
 802d826:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d828:	7979      	ldrb	r1, [r7, #5]
 802d82a:	7e3b      	ldrb	r3, [r7, #24]
 802d82c:	9303      	str	r3, [sp, #12]
 802d82e:	88fb      	ldrh	r3, [r7, #6]
 802d830:	9302      	str	r3, [sp, #8]
 802d832:	68bb      	ldr	r3, [r7, #8]
 802d834:	9301      	str	r3, [sp, #4]
 802d836:	2301      	movs	r3, #1
 802d838:	9300      	str	r3, [sp, #0]
 802d83a:	2300      	movs	r3, #0
 802d83c:	2200      	movs	r2, #0
 802d83e:	68f8      	ldr	r0, [r7, #12]
 802d840:	f000 fb27 	bl	802de92 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802d844:	2300      	movs	r3, #0
}
 802d846:	4618      	mov	r0, r3
 802d848:	3710      	adds	r7, #16
 802d84a:	46bd      	mov	sp, r7
 802d84c:	bd80      	pop	{r7, pc}

0802d84e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802d84e:	b580      	push	{r7, lr}
 802d850:	b088      	sub	sp, #32
 802d852:	af04      	add	r7, sp, #16
 802d854:	60f8      	str	r0, [r7, #12]
 802d856:	60b9      	str	r1, [r7, #8]
 802d858:	4611      	mov	r1, r2
 802d85a:	461a      	mov	r2, r3
 802d85c:	460b      	mov	r3, r1
 802d85e:	80fb      	strh	r3, [r7, #6]
 802d860:	4613      	mov	r3, r2
 802d862:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d864:	7979      	ldrb	r1, [r7, #5]
 802d866:	2300      	movs	r3, #0
 802d868:	9303      	str	r3, [sp, #12]
 802d86a:	88fb      	ldrh	r3, [r7, #6]
 802d86c:	9302      	str	r3, [sp, #8]
 802d86e:	68bb      	ldr	r3, [r7, #8]
 802d870:	9301      	str	r3, [sp, #4]
 802d872:	2301      	movs	r3, #1
 802d874:	9300      	str	r3, [sp, #0]
 802d876:	2300      	movs	r3, #0
 802d878:	2201      	movs	r2, #1
 802d87a:	68f8      	ldr	r0, [r7, #12]
 802d87c:	f000 fb09 	bl	802de92 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d880:	2300      	movs	r3, #0

}
 802d882:	4618      	mov	r0, r3
 802d884:	3710      	adds	r7, #16
 802d886:	46bd      	mov	sp, r7
 802d888:	bd80      	pop	{r7, pc}

0802d88a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802d88a:	b580      	push	{r7, lr}
 802d88c:	b088      	sub	sp, #32
 802d88e:	af04      	add	r7, sp, #16
 802d890:	60f8      	str	r0, [r7, #12]
 802d892:	60b9      	str	r1, [r7, #8]
 802d894:	4611      	mov	r1, r2
 802d896:	461a      	mov	r2, r3
 802d898:	460b      	mov	r3, r1
 802d89a:	80fb      	strh	r3, [r7, #6]
 802d89c:	4613      	mov	r3, r2
 802d89e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d8a0:	68fb      	ldr	r3, [r7, #12]
 802d8a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d8a6:	2b00      	cmp	r3, #0
 802d8a8:	d001      	beq.n	802d8ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802d8aa:	2300      	movs	r3, #0
 802d8ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d8ae:	7979      	ldrb	r1, [r7, #5]
 802d8b0:	7e3b      	ldrb	r3, [r7, #24]
 802d8b2:	9303      	str	r3, [sp, #12]
 802d8b4:	88fb      	ldrh	r3, [r7, #6]
 802d8b6:	9302      	str	r3, [sp, #8]
 802d8b8:	68bb      	ldr	r3, [r7, #8]
 802d8ba:	9301      	str	r3, [sp, #4]
 802d8bc:	2301      	movs	r3, #1
 802d8be:	9300      	str	r3, [sp, #0]
 802d8c0:	2302      	movs	r3, #2
 802d8c2:	2200      	movs	r2, #0
 802d8c4:	68f8      	ldr	r0, [r7, #12]
 802d8c6:	f000 fae4 	bl	802de92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802d8ca:	2300      	movs	r3, #0
}
 802d8cc:	4618      	mov	r0, r3
 802d8ce:	3710      	adds	r7, #16
 802d8d0:	46bd      	mov	sp, r7
 802d8d2:	bd80      	pop	{r7, pc}

0802d8d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802d8d4:	b580      	push	{r7, lr}
 802d8d6:	b088      	sub	sp, #32
 802d8d8:	af04      	add	r7, sp, #16
 802d8da:	60f8      	str	r0, [r7, #12]
 802d8dc:	60b9      	str	r1, [r7, #8]
 802d8de:	4611      	mov	r1, r2
 802d8e0:	461a      	mov	r2, r3
 802d8e2:	460b      	mov	r3, r1
 802d8e4:	80fb      	strh	r3, [r7, #6]
 802d8e6:	4613      	mov	r3, r2
 802d8e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d8ea:	7979      	ldrb	r1, [r7, #5]
 802d8ec:	2300      	movs	r3, #0
 802d8ee:	9303      	str	r3, [sp, #12]
 802d8f0:	88fb      	ldrh	r3, [r7, #6]
 802d8f2:	9302      	str	r3, [sp, #8]
 802d8f4:	68bb      	ldr	r3, [r7, #8]
 802d8f6:	9301      	str	r3, [sp, #4]
 802d8f8:	2301      	movs	r3, #1
 802d8fa:	9300      	str	r3, [sp, #0]
 802d8fc:	2302      	movs	r3, #2
 802d8fe:	2201      	movs	r2, #1
 802d900:	68f8      	ldr	r0, [r7, #12]
 802d902:	f000 fac6 	bl	802de92 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d906:	2300      	movs	r3, #0
}
 802d908:	4618      	mov	r0, r3
 802d90a:	3710      	adds	r7, #16
 802d90c:	46bd      	mov	sp, r7
 802d90e:	bd80      	pop	{r7, pc}

0802d910 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d910:	b580      	push	{r7, lr}
 802d912:	b086      	sub	sp, #24
 802d914:	af04      	add	r7, sp, #16
 802d916:	6078      	str	r0, [r7, #4]
 802d918:	4608      	mov	r0, r1
 802d91a:	4611      	mov	r1, r2
 802d91c:	461a      	mov	r2, r3
 802d91e:	4603      	mov	r3, r0
 802d920:	70fb      	strb	r3, [r7, #3]
 802d922:	460b      	mov	r3, r1
 802d924:	70bb      	strb	r3, [r7, #2]
 802d926:	4613      	mov	r3, r2
 802d928:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802d92a:	7878      	ldrb	r0, [r7, #1]
 802d92c:	78ba      	ldrb	r2, [r7, #2]
 802d92e:	78f9      	ldrb	r1, [r7, #3]
 802d930:	8b3b      	ldrh	r3, [r7, #24]
 802d932:	9302      	str	r3, [sp, #8]
 802d934:	7d3b      	ldrb	r3, [r7, #20]
 802d936:	9301      	str	r3, [sp, #4]
 802d938:	7c3b      	ldrb	r3, [r7, #16]
 802d93a:	9300      	str	r3, [sp, #0]
 802d93c:	4603      	mov	r3, r0
 802d93e:	6878      	ldr	r0, [r7, #4]
 802d940:	f000 fa59 	bl	802ddf6 <USBH_LL_OpenPipe>

  return USBH_OK;
 802d944:	2300      	movs	r3, #0
}
 802d946:	4618      	mov	r0, r3
 802d948:	3708      	adds	r7, #8
 802d94a:	46bd      	mov	sp, r7
 802d94c:	bd80      	pop	{r7, pc}

0802d94e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802d94e:	b580      	push	{r7, lr}
 802d950:	b082      	sub	sp, #8
 802d952:	af00      	add	r7, sp, #0
 802d954:	6078      	str	r0, [r7, #4]
 802d956:	460b      	mov	r3, r1
 802d958:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802d95a:	78fb      	ldrb	r3, [r7, #3]
 802d95c:	4619      	mov	r1, r3
 802d95e:	6878      	ldr	r0, [r7, #4]
 802d960:	f000 fa78 	bl	802de54 <USBH_LL_ClosePipe>

  return USBH_OK;
 802d964:	2300      	movs	r3, #0
}
 802d966:	4618      	mov	r0, r3
 802d968:	3708      	adds	r7, #8
 802d96a:	46bd      	mov	sp, r7
 802d96c:	bd80      	pop	{r7, pc}

0802d96e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802d96e:	b580      	push	{r7, lr}
 802d970:	b084      	sub	sp, #16
 802d972:	af00      	add	r7, sp, #0
 802d974:	6078      	str	r0, [r7, #4]
 802d976:	460b      	mov	r3, r1
 802d978:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802d97a:	6878      	ldr	r0, [r7, #4]
 802d97c:	f000 f836 	bl	802d9ec <USBH_GetFreePipe>
 802d980:	4603      	mov	r3, r0
 802d982:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802d984:	89fb      	ldrh	r3, [r7, #14]
 802d986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d98a:	4293      	cmp	r3, r2
 802d98c:	d00a      	beq.n	802d9a4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d98e:	78fa      	ldrb	r2, [r7, #3]
 802d990:	89fb      	ldrh	r3, [r7, #14]
 802d992:	f003 030f 	and.w	r3, r3, #15
 802d996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d99a:	6879      	ldr	r1, [r7, #4]
 802d99c:	33e0      	adds	r3, #224	; 0xe0
 802d99e:	009b      	lsls	r3, r3, #2
 802d9a0:	440b      	add	r3, r1
 802d9a2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d9a4:	89fb      	ldrh	r3, [r7, #14]
 802d9a6:	b2db      	uxtb	r3, r3
}
 802d9a8:	4618      	mov	r0, r3
 802d9aa:	3710      	adds	r7, #16
 802d9ac:	46bd      	mov	sp, r7
 802d9ae:	bd80      	pop	{r7, pc}

0802d9b0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d9b0:	b480      	push	{r7}
 802d9b2:	b083      	sub	sp, #12
 802d9b4:	af00      	add	r7, sp, #0
 802d9b6:	6078      	str	r0, [r7, #4]
 802d9b8:	460b      	mov	r3, r1
 802d9ba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d9bc:	78fb      	ldrb	r3, [r7, #3]
 802d9be:	2b0f      	cmp	r3, #15
 802d9c0:	d80d      	bhi.n	802d9de <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d9c2:	78fb      	ldrb	r3, [r7, #3]
 802d9c4:	687a      	ldr	r2, [r7, #4]
 802d9c6:	33e0      	adds	r3, #224	; 0xe0
 802d9c8:	009b      	lsls	r3, r3, #2
 802d9ca:	4413      	add	r3, r2
 802d9cc:	685a      	ldr	r2, [r3, #4]
 802d9ce:	78fb      	ldrb	r3, [r7, #3]
 802d9d0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d9d4:	6879      	ldr	r1, [r7, #4]
 802d9d6:	33e0      	adds	r3, #224	; 0xe0
 802d9d8:	009b      	lsls	r3, r3, #2
 802d9da:	440b      	add	r3, r1
 802d9dc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d9de:	2300      	movs	r3, #0
}
 802d9e0:	4618      	mov	r0, r3
 802d9e2:	370c      	adds	r7, #12
 802d9e4:	46bd      	mov	sp, r7
 802d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d9ea:	4770      	bx	lr

0802d9ec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802d9ec:	b480      	push	{r7}
 802d9ee:	b085      	sub	sp, #20
 802d9f0:	af00      	add	r7, sp, #0
 802d9f2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802d9f4:	2300      	movs	r3, #0
 802d9f6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d9f8:	2300      	movs	r3, #0
 802d9fa:	73fb      	strb	r3, [r7, #15]
 802d9fc:	e00f      	b.n	802da1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802d9fe:	7bfb      	ldrb	r3, [r7, #15]
 802da00:	687a      	ldr	r2, [r7, #4]
 802da02:	33e0      	adds	r3, #224	; 0xe0
 802da04:	009b      	lsls	r3, r3, #2
 802da06:	4413      	add	r3, r2
 802da08:	685b      	ldr	r3, [r3, #4]
 802da0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802da0e:	2b00      	cmp	r3, #0
 802da10:	d102      	bne.n	802da18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802da12:	7bfb      	ldrb	r3, [r7, #15]
 802da14:	b29b      	uxth	r3, r3
 802da16:	e007      	b.n	802da28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802da18:	7bfb      	ldrb	r3, [r7, #15]
 802da1a:	3301      	adds	r3, #1
 802da1c:	73fb      	strb	r3, [r7, #15]
 802da1e:	7bfb      	ldrb	r3, [r7, #15]
 802da20:	2b0f      	cmp	r3, #15
 802da22:	d9ec      	bls.n	802d9fe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802da24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802da28:	4618      	mov	r0, r3
 802da2a:	3714      	adds	r7, #20
 802da2c:	46bd      	mov	sp, r7
 802da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da32:	4770      	bx	lr

0802da34 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802da34:	b580      	push	{r7, lr}
 802da36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802da38:	2200      	movs	r2, #0
 802da3a:	490e      	ldr	r1, [pc, #56]	; (802da74 <MX_USB_HOST_Init+0x40>)
 802da3c:	480e      	ldr	r0, [pc, #56]	; (802da78 <MX_USB_HOST_Init+0x44>)
 802da3e:	f7fe fba7 	bl	802c190 <USBH_Init>
 802da42:	4603      	mov	r3, r0
 802da44:	2b00      	cmp	r3, #0
 802da46:	d001      	beq.n	802da4c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802da48:	f7f3 fa2e 	bl	8020ea8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802da4c:	490b      	ldr	r1, [pc, #44]	; (802da7c <MX_USB_HOST_Init+0x48>)
 802da4e:	480a      	ldr	r0, [pc, #40]	; (802da78 <MX_USB_HOST_Init+0x44>)
 802da50:	f7fe fc2c 	bl	802c2ac <USBH_RegisterClass>
 802da54:	4603      	mov	r3, r0
 802da56:	2b00      	cmp	r3, #0
 802da58:	d001      	beq.n	802da5e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802da5a:	f7f3 fa25 	bl	8020ea8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802da5e:	4806      	ldr	r0, [pc, #24]	; (802da78 <MX_USB_HOST_Init+0x44>)
 802da60:	f7fe fcb0 	bl	802c3c4 <USBH_Start>
 802da64:	4603      	mov	r3, r0
 802da66:	2b00      	cmp	r3, #0
 802da68:	d001      	beq.n	802da6e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802da6a:	f7f3 fa1d 	bl	8020ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802da6e:	bf00      	nop
 802da70:	bd80      	pop	{r7, pc}
 802da72:	bf00      	nop
 802da74:	0802da95 	.word	0x0802da95
 802da78:	20000b1c 	.word	0x20000b1c
 802da7c:	20000060 	.word	0x20000060

0802da80 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802da80:	b580      	push	{r7, lr}
 802da82:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802da84:	4802      	ldr	r0, [pc, #8]	; (802da90 <MX_USB_HOST_Process+0x10>)
 802da86:	f7fe fcad 	bl	802c3e4 <USBH_Process>
}
 802da8a:	bf00      	nop
 802da8c:	bd80      	pop	{r7, pc}
 802da8e:	bf00      	nop
 802da90:	20000b1c 	.word	0x20000b1c

0802da94 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802da94:	b480      	push	{r7}
 802da96:	b083      	sub	sp, #12
 802da98:	af00      	add	r7, sp, #0
 802da9a:	6078      	str	r0, [r7, #4]
 802da9c:	460b      	mov	r3, r1
 802da9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802daa0:	78fb      	ldrb	r3, [r7, #3]
 802daa2:	3b01      	subs	r3, #1
 802daa4:	2b04      	cmp	r3, #4
 802daa6:	d819      	bhi.n	802dadc <USBH_UserProcess+0x48>
 802daa8:	a201      	add	r2, pc, #4	; (adr r2, 802dab0 <USBH_UserProcess+0x1c>)
 802daaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802daae:	bf00      	nop
 802dab0:	0802dadd 	.word	0x0802dadd
 802dab4:	0802dacd 	.word	0x0802dacd
 802dab8:	0802dadd 	.word	0x0802dadd
 802dabc:	0802dad5 	.word	0x0802dad5
 802dac0:	0802dac5 	.word	0x0802dac5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802dac4:	4b09      	ldr	r3, [pc, #36]	; (802daec <USBH_UserProcess+0x58>)
 802dac6:	2203      	movs	r2, #3
 802dac8:	701a      	strb	r2, [r3, #0]
  break;
 802daca:	e008      	b.n	802dade <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802dacc:	4b07      	ldr	r3, [pc, #28]	; (802daec <USBH_UserProcess+0x58>)
 802dace:	2202      	movs	r2, #2
 802dad0:	701a      	strb	r2, [r3, #0]
  break;
 802dad2:	e004      	b.n	802dade <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802dad4:	4b05      	ldr	r3, [pc, #20]	; (802daec <USBH_UserProcess+0x58>)
 802dad6:	2201      	movs	r2, #1
 802dad8:	701a      	strb	r2, [r3, #0]
  break;
 802dada:	e000      	b.n	802dade <USBH_UserProcess+0x4a>

  default:
  break;
 802dadc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802dade:	bf00      	nop
 802dae0:	370c      	adds	r7, #12
 802dae2:	46bd      	mov	sp, r7
 802dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dae8:	4770      	bx	lr
 802daea:	bf00      	nop
 802daec:	20000ef4 	.word	0x20000ef4

0802daf0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802daf0:	b580      	push	{r7, lr}
 802daf2:	b08a      	sub	sp, #40	; 0x28
 802daf4:	af00      	add	r7, sp, #0
 802daf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802daf8:	f107 0314 	add.w	r3, r7, #20
 802dafc:	2200      	movs	r2, #0
 802dafe:	601a      	str	r2, [r3, #0]
 802db00:	605a      	str	r2, [r3, #4]
 802db02:	609a      	str	r2, [r3, #8]
 802db04:	60da      	str	r2, [r3, #12]
 802db06:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802db08:	687b      	ldr	r3, [r7, #4]
 802db0a:	681b      	ldr	r3, [r3, #0]
 802db0c:	4a24      	ldr	r2, [pc, #144]	; (802dba0 <HAL_HCD_MspInit+0xb0>)
 802db0e:	4293      	cmp	r3, r2
 802db10:	d141      	bne.n	802db96 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802db12:	2300      	movs	r3, #0
 802db14:	613b      	str	r3, [r7, #16]
 802db16:	4b23      	ldr	r3, [pc, #140]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db1a:	4a22      	ldr	r2, [pc, #136]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db1c:	f043 0302 	orr.w	r3, r3, #2
 802db20:	6313      	str	r3, [r2, #48]	; 0x30
 802db22:	4b20      	ldr	r3, [pc, #128]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db26:	f003 0302 	and.w	r3, r3, #2
 802db2a:	613b      	str	r3, [r7, #16]
 802db2c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802db2e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802db32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802db34:	2302      	movs	r3, #2
 802db36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db38:	2300      	movs	r3, #0
 802db3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802db3c:	2300      	movs	r3, #0
 802db3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802db40:	230c      	movs	r3, #12
 802db42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802db44:	f107 0314 	add.w	r3, r7, #20
 802db48:	4619      	mov	r1, r3
 802db4a:	4817      	ldr	r0, [pc, #92]	; (802dba8 <HAL_HCD_MspInit+0xb8>)
 802db4c:	f7f6 ffcc 	bl	8024ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802db50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802db54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802db56:	2300      	movs	r3, #0
 802db58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802db5a:	2300      	movs	r3, #0
 802db5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802db5e:	f107 0314 	add.w	r3, r7, #20
 802db62:	4619      	mov	r1, r3
 802db64:	4810      	ldr	r0, [pc, #64]	; (802dba8 <HAL_HCD_MspInit+0xb8>)
 802db66:	f7f6 ffbf 	bl	8024ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802db6a:	2300      	movs	r3, #0
 802db6c:	60fb      	str	r3, [r7, #12]
 802db6e:	4b0d      	ldr	r3, [pc, #52]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db72:	4a0c      	ldr	r2, [pc, #48]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802db78:	6313      	str	r3, [r2, #48]	; 0x30
 802db7a:	4b0a      	ldr	r3, [pc, #40]	; (802dba4 <HAL_HCD_MspInit+0xb4>)
 802db7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802db7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802db82:	60fb      	str	r3, [r7, #12]
 802db84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802db86:	2200      	movs	r2, #0
 802db88:	2100      	movs	r1, #0
 802db8a:	204d      	movs	r0, #77	; 0x4d
 802db8c:	f7f5 fe6f 	bl	802386e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802db90:	204d      	movs	r0, #77	; 0x4d
 802db92:	f7f5 fe88 	bl	80238a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802db96:	bf00      	nop
 802db98:	3728      	adds	r7, #40	; 0x28
 802db9a:	46bd      	mov	sp, r7
 802db9c:	bd80      	pop	{r7, pc}
 802db9e:	bf00      	nop
 802dba0:	40040000 	.word	0x40040000
 802dba4:	40023800 	.word	0x40023800
 802dba8:	40020400 	.word	0x40020400

0802dbac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbac:	b580      	push	{r7, lr}
 802dbae:	b082      	sub	sp, #8
 802dbb0:	af00      	add	r7, sp, #0
 802dbb2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802dbb4:	687b      	ldr	r3, [r7, #4]
 802dbb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbba:	4618      	mov	r0, r3
 802dbbc:	f7fe fff1 	bl	802cba2 <USBH_LL_IncTimer>
}
 802dbc0:	bf00      	nop
 802dbc2:	3708      	adds	r7, #8
 802dbc4:	46bd      	mov	sp, r7
 802dbc6:	bd80      	pop	{r7, pc}

0802dbc8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbc8:	b580      	push	{r7, lr}
 802dbca:	b082      	sub	sp, #8
 802dbcc:	af00      	add	r7, sp, #0
 802dbce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802dbd0:	687b      	ldr	r3, [r7, #4]
 802dbd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbd6:	4618      	mov	r0, r3
 802dbd8:	f7ff f829 	bl	802cc2e <USBH_LL_Connect>
}
 802dbdc:	bf00      	nop
 802dbde:	3708      	adds	r7, #8
 802dbe0:	46bd      	mov	sp, r7
 802dbe2:	bd80      	pop	{r7, pc}

0802dbe4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dbe4:	b580      	push	{r7, lr}
 802dbe6:	b082      	sub	sp, #8
 802dbe8:	af00      	add	r7, sp, #0
 802dbea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802dbec:	687b      	ldr	r3, [r7, #4]
 802dbee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dbf2:	4618      	mov	r0, r3
 802dbf4:	f7ff f832 	bl	802cc5c <USBH_LL_Disconnect>
}
 802dbf8:	bf00      	nop
 802dbfa:	3708      	adds	r7, #8
 802dbfc:	46bd      	mov	sp, r7
 802dbfe:	bd80      	pop	{r7, pc}

0802dc00 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802dc00:	b480      	push	{r7}
 802dc02:	b083      	sub	sp, #12
 802dc04:	af00      	add	r7, sp, #0
 802dc06:	6078      	str	r0, [r7, #4]
 802dc08:	460b      	mov	r3, r1
 802dc0a:	70fb      	strb	r3, [r7, #3]
 802dc0c:	4613      	mov	r3, r2
 802dc0e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802dc10:	bf00      	nop
 802dc12:	370c      	adds	r7, #12
 802dc14:	46bd      	mov	sp, r7
 802dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dc1a:	4770      	bx	lr

0802dc1c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc1c:	b580      	push	{r7, lr}
 802dc1e:	b082      	sub	sp, #8
 802dc20:	af00      	add	r7, sp, #0
 802dc22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802dc24:	687b      	ldr	r3, [r7, #4]
 802dc26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc2a:	4618      	mov	r0, r3
 802dc2c:	f7fe ffe3 	bl	802cbf6 <USBH_LL_PortEnabled>
}
 802dc30:	bf00      	nop
 802dc32:	3708      	adds	r7, #8
 802dc34:	46bd      	mov	sp, r7
 802dc36:	bd80      	pop	{r7, pc}

0802dc38 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802dc38:	b580      	push	{r7, lr}
 802dc3a:	b082      	sub	sp, #8
 802dc3c:	af00      	add	r7, sp, #0
 802dc3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802dc40:	687b      	ldr	r3, [r7, #4]
 802dc42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802dc46:	4618      	mov	r0, r3
 802dc48:	f7fe ffe3 	bl	802cc12 <USBH_LL_PortDisabled>
}
 802dc4c:	bf00      	nop
 802dc4e:	3708      	adds	r7, #8
 802dc50:	46bd      	mov	sp, r7
 802dc52:	bd80      	pop	{r7, pc}

0802dc54 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802dc54:	b580      	push	{r7, lr}
 802dc56:	b082      	sub	sp, #8
 802dc58:	af00      	add	r7, sp, #0
 802dc5a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802dc5c:	687b      	ldr	r3, [r7, #4]
 802dc5e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802dc62:	2b00      	cmp	r3, #0
 802dc64:	d132      	bne.n	802dccc <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802dc66:	4a1c      	ldr	r2, [pc, #112]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc68:	687b      	ldr	r3, [r7, #4]
 802dc6a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802dc6e:	687b      	ldr	r3, [r7, #4]
 802dc70:	4a19      	ldr	r2, [pc, #100]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc72:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802dc76:	4b18      	ldr	r3, [pc, #96]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc78:	4a18      	ldr	r2, [pc, #96]	; (802dcdc <USBH_LL_Init+0x88>)
 802dc7a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802dc7c:	4b16      	ldr	r3, [pc, #88]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc7e:	220c      	movs	r2, #12
 802dc80:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802dc82:	4b15      	ldr	r3, [pc, #84]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc84:	2201      	movs	r2, #1
 802dc86:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802dc88:	4b13      	ldr	r3, [pc, #76]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc8a:	2200      	movs	r2, #0
 802dc8c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802dc8e:	4b12      	ldr	r3, [pc, #72]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc90:	2202      	movs	r2, #2
 802dc92:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802dc94:	4b10      	ldr	r3, [pc, #64]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc96:	2200      	movs	r2, #0
 802dc98:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802dc9a:	4b0f      	ldr	r3, [pc, #60]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dc9c:	2200      	movs	r2, #0
 802dc9e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802dca0:	4b0d      	ldr	r3, [pc, #52]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dca2:	2200      	movs	r2, #0
 802dca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802dca6:	4b0c      	ldr	r3, [pc, #48]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dca8:	2200      	movs	r2, #0
 802dcaa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802dcac:	480a      	ldr	r0, [pc, #40]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dcae:	f7f7 fa05 	bl	80250bc <HAL_HCD_Init>
 802dcb2:	4603      	mov	r3, r0
 802dcb4:	2b00      	cmp	r3, #0
 802dcb6:	d001      	beq.n	802dcbc <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802dcb8:	f7f3 f8f6 	bl	8020ea8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802dcbc:	4806      	ldr	r0, [pc, #24]	; (802dcd8 <USBH_LL_Init+0x84>)
 802dcbe:	f7f7 fde8 	bl	8025892 <HAL_HCD_GetCurrentFrame>
 802dcc2:	4603      	mov	r3, r0
 802dcc4:	4619      	mov	r1, r3
 802dcc6:	6878      	ldr	r0, [r7, #4]
 802dcc8:	f7fe ff5c 	bl	802cb84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802dccc:	2300      	movs	r3, #0
}
 802dcce:	4618      	mov	r0, r3
 802dcd0:	3708      	adds	r7, #8
 802dcd2:	46bd      	mov	sp, r7
 802dcd4:	bd80      	pop	{r7, pc}
 802dcd6:	bf00      	nop
 802dcd8:	20000ef8 	.word	0x20000ef8
 802dcdc:	40040000 	.word	0x40040000

0802dce0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802dce0:	b580      	push	{r7, lr}
 802dce2:	b084      	sub	sp, #16
 802dce4:	af00      	add	r7, sp, #0
 802dce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dce8:	2300      	movs	r3, #0
 802dcea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dcec:	2300      	movs	r3, #0
 802dcee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802dcf0:	687b      	ldr	r3, [r7, #4]
 802dcf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dcf6:	4618      	mov	r0, r3
 802dcf8:	f7f7 fd55 	bl	80257a6 <HAL_HCD_Start>
 802dcfc:	4603      	mov	r3, r0
 802dcfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd00:	7bfb      	ldrb	r3, [r7, #15]
 802dd02:	4618      	mov	r0, r3
 802dd04:	f000 f95c 	bl	802dfc0 <USBH_Get_USB_Status>
 802dd08:	4603      	mov	r3, r0
 802dd0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd0c:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd0e:	4618      	mov	r0, r3
 802dd10:	3710      	adds	r7, #16
 802dd12:	46bd      	mov	sp, r7
 802dd14:	bd80      	pop	{r7, pc}

0802dd16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802dd16:	b580      	push	{r7, lr}
 802dd18:	b084      	sub	sp, #16
 802dd1a:	af00      	add	r7, sp, #0
 802dd1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd1e:	2300      	movs	r3, #0
 802dd20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd22:	2300      	movs	r3, #0
 802dd24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802dd26:	687b      	ldr	r3, [r7, #4]
 802dd28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd2c:	4618      	mov	r0, r3
 802dd2e:	f7f7 fd5d 	bl	80257ec <HAL_HCD_Stop>
 802dd32:	4603      	mov	r3, r0
 802dd34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd36:	7bfb      	ldrb	r3, [r7, #15]
 802dd38:	4618      	mov	r0, r3
 802dd3a:	f000 f941 	bl	802dfc0 <USBH_Get_USB_Status>
 802dd3e:	4603      	mov	r3, r0
 802dd40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd42:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd44:	4618      	mov	r0, r3
 802dd46:	3710      	adds	r7, #16
 802dd48:	46bd      	mov	sp, r7
 802dd4a:	bd80      	pop	{r7, pc}

0802dd4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802dd4c:	b580      	push	{r7, lr}
 802dd4e:	b084      	sub	sp, #16
 802dd50:	af00      	add	r7, sp, #0
 802dd52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802dd54:	2301      	movs	r3, #1
 802dd56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802dd58:	687b      	ldr	r3, [r7, #4]
 802dd5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd5e:	4618      	mov	r0, r3
 802dd60:	f7f7 fda5 	bl	80258ae <HAL_HCD_GetCurrentSpeed>
 802dd64:	4603      	mov	r3, r0
 802dd66:	2b02      	cmp	r3, #2
 802dd68:	d00c      	beq.n	802dd84 <USBH_LL_GetSpeed+0x38>
 802dd6a:	2b02      	cmp	r3, #2
 802dd6c:	d80d      	bhi.n	802dd8a <USBH_LL_GetSpeed+0x3e>
 802dd6e:	2b00      	cmp	r3, #0
 802dd70:	d002      	beq.n	802dd78 <USBH_LL_GetSpeed+0x2c>
 802dd72:	2b01      	cmp	r3, #1
 802dd74:	d003      	beq.n	802dd7e <USBH_LL_GetSpeed+0x32>
 802dd76:	e008      	b.n	802dd8a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802dd78:	2300      	movs	r3, #0
 802dd7a:	73fb      	strb	r3, [r7, #15]
    break;
 802dd7c:	e008      	b.n	802dd90 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802dd7e:	2301      	movs	r3, #1
 802dd80:	73fb      	strb	r3, [r7, #15]
    break;
 802dd82:	e005      	b.n	802dd90 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802dd84:	2302      	movs	r3, #2
 802dd86:	73fb      	strb	r3, [r7, #15]
    break;
 802dd88:	e002      	b.n	802dd90 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802dd8a:	2301      	movs	r3, #1
 802dd8c:	73fb      	strb	r3, [r7, #15]
    break;
 802dd8e:	bf00      	nop
  }
  return  speed;
 802dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 802dd92:	4618      	mov	r0, r3
 802dd94:	3710      	adds	r7, #16
 802dd96:	46bd      	mov	sp, r7
 802dd98:	bd80      	pop	{r7, pc}

0802dd9a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802dd9a:	b580      	push	{r7, lr}
 802dd9c:	b084      	sub	sp, #16
 802dd9e:	af00      	add	r7, sp, #0
 802dda0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dda2:	2300      	movs	r3, #0
 802dda4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dda6:	2300      	movs	r3, #0
 802dda8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802ddaa:	687b      	ldr	r3, [r7, #4]
 802ddac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802ddb0:	4618      	mov	r0, r3
 802ddb2:	f7f7 fd38 	bl	8025826 <HAL_HCD_ResetPort>
 802ddb6:	4603      	mov	r3, r0
 802ddb8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802ddba:	7bfb      	ldrb	r3, [r7, #15]
 802ddbc:	4618      	mov	r0, r3
 802ddbe:	f000 f8ff 	bl	802dfc0 <USBH_Get_USB_Status>
 802ddc2:	4603      	mov	r3, r0
 802ddc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802ddc6:	7bbb      	ldrb	r3, [r7, #14]
}
 802ddc8:	4618      	mov	r0, r3
 802ddca:	3710      	adds	r7, #16
 802ddcc:	46bd      	mov	sp, r7
 802ddce:	bd80      	pop	{r7, pc}

0802ddd0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802ddd0:	b580      	push	{r7, lr}
 802ddd2:	b082      	sub	sp, #8
 802ddd4:	af00      	add	r7, sp, #0
 802ddd6:	6078      	str	r0, [r7, #4]
 802ddd8:	460b      	mov	r3, r1
 802ddda:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802dddc:	687b      	ldr	r3, [r7, #4]
 802ddde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dde2:	78fa      	ldrb	r2, [r7, #3]
 802dde4:	4611      	mov	r1, r2
 802dde6:	4618      	mov	r0, r3
 802dde8:	f7f7 fd3f 	bl	802586a <HAL_HCD_HC_GetXferCount>
 802ddec:	4603      	mov	r3, r0
}
 802ddee:	4618      	mov	r0, r3
 802ddf0:	3708      	adds	r7, #8
 802ddf2:	46bd      	mov	sp, r7
 802ddf4:	bd80      	pop	{r7, pc}

0802ddf6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802ddf6:	b590      	push	{r4, r7, lr}
 802ddf8:	b089      	sub	sp, #36	; 0x24
 802ddfa:	af04      	add	r7, sp, #16
 802ddfc:	6078      	str	r0, [r7, #4]
 802ddfe:	4608      	mov	r0, r1
 802de00:	4611      	mov	r1, r2
 802de02:	461a      	mov	r2, r3
 802de04:	4603      	mov	r3, r0
 802de06:	70fb      	strb	r3, [r7, #3]
 802de08:	460b      	mov	r3, r1
 802de0a:	70bb      	strb	r3, [r7, #2]
 802de0c:	4613      	mov	r3, r2
 802de0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de10:	2300      	movs	r3, #0
 802de12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de14:	2300      	movs	r3, #0
 802de16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802de18:	687b      	ldr	r3, [r7, #4]
 802de1a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802de1e:	787c      	ldrb	r4, [r7, #1]
 802de20:	78ba      	ldrb	r2, [r7, #2]
 802de22:	78f9      	ldrb	r1, [r7, #3]
 802de24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802de26:	9302      	str	r3, [sp, #8]
 802de28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802de2c:	9301      	str	r3, [sp, #4]
 802de2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 802de32:	9300      	str	r3, [sp, #0]
 802de34:	4623      	mov	r3, r4
 802de36:	f7f7 f9a3 	bl	8025180 <HAL_HCD_HC_Init>
 802de3a:	4603      	mov	r3, r0
 802de3c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802de3e:	7bfb      	ldrb	r3, [r7, #15]
 802de40:	4618      	mov	r0, r3
 802de42:	f000 f8bd 	bl	802dfc0 <USBH_Get_USB_Status>
 802de46:	4603      	mov	r3, r0
 802de48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de4a:	7bbb      	ldrb	r3, [r7, #14]
}
 802de4c:	4618      	mov	r0, r3
 802de4e:	3714      	adds	r7, #20
 802de50:	46bd      	mov	sp, r7
 802de52:	bd90      	pop	{r4, r7, pc}

0802de54 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802de54:	b580      	push	{r7, lr}
 802de56:	b084      	sub	sp, #16
 802de58:	af00      	add	r7, sp, #0
 802de5a:	6078      	str	r0, [r7, #4]
 802de5c:	460b      	mov	r3, r1
 802de5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802de60:	2300      	movs	r3, #0
 802de62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802de64:	2300      	movs	r3, #0
 802de66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802de68:	687b      	ldr	r3, [r7, #4]
 802de6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802de6e:	78fa      	ldrb	r2, [r7, #3]
 802de70:	4611      	mov	r1, r2
 802de72:	4618      	mov	r0, r3
 802de74:	f7f7 fa13 	bl	802529e <HAL_HCD_HC_Halt>
 802de78:	4603      	mov	r3, r0
 802de7a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802de7c:	7bfb      	ldrb	r3, [r7, #15]
 802de7e:	4618      	mov	r0, r3
 802de80:	f000 f89e 	bl	802dfc0 <USBH_Get_USB_Status>
 802de84:	4603      	mov	r3, r0
 802de86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de88:	7bbb      	ldrb	r3, [r7, #14]
}
 802de8a:	4618      	mov	r0, r3
 802de8c:	3710      	adds	r7, #16
 802de8e:	46bd      	mov	sp, r7
 802de90:	bd80      	pop	{r7, pc}

0802de92 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802de92:	b590      	push	{r4, r7, lr}
 802de94:	b089      	sub	sp, #36	; 0x24
 802de96:	af04      	add	r7, sp, #16
 802de98:	6078      	str	r0, [r7, #4]
 802de9a:	4608      	mov	r0, r1
 802de9c:	4611      	mov	r1, r2
 802de9e:	461a      	mov	r2, r3
 802dea0:	4603      	mov	r3, r0
 802dea2:	70fb      	strb	r3, [r7, #3]
 802dea4:	460b      	mov	r3, r1
 802dea6:	70bb      	strb	r3, [r7, #2]
 802dea8:	4613      	mov	r3, r2
 802deaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802deac:	2300      	movs	r3, #0
 802deae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802deb0:	2300      	movs	r3, #0
 802deb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802deb4:	687b      	ldr	r3, [r7, #4]
 802deb6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802deba:	787c      	ldrb	r4, [r7, #1]
 802debc:	78ba      	ldrb	r2, [r7, #2]
 802debe:	78f9      	ldrb	r1, [r7, #3]
 802dec0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802dec4:	9303      	str	r3, [sp, #12]
 802dec6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802dec8:	9302      	str	r3, [sp, #8]
 802deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802decc:	9301      	str	r3, [sp, #4]
 802dece:	f897 3020 	ldrb.w	r3, [r7, #32]
 802ded2:	9300      	str	r3, [sp, #0]
 802ded4:	4623      	mov	r3, r4
 802ded6:	f7f7 fa05 	bl	80252e4 <HAL_HCD_HC_SubmitRequest>
 802deda:	4603      	mov	r3, r0
 802dedc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802dede:	7bfb      	ldrb	r3, [r7, #15]
 802dee0:	4618      	mov	r0, r3
 802dee2:	f000 f86d 	bl	802dfc0 <USBH_Get_USB_Status>
 802dee6:	4603      	mov	r3, r0
 802dee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802deea:	7bbb      	ldrb	r3, [r7, #14]
}
 802deec:	4618      	mov	r0, r3
 802deee:	3714      	adds	r7, #20
 802def0:	46bd      	mov	sp, r7
 802def2:	bd90      	pop	{r4, r7, pc}

0802def4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802def4:	b580      	push	{r7, lr}
 802def6:	b082      	sub	sp, #8
 802def8:	af00      	add	r7, sp, #0
 802defa:	6078      	str	r0, [r7, #4]
 802defc:	460b      	mov	r3, r1
 802defe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802df00:	687b      	ldr	r3, [r7, #4]
 802df02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df06:	78fa      	ldrb	r2, [r7, #3]
 802df08:	4611      	mov	r1, r2
 802df0a:	4618      	mov	r0, r3
 802df0c:	f7f7 fc99 	bl	8025842 <HAL_HCD_HC_GetURBState>
 802df10:	4603      	mov	r3, r0
}
 802df12:	4618      	mov	r0, r3
 802df14:	3708      	adds	r7, #8
 802df16:	46bd      	mov	sp, r7
 802df18:	bd80      	pop	{r7, pc}

0802df1a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802df1a:	b580      	push	{r7, lr}
 802df1c:	b082      	sub	sp, #8
 802df1e:	af00      	add	r7, sp, #0
 802df20:	6078      	str	r0, [r7, #4]
 802df22:	460b      	mov	r3, r1
 802df24:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802df26:	687b      	ldr	r3, [r7, #4]
 802df28:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802df2c:	2b00      	cmp	r3, #0
 802df2e:	d103      	bne.n	802df38 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802df30:	78fb      	ldrb	r3, [r7, #3]
 802df32:	4618      	mov	r0, r3
 802df34:	f000 f870 	bl	802e018 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802df38:	20c8      	movs	r0, #200	; 0xc8
 802df3a:	f7f5 fba5 	bl	8023688 <HAL_Delay>
  return USBH_OK;
 802df3e:	2300      	movs	r3, #0
}
 802df40:	4618      	mov	r0, r3
 802df42:	3708      	adds	r7, #8
 802df44:	46bd      	mov	sp, r7
 802df46:	bd80      	pop	{r7, pc}

0802df48 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802df48:	b480      	push	{r7}
 802df4a:	b085      	sub	sp, #20
 802df4c:	af00      	add	r7, sp, #0
 802df4e:	6078      	str	r0, [r7, #4]
 802df50:	460b      	mov	r3, r1
 802df52:	70fb      	strb	r3, [r7, #3]
 802df54:	4613      	mov	r3, r2
 802df56:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802df58:	687b      	ldr	r3, [r7, #4]
 802df5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802df5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802df60:	78fb      	ldrb	r3, [r7, #3]
 802df62:	68fa      	ldr	r2, [r7, #12]
 802df64:	212c      	movs	r1, #44	; 0x2c
 802df66:	fb01 f303 	mul.w	r3, r1, r3
 802df6a:	4413      	add	r3, r2
 802df6c:	333b      	adds	r3, #59	; 0x3b
 802df6e:	781b      	ldrb	r3, [r3, #0]
 802df70:	2b00      	cmp	r3, #0
 802df72:	d009      	beq.n	802df88 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802df74:	78fb      	ldrb	r3, [r7, #3]
 802df76:	68fa      	ldr	r2, [r7, #12]
 802df78:	212c      	movs	r1, #44	; 0x2c
 802df7a:	fb01 f303 	mul.w	r3, r1, r3
 802df7e:	4413      	add	r3, r2
 802df80:	3354      	adds	r3, #84	; 0x54
 802df82:	78ba      	ldrb	r2, [r7, #2]
 802df84:	701a      	strb	r2, [r3, #0]
 802df86:	e008      	b.n	802df9a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802df88:	78fb      	ldrb	r3, [r7, #3]
 802df8a:	68fa      	ldr	r2, [r7, #12]
 802df8c:	212c      	movs	r1, #44	; 0x2c
 802df8e:	fb01 f303 	mul.w	r3, r1, r3
 802df92:	4413      	add	r3, r2
 802df94:	3355      	adds	r3, #85	; 0x55
 802df96:	78ba      	ldrb	r2, [r7, #2]
 802df98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802df9a:	2300      	movs	r3, #0
}
 802df9c:	4618      	mov	r0, r3
 802df9e:	3714      	adds	r7, #20
 802dfa0:	46bd      	mov	sp, r7
 802dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802dfa6:	4770      	bx	lr

0802dfa8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802dfa8:	b580      	push	{r7, lr}
 802dfaa:	b082      	sub	sp, #8
 802dfac:	af00      	add	r7, sp, #0
 802dfae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802dfb0:	6878      	ldr	r0, [r7, #4]
 802dfb2:	f7f5 fb69 	bl	8023688 <HAL_Delay>
}
 802dfb6:	bf00      	nop
 802dfb8:	3708      	adds	r7, #8
 802dfba:	46bd      	mov	sp, r7
 802dfbc:	bd80      	pop	{r7, pc}
	...

0802dfc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802dfc0:	b480      	push	{r7}
 802dfc2:	b085      	sub	sp, #20
 802dfc4:	af00      	add	r7, sp, #0
 802dfc6:	4603      	mov	r3, r0
 802dfc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dfca:	2300      	movs	r3, #0
 802dfcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802dfce:	79fb      	ldrb	r3, [r7, #7]
 802dfd0:	2b03      	cmp	r3, #3
 802dfd2:	d817      	bhi.n	802e004 <USBH_Get_USB_Status+0x44>
 802dfd4:	a201      	add	r2, pc, #4	; (adr r2, 802dfdc <USBH_Get_USB_Status+0x1c>)
 802dfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802dfda:	bf00      	nop
 802dfdc:	0802dfed 	.word	0x0802dfed
 802dfe0:	0802dff3 	.word	0x0802dff3
 802dfe4:	0802dff9 	.word	0x0802dff9
 802dfe8:	0802dfff 	.word	0x0802dfff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802dfec:	2300      	movs	r3, #0
 802dfee:	73fb      	strb	r3, [r7, #15]
    break;
 802dff0:	e00b      	b.n	802e00a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802dff2:	2302      	movs	r3, #2
 802dff4:	73fb      	strb	r3, [r7, #15]
    break;
 802dff6:	e008      	b.n	802e00a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802dff8:	2301      	movs	r3, #1
 802dffa:	73fb      	strb	r3, [r7, #15]
    break;
 802dffc:	e005      	b.n	802e00a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802dffe:	2302      	movs	r3, #2
 802e000:	73fb      	strb	r3, [r7, #15]
    break;
 802e002:	e002      	b.n	802e00a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802e004:	2302      	movs	r3, #2
 802e006:	73fb      	strb	r3, [r7, #15]
    break;
 802e008:	bf00      	nop
  }
  return usb_status;
 802e00a:	7bfb      	ldrb	r3, [r7, #15]
}
 802e00c:	4618      	mov	r0, r3
 802e00e:	3714      	adds	r7, #20
 802e010:	46bd      	mov	sp, r7
 802e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 802e016:	4770      	bx	lr

0802e018 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802e018:	b580      	push	{r7, lr}
 802e01a:	b084      	sub	sp, #16
 802e01c:	af00      	add	r7, sp, #0
 802e01e:	4603      	mov	r3, r0
 802e020:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802e022:	79fb      	ldrb	r3, [r7, #7]
 802e024:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802e026:	79fb      	ldrb	r3, [r7, #7]
 802e028:	2b00      	cmp	r3, #0
 802e02a:	d102      	bne.n	802e032 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802e02c:	2301      	movs	r3, #1
 802e02e:	73fb      	strb	r3, [r7, #15]
 802e030:	e001      	b.n	802e036 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802e032:	2300      	movs	r3, #0
 802e034:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802e036:	7bfb      	ldrb	r3, [r7, #15]
 802e038:	461a      	mov	r2, r3
 802e03a:	2110      	movs	r1, #16
 802e03c:	4803      	ldr	r0, [pc, #12]	; (802e04c <MX_DriverVbusHS+0x34>)
 802e03e:	f7f7 f80b 	bl	8025058 <HAL_GPIO_WritePin>
}
 802e042:	bf00      	nop
 802e044:	3710      	adds	r7, #16
 802e046:	46bd      	mov	sp, r7
 802e048:	bd80      	pop	{r7, pc}
 802e04a:	bf00      	nop
 802e04c:	40020800 	.word	0x40020800

0802e050 <__errno>:
 802e050:	4b01      	ldr	r3, [pc, #4]	; (802e058 <__errno+0x8>)
 802e052:	6818      	ldr	r0, [r3, #0]
 802e054:	4770      	bx	lr
 802e056:	bf00      	nop
 802e058:	20000080 	.word	0x20000080

0802e05c <__libc_init_array>:
 802e05c:	b570      	push	{r4, r5, r6, lr}
 802e05e:	4d0d      	ldr	r5, [pc, #52]	; (802e094 <__libc_init_array+0x38>)
 802e060:	4c0d      	ldr	r4, [pc, #52]	; (802e098 <__libc_init_array+0x3c>)
 802e062:	1b64      	subs	r4, r4, r5
 802e064:	10a4      	asrs	r4, r4, #2
 802e066:	2600      	movs	r6, #0
 802e068:	42a6      	cmp	r6, r4
 802e06a:	d109      	bne.n	802e080 <__libc_init_array+0x24>
 802e06c:	4d0b      	ldr	r5, [pc, #44]	; (802e09c <__libc_init_array+0x40>)
 802e06e:	4c0c      	ldr	r4, [pc, #48]	; (802e0a0 <__libc_init_array+0x44>)
 802e070:	f001 fa10 	bl	802f494 <_init>
 802e074:	1b64      	subs	r4, r4, r5
 802e076:	10a4      	asrs	r4, r4, #2
 802e078:	2600      	movs	r6, #0
 802e07a:	42a6      	cmp	r6, r4
 802e07c:	d105      	bne.n	802e08a <__libc_init_array+0x2e>
 802e07e:	bd70      	pop	{r4, r5, r6, pc}
 802e080:	f855 3b04 	ldr.w	r3, [r5], #4
 802e084:	4798      	blx	r3
 802e086:	3601      	adds	r6, #1
 802e088:	e7ee      	b.n	802e068 <__libc_init_array+0xc>
 802e08a:	f855 3b04 	ldr.w	r3, [r5], #4
 802e08e:	4798      	blx	r3
 802e090:	3601      	adds	r6, #1
 802e092:	e7f2      	b.n	802e07a <__libc_init_array+0x1e>
 802e094:	08031ad8 	.word	0x08031ad8
 802e098:	08031ad8 	.word	0x08031ad8
 802e09c:	08031ad8 	.word	0x08031ad8
 802e0a0:	08031adc 	.word	0x08031adc

0802e0a4 <malloc>:
 802e0a4:	4b02      	ldr	r3, [pc, #8]	; (802e0b0 <malloc+0xc>)
 802e0a6:	4601      	mov	r1, r0
 802e0a8:	6818      	ldr	r0, [r3, #0]
 802e0aa:	f000 b87f 	b.w	802e1ac <_malloc_r>
 802e0ae:	bf00      	nop
 802e0b0:	20000080 	.word	0x20000080

0802e0b4 <free>:
 802e0b4:	4b02      	ldr	r3, [pc, #8]	; (802e0c0 <free+0xc>)
 802e0b6:	4601      	mov	r1, r0
 802e0b8:	6818      	ldr	r0, [r3, #0]
 802e0ba:	f000 b80b 	b.w	802e0d4 <_free_r>
 802e0be:	bf00      	nop
 802e0c0:	20000080 	.word	0x20000080

0802e0c4 <memset>:
 802e0c4:	4402      	add	r2, r0
 802e0c6:	4603      	mov	r3, r0
 802e0c8:	4293      	cmp	r3, r2
 802e0ca:	d100      	bne.n	802e0ce <memset+0xa>
 802e0cc:	4770      	bx	lr
 802e0ce:	f803 1b01 	strb.w	r1, [r3], #1
 802e0d2:	e7f9      	b.n	802e0c8 <memset+0x4>

0802e0d4 <_free_r>:
 802e0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e0d6:	2900      	cmp	r1, #0
 802e0d8:	d044      	beq.n	802e164 <_free_r+0x90>
 802e0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e0de:	9001      	str	r0, [sp, #4]
 802e0e0:	2b00      	cmp	r3, #0
 802e0e2:	f1a1 0404 	sub.w	r4, r1, #4
 802e0e6:	bfb8      	it	lt
 802e0e8:	18e4      	addlt	r4, r4, r3
 802e0ea:	f000 fc71 	bl	802e9d0 <__malloc_lock>
 802e0ee:	4a1e      	ldr	r2, [pc, #120]	; (802e168 <_free_r+0x94>)
 802e0f0:	9801      	ldr	r0, [sp, #4]
 802e0f2:	6813      	ldr	r3, [r2, #0]
 802e0f4:	b933      	cbnz	r3, 802e104 <_free_r+0x30>
 802e0f6:	6063      	str	r3, [r4, #4]
 802e0f8:	6014      	str	r4, [r2, #0]
 802e0fa:	b003      	add	sp, #12
 802e0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e100:	f000 bc6c 	b.w	802e9dc <__malloc_unlock>
 802e104:	42a3      	cmp	r3, r4
 802e106:	d908      	bls.n	802e11a <_free_r+0x46>
 802e108:	6825      	ldr	r5, [r4, #0]
 802e10a:	1961      	adds	r1, r4, r5
 802e10c:	428b      	cmp	r3, r1
 802e10e:	bf01      	itttt	eq
 802e110:	6819      	ldreq	r1, [r3, #0]
 802e112:	685b      	ldreq	r3, [r3, #4]
 802e114:	1949      	addeq	r1, r1, r5
 802e116:	6021      	streq	r1, [r4, #0]
 802e118:	e7ed      	b.n	802e0f6 <_free_r+0x22>
 802e11a:	461a      	mov	r2, r3
 802e11c:	685b      	ldr	r3, [r3, #4]
 802e11e:	b10b      	cbz	r3, 802e124 <_free_r+0x50>
 802e120:	42a3      	cmp	r3, r4
 802e122:	d9fa      	bls.n	802e11a <_free_r+0x46>
 802e124:	6811      	ldr	r1, [r2, #0]
 802e126:	1855      	adds	r5, r2, r1
 802e128:	42a5      	cmp	r5, r4
 802e12a:	d10b      	bne.n	802e144 <_free_r+0x70>
 802e12c:	6824      	ldr	r4, [r4, #0]
 802e12e:	4421      	add	r1, r4
 802e130:	1854      	adds	r4, r2, r1
 802e132:	42a3      	cmp	r3, r4
 802e134:	6011      	str	r1, [r2, #0]
 802e136:	d1e0      	bne.n	802e0fa <_free_r+0x26>
 802e138:	681c      	ldr	r4, [r3, #0]
 802e13a:	685b      	ldr	r3, [r3, #4]
 802e13c:	6053      	str	r3, [r2, #4]
 802e13e:	4421      	add	r1, r4
 802e140:	6011      	str	r1, [r2, #0]
 802e142:	e7da      	b.n	802e0fa <_free_r+0x26>
 802e144:	d902      	bls.n	802e14c <_free_r+0x78>
 802e146:	230c      	movs	r3, #12
 802e148:	6003      	str	r3, [r0, #0]
 802e14a:	e7d6      	b.n	802e0fa <_free_r+0x26>
 802e14c:	6825      	ldr	r5, [r4, #0]
 802e14e:	1961      	adds	r1, r4, r5
 802e150:	428b      	cmp	r3, r1
 802e152:	bf04      	itt	eq
 802e154:	6819      	ldreq	r1, [r3, #0]
 802e156:	685b      	ldreq	r3, [r3, #4]
 802e158:	6063      	str	r3, [r4, #4]
 802e15a:	bf04      	itt	eq
 802e15c:	1949      	addeq	r1, r1, r5
 802e15e:	6021      	streq	r1, [r4, #0]
 802e160:	6054      	str	r4, [r2, #4]
 802e162:	e7ca      	b.n	802e0fa <_free_r+0x26>
 802e164:	b003      	add	sp, #12
 802e166:	bd30      	pop	{r4, r5, pc}
 802e168:	200011fc 	.word	0x200011fc

0802e16c <sbrk_aligned>:
 802e16c:	b570      	push	{r4, r5, r6, lr}
 802e16e:	4e0e      	ldr	r6, [pc, #56]	; (802e1a8 <sbrk_aligned+0x3c>)
 802e170:	460c      	mov	r4, r1
 802e172:	6831      	ldr	r1, [r6, #0]
 802e174:	4605      	mov	r5, r0
 802e176:	b911      	cbnz	r1, 802e17e <sbrk_aligned+0x12>
 802e178:	f000 f91a 	bl	802e3b0 <_sbrk_r>
 802e17c:	6030      	str	r0, [r6, #0]
 802e17e:	4621      	mov	r1, r4
 802e180:	4628      	mov	r0, r5
 802e182:	f000 f915 	bl	802e3b0 <_sbrk_r>
 802e186:	1c43      	adds	r3, r0, #1
 802e188:	d00a      	beq.n	802e1a0 <sbrk_aligned+0x34>
 802e18a:	1cc4      	adds	r4, r0, #3
 802e18c:	f024 0403 	bic.w	r4, r4, #3
 802e190:	42a0      	cmp	r0, r4
 802e192:	d007      	beq.n	802e1a4 <sbrk_aligned+0x38>
 802e194:	1a21      	subs	r1, r4, r0
 802e196:	4628      	mov	r0, r5
 802e198:	f000 f90a 	bl	802e3b0 <_sbrk_r>
 802e19c:	3001      	adds	r0, #1
 802e19e:	d101      	bne.n	802e1a4 <sbrk_aligned+0x38>
 802e1a0:	f04f 34ff 	mov.w	r4, #4294967295
 802e1a4:	4620      	mov	r0, r4
 802e1a6:	bd70      	pop	{r4, r5, r6, pc}
 802e1a8:	20001200 	.word	0x20001200

0802e1ac <_malloc_r>:
 802e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e1b0:	1ccd      	adds	r5, r1, #3
 802e1b2:	f025 0503 	bic.w	r5, r5, #3
 802e1b6:	3508      	adds	r5, #8
 802e1b8:	2d0c      	cmp	r5, #12
 802e1ba:	bf38      	it	cc
 802e1bc:	250c      	movcc	r5, #12
 802e1be:	2d00      	cmp	r5, #0
 802e1c0:	4607      	mov	r7, r0
 802e1c2:	db01      	blt.n	802e1c8 <_malloc_r+0x1c>
 802e1c4:	42a9      	cmp	r1, r5
 802e1c6:	d905      	bls.n	802e1d4 <_malloc_r+0x28>
 802e1c8:	230c      	movs	r3, #12
 802e1ca:	603b      	str	r3, [r7, #0]
 802e1cc:	2600      	movs	r6, #0
 802e1ce:	4630      	mov	r0, r6
 802e1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e1d4:	4e2e      	ldr	r6, [pc, #184]	; (802e290 <_malloc_r+0xe4>)
 802e1d6:	f000 fbfb 	bl	802e9d0 <__malloc_lock>
 802e1da:	6833      	ldr	r3, [r6, #0]
 802e1dc:	461c      	mov	r4, r3
 802e1de:	bb34      	cbnz	r4, 802e22e <_malloc_r+0x82>
 802e1e0:	4629      	mov	r1, r5
 802e1e2:	4638      	mov	r0, r7
 802e1e4:	f7ff ffc2 	bl	802e16c <sbrk_aligned>
 802e1e8:	1c43      	adds	r3, r0, #1
 802e1ea:	4604      	mov	r4, r0
 802e1ec:	d14d      	bne.n	802e28a <_malloc_r+0xde>
 802e1ee:	6834      	ldr	r4, [r6, #0]
 802e1f0:	4626      	mov	r6, r4
 802e1f2:	2e00      	cmp	r6, #0
 802e1f4:	d140      	bne.n	802e278 <_malloc_r+0xcc>
 802e1f6:	6823      	ldr	r3, [r4, #0]
 802e1f8:	4631      	mov	r1, r6
 802e1fa:	4638      	mov	r0, r7
 802e1fc:	eb04 0803 	add.w	r8, r4, r3
 802e200:	f000 f8d6 	bl	802e3b0 <_sbrk_r>
 802e204:	4580      	cmp	r8, r0
 802e206:	d13a      	bne.n	802e27e <_malloc_r+0xd2>
 802e208:	6821      	ldr	r1, [r4, #0]
 802e20a:	3503      	adds	r5, #3
 802e20c:	1a6d      	subs	r5, r5, r1
 802e20e:	f025 0503 	bic.w	r5, r5, #3
 802e212:	3508      	adds	r5, #8
 802e214:	2d0c      	cmp	r5, #12
 802e216:	bf38      	it	cc
 802e218:	250c      	movcc	r5, #12
 802e21a:	4629      	mov	r1, r5
 802e21c:	4638      	mov	r0, r7
 802e21e:	f7ff ffa5 	bl	802e16c <sbrk_aligned>
 802e222:	3001      	adds	r0, #1
 802e224:	d02b      	beq.n	802e27e <_malloc_r+0xd2>
 802e226:	6823      	ldr	r3, [r4, #0]
 802e228:	442b      	add	r3, r5
 802e22a:	6023      	str	r3, [r4, #0]
 802e22c:	e00e      	b.n	802e24c <_malloc_r+0xa0>
 802e22e:	6822      	ldr	r2, [r4, #0]
 802e230:	1b52      	subs	r2, r2, r5
 802e232:	d41e      	bmi.n	802e272 <_malloc_r+0xc6>
 802e234:	2a0b      	cmp	r2, #11
 802e236:	d916      	bls.n	802e266 <_malloc_r+0xba>
 802e238:	1961      	adds	r1, r4, r5
 802e23a:	42a3      	cmp	r3, r4
 802e23c:	6025      	str	r5, [r4, #0]
 802e23e:	bf18      	it	ne
 802e240:	6059      	strne	r1, [r3, #4]
 802e242:	6863      	ldr	r3, [r4, #4]
 802e244:	bf08      	it	eq
 802e246:	6031      	streq	r1, [r6, #0]
 802e248:	5162      	str	r2, [r4, r5]
 802e24a:	604b      	str	r3, [r1, #4]
 802e24c:	4638      	mov	r0, r7
 802e24e:	f104 060b 	add.w	r6, r4, #11
 802e252:	f000 fbc3 	bl	802e9dc <__malloc_unlock>
 802e256:	f026 0607 	bic.w	r6, r6, #7
 802e25a:	1d23      	adds	r3, r4, #4
 802e25c:	1af2      	subs	r2, r6, r3
 802e25e:	d0b6      	beq.n	802e1ce <_malloc_r+0x22>
 802e260:	1b9b      	subs	r3, r3, r6
 802e262:	50a3      	str	r3, [r4, r2]
 802e264:	e7b3      	b.n	802e1ce <_malloc_r+0x22>
 802e266:	6862      	ldr	r2, [r4, #4]
 802e268:	42a3      	cmp	r3, r4
 802e26a:	bf0c      	ite	eq
 802e26c:	6032      	streq	r2, [r6, #0]
 802e26e:	605a      	strne	r2, [r3, #4]
 802e270:	e7ec      	b.n	802e24c <_malloc_r+0xa0>
 802e272:	4623      	mov	r3, r4
 802e274:	6864      	ldr	r4, [r4, #4]
 802e276:	e7b2      	b.n	802e1de <_malloc_r+0x32>
 802e278:	4634      	mov	r4, r6
 802e27a:	6876      	ldr	r6, [r6, #4]
 802e27c:	e7b9      	b.n	802e1f2 <_malloc_r+0x46>
 802e27e:	230c      	movs	r3, #12
 802e280:	603b      	str	r3, [r7, #0]
 802e282:	4638      	mov	r0, r7
 802e284:	f000 fbaa 	bl	802e9dc <__malloc_unlock>
 802e288:	e7a1      	b.n	802e1ce <_malloc_r+0x22>
 802e28a:	6025      	str	r5, [r4, #0]
 802e28c:	e7de      	b.n	802e24c <_malloc_r+0xa0>
 802e28e:	bf00      	nop
 802e290:	200011fc 	.word	0x200011fc

0802e294 <iprintf>:
 802e294:	b40f      	push	{r0, r1, r2, r3}
 802e296:	4b0a      	ldr	r3, [pc, #40]	; (802e2c0 <iprintf+0x2c>)
 802e298:	b513      	push	{r0, r1, r4, lr}
 802e29a:	681c      	ldr	r4, [r3, #0]
 802e29c:	b124      	cbz	r4, 802e2a8 <iprintf+0x14>
 802e29e:	69a3      	ldr	r3, [r4, #24]
 802e2a0:	b913      	cbnz	r3, 802e2a8 <iprintf+0x14>
 802e2a2:	4620      	mov	r0, r4
 802e2a4:	f000 fa8e 	bl	802e7c4 <__sinit>
 802e2a8:	ab05      	add	r3, sp, #20
 802e2aa:	9a04      	ldr	r2, [sp, #16]
 802e2ac:	68a1      	ldr	r1, [r4, #8]
 802e2ae:	9301      	str	r3, [sp, #4]
 802e2b0:	4620      	mov	r0, r4
 802e2b2:	f000 fd1f 	bl	802ecf4 <_vfiprintf_r>
 802e2b6:	b002      	add	sp, #8
 802e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e2bc:	b004      	add	sp, #16
 802e2be:	4770      	bx	lr
 802e2c0:	20000080 	.word	0x20000080

0802e2c4 <_puts_r>:
 802e2c4:	b570      	push	{r4, r5, r6, lr}
 802e2c6:	460e      	mov	r6, r1
 802e2c8:	4605      	mov	r5, r0
 802e2ca:	b118      	cbz	r0, 802e2d4 <_puts_r+0x10>
 802e2cc:	6983      	ldr	r3, [r0, #24]
 802e2ce:	b90b      	cbnz	r3, 802e2d4 <_puts_r+0x10>
 802e2d0:	f000 fa78 	bl	802e7c4 <__sinit>
 802e2d4:	69ab      	ldr	r3, [r5, #24]
 802e2d6:	68ac      	ldr	r4, [r5, #8]
 802e2d8:	b913      	cbnz	r3, 802e2e0 <_puts_r+0x1c>
 802e2da:	4628      	mov	r0, r5
 802e2dc:	f000 fa72 	bl	802e7c4 <__sinit>
 802e2e0:	4b2c      	ldr	r3, [pc, #176]	; (802e394 <_puts_r+0xd0>)
 802e2e2:	429c      	cmp	r4, r3
 802e2e4:	d120      	bne.n	802e328 <_puts_r+0x64>
 802e2e6:	686c      	ldr	r4, [r5, #4]
 802e2e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e2ea:	07db      	lsls	r3, r3, #31
 802e2ec:	d405      	bmi.n	802e2fa <_puts_r+0x36>
 802e2ee:	89a3      	ldrh	r3, [r4, #12]
 802e2f0:	0598      	lsls	r0, r3, #22
 802e2f2:	d402      	bmi.n	802e2fa <_puts_r+0x36>
 802e2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e2f6:	f000 fb03 	bl	802e900 <__retarget_lock_acquire_recursive>
 802e2fa:	89a3      	ldrh	r3, [r4, #12]
 802e2fc:	0719      	lsls	r1, r3, #28
 802e2fe:	d51d      	bpl.n	802e33c <_puts_r+0x78>
 802e300:	6923      	ldr	r3, [r4, #16]
 802e302:	b1db      	cbz	r3, 802e33c <_puts_r+0x78>
 802e304:	3e01      	subs	r6, #1
 802e306:	68a3      	ldr	r3, [r4, #8]
 802e308:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e30c:	3b01      	subs	r3, #1
 802e30e:	60a3      	str	r3, [r4, #8]
 802e310:	bb39      	cbnz	r1, 802e362 <_puts_r+0x9e>
 802e312:	2b00      	cmp	r3, #0
 802e314:	da38      	bge.n	802e388 <_puts_r+0xc4>
 802e316:	4622      	mov	r2, r4
 802e318:	210a      	movs	r1, #10
 802e31a:	4628      	mov	r0, r5
 802e31c:	f000 f878 	bl	802e410 <__swbuf_r>
 802e320:	3001      	adds	r0, #1
 802e322:	d011      	beq.n	802e348 <_puts_r+0x84>
 802e324:	250a      	movs	r5, #10
 802e326:	e011      	b.n	802e34c <_puts_r+0x88>
 802e328:	4b1b      	ldr	r3, [pc, #108]	; (802e398 <_puts_r+0xd4>)
 802e32a:	429c      	cmp	r4, r3
 802e32c:	d101      	bne.n	802e332 <_puts_r+0x6e>
 802e32e:	68ac      	ldr	r4, [r5, #8]
 802e330:	e7da      	b.n	802e2e8 <_puts_r+0x24>
 802e332:	4b1a      	ldr	r3, [pc, #104]	; (802e39c <_puts_r+0xd8>)
 802e334:	429c      	cmp	r4, r3
 802e336:	bf08      	it	eq
 802e338:	68ec      	ldreq	r4, [r5, #12]
 802e33a:	e7d5      	b.n	802e2e8 <_puts_r+0x24>
 802e33c:	4621      	mov	r1, r4
 802e33e:	4628      	mov	r0, r5
 802e340:	f000 f8b8 	bl	802e4b4 <__swsetup_r>
 802e344:	2800      	cmp	r0, #0
 802e346:	d0dd      	beq.n	802e304 <_puts_r+0x40>
 802e348:	f04f 35ff 	mov.w	r5, #4294967295
 802e34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e34e:	07da      	lsls	r2, r3, #31
 802e350:	d405      	bmi.n	802e35e <_puts_r+0x9a>
 802e352:	89a3      	ldrh	r3, [r4, #12]
 802e354:	059b      	lsls	r3, r3, #22
 802e356:	d402      	bmi.n	802e35e <_puts_r+0x9a>
 802e358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e35a:	f000 fad2 	bl	802e902 <__retarget_lock_release_recursive>
 802e35e:	4628      	mov	r0, r5
 802e360:	bd70      	pop	{r4, r5, r6, pc}
 802e362:	2b00      	cmp	r3, #0
 802e364:	da04      	bge.n	802e370 <_puts_r+0xac>
 802e366:	69a2      	ldr	r2, [r4, #24]
 802e368:	429a      	cmp	r2, r3
 802e36a:	dc06      	bgt.n	802e37a <_puts_r+0xb6>
 802e36c:	290a      	cmp	r1, #10
 802e36e:	d004      	beq.n	802e37a <_puts_r+0xb6>
 802e370:	6823      	ldr	r3, [r4, #0]
 802e372:	1c5a      	adds	r2, r3, #1
 802e374:	6022      	str	r2, [r4, #0]
 802e376:	7019      	strb	r1, [r3, #0]
 802e378:	e7c5      	b.n	802e306 <_puts_r+0x42>
 802e37a:	4622      	mov	r2, r4
 802e37c:	4628      	mov	r0, r5
 802e37e:	f000 f847 	bl	802e410 <__swbuf_r>
 802e382:	3001      	adds	r0, #1
 802e384:	d1bf      	bne.n	802e306 <_puts_r+0x42>
 802e386:	e7df      	b.n	802e348 <_puts_r+0x84>
 802e388:	6823      	ldr	r3, [r4, #0]
 802e38a:	250a      	movs	r5, #10
 802e38c:	1c5a      	adds	r2, r3, #1
 802e38e:	6022      	str	r2, [r4, #0]
 802e390:	701d      	strb	r5, [r3, #0]
 802e392:	e7db      	b.n	802e34c <_puts_r+0x88>
 802e394:	08031a5c 	.word	0x08031a5c
 802e398:	08031a7c 	.word	0x08031a7c
 802e39c:	08031a3c 	.word	0x08031a3c

0802e3a0 <puts>:
 802e3a0:	4b02      	ldr	r3, [pc, #8]	; (802e3ac <puts+0xc>)
 802e3a2:	4601      	mov	r1, r0
 802e3a4:	6818      	ldr	r0, [r3, #0]
 802e3a6:	f7ff bf8d 	b.w	802e2c4 <_puts_r>
 802e3aa:	bf00      	nop
 802e3ac:	20000080 	.word	0x20000080

0802e3b0 <_sbrk_r>:
 802e3b0:	b538      	push	{r3, r4, r5, lr}
 802e3b2:	4d06      	ldr	r5, [pc, #24]	; (802e3cc <_sbrk_r+0x1c>)
 802e3b4:	2300      	movs	r3, #0
 802e3b6:	4604      	mov	r4, r0
 802e3b8:	4608      	mov	r0, r1
 802e3ba:	602b      	str	r3, [r5, #0]
 802e3bc:	f7f3 fecc 	bl	8022158 <_sbrk>
 802e3c0:	1c43      	adds	r3, r0, #1
 802e3c2:	d102      	bne.n	802e3ca <_sbrk_r+0x1a>
 802e3c4:	682b      	ldr	r3, [r5, #0]
 802e3c6:	b103      	cbz	r3, 802e3ca <_sbrk_r+0x1a>
 802e3c8:	6023      	str	r3, [r4, #0]
 802e3ca:	bd38      	pop	{r3, r4, r5, pc}
 802e3cc:	20001208 	.word	0x20001208

0802e3d0 <siprintf>:
 802e3d0:	b40e      	push	{r1, r2, r3}
 802e3d2:	b500      	push	{lr}
 802e3d4:	b09c      	sub	sp, #112	; 0x70
 802e3d6:	ab1d      	add	r3, sp, #116	; 0x74
 802e3d8:	9002      	str	r0, [sp, #8]
 802e3da:	9006      	str	r0, [sp, #24]
 802e3dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e3e0:	4809      	ldr	r0, [pc, #36]	; (802e408 <siprintf+0x38>)
 802e3e2:	9107      	str	r1, [sp, #28]
 802e3e4:	9104      	str	r1, [sp, #16]
 802e3e6:	4909      	ldr	r1, [pc, #36]	; (802e40c <siprintf+0x3c>)
 802e3e8:	f853 2b04 	ldr.w	r2, [r3], #4
 802e3ec:	9105      	str	r1, [sp, #20]
 802e3ee:	6800      	ldr	r0, [r0, #0]
 802e3f0:	9301      	str	r3, [sp, #4]
 802e3f2:	a902      	add	r1, sp, #8
 802e3f4:	f000 fb54 	bl	802eaa0 <_svfiprintf_r>
 802e3f8:	9b02      	ldr	r3, [sp, #8]
 802e3fa:	2200      	movs	r2, #0
 802e3fc:	701a      	strb	r2, [r3, #0]
 802e3fe:	b01c      	add	sp, #112	; 0x70
 802e400:	f85d eb04 	ldr.w	lr, [sp], #4
 802e404:	b003      	add	sp, #12
 802e406:	4770      	bx	lr
 802e408:	20000080 	.word	0x20000080
 802e40c:	ffff0208 	.word	0xffff0208

0802e410 <__swbuf_r>:
 802e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e412:	460e      	mov	r6, r1
 802e414:	4614      	mov	r4, r2
 802e416:	4605      	mov	r5, r0
 802e418:	b118      	cbz	r0, 802e422 <__swbuf_r+0x12>
 802e41a:	6983      	ldr	r3, [r0, #24]
 802e41c:	b90b      	cbnz	r3, 802e422 <__swbuf_r+0x12>
 802e41e:	f000 f9d1 	bl	802e7c4 <__sinit>
 802e422:	4b21      	ldr	r3, [pc, #132]	; (802e4a8 <__swbuf_r+0x98>)
 802e424:	429c      	cmp	r4, r3
 802e426:	d12b      	bne.n	802e480 <__swbuf_r+0x70>
 802e428:	686c      	ldr	r4, [r5, #4]
 802e42a:	69a3      	ldr	r3, [r4, #24]
 802e42c:	60a3      	str	r3, [r4, #8]
 802e42e:	89a3      	ldrh	r3, [r4, #12]
 802e430:	071a      	lsls	r2, r3, #28
 802e432:	d52f      	bpl.n	802e494 <__swbuf_r+0x84>
 802e434:	6923      	ldr	r3, [r4, #16]
 802e436:	b36b      	cbz	r3, 802e494 <__swbuf_r+0x84>
 802e438:	6923      	ldr	r3, [r4, #16]
 802e43a:	6820      	ldr	r0, [r4, #0]
 802e43c:	1ac0      	subs	r0, r0, r3
 802e43e:	6963      	ldr	r3, [r4, #20]
 802e440:	b2f6      	uxtb	r6, r6
 802e442:	4283      	cmp	r3, r0
 802e444:	4637      	mov	r7, r6
 802e446:	dc04      	bgt.n	802e452 <__swbuf_r+0x42>
 802e448:	4621      	mov	r1, r4
 802e44a:	4628      	mov	r0, r5
 802e44c:	f000 f926 	bl	802e69c <_fflush_r>
 802e450:	bb30      	cbnz	r0, 802e4a0 <__swbuf_r+0x90>
 802e452:	68a3      	ldr	r3, [r4, #8]
 802e454:	3b01      	subs	r3, #1
 802e456:	60a3      	str	r3, [r4, #8]
 802e458:	6823      	ldr	r3, [r4, #0]
 802e45a:	1c5a      	adds	r2, r3, #1
 802e45c:	6022      	str	r2, [r4, #0]
 802e45e:	701e      	strb	r6, [r3, #0]
 802e460:	6963      	ldr	r3, [r4, #20]
 802e462:	3001      	adds	r0, #1
 802e464:	4283      	cmp	r3, r0
 802e466:	d004      	beq.n	802e472 <__swbuf_r+0x62>
 802e468:	89a3      	ldrh	r3, [r4, #12]
 802e46a:	07db      	lsls	r3, r3, #31
 802e46c:	d506      	bpl.n	802e47c <__swbuf_r+0x6c>
 802e46e:	2e0a      	cmp	r6, #10
 802e470:	d104      	bne.n	802e47c <__swbuf_r+0x6c>
 802e472:	4621      	mov	r1, r4
 802e474:	4628      	mov	r0, r5
 802e476:	f000 f911 	bl	802e69c <_fflush_r>
 802e47a:	b988      	cbnz	r0, 802e4a0 <__swbuf_r+0x90>
 802e47c:	4638      	mov	r0, r7
 802e47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e480:	4b0a      	ldr	r3, [pc, #40]	; (802e4ac <__swbuf_r+0x9c>)
 802e482:	429c      	cmp	r4, r3
 802e484:	d101      	bne.n	802e48a <__swbuf_r+0x7a>
 802e486:	68ac      	ldr	r4, [r5, #8]
 802e488:	e7cf      	b.n	802e42a <__swbuf_r+0x1a>
 802e48a:	4b09      	ldr	r3, [pc, #36]	; (802e4b0 <__swbuf_r+0xa0>)
 802e48c:	429c      	cmp	r4, r3
 802e48e:	bf08      	it	eq
 802e490:	68ec      	ldreq	r4, [r5, #12]
 802e492:	e7ca      	b.n	802e42a <__swbuf_r+0x1a>
 802e494:	4621      	mov	r1, r4
 802e496:	4628      	mov	r0, r5
 802e498:	f000 f80c 	bl	802e4b4 <__swsetup_r>
 802e49c:	2800      	cmp	r0, #0
 802e49e:	d0cb      	beq.n	802e438 <__swbuf_r+0x28>
 802e4a0:	f04f 37ff 	mov.w	r7, #4294967295
 802e4a4:	e7ea      	b.n	802e47c <__swbuf_r+0x6c>
 802e4a6:	bf00      	nop
 802e4a8:	08031a5c 	.word	0x08031a5c
 802e4ac:	08031a7c 	.word	0x08031a7c
 802e4b0:	08031a3c 	.word	0x08031a3c

0802e4b4 <__swsetup_r>:
 802e4b4:	4b32      	ldr	r3, [pc, #200]	; (802e580 <__swsetup_r+0xcc>)
 802e4b6:	b570      	push	{r4, r5, r6, lr}
 802e4b8:	681d      	ldr	r5, [r3, #0]
 802e4ba:	4606      	mov	r6, r0
 802e4bc:	460c      	mov	r4, r1
 802e4be:	b125      	cbz	r5, 802e4ca <__swsetup_r+0x16>
 802e4c0:	69ab      	ldr	r3, [r5, #24]
 802e4c2:	b913      	cbnz	r3, 802e4ca <__swsetup_r+0x16>
 802e4c4:	4628      	mov	r0, r5
 802e4c6:	f000 f97d 	bl	802e7c4 <__sinit>
 802e4ca:	4b2e      	ldr	r3, [pc, #184]	; (802e584 <__swsetup_r+0xd0>)
 802e4cc:	429c      	cmp	r4, r3
 802e4ce:	d10f      	bne.n	802e4f0 <__swsetup_r+0x3c>
 802e4d0:	686c      	ldr	r4, [r5, #4]
 802e4d2:	89a3      	ldrh	r3, [r4, #12]
 802e4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e4d8:	0719      	lsls	r1, r3, #28
 802e4da:	d42c      	bmi.n	802e536 <__swsetup_r+0x82>
 802e4dc:	06dd      	lsls	r5, r3, #27
 802e4de:	d411      	bmi.n	802e504 <__swsetup_r+0x50>
 802e4e0:	2309      	movs	r3, #9
 802e4e2:	6033      	str	r3, [r6, #0]
 802e4e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e4e8:	81a3      	strh	r3, [r4, #12]
 802e4ea:	f04f 30ff 	mov.w	r0, #4294967295
 802e4ee:	e03e      	b.n	802e56e <__swsetup_r+0xba>
 802e4f0:	4b25      	ldr	r3, [pc, #148]	; (802e588 <__swsetup_r+0xd4>)
 802e4f2:	429c      	cmp	r4, r3
 802e4f4:	d101      	bne.n	802e4fa <__swsetup_r+0x46>
 802e4f6:	68ac      	ldr	r4, [r5, #8]
 802e4f8:	e7eb      	b.n	802e4d2 <__swsetup_r+0x1e>
 802e4fa:	4b24      	ldr	r3, [pc, #144]	; (802e58c <__swsetup_r+0xd8>)
 802e4fc:	429c      	cmp	r4, r3
 802e4fe:	bf08      	it	eq
 802e500:	68ec      	ldreq	r4, [r5, #12]
 802e502:	e7e6      	b.n	802e4d2 <__swsetup_r+0x1e>
 802e504:	0758      	lsls	r0, r3, #29
 802e506:	d512      	bpl.n	802e52e <__swsetup_r+0x7a>
 802e508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e50a:	b141      	cbz	r1, 802e51e <__swsetup_r+0x6a>
 802e50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e510:	4299      	cmp	r1, r3
 802e512:	d002      	beq.n	802e51a <__swsetup_r+0x66>
 802e514:	4630      	mov	r0, r6
 802e516:	f7ff fddd 	bl	802e0d4 <_free_r>
 802e51a:	2300      	movs	r3, #0
 802e51c:	6363      	str	r3, [r4, #52]	; 0x34
 802e51e:	89a3      	ldrh	r3, [r4, #12]
 802e520:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e524:	81a3      	strh	r3, [r4, #12]
 802e526:	2300      	movs	r3, #0
 802e528:	6063      	str	r3, [r4, #4]
 802e52a:	6923      	ldr	r3, [r4, #16]
 802e52c:	6023      	str	r3, [r4, #0]
 802e52e:	89a3      	ldrh	r3, [r4, #12]
 802e530:	f043 0308 	orr.w	r3, r3, #8
 802e534:	81a3      	strh	r3, [r4, #12]
 802e536:	6923      	ldr	r3, [r4, #16]
 802e538:	b94b      	cbnz	r3, 802e54e <__swsetup_r+0x9a>
 802e53a:	89a3      	ldrh	r3, [r4, #12]
 802e53c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e544:	d003      	beq.n	802e54e <__swsetup_r+0x9a>
 802e546:	4621      	mov	r1, r4
 802e548:	4630      	mov	r0, r6
 802e54a:	f000 fa01 	bl	802e950 <__smakebuf_r>
 802e54e:	89a0      	ldrh	r0, [r4, #12]
 802e550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e554:	f010 0301 	ands.w	r3, r0, #1
 802e558:	d00a      	beq.n	802e570 <__swsetup_r+0xbc>
 802e55a:	2300      	movs	r3, #0
 802e55c:	60a3      	str	r3, [r4, #8]
 802e55e:	6963      	ldr	r3, [r4, #20]
 802e560:	425b      	negs	r3, r3
 802e562:	61a3      	str	r3, [r4, #24]
 802e564:	6923      	ldr	r3, [r4, #16]
 802e566:	b943      	cbnz	r3, 802e57a <__swsetup_r+0xc6>
 802e568:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e56c:	d1ba      	bne.n	802e4e4 <__swsetup_r+0x30>
 802e56e:	bd70      	pop	{r4, r5, r6, pc}
 802e570:	0781      	lsls	r1, r0, #30
 802e572:	bf58      	it	pl
 802e574:	6963      	ldrpl	r3, [r4, #20]
 802e576:	60a3      	str	r3, [r4, #8]
 802e578:	e7f4      	b.n	802e564 <__swsetup_r+0xb0>
 802e57a:	2000      	movs	r0, #0
 802e57c:	e7f7      	b.n	802e56e <__swsetup_r+0xba>
 802e57e:	bf00      	nop
 802e580:	20000080 	.word	0x20000080
 802e584:	08031a5c 	.word	0x08031a5c
 802e588:	08031a7c 	.word	0x08031a7c
 802e58c:	08031a3c 	.word	0x08031a3c

0802e590 <__sflush_r>:
 802e590:	898a      	ldrh	r2, [r1, #12]
 802e592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e596:	4605      	mov	r5, r0
 802e598:	0710      	lsls	r0, r2, #28
 802e59a:	460c      	mov	r4, r1
 802e59c:	d458      	bmi.n	802e650 <__sflush_r+0xc0>
 802e59e:	684b      	ldr	r3, [r1, #4]
 802e5a0:	2b00      	cmp	r3, #0
 802e5a2:	dc05      	bgt.n	802e5b0 <__sflush_r+0x20>
 802e5a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e5a6:	2b00      	cmp	r3, #0
 802e5a8:	dc02      	bgt.n	802e5b0 <__sflush_r+0x20>
 802e5aa:	2000      	movs	r0, #0
 802e5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e5b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5b2:	2e00      	cmp	r6, #0
 802e5b4:	d0f9      	beq.n	802e5aa <__sflush_r+0x1a>
 802e5b6:	2300      	movs	r3, #0
 802e5b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e5bc:	682f      	ldr	r7, [r5, #0]
 802e5be:	602b      	str	r3, [r5, #0]
 802e5c0:	d032      	beq.n	802e628 <__sflush_r+0x98>
 802e5c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e5c4:	89a3      	ldrh	r3, [r4, #12]
 802e5c6:	075a      	lsls	r2, r3, #29
 802e5c8:	d505      	bpl.n	802e5d6 <__sflush_r+0x46>
 802e5ca:	6863      	ldr	r3, [r4, #4]
 802e5cc:	1ac0      	subs	r0, r0, r3
 802e5ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e5d0:	b10b      	cbz	r3, 802e5d6 <__sflush_r+0x46>
 802e5d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e5d4:	1ac0      	subs	r0, r0, r3
 802e5d6:	2300      	movs	r3, #0
 802e5d8:	4602      	mov	r2, r0
 802e5da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e5dc:	6a21      	ldr	r1, [r4, #32]
 802e5de:	4628      	mov	r0, r5
 802e5e0:	47b0      	blx	r6
 802e5e2:	1c43      	adds	r3, r0, #1
 802e5e4:	89a3      	ldrh	r3, [r4, #12]
 802e5e6:	d106      	bne.n	802e5f6 <__sflush_r+0x66>
 802e5e8:	6829      	ldr	r1, [r5, #0]
 802e5ea:	291d      	cmp	r1, #29
 802e5ec:	d82c      	bhi.n	802e648 <__sflush_r+0xb8>
 802e5ee:	4a2a      	ldr	r2, [pc, #168]	; (802e698 <__sflush_r+0x108>)
 802e5f0:	40ca      	lsrs	r2, r1
 802e5f2:	07d6      	lsls	r6, r2, #31
 802e5f4:	d528      	bpl.n	802e648 <__sflush_r+0xb8>
 802e5f6:	2200      	movs	r2, #0
 802e5f8:	6062      	str	r2, [r4, #4]
 802e5fa:	04d9      	lsls	r1, r3, #19
 802e5fc:	6922      	ldr	r2, [r4, #16]
 802e5fe:	6022      	str	r2, [r4, #0]
 802e600:	d504      	bpl.n	802e60c <__sflush_r+0x7c>
 802e602:	1c42      	adds	r2, r0, #1
 802e604:	d101      	bne.n	802e60a <__sflush_r+0x7a>
 802e606:	682b      	ldr	r3, [r5, #0]
 802e608:	b903      	cbnz	r3, 802e60c <__sflush_r+0x7c>
 802e60a:	6560      	str	r0, [r4, #84]	; 0x54
 802e60c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e60e:	602f      	str	r7, [r5, #0]
 802e610:	2900      	cmp	r1, #0
 802e612:	d0ca      	beq.n	802e5aa <__sflush_r+0x1a>
 802e614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e618:	4299      	cmp	r1, r3
 802e61a:	d002      	beq.n	802e622 <__sflush_r+0x92>
 802e61c:	4628      	mov	r0, r5
 802e61e:	f7ff fd59 	bl	802e0d4 <_free_r>
 802e622:	2000      	movs	r0, #0
 802e624:	6360      	str	r0, [r4, #52]	; 0x34
 802e626:	e7c1      	b.n	802e5ac <__sflush_r+0x1c>
 802e628:	6a21      	ldr	r1, [r4, #32]
 802e62a:	2301      	movs	r3, #1
 802e62c:	4628      	mov	r0, r5
 802e62e:	47b0      	blx	r6
 802e630:	1c41      	adds	r1, r0, #1
 802e632:	d1c7      	bne.n	802e5c4 <__sflush_r+0x34>
 802e634:	682b      	ldr	r3, [r5, #0]
 802e636:	2b00      	cmp	r3, #0
 802e638:	d0c4      	beq.n	802e5c4 <__sflush_r+0x34>
 802e63a:	2b1d      	cmp	r3, #29
 802e63c:	d001      	beq.n	802e642 <__sflush_r+0xb2>
 802e63e:	2b16      	cmp	r3, #22
 802e640:	d101      	bne.n	802e646 <__sflush_r+0xb6>
 802e642:	602f      	str	r7, [r5, #0]
 802e644:	e7b1      	b.n	802e5aa <__sflush_r+0x1a>
 802e646:	89a3      	ldrh	r3, [r4, #12]
 802e648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e64c:	81a3      	strh	r3, [r4, #12]
 802e64e:	e7ad      	b.n	802e5ac <__sflush_r+0x1c>
 802e650:	690f      	ldr	r7, [r1, #16]
 802e652:	2f00      	cmp	r7, #0
 802e654:	d0a9      	beq.n	802e5aa <__sflush_r+0x1a>
 802e656:	0793      	lsls	r3, r2, #30
 802e658:	680e      	ldr	r6, [r1, #0]
 802e65a:	bf08      	it	eq
 802e65c:	694b      	ldreq	r3, [r1, #20]
 802e65e:	600f      	str	r7, [r1, #0]
 802e660:	bf18      	it	ne
 802e662:	2300      	movne	r3, #0
 802e664:	eba6 0807 	sub.w	r8, r6, r7
 802e668:	608b      	str	r3, [r1, #8]
 802e66a:	f1b8 0f00 	cmp.w	r8, #0
 802e66e:	dd9c      	ble.n	802e5aa <__sflush_r+0x1a>
 802e670:	6a21      	ldr	r1, [r4, #32]
 802e672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e674:	4643      	mov	r3, r8
 802e676:	463a      	mov	r2, r7
 802e678:	4628      	mov	r0, r5
 802e67a:	47b0      	blx	r6
 802e67c:	2800      	cmp	r0, #0
 802e67e:	dc06      	bgt.n	802e68e <__sflush_r+0xfe>
 802e680:	89a3      	ldrh	r3, [r4, #12]
 802e682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e686:	81a3      	strh	r3, [r4, #12]
 802e688:	f04f 30ff 	mov.w	r0, #4294967295
 802e68c:	e78e      	b.n	802e5ac <__sflush_r+0x1c>
 802e68e:	4407      	add	r7, r0
 802e690:	eba8 0800 	sub.w	r8, r8, r0
 802e694:	e7e9      	b.n	802e66a <__sflush_r+0xda>
 802e696:	bf00      	nop
 802e698:	20400001 	.word	0x20400001

0802e69c <_fflush_r>:
 802e69c:	b538      	push	{r3, r4, r5, lr}
 802e69e:	690b      	ldr	r3, [r1, #16]
 802e6a0:	4605      	mov	r5, r0
 802e6a2:	460c      	mov	r4, r1
 802e6a4:	b913      	cbnz	r3, 802e6ac <_fflush_r+0x10>
 802e6a6:	2500      	movs	r5, #0
 802e6a8:	4628      	mov	r0, r5
 802e6aa:	bd38      	pop	{r3, r4, r5, pc}
 802e6ac:	b118      	cbz	r0, 802e6b6 <_fflush_r+0x1a>
 802e6ae:	6983      	ldr	r3, [r0, #24]
 802e6b0:	b90b      	cbnz	r3, 802e6b6 <_fflush_r+0x1a>
 802e6b2:	f000 f887 	bl	802e7c4 <__sinit>
 802e6b6:	4b14      	ldr	r3, [pc, #80]	; (802e708 <_fflush_r+0x6c>)
 802e6b8:	429c      	cmp	r4, r3
 802e6ba:	d11b      	bne.n	802e6f4 <_fflush_r+0x58>
 802e6bc:	686c      	ldr	r4, [r5, #4]
 802e6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e6c2:	2b00      	cmp	r3, #0
 802e6c4:	d0ef      	beq.n	802e6a6 <_fflush_r+0xa>
 802e6c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e6c8:	07d0      	lsls	r0, r2, #31
 802e6ca:	d404      	bmi.n	802e6d6 <_fflush_r+0x3a>
 802e6cc:	0599      	lsls	r1, r3, #22
 802e6ce:	d402      	bmi.n	802e6d6 <_fflush_r+0x3a>
 802e6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e6d2:	f000 f915 	bl	802e900 <__retarget_lock_acquire_recursive>
 802e6d6:	4628      	mov	r0, r5
 802e6d8:	4621      	mov	r1, r4
 802e6da:	f7ff ff59 	bl	802e590 <__sflush_r>
 802e6de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e6e0:	07da      	lsls	r2, r3, #31
 802e6e2:	4605      	mov	r5, r0
 802e6e4:	d4e0      	bmi.n	802e6a8 <_fflush_r+0xc>
 802e6e6:	89a3      	ldrh	r3, [r4, #12]
 802e6e8:	059b      	lsls	r3, r3, #22
 802e6ea:	d4dd      	bmi.n	802e6a8 <_fflush_r+0xc>
 802e6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e6ee:	f000 f908 	bl	802e902 <__retarget_lock_release_recursive>
 802e6f2:	e7d9      	b.n	802e6a8 <_fflush_r+0xc>
 802e6f4:	4b05      	ldr	r3, [pc, #20]	; (802e70c <_fflush_r+0x70>)
 802e6f6:	429c      	cmp	r4, r3
 802e6f8:	d101      	bne.n	802e6fe <_fflush_r+0x62>
 802e6fa:	68ac      	ldr	r4, [r5, #8]
 802e6fc:	e7df      	b.n	802e6be <_fflush_r+0x22>
 802e6fe:	4b04      	ldr	r3, [pc, #16]	; (802e710 <_fflush_r+0x74>)
 802e700:	429c      	cmp	r4, r3
 802e702:	bf08      	it	eq
 802e704:	68ec      	ldreq	r4, [r5, #12]
 802e706:	e7da      	b.n	802e6be <_fflush_r+0x22>
 802e708:	08031a5c 	.word	0x08031a5c
 802e70c:	08031a7c 	.word	0x08031a7c
 802e710:	08031a3c 	.word	0x08031a3c

0802e714 <std>:
 802e714:	2300      	movs	r3, #0
 802e716:	b510      	push	{r4, lr}
 802e718:	4604      	mov	r4, r0
 802e71a:	e9c0 3300 	strd	r3, r3, [r0]
 802e71e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e722:	6083      	str	r3, [r0, #8]
 802e724:	8181      	strh	r1, [r0, #12]
 802e726:	6643      	str	r3, [r0, #100]	; 0x64
 802e728:	81c2      	strh	r2, [r0, #14]
 802e72a:	6183      	str	r3, [r0, #24]
 802e72c:	4619      	mov	r1, r3
 802e72e:	2208      	movs	r2, #8
 802e730:	305c      	adds	r0, #92	; 0x5c
 802e732:	f7ff fcc7 	bl	802e0c4 <memset>
 802e736:	4b05      	ldr	r3, [pc, #20]	; (802e74c <std+0x38>)
 802e738:	6263      	str	r3, [r4, #36]	; 0x24
 802e73a:	4b05      	ldr	r3, [pc, #20]	; (802e750 <std+0x3c>)
 802e73c:	62a3      	str	r3, [r4, #40]	; 0x28
 802e73e:	4b05      	ldr	r3, [pc, #20]	; (802e754 <std+0x40>)
 802e740:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e742:	4b05      	ldr	r3, [pc, #20]	; (802e758 <std+0x44>)
 802e744:	6224      	str	r4, [r4, #32]
 802e746:	6323      	str	r3, [r4, #48]	; 0x30
 802e748:	bd10      	pop	{r4, pc}
 802e74a:	bf00      	nop
 802e74c:	0802f27d 	.word	0x0802f27d
 802e750:	0802f29f 	.word	0x0802f29f
 802e754:	0802f2d7 	.word	0x0802f2d7
 802e758:	0802f2fb 	.word	0x0802f2fb

0802e75c <_cleanup_r>:
 802e75c:	4901      	ldr	r1, [pc, #4]	; (802e764 <_cleanup_r+0x8>)
 802e75e:	f000 b8af 	b.w	802e8c0 <_fwalk_reent>
 802e762:	bf00      	nop
 802e764:	0802e69d 	.word	0x0802e69d

0802e768 <__sfmoreglue>:
 802e768:	b570      	push	{r4, r5, r6, lr}
 802e76a:	2268      	movs	r2, #104	; 0x68
 802e76c:	1e4d      	subs	r5, r1, #1
 802e76e:	4355      	muls	r5, r2
 802e770:	460e      	mov	r6, r1
 802e772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e776:	f7ff fd19 	bl	802e1ac <_malloc_r>
 802e77a:	4604      	mov	r4, r0
 802e77c:	b140      	cbz	r0, 802e790 <__sfmoreglue+0x28>
 802e77e:	2100      	movs	r1, #0
 802e780:	e9c0 1600 	strd	r1, r6, [r0]
 802e784:	300c      	adds	r0, #12
 802e786:	60a0      	str	r0, [r4, #8]
 802e788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e78c:	f7ff fc9a 	bl	802e0c4 <memset>
 802e790:	4620      	mov	r0, r4
 802e792:	bd70      	pop	{r4, r5, r6, pc}

0802e794 <__sfp_lock_acquire>:
 802e794:	4801      	ldr	r0, [pc, #4]	; (802e79c <__sfp_lock_acquire+0x8>)
 802e796:	f000 b8b3 	b.w	802e900 <__retarget_lock_acquire_recursive>
 802e79a:	bf00      	nop
 802e79c:	20001205 	.word	0x20001205

0802e7a0 <__sfp_lock_release>:
 802e7a0:	4801      	ldr	r0, [pc, #4]	; (802e7a8 <__sfp_lock_release+0x8>)
 802e7a2:	f000 b8ae 	b.w	802e902 <__retarget_lock_release_recursive>
 802e7a6:	bf00      	nop
 802e7a8:	20001205 	.word	0x20001205

0802e7ac <__sinit_lock_acquire>:
 802e7ac:	4801      	ldr	r0, [pc, #4]	; (802e7b4 <__sinit_lock_acquire+0x8>)
 802e7ae:	f000 b8a7 	b.w	802e900 <__retarget_lock_acquire_recursive>
 802e7b2:	bf00      	nop
 802e7b4:	20001206 	.word	0x20001206

0802e7b8 <__sinit_lock_release>:
 802e7b8:	4801      	ldr	r0, [pc, #4]	; (802e7c0 <__sinit_lock_release+0x8>)
 802e7ba:	f000 b8a2 	b.w	802e902 <__retarget_lock_release_recursive>
 802e7be:	bf00      	nop
 802e7c0:	20001206 	.word	0x20001206

0802e7c4 <__sinit>:
 802e7c4:	b510      	push	{r4, lr}
 802e7c6:	4604      	mov	r4, r0
 802e7c8:	f7ff fff0 	bl	802e7ac <__sinit_lock_acquire>
 802e7cc:	69a3      	ldr	r3, [r4, #24]
 802e7ce:	b11b      	cbz	r3, 802e7d8 <__sinit+0x14>
 802e7d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e7d4:	f7ff bff0 	b.w	802e7b8 <__sinit_lock_release>
 802e7d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e7dc:	6523      	str	r3, [r4, #80]	; 0x50
 802e7de:	4b13      	ldr	r3, [pc, #76]	; (802e82c <__sinit+0x68>)
 802e7e0:	4a13      	ldr	r2, [pc, #76]	; (802e830 <__sinit+0x6c>)
 802e7e2:	681b      	ldr	r3, [r3, #0]
 802e7e4:	62a2      	str	r2, [r4, #40]	; 0x28
 802e7e6:	42a3      	cmp	r3, r4
 802e7e8:	bf04      	itt	eq
 802e7ea:	2301      	moveq	r3, #1
 802e7ec:	61a3      	streq	r3, [r4, #24]
 802e7ee:	4620      	mov	r0, r4
 802e7f0:	f000 f820 	bl	802e834 <__sfp>
 802e7f4:	6060      	str	r0, [r4, #4]
 802e7f6:	4620      	mov	r0, r4
 802e7f8:	f000 f81c 	bl	802e834 <__sfp>
 802e7fc:	60a0      	str	r0, [r4, #8]
 802e7fe:	4620      	mov	r0, r4
 802e800:	f000 f818 	bl	802e834 <__sfp>
 802e804:	2200      	movs	r2, #0
 802e806:	60e0      	str	r0, [r4, #12]
 802e808:	2104      	movs	r1, #4
 802e80a:	6860      	ldr	r0, [r4, #4]
 802e80c:	f7ff ff82 	bl	802e714 <std>
 802e810:	68a0      	ldr	r0, [r4, #8]
 802e812:	2201      	movs	r2, #1
 802e814:	2109      	movs	r1, #9
 802e816:	f7ff ff7d 	bl	802e714 <std>
 802e81a:	68e0      	ldr	r0, [r4, #12]
 802e81c:	2202      	movs	r2, #2
 802e81e:	2112      	movs	r1, #18
 802e820:	f7ff ff78 	bl	802e714 <std>
 802e824:	2301      	movs	r3, #1
 802e826:	61a3      	str	r3, [r4, #24]
 802e828:	e7d2      	b.n	802e7d0 <__sinit+0xc>
 802e82a:	bf00      	nop
 802e82c:	08031a38 	.word	0x08031a38
 802e830:	0802e75d 	.word	0x0802e75d

0802e834 <__sfp>:
 802e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e836:	4607      	mov	r7, r0
 802e838:	f7ff ffac 	bl	802e794 <__sfp_lock_acquire>
 802e83c:	4b1e      	ldr	r3, [pc, #120]	; (802e8b8 <__sfp+0x84>)
 802e83e:	681e      	ldr	r6, [r3, #0]
 802e840:	69b3      	ldr	r3, [r6, #24]
 802e842:	b913      	cbnz	r3, 802e84a <__sfp+0x16>
 802e844:	4630      	mov	r0, r6
 802e846:	f7ff ffbd 	bl	802e7c4 <__sinit>
 802e84a:	3648      	adds	r6, #72	; 0x48
 802e84c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e850:	3b01      	subs	r3, #1
 802e852:	d503      	bpl.n	802e85c <__sfp+0x28>
 802e854:	6833      	ldr	r3, [r6, #0]
 802e856:	b30b      	cbz	r3, 802e89c <__sfp+0x68>
 802e858:	6836      	ldr	r6, [r6, #0]
 802e85a:	e7f7      	b.n	802e84c <__sfp+0x18>
 802e85c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e860:	b9d5      	cbnz	r5, 802e898 <__sfp+0x64>
 802e862:	4b16      	ldr	r3, [pc, #88]	; (802e8bc <__sfp+0x88>)
 802e864:	60e3      	str	r3, [r4, #12]
 802e866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e86a:	6665      	str	r5, [r4, #100]	; 0x64
 802e86c:	f000 f847 	bl	802e8fe <__retarget_lock_init_recursive>
 802e870:	f7ff ff96 	bl	802e7a0 <__sfp_lock_release>
 802e874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e87c:	6025      	str	r5, [r4, #0]
 802e87e:	61a5      	str	r5, [r4, #24]
 802e880:	2208      	movs	r2, #8
 802e882:	4629      	mov	r1, r5
 802e884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e888:	f7ff fc1c 	bl	802e0c4 <memset>
 802e88c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e894:	4620      	mov	r0, r4
 802e896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e898:	3468      	adds	r4, #104	; 0x68
 802e89a:	e7d9      	b.n	802e850 <__sfp+0x1c>
 802e89c:	2104      	movs	r1, #4
 802e89e:	4638      	mov	r0, r7
 802e8a0:	f7ff ff62 	bl	802e768 <__sfmoreglue>
 802e8a4:	4604      	mov	r4, r0
 802e8a6:	6030      	str	r0, [r6, #0]
 802e8a8:	2800      	cmp	r0, #0
 802e8aa:	d1d5      	bne.n	802e858 <__sfp+0x24>
 802e8ac:	f7ff ff78 	bl	802e7a0 <__sfp_lock_release>
 802e8b0:	230c      	movs	r3, #12
 802e8b2:	603b      	str	r3, [r7, #0]
 802e8b4:	e7ee      	b.n	802e894 <__sfp+0x60>
 802e8b6:	bf00      	nop
 802e8b8:	08031a38 	.word	0x08031a38
 802e8bc:	ffff0001 	.word	0xffff0001

0802e8c0 <_fwalk_reent>:
 802e8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e8c4:	4606      	mov	r6, r0
 802e8c6:	4688      	mov	r8, r1
 802e8c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e8cc:	2700      	movs	r7, #0
 802e8ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e8d2:	f1b9 0901 	subs.w	r9, r9, #1
 802e8d6:	d505      	bpl.n	802e8e4 <_fwalk_reent+0x24>
 802e8d8:	6824      	ldr	r4, [r4, #0]
 802e8da:	2c00      	cmp	r4, #0
 802e8dc:	d1f7      	bne.n	802e8ce <_fwalk_reent+0xe>
 802e8de:	4638      	mov	r0, r7
 802e8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e8e4:	89ab      	ldrh	r3, [r5, #12]
 802e8e6:	2b01      	cmp	r3, #1
 802e8e8:	d907      	bls.n	802e8fa <_fwalk_reent+0x3a>
 802e8ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e8ee:	3301      	adds	r3, #1
 802e8f0:	d003      	beq.n	802e8fa <_fwalk_reent+0x3a>
 802e8f2:	4629      	mov	r1, r5
 802e8f4:	4630      	mov	r0, r6
 802e8f6:	47c0      	blx	r8
 802e8f8:	4307      	orrs	r7, r0
 802e8fa:	3568      	adds	r5, #104	; 0x68
 802e8fc:	e7e9      	b.n	802e8d2 <_fwalk_reent+0x12>

0802e8fe <__retarget_lock_init_recursive>:
 802e8fe:	4770      	bx	lr

0802e900 <__retarget_lock_acquire_recursive>:
 802e900:	4770      	bx	lr

0802e902 <__retarget_lock_release_recursive>:
 802e902:	4770      	bx	lr

0802e904 <__swhatbuf_r>:
 802e904:	b570      	push	{r4, r5, r6, lr}
 802e906:	460e      	mov	r6, r1
 802e908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e90c:	2900      	cmp	r1, #0
 802e90e:	b096      	sub	sp, #88	; 0x58
 802e910:	4614      	mov	r4, r2
 802e912:	461d      	mov	r5, r3
 802e914:	da08      	bge.n	802e928 <__swhatbuf_r+0x24>
 802e916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e91a:	2200      	movs	r2, #0
 802e91c:	602a      	str	r2, [r5, #0]
 802e91e:	061a      	lsls	r2, r3, #24
 802e920:	d410      	bmi.n	802e944 <__swhatbuf_r+0x40>
 802e922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e926:	e00e      	b.n	802e946 <__swhatbuf_r+0x42>
 802e928:	466a      	mov	r2, sp
 802e92a:	f000 fd0d 	bl	802f348 <_fstat_r>
 802e92e:	2800      	cmp	r0, #0
 802e930:	dbf1      	blt.n	802e916 <__swhatbuf_r+0x12>
 802e932:	9a01      	ldr	r2, [sp, #4]
 802e934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e93c:	425a      	negs	r2, r3
 802e93e:	415a      	adcs	r2, r3
 802e940:	602a      	str	r2, [r5, #0]
 802e942:	e7ee      	b.n	802e922 <__swhatbuf_r+0x1e>
 802e944:	2340      	movs	r3, #64	; 0x40
 802e946:	2000      	movs	r0, #0
 802e948:	6023      	str	r3, [r4, #0]
 802e94a:	b016      	add	sp, #88	; 0x58
 802e94c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e950 <__smakebuf_r>:
 802e950:	898b      	ldrh	r3, [r1, #12]
 802e952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e954:	079d      	lsls	r5, r3, #30
 802e956:	4606      	mov	r6, r0
 802e958:	460c      	mov	r4, r1
 802e95a:	d507      	bpl.n	802e96c <__smakebuf_r+0x1c>
 802e95c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e960:	6023      	str	r3, [r4, #0]
 802e962:	6123      	str	r3, [r4, #16]
 802e964:	2301      	movs	r3, #1
 802e966:	6163      	str	r3, [r4, #20]
 802e968:	b002      	add	sp, #8
 802e96a:	bd70      	pop	{r4, r5, r6, pc}
 802e96c:	ab01      	add	r3, sp, #4
 802e96e:	466a      	mov	r2, sp
 802e970:	f7ff ffc8 	bl	802e904 <__swhatbuf_r>
 802e974:	9900      	ldr	r1, [sp, #0]
 802e976:	4605      	mov	r5, r0
 802e978:	4630      	mov	r0, r6
 802e97a:	f7ff fc17 	bl	802e1ac <_malloc_r>
 802e97e:	b948      	cbnz	r0, 802e994 <__smakebuf_r+0x44>
 802e980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e984:	059a      	lsls	r2, r3, #22
 802e986:	d4ef      	bmi.n	802e968 <__smakebuf_r+0x18>
 802e988:	f023 0303 	bic.w	r3, r3, #3
 802e98c:	f043 0302 	orr.w	r3, r3, #2
 802e990:	81a3      	strh	r3, [r4, #12]
 802e992:	e7e3      	b.n	802e95c <__smakebuf_r+0xc>
 802e994:	4b0d      	ldr	r3, [pc, #52]	; (802e9cc <__smakebuf_r+0x7c>)
 802e996:	62b3      	str	r3, [r6, #40]	; 0x28
 802e998:	89a3      	ldrh	r3, [r4, #12]
 802e99a:	6020      	str	r0, [r4, #0]
 802e99c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e9a0:	81a3      	strh	r3, [r4, #12]
 802e9a2:	9b00      	ldr	r3, [sp, #0]
 802e9a4:	6163      	str	r3, [r4, #20]
 802e9a6:	9b01      	ldr	r3, [sp, #4]
 802e9a8:	6120      	str	r0, [r4, #16]
 802e9aa:	b15b      	cbz	r3, 802e9c4 <__smakebuf_r+0x74>
 802e9ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e9b0:	4630      	mov	r0, r6
 802e9b2:	f000 fcdb 	bl	802f36c <_isatty_r>
 802e9b6:	b128      	cbz	r0, 802e9c4 <__smakebuf_r+0x74>
 802e9b8:	89a3      	ldrh	r3, [r4, #12]
 802e9ba:	f023 0303 	bic.w	r3, r3, #3
 802e9be:	f043 0301 	orr.w	r3, r3, #1
 802e9c2:	81a3      	strh	r3, [r4, #12]
 802e9c4:	89a0      	ldrh	r0, [r4, #12]
 802e9c6:	4305      	orrs	r5, r0
 802e9c8:	81a5      	strh	r5, [r4, #12]
 802e9ca:	e7cd      	b.n	802e968 <__smakebuf_r+0x18>
 802e9cc:	0802e75d 	.word	0x0802e75d

0802e9d0 <__malloc_lock>:
 802e9d0:	4801      	ldr	r0, [pc, #4]	; (802e9d8 <__malloc_lock+0x8>)
 802e9d2:	f7ff bf95 	b.w	802e900 <__retarget_lock_acquire_recursive>
 802e9d6:	bf00      	nop
 802e9d8:	20001204 	.word	0x20001204

0802e9dc <__malloc_unlock>:
 802e9dc:	4801      	ldr	r0, [pc, #4]	; (802e9e4 <__malloc_unlock+0x8>)
 802e9de:	f7ff bf90 	b.w	802e902 <__retarget_lock_release_recursive>
 802e9e2:	bf00      	nop
 802e9e4:	20001204 	.word	0x20001204

0802e9e8 <__ssputs_r>:
 802e9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e9ec:	688e      	ldr	r6, [r1, #8]
 802e9ee:	429e      	cmp	r6, r3
 802e9f0:	4682      	mov	sl, r0
 802e9f2:	460c      	mov	r4, r1
 802e9f4:	4690      	mov	r8, r2
 802e9f6:	461f      	mov	r7, r3
 802e9f8:	d838      	bhi.n	802ea6c <__ssputs_r+0x84>
 802e9fa:	898a      	ldrh	r2, [r1, #12]
 802e9fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ea00:	d032      	beq.n	802ea68 <__ssputs_r+0x80>
 802ea02:	6825      	ldr	r5, [r4, #0]
 802ea04:	6909      	ldr	r1, [r1, #16]
 802ea06:	eba5 0901 	sub.w	r9, r5, r1
 802ea0a:	6965      	ldr	r5, [r4, #20]
 802ea0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ea10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ea14:	3301      	adds	r3, #1
 802ea16:	444b      	add	r3, r9
 802ea18:	106d      	asrs	r5, r5, #1
 802ea1a:	429d      	cmp	r5, r3
 802ea1c:	bf38      	it	cc
 802ea1e:	461d      	movcc	r5, r3
 802ea20:	0553      	lsls	r3, r2, #21
 802ea22:	d531      	bpl.n	802ea88 <__ssputs_r+0xa0>
 802ea24:	4629      	mov	r1, r5
 802ea26:	f7ff fbc1 	bl	802e1ac <_malloc_r>
 802ea2a:	4606      	mov	r6, r0
 802ea2c:	b950      	cbnz	r0, 802ea44 <__ssputs_r+0x5c>
 802ea2e:	230c      	movs	r3, #12
 802ea30:	f8ca 3000 	str.w	r3, [sl]
 802ea34:	89a3      	ldrh	r3, [r4, #12]
 802ea36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ea3a:	81a3      	strh	r3, [r4, #12]
 802ea3c:	f04f 30ff 	mov.w	r0, #4294967295
 802ea40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ea44:	6921      	ldr	r1, [r4, #16]
 802ea46:	464a      	mov	r2, r9
 802ea48:	f000 fcb2 	bl	802f3b0 <memcpy>
 802ea4c:	89a3      	ldrh	r3, [r4, #12]
 802ea4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ea52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ea56:	81a3      	strh	r3, [r4, #12]
 802ea58:	6126      	str	r6, [r4, #16]
 802ea5a:	6165      	str	r5, [r4, #20]
 802ea5c:	444e      	add	r6, r9
 802ea5e:	eba5 0509 	sub.w	r5, r5, r9
 802ea62:	6026      	str	r6, [r4, #0]
 802ea64:	60a5      	str	r5, [r4, #8]
 802ea66:	463e      	mov	r6, r7
 802ea68:	42be      	cmp	r6, r7
 802ea6a:	d900      	bls.n	802ea6e <__ssputs_r+0x86>
 802ea6c:	463e      	mov	r6, r7
 802ea6e:	6820      	ldr	r0, [r4, #0]
 802ea70:	4632      	mov	r2, r6
 802ea72:	4641      	mov	r1, r8
 802ea74:	f000 fcaa 	bl	802f3cc <memmove>
 802ea78:	68a3      	ldr	r3, [r4, #8]
 802ea7a:	1b9b      	subs	r3, r3, r6
 802ea7c:	60a3      	str	r3, [r4, #8]
 802ea7e:	6823      	ldr	r3, [r4, #0]
 802ea80:	4433      	add	r3, r6
 802ea82:	6023      	str	r3, [r4, #0]
 802ea84:	2000      	movs	r0, #0
 802ea86:	e7db      	b.n	802ea40 <__ssputs_r+0x58>
 802ea88:	462a      	mov	r2, r5
 802ea8a:	f000 fcb9 	bl	802f400 <_realloc_r>
 802ea8e:	4606      	mov	r6, r0
 802ea90:	2800      	cmp	r0, #0
 802ea92:	d1e1      	bne.n	802ea58 <__ssputs_r+0x70>
 802ea94:	6921      	ldr	r1, [r4, #16]
 802ea96:	4650      	mov	r0, sl
 802ea98:	f7ff fb1c 	bl	802e0d4 <_free_r>
 802ea9c:	e7c7      	b.n	802ea2e <__ssputs_r+0x46>
	...

0802eaa0 <_svfiprintf_r>:
 802eaa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eaa4:	4698      	mov	r8, r3
 802eaa6:	898b      	ldrh	r3, [r1, #12]
 802eaa8:	061b      	lsls	r3, r3, #24
 802eaaa:	b09d      	sub	sp, #116	; 0x74
 802eaac:	4607      	mov	r7, r0
 802eaae:	460d      	mov	r5, r1
 802eab0:	4614      	mov	r4, r2
 802eab2:	d50e      	bpl.n	802ead2 <_svfiprintf_r+0x32>
 802eab4:	690b      	ldr	r3, [r1, #16]
 802eab6:	b963      	cbnz	r3, 802ead2 <_svfiprintf_r+0x32>
 802eab8:	2140      	movs	r1, #64	; 0x40
 802eaba:	f7ff fb77 	bl	802e1ac <_malloc_r>
 802eabe:	6028      	str	r0, [r5, #0]
 802eac0:	6128      	str	r0, [r5, #16]
 802eac2:	b920      	cbnz	r0, 802eace <_svfiprintf_r+0x2e>
 802eac4:	230c      	movs	r3, #12
 802eac6:	603b      	str	r3, [r7, #0]
 802eac8:	f04f 30ff 	mov.w	r0, #4294967295
 802eacc:	e0d1      	b.n	802ec72 <_svfiprintf_r+0x1d2>
 802eace:	2340      	movs	r3, #64	; 0x40
 802ead0:	616b      	str	r3, [r5, #20]
 802ead2:	2300      	movs	r3, #0
 802ead4:	9309      	str	r3, [sp, #36]	; 0x24
 802ead6:	2320      	movs	r3, #32
 802ead8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802eadc:	f8cd 800c 	str.w	r8, [sp, #12]
 802eae0:	2330      	movs	r3, #48	; 0x30
 802eae2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ec8c <_svfiprintf_r+0x1ec>
 802eae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802eaea:	f04f 0901 	mov.w	r9, #1
 802eaee:	4623      	mov	r3, r4
 802eaf0:	469a      	mov	sl, r3
 802eaf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 802eaf6:	b10a      	cbz	r2, 802eafc <_svfiprintf_r+0x5c>
 802eaf8:	2a25      	cmp	r2, #37	; 0x25
 802eafa:	d1f9      	bne.n	802eaf0 <_svfiprintf_r+0x50>
 802eafc:	ebba 0b04 	subs.w	fp, sl, r4
 802eb00:	d00b      	beq.n	802eb1a <_svfiprintf_r+0x7a>
 802eb02:	465b      	mov	r3, fp
 802eb04:	4622      	mov	r2, r4
 802eb06:	4629      	mov	r1, r5
 802eb08:	4638      	mov	r0, r7
 802eb0a:	f7ff ff6d 	bl	802e9e8 <__ssputs_r>
 802eb0e:	3001      	adds	r0, #1
 802eb10:	f000 80aa 	beq.w	802ec68 <_svfiprintf_r+0x1c8>
 802eb14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802eb16:	445a      	add	r2, fp
 802eb18:	9209      	str	r2, [sp, #36]	; 0x24
 802eb1a:	f89a 3000 	ldrb.w	r3, [sl]
 802eb1e:	2b00      	cmp	r3, #0
 802eb20:	f000 80a2 	beq.w	802ec68 <_svfiprintf_r+0x1c8>
 802eb24:	2300      	movs	r3, #0
 802eb26:	f04f 32ff 	mov.w	r2, #4294967295
 802eb2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802eb2e:	f10a 0a01 	add.w	sl, sl, #1
 802eb32:	9304      	str	r3, [sp, #16]
 802eb34:	9307      	str	r3, [sp, #28]
 802eb36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802eb3a:	931a      	str	r3, [sp, #104]	; 0x68
 802eb3c:	4654      	mov	r4, sl
 802eb3e:	2205      	movs	r2, #5
 802eb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 802eb44:	4851      	ldr	r0, [pc, #324]	; (802ec8c <_svfiprintf_r+0x1ec>)
 802eb46:	f7f1 fb53 	bl	80201f0 <memchr>
 802eb4a:	9a04      	ldr	r2, [sp, #16]
 802eb4c:	b9d8      	cbnz	r0, 802eb86 <_svfiprintf_r+0xe6>
 802eb4e:	06d0      	lsls	r0, r2, #27
 802eb50:	bf44      	itt	mi
 802eb52:	2320      	movmi	r3, #32
 802eb54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb58:	0711      	lsls	r1, r2, #28
 802eb5a:	bf44      	itt	mi
 802eb5c:	232b      	movmi	r3, #43	; 0x2b
 802eb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802eb62:	f89a 3000 	ldrb.w	r3, [sl]
 802eb66:	2b2a      	cmp	r3, #42	; 0x2a
 802eb68:	d015      	beq.n	802eb96 <_svfiprintf_r+0xf6>
 802eb6a:	9a07      	ldr	r2, [sp, #28]
 802eb6c:	4654      	mov	r4, sl
 802eb6e:	2000      	movs	r0, #0
 802eb70:	f04f 0c0a 	mov.w	ip, #10
 802eb74:	4621      	mov	r1, r4
 802eb76:	f811 3b01 	ldrb.w	r3, [r1], #1
 802eb7a:	3b30      	subs	r3, #48	; 0x30
 802eb7c:	2b09      	cmp	r3, #9
 802eb7e:	d94e      	bls.n	802ec1e <_svfiprintf_r+0x17e>
 802eb80:	b1b0      	cbz	r0, 802ebb0 <_svfiprintf_r+0x110>
 802eb82:	9207      	str	r2, [sp, #28]
 802eb84:	e014      	b.n	802ebb0 <_svfiprintf_r+0x110>
 802eb86:	eba0 0308 	sub.w	r3, r0, r8
 802eb8a:	fa09 f303 	lsl.w	r3, r9, r3
 802eb8e:	4313      	orrs	r3, r2
 802eb90:	9304      	str	r3, [sp, #16]
 802eb92:	46a2      	mov	sl, r4
 802eb94:	e7d2      	b.n	802eb3c <_svfiprintf_r+0x9c>
 802eb96:	9b03      	ldr	r3, [sp, #12]
 802eb98:	1d19      	adds	r1, r3, #4
 802eb9a:	681b      	ldr	r3, [r3, #0]
 802eb9c:	9103      	str	r1, [sp, #12]
 802eb9e:	2b00      	cmp	r3, #0
 802eba0:	bfbb      	ittet	lt
 802eba2:	425b      	neglt	r3, r3
 802eba4:	f042 0202 	orrlt.w	r2, r2, #2
 802eba8:	9307      	strge	r3, [sp, #28]
 802ebaa:	9307      	strlt	r3, [sp, #28]
 802ebac:	bfb8      	it	lt
 802ebae:	9204      	strlt	r2, [sp, #16]
 802ebb0:	7823      	ldrb	r3, [r4, #0]
 802ebb2:	2b2e      	cmp	r3, #46	; 0x2e
 802ebb4:	d10c      	bne.n	802ebd0 <_svfiprintf_r+0x130>
 802ebb6:	7863      	ldrb	r3, [r4, #1]
 802ebb8:	2b2a      	cmp	r3, #42	; 0x2a
 802ebba:	d135      	bne.n	802ec28 <_svfiprintf_r+0x188>
 802ebbc:	9b03      	ldr	r3, [sp, #12]
 802ebbe:	1d1a      	adds	r2, r3, #4
 802ebc0:	681b      	ldr	r3, [r3, #0]
 802ebc2:	9203      	str	r2, [sp, #12]
 802ebc4:	2b00      	cmp	r3, #0
 802ebc6:	bfb8      	it	lt
 802ebc8:	f04f 33ff 	movlt.w	r3, #4294967295
 802ebcc:	3402      	adds	r4, #2
 802ebce:	9305      	str	r3, [sp, #20]
 802ebd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ec9c <_svfiprintf_r+0x1fc>
 802ebd4:	7821      	ldrb	r1, [r4, #0]
 802ebd6:	2203      	movs	r2, #3
 802ebd8:	4650      	mov	r0, sl
 802ebda:	f7f1 fb09 	bl	80201f0 <memchr>
 802ebde:	b140      	cbz	r0, 802ebf2 <_svfiprintf_r+0x152>
 802ebe0:	2340      	movs	r3, #64	; 0x40
 802ebe2:	eba0 000a 	sub.w	r0, r0, sl
 802ebe6:	fa03 f000 	lsl.w	r0, r3, r0
 802ebea:	9b04      	ldr	r3, [sp, #16]
 802ebec:	4303      	orrs	r3, r0
 802ebee:	3401      	adds	r4, #1
 802ebf0:	9304      	str	r3, [sp, #16]
 802ebf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ebf6:	4826      	ldr	r0, [pc, #152]	; (802ec90 <_svfiprintf_r+0x1f0>)
 802ebf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ebfc:	2206      	movs	r2, #6
 802ebfe:	f7f1 faf7 	bl	80201f0 <memchr>
 802ec02:	2800      	cmp	r0, #0
 802ec04:	d038      	beq.n	802ec78 <_svfiprintf_r+0x1d8>
 802ec06:	4b23      	ldr	r3, [pc, #140]	; (802ec94 <_svfiprintf_r+0x1f4>)
 802ec08:	bb1b      	cbnz	r3, 802ec52 <_svfiprintf_r+0x1b2>
 802ec0a:	9b03      	ldr	r3, [sp, #12]
 802ec0c:	3307      	adds	r3, #7
 802ec0e:	f023 0307 	bic.w	r3, r3, #7
 802ec12:	3308      	adds	r3, #8
 802ec14:	9303      	str	r3, [sp, #12]
 802ec16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ec18:	4433      	add	r3, r6
 802ec1a:	9309      	str	r3, [sp, #36]	; 0x24
 802ec1c:	e767      	b.n	802eaee <_svfiprintf_r+0x4e>
 802ec1e:	fb0c 3202 	mla	r2, ip, r2, r3
 802ec22:	460c      	mov	r4, r1
 802ec24:	2001      	movs	r0, #1
 802ec26:	e7a5      	b.n	802eb74 <_svfiprintf_r+0xd4>
 802ec28:	2300      	movs	r3, #0
 802ec2a:	3401      	adds	r4, #1
 802ec2c:	9305      	str	r3, [sp, #20]
 802ec2e:	4619      	mov	r1, r3
 802ec30:	f04f 0c0a 	mov.w	ip, #10
 802ec34:	4620      	mov	r0, r4
 802ec36:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ec3a:	3a30      	subs	r2, #48	; 0x30
 802ec3c:	2a09      	cmp	r2, #9
 802ec3e:	d903      	bls.n	802ec48 <_svfiprintf_r+0x1a8>
 802ec40:	2b00      	cmp	r3, #0
 802ec42:	d0c5      	beq.n	802ebd0 <_svfiprintf_r+0x130>
 802ec44:	9105      	str	r1, [sp, #20]
 802ec46:	e7c3      	b.n	802ebd0 <_svfiprintf_r+0x130>
 802ec48:	fb0c 2101 	mla	r1, ip, r1, r2
 802ec4c:	4604      	mov	r4, r0
 802ec4e:	2301      	movs	r3, #1
 802ec50:	e7f0      	b.n	802ec34 <_svfiprintf_r+0x194>
 802ec52:	ab03      	add	r3, sp, #12
 802ec54:	9300      	str	r3, [sp, #0]
 802ec56:	462a      	mov	r2, r5
 802ec58:	4b0f      	ldr	r3, [pc, #60]	; (802ec98 <_svfiprintf_r+0x1f8>)
 802ec5a:	a904      	add	r1, sp, #16
 802ec5c:	4638      	mov	r0, r7
 802ec5e:	f3af 8000 	nop.w
 802ec62:	1c42      	adds	r2, r0, #1
 802ec64:	4606      	mov	r6, r0
 802ec66:	d1d6      	bne.n	802ec16 <_svfiprintf_r+0x176>
 802ec68:	89ab      	ldrh	r3, [r5, #12]
 802ec6a:	065b      	lsls	r3, r3, #25
 802ec6c:	f53f af2c 	bmi.w	802eac8 <_svfiprintf_r+0x28>
 802ec70:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ec72:	b01d      	add	sp, #116	; 0x74
 802ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ec78:	ab03      	add	r3, sp, #12
 802ec7a:	9300      	str	r3, [sp, #0]
 802ec7c:	462a      	mov	r2, r5
 802ec7e:	4b06      	ldr	r3, [pc, #24]	; (802ec98 <_svfiprintf_r+0x1f8>)
 802ec80:	a904      	add	r1, sp, #16
 802ec82:	4638      	mov	r0, r7
 802ec84:	f000 f9d4 	bl	802f030 <_printf_i>
 802ec88:	e7eb      	b.n	802ec62 <_svfiprintf_r+0x1c2>
 802ec8a:	bf00      	nop
 802ec8c:	08031a9c 	.word	0x08031a9c
 802ec90:	08031aa6 	.word	0x08031aa6
 802ec94:	00000000 	.word	0x00000000
 802ec98:	0802e9e9 	.word	0x0802e9e9
 802ec9c:	08031aa2 	.word	0x08031aa2

0802eca0 <__sfputc_r>:
 802eca0:	6893      	ldr	r3, [r2, #8]
 802eca2:	3b01      	subs	r3, #1
 802eca4:	2b00      	cmp	r3, #0
 802eca6:	b410      	push	{r4}
 802eca8:	6093      	str	r3, [r2, #8]
 802ecaa:	da08      	bge.n	802ecbe <__sfputc_r+0x1e>
 802ecac:	6994      	ldr	r4, [r2, #24]
 802ecae:	42a3      	cmp	r3, r4
 802ecb0:	db01      	blt.n	802ecb6 <__sfputc_r+0x16>
 802ecb2:	290a      	cmp	r1, #10
 802ecb4:	d103      	bne.n	802ecbe <__sfputc_r+0x1e>
 802ecb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ecba:	f7ff bba9 	b.w	802e410 <__swbuf_r>
 802ecbe:	6813      	ldr	r3, [r2, #0]
 802ecc0:	1c58      	adds	r0, r3, #1
 802ecc2:	6010      	str	r0, [r2, #0]
 802ecc4:	7019      	strb	r1, [r3, #0]
 802ecc6:	4608      	mov	r0, r1
 802ecc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802eccc:	4770      	bx	lr

0802ecce <__sfputs_r>:
 802ecce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ecd0:	4606      	mov	r6, r0
 802ecd2:	460f      	mov	r7, r1
 802ecd4:	4614      	mov	r4, r2
 802ecd6:	18d5      	adds	r5, r2, r3
 802ecd8:	42ac      	cmp	r4, r5
 802ecda:	d101      	bne.n	802ece0 <__sfputs_r+0x12>
 802ecdc:	2000      	movs	r0, #0
 802ecde:	e007      	b.n	802ecf0 <__sfputs_r+0x22>
 802ece0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ece4:	463a      	mov	r2, r7
 802ece6:	4630      	mov	r0, r6
 802ece8:	f7ff ffda 	bl	802eca0 <__sfputc_r>
 802ecec:	1c43      	adds	r3, r0, #1
 802ecee:	d1f3      	bne.n	802ecd8 <__sfputs_r+0xa>
 802ecf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ecf4 <_vfiprintf_r>:
 802ecf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ecf8:	460d      	mov	r5, r1
 802ecfa:	b09d      	sub	sp, #116	; 0x74
 802ecfc:	4614      	mov	r4, r2
 802ecfe:	4698      	mov	r8, r3
 802ed00:	4606      	mov	r6, r0
 802ed02:	b118      	cbz	r0, 802ed0c <_vfiprintf_r+0x18>
 802ed04:	6983      	ldr	r3, [r0, #24]
 802ed06:	b90b      	cbnz	r3, 802ed0c <_vfiprintf_r+0x18>
 802ed08:	f7ff fd5c 	bl	802e7c4 <__sinit>
 802ed0c:	4b89      	ldr	r3, [pc, #548]	; (802ef34 <_vfiprintf_r+0x240>)
 802ed0e:	429d      	cmp	r5, r3
 802ed10:	d11b      	bne.n	802ed4a <_vfiprintf_r+0x56>
 802ed12:	6875      	ldr	r5, [r6, #4]
 802ed14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed16:	07d9      	lsls	r1, r3, #31
 802ed18:	d405      	bmi.n	802ed26 <_vfiprintf_r+0x32>
 802ed1a:	89ab      	ldrh	r3, [r5, #12]
 802ed1c:	059a      	lsls	r2, r3, #22
 802ed1e:	d402      	bmi.n	802ed26 <_vfiprintf_r+0x32>
 802ed20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed22:	f7ff fded 	bl	802e900 <__retarget_lock_acquire_recursive>
 802ed26:	89ab      	ldrh	r3, [r5, #12]
 802ed28:	071b      	lsls	r3, r3, #28
 802ed2a:	d501      	bpl.n	802ed30 <_vfiprintf_r+0x3c>
 802ed2c:	692b      	ldr	r3, [r5, #16]
 802ed2e:	b9eb      	cbnz	r3, 802ed6c <_vfiprintf_r+0x78>
 802ed30:	4629      	mov	r1, r5
 802ed32:	4630      	mov	r0, r6
 802ed34:	f7ff fbbe 	bl	802e4b4 <__swsetup_r>
 802ed38:	b1c0      	cbz	r0, 802ed6c <_vfiprintf_r+0x78>
 802ed3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ed3c:	07dc      	lsls	r4, r3, #31
 802ed3e:	d50e      	bpl.n	802ed5e <_vfiprintf_r+0x6a>
 802ed40:	f04f 30ff 	mov.w	r0, #4294967295
 802ed44:	b01d      	add	sp, #116	; 0x74
 802ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ed4a:	4b7b      	ldr	r3, [pc, #492]	; (802ef38 <_vfiprintf_r+0x244>)
 802ed4c:	429d      	cmp	r5, r3
 802ed4e:	d101      	bne.n	802ed54 <_vfiprintf_r+0x60>
 802ed50:	68b5      	ldr	r5, [r6, #8]
 802ed52:	e7df      	b.n	802ed14 <_vfiprintf_r+0x20>
 802ed54:	4b79      	ldr	r3, [pc, #484]	; (802ef3c <_vfiprintf_r+0x248>)
 802ed56:	429d      	cmp	r5, r3
 802ed58:	bf08      	it	eq
 802ed5a:	68f5      	ldreq	r5, [r6, #12]
 802ed5c:	e7da      	b.n	802ed14 <_vfiprintf_r+0x20>
 802ed5e:	89ab      	ldrh	r3, [r5, #12]
 802ed60:	0598      	lsls	r0, r3, #22
 802ed62:	d4ed      	bmi.n	802ed40 <_vfiprintf_r+0x4c>
 802ed64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ed66:	f7ff fdcc 	bl	802e902 <__retarget_lock_release_recursive>
 802ed6a:	e7e9      	b.n	802ed40 <_vfiprintf_r+0x4c>
 802ed6c:	2300      	movs	r3, #0
 802ed6e:	9309      	str	r3, [sp, #36]	; 0x24
 802ed70:	2320      	movs	r3, #32
 802ed72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ed76:	f8cd 800c 	str.w	r8, [sp, #12]
 802ed7a:	2330      	movs	r3, #48	; 0x30
 802ed7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802ef40 <_vfiprintf_r+0x24c>
 802ed80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ed84:	f04f 0901 	mov.w	r9, #1
 802ed88:	4623      	mov	r3, r4
 802ed8a:	469a      	mov	sl, r3
 802ed8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ed90:	b10a      	cbz	r2, 802ed96 <_vfiprintf_r+0xa2>
 802ed92:	2a25      	cmp	r2, #37	; 0x25
 802ed94:	d1f9      	bne.n	802ed8a <_vfiprintf_r+0x96>
 802ed96:	ebba 0b04 	subs.w	fp, sl, r4
 802ed9a:	d00b      	beq.n	802edb4 <_vfiprintf_r+0xc0>
 802ed9c:	465b      	mov	r3, fp
 802ed9e:	4622      	mov	r2, r4
 802eda0:	4629      	mov	r1, r5
 802eda2:	4630      	mov	r0, r6
 802eda4:	f7ff ff93 	bl	802ecce <__sfputs_r>
 802eda8:	3001      	adds	r0, #1
 802edaa:	f000 80aa 	beq.w	802ef02 <_vfiprintf_r+0x20e>
 802edae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802edb0:	445a      	add	r2, fp
 802edb2:	9209      	str	r2, [sp, #36]	; 0x24
 802edb4:	f89a 3000 	ldrb.w	r3, [sl]
 802edb8:	2b00      	cmp	r3, #0
 802edba:	f000 80a2 	beq.w	802ef02 <_vfiprintf_r+0x20e>
 802edbe:	2300      	movs	r3, #0
 802edc0:	f04f 32ff 	mov.w	r2, #4294967295
 802edc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802edc8:	f10a 0a01 	add.w	sl, sl, #1
 802edcc:	9304      	str	r3, [sp, #16]
 802edce:	9307      	str	r3, [sp, #28]
 802edd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802edd4:	931a      	str	r3, [sp, #104]	; 0x68
 802edd6:	4654      	mov	r4, sl
 802edd8:	2205      	movs	r2, #5
 802edda:	f814 1b01 	ldrb.w	r1, [r4], #1
 802edde:	4858      	ldr	r0, [pc, #352]	; (802ef40 <_vfiprintf_r+0x24c>)
 802ede0:	f7f1 fa06 	bl	80201f0 <memchr>
 802ede4:	9a04      	ldr	r2, [sp, #16]
 802ede6:	b9d8      	cbnz	r0, 802ee20 <_vfiprintf_r+0x12c>
 802ede8:	06d1      	lsls	r1, r2, #27
 802edea:	bf44      	itt	mi
 802edec:	2320      	movmi	r3, #32
 802edee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802edf2:	0713      	lsls	r3, r2, #28
 802edf4:	bf44      	itt	mi
 802edf6:	232b      	movmi	r3, #43	; 0x2b
 802edf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802edfc:	f89a 3000 	ldrb.w	r3, [sl]
 802ee00:	2b2a      	cmp	r3, #42	; 0x2a
 802ee02:	d015      	beq.n	802ee30 <_vfiprintf_r+0x13c>
 802ee04:	9a07      	ldr	r2, [sp, #28]
 802ee06:	4654      	mov	r4, sl
 802ee08:	2000      	movs	r0, #0
 802ee0a:	f04f 0c0a 	mov.w	ip, #10
 802ee0e:	4621      	mov	r1, r4
 802ee10:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ee14:	3b30      	subs	r3, #48	; 0x30
 802ee16:	2b09      	cmp	r3, #9
 802ee18:	d94e      	bls.n	802eeb8 <_vfiprintf_r+0x1c4>
 802ee1a:	b1b0      	cbz	r0, 802ee4a <_vfiprintf_r+0x156>
 802ee1c:	9207      	str	r2, [sp, #28]
 802ee1e:	e014      	b.n	802ee4a <_vfiprintf_r+0x156>
 802ee20:	eba0 0308 	sub.w	r3, r0, r8
 802ee24:	fa09 f303 	lsl.w	r3, r9, r3
 802ee28:	4313      	orrs	r3, r2
 802ee2a:	9304      	str	r3, [sp, #16]
 802ee2c:	46a2      	mov	sl, r4
 802ee2e:	e7d2      	b.n	802edd6 <_vfiprintf_r+0xe2>
 802ee30:	9b03      	ldr	r3, [sp, #12]
 802ee32:	1d19      	adds	r1, r3, #4
 802ee34:	681b      	ldr	r3, [r3, #0]
 802ee36:	9103      	str	r1, [sp, #12]
 802ee38:	2b00      	cmp	r3, #0
 802ee3a:	bfbb      	ittet	lt
 802ee3c:	425b      	neglt	r3, r3
 802ee3e:	f042 0202 	orrlt.w	r2, r2, #2
 802ee42:	9307      	strge	r3, [sp, #28]
 802ee44:	9307      	strlt	r3, [sp, #28]
 802ee46:	bfb8      	it	lt
 802ee48:	9204      	strlt	r2, [sp, #16]
 802ee4a:	7823      	ldrb	r3, [r4, #0]
 802ee4c:	2b2e      	cmp	r3, #46	; 0x2e
 802ee4e:	d10c      	bne.n	802ee6a <_vfiprintf_r+0x176>
 802ee50:	7863      	ldrb	r3, [r4, #1]
 802ee52:	2b2a      	cmp	r3, #42	; 0x2a
 802ee54:	d135      	bne.n	802eec2 <_vfiprintf_r+0x1ce>
 802ee56:	9b03      	ldr	r3, [sp, #12]
 802ee58:	1d1a      	adds	r2, r3, #4
 802ee5a:	681b      	ldr	r3, [r3, #0]
 802ee5c:	9203      	str	r2, [sp, #12]
 802ee5e:	2b00      	cmp	r3, #0
 802ee60:	bfb8      	it	lt
 802ee62:	f04f 33ff 	movlt.w	r3, #4294967295
 802ee66:	3402      	adds	r4, #2
 802ee68:	9305      	str	r3, [sp, #20]
 802ee6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802ef50 <_vfiprintf_r+0x25c>
 802ee6e:	7821      	ldrb	r1, [r4, #0]
 802ee70:	2203      	movs	r2, #3
 802ee72:	4650      	mov	r0, sl
 802ee74:	f7f1 f9bc 	bl	80201f0 <memchr>
 802ee78:	b140      	cbz	r0, 802ee8c <_vfiprintf_r+0x198>
 802ee7a:	2340      	movs	r3, #64	; 0x40
 802ee7c:	eba0 000a 	sub.w	r0, r0, sl
 802ee80:	fa03 f000 	lsl.w	r0, r3, r0
 802ee84:	9b04      	ldr	r3, [sp, #16]
 802ee86:	4303      	orrs	r3, r0
 802ee88:	3401      	adds	r4, #1
 802ee8a:	9304      	str	r3, [sp, #16]
 802ee8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ee90:	482c      	ldr	r0, [pc, #176]	; (802ef44 <_vfiprintf_r+0x250>)
 802ee92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802ee96:	2206      	movs	r2, #6
 802ee98:	f7f1 f9aa 	bl	80201f0 <memchr>
 802ee9c:	2800      	cmp	r0, #0
 802ee9e:	d03f      	beq.n	802ef20 <_vfiprintf_r+0x22c>
 802eea0:	4b29      	ldr	r3, [pc, #164]	; (802ef48 <_vfiprintf_r+0x254>)
 802eea2:	bb1b      	cbnz	r3, 802eeec <_vfiprintf_r+0x1f8>
 802eea4:	9b03      	ldr	r3, [sp, #12]
 802eea6:	3307      	adds	r3, #7
 802eea8:	f023 0307 	bic.w	r3, r3, #7
 802eeac:	3308      	adds	r3, #8
 802eeae:	9303      	str	r3, [sp, #12]
 802eeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eeb2:	443b      	add	r3, r7
 802eeb4:	9309      	str	r3, [sp, #36]	; 0x24
 802eeb6:	e767      	b.n	802ed88 <_vfiprintf_r+0x94>
 802eeb8:	fb0c 3202 	mla	r2, ip, r2, r3
 802eebc:	460c      	mov	r4, r1
 802eebe:	2001      	movs	r0, #1
 802eec0:	e7a5      	b.n	802ee0e <_vfiprintf_r+0x11a>
 802eec2:	2300      	movs	r3, #0
 802eec4:	3401      	adds	r4, #1
 802eec6:	9305      	str	r3, [sp, #20]
 802eec8:	4619      	mov	r1, r3
 802eeca:	f04f 0c0a 	mov.w	ip, #10
 802eece:	4620      	mov	r0, r4
 802eed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802eed4:	3a30      	subs	r2, #48	; 0x30
 802eed6:	2a09      	cmp	r2, #9
 802eed8:	d903      	bls.n	802eee2 <_vfiprintf_r+0x1ee>
 802eeda:	2b00      	cmp	r3, #0
 802eedc:	d0c5      	beq.n	802ee6a <_vfiprintf_r+0x176>
 802eede:	9105      	str	r1, [sp, #20]
 802eee0:	e7c3      	b.n	802ee6a <_vfiprintf_r+0x176>
 802eee2:	fb0c 2101 	mla	r1, ip, r1, r2
 802eee6:	4604      	mov	r4, r0
 802eee8:	2301      	movs	r3, #1
 802eeea:	e7f0      	b.n	802eece <_vfiprintf_r+0x1da>
 802eeec:	ab03      	add	r3, sp, #12
 802eeee:	9300      	str	r3, [sp, #0]
 802eef0:	462a      	mov	r2, r5
 802eef2:	4b16      	ldr	r3, [pc, #88]	; (802ef4c <_vfiprintf_r+0x258>)
 802eef4:	a904      	add	r1, sp, #16
 802eef6:	4630      	mov	r0, r6
 802eef8:	f3af 8000 	nop.w
 802eefc:	4607      	mov	r7, r0
 802eefe:	1c78      	adds	r0, r7, #1
 802ef00:	d1d6      	bne.n	802eeb0 <_vfiprintf_r+0x1bc>
 802ef02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ef04:	07d9      	lsls	r1, r3, #31
 802ef06:	d405      	bmi.n	802ef14 <_vfiprintf_r+0x220>
 802ef08:	89ab      	ldrh	r3, [r5, #12]
 802ef0a:	059a      	lsls	r2, r3, #22
 802ef0c:	d402      	bmi.n	802ef14 <_vfiprintf_r+0x220>
 802ef0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ef10:	f7ff fcf7 	bl	802e902 <__retarget_lock_release_recursive>
 802ef14:	89ab      	ldrh	r3, [r5, #12]
 802ef16:	065b      	lsls	r3, r3, #25
 802ef18:	f53f af12 	bmi.w	802ed40 <_vfiprintf_r+0x4c>
 802ef1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ef1e:	e711      	b.n	802ed44 <_vfiprintf_r+0x50>
 802ef20:	ab03      	add	r3, sp, #12
 802ef22:	9300      	str	r3, [sp, #0]
 802ef24:	462a      	mov	r2, r5
 802ef26:	4b09      	ldr	r3, [pc, #36]	; (802ef4c <_vfiprintf_r+0x258>)
 802ef28:	a904      	add	r1, sp, #16
 802ef2a:	4630      	mov	r0, r6
 802ef2c:	f000 f880 	bl	802f030 <_printf_i>
 802ef30:	e7e4      	b.n	802eefc <_vfiprintf_r+0x208>
 802ef32:	bf00      	nop
 802ef34:	08031a5c 	.word	0x08031a5c
 802ef38:	08031a7c 	.word	0x08031a7c
 802ef3c:	08031a3c 	.word	0x08031a3c
 802ef40:	08031a9c 	.word	0x08031a9c
 802ef44:	08031aa6 	.word	0x08031aa6
 802ef48:	00000000 	.word	0x00000000
 802ef4c:	0802eccf 	.word	0x0802eccf
 802ef50:	08031aa2 	.word	0x08031aa2

0802ef54 <_printf_common>:
 802ef54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ef58:	4616      	mov	r6, r2
 802ef5a:	4699      	mov	r9, r3
 802ef5c:	688a      	ldr	r2, [r1, #8]
 802ef5e:	690b      	ldr	r3, [r1, #16]
 802ef60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ef64:	4293      	cmp	r3, r2
 802ef66:	bfb8      	it	lt
 802ef68:	4613      	movlt	r3, r2
 802ef6a:	6033      	str	r3, [r6, #0]
 802ef6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ef70:	4607      	mov	r7, r0
 802ef72:	460c      	mov	r4, r1
 802ef74:	b10a      	cbz	r2, 802ef7a <_printf_common+0x26>
 802ef76:	3301      	adds	r3, #1
 802ef78:	6033      	str	r3, [r6, #0]
 802ef7a:	6823      	ldr	r3, [r4, #0]
 802ef7c:	0699      	lsls	r1, r3, #26
 802ef7e:	bf42      	ittt	mi
 802ef80:	6833      	ldrmi	r3, [r6, #0]
 802ef82:	3302      	addmi	r3, #2
 802ef84:	6033      	strmi	r3, [r6, #0]
 802ef86:	6825      	ldr	r5, [r4, #0]
 802ef88:	f015 0506 	ands.w	r5, r5, #6
 802ef8c:	d106      	bne.n	802ef9c <_printf_common+0x48>
 802ef8e:	f104 0a19 	add.w	sl, r4, #25
 802ef92:	68e3      	ldr	r3, [r4, #12]
 802ef94:	6832      	ldr	r2, [r6, #0]
 802ef96:	1a9b      	subs	r3, r3, r2
 802ef98:	42ab      	cmp	r3, r5
 802ef9a:	dc26      	bgt.n	802efea <_printf_common+0x96>
 802ef9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802efa0:	1e13      	subs	r3, r2, #0
 802efa2:	6822      	ldr	r2, [r4, #0]
 802efa4:	bf18      	it	ne
 802efa6:	2301      	movne	r3, #1
 802efa8:	0692      	lsls	r2, r2, #26
 802efaa:	d42b      	bmi.n	802f004 <_printf_common+0xb0>
 802efac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802efb0:	4649      	mov	r1, r9
 802efb2:	4638      	mov	r0, r7
 802efb4:	47c0      	blx	r8
 802efb6:	3001      	adds	r0, #1
 802efb8:	d01e      	beq.n	802eff8 <_printf_common+0xa4>
 802efba:	6823      	ldr	r3, [r4, #0]
 802efbc:	68e5      	ldr	r5, [r4, #12]
 802efbe:	6832      	ldr	r2, [r6, #0]
 802efc0:	f003 0306 	and.w	r3, r3, #6
 802efc4:	2b04      	cmp	r3, #4
 802efc6:	bf08      	it	eq
 802efc8:	1aad      	subeq	r5, r5, r2
 802efca:	68a3      	ldr	r3, [r4, #8]
 802efcc:	6922      	ldr	r2, [r4, #16]
 802efce:	bf0c      	ite	eq
 802efd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802efd4:	2500      	movne	r5, #0
 802efd6:	4293      	cmp	r3, r2
 802efd8:	bfc4      	itt	gt
 802efda:	1a9b      	subgt	r3, r3, r2
 802efdc:	18ed      	addgt	r5, r5, r3
 802efde:	2600      	movs	r6, #0
 802efe0:	341a      	adds	r4, #26
 802efe2:	42b5      	cmp	r5, r6
 802efe4:	d11a      	bne.n	802f01c <_printf_common+0xc8>
 802efe6:	2000      	movs	r0, #0
 802efe8:	e008      	b.n	802effc <_printf_common+0xa8>
 802efea:	2301      	movs	r3, #1
 802efec:	4652      	mov	r2, sl
 802efee:	4649      	mov	r1, r9
 802eff0:	4638      	mov	r0, r7
 802eff2:	47c0      	blx	r8
 802eff4:	3001      	adds	r0, #1
 802eff6:	d103      	bne.n	802f000 <_printf_common+0xac>
 802eff8:	f04f 30ff 	mov.w	r0, #4294967295
 802effc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f000:	3501      	adds	r5, #1
 802f002:	e7c6      	b.n	802ef92 <_printf_common+0x3e>
 802f004:	18e1      	adds	r1, r4, r3
 802f006:	1c5a      	adds	r2, r3, #1
 802f008:	2030      	movs	r0, #48	; 0x30
 802f00a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802f00e:	4422      	add	r2, r4
 802f010:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802f014:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802f018:	3302      	adds	r3, #2
 802f01a:	e7c7      	b.n	802efac <_printf_common+0x58>
 802f01c:	2301      	movs	r3, #1
 802f01e:	4622      	mov	r2, r4
 802f020:	4649      	mov	r1, r9
 802f022:	4638      	mov	r0, r7
 802f024:	47c0      	blx	r8
 802f026:	3001      	adds	r0, #1
 802f028:	d0e6      	beq.n	802eff8 <_printf_common+0xa4>
 802f02a:	3601      	adds	r6, #1
 802f02c:	e7d9      	b.n	802efe2 <_printf_common+0x8e>
	...

0802f030 <_printf_i>:
 802f030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802f034:	7e0f      	ldrb	r7, [r1, #24]
 802f036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802f038:	2f78      	cmp	r7, #120	; 0x78
 802f03a:	4691      	mov	r9, r2
 802f03c:	4680      	mov	r8, r0
 802f03e:	460c      	mov	r4, r1
 802f040:	469a      	mov	sl, r3
 802f042:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802f046:	d807      	bhi.n	802f058 <_printf_i+0x28>
 802f048:	2f62      	cmp	r7, #98	; 0x62
 802f04a:	d80a      	bhi.n	802f062 <_printf_i+0x32>
 802f04c:	2f00      	cmp	r7, #0
 802f04e:	f000 80d8 	beq.w	802f202 <_printf_i+0x1d2>
 802f052:	2f58      	cmp	r7, #88	; 0x58
 802f054:	f000 80a3 	beq.w	802f19e <_printf_i+0x16e>
 802f058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f05c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802f060:	e03a      	b.n	802f0d8 <_printf_i+0xa8>
 802f062:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802f066:	2b15      	cmp	r3, #21
 802f068:	d8f6      	bhi.n	802f058 <_printf_i+0x28>
 802f06a:	a101      	add	r1, pc, #4	; (adr r1, 802f070 <_printf_i+0x40>)
 802f06c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802f070:	0802f0c9 	.word	0x0802f0c9
 802f074:	0802f0dd 	.word	0x0802f0dd
 802f078:	0802f059 	.word	0x0802f059
 802f07c:	0802f059 	.word	0x0802f059
 802f080:	0802f059 	.word	0x0802f059
 802f084:	0802f059 	.word	0x0802f059
 802f088:	0802f0dd 	.word	0x0802f0dd
 802f08c:	0802f059 	.word	0x0802f059
 802f090:	0802f059 	.word	0x0802f059
 802f094:	0802f059 	.word	0x0802f059
 802f098:	0802f059 	.word	0x0802f059
 802f09c:	0802f1e9 	.word	0x0802f1e9
 802f0a0:	0802f10d 	.word	0x0802f10d
 802f0a4:	0802f1cb 	.word	0x0802f1cb
 802f0a8:	0802f059 	.word	0x0802f059
 802f0ac:	0802f059 	.word	0x0802f059
 802f0b0:	0802f20b 	.word	0x0802f20b
 802f0b4:	0802f059 	.word	0x0802f059
 802f0b8:	0802f10d 	.word	0x0802f10d
 802f0bc:	0802f059 	.word	0x0802f059
 802f0c0:	0802f059 	.word	0x0802f059
 802f0c4:	0802f1d3 	.word	0x0802f1d3
 802f0c8:	682b      	ldr	r3, [r5, #0]
 802f0ca:	1d1a      	adds	r2, r3, #4
 802f0cc:	681b      	ldr	r3, [r3, #0]
 802f0ce:	602a      	str	r2, [r5, #0]
 802f0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f0d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802f0d8:	2301      	movs	r3, #1
 802f0da:	e0a3      	b.n	802f224 <_printf_i+0x1f4>
 802f0dc:	6820      	ldr	r0, [r4, #0]
 802f0de:	6829      	ldr	r1, [r5, #0]
 802f0e0:	0606      	lsls	r6, r0, #24
 802f0e2:	f101 0304 	add.w	r3, r1, #4
 802f0e6:	d50a      	bpl.n	802f0fe <_printf_i+0xce>
 802f0e8:	680e      	ldr	r6, [r1, #0]
 802f0ea:	602b      	str	r3, [r5, #0]
 802f0ec:	2e00      	cmp	r6, #0
 802f0ee:	da03      	bge.n	802f0f8 <_printf_i+0xc8>
 802f0f0:	232d      	movs	r3, #45	; 0x2d
 802f0f2:	4276      	negs	r6, r6
 802f0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f0f8:	485e      	ldr	r0, [pc, #376]	; (802f274 <_printf_i+0x244>)
 802f0fa:	230a      	movs	r3, #10
 802f0fc:	e019      	b.n	802f132 <_printf_i+0x102>
 802f0fe:	680e      	ldr	r6, [r1, #0]
 802f100:	602b      	str	r3, [r5, #0]
 802f102:	f010 0f40 	tst.w	r0, #64	; 0x40
 802f106:	bf18      	it	ne
 802f108:	b236      	sxthne	r6, r6
 802f10a:	e7ef      	b.n	802f0ec <_printf_i+0xbc>
 802f10c:	682b      	ldr	r3, [r5, #0]
 802f10e:	6820      	ldr	r0, [r4, #0]
 802f110:	1d19      	adds	r1, r3, #4
 802f112:	6029      	str	r1, [r5, #0]
 802f114:	0601      	lsls	r1, r0, #24
 802f116:	d501      	bpl.n	802f11c <_printf_i+0xec>
 802f118:	681e      	ldr	r6, [r3, #0]
 802f11a:	e002      	b.n	802f122 <_printf_i+0xf2>
 802f11c:	0646      	lsls	r6, r0, #25
 802f11e:	d5fb      	bpl.n	802f118 <_printf_i+0xe8>
 802f120:	881e      	ldrh	r6, [r3, #0]
 802f122:	4854      	ldr	r0, [pc, #336]	; (802f274 <_printf_i+0x244>)
 802f124:	2f6f      	cmp	r7, #111	; 0x6f
 802f126:	bf0c      	ite	eq
 802f128:	2308      	moveq	r3, #8
 802f12a:	230a      	movne	r3, #10
 802f12c:	2100      	movs	r1, #0
 802f12e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802f132:	6865      	ldr	r5, [r4, #4]
 802f134:	60a5      	str	r5, [r4, #8]
 802f136:	2d00      	cmp	r5, #0
 802f138:	bfa2      	ittt	ge
 802f13a:	6821      	ldrge	r1, [r4, #0]
 802f13c:	f021 0104 	bicge.w	r1, r1, #4
 802f140:	6021      	strge	r1, [r4, #0]
 802f142:	b90e      	cbnz	r6, 802f148 <_printf_i+0x118>
 802f144:	2d00      	cmp	r5, #0
 802f146:	d04d      	beq.n	802f1e4 <_printf_i+0x1b4>
 802f148:	4615      	mov	r5, r2
 802f14a:	fbb6 f1f3 	udiv	r1, r6, r3
 802f14e:	fb03 6711 	mls	r7, r3, r1, r6
 802f152:	5dc7      	ldrb	r7, [r0, r7]
 802f154:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802f158:	4637      	mov	r7, r6
 802f15a:	42bb      	cmp	r3, r7
 802f15c:	460e      	mov	r6, r1
 802f15e:	d9f4      	bls.n	802f14a <_printf_i+0x11a>
 802f160:	2b08      	cmp	r3, #8
 802f162:	d10b      	bne.n	802f17c <_printf_i+0x14c>
 802f164:	6823      	ldr	r3, [r4, #0]
 802f166:	07de      	lsls	r6, r3, #31
 802f168:	d508      	bpl.n	802f17c <_printf_i+0x14c>
 802f16a:	6923      	ldr	r3, [r4, #16]
 802f16c:	6861      	ldr	r1, [r4, #4]
 802f16e:	4299      	cmp	r1, r3
 802f170:	bfde      	ittt	le
 802f172:	2330      	movle	r3, #48	; 0x30
 802f174:	f805 3c01 	strble.w	r3, [r5, #-1]
 802f178:	f105 35ff 	addle.w	r5, r5, #4294967295
 802f17c:	1b52      	subs	r2, r2, r5
 802f17e:	6122      	str	r2, [r4, #16]
 802f180:	f8cd a000 	str.w	sl, [sp]
 802f184:	464b      	mov	r3, r9
 802f186:	aa03      	add	r2, sp, #12
 802f188:	4621      	mov	r1, r4
 802f18a:	4640      	mov	r0, r8
 802f18c:	f7ff fee2 	bl	802ef54 <_printf_common>
 802f190:	3001      	adds	r0, #1
 802f192:	d14c      	bne.n	802f22e <_printf_i+0x1fe>
 802f194:	f04f 30ff 	mov.w	r0, #4294967295
 802f198:	b004      	add	sp, #16
 802f19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f19e:	4835      	ldr	r0, [pc, #212]	; (802f274 <_printf_i+0x244>)
 802f1a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802f1a4:	6829      	ldr	r1, [r5, #0]
 802f1a6:	6823      	ldr	r3, [r4, #0]
 802f1a8:	f851 6b04 	ldr.w	r6, [r1], #4
 802f1ac:	6029      	str	r1, [r5, #0]
 802f1ae:	061d      	lsls	r5, r3, #24
 802f1b0:	d514      	bpl.n	802f1dc <_printf_i+0x1ac>
 802f1b2:	07df      	lsls	r7, r3, #31
 802f1b4:	bf44      	itt	mi
 802f1b6:	f043 0320 	orrmi.w	r3, r3, #32
 802f1ba:	6023      	strmi	r3, [r4, #0]
 802f1bc:	b91e      	cbnz	r6, 802f1c6 <_printf_i+0x196>
 802f1be:	6823      	ldr	r3, [r4, #0]
 802f1c0:	f023 0320 	bic.w	r3, r3, #32
 802f1c4:	6023      	str	r3, [r4, #0]
 802f1c6:	2310      	movs	r3, #16
 802f1c8:	e7b0      	b.n	802f12c <_printf_i+0xfc>
 802f1ca:	6823      	ldr	r3, [r4, #0]
 802f1cc:	f043 0320 	orr.w	r3, r3, #32
 802f1d0:	6023      	str	r3, [r4, #0]
 802f1d2:	2378      	movs	r3, #120	; 0x78
 802f1d4:	4828      	ldr	r0, [pc, #160]	; (802f278 <_printf_i+0x248>)
 802f1d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802f1da:	e7e3      	b.n	802f1a4 <_printf_i+0x174>
 802f1dc:	0659      	lsls	r1, r3, #25
 802f1de:	bf48      	it	mi
 802f1e0:	b2b6      	uxthmi	r6, r6
 802f1e2:	e7e6      	b.n	802f1b2 <_printf_i+0x182>
 802f1e4:	4615      	mov	r5, r2
 802f1e6:	e7bb      	b.n	802f160 <_printf_i+0x130>
 802f1e8:	682b      	ldr	r3, [r5, #0]
 802f1ea:	6826      	ldr	r6, [r4, #0]
 802f1ec:	6961      	ldr	r1, [r4, #20]
 802f1ee:	1d18      	adds	r0, r3, #4
 802f1f0:	6028      	str	r0, [r5, #0]
 802f1f2:	0635      	lsls	r5, r6, #24
 802f1f4:	681b      	ldr	r3, [r3, #0]
 802f1f6:	d501      	bpl.n	802f1fc <_printf_i+0x1cc>
 802f1f8:	6019      	str	r1, [r3, #0]
 802f1fa:	e002      	b.n	802f202 <_printf_i+0x1d2>
 802f1fc:	0670      	lsls	r0, r6, #25
 802f1fe:	d5fb      	bpl.n	802f1f8 <_printf_i+0x1c8>
 802f200:	8019      	strh	r1, [r3, #0]
 802f202:	2300      	movs	r3, #0
 802f204:	6123      	str	r3, [r4, #16]
 802f206:	4615      	mov	r5, r2
 802f208:	e7ba      	b.n	802f180 <_printf_i+0x150>
 802f20a:	682b      	ldr	r3, [r5, #0]
 802f20c:	1d1a      	adds	r2, r3, #4
 802f20e:	602a      	str	r2, [r5, #0]
 802f210:	681d      	ldr	r5, [r3, #0]
 802f212:	6862      	ldr	r2, [r4, #4]
 802f214:	2100      	movs	r1, #0
 802f216:	4628      	mov	r0, r5
 802f218:	f7f0 ffea 	bl	80201f0 <memchr>
 802f21c:	b108      	cbz	r0, 802f222 <_printf_i+0x1f2>
 802f21e:	1b40      	subs	r0, r0, r5
 802f220:	6060      	str	r0, [r4, #4]
 802f222:	6863      	ldr	r3, [r4, #4]
 802f224:	6123      	str	r3, [r4, #16]
 802f226:	2300      	movs	r3, #0
 802f228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f22c:	e7a8      	b.n	802f180 <_printf_i+0x150>
 802f22e:	6923      	ldr	r3, [r4, #16]
 802f230:	462a      	mov	r2, r5
 802f232:	4649      	mov	r1, r9
 802f234:	4640      	mov	r0, r8
 802f236:	47d0      	blx	sl
 802f238:	3001      	adds	r0, #1
 802f23a:	d0ab      	beq.n	802f194 <_printf_i+0x164>
 802f23c:	6823      	ldr	r3, [r4, #0]
 802f23e:	079b      	lsls	r3, r3, #30
 802f240:	d413      	bmi.n	802f26a <_printf_i+0x23a>
 802f242:	68e0      	ldr	r0, [r4, #12]
 802f244:	9b03      	ldr	r3, [sp, #12]
 802f246:	4298      	cmp	r0, r3
 802f248:	bfb8      	it	lt
 802f24a:	4618      	movlt	r0, r3
 802f24c:	e7a4      	b.n	802f198 <_printf_i+0x168>
 802f24e:	2301      	movs	r3, #1
 802f250:	4632      	mov	r2, r6
 802f252:	4649      	mov	r1, r9
 802f254:	4640      	mov	r0, r8
 802f256:	47d0      	blx	sl
 802f258:	3001      	adds	r0, #1
 802f25a:	d09b      	beq.n	802f194 <_printf_i+0x164>
 802f25c:	3501      	adds	r5, #1
 802f25e:	68e3      	ldr	r3, [r4, #12]
 802f260:	9903      	ldr	r1, [sp, #12]
 802f262:	1a5b      	subs	r3, r3, r1
 802f264:	42ab      	cmp	r3, r5
 802f266:	dcf2      	bgt.n	802f24e <_printf_i+0x21e>
 802f268:	e7eb      	b.n	802f242 <_printf_i+0x212>
 802f26a:	2500      	movs	r5, #0
 802f26c:	f104 0619 	add.w	r6, r4, #25
 802f270:	e7f5      	b.n	802f25e <_printf_i+0x22e>
 802f272:	bf00      	nop
 802f274:	08031aad 	.word	0x08031aad
 802f278:	08031abe 	.word	0x08031abe

0802f27c <__sread>:
 802f27c:	b510      	push	{r4, lr}
 802f27e:	460c      	mov	r4, r1
 802f280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f284:	f000 f8ec 	bl	802f460 <_read_r>
 802f288:	2800      	cmp	r0, #0
 802f28a:	bfab      	itete	ge
 802f28c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f28e:	89a3      	ldrhlt	r3, [r4, #12]
 802f290:	181b      	addge	r3, r3, r0
 802f292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f296:	bfac      	ite	ge
 802f298:	6563      	strge	r3, [r4, #84]	; 0x54
 802f29a:	81a3      	strhlt	r3, [r4, #12]
 802f29c:	bd10      	pop	{r4, pc}

0802f29e <__swrite>:
 802f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f2a2:	461f      	mov	r7, r3
 802f2a4:	898b      	ldrh	r3, [r1, #12]
 802f2a6:	05db      	lsls	r3, r3, #23
 802f2a8:	4605      	mov	r5, r0
 802f2aa:	460c      	mov	r4, r1
 802f2ac:	4616      	mov	r6, r2
 802f2ae:	d505      	bpl.n	802f2bc <__swrite+0x1e>
 802f2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2b4:	2302      	movs	r3, #2
 802f2b6:	2200      	movs	r2, #0
 802f2b8:	f000 f868 	bl	802f38c <_lseek_r>
 802f2bc:	89a3      	ldrh	r3, [r4, #12]
 802f2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f2c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f2c6:	81a3      	strh	r3, [r4, #12]
 802f2c8:	4632      	mov	r2, r6
 802f2ca:	463b      	mov	r3, r7
 802f2cc:	4628      	mov	r0, r5
 802f2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f2d2:	f000 b817 	b.w	802f304 <_write_r>

0802f2d6 <__sseek>:
 802f2d6:	b510      	push	{r4, lr}
 802f2d8:	460c      	mov	r4, r1
 802f2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2de:	f000 f855 	bl	802f38c <_lseek_r>
 802f2e2:	1c43      	adds	r3, r0, #1
 802f2e4:	89a3      	ldrh	r3, [r4, #12]
 802f2e6:	bf15      	itete	ne
 802f2e8:	6560      	strne	r0, [r4, #84]	; 0x54
 802f2ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f2ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f2f2:	81a3      	strheq	r3, [r4, #12]
 802f2f4:	bf18      	it	ne
 802f2f6:	81a3      	strhne	r3, [r4, #12]
 802f2f8:	bd10      	pop	{r4, pc}

0802f2fa <__sclose>:
 802f2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f2fe:	f000 b813 	b.w	802f328 <_close_r>
	...

0802f304 <_write_r>:
 802f304:	b538      	push	{r3, r4, r5, lr}
 802f306:	4d07      	ldr	r5, [pc, #28]	; (802f324 <_write_r+0x20>)
 802f308:	4604      	mov	r4, r0
 802f30a:	4608      	mov	r0, r1
 802f30c:	4611      	mov	r1, r2
 802f30e:	2200      	movs	r2, #0
 802f310:	602a      	str	r2, [r5, #0]
 802f312:	461a      	mov	r2, r3
 802f314:	f7f2 fed0 	bl	80220b8 <_write>
 802f318:	1c43      	adds	r3, r0, #1
 802f31a:	d102      	bne.n	802f322 <_write_r+0x1e>
 802f31c:	682b      	ldr	r3, [r5, #0]
 802f31e:	b103      	cbz	r3, 802f322 <_write_r+0x1e>
 802f320:	6023      	str	r3, [r4, #0]
 802f322:	bd38      	pop	{r3, r4, r5, pc}
 802f324:	20001208 	.word	0x20001208

0802f328 <_close_r>:
 802f328:	b538      	push	{r3, r4, r5, lr}
 802f32a:	4d06      	ldr	r5, [pc, #24]	; (802f344 <_close_r+0x1c>)
 802f32c:	2300      	movs	r3, #0
 802f32e:	4604      	mov	r4, r0
 802f330:	4608      	mov	r0, r1
 802f332:	602b      	str	r3, [r5, #0]
 802f334:	f7f2 fedc 	bl	80220f0 <_close>
 802f338:	1c43      	adds	r3, r0, #1
 802f33a:	d102      	bne.n	802f342 <_close_r+0x1a>
 802f33c:	682b      	ldr	r3, [r5, #0]
 802f33e:	b103      	cbz	r3, 802f342 <_close_r+0x1a>
 802f340:	6023      	str	r3, [r4, #0]
 802f342:	bd38      	pop	{r3, r4, r5, pc}
 802f344:	20001208 	.word	0x20001208

0802f348 <_fstat_r>:
 802f348:	b538      	push	{r3, r4, r5, lr}
 802f34a:	4d07      	ldr	r5, [pc, #28]	; (802f368 <_fstat_r+0x20>)
 802f34c:	2300      	movs	r3, #0
 802f34e:	4604      	mov	r4, r0
 802f350:	4608      	mov	r0, r1
 802f352:	4611      	mov	r1, r2
 802f354:	602b      	str	r3, [r5, #0]
 802f356:	f7f2 fed7 	bl	8022108 <_fstat>
 802f35a:	1c43      	adds	r3, r0, #1
 802f35c:	d102      	bne.n	802f364 <_fstat_r+0x1c>
 802f35e:	682b      	ldr	r3, [r5, #0]
 802f360:	b103      	cbz	r3, 802f364 <_fstat_r+0x1c>
 802f362:	6023      	str	r3, [r4, #0]
 802f364:	bd38      	pop	{r3, r4, r5, pc}
 802f366:	bf00      	nop
 802f368:	20001208 	.word	0x20001208

0802f36c <_isatty_r>:
 802f36c:	b538      	push	{r3, r4, r5, lr}
 802f36e:	4d06      	ldr	r5, [pc, #24]	; (802f388 <_isatty_r+0x1c>)
 802f370:	2300      	movs	r3, #0
 802f372:	4604      	mov	r4, r0
 802f374:	4608      	mov	r0, r1
 802f376:	602b      	str	r3, [r5, #0]
 802f378:	f7f2 fed6 	bl	8022128 <_isatty>
 802f37c:	1c43      	adds	r3, r0, #1
 802f37e:	d102      	bne.n	802f386 <_isatty_r+0x1a>
 802f380:	682b      	ldr	r3, [r5, #0]
 802f382:	b103      	cbz	r3, 802f386 <_isatty_r+0x1a>
 802f384:	6023      	str	r3, [r4, #0]
 802f386:	bd38      	pop	{r3, r4, r5, pc}
 802f388:	20001208 	.word	0x20001208

0802f38c <_lseek_r>:
 802f38c:	b538      	push	{r3, r4, r5, lr}
 802f38e:	4d07      	ldr	r5, [pc, #28]	; (802f3ac <_lseek_r+0x20>)
 802f390:	4604      	mov	r4, r0
 802f392:	4608      	mov	r0, r1
 802f394:	4611      	mov	r1, r2
 802f396:	2200      	movs	r2, #0
 802f398:	602a      	str	r2, [r5, #0]
 802f39a:	461a      	mov	r2, r3
 802f39c:	f7f2 fecf 	bl	802213e <_lseek>
 802f3a0:	1c43      	adds	r3, r0, #1
 802f3a2:	d102      	bne.n	802f3aa <_lseek_r+0x1e>
 802f3a4:	682b      	ldr	r3, [r5, #0]
 802f3a6:	b103      	cbz	r3, 802f3aa <_lseek_r+0x1e>
 802f3a8:	6023      	str	r3, [r4, #0]
 802f3aa:	bd38      	pop	{r3, r4, r5, pc}
 802f3ac:	20001208 	.word	0x20001208

0802f3b0 <memcpy>:
 802f3b0:	440a      	add	r2, r1
 802f3b2:	4291      	cmp	r1, r2
 802f3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 802f3b8:	d100      	bne.n	802f3bc <memcpy+0xc>
 802f3ba:	4770      	bx	lr
 802f3bc:	b510      	push	{r4, lr}
 802f3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f3c6:	4291      	cmp	r1, r2
 802f3c8:	d1f9      	bne.n	802f3be <memcpy+0xe>
 802f3ca:	bd10      	pop	{r4, pc}

0802f3cc <memmove>:
 802f3cc:	4288      	cmp	r0, r1
 802f3ce:	b510      	push	{r4, lr}
 802f3d0:	eb01 0402 	add.w	r4, r1, r2
 802f3d4:	d902      	bls.n	802f3dc <memmove+0x10>
 802f3d6:	4284      	cmp	r4, r0
 802f3d8:	4623      	mov	r3, r4
 802f3da:	d807      	bhi.n	802f3ec <memmove+0x20>
 802f3dc:	1e43      	subs	r3, r0, #1
 802f3de:	42a1      	cmp	r1, r4
 802f3e0:	d008      	beq.n	802f3f4 <memmove+0x28>
 802f3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f3e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 802f3ea:	e7f8      	b.n	802f3de <memmove+0x12>
 802f3ec:	4402      	add	r2, r0
 802f3ee:	4601      	mov	r1, r0
 802f3f0:	428a      	cmp	r2, r1
 802f3f2:	d100      	bne.n	802f3f6 <memmove+0x2a>
 802f3f4:	bd10      	pop	{r4, pc}
 802f3f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f3fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802f3fe:	e7f7      	b.n	802f3f0 <memmove+0x24>

0802f400 <_realloc_r>:
 802f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f404:	4680      	mov	r8, r0
 802f406:	4614      	mov	r4, r2
 802f408:	460e      	mov	r6, r1
 802f40a:	b921      	cbnz	r1, 802f416 <_realloc_r+0x16>
 802f40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f410:	4611      	mov	r1, r2
 802f412:	f7fe becb 	b.w	802e1ac <_malloc_r>
 802f416:	b92a      	cbnz	r2, 802f424 <_realloc_r+0x24>
 802f418:	f7fe fe5c 	bl	802e0d4 <_free_r>
 802f41c:	4625      	mov	r5, r4
 802f41e:	4628      	mov	r0, r5
 802f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f424:	f000 f82e 	bl	802f484 <_malloc_usable_size_r>
 802f428:	4284      	cmp	r4, r0
 802f42a:	4607      	mov	r7, r0
 802f42c:	d802      	bhi.n	802f434 <_realloc_r+0x34>
 802f42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802f432:	d812      	bhi.n	802f45a <_realloc_r+0x5a>
 802f434:	4621      	mov	r1, r4
 802f436:	4640      	mov	r0, r8
 802f438:	f7fe feb8 	bl	802e1ac <_malloc_r>
 802f43c:	4605      	mov	r5, r0
 802f43e:	2800      	cmp	r0, #0
 802f440:	d0ed      	beq.n	802f41e <_realloc_r+0x1e>
 802f442:	42bc      	cmp	r4, r7
 802f444:	4622      	mov	r2, r4
 802f446:	4631      	mov	r1, r6
 802f448:	bf28      	it	cs
 802f44a:	463a      	movcs	r2, r7
 802f44c:	f7ff ffb0 	bl	802f3b0 <memcpy>
 802f450:	4631      	mov	r1, r6
 802f452:	4640      	mov	r0, r8
 802f454:	f7fe fe3e 	bl	802e0d4 <_free_r>
 802f458:	e7e1      	b.n	802f41e <_realloc_r+0x1e>
 802f45a:	4635      	mov	r5, r6
 802f45c:	e7df      	b.n	802f41e <_realloc_r+0x1e>
	...

0802f460 <_read_r>:
 802f460:	b538      	push	{r3, r4, r5, lr}
 802f462:	4d07      	ldr	r5, [pc, #28]	; (802f480 <_read_r+0x20>)
 802f464:	4604      	mov	r4, r0
 802f466:	4608      	mov	r0, r1
 802f468:	4611      	mov	r1, r2
 802f46a:	2200      	movs	r2, #0
 802f46c:	602a      	str	r2, [r5, #0]
 802f46e:	461a      	mov	r2, r3
 802f470:	f7f2 fe05 	bl	802207e <_read>
 802f474:	1c43      	adds	r3, r0, #1
 802f476:	d102      	bne.n	802f47e <_read_r+0x1e>
 802f478:	682b      	ldr	r3, [r5, #0]
 802f47a:	b103      	cbz	r3, 802f47e <_read_r+0x1e>
 802f47c:	6023      	str	r3, [r4, #0]
 802f47e:	bd38      	pop	{r3, r4, r5, pc}
 802f480:	20001208 	.word	0x20001208

0802f484 <_malloc_usable_size_r>:
 802f484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f488:	1f18      	subs	r0, r3, #4
 802f48a:	2b00      	cmp	r3, #0
 802f48c:	bfbc      	itt	lt
 802f48e:	580b      	ldrlt	r3, [r1, r0]
 802f490:	18c0      	addlt	r0, r0, r3
 802f492:	4770      	bx	lr

0802f494 <_init>:
 802f494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f496:	bf00      	nop
 802f498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f49a:	bc08      	pop	{r3}
 802f49c:	469e      	mov	lr, r3
 802f49e:	4770      	bx	lr

0802f4a0 <_fini>:
 802f4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f4a2:	bf00      	nop
 802f4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f4a6:	bc08      	pop	{r3}
 802f4a8:	469e      	mov	lr, r3
 802f4aa:	4770      	bx	lr
