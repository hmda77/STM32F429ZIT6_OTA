
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f230  080201b0  080201b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002624  0802f3e0  0802f3e0  0001f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08031a04  08031a04  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08031a04  08031a04  00021a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08031a0c  08031a0c  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08031a0c  08031a0c  00021a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08031a10  08031a10  00021a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08031a14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00001120  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001204  20001204  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c9a9  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f94  00000000  00000000  0005cabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002348  00000000  00000000  00062a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002110  00000000  00000000  00064da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c83a  00000000  00000000  00066eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d269  00000000  00000000  000936ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0d02  00000000  00000000  000c0953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b1655  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f2c  00000000  00000000  001b16a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201b0 <__do_global_dtors_aux>:
 80201b0:	b510      	push	{r4, lr}
 80201b2:	4c05      	ldr	r4, [pc, #20]	; (80201c8 <__do_global_dtors_aux+0x18>)
 80201b4:	7823      	ldrb	r3, [r4, #0]
 80201b6:	b933      	cbnz	r3, 80201c6 <__do_global_dtors_aux+0x16>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__do_global_dtors_aux+0x1c>)
 80201ba:	b113      	cbz	r3, 80201c2 <__do_global_dtors_aux+0x12>
 80201bc:	4804      	ldr	r0, [pc, #16]	; (80201d0 <__do_global_dtors_aux+0x20>)
 80201be:	f3af 8000 	nop.w
 80201c2:	2301      	movs	r3, #1
 80201c4:	7023      	strb	r3, [r4, #0]
 80201c6:	bd10      	pop	{r4, pc}
 80201c8:	200000e4 	.word	0x200000e4
 80201cc:	00000000 	.word	0x00000000
 80201d0:	0802f3c8 	.word	0x0802f3c8

080201d4 <frame_dummy>:
 80201d4:	b508      	push	{r3, lr}
 80201d6:	4b03      	ldr	r3, [pc, #12]	; (80201e4 <frame_dummy+0x10>)
 80201d8:	b11b      	cbz	r3, 80201e2 <frame_dummy+0xe>
 80201da:	4903      	ldr	r1, [pc, #12]	; (80201e8 <frame_dummy+0x14>)
 80201dc:	4803      	ldr	r0, [pc, #12]	; (80201ec <frame_dummy+0x18>)
 80201de:	f3af 8000 	nop.w
 80201e2:	bd08      	pop	{r3, pc}
 80201e4:	00000000 	.word	0x00000000
 80201e8:	200000e8 	.word	0x200000e8
 80201ec:	0802f3c8 	.word	0x0802f3c8

080201f0 <memchr>:
 80201f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201f4:	2a10      	cmp	r2, #16
 80201f6:	db2b      	blt.n	8020250 <memchr+0x60>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	d008      	beq.n	8020210 <memchr+0x20>
 80201fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020202:	3a01      	subs	r2, #1
 8020204:	428b      	cmp	r3, r1
 8020206:	d02d      	beq.n	8020264 <memchr+0x74>
 8020208:	f010 0f07 	tst.w	r0, #7
 802020c:	b342      	cbz	r2, 8020260 <memchr+0x70>
 802020e:	d1f6      	bne.n	80201fe <memchr+0xe>
 8020210:	b4f0      	push	{r4, r5, r6, r7}
 8020212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802021a:	f022 0407 	bic.w	r4, r2, #7
 802021e:	f07f 0700 	mvns.w	r7, #0
 8020222:	2300      	movs	r3, #0
 8020224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020228:	3c08      	subs	r4, #8
 802022a:	ea85 0501 	eor.w	r5, r5, r1
 802022e:	ea86 0601 	eor.w	r6, r6, r1
 8020232:	fa85 f547 	uadd8	r5, r5, r7
 8020236:	faa3 f587 	sel	r5, r3, r7
 802023a:	fa86 f647 	uadd8	r6, r6, r7
 802023e:	faa5 f687 	sel	r6, r5, r7
 8020242:	b98e      	cbnz	r6, 8020268 <memchr+0x78>
 8020244:	d1ee      	bne.n	8020224 <memchr+0x34>
 8020246:	bcf0      	pop	{r4, r5, r6, r7}
 8020248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802024c:	f002 0207 	and.w	r2, r2, #7
 8020250:	b132      	cbz	r2, 8020260 <memchr+0x70>
 8020252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020256:	3a01      	subs	r2, #1
 8020258:	ea83 0301 	eor.w	r3, r3, r1
 802025c:	b113      	cbz	r3, 8020264 <memchr+0x74>
 802025e:	d1f8      	bne.n	8020252 <memchr+0x62>
 8020260:	2000      	movs	r0, #0
 8020262:	4770      	bx	lr
 8020264:	3801      	subs	r0, #1
 8020266:	4770      	bx	lr
 8020268:	2d00      	cmp	r5, #0
 802026a:	bf06      	itte	eq
 802026c:	4635      	moveq	r5, r6
 802026e:	3803      	subeq	r0, #3
 8020270:	3807      	subne	r0, #7
 8020272:	f015 0f01 	tst.w	r5, #1
 8020276:	d107      	bne.n	8020288 <memchr+0x98>
 8020278:	3001      	adds	r0, #1
 802027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802027e:	bf02      	ittt	eq
 8020280:	3001      	addeq	r0, #1
 8020282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020286:	3001      	addeq	r0, #1
 8020288:	bcf0      	pop	{r4, r5, r6, r7}
 802028a:	3801      	subs	r0, #1
 802028c:	4770      	bx	lr
 802028e:	bf00      	nop

08020290 <__aeabi_uldivmod>:
 8020290:	b953      	cbnz	r3, 80202a8 <__aeabi_uldivmod+0x18>
 8020292:	b94a      	cbnz	r2, 80202a8 <__aeabi_uldivmod+0x18>
 8020294:	2900      	cmp	r1, #0
 8020296:	bf08      	it	eq
 8020298:	2800      	cmpeq	r0, #0
 802029a:	bf1c      	itt	ne
 802029c:	f04f 31ff 	movne.w	r1, #4294967295
 80202a0:	f04f 30ff 	movne.w	r0, #4294967295
 80202a4:	f000 b974 	b.w	8020590 <__aeabi_idiv0>
 80202a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80202ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80202b0:	f000 f806 	bl	80202c0 <__udivmoddi4>
 80202b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80202b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80202bc:	b004      	add	sp, #16
 80202be:	4770      	bx	lr

080202c0 <__udivmoddi4>:
 80202c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80202c4:	9d08      	ldr	r5, [sp, #32]
 80202c6:	4604      	mov	r4, r0
 80202c8:	468e      	mov	lr, r1
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d14d      	bne.n	802036a <__udivmoddi4+0xaa>
 80202ce:	428a      	cmp	r2, r1
 80202d0:	4694      	mov	ip, r2
 80202d2:	d969      	bls.n	80203a8 <__udivmoddi4+0xe8>
 80202d4:	fab2 f282 	clz	r2, r2
 80202d8:	b152      	cbz	r2, 80202f0 <__udivmoddi4+0x30>
 80202da:	fa01 f302 	lsl.w	r3, r1, r2
 80202de:	f1c2 0120 	rsb	r1, r2, #32
 80202e2:	fa20 f101 	lsr.w	r1, r0, r1
 80202e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80202ea:	ea41 0e03 	orr.w	lr, r1, r3
 80202ee:	4094      	lsls	r4, r2
 80202f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80202f4:	0c21      	lsrs	r1, r4, #16
 80202f6:	fbbe f6f8 	udiv	r6, lr, r8
 80202fa:	fa1f f78c 	uxth.w	r7, ip
 80202fe:	fb08 e316 	mls	r3, r8, r6, lr
 8020302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020306:	fb06 f107 	mul.w	r1, r6, r7
 802030a:	4299      	cmp	r1, r3
 802030c:	d90a      	bls.n	8020324 <__udivmoddi4+0x64>
 802030e:	eb1c 0303 	adds.w	r3, ip, r3
 8020312:	f106 30ff 	add.w	r0, r6, #4294967295
 8020316:	f080 811f 	bcs.w	8020558 <__udivmoddi4+0x298>
 802031a:	4299      	cmp	r1, r3
 802031c:	f240 811c 	bls.w	8020558 <__udivmoddi4+0x298>
 8020320:	3e02      	subs	r6, #2
 8020322:	4463      	add	r3, ip
 8020324:	1a5b      	subs	r3, r3, r1
 8020326:	b2a4      	uxth	r4, r4
 8020328:	fbb3 f0f8 	udiv	r0, r3, r8
 802032c:	fb08 3310 	mls	r3, r8, r0, r3
 8020330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020334:	fb00 f707 	mul.w	r7, r0, r7
 8020338:	42a7      	cmp	r7, r4
 802033a:	d90a      	bls.n	8020352 <__udivmoddi4+0x92>
 802033c:	eb1c 0404 	adds.w	r4, ip, r4
 8020340:	f100 33ff 	add.w	r3, r0, #4294967295
 8020344:	f080 810a 	bcs.w	802055c <__udivmoddi4+0x29c>
 8020348:	42a7      	cmp	r7, r4
 802034a:	f240 8107 	bls.w	802055c <__udivmoddi4+0x29c>
 802034e:	4464      	add	r4, ip
 8020350:	3802      	subs	r0, #2
 8020352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020356:	1be4      	subs	r4, r4, r7
 8020358:	2600      	movs	r6, #0
 802035a:	b11d      	cbz	r5, 8020364 <__udivmoddi4+0xa4>
 802035c:	40d4      	lsrs	r4, r2
 802035e:	2300      	movs	r3, #0
 8020360:	e9c5 4300 	strd	r4, r3, [r5]
 8020364:	4631      	mov	r1, r6
 8020366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802036a:	428b      	cmp	r3, r1
 802036c:	d909      	bls.n	8020382 <__udivmoddi4+0xc2>
 802036e:	2d00      	cmp	r5, #0
 8020370:	f000 80ef 	beq.w	8020552 <__udivmoddi4+0x292>
 8020374:	2600      	movs	r6, #0
 8020376:	e9c5 0100 	strd	r0, r1, [r5]
 802037a:	4630      	mov	r0, r6
 802037c:	4631      	mov	r1, r6
 802037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020382:	fab3 f683 	clz	r6, r3
 8020386:	2e00      	cmp	r6, #0
 8020388:	d14a      	bne.n	8020420 <__udivmoddi4+0x160>
 802038a:	428b      	cmp	r3, r1
 802038c:	d302      	bcc.n	8020394 <__udivmoddi4+0xd4>
 802038e:	4282      	cmp	r2, r0
 8020390:	f200 80f9 	bhi.w	8020586 <__udivmoddi4+0x2c6>
 8020394:	1a84      	subs	r4, r0, r2
 8020396:	eb61 0303 	sbc.w	r3, r1, r3
 802039a:	2001      	movs	r0, #1
 802039c:	469e      	mov	lr, r3
 802039e:	2d00      	cmp	r5, #0
 80203a0:	d0e0      	beq.n	8020364 <__udivmoddi4+0xa4>
 80203a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80203a6:	e7dd      	b.n	8020364 <__udivmoddi4+0xa4>
 80203a8:	b902      	cbnz	r2, 80203ac <__udivmoddi4+0xec>
 80203aa:	deff      	udf	#255	; 0xff
 80203ac:	fab2 f282 	clz	r2, r2
 80203b0:	2a00      	cmp	r2, #0
 80203b2:	f040 8092 	bne.w	80204da <__udivmoddi4+0x21a>
 80203b6:	eba1 010c 	sub.w	r1, r1, ip
 80203ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80203be:	fa1f fe8c 	uxth.w	lr, ip
 80203c2:	2601      	movs	r6, #1
 80203c4:	0c20      	lsrs	r0, r4, #16
 80203c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80203ca:	fb07 1113 	mls	r1, r7, r3, r1
 80203ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80203d2:	fb0e f003 	mul.w	r0, lr, r3
 80203d6:	4288      	cmp	r0, r1
 80203d8:	d908      	bls.n	80203ec <__udivmoddi4+0x12c>
 80203da:	eb1c 0101 	adds.w	r1, ip, r1
 80203de:	f103 38ff 	add.w	r8, r3, #4294967295
 80203e2:	d202      	bcs.n	80203ea <__udivmoddi4+0x12a>
 80203e4:	4288      	cmp	r0, r1
 80203e6:	f200 80cb 	bhi.w	8020580 <__udivmoddi4+0x2c0>
 80203ea:	4643      	mov	r3, r8
 80203ec:	1a09      	subs	r1, r1, r0
 80203ee:	b2a4      	uxth	r4, r4
 80203f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80203f4:	fb07 1110 	mls	r1, r7, r0, r1
 80203f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80203fc:	fb0e fe00 	mul.w	lr, lr, r0
 8020400:	45a6      	cmp	lr, r4
 8020402:	d908      	bls.n	8020416 <__udivmoddi4+0x156>
 8020404:	eb1c 0404 	adds.w	r4, ip, r4
 8020408:	f100 31ff 	add.w	r1, r0, #4294967295
 802040c:	d202      	bcs.n	8020414 <__udivmoddi4+0x154>
 802040e:	45a6      	cmp	lr, r4
 8020410:	f200 80bb 	bhi.w	802058a <__udivmoddi4+0x2ca>
 8020414:	4608      	mov	r0, r1
 8020416:	eba4 040e 	sub.w	r4, r4, lr
 802041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 802041e:	e79c      	b.n	802035a <__udivmoddi4+0x9a>
 8020420:	f1c6 0720 	rsb	r7, r6, #32
 8020424:	40b3      	lsls	r3, r6
 8020426:	fa22 fc07 	lsr.w	ip, r2, r7
 802042a:	ea4c 0c03 	orr.w	ip, ip, r3
 802042e:	fa20 f407 	lsr.w	r4, r0, r7
 8020432:	fa01 f306 	lsl.w	r3, r1, r6
 8020436:	431c      	orrs	r4, r3
 8020438:	40f9      	lsrs	r1, r7
 802043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 802043e:	fa00 f306 	lsl.w	r3, r0, r6
 8020442:	fbb1 f8f9 	udiv	r8, r1, r9
 8020446:	0c20      	lsrs	r0, r4, #16
 8020448:	fa1f fe8c 	uxth.w	lr, ip
 802044c:	fb09 1118 	mls	r1, r9, r8, r1
 8020450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020454:	fb08 f00e 	mul.w	r0, r8, lr
 8020458:	4288      	cmp	r0, r1
 802045a:	fa02 f206 	lsl.w	r2, r2, r6
 802045e:	d90b      	bls.n	8020478 <__udivmoddi4+0x1b8>
 8020460:	eb1c 0101 	adds.w	r1, ip, r1
 8020464:	f108 3aff 	add.w	sl, r8, #4294967295
 8020468:	f080 8088 	bcs.w	802057c <__udivmoddi4+0x2bc>
 802046c:	4288      	cmp	r0, r1
 802046e:	f240 8085 	bls.w	802057c <__udivmoddi4+0x2bc>
 8020472:	f1a8 0802 	sub.w	r8, r8, #2
 8020476:	4461      	add	r1, ip
 8020478:	1a09      	subs	r1, r1, r0
 802047a:	b2a4      	uxth	r4, r4
 802047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8020480:	fb09 1110 	mls	r1, r9, r0, r1
 8020484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020488:	fb00 fe0e 	mul.w	lr, r0, lr
 802048c:	458e      	cmp	lr, r1
 802048e:	d908      	bls.n	80204a2 <__udivmoddi4+0x1e2>
 8020490:	eb1c 0101 	adds.w	r1, ip, r1
 8020494:	f100 34ff 	add.w	r4, r0, #4294967295
 8020498:	d26c      	bcs.n	8020574 <__udivmoddi4+0x2b4>
 802049a:	458e      	cmp	lr, r1
 802049c:	d96a      	bls.n	8020574 <__udivmoddi4+0x2b4>
 802049e:	3802      	subs	r0, #2
 80204a0:	4461      	add	r1, ip
 80204a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80204a6:	fba0 9402 	umull	r9, r4, r0, r2
 80204aa:	eba1 010e 	sub.w	r1, r1, lr
 80204ae:	42a1      	cmp	r1, r4
 80204b0:	46c8      	mov	r8, r9
 80204b2:	46a6      	mov	lr, r4
 80204b4:	d356      	bcc.n	8020564 <__udivmoddi4+0x2a4>
 80204b6:	d053      	beq.n	8020560 <__udivmoddi4+0x2a0>
 80204b8:	b15d      	cbz	r5, 80204d2 <__udivmoddi4+0x212>
 80204ba:	ebb3 0208 	subs.w	r2, r3, r8
 80204be:	eb61 010e 	sbc.w	r1, r1, lr
 80204c2:	fa01 f707 	lsl.w	r7, r1, r7
 80204c6:	fa22 f306 	lsr.w	r3, r2, r6
 80204ca:	40f1      	lsrs	r1, r6
 80204cc:	431f      	orrs	r7, r3
 80204ce:	e9c5 7100 	strd	r7, r1, [r5]
 80204d2:	2600      	movs	r6, #0
 80204d4:	4631      	mov	r1, r6
 80204d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204da:	f1c2 0320 	rsb	r3, r2, #32
 80204de:	40d8      	lsrs	r0, r3
 80204e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80204e4:	fa21 f303 	lsr.w	r3, r1, r3
 80204e8:	4091      	lsls	r1, r2
 80204ea:	4301      	orrs	r1, r0
 80204ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80204f0:	fa1f fe8c 	uxth.w	lr, ip
 80204f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80204f8:	fb07 3610 	mls	r6, r7, r0, r3
 80204fc:	0c0b      	lsrs	r3, r1, #16
 80204fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020502:	fb00 f60e 	mul.w	r6, r0, lr
 8020506:	429e      	cmp	r6, r3
 8020508:	fa04 f402 	lsl.w	r4, r4, r2
 802050c:	d908      	bls.n	8020520 <__udivmoddi4+0x260>
 802050e:	eb1c 0303 	adds.w	r3, ip, r3
 8020512:	f100 38ff 	add.w	r8, r0, #4294967295
 8020516:	d22f      	bcs.n	8020578 <__udivmoddi4+0x2b8>
 8020518:	429e      	cmp	r6, r3
 802051a:	d92d      	bls.n	8020578 <__udivmoddi4+0x2b8>
 802051c:	3802      	subs	r0, #2
 802051e:	4463      	add	r3, ip
 8020520:	1b9b      	subs	r3, r3, r6
 8020522:	b289      	uxth	r1, r1
 8020524:	fbb3 f6f7 	udiv	r6, r3, r7
 8020528:	fb07 3316 	mls	r3, r7, r6, r3
 802052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020530:	fb06 f30e 	mul.w	r3, r6, lr
 8020534:	428b      	cmp	r3, r1
 8020536:	d908      	bls.n	802054a <__udivmoddi4+0x28a>
 8020538:	eb1c 0101 	adds.w	r1, ip, r1
 802053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8020540:	d216      	bcs.n	8020570 <__udivmoddi4+0x2b0>
 8020542:	428b      	cmp	r3, r1
 8020544:	d914      	bls.n	8020570 <__udivmoddi4+0x2b0>
 8020546:	3e02      	subs	r6, #2
 8020548:	4461      	add	r1, ip
 802054a:	1ac9      	subs	r1, r1, r3
 802054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020550:	e738      	b.n	80203c4 <__udivmoddi4+0x104>
 8020552:	462e      	mov	r6, r5
 8020554:	4628      	mov	r0, r5
 8020556:	e705      	b.n	8020364 <__udivmoddi4+0xa4>
 8020558:	4606      	mov	r6, r0
 802055a:	e6e3      	b.n	8020324 <__udivmoddi4+0x64>
 802055c:	4618      	mov	r0, r3
 802055e:	e6f8      	b.n	8020352 <__udivmoddi4+0x92>
 8020560:	454b      	cmp	r3, r9
 8020562:	d2a9      	bcs.n	80204b8 <__udivmoddi4+0x1f8>
 8020564:	ebb9 0802 	subs.w	r8, r9, r2
 8020568:	eb64 0e0c 	sbc.w	lr, r4, ip
 802056c:	3801      	subs	r0, #1
 802056e:	e7a3      	b.n	80204b8 <__udivmoddi4+0x1f8>
 8020570:	4646      	mov	r6, r8
 8020572:	e7ea      	b.n	802054a <__udivmoddi4+0x28a>
 8020574:	4620      	mov	r0, r4
 8020576:	e794      	b.n	80204a2 <__udivmoddi4+0x1e2>
 8020578:	4640      	mov	r0, r8
 802057a:	e7d1      	b.n	8020520 <__udivmoddi4+0x260>
 802057c:	46d0      	mov	r8, sl
 802057e:	e77b      	b.n	8020478 <__udivmoddi4+0x1b8>
 8020580:	3b02      	subs	r3, #2
 8020582:	4461      	add	r1, ip
 8020584:	e732      	b.n	80203ec <__udivmoddi4+0x12c>
 8020586:	4630      	mov	r0, r6
 8020588:	e709      	b.n	802039e <__udivmoddi4+0xde>
 802058a:	4464      	add	r4, ip
 802058c:	3802      	subs	r0, #2
 802058e:	e742      	b.n	8020416 <__udivmoddi4+0x156>

08020590 <__aeabi_idiv0>:
 8020590:	4770      	bx	lr
 8020592:	bf00      	nop

08020594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020598:	f002 ffce 	bl	8023538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802059c:	f000 f88c 	bl	80206b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80205a0:	f000 fb26 	bl	8020bf0 <MX_GPIO_Init>
  MX_CRC_Init();
 80205a4:	f000 f8f4 	bl	8020790 <MX_CRC_Init>
  MX_DMA2D_Init();
 80205a8:	f000 f906 	bl	80207b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80205ac:	f000 fad0 	bl	8020b50 <MX_FMC_Init>
  MX_I2C3_Init();
 80205b0:	f000 f934 	bl	802081c <MX_I2C3_Init>
  MX_LTDC_Init();
 80205b4:	f000 f972 	bl	802089c <MX_LTDC_Init>
  MX_SPI5_Init();
 80205b8:	f000 f9f0 	bl	802099c <MX_SPI5_Init>
  MX_TIM1_Init();
 80205bc:	f000 fa24 	bl	8020a08 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80205c0:	f000 fa9c 	bl	8020afc <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80205c4:	f00d f9d0 	bl	802d968 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80205c8:	f000 fa6e 	bl	8020aa8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  // Start Receiving data from modem
  HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 80205cc:	2201      	movs	r2, #1
 80205ce:	4930      	ldr	r1, [pc, #192]	; (8020690 <main+0xfc>)
 80205d0:	4830      	ldr	r0, [pc, #192]	; (8020694 <main+0x100>)
 80205d2:	f009 f942 	bl	802985a <HAL_UART_Receive_IT>


  sprintf(buffch,"Starting Application (%d.%d)", BL_Version[0], BL_Version[1]);
 80205d6:	2300      	movs	r3, #0
 80205d8:	461a      	mov	r2, r3
 80205da:	2303      	movs	r3, #3
 80205dc:	492e      	ldr	r1, [pc, #184]	; (8020698 <main+0x104>)
 80205de:	482f      	ldr	r0, [pc, #188]	; (802069c <main+0x108>)
 80205e0:	f00d fe90 	bl	802e304 <siprintf>
  printf("Starting Application (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80205e4:	2300      	movs	r3, #0
 80205e6:	2203      	movs	r2, #3
 80205e8:	4619      	mov	r1, r3
 80205ea:	482d      	ldr	r0, [pc, #180]	; (80206a0 <main+0x10c>)
 80205ec:	f00d fdec 	bl	802e1c8 <iprintf>


  /*##-1- LCD Initialization #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 80205f0:	f002 f91c 	bl	802282c <BSP_LCD_Init>

  /* Layer2 Init */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80205f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80205f8:	2001      	movs	r0, #1
 80205fa:	f002 f999 	bl	8022930 <BSP_LCD_LayerDefaultInit>
  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80205fe:	2001      	movs	r0, #1
 8020600:	f002 f9fa 	bl	80229f8 <BSP_LCD_SelectLayer>
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020604:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020608:	f002 faa4 	bl	8022b54 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_BLACK);
 802060c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8020610:	2001      	movs	r0, #1
 8020612:	f002 fa3f 	bl	8022a94 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8020616:	2100      	movs	r1, #0
 8020618:	2001      	movs	r0, #1
 802061a:	f002 f9fd 	bl	8022a18 <BSP_LCD_SetLayerVisible>

  /* Layer1 Init */
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 802061e:	4921      	ldr	r1, [pc, #132]	; (80206a4 <main+0x110>)
 8020620:	2000      	movs	r0, #0
 8020622:	f002 f985 	bl	8022930 <BSP_LCD_LayerDefaultInit>

  /* Set Foreground Layer */
  BSP_LCD_SelectLayer(0);
 8020626:	2000      	movs	r0, #0
 8020628:	f002 f9e6 	bl	80229f8 <BSP_LCD_SelectLayer>

  /* Enable The LCD */
  BSP_LCD_DisplayOn();
 802062c:	f002 fbbc 	bl	8022da8 <BSP_LCD_DisplayOn>

  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8020630:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8020634:	f002 fa8e 	bl	8022b54 <BSP_LCD_Clear>


  /* Set Touchscreen Demo description */

  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8020638:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802063c:	f002 fa56 	bl	8022aec <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8020640:	4819      	ldr	r0, [pc, #100]	; (80206a8 <main+0x114>)
 8020642:	f002 fa3b 	bl	8022abc <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font12);
 8020646:	4819      	ldr	r0, [pc, #100]	; (80206ac <main+0x118>)
 8020648:	f002 fa6a 	bl	8022b20 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)buffch, CENTER_MODE);
 802064c:	2301      	movs	r3, #1
 802064e:	4a13      	ldr	r2, [pc, #76]	; (802069c <main+0x108>)
 8020650:	2100      	movs	r1, #0
 8020652:	2000      	movs	r0, #0
 8020654:	f002 faea 	bl	8022c2c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8020658:	f04f 30ff 	mov.w	r0, #4294967295
 802065c:	f002 fa2e 	bl	8022abc <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"APPLICATION", CENTER_MODE);
 8020660:	f002 f95a 	bl	8022918 <BSP_LCD_GetYSize>
 8020664:	4603      	mov	r3, r0
 8020666:	085b      	lsrs	r3, r3, #1
 8020668:	b29b      	uxth	r3, r3
 802066a:	3b0c      	subs	r3, #12
 802066c:	b299      	uxth	r1, r3
 802066e:	2301      	movs	r3, #1
 8020670:	4a0f      	ldr	r2, [pc, #60]	; (80206b0 <main+0x11c>)
 8020672:	2000      	movs	r0, #0
 8020674:	f002 fada 	bl	8022c2c <BSP_LCD_DisplayStringAt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8020678:	f00d f99c 	bl	802d9b4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 802067c:	2201      	movs	r2, #1
 802067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020682:	480c      	ldr	r0, [pc, #48]	; (80206b4 <main+0x120>)
 8020684:	f004 fc82 	bl	8024f8c <HAL_GPIO_WritePin>

    /* check serial communication process */
    serial_app();
 8020688:	f000 fc00 	bl	8020e8c <serial_app>
    MX_USB_HOST_Process();
 802068c:	e7f4      	b.n	8020678 <main+0xe4>
 802068e:	bf00      	nop
 8020690:	20000404 	.word	0x20000404
 8020694:	200002e4 	.word	0x200002e4
 8020698:	0802f3e0 	.word	0x0802f3e0
 802069c:	200003a0 	.word	0x200003a0
 80206a0:	0802f400 	.word	0x0802f400
 80206a4:	d0130000 	.word	0xd0130000
 80206a8:	ffff0000 	.word	0xffff0000
 80206ac:	2000004c 	.word	0x2000004c
 80206b0:	0802f420 	.word	0x0802f420
 80206b4:	40021800 	.word	0x40021800

080206b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80206b8:	b580      	push	{r7, lr}
 80206ba:	b094      	sub	sp, #80	; 0x50
 80206bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80206be:	f107 0320 	add.w	r3, r7, #32
 80206c2:	2230      	movs	r2, #48	; 0x30
 80206c4:	2100      	movs	r1, #0
 80206c6:	4618      	mov	r0, r3
 80206c8:	f00d fc96 	bl	802dff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80206cc:	f107 030c 	add.w	r3, r7, #12
 80206d0:	2200      	movs	r2, #0
 80206d2:	601a      	str	r2, [r3, #0]
 80206d4:	605a      	str	r2, [r3, #4]
 80206d6:	609a      	str	r2, [r3, #8]
 80206d8:	60da      	str	r2, [r3, #12]
 80206da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80206dc:	2300      	movs	r3, #0
 80206de:	60bb      	str	r3, [r7, #8]
 80206e0:	4b29      	ldr	r3, [pc, #164]	; (8020788 <SystemClock_Config+0xd0>)
 80206e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206e4:	4a28      	ldr	r2, [pc, #160]	; (8020788 <SystemClock_Config+0xd0>)
 80206e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80206ea:	6413      	str	r3, [r2, #64]	; 0x40
 80206ec:	4b26      	ldr	r3, [pc, #152]	; (8020788 <SystemClock_Config+0xd0>)
 80206ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80206f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80206f4:	60bb      	str	r3, [r7, #8]
 80206f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80206f8:	2300      	movs	r3, #0
 80206fa:	607b      	str	r3, [r7, #4]
 80206fc:	4b23      	ldr	r3, [pc, #140]	; (802078c <SystemClock_Config+0xd4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8020704:	4a21      	ldr	r2, [pc, #132]	; (802078c <SystemClock_Config+0xd4>)
 8020706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802070a:	6013      	str	r3, [r2, #0]
 802070c:	4b1f      	ldr	r3, [pc, #124]	; (802078c <SystemClock_Config+0xd4>)
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8020714:	607b      	str	r3, [r7, #4]
 8020716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020718:	2301      	movs	r3, #1
 802071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 802071c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020722:	2302      	movs	r3, #2
 8020724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 802072c:	2310      	movs	r3, #16
 802072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8020730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8020734:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020736:	2302      	movs	r3, #2
 8020738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 802073a:	2303      	movs	r3, #3
 802073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802073e:	f107 0320 	add.w	r3, r7, #32
 8020742:	4618      	mov	r0, r3
 8020744:	f006 fe2e 	bl	80273a4 <HAL_RCC_OscConfig>
 8020748:	4603      	mov	r3, r0
 802074a:	2b00      	cmp	r3, #0
 802074c:	d001      	beq.n	8020752 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 802074e:	f000 fb97 	bl	8020e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020752:	230f      	movs	r3, #15
 8020754:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020756:	2302      	movs	r3, #2
 8020758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802075a:	2300      	movs	r3, #0
 802075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802075e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8020764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 802076a:	f107 030c 	add.w	r3, r7, #12
 802076e:	2102      	movs	r1, #2
 8020770:	4618      	mov	r0, r3
 8020772:	f007 f88f 	bl	8027894 <HAL_RCC_ClockConfig>
 8020776:	4603      	mov	r3, r0
 8020778:	2b00      	cmp	r3, #0
 802077a:	d001      	beq.n	8020780 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 802077c:	f000 fb80 	bl	8020e80 <Error_Handler>
  }
}
 8020780:	bf00      	nop
 8020782:	3750      	adds	r7, #80	; 0x50
 8020784:	46bd      	mov	sp, r7
 8020786:	bd80      	pop	{r7, pc}
 8020788:	40023800 	.word	0x40023800
 802078c:	40007000 	.word	0x40007000

08020790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8020794:	4b06      	ldr	r3, [pc, #24]	; (80207b0 <MX_CRC_Init+0x20>)
 8020796:	4a07      	ldr	r2, [pc, #28]	; (80207b4 <MX_CRC_Init+0x24>)
 8020798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 802079a:	4805      	ldr	r0, [pc, #20]	; (80207b0 <MX_CRC_Init+0x20>)
 802079c:	f003 f82f 	bl	80237fe <HAL_CRC_Init>
 80207a0:	4603      	mov	r3, r0
 80207a2:	2b00      	cmp	r3, #0
 80207a4:	d001      	beq.n	80207aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80207a6:	f000 fb6b 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80207aa:	bf00      	nop
 80207ac:	bd80      	pop	{r7, pc}
 80207ae:	bf00      	nop
 80207b0:	20000100 	.word	0x20000100
 80207b4:	40023000 	.word	0x40023000

080207b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80207b8:	b580      	push	{r7, lr}
 80207ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80207bc:	4b15      	ldr	r3, [pc, #84]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207be:	4a16      	ldr	r2, [pc, #88]	; (8020818 <MX_DMA2D_Init+0x60>)
 80207c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80207c2:	4b14      	ldr	r3, [pc, #80]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80207c8:	4b12      	ldr	r3, [pc, #72]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ca:	2200      	movs	r2, #0
 80207cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80207ce:	4b11      	ldr	r3, [pc, #68]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d0:	2200      	movs	r2, #0
 80207d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80207d4:	4b0f      	ldr	r3, [pc, #60]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207d6:	2200      	movs	r2, #0
 80207d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80207da:	4b0e      	ldr	r3, [pc, #56]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207dc:	2200      	movs	r2, #0
 80207de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80207e0:	4b0c      	ldr	r3, [pc, #48]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e2:	2200      	movs	r2, #0
 80207e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80207e6:	4b0b      	ldr	r3, [pc, #44]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207e8:	2200      	movs	r2, #0
 80207ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80207ec:	4809      	ldr	r0, [pc, #36]	; (8020814 <MX_DMA2D_Init+0x5c>)
 80207ee:	f003 fa73 	bl	8023cd8 <HAL_DMA2D_Init>
 80207f2:	4603      	mov	r3, r0
 80207f4:	2b00      	cmp	r3, #0
 80207f6:	d001      	beq.n	80207fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80207f8:	f000 fb42 	bl	8020e80 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80207fc:	2101      	movs	r1, #1
 80207fe:	4805      	ldr	r0, [pc, #20]	; (8020814 <MX_DMA2D_Init+0x5c>)
 8020800:	f003 fcd8 	bl	80241b4 <HAL_DMA2D_ConfigLayer>
 8020804:	4603      	mov	r3, r0
 8020806:	2b00      	cmp	r3, #0
 8020808:	d001      	beq.n	802080e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 802080a:	f000 fb39 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 802080e:	bf00      	nop
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop
 8020814:	20000108 	.word	0x20000108
 8020818:	4002b000 	.word	0x4002b000

0802081c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 802081c:	b580      	push	{r7, lr}
 802081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8020820:	4b1b      	ldr	r3, [pc, #108]	; (8020890 <MX_I2C3_Init+0x74>)
 8020822:	4a1c      	ldr	r2, [pc, #112]	; (8020894 <MX_I2C3_Init+0x78>)
 8020824:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8020826:	4b1a      	ldr	r3, [pc, #104]	; (8020890 <MX_I2C3_Init+0x74>)
 8020828:	4a1b      	ldr	r2, [pc, #108]	; (8020898 <MX_I2C3_Init+0x7c>)
 802082a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 802082c:	4b18      	ldr	r3, [pc, #96]	; (8020890 <MX_I2C3_Init+0x74>)
 802082e:	2200      	movs	r2, #0
 8020830:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8020832:	4b17      	ldr	r3, [pc, #92]	; (8020890 <MX_I2C3_Init+0x74>)
 8020834:	2200      	movs	r2, #0
 8020836:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020838:	4b15      	ldr	r3, [pc, #84]	; (8020890 <MX_I2C3_Init+0x74>)
 802083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 802083e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020840:	4b13      	ldr	r3, [pc, #76]	; (8020890 <MX_I2C3_Init+0x74>)
 8020842:	2200      	movs	r2, #0
 8020844:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8020846:	4b12      	ldr	r3, [pc, #72]	; (8020890 <MX_I2C3_Init+0x74>)
 8020848:	2200      	movs	r2, #0
 802084a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802084c:	4b10      	ldr	r3, [pc, #64]	; (8020890 <MX_I2C3_Init+0x74>)
 802084e:	2200      	movs	r2, #0
 8020850:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020852:	4b0f      	ldr	r3, [pc, #60]	; (8020890 <MX_I2C3_Init+0x74>)
 8020854:	2200      	movs	r2, #0
 8020856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8020858:	480d      	ldr	r0, [pc, #52]	; (8020890 <MX_I2C3_Init+0x74>)
 802085a:	f005 ffd3 	bl	8026804 <HAL_I2C_Init>
 802085e:	4603      	mov	r3, r0
 8020860:	2b00      	cmp	r3, #0
 8020862:	d001      	beq.n	8020868 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8020864:	f000 fb0c 	bl	8020e80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020868:	2100      	movs	r1, #0
 802086a:	4809      	ldr	r0, [pc, #36]	; (8020890 <MX_I2C3_Init+0x74>)
 802086c:	f006 f90e 	bl	8026a8c <HAL_I2CEx_ConfigAnalogFilter>
 8020870:	4603      	mov	r3, r0
 8020872:	2b00      	cmp	r3, #0
 8020874:	d001      	beq.n	802087a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8020876:	f000 fb03 	bl	8020e80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 802087a:	2100      	movs	r1, #0
 802087c:	4804      	ldr	r0, [pc, #16]	; (8020890 <MX_I2C3_Init+0x74>)
 802087e:	f006 f941 	bl	8026b04 <HAL_I2CEx_ConfigDigitalFilter>
 8020882:	4603      	mov	r3, r0
 8020884:	2b00      	cmp	r3, #0
 8020886:	d001      	beq.n	802088c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8020888:	f000 fafa 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 802088c:	bf00      	nop
 802088e:	bd80      	pop	{r7, pc}
 8020890:	20000148 	.word	0x20000148
 8020894:	40005c00 	.word	0x40005c00
 8020898:	000186a0 	.word	0x000186a0

0802089c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b08e      	sub	sp, #56	; 0x38
 80208a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80208a2:	1d3b      	adds	r3, r7, #4
 80208a4:	2234      	movs	r2, #52	; 0x34
 80208a6:	2100      	movs	r1, #0
 80208a8:	4618      	mov	r0, r3
 80208aa:	f00d fba5 	bl	802dff8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80208ae:	4b39      	ldr	r3, [pc, #228]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b0:	4a39      	ldr	r2, [pc, #228]	; (8020998 <MX_LTDC_Init+0xfc>)
 80208b2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80208b4:	4b37      	ldr	r3, [pc, #220]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208b6:	2200      	movs	r2, #0
 80208b8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80208ba:	4b36      	ldr	r3, [pc, #216]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208bc:	2200      	movs	r2, #0
 80208be:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80208c0:	4b34      	ldr	r3, [pc, #208]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c2:	2200      	movs	r2, #0
 80208c4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80208c6:	4b33      	ldr	r3, [pc, #204]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208c8:	2200      	movs	r2, #0
 80208ca:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80208cc:	4b31      	ldr	r3, [pc, #196]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ce:	2209      	movs	r2, #9
 80208d0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80208d2:	4b30      	ldr	r3, [pc, #192]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208d4:	2201      	movs	r2, #1
 80208d6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80208d8:	4b2e      	ldr	r3, [pc, #184]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208da:	221d      	movs	r2, #29
 80208dc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80208de:	4b2d      	ldr	r3, [pc, #180]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e0:	2203      	movs	r2, #3
 80208e2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80208e4:	4b2b      	ldr	r3, [pc, #172]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208e6:	f240 120d 	movw	r2, #269	; 0x10d
 80208ea:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80208ec:	4b29      	ldr	r3, [pc, #164]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208ee:	f240 1243 	movw	r2, #323	; 0x143
 80208f2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80208f4:	4b27      	ldr	r3, [pc, #156]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208f6:	f240 1217 	movw	r2, #279	; 0x117
 80208fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80208fc:	4b25      	ldr	r3, [pc, #148]	; (8020994 <MX_LTDC_Init+0xf8>)
 80208fe:	f240 1247 	movw	r2, #327	; 0x147
 8020902:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8020904:	4b23      	ldr	r3, [pc, #140]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020906:	2200      	movs	r2, #0
 8020908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 802090c:	4b21      	ldr	r3, [pc, #132]	; (8020994 <MX_LTDC_Init+0xf8>)
 802090e:	2200      	movs	r2, #0
 8020910:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020914:	4b1f      	ldr	r3, [pc, #124]	; (8020994 <MX_LTDC_Init+0xf8>)
 8020916:	2200      	movs	r2, #0
 8020918:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802091c:	481d      	ldr	r0, [pc, #116]	; (8020994 <MX_LTDC_Init+0xf8>)
 802091e:	f006 f931 	bl	8026b84 <HAL_LTDC_Init>
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8020928:	f000 faaa 	bl	8020e80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 802092c:	2300      	movs	r3, #0
 802092e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8020930:	23f0      	movs	r3, #240	; 0xf0
 8020932:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8020934:	2300      	movs	r3, #0
 8020936:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8020938:	f44f 73a0 	mov.w	r3, #320	; 0x140
 802093c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802093e:	2302      	movs	r3, #2
 8020940:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8020942:	23ff      	movs	r3, #255	; 0xff
 8020944:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8020946:	2300      	movs	r3, #0
 8020948:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 802094a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802094e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020950:	2307      	movs	r3, #7
 8020952:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8020954:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8020958:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 802095a:	23f0      	movs	r3, #240	; 0xf0
 802095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 802095e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8020962:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8020964:	2300      	movs	r3, #0
 8020966:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 802096a:	2300      	movs	r3, #0
 802096c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8020970:	2300      	movs	r3, #0
 8020972:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020976:	1d3b      	adds	r3, r7, #4
 8020978:	2200      	movs	r2, #0
 802097a:	4619      	mov	r1, r3
 802097c:	4805      	ldr	r0, [pc, #20]	; (8020994 <MX_LTDC_Init+0xf8>)
 802097e:	f006 fa93 	bl	8026ea8 <HAL_LTDC_ConfigLayer>
 8020982:	4603      	mov	r3, r0
 8020984:	2b00      	cmp	r3, #0
 8020986:	d001      	beq.n	802098c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8020988:	f000 fa7a 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 802098c:	bf00      	nop
 802098e:	3738      	adds	r7, #56	; 0x38
 8020990:	46bd      	mov	sp, r7
 8020992:	bd80      	pop	{r7, pc}
 8020994:	2000019c 	.word	0x2000019c
 8020998:	40016800 	.word	0x40016800

0802099c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 802099c:	b580      	push	{r7, lr}
 802099e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80209a0:	4b17      	ldr	r3, [pc, #92]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a2:	4a18      	ldr	r2, [pc, #96]	; (8020a04 <MX_SPI5_Init+0x68>)
 80209a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80209a6:	4b16      	ldr	r3, [pc, #88]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80209ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80209ae:	4b14      	ldr	r3, [pc, #80]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b0:	2200      	movs	r2, #0
 80209b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80209b4:	4b12      	ldr	r3, [pc, #72]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209b6:	2200      	movs	r2, #0
 80209b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80209ba:	4b11      	ldr	r3, [pc, #68]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209bc:	2200      	movs	r2, #0
 80209be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80209c0:	4b0f      	ldr	r3, [pc, #60]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c2:	2200      	movs	r2, #0
 80209c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80209c6:	4b0e      	ldr	r3, [pc, #56]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80209cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80209ce:	4b0c      	ldr	r3, [pc, #48]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d0:	2218      	movs	r2, #24
 80209d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80209d4:	4b0a      	ldr	r3, [pc, #40]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209d6:	2200      	movs	r2, #0
 80209d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209dc:	2200      	movs	r2, #0
 80209de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80209e0:	4b07      	ldr	r3, [pc, #28]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e2:	2200      	movs	r2, #0
 80209e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80209e6:	4b06      	ldr	r3, [pc, #24]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209e8:	220a      	movs	r2, #10
 80209ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80209ec:	4804      	ldr	r0, [pc, #16]	; (8020a00 <MX_SPI5_Init+0x64>)
 80209ee:	f007 fbf4 	bl	80281da <HAL_SPI_Init>
 80209f2:	4603      	mov	r3, r0
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d001      	beq.n	80209fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80209f8:	f000 fa42 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80209fc:	bf00      	nop
 80209fe:	bd80      	pop	{r7, pc}
 8020a00:	20000244 	.word	0x20000244
 8020a04:	40015000 	.word	0x40015000

08020a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b086      	sub	sp, #24
 8020a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8020a0e:	f107 0308 	add.w	r3, r7, #8
 8020a12:	2200      	movs	r2, #0
 8020a14:	601a      	str	r2, [r3, #0]
 8020a16:	605a      	str	r2, [r3, #4]
 8020a18:	609a      	str	r2, [r3, #8]
 8020a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020a1c:	463b      	mov	r3, r7
 8020a1e:	2200      	movs	r2, #0
 8020a20:	601a      	str	r2, [r3, #0]
 8020a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8020a24:	4b1e      	ldr	r3, [pc, #120]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a26:	4a1f      	ldr	r2, [pc, #124]	; (8020aa4 <MX_TIM1_Init+0x9c>)
 8020a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8020a2a:	4b1d      	ldr	r3, [pc, #116]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020a30:	4b1b      	ldr	r3, [pc, #108]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a32:	2200      	movs	r2, #0
 8020a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8020a36:	4b1a      	ldr	r3, [pc, #104]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8020a3e:	4b18      	ldr	r3, [pc, #96]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a40:	2200      	movs	r2, #0
 8020a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8020a44:	4b16      	ldr	r3, [pc, #88]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a46:	2200      	movs	r2, #0
 8020a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020a4a:	4b15      	ldr	r3, [pc, #84]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a4c:	2200      	movs	r2, #0
 8020a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8020a50:	4813      	ldr	r0, [pc, #76]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a52:	f008 f9a1 	bl	8028d98 <HAL_TIM_Base_Init>
 8020a56:	4603      	mov	r3, r0
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	d001      	beq.n	8020a60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8020a5c:	f000 fa10 	bl	8020e80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8020a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8020a66:	f107 0308 	add.w	r3, r7, #8
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	480c      	ldr	r0, [pc, #48]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a6e:	f008 fb5b 	bl	8029128 <HAL_TIM_ConfigClockSource>
 8020a72:	4603      	mov	r3, r0
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d001      	beq.n	8020a7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8020a78:	f000 fa02 	bl	8020e80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020a7c:	2300      	movs	r3, #0
 8020a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020a80:	2300      	movs	r3, #0
 8020a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8020a84:	463b      	mov	r3, r7
 8020a86:	4619      	mov	r1, r3
 8020a88:	4805      	ldr	r0, [pc, #20]	; (8020aa0 <MX_TIM1_Init+0x98>)
 8020a8a:	f008 fd77 	bl	802957c <HAL_TIMEx_MasterConfigSynchronization>
 8020a8e:	4603      	mov	r3, r0
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	d001      	beq.n	8020a98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8020a94:	f000 f9f4 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8020a98:	bf00      	nop
 8020a9a:	3718      	adds	r7, #24
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	2000029c 	.word	0x2000029c
 8020aa4:	40010000 	.word	0x40010000

08020aa8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8020aac:	4b11      	ldr	r3, [pc, #68]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020aae:	4a12      	ldr	r2, [pc, #72]	; (8020af8 <MX_UART5_Init+0x50>)
 8020ab0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8020ab2:	4b10      	ldr	r3, [pc, #64]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ab4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8020ab8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8020aba:	4b0e      	ldr	r3, [pc, #56]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020abc:	2200      	movs	r2, #0
 8020abe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8020ac0:	4b0c      	ldr	r3, [pc, #48]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac2:	2200      	movs	r2, #0
 8020ac4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8020ac6:	4b0b      	ldr	r3, [pc, #44]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ac8:	2200      	movs	r2, #0
 8020aca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8020acc:	4b09      	ldr	r3, [pc, #36]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ace:	220c      	movs	r2, #12
 8020ad0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020ad2:	4b08      	ldr	r3, [pc, #32]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ad4:	2200      	movs	r2, #0
 8020ad6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8020ad8:	4b06      	ldr	r3, [pc, #24]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ada:	2200      	movs	r2, #0
 8020adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8020ade:	4805      	ldr	r0, [pc, #20]	; (8020af4 <MX_UART5_Init+0x4c>)
 8020ae0:	f008 fddc 	bl	802969c <HAL_UART_Init>
 8020ae4:	4603      	mov	r3, r0
 8020ae6:	2b00      	cmp	r3, #0
 8020ae8:	d001      	beq.n	8020aee <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8020aea:	f000 f9c9 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8020aee:	bf00      	nop
 8020af0:	bd80      	pop	{r7, pc}
 8020af2:	bf00      	nop
 8020af4:	200002e4 	.word	0x200002e4
 8020af8:	40005000 	.word	0x40005000

08020afc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8020afc:	b580      	push	{r7, lr}
 8020afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8020b00:	4b11      	ldr	r3, [pc, #68]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b02:	4a12      	ldr	r2, [pc, #72]	; (8020b4c <MX_USART1_UART_Init+0x50>)
 8020b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8020b06:	4b10      	ldr	r3, [pc, #64]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8020b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020b0e:	4b0e      	ldr	r3, [pc, #56]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b10:	2200      	movs	r2, #0
 8020b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8020b14:	4b0c      	ldr	r3, [pc, #48]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b16:	2200      	movs	r2, #0
 8020b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8020b1a:	4b0b      	ldr	r3, [pc, #44]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b1c:	2200      	movs	r2, #0
 8020b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8020b20:	4b09      	ldr	r3, [pc, #36]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b22:	220c      	movs	r2, #12
 8020b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8020b26:	4b08      	ldr	r3, [pc, #32]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b28:	2200      	movs	r2, #0
 8020b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8020b2c:	4b06      	ldr	r3, [pc, #24]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b2e:	2200      	movs	r2, #0
 8020b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020b32:	4805      	ldr	r0, [pc, #20]	; (8020b48 <MX_USART1_UART_Init+0x4c>)
 8020b34:	f008 fdb2 	bl	802969c <HAL_UART_Init>
 8020b38:	4603      	mov	r3, r0
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d001      	beq.n	8020b42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8020b3e:	f000 f99f 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8020b42:	bf00      	nop
 8020b44:	bd80      	pop	{r7, pc}
 8020b46:	bf00      	nop
 8020b48:	20000328 	.word	0x20000328
 8020b4c:	40011000 	.word	0x40011000

08020b50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8020b50:	b580      	push	{r7, lr}
 8020b52:	b088      	sub	sp, #32
 8020b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8020b56:	1d3b      	adds	r3, r7, #4
 8020b58:	2200      	movs	r2, #0
 8020b5a:	601a      	str	r2, [r3, #0]
 8020b5c:	605a      	str	r2, [r3, #4]
 8020b5e:	609a      	str	r2, [r3, #8]
 8020b60:	60da      	str	r2, [r3, #12]
 8020b62:	611a      	str	r2, [r3, #16]
 8020b64:	615a      	str	r2, [r3, #20]
 8020b66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8020b68:	4b1f      	ldr	r3, [pc, #124]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b6a:	4a20      	ldr	r2, [pc, #128]	; (8020bec <MX_FMC_Init+0x9c>)
 8020b6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8020b6e:	4b1e      	ldr	r3, [pc, #120]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b70:	2201      	movs	r2, #1
 8020b72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8020b74:	4b1c      	ldr	r3, [pc, #112]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b76:	2200      	movs	r2, #0
 8020b78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8020b7a:	4b1b      	ldr	r3, [pc, #108]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b7c:	2204      	movs	r2, #4
 8020b7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8020b80:	4b19      	ldr	r3, [pc, #100]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b82:	2210      	movs	r2, #16
 8020b84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8020b86:	4b18      	ldr	r3, [pc, #96]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b88:	2240      	movs	r2, #64	; 0x40
 8020b8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8020b8c:	4b16      	ldr	r3, [pc, #88]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b8e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8020b92:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8020b94:	4b14      	ldr	r3, [pc, #80]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b96:	2200      	movs	r2, #0
 8020b98:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8020b9a:	4b13      	ldr	r3, [pc, #76]	; (8020be8 <MX_FMC_Init+0x98>)
 8020b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ba0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8020ba2:	4b11      	ldr	r3, [pc, #68]	; (8020be8 <MX_FMC_Init+0x98>)
 8020ba4:	2200      	movs	r2, #0
 8020ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8020ba8:	4b0f      	ldr	r3, [pc, #60]	; (8020be8 <MX_FMC_Init+0x98>)
 8020baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8020bae:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8020bb0:	2302      	movs	r3, #2
 8020bb2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8020bb4:	2307      	movs	r3, #7
 8020bb6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8020bb8:	2304      	movs	r3, #4
 8020bba:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8020bbc:	2307      	movs	r3, #7
 8020bbe:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8020bc0:	2303      	movs	r3, #3
 8020bc2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8020bc4:	2302      	movs	r3, #2
 8020bc6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8020bc8:	2302      	movs	r3, #2
 8020bca:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8020bcc:	1d3b      	adds	r3, r7, #4
 8020bce:	4619      	mov	r1, r3
 8020bd0:	4805      	ldr	r0, [pc, #20]	; (8020be8 <MX_FMC_Init+0x98>)
 8020bd2:	f007 fa71 	bl	80280b8 <HAL_SDRAM_Init>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d001      	beq.n	8020be0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8020bdc:	f000 f950 	bl	8020e80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8020be0:	bf00      	nop
 8020be2:	3720      	adds	r7, #32
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	2000036c 	.word	0x2000036c
 8020bec:	a0000140 	.word	0xa0000140

08020bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	b08e      	sub	sp, #56	; 0x38
 8020bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020bfa:	2200      	movs	r2, #0
 8020bfc:	601a      	str	r2, [r3, #0]
 8020bfe:	605a      	str	r2, [r3, #4]
 8020c00:	609a      	str	r2, [r3, #8]
 8020c02:	60da      	str	r2, [r3, #12]
 8020c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020c06:	2300      	movs	r3, #0
 8020c08:	623b      	str	r3, [r7, #32]
 8020c0a:	4b85      	ldr	r3, [pc, #532]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c0e:	4a84      	ldr	r2, [pc, #528]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c10:	f043 0304 	orr.w	r3, r3, #4
 8020c14:	6313      	str	r3, [r2, #48]	; 0x30
 8020c16:	4b82      	ldr	r3, [pc, #520]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c1a:	f003 0304 	and.w	r3, r3, #4
 8020c1e:	623b      	str	r3, [r7, #32]
 8020c20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8020c22:	2300      	movs	r3, #0
 8020c24:	61fb      	str	r3, [r7, #28]
 8020c26:	4b7e      	ldr	r3, [pc, #504]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c2a:	4a7d      	ldr	r2, [pc, #500]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c2c:	f043 0320 	orr.w	r3, r3, #32
 8020c30:	6313      	str	r3, [r2, #48]	; 0x30
 8020c32:	4b7b      	ldr	r3, [pc, #492]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c36:	f003 0320 	and.w	r3, r3, #32
 8020c3a:	61fb      	str	r3, [r7, #28]
 8020c3c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020c3e:	2300      	movs	r3, #0
 8020c40:	61bb      	str	r3, [r7, #24]
 8020c42:	4b77      	ldr	r3, [pc, #476]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c46:	4a76      	ldr	r2, [pc, #472]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8020c4e:	4b74      	ldr	r3, [pc, #464]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020c56:	61bb      	str	r3, [r7, #24]
 8020c58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	617b      	str	r3, [r7, #20]
 8020c5e:	4b70      	ldr	r3, [pc, #448]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c62:	4a6f      	ldr	r2, [pc, #444]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c64:	f043 0301 	orr.w	r3, r3, #1
 8020c68:	6313      	str	r3, [r2, #48]	; 0x30
 8020c6a:	4b6d      	ldr	r3, [pc, #436]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c6e:	f003 0301 	and.w	r3, r3, #1
 8020c72:	617b      	str	r3, [r7, #20]
 8020c74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020c76:	2300      	movs	r3, #0
 8020c78:	613b      	str	r3, [r7, #16]
 8020c7a:	4b69      	ldr	r3, [pc, #420]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c7e:	4a68      	ldr	r2, [pc, #416]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c80:	f043 0302 	orr.w	r3, r3, #2
 8020c84:	6313      	str	r3, [r2, #48]	; 0x30
 8020c86:	4b66      	ldr	r3, [pc, #408]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c8a:	f003 0302 	and.w	r3, r3, #2
 8020c8e:	613b      	str	r3, [r7, #16]
 8020c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8020c92:	2300      	movs	r3, #0
 8020c94:	60fb      	str	r3, [r7, #12]
 8020c96:	4b62      	ldr	r3, [pc, #392]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c9a:	4a61      	ldr	r2, [pc, #388]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8020ca2:	4b5f      	ldr	r3, [pc, #380]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020caa:	60fb      	str	r3, [r7, #12]
 8020cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020cae:	2300      	movs	r3, #0
 8020cb0:	60bb      	str	r3, [r7, #8]
 8020cb2:	4b5b      	ldr	r3, [pc, #364]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cb6:	4a5a      	ldr	r2, [pc, #360]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cb8:	f043 0310 	orr.w	r3, r3, #16
 8020cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8020cbe:	4b58      	ldr	r3, [pc, #352]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cc2:	f003 0310 	and.w	r3, r3, #16
 8020cc6:	60bb      	str	r3, [r7, #8]
 8020cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020cca:	2300      	movs	r3, #0
 8020ccc:	607b      	str	r3, [r7, #4]
 8020cce:	4b54      	ldr	r3, [pc, #336]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cd2:	4a53      	ldr	r2, [pc, #332]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cd4:	f043 0308 	orr.w	r3, r3, #8
 8020cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8020cda:	4b51      	ldr	r3, [pc, #324]	; (8020e20 <MX_GPIO_Init+0x230>)
 8020cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020cde:	f003 0308 	and.w	r3, r3, #8
 8020ce2:	607b      	str	r3, [r7, #4]
 8020ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8020ce6:	2200      	movs	r2, #0
 8020ce8:	2116      	movs	r1, #22
 8020cea:	484e      	ldr	r0, [pc, #312]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020cec:	f004 f94e 	bl	8024f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8020cf0:	2200      	movs	r2, #0
 8020cf2:	2180      	movs	r1, #128	; 0x80
 8020cf4:	484c      	ldr	r0, [pc, #304]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020cf6:	f004 f949 	bl	8024f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8020cfa:	2200      	movs	r2, #0
 8020cfc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8020d00:	484a      	ldr	r0, [pc, #296]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020d02:	f004 f943 	bl	8024f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8020d06:	2200      	movs	r2, #0
 8020d08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8020d0c:	4848      	ldr	r0, [pc, #288]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020d0e:	f004 f93d 	bl	8024f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8020d12:	2316      	movs	r3, #22
 8020d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d16:	2301      	movs	r3, #1
 8020d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d1e:	2300      	movs	r3, #0
 8020d20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d26:	4619      	mov	r1, r3
 8020d28:	483e      	ldr	r0, [pc, #248]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d2a:	f003 fe77 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8020d2e:	2301      	movs	r3, #1
 8020d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8020d32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8020d36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d38:	2300      	movs	r3, #0
 8020d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8020d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d40:	4619      	mov	r1, r3
 8020d42:	4839      	ldr	r0, [pc, #228]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d44:	f003 fe6a 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8020d48:	f248 0306 	movw	r3, #32774	; 0x8006
 8020d4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d4e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d54:	2300      	movs	r3, #0
 8020d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d5c:	4619      	mov	r1, r3
 8020d5e:	4832      	ldr	r0, [pc, #200]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d60:	f003 fe5c 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8020d64:	2380      	movs	r3, #128	; 0x80
 8020d66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020d70:	2300      	movs	r3, #0
 8020d72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8020d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d78:	4619      	mov	r1, r3
 8020d7a:	482b      	ldr	r0, [pc, #172]	; (8020e28 <MX_GPIO_Init+0x238>)
 8020d7c:	f003 fe4e 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8020d80:	2320      	movs	r3, #32
 8020d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8020d84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8020d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020d8a:	2300      	movs	r3, #0
 8020d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8020d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020d92:	4619      	mov	r1, r3
 8020d94:	4823      	ldr	r0, [pc, #140]	; (8020e24 <MX_GPIO_Init+0x234>)
 8020d96:	f003 fe41 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8020d9a:	2304      	movs	r3, #4
 8020d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020d9e:	2300      	movs	r3, #0
 8020da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020da2:	2300      	movs	r3, #0
 8020da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8020da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020daa:	4619      	mov	r1, r3
 8020dac:	4821      	ldr	r0, [pc, #132]	; (8020e34 <MX_GPIO_Init+0x244>)
 8020dae:	f003 fe35 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8020db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020db8:	2300      	movs	r3, #0
 8020dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dbc:	2300      	movs	r3, #0
 8020dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8020dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020dc4:	4619      	mov	r1, r3
 8020dc6:	4819      	ldr	r0, [pc, #100]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020dc8:	f003 fe28 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8020dcc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8020dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020dd6:	2300      	movs	r3, #0
 8020dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020dda:	2300      	movs	r3, #0
 8020ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8020dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020de2:	4619      	mov	r1, r3
 8020de4:	4811      	ldr	r0, [pc, #68]	; (8020e2c <MX_GPIO_Init+0x23c>)
 8020de6:	f003 fe19 	bl	8024a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8020dea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020df0:	2301      	movs	r3, #1
 8020df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020df4:	2300      	movs	r3, #0
 8020df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020e00:	4619      	mov	r1, r3
 8020e02:	480b      	ldr	r0, [pc, #44]	; (8020e30 <MX_GPIO_Init+0x240>)
 8020e04:	f003 fe0a 	bl	8024a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8020e08:	2200      	movs	r2, #0
 8020e0a:	2100      	movs	r1, #0
 8020e0c:	2006      	movs	r0, #6
 8020e0e:	f002 fcc8 	bl	80237a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8020e12:	2006      	movs	r0, #6
 8020e14:	f002 fce1 	bl	80237da <HAL_NVIC_EnableIRQ>

}
 8020e18:	bf00      	nop
 8020e1a:	3738      	adds	r7, #56	; 0x38
 8020e1c:	46bd      	mov	sp, r7
 8020e1e:	bd80      	pop	{r7, pc}
 8020e20:	40023800 	.word	0x40023800
 8020e24:	40020800 	.word	0x40020800
 8020e28:	40020000 	.word	0x40020000
 8020e2c:	40020c00 	.word	0x40020c00
 8020e30:	40021800 	.word	0x40021800
 8020e34:	40020400 	.word	0x40020400

08020e38 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8020e38:	b580      	push	{r7, lr}
 8020e3a:	b082      	sub	sp, #8
 8020e3c:	af00      	add	r7, sp, #0
 8020e3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020e40:	1d39      	adds	r1, r7, #4
 8020e42:	f04f 33ff 	mov.w	r3, #4294967295
 8020e46:	2201      	movs	r2, #1
 8020e48:	4803      	ldr	r0, [pc, #12]	; (8020e58 <__io_putchar+0x20>)
 8020e4a:	f008 fc74 	bl	8029736 <HAL_UART_Transmit>
	return ch;
 8020e4e:	687b      	ldr	r3, [r7, #4]
}
 8020e50:	4618      	mov	r0, r3
 8020e52:	3708      	adds	r7, #8
 8020e54:	46bd      	mov	sp, r7
 8020e56:	bd80      	pop	{r7, pc}
 8020e58:	20000328 	.word	0x20000328

08020e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020e5c:	b580      	push	{r7, lr}
 8020e5e:	b082      	sub	sp, #8
 8020e60:	af00      	add	r7, sp, #0
 8020e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	4a04      	ldr	r2, [pc, #16]	; (8020e7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8020e6a:	4293      	cmp	r3, r2
 8020e6c:	d101      	bne.n	8020e72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8020e6e:	f002 fb85 	bl	802357c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8020e72:	bf00      	nop
 8020e74:	3708      	adds	r7, #8
 8020e76:	46bd      	mov	sp, r7
 8020e78:	bd80      	pop	{r7, pc}
 8020e7a:	bf00      	nop
 8020e7c:	40001000 	.word	0x40001000

08020e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e80:	b480      	push	{r7}
 8020e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e84:	b672      	cpsid	i
}
 8020e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020e88:	e7fe      	b.n	8020e88 <Error_Handler+0x8>
	...

08020e8c <serial_app>:
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg );
void ser_ota_requsted();
uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength);


void serial_app(){
 8020e8c:	b580      	push	{r7, lr}
 8020e8e:	b082      	sub	sp, #8
 8020e90:	af00      	add	r7, sp, #0
	do{
		// no Byte received or chunk reception in progress
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e92:	4b23      	ldr	r3, [pc, #140]	; (8020f20 <serial_app+0x94>)
 8020e94:	785b      	ldrb	r3, [r3, #1]
 8020e96:	2b00      	cmp	r3, #0
 8020e98:	d03d      	beq.n	8020f16 <serial_app+0x8a>
			(hchunk.chunk_ready == CUN_BUSY)){
 8020e9a:	4b21      	ldr	r3, [pc, #132]	; (8020f20 <serial_app+0x94>)
 8020e9c:	785b      	ldrb	r3, [r3, #1]
		if( (hchunk.chunk_ready == CUN_EMPTY) ||
 8020e9e:	2b02      	cmp	r3, #2
 8020ea0:	d039      	beq.n	8020f16 <serial_app+0x8a>
			break;
		}

		SER_EX_ ret = SER_EX_OK;
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	71fb      	strb	r3, [r7, #7]

		// An Error occur in during receive chunk
		if(hchunk.chunk_ready == CUN_ERROR)
 8020ea6:	4b1e      	ldr	r3, [pc, #120]	; (8020f20 <serial_app+0x94>)
 8020ea8:	785b      	ldrb	r3, [r3, #1]
 8020eaa:	2b03      	cmp	r3, #3
 8020eac:	d105      	bne.n	8020eba <serial_app+0x2e>
		{
			printf("Receive Chunk Error\r\n");
 8020eae:	481d      	ldr	r0, [pc, #116]	; (8020f24 <serial_app+0x98>)
 8020eb0:	f00d fa10 	bl	802e2d4 <puts>
			ret = SER_EX_ERROR;
 8020eb4:	2301      	movs	r3, #1
 8020eb6:	71fb      	strb	r3, [r7, #7]
 8020eb8:	e00a      	b.n	8020ed0 <serial_app+0x44>
		}
		else
		{
			printf("Chunk Received!!!\r\n");
 8020eba:	481b      	ldr	r0, [pc, #108]	; (8020f28 <serial_app+0x9c>)
 8020ebc:	f00d fa0a 	bl	802e2d4 <puts>
			ret = ser_proccess_data(Rx_Buffer, hchunk.data_len);
 8020ec0:	4b17      	ldr	r3, [pc, #92]	; (8020f20 <serial_app+0x94>)
 8020ec2:	889b      	ldrh	r3, [r3, #4]
 8020ec4:	4619      	mov	r1, r3
 8020ec6:	4819      	ldr	r0, [pc, #100]	; (8020f2c <serial_app+0xa0>)
 8020ec8:	f000 f960 	bl	802118c <ser_proccess_data>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	71fb      	strb	r3, [r7, #7]
		}

		// Send ACK or NACK
		if( ret != SER_EX_OK){
 8020ed0:	79fb      	ldrb	r3, [r7, #7]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d00a      	beq.n	8020eec <serial_app+0x60>
			ser_state = SER_STATE_START;
 8020ed6:	4b16      	ldr	r3, [pc, #88]	; (8020f30 <serial_app+0xa4>)
 8020ed8:	2200      	movs	r2, #0
 8020eda:	701a      	strb	r2, [r3, #0]
			printf("Sending NACK\r\n");
 8020edc:	4815      	ldr	r0, [pc, #84]	; (8020f34 <serial_app+0xa8>)
 8020ede:	f00d f9f9 	bl	802e2d4 <puts>
			ser_send_resp(&huart5, SER_NACK);
 8020ee2:	2101      	movs	r1, #1
 8020ee4:	4814      	ldr	r0, [pc, #80]	; (8020f38 <serial_app+0xac>)
 8020ee6:	f000 fa93 	bl	8021410 <ser_send_resp>
 8020eea:	e003      	b.n	8020ef4 <serial_app+0x68>
		}
		else
		{
			ser_send_resp(&huart5, SER_ACK);
 8020eec:	2100      	movs	r1, #0
 8020eee:	4812      	ldr	r0, [pc, #72]	; (8020f38 <serial_app+0xac>)
 8020ef0:	f000 fa8e 	bl	8021410 <ser_send_resp>
		}

		/* check ota request */
		if(ota_data.ota_available & ota_data.ota_download & ota_data.ota_valid)
 8020ef4:	4b11      	ldr	r3, [pc, #68]	; (8020f3c <serial_app+0xb0>)
 8020ef6:	781a      	ldrb	r2, [r3, #0]
 8020ef8:	4b10      	ldr	r3, [pc, #64]	; (8020f3c <serial_app+0xb0>)
 8020efa:	785b      	ldrb	r3, [r3, #1]
 8020efc:	4013      	ands	r3, r2
 8020efe:	b2da      	uxtb	r2, r3
 8020f00:	4b0e      	ldr	r3, [pc, #56]	; (8020f3c <serial_app+0xb0>)
 8020f02:	7a1b      	ldrb	r3, [r3, #8]
 8020f04:	4013      	ands	r3, r2
 8020f06:	b2db      	uxtb	r3, r3
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d001      	beq.n	8020f10 <serial_app+0x84>
		{
			ser_ota_requsted();
 8020f0c:	f000 faac 	bl	8021468 <ser_ota_requsted>
		}

		hchunk.chunk_ready = CUN_EMPTY;
 8020f10:	4b03      	ldr	r3, [pc, #12]	; (8020f20 <serial_app+0x94>)
 8020f12:	2200      	movs	r2, #0
 8020f14:	705a      	strb	r2, [r3, #1]
	}while(false);
}
 8020f16:	bf00      	nop
 8020f18:	3708      	adds	r7, #8
 8020f1a:	46bd      	mov	sp, r7
 8020f1c:	bd80      	pop	{r7, pc}
 8020f1e:	bf00      	nop
 8020f20:	20000828 	.word	0x20000828
 8020f24:	0802f42c 	.word	0x0802f42c
 8020f28:	0802f444 	.word	0x0802f444
 8020f2c:	2000041c 	.word	0x2000041c
 8020f30:	20000419 	.word	0x20000419
 8020f34:	0802f458 	.word	0x0802f458
 8020f38:	200002e4 	.word	0x200002e4
 8020f3c:	20000408 	.word	0x20000408

08020f40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b082      	sub	sp, #8
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	6078      	str	r0, [r7, #4]
	// check serial interruption
	if(huart==&huart5){
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	4a0f      	ldr	r2, [pc, #60]	; (8020f88 <HAL_UART_RxCpltCallback+0x48>)
 8020f4c:	4293      	cmp	r3, r2
 8020f4e:	d116      	bne.n	8020f7e <HAL_UART_RxCpltCallback+0x3e>
		if((hchunk.chunk_ready == CUN_EMPTY) || (hchunk.chunk_ready == CUN_BUSY))
 8020f50:	4b0e      	ldr	r3, [pc, #56]	; (8020f8c <HAL_UART_RxCpltCallback+0x4c>)
 8020f52:	785b      	ldrb	r3, [r3, #1]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d003      	beq.n	8020f60 <HAL_UART_RxCpltCallback+0x20>
 8020f58:	4b0c      	ldr	r3, [pc, #48]	; (8020f8c <HAL_UART_RxCpltCallback+0x4c>)
 8020f5a:	785b      	ldrb	r3, [r3, #1]
 8020f5c:	2b02      	cmp	r3, #2
 8020f5e:	d104      	bne.n	8020f6a <HAL_UART_RxCpltCallback+0x2a>
		{
			ser_receive_chunk(Rx_Byte[0]);
 8020f60:	4b0b      	ldr	r3, [pc, #44]	; (8020f90 <HAL_UART_RxCpltCallback+0x50>)
 8020f62:	781b      	ldrb	r3, [r3, #0]
 8020f64:	4618      	mov	r0, r3
 8020f66:	f000 f815 	bl	8020f94 <ser_receive_chunk>
		}
		memset(Rx_Byte, 0, sizeof(Rx_Byte));
 8020f6a:	2202      	movs	r2, #2
 8020f6c:	2100      	movs	r1, #0
 8020f6e:	4808      	ldr	r0, [pc, #32]	; (8020f90 <HAL_UART_RxCpltCallback+0x50>)
 8020f70:	f00d f842 	bl	802dff8 <memset>
		HAL_UART_Receive_IT(&huart5, Rx_Byte, 1);
 8020f74:	2201      	movs	r2, #1
 8020f76:	4906      	ldr	r1, [pc, #24]	; (8020f90 <HAL_UART_RxCpltCallback+0x50>)
 8020f78:	4803      	ldr	r0, [pc, #12]	; (8020f88 <HAL_UART_RxCpltCallback+0x48>)
 8020f7a:	f008 fc6e 	bl	802985a <HAL_UART_Receive_IT>
	}
}
 8020f7e:	bf00      	nop
 8020f80:	3708      	adds	r7, #8
 8020f82:	46bd      	mov	sp, r7
 8020f84:	bd80      	pop	{r7, pc}
 8020f86:	bf00      	nop
 8020f88:	200002e4 	.word	0x200002e4
 8020f8c:	20000828 	.word	0x20000828
 8020f90:	20000404 	.word	0x20000404

08020f94 <ser_receive_chunk>:

static void ser_receive_chunk(uint8_t rx_byte)
{
 8020f94:	b580      	push	{r7, lr}
 8020f96:	b084      	sub	sp, #16
 8020f98:	af00      	add	r7, sp, #0
 8020f9a:	4603      	mov	r3, r0
 8020f9c:	71fb      	strb	r3, [r7, #7]
	uint32_t	cal_data_crc = 0u;
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	60fb      	str	r3, [r7, #12]

	switch(hchunk.chunk_state){
 8020fa2:	4b75      	ldr	r3, [pc, #468]	; (8021178 <ser_receive_chunk+0x1e4>)
 8020fa4:	781b      	ldrb	r3, [r3, #0]
 8020fa6:	2b05      	cmp	r3, #5
 8020fa8:	f200 80e1 	bhi.w	802116e <ser_receive_chunk+0x1da>
 8020fac:	a201      	add	r2, pc, #4	; (adr r2, 8020fb4 <ser_receive_chunk+0x20>)
 8020fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020fb2:	bf00      	nop
 8020fb4:	08020fcd 	.word	0x08020fcd
 8020fb8:	08021019 	.word	0x08021019
 8020fbc:	0802105f 	.word	0x0802105f
 8020fc0:	0802109d 	.word	0x0802109d
 8020fc4:	080210c7 	.word	0x080210c7
 8020fc8:	08021103 	.word	0x08021103

		// receive SOF byte (1byte)
		case CUN_STATE_SOF:
		{
			/* initial variable again */
			memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8020fcc:	f240 4209 	movw	r2, #1033	; 0x409
 8020fd0:	2100      	movs	r1, #0
 8020fd2:	486a      	ldr	r0, [pc, #424]	; (802117c <ser_receive_chunk+0x1e8>)
 8020fd4:	f00d f810 	bl	802dff8 <memset>
			hchunk.index 		 = 0u;
 8020fd8:	4b67      	ldr	r3, [pc, #412]	; (8021178 <ser_receive_chunk+0x1e4>)
 8020fda:	2200      	movs	r2, #0
 8020fdc:	805a      	strh	r2, [r3, #2]
			hchunk.data_len 	 = 0u;
 8020fde:	4b66      	ldr	r3, [pc, #408]	; (8021178 <ser_receive_chunk+0x1e4>)
 8020fe0:	2200      	movs	r2, #0
 8020fe2:	809a      	strh	r2, [r3, #4]
			hchunk.rec_data_crc  = 0u;
 8020fe4:	4b64      	ldr	r3, [pc, #400]	; (8021178 <ser_receive_chunk+0x1e4>)
 8020fe6:	2200      	movs	r2, #0
 8020fe8:	80da      	strh	r2, [r3, #6]
 8020fea:	2200      	movs	r2, #0
 8020fec:	811a      	strh	r2, [r3, #8]


			if(rx_byte == SER_SOF)
 8020fee:	79fb      	ldrb	r3, [r7, #7]
 8020ff0:	2baa      	cmp	r3, #170	; 0xaa
 8020ff2:	f040 80b5 	bne.w	8021160 <ser_receive_chunk+0x1cc>
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
 8020ff6:	4b60      	ldr	r3, [pc, #384]	; (8021178 <ser_receive_chunk+0x1e4>)
 8020ff8:	885b      	ldrh	r3, [r3, #2]
 8020ffa:	1c5a      	adds	r2, r3, #1
 8020ffc:	b291      	uxth	r1, r2
 8020ffe:	4a5e      	ldr	r2, [pc, #376]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021000:	8051      	strh	r1, [r2, #2]
 8021002:	4619      	mov	r1, r3
 8021004:	4a5d      	ldr	r2, [pc, #372]	; (802117c <ser_receive_chunk+0x1e8>)
 8021006:	79fb      	ldrb	r3, [r7, #7]
 8021008:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_PKT_TYPE;
 802100a:	4b5b      	ldr	r3, [pc, #364]	; (8021178 <ser_receive_chunk+0x1e4>)
 802100c:	2201      	movs	r2, #1
 802100e:	701a      	strb	r2, [r3, #0]
				hchunk.chunk_ready = CUN_BUSY;
 8021010:	4b59      	ldr	r3, [pc, #356]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021012:	2202      	movs	r2, #2
 8021014:	705a      	strb	r2, [r3, #1]
			}
		}
		break;
 8021016:	e0a3      	b.n	8021160 <ser_receive_chunk+0x1cc>

		// receive the packet type (1byte)
		case CUN_STATE_PKT_TYPE:
		{
			if( rx_byte == SER_SOF ){
 8021018:	79fb      	ldrb	r3, [r7, #7]
 802101a:	2baa      	cmp	r3, #170	; 0xaa
 802101c:	d111      	bne.n	8021042 <ser_receive_chunk+0xae>
				/* initial variable again */
				memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 802101e:	f240 4209 	movw	r2, #1033	; 0x409
 8021022:	2100      	movs	r1, #0
 8021024:	4855      	ldr	r0, [pc, #340]	; (802117c <ser_receive_chunk+0x1e8>)
 8021026:	f00c ffe7 	bl	802dff8 <memset>
				hchunk.index 		 = 0u;
 802102a:	4b53      	ldr	r3, [pc, #332]	; (8021178 <ser_receive_chunk+0x1e4>)
 802102c:	2200      	movs	r2, #0
 802102e:	805a      	strh	r2, [r3, #2]
				hchunk.data_len 	 = 0u;
 8021030:	4b51      	ldr	r3, [pc, #324]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021032:	2200      	movs	r2, #0
 8021034:	809a      	strh	r2, [r3, #4]
				hchunk.rec_data_crc  = 0u;
 8021036:	4b50      	ldr	r3, [pc, #320]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021038:	2200      	movs	r2, #0
 802103a:	80da      	strh	r2, [r3, #6]
 802103c:	2200      	movs	r2, #0
 802103e:	811a      	strh	r2, [r3, #8]
			{
				Rx_Buffer[hchunk.index++] = rx_byte;
				hchunk.chunk_state = CUN_STATE_LENGTH;
			}
		}
		break;
 8021040:	e095      	b.n	802116e <ser_receive_chunk+0x1da>
				Rx_Buffer[hchunk.index++] = rx_byte;
 8021042:	4b4d      	ldr	r3, [pc, #308]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021044:	885b      	ldrh	r3, [r3, #2]
 8021046:	1c5a      	adds	r2, r3, #1
 8021048:	b291      	uxth	r1, r2
 802104a:	4a4b      	ldr	r2, [pc, #300]	; (8021178 <ser_receive_chunk+0x1e4>)
 802104c:	8051      	strh	r1, [r2, #2]
 802104e:	4619      	mov	r1, r3
 8021050:	4a4a      	ldr	r2, [pc, #296]	; (802117c <ser_receive_chunk+0x1e8>)
 8021052:	79fb      	ldrb	r3, [r7, #7]
 8021054:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_state = CUN_STATE_LENGTH;
 8021056:	4b48      	ldr	r3, [pc, #288]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021058:	2202      	movs	r2, #2
 802105a:	701a      	strb	r2, [r3, #0]
		break;
 802105c:	e087      	b.n	802116e <ser_receive_chunk+0x1da>

		// Get the data length
		case CUN_STATE_LENGTH:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802105e:	4b46      	ldr	r3, [pc, #280]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021060:	885b      	ldrh	r3, [r3, #2]
 8021062:	1c5a      	adds	r2, r3, #1
 8021064:	b291      	uxth	r1, r2
 8021066:	4a44      	ldr	r2, [pc, #272]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021068:	8051      	strh	r1, [r2, #2]
 802106a:	4619      	mov	r1, r3
 802106c:	4a43      	ldr	r2, [pc, #268]	; (802117c <ser_receive_chunk+0x1e8>)
 802106e:	79fb      	ldrb	r3, [r7, #7]
 8021070:	5453      	strb	r3, [r2, r1]

			if( hchunk.index >=4 ){
 8021072:	4b41      	ldr	r3, [pc, #260]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021074:	885b      	ldrh	r3, [r3, #2]
 8021076:	2b03      	cmp	r3, #3
 8021078:	d974      	bls.n	8021164 <ser_receive_chunk+0x1d0>
				hchunk.data_len = *(uint16_t *) &Rx_Buffer[2];
 802107a:	4b41      	ldr	r3, [pc, #260]	; (8021180 <ser_receive_chunk+0x1ec>)
 802107c:	881a      	ldrh	r2, [r3, #0]
 802107e:	4b3e      	ldr	r3, [pc, #248]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021080:	809a      	strh	r2, [r3, #4]
				if(hchunk.data_len <= MAX_SERIAL_DATA_LENGTH){
 8021082:	4b3d      	ldr	r3, [pc, #244]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021084:	889b      	ldrh	r3, [r3, #4]
 8021086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802108a:	d803      	bhi.n	8021094 <ser_receive_chunk+0x100>
					hchunk.chunk_state = CUN_STATE_DATA;
 802108c:	4b3a      	ldr	r3, [pc, #232]	; (8021178 <ser_receive_chunk+0x1e4>)
 802108e:	2203      	movs	r2, #3
 8021090:	701a      	strb	r2, [r3, #0]
				else {
					hchunk.chunk_state = CUN_STATE_SOF;
				}
			}
		}
		break;
 8021092:	e067      	b.n	8021164 <ser_receive_chunk+0x1d0>
					hchunk.chunk_state = CUN_STATE_SOF;
 8021094:	4b38      	ldr	r3, [pc, #224]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021096:	2200      	movs	r2, #0
 8021098:	701a      	strb	r2, [r3, #0]
		break;
 802109a:	e063      	b.n	8021164 <ser_receive_chunk+0x1d0>

		// Receive data
		case CUN_STATE_DATA:
		{
			Rx_Buffer[hchunk.index++] = rx_byte;
 802109c:	4b36      	ldr	r3, [pc, #216]	; (8021178 <ser_receive_chunk+0x1e4>)
 802109e:	885b      	ldrh	r3, [r3, #2]
 80210a0:	1c5a      	adds	r2, r3, #1
 80210a2:	b291      	uxth	r1, r2
 80210a4:	4a34      	ldr	r2, [pc, #208]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210a6:	8051      	strh	r1, [r2, #2]
 80210a8:	4619      	mov	r1, r3
 80210aa:	4a34      	ldr	r2, [pc, #208]	; (802117c <ser_receive_chunk+0x1e8>)
 80210ac:	79fb      	ldrb	r3, [r7, #7]
 80210ae:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 4+hchunk.data_len )
 80210b0:	4b31      	ldr	r3, [pc, #196]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210b2:	889b      	ldrh	r3, [r3, #4]
 80210b4:	3303      	adds	r3, #3
 80210b6:	4a30      	ldr	r2, [pc, #192]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210b8:	8852      	ldrh	r2, [r2, #2]
 80210ba:	4293      	cmp	r3, r2
 80210bc:	da54      	bge.n	8021168 <ser_receive_chunk+0x1d4>
			{
				hchunk.chunk_state = CUN_STATE_CRC;
 80210be:	4b2e      	ldr	r3, [pc, #184]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210c0:	2204      	movs	r2, #4
 80210c2:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80210c4:	e050      	b.n	8021168 <ser_receive_chunk+0x1d4>

		// Get the CRC
		case CUN_STATE_CRC:
			Rx_Buffer[hchunk.index++] = rx_byte;
 80210c6:	4b2c      	ldr	r3, [pc, #176]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210c8:	885b      	ldrh	r3, [r3, #2]
 80210ca:	1c5a      	adds	r2, r3, #1
 80210cc:	b291      	uxth	r1, r2
 80210ce:	4a2a      	ldr	r2, [pc, #168]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210d0:	8051      	strh	r1, [r2, #2]
 80210d2:	4619      	mov	r1, r3
 80210d4:	4a29      	ldr	r2, [pc, #164]	; (802117c <ser_receive_chunk+0x1e8>)
 80210d6:	79fb      	ldrb	r3, [r7, #7]
 80210d8:	5453      	strb	r3, [r2, r1]
			if( hchunk.index >= 8+hchunk.data_len)
 80210da:	4b27      	ldr	r3, [pc, #156]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210dc:	889b      	ldrh	r3, [r3, #4]
 80210de:	3307      	adds	r3, #7
 80210e0:	4a25      	ldr	r2, [pc, #148]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210e2:	8852      	ldrh	r2, [r2, #2]
 80210e4:	4293      	cmp	r3, r2
 80210e6:	da41      	bge.n	802116c <ser_receive_chunk+0x1d8>
			{
				hchunk.rec_data_crc = *(uint32_t *) &Rx_Buffer[4+hchunk.data_len];
 80210e8:	4b23      	ldr	r3, [pc, #140]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210ea:	889b      	ldrh	r3, [r3, #4]
 80210ec:	3304      	adds	r3, #4
 80210ee:	4a23      	ldr	r2, [pc, #140]	; (802117c <ser_receive_chunk+0x1e8>)
 80210f0:	4413      	add	r3, r2
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	4a20      	ldr	r2, [pc, #128]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210f6:	f8c2 3006 	str.w	r3, [r2, #6]
				hchunk.chunk_state = CUN_STATE_EOF;
 80210fa:	4b1f      	ldr	r3, [pc, #124]	; (8021178 <ser_receive_chunk+0x1e4>)
 80210fc:	2205      	movs	r2, #5
 80210fe:	701a      	strb	r2, [r3, #0]
			}
		break;
 8021100:	e034      	b.n	802116c <ser_receive_chunk+0x1d8>

		case CUN_STATE_EOF:
		{
			do
			{
				Rx_Buffer[hchunk.index] = rx_byte;
 8021102:	4b1d      	ldr	r3, [pc, #116]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021104:	885b      	ldrh	r3, [r3, #2]
 8021106:	4619      	mov	r1, r3
 8021108:	4a1c      	ldr	r2, [pc, #112]	; (802117c <ser_receive_chunk+0x1e8>)
 802110a:	79fb      	ldrb	r3, [r7, #7]
 802110c:	5453      	strb	r3, [r2, r1]
				hchunk.chunk_ready = CUN_ERROR;
 802110e:	4b1a      	ldr	r3, [pc, #104]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021110:	2203      	movs	r2, #3
 8021112:	705a      	strb	r2, [r3, #1]
				hchunk.chunk_state = CUN_STATE_SOF;
 8021114:	4b18      	ldr	r3, [pc, #96]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021116:	2200      	movs	r2, #0
 8021118:	701a      	strb	r2, [r3, #0]

				if(Rx_Buffer[hchunk.index] != SER_EOF)
 802111a:	4b17      	ldr	r3, [pc, #92]	; (8021178 <ser_receive_chunk+0x1e4>)
 802111c:	885b      	ldrh	r3, [r3, #2]
 802111e:	461a      	mov	r2, r3
 8021120:	4b16      	ldr	r3, [pc, #88]	; (802117c <ser_receive_chunk+0x1e8>)
 8021122:	5c9b      	ldrb	r3, [r3, r2]
 8021124:	2bbb      	cmp	r3, #187	; 0xbb
 8021126:	d119      	bne.n	802115c <ser_receive_chunk+0x1c8>
				{
					break;
				}

				cal_data_crc = ser_calcCRC(&Rx_Buffer[4], hchunk.data_len);
 8021128:	4b13      	ldr	r3, [pc, #76]	; (8021178 <ser_receive_chunk+0x1e4>)
 802112a:	889b      	ldrh	r3, [r3, #4]
 802112c:	4619      	mov	r1, r3
 802112e:	4815      	ldr	r0, [pc, #84]	; (8021184 <ser_receive_chunk+0x1f0>)
 8021130:	f000 fa4e 	bl	80215d0 <ser_calcCRC>
 8021134:	60f8      	str	r0, [r7, #12]
				if(cal_data_crc != hchunk.rec_data_crc)
 8021136:	4b10      	ldr	r3, [pc, #64]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021138:	f8d3 3006 	ldr.w	r3, [r3, #6]
 802113c:	68fa      	ldr	r2, [r7, #12]
 802113e:	429a      	cmp	r2, r3
 8021140:	d008      	beq.n	8021154 <ser_receive_chunk+0x1c0>
				{
					printf("CHUNK CRC MISMATCH!!! [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8021142:	4b0d      	ldr	r3, [pc, #52]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021144:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8021148:	461a      	mov	r2, r3
 802114a:	68f9      	ldr	r1, [r7, #12]
 802114c:	480e      	ldr	r0, [pc, #56]	; (8021188 <ser_receive_chunk+0x1f4>)
 802114e:	f00d f83b 	bl	802e1c8 <iprintf>
												                   cal_data_crc,
																   hchunk.rec_data_crc );
					break;
 8021152:	e004      	b.n	802115e <ser_receive_chunk+0x1ca>
				}

				hchunk.chunk_ready = CUN_READY;
 8021154:	4b08      	ldr	r3, [pc, #32]	; (8021178 <ser_receive_chunk+0x1e4>)
 8021156:	2201      	movs	r2, #1
 8021158:	705a      	strb	r2, [r3, #1]

			}while(false);
		}
		break;
 802115a:	e008      	b.n	802116e <ser_receive_chunk+0x1da>
					break;
 802115c:	bf00      	nop
		break;
 802115e:	e006      	b.n	802116e <ser_receive_chunk+0x1da>
		break;
 8021160:	bf00      	nop
 8021162:	e004      	b.n	802116e <ser_receive_chunk+0x1da>
		break;
 8021164:	bf00      	nop
 8021166:	e002      	b.n	802116e <ser_receive_chunk+0x1da>
		break;
 8021168:	bf00      	nop
 802116a:	e000      	b.n	802116e <ser_receive_chunk+0x1da>
		break;
 802116c:	bf00      	nop
	}
}
 802116e:	bf00      	nop
 8021170:	3710      	adds	r7, #16
 8021172:	46bd      	mov	sp, r7
 8021174:	bd80      	pop	{r7, pc}
 8021176:	bf00      	nop
 8021178:	20000828 	.word	0x20000828
 802117c:	2000041c 	.word	0x2000041c
 8021180:	2000041e 	.word	0x2000041e
 8021184:	20000420 	.word	0x20000420
 8021188:	0802f468 	.word	0x0802f468

0802118c <ser_proccess_data>:


static SER_EX_ ser_proccess_data( uint8_t *buf, uint16_t len)
{
 802118c:	b5b0      	push	{r4, r5, r7, lr}
 802118e:	b08a      	sub	sp, #40	; 0x28
 8021190:	af00      	add	r7, sp, #0
 8021192:	6078      	str	r0, [r7, #4]
 8021194:	460b      	mov	r3, r1
 8021196:	807b      	strh	r3, [r7, #2]
	SER_EX_ ret = SER_EX_ERROR;
 8021198:	2301      	movs	r3, #1
 802119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		if( (buf==NULL) || (len == 0u) )
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	f000 810f 	beq.w	80213c4 <ser_proccess_data+0x238>
 80211a6:	887b      	ldrh	r3, [r7, #2]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	f000 810b 	beq.w	80213c4 <ser_proccess_data+0x238>
		{
			break;
		}

		// Check Serial Abort Command
		SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	623b      	str	r3, [r7, #32]
		if(cmd->packet_type == SER_PACKET_TYPE_CMD)
 80211b2:	6a3b      	ldr	r3, [r7, #32]
 80211b4:	785b      	ldrb	r3, [r3, #1]
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d107      	bne.n	80211ca <ser_proccess_data+0x3e>
		{
			if(cmd->cmd == SER_CMD_ABORT)
 80211ba:	6a3b      	ldr	r3, [r7, #32]
 80211bc:	791b      	ldrb	r3, [r3, #4]
 80211be:	2b02      	cmp	r3, #2
 80211c0:	d103      	bne.n	80211ca <ser_proccess_data+0x3e>
			{
				// Receive Serial Abort Command. stop process;
				ser_state = SER_STATE_START;
 80211c2:	4b88      	ldr	r3, [pc, #544]	; (80213e4 <ser_proccess_data+0x258>)
 80211c4:	2200      	movs	r2, #0
 80211c6:	701a      	strb	r2, [r3, #0]
				break;
 80211c8:	e105      	b.n	80213d6 <ser_proccess_data+0x24a>
			}
		}

		switch(ser_state)
 80211ca:	4b86      	ldr	r3, [pc, #536]	; (80213e4 <ser_proccess_data+0x258>)
 80211cc:	781b      	ldrb	r3, [r3, #0]
 80211ce:	2b03      	cmp	r3, #3
 80211d0:	f200 80f4 	bhi.w	80213bc <ser_proccess_data+0x230>
 80211d4:	a201      	add	r2, pc, #4	; (adr r2, 80211dc <ser_proccess_data+0x50>)
 80211d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80211da:	bf00      	nop
 80211dc:	080211ed 	.word	0x080211ed
 80211e0:	0802124f 	.word	0x0802124f
 80211e4:	080212a3 	.word	0x080212a3
 80211e8:	0802133b 	.word	0x0802133b
		{

			case SER_STATE_START:
			{

				data_info.data_crc 	= 0u;
 80211ec:	4b7e      	ldr	r3, [pc, #504]	; (80213e8 <ser_proccess_data+0x25c>)
 80211ee:	2200      	movs	r2, #0
 80211f0:	715a      	strb	r2, [r3, #5]
 80211f2:	2200      	movs	r2, #0
 80211f4:	719a      	strb	r2, [r3, #6]
 80211f6:	2200      	movs	r2, #0
 80211f8:	71da      	strb	r2, [r3, #7]
 80211fa:	2200      	movs	r2, #0
 80211fc:	721a      	strb	r2, [r3, #8]
				data_info.data_size	= 0u;
 80211fe:	4b7a      	ldr	r3, [pc, #488]	; (80213e8 <ser_proccess_data+0x25c>)
 8021200:	2200      	movs	r2, #0
 8021202:	705a      	strb	r2, [r3, #1]
 8021204:	2200      	movs	r2, #0
 8021206:	709a      	strb	r2, [r3, #2]
 8021208:	2200      	movs	r2, #0
 802120a:	70da      	strb	r2, [r3, #3]
 802120c:	2200      	movs	r2, #0
 802120e:	711a      	strb	r2, [r3, #4]
				data_info.data_type	= 0u;
 8021210:	4b75      	ldr	r3, [pc, #468]	; (80213e8 <ser_proccess_data+0x25c>)
 8021212:	2200      	movs	r2, #0
 8021214:	701a      	strb	r2, [r3, #0]
				data_received_size	= 0u;
 8021216:	4b75      	ldr	r3, [pc, #468]	; (80213ec <ser_proccess_data+0x260>)
 8021218:	2200      	movs	r2, #0
 802121a:	801a      	strh	r2, [r3, #0]
				data_calc_crc				= 0u;
 802121c:	4b74      	ldr	r3, [pc, #464]	; (80213f0 <ser_proccess_data+0x264>)
 802121e:	2200      	movs	r2, #0
 8021220:	601a      	str	r2, [r3, #0]

				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	60fb      	str	r3, [r7, #12]
				if( cmd->packet_type == SER_PACKET_TYPE_CMD )
 8021226:	68fb      	ldr	r3, [r7, #12]
 8021228:	785b      	ldrb	r3, [r3, #1]
 802122a:	2b00      	cmp	r3, #0
 802122c:	f040 80cc 	bne.w	80213c8 <ser_proccess_data+0x23c>
				{
					if( cmd->cmd == SER_CMD_START )
 8021230:	68fb      	ldr	r3, [r7, #12]
 8021232:	791b      	ldrb	r3, [r3, #4]
 8021234:	2b00      	cmp	r3, #0
 8021236:	f040 80c7 	bne.w	80213c8 <ser_proccess_data+0x23c>
					{
						printf("Received Serial Start Command \r\n");
 802123a:	486e      	ldr	r0, [pc, #440]	; (80213f4 <ser_proccess_data+0x268>)
 802123c:	f00d f84a 	bl	802e2d4 <puts>
						ser_state = SER_STATE_HEADER;
 8021240:	4b68      	ldr	r3, [pc, #416]	; (80213e4 <ser_proccess_data+0x258>)
 8021242:	2201      	movs	r2, #1
 8021244:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 8021246:	2300      	movs	r3, #0
 8021248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					}
				}
			}
			break;
 802124c:	e0bc      	b.n	80213c8 <ser_proccess_data+0x23c>


			case SER_STATE_HEADER:
			{
				SER_HEADER_ *header = (SER_HEADER_ *)buf;
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	613b      	str	r3, [r7, #16]

				if( header->packet_type == SER_PACKET_TYPE_HEADER )
 8021252:	693b      	ldr	r3, [r7, #16]
 8021254:	785b      	ldrb	r3, [r3, #1]
 8021256:	2b02      	cmp	r3, #2
 8021258:	f040 80b8 	bne.w	80213cc <ser_proccess_data+0x240>
				{
					data_info.data_type = header->meta_data.data_type;
 802125c:	693b      	ldr	r3, [r7, #16]
 802125e:	791a      	ldrb	r2, [r3, #4]
 8021260:	4b61      	ldr	r3, [pc, #388]	; (80213e8 <ser_proccess_data+0x25c>)
 8021262:	701a      	strb	r2, [r3, #0]
					data_info.data_size = header->meta_data.data_size;
 8021264:	693b      	ldr	r3, [r7, #16]
 8021266:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802126a:	4a5f      	ldr	r2, [pc, #380]	; (80213e8 <ser_proccess_data+0x25c>)
 802126c:	f8c2 3001 	str.w	r3, [r2, #1]
					data_info.data_crc	 = header->meta_data.data_crc;
 8021270:	693b      	ldr	r3, [r7, #16]
 8021272:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8021276:	4a5c      	ldr	r2, [pc, #368]	; (80213e8 <ser_proccess_data+0x25c>)
 8021278:	f8c2 3005 	str.w	r3, [r2, #5]

					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
																									data_info.data_type,
 802127c:	4b5a      	ldr	r3, [pc, #360]	; (80213e8 <ser_proccess_data+0x25c>)
 802127e:	781b      	ldrb	r3, [r3, #0]
					printf("Received Data Header. type=[%d], size=[%d], crc=[0x%08lX]\r\n",
 8021280:	4619      	mov	r1, r3
 8021282:	4b59      	ldr	r3, [pc, #356]	; (80213e8 <ser_proccess_data+0x25c>)
 8021284:	f8d3 2001 	ldr.w	r2, [r3, #1]
 8021288:	4b57      	ldr	r3, [pc, #348]	; (80213e8 <ser_proccess_data+0x25c>)
 802128a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 802128e:	485a      	ldr	r0, [pc, #360]	; (80213f8 <ser_proccess_data+0x26c>)
 8021290:	f00c ff9a 	bl	802e1c8 <iprintf>
																									data_info.data_size,
																									data_info.data_crc);
					ser_state = SER_STATE_DATA;
 8021294:	4b53      	ldr	r3, [pc, #332]	; (80213e4 <ser_proccess_data+0x258>)
 8021296:	2202      	movs	r2, #2
 8021298:	701a      	strb	r2, [r3, #0]
					ret = SER_EX_OK;
 802129a:	2300      	movs	r3, #0
 802129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
			}
			break;
 80212a0:	e094      	b.n	80213cc <ser_proccess_data+0x240>


			case SER_STATE_DATA:
			{
				SER_DATA_				*data			= (SER_DATA_ *)buf;
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	61bb      	str	r3, [r7, #24]
				uint16_t				data_len	=	data->data_len;
 80212a6:	69bb      	ldr	r3, [r7, #24]
 80212a8:	789a      	ldrb	r2, [r3, #2]
 80212aa:	78db      	ldrb	r3, [r3, #3]
 80212ac:	021b      	lsls	r3, r3, #8
 80212ae:	4313      	orrs	r3, r2
 80212b0:	82fb      	strh	r3, [r7, #22]

				if( data->packet_type == SER_PACKET_TYPE_DATA )
 80212b2:	69bb      	ldr	r3, [r7, #24]
 80212b4:	785b      	ldrb	r3, [r3, #1]
 80212b6:	2b01      	cmp	r3, #1
 80212b8:	f040 808a 	bne.w	80213d0 <ser_proccess_data+0x244>
				{
					switch(data_info.data_type)
 80212bc:	4b4a      	ldr	r3, [pc, #296]	; (80213e8 <ser_proccess_data+0x25c>)
 80212be:	781b      	ldrb	r3, [r3, #0]
 80212c0:	2b02      	cmp	r3, #2
 80212c2:	d006      	beq.n	80212d2 <ser_proccess_data+0x146>
 80212c4:	2b02      	cmp	r3, #2
 80212c6:	dc25      	bgt.n	8021314 <ser_proccess_data+0x188>
 80212c8:	2b00      	cmp	r3, #0
 80212ca:	d027      	beq.n	802131c <ser_proccess_data+0x190>
 80212cc:	2b01      	cmp	r3, #1
 80212ce:	d027      	beq.n	8021320 <ser_proccess_data+0x194>
 80212d0:	e020      	b.n	8021314 <ser_proccess_data+0x188>
						}
						break;

						case OTA_INFO_DATA:
						{
								ota_data = *(ota_info *)&buf[4];
 80212d2:	4a4a      	ldr	r2, [pc, #296]	; (80213fc <ser_proccess_data+0x270>)
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	3304      	adds	r3, #4
 80212d8:	681d      	ldr	r5, [r3, #0]
 80212da:	685c      	ldr	r4, [r3, #4]
 80212dc:	6898      	ldr	r0, [r3, #8]
 80212de:	68d9      	ldr	r1, [r3, #12]
 80212e0:	6015      	str	r5, [r2, #0]
 80212e2:	6054      	str	r4, [r2, #4]
 80212e4:	6090      	str	r0, [r2, #8]
 80212e6:	60d1      	str	r1, [r2, #12]
 80212e8:	7c1b      	ldrb	r3, [r3, #16]
 80212ea:	7413      	strb	r3, [r2, #16]
								ota_data.ota_valid = 0;
 80212ec:	4b43      	ldr	r3, [pc, #268]	; (80213fc <ser_proccess_data+0x270>)
 80212ee:	2200      	movs	r2, #0
 80212f0:	721a      	strb	r2, [r3, #8]
								data_received_size 			= data_len;
 80212f2:	4a3e      	ldr	r2, [pc, #248]	; (80213ec <ser_proccess_data+0x260>)
 80212f4:	8afb      	ldrh	r3, [r7, #22]
 80212f6:	8013      	strh	r3, [r2, #0]
								data_calc_crc			 	= ser_calcCRC(&buf[4], data_len);
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	3304      	adds	r3, #4
 80212fc:	8afa      	ldrh	r2, [r7, #22]
 80212fe:	4611      	mov	r1, r2
 8021300:	4618      	mov	r0, r3
 8021302:	f000 f965 	bl	80215d0 <ser_calcCRC>
 8021306:	4603      	mov	r3, r0
 8021308:	4a39      	ldr	r2, [pc, #228]	; (80213f0 <ser_proccess_data+0x264>)
 802130a:	6013      	str	r3, [r2, #0]
								ret = SER_EX_OK;
 802130c:	2300      	movs	r3, #0
 802130e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

						}
						break;
 8021312:	e006      	b.n	8021322 <ser_proccess_data+0x196>

						default:
						{
							// shouldn't be here
							ret = SER_EX_ERROR;
 8021314:	2301      	movs	r3, #1
 8021316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						}
						break;
 802131a:	e002      	b.n	8021322 <ser_proccess_data+0x196>
						break;
 802131c:	bf00      	nop
 802131e:	e000      	b.n	8021322 <ser_proccess_data+0x196>
						break;
 8021320:	bf00      	nop
					}

					if( data_received_size >= data_info.data_size )
 8021322:	4b32      	ldr	r3, [pc, #200]	; (80213ec <ser_proccess_data+0x260>)
 8021324:	881b      	ldrh	r3, [r3, #0]
 8021326:	461a      	mov	r2, r3
 8021328:	4b2f      	ldr	r3, [pc, #188]	; (80213e8 <ser_proccess_data+0x25c>)
 802132a:	f8d3 3001 	ldr.w	r3, [r3, #1]
 802132e:	429a      	cmp	r2, r3
 8021330:	d34e      	bcc.n	80213d0 <ser_proccess_data+0x244>
					{
						//Received All data, move to end
						ser_state = SER_STATE_END;
 8021332:	4b2c      	ldr	r3, [pc, #176]	; (80213e4 <ser_proccess_data+0x258>)
 8021334:	2203      	movs	r2, #3
 8021336:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			break;
 8021338:	e04a      	b.n	80213d0 <ser_proccess_data+0x244>


			case SER_STATE_END:
			{
				SER_COMMAND_ *cmd = (SER_COMMAND_ *)buf;
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	61fb      	str	r3, [r7, #28]

				if( cmd->packet_type == SER_PACKET_TYPE_CMD)
 802133e:	69fb      	ldr	r3, [r7, #28]
 8021340:	785b      	ldrb	r3, [r3, #1]
 8021342:	2b00      	cmp	r3, #0
 8021344:	d146      	bne.n	80213d4 <ser_proccess_data+0x248>
				{
					if(cmd->cmd == SER_CMD_END)
 8021346:	69fb      	ldr	r3, [r7, #28]
 8021348:	791b      	ldrb	r3, [r3, #4]
 802134a:	2b01      	cmp	r3, #1
 802134c:	d142      	bne.n	80213d4 <ser_proccess_data+0x248>
					{
						printf("Receive SERIAL END COMMAND\r\nValidation...\r\n");
 802134e:	482c      	ldr	r0, [pc, #176]	; (8021400 <ser_proccess_data+0x274>)
 8021350:	f00c ffc0 	bl	802e2d4 <puts>

						//Validation the received packets
						//TODO: validation normal data

						// one packet data so:
						if( data_info.data_type == OTA_INFO_DATA ||  data_info.data_type == STATUS_DATA )
 8021354:	4b24      	ldr	r3, [pc, #144]	; (80213e8 <ser_proccess_data+0x25c>)
 8021356:	781b      	ldrb	r3, [r3, #0]
 8021358:	2b02      	cmp	r3, #2
 802135a:	d003      	beq.n	8021364 <ser_proccess_data+0x1d8>
 802135c:	4b22      	ldr	r3, [pc, #136]	; (80213e8 <ser_proccess_data+0x25c>)
 802135e:	781b      	ldrb	r3, [r3, #0]
 8021360:	2b01      	cmp	r3, #1
 8021362:	d121      	bne.n	80213a8 <ser_proccess_data+0x21c>
						{
							if(data_calc_crc != data_info.data_crc)
 8021364:	4b20      	ldr	r3, [pc, #128]	; (80213e8 <ser_proccess_data+0x25c>)
 8021366:	f8d3 2005 	ldr.w	r2, [r3, #5]
 802136a:	4b21      	ldr	r3, [pc, #132]	; (80213f0 <ser_proccess_data+0x264>)
 802136c:	681b      	ldr	r3, [r3, #0]
 802136e:	429a      	cmp	r2, r3
 8021370:	d009      	beq.n	8021386 <ser_proccess_data+0x1fa>
							{
								printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8021372:	4b1f      	ldr	r3, [pc, #124]	; (80213f0 <ser_proccess_data+0x264>)
 8021374:	681b      	ldr	r3, [r3, #0]
 8021376:	4a1c      	ldr	r2, [pc, #112]	; (80213e8 <ser_proccess_data+0x25c>)
 8021378:	f8d2 2005 	ldr.w	r2, [r2, #5]
 802137c:	4619      	mov	r1, r3
 802137e:	4821      	ldr	r0, [pc, #132]	; (8021404 <ser_proccess_data+0x278>)
 8021380:	f00c ff22 	bl	802e1c8 <iprintf>
												data_calc_crc, data_info.data_crc);
								break;
 8021384:	e027      	b.n	80213d6 <ser_proccess_data+0x24a>
							}

							if(data_info.data_type == OTA_INFO_DATA)
 8021386:	4b18      	ldr	r3, [pc, #96]	; (80213e8 <ser_proccess_data+0x25c>)
 8021388:	781b      	ldrb	r3, [r3, #0]
 802138a:	2b02      	cmp	r3, #2
 802138c:	d10c      	bne.n	80213a8 <ser_proccess_data+0x21c>
							{
								ota_data.ota_valid = 1u;
 802138e:	4b1b      	ldr	r3, [pc, #108]	; (80213fc <ser_proccess_data+0x270>)
 8021390:	2201      	movs	r2, #1
 8021392:	721a      	strb	r2, [r3, #8]
								printf("A NEW FIRMWARE FOUND!!! VERSION = [%d,%ld]\r\n", ota_data.ota_major,
 8021394:	4b19      	ldr	r3, [pc, #100]	; (80213fc <ser_proccess_data+0x270>)
 8021396:	885b      	ldrh	r3, [r3, #2]
 8021398:	b29b      	uxth	r3, r3
 802139a:	4619      	mov	r1, r3
 802139c:	4b17      	ldr	r3, [pc, #92]	; (80213fc <ser_proccess_data+0x270>)
 802139e:	685b      	ldr	r3, [r3, #4]
 80213a0:	461a      	mov	r2, r3
 80213a2:	4819      	ldr	r0, [pc, #100]	; (8021408 <ser_proccess_data+0x27c>)
 80213a4:	f00c ff10 	bl	802e1c8 <iprintf>
																																				 ota_data.ota_minor);
							}
						}
						printf("Validated Successfully!\r\n");
 80213a8:	4818      	ldr	r0, [pc, #96]	; (802140c <ser_proccess_data+0x280>)
 80213aa:	f00c ff93 	bl	802e2d4 <puts>

						ser_state = SER_STATE_START;
 80213ae:	4b0d      	ldr	r3, [pc, #52]	; (80213e4 <ser_proccess_data+0x258>)
 80213b0:	2200      	movs	r2, #0
 80213b2:	701a      	strb	r2, [r3, #0]
						ret = SER_EX_OK;
 80213b4:	2300      	movs	r3, #0
 80213b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					}
				}
			}
			break;
 80213ba:	e00b      	b.n	80213d4 <ser_proccess_data+0x248>

			default:
			{
				ret = SER_EX_ERROR;
 80213bc:	2301      	movs	r3, #1
 80213be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80213c2:	e008      	b.n	80213d6 <ser_proccess_data+0x24a>
			// state cases end
		};
 80213c4:	bf00      	nop
 80213c6:	e006      	b.n	80213d6 <ser_proccess_data+0x24a>
			break;
 80213c8:	bf00      	nop
 80213ca:	e004      	b.n	80213d6 <ser_proccess_data+0x24a>
			break;
 80213cc:	bf00      	nop
 80213ce:	e002      	b.n	80213d6 <ser_proccess_data+0x24a>
			break;
 80213d0:	bf00      	nop
 80213d2:	e000      	b.n	80213d6 <ser_proccess_data+0x24a>
			break;
 80213d4:	bf00      	nop

	}while(false);

	return ret;
 80213d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80213da:	4618      	mov	r0, r3
 80213dc:	3728      	adds	r7, #40	; 0x28
 80213de:	46bd      	mov	sp, r7
 80213e0:	bdb0      	pop	{r4, r5, r7, pc}
 80213e2:	bf00      	nop
 80213e4:	20000419 	.word	0x20000419
 80213e8:	20000834 	.word	0x20000834
 80213ec:	20000846 	.word	0x20000846
 80213f0:	20000848 	.word	0x20000848
 80213f4:	0802f4ac 	.word	0x0802f4ac
 80213f8:	0802f4cc 	.word	0x0802f4cc
 80213fc:	20000408 	.word	0x20000408
 8021400:	0802f508 	.word	0x0802f508
 8021404:	0802f534 	.word	0x0802f534
 8021408:	0802f578 	.word	0x0802f578
 802140c:	0802f5a8 	.word	0x0802f5a8

08021410 <ser_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ser_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8021410:	b580      	push	{r7, lr}
 8021412:	b086      	sub	sp, #24
 8021414:	af00      	add	r7, sp, #0
 8021416:	6078      	str	r0, [r7, #4]
 8021418:	460b      	mov	r3, r1
 802141a:	70fb      	strb	r3, [r7, #3]
	SER_RESP_ pack =
 802141c:	f107 030c 	add.w	r3, r7, #12
 8021420:	2200      	movs	r2, #0
 8021422:	601a      	str	r2, [r3, #0]
 8021424:	605a      	str	r2, [r3, #4]
 8021426:	811a      	strh	r2, [r3, #8]
 8021428:	23aa      	movs	r3, #170	; 0xaa
 802142a:	733b      	strb	r3, [r7, #12]
 802142c:	2303      	movs	r3, #3
 802142e:	737b      	strb	r3, [r7, #13]
 8021430:	2301      	movs	r3, #1
 8021432:	81fb      	strh	r3, [r7, #14]
 8021434:	78fb      	ldrb	r3, [r7, #3]
 8021436:	743b      	strb	r3, [r7, #16]
 8021438:	23bb      	movs	r3, #187	; 0xbb
 802143a:	757b      	strb	r3, [r7, #21]
		.data_len		= 1u,
		.status			= rsp,
		.eof			= SER_EOF
	};

	pack.crc = ser_calcCRC(&pack.status, 1);
 802143c:	f107 030c 	add.w	r3, r7, #12
 8021440:	3304      	adds	r3, #4
 8021442:	2101      	movs	r1, #1
 8021444:	4618      	mov	r0, r3
 8021446:	f000 f8c3 	bl	80215d0 <ser_calcCRC>
 802144a:	4603      	mov	r3, r0
 802144c:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(SER_RESP_),HAL_MAX_DELAY);
 8021450:	f107 010c 	add.w	r1, r7, #12
 8021454:	f04f 33ff 	mov.w	r3, #4294967295
 8021458:	220a      	movs	r2, #10
 802145a:	6878      	ldr	r0, [r7, #4]
 802145c:	f008 f96b 	bl	8029736 <HAL_UART_Transmit>

}
 8021460:	bf00      	nop
 8021462:	3718      	adds	r7, #24
 8021464:	46bd      	mov	sp, r7
 8021466:	bd80      	pop	{r7, pc}

08021468 <ser_ota_requsted>:
/*
 * @brief save boot reason to OTA update and save data in configuration
 * sector patr
 */
void ser_ota_requsted()
{
 8021468:	b5f0      	push	{r4, r5, r6, r7, lr}
 802146a:	b08f      	sub	sp, #60	; 0x3c
 802146c:	af00      	add	r7, sp, #0
	do
	{
		HAL_StatusTypeDef ret = HAL_ERROR;
 802146e:	2301      	movs	r3, #1
 8021470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		/* read configuration */
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8021474:	4b15      	ldr	r3, [pc, #84]	; (80214cc <ser_ota_requsted+0x64>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	461c      	mov	r4, r3
 802147a:	1d3e      	adds	r6, r7, #4
 802147c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8021480:	4635      	mov	r5, r6
 8021482:	4623      	mov	r3, r4
 8021484:	6818      	ldr	r0, [r3, #0]
 8021486:	6859      	ldr	r1, [r3, #4]
 8021488:	689a      	ldr	r2, [r3, #8]
 802148a:	68db      	ldr	r3, [r3, #12]
 802148c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802148e:	3410      	adds	r4, #16
 8021490:	3610      	adds	r6, #16
 8021492:	4564      	cmp	r4, ip
 8021494:	d1f4      	bne.n	8021480 <ser_ota_requsted+0x18>

		/* set reboot cause to ota request */
		cfg.reboot_cause = OTA_UPDATE_APP;
 8021496:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
 802149a:	607b      	str	r3, [r7, #4]

		/* write back config */
		ret = write_cfg_to_flash(&cfg);
 802149c:	1d3b      	adds	r3, r7, #4
 802149e:	4618      	mov	r0, r3
 80214a0:	f000 f81a 	bl	80214d8 <write_cfg_to_flash>
 80214a4:	4603      	mov	r3, r0
 80214a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		if( ret != HAL_OK )
 80214aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	d003      	beq.n	80214ba <ser_ota_requsted+0x52>
		{
			printf("Write configuratin Error!!!\r\n");
 80214b2:	4807      	ldr	r0, [pc, #28]	; (80214d0 <ser_ota_requsted+0x68>)
 80214b4:	f00c ff0e 	bl	802e2d4 <puts>
		printf("Reboot for Update...\r\n");

		HAL_NVIC_SystemReset();

	}while(false);
}
 80214b8:	e004      	b.n	80214c4 <ser_ota_requsted+0x5c>
		printf("Reboot for Update...\r\n");
 80214ba:	4806      	ldr	r0, [pc, #24]	; (80214d4 <ser_ota_requsted+0x6c>)
 80214bc:	f00c ff0a 	bl	802e2d4 <puts>
		HAL_NVIC_SystemReset();
 80214c0:	f002 f999 	bl	80237f6 <HAL_NVIC_SystemReset>
}
 80214c4:	bf00      	nop
 80214c6:	373c      	adds	r7, #60	; 0x3c
 80214c8:	46bd      	mov	sp, r7
 80214ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214cc:	20000000 	.word	0x20000000
 80214d0:	0802f5c4 	.word	0x0802f5c4
 80214d4:	0802f5e4 	.word	0x0802f5e4

080214d8 <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 80214d8:	b5b0      	push	{r4, r5, r7, lr}
 80214da:	b08c      	sub	sp, #48	; 0x30
 80214dc:	af00      	add	r7, sp, #0
 80214de:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80214e0:	2301      	movs	r3, #1
 80214e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d05f      	beq.n	80215ac <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 80214ec:	f002 ffe4 	bl	80244b8 <HAL_FLASH_Unlock>
 80214f0:	4603      	mov	r3, r0
 80214f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80214f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80214fa:	2b00      	cmp	r3, #0
 80214fc:	d158      	bne.n	80215b0 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80214fe:	f04f 30ff 	mov.w	r0, #4294967295
 8021502:	f003 f80b 	bl	802451c <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8021506:	2300      	movs	r3, #0
 8021508:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 802150a:	2304      	movs	r3, #4
 802150c:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 802150e:	2301      	movs	r3, #1
 8021510:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 8021512:	2302      	movs	r3, #2
 8021514:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8021516:	4b2c      	ldr	r3, [pc, #176]	; (80215c8 <write_cfg_to_flash+0xf0>)
 8021518:	2273      	movs	r2, #115	; 0x73
 802151a:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 802151c:	f107 020c 	add.w	r2, r7, #12
 8021520:	f107 0310 	add.w	r3, r7, #16
 8021524:	4611      	mov	r1, r2
 8021526:	4618      	mov	r0, r3
 8021528:	f003 f938 	bl	802479c <HAL_FLASHEx_Erase>
 802152c:	4603      	mov	r3, r0
 802152e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 8021532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021536:	2b00      	cmp	r3, #0
 8021538:	d13c      	bne.n	80215b4 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 802153a:	687b      	ldr	r3, [r7, #4]
 802153c:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 802153e:	2300      	movs	r3, #0
 8021540:	62bb      	str	r3, [r7, #40]	; 0x28
 8021542:	e01f      	b.n	8021584 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8021544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021546:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 802154a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 802154e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021552:	4413      	add	r3, r2
 8021554:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8021556:	b2db      	uxtb	r3, r3
 8021558:	2200      	movs	r2, #0
 802155a:	461c      	mov	r4, r3
 802155c:	4615      	mov	r5, r2
 802155e:	4622      	mov	r2, r4
 8021560:	462b      	mov	r3, r5
 8021562:	2000      	movs	r0, #0
 8021564:	f002 ff54 	bl	8024410 <HAL_FLASH_Program>
 8021568:	4603      	mov	r3, r0
 802156a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 802156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021572:	2b00      	cmp	r3, #0
 8021574:	d003      	beq.n	802157e <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 8021576:	4815      	ldr	r0, [pc, #84]	; (80215cc <write_cfg_to_flash+0xf4>)
 8021578:	f00c feac 	bl	802e2d4 <puts>
				break;
 802157c:	e005      	b.n	802158a <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 802157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021580:	3301      	adds	r3, #1
 8021582:	62bb      	str	r3, [r7, #40]	; 0x28
 8021584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021586:	2b2f      	cmp	r3, #47	; 0x2f
 8021588:	d9dc      	bls.n	8021544 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 802158a:	f04f 30ff 	mov.w	r0, #4294967295
 802158e:	f002 ffc5 	bl	802451c <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8021592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021596:	2b00      	cmp	r3, #0
 8021598:	d10e      	bne.n	80215b8 <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 802159a:	f002 ffaf 	bl	80244fc <HAL_FLASH_Lock>
 802159e:	4603      	mov	r3, r0
 80215a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 80215a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	e006      	b.n	80215ba <write_cfg_to_flash+0xe2>
			break;
 80215ac:	bf00      	nop
 80215ae:	e004      	b.n	80215ba <write_cfg_to_flash+0xe2>
			break;
 80215b0:	bf00      	nop
 80215b2:	e002      	b.n	80215ba <write_cfg_to_flash+0xe2>
			break;
 80215b4:	bf00      	nop
 80215b6:	e000      	b.n	80215ba <write_cfg_to_flash+0xe2>
	      break;
 80215b8:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 80215ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80215be:	4618      	mov	r0, r3
 80215c0:	3730      	adds	r7, #48	; 0x30
 80215c2:	46bd      	mov	sp, r7
 80215c4:	bdb0      	pop	{r4, r5, r7, pc}
 80215c6:	bf00      	nop
 80215c8:	40023c00 	.word	0x40023c00
 80215cc:	0802f5fc 	.word	0x0802f5fc

080215d0 <ser_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ser_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80215d0:	b480      	push	{r7}
 80215d2:	b087      	sub	sp, #28
 80215d4:	af00      	add	r7, sp, #0
 80215d6:	6078      	str	r0, [r7, #4]
 80215d8:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80215da:	f04f 33ff 	mov.w	r3, #4294967295
 80215de:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80215e0:	2300      	movs	r3, #0
 80215e2:	613b      	str	r3, [r7, #16]
 80215e4:	e014      	b.n	8021610 <ser_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80215e6:	697b      	ldr	r3, [r7, #20]
 80215e8:	0e1b      	lsrs	r3, r3, #24
 80215ea:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80215ec:	687a      	ldr	r2, [r7, #4]
 80215ee:	693b      	ldr	r3, [r7, #16]
 80215f0:	4413      	add	r3, r2
 80215f2:	781a      	ldrb	r2, [r3, #0]
 80215f4:	7bfb      	ldrb	r3, [r7, #15]
 80215f6:	4053      	eors	r3, r2
 80215f8:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80215fa:	697b      	ldr	r3, [r7, #20]
 80215fc:	021a      	lsls	r2, r3, #8
 80215fe:	7bfb      	ldrb	r3, [r7, #15]
 8021600:	4909      	ldr	r1, [pc, #36]	; (8021628 <ser_calcCRC+0x58>)
 8021602:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021606:	4053      	eors	r3, r2
 8021608:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 802160a:	693b      	ldr	r3, [r7, #16]
 802160c:	3301      	adds	r3, #1
 802160e:	613b      	str	r3, [r7, #16]
 8021610:	693a      	ldr	r2, [r7, #16]
 8021612:	683b      	ldr	r3, [r7, #0]
 8021614:	429a      	cmp	r2, r3
 8021616:	d3e6      	bcc.n	80215e6 <ser_calcCRC+0x16>
    }
    return Checksum;
 8021618:	697b      	ldr	r3, [r7, #20]
}
 802161a:	4618      	mov	r0, r3
 802161c:	371c      	adds	r7, #28
 802161e:	46bd      	mov	sp, r7
 8021620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021624:	4770      	bx	lr
 8021626:	bf00      	nop
 8021628:	0802f620 	.word	0x0802f620

0802162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802162c:	b480      	push	{r7}
 802162e:	b083      	sub	sp, #12
 8021630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021632:	2300      	movs	r3, #0
 8021634:	607b      	str	r3, [r7, #4]
 8021636:	4b10      	ldr	r3, [pc, #64]	; (8021678 <HAL_MspInit+0x4c>)
 8021638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802163a:	4a0f      	ldr	r2, [pc, #60]	; (8021678 <HAL_MspInit+0x4c>)
 802163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021640:	6453      	str	r3, [r2, #68]	; 0x44
 8021642:	4b0d      	ldr	r3, [pc, #52]	; (8021678 <HAL_MspInit+0x4c>)
 8021644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802164a:	607b      	str	r3, [r7, #4]
 802164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802164e:	2300      	movs	r3, #0
 8021650:	603b      	str	r3, [r7, #0]
 8021652:	4b09      	ldr	r3, [pc, #36]	; (8021678 <HAL_MspInit+0x4c>)
 8021654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021656:	4a08      	ldr	r2, [pc, #32]	; (8021678 <HAL_MspInit+0x4c>)
 8021658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802165c:	6413      	str	r3, [r2, #64]	; 0x40
 802165e:	4b06      	ldr	r3, [pc, #24]	; (8021678 <HAL_MspInit+0x4c>)
 8021660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021666:	603b      	str	r3, [r7, #0]
 8021668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802166a:	bf00      	nop
 802166c:	370c      	adds	r7, #12
 802166e:	46bd      	mov	sp, r7
 8021670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021674:	4770      	bx	lr
 8021676:	bf00      	nop
 8021678:	40023800 	.word	0x40023800

0802167c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 802167c:	b480      	push	{r7}
 802167e:	b085      	sub	sp, #20
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	681b      	ldr	r3, [r3, #0]
 8021688:	4a0b      	ldr	r2, [pc, #44]	; (80216b8 <HAL_CRC_MspInit+0x3c>)
 802168a:	4293      	cmp	r3, r2
 802168c:	d10d      	bne.n	80216aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 802168e:	2300      	movs	r3, #0
 8021690:	60fb      	str	r3, [r7, #12]
 8021692:	4b0a      	ldr	r3, [pc, #40]	; (80216bc <HAL_CRC_MspInit+0x40>)
 8021694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021696:	4a09      	ldr	r2, [pc, #36]	; (80216bc <HAL_CRC_MspInit+0x40>)
 8021698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802169c:	6313      	str	r3, [r2, #48]	; 0x30
 802169e:	4b07      	ldr	r3, [pc, #28]	; (80216bc <HAL_CRC_MspInit+0x40>)
 80216a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80216a6:	60fb      	str	r3, [r7, #12]
 80216a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80216aa:	bf00      	nop
 80216ac:	3714      	adds	r7, #20
 80216ae:	46bd      	mov	sp, r7
 80216b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216b4:	4770      	bx	lr
 80216b6:	bf00      	nop
 80216b8:	40023000 	.word	0x40023000
 80216bc:	40023800 	.word	0x40023800

080216c0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80216c0:	b580      	push	{r7, lr}
 80216c2:	b084      	sub	sp, #16
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80216c8:	687b      	ldr	r3, [r7, #4]
 80216ca:	681b      	ldr	r3, [r3, #0]
 80216cc:	4a0e      	ldr	r2, [pc, #56]	; (8021708 <HAL_DMA2D_MspInit+0x48>)
 80216ce:	4293      	cmp	r3, r2
 80216d0:	d115      	bne.n	80216fe <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80216d2:	2300      	movs	r3, #0
 80216d4:	60fb      	str	r3, [r7, #12]
 80216d6:	4b0d      	ldr	r3, [pc, #52]	; (802170c <HAL_DMA2D_MspInit+0x4c>)
 80216d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216da:	4a0c      	ldr	r2, [pc, #48]	; (802170c <HAL_DMA2D_MspInit+0x4c>)
 80216dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80216e0:	6313      	str	r3, [r2, #48]	; 0x30
 80216e2:	4b0a      	ldr	r3, [pc, #40]	; (802170c <HAL_DMA2D_MspInit+0x4c>)
 80216e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80216ea:	60fb      	str	r3, [r7, #12]
 80216ec:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80216ee:	2200      	movs	r2, #0
 80216f0:	2105      	movs	r1, #5
 80216f2:	205a      	movs	r0, #90	; 0x5a
 80216f4:	f002 f855 	bl	80237a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80216f8:	205a      	movs	r0, #90	; 0x5a
 80216fa:	f002 f86e 	bl	80237da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80216fe:	bf00      	nop
 8021700:	3710      	adds	r7, #16
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}
 8021706:	bf00      	nop
 8021708:	4002b000 	.word	0x4002b000
 802170c:	40023800 	.word	0x40023800

08021710 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021710:	b580      	push	{r7, lr}
 8021712:	b08a      	sub	sp, #40	; 0x28
 8021714:	af00      	add	r7, sp, #0
 8021716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021718:	f107 0314 	add.w	r3, r7, #20
 802171c:	2200      	movs	r2, #0
 802171e:	601a      	str	r2, [r3, #0]
 8021720:	605a      	str	r2, [r3, #4]
 8021722:	609a      	str	r2, [r3, #8]
 8021724:	60da      	str	r2, [r3, #12]
 8021726:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	4a29      	ldr	r2, [pc, #164]	; (80217d4 <HAL_I2C_MspInit+0xc4>)
 802172e:	4293      	cmp	r3, r2
 8021730:	d14b      	bne.n	80217ca <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021732:	2300      	movs	r3, #0
 8021734:	613b      	str	r3, [r7, #16]
 8021736:	4b28      	ldr	r3, [pc, #160]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 8021738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802173a:	4a27      	ldr	r2, [pc, #156]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 802173c:	f043 0304 	orr.w	r3, r3, #4
 8021740:	6313      	str	r3, [r2, #48]	; 0x30
 8021742:	4b25      	ldr	r3, [pc, #148]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 8021744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021746:	f003 0304 	and.w	r3, r3, #4
 802174a:	613b      	str	r3, [r7, #16]
 802174c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802174e:	2300      	movs	r3, #0
 8021750:	60fb      	str	r3, [r7, #12]
 8021752:	4b21      	ldr	r3, [pc, #132]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 8021754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021756:	4a20      	ldr	r2, [pc, #128]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 8021758:	f043 0301 	orr.w	r3, r3, #1
 802175c:	6313      	str	r3, [r2, #48]	; 0x30
 802175e:	4b1e      	ldr	r3, [pc, #120]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 8021760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021762:	f003 0301 	and.w	r3, r3, #1
 8021766:	60fb      	str	r3, [r7, #12]
 8021768:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 802176a:	f44f 7300 	mov.w	r3, #512	; 0x200
 802176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021770:	2312      	movs	r3, #18
 8021772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021774:	2301      	movs	r3, #1
 8021776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021778:	2300      	movs	r3, #0
 802177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802177c:	2304      	movs	r3, #4
 802177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8021780:	f107 0314 	add.w	r3, r7, #20
 8021784:	4619      	mov	r1, r3
 8021786:	4815      	ldr	r0, [pc, #84]	; (80217dc <HAL_I2C_MspInit+0xcc>)
 8021788:	f003 f948 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 802178c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8021790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021792:	2312      	movs	r3, #18
 8021794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021796:	2301      	movs	r3, #1
 8021798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802179a:	2300      	movs	r3, #0
 802179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 802179e:	2304      	movs	r3, #4
 80217a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80217a2:	f107 0314 	add.w	r3, r7, #20
 80217a6:	4619      	mov	r1, r3
 80217a8:	480d      	ldr	r0, [pc, #52]	; (80217e0 <HAL_I2C_MspInit+0xd0>)
 80217aa:	f003 f937 	bl	8024a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80217ae:	2300      	movs	r3, #0
 80217b0:	60bb      	str	r3, [r7, #8]
 80217b2:	4b09      	ldr	r3, [pc, #36]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 80217b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80217b6:	4a08      	ldr	r2, [pc, #32]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 80217b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80217bc:	6413      	str	r3, [r2, #64]	; 0x40
 80217be:	4b06      	ldr	r3, [pc, #24]	; (80217d8 <HAL_I2C_MspInit+0xc8>)
 80217c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80217c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80217c6:	60bb      	str	r3, [r7, #8]
 80217c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80217ca:	bf00      	nop
 80217cc:	3728      	adds	r7, #40	; 0x28
 80217ce:	46bd      	mov	sp, r7
 80217d0:	bd80      	pop	{r7, pc}
 80217d2:	bf00      	nop
 80217d4:	40005c00 	.word	0x40005c00
 80217d8:	40023800 	.word	0x40023800
 80217dc:	40020800 	.word	0x40020800
 80217e0:	40020000 	.word	0x40020000

080217e4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b09a      	sub	sp, #104	; 0x68
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80217ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80217f0:	2200      	movs	r2, #0
 80217f2:	601a      	str	r2, [r3, #0]
 80217f4:	605a      	str	r2, [r3, #4]
 80217f6:	609a      	str	r2, [r3, #8]
 80217f8:	60da      	str	r2, [r3, #12]
 80217fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80217fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021800:	2230      	movs	r2, #48	; 0x30
 8021802:	2100      	movs	r1, #0
 8021804:	4618      	mov	r0, r3
 8021806:	f00c fbf7 	bl	802dff8 <memset>
  if(hltdc->Instance==LTDC)
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	4a85      	ldr	r2, [pc, #532]	; (8021a24 <HAL_LTDC_MspInit+0x240>)
 8021810:	4293      	cmp	r3, r2
 8021812:	f040 8102 	bne.w	8021a1a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8021816:	2308      	movs	r3, #8
 8021818:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 802181a:	2331      	movs	r3, #49	; 0x31
 802181c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 802181e:	2302      	movs	r3, #2
 8021820:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8021822:	2300      	movs	r3, #0
 8021824:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8021826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802182a:	4618      	mov	r0, r3
 802182c:	f006 fa84 	bl	8027d38 <HAL_RCCEx_PeriphCLKConfig>
 8021830:	4603      	mov	r3, r0
 8021832:	2b00      	cmp	r3, #0
 8021834:	d001      	beq.n	802183a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8021836:	f7ff fb23 	bl	8020e80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 802183a:	2300      	movs	r3, #0
 802183c:	623b      	str	r3, [r7, #32]
 802183e:	4b7a      	ldr	r3, [pc, #488]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021842:	4a79      	ldr	r2, [pc, #484]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8021848:	6453      	str	r3, [r2, #68]	; 0x44
 802184a:	4b77      	ldr	r3, [pc, #476]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 802184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802184e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8021852:	623b      	str	r3, [r7, #32]
 8021854:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021856:	2300      	movs	r3, #0
 8021858:	61fb      	str	r3, [r7, #28]
 802185a:	4b73      	ldr	r3, [pc, #460]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 802185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802185e:	4a72      	ldr	r2, [pc, #456]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021860:	f043 0320 	orr.w	r3, r3, #32
 8021864:	6313      	str	r3, [r2, #48]	; 0x30
 8021866:	4b70      	ldr	r3, [pc, #448]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802186a:	f003 0320 	and.w	r3, r3, #32
 802186e:	61fb      	str	r3, [r7, #28]
 8021870:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021872:	2300      	movs	r3, #0
 8021874:	61bb      	str	r3, [r7, #24]
 8021876:	4b6c      	ldr	r3, [pc, #432]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802187a:	4a6b      	ldr	r2, [pc, #428]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 802187c:	f043 0301 	orr.w	r3, r3, #1
 8021880:	6313      	str	r3, [r2, #48]	; 0x30
 8021882:	4b69      	ldr	r3, [pc, #420]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021886:	f003 0301 	and.w	r3, r3, #1
 802188a:	61bb      	str	r3, [r7, #24]
 802188c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802188e:	2300      	movs	r3, #0
 8021890:	617b      	str	r3, [r7, #20]
 8021892:	4b65      	ldr	r3, [pc, #404]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021896:	4a64      	ldr	r2, [pc, #400]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 8021898:	f043 0302 	orr.w	r3, r3, #2
 802189c:	6313      	str	r3, [r2, #48]	; 0x30
 802189e:	4b62      	ldr	r3, [pc, #392]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218a2:	f003 0302 	and.w	r3, r3, #2
 80218a6:	617b      	str	r3, [r7, #20]
 80218a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80218aa:	2300      	movs	r3, #0
 80218ac:	613b      	str	r3, [r7, #16]
 80218ae:	4b5e      	ldr	r3, [pc, #376]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218b2:	4a5d      	ldr	r2, [pc, #372]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80218b8:	6313      	str	r3, [r2, #48]	; 0x30
 80218ba:	4b5b      	ldr	r3, [pc, #364]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80218c2:	613b      	str	r3, [r7, #16]
 80218c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80218c6:	2300      	movs	r3, #0
 80218c8:	60fb      	str	r3, [r7, #12]
 80218ca:	4b57      	ldr	r3, [pc, #348]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218ce:	4a56      	ldr	r2, [pc, #344]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218d0:	f043 0304 	orr.w	r3, r3, #4
 80218d4:	6313      	str	r3, [r2, #48]	; 0x30
 80218d6:	4b54      	ldr	r3, [pc, #336]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218da:	f003 0304 	and.w	r3, r3, #4
 80218de:	60fb      	str	r3, [r7, #12]
 80218e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80218e2:	2300      	movs	r3, #0
 80218e4:	60bb      	str	r3, [r7, #8]
 80218e6:	4b50      	ldr	r3, [pc, #320]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218ea:	4a4f      	ldr	r2, [pc, #316]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218ec:	f043 0308 	orr.w	r3, r3, #8
 80218f0:	6313      	str	r3, [r2, #48]	; 0x30
 80218f2:	4b4d      	ldr	r3, [pc, #308]	; (8021a28 <HAL_LTDC_MspInit+0x244>)
 80218f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80218f6:	f003 0308 	and.w	r3, r3, #8
 80218fa:	60bb      	str	r3, [r7, #8]
 80218fc:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80218fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021902:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021904:	2302      	movs	r3, #2
 8021906:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021908:	2300      	movs	r3, #0
 802190a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802190c:	2300      	movs	r3, #0
 802190e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021910:	230e      	movs	r3, #14
 8021912:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8021914:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021918:	4619      	mov	r1, r3
 802191a:	4844      	ldr	r0, [pc, #272]	; (8021a2c <HAL_LTDC_MspInit+0x248>)
 802191c:	f003 f87e 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8021920:	f641 0358 	movw	r3, #6232	; 0x1858
 8021924:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021926:	2302      	movs	r3, #2
 8021928:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802192a:	2300      	movs	r3, #0
 802192c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802192e:	2300      	movs	r3, #0
 8021930:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021932:	230e      	movs	r3, #14
 8021934:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021936:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802193a:	4619      	mov	r1, r3
 802193c:	483c      	ldr	r0, [pc, #240]	; (8021a30 <HAL_LTDC_MspInit+0x24c>)
 802193e:	f003 f86d 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8021942:	2303      	movs	r3, #3
 8021944:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021946:	2302      	movs	r3, #2
 8021948:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802194a:	2300      	movs	r3, #0
 802194c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802194e:	2300      	movs	r3, #0
 8021950:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8021952:	2309      	movs	r3, #9
 8021954:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021956:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802195a:	4619      	mov	r1, r3
 802195c:	4835      	ldr	r0, [pc, #212]	; (8021a34 <HAL_LTDC_MspInit+0x250>)
 802195e:	f003 f85d 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8021962:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8021966:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021968:	2302      	movs	r3, #2
 802196a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802196c:	2300      	movs	r3, #0
 802196e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021970:	2300      	movs	r3, #0
 8021972:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021974:	230e      	movs	r3, #14
 8021976:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021978:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802197c:	4619      	mov	r1, r3
 802197e:	482d      	ldr	r0, [pc, #180]	; (8021a34 <HAL_LTDC_MspInit+0x250>)
 8021980:	f003 f84c 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8021984:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8021988:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802198a:	2302      	movs	r3, #2
 802198c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802198e:	2300      	movs	r3, #0
 8021990:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021992:	2300      	movs	r3, #0
 8021994:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8021996:	230e      	movs	r3, #14
 8021998:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 802199a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 802199e:	4619      	mov	r1, r3
 80219a0:	4825      	ldr	r0, [pc, #148]	; (8021a38 <HAL_LTDC_MspInit+0x254>)
 80219a2:	f003 f83b 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80219a6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80219aa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219ac:	2302      	movs	r3, #2
 80219ae:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219b0:	2300      	movs	r3, #0
 80219b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219b4:	2300      	movs	r3, #0
 80219b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219b8:	230e      	movs	r3, #14
 80219ba:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80219bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80219c0:	4619      	mov	r1, r3
 80219c2:	481e      	ldr	r0, [pc, #120]	; (8021a3c <HAL_LTDC_MspInit+0x258>)
 80219c4:	f003 f82a 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80219c8:	2348      	movs	r3, #72	; 0x48
 80219ca:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219cc:	2302      	movs	r3, #2
 80219ce:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219d0:	2300      	movs	r3, #0
 80219d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219d4:	2300      	movs	r3, #0
 80219d6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80219d8:	230e      	movs	r3, #14
 80219da:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80219dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80219e0:	4619      	mov	r1, r3
 80219e2:	4817      	ldr	r0, [pc, #92]	; (8021a40 <HAL_LTDC_MspInit+0x25c>)
 80219e4:	f003 f81a 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80219e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80219ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80219ee:	2302      	movs	r3, #2
 80219f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219f2:	2300      	movs	r3, #0
 80219f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80219f6:	2300      	movs	r3, #0
 80219f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80219fa:	2309      	movs	r3, #9
 80219fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80219fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8021a02:	4619      	mov	r1, r3
 8021a04:	480c      	ldr	r0, [pc, #48]	; (8021a38 <HAL_LTDC_MspInit+0x254>)
 8021a06:	f003 f809 	bl	8024a1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8021a0a:	2200      	movs	r2, #0
 8021a0c:	2105      	movs	r1, #5
 8021a0e:	2058      	movs	r0, #88	; 0x58
 8021a10:	f001 fec7 	bl	80237a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8021a14:	2058      	movs	r0, #88	; 0x58
 8021a16:	f001 fee0 	bl	80237da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8021a1a:	bf00      	nop
 8021a1c:	3768      	adds	r7, #104	; 0x68
 8021a1e:	46bd      	mov	sp, r7
 8021a20:	bd80      	pop	{r7, pc}
 8021a22:	bf00      	nop
 8021a24:	40016800 	.word	0x40016800
 8021a28:	40023800 	.word	0x40023800
 8021a2c:	40021400 	.word	0x40021400
 8021a30:	40020000 	.word	0x40020000
 8021a34:	40020400 	.word	0x40020400
 8021a38:	40021800 	.word	0x40021800
 8021a3c:	40020800 	.word	0x40020800
 8021a40:	40020c00 	.word	0x40020c00

08021a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021a44:	b580      	push	{r7, lr}
 8021a46:	b08a      	sub	sp, #40	; 0x28
 8021a48:	af00      	add	r7, sp, #0
 8021a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021a4c:	f107 0314 	add.w	r3, r7, #20
 8021a50:	2200      	movs	r2, #0
 8021a52:	601a      	str	r2, [r3, #0]
 8021a54:	605a      	str	r2, [r3, #4]
 8021a56:	609a      	str	r2, [r3, #8]
 8021a58:	60da      	str	r2, [r3, #12]
 8021a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	681b      	ldr	r3, [r3, #0]
 8021a60:	4a19      	ldr	r2, [pc, #100]	; (8021ac8 <HAL_SPI_MspInit+0x84>)
 8021a62:	4293      	cmp	r3, r2
 8021a64:	d12c      	bne.n	8021ac0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8021a66:	2300      	movs	r3, #0
 8021a68:	613b      	str	r3, [r7, #16]
 8021a6a:	4b18      	ldr	r3, [pc, #96]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021a6e:	4a17      	ldr	r2, [pc, #92]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021a74:	6453      	str	r3, [r2, #68]	; 0x44
 8021a76:	4b15      	ldr	r3, [pc, #84]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021a7e:	613b      	str	r3, [r7, #16]
 8021a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8021a82:	2300      	movs	r3, #0
 8021a84:	60fb      	str	r3, [r7, #12]
 8021a86:	4b11      	ldr	r3, [pc, #68]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a8a:	4a10      	ldr	r2, [pc, #64]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a8c:	f043 0320 	orr.w	r3, r3, #32
 8021a90:	6313      	str	r3, [r2, #48]	; 0x30
 8021a92:	4b0e      	ldr	r3, [pc, #56]	; (8021acc <HAL_SPI_MspInit+0x88>)
 8021a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a96:	f003 0320 	and.w	r3, r3, #32
 8021a9a:	60fb      	str	r3, [r7, #12]
 8021a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8021a9e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8021aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021aa4:	2302      	movs	r3, #2
 8021aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021aac:	2300      	movs	r3, #0
 8021aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8021ab0:	2305      	movs	r3, #5
 8021ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021ab4:	f107 0314 	add.w	r3, r7, #20
 8021ab8:	4619      	mov	r1, r3
 8021aba:	4805      	ldr	r0, [pc, #20]	; (8021ad0 <HAL_SPI_MspInit+0x8c>)
 8021abc:	f002 ffae 	bl	8024a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8021ac0:	bf00      	nop
 8021ac2:	3728      	adds	r7, #40	; 0x28
 8021ac4:	46bd      	mov	sp, r7
 8021ac6:	bd80      	pop	{r7, pc}
 8021ac8:	40015000 	.word	0x40015000
 8021acc:	40023800 	.word	0x40023800
 8021ad0:	40021400 	.word	0x40021400

08021ad4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b082      	sub	sp, #8
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	4a08      	ldr	r2, [pc, #32]	; (8021b04 <HAL_SPI_MspDeInit+0x30>)
 8021ae2:	4293      	cmp	r3, r2
 8021ae4:	d10a      	bne.n	8021afc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8021ae6:	4b08      	ldr	r3, [pc, #32]	; (8021b08 <HAL_SPI_MspDeInit+0x34>)
 8021ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021aea:	4a07      	ldr	r2, [pc, #28]	; (8021b08 <HAL_SPI_MspDeInit+0x34>)
 8021aec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8021af0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8021af2:	f44f 7160 	mov.w	r1, #896	; 0x380
 8021af6:	4805      	ldr	r0, [pc, #20]	; (8021b0c <HAL_SPI_MspDeInit+0x38>)
 8021af8:	f003 f93c 	bl	8024d74 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8021afc:	bf00      	nop
 8021afe:	3708      	adds	r7, #8
 8021b00:	46bd      	mov	sp, r7
 8021b02:	bd80      	pop	{r7, pc}
 8021b04:	40015000 	.word	0x40015000
 8021b08:	40023800 	.word	0x40023800
 8021b0c:	40021400 	.word	0x40021400

08021b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021b10:	b480      	push	{r7}
 8021b12:	b085      	sub	sp, #20
 8021b14:	af00      	add	r7, sp, #0
 8021b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	681b      	ldr	r3, [r3, #0]
 8021b1c:	4a0b      	ldr	r2, [pc, #44]	; (8021b4c <HAL_TIM_Base_MspInit+0x3c>)
 8021b1e:	4293      	cmp	r3, r2
 8021b20:	d10d      	bne.n	8021b3e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021b22:	2300      	movs	r3, #0
 8021b24:	60fb      	str	r3, [r7, #12]
 8021b26:	4b0a      	ldr	r3, [pc, #40]	; (8021b50 <HAL_TIM_Base_MspInit+0x40>)
 8021b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b2a:	4a09      	ldr	r2, [pc, #36]	; (8021b50 <HAL_TIM_Base_MspInit+0x40>)
 8021b2c:	f043 0301 	orr.w	r3, r3, #1
 8021b30:	6453      	str	r3, [r2, #68]	; 0x44
 8021b32:	4b07      	ldr	r3, [pc, #28]	; (8021b50 <HAL_TIM_Base_MspInit+0x40>)
 8021b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b36:	f003 0301 	and.w	r3, r3, #1
 8021b3a:	60fb      	str	r3, [r7, #12]
 8021b3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8021b3e:	bf00      	nop
 8021b40:	3714      	adds	r7, #20
 8021b42:	46bd      	mov	sp, r7
 8021b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b48:	4770      	bx	lr
 8021b4a:	bf00      	nop
 8021b4c:	40010000 	.word	0x40010000
 8021b50:	40023800 	.word	0x40023800

08021b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8021b54:	b580      	push	{r7, lr}
 8021b56:	b08c      	sub	sp, #48	; 0x30
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b5c:	f107 031c 	add.w	r3, r7, #28
 8021b60:	2200      	movs	r2, #0
 8021b62:	601a      	str	r2, [r3, #0]
 8021b64:	605a      	str	r2, [r3, #4]
 8021b66:	609a      	str	r2, [r3, #8]
 8021b68:	60da      	str	r2, [r3, #12]
 8021b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	681b      	ldr	r3, [r3, #0]
 8021b70:	4a46      	ldr	r2, [pc, #280]	; (8021c8c <HAL_UART_MspInit+0x138>)
 8021b72:	4293      	cmp	r3, r2
 8021b74:	d153      	bne.n	8021c1e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8021b76:	2300      	movs	r3, #0
 8021b78:	61bb      	str	r3, [r7, #24]
 8021b7a:	4b45      	ldr	r3, [pc, #276]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b7e:	4a44      	ldr	r2, [pc, #272]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8021b84:	6413      	str	r3, [r2, #64]	; 0x40
 8021b86:	4b42      	ldr	r3, [pc, #264]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8021b8e:	61bb      	str	r3, [r7, #24]
 8021b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021b92:	2300      	movs	r3, #0
 8021b94:	617b      	str	r3, [r7, #20]
 8021b96:	4b3e      	ldr	r3, [pc, #248]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b9a:	4a3d      	ldr	r2, [pc, #244]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021b9c:	f043 0304 	orr.w	r3, r3, #4
 8021ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8021ba2:	4b3b      	ldr	r3, [pc, #236]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ba6:	f003 0304 	and.w	r3, r3, #4
 8021baa:	617b      	str	r3, [r7, #20]
 8021bac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021bae:	2300      	movs	r3, #0
 8021bb0:	613b      	str	r3, [r7, #16]
 8021bb2:	4b37      	ldr	r3, [pc, #220]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bb6:	4a36      	ldr	r2, [pc, #216]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021bb8:	f043 0308 	orr.w	r3, r3, #8
 8021bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8021bbe:	4b34      	ldr	r3, [pc, #208]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021bc2:	f003 0308 	and.w	r3, r3, #8
 8021bc6:	613b      	str	r3, [r7, #16]
 8021bc8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bd0:	2302      	movs	r3, #2
 8021bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bd4:	2300      	movs	r3, #0
 8021bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bd8:	2303      	movs	r3, #3
 8021bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021bdc:	2308      	movs	r3, #8
 8021bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021be0:	f107 031c 	add.w	r3, r7, #28
 8021be4:	4619      	mov	r1, r3
 8021be6:	482b      	ldr	r0, [pc, #172]	; (8021c94 <HAL_UART_MspInit+0x140>)
 8021be8:	f002 ff18 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021bec:	2304      	movs	r3, #4
 8021bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bf0:	2302      	movs	r3, #2
 8021bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bf8:	2303      	movs	r3, #3
 8021bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8021bfc:	2308      	movs	r3, #8
 8021bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021c00:	f107 031c 	add.w	r3, r7, #28
 8021c04:	4619      	mov	r1, r3
 8021c06:	4824      	ldr	r0, [pc, #144]	; (8021c98 <HAL_UART_MspInit+0x144>)
 8021c08:	f002 ff08 	bl	8024a1c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	2100      	movs	r1, #0
 8021c10:	2035      	movs	r0, #53	; 0x35
 8021c12:	f001 fdc6 	bl	80237a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8021c16:	2035      	movs	r0, #53	; 0x35
 8021c18:	f001 fddf 	bl	80237da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8021c1c:	e031      	b.n	8021c82 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	681b      	ldr	r3, [r3, #0]
 8021c22:	4a1e      	ldr	r2, [pc, #120]	; (8021c9c <HAL_UART_MspInit+0x148>)
 8021c24:	4293      	cmp	r3, r2
 8021c26:	d12c      	bne.n	8021c82 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8021c28:	2300      	movs	r3, #0
 8021c2a:	60fb      	str	r3, [r7, #12]
 8021c2c:	4b18      	ldr	r3, [pc, #96]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c30:	4a17      	ldr	r2, [pc, #92]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c32:	f043 0310 	orr.w	r3, r3, #16
 8021c36:	6453      	str	r3, [r2, #68]	; 0x44
 8021c38:	4b15      	ldr	r3, [pc, #84]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021c3c:	f003 0310 	and.w	r3, r3, #16
 8021c40:	60fb      	str	r3, [r7, #12]
 8021c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021c44:	2300      	movs	r3, #0
 8021c46:	60bb      	str	r3, [r7, #8]
 8021c48:	4b11      	ldr	r3, [pc, #68]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c4c:	4a10      	ldr	r2, [pc, #64]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c4e:	f043 0301 	orr.w	r3, r3, #1
 8021c52:	6313      	str	r3, [r2, #48]	; 0x30
 8021c54:	4b0e      	ldr	r3, [pc, #56]	; (8021c90 <HAL_UART_MspInit+0x13c>)
 8021c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c58:	f003 0301 	and.w	r3, r3, #1
 8021c5c:	60bb      	str	r3, [r7, #8]
 8021c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8021c60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8021c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021c66:	2302      	movs	r3, #2
 8021c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c6a:	2300      	movs	r3, #0
 8021c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021c6e:	2303      	movs	r3, #3
 8021c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8021c72:	2307      	movs	r3, #7
 8021c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021c76:	f107 031c 	add.w	r3, r7, #28
 8021c7a:	4619      	mov	r1, r3
 8021c7c:	4808      	ldr	r0, [pc, #32]	; (8021ca0 <HAL_UART_MspInit+0x14c>)
 8021c7e:	f002 fecd 	bl	8024a1c <HAL_GPIO_Init>
}
 8021c82:	bf00      	nop
 8021c84:	3730      	adds	r7, #48	; 0x30
 8021c86:	46bd      	mov	sp, r7
 8021c88:	bd80      	pop	{r7, pc}
 8021c8a:	bf00      	nop
 8021c8c:	40005000 	.word	0x40005000
 8021c90:	40023800 	.word	0x40023800
 8021c94:	40020800 	.word	0x40020800
 8021c98:	40020c00 	.word	0x40020c00
 8021c9c:	40011000 	.word	0x40011000
 8021ca0:	40020000 	.word	0x40020000

08021ca4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8021ca4:	b580      	push	{r7, lr}
 8021ca6:	b086      	sub	sp, #24
 8021ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8021caa:	1d3b      	adds	r3, r7, #4
 8021cac:	2200      	movs	r2, #0
 8021cae:	601a      	str	r2, [r3, #0]
 8021cb0:	605a      	str	r2, [r3, #4]
 8021cb2:	609a      	str	r2, [r3, #8]
 8021cb4:	60da      	str	r2, [r3, #12]
 8021cb6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8021cb8:	4b3b      	ldr	r3, [pc, #236]	; (8021da8 <HAL_FMC_MspInit+0x104>)
 8021cba:	681b      	ldr	r3, [r3, #0]
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	d16f      	bne.n	8021da0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8021cc0:	4b39      	ldr	r3, [pc, #228]	; (8021da8 <HAL_FMC_MspInit+0x104>)
 8021cc2:	2201      	movs	r2, #1
 8021cc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	603b      	str	r3, [r7, #0]
 8021cca:	4b38      	ldr	r3, [pc, #224]	; (8021dac <HAL_FMC_MspInit+0x108>)
 8021ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021cce:	4a37      	ldr	r2, [pc, #220]	; (8021dac <HAL_FMC_MspInit+0x108>)
 8021cd0:	f043 0301 	orr.w	r3, r3, #1
 8021cd4:	6393      	str	r3, [r2, #56]	; 0x38
 8021cd6:	4b35      	ldr	r3, [pc, #212]	; (8021dac <HAL_FMC_MspInit+0x108>)
 8021cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021cda:	f003 0301 	and.w	r3, r3, #1
 8021cde:	603b      	str	r3, [r7, #0]
 8021ce0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8021ce2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8021ce6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ce8:	2302      	movs	r3, #2
 8021cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021cec:	2300      	movs	r3, #0
 8021cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021cf0:	2303      	movs	r3, #3
 8021cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021cf4:	230c      	movs	r3, #12
 8021cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8021cf8:	1d3b      	adds	r3, r7, #4
 8021cfa:	4619      	mov	r1, r3
 8021cfc:	482c      	ldr	r0, [pc, #176]	; (8021db0 <HAL_FMC_MspInit+0x10c>)
 8021cfe:	f002 fe8d 	bl	8024a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8021d02:	2301      	movs	r3, #1
 8021d04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d06:	2302      	movs	r3, #2
 8021d08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d0a:	2300      	movs	r3, #0
 8021d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d0e:	2303      	movs	r3, #3
 8021d10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021d12:	230c      	movs	r3, #12
 8021d14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8021d16:	1d3b      	adds	r3, r7, #4
 8021d18:	4619      	mov	r1, r3
 8021d1a:	4826      	ldr	r0, [pc, #152]	; (8021db4 <HAL_FMC_MspInit+0x110>)
 8021d1c:	f002 fe7e 	bl	8024a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8021d20:	f248 1333 	movw	r3, #33075	; 0x8133
 8021d24:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d26:	2302      	movs	r3, #2
 8021d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d2a:	2300      	movs	r3, #0
 8021d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d2e:	2303      	movs	r3, #3
 8021d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021d32:	230c      	movs	r3, #12
 8021d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8021d36:	1d3b      	adds	r3, r7, #4
 8021d38:	4619      	mov	r1, r3
 8021d3a:	481f      	ldr	r0, [pc, #124]	; (8021db8 <HAL_FMC_MspInit+0x114>)
 8021d3c:	f002 fe6e 	bl	8024a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8021d40:	f64f 7383 	movw	r3, #65411	; 0xff83
 8021d44:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d46:	2302      	movs	r3, #2
 8021d48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d4a:	2300      	movs	r3, #0
 8021d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d4e:	2303      	movs	r3, #3
 8021d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021d52:	230c      	movs	r3, #12
 8021d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021d56:	1d3b      	adds	r3, r7, #4
 8021d58:	4619      	mov	r1, r3
 8021d5a:	4818      	ldr	r0, [pc, #96]	; (8021dbc <HAL_FMC_MspInit+0x118>)
 8021d5c:	f002 fe5e 	bl	8024a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8021d60:	f24c 7303 	movw	r3, #50947	; 0xc703
 8021d64:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d66:	2302      	movs	r3, #2
 8021d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d6e:	2303      	movs	r3, #3
 8021d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021d72:	230c      	movs	r3, #12
 8021d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021d76:	1d3b      	adds	r3, r7, #4
 8021d78:	4619      	mov	r1, r3
 8021d7a:	4811      	ldr	r0, [pc, #68]	; (8021dc0 <HAL_FMC_MspInit+0x11c>)
 8021d7c:	f002 fe4e 	bl	8024a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8021d80:	2360      	movs	r3, #96	; 0x60
 8021d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d84:	2302      	movs	r3, #2
 8021d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d88:	2300      	movs	r3, #0
 8021d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021d8c:	2303      	movs	r3, #3
 8021d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8021d90:	230c      	movs	r3, #12
 8021d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021d94:	1d3b      	adds	r3, r7, #4
 8021d96:	4619      	mov	r1, r3
 8021d98:	480a      	ldr	r0, [pc, #40]	; (8021dc4 <HAL_FMC_MspInit+0x120>)
 8021d9a:	f002 fe3f 	bl	8024a1c <HAL_GPIO_Init>
 8021d9e:	e000      	b.n	8021da2 <HAL_FMC_MspInit+0xfe>
    return;
 8021da0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8021da2:	3718      	adds	r7, #24
 8021da4:	46bd      	mov	sp, r7
 8021da6:	bd80      	pop	{r7, pc}
 8021da8:	2000084c 	.word	0x2000084c
 8021dac:	40023800 	.word	0x40023800
 8021db0:	40021400 	.word	0x40021400
 8021db4:	40020800 	.word	0x40020800
 8021db8:	40021800 	.word	0x40021800
 8021dbc:	40021000 	.word	0x40021000
 8021dc0:	40020c00 	.word	0x40020c00
 8021dc4:	40020400 	.word	0x40020400

08021dc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8021dc8:	b580      	push	{r7, lr}
 8021dca:	b082      	sub	sp, #8
 8021dcc:	af00      	add	r7, sp, #0
 8021dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8021dd0:	f7ff ff68 	bl	8021ca4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8021dd4:	bf00      	nop
 8021dd6:	3708      	adds	r7, #8
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	bd80      	pop	{r7, pc}

08021ddc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021ddc:	b580      	push	{r7, lr}
 8021dde:	b08e      	sub	sp, #56	; 0x38
 8021de0:	af00      	add	r7, sp, #0
 8021de2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8021de4:	2300      	movs	r3, #0
 8021de6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8021de8:	2300      	movs	r3, #0
 8021dea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8021dec:	2300      	movs	r3, #0
 8021dee:	60fb      	str	r3, [r7, #12]
 8021df0:	4b33      	ldr	r3, [pc, #204]	; (8021ec0 <HAL_InitTick+0xe4>)
 8021df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021df4:	4a32      	ldr	r2, [pc, #200]	; (8021ec0 <HAL_InitTick+0xe4>)
 8021df6:	f043 0310 	orr.w	r3, r3, #16
 8021dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8021dfc:	4b30      	ldr	r3, [pc, #192]	; (8021ec0 <HAL_InitTick+0xe4>)
 8021dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021e00:	f003 0310 	and.w	r3, r3, #16
 8021e04:	60fb      	str	r3, [r7, #12]
 8021e06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8021e08:	f107 0210 	add.w	r2, r7, #16
 8021e0c:	f107 0314 	add.w	r3, r7, #20
 8021e10:	4611      	mov	r1, r2
 8021e12:	4618      	mov	r0, r3
 8021e14:	f005 ff5e 	bl	8027cd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8021e18:	6a3b      	ldr	r3, [r7, #32]
 8021e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8021e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e1e:	2b00      	cmp	r3, #0
 8021e20:	d103      	bne.n	8021e2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8021e22:	f005 ff2f 	bl	8027c84 <HAL_RCC_GetPCLK1Freq>
 8021e26:	6378      	str	r0, [r7, #52]	; 0x34
 8021e28:	e004      	b.n	8021e34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8021e2a:	f005 ff2b 	bl	8027c84 <HAL_RCC_GetPCLK1Freq>
 8021e2e:	4603      	mov	r3, r0
 8021e30:	005b      	lsls	r3, r3, #1
 8021e32:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8021e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021e36:	4a23      	ldr	r2, [pc, #140]	; (8021ec4 <HAL_InitTick+0xe8>)
 8021e38:	fba2 2303 	umull	r2, r3, r2, r3
 8021e3c:	0c9b      	lsrs	r3, r3, #18
 8021e3e:	3b01      	subs	r3, #1
 8021e40:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8021e42:	4b21      	ldr	r3, [pc, #132]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e44:	4a21      	ldr	r2, [pc, #132]	; (8021ecc <HAL_InitTick+0xf0>)
 8021e46:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8021e48:	4b1f      	ldr	r3, [pc, #124]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021e4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8021e50:	4a1d      	ldr	r2, [pc, #116]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8021e56:	4b1c      	ldr	r3, [pc, #112]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e58:	2200      	movs	r2, #0
 8021e5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021e5c:	4b1a      	ldr	r3, [pc, #104]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e5e:	2200      	movs	r2, #0
 8021e60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021e62:	4b19      	ldr	r3, [pc, #100]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e64:	2200      	movs	r2, #0
 8021e66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8021e68:	4817      	ldr	r0, [pc, #92]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e6a:	f006 ff95 	bl	8028d98 <HAL_TIM_Base_Init>
 8021e6e:	4603      	mov	r3, r0
 8021e70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8021e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d11b      	bne.n	8021eb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8021e7c:	4812      	ldr	r0, [pc, #72]	; (8021ec8 <HAL_InitTick+0xec>)
 8021e7e:	f006 ffdb 	bl	8028e38 <HAL_TIM_Base_Start_IT>
 8021e82:	4603      	mov	r3, r0
 8021e84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8021e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8021e8c:	2b00      	cmp	r3, #0
 8021e8e:	d111      	bne.n	8021eb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021e90:	2036      	movs	r0, #54	; 0x36
 8021e92:	f001 fca2 	bl	80237da <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8021e96:	687b      	ldr	r3, [r7, #4]
 8021e98:	2b0f      	cmp	r3, #15
 8021e9a:	d808      	bhi.n	8021eae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8021e9c:	2200      	movs	r2, #0
 8021e9e:	6879      	ldr	r1, [r7, #4]
 8021ea0:	2036      	movs	r0, #54	; 0x36
 8021ea2:	f001 fc7e 	bl	80237a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8021ea6:	4a0a      	ldr	r2, [pc, #40]	; (8021ed0 <HAL_InitTick+0xf4>)
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	6013      	str	r3, [r2, #0]
 8021eac:	e002      	b.n	8021eb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8021eae:	2301      	movs	r3, #1
 8021eb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8021eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8021eb8:	4618      	mov	r0, r3
 8021eba:	3738      	adds	r7, #56	; 0x38
 8021ebc:	46bd      	mov	sp, r7
 8021ebe:	bd80      	pop	{r7, pc}
 8021ec0:	40023800 	.word	0x40023800
 8021ec4:	431bde83 	.word	0x431bde83
 8021ec8:	20000850 	.word	0x20000850
 8021ecc:	40001000 	.word	0x40001000
 8021ed0:	20000058 	.word	0x20000058

08021ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021ed4:	b480      	push	{r7}
 8021ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021ed8:	e7fe      	b.n	8021ed8 <NMI_Handler+0x4>

08021eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021eda:	b480      	push	{r7}
 8021edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021ede:	e7fe      	b.n	8021ede <HardFault_Handler+0x4>

08021ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021ee0:	b480      	push	{r7}
 8021ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021ee4:	e7fe      	b.n	8021ee4 <MemManage_Handler+0x4>

08021ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021ee6:	b480      	push	{r7}
 8021ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021eea:	e7fe      	b.n	8021eea <BusFault_Handler+0x4>

08021eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021eec:	b480      	push	{r7}
 8021eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021ef0:	e7fe      	b.n	8021ef0 <UsageFault_Handler+0x4>

08021ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021ef2:	b480      	push	{r7}
 8021ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021ef6:	bf00      	nop
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021efe:	4770      	bx	lr

08021f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021f00:	b480      	push	{r7}
 8021f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021f04:	bf00      	nop
 8021f06:	46bd      	mov	sp, r7
 8021f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f0c:	4770      	bx	lr

08021f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021f0e:	b480      	push	{r7}
 8021f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021f12:	bf00      	nop
 8021f14:	46bd      	mov	sp, r7
 8021f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f1a:	4770      	bx	lr

08021f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8021f1c:	b480      	push	{r7}
 8021f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021f20:	bf00      	nop
 8021f22:	46bd      	mov	sp, r7
 8021f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f28:	4770      	bx	lr

08021f2a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8021f2a:	b580      	push	{r7, lr}
 8021f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8021f2e:	2001      	movs	r0, #1
 8021f30:	f003 f846 	bl	8024fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8021f34:	bf00      	nop
 8021f36:	bd80      	pop	{r7, pc}

08021f38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8021f3c:	4802      	ldr	r0, [pc, #8]	; (8021f48 <UART5_IRQHandler+0x10>)
 8021f3e:	f007 fcbd 	bl	80298bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8021f42:	bf00      	nop
 8021f44:	bd80      	pop	{r7, pc}
 8021f46:	bf00      	nop
 8021f48:	200002e4 	.word	0x200002e4

08021f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8021f4c:	b580      	push	{r7, lr}
 8021f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8021f50:	4802      	ldr	r0, [pc, #8]	; (8021f5c <TIM6_DAC_IRQHandler+0x10>)
 8021f52:	f006 ffe1 	bl	8028f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8021f56:	bf00      	nop
 8021f58:	bd80      	pop	{r7, pc}
 8021f5a:	bf00      	nop
 8021f5c:	20000850 	.word	0x20000850

08021f60 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8021f64:	4802      	ldr	r0, [pc, #8]	; (8021f70 <OTG_HS_IRQHandler+0x10>)
 8021f66:	f003 faad 	bl	80254c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8021f6a:	bf00      	nop
 8021f6c:	bd80      	pop	{r7, pc}
 8021f6e:	bf00      	nop
 8021f70:	20000ef0 	.word	0x20000ef0

08021f74 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8021f74:	b580      	push	{r7, lr}
 8021f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8021f78:	4802      	ldr	r0, [pc, #8]	; (8021f84 <LTDC_IRQHandler+0x10>)
 8021f7a:	f004 fed3 	bl	8026d24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8021f7e:	bf00      	nop
 8021f80:	bd80      	pop	{r7, pc}
 8021f82:	bf00      	nop
 8021f84:	2000019c 	.word	0x2000019c

08021f88 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8021f88:	b580      	push	{r7, lr}
 8021f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8021f8c:	4802      	ldr	r0, [pc, #8]	; (8021f98 <DMA2D_IRQHandler+0x10>)
 8021f8e:	f002 f800 	bl	8023f92 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8021f92:	bf00      	nop
 8021f94:	bd80      	pop	{r7, pc}
 8021f96:	bf00      	nop
 8021f98:	20000108 	.word	0x20000108

08021f9c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8021f9c:	b480      	push	{r7}
 8021f9e:	b083      	sub	sp, #12
 8021fa0:	af00      	add	r7, sp, #0
 8021fa2:	4603      	mov	r3, r0
 8021fa4:	80fb      	strh	r3, [r7, #6]
//
//	case B1_Pin: //Blue Button Interrupt
//		ota_update_request = true;
//
//	}
}
 8021fa6:	bf00      	nop
 8021fa8:	370c      	adds	r7, #12
 8021faa:	46bd      	mov	sp, r7
 8021fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fb0:	4770      	bx	lr

08021fb2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021fb2:	b580      	push	{r7, lr}
 8021fb4:	b086      	sub	sp, #24
 8021fb6:	af00      	add	r7, sp, #0
 8021fb8:	60f8      	str	r0, [r7, #12]
 8021fba:	60b9      	str	r1, [r7, #8]
 8021fbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021fbe:	2300      	movs	r3, #0
 8021fc0:	617b      	str	r3, [r7, #20]
 8021fc2:	e00a      	b.n	8021fda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021fc4:	f3af 8000 	nop.w
 8021fc8:	4601      	mov	r1, r0
 8021fca:	68bb      	ldr	r3, [r7, #8]
 8021fcc:	1c5a      	adds	r2, r3, #1
 8021fce:	60ba      	str	r2, [r7, #8]
 8021fd0:	b2ca      	uxtb	r2, r1
 8021fd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021fd4:	697b      	ldr	r3, [r7, #20]
 8021fd6:	3301      	adds	r3, #1
 8021fd8:	617b      	str	r3, [r7, #20]
 8021fda:	697a      	ldr	r2, [r7, #20]
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	429a      	cmp	r2, r3
 8021fe0:	dbf0      	blt.n	8021fc4 <_read+0x12>
  }

  return len;
 8021fe2:	687b      	ldr	r3, [r7, #4]
}
 8021fe4:	4618      	mov	r0, r3
 8021fe6:	3718      	adds	r7, #24
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	bd80      	pop	{r7, pc}

08021fec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b086      	sub	sp, #24
 8021ff0:	af00      	add	r7, sp, #0
 8021ff2:	60f8      	str	r0, [r7, #12]
 8021ff4:	60b9      	str	r1, [r7, #8]
 8021ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	617b      	str	r3, [r7, #20]
 8021ffc:	e009      	b.n	8022012 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8021ffe:	68bb      	ldr	r3, [r7, #8]
 8022000:	1c5a      	adds	r2, r3, #1
 8022002:	60ba      	str	r2, [r7, #8]
 8022004:	781b      	ldrb	r3, [r3, #0]
 8022006:	4618      	mov	r0, r3
 8022008:	f7fe ff16 	bl	8020e38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802200c:	697b      	ldr	r3, [r7, #20]
 802200e:	3301      	adds	r3, #1
 8022010:	617b      	str	r3, [r7, #20]
 8022012:	697a      	ldr	r2, [r7, #20]
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	429a      	cmp	r2, r3
 8022018:	dbf1      	blt.n	8021ffe <_write+0x12>
  }
  return len;
 802201a:	687b      	ldr	r3, [r7, #4]
}
 802201c:	4618      	mov	r0, r3
 802201e:	3718      	adds	r7, #24
 8022020:	46bd      	mov	sp, r7
 8022022:	bd80      	pop	{r7, pc}

08022024 <_close>:

int _close(int file)
{
 8022024:	b480      	push	{r7}
 8022026:	b083      	sub	sp, #12
 8022028:	af00      	add	r7, sp, #0
 802202a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802202c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022030:	4618      	mov	r0, r3
 8022032:	370c      	adds	r7, #12
 8022034:	46bd      	mov	sp, r7
 8022036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802203a:	4770      	bx	lr

0802203c <_fstat>:


int _fstat(int file, struct stat *st)
{
 802203c:	b480      	push	{r7}
 802203e:	b083      	sub	sp, #12
 8022040:	af00      	add	r7, sp, #0
 8022042:	6078      	str	r0, [r7, #4]
 8022044:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8022046:	683b      	ldr	r3, [r7, #0]
 8022048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802204c:	605a      	str	r2, [r3, #4]
  return 0;
 802204e:	2300      	movs	r3, #0
}
 8022050:	4618      	mov	r0, r3
 8022052:	370c      	adds	r7, #12
 8022054:	46bd      	mov	sp, r7
 8022056:	f85d 7b04 	ldr.w	r7, [sp], #4
 802205a:	4770      	bx	lr

0802205c <_isatty>:

int _isatty(int file)
{
 802205c:	b480      	push	{r7}
 802205e:	b083      	sub	sp, #12
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8022064:	2301      	movs	r3, #1
}
 8022066:	4618      	mov	r0, r3
 8022068:	370c      	adds	r7, #12
 802206a:	46bd      	mov	sp, r7
 802206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022070:	4770      	bx	lr

08022072 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8022072:	b480      	push	{r7}
 8022074:	b085      	sub	sp, #20
 8022076:	af00      	add	r7, sp, #0
 8022078:	60f8      	str	r0, [r7, #12]
 802207a:	60b9      	str	r1, [r7, #8]
 802207c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802207e:	2300      	movs	r3, #0
}
 8022080:	4618      	mov	r0, r3
 8022082:	3714      	adds	r7, #20
 8022084:	46bd      	mov	sp, r7
 8022086:	f85d 7b04 	ldr.w	r7, [sp], #4
 802208a:	4770      	bx	lr

0802208c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802208c:	b580      	push	{r7, lr}
 802208e:	b086      	sub	sp, #24
 8022090:	af00      	add	r7, sp, #0
 8022092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8022094:	4a14      	ldr	r2, [pc, #80]	; (80220e8 <_sbrk+0x5c>)
 8022096:	4b15      	ldr	r3, [pc, #84]	; (80220ec <_sbrk+0x60>)
 8022098:	1ad3      	subs	r3, r2, r3
 802209a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802209c:	697b      	ldr	r3, [r7, #20]
 802209e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80220a0:	4b13      	ldr	r3, [pc, #76]	; (80220f0 <_sbrk+0x64>)
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	2b00      	cmp	r3, #0
 80220a6:	d102      	bne.n	80220ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80220a8:	4b11      	ldr	r3, [pc, #68]	; (80220f0 <_sbrk+0x64>)
 80220aa:	4a12      	ldr	r2, [pc, #72]	; (80220f4 <_sbrk+0x68>)
 80220ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80220ae:	4b10      	ldr	r3, [pc, #64]	; (80220f0 <_sbrk+0x64>)
 80220b0:	681a      	ldr	r2, [r3, #0]
 80220b2:	687b      	ldr	r3, [r7, #4]
 80220b4:	4413      	add	r3, r2
 80220b6:	693a      	ldr	r2, [r7, #16]
 80220b8:	429a      	cmp	r2, r3
 80220ba:	d207      	bcs.n	80220cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80220bc:	f00b ff62 	bl	802df84 <__errno>
 80220c0:	4603      	mov	r3, r0
 80220c2:	220c      	movs	r2, #12
 80220c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80220c6:	f04f 33ff 	mov.w	r3, #4294967295
 80220ca:	e009      	b.n	80220e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80220cc:	4b08      	ldr	r3, [pc, #32]	; (80220f0 <_sbrk+0x64>)
 80220ce:	681b      	ldr	r3, [r3, #0]
 80220d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80220d2:	4b07      	ldr	r3, [pc, #28]	; (80220f0 <_sbrk+0x64>)
 80220d4:	681a      	ldr	r2, [r3, #0]
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	4413      	add	r3, r2
 80220da:	4a05      	ldr	r2, [pc, #20]	; (80220f0 <_sbrk+0x64>)
 80220dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80220de:	68fb      	ldr	r3, [r7, #12]
}
 80220e0:	4618      	mov	r0, r3
 80220e2:	3718      	adds	r7, #24
 80220e4:	46bd      	mov	sp, r7
 80220e6:	bd80      	pop	{r7, pc}
 80220e8:	20030000 	.word	0x20030000
 80220ec:	00000400 	.word	0x00000400
 80220f0:	20000898 	.word	0x20000898
 80220f4:	20001208 	.word	0x20001208

080220f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80220f8:	b480      	push	{r7}
 80220fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80220fc:	4b07      	ldr	r3, [pc, #28]	; (802211c <SystemInit+0x24>)
 80220fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022102:	4a06      	ldr	r2, [pc, #24]	; (802211c <SystemInit+0x24>)
 8022104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 802210c:	4b03      	ldr	r3, [pc, #12]	; (802211c <SystemInit+0x24>)
 802210e:	4a04      	ldr	r2, [pc, #16]	; (8022120 <SystemInit+0x28>)
 8022110:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8022112:	bf00      	nop
 8022114:	46bd      	mov	sp, r7
 8022116:	f85d 7b04 	ldr.w	r7, [sp], #4
 802211a:	4770      	bx	lr
 802211c:	e000ed00 	.word	0xe000ed00
 8022120:	08020000 	.word	0x08020000

08022124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8022124:	f8df d034 	ldr.w	sp, [pc, #52]	; 802215c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8022128:	480d      	ldr	r0, [pc, #52]	; (8022160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 802212a:	490e      	ldr	r1, [pc, #56]	; (8022164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 802212c:	4a0e      	ldr	r2, [pc, #56]	; (8022168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 802212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8022130:	e002      	b.n	8022138 <LoopCopyDataInit>

08022132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8022132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8022134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8022136:	3304      	adds	r3, #4

08022138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8022138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802213c:	d3f9      	bcc.n	8022132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802213e:	4a0b      	ldr	r2, [pc, #44]	; (802216c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8022140:	4c0b      	ldr	r4, [pc, #44]	; (8022170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8022142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8022144:	e001      	b.n	802214a <LoopFillZerobss>

08022146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8022146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8022148:	3204      	adds	r2, #4

0802214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802214c:	d3fb      	bcc.n	8022146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 802214e:	f7ff ffd3 	bl	80220f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022152:	f00b ff1d 	bl	802df90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022156:	f7fe fa1d 	bl	8020594 <main>
  bx  lr    
 802215a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 802215c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8022160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8022164:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8022168:	08031a14 	.word	0x08031a14
  ldr r2, =_sbss
 802216c:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8022170:	20001204 	.word	0x20001204

08022174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022174:	e7fe      	b.n	8022174 <ADC_IRQHandler>

08022176 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8022176:	b580      	push	{r7, lr}
 8022178:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 802217a:	f000 fa5d 	bl	8022638 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 802217e:	20ca      	movs	r0, #202	; 0xca
 8022180:	f000 f95d 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8022184:	20c3      	movs	r0, #195	; 0xc3
 8022186:	f000 f967 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 802218a:	2008      	movs	r0, #8
 802218c:	f000 f964 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8022190:	2050      	movs	r0, #80	; 0x50
 8022192:	f000 f961 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8022196:	20cf      	movs	r0, #207	; 0xcf
 8022198:	f000 f951 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802219c:	2000      	movs	r0, #0
 802219e:	f000 f95b 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80221a2:	20c1      	movs	r0, #193	; 0xc1
 80221a4:	f000 f958 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80221a8:	2030      	movs	r0, #48	; 0x30
 80221aa:	f000 f955 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80221ae:	20ed      	movs	r0, #237	; 0xed
 80221b0:	f000 f945 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80221b4:	2064      	movs	r0, #100	; 0x64
 80221b6:	f000 f94f 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80221ba:	2003      	movs	r0, #3
 80221bc:	f000 f94c 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80221c0:	2012      	movs	r0, #18
 80221c2:	f000 f949 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80221c6:	2081      	movs	r0, #129	; 0x81
 80221c8:	f000 f946 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80221cc:	20e8      	movs	r0, #232	; 0xe8
 80221ce:	f000 f936 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80221d2:	2085      	movs	r0, #133	; 0x85
 80221d4:	f000 f940 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80221d8:	2000      	movs	r0, #0
 80221da:	f000 f93d 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80221de:	2078      	movs	r0, #120	; 0x78
 80221e0:	f000 f93a 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80221e4:	20cb      	movs	r0, #203	; 0xcb
 80221e6:	f000 f92a 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80221ea:	2039      	movs	r0, #57	; 0x39
 80221ec:	f000 f934 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80221f0:	202c      	movs	r0, #44	; 0x2c
 80221f2:	f000 f931 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80221f6:	2000      	movs	r0, #0
 80221f8:	f000 f92e 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80221fc:	2034      	movs	r0, #52	; 0x34
 80221fe:	f000 f92b 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8022202:	2002      	movs	r0, #2
 8022204:	f000 f928 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8022208:	20f7      	movs	r0, #247	; 0xf7
 802220a:	f000 f918 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 802220e:	2020      	movs	r0, #32
 8022210:	f000 f922 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8022214:	20ea      	movs	r0, #234	; 0xea
 8022216:	f000 f912 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802221a:	2000      	movs	r0, #0
 802221c:	f000 f91c 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022220:	2000      	movs	r0, #0
 8022222:	f000 f919 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8022226:	20b1      	movs	r0, #177	; 0xb1
 8022228:	f000 f909 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 802222c:	2000      	movs	r0, #0
 802222e:	f000 f913 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8022232:	201b      	movs	r0, #27
 8022234:	f000 f910 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8022238:	20b6      	movs	r0, #182	; 0xb6
 802223a:	f000 f900 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 802223e:	200a      	movs	r0, #10
 8022240:	f000 f90a 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8022244:	20a2      	movs	r0, #162	; 0xa2
 8022246:	f000 f907 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 802224a:	20c0      	movs	r0, #192	; 0xc0
 802224c:	f000 f8f7 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8022250:	2010      	movs	r0, #16
 8022252:	f000 f901 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8022256:	20c1      	movs	r0, #193	; 0xc1
 8022258:	f000 f8f1 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 802225c:	2010      	movs	r0, #16
 802225e:	f000 f8fb 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8022262:	20c5      	movs	r0, #197	; 0xc5
 8022264:	f000 f8eb 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8022268:	2045      	movs	r0, #69	; 0x45
 802226a:	f000 f8f5 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 802226e:	2015      	movs	r0, #21
 8022270:	f000 f8f2 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8022274:	20c7      	movs	r0, #199	; 0xc7
 8022276:	f000 f8e2 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 802227a:	2090      	movs	r0, #144	; 0x90
 802227c:	f000 f8ec 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8022280:	2036      	movs	r0, #54	; 0x36
 8022282:	f000 f8dc 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8022286:	20c8      	movs	r0, #200	; 0xc8
 8022288:	f000 f8e6 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 802228c:	20f2      	movs	r0, #242	; 0xf2
 802228e:	f000 f8d6 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022292:	2000      	movs	r0, #0
 8022294:	f000 f8e0 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8022298:	20b0      	movs	r0, #176	; 0xb0
 802229a:	f000 f8d0 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 802229e:	20c2      	movs	r0, #194	; 0xc2
 80222a0:	f000 f8da 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80222a4:	20b6      	movs	r0, #182	; 0xb6
 80222a6:	f000 f8ca 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80222aa:	200a      	movs	r0, #10
 80222ac:	f000 f8d4 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80222b0:	20a7      	movs	r0, #167	; 0xa7
 80222b2:	f000 f8d1 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80222b6:	2027      	movs	r0, #39	; 0x27
 80222b8:	f000 f8ce 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80222bc:	2004      	movs	r0, #4
 80222be:	f000 f8cb 	bl	8022458 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80222c2:	202a      	movs	r0, #42	; 0x2a
 80222c4:	f000 f8bb 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222c8:	2000      	movs	r0, #0
 80222ca:	f000 f8c5 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222ce:	2000      	movs	r0, #0
 80222d0:	f000 f8c2 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222d4:	2000      	movs	r0, #0
 80222d6:	f000 f8bf 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80222da:	20ef      	movs	r0, #239	; 0xef
 80222dc:	f000 f8bc 	bl	8022458 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80222e0:	202b      	movs	r0, #43	; 0x2b
 80222e2:	f000 f8ac 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80222e6:	2000      	movs	r0, #0
 80222e8:	f000 f8b6 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80222ec:	2000      	movs	r0, #0
 80222ee:	f000 f8b3 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80222f2:	2001      	movs	r0, #1
 80222f4:	f000 f8b0 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80222f8:	203f      	movs	r0, #63	; 0x3f
 80222fa:	f000 f8ad 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80222fe:	20f6      	movs	r0, #246	; 0xf6
 8022300:	f000 f89d 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8022304:	2001      	movs	r0, #1
 8022306:	f000 f8a7 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 802230a:	2000      	movs	r0, #0
 802230c:	f000 f8a4 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8022310:	2006      	movs	r0, #6
 8022312:	f000 f8a1 	bl	8022458 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8022316:	202c      	movs	r0, #44	; 0x2c
 8022318:	f000 f891 	bl	802243e <ili9341_WriteReg>
  LCD_Delay(200);
 802231c:	20c8      	movs	r0, #200	; 0xc8
 802231e:	f000 fa79 	bl	8022814 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8022322:	2026      	movs	r0, #38	; 0x26
 8022324:	f000 f88b 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8022328:	2001      	movs	r0, #1
 802232a:	f000 f895 	bl	8022458 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 802232e:	20e0      	movs	r0, #224	; 0xe0
 8022330:	f000 f885 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8022334:	200f      	movs	r0, #15
 8022336:	f000 f88f 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 802233a:	2029      	movs	r0, #41	; 0x29
 802233c:	f000 f88c 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8022340:	2024      	movs	r0, #36	; 0x24
 8022342:	f000 f889 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8022346:	200c      	movs	r0, #12
 8022348:	f000 f886 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 802234c:	200e      	movs	r0, #14
 802234e:	f000 f883 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8022352:	2009      	movs	r0, #9
 8022354:	f000 f880 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8022358:	204e      	movs	r0, #78	; 0x4e
 802235a:	f000 f87d 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 802235e:	2078      	movs	r0, #120	; 0x78
 8022360:	f000 f87a 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8022364:	203c      	movs	r0, #60	; 0x3c
 8022366:	f000 f877 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 802236a:	2009      	movs	r0, #9
 802236c:	f000 f874 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8022370:	2013      	movs	r0, #19
 8022372:	f000 f871 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8022376:	2005      	movs	r0, #5
 8022378:	f000 f86e 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 802237c:	2017      	movs	r0, #23
 802237e:	f000 f86b 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8022382:	2011      	movs	r0, #17
 8022384:	f000 f868 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8022388:	2000      	movs	r0, #0
 802238a:	f000 f865 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 802238e:	20e1      	movs	r0, #225	; 0xe1
 8022390:	f000 f855 	bl	802243e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8022394:	2000      	movs	r0, #0
 8022396:	f000 f85f 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 802239a:	2016      	movs	r0, #22
 802239c:	f000 f85c 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80223a0:	201b      	movs	r0, #27
 80223a2:	f000 f859 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80223a6:	2004      	movs	r0, #4
 80223a8:	f000 f856 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80223ac:	2011      	movs	r0, #17
 80223ae:	f000 f853 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80223b2:	2007      	movs	r0, #7
 80223b4:	f000 f850 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80223b8:	2031      	movs	r0, #49	; 0x31
 80223ba:	f000 f84d 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80223be:	2033      	movs	r0, #51	; 0x33
 80223c0:	f000 f84a 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80223c4:	2042      	movs	r0, #66	; 0x42
 80223c6:	f000 f847 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80223ca:	2005      	movs	r0, #5
 80223cc:	f000 f844 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80223d0:	200c      	movs	r0, #12
 80223d2:	f000 f841 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80223d6:	200a      	movs	r0, #10
 80223d8:	f000 f83e 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80223dc:	2028      	movs	r0, #40	; 0x28
 80223de:	f000 f83b 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80223e2:	202f      	movs	r0, #47	; 0x2f
 80223e4:	f000 f838 	bl	8022458 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80223e8:	200f      	movs	r0, #15
 80223ea:	f000 f835 	bl	8022458 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80223ee:	2011      	movs	r0, #17
 80223f0:	f000 f825 	bl	802243e <ili9341_WriteReg>
  LCD_Delay(200);
 80223f4:	20c8      	movs	r0, #200	; 0xc8
 80223f6:	f000 fa0d 	bl	8022814 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80223fa:	2029      	movs	r0, #41	; 0x29
 80223fc:	f000 f81f 	bl	802243e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8022400:	202c      	movs	r0, #44	; 0x2c
 8022402:	f000 f81c 	bl	802243e <ili9341_WriteReg>
}
 8022406:	bf00      	nop
 8022408:	bd80      	pop	{r7, pc}

0802240a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 802240a:	b580      	push	{r7, lr}
 802240c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 802240e:	f000 f913 	bl	8022638 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8022412:	2103      	movs	r1, #3
 8022414:	20d3      	movs	r0, #211	; 0xd3
 8022416:	f000 f82c 	bl	8022472 <ili9341_ReadData>
 802241a:	4603      	mov	r3, r0
 802241c:	b29b      	uxth	r3, r3
}
 802241e:	4618      	mov	r0, r3
 8022420:	bd80      	pop	{r7, pc}

08022422 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8022422:	b580      	push	{r7, lr}
 8022424:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8022426:	2029      	movs	r0, #41	; 0x29
 8022428:	f000 f809 	bl	802243e <ili9341_WriteReg>
}
 802242c:	bf00      	nop
 802242e:	bd80      	pop	{r7, pc}

08022430 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8022430:	b580      	push	{r7, lr}
 8022432:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8022434:	2028      	movs	r0, #40	; 0x28
 8022436:	f000 f802 	bl	802243e <ili9341_WriteReg>
}
 802243a:	bf00      	nop
 802243c:	bd80      	pop	{r7, pc}

0802243e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 802243e:	b580      	push	{r7, lr}
 8022440:	b082      	sub	sp, #8
 8022442:	af00      	add	r7, sp, #0
 8022444:	4603      	mov	r3, r0
 8022446:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8022448:	79fb      	ldrb	r3, [r7, #7]
 802244a:	4618      	mov	r0, r3
 802244c:	f000 f98e 	bl	802276c <LCD_IO_WriteReg>
}
 8022450:	bf00      	nop
 8022452:	3708      	adds	r7, #8
 8022454:	46bd      	mov	sp, r7
 8022456:	bd80      	pop	{r7, pc}

08022458 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8022458:	b580      	push	{r7, lr}
 802245a:	b082      	sub	sp, #8
 802245c:	af00      	add	r7, sp, #0
 802245e:	4603      	mov	r3, r0
 8022460:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8022462:	88fb      	ldrh	r3, [r7, #6]
 8022464:	4618      	mov	r0, r3
 8022466:	f000 f95f 	bl	8022728 <LCD_IO_WriteData>
}
 802246a:	bf00      	nop
 802246c:	3708      	adds	r7, #8
 802246e:	46bd      	mov	sp, r7
 8022470:	bd80      	pop	{r7, pc}

08022472 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8022472:	b580      	push	{r7, lr}
 8022474:	b082      	sub	sp, #8
 8022476:	af00      	add	r7, sp, #0
 8022478:	4603      	mov	r3, r0
 802247a:	460a      	mov	r2, r1
 802247c:	80fb      	strh	r3, [r7, #6]
 802247e:	4613      	mov	r3, r2
 8022480:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8022482:	797a      	ldrb	r2, [r7, #5]
 8022484:	88fb      	ldrh	r3, [r7, #6]
 8022486:	4611      	mov	r1, r2
 8022488:	4618      	mov	r0, r3
 802248a:	f000 f991 	bl	80227b0 <LCD_IO_ReadData>
 802248e:	4603      	mov	r3, r0
}
 8022490:	4618      	mov	r0, r3
 8022492:	3708      	adds	r7, #8
 8022494:	46bd      	mov	sp, r7
 8022496:	bd80      	pop	{r7, pc}

08022498 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8022498:	b480      	push	{r7}
 802249a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 802249c:	23f0      	movs	r3, #240	; 0xf0
}
 802249e:	4618      	mov	r0, r3
 80224a0:	46bd      	mov	sp, r7
 80224a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224a6:	4770      	bx	lr

080224a8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80224a8:	b480      	push	{r7}
 80224aa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80224ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80224b0:	4618      	mov	r0, r3
 80224b2:	46bd      	mov	sp, r7
 80224b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224b8:	4770      	bx	lr
	...

080224bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80224bc:	b580      	push	{r7, lr}
 80224be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80224c0:	4819      	ldr	r0, [pc, #100]	; (8022528 <SPIx_Init+0x6c>)
 80224c2:	f006 fb2a 	bl	8028b1a <HAL_SPI_GetState>
 80224c6:	4603      	mov	r3, r0
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d12b      	bne.n	8022524 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80224cc:	4b16      	ldr	r3, [pc, #88]	; (8022528 <SPIx_Init+0x6c>)
 80224ce:	4a17      	ldr	r2, [pc, #92]	; (802252c <SPIx_Init+0x70>)
 80224d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80224d2:	4b15      	ldr	r3, [pc, #84]	; (8022528 <SPIx_Init+0x6c>)
 80224d4:	2218      	movs	r2, #24
 80224d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80224d8:	4b13      	ldr	r3, [pc, #76]	; (8022528 <SPIx_Init+0x6c>)
 80224da:	2200      	movs	r2, #0
 80224dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80224de:	4b12      	ldr	r3, [pc, #72]	; (8022528 <SPIx_Init+0x6c>)
 80224e0:	2200      	movs	r2, #0
 80224e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80224e4:	4b10      	ldr	r3, [pc, #64]	; (8022528 <SPIx_Init+0x6c>)
 80224e6:	2200      	movs	r2, #0
 80224e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80224ea:	4b0f      	ldr	r3, [pc, #60]	; (8022528 <SPIx_Init+0x6c>)
 80224ec:	2200      	movs	r2, #0
 80224ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80224f0:	4b0d      	ldr	r3, [pc, #52]	; (8022528 <SPIx_Init+0x6c>)
 80224f2:	2207      	movs	r2, #7
 80224f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80224f6:	4b0c      	ldr	r3, [pc, #48]	; (8022528 <SPIx_Init+0x6c>)
 80224f8:	2200      	movs	r2, #0
 80224fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80224fc:	4b0a      	ldr	r3, [pc, #40]	; (8022528 <SPIx_Init+0x6c>)
 80224fe:	2200      	movs	r2, #0
 8022500:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8022502:	4b09      	ldr	r3, [pc, #36]	; (8022528 <SPIx_Init+0x6c>)
 8022504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022508:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 802250a:	4b07      	ldr	r3, [pc, #28]	; (8022528 <SPIx_Init+0x6c>)
 802250c:	2200      	movs	r2, #0
 802250e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8022510:	4b05      	ldr	r3, [pc, #20]	; (8022528 <SPIx_Init+0x6c>)
 8022512:	f44f 7282 	mov.w	r2, #260	; 0x104
 8022516:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8022518:	4803      	ldr	r0, [pc, #12]	; (8022528 <SPIx_Init+0x6c>)
 802251a:	f000 f853 	bl	80225c4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 802251e:	4802      	ldr	r0, [pc, #8]	; (8022528 <SPIx_Init+0x6c>)
 8022520:	f005 fe5b 	bl	80281da <HAL_SPI_Init>
  } 
}
 8022524:	bf00      	nop
 8022526:	bd80      	pop	{r7, pc}
 8022528:	2000089c 	.word	0x2000089c
 802252c:	40015000 	.word	0x40015000

08022530 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8022530:	b580      	push	{r7, lr}
 8022532:	b084      	sub	sp, #16
 8022534:	af00      	add	r7, sp, #0
 8022536:	4603      	mov	r3, r0
 8022538:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 802253a:	2300      	movs	r3, #0
 802253c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 802253e:	79fb      	ldrb	r3, [r7, #7]
 8022540:	b29a      	uxth	r2, r3
 8022542:	4b09      	ldr	r3, [pc, #36]	; (8022568 <SPIx_Read+0x38>)
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	f107 0108 	add.w	r1, r7, #8
 802254a:	4808      	ldr	r0, [pc, #32]	; (802256c <SPIx_Read+0x3c>)
 802254c:	f006 f832 	bl	80285b4 <HAL_SPI_Receive>
 8022550:	4603      	mov	r3, r0
 8022552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022554:	7bfb      	ldrb	r3, [r7, #15]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d001      	beq.n	802255e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 802255a:	f000 f827 	bl	80225ac <SPIx_Error>
  }
  
  return readvalue;
 802255e:	68bb      	ldr	r3, [r7, #8]
}
 8022560:	4618      	mov	r0, r3
 8022562:	3710      	adds	r7, #16
 8022564:	46bd      	mov	sp, r7
 8022566:	bd80      	pop	{r7, pc}
 8022568:	20000040 	.word	0x20000040
 802256c:	2000089c 	.word	0x2000089c

08022570 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8022570:	b580      	push	{r7, lr}
 8022572:	b084      	sub	sp, #16
 8022574:	af00      	add	r7, sp, #0
 8022576:	4603      	mov	r3, r0
 8022578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 802257a:	2300      	movs	r3, #0
 802257c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 802257e:	4b09      	ldr	r3, [pc, #36]	; (80225a4 <SPIx_Write+0x34>)
 8022580:	681b      	ldr	r3, [r3, #0]
 8022582:	1db9      	adds	r1, r7, #6
 8022584:	2201      	movs	r2, #1
 8022586:	4808      	ldr	r0, [pc, #32]	; (80225a8 <SPIx_Write+0x38>)
 8022588:	f005 fed8 	bl	802833c <HAL_SPI_Transmit>
 802258c:	4603      	mov	r3, r0
 802258e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8022590:	7bfb      	ldrb	r3, [r7, #15]
 8022592:	2b00      	cmp	r3, #0
 8022594:	d001      	beq.n	802259a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8022596:	f000 f809 	bl	80225ac <SPIx_Error>
  }
}
 802259a:	bf00      	nop
 802259c:	3710      	adds	r7, #16
 802259e:	46bd      	mov	sp, r7
 80225a0:	bd80      	pop	{r7, pc}
 80225a2:	bf00      	nop
 80225a4:	20000040 	.word	0x20000040
 80225a8:	2000089c 	.word	0x2000089c

080225ac <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80225b0:	4803      	ldr	r0, [pc, #12]	; (80225c0 <SPIx_Error+0x14>)
 80225b2:	f005 fe9b 	bl	80282ec <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80225b6:	f7ff ff81 	bl	80224bc <SPIx_Init>
}
 80225ba:	bf00      	nop
 80225bc:	bd80      	pop	{r7, pc}
 80225be:	bf00      	nop
 80225c0:	2000089c 	.word	0x2000089c

080225c4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80225c4:	b580      	push	{r7, lr}
 80225c6:	b08a      	sub	sp, #40	; 0x28
 80225c8:	af00      	add	r7, sp, #0
 80225ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80225cc:	2300      	movs	r3, #0
 80225ce:	613b      	str	r3, [r7, #16]
 80225d0:	4b17      	ldr	r3, [pc, #92]	; (8022630 <SPIx_MspInit+0x6c>)
 80225d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80225d4:	4a16      	ldr	r2, [pc, #88]	; (8022630 <SPIx_MspInit+0x6c>)
 80225d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80225da:	6453      	str	r3, [r2, #68]	; 0x44
 80225dc:	4b14      	ldr	r3, [pc, #80]	; (8022630 <SPIx_MspInit+0x6c>)
 80225de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80225e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80225e4:	613b      	str	r3, [r7, #16]
 80225e6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80225e8:	2300      	movs	r3, #0
 80225ea:	60fb      	str	r3, [r7, #12]
 80225ec:	4b10      	ldr	r3, [pc, #64]	; (8022630 <SPIx_MspInit+0x6c>)
 80225ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225f0:	4a0f      	ldr	r2, [pc, #60]	; (8022630 <SPIx_MspInit+0x6c>)
 80225f2:	f043 0320 	orr.w	r3, r3, #32
 80225f6:	6313      	str	r3, [r2, #48]	; 0x30
 80225f8:	4b0d      	ldr	r3, [pc, #52]	; (8022630 <SPIx_MspInit+0x6c>)
 80225fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225fc:	f003 0320 	and.w	r3, r3, #32
 8022600:	60fb      	str	r3, [r7, #12]
 8022602:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8022604:	f44f 7360 	mov.w	r3, #896	; 0x380
 8022608:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 802260a:	2302      	movs	r3, #2
 802260c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 802260e:	2302      	movs	r3, #2
 8022610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8022612:	2301      	movs	r3, #1
 8022614:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8022616:	2305      	movs	r3, #5
 8022618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 802261a:	f107 0314 	add.w	r3, r7, #20
 802261e:	4619      	mov	r1, r3
 8022620:	4804      	ldr	r0, [pc, #16]	; (8022634 <SPIx_MspInit+0x70>)
 8022622:	f002 f9fb 	bl	8024a1c <HAL_GPIO_Init>
}
 8022626:	bf00      	nop
 8022628:	3728      	adds	r7, #40	; 0x28
 802262a:	46bd      	mov	sp, r7
 802262c:	bd80      	pop	{r7, pc}
 802262e:	bf00      	nop
 8022630:	40023800 	.word	0x40023800
 8022634:	40021400 	.word	0x40021400

08022638 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8022638:	b580      	push	{r7, lr}
 802263a:	b088      	sub	sp, #32
 802263c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 802263e:	4b36      	ldr	r3, [pc, #216]	; (8022718 <LCD_IO_Init+0xe0>)
 8022640:	781b      	ldrb	r3, [r3, #0]
 8022642:	2b00      	cmp	r3, #0
 8022644:	d164      	bne.n	8022710 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8022646:	4b34      	ldr	r3, [pc, #208]	; (8022718 <LCD_IO_Init+0xe0>)
 8022648:	2201      	movs	r2, #1
 802264a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 802264c:	2300      	movs	r3, #0
 802264e:	60bb      	str	r3, [r7, #8]
 8022650:	4b32      	ldr	r3, [pc, #200]	; (802271c <LCD_IO_Init+0xe4>)
 8022652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022654:	4a31      	ldr	r2, [pc, #196]	; (802271c <LCD_IO_Init+0xe4>)
 8022656:	f043 0308 	orr.w	r3, r3, #8
 802265a:	6313      	str	r3, [r2, #48]	; 0x30
 802265c:	4b2f      	ldr	r3, [pc, #188]	; (802271c <LCD_IO_Init+0xe4>)
 802265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022660:	f003 0308 	and.w	r3, r3, #8
 8022664:	60bb      	str	r3, [r7, #8]
 8022666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8022668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802266c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 802266e:	2301      	movs	r3, #1
 8022670:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8022672:	2300      	movs	r3, #0
 8022674:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8022676:	2302      	movs	r3, #2
 8022678:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 802267a:	f107 030c 	add.w	r3, r7, #12
 802267e:	4619      	mov	r1, r3
 8022680:	4827      	ldr	r0, [pc, #156]	; (8022720 <LCD_IO_Init+0xe8>)
 8022682:	f002 f9cb 	bl	8024a1c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8022686:	2300      	movs	r3, #0
 8022688:	607b      	str	r3, [r7, #4]
 802268a:	4b24      	ldr	r3, [pc, #144]	; (802271c <LCD_IO_Init+0xe4>)
 802268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802268e:	4a23      	ldr	r2, [pc, #140]	; (802271c <LCD_IO_Init+0xe4>)
 8022690:	f043 0308 	orr.w	r3, r3, #8
 8022694:	6313      	str	r3, [r2, #48]	; 0x30
 8022696:	4b21      	ldr	r3, [pc, #132]	; (802271c <LCD_IO_Init+0xe4>)
 8022698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802269a:	f003 0308 	and.w	r3, r3, #8
 802269e:	607b      	str	r3, [r7, #4]
 80226a0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80226a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80226a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80226a8:	2301      	movs	r3, #1
 80226aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80226ac:	2300      	movs	r3, #0
 80226ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80226b0:	2302      	movs	r3, #2
 80226b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80226b4:	f107 030c 	add.w	r3, r7, #12
 80226b8:	4619      	mov	r1, r3
 80226ba:	4819      	ldr	r0, [pc, #100]	; (8022720 <LCD_IO_Init+0xe8>)
 80226bc:	f002 f9ae 	bl	8024a1c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80226c0:	2300      	movs	r3, #0
 80226c2:	603b      	str	r3, [r7, #0]
 80226c4:	4b15      	ldr	r3, [pc, #84]	; (802271c <LCD_IO_Init+0xe4>)
 80226c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c8:	4a14      	ldr	r2, [pc, #80]	; (802271c <LCD_IO_Init+0xe4>)
 80226ca:	f043 0304 	orr.w	r3, r3, #4
 80226ce:	6313      	str	r3, [r2, #48]	; 0x30
 80226d0:	4b12      	ldr	r3, [pc, #72]	; (802271c <LCD_IO_Init+0xe4>)
 80226d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226d4:	f003 0304 	and.w	r3, r3, #4
 80226d8:	603b      	str	r3, [r7, #0]
 80226da:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80226dc:	2304      	movs	r3, #4
 80226de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80226e0:	2301      	movs	r3, #1
 80226e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80226e4:	2300      	movs	r3, #0
 80226e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80226e8:	2302      	movs	r3, #2
 80226ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80226ec:	f107 030c 	add.w	r3, r7, #12
 80226f0:	4619      	mov	r1, r3
 80226f2:	480c      	ldr	r0, [pc, #48]	; (8022724 <LCD_IO_Init+0xec>)
 80226f4:	f002 f992 	bl	8024a1c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80226f8:	2200      	movs	r2, #0
 80226fa:	2104      	movs	r1, #4
 80226fc:	4809      	ldr	r0, [pc, #36]	; (8022724 <LCD_IO_Init+0xec>)
 80226fe:	f002 fc45 	bl	8024f8c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8022702:	2201      	movs	r2, #1
 8022704:	2104      	movs	r1, #4
 8022706:	4807      	ldr	r0, [pc, #28]	; (8022724 <LCD_IO_Init+0xec>)
 8022708:	f002 fc40 	bl	8024f8c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 802270c:	f7ff fed6 	bl	80224bc <SPIx_Init>
  }
}
 8022710:	bf00      	nop
 8022712:	3720      	adds	r7, #32
 8022714:	46bd      	mov	sp, r7
 8022716:	bd80      	pop	{r7, pc}
 8022718:	200008f4 	.word	0x200008f4
 802271c:	40023800 	.word	0x40023800
 8022720:	40020c00 	.word	0x40020c00
 8022724:	40020800 	.word	0x40020800

08022728 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8022728:	b580      	push	{r7, lr}
 802272a:	b082      	sub	sp, #8
 802272c:	af00      	add	r7, sp, #0
 802272e:	4603      	mov	r3, r0
 8022730:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8022732:	2201      	movs	r2, #1
 8022734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022738:	480a      	ldr	r0, [pc, #40]	; (8022764 <LCD_IO_WriteData+0x3c>)
 802273a:	f002 fc27 	bl	8024f8c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 802273e:	2200      	movs	r2, #0
 8022740:	2104      	movs	r1, #4
 8022742:	4809      	ldr	r0, [pc, #36]	; (8022768 <LCD_IO_WriteData+0x40>)
 8022744:	f002 fc22 	bl	8024f8c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8022748:	88fb      	ldrh	r3, [r7, #6]
 802274a:	4618      	mov	r0, r3
 802274c:	f7ff ff10 	bl	8022570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022750:	2201      	movs	r2, #1
 8022752:	2104      	movs	r1, #4
 8022754:	4804      	ldr	r0, [pc, #16]	; (8022768 <LCD_IO_WriteData+0x40>)
 8022756:	f002 fc19 	bl	8024f8c <HAL_GPIO_WritePin>
}
 802275a:	bf00      	nop
 802275c:	3708      	adds	r7, #8
 802275e:	46bd      	mov	sp, r7
 8022760:	bd80      	pop	{r7, pc}
 8022762:	bf00      	nop
 8022764:	40020c00 	.word	0x40020c00
 8022768:	40020800 	.word	0x40020800

0802276c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 802276c:	b580      	push	{r7, lr}
 802276e:	b082      	sub	sp, #8
 8022770:	af00      	add	r7, sp, #0
 8022772:	4603      	mov	r3, r0
 8022774:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8022776:	2200      	movs	r2, #0
 8022778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802277c:	480a      	ldr	r0, [pc, #40]	; (80227a8 <LCD_IO_WriteReg+0x3c>)
 802277e:	f002 fc05 	bl	8024f8c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8022782:	2200      	movs	r2, #0
 8022784:	2104      	movs	r1, #4
 8022786:	4809      	ldr	r0, [pc, #36]	; (80227ac <LCD_IO_WriteReg+0x40>)
 8022788:	f002 fc00 	bl	8024f8c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 802278c:	79fb      	ldrb	r3, [r7, #7]
 802278e:	b29b      	uxth	r3, r3
 8022790:	4618      	mov	r0, r3
 8022792:	f7ff feed 	bl	8022570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8022796:	2201      	movs	r2, #1
 8022798:	2104      	movs	r1, #4
 802279a:	4804      	ldr	r0, [pc, #16]	; (80227ac <LCD_IO_WriteReg+0x40>)
 802279c:	f002 fbf6 	bl	8024f8c <HAL_GPIO_WritePin>
}
 80227a0:	bf00      	nop
 80227a2:	3708      	adds	r7, #8
 80227a4:	46bd      	mov	sp, r7
 80227a6:	bd80      	pop	{r7, pc}
 80227a8:	40020c00 	.word	0x40020c00
 80227ac:	40020800 	.word	0x40020800

080227b0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80227b0:	b580      	push	{r7, lr}
 80227b2:	b084      	sub	sp, #16
 80227b4:	af00      	add	r7, sp, #0
 80227b6:	4603      	mov	r3, r0
 80227b8:	460a      	mov	r2, r1
 80227ba:	80fb      	strh	r3, [r7, #6]
 80227bc:	4613      	mov	r3, r2
 80227be:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80227c0:	2300      	movs	r3, #0
 80227c2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80227c4:	2200      	movs	r2, #0
 80227c6:	2104      	movs	r1, #4
 80227c8:	4810      	ldr	r0, [pc, #64]	; (802280c <LCD_IO_ReadData+0x5c>)
 80227ca:	f002 fbdf 	bl	8024f8c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80227ce:	2200      	movs	r2, #0
 80227d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80227d4:	480e      	ldr	r0, [pc, #56]	; (8022810 <LCD_IO_ReadData+0x60>)
 80227d6:	f002 fbd9 	bl	8024f8c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80227da:	88fb      	ldrh	r3, [r7, #6]
 80227dc:	4618      	mov	r0, r3
 80227de:	f7ff fec7 	bl	8022570 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80227e2:	797b      	ldrb	r3, [r7, #5]
 80227e4:	4618      	mov	r0, r3
 80227e6:	f7ff fea3 	bl	8022530 <SPIx_Read>
 80227ea:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80227ec:	2201      	movs	r2, #1
 80227ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80227f2:	4807      	ldr	r0, [pc, #28]	; (8022810 <LCD_IO_ReadData+0x60>)
 80227f4:	f002 fbca 	bl	8024f8c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80227f8:	2201      	movs	r2, #1
 80227fa:	2104      	movs	r1, #4
 80227fc:	4803      	ldr	r0, [pc, #12]	; (802280c <LCD_IO_ReadData+0x5c>)
 80227fe:	f002 fbc5 	bl	8024f8c <HAL_GPIO_WritePin>
  
  return readvalue;
 8022802:	68fb      	ldr	r3, [r7, #12]
}
 8022804:	4618      	mov	r0, r3
 8022806:	3710      	adds	r7, #16
 8022808:	46bd      	mov	sp, r7
 802280a:	bd80      	pop	{r7, pc}
 802280c:	40020800 	.word	0x40020800
 8022810:	40020c00 	.word	0x40020c00

08022814 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8022814:	b580      	push	{r7, lr}
 8022816:	b082      	sub	sp, #8
 8022818:	af00      	add	r7, sp, #0
 802281a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802281c:	6878      	ldr	r0, [r7, #4]
 802281e:	f000 fecd 	bl	80235bc <HAL_Delay>
}
 8022822:	bf00      	nop
 8022824:	3708      	adds	r7, #8
 8022826:	46bd      	mov	sp, r7
 8022828:	bd80      	pop	{r7, pc}
	...

0802282c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 802282c:	b580      	push	{r7, lr}
 802282e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8022830:	4b2d      	ldr	r3, [pc, #180]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022832:	4a2e      	ldr	r2, [pc, #184]	; (80228ec <BSP_LCD_Init+0xc0>)
 8022834:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8022836:	4b2c      	ldr	r3, [pc, #176]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022838:	2209      	movs	r2, #9
 802283a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 802283c:	4b2a      	ldr	r3, [pc, #168]	; (80228e8 <BSP_LCD_Init+0xbc>)
 802283e:	2201      	movs	r2, #1
 8022840:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8022842:	4b29      	ldr	r3, [pc, #164]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022844:	221d      	movs	r2, #29
 8022846:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8022848:	4b27      	ldr	r3, [pc, #156]	; (80228e8 <BSP_LCD_Init+0xbc>)
 802284a:	2203      	movs	r2, #3
 802284c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 802284e:	4b26      	ldr	r3, [pc, #152]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022850:	f240 120d 	movw	r2, #269	; 0x10d
 8022854:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8022856:	4b24      	ldr	r3, [pc, #144]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022858:	f240 1243 	movw	r2, #323	; 0x143
 802285c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 802285e:	4b22      	ldr	r3, [pc, #136]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022860:	f240 1217 	movw	r2, #279	; 0x117
 8022864:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8022866:	4b20      	ldr	r3, [pc, #128]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022868:	f240 1247 	movw	r2, #327	; 0x147
 802286c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 802286e:	4b1e      	ldr	r3, [pc, #120]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022870:	2200      	movs	r2, #0
 8022872:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8022876:	4b1c      	ldr	r3, [pc, #112]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022878:	2200      	movs	r2, #0
 802287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 802287e:	4b1a      	ldr	r3, [pc, #104]	; (80228e8 <BSP_LCD_Init+0xbc>)
 8022880:	2200      	movs	r2, #0
 8022882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8022886:	4b1a      	ldr	r3, [pc, #104]	; (80228f0 <BSP_LCD_Init+0xc4>)
 8022888:	2208      	movs	r2, #8
 802288a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 802288c:	4b18      	ldr	r3, [pc, #96]	; (80228f0 <BSP_LCD_Init+0xc4>)
 802288e:	22c0      	movs	r2, #192	; 0xc0
 8022890:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8022892:	4b17      	ldr	r3, [pc, #92]	; (80228f0 <BSP_LCD_Init+0xc4>)
 8022894:	2204      	movs	r2, #4
 8022896:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8022898:	4b15      	ldr	r3, [pc, #84]	; (80228f0 <BSP_LCD_Init+0xc4>)
 802289a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 802289e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80228a0:	4813      	ldr	r0, [pc, #76]	; (80228f0 <BSP_LCD_Init+0xc4>)
 80228a2:	f005 fa49 	bl	8027d38 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80228a6:	4b10      	ldr	r3, [pc, #64]	; (80228e8 <BSP_LCD_Init+0xbc>)
 80228a8:	2200      	movs	r2, #0
 80228aa:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80228ac:	4b0e      	ldr	r3, [pc, #56]	; (80228e8 <BSP_LCD_Init+0xbc>)
 80228ae:	2200      	movs	r2, #0
 80228b0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80228b2:	4b0d      	ldr	r3, [pc, #52]	; (80228e8 <BSP_LCD_Init+0xbc>)
 80228b4:	2200      	movs	r2, #0
 80228b6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80228b8:	4b0b      	ldr	r3, [pc, #44]	; (80228e8 <BSP_LCD_Init+0xbc>)
 80228ba:	2200      	movs	r2, #0
 80228bc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80228be:	f000 fa83 	bl	8022dc8 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80228c2:	4809      	ldr	r0, [pc, #36]	; (80228e8 <BSP_LCD_Init+0xbc>)
 80228c4:	f004 f95e 	bl	8026b84 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80228c8:	4b0a      	ldr	r3, [pc, #40]	; (80228f4 <BSP_LCD_Init+0xc8>)
 80228ca:	4a0b      	ldr	r2, [pc, #44]	; (80228f8 <BSP_LCD_Init+0xcc>)
 80228cc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80228ce:	4b09      	ldr	r3, [pc, #36]	; (80228f4 <BSP_LCD_Init+0xc8>)
 80228d0:	681b      	ldr	r3, [r3, #0]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80228d6:	f000 fc65 	bl	80231a4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80228da:	4808      	ldr	r0, [pc, #32]	; (80228fc <BSP_LCD_Init+0xd0>)
 80228dc:	f000 f920 	bl	8022b20 <BSP_LCD_SetFont>

  return LCD_OK;
 80228e0:	2300      	movs	r3, #0
}  
 80228e2:	4618      	mov	r0, r3
 80228e4:	bd80      	pop	{r7, pc}
 80228e6:	bf00      	nop
 80228e8:	200008f8 	.word	0x200008f8
 80228ec:	40016800 	.word	0x40016800
 80228f0:	200009e0 	.word	0x200009e0
 80228f4:	20000a2c 	.word	0x20000a2c
 80228f8:	20000008 	.word	0x20000008
 80228fc:	20000044 	.word	0x20000044

08022900 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8022900:	b580      	push	{r7, lr}
 8022902:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8022904:	4b03      	ldr	r3, [pc, #12]	; (8022914 <BSP_LCD_GetXSize+0x14>)
 8022906:	681b      	ldr	r3, [r3, #0]
 8022908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802290a:	4798      	blx	r3
 802290c:	4603      	mov	r3, r0
}
 802290e:	4618      	mov	r0, r3
 8022910:	bd80      	pop	{r7, pc}
 8022912:	bf00      	nop
 8022914:	20000a2c 	.word	0x20000a2c

08022918 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8022918:	b580      	push	{r7, lr}
 802291a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 802291c:	4b03      	ldr	r3, [pc, #12]	; (802292c <BSP_LCD_GetYSize+0x14>)
 802291e:	681b      	ldr	r3, [r3, #0]
 8022920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022922:	4798      	blx	r3
 8022924:	4603      	mov	r3, r0
}
 8022926:	4618      	mov	r0, r3
 8022928:	bd80      	pop	{r7, pc}
 802292a:	bf00      	nop
 802292c:	20000a2c 	.word	0x20000a2c

08022930 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8022930:	b580      	push	{r7, lr}
 8022932:	b090      	sub	sp, #64	; 0x40
 8022934:	af00      	add	r7, sp, #0
 8022936:	4603      	mov	r3, r0
 8022938:	6039      	str	r1, [r7, #0]
 802293a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 802293c:	2300      	movs	r3, #0
 802293e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8022940:	f7ff ffde 	bl	8022900 <BSP_LCD_GetXSize>
 8022944:	4603      	mov	r3, r0
 8022946:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8022948:	2300      	movs	r3, #0
 802294a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 802294c:	f7ff ffe4 	bl	8022918 <BSP_LCD_GetYSize>
 8022950:	4603      	mov	r3, r0
 8022952:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8022954:	2300      	movs	r3, #0
 8022956:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8022958:	683b      	ldr	r3, [r7, #0]
 802295a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 802295c:	23ff      	movs	r3, #255	; 0xff
 802295e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8022960:	2300      	movs	r3, #0
 8022962:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8022964:	2300      	movs	r3, #0
 8022966:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 802296a:	2300      	movs	r3, #0
 802296c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8022970:	2300      	movs	r3, #0
 8022972:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8022976:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 802297a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 802297c:	2307      	movs	r3, #7
 802297e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8022980:	f7ff ffbe 	bl	8022900 <BSP_LCD_GetXSize>
 8022984:	4603      	mov	r3, r0
 8022986:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8022988:	f7ff ffc6 	bl	8022918 <BSP_LCD_GetYSize>
 802298c:	4603      	mov	r3, r0
 802298e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8022990:	88fa      	ldrh	r2, [r7, #6]
 8022992:	f107 030c 	add.w	r3, r7, #12
 8022996:	4619      	mov	r1, r3
 8022998:	4814      	ldr	r0, [pc, #80]	; (80229ec <BSP_LCD_LayerDefaultInit+0xbc>)
 802299a:	f004 fa85 	bl	8026ea8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 802299e:	88fa      	ldrh	r2, [r7, #6]
 80229a0:	4913      	ldr	r1, [pc, #76]	; (80229f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80229a2:	4613      	mov	r3, r2
 80229a4:	005b      	lsls	r3, r3, #1
 80229a6:	4413      	add	r3, r2
 80229a8:	009b      	lsls	r3, r3, #2
 80229aa:	440b      	add	r3, r1
 80229ac:	3304      	adds	r3, #4
 80229ae:	f04f 32ff 	mov.w	r2, #4294967295
 80229b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80229b4:	88fa      	ldrh	r2, [r7, #6]
 80229b6:	490e      	ldr	r1, [pc, #56]	; (80229f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80229b8:	4613      	mov	r3, r2
 80229ba:	005b      	lsls	r3, r3, #1
 80229bc:	4413      	add	r3, r2
 80229be:	009b      	lsls	r3, r3, #2
 80229c0:	440b      	add	r3, r1
 80229c2:	3308      	adds	r3, #8
 80229c4:	4a0b      	ldr	r2, [pc, #44]	; (80229f4 <BSP_LCD_LayerDefaultInit+0xc4>)
 80229c6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80229c8:	88fa      	ldrh	r2, [r7, #6]
 80229ca:	4909      	ldr	r1, [pc, #36]	; (80229f0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80229cc:	4613      	mov	r3, r2
 80229ce:	005b      	lsls	r3, r3, #1
 80229d0:	4413      	add	r3, r2
 80229d2:	009b      	lsls	r3, r3, #2
 80229d4:	440b      	add	r3, r1
 80229d6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80229da:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80229dc:	4803      	ldr	r0, [pc, #12]	; (80229ec <BSP_LCD_LayerDefaultInit+0xbc>)
 80229de:	f004 fb1f 	bl	8027020 <HAL_LTDC_EnableDither>
}
 80229e2:	bf00      	nop
 80229e4:	3740      	adds	r7, #64	; 0x40
 80229e6:	46bd      	mov	sp, r7
 80229e8:	bd80      	pop	{r7, pc}
 80229ea:	bf00      	nop
 80229ec:	200008f8 	.word	0x200008f8
 80229f0:	20000a14 	.word	0x20000a14
 80229f4:	20000044 	.word	0x20000044

080229f8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80229f8:	b480      	push	{r7}
 80229fa:	b083      	sub	sp, #12
 80229fc:	af00      	add	r7, sp, #0
 80229fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8022a00:	4a04      	ldr	r2, [pc, #16]	; (8022a14 <BSP_LCD_SelectLayer+0x1c>)
 8022a02:	687b      	ldr	r3, [r7, #4]
 8022a04:	6013      	str	r3, [r2, #0]
}
 8022a06:	bf00      	nop
 8022a08:	370c      	adds	r7, #12
 8022a0a:	46bd      	mov	sp, r7
 8022a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a10:	4770      	bx	lr
 8022a12:	bf00      	nop
 8022a14:	20000a10 	.word	0x20000a10

08022a18 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.  
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8022a18:	b480      	push	{r7}
 8022a1a:	b083      	sub	sp, #12
 8022a1c:	af00      	add	r7, sp, #0
 8022a1e:	6078      	str	r0, [r7, #4]
 8022a20:	460b      	mov	r3, r1
 8022a22:	70fb      	strb	r3, [r7, #3]
  if(state == ENABLE)
 8022a24:	78fb      	ldrb	r3, [r7, #3]
 8022a26:	2b01      	cmp	r3, #1
 8022a28:	d112      	bne.n	8022a50 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8022a2a:	4b19      	ldr	r3, [pc, #100]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	461a      	mov	r2, r3
 8022a30:	687b      	ldr	r3, [r7, #4]
 8022a32:	01db      	lsls	r3, r3, #7
 8022a34:	4413      	add	r3, r2
 8022a36:	3384      	adds	r3, #132	; 0x84
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	4a15      	ldr	r2, [pc, #84]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a3c:	6812      	ldr	r2, [r2, #0]
 8022a3e:	4611      	mov	r1, r2
 8022a40:	687a      	ldr	r2, [r7, #4]
 8022a42:	01d2      	lsls	r2, r2, #7
 8022a44:	440a      	add	r2, r1
 8022a46:	3284      	adds	r2, #132	; 0x84
 8022a48:	f043 0301 	orr.w	r3, r3, #1
 8022a4c:	6013      	str	r3, [r2, #0]
 8022a4e:	e011      	b.n	8022a74 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8022a50:	4b0f      	ldr	r3, [pc, #60]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	461a      	mov	r2, r3
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	01db      	lsls	r3, r3, #7
 8022a5a:	4413      	add	r3, r2
 8022a5c:	3384      	adds	r3, #132	; 0x84
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	4a0b      	ldr	r2, [pc, #44]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a62:	6812      	ldr	r2, [r2, #0]
 8022a64:	4611      	mov	r1, r2
 8022a66:	687a      	ldr	r2, [r7, #4]
 8022a68:	01d2      	lsls	r2, r2, #7
 8022a6a:	440a      	add	r2, r1
 8022a6c:	3284      	adds	r2, #132	; 0x84
 8022a6e:	f023 0301 	bic.w	r3, r3, #1
 8022a72:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8022a74:	4b06      	ldr	r3, [pc, #24]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a76:	681b      	ldr	r3, [r3, #0]
 8022a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022a7a:	4b05      	ldr	r3, [pc, #20]	; (8022a90 <BSP_LCD_SetLayerVisible+0x78>)
 8022a7c:	681b      	ldr	r3, [r3, #0]
 8022a7e:	f042 0201 	orr.w	r2, r2, #1
 8022a82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8022a84:	bf00      	nop
 8022a86:	370c      	adds	r7, #12
 8022a88:	46bd      	mov	sp, r7
 8022a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a8e:	4770      	bx	lr
 8022a90:	200008f8 	.word	0x200008f8

08022a94 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{  
 8022a94:	b580      	push	{r7, lr}
 8022a96:	b082      	sub	sp, #8
 8022a98:	af00      	add	r7, sp, #0
 8022a9a:	6078      	str	r0, [r7, #4]
 8022a9c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8022a9e:	687a      	ldr	r2, [r7, #4]
 8022aa0:	6839      	ldr	r1, [r7, #0]
 8022aa2:	4805      	ldr	r0, [pc, #20]	; (8022ab8 <BSP_LCD_SetColorKeying+0x24>)
 8022aa4:	f004 fa3e 	bl	8026f24 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8022aa8:	6879      	ldr	r1, [r7, #4]
 8022aaa:	4803      	ldr	r0, [pc, #12]	; (8022ab8 <BSP_LCD_SetColorKeying+0x24>)
 8022aac:	f004 fa7e 	bl	8026fac <HAL_LTDC_EnableColorKeying>
}
 8022ab0:	bf00      	nop
 8022ab2:	3708      	adds	r7, #8
 8022ab4:	46bd      	mov	sp, r7
 8022ab6:	bd80      	pop	{r7, pc}
 8022ab8:	200008f8 	.word	0x200008f8

08022abc <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8022abc:	b480      	push	{r7}
 8022abe:	b083      	sub	sp, #12
 8022ac0:	af00      	add	r7, sp, #0
 8022ac2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8022ac4:	4b07      	ldr	r3, [pc, #28]	; (8022ae4 <BSP_LCD_SetTextColor+0x28>)
 8022ac6:	681a      	ldr	r2, [r3, #0]
 8022ac8:	4907      	ldr	r1, [pc, #28]	; (8022ae8 <BSP_LCD_SetTextColor+0x2c>)
 8022aca:	4613      	mov	r3, r2
 8022acc:	005b      	lsls	r3, r3, #1
 8022ace:	4413      	add	r3, r2
 8022ad0:	009b      	lsls	r3, r3, #2
 8022ad2:	440b      	add	r3, r1
 8022ad4:	687a      	ldr	r2, [r7, #4]
 8022ad6:	601a      	str	r2, [r3, #0]
}
 8022ad8:	bf00      	nop
 8022ada:	370c      	adds	r7, #12
 8022adc:	46bd      	mov	sp, r7
 8022ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae2:	4770      	bx	lr
 8022ae4:	20000a10 	.word	0x20000a10
 8022ae8:	20000a14 	.word	0x20000a14

08022aec <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8022aec:	b480      	push	{r7}
 8022aee:	b083      	sub	sp, #12
 8022af0:	af00      	add	r7, sp, #0
 8022af2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8022af4:	4b08      	ldr	r3, [pc, #32]	; (8022b18 <BSP_LCD_SetBackColor+0x2c>)
 8022af6:	681a      	ldr	r2, [r3, #0]
 8022af8:	4908      	ldr	r1, [pc, #32]	; (8022b1c <BSP_LCD_SetBackColor+0x30>)
 8022afa:	4613      	mov	r3, r2
 8022afc:	005b      	lsls	r3, r3, #1
 8022afe:	4413      	add	r3, r2
 8022b00:	009b      	lsls	r3, r3, #2
 8022b02:	440b      	add	r3, r1
 8022b04:	3304      	adds	r3, #4
 8022b06:	687a      	ldr	r2, [r7, #4]
 8022b08:	601a      	str	r2, [r3, #0]
}
 8022b0a:	bf00      	nop
 8022b0c:	370c      	adds	r7, #12
 8022b0e:	46bd      	mov	sp, r7
 8022b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b14:	4770      	bx	lr
 8022b16:	bf00      	nop
 8022b18:	20000a10 	.word	0x20000a10
 8022b1c:	20000a14 	.word	0x20000a14

08022b20 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8022b20:	b480      	push	{r7}
 8022b22:	b083      	sub	sp, #12
 8022b24:	af00      	add	r7, sp, #0
 8022b26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8022b28:	4b08      	ldr	r3, [pc, #32]	; (8022b4c <BSP_LCD_SetFont+0x2c>)
 8022b2a:	681a      	ldr	r2, [r3, #0]
 8022b2c:	4908      	ldr	r1, [pc, #32]	; (8022b50 <BSP_LCD_SetFont+0x30>)
 8022b2e:	4613      	mov	r3, r2
 8022b30:	005b      	lsls	r3, r3, #1
 8022b32:	4413      	add	r3, r2
 8022b34:	009b      	lsls	r3, r3, #2
 8022b36:	440b      	add	r3, r1
 8022b38:	3308      	adds	r3, #8
 8022b3a:	687a      	ldr	r2, [r7, #4]
 8022b3c:	601a      	str	r2, [r3, #0]
}
 8022b3e:	bf00      	nop
 8022b40:	370c      	adds	r7, #12
 8022b42:	46bd      	mov	sp, r7
 8022b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b48:	4770      	bx	lr
 8022b4a:	bf00      	nop
 8022b4c:	20000a10 	.word	0x20000a10
 8022b50:	20000a14 	.word	0x20000a14

08022b54 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8022b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b56:	b085      	sub	sp, #20
 8022b58:	af02      	add	r7, sp, #8
 8022b5a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8022b5c:	4b0f      	ldr	r3, [pc, #60]	; (8022b9c <BSP_LCD_Clear+0x48>)
 8022b5e:	681c      	ldr	r4, [r3, #0]
 8022b60:	4b0e      	ldr	r3, [pc, #56]	; (8022b9c <BSP_LCD_Clear+0x48>)
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	4a0e      	ldr	r2, [pc, #56]	; (8022ba0 <BSP_LCD_Clear+0x4c>)
 8022b66:	2134      	movs	r1, #52	; 0x34
 8022b68:	fb01 f303 	mul.w	r3, r1, r3
 8022b6c:	4413      	add	r3, r2
 8022b6e:	335c      	adds	r3, #92	; 0x5c
 8022b70:	681b      	ldr	r3, [r3, #0]
 8022b72:	461e      	mov	r6, r3
 8022b74:	f7ff fec4 	bl	8022900 <BSP_LCD_GetXSize>
 8022b78:	4605      	mov	r5, r0
 8022b7a:	f7ff fecd 	bl	8022918 <BSP_LCD_GetYSize>
 8022b7e:	4602      	mov	r2, r0
 8022b80:	687b      	ldr	r3, [r7, #4]
 8022b82:	9301      	str	r3, [sp, #4]
 8022b84:	2300      	movs	r3, #0
 8022b86:	9300      	str	r3, [sp, #0]
 8022b88:	4613      	mov	r3, r2
 8022b8a:	462a      	mov	r2, r5
 8022b8c:	4631      	mov	r1, r6
 8022b8e:	4620      	mov	r0, r4
 8022b90:	f000 fad0 	bl	8023134 <FillBuffer>
}
 8022b94:	bf00      	nop
 8022b96:	370c      	adds	r7, #12
 8022b98:	46bd      	mov	sp, r7
 8022b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b9c:	20000a10 	.word	0x20000a10
 8022ba0:	200008f8 	.word	0x200008f8

08022ba4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8022ba4:	b590      	push	{r4, r7, lr}
 8022ba6:	b083      	sub	sp, #12
 8022ba8:	af00      	add	r7, sp, #0
 8022baa:	4603      	mov	r3, r0
 8022bac:	80fb      	strh	r3, [r7, #6]
 8022bae:	460b      	mov	r3, r1
 8022bb0:	80bb      	strh	r3, [r7, #4]
 8022bb2:	4613      	mov	r3, r2
 8022bb4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022bb6:	4b1b      	ldr	r3, [pc, #108]	; (8022c24 <BSP_LCD_DisplayChar+0x80>)
 8022bb8:	681a      	ldr	r2, [r3, #0]
 8022bba:	491b      	ldr	r1, [pc, #108]	; (8022c28 <BSP_LCD_DisplayChar+0x84>)
 8022bbc:	4613      	mov	r3, r2
 8022bbe:	005b      	lsls	r3, r3, #1
 8022bc0:	4413      	add	r3, r2
 8022bc2:	009b      	lsls	r3, r3, #2
 8022bc4:	440b      	add	r3, r1
 8022bc6:	3308      	adds	r3, #8
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	6819      	ldr	r1, [r3, #0]
 8022bcc:	78fb      	ldrb	r3, [r7, #3]
 8022bce:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022bd2:	4b14      	ldr	r3, [pc, #80]	; (8022c24 <BSP_LCD_DisplayChar+0x80>)
 8022bd4:	681a      	ldr	r2, [r3, #0]
 8022bd6:	4c14      	ldr	r4, [pc, #80]	; (8022c28 <BSP_LCD_DisplayChar+0x84>)
 8022bd8:	4613      	mov	r3, r2
 8022bda:	005b      	lsls	r3, r3, #1
 8022bdc:	4413      	add	r3, r2
 8022bde:	009b      	lsls	r3, r3, #2
 8022be0:	4423      	add	r3, r4
 8022be2:	3308      	adds	r3, #8
 8022be4:	681b      	ldr	r3, [r3, #0]
 8022be6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022be8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8022bec:	4b0d      	ldr	r3, [pc, #52]	; (8022c24 <BSP_LCD_DisplayChar+0x80>)
 8022bee:	681a      	ldr	r2, [r3, #0]
 8022bf0:	4c0d      	ldr	r4, [pc, #52]	; (8022c28 <BSP_LCD_DisplayChar+0x84>)
 8022bf2:	4613      	mov	r3, r2
 8022bf4:	005b      	lsls	r3, r3, #1
 8022bf6:	4413      	add	r3, r2
 8022bf8:	009b      	lsls	r3, r3, #2
 8022bfa:	4423      	add	r3, r4
 8022bfc:	3308      	adds	r3, #8
 8022bfe:	681b      	ldr	r3, [r3, #0]
 8022c00:	889b      	ldrh	r3, [r3, #4]
 8022c02:	3307      	adds	r3, #7
 8022c04:	2b00      	cmp	r3, #0
 8022c06:	da00      	bge.n	8022c0a <BSP_LCD_DisplayChar+0x66>
 8022c08:	3307      	adds	r3, #7
 8022c0a:	10db      	asrs	r3, r3, #3
 8022c0c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8022c10:	18ca      	adds	r2, r1, r3
 8022c12:	88b9      	ldrh	r1, [r7, #4]
 8022c14:	88fb      	ldrh	r3, [r7, #6]
 8022c16:	4618      	mov	r0, r3
 8022c18:	f000 f9d2 	bl	8022fc0 <DrawChar>
}
 8022c1c:	bf00      	nop
 8022c1e:	370c      	adds	r7, #12
 8022c20:	46bd      	mov	sp, r7
 8022c22:	bd90      	pop	{r4, r7, pc}
 8022c24:	20000a10 	.word	0x20000a10
 8022c28:	20000a14 	.word	0x20000a14

08022c2c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8022c2c:	b5b0      	push	{r4, r5, r7, lr}
 8022c2e:	b088      	sub	sp, #32
 8022c30:	af00      	add	r7, sp, #0
 8022c32:	60ba      	str	r2, [r7, #8]
 8022c34:	461a      	mov	r2, r3
 8022c36:	4603      	mov	r3, r0
 8022c38:	81fb      	strh	r3, [r7, #14]
 8022c3a:	460b      	mov	r3, r1
 8022c3c:	81bb      	strh	r3, [r7, #12]
 8022c3e:	4613      	mov	r3, r2
 8022c40:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8022c42:	2301      	movs	r3, #1
 8022c44:	83fb      	strh	r3, [r7, #30]
 8022c46:	2300      	movs	r3, #0
 8022c48:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	61bb      	str	r3, [r7, #24]
 8022c4e:	2300      	movs	r3, #0
 8022c50:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8022c52:	68bb      	ldr	r3, [r7, #8]
 8022c54:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8022c56:	e002      	b.n	8022c5e <BSP_LCD_DisplayStringAt+0x32>
 8022c58:	69bb      	ldr	r3, [r7, #24]
 8022c5a:	3301      	adds	r3, #1
 8022c5c:	61bb      	str	r3, [r7, #24]
 8022c5e:	697b      	ldr	r3, [r7, #20]
 8022c60:	1c5a      	adds	r2, r3, #1
 8022c62:	617a      	str	r2, [r7, #20]
 8022c64:	781b      	ldrb	r3, [r3, #0]
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	d1f6      	bne.n	8022c58 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8022c6a:	f7ff fe49 	bl	8022900 <BSP_LCD_GetXSize>
 8022c6e:	4601      	mov	r1, r0
 8022c70:	4b4b      	ldr	r3, [pc, #300]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022c72:	681a      	ldr	r2, [r3, #0]
 8022c74:	484b      	ldr	r0, [pc, #300]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022c76:	4613      	mov	r3, r2
 8022c78:	005b      	lsls	r3, r3, #1
 8022c7a:	4413      	add	r3, r2
 8022c7c:	009b      	lsls	r3, r3, #2
 8022c7e:	4403      	add	r3, r0
 8022c80:	3308      	adds	r3, #8
 8022c82:	681b      	ldr	r3, [r3, #0]
 8022c84:	889b      	ldrh	r3, [r3, #4]
 8022c86:	fbb1 f3f3 	udiv	r3, r1, r3
 8022c8a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8022c8c:	79fb      	ldrb	r3, [r7, #7]
 8022c8e:	2b03      	cmp	r3, #3
 8022c90:	d01c      	beq.n	8022ccc <BSP_LCD_DisplayStringAt+0xa0>
 8022c92:	2b03      	cmp	r3, #3
 8022c94:	dc33      	bgt.n	8022cfe <BSP_LCD_DisplayStringAt+0xd2>
 8022c96:	2b01      	cmp	r3, #1
 8022c98:	d002      	beq.n	8022ca0 <BSP_LCD_DisplayStringAt+0x74>
 8022c9a:	2b02      	cmp	r3, #2
 8022c9c:	d019      	beq.n	8022cd2 <BSP_LCD_DisplayStringAt+0xa6>
 8022c9e:	e02e      	b.n	8022cfe <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8022ca0:	693a      	ldr	r2, [r7, #16]
 8022ca2:	69bb      	ldr	r3, [r7, #24]
 8022ca4:	1ad1      	subs	r1, r2, r3
 8022ca6:	4b3e      	ldr	r3, [pc, #248]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022ca8:	681a      	ldr	r2, [r3, #0]
 8022caa:	483e      	ldr	r0, [pc, #248]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022cac:	4613      	mov	r3, r2
 8022cae:	005b      	lsls	r3, r3, #1
 8022cb0:	4413      	add	r3, r2
 8022cb2:	009b      	lsls	r3, r3, #2
 8022cb4:	4403      	add	r3, r0
 8022cb6:	3308      	adds	r3, #8
 8022cb8:	681b      	ldr	r3, [r3, #0]
 8022cba:	889b      	ldrh	r3, [r3, #4]
 8022cbc:	fb01 f303 	mul.w	r3, r1, r3
 8022cc0:	085b      	lsrs	r3, r3, #1
 8022cc2:	b29a      	uxth	r2, r3
 8022cc4:	89fb      	ldrh	r3, [r7, #14]
 8022cc6:	4413      	add	r3, r2
 8022cc8:	83fb      	strh	r3, [r7, #30]
      break;
 8022cca:	e01b      	b.n	8022d04 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8022ccc:	89fb      	ldrh	r3, [r7, #14]
 8022cce:	83fb      	strh	r3, [r7, #30]
      break;
 8022cd0:	e018      	b.n	8022d04 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8022cd2:	693a      	ldr	r2, [r7, #16]
 8022cd4:	69bb      	ldr	r3, [r7, #24]
 8022cd6:	1ad3      	subs	r3, r2, r3
 8022cd8:	b299      	uxth	r1, r3
 8022cda:	4b31      	ldr	r3, [pc, #196]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022cdc:	681a      	ldr	r2, [r3, #0]
 8022cde:	4831      	ldr	r0, [pc, #196]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022ce0:	4613      	mov	r3, r2
 8022ce2:	005b      	lsls	r3, r3, #1
 8022ce4:	4413      	add	r3, r2
 8022ce6:	009b      	lsls	r3, r3, #2
 8022ce8:	4403      	add	r3, r0
 8022cea:	3308      	adds	r3, #8
 8022cec:	681b      	ldr	r3, [r3, #0]
 8022cee:	889b      	ldrh	r3, [r3, #4]
 8022cf0:	fb11 f303 	smulbb	r3, r1, r3
 8022cf4:	b29a      	uxth	r2, r3
 8022cf6:	89fb      	ldrh	r3, [r7, #14]
 8022cf8:	4413      	add	r3, r2
 8022cfa:	83fb      	strh	r3, [r7, #30]
      break;
 8022cfc:	e002      	b.n	8022d04 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8022cfe:	89fb      	ldrh	r3, [r7, #14]
 8022d00:	83fb      	strh	r3, [r7, #30]
      break;
 8022d02:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022d04:	e01a      	b.n	8022d3c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	781a      	ldrb	r2, [r3, #0]
 8022d0a:	89b9      	ldrh	r1, [r7, #12]
 8022d0c:	8bfb      	ldrh	r3, [r7, #30]
 8022d0e:	4618      	mov	r0, r3
 8022d10:	f7ff ff48 	bl	8022ba4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8022d14:	4b22      	ldr	r3, [pc, #136]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022d16:	681a      	ldr	r2, [r3, #0]
 8022d18:	4922      	ldr	r1, [pc, #136]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022d1a:	4613      	mov	r3, r2
 8022d1c:	005b      	lsls	r3, r3, #1
 8022d1e:	4413      	add	r3, r2
 8022d20:	009b      	lsls	r3, r3, #2
 8022d22:	440b      	add	r3, r1
 8022d24:	3308      	adds	r3, #8
 8022d26:	681b      	ldr	r3, [r3, #0]
 8022d28:	889a      	ldrh	r2, [r3, #4]
 8022d2a:	8bfb      	ldrh	r3, [r7, #30]
 8022d2c:	4413      	add	r3, r2
 8022d2e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8022d30:	68bb      	ldr	r3, [r7, #8]
 8022d32:	3301      	adds	r3, #1
 8022d34:	60bb      	str	r3, [r7, #8]
    i++;
 8022d36:	8bbb      	ldrh	r3, [r7, #28]
 8022d38:	3301      	adds	r3, #1
 8022d3a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8022d3c:	68bb      	ldr	r3, [r7, #8]
 8022d3e:	781b      	ldrb	r3, [r3, #0]
 8022d40:	2b00      	cmp	r3, #0
 8022d42:	bf14      	ite	ne
 8022d44:	2301      	movne	r3, #1
 8022d46:	2300      	moveq	r3, #0
 8022d48:	b2dc      	uxtb	r4, r3
 8022d4a:	f7ff fdd9 	bl	8022900 <BSP_LCD_GetXSize>
 8022d4e:	8bb9      	ldrh	r1, [r7, #28]
 8022d50:	4b13      	ldr	r3, [pc, #76]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022d52:	681a      	ldr	r2, [r3, #0]
 8022d54:	4d13      	ldr	r5, [pc, #76]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022d56:	4613      	mov	r3, r2
 8022d58:	005b      	lsls	r3, r3, #1
 8022d5a:	4413      	add	r3, r2
 8022d5c:	009b      	lsls	r3, r3, #2
 8022d5e:	442b      	add	r3, r5
 8022d60:	3308      	adds	r3, #8
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	889b      	ldrh	r3, [r3, #4]
 8022d66:	fb01 f303 	mul.w	r3, r1, r3
 8022d6a:	1ac3      	subs	r3, r0, r3
 8022d6c:	b299      	uxth	r1, r3
 8022d6e:	4b0c      	ldr	r3, [pc, #48]	; (8022da0 <BSP_LCD_DisplayStringAt+0x174>)
 8022d70:	681a      	ldr	r2, [r3, #0]
 8022d72:	480c      	ldr	r0, [pc, #48]	; (8022da4 <BSP_LCD_DisplayStringAt+0x178>)
 8022d74:	4613      	mov	r3, r2
 8022d76:	005b      	lsls	r3, r3, #1
 8022d78:	4413      	add	r3, r2
 8022d7a:	009b      	lsls	r3, r3, #2
 8022d7c:	4403      	add	r3, r0
 8022d7e:	3308      	adds	r3, #8
 8022d80:	681b      	ldr	r3, [r3, #0]
 8022d82:	889b      	ldrh	r3, [r3, #4]
 8022d84:	4299      	cmp	r1, r3
 8022d86:	bf2c      	ite	cs
 8022d88:	2301      	movcs	r3, #1
 8022d8a:	2300      	movcc	r3, #0
 8022d8c:	b2db      	uxtb	r3, r3
 8022d8e:	4023      	ands	r3, r4
 8022d90:	b2db      	uxtb	r3, r3
 8022d92:	2b00      	cmp	r3, #0
 8022d94:	d1b7      	bne.n	8022d06 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8022d96:	bf00      	nop
 8022d98:	bf00      	nop
 8022d9a:	3720      	adds	r7, #32
 8022d9c:	46bd      	mov	sp, r7
 8022d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8022da0:	20000a10 	.word	0x20000a10
 8022da4:	20000a14 	.word	0x20000a14

08022da8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8022da8:	b580      	push	{r7, lr}
 8022daa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8022dac:	4b05      	ldr	r3, [pc, #20]	; (8022dc4 <BSP_LCD_DisplayOn+0x1c>)
 8022dae:	681b      	ldr	r3, [r3, #0]
 8022db0:	689b      	ldr	r3, [r3, #8]
 8022db2:	2b00      	cmp	r3, #0
 8022db4:	d003      	beq.n	8022dbe <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8022db6:	4b03      	ldr	r3, [pc, #12]	; (8022dc4 <BSP_LCD_DisplayOn+0x1c>)
 8022db8:	681b      	ldr	r3, [r3, #0]
 8022dba:	689b      	ldr	r3, [r3, #8]
 8022dbc:	4798      	blx	r3
  }
}
 8022dbe:	bf00      	nop
 8022dc0:	bd80      	pop	{r7, pc}
 8022dc2:	bf00      	nop
 8022dc4:	20000a2c 	.word	0x20000a2c

08022dc8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8022dc8:	b580      	push	{r7, lr}
 8022dca:	b08e      	sub	sp, #56	; 0x38
 8022dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8022dce:	2300      	movs	r3, #0
 8022dd0:	623b      	str	r3, [r7, #32]
 8022dd2:	4b61      	ldr	r3, [pc, #388]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022dd6:	4a60      	ldr	r2, [pc, #384]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022dd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8022ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8022dde:	4b5e      	ldr	r3, [pc, #376]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022de2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8022de6:	623b      	str	r3, [r7, #32]
 8022de8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8022dea:	2300      	movs	r3, #0
 8022dec:	61fb      	str	r3, [r7, #28]
 8022dee:	4b5a      	ldr	r3, [pc, #360]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022df2:	4a59      	ldr	r2, [pc, #356]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8022df8:	6313      	str	r3, [r2, #48]	; 0x30
 8022dfa:	4b57      	ldr	r3, [pc, #348]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8022e02:	61fb      	str	r3, [r7, #28]
 8022e04:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022e06:	2300      	movs	r3, #0
 8022e08:	61bb      	str	r3, [r7, #24]
 8022e0a:	4b53      	ldr	r3, [pc, #332]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e0e:	4a52      	ldr	r2, [pc, #328]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e10:	f043 0301 	orr.w	r3, r3, #1
 8022e14:	6313      	str	r3, [r2, #48]	; 0x30
 8022e16:	4b50      	ldr	r3, [pc, #320]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e1a:	f003 0301 	and.w	r3, r3, #1
 8022e1e:	61bb      	str	r3, [r7, #24]
 8022e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8022e22:	2300      	movs	r3, #0
 8022e24:	617b      	str	r3, [r7, #20]
 8022e26:	4b4c      	ldr	r3, [pc, #304]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e2a:	4a4b      	ldr	r2, [pc, #300]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e2c:	f043 0302 	orr.w	r3, r3, #2
 8022e30:	6313      	str	r3, [r2, #48]	; 0x30
 8022e32:	4b49      	ldr	r3, [pc, #292]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e36:	f003 0302 	and.w	r3, r3, #2
 8022e3a:	617b      	str	r3, [r7, #20]
 8022e3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8022e3e:	2300      	movs	r3, #0
 8022e40:	613b      	str	r3, [r7, #16]
 8022e42:	4b45      	ldr	r3, [pc, #276]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e46:	4a44      	ldr	r2, [pc, #272]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e48:	f043 0304 	orr.w	r3, r3, #4
 8022e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8022e4e:	4b42      	ldr	r3, [pc, #264]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e52:	f003 0304 	and.w	r3, r3, #4
 8022e56:	613b      	str	r3, [r7, #16]
 8022e58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022e5a:	2300      	movs	r3, #0
 8022e5c:	60fb      	str	r3, [r7, #12]
 8022e5e:	4b3e      	ldr	r3, [pc, #248]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e62:	4a3d      	ldr	r2, [pc, #244]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e64:	f043 0308 	orr.w	r3, r3, #8
 8022e68:	6313      	str	r3, [r2, #48]	; 0x30
 8022e6a:	4b3b      	ldr	r3, [pc, #236]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e6e:	f003 0308 	and.w	r3, r3, #8
 8022e72:	60fb      	str	r3, [r7, #12]
 8022e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8022e76:	2300      	movs	r3, #0
 8022e78:	60bb      	str	r3, [r7, #8]
 8022e7a:	4b37      	ldr	r3, [pc, #220]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e7e:	4a36      	ldr	r2, [pc, #216]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e80:	f043 0320 	orr.w	r3, r3, #32
 8022e84:	6313      	str	r3, [r2, #48]	; 0x30
 8022e86:	4b34      	ldr	r3, [pc, #208]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e8a:	f003 0320 	and.w	r3, r3, #32
 8022e8e:	60bb      	str	r3, [r7, #8]
 8022e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8022e92:	2300      	movs	r3, #0
 8022e94:	607b      	str	r3, [r7, #4]
 8022e96:	4b30      	ldr	r3, [pc, #192]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022e9a:	4a2f      	ldr	r2, [pc, #188]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8022ea2:	4b2d      	ldr	r3, [pc, #180]	; (8022f58 <BSP_LCD_MspInit+0x190>)
 8022ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022eaa:	607b      	str	r3, [r7, #4]
 8022eac:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8022eae:	f641 0358 	movw	r3, #6232	; 0x1858
 8022eb2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8022eb4:	2302      	movs	r3, #2
 8022eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8022eb8:	2300      	movs	r3, #0
 8022eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8022ebc:	2302      	movs	r3, #2
 8022ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8022ec0:	230e      	movs	r3, #14
 8022ec2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8022ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022ec8:	4619      	mov	r1, r3
 8022eca:	4824      	ldr	r0, [pc, #144]	; (8022f5c <BSP_LCD_MspInit+0x194>)
 8022ecc:	f001 fda6 	bl	8024a1c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8022ed0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8022ed4:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022eda:	4619      	mov	r1, r3
 8022edc:	4820      	ldr	r0, [pc, #128]	; (8022f60 <BSP_LCD_MspInit+0x198>)
 8022ede:	f001 fd9d 	bl	8024a1c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8022ee2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8022ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8022ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022eec:	4619      	mov	r1, r3
 8022eee:	481d      	ldr	r0, [pc, #116]	; (8022f64 <BSP_LCD_MspInit+0x19c>)
 8022ef0:	f001 fd94 	bl	8024a1c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8022ef4:	2348      	movs	r3, #72	; 0x48
 8022ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8022ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022efc:	4619      	mov	r1, r3
 8022efe:	481a      	ldr	r0, [pc, #104]	; (8022f68 <BSP_LCD_MspInit+0x1a0>)
 8022f00:	f001 fd8c 	bl	8024a1c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8022f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8022f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f0e:	4619      	mov	r1, r3
 8022f10:	4816      	ldr	r0, [pc, #88]	; (8022f6c <BSP_LCD_MspInit+0x1a4>)
 8022f12:	f001 fd83 	bl	8024a1c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8022f16:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8022f1a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f20:	4619      	mov	r1, r3
 8022f22:	4813      	ldr	r0, [pc, #76]	; (8022f70 <BSP_LCD_MspInit+0x1a8>)
 8022f24:	f001 fd7a 	bl	8024a1c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8022f28:	2303      	movs	r3, #3
 8022f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8022f2c:	2309      	movs	r3, #9
 8022f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8022f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f34:	4619      	mov	r1, r3
 8022f36:	480a      	ldr	r0, [pc, #40]	; (8022f60 <BSP_LCD_MspInit+0x198>)
 8022f38:	f001 fd70 	bl	8024a1c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8022f3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8022f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022f46:	4619      	mov	r1, r3
 8022f48:	4809      	ldr	r0, [pc, #36]	; (8022f70 <BSP_LCD_MspInit+0x1a8>)
 8022f4a:	f001 fd67 	bl	8024a1c <HAL_GPIO_Init>
}
 8022f4e:	bf00      	nop
 8022f50:	3738      	adds	r7, #56	; 0x38
 8022f52:	46bd      	mov	sp, r7
 8022f54:	bd80      	pop	{r7, pc}
 8022f56:	bf00      	nop
 8022f58:	40023800 	.word	0x40023800
 8022f5c:	40020000 	.word	0x40020000
 8022f60:	40020400 	.word	0x40020400
 8022f64:	40020800 	.word	0x40020800
 8022f68:	40020c00 	.word	0x40020c00
 8022f6c:	40021400 	.word	0x40021400
 8022f70:	40021800 	.word	0x40021800

08022f74 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8022f74:	b5b0      	push	{r4, r5, r7, lr}
 8022f76:	b082      	sub	sp, #8
 8022f78:	af00      	add	r7, sp, #0
 8022f7a:	4603      	mov	r3, r0
 8022f7c:	603a      	str	r2, [r7, #0]
 8022f7e:	80fb      	strh	r3, [r7, #6]
 8022f80:	460b      	mov	r3, r1
 8022f82:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8022f84:	4b0c      	ldr	r3, [pc, #48]	; (8022fb8 <BSP_LCD_DrawPixel+0x44>)
 8022f86:	681b      	ldr	r3, [r3, #0]
 8022f88:	4a0c      	ldr	r2, [pc, #48]	; (8022fbc <BSP_LCD_DrawPixel+0x48>)
 8022f8a:	2134      	movs	r1, #52	; 0x34
 8022f8c:	fb01 f303 	mul.w	r3, r1, r3
 8022f90:	4413      	add	r3, r2
 8022f92:	335c      	adds	r3, #92	; 0x5c
 8022f94:	681c      	ldr	r4, [r3, #0]
 8022f96:	88bd      	ldrh	r5, [r7, #4]
 8022f98:	f7ff fcb2 	bl	8022900 <BSP_LCD_GetXSize>
 8022f9c:	4603      	mov	r3, r0
 8022f9e:	fb03 f205 	mul.w	r2, r3, r5
 8022fa2:	88fb      	ldrh	r3, [r7, #6]
 8022fa4:	4413      	add	r3, r2
 8022fa6:	009b      	lsls	r3, r3, #2
 8022fa8:	4423      	add	r3, r4
 8022faa:	461a      	mov	r2, r3
 8022fac:	683b      	ldr	r3, [r7, #0]
 8022fae:	6013      	str	r3, [r2, #0]
}
 8022fb0:	bf00      	nop
 8022fb2:	3708      	adds	r7, #8
 8022fb4:	46bd      	mov	sp, r7
 8022fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8022fb8:	20000a10 	.word	0x20000a10
 8022fbc:	200008f8 	.word	0x200008f8

08022fc0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8022fc0:	b580      	push	{r7, lr}
 8022fc2:	b088      	sub	sp, #32
 8022fc4:	af00      	add	r7, sp, #0
 8022fc6:	4603      	mov	r3, r0
 8022fc8:	603a      	str	r2, [r7, #0]
 8022fca:	80fb      	strh	r3, [r7, #6]
 8022fcc:	460b      	mov	r3, r1
 8022fce:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8022fd0:	2300      	movs	r3, #0
 8022fd2:	61fb      	str	r3, [r7, #28]
 8022fd4:	2300      	movs	r3, #0
 8022fd6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8022fd8:	2300      	movs	r3, #0
 8022fda:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8022fdc:	4b53      	ldr	r3, [pc, #332]	; (802312c <DrawChar+0x16c>)
 8022fde:	681a      	ldr	r2, [r3, #0]
 8022fe0:	4953      	ldr	r1, [pc, #332]	; (8023130 <DrawChar+0x170>)
 8022fe2:	4613      	mov	r3, r2
 8022fe4:	005b      	lsls	r3, r3, #1
 8022fe6:	4413      	add	r3, r2
 8022fe8:	009b      	lsls	r3, r3, #2
 8022fea:	440b      	add	r3, r1
 8022fec:	3308      	adds	r3, #8
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	88db      	ldrh	r3, [r3, #6]
 8022ff2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8022ff4:	4b4d      	ldr	r3, [pc, #308]	; (802312c <DrawChar+0x16c>)
 8022ff6:	681a      	ldr	r2, [r3, #0]
 8022ff8:	494d      	ldr	r1, [pc, #308]	; (8023130 <DrawChar+0x170>)
 8022ffa:	4613      	mov	r3, r2
 8022ffc:	005b      	lsls	r3, r3, #1
 8022ffe:	4413      	add	r3, r2
 8023000:	009b      	lsls	r3, r3, #2
 8023002:	440b      	add	r3, r1
 8023004:	3308      	adds	r3, #8
 8023006:	681b      	ldr	r3, [r3, #0]
 8023008:	889b      	ldrh	r3, [r3, #4]
 802300a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 802300c:	8a3b      	ldrh	r3, [r7, #16]
 802300e:	3307      	adds	r3, #7
 8023010:	2b00      	cmp	r3, #0
 8023012:	da00      	bge.n	8023016 <DrawChar+0x56>
 8023014:	3307      	adds	r3, #7
 8023016:	10db      	asrs	r3, r3, #3
 8023018:	b2db      	uxtb	r3, r3
 802301a:	00db      	lsls	r3, r3, #3
 802301c:	b2da      	uxtb	r2, r3
 802301e:	8a3b      	ldrh	r3, [r7, #16]
 8023020:	b2db      	uxtb	r3, r3
 8023022:	1ad3      	subs	r3, r2, r3
 8023024:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8023026:	2300      	movs	r3, #0
 8023028:	61fb      	str	r3, [r7, #28]
 802302a:	e076      	b.n	802311a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 802302c:	8a3b      	ldrh	r3, [r7, #16]
 802302e:	3307      	adds	r3, #7
 8023030:	2b00      	cmp	r3, #0
 8023032:	da00      	bge.n	8023036 <DrawChar+0x76>
 8023034:	3307      	adds	r3, #7
 8023036:	10db      	asrs	r3, r3, #3
 8023038:	461a      	mov	r2, r3
 802303a:	69fb      	ldr	r3, [r7, #28]
 802303c:	fb02 f303 	mul.w	r3, r2, r3
 8023040:	683a      	ldr	r2, [r7, #0]
 8023042:	4413      	add	r3, r2
 8023044:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8023046:	8a3b      	ldrh	r3, [r7, #16]
 8023048:	3307      	adds	r3, #7
 802304a:	2b00      	cmp	r3, #0
 802304c:	da00      	bge.n	8023050 <DrawChar+0x90>
 802304e:	3307      	adds	r3, #7
 8023050:	10db      	asrs	r3, r3, #3
 8023052:	2b01      	cmp	r3, #1
 8023054:	d002      	beq.n	802305c <DrawChar+0x9c>
 8023056:	2b02      	cmp	r3, #2
 8023058:	d004      	beq.n	8023064 <DrawChar+0xa4>
 802305a:	e00c      	b.n	8023076 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 802305c:	68bb      	ldr	r3, [r7, #8]
 802305e:	781b      	ldrb	r3, [r3, #0]
 8023060:	617b      	str	r3, [r7, #20]
      break;
 8023062:	e016      	b.n	8023092 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8023064:	68bb      	ldr	r3, [r7, #8]
 8023066:	781b      	ldrb	r3, [r3, #0]
 8023068:	021b      	lsls	r3, r3, #8
 802306a:	68ba      	ldr	r2, [r7, #8]
 802306c:	3201      	adds	r2, #1
 802306e:	7812      	ldrb	r2, [r2, #0]
 8023070:	4313      	orrs	r3, r2
 8023072:	617b      	str	r3, [r7, #20]
      break;
 8023074:	e00d      	b.n	8023092 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8023076:	68bb      	ldr	r3, [r7, #8]
 8023078:	781b      	ldrb	r3, [r3, #0]
 802307a:	041a      	lsls	r2, r3, #16
 802307c:	68bb      	ldr	r3, [r7, #8]
 802307e:	3301      	adds	r3, #1
 8023080:	781b      	ldrb	r3, [r3, #0]
 8023082:	021b      	lsls	r3, r3, #8
 8023084:	4313      	orrs	r3, r2
 8023086:	68ba      	ldr	r2, [r7, #8]
 8023088:	3202      	adds	r2, #2
 802308a:	7812      	ldrb	r2, [r2, #0]
 802308c:	4313      	orrs	r3, r2
 802308e:	617b      	str	r3, [r7, #20]
      break;
 8023090:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8023092:	2300      	movs	r3, #0
 8023094:	61bb      	str	r3, [r7, #24]
 8023096:	e036      	b.n	8023106 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8023098:	8a3a      	ldrh	r2, [r7, #16]
 802309a:	69bb      	ldr	r3, [r7, #24]
 802309c:	1ad2      	subs	r2, r2, r3
 802309e:	7bfb      	ldrb	r3, [r7, #15]
 80230a0:	4413      	add	r3, r2
 80230a2:	3b01      	subs	r3, #1
 80230a4:	2201      	movs	r2, #1
 80230a6:	fa02 f303 	lsl.w	r3, r2, r3
 80230aa:	461a      	mov	r2, r3
 80230ac:	697b      	ldr	r3, [r7, #20]
 80230ae:	4013      	ands	r3, r2
 80230b0:	2b00      	cmp	r3, #0
 80230b2:	d012      	beq.n	80230da <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80230b4:	69bb      	ldr	r3, [r7, #24]
 80230b6:	b29a      	uxth	r2, r3
 80230b8:	88fb      	ldrh	r3, [r7, #6]
 80230ba:	4413      	add	r3, r2
 80230bc:	b298      	uxth	r0, r3
 80230be:	4b1b      	ldr	r3, [pc, #108]	; (802312c <DrawChar+0x16c>)
 80230c0:	681a      	ldr	r2, [r3, #0]
 80230c2:	491b      	ldr	r1, [pc, #108]	; (8023130 <DrawChar+0x170>)
 80230c4:	4613      	mov	r3, r2
 80230c6:	005b      	lsls	r3, r3, #1
 80230c8:	4413      	add	r3, r2
 80230ca:	009b      	lsls	r3, r3, #2
 80230cc:	440b      	add	r3, r1
 80230ce:	681a      	ldr	r2, [r3, #0]
 80230d0:	88bb      	ldrh	r3, [r7, #4]
 80230d2:	4619      	mov	r1, r3
 80230d4:	f7ff ff4e 	bl	8022f74 <BSP_LCD_DrawPixel>
 80230d8:	e012      	b.n	8023100 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80230da:	69bb      	ldr	r3, [r7, #24]
 80230dc:	b29a      	uxth	r2, r3
 80230de:	88fb      	ldrh	r3, [r7, #6]
 80230e0:	4413      	add	r3, r2
 80230e2:	b298      	uxth	r0, r3
 80230e4:	4b11      	ldr	r3, [pc, #68]	; (802312c <DrawChar+0x16c>)
 80230e6:	681a      	ldr	r2, [r3, #0]
 80230e8:	4911      	ldr	r1, [pc, #68]	; (8023130 <DrawChar+0x170>)
 80230ea:	4613      	mov	r3, r2
 80230ec:	005b      	lsls	r3, r3, #1
 80230ee:	4413      	add	r3, r2
 80230f0:	009b      	lsls	r3, r3, #2
 80230f2:	440b      	add	r3, r1
 80230f4:	3304      	adds	r3, #4
 80230f6:	681a      	ldr	r2, [r3, #0]
 80230f8:	88bb      	ldrh	r3, [r7, #4]
 80230fa:	4619      	mov	r1, r3
 80230fc:	f7ff ff3a 	bl	8022f74 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8023100:	69bb      	ldr	r3, [r7, #24]
 8023102:	3301      	adds	r3, #1
 8023104:	61bb      	str	r3, [r7, #24]
 8023106:	8a3b      	ldrh	r3, [r7, #16]
 8023108:	69ba      	ldr	r2, [r7, #24]
 802310a:	429a      	cmp	r2, r3
 802310c:	d3c4      	bcc.n	8023098 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 802310e:	88bb      	ldrh	r3, [r7, #4]
 8023110:	3301      	adds	r3, #1
 8023112:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8023114:	69fb      	ldr	r3, [r7, #28]
 8023116:	3301      	adds	r3, #1
 8023118:	61fb      	str	r3, [r7, #28]
 802311a:	8a7b      	ldrh	r3, [r7, #18]
 802311c:	69fa      	ldr	r2, [r7, #28]
 802311e:	429a      	cmp	r2, r3
 8023120:	d384      	bcc.n	802302c <DrawChar+0x6c>
  }
}
 8023122:	bf00      	nop
 8023124:	bf00      	nop
 8023126:	3720      	adds	r7, #32
 8023128:	46bd      	mov	sp, r7
 802312a:	bd80      	pop	{r7, pc}
 802312c:	20000a10 	.word	0x20000a10
 8023130:	20000a14 	.word	0x20000a14

08023134 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8023134:	b580      	push	{r7, lr}
 8023136:	b086      	sub	sp, #24
 8023138:	af02      	add	r7, sp, #8
 802313a:	60f8      	str	r0, [r7, #12]
 802313c:	60b9      	str	r1, [r7, #8]
 802313e:	607a      	str	r2, [r7, #4]
 8023140:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8023142:	4b16      	ldr	r3, [pc, #88]	; (802319c <FillBuffer+0x68>)
 8023144:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8023148:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 802314a:	4b14      	ldr	r3, [pc, #80]	; (802319c <FillBuffer+0x68>)
 802314c:	2200      	movs	r2, #0
 802314e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8023150:	4a12      	ldr	r2, [pc, #72]	; (802319c <FillBuffer+0x68>)
 8023152:	69bb      	ldr	r3, [r7, #24]
 8023154:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8023156:	4b11      	ldr	r3, [pc, #68]	; (802319c <FillBuffer+0x68>)
 8023158:	4a11      	ldr	r2, [pc, #68]	; (80231a0 <FillBuffer+0x6c>)
 802315a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 802315c:	480f      	ldr	r0, [pc, #60]	; (802319c <FillBuffer+0x68>)
 802315e:	f000 fdbb 	bl	8023cd8 <HAL_DMA2D_Init>
 8023162:	4603      	mov	r3, r0
 8023164:	2b00      	cmp	r3, #0
 8023166:	d115      	bne.n	8023194 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8023168:	68f9      	ldr	r1, [r7, #12]
 802316a:	480c      	ldr	r0, [pc, #48]	; (802319c <FillBuffer+0x68>)
 802316c:	f001 f822 	bl	80241b4 <HAL_DMA2D_ConfigLayer>
 8023170:	4603      	mov	r3, r0
 8023172:	2b00      	cmp	r3, #0
 8023174:	d10e      	bne.n	8023194 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8023176:	68ba      	ldr	r2, [r7, #8]
 8023178:	683b      	ldr	r3, [r7, #0]
 802317a:	9300      	str	r3, [sp, #0]
 802317c:	687b      	ldr	r3, [r7, #4]
 802317e:	69f9      	ldr	r1, [r7, #28]
 8023180:	4806      	ldr	r0, [pc, #24]	; (802319c <FillBuffer+0x68>)
 8023182:	f000 fdf2 	bl	8023d6a <HAL_DMA2D_Start>
 8023186:	4603      	mov	r3, r0
 8023188:	2b00      	cmp	r3, #0
 802318a:	d103      	bne.n	8023194 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 802318c:	210a      	movs	r1, #10
 802318e:	4803      	ldr	r0, [pc, #12]	; (802319c <FillBuffer+0x68>)
 8023190:	f000 fe16 	bl	8023dc0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8023194:	bf00      	nop
 8023196:	3710      	adds	r7, #16
 8023198:	46bd      	mov	sp, r7
 802319a:	bd80      	pop	{r7, pc}
 802319c:	200009a0 	.word	0x200009a0
 80231a0:	4002b000 	.word	0x4002b000

080231a4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80231a4:	b580      	push	{r7, lr}
 80231a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80231a8:	4b29      	ldr	r3, [pc, #164]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231aa:	4a2a      	ldr	r2, [pc, #168]	; (8023254 <BSP_SDRAM_Init+0xb0>)
 80231ac:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80231ae:	4b2a      	ldr	r3, [pc, #168]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231b0:	2202      	movs	r2, #2
 80231b2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80231b4:	4b28      	ldr	r3, [pc, #160]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231b6:	2207      	movs	r2, #7
 80231b8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80231ba:	4b27      	ldr	r3, [pc, #156]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231bc:	2204      	movs	r2, #4
 80231be:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80231c0:	4b25      	ldr	r3, [pc, #148]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231c2:	2207      	movs	r2, #7
 80231c4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80231c6:	4b24      	ldr	r3, [pc, #144]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231c8:	2202      	movs	r2, #2
 80231ca:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80231cc:	4b22      	ldr	r3, [pc, #136]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231ce:	2202      	movs	r2, #2
 80231d0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80231d2:	4b21      	ldr	r3, [pc, #132]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 80231d4:	2202      	movs	r2, #2
 80231d6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80231d8:	4b1d      	ldr	r3, [pc, #116]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231da:	2201      	movs	r2, #1
 80231dc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80231de:	4b1c      	ldr	r3, [pc, #112]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231e0:	2200      	movs	r2, #0
 80231e2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80231e4:	4b1a      	ldr	r3, [pc, #104]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231e6:	2204      	movs	r2, #4
 80231e8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80231ea:	4b19      	ldr	r3, [pc, #100]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231ec:	2210      	movs	r2, #16
 80231ee:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80231f0:	4b17      	ldr	r3, [pc, #92]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231f2:	2240      	movs	r2, #64	; 0x40
 80231f4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80231f6:	4b16      	ldr	r3, [pc, #88]	; (8023250 <BSP_SDRAM_Init+0xac>)
 80231f8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80231fc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80231fe:	4b14      	ldr	r3, [pc, #80]	; (8023250 <BSP_SDRAM_Init+0xac>)
 8023200:	2200      	movs	r2, #0
 8023202:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8023204:	4b12      	ldr	r3, [pc, #72]	; (8023250 <BSP_SDRAM_Init+0xac>)
 8023206:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802320a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 802320c:	4b10      	ldr	r3, [pc, #64]	; (8023250 <BSP_SDRAM_Init+0xac>)
 802320e:	2200      	movs	r2, #0
 8023210:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8023212:	4b0f      	ldr	r3, [pc, #60]	; (8023250 <BSP_SDRAM_Init+0xac>)
 8023214:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023218:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 802321a:	2100      	movs	r1, #0
 802321c:	480c      	ldr	r0, [pc, #48]	; (8023250 <BSP_SDRAM_Init+0xac>)
 802321e:	f000 f87f 	bl	8023320 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8023222:	490d      	ldr	r1, [pc, #52]	; (8023258 <BSP_SDRAM_Init+0xb4>)
 8023224:	480a      	ldr	r0, [pc, #40]	; (8023250 <BSP_SDRAM_Init+0xac>)
 8023226:	f004 ff47 	bl	80280b8 <HAL_SDRAM_Init>
 802322a:	4603      	mov	r3, r0
 802322c:	2b00      	cmp	r3, #0
 802322e:	d003      	beq.n	8023238 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8023230:	4b0a      	ldr	r3, [pc, #40]	; (802325c <BSP_SDRAM_Init+0xb8>)
 8023232:	2201      	movs	r2, #1
 8023234:	701a      	strb	r2, [r3, #0]
 8023236:	e002      	b.n	802323e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8023238:	4b08      	ldr	r3, [pc, #32]	; (802325c <BSP_SDRAM_Init+0xb8>)
 802323a:	2200      	movs	r2, #0
 802323c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 802323e:	f240 506a 	movw	r0, #1386	; 0x56a
 8023242:	f000 f80d 	bl	8023260 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8023246:	4b05      	ldr	r3, [pc, #20]	; (802325c <BSP_SDRAM_Init+0xb8>)
 8023248:	781b      	ldrb	r3, [r3, #0]
}
 802324a:	4618      	mov	r0, r3
 802324c:	bd80      	pop	{r7, pc}
 802324e:	bf00      	nop
 8023250:	20000a30 	.word	0x20000a30
 8023254:	a0000140 	.word	0xa0000140
 8023258:	20000a64 	.word	0x20000a64
 802325c:	20000054 	.word	0x20000054

08023260 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8023260:	b580      	push	{r7, lr}
 8023262:	b084      	sub	sp, #16
 8023264:	af00      	add	r7, sp, #0
 8023266:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8023268:	2300      	movs	r3, #0
 802326a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 802326c:	4b2a      	ldr	r3, [pc, #168]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802326e:	2201      	movs	r2, #1
 8023270:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8023272:	4b29      	ldr	r3, [pc, #164]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023274:	2208      	movs	r2, #8
 8023276:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8023278:	4b27      	ldr	r3, [pc, #156]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802327a:	2201      	movs	r2, #1
 802327c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 802327e:	4b26      	ldr	r3, [pc, #152]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023280:	2200      	movs	r2, #0
 8023282:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8023284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023288:	4923      	ldr	r1, [pc, #140]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802328a:	4824      	ldr	r0, [pc, #144]	; (802331c <BSP_SDRAM_Initialization_sequence+0xbc>)
 802328c:	f004 ff48 	bl	8028120 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8023290:	2001      	movs	r0, #1
 8023292:	f000 f993 	bl	80235bc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8023296:	4b20      	ldr	r3, [pc, #128]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023298:	2202      	movs	r2, #2
 802329a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 802329c:	4b1e      	ldr	r3, [pc, #120]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 802329e:	2208      	movs	r2, #8
 80232a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80232a2:	4b1d      	ldr	r3, [pc, #116]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232a4:	2201      	movs	r2, #1
 80232a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80232a8:	4b1b      	ldr	r3, [pc, #108]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232aa:	2200      	movs	r2, #0
 80232ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80232ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80232b2:	4919      	ldr	r1, [pc, #100]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232b4:	4819      	ldr	r0, [pc, #100]	; (802331c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80232b6:	f004 ff33 	bl	8028120 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80232ba:	4b17      	ldr	r3, [pc, #92]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232bc:	2203      	movs	r2, #3
 80232be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80232c0:	4b15      	ldr	r3, [pc, #84]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232c2:	2208      	movs	r2, #8
 80232c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80232c6:	4b14      	ldr	r3, [pc, #80]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232c8:	2204      	movs	r2, #4
 80232ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80232cc:	4b12      	ldr	r3, [pc, #72]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232ce:	2200      	movs	r2, #0
 80232d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80232d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80232d6:	4910      	ldr	r1, [pc, #64]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232d8:	4810      	ldr	r0, [pc, #64]	; (802331c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80232da:	f004 ff21 	bl	8028120 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80232de:	f44f 730c 	mov.w	r3, #560	; 0x230
 80232e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80232e4:	4b0c      	ldr	r3, [pc, #48]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232e6:	2204      	movs	r2, #4
 80232e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80232ea:	4b0b      	ldr	r3, [pc, #44]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232ec:	2208      	movs	r2, #8
 80232ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80232f0:	4b09      	ldr	r3, [pc, #36]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232f2:	2201      	movs	r2, #1
 80232f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80232f6:	68fb      	ldr	r3, [r7, #12]
 80232f8:	4a07      	ldr	r2, [pc, #28]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80232fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80232fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023300:	4905      	ldr	r1, [pc, #20]	; (8023318 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8023302:	4806      	ldr	r0, [pc, #24]	; (802331c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8023304:	f004 ff0c 	bl	8028120 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8023308:	6879      	ldr	r1, [r7, #4]
 802330a:	4804      	ldr	r0, [pc, #16]	; (802331c <BSP_SDRAM_Initialization_sequence+0xbc>)
 802330c:	f004 ff3d 	bl	802818a <HAL_SDRAM_ProgramRefreshRate>
}
 8023310:	bf00      	nop
 8023312:	3710      	adds	r7, #16
 8023314:	46bd      	mov	sp, r7
 8023316:	bd80      	pop	{r7, pc}
 8023318:	20000a80 	.word	0x20000a80
 802331c:	20000a30 	.word	0x20000a30

08023320 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8023320:	b580      	push	{r7, lr}
 8023322:	b090      	sub	sp, #64	; 0x40
 8023324:	af00      	add	r7, sp, #0
 8023326:	6078      	str	r0, [r7, #4]
 8023328:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 802332a:	687b      	ldr	r3, [r7, #4]
 802332c:	2b00      	cmp	r3, #0
 802332e:	f000 80ec 	beq.w	802350a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8023332:	2300      	movs	r3, #0
 8023334:	62bb      	str	r3, [r7, #40]	; 0x28
 8023336:	4b77      	ldr	r3, [pc, #476]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802333a:	4a76      	ldr	r2, [pc, #472]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 802333c:	f043 0301 	orr.w	r3, r3, #1
 8023340:	6393      	str	r3, [r2, #56]	; 0x38
 8023342:	4b74      	ldr	r3, [pc, #464]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023346:	f003 0301 	and.w	r3, r3, #1
 802334a:	62bb      	str	r3, [r7, #40]	; 0x28
 802334c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 802334e:	2300      	movs	r3, #0
 8023350:	627b      	str	r3, [r7, #36]	; 0x24
 8023352:	4b70      	ldr	r3, [pc, #448]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023356:	4a6f      	ldr	r2, [pc, #444]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802335c:	6313      	str	r3, [r2, #48]	; 0x30
 802335e:	4b6d      	ldr	r3, [pc, #436]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023366:	627b      	str	r3, [r7, #36]	; 0x24
 8023368:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802336a:	2300      	movs	r3, #0
 802336c:	623b      	str	r3, [r7, #32]
 802336e:	4b69      	ldr	r3, [pc, #420]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023372:	4a68      	ldr	r2, [pc, #416]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023374:	f043 0302 	orr.w	r3, r3, #2
 8023378:	6313      	str	r3, [r2, #48]	; 0x30
 802337a:	4b66      	ldr	r3, [pc, #408]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 802337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802337e:	f003 0302 	and.w	r3, r3, #2
 8023382:	623b      	str	r3, [r7, #32]
 8023384:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023386:	2300      	movs	r3, #0
 8023388:	61fb      	str	r3, [r7, #28]
 802338a:	4b62      	ldr	r3, [pc, #392]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 802338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802338e:	4a61      	ldr	r2, [pc, #388]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023390:	f043 0304 	orr.w	r3, r3, #4
 8023394:	6313      	str	r3, [r2, #48]	; 0x30
 8023396:	4b5f      	ldr	r3, [pc, #380]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802339a:	f003 0304 	and.w	r3, r3, #4
 802339e:	61fb      	str	r3, [r7, #28]
 80233a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80233a2:	2300      	movs	r3, #0
 80233a4:	61bb      	str	r3, [r7, #24]
 80233a6:	4b5b      	ldr	r3, [pc, #364]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233aa:	4a5a      	ldr	r2, [pc, #360]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233ac:	f043 0308 	orr.w	r3, r3, #8
 80233b0:	6313      	str	r3, [r2, #48]	; 0x30
 80233b2:	4b58      	ldr	r3, [pc, #352]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233b6:	f003 0308 	and.w	r3, r3, #8
 80233ba:	61bb      	str	r3, [r7, #24]
 80233bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80233be:	2300      	movs	r3, #0
 80233c0:	617b      	str	r3, [r7, #20]
 80233c2:	4b54      	ldr	r3, [pc, #336]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233c6:	4a53      	ldr	r2, [pc, #332]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233c8:	f043 0310 	orr.w	r3, r3, #16
 80233cc:	6313      	str	r3, [r2, #48]	; 0x30
 80233ce:	4b51      	ldr	r3, [pc, #324]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233d2:	f003 0310 	and.w	r3, r3, #16
 80233d6:	617b      	str	r3, [r7, #20]
 80233d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80233da:	2300      	movs	r3, #0
 80233dc:	613b      	str	r3, [r7, #16]
 80233de:	4b4d      	ldr	r3, [pc, #308]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233e2:	4a4c      	ldr	r2, [pc, #304]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233e4:	f043 0320 	orr.w	r3, r3, #32
 80233e8:	6313      	str	r3, [r2, #48]	; 0x30
 80233ea:	4b4a      	ldr	r3, [pc, #296]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233ee:	f003 0320 	and.w	r3, r3, #32
 80233f2:	613b      	str	r3, [r7, #16]
 80233f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80233f6:	2300      	movs	r3, #0
 80233f8:	60fb      	str	r3, [r7, #12]
 80233fa:	4b46      	ldr	r3, [pc, #280]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 80233fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233fe:	4a45      	ldr	r2, [pc, #276]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023404:	6313      	str	r3, [r2, #48]	; 0x30
 8023406:	4b43      	ldr	r3, [pc, #268]	; (8023514 <BSP_SDRAM_MspInit+0x1f4>)
 8023408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802340e:	60fb      	str	r3, [r7, #12]
 8023410:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8023412:	2302      	movs	r3, #2
 8023414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8023416:	2302      	movs	r3, #2
 8023418:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 802341a:	2300      	movs	r3, #0
 802341c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 802341e:	230c      	movs	r3, #12
 8023420:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8023422:	2360      	movs	r3, #96	; 0x60
 8023424:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8023426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802342a:	4619      	mov	r1, r3
 802342c:	483a      	ldr	r0, [pc, #232]	; (8023518 <BSP_SDRAM_MspInit+0x1f8>)
 802342e:	f001 faf5 	bl	8024a1c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8023432:	2301      	movs	r3, #1
 8023434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8023436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802343a:	4619      	mov	r1, r3
 802343c:	4837      	ldr	r0, [pc, #220]	; (802351c <BSP_SDRAM_MspInit+0x1fc>)
 802343e:	f001 faed 	bl	8024a1c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8023442:	f24c 7303 	movw	r3, #50947	; 0xc703
 8023446:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8023448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802344c:	4619      	mov	r1, r3
 802344e:	4834      	ldr	r0, [pc, #208]	; (8023520 <BSP_SDRAM_MspInit+0x200>)
 8023450:	f001 fae4 	bl	8024a1c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8023454:	f64f 7383 	movw	r3, #65411	; 0xff83
 8023458:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 802345a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802345e:	4619      	mov	r1, r3
 8023460:	4830      	ldr	r0, [pc, #192]	; (8023524 <BSP_SDRAM_MspInit+0x204>)
 8023462:	f001 fadb 	bl	8024a1c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8023466:	f64f 033f 	movw	r3, #63551	; 0xf83f
 802346a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 802346c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023470:	4619      	mov	r1, r3
 8023472:	482d      	ldr	r0, [pc, #180]	; (8023528 <BSP_SDRAM_MspInit+0x208>)
 8023474:	f001 fad2 	bl	8024a1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8023478:	f248 1333 	movw	r3, #33075	; 0x8133
 802347c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 802347e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8023482:	4619      	mov	r1, r3
 8023484:	4829      	ldr	r0, [pc, #164]	; (802352c <BSP_SDRAM_MspInit+0x20c>)
 8023486:	f001 fac9 	bl	8024a1c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 802348a:	4b29      	ldr	r3, [pc, #164]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 802348c:	2200      	movs	r2, #0
 802348e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8023490:	4b27      	ldr	r3, [pc, #156]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 8023492:	2280      	movs	r2, #128	; 0x80
 8023494:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8023496:	4b26      	ldr	r3, [pc, #152]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 8023498:	f44f 7200 	mov.w	r2, #512	; 0x200
 802349c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 802349e:	4b24      	ldr	r3, [pc, #144]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80234a4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80234a6:	4b22      	ldr	r3, [pc, #136]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80234ac:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80234ae:	4b20      	ldr	r3, [pc, #128]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80234b4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80234b6:	4b1e      	ldr	r3, [pc, #120]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234b8:	2200      	movs	r2, #0
 80234ba:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80234bc:	4b1c      	ldr	r3, [pc, #112]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80234c2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80234c4:	4b1a      	ldr	r3, [pc, #104]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234c6:	2200      	movs	r2, #0
 80234c8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80234ca:	4b19      	ldr	r3, [pc, #100]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234cc:	2203      	movs	r2, #3
 80234ce:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80234d0:	4b17      	ldr	r3, [pc, #92]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234d2:	2200      	movs	r2, #0
 80234d4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80234d6:	4b16      	ldr	r3, [pc, #88]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234d8:	2200      	movs	r2, #0
 80234da:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80234dc:	4b14      	ldr	r3, [pc, #80]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234de:	4a15      	ldr	r2, [pc, #84]	; (8023534 <BSP_SDRAM_MspInit+0x214>)
 80234e0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80234e2:	687b      	ldr	r3, [r7, #4]
 80234e4:	4a12      	ldr	r2, [pc, #72]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234e6:	631a      	str	r2, [r3, #48]	; 0x30
 80234e8:	4a11      	ldr	r2, [pc, #68]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80234ee:	4810      	ldr	r0, [pc, #64]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234f0:	f000 fa50 	bl	8023994 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80234f4:	480e      	ldr	r0, [pc, #56]	; (8023530 <BSP_SDRAM_MspInit+0x210>)
 80234f6:	f000 f99f 	bl	8023838 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80234fa:	2200      	movs	r2, #0
 80234fc:	210f      	movs	r1, #15
 80234fe:	2038      	movs	r0, #56	; 0x38
 8023500:	f000 f94f 	bl	80237a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8023504:	2038      	movs	r0, #56	; 0x38
 8023506:	f000 f968 	bl	80237da <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 802350a:	bf00      	nop
 802350c:	3740      	adds	r7, #64	; 0x40
 802350e:	46bd      	mov	sp, r7
 8023510:	bd80      	pop	{r7, pc}
 8023512:	bf00      	nop
 8023514:	40023800 	.word	0x40023800
 8023518:	40020400 	.word	0x40020400
 802351c:	40020800 	.word	0x40020800
 8023520:	40020c00 	.word	0x40020c00
 8023524:	40021000 	.word	0x40021000
 8023528:	40021400 	.word	0x40021400
 802352c:	40021800 	.word	0x40021800
 8023530:	20000a90 	.word	0x20000a90
 8023534:	40026410 	.word	0x40026410

08023538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8023538:	b580      	push	{r7, lr}
 802353a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802353c:	4b0e      	ldr	r3, [pc, #56]	; (8023578 <HAL_Init+0x40>)
 802353e:	681b      	ldr	r3, [r3, #0]
 8023540:	4a0d      	ldr	r2, [pc, #52]	; (8023578 <HAL_Init+0x40>)
 8023542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8023546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8023548:	4b0b      	ldr	r3, [pc, #44]	; (8023578 <HAL_Init+0x40>)
 802354a:	681b      	ldr	r3, [r3, #0]
 802354c:	4a0a      	ldr	r2, [pc, #40]	; (8023578 <HAL_Init+0x40>)
 802354e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8023552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8023554:	4b08      	ldr	r3, [pc, #32]	; (8023578 <HAL_Init+0x40>)
 8023556:	681b      	ldr	r3, [r3, #0]
 8023558:	4a07      	ldr	r2, [pc, #28]	; (8023578 <HAL_Init+0x40>)
 802355a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802355e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8023560:	2003      	movs	r0, #3
 8023562:	f000 f913 	bl	802378c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8023566:	200f      	movs	r0, #15
 8023568:	f7fe fc38 	bl	8021ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802356c:	f7fe f85e 	bl	802162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8023570:	2300      	movs	r3, #0
}
 8023572:	4618      	mov	r0, r3
 8023574:	bd80      	pop	{r7, pc}
 8023576:	bf00      	nop
 8023578:	40023c00 	.word	0x40023c00

0802357c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802357c:	b480      	push	{r7}
 802357e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8023580:	4b06      	ldr	r3, [pc, #24]	; (802359c <HAL_IncTick+0x20>)
 8023582:	781b      	ldrb	r3, [r3, #0]
 8023584:	461a      	mov	r2, r3
 8023586:	4b06      	ldr	r3, [pc, #24]	; (80235a0 <HAL_IncTick+0x24>)
 8023588:	681b      	ldr	r3, [r3, #0]
 802358a:	4413      	add	r3, r2
 802358c:	4a04      	ldr	r2, [pc, #16]	; (80235a0 <HAL_IncTick+0x24>)
 802358e:	6013      	str	r3, [r2, #0]
}
 8023590:	bf00      	nop
 8023592:	46bd      	mov	sp, r7
 8023594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023598:	4770      	bx	lr
 802359a:	bf00      	nop
 802359c:	2000005c 	.word	0x2000005c
 80235a0:	20000af0 	.word	0x20000af0

080235a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80235a4:	b480      	push	{r7}
 80235a6:	af00      	add	r7, sp, #0
  return uwTick;
 80235a8:	4b03      	ldr	r3, [pc, #12]	; (80235b8 <HAL_GetTick+0x14>)
 80235aa:	681b      	ldr	r3, [r3, #0]
}
 80235ac:	4618      	mov	r0, r3
 80235ae:	46bd      	mov	sp, r7
 80235b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235b4:	4770      	bx	lr
 80235b6:	bf00      	nop
 80235b8:	20000af0 	.word	0x20000af0

080235bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80235bc:	b580      	push	{r7, lr}
 80235be:	b084      	sub	sp, #16
 80235c0:	af00      	add	r7, sp, #0
 80235c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80235c4:	f7ff ffee 	bl	80235a4 <HAL_GetTick>
 80235c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80235ca:	687b      	ldr	r3, [r7, #4]
 80235cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80235d4:	d005      	beq.n	80235e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80235d6:	4b0a      	ldr	r3, [pc, #40]	; (8023600 <HAL_Delay+0x44>)
 80235d8:	781b      	ldrb	r3, [r3, #0]
 80235da:	461a      	mov	r2, r3
 80235dc:	68fb      	ldr	r3, [r7, #12]
 80235de:	4413      	add	r3, r2
 80235e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80235e2:	bf00      	nop
 80235e4:	f7ff ffde 	bl	80235a4 <HAL_GetTick>
 80235e8:	4602      	mov	r2, r0
 80235ea:	68bb      	ldr	r3, [r7, #8]
 80235ec:	1ad3      	subs	r3, r2, r3
 80235ee:	68fa      	ldr	r2, [r7, #12]
 80235f0:	429a      	cmp	r2, r3
 80235f2:	d8f7      	bhi.n	80235e4 <HAL_Delay+0x28>
  {
  }
}
 80235f4:	bf00      	nop
 80235f6:	bf00      	nop
 80235f8:	3710      	adds	r7, #16
 80235fa:	46bd      	mov	sp, r7
 80235fc:	bd80      	pop	{r7, pc}
 80235fe:	bf00      	nop
 8023600:	2000005c 	.word	0x2000005c

08023604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023604:	b480      	push	{r7}
 8023606:	b085      	sub	sp, #20
 8023608:	af00      	add	r7, sp, #0
 802360a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802360c:	687b      	ldr	r3, [r7, #4]
 802360e:	f003 0307 	and.w	r3, r3, #7
 8023612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8023614:	4b0c      	ldr	r3, [pc, #48]	; (8023648 <__NVIC_SetPriorityGrouping+0x44>)
 8023616:	68db      	ldr	r3, [r3, #12]
 8023618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802361a:	68ba      	ldr	r2, [r7, #8]
 802361c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8023620:	4013      	ands	r3, r2
 8023622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8023624:	68fb      	ldr	r3, [r7, #12]
 8023626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8023628:	68bb      	ldr	r3, [r7, #8]
 802362a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 802362c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8023630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8023634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8023636:	4a04      	ldr	r2, [pc, #16]	; (8023648 <__NVIC_SetPriorityGrouping+0x44>)
 8023638:	68bb      	ldr	r3, [r7, #8]
 802363a:	60d3      	str	r3, [r2, #12]
}
 802363c:	bf00      	nop
 802363e:	3714      	adds	r7, #20
 8023640:	46bd      	mov	sp, r7
 8023642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023646:	4770      	bx	lr
 8023648:	e000ed00 	.word	0xe000ed00

0802364c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 802364c:	b480      	push	{r7}
 802364e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8023650:	4b04      	ldr	r3, [pc, #16]	; (8023664 <__NVIC_GetPriorityGrouping+0x18>)
 8023652:	68db      	ldr	r3, [r3, #12]
 8023654:	0a1b      	lsrs	r3, r3, #8
 8023656:	f003 0307 	and.w	r3, r3, #7
}
 802365a:	4618      	mov	r0, r3
 802365c:	46bd      	mov	sp, r7
 802365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023662:	4770      	bx	lr
 8023664:	e000ed00 	.word	0xe000ed00

08023668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023668:	b480      	push	{r7}
 802366a:	b083      	sub	sp, #12
 802366c:	af00      	add	r7, sp, #0
 802366e:	4603      	mov	r3, r0
 8023670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023676:	2b00      	cmp	r3, #0
 8023678:	db0b      	blt.n	8023692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802367a:	79fb      	ldrb	r3, [r7, #7]
 802367c:	f003 021f 	and.w	r2, r3, #31
 8023680:	4907      	ldr	r1, [pc, #28]	; (80236a0 <__NVIC_EnableIRQ+0x38>)
 8023682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023686:	095b      	lsrs	r3, r3, #5
 8023688:	2001      	movs	r0, #1
 802368a:	fa00 f202 	lsl.w	r2, r0, r2
 802368e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023692:	bf00      	nop
 8023694:	370c      	adds	r7, #12
 8023696:	46bd      	mov	sp, r7
 8023698:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369c:	4770      	bx	lr
 802369e:	bf00      	nop
 80236a0:	e000e100 	.word	0xe000e100

080236a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80236a4:	b480      	push	{r7}
 80236a6:	b083      	sub	sp, #12
 80236a8:	af00      	add	r7, sp, #0
 80236aa:	4603      	mov	r3, r0
 80236ac:	6039      	str	r1, [r7, #0]
 80236ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80236b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80236b4:	2b00      	cmp	r3, #0
 80236b6:	db0a      	blt.n	80236ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80236b8:	683b      	ldr	r3, [r7, #0]
 80236ba:	b2da      	uxtb	r2, r3
 80236bc:	490c      	ldr	r1, [pc, #48]	; (80236f0 <__NVIC_SetPriority+0x4c>)
 80236be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80236c2:	0112      	lsls	r2, r2, #4
 80236c4:	b2d2      	uxtb	r2, r2
 80236c6:	440b      	add	r3, r1
 80236c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80236cc:	e00a      	b.n	80236e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80236ce:	683b      	ldr	r3, [r7, #0]
 80236d0:	b2da      	uxtb	r2, r3
 80236d2:	4908      	ldr	r1, [pc, #32]	; (80236f4 <__NVIC_SetPriority+0x50>)
 80236d4:	79fb      	ldrb	r3, [r7, #7]
 80236d6:	f003 030f 	and.w	r3, r3, #15
 80236da:	3b04      	subs	r3, #4
 80236dc:	0112      	lsls	r2, r2, #4
 80236de:	b2d2      	uxtb	r2, r2
 80236e0:	440b      	add	r3, r1
 80236e2:	761a      	strb	r2, [r3, #24]
}
 80236e4:	bf00      	nop
 80236e6:	370c      	adds	r7, #12
 80236e8:	46bd      	mov	sp, r7
 80236ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236ee:	4770      	bx	lr
 80236f0:	e000e100 	.word	0xe000e100
 80236f4:	e000ed00 	.word	0xe000ed00

080236f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80236f8:	b480      	push	{r7}
 80236fa:	b089      	sub	sp, #36	; 0x24
 80236fc:	af00      	add	r7, sp, #0
 80236fe:	60f8      	str	r0, [r7, #12]
 8023700:	60b9      	str	r1, [r7, #8]
 8023702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023704:	68fb      	ldr	r3, [r7, #12]
 8023706:	f003 0307 	and.w	r3, r3, #7
 802370a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802370c:	69fb      	ldr	r3, [r7, #28]
 802370e:	f1c3 0307 	rsb	r3, r3, #7
 8023712:	2b04      	cmp	r3, #4
 8023714:	bf28      	it	cs
 8023716:	2304      	movcs	r3, #4
 8023718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802371a:	69fb      	ldr	r3, [r7, #28]
 802371c:	3304      	adds	r3, #4
 802371e:	2b06      	cmp	r3, #6
 8023720:	d902      	bls.n	8023728 <NVIC_EncodePriority+0x30>
 8023722:	69fb      	ldr	r3, [r7, #28]
 8023724:	3b03      	subs	r3, #3
 8023726:	e000      	b.n	802372a <NVIC_EncodePriority+0x32>
 8023728:	2300      	movs	r3, #0
 802372a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802372c:	f04f 32ff 	mov.w	r2, #4294967295
 8023730:	69bb      	ldr	r3, [r7, #24]
 8023732:	fa02 f303 	lsl.w	r3, r2, r3
 8023736:	43da      	mvns	r2, r3
 8023738:	68bb      	ldr	r3, [r7, #8]
 802373a:	401a      	ands	r2, r3
 802373c:	697b      	ldr	r3, [r7, #20]
 802373e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8023740:	f04f 31ff 	mov.w	r1, #4294967295
 8023744:	697b      	ldr	r3, [r7, #20]
 8023746:	fa01 f303 	lsl.w	r3, r1, r3
 802374a:	43d9      	mvns	r1, r3
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8023750:	4313      	orrs	r3, r2
         );
}
 8023752:	4618      	mov	r0, r3
 8023754:	3724      	adds	r7, #36	; 0x24
 8023756:	46bd      	mov	sp, r7
 8023758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802375c:	4770      	bx	lr
	...

08023760 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8023760:	b480      	push	{r7}
 8023762:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8023764:	f3bf 8f4f 	dsb	sy
}
 8023768:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 802376a:	4b06      	ldr	r3, [pc, #24]	; (8023784 <__NVIC_SystemReset+0x24>)
 802376c:	68db      	ldr	r3, [r3, #12]
 802376e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8023772:	4904      	ldr	r1, [pc, #16]	; (8023784 <__NVIC_SystemReset+0x24>)
 8023774:	4b04      	ldr	r3, [pc, #16]	; (8023788 <__NVIC_SystemReset+0x28>)
 8023776:	4313      	orrs	r3, r2
 8023778:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802377a:	f3bf 8f4f 	dsb	sy
}
 802377e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8023780:	bf00      	nop
 8023782:	e7fd      	b.n	8023780 <__NVIC_SystemReset+0x20>
 8023784:	e000ed00 	.word	0xe000ed00
 8023788:	05fa0004 	.word	0x05fa0004

0802378c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802378c:	b580      	push	{r7, lr}
 802378e:	b082      	sub	sp, #8
 8023790:	af00      	add	r7, sp, #0
 8023792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8023794:	6878      	ldr	r0, [r7, #4]
 8023796:	f7ff ff35 	bl	8023604 <__NVIC_SetPriorityGrouping>
}
 802379a:	bf00      	nop
 802379c:	3708      	adds	r7, #8
 802379e:	46bd      	mov	sp, r7
 80237a0:	bd80      	pop	{r7, pc}

080237a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80237a2:	b580      	push	{r7, lr}
 80237a4:	b086      	sub	sp, #24
 80237a6:	af00      	add	r7, sp, #0
 80237a8:	4603      	mov	r3, r0
 80237aa:	60b9      	str	r1, [r7, #8]
 80237ac:	607a      	str	r2, [r7, #4]
 80237ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80237b0:	2300      	movs	r3, #0
 80237b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80237b4:	f7ff ff4a 	bl	802364c <__NVIC_GetPriorityGrouping>
 80237b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80237ba:	687a      	ldr	r2, [r7, #4]
 80237bc:	68b9      	ldr	r1, [r7, #8]
 80237be:	6978      	ldr	r0, [r7, #20]
 80237c0:	f7ff ff9a 	bl	80236f8 <NVIC_EncodePriority>
 80237c4:	4602      	mov	r2, r0
 80237c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80237ca:	4611      	mov	r1, r2
 80237cc:	4618      	mov	r0, r3
 80237ce:	f7ff ff69 	bl	80236a4 <__NVIC_SetPriority>
}
 80237d2:	bf00      	nop
 80237d4:	3718      	adds	r7, #24
 80237d6:	46bd      	mov	sp, r7
 80237d8:	bd80      	pop	{r7, pc}

080237da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80237da:	b580      	push	{r7, lr}
 80237dc:	b082      	sub	sp, #8
 80237de:	af00      	add	r7, sp, #0
 80237e0:	4603      	mov	r3, r0
 80237e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80237e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80237e8:	4618      	mov	r0, r3
 80237ea:	f7ff ff3d 	bl	8023668 <__NVIC_EnableIRQ>
}
 80237ee:	bf00      	nop
 80237f0:	3708      	adds	r7, #8
 80237f2:	46bd      	mov	sp, r7
 80237f4:	bd80      	pop	{r7, pc}

080237f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80237f6:	b580      	push	{r7, lr}
 80237f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80237fa:	f7ff ffb1 	bl	8023760 <__NVIC_SystemReset>

080237fe <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80237fe:	b580      	push	{r7, lr}
 8023800:	b082      	sub	sp, #8
 8023802:	af00      	add	r7, sp, #0
 8023804:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	2b00      	cmp	r3, #0
 802380a:	d101      	bne.n	8023810 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 802380c:	2301      	movs	r3, #1
 802380e:	e00e      	b.n	802382e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	795b      	ldrb	r3, [r3, #5]
 8023814:	b2db      	uxtb	r3, r3
 8023816:	2b00      	cmp	r3, #0
 8023818:	d105      	bne.n	8023826 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 802381a:	687b      	ldr	r3, [r7, #4]
 802381c:	2200      	movs	r2, #0
 802381e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8023820:	6878      	ldr	r0, [r7, #4]
 8023822:	f7fd ff2b 	bl	802167c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	2201      	movs	r2, #1
 802382a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 802382c:	2300      	movs	r3, #0
}
 802382e:	4618      	mov	r0, r3
 8023830:	3708      	adds	r7, #8
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}
	...

08023838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8023838:	b580      	push	{r7, lr}
 802383a:	b086      	sub	sp, #24
 802383c:	af00      	add	r7, sp, #0
 802383e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8023840:	2300      	movs	r3, #0
 8023842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8023844:	f7ff feae 	bl	80235a4 <HAL_GetTick>
 8023848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	2b00      	cmp	r3, #0
 802384e:	d101      	bne.n	8023854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8023850:	2301      	movs	r3, #1
 8023852:	e099      	b.n	8023988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	2202      	movs	r2, #2
 8023858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 802385c:	687b      	ldr	r3, [r7, #4]
 802385e:	2200      	movs	r2, #0
 8023860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	681b      	ldr	r3, [r3, #0]
 8023868:	681a      	ldr	r2, [r3, #0]
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	681b      	ldr	r3, [r3, #0]
 802386e:	f022 0201 	bic.w	r2, r2, #1
 8023872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023874:	e00f      	b.n	8023896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023876:	f7ff fe95 	bl	80235a4 <HAL_GetTick>
 802387a:	4602      	mov	r2, r0
 802387c:	693b      	ldr	r3, [r7, #16]
 802387e:	1ad3      	subs	r3, r2, r3
 8023880:	2b05      	cmp	r3, #5
 8023882:	d908      	bls.n	8023896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023884:	687b      	ldr	r3, [r7, #4]
 8023886:	2220      	movs	r2, #32
 8023888:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802388a:	687b      	ldr	r3, [r7, #4]
 802388c:	2203      	movs	r2, #3
 802388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023892:	2303      	movs	r3, #3
 8023894:	e078      	b.n	8023988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	681b      	ldr	r3, [r3, #0]
 802389c:	f003 0301 	and.w	r3, r3, #1
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	d1e8      	bne.n	8023876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	681b      	ldr	r3, [r3, #0]
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80238ac:	697a      	ldr	r2, [r7, #20]
 80238ae:	4b38      	ldr	r3, [pc, #224]	; (8023990 <HAL_DMA_Init+0x158>)
 80238b0:	4013      	ands	r3, r2
 80238b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80238b4:	687b      	ldr	r3, [r7, #4]
 80238b6:	685a      	ldr	r2, [r3, #4]
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	689b      	ldr	r3, [r3, #8]
 80238bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80238c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	691b      	ldr	r3, [r3, #16]
 80238c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80238ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	699b      	ldr	r3, [r3, #24]
 80238d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80238da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	6a1b      	ldr	r3, [r3, #32]
 80238e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80238e2:	697a      	ldr	r2, [r7, #20]
 80238e4:	4313      	orrs	r3, r2
 80238e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80238ec:	2b04      	cmp	r3, #4
 80238ee:	d107      	bne.n	8023900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80238f0:	687b      	ldr	r3, [r7, #4]
 80238f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238f8:	4313      	orrs	r3, r2
 80238fa:	697a      	ldr	r2, [r7, #20]
 80238fc:	4313      	orrs	r3, r2
 80238fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8023900:	687b      	ldr	r3, [r7, #4]
 8023902:	681b      	ldr	r3, [r3, #0]
 8023904:	697a      	ldr	r2, [r7, #20]
 8023906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023908:	687b      	ldr	r3, [r7, #4]
 802390a:	681b      	ldr	r3, [r3, #0]
 802390c:	695b      	ldr	r3, [r3, #20]
 802390e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8023910:	697b      	ldr	r3, [r7, #20]
 8023912:	f023 0307 	bic.w	r3, r3, #7
 8023916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023918:	687b      	ldr	r3, [r7, #4]
 802391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802391c:	697a      	ldr	r2, [r7, #20]
 802391e:	4313      	orrs	r3, r2
 8023920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023926:	2b04      	cmp	r3, #4
 8023928:	d117      	bne.n	802395a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802392e:	697a      	ldr	r2, [r7, #20]
 8023930:	4313      	orrs	r3, r2
 8023932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023938:	2b00      	cmp	r3, #0
 802393a:	d00e      	beq.n	802395a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 802393c:	6878      	ldr	r0, [r7, #4]
 802393e:	f000 f94f 	bl	8023be0 <DMA_CheckFifoParam>
 8023942:	4603      	mov	r3, r0
 8023944:	2b00      	cmp	r3, #0
 8023946:	d008      	beq.n	802395a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8023948:	687b      	ldr	r3, [r7, #4]
 802394a:	2240      	movs	r2, #64	; 0x40
 802394c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	2201      	movs	r2, #1
 8023952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8023956:	2301      	movs	r3, #1
 8023958:	e016      	b.n	8023988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	697a      	ldr	r2, [r7, #20]
 8023960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8023962:	6878      	ldr	r0, [r7, #4]
 8023964:	f000 f906 	bl	8023b74 <DMA_CalcBaseAndBitshift>
 8023968:	4603      	mov	r3, r0
 802396a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023970:	223f      	movs	r2, #63	; 0x3f
 8023972:	409a      	lsls	r2, r3
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	2200      	movs	r2, #0
 802397c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802397e:	687b      	ldr	r3, [r7, #4]
 8023980:	2201      	movs	r2, #1
 8023982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8023986:	2300      	movs	r3, #0
}
 8023988:	4618      	mov	r0, r3
 802398a:	3718      	adds	r7, #24
 802398c:	46bd      	mov	sp, r7
 802398e:	bd80      	pop	{r7, pc}
 8023990:	f010803f 	.word	0xf010803f

08023994 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8023994:	b580      	push	{r7, lr}
 8023996:	b084      	sub	sp, #16
 8023998:	af00      	add	r7, sp, #0
 802399a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 802399c:	687b      	ldr	r3, [r7, #4]
 802399e:	2b00      	cmp	r3, #0
 80239a0:	d101      	bne.n	80239a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80239a2:	2301      	movs	r3, #1
 80239a4:	e050      	b.n	8023a48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80239a6:	687b      	ldr	r3, [r7, #4]
 80239a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80239ac:	b2db      	uxtb	r3, r3
 80239ae:	2b02      	cmp	r3, #2
 80239b0:	d101      	bne.n	80239b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80239b2:	2302      	movs	r3, #2
 80239b4:	e048      	b.n	8023a48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	681b      	ldr	r3, [r3, #0]
 80239ba:	681a      	ldr	r2, [r3, #0]
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	681b      	ldr	r3, [r3, #0]
 80239c0:	f022 0201 	bic.w	r2, r2, #1
 80239c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80239c6:	687b      	ldr	r3, [r7, #4]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	2200      	movs	r2, #0
 80239cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	2200      	movs	r2, #0
 80239d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80239d6:	687b      	ldr	r3, [r7, #4]
 80239d8:	681b      	ldr	r3, [r3, #0]
 80239da:	2200      	movs	r2, #0
 80239dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80239de:	687b      	ldr	r3, [r7, #4]
 80239e0:	681b      	ldr	r3, [r3, #0]
 80239e2:	2200      	movs	r2, #0
 80239e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	681b      	ldr	r3, [r3, #0]
 80239ea:	2200      	movs	r2, #0
 80239ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	681b      	ldr	r3, [r3, #0]
 80239f2:	2221      	movs	r2, #33	; 0x21
 80239f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80239f6:	6878      	ldr	r0, [r7, #4]
 80239f8:	f000 f8bc 	bl	8023b74 <DMA_CalcBaseAndBitshift>
 80239fc:	4603      	mov	r3, r0
 80239fe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8023a00:	687b      	ldr	r3, [r7, #4]
 8023a02:	2200      	movs	r2, #0
 8023a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8023a06:	687b      	ldr	r3, [r7, #4]
 8023a08:	2200      	movs	r2, #0
 8023a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	2200      	movs	r2, #0
 8023a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	2200      	movs	r2, #0
 8023a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	2200      	movs	r2, #0
 8023a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8023a1e:	687b      	ldr	r3, [r7, #4]
 8023a20:	2200      	movs	r2, #0
 8023a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023a24:	687b      	ldr	r3, [r7, #4]
 8023a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a28:	223f      	movs	r2, #63	; 0x3f
 8023a2a:	409a      	lsls	r2, r3
 8023a2c:	68fb      	ldr	r3, [r7, #12]
 8023a2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	2200      	movs	r2, #0
 8023a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	2200      	movs	r2, #0
 8023a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	2200      	movs	r2, #0
 8023a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8023a46:	2300      	movs	r3, #0
}
 8023a48:	4618      	mov	r0, r3
 8023a4a:	3710      	adds	r7, #16
 8023a4c:	46bd      	mov	sp, r7
 8023a4e:	bd80      	pop	{r7, pc}

08023a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8023a50:	b580      	push	{r7, lr}
 8023a52:	b084      	sub	sp, #16
 8023a54:	af00      	add	r7, sp, #0
 8023a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023a5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8023a5e:	f7ff fda1 	bl	80235a4 <HAL_GetTick>
 8023a62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023a6a:	b2db      	uxtb	r3, r3
 8023a6c:	2b02      	cmp	r3, #2
 8023a6e:	d008      	beq.n	8023a82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023a70:	687b      	ldr	r3, [r7, #4]
 8023a72:	2280      	movs	r2, #128	; 0x80
 8023a74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	2200      	movs	r2, #0
 8023a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8023a7e:	2301      	movs	r3, #1
 8023a80:	e052      	b.n	8023b28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	681b      	ldr	r3, [r3, #0]
 8023a86:	681a      	ldr	r2, [r3, #0]
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	681b      	ldr	r3, [r3, #0]
 8023a8c:	f022 0216 	bic.w	r2, r2, #22
 8023a90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023a92:	687b      	ldr	r3, [r7, #4]
 8023a94:	681b      	ldr	r3, [r3, #0]
 8023a96:	695a      	ldr	r2, [r3, #20]
 8023a98:	687b      	ldr	r3, [r7, #4]
 8023a9a:	681b      	ldr	r3, [r3, #0]
 8023a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023aa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023aa2:	687b      	ldr	r3, [r7, #4]
 8023aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d103      	bne.n	8023ab2 <HAL_DMA_Abort+0x62>
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	d007      	beq.n	8023ac2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	681b      	ldr	r3, [r3, #0]
 8023ab6:	681a      	ldr	r2, [r3, #0]
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	f022 0208 	bic.w	r2, r2, #8
 8023ac0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023ac2:	687b      	ldr	r3, [r7, #4]
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	681a      	ldr	r2, [r3, #0]
 8023ac8:	687b      	ldr	r3, [r7, #4]
 8023aca:	681b      	ldr	r3, [r3, #0]
 8023acc:	f022 0201 	bic.w	r2, r2, #1
 8023ad0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023ad2:	e013      	b.n	8023afc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8023ad4:	f7ff fd66 	bl	80235a4 <HAL_GetTick>
 8023ad8:	4602      	mov	r2, r0
 8023ada:	68bb      	ldr	r3, [r7, #8]
 8023adc:	1ad3      	subs	r3, r2, r3
 8023ade:	2b05      	cmp	r3, #5
 8023ae0:	d90c      	bls.n	8023afc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8023ae2:	687b      	ldr	r3, [r7, #4]
 8023ae4:	2220      	movs	r2, #32
 8023ae6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	2203      	movs	r2, #3
 8023aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	2200      	movs	r2, #0
 8023af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8023af8:	2303      	movs	r3, #3
 8023afa:	e015      	b.n	8023b28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	f003 0301 	and.w	r3, r3, #1
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d1e4      	bne.n	8023ad4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b0e:	223f      	movs	r2, #63	; 0x3f
 8023b10:	409a      	lsls	r2, r3
 8023b12:	68fb      	ldr	r3, [r7, #12]
 8023b14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8023b16:	687b      	ldr	r3, [r7, #4]
 8023b18:	2201      	movs	r2, #1
 8023b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8023b1e:	687b      	ldr	r3, [r7, #4]
 8023b20:	2200      	movs	r2, #0
 8023b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8023b26:	2300      	movs	r3, #0
}
 8023b28:	4618      	mov	r0, r3
 8023b2a:	3710      	adds	r7, #16
 8023b2c:	46bd      	mov	sp, r7
 8023b2e:	bd80      	pop	{r7, pc}

08023b30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8023b30:	b480      	push	{r7}
 8023b32:	b083      	sub	sp, #12
 8023b34:	af00      	add	r7, sp, #0
 8023b36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b3e:	b2db      	uxtb	r3, r3
 8023b40:	2b02      	cmp	r3, #2
 8023b42:	d004      	beq.n	8023b4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8023b44:	687b      	ldr	r3, [r7, #4]
 8023b46:	2280      	movs	r2, #128	; 0x80
 8023b48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8023b4a:	2301      	movs	r3, #1
 8023b4c:	e00c      	b.n	8023b68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	2205      	movs	r2, #5
 8023b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	681a      	ldr	r2, [r3, #0]
 8023b5c:	687b      	ldr	r3, [r7, #4]
 8023b5e:	681b      	ldr	r3, [r3, #0]
 8023b60:	f022 0201 	bic.w	r2, r2, #1
 8023b64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8023b66:	2300      	movs	r3, #0
}
 8023b68:	4618      	mov	r0, r3
 8023b6a:	370c      	adds	r7, #12
 8023b6c:	46bd      	mov	sp, r7
 8023b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b72:	4770      	bx	lr

08023b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023b74:	b480      	push	{r7}
 8023b76:	b085      	sub	sp, #20
 8023b78:	af00      	add	r7, sp, #0
 8023b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	681b      	ldr	r3, [r3, #0]
 8023b80:	b2db      	uxtb	r3, r3
 8023b82:	3b10      	subs	r3, #16
 8023b84:	4a14      	ldr	r2, [pc, #80]	; (8023bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8023b86:	fba2 2303 	umull	r2, r3, r2, r3
 8023b8a:	091b      	lsrs	r3, r3, #4
 8023b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023b8e:	4a13      	ldr	r2, [pc, #76]	; (8023bdc <DMA_CalcBaseAndBitshift+0x68>)
 8023b90:	68fb      	ldr	r3, [r7, #12]
 8023b92:	4413      	add	r3, r2
 8023b94:	781b      	ldrb	r3, [r3, #0]
 8023b96:	461a      	mov	r2, r3
 8023b98:	687b      	ldr	r3, [r7, #4]
 8023b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023b9c:	68fb      	ldr	r3, [r7, #12]
 8023b9e:	2b03      	cmp	r3, #3
 8023ba0:	d909      	bls.n	8023bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023ba2:	687b      	ldr	r3, [r7, #4]
 8023ba4:	681b      	ldr	r3, [r3, #0]
 8023ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023baa:	f023 0303 	bic.w	r3, r3, #3
 8023bae:	1d1a      	adds	r2, r3, #4
 8023bb0:	687b      	ldr	r3, [r7, #4]
 8023bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8023bb4:	e007      	b.n	8023bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023bb6:	687b      	ldr	r3, [r7, #4]
 8023bb8:	681b      	ldr	r3, [r3, #0]
 8023bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023bbe:	f023 0303 	bic.w	r3, r3, #3
 8023bc2:	687a      	ldr	r2, [r7, #4]
 8023bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023bc6:	687b      	ldr	r3, [r7, #4]
 8023bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023bca:	4618      	mov	r0, r3
 8023bcc:	3714      	adds	r7, #20
 8023bce:	46bd      	mov	sp, r7
 8023bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bd4:	4770      	bx	lr
 8023bd6:	bf00      	nop
 8023bd8:	aaaaaaab 	.word	0xaaaaaaab
 8023bdc:	08031964 	.word	0x08031964

08023be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023be0:	b480      	push	{r7}
 8023be2:	b085      	sub	sp, #20
 8023be4:	af00      	add	r7, sp, #0
 8023be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023be8:	2300      	movs	r3, #0
 8023bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023bec:	687b      	ldr	r3, [r7, #4]
 8023bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	699b      	ldr	r3, [r3, #24]
 8023bf6:	2b00      	cmp	r3, #0
 8023bf8:	d11f      	bne.n	8023c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023bfa:	68bb      	ldr	r3, [r7, #8]
 8023bfc:	2b03      	cmp	r3, #3
 8023bfe:	d856      	bhi.n	8023cae <DMA_CheckFifoParam+0xce>
 8023c00:	a201      	add	r2, pc, #4	; (adr r2, 8023c08 <DMA_CheckFifoParam+0x28>)
 8023c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c06:	bf00      	nop
 8023c08:	08023c19 	.word	0x08023c19
 8023c0c:	08023c2b 	.word	0x08023c2b
 8023c10:	08023c19 	.word	0x08023c19
 8023c14:	08023caf 	.word	0x08023caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023c20:	2b00      	cmp	r3, #0
 8023c22:	d046      	beq.n	8023cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8023c24:	2301      	movs	r3, #1
 8023c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023c28:	e043      	b.n	8023cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023c2a:	687b      	ldr	r3, [r7, #4]
 8023c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023c32:	d140      	bne.n	8023cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8023c34:	2301      	movs	r3, #1
 8023c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023c38:	e03d      	b.n	8023cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	699b      	ldr	r3, [r3, #24]
 8023c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023c42:	d121      	bne.n	8023c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023c44:	68bb      	ldr	r3, [r7, #8]
 8023c46:	2b03      	cmp	r3, #3
 8023c48:	d837      	bhi.n	8023cba <DMA_CheckFifoParam+0xda>
 8023c4a:	a201      	add	r2, pc, #4	; (adr r2, 8023c50 <DMA_CheckFifoParam+0x70>)
 8023c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023c50:	08023c61 	.word	0x08023c61
 8023c54:	08023c67 	.word	0x08023c67
 8023c58:	08023c61 	.word	0x08023c61
 8023c5c:	08023c79 	.word	0x08023c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023c60:	2301      	movs	r3, #1
 8023c62:	73fb      	strb	r3, [r7, #15]
      break;
 8023c64:	e030      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	d025      	beq.n	8023cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8023c72:	2301      	movs	r3, #1
 8023c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023c76:	e022      	b.n	8023cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023c80:	d11f      	bne.n	8023cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8023c82:	2301      	movs	r3, #1
 8023c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023c86:	e01c      	b.n	8023cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023c88:	68bb      	ldr	r3, [r7, #8]
 8023c8a:	2b02      	cmp	r3, #2
 8023c8c:	d903      	bls.n	8023c96 <DMA_CheckFifoParam+0xb6>
 8023c8e:	68bb      	ldr	r3, [r7, #8]
 8023c90:	2b03      	cmp	r3, #3
 8023c92:	d003      	beq.n	8023c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023c94:	e018      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8023c96:	2301      	movs	r3, #1
 8023c98:	73fb      	strb	r3, [r7, #15]
      break;
 8023c9a:	e015      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023c9c:	687b      	ldr	r3, [r7, #4]
 8023c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023ca4:	2b00      	cmp	r3, #0
 8023ca6:	d00e      	beq.n	8023cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8023ca8:	2301      	movs	r3, #1
 8023caa:	73fb      	strb	r3, [r7, #15]
      break;
 8023cac:	e00b      	b.n	8023cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8023cae:	bf00      	nop
 8023cb0:	e00a      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8023cb2:	bf00      	nop
 8023cb4:	e008      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8023cb6:	bf00      	nop
 8023cb8:	e006      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8023cba:	bf00      	nop
 8023cbc:	e004      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8023cbe:	bf00      	nop
 8023cc0:	e002      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8023cc2:	bf00      	nop
 8023cc4:	e000      	b.n	8023cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8023cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8023cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8023cca:	4618      	mov	r0, r3
 8023ccc:	3714      	adds	r7, #20
 8023cce:	46bd      	mov	sp, r7
 8023cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cd4:	4770      	bx	lr
 8023cd6:	bf00      	nop

08023cd8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8023cd8:	b580      	push	{r7, lr}
 8023cda:	b082      	sub	sp, #8
 8023cdc:	af00      	add	r7, sp, #0
 8023cde:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8023ce0:	687b      	ldr	r3, [r7, #4]
 8023ce2:	2b00      	cmp	r3, #0
 8023ce4:	d101      	bne.n	8023cea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8023ce6:	2301      	movs	r3, #1
 8023ce8:	e03b      	b.n	8023d62 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8023cf0:	b2db      	uxtb	r3, r3
 8023cf2:	2b00      	cmp	r3, #0
 8023cf4:	d106      	bne.n	8023d04 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8023cf6:	687b      	ldr	r3, [r7, #4]
 8023cf8:	2200      	movs	r2, #0
 8023cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8023cfe:	6878      	ldr	r0, [r7, #4]
 8023d00:	f7fd fcde 	bl	80216c0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	2202      	movs	r2, #2
 8023d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	681b      	ldr	r3, [r3, #0]
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8023d16:	687b      	ldr	r3, [r7, #4]
 8023d18:	685a      	ldr	r2, [r3, #4]
 8023d1a:	687b      	ldr	r3, [r7, #4]
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	430a      	orrs	r2, r1
 8023d20:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8023d22:	687b      	ldr	r3, [r7, #4]
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8023d28:	f023 0107 	bic.w	r1, r3, #7
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	689a      	ldr	r2, [r3, #8]
 8023d30:	687b      	ldr	r3, [r7, #4]
 8023d32:	681b      	ldr	r3, [r3, #0]
 8023d34:	430a      	orrs	r2, r1
 8023d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8023d38:	687b      	ldr	r3, [r7, #4]
 8023d3a:	681b      	ldr	r3, [r3, #0]
 8023d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8023d42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8023d46:	687a      	ldr	r2, [r7, #4]
 8023d48:	68d1      	ldr	r1, [r2, #12]
 8023d4a:	687a      	ldr	r2, [r7, #4]
 8023d4c:	6812      	ldr	r2, [r2, #0]
 8023d4e:	430b      	orrs	r3, r1
 8023d50:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	2200      	movs	r2, #0
 8023d56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	2201      	movs	r2, #1
 8023d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8023d60:	2300      	movs	r3, #0
}
 8023d62:	4618      	mov	r0, r3
 8023d64:	3708      	adds	r7, #8
 8023d66:	46bd      	mov	sp, r7
 8023d68:	bd80      	pop	{r7, pc}

08023d6a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8023d6a:	b580      	push	{r7, lr}
 8023d6c:	b086      	sub	sp, #24
 8023d6e:	af02      	add	r7, sp, #8
 8023d70:	60f8      	str	r0, [r7, #12]
 8023d72:	60b9      	str	r1, [r7, #8]
 8023d74:	607a      	str	r2, [r7, #4]
 8023d76:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8023d78:	68fb      	ldr	r3, [r7, #12]
 8023d7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8023d7e:	2b01      	cmp	r3, #1
 8023d80:	d101      	bne.n	8023d86 <HAL_DMA2D_Start+0x1c>
 8023d82:	2302      	movs	r3, #2
 8023d84:	e018      	b.n	8023db8 <HAL_DMA2D_Start+0x4e>
 8023d86:	68fb      	ldr	r3, [r7, #12]
 8023d88:	2201      	movs	r2, #1
 8023d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8023d8e:	68fb      	ldr	r3, [r7, #12]
 8023d90:	2202      	movs	r2, #2
 8023d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8023d96:	69bb      	ldr	r3, [r7, #24]
 8023d98:	9300      	str	r3, [sp, #0]
 8023d9a:	683b      	ldr	r3, [r7, #0]
 8023d9c:	687a      	ldr	r2, [r7, #4]
 8023d9e:	68b9      	ldr	r1, [r7, #8]
 8023da0:	68f8      	ldr	r0, [r7, #12]
 8023da2:	f000 fa99 	bl	80242d8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8023da6:	68fb      	ldr	r3, [r7, #12]
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	681a      	ldr	r2, [r3, #0]
 8023dac:	68fb      	ldr	r3, [r7, #12]
 8023dae:	681b      	ldr	r3, [r3, #0]
 8023db0:	f042 0201 	orr.w	r2, r2, #1
 8023db4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8023db6:	2300      	movs	r3, #0
}
 8023db8:	4618      	mov	r0, r3
 8023dba:	3710      	adds	r7, #16
 8023dbc:	46bd      	mov	sp, r7
 8023dbe:	bd80      	pop	{r7, pc}

08023dc0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8023dc0:	b580      	push	{r7, lr}
 8023dc2:	b086      	sub	sp, #24
 8023dc4:	af00      	add	r7, sp, #0
 8023dc6:	6078      	str	r0, [r7, #4]
 8023dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8023dca:	2300      	movs	r3, #0
 8023dcc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8023dce:	687b      	ldr	r3, [r7, #4]
 8023dd0:	681b      	ldr	r3, [r3, #0]
 8023dd2:	681b      	ldr	r3, [r3, #0]
 8023dd4:	f003 0301 	and.w	r3, r3, #1
 8023dd8:	2b00      	cmp	r3, #0
 8023dda:	d056      	beq.n	8023e8a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023ddc:	f7ff fbe2 	bl	80235a4 <HAL_GetTick>
 8023de0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023de2:	e04b      	b.n	8023e7c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023de4:	687b      	ldr	r3, [r7, #4]
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	685b      	ldr	r3, [r3, #4]
 8023dea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023dec:	68fb      	ldr	r3, [r7, #12]
 8023dee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	d023      	beq.n	8023e3e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023df6:	68fb      	ldr	r3, [r7, #12]
 8023df8:	f003 0320 	and.w	r3, r3, #32
 8023dfc:	2b00      	cmp	r3, #0
 8023dfe:	d005      	beq.n	8023e0c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e04:	f043 0202 	orr.w	r2, r3, #2
 8023e08:	687b      	ldr	r3, [r7, #4]
 8023e0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023e0c:	68fb      	ldr	r3, [r7, #12]
 8023e0e:	f003 0301 	and.w	r3, r3, #1
 8023e12:	2b00      	cmp	r3, #0
 8023e14:	d005      	beq.n	8023e22 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e1a:	f043 0201 	orr.w	r2, r3, #1
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	2221      	movs	r2, #33	; 0x21
 8023e28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	2204      	movs	r2, #4
 8023e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023e32:	687b      	ldr	r3, [r7, #4]
 8023e34:	2200      	movs	r2, #0
 8023e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023e3a:	2301      	movs	r3, #1
 8023e3c:	e0a5      	b.n	8023f8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023e3e:	683b      	ldr	r3, [r7, #0]
 8023e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e44:	d01a      	beq.n	8023e7c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023e46:	f7ff fbad 	bl	80235a4 <HAL_GetTick>
 8023e4a:	4602      	mov	r2, r0
 8023e4c:	697b      	ldr	r3, [r7, #20]
 8023e4e:	1ad3      	subs	r3, r2, r3
 8023e50:	683a      	ldr	r2, [r7, #0]
 8023e52:	429a      	cmp	r2, r3
 8023e54:	d302      	bcc.n	8023e5c <HAL_DMA2D_PollForTransfer+0x9c>
 8023e56:	683b      	ldr	r3, [r7, #0]
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	d10f      	bne.n	8023e7c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023e5c:	687b      	ldr	r3, [r7, #4]
 8023e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023e60:	f043 0220 	orr.w	r2, r3, #32
 8023e64:	687b      	ldr	r3, [r7, #4]
 8023e66:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	2203      	movs	r2, #3
 8023e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023e70:	687b      	ldr	r3, [r7, #4]
 8023e72:	2200      	movs	r2, #0
 8023e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023e78:	2303      	movs	r3, #3
 8023e7a:	e086      	b.n	8023f8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	681b      	ldr	r3, [r3, #0]
 8023e80:	685b      	ldr	r3, [r3, #4]
 8023e82:	f003 0302 	and.w	r3, r3, #2
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d0ac      	beq.n	8023de4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	681b      	ldr	r3, [r3, #0]
 8023e8e:	69db      	ldr	r3, [r3, #28]
 8023e90:	f003 0320 	and.w	r3, r3, #32
 8023e94:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8023e96:	687b      	ldr	r3, [r7, #4]
 8023e98:	681b      	ldr	r3, [r3, #0]
 8023e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023e9c:	f003 0320 	and.w	r3, r3, #32
 8023ea0:	693a      	ldr	r2, [r7, #16]
 8023ea2:	4313      	orrs	r3, r2
 8023ea4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8023ea6:	693b      	ldr	r3, [r7, #16]
 8023ea8:	2b00      	cmp	r3, #0
 8023eaa:	d061      	beq.n	8023f70 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8023eac:	f7ff fb7a 	bl	80235a4 <HAL_GetTick>
 8023eb0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023eb2:	e056      	b.n	8023f62 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	681b      	ldr	r3, [r3, #0]
 8023eb8:	685b      	ldr	r3, [r3, #4]
 8023eba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8023ebc:	68fb      	ldr	r3, [r7, #12]
 8023ebe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	d02e      	beq.n	8023f24 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8023ec6:	68fb      	ldr	r3, [r7, #12]
 8023ec8:	f003 0308 	and.w	r3, r3, #8
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	d005      	beq.n	8023edc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8023ed0:	687b      	ldr	r3, [r7, #4]
 8023ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023ed4:	f043 0204 	orr.w	r2, r3, #4
 8023ed8:	687b      	ldr	r3, [r7, #4]
 8023eda:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8023edc:	68fb      	ldr	r3, [r7, #12]
 8023ede:	f003 0320 	and.w	r3, r3, #32
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d005      	beq.n	8023ef2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8023ee6:	687b      	ldr	r3, [r7, #4]
 8023ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023eea:	f043 0202 	orr.w	r2, r3, #2
 8023eee:	687b      	ldr	r3, [r7, #4]
 8023ef0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023ef2:	68fb      	ldr	r3, [r7, #12]
 8023ef4:	f003 0301 	and.w	r3, r3, #1
 8023ef8:	2b00      	cmp	r3, #0
 8023efa:	d005      	beq.n	8023f08 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023efc:	687b      	ldr	r3, [r7, #4]
 8023efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f00:	f043 0201 	orr.w	r2, r3, #1
 8023f04:	687b      	ldr	r3, [r7, #4]
 8023f06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	681b      	ldr	r3, [r3, #0]
 8023f0c:	2229      	movs	r2, #41	; 0x29
 8023f0e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023f10:	687b      	ldr	r3, [r7, #4]
 8023f12:	2204      	movs	r2, #4
 8023f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8023f18:	687b      	ldr	r3, [r7, #4]
 8023f1a:	2200      	movs	r2, #0
 8023f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8023f20:	2301      	movs	r3, #1
 8023f22:	e032      	b.n	8023f8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8023f24:	683b      	ldr	r3, [r7, #0]
 8023f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f2a:	d01a      	beq.n	8023f62 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8023f2c:	f7ff fb3a 	bl	80235a4 <HAL_GetTick>
 8023f30:	4602      	mov	r2, r0
 8023f32:	697b      	ldr	r3, [r7, #20]
 8023f34:	1ad3      	subs	r3, r2, r3
 8023f36:	683a      	ldr	r2, [r7, #0]
 8023f38:	429a      	cmp	r2, r3
 8023f3a:	d302      	bcc.n	8023f42 <HAL_DMA2D_PollForTransfer+0x182>
 8023f3c:	683b      	ldr	r3, [r7, #0]
 8023f3e:	2b00      	cmp	r3, #0
 8023f40:	d10f      	bne.n	8023f62 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023f46:	f043 0220 	orr.w	r2, r3, #32
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	2203      	movs	r2, #3
 8023f52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	2200      	movs	r2, #0
 8023f5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8023f5e:	2303      	movs	r3, #3
 8023f60:	e013      	b.n	8023f8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	681b      	ldr	r3, [r3, #0]
 8023f66:	685b      	ldr	r3, [r3, #4]
 8023f68:	f003 0310 	and.w	r3, r3, #16
 8023f6c:	2b00      	cmp	r3, #0
 8023f6e:	d0a1      	beq.n	8023eb4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	681b      	ldr	r3, [r3, #0]
 8023f74:	2212      	movs	r2, #18
 8023f76:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	2201      	movs	r2, #1
 8023f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8023f80:	687b      	ldr	r3, [r7, #4]
 8023f82:	2200      	movs	r2, #0
 8023f84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8023f88:	2300      	movs	r3, #0
}
 8023f8a:	4618      	mov	r0, r3
 8023f8c:	3718      	adds	r7, #24
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	bd80      	pop	{r7, pc}

08023f92 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8023f92:	b580      	push	{r7, lr}
 8023f94:	b084      	sub	sp, #16
 8023f96:	af00      	add	r7, sp, #0
 8023f98:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8023f9a:	687b      	ldr	r3, [r7, #4]
 8023f9c:	681b      	ldr	r3, [r3, #0]
 8023f9e:	685b      	ldr	r3, [r3, #4]
 8023fa0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8023fa2:	687b      	ldr	r3, [r7, #4]
 8023fa4:	681b      	ldr	r3, [r3, #0]
 8023fa6:	681b      	ldr	r3, [r3, #0]
 8023fa8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8023faa:	68fb      	ldr	r3, [r7, #12]
 8023fac:	f003 0301 	and.w	r3, r3, #1
 8023fb0:	2b00      	cmp	r3, #0
 8023fb2:	d026      	beq.n	8024002 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8023fb4:	68bb      	ldr	r3, [r7, #8]
 8023fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	d021      	beq.n	8024002 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	681b      	ldr	r3, [r3, #0]
 8023fc2:	681a      	ldr	r2, [r3, #0]
 8023fc4:	687b      	ldr	r3, [r7, #4]
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8023fcc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8023fce:	687b      	ldr	r3, [r7, #4]
 8023fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023fd2:	f043 0201 	orr.w	r2, r3, #1
 8023fd6:	687b      	ldr	r3, [r7, #4]
 8023fd8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8023fda:	687b      	ldr	r3, [r7, #4]
 8023fdc:	681b      	ldr	r3, [r3, #0]
 8023fde:	2201      	movs	r2, #1
 8023fe0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8023fe2:	687b      	ldr	r3, [r7, #4]
 8023fe4:	2204      	movs	r2, #4
 8023fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8023fea:	687b      	ldr	r3, [r7, #4]
 8023fec:	2200      	movs	r2, #0
 8023fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8023ff2:	687b      	ldr	r3, [r7, #4]
 8023ff4:	695b      	ldr	r3, [r3, #20]
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	d003      	beq.n	8024002 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8023ffa:	687b      	ldr	r3, [r7, #4]
 8023ffc:	695b      	ldr	r3, [r3, #20]
 8023ffe:	6878      	ldr	r0, [r7, #4]
 8024000:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8024002:	68fb      	ldr	r3, [r7, #12]
 8024004:	f003 0320 	and.w	r3, r3, #32
 8024008:	2b00      	cmp	r3, #0
 802400a:	d026      	beq.n	802405a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 802400c:	68bb      	ldr	r3, [r7, #8]
 802400e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8024012:	2b00      	cmp	r3, #0
 8024014:	d021      	beq.n	802405a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8024016:	687b      	ldr	r3, [r7, #4]
 8024018:	681b      	ldr	r3, [r3, #0]
 802401a:	681a      	ldr	r2, [r3, #0]
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	681b      	ldr	r3, [r3, #0]
 8024020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8024024:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8024026:	687b      	ldr	r3, [r7, #4]
 8024028:	681b      	ldr	r3, [r3, #0]
 802402a:	2220      	movs	r2, #32
 802402c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 802402e:	687b      	ldr	r3, [r7, #4]
 8024030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8024032:	f043 0202 	orr.w	r2, r3, #2
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 802403a:	687b      	ldr	r3, [r7, #4]
 802403c:	2204      	movs	r2, #4
 802403e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	2200      	movs	r2, #0
 8024046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	695b      	ldr	r3, [r3, #20]
 802404e:	2b00      	cmp	r3, #0
 8024050:	d003      	beq.n	802405a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	695b      	ldr	r3, [r3, #20]
 8024056:	6878      	ldr	r0, [r7, #4]
 8024058:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 802405a:	68fb      	ldr	r3, [r7, #12]
 802405c:	f003 0308 	and.w	r3, r3, #8
 8024060:	2b00      	cmp	r3, #0
 8024062:	d026      	beq.n	80240b2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8024064:	68bb      	ldr	r3, [r7, #8]
 8024066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 802406a:	2b00      	cmp	r3, #0
 802406c:	d021      	beq.n	80240b2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	681b      	ldr	r3, [r3, #0]
 8024072:	681a      	ldr	r2, [r3, #0]
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802407c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 802407e:	687b      	ldr	r3, [r7, #4]
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	2208      	movs	r2, #8
 8024084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8024086:	687b      	ldr	r3, [r7, #4]
 8024088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802408a:	f043 0204 	orr.w	r2, r3, #4
 802408e:	687b      	ldr	r3, [r7, #4]
 8024090:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	2204      	movs	r2, #4
 8024096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	2200      	movs	r2, #0
 802409e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80240a2:	687b      	ldr	r3, [r7, #4]
 80240a4:	695b      	ldr	r3, [r3, #20]
 80240a6:	2b00      	cmp	r3, #0
 80240a8:	d003      	beq.n	80240b2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	695b      	ldr	r3, [r3, #20]
 80240ae:	6878      	ldr	r0, [r7, #4]
 80240b0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80240b2:	68fb      	ldr	r3, [r7, #12]
 80240b4:	f003 0304 	and.w	r3, r3, #4
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	d013      	beq.n	80240e4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80240bc:	68bb      	ldr	r3, [r7, #8]
 80240be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80240c2:	2b00      	cmp	r3, #0
 80240c4:	d00e      	beq.n	80240e4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	681b      	ldr	r3, [r3, #0]
 80240ca:	681a      	ldr	r2, [r3, #0]
 80240cc:	687b      	ldr	r3, [r7, #4]
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80240d4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	681b      	ldr	r3, [r3, #0]
 80240da:	2204      	movs	r2, #4
 80240dc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80240de:	6878      	ldr	r0, [r7, #4]
 80240e0:	f000 f853 	bl	802418a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80240e4:	68fb      	ldr	r3, [r7, #12]
 80240e6:	f003 0302 	and.w	r3, r3, #2
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d024      	beq.n	8024138 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80240ee:	68bb      	ldr	r3, [r7, #8]
 80240f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d01f      	beq.n	8024138 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	681b      	ldr	r3, [r3, #0]
 80240fc:	681a      	ldr	r2, [r3, #0]
 80240fe:	687b      	ldr	r3, [r7, #4]
 8024100:	681b      	ldr	r3, [r3, #0]
 8024102:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8024106:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	681b      	ldr	r3, [r3, #0]
 802410c:	2202      	movs	r2, #2
 802410e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8024110:	687b      	ldr	r3, [r7, #4]
 8024112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	2201      	movs	r2, #1
 802411c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024120:	687b      	ldr	r3, [r7, #4]
 8024122:	2200      	movs	r2, #0
 8024124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	691b      	ldr	r3, [r3, #16]
 802412c:	2b00      	cmp	r3, #0
 802412e:	d003      	beq.n	8024138 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8024130:	687b      	ldr	r3, [r7, #4]
 8024132:	691b      	ldr	r3, [r3, #16]
 8024134:	6878      	ldr	r0, [r7, #4]
 8024136:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8024138:	68fb      	ldr	r3, [r7, #12]
 802413a:	f003 0310 	and.w	r3, r3, #16
 802413e:	2b00      	cmp	r3, #0
 8024140:	d01f      	beq.n	8024182 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8024142:	68bb      	ldr	r3, [r7, #8]
 8024144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024148:	2b00      	cmp	r3, #0
 802414a:	d01a      	beq.n	8024182 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 802414c:	687b      	ldr	r3, [r7, #4]
 802414e:	681b      	ldr	r3, [r3, #0]
 8024150:	681a      	ldr	r2, [r3, #0]
 8024152:	687b      	ldr	r3, [r7, #4]
 8024154:	681b      	ldr	r3, [r3, #0]
 8024156:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802415a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 802415c:	687b      	ldr	r3, [r7, #4]
 802415e:	681b      	ldr	r3, [r3, #0]
 8024160:	2210      	movs	r2, #16
 8024162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024168:	687b      	ldr	r3, [r7, #4]
 802416a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 802416c:	687b      	ldr	r3, [r7, #4]
 802416e:	2201      	movs	r2, #1
 8024170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8024174:	687b      	ldr	r3, [r7, #4]
 8024176:	2200      	movs	r2, #0
 8024178:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 802417c:	6878      	ldr	r0, [r7, #4]
 802417e:	f000 f80e 	bl	802419e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8024182:	bf00      	nop
 8024184:	3710      	adds	r7, #16
 8024186:	46bd      	mov	sp, r7
 8024188:	bd80      	pop	{r7, pc}

0802418a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802418a:	b480      	push	{r7}
 802418c:	b083      	sub	sp, #12
 802418e:	af00      	add	r7, sp, #0
 8024190:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8024192:	bf00      	nop
 8024194:	370c      	adds	r7, #12
 8024196:	46bd      	mov	sp, r7
 8024198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802419c:	4770      	bx	lr

0802419e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 802419e:	b480      	push	{r7}
 80241a0:	b083      	sub	sp, #12
 80241a2:	af00      	add	r7, sp, #0
 80241a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80241a6:	bf00      	nop
 80241a8:	370c      	adds	r7, #12
 80241aa:	46bd      	mov	sp, r7
 80241ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241b0:	4770      	bx	lr
	...

080241b4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80241b4:	b480      	push	{r7}
 80241b6:	b087      	sub	sp, #28
 80241b8:	af00      	add	r7, sp, #0
 80241ba:	6078      	str	r0, [r7, #4]
 80241bc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80241be:	687b      	ldr	r3, [r7, #4]
 80241c0:	685b      	ldr	r3, [r3, #4]
 80241c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80241cc:	2b01      	cmp	r3, #1
 80241ce:	d101      	bne.n	80241d4 <HAL_DMA2D_ConfigLayer+0x20>
 80241d0:	2302      	movs	r3, #2
 80241d2:	e079      	b.n	80242c8 <HAL_DMA2D_ConfigLayer+0x114>
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	2201      	movs	r2, #1
 80241d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80241dc:	687b      	ldr	r3, [r7, #4]
 80241de:	2202      	movs	r2, #2
 80241e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80241e4:	683b      	ldr	r3, [r7, #0]
 80241e6:	011b      	lsls	r3, r3, #4
 80241e8:	3318      	adds	r3, #24
 80241ea:	687a      	ldr	r2, [r7, #4]
 80241ec:	4413      	add	r3, r2
 80241ee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80241f0:	693b      	ldr	r3, [r7, #16]
 80241f2:	685a      	ldr	r2, [r3, #4]
 80241f4:	693b      	ldr	r3, [r7, #16]
 80241f6:	689b      	ldr	r3, [r3, #8]
 80241f8:	041b      	lsls	r3, r3, #16
 80241fa:	4313      	orrs	r3, r2
 80241fc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80241fe:	4b35      	ldr	r3, [pc, #212]	; (80242d4 <HAL_DMA2D_ConfigLayer+0x120>)
 8024200:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024202:	693b      	ldr	r3, [r7, #16]
 8024204:	685b      	ldr	r3, [r3, #4]
 8024206:	2b0a      	cmp	r3, #10
 8024208:	d003      	beq.n	8024212 <HAL_DMA2D_ConfigLayer+0x5e>
 802420a:	693b      	ldr	r3, [r7, #16]
 802420c:	685b      	ldr	r3, [r3, #4]
 802420e:	2b09      	cmp	r3, #9
 8024210:	d107      	bne.n	8024222 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8024212:	693b      	ldr	r3, [r7, #16]
 8024214:	68db      	ldr	r3, [r3, #12]
 8024216:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 802421a:	697a      	ldr	r2, [r7, #20]
 802421c:	4313      	orrs	r3, r2
 802421e:	617b      	str	r3, [r7, #20]
 8024220:	e005      	b.n	802422e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8024222:	693b      	ldr	r3, [r7, #16]
 8024224:	68db      	ldr	r3, [r3, #12]
 8024226:	061b      	lsls	r3, r3, #24
 8024228:	697a      	ldr	r2, [r7, #20]
 802422a:	4313      	orrs	r3, r2
 802422c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 802422e:	683b      	ldr	r3, [r7, #0]
 8024230:	2b00      	cmp	r3, #0
 8024232:	d120      	bne.n	8024276 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	681b      	ldr	r3, [r3, #0]
 8024238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802423a:	68fb      	ldr	r3, [r7, #12]
 802423c:	43db      	mvns	r3, r3
 802423e:	ea02 0103 	and.w	r1, r2, r3
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	681b      	ldr	r3, [r3, #0]
 8024246:	697a      	ldr	r2, [r7, #20]
 8024248:	430a      	orrs	r2, r1
 802424a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 802424c:	687b      	ldr	r3, [r7, #4]
 802424e:	681b      	ldr	r3, [r3, #0]
 8024250:	693a      	ldr	r2, [r7, #16]
 8024252:	6812      	ldr	r2, [r2, #0]
 8024254:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024256:	693b      	ldr	r3, [r7, #16]
 8024258:	685b      	ldr	r3, [r3, #4]
 802425a:	2b0a      	cmp	r3, #10
 802425c:	d003      	beq.n	8024266 <HAL_DMA2D_ConfigLayer+0xb2>
 802425e:	693b      	ldr	r3, [r7, #16]
 8024260:	685b      	ldr	r3, [r3, #4]
 8024262:	2b09      	cmp	r3, #9
 8024264:	d127      	bne.n	80242b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8024266:	693b      	ldr	r3, [r7, #16]
 8024268:	68da      	ldr	r2, [r3, #12]
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	681b      	ldr	r3, [r3, #0]
 802426e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8024272:	629a      	str	r2, [r3, #40]	; 0x28
 8024274:	e01f      	b.n	80242b6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	681b      	ldr	r3, [r3, #0]
 802427a:	69da      	ldr	r2, [r3, #28]
 802427c:	68fb      	ldr	r3, [r7, #12]
 802427e:	43db      	mvns	r3, r3
 8024280:	ea02 0103 	and.w	r1, r2, r3
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	681b      	ldr	r3, [r3, #0]
 8024288:	697a      	ldr	r2, [r7, #20]
 802428a:	430a      	orrs	r2, r1
 802428c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	681b      	ldr	r3, [r3, #0]
 8024292:	693a      	ldr	r2, [r7, #16]
 8024294:	6812      	ldr	r2, [r2, #0]
 8024296:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8024298:	693b      	ldr	r3, [r7, #16]
 802429a:	685b      	ldr	r3, [r3, #4]
 802429c:	2b0a      	cmp	r3, #10
 802429e:	d003      	beq.n	80242a8 <HAL_DMA2D_ConfigLayer+0xf4>
 80242a0:	693b      	ldr	r3, [r7, #16]
 80242a2:	685b      	ldr	r3, [r3, #4]
 80242a4:	2b09      	cmp	r3, #9
 80242a6:	d106      	bne.n	80242b6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80242a8:	693b      	ldr	r3, [r7, #16]
 80242aa:	68da      	ldr	r2, [r3, #12]
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	681b      	ldr	r3, [r3, #0]
 80242b0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80242b4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80242b6:	687b      	ldr	r3, [r7, #4]
 80242b8:	2201      	movs	r2, #1
 80242ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80242be:	687b      	ldr	r3, [r7, #4]
 80242c0:	2200      	movs	r2, #0
 80242c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80242c6:	2300      	movs	r3, #0
}
 80242c8:	4618      	mov	r0, r3
 80242ca:	371c      	adds	r7, #28
 80242cc:	46bd      	mov	sp, r7
 80242ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242d2:	4770      	bx	lr
 80242d4:	ff03000f 	.word	0xff03000f

080242d8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80242d8:	b480      	push	{r7}
 80242da:	b08b      	sub	sp, #44	; 0x2c
 80242dc:	af00      	add	r7, sp, #0
 80242de:	60f8      	str	r0, [r7, #12]
 80242e0:	60b9      	str	r1, [r7, #8]
 80242e2:	607a      	str	r2, [r7, #4]
 80242e4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80242e6:	68fb      	ldr	r3, [r7, #12]
 80242e8:	681b      	ldr	r3, [r3, #0]
 80242ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80242ec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80242f0:	683b      	ldr	r3, [r7, #0]
 80242f2:	041a      	lsls	r2, r3, #16
 80242f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80242f6:	431a      	orrs	r2, r3
 80242f8:	68fb      	ldr	r3, [r7, #12]
 80242fa:	681b      	ldr	r3, [r3, #0]
 80242fc:	430a      	orrs	r2, r1
 80242fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8024300:	68fb      	ldr	r3, [r7, #12]
 8024302:	681b      	ldr	r3, [r3, #0]
 8024304:	687a      	ldr	r2, [r7, #4]
 8024306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8024308:	68fb      	ldr	r3, [r7, #12]
 802430a:	685b      	ldr	r3, [r3, #4]
 802430c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8024310:	d174      	bne.n	80243fc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8024312:	68bb      	ldr	r3, [r7, #8]
 8024314:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8024318:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 802431a:	68bb      	ldr	r3, [r7, #8]
 802431c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8024320:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8024322:	68bb      	ldr	r3, [r7, #8]
 8024324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024328:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 802432a:	68bb      	ldr	r3, [r7, #8]
 802432c:	b2db      	uxtb	r3, r3
 802432e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8024330:	68fb      	ldr	r3, [r7, #12]
 8024332:	689b      	ldr	r3, [r3, #8]
 8024334:	2b00      	cmp	r3, #0
 8024336:	d108      	bne.n	802434a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8024338:	69ba      	ldr	r2, [r7, #24]
 802433a:	69fb      	ldr	r3, [r7, #28]
 802433c:	431a      	orrs	r2, r3
 802433e:	6a3b      	ldr	r3, [r7, #32]
 8024340:	4313      	orrs	r3, r2
 8024342:	697a      	ldr	r2, [r7, #20]
 8024344:	4313      	orrs	r3, r2
 8024346:	627b      	str	r3, [r7, #36]	; 0x24
 8024348:	e053      	b.n	80243f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 802434a:	68fb      	ldr	r3, [r7, #12]
 802434c:	689b      	ldr	r3, [r3, #8]
 802434e:	2b01      	cmp	r3, #1
 8024350:	d106      	bne.n	8024360 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8024352:	69ba      	ldr	r2, [r7, #24]
 8024354:	69fb      	ldr	r3, [r7, #28]
 8024356:	4313      	orrs	r3, r2
 8024358:	697a      	ldr	r2, [r7, #20]
 802435a:	4313      	orrs	r3, r2
 802435c:	627b      	str	r3, [r7, #36]	; 0x24
 802435e:	e048      	b.n	80243f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8024360:	68fb      	ldr	r3, [r7, #12]
 8024362:	689b      	ldr	r3, [r3, #8]
 8024364:	2b02      	cmp	r3, #2
 8024366:	d111      	bne.n	802438c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8024368:	69fb      	ldr	r3, [r7, #28]
 802436a:	0cdb      	lsrs	r3, r3, #19
 802436c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 802436e:	69bb      	ldr	r3, [r7, #24]
 8024370:	0a9b      	lsrs	r3, r3, #10
 8024372:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8024374:	697b      	ldr	r3, [r7, #20]
 8024376:	08db      	lsrs	r3, r3, #3
 8024378:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 802437a:	69bb      	ldr	r3, [r7, #24]
 802437c:	015a      	lsls	r2, r3, #5
 802437e:	69fb      	ldr	r3, [r7, #28]
 8024380:	02db      	lsls	r3, r3, #11
 8024382:	4313      	orrs	r3, r2
 8024384:	697a      	ldr	r2, [r7, #20]
 8024386:	4313      	orrs	r3, r2
 8024388:	627b      	str	r3, [r7, #36]	; 0x24
 802438a:	e032      	b.n	80243f2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 802438c:	68fb      	ldr	r3, [r7, #12]
 802438e:	689b      	ldr	r3, [r3, #8]
 8024390:	2b03      	cmp	r3, #3
 8024392:	d117      	bne.n	80243c4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8024394:	6a3b      	ldr	r3, [r7, #32]
 8024396:	0fdb      	lsrs	r3, r3, #31
 8024398:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 802439a:	69fb      	ldr	r3, [r7, #28]
 802439c:	0cdb      	lsrs	r3, r3, #19
 802439e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80243a0:	69bb      	ldr	r3, [r7, #24]
 80243a2:	0adb      	lsrs	r3, r3, #11
 80243a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80243a6:	697b      	ldr	r3, [r7, #20]
 80243a8:	08db      	lsrs	r3, r3, #3
 80243aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80243ac:	69bb      	ldr	r3, [r7, #24]
 80243ae:	015a      	lsls	r2, r3, #5
 80243b0:	69fb      	ldr	r3, [r7, #28]
 80243b2:	029b      	lsls	r3, r3, #10
 80243b4:	431a      	orrs	r2, r3
 80243b6:	6a3b      	ldr	r3, [r7, #32]
 80243b8:	03db      	lsls	r3, r3, #15
 80243ba:	4313      	orrs	r3, r2
 80243bc:	697a      	ldr	r2, [r7, #20]
 80243be:	4313      	orrs	r3, r2
 80243c0:	627b      	str	r3, [r7, #36]	; 0x24
 80243c2:	e016      	b.n	80243f2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80243c4:	6a3b      	ldr	r3, [r7, #32]
 80243c6:	0f1b      	lsrs	r3, r3, #28
 80243c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80243ca:	69fb      	ldr	r3, [r7, #28]
 80243cc:	0d1b      	lsrs	r3, r3, #20
 80243ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80243d0:	69bb      	ldr	r3, [r7, #24]
 80243d2:	0b1b      	lsrs	r3, r3, #12
 80243d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80243d6:	697b      	ldr	r3, [r7, #20]
 80243d8:	091b      	lsrs	r3, r3, #4
 80243da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80243dc:	69bb      	ldr	r3, [r7, #24]
 80243de:	011a      	lsls	r2, r3, #4
 80243e0:	69fb      	ldr	r3, [r7, #28]
 80243e2:	021b      	lsls	r3, r3, #8
 80243e4:	431a      	orrs	r2, r3
 80243e6:	6a3b      	ldr	r3, [r7, #32]
 80243e8:	031b      	lsls	r3, r3, #12
 80243ea:	4313      	orrs	r3, r2
 80243ec:	697a      	ldr	r2, [r7, #20]
 80243ee:	4313      	orrs	r3, r2
 80243f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80243f2:	68fb      	ldr	r3, [r7, #12]
 80243f4:	681b      	ldr	r3, [r3, #0]
 80243f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80243f8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80243fa:	e003      	b.n	8024404 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80243fc:	68fb      	ldr	r3, [r7, #12]
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	68ba      	ldr	r2, [r7, #8]
 8024402:	60da      	str	r2, [r3, #12]
}
 8024404:	bf00      	nop
 8024406:	372c      	adds	r7, #44	; 0x2c
 8024408:	46bd      	mov	sp, r7
 802440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802440e:	4770      	bx	lr

08024410 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8024410:	b580      	push	{r7, lr}
 8024412:	b086      	sub	sp, #24
 8024414:	af00      	add	r7, sp, #0
 8024416:	60f8      	str	r0, [r7, #12]
 8024418:	60b9      	str	r1, [r7, #8]
 802441a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802441e:	2301      	movs	r3, #1
 8024420:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8024422:	4b23      	ldr	r3, [pc, #140]	; (80244b0 <HAL_FLASH_Program+0xa0>)
 8024424:	7e1b      	ldrb	r3, [r3, #24]
 8024426:	2b01      	cmp	r3, #1
 8024428:	d101      	bne.n	802442e <HAL_FLASH_Program+0x1e>
 802442a:	2302      	movs	r3, #2
 802442c:	e03b      	b.n	80244a6 <HAL_FLASH_Program+0x96>
 802442e:	4b20      	ldr	r3, [pc, #128]	; (80244b0 <HAL_FLASH_Program+0xa0>)
 8024430:	2201      	movs	r2, #1
 8024432:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024434:	f24c 3050 	movw	r0, #50000	; 0xc350
 8024438:	f000 f870 	bl	802451c <FLASH_WaitForLastOperation>
 802443c:	4603      	mov	r3, r0
 802443e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8024440:	7dfb      	ldrb	r3, [r7, #23]
 8024442:	2b00      	cmp	r3, #0
 8024444:	d12b      	bne.n	802449e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8024446:	68fb      	ldr	r3, [r7, #12]
 8024448:	2b00      	cmp	r3, #0
 802444a:	d105      	bne.n	8024458 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 802444c:	783b      	ldrb	r3, [r7, #0]
 802444e:	4619      	mov	r1, r3
 8024450:	68b8      	ldr	r0, [r7, #8]
 8024452:	f000 f91b 	bl	802468c <FLASH_Program_Byte>
 8024456:	e016      	b.n	8024486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8024458:	68fb      	ldr	r3, [r7, #12]
 802445a:	2b01      	cmp	r3, #1
 802445c:	d105      	bne.n	802446a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802445e:	883b      	ldrh	r3, [r7, #0]
 8024460:	4619      	mov	r1, r3
 8024462:	68b8      	ldr	r0, [r7, #8]
 8024464:	f000 f8ee 	bl	8024644 <FLASH_Program_HalfWord>
 8024468:	e00d      	b.n	8024486 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802446a:	68fb      	ldr	r3, [r7, #12]
 802446c:	2b02      	cmp	r3, #2
 802446e:	d105      	bne.n	802447c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8024470:	683b      	ldr	r3, [r7, #0]
 8024472:	4619      	mov	r1, r3
 8024474:	68b8      	ldr	r0, [r7, #8]
 8024476:	f000 f8c3 	bl	8024600 <FLASH_Program_Word>
 802447a:	e004      	b.n	8024486 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 802447c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8024480:	68b8      	ldr	r0, [r7, #8]
 8024482:	f000 f88b 	bl	802459c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024486:	f24c 3050 	movw	r0, #50000	; 0xc350
 802448a:	f000 f847 	bl	802451c <FLASH_WaitForLastOperation>
 802448e:	4603      	mov	r3, r0
 8024490:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8024492:	4b08      	ldr	r3, [pc, #32]	; (80244b4 <HAL_FLASH_Program+0xa4>)
 8024494:	691b      	ldr	r3, [r3, #16]
 8024496:	4a07      	ldr	r2, [pc, #28]	; (80244b4 <HAL_FLASH_Program+0xa4>)
 8024498:	f023 0301 	bic.w	r3, r3, #1
 802449c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802449e:	4b04      	ldr	r3, [pc, #16]	; (80244b0 <HAL_FLASH_Program+0xa0>)
 80244a0:	2200      	movs	r2, #0
 80244a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80244a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80244a6:	4618      	mov	r0, r3
 80244a8:	3718      	adds	r7, #24
 80244aa:	46bd      	mov	sp, r7
 80244ac:	bd80      	pop	{r7, pc}
 80244ae:	bf00      	nop
 80244b0:	20000af4 	.word	0x20000af4
 80244b4:	40023c00 	.word	0x40023c00

080244b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80244b8:	b480      	push	{r7}
 80244ba:	b083      	sub	sp, #12
 80244bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80244be:	2300      	movs	r3, #0
 80244c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80244c2:	4b0b      	ldr	r3, [pc, #44]	; (80244f0 <HAL_FLASH_Unlock+0x38>)
 80244c4:	691b      	ldr	r3, [r3, #16]
 80244c6:	2b00      	cmp	r3, #0
 80244c8:	da0b      	bge.n	80244e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80244ca:	4b09      	ldr	r3, [pc, #36]	; (80244f0 <HAL_FLASH_Unlock+0x38>)
 80244cc:	4a09      	ldr	r2, [pc, #36]	; (80244f4 <HAL_FLASH_Unlock+0x3c>)
 80244ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80244d0:	4b07      	ldr	r3, [pc, #28]	; (80244f0 <HAL_FLASH_Unlock+0x38>)
 80244d2:	4a09      	ldr	r2, [pc, #36]	; (80244f8 <HAL_FLASH_Unlock+0x40>)
 80244d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80244d6:	4b06      	ldr	r3, [pc, #24]	; (80244f0 <HAL_FLASH_Unlock+0x38>)
 80244d8:	691b      	ldr	r3, [r3, #16]
 80244da:	2b00      	cmp	r3, #0
 80244dc:	da01      	bge.n	80244e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80244de:	2301      	movs	r3, #1
 80244e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80244e2:	79fb      	ldrb	r3, [r7, #7]
}
 80244e4:	4618      	mov	r0, r3
 80244e6:	370c      	adds	r7, #12
 80244e8:	46bd      	mov	sp, r7
 80244ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244ee:	4770      	bx	lr
 80244f0:	40023c00 	.word	0x40023c00
 80244f4:	45670123 	.word	0x45670123
 80244f8:	cdef89ab 	.word	0xcdef89ab

080244fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80244fc:	b480      	push	{r7}
 80244fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8024500:	4b05      	ldr	r3, [pc, #20]	; (8024518 <HAL_FLASH_Lock+0x1c>)
 8024502:	691b      	ldr	r3, [r3, #16]
 8024504:	4a04      	ldr	r2, [pc, #16]	; (8024518 <HAL_FLASH_Lock+0x1c>)
 8024506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802450a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 802450c:	2300      	movs	r3, #0
}
 802450e:	4618      	mov	r0, r3
 8024510:	46bd      	mov	sp, r7
 8024512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024516:	4770      	bx	lr
 8024518:	40023c00 	.word	0x40023c00

0802451c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 802451c:	b580      	push	{r7, lr}
 802451e:	b084      	sub	sp, #16
 8024520:	af00      	add	r7, sp, #0
 8024522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8024524:	2300      	movs	r3, #0
 8024526:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8024528:	4b1a      	ldr	r3, [pc, #104]	; (8024594 <FLASH_WaitForLastOperation+0x78>)
 802452a:	2200      	movs	r2, #0
 802452c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802452e:	f7ff f839 	bl	80235a4 <HAL_GetTick>
 8024532:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024534:	e010      	b.n	8024558 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	f1b3 3fff 	cmp.w	r3, #4294967295
 802453c:	d00c      	beq.n	8024558 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d007      	beq.n	8024554 <FLASH_WaitForLastOperation+0x38>
 8024544:	f7ff f82e 	bl	80235a4 <HAL_GetTick>
 8024548:	4602      	mov	r2, r0
 802454a:	68fb      	ldr	r3, [r7, #12]
 802454c:	1ad3      	subs	r3, r2, r3
 802454e:	687a      	ldr	r2, [r7, #4]
 8024550:	429a      	cmp	r2, r3
 8024552:	d201      	bcs.n	8024558 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8024554:	2303      	movs	r3, #3
 8024556:	e019      	b.n	802458c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8024558:	4b0f      	ldr	r3, [pc, #60]	; (8024598 <FLASH_WaitForLastOperation+0x7c>)
 802455a:	68db      	ldr	r3, [r3, #12]
 802455c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024560:	2b00      	cmp	r3, #0
 8024562:	d1e8      	bne.n	8024536 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8024564:	4b0c      	ldr	r3, [pc, #48]	; (8024598 <FLASH_WaitForLastOperation+0x7c>)
 8024566:	68db      	ldr	r3, [r3, #12]
 8024568:	f003 0301 	and.w	r3, r3, #1
 802456c:	2b00      	cmp	r3, #0
 802456e:	d002      	beq.n	8024576 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8024570:	4b09      	ldr	r3, [pc, #36]	; (8024598 <FLASH_WaitForLastOperation+0x7c>)
 8024572:	2201      	movs	r2, #1
 8024574:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8024576:	4b08      	ldr	r3, [pc, #32]	; (8024598 <FLASH_WaitForLastOperation+0x7c>)
 8024578:	68db      	ldr	r3, [r3, #12]
 802457a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 802457e:	2b00      	cmp	r3, #0
 8024580:	d003      	beq.n	802458a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8024582:	f000 f8a5 	bl	80246d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8024586:	2301      	movs	r3, #1
 8024588:	e000      	b.n	802458c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802458a:	2300      	movs	r3, #0
  
}  
 802458c:	4618      	mov	r0, r3
 802458e:	3710      	adds	r7, #16
 8024590:	46bd      	mov	sp, r7
 8024592:	bd80      	pop	{r7, pc}
 8024594:	20000af4 	.word	0x20000af4
 8024598:	40023c00 	.word	0x40023c00

0802459c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 802459c:	b480      	push	{r7}
 802459e:	b085      	sub	sp, #20
 80245a0:	af00      	add	r7, sp, #0
 80245a2:	60f8      	str	r0, [r7, #12]
 80245a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80245a8:	4b14      	ldr	r3, [pc, #80]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245aa:	691b      	ldr	r3, [r3, #16]
 80245ac:	4a13      	ldr	r2, [pc, #76]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80245b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80245b4:	4b11      	ldr	r3, [pc, #68]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245b6:	691b      	ldr	r3, [r3, #16]
 80245b8:	4a10      	ldr	r2, [pc, #64]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80245be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80245c0:	4b0e      	ldr	r3, [pc, #56]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245c2:	691b      	ldr	r3, [r3, #16]
 80245c4:	4a0d      	ldr	r2, [pc, #52]	; (80245fc <FLASH_Program_DoubleWord+0x60>)
 80245c6:	f043 0301 	orr.w	r3, r3, #1
 80245ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80245cc:	68fb      	ldr	r3, [r7, #12]
 80245ce:	683a      	ldr	r2, [r7, #0]
 80245d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80245d2:	f3bf 8f6f 	isb	sy
}
 80245d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80245d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80245dc:	f04f 0200 	mov.w	r2, #0
 80245e0:	f04f 0300 	mov.w	r3, #0
 80245e4:	000a      	movs	r2, r1
 80245e6:	2300      	movs	r3, #0
 80245e8:	68f9      	ldr	r1, [r7, #12]
 80245ea:	3104      	adds	r1, #4
 80245ec:	4613      	mov	r3, r2
 80245ee:	600b      	str	r3, [r1, #0]
}
 80245f0:	bf00      	nop
 80245f2:	3714      	adds	r7, #20
 80245f4:	46bd      	mov	sp, r7
 80245f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245fa:	4770      	bx	lr
 80245fc:	40023c00 	.word	0x40023c00

08024600 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8024600:	b480      	push	{r7}
 8024602:	b083      	sub	sp, #12
 8024604:	af00      	add	r7, sp, #0
 8024606:	6078      	str	r0, [r7, #4]
 8024608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802460a:	4b0d      	ldr	r3, [pc, #52]	; (8024640 <FLASH_Program_Word+0x40>)
 802460c:	691b      	ldr	r3, [r3, #16]
 802460e:	4a0c      	ldr	r2, [pc, #48]	; (8024640 <FLASH_Program_Word+0x40>)
 8024610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8024616:	4b0a      	ldr	r3, [pc, #40]	; (8024640 <FLASH_Program_Word+0x40>)
 8024618:	691b      	ldr	r3, [r3, #16]
 802461a:	4a09      	ldr	r2, [pc, #36]	; (8024640 <FLASH_Program_Word+0x40>)
 802461c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8024620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024622:	4b07      	ldr	r3, [pc, #28]	; (8024640 <FLASH_Program_Word+0x40>)
 8024624:	691b      	ldr	r3, [r3, #16]
 8024626:	4a06      	ldr	r2, [pc, #24]	; (8024640 <FLASH_Program_Word+0x40>)
 8024628:	f043 0301 	orr.w	r3, r3, #1
 802462c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	683a      	ldr	r2, [r7, #0]
 8024632:	601a      	str	r2, [r3, #0]
}
 8024634:	bf00      	nop
 8024636:	370c      	adds	r7, #12
 8024638:	46bd      	mov	sp, r7
 802463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802463e:	4770      	bx	lr
 8024640:	40023c00 	.word	0x40023c00

08024644 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8024644:	b480      	push	{r7}
 8024646:	b083      	sub	sp, #12
 8024648:	af00      	add	r7, sp, #0
 802464a:	6078      	str	r0, [r7, #4]
 802464c:	460b      	mov	r3, r1
 802464e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024650:	4b0d      	ldr	r3, [pc, #52]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 8024652:	691b      	ldr	r3, [r3, #16]
 8024654:	4a0c      	ldr	r2, [pc, #48]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 8024656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802465a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802465c:	4b0a      	ldr	r3, [pc, #40]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 802465e:	691b      	ldr	r3, [r3, #16]
 8024660:	4a09      	ldr	r2, [pc, #36]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 8024662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8024668:	4b07      	ldr	r3, [pc, #28]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 802466a:	691b      	ldr	r3, [r3, #16]
 802466c:	4a06      	ldr	r2, [pc, #24]	; (8024688 <FLASH_Program_HalfWord+0x44>)
 802466e:	f043 0301 	orr.w	r3, r3, #1
 8024672:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	887a      	ldrh	r2, [r7, #2]
 8024678:	801a      	strh	r2, [r3, #0]
}
 802467a:	bf00      	nop
 802467c:	370c      	adds	r7, #12
 802467e:	46bd      	mov	sp, r7
 8024680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024684:	4770      	bx	lr
 8024686:	bf00      	nop
 8024688:	40023c00 	.word	0x40023c00

0802468c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802468c:	b480      	push	{r7}
 802468e:	b083      	sub	sp, #12
 8024690:	af00      	add	r7, sp, #0
 8024692:	6078      	str	r0, [r7, #4]
 8024694:	460b      	mov	r3, r1
 8024696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8024698:	4b0c      	ldr	r3, [pc, #48]	; (80246cc <FLASH_Program_Byte+0x40>)
 802469a:	691b      	ldr	r3, [r3, #16]
 802469c:	4a0b      	ldr	r2, [pc, #44]	; (80246cc <FLASH_Program_Byte+0x40>)
 802469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80246a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80246a4:	4b09      	ldr	r3, [pc, #36]	; (80246cc <FLASH_Program_Byte+0x40>)
 80246a6:	4a09      	ldr	r2, [pc, #36]	; (80246cc <FLASH_Program_Byte+0x40>)
 80246a8:	691b      	ldr	r3, [r3, #16]
 80246aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80246ac:	4b07      	ldr	r3, [pc, #28]	; (80246cc <FLASH_Program_Byte+0x40>)
 80246ae:	691b      	ldr	r3, [r3, #16]
 80246b0:	4a06      	ldr	r2, [pc, #24]	; (80246cc <FLASH_Program_Byte+0x40>)
 80246b2:	f043 0301 	orr.w	r3, r3, #1
 80246b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	78fa      	ldrb	r2, [r7, #3]
 80246bc:	701a      	strb	r2, [r3, #0]
}
 80246be:	bf00      	nop
 80246c0:	370c      	adds	r7, #12
 80246c2:	46bd      	mov	sp, r7
 80246c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246c8:	4770      	bx	lr
 80246ca:	bf00      	nop
 80246cc:	40023c00 	.word	0x40023c00

080246d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80246d0:	b480      	push	{r7}
 80246d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80246d4:	4b2f      	ldr	r3, [pc, #188]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 80246d6:	68db      	ldr	r3, [r3, #12]
 80246d8:	f003 0310 	and.w	r3, r3, #16
 80246dc:	2b00      	cmp	r3, #0
 80246de:	d008      	beq.n	80246f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80246e0:	4b2d      	ldr	r3, [pc, #180]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 80246e2:	69db      	ldr	r3, [r3, #28]
 80246e4:	f043 0310 	orr.w	r3, r3, #16
 80246e8:	4a2b      	ldr	r2, [pc, #172]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 80246ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80246ec:	4b29      	ldr	r3, [pc, #164]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 80246ee:	2210      	movs	r2, #16
 80246f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80246f2:	4b28      	ldr	r3, [pc, #160]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 80246f4:	68db      	ldr	r3, [r3, #12]
 80246f6:	f003 0320 	and.w	r3, r3, #32
 80246fa:	2b00      	cmp	r3, #0
 80246fc:	d008      	beq.n	8024710 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80246fe:	4b26      	ldr	r3, [pc, #152]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024700:	69db      	ldr	r3, [r3, #28]
 8024702:	f043 0308 	orr.w	r3, r3, #8
 8024706:	4a24      	ldr	r2, [pc, #144]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024708:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802470a:	4b22      	ldr	r3, [pc, #136]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 802470c:	2220      	movs	r2, #32
 802470e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8024710:	4b20      	ldr	r3, [pc, #128]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 8024712:	68db      	ldr	r3, [r3, #12]
 8024714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024718:	2b00      	cmp	r3, #0
 802471a:	d008      	beq.n	802472e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802471c:	4b1e      	ldr	r3, [pc, #120]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 802471e:	69db      	ldr	r3, [r3, #28]
 8024720:	f043 0304 	orr.w	r3, r3, #4
 8024724:	4a1c      	ldr	r2, [pc, #112]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024726:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8024728:	4b1a      	ldr	r3, [pc, #104]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 802472a:	2240      	movs	r2, #64	; 0x40
 802472c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802472e:	4b19      	ldr	r3, [pc, #100]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 8024730:	68db      	ldr	r3, [r3, #12]
 8024732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024736:	2b00      	cmp	r3, #0
 8024738:	d008      	beq.n	802474c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802473a:	4b17      	ldr	r3, [pc, #92]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 802473c:	69db      	ldr	r3, [r3, #28]
 802473e:	f043 0302 	orr.w	r3, r3, #2
 8024742:	4a15      	ldr	r2, [pc, #84]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024744:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8024746:	4b13      	ldr	r3, [pc, #76]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 8024748:	2280      	movs	r2, #128	; 0x80
 802474a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 802474c:	4b11      	ldr	r3, [pc, #68]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 802474e:	68db      	ldr	r3, [r3, #12]
 8024750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024754:	2b00      	cmp	r3, #0
 8024756:	d009      	beq.n	802476c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8024758:	4b0f      	ldr	r3, [pc, #60]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 802475a:	69db      	ldr	r3, [r3, #28]
 802475c:	f043 0301 	orr.w	r3, r3, #1
 8024760:	4a0d      	ldr	r2, [pc, #52]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024762:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8024764:	4b0b      	ldr	r3, [pc, #44]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 8024766:	f44f 7280 	mov.w	r2, #256	; 0x100
 802476a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802476c:	4b09      	ldr	r3, [pc, #36]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 802476e:	68db      	ldr	r3, [r3, #12]
 8024770:	f003 0302 	and.w	r3, r3, #2
 8024774:	2b00      	cmp	r3, #0
 8024776:	d008      	beq.n	802478a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8024778:	4b07      	ldr	r3, [pc, #28]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 802477a:	69db      	ldr	r3, [r3, #28]
 802477c:	f043 0320 	orr.w	r3, r3, #32
 8024780:	4a05      	ldr	r2, [pc, #20]	; (8024798 <FLASH_SetErrorCode+0xc8>)
 8024782:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8024784:	4b03      	ldr	r3, [pc, #12]	; (8024794 <FLASH_SetErrorCode+0xc4>)
 8024786:	2202      	movs	r2, #2
 8024788:	60da      	str	r2, [r3, #12]
  }
}
 802478a:	bf00      	nop
 802478c:	46bd      	mov	sp, r7
 802478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024792:	4770      	bx	lr
 8024794:	40023c00 	.word	0x40023c00
 8024798:	20000af4 	.word	0x20000af4

0802479c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802479c:	b580      	push	{r7, lr}
 802479e:	b084      	sub	sp, #16
 80247a0:	af00      	add	r7, sp, #0
 80247a2:	6078      	str	r0, [r7, #4]
 80247a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80247a6:	2301      	movs	r3, #1
 80247a8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80247aa:	2300      	movs	r3, #0
 80247ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80247ae:	4b32      	ldr	r3, [pc, #200]	; (8024878 <HAL_FLASHEx_Erase+0xdc>)
 80247b0:	7e1b      	ldrb	r3, [r3, #24]
 80247b2:	2b01      	cmp	r3, #1
 80247b4:	d101      	bne.n	80247ba <HAL_FLASHEx_Erase+0x1e>
 80247b6:	2302      	movs	r3, #2
 80247b8:	e05a      	b.n	8024870 <HAL_FLASHEx_Erase+0xd4>
 80247ba:	4b2f      	ldr	r3, [pc, #188]	; (8024878 <HAL_FLASHEx_Erase+0xdc>)
 80247bc:	2201      	movs	r2, #1
 80247be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80247c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80247c4:	f7ff feaa 	bl	802451c <FLASH_WaitForLastOperation>
 80247c8:	4603      	mov	r3, r0
 80247ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80247cc:	7bfb      	ldrb	r3, [r7, #15]
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	d14a      	bne.n	8024868 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80247d2:	683b      	ldr	r3, [r7, #0]
 80247d4:	f04f 32ff 	mov.w	r2, #4294967295
 80247d8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80247da:	687b      	ldr	r3, [r7, #4]
 80247dc:	681b      	ldr	r3, [r3, #0]
 80247de:	2b01      	cmp	r3, #1
 80247e0:	d117      	bne.n	8024812 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80247e2:	687b      	ldr	r3, [r7, #4]
 80247e4:	691b      	ldr	r3, [r3, #16]
 80247e6:	b2da      	uxtb	r2, r3
 80247e8:	687b      	ldr	r3, [r7, #4]
 80247ea:	685b      	ldr	r3, [r3, #4]
 80247ec:	4619      	mov	r1, r3
 80247ee:	4610      	mov	r0, r2
 80247f0:	f000 f846 	bl	8024880 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80247f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80247f8:	f7ff fe90 	bl	802451c <FLASH_WaitForLastOperation>
 80247fc:	4603      	mov	r3, r0
 80247fe:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8024800:	4b1e      	ldr	r3, [pc, #120]	; (802487c <HAL_FLASHEx_Erase+0xe0>)
 8024802:	691b      	ldr	r3, [r3, #16]
 8024804:	4a1d      	ldr	r2, [pc, #116]	; (802487c <HAL_FLASHEx_Erase+0xe0>)
 8024806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802480a:	f023 0304 	bic.w	r3, r3, #4
 802480e:	6113      	str	r3, [r2, #16]
 8024810:	e028      	b.n	8024864 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8024812:	687b      	ldr	r3, [r7, #4]
 8024814:	689b      	ldr	r3, [r3, #8]
 8024816:	60bb      	str	r3, [r7, #8]
 8024818:	e01c      	b.n	8024854 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 802481a:	687b      	ldr	r3, [r7, #4]
 802481c:	691b      	ldr	r3, [r3, #16]
 802481e:	b2db      	uxtb	r3, r3
 8024820:	4619      	mov	r1, r3
 8024822:	68b8      	ldr	r0, [r7, #8]
 8024824:	f000 f866 	bl	80248f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8024828:	f24c 3050 	movw	r0, #50000	; 0xc350
 802482c:	f7ff fe76 	bl	802451c <FLASH_WaitForLastOperation>
 8024830:	4603      	mov	r3, r0
 8024832:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8024834:	4b11      	ldr	r3, [pc, #68]	; (802487c <HAL_FLASHEx_Erase+0xe0>)
 8024836:	691b      	ldr	r3, [r3, #16]
 8024838:	4a10      	ldr	r2, [pc, #64]	; (802487c <HAL_FLASHEx_Erase+0xe0>)
 802483a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802483e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8024840:	7bfb      	ldrb	r3, [r7, #15]
 8024842:	2b00      	cmp	r3, #0
 8024844:	d003      	beq.n	802484e <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8024846:	683b      	ldr	r3, [r7, #0]
 8024848:	68ba      	ldr	r2, [r7, #8]
 802484a:	601a      	str	r2, [r3, #0]
          break;
 802484c:	e00a      	b.n	8024864 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802484e:	68bb      	ldr	r3, [r7, #8]
 8024850:	3301      	adds	r3, #1
 8024852:	60bb      	str	r3, [r7, #8]
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	68da      	ldr	r2, [r3, #12]
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	689b      	ldr	r3, [r3, #8]
 802485c:	4413      	add	r3, r2
 802485e:	68ba      	ldr	r2, [r7, #8]
 8024860:	429a      	cmp	r2, r3
 8024862:	d3da      	bcc.n	802481a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8024864:	f000 f894 	bl	8024990 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8024868:	4b03      	ldr	r3, [pc, #12]	; (8024878 <HAL_FLASHEx_Erase+0xdc>)
 802486a:	2200      	movs	r2, #0
 802486c:	761a      	strb	r2, [r3, #24]

  return status;
 802486e:	7bfb      	ldrb	r3, [r7, #15]
}
 8024870:	4618      	mov	r0, r3
 8024872:	3710      	adds	r7, #16
 8024874:	46bd      	mov	sp, r7
 8024876:	bd80      	pop	{r7, pc}
 8024878:	20000af4 	.word	0x20000af4
 802487c:	40023c00 	.word	0x40023c00

08024880 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8024880:	b480      	push	{r7}
 8024882:	b083      	sub	sp, #12
 8024884:	af00      	add	r7, sp, #0
 8024886:	4603      	mov	r3, r0
 8024888:	6039      	str	r1, [r7, #0]
 802488a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802488c:	4b18      	ldr	r3, [pc, #96]	; (80248f0 <FLASH_MassErase+0x70>)
 802488e:	691b      	ldr	r3, [r3, #16]
 8024890:	4a17      	ldr	r2, [pc, #92]	; (80248f0 <FLASH_MassErase+0x70>)
 8024892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024896:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8024898:	683b      	ldr	r3, [r7, #0]
 802489a:	2b03      	cmp	r3, #3
 802489c:	d108      	bne.n	80248b0 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 802489e:	4b14      	ldr	r3, [pc, #80]	; (80248f0 <FLASH_MassErase+0x70>)
 80248a0:	691b      	ldr	r3, [r3, #16]
 80248a2:	4a13      	ldr	r2, [pc, #76]	; (80248f0 <FLASH_MassErase+0x70>)
 80248a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80248a8:	f043 0304 	orr.w	r3, r3, #4
 80248ac:	6113      	str	r3, [r2, #16]
 80248ae:	e00f      	b.n	80248d0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80248b0:	683b      	ldr	r3, [r7, #0]
 80248b2:	2b01      	cmp	r3, #1
 80248b4:	d106      	bne.n	80248c4 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80248b6:	4b0e      	ldr	r3, [pc, #56]	; (80248f0 <FLASH_MassErase+0x70>)
 80248b8:	691b      	ldr	r3, [r3, #16]
 80248ba:	4a0d      	ldr	r2, [pc, #52]	; (80248f0 <FLASH_MassErase+0x70>)
 80248bc:	f043 0304 	orr.w	r3, r3, #4
 80248c0:	6113      	str	r3, [r2, #16]
 80248c2:	e005      	b.n	80248d0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80248c4:	4b0a      	ldr	r3, [pc, #40]	; (80248f0 <FLASH_MassErase+0x70>)
 80248c6:	691b      	ldr	r3, [r3, #16]
 80248c8:	4a09      	ldr	r2, [pc, #36]	; (80248f0 <FLASH_MassErase+0x70>)
 80248ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80248ce:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80248d0:	4b07      	ldr	r3, [pc, #28]	; (80248f0 <FLASH_MassErase+0x70>)
 80248d2:	691a      	ldr	r2, [r3, #16]
 80248d4:	79fb      	ldrb	r3, [r7, #7]
 80248d6:	021b      	lsls	r3, r3, #8
 80248d8:	4313      	orrs	r3, r2
 80248da:	4a05      	ldr	r2, [pc, #20]	; (80248f0 <FLASH_MassErase+0x70>)
 80248dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80248e0:	6113      	str	r3, [r2, #16]
}
 80248e2:	bf00      	nop
 80248e4:	370c      	adds	r7, #12
 80248e6:	46bd      	mov	sp, r7
 80248e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248ec:	4770      	bx	lr
 80248ee:	bf00      	nop
 80248f0:	40023c00 	.word	0x40023c00

080248f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80248f4:	b480      	push	{r7}
 80248f6:	b085      	sub	sp, #20
 80248f8:	af00      	add	r7, sp, #0
 80248fa:	6078      	str	r0, [r7, #4]
 80248fc:	460b      	mov	r3, r1
 80248fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8024900:	2300      	movs	r3, #0
 8024902:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8024904:	78fb      	ldrb	r3, [r7, #3]
 8024906:	2b00      	cmp	r3, #0
 8024908:	d102      	bne.n	8024910 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 802490a:	2300      	movs	r3, #0
 802490c:	60fb      	str	r3, [r7, #12]
 802490e:	e010      	b.n	8024932 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8024910:	78fb      	ldrb	r3, [r7, #3]
 8024912:	2b01      	cmp	r3, #1
 8024914:	d103      	bne.n	802491e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8024916:	f44f 7380 	mov.w	r3, #256	; 0x100
 802491a:	60fb      	str	r3, [r7, #12]
 802491c:	e009      	b.n	8024932 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 802491e:	78fb      	ldrb	r3, [r7, #3]
 8024920:	2b02      	cmp	r3, #2
 8024922:	d103      	bne.n	802492c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8024924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8024928:	60fb      	str	r3, [r7, #12]
 802492a:	e002      	b.n	8024932 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 802492c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8024930:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8024932:	687b      	ldr	r3, [r7, #4]
 8024934:	2b0b      	cmp	r3, #11
 8024936:	d902      	bls.n	802493e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	3304      	adds	r3, #4
 802493c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802493e:	4b13      	ldr	r3, [pc, #76]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024940:	691b      	ldr	r3, [r3, #16]
 8024942:	4a12      	ldr	r2, [pc, #72]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024948:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802494a:	4b10      	ldr	r3, [pc, #64]	; (802498c <FLASH_Erase_Sector+0x98>)
 802494c:	691a      	ldr	r2, [r3, #16]
 802494e:	490f      	ldr	r1, [pc, #60]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	4313      	orrs	r3, r2
 8024954:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8024956:	4b0d      	ldr	r3, [pc, #52]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024958:	691b      	ldr	r3, [r3, #16]
 802495a:	4a0c      	ldr	r2, [pc, #48]	; (802498c <FLASH_Erase_Sector+0x98>)
 802495c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8024960:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8024962:	4b0a      	ldr	r3, [pc, #40]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024964:	691a      	ldr	r2, [r3, #16]
 8024966:	687b      	ldr	r3, [r7, #4]
 8024968:	00db      	lsls	r3, r3, #3
 802496a:	4313      	orrs	r3, r2
 802496c:	4a07      	ldr	r2, [pc, #28]	; (802498c <FLASH_Erase_Sector+0x98>)
 802496e:	f043 0302 	orr.w	r3, r3, #2
 8024972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8024974:	4b05      	ldr	r3, [pc, #20]	; (802498c <FLASH_Erase_Sector+0x98>)
 8024976:	691b      	ldr	r3, [r3, #16]
 8024978:	4a04      	ldr	r2, [pc, #16]	; (802498c <FLASH_Erase_Sector+0x98>)
 802497a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802497e:	6113      	str	r3, [r2, #16]
}
 8024980:	bf00      	nop
 8024982:	3714      	adds	r7, #20
 8024984:	46bd      	mov	sp, r7
 8024986:	f85d 7b04 	ldr.w	r7, [sp], #4
 802498a:	4770      	bx	lr
 802498c:	40023c00 	.word	0x40023c00

08024990 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8024990:	b480      	push	{r7}
 8024992:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8024994:	4b20      	ldr	r3, [pc, #128]	; (8024a18 <FLASH_FlushCaches+0x88>)
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802499c:	2b00      	cmp	r3, #0
 802499e:	d017      	beq.n	80249d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80249a0:	4b1d      	ldr	r3, [pc, #116]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249a2:	681b      	ldr	r3, [r3, #0]
 80249a4:	4a1c      	ldr	r2, [pc, #112]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80249aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80249ac:	4b1a      	ldr	r3, [pc, #104]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249ae:	681b      	ldr	r3, [r3, #0]
 80249b0:	4a19      	ldr	r2, [pc, #100]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80249b6:	6013      	str	r3, [r2, #0]
 80249b8:	4b17      	ldr	r3, [pc, #92]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249ba:	681b      	ldr	r3, [r3, #0]
 80249bc:	4a16      	ldr	r2, [pc, #88]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80249c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80249c4:	4b14      	ldr	r3, [pc, #80]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249c6:	681b      	ldr	r3, [r3, #0]
 80249c8:	4a13      	ldr	r2, [pc, #76]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80249ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80249d0:	4b11      	ldr	r3, [pc, #68]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249d2:	681b      	ldr	r3, [r3, #0]
 80249d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80249d8:	2b00      	cmp	r3, #0
 80249da:	d017      	beq.n	8024a0c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80249dc:	4b0e      	ldr	r3, [pc, #56]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249de:	681b      	ldr	r3, [r3, #0]
 80249e0:	4a0d      	ldr	r2, [pc, #52]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80249e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80249e8:	4b0b      	ldr	r3, [pc, #44]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249ea:	681b      	ldr	r3, [r3, #0]
 80249ec:	4a0a      	ldr	r2, [pc, #40]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80249f2:	6013      	str	r3, [r2, #0]
 80249f4:	4b08      	ldr	r3, [pc, #32]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249f6:	681b      	ldr	r3, [r3, #0]
 80249f8:	4a07      	ldr	r2, [pc, #28]	; (8024a18 <FLASH_FlushCaches+0x88>)
 80249fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80249fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8024a00:	4b05      	ldr	r3, [pc, #20]	; (8024a18 <FLASH_FlushCaches+0x88>)
 8024a02:	681b      	ldr	r3, [r3, #0]
 8024a04:	4a04      	ldr	r2, [pc, #16]	; (8024a18 <FLASH_FlushCaches+0x88>)
 8024a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8024a0a:	6013      	str	r3, [r2, #0]
  }
}
 8024a0c:	bf00      	nop
 8024a0e:	46bd      	mov	sp, r7
 8024a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a14:	4770      	bx	lr
 8024a16:	bf00      	nop
 8024a18:	40023c00 	.word	0x40023c00

08024a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8024a1c:	b480      	push	{r7}
 8024a1e:	b089      	sub	sp, #36	; 0x24
 8024a20:	af00      	add	r7, sp, #0
 8024a22:	6078      	str	r0, [r7, #4]
 8024a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024a26:	2300      	movs	r3, #0
 8024a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8024a2a:	2300      	movs	r3, #0
 8024a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8024a2e:	2300      	movs	r3, #0
 8024a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024a32:	2300      	movs	r3, #0
 8024a34:	61fb      	str	r3, [r7, #28]
 8024a36:	e177      	b.n	8024d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024a38:	2201      	movs	r2, #1
 8024a3a:	69fb      	ldr	r3, [r7, #28]
 8024a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8024a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8024a42:	683b      	ldr	r3, [r7, #0]
 8024a44:	681b      	ldr	r3, [r3, #0]
 8024a46:	697a      	ldr	r2, [r7, #20]
 8024a48:	4013      	ands	r3, r2
 8024a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8024a4c:	693a      	ldr	r2, [r7, #16]
 8024a4e:	697b      	ldr	r3, [r7, #20]
 8024a50:	429a      	cmp	r2, r3
 8024a52:	f040 8166 	bne.w	8024d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024a56:	683b      	ldr	r3, [r7, #0]
 8024a58:	685b      	ldr	r3, [r3, #4]
 8024a5a:	f003 0303 	and.w	r3, r3, #3
 8024a5e:	2b01      	cmp	r3, #1
 8024a60:	d005      	beq.n	8024a6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024a62:	683b      	ldr	r3, [r7, #0]
 8024a64:	685b      	ldr	r3, [r3, #4]
 8024a66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8024a6a:	2b02      	cmp	r3, #2
 8024a6c:	d130      	bne.n	8024ad0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8024a6e:	687b      	ldr	r3, [r7, #4]
 8024a70:	689b      	ldr	r3, [r3, #8]
 8024a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024a74:	69fb      	ldr	r3, [r7, #28]
 8024a76:	005b      	lsls	r3, r3, #1
 8024a78:	2203      	movs	r2, #3
 8024a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8024a7e:	43db      	mvns	r3, r3
 8024a80:	69ba      	ldr	r2, [r7, #24]
 8024a82:	4013      	ands	r3, r2
 8024a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8024a86:	683b      	ldr	r3, [r7, #0]
 8024a88:	68da      	ldr	r2, [r3, #12]
 8024a8a:	69fb      	ldr	r3, [r7, #28]
 8024a8c:	005b      	lsls	r3, r3, #1
 8024a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8024a92:	69ba      	ldr	r2, [r7, #24]
 8024a94:	4313      	orrs	r3, r2
 8024a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	69ba      	ldr	r2, [r7, #24]
 8024a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8024a9e:	687b      	ldr	r3, [r7, #4]
 8024aa0:	685b      	ldr	r3, [r3, #4]
 8024aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024aa4:	2201      	movs	r2, #1
 8024aa6:	69fb      	ldr	r3, [r7, #28]
 8024aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8024aac:	43db      	mvns	r3, r3
 8024aae:	69ba      	ldr	r2, [r7, #24]
 8024ab0:	4013      	ands	r3, r2
 8024ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8024ab4:	683b      	ldr	r3, [r7, #0]
 8024ab6:	685b      	ldr	r3, [r3, #4]
 8024ab8:	091b      	lsrs	r3, r3, #4
 8024aba:	f003 0201 	and.w	r2, r3, #1
 8024abe:	69fb      	ldr	r3, [r7, #28]
 8024ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8024ac4:	69ba      	ldr	r2, [r7, #24]
 8024ac6:	4313      	orrs	r3, r2
 8024ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8024aca:	687b      	ldr	r3, [r7, #4]
 8024acc:	69ba      	ldr	r2, [r7, #24]
 8024ace:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8024ad0:	683b      	ldr	r3, [r7, #0]
 8024ad2:	685b      	ldr	r3, [r3, #4]
 8024ad4:	f003 0303 	and.w	r3, r3, #3
 8024ad8:	2b03      	cmp	r3, #3
 8024ada:	d017      	beq.n	8024b0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8024adc:	687b      	ldr	r3, [r7, #4]
 8024ade:	68db      	ldr	r3, [r3, #12]
 8024ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024ae2:	69fb      	ldr	r3, [r7, #28]
 8024ae4:	005b      	lsls	r3, r3, #1
 8024ae6:	2203      	movs	r2, #3
 8024ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8024aec:	43db      	mvns	r3, r3
 8024aee:	69ba      	ldr	r2, [r7, #24]
 8024af0:	4013      	ands	r3, r2
 8024af2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8024af4:	683b      	ldr	r3, [r7, #0]
 8024af6:	689a      	ldr	r2, [r3, #8]
 8024af8:	69fb      	ldr	r3, [r7, #28]
 8024afa:	005b      	lsls	r3, r3, #1
 8024afc:	fa02 f303 	lsl.w	r3, r2, r3
 8024b00:	69ba      	ldr	r2, [r7, #24]
 8024b02:	4313      	orrs	r3, r2
 8024b04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	69ba      	ldr	r2, [r7, #24]
 8024b0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8024b0c:	683b      	ldr	r3, [r7, #0]
 8024b0e:	685b      	ldr	r3, [r3, #4]
 8024b10:	f003 0303 	and.w	r3, r3, #3
 8024b14:	2b02      	cmp	r3, #2
 8024b16:	d123      	bne.n	8024b60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8024b18:	69fb      	ldr	r3, [r7, #28]
 8024b1a:	08da      	lsrs	r2, r3, #3
 8024b1c:	687b      	ldr	r3, [r7, #4]
 8024b1e:	3208      	adds	r2, #8
 8024b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024b26:	69fb      	ldr	r3, [r7, #28]
 8024b28:	f003 0307 	and.w	r3, r3, #7
 8024b2c:	009b      	lsls	r3, r3, #2
 8024b2e:	220f      	movs	r2, #15
 8024b30:	fa02 f303 	lsl.w	r3, r2, r3
 8024b34:	43db      	mvns	r3, r3
 8024b36:	69ba      	ldr	r2, [r7, #24]
 8024b38:	4013      	ands	r3, r2
 8024b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8024b3c:	683b      	ldr	r3, [r7, #0]
 8024b3e:	691a      	ldr	r2, [r3, #16]
 8024b40:	69fb      	ldr	r3, [r7, #28]
 8024b42:	f003 0307 	and.w	r3, r3, #7
 8024b46:	009b      	lsls	r3, r3, #2
 8024b48:	fa02 f303 	lsl.w	r3, r2, r3
 8024b4c:	69ba      	ldr	r2, [r7, #24]
 8024b4e:	4313      	orrs	r3, r2
 8024b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8024b52:	69fb      	ldr	r3, [r7, #28]
 8024b54:	08da      	lsrs	r2, r3, #3
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	3208      	adds	r2, #8
 8024b5a:	69b9      	ldr	r1, [r7, #24]
 8024b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	681b      	ldr	r3, [r3, #0]
 8024b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024b66:	69fb      	ldr	r3, [r7, #28]
 8024b68:	005b      	lsls	r3, r3, #1
 8024b6a:	2203      	movs	r2, #3
 8024b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8024b70:	43db      	mvns	r3, r3
 8024b72:	69ba      	ldr	r2, [r7, #24]
 8024b74:	4013      	ands	r3, r2
 8024b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8024b78:	683b      	ldr	r3, [r7, #0]
 8024b7a:	685b      	ldr	r3, [r3, #4]
 8024b7c:	f003 0203 	and.w	r2, r3, #3
 8024b80:	69fb      	ldr	r3, [r7, #28]
 8024b82:	005b      	lsls	r3, r3, #1
 8024b84:	fa02 f303 	lsl.w	r3, r2, r3
 8024b88:	69ba      	ldr	r2, [r7, #24]
 8024b8a:	4313      	orrs	r3, r2
 8024b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8024b8e:	687b      	ldr	r3, [r7, #4]
 8024b90:	69ba      	ldr	r2, [r7, #24]
 8024b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8024b94:	683b      	ldr	r3, [r7, #0]
 8024b96:	685b      	ldr	r3, [r3, #4]
 8024b98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8024b9c:	2b00      	cmp	r3, #0
 8024b9e:	f000 80c0 	beq.w	8024d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8024ba2:	2300      	movs	r3, #0
 8024ba4:	60fb      	str	r3, [r7, #12]
 8024ba6:	4b66      	ldr	r3, [pc, #408]	; (8024d40 <HAL_GPIO_Init+0x324>)
 8024ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024baa:	4a65      	ldr	r2, [pc, #404]	; (8024d40 <HAL_GPIO_Init+0x324>)
 8024bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8024bb2:	4b63      	ldr	r3, [pc, #396]	; (8024d40 <HAL_GPIO_Init+0x324>)
 8024bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024bba:	60fb      	str	r3, [r7, #12]
 8024bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024bbe:	4a61      	ldr	r2, [pc, #388]	; (8024d44 <HAL_GPIO_Init+0x328>)
 8024bc0:	69fb      	ldr	r3, [r7, #28]
 8024bc2:	089b      	lsrs	r3, r3, #2
 8024bc4:	3302      	adds	r3, #2
 8024bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024bcc:	69fb      	ldr	r3, [r7, #28]
 8024bce:	f003 0303 	and.w	r3, r3, #3
 8024bd2:	009b      	lsls	r3, r3, #2
 8024bd4:	220f      	movs	r2, #15
 8024bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8024bda:	43db      	mvns	r3, r3
 8024bdc:	69ba      	ldr	r2, [r7, #24]
 8024bde:	4013      	ands	r3, r2
 8024be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	4a58      	ldr	r2, [pc, #352]	; (8024d48 <HAL_GPIO_Init+0x32c>)
 8024be6:	4293      	cmp	r3, r2
 8024be8:	d037      	beq.n	8024c5a <HAL_GPIO_Init+0x23e>
 8024bea:	687b      	ldr	r3, [r7, #4]
 8024bec:	4a57      	ldr	r2, [pc, #348]	; (8024d4c <HAL_GPIO_Init+0x330>)
 8024bee:	4293      	cmp	r3, r2
 8024bf0:	d031      	beq.n	8024c56 <HAL_GPIO_Init+0x23a>
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	4a56      	ldr	r2, [pc, #344]	; (8024d50 <HAL_GPIO_Init+0x334>)
 8024bf6:	4293      	cmp	r3, r2
 8024bf8:	d02b      	beq.n	8024c52 <HAL_GPIO_Init+0x236>
 8024bfa:	687b      	ldr	r3, [r7, #4]
 8024bfc:	4a55      	ldr	r2, [pc, #340]	; (8024d54 <HAL_GPIO_Init+0x338>)
 8024bfe:	4293      	cmp	r3, r2
 8024c00:	d025      	beq.n	8024c4e <HAL_GPIO_Init+0x232>
 8024c02:	687b      	ldr	r3, [r7, #4]
 8024c04:	4a54      	ldr	r2, [pc, #336]	; (8024d58 <HAL_GPIO_Init+0x33c>)
 8024c06:	4293      	cmp	r3, r2
 8024c08:	d01f      	beq.n	8024c4a <HAL_GPIO_Init+0x22e>
 8024c0a:	687b      	ldr	r3, [r7, #4]
 8024c0c:	4a53      	ldr	r2, [pc, #332]	; (8024d5c <HAL_GPIO_Init+0x340>)
 8024c0e:	4293      	cmp	r3, r2
 8024c10:	d019      	beq.n	8024c46 <HAL_GPIO_Init+0x22a>
 8024c12:	687b      	ldr	r3, [r7, #4]
 8024c14:	4a52      	ldr	r2, [pc, #328]	; (8024d60 <HAL_GPIO_Init+0x344>)
 8024c16:	4293      	cmp	r3, r2
 8024c18:	d013      	beq.n	8024c42 <HAL_GPIO_Init+0x226>
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	4a51      	ldr	r2, [pc, #324]	; (8024d64 <HAL_GPIO_Init+0x348>)
 8024c1e:	4293      	cmp	r3, r2
 8024c20:	d00d      	beq.n	8024c3e <HAL_GPIO_Init+0x222>
 8024c22:	687b      	ldr	r3, [r7, #4]
 8024c24:	4a50      	ldr	r2, [pc, #320]	; (8024d68 <HAL_GPIO_Init+0x34c>)
 8024c26:	4293      	cmp	r3, r2
 8024c28:	d007      	beq.n	8024c3a <HAL_GPIO_Init+0x21e>
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	4a4f      	ldr	r2, [pc, #316]	; (8024d6c <HAL_GPIO_Init+0x350>)
 8024c2e:	4293      	cmp	r3, r2
 8024c30:	d101      	bne.n	8024c36 <HAL_GPIO_Init+0x21a>
 8024c32:	2309      	movs	r3, #9
 8024c34:	e012      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c36:	230a      	movs	r3, #10
 8024c38:	e010      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c3a:	2308      	movs	r3, #8
 8024c3c:	e00e      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c3e:	2307      	movs	r3, #7
 8024c40:	e00c      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c42:	2306      	movs	r3, #6
 8024c44:	e00a      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c46:	2305      	movs	r3, #5
 8024c48:	e008      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c4a:	2304      	movs	r3, #4
 8024c4c:	e006      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c4e:	2303      	movs	r3, #3
 8024c50:	e004      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c52:	2302      	movs	r3, #2
 8024c54:	e002      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c56:	2301      	movs	r3, #1
 8024c58:	e000      	b.n	8024c5c <HAL_GPIO_Init+0x240>
 8024c5a:	2300      	movs	r3, #0
 8024c5c:	69fa      	ldr	r2, [r7, #28]
 8024c5e:	f002 0203 	and.w	r2, r2, #3
 8024c62:	0092      	lsls	r2, r2, #2
 8024c64:	4093      	lsls	r3, r2
 8024c66:	69ba      	ldr	r2, [r7, #24]
 8024c68:	4313      	orrs	r3, r2
 8024c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8024c6c:	4935      	ldr	r1, [pc, #212]	; (8024d44 <HAL_GPIO_Init+0x328>)
 8024c6e:	69fb      	ldr	r3, [r7, #28]
 8024c70:	089b      	lsrs	r3, r3, #2
 8024c72:	3302      	adds	r3, #2
 8024c74:	69ba      	ldr	r2, [r7, #24]
 8024c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8024c7a:	4b3d      	ldr	r3, [pc, #244]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024c7c:	689b      	ldr	r3, [r3, #8]
 8024c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024c80:	693b      	ldr	r3, [r7, #16]
 8024c82:	43db      	mvns	r3, r3
 8024c84:	69ba      	ldr	r2, [r7, #24]
 8024c86:	4013      	ands	r3, r2
 8024c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8024c8a:	683b      	ldr	r3, [r7, #0]
 8024c8c:	685b      	ldr	r3, [r3, #4]
 8024c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024c92:	2b00      	cmp	r3, #0
 8024c94:	d003      	beq.n	8024c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8024c96:	69ba      	ldr	r2, [r7, #24]
 8024c98:	693b      	ldr	r3, [r7, #16]
 8024c9a:	4313      	orrs	r3, r2
 8024c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024c9e:	4a34      	ldr	r2, [pc, #208]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024ca0:	69bb      	ldr	r3, [r7, #24]
 8024ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024ca4:	4b32      	ldr	r3, [pc, #200]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024ca6:	68db      	ldr	r3, [r3, #12]
 8024ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024caa:	693b      	ldr	r3, [r7, #16]
 8024cac:	43db      	mvns	r3, r3
 8024cae:	69ba      	ldr	r2, [r7, #24]
 8024cb0:	4013      	ands	r3, r2
 8024cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8024cb4:	683b      	ldr	r3, [r7, #0]
 8024cb6:	685b      	ldr	r3, [r3, #4]
 8024cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d003      	beq.n	8024cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8024cc0:	69ba      	ldr	r2, [r7, #24]
 8024cc2:	693b      	ldr	r3, [r7, #16]
 8024cc4:	4313      	orrs	r3, r2
 8024cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8024cc8:	4a29      	ldr	r2, [pc, #164]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024cca:	69bb      	ldr	r3, [r7, #24]
 8024ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8024cce:	4b28      	ldr	r3, [pc, #160]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024cd0:	685b      	ldr	r3, [r3, #4]
 8024cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024cd4:	693b      	ldr	r3, [r7, #16]
 8024cd6:	43db      	mvns	r3, r3
 8024cd8:	69ba      	ldr	r2, [r7, #24]
 8024cda:	4013      	ands	r3, r2
 8024cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8024cde:	683b      	ldr	r3, [r7, #0]
 8024ce0:	685b      	ldr	r3, [r3, #4]
 8024ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	d003      	beq.n	8024cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8024cea:	69ba      	ldr	r2, [r7, #24]
 8024cec:	693b      	ldr	r3, [r7, #16]
 8024cee:	4313      	orrs	r3, r2
 8024cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024cf2:	4a1f      	ldr	r2, [pc, #124]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024cf4:	69bb      	ldr	r3, [r7, #24]
 8024cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8024cf8:	4b1d      	ldr	r3, [pc, #116]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024cfe:	693b      	ldr	r3, [r7, #16]
 8024d00:	43db      	mvns	r3, r3
 8024d02:	69ba      	ldr	r2, [r7, #24]
 8024d04:	4013      	ands	r3, r2
 8024d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8024d08:	683b      	ldr	r3, [r7, #0]
 8024d0a:	685b      	ldr	r3, [r3, #4]
 8024d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8024d10:	2b00      	cmp	r3, #0
 8024d12:	d003      	beq.n	8024d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8024d14:	69ba      	ldr	r2, [r7, #24]
 8024d16:	693b      	ldr	r3, [r7, #16]
 8024d18:	4313      	orrs	r3, r2
 8024d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8024d1c:	4a14      	ldr	r2, [pc, #80]	; (8024d70 <HAL_GPIO_Init+0x354>)
 8024d1e:	69bb      	ldr	r3, [r7, #24]
 8024d20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024d22:	69fb      	ldr	r3, [r7, #28]
 8024d24:	3301      	adds	r3, #1
 8024d26:	61fb      	str	r3, [r7, #28]
 8024d28:	69fb      	ldr	r3, [r7, #28]
 8024d2a:	2b0f      	cmp	r3, #15
 8024d2c:	f67f ae84 	bls.w	8024a38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024d30:	bf00      	nop
 8024d32:	bf00      	nop
 8024d34:	3724      	adds	r7, #36	; 0x24
 8024d36:	46bd      	mov	sp, r7
 8024d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d3c:	4770      	bx	lr
 8024d3e:	bf00      	nop
 8024d40:	40023800 	.word	0x40023800
 8024d44:	40013800 	.word	0x40013800
 8024d48:	40020000 	.word	0x40020000
 8024d4c:	40020400 	.word	0x40020400
 8024d50:	40020800 	.word	0x40020800
 8024d54:	40020c00 	.word	0x40020c00
 8024d58:	40021000 	.word	0x40021000
 8024d5c:	40021400 	.word	0x40021400
 8024d60:	40021800 	.word	0x40021800
 8024d64:	40021c00 	.word	0x40021c00
 8024d68:	40022000 	.word	0x40022000
 8024d6c:	40022400 	.word	0x40022400
 8024d70:	40013c00 	.word	0x40013c00

08024d74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8024d74:	b480      	push	{r7}
 8024d76:	b087      	sub	sp, #28
 8024d78:	af00      	add	r7, sp, #0
 8024d7a:	6078      	str	r0, [r7, #4]
 8024d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8024d7e:	2300      	movs	r3, #0
 8024d80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8024d82:	2300      	movs	r3, #0
 8024d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8024d86:	2300      	movs	r3, #0
 8024d88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024d8a:	2300      	movs	r3, #0
 8024d8c:	617b      	str	r3, [r7, #20]
 8024d8e:	e0d9      	b.n	8024f44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8024d90:	2201      	movs	r2, #1
 8024d92:	697b      	ldr	r3, [r7, #20]
 8024d94:	fa02 f303 	lsl.w	r3, r2, r3
 8024d98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8024d9a:	683a      	ldr	r2, [r7, #0]
 8024d9c:	693b      	ldr	r3, [r7, #16]
 8024d9e:	4013      	ands	r3, r2
 8024da0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8024da2:	68fa      	ldr	r2, [r7, #12]
 8024da4:	693b      	ldr	r3, [r7, #16]
 8024da6:	429a      	cmp	r2, r3
 8024da8:	f040 80c9 	bne.w	8024f3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8024dac:	4a6b      	ldr	r2, [pc, #428]	; (8024f5c <HAL_GPIO_DeInit+0x1e8>)
 8024dae:	697b      	ldr	r3, [r7, #20]
 8024db0:	089b      	lsrs	r3, r3, #2
 8024db2:	3302      	adds	r3, #2
 8024db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024db8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8024dba:	697b      	ldr	r3, [r7, #20]
 8024dbc:	f003 0303 	and.w	r3, r3, #3
 8024dc0:	009b      	lsls	r3, r3, #2
 8024dc2:	220f      	movs	r2, #15
 8024dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8024dc8:	68ba      	ldr	r2, [r7, #8]
 8024dca:	4013      	ands	r3, r2
 8024dcc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8024dce:	687b      	ldr	r3, [r7, #4]
 8024dd0:	4a63      	ldr	r2, [pc, #396]	; (8024f60 <HAL_GPIO_DeInit+0x1ec>)
 8024dd2:	4293      	cmp	r3, r2
 8024dd4:	d037      	beq.n	8024e46 <HAL_GPIO_DeInit+0xd2>
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	4a62      	ldr	r2, [pc, #392]	; (8024f64 <HAL_GPIO_DeInit+0x1f0>)
 8024dda:	4293      	cmp	r3, r2
 8024ddc:	d031      	beq.n	8024e42 <HAL_GPIO_DeInit+0xce>
 8024dde:	687b      	ldr	r3, [r7, #4]
 8024de0:	4a61      	ldr	r2, [pc, #388]	; (8024f68 <HAL_GPIO_DeInit+0x1f4>)
 8024de2:	4293      	cmp	r3, r2
 8024de4:	d02b      	beq.n	8024e3e <HAL_GPIO_DeInit+0xca>
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	4a60      	ldr	r2, [pc, #384]	; (8024f6c <HAL_GPIO_DeInit+0x1f8>)
 8024dea:	4293      	cmp	r3, r2
 8024dec:	d025      	beq.n	8024e3a <HAL_GPIO_DeInit+0xc6>
 8024dee:	687b      	ldr	r3, [r7, #4]
 8024df0:	4a5f      	ldr	r2, [pc, #380]	; (8024f70 <HAL_GPIO_DeInit+0x1fc>)
 8024df2:	4293      	cmp	r3, r2
 8024df4:	d01f      	beq.n	8024e36 <HAL_GPIO_DeInit+0xc2>
 8024df6:	687b      	ldr	r3, [r7, #4]
 8024df8:	4a5e      	ldr	r2, [pc, #376]	; (8024f74 <HAL_GPIO_DeInit+0x200>)
 8024dfa:	4293      	cmp	r3, r2
 8024dfc:	d019      	beq.n	8024e32 <HAL_GPIO_DeInit+0xbe>
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	4a5d      	ldr	r2, [pc, #372]	; (8024f78 <HAL_GPIO_DeInit+0x204>)
 8024e02:	4293      	cmp	r3, r2
 8024e04:	d013      	beq.n	8024e2e <HAL_GPIO_DeInit+0xba>
 8024e06:	687b      	ldr	r3, [r7, #4]
 8024e08:	4a5c      	ldr	r2, [pc, #368]	; (8024f7c <HAL_GPIO_DeInit+0x208>)
 8024e0a:	4293      	cmp	r3, r2
 8024e0c:	d00d      	beq.n	8024e2a <HAL_GPIO_DeInit+0xb6>
 8024e0e:	687b      	ldr	r3, [r7, #4]
 8024e10:	4a5b      	ldr	r2, [pc, #364]	; (8024f80 <HAL_GPIO_DeInit+0x20c>)
 8024e12:	4293      	cmp	r3, r2
 8024e14:	d007      	beq.n	8024e26 <HAL_GPIO_DeInit+0xb2>
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	4a5a      	ldr	r2, [pc, #360]	; (8024f84 <HAL_GPIO_DeInit+0x210>)
 8024e1a:	4293      	cmp	r3, r2
 8024e1c:	d101      	bne.n	8024e22 <HAL_GPIO_DeInit+0xae>
 8024e1e:	2309      	movs	r3, #9
 8024e20:	e012      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e22:	230a      	movs	r3, #10
 8024e24:	e010      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e26:	2308      	movs	r3, #8
 8024e28:	e00e      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e2a:	2307      	movs	r3, #7
 8024e2c:	e00c      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e2e:	2306      	movs	r3, #6
 8024e30:	e00a      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e32:	2305      	movs	r3, #5
 8024e34:	e008      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e36:	2304      	movs	r3, #4
 8024e38:	e006      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e3a:	2303      	movs	r3, #3
 8024e3c:	e004      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e3e:	2302      	movs	r3, #2
 8024e40:	e002      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e42:	2301      	movs	r3, #1
 8024e44:	e000      	b.n	8024e48 <HAL_GPIO_DeInit+0xd4>
 8024e46:	2300      	movs	r3, #0
 8024e48:	697a      	ldr	r2, [r7, #20]
 8024e4a:	f002 0203 	and.w	r2, r2, #3
 8024e4e:	0092      	lsls	r2, r2, #2
 8024e50:	4093      	lsls	r3, r2
 8024e52:	68ba      	ldr	r2, [r7, #8]
 8024e54:	429a      	cmp	r2, r3
 8024e56:	d132      	bne.n	8024ebe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8024e58:	4b4b      	ldr	r3, [pc, #300]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e5a:	681a      	ldr	r2, [r3, #0]
 8024e5c:	68fb      	ldr	r3, [r7, #12]
 8024e5e:	43db      	mvns	r3, r3
 8024e60:	4949      	ldr	r1, [pc, #292]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e62:	4013      	ands	r3, r2
 8024e64:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8024e66:	4b48      	ldr	r3, [pc, #288]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e68:	685a      	ldr	r2, [r3, #4]
 8024e6a:	68fb      	ldr	r3, [r7, #12]
 8024e6c:	43db      	mvns	r3, r3
 8024e6e:	4946      	ldr	r1, [pc, #280]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e70:	4013      	ands	r3, r2
 8024e72:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8024e74:	4b44      	ldr	r3, [pc, #272]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e76:	68da      	ldr	r2, [r3, #12]
 8024e78:	68fb      	ldr	r3, [r7, #12]
 8024e7a:	43db      	mvns	r3, r3
 8024e7c:	4942      	ldr	r1, [pc, #264]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e7e:	4013      	ands	r3, r2
 8024e80:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8024e82:	4b41      	ldr	r3, [pc, #260]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e84:	689a      	ldr	r2, [r3, #8]
 8024e86:	68fb      	ldr	r3, [r7, #12]
 8024e88:	43db      	mvns	r3, r3
 8024e8a:	493f      	ldr	r1, [pc, #252]	; (8024f88 <HAL_GPIO_DeInit+0x214>)
 8024e8c:	4013      	ands	r3, r2
 8024e8e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8024e90:	697b      	ldr	r3, [r7, #20]
 8024e92:	f003 0303 	and.w	r3, r3, #3
 8024e96:	009b      	lsls	r3, r3, #2
 8024e98:	220f      	movs	r2, #15
 8024e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8024e9e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8024ea0:	4a2e      	ldr	r2, [pc, #184]	; (8024f5c <HAL_GPIO_DeInit+0x1e8>)
 8024ea2:	697b      	ldr	r3, [r7, #20]
 8024ea4:	089b      	lsrs	r3, r3, #2
 8024ea6:	3302      	adds	r3, #2
 8024ea8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8024eac:	68bb      	ldr	r3, [r7, #8]
 8024eae:	43da      	mvns	r2, r3
 8024eb0:	482a      	ldr	r0, [pc, #168]	; (8024f5c <HAL_GPIO_DeInit+0x1e8>)
 8024eb2:	697b      	ldr	r3, [r7, #20]
 8024eb4:	089b      	lsrs	r3, r3, #2
 8024eb6:	400a      	ands	r2, r1
 8024eb8:	3302      	adds	r3, #2
 8024eba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	681a      	ldr	r2, [r3, #0]
 8024ec2:	697b      	ldr	r3, [r7, #20]
 8024ec4:	005b      	lsls	r3, r3, #1
 8024ec6:	2103      	movs	r1, #3
 8024ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8024ecc:	43db      	mvns	r3, r3
 8024ece:	401a      	ands	r2, r3
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8024ed4:	697b      	ldr	r3, [r7, #20]
 8024ed6:	08da      	lsrs	r2, r3, #3
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	3208      	adds	r2, #8
 8024edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024ee0:	697b      	ldr	r3, [r7, #20]
 8024ee2:	f003 0307 	and.w	r3, r3, #7
 8024ee6:	009b      	lsls	r3, r3, #2
 8024ee8:	220f      	movs	r2, #15
 8024eea:	fa02 f303 	lsl.w	r3, r2, r3
 8024eee:	43db      	mvns	r3, r3
 8024ef0:	697a      	ldr	r2, [r7, #20]
 8024ef2:	08d2      	lsrs	r2, r2, #3
 8024ef4:	4019      	ands	r1, r3
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	3208      	adds	r2, #8
 8024efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	68da      	ldr	r2, [r3, #12]
 8024f02:	697b      	ldr	r3, [r7, #20]
 8024f04:	005b      	lsls	r3, r3, #1
 8024f06:	2103      	movs	r1, #3
 8024f08:	fa01 f303 	lsl.w	r3, r1, r3
 8024f0c:	43db      	mvns	r3, r3
 8024f0e:	401a      	ands	r2, r3
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	685a      	ldr	r2, [r3, #4]
 8024f18:	2101      	movs	r1, #1
 8024f1a:	697b      	ldr	r3, [r7, #20]
 8024f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8024f20:	43db      	mvns	r3, r3
 8024f22:	401a      	ands	r2, r3
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	689a      	ldr	r2, [r3, #8]
 8024f2c:	697b      	ldr	r3, [r7, #20]
 8024f2e:	005b      	lsls	r3, r3, #1
 8024f30:	2103      	movs	r1, #3
 8024f32:	fa01 f303 	lsl.w	r3, r1, r3
 8024f36:	43db      	mvns	r3, r3
 8024f38:	401a      	ands	r2, r3
 8024f3a:	687b      	ldr	r3, [r7, #4]
 8024f3c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024f3e:	697b      	ldr	r3, [r7, #20]
 8024f40:	3301      	adds	r3, #1
 8024f42:	617b      	str	r3, [r7, #20]
 8024f44:	697b      	ldr	r3, [r7, #20]
 8024f46:	2b0f      	cmp	r3, #15
 8024f48:	f67f af22 	bls.w	8024d90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8024f4c:	bf00      	nop
 8024f4e:	bf00      	nop
 8024f50:	371c      	adds	r7, #28
 8024f52:	46bd      	mov	sp, r7
 8024f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f58:	4770      	bx	lr
 8024f5a:	bf00      	nop
 8024f5c:	40013800 	.word	0x40013800
 8024f60:	40020000 	.word	0x40020000
 8024f64:	40020400 	.word	0x40020400
 8024f68:	40020800 	.word	0x40020800
 8024f6c:	40020c00 	.word	0x40020c00
 8024f70:	40021000 	.word	0x40021000
 8024f74:	40021400 	.word	0x40021400
 8024f78:	40021800 	.word	0x40021800
 8024f7c:	40021c00 	.word	0x40021c00
 8024f80:	40022000 	.word	0x40022000
 8024f84:	40022400 	.word	0x40022400
 8024f88:	40013c00 	.word	0x40013c00

08024f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8024f8c:	b480      	push	{r7}
 8024f8e:	b083      	sub	sp, #12
 8024f90:	af00      	add	r7, sp, #0
 8024f92:	6078      	str	r0, [r7, #4]
 8024f94:	460b      	mov	r3, r1
 8024f96:	807b      	strh	r3, [r7, #2]
 8024f98:	4613      	mov	r3, r2
 8024f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8024f9c:	787b      	ldrb	r3, [r7, #1]
 8024f9e:	2b00      	cmp	r3, #0
 8024fa0:	d003      	beq.n	8024faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8024fa2:	887a      	ldrh	r2, [r7, #2]
 8024fa4:	687b      	ldr	r3, [r7, #4]
 8024fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024fa8:	e003      	b.n	8024fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024faa:	887b      	ldrh	r3, [r7, #2]
 8024fac:	041a      	lsls	r2, r3, #16
 8024fae:	687b      	ldr	r3, [r7, #4]
 8024fb0:	619a      	str	r2, [r3, #24]
}
 8024fb2:	bf00      	nop
 8024fb4:	370c      	adds	r7, #12
 8024fb6:	46bd      	mov	sp, r7
 8024fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fbc:	4770      	bx	lr
	...

08024fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8024fc0:	b580      	push	{r7, lr}
 8024fc2:	b082      	sub	sp, #8
 8024fc4:	af00      	add	r7, sp, #0
 8024fc6:	4603      	mov	r3, r0
 8024fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8024fca:	4b08      	ldr	r3, [pc, #32]	; (8024fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024fcc:	695a      	ldr	r2, [r3, #20]
 8024fce:	88fb      	ldrh	r3, [r7, #6]
 8024fd0:	4013      	ands	r3, r2
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	d006      	beq.n	8024fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8024fd6:	4a05      	ldr	r2, [pc, #20]	; (8024fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8024fd8:	88fb      	ldrh	r3, [r7, #6]
 8024fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8024fdc:	88fb      	ldrh	r3, [r7, #6]
 8024fde:	4618      	mov	r0, r3
 8024fe0:	f7fc ffdc 	bl	8021f9c <HAL_GPIO_EXTI_Callback>
  }
}
 8024fe4:	bf00      	nop
 8024fe6:	3708      	adds	r7, #8
 8024fe8:	46bd      	mov	sp, r7
 8024fea:	bd80      	pop	{r7, pc}
 8024fec:	40013c00 	.word	0x40013c00

08024ff0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8024ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024ff2:	b08f      	sub	sp, #60	; 0x3c
 8024ff4:	af0a      	add	r7, sp, #40	; 0x28
 8024ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	2b00      	cmp	r3, #0
 8024ffc:	d101      	bne.n	8025002 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8024ffe:	2301      	movs	r3, #1
 8025000:	e054      	b.n	80250ac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	681b      	ldr	r3, [r3, #0]
 8025006:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 802500e:	b2db      	uxtb	r3, r3
 8025010:	2b00      	cmp	r3, #0
 8025012:	d106      	bne.n	8025022 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8025014:	687b      	ldr	r3, [r7, #4]
 8025016:	2200      	movs	r2, #0
 8025018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 802501c:	6878      	ldr	r0, [r7, #4]
 802501e:	f008 fd01 	bl	802da24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8025022:	687b      	ldr	r3, [r7, #4]
 8025024:	2203      	movs	r2, #3
 8025026:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 802502a:	68fb      	ldr	r3, [r7, #12]
 802502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025032:	2b00      	cmp	r3, #0
 8025034:	d102      	bne.n	802503c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8025036:	687b      	ldr	r3, [r7, #4]
 8025038:	2200      	movs	r2, #0
 802503a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	681b      	ldr	r3, [r3, #0]
 8025040:	4618      	mov	r0, r3
 8025042:	f005 fd2f 	bl	802aaa4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8025046:	687b      	ldr	r3, [r7, #4]
 8025048:	681b      	ldr	r3, [r3, #0]
 802504a:	603b      	str	r3, [r7, #0]
 802504c:	687e      	ldr	r6, [r7, #4]
 802504e:	466d      	mov	r5, sp
 8025050:	f106 0410 	add.w	r4, r6, #16
 8025054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8025056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802505a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802505c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025060:	e885 0003 	stmia.w	r5, {r0, r1}
 8025064:	1d33      	adds	r3, r6, #4
 8025066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8025068:	6838      	ldr	r0, [r7, #0]
 802506a:	f005 fca9 	bl	802a9c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 802506e:	687b      	ldr	r3, [r7, #4]
 8025070:	681b      	ldr	r3, [r3, #0]
 8025072:	2101      	movs	r1, #1
 8025074:	4618      	mov	r0, r3
 8025076:	f005 fd26 	bl	802aac6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 802507a:	687b      	ldr	r3, [r7, #4]
 802507c:	681b      	ldr	r3, [r3, #0]
 802507e:	603b      	str	r3, [r7, #0]
 8025080:	687e      	ldr	r6, [r7, #4]
 8025082:	466d      	mov	r5, sp
 8025084:	f106 0410 	add.w	r4, r6, #16
 8025088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802508a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802508c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802508e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8025090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8025094:	e885 0003 	stmia.w	r5, {r0, r1}
 8025098:	1d33      	adds	r3, r6, #4
 802509a:	cb0e      	ldmia	r3, {r1, r2, r3}
 802509c:	6838      	ldr	r0, [r7, #0]
 802509e:	f005 feaf 	bl	802ae00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	2201      	movs	r2, #1
 80250a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80250aa:	2300      	movs	r3, #0
}
 80250ac:	4618      	mov	r0, r3
 80250ae:	3714      	adds	r7, #20
 80250b0:	46bd      	mov	sp, r7
 80250b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080250b4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80250b4:	b590      	push	{r4, r7, lr}
 80250b6:	b089      	sub	sp, #36	; 0x24
 80250b8:	af04      	add	r7, sp, #16
 80250ba:	6078      	str	r0, [r7, #4]
 80250bc:	4608      	mov	r0, r1
 80250be:	4611      	mov	r1, r2
 80250c0:	461a      	mov	r2, r3
 80250c2:	4603      	mov	r3, r0
 80250c4:	70fb      	strb	r3, [r7, #3]
 80250c6:	460b      	mov	r3, r1
 80250c8:	70bb      	strb	r3, [r7, #2]
 80250ca:	4613      	mov	r3, r2
 80250cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80250ce:	687b      	ldr	r3, [r7, #4]
 80250d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80250d4:	2b01      	cmp	r3, #1
 80250d6:	d101      	bne.n	80250dc <HAL_HCD_HC_Init+0x28>
 80250d8:	2302      	movs	r3, #2
 80250da:	e076      	b.n	80251ca <HAL_HCD_HC_Init+0x116>
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	2201      	movs	r2, #1
 80250e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80250e4:	78fb      	ldrb	r3, [r7, #3]
 80250e6:	687a      	ldr	r2, [r7, #4]
 80250e8:	212c      	movs	r1, #44	; 0x2c
 80250ea:	fb01 f303 	mul.w	r3, r1, r3
 80250ee:	4413      	add	r3, r2
 80250f0:	333d      	adds	r3, #61	; 0x3d
 80250f2:	2200      	movs	r2, #0
 80250f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80250f6:	78fb      	ldrb	r3, [r7, #3]
 80250f8:	687a      	ldr	r2, [r7, #4]
 80250fa:	212c      	movs	r1, #44	; 0x2c
 80250fc:	fb01 f303 	mul.w	r3, r1, r3
 8025100:	4413      	add	r3, r2
 8025102:	3338      	adds	r3, #56	; 0x38
 8025104:	787a      	ldrb	r2, [r7, #1]
 8025106:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8025108:	78fb      	ldrb	r3, [r7, #3]
 802510a:	687a      	ldr	r2, [r7, #4]
 802510c:	212c      	movs	r1, #44	; 0x2c
 802510e:	fb01 f303 	mul.w	r3, r1, r3
 8025112:	4413      	add	r3, r2
 8025114:	3340      	adds	r3, #64	; 0x40
 8025116:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8025118:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 802511a:	78fb      	ldrb	r3, [r7, #3]
 802511c:	687a      	ldr	r2, [r7, #4]
 802511e:	212c      	movs	r1, #44	; 0x2c
 8025120:	fb01 f303 	mul.w	r3, r1, r3
 8025124:	4413      	add	r3, r2
 8025126:	3339      	adds	r3, #57	; 0x39
 8025128:	78fa      	ldrb	r2, [r7, #3]
 802512a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 802512c:	78fb      	ldrb	r3, [r7, #3]
 802512e:	687a      	ldr	r2, [r7, #4]
 8025130:	212c      	movs	r1, #44	; 0x2c
 8025132:	fb01 f303 	mul.w	r3, r1, r3
 8025136:	4413      	add	r3, r2
 8025138:	333f      	adds	r3, #63	; 0x3f
 802513a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 802513e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8025140:	78fb      	ldrb	r3, [r7, #3]
 8025142:	78ba      	ldrb	r2, [r7, #2]
 8025144:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8025148:	b2d0      	uxtb	r0, r2
 802514a:	687a      	ldr	r2, [r7, #4]
 802514c:	212c      	movs	r1, #44	; 0x2c
 802514e:	fb01 f303 	mul.w	r3, r1, r3
 8025152:	4413      	add	r3, r2
 8025154:	333a      	adds	r3, #58	; 0x3a
 8025156:	4602      	mov	r2, r0
 8025158:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 802515a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802515e:	2b00      	cmp	r3, #0
 8025160:	da09      	bge.n	8025176 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8025162:	78fb      	ldrb	r3, [r7, #3]
 8025164:	687a      	ldr	r2, [r7, #4]
 8025166:	212c      	movs	r1, #44	; 0x2c
 8025168:	fb01 f303 	mul.w	r3, r1, r3
 802516c:	4413      	add	r3, r2
 802516e:	333b      	adds	r3, #59	; 0x3b
 8025170:	2201      	movs	r2, #1
 8025172:	701a      	strb	r2, [r3, #0]
 8025174:	e008      	b.n	8025188 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8025176:	78fb      	ldrb	r3, [r7, #3]
 8025178:	687a      	ldr	r2, [r7, #4]
 802517a:	212c      	movs	r1, #44	; 0x2c
 802517c:	fb01 f303 	mul.w	r3, r1, r3
 8025180:	4413      	add	r3, r2
 8025182:	333b      	adds	r3, #59	; 0x3b
 8025184:	2200      	movs	r2, #0
 8025186:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8025188:	78fb      	ldrb	r3, [r7, #3]
 802518a:	687a      	ldr	r2, [r7, #4]
 802518c:	212c      	movs	r1, #44	; 0x2c
 802518e:	fb01 f303 	mul.w	r3, r1, r3
 8025192:	4413      	add	r3, r2
 8025194:	333c      	adds	r3, #60	; 0x3c
 8025196:	f897 2020 	ldrb.w	r2, [r7, #32]
 802519a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	6818      	ldr	r0, [r3, #0]
 80251a0:	787c      	ldrb	r4, [r7, #1]
 80251a2:	78ba      	ldrb	r2, [r7, #2]
 80251a4:	78f9      	ldrb	r1, [r7, #3]
 80251a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80251a8:	9302      	str	r3, [sp, #8]
 80251aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80251ae:	9301      	str	r3, [sp, #4]
 80251b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80251b4:	9300      	str	r3, [sp, #0]
 80251b6:	4623      	mov	r3, r4
 80251b8:	f005 ffa8 	bl	802b10c <USB_HC_Init>
 80251bc:	4603      	mov	r3, r0
 80251be:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	2200      	movs	r2, #0
 80251c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80251c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80251ca:	4618      	mov	r0, r3
 80251cc:	3714      	adds	r7, #20
 80251ce:	46bd      	mov	sp, r7
 80251d0:	bd90      	pop	{r4, r7, pc}

080251d2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80251d2:	b580      	push	{r7, lr}
 80251d4:	b084      	sub	sp, #16
 80251d6:	af00      	add	r7, sp, #0
 80251d8:	6078      	str	r0, [r7, #4]
 80251da:	460b      	mov	r3, r1
 80251dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80251de:	2300      	movs	r3, #0
 80251e0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80251e2:	687b      	ldr	r3, [r7, #4]
 80251e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80251e8:	2b01      	cmp	r3, #1
 80251ea:	d101      	bne.n	80251f0 <HAL_HCD_HC_Halt+0x1e>
 80251ec:	2302      	movs	r3, #2
 80251ee:	e00f      	b.n	8025210 <HAL_HCD_HC_Halt+0x3e>
 80251f0:	687b      	ldr	r3, [r7, #4]
 80251f2:	2201      	movs	r2, #1
 80251f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	681b      	ldr	r3, [r3, #0]
 80251fc:	78fa      	ldrb	r2, [r7, #3]
 80251fe:	4611      	mov	r1, r2
 8025200:	4618      	mov	r0, r3
 8025202:	f006 f9f8 	bl	802b5f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8025206:	687b      	ldr	r3, [r7, #4]
 8025208:	2200      	movs	r2, #0
 802520a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 802520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8025210:	4618      	mov	r0, r3
 8025212:	3710      	adds	r7, #16
 8025214:	46bd      	mov	sp, r7
 8025216:	bd80      	pop	{r7, pc}

08025218 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8025218:	b580      	push	{r7, lr}
 802521a:	b082      	sub	sp, #8
 802521c:	af00      	add	r7, sp, #0
 802521e:	6078      	str	r0, [r7, #4]
 8025220:	4608      	mov	r0, r1
 8025222:	4611      	mov	r1, r2
 8025224:	461a      	mov	r2, r3
 8025226:	4603      	mov	r3, r0
 8025228:	70fb      	strb	r3, [r7, #3]
 802522a:	460b      	mov	r3, r1
 802522c:	70bb      	strb	r3, [r7, #2]
 802522e:	4613      	mov	r3, r2
 8025230:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8025232:	78fb      	ldrb	r3, [r7, #3]
 8025234:	687a      	ldr	r2, [r7, #4]
 8025236:	212c      	movs	r1, #44	; 0x2c
 8025238:	fb01 f303 	mul.w	r3, r1, r3
 802523c:	4413      	add	r3, r2
 802523e:	333b      	adds	r3, #59	; 0x3b
 8025240:	78ba      	ldrb	r2, [r7, #2]
 8025242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8025244:	78fb      	ldrb	r3, [r7, #3]
 8025246:	687a      	ldr	r2, [r7, #4]
 8025248:	212c      	movs	r1, #44	; 0x2c
 802524a:	fb01 f303 	mul.w	r3, r1, r3
 802524e:	4413      	add	r3, r2
 8025250:	333f      	adds	r3, #63	; 0x3f
 8025252:	787a      	ldrb	r2, [r7, #1]
 8025254:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8025256:	7c3b      	ldrb	r3, [r7, #16]
 8025258:	2b00      	cmp	r3, #0
 802525a:	d112      	bne.n	8025282 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 802525c:	78fb      	ldrb	r3, [r7, #3]
 802525e:	687a      	ldr	r2, [r7, #4]
 8025260:	212c      	movs	r1, #44	; 0x2c
 8025262:	fb01 f303 	mul.w	r3, r1, r3
 8025266:	4413      	add	r3, r2
 8025268:	3342      	adds	r3, #66	; 0x42
 802526a:	2203      	movs	r2, #3
 802526c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 802526e:	78fb      	ldrb	r3, [r7, #3]
 8025270:	687a      	ldr	r2, [r7, #4]
 8025272:	212c      	movs	r1, #44	; 0x2c
 8025274:	fb01 f303 	mul.w	r3, r1, r3
 8025278:	4413      	add	r3, r2
 802527a:	333d      	adds	r3, #61	; 0x3d
 802527c:	7f3a      	ldrb	r2, [r7, #28]
 802527e:	701a      	strb	r2, [r3, #0]
 8025280:	e008      	b.n	8025294 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025282:	78fb      	ldrb	r3, [r7, #3]
 8025284:	687a      	ldr	r2, [r7, #4]
 8025286:	212c      	movs	r1, #44	; 0x2c
 8025288:	fb01 f303 	mul.w	r3, r1, r3
 802528c:	4413      	add	r3, r2
 802528e:	3342      	adds	r3, #66	; 0x42
 8025290:	2202      	movs	r2, #2
 8025292:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8025294:	787b      	ldrb	r3, [r7, #1]
 8025296:	2b03      	cmp	r3, #3
 8025298:	f200 80c6 	bhi.w	8025428 <HAL_HCD_HC_SubmitRequest+0x210>
 802529c:	a201      	add	r2, pc, #4	; (adr r2, 80252a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 802529e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80252a2:	bf00      	nop
 80252a4:	080252b5 	.word	0x080252b5
 80252a8:	08025415 	.word	0x08025415
 80252ac:	08025319 	.word	0x08025319
 80252b0:	08025397 	.word	0x08025397
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80252b4:	7c3b      	ldrb	r3, [r7, #16]
 80252b6:	2b01      	cmp	r3, #1
 80252b8:	f040 80b8 	bne.w	802542c <HAL_HCD_HC_SubmitRequest+0x214>
 80252bc:	78bb      	ldrb	r3, [r7, #2]
 80252be:	2b00      	cmp	r3, #0
 80252c0:	f040 80b4 	bne.w	802542c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80252c4:	8b3b      	ldrh	r3, [r7, #24]
 80252c6:	2b00      	cmp	r3, #0
 80252c8:	d108      	bne.n	80252dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80252ca:	78fb      	ldrb	r3, [r7, #3]
 80252cc:	687a      	ldr	r2, [r7, #4]
 80252ce:	212c      	movs	r1, #44	; 0x2c
 80252d0:	fb01 f303 	mul.w	r3, r1, r3
 80252d4:	4413      	add	r3, r2
 80252d6:	3355      	adds	r3, #85	; 0x55
 80252d8:	2201      	movs	r2, #1
 80252da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80252dc:	78fb      	ldrb	r3, [r7, #3]
 80252de:	687a      	ldr	r2, [r7, #4]
 80252e0:	212c      	movs	r1, #44	; 0x2c
 80252e2:	fb01 f303 	mul.w	r3, r1, r3
 80252e6:	4413      	add	r3, r2
 80252e8:	3355      	adds	r3, #85	; 0x55
 80252ea:	781b      	ldrb	r3, [r3, #0]
 80252ec:	2b00      	cmp	r3, #0
 80252ee:	d109      	bne.n	8025304 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80252f0:	78fb      	ldrb	r3, [r7, #3]
 80252f2:	687a      	ldr	r2, [r7, #4]
 80252f4:	212c      	movs	r1, #44	; 0x2c
 80252f6:	fb01 f303 	mul.w	r3, r1, r3
 80252fa:	4413      	add	r3, r2
 80252fc:	3342      	adds	r3, #66	; 0x42
 80252fe:	2200      	movs	r2, #0
 8025300:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8025302:	e093      	b.n	802542c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025304:	78fb      	ldrb	r3, [r7, #3]
 8025306:	687a      	ldr	r2, [r7, #4]
 8025308:	212c      	movs	r1, #44	; 0x2c
 802530a:	fb01 f303 	mul.w	r3, r1, r3
 802530e:	4413      	add	r3, r2
 8025310:	3342      	adds	r3, #66	; 0x42
 8025312:	2202      	movs	r2, #2
 8025314:	701a      	strb	r2, [r3, #0]
      break;
 8025316:	e089      	b.n	802542c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8025318:	78bb      	ldrb	r3, [r7, #2]
 802531a:	2b00      	cmp	r3, #0
 802531c:	d11d      	bne.n	802535a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802531e:	78fb      	ldrb	r3, [r7, #3]
 8025320:	687a      	ldr	r2, [r7, #4]
 8025322:	212c      	movs	r1, #44	; 0x2c
 8025324:	fb01 f303 	mul.w	r3, r1, r3
 8025328:	4413      	add	r3, r2
 802532a:	3355      	adds	r3, #85	; 0x55
 802532c:	781b      	ldrb	r3, [r3, #0]
 802532e:	2b00      	cmp	r3, #0
 8025330:	d109      	bne.n	8025346 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025332:	78fb      	ldrb	r3, [r7, #3]
 8025334:	687a      	ldr	r2, [r7, #4]
 8025336:	212c      	movs	r1, #44	; 0x2c
 8025338:	fb01 f303 	mul.w	r3, r1, r3
 802533c:	4413      	add	r3, r2
 802533e:	3342      	adds	r3, #66	; 0x42
 8025340:	2200      	movs	r2, #0
 8025342:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8025344:	e073      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025346:	78fb      	ldrb	r3, [r7, #3]
 8025348:	687a      	ldr	r2, [r7, #4]
 802534a:	212c      	movs	r1, #44	; 0x2c
 802534c:	fb01 f303 	mul.w	r3, r1, r3
 8025350:	4413      	add	r3, r2
 8025352:	3342      	adds	r3, #66	; 0x42
 8025354:	2202      	movs	r2, #2
 8025356:	701a      	strb	r2, [r3, #0]
      break;
 8025358:	e069      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 802535a:	78fb      	ldrb	r3, [r7, #3]
 802535c:	687a      	ldr	r2, [r7, #4]
 802535e:	212c      	movs	r1, #44	; 0x2c
 8025360:	fb01 f303 	mul.w	r3, r1, r3
 8025364:	4413      	add	r3, r2
 8025366:	3354      	adds	r3, #84	; 0x54
 8025368:	781b      	ldrb	r3, [r3, #0]
 802536a:	2b00      	cmp	r3, #0
 802536c:	d109      	bne.n	8025382 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 802536e:	78fb      	ldrb	r3, [r7, #3]
 8025370:	687a      	ldr	r2, [r7, #4]
 8025372:	212c      	movs	r1, #44	; 0x2c
 8025374:	fb01 f303 	mul.w	r3, r1, r3
 8025378:	4413      	add	r3, r2
 802537a:	3342      	adds	r3, #66	; 0x42
 802537c:	2200      	movs	r2, #0
 802537e:	701a      	strb	r2, [r3, #0]
      break;
 8025380:	e055      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025382:	78fb      	ldrb	r3, [r7, #3]
 8025384:	687a      	ldr	r2, [r7, #4]
 8025386:	212c      	movs	r1, #44	; 0x2c
 8025388:	fb01 f303 	mul.w	r3, r1, r3
 802538c:	4413      	add	r3, r2
 802538e:	3342      	adds	r3, #66	; 0x42
 8025390:	2202      	movs	r2, #2
 8025392:	701a      	strb	r2, [r3, #0]
      break;
 8025394:	e04b      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8025396:	78bb      	ldrb	r3, [r7, #2]
 8025398:	2b00      	cmp	r3, #0
 802539a:	d11d      	bne.n	80253d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 802539c:	78fb      	ldrb	r3, [r7, #3]
 802539e:	687a      	ldr	r2, [r7, #4]
 80253a0:	212c      	movs	r1, #44	; 0x2c
 80253a2:	fb01 f303 	mul.w	r3, r1, r3
 80253a6:	4413      	add	r3, r2
 80253a8:	3355      	adds	r3, #85	; 0x55
 80253aa:	781b      	ldrb	r3, [r3, #0]
 80253ac:	2b00      	cmp	r3, #0
 80253ae:	d109      	bne.n	80253c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253b0:	78fb      	ldrb	r3, [r7, #3]
 80253b2:	687a      	ldr	r2, [r7, #4]
 80253b4:	212c      	movs	r1, #44	; 0x2c
 80253b6:	fb01 f303 	mul.w	r3, r1, r3
 80253ba:	4413      	add	r3, r2
 80253bc:	3342      	adds	r3, #66	; 0x42
 80253be:	2200      	movs	r2, #0
 80253c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80253c2:	e034      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80253c4:	78fb      	ldrb	r3, [r7, #3]
 80253c6:	687a      	ldr	r2, [r7, #4]
 80253c8:	212c      	movs	r1, #44	; 0x2c
 80253ca:	fb01 f303 	mul.w	r3, r1, r3
 80253ce:	4413      	add	r3, r2
 80253d0:	3342      	adds	r3, #66	; 0x42
 80253d2:	2202      	movs	r2, #2
 80253d4:	701a      	strb	r2, [r3, #0]
      break;
 80253d6:	e02a      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80253d8:	78fb      	ldrb	r3, [r7, #3]
 80253da:	687a      	ldr	r2, [r7, #4]
 80253dc:	212c      	movs	r1, #44	; 0x2c
 80253de:	fb01 f303 	mul.w	r3, r1, r3
 80253e2:	4413      	add	r3, r2
 80253e4:	3354      	adds	r3, #84	; 0x54
 80253e6:	781b      	ldrb	r3, [r3, #0]
 80253e8:	2b00      	cmp	r3, #0
 80253ea:	d109      	bne.n	8025400 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80253ec:	78fb      	ldrb	r3, [r7, #3]
 80253ee:	687a      	ldr	r2, [r7, #4]
 80253f0:	212c      	movs	r1, #44	; 0x2c
 80253f2:	fb01 f303 	mul.w	r3, r1, r3
 80253f6:	4413      	add	r3, r2
 80253f8:	3342      	adds	r3, #66	; 0x42
 80253fa:	2200      	movs	r2, #0
 80253fc:	701a      	strb	r2, [r3, #0]
      break;
 80253fe:	e016      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8025400:	78fb      	ldrb	r3, [r7, #3]
 8025402:	687a      	ldr	r2, [r7, #4]
 8025404:	212c      	movs	r1, #44	; 0x2c
 8025406:	fb01 f303 	mul.w	r3, r1, r3
 802540a:	4413      	add	r3, r2
 802540c:	3342      	adds	r3, #66	; 0x42
 802540e:	2202      	movs	r2, #2
 8025410:	701a      	strb	r2, [r3, #0]
      break;
 8025412:	e00c      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8025414:	78fb      	ldrb	r3, [r7, #3]
 8025416:	687a      	ldr	r2, [r7, #4]
 8025418:	212c      	movs	r1, #44	; 0x2c
 802541a:	fb01 f303 	mul.w	r3, r1, r3
 802541e:	4413      	add	r3, r2
 8025420:	3342      	adds	r3, #66	; 0x42
 8025422:	2200      	movs	r2, #0
 8025424:	701a      	strb	r2, [r3, #0]
      break;
 8025426:	e002      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8025428:	bf00      	nop
 802542a:	e000      	b.n	802542e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 802542c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 802542e:	78fb      	ldrb	r3, [r7, #3]
 8025430:	687a      	ldr	r2, [r7, #4]
 8025432:	212c      	movs	r1, #44	; 0x2c
 8025434:	fb01 f303 	mul.w	r3, r1, r3
 8025438:	4413      	add	r3, r2
 802543a:	3344      	adds	r3, #68	; 0x44
 802543c:	697a      	ldr	r2, [r7, #20]
 802543e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8025440:	78fb      	ldrb	r3, [r7, #3]
 8025442:	8b3a      	ldrh	r2, [r7, #24]
 8025444:	6879      	ldr	r1, [r7, #4]
 8025446:	202c      	movs	r0, #44	; 0x2c
 8025448:	fb00 f303 	mul.w	r3, r0, r3
 802544c:	440b      	add	r3, r1
 802544e:	334c      	adds	r3, #76	; 0x4c
 8025450:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8025452:	78fb      	ldrb	r3, [r7, #3]
 8025454:	687a      	ldr	r2, [r7, #4]
 8025456:	212c      	movs	r1, #44	; 0x2c
 8025458:	fb01 f303 	mul.w	r3, r1, r3
 802545c:	4413      	add	r3, r2
 802545e:	3360      	adds	r3, #96	; 0x60
 8025460:	2200      	movs	r2, #0
 8025462:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8025464:	78fb      	ldrb	r3, [r7, #3]
 8025466:	687a      	ldr	r2, [r7, #4]
 8025468:	212c      	movs	r1, #44	; 0x2c
 802546a:	fb01 f303 	mul.w	r3, r1, r3
 802546e:	4413      	add	r3, r2
 8025470:	3350      	adds	r3, #80	; 0x50
 8025472:	2200      	movs	r2, #0
 8025474:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8025476:	78fb      	ldrb	r3, [r7, #3]
 8025478:	687a      	ldr	r2, [r7, #4]
 802547a:	212c      	movs	r1, #44	; 0x2c
 802547c:	fb01 f303 	mul.w	r3, r1, r3
 8025480:	4413      	add	r3, r2
 8025482:	3339      	adds	r3, #57	; 0x39
 8025484:	78fa      	ldrb	r2, [r7, #3]
 8025486:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8025488:	78fb      	ldrb	r3, [r7, #3]
 802548a:	687a      	ldr	r2, [r7, #4]
 802548c:	212c      	movs	r1, #44	; 0x2c
 802548e:	fb01 f303 	mul.w	r3, r1, r3
 8025492:	4413      	add	r3, r2
 8025494:	3361      	adds	r3, #97	; 0x61
 8025496:	2200      	movs	r2, #0
 8025498:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 802549a:	687b      	ldr	r3, [r7, #4]
 802549c:	6818      	ldr	r0, [r3, #0]
 802549e:	78fb      	ldrb	r3, [r7, #3]
 80254a0:	222c      	movs	r2, #44	; 0x2c
 80254a2:	fb02 f303 	mul.w	r3, r2, r3
 80254a6:	3338      	adds	r3, #56	; 0x38
 80254a8:	687a      	ldr	r2, [r7, #4]
 80254aa:	18d1      	adds	r1, r2, r3
 80254ac:	687b      	ldr	r3, [r7, #4]
 80254ae:	691b      	ldr	r3, [r3, #16]
 80254b0:	b2db      	uxtb	r3, r3
 80254b2:	461a      	mov	r2, r3
 80254b4:	f005 ff4c 	bl	802b350 <USB_HC_StartXfer>
 80254b8:	4603      	mov	r3, r0
}
 80254ba:	4618      	mov	r0, r3
 80254bc:	3708      	adds	r7, #8
 80254be:	46bd      	mov	sp, r7
 80254c0:	bd80      	pop	{r7, pc}
 80254c2:	bf00      	nop

080254c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80254c4:	b580      	push	{r7, lr}
 80254c6:	b086      	sub	sp, #24
 80254c8:	af00      	add	r7, sp, #0
 80254ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80254cc:	687b      	ldr	r3, [r7, #4]
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80254d2:	693b      	ldr	r3, [r7, #16]
 80254d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80254d6:	687b      	ldr	r3, [r7, #4]
 80254d8:	681b      	ldr	r3, [r3, #0]
 80254da:	4618      	mov	r0, r3
 80254dc:	f005 fc4d 	bl	802ad7a <USB_GetMode>
 80254e0:	4603      	mov	r3, r0
 80254e2:	2b01      	cmp	r3, #1
 80254e4:	f040 80f6 	bne.w	80256d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	681b      	ldr	r3, [r3, #0]
 80254ec:	4618      	mov	r0, r3
 80254ee:	f005 fc31 	bl	802ad54 <USB_ReadInterrupts>
 80254f2:	4603      	mov	r3, r0
 80254f4:	2b00      	cmp	r3, #0
 80254f6:	f000 80ec 	beq.w	80256d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80254fa:	687b      	ldr	r3, [r7, #4]
 80254fc:	681b      	ldr	r3, [r3, #0]
 80254fe:	4618      	mov	r0, r3
 8025500:	f005 fc28 	bl	802ad54 <USB_ReadInterrupts>
 8025504:	4603      	mov	r3, r0
 8025506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 802550a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802550e:	d104      	bne.n	802551a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8025518:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 802551a:	687b      	ldr	r3, [r7, #4]
 802551c:	681b      	ldr	r3, [r3, #0]
 802551e:	4618      	mov	r0, r3
 8025520:	f005 fc18 	bl	802ad54 <USB_ReadInterrupts>
 8025524:	4603      	mov	r3, r0
 8025526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802552a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802552e:	d104      	bne.n	802553a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8025530:	687b      	ldr	r3, [r7, #4]
 8025532:	681b      	ldr	r3, [r3, #0]
 8025534:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8025538:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 802553a:	687b      	ldr	r3, [r7, #4]
 802553c:	681b      	ldr	r3, [r3, #0]
 802553e:	4618      	mov	r0, r3
 8025540:	f005 fc08 	bl	802ad54 <USB_ReadInterrupts>
 8025544:	4603      	mov	r3, r0
 8025546:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802554a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 802554e:	d104      	bne.n	802555a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8025550:	687b      	ldr	r3, [r7, #4]
 8025552:	681b      	ldr	r3, [r3, #0]
 8025554:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8025558:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 802555a:	687b      	ldr	r3, [r7, #4]
 802555c:	681b      	ldr	r3, [r3, #0]
 802555e:	4618      	mov	r0, r3
 8025560:	f005 fbf8 	bl	802ad54 <USB_ReadInterrupts>
 8025564:	4603      	mov	r3, r0
 8025566:	f003 0302 	and.w	r3, r3, #2
 802556a:	2b02      	cmp	r3, #2
 802556c:	d103      	bne.n	8025576 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 802556e:	687b      	ldr	r3, [r7, #4]
 8025570:	681b      	ldr	r3, [r3, #0]
 8025572:	2202      	movs	r2, #2
 8025574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	681b      	ldr	r3, [r3, #0]
 802557a:	4618      	mov	r0, r3
 802557c:	f005 fbea 	bl	802ad54 <USB_ReadInterrupts>
 8025580:	4603      	mov	r3, r0
 8025582:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8025586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 802558a:	d11c      	bne.n	80255c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 802558c:	687b      	ldr	r3, [r7, #4]
 802558e:	681b      	ldr	r3, [r3, #0]
 8025590:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8025594:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8025596:	68fb      	ldr	r3, [r7, #12]
 8025598:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802559c:	681b      	ldr	r3, [r3, #0]
 802559e:	f003 0301 	and.w	r3, r3, #1
 80255a2:	2b00      	cmp	r3, #0
 80255a4:	d10f      	bne.n	80255c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80255a6:	2110      	movs	r1, #16
 80255a8:	6938      	ldr	r0, [r7, #16]
 80255aa:	f005 fad9 	bl	802ab60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80255ae:	6938      	ldr	r0, [r7, #16]
 80255b0:	f005 fb0a 	bl	802abc8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80255b4:	687b      	ldr	r3, [r7, #4]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	2101      	movs	r1, #1
 80255ba:	4618      	mov	r0, r3
 80255bc:	f005 fce0 	bl	802af80 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80255c0:	6878      	ldr	r0, [r7, #4]
 80255c2:	f008 faa9 	bl	802db18 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	681b      	ldr	r3, [r3, #0]
 80255ca:	4618      	mov	r0, r3
 80255cc:	f005 fbc2 	bl	802ad54 <USB_ReadInterrupts>
 80255d0:	4603      	mov	r3, r0
 80255d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80255d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80255da:	d102      	bne.n	80255e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80255dc:	6878      	ldr	r0, [r7, #4]
 80255de:	f001 f89e 	bl	802671e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80255e2:	687b      	ldr	r3, [r7, #4]
 80255e4:	681b      	ldr	r3, [r3, #0]
 80255e6:	4618      	mov	r0, r3
 80255e8:	f005 fbb4 	bl	802ad54 <USB_ReadInterrupts>
 80255ec:	4603      	mov	r3, r0
 80255ee:	f003 0308 	and.w	r3, r3, #8
 80255f2:	2b08      	cmp	r3, #8
 80255f4:	d106      	bne.n	8025604 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80255f6:	6878      	ldr	r0, [r7, #4]
 80255f8:	f008 fa72 	bl	802dae0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80255fc:	687b      	ldr	r3, [r7, #4]
 80255fe:	681b      	ldr	r3, [r3, #0]
 8025600:	2208      	movs	r2, #8
 8025602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8025604:	687b      	ldr	r3, [r7, #4]
 8025606:	681b      	ldr	r3, [r3, #0]
 8025608:	4618      	mov	r0, r3
 802560a:	f005 fba3 	bl	802ad54 <USB_ReadInterrupts>
 802560e:	4603      	mov	r3, r0
 8025610:	f003 0310 	and.w	r3, r3, #16
 8025614:	2b10      	cmp	r3, #16
 8025616:	d101      	bne.n	802561c <HAL_HCD_IRQHandler+0x158>
 8025618:	2301      	movs	r3, #1
 802561a:	e000      	b.n	802561e <HAL_HCD_IRQHandler+0x15a>
 802561c:	2300      	movs	r3, #0
 802561e:	2b00      	cmp	r3, #0
 8025620:	d012      	beq.n	8025648 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025622:	687b      	ldr	r3, [r7, #4]
 8025624:	681b      	ldr	r3, [r3, #0]
 8025626:	699a      	ldr	r2, [r3, #24]
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	681b      	ldr	r3, [r3, #0]
 802562c:	f022 0210 	bic.w	r2, r2, #16
 8025630:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8025632:	6878      	ldr	r0, [r7, #4]
 8025634:	f000 ffa1 	bl	802657a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8025638:	687b      	ldr	r3, [r7, #4]
 802563a:	681b      	ldr	r3, [r3, #0]
 802563c:	699a      	ldr	r2, [r3, #24]
 802563e:	687b      	ldr	r3, [r7, #4]
 8025640:	681b      	ldr	r3, [r3, #0]
 8025642:	f042 0210 	orr.w	r2, r2, #16
 8025646:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	681b      	ldr	r3, [r3, #0]
 802564c:	4618      	mov	r0, r3
 802564e:	f005 fb81 	bl	802ad54 <USB_ReadInterrupts>
 8025652:	4603      	mov	r3, r0
 8025654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 802565c:	d13a      	bne.n	80256d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	681b      	ldr	r3, [r3, #0]
 8025662:	4618      	mov	r0, r3
 8025664:	f005 ffb6 	bl	802b5d4 <USB_HC_ReadInterrupt>
 8025668:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 802566a:	2300      	movs	r3, #0
 802566c:	617b      	str	r3, [r7, #20]
 802566e:	e025      	b.n	80256bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8025670:	697b      	ldr	r3, [r7, #20]
 8025672:	f003 030f 	and.w	r3, r3, #15
 8025676:	68ba      	ldr	r2, [r7, #8]
 8025678:	fa22 f303 	lsr.w	r3, r2, r3
 802567c:	f003 0301 	and.w	r3, r3, #1
 8025680:	2b00      	cmp	r3, #0
 8025682:	d018      	beq.n	80256b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8025684:	697b      	ldr	r3, [r7, #20]
 8025686:	015a      	lsls	r2, r3, #5
 8025688:	68fb      	ldr	r3, [r7, #12]
 802568a:	4413      	add	r3, r2
 802568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025690:	681b      	ldr	r3, [r3, #0]
 8025692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802569a:	d106      	bne.n	80256aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 802569c:	697b      	ldr	r3, [r7, #20]
 802569e:	b2db      	uxtb	r3, r3
 80256a0:	4619      	mov	r1, r3
 80256a2:	6878      	ldr	r0, [r7, #4]
 80256a4:	f000 f8ab 	bl	80257fe <HCD_HC_IN_IRQHandler>
 80256a8:	e005      	b.n	80256b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80256aa:	697b      	ldr	r3, [r7, #20]
 80256ac:	b2db      	uxtb	r3, r3
 80256ae:	4619      	mov	r1, r3
 80256b0:	6878      	ldr	r0, [r7, #4]
 80256b2:	f000 fbf9 	bl	8025ea8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80256b6:	697b      	ldr	r3, [r7, #20]
 80256b8:	3301      	adds	r3, #1
 80256ba:	617b      	str	r3, [r7, #20]
 80256bc:	687b      	ldr	r3, [r7, #4]
 80256be:	689b      	ldr	r3, [r3, #8]
 80256c0:	697a      	ldr	r2, [r7, #20]
 80256c2:	429a      	cmp	r2, r3
 80256c4:	d3d4      	bcc.n	8025670 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80256c6:	687b      	ldr	r3, [r7, #4]
 80256c8:	681b      	ldr	r3, [r3, #0]
 80256ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80256ce:	615a      	str	r2, [r3, #20]
 80256d0:	e000      	b.n	80256d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80256d2:	bf00      	nop
    }
  }
}
 80256d4:	3718      	adds	r7, #24
 80256d6:	46bd      	mov	sp, r7
 80256d8:	bd80      	pop	{r7, pc}

080256da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80256da:	b580      	push	{r7, lr}
 80256dc:	b082      	sub	sp, #8
 80256de:	af00      	add	r7, sp, #0
 80256e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80256e2:	687b      	ldr	r3, [r7, #4]
 80256e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80256e8:	2b01      	cmp	r3, #1
 80256ea:	d101      	bne.n	80256f0 <HAL_HCD_Start+0x16>
 80256ec:	2302      	movs	r3, #2
 80256ee:	e013      	b.n	8025718 <HAL_HCD_Start+0x3e>
 80256f0:	687b      	ldr	r3, [r7, #4]
 80256f2:	2201      	movs	r2, #1
 80256f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80256f8:	687b      	ldr	r3, [r7, #4]
 80256fa:	681b      	ldr	r3, [r3, #0]
 80256fc:	2101      	movs	r1, #1
 80256fe:	4618      	mov	r0, r3
 8025700:	f005 fca2 	bl	802b048 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	681b      	ldr	r3, [r3, #0]
 8025708:	4618      	mov	r0, r3
 802570a:	f005 f9ba 	bl	802aa82 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 802570e:	687b      	ldr	r3, [r7, #4]
 8025710:	2200      	movs	r2, #0
 8025712:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025716:	2300      	movs	r3, #0
}
 8025718:	4618      	mov	r0, r3
 802571a:	3708      	adds	r7, #8
 802571c:	46bd      	mov	sp, r7
 802571e:	bd80      	pop	{r7, pc}

08025720 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8025720:	b580      	push	{r7, lr}
 8025722:	b082      	sub	sp, #8
 8025724:	af00      	add	r7, sp, #0
 8025726:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8025728:	687b      	ldr	r3, [r7, #4]
 802572a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 802572e:	2b01      	cmp	r3, #1
 8025730:	d101      	bne.n	8025736 <HAL_HCD_Stop+0x16>
 8025732:	2302      	movs	r3, #2
 8025734:	e00d      	b.n	8025752 <HAL_HCD_Stop+0x32>
 8025736:	687b      	ldr	r3, [r7, #4]
 8025738:	2201      	movs	r2, #1
 802573a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 802573e:	687b      	ldr	r3, [r7, #4]
 8025740:	681b      	ldr	r3, [r3, #0]
 8025742:	4618      	mov	r0, r3
 8025744:	f006 f890 	bl	802b868 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8025748:	687b      	ldr	r3, [r7, #4]
 802574a:	2200      	movs	r2, #0
 802574c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8025750:	2300      	movs	r3, #0
}
 8025752:	4618      	mov	r0, r3
 8025754:	3708      	adds	r7, #8
 8025756:	46bd      	mov	sp, r7
 8025758:	bd80      	pop	{r7, pc}

0802575a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 802575a:	b580      	push	{r7, lr}
 802575c:	b082      	sub	sp, #8
 802575e:	af00      	add	r7, sp, #0
 8025760:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8025762:	687b      	ldr	r3, [r7, #4]
 8025764:	681b      	ldr	r3, [r3, #0]
 8025766:	4618      	mov	r0, r3
 8025768:	f005 fc44 	bl	802aff4 <USB_ResetPort>
 802576c:	4603      	mov	r3, r0
}
 802576e:	4618      	mov	r0, r3
 8025770:	3708      	adds	r7, #8
 8025772:	46bd      	mov	sp, r7
 8025774:	bd80      	pop	{r7, pc}

08025776 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025776:	b480      	push	{r7}
 8025778:	b083      	sub	sp, #12
 802577a:	af00      	add	r7, sp, #0
 802577c:	6078      	str	r0, [r7, #4]
 802577e:	460b      	mov	r3, r1
 8025780:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8025782:	78fb      	ldrb	r3, [r7, #3]
 8025784:	687a      	ldr	r2, [r7, #4]
 8025786:	212c      	movs	r1, #44	; 0x2c
 8025788:	fb01 f303 	mul.w	r3, r1, r3
 802578c:	4413      	add	r3, r2
 802578e:	3360      	adds	r3, #96	; 0x60
 8025790:	781b      	ldrb	r3, [r3, #0]
}
 8025792:	4618      	mov	r0, r3
 8025794:	370c      	adds	r7, #12
 8025796:	46bd      	mov	sp, r7
 8025798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802579c:	4770      	bx	lr

0802579e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 802579e:	b480      	push	{r7}
 80257a0:	b083      	sub	sp, #12
 80257a2:	af00      	add	r7, sp, #0
 80257a4:	6078      	str	r0, [r7, #4]
 80257a6:	460b      	mov	r3, r1
 80257a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80257aa:	78fb      	ldrb	r3, [r7, #3]
 80257ac:	687a      	ldr	r2, [r7, #4]
 80257ae:	212c      	movs	r1, #44	; 0x2c
 80257b0:	fb01 f303 	mul.w	r3, r1, r3
 80257b4:	4413      	add	r3, r2
 80257b6:	3350      	adds	r3, #80	; 0x50
 80257b8:	681b      	ldr	r3, [r3, #0]
}
 80257ba:	4618      	mov	r0, r3
 80257bc:	370c      	adds	r7, #12
 80257be:	46bd      	mov	sp, r7
 80257c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257c4:	4770      	bx	lr

080257c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80257c6:	b580      	push	{r7, lr}
 80257c8:	b082      	sub	sp, #8
 80257ca:	af00      	add	r7, sp, #0
 80257cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80257ce:	687b      	ldr	r3, [r7, #4]
 80257d0:	681b      	ldr	r3, [r3, #0]
 80257d2:	4618      	mov	r0, r3
 80257d4:	f005 fc88 	bl	802b0e8 <USB_GetCurrentFrame>
 80257d8:	4603      	mov	r3, r0
}
 80257da:	4618      	mov	r0, r3
 80257dc:	3708      	adds	r7, #8
 80257de:	46bd      	mov	sp, r7
 80257e0:	bd80      	pop	{r7, pc}

080257e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80257e2:	b580      	push	{r7, lr}
 80257e4:	b082      	sub	sp, #8
 80257e6:	af00      	add	r7, sp, #0
 80257e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	681b      	ldr	r3, [r3, #0]
 80257ee:	4618      	mov	r0, r3
 80257f0:	f005 fc63 	bl	802b0ba <USB_GetHostSpeed>
 80257f4:	4603      	mov	r3, r0
}
 80257f6:	4618      	mov	r0, r3
 80257f8:	3708      	adds	r7, #8
 80257fa:	46bd      	mov	sp, r7
 80257fc:	bd80      	pop	{r7, pc}

080257fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80257fe:	b580      	push	{r7, lr}
 8025800:	b086      	sub	sp, #24
 8025802:	af00      	add	r7, sp, #0
 8025804:	6078      	str	r0, [r7, #4]
 8025806:	460b      	mov	r3, r1
 8025808:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 802580a:	687b      	ldr	r3, [r7, #4]
 802580c:	681b      	ldr	r3, [r3, #0]
 802580e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025810:	697b      	ldr	r3, [r7, #20]
 8025812:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8025814:	78fb      	ldrb	r3, [r7, #3]
 8025816:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025818:	68fb      	ldr	r3, [r7, #12]
 802581a:	015a      	lsls	r2, r3, #5
 802581c:	693b      	ldr	r3, [r7, #16]
 802581e:	4413      	add	r3, r2
 8025820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025824:	689b      	ldr	r3, [r3, #8]
 8025826:	f003 0304 	and.w	r3, r3, #4
 802582a:	2b04      	cmp	r3, #4
 802582c:	d11a      	bne.n	8025864 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 802582e:	68fb      	ldr	r3, [r7, #12]
 8025830:	015a      	lsls	r2, r3, #5
 8025832:	693b      	ldr	r3, [r7, #16]
 8025834:	4413      	add	r3, r2
 8025836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802583a:	461a      	mov	r2, r3
 802583c:	2304      	movs	r3, #4
 802583e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025840:	687a      	ldr	r2, [r7, #4]
 8025842:	68fb      	ldr	r3, [r7, #12]
 8025844:	212c      	movs	r1, #44	; 0x2c
 8025846:	fb01 f303 	mul.w	r3, r1, r3
 802584a:	4413      	add	r3, r2
 802584c:	3361      	adds	r3, #97	; 0x61
 802584e:	2206      	movs	r2, #6
 8025850:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025852:	687b      	ldr	r3, [r7, #4]
 8025854:	681b      	ldr	r3, [r3, #0]
 8025856:	68fa      	ldr	r2, [r7, #12]
 8025858:	b2d2      	uxtb	r2, r2
 802585a:	4611      	mov	r1, r2
 802585c:	4618      	mov	r0, r3
 802585e:	f005 feca 	bl	802b5f6 <USB_HC_Halt>
 8025862:	e0af      	b.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8025864:	68fb      	ldr	r3, [r7, #12]
 8025866:	015a      	lsls	r2, r3, #5
 8025868:	693b      	ldr	r3, [r7, #16]
 802586a:	4413      	add	r3, r2
 802586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025870:	689b      	ldr	r3, [r3, #8]
 8025872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802587a:	d11b      	bne.n	80258b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 802587c:	68fb      	ldr	r3, [r7, #12]
 802587e:	015a      	lsls	r2, r3, #5
 8025880:	693b      	ldr	r3, [r7, #16]
 8025882:	4413      	add	r3, r2
 8025884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025888:	461a      	mov	r2, r3
 802588a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802588e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8025890:	687a      	ldr	r2, [r7, #4]
 8025892:	68fb      	ldr	r3, [r7, #12]
 8025894:	212c      	movs	r1, #44	; 0x2c
 8025896:	fb01 f303 	mul.w	r3, r1, r3
 802589a:	4413      	add	r3, r2
 802589c:	3361      	adds	r3, #97	; 0x61
 802589e:	2207      	movs	r2, #7
 80258a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80258a2:	687b      	ldr	r3, [r7, #4]
 80258a4:	681b      	ldr	r3, [r3, #0]
 80258a6:	68fa      	ldr	r2, [r7, #12]
 80258a8:	b2d2      	uxtb	r2, r2
 80258aa:	4611      	mov	r1, r2
 80258ac:	4618      	mov	r0, r3
 80258ae:	f005 fea2 	bl	802b5f6 <USB_HC_Halt>
 80258b2:	e087      	b.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80258b4:	68fb      	ldr	r3, [r7, #12]
 80258b6:	015a      	lsls	r2, r3, #5
 80258b8:	693b      	ldr	r3, [r7, #16]
 80258ba:	4413      	add	r3, r2
 80258bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258c0:	689b      	ldr	r3, [r3, #8]
 80258c2:	f003 0320 	and.w	r3, r3, #32
 80258c6:	2b20      	cmp	r3, #32
 80258c8:	d109      	bne.n	80258de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80258ca:	68fb      	ldr	r3, [r7, #12]
 80258cc:	015a      	lsls	r2, r3, #5
 80258ce:	693b      	ldr	r3, [r7, #16]
 80258d0:	4413      	add	r3, r2
 80258d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258d6:	461a      	mov	r2, r3
 80258d8:	2320      	movs	r3, #32
 80258da:	6093      	str	r3, [r2, #8]
 80258dc:	e072      	b.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80258de:	68fb      	ldr	r3, [r7, #12]
 80258e0:	015a      	lsls	r2, r3, #5
 80258e2:	693b      	ldr	r3, [r7, #16]
 80258e4:	4413      	add	r3, r2
 80258e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80258ea:	689b      	ldr	r3, [r3, #8]
 80258ec:	f003 0308 	and.w	r3, r3, #8
 80258f0:	2b08      	cmp	r3, #8
 80258f2:	d11a      	bne.n	802592a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80258f4:	68fb      	ldr	r3, [r7, #12]
 80258f6:	015a      	lsls	r2, r3, #5
 80258f8:	693b      	ldr	r3, [r7, #16]
 80258fa:	4413      	add	r3, r2
 80258fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025900:	461a      	mov	r2, r3
 8025902:	2308      	movs	r3, #8
 8025904:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8025906:	687a      	ldr	r2, [r7, #4]
 8025908:	68fb      	ldr	r3, [r7, #12]
 802590a:	212c      	movs	r1, #44	; 0x2c
 802590c:	fb01 f303 	mul.w	r3, r1, r3
 8025910:	4413      	add	r3, r2
 8025912:	3361      	adds	r3, #97	; 0x61
 8025914:	2205      	movs	r2, #5
 8025916:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025918:	687b      	ldr	r3, [r7, #4]
 802591a:	681b      	ldr	r3, [r3, #0]
 802591c:	68fa      	ldr	r2, [r7, #12]
 802591e:	b2d2      	uxtb	r2, r2
 8025920:	4611      	mov	r1, r2
 8025922:	4618      	mov	r0, r3
 8025924:	f005 fe67 	bl	802b5f6 <USB_HC_Halt>
 8025928:	e04c      	b.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802592a:	68fb      	ldr	r3, [r7, #12]
 802592c:	015a      	lsls	r2, r3, #5
 802592e:	693b      	ldr	r3, [r7, #16]
 8025930:	4413      	add	r3, r2
 8025932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025936:	689b      	ldr	r3, [r3, #8]
 8025938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802593c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025940:	d11b      	bne.n	802597a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8025942:	68fb      	ldr	r3, [r7, #12]
 8025944:	015a      	lsls	r2, r3, #5
 8025946:	693b      	ldr	r3, [r7, #16]
 8025948:	4413      	add	r3, r2
 802594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802594e:	461a      	mov	r2, r3
 8025950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025954:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8025956:	687a      	ldr	r2, [r7, #4]
 8025958:	68fb      	ldr	r3, [r7, #12]
 802595a:	212c      	movs	r1, #44	; 0x2c
 802595c:	fb01 f303 	mul.w	r3, r1, r3
 8025960:	4413      	add	r3, r2
 8025962:	3361      	adds	r3, #97	; 0x61
 8025964:	2208      	movs	r2, #8
 8025966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025968:	687b      	ldr	r3, [r7, #4]
 802596a:	681b      	ldr	r3, [r3, #0]
 802596c:	68fa      	ldr	r2, [r7, #12]
 802596e:	b2d2      	uxtb	r2, r2
 8025970:	4611      	mov	r1, r2
 8025972:	4618      	mov	r0, r3
 8025974:	f005 fe3f 	bl	802b5f6 <USB_HC_Halt>
 8025978:	e024      	b.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 802597a:	68fb      	ldr	r3, [r7, #12]
 802597c:	015a      	lsls	r2, r3, #5
 802597e:	693b      	ldr	r3, [r7, #16]
 8025980:	4413      	add	r3, r2
 8025982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025986:	689b      	ldr	r3, [r3, #8]
 8025988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802598c:	2b80      	cmp	r3, #128	; 0x80
 802598e:	d119      	bne.n	80259c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8025990:	68fb      	ldr	r3, [r7, #12]
 8025992:	015a      	lsls	r2, r3, #5
 8025994:	693b      	ldr	r3, [r7, #16]
 8025996:	4413      	add	r3, r2
 8025998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802599c:	461a      	mov	r2, r3
 802599e:	2380      	movs	r3, #128	; 0x80
 80259a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80259a2:	687a      	ldr	r2, [r7, #4]
 80259a4:	68fb      	ldr	r3, [r7, #12]
 80259a6:	212c      	movs	r1, #44	; 0x2c
 80259a8:	fb01 f303 	mul.w	r3, r1, r3
 80259ac:	4413      	add	r3, r2
 80259ae:	3361      	adds	r3, #97	; 0x61
 80259b0:	2206      	movs	r2, #6
 80259b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259b4:	687b      	ldr	r3, [r7, #4]
 80259b6:	681b      	ldr	r3, [r3, #0]
 80259b8:	68fa      	ldr	r2, [r7, #12]
 80259ba:	b2d2      	uxtb	r2, r2
 80259bc:	4611      	mov	r1, r2
 80259be:	4618      	mov	r0, r3
 80259c0:	f005 fe19 	bl	802b5f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80259c4:	68fb      	ldr	r3, [r7, #12]
 80259c6:	015a      	lsls	r2, r3, #5
 80259c8:	693b      	ldr	r3, [r7, #16]
 80259ca:	4413      	add	r3, r2
 80259cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259d0:	689b      	ldr	r3, [r3, #8]
 80259d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80259d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80259da:	d112      	bne.n	8025a02 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80259dc:	687b      	ldr	r3, [r7, #4]
 80259de:	681b      	ldr	r3, [r3, #0]
 80259e0:	68fa      	ldr	r2, [r7, #12]
 80259e2:	b2d2      	uxtb	r2, r2
 80259e4:	4611      	mov	r1, r2
 80259e6:	4618      	mov	r0, r3
 80259e8:	f005 fe05 	bl	802b5f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80259ec:	68fb      	ldr	r3, [r7, #12]
 80259ee:	015a      	lsls	r2, r3, #5
 80259f0:	693b      	ldr	r3, [r7, #16]
 80259f2:	4413      	add	r3, r2
 80259f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80259f8:	461a      	mov	r2, r3
 80259fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80259fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8025a00:	e24e      	b.n	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025a02:	68fb      	ldr	r3, [r7, #12]
 8025a04:	015a      	lsls	r2, r3, #5
 8025a06:	693b      	ldr	r3, [r7, #16]
 8025a08:	4413      	add	r3, r2
 8025a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a0e:	689b      	ldr	r3, [r3, #8]
 8025a10:	f003 0301 	and.w	r3, r3, #1
 8025a14:	2b01      	cmp	r3, #1
 8025a16:	f040 80df 	bne.w	8025bd8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	691b      	ldr	r3, [r3, #16]
 8025a1e:	2b00      	cmp	r3, #0
 8025a20:	d019      	beq.n	8025a56 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025a22:	687a      	ldr	r2, [r7, #4]
 8025a24:	68fb      	ldr	r3, [r7, #12]
 8025a26:	212c      	movs	r1, #44	; 0x2c
 8025a28:	fb01 f303 	mul.w	r3, r1, r3
 8025a2c:	4413      	add	r3, r2
 8025a2e:	3348      	adds	r3, #72	; 0x48
 8025a30:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8025a32:	68fb      	ldr	r3, [r7, #12]
 8025a34:	0159      	lsls	r1, r3, #5
 8025a36:	693b      	ldr	r3, [r7, #16]
 8025a38:	440b      	add	r3, r1
 8025a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a3e:	691b      	ldr	r3, [r3, #16]
 8025a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8025a44:	1ad2      	subs	r2, r2, r3
 8025a46:	6879      	ldr	r1, [r7, #4]
 8025a48:	68fb      	ldr	r3, [r7, #12]
 8025a4a:	202c      	movs	r0, #44	; 0x2c
 8025a4c:	fb00 f303 	mul.w	r3, r0, r3
 8025a50:	440b      	add	r3, r1
 8025a52:	3350      	adds	r3, #80	; 0x50
 8025a54:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8025a56:	687a      	ldr	r2, [r7, #4]
 8025a58:	68fb      	ldr	r3, [r7, #12]
 8025a5a:	212c      	movs	r1, #44	; 0x2c
 8025a5c:	fb01 f303 	mul.w	r3, r1, r3
 8025a60:	4413      	add	r3, r2
 8025a62:	3361      	adds	r3, #97	; 0x61
 8025a64:	2201      	movs	r2, #1
 8025a66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025a68:	687a      	ldr	r2, [r7, #4]
 8025a6a:	68fb      	ldr	r3, [r7, #12]
 8025a6c:	212c      	movs	r1, #44	; 0x2c
 8025a6e:	fb01 f303 	mul.w	r3, r1, r3
 8025a72:	4413      	add	r3, r2
 8025a74:	335c      	adds	r3, #92	; 0x5c
 8025a76:	2200      	movs	r2, #0
 8025a78:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8025a7a:	68fb      	ldr	r3, [r7, #12]
 8025a7c:	015a      	lsls	r2, r3, #5
 8025a7e:	693b      	ldr	r3, [r7, #16]
 8025a80:	4413      	add	r3, r2
 8025a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025a86:	461a      	mov	r2, r3
 8025a88:	2301      	movs	r3, #1
 8025a8a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025a8c:	687a      	ldr	r2, [r7, #4]
 8025a8e:	68fb      	ldr	r3, [r7, #12]
 8025a90:	212c      	movs	r1, #44	; 0x2c
 8025a92:	fb01 f303 	mul.w	r3, r1, r3
 8025a96:	4413      	add	r3, r2
 8025a98:	333f      	adds	r3, #63	; 0x3f
 8025a9a:	781b      	ldrb	r3, [r3, #0]
 8025a9c:	2b00      	cmp	r3, #0
 8025a9e:	d009      	beq.n	8025ab4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025aa0:	687a      	ldr	r2, [r7, #4]
 8025aa2:	68fb      	ldr	r3, [r7, #12]
 8025aa4:	212c      	movs	r1, #44	; 0x2c
 8025aa6:	fb01 f303 	mul.w	r3, r1, r3
 8025aaa:	4413      	add	r3, r2
 8025aac:	333f      	adds	r3, #63	; 0x3f
 8025aae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025ab0:	2b02      	cmp	r3, #2
 8025ab2:	d111      	bne.n	8025ad8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	68fa      	ldr	r2, [r7, #12]
 8025aba:	b2d2      	uxtb	r2, r2
 8025abc:	4611      	mov	r1, r2
 8025abe:	4618      	mov	r0, r3
 8025ac0:	f005 fd99 	bl	802b5f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025ac4:	68fb      	ldr	r3, [r7, #12]
 8025ac6:	015a      	lsls	r2, r3, #5
 8025ac8:	693b      	ldr	r3, [r7, #16]
 8025aca:	4413      	add	r3, r2
 8025acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ad0:	461a      	mov	r2, r3
 8025ad2:	2310      	movs	r3, #16
 8025ad4:	6093      	str	r3, [r2, #8]
 8025ad6:	e03a      	b.n	8025b4e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025ad8:	687a      	ldr	r2, [r7, #4]
 8025ada:	68fb      	ldr	r3, [r7, #12]
 8025adc:	212c      	movs	r1, #44	; 0x2c
 8025ade:	fb01 f303 	mul.w	r3, r1, r3
 8025ae2:	4413      	add	r3, r2
 8025ae4:	333f      	adds	r3, #63	; 0x3f
 8025ae6:	781b      	ldrb	r3, [r3, #0]
 8025ae8:	2b03      	cmp	r3, #3
 8025aea:	d009      	beq.n	8025b00 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8025aec:	687a      	ldr	r2, [r7, #4]
 8025aee:	68fb      	ldr	r3, [r7, #12]
 8025af0:	212c      	movs	r1, #44	; 0x2c
 8025af2:	fb01 f303 	mul.w	r3, r1, r3
 8025af6:	4413      	add	r3, r2
 8025af8:	333f      	adds	r3, #63	; 0x3f
 8025afa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8025afc:	2b01      	cmp	r3, #1
 8025afe:	d126      	bne.n	8025b4e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8025b00:	68fb      	ldr	r3, [r7, #12]
 8025b02:	015a      	lsls	r2, r3, #5
 8025b04:	693b      	ldr	r3, [r7, #16]
 8025b06:	4413      	add	r3, r2
 8025b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025b0c:	681b      	ldr	r3, [r3, #0]
 8025b0e:	68fa      	ldr	r2, [r7, #12]
 8025b10:	0151      	lsls	r1, r2, #5
 8025b12:	693a      	ldr	r2, [r7, #16]
 8025b14:	440a      	add	r2, r1
 8025b16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8025b1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025b1e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025b20:	687a      	ldr	r2, [r7, #4]
 8025b22:	68fb      	ldr	r3, [r7, #12]
 8025b24:	212c      	movs	r1, #44	; 0x2c
 8025b26:	fb01 f303 	mul.w	r3, r1, r3
 8025b2a:	4413      	add	r3, r2
 8025b2c:	3360      	adds	r3, #96	; 0x60
 8025b2e:	2201      	movs	r2, #1
 8025b30:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025b32:	68fb      	ldr	r3, [r7, #12]
 8025b34:	b2d9      	uxtb	r1, r3
 8025b36:	687a      	ldr	r2, [r7, #4]
 8025b38:	68fb      	ldr	r3, [r7, #12]
 8025b3a:	202c      	movs	r0, #44	; 0x2c
 8025b3c:	fb00 f303 	mul.w	r3, r0, r3
 8025b40:	4413      	add	r3, r2
 8025b42:	3360      	adds	r3, #96	; 0x60
 8025b44:	781b      	ldrb	r3, [r3, #0]
 8025b46:	461a      	mov	r2, r3
 8025b48:	6878      	ldr	r0, [r7, #4]
 8025b4a:	f007 fff3 	bl	802db34 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8025b4e:	687b      	ldr	r3, [r7, #4]
 8025b50:	691b      	ldr	r3, [r3, #16]
 8025b52:	2b01      	cmp	r3, #1
 8025b54:	d12b      	bne.n	8025bae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8025b56:	687a      	ldr	r2, [r7, #4]
 8025b58:	68fb      	ldr	r3, [r7, #12]
 8025b5a:	212c      	movs	r1, #44	; 0x2c
 8025b5c:	fb01 f303 	mul.w	r3, r1, r3
 8025b60:	4413      	add	r3, r2
 8025b62:	3348      	adds	r3, #72	; 0x48
 8025b64:	681b      	ldr	r3, [r3, #0]
 8025b66:	6879      	ldr	r1, [r7, #4]
 8025b68:	68fa      	ldr	r2, [r7, #12]
 8025b6a:	202c      	movs	r0, #44	; 0x2c
 8025b6c:	fb00 f202 	mul.w	r2, r0, r2
 8025b70:	440a      	add	r2, r1
 8025b72:	3240      	adds	r2, #64	; 0x40
 8025b74:	8812      	ldrh	r2, [r2, #0]
 8025b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8025b7a:	f003 0301 	and.w	r3, r3, #1
 8025b7e:	2b00      	cmp	r3, #0
 8025b80:	f000 818e 	beq.w	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8025b84:	687a      	ldr	r2, [r7, #4]
 8025b86:	68fb      	ldr	r3, [r7, #12]
 8025b88:	212c      	movs	r1, #44	; 0x2c
 8025b8a:	fb01 f303 	mul.w	r3, r1, r3
 8025b8e:	4413      	add	r3, r2
 8025b90:	3354      	adds	r3, #84	; 0x54
 8025b92:	781b      	ldrb	r3, [r3, #0]
 8025b94:	f083 0301 	eor.w	r3, r3, #1
 8025b98:	b2d8      	uxtb	r0, r3
 8025b9a:	687a      	ldr	r2, [r7, #4]
 8025b9c:	68fb      	ldr	r3, [r7, #12]
 8025b9e:	212c      	movs	r1, #44	; 0x2c
 8025ba0:	fb01 f303 	mul.w	r3, r1, r3
 8025ba4:	4413      	add	r3, r2
 8025ba6:	3354      	adds	r3, #84	; 0x54
 8025ba8:	4602      	mov	r2, r0
 8025baa:	701a      	strb	r2, [r3, #0]
}
 8025bac:	e178      	b.n	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8025bae:	687a      	ldr	r2, [r7, #4]
 8025bb0:	68fb      	ldr	r3, [r7, #12]
 8025bb2:	212c      	movs	r1, #44	; 0x2c
 8025bb4:	fb01 f303 	mul.w	r3, r1, r3
 8025bb8:	4413      	add	r3, r2
 8025bba:	3354      	adds	r3, #84	; 0x54
 8025bbc:	781b      	ldrb	r3, [r3, #0]
 8025bbe:	f083 0301 	eor.w	r3, r3, #1
 8025bc2:	b2d8      	uxtb	r0, r3
 8025bc4:	687a      	ldr	r2, [r7, #4]
 8025bc6:	68fb      	ldr	r3, [r7, #12]
 8025bc8:	212c      	movs	r1, #44	; 0x2c
 8025bca:	fb01 f303 	mul.w	r3, r1, r3
 8025bce:	4413      	add	r3, r2
 8025bd0:	3354      	adds	r3, #84	; 0x54
 8025bd2:	4602      	mov	r2, r0
 8025bd4:	701a      	strb	r2, [r3, #0]
}
 8025bd6:	e163      	b.n	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8025bd8:	68fb      	ldr	r3, [r7, #12]
 8025bda:	015a      	lsls	r2, r3, #5
 8025bdc:	693b      	ldr	r3, [r7, #16]
 8025bde:	4413      	add	r3, r2
 8025be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025be4:	689b      	ldr	r3, [r3, #8]
 8025be6:	f003 0302 	and.w	r3, r3, #2
 8025bea:	2b02      	cmp	r3, #2
 8025bec:	f040 80f6 	bne.w	8025ddc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8025bf0:	687a      	ldr	r2, [r7, #4]
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	212c      	movs	r1, #44	; 0x2c
 8025bf6:	fb01 f303 	mul.w	r3, r1, r3
 8025bfa:	4413      	add	r3, r2
 8025bfc:	3361      	adds	r3, #97	; 0x61
 8025bfe:	781b      	ldrb	r3, [r3, #0]
 8025c00:	2b01      	cmp	r3, #1
 8025c02:	d109      	bne.n	8025c18 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8025c04:	687a      	ldr	r2, [r7, #4]
 8025c06:	68fb      	ldr	r3, [r7, #12]
 8025c08:	212c      	movs	r1, #44	; 0x2c
 8025c0a:	fb01 f303 	mul.w	r3, r1, r3
 8025c0e:	4413      	add	r3, r2
 8025c10:	3360      	adds	r3, #96	; 0x60
 8025c12:	2201      	movs	r2, #1
 8025c14:	701a      	strb	r2, [r3, #0]
 8025c16:	e0c9      	b.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8025c18:	687a      	ldr	r2, [r7, #4]
 8025c1a:	68fb      	ldr	r3, [r7, #12]
 8025c1c:	212c      	movs	r1, #44	; 0x2c
 8025c1e:	fb01 f303 	mul.w	r3, r1, r3
 8025c22:	4413      	add	r3, r2
 8025c24:	3361      	adds	r3, #97	; 0x61
 8025c26:	781b      	ldrb	r3, [r3, #0]
 8025c28:	2b05      	cmp	r3, #5
 8025c2a:	d109      	bne.n	8025c40 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8025c2c:	687a      	ldr	r2, [r7, #4]
 8025c2e:	68fb      	ldr	r3, [r7, #12]
 8025c30:	212c      	movs	r1, #44	; 0x2c
 8025c32:	fb01 f303 	mul.w	r3, r1, r3
 8025c36:	4413      	add	r3, r2
 8025c38:	3360      	adds	r3, #96	; 0x60
 8025c3a:	2205      	movs	r2, #5
 8025c3c:	701a      	strb	r2, [r3, #0]
 8025c3e:	e0b5      	b.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025c40:	687a      	ldr	r2, [r7, #4]
 8025c42:	68fb      	ldr	r3, [r7, #12]
 8025c44:	212c      	movs	r1, #44	; 0x2c
 8025c46:	fb01 f303 	mul.w	r3, r1, r3
 8025c4a:	4413      	add	r3, r2
 8025c4c:	3361      	adds	r3, #97	; 0x61
 8025c4e:	781b      	ldrb	r3, [r3, #0]
 8025c50:	2b06      	cmp	r3, #6
 8025c52:	d009      	beq.n	8025c68 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8025c54:	687a      	ldr	r2, [r7, #4]
 8025c56:	68fb      	ldr	r3, [r7, #12]
 8025c58:	212c      	movs	r1, #44	; 0x2c
 8025c5a:	fb01 f303 	mul.w	r3, r1, r3
 8025c5e:	4413      	add	r3, r2
 8025c60:	3361      	adds	r3, #97	; 0x61
 8025c62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8025c64:	2b08      	cmp	r3, #8
 8025c66:	d150      	bne.n	8025d0a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8025c68:	687a      	ldr	r2, [r7, #4]
 8025c6a:	68fb      	ldr	r3, [r7, #12]
 8025c6c:	212c      	movs	r1, #44	; 0x2c
 8025c6e:	fb01 f303 	mul.w	r3, r1, r3
 8025c72:	4413      	add	r3, r2
 8025c74:	335c      	adds	r3, #92	; 0x5c
 8025c76:	681b      	ldr	r3, [r3, #0]
 8025c78:	1c5a      	adds	r2, r3, #1
 8025c7a:	6879      	ldr	r1, [r7, #4]
 8025c7c:	68fb      	ldr	r3, [r7, #12]
 8025c7e:	202c      	movs	r0, #44	; 0x2c
 8025c80:	fb00 f303 	mul.w	r3, r0, r3
 8025c84:	440b      	add	r3, r1
 8025c86:	335c      	adds	r3, #92	; 0x5c
 8025c88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025c8a:	687a      	ldr	r2, [r7, #4]
 8025c8c:	68fb      	ldr	r3, [r7, #12]
 8025c8e:	212c      	movs	r1, #44	; 0x2c
 8025c90:	fb01 f303 	mul.w	r3, r1, r3
 8025c94:	4413      	add	r3, r2
 8025c96:	335c      	adds	r3, #92	; 0x5c
 8025c98:	681b      	ldr	r3, [r3, #0]
 8025c9a:	2b02      	cmp	r3, #2
 8025c9c:	d912      	bls.n	8025cc4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8025c9e:	687a      	ldr	r2, [r7, #4]
 8025ca0:	68fb      	ldr	r3, [r7, #12]
 8025ca2:	212c      	movs	r1, #44	; 0x2c
 8025ca4:	fb01 f303 	mul.w	r3, r1, r3
 8025ca8:	4413      	add	r3, r2
 8025caa:	335c      	adds	r3, #92	; 0x5c
 8025cac:	2200      	movs	r2, #0
 8025cae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025cb0:	687a      	ldr	r2, [r7, #4]
 8025cb2:	68fb      	ldr	r3, [r7, #12]
 8025cb4:	212c      	movs	r1, #44	; 0x2c
 8025cb6:	fb01 f303 	mul.w	r3, r1, r3
 8025cba:	4413      	add	r3, r2
 8025cbc:	3360      	adds	r3, #96	; 0x60
 8025cbe:	2204      	movs	r2, #4
 8025cc0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025cc2:	e073      	b.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025cc4:	687a      	ldr	r2, [r7, #4]
 8025cc6:	68fb      	ldr	r3, [r7, #12]
 8025cc8:	212c      	movs	r1, #44	; 0x2c
 8025cca:	fb01 f303 	mul.w	r3, r1, r3
 8025cce:	4413      	add	r3, r2
 8025cd0:	3360      	adds	r3, #96	; 0x60
 8025cd2:	2202      	movs	r2, #2
 8025cd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	015a      	lsls	r2, r3, #5
 8025cda:	693b      	ldr	r3, [r7, #16]
 8025cdc:	4413      	add	r3, r2
 8025cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ce2:	681b      	ldr	r3, [r3, #0]
 8025ce4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025ce6:	68bb      	ldr	r3, [r7, #8]
 8025ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025cec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025cee:	68bb      	ldr	r3, [r7, #8]
 8025cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025cf4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025cf6:	68fb      	ldr	r3, [r7, #12]
 8025cf8:	015a      	lsls	r2, r3, #5
 8025cfa:	693b      	ldr	r3, [r7, #16]
 8025cfc:	4413      	add	r3, r2
 8025cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d02:	461a      	mov	r2, r3
 8025d04:	68bb      	ldr	r3, [r7, #8]
 8025d06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8025d08:	e050      	b.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8025d0a:	687a      	ldr	r2, [r7, #4]
 8025d0c:	68fb      	ldr	r3, [r7, #12]
 8025d0e:	212c      	movs	r1, #44	; 0x2c
 8025d10:	fb01 f303 	mul.w	r3, r1, r3
 8025d14:	4413      	add	r3, r2
 8025d16:	3361      	adds	r3, #97	; 0x61
 8025d18:	781b      	ldrb	r3, [r3, #0]
 8025d1a:	2b03      	cmp	r3, #3
 8025d1c:	d122      	bne.n	8025d64 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8025d1e:	687a      	ldr	r2, [r7, #4]
 8025d20:	68fb      	ldr	r3, [r7, #12]
 8025d22:	212c      	movs	r1, #44	; 0x2c
 8025d24:	fb01 f303 	mul.w	r3, r1, r3
 8025d28:	4413      	add	r3, r2
 8025d2a:	3360      	adds	r3, #96	; 0x60
 8025d2c:	2202      	movs	r2, #2
 8025d2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8025d30:	68fb      	ldr	r3, [r7, #12]
 8025d32:	015a      	lsls	r2, r3, #5
 8025d34:	693b      	ldr	r3, [r7, #16]
 8025d36:	4413      	add	r3, r2
 8025d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d3c:	681b      	ldr	r3, [r3, #0]
 8025d3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8025d40:	68bb      	ldr	r3, [r7, #8]
 8025d42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8025d46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8025d48:	68bb      	ldr	r3, [r7, #8]
 8025d4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025d4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8025d50:	68fb      	ldr	r3, [r7, #12]
 8025d52:	015a      	lsls	r2, r3, #5
 8025d54:	693b      	ldr	r3, [r7, #16]
 8025d56:	4413      	add	r3, r2
 8025d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025d5c:	461a      	mov	r2, r3
 8025d5e:	68bb      	ldr	r3, [r7, #8]
 8025d60:	6013      	str	r3, [r2, #0]
 8025d62:	e023      	b.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8025d64:	687a      	ldr	r2, [r7, #4]
 8025d66:	68fb      	ldr	r3, [r7, #12]
 8025d68:	212c      	movs	r1, #44	; 0x2c
 8025d6a:	fb01 f303 	mul.w	r3, r1, r3
 8025d6e:	4413      	add	r3, r2
 8025d70:	3361      	adds	r3, #97	; 0x61
 8025d72:	781b      	ldrb	r3, [r3, #0]
 8025d74:	2b07      	cmp	r3, #7
 8025d76:	d119      	bne.n	8025dac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8025d78:	687a      	ldr	r2, [r7, #4]
 8025d7a:	68fb      	ldr	r3, [r7, #12]
 8025d7c:	212c      	movs	r1, #44	; 0x2c
 8025d7e:	fb01 f303 	mul.w	r3, r1, r3
 8025d82:	4413      	add	r3, r2
 8025d84:	335c      	adds	r3, #92	; 0x5c
 8025d86:	681b      	ldr	r3, [r3, #0]
 8025d88:	1c5a      	adds	r2, r3, #1
 8025d8a:	6879      	ldr	r1, [r7, #4]
 8025d8c:	68fb      	ldr	r3, [r7, #12]
 8025d8e:	202c      	movs	r0, #44	; 0x2c
 8025d90:	fb00 f303 	mul.w	r3, r0, r3
 8025d94:	440b      	add	r3, r1
 8025d96:	335c      	adds	r3, #92	; 0x5c
 8025d98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8025d9a:	687a      	ldr	r2, [r7, #4]
 8025d9c:	68fb      	ldr	r3, [r7, #12]
 8025d9e:	212c      	movs	r1, #44	; 0x2c
 8025da0:	fb01 f303 	mul.w	r3, r1, r3
 8025da4:	4413      	add	r3, r2
 8025da6:	3360      	adds	r3, #96	; 0x60
 8025da8:	2204      	movs	r2, #4
 8025daa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8025dac:	68fb      	ldr	r3, [r7, #12]
 8025dae:	015a      	lsls	r2, r3, #5
 8025db0:	693b      	ldr	r3, [r7, #16]
 8025db2:	4413      	add	r3, r2
 8025db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025db8:	461a      	mov	r2, r3
 8025dba:	2302      	movs	r3, #2
 8025dbc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8025dbe:	68fb      	ldr	r3, [r7, #12]
 8025dc0:	b2d9      	uxtb	r1, r3
 8025dc2:	687a      	ldr	r2, [r7, #4]
 8025dc4:	68fb      	ldr	r3, [r7, #12]
 8025dc6:	202c      	movs	r0, #44	; 0x2c
 8025dc8:	fb00 f303 	mul.w	r3, r0, r3
 8025dcc:	4413      	add	r3, r2
 8025dce:	3360      	adds	r3, #96	; 0x60
 8025dd0:	781b      	ldrb	r3, [r3, #0]
 8025dd2:	461a      	mov	r2, r3
 8025dd4:	6878      	ldr	r0, [r7, #4]
 8025dd6:	f007 fead 	bl	802db34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8025dda:	e061      	b.n	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8025ddc:	68fb      	ldr	r3, [r7, #12]
 8025dde:	015a      	lsls	r2, r3, #5
 8025de0:	693b      	ldr	r3, [r7, #16]
 8025de2:	4413      	add	r3, r2
 8025de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025de8:	689b      	ldr	r3, [r3, #8]
 8025dea:	f003 0310 	and.w	r3, r3, #16
 8025dee:	2b10      	cmp	r3, #16
 8025df0:	d156      	bne.n	8025ea0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8025df2:	687a      	ldr	r2, [r7, #4]
 8025df4:	68fb      	ldr	r3, [r7, #12]
 8025df6:	212c      	movs	r1, #44	; 0x2c
 8025df8:	fb01 f303 	mul.w	r3, r1, r3
 8025dfc:	4413      	add	r3, r2
 8025dfe:	333f      	adds	r3, #63	; 0x3f
 8025e00:	781b      	ldrb	r3, [r3, #0]
 8025e02:	2b03      	cmp	r3, #3
 8025e04:	d111      	bne.n	8025e2a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025e06:	687a      	ldr	r2, [r7, #4]
 8025e08:	68fb      	ldr	r3, [r7, #12]
 8025e0a:	212c      	movs	r1, #44	; 0x2c
 8025e0c:	fb01 f303 	mul.w	r3, r1, r3
 8025e10:	4413      	add	r3, r2
 8025e12:	335c      	adds	r3, #92	; 0x5c
 8025e14:	2200      	movs	r2, #0
 8025e16:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025e18:	687b      	ldr	r3, [r7, #4]
 8025e1a:	681b      	ldr	r3, [r3, #0]
 8025e1c:	68fa      	ldr	r2, [r7, #12]
 8025e1e:	b2d2      	uxtb	r2, r2
 8025e20:	4611      	mov	r1, r2
 8025e22:	4618      	mov	r0, r3
 8025e24:	f005 fbe7 	bl	802b5f6 <USB_HC_Halt>
 8025e28:	e031      	b.n	8025e8e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025e2a:	687a      	ldr	r2, [r7, #4]
 8025e2c:	68fb      	ldr	r3, [r7, #12]
 8025e2e:	212c      	movs	r1, #44	; 0x2c
 8025e30:	fb01 f303 	mul.w	r3, r1, r3
 8025e34:	4413      	add	r3, r2
 8025e36:	333f      	adds	r3, #63	; 0x3f
 8025e38:	781b      	ldrb	r3, [r3, #0]
 8025e3a:	2b00      	cmp	r3, #0
 8025e3c:	d009      	beq.n	8025e52 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8025e3e:	687a      	ldr	r2, [r7, #4]
 8025e40:	68fb      	ldr	r3, [r7, #12]
 8025e42:	212c      	movs	r1, #44	; 0x2c
 8025e44:	fb01 f303 	mul.w	r3, r1, r3
 8025e48:	4413      	add	r3, r2
 8025e4a:	333f      	adds	r3, #63	; 0x3f
 8025e4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8025e4e:	2b02      	cmp	r3, #2
 8025e50:	d11d      	bne.n	8025e8e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8025e52:	687a      	ldr	r2, [r7, #4]
 8025e54:	68fb      	ldr	r3, [r7, #12]
 8025e56:	212c      	movs	r1, #44	; 0x2c
 8025e58:	fb01 f303 	mul.w	r3, r1, r3
 8025e5c:	4413      	add	r3, r2
 8025e5e:	335c      	adds	r3, #92	; 0x5c
 8025e60:	2200      	movs	r2, #0
 8025e62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	691b      	ldr	r3, [r3, #16]
 8025e68:	2b00      	cmp	r3, #0
 8025e6a:	d110      	bne.n	8025e8e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8025e6c:	687a      	ldr	r2, [r7, #4]
 8025e6e:	68fb      	ldr	r3, [r7, #12]
 8025e70:	212c      	movs	r1, #44	; 0x2c
 8025e72:	fb01 f303 	mul.w	r3, r1, r3
 8025e76:	4413      	add	r3, r2
 8025e78:	3361      	adds	r3, #97	; 0x61
 8025e7a:	2203      	movs	r2, #3
 8025e7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025e7e:	687b      	ldr	r3, [r7, #4]
 8025e80:	681b      	ldr	r3, [r3, #0]
 8025e82:	68fa      	ldr	r2, [r7, #12]
 8025e84:	b2d2      	uxtb	r2, r2
 8025e86:	4611      	mov	r1, r2
 8025e88:	4618      	mov	r0, r3
 8025e8a:	f005 fbb4 	bl	802b5f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	015a      	lsls	r2, r3, #5
 8025e92:	693b      	ldr	r3, [r7, #16]
 8025e94:	4413      	add	r3, r2
 8025e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e9a:	461a      	mov	r2, r3
 8025e9c:	2310      	movs	r3, #16
 8025e9e:	6093      	str	r3, [r2, #8]
}
 8025ea0:	bf00      	nop
 8025ea2:	3718      	adds	r7, #24
 8025ea4:	46bd      	mov	sp, r7
 8025ea6:	bd80      	pop	{r7, pc}

08025ea8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8025ea8:	b580      	push	{r7, lr}
 8025eaa:	b088      	sub	sp, #32
 8025eac:	af00      	add	r7, sp, #0
 8025eae:	6078      	str	r0, [r7, #4]
 8025eb0:	460b      	mov	r3, r1
 8025eb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8025eb4:	687b      	ldr	r3, [r7, #4]
 8025eb6:	681b      	ldr	r3, [r3, #0]
 8025eb8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8025eba:	69fb      	ldr	r3, [r7, #28]
 8025ebc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8025ebe:	78fb      	ldrb	r3, [r7, #3]
 8025ec0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8025ec2:	697b      	ldr	r3, [r7, #20]
 8025ec4:	015a      	lsls	r2, r3, #5
 8025ec6:	69bb      	ldr	r3, [r7, #24]
 8025ec8:	4413      	add	r3, r2
 8025eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ece:	689b      	ldr	r3, [r3, #8]
 8025ed0:	f003 0304 	and.w	r3, r3, #4
 8025ed4:	2b04      	cmp	r3, #4
 8025ed6:	d11a      	bne.n	8025f0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8025ed8:	697b      	ldr	r3, [r7, #20]
 8025eda:	015a      	lsls	r2, r3, #5
 8025edc:	69bb      	ldr	r3, [r7, #24]
 8025ede:	4413      	add	r3, r2
 8025ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ee4:	461a      	mov	r2, r3
 8025ee6:	2304      	movs	r3, #4
 8025ee8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8025eea:	687a      	ldr	r2, [r7, #4]
 8025eec:	697b      	ldr	r3, [r7, #20]
 8025eee:	212c      	movs	r1, #44	; 0x2c
 8025ef0:	fb01 f303 	mul.w	r3, r1, r3
 8025ef4:	4413      	add	r3, r2
 8025ef6:	3361      	adds	r3, #97	; 0x61
 8025ef8:	2206      	movs	r2, #6
 8025efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025efc:	687b      	ldr	r3, [r7, #4]
 8025efe:	681b      	ldr	r3, [r3, #0]
 8025f00:	697a      	ldr	r2, [r7, #20]
 8025f02:	b2d2      	uxtb	r2, r2
 8025f04:	4611      	mov	r1, r2
 8025f06:	4618      	mov	r0, r3
 8025f08:	f005 fb75 	bl	802b5f6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8025f0c:	e331      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8025f0e:	697b      	ldr	r3, [r7, #20]
 8025f10:	015a      	lsls	r2, r3, #5
 8025f12:	69bb      	ldr	r3, [r7, #24]
 8025f14:	4413      	add	r3, r2
 8025f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f1a:	689b      	ldr	r3, [r3, #8]
 8025f1c:	f003 0320 	and.w	r3, r3, #32
 8025f20:	2b20      	cmp	r3, #32
 8025f22:	d12e      	bne.n	8025f82 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8025f24:	697b      	ldr	r3, [r7, #20]
 8025f26:	015a      	lsls	r2, r3, #5
 8025f28:	69bb      	ldr	r3, [r7, #24]
 8025f2a:	4413      	add	r3, r2
 8025f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f30:	461a      	mov	r2, r3
 8025f32:	2320      	movs	r3, #32
 8025f34:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8025f36:	687a      	ldr	r2, [r7, #4]
 8025f38:	697b      	ldr	r3, [r7, #20]
 8025f3a:	212c      	movs	r1, #44	; 0x2c
 8025f3c:	fb01 f303 	mul.w	r3, r1, r3
 8025f40:	4413      	add	r3, r2
 8025f42:	333d      	adds	r3, #61	; 0x3d
 8025f44:	781b      	ldrb	r3, [r3, #0]
 8025f46:	2b01      	cmp	r3, #1
 8025f48:	f040 8313 	bne.w	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8025f4c:	687a      	ldr	r2, [r7, #4]
 8025f4e:	697b      	ldr	r3, [r7, #20]
 8025f50:	212c      	movs	r1, #44	; 0x2c
 8025f52:	fb01 f303 	mul.w	r3, r1, r3
 8025f56:	4413      	add	r3, r2
 8025f58:	333d      	adds	r3, #61	; 0x3d
 8025f5a:	2200      	movs	r2, #0
 8025f5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8025f5e:	687a      	ldr	r2, [r7, #4]
 8025f60:	697b      	ldr	r3, [r7, #20]
 8025f62:	212c      	movs	r1, #44	; 0x2c
 8025f64:	fb01 f303 	mul.w	r3, r1, r3
 8025f68:	4413      	add	r3, r2
 8025f6a:	3360      	adds	r3, #96	; 0x60
 8025f6c:	2202      	movs	r2, #2
 8025f6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025f70:	687b      	ldr	r3, [r7, #4]
 8025f72:	681b      	ldr	r3, [r3, #0]
 8025f74:	697a      	ldr	r2, [r7, #20]
 8025f76:	b2d2      	uxtb	r2, r2
 8025f78:	4611      	mov	r1, r2
 8025f7a:	4618      	mov	r0, r3
 8025f7c:	f005 fb3b 	bl	802b5f6 <USB_HC_Halt>
}
 8025f80:	e2f7      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8025f82:	697b      	ldr	r3, [r7, #20]
 8025f84:	015a      	lsls	r2, r3, #5
 8025f86:	69bb      	ldr	r3, [r7, #24]
 8025f88:	4413      	add	r3, r2
 8025f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025f8e:	689b      	ldr	r3, [r3, #8]
 8025f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8025f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025f98:	d112      	bne.n	8025fc0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8025f9a:	697b      	ldr	r3, [r7, #20]
 8025f9c:	015a      	lsls	r2, r3, #5
 8025f9e:	69bb      	ldr	r3, [r7, #24]
 8025fa0:	4413      	add	r3, r2
 8025fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fa6:	461a      	mov	r2, r3
 8025fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025fac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8025fae:	687b      	ldr	r3, [r7, #4]
 8025fb0:	681b      	ldr	r3, [r3, #0]
 8025fb2:	697a      	ldr	r2, [r7, #20]
 8025fb4:	b2d2      	uxtb	r2, r2
 8025fb6:	4611      	mov	r1, r2
 8025fb8:	4618      	mov	r0, r3
 8025fba:	f005 fb1c 	bl	802b5f6 <USB_HC_Halt>
}
 8025fbe:	e2d8      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8025fc0:	697b      	ldr	r3, [r7, #20]
 8025fc2:	015a      	lsls	r2, r3, #5
 8025fc4:	69bb      	ldr	r3, [r7, #24]
 8025fc6:	4413      	add	r3, r2
 8025fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025fcc:	689b      	ldr	r3, [r3, #8]
 8025fce:	f003 0301 	and.w	r3, r3, #1
 8025fd2:	2b01      	cmp	r3, #1
 8025fd4:	d140      	bne.n	8026058 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8025fd6:	687a      	ldr	r2, [r7, #4]
 8025fd8:	697b      	ldr	r3, [r7, #20]
 8025fda:	212c      	movs	r1, #44	; 0x2c
 8025fdc:	fb01 f303 	mul.w	r3, r1, r3
 8025fe0:	4413      	add	r3, r2
 8025fe2:	335c      	adds	r3, #92	; 0x5c
 8025fe4:	2200      	movs	r2, #0
 8025fe6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8025fe8:	697b      	ldr	r3, [r7, #20]
 8025fea:	015a      	lsls	r2, r3, #5
 8025fec:	69bb      	ldr	r3, [r7, #24]
 8025fee:	4413      	add	r3, r2
 8025ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025ff4:	689b      	ldr	r3, [r3, #8]
 8025ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025ffa:	2b40      	cmp	r3, #64	; 0x40
 8025ffc:	d111      	bne.n	8026022 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8025ffe:	687a      	ldr	r2, [r7, #4]
 8026000:	697b      	ldr	r3, [r7, #20]
 8026002:	212c      	movs	r1, #44	; 0x2c
 8026004:	fb01 f303 	mul.w	r3, r1, r3
 8026008:	4413      	add	r3, r2
 802600a:	333d      	adds	r3, #61	; 0x3d
 802600c:	2201      	movs	r2, #1
 802600e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8026010:	697b      	ldr	r3, [r7, #20]
 8026012:	015a      	lsls	r2, r3, #5
 8026014:	69bb      	ldr	r3, [r7, #24]
 8026016:	4413      	add	r3, r2
 8026018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802601c:	461a      	mov	r2, r3
 802601e:	2340      	movs	r3, #64	; 0x40
 8026020:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8026022:	697b      	ldr	r3, [r7, #20]
 8026024:	015a      	lsls	r2, r3, #5
 8026026:	69bb      	ldr	r3, [r7, #24]
 8026028:	4413      	add	r3, r2
 802602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802602e:	461a      	mov	r2, r3
 8026030:	2301      	movs	r3, #1
 8026032:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8026034:	687a      	ldr	r2, [r7, #4]
 8026036:	697b      	ldr	r3, [r7, #20]
 8026038:	212c      	movs	r1, #44	; 0x2c
 802603a:	fb01 f303 	mul.w	r3, r1, r3
 802603e:	4413      	add	r3, r2
 8026040:	3361      	adds	r3, #97	; 0x61
 8026042:	2201      	movs	r2, #1
 8026044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026046:	687b      	ldr	r3, [r7, #4]
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	697a      	ldr	r2, [r7, #20]
 802604c:	b2d2      	uxtb	r2, r2
 802604e:	4611      	mov	r1, r2
 8026050:	4618      	mov	r0, r3
 8026052:	f005 fad0 	bl	802b5f6 <USB_HC_Halt>
}
 8026056:	e28c      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8026058:	697b      	ldr	r3, [r7, #20]
 802605a:	015a      	lsls	r2, r3, #5
 802605c:	69bb      	ldr	r3, [r7, #24]
 802605e:	4413      	add	r3, r2
 8026060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026064:	689b      	ldr	r3, [r3, #8]
 8026066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802606a:	2b40      	cmp	r3, #64	; 0x40
 802606c:	d12c      	bne.n	80260c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 802606e:	687a      	ldr	r2, [r7, #4]
 8026070:	697b      	ldr	r3, [r7, #20]
 8026072:	212c      	movs	r1, #44	; 0x2c
 8026074:	fb01 f303 	mul.w	r3, r1, r3
 8026078:	4413      	add	r3, r2
 802607a:	3361      	adds	r3, #97	; 0x61
 802607c:	2204      	movs	r2, #4
 802607e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8026080:	687a      	ldr	r2, [r7, #4]
 8026082:	697b      	ldr	r3, [r7, #20]
 8026084:	212c      	movs	r1, #44	; 0x2c
 8026086:	fb01 f303 	mul.w	r3, r1, r3
 802608a:	4413      	add	r3, r2
 802608c:	333d      	adds	r3, #61	; 0x3d
 802608e:	2201      	movs	r2, #1
 8026090:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8026092:	687a      	ldr	r2, [r7, #4]
 8026094:	697b      	ldr	r3, [r7, #20]
 8026096:	212c      	movs	r1, #44	; 0x2c
 8026098:	fb01 f303 	mul.w	r3, r1, r3
 802609c:	4413      	add	r3, r2
 802609e:	335c      	adds	r3, #92	; 0x5c
 80260a0:	2200      	movs	r2, #0
 80260a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80260a4:	687b      	ldr	r3, [r7, #4]
 80260a6:	681b      	ldr	r3, [r3, #0]
 80260a8:	697a      	ldr	r2, [r7, #20]
 80260aa:	b2d2      	uxtb	r2, r2
 80260ac:	4611      	mov	r1, r2
 80260ae:	4618      	mov	r0, r3
 80260b0:	f005 faa1 	bl	802b5f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80260b4:	697b      	ldr	r3, [r7, #20]
 80260b6:	015a      	lsls	r2, r3, #5
 80260b8:	69bb      	ldr	r3, [r7, #24]
 80260ba:	4413      	add	r3, r2
 80260bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260c0:	461a      	mov	r2, r3
 80260c2:	2340      	movs	r3, #64	; 0x40
 80260c4:	6093      	str	r3, [r2, #8]
}
 80260c6:	e254      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80260c8:	697b      	ldr	r3, [r7, #20]
 80260ca:	015a      	lsls	r2, r3, #5
 80260cc:	69bb      	ldr	r3, [r7, #24]
 80260ce:	4413      	add	r3, r2
 80260d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260d4:	689b      	ldr	r3, [r3, #8]
 80260d6:	f003 0308 	and.w	r3, r3, #8
 80260da:	2b08      	cmp	r3, #8
 80260dc:	d11a      	bne.n	8026114 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80260de:	697b      	ldr	r3, [r7, #20]
 80260e0:	015a      	lsls	r2, r3, #5
 80260e2:	69bb      	ldr	r3, [r7, #24]
 80260e4:	4413      	add	r3, r2
 80260e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80260ea:	461a      	mov	r2, r3
 80260ec:	2308      	movs	r3, #8
 80260ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80260f0:	687a      	ldr	r2, [r7, #4]
 80260f2:	697b      	ldr	r3, [r7, #20]
 80260f4:	212c      	movs	r1, #44	; 0x2c
 80260f6:	fb01 f303 	mul.w	r3, r1, r3
 80260fa:	4413      	add	r3, r2
 80260fc:	3361      	adds	r3, #97	; 0x61
 80260fe:	2205      	movs	r2, #5
 8026100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026102:	687b      	ldr	r3, [r7, #4]
 8026104:	681b      	ldr	r3, [r3, #0]
 8026106:	697a      	ldr	r2, [r7, #20]
 8026108:	b2d2      	uxtb	r2, r2
 802610a:	4611      	mov	r1, r2
 802610c:	4618      	mov	r0, r3
 802610e:	f005 fa72 	bl	802b5f6 <USB_HC_Halt>
}
 8026112:	e22e      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8026114:	697b      	ldr	r3, [r7, #20]
 8026116:	015a      	lsls	r2, r3, #5
 8026118:	69bb      	ldr	r3, [r7, #24]
 802611a:	4413      	add	r3, r2
 802611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026120:	689b      	ldr	r3, [r3, #8]
 8026122:	f003 0310 	and.w	r3, r3, #16
 8026126:	2b10      	cmp	r3, #16
 8026128:	d140      	bne.n	80261ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 802612a:	687a      	ldr	r2, [r7, #4]
 802612c:	697b      	ldr	r3, [r7, #20]
 802612e:	212c      	movs	r1, #44	; 0x2c
 8026130:	fb01 f303 	mul.w	r3, r1, r3
 8026134:	4413      	add	r3, r2
 8026136:	335c      	adds	r3, #92	; 0x5c
 8026138:	2200      	movs	r2, #0
 802613a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 802613c:	687a      	ldr	r2, [r7, #4]
 802613e:	697b      	ldr	r3, [r7, #20]
 8026140:	212c      	movs	r1, #44	; 0x2c
 8026142:	fb01 f303 	mul.w	r3, r1, r3
 8026146:	4413      	add	r3, r2
 8026148:	3361      	adds	r3, #97	; 0x61
 802614a:	2203      	movs	r2, #3
 802614c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 802614e:	687a      	ldr	r2, [r7, #4]
 8026150:	697b      	ldr	r3, [r7, #20]
 8026152:	212c      	movs	r1, #44	; 0x2c
 8026154:	fb01 f303 	mul.w	r3, r1, r3
 8026158:	4413      	add	r3, r2
 802615a:	333d      	adds	r3, #61	; 0x3d
 802615c:	781b      	ldrb	r3, [r3, #0]
 802615e:	2b00      	cmp	r3, #0
 8026160:	d112      	bne.n	8026188 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8026162:	687a      	ldr	r2, [r7, #4]
 8026164:	697b      	ldr	r3, [r7, #20]
 8026166:	212c      	movs	r1, #44	; 0x2c
 8026168:	fb01 f303 	mul.w	r3, r1, r3
 802616c:	4413      	add	r3, r2
 802616e:	333c      	adds	r3, #60	; 0x3c
 8026170:	781b      	ldrb	r3, [r3, #0]
 8026172:	2b00      	cmp	r3, #0
 8026174:	d108      	bne.n	8026188 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8026176:	687a      	ldr	r2, [r7, #4]
 8026178:	697b      	ldr	r3, [r7, #20]
 802617a:	212c      	movs	r1, #44	; 0x2c
 802617c:	fb01 f303 	mul.w	r3, r1, r3
 8026180:	4413      	add	r3, r2
 8026182:	333d      	adds	r3, #61	; 0x3d
 8026184:	2201      	movs	r2, #1
 8026186:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	697a      	ldr	r2, [r7, #20]
 802618e:	b2d2      	uxtb	r2, r2
 8026190:	4611      	mov	r1, r2
 8026192:	4618      	mov	r0, r3
 8026194:	f005 fa2f 	bl	802b5f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8026198:	697b      	ldr	r3, [r7, #20]
 802619a:	015a      	lsls	r2, r3, #5
 802619c:	69bb      	ldr	r3, [r7, #24]
 802619e:	4413      	add	r3, r2
 80261a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261a4:	461a      	mov	r2, r3
 80261a6:	2310      	movs	r3, #16
 80261a8:	6093      	str	r3, [r2, #8]
}
 80261aa:	e1e2      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80261ac:	697b      	ldr	r3, [r7, #20]
 80261ae:	015a      	lsls	r2, r3, #5
 80261b0:	69bb      	ldr	r3, [r7, #24]
 80261b2:	4413      	add	r3, r2
 80261b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80261b8:	689b      	ldr	r3, [r3, #8]
 80261ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80261be:	2b80      	cmp	r3, #128	; 0x80
 80261c0:	d164      	bne.n	802628c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80261c2:	687b      	ldr	r3, [r7, #4]
 80261c4:	691b      	ldr	r3, [r3, #16]
 80261c6:	2b00      	cmp	r3, #0
 80261c8:	d111      	bne.n	80261ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80261ca:	687a      	ldr	r2, [r7, #4]
 80261cc:	697b      	ldr	r3, [r7, #20]
 80261ce:	212c      	movs	r1, #44	; 0x2c
 80261d0:	fb01 f303 	mul.w	r3, r1, r3
 80261d4:	4413      	add	r3, r2
 80261d6:	3361      	adds	r3, #97	; 0x61
 80261d8:	2206      	movs	r2, #6
 80261da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80261dc:	687b      	ldr	r3, [r7, #4]
 80261de:	681b      	ldr	r3, [r3, #0]
 80261e0:	697a      	ldr	r2, [r7, #20]
 80261e2:	b2d2      	uxtb	r2, r2
 80261e4:	4611      	mov	r1, r2
 80261e6:	4618      	mov	r0, r3
 80261e8:	f005 fa05 	bl	802b5f6 <USB_HC_Halt>
 80261ec:	e044      	b.n	8026278 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80261ee:	687a      	ldr	r2, [r7, #4]
 80261f0:	697b      	ldr	r3, [r7, #20]
 80261f2:	212c      	movs	r1, #44	; 0x2c
 80261f4:	fb01 f303 	mul.w	r3, r1, r3
 80261f8:	4413      	add	r3, r2
 80261fa:	335c      	adds	r3, #92	; 0x5c
 80261fc:	681b      	ldr	r3, [r3, #0]
 80261fe:	1c5a      	adds	r2, r3, #1
 8026200:	6879      	ldr	r1, [r7, #4]
 8026202:	697b      	ldr	r3, [r7, #20]
 8026204:	202c      	movs	r0, #44	; 0x2c
 8026206:	fb00 f303 	mul.w	r3, r0, r3
 802620a:	440b      	add	r3, r1
 802620c:	335c      	adds	r3, #92	; 0x5c
 802620e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8026210:	687a      	ldr	r2, [r7, #4]
 8026212:	697b      	ldr	r3, [r7, #20]
 8026214:	212c      	movs	r1, #44	; 0x2c
 8026216:	fb01 f303 	mul.w	r3, r1, r3
 802621a:	4413      	add	r3, r2
 802621c:	335c      	adds	r3, #92	; 0x5c
 802621e:	681b      	ldr	r3, [r3, #0]
 8026220:	2b02      	cmp	r3, #2
 8026222:	d920      	bls.n	8026266 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8026224:	687a      	ldr	r2, [r7, #4]
 8026226:	697b      	ldr	r3, [r7, #20]
 8026228:	212c      	movs	r1, #44	; 0x2c
 802622a:	fb01 f303 	mul.w	r3, r1, r3
 802622e:	4413      	add	r3, r2
 8026230:	335c      	adds	r3, #92	; 0x5c
 8026232:	2200      	movs	r2, #0
 8026234:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8026236:	687a      	ldr	r2, [r7, #4]
 8026238:	697b      	ldr	r3, [r7, #20]
 802623a:	212c      	movs	r1, #44	; 0x2c
 802623c:	fb01 f303 	mul.w	r3, r1, r3
 8026240:	4413      	add	r3, r2
 8026242:	3360      	adds	r3, #96	; 0x60
 8026244:	2204      	movs	r2, #4
 8026246:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026248:	697b      	ldr	r3, [r7, #20]
 802624a:	b2d9      	uxtb	r1, r3
 802624c:	687a      	ldr	r2, [r7, #4]
 802624e:	697b      	ldr	r3, [r7, #20]
 8026250:	202c      	movs	r0, #44	; 0x2c
 8026252:	fb00 f303 	mul.w	r3, r0, r3
 8026256:	4413      	add	r3, r2
 8026258:	3360      	adds	r3, #96	; 0x60
 802625a:	781b      	ldrb	r3, [r3, #0]
 802625c:	461a      	mov	r2, r3
 802625e:	6878      	ldr	r0, [r7, #4]
 8026260:	f007 fc68 	bl	802db34 <HAL_HCD_HC_NotifyURBChange_Callback>
 8026264:	e008      	b.n	8026278 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026266:	687a      	ldr	r2, [r7, #4]
 8026268:	697b      	ldr	r3, [r7, #20]
 802626a:	212c      	movs	r1, #44	; 0x2c
 802626c:	fb01 f303 	mul.w	r3, r1, r3
 8026270:	4413      	add	r3, r2
 8026272:	3360      	adds	r3, #96	; 0x60
 8026274:	2202      	movs	r2, #2
 8026276:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8026278:	697b      	ldr	r3, [r7, #20]
 802627a:	015a      	lsls	r2, r3, #5
 802627c:	69bb      	ldr	r3, [r7, #24]
 802627e:	4413      	add	r3, r2
 8026280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026284:	461a      	mov	r2, r3
 8026286:	2380      	movs	r3, #128	; 0x80
 8026288:	6093      	str	r3, [r2, #8]
}
 802628a:	e172      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 802628c:	697b      	ldr	r3, [r7, #20]
 802628e:	015a      	lsls	r2, r3, #5
 8026290:	69bb      	ldr	r3, [r7, #24]
 8026292:	4413      	add	r3, r2
 8026294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026298:	689b      	ldr	r3, [r3, #8]
 802629a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80262a2:	d11b      	bne.n	80262dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80262a4:	687a      	ldr	r2, [r7, #4]
 80262a6:	697b      	ldr	r3, [r7, #20]
 80262a8:	212c      	movs	r1, #44	; 0x2c
 80262aa:	fb01 f303 	mul.w	r3, r1, r3
 80262ae:	4413      	add	r3, r2
 80262b0:	3361      	adds	r3, #97	; 0x61
 80262b2:	2208      	movs	r2, #8
 80262b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	681b      	ldr	r3, [r3, #0]
 80262ba:	697a      	ldr	r2, [r7, #20]
 80262bc:	b2d2      	uxtb	r2, r2
 80262be:	4611      	mov	r1, r2
 80262c0:	4618      	mov	r0, r3
 80262c2:	f005 f998 	bl	802b5f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80262c6:	697b      	ldr	r3, [r7, #20]
 80262c8:	015a      	lsls	r2, r3, #5
 80262ca:	69bb      	ldr	r3, [r7, #24]
 80262cc:	4413      	add	r3, r2
 80262ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262d2:	461a      	mov	r2, r3
 80262d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80262d8:	6093      	str	r3, [r2, #8]
}
 80262da:	e14a      	b.n	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80262dc:	697b      	ldr	r3, [r7, #20]
 80262de:	015a      	lsls	r2, r3, #5
 80262e0:	69bb      	ldr	r3, [r7, #24]
 80262e2:	4413      	add	r3, r2
 80262e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80262e8:	689b      	ldr	r3, [r3, #8]
 80262ea:	f003 0302 	and.w	r3, r3, #2
 80262ee:	2b02      	cmp	r3, #2
 80262f0:	f040 813f 	bne.w	8026572 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80262f4:	687a      	ldr	r2, [r7, #4]
 80262f6:	697b      	ldr	r3, [r7, #20]
 80262f8:	212c      	movs	r1, #44	; 0x2c
 80262fa:	fb01 f303 	mul.w	r3, r1, r3
 80262fe:	4413      	add	r3, r2
 8026300:	3361      	adds	r3, #97	; 0x61
 8026302:	781b      	ldrb	r3, [r3, #0]
 8026304:	2b01      	cmp	r3, #1
 8026306:	d17d      	bne.n	8026404 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8026308:	687a      	ldr	r2, [r7, #4]
 802630a:	697b      	ldr	r3, [r7, #20]
 802630c:	212c      	movs	r1, #44	; 0x2c
 802630e:	fb01 f303 	mul.w	r3, r1, r3
 8026312:	4413      	add	r3, r2
 8026314:	3360      	adds	r3, #96	; 0x60
 8026316:	2201      	movs	r2, #1
 8026318:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802631a:	687a      	ldr	r2, [r7, #4]
 802631c:	697b      	ldr	r3, [r7, #20]
 802631e:	212c      	movs	r1, #44	; 0x2c
 8026320:	fb01 f303 	mul.w	r3, r1, r3
 8026324:	4413      	add	r3, r2
 8026326:	333f      	adds	r3, #63	; 0x3f
 8026328:	781b      	ldrb	r3, [r3, #0]
 802632a:	2b02      	cmp	r3, #2
 802632c:	d00a      	beq.n	8026344 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 802632e:	687a      	ldr	r2, [r7, #4]
 8026330:	697b      	ldr	r3, [r7, #20]
 8026332:	212c      	movs	r1, #44	; 0x2c
 8026334:	fb01 f303 	mul.w	r3, r1, r3
 8026338:	4413      	add	r3, r2
 802633a:	333f      	adds	r3, #63	; 0x3f
 802633c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 802633e:	2b03      	cmp	r3, #3
 8026340:	f040 8100 	bne.w	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8026344:	687b      	ldr	r3, [r7, #4]
 8026346:	691b      	ldr	r3, [r3, #16]
 8026348:	2b00      	cmp	r3, #0
 802634a:	d113      	bne.n	8026374 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 802634c:	687a      	ldr	r2, [r7, #4]
 802634e:	697b      	ldr	r3, [r7, #20]
 8026350:	212c      	movs	r1, #44	; 0x2c
 8026352:	fb01 f303 	mul.w	r3, r1, r3
 8026356:	4413      	add	r3, r2
 8026358:	3355      	adds	r3, #85	; 0x55
 802635a:	781b      	ldrb	r3, [r3, #0]
 802635c:	f083 0301 	eor.w	r3, r3, #1
 8026360:	b2d8      	uxtb	r0, r3
 8026362:	687a      	ldr	r2, [r7, #4]
 8026364:	697b      	ldr	r3, [r7, #20]
 8026366:	212c      	movs	r1, #44	; 0x2c
 8026368:	fb01 f303 	mul.w	r3, r1, r3
 802636c:	4413      	add	r3, r2
 802636e:	3355      	adds	r3, #85	; 0x55
 8026370:	4602      	mov	r2, r0
 8026372:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8026374:	687b      	ldr	r3, [r7, #4]
 8026376:	691b      	ldr	r3, [r3, #16]
 8026378:	2b01      	cmp	r3, #1
 802637a:	f040 80e3 	bne.w	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
 802637e:	687a      	ldr	r2, [r7, #4]
 8026380:	697b      	ldr	r3, [r7, #20]
 8026382:	212c      	movs	r1, #44	; 0x2c
 8026384:	fb01 f303 	mul.w	r3, r1, r3
 8026388:	4413      	add	r3, r2
 802638a:	334c      	adds	r3, #76	; 0x4c
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	2b00      	cmp	r3, #0
 8026390:	f000 80d8 	beq.w	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8026394:	687a      	ldr	r2, [r7, #4]
 8026396:	697b      	ldr	r3, [r7, #20]
 8026398:	212c      	movs	r1, #44	; 0x2c
 802639a:	fb01 f303 	mul.w	r3, r1, r3
 802639e:	4413      	add	r3, r2
 80263a0:	334c      	adds	r3, #76	; 0x4c
 80263a2:	681b      	ldr	r3, [r3, #0]
 80263a4:	6879      	ldr	r1, [r7, #4]
 80263a6:	697a      	ldr	r2, [r7, #20]
 80263a8:	202c      	movs	r0, #44	; 0x2c
 80263aa:	fb00 f202 	mul.w	r2, r0, r2
 80263ae:	440a      	add	r2, r1
 80263b0:	3240      	adds	r2, #64	; 0x40
 80263b2:	8812      	ldrh	r2, [r2, #0]
 80263b4:	4413      	add	r3, r2
 80263b6:	3b01      	subs	r3, #1
 80263b8:	6879      	ldr	r1, [r7, #4]
 80263ba:	697a      	ldr	r2, [r7, #20]
 80263bc:	202c      	movs	r0, #44	; 0x2c
 80263be:	fb00 f202 	mul.w	r2, r0, r2
 80263c2:	440a      	add	r2, r1
 80263c4:	3240      	adds	r2, #64	; 0x40
 80263c6:	8812      	ldrh	r2, [r2, #0]
 80263c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80263cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80263ce:	68fb      	ldr	r3, [r7, #12]
 80263d0:	f003 0301 	and.w	r3, r3, #1
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	f000 80b5 	beq.w	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80263da:	687a      	ldr	r2, [r7, #4]
 80263dc:	697b      	ldr	r3, [r7, #20]
 80263de:	212c      	movs	r1, #44	; 0x2c
 80263e0:	fb01 f303 	mul.w	r3, r1, r3
 80263e4:	4413      	add	r3, r2
 80263e6:	3355      	adds	r3, #85	; 0x55
 80263e8:	781b      	ldrb	r3, [r3, #0]
 80263ea:	f083 0301 	eor.w	r3, r3, #1
 80263ee:	b2d8      	uxtb	r0, r3
 80263f0:	687a      	ldr	r2, [r7, #4]
 80263f2:	697b      	ldr	r3, [r7, #20]
 80263f4:	212c      	movs	r1, #44	; 0x2c
 80263f6:	fb01 f303 	mul.w	r3, r1, r3
 80263fa:	4413      	add	r3, r2
 80263fc:	3355      	adds	r3, #85	; 0x55
 80263fe:	4602      	mov	r2, r0
 8026400:	701a      	strb	r2, [r3, #0]
 8026402:	e09f      	b.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8026404:	687a      	ldr	r2, [r7, #4]
 8026406:	697b      	ldr	r3, [r7, #20]
 8026408:	212c      	movs	r1, #44	; 0x2c
 802640a:	fb01 f303 	mul.w	r3, r1, r3
 802640e:	4413      	add	r3, r2
 8026410:	3361      	adds	r3, #97	; 0x61
 8026412:	781b      	ldrb	r3, [r3, #0]
 8026414:	2b03      	cmp	r3, #3
 8026416:	d109      	bne.n	802642c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026418:	687a      	ldr	r2, [r7, #4]
 802641a:	697b      	ldr	r3, [r7, #20]
 802641c:	212c      	movs	r1, #44	; 0x2c
 802641e:	fb01 f303 	mul.w	r3, r1, r3
 8026422:	4413      	add	r3, r2
 8026424:	3360      	adds	r3, #96	; 0x60
 8026426:	2202      	movs	r2, #2
 8026428:	701a      	strb	r2, [r3, #0]
 802642a:	e08b      	b.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 802642c:	687a      	ldr	r2, [r7, #4]
 802642e:	697b      	ldr	r3, [r7, #20]
 8026430:	212c      	movs	r1, #44	; 0x2c
 8026432:	fb01 f303 	mul.w	r3, r1, r3
 8026436:	4413      	add	r3, r2
 8026438:	3361      	adds	r3, #97	; 0x61
 802643a:	781b      	ldrb	r3, [r3, #0]
 802643c:	2b04      	cmp	r3, #4
 802643e:	d109      	bne.n	8026454 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8026440:	687a      	ldr	r2, [r7, #4]
 8026442:	697b      	ldr	r3, [r7, #20]
 8026444:	212c      	movs	r1, #44	; 0x2c
 8026446:	fb01 f303 	mul.w	r3, r1, r3
 802644a:	4413      	add	r3, r2
 802644c:	3360      	adds	r3, #96	; 0x60
 802644e:	2202      	movs	r2, #2
 8026450:	701a      	strb	r2, [r3, #0]
 8026452:	e077      	b.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8026454:	687a      	ldr	r2, [r7, #4]
 8026456:	697b      	ldr	r3, [r7, #20]
 8026458:	212c      	movs	r1, #44	; 0x2c
 802645a:	fb01 f303 	mul.w	r3, r1, r3
 802645e:	4413      	add	r3, r2
 8026460:	3361      	adds	r3, #97	; 0x61
 8026462:	781b      	ldrb	r3, [r3, #0]
 8026464:	2b05      	cmp	r3, #5
 8026466:	d109      	bne.n	802647c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8026468:	687a      	ldr	r2, [r7, #4]
 802646a:	697b      	ldr	r3, [r7, #20]
 802646c:	212c      	movs	r1, #44	; 0x2c
 802646e:	fb01 f303 	mul.w	r3, r1, r3
 8026472:	4413      	add	r3, r2
 8026474:	3360      	adds	r3, #96	; 0x60
 8026476:	2205      	movs	r2, #5
 8026478:	701a      	strb	r2, [r3, #0]
 802647a:	e063      	b.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 802647c:	687a      	ldr	r2, [r7, #4]
 802647e:	697b      	ldr	r3, [r7, #20]
 8026480:	212c      	movs	r1, #44	; 0x2c
 8026482:	fb01 f303 	mul.w	r3, r1, r3
 8026486:	4413      	add	r3, r2
 8026488:	3361      	adds	r3, #97	; 0x61
 802648a:	781b      	ldrb	r3, [r3, #0]
 802648c:	2b06      	cmp	r3, #6
 802648e:	d009      	beq.n	80264a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8026490:	687a      	ldr	r2, [r7, #4]
 8026492:	697b      	ldr	r3, [r7, #20]
 8026494:	212c      	movs	r1, #44	; 0x2c
 8026496:	fb01 f303 	mul.w	r3, r1, r3
 802649a:	4413      	add	r3, r2
 802649c:	3361      	adds	r3, #97	; 0x61
 802649e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80264a0:	2b08      	cmp	r3, #8
 80264a2:	d14f      	bne.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80264a4:	687a      	ldr	r2, [r7, #4]
 80264a6:	697b      	ldr	r3, [r7, #20]
 80264a8:	212c      	movs	r1, #44	; 0x2c
 80264aa:	fb01 f303 	mul.w	r3, r1, r3
 80264ae:	4413      	add	r3, r2
 80264b0:	335c      	adds	r3, #92	; 0x5c
 80264b2:	681b      	ldr	r3, [r3, #0]
 80264b4:	1c5a      	adds	r2, r3, #1
 80264b6:	6879      	ldr	r1, [r7, #4]
 80264b8:	697b      	ldr	r3, [r7, #20]
 80264ba:	202c      	movs	r0, #44	; 0x2c
 80264bc:	fb00 f303 	mul.w	r3, r0, r3
 80264c0:	440b      	add	r3, r1
 80264c2:	335c      	adds	r3, #92	; 0x5c
 80264c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80264c6:	687a      	ldr	r2, [r7, #4]
 80264c8:	697b      	ldr	r3, [r7, #20]
 80264ca:	212c      	movs	r1, #44	; 0x2c
 80264cc:	fb01 f303 	mul.w	r3, r1, r3
 80264d0:	4413      	add	r3, r2
 80264d2:	335c      	adds	r3, #92	; 0x5c
 80264d4:	681b      	ldr	r3, [r3, #0]
 80264d6:	2b02      	cmp	r3, #2
 80264d8:	d912      	bls.n	8026500 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80264da:	687a      	ldr	r2, [r7, #4]
 80264dc:	697b      	ldr	r3, [r7, #20]
 80264de:	212c      	movs	r1, #44	; 0x2c
 80264e0:	fb01 f303 	mul.w	r3, r1, r3
 80264e4:	4413      	add	r3, r2
 80264e6:	335c      	adds	r3, #92	; 0x5c
 80264e8:	2200      	movs	r2, #0
 80264ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80264ec:	687a      	ldr	r2, [r7, #4]
 80264ee:	697b      	ldr	r3, [r7, #20]
 80264f0:	212c      	movs	r1, #44	; 0x2c
 80264f2:	fb01 f303 	mul.w	r3, r1, r3
 80264f6:	4413      	add	r3, r2
 80264f8:	3360      	adds	r3, #96	; 0x60
 80264fa:	2204      	movs	r2, #4
 80264fc:	701a      	strb	r2, [r3, #0]
 80264fe:	e021      	b.n	8026544 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8026500:	687a      	ldr	r2, [r7, #4]
 8026502:	697b      	ldr	r3, [r7, #20]
 8026504:	212c      	movs	r1, #44	; 0x2c
 8026506:	fb01 f303 	mul.w	r3, r1, r3
 802650a:	4413      	add	r3, r2
 802650c:	3360      	adds	r3, #96	; 0x60
 802650e:	2202      	movs	r2, #2
 8026510:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8026512:	697b      	ldr	r3, [r7, #20]
 8026514:	015a      	lsls	r2, r3, #5
 8026516:	69bb      	ldr	r3, [r7, #24]
 8026518:	4413      	add	r3, r2
 802651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802651e:	681b      	ldr	r3, [r3, #0]
 8026520:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8026522:	693b      	ldr	r3, [r7, #16]
 8026524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8026528:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 802652a:	693b      	ldr	r3, [r7, #16]
 802652c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8026530:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8026532:	697b      	ldr	r3, [r7, #20]
 8026534:	015a      	lsls	r2, r3, #5
 8026536:	69bb      	ldr	r3, [r7, #24]
 8026538:	4413      	add	r3, r2
 802653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802653e:	461a      	mov	r2, r3
 8026540:	693b      	ldr	r3, [r7, #16]
 8026542:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8026544:	697b      	ldr	r3, [r7, #20]
 8026546:	015a      	lsls	r2, r3, #5
 8026548:	69bb      	ldr	r3, [r7, #24]
 802654a:	4413      	add	r3, r2
 802654c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026550:	461a      	mov	r2, r3
 8026552:	2302      	movs	r3, #2
 8026554:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8026556:	697b      	ldr	r3, [r7, #20]
 8026558:	b2d9      	uxtb	r1, r3
 802655a:	687a      	ldr	r2, [r7, #4]
 802655c:	697b      	ldr	r3, [r7, #20]
 802655e:	202c      	movs	r0, #44	; 0x2c
 8026560:	fb00 f303 	mul.w	r3, r0, r3
 8026564:	4413      	add	r3, r2
 8026566:	3360      	adds	r3, #96	; 0x60
 8026568:	781b      	ldrb	r3, [r3, #0]
 802656a:	461a      	mov	r2, r3
 802656c:	6878      	ldr	r0, [r7, #4]
 802656e:	f007 fae1 	bl	802db34 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8026572:	bf00      	nop
 8026574:	3720      	adds	r7, #32
 8026576:	46bd      	mov	sp, r7
 8026578:	bd80      	pop	{r7, pc}

0802657a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802657a:	b580      	push	{r7, lr}
 802657c:	b08a      	sub	sp, #40	; 0x28
 802657e:	af00      	add	r7, sp, #0
 8026580:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026582:	687b      	ldr	r3, [r7, #4]
 8026584:	681b      	ldr	r3, [r3, #0]
 8026586:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8026588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802658a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 802658c:	687b      	ldr	r3, [r7, #4]
 802658e:	681b      	ldr	r3, [r3, #0]
 8026590:	6a1b      	ldr	r3, [r3, #32]
 8026592:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8026594:	69fb      	ldr	r3, [r7, #28]
 8026596:	f003 030f 	and.w	r3, r3, #15
 802659a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 802659c:	69fb      	ldr	r3, [r7, #28]
 802659e:	0c5b      	lsrs	r3, r3, #17
 80265a0:	f003 030f 	and.w	r3, r3, #15
 80265a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80265a6:	69fb      	ldr	r3, [r7, #28]
 80265a8:	091b      	lsrs	r3, r3, #4
 80265aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80265ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80265b0:	697b      	ldr	r3, [r7, #20]
 80265b2:	2b02      	cmp	r3, #2
 80265b4:	d004      	beq.n	80265c0 <HCD_RXQLVL_IRQHandler+0x46>
 80265b6:	697b      	ldr	r3, [r7, #20]
 80265b8:	2b05      	cmp	r3, #5
 80265ba:	f000 80a9 	beq.w	8026710 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80265be:	e0aa      	b.n	8026716 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80265c0:	693b      	ldr	r3, [r7, #16]
 80265c2:	2b00      	cmp	r3, #0
 80265c4:	f000 80a6 	beq.w	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
 80265c8:	687a      	ldr	r2, [r7, #4]
 80265ca:	69bb      	ldr	r3, [r7, #24]
 80265cc:	212c      	movs	r1, #44	; 0x2c
 80265ce:	fb01 f303 	mul.w	r3, r1, r3
 80265d2:	4413      	add	r3, r2
 80265d4:	3344      	adds	r3, #68	; 0x44
 80265d6:	681b      	ldr	r3, [r3, #0]
 80265d8:	2b00      	cmp	r3, #0
 80265da:	f000 809b 	beq.w	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80265de:	687a      	ldr	r2, [r7, #4]
 80265e0:	69bb      	ldr	r3, [r7, #24]
 80265e2:	212c      	movs	r1, #44	; 0x2c
 80265e4:	fb01 f303 	mul.w	r3, r1, r3
 80265e8:	4413      	add	r3, r2
 80265ea:	3350      	adds	r3, #80	; 0x50
 80265ec:	681a      	ldr	r2, [r3, #0]
 80265ee:	693b      	ldr	r3, [r7, #16]
 80265f0:	441a      	add	r2, r3
 80265f2:	6879      	ldr	r1, [r7, #4]
 80265f4:	69bb      	ldr	r3, [r7, #24]
 80265f6:	202c      	movs	r0, #44	; 0x2c
 80265f8:	fb00 f303 	mul.w	r3, r0, r3
 80265fc:	440b      	add	r3, r1
 80265fe:	334c      	adds	r3, #76	; 0x4c
 8026600:	681b      	ldr	r3, [r3, #0]
 8026602:	429a      	cmp	r2, r3
 8026604:	d87a      	bhi.n	80266fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8026606:	687b      	ldr	r3, [r7, #4]
 8026608:	6818      	ldr	r0, [r3, #0]
 802660a:	687a      	ldr	r2, [r7, #4]
 802660c:	69bb      	ldr	r3, [r7, #24]
 802660e:	212c      	movs	r1, #44	; 0x2c
 8026610:	fb01 f303 	mul.w	r3, r1, r3
 8026614:	4413      	add	r3, r2
 8026616:	3344      	adds	r3, #68	; 0x44
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	693a      	ldr	r2, [r7, #16]
 802661c:	b292      	uxth	r2, r2
 802661e:	4619      	mov	r1, r3
 8026620:	f004 fb40 	bl	802aca4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8026624:	687a      	ldr	r2, [r7, #4]
 8026626:	69bb      	ldr	r3, [r7, #24]
 8026628:	212c      	movs	r1, #44	; 0x2c
 802662a:	fb01 f303 	mul.w	r3, r1, r3
 802662e:	4413      	add	r3, r2
 8026630:	3344      	adds	r3, #68	; 0x44
 8026632:	681a      	ldr	r2, [r3, #0]
 8026634:	693b      	ldr	r3, [r7, #16]
 8026636:	441a      	add	r2, r3
 8026638:	6879      	ldr	r1, [r7, #4]
 802663a:	69bb      	ldr	r3, [r7, #24]
 802663c:	202c      	movs	r0, #44	; 0x2c
 802663e:	fb00 f303 	mul.w	r3, r0, r3
 8026642:	440b      	add	r3, r1
 8026644:	3344      	adds	r3, #68	; 0x44
 8026646:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8026648:	687a      	ldr	r2, [r7, #4]
 802664a:	69bb      	ldr	r3, [r7, #24]
 802664c:	212c      	movs	r1, #44	; 0x2c
 802664e:	fb01 f303 	mul.w	r3, r1, r3
 8026652:	4413      	add	r3, r2
 8026654:	3350      	adds	r3, #80	; 0x50
 8026656:	681a      	ldr	r2, [r3, #0]
 8026658:	693b      	ldr	r3, [r7, #16]
 802665a:	441a      	add	r2, r3
 802665c:	6879      	ldr	r1, [r7, #4]
 802665e:	69bb      	ldr	r3, [r7, #24]
 8026660:	202c      	movs	r0, #44	; 0x2c
 8026662:	fb00 f303 	mul.w	r3, r0, r3
 8026666:	440b      	add	r3, r1
 8026668:	3350      	adds	r3, #80	; 0x50
 802666a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 802666c:	69bb      	ldr	r3, [r7, #24]
 802666e:	015a      	lsls	r2, r3, #5
 8026670:	6a3b      	ldr	r3, [r7, #32]
 8026672:	4413      	add	r3, r2
 8026674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026678:	691b      	ldr	r3, [r3, #16]
 802667a:	0cdb      	lsrs	r3, r3, #19
 802667c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8026680:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8026682:	687a      	ldr	r2, [r7, #4]
 8026684:	69bb      	ldr	r3, [r7, #24]
 8026686:	212c      	movs	r1, #44	; 0x2c
 8026688:	fb01 f303 	mul.w	r3, r1, r3
 802668c:	4413      	add	r3, r2
 802668e:	3340      	adds	r3, #64	; 0x40
 8026690:	881b      	ldrh	r3, [r3, #0]
 8026692:	461a      	mov	r2, r3
 8026694:	693b      	ldr	r3, [r7, #16]
 8026696:	4293      	cmp	r3, r2
 8026698:	d13c      	bne.n	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
 802669a:	68fb      	ldr	r3, [r7, #12]
 802669c:	2b00      	cmp	r3, #0
 802669e:	d039      	beq.n	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80266a0:	69bb      	ldr	r3, [r7, #24]
 80266a2:	015a      	lsls	r2, r3, #5
 80266a4:	6a3b      	ldr	r3, [r7, #32]
 80266a6:	4413      	add	r3, r2
 80266a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80266ac:	681b      	ldr	r3, [r3, #0]
 80266ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80266b0:	68bb      	ldr	r3, [r7, #8]
 80266b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80266b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80266b8:	68bb      	ldr	r3, [r7, #8]
 80266ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80266be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80266c0:	69bb      	ldr	r3, [r7, #24]
 80266c2:	015a      	lsls	r2, r3, #5
 80266c4:	6a3b      	ldr	r3, [r7, #32]
 80266c6:	4413      	add	r3, r2
 80266c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80266cc:	461a      	mov	r2, r3
 80266ce:	68bb      	ldr	r3, [r7, #8]
 80266d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80266d2:	687a      	ldr	r2, [r7, #4]
 80266d4:	69bb      	ldr	r3, [r7, #24]
 80266d6:	212c      	movs	r1, #44	; 0x2c
 80266d8:	fb01 f303 	mul.w	r3, r1, r3
 80266dc:	4413      	add	r3, r2
 80266de:	3354      	adds	r3, #84	; 0x54
 80266e0:	781b      	ldrb	r3, [r3, #0]
 80266e2:	f083 0301 	eor.w	r3, r3, #1
 80266e6:	b2d8      	uxtb	r0, r3
 80266e8:	687a      	ldr	r2, [r7, #4]
 80266ea:	69bb      	ldr	r3, [r7, #24]
 80266ec:	212c      	movs	r1, #44	; 0x2c
 80266ee:	fb01 f303 	mul.w	r3, r1, r3
 80266f2:	4413      	add	r3, r2
 80266f4:	3354      	adds	r3, #84	; 0x54
 80266f6:	4602      	mov	r2, r0
 80266f8:	701a      	strb	r2, [r3, #0]
      break;
 80266fa:	e00b      	b.n	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80266fc:	687a      	ldr	r2, [r7, #4]
 80266fe:	69bb      	ldr	r3, [r7, #24]
 8026700:	212c      	movs	r1, #44	; 0x2c
 8026702:	fb01 f303 	mul.w	r3, r1, r3
 8026706:	4413      	add	r3, r2
 8026708:	3360      	adds	r3, #96	; 0x60
 802670a:	2204      	movs	r2, #4
 802670c:	701a      	strb	r2, [r3, #0]
      break;
 802670e:	e001      	b.n	8026714 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8026710:	bf00      	nop
 8026712:	e000      	b.n	8026716 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8026714:	bf00      	nop
  }
}
 8026716:	bf00      	nop
 8026718:	3728      	adds	r7, #40	; 0x28
 802671a:	46bd      	mov	sp, r7
 802671c:	bd80      	pop	{r7, pc}

0802671e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 802671e:	b580      	push	{r7, lr}
 8026720:	b086      	sub	sp, #24
 8026722:	af00      	add	r7, sp, #0
 8026724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802672c:	697b      	ldr	r3, [r7, #20]
 802672e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8026730:	693b      	ldr	r3, [r7, #16]
 8026732:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026736:	681b      	ldr	r3, [r3, #0]
 8026738:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 802673a:	693b      	ldr	r3, [r7, #16]
 802673c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8026740:	681b      	ldr	r3, [r3, #0]
 8026742:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8026744:	68bb      	ldr	r3, [r7, #8]
 8026746:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802674a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 802674c:	68fb      	ldr	r3, [r7, #12]
 802674e:	f003 0302 	and.w	r3, r3, #2
 8026752:	2b02      	cmp	r3, #2
 8026754:	d10b      	bne.n	802676e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8026756:	68fb      	ldr	r3, [r7, #12]
 8026758:	f003 0301 	and.w	r3, r3, #1
 802675c:	2b01      	cmp	r3, #1
 802675e:	d102      	bne.n	8026766 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8026760:	6878      	ldr	r0, [r7, #4]
 8026762:	f007 f9cb 	bl	802dafc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8026766:	68bb      	ldr	r3, [r7, #8]
 8026768:	f043 0302 	orr.w	r3, r3, #2
 802676c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 802676e:	68fb      	ldr	r3, [r7, #12]
 8026770:	f003 0308 	and.w	r3, r3, #8
 8026774:	2b08      	cmp	r3, #8
 8026776:	d132      	bne.n	80267de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8026778:	68bb      	ldr	r3, [r7, #8]
 802677a:	f043 0308 	orr.w	r3, r3, #8
 802677e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8026780:	68fb      	ldr	r3, [r7, #12]
 8026782:	f003 0304 	and.w	r3, r3, #4
 8026786:	2b04      	cmp	r3, #4
 8026788:	d126      	bne.n	80267d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	699b      	ldr	r3, [r3, #24]
 802678e:	2b02      	cmp	r3, #2
 8026790:	d113      	bne.n	80267ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8026792:	68fb      	ldr	r3, [r7, #12]
 8026794:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8026798:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 802679c:	d106      	bne.n	80267ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 802679e:	687b      	ldr	r3, [r7, #4]
 80267a0:	681b      	ldr	r3, [r3, #0]
 80267a2:	2102      	movs	r1, #2
 80267a4:	4618      	mov	r0, r3
 80267a6:	f004 fbeb 	bl	802af80 <USB_InitFSLSPClkSel>
 80267aa:	e011      	b.n	80267d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80267ac:	687b      	ldr	r3, [r7, #4]
 80267ae:	681b      	ldr	r3, [r3, #0]
 80267b0:	2101      	movs	r1, #1
 80267b2:	4618      	mov	r0, r3
 80267b4:	f004 fbe4 	bl	802af80 <USB_InitFSLSPClkSel>
 80267b8:	e00a      	b.n	80267d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80267ba:	687b      	ldr	r3, [r7, #4]
 80267bc:	68db      	ldr	r3, [r3, #12]
 80267be:	2b01      	cmp	r3, #1
 80267c0:	d106      	bne.n	80267d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80267c2:	693b      	ldr	r3, [r7, #16]
 80267c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80267c8:	461a      	mov	r2, r3
 80267ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80267ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80267d0:	6878      	ldr	r0, [r7, #4]
 80267d2:	f007 f9bd 	bl	802db50 <HAL_HCD_PortEnabled_Callback>
 80267d6:	e002      	b.n	80267de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80267d8:	6878      	ldr	r0, [r7, #4]
 80267da:	f007 f9c7 	bl	802db6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80267de:	68fb      	ldr	r3, [r7, #12]
 80267e0:	f003 0320 	and.w	r3, r3, #32
 80267e4:	2b20      	cmp	r3, #32
 80267e6:	d103      	bne.n	80267f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80267e8:	68bb      	ldr	r3, [r7, #8]
 80267ea:	f043 0320 	orr.w	r3, r3, #32
 80267ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80267f0:	693b      	ldr	r3, [r7, #16]
 80267f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80267f6:	461a      	mov	r2, r3
 80267f8:	68bb      	ldr	r3, [r7, #8]
 80267fa:	6013      	str	r3, [r2, #0]
}
 80267fc:	bf00      	nop
 80267fe:	3718      	adds	r7, #24
 8026800:	46bd      	mov	sp, r7
 8026802:	bd80      	pop	{r7, pc}

08026804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8026804:	b580      	push	{r7, lr}
 8026806:	b084      	sub	sp, #16
 8026808:	af00      	add	r7, sp, #0
 802680a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 802680c:	687b      	ldr	r3, [r7, #4]
 802680e:	2b00      	cmp	r3, #0
 8026810:	d101      	bne.n	8026816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8026812:	2301      	movs	r3, #1
 8026814:	e12b      	b.n	8026a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8026816:	687b      	ldr	r3, [r7, #4]
 8026818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802681c:	b2db      	uxtb	r3, r3
 802681e:	2b00      	cmp	r3, #0
 8026820:	d106      	bne.n	8026830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8026822:	687b      	ldr	r3, [r7, #4]
 8026824:	2200      	movs	r2, #0
 8026826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802682a:	6878      	ldr	r0, [r7, #4]
 802682c:	f7fa ff70 	bl	8021710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	2224      	movs	r2, #36	; 0x24
 8026834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8026838:	687b      	ldr	r3, [r7, #4]
 802683a:	681b      	ldr	r3, [r3, #0]
 802683c:	681a      	ldr	r2, [r3, #0]
 802683e:	687b      	ldr	r3, [r7, #4]
 8026840:	681b      	ldr	r3, [r3, #0]
 8026842:	f022 0201 	bic.w	r2, r2, #1
 8026846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8026848:	687b      	ldr	r3, [r7, #4]
 802684a:	681b      	ldr	r3, [r3, #0]
 802684c:	681a      	ldr	r2, [r3, #0]
 802684e:	687b      	ldr	r3, [r7, #4]
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	681a      	ldr	r2, [r3, #0]
 802685e:	687b      	ldr	r3, [r7, #4]
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8026866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8026868:	f001 fa0c 	bl	8027c84 <HAL_RCC_GetPCLK1Freq>
 802686c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 802686e:	687b      	ldr	r3, [r7, #4]
 8026870:	685b      	ldr	r3, [r3, #4]
 8026872:	4a81      	ldr	r2, [pc, #516]	; (8026a78 <HAL_I2C_Init+0x274>)
 8026874:	4293      	cmp	r3, r2
 8026876:	d807      	bhi.n	8026888 <HAL_I2C_Init+0x84>
 8026878:	68fb      	ldr	r3, [r7, #12]
 802687a:	4a80      	ldr	r2, [pc, #512]	; (8026a7c <HAL_I2C_Init+0x278>)
 802687c:	4293      	cmp	r3, r2
 802687e:	bf94      	ite	ls
 8026880:	2301      	movls	r3, #1
 8026882:	2300      	movhi	r3, #0
 8026884:	b2db      	uxtb	r3, r3
 8026886:	e006      	b.n	8026896 <HAL_I2C_Init+0x92>
 8026888:	68fb      	ldr	r3, [r7, #12]
 802688a:	4a7d      	ldr	r2, [pc, #500]	; (8026a80 <HAL_I2C_Init+0x27c>)
 802688c:	4293      	cmp	r3, r2
 802688e:	bf94      	ite	ls
 8026890:	2301      	movls	r3, #1
 8026892:	2300      	movhi	r3, #0
 8026894:	b2db      	uxtb	r3, r3
 8026896:	2b00      	cmp	r3, #0
 8026898:	d001      	beq.n	802689e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 802689a:	2301      	movs	r3, #1
 802689c:	e0e7      	b.n	8026a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802689e:	68fb      	ldr	r3, [r7, #12]
 80268a0:	4a78      	ldr	r2, [pc, #480]	; (8026a84 <HAL_I2C_Init+0x280>)
 80268a2:	fba2 2303 	umull	r2, r3, r2, r3
 80268a6:	0c9b      	lsrs	r3, r3, #18
 80268a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80268aa:	687b      	ldr	r3, [r7, #4]
 80268ac:	681b      	ldr	r3, [r3, #0]
 80268ae:	685b      	ldr	r3, [r3, #4]
 80268b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80268b4:	687b      	ldr	r3, [r7, #4]
 80268b6:	681b      	ldr	r3, [r3, #0]
 80268b8:	68ba      	ldr	r2, [r7, #8]
 80268ba:	430a      	orrs	r2, r1
 80268bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80268be:	687b      	ldr	r3, [r7, #4]
 80268c0:	681b      	ldr	r3, [r3, #0]
 80268c2:	6a1b      	ldr	r3, [r3, #32]
 80268c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80268c8:	687b      	ldr	r3, [r7, #4]
 80268ca:	685b      	ldr	r3, [r3, #4]
 80268cc:	4a6a      	ldr	r2, [pc, #424]	; (8026a78 <HAL_I2C_Init+0x274>)
 80268ce:	4293      	cmp	r3, r2
 80268d0:	d802      	bhi.n	80268d8 <HAL_I2C_Init+0xd4>
 80268d2:	68bb      	ldr	r3, [r7, #8]
 80268d4:	3301      	adds	r3, #1
 80268d6:	e009      	b.n	80268ec <HAL_I2C_Init+0xe8>
 80268d8:	68bb      	ldr	r3, [r7, #8]
 80268da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80268de:	fb02 f303 	mul.w	r3, r2, r3
 80268e2:	4a69      	ldr	r2, [pc, #420]	; (8026a88 <HAL_I2C_Init+0x284>)
 80268e4:	fba2 2303 	umull	r2, r3, r2, r3
 80268e8:	099b      	lsrs	r3, r3, #6
 80268ea:	3301      	adds	r3, #1
 80268ec:	687a      	ldr	r2, [r7, #4]
 80268ee:	6812      	ldr	r2, [r2, #0]
 80268f0:	430b      	orrs	r3, r1
 80268f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80268f4:	687b      	ldr	r3, [r7, #4]
 80268f6:	681b      	ldr	r3, [r3, #0]
 80268f8:	69db      	ldr	r3, [r3, #28]
 80268fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80268fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8026902:	687b      	ldr	r3, [r7, #4]
 8026904:	685b      	ldr	r3, [r3, #4]
 8026906:	495c      	ldr	r1, [pc, #368]	; (8026a78 <HAL_I2C_Init+0x274>)
 8026908:	428b      	cmp	r3, r1
 802690a:	d819      	bhi.n	8026940 <HAL_I2C_Init+0x13c>
 802690c:	68fb      	ldr	r3, [r7, #12]
 802690e:	1e59      	subs	r1, r3, #1
 8026910:	687b      	ldr	r3, [r7, #4]
 8026912:	685b      	ldr	r3, [r3, #4]
 8026914:	005b      	lsls	r3, r3, #1
 8026916:	fbb1 f3f3 	udiv	r3, r1, r3
 802691a:	1c59      	adds	r1, r3, #1
 802691c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8026920:	400b      	ands	r3, r1
 8026922:	2b00      	cmp	r3, #0
 8026924:	d00a      	beq.n	802693c <HAL_I2C_Init+0x138>
 8026926:	68fb      	ldr	r3, [r7, #12]
 8026928:	1e59      	subs	r1, r3, #1
 802692a:	687b      	ldr	r3, [r7, #4]
 802692c:	685b      	ldr	r3, [r3, #4]
 802692e:	005b      	lsls	r3, r3, #1
 8026930:	fbb1 f3f3 	udiv	r3, r1, r3
 8026934:	3301      	adds	r3, #1
 8026936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802693a:	e051      	b.n	80269e0 <HAL_I2C_Init+0x1dc>
 802693c:	2304      	movs	r3, #4
 802693e:	e04f      	b.n	80269e0 <HAL_I2C_Init+0x1dc>
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	689b      	ldr	r3, [r3, #8]
 8026944:	2b00      	cmp	r3, #0
 8026946:	d111      	bne.n	802696c <HAL_I2C_Init+0x168>
 8026948:	68fb      	ldr	r3, [r7, #12]
 802694a:	1e58      	subs	r0, r3, #1
 802694c:	687b      	ldr	r3, [r7, #4]
 802694e:	6859      	ldr	r1, [r3, #4]
 8026950:	460b      	mov	r3, r1
 8026952:	005b      	lsls	r3, r3, #1
 8026954:	440b      	add	r3, r1
 8026956:	fbb0 f3f3 	udiv	r3, r0, r3
 802695a:	3301      	adds	r3, #1
 802695c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026960:	2b00      	cmp	r3, #0
 8026962:	bf0c      	ite	eq
 8026964:	2301      	moveq	r3, #1
 8026966:	2300      	movne	r3, #0
 8026968:	b2db      	uxtb	r3, r3
 802696a:	e012      	b.n	8026992 <HAL_I2C_Init+0x18e>
 802696c:	68fb      	ldr	r3, [r7, #12]
 802696e:	1e58      	subs	r0, r3, #1
 8026970:	687b      	ldr	r3, [r7, #4]
 8026972:	6859      	ldr	r1, [r3, #4]
 8026974:	460b      	mov	r3, r1
 8026976:	009b      	lsls	r3, r3, #2
 8026978:	440b      	add	r3, r1
 802697a:	0099      	lsls	r1, r3, #2
 802697c:	440b      	add	r3, r1
 802697e:	fbb0 f3f3 	udiv	r3, r0, r3
 8026982:	3301      	adds	r3, #1
 8026984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8026988:	2b00      	cmp	r3, #0
 802698a:	bf0c      	ite	eq
 802698c:	2301      	moveq	r3, #1
 802698e:	2300      	movne	r3, #0
 8026990:	b2db      	uxtb	r3, r3
 8026992:	2b00      	cmp	r3, #0
 8026994:	d001      	beq.n	802699a <HAL_I2C_Init+0x196>
 8026996:	2301      	movs	r3, #1
 8026998:	e022      	b.n	80269e0 <HAL_I2C_Init+0x1dc>
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	689b      	ldr	r3, [r3, #8]
 802699e:	2b00      	cmp	r3, #0
 80269a0:	d10e      	bne.n	80269c0 <HAL_I2C_Init+0x1bc>
 80269a2:	68fb      	ldr	r3, [r7, #12]
 80269a4:	1e58      	subs	r0, r3, #1
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	6859      	ldr	r1, [r3, #4]
 80269aa:	460b      	mov	r3, r1
 80269ac:	005b      	lsls	r3, r3, #1
 80269ae:	440b      	add	r3, r1
 80269b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80269b4:	3301      	adds	r3, #1
 80269b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80269ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80269be:	e00f      	b.n	80269e0 <HAL_I2C_Init+0x1dc>
 80269c0:	68fb      	ldr	r3, [r7, #12]
 80269c2:	1e58      	subs	r0, r3, #1
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	6859      	ldr	r1, [r3, #4]
 80269c8:	460b      	mov	r3, r1
 80269ca:	009b      	lsls	r3, r3, #2
 80269cc:	440b      	add	r3, r1
 80269ce:	0099      	lsls	r1, r3, #2
 80269d0:	440b      	add	r3, r1
 80269d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80269d6:	3301      	adds	r3, #1
 80269d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80269dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80269e0:	6879      	ldr	r1, [r7, #4]
 80269e2:	6809      	ldr	r1, [r1, #0]
 80269e4:	4313      	orrs	r3, r2
 80269e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	681b      	ldr	r3, [r3, #0]
 80269ec:	681b      	ldr	r3, [r3, #0]
 80269ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	69da      	ldr	r2, [r3, #28]
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	6a1b      	ldr	r3, [r3, #32]
 80269fa:	431a      	orrs	r2, r3
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	681b      	ldr	r3, [r3, #0]
 8026a00:	430a      	orrs	r2, r1
 8026a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8026a04:	687b      	ldr	r3, [r7, #4]
 8026a06:	681b      	ldr	r3, [r3, #0]
 8026a08:	689b      	ldr	r3, [r3, #8]
 8026a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8026a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8026a12:	687a      	ldr	r2, [r7, #4]
 8026a14:	6911      	ldr	r1, [r2, #16]
 8026a16:	687a      	ldr	r2, [r7, #4]
 8026a18:	68d2      	ldr	r2, [r2, #12]
 8026a1a:	4311      	orrs	r1, r2
 8026a1c:	687a      	ldr	r2, [r7, #4]
 8026a1e:	6812      	ldr	r2, [r2, #0]
 8026a20:	430b      	orrs	r3, r1
 8026a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	681b      	ldr	r3, [r3, #0]
 8026a28:	68db      	ldr	r3, [r3, #12]
 8026a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	695a      	ldr	r2, [r3, #20]
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	699b      	ldr	r3, [r3, #24]
 8026a36:	431a      	orrs	r2, r3
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	430a      	orrs	r2, r1
 8026a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	681b      	ldr	r3, [r3, #0]
 8026a44:	681a      	ldr	r2, [r3, #0]
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	681b      	ldr	r3, [r3, #0]
 8026a4a:	f042 0201 	orr.w	r2, r2, #1
 8026a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	2200      	movs	r2, #0
 8026a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	2220      	movs	r2, #32
 8026a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	2200      	movs	r2, #0
 8026a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	2200      	movs	r2, #0
 8026a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8026a6c:	2300      	movs	r3, #0
}
 8026a6e:	4618      	mov	r0, r3
 8026a70:	3710      	adds	r7, #16
 8026a72:	46bd      	mov	sp, r7
 8026a74:	bd80      	pop	{r7, pc}
 8026a76:	bf00      	nop
 8026a78:	000186a0 	.word	0x000186a0
 8026a7c:	001e847f 	.word	0x001e847f
 8026a80:	003d08ff 	.word	0x003d08ff
 8026a84:	431bde83 	.word	0x431bde83
 8026a88:	10624dd3 	.word	0x10624dd3

08026a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8026a8c:	b480      	push	{r7}
 8026a8e:	b083      	sub	sp, #12
 8026a90:	af00      	add	r7, sp, #0
 8026a92:	6078      	str	r0, [r7, #4]
 8026a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026a96:	687b      	ldr	r3, [r7, #4]
 8026a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026a9c:	b2db      	uxtb	r3, r3
 8026a9e:	2b20      	cmp	r3, #32
 8026aa0:	d129      	bne.n	8026af6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	2224      	movs	r2, #36	; 0x24
 8026aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	681b      	ldr	r3, [r3, #0]
 8026aae:	681a      	ldr	r2, [r3, #0]
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	681b      	ldr	r3, [r3, #0]
 8026ab4:	f022 0201 	bic.w	r2, r2, #1
 8026ab8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8026aba:	687b      	ldr	r3, [r7, #4]
 8026abc:	681b      	ldr	r3, [r3, #0]
 8026abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8026ac0:	687b      	ldr	r3, [r7, #4]
 8026ac2:	681b      	ldr	r3, [r3, #0]
 8026ac4:	f022 0210 	bic.w	r2, r2, #16
 8026ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	681b      	ldr	r3, [r3, #0]
 8026ace:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	683a      	ldr	r2, [r7, #0]
 8026ad6:	430a      	orrs	r2, r1
 8026ad8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	681a      	ldr	r2, [r3, #0]
 8026ae0:	687b      	ldr	r3, [r7, #4]
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	f042 0201 	orr.w	r2, r2, #1
 8026ae8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	2220      	movs	r2, #32
 8026aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026af2:	2300      	movs	r3, #0
 8026af4:	e000      	b.n	8026af8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8026af6:	2302      	movs	r3, #2
  }
}
 8026af8:	4618      	mov	r0, r3
 8026afa:	370c      	adds	r7, #12
 8026afc:	46bd      	mov	sp, r7
 8026afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b02:	4770      	bx	lr

08026b04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8026b04:	b480      	push	{r7}
 8026b06:	b085      	sub	sp, #20
 8026b08:	af00      	add	r7, sp, #0
 8026b0a:	6078      	str	r0, [r7, #4]
 8026b0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8026b0e:	2300      	movs	r3, #0
 8026b10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026b18:	b2db      	uxtb	r3, r3
 8026b1a:	2b20      	cmp	r3, #32
 8026b1c:	d12a      	bne.n	8026b74 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	2224      	movs	r2, #36	; 0x24
 8026b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8026b26:	687b      	ldr	r3, [r7, #4]
 8026b28:	681b      	ldr	r3, [r3, #0]
 8026b2a:	681a      	ldr	r2, [r3, #0]
 8026b2c:	687b      	ldr	r3, [r7, #4]
 8026b2e:	681b      	ldr	r3, [r3, #0]
 8026b30:	f022 0201 	bic.w	r2, r2, #1
 8026b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8026b36:	687b      	ldr	r3, [r7, #4]
 8026b38:	681b      	ldr	r3, [r3, #0]
 8026b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026b3c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8026b3e:	89fb      	ldrh	r3, [r7, #14]
 8026b40:	f023 030f 	bic.w	r3, r3, #15
 8026b44:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8026b46:	683b      	ldr	r3, [r7, #0]
 8026b48:	b29a      	uxth	r2, r3
 8026b4a:	89fb      	ldrh	r3, [r7, #14]
 8026b4c:	4313      	orrs	r3, r2
 8026b4e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8026b50:	687b      	ldr	r3, [r7, #4]
 8026b52:	681b      	ldr	r3, [r3, #0]
 8026b54:	89fa      	ldrh	r2, [r7, #14]
 8026b56:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8026b58:	687b      	ldr	r3, [r7, #4]
 8026b5a:	681b      	ldr	r3, [r3, #0]
 8026b5c:	681a      	ldr	r2, [r3, #0]
 8026b5e:	687b      	ldr	r3, [r7, #4]
 8026b60:	681b      	ldr	r3, [r3, #0]
 8026b62:	f042 0201 	orr.w	r2, r2, #1
 8026b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	2220      	movs	r2, #32
 8026b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8026b70:	2300      	movs	r3, #0
 8026b72:	e000      	b.n	8026b76 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8026b74:	2302      	movs	r3, #2
  }
}
 8026b76:	4618      	mov	r0, r3
 8026b78:	3714      	adds	r7, #20
 8026b7a:	46bd      	mov	sp, r7
 8026b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b80:	4770      	bx	lr
	...

08026b84 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8026b84:	b580      	push	{r7, lr}
 8026b86:	b084      	sub	sp, #16
 8026b88:	af00      	add	r7, sp, #0
 8026b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8026b8c:	687b      	ldr	r3, [r7, #4]
 8026b8e:	2b00      	cmp	r3, #0
 8026b90:	d101      	bne.n	8026b96 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8026b92:	2301      	movs	r3, #1
 8026b94:	e0bf      	b.n	8026d16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8026b9c:	b2db      	uxtb	r3, r3
 8026b9e:	2b00      	cmp	r3, #0
 8026ba0:	d106      	bne.n	8026bb0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	2200      	movs	r2, #0
 8026ba6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8026baa:	6878      	ldr	r0, [r7, #4]
 8026bac:	f7fa fe1a 	bl	80217e4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026bb0:	687b      	ldr	r3, [r7, #4]
 8026bb2:	2202      	movs	r2, #2
 8026bb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8026bb8:	687b      	ldr	r3, [r7, #4]
 8026bba:	681b      	ldr	r3, [r3, #0]
 8026bbc:	699a      	ldr	r2, [r3, #24]
 8026bbe:	687b      	ldr	r3, [r7, #4]
 8026bc0:	681b      	ldr	r3, [r3, #0]
 8026bc2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8026bc6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026bc8:	687b      	ldr	r3, [r7, #4]
 8026bca:	681b      	ldr	r3, [r3, #0]
 8026bcc:	6999      	ldr	r1, [r3, #24]
 8026bce:	687b      	ldr	r3, [r7, #4]
 8026bd0:	685a      	ldr	r2, [r3, #4]
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	689b      	ldr	r3, [r3, #8]
 8026bd6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026bd8:	687b      	ldr	r3, [r7, #4]
 8026bda:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026bdc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8026bde:	687b      	ldr	r3, [r7, #4]
 8026be0:	691b      	ldr	r3, [r3, #16]
 8026be2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8026be4:	687b      	ldr	r3, [r7, #4]
 8026be6:	681b      	ldr	r3, [r3, #0]
 8026be8:	430a      	orrs	r2, r1
 8026bea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8026bec:	687b      	ldr	r3, [r7, #4]
 8026bee:	681b      	ldr	r3, [r3, #0]
 8026bf0:	6899      	ldr	r1, [r3, #8]
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	681a      	ldr	r2, [r3, #0]
 8026bf6:	4b4a      	ldr	r3, [pc, #296]	; (8026d20 <HAL_LTDC_Init+0x19c>)
 8026bf8:	400b      	ands	r3, r1
 8026bfa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8026bfc:	687b      	ldr	r3, [r7, #4]
 8026bfe:	695b      	ldr	r3, [r3, #20]
 8026c00:	041b      	lsls	r3, r3, #16
 8026c02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8026c04:	687b      	ldr	r3, [r7, #4]
 8026c06:	681b      	ldr	r3, [r3, #0]
 8026c08:	6899      	ldr	r1, [r3, #8]
 8026c0a:	687b      	ldr	r3, [r7, #4]
 8026c0c:	699a      	ldr	r2, [r3, #24]
 8026c0e:	68fb      	ldr	r3, [r7, #12]
 8026c10:	431a      	orrs	r2, r3
 8026c12:	687b      	ldr	r3, [r7, #4]
 8026c14:	681b      	ldr	r3, [r3, #0]
 8026c16:	430a      	orrs	r2, r1
 8026c18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	681b      	ldr	r3, [r3, #0]
 8026c1e:	68d9      	ldr	r1, [r3, #12]
 8026c20:	687b      	ldr	r3, [r7, #4]
 8026c22:	681a      	ldr	r2, [r3, #0]
 8026c24:	4b3e      	ldr	r3, [pc, #248]	; (8026d20 <HAL_LTDC_Init+0x19c>)
 8026c26:	400b      	ands	r3, r1
 8026c28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8026c2a:	687b      	ldr	r3, [r7, #4]
 8026c2c:	69db      	ldr	r3, [r3, #28]
 8026c2e:	041b      	lsls	r3, r3, #16
 8026c30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8026c32:	687b      	ldr	r3, [r7, #4]
 8026c34:	681b      	ldr	r3, [r3, #0]
 8026c36:	68d9      	ldr	r1, [r3, #12]
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	6a1a      	ldr	r2, [r3, #32]
 8026c3c:	68fb      	ldr	r3, [r7, #12]
 8026c3e:	431a      	orrs	r2, r3
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	681b      	ldr	r3, [r3, #0]
 8026c44:	430a      	orrs	r2, r1
 8026c46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8026c48:	687b      	ldr	r3, [r7, #4]
 8026c4a:	681b      	ldr	r3, [r3, #0]
 8026c4c:	6919      	ldr	r1, [r3, #16]
 8026c4e:	687b      	ldr	r3, [r7, #4]
 8026c50:	681a      	ldr	r2, [r3, #0]
 8026c52:	4b33      	ldr	r3, [pc, #204]	; (8026d20 <HAL_LTDC_Init+0x19c>)
 8026c54:	400b      	ands	r3, r1
 8026c56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8026c58:	687b      	ldr	r3, [r7, #4]
 8026c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026c5c:	041b      	lsls	r3, r3, #16
 8026c5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8026c60:	687b      	ldr	r3, [r7, #4]
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	6919      	ldr	r1, [r3, #16]
 8026c66:	687b      	ldr	r3, [r7, #4]
 8026c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026c6a:	68fb      	ldr	r3, [r7, #12]
 8026c6c:	431a      	orrs	r2, r3
 8026c6e:	687b      	ldr	r3, [r7, #4]
 8026c70:	681b      	ldr	r3, [r3, #0]
 8026c72:	430a      	orrs	r2, r1
 8026c74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8026c76:	687b      	ldr	r3, [r7, #4]
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	6959      	ldr	r1, [r3, #20]
 8026c7c:	687b      	ldr	r3, [r7, #4]
 8026c7e:	681a      	ldr	r2, [r3, #0]
 8026c80:	4b27      	ldr	r3, [pc, #156]	; (8026d20 <HAL_LTDC_Init+0x19c>)
 8026c82:	400b      	ands	r3, r1
 8026c84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8026c86:	687b      	ldr	r3, [r7, #4]
 8026c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026c8a:	041b      	lsls	r3, r3, #16
 8026c8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	681b      	ldr	r3, [r3, #0]
 8026c92:	6959      	ldr	r1, [r3, #20]
 8026c94:	687b      	ldr	r3, [r7, #4]
 8026c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8026c98:	68fb      	ldr	r3, [r7, #12]
 8026c9a:	431a      	orrs	r2, r3
 8026c9c:	687b      	ldr	r3, [r7, #4]
 8026c9e:	681b      	ldr	r3, [r3, #0]
 8026ca0:	430a      	orrs	r2, r1
 8026ca2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8026ca4:	687b      	ldr	r3, [r7, #4]
 8026ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026caa:	021b      	lsls	r3, r3, #8
 8026cac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8026cae:	687b      	ldr	r3, [r7, #4]
 8026cb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8026cb4:	041b      	lsls	r3, r3, #16
 8026cb6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8026cb8:	687b      	ldr	r3, [r7, #4]
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026cbe:	687b      	ldr	r3, [r7, #4]
 8026cc0:	681b      	ldr	r3, [r3, #0]
 8026cc2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8026cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8026cc8:	687b      	ldr	r3, [r7, #4]
 8026cca:	681b      	ldr	r3, [r3, #0]
 8026ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026cce:	68ba      	ldr	r2, [r7, #8]
 8026cd0:	68fb      	ldr	r3, [r7, #12]
 8026cd2:	4313      	orrs	r3, r2
 8026cd4:	687a      	ldr	r2, [r7, #4]
 8026cd6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8026cda:	431a      	orrs	r2, r3
 8026cdc:	687b      	ldr	r3, [r7, #4]
 8026cde:	681b      	ldr	r3, [r3, #0]
 8026ce0:	430a      	orrs	r2, r1
 8026ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	681b      	ldr	r3, [r3, #0]
 8026ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026cea:	687b      	ldr	r3, [r7, #4]
 8026cec:	681b      	ldr	r3, [r3, #0]
 8026cee:	f042 0206 	orr.w	r2, r2, #6
 8026cf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8026cf4:	687b      	ldr	r3, [r7, #4]
 8026cf6:	681b      	ldr	r3, [r3, #0]
 8026cf8:	699a      	ldr	r2, [r3, #24]
 8026cfa:	687b      	ldr	r3, [r7, #4]
 8026cfc:	681b      	ldr	r3, [r3, #0]
 8026cfe:	f042 0201 	orr.w	r2, r2, #1
 8026d02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8026d04:	687b      	ldr	r3, [r7, #4]
 8026d06:	2200      	movs	r2, #0
 8026d08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026d0c:	687b      	ldr	r3, [r7, #4]
 8026d0e:	2201      	movs	r2, #1
 8026d10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8026d14:	2300      	movs	r3, #0
}
 8026d16:	4618      	mov	r0, r3
 8026d18:	3710      	adds	r7, #16
 8026d1a:	46bd      	mov	sp, r7
 8026d1c:	bd80      	pop	{r7, pc}
 8026d1e:	bf00      	nop
 8026d20:	f000f800 	.word	0xf000f800

08026d24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8026d24:	b580      	push	{r7, lr}
 8026d26:	b084      	sub	sp, #16
 8026d28:	af00      	add	r7, sp, #0
 8026d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8026d2c:	687b      	ldr	r3, [r7, #4]
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026d32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	681b      	ldr	r3, [r3, #0]
 8026d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8026d3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8026d3c:	68fb      	ldr	r3, [r7, #12]
 8026d3e:	f003 0304 	and.w	r3, r3, #4
 8026d42:	2b00      	cmp	r3, #0
 8026d44:	d023      	beq.n	8026d8e <HAL_LTDC_IRQHandler+0x6a>
 8026d46:	68bb      	ldr	r3, [r7, #8]
 8026d48:	f003 0304 	and.w	r3, r3, #4
 8026d4c:	2b00      	cmp	r3, #0
 8026d4e:	d01e      	beq.n	8026d8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8026d50:	687b      	ldr	r3, [r7, #4]
 8026d52:	681b      	ldr	r3, [r3, #0]
 8026d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026d56:	687b      	ldr	r3, [r7, #4]
 8026d58:	681b      	ldr	r3, [r3, #0]
 8026d5a:	f022 0204 	bic.w	r2, r2, #4
 8026d5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	681b      	ldr	r3, [r3, #0]
 8026d64:	2204      	movs	r2, #4
 8026d66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8026d68:	687b      	ldr	r3, [r7, #4]
 8026d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026d6e:	f043 0201 	orr.w	r2, r3, #1
 8026d72:	687b      	ldr	r3, [r7, #4]
 8026d74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	2204      	movs	r2, #4
 8026d7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026d80:	687b      	ldr	r3, [r7, #4]
 8026d82:	2200      	movs	r2, #0
 8026d84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026d88:	6878      	ldr	r0, [r7, #4]
 8026d8a:	f000 f86f 	bl	8026e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8026d8e:	68fb      	ldr	r3, [r7, #12]
 8026d90:	f003 0302 	and.w	r3, r3, #2
 8026d94:	2b00      	cmp	r3, #0
 8026d96:	d023      	beq.n	8026de0 <HAL_LTDC_IRQHandler+0xbc>
 8026d98:	68bb      	ldr	r3, [r7, #8]
 8026d9a:	f003 0302 	and.w	r3, r3, #2
 8026d9e:	2b00      	cmp	r3, #0
 8026da0:	d01e      	beq.n	8026de0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8026da2:	687b      	ldr	r3, [r7, #4]
 8026da4:	681b      	ldr	r3, [r3, #0]
 8026da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026da8:	687b      	ldr	r3, [r7, #4]
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	f022 0202 	bic.w	r2, r2, #2
 8026db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8026db2:	687b      	ldr	r3, [r7, #4]
 8026db4:	681b      	ldr	r3, [r3, #0]
 8026db6:	2202      	movs	r2, #2
 8026db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8026dc0:	f043 0202 	orr.w	r2, r3, #2
 8026dc4:	687b      	ldr	r3, [r7, #4]
 8026dc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	2204      	movs	r2, #4
 8026dce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026dd2:	687b      	ldr	r3, [r7, #4]
 8026dd4:	2200      	movs	r2, #0
 8026dd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8026dda:	6878      	ldr	r0, [r7, #4]
 8026ddc:	f000 f846 	bl	8026e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8026de0:	68fb      	ldr	r3, [r7, #12]
 8026de2:	f003 0301 	and.w	r3, r3, #1
 8026de6:	2b00      	cmp	r3, #0
 8026de8:	d01b      	beq.n	8026e22 <HAL_LTDC_IRQHandler+0xfe>
 8026dea:	68bb      	ldr	r3, [r7, #8]
 8026dec:	f003 0301 	and.w	r3, r3, #1
 8026df0:	2b00      	cmp	r3, #0
 8026df2:	d016      	beq.n	8026e22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8026df4:	687b      	ldr	r3, [r7, #4]
 8026df6:	681b      	ldr	r3, [r3, #0]
 8026df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026dfa:	687b      	ldr	r3, [r7, #4]
 8026dfc:	681b      	ldr	r3, [r3, #0]
 8026dfe:	f022 0201 	bic.w	r2, r2, #1
 8026e02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8026e04:	687b      	ldr	r3, [r7, #4]
 8026e06:	681b      	ldr	r3, [r3, #0]
 8026e08:	2201      	movs	r2, #1
 8026e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026e0c:	687b      	ldr	r3, [r7, #4]
 8026e0e:	2201      	movs	r2, #1
 8026e10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e14:	687b      	ldr	r3, [r7, #4]
 8026e16:	2200      	movs	r2, #0
 8026e18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8026e1c:	6878      	ldr	r0, [r7, #4]
 8026e1e:	f000 f82f 	bl	8026e80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8026e22:	68fb      	ldr	r3, [r7, #12]
 8026e24:	f003 0308 	and.w	r3, r3, #8
 8026e28:	2b00      	cmp	r3, #0
 8026e2a:	d01b      	beq.n	8026e64 <HAL_LTDC_IRQHandler+0x140>
 8026e2c:	68bb      	ldr	r3, [r7, #8]
 8026e2e:	f003 0308 	and.w	r3, r3, #8
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	d016      	beq.n	8026e64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8026e36:	687b      	ldr	r3, [r7, #4]
 8026e38:	681b      	ldr	r3, [r3, #0]
 8026e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8026e3c:	687b      	ldr	r3, [r7, #4]
 8026e3e:	681b      	ldr	r3, [r3, #0]
 8026e40:	f022 0208 	bic.w	r2, r2, #8
 8026e44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8026e46:	687b      	ldr	r3, [r7, #4]
 8026e48:	681b      	ldr	r3, [r3, #0]
 8026e4a:	2208      	movs	r2, #8
 8026e4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8026e4e:	687b      	ldr	r3, [r7, #4]
 8026e50:	2201      	movs	r2, #1
 8026e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8026e56:	687b      	ldr	r3, [r7, #4]
 8026e58:	2200      	movs	r2, #0
 8026e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8026e5e:	6878      	ldr	r0, [r7, #4]
 8026e60:	f000 f818 	bl	8026e94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8026e64:	bf00      	nop
 8026e66:	3710      	adds	r7, #16
 8026e68:	46bd      	mov	sp, r7
 8026e6a:	bd80      	pop	{r7, pc}

08026e6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8026e6c:	b480      	push	{r7}
 8026e6e:	b083      	sub	sp, #12
 8026e70:	af00      	add	r7, sp, #0
 8026e72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8026e74:	bf00      	nop
 8026e76:	370c      	adds	r7, #12
 8026e78:	46bd      	mov	sp, r7
 8026e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e7e:	4770      	bx	lr

08026e80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026e80:	b480      	push	{r7}
 8026e82:	b083      	sub	sp, #12
 8026e84:	af00      	add	r7, sp, #0
 8026e86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8026e88:	bf00      	nop
 8026e8a:	370c      	adds	r7, #12
 8026e8c:	46bd      	mov	sp, r7
 8026e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e92:	4770      	bx	lr

08026e94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8026e94:	b480      	push	{r7}
 8026e96:	b083      	sub	sp, #12
 8026e98:	af00      	add	r7, sp, #0
 8026e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8026e9c:	bf00      	nop
 8026e9e:	370c      	adds	r7, #12
 8026ea0:	46bd      	mov	sp, r7
 8026ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ea6:	4770      	bx	lr

08026ea8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8026ea8:	b5b0      	push	{r4, r5, r7, lr}
 8026eaa:	b084      	sub	sp, #16
 8026eac:	af00      	add	r7, sp, #0
 8026eae:	60f8      	str	r0, [r7, #12]
 8026eb0:	60b9      	str	r1, [r7, #8]
 8026eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026eb4:	68fb      	ldr	r3, [r7, #12]
 8026eb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026eba:	2b01      	cmp	r3, #1
 8026ebc:	d101      	bne.n	8026ec2 <HAL_LTDC_ConfigLayer+0x1a>
 8026ebe:	2302      	movs	r3, #2
 8026ec0:	e02c      	b.n	8026f1c <HAL_LTDC_ConfigLayer+0x74>
 8026ec2:	68fb      	ldr	r3, [r7, #12]
 8026ec4:	2201      	movs	r2, #1
 8026ec6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026eca:	68fb      	ldr	r3, [r7, #12]
 8026ecc:	2202      	movs	r2, #2
 8026ece:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8026ed2:	68fa      	ldr	r2, [r7, #12]
 8026ed4:	687b      	ldr	r3, [r7, #4]
 8026ed6:	2134      	movs	r1, #52	; 0x34
 8026ed8:	fb01 f303 	mul.w	r3, r1, r3
 8026edc:	4413      	add	r3, r2
 8026ede:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8026ee2:	68bb      	ldr	r3, [r7, #8]
 8026ee4:	4614      	mov	r4, r2
 8026ee6:	461d      	mov	r5, r3
 8026ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ef4:	682b      	ldr	r3, [r5, #0]
 8026ef6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8026ef8:	687a      	ldr	r2, [r7, #4]
 8026efa:	68b9      	ldr	r1, [r7, #8]
 8026efc:	68f8      	ldr	r0, [r7, #12]
 8026efe:	f000 f8b9 	bl	8027074 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026f02:	68fb      	ldr	r3, [r7, #12]
 8026f04:	681b      	ldr	r3, [r3, #0]
 8026f06:	2201      	movs	r2, #1
 8026f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8026f0a:	68fb      	ldr	r3, [r7, #12]
 8026f0c:	2201      	movs	r2, #1
 8026f0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026f12:	68fb      	ldr	r3, [r7, #12]
 8026f14:	2200      	movs	r2, #0
 8026f16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026f1a:	2300      	movs	r3, #0
}
 8026f1c:	4618      	mov	r0, r3
 8026f1e:	3710      	adds	r7, #16
 8026f20:	46bd      	mov	sp, r7
 8026f22:	bdb0      	pop	{r4, r5, r7, pc}

08026f24 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8026f24:	b480      	push	{r7}
 8026f26:	b085      	sub	sp, #20
 8026f28:	af00      	add	r7, sp, #0
 8026f2a:	60f8      	str	r0, [r7, #12]
 8026f2c:	60b9      	str	r1, [r7, #8]
 8026f2e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026f30:	68fb      	ldr	r3, [r7, #12]
 8026f32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026f36:	2b01      	cmp	r3, #1
 8026f38:	d101      	bne.n	8026f3e <HAL_LTDC_ConfigColorKeying+0x1a>
 8026f3a:	2302      	movs	r3, #2
 8026f3c:	e030      	b.n	8026fa0 <HAL_LTDC_ConfigColorKeying+0x7c>
 8026f3e:	68fb      	ldr	r3, [r7, #12]
 8026f40:	2201      	movs	r2, #1
 8026f42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026f46:	68fb      	ldr	r3, [r7, #12]
 8026f48:	2202      	movs	r2, #2
 8026f4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8026f4e:	68fb      	ldr	r3, [r7, #12]
 8026f50:	681b      	ldr	r3, [r3, #0]
 8026f52:	461a      	mov	r2, r3
 8026f54:	687b      	ldr	r3, [r7, #4]
 8026f56:	01db      	lsls	r3, r3, #7
 8026f58:	4413      	add	r3, r2
 8026f5a:	3384      	adds	r3, #132	; 0x84
 8026f5c:	68db      	ldr	r3, [r3, #12]
 8026f5e:	68fa      	ldr	r2, [r7, #12]
 8026f60:	6812      	ldr	r2, [r2, #0]
 8026f62:	4611      	mov	r1, r2
 8026f64:	687a      	ldr	r2, [r7, #4]
 8026f66:	01d2      	lsls	r2, r2, #7
 8026f68:	440a      	add	r2, r1
 8026f6a:	3284      	adds	r2, #132	; 0x84
 8026f6c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8026f70:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8026f72:	68fb      	ldr	r3, [r7, #12]
 8026f74:	681b      	ldr	r3, [r3, #0]
 8026f76:	461a      	mov	r2, r3
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	01db      	lsls	r3, r3, #7
 8026f7c:	4413      	add	r3, r2
 8026f7e:	3384      	adds	r3, #132	; 0x84
 8026f80:	461a      	mov	r2, r3
 8026f82:	68bb      	ldr	r3, [r7, #8]
 8026f84:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026f86:	68fb      	ldr	r3, [r7, #12]
 8026f88:	681b      	ldr	r3, [r3, #0]
 8026f8a:	2201      	movs	r2, #1
 8026f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8026f8e:	68fb      	ldr	r3, [r7, #12]
 8026f90:	2201      	movs	r2, #1
 8026f92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8026f96:	68fb      	ldr	r3, [r7, #12]
 8026f98:	2200      	movs	r2, #0
 8026f9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8026f9e:	2300      	movs	r3, #0
}
 8026fa0:	4618      	mov	r0, r3
 8026fa2:	3714      	adds	r7, #20
 8026fa4:	46bd      	mov	sp, r7
 8026fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026faa:	4770      	bx	lr

08026fac <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 8026fac:	b480      	push	{r7}
 8026fae:	b083      	sub	sp, #12
 8026fb0:	af00      	add	r7, sp, #0
 8026fb2:	6078      	str	r0, [r7, #4]
 8026fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8026fb6:	687b      	ldr	r3, [r7, #4]
 8026fb8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8026fbc:	2b01      	cmp	r3, #1
 8026fbe:	d101      	bne.n	8026fc4 <HAL_LTDC_EnableColorKeying+0x18>
 8026fc0:	2302      	movs	r3, #2
 8026fc2:	e026      	b.n	8027012 <HAL_LTDC_EnableColorKeying+0x66>
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	2201      	movs	r2, #1
 8026fc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8026fcc:	687b      	ldr	r3, [r7, #4]
 8026fce:	2202      	movs	r2, #2
 8026fd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	681b      	ldr	r3, [r3, #0]
 8026fd8:	461a      	mov	r2, r3
 8026fda:	683b      	ldr	r3, [r7, #0]
 8026fdc:	01db      	lsls	r3, r3, #7
 8026fde:	4413      	add	r3, r2
 8026fe0:	3384      	adds	r3, #132	; 0x84
 8026fe2:	681b      	ldr	r3, [r3, #0]
 8026fe4:	687a      	ldr	r2, [r7, #4]
 8026fe6:	6812      	ldr	r2, [r2, #0]
 8026fe8:	4611      	mov	r1, r2
 8026fea:	683a      	ldr	r2, [r7, #0]
 8026fec:	01d2      	lsls	r2, r2, #7
 8026fee:	440a      	add	r2, r1
 8026ff0:	3284      	adds	r2, #132	; 0x84
 8026ff2:	f043 0302 	orr.w	r3, r3, #2
 8026ff6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8026ff8:	687b      	ldr	r3, [r7, #4]
 8026ffa:	681b      	ldr	r3, [r3, #0]
 8026ffc:	2201      	movs	r2, #1
 8026ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8027000:	687b      	ldr	r3, [r7, #4]
 8027002:	2201      	movs	r2, #1
 8027004:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	2200      	movs	r2, #0
 802700c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8027010:	2300      	movs	r3, #0
}
 8027012:	4618      	mov	r0, r3
 8027014:	370c      	adds	r7, #12
 8027016:	46bd      	mov	sp, r7
 8027018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802701c:	4770      	bx	lr
	...

08027020 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8027020:	b480      	push	{r7}
 8027022:	b083      	sub	sp, #12
 8027024:	af00      	add	r7, sp, #0
 8027026:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8027028:	687b      	ldr	r3, [r7, #4]
 802702a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 802702e:	2b01      	cmp	r3, #1
 8027030:	d101      	bne.n	8027036 <HAL_LTDC_EnableDither+0x16>
 8027032:	2302      	movs	r3, #2
 8027034:	e016      	b.n	8027064 <HAL_LTDC_EnableDither+0x44>
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	2201      	movs	r2, #1
 802703a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	2202      	movs	r2, #2
 8027042:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8027046:	4b0a      	ldr	r3, [pc, #40]	; (8027070 <HAL_LTDC_EnableDither+0x50>)
 8027048:	699b      	ldr	r3, [r3, #24]
 802704a:	4a09      	ldr	r2, [pc, #36]	; (8027070 <HAL_LTDC_EnableDither+0x50>)
 802704c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027050:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	2201      	movs	r2, #1
 8027056:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	2200      	movs	r2, #0
 802705e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8027062:	2300      	movs	r3, #0
}
 8027064:	4618      	mov	r0, r3
 8027066:	370c      	adds	r7, #12
 8027068:	46bd      	mov	sp, r7
 802706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802706e:	4770      	bx	lr
 8027070:	40016800 	.word	0x40016800

08027074 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8027074:	b480      	push	{r7}
 8027076:	b089      	sub	sp, #36	; 0x24
 8027078:	af00      	add	r7, sp, #0
 802707a:	60f8      	str	r0, [r7, #12]
 802707c:	60b9      	str	r1, [r7, #8]
 802707e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8027080:	68bb      	ldr	r3, [r7, #8]
 8027082:	685a      	ldr	r2, [r3, #4]
 8027084:	68fb      	ldr	r3, [r7, #12]
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	68db      	ldr	r3, [r3, #12]
 802708a:	0c1b      	lsrs	r3, r3, #16
 802708c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027090:	4413      	add	r3, r2
 8027092:	041b      	lsls	r3, r3, #16
 8027094:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8027096:	68fb      	ldr	r3, [r7, #12]
 8027098:	681b      	ldr	r3, [r3, #0]
 802709a:	461a      	mov	r2, r3
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	01db      	lsls	r3, r3, #7
 80270a0:	4413      	add	r3, r2
 80270a2:	3384      	adds	r3, #132	; 0x84
 80270a4:	685b      	ldr	r3, [r3, #4]
 80270a6:	68fa      	ldr	r2, [r7, #12]
 80270a8:	6812      	ldr	r2, [r2, #0]
 80270aa:	4611      	mov	r1, r2
 80270ac:	687a      	ldr	r2, [r7, #4]
 80270ae:	01d2      	lsls	r2, r2, #7
 80270b0:	440a      	add	r2, r1
 80270b2:	3284      	adds	r2, #132	; 0x84
 80270b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80270b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80270ba:	68bb      	ldr	r3, [r7, #8]
 80270bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80270be:	68fb      	ldr	r3, [r7, #12]
 80270c0:	681b      	ldr	r3, [r3, #0]
 80270c2:	68db      	ldr	r3, [r3, #12]
 80270c4:	0c1b      	lsrs	r3, r3, #16
 80270c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80270ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80270cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80270ce:	68fb      	ldr	r3, [r7, #12]
 80270d0:	681b      	ldr	r3, [r3, #0]
 80270d2:	4619      	mov	r1, r3
 80270d4:	687b      	ldr	r3, [r7, #4]
 80270d6:	01db      	lsls	r3, r3, #7
 80270d8:	440b      	add	r3, r1
 80270da:	3384      	adds	r3, #132	; 0x84
 80270dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80270de:	69fb      	ldr	r3, [r7, #28]
 80270e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80270e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80270e4:	68bb      	ldr	r3, [r7, #8]
 80270e6:	68da      	ldr	r2, [r3, #12]
 80270e8:	68fb      	ldr	r3, [r7, #12]
 80270ea:	681b      	ldr	r3, [r3, #0]
 80270ec:	68db      	ldr	r3, [r3, #12]
 80270ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80270f2:	4413      	add	r3, r2
 80270f4:	041b      	lsls	r3, r3, #16
 80270f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80270f8:	68fb      	ldr	r3, [r7, #12]
 80270fa:	681b      	ldr	r3, [r3, #0]
 80270fc:	461a      	mov	r2, r3
 80270fe:	687b      	ldr	r3, [r7, #4]
 8027100:	01db      	lsls	r3, r3, #7
 8027102:	4413      	add	r3, r2
 8027104:	3384      	adds	r3, #132	; 0x84
 8027106:	689b      	ldr	r3, [r3, #8]
 8027108:	68fa      	ldr	r2, [r7, #12]
 802710a:	6812      	ldr	r2, [r2, #0]
 802710c:	4611      	mov	r1, r2
 802710e:	687a      	ldr	r2, [r7, #4]
 8027110:	01d2      	lsls	r2, r2, #7
 8027112:	440a      	add	r2, r1
 8027114:	3284      	adds	r2, #132	; 0x84
 8027116:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 802711a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 802711c:	68bb      	ldr	r3, [r7, #8]
 802711e:	689a      	ldr	r2, [r3, #8]
 8027120:	68fb      	ldr	r3, [r7, #12]
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	68db      	ldr	r3, [r3, #12]
 8027126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802712a:	4413      	add	r3, r2
 802712c:	1c5a      	adds	r2, r3, #1
 802712e:	68fb      	ldr	r3, [r7, #12]
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	4619      	mov	r1, r3
 8027134:	687b      	ldr	r3, [r7, #4]
 8027136:	01db      	lsls	r3, r3, #7
 8027138:	440b      	add	r3, r1
 802713a:	3384      	adds	r3, #132	; 0x84
 802713c:	4619      	mov	r1, r3
 802713e:	69fb      	ldr	r3, [r7, #28]
 8027140:	4313      	orrs	r3, r2
 8027142:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8027144:	68fb      	ldr	r3, [r7, #12]
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	461a      	mov	r2, r3
 802714a:	687b      	ldr	r3, [r7, #4]
 802714c:	01db      	lsls	r3, r3, #7
 802714e:	4413      	add	r3, r2
 8027150:	3384      	adds	r3, #132	; 0x84
 8027152:	691b      	ldr	r3, [r3, #16]
 8027154:	68fa      	ldr	r2, [r7, #12]
 8027156:	6812      	ldr	r2, [r2, #0]
 8027158:	4611      	mov	r1, r2
 802715a:	687a      	ldr	r2, [r7, #4]
 802715c:	01d2      	lsls	r2, r2, #7
 802715e:	440a      	add	r2, r1
 8027160:	3284      	adds	r2, #132	; 0x84
 8027162:	f023 0307 	bic.w	r3, r3, #7
 8027166:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8027168:	68fb      	ldr	r3, [r7, #12]
 802716a:	681b      	ldr	r3, [r3, #0]
 802716c:	461a      	mov	r2, r3
 802716e:	687b      	ldr	r3, [r7, #4]
 8027170:	01db      	lsls	r3, r3, #7
 8027172:	4413      	add	r3, r2
 8027174:	3384      	adds	r3, #132	; 0x84
 8027176:	461a      	mov	r2, r3
 8027178:	68bb      	ldr	r3, [r7, #8]
 802717a:	691b      	ldr	r3, [r3, #16]
 802717c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 802717e:	68bb      	ldr	r3, [r7, #8]
 8027180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8027184:	021b      	lsls	r3, r3, #8
 8027186:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8027188:	68bb      	ldr	r3, [r7, #8]
 802718a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 802718e:	041b      	lsls	r3, r3, #16
 8027190:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8027192:	68bb      	ldr	r3, [r7, #8]
 8027194:	699b      	ldr	r3, [r3, #24]
 8027196:	061b      	lsls	r3, r3, #24
 8027198:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 802719a:	68fb      	ldr	r3, [r7, #12]
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	461a      	mov	r2, r3
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	01db      	lsls	r3, r3, #7
 80271a4:	4413      	add	r3, r2
 80271a6:	3384      	adds	r3, #132	; 0x84
 80271a8:	699b      	ldr	r3, [r3, #24]
 80271aa:	68fb      	ldr	r3, [r7, #12]
 80271ac:	681b      	ldr	r3, [r3, #0]
 80271ae:	461a      	mov	r2, r3
 80271b0:	687b      	ldr	r3, [r7, #4]
 80271b2:	01db      	lsls	r3, r3, #7
 80271b4:	4413      	add	r3, r2
 80271b6:	3384      	adds	r3, #132	; 0x84
 80271b8:	461a      	mov	r2, r3
 80271ba:	2300      	movs	r3, #0
 80271bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80271be:	68bb      	ldr	r3, [r7, #8]
 80271c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80271c4:	461a      	mov	r2, r3
 80271c6:	69fb      	ldr	r3, [r7, #28]
 80271c8:	431a      	orrs	r2, r3
 80271ca:	69bb      	ldr	r3, [r7, #24]
 80271cc:	431a      	orrs	r2, r3
 80271ce:	68fb      	ldr	r3, [r7, #12]
 80271d0:	681b      	ldr	r3, [r3, #0]
 80271d2:	4619      	mov	r1, r3
 80271d4:	687b      	ldr	r3, [r7, #4]
 80271d6:	01db      	lsls	r3, r3, #7
 80271d8:	440b      	add	r3, r1
 80271da:	3384      	adds	r3, #132	; 0x84
 80271dc:	4619      	mov	r1, r3
 80271de:	697b      	ldr	r3, [r7, #20]
 80271e0:	4313      	orrs	r3, r2
 80271e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80271e4:	68fb      	ldr	r3, [r7, #12]
 80271e6:	681b      	ldr	r3, [r3, #0]
 80271e8:	461a      	mov	r2, r3
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	01db      	lsls	r3, r3, #7
 80271ee:	4413      	add	r3, r2
 80271f0:	3384      	adds	r3, #132	; 0x84
 80271f2:	695b      	ldr	r3, [r3, #20]
 80271f4:	68fa      	ldr	r2, [r7, #12]
 80271f6:	6812      	ldr	r2, [r2, #0]
 80271f8:	4611      	mov	r1, r2
 80271fa:	687a      	ldr	r2, [r7, #4]
 80271fc:	01d2      	lsls	r2, r2, #7
 80271fe:	440a      	add	r2, r1
 8027200:	3284      	adds	r2, #132	; 0x84
 8027202:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8027206:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8027208:	68fb      	ldr	r3, [r7, #12]
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	461a      	mov	r2, r3
 802720e:	687b      	ldr	r3, [r7, #4]
 8027210:	01db      	lsls	r3, r3, #7
 8027212:	4413      	add	r3, r2
 8027214:	3384      	adds	r3, #132	; 0x84
 8027216:	461a      	mov	r2, r3
 8027218:	68bb      	ldr	r3, [r7, #8]
 802721a:	695b      	ldr	r3, [r3, #20]
 802721c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 802721e:	68fb      	ldr	r3, [r7, #12]
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	461a      	mov	r2, r3
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	01db      	lsls	r3, r3, #7
 8027228:	4413      	add	r3, r2
 802722a:	3384      	adds	r3, #132	; 0x84
 802722c:	69db      	ldr	r3, [r3, #28]
 802722e:	68fa      	ldr	r2, [r7, #12]
 8027230:	6812      	ldr	r2, [r2, #0]
 8027232:	4611      	mov	r1, r2
 8027234:	687a      	ldr	r2, [r7, #4]
 8027236:	01d2      	lsls	r2, r2, #7
 8027238:	440a      	add	r2, r1
 802723a:	3284      	adds	r2, #132	; 0x84
 802723c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8027240:	f023 0307 	bic.w	r3, r3, #7
 8027244:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8027246:	68bb      	ldr	r3, [r7, #8]
 8027248:	69da      	ldr	r2, [r3, #28]
 802724a:	68bb      	ldr	r3, [r7, #8]
 802724c:	6a1b      	ldr	r3, [r3, #32]
 802724e:	68f9      	ldr	r1, [r7, #12]
 8027250:	6809      	ldr	r1, [r1, #0]
 8027252:	4608      	mov	r0, r1
 8027254:	6879      	ldr	r1, [r7, #4]
 8027256:	01c9      	lsls	r1, r1, #7
 8027258:	4401      	add	r1, r0
 802725a:	3184      	adds	r1, #132	; 0x84
 802725c:	4313      	orrs	r3, r2
 802725e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8027260:	68fb      	ldr	r3, [r7, #12]
 8027262:	681b      	ldr	r3, [r3, #0]
 8027264:	461a      	mov	r2, r3
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	01db      	lsls	r3, r3, #7
 802726a:	4413      	add	r3, r2
 802726c:	3384      	adds	r3, #132	; 0x84
 802726e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027270:	68fb      	ldr	r3, [r7, #12]
 8027272:	681b      	ldr	r3, [r3, #0]
 8027274:	461a      	mov	r2, r3
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	01db      	lsls	r3, r3, #7
 802727a:	4413      	add	r3, r2
 802727c:	3384      	adds	r3, #132	; 0x84
 802727e:	461a      	mov	r2, r3
 8027280:	2300      	movs	r3, #0
 8027282:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8027284:	68fb      	ldr	r3, [r7, #12]
 8027286:	681b      	ldr	r3, [r3, #0]
 8027288:	461a      	mov	r2, r3
 802728a:	687b      	ldr	r3, [r7, #4]
 802728c:	01db      	lsls	r3, r3, #7
 802728e:	4413      	add	r3, r2
 8027290:	3384      	adds	r3, #132	; 0x84
 8027292:	461a      	mov	r2, r3
 8027294:	68bb      	ldr	r3, [r7, #8]
 8027296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027298:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 802729a:	68bb      	ldr	r3, [r7, #8]
 802729c:	691b      	ldr	r3, [r3, #16]
 802729e:	2b00      	cmp	r3, #0
 80272a0:	d102      	bne.n	80272a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80272a2:	2304      	movs	r3, #4
 80272a4:	61fb      	str	r3, [r7, #28]
 80272a6:	e01b      	b.n	80272e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80272a8:	68bb      	ldr	r3, [r7, #8]
 80272aa:	691b      	ldr	r3, [r3, #16]
 80272ac:	2b01      	cmp	r3, #1
 80272ae:	d102      	bne.n	80272b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80272b0:	2303      	movs	r3, #3
 80272b2:	61fb      	str	r3, [r7, #28]
 80272b4:	e014      	b.n	80272e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80272b6:	68bb      	ldr	r3, [r7, #8]
 80272b8:	691b      	ldr	r3, [r3, #16]
 80272ba:	2b04      	cmp	r3, #4
 80272bc:	d00b      	beq.n	80272d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80272be:	68bb      	ldr	r3, [r7, #8]
 80272c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80272c2:	2b02      	cmp	r3, #2
 80272c4:	d007      	beq.n	80272d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80272c6:	68bb      	ldr	r3, [r7, #8]
 80272c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80272ca:	2b03      	cmp	r3, #3
 80272cc:	d003      	beq.n	80272d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80272ce:	68bb      	ldr	r3, [r7, #8]
 80272d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80272d2:	2b07      	cmp	r3, #7
 80272d4:	d102      	bne.n	80272dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80272d6:	2302      	movs	r3, #2
 80272d8:	61fb      	str	r3, [r7, #28]
 80272da:	e001      	b.n	80272e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80272dc:	2301      	movs	r3, #1
 80272de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80272e0:	68fb      	ldr	r3, [r7, #12]
 80272e2:	681b      	ldr	r3, [r3, #0]
 80272e4:	461a      	mov	r2, r3
 80272e6:	687b      	ldr	r3, [r7, #4]
 80272e8:	01db      	lsls	r3, r3, #7
 80272ea:	4413      	add	r3, r2
 80272ec:	3384      	adds	r3, #132	; 0x84
 80272ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80272f0:	68fa      	ldr	r2, [r7, #12]
 80272f2:	6812      	ldr	r2, [r2, #0]
 80272f4:	4611      	mov	r1, r2
 80272f6:	687a      	ldr	r2, [r7, #4]
 80272f8:	01d2      	lsls	r2, r2, #7
 80272fa:	440a      	add	r2, r1
 80272fc:	3284      	adds	r2, #132	; 0x84
 80272fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8027302:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8027304:	68bb      	ldr	r3, [r7, #8]
 8027306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027308:	69fa      	ldr	r2, [r7, #28]
 802730a:	fb02 f303 	mul.w	r3, r2, r3
 802730e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8027310:	68bb      	ldr	r3, [r7, #8]
 8027312:	6859      	ldr	r1, [r3, #4]
 8027314:	68bb      	ldr	r3, [r7, #8]
 8027316:	681b      	ldr	r3, [r3, #0]
 8027318:	1acb      	subs	r3, r1, r3
 802731a:	69f9      	ldr	r1, [r7, #28]
 802731c:	fb01 f303 	mul.w	r3, r1, r3
 8027320:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8027322:	68f9      	ldr	r1, [r7, #12]
 8027324:	6809      	ldr	r1, [r1, #0]
 8027326:	4608      	mov	r0, r1
 8027328:	6879      	ldr	r1, [r7, #4]
 802732a:	01c9      	lsls	r1, r1, #7
 802732c:	4401      	add	r1, r0
 802732e:	3184      	adds	r1, #132	; 0x84
 8027330:	4313      	orrs	r3, r2
 8027332:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8027334:	68fb      	ldr	r3, [r7, #12]
 8027336:	681b      	ldr	r3, [r3, #0]
 8027338:	461a      	mov	r2, r3
 802733a:	687b      	ldr	r3, [r7, #4]
 802733c:	01db      	lsls	r3, r3, #7
 802733e:	4413      	add	r3, r2
 8027340:	3384      	adds	r3, #132	; 0x84
 8027342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027344:	68fa      	ldr	r2, [r7, #12]
 8027346:	6812      	ldr	r2, [r2, #0]
 8027348:	4611      	mov	r1, r2
 802734a:	687a      	ldr	r2, [r7, #4]
 802734c:	01d2      	lsls	r2, r2, #7
 802734e:	440a      	add	r2, r1
 8027350:	3284      	adds	r2, #132	; 0x84
 8027352:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8027356:	f023 0307 	bic.w	r3, r3, #7
 802735a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 802735c:	68fb      	ldr	r3, [r7, #12]
 802735e:	681b      	ldr	r3, [r3, #0]
 8027360:	461a      	mov	r2, r3
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	01db      	lsls	r3, r3, #7
 8027366:	4413      	add	r3, r2
 8027368:	3384      	adds	r3, #132	; 0x84
 802736a:	461a      	mov	r2, r3
 802736c:	68bb      	ldr	r3, [r7, #8]
 802736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027370:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8027372:	68fb      	ldr	r3, [r7, #12]
 8027374:	681b      	ldr	r3, [r3, #0]
 8027376:	461a      	mov	r2, r3
 8027378:	687b      	ldr	r3, [r7, #4]
 802737a:	01db      	lsls	r3, r3, #7
 802737c:	4413      	add	r3, r2
 802737e:	3384      	adds	r3, #132	; 0x84
 8027380:	681b      	ldr	r3, [r3, #0]
 8027382:	68fa      	ldr	r2, [r7, #12]
 8027384:	6812      	ldr	r2, [r2, #0]
 8027386:	4611      	mov	r1, r2
 8027388:	687a      	ldr	r2, [r7, #4]
 802738a:	01d2      	lsls	r2, r2, #7
 802738c:	440a      	add	r2, r1
 802738e:	3284      	adds	r2, #132	; 0x84
 8027390:	f043 0301 	orr.w	r3, r3, #1
 8027394:	6013      	str	r3, [r2, #0]
}
 8027396:	bf00      	nop
 8027398:	3724      	adds	r7, #36	; 0x24
 802739a:	46bd      	mov	sp, r7
 802739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273a0:	4770      	bx	lr
	...

080273a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80273a4:	b580      	push	{r7, lr}
 80273a6:	b086      	sub	sp, #24
 80273a8:	af00      	add	r7, sp, #0
 80273aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80273ac:	687b      	ldr	r3, [r7, #4]
 80273ae:	2b00      	cmp	r3, #0
 80273b0:	d101      	bne.n	80273b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80273b2:	2301      	movs	r3, #1
 80273b4:	e267      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80273b6:	687b      	ldr	r3, [r7, #4]
 80273b8:	681b      	ldr	r3, [r3, #0]
 80273ba:	f003 0301 	and.w	r3, r3, #1
 80273be:	2b00      	cmp	r3, #0
 80273c0:	d075      	beq.n	80274ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80273c2:	4b88      	ldr	r3, [pc, #544]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80273c4:	689b      	ldr	r3, [r3, #8]
 80273c6:	f003 030c 	and.w	r3, r3, #12
 80273ca:	2b04      	cmp	r3, #4
 80273cc:	d00c      	beq.n	80273e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80273ce:	4b85      	ldr	r3, [pc, #532]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80273d0:	689b      	ldr	r3, [r3, #8]
 80273d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80273d6:	2b08      	cmp	r3, #8
 80273d8:	d112      	bne.n	8027400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80273da:	4b82      	ldr	r3, [pc, #520]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80273dc:	685b      	ldr	r3, [r3, #4]
 80273de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80273e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80273e6:	d10b      	bne.n	8027400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80273e8:	4b7e      	ldr	r3, [pc, #504]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80273ea:	681b      	ldr	r3, [r3, #0]
 80273ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	d05b      	beq.n	80274ac <HAL_RCC_OscConfig+0x108>
 80273f4:	687b      	ldr	r3, [r7, #4]
 80273f6:	685b      	ldr	r3, [r3, #4]
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	d157      	bne.n	80274ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80273fc:	2301      	movs	r3, #1
 80273fe:	e242      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8027400:	687b      	ldr	r3, [r7, #4]
 8027402:	685b      	ldr	r3, [r3, #4]
 8027404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8027408:	d106      	bne.n	8027418 <HAL_RCC_OscConfig+0x74>
 802740a:	4b76      	ldr	r3, [pc, #472]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 802740c:	681b      	ldr	r3, [r3, #0]
 802740e:	4a75      	ldr	r2, [pc, #468]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027414:	6013      	str	r3, [r2, #0]
 8027416:	e01d      	b.n	8027454 <HAL_RCC_OscConfig+0xb0>
 8027418:	687b      	ldr	r3, [r7, #4]
 802741a:	685b      	ldr	r3, [r3, #4]
 802741c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8027420:	d10c      	bne.n	802743c <HAL_RCC_OscConfig+0x98>
 8027422:	4b70      	ldr	r3, [pc, #448]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027424:	681b      	ldr	r3, [r3, #0]
 8027426:	4a6f      	ldr	r2, [pc, #444]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802742c:	6013      	str	r3, [r2, #0]
 802742e:	4b6d      	ldr	r3, [pc, #436]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027430:	681b      	ldr	r3, [r3, #0]
 8027432:	4a6c      	ldr	r2, [pc, #432]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027438:	6013      	str	r3, [r2, #0]
 802743a:	e00b      	b.n	8027454 <HAL_RCC_OscConfig+0xb0>
 802743c:	4b69      	ldr	r3, [pc, #420]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 802743e:	681b      	ldr	r3, [r3, #0]
 8027440:	4a68      	ldr	r2, [pc, #416]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8027446:	6013      	str	r3, [r2, #0]
 8027448:	4b66      	ldr	r3, [pc, #408]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 802744a:	681b      	ldr	r3, [r3, #0]
 802744c:	4a65      	ldr	r2, [pc, #404]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 802744e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8027452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8027454:	687b      	ldr	r3, [r7, #4]
 8027456:	685b      	ldr	r3, [r3, #4]
 8027458:	2b00      	cmp	r3, #0
 802745a:	d013      	beq.n	8027484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802745c:	f7fc f8a2 	bl	80235a4 <HAL_GetTick>
 8027460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027462:	e008      	b.n	8027476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8027464:	f7fc f89e 	bl	80235a4 <HAL_GetTick>
 8027468:	4602      	mov	r2, r0
 802746a:	693b      	ldr	r3, [r7, #16]
 802746c:	1ad3      	subs	r3, r2, r3
 802746e:	2b64      	cmp	r3, #100	; 0x64
 8027470:	d901      	bls.n	8027476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8027472:	2303      	movs	r3, #3
 8027474:	e207      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027476:	4b5b      	ldr	r3, [pc, #364]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027478:	681b      	ldr	r3, [r3, #0]
 802747a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802747e:	2b00      	cmp	r3, #0
 8027480:	d0f0      	beq.n	8027464 <HAL_RCC_OscConfig+0xc0>
 8027482:	e014      	b.n	80274ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8027484:	f7fc f88e 	bl	80235a4 <HAL_GetTick>
 8027488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802748a:	e008      	b.n	802749e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802748c:	f7fc f88a 	bl	80235a4 <HAL_GetTick>
 8027490:	4602      	mov	r2, r0
 8027492:	693b      	ldr	r3, [r7, #16]
 8027494:	1ad3      	subs	r3, r2, r3
 8027496:	2b64      	cmp	r3, #100	; 0x64
 8027498:	d901      	bls.n	802749e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802749a:	2303      	movs	r3, #3
 802749c:	e1f3      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802749e:	4b51      	ldr	r3, [pc, #324]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274a0:	681b      	ldr	r3, [r3, #0]
 80274a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80274a6:	2b00      	cmp	r3, #0
 80274a8:	d1f0      	bne.n	802748c <HAL_RCC_OscConfig+0xe8>
 80274aa:	e000      	b.n	80274ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80274ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80274ae:	687b      	ldr	r3, [r7, #4]
 80274b0:	681b      	ldr	r3, [r3, #0]
 80274b2:	f003 0302 	and.w	r3, r3, #2
 80274b6:	2b00      	cmp	r3, #0
 80274b8:	d063      	beq.n	8027582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80274ba:	4b4a      	ldr	r3, [pc, #296]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274bc:	689b      	ldr	r3, [r3, #8]
 80274be:	f003 030c 	and.w	r3, r3, #12
 80274c2:	2b00      	cmp	r3, #0
 80274c4:	d00b      	beq.n	80274de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80274c6:	4b47      	ldr	r3, [pc, #284]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274c8:	689b      	ldr	r3, [r3, #8]
 80274ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80274ce:	2b08      	cmp	r3, #8
 80274d0:	d11c      	bne.n	802750c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80274d2:	4b44      	ldr	r3, [pc, #272]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274d4:	685b      	ldr	r3, [r3, #4]
 80274d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80274da:	2b00      	cmp	r3, #0
 80274dc:	d116      	bne.n	802750c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80274de:	4b41      	ldr	r3, [pc, #260]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274e0:	681b      	ldr	r3, [r3, #0]
 80274e2:	f003 0302 	and.w	r3, r3, #2
 80274e6:	2b00      	cmp	r3, #0
 80274e8:	d005      	beq.n	80274f6 <HAL_RCC_OscConfig+0x152>
 80274ea:	687b      	ldr	r3, [r7, #4]
 80274ec:	68db      	ldr	r3, [r3, #12]
 80274ee:	2b01      	cmp	r3, #1
 80274f0:	d001      	beq.n	80274f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80274f2:	2301      	movs	r3, #1
 80274f4:	e1c7      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80274f6:	4b3b      	ldr	r3, [pc, #236]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80274f8:	681b      	ldr	r3, [r3, #0]
 80274fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80274fe:	687b      	ldr	r3, [r7, #4]
 8027500:	691b      	ldr	r3, [r3, #16]
 8027502:	00db      	lsls	r3, r3, #3
 8027504:	4937      	ldr	r1, [pc, #220]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027506:	4313      	orrs	r3, r2
 8027508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802750a:	e03a      	b.n	8027582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 802750c:	687b      	ldr	r3, [r7, #4]
 802750e:	68db      	ldr	r3, [r3, #12]
 8027510:	2b00      	cmp	r3, #0
 8027512:	d020      	beq.n	8027556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8027514:	4b34      	ldr	r3, [pc, #208]	; (80275e8 <HAL_RCC_OscConfig+0x244>)
 8027516:	2201      	movs	r2, #1
 8027518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802751a:	f7fc f843 	bl	80235a4 <HAL_GetTick>
 802751e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027520:	e008      	b.n	8027534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027522:	f7fc f83f 	bl	80235a4 <HAL_GetTick>
 8027526:	4602      	mov	r2, r0
 8027528:	693b      	ldr	r3, [r7, #16]
 802752a:	1ad3      	subs	r3, r2, r3
 802752c:	2b02      	cmp	r3, #2
 802752e:	d901      	bls.n	8027534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8027530:	2303      	movs	r3, #3
 8027532:	e1a8      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027534:	4b2b      	ldr	r3, [pc, #172]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027536:	681b      	ldr	r3, [r3, #0]
 8027538:	f003 0302 	and.w	r3, r3, #2
 802753c:	2b00      	cmp	r3, #0
 802753e:	d0f0      	beq.n	8027522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8027540:	4b28      	ldr	r3, [pc, #160]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027542:	681b      	ldr	r3, [r3, #0]
 8027544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	691b      	ldr	r3, [r3, #16]
 802754c:	00db      	lsls	r3, r3, #3
 802754e:	4925      	ldr	r1, [pc, #148]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027550:	4313      	orrs	r3, r2
 8027552:	600b      	str	r3, [r1, #0]
 8027554:	e015      	b.n	8027582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8027556:	4b24      	ldr	r3, [pc, #144]	; (80275e8 <HAL_RCC_OscConfig+0x244>)
 8027558:	2200      	movs	r2, #0
 802755a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802755c:	f7fc f822 	bl	80235a4 <HAL_GetTick>
 8027560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027562:	e008      	b.n	8027576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8027564:	f7fc f81e 	bl	80235a4 <HAL_GetTick>
 8027568:	4602      	mov	r2, r0
 802756a:	693b      	ldr	r3, [r7, #16]
 802756c:	1ad3      	subs	r3, r2, r3
 802756e:	2b02      	cmp	r3, #2
 8027570:	d901      	bls.n	8027576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8027572:	2303      	movs	r3, #3
 8027574:	e187      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8027576:	4b1b      	ldr	r3, [pc, #108]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 8027578:	681b      	ldr	r3, [r3, #0]
 802757a:	f003 0302 	and.w	r3, r3, #2
 802757e:	2b00      	cmp	r3, #0
 8027580:	d1f0      	bne.n	8027564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8027582:	687b      	ldr	r3, [r7, #4]
 8027584:	681b      	ldr	r3, [r3, #0]
 8027586:	f003 0308 	and.w	r3, r3, #8
 802758a:	2b00      	cmp	r3, #0
 802758c:	d036      	beq.n	80275fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802758e:	687b      	ldr	r3, [r7, #4]
 8027590:	695b      	ldr	r3, [r3, #20]
 8027592:	2b00      	cmp	r3, #0
 8027594:	d016      	beq.n	80275c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8027596:	4b15      	ldr	r3, [pc, #84]	; (80275ec <HAL_RCC_OscConfig+0x248>)
 8027598:	2201      	movs	r2, #1
 802759a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802759c:	f7fc f802 	bl	80235a4 <HAL_GetTick>
 80275a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80275a2:	e008      	b.n	80275b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80275a4:	f7fb fffe 	bl	80235a4 <HAL_GetTick>
 80275a8:	4602      	mov	r2, r0
 80275aa:	693b      	ldr	r3, [r7, #16]
 80275ac:	1ad3      	subs	r3, r2, r3
 80275ae:	2b02      	cmp	r3, #2
 80275b0:	d901      	bls.n	80275b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80275b2:	2303      	movs	r3, #3
 80275b4:	e167      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80275b6:	4b0b      	ldr	r3, [pc, #44]	; (80275e4 <HAL_RCC_OscConfig+0x240>)
 80275b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80275ba:	f003 0302 	and.w	r3, r3, #2
 80275be:	2b00      	cmp	r3, #0
 80275c0:	d0f0      	beq.n	80275a4 <HAL_RCC_OscConfig+0x200>
 80275c2:	e01b      	b.n	80275fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80275c4:	4b09      	ldr	r3, [pc, #36]	; (80275ec <HAL_RCC_OscConfig+0x248>)
 80275c6:	2200      	movs	r2, #0
 80275c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80275ca:	f7fb ffeb 	bl	80235a4 <HAL_GetTick>
 80275ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80275d0:	e00e      	b.n	80275f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80275d2:	f7fb ffe7 	bl	80235a4 <HAL_GetTick>
 80275d6:	4602      	mov	r2, r0
 80275d8:	693b      	ldr	r3, [r7, #16]
 80275da:	1ad3      	subs	r3, r2, r3
 80275dc:	2b02      	cmp	r3, #2
 80275de:	d907      	bls.n	80275f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80275e0:	2303      	movs	r3, #3
 80275e2:	e150      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
 80275e4:	40023800 	.word	0x40023800
 80275e8:	42470000 	.word	0x42470000
 80275ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80275f0:	4b88      	ldr	r3, [pc, #544]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80275f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80275f4:	f003 0302 	and.w	r3, r3, #2
 80275f8:	2b00      	cmp	r3, #0
 80275fa:	d1ea      	bne.n	80275d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	f003 0304 	and.w	r3, r3, #4
 8027604:	2b00      	cmp	r3, #0
 8027606:	f000 8097 	beq.w	8027738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 802760a:	2300      	movs	r3, #0
 802760c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 802760e:	4b81      	ldr	r3, [pc, #516]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027616:	2b00      	cmp	r3, #0
 8027618:	d10f      	bne.n	802763a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802761a:	2300      	movs	r3, #0
 802761c:	60bb      	str	r3, [r7, #8]
 802761e:	4b7d      	ldr	r3, [pc, #500]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027622:	4a7c      	ldr	r2, [pc, #496]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027628:	6413      	str	r3, [r2, #64]	; 0x40
 802762a:	4b7a      	ldr	r3, [pc, #488]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 802762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802762e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027632:	60bb      	str	r3, [r7, #8]
 8027634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8027636:	2301      	movs	r3, #1
 8027638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802763a:	4b77      	ldr	r3, [pc, #476]	; (8027818 <HAL_RCC_OscConfig+0x474>)
 802763c:	681b      	ldr	r3, [r3, #0]
 802763e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027642:	2b00      	cmp	r3, #0
 8027644:	d118      	bne.n	8027678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8027646:	4b74      	ldr	r3, [pc, #464]	; (8027818 <HAL_RCC_OscConfig+0x474>)
 8027648:	681b      	ldr	r3, [r3, #0]
 802764a:	4a73      	ldr	r2, [pc, #460]	; (8027818 <HAL_RCC_OscConfig+0x474>)
 802764c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8027652:	f7fb ffa7 	bl	80235a4 <HAL_GetTick>
 8027656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8027658:	e008      	b.n	802766c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802765a:	f7fb ffa3 	bl	80235a4 <HAL_GetTick>
 802765e:	4602      	mov	r2, r0
 8027660:	693b      	ldr	r3, [r7, #16]
 8027662:	1ad3      	subs	r3, r2, r3
 8027664:	2b02      	cmp	r3, #2
 8027666:	d901      	bls.n	802766c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8027668:	2303      	movs	r3, #3
 802766a:	e10c      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802766c:	4b6a      	ldr	r3, [pc, #424]	; (8027818 <HAL_RCC_OscConfig+0x474>)
 802766e:	681b      	ldr	r3, [r3, #0]
 8027670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027674:	2b00      	cmp	r3, #0
 8027676:	d0f0      	beq.n	802765a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8027678:	687b      	ldr	r3, [r7, #4]
 802767a:	689b      	ldr	r3, [r3, #8]
 802767c:	2b01      	cmp	r3, #1
 802767e:	d106      	bne.n	802768e <HAL_RCC_OscConfig+0x2ea>
 8027680:	4b64      	ldr	r3, [pc, #400]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027684:	4a63      	ldr	r2, [pc, #396]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027686:	f043 0301 	orr.w	r3, r3, #1
 802768a:	6713      	str	r3, [r2, #112]	; 0x70
 802768c:	e01c      	b.n	80276c8 <HAL_RCC_OscConfig+0x324>
 802768e:	687b      	ldr	r3, [r7, #4]
 8027690:	689b      	ldr	r3, [r3, #8]
 8027692:	2b05      	cmp	r3, #5
 8027694:	d10c      	bne.n	80276b0 <HAL_RCC_OscConfig+0x30c>
 8027696:	4b5f      	ldr	r3, [pc, #380]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802769a:	4a5e      	ldr	r2, [pc, #376]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 802769c:	f043 0304 	orr.w	r3, r3, #4
 80276a0:	6713      	str	r3, [r2, #112]	; 0x70
 80276a2:	4b5c      	ldr	r3, [pc, #368]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80276a6:	4a5b      	ldr	r2, [pc, #364]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276a8:	f043 0301 	orr.w	r3, r3, #1
 80276ac:	6713      	str	r3, [r2, #112]	; 0x70
 80276ae:	e00b      	b.n	80276c8 <HAL_RCC_OscConfig+0x324>
 80276b0:	4b58      	ldr	r3, [pc, #352]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80276b4:	4a57      	ldr	r2, [pc, #348]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276b6:	f023 0301 	bic.w	r3, r3, #1
 80276ba:	6713      	str	r3, [r2, #112]	; 0x70
 80276bc:	4b55      	ldr	r3, [pc, #340]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80276c0:	4a54      	ldr	r2, [pc, #336]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276c2:	f023 0304 	bic.w	r3, r3, #4
 80276c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80276c8:	687b      	ldr	r3, [r7, #4]
 80276ca:	689b      	ldr	r3, [r3, #8]
 80276cc:	2b00      	cmp	r3, #0
 80276ce:	d015      	beq.n	80276fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80276d0:	f7fb ff68 	bl	80235a4 <HAL_GetTick>
 80276d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80276d6:	e00a      	b.n	80276ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80276d8:	f7fb ff64 	bl	80235a4 <HAL_GetTick>
 80276dc:	4602      	mov	r2, r0
 80276de:	693b      	ldr	r3, [r7, #16]
 80276e0:	1ad3      	subs	r3, r2, r3
 80276e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80276e6:	4293      	cmp	r3, r2
 80276e8:	d901      	bls.n	80276ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80276ea:	2303      	movs	r3, #3
 80276ec:	e0cb      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80276ee:	4b49      	ldr	r3, [pc, #292]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80276f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80276f2:	f003 0302 	and.w	r3, r3, #2
 80276f6:	2b00      	cmp	r3, #0
 80276f8:	d0ee      	beq.n	80276d8 <HAL_RCC_OscConfig+0x334>
 80276fa:	e014      	b.n	8027726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80276fc:	f7fb ff52 	bl	80235a4 <HAL_GetTick>
 8027700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8027702:	e00a      	b.n	802771a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8027704:	f7fb ff4e 	bl	80235a4 <HAL_GetTick>
 8027708:	4602      	mov	r2, r0
 802770a:	693b      	ldr	r3, [r7, #16]
 802770c:	1ad3      	subs	r3, r2, r3
 802770e:	f241 3288 	movw	r2, #5000	; 0x1388
 8027712:	4293      	cmp	r3, r2
 8027714:	d901      	bls.n	802771a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8027716:	2303      	movs	r3, #3
 8027718:	e0b5      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802771a:	4b3e      	ldr	r3, [pc, #248]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 802771c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802771e:	f003 0302 	and.w	r3, r3, #2
 8027722:	2b00      	cmp	r3, #0
 8027724:	d1ee      	bne.n	8027704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8027726:	7dfb      	ldrb	r3, [r7, #23]
 8027728:	2b01      	cmp	r3, #1
 802772a:	d105      	bne.n	8027738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802772c:	4b39      	ldr	r3, [pc, #228]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 802772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027730:	4a38      	ldr	r2, [pc, #224]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8027736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8027738:	687b      	ldr	r3, [r7, #4]
 802773a:	699b      	ldr	r3, [r3, #24]
 802773c:	2b00      	cmp	r3, #0
 802773e:	f000 80a1 	beq.w	8027884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8027742:	4b34      	ldr	r3, [pc, #208]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027744:	689b      	ldr	r3, [r3, #8]
 8027746:	f003 030c 	and.w	r3, r3, #12
 802774a:	2b08      	cmp	r3, #8
 802774c:	d05c      	beq.n	8027808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802774e:	687b      	ldr	r3, [r7, #4]
 8027750:	699b      	ldr	r3, [r3, #24]
 8027752:	2b02      	cmp	r3, #2
 8027754:	d141      	bne.n	80277da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8027756:	4b31      	ldr	r3, [pc, #196]	; (802781c <HAL_RCC_OscConfig+0x478>)
 8027758:	2200      	movs	r2, #0
 802775a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802775c:	f7fb ff22 	bl	80235a4 <HAL_GetTick>
 8027760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027762:	e008      	b.n	8027776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8027764:	f7fb ff1e 	bl	80235a4 <HAL_GetTick>
 8027768:	4602      	mov	r2, r0
 802776a:	693b      	ldr	r3, [r7, #16]
 802776c:	1ad3      	subs	r3, r2, r3
 802776e:	2b02      	cmp	r3, #2
 8027770:	d901      	bls.n	8027776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8027772:	2303      	movs	r3, #3
 8027774:	e087      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8027776:	4b27      	ldr	r3, [pc, #156]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 8027778:	681b      	ldr	r3, [r3, #0]
 802777a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802777e:	2b00      	cmp	r3, #0
 8027780:	d1f0      	bne.n	8027764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8027782:	687b      	ldr	r3, [r7, #4]
 8027784:	69da      	ldr	r2, [r3, #28]
 8027786:	687b      	ldr	r3, [r7, #4]
 8027788:	6a1b      	ldr	r3, [r3, #32]
 802778a:	431a      	orrs	r2, r3
 802778c:	687b      	ldr	r3, [r7, #4]
 802778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027790:	019b      	lsls	r3, r3, #6
 8027792:	431a      	orrs	r2, r3
 8027794:	687b      	ldr	r3, [r7, #4]
 8027796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027798:	085b      	lsrs	r3, r3, #1
 802779a:	3b01      	subs	r3, #1
 802779c:	041b      	lsls	r3, r3, #16
 802779e:	431a      	orrs	r2, r3
 80277a0:	687b      	ldr	r3, [r7, #4]
 80277a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80277a4:	061b      	lsls	r3, r3, #24
 80277a6:	491b      	ldr	r1, [pc, #108]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80277a8:	4313      	orrs	r3, r2
 80277aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80277ac:	4b1b      	ldr	r3, [pc, #108]	; (802781c <HAL_RCC_OscConfig+0x478>)
 80277ae:	2201      	movs	r2, #1
 80277b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80277b2:	f7fb fef7 	bl	80235a4 <HAL_GetTick>
 80277b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80277b8:	e008      	b.n	80277cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80277ba:	f7fb fef3 	bl	80235a4 <HAL_GetTick>
 80277be:	4602      	mov	r2, r0
 80277c0:	693b      	ldr	r3, [r7, #16]
 80277c2:	1ad3      	subs	r3, r2, r3
 80277c4:	2b02      	cmp	r3, #2
 80277c6:	d901      	bls.n	80277cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80277c8:	2303      	movs	r3, #3
 80277ca:	e05c      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80277cc:	4b11      	ldr	r3, [pc, #68]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80277ce:	681b      	ldr	r3, [r3, #0]
 80277d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	d0f0      	beq.n	80277ba <HAL_RCC_OscConfig+0x416>
 80277d8:	e054      	b.n	8027884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80277da:	4b10      	ldr	r3, [pc, #64]	; (802781c <HAL_RCC_OscConfig+0x478>)
 80277dc:	2200      	movs	r2, #0
 80277de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80277e0:	f7fb fee0 	bl	80235a4 <HAL_GetTick>
 80277e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80277e6:	e008      	b.n	80277fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80277e8:	f7fb fedc 	bl	80235a4 <HAL_GetTick>
 80277ec:	4602      	mov	r2, r0
 80277ee:	693b      	ldr	r3, [r7, #16]
 80277f0:	1ad3      	subs	r3, r2, r3
 80277f2:	2b02      	cmp	r3, #2
 80277f4:	d901      	bls.n	80277fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80277f6:	2303      	movs	r3, #3
 80277f8:	e045      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80277fa:	4b06      	ldr	r3, [pc, #24]	; (8027814 <HAL_RCC_OscConfig+0x470>)
 80277fc:	681b      	ldr	r3, [r3, #0]
 80277fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8027802:	2b00      	cmp	r3, #0
 8027804:	d1f0      	bne.n	80277e8 <HAL_RCC_OscConfig+0x444>
 8027806:	e03d      	b.n	8027884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	699b      	ldr	r3, [r3, #24]
 802780c:	2b01      	cmp	r3, #1
 802780e:	d107      	bne.n	8027820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8027810:	2301      	movs	r3, #1
 8027812:	e038      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
 8027814:	40023800 	.word	0x40023800
 8027818:	40007000 	.word	0x40007000
 802781c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8027820:	4b1b      	ldr	r3, [pc, #108]	; (8027890 <HAL_RCC_OscConfig+0x4ec>)
 8027822:	685b      	ldr	r3, [r3, #4]
 8027824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027826:	687b      	ldr	r3, [r7, #4]
 8027828:	699b      	ldr	r3, [r3, #24]
 802782a:	2b01      	cmp	r3, #1
 802782c:	d028      	beq.n	8027880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802782e:	68fb      	ldr	r3, [r7, #12]
 8027830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8027834:	687b      	ldr	r3, [r7, #4]
 8027836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8027838:	429a      	cmp	r2, r3
 802783a:	d121      	bne.n	8027880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802783c:	68fb      	ldr	r3, [r7, #12]
 802783e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8027842:	687b      	ldr	r3, [r7, #4]
 8027844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8027846:	429a      	cmp	r2, r3
 8027848:	d11a      	bne.n	8027880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802784a:	68fa      	ldr	r2, [r7, #12]
 802784c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8027850:	4013      	ands	r3, r2
 8027852:	687a      	ldr	r2, [r7, #4]
 8027854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8027856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8027858:	4293      	cmp	r3, r2
 802785a:	d111      	bne.n	8027880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802785c:	68fb      	ldr	r3, [r7, #12]
 802785e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8027862:	687b      	ldr	r3, [r7, #4]
 8027864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027866:	085b      	lsrs	r3, r3, #1
 8027868:	3b01      	subs	r3, #1
 802786a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802786c:	429a      	cmp	r2, r3
 802786e:	d107      	bne.n	8027880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8027870:	68fb      	ldr	r3, [r7, #12]
 8027872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8027876:	687b      	ldr	r3, [r7, #4]
 8027878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802787a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802787c:	429a      	cmp	r2, r3
 802787e:	d001      	beq.n	8027884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8027880:	2301      	movs	r3, #1
 8027882:	e000      	b.n	8027886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8027884:	2300      	movs	r3, #0
}
 8027886:	4618      	mov	r0, r3
 8027888:	3718      	adds	r7, #24
 802788a:	46bd      	mov	sp, r7
 802788c:	bd80      	pop	{r7, pc}
 802788e:	bf00      	nop
 8027890:	40023800 	.word	0x40023800

08027894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8027894:	b580      	push	{r7, lr}
 8027896:	b084      	sub	sp, #16
 8027898:	af00      	add	r7, sp, #0
 802789a:	6078      	str	r0, [r7, #4]
 802789c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802789e:	687b      	ldr	r3, [r7, #4]
 80278a0:	2b00      	cmp	r3, #0
 80278a2:	d101      	bne.n	80278a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80278a4:	2301      	movs	r3, #1
 80278a6:	e0cc      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80278a8:	4b68      	ldr	r3, [pc, #416]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	f003 030f 	and.w	r3, r3, #15
 80278b0:	683a      	ldr	r2, [r7, #0]
 80278b2:	429a      	cmp	r2, r3
 80278b4:	d90c      	bls.n	80278d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80278b6:	4b65      	ldr	r3, [pc, #404]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80278b8:	683a      	ldr	r2, [r7, #0]
 80278ba:	b2d2      	uxtb	r2, r2
 80278bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80278be:	4b63      	ldr	r3, [pc, #396]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80278c0:	681b      	ldr	r3, [r3, #0]
 80278c2:	f003 030f 	and.w	r3, r3, #15
 80278c6:	683a      	ldr	r2, [r7, #0]
 80278c8:	429a      	cmp	r2, r3
 80278ca:	d001      	beq.n	80278d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80278cc:	2301      	movs	r3, #1
 80278ce:	e0b8      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80278d0:	687b      	ldr	r3, [r7, #4]
 80278d2:	681b      	ldr	r3, [r3, #0]
 80278d4:	f003 0302 	and.w	r3, r3, #2
 80278d8:	2b00      	cmp	r3, #0
 80278da:	d020      	beq.n	802791e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80278dc:	687b      	ldr	r3, [r7, #4]
 80278de:	681b      	ldr	r3, [r3, #0]
 80278e0:	f003 0304 	and.w	r3, r3, #4
 80278e4:	2b00      	cmp	r3, #0
 80278e6:	d005      	beq.n	80278f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80278e8:	4b59      	ldr	r3, [pc, #356]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 80278ea:	689b      	ldr	r3, [r3, #8]
 80278ec:	4a58      	ldr	r2, [pc, #352]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 80278ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80278f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80278f4:	687b      	ldr	r3, [r7, #4]
 80278f6:	681b      	ldr	r3, [r3, #0]
 80278f8:	f003 0308 	and.w	r3, r3, #8
 80278fc:	2b00      	cmp	r3, #0
 80278fe:	d005      	beq.n	802790c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8027900:	4b53      	ldr	r3, [pc, #332]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027902:	689b      	ldr	r3, [r3, #8]
 8027904:	4a52      	ldr	r2, [pc, #328]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802790a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 802790c:	4b50      	ldr	r3, [pc, #320]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 802790e:	689b      	ldr	r3, [r3, #8]
 8027910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8027914:	687b      	ldr	r3, [r7, #4]
 8027916:	689b      	ldr	r3, [r3, #8]
 8027918:	494d      	ldr	r1, [pc, #308]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 802791a:	4313      	orrs	r3, r2
 802791c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802791e:	687b      	ldr	r3, [r7, #4]
 8027920:	681b      	ldr	r3, [r3, #0]
 8027922:	f003 0301 	and.w	r3, r3, #1
 8027926:	2b00      	cmp	r3, #0
 8027928:	d044      	beq.n	80279b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802792a:	687b      	ldr	r3, [r7, #4]
 802792c:	685b      	ldr	r3, [r3, #4]
 802792e:	2b01      	cmp	r3, #1
 8027930:	d107      	bne.n	8027942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8027932:	4b47      	ldr	r3, [pc, #284]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027934:	681b      	ldr	r3, [r3, #0]
 8027936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802793a:	2b00      	cmp	r3, #0
 802793c:	d119      	bne.n	8027972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802793e:	2301      	movs	r3, #1
 8027940:	e07f      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8027942:	687b      	ldr	r3, [r7, #4]
 8027944:	685b      	ldr	r3, [r3, #4]
 8027946:	2b02      	cmp	r3, #2
 8027948:	d003      	beq.n	8027952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802794a:	687b      	ldr	r3, [r7, #4]
 802794c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802794e:	2b03      	cmp	r3, #3
 8027950:	d107      	bne.n	8027962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8027952:	4b3f      	ldr	r3, [pc, #252]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027954:	681b      	ldr	r3, [r3, #0]
 8027956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802795a:	2b00      	cmp	r3, #0
 802795c:	d109      	bne.n	8027972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802795e:	2301      	movs	r3, #1
 8027960:	e06f      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8027962:	4b3b      	ldr	r3, [pc, #236]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027964:	681b      	ldr	r3, [r3, #0]
 8027966:	f003 0302 	and.w	r3, r3, #2
 802796a:	2b00      	cmp	r3, #0
 802796c:	d101      	bne.n	8027972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802796e:	2301      	movs	r3, #1
 8027970:	e067      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8027972:	4b37      	ldr	r3, [pc, #220]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027974:	689b      	ldr	r3, [r3, #8]
 8027976:	f023 0203 	bic.w	r2, r3, #3
 802797a:	687b      	ldr	r3, [r7, #4]
 802797c:	685b      	ldr	r3, [r3, #4]
 802797e:	4934      	ldr	r1, [pc, #208]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027980:	4313      	orrs	r3, r2
 8027982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8027984:	f7fb fe0e 	bl	80235a4 <HAL_GetTick>
 8027988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802798a:	e00a      	b.n	80279a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802798c:	f7fb fe0a 	bl	80235a4 <HAL_GetTick>
 8027990:	4602      	mov	r2, r0
 8027992:	68fb      	ldr	r3, [r7, #12]
 8027994:	1ad3      	subs	r3, r2, r3
 8027996:	f241 3288 	movw	r2, #5000	; 0x1388
 802799a:	4293      	cmp	r3, r2
 802799c:	d901      	bls.n	80279a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802799e:	2303      	movs	r3, #3
 80279a0:	e04f      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80279a2:	4b2b      	ldr	r3, [pc, #172]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 80279a4:	689b      	ldr	r3, [r3, #8]
 80279a6:	f003 020c 	and.w	r2, r3, #12
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	685b      	ldr	r3, [r3, #4]
 80279ae:	009b      	lsls	r3, r3, #2
 80279b0:	429a      	cmp	r2, r3
 80279b2:	d1eb      	bne.n	802798c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80279b4:	4b25      	ldr	r3, [pc, #148]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80279b6:	681b      	ldr	r3, [r3, #0]
 80279b8:	f003 030f 	and.w	r3, r3, #15
 80279bc:	683a      	ldr	r2, [r7, #0]
 80279be:	429a      	cmp	r2, r3
 80279c0:	d20c      	bcs.n	80279dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80279c2:	4b22      	ldr	r3, [pc, #136]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80279c4:	683a      	ldr	r2, [r7, #0]
 80279c6:	b2d2      	uxtb	r2, r2
 80279c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80279ca:	4b20      	ldr	r3, [pc, #128]	; (8027a4c <HAL_RCC_ClockConfig+0x1b8>)
 80279cc:	681b      	ldr	r3, [r3, #0]
 80279ce:	f003 030f 	and.w	r3, r3, #15
 80279d2:	683a      	ldr	r2, [r7, #0]
 80279d4:	429a      	cmp	r2, r3
 80279d6:	d001      	beq.n	80279dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80279d8:	2301      	movs	r3, #1
 80279da:	e032      	b.n	8027a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80279dc:	687b      	ldr	r3, [r7, #4]
 80279de:	681b      	ldr	r3, [r3, #0]
 80279e0:	f003 0304 	and.w	r3, r3, #4
 80279e4:	2b00      	cmp	r3, #0
 80279e6:	d008      	beq.n	80279fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80279e8:	4b19      	ldr	r3, [pc, #100]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 80279ea:	689b      	ldr	r3, [r3, #8]
 80279ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80279f0:	687b      	ldr	r3, [r7, #4]
 80279f2:	68db      	ldr	r3, [r3, #12]
 80279f4:	4916      	ldr	r1, [pc, #88]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 80279f6:	4313      	orrs	r3, r2
 80279f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80279fa:	687b      	ldr	r3, [r7, #4]
 80279fc:	681b      	ldr	r3, [r3, #0]
 80279fe:	f003 0308 	and.w	r3, r3, #8
 8027a02:	2b00      	cmp	r3, #0
 8027a04:	d009      	beq.n	8027a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8027a06:	4b12      	ldr	r3, [pc, #72]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027a08:	689b      	ldr	r3, [r3, #8]
 8027a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8027a0e:	687b      	ldr	r3, [r7, #4]
 8027a10:	691b      	ldr	r3, [r3, #16]
 8027a12:	00db      	lsls	r3, r3, #3
 8027a14:	490e      	ldr	r1, [pc, #56]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027a16:	4313      	orrs	r3, r2
 8027a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8027a1a:	f000 f821 	bl	8027a60 <HAL_RCC_GetSysClockFreq>
 8027a1e:	4602      	mov	r2, r0
 8027a20:	4b0b      	ldr	r3, [pc, #44]	; (8027a50 <HAL_RCC_ClockConfig+0x1bc>)
 8027a22:	689b      	ldr	r3, [r3, #8]
 8027a24:	091b      	lsrs	r3, r3, #4
 8027a26:	f003 030f 	and.w	r3, r3, #15
 8027a2a:	490a      	ldr	r1, [pc, #40]	; (8027a54 <HAL_RCC_ClockConfig+0x1c0>)
 8027a2c:	5ccb      	ldrb	r3, [r1, r3]
 8027a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8027a32:	4a09      	ldr	r2, [pc, #36]	; (8027a58 <HAL_RCC_ClockConfig+0x1c4>)
 8027a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8027a36:	4b09      	ldr	r3, [pc, #36]	; (8027a5c <HAL_RCC_ClockConfig+0x1c8>)
 8027a38:	681b      	ldr	r3, [r3, #0]
 8027a3a:	4618      	mov	r0, r3
 8027a3c:	f7fa f9ce 	bl	8021ddc <HAL_InitTick>

  return HAL_OK;
 8027a40:	2300      	movs	r3, #0
}
 8027a42:	4618      	mov	r0, r3
 8027a44:	3710      	adds	r7, #16
 8027a46:	46bd      	mov	sp, r7
 8027a48:	bd80      	pop	{r7, pc}
 8027a4a:	bf00      	nop
 8027a4c:	40023c00 	.word	0x40023c00
 8027a50:	40023800 	.word	0x40023800
 8027a54:	0802fa20 	.word	0x0802fa20
 8027a58:	20000004 	.word	0x20000004
 8027a5c:	20000058 	.word	0x20000058

08027a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8027a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8027a64:	b094      	sub	sp, #80	; 0x50
 8027a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8027a68:	2300      	movs	r3, #0
 8027a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8027a6c:	2300      	movs	r3, #0
 8027a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027a70:	2300      	movs	r3, #0
 8027a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8027a74:	2300      	movs	r3, #0
 8027a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8027a78:	4b79      	ldr	r3, [pc, #484]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027a7a:	689b      	ldr	r3, [r3, #8]
 8027a7c:	f003 030c 	and.w	r3, r3, #12
 8027a80:	2b08      	cmp	r3, #8
 8027a82:	d00d      	beq.n	8027aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8027a84:	2b08      	cmp	r3, #8
 8027a86:	f200 80e1 	bhi.w	8027c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8027a8a:	2b00      	cmp	r3, #0
 8027a8c:	d002      	beq.n	8027a94 <HAL_RCC_GetSysClockFreq+0x34>
 8027a8e:	2b04      	cmp	r3, #4
 8027a90:	d003      	beq.n	8027a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8027a92:	e0db      	b.n	8027c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8027a94:	4b73      	ldr	r3, [pc, #460]	; (8027c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8027a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8027a98:	e0db      	b.n	8027c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8027a9a:	4b73      	ldr	r3, [pc, #460]	; (8027c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8027a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027a9e:	e0d8      	b.n	8027c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8027aa0:	4b6f      	ldr	r3, [pc, #444]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027aa2:	685b      	ldr	r3, [r3, #4]
 8027aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8027aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8027aaa:	4b6d      	ldr	r3, [pc, #436]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027aac:	685b      	ldr	r3, [r3, #4]
 8027aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8027ab2:	2b00      	cmp	r3, #0
 8027ab4:	d063      	beq.n	8027b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027ab6:	4b6a      	ldr	r3, [pc, #424]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027ab8:	685b      	ldr	r3, [r3, #4]
 8027aba:	099b      	lsrs	r3, r3, #6
 8027abc:	2200      	movs	r2, #0
 8027abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8027ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8027ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8027ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8027aca:	2300      	movs	r3, #0
 8027acc:	637b      	str	r3, [r7, #52]	; 0x34
 8027ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8027ad2:	4622      	mov	r2, r4
 8027ad4:	462b      	mov	r3, r5
 8027ad6:	f04f 0000 	mov.w	r0, #0
 8027ada:	f04f 0100 	mov.w	r1, #0
 8027ade:	0159      	lsls	r1, r3, #5
 8027ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027ae4:	0150      	lsls	r0, r2, #5
 8027ae6:	4602      	mov	r2, r0
 8027ae8:	460b      	mov	r3, r1
 8027aea:	4621      	mov	r1, r4
 8027aec:	1a51      	subs	r1, r2, r1
 8027aee:	6139      	str	r1, [r7, #16]
 8027af0:	4629      	mov	r1, r5
 8027af2:	eb63 0301 	sbc.w	r3, r3, r1
 8027af6:	617b      	str	r3, [r7, #20]
 8027af8:	f04f 0200 	mov.w	r2, #0
 8027afc:	f04f 0300 	mov.w	r3, #0
 8027b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8027b04:	4659      	mov	r1, fp
 8027b06:	018b      	lsls	r3, r1, #6
 8027b08:	4651      	mov	r1, sl
 8027b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8027b0e:	4651      	mov	r1, sl
 8027b10:	018a      	lsls	r2, r1, #6
 8027b12:	4651      	mov	r1, sl
 8027b14:	ebb2 0801 	subs.w	r8, r2, r1
 8027b18:	4659      	mov	r1, fp
 8027b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8027b1e:	f04f 0200 	mov.w	r2, #0
 8027b22:	f04f 0300 	mov.w	r3, #0
 8027b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8027b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8027b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8027b32:	4690      	mov	r8, r2
 8027b34:	4699      	mov	r9, r3
 8027b36:	4623      	mov	r3, r4
 8027b38:	eb18 0303 	adds.w	r3, r8, r3
 8027b3c:	60bb      	str	r3, [r7, #8]
 8027b3e:	462b      	mov	r3, r5
 8027b40:	eb49 0303 	adc.w	r3, r9, r3
 8027b44:	60fb      	str	r3, [r7, #12]
 8027b46:	f04f 0200 	mov.w	r2, #0
 8027b4a:	f04f 0300 	mov.w	r3, #0
 8027b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8027b52:	4629      	mov	r1, r5
 8027b54:	024b      	lsls	r3, r1, #9
 8027b56:	4621      	mov	r1, r4
 8027b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8027b5c:	4621      	mov	r1, r4
 8027b5e:	024a      	lsls	r2, r1, #9
 8027b60:	4610      	mov	r0, r2
 8027b62:	4619      	mov	r1, r3
 8027b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b66:	2200      	movs	r2, #0
 8027b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8027b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8027b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8027b70:	f7f8 fb8e 	bl	8020290 <__aeabi_uldivmod>
 8027b74:	4602      	mov	r2, r0
 8027b76:	460b      	mov	r3, r1
 8027b78:	4613      	mov	r3, r2
 8027b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027b7c:	e058      	b.n	8027c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8027b7e:	4b38      	ldr	r3, [pc, #224]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027b80:	685b      	ldr	r3, [r3, #4]
 8027b82:	099b      	lsrs	r3, r3, #6
 8027b84:	2200      	movs	r2, #0
 8027b86:	4618      	mov	r0, r3
 8027b88:	4611      	mov	r1, r2
 8027b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8027b8e:	623b      	str	r3, [r7, #32]
 8027b90:	2300      	movs	r3, #0
 8027b92:	627b      	str	r3, [r7, #36]	; 0x24
 8027b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8027b98:	4642      	mov	r2, r8
 8027b9a:	464b      	mov	r3, r9
 8027b9c:	f04f 0000 	mov.w	r0, #0
 8027ba0:	f04f 0100 	mov.w	r1, #0
 8027ba4:	0159      	lsls	r1, r3, #5
 8027ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8027baa:	0150      	lsls	r0, r2, #5
 8027bac:	4602      	mov	r2, r0
 8027bae:	460b      	mov	r3, r1
 8027bb0:	4641      	mov	r1, r8
 8027bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8027bb6:	4649      	mov	r1, r9
 8027bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8027bbc:	f04f 0200 	mov.w	r2, #0
 8027bc0:	f04f 0300 	mov.w	r3, #0
 8027bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8027bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8027bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8027bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8027bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8027bd8:	f04f 0200 	mov.w	r2, #0
 8027bdc:	f04f 0300 	mov.w	r3, #0
 8027be0:	00eb      	lsls	r3, r5, #3
 8027be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8027be6:	00e2      	lsls	r2, r4, #3
 8027be8:	4614      	mov	r4, r2
 8027bea:	461d      	mov	r5, r3
 8027bec:	4643      	mov	r3, r8
 8027bee:	18e3      	adds	r3, r4, r3
 8027bf0:	603b      	str	r3, [r7, #0]
 8027bf2:	464b      	mov	r3, r9
 8027bf4:	eb45 0303 	adc.w	r3, r5, r3
 8027bf8:	607b      	str	r3, [r7, #4]
 8027bfa:	f04f 0200 	mov.w	r2, #0
 8027bfe:	f04f 0300 	mov.w	r3, #0
 8027c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8027c06:	4629      	mov	r1, r5
 8027c08:	028b      	lsls	r3, r1, #10
 8027c0a:	4621      	mov	r1, r4
 8027c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8027c10:	4621      	mov	r1, r4
 8027c12:	028a      	lsls	r2, r1, #10
 8027c14:	4610      	mov	r0, r2
 8027c16:	4619      	mov	r1, r3
 8027c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c1a:	2200      	movs	r2, #0
 8027c1c:	61bb      	str	r3, [r7, #24]
 8027c1e:	61fa      	str	r2, [r7, #28]
 8027c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8027c24:	f7f8 fb34 	bl	8020290 <__aeabi_uldivmod>
 8027c28:	4602      	mov	r2, r0
 8027c2a:	460b      	mov	r3, r1
 8027c2c:	4613      	mov	r3, r2
 8027c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8027c30:	4b0b      	ldr	r3, [pc, #44]	; (8027c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8027c32:	685b      	ldr	r3, [r3, #4]
 8027c34:	0c1b      	lsrs	r3, r3, #16
 8027c36:	f003 0303 	and.w	r3, r3, #3
 8027c3a:	3301      	adds	r3, #1
 8027c3c:	005b      	lsls	r3, r3, #1
 8027c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8027c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8027c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027c4a:	e002      	b.n	8027c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8027c4c:	4b05      	ldr	r3, [pc, #20]	; (8027c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8027c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8027c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8027c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8027c54:	4618      	mov	r0, r3
 8027c56:	3750      	adds	r7, #80	; 0x50
 8027c58:	46bd      	mov	sp, r7
 8027c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8027c5e:	bf00      	nop
 8027c60:	40023800 	.word	0x40023800
 8027c64:	00f42400 	.word	0x00f42400
 8027c68:	007a1200 	.word	0x007a1200

08027c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8027c6c:	b480      	push	{r7}
 8027c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8027c70:	4b03      	ldr	r3, [pc, #12]	; (8027c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8027c72:	681b      	ldr	r3, [r3, #0]
}
 8027c74:	4618      	mov	r0, r3
 8027c76:	46bd      	mov	sp, r7
 8027c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027c7c:	4770      	bx	lr
 8027c7e:	bf00      	nop
 8027c80:	20000004 	.word	0x20000004

08027c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8027c84:	b580      	push	{r7, lr}
 8027c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8027c88:	f7ff fff0 	bl	8027c6c <HAL_RCC_GetHCLKFreq>
 8027c8c:	4602      	mov	r2, r0
 8027c8e:	4b05      	ldr	r3, [pc, #20]	; (8027ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8027c90:	689b      	ldr	r3, [r3, #8]
 8027c92:	0a9b      	lsrs	r3, r3, #10
 8027c94:	f003 0307 	and.w	r3, r3, #7
 8027c98:	4903      	ldr	r1, [pc, #12]	; (8027ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8027c9a:	5ccb      	ldrb	r3, [r1, r3]
 8027c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027ca0:	4618      	mov	r0, r3
 8027ca2:	bd80      	pop	{r7, pc}
 8027ca4:	40023800 	.word	0x40023800
 8027ca8:	0802fa30 	.word	0x0802fa30

08027cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8027cac:	b580      	push	{r7, lr}
 8027cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8027cb0:	f7ff ffdc 	bl	8027c6c <HAL_RCC_GetHCLKFreq>
 8027cb4:	4602      	mov	r2, r0
 8027cb6:	4b05      	ldr	r3, [pc, #20]	; (8027ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8027cb8:	689b      	ldr	r3, [r3, #8]
 8027cba:	0b5b      	lsrs	r3, r3, #13
 8027cbc:	f003 0307 	and.w	r3, r3, #7
 8027cc0:	4903      	ldr	r1, [pc, #12]	; (8027cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8027cc2:	5ccb      	ldrb	r3, [r1, r3]
 8027cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8027cc8:	4618      	mov	r0, r3
 8027cca:	bd80      	pop	{r7, pc}
 8027ccc:	40023800 	.word	0x40023800
 8027cd0:	0802fa30 	.word	0x0802fa30

08027cd4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8027cd4:	b480      	push	{r7}
 8027cd6:	b083      	sub	sp, #12
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	6078      	str	r0, [r7, #4]
 8027cdc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8027cde:	687b      	ldr	r3, [r7, #4]
 8027ce0:	220f      	movs	r2, #15
 8027ce2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8027ce4:	4b12      	ldr	r3, [pc, #72]	; (8027d30 <HAL_RCC_GetClockConfig+0x5c>)
 8027ce6:	689b      	ldr	r3, [r3, #8]
 8027ce8:	f003 0203 	and.w	r2, r3, #3
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8027cf0:	4b0f      	ldr	r3, [pc, #60]	; (8027d30 <HAL_RCC_GetClockConfig+0x5c>)
 8027cf2:	689b      	ldr	r3, [r3, #8]
 8027cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8027cf8:	687b      	ldr	r3, [r7, #4]
 8027cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8027cfc:	4b0c      	ldr	r3, [pc, #48]	; (8027d30 <HAL_RCC_GetClockConfig+0x5c>)
 8027cfe:	689b      	ldr	r3, [r3, #8]
 8027d00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027d04:	687b      	ldr	r3, [r7, #4]
 8027d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8027d08:	4b09      	ldr	r3, [pc, #36]	; (8027d30 <HAL_RCC_GetClockConfig+0x5c>)
 8027d0a:	689b      	ldr	r3, [r3, #8]
 8027d0c:	08db      	lsrs	r3, r3, #3
 8027d0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8027d12:	687b      	ldr	r3, [r7, #4]
 8027d14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8027d16:	4b07      	ldr	r3, [pc, #28]	; (8027d34 <HAL_RCC_GetClockConfig+0x60>)
 8027d18:	681b      	ldr	r3, [r3, #0]
 8027d1a:	f003 020f 	and.w	r2, r3, #15
 8027d1e:	683b      	ldr	r3, [r7, #0]
 8027d20:	601a      	str	r2, [r3, #0]
}
 8027d22:	bf00      	nop
 8027d24:	370c      	adds	r7, #12
 8027d26:	46bd      	mov	sp, r7
 8027d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d2c:	4770      	bx	lr
 8027d2e:	bf00      	nop
 8027d30:	40023800 	.word	0x40023800
 8027d34:	40023c00 	.word	0x40023c00

08027d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8027d38:	b580      	push	{r7, lr}
 8027d3a:	b086      	sub	sp, #24
 8027d3c:	af00      	add	r7, sp, #0
 8027d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027d40:	2300      	movs	r3, #0
 8027d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8027d44:	2300      	movs	r3, #0
 8027d46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027d48:	687b      	ldr	r3, [r7, #4]
 8027d4a:	681b      	ldr	r3, [r3, #0]
 8027d4c:	f003 0301 	and.w	r3, r3, #1
 8027d50:	2b00      	cmp	r3, #0
 8027d52:	d10b      	bne.n	8027d6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027d54:	687b      	ldr	r3, [r7, #4]
 8027d56:	681b      	ldr	r3, [r3, #0]
 8027d58:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d105      	bne.n	8027d6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8027d60:	687b      	ldr	r3, [r7, #4]
 8027d62:	681b      	ldr	r3, [r3, #0]
 8027d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8027d68:	2b00      	cmp	r3, #0
 8027d6a:	d075      	beq.n	8027e58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8027d6c:	4b91      	ldr	r3, [pc, #580]	; (8027fb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027d6e:	2200      	movs	r2, #0
 8027d70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027d72:	f7fb fc17 	bl	80235a4 <HAL_GetTick>
 8027d76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027d78:	e008      	b.n	8027d8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027d7a:	f7fb fc13 	bl	80235a4 <HAL_GetTick>
 8027d7e:	4602      	mov	r2, r0
 8027d80:	697b      	ldr	r3, [r7, #20]
 8027d82:	1ad3      	subs	r3, r2, r3
 8027d84:	2b02      	cmp	r3, #2
 8027d86:	d901      	bls.n	8027d8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027d88:	2303      	movs	r3, #3
 8027d8a:	e189      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8027d8c:	4b8a      	ldr	r3, [pc, #552]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027d8e:	681b      	ldr	r3, [r3, #0]
 8027d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027d94:	2b00      	cmp	r3, #0
 8027d96:	d1f0      	bne.n	8027d7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8027d98:	687b      	ldr	r3, [r7, #4]
 8027d9a:	681b      	ldr	r3, [r3, #0]
 8027d9c:	f003 0301 	and.w	r3, r3, #1
 8027da0:	2b00      	cmp	r3, #0
 8027da2:	d009      	beq.n	8027db8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8027da4:	687b      	ldr	r3, [r7, #4]
 8027da6:	685b      	ldr	r3, [r3, #4]
 8027da8:	019a      	lsls	r2, r3, #6
 8027daa:	687b      	ldr	r3, [r7, #4]
 8027dac:	689b      	ldr	r3, [r3, #8]
 8027dae:	071b      	lsls	r3, r3, #28
 8027db0:	4981      	ldr	r1, [pc, #516]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027db2:	4313      	orrs	r3, r2
 8027db4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8027db8:	687b      	ldr	r3, [r7, #4]
 8027dba:	681b      	ldr	r3, [r3, #0]
 8027dbc:	f003 0302 	and.w	r3, r3, #2
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d01f      	beq.n	8027e04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8027dc4:	4b7c      	ldr	r3, [pc, #496]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8027dca:	0f1b      	lsrs	r3, r3, #28
 8027dcc:	f003 0307 	and.w	r3, r3, #7
 8027dd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8027dd2:	687b      	ldr	r3, [r7, #4]
 8027dd4:	685b      	ldr	r3, [r3, #4]
 8027dd6:	019a      	lsls	r2, r3, #6
 8027dd8:	687b      	ldr	r3, [r7, #4]
 8027dda:	68db      	ldr	r3, [r3, #12]
 8027ddc:	061b      	lsls	r3, r3, #24
 8027dde:	431a      	orrs	r2, r3
 8027de0:	693b      	ldr	r3, [r7, #16]
 8027de2:	071b      	lsls	r3, r3, #28
 8027de4:	4974      	ldr	r1, [pc, #464]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027de6:	4313      	orrs	r3, r2
 8027de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8027dec:	4b72      	ldr	r3, [pc, #456]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027df2:	f023 021f 	bic.w	r2, r3, #31
 8027df6:	687b      	ldr	r3, [r7, #4]
 8027df8:	69db      	ldr	r3, [r3, #28]
 8027dfa:	3b01      	subs	r3, #1
 8027dfc:	496e      	ldr	r1, [pc, #440]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027dfe:	4313      	orrs	r3, r2
 8027e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8027e04:	687b      	ldr	r3, [r7, #4]
 8027e06:	681b      	ldr	r3, [r3, #0]
 8027e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027e0c:	2b00      	cmp	r3, #0
 8027e0e:	d00d      	beq.n	8027e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8027e10:	687b      	ldr	r3, [r7, #4]
 8027e12:	685b      	ldr	r3, [r3, #4]
 8027e14:	019a      	lsls	r2, r3, #6
 8027e16:	687b      	ldr	r3, [r7, #4]
 8027e18:	68db      	ldr	r3, [r3, #12]
 8027e1a:	061b      	lsls	r3, r3, #24
 8027e1c:	431a      	orrs	r2, r3
 8027e1e:	687b      	ldr	r3, [r7, #4]
 8027e20:	689b      	ldr	r3, [r3, #8]
 8027e22:	071b      	lsls	r3, r3, #28
 8027e24:	4964      	ldr	r1, [pc, #400]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e26:	4313      	orrs	r3, r2
 8027e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8027e2c:	4b61      	ldr	r3, [pc, #388]	; (8027fb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8027e2e:	2201      	movs	r2, #1
 8027e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027e32:	f7fb fbb7 	bl	80235a4 <HAL_GetTick>
 8027e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027e38:	e008      	b.n	8027e4c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8027e3a:	f7fb fbb3 	bl	80235a4 <HAL_GetTick>
 8027e3e:	4602      	mov	r2, r0
 8027e40:	697b      	ldr	r3, [r7, #20]
 8027e42:	1ad3      	subs	r3, r2, r3
 8027e44:	2b02      	cmp	r3, #2
 8027e46:	d901      	bls.n	8027e4c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e48:	2303      	movs	r3, #3
 8027e4a:	e129      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8027e4c:	4b5a      	ldr	r3, [pc, #360]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e4e:	681b      	ldr	r3, [r3, #0]
 8027e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8027e54:	2b00      	cmp	r3, #0
 8027e56:	d0f0      	beq.n	8027e3a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027e58:	687b      	ldr	r3, [r7, #4]
 8027e5a:	681b      	ldr	r3, [r3, #0]
 8027e5c:	f003 0304 	and.w	r3, r3, #4
 8027e60:	2b00      	cmp	r3, #0
 8027e62:	d105      	bne.n	8027e70 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8027e64:	687b      	ldr	r3, [r7, #4]
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d079      	beq.n	8027f64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8027e70:	4b52      	ldr	r3, [pc, #328]	; (8027fbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027e72:	2200      	movs	r2, #0
 8027e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027e76:	f7fb fb95 	bl	80235a4 <HAL_GetTick>
 8027e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027e7c:	e008      	b.n	8027e90 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027e7e:	f7fb fb91 	bl	80235a4 <HAL_GetTick>
 8027e82:	4602      	mov	r2, r0
 8027e84:	697b      	ldr	r3, [r7, #20]
 8027e86:	1ad3      	subs	r3, r2, r3
 8027e88:	2b02      	cmp	r3, #2
 8027e8a:	d901      	bls.n	8027e90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027e8c:	2303      	movs	r3, #3
 8027e8e:	e107      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8027e90:	4b49      	ldr	r3, [pc, #292]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027e92:	681b      	ldr	r3, [r3, #0]
 8027e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027e9c:	d0ef      	beq.n	8027e7e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8027e9e:	687b      	ldr	r3, [r7, #4]
 8027ea0:	681b      	ldr	r3, [r3, #0]
 8027ea2:	f003 0304 	and.w	r3, r3, #4
 8027ea6:	2b00      	cmp	r3, #0
 8027ea8:	d020      	beq.n	8027eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8027eaa:	4b43      	ldr	r3, [pc, #268]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027eb0:	0f1b      	lsrs	r3, r3, #28
 8027eb2:	f003 0307 	and.w	r3, r3, #7
 8027eb6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8027eb8:	687b      	ldr	r3, [r7, #4]
 8027eba:	691b      	ldr	r3, [r3, #16]
 8027ebc:	019a      	lsls	r2, r3, #6
 8027ebe:	687b      	ldr	r3, [r7, #4]
 8027ec0:	695b      	ldr	r3, [r3, #20]
 8027ec2:	061b      	lsls	r3, r3, #24
 8027ec4:	431a      	orrs	r2, r3
 8027ec6:	693b      	ldr	r3, [r7, #16]
 8027ec8:	071b      	lsls	r3, r3, #28
 8027eca:	493b      	ldr	r1, [pc, #236]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ecc:	4313      	orrs	r3, r2
 8027ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8027ed2:	4b39      	ldr	r3, [pc, #228]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027ed8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8027edc:	687b      	ldr	r3, [r7, #4]
 8027ede:	6a1b      	ldr	r3, [r3, #32]
 8027ee0:	3b01      	subs	r3, #1
 8027ee2:	021b      	lsls	r3, r3, #8
 8027ee4:	4934      	ldr	r1, [pc, #208]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027ee6:	4313      	orrs	r3, r2
 8027ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8027eec:	687b      	ldr	r3, [r7, #4]
 8027eee:	681b      	ldr	r3, [r3, #0]
 8027ef0:	f003 0308 	and.w	r3, r3, #8
 8027ef4:	2b00      	cmp	r3, #0
 8027ef6:	d01e      	beq.n	8027f36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8027ef8:	4b2f      	ldr	r3, [pc, #188]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8027efe:	0e1b      	lsrs	r3, r3, #24
 8027f00:	f003 030f 	and.w	r3, r3, #15
 8027f04:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8027f06:	687b      	ldr	r3, [r7, #4]
 8027f08:	691b      	ldr	r3, [r3, #16]
 8027f0a:	019a      	lsls	r2, r3, #6
 8027f0c:	693b      	ldr	r3, [r7, #16]
 8027f0e:	061b      	lsls	r3, r3, #24
 8027f10:	431a      	orrs	r2, r3
 8027f12:	687b      	ldr	r3, [r7, #4]
 8027f14:	699b      	ldr	r3, [r3, #24]
 8027f16:	071b      	lsls	r3, r3, #28
 8027f18:	4927      	ldr	r1, [pc, #156]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f1a:	4313      	orrs	r3, r2
 8027f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8027f20:	4b25      	ldr	r3, [pc, #148]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8027f26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8027f2a:	687b      	ldr	r3, [r7, #4]
 8027f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027f2e:	4922      	ldr	r1, [pc, #136]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f30:	4313      	orrs	r3, r2
 8027f32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8027f36:	4b21      	ldr	r3, [pc, #132]	; (8027fbc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8027f38:	2201      	movs	r2, #1
 8027f3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8027f3c:	f7fb fb32 	bl	80235a4 <HAL_GetTick>
 8027f40:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027f42:	e008      	b.n	8027f56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8027f44:	f7fb fb2e 	bl	80235a4 <HAL_GetTick>
 8027f48:	4602      	mov	r2, r0
 8027f4a:	697b      	ldr	r3, [r7, #20]
 8027f4c:	1ad3      	subs	r3, r2, r3
 8027f4e:	2b02      	cmp	r3, #2
 8027f50:	d901      	bls.n	8027f56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8027f52:	2303      	movs	r3, #3
 8027f54:	e0a4      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8027f56:	4b18      	ldr	r3, [pc, #96]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f58:	681b      	ldr	r3, [r3, #0]
 8027f5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8027f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8027f62:	d1ef      	bne.n	8027f44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	681b      	ldr	r3, [r3, #0]
 8027f68:	f003 0320 	and.w	r3, r3, #32
 8027f6c:	2b00      	cmp	r3, #0
 8027f6e:	f000 808b 	beq.w	8028088 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8027f72:	2300      	movs	r3, #0
 8027f74:	60fb      	str	r3, [r7, #12]
 8027f76:	4b10      	ldr	r3, [pc, #64]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027f7a:	4a0f      	ldr	r2, [pc, #60]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8027f80:	6413      	str	r3, [r2, #64]	; 0x40
 8027f82:	4b0d      	ldr	r3, [pc, #52]	; (8027fb8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8027f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027f8a:	60fb      	str	r3, [r7, #12]
 8027f8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8027f8e:	4b0c      	ldr	r3, [pc, #48]	; (8027fc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027f90:	681b      	ldr	r3, [r3, #0]
 8027f92:	4a0b      	ldr	r2, [pc, #44]	; (8027fc0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8027f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027f98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8027f9a:	f7fb fb03 	bl	80235a4 <HAL_GetTick>
 8027f9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027fa0:	e010      	b.n	8027fc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8027fa2:	f7fb faff 	bl	80235a4 <HAL_GetTick>
 8027fa6:	4602      	mov	r2, r0
 8027fa8:	697b      	ldr	r3, [r7, #20]
 8027faa:	1ad3      	subs	r3, r2, r3
 8027fac:	2b02      	cmp	r3, #2
 8027fae:	d909      	bls.n	8027fc4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8027fb0:	2303      	movs	r3, #3
 8027fb2:	e075      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8027fb4:	42470068 	.word	0x42470068
 8027fb8:	40023800 	.word	0x40023800
 8027fbc:	42470070 	.word	0x42470070
 8027fc0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8027fc4:	4b38      	ldr	r3, [pc, #224]	; (80280a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8027fc6:	681b      	ldr	r3, [r3, #0]
 8027fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027fcc:	2b00      	cmp	r3, #0
 8027fce:	d0e8      	beq.n	8027fa2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8027fd0:	4b36      	ldr	r3, [pc, #216]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027fd8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8027fda:	693b      	ldr	r3, [r7, #16]
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	d02f      	beq.n	8028040 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8027fe0:	687b      	ldr	r3, [r7, #4]
 8027fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8027fe8:	693a      	ldr	r2, [r7, #16]
 8027fea:	429a      	cmp	r2, r3
 8027fec:	d028      	beq.n	8028040 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8027fee:	4b2f      	ldr	r3, [pc, #188]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8027ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8027ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027ff6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8027ff8:	4b2d      	ldr	r3, [pc, #180]	; (80280b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8027ffa:	2201      	movs	r2, #1
 8027ffc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8027ffe:	4b2c      	ldr	r3, [pc, #176]	; (80280b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8028000:	2200      	movs	r2, #0
 8028002:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8028004:	4a29      	ldr	r2, [pc, #164]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028006:	693b      	ldr	r3, [r7, #16]
 8028008:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 802800a:	4b28      	ldr	r3, [pc, #160]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802800c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802800e:	f003 0301 	and.w	r3, r3, #1
 8028012:	2b01      	cmp	r3, #1
 8028014:	d114      	bne.n	8028040 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8028016:	f7fb fac5 	bl	80235a4 <HAL_GetTick>
 802801a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 802801c:	e00a      	b.n	8028034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802801e:	f7fb fac1 	bl	80235a4 <HAL_GetTick>
 8028022:	4602      	mov	r2, r0
 8028024:	697b      	ldr	r3, [r7, #20]
 8028026:	1ad3      	subs	r3, r2, r3
 8028028:	f241 3288 	movw	r2, #5000	; 0x1388
 802802c:	4293      	cmp	r3, r2
 802802e:	d901      	bls.n	8028034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8028030:	2303      	movs	r3, #3
 8028032:	e035      	b.n	80280a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028034:	4b1d      	ldr	r3, [pc, #116]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028038:	f003 0302 	and.w	r3, r3, #2
 802803c:	2b00      	cmp	r3, #0
 802803e:	d0ee      	beq.n	802801e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802804c:	d10d      	bne.n	802806a <HAL_RCCEx_PeriphCLKConfig+0x332>
 802804e:	4b17      	ldr	r3, [pc, #92]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028050:	689b      	ldr	r3, [r3, #8]
 8028052:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8028056:	687b      	ldr	r3, [r7, #4]
 8028058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802805a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 802805e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028062:	4912      	ldr	r1, [pc, #72]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028064:	4313      	orrs	r3, r2
 8028066:	608b      	str	r3, [r1, #8]
 8028068:	e005      	b.n	8028076 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 802806a:	4b10      	ldr	r3, [pc, #64]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 802806c:	689b      	ldr	r3, [r3, #8]
 802806e:	4a0f      	ldr	r2, [pc, #60]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028070:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8028074:	6093      	str	r3, [r2, #8]
 8028076:	4b0d      	ldr	r3, [pc, #52]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028078:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 802807a:	687b      	ldr	r3, [r7, #4]
 802807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802807e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028082:	490a      	ldr	r1, [pc, #40]	; (80280ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8028084:	4313      	orrs	r3, r2
 8028086:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8028088:	687b      	ldr	r3, [r7, #4]
 802808a:	681b      	ldr	r3, [r3, #0]
 802808c:	f003 0310 	and.w	r3, r3, #16
 8028090:	2b00      	cmp	r3, #0
 8028092:	d004      	beq.n	802809e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8028094:	687b      	ldr	r3, [r7, #4]
 8028096:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 802809a:	4b06      	ldr	r3, [pc, #24]	; (80280b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 802809c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 802809e:	2300      	movs	r3, #0
}
 80280a0:	4618      	mov	r0, r3
 80280a2:	3718      	adds	r7, #24
 80280a4:	46bd      	mov	sp, r7
 80280a6:	bd80      	pop	{r7, pc}
 80280a8:	40007000 	.word	0x40007000
 80280ac:	40023800 	.word	0x40023800
 80280b0:	42470e40 	.word	0x42470e40
 80280b4:	424711e0 	.word	0x424711e0

080280b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80280b8:	b580      	push	{r7, lr}
 80280ba:	b082      	sub	sp, #8
 80280bc:	af00      	add	r7, sp, #0
 80280be:	6078      	str	r0, [r7, #4]
 80280c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	2b00      	cmp	r3, #0
 80280c6:	d101      	bne.n	80280cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80280c8:	2301      	movs	r3, #1
 80280ca:	e025      	b.n	8028118 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80280cc:	687b      	ldr	r3, [r7, #4]
 80280ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80280d2:	b2db      	uxtb	r3, r3
 80280d4:	2b00      	cmp	r3, #0
 80280d6:	d106      	bne.n	80280e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80280d8:	687b      	ldr	r3, [r7, #4]
 80280da:	2200      	movs	r2, #0
 80280dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80280e0:	6878      	ldr	r0, [r7, #4]
 80280e2:	f7f9 fe71 	bl	8021dc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80280e6:	687b      	ldr	r3, [r7, #4]
 80280e8:	2202      	movs	r2, #2
 80280ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80280ee:	687b      	ldr	r3, [r7, #4]
 80280f0:	681a      	ldr	r2, [r3, #0]
 80280f2:	687b      	ldr	r3, [r7, #4]
 80280f4:	3304      	adds	r3, #4
 80280f6:	4619      	mov	r1, r3
 80280f8:	4610      	mov	r0, r2
 80280fa:	f002 fb47 	bl	802a78c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80280fe:	687b      	ldr	r3, [r7, #4]
 8028100:	6818      	ldr	r0, [r3, #0]
 8028102:	687b      	ldr	r3, [r7, #4]
 8028104:	685b      	ldr	r3, [r3, #4]
 8028106:	461a      	mov	r2, r3
 8028108:	6839      	ldr	r1, [r7, #0]
 802810a:	f002 fb9c 	bl	802a846 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802810e:	687b      	ldr	r3, [r7, #4]
 8028110:	2201      	movs	r2, #1
 8028112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8028116:	2300      	movs	r3, #0
}
 8028118:	4618      	mov	r0, r3
 802811a:	3708      	adds	r7, #8
 802811c:	46bd      	mov	sp, r7
 802811e:	bd80      	pop	{r7, pc}

08028120 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8028120:	b580      	push	{r7, lr}
 8028122:	b086      	sub	sp, #24
 8028124:	af00      	add	r7, sp, #0
 8028126:	60f8      	str	r0, [r7, #12]
 8028128:	60b9      	str	r1, [r7, #8]
 802812a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 802812c:	68fb      	ldr	r3, [r7, #12]
 802812e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8028132:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8028134:	7dfb      	ldrb	r3, [r7, #23]
 8028136:	2b02      	cmp	r3, #2
 8028138:	d101      	bne.n	802813e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 802813a:	2302      	movs	r3, #2
 802813c:	e021      	b.n	8028182 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 802813e:	7dfb      	ldrb	r3, [r7, #23]
 8028140:	2b01      	cmp	r3, #1
 8028142:	d002      	beq.n	802814a <HAL_SDRAM_SendCommand+0x2a>
 8028144:	7dfb      	ldrb	r3, [r7, #23]
 8028146:	2b05      	cmp	r3, #5
 8028148:	d118      	bne.n	802817c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802814a:	68fb      	ldr	r3, [r7, #12]
 802814c:	2202      	movs	r2, #2
 802814e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8028152:	68fb      	ldr	r3, [r7, #12]
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	687a      	ldr	r2, [r7, #4]
 8028158:	68b9      	ldr	r1, [r7, #8]
 802815a:	4618      	mov	r0, r3
 802815c:	f002 fbdc 	bl	802a918 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028160:	68bb      	ldr	r3, [r7, #8]
 8028162:	681b      	ldr	r3, [r3, #0]
 8028164:	2b02      	cmp	r3, #2
 8028166:	d104      	bne.n	8028172 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8028168:	68fb      	ldr	r3, [r7, #12]
 802816a:	2205      	movs	r2, #5
 802816c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8028170:	e006      	b.n	8028180 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8028172:	68fb      	ldr	r3, [r7, #12]
 8028174:	2201      	movs	r2, #1
 8028176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802817a:	e001      	b.n	8028180 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 802817c:	2301      	movs	r3, #1
 802817e:	e000      	b.n	8028182 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8028180:	2300      	movs	r3, #0
}
 8028182:	4618      	mov	r0, r3
 8028184:	3718      	adds	r7, #24
 8028186:	46bd      	mov	sp, r7
 8028188:	bd80      	pop	{r7, pc}

0802818a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 802818a:	b580      	push	{r7, lr}
 802818c:	b082      	sub	sp, #8
 802818e:	af00      	add	r7, sp, #0
 8028190:	6078      	str	r0, [r7, #4]
 8028192:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8028194:	687b      	ldr	r3, [r7, #4]
 8028196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802819a:	b2db      	uxtb	r3, r3
 802819c:	2b02      	cmp	r3, #2
 802819e:	d101      	bne.n	80281a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80281a0:	2302      	movs	r3, #2
 80281a2:	e016      	b.n	80281d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80281a4:	687b      	ldr	r3, [r7, #4]
 80281a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80281aa:	b2db      	uxtb	r3, r3
 80281ac:	2b01      	cmp	r3, #1
 80281ae:	d10f      	bne.n	80281d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80281b0:	687b      	ldr	r3, [r7, #4]
 80281b2:	2202      	movs	r2, #2
 80281b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80281b8:	687b      	ldr	r3, [r7, #4]
 80281ba:	681b      	ldr	r3, [r3, #0]
 80281bc:	6839      	ldr	r1, [r7, #0]
 80281be:	4618      	mov	r0, r3
 80281c0:	f002 fbe7 	bl	802a992 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80281c4:	687b      	ldr	r3, [r7, #4]
 80281c6:	2201      	movs	r2, #1
 80281c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80281cc:	2300      	movs	r3, #0
 80281ce:	e000      	b.n	80281d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80281d0:	2301      	movs	r3, #1
}
 80281d2:	4618      	mov	r0, r3
 80281d4:	3708      	adds	r7, #8
 80281d6:	46bd      	mov	sp, r7
 80281d8:	bd80      	pop	{r7, pc}

080281da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80281da:	b580      	push	{r7, lr}
 80281dc:	b082      	sub	sp, #8
 80281de:	af00      	add	r7, sp, #0
 80281e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80281e2:	687b      	ldr	r3, [r7, #4]
 80281e4:	2b00      	cmp	r3, #0
 80281e6:	d101      	bne.n	80281ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80281e8:	2301      	movs	r3, #1
 80281ea:	e07b      	b.n	80282e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80281ec:	687b      	ldr	r3, [r7, #4]
 80281ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80281f0:	2b00      	cmp	r3, #0
 80281f2:	d108      	bne.n	8028206 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80281f4:	687b      	ldr	r3, [r7, #4]
 80281f6:	685b      	ldr	r3, [r3, #4]
 80281f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80281fc:	d009      	beq.n	8028212 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80281fe:	687b      	ldr	r3, [r7, #4]
 8028200:	2200      	movs	r2, #0
 8028202:	61da      	str	r2, [r3, #28]
 8028204:	e005      	b.n	8028212 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8028206:	687b      	ldr	r3, [r7, #4]
 8028208:	2200      	movs	r2, #0
 802820a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 802820c:	687b      	ldr	r3, [r7, #4]
 802820e:	2200      	movs	r2, #0
 8028210:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028212:	687b      	ldr	r3, [r7, #4]
 8028214:	2200      	movs	r2, #0
 8028216:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028218:	687b      	ldr	r3, [r7, #4]
 802821a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802821e:	b2db      	uxtb	r3, r3
 8028220:	2b00      	cmp	r3, #0
 8028222:	d106      	bne.n	8028232 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028224:	687b      	ldr	r3, [r7, #4]
 8028226:	2200      	movs	r2, #0
 8028228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802822c:	6878      	ldr	r0, [r7, #4]
 802822e:	f7f9 fc09 	bl	8021a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028232:	687b      	ldr	r3, [r7, #4]
 8028234:	2202      	movs	r2, #2
 8028236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802823a:	687b      	ldr	r3, [r7, #4]
 802823c:	681b      	ldr	r3, [r3, #0]
 802823e:	681a      	ldr	r2, [r3, #0]
 8028240:	687b      	ldr	r3, [r7, #4]
 8028242:	681b      	ldr	r3, [r3, #0]
 8028244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028248:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 802824a:	687b      	ldr	r3, [r7, #4]
 802824c:	685b      	ldr	r3, [r3, #4]
 802824e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8028252:	687b      	ldr	r3, [r7, #4]
 8028254:	689b      	ldr	r3, [r3, #8]
 8028256:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 802825a:	431a      	orrs	r2, r3
 802825c:	687b      	ldr	r3, [r7, #4]
 802825e:	68db      	ldr	r3, [r3, #12]
 8028260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028264:	431a      	orrs	r2, r3
 8028266:	687b      	ldr	r3, [r7, #4]
 8028268:	691b      	ldr	r3, [r3, #16]
 802826a:	f003 0302 	and.w	r3, r3, #2
 802826e:	431a      	orrs	r2, r3
 8028270:	687b      	ldr	r3, [r7, #4]
 8028272:	695b      	ldr	r3, [r3, #20]
 8028274:	f003 0301 	and.w	r3, r3, #1
 8028278:	431a      	orrs	r2, r3
 802827a:	687b      	ldr	r3, [r7, #4]
 802827c:	699b      	ldr	r3, [r3, #24]
 802827e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028282:	431a      	orrs	r2, r3
 8028284:	687b      	ldr	r3, [r7, #4]
 8028286:	69db      	ldr	r3, [r3, #28]
 8028288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 802828c:	431a      	orrs	r2, r3
 802828e:	687b      	ldr	r3, [r7, #4]
 8028290:	6a1b      	ldr	r3, [r3, #32]
 8028292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028296:	ea42 0103 	orr.w	r1, r2, r3
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802829e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80282a2:	687b      	ldr	r3, [r7, #4]
 80282a4:	681b      	ldr	r3, [r3, #0]
 80282a6:	430a      	orrs	r2, r1
 80282a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80282aa:	687b      	ldr	r3, [r7, #4]
 80282ac:	699b      	ldr	r3, [r3, #24]
 80282ae:	0c1b      	lsrs	r3, r3, #16
 80282b0:	f003 0104 	and.w	r1, r3, #4
 80282b4:	687b      	ldr	r3, [r7, #4]
 80282b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282b8:	f003 0210 	and.w	r2, r3, #16
 80282bc:	687b      	ldr	r3, [r7, #4]
 80282be:	681b      	ldr	r3, [r3, #0]
 80282c0:	430a      	orrs	r2, r1
 80282c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80282c4:	687b      	ldr	r3, [r7, #4]
 80282c6:	681b      	ldr	r3, [r3, #0]
 80282c8:	69da      	ldr	r2, [r3, #28]
 80282ca:	687b      	ldr	r3, [r7, #4]
 80282cc:	681b      	ldr	r3, [r3, #0]
 80282ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80282d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80282d4:	687b      	ldr	r3, [r7, #4]
 80282d6:	2200      	movs	r2, #0
 80282d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80282da:	687b      	ldr	r3, [r7, #4]
 80282dc:	2201      	movs	r2, #1
 80282de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80282e2:	2300      	movs	r3, #0
}
 80282e4:	4618      	mov	r0, r3
 80282e6:	3708      	adds	r7, #8
 80282e8:	46bd      	mov	sp, r7
 80282ea:	bd80      	pop	{r7, pc}

080282ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80282ec:	b580      	push	{r7, lr}
 80282ee:	b082      	sub	sp, #8
 80282f0:	af00      	add	r7, sp, #0
 80282f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80282f4:	687b      	ldr	r3, [r7, #4]
 80282f6:	2b00      	cmp	r3, #0
 80282f8:	d101      	bne.n	80282fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80282fa:	2301      	movs	r3, #1
 80282fc:	e01a      	b.n	8028334 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80282fe:	687b      	ldr	r3, [r7, #4]
 8028300:	2202      	movs	r2, #2
 8028302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8028306:	687b      	ldr	r3, [r7, #4]
 8028308:	681b      	ldr	r3, [r3, #0]
 802830a:	681a      	ldr	r2, [r3, #0]
 802830c:	687b      	ldr	r3, [r7, #4]
 802830e:	681b      	ldr	r3, [r3, #0]
 8028310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028314:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8028316:	6878      	ldr	r0, [r7, #4]
 8028318:	f7f9 fbdc 	bl	8021ad4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802831c:	687b      	ldr	r3, [r7, #4]
 802831e:	2200      	movs	r2, #0
 8028320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8028322:	687b      	ldr	r3, [r7, #4]
 8028324:	2200      	movs	r2, #0
 8028326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 802832a:	687b      	ldr	r3, [r7, #4]
 802832c:	2200      	movs	r2, #0
 802832e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8028332:	2300      	movs	r3, #0
}
 8028334:	4618      	mov	r0, r3
 8028336:	3708      	adds	r7, #8
 8028338:	46bd      	mov	sp, r7
 802833a:	bd80      	pop	{r7, pc}

0802833c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802833c:	b580      	push	{r7, lr}
 802833e:	b088      	sub	sp, #32
 8028340:	af00      	add	r7, sp, #0
 8028342:	60f8      	str	r0, [r7, #12]
 8028344:	60b9      	str	r1, [r7, #8]
 8028346:	603b      	str	r3, [r7, #0]
 8028348:	4613      	mov	r3, r2
 802834a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802834c:	2300      	movs	r3, #0
 802834e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028350:	68fb      	ldr	r3, [r7, #12]
 8028352:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028356:	2b01      	cmp	r3, #1
 8028358:	d101      	bne.n	802835e <HAL_SPI_Transmit+0x22>
 802835a:	2302      	movs	r3, #2
 802835c:	e126      	b.n	80285ac <HAL_SPI_Transmit+0x270>
 802835e:	68fb      	ldr	r3, [r7, #12]
 8028360:	2201      	movs	r2, #1
 8028362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028366:	f7fb f91d 	bl	80235a4 <HAL_GetTick>
 802836a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 802836c:	88fb      	ldrh	r3, [r7, #6]
 802836e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028370:	68fb      	ldr	r3, [r7, #12]
 8028372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028376:	b2db      	uxtb	r3, r3
 8028378:	2b01      	cmp	r3, #1
 802837a:	d002      	beq.n	8028382 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 802837c:	2302      	movs	r3, #2
 802837e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028380:	e10b      	b.n	802859a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028382:	68bb      	ldr	r3, [r7, #8]
 8028384:	2b00      	cmp	r3, #0
 8028386:	d002      	beq.n	802838e <HAL_SPI_Transmit+0x52>
 8028388:	88fb      	ldrh	r3, [r7, #6]
 802838a:	2b00      	cmp	r3, #0
 802838c:	d102      	bne.n	8028394 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 802838e:	2301      	movs	r3, #1
 8028390:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028392:	e102      	b.n	802859a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028394:	68fb      	ldr	r3, [r7, #12]
 8028396:	2203      	movs	r2, #3
 8028398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 802839c:	68fb      	ldr	r3, [r7, #12]
 802839e:	2200      	movs	r2, #0
 80283a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80283a2:	68fb      	ldr	r3, [r7, #12]
 80283a4:	68ba      	ldr	r2, [r7, #8]
 80283a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80283a8:	68fb      	ldr	r3, [r7, #12]
 80283aa:	88fa      	ldrh	r2, [r7, #6]
 80283ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80283ae:	68fb      	ldr	r3, [r7, #12]
 80283b0:	88fa      	ldrh	r2, [r7, #6]
 80283b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80283b4:	68fb      	ldr	r3, [r7, #12]
 80283b6:	2200      	movs	r2, #0
 80283b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80283ba:	68fb      	ldr	r3, [r7, #12]
 80283bc:	2200      	movs	r2, #0
 80283be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80283c0:	68fb      	ldr	r3, [r7, #12]
 80283c2:	2200      	movs	r2, #0
 80283c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80283c6:	68fb      	ldr	r3, [r7, #12]
 80283c8:	2200      	movs	r2, #0
 80283ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80283cc:	68fb      	ldr	r3, [r7, #12]
 80283ce:	2200      	movs	r2, #0
 80283d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80283d2:	68fb      	ldr	r3, [r7, #12]
 80283d4:	689b      	ldr	r3, [r3, #8]
 80283d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80283da:	d10f      	bne.n	80283fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80283dc:	68fb      	ldr	r3, [r7, #12]
 80283de:	681b      	ldr	r3, [r3, #0]
 80283e0:	681a      	ldr	r2, [r3, #0]
 80283e2:	68fb      	ldr	r3, [r7, #12]
 80283e4:	681b      	ldr	r3, [r3, #0]
 80283e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80283ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80283ec:	68fb      	ldr	r3, [r7, #12]
 80283ee:	681b      	ldr	r3, [r3, #0]
 80283f0:	681a      	ldr	r2, [r3, #0]
 80283f2:	68fb      	ldr	r3, [r7, #12]
 80283f4:	681b      	ldr	r3, [r3, #0]
 80283f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80283fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80283fc:	68fb      	ldr	r3, [r7, #12]
 80283fe:	681b      	ldr	r3, [r3, #0]
 8028400:	681b      	ldr	r3, [r3, #0]
 8028402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028406:	2b40      	cmp	r3, #64	; 0x40
 8028408:	d007      	beq.n	802841a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 802840a:	68fb      	ldr	r3, [r7, #12]
 802840c:	681b      	ldr	r3, [r3, #0]
 802840e:	681a      	ldr	r2, [r3, #0]
 8028410:	68fb      	ldr	r3, [r7, #12]
 8028412:	681b      	ldr	r3, [r3, #0]
 8028414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028418:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 802841a:	68fb      	ldr	r3, [r7, #12]
 802841c:	68db      	ldr	r3, [r3, #12]
 802841e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028422:	d14b      	bne.n	80284bc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028424:	68fb      	ldr	r3, [r7, #12]
 8028426:	685b      	ldr	r3, [r3, #4]
 8028428:	2b00      	cmp	r3, #0
 802842a:	d002      	beq.n	8028432 <HAL_SPI_Transmit+0xf6>
 802842c:	8afb      	ldrh	r3, [r7, #22]
 802842e:	2b01      	cmp	r3, #1
 8028430:	d13e      	bne.n	80284b0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028432:	68fb      	ldr	r3, [r7, #12]
 8028434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028436:	881a      	ldrh	r2, [r3, #0]
 8028438:	68fb      	ldr	r3, [r7, #12]
 802843a:	681b      	ldr	r3, [r3, #0]
 802843c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 802843e:	68fb      	ldr	r3, [r7, #12]
 8028440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028442:	1c9a      	adds	r2, r3, #2
 8028444:	68fb      	ldr	r3, [r7, #12]
 8028446:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028448:	68fb      	ldr	r3, [r7, #12]
 802844a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802844c:	b29b      	uxth	r3, r3
 802844e:	3b01      	subs	r3, #1
 8028450:	b29a      	uxth	r2, r3
 8028452:	68fb      	ldr	r3, [r7, #12]
 8028454:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028456:	e02b      	b.n	80284b0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028458:	68fb      	ldr	r3, [r7, #12]
 802845a:	681b      	ldr	r3, [r3, #0]
 802845c:	689b      	ldr	r3, [r3, #8]
 802845e:	f003 0302 	and.w	r3, r3, #2
 8028462:	2b02      	cmp	r3, #2
 8028464:	d112      	bne.n	802848c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028466:	68fb      	ldr	r3, [r7, #12]
 8028468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802846a:	881a      	ldrh	r2, [r3, #0]
 802846c:	68fb      	ldr	r3, [r7, #12]
 802846e:	681b      	ldr	r3, [r3, #0]
 8028470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028472:	68fb      	ldr	r3, [r7, #12]
 8028474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028476:	1c9a      	adds	r2, r3, #2
 8028478:	68fb      	ldr	r3, [r7, #12]
 802847a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802847c:	68fb      	ldr	r3, [r7, #12]
 802847e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028480:	b29b      	uxth	r3, r3
 8028482:	3b01      	subs	r3, #1
 8028484:	b29a      	uxth	r2, r3
 8028486:	68fb      	ldr	r3, [r7, #12]
 8028488:	86da      	strh	r2, [r3, #54]	; 0x36
 802848a:	e011      	b.n	80284b0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802848c:	f7fb f88a 	bl	80235a4 <HAL_GetTick>
 8028490:	4602      	mov	r2, r0
 8028492:	69bb      	ldr	r3, [r7, #24]
 8028494:	1ad3      	subs	r3, r2, r3
 8028496:	683a      	ldr	r2, [r7, #0]
 8028498:	429a      	cmp	r2, r3
 802849a:	d803      	bhi.n	80284a4 <HAL_SPI_Transmit+0x168>
 802849c:	683b      	ldr	r3, [r7, #0]
 802849e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80284a2:	d102      	bne.n	80284aa <HAL_SPI_Transmit+0x16e>
 80284a4:	683b      	ldr	r3, [r7, #0]
 80284a6:	2b00      	cmp	r3, #0
 80284a8:	d102      	bne.n	80284b0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80284aa:	2303      	movs	r3, #3
 80284ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80284ae:	e074      	b.n	802859a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80284b0:	68fb      	ldr	r3, [r7, #12]
 80284b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80284b4:	b29b      	uxth	r3, r3
 80284b6:	2b00      	cmp	r3, #0
 80284b8:	d1ce      	bne.n	8028458 <HAL_SPI_Transmit+0x11c>
 80284ba:	e04c      	b.n	8028556 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80284bc:	68fb      	ldr	r3, [r7, #12]
 80284be:	685b      	ldr	r3, [r3, #4]
 80284c0:	2b00      	cmp	r3, #0
 80284c2:	d002      	beq.n	80284ca <HAL_SPI_Transmit+0x18e>
 80284c4:	8afb      	ldrh	r3, [r7, #22]
 80284c6:	2b01      	cmp	r3, #1
 80284c8:	d140      	bne.n	802854c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80284ca:	68fb      	ldr	r3, [r7, #12]
 80284cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80284ce:	68fb      	ldr	r3, [r7, #12]
 80284d0:	681b      	ldr	r3, [r3, #0]
 80284d2:	330c      	adds	r3, #12
 80284d4:	7812      	ldrb	r2, [r2, #0]
 80284d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80284d8:	68fb      	ldr	r3, [r7, #12]
 80284da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284dc:	1c5a      	adds	r2, r3, #1
 80284de:	68fb      	ldr	r3, [r7, #12]
 80284e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80284e2:	68fb      	ldr	r3, [r7, #12]
 80284e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80284e6:	b29b      	uxth	r3, r3
 80284e8:	3b01      	subs	r3, #1
 80284ea:	b29a      	uxth	r2, r3
 80284ec:	68fb      	ldr	r3, [r7, #12]
 80284ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80284f0:	e02c      	b.n	802854c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80284f2:	68fb      	ldr	r3, [r7, #12]
 80284f4:	681b      	ldr	r3, [r3, #0]
 80284f6:	689b      	ldr	r3, [r3, #8]
 80284f8:	f003 0302 	and.w	r3, r3, #2
 80284fc:	2b02      	cmp	r3, #2
 80284fe:	d113      	bne.n	8028528 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028500:	68fb      	ldr	r3, [r7, #12]
 8028502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028504:	68fb      	ldr	r3, [r7, #12]
 8028506:	681b      	ldr	r3, [r3, #0]
 8028508:	330c      	adds	r3, #12
 802850a:	7812      	ldrb	r2, [r2, #0]
 802850c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 802850e:	68fb      	ldr	r3, [r7, #12]
 8028510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028512:	1c5a      	adds	r2, r3, #1
 8028514:	68fb      	ldr	r3, [r7, #12]
 8028516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028518:	68fb      	ldr	r3, [r7, #12]
 802851a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802851c:	b29b      	uxth	r3, r3
 802851e:	3b01      	subs	r3, #1
 8028520:	b29a      	uxth	r2, r3
 8028522:	68fb      	ldr	r3, [r7, #12]
 8028524:	86da      	strh	r2, [r3, #54]	; 0x36
 8028526:	e011      	b.n	802854c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028528:	f7fb f83c 	bl	80235a4 <HAL_GetTick>
 802852c:	4602      	mov	r2, r0
 802852e:	69bb      	ldr	r3, [r7, #24]
 8028530:	1ad3      	subs	r3, r2, r3
 8028532:	683a      	ldr	r2, [r7, #0]
 8028534:	429a      	cmp	r2, r3
 8028536:	d803      	bhi.n	8028540 <HAL_SPI_Transmit+0x204>
 8028538:	683b      	ldr	r3, [r7, #0]
 802853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802853e:	d102      	bne.n	8028546 <HAL_SPI_Transmit+0x20a>
 8028540:	683b      	ldr	r3, [r7, #0]
 8028542:	2b00      	cmp	r3, #0
 8028544:	d102      	bne.n	802854c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8028546:	2303      	movs	r3, #3
 8028548:	77fb      	strb	r3, [r7, #31]
          goto error;
 802854a:	e026      	b.n	802859a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 802854c:	68fb      	ldr	r3, [r7, #12]
 802854e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028550:	b29b      	uxth	r3, r3
 8028552:	2b00      	cmp	r3, #0
 8028554:	d1cd      	bne.n	80284f2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028556:	69ba      	ldr	r2, [r7, #24]
 8028558:	6839      	ldr	r1, [r7, #0]
 802855a:	68f8      	ldr	r0, [r7, #12]
 802855c:	f000 fbda 	bl	8028d14 <SPI_EndRxTxTransaction>
 8028560:	4603      	mov	r3, r0
 8028562:	2b00      	cmp	r3, #0
 8028564:	d002      	beq.n	802856c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028566:	68fb      	ldr	r3, [r7, #12]
 8028568:	2220      	movs	r2, #32
 802856a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 802856c:	68fb      	ldr	r3, [r7, #12]
 802856e:	689b      	ldr	r3, [r3, #8]
 8028570:	2b00      	cmp	r3, #0
 8028572:	d10a      	bne.n	802858a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028574:	2300      	movs	r3, #0
 8028576:	613b      	str	r3, [r7, #16]
 8028578:	68fb      	ldr	r3, [r7, #12]
 802857a:	681b      	ldr	r3, [r3, #0]
 802857c:	68db      	ldr	r3, [r3, #12]
 802857e:	613b      	str	r3, [r7, #16]
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	681b      	ldr	r3, [r3, #0]
 8028584:	689b      	ldr	r3, [r3, #8]
 8028586:	613b      	str	r3, [r7, #16]
 8028588:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802858a:	68fb      	ldr	r3, [r7, #12]
 802858c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802858e:	2b00      	cmp	r3, #0
 8028590:	d002      	beq.n	8028598 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8028592:	2301      	movs	r3, #1
 8028594:	77fb      	strb	r3, [r7, #31]
 8028596:	e000      	b.n	802859a <HAL_SPI_Transmit+0x25e>
  }

error:
 8028598:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802859a:	68fb      	ldr	r3, [r7, #12]
 802859c:	2201      	movs	r2, #1
 802859e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80285a2:	68fb      	ldr	r3, [r7, #12]
 80285a4:	2200      	movs	r2, #0
 80285a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80285aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80285ac:	4618      	mov	r0, r3
 80285ae:	3720      	adds	r7, #32
 80285b0:	46bd      	mov	sp, r7
 80285b2:	bd80      	pop	{r7, pc}

080285b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80285b4:	b580      	push	{r7, lr}
 80285b6:	b088      	sub	sp, #32
 80285b8:	af02      	add	r7, sp, #8
 80285ba:	60f8      	str	r0, [r7, #12]
 80285bc:	60b9      	str	r1, [r7, #8]
 80285be:	603b      	str	r3, [r7, #0]
 80285c0:	4613      	mov	r3, r2
 80285c2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80285c4:	2300      	movs	r3, #0
 80285c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80285c8:	68fb      	ldr	r3, [r7, #12]
 80285ca:	685b      	ldr	r3, [r3, #4]
 80285cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80285d0:	d112      	bne.n	80285f8 <HAL_SPI_Receive+0x44>
 80285d2:	68fb      	ldr	r3, [r7, #12]
 80285d4:	689b      	ldr	r3, [r3, #8]
 80285d6:	2b00      	cmp	r3, #0
 80285d8:	d10e      	bne.n	80285f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80285da:	68fb      	ldr	r3, [r7, #12]
 80285dc:	2204      	movs	r2, #4
 80285de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80285e2:	88fa      	ldrh	r2, [r7, #6]
 80285e4:	683b      	ldr	r3, [r7, #0]
 80285e6:	9300      	str	r3, [sp, #0]
 80285e8:	4613      	mov	r3, r2
 80285ea:	68ba      	ldr	r2, [r7, #8]
 80285ec:	68b9      	ldr	r1, [r7, #8]
 80285ee:	68f8      	ldr	r0, [r7, #12]
 80285f0:	f000 f8f1 	bl	80287d6 <HAL_SPI_TransmitReceive>
 80285f4:	4603      	mov	r3, r0
 80285f6:	e0ea      	b.n	80287ce <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80285f8:	68fb      	ldr	r3, [r7, #12]
 80285fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80285fe:	2b01      	cmp	r3, #1
 8028600:	d101      	bne.n	8028606 <HAL_SPI_Receive+0x52>
 8028602:	2302      	movs	r3, #2
 8028604:	e0e3      	b.n	80287ce <HAL_SPI_Receive+0x21a>
 8028606:	68fb      	ldr	r3, [r7, #12]
 8028608:	2201      	movs	r2, #1
 802860a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802860e:	f7fa ffc9 	bl	80235a4 <HAL_GetTick>
 8028612:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028614:	68fb      	ldr	r3, [r7, #12]
 8028616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802861a:	b2db      	uxtb	r3, r3
 802861c:	2b01      	cmp	r3, #1
 802861e:	d002      	beq.n	8028626 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028620:	2302      	movs	r3, #2
 8028622:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028624:	e0ca      	b.n	80287bc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8028626:	68bb      	ldr	r3, [r7, #8]
 8028628:	2b00      	cmp	r3, #0
 802862a:	d002      	beq.n	8028632 <HAL_SPI_Receive+0x7e>
 802862c:	88fb      	ldrh	r3, [r7, #6]
 802862e:	2b00      	cmp	r3, #0
 8028630:	d102      	bne.n	8028638 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028632:	2301      	movs	r3, #1
 8028634:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028636:	e0c1      	b.n	80287bc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028638:	68fb      	ldr	r3, [r7, #12]
 802863a:	2204      	movs	r2, #4
 802863c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028640:	68fb      	ldr	r3, [r7, #12]
 8028642:	2200      	movs	r2, #0
 8028644:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028646:	68fb      	ldr	r3, [r7, #12]
 8028648:	68ba      	ldr	r2, [r7, #8]
 802864a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 802864c:	68fb      	ldr	r3, [r7, #12]
 802864e:	88fa      	ldrh	r2, [r7, #6]
 8028650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028652:	68fb      	ldr	r3, [r7, #12]
 8028654:	88fa      	ldrh	r2, [r7, #6]
 8028656:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028658:	68fb      	ldr	r3, [r7, #12]
 802865a:	2200      	movs	r2, #0
 802865c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 802865e:	68fb      	ldr	r3, [r7, #12]
 8028660:	2200      	movs	r2, #0
 8028662:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028664:	68fb      	ldr	r3, [r7, #12]
 8028666:	2200      	movs	r2, #0
 8028668:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 802866a:	68fb      	ldr	r3, [r7, #12]
 802866c:	2200      	movs	r2, #0
 802866e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028670:	68fb      	ldr	r3, [r7, #12]
 8028672:	2200      	movs	r2, #0
 8028674:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028676:	68fb      	ldr	r3, [r7, #12]
 8028678:	689b      	ldr	r3, [r3, #8]
 802867a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802867e:	d10f      	bne.n	80286a0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8028680:	68fb      	ldr	r3, [r7, #12]
 8028682:	681b      	ldr	r3, [r3, #0]
 8028684:	681a      	ldr	r2, [r3, #0]
 8028686:	68fb      	ldr	r3, [r7, #12]
 8028688:	681b      	ldr	r3, [r3, #0]
 802868a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802868e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8028690:	68fb      	ldr	r3, [r7, #12]
 8028692:	681b      	ldr	r3, [r3, #0]
 8028694:	681a      	ldr	r2, [r3, #0]
 8028696:	68fb      	ldr	r3, [r7, #12]
 8028698:	681b      	ldr	r3, [r3, #0]
 802869a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 802869e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80286a0:	68fb      	ldr	r3, [r7, #12]
 80286a2:	681b      	ldr	r3, [r3, #0]
 80286a4:	681b      	ldr	r3, [r3, #0]
 80286a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80286aa:	2b40      	cmp	r3, #64	; 0x40
 80286ac:	d007      	beq.n	80286be <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80286ae:	68fb      	ldr	r3, [r7, #12]
 80286b0:	681b      	ldr	r3, [r3, #0]
 80286b2:	681a      	ldr	r2, [r3, #0]
 80286b4:	68fb      	ldr	r3, [r7, #12]
 80286b6:	681b      	ldr	r3, [r3, #0]
 80286b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80286bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80286be:	68fb      	ldr	r3, [r7, #12]
 80286c0:	68db      	ldr	r3, [r3, #12]
 80286c2:	2b00      	cmp	r3, #0
 80286c4:	d162      	bne.n	802878c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80286c6:	e02e      	b.n	8028726 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80286c8:	68fb      	ldr	r3, [r7, #12]
 80286ca:	681b      	ldr	r3, [r3, #0]
 80286cc:	689b      	ldr	r3, [r3, #8]
 80286ce:	f003 0301 	and.w	r3, r3, #1
 80286d2:	2b01      	cmp	r3, #1
 80286d4:	d115      	bne.n	8028702 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80286d6:	68fb      	ldr	r3, [r7, #12]
 80286d8:	681b      	ldr	r3, [r3, #0]
 80286da:	f103 020c 	add.w	r2, r3, #12
 80286de:	68fb      	ldr	r3, [r7, #12]
 80286e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286e2:	7812      	ldrb	r2, [r2, #0]
 80286e4:	b2d2      	uxtb	r2, r2
 80286e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80286e8:	68fb      	ldr	r3, [r7, #12]
 80286ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80286ec:	1c5a      	adds	r2, r3, #1
 80286ee:	68fb      	ldr	r3, [r7, #12]
 80286f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80286f2:	68fb      	ldr	r3, [r7, #12]
 80286f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80286f6:	b29b      	uxth	r3, r3
 80286f8:	3b01      	subs	r3, #1
 80286fa:	b29a      	uxth	r2, r3
 80286fc:	68fb      	ldr	r3, [r7, #12]
 80286fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028700:	e011      	b.n	8028726 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028702:	f7fa ff4f 	bl	80235a4 <HAL_GetTick>
 8028706:	4602      	mov	r2, r0
 8028708:	693b      	ldr	r3, [r7, #16]
 802870a:	1ad3      	subs	r3, r2, r3
 802870c:	683a      	ldr	r2, [r7, #0]
 802870e:	429a      	cmp	r2, r3
 8028710:	d803      	bhi.n	802871a <HAL_SPI_Receive+0x166>
 8028712:	683b      	ldr	r3, [r7, #0]
 8028714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028718:	d102      	bne.n	8028720 <HAL_SPI_Receive+0x16c>
 802871a:	683b      	ldr	r3, [r7, #0]
 802871c:	2b00      	cmp	r3, #0
 802871e:	d102      	bne.n	8028726 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8028720:	2303      	movs	r3, #3
 8028722:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028724:	e04a      	b.n	80287bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8028726:	68fb      	ldr	r3, [r7, #12]
 8028728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802872a:	b29b      	uxth	r3, r3
 802872c:	2b00      	cmp	r3, #0
 802872e:	d1cb      	bne.n	80286c8 <HAL_SPI_Receive+0x114>
 8028730:	e031      	b.n	8028796 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028732:	68fb      	ldr	r3, [r7, #12]
 8028734:	681b      	ldr	r3, [r3, #0]
 8028736:	689b      	ldr	r3, [r3, #8]
 8028738:	f003 0301 	and.w	r3, r3, #1
 802873c:	2b01      	cmp	r3, #1
 802873e:	d113      	bne.n	8028768 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028740:	68fb      	ldr	r3, [r7, #12]
 8028742:	681b      	ldr	r3, [r3, #0]
 8028744:	68da      	ldr	r2, [r3, #12]
 8028746:	68fb      	ldr	r3, [r7, #12]
 8028748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802874a:	b292      	uxth	r2, r2
 802874c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 802874e:	68fb      	ldr	r3, [r7, #12]
 8028750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028752:	1c9a      	adds	r2, r3, #2
 8028754:	68fb      	ldr	r3, [r7, #12]
 8028756:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028758:	68fb      	ldr	r3, [r7, #12]
 802875a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802875c:	b29b      	uxth	r3, r3
 802875e:	3b01      	subs	r3, #1
 8028760:	b29a      	uxth	r2, r3
 8028762:	68fb      	ldr	r3, [r7, #12]
 8028764:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028766:	e011      	b.n	802878c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028768:	f7fa ff1c 	bl	80235a4 <HAL_GetTick>
 802876c:	4602      	mov	r2, r0
 802876e:	693b      	ldr	r3, [r7, #16]
 8028770:	1ad3      	subs	r3, r2, r3
 8028772:	683a      	ldr	r2, [r7, #0]
 8028774:	429a      	cmp	r2, r3
 8028776:	d803      	bhi.n	8028780 <HAL_SPI_Receive+0x1cc>
 8028778:	683b      	ldr	r3, [r7, #0]
 802877a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802877e:	d102      	bne.n	8028786 <HAL_SPI_Receive+0x1d2>
 8028780:	683b      	ldr	r3, [r7, #0]
 8028782:	2b00      	cmp	r3, #0
 8028784:	d102      	bne.n	802878c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8028786:	2303      	movs	r3, #3
 8028788:	75fb      	strb	r3, [r7, #23]
          goto error;
 802878a:	e017      	b.n	80287bc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 802878c:	68fb      	ldr	r3, [r7, #12]
 802878e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028790:	b29b      	uxth	r3, r3
 8028792:	2b00      	cmp	r3, #0
 8028794:	d1cd      	bne.n	8028732 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028796:	693a      	ldr	r2, [r7, #16]
 8028798:	6839      	ldr	r1, [r7, #0]
 802879a:	68f8      	ldr	r0, [r7, #12]
 802879c:	f000 fa54 	bl	8028c48 <SPI_EndRxTransaction>
 80287a0:	4603      	mov	r3, r0
 80287a2:	2b00      	cmp	r3, #0
 80287a4:	d002      	beq.n	80287ac <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80287a6:	68fb      	ldr	r3, [r7, #12]
 80287a8:	2220      	movs	r2, #32
 80287aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80287ac:	68fb      	ldr	r3, [r7, #12]
 80287ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80287b0:	2b00      	cmp	r3, #0
 80287b2:	d002      	beq.n	80287ba <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80287b4:	2301      	movs	r3, #1
 80287b6:	75fb      	strb	r3, [r7, #23]
 80287b8:	e000      	b.n	80287bc <HAL_SPI_Receive+0x208>
  }

error :
 80287ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80287bc:	68fb      	ldr	r3, [r7, #12]
 80287be:	2201      	movs	r2, #1
 80287c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80287c4:	68fb      	ldr	r3, [r7, #12]
 80287c6:	2200      	movs	r2, #0
 80287c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80287cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80287ce:	4618      	mov	r0, r3
 80287d0:	3718      	adds	r7, #24
 80287d2:	46bd      	mov	sp, r7
 80287d4:	bd80      	pop	{r7, pc}

080287d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80287d6:	b580      	push	{r7, lr}
 80287d8:	b08c      	sub	sp, #48	; 0x30
 80287da:	af00      	add	r7, sp, #0
 80287dc:	60f8      	str	r0, [r7, #12]
 80287de:	60b9      	str	r1, [r7, #8]
 80287e0:	607a      	str	r2, [r7, #4]
 80287e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80287e4:	2301      	movs	r3, #1
 80287e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80287e8:	2300      	movs	r3, #0
 80287ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80287ee:	68fb      	ldr	r3, [r7, #12]
 80287f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80287f4:	2b01      	cmp	r3, #1
 80287f6:	d101      	bne.n	80287fc <HAL_SPI_TransmitReceive+0x26>
 80287f8:	2302      	movs	r3, #2
 80287fa:	e18a      	b.n	8028b12 <HAL_SPI_TransmitReceive+0x33c>
 80287fc:	68fb      	ldr	r3, [r7, #12]
 80287fe:	2201      	movs	r2, #1
 8028800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028804:	f7fa fece 	bl	80235a4 <HAL_GetTick>
 8028808:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 802880a:	68fb      	ldr	r3, [r7, #12]
 802880c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028814:	68fb      	ldr	r3, [r7, #12]
 8028816:	685b      	ldr	r3, [r3, #4]
 8028818:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 802881a:	887b      	ldrh	r3, [r7, #2]
 802881c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 802881e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028822:	2b01      	cmp	r3, #1
 8028824:	d00f      	beq.n	8028846 <HAL_SPI_TransmitReceive+0x70>
 8028826:	69fb      	ldr	r3, [r7, #28]
 8028828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802882c:	d107      	bne.n	802883e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 802882e:	68fb      	ldr	r3, [r7, #12]
 8028830:	689b      	ldr	r3, [r3, #8]
 8028832:	2b00      	cmp	r3, #0
 8028834:	d103      	bne.n	802883e <HAL_SPI_TransmitReceive+0x68>
 8028836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802883a:	2b04      	cmp	r3, #4
 802883c:	d003      	beq.n	8028846 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 802883e:	2302      	movs	r3, #2
 8028840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028844:	e15b      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028846:	68bb      	ldr	r3, [r7, #8]
 8028848:	2b00      	cmp	r3, #0
 802884a:	d005      	beq.n	8028858 <HAL_SPI_TransmitReceive+0x82>
 802884c:	687b      	ldr	r3, [r7, #4]
 802884e:	2b00      	cmp	r3, #0
 8028850:	d002      	beq.n	8028858 <HAL_SPI_TransmitReceive+0x82>
 8028852:	887b      	ldrh	r3, [r7, #2]
 8028854:	2b00      	cmp	r3, #0
 8028856:	d103      	bne.n	8028860 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028858:	2301      	movs	r3, #1
 802885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802885e:	e14e      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028866:	b2db      	uxtb	r3, r3
 8028868:	2b04      	cmp	r3, #4
 802886a:	d003      	beq.n	8028874 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 802886c:	68fb      	ldr	r3, [r7, #12]
 802886e:	2205      	movs	r2, #5
 8028870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	2200      	movs	r2, #0
 8028878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 802887a:	68fb      	ldr	r3, [r7, #12]
 802887c:	687a      	ldr	r2, [r7, #4]
 802887e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028880:	68fb      	ldr	r3, [r7, #12]
 8028882:	887a      	ldrh	r2, [r7, #2]
 8028884:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028886:	68fb      	ldr	r3, [r7, #12]
 8028888:	887a      	ldrh	r2, [r7, #2]
 802888a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 802888c:	68fb      	ldr	r3, [r7, #12]
 802888e:	68ba      	ldr	r2, [r7, #8]
 8028890:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028892:	68fb      	ldr	r3, [r7, #12]
 8028894:	887a      	ldrh	r2, [r7, #2]
 8028896:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028898:	68fb      	ldr	r3, [r7, #12]
 802889a:	887a      	ldrh	r2, [r7, #2]
 802889c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 802889e:	68fb      	ldr	r3, [r7, #12]
 80288a0:	2200      	movs	r2, #0
 80288a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80288a4:	68fb      	ldr	r3, [r7, #12]
 80288a6:	2200      	movs	r2, #0
 80288a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80288aa:	68fb      	ldr	r3, [r7, #12]
 80288ac:	681b      	ldr	r3, [r3, #0]
 80288ae:	681b      	ldr	r3, [r3, #0]
 80288b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80288b4:	2b40      	cmp	r3, #64	; 0x40
 80288b6:	d007      	beq.n	80288c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80288b8:	68fb      	ldr	r3, [r7, #12]
 80288ba:	681b      	ldr	r3, [r3, #0]
 80288bc:	681a      	ldr	r2, [r3, #0]
 80288be:	68fb      	ldr	r3, [r7, #12]
 80288c0:	681b      	ldr	r3, [r3, #0]
 80288c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80288c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80288c8:	68fb      	ldr	r3, [r7, #12]
 80288ca:	68db      	ldr	r3, [r3, #12]
 80288cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80288d0:	d178      	bne.n	80289c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80288d2:	68fb      	ldr	r3, [r7, #12]
 80288d4:	685b      	ldr	r3, [r3, #4]
 80288d6:	2b00      	cmp	r3, #0
 80288d8:	d002      	beq.n	80288e0 <HAL_SPI_TransmitReceive+0x10a>
 80288da:	8b7b      	ldrh	r3, [r7, #26]
 80288dc:	2b01      	cmp	r3, #1
 80288de:	d166      	bne.n	80289ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80288e0:	68fb      	ldr	r3, [r7, #12]
 80288e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288e4:	881a      	ldrh	r2, [r3, #0]
 80288e6:	68fb      	ldr	r3, [r7, #12]
 80288e8:	681b      	ldr	r3, [r3, #0]
 80288ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80288ec:	68fb      	ldr	r3, [r7, #12]
 80288ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288f0:	1c9a      	adds	r2, r3, #2
 80288f2:	68fb      	ldr	r3, [r7, #12]
 80288f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80288f6:	68fb      	ldr	r3, [r7, #12]
 80288f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80288fa:	b29b      	uxth	r3, r3
 80288fc:	3b01      	subs	r3, #1
 80288fe:	b29a      	uxth	r2, r3
 8028900:	68fb      	ldr	r3, [r7, #12]
 8028902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028904:	e053      	b.n	80289ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028906:	68fb      	ldr	r3, [r7, #12]
 8028908:	681b      	ldr	r3, [r3, #0]
 802890a:	689b      	ldr	r3, [r3, #8]
 802890c:	f003 0302 	and.w	r3, r3, #2
 8028910:	2b02      	cmp	r3, #2
 8028912:	d11b      	bne.n	802894c <HAL_SPI_TransmitReceive+0x176>
 8028914:	68fb      	ldr	r3, [r7, #12]
 8028916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028918:	b29b      	uxth	r3, r3
 802891a:	2b00      	cmp	r3, #0
 802891c:	d016      	beq.n	802894c <HAL_SPI_TransmitReceive+0x176>
 802891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028920:	2b01      	cmp	r3, #1
 8028922:	d113      	bne.n	802894c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028924:	68fb      	ldr	r3, [r7, #12]
 8028926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028928:	881a      	ldrh	r2, [r3, #0]
 802892a:	68fb      	ldr	r3, [r7, #12]
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028930:	68fb      	ldr	r3, [r7, #12]
 8028932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028934:	1c9a      	adds	r2, r3, #2
 8028936:	68fb      	ldr	r3, [r7, #12]
 8028938:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802893a:	68fb      	ldr	r3, [r7, #12]
 802893c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802893e:	b29b      	uxth	r3, r3
 8028940:	3b01      	subs	r3, #1
 8028942:	b29a      	uxth	r2, r3
 8028944:	68fb      	ldr	r3, [r7, #12]
 8028946:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028948:	2300      	movs	r3, #0
 802894a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802894c:	68fb      	ldr	r3, [r7, #12]
 802894e:	681b      	ldr	r3, [r3, #0]
 8028950:	689b      	ldr	r3, [r3, #8]
 8028952:	f003 0301 	and.w	r3, r3, #1
 8028956:	2b01      	cmp	r3, #1
 8028958:	d119      	bne.n	802898e <HAL_SPI_TransmitReceive+0x1b8>
 802895a:	68fb      	ldr	r3, [r7, #12]
 802895c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802895e:	b29b      	uxth	r3, r3
 8028960:	2b00      	cmp	r3, #0
 8028962:	d014      	beq.n	802898e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028964:	68fb      	ldr	r3, [r7, #12]
 8028966:	681b      	ldr	r3, [r3, #0]
 8028968:	68da      	ldr	r2, [r3, #12]
 802896a:	68fb      	ldr	r3, [r7, #12]
 802896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802896e:	b292      	uxth	r2, r2
 8028970:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028972:	68fb      	ldr	r3, [r7, #12]
 8028974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028976:	1c9a      	adds	r2, r3, #2
 8028978:	68fb      	ldr	r3, [r7, #12]
 802897a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802897c:	68fb      	ldr	r3, [r7, #12]
 802897e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028980:	b29b      	uxth	r3, r3
 8028982:	3b01      	subs	r3, #1
 8028984:	b29a      	uxth	r2, r3
 8028986:	68fb      	ldr	r3, [r7, #12]
 8028988:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802898a:	2301      	movs	r3, #1
 802898c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 802898e:	f7fa fe09 	bl	80235a4 <HAL_GetTick>
 8028992:	4602      	mov	r2, r0
 8028994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028996:	1ad3      	subs	r3, r2, r3
 8028998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802899a:	429a      	cmp	r2, r3
 802899c:	d807      	bhi.n	80289ae <HAL_SPI_TransmitReceive+0x1d8>
 802899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80289a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80289a4:	d003      	beq.n	80289ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80289a6:	2303      	movs	r3, #3
 80289a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80289ac:	e0a7      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80289ae:	68fb      	ldr	r3, [r7, #12]
 80289b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289b2:	b29b      	uxth	r3, r3
 80289b4:	2b00      	cmp	r3, #0
 80289b6:	d1a6      	bne.n	8028906 <HAL_SPI_TransmitReceive+0x130>
 80289b8:	68fb      	ldr	r3, [r7, #12]
 80289ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80289bc:	b29b      	uxth	r3, r3
 80289be:	2b00      	cmp	r3, #0
 80289c0:	d1a1      	bne.n	8028906 <HAL_SPI_TransmitReceive+0x130>
 80289c2:	e07c      	b.n	8028abe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80289c4:	68fb      	ldr	r3, [r7, #12]
 80289c6:	685b      	ldr	r3, [r3, #4]
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d002      	beq.n	80289d2 <HAL_SPI_TransmitReceive+0x1fc>
 80289cc:	8b7b      	ldrh	r3, [r7, #26]
 80289ce:	2b01      	cmp	r3, #1
 80289d0:	d16b      	bne.n	8028aaa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80289d2:	68fb      	ldr	r3, [r7, #12]
 80289d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80289d6:	68fb      	ldr	r3, [r7, #12]
 80289d8:	681b      	ldr	r3, [r3, #0]
 80289da:	330c      	adds	r3, #12
 80289dc:	7812      	ldrb	r2, [r2, #0]
 80289de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80289e0:	68fb      	ldr	r3, [r7, #12]
 80289e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289e4:	1c5a      	adds	r2, r3, #1
 80289e6:	68fb      	ldr	r3, [r7, #12]
 80289e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80289ea:	68fb      	ldr	r3, [r7, #12]
 80289ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80289ee:	b29b      	uxth	r3, r3
 80289f0:	3b01      	subs	r3, #1
 80289f2:	b29a      	uxth	r2, r3
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80289f8:	e057      	b.n	8028aaa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80289fa:	68fb      	ldr	r3, [r7, #12]
 80289fc:	681b      	ldr	r3, [r3, #0]
 80289fe:	689b      	ldr	r3, [r3, #8]
 8028a00:	f003 0302 	and.w	r3, r3, #2
 8028a04:	2b02      	cmp	r3, #2
 8028a06:	d11c      	bne.n	8028a42 <HAL_SPI_TransmitReceive+0x26c>
 8028a08:	68fb      	ldr	r3, [r7, #12]
 8028a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a0c:	b29b      	uxth	r3, r3
 8028a0e:	2b00      	cmp	r3, #0
 8028a10:	d017      	beq.n	8028a42 <HAL_SPI_TransmitReceive+0x26c>
 8028a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028a14:	2b01      	cmp	r3, #1
 8028a16:	d114      	bne.n	8028a42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8028a18:	68fb      	ldr	r3, [r7, #12]
 8028a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028a1c:	68fb      	ldr	r3, [r7, #12]
 8028a1e:	681b      	ldr	r3, [r3, #0]
 8028a20:	330c      	adds	r3, #12
 8028a22:	7812      	ldrb	r2, [r2, #0]
 8028a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8028a26:	68fb      	ldr	r3, [r7, #12]
 8028a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a2a:	1c5a      	adds	r2, r3, #1
 8028a2c:	68fb      	ldr	r3, [r7, #12]
 8028a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028a34:	b29b      	uxth	r3, r3
 8028a36:	3b01      	subs	r3, #1
 8028a38:	b29a      	uxth	r2, r3
 8028a3a:	68fb      	ldr	r3, [r7, #12]
 8028a3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028a3e:	2300      	movs	r3, #0
 8028a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	681b      	ldr	r3, [r3, #0]
 8028a46:	689b      	ldr	r3, [r3, #8]
 8028a48:	f003 0301 	and.w	r3, r3, #1
 8028a4c:	2b01      	cmp	r3, #1
 8028a4e:	d119      	bne.n	8028a84 <HAL_SPI_TransmitReceive+0x2ae>
 8028a50:	68fb      	ldr	r3, [r7, #12]
 8028a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a54:	b29b      	uxth	r3, r3
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	d014      	beq.n	8028a84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8028a5a:	68fb      	ldr	r3, [r7, #12]
 8028a5c:	681b      	ldr	r3, [r3, #0]
 8028a5e:	68da      	ldr	r2, [r3, #12]
 8028a60:	68fb      	ldr	r3, [r7, #12]
 8028a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a64:	b2d2      	uxtb	r2, r2
 8028a66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8028a68:	68fb      	ldr	r3, [r7, #12]
 8028a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028a6c:	1c5a      	adds	r2, r3, #1
 8028a6e:	68fb      	ldr	r3, [r7, #12]
 8028a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028a72:	68fb      	ldr	r3, [r7, #12]
 8028a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028a76:	b29b      	uxth	r3, r3
 8028a78:	3b01      	subs	r3, #1
 8028a7a:	b29a      	uxth	r2, r3
 8028a7c:	68fb      	ldr	r3, [r7, #12]
 8028a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028a80:	2301      	movs	r3, #1
 8028a82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8028a84:	f7fa fd8e 	bl	80235a4 <HAL_GetTick>
 8028a88:	4602      	mov	r2, r0
 8028a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028a8c:	1ad3      	subs	r3, r2, r3
 8028a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028a90:	429a      	cmp	r2, r3
 8028a92:	d803      	bhi.n	8028a9c <HAL_SPI_TransmitReceive+0x2c6>
 8028a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028a9a:	d102      	bne.n	8028aa2 <HAL_SPI_TransmitReceive+0x2cc>
 8028a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028a9e:	2b00      	cmp	r3, #0
 8028aa0:	d103      	bne.n	8028aaa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8028aa2:	2303      	movs	r3, #3
 8028aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8028aa8:	e029      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028aaa:	68fb      	ldr	r3, [r7, #12]
 8028aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028aae:	b29b      	uxth	r3, r3
 8028ab0:	2b00      	cmp	r3, #0
 8028ab2:	d1a2      	bne.n	80289fa <HAL_SPI_TransmitReceive+0x224>
 8028ab4:	68fb      	ldr	r3, [r7, #12]
 8028ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ab8:	b29b      	uxth	r3, r3
 8028aba:	2b00      	cmp	r3, #0
 8028abc:	d19d      	bne.n	80289fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028ac0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8028ac2:	68f8      	ldr	r0, [r7, #12]
 8028ac4:	f000 f926 	bl	8028d14 <SPI_EndRxTxTransaction>
 8028ac8:	4603      	mov	r3, r0
 8028aca:	2b00      	cmp	r3, #0
 8028acc:	d006      	beq.n	8028adc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8028ace:	2301      	movs	r3, #1
 8028ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028ad4:	68fb      	ldr	r3, [r7, #12]
 8028ad6:	2220      	movs	r2, #32
 8028ad8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8028ada:	e010      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028adc:	68fb      	ldr	r3, [r7, #12]
 8028ade:	689b      	ldr	r3, [r3, #8]
 8028ae0:	2b00      	cmp	r3, #0
 8028ae2:	d10b      	bne.n	8028afc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028ae4:	2300      	movs	r3, #0
 8028ae6:	617b      	str	r3, [r7, #20]
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	681b      	ldr	r3, [r3, #0]
 8028aec:	68db      	ldr	r3, [r3, #12]
 8028aee:	617b      	str	r3, [r7, #20]
 8028af0:	68fb      	ldr	r3, [r7, #12]
 8028af2:	681b      	ldr	r3, [r3, #0]
 8028af4:	689b      	ldr	r3, [r3, #8]
 8028af6:	617b      	str	r3, [r7, #20]
 8028af8:	697b      	ldr	r3, [r7, #20]
 8028afa:	e000      	b.n	8028afe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8028afc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028afe:	68fb      	ldr	r3, [r7, #12]
 8028b00:	2201      	movs	r2, #1
 8028b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	2200      	movs	r2, #0
 8028b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8028b12:	4618      	mov	r0, r3
 8028b14:	3730      	adds	r7, #48	; 0x30
 8028b16:	46bd      	mov	sp, r7
 8028b18:	bd80      	pop	{r7, pc}

08028b1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8028b1a:	b480      	push	{r7}
 8028b1c:	b083      	sub	sp, #12
 8028b1e:	af00      	add	r7, sp, #0
 8028b20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8028b22:	687b      	ldr	r3, [r7, #4]
 8028b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028b28:	b2db      	uxtb	r3, r3
}
 8028b2a:	4618      	mov	r0, r3
 8028b2c:	370c      	adds	r7, #12
 8028b2e:	46bd      	mov	sp, r7
 8028b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028b34:	4770      	bx	lr
	...

08028b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8028b38:	b580      	push	{r7, lr}
 8028b3a:	b088      	sub	sp, #32
 8028b3c:	af00      	add	r7, sp, #0
 8028b3e:	60f8      	str	r0, [r7, #12]
 8028b40:	60b9      	str	r1, [r7, #8]
 8028b42:	603b      	str	r3, [r7, #0]
 8028b44:	4613      	mov	r3, r2
 8028b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8028b48:	f7fa fd2c 	bl	80235a4 <HAL_GetTick>
 8028b4c:	4602      	mov	r2, r0
 8028b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028b50:	1a9b      	subs	r3, r3, r2
 8028b52:	683a      	ldr	r2, [r7, #0]
 8028b54:	4413      	add	r3, r2
 8028b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8028b58:	f7fa fd24 	bl	80235a4 <HAL_GetTick>
 8028b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8028b5e:	4b39      	ldr	r3, [pc, #228]	; (8028c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	015b      	lsls	r3, r3, #5
 8028b64:	0d1b      	lsrs	r3, r3, #20
 8028b66:	69fa      	ldr	r2, [r7, #28]
 8028b68:	fb02 f303 	mul.w	r3, r2, r3
 8028b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028b6e:	e054      	b.n	8028c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8028b70:	683b      	ldr	r3, [r7, #0]
 8028b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b76:	d050      	beq.n	8028c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8028b78:	f7fa fd14 	bl	80235a4 <HAL_GetTick>
 8028b7c:	4602      	mov	r2, r0
 8028b7e:	69bb      	ldr	r3, [r7, #24]
 8028b80:	1ad3      	subs	r3, r2, r3
 8028b82:	69fa      	ldr	r2, [r7, #28]
 8028b84:	429a      	cmp	r2, r3
 8028b86:	d902      	bls.n	8028b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8028b88:	69fb      	ldr	r3, [r7, #28]
 8028b8a:	2b00      	cmp	r3, #0
 8028b8c:	d13d      	bne.n	8028c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	681b      	ldr	r3, [r3, #0]
 8028b92:	685a      	ldr	r2, [r3, #4]
 8028b94:	68fb      	ldr	r3, [r7, #12]
 8028b96:	681b      	ldr	r3, [r3, #0]
 8028b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8028b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028b9e:	68fb      	ldr	r3, [r7, #12]
 8028ba0:	685b      	ldr	r3, [r3, #4]
 8028ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028ba6:	d111      	bne.n	8028bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8028ba8:	68fb      	ldr	r3, [r7, #12]
 8028baa:	689b      	ldr	r3, [r3, #8]
 8028bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028bb0:	d004      	beq.n	8028bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028bb2:	68fb      	ldr	r3, [r7, #12]
 8028bb4:	689b      	ldr	r3, [r3, #8]
 8028bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028bba:	d107      	bne.n	8028bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8028bbc:	68fb      	ldr	r3, [r7, #12]
 8028bbe:	681b      	ldr	r3, [r3, #0]
 8028bc0:	681a      	ldr	r2, [r3, #0]
 8028bc2:	68fb      	ldr	r3, [r7, #12]
 8028bc4:	681b      	ldr	r3, [r3, #0]
 8028bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8028bcc:	68fb      	ldr	r3, [r7, #12]
 8028bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8028bd4:	d10f      	bne.n	8028bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8028bd6:	68fb      	ldr	r3, [r7, #12]
 8028bd8:	681b      	ldr	r3, [r3, #0]
 8028bda:	681a      	ldr	r2, [r3, #0]
 8028bdc:	68fb      	ldr	r3, [r7, #12]
 8028bde:	681b      	ldr	r3, [r3, #0]
 8028be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8028be4:	601a      	str	r2, [r3, #0]
 8028be6:	68fb      	ldr	r3, [r7, #12]
 8028be8:	681b      	ldr	r3, [r3, #0]
 8028bea:	681a      	ldr	r2, [r3, #0]
 8028bec:	68fb      	ldr	r3, [r7, #12]
 8028bee:	681b      	ldr	r3, [r3, #0]
 8028bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8028bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8028bf6:	68fb      	ldr	r3, [r7, #12]
 8028bf8:	2201      	movs	r2, #1
 8028bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8028bfe:	68fb      	ldr	r3, [r7, #12]
 8028c00:	2200      	movs	r2, #0
 8028c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8028c06:	2303      	movs	r3, #3
 8028c08:	e017      	b.n	8028c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8028c0a:	697b      	ldr	r3, [r7, #20]
 8028c0c:	2b00      	cmp	r3, #0
 8028c0e:	d101      	bne.n	8028c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8028c10:	2300      	movs	r3, #0
 8028c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8028c14:	697b      	ldr	r3, [r7, #20]
 8028c16:	3b01      	subs	r3, #1
 8028c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8028c1a:	68fb      	ldr	r3, [r7, #12]
 8028c1c:	681b      	ldr	r3, [r3, #0]
 8028c1e:	689a      	ldr	r2, [r3, #8]
 8028c20:	68bb      	ldr	r3, [r7, #8]
 8028c22:	4013      	ands	r3, r2
 8028c24:	68ba      	ldr	r2, [r7, #8]
 8028c26:	429a      	cmp	r2, r3
 8028c28:	bf0c      	ite	eq
 8028c2a:	2301      	moveq	r3, #1
 8028c2c:	2300      	movne	r3, #0
 8028c2e:	b2db      	uxtb	r3, r3
 8028c30:	461a      	mov	r2, r3
 8028c32:	79fb      	ldrb	r3, [r7, #7]
 8028c34:	429a      	cmp	r2, r3
 8028c36:	d19b      	bne.n	8028b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8028c38:	2300      	movs	r3, #0
}
 8028c3a:	4618      	mov	r0, r3
 8028c3c:	3720      	adds	r7, #32
 8028c3e:	46bd      	mov	sp, r7
 8028c40:	bd80      	pop	{r7, pc}
 8028c42:	bf00      	nop
 8028c44:	20000004 	.word	0x20000004

08028c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8028c48:	b580      	push	{r7, lr}
 8028c4a:	b086      	sub	sp, #24
 8028c4c:	af02      	add	r7, sp, #8
 8028c4e:	60f8      	str	r0, [r7, #12]
 8028c50:	60b9      	str	r1, [r7, #8]
 8028c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028c54:	68fb      	ldr	r3, [r7, #12]
 8028c56:	685b      	ldr	r3, [r3, #4]
 8028c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c5c:	d111      	bne.n	8028c82 <SPI_EndRxTransaction+0x3a>
 8028c5e:	68fb      	ldr	r3, [r7, #12]
 8028c60:	689b      	ldr	r3, [r3, #8]
 8028c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028c66:	d004      	beq.n	8028c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8028c68:	68fb      	ldr	r3, [r7, #12]
 8028c6a:	689b      	ldr	r3, [r3, #8]
 8028c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028c70:	d107      	bne.n	8028c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8028c72:	68fb      	ldr	r3, [r7, #12]
 8028c74:	681b      	ldr	r3, [r3, #0]
 8028c76:	681a      	ldr	r2, [r3, #0]
 8028c78:	68fb      	ldr	r3, [r7, #12]
 8028c7a:	681b      	ldr	r3, [r3, #0]
 8028c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028c80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028c82:	68fb      	ldr	r3, [r7, #12]
 8028c84:	685b      	ldr	r3, [r3, #4]
 8028c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c8a:	d12a      	bne.n	8028ce2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8028c8c:	68fb      	ldr	r3, [r7, #12]
 8028c8e:	689b      	ldr	r3, [r3, #8]
 8028c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8028c94:	d012      	beq.n	8028cbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028c96:	687b      	ldr	r3, [r7, #4]
 8028c98:	9300      	str	r3, [sp, #0]
 8028c9a:	68bb      	ldr	r3, [r7, #8]
 8028c9c:	2200      	movs	r2, #0
 8028c9e:	2180      	movs	r1, #128	; 0x80
 8028ca0:	68f8      	ldr	r0, [r7, #12]
 8028ca2:	f7ff ff49 	bl	8028b38 <SPI_WaitFlagStateUntilTimeout>
 8028ca6:	4603      	mov	r3, r0
 8028ca8:	2b00      	cmp	r3, #0
 8028caa:	d02d      	beq.n	8028d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028cb0:	f043 0220 	orr.w	r2, r3, #32
 8028cb4:	68fb      	ldr	r3, [r7, #12]
 8028cb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028cb8:	2303      	movs	r3, #3
 8028cba:	e026      	b.n	8028d0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028cbc:	687b      	ldr	r3, [r7, #4]
 8028cbe:	9300      	str	r3, [sp, #0]
 8028cc0:	68bb      	ldr	r3, [r7, #8]
 8028cc2:	2200      	movs	r2, #0
 8028cc4:	2101      	movs	r1, #1
 8028cc6:	68f8      	ldr	r0, [r7, #12]
 8028cc8:	f7ff ff36 	bl	8028b38 <SPI_WaitFlagStateUntilTimeout>
 8028ccc:	4603      	mov	r3, r0
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	d01a      	beq.n	8028d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cd2:	68fb      	ldr	r3, [r7, #12]
 8028cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028cd6:	f043 0220 	orr.w	r2, r3, #32
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8028cde:	2303      	movs	r3, #3
 8028ce0:	e013      	b.n	8028d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8028ce2:	687b      	ldr	r3, [r7, #4]
 8028ce4:	9300      	str	r3, [sp, #0]
 8028ce6:	68bb      	ldr	r3, [r7, #8]
 8028ce8:	2200      	movs	r2, #0
 8028cea:	2101      	movs	r1, #1
 8028cec:	68f8      	ldr	r0, [r7, #12]
 8028cee:	f7ff ff23 	bl	8028b38 <SPI_WaitFlagStateUntilTimeout>
 8028cf2:	4603      	mov	r3, r0
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	d007      	beq.n	8028d08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028cf8:	68fb      	ldr	r3, [r7, #12]
 8028cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028cfc:	f043 0220 	orr.w	r2, r3, #32
 8028d00:	68fb      	ldr	r3, [r7, #12]
 8028d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028d04:	2303      	movs	r3, #3
 8028d06:	e000      	b.n	8028d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8028d08:	2300      	movs	r3, #0
}
 8028d0a:	4618      	mov	r0, r3
 8028d0c:	3710      	adds	r7, #16
 8028d0e:	46bd      	mov	sp, r7
 8028d10:	bd80      	pop	{r7, pc}
	...

08028d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8028d14:	b580      	push	{r7, lr}
 8028d16:	b088      	sub	sp, #32
 8028d18:	af02      	add	r7, sp, #8
 8028d1a:	60f8      	str	r0, [r7, #12]
 8028d1c:	60b9      	str	r1, [r7, #8]
 8028d1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8028d20:	4b1b      	ldr	r3, [pc, #108]	; (8028d90 <SPI_EndRxTxTransaction+0x7c>)
 8028d22:	681b      	ldr	r3, [r3, #0]
 8028d24:	4a1b      	ldr	r2, [pc, #108]	; (8028d94 <SPI_EndRxTxTransaction+0x80>)
 8028d26:	fba2 2303 	umull	r2, r3, r2, r3
 8028d2a:	0d5b      	lsrs	r3, r3, #21
 8028d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8028d30:	fb02 f303 	mul.w	r3, r2, r3
 8028d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8028d36:	68fb      	ldr	r3, [r7, #12]
 8028d38:	685b      	ldr	r3, [r3, #4]
 8028d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028d3e:	d112      	bne.n	8028d66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8028d40:	687b      	ldr	r3, [r7, #4]
 8028d42:	9300      	str	r3, [sp, #0]
 8028d44:	68bb      	ldr	r3, [r7, #8]
 8028d46:	2200      	movs	r2, #0
 8028d48:	2180      	movs	r1, #128	; 0x80
 8028d4a:	68f8      	ldr	r0, [r7, #12]
 8028d4c:	f7ff fef4 	bl	8028b38 <SPI_WaitFlagStateUntilTimeout>
 8028d50:	4603      	mov	r3, r0
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	d016      	beq.n	8028d84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8028d56:	68fb      	ldr	r3, [r7, #12]
 8028d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028d5a:	f043 0220 	orr.w	r2, r3, #32
 8028d5e:	68fb      	ldr	r3, [r7, #12]
 8028d60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8028d62:	2303      	movs	r3, #3
 8028d64:	e00f      	b.n	8028d86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8028d66:	697b      	ldr	r3, [r7, #20]
 8028d68:	2b00      	cmp	r3, #0
 8028d6a:	d00a      	beq.n	8028d82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8028d6c:	697b      	ldr	r3, [r7, #20]
 8028d6e:	3b01      	subs	r3, #1
 8028d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8028d72:	68fb      	ldr	r3, [r7, #12]
 8028d74:	681b      	ldr	r3, [r3, #0]
 8028d76:	689b      	ldr	r3, [r3, #8]
 8028d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8028d7c:	2b80      	cmp	r3, #128	; 0x80
 8028d7e:	d0f2      	beq.n	8028d66 <SPI_EndRxTxTransaction+0x52>
 8028d80:	e000      	b.n	8028d84 <SPI_EndRxTxTransaction+0x70>
        break;
 8028d82:	bf00      	nop
  }

  return HAL_OK;
 8028d84:	2300      	movs	r3, #0
}
 8028d86:	4618      	mov	r0, r3
 8028d88:	3718      	adds	r7, #24
 8028d8a:	46bd      	mov	sp, r7
 8028d8c:	bd80      	pop	{r7, pc}
 8028d8e:	bf00      	nop
 8028d90:	20000004 	.word	0x20000004
 8028d94:	165e9f81 	.word	0x165e9f81

08028d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8028d98:	b580      	push	{r7, lr}
 8028d9a:	b082      	sub	sp, #8
 8028d9c:	af00      	add	r7, sp, #0
 8028d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8028da0:	687b      	ldr	r3, [r7, #4]
 8028da2:	2b00      	cmp	r3, #0
 8028da4:	d101      	bne.n	8028daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8028da6:	2301      	movs	r3, #1
 8028da8:	e041      	b.n	8028e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8028daa:	687b      	ldr	r3, [r7, #4]
 8028dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028db0:	b2db      	uxtb	r3, r3
 8028db2:	2b00      	cmp	r3, #0
 8028db4:	d106      	bne.n	8028dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8028db6:	687b      	ldr	r3, [r7, #4]
 8028db8:	2200      	movs	r2, #0
 8028dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8028dbe:	6878      	ldr	r0, [r7, #4]
 8028dc0:	f7f8 fea6 	bl	8021b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028dc4:	687b      	ldr	r3, [r7, #4]
 8028dc6:	2202      	movs	r2, #2
 8028dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8028dcc:	687b      	ldr	r3, [r7, #4]
 8028dce:	681a      	ldr	r2, [r3, #0]
 8028dd0:	687b      	ldr	r3, [r7, #4]
 8028dd2:	3304      	adds	r3, #4
 8028dd4:	4619      	mov	r1, r3
 8028dd6:	4610      	mov	r0, r2
 8028dd8:	f000 fa96 	bl	8029308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8028ddc:	687b      	ldr	r3, [r7, #4]
 8028dde:	2201      	movs	r2, #1
 8028de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028de4:	687b      	ldr	r3, [r7, #4]
 8028de6:	2201      	movs	r2, #1
 8028de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8028dec:	687b      	ldr	r3, [r7, #4]
 8028dee:	2201      	movs	r2, #1
 8028df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8028df4:	687b      	ldr	r3, [r7, #4]
 8028df6:	2201      	movs	r2, #1
 8028df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8028dfc:	687b      	ldr	r3, [r7, #4]
 8028dfe:	2201      	movs	r2, #1
 8028e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	2201      	movs	r2, #1
 8028e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8028e0c:	687b      	ldr	r3, [r7, #4]
 8028e0e:	2201      	movs	r2, #1
 8028e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8028e14:	687b      	ldr	r3, [r7, #4]
 8028e16:	2201      	movs	r2, #1
 8028e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8028e1c:	687b      	ldr	r3, [r7, #4]
 8028e1e:	2201      	movs	r2, #1
 8028e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8028e24:	687b      	ldr	r3, [r7, #4]
 8028e26:	2201      	movs	r2, #1
 8028e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8028e2c:	2300      	movs	r3, #0
}
 8028e2e:	4618      	mov	r0, r3
 8028e30:	3708      	adds	r7, #8
 8028e32:	46bd      	mov	sp, r7
 8028e34:	bd80      	pop	{r7, pc}
	...

08028e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8028e38:	b480      	push	{r7}
 8028e3a:	b085      	sub	sp, #20
 8028e3c:	af00      	add	r7, sp, #0
 8028e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028e46:	b2db      	uxtb	r3, r3
 8028e48:	2b01      	cmp	r3, #1
 8028e4a:	d001      	beq.n	8028e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8028e4c:	2301      	movs	r3, #1
 8028e4e:	e04e      	b.n	8028eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8028e50:	687b      	ldr	r3, [r7, #4]
 8028e52:	2202      	movs	r2, #2
 8028e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8028e58:	687b      	ldr	r3, [r7, #4]
 8028e5a:	681b      	ldr	r3, [r3, #0]
 8028e5c:	68da      	ldr	r2, [r3, #12]
 8028e5e:	687b      	ldr	r3, [r7, #4]
 8028e60:	681b      	ldr	r3, [r3, #0]
 8028e62:	f042 0201 	orr.w	r2, r2, #1
 8028e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8028e68:	687b      	ldr	r3, [r7, #4]
 8028e6a:	681b      	ldr	r3, [r3, #0]
 8028e6c:	4a23      	ldr	r2, [pc, #140]	; (8028efc <HAL_TIM_Base_Start_IT+0xc4>)
 8028e6e:	4293      	cmp	r3, r2
 8028e70:	d022      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028e72:	687b      	ldr	r3, [r7, #4]
 8028e74:	681b      	ldr	r3, [r3, #0]
 8028e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8028e7a:	d01d      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028e7c:	687b      	ldr	r3, [r7, #4]
 8028e7e:	681b      	ldr	r3, [r3, #0]
 8028e80:	4a1f      	ldr	r2, [pc, #124]	; (8028f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8028e82:	4293      	cmp	r3, r2
 8028e84:	d018      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028e86:	687b      	ldr	r3, [r7, #4]
 8028e88:	681b      	ldr	r3, [r3, #0]
 8028e8a:	4a1e      	ldr	r2, [pc, #120]	; (8028f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8028e8c:	4293      	cmp	r3, r2
 8028e8e:	d013      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028e90:	687b      	ldr	r3, [r7, #4]
 8028e92:	681b      	ldr	r3, [r3, #0]
 8028e94:	4a1c      	ldr	r2, [pc, #112]	; (8028f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8028e96:	4293      	cmp	r3, r2
 8028e98:	d00e      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028e9a:	687b      	ldr	r3, [r7, #4]
 8028e9c:	681b      	ldr	r3, [r3, #0]
 8028e9e:	4a1b      	ldr	r2, [pc, #108]	; (8028f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8028ea0:	4293      	cmp	r3, r2
 8028ea2:	d009      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028ea4:	687b      	ldr	r3, [r7, #4]
 8028ea6:	681b      	ldr	r3, [r3, #0]
 8028ea8:	4a19      	ldr	r2, [pc, #100]	; (8028f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8028eaa:	4293      	cmp	r3, r2
 8028eac:	d004      	beq.n	8028eb8 <HAL_TIM_Base_Start_IT+0x80>
 8028eae:	687b      	ldr	r3, [r7, #4]
 8028eb0:	681b      	ldr	r3, [r3, #0]
 8028eb2:	4a18      	ldr	r2, [pc, #96]	; (8028f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8028eb4:	4293      	cmp	r3, r2
 8028eb6:	d111      	bne.n	8028edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8028eb8:	687b      	ldr	r3, [r7, #4]
 8028eba:	681b      	ldr	r3, [r3, #0]
 8028ebc:	689b      	ldr	r3, [r3, #8]
 8028ebe:	f003 0307 	and.w	r3, r3, #7
 8028ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028ec4:	68fb      	ldr	r3, [r7, #12]
 8028ec6:	2b06      	cmp	r3, #6
 8028ec8:	d010      	beq.n	8028eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8028eca:	687b      	ldr	r3, [r7, #4]
 8028ecc:	681b      	ldr	r3, [r3, #0]
 8028ece:	681a      	ldr	r2, [r3, #0]
 8028ed0:	687b      	ldr	r3, [r7, #4]
 8028ed2:	681b      	ldr	r3, [r3, #0]
 8028ed4:	f042 0201 	orr.w	r2, r2, #1
 8028ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8028eda:	e007      	b.n	8028eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8028edc:	687b      	ldr	r3, [r7, #4]
 8028ede:	681b      	ldr	r3, [r3, #0]
 8028ee0:	681a      	ldr	r2, [r3, #0]
 8028ee2:	687b      	ldr	r3, [r7, #4]
 8028ee4:	681b      	ldr	r3, [r3, #0]
 8028ee6:	f042 0201 	orr.w	r2, r2, #1
 8028eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8028eec:	2300      	movs	r3, #0
}
 8028eee:	4618      	mov	r0, r3
 8028ef0:	3714      	adds	r7, #20
 8028ef2:	46bd      	mov	sp, r7
 8028ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028ef8:	4770      	bx	lr
 8028efa:	bf00      	nop
 8028efc:	40010000 	.word	0x40010000
 8028f00:	40000400 	.word	0x40000400
 8028f04:	40000800 	.word	0x40000800
 8028f08:	40000c00 	.word	0x40000c00
 8028f0c:	40010400 	.word	0x40010400
 8028f10:	40014000 	.word	0x40014000
 8028f14:	40001800 	.word	0x40001800

08028f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8028f18:	b580      	push	{r7, lr}
 8028f1a:	b082      	sub	sp, #8
 8028f1c:	af00      	add	r7, sp, #0
 8028f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8028f20:	687b      	ldr	r3, [r7, #4]
 8028f22:	681b      	ldr	r3, [r3, #0]
 8028f24:	691b      	ldr	r3, [r3, #16]
 8028f26:	f003 0302 	and.w	r3, r3, #2
 8028f2a:	2b02      	cmp	r3, #2
 8028f2c:	d122      	bne.n	8028f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8028f2e:	687b      	ldr	r3, [r7, #4]
 8028f30:	681b      	ldr	r3, [r3, #0]
 8028f32:	68db      	ldr	r3, [r3, #12]
 8028f34:	f003 0302 	and.w	r3, r3, #2
 8028f38:	2b02      	cmp	r3, #2
 8028f3a:	d11b      	bne.n	8028f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8028f3c:	687b      	ldr	r3, [r7, #4]
 8028f3e:	681b      	ldr	r3, [r3, #0]
 8028f40:	f06f 0202 	mvn.w	r2, #2
 8028f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8028f46:	687b      	ldr	r3, [r7, #4]
 8028f48:	2201      	movs	r2, #1
 8028f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8028f4c:	687b      	ldr	r3, [r7, #4]
 8028f4e:	681b      	ldr	r3, [r3, #0]
 8028f50:	699b      	ldr	r3, [r3, #24]
 8028f52:	f003 0303 	and.w	r3, r3, #3
 8028f56:	2b00      	cmp	r3, #0
 8028f58:	d003      	beq.n	8028f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8028f5a:	6878      	ldr	r0, [r7, #4]
 8028f5c:	f000 f9b5 	bl	80292ca <HAL_TIM_IC_CaptureCallback>
 8028f60:	e005      	b.n	8028f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8028f62:	6878      	ldr	r0, [r7, #4]
 8028f64:	f000 f9a7 	bl	80292b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028f68:	6878      	ldr	r0, [r7, #4]
 8028f6a:	f000 f9b8 	bl	80292de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028f6e:	687b      	ldr	r3, [r7, #4]
 8028f70:	2200      	movs	r2, #0
 8028f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8028f74:	687b      	ldr	r3, [r7, #4]
 8028f76:	681b      	ldr	r3, [r3, #0]
 8028f78:	691b      	ldr	r3, [r3, #16]
 8028f7a:	f003 0304 	and.w	r3, r3, #4
 8028f7e:	2b04      	cmp	r3, #4
 8028f80:	d122      	bne.n	8028fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	681b      	ldr	r3, [r3, #0]
 8028f86:	68db      	ldr	r3, [r3, #12]
 8028f88:	f003 0304 	and.w	r3, r3, #4
 8028f8c:	2b04      	cmp	r3, #4
 8028f8e:	d11b      	bne.n	8028fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8028f90:	687b      	ldr	r3, [r7, #4]
 8028f92:	681b      	ldr	r3, [r3, #0]
 8028f94:	f06f 0204 	mvn.w	r2, #4
 8028f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8028f9a:	687b      	ldr	r3, [r7, #4]
 8028f9c:	2202      	movs	r2, #2
 8028f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8028fa0:	687b      	ldr	r3, [r7, #4]
 8028fa2:	681b      	ldr	r3, [r3, #0]
 8028fa4:	699b      	ldr	r3, [r3, #24]
 8028fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8028faa:	2b00      	cmp	r3, #0
 8028fac:	d003      	beq.n	8028fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8028fae:	6878      	ldr	r0, [r7, #4]
 8028fb0:	f000 f98b 	bl	80292ca <HAL_TIM_IC_CaptureCallback>
 8028fb4:	e005      	b.n	8028fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8028fb6:	6878      	ldr	r0, [r7, #4]
 8028fb8:	f000 f97d 	bl	80292b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8028fbc:	6878      	ldr	r0, [r7, #4]
 8028fbe:	f000 f98e 	bl	80292de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8028fc2:	687b      	ldr	r3, [r7, #4]
 8028fc4:	2200      	movs	r2, #0
 8028fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8028fc8:	687b      	ldr	r3, [r7, #4]
 8028fca:	681b      	ldr	r3, [r3, #0]
 8028fcc:	691b      	ldr	r3, [r3, #16]
 8028fce:	f003 0308 	and.w	r3, r3, #8
 8028fd2:	2b08      	cmp	r3, #8
 8028fd4:	d122      	bne.n	802901c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8028fd6:	687b      	ldr	r3, [r7, #4]
 8028fd8:	681b      	ldr	r3, [r3, #0]
 8028fda:	68db      	ldr	r3, [r3, #12]
 8028fdc:	f003 0308 	and.w	r3, r3, #8
 8028fe0:	2b08      	cmp	r3, #8
 8028fe2:	d11b      	bne.n	802901c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8028fe4:	687b      	ldr	r3, [r7, #4]
 8028fe6:	681b      	ldr	r3, [r3, #0]
 8028fe8:	f06f 0208 	mvn.w	r2, #8
 8028fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8028fee:	687b      	ldr	r3, [r7, #4]
 8028ff0:	2204      	movs	r2, #4
 8028ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8028ff4:	687b      	ldr	r3, [r7, #4]
 8028ff6:	681b      	ldr	r3, [r3, #0]
 8028ff8:	69db      	ldr	r3, [r3, #28]
 8028ffa:	f003 0303 	and.w	r3, r3, #3
 8028ffe:	2b00      	cmp	r3, #0
 8029000:	d003      	beq.n	802900a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029002:	6878      	ldr	r0, [r7, #4]
 8029004:	f000 f961 	bl	80292ca <HAL_TIM_IC_CaptureCallback>
 8029008:	e005      	b.n	8029016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802900a:	6878      	ldr	r0, [r7, #4]
 802900c:	f000 f953 	bl	80292b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029010:	6878      	ldr	r0, [r7, #4]
 8029012:	f000 f964 	bl	80292de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	2200      	movs	r2, #0
 802901a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802901c:	687b      	ldr	r3, [r7, #4]
 802901e:	681b      	ldr	r3, [r3, #0]
 8029020:	691b      	ldr	r3, [r3, #16]
 8029022:	f003 0310 	and.w	r3, r3, #16
 8029026:	2b10      	cmp	r3, #16
 8029028:	d122      	bne.n	8029070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802902a:	687b      	ldr	r3, [r7, #4]
 802902c:	681b      	ldr	r3, [r3, #0]
 802902e:	68db      	ldr	r3, [r3, #12]
 8029030:	f003 0310 	and.w	r3, r3, #16
 8029034:	2b10      	cmp	r3, #16
 8029036:	d11b      	bne.n	8029070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029038:	687b      	ldr	r3, [r7, #4]
 802903a:	681b      	ldr	r3, [r3, #0]
 802903c:	f06f 0210 	mvn.w	r2, #16
 8029040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	2208      	movs	r2, #8
 8029046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029048:	687b      	ldr	r3, [r7, #4]
 802904a:	681b      	ldr	r3, [r3, #0]
 802904c:	69db      	ldr	r3, [r3, #28]
 802904e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029052:	2b00      	cmp	r3, #0
 8029054:	d003      	beq.n	802905e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029056:	6878      	ldr	r0, [r7, #4]
 8029058:	f000 f937 	bl	80292ca <HAL_TIM_IC_CaptureCallback>
 802905c:	e005      	b.n	802906a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802905e:	6878      	ldr	r0, [r7, #4]
 8029060:	f000 f929 	bl	80292b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029064:	6878      	ldr	r0, [r7, #4]
 8029066:	f000 f93a 	bl	80292de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802906a:	687b      	ldr	r3, [r7, #4]
 802906c:	2200      	movs	r2, #0
 802906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029070:	687b      	ldr	r3, [r7, #4]
 8029072:	681b      	ldr	r3, [r3, #0]
 8029074:	691b      	ldr	r3, [r3, #16]
 8029076:	f003 0301 	and.w	r3, r3, #1
 802907a:	2b01      	cmp	r3, #1
 802907c:	d10e      	bne.n	802909c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802907e:	687b      	ldr	r3, [r7, #4]
 8029080:	681b      	ldr	r3, [r3, #0]
 8029082:	68db      	ldr	r3, [r3, #12]
 8029084:	f003 0301 	and.w	r3, r3, #1
 8029088:	2b01      	cmp	r3, #1
 802908a:	d107      	bne.n	802909c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802908c:	687b      	ldr	r3, [r7, #4]
 802908e:	681b      	ldr	r3, [r3, #0]
 8029090:	f06f 0201 	mvn.w	r2, #1
 8029094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029096:	6878      	ldr	r0, [r7, #4]
 8029098:	f7f7 fee0 	bl	8020e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802909c:	687b      	ldr	r3, [r7, #4]
 802909e:	681b      	ldr	r3, [r3, #0]
 80290a0:	691b      	ldr	r3, [r3, #16]
 80290a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290a6:	2b80      	cmp	r3, #128	; 0x80
 80290a8:	d10e      	bne.n	80290c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80290aa:	687b      	ldr	r3, [r7, #4]
 80290ac:	681b      	ldr	r3, [r3, #0]
 80290ae:	68db      	ldr	r3, [r3, #12]
 80290b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80290b4:	2b80      	cmp	r3, #128	; 0x80
 80290b6:	d107      	bne.n	80290c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80290b8:	687b      	ldr	r3, [r7, #4]
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80290c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80290c2:	6878      	ldr	r0, [r7, #4]
 80290c4:	f000 fae0 	bl	8029688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80290c8:	687b      	ldr	r3, [r7, #4]
 80290ca:	681b      	ldr	r3, [r3, #0]
 80290cc:	691b      	ldr	r3, [r3, #16]
 80290ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80290d2:	2b40      	cmp	r3, #64	; 0x40
 80290d4:	d10e      	bne.n	80290f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80290d6:	687b      	ldr	r3, [r7, #4]
 80290d8:	681b      	ldr	r3, [r3, #0]
 80290da:	68db      	ldr	r3, [r3, #12]
 80290dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80290e0:	2b40      	cmp	r3, #64	; 0x40
 80290e2:	d107      	bne.n	80290f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80290e4:	687b      	ldr	r3, [r7, #4]
 80290e6:	681b      	ldr	r3, [r3, #0]
 80290e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80290ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80290ee:	6878      	ldr	r0, [r7, #4]
 80290f0:	f000 f8ff 	bl	80292f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80290f4:	687b      	ldr	r3, [r7, #4]
 80290f6:	681b      	ldr	r3, [r3, #0]
 80290f8:	691b      	ldr	r3, [r3, #16]
 80290fa:	f003 0320 	and.w	r3, r3, #32
 80290fe:	2b20      	cmp	r3, #32
 8029100:	d10e      	bne.n	8029120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029102:	687b      	ldr	r3, [r7, #4]
 8029104:	681b      	ldr	r3, [r3, #0]
 8029106:	68db      	ldr	r3, [r3, #12]
 8029108:	f003 0320 	and.w	r3, r3, #32
 802910c:	2b20      	cmp	r3, #32
 802910e:	d107      	bne.n	8029120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029110:	687b      	ldr	r3, [r7, #4]
 8029112:	681b      	ldr	r3, [r3, #0]
 8029114:	f06f 0220 	mvn.w	r2, #32
 8029118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802911a:	6878      	ldr	r0, [r7, #4]
 802911c:	f000 faaa 	bl	8029674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029120:	bf00      	nop
 8029122:	3708      	adds	r7, #8
 8029124:	46bd      	mov	sp, r7
 8029126:	bd80      	pop	{r7, pc}

08029128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029128:	b580      	push	{r7, lr}
 802912a:	b084      	sub	sp, #16
 802912c:	af00      	add	r7, sp, #0
 802912e:	6078      	str	r0, [r7, #4]
 8029130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8029132:	2300      	movs	r3, #0
 8029134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029136:	687b      	ldr	r3, [r7, #4]
 8029138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802913c:	2b01      	cmp	r3, #1
 802913e:	d101      	bne.n	8029144 <HAL_TIM_ConfigClockSource+0x1c>
 8029140:	2302      	movs	r3, #2
 8029142:	e0b4      	b.n	80292ae <HAL_TIM_ConfigClockSource+0x186>
 8029144:	687b      	ldr	r3, [r7, #4]
 8029146:	2201      	movs	r2, #1
 8029148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802914c:	687b      	ldr	r3, [r7, #4]
 802914e:	2202      	movs	r2, #2
 8029150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029154:	687b      	ldr	r3, [r7, #4]
 8029156:	681b      	ldr	r3, [r3, #0]
 8029158:	689b      	ldr	r3, [r3, #8]
 802915a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802915c:	68bb      	ldr	r3, [r7, #8]
 802915e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029164:	68bb      	ldr	r3, [r7, #8]
 8029166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802916a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 802916c:	687b      	ldr	r3, [r7, #4]
 802916e:	681b      	ldr	r3, [r3, #0]
 8029170:	68ba      	ldr	r2, [r7, #8]
 8029172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029174:	683b      	ldr	r3, [r7, #0]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802917c:	d03e      	beq.n	80291fc <HAL_TIM_ConfigClockSource+0xd4>
 802917e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029182:	f200 8087 	bhi.w	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 8029186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802918a:	f000 8086 	beq.w	802929a <HAL_TIM_ConfigClockSource+0x172>
 802918e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029192:	d87f      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 8029194:	2b70      	cmp	r3, #112	; 0x70
 8029196:	d01a      	beq.n	80291ce <HAL_TIM_ConfigClockSource+0xa6>
 8029198:	2b70      	cmp	r3, #112	; 0x70
 802919a:	d87b      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 802919c:	2b60      	cmp	r3, #96	; 0x60
 802919e:	d050      	beq.n	8029242 <HAL_TIM_ConfigClockSource+0x11a>
 80291a0:	2b60      	cmp	r3, #96	; 0x60
 80291a2:	d877      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 80291a4:	2b50      	cmp	r3, #80	; 0x50
 80291a6:	d03c      	beq.n	8029222 <HAL_TIM_ConfigClockSource+0xfa>
 80291a8:	2b50      	cmp	r3, #80	; 0x50
 80291aa:	d873      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 80291ac:	2b40      	cmp	r3, #64	; 0x40
 80291ae:	d058      	beq.n	8029262 <HAL_TIM_ConfigClockSource+0x13a>
 80291b0:	2b40      	cmp	r3, #64	; 0x40
 80291b2:	d86f      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 80291b4:	2b30      	cmp	r3, #48	; 0x30
 80291b6:	d064      	beq.n	8029282 <HAL_TIM_ConfigClockSource+0x15a>
 80291b8:	2b30      	cmp	r3, #48	; 0x30
 80291ba:	d86b      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 80291bc:	2b20      	cmp	r3, #32
 80291be:	d060      	beq.n	8029282 <HAL_TIM_ConfigClockSource+0x15a>
 80291c0:	2b20      	cmp	r3, #32
 80291c2:	d867      	bhi.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
 80291c4:	2b00      	cmp	r3, #0
 80291c6:	d05c      	beq.n	8029282 <HAL_TIM_ConfigClockSource+0x15a>
 80291c8:	2b10      	cmp	r3, #16
 80291ca:	d05a      	beq.n	8029282 <HAL_TIM_ConfigClockSource+0x15a>
 80291cc:	e062      	b.n	8029294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80291ce:	687b      	ldr	r3, [r7, #4]
 80291d0:	6818      	ldr	r0, [r3, #0]
 80291d2:	683b      	ldr	r3, [r7, #0]
 80291d4:	6899      	ldr	r1, [r3, #8]
 80291d6:	683b      	ldr	r3, [r7, #0]
 80291d8:	685a      	ldr	r2, [r3, #4]
 80291da:	683b      	ldr	r3, [r7, #0]
 80291dc:	68db      	ldr	r3, [r3, #12]
 80291de:	f000 f9ad 	bl	802953c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80291e2:	687b      	ldr	r3, [r7, #4]
 80291e4:	681b      	ldr	r3, [r3, #0]
 80291e6:	689b      	ldr	r3, [r3, #8]
 80291e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80291ea:	68bb      	ldr	r3, [r7, #8]
 80291ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80291f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80291f2:	687b      	ldr	r3, [r7, #4]
 80291f4:	681b      	ldr	r3, [r3, #0]
 80291f6:	68ba      	ldr	r2, [r7, #8]
 80291f8:	609a      	str	r2, [r3, #8]
      break;
 80291fa:	e04f      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80291fc:	687b      	ldr	r3, [r7, #4]
 80291fe:	6818      	ldr	r0, [r3, #0]
 8029200:	683b      	ldr	r3, [r7, #0]
 8029202:	6899      	ldr	r1, [r3, #8]
 8029204:	683b      	ldr	r3, [r7, #0]
 8029206:	685a      	ldr	r2, [r3, #4]
 8029208:	683b      	ldr	r3, [r7, #0]
 802920a:	68db      	ldr	r3, [r3, #12]
 802920c:	f000 f996 	bl	802953c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029210:	687b      	ldr	r3, [r7, #4]
 8029212:	681b      	ldr	r3, [r3, #0]
 8029214:	689a      	ldr	r2, [r3, #8]
 8029216:	687b      	ldr	r3, [r7, #4]
 8029218:	681b      	ldr	r3, [r3, #0]
 802921a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802921e:	609a      	str	r2, [r3, #8]
      break;
 8029220:	e03c      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029222:	687b      	ldr	r3, [r7, #4]
 8029224:	6818      	ldr	r0, [r3, #0]
 8029226:	683b      	ldr	r3, [r7, #0]
 8029228:	6859      	ldr	r1, [r3, #4]
 802922a:	683b      	ldr	r3, [r7, #0]
 802922c:	68db      	ldr	r3, [r3, #12]
 802922e:	461a      	mov	r2, r3
 8029230:	f000 f90a 	bl	8029448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029234:	687b      	ldr	r3, [r7, #4]
 8029236:	681b      	ldr	r3, [r3, #0]
 8029238:	2150      	movs	r1, #80	; 0x50
 802923a:	4618      	mov	r0, r3
 802923c:	f000 f963 	bl	8029506 <TIM_ITRx_SetConfig>
      break;
 8029240:	e02c      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8029242:	687b      	ldr	r3, [r7, #4]
 8029244:	6818      	ldr	r0, [r3, #0]
 8029246:	683b      	ldr	r3, [r7, #0]
 8029248:	6859      	ldr	r1, [r3, #4]
 802924a:	683b      	ldr	r3, [r7, #0]
 802924c:	68db      	ldr	r3, [r3, #12]
 802924e:	461a      	mov	r2, r3
 8029250:	f000 f929 	bl	80294a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029254:	687b      	ldr	r3, [r7, #4]
 8029256:	681b      	ldr	r3, [r3, #0]
 8029258:	2160      	movs	r1, #96	; 0x60
 802925a:	4618      	mov	r0, r3
 802925c:	f000 f953 	bl	8029506 <TIM_ITRx_SetConfig>
      break;
 8029260:	e01c      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8029262:	687b      	ldr	r3, [r7, #4]
 8029264:	6818      	ldr	r0, [r3, #0]
 8029266:	683b      	ldr	r3, [r7, #0]
 8029268:	6859      	ldr	r1, [r3, #4]
 802926a:	683b      	ldr	r3, [r7, #0]
 802926c:	68db      	ldr	r3, [r3, #12]
 802926e:	461a      	mov	r2, r3
 8029270:	f000 f8ea 	bl	8029448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029274:	687b      	ldr	r3, [r7, #4]
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	2140      	movs	r1, #64	; 0x40
 802927a:	4618      	mov	r0, r3
 802927c:	f000 f943 	bl	8029506 <TIM_ITRx_SetConfig>
      break;
 8029280:	e00c      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029282:	687b      	ldr	r3, [r7, #4]
 8029284:	681a      	ldr	r2, [r3, #0]
 8029286:	683b      	ldr	r3, [r7, #0]
 8029288:	681b      	ldr	r3, [r3, #0]
 802928a:	4619      	mov	r1, r3
 802928c:	4610      	mov	r0, r2
 802928e:	f000 f93a 	bl	8029506 <TIM_ITRx_SetConfig>
      break;
 8029292:	e003      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8029294:	2301      	movs	r3, #1
 8029296:	73fb      	strb	r3, [r7, #15]
      break;
 8029298:	e000      	b.n	802929c <HAL_TIM_ConfigClockSource+0x174>
      break;
 802929a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802929c:	687b      	ldr	r3, [r7, #4]
 802929e:	2201      	movs	r2, #1
 80292a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80292a4:	687b      	ldr	r3, [r7, #4]
 80292a6:	2200      	movs	r2, #0
 80292a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80292ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80292ae:	4618      	mov	r0, r3
 80292b0:	3710      	adds	r7, #16
 80292b2:	46bd      	mov	sp, r7
 80292b4:	bd80      	pop	{r7, pc}

080292b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80292b6:	b480      	push	{r7}
 80292b8:	b083      	sub	sp, #12
 80292ba:	af00      	add	r7, sp, #0
 80292bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80292be:	bf00      	nop
 80292c0:	370c      	adds	r7, #12
 80292c2:	46bd      	mov	sp, r7
 80292c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292c8:	4770      	bx	lr

080292ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80292ca:	b480      	push	{r7}
 80292cc:	b083      	sub	sp, #12
 80292ce:	af00      	add	r7, sp, #0
 80292d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80292d2:	bf00      	nop
 80292d4:	370c      	adds	r7, #12
 80292d6:	46bd      	mov	sp, r7
 80292d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292dc:	4770      	bx	lr

080292de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80292de:	b480      	push	{r7}
 80292e0:	b083      	sub	sp, #12
 80292e2:	af00      	add	r7, sp, #0
 80292e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80292e6:	bf00      	nop
 80292e8:	370c      	adds	r7, #12
 80292ea:	46bd      	mov	sp, r7
 80292ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80292f0:	4770      	bx	lr

080292f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80292f2:	b480      	push	{r7}
 80292f4:	b083      	sub	sp, #12
 80292f6:	af00      	add	r7, sp, #0
 80292f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80292fa:	bf00      	nop
 80292fc:	370c      	adds	r7, #12
 80292fe:	46bd      	mov	sp, r7
 8029300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029304:	4770      	bx	lr
	...

08029308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029308:	b480      	push	{r7}
 802930a:	b085      	sub	sp, #20
 802930c:	af00      	add	r7, sp, #0
 802930e:	6078      	str	r0, [r7, #4]
 8029310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029312:	687b      	ldr	r3, [r7, #4]
 8029314:	681b      	ldr	r3, [r3, #0]
 8029316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029318:	687b      	ldr	r3, [r7, #4]
 802931a:	4a40      	ldr	r2, [pc, #256]	; (802941c <TIM_Base_SetConfig+0x114>)
 802931c:	4293      	cmp	r3, r2
 802931e:	d013      	beq.n	8029348 <TIM_Base_SetConfig+0x40>
 8029320:	687b      	ldr	r3, [r7, #4]
 8029322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029326:	d00f      	beq.n	8029348 <TIM_Base_SetConfig+0x40>
 8029328:	687b      	ldr	r3, [r7, #4]
 802932a:	4a3d      	ldr	r2, [pc, #244]	; (8029420 <TIM_Base_SetConfig+0x118>)
 802932c:	4293      	cmp	r3, r2
 802932e:	d00b      	beq.n	8029348 <TIM_Base_SetConfig+0x40>
 8029330:	687b      	ldr	r3, [r7, #4]
 8029332:	4a3c      	ldr	r2, [pc, #240]	; (8029424 <TIM_Base_SetConfig+0x11c>)
 8029334:	4293      	cmp	r3, r2
 8029336:	d007      	beq.n	8029348 <TIM_Base_SetConfig+0x40>
 8029338:	687b      	ldr	r3, [r7, #4]
 802933a:	4a3b      	ldr	r2, [pc, #236]	; (8029428 <TIM_Base_SetConfig+0x120>)
 802933c:	4293      	cmp	r3, r2
 802933e:	d003      	beq.n	8029348 <TIM_Base_SetConfig+0x40>
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	4a3a      	ldr	r2, [pc, #232]	; (802942c <TIM_Base_SetConfig+0x124>)
 8029344:	4293      	cmp	r3, r2
 8029346:	d108      	bne.n	802935a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029348:	68fb      	ldr	r3, [r7, #12]
 802934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802934e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029350:	683b      	ldr	r3, [r7, #0]
 8029352:	685b      	ldr	r3, [r3, #4]
 8029354:	68fa      	ldr	r2, [r7, #12]
 8029356:	4313      	orrs	r3, r2
 8029358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802935a:	687b      	ldr	r3, [r7, #4]
 802935c:	4a2f      	ldr	r2, [pc, #188]	; (802941c <TIM_Base_SetConfig+0x114>)
 802935e:	4293      	cmp	r3, r2
 8029360:	d02b      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 8029362:	687b      	ldr	r3, [r7, #4]
 8029364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029368:	d027      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 802936a:	687b      	ldr	r3, [r7, #4]
 802936c:	4a2c      	ldr	r2, [pc, #176]	; (8029420 <TIM_Base_SetConfig+0x118>)
 802936e:	4293      	cmp	r3, r2
 8029370:	d023      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 8029372:	687b      	ldr	r3, [r7, #4]
 8029374:	4a2b      	ldr	r2, [pc, #172]	; (8029424 <TIM_Base_SetConfig+0x11c>)
 8029376:	4293      	cmp	r3, r2
 8029378:	d01f      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 802937a:	687b      	ldr	r3, [r7, #4]
 802937c:	4a2a      	ldr	r2, [pc, #168]	; (8029428 <TIM_Base_SetConfig+0x120>)
 802937e:	4293      	cmp	r3, r2
 8029380:	d01b      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 8029382:	687b      	ldr	r3, [r7, #4]
 8029384:	4a29      	ldr	r2, [pc, #164]	; (802942c <TIM_Base_SetConfig+0x124>)
 8029386:	4293      	cmp	r3, r2
 8029388:	d017      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 802938a:	687b      	ldr	r3, [r7, #4]
 802938c:	4a28      	ldr	r2, [pc, #160]	; (8029430 <TIM_Base_SetConfig+0x128>)
 802938e:	4293      	cmp	r3, r2
 8029390:	d013      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 8029392:	687b      	ldr	r3, [r7, #4]
 8029394:	4a27      	ldr	r2, [pc, #156]	; (8029434 <TIM_Base_SetConfig+0x12c>)
 8029396:	4293      	cmp	r3, r2
 8029398:	d00f      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 802939a:	687b      	ldr	r3, [r7, #4]
 802939c:	4a26      	ldr	r2, [pc, #152]	; (8029438 <TIM_Base_SetConfig+0x130>)
 802939e:	4293      	cmp	r3, r2
 80293a0:	d00b      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 80293a2:	687b      	ldr	r3, [r7, #4]
 80293a4:	4a25      	ldr	r2, [pc, #148]	; (802943c <TIM_Base_SetConfig+0x134>)
 80293a6:	4293      	cmp	r3, r2
 80293a8:	d007      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	4a24      	ldr	r2, [pc, #144]	; (8029440 <TIM_Base_SetConfig+0x138>)
 80293ae:	4293      	cmp	r3, r2
 80293b0:	d003      	beq.n	80293ba <TIM_Base_SetConfig+0xb2>
 80293b2:	687b      	ldr	r3, [r7, #4]
 80293b4:	4a23      	ldr	r2, [pc, #140]	; (8029444 <TIM_Base_SetConfig+0x13c>)
 80293b6:	4293      	cmp	r3, r2
 80293b8:	d108      	bne.n	80293cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80293ba:	68fb      	ldr	r3, [r7, #12]
 80293bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80293c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80293c2:	683b      	ldr	r3, [r7, #0]
 80293c4:	68db      	ldr	r3, [r3, #12]
 80293c6:	68fa      	ldr	r2, [r7, #12]
 80293c8:	4313      	orrs	r3, r2
 80293ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80293cc:	68fb      	ldr	r3, [r7, #12]
 80293ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80293d2:	683b      	ldr	r3, [r7, #0]
 80293d4:	695b      	ldr	r3, [r3, #20]
 80293d6:	4313      	orrs	r3, r2
 80293d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80293da:	687b      	ldr	r3, [r7, #4]
 80293dc:	68fa      	ldr	r2, [r7, #12]
 80293de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80293e0:	683b      	ldr	r3, [r7, #0]
 80293e2:	689a      	ldr	r2, [r3, #8]
 80293e4:	687b      	ldr	r3, [r7, #4]
 80293e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80293e8:	683b      	ldr	r3, [r7, #0]
 80293ea:	681a      	ldr	r2, [r3, #0]
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80293f0:	687b      	ldr	r3, [r7, #4]
 80293f2:	4a0a      	ldr	r2, [pc, #40]	; (802941c <TIM_Base_SetConfig+0x114>)
 80293f4:	4293      	cmp	r3, r2
 80293f6:	d003      	beq.n	8029400 <TIM_Base_SetConfig+0xf8>
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	4a0c      	ldr	r2, [pc, #48]	; (802942c <TIM_Base_SetConfig+0x124>)
 80293fc:	4293      	cmp	r3, r2
 80293fe:	d103      	bne.n	8029408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029400:	683b      	ldr	r3, [r7, #0]
 8029402:	691a      	ldr	r2, [r3, #16]
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029408:	687b      	ldr	r3, [r7, #4]
 802940a:	2201      	movs	r2, #1
 802940c:	615a      	str	r2, [r3, #20]
}
 802940e:	bf00      	nop
 8029410:	3714      	adds	r7, #20
 8029412:	46bd      	mov	sp, r7
 8029414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029418:	4770      	bx	lr
 802941a:	bf00      	nop
 802941c:	40010000 	.word	0x40010000
 8029420:	40000400 	.word	0x40000400
 8029424:	40000800 	.word	0x40000800
 8029428:	40000c00 	.word	0x40000c00
 802942c:	40010400 	.word	0x40010400
 8029430:	40014000 	.word	0x40014000
 8029434:	40014400 	.word	0x40014400
 8029438:	40014800 	.word	0x40014800
 802943c:	40001800 	.word	0x40001800
 8029440:	40001c00 	.word	0x40001c00
 8029444:	40002000 	.word	0x40002000

08029448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8029448:	b480      	push	{r7}
 802944a:	b087      	sub	sp, #28
 802944c:	af00      	add	r7, sp, #0
 802944e:	60f8      	str	r0, [r7, #12]
 8029450:	60b9      	str	r1, [r7, #8]
 8029452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8029454:	68fb      	ldr	r3, [r7, #12]
 8029456:	6a1b      	ldr	r3, [r3, #32]
 8029458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802945a:	68fb      	ldr	r3, [r7, #12]
 802945c:	6a1b      	ldr	r3, [r3, #32]
 802945e:	f023 0201 	bic.w	r2, r3, #1
 8029462:	68fb      	ldr	r3, [r7, #12]
 8029464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8029466:	68fb      	ldr	r3, [r7, #12]
 8029468:	699b      	ldr	r3, [r3, #24]
 802946a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802946c:	693b      	ldr	r3, [r7, #16]
 802946e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8029474:	687b      	ldr	r3, [r7, #4]
 8029476:	011b      	lsls	r3, r3, #4
 8029478:	693a      	ldr	r2, [r7, #16]
 802947a:	4313      	orrs	r3, r2
 802947c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802947e:	697b      	ldr	r3, [r7, #20]
 8029480:	f023 030a 	bic.w	r3, r3, #10
 8029484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8029486:	697a      	ldr	r2, [r7, #20]
 8029488:	68bb      	ldr	r3, [r7, #8]
 802948a:	4313      	orrs	r3, r2
 802948c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802948e:	68fb      	ldr	r3, [r7, #12]
 8029490:	693a      	ldr	r2, [r7, #16]
 8029492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8029494:	68fb      	ldr	r3, [r7, #12]
 8029496:	697a      	ldr	r2, [r7, #20]
 8029498:	621a      	str	r2, [r3, #32]
}
 802949a:	bf00      	nop
 802949c:	371c      	adds	r7, #28
 802949e:	46bd      	mov	sp, r7
 80294a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294a4:	4770      	bx	lr

080294a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80294a6:	b480      	push	{r7}
 80294a8:	b087      	sub	sp, #28
 80294aa:	af00      	add	r7, sp, #0
 80294ac:	60f8      	str	r0, [r7, #12]
 80294ae:	60b9      	str	r1, [r7, #8]
 80294b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80294b2:	68fb      	ldr	r3, [r7, #12]
 80294b4:	6a1b      	ldr	r3, [r3, #32]
 80294b6:	f023 0210 	bic.w	r2, r3, #16
 80294ba:	68fb      	ldr	r3, [r7, #12]
 80294bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80294be:	68fb      	ldr	r3, [r7, #12]
 80294c0:	699b      	ldr	r3, [r3, #24]
 80294c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80294c4:	68fb      	ldr	r3, [r7, #12]
 80294c6:	6a1b      	ldr	r3, [r3, #32]
 80294c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80294ca:	697b      	ldr	r3, [r7, #20]
 80294cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80294d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80294d2:	687b      	ldr	r3, [r7, #4]
 80294d4:	031b      	lsls	r3, r3, #12
 80294d6:	697a      	ldr	r2, [r7, #20]
 80294d8:	4313      	orrs	r3, r2
 80294da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80294dc:	693b      	ldr	r3, [r7, #16]
 80294de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80294e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80294e4:	68bb      	ldr	r3, [r7, #8]
 80294e6:	011b      	lsls	r3, r3, #4
 80294e8:	693a      	ldr	r2, [r7, #16]
 80294ea:	4313      	orrs	r3, r2
 80294ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80294ee:	68fb      	ldr	r3, [r7, #12]
 80294f0:	697a      	ldr	r2, [r7, #20]
 80294f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80294f4:	68fb      	ldr	r3, [r7, #12]
 80294f6:	693a      	ldr	r2, [r7, #16]
 80294f8:	621a      	str	r2, [r3, #32]
}
 80294fa:	bf00      	nop
 80294fc:	371c      	adds	r7, #28
 80294fe:	46bd      	mov	sp, r7
 8029500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029504:	4770      	bx	lr

08029506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8029506:	b480      	push	{r7}
 8029508:	b085      	sub	sp, #20
 802950a:	af00      	add	r7, sp, #0
 802950c:	6078      	str	r0, [r7, #4]
 802950e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8029510:	687b      	ldr	r3, [r7, #4]
 8029512:	689b      	ldr	r3, [r3, #8]
 8029514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8029516:	68fb      	ldr	r3, [r7, #12]
 8029518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802951c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802951e:	683a      	ldr	r2, [r7, #0]
 8029520:	68fb      	ldr	r3, [r7, #12]
 8029522:	4313      	orrs	r3, r2
 8029524:	f043 0307 	orr.w	r3, r3, #7
 8029528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	68fa      	ldr	r2, [r7, #12]
 802952e:	609a      	str	r2, [r3, #8]
}
 8029530:	bf00      	nop
 8029532:	3714      	adds	r7, #20
 8029534:	46bd      	mov	sp, r7
 8029536:	f85d 7b04 	ldr.w	r7, [sp], #4
 802953a:	4770      	bx	lr

0802953c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802953c:	b480      	push	{r7}
 802953e:	b087      	sub	sp, #28
 8029540:	af00      	add	r7, sp, #0
 8029542:	60f8      	str	r0, [r7, #12]
 8029544:	60b9      	str	r1, [r7, #8]
 8029546:	607a      	str	r2, [r7, #4]
 8029548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802954a:	68fb      	ldr	r3, [r7, #12]
 802954c:	689b      	ldr	r3, [r3, #8]
 802954e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029550:	697b      	ldr	r3, [r7, #20]
 8029552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8029558:	683b      	ldr	r3, [r7, #0]
 802955a:	021a      	lsls	r2, r3, #8
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	431a      	orrs	r2, r3
 8029560:	68bb      	ldr	r3, [r7, #8]
 8029562:	4313      	orrs	r3, r2
 8029564:	697a      	ldr	r2, [r7, #20]
 8029566:	4313      	orrs	r3, r2
 8029568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802956a:	68fb      	ldr	r3, [r7, #12]
 802956c:	697a      	ldr	r2, [r7, #20]
 802956e:	609a      	str	r2, [r3, #8]
}
 8029570:	bf00      	nop
 8029572:	371c      	adds	r7, #28
 8029574:	46bd      	mov	sp, r7
 8029576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802957a:	4770      	bx	lr

0802957c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802957c:	b480      	push	{r7}
 802957e:	b085      	sub	sp, #20
 8029580:	af00      	add	r7, sp, #0
 8029582:	6078      	str	r0, [r7, #4]
 8029584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8029586:	687b      	ldr	r3, [r7, #4]
 8029588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802958c:	2b01      	cmp	r3, #1
 802958e:	d101      	bne.n	8029594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8029590:	2302      	movs	r3, #2
 8029592:	e05a      	b.n	802964a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8029594:	687b      	ldr	r3, [r7, #4]
 8029596:	2201      	movs	r2, #1
 8029598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	2202      	movs	r2, #2
 80295a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80295a4:	687b      	ldr	r3, [r7, #4]
 80295a6:	681b      	ldr	r3, [r3, #0]
 80295a8:	685b      	ldr	r3, [r3, #4]
 80295aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	681b      	ldr	r3, [r3, #0]
 80295b0:	689b      	ldr	r3, [r3, #8]
 80295b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80295b4:	68fb      	ldr	r3, [r7, #12]
 80295b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80295ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80295bc:	683b      	ldr	r3, [r7, #0]
 80295be:	681b      	ldr	r3, [r3, #0]
 80295c0:	68fa      	ldr	r2, [r7, #12]
 80295c2:	4313      	orrs	r3, r2
 80295c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80295c6:	687b      	ldr	r3, [r7, #4]
 80295c8:	681b      	ldr	r3, [r3, #0]
 80295ca:	68fa      	ldr	r2, [r7, #12]
 80295cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80295ce:	687b      	ldr	r3, [r7, #4]
 80295d0:	681b      	ldr	r3, [r3, #0]
 80295d2:	4a21      	ldr	r2, [pc, #132]	; (8029658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80295d4:	4293      	cmp	r3, r2
 80295d6:	d022      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80295d8:	687b      	ldr	r3, [r7, #4]
 80295da:	681b      	ldr	r3, [r3, #0]
 80295dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80295e0:	d01d      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80295e2:	687b      	ldr	r3, [r7, #4]
 80295e4:	681b      	ldr	r3, [r3, #0]
 80295e6:	4a1d      	ldr	r2, [pc, #116]	; (802965c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80295e8:	4293      	cmp	r3, r2
 80295ea:	d018      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80295ec:	687b      	ldr	r3, [r7, #4]
 80295ee:	681b      	ldr	r3, [r3, #0]
 80295f0:	4a1b      	ldr	r2, [pc, #108]	; (8029660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80295f2:	4293      	cmp	r3, r2
 80295f4:	d013      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	681b      	ldr	r3, [r3, #0]
 80295fa:	4a1a      	ldr	r2, [pc, #104]	; (8029664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80295fc:	4293      	cmp	r3, r2
 80295fe:	d00e      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029600:	687b      	ldr	r3, [r7, #4]
 8029602:	681b      	ldr	r3, [r3, #0]
 8029604:	4a18      	ldr	r2, [pc, #96]	; (8029668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8029606:	4293      	cmp	r3, r2
 8029608:	d009      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	681b      	ldr	r3, [r3, #0]
 802960e:	4a17      	ldr	r2, [pc, #92]	; (802966c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8029610:	4293      	cmp	r3, r2
 8029612:	d004      	beq.n	802961e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8029614:	687b      	ldr	r3, [r7, #4]
 8029616:	681b      	ldr	r3, [r3, #0]
 8029618:	4a15      	ldr	r2, [pc, #84]	; (8029670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802961a:	4293      	cmp	r3, r2
 802961c:	d10c      	bne.n	8029638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802961e:	68bb      	ldr	r3, [r7, #8]
 8029620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8029626:	683b      	ldr	r3, [r7, #0]
 8029628:	685b      	ldr	r3, [r3, #4]
 802962a:	68ba      	ldr	r2, [r7, #8]
 802962c:	4313      	orrs	r3, r2
 802962e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8029630:	687b      	ldr	r3, [r7, #4]
 8029632:	681b      	ldr	r3, [r3, #0]
 8029634:	68ba      	ldr	r2, [r7, #8]
 8029636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8029638:	687b      	ldr	r3, [r7, #4]
 802963a:	2201      	movs	r2, #1
 802963c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029640:	687b      	ldr	r3, [r7, #4]
 8029642:	2200      	movs	r2, #0
 8029644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029648:	2300      	movs	r3, #0
}
 802964a:	4618      	mov	r0, r3
 802964c:	3714      	adds	r7, #20
 802964e:	46bd      	mov	sp, r7
 8029650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029654:	4770      	bx	lr
 8029656:	bf00      	nop
 8029658:	40010000 	.word	0x40010000
 802965c:	40000400 	.word	0x40000400
 8029660:	40000800 	.word	0x40000800
 8029664:	40000c00 	.word	0x40000c00
 8029668:	40010400 	.word	0x40010400
 802966c:	40014000 	.word	0x40014000
 8029670:	40001800 	.word	0x40001800

08029674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8029674:	b480      	push	{r7}
 8029676:	b083      	sub	sp, #12
 8029678:	af00      	add	r7, sp, #0
 802967a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802967c:	bf00      	nop
 802967e:	370c      	adds	r7, #12
 8029680:	46bd      	mov	sp, r7
 8029682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029686:	4770      	bx	lr

08029688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8029688:	b480      	push	{r7}
 802968a:	b083      	sub	sp, #12
 802968c:	af00      	add	r7, sp, #0
 802968e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8029690:	bf00      	nop
 8029692:	370c      	adds	r7, #12
 8029694:	46bd      	mov	sp, r7
 8029696:	f85d 7b04 	ldr.w	r7, [sp], #4
 802969a:	4770      	bx	lr

0802969c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 802969c:	b580      	push	{r7, lr}
 802969e:	b082      	sub	sp, #8
 80296a0:	af00      	add	r7, sp, #0
 80296a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80296a4:	687b      	ldr	r3, [r7, #4]
 80296a6:	2b00      	cmp	r3, #0
 80296a8:	d101      	bne.n	80296ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80296aa:	2301      	movs	r3, #1
 80296ac:	e03f      	b.n	802972e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80296b4:	b2db      	uxtb	r3, r3
 80296b6:	2b00      	cmp	r3, #0
 80296b8:	d106      	bne.n	80296c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	2200      	movs	r2, #0
 80296be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80296c2:	6878      	ldr	r0, [r7, #4]
 80296c4:	f7f8 fa46 	bl	8021b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	2224      	movs	r2, #36	; 0x24
 80296cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80296d0:	687b      	ldr	r3, [r7, #4]
 80296d2:	681b      	ldr	r3, [r3, #0]
 80296d4:	68da      	ldr	r2, [r3, #12]
 80296d6:	687b      	ldr	r3, [r7, #4]
 80296d8:	681b      	ldr	r3, [r3, #0]
 80296da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80296de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80296e0:	6878      	ldr	r0, [r7, #4]
 80296e2:	f000 fddf 	bl	802a2a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80296e6:	687b      	ldr	r3, [r7, #4]
 80296e8:	681b      	ldr	r3, [r3, #0]
 80296ea:	691a      	ldr	r2, [r3, #16]
 80296ec:	687b      	ldr	r3, [r7, #4]
 80296ee:	681b      	ldr	r3, [r3, #0]
 80296f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80296f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	695a      	ldr	r2, [r3, #20]
 80296fc:	687b      	ldr	r3, [r7, #4]
 80296fe:	681b      	ldr	r3, [r3, #0]
 8029700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8029704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8029706:	687b      	ldr	r3, [r7, #4]
 8029708:	681b      	ldr	r3, [r3, #0]
 802970a:	68da      	ldr	r2, [r3, #12]
 802970c:	687b      	ldr	r3, [r7, #4]
 802970e:	681b      	ldr	r3, [r3, #0]
 8029710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8029714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029716:	687b      	ldr	r3, [r7, #4]
 8029718:	2200      	movs	r2, #0
 802971a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 802971c:	687b      	ldr	r3, [r7, #4]
 802971e:	2220      	movs	r2, #32
 8029720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	2220      	movs	r2, #32
 8029728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802972c:	2300      	movs	r3, #0
}
 802972e:	4618      	mov	r0, r3
 8029730:	3708      	adds	r7, #8
 8029732:	46bd      	mov	sp, r7
 8029734:	bd80      	pop	{r7, pc}

08029736 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8029736:	b580      	push	{r7, lr}
 8029738:	b08a      	sub	sp, #40	; 0x28
 802973a:	af02      	add	r7, sp, #8
 802973c:	60f8      	str	r0, [r7, #12]
 802973e:	60b9      	str	r1, [r7, #8]
 8029740:	603b      	str	r3, [r7, #0]
 8029742:	4613      	mov	r3, r2
 8029744:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8029746:	2300      	movs	r3, #0
 8029748:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802974a:	68fb      	ldr	r3, [r7, #12]
 802974c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029750:	b2db      	uxtb	r3, r3
 8029752:	2b20      	cmp	r3, #32
 8029754:	d17c      	bne.n	8029850 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8029756:	68bb      	ldr	r3, [r7, #8]
 8029758:	2b00      	cmp	r3, #0
 802975a:	d002      	beq.n	8029762 <HAL_UART_Transmit+0x2c>
 802975c:	88fb      	ldrh	r3, [r7, #6]
 802975e:	2b00      	cmp	r3, #0
 8029760:	d101      	bne.n	8029766 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8029762:	2301      	movs	r3, #1
 8029764:	e075      	b.n	8029852 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029766:	68fb      	ldr	r3, [r7, #12]
 8029768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802976c:	2b01      	cmp	r3, #1
 802976e:	d101      	bne.n	8029774 <HAL_UART_Transmit+0x3e>
 8029770:	2302      	movs	r3, #2
 8029772:	e06e      	b.n	8029852 <HAL_UART_Transmit+0x11c>
 8029774:	68fb      	ldr	r3, [r7, #12]
 8029776:	2201      	movs	r2, #1
 8029778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802977c:	68fb      	ldr	r3, [r7, #12]
 802977e:	2200      	movs	r2, #0
 8029780:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8029782:	68fb      	ldr	r3, [r7, #12]
 8029784:	2221      	movs	r2, #33	; 0x21
 8029786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802978a:	f7f9 ff0b 	bl	80235a4 <HAL_GetTick>
 802978e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8029790:	68fb      	ldr	r3, [r7, #12]
 8029792:	88fa      	ldrh	r2, [r7, #6]
 8029794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8029796:	68fb      	ldr	r3, [r7, #12]
 8029798:	88fa      	ldrh	r2, [r7, #6]
 802979a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802979c:	68fb      	ldr	r3, [r7, #12]
 802979e:	689b      	ldr	r3, [r3, #8]
 80297a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80297a4:	d108      	bne.n	80297b8 <HAL_UART_Transmit+0x82>
 80297a6:	68fb      	ldr	r3, [r7, #12]
 80297a8:	691b      	ldr	r3, [r3, #16]
 80297aa:	2b00      	cmp	r3, #0
 80297ac:	d104      	bne.n	80297b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80297ae:	2300      	movs	r3, #0
 80297b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80297b2:	68bb      	ldr	r3, [r7, #8]
 80297b4:	61bb      	str	r3, [r7, #24]
 80297b6:	e003      	b.n	80297c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80297b8:	68bb      	ldr	r3, [r7, #8]
 80297ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80297bc:	2300      	movs	r3, #0
 80297be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80297c0:	68fb      	ldr	r3, [r7, #12]
 80297c2:	2200      	movs	r2, #0
 80297c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80297c8:	e02a      	b.n	8029820 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80297ca:	683b      	ldr	r3, [r7, #0]
 80297cc:	9300      	str	r3, [sp, #0]
 80297ce:	697b      	ldr	r3, [r7, #20]
 80297d0:	2200      	movs	r2, #0
 80297d2:	2180      	movs	r1, #128	; 0x80
 80297d4:	68f8      	ldr	r0, [r7, #12]
 80297d6:	f000 fb1f 	bl	8029e18 <UART_WaitOnFlagUntilTimeout>
 80297da:	4603      	mov	r3, r0
 80297dc:	2b00      	cmp	r3, #0
 80297de:	d001      	beq.n	80297e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80297e0:	2303      	movs	r3, #3
 80297e2:	e036      	b.n	8029852 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80297e4:	69fb      	ldr	r3, [r7, #28]
 80297e6:	2b00      	cmp	r3, #0
 80297e8:	d10b      	bne.n	8029802 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80297ea:	69bb      	ldr	r3, [r7, #24]
 80297ec:	881b      	ldrh	r3, [r3, #0]
 80297ee:	461a      	mov	r2, r3
 80297f0:	68fb      	ldr	r3, [r7, #12]
 80297f2:	681b      	ldr	r3, [r3, #0]
 80297f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80297f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80297fa:	69bb      	ldr	r3, [r7, #24]
 80297fc:	3302      	adds	r3, #2
 80297fe:	61bb      	str	r3, [r7, #24]
 8029800:	e007      	b.n	8029812 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8029802:	69fb      	ldr	r3, [r7, #28]
 8029804:	781a      	ldrb	r2, [r3, #0]
 8029806:	68fb      	ldr	r3, [r7, #12]
 8029808:	681b      	ldr	r3, [r3, #0]
 802980a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 802980c:	69fb      	ldr	r3, [r7, #28]
 802980e:	3301      	adds	r3, #1
 8029810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8029812:	68fb      	ldr	r3, [r7, #12]
 8029814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029816:	b29b      	uxth	r3, r3
 8029818:	3b01      	subs	r3, #1
 802981a:	b29a      	uxth	r2, r3
 802981c:	68fb      	ldr	r3, [r7, #12]
 802981e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8029820:	68fb      	ldr	r3, [r7, #12]
 8029822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8029824:	b29b      	uxth	r3, r3
 8029826:	2b00      	cmp	r3, #0
 8029828:	d1cf      	bne.n	80297ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802982a:	683b      	ldr	r3, [r7, #0]
 802982c:	9300      	str	r3, [sp, #0]
 802982e:	697b      	ldr	r3, [r7, #20]
 8029830:	2200      	movs	r2, #0
 8029832:	2140      	movs	r1, #64	; 0x40
 8029834:	68f8      	ldr	r0, [r7, #12]
 8029836:	f000 faef 	bl	8029e18 <UART_WaitOnFlagUntilTimeout>
 802983a:	4603      	mov	r3, r0
 802983c:	2b00      	cmp	r3, #0
 802983e:	d001      	beq.n	8029844 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8029840:	2303      	movs	r3, #3
 8029842:	e006      	b.n	8029852 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8029844:	68fb      	ldr	r3, [r7, #12]
 8029846:	2220      	movs	r2, #32
 8029848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 802984c:	2300      	movs	r3, #0
 802984e:	e000      	b.n	8029852 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8029850:	2302      	movs	r3, #2
  }
}
 8029852:	4618      	mov	r0, r3
 8029854:	3720      	adds	r7, #32
 8029856:	46bd      	mov	sp, r7
 8029858:	bd80      	pop	{r7, pc}

0802985a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802985a:	b580      	push	{r7, lr}
 802985c:	b084      	sub	sp, #16
 802985e:	af00      	add	r7, sp, #0
 8029860:	60f8      	str	r0, [r7, #12]
 8029862:	60b9      	str	r1, [r7, #8]
 8029864:	4613      	mov	r3, r2
 8029866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8029868:	68fb      	ldr	r3, [r7, #12]
 802986a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802986e:	b2db      	uxtb	r3, r3
 8029870:	2b20      	cmp	r3, #32
 8029872:	d11d      	bne.n	80298b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8029874:	68bb      	ldr	r3, [r7, #8]
 8029876:	2b00      	cmp	r3, #0
 8029878:	d002      	beq.n	8029880 <HAL_UART_Receive_IT+0x26>
 802987a:	88fb      	ldrh	r3, [r7, #6]
 802987c:	2b00      	cmp	r3, #0
 802987e:	d101      	bne.n	8029884 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8029880:	2301      	movs	r3, #1
 8029882:	e016      	b.n	80298b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8029884:	68fb      	ldr	r3, [r7, #12]
 8029886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802988a:	2b01      	cmp	r3, #1
 802988c:	d101      	bne.n	8029892 <HAL_UART_Receive_IT+0x38>
 802988e:	2302      	movs	r3, #2
 8029890:	e00f      	b.n	80298b2 <HAL_UART_Receive_IT+0x58>
 8029892:	68fb      	ldr	r3, [r7, #12]
 8029894:	2201      	movs	r2, #1
 8029896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802989a:	68fb      	ldr	r3, [r7, #12]
 802989c:	2200      	movs	r2, #0
 802989e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80298a0:	88fb      	ldrh	r3, [r7, #6]
 80298a2:	461a      	mov	r2, r3
 80298a4:	68b9      	ldr	r1, [r7, #8]
 80298a6:	68f8      	ldr	r0, [r7, #12]
 80298a8:	f000 fb24 	bl	8029ef4 <UART_Start_Receive_IT>
 80298ac:	4603      	mov	r3, r0
 80298ae:	e000      	b.n	80298b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80298b0:	2302      	movs	r3, #2
  }
}
 80298b2:	4618      	mov	r0, r3
 80298b4:	3710      	adds	r7, #16
 80298b6:	46bd      	mov	sp, r7
 80298b8:	bd80      	pop	{r7, pc}
	...

080298bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80298bc:	b580      	push	{r7, lr}
 80298be:	b0ba      	sub	sp, #232	; 0xe8
 80298c0:	af00      	add	r7, sp, #0
 80298c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80298c4:	687b      	ldr	r3, [r7, #4]
 80298c6:	681b      	ldr	r3, [r3, #0]
 80298c8:	681b      	ldr	r3, [r3, #0]
 80298ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80298ce:	687b      	ldr	r3, [r7, #4]
 80298d0:	681b      	ldr	r3, [r3, #0]
 80298d2:	68db      	ldr	r3, [r3, #12]
 80298d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80298d8:	687b      	ldr	r3, [r7, #4]
 80298da:	681b      	ldr	r3, [r3, #0]
 80298dc:	695b      	ldr	r3, [r3, #20]
 80298de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80298e2:	2300      	movs	r3, #0
 80298e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80298e8:	2300      	movs	r3, #0
 80298ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80298ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80298f2:	f003 030f 	and.w	r3, r3, #15
 80298f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80298fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80298fe:	2b00      	cmp	r3, #0
 8029900:	d10f      	bne.n	8029922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8029902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029906:	f003 0320 	and.w	r3, r3, #32
 802990a:	2b00      	cmp	r3, #0
 802990c:	d009      	beq.n	8029922 <HAL_UART_IRQHandler+0x66>
 802990e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029912:	f003 0320 	and.w	r3, r3, #32
 8029916:	2b00      	cmp	r3, #0
 8029918:	d003      	beq.n	8029922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 802991a:	6878      	ldr	r0, [r7, #4]
 802991c:	f000 fc07 	bl	802a12e <UART_Receive_IT>
      return;
 8029920:	e256      	b.n	8029dd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8029922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8029926:	2b00      	cmp	r3, #0
 8029928:	f000 80de 	beq.w	8029ae8 <HAL_UART_IRQHandler+0x22c>
 802992c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8029930:	f003 0301 	and.w	r3, r3, #1
 8029934:	2b00      	cmp	r3, #0
 8029936:	d106      	bne.n	8029946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8029938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 802993c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8029940:	2b00      	cmp	r3, #0
 8029942:	f000 80d1 	beq.w	8029ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8029946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802994a:	f003 0301 	and.w	r3, r3, #1
 802994e:	2b00      	cmp	r3, #0
 8029950:	d00b      	beq.n	802996a <HAL_UART_IRQHandler+0xae>
 8029952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802995a:	2b00      	cmp	r3, #0
 802995c:	d005      	beq.n	802996a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802995e:	687b      	ldr	r3, [r7, #4]
 8029960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029962:	f043 0201 	orr.w	r2, r3, #1
 8029966:	687b      	ldr	r3, [r7, #4]
 8029968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802996a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 802996e:	f003 0304 	and.w	r3, r3, #4
 8029972:	2b00      	cmp	r3, #0
 8029974:	d00b      	beq.n	802998e <HAL_UART_IRQHandler+0xd2>
 8029976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802997a:	f003 0301 	and.w	r3, r3, #1
 802997e:	2b00      	cmp	r3, #0
 8029980:	d005      	beq.n	802998e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8029982:	687b      	ldr	r3, [r7, #4]
 8029984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029986:	f043 0202 	orr.w	r2, r3, #2
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029992:	f003 0302 	and.w	r3, r3, #2
 8029996:	2b00      	cmp	r3, #0
 8029998:	d00b      	beq.n	80299b2 <HAL_UART_IRQHandler+0xf6>
 802999a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802999e:	f003 0301 	and.w	r3, r3, #1
 80299a2:	2b00      	cmp	r3, #0
 80299a4:	d005      	beq.n	80299b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80299a6:	687b      	ldr	r3, [r7, #4]
 80299a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299aa:	f043 0204 	orr.w	r2, r3, #4
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80299b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299b6:	f003 0308 	and.w	r3, r3, #8
 80299ba:	2b00      	cmp	r3, #0
 80299bc:	d011      	beq.n	80299e2 <HAL_UART_IRQHandler+0x126>
 80299be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299c2:	f003 0320 	and.w	r3, r3, #32
 80299c6:	2b00      	cmp	r3, #0
 80299c8:	d105      	bne.n	80299d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80299ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80299ce:	f003 0301 	and.w	r3, r3, #1
 80299d2:	2b00      	cmp	r3, #0
 80299d4:	d005      	beq.n	80299e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80299d6:	687b      	ldr	r3, [r7, #4]
 80299d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299da:	f043 0208 	orr.w	r2, r3, #8
 80299de:	687b      	ldr	r3, [r7, #4]
 80299e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80299e2:	687b      	ldr	r3, [r7, #4]
 80299e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80299e6:	2b00      	cmp	r3, #0
 80299e8:	f000 81ed 	beq.w	8029dc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80299ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80299f0:	f003 0320 	and.w	r3, r3, #32
 80299f4:	2b00      	cmp	r3, #0
 80299f6:	d008      	beq.n	8029a0a <HAL_UART_IRQHandler+0x14e>
 80299f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80299fc:	f003 0320 	and.w	r3, r3, #32
 8029a00:	2b00      	cmp	r3, #0
 8029a02:	d002      	beq.n	8029a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8029a04:	6878      	ldr	r0, [r7, #4]
 8029a06:	f000 fb92 	bl	802a12e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8029a0a:	687b      	ldr	r3, [r7, #4]
 8029a0c:	681b      	ldr	r3, [r3, #0]
 8029a0e:	695b      	ldr	r3, [r3, #20]
 8029a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a14:	2b40      	cmp	r3, #64	; 0x40
 8029a16:	bf0c      	ite	eq
 8029a18:	2301      	moveq	r3, #1
 8029a1a:	2300      	movne	r3, #0
 8029a1c:	b2db      	uxtb	r3, r3
 8029a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8029a22:	687b      	ldr	r3, [r7, #4]
 8029a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029a26:	f003 0308 	and.w	r3, r3, #8
 8029a2a:	2b00      	cmp	r3, #0
 8029a2c:	d103      	bne.n	8029a36 <HAL_UART_IRQHandler+0x17a>
 8029a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d04f      	beq.n	8029ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8029a36:	6878      	ldr	r0, [r7, #4]
 8029a38:	f000 fa9a 	bl	8029f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029a3c:	687b      	ldr	r3, [r7, #4]
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	695b      	ldr	r3, [r3, #20]
 8029a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029a46:	2b40      	cmp	r3, #64	; 0x40
 8029a48:	d141      	bne.n	8029ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029a4a:	687b      	ldr	r3, [r7, #4]
 8029a4c:	681b      	ldr	r3, [r3, #0]
 8029a4e:	3314      	adds	r3, #20
 8029a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8029a58:	e853 3f00 	ldrex	r3, [r3]
 8029a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8029a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8029a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8029a6c:	687b      	ldr	r3, [r7, #4]
 8029a6e:	681b      	ldr	r3, [r3, #0]
 8029a70:	3314      	adds	r3, #20
 8029a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8029a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8029a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8029a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8029a86:	e841 2300 	strex	r3, r2, [r1]
 8029a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8029a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8029a92:	2b00      	cmp	r3, #0
 8029a94:	d1d9      	bne.n	8029a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8029a96:	687b      	ldr	r3, [r7, #4]
 8029a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029a9a:	2b00      	cmp	r3, #0
 8029a9c:	d013      	beq.n	8029ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8029a9e:	687b      	ldr	r3, [r7, #4]
 8029aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029aa2:	4a7d      	ldr	r2, [pc, #500]	; (8029c98 <HAL_UART_IRQHandler+0x3dc>)
 8029aa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8029aa6:	687b      	ldr	r3, [r7, #4]
 8029aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029aaa:	4618      	mov	r0, r3
 8029aac:	f7fa f840 	bl	8023b30 <HAL_DMA_Abort_IT>
 8029ab0:	4603      	mov	r3, r0
 8029ab2:	2b00      	cmp	r3, #0
 8029ab4:	d016      	beq.n	8029ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8029ab6:	687b      	ldr	r3, [r7, #4]
 8029ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8029abc:	687a      	ldr	r2, [r7, #4]
 8029abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029ac0:	4610      	mov	r0, r2
 8029ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029ac4:	e00e      	b.n	8029ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8029ac6:	6878      	ldr	r0, [r7, #4]
 8029ac8:	f000 f990 	bl	8029dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029acc:	e00a      	b.n	8029ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8029ace:	6878      	ldr	r0, [r7, #4]
 8029ad0:	f000 f98c 	bl	8029dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029ad4:	e006      	b.n	8029ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8029ad6:	6878      	ldr	r0, [r7, #4]
 8029ad8:	f000 f988 	bl	8029dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	2200      	movs	r2, #0
 8029ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8029ae2:	e170      	b.n	8029dc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029ae4:	bf00      	nop
    return;
 8029ae6:	e16e      	b.n	8029dc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029ae8:	687b      	ldr	r3, [r7, #4]
 8029aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029aec:	2b01      	cmp	r3, #1
 8029aee:	f040 814a 	bne.w	8029d86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8029af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029af6:	f003 0310 	and.w	r3, r3, #16
 8029afa:	2b00      	cmp	r3, #0
 8029afc:	f000 8143 	beq.w	8029d86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8029b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029b04:	f003 0310 	and.w	r3, r3, #16
 8029b08:	2b00      	cmp	r3, #0
 8029b0a:	f000 813c 	beq.w	8029d86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8029b0e:	2300      	movs	r3, #0
 8029b10:	60bb      	str	r3, [r7, #8]
 8029b12:	687b      	ldr	r3, [r7, #4]
 8029b14:	681b      	ldr	r3, [r3, #0]
 8029b16:	681b      	ldr	r3, [r3, #0]
 8029b18:	60bb      	str	r3, [r7, #8]
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	681b      	ldr	r3, [r3, #0]
 8029b1e:	685b      	ldr	r3, [r3, #4]
 8029b20:	60bb      	str	r3, [r7, #8]
 8029b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	681b      	ldr	r3, [r3, #0]
 8029b28:	695b      	ldr	r3, [r3, #20]
 8029b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029b2e:	2b40      	cmp	r3, #64	; 0x40
 8029b30:	f040 80b4 	bne.w	8029c9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8029b34:	687b      	ldr	r3, [r7, #4]
 8029b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b38:	681b      	ldr	r3, [r3, #0]
 8029b3a:	685b      	ldr	r3, [r3, #4]
 8029b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8029b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8029b44:	2b00      	cmp	r3, #0
 8029b46:	f000 8140 	beq.w	8029dca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8029b4a:	687b      	ldr	r3, [r7, #4]
 8029b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8029b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029b52:	429a      	cmp	r2, r3
 8029b54:	f080 8139 	bcs.w	8029dca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8029b58:	687b      	ldr	r3, [r7, #4]
 8029b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8029b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8029b60:	687b      	ldr	r3, [r7, #4]
 8029b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029b64:	69db      	ldr	r3, [r3, #28]
 8029b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8029b6a:	f000 8088 	beq.w	8029c7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8029b6e:	687b      	ldr	r3, [r7, #4]
 8029b70:	681b      	ldr	r3, [r3, #0]
 8029b72:	330c      	adds	r3, #12
 8029b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8029b7c:	e853 3f00 	ldrex	r3, [r3]
 8029b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8029b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8029b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8029b90:	687b      	ldr	r3, [r7, #4]
 8029b92:	681b      	ldr	r3, [r3, #0]
 8029b94:	330c      	adds	r3, #12
 8029b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8029b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8029b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8029ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8029baa:	e841 2300 	strex	r3, r2, [r1]
 8029bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8029bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8029bb6:	2b00      	cmp	r3, #0
 8029bb8:	d1d9      	bne.n	8029b6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029bba:	687b      	ldr	r3, [r7, #4]
 8029bbc:	681b      	ldr	r3, [r3, #0]
 8029bbe:	3314      	adds	r3, #20
 8029bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029bc4:	e853 3f00 	ldrex	r3, [r3]
 8029bc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8029bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029bcc:	f023 0301 	bic.w	r3, r3, #1
 8029bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029bd4:	687b      	ldr	r3, [r7, #4]
 8029bd6:	681b      	ldr	r3, [r3, #0]
 8029bd8:	3314      	adds	r3, #20
 8029bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8029bde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8029be2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8029be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8029bea:	e841 2300 	strex	r3, r2, [r1]
 8029bee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8029bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8029bf2:	2b00      	cmp	r3, #0
 8029bf4:	d1e1      	bne.n	8029bba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8029bf6:	687b      	ldr	r3, [r7, #4]
 8029bf8:	681b      	ldr	r3, [r3, #0]
 8029bfa:	3314      	adds	r3, #20
 8029bfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8029c00:	e853 3f00 	ldrex	r3, [r3]
 8029c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8029c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8029c10:	687b      	ldr	r3, [r7, #4]
 8029c12:	681b      	ldr	r3, [r3, #0]
 8029c14:	3314      	adds	r3, #20
 8029c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8029c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8029c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8029c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029c22:	e841 2300 	strex	r3, r2, [r1]
 8029c26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8029c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8029c2a:	2b00      	cmp	r3, #0
 8029c2c:	d1e3      	bne.n	8029bf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8029c2e:	687b      	ldr	r3, [r7, #4]
 8029c30:	2220      	movs	r2, #32
 8029c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	2200      	movs	r2, #0
 8029c3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029c3c:	687b      	ldr	r3, [r7, #4]
 8029c3e:	681b      	ldr	r3, [r3, #0]
 8029c40:	330c      	adds	r3, #12
 8029c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029c46:	e853 3f00 	ldrex	r3, [r3]
 8029c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8029c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029c4e:	f023 0310 	bic.w	r3, r3, #16
 8029c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8029c56:	687b      	ldr	r3, [r7, #4]
 8029c58:	681b      	ldr	r3, [r3, #0]
 8029c5a:	330c      	adds	r3, #12
 8029c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8029c60:	65ba      	str	r2, [r7, #88]	; 0x58
 8029c62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8029c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029c68:	e841 2300 	strex	r3, r2, [r1]
 8029c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8029c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029c70:	2b00      	cmp	r3, #0
 8029c72:	d1e3      	bne.n	8029c3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8029c74:	687b      	ldr	r3, [r7, #4]
 8029c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029c78:	4618      	mov	r0, r3
 8029c7a:	f7f9 fee9 	bl	8023a50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8029c7e:	687b      	ldr	r3, [r7, #4]
 8029c80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029c82:	687b      	ldr	r3, [r7, #4]
 8029c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029c86:	b29b      	uxth	r3, r3
 8029c88:	1ad3      	subs	r3, r2, r3
 8029c8a:	b29b      	uxth	r3, r3
 8029c8c:	4619      	mov	r1, r3
 8029c8e:	6878      	ldr	r0, [r7, #4]
 8029c90:	f000 f8b6 	bl	8029e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029c94:	e099      	b.n	8029dca <HAL_UART_IRQHandler+0x50e>
 8029c96:	bf00      	nop
 8029c98:	0802a037 	.word	0x0802a037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8029c9c:	687b      	ldr	r3, [r7, #4]
 8029c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8029ca0:	687b      	ldr	r3, [r7, #4]
 8029ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029ca4:	b29b      	uxth	r3, r3
 8029ca6:	1ad3      	subs	r3, r2, r3
 8029ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8029cac:	687b      	ldr	r3, [r7, #4]
 8029cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8029cb0:	b29b      	uxth	r3, r3
 8029cb2:	2b00      	cmp	r3, #0
 8029cb4:	f000 808b 	beq.w	8029dce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8029cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029cbc:	2b00      	cmp	r3, #0
 8029cbe:	f000 8086 	beq.w	8029dce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	681b      	ldr	r3, [r3, #0]
 8029cc6:	330c      	adds	r3, #12
 8029cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029ccc:	e853 3f00 	ldrex	r3, [r3]
 8029cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8029cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8029cdc:	687b      	ldr	r3, [r7, #4]
 8029cde:	681b      	ldr	r3, [r3, #0]
 8029ce0:	330c      	adds	r3, #12
 8029ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8029ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8029ce8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8029cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029cee:	e841 2300 	strex	r3, r2, [r1]
 8029cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8029cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029cf6:	2b00      	cmp	r3, #0
 8029cf8:	d1e3      	bne.n	8029cc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029cfa:	687b      	ldr	r3, [r7, #4]
 8029cfc:	681b      	ldr	r3, [r3, #0]
 8029cfe:	3314      	adds	r3, #20
 8029d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029d04:	e853 3f00 	ldrex	r3, [r3]
 8029d08:	623b      	str	r3, [r7, #32]
   return(result);
 8029d0a:	6a3b      	ldr	r3, [r7, #32]
 8029d0c:	f023 0301 	bic.w	r3, r3, #1
 8029d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8029d14:	687b      	ldr	r3, [r7, #4]
 8029d16:	681b      	ldr	r3, [r3, #0]
 8029d18:	3314      	adds	r3, #20
 8029d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8029d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8029d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8029d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029d26:	e841 2300 	strex	r3, r2, [r1]
 8029d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8029d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029d2e:	2b00      	cmp	r3, #0
 8029d30:	d1e3      	bne.n	8029cfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	2220      	movs	r2, #32
 8029d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	2200      	movs	r2, #0
 8029d3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029d40:	687b      	ldr	r3, [r7, #4]
 8029d42:	681b      	ldr	r3, [r3, #0]
 8029d44:	330c      	adds	r3, #12
 8029d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029d48:	693b      	ldr	r3, [r7, #16]
 8029d4a:	e853 3f00 	ldrex	r3, [r3]
 8029d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8029d50:	68fb      	ldr	r3, [r7, #12]
 8029d52:	f023 0310 	bic.w	r3, r3, #16
 8029d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	681b      	ldr	r3, [r3, #0]
 8029d5e:	330c      	adds	r3, #12
 8029d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8029d64:	61fa      	str	r2, [r7, #28]
 8029d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029d68:	69b9      	ldr	r1, [r7, #24]
 8029d6a:	69fa      	ldr	r2, [r7, #28]
 8029d6c:	e841 2300 	strex	r3, r2, [r1]
 8029d70:	617b      	str	r3, [r7, #20]
   return(result);
 8029d72:	697b      	ldr	r3, [r7, #20]
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	d1e3      	bne.n	8029d40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8029d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8029d7c:	4619      	mov	r1, r3
 8029d7e:	6878      	ldr	r0, [r7, #4]
 8029d80:	f000 f83e 	bl	8029e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8029d84:	e023      	b.n	8029dce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8029d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029d8e:	2b00      	cmp	r3, #0
 8029d90:	d009      	beq.n	8029da6 <HAL_UART_IRQHandler+0x4ea>
 8029d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029d9a:	2b00      	cmp	r3, #0
 8029d9c:	d003      	beq.n	8029da6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8029d9e:	6878      	ldr	r0, [r7, #4]
 8029da0:	f000 f95d 	bl	802a05e <UART_Transmit_IT>
    return;
 8029da4:	e014      	b.n	8029dd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8029da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8029daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	d00e      	beq.n	8029dd0 <HAL_UART_IRQHandler+0x514>
 8029db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8029db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029dba:	2b00      	cmp	r3, #0
 8029dbc:	d008      	beq.n	8029dd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8029dbe:	6878      	ldr	r0, [r7, #4]
 8029dc0:	f000 f99d 	bl	802a0fe <UART_EndTransmit_IT>
    return;
 8029dc4:	e004      	b.n	8029dd0 <HAL_UART_IRQHandler+0x514>
    return;
 8029dc6:	bf00      	nop
 8029dc8:	e002      	b.n	8029dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8029dca:	bf00      	nop
 8029dcc:	e000      	b.n	8029dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8029dce:	bf00      	nop
  }
}
 8029dd0:	37e8      	adds	r7, #232	; 0xe8
 8029dd2:	46bd      	mov	sp, r7
 8029dd4:	bd80      	pop	{r7, pc}
 8029dd6:	bf00      	nop

08029dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8029dd8:	b480      	push	{r7}
 8029dda:	b083      	sub	sp, #12
 8029ddc:	af00      	add	r7, sp, #0
 8029dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8029de0:	bf00      	nop
 8029de2:	370c      	adds	r7, #12
 8029de4:	46bd      	mov	sp, r7
 8029de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dea:	4770      	bx	lr

08029dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8029dec:	b480      	push	{r7}
 8029dee:	b083      	sub	sp, #12
 8029df0:	af00      	add	r7, sp, #0
 8029df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8029df4:	bf00      	nop
 8029df6:	370c      	adds	r7, #12
 8029df8:	46bd      	mov	sp, r7
 8029dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dfe:	4770      	bx	lr

08029e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8029e00:	b480      	push	{r7}
 8029e02:	b083      	sub	sp, #12
 8029e04:	af00      	add	r7, sp, #0
 8029e06:	6078      	str	r0, [r7, #4]
 8029e08:	460b      	mov	r3, r1
 8029e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8029e0c:	bf00      	nop
 8029e0e:	370c      	adds	r7, #12
 8029e10:	46bd      	mov	sp, r7
 8029e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e16:	4770      	bx	lr

08029e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8029e18:	b580      	push	{r7, lr}
 8029e1a:	b090      	sub	sp, #64	; 0x40
 8029e1c:	af00      	add	r7, sp, #0
 8029e1e:	60f8      	str	r0, [r7, #12]
 8029e20:	60b9      	str	r1, [r7, #8]
 8029e22:	603b      	str	r3, [r7, #0]
 8029e24:	4613      	mov	r3, r2
 8029e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029e28:	e050      	b.n	8029ecc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8029e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029e30:	d04c      	beq.n	8029ecc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8029e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029e34:	2b00      	cmp	r3, #0
 8029e36:	d007      	beq.n	8029e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8029e38:	f7f9 fbb4 	bl	80235a4 <HAL_GetTick>
 8029e3c:	4602      	mov	r2, r0
 8029e3e:	683b      	ldr	r3, [r7, #0]
 8029e40:	1ad3      	subs	r3, r2, r3
 8029e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029e44:	429a      	cmp	r2, r3
 8029e46:	d241      	bcs.n	8029ecc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8029e48:	68fb      	ldr	r3, [r7, #12]
 8029e4a:	681b      	ldr	r3, [r3, #0]
 8029e4c:	330c      	adds	r3, #12
 8029e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029e52:	e853 3f00 	ldrex	r3, [r3]
 8029e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8029e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8029e60:	68fb      	ldr	r3, [r7, #12]
 8029e62:	681b      	ldr	r3, [r3, #0]
 8029e64:	330c      	adds	r3, #12
 8029e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029e68:	637a      	str	r2, [r7, #52]	; 0x34
 8029e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8029e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029e70:	e841 2300 	strex	r3, r2, [r1]
 8029e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8029e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029e78:	2b00      	cmp	r3, #0
 8029e7a:	d1e5      	bne.n	8029e48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029e7c:	68fb      	ldr	r3, [r7, #12]
 8029e7e:	681b      	ldr	r3, [r3, #0]
 8029e80:	3314      	adds	r3, #20
 8029e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029e84:	697b      	ldr	r3, [r7, #20]
 8029e86:	e853 3f00 	ldrex	r3, [r3]
 8029e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8029e8c:	693b      	ldr	r3, [r7, #16]
 8029e8e:	f023 0301 	bic.w	r3, r3, #1
 8029e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8029e94:	68fb      	ldr	r3, [r7, #12]
 8029e96:	681b      	ldr	r3, [r3, #0]
 8029e98:	3314      	adds	r3, #20
 8029e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029e9c:	623a      	str	r2, [r7, #32]
 8029e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029ea0:	69f9      	ldr	r1, [r7, #28]
 8029ea2:	6a3a      	ldr	r2, [r7, #32]
 8029ea4:	e841 2300 	strex	r3, r2, [r1]
 8029ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8029eaa:	69bb      	ldr	r3, [r7, #24]
 8029eac:	2b00      	cmp	r3, #0
 8029eae:	d1e5      	bne.n	8029e7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8029eb0:	68fb      	ldr	r3, [r7, #12]
 8029eb2:	2220      	movs	r2, #32
 8029eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8029eb8:	68fb      	ldr	r3, [r7, #12]
 8029eba:	2220      	movs	r2, #32
 8029ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8029ec0:	68fb      	ldr	r3, [r7, #12]
 8029ec2:	2200      	movs	r2, #0
 8029ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8029ec8:	2303      	movs	r3, #3
 8029eca:	e00f      	b.n	8029eec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8029ecc:	68fb      	ldr	r3, [r7, #12]
 8029ece:	681b      	ldr	r3, [r3, #0]
 8029ed0:	681a      	ldr	r2, [r3, #0]
 8029ed2:	68bb      	ldr	r3, [r7, #8]
 8029ed4:	4013      	ands	r3, r2
 8029ed6:	68ba      	ldr	r2, [r7, #8]
 8029ed8:	429a      	cmp	r2, r3
 8029eda:	bf0c      	ite	eq
 8029edc:	2301      	moveq	r3, #1
 8029ede:	2300      	movne	r3, #0
 8029ee0:	b2db      	uxtb	r3, r3
 8029ee2:	461a      	mov	r2, r3
 8029ee4:	79fb      	ldrb	r3, [r7, #7]
 8029ee6:	429a      	cmp	r2, r3
 8029ee8:	d09f      	beq.n	8029e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8029eea:	2300      	movs	r3, #0
}
 8029eec:	4618      	mov	r0, r3
 8029eee:	3740      	adds	r7, #64	; 0x40
 8029ef0:	46bd      	mov	sp, r7
 8029ef2:	bd80      	pop	{r7, pc}

08029ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8029ef4:	b480      	push	{r7}
 8029ef6:	b085      	sub	sp, #20
 8029ef8:	af00      	add	r7, sp, #0
 8029efa:	60f8      	str	r0, [r7, #12]
 8029efc:	60b9      	str	r1, [r7, #8]
 8029efe:	4613      	mov	r3, r2
 8029f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8029f02:	68fb      	ldr	r3, [r7, #12]
 8029f04:	68ba      	ldr	r2, [r7, #8]
 8029f06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8029f08:	68fb      	ldr	r3, [r7, #12]
 8029f0a:	88fa      	ldrh	r2, [r7, #6]
 8029f0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8029f0e:	68fb      	ldr	r3, [r7, #12]
 8029f10:	88fa      	ldrh	r2, [r7, #6]
 8029f12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8029f14:	68fb      	ldr	r3, [r7, #12]
 8029f16:	2200      	movs	r2, #0
 8029f18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8029f1a:	68fb      	ldr	r3, [r7, #12]
 8029f1c:	2222      	movs	r2, #34	; 0x22
 8029f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8029f22:	68fb      	ldr	r3, [r7, #12]
 8029f24:	2200      	movs	r2, #0
 8029f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8029f2a:	68fb      	ldr	r3, [r7, #12]
 8029f2c:	691b      	ldr	r3, [r3, #16]
 8029f2e:	2b00      	cmp	r3, #0
 8029f30:	d007      	beq.n	8029f42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8029f32:	68fb      	ldr	r3, [r7, #12]
 8029f34:	681b      	ldr	r3, [r3, #0]
 8029f36:	68da      	ldr	r2, [r3, #12]
 8029f38:	68fb      	ldr	r3, [r7, #12]
 8029f3a:	681b      	ldr	r3, [r3, #0]
 8029f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8029f40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8029f42:	68fb      	ldr	r3, [r7, #12]
 8029f44:	681b      	ldr	r3, [r3, #0]
 8029f46:	695a      	ldr	r2, [r3, #20]
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	681b      	ldr	r3, [r3, #0]
 8029f4c:	f042 0201 	orr.w	r2, r2, #1
 8029f50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8029f52:	68fb      	ldr	r3, [r7, #12]
 8029f54:	681b      	ldr	r3, [r3, #0]
 8029f56:	68da      	ldr	r2, [r3, #12]
 8029f58:	68fb      	ldr	r3, [r7, #12]
 8029f5a:	681b      	ldr	r3, [r3, #0]
 8029f5c:	f042 0220 	orr.w	r2, r2, #32
 8029f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8029f62:	2300      	movs	r3, #0
}
 8029f64:	4618      	mov	r0, r3
 8029f66:	3714      	adds	r7, #20
 8029f68:	46bd      	mov	sp, r7
 8029f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f6e:	4770      	bx	lr

08029f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8029f70:	b480      	push	{r7}
 8029f72:	b095      	sub	sp, #84	; 0x54
 8029f74:	af00      	add	r7, sp, #0
 8029f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8029f78:	687b      	ldr	r3, [r7, #4]
 8029f7a:	681b      	ldr	r3, [r3, #0]
 8029f7c:	330c      	adds	r3, #12
 8029f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029f82:	e853 3f00 	ldrex	r3, [r3]
 8029f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8029f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8029f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029f90:	687b      	ldr	r3, [r7, #4]
 8029f92:	681b      	ldr	r3, [r3, #0]
 8029f94:	330c      	adds	r3, #12
 8029f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029f98:	643a      	str	r2, [r7, #64]	; 0x40
 8029f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8029f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029fa0:	e841 2300 	strex	r3, r2, [r1]
 8029fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8029fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029fa8:	2b00      	cmp	r3, #0
 8029faa:	d1e5      	bne.n	8029f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	681b      	ldr	r3, [r3, #0]
 8029fb0:	3314      	adds	r3, #20
 8029fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029fb4:	6a3b      	ldr	r3, [r7, #32]
 8029fb6:	e853 3f00 	ldrex	r3, [r3]
 8029fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8029fbc:	69fb      	ldr	r3, [r7, #28]
 8029fbe:	f023 0301 	bic.w	r3, r3, #1
 8029fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8029fc4:	687b      	ldr	r3, [r7, #4]
 8029fc6:	681b      	ldr	r3, [r3, #0]
 8029fc8:	3314      	adds	r3, #20
 8029fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8029fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8029fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8029fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029fd4:	e841 2300 	strex	r3, r2, [r1]
 8029fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8029fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029fdc:	2b00      	cmp	r3, #0
 8029fde:	d1e5      	bne.n	8029fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8029fe0:	687b      	ldr	r3, [r7, #4]
 8029fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029fe4:	2b01      	cmp	r3, #1
 8029fe6:	d119      	bne.n	802a01c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	681b      	ldr	r3, [r3, #0]
 8029fec:	330c      	adds	r3, #12
 8029fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8029ff0:	68fb      	ldr	r3, [r7, #12]
 8029ff2:	e853 3f00 	ldrex	r3, [r3]
 8029ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8029ff8:	68bb      	ldr	r3, [r7, #8]
 8029ffa:	f023 0310 	bic.w	r3, r3, #16
 8029ffe:	647b      	str	r3, [r7, #68]	; 0x44
 802a000:	687b      	ldr	r3, [r7, #4]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	330c      	adds	r3, #12
 802a006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802a008:	61ba      	str	r2, [r7, #24]
 802a00a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a00c:	6979      	ldr	r1, [r7, #20]
 802a00e:	69ba      	ldr	r2, [r7, #24]
 802a010:	e841 2300 	strex	r3, r2, [r1]
 802a014:	613b      	str	r3, [r7, #16]
   return(result);
 802a016:	693b      	ldr	r3, [r7, #16]
 802a018:	2b00      	cmp	r3, #0
 802a01a:	d1e5      	bne.n	8029fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802a01c:	687b      	ldr	r3, [r7, #4]
 802a01e:	2220      	movs	r2, #32
 802a020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a024:	687b      	ldr	r3, [r7, #4]
 802a026:	2200      	movs	r2, #0
 802a028:	631a      	str	r2, [r3, #48]	; 0x30
}
 802a02a:	bf00      	nop
 802a02c:	3754      	adds	r7, #84	; 0x54
 802a02e:	46bd      	mov	sp, r7
 802a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a034:	4770      	bx	lr

0802a036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802a036:	b580      	push	{r7, lr}
 802a038:	b084      	sub	sp, #16
 802a03a:	af00      	add	r7, sp, #0
 802a03c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802a03e:	687b      	ldr	r3, [r7, #4]
 802a040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 802a044:	68fb      	ldr	r3, [r7, #12]
 802a046:	2200      	movs	r2, #0
 802a048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802a04a:	68fb      	ldr	r3, [r7, #12]
 802a04c:	2200      	movs	r2, #0
 802a04e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802a050:	68f8      	ldr	r0, [r7, #12]
 802a052:	f7ff fecb 	bl	8029dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802a056:	bf00      	nop
 802a058:	3710      	adds	r7, #16
 802a05a:	46bd      	mov	sp, r7
 802a05c:	bd80      	pop	{r7, pc}

0802a05e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 802a05e:	b480      	push	{r7}
 802a060:	b085      	sub	sp, #20
 802a062:	af00      	add	r7, sp, #0
 802a064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802a06c:	b2db      	uxtb	r3, r3
 802a06e:	2b21      	cmp	r3, #33	; 0x21
 802a070:	d13e      	bne.n	802a0f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a072:	687b      	ldr	r3, [r7, #4]
 802a074:	689b      	ldr	r3, [r3, #8]
 802a076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a07a:	d114      	bne.n	802a0a6 <UART_Transmit_IT+0x48>
 802a07c:	687b      	ldr	r3, [r7, #4]
 802a07e:	691b      	ldr	r3, [r3, #16]
 802a080:	2b00      	cmp	r3, #0
 802a082:	d110      	bne.n	802a0a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 802a084:	687b      	ldr	r3, [r7, #4]
 802a086:	6a1b      	ldr	r3, [r3, #32]
 802a088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 802a08a:	68fb      	ldr	r3, [r7, #12]
 802a08c:	881b      	ldrh	r3, [r3, #0]
 802a08e:	461a      	mov	r2, r3
 802a090:	687b      	ldr	r3, [r7, #4]
 802a092:	681b      	ldr	r3, [r3, #0]
 802a094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802a098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	6a1b      	ldr	r3, [r3, #32]
 802a09e:	1c9a      	adds	r2, r3, #2
 802a0a0:	687b      	ldr	r3, [r7, #4]
 802a0a2:	621a      	str	r2, [r3, #32]
 802a0a4:	e008      	b.n	802a0b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802a0a6:	687b      	ldr	r3, [r7, #4]
 802a0a8:	6a1b      	ldr	r3, [r3, #32]
 802a0aa:	1c59      	adds	r1, r3, #1
 802a0ac:	687a      	ldr	r2, [r7, #4]
 802a0ae:	6211      	str	r1, [r2, #32]
 802a0b0:	781a      	ldrb	r2, [r3, #0]
 802a0b2:	687b      	ldr	r3, [r7, #4]
 802a0b4:	681b      	ldr	r3, [r3, #0]
 802a0b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802a0bc:	b29b      	uxth	r3, r3
 802a0be:	3b01      	subs	r3, #1
 802a0c0:	b29b      	uxth	r3, r3
 802a0c2:	687a      	ldr	r2, [r7, #4]
 802a0c4:	4619      	mov	r1, r3
 802a0c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 802a0c8:	2b00      	cmp	r3, #0
 802a0ca:	d10f      	bne.n	802a0ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802a0cc:	687b      	ldr	r3, [r7, #4]
 802a0ce:	681b      	ldr	r3, [r3, #0]
 802a0d0:	68da      	ldr	r2, [r3, #12]
 802a0d2:	687b      	ldr	r3, [r7, #4]
 802a0d4:	681b      	ldr	r3, [r3, #0]
 802a0d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802a0da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802a0dc:	687b      	ldr	r3, [r7, #4]
 802a0de:	681b      	ldr	r3, [r3, #0]
 802a0e0:	68da      	ldr	r2, [r3, #12]
 802a0e2:	687b      	ldr	r3, [r7, #4]
 802a0e4:	681b      	ldr	r3, [r3, #0]
 802a0e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802a0ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802a0ec:	2300      	movs	r3, #0
 802a0ee:	e000      	b.n	802a0f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 802a0f0:	2302      	movs	r3, #2
  }
}
 802a0f2:	4618      	mov	r0, r3
 802a0f4:	3714      	adds	r7, #20
 802a0f6:	46bd      	mov	sp, r7
 802a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0fc:	4770      	bx	lr

0802a0fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802a0fe:	b580      	push	{r7, lr}
 802a100:	b082      	sub	sp, #8
 802a102:	af00      	add	r7, sp, #0
 802a104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802a106:	687b      	ldr	r3, [r7, #4]
 802a108:	681b      	ldr	r3, [r3, #0]
 802a10a:	68da      	ldr	r2, [r3, #12]
 802a10c:	687b      	ldr	r3, [r7, #4]
 802a10e:	681b      	ldr	r3, [r3, #0]
 802a110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802a114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	2220      	movs	r2, #32
 802a11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 802a11e:	6878      	ldr	r0, [r7, #4]
 802a120:	f7ff fe5a 	bl	8029dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 802a124:	2300      	movs	r3, #0
}
 802a126:	4618      	mov	r0, r3
 802a128:	3708      	adds	r7, #8
 802a12a:	46bd      	mov	sp, r7
 802a12c:	bd80      	pop	{r7, pc}

0802a12e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 802a12e:	b580      	push	{r7, lr}
 802a130:	b08c      	sub	sp, #48	; 0x30
 802a132:	af00      	add	r7, sp, #0
 802a134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802a136:	687b      	ldr	r3, [r7, #4]
 802a138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 802a13c:	b2db      	uxtb	r3, r3
 802a13e:	2b22      	cmp	r3, #34	; 0x22
 802a140:	f040 80ab 	bne.w	802a29a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802a144:	687b      	ldr	r3, [r7, #4]
 802a146:	689b      	ldr	r3, [r3, #8]
 802a148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a14c:	d117      	bne.n	802a17e <UART_Receive_IT+0x50>
 802a14e:	687b      	ldr	r3, [r7, #4]
 802a150:	691b      	ldr	r3, [r3, #16]
 802a152:	2b00      	cmp	r3, #0
 802a154:	d113      	bne.n	802a17e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 802a156:	2300      	movs	r3, #0
 802a158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 802a15a:	687b      	ldr	r3, [r7, #4]
 802a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a15e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	681b      	ldr	r3, [r3, #0]
 802a164:	685b      	ldr	r3, [r3, #4]
 802a166:	b29b      	uxth	r3, r3
 802a168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802a16c:	b29a      	uxth	r2, r3
 802a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 802a172:	687b      	ldr	r3, [r7, #4]
 802a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a176:	1c9a      	adds	r2, r3, #2
 802a178:	687b      	ldr	r3, [r7, #4]
 802a17a:	629a      	str	r2, [r3, #40]	; 0x28
 802a17c:	e026      	b.n	802a1cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 802a17e:	687b      	ldr	r3, [r7, #4]
 802a180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 802a184:	2300      	movs	r3, #0
 802a186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 802a188:	687b      	ldr	r3, [r7, #4]
 802a18a:	689b      	ldr	r3, [r3, #8]
 802a18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a190:	d007      	beq.n	802a1a2 <UART_Receive_IT+0x74>
 802a192:	687b      	ldr	r3, [r7, #4]
 802a194:	689b      	ldr	r3, [r3, #8]
 802a196:	2b00      	cmp	r3, #0
 802a198:	d10a      	bne.n	802a1b0 <UART_Receive_IT+0x82>
 802a19a:	687b      	ldr	r3, [r7, #4]
 802a19c:	691b      	ldr	r3, [r3, #16]
 802a19e:	2b00      	cmp	r3, #0
 802a1a0:	d106      	bne.n	802a1b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	681b      	ldr	r3, [r3, #0]
 802a1a6:	685b      	ldr	r3, [r3, #4]
 802a1a8:	b2da      	uxtb	r2, r3
 802a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a1ac:	701a      	strb	r2, [r3, #0]
 802a1ae:	e008      	b.n	802a1c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 802a1b0:	687b      	ldr	r3, [r7, #4]
 802a1b2:	681b      	ldr	r3, [r3, #0]
 802a1b4:	685b      	ldr	r3, [r3, #4]
 802a1b6:	b2db      	uxtb	r3, r3
 802a1b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802a1bc:	b2da      	uxtb	r2, r3
 802a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802a1c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 802a1c2:	687b      	ldr	r3, [r7, #4]
 802a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a1c6:	1c5a      	adds	r2, r3, #1
 802a1c8:	687b      	ldr	r3, [r7, #4]
 802a1ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802a1d0:	b29b      	uxth	r3, r3
 802a1d2:	3b01      	subs	r3, #1
 802a1d4:	b29b      	uxth	r3, r3
 802a1d6:	687a      	ldr	r2, [r7, #4]
 802a1d8:	4619      	mov	r1, r3
 802a1da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802a1dc:	2b00      	cmp	r3, #0
 802a1de:	d15a      	bne.n	802a296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802a1e0:	687b      	ldr	r3, [r7, #4]
 802a1e2:	681b      	ldr	r3, [r3, #0]
 802a1e4:	68da      	ldr	r2, [r3, #12]
 802a1e6:	687b      	ldr	r3, [r7, #4]
 802a1e8:	681b      	ldr	r3, [r3, #0]
 802a1ea:	f022 0220 	bic.w	r2, r2, #32
 802a1ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802a1f0:	687b      	ldr	r3, [r7, #4]
 802a1f2:	681b      	ldr	r3, [r3, #0]
 802a1f4:	68da      	ldr	r2, [r3, #12]
 802a1f6:	687b      	ldr	r3, [r7, #4]
 802a1f8:	681b      	ldr	r3, [r3, #0]
 802a1fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802a1fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802a200:	687b      	ldr	r3, [r7, #4]
 802a202:	681b      	ldr	r3, [r3, #0]
 802a204:	695a      	ldr	r2, [r3, #20]
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	681b      	ldr	r3, [r3, #0]
 802a20a:	f022 0201 	bic.w	r2, r2, #1
 802a20e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802a210:	687b      	ldr	r3, [r7, #4]
 802a212:	2220      	movs	r2, #32
 802a214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802a218:	687b      	ldr	r3, [r7, #4]
 802a21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a21c:	2b01      	cmp	r3, #1
 802a21e:	d135      	bne.n	802a28c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802a220:	687b      	ldr	r3, [r7, #4]
 802a222:	2200      	movs	r2, #0
 802a224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802a226:	687b      	ldr	r3, [r7, #4]
 802a228:	681b      	ldr	r3, [r3, #0]
 802a22a:	330c      	adds	r3, #12
 802a22c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802a22e:	697b      	ldr	r3, [r7, #20]
 802a230:	e853 3f00 	ldrex	r3, [r3]
 802a234:	613b      	str	r3, [r7, #16]
   return(result);
 802a236:	693b      	ldr	r3, [r7, #16]
 802a238:	f023 0310 	bic.w	r3, r3, #16
 802a23c:	627b      	str	r3, [r7, #36]	; 0x24
 802a23e:	687b      	ldr	r3, [r7, #4]
 802a240:	681b      	ldr	r3, [r3, #0]
 802a242:	330c      	adds	r3, #12
 802a244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a246:	623a      	str	r2, [r7, #32]
 802a248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802a24a:	69f9      	ldr	r1, [r7, #28]
 802a24c:	6a3a      	ldr	r2, [r7, #32]
 802a24e:	e841 2300 	strex	r3, r2, [r1]
 802a252:	61bb      	str	r3, [r7, #24]
   return(result);
 802a254:	69bb      	ldr	r3, [r7, #24]
 802a256:	2b00      	cmp	r3, #0
 802a258:	d1e5      	bne.n	802a226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 802a25a:	687b      	ldr	r3, [r7, #4]
 802a25c:	681b      	ldr	r3, [r3, #0]
 802a25e:	681b      	ldr	r3, [r3, #0]
 802a260:	f003 0310 	and.w	r3, r3, #16
 802a264:	2b10      	cmp	r3, #16
 802a266:	d10a      	bne.n	802a27e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 802a268:	2300      	movs	r3, #0
 802a26a:	60fb      	str	r3, [r7, #12]
 802a26c:	687b      	ldr	r3, [r7, #4]
 802a26e:	681b      	ldr	r3, [r3, #0]
 802a270:	681b      	ldr	r3, [r3, #0]
 802a272:	60fb      	str	r3, [r7, #12]
 802a274:	687b      	ldr	r3, [r7, #4]
 802a276:	681b      	ldr	r3, [r3, #0]
 802a278:	685b      	ldr	r3, [r3, #4]
 802a27a:	60fb      	str	r3, [r7, #12]
 802a27c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802a27e:	687b      	ldr	r3, [r7, #4]
 802a280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 802a282:	4619      	mov	r1, r3
 802a284:	6878      	ldr	r0, [r7, #4]
 802a286:	f7ff fdbb 	bl	8029e00 <HAL_UARTEx_RxEventCallback>
 802a28a:	e002      	b.n	802a292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 802a28c:	6878      	ldr	r0, [r7, #4]
 802a28e:	f7f6 fe57 	bl	8020f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 802a292:	2300      	movs	r3, #0
 802a294:	e002      	b.n	802a29c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 802a296:	2300      	movs	r3, #0
 802a298:	e000      	b.n	802a29c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 802a29a:	2302      	movs	r3, #2
  }
}
 802a29c:	4618      	mov	r0, r3
 802a29e:	3730      	adds	r7, #48	; 0x30
 802a2a0:	46bd      	mov	sp, r7
 802a2a2:	bd80      	pop	{r7, pc}

0802a2a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 802a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802a2a8:	b0c0      	sub	sp, #256	; 0x100
 802a2aa:	af00      	add	r7, sp, #0
 802a2ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 802a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2b4:	681b      	ldr	r3, [r3, #0]
 802a2b6:	691b      	ldr	r3, [r3, #16]
 802a2b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 802a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2c0:	68d9      	ldr	r1, [r3, #12]
 802a2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2c6:	681a      	ldr	r2, [r3, #0]
 802a2c8:	ea40 0301 	orr.w	r3, r0, r1
 802a2cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 802a2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2d2:	689a      	ldr	r2, [r3, #8]
 802a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2d8:	691b      	ldr	r3, [r3, #16]
 802a2da:	431a      	orrs	r2, r3
 802a2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2e0:	695b      	ldr	r3, [r3, #20]
 802a2e2:	431a      	orrs	r2, r3
 802a2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2e8:	69db      	ldr	r3, [r3, #28]
 802a2ea:	4313      	orrs	r3, r2
 802a2ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 802a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a2f4:	681b      	ldr	r3, [r3, #0]
 802a2f6:	68db      	ldr	r3, [r3, #12]
 802a2f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 802a2fc:	f021 010c 	bic.w	r1, r1, #12
 802a300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a304:	681a      	ldr	r2, [r3, #0]
 802a306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802a30a:	430b      	orrs	r3, r1
 802a30c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 802a30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a312:	681b      	ldr	r3, [r3, #0]
 802a314:	695b      	ldr	r3, [r3, #20]
 802a316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802a31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a31e:	6999      	ldr	r1, [r3, #24]
 802a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a324:	681a      	ldr	r2, [r3, #0]
 802a326:	ea40 0301 	orr.w	r3, r0, r1
 802a32a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802a32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a330:	681a      	ldr	r2, [r3, #0]
 802a332:	4b8f      	ldr	r3, [pc, #572]	; (802a570 <UART_SetConfig+0x2cc>)
 802a334:	429a      	cmp	r2, r3
 802a336:	d005      	beq.n	802a344 <UART_SetConfig+0xa0>
 802a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a33c:	681a      	ldr	r2, [r3, #0]
 802a33e:	4b8d      	ldr	r3, [pc, #564]	; (802a574 <UART_SetConfig+0x2d0>)
 802a340:	429a      	cmp	r2, r3
 802a342:	d104      	bne.n	802a34e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 802a344:	f7fd fcb2 	bl	8027cac <HAL_RCC_GetPCLK2Freq>
 802a348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 802a34c:	e003      	b.n	802a356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 802a34e:	f7fd fc99 	bl	8027c84 <HAL_RCC_GetPCLK1Freq>
 802a352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802a356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a35a:	69db      	ldr	r3, [r3, #28]
 802a35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802a360:	f040 810c 	bne.w	802a57c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802a364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a368:	2200      	movs	r2, #0
 802a36a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 802a36e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 802a372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 802a376:	4622      	mov	r2, r4
 802a378:	462b      	mov	r3, r5
 802a37a:	1891      	adds	r1, r2, r2
 802a37c:	65b9      	str	r1, [r7, #88]	; 0x58
 802a37e:	415b      	adcs	r3, r3
 802a380:	65fb      	str	r3, [r7, #92]	; 0x5c
 802a382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 802a386:	4621      	mov	r1, r4
 802a388:	eb12 0801 	adds.w	r8, r2, r1
 802a38c:	4629      	mov	r1, r5
 802a38e:	eb43 0901 	adc.w	r9, r3, r1
 802a392:	f04f 0200 	mov.w	r2, #0
 802a396:	f04f 0300 	mov.w	r3, #0
 802a39a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802a39e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802a3a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 802a3a6:	4690      	mov	r8, r2
 802a3a8:	4699      	mov	r9, r3
 802a3aa:	4623      	mov	r3, r4
 802a3ac:	eb18 0303 	adds.w	r3, r8, r3
 802a3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802a3b4:	462b      	mov	r3, r5
 802a3b6:	eb49 0303 	adc.w	r3, r9, r3
 802a3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802a3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a3c2:	685b      	ldr	r3, [r3, #4]
 802a3c4:	2200      	movs	r2, #0
 802a3c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802a3ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 802a3ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 802a3d2:	460b      	mov	r3, r1
 802a3d4:	18db      	adds	r3, r3, r3
 802a3d6:	653b      	str	r3, [r7, #80]	; 0x50
 802a3d8:	4613      	mov	r3, r2
 802a3da:	eb42 0303 	adc.w	r3, r2, r3
 802a3de:	657b      	str	r3, [r7, #84]	; 0x54
 802a3e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 802a3e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802a3e8:	f7f5 ff52 	bl	8020290 <__aeabi_uldivmod>
 802a3ec:	4602      	mov	r2, r0
 802a3ee:	460b      	mov	r3, r1
 802a3f0:	4b61      	ldr	r3, [pc, #388]	; (802a578 <UART_SetConfig+0x2d4>)
 802a3f2:	fba3 2302 	umull	r2, r3, r3, r2
 802a3f6:	095b      	lsrs	r3, r3, #5
 802a3f8:	011c      	lsls	r4, r3, #4
 802a3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a3fe:	2200      	movs	r2, #0
 802a400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802a404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802a408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 802a40c:	4642      	mov	r2, r8
 802a40e:	464b      	mov	r3, r9
 802a410:	1891      	adds	r1, r2, r2
 802a412:	64b9      	str	r1, [r7, #72]	; 0x48
 802a414:	415b      	adcs	r3, r3
 802a416:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 802a41c:	4641      	mov	r1, r8
 802a41e:	eb12 0a01 	adds.w	sl, r2, r1
 802a422:	4649      	mov	r1, r9
 802a424:	eb43 0b01 	adc.w	fp, r3, r1
 802a428:	f04f 0200 	mov.w	r2, #0
 802a42c:	f04f 0300 	mov.w	r3, #0
 802a430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 802a434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802a438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802a43c:	4692      	mov	sl, r2
 802a43e:	469b      	mov	fp, r3
 802a440:	4643      	mov	r3, r8
 802a442:	eb1a 0303 	adds.w	r3, sl, r3
 802a446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802a44a:	464b      	mov	r3, r9
 802a44c:	eb4b 0303 	adc.w	r3, fp, r3
 802a450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802a454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a458:	685b      	ldr	r3, [r3, #4]
 802a45a:	2200      	movs	r2, #0
 802a45c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 802a460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 802a464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 802a468:	460b      	mov	r3, r1
 802a46a:	18db      	adds	r3, r3, r3
 802a46c:	643b      	str	r3, [r7, #64]	; 0x40
 802a46e:	4613      	mov	r3, r2
 802a470:	eb42 0303 	adc.w	r3, r2, r3
 802a474:	647b      	str	r3, [r7, #68]	; 0x44
 802a476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 802a47a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 802a47e:	f7f5 ff07 	bl	8020290 <__aeabi_uldivmod>
 802a482:	4602      	mov	r2, r0
 802a484:	460b      	mov	r3, r1
 802a486:	4611      	mov	r1, r2
 802a488:	4b3b      	ldr	r3, [pc, #236]	; (802a578 <UART_SetConfig+0x2d4>)
 802a48a:	fba3 2301 	umull	r2, r3, r3, r1
 802a48e:	095b      	lsrs	r3, r3, #5
 802a490:	2264      	movs	r2, #100	; 0x64
 802a492:	fb02 f303 	mul.w	r3, r2, r3
 802a496:	1acb      	subs	r3, r1, r3
 802a498:	00db      	lsls	r3, r3, #3
 802a49a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 802a49e:	4b36      	ldr	r3, [pc, #216]	; (802a578 <UART_SetConfig+0x2d4>)
 802a4a0:	fba3 2302 	umull	r2, r3, r3, r2
 802a4a4:	095b      	lsrs	r3, r3, #5
 802a4a6:	005b      	lsls	r3, r3, #1
 802a4a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 802a4ac:	441c      	add	r4, r3
 802a4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a4b2:	2200      	movs	r2, #0
 802a4b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802a4b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 802a4bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 802a4c0:	4642      	mov	r2, r8
 802a4c2:	464b      	mov	r3, r9
 802a4c4:	1891      	adds	r1, r2, r2
 802a4c6:	63b9      	str	r1, [r7, #56]	; 0x38
 802a4c8:	415b      	adcs	r3, r3
 802a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 802a4cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 802a4d0:	4641      	mov	r1, r8
 802a4d2:	1851      	adds	r1, r2, r1
 802a4d4:	6339      	str	r1, [r7, #48]	; 0x30
 802a4d6:	4649      	mov	r1, r9
 802a4d8:	414b      	adcs	r3, r1
 802a4da:	637b      	str	r3, [r7, #52]	; 0x34
 802a4dc:	f04f 0200 	mov.w	r2, #0
 802a4e0:	f04f 0300 	mov.w	r3, #0
 802a4e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802a4e8:	4659      	mov	r1, fp
 802a4ea:	00cb      	lsls	r3, r1, #3
 802a4ec:	4651      	mov	r1, sl
 802a4ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a4f2:	4651      	mov	r1, sl
 802a4f4:	00ca      	lsls	r2, r1, #3
 802a4f6:	4610      	mov	r0, r2
 802a4f8:	4619      	mov	r1, r3
 802a4fa:	4603      	mov	r3, r0
 802a4fc:	4642      	mov	r2, r8
 802a4fe:	189b      	adds	r3, r3, r2
 802a500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 802a504:	464b      	mov	r3, r9
 802a506:	460a      	mov	r2, r1
 802a508:	eb42 0303 	adc.w	r3, r2, r3
 802a50c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a514:	685b      	ldr	r3, [r3, #4]
 802a516:	2200      	movs	r2, #0
 802a518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 802a51c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 802a520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 802a524:	460b      	mov	r3, r1
 802a526:	18db      	adds	r3, r3, r3
 802a528:	62bb      	str	r3, [r7, #40]	; 0x28
 802a52a:	4613      	mov	r3, r2
 802a52c:	eb42 0303 	adc.w	r3, r2, r3
 802a530:	62fb      	str	r3, [r7, #44]	; 0x2c
 802a532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802a536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802a53a:	f7f5 fea9 	bl	8020290 <__aeabi_uldivmod>
 802a53e:	4602      	mov	r2, r0
 802a540:	460b      	mov	r3, r1
 802a542:	4b0d      	ldr	r3, [pc, #52]	; (802a578 <UART_SetConfig+0x2d4>)
 802a544:	fba3 1302 	umull	r1, r3, r3, r2
 802a548:	095b      	lsrs	r3, r3, #5
 802a54a:	2164      	movs	r1, #100	; 0x64
 802a54c:	fb01 f303 	mul.w	r3, r1, r3
 802a550:	1ad3      	subs	r3, r2, r3
 802a552:	00db      	lsls	r3, r3, #3
 802a554:	3332      	adds	r3, #50	; 0x32
 802a556:	4a08      	ldr	r2, [pc, #32]	; (802a578 <UART_SetConfig+0x2d4>)
 802a558:	fba2 2303 	umull	r2, r3, r2, r3
 802a55c:	095b      	lsrs	r3, r3, #5
 802a55e:	f003 0207 	and.w	r2, r3, #7
 802a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a566:	681b      	ldr	r3, [r3, #0]
 802a568:	4422      	add	r2, r4
 802a56a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 802a56c:	e105      	b.n	802a77a <UART_SetConfig+0x4d6>
 802a56e:	bf00      	nop
 802a570:	40011000 	.word	0x40011000
 802a574:	40011400 	.word	0x40011400
 802a578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 802a57c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a580:	2200      	movs	r2, #0
 802a582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 802a58a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 802a58e:	4642      	mov	r2, r8
 802a590:	464b      	mov	r3, r9
 802a592:	1891      	adds	r1, r2, r2
 802a594:	6239      	str	r1, [r7, #32]
 802a596:	415b      	adcs	r3, r3
 802a598:	627b      	str	r3, [r7, #36]	; 0x24
 802a59a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802a59e:	4641      	mov	r1, r8
 802a5a0:	1854      	adds	r4, r2, r1
 802a5a2:	4649      	mov	r1, r9
 802a5a4:	eb43 0501 	adc.w	r5, r3, r1
 802a5a8:	f04f 0200 	mov.w	r2, #0
 802a5ac:	f04f 0300 	mov.w	r3, #0
 802a5b0:	00eb      	lsls	r3, r5, #3
 802a5b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802a5b6:	00e2      	lsls	r2, r4, #3
 802a5b8:	4614      	mov	r4, r2
 802a5ba:	461d      	mov	r5, r3
 802a5bc:	4643      	mov	r3, r8
 802a5be:	18e3      	adds	r3, r4, r3
 802a5c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 802a5c4:	464b      	mov	r3, r9
 802a5c6:	eb45 0303 	adc.w	r3, r5, r3
 802a5ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a5d2:	685b      	ldr	r3, [r3, #4]
 802a5d4:	2200      	movs	r2, #0
 802a5d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802a5da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 802a5de:	f04f 0200 	mov.w	r2, #0
 802a5e2:	f04f 0300 	mov.w	r3, #0
 802a5e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802a5ea:	4629      	mov	r1, r5
 802a5ec:	008b      	lsls	r3, r1, #2
 802a5ee:	4621      	mov	r1, r4
 802a5f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a5f4:	4621      	mov	r1, r4
 802a5f6:	008a      	lsls	r2, r1, #2
 802a5f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 802a5fc:	f7f5 fe48 	bl	8020290 <__aeabi_uldivmod>
 802a600:	4602      	mov	r2, r0
 802a602:	460b      	mov	r3, r1
 802a604:	4b60      	ldr	r3, [pc, #384]	; (802a788 <UART_SetConfig+0x4e4>)
 802a606:	fba3 2302 	umull	r2, r3, r3, r2
 802a60a:	095b      	lsrs	r3, r3, #5
 802a60c:	011c      	lsls	r4, r3, #4
 802a60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a612:	2200      	movs	r2, #0
 802a614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 802a61c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 802a620:	4642      	mov	r2, r8
 802a622:	464b      	mov	r3, r9
 802a624:	1891      	adds	r1, r2, r2
 802a626:	61b9      	str	r1, [r7, #24]
 802a628:	415b      	adcs	r3, r3
 802a62a:	61fb      	str	r3, [r7, #28]
 802a62c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 802a630:	4641      	mov	r1, r8
 802a632:	1851      	adds	r1, r2, r1
 802a634:	6139      	str	r1, [r7, #16]
 802a636:	4649      	mov	r1, r9
 802a638:	414b      	adcs	r3, r1
 802a63a:	617b      	str	r3, [r7, #20]
 802a63c:	f04f 0200 	mov.w	r2, #0
 802a640:	f04f 0300 	mov.w	r3, #0
 802a644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802a648:	4659      	mov	r1, fp
 802a64a:	00cb      	lsls	r3, r1, #3
 802a64c:	4651      	mov	r1, sl
 802a64e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a652:	4651      	mov	r1, sl
 802a654:	00ca      	lsls	r2, r1, #3
 802a656:	4610      	mov	r0, r2
 802a658:	4619      	mov	r1, r3
 802a65a:	4603      	mov	r3, r0
 802a65c:	4642      	mov	r2, r8
 802a65e:	189b      	adds	r3, r3, r2
 802a660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a664:	464b      	mov	r3, r9
 802a666:	460a      	mov	r2, r1
 802a668:	eb42 0303 	adc.w	r3, r2, r3
 802a66c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a674:	685b      	ldr	r3, [r3, #4]
 802a676:	2200      	movs	r2, #0
 802a678:	67bb      	str	r3, [r7, #120]	; 0x78
 802a67a:	67fa      	str	r2, [r7, #124]	; 0x7c
 802a67c:	f04f 0200 	mov.w	r2, #0
 802a680:	f04f 0300 	mov.w	r3, #0
 802a684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 802a688:	4649      	mov	r1, r9
 802a68a:	008b      	lsls	r3, r1, #2
 802a68c:	4641      	mov	r1, r8
 802a68e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a692:	4641      	mov	r1, r8
 802a694:	008a      	lsls	r2, r1, #2
 802a696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 802a69a:	f7f5 fdf9 	bl	8020290 <__aeabi_uldivmod>
 802a69e:	4602      	mov	r2, r0
 802a6a0:	460b      	mov	r3, r1
 802a6a2:	4b39      	ldr	r3, [pc, #228]	; (802a788 <UART_SetConfig+0x4e4>)
 802a6a4:	fba3 1302 	umull	r1, r3, r3, r2
 802a6a8:	095b      	lsrs	r3, r3, #5
 802a6aa:	2164      	movs	r1, #100	; 0x64
 802a6ac:	fb01 f303 	mul.w	r3, r1, r3
 802a6b0:	1ad3      	subs	r3, r2, r3
 802a6b2:	011b      	lsls	r3, r3, #4
 802a6b4:	3332      	adds	r3, #50	; 0x32
 802a6b6:	4a34      	ldr	r2, [pc, #208]	; (802a788 <UART_SetConfig+0x4e4>)
 802a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 802a6bc:	095b      	lsrs	r3, r3, #5
 802a6be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802a6c2:	441c      	add	r4, r3
 802a6c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802a6c8:	2200      	movs	r2, #0
 802a6ca:	673b      	str	r3, [r7, #112]	; 0x70
 802a6cc:	677a      	str	r2, [r7, #116]	; 0x74
 802a6ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 802a6d2:	4642      	mov	r2, r8
 802a6d4:	464b      	mov	r3, r9
 802a6d6:	1891      	adds	r1, r2, r2
 802a6d8:	60b9      	str	r1, [r7, #8]
 802a6da:	415b      	adcs	r3, r3
 802a6dc:	60fb      	str	r3, [r7, #12]
 802a6de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802a6e2:	4641      	mov	r1, r8
 802a6e4:	1851      	adds	r1, r2, r1
 802a6e6:	6039      	str	r1, [r7, #0]
 802a6e8:	4649      	mov	r1, r9
 802a6ea:	414b      	adcs	r3, r1
 802a6ec:	607b      	str	r3, [r7, #4]
 802a6ee:	f04f 0200 	mov.w	r2, #0
 802a6f2:	f04f 0300 	mov.w	r3, #0
 802a6f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802a6fa:	4659      	mov	r1, fp
 802a6fc:	00cb      	lsls	r3, r1, #3
 802a6fe:	4651      	mov	r1, sl
 802a700:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 802a704:	4651      	mov	r1, sl
 802a706:	00ca      	lsls	r2, r1, #3
 802a708:	4610      	mov	r0, r2
 802a70a:	4619      	mov	r1, r3
 802a70c:	4603      	mov	r3, r0
 802a70e:	4642      	mov	r2, r8
 802a710:	189b      	adds	r3, r3, r2
 802a712:	66bb      	str	r3, [r7, #104]	; 0x68
 802a714:	464b      	mov	r3, r9
 802a716:	460a      	mov	r2, r1
 802a718:	eb42 0303 	adc.w	r3, r2, r3
 802a71c:	66fb      	str	r3, [r7, #108]	; 0x6c
 802a71e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a722:	685b      	ldr	r3, [r3, #4]
 802a724:	2200      	movs	r2, #0
 802a726:	663b      	str	r3, [r7, #96]	; 0x60
 802a728:	667a      	str	r2, [r7, #100]	; 0x64
 802a72a:	f04f 0200 	mov.w	r2, #0
 802a72e:	f04f 0300 	mov.w	r3, #0
 802a732:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802a736:	4649      	mov	r1, r9
 802a738:	008b      	lsls	r3, r1, #2
 802a73a:	4641      	mov	r1, r8
 802a73c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 802a740:	4641      	mov	r1, r8
 802a742:	008a      	lsls	r2, r1, #2
 802a744:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802a748:	f7f5 fda2 	bl	8020290 <__aeabi_uldivmod>
 802a74c:	4602      	mov	r2, r0
 802a74e:	460b      	mov	r3, r1
 802a750:	4b0d      	ldr	r3, [pc, #52]	; (802a788 <UART_SetConfig+0x4e4>)
 802a752:	fba3 1302 	umull	r1, r3, r3, r2
 802a756:	095b      	lsrs	r3, r3, #5
 802a758:	2164      	movs	r1, #100	; 0x64
 802a75a:	fb01 f303 	mul.w	r3, r1, r3
 802a75e:	1ad3      	subs	r3, r2, r3
 802a760:	011b      	lsls	r3, r3, #4
 802a762:	3332      	adds	r3, #50	; 0x32
 802a764:	4a08      	ldr	r2, [pc, #32]	; (802a788 <UART_SetConfig+0x4e4>)
 802a766:	fba2 2303 	umull	r2, r3, r2, r3
 802a76a:	095b      	lsrs	r3, r3, #5
 802a76c:	f003 020f 	and.w	r2, r3, #15
 802a770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802a774:	681b      	ldr	r3, [r3, #0]
 802a776:	4422      	add	r2, r4
 802a778:	609a      	str	r2, [r3, #8]
}
 802a77a:	bf00      	nop
 802a77c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 802a780:	46bd      	mov	sp, r7
 802a782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802a786:	bf00      	nop
 802a788:	51eb851f 	.word	0x51eb851f

0802a78c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 802a78c:	b480      	push	{r7}
 802a78e:	b083      	sub	sp, #12
 802a790:	af00      	add	r7, sp, #0
 802a792:	6078      	str	r0, [r7, #4]
 802a794:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 802a796:	683b      	ldr	r3, [r7, #0]
 802a798:	681b      	ldr	r3, [r3, #0]
 802a79a:	2b00      	cmp	r3, #0
 802a79c:	d123      	bne.n	802a7e6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a79e:	687b      	ldr	r3, [r7, #4]
 802a7a0:	681b      	ldr	r3, [r3, #0]
 802a7a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a7a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a7aa:	683a      	ldr	r2, [r7, #0]
 802a7ac:	6851      	ldr	r1, [r2, #4]
 802a7ae:	683a      	ldr	r2, [r7, #0]
 802a7b0:	6892      	ldr	r2, [r2, #8]
 802a7b2:	4311      	orrs	r1, r2
 802a7b4:	683a      	ldr	r2, [r7, #0]
 802a7b6:	68d2      	ldr	r2, [r2, #12]
 802a7b8:	4311      	orrs	r1, r2
 802a7ba:	683a      	ldr	r2, [r7, #0]
 802a7bc:	6912      	ldr	r2, [r2, #16]
 802a7be:	4311      	orrs	r1, r2
 802a7c0:	683a      	ldr	r2, [r7, #0]
 802a7c2:	6952      	ldr	r2, [r2, #20]
 802a7c4:	4311      	orrs	r1, r2
 802a7c6:	683a      	ldr	r2, [r7, #0]
 802a7c8:	6992      	ldr	r2, [r2, #24]
 802a7ca:	4311      	orrs	r1, r2
 802a7cc:	683a      	ldr	r2, [r7, #0]
 802a7ce:	69d2      	ldr	r2, [r2, #28]
 802a7d0:	4311      	orrs	r1, r2
 802a7d2:	683a      	ldr	r2, [r7, #0]
 802a7d4:	6a12      	ldr	r2, [r2, #32]
 802a7d6:	4311      	orrs	r1, r2
 802a7d8:	683a      	ldr	r2, [r7, #0]
 802a7da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802a7dc:	430a      	orrs	r2, r1
 802a7de:	431a      	orrs	r2, r3
 802a7e0:	687b      	ldr	r3, [r7, #4]
 802a7e2:	601a      	str	r2, [r3, #0]
 802a7e4:	e028      	b.n	802a838 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 802a7e6:	687b      	ldr	r3, [r7, #4]
 802a7e8:	681b      	ldr	r3, [r3, #0]
 802a7ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 802a7ee:	683b      	ldr	r3, [r7, #0]
 802a7f0:	69d9      	ldr	r1, [r3, #28]
 802a7f2:	683b      	ldr	r3, [r7, #0]
 802a7f4:	6a1b      	ldr	r3, [r3, #32]
 802a7f6:	4319      	orrs	r1, r3
 802a7f8:	683b      	ldr	r3, [r7, #0]
 802a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a7fc:	430b      	orrs	r3, r1
 802a7fe:	431a      	orrs	r2, r3
 802a800:	687b      	ldr	r3, [r7, #4]
 802a802:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 802a804:	687b      	ldr	r3, [r7, #4]
 802a806:	685b      	ldr	r3, [r3, #4]
 802a808:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802a80c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802a810:	683a      	ldr	r2, [r7, #0]
 802a812:	6851      	ldr	r1, [r2, #4]
 802a814:	683a      	ldr	r2, [r7, #0]
 802a816:	6892      	ldr	r2, [r2, #8]
 802a818:	4311      	orrs	r1, r2
 802a81a:	683a      	ldr	r2, [r7, #0]
 802a81c:	68d2      	ldr	r2, [r2, #12]
 802a81e:	4311      	orrs	r1, r2
 802a820:	683a      	ldr	r2, [r7, #0]
 802a822:	6912      	ldr	r2, [r2, #16]
 802a824:	4311      	orrs	r1, r2
 802a826:	683a      	ldr	r2, [r7, #0]
 802a828:	6952      	ldr	r2, [r2, #20]
 802a82a:	4311      	orrs	r1, r2
 802a82c:	683a      	ldr	r2, [r7, #0]
 802a82e:	6992      	ldr	r2, [r2, #24]
 802a830:	430a      	orrs	r2, r1
 802a832:	431a      	orrs	r2, r3
 802a834:	687b      	ldr	r3, [r7, #4]
 802a836:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 802a838:	2300      	movs	r3, #0
}
 802a83a:	4618      	mov	r0, r3
 802a83c:	370c      	adds	r7, #12
 802a83e:	46bd      	mov	sp, r7
 802a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a844:	4770      	bx	lr

0802a846 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 802a846:	b480      	push	{r7}
 802a848:	b085      	sub	sp, #20
 802a84a:	af00      	add	r7, sp, #0
 802a84c:	60f8      	str	r0, [r7, #12]
 802a84e:	60b9      	str	r1, [r7, #8]
 802a850:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 802a852:	687b      	ldr	r3, [r7, #4]
 802a854:	2b00      	cmp	r3, #0
 802a856:	d128      	bne.n	802a8aa <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a858:	68fb      	ldr	r3, [r7, #12]
 802a85a:	689b      	ldr	r3, [r3, #8]
 802a85c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a860:	68bb      	ldr	r3, [r7, #8]
 802a862:	681b      	ldr	r3, [r3, #0]
 802a864:	1e59      	subs	r1, r3, #1
 802a866:	68bb      	ldr	r3, [r7, #8]
 802a868:	685b      	ldr	r3, [r3, #4]
 802a86a:	3b01      	subs	r3, #1
 802a86c:	011b      	lsls	r3, r3, #4
 802a86e:	4319      	orrs	r1, r3
 802a870:	68bb      	ldr	r3, [r7, #8]
 802a872:	689b      	ldr	r3, [r3, #8]
 802a874:	3b01      	subs	r3, #1
 802a876:	021b      	lsls	r3, r3, #8
 802a878:	4319      	orrs	r1, r3
 802a87a:	68bb      	ldr	r3, [r7, #8]
 802a87c:	68db      	ldr	r3, [r3, #12]
 802a87e:	3b01      	subs	r3, #1
 802a880:	031b      	lsls	r3, r3, #12
 802a882:	4319      	orrs	r1, r3
 802a884:	68bb      	ldr	r3, [r7, #8]
 802a886:	691b      	ldr	r3, [r3, #16]
 802a888:	3b01      	subs	r3, #1
 802a88a:	041b      	lsls	r3, r3, #16
 802a88c:	4319      	orrs	r1, r3
 802a88e:	68bb      	ldr	r3, [r7, #8]
 802a890:	695b      	ldr	r3, [r3, #20]
 802a892:	3b01      	subs	r3, #1
 802a894:	051b      	lsls	r3, r3, #20
 802a896:	4319      	orrs	r1, r3
 802a898:	68bb      	ldr	r3, [r7, #8]
 802a89a:	699b      	ldr	r3, [r3, #24]
 802a89c:	3b01      	subs	r3, #1
 802a89e:	061b      	lsls	r3, r3, #24
 802a8a0:	430b      	orrs	r3, r1
 802a8a2:	431a      	orrs	r2, r3
 802a8a4:	68fb      	ldr	r3, [r7, #12]
 802a8a6:	609a      	str	r2, [r3, #8]
 802a8a8:	e02f      	b.n	802a90a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 802a8aa:	68fb      	ldr	r3, [r7, #12]
 802a8ac:	689b      	ldr	r3, [r3, #8]
 802a8ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802a8b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a8b6:	68ba      	ldr	r2, [r7, #8]
 802a8b8:	68d2      	ldr	r2, [r2, #12]
 802a8ba:	3a01      	subs	r2, #1
 802a8bc:	0311      	lsls	r1, r2, #12
 802a8be:	68ba      	ldr	r2, [r7, #8]
 802a8c0:	6952      	ldr	r2, [r2, #20]
 802a8c2:	3a01      	subs	r2, #1
 802a8c4:	0512      	lsls	r2, r2, #20
 802a8c6:	430a      	orrs	r2, r1
 802a8c8:	431a      	orrs	r2, r3
 802a8ca:	68fb      	ldr	r3, [r7, #12]
 802a8cc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 802a8ce:	68fb      	ldr	r3, [r7, #12]
 802a8d0:	68db      	ldr	r3, [r3, #12]
 802a8d2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 802a8d6:	68bb      	ldr	r3, [r7, #8]
 802a8d8:	681b      	ldr	r3, [r3, #0]
 802a8da:	1e59      	subs	r1, r3, #1
 802a8dc:	68bb      	ldr	r3, [r7, #8]
 802a8de:	685b      	ldr	r3, [r3, #4]
 802a8e0:	3b01      	subs	r3, #1
 802a8e2:	011b      	lsls	r3, r3, #4
 802a8e4:	4319      	orrs	r1, r3
 802a8e6:	68bb      	ldr	r3, [r7, #8]
 802a8e8:	689b      	ldr	r3, [r3, #8]
 802a8ea:	3b01      	subs	r3, #1
 802a8ec:	021b      	lsls	r3, r3, #8
 802a8ee:	4319      	orrs	r1, r3
 802a8f0:	68bb      	ldr	r3, [r7, #8]
 802a8f2:	691b      	ldr	r3, [r3, #16]
 802a8f4:	3b01      	subs	r3, #1
 802a8f6:	041b      	lsls	r3, r3, #16
 802a8f8:	4319      	orrs	r1, r3
 802a8fa:	68bb      	ldr	r3, [r7, #8]
 802a8fc:	699b      	ldr	r3, [r3, #24]
 802a8fe:	3b01      	subs	r3, #1
 802a900:	061b      	lsls	r3, r3, #24
 802a902:	430b      	orrs	r3, r1
 802a904:	431a      	orrs	r2, r3
 802a906:	68fb      	ldr	r3, [r7, #12]
 802a908:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 802a90a:	2300      	movs	r3, #0
}
 802a90c:	4618      	mov	r0, r3
 802a90e:	3714      	adds	r7, #20
 802a910:	46bd      	mov	sp, r7
 802a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a916:	4770      	bx	lr

0802a918 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802a918:	b580      	push	{r7, lr}
 802a91a:	b086      	sub	sp, #24
 802a91c:	af00      	add	r7, sp, #0
 802a91e:	60f8      	str	r0, [r7, #12]
 802a920:	60b9      	str	r1, [r7, #8]
 802a922:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 802a924:	2300      	movs	r3, #0
 802a926:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 802a928:	68fb      	ldr	r3, [r7, #12]
 802a92a:	691b      	ldr	r3, [r3, #16]
 802a92c:	0d9b      	lsrs	r3, r3, #22
 802a92e:	059b      	lsls	r3, r3, #22
 802a930:	68ba      	ldr	r2, [r7, #8]
 802a932:	6811      	ldr	r1, [r2, #0]
 802a934:	68ba      	ldr	r2, [r7, #8]
 802a936:	6852      	ldr	r2, [r2, #4]
 802a938:	4311      	orrs	r1, r2
 802a93a:	68ba      	ldr	r2, [r7, #8]
 802a93c:	6892      	ldr	r2, [r2, #8]
 802a93e:	3a01      	subs	r2, #1
 802a940:	0152      	lsls	r2, r2, #5
 802a942:	4311      	orrs	r1, r2
 802a944:	68ba      	ldr	r2, [r7, #8]
 802a946:	68d2      	ldr	r2, [r2, #12]
 802a948:	0252      	lsls	r2, r2, #9
 802a94a:	430a      	orrs	r2, r1
 802a94c:	431a      	orrs	r2, r3
 802a94e:	68fb      	ldr	r3, [r7, #12]
 802a950:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 802a952:	f7f8 fe27 	bl	80235a4 <HAL_GetTick>
 802a956:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a958:	e010      	b.n	802a97c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802a95a:	687b      	ldr	r3, [r7, #4]
 802a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a960:	d00c      	beq.n	802a97c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 802a962:	687b      	ldr	r3, [r7, #4]
 802a964:	2b00      	cmp	r3, #0
 802a966:	d007      	beq.n	802a978 <FMC_SDRAM_SendCommand+0x60>
 802a968:	f7f8 fe1c 	bl	80235a4 <HAL_GetTick>
 802a96c:	4602      	mov	r2, r0
 802a96e:	697b      	ldr	r3, [r7, #20]
 802a970:	1ad3      	subs	r3, r2, r3
 802a972:	687a      	ldr	r2, [r7, #4]
 802a974:	429a      	cmp	r2, r3
 802a976:	d201      	bcs.n	802a97c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 802a978:	2303      	movs	r3, #3
 802a97a:	e006      	b.n	802a98a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 802a97c:	68fb      	ldr	r3, [r7, #12]
 802a97e:	699b      	ldr	r3, [r3, #24]
 802a980:	f003 0320 	and.w	r3, r3, #32
 802a984:	2b20      	cmp	r3, #32
 802a986:	d0e8      	beq.n	802a95a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 802a988:	2300      	movs	r3, #0
}
 802a98a:	4618      	mov	r0, r3
 802a98c:	3718      	adds	r7, #24
 802a98e:	46bd      	mov	sp, r7
 802a990:	bd80      	pop	{r7, pc}

0802a992 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 802a992:	b480      	push	{r7}
 802a994:	b083      	sub	sp, #12
 802a996:	af00      	add	r7, sp, #0
 802a998:	6078      	str	r0, [r7, #4]
 802a99a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 802a99c:	687b      	ldr	r3, [r7, #4]
 802a99e:	695b      	ldr	r3, [r3, #20]
 802a9a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 802a9a4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 802a9a8:	683a      	ldr	r2, [r7, #0]
 802a9aa:	0052      	lsls	r2, r2, #1
 802a9ac:	431a      	orrs	r2, r3
 802a9ae:	687b      	ldr	r3, [r7, #4]
 802a9b0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 802a9b2:	2300      	movs	r3, #0
}
 802a9b4:	4618      	mov	r0, r3
 802a9b6:	370c      	adds	r7, #12
 802a9b8:	46bd      	mov	sp, r7
 802a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9be:	4770      	bx	lr

0802a9c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802a9c0:	b084      	sub	sp, #16
 802a9c2:	b580      	push	{r7, lr}
 802a9c4:	b084      	sub	sp, #16
 802a9c6:	af00      	add	r7, sp, #0
 802a9c8:	6078      	str	r0, [r7, #4]
 802a9ca:	f107 001c 	add.w	r0, r7, #28
 802a9ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 802a9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802a9d4:	2b01      	cmp	r3, #1
 802a9d6:	d122      	bne.n	802aa1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802a9d8:	687b      	ldr	r3, [r7, #4]
 802a9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802a9dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802a9e0:	687b      	ldr	r3, [r7, #4]
 802a9e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 802a9e4:	687b      	ldr	r3, [r7, #4]
 802a9e6:	68db      	ldr	r3, [r3, #12]
 802a9e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 802a9ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a9f0:	687a      	ldr	r2, [r7, #4]
 802a9f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 802a9f4:	687b      	ldr	r3, [r7, #4]
 802a9f6:	68db      	ldr	r3, [r3, #12]
 802a9f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 802a9fc:	687b      	ldr	r3, [r7, #4]
 802a9fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 802aa00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802aa02:	2b01      	cmp	r3, #1
 802aa04:	d105      	bne.n	802aa12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 802aa06:	687b      	ldr	r3, [r7, #4]
 802aa08:	68db      	ldr	r3, [r3, #12]
 802aa0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 802aa0e:	687b      	ldr	r3, [r7, #4]
 802aa10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aa12:	6878      	ldr	r0, [r7, #4]
 802aa14:	f000 f9c0 	bl	802ad98 <USB_CoreReset>
 802aa18:	4603      	mov	r3, r0
 802aa1a:	73fb      	strb	r3, [r7, #15]
 802aa1c:	e01a      	b.n	802aa54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 802aa1e:	687b      	ldr	r3, [r7, #4]
 802aa20:	68db      	ldr	r3, [r3, #12]
 802aa22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 802aa26:	687b      	ldr	r3, [r7, #4]
 802aa28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 802aa2a:	6878      	ldr	r0, [r7, #4]
 802aa2c:	f000 f9b4 	bl	802ad98 <USB_CoreReset>
 802aa30:	4603      	mov	r3, r0
 802aa32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 802aa34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802aa36:	2b00      	cmp	r3, #0
 802aa38:	d106      	bne.n	802aa48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 802aa3a:	687b      	ldr	r3, [r7, #4]
 802aa3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aa3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 802aa42:	687b      	ldr	r3, [r7, #4]
 802aa44:	639a      	str	r2, [r3, #56]	; 0x38
 802aa46:	e005      	b.n	802aa54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 802aa48:	687b      	ldr	r3, [r7, #4]
 802aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802aa4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 802aa50:	687b      	ldr	r3, [r7, #4]
 802aa52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 802aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aa56:	2b01      	cmp	r3, #1
 802aa58:	d10b      	bne.n	802aa72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 802aa5a:	687b      	ldr	r3, [r7, #4]
 802aa5c:	689b      	ldr	r3, [r3, #8]
 802aa5e:	f043 0206 	orr.w	r2, r3, #6
 802aa62:	687b      	ldr	r3, [r7, #4]
 802aa64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 802aa66:	687b      	ldr	r3, [r7, #4]
 802aa68:	689b      	ldr	r3, [r3, #8]
 802aa6a:	f043 0220 	orr.w	r2, r3, #32
 802aa6e:	687b      	ldr	r3, [r7, #4]
 802aa70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 802aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 802aa74:	4618      	mov	r0, r3
 802aa76:	3710      	adds	r7, #16
 802aa78:	46bd      	mov	sp, r7
 802aa7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802aa7e:	b004      	add	sp, #16
 802aa80:	4770      	bx	lr

0802aa82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802aa82:	b480      	push	{r7}
 802aa84:	b083      	sub	sp, #12
 802aa86:	af00      	add	r7, sp, #0
 802aa88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 802aa8a:	687b      	ldr	r3, [r7, #4]
 802aa8c:	689b      	ldr	r3, [r3, #8]
 802aa8e:	f043 0201 	orr.w	r2, r3, #1
 802aa92:	687b      	ldr	r3, [r7, #4]
 802aa94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802aa96:	2300      	movs	r3, #0
}
 802aa98:	4618      	mov	r0, r3
 802aa9a:	370c      	adds	r7, #12
 802aa9c:	46bd      	mov	sp, r7
 802aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaa2:	4770      	bx	lr

0802aaa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 802aaa4:	b480      	push	{r7}
 802aaa6:	b083      	sub	sp, #12
 802aaa8:	af00      	add	r7, sp, #0
 802aaaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 802aaac:	687b      	ldr	r3, [r7, #4]
 802aaae:	689b      	ldr	r3, [r3, #8]
 802aab0:	f023 0201 	bic.w	r2, r3, #1
 802aab4:	687b      	ldr	r3, [r7, #4]
 802aab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 802aab8:	2300      	movs	r3, #0
}
 802aaba:	4618      	mov	r0, r3
 802aabc:	370c      	adds	r7, #12
 802aabe:	46bd      	mov	sp, r7
 802aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aac4:	4770      	bx	lr

0802aac6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 802aac6:	b580      	push	{r7, lr}
 802aac8:	b084      	sub	sp, #16
 802aaca:	af00      	add	r7, sp, #0
 802aacc:	6078      	str	r0, [r7, #4]
 802aace:	460b      	mov	r3, r1
 802aad0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 802aad2:	2300      	movs	r3, #0
 802aad4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 802aad6:	687b      	ldr	r3, [r7, #4]
 802aad8:	68db      	ldr	r3, [r3, #12]
 802aada:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 802aade:	687b      	ldr	r3, [r7, #4]
 802aae0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 802aae2:	78fb      	ldrb	r3, [r7, #3]
 802aae4:	2b01      	cmp	r3, #1
 802aae6:	d115      	bne.n	802ab14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 802aae8:	687b      	ldr	r3, [r7, #4]
 802aaea:	68db      	ldr	r3, [r3, #12]
 802aaec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 802aaf0:	687b      	ldr	r3, [r7, #4]
 802aaf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802aaf4:	2001      	movs	r0, #1
 802aaf6:	f7f8 fd61 	bl	80235bc <HAL_Delay>
      ms++;
 802aafa:	68fb      	ldr	r3, [r7, #12]
 802aafc:	3301      	adds	r3, #1
 802aafe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 802ab00:	6878      	ldr	r0, [r7, #4]
 802ab02:	f000 f93a 	bl	802ad7a <USB_GetMode>
 802ab06:	4603      	mov	r3, r0
 802ab08:	2b01      	cmp	r3, #1
 802ab0a:	d01e      	beq.n	802ab4a <USB_SetCurrentMode+0x84>
 802ab0c:	68fb      	ldr	r3, [r7, #12]
 802ab0e:	2b31      	cmp	r3, #49	; 0x31
 802ab10:	d9f0      	bls.n	802aaf4 <USB_SetCurrentMode+0x2e>
 802ab12:	e01a      	b.n	802ab4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 802ab14:	78fb      	ldrb	r3, [r7, #3]
 802ab16:	2b00      	cmp	r3, #0
 802ab18:	d115      	bne.n	802ab46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 802ab1a:	687b      	ldr	r3, [r7, #4]
 802ab1c:	68db      	ldr	r3, [r3, #12]
 802ab1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 802ab22:	687b      	ldr	r3, [r7, #4]
 802ab24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 802ab26:	2001      	movs	r0, #1
 802ab28:	f7f8 fd48 	bl	80235bc <HAL_Delay>
      ms++;
 802ab2c:	68fb      	ldr	r3, [r7, #12]
 802ab2e:	3301      	adds	r3, #1
 802ab30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 802ab32:	6878      	ldr	r0, [r7, #4]
 802ab34:	f000 f921 	bl	802ad7a <USB_GetMode>
 802ab38:	4603      	mov	r3, r0
 802ab3a:	2b00      	cmp	r3, #0
 802ab3c:	d005      	beq.n	802ab4a <USB_SetCurrentMode+0x84>
 802ab3e:	68fb      	ldr	r3, [r7, #12]
 802ab40:	2b31      	cmp	r3, #49	; 0x31
 802ab42:	d9f0      	bls.n	802ab26 <USB_SetCurrentMode+0x60>
 802ab44:	e001      	b.n	802ab4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 802ab46:	2301      	movs	r3, #1
 802ab48:	e005      	b.n	802ab56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 802ab4a:	68fb      	ldr	r3, [r7, #12]
 802ab4c:	2b32      	cmp	r3, #50	; 0x32
 802ab4e:	d101      	bne.n	802ab54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 802ab50:	2301      	movs	r3, #1
 802ab52:	e000      	b.n	802ab56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 802ab54:	2300      	movs	r3, #0
}
 802ab56:	4618      	mov	r0, r3
 802ab58:	3710      	adds	r7, #16
 802ab5a:	46bd      	mov	sp, r7
 802ab5c:	bd80      	pop	{r7, pc}
	...

0802ab60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 802ab60:	b480      	push	{r7}
 802ab62:	b085      	sub	sp, #20
 802ab64:	af00      	add	r7, sp, #0
 802ab66:	6078      	str	r0, [r7, #4]
 802ab68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 802ab6a:	2300      	movs	r3, #0
 802ab6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ab6e:	68fb      	ldr	r3, [r7, #12]
 802ab70:	3301      	adds	r3, #1
 802ab72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ab74:	68fb      	ldr	r3, [r7, #12]
 802ab76:	4a13      	ldr	r2, [pc, #76]	; (802abc4 <USB_FlushTxFifo+0x64>)
 802ab78:	4293      	cmp	r3, r2
 802ab7a:	d901      	bls.n	802ab80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 802ab7c:	2303      	movs	r3, #3
 802ab7e:	e01b      	b.n	802abb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802ab80:	687b      	ldr	r3, [r7, #4]
 802ab82:	691b      	ldr	r3, [r3, #16]
 802ab84:	2b00      	cmp	r3, #0
 802ab86:	daf2      	bge.n	802ab6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 802ab88:	2300      	movs	r3, #0
 802ab8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 802ab8c:	683b      	ldr	r3, [r7, #0]
 802ab8e:	019b      	lsls	r3, r3, #6
 802ab90:	f043 0220 	orr.w	r2, r3, #32
 802ab94:	687b      	ldr	r3, [r7, #4]
 802ab96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802ab98:	68fb      	ldr	r3, [r7, #12]
 802ab9a:	3301      	adds	r3, #1
 802ab9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802ab9e:	68fb      	ldr	r3, [r7, #12]
 802aba0:	4a08      	ldr	r2, [pc, #32]	; (802abc4 <USB_FlushTxFifo+0x64>)
 802aba2:	4293      	cmp	r3, r2
 802aba4:	d901      	bls.n	802abaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 802aba6:	2303      	movs	r3, #3
 802aba8:	e006      	b.n	802abb8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 802abaa:	687b      	ldr	r3, [r7, #4]
 802abac:	691b      	ldr	r3, [r3, #16]
 802abae:	f003 0320 	and.w	r3, r3, #32
 802abb2:	2b20      	cmp	r3, #32
 802abb4:	d0f0      	beq.n	802ab98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 802abb6:	2300      	movs	r3, #0
}
 802abb8:	4618      	mov	r0, r3
 802abba:	3714      	adds	r7, #20
 802abbc:	46bd      	mov	sp, r7
 802abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abc2:	4770      	bx	lr
 802abc4:	00030d40 	.word	0x00030d40

0802abc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 802abc8:	b480      	push	{r7}
 802abca:	b085      	sub	sp, #20
 802abcc:	af00      	add	r7, sp, #0
 802abce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802abd0:	2300      	movs	r3, #0
 802abd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802abd4:	68fb      	ldr	r3, [r7, #12]
 802abd6:	3301      	adds	r3, #1
 802abd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802abda:	68fb      	ldr	r3, [r7, #12]
 802abdc:	4a11      	ldr	r2, [pc, #68]	; (802ac24 <USB_FlushRxFifo+0x5c>)
 802abde:	4293      	cmp	r3, r2
 802abe0:	d901      	bls.n	802abe6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 802abe2:	2303      	movs	r3, #3
 802abe4:	e018      	b.n	802ac18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802abe6:	687b      	ldr	r3, [r7, #4]
 802abe8:	691b      	ldr	r3, [r3, #16]
 802abea:	2b00      	cmp	r3, #0
 802abec:	daf2      	bge.n	802abd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 802abee:	2300      	movs	r3, #0
 802abf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 802abf2:	687b      	ldr	r3, [r7, #4]
 802abf4:	2210      	movs	r2, #16
 802abf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802abf8:	68fb      	ldr	r3, [r7, #12]
 802abfa:	3301      	adds	r3, #1
 802abfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802abfe:	68fb      	ldr	r3, [r7, #12]
 802ac00:	4a08      	ldr	r2, [pc, #32]	; (802ac24 <USB_FlushRxFifo+0x5c>)
 802ac02:	4293      	cmp	r3, r2
 802ac04:	d901      	bls.n	802ac0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 802ac06:	2303      	movs	r3, #3
 802ac08:	e006      	b.n	802ac18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 802ac0a:	687b      	ldr	r3, [r7, #4]
 802ac0c:	691b      	ldr	r3, [r3, #16]
 802ac0e:	f003 0310 	and.w	r3, r3, #16
 802ac12:	2b10      	cmp	r3, #16
 802ac14:	d0f0      	beq.n	802abf8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 802ac16:	2300      	movs	r3, #0
}
 802ac18:	4618      	mov	r0, r3
 802ac1a:	3714      	adds	r7, #20
 802ac1c:	46bd      	mov	sp, r7
 802ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac22:	4770      	bx	lr
 802ac24:	00030d40 	.word	0x00030d40

0802ac28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 802ac28:	b480      	push	{r7}
 802ac2a:	b089      	sub	sp, #36	; 0x24
 802ac2c:	af00      	add	r7, sp, #0
 802ac2e:	60f8      	str	r0, [r7, #12]
 802ac30:	60b9      	str	r1, [r7, #8]
 802ac32:	4611      	mov	r1, r2
 802ac34:	461a      	mov	r2, r3
 802ac36:	460b      	mov	r3, r1
 802ac38:	71fb      	strb	r3, [r7, #7]
 802ac3a:	4613      	mov	r3, r2
 802ac3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ac3e:	68fb      	ldr	r3, [r7, #12]
 802ac40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 802ac42:	68bb      	ldr	r3, [r7, #8]
 802ac44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 802ac46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802ac4a:	2b00      	cmp	r3, #0
 802ac4c:	d123      	bne.n	802ac96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 802ac4e:	88bb      	ldrh	r3, [r7, #4]
 802ac50:	3303      	adds	r3, #3
 802ac52:	089b      	lsrs	r3, r3, #2
 802ac54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 802ac56:	2300      	movs	r3, #0
 802ac58:	61bb      	str	r3, [r7, #24]
 802ac5a:	e018      	b.n	802ac8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 802ac5c:	79fb      	ldrb	r3, [r7, #7]
 802ac5e:	031a      	lsls	r2, r3, #12
 802ac60:	697b      	ldr	r3, [r7, #20]
 802ac62:	4413      	add	r3, r2
 802ac64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ac68:	461a      	mov	r2, r3
 802ac6a:	69fb      	ldr	r3, [r7, #28]
 802ac6c:	681b      	ldr	r3, [r3, #0]
 802ac6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 802ac70:	69fb      	ldr	r3, [r7, #28]
 802ac72:	3301      	adds	r3, #1
 802ac74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ac76:	69fb      	ldr	r3, [r7, #28]
 802ac78:	3301      	adds	r3, #1
 802ac7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ac7c:	69fb      	ldr	r3, [r7, #28]
 802ac7e:	3301      	adds	r3, #1
 802ac80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 802ac82:	69fb      	ldr	r3, [r7, #28]
 802ac84:	3301      	adds	r3, #1
 802ac86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 802ac88:	69bb      	ldr	r3, [r7, #24]
 802ac8a:	3301      	adds	r3, #1
 802ac8c:	61bb      	str	r3, [r7, #24]
 802ac8e:	69ba      	ldr	r2, [r7, #24]
 802ac90:	693b      	ldr	r3, [r7, #16]
 802ac92:	429a      	cmp	r2, r3
 802ac94:	d3e2      	bcc.n	802ac5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 802ac96:	2300      	movs	r3, #0
}
 802ac98:	4618      	mov	r0, r3
 802ac9a:	3724      	adds	r7, #36	; 0x24
 802ac9c:	46bd      	mov	sp, r7
 802ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aca2:	4770      	bx	lr

0802aca4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 802aca4:	b480      	push	{r7}
 802aca6:	b08b      	sub	sp, #44	; 0x2c
 802aca8:	af00      	add	r7, sp, #0
 802acaa:	60f8      	str	r0, [r7, #12]
 802acac:	60b9      	str	r1, [r7, #8]
 802acae:	4613      	mov	r3, r2
 802acb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802acb2:	68fb      	ldr	r3, [r7, #12]
 802acb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 802acb6:	68bb      	ldr	r3, [r7, #8]
 802acb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 802acba:	88fb      	ldrh	r3, [r7, #6]
 802acbc:	089b      	lsrs	r3, r3, #2
 802acbe:	b29b      	uxth	r3, r3
 802acc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 802acc2:	88fb      	ldrh	r3, [r7, #6]
 802acc4:	f003 0303 	and.w	r3, r3, #3
 802acc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 802acca:	2300      	movs	r3, #0
 802accc:	623b      	str	r3, [r7, #32]
 802acce:	e014      	b.n	802acfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 802acd0:	69bb      	ldr	r3, [r7, #24]
 802acd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802acd6:	681a      	ldr	r2, [r3, #0]
 802acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acda:	601a      	str	r2, [r3, #0]
    pDest++;
 802acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acde:	3301      	adds	r3, #1
 802ace0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ace4:	3301      	adds	r3, #1
 802ace6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acea:	3301      	adds	r3, #1
 802acec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 802acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802acf0:	3301      	adds	r3, #1
 802acf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 802acf4:	6a3b      	ldr	r3, [r7, #32]
 802acf6:	3301      	adds	r3, #1
 802acf8:	623b      	str	r3, [r7, #32]
 802acfa:	6a3a      	ldr	r2, [r7, #32]
 802acfc:	697b      	ldr	r3, [r7, #20]
 802acfe:	429a      	cmp	r2, r3
 802ad00:	d3e6      	bcc.n	802acd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 802ad02:	8bfb      	ldrh	r3, [r7, #30]
 802ad04:	2b00      	cmp	r3, #0
 802ad06:	d01e      	beq.n	802ad46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 802ad08:	2300      	movs	r3, #0
 802ad0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 802ad0c:	69bb      	ldr	r3, [r7, #24]
 802ad0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 802ad12:	461a      	mov	r2, r3
 802ad14:	f107 0310 	add.w	r3, r7, #16
 802ad18:	6812      	ldr	r2, [r2, #0]
 802ad1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 802ad1c:	693a      	ldr	r2, [r7, #16]
 802ad1e:	6a3b      	ldr	r3, [r7, #32]
 802ad20:	b2db      	uxtb	r3, r3
 802ad22:	00db      	lsls	r3, r3, #3
 802ad24:	fa22 f303 	lsr.w	r3, r2, r3
 802ad28:	b2da      	uxtb	r2, r3
 802ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad2c:	701a      	strb	r2, [r3, #0]
      i++;
 802ad2e:	6a3b      	ldr	r3, [r7, #32]
 802ad30:	3301      	adds	r3, #1
 802ad32:	623b      	str	r3, [r7, #32]
      pDest++;
 802ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ad36:	3301      	adds	r3, #1
 802ad38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 802ad3a:	8bfb      	ldrh	r3, [r7, #30]
 802ad3c:	3b01      	subs	r3, #1
 802ad3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 802ad40:	8bfb      	ldrh	r3, [r7, #30]
 802ad42:	2b00      	cmp	r3, #0
 802ad44:	d1ea      	bne.n	802ad1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 802ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 802ad48:	4618      	mov	r0, r3
 802ad4a:	372c      	adds	r7, #44	; 0x2c
 802ad4c:	46bd      	mov	sp, r7
 802ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad52:	4770      	bx	lr

0802ad54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 802ad54:	b480      	push	{r7}
 802ad56:	b085      	sub	sp, #20
 802ad58:	af00      	add	r7, sp, #0
 802ad5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 802ad5c:	687b      	ldr	r3, [r7, #4]
 802ad5e:	695b      	ldr	r3, [r3, #20]
 802ad60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 802ad62:	687b      	ldr	r3, [r7, #4]
 802ad64:	699b      	ldr	r3, [r3, #24]
 802ad66:	68fa      	ldr	r2, [r7, #12]
 802ad68:	4013      	ands	r3, r2
 802ad6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 802ad6c:	68fb      	ldr	r3, [r7, #12]
}
 802ad6e:	4618      	mov	r0, r3
 802ad70:	3714      	adds	r7, #20
 802ad72:	46bd      	mov	sp, r7
 802ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad78:	4770      	bx	lr

0802ad7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 802ad7a:	b480      	push	{r7}
 802ad7c:	b083      	sub	sp, #12
 802ad7e:	af00      	add	r7, sp, #0
 802ad80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 802ad82:	687b      	ldr	r3, [r7, #4]
 802ad84:	695b      	ldr	r3, [r3, #20]
 802ad86:	f003 0301 	and.w	r3, r3, #1
}
 802ad8a:	4618      	mov	r0, r3
 802ad8c:	370c      	adds	r7, #12
 802ad8e:	46bd      	mov	sp, r7
 802ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ad94:	4770      	bx	lr
	...

0802ad98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 802ad98:	b480      	push	{r7}
 802ad9a:	b085      	sub	sp, #20
 802ad9c:	af00      	add	r7, sp, #0
 802ad9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 802ada0:	2300      	movs	r3, #0
 802ada2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 802ada4:	68fb      	ldr	r3, [r7, #12]
 802ada6:	3301      	adds	r3, #1
 802ada8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802adaa:	68fb      	ldr	r3, [r7, #12]
 802adac:	4a13      	ldr	r2, [pc, #76]	; (802adfc <USB_CoreReset+0x64>)
 802adae:	4293      	cmp	r3, r2
 802adb0:	d901      	bls.n	802adb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 802adb2:	2303      	movs	r3, #3
 802adb4:	e01b      	b.n	802adee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 802adb6:	687b      	ldr	r3, [r7, #4]
 802adb8:	691b      	ldr	r3, [r3, #16]
 802adba:	2b00      	cmp	r3, #0
 802adbc:	daf2      	bge.n	802ada4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 802adbe:	2300      	movs	r3, #0
 802adc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 802adc2:	687b      	ldr	r3, [r7, #4]
 802adc4:	691b      	ldr	r3, [r3, #16]
 802adc6:	f043 0201 	orr.w	r2, r3, #1
 802adca:	687b      	ldr	r3, [r7, #4]
 802adcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 802adce:	68fb      	ldr	r3, [r7, #12]
 802add0:	3301      	adds	r3, #1
 802add2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 802add4:	68fb      	ldr	r3, [r7, #12]
 802add6:	4a09      	ldr	r2, [pc, #36]	; (802adfc <USB_CoreReset+0x64>)
 802add8:	4293      	cmp	r3, r2
 802adda:	d901      	bls.n	802ade0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 802addc:	2303      	movs	r3, #3
 802adde:	e006      	b.n	802adee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 802ade0:	687b      	ldr	r3, [r7, #4]
 802ade2:	691b      	ldr	r3, [r3, #16]
 802ade4:	f003 0301 	and.w	r3, r3, #1
 802ade8:	2b01      	cmp	r3, #1
 802adea:	d0f0      	beq.n	802adce <USB_CoreReset+0x36>

  return HAL_OK;
 802adec:	2300      	movs	r3, #0
}
 802adee:	4618      	mov	r0, r3
 802adf0:	3714      	adds	r7, #20
 802adf2:	46bd      	mov	sp, r7
 802adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802adf8:	4770      	bx	lr
 802adfa:	bf00      	nop
 802adfc:	00030d40 	.word	0x00030d40

0802ae00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 802ae00:	b084      	sub	sp, #16
 802ae02:	b580      	push	{r7, lr}
 802ae04:	b086      	sub	sp, #24
 802ae06:	af00      	add	r7, sp, #0
 802ae08:	6078      	str	r0, [r7, #4]
 802ae0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 802ae0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 802ae12:	2300      	movs	r3, #0
 802ae14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802ae16:	687b      	ldr	r3, [r7, #4]
 802ae18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 802ae1a:	68fb      	ldr	r3, [r7, #12]
 802ae1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802ae20:	461a      	mov	r2, r3
 802ae22:	2300      	movs	r3, #0
 802ae24:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 802ae26:	687b      	ldr	r3, [r7, #4]
 802ae28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae2a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 802ae2e:	687b      	ldr	r3, [r7, #4]
 802ae30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 802ae32:	687b      	ldr	r3, [r7, #4]
 802ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae36:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 802ae3a:	687b      	ldr	r3, [r7, #4]
 802ae3c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 802ae3e:	687b      	ldr	r3, [r7, #4]
 802ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802ae42:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 802ae46:	687b      	ldr	r3, [r7, #4]
 802ae48:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802ae4a:	687b      	ldr	r3, [r7, #4]
 802ae4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802ae4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802ae52:	2b00      	cmp	r3, #0
 802ae54:	d018      	beq.n	802ae88 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 802ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802ae58:	2b01      	cmp	r3, #1
 802ae5a:	d10a      	bne.n	802ae72 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 802ae5c:	68fb      	ldr	r3, [r7, #12]
 802ae5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae62:	681b      	ldr	r3, [r3, #0]
 802ae64:	68fa      	ldr	r2, [r7, #12]
 802ae66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802ae6a:	f043 0304 	orr.w	r3, r3, #4
 802ae6e:	6013      	str	r3, [r2, #0]
 802ae70:	e014      	b.n	802ae9c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802ae72:	68fb      	ldr	r3, [r7, #12]
 802ae74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae78:	681b      	ldr	r3, [r3, #0]
 802ae7a:	68fa      	ldr	r2, [r7, #12]
 802ae7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802ae80:	f023 0304 	bic.w	r3, r3, #4
 802ae84:	6013      	str	r3, [r2, #0]
 802ae86:	e009      	b.n	802ae9c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 802ae88:	68fb      	ldr	r3, [r7, #12]
 802ae8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802ae8e:	681b      	ldr	r3, [r3, #0]
 802ae90:	68fa      	ldr	r2, [r7, #12]
 802ae92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802ae96:	f023 0304 	bic.w	r3, r3, #4
 802ae9a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802ae9c:	2110      	movs	r1, #16
 802ae9e:	6878      	ldr	r0, [r7, #4]
 802aea0:	f7ff fe5e 	bl	802ab60 <USB_FlushTxFifo>
 802aea4:	4603      	mov	r3, r0
 802aea6:	2b00      	cmp	r3, #0
 802aea8:	d001      	beq.n	802aeae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 802aeaa:	2301      	movs	r3, #1
 802aeac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802aeae:	6878      	ldr	r0, [r7, #4]
 802aeb0:	f7ff fe8a 	bl	802abc8 <USB_FlushRxFifo>
 802aeb4:	4603      	mov	r3, r0
 802aeb6:	2b00      	cmp	r3, #0
 802aeb8:	d001      	beq.n	802aebe <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 802aeba:	2301      	movs	r3, #1
 802aebc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 802aebe:	2300      	movs	r3, #0
 802aec0:	613b      	str	r3, [r7, #16]
 802aec2:	e015      	b.n	802aef0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 802aec4:	693b      	ldr	r3, [r7, #16]
 802aec6:	015a      	lsls	r2, r3, #5
 802aec8:	68fb      	ldr	r3, [r7, #12]
 802aeca:	4413      	add	r3, r2
 802aecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aed0:	461a      	mov	r2, r3
 802aed2:	f04f 33ff 	mov.w	r3, #4294967295
 802aed6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 802aed8:	693b      	ldr	r3, [r7, #16]
 802aeda:	015a      	lsls	r2, r3, #5
 802aedc:	68fb      	ldr	r3, [r7, #12]
 802aede:	4413      	add	r3, r2
 802aee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802aee4:	461a      	mov	r2, r3
 802aee6:	2300      	movs	r3, #0
 802aee8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 802aeea:	693b      	ldr	r3, [r7, #16]
 802aeec:	3301      	adds	r3, #1
 802aeee:	613b      	str	r3, [r7, #16]
 802aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aef2:	693a      	ldr	r2, [r7, #16]
 802aef4:	429a      	cmp	r2, r3
 802aef6:	d3e5      	bcc.n	802aec4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 802aef8:	687b      	ldr	r3, [r7, #4]
 802aefa:	2200      	movs	r2, #0
 802aefc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 802aefe:	687b      	ldr	r3, [r7, #4]
 802af00:	f04f 32ff 	mov.w	r2, #4294967295
 802af04:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 802af06:	687b      	ldr	r3, [r7, #4]
 802af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802af0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802af0e:	2b00      	cmp	r3, #0
 802af10:	d00b      	beq.n	802af2a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 802af12:	687b      	ldr	r3, [r7, #4]
 802af14:	f44f 7200 	mov.w	r2, #512	; 0x200
 802af18:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 802af1a:	687b      	ldr	r3, [r7, #4]
 802af1c:	4a13      	ldr	r2, [pc, #76]	; (802af6c <USB_HostInit+0x16c>)
 802af1e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 802af20:	687b      	ldr	r3, [r7, #4]
 802af22:	4a13      	ldr	r2, [pc, #76]	; (802af70 <USB_HostInit+0x170>)
 802af24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 802af28:	e009      	b.n	802af3e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 802af2a:	687b      	ldr	r3, [r7, #4]
 802af2c:	2280      	movs	r2, #128	; 0x80
 802af2e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 802af30:	687b      	ldr	r3, [r7, #4]
 802af32:	4a10      	ldr	r2, [pc, #64]	; (802af74 <USB_HostInit+0x174>)
 802af34:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 802af36:	687b      	ldr	r3, [r7, #4]
 802af38:	4a0f      	ldr	r2, [pc, #60]	; (802af78 <USB_HostInit+0x178>)
 802af3a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 802af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802af40:	2b00      	cmp	r3, #0
 802af42:	d105      	bne.n	802af50 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 802af44:	687b      	ldr	r3, [r7, #4]
 802af46:	699b      	ldr	r3, [r3, #24]
 802af48:	f043 0210 	orr.w	r2, r3, #16
 802af4c:	687b      	ldr	r3, [r7, #4]
 802af4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 802af50:	687b      	ldr	r3, [r7, #4]
 802af52:	699a      	ldr	r2, [r3, #24]
 802af54:	4b09      	ldr	r3, [pc, #36]	; (802af7c <USB_HostInit+0x17c>)
 802af56:	4313      	orrs	r3, r2
 802af58:	687a      	ldr	r2, [r7, #4]
 802af5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 802af5c:	7dfb      	ldrb	r3, [r7, #23]
}
 802af5e:	4618      	mov	r0, r3
 802af60:	3718      	adds	r7, #24
 802af62:	46bd      	mov	sp, r7
 802af64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802af68:	b004      	add	sp, #16
 802af6a:	4770      	bx	lr
 802af6c:	01000200 	.word	0x01000200
 802af70:	00e00300 	.word	0x00e00300
 802af74:	00600080 	.word	0x00600080
 802af78:	004000e0 	.word	0x004000e0
 802af7c:	a3200008 	.word	0xa3200008

0802af80 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 802af80:	b480      	push	{r7}
 802af82:	b085      	sub	sp, #20
 802af84:	af00      	add	r7, sp, #0
 802af86:	6078      	str	r0, [r7, #4]
 802af88:	460b      	mov	r3, r1
 802af8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802af8c:	687b      	ldr	r3, [r7, #4]
 802af8e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 802af90:	68fb      	ldr	r3, [r7, #12]
 802af92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802af96:	681b      	ldr	r3, [r3, #0]
 802af98:	68fa      	ldr	r2, [r7, #12]
 802af9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 802af9e:	f023 0303 	bic.w	r3, r3, #3
 802afa2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 802afa4:	68fb      	ldr	r3, [r7, #12]
 802afa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802afaa:	681a      	ldr	r2, [r3, #0]
 802afac:	78fb      	ldrb	r3, [r7, #3]
 802afae:	f003 0303 	and.w	r3, r3, #3
 802afb2:	68f9      	ldr	r1, [r7, #12]
 802afb4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802afb8:	4313      	orrs	r3, r2
 802afba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 802afbc:	78fb      	ldrb	r3, [r7, #3]
 802afbe:	2b01      	cmp	r3, #1
 802afc0:	d107      	bne.n	802afd2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 802afc2:	68fb      	ldr	r3, [r7, #12]
 802afc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802afc8:	461a      	mov	r2, r3
 802afca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 802afce:	6053      	str	r3, [r2, #4]
 802afd0:	e009      	b.n	802afe6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 802afd2:	78fb      	ldrb	r3, [r7, #3]
 802afd4:	2b02      	cmp	r3, #2
 802afd6:	d106      	bne.n	802afe6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 802afd8:	68fb      	ldr	r3, [r7, #12]
 802afda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802afde:	461a      	mov	r2, r3
 802afe0:	f241 7370 	movw	r3, #6000	; 0x1770
 802afe4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 802afe6:	2300      	movs	r3, #0
}
 802afe8:	4618      	mov	r0, r3
 802afea:	3714      	adds	r7, #20
 802afec:	46bd      	mov	sp, r7
 802afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aff2:	4770      	bx	lr

0802aff4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 802aff4:	b580      	push	{r7, lr}
 802aff6:	b084      	sub	sp, #16
 802aff8:	af00      	add	r7, sp, #0
 802affa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802affc:	687b      	ldr	r3, [r7, #4]
 802affe:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 802b000:	2300      	movs	r3, #0
 802b002:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b004:	68fb      	ldr	r3, [r7, #12]
 802b006:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b00a:	681b      	ldr	r3, [r3, #0]
 802b00c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b00e:	68bb      	ldr	r3, [r7, #8]
 802b010:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b014:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 802b016:	68bb      	ldr	r3, [r7, #8]
 802b018:	68fa      	ldr	r2, [r7, #12]
 802b01a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b01e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b022:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 802b024:	2064      	movs	r0, #100	; 0x64
 802b026:	f7f8 fac9 	bl	80235bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 802b02a:	68bb      	ldr	r3, [r7, #8]
 802b02c:	68fa      	ldr	r2, [r7, #12]
 802b02e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802b036:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 802b038:	200a      	movs	r0, #10
 802b03a:	f7f8 fabf 	bl	80235bc <HAL_Delay>

  return HAL_OK;
 802b03e:	2300      	movs	r3, #0
}
 802b040:	4618      	mov	r0, r3
 802b042:	3710      	adds	r7, #16
 802b044:	46bd      	mov	sp, r7
 802b046:	bd80      	pop	{r7, pc}

0802b048 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 802b048:	b480      	push	{r7}
 802b04a:	b085      	sub	sp, #20
 802b04c:	af00      	add	r7, sp, #0
 802b04e:	6078      	str	r0, [r7, #4]
 802b050:	460b      	mov	r3, r1
 802b052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b054:	687b      	ldr	r3, [r7, #4]
 802b056:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b058:	2300      	movs	r3, #0
 802b05a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b05c:	68fb      	ldr	r3, [r7, #12]
 802b05e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b062:	681b      	ldr	r3, [r3, #0]
 802b064:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 802b066:	68bb      	ldr	r3, [r7, #8]
 802b068:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 802b06c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 802b06e:	68bb      	ldr	r3, [r7, #8]
 802b070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b074:	2b00      	cmp	r3, #0
 802b076:	d109      	bne.n	802b08c <USB_DriveVbus+0x44>
 802b078:	78fb      	ldrb	r3, [r7, #3]
 802b07a:	2b01      	cmp	r3, #1
 802b07c:	d106      	bne.n	802b08c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 802b07e:	68bb      	ldr	r3, [r7, #8]
 802b080:	68fa      	ldr	r2, [r7, #12]
 802b082:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b086:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802b08a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 802b08c:	68bb      	ldr	r3, [r7, #8]
 802b08e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802b092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802b096:	d109      	bne.n	802b0ac <USB_DriveVbus+0x64>
 802b098:	78fb      	ldrb	r3, [r7, #3]
 802b09a:	2b00      	cmp	r3, #0
 802b09c:	d106      	bne.n	802b0ac <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 802b09e:	68bb      	ldr	r3, [r7, #8]
 802b0a0:	68fa      	ldr	r2, [r7, #12]
 802b0a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 802b0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b0aa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 802b0ac:	2300      	movs	r3, #0
}
 802b0ae:	4618      	mov	r0, r3
 802b0b0:	3714      	adds	r7, #20
 802b0b2:	46bd      	mov	sp, r7
 802b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0b8:	4770      	bx	lr

0802b0ba <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 802b0ba:	b480      	push	{r7}
 802b0bc:	b085      	sub	sp, #20
 802b0be:	af00      	add	r7, sp, #0
 802b0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0c2:	687b      	ldr	r3, [r7, #4]
 802b0c4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 802b0c6:	2300      	movs	r3, #0
 802b0c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 802b0ca:	68fb      	ldr	r3, [r7, #12]
 802b0cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 802b0d0:	681b      	ldr	r3, [r3, #0]
 802b0d2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 802b0d4:	68bb      	ldr	r3, [r7, #8]
 802b0d6:	0c5b      	lsrs	r3, r3, #17
 802b0d8:	f003 0303 	and.w	r3, r3, #3
}
 802b0dc:	4618      	mov	r0, r3
 802b0de:	3714      	adds	r7, #20
 802b0e0:	46bd      	mov	sp, r7
 802b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b0e6:	4770      	bx	lr

0802b0e8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 802b0e8:	b480      	push	{r7}
 802b0ea:	b085      	sub	sp, #20
 802b0ec:	af00      	add	r7, sp, #0
 802b0ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b0f0:	687b      	ldr	r3, [r7, #4]
 802b0f2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 802b0f4:	68fb      	ldr	r3, [r7, #12]
 802b0f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b0fa:	689b      	ldr	r3, [r3, #8]
 802b0fc:	b29b      	uxth	r3, r3
}
 802b0fe:	4618      	mov	r0, r3
 802b100:	3714      	adds	r7, #20
 802b102:	46bd      	mov	sp, r7
 802b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b108:	4770      	bx	lr
	...

0802b10c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 802b10c:	b580      	push	{r7, lr}
 802b10e:	b088      	sub	sp, #32
 802b110:	af00      	add	r7, sp, #0
 802b112:	6078      	str	r0, [r7, #4]
 802b114:	4608      	mov	r0, r1
 802b116:	4611      	mov	r1, r2
 802b118:	461a      	mov	r2, r3
 802b11a:	4603      	mov	r3, r0
 802b11c:	70fb      	strb	r3, [r7, #3]
 802b11e:	460b      	mov	r3, r1
 802b120:	70bb      	strb	r3, [r7, #2]
 802b122:	4613      	mov	r3, r2
 802b124:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 802b126:	2300      	movs	r3, #0
 802b128:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b12a:	687b      	ldr	r3, [r7, #4]
 802b12c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 802b12e:	78fb      	ldrb	r3, [r7, #3]
 802b130:	015a      	lsls	r2, r3, #5
 802b132:	693b      	ldr	r3, [r7, #16]
 802b134:	4413      	add	r3, r2
 802b136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b13a:	461a      	mov	r2, r3
 802b13c:	f04f 33ff 	mov.w	r3, #4294967295
 802b140:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 802b142:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b146:	2b03      	cmp	r3, #3
 802b148:	d87e      	bhi.n	802b248 <USB_HC_Init+0x13c>
 802b14a:	a201      	add	r2, pc, #4	; (adr r2, 802b150 <USB_HC_Init+0x44>)
 802b14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b150:	0802b161 	.word	0x0802b161
 802b154:	0802b20b 	.word	0x0802b20b
 802b158:	0802b161 	.word	0x0802b161
 802b15c:	0802b1cd 	.word	0x0802b1cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b160:	78fb      	ldrb	r3, [r7, #3]
 802b162:	015a      	lsls	r2, r3, #5
 802b164:	693b      	ldr	r3, [r7, #16]
 802b166:	4413      	add	r3, r2
 802b168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b16c:	461a      	mov	r2, r3
 802b16e:	f240 439d 	movw	r3, #1181	; 0x49d
 802b172:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 802b174:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b178:	2b00      	cmp	r3, #0
 802b17a:	da10      	bge.n	802b19e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b17c:	78fb      	ldrb	r3, [r7, #3]
 802b17e:	015a      	lsls	r2, r3, #5
 802b180:	693b      	ldr	r3, [r7, #16]
 802b182:	4413      	add	r3, r2
 802b184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b188:	68db      	ldr	r3, [r3, #12]
 802b18a:	78fa      	ldrb	r2, [r7, #3]
 802b18c:	0151      	lsls	r1, r2, #5
 802b18e:	693a      	ldr	r2, [r7, #16]
 802b190:	440a      	add	r2, r1
 802b192:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b19a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 802b19c:	e057      	b.n	802b24e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 802b19e:	687b      	ldr	r3, [r7, #4]
 802b1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b1a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b1a6:	2b00      	cmp	r3, #0
 802b1a8:	d051      	beq.n	802b24e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 802b1aa:	78fb      	ldrb	r3, [r7, #3]
 802b1ac:	015a      	lsls	r2, r3, #5
 802b1ae:	693b      	ldr	r3, [r7, #16]
 802b1b0:	4413      	add	r3, r2
 802b1b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b1b6:	68db      	ldr	r3, [r3, #12]
 802b1b8:	78fa      	ldrb	r2, [r7, #3]
 802b1ba:	0151      	lsls	r1, r2, #5
 802b1bc:	693a      	ldr	r2, [r7, #16]
 802b1be:	440a      	add	r2, r1
 802b1c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b1c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 802b1c8:	60d3      	str	r3, [r2, #12]
      break;
 802b1ca:	e040      	b.n	802b24e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b1cc:	78fb      	ldrb	r3, [r7, #3]
 802b1ce:	015a      	lsls	r2, r3, #5
 802b1d0:	693b      	ldr	r3, [r7, #16]
 802b1d2:	4413      	add	r3, r2
 802b1d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b1d8:	461a      	mov	r2, r3
 802b1da:	f240 639d 	movw	r3, #1693	; 0x69d
 802b1de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b1e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b1e4:	2b00      	cmp	r3, #0
 802b1e6:	da34      	bge.n	802b252 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 802b1e8:	78fb      	ldrb	r3, [r7, #3]
 802b1ea:	015a      	lsls	r2, r3, #5
 802b1ec:	693b      	ldr	r3, [r7, #16]
 802b1ee:	4413      	add	r3, r2
 802b1f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b1f4:	68db      	ldr	r3, [r3, #12]
 802b1f6:	78fa      	ldrb	r2, [r7, #3]
 802b1f8:	0151      	lsls	r1, r2, #5
 802b1fa:	693a      	ldr	r2, [r7, #16]
 802b1fc:	440a      	add	r2, r1
 802b1fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802b206:	60d3      	str	r3, [r2, #12]
      }

      break;
 802b208:	e023      	b.n	802b252 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 802b20a:	78fb      	ldrb	r3, [r7, #3]
 802b20c:	015a      	lsls	r2, r3, #5
 802b20e:	693b      	ldr	r3, [r7, #16]
 802b210:	4413      	add	r3, r2
 802b212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b216:	461a      	mov	r2, r3
 802b218:	f240 2325 	movw	r3, #549	; 0x225
 802b21c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 802b21e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b222:	2b00      	cmp	r3, #0
 802b224:	da17      	bge.n	802b256 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 802b226:	78fb      	ldrb	r3, [r7, #3]
 802b228:	015a      	lsls	r2, r3, #5
 802b22a:	693b      	ldr	r3, [r7, #16]
 802b22c:	4413      	add	r3, r2
 802b22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b232:	68db      	ldr	r3, [r3, #12]
 802b234:	78fa      	ldrb	r2, [r7, #3]
 802b236:	0151      	lsls	r1, r2, #5
 802b238:	693a      	ldr	r2, [r7, #16]
 802b23a:	440a      	add	r2, r1
 802b23c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b240:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 802b244:	60d3      	str	r3, [r2, #12]
      }
      break;
 802b246:	e006      	b.n	802b256 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 802b248:	2301      	movs	r3, #1
 802b24a:	77fb      	strb	r3, [r7, #31]
      break;
 802b24c:	e004      	b.n	802b258 <USB_HC_Init+0x14c>
      break;
 802b24e:	bf00      	nop
 802b250:	e002      	b.n	802b258 <USB_HC_Init+0x14c>
      break;
 802b252:	bf00      	nop
 802b254:	e000      	b.n	802b258 <USB_HC_Init+0x14c>
      break;
 802b256:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 802b258:	78fb      	ldrb	r3, [r7, #3]
 802b25a:	015a      	lsls	r2, r3, #5
 802b25c:	693b      	ldr	r3, [r7, #16]
 802b25e:	4413      	add	r3, r2
 802b260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b264:	68db      	ldr	r3, [r3, #12]
 802b266:	78fa      	ldrb	r2, [r7, #3]
 802b268:	0151      	lsls	r1, r2, #5
 802b26a:	693a      	ldr	r2, [r7, #16]
 802b26c:	440a      	add	r2, r1
 802b26e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b272:	f043 0302 	orr.w	r3, r3, #2
 802b276:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 802b278:	693b      	ldr	r3, [r7, #16]
 802b27a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b27e:	699a      	ldr	r2, [r3, #24]
 802b280:	78fb      	ldrb	r3, [r7, #3]
 802b282:	f003 030f 	and.w	r3, r3, #15
 802b286:	2101      	movs	r1, #1
 802b288:	fa01 f303 	lsl.w	r3, r1, r3
 802b28c:	6939      	ldr	r1, [r7, #16]
 802b28e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 802b292:	4313      	orrs	r3, r2
 802b294:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 802b296:	687b      	ldr	r3, [r7, #4]
 802b298:	699b      	ldr	r3, [r3, #24]
 802b29a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 802b29e:	687b      	ldr	r3, [r7, #4]
 802b2a0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 802b2a2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 802b2a6:	2b00      	cmp	r3, #0
 802b2a8:	da03      	bge.n	802b2b2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 802b2aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802b2ae:	61bb      	str	r3, [r7, #24]
 802b2b0:	e001      	b.n	802b2b6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 802b2b2:	2300      	movs	r3, #0
 802b2b4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 802b2b6:	6878      	ldr	r0, [r7, #4]
 802b2b8:	f7ff feff 	bl	802b0ba <USB_GetHostSpeed>
 802b2bc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 802b2be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802b2c2:	2b02      	cmp	r3, #2
 802b2c4:	d106      	bne.n	802b2d4 <USB_HC_Init+0x1c8>
 802b2c6:	68fb      	ldr	r3, [r7, #12]
 802b2c8:	2b02      	cmp	r3, #2
 802b2ca:	d003      	beq.n	802b2d4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 802b2cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 802b2d0:	617b      	str	r3, [r7, #20]
 802b2d2:	e001      	b.n	802b2d8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 802b2d4:	2300      	movs	r3, #0
 802b2d6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b2d8:	787b      	ldrb	r3, [r7, #1]
 802b2da:	059b      	lsls	r3, r3, #22
 802b2dc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b2e0:	78bb      	ldrb	r3, [r7, #2]
 802b2e2:	02db      	lsls	r3, r3, #11
 802b2e4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b2e8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b2ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b2ee:	049b      	lsls	r3, r3, #18
 802b2f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 802b2f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b2f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 802b2f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 802b2fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b2fe:	69bb      	ldr	r3, [r7, #24]
 802b300:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b302:	78fb      	ldrb	r3, [r7, #3]
 802b304:	0159      	lsls	r1, r3, #5
 802b306:	693b      	ldr	r3, [r7, #16]
 802b308:	440b      	add	r3, r1
 802b30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b30e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 802b310:	697b      	ldr	r3, [r7, #20]
 802b312:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 802b314:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 802b316:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b31a:	2b03      	cmp	r3, #3
 802b31c:	d003      	beq.n	802b326 <USB_HC_Init+0x21a>
 802b31e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802b322:	2b01      	cmp	r3, #1
 802b324:	d10f      	bne.n	802b346 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 802b326:	78fb      	ldrb	r3, [r7, #3]
 802b328:	015a      	lsls	r2, r3, #5
 802b32a:	693b      	ldr	r3, [r7, #16]
 802b32c:	4413      	add	r3, r2
 802b32e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b332:	681b      	ldr	r3, [r3, #0]
 802b334:	78fa      	ldrb	r2, [r7, #3]
 802b336:	0151      	lsls	r1, r2, #5
 802b338:	693a      	ldr	r2, [r7, #16]
 802b33a:	440a      	add	r2, r1
 802b33c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b340:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802b344:	6013      	str	r3, [r2, #0]
  }

  return ret;
 802b346:	7ffb      	ldrb	r3, [r7, #31]
}
 802b348:	4618      	mov	r0, r3
 802b34a:	3720      	adds	r7, #32
 802b34c:	46bd      	mov	sp, r7
 802b34e:	bd80      	pop	{r7, pc}

0802b350 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 802b350:	b580      	push	{r7, lr}
 802b352:	b08c      	sub	sp, #48	; 0x30
 802b354:	af02      	add	r7, sp, #8
 802b356:	60f8      	str	r0, [r7, #12]
 802b358:	60b9      	str	r1, [r7, #8]
 802b35a:	4613      	mov	r3, r2
 802b35c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b35e:	68fb      	ldr	r3, [r7, #12]
 802b360:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 802b362:	68bb      	ldr	r3, [r7, #8]
 802b364:	785b      	ldrb	r3, [r3, #1]
 802b366:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 802b368:	f44f 7380 	mov.w	r3, #256	; 0x100
 802b36c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 802b36e:	68fb      	ldr	r3, [r7, #12]
 802b370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802b372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802b376:	2b00      	cmp	r3, #0
 802b378:	d02d      	beq.n	802b3d6 <USB_HC_StartXfer+0x86>
 802b37a:	68bb      	ldr	r3, [r7, #8]
 802b37c:	791b      	ldrb	r3, [r3, #4]
 802b37e:	2b00      	cmp	r3, #0
 802b380:	d129      	bne.n	802b3d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 802b382:	79fb      	ldrb	r3, [r7, #7]
 802b384:	2b01      	cmp	r3, #1
 802b386:	d117      	bne.n	802b3b8 <USB_HC_StartXfer+0x68>
 802b388:	68bb      	ldr	r3, [r7, #8]
 802b38a:	79db      	ldrb	r3, [r3, #7]
 802b38c:	2b00      	cmp	r3, #0
 802b38e:	d003      	beq.n	802b398 <USB_HC_StartXfer+0x48>
 802b390:	68bb      	ldr	r3, [r7, #8]
 802b392:	79db      	ldrb	r3, [r3, #7]
 802b394:	2b02      	cmp	r3, #2
 802b396:	d10f      	bne.n	802b3b8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 802b398:	69fb      	ldr	r3, [r7, #28]
 802b39a:	015a      	lsls	r2, r3, #5
 802b39c:	6a3b      	ldr	r3, [r7, #32]
 802b39e:	4413      	add	r3, r2
 802b3a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b3a4:	68db      	ldr	r3, [r3, #12]
 802b3a6:	69fa      	ldr	r2, [r7, #28]
 802b3a8:	0151      	lsls	r1, r2, #5
 802b3aa:	6a3a      	ldr	r2, [r7, #32]
 802b3ac:	440a      	add	r2, r1
 802b3ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b3b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802b3b6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 802b3b8:	79fb      	ldrb	r3, [r7, #7]
 802b3ba:	2b00      	cmp	r3, #0
 802b3bc:	d10b      	bne.n	802b3d6 <USB_HC_StartXfer+0x86>
 802b3be:	68bb      	ldr	r3, [r7, #8]
 802b3c0:	795b      	ldrb	r3, [r3, #5]
 802b3c2:	2b01      	cmp	r3, #1
 802b3c4:	d107      	bne.n	802b3d6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 802b3c6:	68bb      	ldr	r3, [r7, #8]
 802b3c8:	785b      	ldrb	r3, [r3, #1]
 802b3ca:	4619      	mov	r1, r3
 802b3cc:	68f8      	ldr	r0, [r7, #12]
 802b3ce:	f000 fa0f 	bl	802b7f0 <USB_DoPing>
      return HAL_OK;
 802b3d2:	2300      	movs	r3, #0
 802b3d4:	e0f8      	b.n	802b5c8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 802b3d6:	68bb      	ldr	r3, [r7, #8]
 802b3d8:	695b      	ldr	r3, [r3, #20]
 802b3da:	2b00      	cmp	r3, #0
 802b3dc:	d018      	beq.n	802b410 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 802b3de:	68bb      	ldr	r3, [r7, #8]
 802b3e0:	695b      	ldr	r3, [r3, #20]
 802b3e2:	68ba      	ldr	r2, [r7, #8]
 802b3e4:	8912      	ldrh	r2, [r2, #8]
 802b3e6:	4413      	add	r3, r2
 802b3e8:	3b01      	subs	r3, #1
 802b3ea:	68ba      	ldr	r2, [r7, #8]
 802b3ec:	8912      	ldrh	r2, [r2, #8]
 802b3ee:	fbb3 f3f2 	udiv	r3, r3, r2
 802b3f2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 802b3f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802b3f6:	8b7b      	ldrh	r3, [r7, #26]
 802b3f8:	429a      	cmp	r2, r3
 802b3fa:	d90b      	bls.n	802b414 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 802b3fc:	8b7b      	ldrh	r3, [r7, #26]
 802b3fe:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b402:	68ba      	ldr	r2, [r7, #8]
 802b404:	8912      	ldrh	r2, [r2, #8]
 802b406:	fb03 f202 	mul.w	r2, r3, r2
 802b40a:	68bb      	ldr	r3, [r7, #8]
 802b40c:	611a      	str	r2, [r3, #16]
 802b40e:	e001      	b.n	802b414 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 802b410:	2301      	movs	r3, #1
 802b412:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 802b414:	68bb      	ldr	r3, [r7, #8]
 802b416:	78db      	ldrb	r3, [r3, #3]
 802b418:	2b00      	cmp	r3, #0
 802b41a:	d007      	beq.n	802b42c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 802b41c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b41e:	68ba      	ldr	r2, [r7, #8]
 802b420:	8912      	ldrh	r2, [r2, #8]
 802b422:	fb03 f202 	mul.w	r2, r3, r2
 802b426:	68bb      	ldr	r3, [r7, #8]
 802b428:	611a      	str	r2, [r3, #16]
 802b42a:	e003      	b.n	802b434 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 802b42c:	68bb      	ldr	r3, [r7, #8]
 802b42e:	695a      	ldr	r2, [r3, #20]
 802b430:	68bb      	ldr	r3, [r7, #8]
 802b432:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b434:	68bb      	ldr	r3, [r7, #8]
 802b436:	691b      	ldr	r3, [r3, #16]
 802b438:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b43c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802b43e:	04d9      	lsls	r1, r3, #19
 802b440:	4b63      	ldr	r3, [pc, #396]	; (802b5d0 <USB_HC_StartXfer+0x280>)
 802b442:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b444:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 802b446:	68bb      	ldr	r3, [r7, #8]
 802b448:	7a9b      	ldrb	r3, [r3, #10]
 802b44a:	075b      	lsls	r3, r3, #29
 802b44c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b450:	69f9      	ldr	r1, [r7, #28]
 802b452:	0148      	lsls	r0, r1, #5
 802b454:	6a39      	ldr	r1, [r7, #32]
 802b456:	4401      	add	r1, r0
 802b458:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b45c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 802b45e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 802b460:	79fb      	ldrb	r3, [r7, #7]
 802b462:	2b00      	cmp	r3, #0
 802b464:	d009      	beq.n	802b47a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 802b466:	68bb      	ldr	r3, [r7, #8]
 802b468:	68d9      	ldr	r1, [r3, #12]
 802b46a:	69fb      	ldr	r3, [r7, #28]
 802b46c:	015a      	lsls	r2, r3, #5
 802b46e:	6a3b      	ldr	r3, [r7, #32]
 802b470:	4413      	add	r3, r2
 802b472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b476:	460a      	mov	r2, r1
 802b478:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 802b47a:	6a3b      	ldr	r3, [r7, #32]
 802b47c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b480:	689b      	ldr	r3, [r3, #8]
 802b482:	f003 0301 	and.w	r3, r3, #1
 802b486:	2b00      	cmp	r3, #0
 802b488:	bf0c      	ite	eq
 802b48a:	2301      	moveq	r3, #1
 802b48c:	2300      	movne	r3, #0
 802b48e:	b2db      	uxtb	r3, r3
 802b490:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 802b492:	69fb      	ldr	r3, [r7, #28]
 802b494:	015a      	lsls	r2, r3, #5
 802b496:	6a3b      	ldr	r3, [r7, #32]
 802b498:	4413      	add	r3, r2
 802b49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b49e:	681b      	ldr	r3, [r3, #0]
 802b4a0:	69fa      	ldr	r2, [r7, #28]
 802b4a2:	0151      	lsls	r1, r2, #5
 802b4a4:	6a3a      	ldr	r2, [r7, #32]
 802b4a6:	440a      	add	r2, r1
 802b4a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b4ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802b4b0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 802b4b2:	69fb      	ldr	r3, [r7, #28]
 802b4b4:	015a      	lsls	r2, r3, #5
 802b4b6:	6a3b      	ldr	r3, [r7, #32]
 802b4b8:	4413      	add	r3, r2
 802b4ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b4be:	681a      	ldr	r2, [r3, #0]
 802b4c0:	7e7b      	ldrb	r3, [r7, #25]
 802b4c2:	075b      	lsls	r3, r3, #29
 802b4c4:	69f9      	ldr	r1, [r7, #28]
 802b4c6:	0148      	lsls	r0, r1, #5
 802b4c8:	6a39      	ldr	r1, [r7, #32]
 802b4ca:	4401      	add	r1, r0
 802b4cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 802b4d0:	4313      	orrs	r3, r2
 802b4d2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 802b4d4:	69fb      	ldr	r3, [r7, #28]
 802b4d6:	015a      	lsls	r2, r3, #5
 802b4d8:	6a3b      	ldr	r3, [r7, #32]
 802b4da:	4413      	add	r3, r2
 802b4dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b4e0:	681b      	ldr	r3, [r3, #0]
 802b4e2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b4e4:	693b      	ldr	r3, [r7, #16]
 802b4e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b4ea:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 802b4ec:	68bb      	ldr	r3, [r7, #8]
 802b4ee:	78db      	ldrb	r3, [r3, #3]
 802b4f0:	2b00      	cmp	r3, #0
 802b4f2:	d004      	beq.n	802b4fe <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 802b4f4:	693b      	ldr	r3, [r7, #16]
 802b4f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802b4fa:	613b      	str	r3, [r7, #16]
 802b4fc:	e003      	b.n	802b506 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 802b4fe:	693b      	ldr	r3, [r7, #16]
 802b500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b504:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b506:	693b      	ldr	r3, [r7, #16]
 802b508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b50c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 802b50e:	69fb      	ldr	r3, [r7, #28]
 802b510:	015a      	lsls	r2, r3, #5
 802b512:	6a3b      	ldr	r3, [r7, #32]
 802b514:	4413      	add	r3, r2
 802b516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b51a:	461a      	mov	r2, r3
 802b51c:	693b      	ldr	r3, [r7, #16]
 802b51e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 802b520:	79fb      	ldrb	r3, [r7, #7]
 802b522:	2b00      	cmp	r3, #0
 802b524:	d001      	beq.n	802b52a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 802b526:	2300      	movs	r3, #0
 802b528:	e04e      	b.n	802b5c8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 802b52a:	68bb      	ldr	r3, [r7, #8]
 802b52c:	78db      	ldrb	r3, [r3, #3]
 802b52e:	2b00      	cmp	r3, #0
 802b530:	d149      	bne.n	802b5c6 <USB_HC_StartXfer+0x276>
 802b532:	68bb      	ldr	r3, [r7, #8]
 802b534:	695b      	ldr	r3, [r3, #20]
 802b536:	2b00      	cmp	r3, #0
 802b538:	d045      	beq.n	802b5c6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 802b53a:	68bb      	ldr	r3, [r7, #8]
 802b53c:	79db      	ldrb	r3, [r3, #7]
 802b53e:	2b03      	cmp	r3, #3
 802b540:	d830      	bhi.n	802b5a4 <USB_HC_StartXfer+0x254>
 802b542:	a201      	add	r2, pc, #4	; (adr r2, 802b548 <USB_HC_StartXfer+0x1f8>)
 802b544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802b548:	0802b559 	.word	0x0802b559
 802b54c:	0802b57d 	.word	0x0802b57d
 802b550:	0802b559 	.word	0x0802b559
 802b554:	0802b57d 	.word	0x0802b57d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b558:	68bb      	ldr	r3, [r7, #8]
 802b55a:	695b      	ldr	r3, [r3, #20]
 802b55c:	3303      	adds	r3, #3
 802b55e:	089b      	lsrs	r3, r3, #2
 802b560:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 802b562:	8afa      	ldrh	r2, [r7, #22]
 802b564:	68fb      	ldr	r3, [r7, #12]
 802b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b568:	b29b      	uxth	r3, r3
 802b56a:	429a      	cmp	r2, r3
 802b56c:	d91c      	bls.n	802b5a8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 802b56e:	68fb      	ldr	r3, [r7, #12]
 802b570:	699b      	ldr	r3, [r3, #24]
 802b572:	f043 0220 	orr.w	r2, r3, #32
 802b576:	68fb      	ldr	r3, [r7, #12]
 802b578:	619a      	str	r2, [r3, #24]
        }
        break;
 802b57a:	e015      	b.n	802b5a8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 802b57c:	68bb      	ldr	r3, [r7, #8]
 802b57e:	695b      	ldr	r3, [r3, #20]
 802b580:	3303      	adds	r3, #3
 802b582:	089b      	lsrs	r3, r3, #2
 802b584:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 802b586:	8afa      	ldrh	r2, [r7, #22]
 802b588:	6a3b      	ldr	r3, [r7, #32]
 802b58a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b58e:	691b      	ldr	r3, [r3, #16]
 802b590:	b29b      	uxth	r3, r3
 802b592:	429a      	cmp	r2, r3
 802b594:	d90a      	bls.n	802b5ac <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 802b596:	68fb      	ldr	r3, [r7, #12]
 802b598:	699b      	ldr	r3, [r3, #24]
 802b59a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 802b59e:	68fb      	ldr	r3, [r7, #12]
 802b5a0:	619a      	str	r2, [r3, #24]
        }
        break;
 802b5a2:	e003      	b.n	802b5ac <USB_HC_StartXfer+0x25c>

      default:
        break;
 802b5a4:	bf00      	nop
 802b5a6:	e002      	b.n	802b5ae <USB_HC_StartXfer+0x25e>
        break;
 802b5a8:	bf00      	nop
 802b5aa:	e000      	b.n	802b5ae <USB_HC_StartXfer+0x25e>
        break;
 802b5ac:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 802b5ae:	68bb      	ldr	r3, [r7, #8]
 802b5b0:	68d9      	ldr	r1, [r3, #12]
 802b5b2:	68bb      	ldr	r3, [r7, #8]
 802b5b4:	785a      	ldrb	r2, [r3, #1]
 802b5b6:	68bb      	ldr	r3, [r7, #8]
 802b5b8:	695b      	ldr	r3, [r3, #20]
 802b5ba:	b29b      	uxth	r3, r3
 802b5bc:	2000      	movs	r0, #0
 802b5be:	9000      	str	r0, [sp, #0]
 802b5c0:	68f8      	ldr	r0, [r7, #12]
 802b5c2:	f7ff fb31 	bl	802ac28 <USB_WritePacket>
  }

  return HAL_OK;
 802b5c6:	2300      	movs	r3, #0
}
 802b5c8:	4618      	mov	r0, r3
 802b5ca:	3728      	adds	r7, #40	; 0x28
 802b5cc:	46bd      	mov	sp, r7
 802b5ce:	bd80      	pop	{r7, pc}
 802b5d0:	1ff80000 	.word	0x1ff80000

0802b5d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 802b5d4:	b480      	push	{r7}
 802b5d6:	b085      	sub	sp, #20
 802b5d8:	af00      	add	r7, sp, #0
 802b5da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b5dc:	687b      	ldr	r3, [r7, #4]
 802b5de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 802b5e0:	68fb      	ldr	r3, [r7, #12]
 802b5e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b5e6:	695b      	ldr	r3, [r3, #20]
 802b5e8:	b29b      	uxth	r3, r3
}
 802b5ea:	4618      	mov	r0, r3
 802b5ec:	3714      	adds	r7, #20
 802b5ee:	46bd      	mov	sp, r7
 802b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5f4:	4770      	bx	lr

0802b5f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 802b5f6:	b480      	push	{r7}
 802b5f8:	b089      	sub	sp, #36	; 0x24
 802b5fa:	af00      	add	r7, sp, #0
 802b5fc:	6078      	str	r0, [r7, #4]
 802b5fe:	460b      	mov	r3, r1
 802b600:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b602:	687b      	ldr	r3, [r7, #4]
 802b604:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 802b606:	78fb      	ldrb	r3, [r7, #3]
 802b608:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 802b60a:	2300      	movs	r3, #0
 802b60c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 802b60e:	69bb      	ldr	r3, [r7, #24]
 802b610:	015a      	lsls	r2, r3, #5
 802b612:	69fb      	ldr	r3, [r7, #28]
 802b614:	4413      	add	r3, r2
 802b616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b61a:	681b      	ldr	r3, [r3, #0]
 802b61c:	0c9b      	lsrs	r3, r3, #18
 802b61e:	f003 0303 	and.w	r3, r3, #3
 802b622:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 802b624:	69bb      	ldr	r3, [r7, #24]
 802b626:	015a      	lsls	r2, r3, #5
 802b628:	69fb      	ldr	r3, [r7, #28]
 802b62a:	4413      	add	r3, r2
 802b62c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b630:	681b      	ldr	r3, [r3, #0]
 802b632:	0fdb      	lsrs	r3, r3, #31
 802b634:	f003 0301 	and.w	r3, r3, #1
 802b638:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 802b63a:	687b      	ldr	r3, [r7, #4]
 802b63c:	689b      	ldr	r3, [r3, #8]
 802b63e:	f003 0320 	and.w	r3, r3, #32
 802b642:	2b20      	cmp	r3, #32
 802b644:	d104      	bne.n	802b650 <USB_HC_Halt+0x5a>
 802b646:	693b      	ldr	r3, [r7, #16]
 802b648:	2b00      	cmp	r3, #0
 802b64a:	d101      	bne.n	802b650 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 802b64c:	2300      	movs	r3, #0
 802b64e:	e0c8      	b.n	802b7e2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 802b650:	697b      	ldr	r3, [r7, #20]
 802b652:	2b00      	cmp	r3, #0
 802b654:	d002      	beq.n	802b65c <USB_HC_Halt+0x66>
 802b656:	697b      	ldr	r3, [r7, #20]
 802b658:	2b02      	cmp	r3, #2
 802b65a:	d163      	bne.n	802b724 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b65c:	69bb      	ldr	r3, [r7, #24]
 802b65e:	015a      	lsls	r2, r3, #5
 802b660:	69fb      	ldr	r3, [r7, #28]
 802b662:	4413      	add	r3, r2
 802b664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b668:	681b      	ldr	r3, [r3, #0]
 802b66a:	69ba      	ldr	r2, [r7, #24]
 802b66c:	0151      	lsls	r1, r2, #5
 802b66e:	69fa      	ldr	r2, [r7, #28]
 802b670:	440a      	add	r2, r1
 802b672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b67a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b67c:	687b      	ldr	r3, [r7, #4]
 802b67e:	689b      	ldr	r3, [r3, #8]
 802b680:	f003 0320 	and.w	r3, r3, #32
 802b684:	2b00      	cmp	r3, #0
 802b686:	f040 80ab 	bne.w	802b7e0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 802b68a:	687b      	ldr	r3, [r7, #4]
 802b68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802b68e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b692:	2b00      	cmp	r3, #0
 802b694:	d133      	bne.n	802b6fe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b696:	69bb      	ldr	r3, [r7, #24]
 802b698:	015a      	lsls	r2, r3, #5
 802b69a:	69fb      	ldr	r3, [r7, #28]
 802b69c:	4413      	add	r3, r2
 802b69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6a2:	681b      	ldr	r3, [r3, #0]
 802b6a4:	69ba      	ldr	r2, [r7, #24]
 802b6a6:	0151      	lsls	r1, r2, #5
 802b6a8:	69fa      	ldr	r2, [r7, #28]
 802b6aa:	440a      	add	r2, r1
 802b6ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b6b4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b6b6:	69bb      	ldr	r3, [r7, #24]
 802b6b8:	015a      	lsls	r2, r3, #5
 802b6ba:	69fb      	ldr	r3, [r7, #28]
 802b6bc:	4413      	add	r3, r2
 802b6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6c2:	681b      	ldr	r3, [r3, #0]
 802b6c4:	69ba      	ldr	r2, [r7, #24]
 802b6c6:	0151      	lsls	r1, r2, #5
 802b6c8:	69fa      	ldr	r2, [r7, #28]
 802b6ca:	440a      	add	r2, r1
 802b6cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b6d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b6d4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 802b6d6:	68fb      	ldr	r3, [r7, #12]
 802b6d8:	3301      	adds	r3, #1
 802b6da:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 802b6dc:	68fb      	ldr	r3, [r7, #12]
 802b6de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b6e2:	d81d      	bhi.n	802b720 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b6e4:	69bb      	ldr	r3, [r7, #24]
 802b6e6:	015a      	lsls	r2, r3, #5
 802b6e8:	69fb      	ldr	r3, [r7, #28]
 802b6ea:	4413      	add	r3, r2
 802b6ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b6f0:	681b      	ldr	r3, [r3, #0]
 802b6f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b6f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b6fa:	d0ec      	beq.n	802b6d6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b6fc:	e070      	b.n	802b7e0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b6fe:	69bb      	ldr	r3, [r7, #24]
 802b700:	015a      	lsls	r2, r3, #5
 802b702:	69fb      	ldr	r3, [r7, #28]
 802b704:	4413      	add	r3, r2
 802b706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b70a:	681b      	ldr	r3, [r3, #0]
 802b70c:	69ba      	ldr	r2, [r7, #24]
 802b70e:	0151      	lsls	r1, r2, #5
 802b710:	69fa      	ldr	r2, [r7, #28]
 802b712:	440a      	add	r2, r1
 802b714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b71c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b71e:	e05f      	b.n	802b7e0 <USB_HC_Halt+0x1ea>
            break;
 802b720:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 802b722:	e05d      	b.n	802b7e0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 802b724:	69bb      	ldr	r3, [r7, #24]
 802b726:	015a      	lsls	r2, r3, #5
 802b728:	69fb      	ldr	r3, [r7, #28]
 802b72a:	4413      	add	r3, r2
 802b72c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b730:	681b      	ldr	r3, [r3, #0]
 802b732:	69ba      	ldr	r2, [r7, #24]
 802b734:	0151      	lsls	r1, r2, #5
 802b736:	69fa      	ldr	r2, [r7, #28]
 802b738:	440a      	add	r2, r1
 802b73a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b73e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b742:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 802b744:	69fb      	ldr	r3, [r7, #28]
 802b746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b74a:	691b      	ldr	r3, [r3, #16]
 802b74c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b750:	2b00      	cmp	r3, #0
 802b752:	d133      	bne.n	802b7bc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 802b754:	69bb      	ldr	r3, [r7, #24]
 802b756:	015a      	lsls	r2, r3, #5
 802b758:	69fb      	ldr	r3, [r7, #28]
 802b75a:	4413      	add	r3, r2
 802b75c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b760:	681b      	ldr	r3, [r3, #0]
 802b762:	69ba      	ldr	r2, [r7, #24]
 802b764:	0151      	lsls	r1, r2, #5
 802b766:	69fa      	ldr	r2, [r7, #28]
 802b768:	440a      	add	r2, r1
 802b76a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b76e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b772:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b774:	69bb      	ldr	r3, [r7, #24]
 802b776:	015a      	lsls	r2, r3, #5
 802b778:	69fb      	ldr	r3, [r7, #28]
 802b77a:	4413      	add	r3, r2
 802b77c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b780:	681b      	ldr	r3, [r3, #0]
 802b782:	69ba      	ldr	r2, [r7, #24]
 802b784:	0151      	lsls	r1, r2, #5
 802b786:	69fa      	ldr	r2, [r7, #28]
 802b788:	440a      	add	r2, r1
 802b78a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b78e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b792:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 802b794:	68fb      	ldr	r3, [r7, #12]
 802b796:	3301      	adds	r3, #1
 802b798:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 802b79a:	68fb      	ldr	r3, [r7, #12]
 802b79c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b7a0:	d81d      	bhi.n	802b7de <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b7a2:	69bb      	ldr	r3, [r7, #24]
 802b7a4:	015a      	lsls	r2, r3, #5
 802b7a6:	69fb      	ldr	r3, [r7, #28]
 802b7a8:	4413      	add	r3, r2
 802b7aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7ae:	681b      	ldr	r3, [r3, #0]
 802b7b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b7b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b7b8:	d0ec      	beq.n	802b794 <USB_HC_Halt+0x19e>
 802b7ba:	e011      	b.n	802b7e0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 802b7bc:	69bb      	ldr	r3, [r7, #24]
 802b7be:	015a      	lsls	r2, r3, #5
 802b7c0:	69fb      	ldr	r3, [r7, #28]
 802b7c2:	4413      	add	r3, r2
 802b7c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b7c8:	681b      	ldr	r3, [r3, #0]
 802b7ca:	69ba      	ldr	r2, [r7, #24]
 802b7cc:	0151      	lsls	r1, r2, #5
 802b7ce:	69fa      	ldr	r2, [r7, #28]
 802b7d0:	440a      	add	r2, r1
 802b7d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b7d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b7da:	6013      	str	r3, [r2, #0]
 802b7dc:	e000      	b.n	802b7e0 <USB_HC_Halt+0x1ea>
          break;
 802b7de:	bf00      	nop
    }
  }

  return HAL_OK;
 802b7e0:	2300      	movs	r3, #0
}
 802b7e2:	4618      	mov	r0, r3
 802b7e4:	3724      	adds	r7, #36	; 0x24
 802b7e6:	46bd      	mov	sp, r7
 802b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b7ec:	4770      	bx	lr
	...

0802b7f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 802b7f0:	b480      	push	{r7}
 802b7f2:	b087      	sub	sp, #28
 802b7f4:	af00      	add	r7, sp, #0
 802b7f6:	6078      	str	r0, [r7, #4]
 802b7f8:	460b      	mov	r3, r1
 802b7fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b7fc:	687b      	ldr	r3, [r7, #4]
 802b7fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 802b800:	78fb      	ldrb	r3, [r7, #3]
 802b802:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 802b804:	2301      	movs	r3, #1
 802b806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 802b808:	68fb      	ldr	r3, [r7, #12]
 802b80a:	04da      	lsls	r2, r3, #19
 802b80c:	4b15      	ldr	r3, [pc, #84]	; (802b864 <USB_DoPing+0x74>)
 802b80e:	4013      	ands	r3, r2
 802b810:	693a      	ldr	r2, [r7, #16]
 802b812:	0151      	lsls	r1, r2, #5
 802b814:	697a      	ldr	r2, [r7, #20]
 802b816:	440a      	add	r2, r1
 802b818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 802b81c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b820:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 802b822:	693b      	ldr	r3, [r7, #16]
 802b824:	015a      	lsls	r2, r3, #5
 802b826:	697b      	ldr	r3, [r7, #20]
 802b828:	4413      	add	r3, r2
 802b82a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b82e:	681b      	ldr	r3, [r3, #0]
 802b830:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 802b832:	68bb      	ldr	r3, [r7, #8]
 802b834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 802b838:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 802b83a:	68bb      	ldr	r3, [r7, #8]
 802b83c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b840:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 802b842:	693b      	ldr	r3, [r7, #16]
 802b844:	015a      	lsls	r2, r3, #5
 802b846:	697b      	ldr	r3, [r7, #20]
 802b848:	4413      	add	r3, r2
 802b84a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b84e:	461a      	mov	r2, r3
 802b850:	68bb      	ldr	r3, [r7, #8]
 802b852:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 802b854:	2300      	movs	r3, #0
}
 802b856:	4618      	mov	r0, r3
 802b858:	371c      	adds	r7, #28
 802b85a:	46bd      	mov	sp, r7
 802b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b860:	4770      	bx	lr
 802b862:	bf00      	nop
 802b864:	1ff80000 	.word	0x1ff80000

0802b868 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 802b868:	b580      	push	{r7, lr}
 802b86a:	b088      	sub	sp, #32
 802b86c:	af00      	add	r7, sp, #0
 802b86e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 802b870:	2300      	movs	r3, #0
 802b872:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 802b874:	687b      	ldr	r3, [r7, #4]
 802b876:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 802b878:	2300      	movs	r3, #0
 802b87a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 802b87c:	6878      	ldr	r0, [r7, #4]
 802b87e:	f7ff f911 	bl	802aaa4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 802b882:	2110      	movs	r1, #16
 802b884:	6878      	ldr	r0, [r7, #4]
 802b886:	f7ff f96b 	bl	802ab60 <USB_FlushTxFifo>
 802b88a:	4603      	mov	r3, r0
 802b88c:	2b00      	cmp	r3, #0
 802b88e:	d001      	beq.n	802b894 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 802b890:	2301      	movs	r3, #1
 802b892:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 802b894:	6878      	ldr	r0, [r7, #4]
 802b896:	f7ff f997 	bl	802abc8 <USB_FlushRxFifo>
 802b89a:	4603      	mov	r3, r0
 802b89c:	2b00      	cmp	r3, #0
 802b89e:	d001      	beq.n	802b8a4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 802b8a0:	2301      	movs	r3, #1
 802b8a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 802b8a4:	2300      	movs	r3, #0
 802b8a6:	61bb      	str	r3, [r7, #24]
 802b8a8:	e01f      	b.n	802b8ea <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 802b8aa:	69bb      	ldr	r3, [r7, #24]
 802b8ac:	015a      	lsls	r2, r3, #5
 802b8ae:	697b      	ldr	r3, [r7, #20]
 802b8b0:	4413      	add	r3, r2
 802b8b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b8b6:	681b      	ldr	r3, [r3, #0]
 802b8b8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 802b8ba:	693b      	ldr	r3, [r7, #16]
 802b8bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b8c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 802b8c2:	693b      	ldr	r3, [r7, #16]
 802b8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b8c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b8ca:	693b      	ldr	r3, [r7, #16]
 802b8cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b8d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b8d2:	69bb      	ldr	r3, [r7, #24]
 802b8d4:	015a      	lsls	r2, r3, #5
 802b8d6:	697b      	ldr	r3, [r7, #20]
 802b8d8:	4413      	add	r3, r2
 802b8da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b8de:	461a      	mov	r2, r3
 802b8e0:	693b      	ldr	r3, [r7, #16]
 802b8e2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 802b8e4:	69bb      	ldr	r3, [r7, #24]
 802b8e6:	3301      	adds	r3, #1
 802b8e8:	61bb      	str	r3, [r7, #24]
 802b8ea:	69bb      	ldr	r3, [r7, #24]
 802b8ec:	2b0f      	cmp	r3, #15
 802b8ee:	d9dc      	bls.n	802b8aa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 802b8f0:	2300      	movs	r3, #0
 802b8f2:	61bb      	str	r3, [r7, #24]
 802b8f4:	e034      	b.n	802b960 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 802b8f6:	69bb      	ldr	r3, [r7, #24]
 802b8f8:	015a      	lsls	r2, r3, #5
 802b8fa:	697b      	ldr	r3, [r7, #20]
 802b8fc:	4413      	add	r3, r2
 802b8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b902:	681b      	ldr	r3, [r3, #0]
 802b904:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 802b906:	693b      	ldr	r3, [r7, #16]
 802b908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802b90c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 802b90e:	693b      	ldr	r3, [r7, #16]
 802b910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802b914:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 802b916:	693b      	ldr	r3, [r7, #16]
 802b918:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 802b91c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 802b91e:	69bb      	ldr	r3, [r7, #24]
 802b920:	015a      	lsls	r2, r3, #5
 802b922:	697b      	ldr	r3, [r7, #20]
 802b924:	4413      	add	r3, r2
 802b926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b92a:	461a      	mov	r2, r3
 802b92c:	693b      	ldr	r3, [r7, #16]
 802b92e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 802b930:	68fb      	ldr	r3, [r7, #12]
 802b932:	3301      	adds	r3, #1
 802b934:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 802b936:	68fb      	ldr	r3, [r7, #12]
 802b938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802b93c:	d80c      	bhi.n	802b958 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 802b93e:	69bb      	ldr	r3, [r7, #24]
 802b940:	015a      	lsls	r2, r3, #5
 802b942:	697b      	ldr	r3, [r7, #20]
 802b944:	4413      	add	r3, r2
 802b946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 802b94a:	681b      	ldr	r3, [r3, #0]
 802b94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802b950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 802b954:	d0ec      	beq.n	802b930 <USB_StopHost+0xc8>
 802b956:	e000      	b.n	802b95a <USB_StopHost+0xf2>
        break;
 802b958:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 802b95a:	69bb      	ldr	r3, [r7, #24]
 802b95c:	3301      	adds	r3, #1
 802b95e:	61bb      	str	r3, [r7, #24]
 802b960:	69bb      	ldr	r3, [r7, #24]
 802b962:	2b0f      	cmp	r3, #15
 802b964:	d9c7      	bls.n	802b8f6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 802b966:	697b      	ldr	r3, [r7, #20]
 802b968:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 802b96c:	461a      	mov	r2, r3
 802b96e:	f04f 33ff 	mov.w	r3, #4294967295
 802b972:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 802b974:	687b      	ldr	r3, [r7, #4]
 802b976:	f04f 32ff 	mov.w	r2, #4294967295
 802b97a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 802b97c:	6878      	ldr	r0, [r7, #4]
 802b97e:	f7ff f880 	bl	802aa82 <USB_EnableGlobalInt>

  return ret;
 802b982:	7ffb      	ldrb	r3, [r7, #31]
}
 802b984:	4618      	mov	r0, r3
 802b986:	3720      	adds	r7, #32
 802b988:	46bd      	mov	sp, r7
 802b98a:	bd80      	pop	{r7, pc}

0802b98c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 802b98c:	b590      	push	{r4, r7, lr}
 802b98e:	b089      	sub	sp, #36	; 0x24
 802b990:	af04      	add	r7, sp, #16
 802b992:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 802b994:	2301      	movs	r3, #1
 802b996:	2202      	movs	r2, #2
 802b998:	2102      	movs	r1, #2
 802b99a:	6878      	ldr	r0, [r7, #4]
 802b99c:	f000 fc66 	bl	802c26c <USBH_FindInterface>
 802b9a0:	4603      	mov	r3, r0
 802b9a2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802b9a4:	7bfb      	ldrb	r3, [r7, #15]
 802b9a6:	2bff      	cmp	r3, #255	; 0xff
 802b9a8:	d002      	beq.n	802b9b0 <USBH_CDC_InterfaceInit+0x24>
 802b9aa:	7bfb      	ldrb	r3, [r7, #15]
 802b9ac:	2b01      	cmp	r3, #1
 802b9ae:	d901      	bls.n	802b9b4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802b9b0:	2302      	movs	r3, #2
 802b9b2:	e13d      	b.n	802bc30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 802b9b4:	7bfb      	ldrb	r3, [r7, #15]
 802b9b6:	4619      	mov	r1, r3
 802b9b8:	6878      	ldr	r0, [r7, #4]
 802b9ba:	f000 fc3b 	bl	802c234 <USBH_SelectInterface>
 802b9be:	4603      	mov	r3, r0
 802b9c0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 802b9c2:	7bbb      	ldrb	r3, [r7, #14]
 802b9c4:	2b00      	cmp	r3, #0
 802b9c6:	d001      	beq.n	802b9cc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 802b9c8:	2302      	movs	r3, #2
 802b9ca:	e131      	b.n	802bc30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 802b9cc:	687b      	ldr	r3, [r7, #4]
 802b9ce:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 802b9d2:	2050      	movs	r0, #80	; 0x50
 802b9d4:	f002 fb00 	bl	802dfd8 <malloc>
 802b9d8:	4603      	mov	r3, r0
 802b9da:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802b9dc:	687b      	ldr	r3, [r7, #4]
 802b9de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802b9e2:	69db      	ldr	r3, [r3, #28]
 802b9e4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 802b9e6:	68bb      	ldr	r3, [r7, #8]
 802b9e8:	2b00      	cmp	r3, #0
 802b9ea:	d101      	bne.n	802b9f0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 802b9ec:	2302      	movs	r3, #2
 802b9ee:	e11f      	b.n	802bc30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 802b9f0:	2250      	movs	r2, #80	; 0x50
 802b9f2:	2100      	movs	r1, #0
 802b9f4:	68b8      	ldr	r0, [r7, #8]
 802b9f6:	f002 faff 	bl	802dff8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802b9fa:	7bfb      	ldrb	r3, [r7, #15]
 802b9fc:	687a      	ldr	r2, [r7, #4]
 802b9fe:	211a      	movs	r1, #26
 802ba00:	fb01 f303 	mul.w	r3, r1, r3
 802ba04:	4413      	add	r3, r2
 802ba06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802ba0a:	781b      	ldrb	r3, [r3, #0]
 802ba0c:	b25b      	sxtb	r3, r3
 802ba0e:	2b00      	cmp	r3, #0
 802ba10:	da15      	bge.n	802ba3e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802ba12:	7bfb      	ldrb	r3, [r7, #15]
 802ba14:	687a      	ldr	r2, [r7, #4]
 802ba16:	211a      	movs	r1, #26
 802ba18:	fb01 f303 	mul.w	r3, r1, r3
 802ba1c:	4413      	add	r3, r2
 802ba1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802ba22:	781a      	ldrb	r2, [r3, #0]
 802ba24:	68bb      	ldr	r3, [r7, #8]
 802ba26:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802ba28:	7bfb      	ldrb	r3, [r7, #15]
 802ba2a:	687a      	ldr	r2, [r7, #4]
 802ba2c:	211a      	movs	r1, #26
 802ba2e:	fb01 f303 	mul.w	r3, r1, r3
 802ba32:	4413      	add	r3, r2
 802ba34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802ba38:	881a      	ldrh	r2, [r3, #0]
 802ba3a:	68bb      	ldr	r3, [r7, #8]
 802ba3c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 802ba3e:	68bb      	ldr	r3, [r7, #8]
 802ba40:	785b      	ldrb	r3, [r3, #1]
 802ba42:	4619      	mov	r1, r3
 802ba44:	6878      	ldr	r0, [r7, #4]
 802ba46:	f001 ff2c 	bl	802d8a2 <USBH_AllocPipe>
 802ba4a:	4603      	mov	r3, r0
 802ba4c:	461a      	mov	r2, r3
 802ba4e:	68bb      	ldr	r3, [r7, #8]
 802ba50:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 802ba52:	68bb      	ldr	r3, [r7, #8]
 802ba54:	7819      	ldrb	r1, [r3, #0]
 802ba56:	68bb      	ldr	r3, [r7, #8]
 802ba58:	7858      	ldrb	r0, [r3, #1]
 802ba5a:	687b      	ldr	r3, [r7, #4]
 802ba5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802ba60:	687b      	ldr	r3, [r7, #4]
 802ba62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802ba66:	68ba      	ldr	r2, [r7, #8]
 802ba68:	8952      	ldrh	r2, [r2, #10]
 802ba6a:	9202      	str	r2, [sp, #8]
 802ba6c:	2203      	movs	r2, #3
 802ba6e:	9201      	str	r2, [sp, #4]
 802ba70:	9300      	str	r3, [sp, #0]
 802ba72:	4623      	mov	r3, r4
 802ba74:	4602      	mov	r2, r0
 802ba76:	6878      	ldr	r0, [r7, #4]
 802ba78:	f001 fee4 	bl	802d844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 802ba7c:	68bb      	ldr	r3, [r7, #8]
 802ba7e:	781b      	ldrb	r3, [r3, #0]
 802ba80:	2200      	movs	r2, #0
 802ba82:	4619      	mov	r1, r3
 802ba84:	6878      	ldr	r0, [r7, #4]
 802ba86:	f002 f9f9 	bl	802de7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 802ba8a:	2300      	movs	r3, #0
 802ba8c:	2200      	movs	r2, #0
 802ba8e:	210a      	movs	r1, #10
 802ba90:	6878      	ldr	r0, [r7, #4]
 802ba92:	f000 fbeb 	bl	802c26c <USBH_FindInterface>
 802ba96:	4603      	mov	r3, r0
 802ba98:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 802ba9a:	7bfb      	ldrb	r3, [r7, #15]
 802ba9c:	2bff      	cmp	r3, #255	; 0xff
 802ba9e:	d002      	beq.n	802baa6 <USBH_CDC_InterfaceInit+0x11a>
 802baa0:	7bfb      	ldrb	r3, [r7, #15]
 802baa2:	2b01      	cmp	r3, #1
 802baa4:	d901      	bls.n	802baaa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 802baa6:	2302      	movs	r3, #2
 802baa8:	e0c2      	b.n	802bc30 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 802baaa:	7bfb      	ldrb	r3, [r7, #15]
 802baac:	687a      	ldr	r2, [r7, #4]
 802baae:	211a      	movs	r1, #26
 802bab0:	fb01 f303 	mul.w	r3, r1, r3
 802bab4:	4413      	add	r3, r2
 802bab6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802baba:	781b      	ldrb	r3, [r3, #0]
 802babc:	b25b      	sxtb	r3, r3
 802babe:	2b00      	cmp	r3, #0
 802bac0:	da16      	bge.n	802baf0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802bac2:	7bfb      	ldrb	r3, [r7, #15]
 802bac4:	687a      	ldr	r2, [r7, #4]
 802bac6:	211a      	movs	r1, #26
 802bac8:	fb01 f303 	mul.w	r3, r1, r3
 802bacc:	4413      	add	r3, r2
 802bace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bad2:	781a      	ldrb	r2, [r3, #0]
 802bad4:	68bb      	ldr	r3, [r7, #8]
 802bad6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bad8:	7bfb      	ldrb	r3, [r7, #15]
 802bada:	687a      	ldr	r2, [r7, #4]
 802badc:	211a      	movs	r1, #26
 802bade:	fb01 f303 	mul.w	r3, r1, r3
 802bae2:	4413      	add	r3, r2
 802bae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bae8:	881a      	ldrh	r2, [r3, #0]
 802baea:	68bb      	ldr	r3, [r7, #8]
 802baec:	835a      	strh	r2, [r3, #26]
 802baee:	e015      	b.n	802bb1c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 802baf0:	7bfb      	ldrb	r3, [r7, #15]
 802baf2:	687a      	ldr	r2, [r7, #4]
 802baf4:	211a      	movs	r1, #26
 802baf6:	fb01 f303 	mul.w	r3, r1, r3
 802bafa:	4413      	add	r3, r2
 802bafc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 802bb00:	781a      	ldrb	r2, [r3, #0]
 802bb02:	68bb      	ldr	r3, [r7, #8]
 802bb04:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 802bb06:	7bfb      	ldrb	r3, [r7, #15]
 802bb08:	687a      	ldr	r2, [r7, #4]
 802bb0a:	211a      	movs	r1, #26
 802bb0c:	fb01 f303 	mul.w	r3, r1, r3
 802bb10:	4413      	add	r3, r2
 802bb12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 802bb16:	881a      	ldrh	r2, [r3, #0]
 802bb18:	68bb      	ldr	r3, [r7, #8]
 802bb1a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 802bb1c:	7bfb      	ldrb	r3, [r7, #15]
 802bb1e:	687a      	ldr	r2, [r7, #4]
 802bb20:	211a      	movs	r1, #26
 802bb22:	fb01 f303 	mul.w	r3, r1, r3
 802bb26:	4413      	add	r3, r2
 802bb28:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bb2c:	781b      	ldrb	r3, [r3, #0]
 802bb2e:	b25b      	sxtb	r3, r3
 802bb30:	2b00      	cmp	r3, #0
 802bb32:	da16      	bge.n	802bb62 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bb34:	7bfb      	ldrb	r3, [r7, #15]
 802bb36:	687a      	ldr	r2, [r7, #4]
 802bb38:	211a      	movs	r1, #26
 802bb3a:	fb01 f303 	mul.w	r3, r1, r3
 802bb3e:	4413      	add	r3, r2
 802bb40:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bb44:	781a      	ldrb	r2, [r3, #0]
 802bb46:	68bb      	ldr	r3, [r7, #8]
 802bb48:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bb4a:	7bfb      	ldrb	r3, [r7, #15]
 802bb4c:	687a      	ldr	r2, [r7, #4]
 802bb4e:	211a      	movs	r1, #26
 802bb50:	fb01 f303 	mul.w	r3, r1, r3
 802bb54:	4413      	add	r3, r2
 802bb56:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bb5a:	881a      	ldrh	r2, [r3, #0]
 802bb5c:	68bb      	ldr	r3, [r7, #8]
 802bb5e:	835a      	strh	r2, [r3, #26]
 802bb60:	e015      	b.n	802bb8e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 802bb62:	7bfb      	ldrb	r3, [r7, #15]
 802bb64:	687a      	ldr	r2, [r7, #4]
 802bb66:	211a      	movs	r1, #26
 802bb68:	fb01 f303 	mul.w	r3, r1, r3
 802bb6c:	4413      	add	r3, r2
 802bb6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 802bb72:	781a      	ldrb	r2, [r3, #0]
 802bb74:	68bb      	ldr	r3, [r7, #8]
 802bb76:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 802bb78:	7bfb      	ldrb	r3, [r7, #15]
 802bb7a:	687a      	ldr	r2, [r7, #4]
 802bb7c:	211a      	movs	r1, #26
 802bb7e:	fb01 f303 	mul.w	r3, r1, r3
 802bb82:	4413      	add	r3, r2
 802bb84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 802bb88:	881a      	ldrh	r2, [r3, #0]
 802bb8a:	68bb      	ldr	r3, [r7, #8]
 802bb8c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 802bb8e:	68bb      	ldr	r3, [r7, #8]
 802bb90:	7b9b      	ldrb	r3, [r3, #14]
 802bb92:	4619      	mov	r1, r3
 802bb94:	6878      	ldr	r0, [r7, #4]
 802bb96:	f001 fe84 	bl	802d8a2 <USBH_AllocPipe>
 802bb9a:	4603      	mov	r3, r0
 802bb9c:	461a      	mov	r2, r3
 802bb9e:	68bb      	ldr	r3, [r7, #8]
 802bba0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 802bba2:	68bb      	ldr	r3, [r7, #8]
 802bba4:	7bdb      	ldrb	r3, [r3, #15]
 802bba6:	4619      	mov	r1, r3
 802bba8:	6878      	ldr	r0, [r7, #4]
 802bbaa:	f001 fe7a 	bl	802d8a2 <USBH_AllocPipe>
 802bbae:	4603      	mov	r3, r0
 802bbb0:	461a      	mov	r2, r3
 802bbb2:	68bb      	ldr	r3, [r7, #8]
 802bbb4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 802bbb6:	68bb      	ldr	r3, [r7, #8]
 802bbb8:	7b59      	ldrb	r1, [r3, #13]
 802bbba:	68bb      	ldr	r3, [r7, #8]
 802bbbc:	7b98      	ldrb	r0, [r3, #14]
 802bbbe:	687b      	ldr	r3, [r7, #4]
 802bbc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bbc4:	687b      	ldr	r3, [r7, #4]
 802bbc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bbca:	68ba      	ldr	r2, [r7, #8]
 802bbcc:	8b12      	ldrh	r2, [r2, #24]
 802bbce:	9202      	str	r2, [sp, #8]
 802bbd0:	2202      	movs	r2, #2
 802bbd2:	9201      	str	r2, [sp, #4]
 802bbd4:	9300      	str	r3, [sp, #0]
 802bbd6:	4623      	mov	r3, r4
 802bbd8:	4602      	mov	r2, r0
 802bbda:	6878      	ldr	r0, [r7, #4]
 802bbdc:	f001 fe32 	bl	802d844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 802bbe0:	68bb      	ldr	r3, [r7, #8]
 802bbe2:	7b19      	ldrb	r1, [r3, #12]
 802bbe4:	68bb      	ldr	r3, [r7, #8]
 802bbe6:	7bd8      	ldrb	r0, [r3, #15]
 802bbe8:	687b      	ldr	r3, [r7, #4]
 802bbea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 802bbee:	687b      	ldr	r3, [r7, #4]
 802bbf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802bbf4:	68ba      	ldr	r2, [r7, #8]
 802bbf6:	8b52      	ldrh	r2, [r2, #26]
 802bbf8:	9202      	str	r2, [sp, #8]
 802bbfa:	2202      	movs	r2, #2
 802bbfc:	9201      	str	r2, [sp, #4]
 802bbfe:	9300      	str	r3, [sp, #0]
 802bc00:	4623      	mov	r3, r4
 802bc02:	4602      	mov	r2, r0
 802bc04:	6878      	ldr	r0, [r7, #4]
 802bc06:	f001 fe1d 	bl	802d844 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 802bc0a:	68bb      	ldr	r3, [r7, #8]
 802bc0c:	2200      	movs	r2, #0
 802bc0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 802bc12:	68bb      	ldr	r3, [r7, #8]
 802bc14:	7b5b      	ldrb	r3, [r3, #13]
 802bc16:	2200      	movs	r2, #0
 802bc18:	4619      	mov	r1, r3
 802bc1a:	6878      	ldr	r0, [r7, #4]
 802bc1c:	f002 f92e 	bl	802de7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 802bc20:	68bb      	ldr	r3, [r7, #8]
 802bc22:	7b1b      	ldrb	r3, [r3, #12]
 802bc24:	2200      	movs	r2, #0
 802bc26:	4619      	mov	r1, r3
 802bc28:	6878      	ldr	r0, [r7, #4]
 802bc2a:	f002 f927 	bl	802de7c <USBH_LL_SetToggle>

  return USBH_OK;
 802bc2e:	2300      	movs	r3, #0
}
 802bc30:	4618      	mov	r0, r3
 802bc32:	3714      	adds	r7, #20
 802bc34:	46bd      	mov	sp, r7
 802bc36:	bd90      	pop	{r4, r7, pc}

0802bc38 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 802bc38:	b580      	push	{r7, lr}
 802bc3a:	b084      	sub	sp, #16
 802bc3c:	af00      	add	r7, sp, #0
 802bc3e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bc40:	687b      	ldr	r3, [r7, #4]
 802bc42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bc46:	69db      	ldr	r3, [r3, #28]
 802bc48:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 802bc4a:	68fb      	ldr	r3, [r7, #12]
 802bc4c:	781b      	ldrb	r3, [r3, #0]
 802bc4e:	2b00      	cmp	r3, #0
 802bc50:	d00e      	beq.n	802bc70 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bc52:	68fb      	ldr	r3, [r7, #12]
 802bc54:	781b      	ldrb	r3, [r3, #0]
 802bc56:	4619      	mov	r1, r3
 802bc58:	6878      	ldr	r0, [r7, #4]
 802bc5a:	f001 fe12 	bl	802d882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 802bc5e:	68fb      	ldr	r3, [r7, #12]
 802bc60:	781b      	ldrb	r3, [r3, #0]
 802bc62:	4619      	mov	r1, r3
 802bc64:	6878      	ldr	r0, [r7, #4]
 802bc66:	f001 fe3d 	bl	802d8e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 802bc6a:	68fb      	ldr	r3, [r7, #12]
 802bc6c:	2200      	movs	r2, #0
 802bc6e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 802bc70:	68fb      	ldr	r3, [r7, #12]
 802bc72:	7b1b      	ldrb	r3, [r3, #12]
 802bc74:	2b00      	cmp	r3, #0
 802bc76:	d00e      	beq.n	802bc96 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 802bc78:	68fb      	ldr	r3, [r7, #12]
 802bc7a:	7b1b      	ldrb	r3, [r3, #12]
 802bc7c:	4619      	mov	r1, r3
 802bc7e:	6878      	ldr	r0, [r7, #4]
 802bc80:	f001 fdff 	bl	802d882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 802bc84:	68fb      	ldr	r3, [r7, #12]
 802bc86:	7b1b      	ldrb	r3, [r3, #12]
 802bc88:	4619      	mov	r1, r3
 802bc8a:	6878      	ldr	r0, [r7, #4]
 802bc8c:	f001 fe2a 	bl	802d8e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 802bc90:	68fb      	ldr	r3, [r7, #12]
 802bc92:	2200      	movs	r2, #0
 802bc94:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 802bc96:	68fb      	ldr	r3, [r7, #12]
 802bc98:	7b5b      	ldrb	r3, [r3, #13]
 802bc9a:	2b00      	cmp	r3, #0
 802bc9c:	d00e      	beq.n	802bcbc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bc9e:	68fb      	ldr	r3, [r7, #12]
 802bca0:	7b5b      	ldrb	r3, [r3, #13]
 802bca2:	4619      	mov	r1, r3
 802bca4:	6878      	ldr	r0, [r7, #4]
 802bca6:	f001 fdec 	bl	802d882 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 802bcaa:	68fb      	ldr	r3, [r7, #12]
 802bcac:	7b5b      	ldrb	r3, [r3, #13]
 802bcae:	4619      	mov	r1, r3
 802bcb0:	6878      	ldr	r0, [r7, #4]
 802bcb2:	f001 fe17 	bl	802d8e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 802bcb6:	68fb      	ldr	r3, [r7, #12]
 802bcb8:	2200      	movs	r2, #0
 802bcba:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 802bcbc:	687b      	ldr	r3, [r7, #4]
 802bcbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bcc2:	69db      	ldr	r3, [r3, #28]
 802bcc4:	2b00      	cmp	r3, #0
 802bcc6:	d00b      	beq.n	802bce0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 802bcc8:	687b      	ldr	r3, [r7, #4]
 802bcca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bcce:	69db      	ldr	r3, [r3, #28]
 802bcd0:	4618      	mov	r0, r3
 802bcd2:	f002 f989 	bl	802dfe8 <free>
    phost->pActiveClass->pData = 0U;
 802bcd6:	687b      	ldr	r3, [r7, #4]
 802bcd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bcdc:	2200      	movs	r2, #0
 802bcde:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 802bce0:	2300      	movs	r3, #0
}
 802bce2:	4618      	mov	r0, r3
 802bce4:	3710      	adds	r7, #16
 802bce6:	46bd      	mov	sp, r7
 802bce8:	bd80      	pop	{r7, pc}

0802bcea <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 802bcea:	b580      	push	{r7, lr}
 802bcec:	b084      	sub	sp, #16
 802bcee:	af00      	add	r7, sp, #0
 802bcf0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bcf2:	687b      	ldr	r3, [r7, #4]
 802bcf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bcf8:	69db      	ldr	r3, [r3, #28]
 802bcfa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 802bcfc:	68fb      	ldr	r3, [r7, #12]
 802bcfe:	3340      	adds	r3, #64	; 0x40
 802bd00:	4619      	mov	r1, r3
 802bd02:	6878      	ldr	r0, [r7, #4]
 802bd04:	f000 f8b1 	bl	802be6a <GetLineCoding>
 802bd08:	4603      	mov	r3, r0
 802bd0a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 802bd0c:	7afb      	ldrb	r3, [r7, #11]
 802bd0e:	2b00      	cmp	r3, #0
 802bd10:	d105      	bne.n	802bd1e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 802bd12:	687b      	ldr	r3, [r7, #4]
 802bd14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802bd18:	2102      	movs	r1, #2
 802bd1a:	6878      	ldr	r0, [r7, #4]
 802bd1c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 802bd1e:	7afb      	ldrb	r3, [r7, #11]
}
 802bd20:	4618      	mov	r0, r3
 802bd22:	3710      	adds	r7, #16
 802bd24:	46bd      	mov	sp, r7
 802bd26:	bd80      	pop	{r7, pc}

0802bd28 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 802bd28:	b580      	push	{r7, lr}
 802bd2a:	b084      	sub	sp, #16
 802bd2c:	af00      	add	r7, sp, #0
 802bd2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 802bd30:	2301      	movs	r3, #1
 802bd32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 802bd34:	2300      	movs	r3, #0
 802bd36:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bd38:	687b      	ldr	r3, [r7, #4]
 802bd3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bd3e:	69db      	ldr	r3, [r3, #28]
 802bd40:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 802bd42:	68bb      	ldr	r3, [r7, #8]
 802bd44:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 802bd48:	2b04      	cmp	r3, #4
 802bd4a:	d877      	bhi.n	802be3c <USBH_CDC_Process+0x114>
 802bd4c:	a201      	add	r2, pc, #4	; (adr r2, 802bd54 <USBH_CDC_Process+0x2c>)
 802bd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802bd52:	bf00      	nop
 802bd54:	0802bd69 	.word	0x0802bd69
 802bd58:	0802bd6f 	.word	0x0802bd6f
 802bd5c:	0802bd9f 	.word	0x0802bd9f
 802bd60:	0802be13 	.word	0x0802be13
 802bd64:	0802be21 	.word	0x0802be21
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 802bd68:	2300      	movs	r3, #0
 802bd6a:	73fb      	strb	r3, [r7, #15]
      break;
 802bd6c:	e06d      	b.n	802be4a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 802bd6e:	68bb      	ldr	r3, [r7, #8]
 802bd70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bd72:	4619      	mov	r1, r3
 802bd74:	6878      	ldr	r0, [r7, #4]
 802bd76:	f000 f897 	bl	802bea8 <SetLineCoding>
 802bd7a:	4603      	mov	r3, r0
 802bd7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802bd7e:	7bbb      	ldrb	r3, [r7, #14]
 802bd80:	2b00      	cmp	r3, #0
 802bd82:	d104      	bne.n	802bd8e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 802bd84:	68bb      	ldr	r3, [r7, #8]
 802bd86:	2202      	movs	r2, #2
 802bd88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802bd8c:	e058      	b.n	802be40 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 802bd8e:	7bbb      	ldrb	r3, [r7, #14]
 802bd90:	2b01      	cmp	r3, #1
 802bd92:	d055      	beq.n	802be40 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 802bd94:	68bb      	ldr	r3, [r7, #8]
 802bd96:	2204      	movs	r2, #4
 802bd98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802bd9c:	e050      	b.n	802be40 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 802bd9e:	68bb      	ldr	r3, [r7, #8]
 802bda0:	3340      	adds	r3, #64	; 0x40
 802bda2:	4619      	mov	r1, r3
 802bda4:	6878      	ldr	r0, [r7, #4]
 802bda6:	f000 f860 	bl	802be6a <GetLineCoding>
 802bdaa:	4603      	mov	r3, r0
 802bdac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802bdae:	7bbb      	ldrb	r3, [r7, #14]
 802bdb0:	2b00      	cmp	r3, #0
 802bdb2:	d126      	bne.n	802be02 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 802bdb4:	68bb      	ldr	r3, [r7, #8]
 802bdb6:	2200      	movs	r2, #0
 802bdb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bdbc:	68bb      	ldr	r3, [r7, #8]
 802bdbe:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 802bdc2:	68bb      	ldr	r3, [r7, #8]
 802bdc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bdc6:	791b      	ldrb	r3, [r3, #4]
 802bdc8:	429a      	cmp	r2, r3
 802bdca:	d13b      	bne.n	802be44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802bdcc:	68bb      	ldr	r3, [r7, #8]
 802bdce:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802bdd2:	68bb      	ldr	r3, [r7, #8]
 802bdd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bdd6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 802bdd8:	429a      	cmp	r2, r3
 802bdda:	d133      	bne.n	802be44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bddc:	68bb      	ldr	r3, [r7, #8]
 802bdde:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802bde2:	68bb      	ldr	r3, [r7, #8]
 802bde4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bde6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 802bde8:	429a      	cmp	r2, r3
 802bdea:	d12b      	bne.n	802be44 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 802bdec:	68bb      	ldr	r3, [r7, #8]
 802bdee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802bdf0:	68bb      	ldr	r3, [r7, #8]
 802bdf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802bdf4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 802bdf6:	429a      	cmp	r2, r3
 802bdf8:	d124      	bne.n	802be44 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 802bdfa:	6878      	ldr	r0, [r7, #4]
 802bdfc:	f000 f958 	bl	802c0b0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 802be00:	e020      	b.n	802be44 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 802be02:	7bbb      	ldrb	r3, [r7, #14]
 802be04:	2b01      	cmp	r3, #1
 802be06:	d01d      	beq.n	802be44 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 802be08:	68bb      	ldr	r3, [r7, #8]
 802be0a:	2204      	movs	r2, #4
 802be0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 802be10:	e018      	b.n	802be44 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 802be12:	6878      	ldr	r0, [r7, #4]
 802be14:	f000 f867 	bl	802bee6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 802be18:	6878      	ldr	r0, [r7, #4]
 802be1a:	f000 f8da 	bl	802bfd2 <CDC_ProcessReception>
      break;
 802be1e:	e014      	b.n	802be4a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 802be20:	2100      	movs	r1, #0
 802be22:	6878      	ldr	r0, [r7, #4]
 802be24:	f000 ffef 	bl	802ce06 <USBH_ClrFeature>
 802be28:	4603      	mov	r3, r0
 802be2a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 802be2c:	7bbb      	ldrb	r3, [r7, #14]
 802be2e:	2b00      	cmp	r3, #0
 802be30:	d10a      	bne.n	802be48 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 802be32:	68bb      	ldr	r3, [r7, #8]
 802be34:	2200      	movs	r2, #0
 802be36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 802be3a:	e005      	b.n	802be48 <USBH_CDC_Process+0x120>

    default:
      break;
 802be3c:	bf00      	nop
 802be3e:	e004      	b.n	802be4a <USBH_CDC_Process+0x122>
      break;
 802be40:	bf00      	nop
 802be42:	e002      	b.n	802be4a <USBH_CDC_Process+0x122>
      break;
 802be44:	bf00      	nop
 802be46:	e000      	b.n	802be4a <USBH_CDC_Process+0x122>
      break;
 802be48:	bf00      	nop

  }

  return status;
 802be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 802be4c:	4618      	mov	r0, r3
 802be4e:	3710      	adds	r7, #16
 802be50:	46bd      	mov	sp, r7
 802be52:	bd80      	pop	{r7, pc}

0802be54 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 802be54:	b480      	push	{r7}
 802be56:	b083      	sub	sp, #12
 802be58:	af00      	add	r7, sp, #0
 802be5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 802be5c:	2300      	movs	r3, #0
}
 802be5e:	4618      	mov	r0, r3
 802be60:	370c      	adds	r7, #12
 802be62:	46bd      	mov	sp, r7
 802be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 802be68:	4770      	bx	lr

0802be6a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802be6a:	b580      	push	{r7, lr}
 802be6c:	b082      	sub	sp, #8
 802be6e:	af00      	add	r7, sp, #0
 802be70:	6078      	str	r0, [r7, #4]
 802be72:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 802be74:	687b      	ldr	r3, [r7, #4]
 802be76:	22a1      	movs	r2, #161	; 0xa1
 802be78:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802be7a:	687b      	ldr	r3, [r7, #4]
 802be7c:	2221      	movs	r2, #33	; 0x21
 802be7e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802be80:	687b      	ldr	r3, [r7, #4]
 802be82:	2200      	movs	r2, #0
 802be84:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802be86:	687b      	ldr	r3, [r7, #4]
 802be88:	2200      	movs	r2, #0
 802be8a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802be8c:	687b      	ldr	r3, [r7, #4]
 802be8e:	2207      	movs	r2, #7
 802be90:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802be92:	683b      	ldr	r3, [r7, #0]
 802be94:	2207      	movs	r2, #7
 802be96:	4619      	mov	r1, r3
 802be98:	6878      	ldr	r0, [r7, #4]
 802be9a:	f001 fa81 	bl	802d3a0 <USBH_CtlReq>
 802be9e:	4603      	mov	r3, r0
}
 802bea0:	4618      	mov	r0, r3
 802bea2:	3708      	adds	r7, #8
 802bea4:	46bd      	mov	sp, r7
 802bea6:	bd80      	pop	{r7, pc}

0802bea8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802bea8:	b580      	push	{r7, lr}
 802beaa:	b082      	sub	sp, #8
 802beac:	af00      	add	r7, sp, #0
 802beae:	6078      	str	r0, [r7, #4]
 802beb0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 802beb2:	687b      	ldr	r3, [r7, #4]
 802beb4:	2221      	movs	r2, #33	; 0x21
 802beb6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802beb8:	687b      	ldr	r3, [r7, #4]
 802beba:	2220      	movs	r2, #32
 802bebc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 802bebe:	687b      	ldr	r3, [r7, #4]
 802bec0:	2200      	movs	r2, #0
 802bec2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 802bec4:	687b      	ldr	r3, [r7, #4]
 802bec6:	2200      	movs	r2, #0
 802bec8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802beca:	687b      	ldr	r3, [r7, #4]
 802becc:	2207      	movs	r2, #7
 802bece:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 802bed0:	683b      	ldr	r3, [r7, #0]
 802bed2:	2207      	movs	r2, #7
 802bed4:	4619      	mov	r1, r3
 802bed6:	6878      	ldr	r0, [r7, #4]
 802bed8:	f001 fa62 	bl	802d3a0 <USBH_CtlReq>
 802bedc:	4603      	mov	r3, r0
}
 802bede:	4618      	mov	r0, r3
 802bee0:	3708      	adds	r7, #8
 802bee2:	46bd      	mov	sp, r7
 802bee4:	bd80      	pop	{r7, pc}

0802bee6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802bee6:	b580      	push	{r7, lr}
 802bee8:	b086      	sub	sp, #24
 802beea:	af02      	add	r7, sp, #8
 802beec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802beee:	687b      	ldr	r3, [r7, #4]
 802bef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bef4:	69db      	ldr	r3, [r3, #28]
 802bef6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bef8:	2300      	movs	r3, #0
 802befa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 802befc:	68fb      	ldr	r3, [r7, #12]
 802befe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 802bf02:	2b01      	cmp	r3, #1
 802bf04:	d002      	beq.n	802bf0c <CDC_ProcessTransmission+0x26>
 802bf06:	2b02      	cmp	r3, #2
 802bf08:	d023      	beq.n	802bf52 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 802bf0a:	e05e      	b.n	802bfca <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802bf0c:	68fb      	ldr	r3, [r7, #12]
 802bf0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bf10:	68fa      	ldr	r2, [r7, #12]
 802bf12:	8b12      	ldrh	r2, [r2, #24]
 802bf14:	4293      	cmp	r3, r2
 802bf16:	d90b      	bls.n	802bf30 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 802bf18:	68fb      	ldr	r3, [r7, #12]
 802bf1a:	69d9      	ldr	r1, [r3, #28]
 802bf1c:	68fb      	ldr	r3, [r7, #12]
 802bf1e:	8b1a      	ldrh	r2, [r3, #24]
 802bf20:	68fb      	ldr	r3, [r7, #12]
 802bf22:	7b5b      	ldrb	r3, [r3, #13]
 802bf24:	2001      	movs	r0, #1
 802bf26:	9000      	str	r0, [sp, #0]
 802bf28:	6878      	ldr	r0, [r7, #4]
 802bf2a:	f001 fc48 	bl	802d7be <USBH_BulkSendData>
 802bf2e:	e00b      	b.n	802bf48 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 802bf30:	68fb      	ldr	r3, [r7, #12]
 802bf32:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 802bf34:	68fb      	ldr	r3, [r7, #12]
 802bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 802bf38:	b29a      	uxth	r2, r3
 802bf3a:	68fb      	ldr	r3, [r7, #12]
 802bf3c:	7b5b      	ldrb	r3, [r3, #13]
 802bf3e:	2001      	movs	r0, #1
 802bf40:	9000      	str	r0, [sp, #0]
 802bf42:	6878      	ldr	r0, [r7, #4]
 802bf44:	f001 fc3b 	bl	802d7be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 802bf48:	68fb      	ldr	r3, [r7, #12]
 802bf4a:	2202      	movs	r2, #2
 802bf4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802bf50:	e03b      	b.n	802bfca <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802bf52:	68fb      	ldr	r3, [r7, #12]
 802bf54:	7b5b      	ldrb	r3, [r3, #13]
 802bf56:	4619      	mov	r1, r3
 802bf58:	6878      	ldr	r0, [r7, #4]
 802bf5a:	f001 ff65 	bl	802de28 <USBH_LL_GetURBState>
 802bf5e:	4603      	mov	r3, r0
 802bf60:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802bf62:	7afb      	ldrb	r3, [r7, #11]
 802bf64:	2b01      	cmp	r3, #1
 802bf66:	d128      	bne.n	802bfba <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 802bf68:	68fb      	ldr	r3, [r7, #12]
 802bf6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bf6c:	68fa      	ldr	r2, [r7, #12]
 802bf6e:	8b12      	ldrh	r2, [r2, #24]
 802bf70:	4293      	cmp	r3, r2
 802bf72:	d90e      	bls.n	802bf92 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802bf74:	68fb      	ldr	r3, [r7, #12]
 802bf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bf78:	68fa      	ldr	r2, [r7, #12]
 802bf7a:	8b12      	ldrh	r2, [r2, #24]
 802bf7c:	1a9a      	subs	r2, r3, r2
 802bf7e:	68fb      	ldr	r3, [r7, #12]
 802bf80:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802bf82:	68fb      	ldr	r3, [r7, #12]
 802bf84:	69db      	ldr	r3, [r3, #28]
 802bf86:	68fa      	ldr	r2, [r7, #12]
 802bf88:	8b12      	ldrh	r2, [r2, #24]
 802bf8a:	441a      	add	r2, r3
 802bf8c:	68fb      	ldr	r3, [r7, #12]
 802bf8e:	61da      	str	r2, [r3, #28]
 802bf90:	e002      	b.n	802bf98 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 802bf92:	68fb      	ldr	r3, [r7, #12]
 802bf94:	2200      	movs	r2, #0
 802bf96:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 802bf98:	68fb      	ldr	r3, [r7, #12]
 802bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802bf9c:	2b00      	cmp	r3, #0
 802bf9e:	d004      	beq.n	802bfaa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802bfa0:	68fb      	ldr	r3, [r7, #12]
 802bfa2:	2201      	movs	r2, #1
 802bfa4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802bfa8:	e00e      	b.n	802bfc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 802bfaa:	68fb      	ldr	r3, [r7, #12]
 802bfac:	2200      	movs	r2, #0
 802bfae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802bfb2:	6878      	ldr	r0, [r7, #4]
 802bfb4:	f000 f868 	bl	802c088 <USBH_CDC_TransmitCallback>
      break;
 802bfb8:	e006      	b.n	802bfc8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 802bfba:	7afb      	ldrb	r3, [r7, #11]
 802bfbc:	2b02      	cmp	r3, #2
 802bfbe:	d103      	bne.n	802bfc8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 802bfc0:	68fb      	ldr	r3, [r7, #12]
 802bfc2:	2201      	movs	r2, #1
 802bfc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 802bfc8:	bf00      	nop
  }
}
 802bfca:	bf00      	nop
 802bfcc:	3710      	adds	r7, #16
 802bfce:	46bd      	mov	sp, r7
 802bfd0:	bd80      	pop	{r7, pc}

0802bfd2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 802bfd2:	b580      	push	{r7, lr}
 802bfd4:	b086      	sub	sp, #24
 802bfd6:	af00      	add	r7, sp, #0
 802bfd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 802bfda:	687b      	ldr	r3, [r7, #4]
 802bfdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802bfe0:	69db      	ldr	r3, [r3, #28]
 802bfe2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802bfe4:	2300      	movs	r3, #0
 802bfe6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 802bfe8:	697b      	ldr	r3, [r7, #20]
 802bfea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 802bfee:	2b03      	cmp	r3, #3
 802bff0:	d002      	beq.n	802bff8 <CDC_ProcessReception+0x26>
 802bff2:	2b04      	cmp	r3, #4
 802bff4:	d00e      	beq.n	802c014 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 802bff6:	e043      	b.n	802c080 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 802bff8:	697b      	ldr	r3, [r7, #20]
 802bffa:	6a19      	ldr	r1, [r3, #32]
 802bffc:	697b      	ldr	r3, [r7, #20]
 802bffe:	8b5a      	ldrh	r2, [r3, #26]
 802c000:	697b      	ldr	r3, [r7, #20]
 802c002:	7b1b      	ldrb	r3, [r3, #12]
 802c004:	6878      	ldr	r0, [r7, #4]
 802c006:	f001 fbff 	bl	802d808 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 802c00a:	697b      	ldr	r3, [r7, #20]
 802c00c:	2204      	movs	r2, #4
 802c00e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c012:	e035      	b.n	802c080 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 802c014:	697b      	ldr	r3, [r7, #20]
 802c016:	7b1b      	ldrb	r3, [r3, #12]
 802c018:	4619      	mov	r1, r3
 802c01a:	6878      	ldr	r0, [r7, #4]
 802c01c:	f001 ff04 	bl	802de28 <USBH_LL_GetURBState>
 802c020:	4603      	mov	r3, r0
 802c022:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 802c024:	7cfb      	ldrb	r3, [r7, #19]
 802c026:	2b01      	cmp	r3, #1
 802c028:	d129      	bne.n	802c07e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802c02a:	697b      	ldr	r3, [r7, #20]
 802c02c:	7b1b      	ldrb	r3, [r3, #12]
 802c02e:	4619      	mov	r1, r3
 802c030:	6878      	ldr	r0, [r7, #4]
 802c032:	f001 fe67 	bl	802dd04 <USBH_LL_GetLastXferSize>
 802c036:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 802c038:	697b      	ldr	r3, [r7, #20]
 802c03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802c03c:	68fa      	ldr	r2, [r7, #12]
 802c03e:	429a      	cmp	r2, r3
 802c040:	d016      	beq.n	802c070 <CDC_ProcessReception+0x9e>
 802c042:	697b      	ldr	r3, [r7, #20]
 802c044:	8b5b      	ldrh	r3, [r3, #26]
 802c046:	461a      	mov	r2, r3
 802c048:	68fb      	ldr	r3, [r7, #12]
 802c04a:	4293      	cmp	r3, r2
 802c04c:	d910      	bls.n	802c070 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802c04e:	697b      	ldr	r3, [r7, #20]
 802c050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802c052:	68fb      	ldr	r3, [r7, #12]
 802c054:	1ad2      	subs	r2, r2, r3
 802c056:	697b      	ldr	r3, [r7, #20]
 802c058:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802c05a:	697b      	ldr	r3, [r7, #20]
 802c05c:	6a1a      	ldr	r2, [r3, #32]
 802c05e:	68fb      	ldr	r3, [r7, #12]
 802c060:	441a      	add	r2, r3
 802c062:	697b      	ldr	r3, [r7, #20]
 802c064:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 802c066:	697b      	ldr	r3, [r7, #20]
 802c068:	2203      	movs	r2, #3
 802c06a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 802c06e:	e006      	b.n	802c07e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 802c070:	697b      	ldr	r3, [r7, #20]
 802c072:	2200      	movs	r2, #0
 802c074:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 802c078:	6878      	ldr	r0, [r7, #4]
 802c07a:	f000 f80f 	bl	802c09c <USBH_CDC_ReceiveCallback>
      break;
 802c07e:	bf00      	nop
  }
}
 802c080:	bf00      	nop
 802c082:	3718      	adds	r7, #24
 802c084:	46bd      	mov	sp, r7
 802c086:	bd80      	pop	{r7, pc}

0802c088 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 802c088:	b480      	push	{r7}
 802c08a:	b083      	sub	sp, #12
 802c08c:	af00      	add	r7, sp, #0
 802c08e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c090:	bf00      	nop
 802c092:	370c      	adds	r7, #12
 802c094:	46bd      	mov	sp, r7
 802c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c09a:	4770      	bx	lr

0802c09c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 802c09c:	b480      	push	{r7}
 802c09e:	b083      	sub	sp, #12
 802c0a0:	af00      	add	r7, sp, #0
 802c0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c0a4:	bf00      	nop
 802c0a6:	370c      	adds	r7, #12
 802c0a8:	46bd      	mov	sp, r7
 802c0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0ae:	4770      	bx	lr

0802c0b0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 802c0b0:	b480      	push	{r7}
 802c0b2:	b083      	sub	sp, #12
 802c0b4:	af00      	add	r7, sp, #0
 802c0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802c0b8:	bf00      	nop
 802c0ba:	370c      	adds	r7, #12
 802c0bc:	46bd      	mov	sp, r7
 802c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c0c2:	4770      	bx	lr

0802c0c4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 802c0c4:	b580      	push	{r7, lr}
 802c0c6:	b084      	sub	sp, #16
 802c0c8:	af00      	add	r7, sp, #0
 802c0ca:	60f8      	str	r0, [r7, #12]
 802c0cc:	60b9      	str	r1, [r7, #8]
 802c0ce:	4613      	mov	r3, r2
 802c0d0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 802c0d2:	68fb      	ldr	r3, [r7, #12]
 802c0d4:	2b00      	cmp	r3, #0
 802c0d6:	d101      	bne.n	802c0dc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 802c0d8:	2302      	movs	r3, #2
 802c0da:	e029      	b.n	802c130 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 802c0dc:	68fb      	ldr	r3, [r7, #12]
 802c0de:	79fa      	ldrb	r2, [r7, #7]
 802c0e0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 802c0e4:	68fb      	ldr	r3, [r7, #12]
 802c0e6:	2200      	movs	r2, #0
 802c0e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 802c0ec:	68fb      	ldr	r3, [r7, #12]
 802c0ee:	2200      	movs	r2, #0
 802c0f0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 802c0f4:	68f8      	ldr	r0, [r7, #12]
 802c0f6:	f000 f81f 	bl	802c138 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 802c0fa:	68fb      	ldr	r3, [r7, #12]
 802c0fc:	2200      	movs	r2, #0
 802c0fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802c102:	68fb      	ldr	r3, [r7, #12]
 802c104:	2200      	movs	r2, #0
 802c106:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802c10a:	68fb      	ldr	r3, [r7, #12]
 802c10c:	2200      	movs	r2, #0
 802c10e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802c112:	68fb      	ldr	r3, [r7, #12]
 802c114:	2200      	movs	r2, #0
 802c116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 802c11a:	68bb      	ldr	r3, [r7, #8]
 802c11c:	2b00      	cmp	r3, #0
 802c11e:	d003      	beq.n	802c128 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802c120:	68fb      	ldr	r3, [r7, #12]
 802c122:	68ba      	ldr	r2, [r7, #8]
 802c124:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 802c128:	68f8      	ldr	r0, [r7, #12]
 802c12a:	f001 fd2d 	bl	802db88 <USBH_LL_Init>

  return USBH_OK;
 802c12e:	2300      	movs	r3, #0
}
 802c130:	4618      	mov	r0, r3
 802c132:	3710      	adds	r7, #16
 802c134:	46bd      	mov	sp, r7
 802c136:	bd80      	pop	{r7, pc}

0802c138 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 802c138:	b480      	push	{r7}
 802c13a:	b085      	sub	sp, #20
 802c13c:	af00      	add	r7, sp, #0
 802c13e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802c140:	2300      	movs	r3, #0
 802c142:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c144:	2300      	movs	r3, #0
 802c146:	60fb      	str	r3, [r7, #12]
 802c148:	e009      	b.n	802c15e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 802c14a:	687a      	ldr	r2, [r7, #4]
 802c14c:	68fb      	ldr	r3, [r7, #12]
 802c14e:	33e0      	adds	r3, #224	; 0xe0
 802c150:	009b      	lsls	r3, r3, #2
 802c152:	4413      	add	r3, r2
 802c154:	2200      	movs	r2, #0
 802c156:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 802c158:	68fb      	ldr	r3, [r7, #12]
 802c15a:	3301      	adds	r3, #1
 802c15c:	60fb      	str	r3, [r7, #12]
 802c15e:	68fb      	ldr	r3, [r7, #12]
 802c160:	2b0f      	cmp	r3, #15
 802c162:	d9f2      	bls.n	802c14a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c164:	2300      	movs	r3, #0
 802c166:	60fb      	str	r3, [r7, #12]
 802c168:	e009      	b.n	802c17e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 802c16a:	687a      	ldr	r2, [r7, #4]
 802c16c:	68fb      	ldr	r3, [r7, #12]
 802c16e:	4413      	add	r3, r2
 802c170:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802c174:	2200      	movs	r2, #0
 802c176:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 802c178:	68fb      	ldr	r3, [r7, #12]
 802c17a:	3301      	adds	r3, #1
 802c17c:	60fb      	str	r3, [r7, #12]
 802c17e:	68fb      	ldr	r3, [r7, #12]
 802c180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802c184:	d3f1      	bcc.n	802c16a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 802c186:	687b      	ldr	r3, [r7, #4]
 802c188:	2200      	movs	r2, #0
 802c18a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	2200      	movs	r2, #0
 802c190:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 802c192:	687b      	ldr	r3, [r7, #4]
 802c194:	2201      	movs	r2, #1
 802c196:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 802c198:	687b      	ldr	r3, [r7, #4]
 802c19a:	2200      	movs	r2, #0
 802c19c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 802c1a0:	687b      	ldr	r3, [r7, #4]
 802c1a2:	2201      	movs	r2, #1
 802c1a4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 802c1a6:	687b      	ldr	r3, [r7, #4]
 802c1a8:	2240      	movs	r2, #64	; 0x40
 802c1aa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 802c1ac:	687b      	ldr	r3, [r7, #4]
 802c1ae:	2200      	movs	r2, #0
 802c1b0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802c1b2:	687b      	ldr	r3, [r7, #4]
 802c1b4:	2200      	movs	r2, #0
 802c1b6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 802c1ba:	687b      	ldr	r3, [r7, #4]
 802c1bc:	2201      	movs	r2, #1
 802c1be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802c1c2:	687b      	ldr	r3, [r7, #4]
 802c1c4:	2200      	movs	r2, #0
 802c1c6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 802c1ca:	687b      	ldr	r3, [r7, #4]
 802c1cc:	2200      	movs	r2, #0
 802c1ce:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802c1d2:	2300      	movs	r3, #0
}
 802c1d4:	4618      	mov	r0, r3
 802c1d6:	3714      	adds	r7, #20
 802c1d8:	46bd      	mov	sp, r7
 802c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c1de:	4770      	bx	lr

0802c1e0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802c1e0:	b480      	push	{r7}
 802c1e2:	b085      	sub	sp, #20
 802c1e4:	af00      	add	r7, sp, #0
 802c1e6:	6078      	str	r0, [r7, #4]
 802c1e8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 802c1ea:	2300      	movs	r3, #0
 802c1ec:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802c1ee:	683b      	ldr	r3, [r7, #0]
 802c1f0:	2b00      	cmp	r3, #0
 802c1f2:	d016      	beq.n	802c222 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 802c1f4:	687b      	ldr	r3, [r7, #4]
 802c1f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c1fa:	2b00      	cmp	r3, #0
 802c1fc:	d10e      	bne.n	802c21c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802c1fe:	687b      	ldr	r3, [r7, #4]
 802c200:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c204:	1c59      	adds	r1, r3, #1
 802c206:	687a      	ldr	r2, [r7, #4]
 802c208:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 802c20c:	687a      	ldr	r2, [r7, #4]
 802c20e:	33de      	adds	r3, #222	; 0xde
 802c210:	6839      	ldr	r1, [r7, #0]
 802c212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 802c216:	2300      	movs	r3, #0
 802c218:	73fb      	strb	r3, [r7, #15]
 802c21a:	e004      	b.n	802c226 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 802c21c:	2302      	movs	r3, #2
 802c21e:	73fb      	strb	r3, [r7, #15]
 802c220:	e001      	b.n	802c226 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802c222:	2302      	movs	r3, #2
 802c224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c226:	7bfb      	ldrb	r3, [r7, #15]
}
 802c228:	4618      	mov	r0, r3
 802c22a:	3714      	adds	r7, #20
 802c22c:	46bd      	mov	sp, r7
 802c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c232:	4770      	bx	lr

0802c234 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 802c234:	b480      	push	{r7}
 802c236:	b085      	sub	sp, #20
 802c238:	af00      	add	r7, sp, #0
 802c23a:	6078      	str	r0, [r7, #4]
 802c23c:	460b      	mov	r3, r1
 802c23e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802c240:	2300      	movs	r3, #0
 802c242:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 802c244:	687b      	ldr	r3, [r7, #4]
 802c246:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 802c24a:	78fa      	ldrb	r2, [r7, #3]
 802c24c:	429a      	cmp	r2, r3
 802c24e:	d204      	bcs.n	802c25a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 802c250:	687b      	ldr	r3, [r7, #4]
 802c252:	78fa      	ldrb	r2, [r7, #3]
 802c254:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 802c258:	e001      	b.n	802c25e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 802c25a:	2302      	movs	r3, #2
 802c25c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802c25e:	7bfb      	ldrb	r3, [r7, #15]
}
 802c260:	4618      	mov	r0, r3
 802c262:	3714      	adds	r7, #20
 802c264:	46bd      	mov	sp, r7
 802c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c26a:	4770      	bx	lr

0802c26c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 802c26c:	b480      	push	{r7}
 802c26e:	b087      	sub	sp, #28
 802c270:	af00      	add	r7, sp, #0
 802c272:	6078      	str	r0, [r7, #4]
 802c274:	4608      	mov	r0, r1
 802c276:	4611      	mov	r1, r2
 802c278:	461a      	mov	r2, r3
 802c27a:	4603      	mov	r3, r0
 802c27c:	70fb      	strb	r3, [r7, #3]
 802c27e:	460b      	mov	r3, r1
 802c280:	70bb      	strb	r3, [r7, #2]
 802c282:	4613      	mov	r3, r2
 802c284:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 802c286:	2300      	movs	r3, #0
 802c288:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 802c28a:	2300      	movs	r3, #0
 802c28c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 802c28e:	687b      	ldr	r3, [r7, #4]
 802c290:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802c294:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c296:	e025      	b.n	802c2e4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 802c298:	7dfb      	ldrb	r3, [r7, #23]
 802c29a:	221a      	movs	r2, #26
 802c29c:	fb02 f303 	mul.w	r3, r2, r3
 802c2a0:	3308      	adds	r3, #8
 802c2a2:	68fa      	ldr	r2, [r7, #12]
 802c2a4:	4413      	add	r3, r2
 802c2a6:	3302      	adds	r3, #2
 802c2a8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c2aa:	693b      	ldr	r3, [r7, #16]
 802c2ac:	795b      	ldrb	r3, [r3, #5]
 802c2ae:	78fa      	ldrb	r2, [r7, #3]
 802c2b0:	429a      	cmp	r2, r3
 802c2b2:	d002      	beq.n	802c2ba <USBH_FindInterface+0x4e>
 802c2b4:	78fb      	ldrb	r3, [r7, #3]
 802c2b6:	2bff      	cmp	r3, #255	; 0xff
 802c2b8:	d111      	bne.n	802c2de <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c2ba:	693b      	ldr	r3, [r7, #16]
 802c2bc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802c2be:	78ba      	ldrb	r2, [r7, #2]
 802c2c0:	429a      	cmp	r2, r3
 802c2c2:	d002      	beq.n	802c2ca <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c2c4:	78bb      	ldrb	r3, [r7, #2]
 802c2c6:	2bff      	cmp	r3, #255	; 0xff
 802c2c8:	d109      	bne.n	802c2de <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c2ca:	693b      	ldr	r3, [r7, #16]
 802c2cc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802c2ce:	787a      	ldrb	r2, [r7, #1]
 802c2d0:	429a      	cmp	r2, r3
 802c2d2:	d002      	beq.n	802c2da <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 802c2d4:	787b      	ldrb	r3, [r7, #1]
 802c2d6:	2bff      	cmp	r3, #255	; 0xff
 802c2d8:	d101      	bne.n	802c2de <USBH_FindInterface+0x72>
    {
      return  if_ix;
 802c2da:	7dfb      	ldrb	r3, [r7, #23]
 802c2dc:	e006      	b.n	802c2ec <USBH_FindInterface+0x80>
    }
    if_ix++;
 802c2de:	7dfb      	ldrb	r3, [r7, #23]
 802c2e0:	3301      	adds	r3, #1
 802c2e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 802c2e4:	7dfb      	ldrb	r3, [r7, #23]
 802c2e6:	2b01      	cmp	r3, #1
 802c2e8:	d9d6      	bls.n	802c298 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 802c2ea:	23ff      	movs	r3, #255	; 0xff
}
 802c2ec:	4618      	mov	r0, r3
 802c2ee:	371c      	adds	r7, #28
 802c2f0:	46bd      	mov	sp, r7
 802c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c2f6:	4770      	bx	lr

0802c2f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 802c2f8:	b580      	push	{r7, lr}
 802c2fa:	b082      	sub	sp, #8
 802c2fc:	af00      	add	r7, sp, #0
 802c2fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 802c300:	6878      	ldr	r0, [r7, #4]
 802c302:	f001 fc87 	bl	802dc14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 802c306:	2101      	movs	r1, #1
 802c308:	6878      	ldr	r0, [r7, #4]
 802c30a:	f001 fda0 	bl	802de4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 802c30e:	2300      	movs	r3, #0
}
 802c310:	4618      	mov	r0, r3
 802c312:	3708      	adds	r7, #8
 802c314:	46bd      	mov	sp, r7
 802c316:	bd80      	pop	{r7, pc}

0802c318 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 802c318:	b580      	push	{r7, lr}
 802c31a:	b088      	sub	sp, #32
 802c31c:	af04      	add	r7, sp, #16
 802c31e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802c320:	2302      	movs	r3, #2
 802c322:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 802c324:	2300      	movs	r3, #0
 802c326:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 802c328:	687b      	ldr	r3, [r7, #4]
 802c32a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802c32e:	b2db      	uxtb	r3, r3
 802c330:	2b01      	cmp	r3, #1
 802c332:	d102      	bne.n	802c33a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 802c334:	687b      	ldr	r3, [r7, #4]
 802c336:	2203      	movs	r2, #3
 802c338:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 802c33a:	687b      	ldr	r3, [r7, #4]
 802c33c:	781b      	ldrb	r3, [r3, #0]
 802c33e:	b2db      	uxtb	r3, r3
 802c340:	2b0b      	cmp	r3, #11
 802c342:	f200 81be 	bhi.w	802c6c2 <USBH_Process+0x3aa>
 802c346:	a201      	add	r2, pc, #4	; (adr r2, 802c34c <USBH_Process+0x34>)
 802c348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c34c:	0802c37d 	.word	0x0802c37d
 802c350:	0802c3af 	.word	0x0802c3af
 802c354:	0802c417 	.word	0x0802c417
 802c358:	0802c65d 	.word	0x0802c65d
 802c35c:	0802c6c3 	.word	0x0802c6c3
 802c360:	0802c4bb 	.word	0x0802c4bb
 802c364:	0802c603 	.word	0x0802c603
 802c368:	0802c4f1 	.word	0x0802c4f1
 802c36c:	0802c511 	.word	0x0802c511
 802c370:	0802c531 	.word	0x0802c531
 802c374:	0802c575 	.word	0x0802c575
 802c378:	0802c645 	.word	0x0802c645
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 802c37c:	687b      	ldr	r3, [r7, #4]
 802c37e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 802c382:	b2db      	uxtb	r3, r3
 802c384:	2b00      	cmp	r3, #0
 802c386:	f000 819e 	beq.w	802c6c6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 802c38a:	687b      	ldr	r3, [r7, #4]
 802c38c:	2201      	movs	r2, #1
 802c38e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 802c390:	20c8      	movs	r0, #200	; 0xc8
 802c392:	f001 fda3 	bl	802dedc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 802c396:	6878      	ldr	r0, [r7, #4]
 802c398:	f001 fc99 	bl	802dcce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 802c39c:	687b      	ldr	r3, [r7, #4]
 802c39e:	2200      	movs	r2, #0
 802c3a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 802c3a4:	687b      	ldr	r3, [r7, #4]
 802c3a6:	2200      	movs	r2, #0
 802c3a8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c3ac:	e18b      	b.n	802c6c6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 802c3ae:	687b      	ldr	r3, [r7, #4]
 802c3b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802c3b4:	2b01      	cmp	r3, #1
 802c3b6:	d107      	bne.n	802c3c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 802c3b8:	687b      	ldr	r3, [r7, #4]
 802c3ba:	2200      	movs	r2, #0
 802c3bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 802c3c0:	687b      	ldr	r3, [r7, #4]
 802c3c2:	2202      	movs	r2, #2
 802c3c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c3c6:	e18d      	b.n	802c6e4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 802c3c8:	687b      	ldr	r3, [r7, #4]
 802c3ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c3ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802c3d2:	d914      	bls.n	802c3fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 802c3d4:	687b      	ldr	r3, [r7, #4]
 802c3d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c3da:	3301      	adds	r3, #1
 802c3dc:	b2da      	uxtb	r2, r3
 802c3de:	687b      	ldr	r3, [r7, #4]
 802c3e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802c3e4:	687b      	ldr	r3, [r7, #4]
 802c3e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 802c3ea:	2b03      	cmp	r3, #3
 802c3ec:	d903      	bls.n	802c3f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	220d      	movs	r2, #13
 802c3f2:	701a      	strb	r2, [r3, #0]
      break;
 802c3f4:	e176      	b.n	802c6e4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 802c3f6:	687b      	ldr	r3, [r7, #4]
 802c3f8:	2200      	movs	r2, #0
 802c3fa:	701a      	strb	r2, [r3, #0]
      break;
 802c3fc:	e172      	b.n	802c6e4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 802c3fe:	687b      	ldr	r3, [r7, #4]
 802c400:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802c404:	f103 020a 	add.w	r2, r3, #10
 802c408:	687b      	ldr	r3, [r7, #4]
 802c40a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 802c40e:	200a      	movs	r0, #10
 802c410:	f001 fd64 	bl	802dedc <USBH_Delay>
      break;
 802c414:	e166      	b.n	802c6e4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 802c416:	687b      	ldr	r3, [r7, #4]
 802c418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c41c:	2b00      	cmp	r3, #0
 802c41e:	d005      	beq.n	802c42c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 802c420:	687b      	ldr	r3, [r7, #4]
 802c422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c426:	2104      	movs	r1, #4
 802c428:	6878      	ldr	r0, [r7, #4]
 802c42a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 802c42c:	2064      	movs	r0, #100	; 0x64
 802c42e:	f001 fd55 	bl	802dedc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 802c432:	6878      	ldr	r0, [r7, #4]
 802c434:	f001 fc24 	bl	802dc80 <USBH_LL_GetSpeed>
 802c438:	4603      	mov	r3, r0
 802c43a:	461a      	mov	r2, r3
 802c43c:	687b      	ldr	r3, [r7, #4]
 802c43e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 802c442:	687b      	ldr	r3, [r7, #4]
 802c444:	2205      	movs	r2, #5
 802c446:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 802c448:	2100      	movs	r1, #0
 802c44a:	6878      	ldr	r0, [r7, #4]
 802c44c:	f001 fa29 	bl	802d8a2 <USBH_AllocPipe>
 802c450:	4603      	mov	r3, r0
 802c452:	461a      	mov	r2, r3
 802c454:	687b      	ldr	r3, [r7, #4]
 802c456:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 802c458:	2180      	movs	r1, #128	; 0x80
 802c45a:	6878      	ldr	r0, [r7, #4]
 802c45c:	f001 fa21 	bl	802d8a2 <USBH_AllocPipe>
 802c460:	4603      	mov	r3, r0
 802c462:	461a      	mov	r2, r3
 802c464:	687b      	ldr	r3, [r7, #4]
 802c466:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c468:	687b      	ldr	r3, [r7, #4]
 802c46a:	7919      	ldrb	r1, [r3, #4]
 802c46c:	687b      	ldr	r3, [r7, #4]
 802c46e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c472:	687b      	ldr	r3, [r7, #4]
 802c474:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c478:	687a      	ldr	r2, [r7, #4]
 802c47a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 802c47c:	b292      	uxth	r2, r2
 802c47e:	9202      	str	r2, [sp, #8]
 802c480:	2200      	movs	r2, #0
 802c482:	9201      	str	r2, [sp, #4]
 802c484:	9300      	str	r3, [sp, #0]
 802c486:	4603      	mov	r3, r0
 802c488:	2280      	movs	r2, #128	; 0x80
 802c48a:	6878      	ldr	r0, [r7, #4]
 802c48c:	f001 f9da 	bl	802d844 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c490:	687b      	ldr	r3, [r7, #4]
 802c492:	7959      	ldrb	r1, [r3, #5]
 802c494:	687b      	ldr	r3, [r7, #4]
 802c496:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c49a:	687b      	ldr	r3, [r7, #4]
 802c49c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802c4a0:	687a      	ldr	r2, [r7, #4]
 802c4a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 802c4a4:	b292      	uxth	r2, r2
 802c4a6:	9202      	str	r2, [sp, #8]
 802c4a8:	2200      	movs	r2, #0
 802c4aa:	9201      	str	r2, [sp, #4]
 802c4ac:	9300      	str	r3, [sp, #0]
 802c4ae:	4603      	mov	r3, r0
 802c4b0:	2200      	movs	r2, #0
 802c4b2:	6878      	ldr	r0, [r7, #4]
 802c4b4:	f001 f9c6 	bl	802d844 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c4b8:	e114      	b.n	802c6e4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802c4ba:	6878      	ldr	r0, [r7, #4]
 802c4bc:	f000 f918 	bl	802c6f0 <USBH_HandleEnum>
 802c4c0:	4603      	mov	r3, r0
 802c4c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 802c4c4:	7bbb      	ldrb	r3, [r7, #14]
 802c4c6:	b2db      	uxtb	r3, r3
 802c4c8:	2b00      	cmp	r3, #0
 802c4ca:	f040 80fe 	bne.w	802c6ca <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802c4ce:	687b      	ldr	r3, [r7, #4]
 802c4d0:	2200      	movs	r2, #0
 802c4d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 802c4d6:	687b      	ldr	r3, [r7, #4]
 802c4d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802c4dc:	2b01      	cmp	r3, #1
 802c4de:	d103      	bne.n	802c4e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 802c4e0:	687b      	ldr	r3, [r7, #4]
 802c4e2:	2208      	movs	r2, #8
 802c4e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c4e6:	e0f0      	b.n	802c6ca <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 802c4e8:	687b      	ldr	r3, [r7, #4]
 802c4ea:	2207      	movs	r2, #7
 802c4ec:	701a      	strb	r2, [r3, #0]
      break;
 802c4ee:	e0ec      	b.n	802c6ca <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 802c4f0:	687b      	ldr	r3, [r7, #4]
 802c4f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c4f6:	2b00      	cmp	r3, #0
 802c4f8:	f000 80e9 	beq.w	802c6ce <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 802c4fc:	687b      	ldr	r3, [r7, #4]
 802c4fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c502:	2101      	movs	r1, #1
 802c504:	6878      	ldr	r0, [r7, #4]
 802c506:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 802c508:	687b      	ldr	r3, [r7, #4]
 802c50a:	2208      	movs	r2, #8
 802c50c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 802c50e:	e0de      	b.n	802c6ce <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 802c510:	687b      	ldr	r3, [r7, #4]
 802c512:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 802c516:	b29b      	uxth	r3, r3
 802c518:	4619      	mov	r1, r3
 802c51a:	6878      	ldr	r0, [r7, #4]
 802c51c:	f000 fc2c 	bl	802cd78 <USBH_SetCfg>
 802c520:	4603      	mov	r3, r0
 802c522:	2b00      	cmp	r3, #0
 802c524:	f040 80d5 	bne.w	802c6d2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802c528:	687b      	ldr	r3, [r7, #4]
 802c52a:	2209      	movs	r2, #9
 802c52c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c52e:	e0d0      	b.n	802c6d2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 802c530:	687b      	ldr	r3, [r7, #4]
 802c532:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 802c536:	f003 0320 	and.w	r3, r3, #32
 802c53a:	2b00      	cmp	r3, #0
 802c53c:	d016      	beq.n	802c56c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 802c53e:	2101      	movs	r1, #1
 802c540:	6878      	ldr	r0, [r7, #4]
 802c542:	f000 fc3c 	bl	802cdbe <USBH_SetFeature>
 802c546:	4603      	mov	r3, r0
 802c548:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c54a:	7bbb      	ldrb	r3, [r7, #14]
 802c54c:	b2db      	uxtb	r3, r3
 802c54e:	2b00      	cmp	r3, #0
 802c550:	d103      	bne.n	802c55a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802c552:	687b      	ldr	r3, [r7, #4]
 802c554:	220a      	movs	r2, #10
 802c556:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c558:	e0bd      	b.n	802c6d6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 802c55a:	7bbb      	ldrb	r3, [r7, #14]
 802c55c:	b2db      	uxtb	r3, r3
 802c55e:	2b03      	cmp	r3, #3
 802c560:	f040 80b9 	bne.w	802c6d6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 802c564:	687b      	ldr	r3, [r7, #4]
 802c566:	220a      	movs	r2, #10
 802c568:	701a      	strb	r2, [r3, #0]
      break;
 802c56a:	e0b4      	b.n	802c6d6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 802c56c:	687b      	ldr	r3, [r7, #4]
 802c56e:	220a      	movs	r2, #10
 802c570:	701a      	strb	r2, [r3, #0]
      break;
 802c572:	e0b0      	b.n	802c6d6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802c574:	687b      	ldr	r3, [r7, #4]
 802c576:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 802c57a:	2b00      	cmp	r3, #0
 802c57c:	f000 80ad 	beq.w	802c6da <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 802c580:	687b      	ldr	r3, [r7, #4]
 802c582:	2200      	movs	r2, #0
 802c584:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c588:	2300      	movs	r3, #0
 802c58a:	73fb      	strb	r3, [r7, #15]
 802c58c:	e016      	b.n	802c5bc <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 802c58e:	7bfa      	ldrb	r2, [r7, #15]
 802c590:	687b      	ldr	r3, [r7, #4]
 802c592:	32de      	adds	r2, #222	; 0xde
 802c594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c598:	791a      	ldrb	r2, [r3, #4]
 802c59a:	687b      	ldr	r3, [r7, #4]
 802c59c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 802c5a0:	429a      	cmp	r2, r3
 802c5a2:	d108      	bne.n	802c5b6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 802c5a4:	7bfa      	ldrb	r2, [r7, #15]
 802c5a6:	687b      	ldr	r3, [r7, #4]
 802c5a8:	32de      	adds	r2, #222	; 0xde
 802c5aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802c5ae:	687b      	ldr	r3, [r7, #4]
 802c5b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 802c5b4:	e005      	b.n	802c5c2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802c5b6:	7bfb      	ldrb	r3, [r7, #15]
 802c5b8:	3301      	adds	r3, #1
 802c5ba:	73fb      	strb	r3, [r7, #15]
 802c5bc:	7bfb      	ldrb	r3, [r7, #15]
 802c5be:	2b00      	cmp	r3, #0
 802c5c0:	d0e5      	beq.n	802c58e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 802c5c2:	687b      	ldr	r3, [r7, #4]
 802c5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c5c8:	2b00      	cmp	r3, #0
 802c5ca:	d016      	beq.n	802c5fa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 802c5cc:	687b      	ldr	r3, [r7, #4]
 802c5ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c5d2:	689b      	ldr	r3, [r3, #8]
 802c5d4:	6878      	ldr	r0, [r7, #4]
 802c5d6:	4798      	blx	r3
 802c5d8:	4603      	mov	r3, r0
 802c5da:	2b00      	cmp	r3, #0
 802c5dc:	d109      	bne.n	802c5f2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 802c5de:	687b      	ldr	r3, [r7, #4]
 802c5e0:	2206      	movs	r2, #6
 802c5e2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 802c5e4:	687b      	ldr	r3, [r7, #4]
 802c5e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c5ea:	2103      	movs	r1, #3
 802c5ec:	6878      	ldr	r0, [r7, #4]
 802c5ee:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c5f0:	e073      	b.n	802c6da <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 802c5f2:	687b      	ldr	r3, [r7, #4]
 802c5f4:	220d      	movs	r2, #13
 802c5f6:	701a      	strb	r2, [r3, #0]
      break;
 802c5f8:	e06f      	b.n	802c6da <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	220d      	movs	r2, #13
 802c5fe:	701a      	strb	r2, [r3, #0]
      break;
 802c600:	e06b      	b.n	802c6da <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 802c602:	687b      	ldr	r3, [r7, #4]
 802c604:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c608:	2b00      	cmp	r3, #0
 802c60a:	d017      	beq.n	802c63c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 802c60c:	687b      	ldr	r3, [r7, #4]
 802c60e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c612:	691b      	ldr	r3, [r3, #16]
 802c614:	6878      	ldr	r0, [r7, #4]
 802c616:	4798      	blx	r3
 802c618:	4603      	mov	r3, r0
 802c61a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802c61c:	7bbb      	ldrb	r3, [r7, #14]
 802c61e:	b2db      	uxtb	r3, r3
 802c620:	2b00      	cmp	r3, #0
 802c622:	d103      	bne.n	802c62c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 802c624:	687b      	ldr	r3, [r7, #4]
 802c626:	220b      	movs	r2, #11
 802c628:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c62a:	e058      	b.n	802c6de <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 802c62c:	7bbb      	ldrb	r3, [r7, #14]
 802c62e:	b2db      	uxtb	r3, r3
 802c630:	2b02      	cmp	r3, #2
 802c632:	d154      	bne.n	802c6de <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 802c634:	687b      	ldr	r3, [r7, #4]
 802c636:	220d      	movs	r2, #13
 802c638:	701a      	strb	r2, [r3, #0]
      break;
 802c63a:	e050      	b.n	802c6de <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 802c63c:	687b      	ldr	r3, [r7, #4]
 802c63e:	220d      	movs	r2, #13
 802c640:	701a      	strb	r2, [r3, #0]
      break;
 802c642:	e04c      	b.n	802c6de <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 802c644:	687b      	ldr	r3, [r7, #4]
 802c646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c64a:	2b00      	cmp	r3, #0
 802c64c:	d049      	beq.n	802c6e2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 802c64e:	687b      	ldr	r3, [r7, #4]
 802c650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c654:	695b      	ldr	r3, [r3, #20]
 802c656:	6878      	ldr	r0, [r7, #4]
 802c658:	4798      	blx	r3
      }
      break;
 802c65a:	e042      	b.n	802c6e2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 802c65c:	687b      	ldr	r3, [r7, #4]
 802c65e:	2200      	movs	r2, #0
 802c660:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 802c664:	6878      	ldr	r0, [r7, #4]
 802c666:	f7ff fd67 	bl	802c138 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 802c66a:	687b      	ldr	r3, [r7, #4]
 802c66c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c670:	2b00      	cmp	r3, #0
 802c672:	d009      	beq.n	802c688 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 802c674:	687b      	ldr	r3, [r7, #4]
 802c676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802c67a:	68db      	ldr	r3, [r3, #12]
 802c67c:	6878      	ldr	r0, [r7, #4]
 802c67e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 802c680:	687b      	ldr	r3, [r7, #4]
 802c682:	2200      	movs	r2, #0
 802c684:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 802c688:	687b      	ldr	r3, [r7, #4]
 802c68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c68e:	2b00      	cmp	r3, #0
 802c690:	d005      	beq.n	802c69e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 802c692:	687b      	ldr	r3, [r7, #4]
 802c694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802c698:	2105      	movs	r1, #5
 802c69a:	6878      	ldr	r0, [r7, #4]
 802c69c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 802c69e:	687b      	ldr	r3, [r7, #4]
 802c6a0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 802c6a4:	b2db      	uxtb	r3, r3
 802c6a6:	2b01      	cmp	r3, #1
 802c6a8:	d107      	bne.n	802c6ba <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 802c6aa:	687b      	ldr	r3, [r7, #4]
 802c6ac:	2200      	movs	r2, #0
 802c6ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 802c6b2:	6878      	ldr	r0, [r7, #4]
 802c6b4:	f7ff fe20 	bl	802c2f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 802c6b8:	e014      	b.n	802c6e4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 802c6ba:	6878      	ldr	r0, [r7, #4]
 802c6bc:	f001 faaa 	bl	802dc14 <USBH_LL_Start>
      break;
 802c6c0:	e010      	b.n	802c6e4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 802c6c2:	bf00      	nop
 802c6c4:	e00e      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6c6:	bf00      	nop
 802c6c8:	e00c      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6ca:	bf00      	nop
 802c6cc:	e00a      	b.n	802c6e4 <USBH_Process+0x3cc>
    break;
 802c6ce:	bf00      	nop
 802c6d0:	e008      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6d2:	bf00      	nop
 802c6d4:	e006      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6d6:	bf00      	nop
 802c6d8:	e004      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6da:	bf00      	nop
 802c6dc:	e002      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6de:	bf00      	nop
 802c6e0:	e000      	b.n	802c6e4 <USBH_Process+0x3cc>
      break;
 802c6e2:	bf00      	nop
  }
  return USBH_OK;
 802c6e4:	2300      	movs	r3, #0
}
 802c6e6:	4618      	mov	r0, r3
 802c6e8:	3710      	adds	r7, #16
 802c6ea:	46bd      	mov	sp, r7
 802c6ec:	bd80      	pop	{r7, pc}
 802c6ee:	bf00      	nop

0802c6f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 802c6f0:	b580      	push	{r7, lr}
 802c6f2:	b088      	sub	sp, #32
 802c6f4:	af04      	add	r7, sp, #16
 802c6f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 802c6f8:	2301      	movs	r3, #1
 802c6fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 802c6fc:	2301      	movs	r3, #1
 802c6fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	785b      	ldrb	r3, [r3, #1]
 802c704:	2b07      	cmp	r3, #7
 802c706:	f200 81c1 	bhi.w	802ca8c <USBH_HandleEnum+0x39c>
 802c70a:	a201      	add	r2, pc, #4	; (adr r2, 802c710 <USBH_HandleEnum+0x20>)
 802c70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802c710:	0802c731 	.word	0x0802c731
 802c714:	0802c7ef 	.word	0x0802c7ef
 802c718:	0802c859 	.word	0x0802c859
 802c71c:	0802c8e7 	.word	0x0802c8e7
 802c720:	0802c951 	.word	0x0802c951
 802c724:	0802c9c1 	.word	0x0802c9c1
 802c728:	0802ca07 	.word	0x0802ca07
 802c72c:	0802ca4d 	.word	0x0802ca4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 802c730:	2108      	movs	r1, #8
 802c732:	6878      	ldr	r0, [r7, #4]
 802c734:	f000 fa50 	bl	802cbd8 <USBH_Get_DevDesc>
 802c738:	4603      	mov	r3, r0
 802c73a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c73c:	7bbb      	ldrb	r3, [r7, #14]
 802c73e:	2b00      	cmp	r3, #0
 802c740:	d130      	bne.n	802c7a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 802c742:	687b      	ldr	r3, [r7, #4]
 802c744:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 802c748:	687b      	ldr	r3, [r7, #4]
 802c74a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 802c74c:	687b      	ldr	r3, [r7, #4]
 802c74e:	2201      	movs	r2, #1
 802c750:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c752:	687b      	ldr	r3, [r7, #4]
 802c754:	7919      	ldrb	r1, [r3, #4]
 802c756:	687b      	ldr	r3, [r7, #4]
 802c758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c75c:	687b      	ldr	r3, [r7, #4]
 802c75e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c762:	687a      	ldr	r2, [r7, #4]
 802c764:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 802c766:	b292      	uxth	r2, r2
 802c768:	9202      	str	r2, [sp, #8]
 802c76a:	2200      	movs	r2, #0
 802c76c:	9201      	str	r2, [sp, #4]
 802c76e:	9300      	str	r3, [sp, #0]
 802c770:	4603      	mov	r3, r0
 802c772:	2280      	movs	r2, #128	; 0x80
 802c774:	6878      	ldr	r0, [r7, #4]
 802c776:	f001 f865 	bl	802d844 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c77a:	687b      	ldr	r3, [r7, #4]
 802c77c:	7959      	ldrb	r1, [r3, #5]
 802c77e:	687b      	ldr	r3, [r7, #4]
 802c780:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c784:	687b      	ldr	r3, [r7, #4]
 802c786:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c78a:	687a      	ldr	r2, [r7, #4]
 802c78c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c78e:	b292      	uxth	r2, r2
 802c790:	9202      	str	r2, [sp, #8]
 802c792:	2200      	movs	r2, #0
 802c794:	9201      	str	r2, [sp, #4]
 802c796:	9300      	str	r3, [sp, #0]
 802c798:	4603      	mov	r3, r0
 802c79a:	2200      	movs	r2, #0
 802c79c:	6878      	ldr	r0, [r7, #4]
 802c79e:	f001 f851 	bl	802d844 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c7a2:	e175      	b.n	802ca90 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c7a4:	7bbb      	ldrb	r3, [r7, #14]
 802c7a6:	2b03      	cmp	r3, #3
 802c7a8:	f040 8172 	bne.w	802ca90 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 802c7ac:	687b      	ldr	r3, [r7, #4]
 802c7ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c7b2:	3301      	adds	r3, #1
 802c7b4:	b2da      	uxtb	r2, r3
 802c7b6:	687b      	ldr	r3, [r7, #4]
 802c7b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c7bc:	687b      	ldr	r3, [r7, #4]
 802c7be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c7c2:	2b03      	cmp	r3, #3
 802c7c4:	d903      	bls.n	802c7ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 802c7c6:	687b      	ldr	r3, [r7, #4]
 802c7c8:	220d      	movs	r2, #13
 802c7ca:	701a      	strb	r2, [r3, #0]
      break;
 802c7cc:	e160      	b.n	802ca90 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c7ce:	687b      	ldr	r3, [r7, #4]
 802c7d0:	795b      	ldrb	r3, [r3, #5]
 802c7d2:	4619      	mov	r1, r3
 802c7d4:	6878      	ldr	r0, [r7, #4]
 802c7d6:	f001 f885 	bl	802d8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c7da:	687b      	ldr	r3, [r7, #4]
 802c7dc:	791b      	ldrb	r3, [r3, #4]
 802c7de:	4619      	mov	r1, r3
 802c7e0:	6878      	ldr	r0, [r7, #4]
 802c7e2:	f001 f87f 	bl	802d8e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 802c7e6:	687b      	ldr	r3, [r7, #4]
 802c7e8:	2200      	movs	r2, #0
 802c7ea:	701a      	strb	r2, [r3, #0]
      break;
 802c7ec:	e150      	b.n	802ca90 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 802c7ee:	2112      	movs	r1, #18
 802c7f0:	6878      	ldr	r0, [r7, #4]
 802c7f2:	f000 f9f1 	bl	802cbd8 <USBH_Get_DevDesc>
 802c7f6:	4603      	mov	r3, r0
 802c7f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c7fa:	7bbb      	ldrb	r3, [r7, #14]
 802c7fc:	2b00      	cmp	r3, #0
 802c7fe:	d103      	bne.n	802c808 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 802c800:	687b      	ldr	r3, [r7, #4]
 802c802:	2202      	movs	r2, #2
 802c804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c806:	e145      	b.n	802ca94 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c808:	7bbb      	ldrb	r3, [r7, #14]
 802c80a:	2b03      	cmp	r3, #3
 802c80c:	f040 8142 	bne.w	802ca94 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 802c810:	687b      	ldr	r3, [r7, #4]
 802c812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c816:	3301      	adds	r3, #1
 802c818:	b2da      	uxtb	r2, r3
 802c81a:	687b      	ldr	r3, [r7, #4]
 802c81c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c820:	687b      	ldr	r3, [r7, #4]
 802c822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c826:	2b03      	cmp	r3, #3
 802c828:	d903      	bls.n	802c832 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 802c82a:	687b      	ldr	r3, [r7, #4]
 802c82c:	220d      	movs	r2, #13
 802c82e:	701a      	strb	r2, [r3, #0]
      break;
 802c830:	e130      	b.n	802ca94 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c832:	687b      	ldr	r3, [r7, #4]
 802c834:	795b      	ldrb	r3, [r3, #5]
 802c836:	4619      	mov	r1, r3
 802c838:	6878      	ldr	r0, [r7, #4]
 802c83a:	f001 f853 	bl	802d8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c83e:	687b      	ldr	r3, [r7, #4]
 802c840:	791b      	ldrb	r3, [r3, #4]
 802c842:	4619      	mov	r1, r3
 802c844:	6878      	ldr	r0, [r7, #4]
 802c846:	f001 f84d 	bl	802d8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c84a:	687b      	ldr	r3, [r7, #4]
 802c84c:	2200      	movs	r2, #0
 802c84e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c850:	687b      	ldr	r3, [r7, #4]
 802c852:	2200      	movs	r2, #0
 802c854:	701a      	strb	r2, [r3, #0]
      break;
 802c856:	e11d      	b.n	802ca94 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 802c858:	2101      	movs	r1, #1
 802c85a:	6878      	ldr	r0, [r7, #4]
 802c85c:	f000 fa68 	bl	802cd30 <USBH_SetAddress>
 802c860:	4603      	mov	r3, r0
 802c862:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c864:	7bbb      	ldrb	r3, [r7, #14]
 802c866:	2b00      	cmp	r3, #0
 802c868:	d132      	bne.n	802c8d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 802c86a:	2002      	movs	r0, #2
 802c86c:	f001 fb36 	bl	802dedc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 802c870:	687b      	ldr	r3, [r7, #4]
 802c872:	2201      	movs	r2, #1
 802c874:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 802c878:	687b      	ldr	r3, [r7, #4]
 802c87a:	2203      	movs	r2, #3
 802c87c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c87e:	687b      	ldr	r3, [r7, #4]
 802c880:	7919      	ldrb	r1, [r3, #4]
 802c882:	687b      	ldr	r3, [r7, #4]
 802c884:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c888:	687b      	ldr	r3, [r7, #4]
 802c88a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c88e:	687a      	ldr	r2, [r7, #4]
 802c890:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 802c892:	b292      	uxth	r2, r2
 802c894:	9202      	str	r2, [sp, #8]
 802c896:	2200      	movs	r2, #0
 802c898:	9201      	str	r2, [sp, #4]
 802c89a:	9300      	str	r3, [sp, #0]
 802c89c:	4603      	mov	r3, r0
 802c89e:	2280      	movs	r2, #128	; 0x80
 802c8a0:	6878      	ldr	r0, [r7, #4]
 802c8a2:	f000 ffcf 	bl	802d844 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c8a6:	687b      	ldr	r3, [r7, #4]
 802c8a8:	7959      	ldrb	r1, [r3, #5]
 802c8aa:	687b      	ldr	r3, [r7, #4]
 802c8ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802c8b0:	687b      	ldr	r3, [r7, #4]
 802c8b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 802c8b6:	687a      	ldr	r2, [r7, #4]
 802c8b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 802c8ba:	b292      	uxth	r2, r2
 802c8bc:	9202      	str	r2, [sp, #8]
 802c8be:	2200      	movs	r2, #0
 802c8c0:	9201      	str	r2, [sp, #4]
 802c8c2:	9300      	str	r3, [sp, #0]
 802c8c4:	4603      	mov	r3, r0
 802c8c6:	2200      	movs	r2, #0
 802c8c8:	6878      	ldr	r0, [r7, #4]
 802c8ca:	f000 ffbb 	bl	802d844 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 802c8ce:	e0e3      	b.n	802ca98 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c8d0:	7bbb      	ldrb	r3, [r7, #14]
 802c8d2:	2b03      	cmp	r3, #3
 802c8d4:	f040 80e0 	bne.w	802ca98 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 802c8d8:	687b      	ldr	r3, [r7, #4]
 802c8da:	220d      	movs	r2, #13
 802c8dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 802c8de:	687b      	ldr	r3, [r7, #4]
 802c8e0:	2200      	movs	r2, #0
 802c8e2:	705a      	strb	r2, [r3, #1]
      break;
 802c8e4:	e0d8      	b.n	802ca98 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 802c8e6:	2109      	movs	r1, #9
 802c8e8:	6878      	ldr	r0, [r7, #4]
 802c8ea:	f000 f99d 	bl	802cc28 <USBH_Get_CfgDesc>
 802c8ee:	4603      	mov	r3, r0
 802c8f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c8f2:	7bbb      	ldrb	r3, [r7, #14]
 802c8f4:	2b00      	cmp	r3, #0
 802c8f6:	d103      	bne.n	802c900 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 802c8f8:	687b      	ldr	r3, [r7, #4]
 802c8fa:	2204      	movs	r2, #4
 802c8fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c8fe:	e0cd      	b.n	802ca9c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c900:	7bbb      	ldrb	r3, [r7, #14]
 802c902:	2b03      	cmp	r3, #3
 802c904:	f040 80ca 	bne.w	802ca9c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 802c908:	687b      	ldr	r3, [r7, #4]
 802c90a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c90e:	3301      	adds	r3, #1
 802c910:	b2da      	uxtb	r2, r3
 802c912:	687b      	ldr	r3, [r7, #4]
 802c914:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c918:	687b      	ldr	r3, [r7, #4]
 802c91a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c91e:	2b03      	cmp	r3, #3
 802c920:	d903      	bls.n	802c92a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 802c922:	687b      	ldr	r3, [r7, #4]
 802c924:	220d      	movs	r2, #13
 802c926:	701a      	strb	r2, [r3, #0]
      break;
 802c928:	e0b8      	b.n	802ca9c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c92a:	687b      	ldr	r3, [r7, #4]
 802c92c:	795b      	ldrb	r3, [r3, #5]
 802c92e:	4619      	mov	r1, r3
 802c930:	6878      	ldr	r0, [r7, #4]
 802c932:	f000 ffd7 	bl	802d8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c936:	687b      	ldr	r3, [r7, #4]
 802c938:	791b      	ldrb	r3, [r3, #4]
 802c93a:	4619      	mov	r1, r3
 802c93c:	6878      	ldr	r0, [r7, #4]
 802c93e:	f000 ffd1 	bl	802d8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c942:	687b      	ldr	r3, [r7, #4]
 802c944:	2200      	movs	r2, #0
 802c946:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c948:	687b      	ldr	r3, [r7, #4]
 802c94a:	2200      	movs	r2, #0
 802c94c:	701a      	strb	r2, [r3, #0]
      break;
 802c94e:	e0a5      	b.n	802ca9c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 802c950:	687b      	ldr	r3, [r7, #4]
 802c952:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 802c956:	4619      	mov	r1, r3
 802c958:	6878      	ldr	r0, [r7, #4]
 802c95a:	f000 f965 	bl	802cc28 <USBH_Get_CfgDesc>
 802c95e:	4603      	mov	r3, r0
 802c960:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 802c962:	7bbb      	ldrb	r3, [r7, #14]
 802c964:	2b00      	cmp	r3, #0
 802c966:	d103      	bne.n	802c970 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 802c968:	687b      	ldr	r3, [r7, #4]
 802c96a:	2205      	movs	r2, #5
 802c96c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 802c96e:	e097      	b.n	802caa0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c970:	7bbb      	ldrb	r3, [r7, #14]
 802c972:	2b03      	cmp	r3, #3
 802c974:	f040 8094 	bne.w	802caa0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 802c978:	687b      	ldr	r3, [r7, #4]
 802c97a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c97e:	3301      	adds	r3, #1
 802c980:	b2da      	uxtb	r2, r3
 802c982:	687b      	ldr	r3, [r7, #4]
 802c984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 802c988:	687b      	ldr	r3, [r7, #4]
 802c98a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 802c98e:	2b03      	cmp	r3, #3
 802c990:	d903      	bls.n	802c99a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 802c992:	687b      	ldr	r3, [r7, #4]
 802c994:	220d      	movs	r2, #13
 802c996:	701a      	strb	r2, [r3, #0]
      break;
 802c998:	e082      	b.n	802caa0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802c99a:	687b      	ldr	r3, [r7, #4]
 802c99c:	795b      	ldrb	r3, [r3, #5]
 802c99e:	4619      	mov	r1, r3
 802c9a0:	6878      	ldr	r0, [r7, #4]
 802c9a2:	f000 ff9f 	bl	802d8e4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802c9a6:	687b      	ldr	r3, [r7, #4]
 802c9a8:	791b      	ldrb	r3, [r3, #4]
 802c9aa:	4619      	mov	r1, r3
 802c9ac:	6878      	ldr	r0, [r7, #4]
 802c9ae:	f000 ff99 	bl	802d8e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 802c9b2:	687b      	ldr	r3, [r7, #4]
 802c9b4:	2200      	movs	r2, #0
 802c9b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 802c9b8:	687b      	ldr	r3, [r7, #4]
 802c9ba:	2200      	movs	r2, #0
 802c9bc:	701a      	strb	r2, [r3, #0]
      break;
 802c9be:	e06f      	b.n	802caa0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 802c9c0:	687b      	ldr	r3, [r7, #4]
 802c9c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 802c9c6:	2b00      	cmp	r3, #0
 802c9c8:	d019      	beq.n	802c9fe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c9ca:	687b      	ldr	r3, [r7, #4]
 802c9cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 802c9d0:	687b      	ldr	r3, [r7, #4]
 802c9d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 802c9d6:	23ff      	movs	r3, #255	; 0xff
 802c9d8:	6878      	ldr	r0, [r7, #4]
 802c9da:	f000 f949 	bl	802cc70 <USBH_Get_StringDesc>
 802c9de:	4603      	mov	r3, r0
 802c9e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802c9e2:	7bbb      	ldrb	r3, [r7, #14]
 802c9e4:	2b00      	cmp	r3, #0
 802c9e6:	d103      	bne.n	802c9f0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c9e8:	687b      	ldr	r3, [r7, #4]
 802c9ea:	2206      	movs	r2, #6
 802c9ec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802c9ee:	e059      	b.n	802caa4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802c9f0:	7bbb      	ldrb	r3, [r7, #14]
 802c9f2:	2b03      	cmp	r3, #3
 802c9f4:	d156      	bne.n	802caa4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c9f6:	687b      	ldr	r3, [r7, #4]
 802c9f8:	2206      	movs	r2, #6
 802c9fa:	705a      	strb	r2, [r3, #1]
      break;
 802c9fc:	e052      	b.n	802caa4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 802c9fe:	687b      	ldr	r3, [r7, #4]
 802ca00:	2206      	movs	r2, #6
 802ca02:	705a      	strb	r2, [r3, #1]
      break;
 802ca04:	e04e      	b.n	802caa4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 802ca06:	687b      	ldr	r3, [r7, #4]
 802ca08:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 802ca0c:	2b00      	cmp	r3, #0
 802ca0e:	d019      	beq.n	802ca44 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802ca10:	687b      	ldr	r3, [r7, #4]
 802ca12:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 802ca16:	687b      	ldr	r3, [r7, #4]
 802ca18:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 802ca1c:	23ff      	movs	r3, #255	; 0xff
 802ca1e:	6878      	ldr	r0, [r7, #4]
 802ca20:	f000 f926 	bl	802cc70 <USBH_Get_StringDesc>
 802ca24:	4603      	mov	r3, r0
 802ca26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ca28:	7bbb      	ldrb	r3, [r7, #14]
 802ca2a:	2b00      	cmp	r3, #0
 802ca2c:	d103      	bne.n	802ca36 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ca2e:	687b      	ldr	r3, [r7, #4]
 802ca30:	2207      	movs	r2, #7
 802ca32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 802ca34:	e038      	b.n	802caa8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ca36:	7bbb      	ldrb	r3, [r7, #14]
 802ca38:	2b03      	cmp	r3, #3
 802ca3a:	d135      	bne.n	802caa8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ca3c:	687b      	ldr	r3, [r7, #4]
 802ca3e:	2207      	movs	r2, #7
 802ca40:	705a      	strb	r2, [r3, #1]
      break;
 802ca42:	e031      	b.n	802caa8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 802ca44:	687b      	ldr	r3, [r7, #4]
 802ca46:	2207      	movs	r2, #7
 802ca48:	705a      	strb	r2, [r3, #1]
      break;
 802ca4a:	e02d      	b.n	802caa8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 802ca4c:	687b      	ldr	r3, [r7, #4]
 802ca4e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802ca52:	2b00      	cmp	r3, #0
 802ca54:	d017      	beq.n	802ca86 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802ca56:	687b      	ldr	r3, [r7, #4]
 802ca58:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 802ca5c:	687b      	ldr	r3, [r7, #4]
 802ca5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 802ca62:	23ff      	movs	r3, #255	; 0xff
 802ca64:	6878      	ldr	r0, [r7, #4]
 802ca66:	f000 f903 	bl	802cc70 <USBH_Get_StringDesc>
 802ca6a:	4603      	mov	r3, r0
 802ca6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 802ca6e:	7bbb      	ldrb	r3, [r7, #14]
 802ca70:	2b00      	cmp	r3, #0
 802ca72:	d102      	bne.n	802ca7a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 802ca74:	2300      	movs	r3, #0
 802ca76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 802ca78:	e018      	b.n	802caac <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 802ca7a:	7bbb      	ldrb	r3, [r7, #14]
 802ca7c:	2b03      	cmp	r3, #3
 802ca7e:	d115      	bne.n	802caac <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 802ca80:	2300      	movs	r3, #0
 802ca82:	73fb      	strb	r3, [r7, #15]
      break;
 802ca84:	e012      	b.n	802caac <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 802ca86:	2300      	movs	r3, #0
 802ca88:	73fb      	strb	r3, [r7, #15]
      break;
 802ca8a:	e00f      	b.n	802caac <USBH_HandleEnum+0x3bc>

    default:
      break;
 802ca8c:	bf00      	nop
 802ca8e:	e00e      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802ca90:	bf00      	nop
 802ca92:	e00c      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802ca94:	bf00      	nop
 802ca96:	e00a      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802ca98:	bf00      	nop
 802ca9a:	e008      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802ca9c:	bf00      	nop
 802ca9e:	e006      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802caa0:	bf00      	nop
 802caa2:	e004      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802caa4:	bf00      	nop
 802caa6:	e002      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802caa8:	bf00      	nop
 802caaa:	e000      	b.n	802caae <USBH_HandleEnum+0x3be>
      break;
 802caac:	bf00      	nop
  }
  return Status;
 802caae:	7bfb      	ldrb	r3, [r7, #15]
}
 802cab0:	4618      	mov	r0, r3
 802cab2:	3710      	adds	r7, #16
 802cab4:	46bd      	mov	sp, r7
 802cab6:	bd80      	pop	{r7, pc}

0802cab8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 802cab8:	b480      	push	{r7}
 802caba:	b083      	sub	sp, #12
 802cabc:	af00      	add	r7, sp, #0
 802cabe:	6078      	str	r0, [r7, #4]
 802cac0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 802cac2:	687b      	ldr	r3, [r7, #4]
 802cac4:	683a      	ldr	r2, [r7, #0]
 802cac6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 802caca:	bf00      	nop
 802cacc:	370c      	adds	r7, #12
 802cace:	46bd      	mov	sp, r7
 802cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cad4:	4770      	bx	lr

0802cad6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 802cad6:	b580      	push	{r7, lr}
 802cad8:	b082      	sub	sp, #8
 802cada:	af00      	add	r7, sp, #0
 802cadc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 802cade:	687b      	ldr	r3, [r7, #4]
 802cae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802cae4:	1c5a      	adds	r2, r3, #1
 802cae6:	687b      	ldr	r3, [r7, #4]
 802cae8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 802caec:	6878      	ldr	r0, [r7, #4]
 802caee:	f000 f804 	bl	802cafa <USBH_HandleSof>
}
 802caf2:	bf00      	nop
 802caf4:	3708      	adds	r7, #8
 802caf6:	46bd      	mov	sp, r7
 802caf8:	bd80      	pop	{r7, pc}

0802cafa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 802cafa:	b580      	push	{r7, lr}
 802cafc:	b082      	sub	sp, #8
 802cafe:	af00      	add	r7, sp, #0
 802cb00:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 802cb02:	687b      	ldr	r3, [r7, #4]
 802cb04:	781b      	ldrb	r3, [r3, #0]
 802cb06:	b2db      	uxtb	r3, r3
 802cb08:	2b0b      	cmp	r3, #11
 802cb0a:	d10a      	bne.n	802cb22 <USBH_HandleSof+0x28>
 802cb0c:	687b      	ldr	r3, [r7, #4]
 802cb0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cb12:	2b00      	cmp	r3, #0
 802cb14:	d005      	beq.n	802cb22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 802cb16:	687b      	ldr	r3, [r7, #4]
 802cb18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 802cb1c:	699b      	ldr	r3, [r3, #24]
 802cb1e:	6878      	ldr	r0, [r7, #4]
 802cb20:	4798      	blx	r3
  }
}
 802cb22:	bf00      	nop
 802cb24:	3708      	adds	r7, #8
 802cb26:	46bd      	mov	sp, r7
 802cb28:	bd80      	pop	{r7, pc}

0802cb2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 802cb2a:	b480      	push	{r7}
 802cb2c:	b083      	sub	sp, #12
 802cb2e:	af00      	add	r7, sp, #0
 802cb30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 802cb32:	687b      	ldr	r3, [r7, #4]
 802cb34:	2201      	movs	r2, #1
 802cb36:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 802cb3a:	bf00      	nop
}
 802cb3c:	370c      	adds	r7, #12
 802cb3e:	46bd      	mov	sp, r7
 802cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb44:	4770      	bx	lr

0802cb46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 802cb46:	b480      	push	{r7}
 802cb48:	b083      	sub	sp, #12
 802cb4a:	af00      	add	r7, sp, #0
 802cb4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 802cb4e:	687b      	ldr	r3, [r7, #4]
 802cb50:	2200      	movs	r2, #0
 802cb52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 802cb56:	bf00      	nop
}
 802cb58:	370c      	adds	r7, #12
 802cb5a:	46bd      	mov	sp, r7
 802cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb60:	4770      	bx	lr

0802cb62 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 802cb62:	b480      	push	{r7}
 802cb64:	b083      	sub	sp, #12
 802cb66:	af00      	add	r7, sp, #0
 802cb68:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 802cb6a:	687b      	ldr	r3, [r7, #4]
 802cb6c:	2201      	movs	r2, #1
 802cb6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 802cb72:	687b      	ldr	r3, [r7, #4]
 802cb74:	2200      	movs	r2, #0
 802cb76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802cb7a:	687b      	ldr	r3, [r7, #4]
 802cb7c:	2200      	movs	r2, #0
 802cb7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cb82:	2300      	movs	r3, #0
}
 802cb84:	4618      	mov	r0, r3
 802cb86:	370c      	adds	r7, #12
 802cb88:	46bd      	mov	sp, r7
 802cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cb8e:	4770      	bx	lr

0802cb90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 802cb90:	b580      	push	{r7, lr}
 802cb92:	b082      	sub	sp, #8
 802cb94:	af00      	add	r7, sp, #0
 802cb96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 802cb98:	687b      	ldr	r3, [r7, #4]
 802cb9a:	2201      	movs	r2, #1
 802cb9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 802cba0:	687b      	ldr	r3, [r7, #4]
 802cba2:	2200      	movs	r2, #0
 802cba4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 802cba8:	687b      	ldr	r3, [r7, #4]
 802cbaa:	2200      	movs	r2, #0
 802cbac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 802cbb0:	6878      	ldr	r0, [r7, #4]
 802cbb2:	f001 f84a 	bl	802dc4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802cbb6:	687b      	ldr	r3, [r7, #4]
 802cbb8:	791b      	ldrb	r3, [r3, #4]
 802cbba:	4619      	mov	r1, r3
 802cbbc:	6878      	ldr	r0, [r7, #4]
 802cbbe:	f000 fe91 	bl	802d8e4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802cbc2:	687b      	ldr	r3, [r7, #4]
 802cbc4:	795b      	ldrb	r3, [r3, #5]
 802cbc6:	4619      	mov	r1, r3
 802cbc8:	6878      	ldr	r0, [r7, #4]
 802cbca:	f000 fe8b 	bl	802d8e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 802cbce:	2300      	movs	r3, #0
}
 802cbd0:	4618      	mov	r0, r3
 802cbd2:	3708      	adds	r7, #8
 802cbd4:	46bd      	mov	sp, r7
 802cbd6:	bd80      	pop	{r7, pc}

0802cbd8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 802cbd8:	b580      	push	{r7, lr}
 802cbda:	b086      	sub	sp, #24
 802cbdc:	af02      	add	r7, sp, #8
 802cbde:	6078      	str	r0, [r7, #4]
 802cbe0:	460b      	mov	r3, r1
 802cbe2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 802cbe4:	687b      	ldr	r3, [r7, #4]
 802cbe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802cbea:	78fb      	ldrb	r3, [r7, #3]
 802cbec:	b29b      	uxth	r3, r3
 802cbee:	9300      	str	r3, [sp, #0]
 802cbf0:	4613      	mov	r3, r2
 802cbf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 802cbf6:	2100      	movs	r1, #0
 802cbf8:	6878      	ldr	r0, [r7, #4]
 802cbfa:	f000 f864 	bl	802ccc6 <USBH_GetDescriptor>
 802cbfe:	4603      	mov	r3, r0
 802cc00:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 802cc02:	7bfb      	ldrb	r3, [r7, #15]
 802cc04:	2b00      	cmp	r3, #0
 802cc06:	d10a      	bne.n	802cc1e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 802cc08:	687b      	ldr	r3, [r7, #4]
 802cc0a:	f203 3026 	addw	r0, r3, #806	; 0x326
 802cc0e:	687b      	ldr	r3, [r7, #4]
 802cc10:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802cc14:	78fa      	ldrb	r2, [r7, #3]
 802cc16:	b292      	uxth	r2, r2
 802cc18:	4619      	mov	r1, r3
 802cc1a:	f000 f918 	bl	802ce4e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 802cc20:	4618      	mov	r0, r3
 802cc22:	3710      	adds	r7, #16
 802cc24:	46bd      	mov	sp, r7
 802cc26:	bd80      	pop	{r7, pc}

0802cc28 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 802cc28:	b580      	push	{r7, lr}
 802cc2a:	b086      	sub	sp, #24
 802cc2c:	af02      	add	r7, sp, #8
 802cc2e:	6078      	str	r0, [r7, #4]
 802cc30:	460b      	mov	r3, r1
 802cc32:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 802cc34:	687b      	ldr	r3, [r7, #4]
 802cc36:	331c      	adds	r3, #28
 802cc38:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 802cc3a:	887b      	ldrh	r3, [r7, #2]
 802cc3c:	9300      	str	r3, [sp, #0]
 802cc3e:	68bb      	ldr	r3, [r7, #8]
 802cc40:	f44f 7200 	mov.w	r2, #512	; 0x200
 802cc44:	2100      	movs	r1, #0
 802cc46:	6878      	ldr	r0, [r7, #4]
 802cc48:	f000 f83d 	bl	802ccc6 <USBH_GetDescriptor>
 802cc4c:	4603      	mov	r3, r0
 802cc4e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 802cc50:	7bfb      	ldrb	r3, [r7, #15]
 802cc52:	2b00      	cmp	r3, #0
 802cc54:	d107      	bne.n	802cc66 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 802cc56:	887b      	ldrh	r3, [r7, #2]
 802cc58:	461a      	mov	r2, r3
 802cc5a:	68b9      	ldr	r1, [r7, #8]
 802cc5c:	6878      	ldr	r0, [r7, #4]
 802cc5e:	f000 f987 	bl	802cf70 <USBH_ParseCfgDesc>
 802cc62:	4603      	mov	r3, r0
 802cc64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 802cc66:	7bfb      	ldrb	r3, [r7, #15]
}
 802cc68:	4618      	mov	r0, r3
 802cc6a:	3710      	adds	r7, #16
 802cc6c:	46bd      	mov	sp, r7
 802cc6e:	bd80      	pop	{r7, pc}

0802cc70 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 802cc70:	b580      	push	{r7, lr}
 802cc72:	b088      	sub	sp, #32
 802cc74:	af02      	add	r7, sp, #8
 802cc76:	60f8      	str	r0, [r7, #12]
 802cc78:	607a      	str	r2, [r7, #4]
 802cc7a:	461a      	mov	r2, r3
 802cc7c:	460b      	mov	r3, r1
 802cc7e:	72fb      	strb	r3, [r7, #11]
 802cc80:	4613      	mov	r3, r2
 802cc82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 802cc84:	7afb      	ldrb	r3, [r7, #11]
 802cc86:	b29b      	uxth	r3, r3
 802cc88:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802cc8c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 802cc8e:	68fb      	ldr	r3, [r7, #12]
 802cc90:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 802cc94:	893b      	ldrh	r3, [r7, #8]
 802cc96:	9300      	str	r3, [sp, #0]
 802cc98:	460b      	mov	r3, r1
 802cc9a:	2100      	movs	r1, #0
 802cc9c:	68f8      	ldr	r0, [r7, #12]
 802cc9e:	f000 f812 	bl	802ccc6 <USBH_GetDescriptor>
 802cca2:	4603      	mov	r3, r0
 802cca4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 802cca6:	7dfb      	ldrb	r3, [r7, #23]
 802cca8:	2b00      	cmp	r3, #0
 802ccaa:	d107      	bne.n	802ccbc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 802ccac:	68fb      	ldr	r3, [r7, #12]
 802ccae:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802ccb2:	893a      	ldrh	r2, [r7, #8]
 802ccb4:	6879      	ldr	r1, [r7, #4]
 802ccb6:	4618      	mov	r0, r3
 802ccb8:	f000 fb24 	bl	802d304 <USBH_ParseStringDesc>
  }

  return status;
 802ccbc:	7dfb      	ldrb	r3, [r7, #23]
}
 802ccbe:	4618      	mov	r0, r3
 802ccc0:	3718      	adds	r7, #24
 802ccc2:	46bd      	mov	sp, r7
 802ccc4:	bd80      	pop	{r7, pc}

0802ccc6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 802ccc6:	b580      	push	{r7, lr}
 802ccc8:	b084      	sub	sp, #16
 802ccca:	af00      	add	r7, sp, #0
 802cccc:	60f8      	str	r0, [r7, #12]
 802ccce:	607b      	str	r3, [r7, #4]
 802ccd0:	460b      	mov	r3, r1
 802ccd2:	72fb      	strb	r3, [r7, #11]
 802ccd4:	4613      	mov	r3, r2
 802ccd6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 802ccd8:	68fb      	ldr	r3, [r7, #12]
 802ccda:	789b      	ldrb	r3, [r3, #2]
 802ccdc:	2b01      	cmp	r3, #1
 802ccde:	d11c      	bne.n	802cd1a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802cce0:	7afb      	ldrb	r3, [r7, #11]
 802cce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802cce6:	b2da      	uxtb	r2, r3
 802cce8:	68fb      	ldr	r3, [r7, #12]
 802ccea:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 802ccec:	68fb      	ldr	r3, [r7, #12]
 802ccee:	2206      	movs	r2, #6
 802ccf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802ccf2:	68fb      	ldr	r3, [r7, #12]
 802ccf4:	893a      	ldrh	r2, [r7, #8]
 802ccf6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 802ccf8:	893b      	ldrh	r3, [r7, #8]
 802ccfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802ccfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802cd02:	d104      	bne.n	802cd0e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 802cd04:	68fb      	ldr	r3, [r7, #12]
 802cd06:	f240 4209 	movw	r2, #1033	; 0x409
 802cd0a:	829a      	strh	r2, [r3, #20]
 802cd0c:	e002      	b.n	802cd14 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802cd0e:	68fb      	ldr	r3, [r7, #12]
 802cd10:	2200      	movs	r2, #0
 802cd12:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 802cd14:	68fb      	ldr	r3, [r7, #12]
 802cd16:	8b3a      	ldrh	r2, [r7, #24]
 802cd18:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 802cd1a:	8b3b      	ldrh	r3, [r7, #24]
 802cd1c:	461a      	mov	r2, r3
 802cd1e:	6879      	ldr	r1, [r7, #4]
 802cd20:	68f8      	ldr	r0, [r7, #12]
 802cd22:	f000 fb3d 	bl	802d3a0 <USBH_CtlReq>
 802cd26:	4603      	mov	r3, r0
}
 802cd28:	4618      	mov	r0, r3
 802cd2a:	3710      	adds	r7, #16
 802cd2c:	46bd      	mov	sp, r7
 802cd2e:	bd80      	pop	{r7, pc}

0802cd30 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 802cd30:	b580      	push	{r7, lr}
 802cd32:	b082      	sub	sp, #8
 802cd34:	af00      	add	r7, sp, #0
 802cd36:	6078      	str	r0, [r7, #4]
 802cd38:	460b      	mov	r3, r1
 802cd3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802cd3c:	687b      	ldr	r3, [r7, #4]
 802cd3e:	789b      	ldrb	r3, [r3, #2]
 802cd40:	2b01      	cmp	r3, #1
 802cd42:	d10f      	bne.n	802cd64 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 802cd44:	687b      	ldr	r3, [r7, #4]
 802cd46:	2200      	movs	r2, #0
 802cd48:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 802cd4a:	687b      	ldr	r3, [r7, #4]
 802cd4c:	2205      	movs	r2, #5
 802cd4e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 802cd50:	78fb      	ldrb	r3, [r7, #3]
 802cd52:	b29a      	uxth	r2, r3
 802cd54:	687b      	ldr	r3, [r7, #4]
 802cd56:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802cd58:	687b      	ldr	r3, [r7, #4]
 802cd5a:	2200      	movs	r2, #0
 802cd5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cd5e:	687b      	ldr	r3, [r7, #4]
 802cd60:	2200      	movs	r2, #0
 802cd62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802cd64:	2200      	movs	r2, #0
 802cd66:	2100      	movs	r1, #0
 802cd68:	6878      	ldr	r0, [r7, #4]
 802cd6a:	f000 fb19 	bl	802d3a0 <USBH_CtlReq>
 802cd6e:	4603      	mov	r3, r0
}
 802cd70:	4618      	mov	r0, r3
 802cd72:	3708      	adds	r7, #8
 802cd74:	46bd      	mov	sp, r7
 802cd76:	bd80      	pop	{r7, pc}

0802cd78 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 802cd78:	b580      	push	{r7, lr}
 802cd7a:	b082      	sub	sp, #8
 802cd7c:	af00      	add	r7, sp, #0
 802cd7e:	6078      	str	r0, [r7, #4]
 802cd80:	460b      	mov	r3, r1
 802cd82:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 802cd84:	687b      	ldr	r3, [r7, #4]
 802cd86:	789b      	ldrb	r3, [r3, #2]
 802cd88:	2b01      	cmp	r3, #1
 802cd8a:	d10e      	bne.n	802cdaa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802cd8c:	687b      	ldr	r3, [r7, #4]
 802cd8e:	2200      	movs	r2, #0
 802cd90:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802cd92:	687b      	ldr	r3, [r7, #4]
 802cd94:	2209      	movs	r2, #9
 802cd96:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 802cd98:	687b      	ldr	r3, [r7, #4]
 802cd9a:	887a      	ldrh	r2, [r7, #2]
 802cd9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802cd9e:	687b      	ldr	r3, [r7, #4]
 802cda0:	2200      	movs	r2, #0
 802cda2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cda4:	687b      	ldr	r3, [r7, #4]
 802cda6:	2200      	movs	r2, #0
 802cda8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802cdaa:	2200      	movs	r2, #0
 802cdac:	2100      	movs	r1, #0
 802cdae:	6878      	ldr	r0, [r7, #4]
 802cdb0:	f000 faf6 	bl	802d3a0 <USBH_CtlReq>
 802cdb4:	4603      	mov	r3, r0
}
 802cdb6:	4618      	mov	r0, r3
 802cdb8:	3708      	adds	r7, #8
 802cdba:	46bd      	mov	sp, r7
 802cdbc:	bd80      	pop	{r7, pc}

0802cdbe <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802cdbe:	b580      	push	{r7, lr}
 802cdc0:	b082      	sub	sp, #8
 802cdc2:	af00      	add	r7, sp, #0
 802cdc4:	6078      	str	r0, [r7, #4]
 802cdc6:	460b      	mov	r3, r1
 802cdc8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802cdca:	687b      	ldr	r3, [r7, #4]
 802cdcc:	789b      	ldrb	r3, [r3, #2]
 802cdce:	2b01      	cmp	r3, #1
 802cdd0:	d10f      	bne.n	802cdf2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802cdd2:	687b      	ldr	r3, [r7, #4]
 802cdd4:	2200      	movs	r2, #0
 802cdd6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 802cdd8:	687b      	ldr	r3, [r7, #4]
 802cdda:	2203      	movs	r2, #3
 802cddc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802cdde:	78fb      	ldrb	r3, [r7, #3]
 802cde0:	b29a      	uxth	r2, r3
 802cde2:	687b      	ldr	r3, [r7, #4]
 802cde4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802cde6:	687b      	ldr	r3, [r7, #4]
 802cde8:	2200      	movs	r2, #0
 802cdea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802cdec:	687b      	ldr	r3, [r7, #4]
 802cdee:	2200      	movs	r2, #0
 802cdf0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 802cdf2:	2200      	movs	r2, #0
 802cdf4:	2100      	movs	r1, #0
 802cdf6:	6878      	ldr	r0, [r7, #4]
 802cdf8:	f000 fad2 	bl	802d3a0 <USBH_CtlReq>
 802cdfc:	4603      	mov	r3, r0
}
 802cdfe:	4618      	mov	r0, r3
 802ce00:	3708      	adds	r7, #8
 802ce02:	46bd      	mov	sp, r7
 802ce04:	bd80      	pop	{r7, pc}

0802ce06 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 802ce06:	b580      	push	{r7, lr}
 802ce08:	b082      	sub	sp, #8
 802ce0a:	af00      	add	r7, sp, #0
 802ce0c:	6078      	str	r0, [r7, #4]
 802ce0e:	460b      	mov	r3, r1
 802ce10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802ce12:	687b      	ldr	r3, [r7, #4]
 802ce14:	789b      	ldrb	r3, [r3, #2]
 802ce16:	2b01      	cmp	r3, #1
 802ce18:	d10f      	bne.n	802ce3a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 802ce1a:	687b      	ldr	r3, [r7, #4]
 802ce1c:	2202      	movs	r2, #2
 802ce1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802ce20:	687b      	ldr	r3, [r7, #4]
 802ce22:	2201      	movs	r2, #1
 802ce24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 802ce26:	687b      	ldr	r3, [r7, #4]
 802ce28:	2200      	movs	r2, #0
 802ce2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 802ce2c:	78fb      	ldrb	r3, [r7, #3]
 802ce2e:	b29a      	uxth	r2, r3
 802ce30:	687b      	ldr	r3, [r7, #4]
 802ce32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 802ce34:	687b      	ldr	r3, [r7, #4]
 802ce36:	2200      	movs	r2, #0
 802ce38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 802ce3a:	2200      	movs	r2, #0
 802ce3c:	2100      	movs	r1, #0
 802ce3e:	6878      	ldr	r0, [r7, #4]
 802ce40:	f000 faae 	bl	802d3a0 <USBH_CtlReq>
 802ce44:	4603      	mov	r3, r0
}
 802ce46:	4618      	mov	r0, r3
 802ce48:	3708      	adds	r7, #8
 802ce4a:	46bd      	mov	sp, r7
 802ce4c:	bd80      	pop	{r7, pc}

0802ce4e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 802ce4e:	b480      	push	{r7}
 802ce50:	b085      	sub	sp, #20
 802ce52:	af00      	add	r7, sp, #0
 802ce54:	60f8      	str	r0, [r7, #12]
 802ce56:	60b9      	str	r1, [r7, #8]
 802ce58:	4613      	mov	r3, r2
 802ce5a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 802ce5c:	68bb      	ldr	r3, [r7, #8]
 802ce5e:	781a      	ldrb	r2, [r3, #0]
 802ce60:	68fb      	ldr	r3, [r7, #12]
 802ce62:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 802ce64:	68bb      	ldr	r3, [r7, #8]
 802ce66:	785a      	ldrb	r2, [r3, #1]
 802ce68:	68fb      	ldr	r3, [r7, #12]
 802ce6a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 802ce6c:	68bb      	ldr	r3, [r7, #8]
 802ce6e:	3302      	adds	r3, #2
 802ce70:	781b      	ldrb	r3, [r3, #0]
 802ce72:	b29a      	uxth	r2, r3
 802ce74:	68bb      	ldr	r3, [r7, #8]
 802ce76:	3303      	adds	r3, #3
 802ce78:	781b      	ldrb	r3, [r3, #0]
 802ce7a:	b29b      	uxth	r3, r3
 802ce7c:	021b      	lsls	r3, r3, #8
 802ce7e:	b29b      	uxth	r3, r3
 802ce80:	4313      	orrs	r3, r2
 802ce82:	b29a      	uxth	r2, r3
 802ce84:	68fb      	ldr	r3, [r7, #12]
 802ce86:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 802ce88:	68bb      	ldr	r3, [r7, #8]
 802ce8a:	791a      	ldrb	r2, [r3, #4]
 802ce8c:	68fb      	ldr	r3, [r7, #12]
 802ce8e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802ce90:	68bb      	ldr	r3, [r7, #8]
 802ce92:	795a      	ldrb	r2, [r3, #5]
 802ce94:	68fb      	ldr	r3, [r7, #12]
 802ce96:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 802ce98:	68bb      	ldr	r3, [r7, #8]
 802ce9a:	799a      	ldrb	r2, [r3, #6]
 802ce9c:	68fb      	ldr	r3, [r7, #12]
 802ce9e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802cea0:	68bb      	ldr	r3, [r7, #8]
 802cea2:	79da      	ldrb	r2, [r3, #7]
 802cea4:	68fb      	ldr	r3, [r7, #12]
 802cea6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 802cea8:	68fb      	ldr	r3, [r7, #12]
 802ceaa:	79db      	ldrb	r3, [r3, #7]
 802ceac:	2b20      	cmp	r3, #32
 802ceae:	dc11      	bgt.n	802ced4 <USBH_ParseDevDesc+0x86>
 802ceb0:	2b08      	cmp	r3, #8
 802ceb2:	db16      	blt.n	802cee2 <USBH_ParseDevDesc+0x94>
 802ceb4:	3b08      	subs	r3, #8
 802ceb6:	2201      	movs	r2, #1
 802ceb8:	fa02 f303 	lsl.w	r3, r2, r3
 802cebc:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 802cec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802cec4:	2b00      	cmp	r3, #0
 802cec6:	bf14      	ite	ne
 802cec8:	2301      	movne	r3, #1
 802ceca:	2300      	moveq	r3, #0
 802cecc:	b2db      	uxtb	r3, r3
 802cece:	2b00      	cmp	r3, #0
 802ced0:	d102      	bne.n	802ced8 <USBH_ParseDevDesc+0x8a>
 802ced2:	e006      	b.n	802cee2 <USBH_ParseDevDesc+0x94>
 802ced4:	2b40      	cmp	r3, #64	; 0x40
 802ced6:	d104      	bne.n	802cee2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 802ced8:	68fb      	ldr	r3, [r7, #12]
 802ceda:	79da      	ldrb	r2, [r3, #7]
 802cedc:	68fb      	ldr	r3, [r7, #12]
 802cede:	71da      	strb	r2, [r3, #7]
      break;
 802cee0:	e003      	b.n	802ceea <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 802cee2:	68fb      	ldr	r3, [r7, #12]
 802cee4:	2240      	movs	r2, #64	; 0x40
 802cee6:	71da      	strb	r2, [r3, #7]
      break;
 802cee8:	bf00      	nop
  }

  if (length > 8U)
 802ceea:	88fb      	ldrh	r3, [r7, #6]
 802ceec:	2b08      	cmp	r3, #8
 802ceee:	d939      	bls.n	802cf64 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802cef0:	68bb      	ldr	r3, [r7, #8]
 802cef2:	3308      	adds	r3, #8
 802cef4:	781b      	ldrb	r3, [r3, #0]
 802cef6:	b29a      	uxth	r2, r3
 802cef8:	68bb      	ldr	r3, [r7, #8]
 802cefa:	3309      	adds	r3, #9
 802cefc:	781b      	ldrb	r3, [r3, #0]
 802cefe:	b29b      	uxth	r3, r3
 802cf00:	021b      	lsls	r3, r3, #8
 802cf02:	b29b      	uxth	r3, r3
 802cf04:	4313      	orrs	r3, r2
 802cf06:	b29a      	uxth	r2, r3
 802cf08:	68fb      	ldr	r3, [r7, #12]
 802cf0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 802cf0c:	68bb      	ldr	r3, [r7, #8]
 802cf0e:	330a      	adds	r3, #10
 802cf10:	781b      	ldrb	r3, [r3, #0]
 802cf12:	b29a      	uxth	r2, r3
 802cf14:	68bb      	ldr	r3, [r7, #8]
 802cf16:	330b      	adds	r3, #11
 802cf18:	781b      	ldrb	r3, [r3, #0]
 802cf1a:	b29b      	uxth	r3, r3
 802cf1c:	021b      	lsls	r3, r3, #8
 802cf1e:	b29b      	uxth	r3, r3
 802cf20:	4313      	orrs	r3, r2
 802cf22:	b29a      	uxth	r2, r3
 802cf24:	68fb      	ldr	r3, [r7, #12]
 802cf26:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 802cf28:	68bb      	ldr	r3, [r7, #8]
 802cf2a:	330c      	adds	r3, #12
 802cf2c:	781b      	ldrb	r3, [r3, #0]
 802cf2e:	b29a      	uxth	r2, r3
 802cf30:	68bb      	ldr	r3, [r7, #8]
 802cf32:	330d      	adds	r3, #13
 802cf34:	781b      	ldrb	r3, [r3, #0]
 802cf36:	b29b      	uxth	r3, r3
 802cf38:	021b      	lsls	r3, r3, #8
 802cf3a:	b29b      	uxth	r3, r3
 802cf3c:	4313      	orrs	r3, r2
 802cf3e:	b29a      	uxth	r2, r3
 802cf40:	68fb      	ldr	r3, [r7, #12]
 802cf42:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802cf44:	68bb      	ldr	r3, [r7, #8]
 802cf46:	7b9a      	ldrb	r2, [r3, #14]
 802cf48:	68fb      	ldr	r3, [r7, #12]
 802cf4a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 802cf4c:	68bb      	ldr	r3, [r7, #8]
 802cf4e:	7bda      	ldrb	r2, [r3, #15]
 802cf50:	68fb      	ldr	r3, [r7, #12]
 802cf52:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802cf54:	68bb      	ldr	r3, [r7, #8]
 802cf56:	7c1a      	ldrb	r2, [r3, #16]
 802cf58:	68fb      	ldr	r3, [r7, #12]
 802cf5a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 802cf5c:	68bb      	ldr	r3, [r7, #8]
 802cf5e:	7c5a      	ldrb	r2, [r3, #17]
 802cf60:	68fb      	ldr	r3, [r7, #12]
 802cf62:	745a      	strb	r2, [r3, #17]
  }
}
 802cf64:	bf00      	nop
 802cf66:	3714      	adds	r7, #20
 802cf68:	46bd      	mov	sp, r7
 802cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802cf6e:	4770      	bx	lr

0802cf70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 802cf70:	b580      	push	{r7, lr}
 802cf72:	b08c      	sub	sp, #48	; 0x30
 802cf74:	af00      	add	r7, sp, #0
 802cf76:	60f8      	str	r0, [r7, #12]
 802cf78:	60b9      	str	r1, [r7, #8]
 802cf7a:	4613      	mov	r3, r2
 802cf7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 802cf7e:	68fb      	ldr	r3, [r7, #12]
 802cf80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 802cf84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 802cf86:	2300      	movs	r3, #0
 802cf88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 802cf8c:	68bb      	ldr	r3, [r7, #8]
 802cf8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 802cf90:	2300      	movs	r3, #0
 802cf92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 802cf96:	2300      	movs	r3, #0
 802cf98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 802cf9c:	68bb      	ldr	r3, [r7, #8]
 802cf9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 802cfa0:	68bb      	ldr	r3, [r7, #8]
 802cfa2:	781a      	ldrb	r2, [r3, #0]
 802cfa4:	6a3b      	ldr	r3, [r7, #32]
 802cfa6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 802cfa8:	68bb      	ldr	r3, [r7, #8]
 802cfaa:	785a      	ldrb	r2, [r3, #1]
 802cfac:	6a3b      	ldr	r3, [r7, #32]
 802cfae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 802cfb0:	68bb      	ldr	r3, [r7, #8]
 802cfb2:	3302      	adds	r3, #2
 802cfb4:	781b      	ldrb	r3, [r3, #0]
 802cfb6:	b29a      	uxth	r2, r3
 802cfb8:	68bb      	ldr	r3, [r7, #8]
 802cfba:	3303      	adds	r3, #3
 802cfbc:	781b      	ldrb	r3, [r3, #0]
 802cfbe:	b29b      	uxth	r3, r3
 802cfc0:	021b      	lsls	r3, r3, #8
 802cfc2:	b29b      	uxth	r3, r3
 802cfc4:	4313      	orrs	r3, r2
 802cfc6:	b29b      	uxth	r3, r3
 802cfc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802cfcc:	bf28      	it	cs
 802cfce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 802cfd2:	b29a      	uxth	r2, r3
 802cfd4:	6a3b      	ldr	r3, [r7, #32]
 802cfd6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 802cfd8:	68bb      	ldr	r3, [r7, #8]
 802cfda:	791a      	ldrb	r2, [r3, #4]
 802cfdc:	6a3b      	ldr	r3, [r7, #32]
 802cfde:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 802cfe0:	68bb      	ldr	r3, [r7, #8]
 802cfe2:	795a      	ldrb	r2, [r3, #5]
 802cfe4:	6a3b      	ldr	r3, [r7, #32]
 802cfe6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 802cfe8:	68bb      	ldr	r3, [r7, #8]
 802cfea:	799a      	ldrb	r2, [r3, #6]
 802cfec:	6a3b      	ldr	r3, [r7, #32]
 802cfee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 802cff0:	68bb      	ldr	r3, [r7, #8]
 802cff2:	79da      	ldrb	r2, [r3, #7]
 802cff4:	6a3b      	ldr	r3, [r7, #32]
 802cff6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 802cff8:	68bb      	ldr	r3, [r7, #8]
 802cffa:	7a1a      	ldrb	r2, [r3, #8]
 802cffc:	6a3b      	ldr	r3, [r7, #32]
 802cffe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 802d000:	6a3b      	ldr	r3, [r7, #32]
 802d002:	781b      	ldrb	r3, [r3, #0]
 802d004:	2b09      	cmp	r3, #9
 802d006:	d002      	beq.n	802d00e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 802d008:	6a3b      	ldr	r3, [r7, #32]
 802d00a:	2209      	movs	r2, #9
 802d00c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 802d00e:	88fb      	ldrh	r3, [r7, #6]
 802d010:	2b09      	cmp	r3, #9
 802d012:	f240 809d 	bls.w	802d150 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 802d016:	2309      	movs	r3, #9
 802d018:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 802d01a:	2300      	movs	r3, #0
 802d01c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d01e:	e081      	b.n	802d124 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d020:	f107 0316 	add.w	r3, r7, #22
 802d024:	4619      	mov	r1, r3
 802d026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d028:	f000 f99f 	bl	802d36a <USBH_GetNextDesc>
 802d02c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 802d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d030:	785b      	ldrb	r3, [r3, #1]
 802d032:	2b04      	cmp	r3, #4
 802d034:	d176      	bne.n	802d124 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 802d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d038:	781b      	ldrb	r3, [r3, #0]
 802d03a:	2b09      	cmp	r3, #9
 802d03c:	d002      	beq.n	802d044 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 802d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d040:	2209      	movs	r2, #9
 802d042:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 802d044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d048:	221a      	movs	r2, #26
 802d04a:	fb02 f303 	mul.w	r3, r2, r3
 802d04e:	3308      	adds	r3, #8
 802d050:	6a3a      	ldr	r2, [r7, #32]
 802d052:	4413      	add	r3, r2
 802d054:	3302      	adds	r3, #2
 802d056:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802d058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802d05a:	69f8      	ldr	r0, [r7, #28]
 802d05c:	f000 f87e 	bl	802d15c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 802d060:	2300      	movs	r3, #0
 802d062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 802d066:	2300      	movs	r3, #0
 802d068:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d06a:	e043      	b.n	802d0f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802d06c:	f107 0316 	add.w	r3, r7, #22
 802d070:	4619      	mov	r1, r3
 802d072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802d074:	f000 f979 	bl	802d36a <USBH_GetNextDesc>
 802d078:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 802d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d07c:	785b      	ldrb	r3, [r3, #1]
 802d07e:	2b05      	cmp	r3, #5
 802d080:	d138      	bne.n	802d0f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 802d082:	69fb      	ldr	r3, [r7, #28]
 802d084:	795b      	ldrb	r3, [r3, #5]
 802d086:	2b01      	cmp	r3, #1
 802d088:	d10f      	bne.n	802d0aa <USBH_ParseCfgDesc+0x13a>
 802d08a:	69fb      	ldr	r3, [r7, #28]
 802d08c:	799b      	ldrb	r3, [r3, #6]
 802d08e:	2b02      	cmp	r3, #2
 802d090:	d10b      	bne.n	802d0aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d092:	69fb      	ldr	r3, [r7, #28]
 802d094:	79db      	ldrb	r3, [r3, #7]
 802d096:	2b00      	cmp	r3, #0
 802d098:	d10f      	bne.n	802d0ba <USBH_ParseCfgDesc+0x14a>
 802d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d09c:	781b      	ldrb	r3, [r3, #0]
 802d09e:	2b09      	cmp	r3, #9
 802d0a0:	d00b      	beq.n	802d0ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 802d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0a4:	2209      	movs	r2, #9
 802d0a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d0a8:	e007      	b.n	802d0ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 802d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0ac:	781b      	ldrb	r3, [r3, #0]
 802d0ae:	2b07      	cmp	r3, #7
 802d0b0:	d004      	beq.n	802d0bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 802d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802d0b4:	2207      	movs	r2, #7
 802d0b6:	701a      	strb	r2, [r3, #0]
 802d0b8:	e000      	b.n	802d0bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 802d0ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 802d0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d0c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d0c4:	3201      	adds	r2, #1
 802d0c6:	00d2      	lsls	r2, r2, #3
 802d0c8:	211a      	movs	r1, #26
 802d0ca:	fb01 f303 	mul.w	r3, r1, r3
 802d0ce:	4413      	add	r3, r2
 802d0d0:	3308      	adds	r3, #8
 802d0d2:	6a3a      	ldr	r2, [r7, #32]
 802d0d4:	4413      	add	r3, r2
 802d0d6:	3304      	adds	r3, #4
 802d0d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 802d0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802d0dc:	69b9      	ldr	r1, [r7, #24]
 802d0de:	68f8      	ldr	r0, [r7, #12]
 802d0e0:	f000 f86b 	bl	802d1ba <USBH_ParseEPDesc>
 802d0e4:	4603      	mov	r3, r0
 802d0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 802d0ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802d0ee:	3301      	adds	r3, #1
 802d0f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802d0f4:	69fb      	ldr	r3, [r7, #28]
 802d0f6:	791b      	ldrb	r3, [r3, #4]
 802d0f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d0fc:	429a      	cmp	r2, r3
 802d0fe:	d204      	bcs.n	802d10a <USBH_ParseCfgDesc+0x19a>
 802d100:	6a3b      	ldr	r3, [r7, #32]
 802d102:	885a      	ldrh	r2, [r3, #2]
 802d104:	8afb      	ldrh	r3, [r7, #22]
 802d106:	429a      	cmp	r2, r3
 802d108:	d8b0      	bhi.n	802d06c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 802d10a:	69fb      	ldr	r3, [r7, #28]
 802d10c:	791b      	ldrb	r3, [r3, #4]
 802d10e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802d112:	429a      	cmp	r2, r3
 802d114:	d201      	bcs.n	802d11a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 802d116:	2303      	movs	r3, #3
 802d118:	e01c      	b.n	802d154 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 802d11a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d11e:	3301      	adds	r3, #1
 802d120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802d124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802d128:	2b01      	cmp	r3, #1
 802d12a:	d805      	bhi.n	802d138 <USBH_ParseCfgDesc+0x1c8>
 802d12c:	6a3b      	ldr	r3, [r7, #32]
 802d12e:	885a      	ldrh	r2, [r3, #2]
 802d130:	8afb      	ldrh	r3, [r7, #22]
 802d132:	429a      	cmp	r2, r3
 802d134:	f63f af74 	bhi.w	802d020 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 802d138:	6a3b      	ldr	r3, [r7, #32]
 802d13a:	791b      	ldrb	r3, [r3, #4]
 802d13c:	2b02      	cmp	r3, #2
 802d13e:	bf28      	it	cs
 802d140:	2302      	movcs	r3, #2
 802d142:	b2db      	uxtb	r3, r3
 802d144:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802d148:	429a      	cmp	r2, r3
 802d14a:	d201      	bcs.n	802d150 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 802d14c:	2303      	movs	r3, #3
 802d14e:	e001      	b.n	802d154 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 802d150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802d154:	4618      	mov	r0, r3
 802d156:	3730      	adds	r7, #48	; 0x30
 802d158:	46bd      	mov	sp, r7
 802d15a:	bd80      	pop	{r7, pc}

0802d15c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 802d15c:	b480      	push	{r7}
 802d15e:	b083      	sub	sp, #12
 802d160:	af00      	add	r7, sp, #0
 802d162:	6078      	str	r0, [r7, #4]
 802d164:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 802d166:	683b      	ldr	r3, [r7, #0]
 802d168:	781a      	ldrb	r2, [r3, #0]
 802d16a:	687b      	ldr	r3, [r7, #4]
 802d16c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 802d16e:	683b      	ldr	r3, [r7, #0]
 802d170:	785a      	ldrb	r2, [r3, #1]
 802d172:	687b      	ldr	r3, [r7, #4]
 802d174:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 802d176:	683b      	ldr	r3, [r7, #0]
 802d178:	789a      	ldrb	r2, [r3, #2]
 802d17a:	687b      	ldr	r3, [r7, #4]
 802d17c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 802d17e:	683b      	ldr	r3, [r7, #0]
 802d180:	78da      	ldrb	r2, [r3, #3]
 802d182:	687b      	ldr	r3, [r7, #4]
 802d184:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 802d186:	683b      	ldr	r3, [r7, #0]
 802d188:	791a      	ldrb	r2, [r3, #4]
 802d18a:	687b      	ldr	r3, [r7, #4]
 802d18c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 802d18e:	683b      	ldr	r3, [r7, #0]
 802d190:	795a      	ldrb	r2, [r3, #5]
 802d192:	687b      	ldr	r3, [r7, #4]
 802d194:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 802d196:	683b      	ldr	r3, [r7, #0]
 802d198:	799a      	ldrb	r2, [r3, #6]
 802d19a:	687b      	ldr	r3, [r7, #4]
 802d19c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 802d19e:	683b      	ldr	r3, [r7, #0]
 802d1a0:	79da      	ldrb	r2, [r3, #7]
 802d1a2:	687b      	ldr	r3, [r7, #4]
 802d1a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 802d1a6:	683b      	ldr	r3, [r7, #0]
 802d1a8:	7a1a      	ldrb	r2, [r3, #8]
 802d1aa:	687b      	ldr	r3, [r7, #4]
 802d1ac:	721a      	strb	r2, [r3, #8]
}
 802d1ae:	bf00      	nop
 802d1b0:	370c      	adds	r7, #12
 802d1b2:	46bd      	mov	sp, r7
 802d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d1b8:	4770      	bx	lr

0802d1ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 802d1ba:	b480      	push	{r7}
 802d1bc:	b087      	sub	sp, #28
 802d1be:	af00      	add	r7, sp, #0
 802d1c0:	60f8      	str	r0, [r7, #12]
 802d1c2:	60b9      	str	r1, [r7, #8]
 802d1c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 802d1c6:	2300      	movs	r3, #0
 802d1c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 802d1ca:	687b      	ldr	r3, [r7, #4]
 802d1cc:	781a      	ldrb	r2, [r3, #0]
 802d1ce:	68bb      	ldr	r3, [r7, #8]
 802d1d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802d1d2:	687b      	ldr	r3, [r7, #4]
 802d1d4:	785a      	ldrb	r2, [r3, #1]
 802d1d6:	68bb      	ldr	r3, [r7, #8]
 802d1d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 802d1da:	687b      	ldr	r3, [r7, #4]
 802d1dc:	789a      	ldrb	r2, [r3, #2]
 802d1de:	68bb      	ldr	r3, [r7, #8]
 802d1e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802d1e2:	687b      	ldr	r3, [r7, #4]
 802d1e4:	78da      	ldrb	r2, [r3, #3]
 802d1e6:	68bb      	ldr	r3, [r7, #8]
 802d1e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 802d1ea:	687b      	ldr	r3, [r7, #4]
 802d1ec:	3304      	adds	r3, #4
 802d1ee:	781b      	ldrb	r3, [r3, #0]
 802d1f0:	b29a      	uxth	r2, r3
 802d1f2:	687b      	ldr	r3, [r7, #4]
 802d1f4:	3305      	adds	r3, #5
 802d1f6:	781b      	ldrb	r3, [r3, #0]
 802d1f8:	b29b      	uxth	r3, r3
 802d1fa:	021b      	lsls	r3, r3, #8
 802d1fc:	b29b      	uxth	r3, r3
 802d1fe:	4313      	orrs	r3, r2
 802d200:	b29a      	uxth	r2, r3
 802d202:	68bb      	ldr	r3, [r7, #8]
 802d204:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 802d206:	687b      	ldr	r3, [r7, #4]
 802d208:	799a      	ldrb	r2, [r3, #6]
 802d20a:	68bb      	ldr	r3, [r7, #8]
 802d20c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 802d20e:	68bb      	ldr	r3, [r7, #8]
 802d210:	889b      	ldrh	r3, [r3, #4]
 802d212:	2b00      	cmp	r3, #0
 802d214:	d102      	bne.n	802d21c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 802d216:	2303      	movs	r3, #3
 802d218:	75fb      	strb	r3, [r7, #23]
 802d21a:	e033      	b.n	802d284 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 802d21c:	68bb      	ldr	r3, [r7, #8]
 802d21e:	889b      	ldrh	r3, [r3, #4]
 802d220:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802d224:	f023 0307 	bic.w	r3, r3, #7
 802d228:	b29a      	uxth	r2, r3
 802d22a:	68bb      	ldr	r3, [r7, #8]
 802d22c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 802d22e:	68bb      	ldr	r3, [r7, #8]
 802d230:	889b      	ldrh	r3, [r3, #4]
 802d232:	b21a      	sxth	r2, r3
 802d234:	687b      	ldr	r3, [r7, #4]
 802d236:	3304      	adds	r3, #4
 802d238:	781b      	ldrb	r3, [r3, #0]
 802d23a:	b299      	uxth	r1, r3
 802d23c:	687b      	ldr	r3, [r7, #4]
 802d23e:	3305      	adds	r3, #5
 802d240:	781b      	ldrb	r3, [r3, #0]
 802d242:	b29b      	uxth	r3, r3
 802d244:	021b      	lsls	r3, r3, #8
 802d246:	b29b      	uxth	r3, r3
 802d248:	430b      	orrs	r3, r1
 802d24a:	b29b      	uxth	r3, r3
 802d24c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d250:	2b00      	cmp	r3, #0
 802d252:	d110      	bne.n	802d276 <USBH_ParseEPDesc+0xbc>
 802d254:	687b      	ldr	r3, [r7, #4]
 802d256:	3304      	adds	r3, #4
 802d258:	781b      	ldrb	r3, [r3, #0]
 802d25a:	b299      	uxth	r1, r3
 802d25c:	687b      	ldr	r3, [r7, #4]
 802d25e:	3305      	adds	r3, #5
 802d260:	781b      	ldrb	r3, [r3, #0]
 802d262:	b29b      	uxth	r3, r3
 802d264:	021b      	lsls	r3, r3, #8
 802d266:	b29b      	uxth	r3, r3
 802d268:	430b      	orrs	r3, r1
 802d26a:	b29b      	uxth	r3, r3
 802d26c:	b21b      	sxth	r3, r3
 802d26e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802d272:	b21b      	sxth	r3, r3
 802d274:	e001      	b.n	802d27a <USBH_ParseEPDesc+0xc0>
 802d276:	f44f 7300 	mov.w	r3, #512	; 0x200
 802d27a:	4313      	orrs	r3, r2
 802d27c:	b21b      	sxth	r3, r3
 802d27e:	b29a      	uxth	r2, r3
 802d280:	68bb      	ldr	r3, [r7, #8]
 802d282:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 802d284:	68fb      	ldr	r3, [r7, #12]
 802d286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d28a:	2b00      	cmp	r3, #0
 802d28c:	d116      	bne.n	802d2bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d28e:	68bb      	ldr	r3, [r7, #8]
 802d290:	78db      	ldrb	r3, [r3, #3]
 802d292:	f003 0303 	and.w	r3, r3, #3
 802d296:	2b01      	cmp	r3, #1
 802d298:	d005      	beq.n	802d2a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 802d29a:	68bb      	ldr	r3, [r7, #8]
 802d29c:	78db      	ldrb	r3, [r3, #3]
 802d29e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 802d2a2:	2b03      	cmp	r3, #3
 802d2a4:	d127      	bne.n	802d2f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d2a6:	68bb      	ldr	r3, [r7, #8]
 802d2a8:	799b      	ldrb	r3, [r3, #6]
 802d2aa:	2b00      	cmp	r3, #0
 802d2ac:	d003      	beq.n	802d2b6 <USBH_ParseEPDesc+0xfc>
 802d2ae:	68bb      	ldr	r3, [r7, #8]
 802d2b0:	799b      	ldrb	r3, [r3, #6]
 802d2b2:	2b10      	cmp	r3, #16
 802d2b4:	d91f      	bls.n	802d2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d2b6:	2303      	movs	r3, #3
 802d2b8:	75fb      	strb	r3, [r7, #23]
 802d2ba:	e01c      	b.n	802d2f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 802d2bc:	68bb      	ldr	r3, [r7, #8]
 802d2be:	78db      	ldrb	r3, [r3, #3]
 802d2c0:	f003 0303 	and.w	r3, r3, #3
 802d2c4:	2b01      	cmp	r3, #1
 802d2c6:	d10a      	bne.n	802d2de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 802d2c8:	68bb      	ldr	r3, [r7, #8]
 802d2ca:	799b      	ldrb	r3, [r3, #6]
 802d2cc:	2b00      	cmp	r3, #0
 802d2ce:	d003      	beq.n	802d2d8 <USBH_ParseEPDesc+0x11e>
 802d2d0:	68bb      	ldr	r3, [r7, #8]
 802d2d2:	799b      	ldrb	r3, [r3, #6]
 802d2d4:	2b10      	cmp	r3, #16
 802d2d6:	d90e      	bls.n	802d2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d2d8:	2303      	movs	r3, #3
 802d2da:	75fb      	strb	r3, [r7, #23]
 802d2dc:	e00b      	b.n	802d2f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 802d2de:	68bb      	ldr	r3, [r7, #8]
 802d2e0:	78db      	ldrb	r3, [r3, #3]
 802d2e2:	f003 0303 	and.w	r3, r3, #3
 802d2e6:	2b03      	cmp	r3, #3
 802d2e8:	d105      	bne.n	802d2f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 802d2ea:	68bb      	ldr	r3, [r7, #8]
 802d2ec:	799b      	ldrb	r3, [r3, #6]
 802d2ee:	2b00      	cmp	r3, #0
 802d2f0:	d101      	bne.n	802d2f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 802d2f2:	2303      	movs	r3, #3
 802d2f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 802d2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 802d2f8:	4618      	mov	r0, r3
 802d2fa:	371c      	adds	r7, #28
 802d2fc:	46bd      	mov	sp, r7
 802d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d302:	4770      	bx	lr

0802d304 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 802d304:	b480      	push	{r7}
 802d306:	b087      	sub	sp, #28
 802d308:	af00      	add	r7, sp, #0
 802d30a:	60f8      	str	r0, [r7, #12]
 802d30c:	60b9      	str	r1, [r7, #8]
 802d30e:	4613      	mov	r3, r2
 802d310:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 802d312:	68fb      	ldr	r3, [r7, #12]
 802d314:	3301      	adds	r3, #1
 802d316:	781b      	ldrb	r3, [r3, #0]
 802d318:	2b03      	cmp	r3, #3
 802d31a:	d120      	bne.n	802d35e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 802d31c:	68fb      	ldr	r3, [r7, #12]
 802d31e:	781b      	ldrb	r3, [r3, #0]
 802d320:	1e9a      	subs	r2, r3, #2
 802d322:	88fb      	ldrh	r3, [r7, #6]
 802d324:	4293      	cmp	r3, r2
 802d326:	bf28      	it	cs
 802d328:	4613      	movcs	r3, r2
 802d32a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 802d32c:	68fb      	ldr	r3, [r7, #12]
 802d32e:	3302      	adds	r3, #2
 802d330:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 802d332:	2300      	movs	r3, #0
 802d334:	82fb      	strh	r3, [r7, #22]
 802d336:	e00b      	b.n	802d350 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 802d338:	8afb      	ldrh	r3, [r7, #22]
 802d33a:	68fa      	ldr	r2, [r7, #12]
 802d33c:	4413      	add	r3, r2
 802d33e:	781a      	ldrb	r2, [r3, #0]
 802d340:	68bb      	ldr	r3, [r7, #8]
 802d342:	701a      	strb	r2, [r3, #0]
      pdest++;
 802d344:	68bb      	ldr	r3, [r7, #8]
 802d346:	3301      	adds	r3, #1
 802d348:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 802d34a:	8afb      	ldrh	r3, [r7, #22]
 802d34c:	3302      	adds	r3, #2
 802d34e:	82fb      	strh	r3, [r7, #22]
 802d350:	8afa      	ldrh	r2, [r7, #22]
 802d352:	8abb      	ldrh	r3, [r7, #20]
 802d354:	429a      	cmp	r2, r3
 802d356:	d3ef      	bcc.n	802d338 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 802d358:	68bb      	ldr	r3, [r7, #8]
 802d35a:	2200      	movs	r2, #0
 802d35c:	701a      	strb	r2, [r3, #0]
  }
}
 802d35e:	bf00      	nop
 802d360:	371c      	adds	r7, #28
 802d362:	46bd      	mov	sp, r7
 802d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d368:	4770      	bx	lr

0802d36a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802d36a:	b480      	push	{r7}
 802d36c:	b085      	sub	sp, #20
 802d36e:	af00      	add	r7, sp, #0
 802d370:	6078      	str	r0, [r7, #4]
 802d372:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 802d374:	683b      	ldr	r3, [r7, #0]
 802d376:	881a      	ldrh	r2, [r3, #0]
 802d378:	687b      	ldr	r3, [r7, #4]
 802d37a:	781b      	ldrb	r3, [r3, #0]
 802d37c:	b29b      	uxth	r3, r3
 802d37e:	4413      	add	r3, r2
 802d380:	b29a      	uxth	r2, r3
 802d382:	683b      	ldr	r3, [r7, #0]
 802d384:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 802d386:	687b      	ldr	r3, [r7, #4]
 802d388:	781b      	ldrb	r3, [r3, #0]
 802d38a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802d38c:	687b      	ldr	r3, [r7, #4]
 802d38e:	4413      	add	r3, r2
 802d390:	60fb      	str	r3, [r7, #12]

  return (pnext);
 802d392:	68fb      	ldr	r3, [r7, #12]
}
 802d394:	4618      	mov	r0, r3
 802d396:	3714      	adds	r7, #20
 802d398:	46bd      	mov	sp, r7
 802d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d39e:	4770      	bx	lr

0802d3a0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 802d3a0:	b580      	push	{r7, lr}
 802d3a2:	b086      	sub	sp, #24
 802d3a4:	af00      	add	r7, sp, #0
 802d3a6:	60f8      	str	r0, [r7, #12]
 802d3a8:	60b9      	str	r1, [r7, #8]
 802d3aa:	4613      	mov	r3, r2
 802d3ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 802d3ae:	2301      	movs	r3, #1
 802d3b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 802d3b2:	68fb      	ldr	r3, [r7, #12]
 802d3b4:	789b      	ldrb	r3, [r3, #2]
 802d3b6:	2b01      	cmp	r3, #1
 802d3b8:	d002      	beq.n	802d3c0 <USBH_CtlReq+0x20>
 802d3ba:	2b02      	cmp	r3, #2
 802d3bc:	d00f      	beq.n	802d3de <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 802d3be:	e027      	b.n	802d410 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 802d3c0:	68fb      	ldr	r3, [r7, #12]
 802d3c2:	68ba      	ldr	r2, [r7, #8]
 802d3c4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 802d3c6:	68fb      	ldr	r3, [r7, #12]
 802d3c8:	88fa      	ldrh	r2, [r7, #6]
 802d3ca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802d3cc:	68fb      	ldr	r3, [r7, #12]
 802d3ce:	2201      	movs	r2, #1
 802d3d0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 802d3d2:	68fb      	ldr	r3, [r7, #12]
 802d3d4:	2202      	movs	r2, #2
 802d3d6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802d3d8:	2301      	movs	r3, #1
 802d3da:	75fb      	strb	r3, [r7, #23]
      break;
 802d3dc:	e018      	b.n	802d410 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 802d3de:	68f8      	ldr	r0, [r7, #12]
 802d3e0:	f000 f81c 	bl	802d41c <USBH_HandleControl>
 802d3e4:	4603      	mov	r3, r0
 802d3e6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 802d3e8:	7dfb      	ldrb	r3, [r7, #23]
 802d3ea:	2b00      	cmp	r3, #0
 802d3ec:	d002      	beq.n	802d3f4 <USBH_CtlReq+0x54>
 802d3ee:	7dfb      	ldrb	r3, [r7, #23]
 802d3f0:	2b03      	cmp	r3, #3
 802d3f2:	d106      	bne.n	802d402 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 802d3f4:	68fb      	ldr	r3, [r7, #12]
 802d3f6:	2201      	movs	r2, #1
 802d3f8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 802d3fa:	68fb      	ldr	r3, [r7, #12]
 802d3fc:	2200      	movs	r2, #0
 802d3fe:	761a      	strb	r2, [r3, #24]
      break;
 802d400:	e005      	b.n	802d40e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 802d402:	7dfb      	ldrb	r3, [r7, #23]
 802d404:	2b02      	cmp	r3, #2
 802d406:	d102      	bne.n	802d40e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 802d408:	68fb      	ldr	r3, [r7, #12]
 802d40a:	2201      	movs	r2, #1
 802d40c:	709a      	strb	r2, [r3, #2]
      break;
 802d40e:	bf00      	nop
  }
  return status;
 802d410:	7dfb      	ldrb	r3, [r7, #23]
}
 802d412:	4618      	mov	r0, r3
 802d414:	3718      	adds	r7, #24
 802d416:	46bd      	mov	sp, r7
 802d418:	bd80      	pop	{r7, pc}
	...

0802d41c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 802d41c:	b580      	push	{r7, lr}
 802d41e:	b086      	sub	sp, #24
 802d420:	af02      	add	r7, sp, #8
 802d422:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 802d424:	2301      	movs	r3, #1
 802d426:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 802d428:	2300      	movs	r3, #0
 802d42a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 802d42c:	687b      	ldr	r3, [r7, #4]
 802d42e:	7e1b      	ldrb	r3, [r3, #24]
 802d430:	3b01      	subs	r3, #1
 802d432:	2b0a      	cmp	r3, #10
 802d434:	f200 8156 	bhi.w	802d6e4 <USBH_HandleControl+0x2c8>
 802d438:	a201      	add	r2, pc, #4	; (adr r2, 802d440 <USBH_HandleControl+0x24>)
 802d43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d43e:	bf00      	nop
 802d440:	0802d46d 	.word	0x0802d46d
 802d444:	0802d487 	.word	0x0802d487
 802d448:	0802d4f1 	.word	0x0802d4f1
 802d44c:	0802d517 	.word	0x0802d517
 802d450:	0802d54f 	.word	0x0802d54f
 802d454:	0802d579 	.word	0x0802d579
 802d458:	0802d5cb 	.word	0x0802d5cb
 802d45c:	0802d5ed 	.word	0x0802d5ed
 802d460:	0802d629 	.word	0x0802d629
 802d464:	0802d64f 	.word	0x0802d64f
 802d468:	0802d68d 	.word	0x0802d68d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 802d46c:	687b      	ldr	r3, [r7, #4]
 802d46e:	f103 0110 	add.w	r1, r3, #16
 802d472:	687b      	ldr	r3, [r7, #4]
 802d474:	795b      	ldrb	r3, [r3, #5]
 802d476:	461a      	mov	r2, r3
 802d478:	6878      	ldr	r0, [r7, #4]
 802d47a:	f000 f943 	bl	802d704 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 802d47e:	687b      	ldr	r3, [r7, #4]
 802d480:	2202      	movs	r2, #2
 802d482:	761a      	strb	r2, [r3, #24]
      break;
 802d484:	e139      	b.n	802d6fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d486:	687b      	ldr	r3, [r7, #4]
 802d488:	795b      	ldrb	r3, [r3, #5]
 802d48a:	4619      	mov	r1, r3
 802d48c:	6878      	ldr	r0, [r7, #4]
 802d48e:	f000 fccb 	bl	802de28 <USBH_LL_GetURBState>
 802d492:	4603      	mov	r3, r0
 802d494:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802d496:	7bbb      	ldrb	r3, [r7, #14]
 802d498:	2b01      	cmp	r3, #1
 802d49a:	d11e      	bne.n	802d4da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 802d49c:	687b      	ldr	r3, [r7, #4]
 802d49e:	7c1b      	ldrb	r3, [r3, #16]
 802d4a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802d4a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802d4a6:	687b      	ldr	r3, [r7, #4]
 802d4a8:	8adb      	ldrh	r3, [r3, #22]
 802d4aa:	2b00      	cmp	r3, #0
 802d4ac:	d00a      	beq.n	802d4c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 802d4ae:	7b7b      	ldrb	r3, [r7, #13]
 802d4b0:	2b80      	cmp	r3, #128	; 0x80
 802d4b2:	d103      	bne.n	802d4bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802d4b4:	687b      	ldr	r3, [r7, #4]
 802d4b6:	2203      	movs	r2, #3
 802d4b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d4ba:	e115      	b.n	802d6e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 802d4bc:	687b      	ldr	r3, [r7, #4]
 802d4be:	2205      	movs	r2, #5
 802d4c0:	761a      	strb	r2, [r3, #24]
      break;
 802d4c2:	e111      	b.n	802d6e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 802d4c4:	7b7b      	ldrb	r3, [r7, #13]
 802d4c6:	2b80      	cmp	r3, #128	; 0x80
 802d4c8:	d103      	bne.n	802d4d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 802d4ca:	687b      	ldr	r3, [r7, #4]
 802d4cc:	2209      	movs	r2, #9
 802d4ce:	761a      	strb	r2, [r3, #24]
      break;
 802d4d0:	e10a      	b.n	802d6e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 802d4d2:	687b      	ldr	r3, [r7, #4]
 802d4d4:	2207      	movs	r2, #7
 802d4d6:	761a      	strb	r2, [r3, #24]
      break;
 802d4d8:	e106      	b.n	802d6e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 802d4da:	7bbb      	ldrb	r3, [r7, #14]
 802d4dc:	2b04      	cmp	r3, #4
 802d4de:	d003      	beq.n	802d4e8 <USBH_HandleControl+0xcc>
 802d4e0:	7bbb      	ldrb	r3, [r7, #14]
 802d4e2:	2b02      	cmp	r3, #2
 802d4e4:	f040 8100 	bne.w	802d6e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 802d4e8:	687b      	ldr	r3, [r7, #4]
 802d4ea:	220b      	movs	r2, #11
 802d4ec:	761a      	strb	r2, [r3, #24]
      break;
 802d4ee:	e0fb      	b.n	802d6e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 802d4f0:	687b      	ldr	r3, [r7, #4]
 802d4f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d4f6:	b29a      	uxth	r2, r3
 802d4f8:	687b      	ldr	r3, [r7, #4]
 802d4fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 802d4fc:	687b      	ldr	r3, [r7, #4]
 802d4fe:	6899      	ldr	r1, [r3, #8]
 802d500:	687b      	ldr	r3, [r7, #4]
 802d502:	899a      	ldrh	r2, [r3, #12]
 802d504:	687b      	ldr	r3, [r7, #4]
 802d506:	791b      	ldrb	r3, [r3, #4]
 802d508:	6878      	ldr	r0, [r7, #4]
 802d50a:	f000 f93a 	bl	802d782 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802d50e:	687b      	ldr	r3, [r7, #4]
 802d510:	2204      	movs	r2, #4
 802d512:	761a      	strb	r2, [r3, #24]
      break;
 802d514:	e0f1      	b.n	802d6fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d516:	687b      	ldr	r3, [r7, #4]
 802d518:	791b      	ldrb	r3, [r3, #4]
 802d51a:	4619      	mov	r1, r3
 802d51c:	6878      	ldr	r0, [r7, #4]
 802d51e:	f000 fc83 	bl	802de28 <USBH_LL_GetURBState>
 802d522:	4603      	mov	r3, r0
 802d524:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 802d526:	7bbb      	ldrb	r3, [r7, #14]
 802d528:	2b01      	cmp	r3, #1
 802d52a:	d102      	bne.n	802d532 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802d52c:	687b      	ldr	r3, [r7, #4]
 802d52e:	2209      	movs	r2, #9
 802d530:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802d532:	7bbb      	ldrb	r3, [r7, #14]
 802d534:	2b05      	cmp	r3, #5
 802d536:	d102      	bne.n	802d53e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 802d538:	2303      	movs	r3, #3
 802d53a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d53c:	e0d6      	b.n	802d6ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 802d53e:	7bbb      	ldrb	r3, [r7, #14]
 802d540:	2b04      	cmp	r3, #4
 802d542:	f040 80d3 	bne.w	802d6ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 802d546:	687b      	ldr	r3, [r7, #4]
 802d548:	220b      	movs	r2, #11
 802d54a:	761a      	strb	r2, [r3, #24]
      break;
 802d54c:	e0ce      	b.n	802d6ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 802d54e:	687b      	ldr	r3, [r7, #4]
 802d550:	6899      	ldr	r1, [r3, #8]
 802d552:	687b      	ldr	r3, [r7, #4]
 802d554:	899a      	ldrh	r2, [r3, #12]
 802d556:	687b      	ldr	r3, [r7, #4]
 802d558:	795b      	ldrb	r3, [r3, #5]
 802d55a:	2001      	movs	r0, #1
 802d55c:	9000      	str	r0, [sp, #0]
 802d55e:	6878      	ldr	r0, [r7, #4]
 802d560:	f000 f8ea 	bl	802d738 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 802d564:	687b      	ldr	r3, [r7, #4]
 802d566:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d56a:	b29a      	uxth	r2, r3
 802d56c:	687b      	ldr	r3, [r7, #4]
 802d56e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 802d570:	687b      	ldr	r3, [r7, #4]
 802d572:	2206      	movs	r2, #6
 802d574:	761a      	strb	r2, [r3, #24]
      break;
 802d576:	e0c0      	b.n	802d6fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d578:	687b      	ldr	r3, [r7, #4]
 802d57a:	795b      	ldrb	r3, [r3, #5]
 802d57c:	4619      	mov	r1, r3
 802d57e:	6878      	ldr	r0, [r7, #4]
 802d580:	f000 fc52 	bl	802de28 <USBH_LL_GetURBState>
 802d584:	4603      	mov	r3, r0
 802d586:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d588:	7bbb      	ldrb	r3, [r7, #14]
 802d58a:	2b01      	cmp	r3, #1
 802d58c:	d103      	bne.n	802d596 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 802d58e:	687b      	ldr	r3, [r7, #4]
 802d590:	2207      	movs	r2, #7
 802d592:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d594:	e0ac      	b.n	802d6f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 802d596:	7bbb      	ldrb	r3, [r7, #14]
 802d598:	2b05      	cmp	r3, #5
 802d59a:	d105      	bne.n	802d5a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 802d59c:	687b      	ldr	r3, [r7, #4]
 802d59e:	220c      	movs	r2, #12
 802d5a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 802d5a2:	2303      	movs	r3, #3
 802d5a4:	73fb      	strb	r3, [r7, #15]
      break;
 802d5a6:	e0a3      	b.n	802d6f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d5a8:	7bbb      	ldrb	r3, [r7, #14]
 802d5aa:	2b02      	cmp	r3, #2
 802d5ac:	d103      	bne.n	802d5b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 802d5ae:	687b      	ldr	r3, [r7, #4]
 802d5b0:	2205      	movs	r2, #5
 802d5b2:	761a      	strb	r2, [r3, #24]
      break;
 802d5b4:	e09c      	b.n	802d6f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 802d5b6:	7bbb      	ldrb	r3, [r7, #14]
 802d5b8:	2b04      	cmp	r3, #4
 802d5ba:	f040 8099 	bne.w	802d6f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 802d5be:	687b      	ldr	r3, [r7, #4]
 802d5c0:	220b      	movs	r2, #11
 802d5c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802d5c4:	2302      	movs	r3, #2
 802d5c6:	73fb      	strb	r3, [r7, #15]
      break;
 802d5c8:	e092      	b.n	802d6f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 802d5ca:	687b      	ldr	r3, [r7, #4]
 802d5cc:	791b      	ldrb	r3, [r3, #4]
 802d5ce:	2200      	movs	r2, #0
 802d5d0:	2100      	movs	r1, #0
 802d5d2:	6878      	ldr	r0, [r7, #4]
 802d5d4:	f000 f8d5 	bl	802d782 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d5d8:	687b      	ldr	r3, [r7, #4]
 802d5da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d5de:	b29a      	uxth	r2, r3
 802d5e0:	687b      	ldr	r3, [r7, #4]
 802d5e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 802d5e4:	687b      	ldr	r3, [r7, #4]
 802d5e6:	2208      	movs	r2, #8
 802d5e8:	761a      	strb	r2, [r3, #24]

      break;
 802d5ea:	e086      	b.n	802d6fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 802d5ec:	687b      	ldr	r3, [r7, #4]
 802d5ee:	791b      	ldrb	r3, [r3, #4]
 802d5f0:	4619      	mov	r1, r3
 802d5f2:	6878      	ldr	r0, [r7, #4]
 802d5f4:	f000 fc18 	bl	802de28 <USBH_LL_GetURBState>
 802d5f8:	4603      	mov	r3, r0
 802d5fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 802d5fc:	7bbb      	ldrb	r3, [r7, #14]
 802d5fe:	2b01      	cmp	r3, #1
 802d600:	d105      	bne.n	802d60e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 802d602:	687b      	ldr	r3, [r7, #4]
 802d604:	220d      	movs	r2, #13
 802d606:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 802d608:	2300      	movs	r3, #0
 802d60a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d60c:	e072      	b.n	802d6f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 802d60e:	7bbb      	ldrb	r3, [r7, #14]
 802d610:	2b04      	cmp	r3, #4
 802d612:	d103      	bne.n	802d61c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 802d614:	687b      	ldr	r3, [r7, #4]
 802d616:	220b      	movs	r2, #11
 802d618:	761a      	strb	r2, [r3, #24]
      break;
 802d61a:	e06b      	b.n	802d6f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 802d61c:	7bbb      	ldrb	r3, [r7, #14]
 802d61e:	2b05      	cmp	r3, #5
 802d620:	d168      	bne.n	802d6f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 802d622:	2303      	movs	r3, #3
 802d624:	73fb      	strb	r3, [r7, #15]
      break;
 802d626:	e065      	b.n	802d6f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 802d628:	687b      	ldr	r3, [r7, #4]
 802d62a:	795b      	ldrb	r3, [r3, #5]
 802d62c:	2201      	movs	r2, #1
 802d62e:	9200      	str	r2, [sp, #0]
 802d630:	2200      	movs	r2, #0
 802d632:	2100      	movs	r1, #0
 802d634:	6878      	ldr	r0, [r7, #4]
 802d636:	f000 f87f 	bl	802d738 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 802d63a:	687b      	ldr	r3, [r7, #4]
 802d63c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 802d640:	b29a      	uxth	r2, r3
 802d642:	687b      	ldr	r3, [r7, #4]
 802d644:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 802d646:	687b      	ldr	r3, [r7, #4]
 802d648:	220a      	movs	r2, #10
 802d64a:	761a      	strb	r2, [r3, #24]
      break;
 802d64c:	e055      	b.n	802d6fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802d64e:	687b      	ldr	r3, [r7, #4]
 802d650:	795b      	ldrb	r3, [r3, #5]
 802d652:	4619      	mov	r1, r3
 802d654:	6878      	ldr	r0, [r7, #4]
 802d656:	f000 fbe7 	bl	802de28 <USBH_LL_GetURBState>
 802d65a:	4603      	mov	r3, r0
 802d65c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 802d65e:	7bbb      	ldrb	r3, [r7, #14]
 802d660:	2b01      	cmp	r3, #1
 802d662:	d105      	bne.n	802d670 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 802d664:	2300      	movs	r3, #0
 802d666:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 802d668:	687b      	ldr	r3, [r7, #4]
 802d66a:	220d      	movs	r2, #13
 802d66c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 802d66e:	e043      	b.n	802d6f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 802d670:	7bbb      	ldrb	r3, [r7, #14]
 802d672:	2b02      	cmp	r3, #2
 802d674:	d103      	bne.n	802d67e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 802d676:	687b      	ldr	r3, [r7, #4]
 802d678:	2209      	movs	r2, #9
 802d67a:	761a      	strb	r2, [r3, #24]
      break;
 802d67c:	e03c      	b.n	802d6f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 802d67e:	7bbb      	ldrb	r3, [r7, #14]
 802d680:	2b04      	cmp	r3, #4
 802d682:	d139      	bne.n	802d6f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 802d684:	687b      	ldr	r3, [r7, #4]
 802d686:	220b      	movs	r2, #11
 802d688:	761a      	strb	r2, [r3, #24]
      break;
 802d68a:	e035      	b.n	802d6f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 802d68c:	687b      	ldr	r3, [r7, #4]
 802d68e:	7e5b      	ldrb	r3, [r3, #25]
 802d690:	3301      	adds	r3, #1
 802d692:	b2da      	uxtb	r2, r3
 802d694:	687b      	ldr	r3, [r7, #4]
 802d696:	765a      	strb	r2, [r3, #25]
 802d698:	687b      	ldr	r3, [r7, #4]
 802d69a:	7e5b      	ldrb	r3, [r3, #25]
 802d69c:	2b02      	cmp	r3, #2
 802d69e:	d806      	bhi.n	802d6ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 802d6a0:	687b      	ldr	r3, [r7, #4]
 802d6a2:	2201      	movs	r2, #1
 802d6a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 802d6a6:	687b      	ldr	r3, [r7, #4]
 802d6a8:	2201      	movs	r2, #1
 802d6aa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 802d6ac:	e025      	b.n	802d6fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 802d6ae:	687b      	ldr	r3, [r7, #4]
 802d6b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 802d6b4:	2106      	movs	r1, #6
 802d6b6:	6878      	ldr	r0, [r7, #4]
 802d6b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 802d6ba:	687b      	ldr	r3, [r7, #4]
 802d6bc:	2200      	movs	r2, #0
 802d6be:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 802d6c0:	687b      	ldr	r3, [r7, #4]
 802d6c2:	795b      	ldrb	r3, [r3, #5]
 802d6c4:	4619      	mov	r1, r3
 802d6c6:	6878      	ldr	r0, [r7, #4]
 802d6c8:	f000 f90c 	bl	802d8e4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 802d6cc:	687b      	ldr	r3, [r7, #4]
 802d6ce:	791b      	ldrb	r3, [r3, #4]
 802d6d0:	4619      	mov	r1, r3
 802d6d2:	6878      	ldr	r0, [r7, #4]
 802d6d4:	f000 f906 	bl	802d8e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 802d6d8:	687b      	ldr	r3, [r7, #4]
 802d6da:	2200      	movs	r2, #0
 802d6dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 802d6de:	2302      	movs	r3, #2
 802d6e0:	73fb      	strb	r3, [r7, #15]
      break;
 802d6e2:	e00a      	b.n	802d6fa <USBH_HandleControl+0x2de>

    default:
      break;
 802d6e4:	bf00      	nop
 802d6e6:	e008      	b.n	802d6fa <USBH_HandleControl+0x2de>
      break;
 802d6e8:	bf00      	nop
 802d6ea:	e006      	b.n	802d6fa <USBH_HandleControl+0x2de>
      break;
 802d6ec:	bf00      	nop
 802d6ee:	e004      	b.n	802d6fa <USBH_HandleControl+0x2de>
      break;
 802d6f0:	bf00      	nop
 802d6f2:	e002      	b.n	802d6fa <USBH_HandleControl+0x2de>
      break;
 802d6f4:	bf00      	nop
 802d6f6:	e000      	b.n	802d6fa <USBH_HandleControl+0x2de>
      break;
 802d6f8:	bf00      	nop
  }

  return status;
 802d6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 802d6fc:	4618      	mov	r0, r3
 802d6fe:	3710      	adds	r7, #16
 802d700:	46bd      	mov	sp, r7
 802d702:	bd80      	pop	{r7, pc}

0802d704 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 802d704:	b580      	push	{r7, lr}
 802d706:	b088      	sub	sp, #32
 802d708:	af04      	add	r7, sp, #16
 802d70a:	60f8      	str	r0, [r7, #12]
 802d70c:	60b9      	str	r1, [r7, #8]
 802d70e:	4613      	mov	r3, r2
 802d710:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d712:	79f9      	ldrb	r1, [r7, #7]
 802d714:	2300      	movs	r3, #0
 802d716:	9303      	str	r3, [sp, #12]
 802d718:	2308      	movs	r3, #8
 802d71a:	9302      	str	r3, [sp, #8]
 802d71c:	68bb      	ldr	r3, [r7, #8]
 802d71e:	9301      	str	r3, [sp, #4]
 802d720:	2300      	movs	r3, #0
 802d722:	9300      	str	r3, [sp, #0]
 802d724:	2300      	movs	r3, #0
 802d726:	2200      	movs	r2, #0
 802d728:	68f8      	ldr	r0, [r7, #12]
 802d72a:	f000 fb4c 	bl	802ddc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 802d72e:	2300      	movs	r3, #0
}
 802d730:	4618      	mov	r0, r3
 802d732:	3710      	adds	r7, #16
 802d734:	46bd      	mov	sp, r7
 802d736:	bd80      	pop	{r7, pc}

0802d738 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 802d738:	b580      	push	{r7, lr}
 802d73a:	b088      	sub	sp, #32
 802d73c:	af04      	add	r7, sp, #16
 802d73e:	60f8      	str	r0, [r7, #12]
 802d740:	60b9      	str	r1, [r7, #8]
 802d742:	4611      	mov	r1, r2
 802d744:	461a      	mov	r2, r3
 802d746:	460b      	mov	r3, r1
 802d748:	80fb      	strh	r3, [r7, #6]
 802d74a:	4613      	mov	r3, r2
 802d74c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d74e:	68fb      	ldr	r3, [r7, #12]
 802d750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d754:	2b00      	cmp	r3, #0
 802d756:	d001      	beq.n	802d75c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 802d758:	2300      	movs	r3, #0
 802d75a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d75c:	7979      	ldrb	r1, [r7, #5]
 802d75e:	7e3b      	ldrb	r3, [r7, #24]
 802d760:	9303      	str	r3, [sp, #12]
 802d762:	88fb      	ldrh	r3, [r7, #6]
 802d764:	9302      	str	r3, [sp, #8]
 802d766:	68bb      	ldr	r3, [r7, #8]
 802d768:	9301      	str	r3, [sp, #4]
 802d76a:	2301      	movs	r3, #1
 802d76c:	9300      	str	r3, [sp, #0]
 802d76e:	2300      	movs	r3, #0
 802d770:	2200      	movs	r2, #0
 802d772:	68f8      	ldr	r0, [r7, #12]
 802d774:	f000 fb27 	bl	802ddc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 802d778:	2300      	movs	r3, #0
}
 802d77a:	4618      	mov	r0, r3
 802d77c:	3710      	adds	r7, #16
 802d77e:	46bd      	mov	sp, r7
 802d780:	bd80      	pop	{r7, pc}

0802d782 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 802d782:	b580      	push	{r7, lr}
 802d784:	b088      	sub	sp, #32
 802d786:	af04      	add	r7, sp, #16
 802d788:	60f8      	str	r0, [r7, #12]
 802d78a:	60b9      	str	r1, [r7, #8]
 802d78c:	4611      	mov	r1, r2
 802d78e:	461a      	mov	r2, r3
 802d790:	460b      	mov	r3, r1
 802d792:	80fb      	strh	r3, [r7, #6]
 802d794:	4613      	mov	r3, r2
 802d796:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d798:	7979      	ldrb	r1, [r7, #5]
 802d79a:	2300      	movs	r3, #0
 802d79c:	9303      	str	r3, [sp, #12]
 802d79e:	88fb      	ldrh	r3, [r7, #6]
 802d7a0:	9302      	str	r3, [sp, #8]
 802d7a2:	68bb      	ldr	r3, [r7, #8]
 802d7a4:	9301      	str	r3, [sp, #4]
 802d7a6:	2301      	movs	r3, #1
 802d7a8:	9300      	str	r3, [sp, #0]
 802d7aa:	2300      	movs	r3, #0
 802d7ac:	2201      	movs	r2, #1
 802d7ae:	68f8      	ldr	r0, [r7, #12]
 802d7b0:	f000 fb09 	bl	802ddc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d7b4:	2300      	movs	r3, #0

}
 802d7b6:	4618      	mov	r0, r3
 802d7b8:	3710      	adds	r7, #16
 802d7ba:	46bd      	mov	sp, r7
 802d7bc:	bd80      	pop	{r7, pc}

0802d7be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 802d7be:	b580      	push	{r7, lr}
 802d7c0:	b088      	sub	sp, #32
 802d7c2:	af04      	add	r7, sp, #16
 802d7c4:	60f8      	str	r0, [r7, #12]
 802d7c6:	60b9      	str	r1, [r7, #8]
 802d7c8:	4611      	mov	r1, r2
 802d7ca:	461a      	mov	r2, r3
 802d7cc:	460b      	mov	r3, r1
 802d7ce:	80fb      	strh	r3, [r7, #6]
 802d7d0:	4613      	mov	r3, r2
 802d7d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 802d7d4:	68fb      	ldr	r3, [r7, #12]
 802d7d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 802d7da:	2b00      	cmp	r3, #0
 802d7dc:	d001      	beq.n	802d7e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 802d7de:	2300      	movs	r3, #0
 802d7e0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d7e2:	7979      	ldrb	r1, [r7, #5]
 802d7e4:	7e3b      	ldrb	r3, [r7, #24]
 802d7e6:	9303      	str	r3, [sp, #12]
 802d7e8:	88fb      	ldrh	r3, [r7, #6]
 802d7ea:	9302      	str	r3, [sp, #8]
 802d7ec:	68bb      	ldr	r3, [r7, #8]
 802d7ee:	9301      	str	r3, [sp, #4]
 802d7f0:	2301      	movs	r3, #1
 802d7f2:	9300      	str	r3, [sp, #0]
 802d7f4:	2302      	movs	r3, #2
 802d7f6:	2200      	movs	r2, #0
 802d7f8:	68f8      	ldr	r0, [r7, #12]
 802d7fa:	f000 fae4 	bl	802ddc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 802d7fe:	2300      	movs	r3, #0
}
 802d800:	4618      	mov	r0, r3
 802d802:	3710      	adds	r7, #16
 802d804:	46bd      	mov	sp, r7
 802d806:	bd80      	pop	{r7, pc}

0802d808 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 802d808:	b580      	push	{r7, lr}
 802d80a:	b088      	sub	sp, #32
 802d80c:	af04      	add	r7, sp, #16
 802d80e:	60f8      	str	r0, [r7, #12]
 802d810:	60b9      	str	r1, [r7, #8]
 802d812:	4611      	mov	r1, r2
 802d814:	461a      	mov	r2, r3
 802d816:	460b      	mov	r3, r1
 802d818:	80fb      	strh	r3, [r7, #6]
 802d81a:	4613      	mov	r3, r2
 802d81c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 802d81e:	7979      	ldrb	r1, [r7, #5]
 802d820:	2300      	movs	r3, #0
 802d822:	9303      	str	r3, [sp, #12]
 802d824:	88fb      	ldrh	r3, [r7, #6]
 802d826:	9302      	str	r3, [sp, #8]
 802d828:	68bb      	ldr	r3, [r7, #8]
 802d82a:	9301      	str	r3, [sp, #4]
 802d82c:	2301      	movs	r3, #1
 802d82e:	9300      	str	r3, [sp, #0]
 802d830:	2302      	movs	r3, #2
 802d832:	2201      	movs	r2, #1
 802d834:	68f8      	ldr	r0, [r7, #12]
 802d836:	f000 fac6 	bl	802ddc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 802d83a:	2300      	movs	r3, #0
}
 802d83c:	4618      	mov	r0, r3
 802d83e:	3710      	adds	r7, #16
 802d840:	46bd      	mov	sp, r7
 802d842:	bd80      	pop	{r7, pc}

0802d844 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802d844:	b580      	push	{r7, lr}
 802d846:	b086      	sub	sp, #24
 802d848:	af04      	add	r7, sp, #16
 802d84a:	6078      	str	r0, [r7, #4]
 802d84c:	4608      	mov	r0, r1
 802d84e:	4611      	mov	r1, r2
 802d850:	461a      	mov	r2, r3
 802d852:	4603      	mov	r3, r0
 802d854:	70fb      	strb	r3, [r7, #3]
 802d856:	460b      	mov	r3, r1
 802d858:	70bb      	strb	r3, [r7, #2]
 802d85a:	4613      	mov	r3, r2
 802d85c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 802d85e:	7878      	ldrb	r0, [r7, #1]
 802d860:	78ba      	ldrb	r2, [r7, #2]
 802d862:	78f9      	ldrb	r1, [r7, #3]
 802d864:	8b3b      	ldrh	r3, [r7, #24]
 802d866:	9302      	str	r3, [sp, #8]
 802d868:	7d3b      	ldrb	r3, [r7, #20]
 802d86a:	9301      	str	r3, [sp, #4]
 802d86c:	7c3b      	ldrb	r3, [r7, #16]
 802d86e:	9300      	str	r3, [sp, #0]
 802d870:	4603      	mov	r3, r0
 802d872:	6878      	ldr	r0, [r7, #4]
 802d874:	f000 fa59 	bl	802dd2a <USBH_LL_OpenPipe>

  return USBH_OK;
 802d878:	2300      	movs	r3, #0
}
 802d87a:	4618      	mov	r0, r3
 802d87c:	3708      	adds	r7, #8
 802d87e:	46bd      	mov	sp, r7
 802d880:	bd80      	pop	{r7, pc}

0802d882 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 802d882:	b580      	push	{r7, lr}
 802d884:	b082      	sub	sp, #8
 802d886:	af00      	add	r7, sp, #0
 802d888:	6078      	str	r0, [r7, #4]
 802d88a:	460b      	mov	r3, r1
 802d88c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 802d88e:	78fb      	ldrb	r3, [r7, #3]
 802d890:	4619      	mov	r1, r3
 802d892:	6878      	ldr	r0, [r7, #4]
 802d894:	f000 fa78 	bl	802dd88 <USBH_LL_ClosePipe>

  return USBH_OK;
 802d898:	2300      	movs	r3, #0
}
 802d89a:	4618      	mov	r0, r3
 802d89c:	3708      	adds	r7, #8
 802d89e:	46bd      	mov	sp, r7
 802d8a0:	bd80      	pop	{r7, pc}

0802d8a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 802d8a2:	b580      	push	{r7, lr}
 802d8a4:	b084      	sub	sp, #16
 802d8a6:	af00      	add	r7, sp, #0
 802d8a8:	6078      	str	r0, [r7, #4]
 802d8aa:	460b      	mov	r3, r1
 802d8ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 802d8ae:	6878      	ldr	r0, [r7, #4]
 802d8b0:	f000 f836 	bl	802d920 <USBH_GetFreePipe>
 802d8b4:	4603      	mov	r3, r0
 802d8b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 802d8b8:	89fb      	ldrh	r3, [r7, #14]
 802d8ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802d8be:	4293      	cmp	r3, r2
 802d8c0:	d00a      	beq.n	802d8d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 802d8c2:	78fa      	ldrb	r2, [r7, #3]
 802d8c4:	89fb      	ldrh	r3, [r7, #14]
 802d8c6:	f003 030f 	and.w	r3, r3, #15
 802d8ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802d8ce:	6879      	ldr	r1, [r7, #4]
 802d8d0:	33e0      	adds	r3, #224	; 0xe0
 802d8d2:	009b      	lsls	r3, r3, #2
 802d8d4:	440b      	add	r3, r1
 802d8d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 802d8d8:	89fb      	ldrh	r3, [r7, #14]
 802d8da:	b2db      	uxtb	r3, r3
}
 802d8dc:	4618      	mov	r0, r3
 802d8de:	3710      	adds	r7, #16
 802d8e0:	46bd      	mov	sp, r7
 802d8e2:	bd80      	pop	{r7, pc}

0802d8e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 802d8e4:	b480      	push	{r7}
 802d8e6:	b083      	sub	sp, #12
 802d8e8:	af00      	add	r7, sp, #0
 802d8ea:	6078      	str	r0, [r7, #4]
 802d8ec:	460b      	mov	r3, r1
 802d8ee:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 802d8f0:	78fb      	ldrb	r3, [r7, #3]
 802d8f2:	2b0f      	cmp	r3, #15
 802d8f4:	d80d      	bhi.n	802d912 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 802d8f6:	78fb      	ldrb	r3, [r7, #3]
 802d8f8:	687a      	ldr	r2, [r7, #4]
 802d8fa:	33e0      	adds	r3, #224	; 0xe0
 802d8fc:	009b      	lsls	r3, r3, #2
 802d8fe:	4413      	add	r3, r2
 802d900:	685a      	ldr	r2, [r3, #4]
 802d902:	78fb      	ldrb	r3, [r7, #3]
 802d904:	f3c2 020e 	ubfx	r2, r2, #0, #15
 802d908:	6879      	ldr	r1, [r7, #4]
 802d90a:	33e0      	adds	r3, #224	; 0xe0
 802d90c:	009b      	lsls	r3, r3, #2
 802d90e:	440b      	add	r3, r1
 802d910:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 802d912:	2300      	movs	r3, #0
}
 802d914:	4618      	mov	r0, r3
 802d916:	370c      	adds	r7, #12
 802d918:	46bd      	mov	sp, r7
 802d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d91e:	4770      	bx	lr

0802d920 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 802d920:	b480      	push	{r7}
 802d922:	b085      	sub	sp, #20
 802d924:	af00      	add	r7, sp, #0
 802d926:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 802d928:	2300      	movs	r3, #0
 802d92a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d92c:	2300      	movs	r3, #0
 802d92e:	73fb      	strb	r3, [r7, #15]
 802d930:	e00f      	b.n	802d952 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 802d932:	7bfb      	ldrb	r3, [r7, #15]
 802d934:	687a      	ldr	r2, [r7, #4]
 802d936:	33e0      	adds	r3, #224	; 0xe0
 802d938:	009b      	lsls	r3, r3, #2
 802d93a:	4413      	add	r3, r2
 802d93c:	685b      	ldr	r3, [r3, #4]
 802d93e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802d942:	2b00      	cmp	r3, #0
 802d944:	d102      	bne.n	802d94c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 802d946:	7bfb      	ldrb	r3, [r7, #15]
 802d948:	b29b      	uxth	r3, r3
 802d94a:	e007      	b.n	802d95c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 802d94c:	7bfb      	ldrb	r3, [r7, #15]
 802d94e:	3301      	adds	r3, #1
 802d950:	73fb      	strb	r3, [r7, #15]
 802d952:	7bfb      	ldrb	r3, [r7, #15]
 802d954:	2b0f      	cmp	r3, #15
 802d956:	d9ec      	bls.n	802d932 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 802d958:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 802d95c:	4618      	mov	r0, r3
 802d95e:	3714      	adds	r7, #20
 802d960:	46bd      	mov	sp, r7
 802d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 802d966:	4770      	bx	lr

0802d968 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 802d968:	b580      	push	{r7, lr}
 802d96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 802d96c:	2200      	movs	r2, #0
 802d96e:	490e      	ldr	r1, [pc, #56]	; (802d9a8 <MX_USB_HOST_Init+0x40>)
 802d970:	480e      	ldr	r0, [pc, #56]	; (802d9ac <MX_USB_HOST_Init+0x44>)
 802d972:	f7fe fba7 	bl	802c0c4 <USBH_Init>
 802d976:	4603      	mov	r3, r0
 802d978:	2b00      	cmp	r3, #0
 802d97a:	d001      	beq.n	802d980 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 802d97c:	f7f3 fa80 	bl	8020e80 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 802d980:	490b      	ldr	r1, [pc, #44]	; (802d9b0 <MX_USB_HOST_Init+0x48>)
 802d982:	480a      	ldr	r0, [pc, #40]	; (802d9ac <MX_USB_HOST_Init+0x44>)
 802d984:	f7fe fc2c 	bl	802c1e0 <USBH_RegisterClass>
 802d988:	4603      	mov	r3, r0
 802d98a:	2b00      	cmp	r3, #0
 802d98c:	d001      	beq.n	802d992 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 802d98e:	f7f3 fa77 	bl	8020e80 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 802d992:	4806      	ldr	r0, [pc, #24]	; (802d9ac <MX_USB_HOST_Init+0x44>)
 802d994:	f7fe fcb0 	bl	802c2f8 <USBH_Start>
 802d998:	4603      	mov	r3, r0
 802d99a:	2b00      	cmp	r3, #0
 802d99c:	d001      	beq.n	802d9a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 802d99e:	f7f3 fa6f 	bl	8020e80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 802d9a2:	bf00      	nop
 802d9a4:	bd80      	pop	{r7, pc}
 802d9a6:	bf00      	nop
 802d9a8:	0802d9c9 	.word	0x0802d9c9
 802d9ac:	20000b14 	.word	0x20000b14
 802d9b0:	20000060 	.word	0x20000060

0802d9b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 802d9b4:	b580      	push	{r7, lr}
 802d9b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 802d9b8:	4802      	ldr	r0, [pc, #8]	; (802d9c4 <MX_USB_HOST_Process+0x10>)
 802d9ba:	f7fe fcad 	bl	802c318 <USBH_Process>
}
 802d9be:	bf00      	nop
 802d9c0:	bd80      	pop	{r7, pc}
 802d9c2:	bf00      	nop
 802d9c4:	20000b14 	.word	0x20000b14

0802d9c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 802d9c8:	b480      	push	{r7}
 802d9ca:	b083      	sub	sp, #12
 802d9cc:	af00      	add	r7, sp, #0
 802d9ce:	6078      	str	r0, [r7, #4]
 802d9d0:	460b      	mov	r3, r1
 802d9d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 802d9d4:	78fb      	ldrb	r3, [r7, #3]
 802d9d6:	3b01      	subs	r3, #1
 802d9d8:	2b04      	cmp	r3, #4
 802d9da:	d819      	bhi.n	802da10 <USBH_UserProcess+0x48>
 802d9dc:	a201      	add	r2, pc, #4	; (adr r2, 802d9e4 <USBH_UserProcess+0x1c>)
 802d9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802d9e2:	bf00      	nop
 802d9e4:	0802da11 	.word	0x0802da11
 802d9e8:	0802da01 	.word	0x0802da01
 802d9ec:	0802da11 	.word	0x0802da11
 802d9f0:	0802da09 	.word	0x0802da09
 802d9f4:	0802d9f9 	.word	0x0802d9f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 802d9f8:	4b09      	ldr	r3, [pc, #36]	; (802da20 <USBH_UserProcess+0x58>)
 802d9fa:	2203      	movs	r2, #3
 802d9fc:	701a      	strb	r2, [r3, #0]
  break;
 802d9fe:	e008      	b.n	802da12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 802da00:	4b07      	ldr	r3, [pc, #28]	; (802da20 <USBH_UserProcess+0x58>)
 802da02:	2202      	movs	r2, #2
 802da04:	701a      	strb	r2, [r3, #0]
  break;
 802da06:	e004      	b.n	802da12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 802da08:	4b05      	ldr	r3, [pc, #20]	; (802da20 <USBH_UserProcess+0x58>)
 802da0a:	2201      	movs	r2, #1
 802da0c:	701a      	strb	r2, [r3, #0]
  break;
 802da0e:	e000      	b.n	802da12 <USBH_UserProcess+0x4a>

  default:
  break;
 802da10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 802da12:	bf00      	nop
 802da14:	370c      	adds	r7, #12
 802da16:	46bd      	mov	sp, r7
 802da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 802da1c:	4770      	bx	lr
 802da1e:	bf00      	nop
 802da20:	20000eec 	.word	0x20000eec

0802da24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 802da24:	b580      	push	{r7, lr}
 802da26:	b08a      	sub	sp, #40	; 0x28
 802da28:	af00      	add	r7, sp, #0
 802da2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802da2c:	f107 0314 	add.w	r3, r7, #20
 802da30:	2200      	movs	r2, #0
 802da32:	601a      	str	r2, [r3, #0]
 802da34:	605a      	str	r2, [r3, #4]
 802da36:	609a      	str	r2, [r3, #8]
 802da38:	60da      	str	r2, [r3, #12]
 802da3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 802da3c:	687b      	ldr	r3, [r7, #4]
 802da3e:	681b      	ldr	r3, [r3, #0]
 802da40:	4a24      	ldr	r2, [pc, #144]	; (802dad4 <HAL_HCD_MspInit+0xb0>)
 802da42:	4293      	cmp	r3, r2
 802da44:	d141      	bne.n	802daca <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802da46:	2300      	movs	r3, #0
 802da48:	613b      	str	r3, [r7, #16]
 802da4a:	4b23      	ldr	r3, [pc, #140]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802da4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802da4e:	4a22      	ldr	r2, [pc, #136]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802da50:	f043 0302 	orr.w	r3, r3, #2
 802da54:	6313      	str	r3, [r2, #48]	; 0x30
 802da56:	4b20      	ldr	r3, [pc, #128]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802da58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802da5a:	f003 0302 	and.w	r3, r3, #2
 802da5e:	613b      	str	r3, [r7, #16]
 802da60:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 802da62:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 802da66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802da68:	2302      	movs	r3, #2
 802da6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802da6c:	2300      	movs	r3, #0
 802da6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802da70:	2300      	movs	r3, #0
 802da72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 802da74:	230c      	movs	r3, #12
 802da76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802da78:	f107 0314 	add.w	r3, r7, #20
 802da7c:	4619      	mov	r1, r3
 802da7e:	4817      	ldr	r0, [pc, #92]	; (802dadc <HAL_HCD_MspInit+0xb8>)
 802da80:	f7f6 ffcc 	bl	8024a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 802da84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802da88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802da8a:	2300      	movs	r3, #0
 802da8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802da8e:	2300      	movs	r3, #0
 802da90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 802da92:	f107 0314 	add.w	r3, r7, #20
 802da96:	4619      	mov	r1, r3
 802da98:	4810      	ldr	r0, [pc, #64]	; (802dadc <HAL_HCD_MspInit+0xb8>)
 802da9a:	f7f6 ffbf 	bl	8024a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 802da9e:	2300      	movs	r3, #0
 802daa0:	60fb      	str	r3, [r7, #12]
 802daa2:	4b0d      	ldr	r3, [pc, #52]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802daa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802daa6:	4a0c      	ldr	r2, [pc, #48]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802daa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802daac:	6313      	str	r3, [r2, #48]	; 0x30
 802daae:	4b0a      	ldr	r3, [pc, #40]	; (802dad8 <HAL_HCD_MspInit+0xb4>)
 802dab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802dab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 802dab6:	60fb      	str	r3, [r7, #12]
 802dab8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 802daba:	2200      	movs	r2, #0
 802dabc:	2100      	movs	r1, #0
 802dabe:	204d      	movs	r0, #77	; 0x4d
 802dac0:	f7f5 fe6f 	bl	80237a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 802dac4:	204d      	movs	r0, #77	; 0x4d
 802dac6:	f7f5 fe88 	bl	80237da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 802daca:	bf00      	nop
 802dacc:	3728      	adds	r7, #40	; 0x28
 802dace:	46bd      	mov	sp, r7
 802dad0:	bd80      	pop	{r7, pc}
 802dad2:	bf00      	nop
 802dad4:	40040000 	.word	0x40040000
 802dad8:	40023800 	.word	0x40023800
 802dadc:	40020400 	.word	0x40020400

0802dae0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 802dae0:	b580      	push	{r7, lr}
 802dae2:	b082      	sub	sp, #8
 802dae4:	af00      	add	r7, sp, #0
 802dae6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 802dae8:	687b      	ldr	r3, [r7, #4]
 802daea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802daee:	4618      	mov	r0, r3
 802daf0:	f7fe fff1 	bl	802cad6 <USBH_LL_IncTimer>
}
 802daf4:	bf00      	nop
 802daf6:	3708      	adds	r7, #8
 802daf8:	46bd      	mov	sp, r7
 802dafa:	bd80      	pop	{r7, pc}

0802dafc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 802dafc:	b580      	push	{r7, lr}
 802dafe:	b082      	sub	sp, #8
 802db00:	af00      	add	r7, sp, #0
 802db02:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 802db04:	687b      	ldr	r3, [r7, #4]
 802db06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802db0a:	4618      	mov	r0, r3
 802db0c:	f7ff f829 	bl	802cb62 <USBH_LL_Connect>
}
 802db10:	bf00      	nop
 802db12:	3708      	adds	r7, #8
 802db14:	46bd      	mov	sp, r7
 802db16:	bd80      	pop	{r7, pc}

0802db18 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 802db18:	b580      	push	{r7, lr}
 802db1a:	b082      	sub	sp, #8
 802db1c:	af00      	add	r7, sp, #0
 802db1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 802db20:	687b      	ldr	r3, [r7, #4]
 802db22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802db26:	4618      	mov	r0, r3
 802db28:	f7ff f832 	bl	802cb90 <USBH_LL_Disconnect>
}
 802db2c:	bf00      	nop
 802db2e:	3708      	adds	r7, #8
 802db30:	46bd      	mov	sp, r7
 802db32:	bd80      	pop	{r7, pc}

0802db34 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 802db34:	b480      	push	{r7}
 802db36:	b083      	sub	sp, #12
 802db38:	af00      	add	r7, sp, #0
 802db3a:	6078      	str	r0, [r7, #4]
 802db3c:	460b      	mov	r3, r1
 802db3e:	70fb      	strb	r3, [r7, #3]
 802db40:	4613      	mov	r3, r2
 802db42:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 802db44:	bf00      	nop
 802db46:	370c      	adds	r7, #12
 802db48:	46bd      	mov	sp, r7
 802db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802db4e:	4770      	bx	lr

0802db50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802db50:	b580      	push	{r7, lr}
 802db52:	b082      	sub	sp, #8
 802db54:	af00      	add	r7, sp, #0
 802db56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 802db58:	687b      	ldr	r3, [r7, #4]
 802db5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802db5e:	4618      	mov	r0, r3
 802db60:	f7fe ffe3 	bl	802cb2a <USBH_LL_PortEnabled>
}
 802db64:	bf00      	nop
 802db66:	3708      	adds	r7, #8
 802db68:	46bd      	mov	sp, r7
 802db6a:	bd80      	pop	{r7, pc}

0802db6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 802db6c:	b580      	push	{r7, lr}
 802db6e:	b082      	sub	sp, #8
 802db70:	af00      	add	r7, sp, #0
 802db72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 802db74:	687b      	ldr	r3, [r7, #4]
 802db76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 802db7a:	4618      	mov	r0, r3
 802db7c:	f7fe ffe3 	bl	802cb46 <USBH_LL_PortDisabled>
}
 802db80:	bf00      	nop
 802db82:	3708      	adds	r7, #8
 802db84:	46bd      	mov	sp, r7
 802db86:	bd80      	pop	{r7, pc}

0802db88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 802db88:	b580      	push	{r7, lr}
 802db8a:	b082      	sub	sp, #8
 802db8c:	af00      	add	r7, sp, #0
 802db8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 802db90:	687b      	ldr	r3, [r7, #4]
 802db92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802db96:	2b00      	cmp	r3, #0
 802db98:	d132      	bne.n	802dc00 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 802db9a:	4a1c      	ldr	r2, [pc, #112]	; (802dc0c <USBH_LL_Init+0x84>)
 802db9c:	687b      	ldr	r3, [r7, #4]
 802db9e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 802dba2:	687b      	ldr	r3, [r7, #4]
 802dba4:	4a19      	ldr	r2, [pc, #100]	; (802dc0c <USBH_LL_Init+0x84>)
 802dba6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 802dbaa:	4b18      	ldr	r3, [pc, #96]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbac:	4a18      	ldr	r2, [pc, #96]	; (802dc10 <USBH_LL_Init+0x88>)
 802dbae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 802dbb0:	4b16      	ldr	r3, [pc, #88]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbb2:	220c      	movs	r2, #12
 802dbb4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 802dbb6:	4b15      	ldr	r3, [pc, #84]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbb8:	2201      	movs	r2, #1
 802dbba:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 802dbbc:	4b13      	ldr	r3, [pc, #76]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbbe:	2200      	movs	r2, #0
 802dbc0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 802dbc2:	4b12      	ldr	r3, [pc, #72]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbc4:	2202      	movs	r2, #2
 802dbc6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802dbc8:	4b10      	ldr	r3, [pc, #64]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbca:	2200      	movs	r2, #0
 802dbcc:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 802dbce:	4b0f      	ldr	r3, [pc, #60]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbd0:	2200      	movs	r2, #0
 802dbd2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 802dbd4:	4b0d      	ldr	r3, [pc, #52]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbd6:	2200      	movs	r2, #0
 802dbd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802dbda:	4b0c      	ldr	r3, [pc, #48]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbdc:	2200      	movs	r2, #0
 802dbde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 802dbe0:	480a      	ldr	r0, [pc, #40]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbe2:	f7f7 fa05 	bl	8024ff0 <HAL_HCD_Init>
 802dbe6:	4603      	mov	r3, r0
 802dbe8:	2b00      	cmp	r3, #0
 802dbea:	d001      	beq.n	802dbf0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 802dbec:	f7f3 f948 	bl	8020e80 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 802dbf0:	4806      	ldr	r0, [pc, #24]	; (802dc0c <USBH_LL_Init+0x84>)
 802dbf2:	f7f7 fde8 	bl	80257c6 <HAL_HCD_GetCurrentFrame>
 802dbf6:	4603      	mov	r3, r0
 802dbf8:	4619      	mov	r1, r3
 802dbfa:	6878      	ldr	r0, [r7, #4]
 802dbfc:	f7fe ff5c 	bl	802cab8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 802dc00:	2300      	movs	r3, #0
}
 802dc02:	4618      	mov	r0, r3
 802dc04:	3708      	adds	r7, #8
 802dc06:	46bd      	mov	sp, r7
 802dc08:	bd80      	pop	{r7, pc}
 802dc0a:	bf00      	nop
 802dc0c:	20000ef0 	.word	0x20000ef0
 802dc10:	40040000 	.word	0x40040000

0802dc14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 802dc14:	b580      	push	{r7, lr}
 802dc16:	b084      	sub	sp, #16
 802dc18:	af00      	add	r7, sp, #0
 802dc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dc1c:	2300      	movs	r3, #0
 802dc1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dc20:	2300      	movs	r3, #0
 802dc22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 802dc24:	687b      	ldr	r3, [r7, #4]
 802dc26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dc2a:	4618      	mov	r0, r3
 802dc2c:	f7f7 fd55 	bl	80256da <HAL_HCD_Start>
 802dc30:	4603      	mov	r3, r0
 802dc32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dc34:	7bfb      	ldrb	r3, [r7, #15]
 802dc36:	4618      	mov	r0, r3
 802dc38:	f000 f95c 	bl	802def4 <USBH_Get_USB_Status>
 802dc3c:	4603      	mov	r3, r0
 802dc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dc40:	7bbb      	ldrb	r3, [r7, #14]
}
 802dc42:	4618      	mov	r0, r3
 802dc44:	3710      	adds	r7, #16
 802dc46:	46bd      	mov	sp, r7
 802dc48:	bd80      	pop	{r7, pc}

0802dc4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 802dc4a:	b580      	push	{r7, lr}
 802dc4c:	b084      	sub	sp, #16
 802dc4e:	af00      	add	r7, sp, #0
 802dc50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dc52:	2300      	movs	r3, #0
 802dc54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dc56:	2300      	movs	r3, #0
 802dc58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 802dc5a:	687b      	ldr	r3, [r7, #4]
 802dc5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dc60:	4618      	mov	r0, r3
 802dc62:	f7f7 fd5d 	bl	8025720 <HAL_HCD_Stop>
 802dc66:	4603      	mov	r3, r0
 802dc68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dc6a:	7bfb      	ldrb	r3, [r7, #15]
 802dc6c:	4618      	mov	r0, r3
 802dc6e:	f000 f941 	bl	802def4 <USBH_Get_USB_Status>
 802dc72:	4603      	mov	r3, r0
 802dc74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dc76:	7bbb      	ldrb	r3, [r7, #14]
}
 802dc78:	4618      	mov	r0, r3
 802dc7a:	3710      	adds	r7, #16
 802dc7c:	46bd      	mov	sp, r7
 802dc7e:	bd80      	pop	{r7, pc}

0802dc80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 802dc80:	b580      	push	{r7, lr}
 802dc82:	b084      	sub	sp, #16
 802dc84:	af00      	add	r7, sp, #0
 802dc86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 802dc88:	2301      	movs	r3, #1
 802dc8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 802dc8c:	687b      	ldr	r3, [r7, #4]
 802dc8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dc92:	4618      	mov	r0, r3
 802dc94:	f7f7 fda5 	bl	80257e2 <HAL_HCD_GetCurrentSpeed>
 802dc98:	4603      	mov	r3, r0
 802dc9a:	2b02      	cmp	r3, #2
 802dc9c:	d00c      	beq.n	802dcb8 <USBH_LL_GetSpeed+0x38>
 802dc9e:	2b02      	cmp	r3, #2
 802dca0:	d80d      	bhi.n	802dcbe <USBH_LL_GetSpeed+0x3e>
 802dca2:	2b00      	cmp	r3, #0
 802dca4:	d002      	beq.n	802dcac <USBH_LL_GetSpeed+0x2c>
 802dca6:	2b01      	cmp	r3, #1
 802dca8:	d003      	beq.n	802dcb2 <USBH_LL_GetSpeed+0x32>
 802dcaa:	e008      	b.n	802dcbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 802dcac:	2300      	movs	r3, #0
 802dcae:	73fb      	strb	r3, [r7, #15]
    break;
 802dcb0:	e008      	b.n	802dcc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 802dcb2:	2301      	movs	r3, #1
 802dcb4:	73fb      	strb	r3, [r7, #15]
    break;
 802dcb6:	e005      	b.n	802dcc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 802dcb8:	2302      	movs	r3, #2
 802dcba:	73fb      	strb	r3, [r7, #15]
    break;
 802dcbc:	e002      	b.n	802dcc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 802dcbe:	2301      	movs	r3, #1
 802dcc0:	73fb      	strb	r3, [r7, #15]
    break;
 802dcc2:	bf00      	nop
  }
  return  speed;
 802dcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 802dcc6:	4618      	mov	r0, r3
 802dcc8:	3710      	adds	r7, #16
 802dcca:	46bd      	mov	sp, r7
 802dccc:	bd80      	pop	{r7, pc}

0802dcce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 802dcce:	b580      	push	{r7, lr}
 802dcd0:	b084      	sub	sp, #16
 802dcd2:	af00      	add	r7, sp, #0
 802dcd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dcd6:	2300      	movs	r3, #0
 802dcd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dcda:	2300      	movs	r3, #0
 802dcdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 802dcde:	687b      	ldr	r3, [r7, #4]
 802dce0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dce4:	4618      	mov	r0, r3
 802dce6:	f7f7 fd38 	bl	802575a <HAL_HCD_ResetPort>
 802dcea:	4603      	mov	r3, r0
 802dcec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802dcee:	7bfb      	ldrb	r3, [r7, #15]
 802dcf0:	4618      	mov	r0, r3
 802dcf2:	f000 f8ff 	bl	802def4 <USBH_Get_USB_Status>
 802dcf6:	4603      	mov	r3, r0
 802dcf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dcfa:	7bbb      	ldrb	r3, [r7, #14]
}
 802dcfc:	4618      	mov	r0, r3
 802dcfe:	3710      	adds	r7, #16
 802dd00:	46bd      	mov	sp, r7
 802dd02:	bd80      	pop	{r7, pc}

0802dd04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802dd04:	b580      	push	{r7, lr}
 802dd06:	b082      	sub	sp, #8
 802dd08:	af00      	add	r7, sp, #0
 802dd0a:	6078      	str	r0, [r7, #4]
 802dd0c:	460b      	mov	r3, r1
 802dd0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 802dd10:	687b      	ldr	r3, [r7, #4]
 802dd12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dd16:	78fa      	ldrb	r2, [r7, #3]
 802dd18:	4611      	mov	r1, r2
 802dd1a:	4618      	mov	r0, r3
 802dd1c:	f7f7 fd3f 	bl	802579e <HAL_HCD_HC_GetXferCount>
 802dd20:	4603      	mov	r3, r0
}
 802dd22:	4618      	mov	r0, r3
 802dd24:	3708      	adds	r7, #8
 802dd26:	46bd      	mov	sp, r7
 802dd28:	bd80      	pop	{r7, pc}

0802dd2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 802dd2a:	b590      	push	{r4, r7, lr}
 802dd2c:	b089      	sub	sp, #36	; 0x24
 802dd2e:	af04      	add	r7, sp, #16
 802dd30:	6078      	str	r0, [r7, #4]
 802dd32:	4608      	mov	r0, r1
 802dd34:	4611      	mov	r1, r2
 802dd36:	461a      	mov	r2, r3
 802dd38:	4603      	mov	r3, r0
 802dd3a:	70fb      	strb	r3, [r7, #3]
 802dd3c:	460b      	mov	r3, r1
 802dd3e:	70bb      	strb	r3, [r7, #2]
 802dd40:	4613      	mov	r3, r2
 802dd42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd44:	2300      	movs	r3, #0
 802dd46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd48:	2300      	movs	r3, #0
 802dd4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 802dd4c:	687b      	ldr	r3, [r7, #4]
 802dd4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802dd52:	787c      	ldrb	r4, [r7, #1]
 802dd54:	78ba      	ldrb	r2, [r7, #2]
 802dd56:	78f9      	ldrb	r1, [r7, #3]
 802dd58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802dd5a:	9302      	str	r3, [sp, #8]
 802dd5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802dd60:	9301      	str	r3, [sp, #4]
 802dd62:	f897 3020 	ldrb.w	r3, [r7, #32]
 802dd66:	9300      	str	r3, [sp, #0]
 802dd68:	4623      	mov	r3, r4
 802dd6a:	f7f7 f9a3 	bl	80250b4 <HAL_HCD_HC_Init>
 802dd6e:	4603      	mov	r3, r0
 802dd70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 802dd72:	7bfb      	ldrb	r3, [r7, #15]
 802dd74:	4618      	mov	r0, r3
 802dd76:	f000 f8bd 	bl	802def4 <USBH_Get_USB_Status>
 802dd7a:	4603      	mov	r3, r0
 802dd7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802dd7e:	7bbb      	ldrb	r3, [r7, #14]
}
 802dd80:	4618      	mov	r0, r3
 802dd82:	3714      	adds	r7, #20
 802dd84:	46bd      	mov	sp, r7
 802dd86:	bd90      	pop	{r4, r7, pc}

0802dd88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802dd88:	b580      	push	{r7, lr}
 802dd8a:	b084      	sub	sp, #16
 802dd8c:	af00      	add	r7, sp, #0
 802dd8e:	6078      	str	r0, [r7, #4]
 802dd90:	460b      	mov	r3, r1
 802dd92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dd94:	2300      	movs	r3, #0
 802dd96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dd98:	2300      	movs	r3, #0
 802dd9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 802dd9c:	687b      	ldr	r3, [r7, #4]
 802dd9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802dda2:	78fa      	ldrb	r2, [r7, #3]
 802dda4:	4611      	mov	r1, r2
 802dda6:	4618      	mov	r0, r3
 802dda8:	f7f7 fa13 	bl	80251d2 <HAL_HCD_HC_Halt>
 802ddac:	4603      	mov	r3, r0
 802ddae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 802ddb0:	7bfb      	ldrb	r3, [r7, #15]
 802ddb2:	4618      	mov	r0, r3
 802ddb4:	f000 f89e 	bl	802def4 <USBH_Get_USB_Status>
 802ddb8:	4603      	mov	r3, r0
 802ddba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802ddbc:	7bbb      	ldrb	r3, [r7, #14]
}
 802ddbe:	4618      	mov	r0, r3
 802ddc0:	3710      	adds	r7, #16
 802ddc2:	46bd      	mov	sp, r7
 802ddc4:	bd80      	pop	{r7, pc}

0802ddc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 802ddc6:	b590      	push	{r4, r7, lr}
 802ddc8:	b089      	sub	sp, #36	; 0x24
 802ddca:	af04      	add	r7, sp, #16
 802ddcc:	6078      	str	r0, [r7, #4]
 802ddce:	4608      	mov	r0, r1
 802ddd0:	4611      	mov	r1, r2
 802ddd2:	461a      	mov	r2, r3
 802ddd4:	4603      	mov	r3, r0
 802ddd6:	70fb      	strb	r3, [r7, #3]
 802ddd8:	460b      	mov	r3, r1
 802ddda:	70bb      	strb	r3, [r7, #2]
 802dddc:	4613      	mov	r3, r2
 802ddde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802dde0:	2300      	movs	r3, #0
 802dde2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802dde4:	2300      	movs	r3, #0
 802dde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 802dde8:	687b      	ldr	r3, [r7, #4]
 802ddea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 802ddee:	787c      	ldrb	r4, [r7, #1]
 802ddf0:	78ba      	ldrb	r2, [r7, #2]
 802ddf2:	78f9      	ldrb	r1, [r7, #3]
 802ddf4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 802ddf8:	9303      	str	r3, [sp, #12]
 802ddfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 802ddfc:	9302      	str	r3, [sp, #8]
 802ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802de00:	9301      	str	r3, [sp, #4]
 802de02:	f897 3020 	ldrb.w	r3, [r7, #32]
 802de06:	9300      	str	r3, [sp, #0]
 802de08:	4623      	mov	r3, r4
 802de0a:	f7f7 fa05 	bl	8025218 <HAL_HCD_HC_SubmitRequest>
 802de0e:	4603      	mov	r3, r0
 802de10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 802de12:	7bfb      	ldrb	r3, [r7, #15]
 802de14:	4618      	mov	r0, r3
 802de16:	f000 f86d 	bl	802def4 <USBH_Get_USB_Status>
 802de1a:	4603      	mov	r3, r0
 802de1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802de1e:	7bbb      	ldrb	r3, [r7, #14]
}
 802de20:	4618      	mov	r0, r3
 802de22:	3714      	adds	r7, #20
 802de24:	46bd      	mov	sp, r7
 802de26:	bd90      	pop	{r4, r7, pc}

0802de28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 802de28:	b580      	push	{r7, lr}
 802de2a:	b082      	sub	sp, #8
 802de2c:	af00      	add	r7, sp, #0
 802de2e:	6078      	str	r0, [r7, #4]
 802de30:	460b      	mov	r3, r1
 802de32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 802de34:	687b      	ldr	r3, [r7, #4]
 802de36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802de3a:	78fa      	ldrb	r2, [r7, #3]
 802de3c:	4611      	mov	r1, r2
 802de3e:	4618      	mov	r0, r3
 802de40:	f7f7 fc99 	bl	8025776 <HAL_HCD_HC_GetURBState>
 802de44:	4603      	mov	r3, r0
}
 802de46:	4618      	mov	r0, r3
 802de48:	3708      	adds	r7, #8
 802de4a:	46bd      	mov	sp, r7
 802de4c:	bd80      	pop	{r7, pc}

0802de4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 802de4e:	b580      	push	{r7, lr}
 802de50:	b082      	sub	sp, #8
 802de52:	af00      	add	r7, sp, #0
 802de54:	6078      	str	r0, [r7, #4]
 802de56:	460b      	mov	r3, r1
 802de58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 802de5a:	687b      	ldr	r3, [r7, #4]
 802de5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 802de60:	2b00      	cmp	r3, #0
 802de62:	d103      	bne.n	802de6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 802de64:	78fb      	ldrb	r3, [r7, #3]
 802de66:	4618      	mov	r0, r3
 802de68:	f000 f870 	bl	802df4c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 802de6c:	20c8      	movs	r0, #200	; 0xc8
 802de6e:	f7f5 fba5 	bl	80235bc <HAL_Delay>
  return USBH_OK;
 802de72:	2300      	movs	r3, #0
}
 802de74:	4618      	mov	r0, r3
 802de76:	3708      	adds	r7, #8
 802de78:	46bd      	mov	sp, r7
 802de7a:	bd80      	pop	{r7, pc}

0802de7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 802de7c:	b480      	push	{r7}
 802de7e:	b085      	sub	sp, #20
 802de80:	af00      	add	r7, sp, #0
 802de82:	6078      	str	r0, [r7, #4]
 802de84:	460b      	mov	r3, r1
 802de86:	70fb      	strb	r3, [r7, #3]
 802de88:	4613      	mov	r3, r2
 802de8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 802de8c:	687b      	ldr	r3, [r7, #4]
 802de8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 802de92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 802de94:	78fb      	ldrb	r3, [r7, #3]
 802de96:	68fa      	ldr	r2, [r7, #12]
 802de98:	212c      	movs	r1, #44	; 0x2c
 802de9a:	fb01 f303 	mul.w	r3, r1, r3
 802de9e:	4413      	add	r3, r2
 802dea0:	333b      	adds	r3, #59	; 0x3b
 802dea2:	781b      	ldrb	r3, [r3, #0]
 802dea4:	2b00      	cmp	r3, #0
 802dea6:	d009      	beq.n	802debc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 802dea8:	78fb      	ldrb	r3, [r7, #3]
 802deaa:	68fa      	ldr	r2, [r7, #12]
 802deac:	212c      	movs	r1, #44	; 0x2c
 802deae:	fb01 f303 	mul.w	r3, r1, r3
 802deb2:	4413      	add	r3, r2
 802deb4:	3354      	adds	r3, #84	; 0x54
 802deb6:	78ba      	ldrb	r2, [r7, #2]
 802deb8:	701a      	strb	r2, [r3, #0]
 802deba:	e008      	b.n	802dece <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 802debc:	78fb      	ldrb	r3, [r7, #3]
 802debe:	68fa      	ldr	r2, [r7, #12]
 802dec0:	212c      	movs	r1, #44	; 0x2c
 802dec2:	fb01 f303 	mul.w	r3, r1, r3
 802dec6:	4413      	add	r3, r2
 802dec8:	3355      	adds	r3, #85	; 0x55
 802deca:	78ba      	ldrb	r2, [r7, #2]
 802decc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 802dece:	2300      	movs	r3, #0
}
 802ded0:	4618      	mov	r0, r3
 802ded2:	3714      	adds	r7, #20
 802ded4:	46bd      	mov	sp, r7
 802ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802deda:	4770      	bx	lr

0802dedc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 802dedc:	b580      	push	{r7, lr}
 802dede:	b082      	sub	sp, #8
 802dee0:	af00      	add	r7, sp, #0
 802dee2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 802dee4:	6878      	ldr	r0, [r7, #4]
 802dee6:	f7f5 fb69 	bl	80235bc <HAL_Delay>
}
 802deea:	bf00      	nop
 802deec:	3708      	adds	r7, #8
 802deee:	46bd      	mov	sp, r7
 802def0:	bd80      	pop	{r7, pc}
	...

0802def4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 802def4:	b480      	push	{r7}
 802def6:	b085      	sub	sp, #20
 802def8:	af00      	add	r7, sp, #0
 802defa:	4603      	mov	r3, r0
 802defc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802defe:	2300      	movs	r3, #0
 802df00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802df02:	79fb      	ldrb	r3, [r7, #7]
 802df04:	2b03      	cmp	r3, #3
 802df06:	d817      	bhi.n	802df38 <USBH_Get_USB_Status+0x44>
 802df08:	a201      	add	r2, pc, #4	; (adr r2, 802df10 <USBH_Get_USB_Status+0x1c>)
 802df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802df0e:	bf00      	nop
 802df10:	0802df21 	.word	0x0802df21
 802df14:	0802df27 	.word	0x0802df27
 802df18:	0802df2d 	.word	0x0802df2d
 802df1c:	0802df33 	.word	0x0802df33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802df20:	2300      	movs	r3, #0
 802df22:	73fb      	strb	r3, [r7, #15]
    break;
 802df24:	e00b      	b.n	802df3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 802df26:	2302      	movs	r3, #2
 802df28:	73fb      	strb	r3, [r7, #15]
    break;
 802df2a:	e008      	b.n	802df3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 802df2c:	2301      	movs	r3, #1
 802df2e:	73fb      	strb	r3, [r7, #15]
    break;
 802df30:	e005      	b.n	802df3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802df32:	2302      	movs	r3, #2
 802df34:	73fb      	strb	r3, [r7, #15]
    break;
 802df36:	e002      	b.n	802df3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 802df38:	2302      	movs	r3, #2
 802df3a:	73fb      	strb	r3, [r7, #15]
    break;
 802df3c:	bf00      	nop
  }
  return usb_status;
 802df3e:	7bfb      	ldrb	r3, [r7, #15]
}
 802df40:	4618      	mov	r0, r3
 802df42:	3714      	adds	r7, #20
 802df44:	46bd      	mov	sp, r7
 802df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 802df4a:	4770      	bx	lr

0802df4c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 802df4c:	b580      	push	{r7, lr}
 802df4e:	b084      	sub	sp, #16
 802df50:	af00      	add	r7, sp, #0
 802df52:	4603      	mov	r3, r0
 802df54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 802df56:	79fb      	ldrb	r3, [r7, #7]
 802df58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 802df5a:	79fb      	ldrb	r3, [r7, #7]
 802df5c:	2b00      	cmp	r3, #0
 802df5e:	d102      	bne.n	802df66 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 802df60:	2301      	movs	r3, #1
 802df62:	73fb      	strb	r3, [r7, #15]
 802df64:	e001      	b.n	802df6a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 802df66:	2300      	movs	r3, #0
 802df68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 802df6a:	7bfb      	ldrb	r3, [r7, #15]
 802df6c:	461a      	mov	r2, r3
 802df6e:	2110      	movs	r1, #16
 802df70:	4803      	ldr	r0, [pc, #12]	; (802df80 <MX_DriverVbusHS+0x34>)
 802df72:	f7f7 f80b 	bl	8024f8c <HAL_GPIO_WritePin>
}
 802df76:	bf00      	nop
 802df78:	3710      	adds	r7, #16
 802df7a:	46bd      	mov	sp, r7
 802df7c:	bd80      	pop	{r7, pc}
 802df7e:	bf00      	nop
 802df80:	40020800 	.word	0x40020800

0802df84 <__errno>:
 802df84:	4b01      	ldr	r3, [pc, #4]	; (802df8c <__errno+0x8>)
 802df86:	6818      	ldr	r0, [r3, #0]
 802df88:	4770      	bx	lr
 802df8a:	bf00      	nop
 802df8c:	20000080 	.word	0x20000080

0802df90 <__libc_init_array>:
 802df90:	b570      	push	{r4, r5, r6, lr}
 802df92:	4d0d      	ldr	r5, [pc, #52]	; (802dfc8 <__libc_init_array+0x38>)
 802df94:	4c0d      	ldr	r4, [pc, #52]	; (802dfcc <__libc_init_array+0x3c>)
 802df96:	1b64      	subs	r4, r4, r5
 802df98:	10a4      	asrs	r4, r4, #2
 802df9a:	2600      	movs	r6, #0
 802df9c:	42a6      	cmp	r6, r4
 802df9e:	d109      	bne.n	802dfb4 <__libc_init_array+0x24>
 802dfa0:	4d0b      	ldr	r5, [pc, #44]	; (802dfd0 <__libc_init_array+0x40>)
 802dfa2:	4c0c      	ldr	r4, [pc, #48]	; (802dfd4 <__libc_init_array+0x44>)
 802dfa4:	f001 fa10 	bl	802f3c8 <_init>
 802dfa8:	1b64      	subs	r4, r4, r5
 802dfaa:	10a4      	asrs	r4, r4, #2
 802dfac:	2600      	movs	r6, #0
 802dfae:	42a6      	cmp	r6, r4
 802dfb0:	d105      	bne.n	802dfbe <__libc_init_array+0x2e>
 802dfb2:	bd70      	pop	{r4, r5, r6, pc}
 802dfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 802dfb8:	4798      	blx	r3
 802dfba:	3601      	adds	r6, #1
 802dfbc:	e7ee      	b.n	802df9c <__libc_init_array+0xc>
 802dfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 802dfc2:	4798      	blx	r3
 802dfc4:	3601      	adds	r6, #1
 802dfc6:	e7f2      	b.n	802dfae <__libc_init_array+0x1e>
 802dfc8:	08031a0c 	.word	0x08031a0c
 802dfcc:	08031a0c 	.word	0x08031a0c
 802dfd0:	08031a0c 	.word	0x08031a0c
 802dfd4:	08031a10 	.word	0x08031a10

0802dfd8 <malloc>:
 802dfd8:	4b02      	ldr	r3, [pc, #8]	; (802dfe4 <malloc+0xc>)
 802dfda:	4601      	mov	r1, r0
 802dfdc:	6818      	ldr	r0, [r3, #0]
 802dfde:	f000 b87f 	b.w	802e0e0 <_malloc_r>
 802dfe2:	bf00      	nop
 802dfe4:	20000080 	.word	0x20000080

0802dfe8 <free>:
 802dfe8:	4b02      	ldr	r3, [pc, #8]	; (802dff4 <free+0xc>)
 802dfea:	4601      	mov	r1, r0
 802dfec:	6818      	ldr	r0, [r3, #0]
 802dfee:	f000 b80b 	b.w	802e008 <_free_r>
 802dff2:	bf00      	nop
 802dff4:	20000080 	.word	0x20000080

0802dff8 <memset>:
 802dff8:	4402      	add	r2, r0
 802dffa:	4603      	mov	r3, r0
 802dffc:	4293      	cmp	r3, r2
 802dffe:	d100      	bne.n	802e002 <memset+0xa>
 802e000:	4770      	bx	lr
 802e002:	f803 1b01 	strb.w	r1, [r3], #1
 802e006:	e7f9      	b.n	802dffc <memset+0x4>

0802e008 <_free_r>:
 802e008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e00a:	2900      	cmp	r1, #0
 802e00c:	d044      	beq.n	802e098 <_free_r+0x90>
 802e00e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e012:	9001      	str	r0, [sp, #4]
 802e014:	2b00      	cmp	r3, #0
 802e016:	f1a1 0404 	sub.w	r4, r1, #4
 802e01a:	bfb8      	it	lt
 802e01c:	18e4      	addlt	r4, r4, r3
 802e01e:	f000 fc71 	bl	802e904 <__malloc_lock>
 802e022:	4a1e      	ldr	r2, [pc, #120]	; (802e09c <_free_r+0x94>)
 802e024:	9801      	ldr	r0, [sp, #4]
 802e026:	6813      	ldr	r3, [r2, #0]
 802e028:	b933      	cbnz	r3, 802e038 <_free_r+0x30>
 802e02a:	6063      	str	r3, [r4, #4]
 802e02c:	6014      	str	r4, [r2, #0]
 802e02e:	b003      	add	sp, #12
 802e030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e034:	f000 bc6c 	b.w	802e910 <__malloc_unlock>
 802e038:	42a3      	cmp	r3, r4
 802e03a:	d908      	bls.n	802e04e <_free_r+0x46>
 802e03c:	6825      	ldr	r5, [r4, #0]
 802e03e:	1961      	adds	r1, r4, r5
 802e040:	428b      	cmp	r3, r1
 802e042:	bf01      	itttt	eq
 802e044:	6819      	ldreq	r1, [r3, #0]
 802e046:	685b      	ldreq	r3, [r3, #4]
 802e048:	1949      	addeq	r1, r1, r5
 802e04a:	6021      	streq	r1, [r4, #0]
 802e04c:	e7ed      	b.n	802e02a <_free_r+0x22>
 802e04e:	461a      	mov	r2, r3
 802e050:	685b      	ldr	r3, [r3, #4]
 802e052:	b10b      	cbz	r3, 802e058 <_free_r+0x50>
 802e054:	42a3      	cmp	r3, r4
 802e056:	d9fa      	bls.n	802e04e <_free_r+0x46>
 802e058:	6811      	ldr	r1, [r2, #0]
 802e05a:	1855      	adds	r5, r2, r1
 802e05c:	42a5      	cmp	r5, r4
 802e05e:	d10b      	bne.n	802e078 <_free_r+0x70>
 802e060:	6824      	ldr	r4, [r4, #0]
 802e062:	4421      	add	r1, r4
 802e064:	1854      	adds	r4, r2, r1
 802e066:	42a3      	cmp	r3, r4
 802e068:	6011      	str	r1, [r2, #0]
 802e06a:	d1e0      	bne.n	802e02e <_free_r+0x26>
 802e06c:	681c      	ldr	r4, [r3, #0]
 802e06e:	685b      	ldr	r3, [r3, #4]
 802e070:	6053      	str	r3, [r2, #4]
 802e072:	4421      	add	r1, r4
 802e074:	6011      	str	r1, [r2, #0]
 802e076:	e7da      	b.n	802e02e <_free_r+0x26>
 802e078:	d902      	bls.n	802e080 <_free_r+0x78>
 802e07a:	230c      	movs	r3, #12
 802e07c:	6003      	str	r3, [r0, #0]
 802e07e:	e7d6      	b.n	802e02e <_free_r+0x26>
 802e080:	6825      	ldr	r5, [r4, #0]
 802e082:	1961      	adds	r1, r4, r5
 802e084:	428b      	cmp	r3, r1
 802e086:	bf04      	itt	eq
 802e088:	6819      	ldreq	r1, [r3, #0]
 802e08a:	685b      	ldreq	r3, [r3, #4]
 802e08c:	6063      	str	r3, [r4, #4]
 802e08e:	bf04      	itt	eq
 802e090:	1949      	addeq	r1, r1, r5
 802e092:	6021      	streq	r1, [r4, #0]
 802e094:	6054      	str	r4, [r2, #4]
 802e096:	e7ca      	b.n	802e02e <_free_r+0x26>
 802e098:	b003      	add	sp, #12
 802e09a:	bd30      	pop	{r4, r5, pc}
 802e09c:	200011f4 	.word	0x200011f4

0802e0a0 <sbrk_aligned>:
 802e0a0:	b570      	push	{r4, r5, r6, lr}
 802e0a2:	4e0e      	ldr	r6, [pc, #56]	; (802e0dc <sbrk_aligned+0x3c>)
 802e0a4:	460c      	mov	r4, r1
 802e0a6:	6831      	ldr	r1, [r6, #0]
 802e0a8:	4605      	mov	r5, r0
 802e0aa:	b911      	cbnz	r1, 802e0b2 <sbrk_aligned+0x12>
 802e0ac:	f000 f91a 	bl	802e2e4 <_sbrk_r>
 802e0b0:	6030      	str	r0, [r6, #0]
 802e0b2:	4621      	mov	r1, r4
 802e0b4:	4628      	mov	r0, r5
 802e0b6:	f000 f915 	bl	802e2e4 <_sbrk_r>
 802e0ba:	1c43      	adds	r3, r0, #1
 802e0bc:	d00a      	beq.n	802e0d4 <sbrk_aligned+0x34>
 802e0be:	1cc4      	adds	r4, r0, #3
 802e0c0:	f024 0403 	bic.w	r4, r4, #3
 802e0c4:	42a0      	cmp	r0, r4
 802e0c6:	d007      	beq.n	802e0d8 <sbrk_aligned+0x38>
 802e0c8:	1a21      	subs	r1, r4, r0
 802e0ca:	4628      	mov	r0, r5
 802e0cc:	f000 f90a 	bl	802e2e4 <_sbrk_r>
 802e0d0:	3001      	adds	r0, #1
 802e0d2:	d101      	bne.n	802e0d8 <sbrk_aligned+0x38>
 802e0d4:	f04f 34ff 	mov.w	r4, #4294967295
 802e0d8:	4620      	mov	r0, r4
 802e0da:	bd70      	pop	{r4, r5, r6, pc}
 802e0dc:	200011f8 	.word	0x200011f8

0802e0e0 <_malloc_r>:
 802e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e0e4:	1ccd      	adds	r5, r1, #3
 802e0e6:	f025 0503 	bic.w	r5, r5, #3
 802e0ea:	3508      	adds	r5, #8
 802e0ec:	2d0c      	cmp	r5, #12
 802e0ee:	bf38      	it	cc
 802e0f0:	250c      	movcc	r5, #12
 802e0f2:	2d00      	cmp	r5, #0
 802e0f4:	4607      	mov	r7, r0
 802e0f6:	db01      	blt.n	802e0fc <_malloc_r+0x1c>
 802e0f8:	42a9      	cmp	r1, r5
 802e0fa:	d905      	bls.n	802e108 <_malloc_r+0x28>
 802e0fc:	230c      	movs	r3, #12
 802e0fe:	603b      	str	r3, [r7, #0]
 802e100:	2600      	movs	r6, #0
 802e102:	4630      	mov	r0, r6
 802e104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e108:	4e2e      	ldr	r6, [pc, #184]	; (802e1c4 <_malloc_r+0xe4>)
 802e10a:	f000 fbfb 	bl	802e904 <__malloc_lock>
 802e10e:	6833      	ldr	r3, [r6, #0]
 802e110:	461c      	mov	r4, r3
 802e112:	bb34      	cbnz	r4, 802e162 <_malloc_r+0x82>
 802e114:	4629      	mov	r1, r5
 802e116:	4638      	mov	r0, r7
 802e118:	f7ff ffc2 	bl	802e0a0 <sbrk_aligned>
 802e11c:	1c43      	adds	r3, r0, #1
 802e11e:	4604      	mov	r4, r0
 802e120:	d14d      	bne.n	802e1be <_malloc_r+0xde>
 802e122:	6834      	ldr	r4, [r6, #0]
 802e124:	4626      	mov	r6, r4
 802e126:	2e00      	cmp	r6, #0
 802e128:	d140      	bne.n	802e1ac <_malloc_r+0xcc>
 802e12a:	6823      	ldr	r3, [r4, #0]
 802e12c:	4631      	mov	r1, r6
 802e12e:	4638      	mov	r0, r7
 802e130:	eb04 0803 	add.w	r8, r4, r3
 802e134:	f000 f8d6 	bl	802e2e4 <_sbrk_r>
 802e138:	4580      	cmp	r8, r0
 802e13a:	d13a      	bne.n	802e1b2 <_malloc_r+0xd2>
 802e13c:	6821      	ldr	r1, [r4, #0]
 802e13e:	3503      	adds	r5, #3
 802e140:	1a6d      	subs	r5, r5, r1
 802e142:	f025 0503 	bic.w	r5, r5, #3
 802e146:	3508      	adds	r5, #8
 802e148:	2d0c      	cmp	r5, #12
 802e14a:	bf38      	it	cc
 802e14c:	250c      	movcc	r5, #12
 802e14e:	4629      	mov	r1, r5
 802e150:	4638      	mov	r0, r7
 802e152:	f7ff ffa5 	bl	802e0a0 <sbrk_aligned>
 802e156:	3001      	adds	r0, #1
 802e158:	d02b      	beq.n	802e1b2 <_malloc_r+0xd2>
 802e15a:	6823      	ldr	r3, [r4, #0]
 802e15c:	442b      	add	r3, r5
 802e15e:	6023      	str	r3, [r4, #0]
 802e160:	e00e      	b.n	802e180 <_malloc_r+0xa0>
 802e162:	6822      	ldr	r2, [r4, #0]
 802e164:	1b52      	subs	r2, r2, r5
 802e166:	d41e      	bmi.n	802e1a6 <_malloc_r+0xc6>
 802e168:	2a0b      	cmp	r2, #11
 802e16a:	d916      	bls.n	802e19a <_malloc_r+0xba>
 802e16c:	1961      	adds	r1, r4, r5
 802e16e:	42a3      	cmp	r3, r4
 802e170:	6025      	str	r5, [r4, #0]
 802e172:	bf18      	it	ne
 802e174:	6059      	strne	r1, [r3, #4]
 802e176:	6863      	ldr	r3, [r4, #4]
 802e178:	bf08      	it	eq
 802e17a:	6031      	streq	r1, [r6, #0]
 802e17c:	5162      	str	r2, [r4, r5]
 802e17e:	604b      	str	r3, [r1, #4]
 802e180:	4638      	mov	r0, r7
 802e182:	f104 060b 	add.w	r6, r4, #11
 802e186:	f000 fbc3 	bl	802e910 <__malloc_unlock>
 802e18a:	f026 0607 	bic.w	r6, r6, #7
 802e18e:	1d23      	adds	r3, r4, #4
 802e190:	1af2      	subs	r2, r6, r3
 802e192:	d0b6      	beq.n	802e102 <_malloc_r+0x22>
 802e194:	1b9b      	subs	r3, r3, r6
 802e196:	50a3      	str	r3, [r4, r2]
 802e198:	e7b3      	b.n	802e102 <_malloc_r+0x22>
 802e19a:	6862      	ldr	r2, [r4, #4]
 802e19c:	42a3      	cmp	r3, r4
 802e19e:	bf0c      	ite	eq
 802e1a0:	6032      	streq	r2, [r6, #0]
 802e1a2:	605a      	strne	r2, [r3, #4]
 802e1a4:	e7ec      	b.n	802e180 <_malloc_r+0xa0>
 802e1a6:	4623      	mov	r3, r4
 802e1a8:	6864      	ldr	r4, [r4, #4]
 802e1aa:	e7b2      	b.n	802e112 <_malloc_r+0x32>
 802e1ac:	4634      	mov	r4, r6
 802e1ae:	6876      	ldr	r6, [r6, #4]
 802e1b0:	e7b9      	b.n	802e126 <_malloc_r+0x46>
 802e1b2:	230c      	movs	r3, #12
 802e1b4:	603b      	str	r3, [r7, #0]
 802e1b6:	4638      	mov	r0, r7
 802e1b8:	f000 fbaa 	bl	802e910 <__malloc_unlock>
 802e1bc:	e7a1      	b.n	802e102 <_malloc_r+0x22>
 802e1be:	6025      	str	r5, [r4, #0]
 802e1c0:	e7de      	b.n	802e180 <_malloc_r+0xa0>
 802e1c2:	bf00      	nop
 802e1c4:	200011f4 	.word	0x200011f4

0802e1c8 <iprintf>:
 802e1c8:	b40f      	push	{r0, r1, r2, r3}
 802e1ca:	4b0a      	ldr	r3, [pc, #40]	; (802e1f4 <iprintf+0x2c>)
 802e1cc:	b513      	push	{r0, r1, r4, lr}
 802e1ce:	681c      	ldr	r4, [r3, #0]
 802e1d0:	b124      	cbz	r4, 802e1dc <iprintf+0x14>
 802e1d2:	69a3      	ldr	r3, [r4, #24]
 802e1d4:	b913      	cbnz	r3, 802e1dc <iprintf+0x14>
 802e1d6:	4620      	mov	r0, r4
 802e1d8:	f000 fa8e 	bl	802e6f8 <__sinit>
 802e1dc:	ab05      	add	r3, sp, #20
 802e1de:	9a04      	ldr	r2, [sp, #16]
 802e1e0:	68a1      	ldr	r1, [r4, #8]
 802e1e2:	9301      	str	r3, [sp, #4]
 802e1e4:	4620      	mov	r0, r4
 802e1e6:	f000 fd1f 	bl	802ec28 <_vfiprintf_r>
 802e1ea:	b002      	add	sp, #8
 802e1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e1f0:	b004      	add	sp, #16
 802e1f2:	4770      	bx	lr
 802e1f4:	20000080 	.word	0x20000080

0802e1f8 <_puts_r>:
 802e1f8:	b570      	push	{r4, r5, r6, lr}
 802e1fa:	460e      	mov	r6, r1
 802e1fc:	4605      	mov	r5, r0
 802e1fe:	b118      	cbz	r0, 802e208 <_puts_r+0x10>
 802e200:	6983      	ldr	r3, [r0, #24]
 802e202:	b90b      	cbnz	r3, 802e208 <_puts_r+0x10>
 802e204:	f000 fa78 	bl	802e6f8 <__sinit>
 802e208:	69ab      	ldr	r3, [r5, #24]
 802e20a:	68ac      	ldr	r4, [r5, #8]
 802e20c:	b913      	cbnz	r3, 802e214 <_puts_r+0x1c>
 802e20e:	4628      	mov	r0, r5
 802e210:	f000 fa72 	bl	802e6f8 <__sinit>
 802e214:	4b2c      	ldr	r3, [pc, #176]	; (802e2c8 <_puts_r+0xd0>)
 802e216:	429c      	cmp	r4, r3
 802e218:	d120      	bne.n	802e25c <_puts_r+0x64>
 802e21a:	686c      	ldr	r4, [r5, #4]
 802e21c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e21e:	07db      	lsls	r3, r3, #31
 802e220:	d405      	bmi.n	802e22e <_puts_r+0x36>
 802e222:	89a3      	ldrh	r3, [r4, #12]
 802e224:	0598      	lsls	r0, r3, #22
 802e226:	d402      	bmi.n	802e22e <_puts_r+0x36>
 802e228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e22a:	f000 fb03 	bl	802e834 <__retarget_lock_acquire_recursive>
 802e22e:	89a3      	ldrh	r3, [r4, #12]
 802e230:	0719      	lsls	r1, r3, #28
 802e232:	d51d      	bpl.n	802e270 <_puts_r+0x78>
 802e234:	6923      	ldr	r3, [r4, #16]
 802e236:	b1db      	cbz	r3, 802e270 <_puts_r+0x78>
 802e238:	3e01      	subs	r6, #1
 802e23a:	68a3      	ldr	r3, [r4, #8]
 802e23c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802e240:	3b01      	subs	r3, #1
 802e242:	60a3      	str	r3, [r4, #8]
 802e244:	bb39      	cbnz	r1, 802e296 <_puts_r+0x9e>
 802e246:	2b00      	cmp	r3, #0
 802e248:	da38      	bge.n	802e2bc <_puts_r+0xc4>
 802e24a:	4622      	mov	r2, r4
 802e24c:	210a      	movs	r1, #10
 802e24e:	4628      	mov	r0, r5
 802e250:	f000 f878 	bl	802e344 <__swbuf_r>
 802e254:	3001      	adds	r0, #1
 802e256:	d011      	beq.n	802e27c <_puts_r+0x84>
 802e258:	250a      	movs	r5, #10
 802e25a:	e011      	b.n	802e280 <_puts_r+0x88>
 802e25c:	4b1b      	ldr	r3, [pc, #108]	; (802e2cc <_puts_r+0xd4>)
 802e25e:	429c      	cmp	r4, r3
 802e260:	d101      	bne.n	802e266 <_puts_r+0x6e>
 802e262:	68ac      	ldr	r4, [r5, #8]
 802e264:	e7da      	b.n	802e21c <_puts_r+0x24>
 802e266:	4b1a      	ldr	r3, [pc, #104]	; (802e2d0 <_puts_r+0xd8>)
 802e268:	429c      	cmp	r4, r3
 802e26a:	bf08      	it	eq
 802e26c:	68ec      	ldreq	r4, [r5, #12]
 802e26e:	e7d5      	b.n	802e21c <_puts_r+0x24>
 802e270:	4621      	mov	r1, r4
 802e272:	4628      	mov	r0, r5
 802e274:	f000 f8b8 	bl	802e3e8 <__swsetup_r>
 802e278:	2800      	cmp	r0, #0
 802e27a:	d0dd      	beq.n	802e238 <_puts_r+0x40>
 802e27c:	f04f 35ff 	mov.w	r5, #4294967295
 802e280:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e282:	07da      	lsls	r2, r3, #31
 802e284:	d405      	bmi.n	802e292 <_puts_r+0x9a>
 802e286:	89a3      	ldrh	r3, [r4, #12]
 802e288:	059b      	lsls	r3, r3, #22
 802e28a:	d402      	bmi.n	802e292 <_puts_r+0x9a>
 802e28c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e28e:	f000 fad2 	bl	802e836 <__retarget_lock_release_recursive>
 802e292:	4628      	mov	r0, r5
 802e294:	bd70      	pop	{r4, r5, r6, pc}
 802e296:	2b00      	cmp	r3, #0
 802e298:	da04      	bge.n	802e2a4 <_puts_r+0xac>
 802e29a:	69a2      	ldr	r2, [r4, #24]
 802e29c:	429a      	cmp	r2, r3
 802e29e:	dc06      	bgt.n	802e2ae <_puts_r+0xb6>
 802e2a0:	290a      	cmp	r1, #10
 802e2a2:	d004      	beq.n	802e2ae <_puts_r+0xb6>
 802e2a4:	6823      	ldr	r3, [r4, #0]
 802e2a6:	1c5a      	adds	r2, r3, #1
 802e2a8:	6022      	str	r2, [r4, #0]
 802e2aa:	7019      	strb	r1, [r3, #0]
 802e2ac:	e7c5      	b.n	802e23a <_puts_r+0x42>
 802e2ae:	4622      	mov	r2, r4
 802e2b0:	4628      	mov	r0, r5
 802e2b2:	f000 f847 	bl	802e344 <__swbuf_r>
 802e2b6:	3001      	adds	r0, #1
 802e2b8:	d1bf      	bne.n	802e23a <_puts_r+0x42>
 802e2ba:	e7df      	b.n	802e27c <_puts_r+0x84>
 802e2bc:	6823      	ldr	r3, [r4, #0]
 802e2be:	250a      	movs	r5, #10
 802e2c0:	1c5a      	adds	r2, r3, #1
 802e2c2:	6022      	str	r2, [r4, #0]
 802e2c4:	701d      	strb	r5, [r3, #0]
 802e2c6:	e7db      	b.n	802e280 <_puts_r+0x88>
 802e2c8:	08031990 	.word	0x08031990
 802e2cc:	080319b0 	.word	0x080319b0
 802e2d0:	08031970 	.word	0x08031970

0802e2d4 <puts>:
 802e2d4:	4b02      	ldr	r3, [pc, #8]	; (802e2e0 <puts+0xc>)
 802e2d6:	4601      	mov	r1, r0
 802e2d8:	6818      	ldr	r0, [r3, #0]
 802e2da:	f7ff bf8d 	b.w	802e1f8 <_puts_r>
 802e2de:	bf00      	nop
 802e2e0:	20000080 	.word	0x20000080

0802e2e4 <_sbrk_r>:
 802e2e4:	b538      	push	{r3, r4, r5, lr}
 802e2e6:	4d06      	ldr	r5, [pc, #24]	; (802e300 <_sbrk_r+0x1c>)
 802e2e8:	2300      	movs	r3, #0
 802e2ea:	4604      	mov	r4, r0
 802e2ec:	4608      	mov	r0, r1
 802e2ee:	602b      	str	r3, [r5, #0]
 802e2f0:	f7f3 fecc 	bl	802208c <_sbrk>
 802e2f4:	1c43      	adds	r3, r0, #1
 802e2f6:	d102      	bne.n	802e2fe <_sbrk_r+0x1a>
 802e2f8:	682b      	ldr	r3, [r5, #0]
 802e2fa:	b103      	cbz	r3, 802e2fe <_sbrk_r+0x1a>
 802e2fc:	6023      	str	r3, [r4, #0]
 802e2fe:	bd38      	pop	{r3, r4, r5, pc}
 802e300:	20001200 	.word	0x20001200

0802e304 <siprintf>:
 802e304:	b40e      	push	{r1, r2, r3}
 802e306:	b500      	push	{lr}
 802e308:	b09c      	sub	sp, #112	; 0x70
 802e30a:	ab1d      	add	r3, sp, #116	; 0x74
 802e30c:	9002      	str	r0, [sp, #8]
 802e30e:	9006      	str	r0, [sp, #24]
 802e310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802e314:	4809      	ldr	r0, [pc, #36]	; (802e33c <siprintf+0x38>)
 802e316:	9107      	str	r1, [sp, #28]
 802e318:	9104      	str	r1, [sp, #16]
 802e31a:	4909      	ldr	r1, [pc, #36]	; (802e340 <siprintf+0x3c>)
 802e31c:	f853 2b04 	ldr.w	r2, [r3], #4
 802e320:	9105      	str	r1, [sp, #20]
 802e322:	6800      	ldr	r0, [r0, #0]
 802e324:	9301      	str	r3, [sp, #4]
 802e326:	a902      	add	r1, sp, #8
 802e328:	f000 fb54 	bl	802e9d4 <_svfiprintf_r>
 802e32c:	9b02      	ldr	r3, [sp, #8]
 802e32e:	2200      	movs	r2, #0
 802e330:	701a      	strb	r2, [r3, #0]
 802e332:	b01c      	add	sp, #112	; 0x70
 802e334:	f85d eb04 	ldr.w	lr, [sp], #4
 802e338:	b003      	add	sp, #12
 802e33a:	4770      	bx	lr
 802e33c:	20000080 	.word	0x20000080
 802e340:	ffff0208 	.word	0xffff0208

0802e344 <__swbuf_r>:
 802e344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e346:	460e      	mov	r6, r1
 802e348:	4614      	mov	r4, r2
 802e34a:	4605      	mov	r5, r0
 802e34c:	b118      	cbz	r0, 802e356 <__swbuf_r+0x12>
 802e34e:	6983      	ldr	r3, [r0, #24]
 802e350:	b90b      	cbnz	r3, 802e356 <__swbuf_r+0x12>
 802e352:	f000 f9d1 	bl	802e6f8 <__sinit>
 802e356:	4b21      	ldr	r3, [pc, #132]	; (802e3dc <__swbuf_r+0x98>)
 802e358:	429c      	cmp	r4, r3
 802e35a:	d12b      	bne.n	802e3b4 <__swbuf_r+0x70>
 802e35c:	686c      	ldr	r4, [r5, #4]
 802e35e:	69a3      	ldr	r3, [r4, #24]
 802e360:	60a3      	str	r3, [r4, #8]
 802e362:	89a3      	ldrh	r3, [r4, #12]
 802e364:	071a      	lsls	r2, r3, #28
 802e366:	d52f      	bpl.n	802e3c8 <__swbuf_r+0x84>
 802e368:	6923      	ldr	r3, [r4, #16]
 802e36a:	b36b      	cbz	r3, 802e3c8 <__swbuf_r+0x84>
 802e36c:	6923      	ldr	r3, [r4, #16]
 802e36e:	6820      	ldr	r0, [r4, #0]
 802e370:	1ac0      	subs	r0, r0, r3
 802e372:	6963      	ldr	r3, [r4, #20]
 802e374:	b2f6      	uxtb	r6, r6
 802e376:	4283      	cmp	r3, r0
 802e378:	4637      	mov	r7, r6
 802e37a:	dc04      	bgt.n	802e386 <__swbuf_r+0x42>
 802e37c:	4621      	mov	r1, r4
 802e37e:	4628      	mov	r0, r5
 802e380:	f000 f926 	bl	802e5d0 <_fflush_r>
 802e384:	bb30      	cbnz	r0, 802e3d4 <__swbuf_r+0x90>
 802e386:	68a3      	ldr	r3, [r4, #8]
 802e388:	3b01      	subs	r3, #1
 802e38a:	60a3      	str	r3, [r4, #8]
 802e38c:	6823      	ldr	r3, [r4, #0]
 802e38e:	1c5a      	adds	r2, r3, #1
 802e390:	6022      	str	r2, [r4, #0]
 802e392:	701e      	strb	r6, [r3, #0]
 802e394:	6963      	ldr	r3, [r4, #20]
 802e396:	3001      	adds	r0, #1
 802e398:	4283      	cmp	r3, r0
 802e39a:	d004      	beq.n	802e3a6 <__swbuf_r+0x62>
 802e39c:	89a3      	ldrh	r3, [r4, #12]
 802e39e:	07db      	lsls	r3, r3, #31
 802e3a0:	d506      	bpl.n	802e3b0 <__swbuf_r+0x6c>
 802e3a2:	2e0a      	cmp	r6, #10
 802e3a4:	d104      	bne.n	802e3b0 <__swbuf_r+0x6c>
 802e3a6:	4621      	mov	r1, r4
 802e3a8:	4628      	mov	r0, r5
 802e3aa:	f000 f911 	bl	802e5d0 <_fflush_r>
 802e3ae:	b988      	cbnz	r0, 802e3d4 <__swbuf_r+0x90>
 802e3b0:	4638      	mov	r0, r7
 802e3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e3b4:	4b0a      	ldr	r3, [pc, #40]	; (802e3e0 <__swbuf_r+0x9c>)
 802e3b6:	429c      	cmp	r4, r3
 802e3b8:	d101      	bne.n	802e3be <__swbuf_r+0x7a>
 802e3ba:	68ac      	ldr	r4, [r5, #8]
 802e3bc:	e7cf      	b.n	802e35e <__swbuf_r+0x1a>
 802e3be:	4b09      	ldr	r3, [pc, #36]	; (802e3e4 <__swbuf_r+0xa0>)
 802e3c0:	429c      	cmp	r4, r3
 802e3c2:	bf08      	it	eq
 802e3c4:	68ec      	ldreq	r4, [r5, #12]
 802e3c6:	e7ca      	b.n	802e35e <__swbuf_r+0x1a>
 802e3c8:	4621      	mov	r1, r4
 802e3ca:	4628      	mov	r0, r5
 802e3cc:	f000 f80c 	bl	802e3e8 <__swsetup_r>
 802e3d0:	2800      	cmp	r0, #0
 802e3d2:	d0cb      	beq.n	802e36c <__swbuf_r+0x28>
 802e3d4:	f04f 37ff 	mov.w	r7, #4294967295
 802e3d8:	e7ea      	b.n	802e3b0 <__swbuf_r+0x6c>
 802e3da:	bf00      	nop
 802e3dc:	08031990 	.word	0x08031990
 802e3e0:	080319b0 	.word	0x080319b0
 802e3e4:	08031970 	.word	0x08031970

0802e3e8 <__swsetup_r>:
 802e3e8:	4b32      	ldr	r3, [pc, #200]	; (802e4b4 <__swsetup_r+0xcc>)
 802e3ea:	b570      	push	{r4, r5, r6, lr}
 802e3ec:	681d      	ldr	r5, [r3, #0]
 802e3ee:	4606      	mov	r6, r0
 802e3f0:	460c      	mov	r4, r1
 802e3f2:	b125      	cbz	r5, 802e3fe <__swsetup_r+0x16>
 802e3f4:	69ab      	ldr	r3, [r5, #24]
 802e3f6:	b913      	cbnz	r3, 802e3fe <__swsetup_r+0x16>
 802e3f8:	4628      	mov	r0, r5
 802e3fa:	f000 f97d 	bl	802e6f8 <__sinit>
 802e3fe:	4b2e      	ldr	r3, [pc, #184]	; (802e4b8 <__swsetup_r+0xd0>)
 802e400:	429c      	cmp	r4, r3
 802e402:	d10f      	bne.n	802e424 <__swsetup_r+0x3c>
 802e404:	686c      	ldr	r4, [r5, #4]
 802e406:	89a3      	ldrh	r3, [r4, #12]
 802e408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e40c:	0719      	lsls	r1, r3, #28
 802e40e:	d42c      	bmi.n	802e46a <__swsetup_r+0x82>
 802e410:	06dd      	lsls	r5, r3, #27
 802e412:	d411      	bmi.n	802e438 <__swsetup_r+0x50>
 802e414:	2309      	movs	r3, #9
 802e416:	6033      	str	r3, [r6, #0]
 802e418:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e41c:	81a3      	strh	r3, [r4, #12]
 802e41e:	f04f 30ff 	mov.w	r0, #4294967295
 802e422:	e03e      	b.n	802e4a2 <__swsetup_r+0xba>
 802e424:	4b25      	ldr	r3, [pc, #148]	; (802e4bc <__swsetup_r+0xd4>)
 802e426:	429c      	cmp	r4, r3
 802e428:	d101      	bne.n	802e42e <__swsetup_r+0x46>
 802e42a:	68ac      	ldr	r4, [r5, #8]
 802e42c:	e7eb      	b.n	802e406 <__swsetup_r+0x1e>
 802e42e:	4b24      	ldr	r3, [pc, #144]	; (802e4c0 <__swsetup_r+0xd8>)
 802e430:	429c      	cmp	r4, r3
 802e432:	bf08      	it	eq
 802e434:	68ec      	ldreq	r4, [r5, #12]
 802e436:	e7e6      	b.n	802e406 <__swsetup_r+0x1e>
 802e438:	0758      	lsls	r0, r3, #29
 802e43a:	d512      	bpl.n	802e462 <__swsetup_r+0x7a>
 802e43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e43e:	b141      	cbz	r1, 802e452 <__swsetup_r+0x6a>
 802e440:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e444:	4299      	cmp	r1, r3
 802e446:	d002      	beq.n	802e44e <__swsetup_r+0x66>
 802e448:	4630      	mov	r0, r6
 802e44a:	f7ff fddd 	bl	802e008 <_free_r>
 802e44e:	2300      	movs	r3, #0
 802e450:	6363      	str	r3, [r4, #52]	; 0x34
 802e452:	89a3      	ldrh	r3, [r4, #12]
 802e454:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e458:	81a3      	strh	r3, [r4, #12]
 802e45a:	2300      	movs	r3, #0
 802e45c:	6063      	str	r3, [r4, #4]
 802e45e:	6923      	ldr	r3, [r4, #16]
 802e460:	6023      	str	r3, [r4, #0]
 802e462:	89a3      	ldrh	r3, [r4, #12]
 802e464:	f043 0308 	orr.w	r3, r3, #8
 802e468:	81a3      	strh	r3, [r4, #12]
 802e46a:	6923      	ldr	r3, [r4, #16]
 802e46c:	b94b      	cbnz	r3, 802e482 <__swsetup_r+0x9a>
 802e46e:	89a3      	ldrh	r3, [r4, #12]
 802e470:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e478:	d003      	beq.n	802e482 <__swsetup_r+0x9a>
 802e47a:	4621      	mov	r1, r4
 802e47c:	4630      	mov	r0, r6
 802e47e:	f000 fa01 	bl	802e884 <__smakebuf_r>
 802e482:	89a0      	ldrh	r0, [r4, #12]
 802e484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e488:	f010 0301 	ands.w	r3, r0, #1
 802e48c:	d00a      	beq.n	802e4a4 <__swsetup_r+0xbc>
 802e48e:	2300      	movs	r3, #0
 802e490:	60a3      	str	r3, [r4, #8]
 802e492:	6963      	ldr	r3, [r4, #20]
 802e494:	425b      	negs	r3, r3
 802e496:	61a3      	str	r3, [r4, #24]
 802e498:	6923      	ldr	r3, [r4, #16]
 802e49a:	b943      	cbnz	r3, 802e4ae <__swsetup_r+0xc6>
 802e49c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e4a0:	d1ba      	bne.n	802e418 <__swsetup_r+0x30>
 802e4a2:	bd70      	pop	{r4, r5, r6, pc}
 802e4a4:	0781      	lsls	r1, r0, #30
 802e4a6:	bf58      	it	pl
 802e4a8:	6963      	ldrpl	r3, [r4, #20]
 802e4aa:	60a3      	str	r3, [r4, #8]
 802e4ac:	e7f4      	b.n	802e498 <__swsetup_r+0xb0>
 802e4ae:	2000      	movs	r0, #0
 802e4b0:	e7f7      	b.n	802e4a2 <__swsetup_r+0xba>
 802e4b2:	bf00      	nop
 802e4b4:	20000080 	.word	0x20000080
 802e4b8:	08031990 	.word	0x08031990
 802e4bc:	080319b0 	.word	0x080319b0
 802e4c0:	08031970 	.word	0x08031970

0802e4c4 <__sflush_r>:
 802e4c4:	898a      	ldrh	r2, [r1, #12]
 802e4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e4ca:	4605      	mov	r5, r0
 802e4cc:	0710      	lsls	r0, r2, #28
 802e4ce:	460c      	mov	r4, r1
 802e4d0:	d458      	bmi.n	802e584 <__sflush_r+0xc0>
 802e4d2:	684b      	ldr	r3, [r1, #4]
 802e4d4:	2b00      	cmp	r3, #0
 802e4d6:	dc05      	bgt.n	802e4e4 <__sflush_r+0x20>
 802e4d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e4da:	2b00      	cmp	r3, #0
 802e4dc:	dc02      	bgt.n	802e4e4 <__sflush_r+0x20>
 802e4de:	2000      	movs	r0, #0
 802e4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e4e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e4e6:	2e00      	cmp	r6, #0
 802e4e8:	d0f9      	beq.n	802e4de <__sflush_r+0x1a>
 802e4ea:	2300      	movs	r3, #0
 802e4ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e4f0:	682f      	ldr	r7, [r5, #0]
 802e4f2:	602b      	str	r3, [r5, #0]
 802e4f4:	d032      	beq.n	802e55c <__sflush_r+0x98>
 802e4f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e4f8:	89a3      	ldrh	r3, [r4, #12]
 802e4fa:	075a      	lsls	r2, r3, #29
 802e4fc:	d505      	bpl.n	802e50a <__sflush_r+0x46>
 802e4fe:	6863      	ldr	r3, [r4, #4]
 802e500:	1ac0      	subs	r0, r0, r3
 802e502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e504:	b10b      	cbz	r3, 802e50a <__sflush_r+0x46>
 802e506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e508:	1ac0      	subs	r0, r0, r3
 802e50a:	2300      	movs	r3, #0
 802e50c:	4602      	mov	r2, r0
 802e50e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e510:	6a21      	ldr	r1, [r4, #32]
 802e512:	4628      	mov	r0, r5
 802e514:	47b0      	blx	r6
 802e516:	1c43      	adds	r3, r0, #1
 802e518:	89a3      	ldrh	r3, [r4, #12]
 802e51a:	d106      	bne.n	802e52a <__sflush_r+0x66>
 802e51c:	6829      	ldr	r1, [r5, #0]
 802e51e:	291d      	cmp	r1, #29
 802e520:	d82c      	bhi.n	802e57c <__sflush_r+0xb8>
 802e522:	4a2a      	ldr	r2, [pc, #168]	; (802e5cc <__sflush_r+0x108>)
 802e524:	40ca      	lsrs	r2, r1
 802e526:	07d6      	lsls	r6, r2, #31
 802e528:	d528      	bpl.n	802e57c <__sflush_r+0xb8>
 802e52a:	2200      	movs	r2, #0
 802e52c:	6062      	str	r2, [r4, #4]
 802e52e:	04d9      	lsls	r1, r3, #19
 802e530:	6922      	ldr	r2, [r4, #16]
 802e532:	6022      	str	r2, [r4, #0]
 802e534:	d504      	bpl.n	802e540 <__sflush_r+0x7c>
 802e536:	1c42      	adds	r2, r0, #1
 802e538:	d101      	bne.n	802e53e <__sflush_r+0x7a>
 802e53a:	682b      	ldr	r3, [r5, #0]
 802e53c:	b903      	cbnz	r3, 802e540 <__sflush_r+0x7c>
 802e53e:	6560      	str	r0, [r4, #84]	; 0x54
 802e540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e542:	602f      	str	r7, [r5, #0]
 802e544:	2900      	cmp	r1, #0
 802e546:	d0ca      	beq.n	802e4de <__sflush_r+0x1a>
 802e548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e54c:	4299      	cmp	r1, r3
 802e54e:	d002      	beq.n	802e556 <__sflush_r+0x92>
 802e550:	4628      	mov	r0, r5
 802e552:	f7ff fd59 	bl	802e008 <_free_r>
 802e556:	2000      	movs	r0, #0
 802e558:	6360      	str	r0, [r4, #52]	; 0x34
 802e55a:	e7c1      	b.n	802e4e0 <__sflush_r+0x1c>
 802e55c:	6a21      	ldr	r1, [r4, #32]
 802e55e:	2301      	movs	r3, #1
 802e560:	4628      	mov	r0, r5
 802e562:	47b0      	blx	r6
 802e564:	1c41      	adds	r1, r0, #1
 802e566:	d1c7      	bne.n	802e4f8 <__sflush_r+0x34>
 802e568:	682b      	ldr	r3, [r5, #0]
 802e56a:	2b00      	cmp	r3, #0
 802e56c:	d0c4      	beq.n	802e4f8 <__sflush_r+0x34>
 802e56e:	2b1d      	cmp	r3, #29
 802e570:	d001      	beq.n	802e576 <__sflush_r+0xb2>
 802e572:	2b16      	cmp	r3, #22
 802e574:	d101      	bne.n	802e57a <__sflush_r+0xb6>
 802e576:	602f      	str	r7, [r5, #0]
 802e578:	e7b1      	b.n	802e4de <__sflush_r+0x1a>
 802e57a:	89a3      	ldrh	r3, [r4, #12]
 802e57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e580:	81a3      	strh	r3, [r4, #12]
 802e582:	e7ad      	b.n	802e4e0 <__sflush_r+0x1c>
 802e584:	690f      	ldr	r7, [r1, #16]
 802e586:	2f00      	cmp	r7, #0
 802e588:	d0a9      	beq.n	802e4de <__sflush_r+0x1a>
 802e58a:	0793      	lsls	r3, r2, #30
 802e58c:	680e      	ldr	r6, [r1, #0]
 802e58e:	bf08      	it	eq
 802e590:	694b      	ldreq	r3, [r1, #20]
 802e592:	600f      	str	r7, [r1, #0]
 802e594:	bf18      	it	ne
 802e596:	2300      	movne	r3, #0
 802e598:	eba6 0807 	sub.w	r8, r6, r7
 802e59c:	608b      	str	r3, [r1, #8]
 802e59e:	f1b8 0f00 	cmp.w	r8, #0
 802e5a2:	dd9c      	ble.n	802e4de <__sflush_r+0x1a>
 802e5a4:	6a21      	ldr	r1, [r4, #32]
 802e5a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e5a8:	4643      	mov	r3, r8
 802e5aa:	463a      	mov	r2, r7
 802e5ac:	4628      	mov	r0, r5
 802e5ae:	47b0      	blx	r6
 802e5b0:	2800      	cmp	r0, #0
 802e5b2:	dc06      	bgt.n	802e5c2 <__sflush_r+0xfe>
 802e5b4:	89a3      	ldrh	r3, [r4, #12]
 802e5b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e5ba:	81a3      	strh	r3, [r4, #12]
 802e5bc:	f04f 30ff 	mov.w	r0, #4294967295
 802e5c0:	e78e      	b.n	802e4e0 <__sflush_r+0x1c>
 802e5c2:	4407      	add	r7, r0
 802e5c4:	eba8 0800 	sub.w	r8, r8, r0
 802e5c8:	e7e9      	b.n	802e59e <__sflush_r+0xda>
 802e5ca:	bf00      	nop
 802e5cc:	20400001 	.word	0x20400001

0802e5d0 <_fflush_r>:
 802e5d0:	b538      	push	{r3, r4, r5, lr}
 802e5d2:	690b      	ldr	r3, [r1, #16]
 802e5d4:	4605      	mov	r5, r0
 802e5d6:	460c      	mov	r4, r1
 802e5d8:	b913      	cbnz	r3, 802e5e0 <_fflush_r+0x10>
 802e5da:	2500      	movs	r5, #0
 802e5dc:	4628      	mov	r0, r5
 802e5de:	bd38      	pop	{r3, r4, r5, pc}
 802e5e0:	b118      	cbz	r0, 802e5ea <_fflush_r+0x1a>
 802e5e2:	6983      	ldr	r3, [r0, #24]
 802e5e4:	b90b      	cbnz	r3, 802e5ea <_fflush_r+0x1a>
 802e5e6:	f000 f887 	bl	802e6f8 <__sinit>
 802e5ea:	4b14      	ldr	r3, [pc, #80]	; (802e63c <_fflush_r+0x6c>)
 802e5ec:	429c      	cmp	r4, r3
 802e5ee:	d11b      	bne.n	802e628 <_fflush_r+0x58>
 802e5f0:	686c      	ldr	r4, [r5, #4]
 802e5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e5f6:	2b00      	cmp	r3, #0
 802e5f8:	d0ef      	beq.n	802e5da <_fflush_r+0xa>
 802e5fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e5fc:	07d0      	lsls	r0, r2, #31
 802e5fe:	d404      	bmi.n	802e60a <_fflush_r+0x3a>
 802e600:	0599      	lsls	r1, r3, #22
 802e602:	d402      	bmi.n	802e60a <_fflush_r+0x3a>
 802e604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e606:	f000 f915 	bl	802e834 <__retarget_lock_acquire_recursive>
 802e60a:	4628      	mov	r0, r5
 802e60c:	4621      	mov	r1, r4
 802e60e:	f7ff ff59 	bl	802e4c4 <__sflush_r>
 802e612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e614:	07da      	lsls	r2, r3, #31
 802e616:	4605      	mov	r5, r0
 802e618:	d4e0      	bmi.n	802e5dc <_fflush_r+0xc>
 802e61a:	89a3      	ldrh	r3, [r4, #12]
 802e61c:	059b      	lsls	r3, r3, #22
 802e61e:	d4dd      	bmi.n	802e5dc <_fflush_r+0xc>
 802e620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e622:	f000 f908 	bl	802e836 <__retarget_lock_release_recursive>
 802e626:	e7d9      	b.n	802e5dc <_fflush_r+0xc>
 802e628:	4b05      	ldr	r3, [pc, #20]	; (802e640 <_fflush_r+0x70>)
 802e62a:	429c      	cmp	r4, r3
 802e62c:	d101      	bne.n	802e632 <_fflush_r+0x62>
 802e62e:	68ac      	ldr	r4, [r5, #8]
 802e630:	e7df      	b.n	802e5f2 <_fflush_r+0x22>
 802e632:	4b04      	ldr	r3, [pc, #16]	; (802e644 <_fflush_r+0x74>)
 802e634:	429c      	cmp	r4, r3
 802e636:	bf08      	it	eq
 802e638:	68ec      	ldreq	r4, [r5, #12]
 802e63a:	e7da      	b.n	802e5f2 <_fflush_r+0x22>
 802e63c:	08031990 	.word	0x08031990
 802e640:	080319b0 	.word	0x080319b0
 802e644:	08031970 	.word	0x08031970

0802e648 <std>:
 802e648:	2300      	movs	r3, #0
 802e64a:	b510      	push	{r4, lr}
 802e64c:	4604      	mov	r4, r0
 802e64e:	e9c0 3300 	strd	r3, r3, [r0]
 802e652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802e656:	6083      	str	r3, [r0, #8]
 802e658:	8181      	strh	r1, [r0, #12]
 802e65a:	6643      	str	r3, [r0, #100]	; 0x64
 802e65c:	81c2      	strh	r2, [r0, #14]
 802e65e:	6183      	str	r3, [r0, #24]
 802e660:	4619      	mov	r1, r3
 802e662:	2208      	movs	r2, #8
 802e664:	305c      	adds	r0, #92	; 0x5c
 802e666:	f7ff fcc7 	bl	802dff8 <memset>
 802e66a:	4b05      	ldr	r3, [pc, #20]	; (802e680 <std+0x38>)
 802e66c:	6263      	str	r3, [r4, #36]	; 0x24
 802e66e:	4b05      	ldr	r3, [pc, #20]	; (802e684 <std+0x3c>)
 802e670:	62a3      	str	r3, [r4, #40]	; 0x28
 802e672:	4b05      	ldr	r3, [pc, #20]	; (802e688 <std+0x40>)
 802e674:	62e3      	str	r3, [r4, #44]	; 0x2c
 802e676:	4b05      	ldr	r3, [pc, #20]	; (802e68c <std+0x44>)
 802e678:	6224      	str	r4, [r4, #32]
 802e67a:	6323      	str	r3, [r4, #48]	; 0x30
 802e67c:	bd10      	pop	{r4, pc}
 802e67e:	bf00      	nop
 802e680:	0802f1b1 	.word	0x0802f1b1
 802e684:	0802f1d3 	.word	0x0802f1d3
 802e688:	0802f20b 	.word	0x0802f20b
 802e68c:	0802f22f 	.word	0x0802f22f

0802e690 <_cleanup_r>:
 802e690:	4901      	ldr	r1, [pc, #4]	; (802e698 <_cleanup_r+0x8>)
 802e692:	f000 b8af 	b.w	802e7f4 <_fwalk_reent>
 802e696:	bf00      	nop
 802e698:	0802e5d1 	.word	0x0802e5d1

0802e69c <__sfmoreglue>:
 802e69c:	b570      	push	{r4, r5, r6, lr}
 802e69e:	2268      	movs	r2, #104	; 0x68
 802e6a0:	1e4d      	subs	r5, r1, #1
 802e6a2:	4355      	muls	r5, r2
 802e6a4:	460e      	mov	r6, r1
 802e6a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802e6aa:	f7ff fd19 	bl	802e0e0 <_malloc_r>
 802e6ae:	4604      	mov	r4, r0
 802e6b0:	b140      	cbz	r0, 802e6c4 <__sfmoreglue+0x28>
 802e6b2:	2100      	movs	r1, #0
 802e6b4:	e9c0 1600 	strd	r1, r6, [r0]
 802e6b8:	300c      	adds	r0, #12
 802e6ba:	60a0      	str	r0, [r4, #8]
 802e6bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802e6c0:	f7ff fc9a 	bl	802dff8 <memset>
 802e6c4:	4620      	mov	r0, r4
 802e6c6:	bd70      	pop	{r4, r5, r6, pc}

0802e6c8 <__sfp_lock_acquire>:
 802e6c8:	4801      	ldr	r0, [pc, #4]	; (802e6d0 <__sfp_lock_acquire+0x8>)
 802e6ca:	f000 b8b3 	b.w	802e834 <__retarget_lock_acquire_recursive>
 802e6ce:	bf00      	nop
 802e6d0:	200011fd 	.word	0x200011fd

0802e6d4 <__sfp_lock_release>:
 802e6d4:	4801      	ldr	r0, [pc, #4]	; (802e6dc <__sfp_lock_release+0x8>)
 802e6d6:	f000 b8ae 	b.w	802e836 <__retarget_lock_release_recursive>
 802e6da:	bf00      	nop
 802e6dc:	200011fd 	.word	0x200011fd

0802e6e0 <__sinit_lock_acquire>:
 802e6e0:	4801      	ldr	r0, [pc, #4]	; (802e6e8 <__sinit_lock_acquire+0x8>)
 802e6e2:	f000 b8a7 	b.w	802e834 <__retarget_lock_acquire_recursive>
 802e6e6:	bf00      	nop
 802e6e8:	200011fe 	.word	0x200011fe

0802e6ec <__sinit_lock_release>:
 802e6ec:	4801      	ldr	r0, [pc, #4]	; (802e6f4 <__sinit_lock_release+0x8>)
 802e6ee:	f000 b8a2 	b.w	802e836 <__retarget_lock_release_recursive>
 802e6f2:	bf00      	nop
 802e6f4:	200011fe 	.word	0x200011fe

0802e6f8 <__sinit>:
 802e6f8:	b510      	push	{r4, lr}
 802e6fa:	4604      	mov	r4, r0
 802e6fc:	f7ff fff0 	bl	802e6e0 <__sinit_lock_acquire>
 802e700:	69a3      	ldr	r3, [r4, #24]
 802e702:	b11b      	cbz	r3, 802e70c <__sinit+0x14>
 802e704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802e708:	f7ff bff0 	b.w	802e6ec <__sinit_lock_release>
 802e70c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802e710:	6523      	str	r3, [r4, #80]	; 0x50
 802e712:	4b13      	ldr	r3, [pc, #76]	; (802e760 <__sinit+0x68>)
 802e714:	4a13      	ldr	r2, [pc, #76]	; (802e764 <__sinit+0x6c>)
 802e716:	681b      	ldr	r3, [r3, #0]
 802e718:	62a2      	str	r2, [r4, #40]	; 0x28
 802e71a:	42a3      	cmp	r3, r4
 802e71c:	bf04      	itt	eq
 802e71e:	2301      	moveq	r3, #1
 802e720:	61a3      	streq	r3, [r4, #24]
 802e722:	4620      	mov	r0, r4
 802e724:	f000 f820 	bl	802e768 <__sfp>
 802e728:	6060      	str	r0, [r4, #4]
 802e72a:	4620      	mov	r0, r4
 802e72c:	f000 f81c 	bl	802e768 <__sfp>
 802e730:	60a0      	str	r0, [r4, #8]
 802e732:	4620      	mov	r0, r4
 802e734:	f000 f818 	bl	802e768 <__sfp>
 802e738:	2200      	movs	r2, #0
 802e73a:	60e0      	str	r0, [r4, #12]
 802e73c:	2104      	movs	r1, #4
 802e73e:	6860      	ldr	r0, [r4, #4]
 802e740:	f7ff ff82 	bl	802e648 <std>
 802e744:	68a0      	ldr	r0, [r4, #8]
 802e746:	2201      	movs	r2, #1
 802e748:	2109      	movs	r1, #9
 802e74a:	f7ff ff7d 	bl	802e648 <std>
 802e74e:	68e0      	ldr	r0, [r4, #12]
 802e750:	2202      	movs	r2, #2
 802e752:	2112      	movs	r1, #18
 802e754:	f7ff ff78 	bl	802e648 <std>
 802e758:	2301      	movs	r3, #1
 802e75a:	61a3      	str	r3, [r4, #24]
 802e75c:	e7d2      	b.n	802e704 <__sinit+0xc>
 802e75e:	bf00      	nop
 802e760:	0803196c 	.word	0x0803196c
 802e764:	0802e691 	.word	0x0802e691

0802e768 <__sfp>:
 802e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e76a:	4607      	mov	r7, r0
 802e76c:	f7ff ffac 	bl	802e6c8 <__sfp_lock_acquire>
 802e770:	4b1e      	ldr	r3, [pc, #120]	; (802e7ec <__sfp+0x84>)
 802e772:	681e      	ldr	r6, [r3, #0]
 802e774:	69b3      	ldr	r3, [r6, #24]
 802e776:	b913      	cbnz	r3, 802e77e <__sfp+0x16>
 802e778:	4630      	mov	r0, r6
 802e77a:	f7ff ffbd 	bl	802e6f8 <__sinit>
 802e77e:	3648      	adds	r6, #72	; 0x48
 802e780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802e784:	3b01      	subs	r3, #1
 802e786:	d503      	bpl.n	802e790 <__sfp+0x28>
 802e788:	6833      	ldr	r3, [r6, #0]
 802e78a:	b30b      	cbz	r3, 802e7d0 <__sfp+0x68>
 802e78c:	6836      	ldr	r6, [r6, #0]
 802e78e:	e7f7      	b.n	802e780 <__sfp+0x18>
 802e790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802e794:	b9d5      	cbnz	r5, 802e7cc <__sfp+0x64>
 802e796:	4b16      	ldr	r3, [pc, #88]	; (802e7f0 <__sfp+0x88>)
 802e798:	60e3      	str	r3, [r4, #12]
 802e79a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802e79e:	6665      	str	r5, [r4, #100]	; 0x64
 802e7a0:	f000 f847 	bl	802e832 <__retarget_lock_init_recursive>
 802e7a4:	f7ff ff96 	bl	802e6d4 <__sfp_lock_release>
 802e7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802e7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802e7b0:	6025      	str	r5, [r4, #0]
 802e7b2:	61a5      	str	r5, [r4, #24]
 802e7b4:	2208      	movs	r2, #8
 802e7b6:	4629      	mov	r1, r5
 802e7b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802e7bc:	f7ff fc1c 	bl	802dff8 <memset>
 802e7c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802e7c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802e7c8:	4620      	mov	r0, r4
 802e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e7cc:	3468      	adds	r4, #104	; 0x68
 802e7ce:	e7d9      	b.n	802e784 <__sfp+0x1c>
 802e7d0:	2104      	movs	r1, #4
 802e7d2:	4638      	mov	r0, r7
 802e7d4:	f7ff ff62 	bl	802e69c <__sfmoreglue>
 802e7d8:	4604      	mov	r4, r0
 802e7da:	6030      	str	r0, [r6, #0]
 802e7dc:	2800      	cmp	r0, #0
 802e7de:	d1d5      	bne.n	802e78c <__sfp+0x24>
 802e7e0:	f7ff ff78 	bl	802e6d4 <__sfp_lock_release>
 802e7e4:	230c      	movs	r3, #12
 802e7e6:	603b      	str	r3, [r7, #0]
 802e7e8:	e7ee      	b.n	802e7c8 <__sfp+0x60>
 802e7ea:	bf00      	nop
 802e7ec:	0803196c 	.word	0x0803196c
 802e7f0:	ffff0001 	.word	0xffff0001

0802e7f4 <_fwalk_reent>:
 802e7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e7f8:	4606      	mov	r6, r0
 802e7fa:	4688      	mov	r8, r1
 802e7fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802e800:	2700      	movs	r7, #0
 802e802:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802e806:	f1b9 0901 	subs.w	r9, r9, #1
 802e80a:	d505      	bpl.n	802e818 <_fwalk_reent+0x24>
 802e80c:	6824      	ldr	r4, [r4, #0]
 802e80e:	2c00      	cmp	r4, #0
 802e810:	d1f7      	bne.n	802e802 <_fwalk_reent+0xe>
 802e812:	4638      	mov	r0, r7
 802e814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e818:	89ab      	ldrh	r3, [r5, #12]
 802e81a:	2b01      	cmp	r3, #1
 802e81c:	d907      	bls.n	802e82e <_fwalk_reent+0x3a>
 802e81e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802e822:	3301      	adds	r3, #1
 802e824:	d003      	beq.n	802e82e <_fwalk_reent+0x3a>
 802e826:	4629      	mov	r1, r5
 802e828:	4630      	mov	r0, r6
 802e82a:	47c0      	blx	r8
 802e82c:	4307      	orrs	r7, r0
 802e82e:	3568      	adds	r5, #104	; 0x68
 802e830:	e7e9      	b.n	802e806 <_fwalk_reent+0x12>

0802e832 <__retarget_lock_init_recursive>:
 802e832:	4770      	bx	lr

0802e834 <__retarget_lock_acquire_recursive>:
 802e834:	4770      	bx	lr

0802e836 <__retarget_lock_release_recursive>:
 802e836:	4770      	bx	lr

0802e838 <__swhatbuf_r>:
 802e838:	b570      	push	{r4, r5, r6, lr}
 802e83a:	460e      	mov	r6, r1
 802e83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e840:	2900      	cmp	r1, #0
 802e842:	b096      	sub	sp, #88	; 0x58
 802e844:	4614      	mov	r4, r2
 802e846:	461d      	mov	r5, r3
 802e848:	da08      	bge.n	802e85c <__swhatbuf_r+0x24>
 802e84a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e84e:	2200      	movs	r2, #0
 802e850:	602a      	str	r2, [r5, #0]
 802e852:	061a      	lsls	r2, r3, #24
 802e854:	d410      	bmi.n	802e878 <__swhatbuf_r+0x40>
 802e856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e85a:	e00e      	b.n	802e87a <__swhatbuf_r+0x42>
 802e85c:	466a      	mov	r2, sp
 802e85e:	f000 fd0d 	bl	802f27c <_fstat_r>
 802e862:	2800      	cmp	r0, #0
 802e864:	dbf1      	blt.n	802e84a <__swhatbuf_r+0x12>
 802e866:	9a01      	ldr	r2, [sp, #4]
 802e868:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e86c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e870:	425a      	negs	r2, r3
 802e872:	415a      	adcs	r2, r3
 802e874:	602a      	str	r2, [r5, #0]
 802e876:	e7ee      	b.n	802e856 <__swhatbuf_r+0x1e>
 802e878:	2340      	movs	r3, #64	; 0x40
 802e87a:	2000      	movs	r0, #0
 802e87c:	6023      	str	r3, [r4, #0]
 802e87e:	b016      	add	sp, #88	; 0x58
 802e880:	bd70      	pop	{r4, r5, r6, pc}
	...

0802e884 <__smakebuf_r>:
 802e884:	898b      	ldrh	r3, [r1, #12]
 802e886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802e888:	079d      	lsls	r5, r3, #30
 802e88a:	4606      	mov	r6, r0
 802e88c:	460c      	mov	r4, r1
 802e88e:	d507      	bpl.n	802e8a0 <__smakebuf_r+0x1c>
 802e890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802e894:	6023      	str	r3, [r4, #0]
 802e896:	6123      	str	r3, [r4, #16]
 802e898:	2301      	movs	r3, #1
 802e89a:	6163      	str	r3, [r4, #20]
 802e89c:	b002      	add	sp, #8
 802e89e:	bd70      	pop	{r4, r5, r6, pc}
 802e8a0:	ab01      	add	r3, sp, #4
 802e8a2:	466a      	mov	r2, sp
 802e8a4:	f7ff ffc8 	bl	802e838 <__swhatbuf_r>
 802e8a8:	9900      	ldr	r1, [sp, #0]
 802e8aa:	4605      	mov	r5, r0
 802e8ac:	4630      	mov	r0, r6
 802e8ae:	f7ff fc17 	bl	802e0e0 <_malloc_r>
 802e8b2:	b948      	cbnz	r0, 802e8c8 <__smakebuf_r+0x44>
 802e8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e8b8:	059a      	lsls	r2, r3, #22
 802e8ba:	d4ef      	bmi.n	802e89c <__smakebuf_r+0x18>
 802e8bc:	f023 0303 	bic.w	r3, r3, #3
 802e8c0:	f043 0302 	orr.w	r3, r3, #2
 802e8c4:	81a3      	strh	r3, [r4, #12]
 802e8c6:	e7e3      	b.n	802e890 <__smakebuf_r+0xc>
 802e8c8:	4b0d      	ldr	r3, [pc, #52]	; (802e900 <__smakebuf_r+0x7c>)
 802e8ca:	62b3      	str	r3, [r6, #40]	; 0x28
 802e8cc:	89a3      	ldrh	r3, [r4, #12]
 802e8ce:	6020      	str	r0, [r4, #0]
 802e8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e8d4:	81a3      	strh	r3, [r4, #12]
 802e8d6:	9b00      	ldr	r3, [sp, #0]
 802e8d8:	6163      	str	r3, [r4, #20]
 802e8da:	9b01      	ldr	r3, [sp, #4]
 802e8dc:	6120      	str	r0, [r4, #16]
 802e8de:	b15b      	cbz	r3, 802e8f8 <__smakebuf_r+0x74>
 802e8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e8e4:	4630      	mov	r0, r6
 802e8e6:	f000 fcdb 	bl	802f2a0 <_isatty_r>
 802e8ea:	b128      	cbz	r0, 802e8f8 <__smakebuf_r+0x74>
 802e8ec:	89a3      	ldrh	r3, [r4, #12]
 802e8ee:	f023 0303 	bic.w	r3, r3, #3
 802e8f2:	f043 0301 	orr.w	r3, r3, #1
 802e8f6:	81a3      	strh	r3, [r4, #12]
 802e8f8:	89a0      	ldrh	r0, [r4, #12]
 802e8fa:	4305      	orrs	r5, r0
 802e8fc:	81a5      	strh	r5, [r4, #12]
 802e8fe:	e7cd      	b.n	802e89c <__smakebuf_r+0x18>
 802e900:	0802e691 	.word	0x0802e691

0802e904 <__malloc_lock>:
 802e904:	4801      	ldr	r0, [pc, #4]	; (802e90c <__malloc_lock+0x8>)
 802e906:	f7ff bf95 	b.w	802e834 <__retarget_lock_acquire_recursive>
 802e90a:	bf00      	nop
 802e90c:	200011fc 	.word	0x200011fc

0802e910 <__malloc_unlock>:
 802e910:	4801      	ldr	r0, [pc, #4]	; (802e918 <__malloc_unlock+0x8>)
 802e912:	f7ff bf90 	b.w	802e836 <__retarget_lock_release_recursive>
 802e916:	bf00      	nop
 802e918:	200011fc 	.word	0x200011fc

0802e91c <__ssputs_r>:
 802e91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e920:	688e      	ldr	r6, [r1, #8]
 802e922:	429e      	cmp	r6, r3
 802e924:	4682      	mov	sl, r0
 802e926:	460c      	mov	r4, r1
 802e928:	4690      	mov	r8, r2
 802e92a:	461f      	mov	r7, r3
 802e92c:	d838      	bhi.n	802e9a0 <__ssputs_r+0x84>
 802e92e:	898a      	ldrh	r2, [r1, #12]
 802e930:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802e934:	d032      	beq.n	802e99c <__ssputs_r+0x80>
 802e936:	6825      	ldr	r5, [r4, #0]
 802e938:	6909      	ldr	r1, [r1, #16]
 802e93a:	eba5 0901 	sub.w	r9, r5, r1
 802e93e:	6965      	ldr	r5, [r4, #20]
 802e940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802e944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802e948:	3301      	adds	r3, #1
 802e94a:	444b      	add	r3, r9
 802e94c:	106d      	asrs	r5, r5, #1
 802e94e:	429d      	cmp	r5, r3
 802e950:	bf38      	it	cc
 802e952:	461d      	movcc	r5, r3
 802e954:	0553      	lsls	r3, r2, #21
 802e956:	d531      	bpl.n	802e9bc <__ssputs_r+0xa0>
 802e958:	4629      	mov	r1, r5
 802e95a:	f7ff fbc1 	bl	802e0e0 <_malloc_r>
 802e95e:	4606      	mov	r6, r0
 802e960:	b950      	cbnz	r0, 802e978 <__ssputs_r+0x5c>
 802e962:	230c      	movs	r3, #12
 802e964:	f8ca 3000 	str.w	r3, [sl]
 802e968:	89a3      	ldrh	r3, [r4, #12]
 802e96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e96e:	81a3      	strh	r3, [r4, #12]
 802e970:	f04f 30ff 	mov.w	r0, #4294967295
 802e974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e978:	6921      	ldr	r1, [r4, #16]
 802e97a:	464a      	mov	r2, r9
 802e97c:	f000 fcb2 	bl	802f2e4 <memcpy>
 802e980:	89a3      	ldrh	r3, [r4, #12]
 802e982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802e986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802e98a:	81a3      	strh	r3, [r4, #12]
 802e98c:	6126      	str	r6, [r4, #16]
 802e98e:	6165      	str	r5, [r4, #20]
 802e990:	444e      	add	r6, r9
 802e992:	eba5 0509 	sub.w	r5, r5, r9
 802e996:	6026      	str	r6, [r4, #0]
 802e998:	60a5      	str	r5, [r4, #8]
 802e99a:	463e      	mov	r6, r7
 802e99c:	42be      	cmp	r6, r7
 802e99e:	d900      	bls.n	802e9a2 <__ssputs_r+0x86>
 802e9a0:	463e      	mov	r6, r7
 802e9a2:	6820      	ldr	r0, [r4, #0]
 802e9a4:	4632      	mov	r2, r6
 802e9a6:	4641      	mov	r1, r8
 802e9a8:	f000 fcaa 	bl	802f300 <memmove>
 802e9ac:	68a3      	ldr	r3, [r4, #8]
 802e9ae:	1b9b      	subs	r3, r3, r6
 802e9b0:	60a3      	str	r3, [r4, #8]
 802e9b2:	6823      	ldr	r3, [r4, #0]
 802e9b4:	4433      	add	r3, r6
 802e9b6:	6023      	str	r3, [r4, #0]
 802e9b8:	2000      	movs	r0, #0
 802e9ba:	e7db      	b.n	802e974 <__ssputs_r+0x58>
 802e9bc:	462a      	mov	r2, r5
 802e9be:	f000 fcb9 	bl	802f334 <_realloc_r>
 802e9c2:	4606      	mov	r6, r0
 802e9c4:	2800      	cmp	r0, #0
 802e9c6:	d1e1      	bne.n	802e98c <__ssputs_r+0x70>
 802e9c8:	6921      	ldr	r1, [r4, #16]
 802e9ca:	4650      	mov	r0, sl
 802e9cc:	f7ff fb1c 	bl	802e008 <_free_r>
 802e9d0:	e7c7      	b.n	802e962 <__ssputs_r+0x46>
	...

0802e9d4 <_svfiprintf_r>:
 802e9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e9d8:	4698      	mov	r8, r3
 802e9da:	898b      	ldrh	r3, [r1, #12]
 802e9dc:	061b      	lsls	r3, r3, #24
 802e9de:	b09d      	sub	sp, #116	; 0x74
 802e9e0:	4607      	mov	r7, r0
 802e9e2:	460d      	mov	r5, r1
 802e9e4:	4614      	mov	r4, r2
 802e9e6:	d50e      	bpl.n	802ea06 <_svfiprintf_r+0x32>
 802e9e8:	690b      	ldr	r3, [r1, #16]
 802e9ea:	b963      	cbnz	r3, 802ea06 <_svfiprintf_r+0x32>
 802e9ec:	2140      	movs	r1, #64	; 0x40
 802e9ee:	f7ff fb77 	bl	802e0e0 <_malloc_r>
 802e9f2:	6028      	str	r0, [r5, #0]
 802e9f4:	6128      	str	r0, [r5, #16]
 802e9f6:	b920      	cbnz	r0, 802ea02 <_svfiprintf_r+0x2e>
 802e9f8:	230c      	movs	r3, #12
 802e9fa:	603b      	str	r3, [r7, #0]
 802e9fc:	f04f 30ff 	mov.w	r0, #4294967295
 802ea00:	e0d1      	b.n	802eba6 <_svfiprintf_r+0x1d2>
 802ea02:	2340      	movs	r3, #64	; 0x40
 802ea04:	616b      	str	r3, [r5, #20]
 802ea06:	2300      	movs	r3, #0
 802ea08:	9309      	str	r3, [sp, #36]	; 0x24
 802ea0a:	2320      	movs	r3, #32
 802ea0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ea10:	f8cd 800c 	str.w	r8, [sp, #12]
 802ea14:	2330      	movs	r3, #48	; 0x30
 802ea16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802ebc0 <_svfiprintf_r+0x1ec>
 802ea1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ea1e:	f04f 0901 	mov.w	r9, #1
 802ea22:	4623      	mov	r3, r4
 802ea24:	469a      	mov	sl, r3
 802ea26:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ea2a:	b10a      	cbz	r2, 802ea30 <_svfiprintf_r+0x5c>
 802ea2c:	2a25      	cmp	r2, #37	; 0x25
 802ea2e:	d1f9      	bne.n	802ea24 <_svfiprintf_r+0x50>
 802ea30:	ebba 0b04 	subs.w	fp, sl, r4
 802ea34:	d00b      	beq.n	802ea4e <_svfiprintf_r+0x7a>
 802ea36:	465b      	mov	r3, fp
 802ea38:	4622      	mov	r2, r4
 802ea3a:	4629      	mov	r1, r5
 802ea3c:	4638      	mov	r0, r7
 802ea3e:	f7ff ff6d 	bl	802e91c <__ssputs_r>
 802ea42:	3001      	adds	r0, #1
 802ea44:	f000 80aa 	beq.w	802eb9c <_svfiprintf_r+0x1c8>
 802ea48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ea4a:	445a      	add	r2, fp
 802ea4c:	9209      	str	r2, [sp, #36]	; 0x24
 802ea4e:	f89a 3000 	ldrb.w	r3, [sl]
 802ea52:	2b00      	cmp	r3, #0
 802ea54:	f000 80a2 	beq.w	802eb9c <_svfiprintf_r+0x1c8>
 802ea58:	2300      	movs	r3, #0
 802ea5a:	f04f 32ff 	mov.w	r2, #4294967295
 802ea5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ea62:	f10a 0a01 	add.w	sl, sl, #1
 802ea66:	9304      	str	r3, [sp, #16]
 802ea68:	9307      	str	r3, [sp, #28]
 802ea6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ea6e:	931a      	str	r3, [sp, #104]	; 0x68
 802ea70:	4654      	mov	r4, sl
 802ea72:	2205      	movs	r2, #5
 802ea74:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ea78:	4851      	ldr	r0, [pc, #324]	; (802ebc0 <_svfiprintf_r+0x1ec>)
 802ea7a:	f7f1 fbb9 	bl	80201f0 <memchr>
 802ea7e:	9a04      	ldr	r2, [sp, #16]
 802ea80:	b9d8      	cbnz	r0, 802eaba <_svfiprintf_r+0xe6>
 802ea82:	06d0      	lsls	r0, r2, #27
 802ea84:	bf44      	itt	mi
 802ea86:	2320      	movmi	r3, #32
 802ea88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ea8c:	0711      	lsls	r1, r2, #28
 802ea8e:	bf44      	itt	mi
 802ea90:	232b      	movmi	r3, #43	; 0x2b
 802ea92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ea96:	f89a 3000 	ldrb.w	r3, [sl]
 802ea9a:	2b2a      	cmp	r3, #42	; 0x2a
 802ea9c:	d015      	beq.n	802eaca <_svfiprintf_r+0xf6>
 802ea9e:	9a07      	ldr	r2, [sp, #28]
 802eaa0:	4654      	mov	r4, sl
 802eaa2:	2000      	movs	r0, #0
 802eaa4:	f04f 0c0a 	mov.w	ip, #10
 802eaa8:	4621      	mov	r1, r4
 802eaaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 802eaae:	3b30      	subs	r3, #48	; 0x30
 802eab0:	2b09      	cmp	r3, #9
 802eab2:	d94e      	bls.n	802eb52 <_svfiprintf_r+0x17e>
 802eab4:	b1b0      	cbz	r0, 802eae4 <_svfiprintf_r+0x110>
 802eab6:	9207      	str	r2, [sp, #28]
 802eab8:	e014      	b.n	802eae4 <_svfiprintf_r+0x110>
 802eaba:	eba0 0308 	sub.w	r3, r0, r8
 802eabe:	fa09 f303 	lsl.w	r3, r9, r3
 802eac2:	4313      	orrs	r3, r2
 802eac4:	9304      	str	r3, [sp, #16]
 802eac6:	46a2      	mov	sl, r4
 802eac8:	e7d2      	b.n	802ea70 <_svfiprintf_r+0x9c>
 802eaca:	9b03      	ldr	r3, [sp, #12]
 802eacc:	1d19      	adds	r1, r3, #4
 802eace:	681b      	ldr	r3, [r3, #0]
 802ead0:	9103      	str	r1, [sp, #12]
 802ead2:	2b00      	cmp	r3, #0
 802ead4:	bfbb      	ittet	lt
 802ead6:	425b      	neglt	r3, r3
 802ead8:	f042 0202 	orrlt.w	r2, r2, #2
 802eadc:	9307      	strge	r3, [sp, #28]
 802eade:	9307      	strlt	r3, [sp, #28]
 802eae0:	bfb8      	it	lt
 802eae2:	9204      	strlt	r2, [sp, #16]
 802eae4:	7823      	ldrb	r3, [r4, #0]
 802eae6:	2b2e      	cmp	r3, #46	; 0x2e
 802eae8:	d10c      	bne.n	802eb04 <_svfiprintf_r+0x130>
 802eaea:	7863      	ldrb	r3, [r4, #1]
 802eaec:	2b2a      	cmp	r3, #42	; 0x2a
 802eaee:	d135      	bne.n	802eb5c <_svfiprintf_r+0x188>
 802eaf0:	9b03      	ldr	r3, [sp, #12]
 802eaf2:	1d1a      	adds	r2, r3, #4
 802eaf4:	681b      	ldr	r3, [r3, #0]
 802eaf6:	9203      	str	r2, [sp, #12]
 802eaf8:	2b00      	cmp	r3, #0
 802eafa:	bfb8      	it	lt
 802eafc:	f04f 33ff 	movlt.w	r3, #4294967295
 802eb00:	3402      	adds	r4, #2
 802eb02:	9305      	str	r3, [sp, #20]
 802eb04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802ebd0 <_svfiprintf_r+0x1fc>
 802eb08:	7821      	ldrb	r1, [r4, #0]
 802eb0a:	2203      	movs	r2, #3
 802eb0c:	4650      	mov	r0, sl
 802eb0e:	f7f1 fb6f 	bl	80201f0 <memchr>
 802eb12:	b140      	cbz	r0, 802eb26 <_svfiprintf_r+0x152>
 802eb14:	2340      	movs	r3, #64	; 0x40
 802eb16:	eba0 000a 	sub.w	r0, r0, sl
 802eb1a:	fa03 f000 	lsl.w	r0, r3, r0
 802eb1e:	9b04      	ldr	r3, [sp, #16]
 802eb20:	4303      	orrs	r3, r0
 802eb22:	3401      	adds	r4, #1
 802eb24:	9304      	str	r3, [sp, #16]
 802eb26:	f814 1b01 	ldrb.w	r1, [r4], #1
 802eb2a:	4826      	ldr	r0, [pc, #152]	; (802ebc4 <_svfiprintf_r+0x1f0>)
 802eb2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802eb30:	2206      	movs	r2, #6
 802eb32:	f7f1 fb5d 	bl	80201f0 <memchr>
 802eb36:	2800      	cmp	r0, #0
 802eb38:	d038      	beq.n	802ebac <_svfiprintf_r+0x1d8>
 802eb3a:	4b23      	ldr	r3, [pc, #140]	; (802ebc8 <_svfiprintf_r+0x1f4>)
 802eb3c:	bb1b      	cbnz	r3, 802eb86 <_svfiprintf_r+0x1b2>
 802eb3e:	9b03      	ldr	r3, [sp, #12]
 802eb40:	3307      	adds	r3, #7
 802eb42:	f023 0307 	bic.w	r3, r3, #7
 802eb46:	3308      	adds	r3, #8
 802eb48:	9303      	str	r3, [sp, #12]
 802eb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802eb4c:	4433      	add	r3, r6
 802eb4e:	9309      	str	r3, [sp, #36]	; 0x24
 802eb50:	e767      	b.n	802ea22 <_svfiprintf_r+0x4e>
 802eb52:	fb0c 3202 	mla	r2, ip, r2, r3
 802eb56:	460c      	mov	r4, r1
 802eb58:	2001      	movs	r0, #1
 802eb5a:	e7a5      	b.n	802eaa8 <_svfiprintf_r+0xd4>
 802eb5c:	2300      	movs	r3, #0
 802eb5e:	3401      	adds	r4, #1
 802eb60:	9305      	str	r3, [sp, #20]
 802eb62:	4619      	mov	r1, r3
 802eb64:	f04f 0c0a 	mov.w	ip, #10
 802eb68:	4620      	mov	r0, r4
 802eb6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802eb6e:	3a30      	subs	r2, #48	; 0x30
 802eb70:	2a09      	cmp	r2, #9
 802eb72:	d903      	bls.n	802eb7c <_svfiprintf_r+0x1a8>
 802eb74:	2b00      	cmp	r3, #0
 802eb76:	d0c5      	beq.n	802eb04 <_svfiprintf_r+0x130>
 802eb78:	9105      	str	r1, [sp, #20]
 802eb7a:	e7c3      	b.n	802eb04 <_svfiprintf_r+0x130>
 802eb7c:	fb0c 2101 	mla	r1, ip, r1, r2
 802eb80:	4604      	mov	r4, r0
 802eb82:	2301      	movs	r3, #1
 802eb84:	e7f0      	b.n	802eb68 <_svfiprintf_r+0x194>
 802eb86:	ab03      	add	r3, sp, #12
 802eb88:	9300      	str	r3, [sp, #0]
 802eb8a:	462a      	mov	r2, r5
 802eb8c:	4b0f      	ldr	r3, [pc, #60]	; (802ebcc <_svfiprintf_r+0x1f8>)
 802eb8e:	a904      	add	r1, sp, #16
 802eb90:	4638      	mov	r0, r7
 802eb92:	f3af 8000 	nop.w
 802eb96:	1c42      	adds	r2, r0, #1
 802eb98:	4606      	mov	r6, r0
 802eb9a:	d1d6      	bne.n	802eb4a <_svfiprintf_r+0x176>
 802eb9c:	89ab      	ldrh	r3, [r5, #12]
 802eb9e:	065b      	lsls	r3, r3, #25
 802eba0:	f53f af2c 	bmi.w	802e9fc <_svfiprintf_r+0x28>
 802eba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802eba6:	b01d      	add	sp, #116	; 0x74
 802eba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ebac:	ab03      	add	r3, sp, #12
 802ebae:	9300      	str	r3, [sp, #0]
 802ebb0:	462a      	mov	r2, r5
 802ebb2:	4b06      	ldr	r3, [pc, #24]	; (802ebcc <_svfiprintf_r+0x1f8>)
 802ebb4:	a904      	add	r1, sp, #16
 802ebb6:	4638      	mov	r0, r7
 802ebb8:	f000 f9d4 	bl	802ef64 <_printf_i>
 802ebbc:	e7eb      	b.n	802eb96 <_svfiprintf_r+0x1c2>
 802ebbe:	bf00      	nop
 802ebc0:	080319d0 	.word	0x080319d0
 802ebc4:	080319da 	.word	0x080319da
 802ebc8:	00000000 	.word	0x00000000
 802ebcc:	0802e91d 	.word	0x0802e91d
 802ebd0:	080319d6 	.word	0x080319d6

0802ebd4 <__sfputc_r>:
 802ebd4:	6893      	ldr	r3, [r2, #8]
 802ebd6:	3b01      	subs	r3, #1
 802ebd8:	2b00      	cmp	r3, #0
 802ebda:	b410      	push	{r4}
 802ebdc:	6093      	str	r3, [r2, #8]
 802ebde:	da08      	bge.n	802ebf2 <__sfputc_r+0x1e>
 802ebe0:	6994      	ldr	r4, [r2, #24]
 802ebe2:	42a3      	cmp	r3, r4
 802ebe4:	db01      	blt.n	802ebea <__sfputc_r+0x16>
 802ebe6:	290a      	cmp	r1, #10
 802ebe8:	d103      	bne.n	802ebf2 <__sfputc_r+0x1e>
 802ebea:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ebee:	f7ff bba9 	b.w	802e344 <__swbuf_r>
 802ebf2:	6813      	ldr	r3, [r2, #0]
 802ebf4:	1c58      	adds	r0, r3, #1
 802ebf6:	6010      	str	r0, [r2, #0]
 802ebf8:	7019      	strb	r1, [r3, #0]
 802ebfa:	4608      	mov	r0, r1
 802ebfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ec00:	4770      	bx	lr

0802ec02 <__sfputs_r>:
 802ec02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ec04:	4606      	mov	r6, r0
 802ec06:	460f      	mov	r7, r1
 802ec08:	4614      	mov	r4, r2
 802ec0a:	18d5      	adds	r5, r2, r3
 802ec0c:	42ac      	cmp	r4, r5
 802ec0e:	d101      	bne.n	802ec14 <__sfputs_r+0x12>
 802ec10:	2000      	movs	r0, #0
 802ec12:	e007      	b.n	802ec24 <__sfputs_r+0x22>
 802ec14:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ec18:	463a      	mov	r2, r7
 802ec1a:	4630      	mov	r0, r6
 802ec1c:	f7ff ffda 	bl	802ebd4 <__sfputc_r>
 802ec20:	1c43      	adds	r3, r0, #1
 802ec22:	d1f3      	bne.n	802ec0c <__sfputs_r+0xa>
 802ec24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ec28 <_vfiprintf_r>:
 802ec28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ec2c:	460d      	mov	r5, r1
 802ec2e:	b09d      	sub	sp, #116	; 0x74
 802ec30:	4614      	mov	r4, r2
 802ec32:	4698      	mov	r8, r3
 802ec34:	4606      	mov	r6, r0
 802ec36:	b118      	cbz	r0, 802ec40 <_vfiprintf_r+0x18>
 802ec38:	6983      	ldr	r3, [r0, #24]
 802ec3a:	b90b      	cbnz	r3, 802ec40 <_vfiprintf_r+0x18>
 802ec3c:	f7ff fd5c 	bl	802e6f8 <__sinit>
 802ec40:	4b89      	ldr	r3, [pc, #548]	; (802ee68 <_vfiprintf_r+0x240>)
 802ec42:	429d      	cmp	r5, r3
 802ec44:	d11b      	bne.n	802ec7e <_vfiprintf_r+0x56>
 802ec46:	6875      	ldr	r5, [r6, #4]
 802ec48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ec4a:	07d9      	lsls	r1, r3, #31
 802ec4c:	d405      	bmi.n	802ec5a <_vfiprintf_r+0x32>
 802ec4e:	89ab      	ldrh	r3, [r5, #12]
 802ec50:	059a      	lsls	r2, r3, #22
 802ec52:	d402      	bmi.n	802ec5a <_vfiprintf_r+0x32>
 802ec54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ec56:	f7ff fded 	bl	802e834 <__retarget_lock_acquire_recursive>
 802ec5a:	89ab      	ldrh	r3, [r5, #12]
 802ec5c:	071b      	lsls	r3, r3, #28
 802ec5e:	d501      	bpl.n	802ec64 <_vfiprintf_r+0x3c>
 802ec60:	692b      	ldr	r3, [r5, #16]
 802ec62:	b9eb      	cbnz	r3, 802eca0 <_vfiprintf_r+0x78>
 802ec64:	4629      	mov	r1, r5
 802ec66:	4630      	mov	r0, r6
 802ec68:	f7ff fbbe 	bl	802e3e8 <__swsetup_r>
 802ec6c:	b1c0      	cbz	r0, 802eca0 <_vfiprintf_r+0x78>
 802ec6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ec70:	07dc      	lsls	r4, r3, #31
 802ec72:	d50e      	bpl.n	802ec92 <_vfiprintf_r+0x6a>
 802ec74:	f04f 30ff 	mov.w	r0, #4294967295
 802ec78:	b01d      	add	sp, #116	; 0x74
 802ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ec7e:	4b7b      	ldr	r3, [pc, #492]	; (802ee6c <_vfiprintf_r+0x244>)
 802ec80:	429d      	cmp	r5, r3
 802ec82:	d101      	bne.n	802ec88 <_vfiprintf_r+0x60>
 802ec84:	68b5      	ldr	r5, [r6, #8]
 802ec86:	e7df      	b.n	802ec48 <_vfiprintf_r+0x20>
 802ec88:	4b79      	ldr	r3, [pc, #484]	; (802ee70 <_vfiprintf_r+0x248>)
 802ec8a:	429d      	cmp	r5, r3
 802ec8c:	bf08      	it	eq
 802ec8e:	68f5      	ldreq	r5, [r6, #12]
 802ec90:	e7da      	b.n	802ec48 <_vfiprintf_r+0x20>
 802ec92:	89ab      	ldrh	r3, [r5, #12]
 802ec94:	0598      	lsls	r0, r3, #22
 802ec96:	d4ed      	bmi.n	802ec74 <_vfiprintf_r+0x4c>
 802ec98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ec9a:	f7ff fdcc 	bl	802e836 <__retarget_lock_release_recursive>
 802ec9e:	e7e9      	b.n	802ec74 <_vfiprintf_r+0x4c>
 802eca0:	2300      	movs	r3, #0
 802eca2:	9309      	str	r3, [sp, #36]	; 0x24
 802eca4:	2320      	movs	r3, #32
 802eca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ecaa:	f8cd 800c 	str.w	r8, [sp, #12]
 802ecae:	2330      	movs	r3, #48	; 0x30
 802ecb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802ee74 <_vfiprintf_r+0x24c>
 802ecb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802ecb8:	f04f 0901 	mov.w	r9, #1
 802ecbc:	4623      	mov	r3, r4
 802ecbe:	469a      	mov	sl, r3
 802ecc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802ecc4:	b10a      	cbz	r2, 802ecca <_vfiprintf_r+0xa2>
 802ecc6:	2a25      	cmp	r2, #37	; 0x25
 802ecc8:	d1f9      	bne.n	802ecbe <_vfiprintf_r+0x96>
 802ecca:	ebba 0b04 	subs.w	fp, sl, r4
 802ecce:	d00b      	beq.n	802ece8 <_vfiprintf_r+0xc0>
 802ecd0:	465b      	mov	r3, fp
 802ecd2:	4622      	mov	r2, r4
 802ecd4:	4629      	mov	r1, r5
 802ecd6:	4630      	mov	r0, r6
 802ecd8:	f7ff ff93 	bl	802ec02 <__sfputs_r>
 802ecdc:	3001      	adds	r0, #1
 802ecde:	f000 80aa 	beq.w	802ee36 <_vfiprintf_r+0x20e>
 802ece2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ece4:	445a      	add	r2, fp
 802ece6:	9209      	str	r2, [sp, #36]	; 0x24
 802ece8:	f89a 3000 	ldrb.w	r3, [sl]
 802ecec:	2b00      	cmp	r3, #0
 802ecee:	f000 80a2 	beq.w	802ee36 <_vfiprintf_r+0x20e>
 802ecf2:	2300      	movs	r3, #0
 802ecf4:	f04f 32ff 	mov.w	r2, #4294967295
 802ecf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ecfc:	f10a 0a01 	add.w	sl, sl, #1
 802ed00:	9304      	str	r3, [sp, #16]
 802ed02:	9307      	str	r3, [sp, #28]
 802ed04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802ed08:	931a      	str	r3, [sp, #104]	; 0x68
 802ed0a:	4654      	mov	r4, sl
 802ed0c:	2205      	movs	r2, #5
 802ed0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ed12:	4858      	ldr	r0, [pc, #352]	; (802ee74 <_vfiprintf_r+0x24c>)
 802ed14:	f7f1 fa6c 	bl	80201f0 <memchr>
 802ed18:	9a04      	ldr	r2, [sp, #16]
 802ed1a:	b9d8      	cbnz	r0, 802ed54 <_vfiprintf_r+0x12c>
 802ed1c:	06d1      	lsls	r1, r2, #27
 802ed1e:	bf44      	itt	mi
 802ed20:	2320      	movmi	r3, #32
 802ed22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ed26:	0713      	lsls	r3, r2, #28
 802ed28:	bf44      	itt	mi
 802ed2a:	232b      	movmi	r3, #43	; 0x2b
 802ed2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802ed30:	f89a 3000 	ldrb.w	r3, [sl]
 802ed34:	2b2a      	cmp	r3, #42	; 0x2a
 802ed36:	d015      	beq.n	802ed64 <_vfiprintf_r+0x13c>
 802ed38:	9a07      	ldr	r2, [sp, #28]
 802ed3a:	4654      	mov	r4, sl
 802ed3c:	2000      	movs	r0, #0
 802ed3e:	f04f 0c0a 	mov.w	ip, #10
 802ed42:	4621      	mov	r1, r4
 802ed44:	f811 3b01 	ldrb.w	r3, [r1], #1
 802ed48:	3b30      	subs	r3, #48	; 0x30
 802ed4a:	2b09      	cmp	r3, #9
 802ed4c:	d94e      	bls.n	802edec <_vfiprintf_r+0x1c4>
 802ed4e:	b1b0      	cbz	r0, 802ed7e <_vfiprintf_r+0x156>
 802ed50:	9207      	str	r2, [sp, #28]
 802ed52:	e014      	b.n	802ed7e <_vfiprintf_r+0x156>
 802ed54:	eba0 0308 	sub.w	r3, r0, r8
 802ed58:	fa09 f303 	lsl.w	r3, r9, r3
 802ed5c:	4313      	orrs	r3, r2
 802ed5e:	9304      	str	r3, [sp, #16]
 802ed60:	46a2      	mov	sl, r4
 802ed62:	e7d2      	b.n	802ed0a <_vfiprintf_r+0xe2>
 802ed64:	9b03      	ldr	r3, [sp, #12]
 802ed66:	1d19      	adds	r1, r3, #4
 802ed68:	681b      	ldr	r3, [r3, #0]
 802ed6a:	9103      	str	r1, [sp, #12]
 802ed6c:	2b00      	cmp	r3, #0
 802ed6e:	bfbb      	ittet	lt
 802ed70:	425b      	neglt	r3, r3
 802ed72:	f042 0202 	orrlt.w	r2, r2, #2
 802ed76:	9307      	strge	r3, [sp, #28]
 802ed78:	9307      	strlt	r3, [sp, #28]
 802ed7a:	bfb8      	it	lt
 802ed7c:	9204      	strlt	r2, [sp, #16]
 802ed7e:	7823      	ldrb	r3, [r4, #0]
 802ed80:	2b2e      	cmp	r3, #46	; 0x2e
 802ed82:	d10c      	bne.n	802ed9e <_vfiprintf_r+0x176>
 802ed84:	7863      	ldrb	r3, [r4, #1]
 802ed86:	2b2a      	cmp	r3, #42	; 0x2a
 802ed88:	d135      	bne.n	802edf6 <_vfiprintf_r+0x1ce>
 802ed8a:	9b03      	ldr	r3, [sp, #12]
 802ed8c:	1d1a      	adds	r2, r3, #4
 802ed8e:	681b      	ldr	r3, [r3, #0]
 802ed90:	9203      	str	r2, [sp, #12]
 802ed92:	2b00      	cmp	r3, #0
 802ed94:	bfb8      	it	lt
 802ed96:	f04f 33ff 	movlt.w	r3, #4294967295
 802ed9a:	3402      	adds	r4, #2
 802ed9c:	9305      	str	r3, [sp, #20]
 802ed9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802ee84 <_vfiprintf_r+0x25c>
 802eda2:	7821      	ldrb	r1, [r4, #0]
 802eda4:	2203      	movs	r2, #3
 802eda6:	4650      	mov	r0, sl
 802eda8:	f7f1 fa22 	bl	80201f0 <memchr>
 802edac:	b140      	cbz	r0, 802edc0 <_vfiprintf_r+0x198>
 802edae:	2340      	movs	r3, #64	; 0x40
 802edb0:	eba0 000a 	sub.w	r0, r0, sl
 802edb4:	fa03 f000 	lsl.w	r0, r3, r0
 802edb8:	9b04      	ldr	r3, [sp, #16]
 802edba:	4303      	orrs	r3, r0
 802edbc:	3401      	adds	r4, #1
 802edbe:	9304      	str	r3, [sp, #16]
 802edc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802edc4:	482c      	ldr	r0, [pc, #176]	; (802ee78 <_vfiprintf_r+0x250>)
 802edc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802edca:	2206      	movs	r2, #6
 802edcc:	f7f1 fa10 	bl	80201f0 <memchr>
 802edd0:	2800      	cmp	r0, #0
 802edd2:	d03f      	beq.n	802ee54 <_vfiprintf_r+0x22c>
 802edd4:	4b29      	ldr	r3, [pc, #164]	; (802ee7c <_vfiprintf_r+0x254>)
 802edd6:	bb1b      	cbnz	r3, 802ee20 <_vfiprintf_r+0x1f8>
 802edd8:	9b03      	ldr	r3, [sp, #12]
 802edda:	3307      	adds	r3, #7
 802eddc:	f023 0307 	bic.w	r3, r3, #7
 802ede0:	3308      	adds	r3, #8
 802ede2:	9303      	str	r3, [sp, #12]
 802ede4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ede6:	443b      	add	r3, r7
 802ede8:	9309      	str	r3, [sp, #36]	; 0x24
 802edea:	e767      	b.n	802ecbc <_vfiprintf_r+0x94>
 802edec:	fb0c 3202 	mla	r2, ip, r2, r3
 802edf0:	460c      	mov	r4, r1
 802edf2:	2001      	movs	r0, #1
 802edf4:	e7a5      	b.n	802ed42 <_vfiprintf_r+0x11a>
 802edf6:	2300      	movs	r3, #0
 802edf8:	3401      	adds	r4, #1
 802edfa:	9305      	str	r3, [sp, #20]
 802edfc:	4619      	mov	r1, r3
 802edfe:	f04f 0c0a 	mov.w	ip, #10
 802ee02:	4620      	mov	r0, r4
 802ee04:	f810 2b01 	ldrb.w	r2, [r0], #1
 802ee08:	3a30      	subs	r2, #48	; 0x30
 802ee0a:	2a09      	cmp	r2, #9
 802ee0c:	d903      	bls.n	802ee16 <_vfiprintf_r+0x1ee>
 802ee0e:	2b00      	cmp	r3, #0
 802ee10:	d0c5      	beq.n	802ed9e <_vfiprintf_r+0x176>
 802ee12:	9105      	str	r1, [sp, #20]
 802ee14:	e7c3      	b.n	802ed9e <_vfiprintf_r+0x176>
 802ee16:	fb0c 2101 	mla	r1, ip, r1, r2
 802ee1a:	4604      	mov	r4, r0
 802ee1c:	2301      	movs	r3, #1
 802ee1e:	e7f0      	b.n	802ee02 <_vfiprintf_r+0x1da>
 802ee20:	ab03      	add	r3, sp, #12
 802ee22:	9300      	str	r3, [sp, #0]
 802ee24:	462a      	mov	r2, r5
 802ee26:	4b16      	ldr	r3, [pc, #88]	; (802ee80 <_vfiprintf_r+0x258>)
 802ee28:	a904      	add	r1, sp, #16
 802ee2a:	4630      	mov	r0, r6
 802ee2c:	f3af 8000 	nop.w
 802ee30:	4607      	mov	r7, r0
 802ee32:	1c78      	adds	r0, r7, #1
 802ee34:	d1d6      	bne.n	802ede4 <_vfiprintf_r+0x1bc>
 802ee36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802ee38:	07d9      	lsls	r1, r3, #31
 802ee3a:	d405      	bmi.n	802ee48 <_vfiprintf_r+0x220>
 802ee3c:	89ab      	ldrh	r3, [r5, #12]
 802ee3e:	059a      	lsls	r2, r3, #22
 802ee40:	d402      	bmi.n	802ee48 <_vfiprintf_r+0x220>
 802ee42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802ee44:	f7ff fcf7 	bl	802e836 <__retarget_lock_release_recursive>
 802ee48:	89ab      	ldrh	r3, [r5, #12]
 802ee4a:	065b      	lsls	r3, r3, #25
 802ee4c:	f53f af12 	bmi.w	802ec74 <_vfiprintf_r+0x4c>
 802ee50:	9809      	ldr	r0, [sp, #36]	; 0x24
 802ee52:	e711      	b.n	802ec78 <_vfiprintf_r+0x50>
 802ee54:	ab03      	add	r3, sp, #12
 802ee56:	9300      	str	r3, [sp, #0]
 802ee58:	462a      	mov	r2, r5
 802ee5a:	4b09      	ldr	r3, [pc, #36]	; (802ee80 <_vfiprintf_r+0x258>)
 802ee5c:	a904      	add	r1, sp, #16
 802ee5e:	4630      	mov	r0, r6
 802ee60:	f000 f880 	bl	802ef64 <_printf_i>
 802ee64:	e7e4      	b.n	802ee30 <_vfiprintf_r+0x208>
 802ee66:	bf00      	nop
 802ee68:	08031990 	.word	0x08031990
 802ee6c:	080319b0 	.word	0x080319b0
 802ee70:	08031970 	.word	0x08031970
 802ee74:	080319d0 	.word	0x080319d0
 802ee78:	080319da 	.word	0x080319da
 802ee7c:	00000000 	.word	0x00000000
 802ee80:	0802ec03 	.word	0x0802ec03
 802ee84:	080319d6 	.word	0x080319d6

0802ee88 <_printf_common>:
 802ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ee8c:	4616      	mov	r6, r2
 802ee8e:	4699      	mov	r9, r3
 802ee90:	688a      	ldr	r2, [r1, #8]
 802ee92:	690b      	ldr	r3, [r1, #16]
 802ee94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802ee98:	4293      	cmp	r3, r2
 802ee9a:	bfb8      	it	lt
 802ee9c:	4613      	movlt	r3, r2
 802ee9e:	6033      	str	r3, [r6, #0]
 802eea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802eea4:	4607      	mov	r7, r0
 802eea6:	460c      	mov	r4, r1
 802eea8:	b10a      	cbz	r2, 802eeae <_printf_common+0x26>
 802eeaa:	3301      	adds	r3, #1
 802eeac:	6033      	str	r3, [r6, #0]
 802eeae:	6823      	ldr	r3, [r4, #0]
 802eeb0:	0699      	lsls	r1, r3, #26
 802eeb2:	bf42      	ittt	mi
 802eeb4:	6833      	ldrmi	r3, [r6, #0]
 802eeb6:	3302      	addmi	r3, #2
 802eeb8:	6033      	strmi	r3, [r6, #0]
 802eeba:	6825      	ldr	r5, [r4, #0]
 802eebc:	f015 0506 	ands.w	r5, r5, #6
 802eec0:	d106      	bne.n	802eed0 <_printf_common+0x48>
 802eec2:	f104 0a19 	add.w	sl, r4, #25
 802eec6:	68e3      	ldr	r3, [r4, #12]
 802eec8:	6832      	ldr	r2, [r6, #0]
 802eeca:	1a9b      	subs	r3, r3, r2
 802eecc:	42ab      	cmp	r3, r5
 802eece:	dc26      	bgt.n	802ef1e <_printf_common+0x96>
 802eed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802eed4:	1e13      	subs	r3, r2, #0
 802eed6:	6822      	ldr	r2, [r4, #0]
 802eed8:	bf18      	it	ne
 802eeda:	2301      	movne	r3, #1
 802eedc:	0692      	lsls	r2, r2, #26
 802eede:	d42b      	bmi.n	802ef38 <_printf_common+0xb0>
 802eee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802eee4:	4649      	mov	r1, r9
 802eee6:	4638      	mov	r0, r7
 802eee8:	47c0      	blx	r8
 802eeea:	3001      	adds	r0, #1
 802eeec:	d01e      	beq.n	802ef2c <_printf_common+0xa4>
 802eeee:	6823      	ldr	r3, [r4, #0]
 802eef0:	68e5      	ldr	r5, [r4, #12]
 802eef2:	6832      	ldr	r2, [r6, #0]
 802eef4:	f003 0306 	and.w	r3, r3, #6
 802eef8:	2b04      	cmp	r3, #4
 802eefa:	bf08      	it	eq
 802eefc:	1aad      	subeq	r5, r5, r2
 802eefe:	68a3      	ldr	r3, [r4, #8]
 802ef00:	6922      	ldr	r2, [r4, #16]
 802ef02:	bf0c      	ite	eq
 802ef04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ef08:	2500      	movne	r5, #0
 802ef0a:	4293      	cmp	r3, r2
 802ef0c:	bfc4      	itt	gt
 802ef0e:	1a9b      	subgt	r3, r3, r2
 802ef10:	18ed      	addgt	r5, r5, r3
 802ef12:	2600      	movs	r6, #0
 802ef14:	341a      	adds	r4, #26
 802ef16:	42b5      	cmp	r5, r6
 802ef18:	d11a      	bne.n	802ef50 <_printf_common+0xc8>
 802ef1a:	2000      	movs	r0, #0
 802ef1c:	e008      	b.n	802ef30 <_printf_common+0xa8>
 802ef1e:	2301      	movs	r3, #1
 802ef20:	4652      	mov	r2, sl
 802ef22:	4649      	mov	r1, r9
 802ef24:	4638      	mov	r0, r7
 802ef26:	47c0      	blx	r8
 802ef28:	3001      	adds	r0, #1
 802ef2a:	d103      	bne.n	802ef34 <_printf_common+0xac>
 802ef2c:	f04f 30ff 	mov.w	r0, #4294967295
 802ef30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ef34:	3501      	adds	r5, #1
 802ef36:	e7c6      	b.n	802eec6 <_printf_common+0x3e>
 802ef38:	18e1      	adds	r1, r4, r3
 802ef3a:	1c5a      	adds	r2, r3, #1
 802ef3c:	2030      	movs	r0, #48	; 0x30
 802ef3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ef42:	4422      	add	r2, r4
 802ef44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ef48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ef4c:	3302      	adds	r3, #2
 802ef4e:	e7c7      	b.n	802eee0 <_printf_common+0x58>
 802ef50:	2301      	movs	r3, #1
 802ef52:	4622      	mov	r2, r4
 802ef54:	4649      	mov	r1, r9
 802ef56:	4638      	mov	r0, r7
 802ef58:	47c0      	blx	r8
 802ef5a:	3001      	adds	r0, #1
 802ef5c:	d0e6      	beq.n	802ef2c <_printf_common+0xa4>
 802ef5e:	3601      	adds	r6, #1
 802ef60:	e7d9      	b.n	802ef16 <_printf_common+0x8e>
	...

0802ef64 <_printf_i>:
 802ef64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ef68:	7e0f      	ldrb	r7, [r1, #24]
 802ef6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802ef6c:	2f78      	cmp	r7, #120	; 0x78
 802ef6e:	4691      	mov	r9, r2
 802ef70:	4680      	mov	r8, r0
 802ef72:	460c      	mov	r4, r1
 802ef74:	469a      	mov	sl, r3
 802ef76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ef7a:	d807      	bhi.n	802ef8c <_printf_i+0x28>
 802ef7c:	2f62      	cmp	r7, #98	; 0x62
 802ef7e:	d80a      	bhi.n	802ef96 <_printf_i+0x32>
 802ef80:	2f00      	cmp	r7, #0
 802ef82:	f000 80d8 	beq.w	802f136 <_printf_i+0x1d2>
 802ef86:	2f58      	cmp	r7, #88	; 0x58
 802ef88:	f000 80a3 	beq.w	802f0d2 <_printf_i+0x16e>
 802ef8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ef90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ef94:	e03a      	b.n	802f00c <_printf_i+0xa8>
 802ef96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ef9a:	2b15      	cmp	r3, #21
 802ef9c:	d8f6      	bhi.n	802ef8c <_printf_i+0x28>
 802ef9e:	a101      	add	r1, pc, #4	; (adr r1, 802efa4 <_printf_i+0x40>)
 802efa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802efa4:	0802effd 	.word	0x0802effd
 802efa8:	0802f011 	.word	0x0802f011
 802efac:	0802ef8d 	.word	0x0802ef8d
 802efb0:	0802ef8d 	.word	0x0802ef8d
 802efb4:	0802ef8d 	.word	0x0802ef8d
 802efb8:	0802ef8d 	.word	0x0802ef8d
 802efbc:	0802f011 	.word	0x0802f011
 802efc0:	0802ef8d 	.word	0x0802ef8d
 802efc4:	0802ef8d 	.word	0x0802ef8d
 802efc8:	0802ef8d 	.word	0x0802ef8d
 802efcc:	0802ef8d 	.word	0x0802ef8d
 802efd0:	0802f11d 	.word	0x0802f11d
 802efd4:	0802f041 	.word	0x0802f041
 802efd8:	0802f0ff 	.word	0x0802f0ff
 802efdc:	0802ef8d 	.word	0x0802ef8d
 802efe0:	0802ef8d 	.word	0x0802ef8d
 802efe4:	0802f13f 	.word	0x0802f13f
 802efe8:	0802ef8d 	.word	0x0802ef8d
 802efec:	0802f041 	.word	0x0802f041
 802eff0:	0802ef8d 	.word	0x0802ef8d
 802eff4:	0802ef8d 	.word	0x0802ef8d
 802eff8:	0802f107 	.word	0x0802f107
 802effc:	682b      	ldr	r3, [r5, #0]
 802effe:	1d1a      	adds	r2, r3, #4
 802f000:	681b      	ldr	r3, [r3, #0]
 802f002:	602a      	str	r2, [r5, #0]
 802f004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802f008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802f00c:	2301      	movs	r3, #1
 802f00e:	e0a3      	b.n	802f158 <_printf_i+0x1f4>
 802f010:	6820      	ldr	r0, [r4, #0]
 802f012:	6829      	ldr	r1, [r5, #0]
 802f014:	0606      	lsls	r6, r0, #24
 802f016:	f101 0304 	add.w	r3, r1, #4
 802f01a:	d50a      	bpl.n	802f032 <_printf_i+0xce>
 802f01c:	680e      	ldr	r6, [r1, #0]
 802f01e:	602b      	str	r3, [r5, #0]
 802f020:	2e00      	cmp	r6, #0
 802f022:	da03      	bge.n	802f02c <_printf_i+0xc8>
 802f024:	232d      	movs	r3, #45	; 0x2d
 802f026:	4276      	negs	r6, r6
 802f028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f02c:	485e      	ldr	r0, [pc, #376]	; (802f1a8 <_printf_i+0x244>)
 802f02e:	230a      	movs	r3, #10
 802f030:	e019      	b.n	802f066 <_printf_i+0x102>
 802f032:	680e      	ldr	r6, [r1, #0]
 802f034:	602b      	str	r3, [r5, #0]
 802f036:	f010 0f40 	tst.w	r0, #64	; 0x40
 802f03a:	bf18      	it	ne
 802f03c:	b236      	sxthne	r6, r6
 802f03e:	e7ef      	b.n	802f020 <_printf_i+0xbc>
 802f040:	682b      	ldr	r3, [r5, #0]
 802f042:	6820      	ldr	r0, [r4, #0]
 802f044:	1d19      	adds	r1, r3, #4
 802f046:	6029      	str	r1, [r5, #0]
 802f048:	0601      	lsls	r1, r0, #24
 802f04a:	d501      	bpl.n	802f050 <_printf_i+0xec>
 802f04c:	681e      	ldr	r6, [r3, #0]
 802f04e:	e002      	b.n	802f056 <_printf_i+0xf2>
 802f050:	0646      	lsls	r6, r0, #25
 802f052:	d5fb      	bpl.n	802f04c <_printf_i+0xe8>
 802f054:	881e      	ldrh	r6, [r3, #0]
 802f056:	4854      	ldr	r0, [pc, #336]	; (802f1a8 <_printf_i+0x244>)
 802f058:	2f6f      	cmp	r7, #111	; 0x6f
 802f05a:	bf0c      	ite	eq
 802f05c:	2308      	moveq	r3, #8
 802f05e:	230a      	movne	r3, #10
 802f060:	2100      	movs	r1, #0
 802f062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802f066:	6865      	ldr	r5, [r4, #4]
 802f068:	60a5      	str	r5, [r4, #8]
 802f06a:	2d00      	cmp	r5, #0
 802f06c:	bfa2      	ittt	ge
 802f06e:	6821      	ldrge	r1, [r4, #0]
 802f070:	f021 0104 	bicge.w	r1, r1, #4
 802f074:	6021      	strge	r1, [r4, #0]
 802f076:	b90e      	cbnz	r6, 802f07c <_printf_i+0x118>
 802f078:	2d00      	cmp	r5, #0
 802f07a:	d04d      	beq.n	802f118 <_printf_i+0x1b4>
 802f07c:	4615      	mov	r5, r2
 802f07e:	fbb6 f1f3 	udiv	r1, r6, r3
 802f082:	fb03 6711 	mls	r7, r3, r1, r6
 802f086:	5dc7      	ldrb	r7, [r0, r7]
 802f088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802f08c:	4637      	mov	r7, r6
 802f08e:	42bb      	cmp	r3, r7
 802f090:	460e      	mov	r6, r1
 802f092:	d9f4      	bls.n	802f07e <_printf_i+0x11a>
 802f094:	2b08      	cmp	r3, #8
 802f096:	d10b      	bne.n	802f0b0 <_printf_i+0x14c>
 802f098:	6823      	ldr	r3, [r4, #0]
 802f09a:	07de      	lsls	r6, r3, #31
 802f09c:	d508      	bpl.n	802f0b0 <_printf_i+0x14c>
 802f09e:	6923      	ldr	r3, [r4, #16]
 802f0a0:	6861      	ldr	r1, [r4, #4]
 802f0a2:	4299      	cmp	r1, r3
 802f0a4:	bfde      	ittt	le
 802f0a6:	2330      	movle	r3, #48	; 0x30
 802f0a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802f0ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 802f0b0:	1b52      	subs	r2, r2, r5
 802f0b2:	6122      	str	r2, [r4, #16]
 802f0b4:	f8cd a000 	str.w	sl, [sp]
 802f0b8:	464b      	mov	r3, r9
 802f0ba:	aa03      	add	r2, sp, #12
 802f0bc:	4621      	mov	r1, r4
 802f0be:	4640      	mov	r0, r8
 802f0c0:	f7ff fee2 	bl	802ee88 <_printf_common>
 802f0c4:	3001      	adds	r0, #1
 802f0c6:	d14c      	bne.n	802f162 <_printf_i+0x1fe>
 802f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 802f0cc:	b004      	add	sp, #16
 802f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f0d2:	4835      	ldr	r0, [pc, #212]	; (802f1a8 <_printf_i+0x244>)
 802f0d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802f0d8:	6829      	ldr	r1, [r5, #0]
 802f0da:	6823      	ldr	r3, [r4, #0]
 802f0dc:	f851 6b04 	ldr.w	r6, [r1], #4
 802f0e0:	6029      	str	r1, [r5, #0]
 802f0e2:	061d      	lsls	r5, r3, #24
 802f0e4:	d514      	bpl.n	802f110 <_printf_i+0x1ac>
 802f0e6:	07df      	lsls	r7, r3, #31
 802f0e8:	bf44      	itt	mi
 802f0ea:	f043 0320 	orrmi.w	r3, r3, #32
 802f0ee:	6023      	strmi	r3, [r4, #0]
 802f0f0:	b91e      	cbnz	r6, 802f0fa <_printf_i+0x196>
 802f0f2:	6823      	ldr	r3, [r4, #0]
 802f0f4:	f023 0320 	bic.w	r3, r3, #32
 802f0f8:	6023      	str	r3, [r4, #0]
 802f0fa:	2310      	movs	r3, #16
 802f0fc:	e7b0      	b.n	802f060 <_printf_i+0xfc>
 802f0fe:	6823      	ldr	r3, [r4, #0]
 802f100:	f043 0320 	orr.w	r3, r3, #32
 802f104:	6023      	str	r3, [r4, #0]
 802f106:	2378      	movs	r3, #120	; 0x78
 802f108:	4828      	ldr	r0, [pc, #160]	; (802f1ac <_printf_i+0x248>)
 802f10a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802f10e:	e7e3      	b.n	802f0d8 <_printf_i+0x174>
 802f110:	0659      	lsls	r1, r3, #25
 802f112:	bf48      	it	mi
 802f114:	b2b6      	uxthmi	r6, r6
 802f116:	e7e6      	b.n	802f0e6 <_printf_i+0x182>
 802f118:	4615      	mov	r5, r2
 802f11a:	e7bb      	b.n	802f094 <_printf_i+0x130>
 802f11c:	682b      	ldr	r3, [r5, #0]
 802f11e:	6826      	ldr	r6, [r4, #0]
 802f120:	6961      	ldr	r1, [r4, #20]
 802f122:	1d18      	adds	r0, r3, #4
 802f124:	6028      	str	r0, [r5, #0]
 802f126:	0635      	lsls	r5, r6, #24
 802f128:	681b      	ldr	r3, [r3, #0]
 802f12a:	d501      	bpl.n	802f130 <_printf_i+0x1cc>
 802f12c:	6019      	str	r1, [r3, #0]
 802f12e:	e002      	b.n	802f136 <_printf_i+0x1d2>
 802f130:	0670      	lsls	r0, r6, #25
 802f132:	d5fb      	bpl.n	802f12c <_printf_i+0x1c8>
 802f134:	8019      	strh	r1, [r3, #0]
 802f136:	2300      	movs	r3, #0
 802f138:	6123      	str	r3, [r4, #16]
 802f13a:	4615      	mov	r5, r2
 802f13c:	e7ba      	b.n	802f0b4 <_printf_i+0x150>
 802f13e:	682b      	ldr	r3, [r5, #0]
 802f140:	1d1a      	adds	r2, r3, #4
 802f142:	602a      	str	r2, [r5, #0]
 802f144:	681d      	ldr	r5, [r3, #0]
 802f146:	6862      	ldr	r2, [r4, #4]
 802f148:	2100      	movs	r1, #0
 802f14a:	4628      	mov	r0, r5
 802f14c:	f7f1 f850 	bl	80201f0 <memchr>
 802f150:	b108      	cbz	r0, 802f156 <_printf_i+0x1f2>
 802f152:	1b40      	subs	r0, r0, r5
 802f154:	6060      	str	r0, [r4, #4]
 802f156:	6863      	ldr	r3, [r4, #4]
 802f158:	6123      	str	r3, [r4, #16]
 802f15a:	2300      	movs	r3, #0
 802f15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802f160:	e7a8      	b.n	802f0b4 <_printf_i+0x150>
 802f162:	6923      	ldr	r3, [r4, #16]
 802f164:	462a      	mov	r2, r5
 802f166:	4649      	mov	r1, r9
 802f168:	4640      	mov	r0, r8
 802f16a:	47d0      	blx	sl
 802f16c:	3001      	adds	r0, #1
 802f16e:	d0ab      	beq.n	802f0c8 <_printf_i+0x164>
 802f170:	6823      	ldr	r3, [r4, #0]
 802f172:	079b      	lsls	r3, r3, #30
 802f174:	d413      	bmi.n	802f19e <_printf_i+0x23a>
 802f176:	68e0      	ldr	r0, [r4, #12]
 802f178:	9b03      	ldr	r3, [sp, #12]
 802f17a:	4298      	cmp	r0, r3
 802f17c:	bfb8      	it	lt
 802f17e:	4618      	movlt	r0, r3
 802f180:	e7a4      	b.n	802f0cc <_printf_i+0x168>
 802f182:	2301      	movs	r3, #1
 802f184:	4632      	mov	r2, r6
 802f186:	4649      	mov	r1, r9
 802f188:	4640      	mov	r0, r8
 802f18a:	47d0      	blx	sl
 802f18c:	3001      	adds	r0, #1
 802f18e:	d09b      	beq.n	802f0c8 <_printf_i+0x164>
 802f190:	3501      	adds	r5, #1
 802f192:	68e3      	ldr	r3, [r4, #12]
 802f194:	9903      	ldr	r1, [sp, #12]
 802f196:	1a5b      	subs	r3, r3, r1
 802f198:	42ab      	cmp	r3, r5
 802f19a:	dcf2      	bgt.n	802f182 <_printf_i+0x21e>
 802f19c:	e7eb      	b.n	802f176 <_printf_i+0x212>
 802f19e:	2500      	movs	r5, #0
 802f1a0:	f104 0619 	add.w	r6, r4, #25
 802f1a4:	e7f5      	b.n	802f192 <_printf_i+0x22e>
 802f1a6:	bf00      	nop
 802f1a8:	080319e1 	.word	0x080319e1
 802f1ac:	080319f2 	.word	0x080319f2

0802f1b0 <__sread>:
 802f1b0:	b510      	push	{r4, lr}
 802f1b2:	460c      	mov	r4, r1
 802f1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f1b8:	f000 f8ec 	bl	802f394 <_read_r>
 802f1bc:	2800      	cmp	r0, #0
 802f1be:	bfab      	itete	ge
 802f1c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802f1c2:	89a3      	ldrhlt	r3, [r4, #12]
 802f1c4:	181b      	addge	r3, r3, r0
 802f1c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802f1ca:	bfac      	ite	ge
 802f1cc:	6563      	strge	r3, [r4, #84]	; 0x54
 802f1ce:	81a3      	strhlt	r3, [r4, #12]
 802f1d0:	bd10      	pop	{r4, pc}

0802f1d2 <__swrite>:
 802f1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f1d6:	461f      	mov	r7, r3
 802f1d8:	898b      	ldrh	r3, [r1, #12]
 802f1da:	05db      	lsls	r3, r3, #23
 802f1dc:	4605      	mov	r5, r0
 802f1de:	460c      	mov	r4, r1
 802f1e0:	4616      	mov	r6, r2
 802f1e2:	d505      	bpl.n	802f1f0 <__swrite+0x1e>
 802f1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f1e8:	2302      	movs	r3, #2
 802f1ea:	2200      	movs	r2, #0
 802f1ec:	f000 f868 	bl	802f2c0 <_lseek_r>
 802f1f0:	89a3      	ldrh	r3, [r4, #12]
 802f1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802f1f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802f1fa:	81a3      	strh	r3, [r4, #12]
 802f1fc:	4632      	mov	r2, r6
 802f1fe:	463b      	mov	r3, r7
 802f200:	4628      	mov	r0, r5
 802f202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f206:	f000 b817 	b.w	802f238 <_write_r>

0802f20a <__sseek>:
 802f20a:	b510      	push	{r4, lr}
 802f20c:	460c      	mov	r4, r1
 802f20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f212:	f000 f855 	bl	802f2c0 <_lseek_r>
 802f216:	1c43      	adds	r3, r0, #1
 802f218:	89a3      	ldrh	r3, [r4, #12]
 802f21a:	bf15      	itete	ne
 802f21c:	6560      	strne	r0, [r4, #84]	; 0x54
 802f21e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802f222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802f226:	81a3      	strheq	r3, [r4, #12]
 802f228:	bf18      	it	ne
 802f22a:	81a3      	strhne	r3, [r4, #12]
 802f22c:	bd10      	pop	{r4, pc}

0802f22e <__sclose>:
 802f22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802f232:	f000 b813 	b.w	802f25c <_close_r>
	...

0802f238 <_write_r>:
 802f238:	b538      	push	{r3, r4, r5, lr}
 802f23a:	4d07      	ldr	r5, [pc, #28]	; (802f258 <_write_r+0x20>)
 802f23c:	4604      	mov	r4, r0
 802f23e:	4608      	mov	r0, r1
 802f240:	4611      	mov	r1, r2
 802f242:	2200      	movs	r2, #0
 802f244:	602a      	str	r2, [r5, #0]
 802f246:	461a      	mov	r2, r3
 802f248:	f7f2 fed0 	bl	8021fec <_write>
 802f24c:	1c43      	adds	r3, r0, #1
 802f24e:	d102      	bne.n	802f256 <_write_r+0x1e>
 802f250:	682b      	ldr	r3, [r5, #0]
 802f252:	b103      	cbz	r3, 802f256 <_write_r+0x1e>
 802f254:	6023      	str	r3, [r4, #0]
 802f256:	bd38      	pop	{r3, r4, r5, pc}
 802f258:	20001200 	.word	0x20001200

0802f25c <_close_r>:
 802f25c:	b538      	push	{r3, r4, r5, lr}
 802f25e:	4d06      	ldr	r5, [pc, #24]	; (802f278 <_close_r+0x1c>)
 802f260:	2300      	movs	r3, #0
 802f262:	4604      	mov	r4, r0
 802f264:	4608      	mov	r0, r1
 802f266:	602b      	str	r3, [r5, #0]
 802f268:	f7f2 fedc 	bl	8022024 <_close>
 802f26c:	1c43      	adds	r3, r0, #1
 802f26e:	d102      	bne.n	802f276 <_close_r+0x1a>
 802f270:	682b      	ldr	r3, [r5, #0]
 802f272:	b103      	cbz	r3, 802f276 <_close_r+0x1a>
 802f274:	6023      	str	r3, [r4, #0]
 802f276:	bd38      	pop	{r3, r4, r5, pc}
 802f278:	20001200 	.word	0x20001200

0802f27c <_fstat_r>:
 802f27c:	b538      	push	{r3, r4, r5, lr}
 802f27e:	4d07      	ldr	r5, [pc, #28]	; (802f29c <_fstat_r+0x20>)
 802f280:	2300      	movs	r3, #0
 802f282:	4604      	mov	r4, r0
 802f284:	4608      	mov	r0, r1
 802f286:	4611      	mov	r1, r2
 802f288:	602b      	str	r3, [r5, #0]
 802f28a:	f7f2 fed7 	bl	802203c <_fstat>
 802f28e:	1c43      	adds	r3, r0, #1
 802f290:	d102      	bne.n	802f298 <_fstat_r+0x1c>
 802f292:	682b      	ldr	r3, [r5, #0]
 802f294:	b103      	cbz	r3, 802f298 <_fstat_r+0x1c>
 802f296:	6023      	str	r3, [r4, #0]
 802f298:	bd38      	pop	{r3, r4, r5, pc}
 802f29a:	bf00      	nop
 802f29c:	20001200 	.word	0x20001200

0802f2a0 <_isatty_r>:
 802f2a0:	b538      	push	{r3, r4, r5, lr}
 802f2a2:	4d06      	ldr	r5, [pc, #24]	; (802f2bc <_isatty_r+0x1c>)
 802f2a4:	2300      	movs	r3, #0
 802f2a6:	4604      	mov	r4, r0
 802f2a8:	4608      	mov	r0, r1
 802f2aa:	602b      	str	r3, [r5, #0]
 802f2ac:	f7f2 fed6 	bl	802205c <_isatty>
 802f2b0:	1c43      	adds	r3, r0, #1
 802f2b2:	d102      	bne.n	802f2ba <_isatty_r+0x1a>
 802f2b4:	682b      	ldr	r3, [r5, #0]
 802f2b6:	b103      	cbz	r3, 802f2ba <_isatty_r+0x1a>
 802f2b8:	6023      	str	r3, [r4, #0]
 802f2ba:	bd38      	pop	{r3, r4, r5, pc}
 802f2bc:	20001200 	.word	0x20001200

0802f2c0 <_lseek_r>:
 802f2c0:	b538      	push	{r3, r4, r5, lr}
 802f2c2:	4d07      	ldr	r5, [pc, #28]	; (802f2e0 <_lseek_r+0x20>)
 802f2c4:	4604      	mov	r4, r0
 802f2c6:	4608      	mov	r0, r1
 802f2c8:	4611      	mov	r1, r2
 802f2ca:	2200      	movs	r2, #0
 802f2cc:	602a      	str	r2, [r5, #0]
 802f2ce:	461a      	mov	r2, r3
 802f2d0:	f7f2 fecf 	bl	8022072 <_lseek>
 802f2d4:	1c43      	adds	r3, r0, #1
 802f2d6:	d102      	bne.n	802f2de <_lseek_r+0x1e>
 802f2d8:	682b      	ldr	r3, [r5, #0]
 802f2da:	b103      	cbz	r3, 802f2de <_lseek_r+0x1e>
 802f2dc:	6023      	str	r3, [r4, #0]
 802f2de:	bd38      	pop	{r3, r4, r5, pc}
 802f2e0:	20001200 	.word	0x20001200

0802f2e4 <memcpy>:
 802f2e4:	440a      	add	r2, r1
 802f2e6:	4291      	cmp	r1, r2
 802f2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 802f2ec:	d100      	bne.n	802f2f0 <memcpy+0xc>
 802f2ee:	4770      	bx	lr
 802f2f0:	b510      	push	{r4, lr}
 802f2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 802f2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 802f2fa:	4291      	cmp	r1, r2
 802f2fc:	d1f9      	bne.n	802f2f2 <memcpy+0xe>
 802f2fe:	bd10      	pop	{r4, pc}

0802f300 <memmove>:
 802f300:	4288      	cmp	r0, r1
 802f302:	b510      	push	{r4, lr}
 802f304:	eb01 0402 	add.w	r4, r1, r2
 802f308:	d902      	bls.n	802f310 <memmove+0x10>
 802f30a:	4284      	cmp	r4, r0
 802f30c:	4623      	mov	r3, r4
 802f30e:	d807      	bhi.n	802f320 <memmove+0x20>
 802f310:	1e43      	subs	r3, r0, #1
 802f312:	42a1      	cmp	r1, r4
 802f314:	d008      	beq.n	802f328 <memmove+0x28>
 802f316:	f811 2b01 	ldrb.w	r2, [r1], #1
 802f31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802f31e:	e7f8      	b.n	802f312 <memmove+0x12>
 802f320:	4402      	add	r2, r0
 802f322:	4601      	mov	r1, r0
 802f324:	428a      	cmp	r2, r1
 802f326:	d100      	bne.n	802f32a <memmove+0x2a>
 802f328:	bd10      	pop	{r4, pc}
 802f32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802f32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802f332:	e7f7      	b.n	802f324 <memmove+0x24>

0802f334 <_realloc_r>:
 802f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f338:	4680      	mov	r8, r0
 802f33a:	4614      	mov	r4, r2
 802f33c:	460e      	mov	r6, r1
 802f33e:	b921      	cbnz	r1, 802f34a <_realloc_r+0x16>
 802f340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802f344:	4611      	mov	r1, r2
 802f346:	f7fe becb 	b.w	802e0e0 <_malloc_r>
 802f34a:	b92a      	cbnz	r2, 802f358 <_realloc_r+0x24>
 802f34c:	f7fe fe5c 	bl	802e008 <_free_r>
 802f350:	4625      	mov	r5, r4
 802f352:	4628      	mov	r0, r5
 802f354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f358:	f000 f82e 	bl	802f3b8 <_malloc_usable_size_r>
 802f35c:	4284      	cmp	r4, r0
 802f35e:	4607      	mov	r7, r0
 802f360:	d802      	bhi.n	802f368 <_realloc_r+0x34>
 802f362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802f366:	d812      	bhi.n	802f38e <_realloc_r+0x5a>
 802f368:	4621      	mov	r1, r4
 802f36a:	4640      	mov	r0, r8
 802f36c:	f7fe feb8 	bl	802e0e0 <_malloc_r>
 802f370:	4605      	mov	r5, r0
 802f372:	2800      	cmp	r0, #0
 802f374:	d0ed      	beq.n	802f352 <_realloc_r+0x1e>
 802f376:	42bc      	cmp	r4, r7
 802f378:	4622      	mov	r2, r4
 802f37a:	4631      	mov	r1, r6
 802f37c:	bf28      	it	cs
 802f37e:	463a      	movcs	r2, r7
 802f380:	f7ff ffb0 	bl	802f2e4 <memcpy>
 802f384:	4631      	mov	r1, r6
 802f386:	4640      	mov	r0, r8
 802f388:	f7fe fe3e 	bl	802e008 <_free_r>
 802f38c:	e7e1      	b.n	802f352 <_realloc_r+0x1e>
 802f38e:	4635      	mov	r5, r6
 802f390:	e7df      	b.n	802f352 <_realloc_r+0x1e>
	...

0802f394 <_read_r>:
 802f394:	b538      	push	{r3, r4, r5, lr}
 802f396:	4d07      	ldr	r5, [pc, #28]	; (802f3b4 <_read_r+0x20>)
 802f398:	4604      	mov	r4, r0
 802f39a:	4608      	mov	r0, r1
 802f39c:	4611      	mov	r1, r2
 802f39e:	2200      	movs	r2, #0
 802f3a0:	602a      	str	r2, [r5, #0]
 802f3a2:	461a      	mov	r2, r3
 802f3a4:	f7f2 fe05 	bl	8021fb2 <_read>
 802f3a8:	1c43      	adds	r3, r0, #1
 802f3aa:	d102      	bne.n	802f3b2 <_read_r+0x1e>
 802f3ac:	682b      	ldr	r3, [r5, #0]
 802f3ae:	b103      	cbz	r3, 802f3b2 <_read_r+0x1e>
 802f3b0:	6023      	str	r3, [r4, #0]
 802f3b2:	bd38      	pop	{r3, r4, r5, pc}
 802f3b4:	20001200 	.word	0x20001200

0802f3b8 <_malloc_usable_size_r>:
 802f3b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802f3bc:	1f18      	subs	r0, r3, #4
 802f3be:	2b00      	cmp	r3, #0
 802f3c0:	bfbc      	itt	lt
 802f3c2:	580b      	ldrlt	r3, [r1, r0]
 802f3c4:	18c0      	addlt	r0, r0, r3
 802f3c6:	4770      	bx	lr

0802f3c8 <_init>:
 802f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f3ca:	bf00      	nop
 802f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f3ce:	bc08      	pop	{r3}
 802f3d0:	469e      	mov	lr, r3
 802f3d2:	4770      	bx	lr

0802f3d4 <_fini>:
 802f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802f3d6:	bf00      	nop
 802f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802f3da:	bc08      	pop	{r3}
 802f3dc:	469e      	mov	lr, r3
 802f3de:	4770      	bx	lr
